{"info": {"author": "Marius Killinger", "author_email": "Marius.Killinger@mailbox.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Information Analysis"], "description": ".. image:: https://readthedocs.org/projects/elektronn2/badge/?version=latest\n  :target: http://elektronn2.readthedocs.io/en/latest/?badge=latest\n.. image:: https://img.shields.io/pypi/v/elektronn2.svg\n  :target: https://pypi.org/project/elektronn2/\n.. image:: https://img.shields.io/conda/vn/conda-forge/elektronn2.svg\n  :target: https://github.com/conda-forge/elektronn2-feedstock\n.. image:: https://img.shields.io/conda/pn/conda-forge/elektronn2.svg\n  :target: https://anaconda.org/conda-forge/elektronn2\n\n****************\nAbout ELEKTRONN2\n****************\n\n.. contents::\n  :local:\n\n\nIntroduction\n============\n\n\nWhat is ELEKTRONN2?\n-------------------\n\nELEKTRONN2 is a flexible and extensible **Python toolkit** that facilitates **design,**\n**training and application of neural networks**.\n\nIt can be used for general machine learning tasks, but its main focus is on\n**convolutional neural networks (CNNs) for high-throughput 3D and 2D image analysis**.\n\nELEKTRONN2 is especially useful for efficiently assessing experimental\nneural network architectures thanks to its **powerful interactive shell** that can be\nentered at any time during training, temporarily pausing all calculations.\n\nThe shell interface provides shortcuts and autocompletions for\nfrequently used operations (e.g. adjusting the learning rate)\nand also provides a complete python shell with full read/write access to the network model, the\nplotting subsystem and all training parameters and hyperparameters.\nChanges made in the shell take effect immediately, so you can **monitor, analyse and**\n**manipulate your training sessions directly during their run time**, without losing\nany training progress.\n\nComputationally expensive calculations are **automatically compiled and transparently**\n**executed as highly-optimized CUDA** binaries on your GPU if a CUDA-compatible\ngraphics card is available [#f1]_.\n\nELEKTRONN2 is written in Python (2.7 / and 3.4+) and is a complete rewrite of the\npreviously published `ELEKTRONN <http://elektronn.org>`_ library. The largest\nimprovement is the development of a **functional interface that allows easy creation of**\n**complex data-flow graphs** with loops between arbitrary points in contrast to\nsimple \"chain\"-like models.\nCurrently, the only supported platform is Linux (x86_64).\n\n.. [#f1] You can find out if your graphics card is compatible\n  `here <https://developer.nvidia.com/cuda-gpus>`_.\n  Usage on systems without CUDA is possible but generally not recommended\n  because it is very slow.\n\n.. note::\n   ELEKTRONN2 is being superceded by the more flexible, PyTorch-based\n   `elektronn3 <https://github.com/ELEKTRONN/elektronn3>`_ library. elektronn3\n   is actively developed and supported, so we encourage you to use it instead\n   of ELEKTRONN2 (if elektronn3's more experimental status and currently less\n   extensive documentation are acceptable for you).\n\n\nUse cases\n---------\n\nAlthough other high-level libraries are available (Keras, Lasagne), they all\nlacked desired features_ and flexibility for our work,\nmostly in terms of an intuitive method to specify complicated computational\ngraphs and utilities for training and data handling, especially in the domain\nof specialised large-scale 3-dimensional image data analysis for\n`connectomics <https://en.wikipedia.org/wiki/Connectomics>`_ research\n(e.g. tracing, mapping and segmenting neurons in in SBEM [#f2]_ data sets).\n\nAlthough the mentioned use cases are ELEKTRONN2's specialty, it can be used and\nextended for a wide range of other tasks thanks to its modular object-oriented\nAPI design_ (for example, new operations can be implemented as subclasses of the\n`Node <http://elektronn2.readthedocs.io/en/latest/source/elektronn2.neuromancer.html#elektronn2.neuromancer.node_basic.Node>`_\nclass and seamlessly integrated into neural network models).\n\n.. [#f2] `Serial Block-Face Scanning Electron Microscopy <http://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0020329>`_,\n  a method to generate high resolution 3D images from small samples, such as\n  brain tissue.\n\n.. figure:: https://raw.githubusercontent.com/ELEKTRONN/ELEKTRONN2/master/docs/_images/j0126_blend.jpg\n\n  Example visualisation of ELEKTRONN2's usage on a 3D SBEM data set\n  (blending input to output from left to right).\n\n  +--------------------------------------------------+------------------------------------------------------------+\n  | Left (input: raw data)                           | Right (output: predictions by ELEKTRONN2, color-coded)     |\n  +==================================================+============================================================+\n  | 3D electron microscopy images of a zebra finch   | Probability of barriers (union of cell boundaries and      |\n  | brain (area X dataset j0126 by J\u00f6rgen Kornfeld). | extracellular space, marked in **white**) and mitochondria |\n  |                                                  | (marked in **blue**) predicted by ELEKTRONN2.              |\n  +--------------------------------------------------+------------------------------------------------------------+\n\n\nInstallation\n------------\n\nSee the installation instructions at\nhttps://elektronn2.readthedocs.io/en/latest/installation.html.\n\n\n.. _design:\n\nDesign principles\n=================\n\nELEKTRONN2 adds another abstraction layer to Theano. To create a model, the\nuser has to connect different types of node objects and thereby builds a graph\nas with Theano. But the creation of the raw Theano graph, composed of symbolic\nvariables and trainable model parameters, is hidden and managed through usage\nof sensible default values and bundling of stereotypical Theano operations into\na single ELEKTRONN2 node.\nFor example, creating a convolution layer consists of initialising weights,\nperforming the convolution, adding the bias, applying the activation function\nand optional operations such as dropout or batch normalisation. Involved\nparameters might be trainable (e.g. convolution weights) or non-trainable but\nchangeable during training (e.g. dropout rates).\n\n\nFeatures\n========\n\n\nOperations\n----------\n\n* Perceptron / fully-connected / dot-product layer, works for arbitrary\n  dimensional input\n* Convolution, 1-,2-,3-dimensional\n* Max/Average Pooling, 1,2,3-dimensional\n* UpConv, 1,2,3-dimensional\n* Max Fragment Pooling (MFP), 1,2,3-dimensional\n* Gated Recurrent Unit (GRU) and Long Short Term Memory (LSTM) unit\n* Recurrence / Scan over arbitrary sub-graph: support of multiple inputs\n  multiple outputs and feed-back of multiple values per iteration\n* Batch normalisation with automatic accumulation of whole data set statistics\n  during training\n* Gaussian noise layer (for Variational Auto Encoders)\n* Activation functions: tanh, sigmoid, relu, prelu, abs, softplus, maxout,\n  softmax-layer\n* Local Response Normalisation (LRN), feature-wise or spatially\n* Basic operations such as concatenation, slicing, cropping, or element-wise\n  functions\n\n\nLoss functions\n--------------\n\n* Bernoulli / Multinoulli negative log likelihood\n* Gaussian negative log likelihood\n* Squared Deviation Loss, (margin optional)\n* Absolute Deviation Loss, (margin optional)\n* Weighted sum of losses for multi-task training\n\n\nOptimisers\n----------\n\n* Stochastic Gradient Descent (SGD)\n* AdaGrad\n* AdaDelta\n* Adam\n\n\nTrainer\n-------\n\n* Automatic creation of training directory to which all files (parameters,\n  log files, previews etc.) will be saved\n* Frequent printing and logging of current state, iteration speed etc.\n* Frequent plotting of monitored states (error samples on training and\n  validation data, classification errors and custom monitoring targets)\n* Frequent saving of intermediate parameter states and history of monitored\n  variables\n* Frequent preview prediction images for CNN training\n* Customisable schedules for non-trainable meta-parameters (e.g. dropout rates,\n  learning rate, momentum)\n* Fully functional python command line during training, usable for\n  debugging/inspection (e.g. of inputs, gradient statistics) or for changing\n  meta-parameters\n\n\nTraining Examples for CNNs\n--------------------------\n\n* Randomised patch extraction from a list of of input/target image pairs\n* Data augmentation trough histogram distortions, rotation, shear, stretch,\n  reflection and perspective distortion\n* Real-time data augmentation through a queue with background threads.\n\n\nUtilities\n---------\n\n* Array interface for `KNOSSOS <https://knossostool.org/>`_ data sets with\n  caching, pre-fetching and support for multiple data sets as channel axis.\n* Viewer for multichannel 3-dimensional image arrays within the Python runtime\n* Function to convert ID images to boundary images\n* Utilities needed for skeltonisation agent training and application\n* Visualisation of the computational graph\n* Class for profiling within loops\n* KD Tree that supports append (realised through mixture of KD-Tree and\n  brute-force search and amortised rebuilds)\n* Daemon script for the synchronised start of experiments on several hosts,\n  based on resource occupation.\n\n\nDocumentation and usage examples\n================================\n\nThe documentation is hosted at `<https://elektronn2.readthedocs.io/>`_\n(built automatically from the sources in the ``docs/`` subdirectory of the\ncode repository).\n\n\nContributors\n============\n\n* `Marius Killinger <https://github.com/xeray>`_ (main developer)\n* `Martin Drawitsch <https://github.com/mdraw>`_\n* `Philipp Schubert <https://github.com/pschubert>`_\n\nELEKTRONN2 was funded by `Winfried Denk's lab <http://www.neuro.mpg.de/denk>`_\nat the Max Planck Institute of Neurobiology.\n\n`J\u00f6rgen Kornfeld <http://www.neuro.mpg.de/person/43611/3242677>`_\nwas academic advisor to this project.\n\n\nLicense\n=======\n\nELEKTRONN2 is published under the terms of the GPLv3 license.\nMore details can be found in the `LICENSE.txt\n<https://github.com/ELEKTRONN/ELEKTRONN2/blob/master/LICENSE.txt>`_ file.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.elektronn.org/", "keywords": "cnn theano neural network machine learning classification", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "elektronn2", "package_url": "https://pypi.org/project/elektronn2/", "platform": "", "project_url": "https://pypi.org/project/elektronn2/", "project_urls": {"Homepage": "http://www.elektronn.org/"}, "release_url": "https://pypi.org/project/elektronn2/0.6.0/", "requires_dist": ["numpy (>=1.8)", "scipy (>=0.14)", "matplotlib (>=1.4)", "h5py (>=2.2)", "theano (<0.10,>=0.8)", "future (>=0.15)", "tqdm (>=4.5)", "colorlog (>=2.7)", "prompt-toolkit (<2,>=1.0.3)", "jedi (>=0.9.0)", "pydotplus", "seaborn", "scikit-learn", "psutil (>=5.0.1)", "scikit-image (>=0.12.3)", "numba (>=0.25)", "ipython; extra == 'ipython'", "knossos-utils; extra == 'knossos'"], "requires_python": "", "summary": "ELEKTRONN2 a is highly configurable toolkit for training 3d/2d CNNs and general Neural Networks", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://elektronn2.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/elektronn2/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d66cdd82f257bf081a1811c074c87ec975badf2/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f656c656b74726f6e6e322f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/project/elektronn2/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/elektronn2.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/878ae0e8eb451922c096ddbef6d42d88a14422c1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f656c656b74726f6e6e322e737667\"></a>\n<a href=\"https://github.com/conda-forge/elektronn2-feedstock\" rel=\"nofollow\"><img alt=\"https://img.shields.io/conda/vn/conda-forge/elektronn2.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b182fbe1e466148eeda59b61a16cef371da6e2ab/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f656c656b74726f6e6e322e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/elektronn2\" rel=\"nofollow\"><img alt=\"https://img.shields.io/conda/pn/conda-forge/elektronn2.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d54c2f501585380c591f3efdc7e07922f536ad8/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f706e2f636f6e64612d666f7267652f656c656b74726f6e6e322e737667\"></a>\n<div id=\"about-elektronn2\">\n<h2>About ELEKTRONN2</h2>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#introduction\" id=\"id3\" rel=\"nofollow\">Introduction</a><ul>\n<li><a href=\"#what-is-elektronn2\" id=\"id4\" rel=\"nofollow\">What is ELEKTRONN2?</a></li>\n<li><a href=\"#use-cases\" id=\"id5\" rel=\"nofollow\">Use cases</a></li>\n<li><a href=\"#installation\" id=\"id6\" rel=\"nofollow\">Installation</a></li>\n</ul>\n</li>\n<li><a href=\"#design-principles\" id=\"id7\" rel=\"nofollow\">Design principles</a></li>\n<li><a href=\"#features\" id=\"id8\" rel=\"nofollow\">Features</a><ul>\n<li><a href=\"#operations\" id=\"id9\" rel=\"nofollow\">Operations</a></li>\n<li><a href=\"#loss-functions\" id=\"id10\" rel=\"nofollow\">Loss functions</a></li>\n<li><a href=\"#optimisers\" id=\"id11\" rel=\"nofollow\">Optimisers</a></li>\n<li><a href=\"#trainer\" id=\"id12\" rel=\"nofollow\">Trainer</a></li>\n<li><a href=\"#training-examples-for-cnns\" id=\"id13\" rel=\"nofollow\">Training Examples for CNNs</a></li>\n<li><a href=\"#utilities\" id=\"id14\" rel=\"nofollow\">Utilities</a></li>\n</ul>\n</li>\n<li><a href=\"#documentation-and-usage-examples\" id=\"id15\" rel=\"nofollow\">Documentation and usage examples</a></li>\n<li><a href=\"#contributors\" id=\"id16\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#license\" id=\"id17\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Introduction</a></h3>\n<div id=\"what-is-elektronn2\">\n<h4><a href=\"#id4\" rel=\"nofollow\">What is ELEKTRONN2?</a></h4>\n<p>ELEKTRONN2 is a flexible and extensible <strong>Python toolkit</strong> that facilitates <strong>design,</strong>\n<strong>training and application of neural networks</strong>.</p>\n<p>It can be used for general machine learning tasks, but its main focus is on\n<strong>convolutional neural networks (CNNs) for high-throughput 3D and 2D image analysis</strong>.</p>\n<p>ELEKTRONN2 is especially useful for efficiently assessing experimental\nneural network architectures thanks to its <strong>powerful interactive shell</strong> that can be\nentered at any time during training, temporarily pausing all calculations.</p>\n<p>The shell interface provides shortcuts and autocompletions for\nfrequently used operations (e.g. adjusting the learning rate)\nand also provides a complete python shell with full read/write access to the network model, the\nplotting subsystem and all training parameters and hyperparameters.\nChanges made in the shell take effect immediately, so you can <strong>monitor, analyse and</strong>\n<strong>manipulate your training sessions directly during their run time</strong>, without losing\nany training progress.</p>\n<p>Computationally expensive calculations are <strong>automatically compiled and transparently</strong>\n<strong>executed as highly-optimized CUDA</strong> binaries on your GPU if a CUDA-compatible\ngraphics card is available <a href=\"#f1\" id=\"id1\" rel=\"nofollow\">[1]</a>.</p>\n<p>ELEKTRONN2 is written in Python (2.7 / and 3.4+) and is a complete rewrite of the\npreviously published <a href=\"http://elektronn.org\" rel=\"nofollow\">ELEKTRONN</a> library. The largest\nimprovement is the development of a <strong>functional interface that allows easy creation of</strong>\n<strong>complex data-flow graphs</strong> with loops between arbitrary points in contrast to\nsimple \u201cchain\u201d-like models.\nCurrently, the only supported platform is Linux (x86_64).</p>\n<table id=\"f1\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>You can find out if your graphics card is compatible\n<a href=\"https://developer.nvidia.com/cuda-gpus\" rel=\"nofollow\">here</a>.\nUsage on systems without CUDA is possible but generally not recommended\nbecause it is very slow.</td></tr>\n</tbody>\n</table>\n<div>\n<p>Note</p>\n<p>ELEKTRONN2 is being superceded by the more flexible, PyTorch-based\n<a href=\"https://github.com/ELEKTRONN/elektronn3\" rel=\"nofollow\">elektronn3</a> library. elektronn3\nis actively developed and supported, so we encourage you to use it instead\nof ELEKTRONN2 (if elektronn3\u2019s more experimental status and currently less\nextensive documentation are acceptable for you).</p>\n</div>\n</div>\n<div id=\"use-cases\">\n<h4><a href=\"#id5\" rel=\"nofollow\">Use cases</a></h4>\n<p>Although other high-level libraries are available (Keras, Lasagne), they all\nlacked desired <a href=\"#features\" rel=\"nofollow\">features</a> and flexibility for our work,\nmostly in terms of an intuitive method to specify complicated computational\ngraphs and utilities for training and data handling, especially in the domain\nof specialised large-scale 3-dimensional image data analysis for\n<a href=\"https://en.wikipedia.org/wiki/Connectomics\" rel=\"nofollow\">connectomics</a> research\n(e.g. tracing, mapping and segmenting neurons in in SBEM <a href=\"#f2\" id=\"id2\" rel=\"nofollow\">[2]</a> data sets).</p>\n<p>Although the mentioned use cases are ELEKTRONN2\u2019s specialty, it can be used and\nextended for a wide range of other tasks thanks to its modular object-oriented\nAPI <a href=\"#design\" rel=\"nofollow\">design</a> (for example, new operations can be implemented as subclasses of the\n<a href=\"http://elektronn2.readthedocs.io/en/latest/source/elektronn2.neuromancer.html#elektronn2.neuromancer.node_basic.Node\" rel=\"nofollow\">Node</a>\nclass and seamlessly integrated into neural network models).</p>\n<table id=\"f2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td><a href=\"http://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0020329\" rel=\"nofollow\">Serial Block-Face Scanning Electron Microscopy</a>,\na method to generate high resolution 3D images from small samples, such as\nbrain tissue.</td></tr>\n</tbody>\n</table>\n<div>\n<img alt=\"https://raw.githubusercontent.com/ELEKTRONN/ELEKTRONN2/master/docs/_images/j0126_blend.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc4ff7f51fd1de00cdbf9baa8d1cf4066756ec18/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f454c454b54524f4e4e2f454c454b54524f4e4e322f6d61737465722f646f63732f5f696d616765732f6a303132365f626c656e642e6a7067\">\n<p>Example visualisation of ELEKTRONN2\u2019s usage on a 3D SBEM data set\n(blending input to output from left to right).</p>\n<div>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Left (input: raw data)</th>\n<th>Right (output: predictions by ELEKTRONN2, color-coded)</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>3D electron microscopy images of a zebra finch\nbrain (area X dataset j0126 by J\u00f6rgen Kornfeld).</td>\n<td>Probability of barriers (union of cell boundaries and\nextracellular space, marked in <strong>white</strong>) and mitochondria\n(marked in <strong>blue</strong>) predicted by ELEKTRONN2.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div id=\"installation\">\n<h4><a href=\"#id6\" rel=\"nofollow\">Installation</a></h4>\n<p>See the installation instructions at\n<a href=\"https://elektronn2.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">https://elektronn2.readthedocs.io/en/latest/installation.html</a>.</p>\n</div>\n</div>\n<div id=\"design-principles\">\n<span id=\"design\"></span><h3><a href=\"#id7\" rel=\"nofollow\">Design principles</a></h3>\n<p>ELEKTRONN2 adds another abstraction layer to Theano. To create a model, the\nuser has to connect different types of node objects and thereby builds a graph\nas with Theano. But the creation of the raw Theano graph, composed of symbolic\nvariables and trainable model parameters, is hidden and managed through usage\nof sensible default values and bundling of stereotypical Theano operations into\na single ELEKTRONN2 node.\nFor example, creating a convolution layer consists of initialising weights,\nperforming the convolution, adding the bias, applying the activation function\nand optional operations such as dropout or batch normalisation. Involved\nparameters might be trainable (e.g. convolution weights) or non-trainable but\nchangeable during training (e.g. dropout rates).</p>\n</div>\n<div id=\"features\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Features</a></h3>\n<div id=\"operations\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Operations</a></h4>\n<ul>\n<li>Perceptron / fully-connected / dot-product layer, works for arbitrary\ndimensional input</li>\n<li>Convolution, 1-,2-,3-dimensional</li>\n<li>Max/Average Pooling, 1,2,3-dimensional</li>\n<li>UpConv, 1,2,3-dimensional</li>\n<li>Max Fragment Pooling (MFP), 1,2,3-dimensional</li>\n<li>Gated Recurrent Unit (GRU) and Long Short Term Memory (LSTM) unit</li>\n<li>Recurrence / Scan over arbitrary sub-graph: support of multiple inputs\nmultiple outputs and feed-back of multiple values per iteration</li>\n<li>Batch normalisation with automatic accumulation of whole data set statistics\nduring training</li>\n<li>Gaussian noise layer (for Variational Auto Encoders)</li>\n<li>Activation functions: tanh, sigmoid, relu, prelu, abs, softplus, maxout,\nsoftmax-layer</li>\n<li>Local Response Normalisation (LRN), feature-wise or spatially</li>\n<li>Basic operations such as concatenation, slicing, cropping, or element-wise\nfunctions</li>\n</ul>\n</div>\n<div id=\"loss-functions\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Loss functions</a></h4>\n<ul>\n<li>Bernoulli / Multinoulli negative log likelihood</li>\n<li>Gaussian negative log likelihood</li>\n<li>Squared Deviation Loss, (margin optional)</li>\n<li>Absolute Deviation Loss, (margin optional)</li>\n<li>Weighted sum of losses for multi-task training</li>\n</ul>\n</div>\n<div id=\"optimisers\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Optimisers</a></h4>\n<ul>\n<li>Stochastic Gradient Descent (SGD)</li>\n<li>AdaGrad</li>\n<li>AdaDelta</li>\n<li>Adam</li>\n</ul>\n</div>\n<div id=\"trainer\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Trainer</a></h4>\n<ul>\n<li>Automatic creation of training directory to which all files (parameters,\nlog files, previews etc.) will be saved</li>\n<li>Frequent printing and logging of current state, iteration speed etc.</li>\n<li>Frequent plotting of monitored states (error samples on training and\nvalidation data, classification errors and custom monitoring targets)</li>\n<li>Frequent saving of intermediate parameter states and history of monitored\nvariables</li>\n<li>Frequent preview prediction images for CNN training</li>\n<li>Customisable schedules for non-trainable meta-parameters (e.g. dropout rates,\nlearning rate, momentum)</li>\n<li>Fully functional python command line during training, usable for\ndebugging/inspection (e.g. of inputs, gradient statistics) or for changing\nmeta-parameters</li>\n</ul>\n</div>\n<div id=\"training-examples-for-cnns\">\n<h4><a href=\"#id13\" rel=\"nofollow\">Training Examples for CNNs</a></h4>\n<ul>\n<li>Randomised patch extraction from a list of of input/target image pairs</li>\n<li>Data augmentation trough histogram distortions, rotation, shear, stretch,\nreflection and perspective distortion</li>\n<li>Real-time data augmentation through a queue with background threads.</li>\n</ul>\n</div>\n<div id=\"utilities\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Utilities</a></h4>\n<ul>\n<li>Array interface for <a href=\"https://knossostool.org/\" rel=\"nofollow\">KNOSSOS</a> data sets with\ncaching, pre-fetching and support for multiple data sets as channel axis.</li>\n<li>Viewer for multichannel 3-dimensional image arrays within the Python runtime</li>\n<li>Function to convert ID images to boundary images</li>\n<li>Utilities needed for skeltonisation agent training and application</li>\n<li>Visualisation of the computational graph</li>\n<li>Class for profiling within loops</li>\n<li>KD Tree that supports append (realised through mixture of KD-Tree and\nbrute-force search and amortised rebuilds)</li>\n<li>Daemon script for the synchronised start of experiments on several hosts,\nbased on resource occupation.</li>\n</ul>\n</div>\n</div>\n<div id=\"documentation-and-usage-examples\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Documentation and usage examples</a></h3>\n<p>The documentation is hosted at <a href=\"https://elektronn2.readthedocs.io/\" rel=\"nofollow\">https://elektronn2.readthedocs.io/</a>\n(built automatically from the sources in the <tt>docs/</tt> subdirectory of the\ncode repository).</p>\n</div>\n<div id=\"contributors\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Contributors</a></h3>\n<ul>\n<li><a href=\"https://github.com/xeray\" rel=\"nofollow\">Marius Killinger</a> (main developer)</li>\n<li><a href=\"https://github.com/mdraw\" rel=\"nofollow\">Martin Drawitsch</a></li>\n<li><a href=\"https://github.com/pschubert\" rel=\"nofollow\">Philipp Schubert</a></li>\n</ul>\n<p>ELEKTRONN2 was funded by <a href=\"http://www.neuro.mpg.de/denk\" rel=\"nofollow\">Winfried Denk\u2019s lab</a>\nat the Max Planck Institute of Neurobiology.</p>\n<p><a href=\"http://www.neuro.mpg.de/person/43611/3242677\" rel=\"nofollow\">J\u00f6rgen Kornfeld</a>\nwas academic advisor to this project.</p>\n</div>\n<div id=\"license\">\n<h3><a href=\"#id17\" rel=\"nofollow\">License</a></h3>\n<p>ELEKTRONN2 is published under the terms of the GPLv3 license.\nMore details can be found in the <a href=\"https://github.com/ELEKTRONN/ELEKTRONN2/blob/master/LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a> file.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4034702, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "88c8e0c5bbe280dc3c514be5a7f95aa8", "sha256": "e48f00ab91372615f6bf55ec77fdda019f41169b13f4edd8125b9640bc1092e8"}, "downloads": -1, "filename": "elektronn2-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "88c8e0c5bbe280dc3c514be5a7f95aa8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 324661, "upload_time": "2017-05-28T16:32:16", "upload_time_iso_8601": "2017-05-28T16:32:16.053889Z", "url": "https://files.pythonhosted.org/packages/79/66/89d4ab57bc2e3dba9afd83e37326e3085a0cf8e16b063e8abc85164ce9e9/elektronn2-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4659e3ecf3325bf8a2fe4dcca540686f", "sha256": "87484e4ef199144e0959a0574c4340d71800419ce99f24e106d04142bb1e9238"}, "downloads": -1, "filename": "elektronn2-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4659e3ecf3325bf8a2fe4dcca540686f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 297950, "upload_time": "2017-05-28T16:32:19", "upload_time_iso_8601": "2017-05-28T16:32:19.404820Z", "url": "https://files.pythonhosted.org/packages/c6/23/7d9127dccdf2a531cb9994e2721c97dc54e4dbd7b15b4b7014a496e2aa57/elektronn2-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "36a10c3f061eece930a394e4fee68ad1", "sha256": "47203f25c8f32d0bba755b018156158c0866bb1aa65f85bdaa5cd66a753ac4d3"}, "downloads": -1, "filename": "elektronn2-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "36a10c3f061eece930a394e4fee68ad1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 323584, "upload_time": "2017-07-10T17:38:09", "upload_time_iso_8601": "2017-07-10T17:38:09.117476Z", "url": "https://files.pythonhosted.org/packages/d0/b8/34462d9885f655b8151ea3aa652b97d6560c5405f02cd38959df5fdb349e/elektronn2-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9583c447cfa86999905bf5db6e122b89", "sha256": "f72a758056773789c2f0d5bc36271c980f65ea13eb8c2b4e4d2f8fc42be29c3d"}, "downloads": -1, "filename": "elektronn2-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9583c447cfa86999905bf5db6e122b89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 299915, "upload_time": "2017-07-10T17:38:12", "upload_time_iso_8601": "2017-07-10T17:38:12.403234Z", "url": "https://files.pythonhosted.org/packages/9e/19/1906c42cfce169d9bfbdeacbe9c768b9b604b1bf31328add01ba468727db/elektronn2-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "26ceddb58ab3431f60447a5113360228", "sha256": "9b9f0c5b982e4afbdb373a705aa23637ecadd88b94a593e1e23764c9b39b32ba"}, "downloads": -1, "filename": "elektronn2-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26ceddb58ab3431f60447a5113360228", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 324170, "upload_time": "2017-07-19T17:50:38", "upload_time_iso_8601": "2017-07-19T17:50:38.142554Z", "url": "https://files.pythonhosted.org/packages/70/48/57d42185bc27a41aac937ed1e424d162fc8fa739ea9cc6bfbe146d620add/elektronn2-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c673902e1564d5a171c0b2bd2becf9f", "sha256": "8179eff1cdd00454aa02db04f8c0a7971f65a616618257e8354bea5ad542a481"}, "downloads": -1, "filename": "elektronn2-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0c673902e1564d5a171c0b2bd2becf9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 300555, "upload_time": "2017-07-19T17:50:40", "upload_time_iso_8601": "2017-07-19T17:50:40.207077Z", "url": "https://files.pythonhosted.org/packages/82/eb/0456a3cce7e707fe509d34b58e673fb85bb8ac48d77964241fcbcb5985d6/elektronn2-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "c4ed8da94df8f8907d0d5aced77a22ec", "sha256": "1654c2b3041c0191d15b8b66740c84b803a67034b280f287f5e6838f259e0d51"}, "downloads": -1, "filename": "elektronn2-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c4ed8da94df8f8907d0d5aced77a22ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 324348, "upload_time": "2017-08-07T16:47:29", "upload_time_iso_8601": "2017-08-07T16:47:29.668456Z", "url": "https://files.pythonhosted.org/packages/80/84/8cfb92d5ddc34bd0fcb118dc4dfc07a513050cc804fdf4ca6a96468b345b/elektronn2-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0f3eddba07632f6cc985cdf3290d96e", "sha256": "25c8512c83b773d74e56661ef06d41c3d75eac85e9bc598882a19944fa943486"}, "downloads": -1, "filename": "elektronn2-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e0f3eddba07632f6cc985cdf3290d96e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 300711, "upload_time": "2017-08-07T16:47:32", "upload_time_iso_8601": "2017-08-07T16:47:32.281724Z", "url": "https://files.pythonhosted.org/packages/ea/43/488615cf36c616ae384bab83711e60656e410649de5cf958b56efaa8870f/elektronn2-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "8f8ad94fad3dc290b9b19041e563d23f", "sha256": "6c7a15fcbb4991dd3cbc0528f37517b3ded61b1e40c11b62b4e83a3fbc1e8aad"}, "downloads": -1, "filename": "elektronn2-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8f8ad94fad3dc290b9b19041e563d23f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 325710, "upload_time": "2017-09-05T23:28:03", "upload_time_iso_8601": "2017-09-05T23:28:03.048204Z", "url": "https://files.pythonhosted.org/packages/1c/b9/bd54520fa08d5d024d4728081f5f5dcad330f1c00e791b19d8de63bb2410/elektronn2-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f90184dad88a1f09d28135393fa1cdc6", "sha256": "a6dc12d851a98edcd5cb534277d791132d5ede95050400dbe56ecb1928557742"}, "downloads": -1, "filename": "elektronn2-0.5.0.tar.gz", "has_sig": false, "md5_digest": "f90184dad88a1f09d28135393fa1cdc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 302087, "upload_time": "2017-09-05T23:28:06", "upload_time_iso_8601": "2017-09-05T23:28:06.456379Z", "url": "https://files.pythonhosted.org/packages/d8/cf/c999a1d7395ae01ed5e5704d91c8a3c0332c399951380ce97bbabe6c9eb4/elektronn2-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "2a7474062a973ea4acbe66b0a3054804", "sha256": "f41a8a9da66323336a222bc488b8f4c8f00dbc15251a57002b6ee199dd7c728f"}, "downloads": -1, "filename": "elektronn2-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2a7474062a973ea4acbe66b0a3054804", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 326042, "upload_time": "2017-10-09T12:45:20", "upload_time_iso_8601": "2017-10-09T12:45:20.059501Z", "url": "https://files.pythonhosted.org/packages/bb/69/90acf58d03e508c96d1ee110fd4d33b988730693b2369ad40b61493e408c/elektronn2-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "489df699040f4a0ad3fb8e473de0d4a5", "sha256": "8ba1e33b900106f339cfb9306eefed080eed7f74374a67118962a8cb5dc2ff48"}, "downloads": -1, "filename": "elektronn2-0.5.1.tar.gz", "has_sig": false, "md5_digest": "489df699040f4a0ad3fb8e473de0d4a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 302356, "upload_time": "2017-10-09T12:45:23", "upload_time_iso_8601": "2017-10-09T12:45:23.193760Z", "url": "https://files.pythonhosted.org/packages/d4/a1/c68172474c53e629337d70de4979d21fd2a16078eead0f8d69449992c409/elektronn2-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "95c419048baee74991c34e3fb7b1d3b8", "sha256": "410dc85a404b0d6e662dba7ef46f46c05c6534d4f0f5109de8448682a8dec8ae"}, "downloads": -1, "filename": "elektronn2-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "95c419048baee74991c34e3fb7b1d3b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 325241, "upload_time": "2018-07-05T22:35:59", "upload_time_iso_8601": "2018-07-05T22:35:59.404842Z", "url": "https://files.pythonhosted.org/packages/6b/a4/40d56152f2b980763c24e6b7f163e71fc55887b7f83e6b6beb433955adcf/elektronn2-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39f8754956e297bb609bd26b67fc75c8", "sha256": "6777f929bdae9101abc25da9518dd47ca13edd975ae57768aa199e1a4fe8b7e0"}, "downloads": -1, "filename": "elektronn2-v0.6.0.tar.gz", "has_sig": false, "md5_digest": "39f8754956e297bb609bd26b67fc75c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 324954, "upload_time": "2018-07-05T22:36:02", "upload_time_iso_8601": "2018-07-05T22:36:02.066907Z", "url": "https://files.pythonhosted.org/packages/b3/29/5c0e6263f94d1528dcc8a7457fecc685bcfa1e18a18d9cae94e69dde8f51/elektronn2-v0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "95c419048baee74991c34e3fb7b1d3b8", "sha256": "410dc85a404b0d6e662dba7ef46f46c05c6534d4f0f5109de8448682a8dec8ae"}, "downloads": -1, "filename": "elektronn2-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "95c419048baee74991c34e3fb7b1d3b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 325241, "upload_time": "2018-07-05T22:35:59", "upload_time_iso_8601": "2018-07-05T22:35:59.404842Z", "url": "https://files.pythonhosted.org/packages/6b/a4/40d56152f2b980763c24e6b7f163e71fc55887b7f83e6b6beb433955adcf/elektronn2-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39f8754956e297bb609bd26b67fc75c8", "sha256": "6777f929bdae9101abc25da9518dd47ca13edd975ae57768aa199e1a4fe8b7e0"}, "downloads": -1, "filename": "elektronn2-v0.6.0.tar.gz", "has_sig": false, "md5_digest": "39f8754956e297bb609bd26b67fc75c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 324954, "upload_time": "2018-07-05T22:36:02", "upload_time_iso_8601": "2018-07-05T22:36:02.066907Z", "url": "https://files.pythonhosted.org/packages/b3/29/5c0e6263f94d1528dcc8a7457fecc685bcfa1e18a18d9cae94e69dde8f51/elektronn2-v0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:54 2020"}