{"info": {"author": "Guillaume Lepert", "author_email": "guillaume.lepert07@imperial.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: C", "Programming Language :: Cython", "Programming Language :: Python :: 2.7", "Topic :: Home Automation", "Topic :: Scientific/Engineering"], "description": "Object-oriented, high-level interface for Andor cameras (SDK2), written in Cython. \n\n.. Note::\n   \n   - This is not a stand-alone driver. Andor's proprietary drivers must be installed.\n     The setup script expects to find ``libandor.so`` in ``/usr/local/lib/``\n     (the driver's default installation directory).\n   \n   - Andor provides a low-level, `ctypes` wrapper on their SDK, called ``atcmd``.\n     If available, it will be imported as `Andor._sdk`.\n     \n   - This documentation should be read along Andor's Software Development Kit manual.\n   \n   - **To build the extension**::\n   \n     $ python2.7 setup_extension.py build_ext --inplace\n\n.. Warning::\n   This module is not thread-safe. If `AcqMode.wait` is blocking a\n   background thread, and another function call is made from the main thread,\n   the main thread will block too.\n\n-------\n\nUsage\n-----\n\nThe camera is controlled via the top-level class `Andor`:\n\n    >>> from andor2 import Andor\n    >>> cam = Andor()\n\nThe `Andor` instance is just a container for other objects\nthat control various aspect of the camera:\n\n* `Info` : camera information and available features\n* `Temperature` : cooler control\n* `Shutter` : shutter control\n* `EM`: electron-multiplying gain control\n* `Detector`: CCD control, including:\n\n  - `VSS`: vertical shift speed\n  - `HSS`: horizontal shift speed\n  - `ADC`: analog-to-digital converter\n  - `OutputAmp`: the output amplifier\n  - `PreAmp`: pre-amplifier control\n\n* `ReadMode`: select the CCD read-out mode (full frame, vertical binning, tracks, etc.)\n* `Acquire <AcqMode>`: control the acquisition mode (single shot, video, accumulate, kinetic)\n\nExamples\n--------\n\n    >>> from andor2 import Andor\n    >>> cam = Andor()\n    >>> cam.Temperature.setpoint = -74  # start cooling\n    >>> cam.Temperature.cooler = True  \n    >>> cam.Detector.OutputAmp(1)       # use conventional CCD amplifier instead of electron multiplying\n    >>> cam.PreAmp(2)                   # set pre-amplifier gain to 4.9\n    >>> cam.exposure = 10               # set exposure time to 10 ms\n    >>> cam.ReadMode.SingleTrack(590,5) # set readout mode: single track, 5 pixels wide, centered at 590 pixels\n\n    >>> cam.Acquire.Video()             # set acquisition mode to video (continuous)\n    >>> data = cam.Acquire.Newest(10)   # collect latest 10 images as numpy array\n    >>> cam.Acquire.stop()\n\n    >>> cam.Acquire.Kinetic(10, 0.1, 5, 0.01)    # set up kinetic sequence of 10 images every 100ms\n                                             # with each image being an accumulation of 5 images\n                                             # taken 10ms apart\n    >>> cam.Acquire.start()                      # start acquiring\n    >>> cam.Acquire.wait()                       # block until acquisition terminates\n    >>> data = cam.Acquire.GetAcquiredData()     # collect all data", "description_content_type": null, "docs_url": "https://pythonhosted.org/andor/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "andor", "package_url": "https://pypi.org/project/andor/", "platform": "linux", "project_url": "https://pypi.org/project/andor/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/andor/1.14/", "requires_dist": null, "requires_python": null, "summary": "Object-oriented interface for Andor EMCCD cameras", "version": "1.14", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Object-oriented, high-level interface for Andor cameras (SDK2), written in Cython.</p>\n<div>\n<p>Note</p>\n<ul>\n<li><p>This is not a stand-alone driver. Andor\u2019s proprietary drivers must be installed.\nThe setup script expects to find <tt>libandor.so</tt> in <tt>/usr/local/lib/</tt>\n(the driver\u2019s default installation directory).</p>\n</li>\n<li><p>Andor provides a low-level, <cite>ctypes</cite> wrapper on their SDK, called <tt>atcmd</tt>.\nIf available, it will be imported as <cite>Andor._sdk</cite>.</p>\n</li>\n<li><p>This documentation should be read along Andor\u2019s Software Development Kit manual.</p>\n</li>\n<li><p><strong>To build the extension</strong>:</p>\n<pre>$ python2.7 setup_extension.py build_ext --inplace\n</pre>\n</li>\n</ul>\n</div>\n<div>\n<p>Warning</p>\n<p>This module is not thread-safe. If <cite>AcqMode.wait</cite> is blocking a\nbackground thread, and another function call is made from the main thread,\nthe main thread will block too.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The camera is controlled via the top-level class <cite>Andor</cite>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from andor2 import Andor\n&gt;&gt;&gt; cam = Andor()\n</pre>\n</blockquote>\n<p>The <cite>Andor</cite> instance is just a container for other objects\nthat control various aspect of the camera:</p>\n<ul>\n<li><cite>Info</cite> : camera information and available features</li>\n<li><cite>Temperature</cite> : cooler control</li>\n<li><cite>Shutter</cite> : shutter control</li>\n<li><cite>EM</cite>: electron-multiplying gain control</li>\n<li><cite>Detector</cite>: CCD control, including:<ul>\n<li><cite>VSS</cite>: vertical shift speed</li>\n<li><cite>HSS</cite>: horizontal shift speed</li>\n<li><cite>ADC</cite>: analog-to-digital converter</li>\n<li><cite>OutputAmp</cite>: the output amplifier</li>\n<li><cite>PreAmp</cite>: pre-amplifier control</li>\n</ul>\n</li>\n<li><cite>ReadMode</cite>: select the CCD read-out mode (full frame, vertical binning, tracks, etc.)</li>\n<li><cite>Acquire &lt;AcqMode&gt;</cite>: control the acquisition mode (single shot, video, accumulate, kinetic)</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; from andor2 import Andor\n&gt;&gt;&gt; cam = Andor()\n&gt;&gt;&gt; cam.Temperature.setpoint = -74  # start cooling\n&gt;&gt;&gt; cam.Temperature.cooler = True\n&gt;&gt;&gt; cam.Detector.OutputAmp(1)       # use conventional CCD amplifier instead of electron multiplying\n&gt;&gt;&gt; cam.PreAmp(2)                   # set pre-amplifier gain to 4.9\n&gt;&gt;&gt; cam.exposure = 10               # set exposure time to 10 ms\n&gt;&gt;&gt; cam.ReadMode.SingleTrack(590,5) # set readout mode: single track, 5 pixels wide, centered at 590 pixels\n</pre>\n<pre>&gt;&gt;&gt; cam.Acquire.Video()             # set acquisition mode to video (continuous)\n&gt;&gt;&gt; data = cam.Acquire.Newest(10)   # collect latest 10 images as numpy array\n&gt;&gt;&gt; cam.Acquire.stop()\n</pre>\n<pre>&gt;&gt;&gt; cam.Acquire.Kinetic(10, 0.1, 5, 0.01)    # set up kinetic sequence of 10 images every 100ms\n                                         # with each image being an accumulation of 5 images\n                                         # taken 10ms apart\n&gt;&gt;&gt; cam.Acquire.start()                      # start acquiring\n&gt;&gt;&gt; cam.Acquire.wait()                       # block until acquisition terminates\n&gt;&gt;&gt; data = cam.Acquire.GetAcquiredData()     # collect all data\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 1978399, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "c73fb23035f7ccf4117d60599aafbe21", "sha256": "1c89eb688fdc68c668633b42717ca21500925d1719fddba5864285e9a9225493"}, "downloads": -1, "filename": "andor-1.0.tar.gz", "has_sig": false, "md5_digest": "c73fb23035f7ccf4117d60599aafbe21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21739, "upload_time": "2015-05-29T14:23:32", "upload_time_iso_8601": "2015-05-29T14:23:32.453807Z", "url": "https://files.pythonhosted.org/packages/16/5c/748f07b40b955cc20a0a20a206bcc859593fa1a0e541064226874130de74/andor-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "81241e3ab1834b708a1734f731735901", "sha256": "340917e68df668dfbc396a596cee3e28abd888e0ed2a7bac5936ea17dc3ee32b"}, "downloads": -1, "filename": "andor-1.1.tar.gz", "has_sig": false, "md5_digest": "81241e3ab1834b708a1734f731735901", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237405, "upload_time": "2016-02-26T15:56:31", "upload_time_iso_8601": "2016-02-26T15:56:31.404052Z", "url": "https://files.pythonhosted.org/packages/91/38/3fd0cb6922720b8314688ed71b0a49233ec312fb9be99da5df614efaa89f/andor-1.1.tar.gz", "yanked": false}], "1.11": [{"comment_text": "", "digests": {"md5": "83844280f879b8f3cdce364238140cbf", "sha256": "2ab4dcbf8e42194681d14eafc6fb1be0344e0f6f7fada50b0378e787318f3bec"}, "downloads": -1, "filename": "andor-1.11.tar.gz", "has_sig": false, "md5_digest": "83844280f879b8f3cdce364238140cbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237420, "upload_time": "2016-02-26T17:04:22", "upload_time_iso_8601": "2016-02-26T17:04:22.290171Z", "url": "https://files.pythonhosted.org/packages/0f/47/64bbda5e9092153d79043112c19eb64afdc6f57f7dc27a29d91905484dd8/andor-1.11.tar.gz", "yanked": false}], "1.12": [{"comment_text": "", "digests": {"md5": "b9f4d8a5bcf6f363f591962f23f79e8c", "sha256": "9d4586f106713dc94da276b337a8b841064ec3f42d7914c17e248212ce946ab6"}, "downloads": -1, "filename": "andor-1.12.tar.gz", "has_sig": false, "md5_digest": "b9f4d8a5bcf6f363f591962f23f79e8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237635, "upload_time": "2016-02-26T17:07:54", "upload_time_iso_8601": "2016-02-26T17:07:54.770641Z", "url": "https://files.pythonhosted.org/packages/e8/bf/aaa32339935c059e16431e6885a919bfc3349bcac9bbd854be53d6733bfa/andor-1.12.tar.gz", "yanked": false}], "1.13": [{"comment_text": "", "digests": {"md5": "d87ed5a6babaf4c4cbe3954456b7877a", "sha256": "d095c3e1066d3f5c0d8334de4d11db9dcd4d0b8391d0750adc6391bfce539adc"}, "downloads": -1, "filename": "andor-1.13.tar.gz", "has_sig": false, "md5_digest": "d87ed5a6babaf4c4cbe3954456b7877a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237681, "upload_time": "2016-02-26T17:09:26", "upload_time_iso_8601": "2016-02-26T17:09:26.113341Z", "url": "https://files.pythonhosted.org/packages/19/6c/762c9698486bb9d19082fd0d7bf30ad6d6f9e62440142e050d71951425d2/andor-1.13.tar.gz", "yanked": false}], "1.14": [{"comment_text": "", "digests": {"md5": "2daef16d007611d59e46a5881a751fd1", "sha256": "975afccc009725b9c74b77351f88eccb3b084fa9aef85c1908f07091a9a369d8"}, "downloads": -1, "filename": "andor-1.14.tar.gz", "has_sig": false, "md5_digest": "2daef16d007611d59e46a5881a751fd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237673, "upload_time": "2016-02-26T17:10:34", "upload_time_iso_8601": "2016-02-26T17:10:34.926436Z", "url": "https://files.pythonhosted.org/packages/c4/69/5ec698e407980cddadad6c1b256931789b0964ecef86f1de670f8999fb5c/andor-1.14.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2daef16d007611d59e46a5881a751fd1", "sha256": "975afccc009725b9c74b77351f88eccb3b084fa9aef85c1908f07091a9a369d8"}, "downloads": -1, "filename": "andor-1.14.tar.gz", "has_sig": false, "md5_digest": "2daef16d007611d59e46a5881a751fd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 237673, "upload_time": "2016-02-26T17:10:34", "upload_time_iso_8601": "2016-02-26T17:10:34.926436Z", "url": "https://files.pythonhosted.org/packages/c4/69/5ec698e407980cddadad6c1b256931789b0964ecef86f1de670f8999fb5c/andor-1.14.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:14 2020"}