{"info": {"author": "Yuri Shikanov", "author_email": "dizballanze@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Pytest", "Intended Audience :: Developers", "Natural Language :: Russian", "Operating System :: MacOS", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "aiomisc-dependency\n==================\n\nDependency injection plugin for aiomisc_ built with aiodine_ library and\nsupport pytest fixture style dependency injection.\n\n.. _aiodine: https://github.com/bocadilloproject/aiodine\n.. _aiomisc: https://github.com/aiokitchen/aiomisc\n\n.. contents:: Table of contents\n\n\nInstallation\n------------\n\nInstalling from pypi:\n\n.. code-block:: bash\n\n    pip3 install aiomisc aiomisc-dependency\n\n\nHow to use\n----------\n\nRegister dependency\n*******************\n\nTo register dependency you can use ``aiomisc_dependency.dependency`` decorator.\n\n.. code-block:: python\n\n    from aiomisc_dependency import dependency\n\n    @dependency\n    async def pg_engine():\n        pg_engine = await create_engine(dsn=pg_url)\n        yield pg_engine\n        pg_engine.close()\n        await pg_engine.wait_closed()\n\n\nAs you can see dependency can be async generator function. Code after yield\nwill be executed on teardown to correctly close the dependency.\n\nCoroutine functions, non async functions and generators are also supported.\n\n\nUse dependency\n**************\n\nTo use dependency you need to add it's name to ``__dependencies__`` property\nfor every service which depends on it. Specified dependencies will be injected\nas service's attributes on entrypoint startup. If needed to map the dependency\nwith a different name, then, use ``__dependencies_map__``\n\n.. code-block:: python\n\n    from contextlib import suppress\n    from types import MappingProxyType\n\n    import aiohttp\n    from aiomisc.service.aiohttp import AIOHTTPService\n\n    class HealthcheckService(AIOHTTPService):\n\n        __dependencies__ = ('pg_engine',)\n\n        async def create_application(self):\n            app = aiohttp.web.Application()\n            app.add_routes([aiohttp.web.get('/ping', self.healthcheck_handler)])\n            return app\n\n        async def healthcheck_handler(self, request):\n            pg_status = False\n            with suppress(Exception):\n               async with self.pg_engine.acquire() as conn:\n                   await conn.execute('SELECT 1')\n                   pg_status = True\n\n            return aiohttp.web.json_response(\n                {'db': pg_status},\n                status=(200 if pg_status else 500),\n            )\n\n\n    class RESTService(AIOHTTPService):\n\n        __dependencies__ = ('pg_engine',)\n\n        ...\n\n    class AnotherRESTService(AIOHTTPService):\n\n        __dependencies_map__ = MappingProxyType({'pg_engine': 'engine'})\n\n        ...\n\nIf any required dependency won't be found on entrypoint startup,\n``RuntimeError`` will be raised.\n\nYou can set a dependency manually by adding it to kw arguments on service\ncreation. This could be convenient in tests.\n\n.. code-block:: python\n\n    from unittest import Mock\n\n    def test_rest_service():\n        pg_engine_mock = Mock()\n        service = RESTService(pg_engine=pg_engine_mock)\n        ...\n\nDependencies for dependencies\n*****************************\n\nYou can use dependencies as arguments for other dependencies. Arguments will\ninjected automatically.\n\n.. code-block:: python\n\n    @dependency\n    async def pg_connection(pg_engine):\n        async with pg_engine.acquire() as conn:\n            yield conn\n\n\n``loop`` built-in dependency\n****************************\n\nBuilt-in ``loop`` dependency can be used if your dependency requires\nevent loop instance.\n\n.. code-block:: python\n\n    import aioredis\n\n    @dependency\n    async def redis_pool(loop):\n        pool = aioredis.create_pool(redis_url, loop=loop)\n        yield pool\n        pool.close()\n        await pool.wait_closed()\n\nLICENSE\n-------\n\nMIT\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aiokitchen/aiomisc-dependency", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aiomisc-dependency", "package_url": "https://pypi.org/project/aiomisc-dependency/", "platform": "all", "project_url": "https://pypi.org/project/aiomisc-dependency/", "project_urls": {"Homepage": "https://github.com/aiokitchen/aiomisc-dependency"}, "release_url": "https://pypi.org/project/aiomisc-dependency/0.1.16/", "requires_dist": ["aiodine (~=1.2.9)", "aiomisc (>=7.1)", "async-generator ; python_version < \"3.7\"", "coverage (~=4.5.3) ; extra == 'develop'", "coveralls ; extra == 'develop'", "pylava ; extra == 'develop'", "pytest ; extra == 'develop'", "pytest-cov (~=2.5.1) ; extra == 'develop'", "tox (>=2.4) ; extra == 'develop'"], "requires_python": "", "summary": "aiomisc-dependency - dependency injection in aiomisc", "version": "0.1.16", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Dependency injection plugin for <a href=\"https://github.com/aiokitchen/aiomisc\" rel=\"nofollow\">aiomisc</a> built with <a href=\"https://github.com/bocadilloproject/aiodine\" rel=\"nofollow\">aiodine</a> library and\nsupport pytest fixture style dependency injection.</p>\n<div id=\"table-of-contents\">\n<p>Table of contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#how-to-use\" id=\"id2\" rel=\"nofollow\">How to use</a><ul>\n<li><a href=\"#register-dependency\" id=\"id3\" rel=\"nofollow\">Register dependency</a></li>\n<li><a href=\"#use-dependency\" id=\"id4\" rel=\"nofollow\">Use dependency</a></li>\n<li><a href=\"#dependencies-for-dependencies\" id=\"id5\" rel=\"nofollow\">Dependencies for dependencies</a></li>\n<li><a href=\"#loop-built-in-dependency\" id=\"id6\" rel=\"nofollow\"><tt>loop</tt> built-in dependency</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" id=\"id7\" rel=\"nofollow\">LICENSE</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>Installing from pypi:</p>\n<pre>pip3 install aiomisc aiomisc-dependency\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h2><a href=\"#id2\" rel=\"nofollow\">How to use</a></h2>\n<div id=\"register-dependency\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Register dependency</a></h3>\n<p>To register dependency you can use <tt>aiomisc_dependency.dependency</tt> decorator.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiomisc_dependency</span> <span class=\"kn\">import</span> <span class=\"n\">dependency</span>\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">pg_engine</span><span class=\"p\">():</span>\n    <span class=\"n\">pg_engine</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"n\">dsn</span><span class=\"o\">=</span><span class=\"n\">pg_url</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">pg_engine</span>\n    <span class=\"n\">pg_engine</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">pg_engine</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n</pre>\n<p>As you can see dependency can be async generator function. Code after yield\nwill be executed on teardown to correctly close the dependency.</p>\n<p>Coroutine functions, non async functions and generators are also supported.</p>\n</div>\n<div id=\"use-dependency\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Use dependency</a></h3>\n<p>To use dependency you need to add it\u2019s name to <tt>__dependencies__</tt> property\nfor every service which depends on it. Specified dependencies will be injected\nas service\u2019s attributes on entrypoint startup. If needed to map the dependency\nwith a different name, then, use <tt>__dependencies_map__</tt></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">contextlib</span> <span class=\"kn\">import</span> <span class=\"n\">suppress</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">MappingProxyType</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.service.aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">AIOHTTPService</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HealthcheckService</span><span class=\"p\">(</span><span class=\"n\">AIOHTTPService</span><span class=\"p\">):</span>\n\n    <span class=\"n\">__dependencies__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'pg_engine'</span><span class=\"p\">,)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_application</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_routes</span><span class=\"p\">([</span><span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/ping'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">healthcheck_handler</span><span class=\"p\">)])</span>\n        <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">healthcheck_handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">pg_status</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">with</span> <span class=\"n\">suppress</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n           <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pg_engine</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n               <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">)</span>\n               <span class=\"n\">pg_status</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">json_response</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span><span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"n\">pg_status</span><span class=\"p\">},</span>\n            <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">200</span> <span class=\"k\">if</span> <span class=\"n\">pg_status</span> <span class=\"k\">else</span> <span class=\"mi\">500</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RESTService</span><span class=\"p\">(</span><span class=\"n\">AIOHTTPService</span><span class=\"p\">):</span>\n\n    <span class=\"n\">__dependencies__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'pg_engine'</span><span class=\"p\">,)</span>\n\n    <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AnotherRESTService</span><span class=\"p\">(</span><span class=\"n\">AIOHTTPService</span><span class=\"p\">):</span>\n\n    <span class=\"n\">__dependencies_map__</span> <span class=\"o\">=</span> <span class=\"n\">MappingProxyType</span><span class=\"p\">({</span><span class=\"s1\">'pg_engine'</span><span class=\"p\">:</span> <span class=\"s1\">'engine'</span><span class=\"p\">})</span>\n\n    <span class=\"o\">...</span>\n</pre>\n<p>If any required dependency won\u2019t be found on entrypoint startup,\n<tt>RuntimeError</tt> will be raised.</p>\n<p>You can set a dependency manually by adding it to kw arguments on service\ncreation. This could be convenient in tests.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unittest</span> <span class=\"kn\">import</span> <span class=\"n\">Mock</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_rest_service</span><span class=\"p\">():</span>\n    <span class=\"n\">pg_engine_mock</span> <span class=\"o\">=</span> <span class=\"n\">Mock</span><span class=\"p\">()</span>\n    <span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">RESTService</span><span class=\"p\">(</span><span class=\"n\">pg_engine</span><span class=\"o\">=</span><span class=\"n\">pg_engine_mock</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"dependencies-for-dependencies\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Dependencies for dependencies</a></h3>\n<p>You can use dependencies as arguments for other dependencies. Arguments will\ninjected automatically.</p>\n<pre><span class=\"nd\">@dependency</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">pg_connection</span><span class=\"p\">(</span><span class=\"n\">pg_engine</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pg_engine</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">conn</span>\n</pre>\n</div>\n<div id=\"loop-built-in-dependency\">\n<h3><a href=\"#id6\" rel=\"nofollow\"><tt>loop</tt> built-in dependency</a></h3>\n<p>Built-in <tt>loop</tt> dependency can be used if your dependency requires\nevent loop instance.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aioredis</span>\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">redis_pool</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">aioredis</span><span class=\"o\">.</span><span class=\"n\">create_pool</span><span class=\"p\">(</span><span class=\"n\">redis_url</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">pool</span>\n    <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id7\" rel=\"nofollow\">LICENSE</a></h2>\n<p>MIT</p>\n</div>\n\n          </div>"}, "last_serial": 6976738, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "02b268e3a6ca10d4c431b0106b4a76b7", "sha256": "e50c5c17154d4b294fc07deedcadab45747ee22beab9be0a7ce0036770d6958f"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "02b268e3a6ca10d4c431b0106b4a76b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5204, "upload_time": "2019-05-15T13:19:18", "upload_time_iso_8601": "2019-05-15T13:19:18.584820Z", "url": "https://files.pythonhosted.org/packages/ad/bc/def6ed24658ee1216086beafaf1d8afed836fffae9f88d1ae24c8e96a824/aiomisc_dependency-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62b9bdfee493dcae1f28cb7ac53152ac", "sha256": "9cbd7d904109b2f0a2978e76e6528540964b2d15aed963cd876bd0a89f73c9b9"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.0.tar.gz", "has_sig": false, "md5_digest": "62b9bdfee493dcae1f28cb7ac53152ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3955, "upload_time": "2019-05-15T13:19:20", "upload_time_iso_8601": "2019-05-15T13:19:20.743904Z", "url": "https://files.pythonhosted.org/packages/07/04/4b0a1f305752923145a9e12b206a77934ab54c1e78f0d2d50d0092a3b639/aiomisc_dependency-0.1.0.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "f8c3a66daceaebc6a743a6c704d9a7d9", "sha256": "9e6e6044fdce74e6e748e1dc1f5aebbdb0395e6b2d65ac40bb394315b7916b35"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "f8c3a66daceaebc6a743a6c704d9a7d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5801, "upload_time": "2020-04-08T10:35:55", "upload_time_iso_8601": "2020-04-08T10:35:55.908267Z", "url": "https://files.pythonhosted.org/packages/3c/1a/cc8d5dcf82f78e223e5f993773b0134e57befb3b6b9fc8b373b7d20002a3/aiomisc_dependency-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee659a86293ef81419201c747717a5c", "sha256": "4646f33350bb7abe38380b3e001008b106b8bc6b8995237fb5f8f2f017e304dd"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.16.tar.gz", "has_sig": false, "md5_digest": "7ee659a86293ef81419201c747717a5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4557, "upload_time": "2020-04-08T10:35:57", "upload_time_iso_8601": "2020-04-08T10:35:57.799069Z", "url": "https://files.pythonhosted.org/packages/ae/ea/54d96e171c7210ed5df932f1487d4bce0697e8041d0b15030249007cbeb4/aiomisc_dependency-0.1.16.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "59439baa4df2b08fe4523ea28f335c58", "sha256": "e0a6c39e3ec62a2680434c26e8fc35b3014cb8411f2c2b3f2a51e74d3f79650c"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "59439baa4df2b08fe4523ea28f335c58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5330, "upload_time": "2019-06-09T19:10:43", "upload_time_iso_8601": "2019-06-09T19:10:43.472939Z", "url": "https://files.pythonhosted.org/packages/3c/2b/fcf497fbfb53802364cdb87a81efd12134ab35b1324811e0e799323c0c46/aiomisc_dependency-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "474a902d2fc7bb5d9695690c5fb63152", "sha256": "349f49005429ab87378cb02d001435e68801947c207b40e75dea92d935cfacb4"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.4.tar.gz", "has_sig": false, "md5_digest": "474a902d2fc7bb5d9695690c5fb63152", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4086, "upload_time": "2019-06-09T19:10:45", "upload_time_iso_8601": "2019-06-09T19:10:45.184422Z", "url": "https://files.pythonhosted.org/packages/f2/f2/e4eb0c3a0fbc441b524a6d0ffce57b34d2f68c08b31a65aa8b7b1830d4b6/aiomisc_dependency-0.1.4.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "6f1b0b68cb5ab93b3594daf6b29f697e", "sha256": "1b1af44421c3e733ca03846e6362b5ae52b96a23f611dbfb60e46d7a12333b44"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "6f1b0b68cb5ab93b3594daf6b29f697e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5332, "upload_time": "2019-10-15T08:56:20", "upload_time_iso_8601": "2019-10-15T08:56:20.327550Z", "url": "https://files.pythonhosted.org/packages/7a/b1/ce892f8d65932215ccb57738c078535109ae5b501dc287998d8574cb374f/aiomisc_dependency-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfa33128b7a5c88bd7521bd76a9ef267", "sha256": "7a7e0b4b9ff288e58734b83135ef6ea31916d404e70970642f1ccc59eb6a5a09"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.7.tar.gz", "has_sig": false, "md5_digest": "cfa33128b7a5c88bd7521bd76a9ef267", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4100, "upload_time": "2019-10-15T08:56:22", "upload_time_iso_8601": "2019-10-15T08:56:22.644776Z", "url": "https://files.pythonhosted.org/packages/24/9c/0d25ca081d6f1487634af2557af7816d869d4359d4e584e48065a5e23d99/aiomisc_dependency-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8c3a66daceaebc6a743a6c704d9a7d9", "sha256": "9e6e6044fdce74e6e748e1dc1f5aebbdb0395e6b2d65ac40bb394315b7916b35"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "f8c3a66daceaebc6a743a6c704d9a7d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5801, "upload_time": "2020-04-08T10:35:55", "upload_time_iso_8601": "2020-04-08T10:35:55.908267Z", "url": "https://files.pythonhosted.org/packages/3c/1a/cc8d5dcf82f78e223e5f993773b0134e57befb3b6b9fc8b373b7d20002a3/aiomisc_dependency-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee659a86293ef81419201c747717a5c", "sha256": "4646f33350bb7abe38380b3e001008b106b8bc6b8995237fb5f8f2f017e304dd"}, "downloads": -1, "filename": "aiomisc_dependency-0.1.16.tar.gz", "has_sig": false, "md5_digest": "7ee659a86293ef81419201c747717a5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4557, "upload_time": "2020-04-08T10:35:57", "upload_time_iso_8601": "2020-04-08T10:35:57.799069Z", "url": "https://files.pythonhosted.org/packages/ae/ea/54d96e171c7210ed5df932f1487d4bce0697e8041d0b15030249007cbeb4/aiomisc_dependency-0.1.16.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:05 2020"}