{"info": {"author": "hunkeydee", "author_email": "redacted@unknown.invalid", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# venvwrap\nA collection of bash functions for python venv mangement\n\n## Install\nvia pip\n\n```\npip install venvwrap\nsource bin/venvwrap.sh\n```\n\nvia github\n\n```\ngit clone https://github.com/hunkeydee/venvwrap\nsha256sum -c venvwrap/sha256\nsource venvwrap/venvwrap.sh\n```\n\n## Asciicast Demos\n- [basic create, pip-install, use, destroy](https://asciinema.org/a/326317)\n- [create venvs from varied python versions](https://asciinema.org/a/326320)\n- [link packages between venvs](https://asciinema.org/a/326319)\n\n---\n\n## Bash Environment and File System effects\n- The script exports the following variables and default values.  Change them as needed before installation.\n\n  - `VENV_HOME=\"${HOME}\"/.venvs` -> Default folder for venv directories\n\n  - `VENV_PY=$(which python3)` -> Default python installation\n\n- If the `$VENV_HOME` directory does not already exist on the file system, this script will create it.\n\n- All venvwrap commands are bash functions, with a small reliance on common binaries (`rm` and `ln`).\n\n## Usage\n**venvmk** - Create venv(s), installs pip, wheel, setuptools\n```\nusage: venvmk <venv>...\n\n  ex: `venvmk alpha` -> creates a venv called 'alpha'\n  ex: `venvmk bravo charlie` -> creates two seperate venvs\n  ex: `venvmk delta -p /opt/bin/python3.6\\` -> create venv using alt python\n```\n**venvrm** - Delete venv(s)\n```\nusage: venvrm <venv>...\n\n  ex: `venvrm delta` -> deletes the venv called 'delta'\n  ex: `venvrm echo foxtrot` deletes two venvs\n```\n**workon** - Enter/activate a venv\n```\n  usage: workon <venv>\n\n  ex: `workon golf` -> activates the 'golf' venv context\n```\n**venvex** - Exit/deactivate the current venv\n```\n  usage: venvex\n\n  ex: `venvex` -> deactivates the current venv\n```\n**venvls** - List all virtual environments managed by venvwrap\n```\n  usage: venvls\n\n  ex `venvls` -> returns a dir listing of $VENV_HOME\n```\n**venvpkgls** - List packages installed or linked in venv(s)\n```\n  usage: venvpkgls <venv>...\n\n  ex: `venvpkgls juliet` -> runs pip list for 'juliet', then displays link in the site-packages directory\n```\n**venvcmd** - Run cmd in venv\n```\n  usage: venvcmd <venv> <cmd>\n\n  ex: `venvcmd kilo python3 ./server.py` -> runs server.py in 'kilo' venv.  note that in this case ./server.py would need to be placed at ~/.venvs/kilo/server.py.\n```\n**venvinstall** - Install pip package(s) in venv\n```\n  usage: venvinstall <venv> <pkg>...'\n\n  ex: `venvinstall mike urllib3` -> installs urllib3 in 'mike'\n  ex: `venvinstall november numpy chardet` -> installs numpy and chardet\n```\n**venvlink** - link a package from  source venv> to target venv\n```\n  usage: venvlink <source_venv> <source_pkg> <target_venv>\n\n  ex: venvlink oscar matplotlib papa` -> creates a link in 'papa' pointing to the matplotlib package in oscar\n```\n\n## Background\nI didn't know enough about venvs (or bash scripting), so I spent a weekend learning/making this project.  Its generally inspired by [`virtualenvwrapper`](https://pypi.org/project/virtualenvwrapper/).  Instead of wrapping virtualenv, these functions support the built-in python `venv`.  *I think you can use virtualenvwrapper to wrap venvs since they're almost equivilent, but just using someone elses code means I learn less.*\n\nThe main feature I wanted to add while making this script was to have the ability to link packages between virtual environments.  Imagine you have a need to setup three seperate venvs, but they all need the same `numpy`.  You could install `numpy` in all three, but that wastes time, filespace and bandwidth.  `venvlink` works around this by placing link files in the site-packages dir to the installed packages of other venvs.  For example, `venvlink alpha numpy bravo` would take the `numpy` package already installed in `alpha`, and make a link file to it within `bravo`'s site-packages.  This lets me set up a flexible development environment without duplicating lots of files.\n\nVery little effort was put into testing against other linux systems.  *It works for me* with bash 5.0.3 running on Debian Buster as well as Windows 10 wsl.  I tested python mangement with `python3.7.3` directly from debian apt packages, as well as `python3.6.10`, `python3.7.7`, and `python3.8.3` compiled directly from python.org.  All currently supported versions of python (May 2020) tested successful.\n\nSome dependencies include:\n\n| python         | other cmds     |\n|----------------|----------------|\n| `python3`      | `bash`         |\n| `python3-venv` | `rm` `ln`      |\n| `python3-pip`  |\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hunkeydee/venvwrap", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "venvwrap", "package_url": "https://pypi.org/project/venvwrap/", "platform": "Debian GNU/Linux 10 (buster)", "project_url": "https://pypi.org/project/venvwrap/", "project_urls": {"Homepage": "https://github.com/hunkeydee/venvwrap"}, "release_url": "https://pypi.org/project/venvwrap/0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A collection of bash functions for venv management", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>venvwrap</h1>\n<p>A collection of bash functions for python venv mangement</p>\n<h2>Install</h2>\n<p>via pip</p>\n<pre><code>pip install venvwrap\nsource bin/venvwrap.sh\n</code></pre>\n<p>via github</p>\n<pre><code>git clone https://github.com/hunkeydee/venvwrap\nsha256sum -c venvwrap/sha256\nsource venvwrap/venvwrap.sh\n</code></pre>\n<h2>Asciicast Demos</h2>\n<ul>\n<li><a href=\"https://asciinema.org/a/326317\" rel=\"nofollow\">basic create, pip-install, use, destroy</a></li>\n<li><a href=\"https://asciinema.org/a/326320\" rel=\"nofollow\">create venvs from varied python versions</a></li>\n<li><a href=\"https://asciinema.org/a/326319\" rel=\"nofollow\">link packages between venvs</a></li>\n</ul>\n<hr>\n<h2>Bash Environment and File System effects</h2>\n<ul>\n<li>\n<p>The script exports the following variables and default values.  Change them as needed before installation.</p>\n<ul>\n<li>\n<p><code>VENV_HOME=\"${HOME}\"/.venvs</code> -&gt; Default folder for venv directories</p>\n</li>\n<li>\n<p><code>VENV_PY=$(which python3)</code> -&gt; Default python installation</p>\n</li>\n</ul>\n</li>\n<li>\n<p>If the <code>$VENV_HOME</code> directory does not already exist on the file system, this script will create it.</p>\n</li>\n<li>\n<p>All venvwrap commands are bash functions, with a small reliance on common binaries (<code>rm</code> and <code>ln</code>).</p>\n</li>\n</ul>\n<h2>Usage</h2>\n<p><strong>venvmk</strong> - Create venv(s), installs pip, wheel, setuptools</p>\n<pre><code>usage: venvmk &lt;venv&gt;...\n\n  ex: `venvmk alpha` -&gt; creates a venv called 'alpha'\n  ex: `venvmk bravo charlie` -&gt; creates two seperate venvs\n  ex: `venvmk delta -p /opt/bin/python3.6\\` -&gt; create venv using alt python\n</code></pre>\n<p><strong>venvrm</strong> - Delete venv(s)</p>\n<pre><code>usage: venvrm &lt;venv&gt;...\n\n  ex: `venvrm delta` -&gt; deletes the venv called 'delta'\n  ex: `venvrm echo foxtrot` deletes two venvs\n</code></pre>\n<p><strong>workon</strong> - Enter/activate a venv</p>\n<pre><code>  usage: workon &lt;venv&gt;\n\n  ex: `workon golf` -&gt; activates the 'golf' venv context\n</code></pre>\n<p><strong>venvex</strong> - Exit/deactivate the current venv</p>\n<pre><code>  usage: venvex\n\n  ex: `venvex` -&gt; deactivates the current venv\n</code></pre>\n<p><strong>venvls</strong> - List all virtual environments managed by venvwrap</p>\n<pre><code>  usage: venvls\n\n  ex `venvls` -&gt; returns a dir listing of $VENV_HOME\n</code></pre>\n<p><strong>venvpkgls</strong> - List packages installed or linked in venv(s)</p>\n<pre><code>  usage: venvpkgls &lt;venv&gt;...\n\n  ex: `venvpkgls juliet` -&gt; runs pip list for 'juliet', then displays link in the site-packages directory\n</code></pre>\n<p><strong>venvcmd</strong> - Run cmd in venv</p>\n<pre><code>  usage: venvcmd &lt;venv&gt; &lt;cmd&gt;\n\n  ex: `venvcmd kilo python3 ./server.py` -&gt; runs server.py in 'kilo' venv.  note that in this case ./server.py would need to be placed at ~/.venvs/kilo/server.py.\n</code></pre>\n<p><strong>venvinstall</strong> - Install pip package(s) in venv</p>\n<pre><code>  usage: venvinstall &lt;venv&gt; &lt;pkg&gt;...'\n\n  ex: `venvinstall mike urllib3` -&gt; installs urllib3 in 'mike'\n  ex: `venvinstall november numpy chardet` -&gt; installs numpy and chardet\n</code></pre>\n<p><strong>venvlink</strong> - link a package from  source venv&gt; to target venv</p>\n<pre><code>  usage: venvlink &lt;source_venv&gt; &lt;source_pkg&gt; &lt;target_venv&gt;\n\n  ex: venvlink oscar matplotlib papa` -&gt; creates a link in 'papa' pointing to the matplotlib package in oscar\n</code></pre>\n<h2>Background</h2>\n<p>I didn't know enough about venvs (or bash scripting), so I spent a weekend learning/making this project.  Its generally inspired by <a href=\"https://pypi.org/project/virtualenvwrapper/\" rel=\"nofollow\"><code>virtualenvwrapper</code></a>.  Instead of wrapping virtualenv, these functions support the built-in python <code>venv</code>.  <em>I think you can use virtualenvwrapper to wrap venvs since they're almost equivilent, but just using someone elses code means I learn less.</em></p>\n<p>The main feature I wanted to add while making this script was to have the ability to link packages between virtual environments.  Imagine you have a need to setup three seperate venvs, but they all need the same <code>numpy</code>.  You could install <code>numpy</code> in all three, but that wastes time, filespace and bandwidth.  <code>venvlink</code> works around this by placing link files in the site-packages dir to the installed packages of other venvs.  For example, <code>venvlink alpha numpy bravo</code> would take the <code>numpy</code> package already installed in <code>alpha</code>, and make a link file to it within <code>bravo</code>'s site-packages.  This lets me set up a flexible development environment without duplicating lots of files.</p>\n<p>Very little effort was put into testing against other linux systems.  <em>It works for me</em> with bash 5.0.3 running on Debian Buster as well as Windows 10 wsl.  I tested python mangement with <code>python3.7.3</code> directly from debian apt packages, as well as <code>python3.6.10</code>, <code>python3.7.7</code>, and <code>python3.8.3</code> compiled directly from python.org.  All currently supported versions of python (May 2020) tested successful.</p>\n<p>Some dependencies include:</p>\n<table>\n<thead>\n<tr>\n<th>python</th>\n<th>other cmds</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>python3</code></td>\n<td><code>bash</code></td>\n</tr>\n<tr>\n<td><code>python3-venv</code></td>\n<td><code>rm</code> <code>ln</code></td>\n</tr>\n<tr>\n<td><code>python3-pip</code></td>\n<td></td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 7182277, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "32d8460b3c256117f261f15470f4e10d", "sha256": "da24fa037d32a1eca72a648ba80d1fe8589fe507a8c23657ac047f37721f64b8"}, "downloads": -1, "filename": "venvwrap-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "32d8460b3c256117f261f15470f4e10d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6962, "upload_time": "2020-05-06T18:32:36", "upload_time_iso_8601": "2020-05-06T18:32:36.842307Z", "url": "https://files.pythonhosted.org/packages/28/3c/a0868ac858fcbc6ddba068b3b5f377535fbe6a529a105005af5b2fe57133/venvwrap-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd4c55bad8b9dc72c69624413d0ebbc0", "sha256": "97e5336ade783a6683ea82dbf2c3f936c57fc31662e60579c18e66a347203e37"}, "downloads": -1, "filename": "venvwrap-0.1.tar.gz", "has_sig": false, "md5_digest": "fd4c55bad8b9dc72c69624413d0ebbc0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5757, "upload_time": "2020-05-06T18:32:37", "upload_time_iso_8601": "2020-05-06T18:32:37.760491Z", "url": "https://files.pythonhosted.org/packages/2a/de/d15cb764acb308da47ea66163b5b4649434674721020580478782492196a/venvwrap-0.1.tar.gz", "yanked": false}], "0.1b0": [{"comment_text": "", "digests": {"md5": "345ad2a16ae4c0eb3ac91291f84c2c42", "sha256": "da0b56dc01d5d806f98da48690d180bc32a801b320dfbec84f064efaa2e7a01c"}, "downloads": -1, "filename": "venvwrap-0.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "345ad2a16ae4c0eb3ac91291f84c2c42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6014, "upload_time": "2020-05-03T20:03:16", "upload_time_iso_8601": "2020-05-03T20:03:16.652587Z", "url": "https://files.pythonhosted.org/packages/1a/1a/c33b056259bd4c461fe5327fad6aa34da3f9cff18fc967bb0c76b8432d92/venvwrap-0.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2a30a105f14b93ce06eef8b1493564c", "sha256": "e05a1073684a4ffcce649b3f95c6cf1f137a45c789c21b88ca6e6fb36b656313"}, "downloads": -1, "filename": "venvwrap-0.1b0.tar.gz", "has_sig": false, "md5_digest": "f2a30a105f14b93ce06eef8b1493564c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4785, "upload_time": "2020-05-03T20:03:18", "upload_time_iso_8601": "2020-05-03T20:03:18.326288Z", "url": "https://files.pythonhosted.org/packages/15/11/7667321f9d82f37dcb9f63e227ff0440062fd3353ea11a728b2e194e46c2/venvwrap-0.1b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "32d8460b3c256117f261f15470f4e10d", "sha256": "da24fa037d32a1eca72a648ba80d1fe8589fe507a8c23657ac047f37721f64b8"}, "downloads": -1, "filename": "venvwrap-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "32d8460b3c256117f261f15470f4e10d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6962, "upload_time": "2020-05-06T18:32:36", "upload_time_iso_8601": "2020-05-06T18:32:36.842307Z", "url": "https://files.pythonhosted.org/packages/28/3c/a0868ac858fcbc6ddba068b3b5f377535fbe6a529a105005af5b2fe57133/venvwrap-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd4c55bad8b9dc72c69624413d0ebbc0", "sha256": "97e5336ade783a6683ea82dbf2c3f936c57fc31662e60579c18e66a347203e37"}, "downloads": -1, "filename": "venvwrap-0.1.tar.gz", "has_sig": false, "md5_digest": "fd4c55bad8b9dc72c69624413d0ebbc0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5757, "upload_time": "2020-05-06T18:32:37", "upload_time_iso_8601": "2020-05-06T18:32:37.760491Z", "url": "https://files.pythonhosted.org/packages/2a/de/d15cb764acb308da47ea66163b5b4649434674721020580478782492196a/venvwrap-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:56 2020"}