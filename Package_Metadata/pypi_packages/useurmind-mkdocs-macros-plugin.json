{"info": {"author": "Laurent Franceschetti <info@settlenext.com>, Jochen Gr\u00fcn <jochen.gruen@googlemail.com>", "author_email": "jochen.gruen@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "# mkdocs-macros-plugin: Unleash the power of MkDocs with variables and macros\n\n\n<!-- To update, run the following command: markdown-toc -i README.md -->\n\n<!-- toc -->\n\n- [mkdocs-macros-plugin: Unleash the power of MkDocs with variables and macros](#mkdocs-macros-plugin--unleash-the-power-of-mkdocs-with-variables-and-macros)\n    - [Overview](#overview)\n    - [Context and purpose](#context-and-purpose)\n        - [Sources of inspiration](#sources-of-inspiration)\n            - [mkdocs-markdownextradata (rosscdh)](#mkdocs-markdownextradata-rosscdh)\n            - [jinja2: variables can also be Python callables](#jinja2--variables-can-also-be-python-callables)\n            - [Macros in Wiki engines](#macros-in-wiki-engines)\n        - [Use Case: Overcoming the Intrinsic Limitations of Markdown Syntax](#use-case--overcoming-the-intrinsic-limitations-of-markdown-syntax)\n            - [Solution 1: Markdown extensions](#solution-1--markdown-extensions)\n            - [Solution 2: Custom HTML Code](#solution-2--custom-html-code)\n            - [Solution 3: Enter Macros](#solution-3--enter-macros)\n    - [Installation](#installation)\n        - [Prerequisites](#prerequisites)\n        - [Procedure](#procedure)\n    - [How to use it](#how-to-use-it)\n        - [Defining variables in the configuration file](#defining-variables-in-the-configuration-file)\n        - [Defining variables in the markdown page](#defining-variables-in-the-markdown-page)\n        - [Defining variables and macros in Python code](#defining-variables-and-macros-in-python-code)\n        - [Location of the module](#location-of-the-module)\n        - [Content of the module](#content-of-the-module)\n\n<!-- tocstop -->\n\n## Overview\n\nThis is a fork of mkdocs-macros-plugin at [fralau/mkdocs_macros_plugin](https://github.com/fralau/mkdocs_macros_plugin)\nfor changes in mkdocs version 1.0.2. Will be removed as soon as mkdocs-macros-plugin gets fixed.\n\n\n**mkdocs-macros-plugin** is a plugin to make it easier for the contributors\nto a [MkDocs](mkdocs-macros-plugin) website to make richer and more beautiful\npages, by using **variables** and calls to **macros** in the markdown code.\n\nRegular **variables** can be defined in three ways:\n\n  1. global (for contributors): in the `mkdocs.yml` file,\n  under the 'extra' heading\n  1. global (for programmers): in a `main.py` file (Python),\n  by adding them to a dictionary\n  1. local (for contributors): in the markdown file, with a `{%set variable = value %}`\n statement\n\n\nSimilarly programmers can define **macros**, as Python functions in the `main.py` file, which the users will then be able to\nuse without much difficulty inside of the Python code.\n\nWith these two tools, you could write e.g.:\n\n```markdown\nThe unit price of product A is {{ unit_price }} EUR.\nTaking the standard discount into account,\nthe sale price of 50 units is {{ price(unit_price, 50) }} EUR.\n```\n\nWhich could translate into:\n\n```\nThe unit price of product A is 10.00 EUR.\nTaking the standard discount into account,\nthe sale price of 50 units is 450.00 EUR.\n```\n\n> The result of a macro can be **HTML code**:\nthis makes macros especially useful\nto make custom extensions to the syntax of markdown.\n\nIn reality, it is possible to use the full range of facilities of\n[Jinja2 templates](http://jinja.pocoo.org/docs/2.10/templates/).\n\n\n\n## Context and purpose\n\n### Sources of inspiration\n\n#### mkdocs-markdownextradata (rosscdh)\nThe idea for that extension came to me after I saw the excellent plugin\n[mkdocs-markdownextradata](https://github.com/rosscdh/mkdocs-markdownextradata-plugin) created by rosscdh, which takes metadata data\nfrom the `mkdocs.yml` file,  and allows you to insert them\nwith double curly brackets:\n\n```\nThe price of the item is {{price}}.\n```\n\nHis concept of using the [jinja2](http://jinja.pocoo.org/docs/2.10/)\ntemplating engine for that purpose was  simple and beautiful:\nall it took for this plugin was a few lines of code.\n\n\n#### jinja2: variables can also be Python callables\n\nAnd then I discovered that the creators of jinja2,\nin their great wisdom (thanks also to them!),\nhad decided to support *any* kind of Python variables,\n*including the callables*, typically functions, e.g.:\n\n```\nThe price of the item is {{calculate(2, 7.4)}}.\n```\n\nThey did not think it was worth more a few words,\nbut it was a diamond in plain sight.\n\n**Oh yeah?** So let's support them also in the markdown pages of MkDocs!\n\n#### Macros in Wiki engines\n> **The idea of using 'macros' to speed up the process of writing web pages\nis in fact rather old**.\n\nMost wiki engines,\nwhich also rely on some [markup](http://wiki.c2.com/?MarkupLanguage)\nlanguage, had the same problems of enriching the presentation of the pages,\nat the turn of the year 2000.\nIn response, they often implemented macros in one form or another\n(in mediawiki, they were confusingly called [templates](https://www.mediawiki.org/wiki/Help:Templates)).\nAnd in many cases, these wiki engines relied on the double-curly-braces syntax.\n\nAfter all, a **static website generator** can be defined as a wiki whose\nonline editing features have been removed, to make it \"wiki-wikier\"!\n\n\n### Use Case: Overcoming the Intrinsic Limitations of Markdown Syntax\n\n[MkDocs](https://www.mkdocs.org/) is a powerful and simple\ntool for generating websites. Pages are based on markdown, which is simple by design. The downside is that the expressiveness of markdown is\nnecessarily limited.\n\nWhat do you do if you want to enrich your web with new features like buttons,\nfancy images, etc. without messing up with templates?\n\n\n#### Solution 1: Markdown extensions\n\nIn order to express more things with it, the standard recourse is to extend\nmarkdown through standard\n[markdown extensions](https://python-markdown.github.io/extensions/).\nAdding extensions is straightforward, as they\ncan be directly activated through the `mkdocs.yml`configuration file\nof the website e.g.:\n\n```YAML\nmarkdown_extensions:\n    - footnotes\n```\n\n(If they are non-standard, you just have to install them first on your\nmachine.)\n\nThe problem is, however, that there will *always* be *something* specific\nyou will want to do, for which there is no markdown extension available.\nOr the extension will be too complicated, or not quite what you wanted.\n\nFurthermore, the are limitations to the number of possible extensions,\nbecause extending the grammar of markdown is always a little tricky and\ncan create incompabilities with the standard syntax or other extensions.\n\n#### Solution 2: Custom HTML Code\nIf don't have an extension, the standard recourse\nis to write some pure HTML within your markdown,\nwhich may also contain some\ncss code (especially if you are using css that\nis specific to your theme or website), e.g.:\n\n```HTML\nHere is my code:\n\n<a class='button' href=\"http:your.website.com/page\">Try this</a>\n```\n\nThe combination of HTML and css works well and can solve a wide range of issues.\n\nBut it will soon become tedious, if you have to type\nthe same code again and again with some variations;\nand if you want to change something to the\ncall (typically the css class), you will then have to manually change\n*all* instances of that code, with all the related risks.\nThis solution doesn't scale.\n\n#### Solution 3: Enter Macros\nWhat if you had a **macro** instead, that would allow you to write\nthe above HTML as:\n\n```\n{{button('Try this', 'http:your.website.com/page')}}\n```\n\n... that call was translated into the proper HTML?\n\n**That would be something you could teach to a person who can\nalready write markdown, without the need for them to get involved\nin *any* css or HTML!**\n\nAnd, what's more,\nyou could *easily* (as a programmer) write your own new macro in Python,\n whenever you needed one?\n\nA **macro** is, simply stated, a *Python function* that takes a few arguments\nand returns a string. It could contain all the logic you want; it could\nbe as simple as the example above, or as sophisticated as making a query from\na database and formatting the results as markdown.\n\nAll of this becomes possible, thanks to **mkdocs-macros-plugin**!\n\n\n\n\n\n\n## Installation\n\n### Prerequisites\n\nOnly tested with\n  - Python version > 3.7.0\n  - MkDocs version > 1.0.2\n\n\n### Procedure\nTo install the package, execute:\n\n```\npip install mkdocs-macros-plugin \n```\n\nDeclare the plugin in the the file `mkdocs.yml`:\n\n```yaml\nplugins:\n    - search\n    - macros\n```\n\n> **Note:** If you have no `plugins` entry in your config file yet,\nyou should also add the `search` plugin.\nIf no `plugins` entry is set, MkDocs enables `search` by default; but\nif you use it, then you have to declare it explicitly.\n\n\n## How to use it\n\n\n\n### Defining variables in the configuration file\n\nTo easily and quickly define custom variables, declare them in you `mkdocs.yml`\nfile:\n\n```yaml\nextra:\n    price: 12.50\n    company:\n        name: Acme\n        address: ....\n        website: www.acme.com\n```\n\nIn your markdown file:\n\n```markdown\nThe price of the product is {{ price }}.\n\nSee [more information on the website]({{ company.website }}).\n\nSee <a href=\"{{ company.website }}\">more information on the website</a>.\n```\n\n### Defining variables in the markdown page\n\nIf you need a variable that is local to a markdown page, you can use a standard\nJinja2 declaration, e.g.:\n\n```jinja2\n{% set acme = 'Acme Company Ltd' %}\n\nPlease buy the great products from {{ acme }}!\n```\n\n> In fact, you can do\n[all the fancy footwork you want with Jinja2](http://jinja.pocoo.org/docs/2.10/templates/)!\nOnly remember that you don't need to define any header, footer or navigation,\nas this is already taken care of by MkDocs.\n\n### Defining variables and macros in Python code\n\n### Location of the module\nPython code must go into a `main.py` file in the main website's directory\n(beside the `mkdocs.yml` file).\n\n>In can also be a package (i.e. a `main` directory),\nas long as the `declare_variables` function is accessible.\n\nIf you wish, you can change the name of that module by adding a\n`python_module` parameter to the `mkdocs.yml` file\n(no need to add the `.py` suffix):\n\n```yaml\npython_module: source_code\n```\n\n\n### Content of the module\nAs a first step, you need declare a hook function\ncalled `declare_variables`, with two arguments:\n\n   - `variables`: the dictionary that will contain your variables.\n   - `macro`: a decorator function that you can use to declare a Python\nfunction as a Jinja2 callable ('macro' for MkDocs).\n\n\n\nThe example should be self-explanatory:\n\n```python\ndef declare_variables(variables, macro):\n    \"\"\"\n    This is the hook for the functions\n\n    - variables: the dictionary that contains the variables\n    - macro: a decorator function, to declare a macro.\n    \"\"\"\n\n    variables['baz'] = \"John Doe\"\n\n    @macro\n    def bar(x):\n        return (2.3 * x) + 7\n\n\n\n    # If you wish, you can  declare a macro with a different name:\n    def f(x):\n        return x * x\n\n    macro(f, 'barbaz')\n\n    # or to export some predefined function\n    import math\n    macro(math.floor) # will be exported as 'floor'\n\n```\n\nYour **registration** of variables or macros for MkDocs\nshould be done inside that\nhook function. On the other hand, nothing prevents you from making imports or\ndeclarations **outside** of this function.\n\n> **Note:** You can export a wide range of objects, and their attributes\nremain accessible (see [more information](http://jinja.pocoo.org/docs/2.10/templates/#variables))\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Useurmind/mkdocs_macros_plugin", "keywords": "mkdocs python markdown macros", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "useurmind-mkdocs-macros-plugin", "package_url": "https://pypi.org/project/useurmind-mkdocs-macros-plugin/", "platform": "", "project_url": "https://pypi.org/project/useurmind-mkdocs-macros-plugin/", "project_urls": {"Homepage": "https://github.com/Useurmind/mkdocs_macros_plugin"}, "release_url": "https://pypi.org/project/useurmind-mkdocs-macros-plugin/0.2.2/", "requires_dist": ["mkdocs (>=1.0.2)", "repackage", "jinja2", "mkdocs"], "requires_python": ">=3.7", "summary": "Unleash the power of MkDocs with macros and variables", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mkdocs-macros-plugin: Unleash the power of MkDocs with variables and macros</h1>\n\n\n<ul>\n<li><a href=\"#mkdocs-macros-plugin--unleash-the-power-of-mkdocs-with-variables-and-macros\" rel=\"nofollow\">mkdocs-macros-plugin: Unleash the power of MkDocs with variables and macros</a>\n<ul>\n<li><a href=\"#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#context-and-purpose\" rel=\"nofollow\">Context and purpose</a>\n<ul>\n<li><a href=\"#sources-of-inspiration\" rel=\"nofollow\">Sources of inspiration</a>\n<ul>\n<li><a href=\"#mkdocs-markdownextradata-rosscdh\" rel=\"nofollow\">mkdocs-markdownextradata (rosscdh)</a></li>\n<li><a href=\"#jinja2--variables-can-also-be-python-callables\" rel=\"nofollow\">jinja2: variables can also be Python callables</a></li>\n<li><a href=\"#macros-in-wiki-engines\" rel=\"nofollow\">Macros in Wiki engines</a></li>\n</ul>\n</li>\n<li><a href=\"#use-case--overcoming-the-intrinsic-limitations-of-markdown-syntax\" rel=\"nofollow\">Use Case: Overcoming the Intrinsic Limitations of Markdown Syntax</a>\n<ul>\n<li><a href=\"#solution-1--markdown-extensions\" rel=\"nofollow\">Solution 1: Markdown extensions</a></li>\n<li><a href=\"#solution-2--custom-html-code\" rel=\"nofollow\">Solution 2: Custom HTML Code</a></li>\n<li><a href=\"#solution-3--enter-macros\" rel=\"nofollow\">Solution 3: Enter Macros</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#prerequisites\" rel=\"nofollow\">Prerequisites</a></li>\n<li><a href=\"#procedure\" rel=\"nofollow\">Procedure</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-use-it\" rel=\"nofollow\">How to use it</a>\n<ul>\n<li><a href=\"#defining-variables-in-the-configuration-file\" rel=\"nofollow\">Defining variables in the configuration file</a></li>\n<li><a href=\"#defining-variables-in-the-markdown-page\" rel=\"nofollow\">Defining variables in the markdown page</a></li>\n<li><a href=\"#defining-variables-and-macros-in-python-code\" rel=\"nofollow\">Defining variables and macros in Python code</a></li>\n<li><a href=\"#location-of-the-module\" rel=\"nofollow\">Location of the module</a></li>\n<li><a href=\"#content-of-the-module\" rel=\"nofollow\">Content of the module</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>Overview</h2>\n<p>This is a fork of mkdocs-macros-plugin at <a href=\"https://github.com/fralau/mkdocs_macros_plugin\" rel=\"nofollow\">fralau/mkdocs_macros_plugin</a>\nfor changes in mkdocs version 1.0.2. Will be removed as soon as mkdocs-macros-plugin gets fixed.</p>\n<p><strong>mkdocs-macros-plugin</strong> is a plugin to make it easier for the contributors\nto a <a href=\"mkdocs-macros-plugin\" rel=\"nofollow\">MkDocs</a> website to make richer and more beautiful\npages, by using <strong>variables</strong> and calls to <strong>macros</strong> in the markdown code.</p>\n<p>Regular <strong>variables</strong> can be defined in three ways:</p>\n<ol>\n<li>global (for contributors): in the <code>mkdocs.yml</code> file,\nunder the 'extra' heading</li>\n<li>global (for programmers): in a <code>main.py</code> file (Python),\nby adding them to a dictionary</li>\n<li>local (for contributors): in the markdown file, with a <code>{%set variable = value %}</code>\nstatement</li>\n</ol>\n<p>Similarly programmers can define <strong>macros</strong>, as Python functions in the <code>main.py</code> file, which the users will then be able to\nuse without much difficulty inside of the Python code.</p>\n<p>With these two tools, you could write e.g.:</p>\n<pre>The unit price of product A is {{ unit_price }} EUR.\nTaking the standard discount into account,\nthe sale price of 50 units is {{ price(unit_price, 50) }} EUR.\n</pre>\n<p>Which could translate into:</p>\n<pre><code>The unit price of product A is 10.00 EUR.\nTaking the standard discount into account,\nthe sale price of 50 units is 450.00 EUR.\n</code></pre>\n<blockquote>\n<p>The result of a macro can be <strong>HTML code</strong>:\nthis makes macros especially useful\nto make custom extensions to the syntax of markdown.</p>\n</blockquote>\n<p>In reality, it is possible to use the full range of facilities of\n<a href=\"http://jinja.pocoo.org/docs/2.10/templates/\" rel=\"nofollow\">Jinja2 templates</a>.</p>\n<h2>Context and purpose</h2>\n<h3>Sources of inspiration</h3>\n<h4>mkdocs-markdownextradata (rosscdh)</h4>\n<p>The idea for that extension came to me after I saw the excellent plugin\n<a href=\"https://github.com/rosscdh/mkdocs-markdownextradata-plugin\" rel=\"nofollow\">mkdocs-markdownextradata</a> created by rosscdh, which takes metadata data\nfrom the <code>mkdocs.yml</code> file,  and allows you to insert them\nwith double curly brackets:</p>\n<pre><code>The price of the item is {{price}}.\n</code></pre>\n<p>His concept of using the <a href=\"http://jinja.pocoo.org/docs/2.10/\" rel=\"nofollow\">jinja2</a>\ntemplating engine for that purpose was  simple and beautiful:\nall it took for this plugin was a few lines of code.</p>\n<h4>jinja2: variables can also be Python callables</h4>\n<p>And then I discovered that the creators of jinja2,\nin their great wisdom (thanks also to them!),\nhad decided to support <em>any</em> kind of Python variables,\n<em>including the callables</em>, typically functions, e.g.:</p>\n<pre><code>The price of the item is {{calculate(2, 7.4)}}.\n</code></pre>\n<p>They did not think it was worth more a few words,\nbut it was a diamond in plain sight.</p>\n<p><strong>Oh yeah?</strong> So let's support them also in the markdown pages of MkDocs!</p>\n<h4>Macros in Wiki engines</h4>\n<blockquote>\n<p><strong>The idea of using 'macros' to speed up the process of writing web pages\nis in fact rather old</strong>.</p>\n</blockquote>\n<p>Most wiki engines,\nwhich also rely on some <a href=\"http://wiki.c2.com/?MarkupLanguage\" rel=\"nofollow\">markup</a>\nlanguage, had the same problems of enriching the presentation of the pages,\nat the turn of the year 2000.\nIn response, they often implemented macros in one form or another\n(in mediawiki, they were confusingly called <a href=\"https://www.mediawiki.org/wiki/Help:Templates\" rel=\"nofollow\">templates</a>).\nAnd in many cases, these wiki engines relied on the double-curly-braces syntax.</p>\n<p>After all, a <strong>static website generator</strong> can be defined as a wiki whose\nonline editing features have been removed, to make it \"wiki-wikier\"!</p>\n<h3>Use Case: Overcoming the Intrinsic Limitations of Markdown Syntax</h3>\n<p><a href=\"https://www.mkdocs.org/\" rel=\"nofollow\">MkDocs</a> is a powerful and simple\ntool for generating websites. Pages are based on markdown, which is simple by design. The downside is that the expressiveness of markdown is\nnecessarily limited.</p>\n<p>What do you do if you want to enrich your web with new features like buttons,\nfancy images, etc. without messing up with templates?</p>\n<h4>Solution 1: Markdown extensions</h4>\n<p>In order to express more things with it, the standard recourse is to extend\nmarkdown through standard\n<a href=\"https://python-markdown.github.io/extensions/\" rel=\"nofollow\">markdown extensions</a>.\nAdding extensions is straightforward, as they\ncan be directly activated through the <code>mkdocs.yml</code>configuration file\nof the website e.g.:</p>\n<pre><span class=\"nt\">markdown_extensions</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">footnotes</span>\n</pre>\n<p>(If they are non-standard, you just have to install them first on your\nmachine.)</p>\n<p>The problem is, however, that there will <em>always</em> be <em>something</em> specific\nyou will want to do, for which there is no markdown extension available.\nOr the extension will be too complicated, or not quite what you wanted.</p>\n<p>Furthermore, the are limitations to the number of possible extensions,\nbecause extending the grammar of markdown is always a little tricky and\ncan create incompabilities with the standard syntax or other extensions.</p>\n<h4>Solution 2: Custom HTML Code</h4>\n<p>If don't have an extension, the standard recourse\nis to write some pure HTML within your markdown,\nwhich may also contain some\ncss code (especially if you are using css that\nis specific to your theme or website), e.g.:</p>\n<pre>Here is my code:\n\n<span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">'button'</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http:your.website.com/page\"</span><span class=\"p\">&gt;</span>Try this<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</pre>\n<p>The combination of HTML and css works well and can solve a wide range of issues.</p>\n<p>But it will soon become tedious, if you have to type\nthe same code again and again with some variations;\nand if you want to change something to the\ncall (typically the css class), you will then have to manually change\n<em>all</em> instances of that code, with all the related risks.\nThis solution doesn't scale.</p>\n<h4>Solution 3: Enter Macros</h4>\n<p>What if you had a <strong>macro</strong> instead, that would allow you to write\nthe above HTML as:</p>\n<pre><code>{{button('Try this', 'http:your.website.com/page')}}\n</code></pre>\n<p>... that call was translated into the proper HTML?</p>\n<p><strong>That would be something you could teach to a person who can\nalready write markdown, without the need for them to get involved\nin <em>any</em> css or HTML!</strong></p>\n<p>And, what's more,\nyou could <em>easily</em> (as a programmer) write your own new macro in Python,\nwhenever you needed one?</p>\n<p>A <strong>macro</strong> is, simply stated, a <em>Python function</em> that takes a few arguments\nand returns a string. It could contain all the logic you want; it could\nbe as simple as the example above, or as sophisticated as making a query from\na database and formatting the results as markdown.</p>\n<p>All of this becomes possible, thanks to <strong>mkdocs-macros-plugin</strong>!</p>\n<h2>Installation</h2>\n<h3>Prerequisites</h3>\n<p>Only tested with</p>\n<ul>\n<li>Python version &gt; 3.7.0</li>\n<li>MkDocs version &gt; 1.0.2</li>\n</ul>\n<h3>Procedure</h3>\n<p>To install the package, execute:</p>\n<pre><code>pip install mkdocs-macros-plugin \n</code></pre>\n<p>Declare the plugin in the the file <code>mkdocs.yml</code>:</p>\n<pre><span class=\"nt\">plugins</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">search</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">macros</span>\n</pre>\n<blockquote>\n<p><strong>Note:</strong> If you have no <code>plugins</code> entry in your config file yet,\nyou should also add the <code>search</code> plugin.\nIf no <code>plugins</code> entry is set, MkDocs enables <code>search</code> by default; but\nif you use it, then you have to declare it explicitly.</p>\n</blockquote>\n<h2>How to use it</h2>\n<h3>Defining variables in the configuration file</h3>\n<p>To easily and quickly define custom variables, declare them in you <code>mkdocs.yml</code>\nfile:</p>\n<pre><span class=\"nt\">extra</span><span class=\"p\">:</span>\n    <span class=\"nt\">price</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">12.50</span>\n    <span class=\"nt\">company</span><span class=\"p\">:</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Acme</span>\n        <span class=\"nt\">address</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">....</span>\n        <span class=\"nt\">website</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">www.acme.com</span>\n</pre>\n<p>In your markdown file:</p>\n<pre>The price of the product is {{ price }}.\n\nSee [more information on the website]({{ company.website }}).\n\nSee &lt;a href=\"{{ company.website }}\"&gt;more information on the website&lt;/a&gt;.\n</pre>\n<h3>Defining variables in the markdown page</h3>\n<p>If you need a variable that is local to a markdown page, you can use a standard\nJinja2 declaration, e.g.:</p>\n<pre>{% set acme = 'Acme Company Ltd' %}\n\nPlease buy the great products from {{ acme }}!\n</pre>\n<blockquote>\n<p>In fact, you can do\n<a href=\"http://jinja.pocoo.org/docs/2.10/templates/\" rel=\"nofollow\">all the fancy footwork you want with Jinja2</a>!\nOnly remember that you don't need to define any header, footer or navigation,\nas this is already taken care of by MkDocs.</p>\n</blockquote>\n<h3>Defining variables and macros in Python code</h3>\n<h3>Location of the module</h3>\n<p>Python code must go into a <code>main.py</code> file in the main website's directory\n(beside the <code>mkdocs.yml</code> file).</p>\n<blockquote>\n<p>In can also be a package (i.e. a <code>main</code> directory),\nas long as the <code>declare_variables</code> function is accessible.</p>\n</blockquote>\n<p>If you wish, you can change the name of that module by adding a\n<code>python_module</code> parameter to the <code>mkdocs.yml</code> file\n(no need to add the <code>.py</code> suffix):</p>\n<pre><span class=\"nt\">python_module</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">source_code</span>\n</pre>\n<h3>Content of the module</h3>\n<p>As a first step, you need declare a hook function\ncalled <code>declare_variables</code>, with two arguments:</p>\n<ul>\n<li><code>variables</code>: the dictionary that will contain your variables.</li>\n<li><code>macro</code>: a decorator function that you can use to declare a Python\nfunction as a Jinja2 callable ('macro' for MkDocs).</li>\n</ul>\n<p>The example should be self-explanatory:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">declare_variables</span><span class=\"p\">(</span><span class=\"n\">variables</span><span class=\"p\">,</span> <span class=\"n\">macro</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    This is the hook for the functions</span>\n\n<span class=\"sd\">    - variables: the dictionary that contains the variables</span>\n<span class=\"sd\">    - macro: a decorator function, to declare a macro.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s1\">'baz'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"John Doe\"</span>\n\n    <span class=\"nd\">@macro</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mf\">2.3</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">7</span>\n\n\n\n    <span class=\"c1\"># If you wish, you can  declare a macro with a different name:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n\n    <span class=\"n\">macro</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"s1\">'barbaz'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># or to export some predefined function</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n    <span class=\"n\">macro</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">)</span> <span class=\"c1\"># will be exported as 'floor'</span>\n</pre>\n<p>Your <strong>registration</strong> of variables or macros for MkDocs\nshould be done inside that\nhook function. On the other hand, nothing prevents you from making imports or\ndeclarations <strong>outside</strong> of this function.</p>\n<blockquote>\n<p><strong>Note:</strong> You can export a wide range of objects, and their attributes\nremain accessible (see <a href=\"http://jinja.pocoo.org/docs/2.10/templates/#variables\" rel=\"nofollow\">more information</a>)</p>\n</blockquote>\n\n          </div>"}, "last_serial": 4261383, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "e59175970d6f7c2232238d0d6bff4e53", "sha256": "bc83a91c16d891d2a1580d9b25ad0599e55296813c7c411782c608f87490740a"}, "downloads": -1, "filename": "useurmind_mkdocs_macros_plugin-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e59175970d6f7c2232238d0d6bff4e53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9241, "upload_time": "2018-09-11T13:36:04", "upload_time_iso_8601": "2018-09-11T13:36:04.420438Z", "url": "https://files.pythonhosted.org/packages/29/5e/d841d36afe9947a0f3f0a688370dcd529ab3d64b23f237b0b9133ff4bfd4/useurmind_mkdocs_macros_plugin-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb2d73db9f4e4814928dc0b21abac155", "sha256": "4d8439fcd2c978e981b23ddd27bb4545bce650242d975d6f9dde6f3e087190d0"}, "downloads": -1, "filename": "useurmind-mkdocs-macros-plugin-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bb2d73db9f4e4814928dc0b21abac155", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10199, "upload_time": "2018-09-11T13:36:05", "upload_time_iso_8601": "2018-09-11T13:36:05.820324Z", "url": "https://files.pythonhosted.org/packages/9c/d6/d85004a2801d0cb6f2a526660eb83f27204d7a33f883cb7a7941a3fd17b0/useurmind-mkdocs-macros-plugin-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e59175970d6f7c2232238d0d6bff4e53", "sha256": "bc83a91c16d891d2a1580d9b25ad0599e55296813c7c411782c608f87490740a"}, "downloads": -1, "filename": "useurmind_mkdocs_macros_plugin-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e59175970d6f7c2232238d0d6bff4e53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9241, "upload_time": "2018-09-11T13:36:04", "upload_time_iso_8601": "2018-09-11T13:36:04.420438Z", "url": "https://files.pythonhosted.org/packages/29/5e/d841d36afe9947a0f3f0a688370dcd529ab3d64b23f237b0b9133ff4bfd4/useurmind_mkdocs_macros_plugin-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb2d73db9f4e4814928dc0b21abac155", "sha256": "4d8439fcd2c978e981b23ddd27bb4545bce650242d975d6f9dde6f3e087190d0"}, "downloads": -1, "filename": "useurmind-mkdocs-macros-plugin-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bb2d73db9f4e4814928dc0b21abac155", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10199, "upload_time": "2018-09-11T13:36:05", "upload_time_iso_8601": "2018-09-11T13:36:05.820324Z", "url": "https://files.pythonhosted.org/packages/9c/d6/d85004a2801d0cb6f2a526660eb83f27204d7a33f883cb7a7941a3fd17b0/useurmind-mkdocs-macros-plugin-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:03 2020"}