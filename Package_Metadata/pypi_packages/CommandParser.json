{"info": {"author": "Jeff Hammel", "author_email": "jhammel@mozilla.com", "bugtrack_url": null, "classifiers": [], "description": "CommandParser\n=============\n\nchange objects to OptionParser instances via reflection\n\nOverview\n--------\n\nIt is a common pattern for command line interfaces to use subcomands (e.g.):\n\n  hg commit -m 'foo bar'\n  git push origin master\n\nCommandParser does this via introspection of a given class.  When\ninvoked with a class, CommandParser uses the inspect module to pull\nout the mandatory and optional arguments for each of the class's\nmethods, which are translated to subcommands, and make a OptionParser\ninstance from them. ``%prog help`` will then display all of the\nsubcommands and ``%prog help <subcommand>`` will give you help on the\n``<subcommand>`` chosen.  Methods beginning with an underscore (`_`)\nare passed over.  This gives an easy way to translate an API class\ninto a command line program::\n\n  class Foo(object):\n    \"\"\"silly class that does nothing\"\"\"\n    def __init__(self): pass\n    def foo(self, value):\n      print \"The value is %s\" % value\n    def bar(self, fleem, verbose=False):\n      \"\"\"\n      The good ole `bar` command\n      - fleem: you know, that thing fleem\n      - verbose: whether to print out more things or not\n      \"\"\"\n      if verbose:\n        print \"You gave fleem=%s\" % fleem\n      return fleem * 2\n\n  import commandparser\n  parser = commandparser.CommandParser(Foo)\n  parser.invoke()\n\n(From http://k0s.org/hg/CommandParser/file/tip/tests/simpleexample.py )\n\nExample invocation::\n\n  (paint)\u2502./simpleexample.py help\n  Usage: simpleexample.py [options] command [command-options]\n  \n  silly class that does nothing\n  \n  Options:\n    -h, --help  show this help message and exit\n  \n  Commands: \n    bar   The good ole `bar` command\n    foo   \n    help  print help for a given command\n  (paint)\u2502./simpleexample.py foo\n  Usage: simpleexample.py foo <value>\n  \n  simpleexample.py: error: Not enough arguments given\n  (paint)\u2502./simpleexample.py foo 4\n  The value is 4\n  (paint)\u2502./simpleexample.py bar blah\n  blahblah\n\nFor optional arguments, the type of the default value will be\ninspected from the function signature.  Currently, mandatory arguments\nare all strings, though this is clearly a shortcoming.\n\nThe class docstring is used for ``%prog --help`` (and ``%prog help``,\nsame thing). The method docstrings (including those of ``__init__``\nfor global options) are used for subcommand help.  If the arguments\nare listed in the docstring in the form given above\n(``- <argument> : <something about the argument``) then these are used\nto provide help on the individual options.  Otherwise, these are left\nblank.\n\nFor straight-forward cases, it may be enough to pass your class\ndirectly to the CommandParser constructor.  For more complex cases, it\nis an advisable pattern to create a new class (either via subclassing\nor e.g. rolling from scratch, as applicable) that is more amenable to\nCommandParser rather than modifying an (e.g.) API class to fit what\nCommandParser expects.  This allows the use of an object-oriented\ninterface for subcommands without sacrificing your API class, and if\nyou can subclass then there's really not much extra code to write.\n\nSee http://k0s.org/hg/CommandParser/file/tip/tests for tests and examples.\n\n\nReference\n---------\n\n* https://pypi.python.org/pypi/clime/ is a similar effort\n\n\n----\n\nJeff Hammel\n\nhttp://k0s.org/hg/CommandParser\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://k0s.org/hg/CommandParser", "keywords": "", "license": "MPL", "maintainer": "", "maintainer_email": "", "name": "CommandParser", "package_url": "https://pypi.org/project/CommandParser/", "platform": "", "project_url": "https://pypi.org/project/CommandParser/", "project_urls": {"Homepage": "http://k0s.org/hg/CommandParser"}, "release_url": "https://pypi.org/project/CommandParser/0.3/", "requires_dist": null, "requires_python": "", "summary": "change objects to OptionParser instances via reflection", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>change objects to OptionParser instances via reflection</p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>It is a common pattern for command line interfaces to use subcomands (e.g.):</p>\n<blockquote>\nhg commit -m \u2018foo bar\u2019\ngit push origin master</blockquote>\n<p>CommandParser does this via introspection of a given class.  When\ninvoked with a class, CommandParser uses the inspect module to pull\nout the mandatory and optional arguments for each of the class\u2019s\nmethods, which are translated to subcommands, and make a OptionParser\ninstance from them. <tt>%prog help</tt> will then display all of the\nsubcommands and <tt>%prog help &lt;subcommand&gt;</tt> will give you help on the\n<tt>&lt;subcommand&gt;</tt> chosen.  Methods beginning with an underscore (<cite>_</cite>)\nare passed over.  This gives an easy way to translate an API class\ninto a command line program:</p>\n<pre>class Foo(object):\n  \"\"\"silly class that does nothing\"\"\"\n  def __init__(self): pass\n  def foo(self, value):\n    print \"The value is %s\" % value\n  def bar(self, fleem, verbose=False):\n    \"\"\"\n    The good ole `bar` command\n    - fleem: you know, that thing fleem\n    - verbose: whether to print out more things or not\n    \"\"\"\n    if verbose:\n      print \"You gave fleem=%s\" % fleem\n    return fleem * 2\n\nimport commandparser\nparser = commandparser.CommandParser(Foo)\nparser.invoke()\n</pre>\n<p>(From <a href=\"http://k0s.org/hg/CommandParser/file/tip/tests/simpleexample.py\" rel=\"nofollow\">http://k0s.org/hg/CommandParser/file/tip/tests/simpleexample.py</a> )</p>\n<p>Example invocation:</p>\n<pre>(paint)\u2502./simpleexample.py help\nUsage: simpleexample.py [options] command [command-options]\n\nsilly class that does nothing\n\nOptions:\n  -h, --help  show this help message and exit\n\nCommands:\n  bar   The good ole `bar` command\n  foo\n  help  print help for a given command\n(paint)\u2502./simpleexample.py foo\nUsage: simpleexample.py foo &lt;value&gt;\n\nsimpleexample.py: error: Not enough arguments given\n(paint)\u2502./simpleexample.py foo 4\nThe value is 4\n(paint)\u2502./simpleexample.py bar blah\nblahblah\n</pre>\n<p>For optional arguments, the type of the default value will be\ninspected from the function signature.  Currently, mandatory arguments\nare all strings, though this is clearly a shortcoming.</p>\n<p>The class docstring is used for <tt>%prog <span class=\"pre\">--help</span></tt> (and <tt>%prog help</tt>,\nsame thing). The method docstrings (including those of <tt>__init__</tt>\nfor global options) are used for subcommand help.  If the arguments\nare listed in the docstring in the form given above\n(<tt>- &lt;argument&gt; : &lt;something about the argument</tt>) then these are used\nto provide help on the individual options.  Otherwise, these are left\nblank.</p>\n<p>For straight-forward cases, it may be enough to pass your class\ndirectly to the CommandParser constructor.  For more complex cases, it\nis an advisable pattern to create a new class (either via subclassing\nor e.g. rolling from scratch, as applicable) that is more amenable to\nCommandParser rather than modifying an (e.g.) API class to fit what\nCommandParser expects.  This allows the use of an object-oriented\ninterface for subcommands without sacrificing your API class, and if\nyou can subclass then there\u2019s really not much extra code to write.</p>\n<p>See <a href=\"http://k0s.org/hg/CommandParser/file/tip/tests\" rel=\"nofollow\">http://k0s.org/hg/CommandParser/file/tip/tests</a> for tests and examples.</p>\n</div>\n<div id=\"reference\">\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/clime/\" rel=\"nofollow\">https://pypi.python.org/pypi/clime/</a> is a similar effort</li>\n</ul>\n<hr class=\"docutils\">\n<p>Jeff Hammel</p>\n<p><a href=\"http://k0s.org/hg/CommandParser\" rel=\"nofollow\">http://k0s.org/hg/CommandParser</a></p>\n</div>\n\n          </div>"}, "last_serial": 2655572, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8d10d6e0c9942cb26b7eafdc06f9f9e1", "sha256": "0f314fead8a6203f17ba16fd0db4c3efd312bd5d781ecfda28651724ddc37813"}, "downloads": -1, "filename": "CommandParser-0.1.tar.gz", "has_sig": false, "md5_digest": "8d10d6e0c9942cb26b7eafdc06f9f9e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3717, "upload_time": "2012-03-30T18:54:46", "upload_time_iso_8601": "2012-03-30T18:54:46.035104Z", "url": "https://files.pythonhosted.org/packages/17/48/dd0b542612ed7c70acae5828e744d7d5720d576ab356dde7293740c615ea/CommandParser-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ca8056b315608f810d1cfda68afbaa7f", "sha256": "2c19c7f1dceaa6363208c7220316c0c116cc7b06851c4b5a0f8f3dfe488c861b"}, "downloads": -1, "filename": "CommandParser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ca8056b315608f810d1cfda68afbaa7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3805, "upload_time": "2012-03-30T19:37:58", "upload_time_iso_8601": "2012-03-30T19:37:58.975650Z", "url": "https://files.pythonhosted.org/packages/3d/af/f94cbd0186580dcbfede0375218bf9795bc4d9963ef1e1434339619d0205/CommandParser-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "8bdfed3bea49bf04e77bb2c5f9563eef", "sha256": "c957a3a725581e196569109eacc999af8a1584bcc12ff5e5751ecc5d0ff5130e"}, "downloads": -1, "filename": "CommandParser-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8bdfed3bea49bf04e77bb2c5f9563eef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3825, "upload_time": "2012-03-31T01:46:21", "upload_time_iso_8601": "2012-03-31T01:46:21.529906Z", "url": "https://files.pythonhosted.org/packages/d4/cc/3cb4ae9ec74ba3a4344db9939bf84610ed5ababf71843d8df6d6a7ac8ca4/CommandParser-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "2b05adef26a49e3a09b1937944cebe96", "sha256": "813ae1759b7f59a4233a6240e3282ca6c3aefa6e343c300ae234b87b4acb6064"}, "downloads": -1, "filename": "CommandParser-0.1.3.tar.gz", "has_sig": false, "md5_digest": "2b05adef26a49e3a09b1937944cebe96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3846, "upload_time": "2012-04-02T19:42:39", "upload_time_iso_8601": "2012-04-02T19:42:39.370922Z", "url": "https://files.pythonhosted.org/packages/fa/da/e71ad507e0df6482602387b23e38dcfb4247774e0f0a926aa0a9a82339b7/CommandParser-0.1.3.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3b120a0edafa62ea0885cce2087af340", "sha256": "3c42ace4652d3d4654451aabbc9b3b6de448f5931166833dad6f7575e4eb0899"}, "downloads": -1, "filename": "CommandParser-0.2.tar.gz", "has_sig": false, "md5_digest": "3b120a0edafa62ea0885cce2087af340", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5526, "upload_time": "2013-01-29T03:56:05", "upload_time_iso_8601": "2013-01-29T03:56:05.315410Z", "url": "https://files.pythonhosted.org/packages/f6/af/32798c4ab4cee5d8ca8e7f08b979dca2bb60e1aa28fc9c6785ad58f5622f/CommandParser-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a31bb2063b829888881b38bd4b2e7e83", "sha256": "392befaade47b4afecb5c4fad3046e8d5dac62f6423c4b6527477dcdbd75ad2b"}, "downloads": -1, "filename": "CommandParser-0.3.tar.gz", "has_sig": false, "md5_digest": "a31bb2063b829888881b38bd4b2e7e83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5483, "upload_time": "2017-02-20T17:50:09", "upload_time_iso_8601": "2017-02-20T17:50:09.478776Z", "url": "https://files.pythonhosted.org/packages/30/2e/061c8835518336b4e2445bfeff402b5976d98f645776f8c76ba688ce5398/CommandParser-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a31bb2063b829888881b38bd4b2e7e83", "sha256": "392befaade47b4afecb5c4fad3046e8d5dac62f6423c4b6527477dcdbd75ad2b"}, "downloads": -1, "filename": "CommandParser-0.3.tar.gz", "has_sig": false, "md5_digest": "a31bb2063b829888881b38bd4b2e7e83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5483, "upload_time": "2017-02-20T17:50:09", "upload_time_iso_8601": "2017-02-20T17:50:09.478776Z", "url": "https://files.pythonhosted.org/packages/30/2e/061c8835518336b4e2445bfeff402b5976d98f645776f8c76ba688ce5398/CommandParser-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:24 2020"}