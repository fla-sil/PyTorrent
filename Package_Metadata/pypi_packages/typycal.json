{"info": {"author": "Jackson J. Gilman", "author_email": "jackson.gilman@cardinalhealth.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Quality Assurance"], "description": "====================================================\n`typycal` -- A handy tool to make type-aware classes\n====================================================\n\n.. image:: https://img.shields.io/pypi/v/typycal.svg\n    :target: https://pypi.org/project/typycal/\n\n.. image:: https://img.shields.io/pypi/pyversions/typycal.svg\n    :target: https://pypi.org/project/typycal/\n\n.. image:: https://travis-ci.org/cardinal-health/typycal.svg?branch=master\n    :target: https://travis-ci.org/cardinal-health/typycal\n\n.. image:: https://coveralls.io/repos/github/cardinal-health/typycal/badge.svg?branch=master\n    :target: https://coveralls.io/github/cardinal-health/typycal?branch=master\n\n.. note::\n\n    Yes, Python 3.7 introduced data classes, which basically provide the\n    majority of features this library offers.  Future development will likely\n    cover helpers for this new feature.\n\n    Still, there are some other cool uses for this library!\n\nThis lightweight library is for the developer who enjoys the assistance provided\nby Python's type annotations.\n\n^^^^^^^^^^^^^\n``typed_env``\n^^^^^^^^^^^^^\n\nIf your Python program relies on a custom os environment, it can be difficult to\nremember the string names for all those variables.  This decorator will provide\na means to deal with your environment in an object-oriented fashion.\n\n>>> from typycal import typed_env\n>>> import os\n>>> import pathlib\n\nFor example, say your program obtains database connection info from the\nenvironment\n\n>>> os.environ.update({'DB_HOSTNAME': 'localhost', 'DB_PORT': '3306'})\n>>> os.getenv('DB_PORT')\n'3306'\n\nYou can itemize all the environment variables you use in one class\n\n>>> @typed_env\n... class Environment:\n...     DB_HOSTNAME: str\n...     DB_PORT: int\n...     DB_USER: str = 'default_user'\n...     README_PATH: pathlib.Path = 'README.rst'\n...     JSON_DATA: dict = {'foo': 'bar'}\n\nThen you can create a singleton instance for use by the rest of your program\n\n>>> env = Environment()\n\nAnd your variables will be typed appropriately\n\n>>> (env.DB_HOSTNAME, env.DB_PORT, env.DB_USER)\n('localhost', 3306, 'default_user')\n\nAnd maintained in env properly\n\n>>> os.getenv('JSON_DATA')\n'{\"foo\": \"bar\"}'\n\nYou can do some neat things...\n\n>>> assert env.README_PATH.exists()\n\nIf you want to enforce the presence of certain variables in your environment,\nyou can add them this way\n\n>>> @typed_env\n... class StricterEnvironment:\n...     __required_on_init__ = ('NEED_ME', )\n...\n...     NEED_ME: str\n\nAn error will be thrown immediately when the environment object is instantiated.\n\n>>> stricter_env = StricterEnvironment()\nTraceback (most recent call last):\n    ...\nOSError: Variable 'NEED_ME' is required, but has not been defined.\n\n\n^^^^^^^^^^^^^^\n``typed_dict``\n^^^^^^^^^^^^^^\n\nThis decorator offers a simple, declarative means of converting a plain Python\ndictionary or string object into a type-aware object, with properties to access\na defined set of keys.\n\nDevelopers working with REST APIs or any data loaded as a dictionary can use\ntypycal to effectively design \"contracts\" with their code, and ideally end up\nwith more readable software\n\nThat said, since the release of Python 3.7, you likely will be better served\nwith data classes.\n\nLet's say you have a settings file sitting somewhere, and it's loaded into your\nproject as a dictionary (such as ``json.load``, ``yaml.safe_load``, etc...):\n\n.. code:: json\n\n    {\n        \"db\": {\n            \"username\": \"maxwell\",\n            \"password\": \"SECRET\",\n            \"port\": \"5432\",\n            \"use_ssl\": false\n        },\n        \"log_level\": \"DEBUG\"\n    }\n\n\n...let's say this configuration gets real messy real quick.  It can be a\nreal pain to have to remember the names of all your keys for what becomes a\nPython ``dict``.  So, here's an easy way to wrap your project's configuration in\na type-aware object\n\n>>> from typycal import typed_dict\n>>> @typed_dict\n... class DBConfig(dict):\n...    username: str\n...    password: str\n...    port: int\n...    use_ssl: bool\n\n>>> @typed_dict\n... class ProjectConfig(dict):\n...     log_level: str\n...     db: DBConfig\n\n>>> settings = {\n...     \"db\": {\n...             'username': 'maxwell',\n...             'password': 'SECRET',\n...             'port': '5432',\n...         },\n...     'log_level': 'DEBUG'\n... }\n>>> config = ProjectConfig(settings)\n\n\n>>> config.db.username == 'maxwell'\nTrue\n\n>>> config.db.port == 5432\nTrue\n\nSee that?  Even though you passed a string for the port, because you explicitly\ndefined the type, it was cast for you! Now, let's try to access a missing\nproperty\n\n>>> config.db.use_ssl is None\nTrue\n\nNote, an AttributeError wasn't raised because by default, ``typed_dict`` will\ndecorate your class so that any unset values which you have declared a type for\nwill be set to ``None``  You can disable this as follows\n\n>>> @typed_dict(initialize_with_none=False)\n... class StricterConfig(dict):\n...        foo: str\n...        bar: int\n\n>>> StricterConfig({'foo': 30}).bar\nTraceback (most recent call last):\n    ...\nAttributeError: 'StricterConfig' object has no attribute 'bar'\n\nThis makes the object-like treatment of the `dict` behave closer to how Python\nwould yell at you about accessing missing object attributes.\n\n^^^^^^^^^^^^^\n``typed_str``\n^^^^^^^^^^^^^\n\nAnother handy thing this library gives you is a way to quickly validate a string\nwith a regex, and then store the group match values as attributes on the str,\nand access them.  Here's a (roughly) complete example\n\n\n>>> model_pattern = r\"([0-9]{4}) (Ford|Toyota) (.+)\"\n\n>>> from typycal import typed_str\n>>> @typed_str(model_pattern, 'year', 'make', 'name')\n... class CarModel(str):\n...        year: int\n...        make: str\n...        name: str\n\n>>> @typed_str(r'(?P<color>[A-Za-z]+) (?P<model>.+)')\n... class Car(str):\n...     color: str\n...     model: CarModel\n\n>>> my_car = Car('Brown 1985 Ford Crown Victoria')\n\nNow we can get attributes for the matches!\n\n>>> my_car.color == \"Brown\"\nTrue\n\nNesting and types are honored as well!\n\n>>> my_car.model.year == 1985\nTrue\n\nYou can provide a template string as well to support (kinda) mutability.\n\n>>> @typed_str(r'^([0-9]+) things', 'qty', template='{qty} things')\n... class Things(str):\n...     qty: int\n\n>>> things = Things('20 things')\n>>> things.qty = 50\n>>> things\n50 things\n\nNote however, this only changes the behavior of ``__str__`` and ``__repr__``.\nSee the comparison of the \"new\" value vs the original string value:\n\n>>> things == '50 things', things == '20 things'\n(False, True)\n\n...so you'll need to explicitly cast\n\n>>> str(things) == '50 things'\nTrue\n\n----------\nChange Log\n----------\n\nSee CHANGELOG.rst", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cardinal-health/typycal", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "typycal", "package_url": "https://pypi.org/project/typycal/", "platform": "", "project_url": "https://pypi.org/project/typycal/", "project_urls": {"Homepage": "https://github.com/cardinal-health/typycal"}, "release_url": "https://pypi.org/project/typycal/0.7.0/", "requires_dist": null, "requires_python": "", "summary": "Easily add type intelligence to simple Python objects", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/typycal/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/typycal.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28029c39132bdecda60eb9fd164630898f1b2a7a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7479707963616c2e737667\"></a>\n<a href=\"https://pypi.org/project/typycal/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/typycal.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/357e90938500d2c130fe168d189441aa10c82732/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7479707963616c2e737667\"></a>\n<a href=\"https://travis-ci.org/cardinal-health/typycal\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/cardinal-health/typycal.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/586896db4bbe38fad7dacdfea6d4a8a5a5d4f7e3/68747470733a2f2f7472617669732d63692e6f72672f63617264696e616c2d6865616c74682f7479707963616c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/cardinal-health/typycal?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/cardinal-health/typycal/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5242f90853887266defe14adfc5252be1bbfefe1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f63617264696e616c2d6865616c74682f7479707963616c2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<div>\n<p>Note</p>\n<p>Yes, Python 3.7 introduced data classes, which basically provide the\nmajority of features this library offers.  Future development will likely\ncover helpers for this new feature.</p>\n<p>Still, there are some other cool uses for this library!</p>\n</div>\n<p>This lightweight library is for the developer who enjoys the assistance provided\nby Python\u2019s type annotations.</p>\n<div id=\"typed-env\">\n<h2><tt>typed_env</tt></h2>\n<p>If your Python program relies on a custom os environment, it can be difficult to\nremember the string names for all those variables.  This decorator will provide\na means to deal with your environment in an object-oriented fashion.</p>\n<pre>&gt;&gt;&gt; from typycal import typed_env\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; import pathlib\n</pre>\n<p>For example, say your program obtains database connection info from the\nenvironment</p>\n<pre>&gt;&gt;&gt; os.environ.update({'DB_HOSTNAME': 'localhost', 'DB_PORT': '3306'})\n&gt;&gt;&gt; os.getenv('DB_PORT')\n'3306'\n</pre>\n<p>You can itemize all the environment variables you use in one class</p>\n<pre>&gt;&gt;&gt; @typed_env\n... class Environment:\n...     DB_HOSTNAME: str\n...     DB_PORT: int\n...     DB_USER: str = 'default_user'\n...     README_PATH: pathlib.Path = 'README.rst'\n...     JSON_DATA: dict = {'foo': 'bar'}\n</pre>\n<p>Then you can create a singleton instance for use by the rest of your program</p>\n<pre>&gt;&gt;&gt; env = Environment()\n</pre>\n<p>And your variables will be typed appropriately</p>\n<pre>&gt;&gt;&gt; (env.DB_HOSTNAME, env.DB_PORT, env.DB_USER)\n('localhost', 3306, 'default_user')\n</pre>\n<p>And maintained in env properly</p>\n<pre>&gt;&gt;&gt; os.getenv('JSON_DATA')\n'{\"foo\": \"bar\"}'\n</pre>\n<p>You can do some neat things\u2026</p>\n<pre>&gt;&gt;&gt; assert env.README_PATH.exists()\n</pre>\n<p>If you want to enforce the presence of certain variables in your environment,\nyou can add them this way</p>\n<pre>&gt;&gt;&gt; @typed_env\n... class StricterEnvironment:\n...     __required_on_init__ = ('NEED_ME', )\n...\n...     NEED_ME: str\n</pre>\n<p>An error will be thrown immediately when the environment object is instantiated.</p>\n<pre>&gt;&gt;&gt; stricter_env = StricterEnvironment()\nTraceback (most recent call last):\n    ...\nOSError: Variable 'NEED_ME' is required, but has not been defined.\n</pre>\n</div>\n<div id=\"typed-dict\">\n<h2><tt>typed_dict</tt></h2>\n<p>This decorator offers a simple, declarative means of converting a plain Python\ndictionary or string object into a type-aware object, with properties to access\na defined set of keys.</p>\n<p>Developers working with REST APIs or any data loaded as a dictionary can use\ntypycal to effectively design \u201ccontracts\u201d with their code, and ideally end up\nwith more readable software</p>\n<p>That said, since the release of Python 3.7, you likely will be better served\nwith data classes.</p>\n<p>Let\u2019s say you have a settings file sitting somewhere, and it\u2019s loaded into your\nproject as a dictionary (such as <tt>json.load</tt>, <tt>yaml.safe_load</tt>, etc\u2026):</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"db\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"maxwell\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"SECRET\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"port\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5432\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"use_ssl\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"log_level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DEBUG\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>\u2026let\u2019s say this configuration gets real messy real quick.  It can be a\nreal pain to have to remember the names of all your keys for what becomes a\nPython <tt>dict</tt>.  So, here\u2019s an easy way to wrap your project\u2019s configuration in\na type-aware object</p>\n<pre>&gt;&gt;&gt; from typycal import typed_dict\n&gt;&gt;&gt; @typed_dict\n... class DBConfig(dict):\n...    username: str\n...    password: str\n...    port: int\n...    use_ssl: bool\n</pre>\n<pre>&gt;&gt;&gt; @typed_dict\n... class ProjectConfig(dict):\n...     log_level: str\n...     db: DBConfig\n</pre>\n<pre>&gt;&gt;&gt; settings = {\n...     \"db\": {\n...             'username': 'maxwell',\n...             'password': 'SECRET',\n...             'port': '5432',\n...         },\n...     'log_level': 'DEBUG'\n... }\n&gt;&gt;&gt; config = ProjectConfig(settings)\n</pre>\n<pre>&gt;&gt;&gt; config.db.username == 'maxwell'\nTrue\n</pre>\n<pre>&gt;&gt;&gt; config.db.port == 5432\nTrue\n</pre>\n<p>See that?  Even though you passed a string for the port, because you explicitly\ndefined the type, it was cast for you! Now, let\u2019s try to access a missing\nproperty</p>\n<pre>&gt;&gt;&gt; config.db.use_ssl is None\nTrue\n</pre>\n<p>Note, an AttributeError wasn\u2019t raised because by default, <tt>typed_dict</tt> will\ndecorate your class so that any unset values which you have declared a type for\nwill be set to <tt>None</tt>  You can disable this as follows</p>\n<pre>&gt;&gt;&gt; @typed_dict(initialize_with_none=False)\n... class StricterConfig(dict):\n...        foo: str\n...        bar: int\n</pre>\n<pre>&gt;&gt;&gt; StricterConfig({'foo': 30}).bar\nTraceback (most recent call last):\n    ...\nAttributeError: 'StricterConfig' object has no attribute 'bar'\n</pre>\n<p>This makes the object-like treatment of the <cite>dict</cite> behave closer to how Python\nwould yell at you about accessing missing object attributes.</p>\n</div>\n<div id=\"typed-str\">\n<h2><tt>typed_str</tt></h2>\n<p>Another handy thing this library gives you is a way to quickly validate a string\nwith a regex, and then store the group match values as attributes on the str,\nand access them.  Here\u2019s a (roughly) complete example</p>\n<pre>&gt;&gt;&gt; model_pattern = r\"([0-9]{4}) (Ford|Toyota) (.+)\"\n</pre>\n<pre>&gt;&gt;&gt; from typycal import typed_str\n&gt;&gt;&gt; @typed_str(model_pattern, 'year', 'make', 'name')\n... class CarModel(str):\n...        year: int\n...        make: str\n...        name: str\n</pre>\n<pre>&gt;&gt;&gt; @typed_str(r'(?P&lt;color&gt;[A-Za-z]+) (?P&lt;model&gt;.+)')\n... class Car(str):\n...     color: str\n...     model: CarModel\n</pre>\n<pre>&gt;&gt;&gt; my_car = Car('Brown 1985 Ford Crown Victoria')\n</pre>\n<p>Now we can get attributes for the matches!</p>\n<pre>&gt;&gt;&gt; my_car.color == \"Brown\"\nTrue\n</pre>\n<p>Nesting and types are honored as well!</p>\n<pre>&gt;&gt;&gt; my_car.model.year == 1985\nTrue\n</pre>\n<p>You can provide a template string as well to support (kinda) mutability.</p>\n<pre>&gt;&gt;&gt; @typed_str(r'^([0-9]+) things', 'qty', template='{qty} things')\n... class Things(str):\n...     qty: int\n</pre>\n<pre>&gt;&gt;&gt; things = Things('20 things')\n&gt;&gt;&gt; things.qty = 50\n&gt;&gt;&gt; things\n50 things\n</pre>\n<p>Note however, this only changes the behavior of <tt>__str__</tt> and <tt>__repr__</tt>.\nSee the comparison of the \u201cnew\u201d value vs the original string value:</p>\n<pre>&gt;&gt;&gt; things == '50 things', things == '20 things'\n(False, True)\n</pre>\n<p>\u2026so you\u2019ll need to explicitly cast</p>\n<pre>&gt;&gt;&gt; str(things) == '50 things'\nTrue\n</pre>\n<div id=\"change-log\">\n<h3>Change Log</h3>\n<p>See CHANGELOG.rst</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4395799, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "c4a7c27d2ea2159ee9bd3ff61fc2d40b", "sha256": "85cf382e166f8ced9bbb3c862ebefb920974313756da6a299eef54b9dad4185e"}, "downloads": -1, "filename": "typycal-0.4.0.tar.gz", "has_sig": false, "md5_digest": "c4a7c27d2ea2159ee9bd3ff61fc2d40b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3462, "upload_time": "2018-06-05T02:22:45", "upload_time_iso_8601": "2018-06-05T02:22:45.697382Z", "url": "https://files.pythonhosted.org/packages/0b/49/ba6ae554d88e6e4e190e9f3ab532deb66b50ea50fd62a3d31e9ec2dc3c7f/typycal-0.4.0.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "d8121c9b1d57d8126fd5b6046581d65b", "sha256": "d34f4b09c7eafbd0840bf10139a7a065efd62b09927e456a968b22dafdb26e94"}, "downloads": -1, "filename": "typycal-0.5.2.tar.gz", "has_sig": false, "md5_digest": "d8121c9b1d57d8126fd5b6046581d65b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6711, "upload_time": "2018-07-25T17:53:12", "upload_time_iso_8601": "2018-07-25T17:53:12.454845Z", "url": "https://files.pythonhosted.org/packages/59/2b/f7451ee496cf981be646677c0370bed70d7d5943f119d2989424d2da7e4f/typycal-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "100673dddd537442e7d396ae8300ddab", "sha256": "2cb827ad14a793434deb7b380fbeb7f18dc2732c4bd950f5971f3c9ef9176b97"}, "downloads": -1, "filename": "typycal-0.6.0.tar.gz", "has_sig": false, "md5_digest": "100673dddd537442e7d396ae8300ddab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7894, "upload_time": "2018-09-18T22:41:20", "upload_time_iso_8601": "2018-09-18T22:41:20.500853Z", "url": "https://files.pythonhosted.org/packages/47/af/02fb7472d425915104e832cb97a5c46d01705e31e80a2e81f16f58af74c3/typycal-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "48f619ae2b6dc76e272b73afa5c9f5f1", "sha256": "58f6cbb3c13347c411372d8f2949fbce087b12a62cd6af29510d71a9f9191072"}, "downloads": -1, "filename": "typycal-0.7.0.tar.gz", "has_sig": false, "md5_digest": "48f619ae2b6dc76e272b73afa5c9f5f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8512, "upload_time": "2018-10-19T21:13:18", "upload_time_iso_8601": "2018-10-19T21:13:18.931442Z", "url": "https://files.pythonhosted.org/packages/aa/f1/be67262572cd09c55370daefa6e4a0cfae26e0f731b132224c458fba1c80/typycal-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48f619ae2b6dc76e272b73afa5c9f5f1", "sha256": "58f6cbb3c13347c411372d8f2949fbce087b12a62cd6af29510d71a9f9191072"}, "downloads": -1, "filename": "typycal-0.7.0.tar.gz", "has_sig": false, "md5_digest": "48f619ae2b6dc76e272b73afa5c9f5f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8512, "upload_time": "2018-10-19T21:13:18", "upload_time_iso_8601": "2018-10-19T21:13:18.931442Z", "url": "https://files.pythonhosted.org/packages/aa/f1/be67262572cd09c55370daefa6e4a0cfae26e0f731b132224c458fba1c80/typycal-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:35 2020"}