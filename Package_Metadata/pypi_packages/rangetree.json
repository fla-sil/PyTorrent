{"info": {"author": "Tin Tvrtkovic", "author_email": "tin.tvrtkovic@nanobit.co", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5"], "description": "rangetree: easy range lookups\n=============================\n\n.. image:: https://img.shields.io/pypi/v/rangetree.svg\n    :target: https://pypi.python.org/pypi/rangetree\n.. image:: https://travis-ci.org/nanobit/rangetree.svg?branch=master\n    :target: https://travis-ci.org/nanobit/rangetree\n.. image:: https://coveralls.io/repos/github/nanobit/rangetree/badge.svg?branch=master\n    :target: https://coveralls.io/github/nanobit/rangetree?branch=master\n\n``rangetree`` is an Apache2 licensed library, written in Python 3, for easy and fast\nlookups of numeric ranges.\n\nGiven three integer ranges, 0 - 9, 10 - 99, and 100 - 999, ``rangetree`` makes\nit trivial to look up exactly which range any integer falls in. (Note Python\nslices and ranges include the first index, and exclude the second.)\n\n.. code-block:: python\n\n    >>> from rangetree import RangeTree\n    >>>\n    >>> r = RangeTree()\n    >>> r[0:10] = 'single digits'\n    >>> r[10:100] = 'double digits'\n    >>> r[100:1000] = 'triple digits'\n    >>>\n    >>> r[4]\n    'single digits'\n\n\n``RangeTree`` s are optimized for lookups, and make use of the excellent\nbintrees library.\n\n.. _bintrees: https://bitbucket.org/mozman/bintrees\n\nFeatures\n--------\n\n- supports open and closed ranges\n- supports integer keys\n- optimized for lookups (not insertions)\n\nInstallation\n------------\n\nTo install ``rangetree``, simply:\n\n.. code-block:: bash\n\n    $ pip install rangetree\n\nUsage\n-----\n\nInsertion is done using Python's slice notation, or using range objects.\n\n.. code-block:: python\n\n    >>> r = RangeTree()\n    >>> r[0:10] = 'single digits'\n    >>> r[range(10, 100)] = 'double digits'\n\nNegative integers are supported.\n\n.. code-block:: python\n\n    >>> r[-10:0] = 'negative singles'\n\nMissing a range will result in a ``KeyError``. Use ``Rangetree.get()`` or\nthe ``in`` operator.\n\n.. code-block:: python\n\n    >>> 1000 in r\n    False\n    >>> r[1000]\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"rangetree.py\", line 93, in __getitem__\n        raise KeyError(key)\n    KeyError: 1000\n    >>> r.get(1000, 'no value')\n    'no value'\n\nOpen ranges (that go to or from infinity) are supported. Setting open ranges is only\npossible using the slice notation.\n\n.. code-block:: python\n\n    >>> r[1000:] = 'quadruple digits or more'\n    >>> r[999999999]\n    'quadruple digits or more'\n\nOverlapping ranges will result in a ``KeyError``.\n\n.. code-block:: python\n\n    >>> r = RangeTree()\n    >>> r[1000:] = 'quadruple digits or more'\n    >>> r[10000:] = 'ten thousand'\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"rangetree.py\", line 58, in __setitem__\n        raise KeyError('Overlapping intervals.')\n    KeyError: 'Overlapping intervals.'\n\n``rangetree`` is fast. Using ``perf``, given 2000 intervals:\n\n.. code-block:: bash\n\n    $ pyperf timeit --rigorous -g --duplicate 5 -s \"from rangetree import RangeTree; r = RangeTree()\" -s \"for i in range(2000):\" -s \" r[i*10:i*10+10] = i\" \"r[500]\"\n    .........................................\n    3.75 us:  1 #######\n    3.77 us:  2 #############\n    3.80 us:  9 ###########################################################\n    3.82 us:  5 #################################\n    3.84 us:  8 #####################################################\n    3.86 us:  9 ###########################################################\n    3.89 us:  7 ##############################################\n    3.91 us:  8 #####################################################\n    3.93 us:  8 #####################################################\n    3.95 us:  6 ########################################\n    3.98 us: 10 ##################################################################\n    4.00 us: 12 ###############################################################################\n    4.02 us:  5 #################################\n    4.05 us:  9 ###########################################################\n    4.07 us:  5 #################################\n    4.09 us:  6 ########################################\n    4.11 us:  3 ####################\n    4.14 us:  4 ##########################\n    4.16 us:  2 #############\n    4.18 us:  0 |\n    4.20 us:  1 #######\n\n    Median +- std dev: 3.97 us +- 0.11 us\n\nThe ballpark figure for lookups is in the single digit microseconds.\n\nChangelog\n---------\n\n1.0 (2016-10-20)\n~~~~~~~~~~~~~~~~~~\nInitial public release.\n\n\nContributing\n------------\nContributions are very welcome. Tests can be run with ``tox``, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\nCredits\n-------\n\nThe development of ``rangetree`` is sponsored by Nanobit_.\n\n``rangetree`` is tested with Hypothesis_, by David R. MacIver.\n\n``rangetree`` is benchmarked using perf_, by Victor Stinner.\n\n.. _Nanobit: http://nanobit.co\n.. _Hypothesis: http://hypothesis.readthedocs.io/en/latest/\n.. _perf: https://github.com/haypo/perf", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nanobit/rangetree", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "rangetree", "package_url": "https://pypi.org/project/rangetree/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rangetree/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nanobit/rangetree"}, "release_url": "https://pypi.org/project/rangetree/1.0/", "requires_dist": null, "requires_python": null, "summary": "Quick lookups of values in numeric ranges.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/rangetree\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/rangetree.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc408cd762dcfa71cb4324807f71dd24a50e8114/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72616e6765747265652e737667\"></a>\n<a href=\"https://travis-ci.org/nanobit/rangetree\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/nanobit/rangetree.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d895477d9feb8312b48b9e9aed214e3961bf5ebf/68747470733a2f2f7472617669732d63692e6f72672f6e616e6f6269742f72616e6765747265652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/nanobit/rangetree?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/nanobit/rangetree/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/614e9180d8df53b42f397b7a2f30d502cd87eb79/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6e616e6f6269742f72616e6765747265652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p><tt>rangetree</tt> is an Apache2 licensed library, written in Python 3, for easy and fast\nlookups of numeric ranges.</p>\n<p>Given three integer ranges, 0 - 9, 10 - 99, and 100 - 999, <tt>rangetree</tt> makes\nit trivial to look up exactly which range any integer falls in. (Note Python\nslices and ranges include the first index, and exclude the second.)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rangetree</span> <span class=\"kn\">import</span> <span class=\"n\">RangeTree</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">RangeTree</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'single digits'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'double digits'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">:</span><span class=\"mi\">1000</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'triple digits'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"s1\">'single digits'</span>\n</pre>\n<p><tt>RangeTree</tt> s are optimized for lookups, and make use of the excellent\nbintrees library.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>supports open and closed ranges</li>\n<li>supports integer keys</li>\n<li>optimized for lookups (not insertions)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install <tt>rangetree</tt>, simply:</p>\n<pre>$ pip install rangetree\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Insertion is done using Python\u2019s slice notation, or using range objects.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">RangeTree</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'single digits'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"s1\">'double digits'</span>\n</pre>\n<p>Negative integers are supported.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'negative singles'</span>\n</pre>\n<p>Missing a range will result in a <tt>KeyError</tt>. Use <tt>Rangetree.get()</tt> or\nthe <tt>in</tt> operator.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">1000</span> <span class=\"ow\">in</span> <span class=\"n\">r</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">]</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"rangetree.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__getitem__</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"mi\">1000</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s1\">'no value'</span><span class=\"p\">)</span>\n<span class=\"s1\">'no value'</span>\n</pre>\n<p>Open ranges (that go to or from infinity) are supported. Setting open ranges is only\npossible using the slice notation.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"s1\">'quadruple digits or more'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">999999999</span><span class=\"p\">]</span>\n<span class=\"s1\">'quadruple digits or more'</span>\n</pre>\n<p>Overlapping ranges will result in a <tt>KeyError</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">RangeTree</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"s1\">'quadruple digits or more'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">10000</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"s1\">'ten thousand'</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"rangetree.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__setitem__</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"s1\">'Overlapping intervals.'</span><span class=\"p\">)</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"s1\">'Overlapping intervals.'</span>\n</pre>\n<p><tt>rangetree</tt> is fast. Using <tt>perf</tt>, given 2000 intervals:</p>\n<pre>$ pyperf timeit --rigorous -g --duplicate <span class=\"m\">5</span> -s <span class=\"s2\">\"from rangetree import RangeTree; r = RangeTree()\"</span> -s <span class=\"s2\">\"for i in range(2000):\"</span> -s <span class=\"s2\">\" r[i*10:i*10+10] = i\"</span> <span class=\"s2\">\"r[500]\"</span>\n.........................................\n<span class=\"m\">3</span>.75 us:  <span class=\"m\">1</span> <span class=\"c1\">#######\n</span><span class=\"m\">3</span>.77 us:  <span class=\"m\">2</span> <span class=\"c1\">#############\n</span><span class=\"m\">3</span>.80 us:  <span class=\"m\">9</span> <span class=\"c1\">###########################################################\n</span><span class=\"m\">3</span>.82 us:  <span class=\"m\">5</span> <span class=\"c1\">#################################\n</span><span class=\"m\">3</span>.84 us:  <span class=\"m\">8</span> <span class=\"c1\">#####################################################\n</span><span class=\"m\">3</span>.86 us:  <span class=\"m\">9</span> <span class=\"c1\">###########################################################\n</span><span class=\"m\">3</span>.89 us:  <span class=\"m\">7</span> <span class=\"c1\">##############################################\n</span><span class=\"m\">3</span>.91 us:  <span class=\"m\">8</span> <span class=\"c1\">#####################################################\n</span><span class=\"m\">3</span>.93 us:  <span class=\"m\">8</span> <span class=\"c1\">#####################################################\n</span><span class=\"m\">3</span>.95 us:  <span class=\"m\">6</span> <span class=\"c1\">########################################\n</span><span class=\"m\">3</span>.98 us: <span class=\"m\">10</span> <span class=\"c1\">##################################################################\n</span><span class=\"m\">4</span>.00 us: <span class=\"m\">12</span> <span class=\"c1\">###############################################################################\n</span><span class=\"m\">4</span>.02 us:  <span class=\"m\">5</span> <span class=\"c1\">#################################\n</span><span class=\"m\">4</span>.05 us:  <span class=\"m\">9</span> <span class=\"c1\">###########################################################\n</span><span class=\"m\">4</span>.07 us:  <span class=\"m\">5</span> <span class=\"c1\">#################################\n</span><span class=\"m\">4</span>.09 us:  <span class=\"m\">6</span> <span class=\"c1\">########################################\n</span><span class=\"m\">4</span>.11 us:  <span class=\"m\">3</span> <span class=\"c1\">####################\n</span><span class=\"m\">4</span>.14 us:  <span class=\"m\">4</span> <span class=\"c1\">##########################\n</span><span class=\"m\">4</span>.16 us:  <span class=\"m\">2</span> <span class=\"c1\">#############\n</span><span class=\"m\">4</span>.18 us:  <span class=\"m\">0</span> <span class=\"p\">|</span>\n<span class=\"m\">4</span>.20 us:  <span class=\"m\">1</span> <span class=\"c1\">#######\n</span>\nMedian +- std dev: <span class=\"m\">3</span>.97 us +- <span class=\"m\">0</span>.11 us\n</pre>\n<p>The ballpark figure for lookups is in the single digit microseconds.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.0 (2016-10-20)</span></h2>\n<p>Initial public release.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are very welcome. Tests can be run with <tt>tox</tt>, please ensure\nthe coverage at least stays the same before you submit a pull request.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>The development of <tt>rangetree</tt> is sponsored by <a href=\"http://nanobit.co\" rel=\"nofollow\">Nanobit</a>.</p>\n<p><tt>rangetree</tt> is tested with <a href=\"http://hypothesis.readthedocs.io/en/latest/\" rel=\"nofollow\">Hypothesis</a>, by David R. MacIver.</p>\n<p><tt>rangetree</tt> is benchmarked using <a href=\"https://github.com/haypo/perf\" rel=\"nofollow\">perf</a>, by Victor Stinner.</p>\n</div>\n\n          </div>"}, "last_serial": 2463825, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "12b946f010bae79f0d2e715c8cfcc1de", "sha256": "eea7a01fc2785d9b5da93e39b0e3bba6689d62ff910ae721c14ac2039f2fb0e2"}, "downloads": -1, "filename": "rangetree-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12b946f010bae79f0d2e715c8cfcc1de", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6531, "upload_time": "2016-11-16T10:09:50", "upload_time_iso_8601": "2016-11-16T10:09:50.824596Z", "url": "https://files.pythonhosted.org/packages/f1/85/257b0d60c3e779d2a2d78e67edbf42e81a627178958484a5a423107f2aaf/rangetree-1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12b946f010bae79f0d2e715c8cfcc1de", "sha256": "eea7a01fc2785d9b5da93e39b0e3bba6689d62ff910ae721c14ac2039f2fb0e2"}, "downloads": -1, "filename": "rangetree-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12b946f010bae79f0d2e715c8cfcc1de", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6531, "upload_time": "2016-11-16T10:09:50", "upload_time_iso_8601": "2016-11-16T10:09:50.824596Z", "url": "https://files.pythonhosted.org/packages/f1/85/257b0d60c3e779d2a2d78e67edbf42e81a627178958484a5a423107f2aaf/rangetree-1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:07:32 2020"}