{"info": {"author": "Sean Francis N. Ballais", "author_email": "sfballais123@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Progen\n## Project Generator\n\nGenerate projects easily with a single command(`python progen.py [generator]`). As of v0.0.1a, Progen supports generating C++ projects. More efforts are needed to improve it.\n\n### Creating your own generator\nYou can create your own project generator that will be utilized by Progen. A generator is simply a python file.    \nThere are two types of generators:\n- **Folders Only**\nThis type of generator only requires that you specify folders that will be created with a variable called `folders`.    \nFor example:\n```python\nfolders = [\n    \"bin\",\n    \"bin/epic\",\n    \"build\",\n    \"src\"\n]\n```\n    \nJust save the code above as a python script (for example, `testscript.py`) inside Progen's generator folder in the installation directory.    \n    \nTo generate a project based on the specified folders above, just run `python progen.py testscript` inside the terminal.\n- **Full Generator**\nThis type of generator requires that you be responsible for making the folders. This is useful if you want to create a generator that is interactive and flexible.    \n    \nThe code must be inside a `main()` function in order for it to work. Running a full generator is similar to running a *Folders only* generator.     \n\n*NOTE: Generators must be saved inside Progen's `generators` folder in the installation directory*    \n\n### License\nProgen is licensed under the GNU General Public License v3.0.    \n    \nCopyright (C) 2015 Sean Francis N. Ballais", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/seanballais/Progen", "keywords": null, "license": "LICENSE", "maintainer": null, "maintainer_email": null, "name": "prg", "package_url": "https://pypi.org/project/prg/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/prg/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://www.github.com/seanballais/Progen"}, "release_url": "https://pypi.org/project/prg/0.0.1a/", "requires_dist": null, "requires_python": null, "summary": "Generate projects", "version": "0.0.1a", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Progen<br>## Project Generator<br><br>Generate projects easily with a single command(`python progen.py [generator]`). As of v0.0.1a, Progen supports generating C++ projects. More efforts are needed to improve it.<br><br>### Creating your own generator<br>You can create your own project generator that will be utilized by Progen. A generator is simply a python file.    <br>There are two types of generators:<br>- **Folders Only**<br>This type of generator only requires that you specify folders that will be created with a variable called `folders`.    <br>For example:<br>```python<br>folders = [<br>    \"bin\",<br>    \"bin/epic\",<br>    \"build\",<br>    \"src\"<br>]<br>```<br>    <br>Just save the code above as a python script (for example, `testscript.py`) inside Progen's generator folder in the installation directory.    <br>    <br>To generate a project based on the specified folders above, just run `python progen.py testscript` inside the terminal.<br>- **Full Generator**<br>This type of generator requires that you be responsible for making the folders. This is useful if you want to create a generator that is interactive and flexible.    <br>    <br>The code must be inside a `main()` function in order for it to work. Running a full generator is similar to running a *Folders only* generator.     <br><br>*NOTE: Generators must be saved inside Progen's `generators` folder in the installation directory*    <br><br>### License<br>Progen is licensed under the GNU General Public License v3.0.    <br>    <br>Copyright (C) 2015 Sean Francis N. Ballais\n          </div>"}, "last_serial": 1531183, "releases": {"0.0.1a": [{"comment_text": "", "digests": {"md5": "0a963a77520e80e2075335c7e1d23a84", "sha256": "fa2a0a6120ac80cacc8a60fce21f7c35ea6d36d15855036fd6a0795a891b9cc2"}, "downloads": -1, "filename": "prg-0.0.1a.tar.gz", "has_sig": false, "md5_digest": "0a963a77520e80e2075335c7e1d23a84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3606, "upload_time": "2015-05-03T05:25:12", "upload_time_iso_8601": "2015-05-03T05:25:12.688866Z", "url": "https://files.pythonhosted.org/packages/dd/2e/a6824eab015746cc5c91f700ebe2a3a31756dda8bbb046e5c9191894a9b4/prg-0.0.1a.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a963a77520e80e2075335c7e1d23a84", "sha256": "fa2a0a6120ac80cacc8a60fce21f7c35ea6d36d15855036fd6a0795a891b9cc2"}, "downloads": -1, "filename": "prg-0.0.1a.tar.gz", "has_sig": false, "md5_digest": "0a963a77520e80e2075335c7e1d23a84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3606, "upload_time": "2015-05-03T05:25:12", "upload_time_iso_8601": "2015-05-03T05:25:12.688866Z", "url": "https://files.pythonhosted.org/packages/dd/2e/a6824eab015746cc5c91f700ebe2a3a31756dda8bbb046e5c9191894a9b4/prg-0.0.1a.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:29 2020"}