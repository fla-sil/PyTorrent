{"info": {"author": "Emin Martinian", "author_email": "emin.martinian@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "Introduction\n============\n\nThe ``ox_cache`` package is a collection of tools for fast, thread-safe,\nand flexible caching or memoizing of results. In particular,\n``ox_cache`` is designed to make it easy to implement the quirks of your\nparticular caching needs.\n\nFor example, if you want to repopulate the entire cache when you get a\nsingle cache miss, you can include the ``RefreshDictMixin``. Or if you\nwant to include least-recently-used semantics, you can include the\n``LRUReplacementMixin``. Or if you want a timed expiration, you can use\nthe ``TimedExpiryMixin``.\n\nThe basic structure is that you create a sub-class of ``OxCacheBase``,\ninclude appropriate mixins, and then define a way to get a new value on\na cache miss.\n\nFeatures\n--------\n\nSome of the interesting features of ``ox_cache`` include:\n\n1. Flexible: You can mix and match mixins and overrides to easily get\n   desired caching behavior.\n2. Memoization: Built-in decorators for function memoization.\n3. Dict-like: Dictionary methods such as ``__setitem__``,\n   ``__getitem__``, ``__delitem__``, ``__contains__``, ``__iter__``, and\n   ``items`` are provided.\n4. Thread-safe: All of the basic operations use threading.Lock().\n5. Thread-smart: Hooks and overridable methods are structured so that\n   you can ignore threads in your customization but stay thread safe.\n6. Docs: Python docstrings are provided for every class and method.\n7. Unit tests: Source code comes with unit tests with very high code\n   coverage.\n\nQuick Start\n===========\n\nInstallation\n------------\n\nInstall with the usual\n\n.. code:: sh\n\n    $ pip install ox_cache\n\nCaching\n-------\n\nThe simplest way to use the cache is to create an instance of\nOxCacheBase and use it like a dict as shown below but to really get the\npower of ``ox_cache``, you will want to use mixins or overrides as shown\nlater.\n\n.. code:: python\n\n    >>> from ox_cache import OxCacheBase\n    >>> c = OxCacheBase()  # trivial example of a cache\n    >>> c['foo'] = 5  # alternative: c.store('foo', 5, **options)\n    >>> c['foo']\n    5\n\nOf course, with the usage above you don't really get any benefits beyond\na standard dict. One convenient feature of ``ox_cache`` is that you can\noverride the ``make_value`` method to get a \"smart cache\". With\n``make_value``, when there is no value for a key, your cache will no how\nto make that value.\n\nTo get a \"smart cache\" you simply sub-class ``OxCacheBase`` and then\noverride desired methods. The only required method you must override is\nthe ``make_value`` method to make the value when a key is not in the\ncache. The following illustrates the simplest use case:\n\n.. code:: python\n\n    >>> from ox_cache import OxCacheBase\n    >>> class BasicCache(OxCacheBase):\n    ...     def make_value(self, key, **opts):\n    ...         'Simple function to create value for requested key.'\n    ...         print('Calling refresh for key=\"%s\"' % key)\n    ...         return 'x' * key  # create a bunch of x's\n    ...\n    >>> cache = BasicCache()\n    >>> cache.get(5)  # Will call make_value to generate 1st value.\n    Calling refresh for key=\"5\"\n    'xxxxx'\n    >>> cache.get(5)  # Will get value from cache without calling make_value\n    'xxxxx'\n\nYou can get more interesting cache features by including mixins. The\nfollowing illustrate a simple example where we include the\n``TimedExpiryMixin`` so that cache entries expire after a set amount of\ntime.\n\n.. code:: python\n\n\n    >>> from ox_cache import OxCacheBase, TimedExpiryMixin\n    >>> class TimedCache(TimedExpiryMixin, OxCacheBase):\n    ...     'Cache which expires items after after self.expiry_seconds.'\n    ...     def make_value(self, key, **opts):\n    ...         'Simple function to create value for requested key.'\n    ...         print('Calling refresh for key=\"%s\"' % key)\n    ...         return 'key=\"%s\" is fun!' % key\n    ...\n    >>> cache = TimedCache(expiry_seconds=100) # expires after 100 seconds\n    >>> cache.get('test')  # Will call make_value to generate value.\n    Calling refresh for key=\"test\"\n    'key=\"test\" is fun!'\n    >>> cache.ttl('test') > 60  # Check time to live is pretty long\n    True\n    >>> cache.get('test')  # If called immediately, will use cached item\n    'key=\"test\" is fun!'\n    >>> cache.expiry_seconds = 1     # Change expiration time to be much faster\n    >>> import time; time.sleep(1.1) # Wait a few seconds for cache item to expire\n    >>> cache.get('test')  # Will generate a new value since time limit expired\n    Calling refresh for key=\"test\"\n    'key=\"test\" is fun!'\n\nIn addition to the ``get`` method illustrated above, a few other methods\nyou may find useful include:\n\n1. ``ttl``: Return the time-to-live for a key.\n2. ``expired``: Return whether the cache entry for a key has expired.\n3. ``delete``: Remove an entry from the cache.\n4. ``clean``: Go through the entire cache and remove expired elements.\n5. ``exists``: Check if an element is in the cache (possibly expired).\n\nFor more sophisticated caching you can use more mix-ins or override the\ndesired functions. See the docs for the ``OxCacheBase`` class in the\nsource code or in the following documentation sections.\n\nNote that if you want to keep things as simple as possible, you don't\nhave to override ``make_value`` if using the ``TimedExpiryMixin`` but\ncan just use the ``store`` method as shown below:\n\nKeeping it Simple\n~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> import time\n    >>> from ox_cache import OxCacheBase, TimedExpiryMixin\n    >>> class MyCache(TimedExpiryMixin, OxCacheBase):\n    ...     'Cache with timed expiry'\n    ... \n    >>> cache = MyCache()  # Create an instance\n    >>> cache.expiry_seconds = 1  # make refresh time very short\n    >>> cache.store('foo', 'blah')\n    >>> cache.get('foo')\n    'blah'\n    >>> time.sleep(1.5)       # sleep so that cache becomes stale\n    >>> try:                  # Attempt to get stale item 'foo'\n    ...     cache.get('foo')  # will cause an exception\n    ... except:               # since make_value not defined\n    ...     print(\"unable to get 'foo'\")\n    ...\n    unable to get 'foo'\n\nMemoization\n-----------\n\nTo memoize (cache) function calls you can use something like the\n``OxMemoizer`` as a function decorator as shown in the example below:\n\n.. code:: python\n\n\n    >>> from ox_cache import OxMemoizer\n    >>> @OxMemoizer\n    ... def my_func(x, y):\n    ...     'Add two inputs'\n    ...     z = x + y\n    ...     print('called my_func(%s, %s) = %s' % (x, y, z))\n    ...     return z\n    ...\n    >>> my_func(1, 2)  # This will actually call the function.\n    called my_func(1, 2) = 3\n    3\n    >>> my_func(1, 2)  # This will use a cached value.\n    3\n\nSince ``OxMemoizer`` is just a sub-class of ``OxCacheBase`` you can use\none of the provided mixins to control expiration or just use something\nlike the ``LRUReplacementMemoizer``. As shown below, setting the\n``max_size`` property of an instance of ``LRUReplacementMemoizer`` will\nautomatically kick out least recently used cache entries when the cache\ngets too large.\n\n.. code:: python\n\n\n    >>> from ox_cache import LRUReplacementMemoizer\n    >>> @LRUReplacementMemoizer\n    ... def my_func(x, y):\n    ...     'Add two inputs'\n    ...     z = x + y\n    ...     print('called my_func(%s, %s) = %s' % (x, y, z))\n    ...     return z\n    ...\n    >>> my_func(1, 2)\n    called my_func(1, 2) = 3\n    3\n    >>> my_func.max_size = 3\n    >>> data = [my_func(1, i) for i in range(4)]\n    called my_func(1, 0) = 1\n    called my_func(1, 1) = 2\n    called my_func(1, 3) = 4\n    >>> len(my_func), my_func.exists(1, 0)  # Verify least recent item kicked out\n    (3, False)\n\nIf you wanted time based expiration, you could use ``TimedMemoizer`` or\nsimply subclass ``OxMemoizer`` and include mixins like\n``LRUReplacementMixin`` and/or ``TimedExpiryMixin``.\n\nNote that since our memoizers are sub-classes of ``OxCacheBase``, you\ncan use any of the methods from ``OxCacheBase`` as shown below:\n\n.. code:: python\n\n\n    >>> my_func.exists(1, 3)\n    True\n    >>> my_func.delete(1, 3)\n    >>> my_func.exists(1, 3)\n    False\n\nDiscussion\n==========\n\nThe ox\\_cache package provides tools to build your own simple caching\nsystem. The core class is ``OxCacheBase`` which everything inherits\nfrom. The only function which you must provide when you sub-class\n``OxCacheBase`` is ``make_value`` which defines how to create a value\nwhich is not in the cache.\n\nYou can further customize how the cache works either by overriding\nappropriate methods or by using one of the many mixins provided. For\nexample, the following illustrates how you can use the\n``TimedExpiryMixin`` and the ``RefreshDictMixin`` to create a\n``BatchCache`` which updates the whole cache any time there is a cache\nmiss:\n\n.. code:: python\n\n\n    >>> from ox_cache import OxCacheBase, TimedExpiryMixin, RefreshDictMixin\n    >>> class BatchCache(TimedExpiryMixin, RefreshDictMixin, OxCacheBase):\n    ...     'Simple cache with time-based refresh via a function that gives dict'\n    ...     def make_dict(self, key):\n    ...         \"Function to make dict to use to refresh cache.\"\n    ...         return {k: str(k)+self.info for k in ([key] + list(range(10)))}\n    ...\n    >>> cache = BatchCache()\n    >>> cache.info = '5'\n    >>> cache.get(2) # will auto-refresh using make_dict\n    '25'\n    >>> cache.ttl(2) > 0\n    True\n    >>> cache.info = '6'\n    >>> cache.get(2) # cache has not been marked as stale so no refresh\n    '25'\n    >>> cache.expiry_seconds = 1  # make refresh time very short\n    >>> time.sleep(1.5)  # sleep so that cache becomes stale\n    >>> cache.ttl(2)\n    0\n    >>> cache.get(2)     # check cache to see that we auto-refresh\n    '26'\n    >>> cache.expiry_seconds = 1000  # slow down auto refresh for other examples\n    >>> cache.store(800, 5)\n    >>> cache.get(800)\n    5\n    >>> cache.store('800', 'a string')\n    >>> cache.get('800')\n    'a string'\n    >>> cache.delete(800)\n    >>> cache.get(800, allow_refresh=False) is None\n    True\n\nAdditional Information\n======================\n\nYou can find the project page at https://github.com/emin63/ox\\_cache\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/emin63/ox_cache", "keywords": "cache caching memoization", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ox_cache", "package_url": "https://pypi.org/project/ox_cache/", "platform": "", "project_url": "https://pypi.org/project/ox_cache/", "project_urls": {"Homepage": "http://github.com/emin63/ox_cache"}, "release_url": "https://pypi.org/project/ox_cache/1.3.2/", "requires_dist": null, "requires_python": "", "summary": "Tools for caching and memoization in python.", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The <tt>ox_cache</tt> package is a collection of tools for fast, thread-safe,\nand flexible caching or memoizing of results. In particular,\n<tt>ox_cache</tt> is designed to make it easy to implement the quirks of your\nparticular caching needs.</p>\n<p>For example, if you want to repopulate the entire cache when you get a\nsingle cache miss, you can include the <tt>RefreshDictMixin</tt>. Or if you\nwant to include least-recently-used semantics, you can include the\n<tt>LRUReplacementMixin</tt>. Or if you want a timed expiration, you can use\nthe <tt>TimedExpiryMixin</tt>.</p>\n<p>The basic structure is that you create a sub-class of <tt>OxCacheBase</tt>,\ninclude appropriate mixins, and then define a way to get a new value on\na cache miss.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<p>Some of the interesting features of <tt>ox_cache</tt> include:</p>\n<ol>\n<li>Flexible: You can mix and match mixins and overrides to easily get\ndesired caching behavior.</li>\n<li>Memoization: Built-in decorators for function memoization.</li>\n<li>Dict-like: Dictionary methods such as <tt>__setitem__</tt>,\n<tt>__getitem__</tt>, <tt>__delitem__</tt>, <tt>__contains__</tt>, <tt>__iter__</tt>, and\n<tt>items</tt> are provided.</li>\n<li>Thread-safe: All of the basic operations use threading.Lock().</li>\n<li>Thread-smart: Hooks and overridable methods are structured so that\nyou can ignore threads in your customization but stay thread safe.</li>\n<li>Docs: Python docstrings are provided for every class and method.</li>\n<li>Unit tests: Source code comes with unit tests with very high code\ncoverage.</li>\n</ol>\n</div>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install with the usual</p>\n<pre>$ pip install ox_cache\n</pre>\n</div>\n<div id=\"caching\">\n<h3>Caching</h3>\n<p>The simplest way to use the cache is to create an instance of\nOxCacheBase and use it like a dict as shown below but to really get the\npower of <tt>ox_cache</tt>, you will want to use mixins or overrides as shown\nlater.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ox_cache</span> <span class=\"kn\">import</span> <span class=\"n\">OxCacheBase</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">OxCacheBase</span><span class=\"p\">()</span>  <span class=\"c1\"># trivial example of a cache</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>  <span class=\"c1\"># alternative: c.store('foo', 5, **options)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n<span class=\"mi\">5</span>\n</pre>\n<p>Of course, with the usage above you don\u2019t really get any benefits beyond\na standard dict. One convenient feature of <tt>ox_cache</tt> is that you can\noverride the <tt>make_value</tt> method to get a \u201csmart cache\u201d. With\n<tt>make_value</tt>, when there is no value for a key, your cache will no how\nto make that value.</p>\n<p>To get a \u201csmart cache\u201d you simply sub-class <tt>OxCacheBase</tt> and then\noverride desired methods. The only required method you must override is\nthe <tt>make_value</tt> method to make the value when a key is not in the\ncache. The following illustrates the simplest use case:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ox_cache</span> <span class=\"kn\">import</span> <span class=\"n\">OxCacheBase</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">BasicCache</span><span class=\"p\">(</span><span class=\"n\">OxCacheBase</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">make_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">opts</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'Simple function to create value for requested key.'</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Calling refresh for key=\"</span><span class=\"si\">%s</span><span class=\"s1\">\"'</span> <span class=\"o\">%</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'x'</span> <span class=\"o\">*</span> <span class=\"n\">key</span>  <span class=\"c1\"># create a bunch of x's</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">BasicCache</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># Will call make_value to generate 1st value.</span>\n<span class=\"n\">Calling</span> <span class=\"n\">refresh</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"5\"</span>\n<span class=\"s1\">'xxxxx'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># Will get value from cache without calling make_value</span>\n<span class=\"s1\">'xxxxx'</span>\n</pre>\n<p>You can get more interesting cache features by including mixins. The\nfollowing illustrate a simple example where we include the\n<tt>TimedExpiryMixin</tt> so that cache entries expire after a set amount of\ntime.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ox_cache</span> <span class=\"kn\">import</span> <span class=\"n\">OxCacheBase</span><span class=\"p\">,</span> <span class=\"n\">TimedExpiryMixin</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">TimedCache</span><span class=\"p\">(</span><span class=\"n\">TimedExpiryMixin</span><span class=\"p\">,</span> <span class=\"n\">OxCacheBase</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'Cache which expires items after after self.expiry_seconds.'</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">make_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">opts</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'Simple function to create value for requested key.'</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Calling refresh for key=\"</span><span class=\"si\">%s</span><span class=\"s1\">\"'</span> <span class=\"o\">%</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'key=\"</span><span class=\"si\">%s</span><span class=\"s1\">\" is fun!'</span> <span class=\"o\">%</span> <span class=\"n\">key</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">TimedCache</span><span class=\"p\">(</span><span class=\"n\">expiry_seconds</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"c1\"># expires after 100 seconds</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>  <span class=\"c1\"># Will call make_value to generate value.</span>\n<span class=\"n\">Calling</span> <span class=\"n\">refresh</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"test\"</span>\n<span class=\"s1\">'key=\"test\" is fun!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">60</span>  <span class=\"c1\"># Check time to live is pretty long</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>  <span class=\"c1\"># If called immediately, will use cached item</span>\n<span class=\"s1\">'key=\"test\" is fun!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">expiry_seconds</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>     <span class=\"c1\"># Change expiration time to be much faster</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"p\">;</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.1</span><span class=\"p\">)</span> <span class=\"c1\"># Wait a few seconds for cache item to expire</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>  <span class=\"c1\"># Will generate a new value since time limit expired</span>\n<span class=\"n\">Calling</span> <span class=\"n\">refresh</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"test\"</span>\n<span class=\"s1\">'key=\"test\" is fun!'</span>\n</pre>\n<p>In addition to the <tt>get</tt> method illustrated above, a few other methods\nyou may find useful include:</p>\n<ol>\n<li><tt>ttl</tt>: Return the time-to-live for a key.</li>\n<li><tt>expired</tt>: Return whether the cache entry for a key has expired.</li>\n<li><tt>delete</tt>: Remove an entry from the cache.</li>\n<li><tt>clean</tt>: Go through the entire cache and remove expired elements.</li>\n<li><tt>exists</tt>: Check if an element is in the cache (possibly expired).</li>\n</ol>\n<p>For more sophisticated caching you can use more mix-ins or override the\ndesired functions. See the docs for the <tt>OxCacheBase</tt> class in the\nsource code or in the following documentation sections.</p>\n<p>Note that if you want to keep things as simple as possible, you don\u2019t\nhave to override <tt>make_value</tt> if using the <tt>TimedExpiryMixin</tt> but\ncan just use the <tt>store</tt> method as shown below:</p>\n<div id=\"keeping-it-simple\">\n<h4>Keeping it Simple</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ox_cache</span> <span class=\"kn\">import</span> <span class=\"n\">OxCacheBase</span><span class=\"p\">,</span> <span class=\"n\">TimedExpiryMixin</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyCache</span><span class=\"p\">(</span><span class=\"n\">TimedExpiryMixin</span><span class=\"p\">,</span> <span class=\"n\">OxCacheBase</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'Cache with timed expiry'</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">MyCache</span><span class=\"p\">()</span>  <span class=\"c1\"># Create an instance</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">expiry_seconds</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># make refresh time very short</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'blah'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"s1\">'blah'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.5</span><span class=\"p\">)</span>       <span class=\"c1\"># sleep so that cache becomes stale</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>                  <span class=\"c1\"># Attempt to get stale item 'foo'</span>\n<span class=\"o\">...</span>     <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># will cause an exception</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span><span class=\"p\">:</span>               <span class=\"c1\"># since make_value not defined</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"unable to get 'foo'\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">get</span> <span class=\"s1\">'foo'</span>\n</pre>\n</div>\n</div>\n<div id=\"memoization\">\n<h3>Memoization</h3>\n<p>To memoize (cache) function calls you can use something like the\n<tt>OxMemoizer</tt> as a function decorator as shown in the example below:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ox_cache</span> <span class=\"kn\">import</span> <span class=\"n\">OxMemoizer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@OxMemoizer</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'Add two inputs'</span>\n<span class=\"o\">...</span>     <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'called my_func(</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">) = </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">z</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># This will actually call the function.</span>\n<span class=\"n\">called</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># This will use a cached value.</span>\n<span class=\"mi\">3</span>\n</pre>\n<p>Since <tt>OxMemoizer</tt> is just a sub-class of <tt>OxCacheBase</tt> you can use\none of the provided mixins to control expiration or just use something\nlike the <tt>LRUReplacementMemoizer</tt>. As shown below, setting the\n<tt>max_size</tt> property of an instance of <tt>LRUReplacementMemoizer</tt> will\nautomatically kick out least recently used cache entries when the cache\ngets too large.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ox_cache</span> <span class=\"kn\">import</span> <span class=\"n\">LRUReplacementMemoizer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@LRUReplacementMemoizer</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'Add two inputs'</span>\n<span class=\"o\">...</span>     <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'called my_func(</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">) = </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">z</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">called</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_func</span><span class=\"o\">.</span><span class=\"n\">max_size</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"n\">called</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">called</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">called</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">),</span> <span class=\"n\">my_func</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># Verify least recent item kicked out</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>If you wanted time based expiration, you could use <tt>TimedMemoizer</tt> or\nsimply subclass <tt>OxMemoizer</tt> and include mixins like\n<tt>LRUReplacementMixin</tt> and/or <tt>TimedExpiryMixin</tt>.</p>\n<p>Note that since our memoizers are sub-classes of <tt>OxCacheBase</tt>, you\ncan use any of the methods from <tt>OxCacheBase</tt> as shown below:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_func</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_func</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_func</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n</div>\n</div>\n<div id=\"discussion\">\n<h2>Discussion</h2>\n<p>The ox_cache package provides tools to build your own simple caching\nsystem. The core class is <tt>OxCacheBase</tt> which everything inherits\nfrom. The only function which you must provide when you sub-class\n<tt>OxCacheBase</tt> is <tt>make_value</tt> which defines how to create a value\nwhich is not in the cache.</p>\n<p>You can further customize how the cache works either by overriding\nappropriate methods or by using one of the many mixins provided. For\nexample, the following illustrates how you can use the\n<tt>TimedExpiryMixin</tt> and the <tt>RefreshDictMixin</tt> to create a\n<tt>BatchCache</tt> which updates the whole cache any time there is a cache\nmiss:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">ox_cache</span> <span class=\"kn\">import</span> <span class=\"n\">OxCacheBase</span><span class=\"p\">,</span> <span class=\"n\">TimedExpiryMixin</span><span class=\"p\">,</span> <span class=\"n\">RefreshDictMixin</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">BatchCache</span><span class=\"p\">(</span><span class=\"n\">TimedExpiryMixin</span><span class=\"p\">,</span> <span class=\"n\">RefreshDictMixin</span><span class=\"p\">,</span> <span class=\"n\">OxCacheBase</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'Simple cache with time-based refresh via a function that gives dict'</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">make_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"Function to make dict to use to refresh cache.\"</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">info</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"p\">([</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))}</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">BatchCache</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"s1\">'5'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># will auto-refresh using make_dict</span>\n<span class=\"s1\">'25'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"s1\">'6'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># cache has not been marked as stale so no refresh</span>\n<span class=\"s1\">'25'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">expiry_seconds</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># make refresh time very short</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.5</span><span class=\"p\">)</span>  <span class=\"c1\"># sleep so that cache becomes stale</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>     <span class=\"c1\"># check cache to see that we auto-refresh</span>\n<span class=\"s1\">'26'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">expiry_seconds</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>  <span class=\"c1\"># slow down auto refresh for other examples</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"s1\">'800'</span><span class=\"p\">,</span> <span class=\"s1\">'a string'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'800'</span><span class=\"p\">)</span>\n<span class=\"s1\">'a string'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"n\">allow_refresh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"additional-information\">\n<h2>Additional Information</h2>\n<p>You can find the project page at <a href=\"https://github.com/emin63/ox_cache\" rel=\"nofollow\">https://github.com/emin63/ox_cache</a></p>\n</div>\n\n          </div>"}, "last_serial": 5200411, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "20ede607f83498a713d4c388fa4e6932", "sha256": "70c2262fd34d40078fba6a2f5d66d216812c82a15834f95035cf4b0996ff3614"}, "downloads": -1, "filename": "ox_cache-1.0.tar.gz", "has_sig": false, "md5_digest": "20ede607f83498a713d4c388fa4e6932", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18692, "upload_time": "2018-12-13T22:27:55", "upload_time_iso_8601": "2018-12-13T22:27:55.796381Z", "url": "https://files.pythonhosted.org/packages/e5/d5/f8a1a9654fe5cc9a9d655c36fbce99abd84329cf1a8825b62a04711ee3a1/ox_cache-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "338852a06d5fc3a180e1901b47710383", "sha256": "7fc9271a4cb9de0d37dfc7b12f6c3e3d8770f61a50ab104eb9a52777a0d11a5b"}, "downloads": -1, "filename": "ox_cache-1.0.1.tar.gz", "has_sig": false, "md5_digest": "338852a06d5fc3a180e1901b47710383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19395, "upload_time": "2018-12-13T22:36:51", "upload_time_iso_8601": "2018-12-13T22:36:51.714608Z", "url": "https://files.pythonhosted.org/packages/5b/88/8a8d53f8a30502b3d433f1de1aa95cdc75bfa7cc95511270b6fdb3ec9931/ox_cache-1.0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "dc285195631f7430385e7f8b3b2102b0", "sha256": "16ff1f8a190f1df91178e9c6fe0013fad25c3d2869407d9f87050a915aa6e22d"}, "downloads": -1, "filename": "ox_cache-1.1.tar.gz", "has_sig": false, "md5_digest": "dc285195631f7430385e7f8b3b2102b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19635, "upload_time": "2018-12-13T23:06:34", "upload_time_iso_8601": "2018-12-13T23:06:34.814228Z", "url": "https://files.pythonhosted.org/packages/56/35/1028f35e752d2715cfe722497810bd86c2154bf33d0d04b67df20db253ea/ox_cache-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "b6d81b65e831339a770b1365d4a56b3c", "sha256": "d5d670eb0e6dcd481d4b3e1eef34328b4897259da3c620b956944204af445109"}, "downloads": -1, "filename": "ox_cache-1.1.1.tar.gz", "has_sig": false, "md5_digest": "b6d81b65e831339a770b1365d4a56b3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19690, "upload_time": "2018-12-13T23:08:31", "upload_time_iso_8601": "2018-12-13T23:08:31.083383Z", "url": "https://files.pythonhosted.org/packages/84/3d/d4be9d429a60b7ca208e59f91af6bcd2f6579937be75f9a78eb8e90c6fcd/ox_cache-1.1.1.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "a9b404a6a33426156937074b02e63092", "sha256": "35b3583b1681d5aa2e46dae1f87bbb241208adabfce5c610f84a1981012fd017"}, "downloads": -1, "filename": "ox_cache-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a9b404a6a33426156937074b02e63092", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20195, "upload_time": "2018-12-14T17:49:48", "upload_time_iso_8601": "2018-12-14T17:49:48.260340Z", "url": "https://files.pythonhosted.org/packages/b9/c2/cb862b3a4bf261c789563308db5870b28af6aba0f0373a54e188e409d375/ox_cache-1.2.1.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "d57a7da65ad5ab066193c0d6a47affbe", "sha256": "df6587316d3fbe4a033c8e231c4e75b71119e9694e443524ec5e8d4a5cd87f8f"}, "downloads": -1, "filename": "ox_cache-1.3.1.tar.gz", "has_sig": false, "md5_digest": "d57a7da65ad5ab066193c0d6a47affbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20564, "upload_time": "2018-12-17T18:57:12", "upload_time_iso_8601": "2018-12-17T18:57:12.734818Z", "url": "https://files.pythonhosted.org/packages/4c/88/bd3df19d9297793a738165d0a8276bb7ecd088402e11602aa4e64e8ee21d/ox_cache-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "0212da4b72c166be98cb6be558635238", "sha256": "474e4ce378adaf165b867181ea0f26b57dc9080d7c1baa498938cb864155d1af"}, "downloads": -1, "filename": "ox_cache-1.3.2.tar.gz", "has_sig": false, "md5_digest": "0212da4b72c166be98cb6be558635238", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21593, "upload_time": "2019-04-28T19:01:35", "upload_time_iso_8601": "2019-04-28T19:01:35.599363Z", "url": "https://files.pythonhosted.org/packages/2f/19/a24d1aed98e7c814e6242c8d1e9ca0aa5cdda7530658b7a0cdc391d23713/ox_cache-1.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0212da4b72c166be98cb6be558635238", "sha256": "474e4ce378adaf165b867181ea0f26b57dc9080d7c1baa498938cb864155d1af"}, "downloads": -1, "filename": "ox_cache-1.3.2.tar.gz", "has_sig": false, "md5_digest": "0212da4b72c166be98cb6be558635238", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21593, "upload_time": "2019-04-28T19:01:35", "upload_time_iso_8601": "2019-04-28T19:01:35.599363Z", "url": "https://files.pythonhosted.org/packages/2f/19/a24d1aed98e7c814e6242c8d1e9ca0aa5cdda7530658b7a0cdc391d23713/ox_cache-1.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:28 2020"}