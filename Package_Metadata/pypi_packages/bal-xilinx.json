{"info": {"author": "Red Balloon Security", "author_email": "quack-tech@redballoonsecurity.com", "bugtrack_url": null, "classifiers": [], "description": "# BAL Xilinx Overview\n\nThe BAL Xilinx package is an implementation of the \n[Binary Abstraction Layer (BAL)](https://github.com/ballon-rouge/bal) framework for Xilinx FPGA.\nIt supports packing/unpacking of most of the bitstream, target device/encryption detection and \npin modification (force the pin high/low).\nIt is supposed to be a dependency of a project, not a boilerplate project to be customized.\nIt was first introduced at Black Hat 2019 ([presentation](https://redballoonsecurity.com/files/CycIhULVL5FS6VNM/100_seconds_of_solitude.pdf), [research paper](https://www.usenix.org/conference/woot19/presentation/kataria)).\n\nThe full api documentation is available [here](https://RedBalloonShenanigans.github.io/bal-xilinx/).\n\n## Contributors:\n\n\n - Jatin Kataria (Researcher)\n - Rick Housley (Researcher)\n - Alex Massonneau (Developer)\n - Andrew O'Brien (Developer)\n\n## Installation\n\nThe BAL Xilinx package can be installed from PyPi with the following command:\n```\npip install bal-xilinx\n```\n\nThe BAL Xilinx package can also be installed from the repository. It requires the BAL package. See the [installation instructions](https://github.com/ballon-rouge/bal).\n\nTo install the BAL Xilinx package from source, run:\n\n```\ngit clone https://github.com/RedBalloonShenanigans/bal-xilinx.git\ncd bal-xilinx\npip install .\n```\n\nTo generate the documentation, run:\n```\npip install .[docs]\nmake html-docs\n```\n\n## Tools\n\nWhile this module is meant to be used as a dependency for another project, it currently offers a \nsingle tool called `pin`. It turns on/off a given pin for an existing Xilinx FPGA bitstream. It is\naccessible by running:\n\n```python\npython -m bal_xilinx.tools.pin \n``` \n\nThe documentation for the pin tool can be accessed by running it with the `-h` flag.\n\n## Methodology\n\nThe Xilinx converters rely heavily on format definitions contained in [bal_xilinx/configs](bal_xilinx/configs). The methodology used to create these JSON files will be published shortly.\n\n## Guide\n\nThis guide assumes familiarity with the [BAL framework](https://github.com/ballon-rouge/bal).\nAs the name of the project implies, this is an implementation of it for Xilinx FPGA bitstreams.\nComplete examples are available under [./example](./example).\n\n### Analyzers\n\nThere are 3 analyzers available:\n\n - `bal_xilinx.analyzers.device_analyzer.XilinxDeviceAnalyzer` Determines the type of device \n targeted by the bitstream.\n - `bal_xilinx.analyzers.encryption_analyzer.XilinxEncryptionAnalyzer` Determines if the FDRI \n packets are encrypted.\n - `bal_xilinx.analyzers.visualizer_analyzer.XilinxVisualizerAnalyzer` Generate the configuration\n  data for the [BAL visualizer](https://github.com/ballon-rouge/bal-visualizer/).\n\n### Modifiers\n\nThere is currently a single analyzer:\n\n- `bal_xilinx.modifiers.pin_modifier.XilinxPinModifer` Force a pin to be low/high regardless of \nthe logic executed by the FPGA.\n\n### Examples\n\nHere is an example that puts together all the analyzers and modifiers available.\n\n```python\n# Configure the default converters\nxilinx_context_factory = default_xilinx_context(XilinxContextFactory(\n    # Register the formats for the LX9 and LX45T\n    default_xilinx_formats(XilinxFormatBuilder()).build()\n))\n\nlx9_bin = wget.download('https://redballoonsecurity.com/files/JwfEU4veQSNFao8h/lx9.bin')\nwith open(lx9_bin, \"rb\") as f:\n    data = f.read()\n\nbitstream_context = xilinx_context_factory.create(data)\n\n# Get the device type targeted by the bitstream\ndevice_type = bitstream_context.create_analyzer(XilinxDeviceAnalyzer)\\\n    .analyze()\nprint(\"Device info: {}\".format(device_type))\n\n# Determine if the FDRI packets are encrypted.\nis_encrypted = bitstream_context.create_analyzer(XilinxEncryptionAnalyzer)\\\n    .analyze()\nprint(\"Is encrypted: {}\".format(is_encrypted))\n\n# Unpack the entire bitstream to make sure the visualization includes everything\nbitstream_context.get_data().unpack_all()\n\nprint(\"Writing the visualizer config to {}\".format(os.path.abspath(\"data.json\")))\nwith open(\"data.json\", \"w\") as f:\n    # Generate the visualization config file\n    visualizer_config = bitstream_context.create_analyzer(VisualizerAnalyzer) \\\n        .analyze()\n    json.dump(visualizer_config,  f)\n\nprint(\"Pulling the pins low\")\npin_modifier = bitstream_context.create_modifier(XilinxPinModifer)\nfor pin in [\"P134\", \"P133\", \"P132\", \"P131\", \"P127\", \"P126\", \"P124\", \"P123\"]:\n    pin_modifier.modify(pin, False)\n\n\nprint(\"Analysis and modifications done!\")\n\n```\n\nThat is it for the guide. Have fun!\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bal-xilinx", "package_url": "https://pypi.org/project/bal-xilinx/", "platform": "", "project_url": "https://pypi.org/project/bal-xilinx/", "project_urls": null, "release_url": "https://pypi.org/project/bal-xilinx/0.1/", "requires_dist": ["bal", "six", "typing ; python_version < \"3.5\""], "requires_python": "", "summary": "An implementation of the BAL framework for Xilinx FPGAs", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BAL Xilinx Overview</h1>\n<p>The BAL Xilinx package is an implementation of the\n<a href=\"https://github.com/ballon-rouge/bal\" rel=\"nofollow\">Binary Abstraction Layer (BAL)</a> framework for Xilinx FPGA.\nIt supports packing/unpacking of most of the bitstream, target device/encryption detection and\npin modification (force the pin high/low).\nIt is supposed to be a dependency of a project, not a boilerplate project to be customized.\nIt was first introduced at Black Hat 2019 (<a href=\"https://redballoonsecurity.com/files/CycIhULVL5FS6VNM/100_seconds_of_solitude.pdf\" rel=\"nofollow\">presentation</a>, <a href=\"https://www.usenix.org/conference/woot19/presentation/kataria\" rel=\"nofollow\">research paper</a>).</p>\n<p>The full api documentation is available <a href=\"https://RedBalloonShenanigans.github.io/bal-xilinx/\" rel=\"nofollow\">here</a>.</p>\n<h2>Contributors:</h2>\n<ul>\n<li>Jatin Kataria (Researcher)</li>\n<li>Rick Housley (Researcher)</li>\n<li>Alex Massonneau (Developer)</li>\n<li>Andrew O'Brien (Developer)</li>\n</ul>\n<h2>Installation</h2>\n<p>The BAL Xilinx package can be installed from PyPi with the following command:</p>\n<pre><code>pip install bal-xilinx\n</code></pre>\n<p>The BAL Xilinx package can also be installed from the repository. It requires the BAL package. See the <a href=\"https://github.com/ballon-rouge/bal\" rel=\"nofollow\">installation instructions</a>.</p>\n<p>To install the BAL Xilinx package from source, run:</p>\n<pre><code>git clone https://github.com/RedBalloonShenanigans/bal-xilinx.git\ncd bal-xilinx\npip install .\n</code></pre>\n<p>To generate the documentation, run:</p>\n<pre><code>pip install .[docs]\nmake html-docs\n</code></pre>\n<h2>Tools</h2>\n<p>While this module is meant to be used as a dependency for another project, it currently offers a\nsingle tool called <code>pin</code>. It turns on/off a given pin for an existing Xilinx FPGA bitstream. It is\naccessible by running:</p>\n<pre><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">bal_xilinx</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">pin</span> \n</pre>\n<p>The documentation for the pin tool can be accessed by running it with the <code>-h</code> flag.</p>\n<h2>Methodology</h2>\n<p>The Xilinx converters rely heavily on format definitions contained in <a href=\"bal_xilinx/configs\" rel=\"nofollow\">bal_xilinx/configs</a>. The methodology used to create these JSON files will be published shortly.</p>\n<h2>Guide</h2>\n<p>This guide assumes familiarity with the <a href=\"https://github.com/ballon-rouge/bal\" rel=\"nofollow\">BAL framework</a>.\nAs the name of the project implies, this is an implementation of it for Xilinx FPGA bitstreams.\nComplete examples are available under <a href=\"./example\" rel=\"nofollow\">./example</a>.</p>\n<h3>Analyzers</h3>\n<p>There are 3 analyzers available:</p>\n<ul>\n<li><code>bal_xilinx.analyzers.device_analyzer.XilinxDeviceAnalyzer</code> Determines the type of device\ntargeted by the bitstream.</li>\n<li><code>bal_xilinx.analyzers.encryption_analyzer.XilinxEncryptionAnalyzer</code> Determines if the FDRI\npackets are encrypted.</li>\n<li><code>bal_xilinx.analyzers.visualizer_analyzer.XilinxVisualizerAnalyzer</code> Generate the configuration\ndata for the <a href=\"https://github.com/ballon-rouge/bal-visualizer/\" rel=\"nofollow\">BAL visualizer</a>.</li>\n</ul>\n<h3>Modifiers</h3>\n<p>There is currently a single analyzer:</p>\n<ul>\n<li><code>bal_xilinx.modifiers.pin_modifier.XilinxPinModifer</code> Force a pin to be low/high regardless of\nthe logic executed by the FPGA.</li>\n</ul>\n<h3>Examples</h3>\n<p>Here is an example that puts together all the analyzers and modifiers available.</p>\n<pre><span class=\"c1\"># Configure the default converters</span>\n<span class=\"n\">xilinx_context_factory</span> <span class=\"o\">=</span> <span class=\"n\">default_xilinx_context</span><span class=\"p\">(</span><span class=\"n\">XilinxContextFactory</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Register the formats for the LX9 and LX45T</span>\n    <span class=\"n\">default_xilinx_formats</span><span class=\"p\">(</span><span class=\"n\">XilinxFormatBuilder</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"p\">))</span>\n\n<span class=\"n\">lx9_bin</span> <span class=\"o\">=</span> <span class=\"n\">wget</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"s1\">'https://redballoonsecurity.com/files/JwfEU4veQSNFao8h/lx9.bin'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">lx9_bin</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">bitstream_context</span> <span class=\"o\">=</span> <span class=\"n\">xilinx_context_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the device type targeted by the bitstream</span>\n<span class=\"n\">device_type</span> <span class=\"o\">=</span> <span class=\"n\">bitstream_context</span><span class=\"o\">.</span><span class=\"n\">create_analyzer</span><span class=\"p\">(</span><span class=\"n\">XilinxDeviceAnalyzer</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Device info: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">device_type</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Determine if the FDRI packets are encrypted.</span>\n<span class=\"n\">is_encrypted</span> <span class=\"o\">=</span> <span class=\"n\">bitstream_context</span><span class=\"o\">.</span><span class=\"n\">create_analyzer</span><span class=\"p\">(</span><span class=\"n\">XilinxEncryptionAnalyzer</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Is encrypted: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">is_encrypted</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Unpack the entire bitstream to make sure the visualization includes everything</span>\n<span class=\"n\">bitstream_context</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unpack_all</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Writing the visualizer config to </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"s2\">\"data.json\"</span><span class=\"p\">)))</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"data.json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Generate the visualization config file</span>\n    <span class=\"n\">visualizer_config</span> <span class=\"o\">=</span> <span class=\"n\">bitstream_context</span><span class=\"o\">.</span><span class=\"n\">create_analyzer</span><span class=\"p\">(</span><span class=\"n\">VisualizerAnalyzer</span><span class=\"p\">)</span> \\\n        <span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">()</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">visualizer_config</span><span class=\"p\">,</span>  <span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Pulling the pins low\"</span><span class=\"p\">)</span>\n<span class=\"n\">pin_modifier</span> <span class=\"o\">=</span> <span class=\"n\">bitstream_context</span><span class=\"o\">.</span><span class=\"n\">create_modifier</span><span class=\"p\">(</span><span class=\"n\">XilinxPinModifer</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">pin</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">\"P134\"</span><span class=\"p\">,</span> <span class=\"s2\">\"P133\"</span><span class=\"p\">,</span> <span class=\"s2\">\"P132\"</span><span class=\"p\">,</span> <span class=\"s2\">\"P131\"</span><span class=\"p\">,</span> <span class=\"s2\">\"P127\"</span><span class=\"p\">,</span> <span class=\"s2\">\"P126\"</span><span class=\"p\">,</span> <span class=\"s2\">\"P124\"</span><span class=\"p\">,</span> <span class=\"s2\">\"P123\"</span><span class=\"p\">]:</span>\n    <span class=\"n\">pin_modifier</span><span class=\"o\">.</span><span class=\"n\">modify</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Analysis and modifications done!\"</span><span class=\"p\">)</span>\n</pre>\n<p>That is it for the guide. Have fun!</p>\n\n          </div>"}, "last_serial": 5652909, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "aa7aae5a4d729d64cc320dbe9fbd2467", "sha256": "7542ebb1e4d83ef58cf83f7037914588f52f718c88ad996172dd207470ac8902"}, "downloads": -1, "filename": "bal_xilinx-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aa7aae5a4d729d64cc320dbe9fbd2467", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30459, "upload_time": "2019-08-09T01:06:20", "upload_time_iso_8601": "2019-08-09T01:06:20.338504Z", "url": "https://files.pythonhosted.org/packages/f9/2c/ce258d81ec8c6adf1954b64eab2d4a23cf23710a540360d9dfbb67abb87b/bal_xilinx-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4598cbcd3222a056848bf63040d459e", "sha256": "584155a6f5dce218c0b16107e24c48b01b5ac4f1d2e9d9fe341f8a3d7d2880b5"}, "downloads": -1, "filename": "bal-xilinx-0.1.tar.gz", "has_sig": false, "md5_digest": "f4598cbcd3222a056848bf63040d459e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24686, "upload_time": "2019-08-09T01:06:22", "upload_time_iso_8601": "2019-08-09T01:06:22.495012Z", "url": "https://files.pythonhosted.org/packages/ac/00/e19da93991e98ffba086bec02a8df7c959bbee50932d0ab4320736174a5e/bal-xilinx-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa7aae5a4d729d64cc320dbe9fbd2467", "sha256": "7542ebb1e4d83ef58cf83f7037914588f52f718c88ad996172dd207470ac8902"}, "downloads": -1, "filename": "bal_xilinx-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aa7aae5a4d729d64cc320dbe9fbd2467", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30459, "upload_time": "2019-08-09T01:06:20", "upload_time_iso_8601": "2019-08-09T01:06:20.338504Z", "url": "https://files.pythonhosted.org/packages/f9/2c/ce258d81ec8c6adf1954b64eab2d4a23cf23710a540360d9dfbb67abb87b/bal_xilinx-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4598cbcd3222a056848bf63040d459e", "sha256": "584155a6f5dce218c0b16107e24c48b01b5ac4f1d2e9d9fe341f8a3d7d2880b5"}, "downloads": -1, "filename": "bal-xilinx-0.1.tar.gz", "has_sig": false, "md5_digest": "f4598cbcd3222a056848bf63040d459e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24686, "upload_time": "2019-08-09T01:06:22", "upload_time_iso_8601": "2019-08-09T01:06:22.495012Z", "url": "https://files.pythonhosted.org/packages/ac/00/e19da93991e98ffba086bec02a8df7c959bbee50932d0ab4320736174a5e/bal-xilinx-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:59 2020"}