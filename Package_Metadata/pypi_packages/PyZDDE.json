{"info": {"author": "Indranil Sinharoy", "author_email": "indranil_leo@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Win32 (MS Windows)", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: Microsoft :: Windows :: Windows 7", "Operating System :: Microsoft :: Windows :: Windows XP", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering"], "description": "..  image:: https://raw.githubusercontent.com/indranilsinharoy/PyZDDE/master/Doc/Images/logo_text_small.png\n\n\nPython Zemax Dynamic Data Exchange\n-----------------------------------\n\n|DOI|\n\nCurrent revision\n'''''''''''''''''\n\n2.0.3 (Last significant update on 10/02/2016)\n\n\n\nChange log\n~~~~~~~~~~\nBrief change-log is available in the `News and\nUpdates <https://github.com/indranilsinharoy/PyZDDE/wiki/08.-News-and-updates>`__\npage.\n\n\nExamples\n''''''''\n\nExamples included with PyZDDE are in the folder \"Examples\". Please move the examples to your desired location after extracting the PyZDDE package. \n\n\nHello world\n~~~~~~~~~~~\n\nHere is a simple but complete \"Hello world\" code which prints the version of Zemax. (If you are using Python 2.x, don't forget to add\n``from __future__ import print_function`` before these lines.)\n\n.. code:: python\n\n    import pyzdde.zdde as pyz\n    ln = pyz.createLink() # DDE link object\n    print(\"Hello Zemax version: \", ln.zGetVersion())\n    ln.close()\n\nMore examples (view online)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA gallery of notebooks demonstrating the use of PyZDDE within Jupyter (previously IPython) notebooks \nare `here <https://github.com/indranilsinharoy/PyZDDE/wiki/03.-Using-PyZDDE-in-Jupyter:-A-Gallery-of-notebooks>`__.\n\nExamples of using Zemax interactively from a Python shell is `here <https://github.com/indranilsinharoy/PyZDDE/wiki/02.-Using-PyZDDE-interactively-in-a-Python-shell>`_.\n\nExample Python scripts are\n`here <https://github.com/indranilsinharoy/PyZDDE/tree/master/Examples/Scripts/>`__.\n\nExamples specific to array ray tracing are catalogued\n`here <https://github.com/indranilsinharoy/PyZDDE/wiki/05.-Examples-of-array-ray-tracing>`__.\n\nIn addition, the repository\n`Intro2LensDesignByGeary <https://github.com/indranilsinharoy/Intro2LensDesignByGeary>`__\ncontains notes from few chapters of the book \"Introduction to Lens\nDesign,\" by Joseph M. Geary, in the form of IPython notebooks.\n\n\nInstall PyZDDE from PyPI\n''''''''''''''''''''''''\n\nYou can either use `pip <https://pip.pypa.io/en/stable/>`__ or the ``setup.py`` script \nfrom the extracted folder.\n\nUse the following command from the command line to install PyZDDE from PyPI:\n\n.. code:: python\n\n  pip install pyzdde\n\n\nNote 1. By default only the latest stable version is installed by default, using\nthe above command. To install pre-release versions add the \n`--pre <https://pip.pypa.io/en/latest/reference/pip_install.html#pre-release-versions>`__\nflag:\n\n.. code:: python\n  \n  pip install pyzdde --pre  \n\n\nNote 2. When you install PyZDDE using pip (the above method), the \"Examples\" folder \nwill not be downloaded. However, pip is the most convenient way to install Python packages.\nAlso, ensure that you have the `pip` package in your environment. \n\nIf you would like to download the \"Examples\" folder too, please download and extract PyZDDE \npackage from the `Python Package Index <https://pypi.python.org/pypi/PyZDDE>`__. Then,  \n``cd`` into the extracted folder where the ``setup.py`` script is visible and execute \nthe following in a command prompt:\n\n.. code:: python\n\n  python setup.py install\n\nIf you would like to see what files were added and where you may use:\n\n.. code:: python\n\n  python setup.py install --record files.txt\n\nA list of all files that were added and their locations will be available in the \nfile \"files.txt\" in the same directory.  \n\nNote 3. To uninstall pyzdde using pip use\n\n.. code:: python\n\n  pip uninstall pyzdde\n\n\nGet the latest code\n'''''''''''''''''''\n\nTo get the latest PyZDDE code please download / fork / clone from \n`GitHub repository <https://github.com/indranilsinharoy/PyZDDE>`__.\n\n\nDocumentation\n'''''''''''''\n\nThe PyZDDE documentation is currently hosted in the `GitHub Wiki <https://github.com/indranilsinharoy/PyZDDE/wiki>`__.\n\n\nInitial setup\n'''''''''''''\n\n1. **PUSH LENS PERMISSION:** All operations through the DDE affect the lens in the DDE server (except for array ray tracing). In order to copy the lens from the DDE server to the Zemax application /LDE, you need to \"push\" the lens from the server to the LDE. To do so, please enable the option \"Allow Extensions to Push Lenses\", under File->Preferences->Editors tab.\n2. **ANSI/UNICODE TEXT ENCODING:** PyZDDE supports both ANSI and UNICODE text from Zemax. Please set the appropriate text encoding in PyZDDE by calling module function `pyz.setTextEncoding(text_encoding)` (assuming that PyZDDE was imported as `import pyzdde.zdde as pyz`). By default, UNICODE text encoding is set in PyZDDE. You can check the current text encoding by calling `pyz.getTextEncoding()` function. Please note that you need to do this only when you change the text setting in Zemax and not for every session.\n3. **PURE NSC MODE:** (This is more of a note) If want to work on an optical design in pure NSC mode, please start ZEMAX in pure NSC mode before initiating the communication with PyZDDE. There is no way to switch the ZEMAX mode using external interfaces.\n\n\n**ZPL macros files supplied with PyZDDE**\n\nPyZDDE comes with few ZPL macro files that are present in the directory \"ZPLMacros\". They are occasionally used by PyZDDE (for example in the function ``ipzCaptureWindowLQ()``). Please copy/move the files from the folder \"ZPLMacros\" to the folder where Zemax/ Optic studio expects to find ZPL macros (By default, this folder is ``C:\\<username>\\Documents\\ZEMAX\\Macros``). A copy of the \"ZPLMacros\" folder is always available in (installed with) the PyZDDE package.\n\n\nModules in PyZDDE\n'''''''''''''''''\n\n-  **zdde** (``import pyzdde.zdde as pyz``): The main module in PyZDDE that provides all dataitems related functions for interacting with Zemax/OpticStudio using the DDE interface.\n-  **arraytrace** (``import pyzdde.arraytrace as at``): provides functions for tracing large number of rays\n-  **zfileutils** (``import pyzdde.zfileutils as zfu``): provides helper functions for various Zemax file handling operations such as reading and writing beam files, .ZRD files, creating .DAT and .GRD files for grid phase /grid sag surfaces, etc.\n-  **systems** (``import pyzdde.systems as osys``): provides helper functions for quickly creating basic optical systems.\n-  **misc** (``import pyzdde.misc as mys``): contains miscellaneous collection of utility functions that may be used with PyZDDE.\n\nFeatures\n~~~~~~~~\n\n-  Functions for using all \"data items\" defined in Zemax manual\n-  Supports both Python 2.7 and Python 3.3/3.4\n-  Supports both Unicode and extended ascii text\n-  Over 80 additional functions for more efficient use (more will be added in future). Examples include ``zSetTimeout()``,\n   ``zExecuteZPLMacro()``, ``zGetSeidelAberration()``, ``zSetFieldTuple()``,\n   ``zGetFieldTuple()``, ``zSetWaveTuple()``, ``zGetWaveTuple()``, ``zCalculateHiatus()``, ``zGetPupilMagnification()``, ``zGetPOP()``,\n   ``zSetPOPSettings()``, ``zModifyPOPSettings()``, ``zGetPSF()``, ``zGetPSFCrossSec()``, ``zGetMTF()``, ``zGetImageSimulation()``.\n   A list of the additional functions are available `here <https://github.com/indranilsinharoy/PyZDDE/wiki/07.-List-of-helper-functions-in-PyZDDE>`__.\n-  Special functions for better interactive use with IPython notebooks.\n   Examples include ``ipzCaptureWindow()``, ``ipzGetFirst()``, ``ipzGetPupil()``, ``ipzGetSystemAper()``, ``ipzGetTextWindow()``\n-  Quick generation of few simple optical systems (see ``pyzdde.systems`` module)\n-  Array ray tracing using a separate and standalone module ``arraytrace`` along with helper functions for performing array ray tracing.\n\nOverview\n~~~~~~~~\n\nPyZDDE is a Python-based extension for communicating with `ZEMAX/OpticStudio <http://www.zemax.com/>`__ using the DDE\nprotocol. It is similar to---and very much inspired by---the Matlab-based `MZDDE toolbox <http://www.zemax.com/support/resource-center/knowledgebase/how-to-talk-to-zemax-from-matlab>`__ developed by Derek Griffith at CSIR.\n\nPyZDDE can be used with regular Python scripts as well as in an interactive environment such as an IPython shell, \n`QtConsole <http://ipython.readthedocs.org/en/stable/interactive/qtconsole.html>`__ or `IPython Notebook <http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html>`__.\n\nThere are 4 types of functions, and a separate module for array ray tracing in the toolbox:\n\n1. Functions for accessing ZEMAX using the data items defined in the \"ZEMAX EXTENSIONS\" chapter of the ZEMAX manual. These functions'\n   names start with \"z\" and the rest of the function names matches the data item defined by Zemax. For example ``zGetSolve()`` for the data\n   item \"GetSolve\", ``zSetSolve()`` for the data item \"SetSolve\", etc.\n2. Helper functions to enhance the toolbox functionality beyond just the data items, such as ``zCalculateHiatus``, ``zSpiralSpot``. Also,\n   there are other utilities which increase the capability of the toolbox such as ``zOptimize2()``, ``zSetWaveTuple()``,\n   ``zExecuteZPLMacro()``, etc.\n3. Few functions such as ``ipzCaptureWindow()``, ``ipzGetTextWindow()`` can be used to embed analysis/graphic windows and text files from\n   Zemax into an IPython Notebook or IPython QtConsole.\n4. There are several other functions which can be used independent of a running Zemax session. Examples include ``showZOperandList()``,\n   ``findZOperand()``, ``findZButtonCode()``, etc.\n5. A separate and standalone module ``arraytrace`` for performing array ray tracing.\n\nAll the functions prefixed with \"z\" or \"ipz\" (types 1, 2 and 3) interact with Zemax directly and hence require a Zemax session to be running\nsimultaneously. As they are instance methods of a pyzdde channel object, a pyzdde object needs to be created.\n\nFor example:\n\n.. code:: python\n\n    import pyzdde.zdde as pyz    # import pyzdde module\n    ln = pyz.createLink()        # create DDE link object\n    ln.zPushLens(1)              # method of type 1\n    ln.zExecuteZPLMacro('CEN')   # method of type 2\n    ln.ipzCaptureWindow2('Lay')  # method of type 3\n\nHelper functions of type 4 can be accessed from the ``zdde`` module directly.\n\nFor example\n\n.. code:: python\n\n    pyz.zo.findZOperand(\"decenter\")  # method of type 4 (same as pyz.findZOperand)\n    pyz.numAper(0.25)                # method of type 4\n\nA complete list of helper functions is available\n`here <https://github.com/indranilsinharoy/PyZDDE/wiki/List-of-helper-functions-in-PyZDDE>`__.\n(Please be mindful that the currently this page is not updated at the same rate at which functions are getting added)\n\n\nGetting started, usage, and other documentation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGetting started with PyZDDE is really very simple as shown in the \"Hello world\" program above. Please refer to the `Wiki page <https://github.com/indranilsinharoy/PyZDDE/wiki>`__. It has detailed guide on how to start using PyZDDE.\n\nDependencies\n''''''''''''\n\nThe core PyZDDE library only depends on the standard Python Library. \n\n1. Python 2.7 / Python 3.3 and above; 32/64 bit version\n2. Matplotlib (optional, used in some of the example programs)\n\nLicense\n'''''''\n\nThe code is under the `MIT License <http://opensource.org/licenses/MIT>`__.\n\n\nContributions and credits\n'''''''''''''''''''''''''\n\nYou are encouraged to use, provide feedbacks and contribute to the PyZDDE project. The generous people who have contributed to PyZDDE are\nin `Contributors <https://github.com/indranilsinharoy/PyZDDE/wiki/09.-Contributors>`__. Thanks a lot to all of you.\n\nOther projects that are using PyZDDE are listed `here <https://github.com/indranilsinharoy/PyZDDE/wiki/10.-Projects-using-PyZDDE>`__.\n\n\nCiting\n''''''\n\nIf you use PyZDDE for research work, please consider citing it. Various\ncitation styles for PyZDDE are available from\n`zenodo <https://zenodo.org/record/15763?ln=en>`__.\n\nChat room\n''''''''''\n\n|Gitter chat|\n\n.. |DOI| image:: https://zenodo.org/badge/doi/10.5281/zenodo.44295.svg\n   :target: http://dx.doi.org/10.5281/zenodo.44295\n.. |Gitter chat| image:: https://badges.gitter.im/indranilsinharoy/PyZDDE.png\n   :target: https://gitter.im/indranilsinharoy/PyZDDE", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/indranilsinharoy/PyZDDE", "keywords": "zemax opticstudio extensions dde optics", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "PyZDDE", "package_url": "https://pypi.org/project/PyZDDE/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PyZDDE/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/indranilsinharoy/PyZDDE"}, "release_url": "https://pypi.org/project/PyZDDE/2.0.3/", "requires_dist": null, "requires_python": null, "summary": "Zemax / OpticStudio standalone extension using Python", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://raw.githubusercontent.com/indranilsinharoy/PyZDDE/master/Doc/Images/logo_text_small.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbaf44ed5dd1b2f6336eaca3ea9efb36b8d38c53/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f696e6472616e696c73696e6861726f792f50795a4444452f6d61737465722f446f632f496d616765732f6c6f676f5f746578745f736d616c6c2e706e67\">\n<div id=\"python-zemax-dynamic-data-exchange\">\n<h2>Python Zemax Dynamic Data Exchange</h2>\n<p><a href=\"http://dx.doi.org/10.5281/zenodo.44295\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91db413e8d7b8c3d52f97831058b1615cbb8c849/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f646f692f31302e353238312f7a656e6f646f2e34343239352e737667\"></a></p>\n<div id=\"current-revision\">\n<h3>Current revision</h3>\n<p>2.0.3 (Last significant update on 10/02/2016)</p>\n<div id=\"change-log\">\n<h4>Change log</h4>\n<p>Brief change-log is available in the <a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki/08.-News-and-updates\" rel=\"nofollow\">News and\nUpdates</a>\npage.</p>\n</div>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Examples included with PyZDDE are in the folder \u201cExamples\u201d. Please move the examples to your desired location after extracting the PyZDDE package.</p>\n<div id=\"hello-world\">\n<h4>Hello world</h4>\n<p>Here is a simple but complete \u201cHello world\u201d code which prints the version of Zemax. (If you are using Python 2.x, don\u2019t forget to add\n<tt>from __future__ import print_function</tt> before these lines.)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyzdde.zdde</span> <span class=\"k\">as</span> <span class=\"nn\">pyz</span>\n<span class=\"n\">ln</span> <span class=\"o\">=</span> <span class=\"n\">pyz</span><span class=\"o\">.</span><span class=\"n\">createLink</span><span class=\"p\">()</span> <span class=\"c1\"># DDE link object</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello Zemax version: \"</span><span class=\"p\">,</span> <span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">zGetVersion</span><span class=\"p\">())</span>\n<span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<div id=\"more-examples-view-online\">\n<h5>More examples (view online)</h5>\n<p>A gallery of notebooks demonstrating the use of PyZDDE within Jupyter (previously IPython) notebooks\nare <a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki/03.-Using-PyZDDE-in-Jupyter:-A-Gallery-of-notebooks\" rel=\"nofollow\">here</a>.</p>\n<p>Examples of using Zemax interactively from a Python shell is <a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki/02.-Using-PyZDDE-interactively-in-a-Python-shell\" rel=\"nofollow\">here</a>.</p>\n<p>Example Python scripts are\n<a href=\"https://github.com/indranilsinharoy/PyZDDE/tree/master/Examples/Scripts/\" rel=\"nofollow\">here</a>.</p>\n<p>Examples specific to array ray tracing are catalogued\n<a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki/05.-Examples-of-array-ray-tracing\" rel=\"nofollow\">here</a>.</p>\n<p>In addition, the repository\n<a href=\"https://github.com/indranilsinharoy/Intro2LensDesignByGeary\" rel=\"nofollow\">Intro2LensDesignByGeary</a>\ncontains notes from few chapters of the book \u201cIntroduction to Lens\nDesign,\u201d by Joseph M. Geary, in the form of IPython notebooks.</p>\n</div>\n</div>\n</div>\n<div id=\"install-pyzdde-from-pypi\">\n<h3>Install PyZDDE from PyPI</h3>\n<p>You can either use <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> or the <tt>setup.py</tt> script\nfrom the extracted folder.</p>\n<p>Use the following command from the command line to install PyZDDE from PyPI:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pyzdde</span>\n</pre>\n<p>Note 1. By default only the latest stable version is installed by default, using\nthe above command. To install pre-release versions add the\n<a href=\"https://pip.pypa.io/en/latest/reference/pip_install.html#pre-release-versions\" rel=\"nofollow\">\u2013pre</a>\nflag:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pyzdde</span> <span class=\"o\">--</span><span class=\"n\">pre</span>\n</pre>\n<p>Note 2. When you install PyZDDE using pip (the above method), the \u201cExamples\u201d folder\nwill not be downloaded. However, pip is the most convenient way to install Python packages.\nAlso, ensure that you have the <cite>pip</cite> package in your environment.</p>\n<p>If you would like to download the \u201cExamples\u201d folder too, please download and extract PyZDDE\npackage from the <a href=\"https://pypi.python.org/pypi/PyZDDE\" rel=\"nofollow\">Python Package Index</a>. Then,\n<tt>cd</tt> into the extracted folder where the <tt>setup.py</tt> script is visible and execute\nthe following in a command prompt:</p>\n<pre><span class=\"n\">python</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">install</span>\n</pre>\n<p>If you would like to see what files were added and where you may use:</p>\n<pre><span class=\"n\">python</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">install</span> <span class=\"o\">--</span><span class=\"n\">record</span> <span class=\"n\">files</span><span class=\"o\">.</span><span class=\"n\">txt</span>\n</pre>\n<p>A list of all files that were added and their locations will be available in the\nfile \u201cfiles.txt\u201d in the same directory.</p>\n<p>Note 3. To uninstall pyzdde using pip use</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">uninstall</span> <span class=\"n\">pyzdde</span>\n</pre>\n</div>\n<div id=\"get-the-latest-code\">\n<h3>Get the latest code</h3>\n<p>To get the latest PyZDDE code please download / fork / clone from\n<a href=\"https://github.com/indranilsinharoy/PyZDDE\" rel=\"nofollow\">GitHub repository</a>.</p>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>The PyZDDE documentation is currently hosted in the <a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki\" rel=\"nofollow\">GitHub Wiki</a>.</p>\n</div>\n<div id=\"initial-setup\">\n<h3>Initial setup</h3>\n<ol>\n<li><strong>PUSH LENS PERMISSION:</strong> All operations through the DDE affect the lens in the DDE server (except for array ray tracing). In order to copy the lens from the DDE server to the Zemax application /LDE, you need to \u201cpush\u201d the lens from the server to the LDE. To do so, please enable the option \u201cAllow Extensions to Push Lenses\u201d, under File-&gt;Preferences-&gt;Editors tab.</li>\n<li><strong>ANSI/UNICODE TEXT ENCODING:</strong> PyZDDE supports both ANSI and UNICODE text from Zemax. Please set the appropriate text encoding in PyZDDE by calling module function <cite>pyz.setTextEncoding(text_encoding)</cite> (assuming that PyZDDE was imported as <cite>import pyzdde.zdde as pyz</cite>). By default, UNICODE text encoding is set in PyZDDE. You can check the current text encoding by calling <cite>pyz.getTextEncoding()</cite> function. Please note that you need to do this only when you change the text setting in Zemax and not for every session.</li>\n<li><strong>PURE NSC MODE:</strong> (This is more of a note) If want to work on an optical design in pure NSC mode, please start ZEMAX in pure NSC mode before initiating the communication with PyZDDE. There is no way to switch the ZEMAX mode using external interfaces.</li>\n</ol>\n<p><strong>ZPL macros files supplied with PyZDDE</strong></p>\n<p>PyZDDE comes with few ZPL macro files that are present in the directory \u201cZPLMacros\u201d. They are occasionally used by PyZDDE (for example in the function <tt>ipzCaptureWindowLQ()</tt>). Please copy/move the files from the folder \u201cZPLMacros\u201d to the folder where Zemax/ Optic studio expects to find ZPL macros (By default, this folder is <tt><span class=\"pre\">C:\\&lt;username&gt;\\Documents\\ZEMAX\\Macros</span></tt>). A copy of the \u201cZPLMacros\u201d folder is always available in (installed with) the PyZDDE package.</p>\n</div>\n<div id=\"modules-in-pyzdde\">\n<h3>Modules in PyZDDE</h3>\n<ul>\n<li><strong>zdde</strong> (<tt>import pyzdde.zdde as pyz</tt>): The main module in PyZDDE that provides all dataitems related functions for interacting with Zemax/OpticStudio using the DDE interface.</li>\n<li><strong>arraytrace</strong> (<tt>import pyzdde.arraytrace as at</tt>): provides functions for tracing large number of rays</li>\n<li><strong>zfileutils</strong> (<tt>import pyzdde.zfileutils as zfu</tt>): provides helper functions for various Zemax file handling operations such as reading and writing beam files, .ZRD files, creating .DAT and .GRD files for grid phase /grid sag surfaces, etc.</li>\n<li><strong>systems</strong> (<tt>import pyzdde.systems as osys</tt>): provides helper functions for quickly creating basic optical systems.</li>\n<li><strong>misc</strong> (<tt>import pyzdde.misc as mys</tt>): contains miscellaneous collection of utility functions that may be used with PyZDDE.</li>\n</ul>\n<div id=\"features\">\n<h4>Features</h4>\n<ul>\n<li>Functions for using all \u201cdata items\u201d defined in Zemax manual</li>\n<li>Supports both Python 2.7 and Python 3.3/3.4</li>\n<li>Supports both Unicode and extended ascii text</li>\n<li>Over 80 additional functions for more efficient use (more will be added in future). Examples include <tt>zSetTimeout()</tt>,\n<tt>zExecuteZPLMacro()</tt>, <tt>zGetSeidelAberration()</tt>, <tt>zSetFieldTuple()</tt>,\n<tt>zGetFieldTuple()</tt>, <tt>zSetWaveTuple()</tt>, <tt>zGetWaveTuple()</tt>, <tt>zCalculateHiatus()</tt>, <tt>zGetPupilMagnification()</tt>, <tt>zGetPOP()</tt>,\n<tt>zSetPOPSettings()</tt>, <tt>zModifyPOPSettings()</tt>, <tt>zGetPSF()</tt>, <tt>zGetPSFCrossSec()</tt>, <tt>zGetMTF()</tt>, <tt>zGetImageSimulation()</tt>.\nA list of the additional functions are available <a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki/07.-List-of-helper-functions-in-PyZDDE\" rel=\"nofollow\">here</a>.</li>\n<li>Special functions for better interactive use with IPython notebooks.\nExamples include <tt>ipzCaptureWindow()</tt>, <tt>ipzGetFirst()</tt>, <tt>ipzGetPupil()</tt>, <tt>ipzGetSystemAper()</tt>, <tt>ipzGetTextWindow()</tt></li>\n<li>Quick generation of few simple optical systems (see <tt>pyzdde.systems</tt> module)</li>\n<li>Array ray tracing using a separate and standalone module <tt>arraytrace</tt> along with helper functions for performing array ray tracing.</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h4>Overview</h4>\n<p>PyZDDE is a Python-based extension for communicating with <a href=\"http://www.zemax.com/\" rel=\"nofollow\">ZEMAX/OpticStudio</a> using the DDE\nprotocol. It is similar to\u2014and very much inspired by\u2014the Matlab-based <a href=\"http://www.zemax.com/support/resource-center/knowledgebase/how-to-talk-to-zemax-from-matlab\" rel=\"nofollow\">MZDDE toolbox</a> developed by Derek Griffith at CSIR.</p>\n<p>PyZDDE can be used with regular Python scripts as well as in an interactive environment such as an IPython shell,\n<a href=\"http://ipython.readthedocs.org/en/stable/interactive/qtconsole.html\" rel=\"nofollow\">QtConsole</a> or <a href=\"http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html\" rel=\"nofollow\">IPython Notebook</a>.</p>\n<p>There are 4 types of functions, and a separate module for array ray tracing in the toolbox:</p>\n<ol>\n<li>Functions for accessing ZEMAX using the data items defined in the \u201cZEMAX EXTENSIONS\u201d chapter of the ZEMAX manual. These functions\u2019\nnames start with \u201cz\u201d and the rest of the function names matches the data item defined by Zemax. For example <tt>zGetSolve()</tt> for the data\nitem \u201cGetSolve\u201d, <tt>zSetSolve()</tt> for the data item \u201cSetSolve\u201d, etc.</li>\n<li>Helper functions to enhance the toolbox functionality beyond just the data items, such as <tt>zCalculateHiatus</tt>, <tt>zSpiralSpot</tt>. Also,\nthere are other utilities which increase the capability of the toolbox such as <tt>zOptimize2()</tt>, <tt>zSetWaveTuple()</tt>,\n<tt>zExecuteZPLMacro()</tt>, etc.</li>\n<li>Few functions such as <tt>ipzCaptureWindow()</tt>, <tt>ipzGetTextWindow()</tt> can be used to embed analysis/graphic windows and text files from\nZemax into an IPython Notebook or IPython QtConsole.</li>\n<li>There are several other functions which can be used independent of a running Zemax session. Examples include <tt>showZOperandList()</tt>,\n<tt>findZOperand()</tt>, <tt>findZButtonCode()</tt>, etc.</li>\n<li>A separate and standalone module <tt>arraytrace</tt> for performing array ray tracing.</li>\n</ol>\n<p>All the functions prefixed with \u201cz\u201d or \u201cipz\u201d (types 1, 2 and 3) interact with Zemax directly and hence require a Zemax session to be running\nsimultaneously. As they are instance methods of a pyzdde channel object, a pyzdde object needs to be created.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyzdde.zdde</span> <span class=\"k\">as</span> <span class=\"nn\">pyz</span>    <span class=\"c1\"># import pyzdde module</span>\n<span class=\"n\">ln</span> <span class=\"o\">=</span> <span class=\"n\">pyz</span><span class=\"o\">.</span><span class=\"n\">createLink</span><span class=\"p\">()</span>        <span class=\"c1\"># create DDE link object</span>\n<span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">zPushLens</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>              <span class=\"c1\"># method of type 1</span>\n<span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">zExecuteZPLMacro</span><span class=\"p\">(</span><span class=\"s1\">'CEN'</span><span class=\"p\">)</span>   <span class=\"c1\"># method of type 2</span>\n<span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">ipzCaptureWindow2</span><span class=\"p\">(</span><span class=\"s1\">'Lay'</span><span class=\"p\">)</span>  <span class=\"c1\"># method of type 3</span>\n</pre>\n<p>Helper functions of type 4 can be accessed from the <tt>zdde</tt> module directly.</p>\n<p>For example</p>\n<pre><span class=\"n\">pyz</span><span class=\"o\">.</span><span class=\"n\">zo</span><span class=\"o\">.</span><span class=\"n\">findZOperand</span><span class=\"p\">(</span><span class=\"s2\">\"decenter\"</span><span class=\"p\">)</span>  <span class=\"c1\"># method of type 4 (same as pyz.findZOperand)</span>\n<span class=\"n\">pyz</span><span class=\"o\">.</span><span class=\"n\">numAper</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">)</span>                <span class=\"c1\"># method of type 4</span>\n</pre>\n<p>A complete list of helper functions is available\n<a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki/List-of-helper-functions-in-PyZDDE\" rel=\"nofollow\">here</a>.\n(Please be mindful that the currently this page is not updated at the same rate at which functions are getting added)</p>\n</div>\n<div id=\"getting-started-usage-and-other-documentation\">\n<h4>Getting started, usage, and other documentation</h4>\n<p>Getting started with PyZDDE is really very simple as shown in the \u201cHello world\u201d program above. Please refer to the <a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki\" rel=\"nofollow\">Wiki page</a>. It has detailed guide on how to start using PyZDDE.</p>\n</div>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>The core PyZDDE library only depends on the standard Python Library.</p>\n<ol>\n<li>Python 2.7 / Python 3.3 and above; 32/64 bit version</li>\n<li>Matplotlib (optional, used in some of the example programs)</li>\n</ol>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>The code is under the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT License</a>.</p>\n</div>\n<div id=\"contributions-and-credits\">\n<h3>Contributions and credits</h3>\n<p>You are encouraged to use, provide feedbacks and contribute to the PyZDDE project. The generous people who have contributed to PyZDDE are\nin <a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki/09.-Contributors\" rel=\"nofollow\">Contributors</a>. Thanks a lot to all of you.</p>\n<p>Other projects that are using PyZDDE are listed <a href=\"https://github.com/indranilsinharoy/PyZDDE/wiki/10.-Projects-using-PyZDDE\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"citing\">\n<h3>Citing</h3>\n<p>If you use PyZDDE for research work, please consider citing it. Various\ncitation styles for PyZDDE are available from\n<a href=\"https://zenodo.org/record/15763?ln=en\" rel=\"nofollow\">zenodo</a>.</p>\n</div>\n<div id=\"chat-room\">\n<h3>Chat room</h3>\n<p><a href=\"https://gitter.im/indranilsinharoy/PyZDDE\" rel=\"nofollow\"><img alt=\"Gitter chat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce67187d800a544b8027fff5e7d958d9a203aa8c/68747470733a2f2f6261646765732e6769747465722e696d2f696e6472616e696c73696e6861726f792f50795a4444452e706e67\"></a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2376786, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "584ae361552e9c05e2d677e1dcffd2f6", "sha256": "040cd6ad1219b14cab619859a36c9c9848b66efb4cef5ed921cf5f078cef54e3"}, "downloads": -1, "filename": "PyZDDE-1.1.1.zip", "has_sig": false, "md5_digest": "584ae361552e9c05e2d677e1dcffd2f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4221241, "upload_time": "2015-06-19T05:14:36", "upload_time_iso_8601": "2015-06-19T05:14:36.460013Z", "url": "https://files.pythonhosted.org/packages/d8/dc/937871166109080ab40537b98ff1ba4dc593ba5d0c3d1c41bcebd7a46df1/PyZDDE-1.1.1.zip", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "eb2b2b394585399a0995c391b523f16e", "sha256": "36a42391d8290c1975a779951a332e9429d0ef09e31879533c4741aefcdfe3db"}, "downloads": -1, "filename": "PyZDDE-2.0.0.zip", "has_sig": false, "md5_digest": "eb2b2b394585399a0995c391b523f16e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4230779, "upload_time": "2015-09-01T06:07:34", "upload_time_iso_8601": "2015-09-01T06:07:34.135898Z", "url": "https://files.pythonhosted.org/packages/48/7e/379195e13276b7a37f23942055ba16ceafdeefa35c0eb7f470b695a97dd5/PyZDDE-2.0.0.zip", "yanked": false}], "2.0.0a1": [{"comment_text": "", "digests": {"md5": "4227ce025d28ad8d2da36ad3664979a0", "sha256": "d6086f3c5fd6fbd95145d646cf2b3b06c62606fb6203e1f1d58e28d84864a8f5"}, "downloads": -1, "filename": "PyZDDE-2.0.0a1.zip", "has_sig": false, "md5_digest": "4227ce025d28ad8d2da36ad3664979a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4230629, "upload_time": "2015-07-27T04:59:18", "upload_time_iso_8601": "2015-07-27T04:59:18.010972Z", "url": "https://files.pythonhosted.org/packages/84/6f/bfb829086638ec23740788be15d2f00496c4682fe1f666baa5a2cc04764c/PyZDDE-2.0.0a1.zip", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "bd80b4f372a8fe07fc8cecba284f930c", "sha256": "14c84b4e2de817fa0489198370f40da556767d2978fd0befefe5daad0522ac36"}, "downloads": -1, "filename": "PyZDDE-2.0.1.zip", "has_sig": false, "md5_digest": "bd80b4f372a8fe07fc8cecba284f930c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4230722, "upload_time": "2015-09-01T06:54:01", "upload_time_iso_8601": "2015-09-01T06:54:01.337381Z", "url": "https://files.pythonhosted.org/packages/c4/4e/31a294005a8093f1df6165014b3033a65f2a5736c78cd8a93e4ae80554e3/PyZDDE-2.0.1.zip", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "56f38afb8f2b1522a3c70b83cea7182d", "sha256": "69e6d8f83c573c73c487ab36703dafd8ff1e4dc65213d4d90155f18caf86f82d"}, "downloads": -1, "filename": "PyZDDE-2.0.2.zip", "has_sig": false, "md5_digest": "56f38afb8f2b1522a3c70b83cea7182d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7892644, "upload_time": "2016-01-04T05:49:08", "upload_time_iso_8601": "2016-01-04T05:49:08.197840Z", "url": "https://files.pythonhosted.org/packages/82/90/b0446351a6cbe9aeff10c8f43719634b0fab28d0fcef451ab0f6e201aaa5/PyZDDE-2.0.2.zip", "yanked": false}], "2.0.2a0": [{"comment_text": "", "digests": {"md5": "1c4f97401f08f7a75546eef59cc53d29", "sha256": "c8154c6d2b18af8adcb52be3c22b9b7ef32c46bebdca9c7c4d67896691777fc7"}, "downloads": -1, "filename": "PyZDDE-2.0.2a0.zip", "has_sig": false, "md5_digest": "1c4f97401f08f7a75546eef59cc53d29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7892794, "upload_time": "2016-01-01T08:44:52", "upload_time_iso_8601": "2016-01-01T08:44:52.312244Z", "url": "https://files.pythonhosted.org/packages/fd/a5/ce23e1a84b009385af56912c66bc850ade5bfa65fc95c067194a5697014f/PyZDDE-2.0.2a0.zip", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "2fc45ac887057b3ff37eb82bcf038658", "sha256": "cd6f2af0630f9c5b640f88b90d4344d511b055db60b727b02f7e97b87f143d62"}, "downloads": -1, "filename": "PyZDDE-2.0.3.zip", "has_sig": false, "md5_digest": "2fc45ac887057b3ff37eb82bcf038658", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7902979, "upload_time": "2016-10-03T02:35:26", "upload_time_iso_8601": "2016-10-03T02:35:26.223517Z", "url": "https://files.pythonhosted.org/packages/b6/0a/c34e018dd660c7432eccd4de07cf59b2cd7ab3ec262f4f4720e23671a481/PyZDDE-2.0.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2fc45ac887057b3ff37eb82bcf038658", "sha256": "cd6f2af0630f9c5b640f88b90d4344d511b055db60b727b02f7e97b87f143d62"}, "downloads": -1, "filename": "PyZDDE-2.0.3.zip", "has_sig": false, "md5_digest": "2fc45ac887057b3ff37eb82bcf038658", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7902979, "upload_time": "2016-10-03T02:35:26", "upload_time_iso_8601": "2016-10-03T02:35:26.223517Z", "url": "https://files.pythonhosted.org/packages/b6/0a/c34e018dd660c7432eccd4de07cf59b2cd7ab3ec262f4f4720e23671a481/PyZDDE-2.0.3.zip", "yanked": false}], "timestamp": "Fri May  8 03:10:39 2020"}