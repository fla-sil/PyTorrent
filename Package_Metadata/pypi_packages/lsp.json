{"info": {"author": "WindSoilder", "author_email": "WindSoilder@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython"], "description": "LSP - Language server protocol in Sans-IO pattern\n=================================================\n\nLanguage Server Protocol implementation in sans-io pattern.  Which is highly inspired by `Sans-IO pattern <https://sans-io.readthedocs.io/how-to-sans-io.html>`_.  And some relatived projects:\n- `hyper-h2 <https://github.com/python-hyper/hyper-h2>`_\n- `h11 <https://github.com/python-hyper/h11>`_\n\nSo it can be integreted with trio, asyncio, or some other frameworks easily.\n\nRequired python version\n-----------------------\nPython >= 3.6\n\nFeatures\n--------\n1. Pure python implementation\n2. Don't relatived to other site-packages\n3. Can (should) easily integreted with high level framework like trio, asyncio\n\nHow to install it\n-----------------\nThere are two ways to install *lsp*\n\n- Install via *pip* (recommended)\n\n.. code-block:: text\n\n    pip install lsp\n\n- Install via *setup.py*\n\n.. code-block:: shell\n\n    python setup.py install\n\nBasic Usage example\n-------------------\n\nClient side\n~~~~~~~~~~~\n\n.. code-block:: python\n\n    import socket\n    from lsp import Connection, NEED_DATA, DataReceived, MessageEnd\n\n    sock = socket.socket()\n\n    sock.connect((\"localhost\", 10001))\n    conn = Connection(\"client\")\n\n\n    answer = input(\"Send request?(y/n)\")\n    while answer == \"y\":\n        # use connection send_json method to convert json object to bytes\n        request_data = conn.send_json({\"method\": \"didOpen\"})\n        # then we can send data to server\n        sock.sendall(request_data)\n\n        while True:\n            # and then we can get next_event of connection, it can indicate\n            # that what should we do.\n            event = conn.next_event()\n            # we need to receive data from server\n            if event is NEED_DATA:\n                try:\n                    data = sock.recv(1024)\n                except ConnectionResetError:\n                    print('The server connection is closed, So I will leave:)')\n                    conn.close()\n                    sock.close()\n                    exit(0)\n                else:\n                    print(\"return from sock.recv\")\n                    conn.receive(data)\n            # we have receive data from server\n            elif isinstance(event, DataReceived):\n                print(\"Receive event, content:\")\n                print(event)\n            elif isinstance(event, MessageEnd):\n                print(\"Server sending data complete.\")\n                break\n\n        # then we can call get_received_data() to extract out what we get\n        header, response_body = conn.get_received_data()\n        print(\"Response header from server:\")\n        print(header)\n        print(\"Response body from server:\")\n        print(response_body)\n        answer = input(\"Send request?(y/n)\")\n        conn.go_next_circle()\n\nServer side\n~~~~~~~~~~~\n\n.. code-block:: python\n\n    import socket\n    from lsp import Connection, NEED_DATA, RequestReceived, DataReceived, MessageEnd\n\n    sock = socket.socket()\n    sock.bind((\"0.0.0.0\", 10001))\n    sock.listen(1)\n    client_sock, addr = sock.accept()\n    print(f\"get connection from {client_sock}\")\n\n    conn = Connection(\"server\")\n    try:\n        while True:\n            while True:\n                # call next event to indicate what server socket should do.\n                event = conn.next_event()\n\n                # no data coming yet, so the return value is NEED_DATA\n                if event is NEED_DATA:\n                    data = client_sock.recv(1024)\n                    if data == b\"\":\n                        print(\"Client connection is closed, I will exit.\")\n                        exit(0)\n                    conn.receive(data)\n                # Request header is coming :)\n                elif isinstance(event, RequestReceived):\n                    print(\"Receive request header\")\n                    print(event.to_data())\n                # Request data is coming :)\n                elif isinstance(event, DataReceived):\n                    print(\"Receive request data\")\n                    print(event.to_data())\n                # client has send data completely.\n                elif isinstance(event, MessageEnd):\n                    print(\"Data receive complete:)\")\n                    break\n\n            # so we can call con.get_received_data to fetch what client send.\n            received_data = conn.get_received_data()\n            print(f\"Receiving data: {received_data}\")\n\n            # send response back to client.\n            print(f\"Sending response to client\")\n            data = conn.send_json({\"Content\": \"I am received:)\"})\n            client_sock.sendall(data)\n            print(f\"For now, go to next circle\")\n\n            # then we need to call go_next_circle, to get another request from client.\n            conn.go_next_circle()\n    finally:\n        sock.close()\n\nFor more usage example, please check out files in *examples/servers* folder.\n\nMain API in lsp\n---------------\n1. Want to send json data?  You can try :code:`conn.send_json`.\n2. Want to know what we should do next?  You can try :code:`conn.next_event`.\n3. After receive data, please don't forget to call :code:`conn.receive(data)`.\n   Which will save data into inner buffer, and it can drive\n   :code:`conn.next_event` method returns other events.\n4. When Receive :code:`MessageEnd` event, we can just call\n   :code:`conn.get_received_data` to fetch for incoming data.\n\nMain events we will get from next_event\n---------------------------------------\nClient\n~~~~~~\nClient side will get the following values from next_events:\n\n1. *NEED_DATA* - which indicate that we need to receive data from server.\n2. *ResponseReceived* - Client have receive response header.\n3. *DataReceived* - Client have receive resposne body.\n4. *MessageEnd* - Receive data from server complete.\n\nServer\n~~~~~~\nServer side will get the following values from next_events:\n\n1. *NEED_DATA* - which indicate that we need to receive data from client.\n2. *RequestReceived* - Client have send request header,  and we receive it.\n3. *DataReceived* - Server have receive response body from client.\n4. *MessageEnd* - Client sending request complete.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/WindSoilder/lsp", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lsp", "package_url": "https://pypi.org/project/lsp/", "platform": "", "project_url": "https://pypi.org/project/lsp/", "project_urls": {"Homepage": "https://github.com/WindSoilder/lsp"}, "release_url": "https://pypi.org/project/lsp/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Sans-IO pattern, language server protocol implementation", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Language Server Protocol implementation in sans-io pattern.  Which is highly inspired by <a href=\"https://sans-io.readthedocs.io/how-to-sans-io.html\" rel=\"nofollow\">Sans-IO pattern</a>.  And some relatived projects:\n- <a href=\"https://github.com/python-hyper/hyper-h2\" rel=\"nofollow\">hyper-h2</a>\n- <a href=\"https://github.com/python-hyper/h11\" rel=\"nofollow\">h11</a></p>\n<p>So it can be integreted with trio, asyncio, or some other frameworks easily.</p>\n<div id=\"required-python-version\">\n<h2>Required python version</h2>\n<p>Python &gt;= 3.6</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ol>\n<li>Pure python implementation</li>\n<li>Don\u2019t relatived to other site-packages</li>\n<li>Can (should) easily integreted with high level framework like trio, asyncio</li>\n</ol>\n</div>\n<div id=\"how-to-install-it\">\n<h2>How to install it</h2>\n<p>There are two ways to install <em>lsp</em></p>\n<ul>\n<li>Install via <em>pip</em> (recommended)</li>\n</ul>\n<pre>pip install lsp\n</pre>\n<ul>\n<li>Install via <em>setup.py</em></li>\n</ul>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"basic-usage-example\">\n<h2>Basic Usage example</h2>\n<div id=\"client-side\">\n<h3>Client side</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lsp</span> <span class=\"kn\">import</span> <span class=\"n\">Connection</span><span class=\"p\">,</span> <span class=\"n\">NEED_DATA</span><span class=\"p\">,</span> <span class=\"n\">DataReceived</span><span class=\"p\">,</span> <span class=\"n\">MessageEnd</span>\n\n<span class=\"n\">sock</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">()</span>\n\n<span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">((</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"mi\">10001</span><span class=\"p\">))</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"s2\">\"client\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Send request?(y/n)\"</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">answer</span> <span class=\"o\">==</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span>\n    <span class=\"c1\"># use connection send_json method to convert json object to bytes</span>\n    <span class=\"n\">request_data</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">send_json</span><span class=\"p\">({</span><span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"didOpen\"</span><span class=\"p\">})</span>\n    <span class=\"c1\"># then we can send data to server</span>\n    <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">sendall</span><span class=\"p\">(</span><span class=\"n\">request_data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\"># and then we can get next_event of connection, it can indicate</span>\n        <span class=\"c1\"># that what should we do.</span>\n        <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">next_event</span><span class=\"p\">()</span>\n        <span class=\"c1\"># we need to receive data from server</span>\n        <span class=\"k\">if</span> <span class=\"n\">event</span> <span class=\"ow\">is</span> <span class=\"n\">NEED_DATA</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ConnectionResetError</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The server connection is closed, So I will leave:)'</span><span class=\"p\">)</span>\n                <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"return from sock.recv\"</span><span class=\"p\">)</span>\n                <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">receive</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"c1\"># we have receive data from server</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">DataReceived</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Receive event, content:\"</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">MessageEnd</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Server sending data complete.\"</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span>\n\n    <span class=\"c1\"># then we can call get_received_data() to extract out what we get</span>\n    <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">response_body</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_received_data</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response header from server:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response body from server:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response_body</span><span class=\"p\">)</span>\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Send request?(y/n)\"</span><span class=\"p\">)</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">go_next_circle</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"server-side\">\n<h3>Server side</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lsp</span> <span class=\"kn\">import</span> <span class=\"n\">Connection</span><span class=\"p\">,</span> <span class=\"n\">NEED_DATA</span><span class=\"p\">,</span> <span class=\"n\">RequestReceived</span><span class=\"p\">,</span> <span class=\"n\">DataReceived</span><span class=\"p\">,</span> <span class=\"n\">MessageEnd</span>\n\n<span class=\"n\">sock</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">()</span>\n<span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">((</span><span class=\"s2\">\"0.0.0.0\"</span><span class=\"p\">,</span> <span class=\"mi\">10001</span><span class=\"p\">))</span>\n<span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">client_sock</span><span class=\"p\">,</span> <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"get connection from </span><span class=\"si\">{</span><span class=\"n\">client_sock</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"s2\">\"server\"</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># call next event to indicate what server socket should do.</span>\n            <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">next_event</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># no data coming yet, so the return value is NEED_DATA</span>\n            <span class=\"k\">if</span> <span class=\"n\">event</span> <span class=\"ow\">is</span> <span class=\"n\">NEED_DATA</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">client_sock</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"\"</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Client connection is closed, I will exit.\"</span><span class=\"p\">)</span>\n                    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">receive</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Request header is coming :)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">RequestReceived</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Receive request header\"</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">to_data</span><span class=\"p\">())</span>\n            <span class=\"c1\"># Request data is coming :)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">DataReceived</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Receive request data\"</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">to_data</span><span class=\"p\">())</span>\n            <span class=\"c1\"># client has send data completely.</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">MessageEnd</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Data receive complete:)\"</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"c1\"># so we can call con.get_received_data to fetch what client send.</span>\n        <span class=\"n\">received_data</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_received_data</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Receiving data: </span><span class=\"si\">{</span><span class=\"n\">received_data</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># send response back to client.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Sending response to client\"</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">send_json</span><span class=\"p\">({</span><span class=\"s2\">\"Content\"</span><span class=\"p\">:</span> <span class=\"s2\">\"I am received:)\"</span><span class=\"p\">})</span>\n        <span class=\"n\">client_sock</span><span class=\"o\">.</span><span class=\"n\">sendall</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"For now, go to next circle\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># then we need to call go_next_circle, to get another request from client.</span>\n        <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">go_next_circle</span><span class=\"p\">()</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>For more usage example, please check out files in <em>examples/servers</em> folder.</p>\n</div>\n</div>\n<div id=\"main-api-in-lsp\">\n<h2>Main API in lsp</h2>\n<ol>\n<li>Want to send json data?  You can try <code>conn.send_json</code>.</li>\n<li>Want to know what we should do next?  You can try <code>conn.next_event</code>.</li>\n<li>After receive data, please don\u2019t forget to call <code>conn.receive(data)</code>.\nWhich will save data into inner buffer, and it can drive\n<code>conn.next_event</code> method returns other events.</li>\n<li>When Receive <code>MessageEnd</code> event, we can just call\n<code>conn.get_received_data</code> to fetch for incoming data.</li>\n</ol>\n</div>\n<div id=\"main-events-we-will-get-from-next-event\">\n<h2>Main events we will get from next_event</h2>\n<div id=\"client\">\n<h3>Client</h3>\n<p>Client side will get the following values from next_events:</p>\n<ol>\n<li><em>NEED_DATA</em> - which indicate that we need to receive data from server.</li>\n<li><em>ResponseReceived</em> - Client have receive response header.</li>\n<li><em>DataReceived</em> - Client have receive resposne body.</li>\n<li><em>MessageEnd</em> - Receive data from server complete.</li>\n</ol>\n</div>\n<div id=\"server\">\n<h3>Server</h3>\n<p>Server side will get the following values from next_events:</p>\n<ol>\n<li><em>NEED_DATA</em> - which indicate that we need to receive data from client.</li>\n<li><em>RequestReceived</em> - Client have send request header,  and we receive it.</li>\n<li><em>DataReceived</em> - Server have receive response body from client.</li>\n<li><em>MessageEnd</em> - Client sending request complete.</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5099362, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "27f49214993312573af4b671a428433e", "sha256": "191f4306e283a058c46322fabf83e720eb4b3dff35cc28599ea6e0a3a2440640"}, "downloads": -1, "filename": "lsp-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "27f49214993312573af4b671a428433e", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 26218, "upload_time": "2019-03-22T09:31:30", "upload_time_iso_8601": "2019-03-22T09:31:30.944573Z", "url": "https://files.pythonhosted.org/packages/ed/a8/796871383980c3c4d60388f456e7175d7a1dd8929575d0cda04d6db52b24/lsp-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bfb1ed3051ccc60b758e89f245457e3", "sha256": "06d49b283d0fcdd848d44c0839cd935a839add4920bd74e270d8761131ae3f1e"}, "downloads": -1, "filename": "lsp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6bfb1ed3051ccc60b758e89f245457e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11731, "upload_time": "2019-03-22T09:31:36", "upload_time_iso_8601": "2019-03-22T09:31:36.272892Z", "url": "https://files.pythonhosted.org/packages/0f/bc/e11e6033055977cedf86b2cf0156da604afe29617933d4b33d7ddcd71fae/lsp-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "48538bd84d7d1c349752d89442233dc9", "sha256": "28006638eacd60393ddcb7018d70cf7dbf835eced6ccb87c9dcecf3ec30bb5c3"}, "downloads": -1, "filename": "lsp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "48538bd84d7d1c349752d89442233dc9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12629, "upload_time": "2019-04-04T15:43:48", "upload_time_iso_8601": "2019-04-04T15:43:48.771073Z", "url": "https://files.pythonhosted.org/packages/d8/27/0e78fe8276757802a267af7c81f8e02c2d4d67e5ecccd71595ccf21e1848/lsp-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48538bd84d7d1c349752d89442233dc9", "sha256": "28006638eacd60393ddcb7018d70cf7dbf835eced6ccb87c9dcecf3ec30bb5c3"}, "downloads": -1, "filename": "lsp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "48538bd84d7d1c349752d89442233dc9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12629, "upload_time": "2019-04-04T15:43:48", "upload_time_iso_8601": "2019-04-04T15:43:48.771073Z", "url": "https://files.pythonhosted.org/packages/d8/27/0e78fe8276757802a267af7c81f8e02c2d4d67e5ecccd71595ccf21e1848/lsp-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:27 2020"}