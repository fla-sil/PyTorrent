{"info": {"author": "George Fischhof", "author_email": "george@fischhof.hu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Office/Business", "Topic :: Software Development", "Topic :: Software Development :: Quality Assurance", "Topic :: Utilities"], "description": "Pluggable Info Monitor\n======================\n\nPluggable Info Monitor is a web application to display information provided by plugins on a web page.\n\nPIM for the Visibility and Transparency\n---------------------------------------\n\nQuick Start\n-----------\n1. Install requirements\n::\n\n    pip install flask\n    pip install waitress\n\n2. Copy the source to a folder of your choice\n3. Check working:\n    a. ``cd <path_to_info_monitor.py>``\n    a. ``python info_monitor``\n    b. in a browser window navigate to ``127.0.0.1:8080`` address \n    c. the example plugins give some info - It works ;-)\n4. You can write your plugins using the examples\n\nUsage\n-----\nThe index page will show the list of available plugins as links. These links can be used if PIM used interactively. \nThe info pages will be changed (the next is showed) in every minute (can be changed in PIM_config.py).\nIf used interactively, the info refreshes on keypress too.\n\nTo be useful for you, you have to write your own info providers according to examples.\n\nThe check_info_provider_interface.py checks the most important things of your plugins. \n(Can be started from the folder it resides)\n\nNext version will be better. ;-)\n\nConfiguration\n-------------\nServing IP address, port, refresh time interval can be set in PIM_config.py file\n\n\nCompatibility\n-------------\nPIM needs at least Python 3.1\n\nFeatures and versions:\n\n- format string: Python 3.6 https://docs.python.org/3/reference/lexical_analysis.html#f-strings If you have earlier version of Python, you should replace these string formattings\n- reload imported module in runtime: Python 3.4 If you have earlier version of Python if application runs and you edit the info provider plugin, after editing the application must be restarted\n- import module runtime: Python 3.1 https://docs.python.org/3/library/importlib.html#importlib.import_module\n\n\nToDo / Planned features\n-----------------------\n- COnfigurable font size\n- Configurable plugin folder outside of the program\n- Start plugin checking from web and get results as well\n- Package creation fro easier installation; using in virtualemv it can be installed with user privileges\n\n\nScreenshot\n----------\n.. image:: Screenshot.jpg\n\nOne module gives four information with different severity levels\n\n\nTL;DR\n-----\n\nHistory\n-------\nDuring development, specially in agile methodologies there is need to monitor the status of the development. So teams used to check the build status, test results, number of bugs etc. (Like Jenkins's build monitor plugin (aka radiator))\nSo the idea came from this: Jenkins build monitor can show only the status of the jobs. And I wanted a tool that shows / monitors other things as well. (This is my first Python web application ;-) )\n\nHow PIM works\n-------------\n0. PIM webpage is loaded in a browser (if not called, PIM does nothing)\n1. Index page is displayed. Clicking on a provider will display the info provided by the given provider. If no provider is clicked, the first will be selected automatically.\n2. gets the info from the provider\n3. creates a web page with the info it gathered. There are two parameters now which can modify the way the info is dispalyed. Severity (gives background color) and display splitting (full screen, half, quarter)\n4. PIM goes through the providers (ordered alphabetically by their name) and after the last one it starts the cycle from the first one.\n\nWhere the displayed info comes from?\n------------------------------------\nYou write the info provider plugins. The plugins must be put into info_providers folder. The providers must provide the info in the following structure\n\n::\n\n    one_info = {\n        'display_part': DisplayParts.FULL_SCREEN,\n        'info_severity': InfoSeverity.INFO,\n        'info': {\n            'key_1': 42,\n            'key_2': 'spam',\n            'key_3': 'eggs',\n        },\n    }\n\n    info_to_display = list()\n    info_to_display.append(one_info)\n\n\nInstallation\n------------\n\nRequirements\n^^^^^^^^^^^^\n\n- Flask webframework\n\n  https://pypi.python.org/pypi/Flask\n  ::\n\n    pip install flask\n\n- Waitress webserver\n\n  https://pypi.python.org/pypi/waitress\n  ::\n\n    pip install waitress\n\n- Optional:PyTest test framework to execute PIM tests and the more important thing: to verify your plugins whether they comply to interface requirements.\n\n  https://pypi.python.org/pypi/pytest/\n  ::\n\n    pip install pytest\n\nPIM has is no any install procedure right now. You can get PIM from the source.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/GeorgeFischhof/pluggable_info_monitor", "keywords": "information monitor plugin", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pluggable-info-monitor", "package_url": "https://pypi.org/project/pluggable-info-monitor/", "platform": "", "project_url": "https://pypi.org/project/pluggable-info-monitor/", "project_urls": {"Homepage": "https://bitbucket.org/GeorgeFischhof/pluggable_info_monitor"}, "release_url": "https://pypi.org/project/pluggable-info-monitor/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Pluggable Info Monitor for visibility and transparency", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pluggable Info Monitor is a web application to display information provided by plugins on a web page.</p>\n<div id=\"pim-for-the-visibility-and-transparency\">\n<h2>PIM for the Visibility and Transparency</h2>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>1. Install requirements</p>\n<pre>pip install flask\npip install waitress\n</pre>\n<ol>\n<li>Copy the source to a folder of your choice</li>\n<li><dl>\n<dt>Check working:</dt>\n<dd>a. <tt>cd &lt;path_to_info_monitor.py&gt;</tt>\na. <tt>python info_monitor</tt>\nb. in a browser window navigate to <tt>127.0.0.1:8080</tt> address\nc. the example plugins give some info - It works ;-)</dd>\n</dl>\n</li>\n<li>You can write your plugins using the examples</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The index page will show the list of available plugins as links. These links can be used if PIM used interactively.\nThe info pages will be changed (the next is showed) in every minute (can be changed in PIM_config.py).\nIf used interactively, the info refreshes on keypress too.</p>\n<p>To be useful for you, you have to write your own info providers according to examples.</p>\n<p>The check_info_provider_interface.py checks the most important things of your plugins.\n(Can be started from the folder it resides)</p>\n<p>Next version will be better. ;-)</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Serving IP address, port, refresh time interval can be set in PIM_config.py file</p>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p>PIM needs at least Python 3.1</p>\n<p>Features and versions:</p>\n<ul>\n<li>format string: Python 3.6 <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#f-strings\" rel=\"nofollow\">https://docs.python.org/3/reference/lexical_analysis.html#f-strings</a> If you have earlier version of Python, you should replace these string formattings</li>\n<li>reload imported module in runtime: Python 3.4 If you have earlier version of Python if application runs and you edit the info provider plugin, after editing the application must be restarted</li>\n<li>import module runtime: Python 3.1 <a href=\"https://docs.python.org/3/library/importlib.html#importlib.import_module\" rel=\"nofollow\">https://docs.python.org/3/library/importlib.html#importlib.import_module</a></li>\n</ul>\n</div>\n<div id=\"todo-planned-features\">\n<h2>ToDo / Planned features</h2>\n<ul>\n<li>COnfigurable font size</li>\n<li>Configurable plugin folder outside of the program</li>\n<li>Start plugin checking from web and get results as well</li>\n<li>Package creation fro easier installation; using in virtualemv it can be installed with user privileges</li>\n</ul>\n</div>\n<div id=\"screenshot\">\n<h2>Screenshot</h2>\n<img alt=\"Screenshot.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00f7168dfbd38cd0c707e2c18728480d907fb833/53637265656e73686f742e6a7067\">\n<p>One module gives four information with different severity levels</p>\n</div>\n<div id=\"tl-dr\">\n<h2>TL;DR</h2>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<p>During development, specially in agile methodologies there is need to monitor the status of the development. So teams used to check the build status, test results, number of bugs etc. (Like Jenkins\u2019s build monitor plugin (aka radiator))\nSo the idea came from this: Jenkins build monitor can show only the status of the jobs. And I wanted a tool that shows / monitors other things as well. (This is my first Python web application ;-) )</p>\n</div>\n<div id=\"how-pim-works\">\n<h2>How PIM works</h2>\n<ol>\n<li>PIM webpage is loaded in a browser (if not called, PIM does nothing)</li>\n<li>Index page is displayed. Clicking on a provider will display the info provided by the given provider. If no provider is clicked, the first will be selected automatically.</li>\n<li>gets the info from the provider</li>\n<li>creates a web page with the info it gathered. There are two parameters now which can modify the way the info is dispalyed. Severity (gives background color) and display splitting (full screen, half, quarter)</li>\n<li>PIM goes through the providers (ordered alphabetically by their name) and after the last one it starts the cycle from the first one.</li>\n</ol>\n</div>\n<div id=\"where-the-displayed-info-comes-from\">\n<h2>Where the displayed info comes from?</h2>\n<p>You write the info provider plugins. The plugins must be put into info_providers folder. The providers must provide the info in the following structure</p>\n<pre>one_info = {\n    'display_part': DisplayParts.FULL_SCREEN,\n    'info_severity': InfoSeverity.INFO,\n    'info': {\n        'key_1': 42,\n        'key_2': 'spam',\n        'key_3': 'eggs',\n    },\n}\n\ninfo_to_display = list()\ninfo_to_display.append(one_info)\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<h2 id=\"requirements\"><span class=\"section-subtitle\">Requirements</span></h2>\n<ul>\n<li><p>Flask webframework</p>\n<p><a href=\"https://pypi.python.org/pypi/Flask\" rel=\"nofollow\">https://pypi.python.org/pypi/Flask</a></p>\n<pre>pip install flask\n</pre>\n</li>\n<li><p>Waitress webserver</p>\n<p><a href=\"https://pypi.python.org/pypi/waitress\" rel=\"nofollow\">https://pypi.python.org/pypi/waitress</a></p>\n<pre>pip install waitress\n</pre>\n</li>\n<li><p>Optional:PyTest test framework to execute PIM tests and the more important thing: to verify your plugins whether they comply to interface requirements.</p>\n<p><a href=\"https://pypi.python.org/pypi/pytest/\" rel=\"nofollow\">https://pypi.python.org/pypi/pytest/</a></p>\n<pre>pip install pytest\n</pre>\n</li>\n</ul>\n<p>PIM has is no any install procedure right now. You can get PIM from the source.</p>\n</div>\n\n          </div>"}, "last_serial": 3325142, "releases": {"0.2.0": []}, "urls": [], "timestamp": "Fri May  8 02:52:29 2020"}