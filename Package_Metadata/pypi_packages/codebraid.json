{"info": {"author": "Geoffrey M. Poore", "author_email": "gpoore@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Documentation", "Topic :: Education", "Topic :: Software Development", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Documentation", "Topic :: Text Processing", "Topic :: Text Processing :: Markup"], "description": "# Codebraid \u2013 live code in Pandoc Markdown\n\nCodebraid is a Python program that enables executable code in\n[Pandoc](http://pandoc.org/) Markdown documents.  Using Codebraid can be as\nsimple as adding a class to your code blocks' attributes, and then running\n`codebraid` rather than `pandoc` to convert your document from Markdown to\nanother format.  `codebraid` supports almost all of `pandoc`'s options and\npasses them to `pandoc` internally.\n\nCodebraid provides two options for executing code.  It includes a built-in\ncode execution system that currently supports **Python 3.5+**, **Julia**,\n**Rust**, **R**, **Bash**, and **JavaScript**.  Code can also be executed\nusing **Jupyter kernels**, with support for rich output like plots.\n\n**Development:**  https://github.com/gpoore/codebraid\n\nView example HTML output, or see the Markdown source or raw HTML (the Python\nand Rust examples demonstrate more advanced features at the end):\n\n  * [Python example](https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/python.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/python.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/python.html)]\n  * [Jupyter example](https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/jupyter.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/jupyter.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/jupyter.html)]\n  * [Rust example](https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/rust.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/rust.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/rust.html)]\n  * [Julia example](https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/julia.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/julia.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/julia.html)]\n  * [R example](https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/R.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/R.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/R.html)]\n  * [Bash example](https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/bash.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/bash.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/bash.html)]\n  * [JavaScript example](https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/javascript.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/javascript.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/javascript.html)]\n\n\n## Simple example\n\nMarkdown source `test.md`:\n\n``````markdown\n```{.python .cb.run}\nvar = 'Hello from Python!'\nvar += ' $2^8 = {}$'.format(2**8)\n```\n\n```{.python .cb.run}\nprint(var)\n```\n``````\n\nRun `codebraid` (to save the output, add something like `-o test_out.md`, and\nadd `--overwrite` if it already exists):\n\n```shell\ncodebraid pandoc --from markdown --to markdown test.md\n```\n\nOutput:\n\n```markdown\nHello from Python! $2^8 = 256$\n```\n\nAs this example illustrates, variables persist between code blocks; by\ndefault, code is executed within a single session.  Code output is also cached\nby default so that code is only re-executed when modified.\n\n\n## Features\n\n### Comparison with [Jupyter](https://jupyter.org/), [knitr](https://yihui.name/knitr/), and [Pweave](http://mpastell.com/pweave/)\n\n|                                                | Codebraid | Jupyter Notebook |  knitr   | Pweave   |\n|------------------------------------------------|-----------|------------------|----------|----------|\n| multiple programming languages per document    | &check;   | &check;&ast;     | &check;\u2020 | &check;&ast; |\n| multiple independent sessions per language     | &check;   |                  |          |          |\n| inline code execution within paragraphs        | &check;   |                  | &check;  | &check;  |\n| no out-of-order code execution                 | &check;   |                  | &check;\u2021 | &check;  |\n| no markdown preprocessor or custom syntax      | &check;   | &check;          |          |          |\n| minimal diffs for easy version control         | &check;   |                  | &check;  | &check;  |\n| insert code output anywhere in a document      | &check;   |                  | &check;  |          |\n| can divide code into incomplete snippets       | &check;   |                  | &check;  | &check;  |\n| support for literate programming               | &check;   |                  | &check;  |          |\n| compatible with any text editor                | &check;   |                  | &check;  | &check;  |\n\n&ast; One primary language from the Jupyter kernel.  The IPython kernel\nsupports additional languages via `%%script` magics.  There is no continuity\nbetween `%%script` cells, because each cell is executed in a separate process.\nSome magics, such as those provided by\n[PyJulia](https://pyjulia.readthedocs.io) and\n[rpy2](https://rpy2.readthedocs.io), provide more advanced capabilities.\n<br>\n\u2020 knitr only provides continuity between code chunks for R, and more recently\nPython and Julia.  Code chunks in other languages are executed individually\nin separate processes.\n<br>\n\u2021 Out-of-order execution is possible with R Markdown notebooks.\n\n<hr>\n\nThe table above summarizes Codebraid features in comparison with Jupyter\nnotebooks (without extensions), knitr (R Markdown), and Pweave, emphasizing\nCodebraid's unique features.  Here are some additional points to consider:\n\n*Jupyter notebooks* \u2014 Notebooks have a dedicated, browser-based graphical user\ninterface.  Jupyter kernels typically allow the code in a cell to be executed\nwithout re-executing any preceding code, providing superior interactivity.\nCodebraid has advantages for projects that are more focused on creating a\ndocument than on exploratory programming.\n\n*knitr* \u2014 R Markdown documents have a dedicated user interface in R Studio.\nknitr provides superior support for R, as well as significant Python and Julia\nsupport that includes R integration.  Codebraid offers continuity between code\nchunks for all supported languages, as well as multiple independent sessions\nper language.  It also provides unique options for displaying code and its\noutput.\n\n\n\n### More about key features\n\n*Easy debugging* \u2014 By default, stderr is shown automatically in the document\nwhenever there is an error, right next to the code that caused it.\n\n*Simple language support* \u2014 Codebraid supports Jupyter kernels.  It also has a\nbuilt-in system for executing code.  Adding support for a new language with\nthis system can take only a few minutes.  Just create a config file that tells\nCodebraid which program to run, which file extension to use, and how to write\nto stdout and stderr.  See\n[`languages/`](https://github.com/gpoore/codebraid/tree/master/codebraid/languages)\nfor examples.\n\n*No preprocessor* \u2014 Unlike many approaches to making code in Markdown\nexecutable, Codebraid is not a preprocessor.  Rather, Codebraid acts on the\nabstract syntax tree (AST) that Pandoc generates when parsing a document.\nPreprocessors often fail to disable commented-out code blocks because the\npreprocessor doesn't recognize Markdown comments.  Preprocessors can also fail\ndue to the finer points of Markdown parsing.  None of this is an issue for\nCodebraid, because Pandoc does the Markdown parsing.\n\n*No custom syntax* \u2014 Codebraid introduces no additional Markdown syntax.\nMaking a code block or inline code executable uses Pandoc's existing syntax\nfor defining code attributes.\n\n\n\n## Installation and requirements\n\n**Installation:**  `pip3 install codebraid` or `pip install codebraid`\n\nManual installation:  `python3 setup.py install` or `python setup.py install`\n\n**Requirements:**\n\n  * [Pandoc](http://pandoc.org/) 2.4+ (2.7.2+ recommended)\n  * Python 3.5+ with `setuptools`, and [`bespon`](https://bespon.org) 0.3\n    (`bespon` installation is typically managed by `pip`/`setup.py`)\n\n\n\n## Converting a document\n\nSimply run `codebraid pandoc <normal pandoc options>`.  Note that\n`--overwrite` is required for existing files.\n\n`codebraid` should typically be run in the same directory as the document, so\nthat the default working directory for code is the document directory.  Future\nreleases will allow customization of the working directory.\n\n\n## Caching\n\nBy default, code output is cached, and code is only re-executed when it is\nmodified.  The default cache location is a `_codebraid` directory in the\nworking directory (directory where `codebraid` is run, typically the document\ndirectory).  This can be modified using `--cache-dir`.  Multiple documents can\nshare a single cache location.  A cache directory can be synced between\ndifferent operating systems (such as Windows and Linux) while retaining full\nfunctionality so long as documents are in equivalent locations under the\nuser's home directory (as resolved by\n[`os.path.expanduser()`](https://docs.python.org/3/library/os.path.html#os.path.expanduser)).\n\nWhen multiple documents share the same cache location, each document will\nautomatically clean up its own unused, outdated files.  However, if a document\nis deleted or renamed, it may leave behind unused files in the cache, so it\nmay be worth manually deleting and regenerating the cache in those\ncircumstances.  Future cache enhancements should be able to detect all unused\nfiles, making this unnecessary.\n\nIf you are working with external data that changes, you should run `codebraid`\nwith `--no-cache` or delete the cache as necessary to prevent the cache from\nbecoming out of sync with your data.  Future releases will allow external\ndependencies to be specified so that caching will work correctly in these\nsituations.\n\n\n## Code options\n\n### Commands (Classes)\n\nCode is made executable by adding a Codebraid class to its\n[Pandoc attributes](http://pandoc.org/MANUAL.html#fenced-code-blocks).\nFor example, `` `code`{.python}` `` becomes\n`` `code`{.python .cb.run}` ``.\n\n* `.cb.code` \u2014 Insert code verbatim, but do not run it.  This is primarily\n  useful when combined with other features like naming and then copying code\n  chunks.\n\n* `.cb.expr` \u2014 Evaluate an expression and interpret the result as Markdown.\n  Only works with inline code.  This is not currently compatible with Jupyter\n  kernels.\n\n* `.cb.nb` \u2014 Execute code in notebook mode.  For inline code, this is\n  equivalent to `.cb.expr` with verbatim output unless a Jupyter kernel is\n  used, in which case rich output will be displayed.  For code blocks, this\n  inserts the code verbatim, followed by any printed output (stdout) verbatim.\n  If stderr exists, it is also inserted verbatim.  When a Jupyter kernel is\n  used, rich output is also displayed.\n\n* `.cb.paste` \u2014 Insert code and/or output copied from one or more named code\n  chunks.  The `copy` keyword is used to specify chunks to be copied.  This\n  does not execute any code.  Unless `show` is specified, display options are\n  inherited from the first copied code chunk.\n\n  If content is copied from multiple code chunks that are executed, all code\n  chunks must be in the same session and must be in sequential order without\n  any omitted chunks.  This ensures that what is displayed is always\n  consistent with what was executed.\n\n  If content is copied from another `cb.paste` code chunk, only a single code\n  chunk can be copied.  This reduces the indirection that is possible when\n  displaying the output of code that has been executed.  This restriction may\n  be removed in the future.\n\n* `.cb.run` \u2014 Run code and interpret any printed content (stdout) as Markdown.\n  Also insert stderr verbatim if it exists.  When a Jupyter kernel is used,\n  rich output is also displayed.\n\n### Keyword arguments\n\nPandoc code attribute syntax allows keyword arguments of the form `key=value`,\nwith spaces (*not* commas) separating subsequent keys.  `value` can be\nunquoted if it contains only letters and some symbols; otherwise, double\nquotation marks `\"value\"` are required.  For example,\n```\n{.python key1=value1 key2=value2}\n```\nCodebraid adds support for additional keyword arguments.  In some cases,\nmultiple keywords can be used for the same option.  This is primarily for\nPandoc compatibility.\n\n#### First chunk settings\n\nThese are only permitted for the first code chunk in a session (or the first\nchunk for a language, if a session is not specified and thus the default\nsession is in use).\n\n* `executable`={string} \u2014 Executable to use for running or compiling code,\n  instead of the default.  This only applies to Codebraid's built-in code\n  execution system.\n\n* `jupyter_kernel`={string} \u2014 Jupyter kernel to use for executing code instead\n  of Codebraid's built-in code execution system.  Multiple Jupyter kernels can\n  be used within a single document, and multiple sessions are possible per\n  kernel.  Except when otherwise specified, Jupyter kernels should be usable\n  just like the built-in code execution system.\n\n\n#### Execution\n\n* `complete`={`true`, `false`} \u2014 By default, code chunks must contain complete\n  units of code (function definitions, loops, expressions, and so forth). With\n  `complete=false`, this is not required.  Any stdout from code chunks with\n  `complete=false` is accumulated until the next code chunk with\n  `complete=true` (the default value), or until the end of the session,\n  whichever comes first.\n\n  Setting `complete` is incompatible with `outside_main=true`, since the\n  `complete` status of code chunks with `outside_main=true` is inferred\n  automatically.\n\n* `outside_main`={`true`, `false`} \u2014 This allows code chunks to overwrite the\n  Codebraid template code when code is executed with Codebraid's built-in code\n  execution system.  It is primarily useful for languages like Rust, in which\n  code is inserted by default into a `main()` template.  In that case, if a\n  session *starts* with one or more code chunks with `outside_main=true`,\n  these are used instead of the beginning of the `main()` template.\n  Similarly, if a session *ends* with one or more code chunks with\n  `outside_main=true`, these are used instead of the end of the `main()`\n  template.  If there are any code chunks in between that lack `outside_main`\n  (that is, default `outside_main=false`), then these will have their stdout\n  collected on a per-chunk basis like normal.  Having code chunks that lack\n  `outside_main` is not required; if there are none, the total accumulated\n  stdout for a session belongs to the last code chunk in the session.\n\n  `outside_main=true` is incompatible with explicitly setting `complete`.  The\n  `complete` status of code chunks with `outside_main=true` is inferred\n  automatically.\n\n* `session`={identifier-style string} \u2014 By default, all code for a given\n  language is executed in a single, shared session so that data and variables\n  persist between code chunks.  This allows code to be separated into multiple\n  independent sessions.  Session names must be Python-style identifiers.\n\n#### Display\n\n* `first_number`/`startFrom`/`start-from`/`start_from`={integer or `next`} \u2014\n  Specify the first line number for code when line numbers are displayed.\n  `next` means continue from the last code in the current session.\n\n* `hide`={`markup`, `copied_markup`, `code`, `stdout`, `stderr`, `expr`,\n  `rich_output`, `all`} \u2014 Hide some or all of the elements that are displayed\n  by default.  Elements can be combined.  For example, `hide=stdout+stderr`.\n  Note that `expr` only applies to `.cb.expr` or `.cb.nb` with inline code\n  using Codebraid's built-in code execution system, since only these evaluate\n  an expression.  `rich_output` is currently only relevant for Jupyter\n  kernels.\n\n* `hide_markup_keys`={key(s)} \u2014 Hide the specified code chunk attribute key(s)\n  in the Markdown source displayed via `markup` or `copied_markup`.  Multiple\n  keys can be specified via `hide_markup_keys=key1+key2`.\n\n  `hide_markup_keys` only applies to the code chunk in which it is used, to\n  determined the `markup` for that code chunk.  Thus, it only affects\n  `copied_markup` indirectly.\n\n* `line_numbers`/`numberLines`/`number-lines`/`number_lines`={`true`, `false`}\n  \u2014 Number code lines in code blocks.\n\n* `show`={`markup`, `copied_markup`, `code`, `stdout`, `stderr`, `expr`,\n  `rich_output`, `none`} \u2014 Override the elements that are displayed by\n  default.  `expr` only applies to `.cb.expr` and to `.cb.nb` with inline code\n  using Codebraid's built-in code execution system, since only these evaluate\n  an expression.  Elements can be combined.  For example, `show=code+stdout`.\n\n  Each element except `rich_output` can optionally specify a format from\n  `raw`, `verbatim`, or `verbatim_or_empty`.  For example,\n  `show=code:verbatim+stdout:raw`.\n\n    - `raw` means interpreted as Markdown.\n    - `verbatim` produces inline code or a code block, depending on context.\n      Nothing is produced if there is no content (for example, nothing in\n      stdout.)\n    - `verbatim_or_empty` produces inline code containing a single\n      non-breaking space or a code block containing a single empty line in the\n      event that there is no content.  It is useful when a placeholder is\n      desired, or a visual confirmation that there is indeed no output.\n\n  For `rich_output`, the format is specified as one or more abbreviations for\n  the mime types of the output to be displayed.  For example,\n  `rich_output:plain` will display `text/plain` output if it exists, and\n  otherwise nothing.  `rich_output:png|plain` will display a PNG image if it\n  exists, or otherwise will fall back to plain text if available.  The\n  following formats are currently supported:\n\n    - `latex` (corresponds to `text/latex`)\n    - `html` (`text/html`)\n    - `markdown` (`text/markdown`)\n    - `plain` (`text/plain`)\n    - `png` (`image/png`)\n    - `jpg` and `jpeg` (`image/jpeg`)\n    - `svg` (`image/svg+xml`)\n    - `pdf` (`application/pdf`)\n\n  `markup` displays the Markdown source for the inline code or code block.\n  Because the Markdown source is not available in the Pandoc AST but rather\n  must be recreated from it, the Markdown source displayed with `markup` may\n  use a different number of backticks, quote attribute values slightly\n  differently, or contain other insignificant differences from the original\n  document.\n\n  `copied_markup` displays the Markdown source for code chunks copied via\n  `copy`.\n\n  `expr` defaults to `raw` if a format is not specified.  `rich_output`\n  defaults to `latex|markdown|png|jpg|plain`.  All others default to\n  `verbatim`.\n\n#### Copying\n\n* `copy`={chunk name(s)} \u2014 Copy one or more named code chunks.  When `copy` is\n  used with a command like `.cb.run` that executes code, only the code is\n  copied, and it is executed as if it had been entered directly.  When `copy`\n  is used with `.cb.code`, only the code is copied and nothing is executed.\n  When `copy` is used with `.cb.paste`, both code and output are copied, and\n  nothing is executed.  Multiple code chunks may be copied; for example,\n  `copy=name1+name2`.  In that case, the code from all chunks is concatenated,\n  as is any output that is copied.  Because `copy` brings in code from other\n  code chunks, the actual content of a code block or inline code using `copy`\n  is discarded.  As a result, this must be empty, or a space or underscore can\n  be used as a placeholder.\n\n* `name`={identifier-style string} \u2014 Name a code chunk so that it can later be\n  copied by name.  Names must be Python-style identifiers.\n\n#### Including external files\n\n* `include_file`={path} \u2014 Include the specified file.  A leading `~/` or\n  `~<user>/` is expanded to the user's home directory under all operating\n  systems, including under Windows with both slashes and backslashes.\n\n  When `include_file` is used with a command like `.cb.run` that executes\n  code, the file is included and executed as part of the current session just\n  as if the file contents had been entered directly.  When `include_file` is\n  used with `.cb.code`, the file is included and displayed just as if it had\n  been entered directly.  Because `include_file` brings in code from another\n  file, the actual content of a code block or inline code using `include_file`\n  is discarded.  As a result, this must be empty, or a space or underscore can\n  be used as a placeholder.\n\n* `include_encoding`={encoding} \u2014 Encoding for included file.  The default\n  encoding is UTF-8.\n\n* `include_lines`={lines/line ranges} \u2014 Include the specified lines or line\n  ranges.  For example, `1-3,5,7-9,11-`.  Line numbers are one-indexed.  Line\n  ranges are inclusive, so `1-3` is `1` up to and including `3`.  If a range\n  ends with a hyphen, like `11-`, then everything is included from the line\n  through the end of the file.\n\n  Cannot be combined with other `include` options that specify what is to\n  be included.\n\n* `include_regex`={regex} \u2014 Include the first segment of the file that matches\n  the provided regular expression.\n\n  Keep in mind that Pandoc's key-value attributes evaluate backslash escapes\n  in values whether or not the values are quoted with double quotation marks,\n  so two levels of backslash-escaping are always necessary (one for Pandoc's\n  strings, one for the regex itself; there are no raw strings).  Regular\n  expressions use *multiline mode*, so `^`/`$` match the start/end of a line,\n  and `\\A`/`\\Z` can be used to match the start/end of the file.  Regular\n  expressions use *dotall mode*, so `.` matches anything including the newline\n  `\\n`; use `[^\\n]` when this is not desired.\n\n  Cannot be combined with other `include` options that specify what is to\n  be included.\n\n* `include_start_string`={string} \u2014 Include everything from the first\n  occurrence of this string onward.\n\n  Can only be combined with other `include` options that specify the end of\n  what is to be included.\n\n* `include_start_regex`={regex} \u2014 Include everything from the first\n  match of this regex onward.\n\n  Can only be combined with other `include` options that specify the end of\n  what is to be included.  See `include_regex` for notes on regex usage.\n\n* `include_after_string`={string} \u2014 Include everything after the first\n  occurrence of this string onward.\n\n  Can only be combined with other `include` options that specify the end of\n  what is to be included.\n\n* `include_after_regex`={regex} \u2014 Include everything after the first\n  match of this regex onward.\n\n  Can only be combined with other `include` options that specify the end of\n  what is to be included.  See `include_regex` for notes on regex usage.\n\n* `include_before_string`={string} \u2014 Include everything before the first\n  occurrence of this string.\n\n  Can only be combined with other `include` options that specify the start of\n  what is to be included.  If the start is specified, then the first\n  occurrence after this point is used, rather than the first occurrence in the\n  overall file.\n\n* `include_before_regex`={regex} \u2014 Include everything before the first\n  match of this regex.\n\n  Can only be combined with other `include` options that specify the start of\n  what is to be included.  If the start is specified, then the first match\n  after this point is used, rather than the first match in the overall file.\n  See `include_regex` for notes on regex usage.\n\n* `include_end_string`={string} \u2014 Include everything through the first\n  occurrence of this string.\n\n  Can only be combined with other `include` options that specify the start of\n  what is to be included.  If the start is specified, then the first\n  occurrence after this point is used, rather than the first occurrence in the\n  overall file.\n\n* `include_end_regex`={regex} \u2014 Include everything through the first\n  match of this regex.\n\n  Can only be combined with other `include` options that specify the start of\n  what is to be included.  If the start is specified, then the first match\n  after this point is used, rather than the first match in the overall file.\n  See `include_regex` for notes on regex usage.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/gpoore/codebraid", "keywords": "dynamic documents,reproducible research,notebook,markdown,pandoc,LaTeX", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "codebraid", "package_url": "https://pypi.org/project/codebraid/", "platform": "", "project_url": "https://pypi.org/project/codebraid/", "project_urls": {"Homepage": "http://github.com/gpoore/codebraid"}, "release_url": "https://pypi.org/project/codebraid/0.4.0/", "requires_dist": ["bespon (>=0.3)"], "requires_python": ">=3.5", "summary": "Live code in Pandoc Markdown", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Codebraid \u2013 live code in Pandoc Markdown</h1>\n<p>Codebraid is a Python program that enables executable code in\n<a href=\"http://pandoc.org/\" rel=\"nofollow\">Pandoc</a> Markdown documents.  Using Codebraid can be as\nsimple as adding a class to your code blocks' attributes, and then running\n<code>codebraid</code> rather than <code>pandoc</code> to convert your document from Markdown to\nanother format.  <code>codebraid</code> supports almost all of <code>pandoc</code>'s options and\npasses them to <code>pandoc</code> internally.</p>\n<p>Codebraid provides two options for executing code.  It includes a built-in\ncode execution system that currently supports <strong>Python 3.5+</strong>, <strong>Julia</strong>,\n<strong>Rust</strong>, <strong>R</strong>, <strong>Bash</strong>, and <strong>JavaScript</strong>.  Code can also be executed\nusing <strong>Jupyter kernels</strong>, with support for rich output like plots.</p>\n<p><strong>Development:</strong>  <a href=\"https://github.com/gpoore/codebraid\" rel=\"nofollow\">https://github.com/gpoore/codebraid</a></p>\n<p>View example HTML output, or see the Markdown source or raw HTML (the Python\nand Rust examples demonstrate more advanced features at the end):</p>\n<ul>\n<li><a href=\"https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/python.html\" rel=\"nofollow\">Python example</a>\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/python.cbmd\" rel=\"nofollow\">Pandoc Markdown source</a>]\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/python.html\" rel=\"nofollow\">raw HTML</a>]</li>\n<li><a href=\"https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/jupyter.html\" rel=\"nofollow\">Jupyter example</a>\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/jupyter.cbmd\" rel=\"nofollow\">Pandoc Markdown source</a>]\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/jupyter.html\" rel=\"nofollow\">raw HTML</a>]</li>\n<li><a href=\"https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/rust.html\" rel=\"nofollow\">Rust example</a>\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/rust.cbmd\" rel=\"nofollow\">Pandoc Markdown source</a>]\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/rust.html\" rel=\"nofollow\">raw HTML</a>]</li>\n<li><a href=\"https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/julia.html\" rel=\"nofollow\">Julia example</a>\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/julia.cbmd\" rel=\"nofollow\">Pandoc Markdown source</a>]\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/julia.html\" rel=\"nofollow\">raw HTML</a>]</li>\n<li><a href=\"https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/R.html\" rel=\"nofollow\">R example</a>\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/R.cbmd\" rel=\"nofollow\">Pandoc Markdown source</a>]\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/R.html\" rel=\"nofollow\">raw HTML</a>]</li>\n<li><a href=\"https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/bash.html\" rel=\"nofollow\">Bash example</a>\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/bash.cbmd\" rel=\"nofollow\">Pandoc Markdown source</a>]\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/bash.html\" rel=\"nofollow\">raw HTML</a>]</li>\n<li><a href=\"https://htmlpreview.github.com/?https://github.com/gpoore/codebraid/blob/master/examples/javascript.html\" rel=\"nofollow\">JavaScript example</a>\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/javascript.cbmd\" rel=\"nofollow\">Pandoc Markdown source</a>]\n[<a href=\"https://github.com/gpoore/codebraid/blob/master/examples/javascript.html\" rel=\"nofollow\">raw HTML</a>]</li>\n</ul>\n<h2>Simple example</h2>\n<p>Markdown source <code>test.md</code>:</p>\n<pre>```{.python .cb.run}\nvar = 'Hello from Python!'\nvar += ' $2^8 = {}$'.format(2**8)\n```\n\n```{.python .cb.run}\nprint(var)\n```\n</pre>\n<p>Run <code>codebraid</code> (to save the output, add something like <code>-o test_out.md</code>, and\nadd <code>--overwrite</code> if it already exists):</p>\n<pre>codebraid pandoc --from markdown --to markdown test.md\n</pre>\n<p>Output:</p>\n<pre>Hello from Python! $2^8 = 256$\n</pre>\n<p>As this example illustrates, variables persist between code blocks; by\ndefault, code is executed within a single session.  Code output is also cached\nby default so that code is only re-executed when modified.</p>\n<h2>Features</h2>\n<h3>Comparison with <a href=\"https://jupyter.org/\" rel=\"nofollow\">Jupyter</a>, <a href=\"https://yihui.name/knitr/\" rel=\"nofollow\">knitr</a>, and <a href=\"http://mpastell.com/pweave/\" rel=\"nofollow\">Pweave</a></h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Codebraid</th>\n<th>Jupyter Notebook</th>\n<th>knitr</th>\n<th>Pweave</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>multiple programming languages per document</td>\n<td>\u2713</td>\n<td>\u2713*</td>\n<td>\u2713\u2020</td>\n<td>\u2713*</td>\n</tr>\n<tr>\n<td>multiple independent sessions per language</td>\n<td>\u2713</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>inline code execution within paragraphs</td>\n<td>\u2713</td>\n<td></td>\n<td>\u2713</td>\n<td>\u2713</td>\n</tr>\n<tr>\n<td>no out-of-order code execution</td>\n<td>\u2713</td>\n<td></td>\n<td>\u2713\u2021</td>\n<td>\u2713</td>\n</tr>\n<tr>\n<td>no markdown preprocessor or custom syntax</td>\n<td>\u2713</td>\n<td>\u2713</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>minimal diffs for easy version control</td>\n<td>\u2713</td>\n<td></td>\n<td>\u2713</td>\n<td>\u2713</td>\n</tr>\n<tr>\n<td>insert code output anywhere in a document</td>\n<td>\u2713</td>\n<td></td>\n<td>\u2713</td>\n<td></td>\n</tr>\n<tr>\n<td>can divide code into incomplete snippets</td>\n<td>\u2713</td>\n<td></td>\n<td>\u2713</td>\n<td>\u2713</td>\n</tr>\n<tr>\n<td>support for literate programming</td>\n<td>\u2713</td>\n<td></td>\n<td>\u2713</td>\n<td></td>\n</tr>\n<tr>\n<td>compatible with any text editor</td>\n<td>\u2713</td>\n<td></td>\n<td>\u2713</td>\n<td>\u2713</td>\n</tr></tbody></table>\n<p>* One primary language from the Jupyter kernel.  The IPython kernel\nsupports additional languages via <code>%%script</code> magics.  There is no continuity\nbetween <code>%%script</code> cells, because each cell is executed in a separate process.\nSome magics, such as those provided by\n<a href=\"https://pyjulia.readthedocs.io\" rel=\"nofollow\">PyJulia</a> and\n<a href=\"https://rpy2.readthedocs.io\" rel=\"nofollow\">rpy2</a>, provide more advanced capabilities.\n<br>\n\u2020 knitr only provides continuity between code chunks for R, and more recently\nPython and Julia.  Code chunks in other languages are executed individually\nin separate processes.\n<br>\n\u2021 Out-of-order execution is possible with R Markdown notebooks.</p>\n<hr>\n<p>The table above summarizes Codebraid features in comparison with Jupyter\nnotebooks (without extensions), knitr (R Markdown), and Pweave, emphasizing\nCodebraid's unique features.  Here are some additional points to consider:</p>\n<p><em>Jupyter notebooks</em> \u2014 Notebooks have a dedicated, browser-based graphical user\ninterface.  Jupyter kernels typically allow the code in a cell to be executed\nwithout re-executing any preceding code, providing superior interactivity.\nCodebraid has advantages for projects that are more focused on creating a\ndocument than on exploratory programming.</p>\n<p><em>knitr</em> \u2014 R Markdown documents have a dedicated user interface in R Studio.\nknitr provides superior support for R, as well as significant Python and Julia\nsupport that includes R integration.  Codebraid offers continuity between code\nchunks for all supported languages, as well as multiple independent sessions\nper language.  It also provides unique options for displaying code and its\noutput.</p>\n<h3>More about key features</h3>\n<p><em>Easy debugging</em> \u2014 By default, stderr is shown automatically in the document\nwhenever there is an error, right next to the code that caused it.</p>\n<p><em>Simple language support</em> \u2014 Codebraid supports Jupyter kernels.  It also has a\nbuilt-in system for executing code.  Adding support for a new language with\nthis system can take only a few minutes.  Just create a config file that tells\nCodebraid which program to run, which file extension to use, and how to write\nto stdout and stderr.  See\n<a href=\"https://github.com/gpoore/codebraid/tree/master/codebraid/languages\" rel=\"nofollow\"><code>languages/</code></a>\nfor examples.</p>\n<p><em>No preprocessor</em> \u2014 Unlike many approaches to making code in Markdown\nexecutable, Codebraid is not a preprocessor.  Rather, Codebraid acts on the\nabstract syntax tree (AST) that Pandoc generates when parsing a document.\nPreprocessors often fail to disable commented-out code blocks because the\npreprocessor doesn't recognize Markdown comments.  Preprocessors can also fail\ndue to the finer points of Markdown parsing.  None of this is an issue for\nCodebraid, because Pandoc does the Markdown parsing.</p>\n<p><em>No custom syntax</em> \u2014 Codebraid introduces no additional Markdown syntax.\nMaking a code block or inline code executable uses Pandoc's existing syntax\nfor defining code attributes.</p>\n<h2>Installation and requirements</h2>\n<p><strong>Installation:</strong>  <code>pip3 install codebraid</code> or <code>pip install codebraid</code></p>\n<p>Manual installation:  <code>python3 setup.py install</code> or <code>python setup.py install</code></p>\n<p><strong>Requirements:</strong></p>\n<ul>\n<li><a href=\"http://pandoc.org/\" rel=\"nofollow\">Pandoc</a> 2.4+ (2.7.2+ recommended)</li>\n<li>Python 3.5+ with <code>setuptools</code>, and <a href=\"https://bespon.org\" rel=\"nofollow\"><code>bespon</code></a> 0.3\n(<code>bespon</code> installation is typically managed by <code>pip</code>/<code>setup.py</code>)</li>\n</ul>\n<h2>Converting a document</h2>\n<p>Simply run <code>codebraid pandoc &lt;normal pandoc options&gt;</code>.  Note that\n<code>--overwrite</code> is required for existing files.</p>\n<p><code>codebraid</code> should typically be run in the same directory as the document, so\nthat the default working directory for code is the document directory.  Future\nreleases will allow customization of the working directory.</p>\n<h2>Caching</h2>\n<p>By default, code output is cached, and code is only re-executed when it is\nmodified.  The default cache location is a <code>_codebraid</code> directory in the\nworking directory (directory where <code>codebraid</code> is run, typically the document\ndirectory).  This can be modified using <code>--cache-dir</code>.  Multiple documents can\nshare a single cache location.  A cache directory can be synced between\ndifferent operating systems (such as Windows and Linux) while retaining full\nfunctionality so long as documents are in equivalent locations under the\nuser's home directory (as resolved by\n<a href=\"https://docs.python.org/3/library/os.path.html#os.path.expanduser\" rel=\"nofollow\"><code>os.path.expanduser()</code></a>).</p>\n<p>When multiple documents share the same cache location, each document will\nautomatically clean up its own unused, outdated files.  However, if a document\nis deleted or renamed, it may leave behind unused files in the cache, so it\nmay be worth manually deleting and regenerating the cache in those\ncircumstances.  Future cache enhancements should be able to detect all unused\nfiles, making this unnecessary.</p>\n<p>If you are working with external data that changes, you should run <code>codebraid</code>\nwith <code>--no-cache</code> or delete the cache as necessary to prevent the cache from\nbecoming out of sync with your data.  Future releases will allow external\ndependencies to be specified so that caching will work correctly in these\nsituations.</p>\n<h2>Code options</h2>\n<h3>Commands (Classes)</h3>\n<p>Code is made executable by adding a Codebraid class to its\n<a href=\"http://pandoc.org/MANUAL.html#fenced-code-blocks\" rel=\"nofollow\">Pandoc attributes</a>.\nFor example, <code>`code`{.python}`</code> becomes\n<code>`code`{.python .cb.run}`</code>.</p>\n<ul>\n<li>\n<p><code>.cb.code</code> \u2014 Insert code verbatim, but do not run it.  This is primarily\nuseful when combined with other features like naming and then copying code\nchunks.</p>\n</li>\n<li>\n<p><code>.cb.expr</code> \u2014 Evaluate an expression and interpret the result as Markdown.\nOnly works with inline code.  This is not currently compatible with Jupyter\nkernels.</p>\n</li>\n<li>\n<p><code>.cb.nb</code> \u2014 Execute code in notebook mode.  For inline code, this is\nequivalent to <code>.cb.expr</code> with verbatim output unless a Jupyter kernel is\nused, in which case rich output will be displayed.  For code blocks, this\ninserts the code verbatim, followed by any printed output (stdout) verbatim.\nIf stderr exists, it is also inserted verbatim.  When a Jupyter kernel is\nused, rich output is also displayed.</p>\n</li>\n<li>\n<p><code>.cb.paste</code> \u2014 Insert code and/or output copied from one or more named code\nchunks.  The <code>copy</code> keyword is used to specify chunks to be copied.  This\ndoes not execute any code.  Unless <code>show</code> is specified, display options are\ninherited from the first copied code chunk.</p>\n<p>If content is copied from multiple code chunks that are executed, all code\nchunks must be in the same session and must be in sequential order without\nany omitted chunks.  This ensures that what is displayed is always\nconsistent with what was executed.</p>\n<p>If content is copied from another <code>cb.paste</code> code chunk, only a single code\nchunk can be copied.  This reduces the indirection that is possible when\ndisplaying the output of code that has been executed.  This restriction may\nbe removed in the future.</p>\n</li>\n<li>\n<p><code>.cb.run</code> \u2014 Run code and interpret any printed content (stdout) as Markdown.\nAlso insert stderr verbatim if it exists.  When a Jupyter kernel is used,\nrich output is also displayed.</p>\n</li>\n</ul>\n<h3>Keyword arguments</h3>\n<p>Pandoc code attribute syntax allows keyword arguments of the form <code>key=value</code>,\nwith spaces (<em>not</em> commas) separating subsequent keys.  <code>value</code> can be\nunquoted if it contains only letters and some symbols; otherwise, double\nquotation marks <code>\"value\"</code> are required.  For example,</p>\n<pre><code>{.python key1=value1 key2=value2}\n</code></pre>\n<p>Codebraid adds support for additional keyword arguments.  In some cases,\nmultiple keywords can be used for the same option.  This is primarily for\nPandoc compatibility.</p>\n<h4>First chunk settings</h4>\n<p>These are only permitted for the first code chunk in a session (or the first\nchunk for a language, if a session is not specified and thus the default\nsession is in use).</p>\n<ul>\n<li>\n<p><code>executable</code>={string} \u2014 Executable to use for running or compiling code,\ninstead of the default.  This only applies to Codebraid's built-in code\nexecution system.</p>\n</li>\n<li>\n<p><code>jupyter_kernel</code>={string} \u2014 Jupyter kernel to use for executing code instead\nof Codebraid's built-in code execution system.  Multiple Jupyter kernels can\nbe used within a single document, and multiple sessions are possible per\nkernel.  Except when otherwise specified, Jupyter kernels should be usable\njust like the built-in code execution system.</p>\n</li>\n</ul>\n<h4>Execution</h4>\n<ul>\n<li>\n<p><code>complete</code>={<code>true</code>, <code>false</code>} \u2014 By default, code chunks must contain complete\nunits of code (function definitions, loops, expressions, and so forth). With\n<code>complete=false</code>, this is not required.  Any stdout from code chunks with\n<code>complete=false</code> is accumulated until the next code chunk with\n<code>complete=true</code> (the default value), or until the end of the session,\nwhichever comes first.</p>\n<p>Setting <code>complete</code> is incompatible with <code>outside_main=true</code>, since the\n<code>complete</code> status of code chunks with <code>outside_main=true</code> is inferred\nautomatically.</p>\n</li>\n<li>\n<p><code>outside_main</code>={<code>true</code>, <code>false</code>} \u2014 This allows code chunks to overwrite the\nCodebraid template code when code is executed with Codebraid's built-in code\nexecution system.  It is primarily useful for languages like Rust, in which\ncode is inserted by default into a <code>main()</code> template.  In that case, if a\nsession <em>starts</em> with one or more code chunks with <code>outside_main=true</code>,\nthese are used instead of the beginning of the <code>main()</code> template.\nSimilarly, if a session <em>ends</em> with one or more code chunks with\n<code>outside_main=true</code>, these are used instead of the end of the <code>main()</code>\ntemplate.  If there are any code chunks in between that lack <code>outside_main</code>\n(that is, default <code>outside_main=false</code>), then these will have their stdout\ncollected on a per-chunk basis like normal.  Having code chunks that lack\n<code>outside_main</code> is not required; if there are none, the total accumulated\nstdout for a session belongs to the last code chunk in the session.</p>\n<p><code>outside_main=true</code> is incompatible with explicitly setting <code>complete</code>.  The\n<code>complete</code> status of code chunks with <code>outside_main=true</code> is inferred\nautomatically.</p>\n</li>\n<li>\n<p><code>session</code>={identifier-style string} \u2014 By default, all code for a given\nlanguage is executed in a single, shared session so that data and variables\npersist between code chunks.  This allows code to be separated into multiple\nindependent sessions.  Session names must be Python-style identifiers.</p>\n</li>\n</ul>\n<h4>Display</h4>\n<ul>\n<li>\n<p><code>first_number</code>/<code>startFrom</code>/<code>start-from</code>/<code>start_from</code>={integer or <code>next</code>} \u2014\nSpecify the first line number for code when line numbers are displayed.\n<code>next</code> means continue from the last code in the current session.</p>\n</li>\n<li>\n<p><code>hide</code>={<code>markup</code>, <code>copied_markup</code>, <code>code</code>, <code>stdout</code>, <code>stderr</code>, <code>expr</code>,\n<code>rich_output</code>, <code>all</code>} \u2014 Hide some or all of the elements that are displayed\nby default.  Elements can be combined.  For example, <code>hide=stdout+stderr</code>.\nNote that <code>expr</code> only applies to <code>.cb.expr</code> or <code>.cb.nb</code> with inline code\nusing Codebraid's built-in code execution system, since only these evaluate\nan expression.  <code>rich_output</code> is currently only relevant for Jupyter\nkernels.</p>\n</li>\n<li>\n<p><code>hide_markup_keys</code>={key(s)} \u2014 Hide the specified code chunk attribute key(s)\nin the Markdown source displayed via <code>markup</code> or <code>copied_markup</code>.  Multiple\nkeys can be specified via <code>hide_markup_keys=key1+key2</code>.</p>\n<p><code>hide_markup_keys</code> only applies to the code chunk in which it is used, to\ndetermined the <code>markup</code> for that code chunk.  Thus, it only affects\n<code>copied_markup</code> indirectly.</p>\n</li>\n<li>\n<p><code>line_numbers</code>/<code>numberLines</code>/<code>number-lines</code>/<code>number_lines</code>={<code>true</code>, <code>false</code>}\n\u2014 Number code lines in code blocks.</p>\n</li>\n<li>\n<p><code>show</code>={<code>markup</code>, <code>copied_markup</code>, <code>code</code>, <code>stdout</code>, <code>stderr</code>, <code>expr</code>,\n<code>rich_output</code>, <code>none</code>} \u2014 Override the elements that are displayed by\ndefault.  <code>expr</code> only applies to <code>.cb.expr</code> and to <code>.cb.nb</code> with inline code\nusing Codebraid's built-in code execution system, since only these evaluate\nan expression.  Elements can be combined.  For example, <code>show=code+stdout</code>.</p>\n<p>Each element except <code>rich_output</code> can optionally specify a format from\n<code>raw</code>, <code>verbatim</code>, or <code>verbatim_or_empty</code>.  For example,\n<code>show=code:verbatim+stdout:raw</code>.</p>\n<ul>\n<li><code>raw</code> means interpreted as Markdown.</li>\n<li><code>verbatim</code> produces inline code or a code block, depending on context.\nNothing is produced if there is no content (for example, nothing in\nstdout.)</li>\n<li><code>verbatim_or_empty</code> produces inline code containing a single\nnon-breaking space or a code block containing a single empty line in the\nevent that there is no content.  It is useful when a placeholder is\ndesired, or a visual confirmation that there is indeed no output.</li>\n</ul>\n<p>For <code>rich_output</code>, the format is specified as one or more abbreviations for\nthe mime types of the output to be displayed.  For example,\n<code>rich_output:plain</code> will display <code>text/plain</code> output if it exists, and\notherwise nothing.  <code>rich_output:png|plain</code> will display a PNG image if it\nexists, or otherwise will fall back to plain text if available.  The\nfollowing formats are currently supported:</p>\n<ul>\n<li><code>latex</code> (corresponds to <code>text/latex</code>)</li>\n<li><code>html</code> (<code>text/html</code>)</li>\n<li><code>markdown</code> (<code>text/markdown</code>)</li>\n<li><code>plain</code> (<code>text/plain</code>)</li>\n<li><code>png</code> (<code>image/png</code>)</li>\n<li><code>jpg</code> and <code>jpeg</code> (<code>image/jpeg</code>)</li>\n<li><code>svg</code> (<code>image/svg+xml</code>)</li>\n<li><code>pdf</code> (<code>application/pdf</code>)</li>\n</ul>\n<p><code>markup</code> displays the Markdown source for the inline code or code block.\nBecause the Markdown source is not available in the Pandoc AST but rather\nmust be recreated from it, the Markdown source displayed with <code>markup</code> may\nuse a different number of backticks, quote attribute values slightly\ndifferently, or contain other insignificant differences from the original\ndocument.</p>\n<p><code>copied_markup</code> displays the Markdown source for code chunks copied via\n<code>copy</code>.</p>\n<p><code>expr</code> defaults to <code>raw</code> if a format is not specified.  <code>rich_output</code>\ndefaults to <code>latex|markdown|png|jpg|plain</code>.  All others default to\n<code>verbatim</code>.</p>\n</li>\n</ul>\n<h4>Copying</h4>\n<ul>\n<li>\n<p><code>copy</code>={chunk name(s)} \u2014 Copy one or more named code chunks.  When <code>copy</code> is\nused with a command like <code>.cb.run</code> that executes code, only the code is\ncopied, and it is executed as if it had been entered directly.  When <code>copy</code>\nis used with <code>.cb.code</code>, only the code is copied and nothing is executed.\nWhen <code>copy</code> is used with <code>.cb.paste</code>, both code and output are copied, and\nnothing is executed.  Multiple code chunks may be copied; for example,\n<code>copy=name1+name2</code>.  In that case, the code from all chunks is concatenated,\nas is any output that is copied.  Because <code>copy</code> brings in code from other\ncode chunks, the actual content of a code block or inline code using <code>copy</code>\nis discarded.  As a result, this must be empty, or a space or underscore can\nbe used as a placeholder.</p>\n</li>\n<li>\n<p><code>name</code>={identifier-style string} \u2014 Name a code chunk so that it can later be\ncopied by name.  Names must be Python-style identifiers.</p>\n</li>\n</ul>\n<h4>Including external files</h4>\n<ul>\n<li>\n<p><code>include_file</code>={path} \u2014 Include the specified file.  A leading <code>~/</code> or\n<code>~&lt;user&gt;/</code> is expanded to the user's home directory under all operating\nsystems, including under Windows with both slashes and backslashes.</p>\n<p>When <code>include_file</code> is used with a command like <code>.cb.run</code> that executes\ncode, the file is included and executed as part of the current session just\nas if the file contents had been entered directly.  When <code>include_file</code> is\nused with <code>.cb.code</code>, the file is included and displayed just as if it had\nbeen entered directly.  Because <code>include_file</code> brings in code from another\nfile, the actual content of a code block or inline code using <code>include_file</code>\nis discarded.  As a result, this must be empty, or a space or underscore can\nbe used as a placeholder.</p>\n</li>\n<li>\n<p><code>include_encoding</code>={encoding} \u2014 Encoding for included file.  The default\nencoding is UTF-8.</p>\n</li>\n<li>\n<p><code>include_lines</code>={lines/line ranges} \u2014 Include the specified lines or line\nranges.  For example, <code>1-3,5,7-9,11-</code>.  Line numbers are one-indexed.  Line\nranges are inclusive, so <code>1-3</code> is <code>1</code> up to and including <code>3</code>.  If a range\nends with a hyphen, like <code>11-</code>, then everything is included from the line\nthrough the end of the file.</p>\n<p>Cannot be combined with other <code>include</code> options that specify what is to\nbe included.</p>\n</li>\n<li>\n<p><code>include_regex</code>={regex} \u2014 Include the first segment of the file that matches\nthe provided regular expression.</p>\n<p>Keep in mind that Pandoc's key-value attributes evaluate backslash escapes\nin values whether or not the values are quoted with double quotation marks,\nso two levels of backslash-escaping are always necessary (one for Pandoc's\nstrings, one for the regex itself; there are no raw strings).  Regular\nexpressions use <em>multiline mode</em>, so <code>^</code>/<code>$</code> match the start/end of a line,\nand <code>\\A</code>/<code>\\Z</code> can be used to match the start/end of the file.  Regular\nexpressions use <em>dotall mode</em>, so <code>.</code> matches anything including the newline\n<code>\\n</code>; use <code>[^\\n]</code> when this is not desired.</p>\n<p>Cannot be combined with other <code>include</code> options that specify what is to\nbe included.</p>\n</li>\n<li>\n<p><code>include_start_string</code>={string} \u2014 Include everything from the first\noccurrence of this string onward.</p>\n<p>Can only be combined with other <code>include</code> options that specify the end of\nwhat is to be included.</p>\n</li>\n<li>\n<p><code>include_start_regex</code>={regex} \u2014 Include everything from the first\nmatch of this regex onward.</p>\n<p>Can only be combined with other <code>include</code> options that specify the end of\nwhat is to be included.  See <code>include_regex</code> for notes on regex usage.</p>\n</li>\n<li>\n<p><code>include_after_string</code>={string} \u2014 Include everything after the first\noccurrence of this string onward.</p>\n<p>Can only be combined with other <code>include</code> options that specify the end of\nwhat is to be included.</p>\n</li>\n<li>\n<p><code>include_after_regex</code>={regex} \u2014 Include everything after the first\nmatch of this regex onward.</p>\n<p>Can only be combined with other <code>include</code> options that specify the end of\nwhat is to be included.  See <code>include_regex</code> for notes on regex usage.</p>\n</li>\n<li>\n<p><code>include_before_string</code>={string} \u2014 Include everything before the first\noccurrence of this string.</p>\n<p>Can only be combined with other <code>include</code> options that specify the start of\nwhat is to be included.  If the start is specified, then the first\noccurrence after this point is used, rather than the first occurrence in the\noverall file.</p>\n</li>\n<li>\n<p><code>include_before_regex</code>={regex} \u2014 Include everything before the first\nmatch of this regex.</p>\n<p>Can only be combined with other <code>include</code> options that specify the start of\nwhat is to be included.  If the start is specified, then the first match\nafter this point is used, rather than the first match in the overall file.\nSee <code>include_regex</code> for notes on regex usage.</p>\n</li>\n<li>\n<p><code>include_end_string</code>={string} \u2014 Include everything through the first\noccurrence of this string.</p>\n<p>Can only be combined with other <code>include</code> options that specify the start of\nwhat is to be included.  If the start is specified, then the first\noccurrence after this point is used, rather than the first occurrence in the\noverall file.</p>\n</li>\n<li>\n<p><code>include_end_regex</code>={regex} \u2014 Include everything through the first\nmatch of this regex.</p>\n<p>Can only be combined with other <code>include</code> options that specify the start of\nwhat is to be included.  If the start is specified, then the first match\nafter this point is used, rather than the first match in the overall file.\nSee <code>include_regex</code> for notes on regex usage.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 5514029, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ce371c9477e358a19d349515e00314ed", "sha256": "7a4e55a5abf5846f4f62c5b0364f5c1d2d0886328ce1d2a3a1ce743ef906de6c"}, "downloads": -1, "filename": "codebraid-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ce371c9477e358a19d349515e00314ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 36437, "upload_time": "2019-02-16T03:17:53", "upload_time_iso_8601": "2019-02-16T03:17:53.166856Z", "url": "https://files.pythonhosted.org/packages/6d/8b/034cc399cf279f09c8d30061fdab3770dba76e079731538b2cb3a65718b8/codebraid-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "790fb149db5529f7dce77a9408e6a372", "sha256": "b04fddf9abf440d22cd69f2c53cd44a04762b50ca8c1f4d7f1c5e41230d3f8fc"}, "downloads": -1, "filename": "codebraid-0.1.0.tar.gz", "has_sig": false, "md5_digest": "790fb149db5529f7dce77a9408e6a372", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 34202, "upload_time": "2019-02-16T03:17:55", "upload_time_iso_8601": "2019-02-16T03:17:55.632543Z", "url": "https://files.pythonhosted.org/packages/06/01/79afe963485b934a625509ee4a8bb926381129bc93aac32a0fb93886bf2c/codebraid-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e935d043cef7c731b8bcc3ea83083069", "sha256": "f56aa18d330b84be4488b745936a886ba3537e699dfe100359561f286994245b"}, "downloads": -1, "filename": "codebraid-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e935d043cef7c731b8bcc3ea83083069", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 42519, "upload_time": "2019-02-25T17:35:00", "upload_time_iso_8601": "2019-02-25T17:35:00.557937Z", "url": "https://files.pythonhosted.org/packages/55/1f/5661bc66ca5bc0362299be29ceaebde6e8e023dc546ad7e6b25a262f08a8/codebraid-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b586577ab85f13b87d6677b4c13a7286", "sha256": "e8984bacaf54a9645056a979f647bbda2411a66c143f34ae5a0492da5a73c08b"}, "downloads": -1, "filename": "codebraid-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b586577ab85f13b87d6677b4c13a7286", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 41911, "upload_time": "2019-02-25T17:35:02", "upload_time_iso_8601": "2019-02-25T17:35:02.465819Z", "url": "https://files.pythonhosted.org/packages/5b/b0/79a5a6d420c513c15d691cab2f7746e56b63439b110548910a2f37b33f73/codebraid-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "d97a298a6d289ba5801ff5e83fd3d187", "sha256": "c45cd81bb56f6930ace447d0040f63ab6ee41505d9ff891e238db2d584ff5c78"}, "downloads": -1, "filename": "codebraid-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d97a298a6d289ba5801ff5e83fd3d187", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 49024, "upload_time": "2019-05-19T20:28:41", "upload_time_iso_8601": "2019-05-19T20:28:41.415201Z", "url": "https://files.pythonhosted.org/packages/52/21/df2f9c0399c68a6d03d947153f1b5f086dc335ef69537da0f6028455d001/codebraid-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6dd15e226e47396542393d6477f15a9", "sha256": "b89836f11b8ed13bac6d444052b1c2dfa444775976fa670a24de43e2b0944d6b"}, "downloads": -1, "filename": "codebraid-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a6dd15e226e47396542393d6477f15a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 50838, "upload_time": "2019-05-19T20:28:43", "upload_time_iso_8601": "2019-05-19T20:28:43.607448Z", "url": "https://files.pythonhosted.org/packages/20/fd/d5a8588f17786e1347a57925b0f46d8a0a8064698c2769dd64eb77a491a3/codebraid-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "7ef814f20a609010e88949c0554b82bb", "sha256": "b733f4ebf191b31a8a41e035b09166cb6c527a1b736e48dc7255022f21fa35c1"}, "downloads": -1, "filename": "codebraid-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7ef814f20a609010e88949c0554b82bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 60081, "upload_time": "2019-07-10T21:19:52", "upload_time_iso_8601": "2019-07-10T21:19:52.517551Z", "url": "https://files.pythonhosted.org/packages/85/8e/957d6239c6436f2120586fce7240575bb603678a78d1be8b1b0173d7a655/codebraid-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81752fe1890ca09e260d2d9eca90103c", "sha256": "c952fd144063b1baedfc69a7dee8ff0fced428d54e42a6942912494a5c9da498"}, "downloads": -1, "filename": "codebraid-0.4.0.tar.gz", "has_sig": false, "md5_digest": "81752fe1890ca09e260d2d9eca90103c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 65081, "upload_time": "2019-07-10T21:19:54", "upload_time_iso_8601": "2019-07-10T21:19:54.218665Z", "url": "https://files.pythonhosted.org/packages/ad/75/097cb0cd2b70c5385d0fbc4fe1b5033e609dcc861cea739494cfd6b0edb2/codebraid-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7ef814f20a609010e88949c0554b82bb", "sha256": "b733f4ebf191b31a8a41e035b09166cb6c527a1b736e48dc7255022f21fa35c1"}, "downloads": -1, "filename": "codebraid-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7ef814f20a609010e88949c0554b82bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 60081, "upload_time": "2019-07-10T21:19:52", "upload_time_iso_8601": "2019-07-10T21:19:52.517551Z", "url": "https://files.pythonhosted.org/packages/85/8e/957d6239c6436f2120586fce7240575bb603678a78d1be8b1b0173d7a655/codebraid-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81752fe1890ca09e260d2d9eca90103c", "sha256": "c952fd144063b1baedfc69a7dee8ff0fced428d54e42a6942912494a5c9da498"}, "downloads": -1, "filename": "codebraid-0.4.0.tar.gz", "has_sig": false, "md5_digest": "81752fe1890ca09e260d2d9eca90103c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 65081, "upload_time": "2019-07-10T21:19:54", "upload_time_iso_8601": "2019-07-10T21:19:54.218665Z", "url": "https://files.pythonhosted.org/packages/ad/75/097cb0cd2b70c5385d0fbc4fe1b5033e609dcc861cea739494cfd6b0edb2/codebraid-0.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:18 2020"}