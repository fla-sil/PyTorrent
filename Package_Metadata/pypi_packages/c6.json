{"info": {"author": "C David Williams", "author_email": "cdavew@alleninstitute.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: Free for non-commercial use", "Natural Language :: English", "Programming Language :: Python :: 3.7"], "description": "# c6 (Circular Center-based Cell Colony Creation and Clustering) <img src=\"docs/imgs/logo.png\" width=\"250\" title=\"c6\" alt=\"c6\" align=\"right\" vspace = \"50\">\n\n[![Build Status](https://github.com/AllenCellModeling/c6/workflows/Build%20Master/badge.svg)](https://github.com/AllenCellModeling/c6/actions)\n[![Documentation](https://github.com/AllenCellModeling/c6/workflows/Documentation/badge.svg)](https://AllenCellModeling.github.io/c6)\n[![Code Coverage](https://codecov.io/gh/AllenCellModeling/c6/branch/master/graph/badge.svg)](https://codecov.io/gh/AllenCellModeling/c6)\n\nC6 is a toy center-based model of the initial clustering that occurs as a cells aggregate after replating. \n\n\n---\n\n## Features\n- [x] Represents cells as non-overlapping circles\n- [x] Cells exclude each other\n- [x] Cells sense each other with tunable strength and distances\n- [x] Cells grow at tunable rates\n- [x] Cells divide at tunable sizes\n- [x] Cells' growth is contact inhibited\n- [x] Runs are launched from stored initial conditions\n- [x] Runs are selectable as deterministic or stochastic \n- [x] Runs are logged to tidy data file\n- [x] Run state is visualized\n- [x] You can save run states out to pretty MP4s\n- [ ] Summary statistics are available for probing run logs\n- [ ] Easy run profiling\n\n## Quick Start\n```python\nimport c6\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nspace = c6.Space()\ncell_locs = 20*np.random.random((10,2))\ncells = [c6.Cell(space, loc) for loc in cell_locs]\n\nfig, ax = plt.subplots(1,1, figsize=(10,10))\nax.set(xlim=(-10, 20), ylim=(-10, 20))\nanimation = c6.plot.animate(fig, ax, space, 500)\nanimation.save('example.mp4', fps=20)\n```\n\n## Installation\n\nClone and install or `pip install git+https://github.com/AllenCellModeling/c6.git`\n\n## Creating initial conditions and logging runs\n\nBoth initial conditions and run logs are stored as JSON in this form:\n\n```json\n{\n    \"seed\": 123,\n    \"universal\": {\"sensing\": 12.3,\n                  \"influence_max\": 12,\n                  \"influence_decay\": 0.3,\n                  \"adhesion\": 0.5\n                 },\n    \"cells\": [{\"time\": 0,\n               \"id\": [0, 1, ..., 100],\n               \"loc\": [[1, 2], [3, 4], ..., [0.5, 2]],\n               \"radius\": [0.3, 0.5, ..., 2.0]\n             }]\n}\n```\n\nAny property that can be passed to `c6.Cell` as a parameter can be serialized either as a key/value pair in `'universal'`, in which case it applies to all cells at all time points, or to `\"cells\"`, in which case it is parsed on a per cell per time point basis. Starting conditions are this file, but with only the first entry in `\"cells\"` specified. The first entry in `\"cells\"` is always applied before later entries and so per-cell values that do not change (e.g. ids) can be set there. \n\n\n## Documentation\nFor full package documentation please visit [AllenCellModeling.github.io/c6](https://AllenCellModeling.github.io/c6).\n\nAvailable under the Allen Institute Software License\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AllenCellModeling/c6", "keywords": "c6", "license": "Allen Institute Software License", "maintainer": "", "maintainer_email": "", "name": "c6", "package_url": "https://pypi.org/project/c6/", "platform": "", "project_url": "https://pypi.org/project/c6/", "project_urls": {"Homepage": "https://github.com/AllenCellModeling/c6"}, "release_url": "https://pypi.org/project/c6/0.3.1/", "requires_dist": ["matplotlib", "sklearn", "matplotlib ; extra == 'all'", "sklearn ; extra == 'all'", "codecov ; extra == 'all'", "flake8 ; extra == 'all'", "black ; extra == 'all'", "pytest ; extra == 'all'", "pytest-cov ; extra == 'all'", "pytest-raises ; extra == 'all'", "pytest-runner ; extra == 'all'", "bumpversion (>=0.5.3) ; extra == 'all'", "coverage (>=5.0a4) ; extra == 'all'", "flake8 (>=3.7.7) ; extra == 'all'", "ipython (>=7.5.0) ; extra == 'all'", "m2r (>=0.2.1) ; extra == 'all'", "pytest (>=4.3.0) ; extra == 'all'", "pytest-cov (==2.6.1) ; extra == 'all'", "pytest-raises (>=0.10) ; extra == 'all'", "pytest-runner (>=4.4) ; extra == 'all'", "Sphinx (==2.4.4) ; extra == 'all'", "sphinx-rtd-theme (>=0.1.2) ; extra == 'all'", "tox (>=3.5.2) ; extra == 'all'", "twine (>=1.13.0) ; extra == 'all'", "wheel (>=0.33.1) ; extra == 'all'", "jupyterlab ; extra == 'all'", "bumpversion (>=0.5.3) ; extra == 'dev'", "coverage (>=5.0a4) ; extra == 'dev'", "flake8 (>=3.7.7) ; extra == 'dev'", "ipython (>=7.5.0) ; extra == 'dev'", "m2r (>=0.2.1) ; extra == 'dev'", "pytest (>=4.3.0) ; extra == 'dev'", "pytest-cov (==2.6.1) ; extra == 'dev'", "pytest-raises (>=0.10) ; extra == 'dev'", "pytest-runner (>=4.4) ; extra == 'dev'", "Sphinx (==2.4.4) ; extra == 'dev'", "sphinx-rtd-theme (>=0.1.2) ; extra == 'dev'", "tox (>=3.5.2) ; extra == 'dev'", "twine (>=1.13.0) ; extra == 'dev'", "wheel (>=0.33.1) ; extra == 'dev'", "jupyterlab ; extra == 'interactive'", "pytest-runner ; extra == 'setup'", "codecov ; extra == 'test'", "flake8 ; extra == 'test'", "black ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-raises ; extra == 'test'"], "requires_python": ">=3.7", "summary": "A toy center-based model of initial clustering", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>c6 (Circular Center-based Cell Colony Creation and Clustering) <img align=\"right\" alt=\"c6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c848efdd5f9258b779a43240493b9a4a1942601/646f63732f696d67732f6c6f676f2e706e67\" width=\"250\"></h1>\n<p><a href=\"https://github.com/AllenCellModeling/c6/actions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d9cf5ba2e9e9d595c7c8a6ab4cbf5e1cc53fff4/68747470733a2f2f6769746875622e636f6d2f416c6c656e43656c6c4d6f64656c696e672f63362f776f726b666c6f77732f4275696c642532304d61737465722f62616467652e737667\"></a>\n<a href=\"https://AllenCellModeling.github.io/c6\" rel=\"nofollow\"><img alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6edb1f7ea51a007eec3c4958b34e10eb07602118/68747470733a2f2f6769746875622e636f6d2f416c6c656e43656c6c4d6f64656c696e672f63362f776f726b666c6f77732f446f63756d656e746174696f6e2f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/AllenCellModeling/c6\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fcac6e6ea4080f6b05ec81a8bbc76e82290d3bcd/68747470733a2f2f636f6465636f762e696f2f67682f416c6c656e43656c6c4d6f64656c696e672f63362f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>C6 is a toy center-based model of the initial clustering that occurs as a cells aggregate after replating.</p>\n<hr>\n<h2>Features</h2>\n<ul>\n<li>[x] Represents cells as non-overlapping circles</li>\n<li>[x] Cells exclude each other</li>\n<li>[x] Cells sense each other with tunable strength and distances</li>\n<li>[x] Cells grow at tunable rates</li>\n<li>[x] Cells divide at tunable sizes</li>\n<li>[x] Cells' growth is contact inhibited</li>\n<li>[x] Runs are launched from stored initial conditions</li>\n<li>[x] Runs are selectable as deterministic or stochastic</li>\n<li>[x] Runs are logged to tidy data file</li>\n<li>[x] Run state is visualized</li>\n<li>[x] You can save run states out to pretty MP4s</li>\n<li>[ ] Summary statistics are available for probing run logs</li>\n<li>[ ] Easy run profiling</li>\n</ul>\n<h2>Quick Start</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">c6</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n\n<span class=\"n\">space</span> <span class=\"o\">=</span> <span class=\"n\">c6</span><span class=\"o\">.</span><span class=\"n\">Space</span><span class=\"p\">()</span>\n<span class=\"n\">cell_locs</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c6</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"p\">(</span><span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"n\">loc</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">loc</span> <span class=\"ow\">in</span> <span class=\"n\">cell_locs</span><span class=\"p\">]</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">xlim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"n\">ylim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"n\">animation</span> <span class=\"o\">=</span> <span class=\"n\">c6</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">)</span>\n<span class=\"n\">animation</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'example.mp4'</span><span class=\"p\">,</span> <span class=\"n\">fps</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<h2>Installation</h2>\n<p>Clone and install or <code>pip install git+https://github.com/AllenCellModeling/c6.git</code></p>\n<h2>Creating initial conditions and logging runs</h2>\n<p>Both initial conditions and run logs are stored as JSON in this form:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"seed\"</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"universal\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"sensing\"</span><span class=\"p\">:</span> <span class=\"mf\">12.3</span><span class=\"p\">,</span>\n                  <span class=\"nt\">\"influence_max\"</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n                  <span class=\"nt\">\"influence_decay\"</span><span class=\"p\">:</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span>\n                  <span class=\"nt\">\"adhesion\"</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span>\n                 <span class=\"p\">},</span>\n    <span class=\"nt\">\"cells\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n               <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"err\">...</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>\n               <span class=\"nt\">\"loc\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"err\">...</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]],</span>\n               <span class=\"nt\">\"radius\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"err\">...</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">]</span>\n             <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Any property that can be passed to <code>c6.Cell</code> as a parameter can be serialized either as a key/value pair in <code>'universal'</code>, in which case it applies to all cells at all time points, or to <code>\"cells\"</code>, in which case it is parsed on a per cell per time point basis. Starting conditions are this file, but with only the first entry in <code>\"cells\"</code> specified. The first entry in <code>\"cells\"</code> is always applied before later entries and so per-cell values that do not change (e.g. ids) can be set there.</p>\n<h2>Documentation</h2>\n<p>For full package documentation please visit <a href=\"https://AllenCellModeling.github.io/c6\" rel=\"nofollow\">AllenCellModeling.github.io/c6</a>.</p>\n<p>Available under the Allen Institute Software License</p>\n\n          </div>"}, "last_serial": 7113676, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "2325ef2122bab985a901a8f5348dba50", "sha256": "5f0c191438664e31083b47910ab8860705b2152353f91f3208b15a32bf9d6055"}, "downloads": -1, "filename": "c6-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2325ef2122bab985a901a8f5348dba50", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 13999, "upload_time": "2020-04-27T17:58:15", "upload_time_iso_8601": "2020-04-27T17:58:15.049907Z", "url": "https://files.pythonhosted.org/packages/88/b9/dc83a827d7117a1162410cf159463210ef4d054e2edf03b5d6c5e17698e9/c6-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02c58658c7c6c151916c948f64f4ec64", "sha256": "154b39b1f824b349ab20c8ec3cc097baeba492b0c6cc7a3dd562f27fa317ff85"}, "downloads": -1, "filename": "c6-0.3.1.tar.gz", "has_sig": false, "md5_digest": "02c58658c7c6c151916c948f64f4ec64", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 273720, "upload_time": "2020-04-27T17:58:17", "upload_time_iso_8601": "2020-04-27T17:58:17.799313Z", "url": "https://files.pythonhosted.org/packages/8b/5b/8828569e463d5d92a061cc9f347f4b0ebf26e80fbbc69f296cebd7c3d913/c6-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2325ef2122bab985a901a8f5348dba50", "sha256": "5f0c191438664e31083b47910ab8860705b2152353f91f3208b15a32bf9d6055"}, "downloads": -1, "filename": "c6-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2325ef2122bab985a901a8f5348dba50", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 13999, "upload_time": "2020-04-27T17:58:15", "upload_time_iso_8601": "2020-04-27T17:58:15.049907Z", "url": "https://files.pythonhosted.org/packages/88/b9/dc83a827d7117a1162410cf159463210ef4d054e2edf03b5d6c5e17698e9/c6-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02c58658c7c6c151916c948f64f4ec64", "sha256": "154b39b1f824b349ab20c8ec3cc097baeba492b0c6cc7a3dd562f27fa317ff85"}, "downloads": -1, "filename": "c6-0.3.1.tar.gz", "has_sig": false, "md5_digest": "02c58658c7c6c151916c948f64f4ec64", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 273720, "upload_time": "2020-04-27T17:58:17", "upload_time_iso_8601": "2020-04-27T17:58:17.799313Z", "url": "https://files.pythonhosted.org/packages/8b/5b/8828569e463d5d92a061cc9f347f4b0ebf26e80fbbc69f296cebd7c3d913/c6-0.3.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:46 2020"}