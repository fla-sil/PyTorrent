{"info": {"author": "Tudor Aursulesei", "author_email": "thestick613@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Utilities"], "description": "========\nOverview\n========\n\n\n\nA distributed redis cache library, which solves the Thundering Herd problem.\n\n* Free software: BSD license\n\nInstallation\n============\n\n::\n\n    pip install thundercache\n\nDocumentation\n=============\n\nhttps://python-thundercache.readthedocs.io/\n\nDevelopment\n===========\n\nTo run the all tests run::\n\n    tox\n\nNote, to combine the coverage data from all the tox environments run:\n\n.. list-table::\n    :widths: 10 90\n    :stub-columns: 1\n\n    - - Windows\n      - ::\n\n            set PYTEST_ADDOPTS=--cov-append\n            tox\n\n    - - Other\n      - ::\n\n            PYTEST_ADDOPTS=--cov-append tox\n\nUsage\n=====\n\n.. code-block:: python\n\n  # Distributed Lock\n  from thundercache import LockFactory, retry_command\n  from redis.sentinel import Sentinel\n\n  sentinel = Sentinel()\n  redis_sentinel_master_instance = retry_command(sentinel.master_for, \"your_sentinel_service_name\", socket_timeout=20)\n\n  locks = LockFactory(expires=720, timeout=10, redis=redis_sentinel_master_instance)\n\n  with locks('my_lock'):\n      # do stuff with a distributed redis lock across different processes and networks\n      # pretty cool right!\n      pass\n\n\n  # Local Redis Cache\n  from thundercache import SmartLocalRedisCacheFactory, BaseCacheMixin)\n  import time\n\n  lcached = SmartLocalRedisCacheFactory()\n\n\n  class MyClass(BaseCacheMixin):\n\n      @lcached(\"method\", max_age=10, critical=2)\n      def method(self, n):\n      time.sleep(n)\n          return n*n\n\n  @lcached(\"somefunc', max_age=10, critical=2)\n  def somefunc(n):\n      time.sleep(n)\n      return n*n\n\n\n  mc = MyClass()\n  print mc.method(3)\n  # prints \"9\" after three seconds\n  print mc.method(3)\n  # prints \"9\" instantly\n\n  print somefunc(2)\n  # prints \"4\" after two seconds\n  print somefunc(2)\n  # prints 4\n\n\n\n  # Distributed Redis Cache\n  from thundercache import SmartRedisCacheFactory, retry_command\n  from redis.sentinel import Sentinel\n\n  sentinel = Sentinel()\n  cached = SmartRedisCacheFactory(sentinel, \"your_sentinel_service_name\")\n  # you can now use the @cached decorator in the same way you use @lcached\n\n\n\n  # Per process cache\n  from thundercache import BaseCache\n\n  class MyClass(BaseCacheMixin):\n      @BaseCache(\"mymethod\", max_age=10)\n      def mymethod(self, n):\n          time.sleep(n)\n          return n*n\n\n  @BaseCache(\"otherfunc', max_age=10)\n  def otherfunc(n):\n      time.sleep(n)\n      return n*n\n\n\n  # You can also chain these decorators\n  @BaseCache('x', 10)\n  @cached('y', 60)\n      def funct_or_method(*args,  **kwargs):\n      return None\n\n::\n\n\nChangelog\n=========\n\n0.1.2 (2017-02-23)\n-----------------------------------------\n\n* First release on PyPI.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thestick613/python-thundercache", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "thundercache", "package_url": "https://pypi.org/project/thundercache/", "platform": "", "project_url": "https://pypi.org/project/thundercache/", "project_urls": {"Homepage": "https://github.com/thestick613/python-thundercache"}, "release_url": "https://pypi.org/project/thundercache/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "A distributed redis cache library, which solves the Thundering Herd problem.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            ========<br>Overview<br>========<br><br><br><br>A distributed redis cache library, which solves the Thundering Herd problem.<br><br>* Free software: BSD license<br><br>Installation<br>============<br><br>::<br><br>    pip install thundercache<br><br>Documentation<br>=============<br><br>https://python-thundercache.readthedocs.io/<br><br>Development<br>===========<br><br>To run the all tests run::<br><br>    tox<br><br>Note, to combine the coverage data from all the tox environments run:<br><br>.. list-table::<br>    :widths: 10 90<br>    :stub-columns: 1<br><br>    - - Windows<br>      - ::<br><br>            set PYTEST_ADDOPTS=--cov-append<br>            tox<br><br>    - - Other<br>      - ::<br><br>            PYTEST_ADDOPTS=--cov-append tox<br><br>Usage<br>=====<br><br>.. code-block:: python<br><br>  # Distributed Lock<br>  from thundercache import LockFactory, retry_command<br>  from redis.sentinel import Sentinel<br><br>  sentinel = Sentinel()<br>  redis_sentinel_master_instance = retry_command(sentinel.master_for, \"your_sentinel_service_name\", socket_timeout=20)<br><br>  locks = LockFactory(expires=720, timeout=10, redis=redis_sentinel_master_instance)<br><br>  with locks('my_lock'):<br>      # do stuff with a distributed redis lock across different processes and networks<br>      # pretty cool right!<br>      pass<br><br><br>  # Local Redis Cache<br>  from thundercache import SmartLocalRedisCacheFactory, BaseCacheMixin)<br>  import time<br><br>  lcached = SmartLocalRedisCacheFactory()<br><br><br>  class MyClass(BaseCacheMixin):<br><br>      @lcached(\"method\", max_age=10, critical=2)<br>      def method(self, n):<br>      time.sleep(n)<br>          return n*n<br><br>  @lcached(\"somefunc', max_age=10, critical=2)<br>  def somefunc(n):<br>      time.sleep(n)<br>      return n*n<br><br><br>  mc = MyClass()<br>  print mc.method(3)<br>  # prints \"9\" after three seconds<br>  print mc.method(3)<br>  # prints \"9\" instantly<br><br>  print somefunc(2)<br>  # prints \"4\" after two seconds<br>  print somefunc(2)<br>  # prints 4<br><br><br><br>  # Distributed Redis Cache<br>  from thundercache import SmartRedisCacheFactory, retry_command<br>  from redis.sentinel import Sentinel<br><br>  sentinel = Sentinel()<br>  cached = SmartRedisCacheFactory(sentinel, \"your_sentinel_service_name\")<br>  # you can now use the @cached decorator in the same way you use @lcached<br><br><br><br>  # Per process cache<br>  from thundercache import BaseCache<br><br>  class MyClass(BaseCacheMixin):<br>      @BaseCache(\"mymethod\", max_age=10)<br>      def mymethod(self, n):<br>          time.sleep(n)<br>          return n*n<br><br>  @BaseCache(\"otherfunc', max_age=10)<br>  def otherfunc(n):<br>      time.sleep(n)<br>      return n*n<br><br><br>  # You can also chain these decorators<br>  @BaseCache('x', 10)<br>  @cached('y', 60)<br>      def funct_or_method(*args,  **kwargs):<br>      return None<br><br>::<br><br><br>Changelog<br>=========<br><br>0.1.2 (2017-02-23)<br>-----------------------------------------<br><br>* First release on PyPI.<br>\n          </div>"}, "last_serial": 2663029, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "4688ce2a5531f1298c571249ed5172b5", "sha256": "0da9e27e10c7143961bfe6e59269459e9b8daa577a013c63cfb2bc807414fdee"}, "downloads": -1, "filename": "thundercache-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4688ce2a5531f1298c571249ed5172b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12485, "upload_time": "2017-02-23T11:17:20", "upload_time_iso_8601": "2017-02-23T11:17:20.411867Z", "url": "https://files.pythonhosted.org/packages/36/fe/162c458ea3c91a0a6beb3f1027256d61e59cdbfb0e0e972521e22a1b1009/thundercache-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4688ce2a5531f1298c571249ed5172b5", "sha256": "0da9e27e10c7143961bfe6e59269459e9b8daa577a013c63cfb2bc807414fdee"}, "downloads": -1, "filename": "thundercache-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4688ce2a5531f1298c571249ed5172b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12485, "upload_time": "2017-02-23T11:17:20", "upload_time_iso_8601": "2017-02-23T11:17:20.411867Z", "url": "https://files.pythonhosted.org/packages/36/fe/162c458ea3c91a0a6beb3f1027256d61e59cdbfb0e0e972521e22a1b1009/thundercache-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:36 2020"}