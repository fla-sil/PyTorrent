{"info": {"author": "Haotian Teng", "author_email": "havens.teng@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)"], "description": "# Chiron\n## A basecaller for Oxford Nanopore Technologies' sequencers\nUsing a deep learning CNN+RNN+CTC structure to establish end-to-end basecalling for the nanopore sequencer.  \nBuilt with **TensorFlow** and python 2.7.\n\nIf you found Chiron useful, please consider to cite:  \n> Haotian Teng, Minh Duc Cao, Michael B Hall, Tania Duarte, Sheng Wang, Lachlan J M Coin; Chiron: translating nanopore raw signal directly into nucleotide sequence using deep learning, GigaScience, Volume 7, Issue 5, 1 May 2018, giy037, https://doi.org/10.1093/gigascience/giy037\n\nDNA basecall:\n```\npython chiron/entry.py call -i <input_fast5_folder> -o <output_folder> -m chiron/model/DNA_default -p dna-pre\n```\nRNA basecall:\n```\npython chiron/entry.py call -i <input_fast5_folder> -o <output_folder> -m chiron/model/RNA_default -p rna-pre --mode rna\n```\n\n---\n## Table of contents\n\n- [Install](#Install)\n    - [Install using `pip`](#install-using-pip)\n    - [Install from GitHub](#install-from-github)\n- [Basecall](#basecall)\n    - [If installed from `pip`](#if-installed-from-pip)\n    - [If installed from GitHub](#if-installed-from-github)\n    - [Test run](#test-run)\n    - [Preprocessing using BoostNano](#Preprocess)\n    - [Decoder choice](#decoder-choice)\n    - [Output](#output)\n    - [Output format](#output-format)\n- [Training](#training)\n    - [Hardware request](#hardware-request)\n    - [Prepare training data set](#prepare-training-data-set)\n    - [Train a model](#train-a-model)\n    - [Training parameters](#training-parameters)\n- [Train on Google Cloud ML engine](#train-on-google-cloud-ml-engine)\n    - [Local testing](#local-testing)\n    - [Create a new bucket](#create-a-new-bucket)\n    - [Use gsutil to copy the fast5 files to your Cloud Storage bucket](#use-gsutil-to-copy-the-fast5-files-to-your-Cloud-Storage-bucket)\n    - [Train model on Google Cloud ML engine](#train-model-on-google-cloud-ml-engine)\n- [Distributed training on Google CLoud ML Engine](#distributed-training-on-google-cloud-ml-engine)\n    - [Configure](#configure)\n    - [Transfer fast5 files](#transfer-fast5-files)\n    - [Submit training request](#submit-training-request)\n## Install\n### Install using `pip` (recommended)\nIf you currently have TensorFlow installed on your system, we would advise you to create a virtual environment to install Chiron into, this way there is no clash of versions etc.\n\nIf you would like to do this, the best options would be [`virtualenv`](https://virtualenv.pypa.io/en/stable/installation/), the more user-friendly [`virtualenvwrapper`](https://virtualenvwrapper.readthedocs.io/en/latest/install.html), or through [anaconda](https://docs.continuum.io/anaconda/install/). After installing one of these and activating the virtual environment you will be installing Chiron into, continue with the rest of the installation instructions as normal.\n\nTo install with `pip`:\n\n```\npip install chiron  \n```\nThis will install Chiron, and [`h5py`](https://github.com/h5py/h5py) (required for reading in `.fast5` files).\nTensorflow need to be install in addition by:\n```  \npip install tensorflow==1.15\n```  \nor GPU version:  \n```  \npip install tensorflow-gpu==1.15\n```  \n\n### Install from Source\n```\ngit clone https://github.com/haotianteng/chiron.git\ncd Chiron\n```\nYou will also need to install dependencies.\n```\npython setup.py install\n```\nFor CPU-version:\n```\npip install tensorflow==1.15\n```\nFor GPU-version(Nvidia GPU required):  \nInstall [CUDA](https://developer.nvidia.com/cuda-toolkit)  \nInstall [cuDNN](https://developer.nvidia.com/cudnn)  \nInstall tensorflow gpu version  \n```\npip install tensorflow-gpu==1.15\n```\nAnd then add the Chiron into PYTHONPATH,for convinience you can add it to the .bashrc\n```\nexport PYTHONPATH=[Path to Chiron/Chiron]:$PYTHONPATH\n```\nFor alternate/detailed installation instructions for TensorFlow, see the [documentation](https://www.tensorflow.org/).\n\n## Basecall\n### If installed from `pip`:\nAn example call to Chiron to run basecalling is:  \n```\nchiron call -i <input_fast5_folder> -o <output_folder> -m <model_folder>\n\n```\n\n### If installed from Github:\n\nAll Chiron functionality can be run from **entry.py** in the Chiron folder. (You might like to also add the path to Chiron into your PATH for ease of running).\n\n```\npython chiron/entry.py call -i <input_fast5_folder> -o <output_folder> -m <model_folder>\n\n```\n\n### Test run\n\nWe provide 5 sample fast5 files for DNA(courtesy of [nanonet](https://github.com/nanoporetech/nanonet)) and 5 sample files for RNA in the GitHub repository and two models (DNA_default and RNA_default) which you can run a test on. These are located in `chiron/example_data/`. From inside the Chiron repository:\n```\npython chiron/entry.py call -i chiron/example_folder/ -o <output_folder> -m chiron/model/DNA_default --preset dna-pre\n```\nAnd from v0.5 we have provide a good RNA model for the direct-RNA basecall.  \n```\npython chiron/entry.py call -i <input_fast5_folder> -o <output_folder> -m chiron/model/RNA_default --mode rna --preset rna-pre\n```\nYou can reduce the batch size(defualt is 400) if you have limited RAM/GPU-RAM or extend it, bigger batch size has (very)slightly better result and faster inference speed.  \n```\npython chiron/entry.py call -i <input_fast5_folder> -o <output_folder> -m chiron/model/RNA_default --mode rna --preset rna-pre -b 200\n```\nAny arguments provided afterward will override the argument in the preset, preset arguments values are:  \n**DNA preset arguments value(dna-pre):**\n'start':0,'batch_size':400,'segment_len':400,'jump':390,'threads':0,'beam':30    \n**RNA preset arguments value(rna-pre):**\n'start':0,'batch_size':300,'segment_len':2000,'jump':1900,'threads':0,'beam':30  \n\n### Preprocess\nFor better RNA basecalling result, the fast5 files can be preproceesd using [BoostNano](https://github.com/haotianteng/BoostNano), which is a tool developed by me to segment and remove the polyA and adapter tail.\n\n### Decoder choice\n(From v0.3)  \nBeam search decoder: chiron call -i <input> -o <output> --beam <beam_width>  \nGreedy decoder: chiron call -i <input> -o <output> --beam 0  \n\nBeam Seach decoder give a higher accuracy, and larger beam width can furthur improve the accuracy.\nGreedy decoder give a faster decoding speed than the beam search decoder:  \n\n| Device | Greedy decoder rate(bp/s) | Beam Search decoder rate(bp/s), beam_width=50 |  \n| --- | --- | --- |  \n| CPU | 21 | 17 |  \n| GPU | 1652 | 1204 |  \n\n\n\n### Output\n`chiron call` will create five folders in `<output_folder>` called `raw`, `result`, `segments`, `meta`, and `reference`.\n\n* `result`: fastq/fasta files with the same name as the fast5 file they contain the basecalling result for. To create a single, merged version of these fasta files, try something like `paste --delimiter=\\\\n --serial result/*.fasta > merged.fasta` \n* `raw`: Contains a file for each fast5 file with it's raw signal. This file format is an list of integers. i.e `544 554 556 571 563 472 467 487 482 513 517 521 495 504 500 520 492 506 ... `\n* `segments`: Contains the segments basecalled from each fast5 file.\n* `meta`: Contains the meta information for each read (read length, basecalling rate etc.). Each file has the same name as it's fast5 file.\n* `reference`: Contains the reference sequence (if any).\n\n### Output format\nWith -e flag to output fastq file(default) with quality score or fasta file.  \nExample:  \nchiron call -i <input_fast5_folder> -o <output_folder> -e fastq  \n\n\nchiron call -i <input_fast5_folder> -o <output_folder> -e fasta  \n\n## Training\nThe default DNA model trained on R9.4 protocol with a mix of Lambda and E.coli dataset, and the default RNA model is trained on R9.4 direct RNA kit (-200mV configuration).\nIf the basecalling result is not satisfying, you can train a model on your own training data set.  \n\n#### Hardware request:  \nRecommend training on GPU with TensorFlow - usually 8GB RAM (GPU) is required.  \n\n#### Prepare training data set.  \nUsing raw.py script to extract the signal and label from the re-squiggled fast5 file.\n(For how to re-squiggle fast5 file, check [Tombo re-squiggle](https://github.com/nanoporetech/tombo))\n\n#### If installed from `pip`:\n```\nchiron export -i <fast5 folder> -o <output_folder>\n```\n\nor directly use the raw.py script in utils.\n\n```\npython chiron/utils/raw.py --input <fast5 folder> --output <output_folder> --mode dna\n```\n\nThis will generate a tfrecord file for training when using the chiron_rcnn_train.py and chiron_input.py pipeline.  \n\n```\npython chiron/utils/file_batch.py --input <fast5 folder> --output <output folder> --length 400 --mode dna\n```\n\nThis will generate several binary .bin file for training when using the chiron_train.py and chiron_queue_input.py pipeline.  \n\n### Train a model\n\n```\nsource activate tensorflow   \n```\n#### If installed from `pip`:\n```\nchiron train --data_dir <signal_label folder> --log_dir <model_log_folder> --model_name <saved_model_name>\n```\n\nor run directly by  \n\n```\npython chiron/chiron_rcnn_train.py  --data_dir <signal_label folder/ tfrecord file> --log_dir <model_log>\n```\n### Training parameters\nFollowing parameters can be passed to Chiron when training\n\n`data_dir`(Required): The folder containing your signal and label files.  \n`log_dir`(Required): The folder where you want to save the model.  \n`model_name`(Required): The name of the model. The record will be stored in the directory `log_dir/model_name/`\n`tfrecord`: File name of tfrecord. Default is train.tfrecords.\n`sequence_len`: The length of the segment you want to separate the sequence into. Longer length requires larger RAM.  \n`batch_size`: The batch size.  \n`step_rate`: Learning rate of the optimizer.  \n`max_step`: Maximum step of the optimizer.  \n`k_mer`: Chiron supports learning based on k-mer instead of a single nucleotide, this should be an odd number, even numbers will cause an error.  \n`retrain`: If this is a new model, or you want to load the model you trained before. The model will be loaded from  `log_dir/model_name/`  \n\n## Train on Google Cloud ML engine\n\n\n### local testing\n\nBefore training the model on cloud ml engine, please check if it is working on local machine or not by following commands\n\n```\ngcloud ml-engine local train \\\n    --module-name chiron.utils.raw \\\n    --package-path chiron.utils/  \\\n    -- --input input_fast5_folder \\\n    --output output\n\ngcloud ml-engine local train \\\n    --module-name chiron.chiron_rcnn_train \\\n    --package-path chiron/\n```\n\nIf it is working well, please go to next step.\n\n### create a new bucket\n\n```\nBUCKET_NAME=chiron-ml\nREGION=us-central1\ngsutil mb -l $REGION gs://$BUCKET_NAME\n```\n\n### Use gsutil to copy the fast5 files to your Cloud Storage bucket\n\n```\ngsutil cp -r raw_fast_folder gs://$BUCKET_NAME/fast5-data\n```\n\n### Train model on google cloud ML engine\n```\nJOB_NAME=chiron_single_1\nOUTPUT_PATH=gs://$BUCKET_NAME/$JOB_NAME\nINPUT_PATH=gs://$BUCKET_NAME/train_tfdata\n```\n```\ngcloud ml-engine jobs submit training $JOB_NAME \\\n    --staging-bucket gs://chiron-ml \\\n    --module-name chiron.chiron_rcnn_train \\\n    --package-path chiron/ \\\n    --region $REGION \\\n    --config config.yaml \\\n    -- \\\n    --data_dir gs://$BUCKET_NAME/train_tfdata \\\n    --cache_dir gs://$BUCKET_NAME/cache/train.hdf5 \\\n    --log_dir gs://$BUCKET_NAME/GVM_model\n```\n\n## Distributed training on Google Cloud ML Engine\n\n### Configure \n\nChange configure.yaml according to [GCloud Docs](https://cloud.google.com/ml-engine/docs/training-overview) \nFor example the following configure_multi_gpu.yaml: \n\n```\ntrainingInput: \n  scaleTier: CUSTOM \n  masterType: standard_p100 \n  workerType: standard_p100 \n  parameterServerType: large_model \n  workerCount: 3 \n  parameterServerCount: 3 \n```\n\nWill enable 3 workers + 1 master worker with one P-100 GPU in each worker. \n\n### Transfer fast5 files \n```\nFAST5_FOLDER=/my/fast5/\nOTUPUT_FOLDER=/my/file_batch/\nSEGMENT_LEN=512\n```\n\n**Transfer fast5 to file batch**\n```\npython utils/file_batch.py --input $FAST5_FOLDER --output $OUTPUT_FOLDER --length $SEGMENT_LEN\n```\n**Copy to Google Cloud**\n```\ngsutil cp -r $OUTPUT_FOLDER gs://$BUCKET_NAME/file_batch\n```\n### Submit training request\n```\nJOB_NAME=chiron_multi_4\nDATA_BUCKET=chiron-training-data\nMODEL_BUCKET=chiron-model\nREGION=us-central1\nMODEL_NAME=test_model1\nGPU_NUM=4\n```\n```\ngcloud ml-engine jobs submit training ${JOB_NAME} \\\n    --runtime-version 1.6 \\\n    --staging-bucket gs://chiron-model/ \\\n    --module-name chiron.chiron_multi_gpu_train \\\n    --package-path chiron \\\n    --region $REGION \\\n    --config config_multi_gpu.yaml \\\n    -- \\\n    -i gs://$DATA_BUCKET/file_batch \\\n    -o gs://$MODEL_BUCKET/ \\\n    -m ${MODEL_NAME} \\\n    -n ${GPU_NUM}\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/haotianteng/Chiron/archive/0.6.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/haotianteng/chiron", "keywords": "basecaller,nanopore,sequencing,neural network", "license": "MPL 2.0", "maintainer": "", "maintainer_email": "", "name": "chiron", "package_url": "https://pypi.org/project/chiron/", "platform": "", "project_url": "https://pypi.org/project/chiron/", "project_urls": {"Download": "https://github.com/haotianteng/Chiron/archive/0.6.tar.gz", "Homepage": "https://github.com/haotianteng/chiron"}, "release_url": "https://pypi.org/project/chiron/0.6.1.1/", "requires_dist": ["h5py (>=2.7.0)", "mappy (>=2.10.0)", "numpy (>=1.13.3)", "statsmodels (>=0.8.0)", "tqdm (>=4.23.0)", "scipy (>=1.0.1)", "biopython (>=1.73)", "packaging (>=18.0)", "tensorflow (==1.15.0) ; extra == 'tf'", "tensorflow-gpu (==1.15.0) ; extra == 'tf_gpu'"], "requires_python": "", "summary": "A deep neural network basecaller for nanopore sequencing.", "version": "0.6.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Chiron</h1>\n<h2>A basecaller for Oxford Nanopore Technologies' sequencers</h2>\n<p>Using a deep learning CNN+RNN+CTC structure to establish end-to-end basecalling for the nanopore sequencer.<br>\nBuilt with <strong>TensorFlow</strong> and python 2.7.</p>\n<p>If you found Chiron useful, please consider to cite:</p>\n<blockquote>\n<p>Haotian Teng, Minh Duc Cao, Michael B Hall, Tania Duarte, Sheng Wang, Lachlan J M Coin; Chiron: translating nanopore raw signal directly into nucleotide sequence using deep learning, GigaScience, Volume 7, Issue 5, 1 May 2018, giy037, <a href=\"https://doi.org/10.1093/gigascience/giy037\" rel=\"nofollow\">https://doi.org/10.1093/gigascience/giy037</a></p>\n</blockquote>\n<p>DNA basecall:</p>\n<pre><code>python chiron/entry.py call -i &lt;input_fast5_folder&gt; -o &lt;output_folder&gt; -m chiron/model/DNA_default -p dna-pre\n</code></pre>\n<p>RNA basecall:</p>\n<pre><code>python chiron/entry.py call -i &lt;input_fast5_folder&gt; -o &lt;output_folder&gt; -m chiron/model/RNA_default -p rna-pre --mode rna\n</code></pre>\n<hr>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#Install\" rel=\"nofollow\">Install</a>\n<ul>\n<li><a href=\"#install-using-pip\" rel=\"nofollow\">Install using <code>pip</code></a></li>\n<li><a href=\"#install-from-github\" rel=\"nofollow\">Install from GitHub</a></li>\n</ul>\n</li>\n<li><a href=\"#basecall\" rel=\"nofollow\">Basecall</a>\n<ul>\n<li><a href=\"#if-installed-from-pip\" rel=\"nofollow\">If installed from <code>pip</code></a></li>\n<li><a href=\"#if-installed-from-github\" rel=\"nofollow\">If installed from GitHub</a></li>\n<li><a href=\"#test-run\" rel=\"nofollow\">Test run</a></li>\n<li><a href=\"#Preprocess\" rel=\"nofollow\">Preprocessing using BoostNano</a></li>\n<li><a href=\"#decoder-choice\" rel=\"nofollow\">Decoder choice</a></li>\n<li><a href=\"#output\" rel=\"nofollow\">Output</a></li>\n<li><a href=\"#output-format\" rel=\"nofollow\">Output format</a></li>\n</ul>\n</li>\n<li><a href=\"#training\" rel=\"nofollow\">Training</a>\n<ul>\n<li><a href=\"#hardware-request\" rel=\"nofollow\">Hardware request</a></li>\n<li><a href=\"#prepare-training-data-set\" rel=\"nofollow\">Prepare training data set</a></li>\n<li><a href=\"#train-a-model\" rel=\"nofollow\">Train a model</a></li>\n<li><a href=\"#training-parameters\" rel=\"nofollow\">Training parameters</a></li>\n</ul>\n</li>\n<li><a href=\"#train-on-google-cloud-ml-engine\" rel=\"nofollow\">Train on Google Cloud ML engine</a>\n<ul>\n<li><a href=\"#local-testing\" rel=\"nofollow\">Local testing</a></li>\n<li><a href=\"#create-a-new-bucket\" rel=\"nofollow\">Create a new bucket</a></li>\n<li><a href=\"#use-gsutil-to-copy-the-fast5-files-to-your-Cloud-Storage-bucket\" rel=\"nofollow\">Use gsutil to copy the fast5 files to your Cloud Storage bucket</a></li>\n<li><a href=\"#train-model-on-google-cloud-ml-engine\" rel=\"nofollow\">Train model on Google Cloud ML engine</a></li>\n</ul>\n</li>\n<li><a href=\"#distributed-training-on-google-cloud-ml-engine\" rel=\"nofollow\">Distributed training on Google CLoud ML Engine</a>\n<ul>\n<li><a href=\"#configure\" rel=\"nofollow\">Configure</a></li>\n<li><a href=\"#transfer-fast5-files\" rel=\"nofollow\">Transfer fast5 files</a></li>\n<li><a href=\"#submit-training-request\" rel=\"nofollow\">Submit training request</a></li>\n</ul>\n</li>\n</ul>\n<h2>Install</h2>\n<h3>Install using <code>pip</code> (recommended)</h3>\n<p>If you currently have TensorFlow installed on your system, we would advise you to create a virtual environment to install Chiron into, this way there is no clash of versions etc.</p>\n<p>If you would like to do this, the best options would be <a href=\"https://virtualenv.pypa.io/en/stable/installation/\" rel=\"nofollow\"><code>virtualenv</code></a>, the more user-friendly <a href=\"https://virtualenvwrapper.readthedocs.io/en/latest/install.html\" rel=\"nofollow\"><code>virtualenvwrapper</code></a>, or through <a href=\"https://docs.continuum.io/anaconda/install/\" rel=\"nofollow\">anaconda</a>. After installing one of these and activating the virtual environment you will be installing Chiron into, continue with the rest of the installation instructions as normal.</p>\n<p>To install with <code>pip</code>:</p>\n<pre><code>pip install chiron  \n</code></pre>\n<p>This will install Chiron, and <a href=\"https://github.com/h5py/h5py\" rel=\"nofollow\"><code>h5py</code></a> (required for reading in <code>.fast5</code> files).\nTensorflow need to be install in addition by:</p>\n<pre><code>pip install tensorflow==1.15\n</code></pre>\n<p>or GPU version:</p>\n<pre><code>pip install tensorflow-gpu==1.15\n</code></pre>\n<h3>Install from Source</h3>\n<pre><code>git clone https://github.com/haotianteng/chiron.git\ncd Chiron\n</code></pre>\n<p>You will also need to install dependencies.</p>\n<pre><code>python setup.py install\n</code></pre>\n<p>For CPU-version:</p>\n<pre><code>pip install tensorflow==1.15\n</code></pre>\n<p>For GPU-version(Nvidia GPU required):<br>\nInstall <a href=\"https://developer.nvidia.com/cuda-toolkit\" rel=\"nofollow\">CUDA</a><br>\nInstall <a href=\"https://developer.nvidia.com/cudnn\" rel=\"nofollow\">cuDNN</a><br>\nInstall tensorflow gpu version</p>\n<pre><code>pip install tensorflow-gpu==1.15\n</code></pre>\n<p>And then add the Chiron into PYTHONPATH,for convinience you can add it to the .bashrc</p>\n<pre><code>export PYTHONPATH=[Path to Chiron/Chiron]:$PYTHONPATH\n</code></pre>\n<p>For alternate/detailed installation instructions for TensorFlow, see the <a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">documentation</a>.</p>\n<h2>Basecall</h2>\n<h3>If installed from <code>pip</code>:</h3>\n<p>An example call to Chiron to run basecalling is:</p>\n<pre><code>chiron call -i &lt;input_fast5_folder&gt; -o &lt;output_folder&gt; -m &lt;model_folder&gt;\n\n</code></pre>\n<h3>If installed from Github:</h3>\n<p>All Chiron functionality can be run from <strong>entry.py</strong> in the Chiron folder. (You might like to also add the path to Chiron into your PATH for ease of running).</p>\n<pre><code>python chiron/entry.py call -i &lt;input_fast5_folder&gt; -o &lt;output_folder&gt; -m &lt;model_folder&gt;\n\n</code></pre>\n<h3>Test run</h3>\n<p>We provide 5 sample fast5 files for DNA(courtesy of <a href=\"https://github.com/nanoporetech/nanonet\" rel=\"nofollow\">nanonet</a>) and 5 sample files for RNA in the GitHub repository and two models (DNA_default and RNA_default) which you can run a test on. These are located in <code>chiron/example_data/</code>. From inside the Chiron repository:</p>\n<pre><code>python chiron/entry.py call -i chiron/example_folder/ -o &lt;output_folder&gt; -m chiron/model/DNA_default --preset dna-pre\n</code></pre>\n<p>And from v0.5 we have provide a good RNA model for the direct-RNA basecall.</p>\n<pre><code>python chiron/entry.py call -i &lt;input_fast5_folder&gt; -o &lt;output_folder&gt; -m chiron/model/RNA_default --mode rna --preset rna-pre\n</code></pre>\n<p>You can reduce the batch size(defualt is 400) if you have limited RAM/GPU-RAM or extend it, bigger batch size has (very)slightly better result and faster inference speed.</p>\n<pre><code>python chiron/entry.py call -i &lt;input_fast5_folder&gt; -o &lt;output_folder&gt; -m chiron/model/RNA_default --mode rna --preset rna-pre -b 200\n</code></pre>\n<p>Any arguments provided afterward will override the argument in the preset, preset arguments values are:<br>\n<strong>DNA preset arguments value(dna-pre):</strong>\n'start':0,'batch_size':400,'segment_len':400,'jump':390,'threads':0,'beam':30<br>\n<strong>RNA preset arguments value(rna-pre):</strong>\n'start':0,'batch_size':300,'segment_len':2000,'jump':1900,'threads':0,'beam':30</p>\n<h3>Preprocess</h3>\n<p>For better RNA basecalling result, the fast5 files can be preproceesd using <a href=\"https://github.com/haotianteng/BoostNano\" rel=\"nofollow\">BoostNano</a>, which is a tool developed by me to segment and remove the polyA and adapter tail.</p>\n<h3>Decoder choice</h3>\n<p>(From v0.3)<br>\nBeam search decoder: chiron call -i &lt;input&gt; -o &lt;output&gt; --beam &lt;beam_width&gt;<br>\nGreedy decoder: chiron call -i &lt;input&gt; -o &lt;output&gt; --beam 0</p>\n<p>Beam Seach decoder give a higher accuracy, and larger beam width can furthur improve the accuracy.\nGreedy decoder give a faster decoding speed than the beam search decoder:</p>\n<table>\n<thead>\n<tr>\n<th>Device</th>\n<th>Greedy decoder rate(bp/s)</th>\n<th>Beam Search decoder rate(bp/s), beam_width=50</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>21</td>\n<td>17</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>1652</td>\n<td>1204</td>\n</tr></tbody></table>\n<h3>Output</h3>\n<p><code>chiron call</code> will create five folders in <code>&lt;output_folder&gt;</code> called <code>raw</code>, <code>result</code>, <code>segments</code>, <code>meta</code>, and <code>reference</code>.</p>\n<ul>\n<li><code>result</code>: fastq/fasta files with the same name as the fast5 file they contain the basecalling result for. To create a single, merged version of these fasta files, try something like <code>paste --delimiter=\\\\n --serial result/*.fasta &gt; merged.fasta</code></li>\n<li><code>raw</code>: Contains a file for each fast5 file with it's raw signal. This file format is an list of integers. i.e <code>544 554 556 571 563 472 467 487 482 513 517 521 495 504 500 520 492 506 ...</code></li>\n<li><code>segments</code>: Contains the segments basecalled from each fast5 file.</li>\n<li><code>meta</code>: Contains the meta information for each read (read length, basecalling rate etc.). Each file has the same name as it's fast5 file.</li>\n<li><code>reference</code>: Contains the reference sequence (if any).</li>\n</ul>\n<h3>Output format</h3>\n<p>With -e flag to output fastq file(default) with quality score or fasta file.<br>\nExample:<br>\nchiron call -i &lt;input_fast5_folder&gt; -o &lt;output_folder&gt; -e fastq</p>\n<p>chiron call -i &lt;input_fast5_folder&gt; -o &lt;output_folder&gt; -e fasta</p>\n<h2>Training</h2>\n<p>The default DNA model trained on R9.4 protocol with a mix of Lambda and E.coli dataset, and the default RNA model is trained on R9.4 direct RNA kit (-200mV configuration).\nIf the basecalling result is not satisfying, you can train a model on your own training data set.</p>\n<h4>Hardware request:</h4>\n<p>Recommend training on GPU with TensorFlow - usually 8GB RAM (GPU) is required.</p>\n<h4>Prepare training data set.</h4>\n<p>Using raw.py script to extract the signal and label from the re-squiggled fast5 file.\n(For how to re-squiggle fast5 file, check <a href=\"https://github.com/nanoporetech/tombo\" rel=\"nofollow\">Tombo re-squiggle</a>)</p>\n<h4>If installed from <code>pip</code>:</h4>\n<pre><code>chiron export -i &lt;fast5 folder&gt; -o &lt;output_folder&gt;\n</code></pre>\n<p>or directly use the raw.py script in utils.</p>\n<pre><code>python chiron/utils/raw.py --input &lt;fast5 folder&gt; --output &lt;output_folder&gt; --mode dna\n</code></pre>\n<p>This will generate a tfrecord file for training when using the chiron_rcnn_train.py and chiron_input.py pipeline.</p>\n<pre><code>python chiron/utils/file_batch.py --input &lt;fast5 folder&gt; --output &lt;output folder&gt; --length 400 --mode dna\n</code></pre>\n<p>This will generate several binary .bin file for training when using the chiron_train.py and chiron_queue_input.py pipeline.</p>\n<h3>Train a model</h3>\n<pre><code>source activate tensorflow   \n</code></pre>\n<h4>If installed from <code>pip</code>:</h4>\n<pre><code>chiron train --data_dir &lt;signal_label folder&gt; --log_dir &lt;model_log_folder&gt; --model_name &lt;saved_model_name&gt;\n</code></pre>\n<p>or run directly by</p>\n<pre><code>python chiron/chiron_rcnn_train.py  --data_dir &lt;signal_label folder/ tfrecord file&gt; --log_dir &lt;model_log&gt;\n</code></pre>\n<h3>Training parameters</h3>\n<p>Following parameters can be passed to Chiron when training</p>\n<p><code>data_dir</code>(Required): The folder containing your signal and label files.<br>\n<code>log_dir</code>(Required): The folder where you want to save the model.<br>\n<code>model_name</code>(Required): The name of the model. The record will be stored in the directory <code>log_dir/model_name/</code>\n<code>tfrecord</code>: File name of tfrecord. Default is train.tfrecords.\n<code>sequence_len</code>: The length of the segment you want to separate the sequence into. Longer length requires larger RAM.<br>\n<code>batch_size</code>: The batch size.<br>\n<code>step_rate</code>: Learning rate of the optimizer.<br>\n<code>max_step</code>: Maximum step of the optimizer.<br>\n<code>k_mer</code>: Chiron supports learning based on k-mer instead of a single nucleotide, this should be an odd number, even numbers will cause an error.<br>\n<code>retrain</code>: If this is a new model, or you want to load the model you trained before. The model will be loaded from  <code>log_dir/model_name/</code></p>\n<h2>Train on Google Cloud ML engine</h2>\n<h3>local testing</h3>\n<p>Before training the model on cloud ml engine, please check if it is working on local machine or not by following commands</p>\n<pre><code>gcloud ml-engine local train \\\n    --module-name chiron.utils.raw \\\n    --package-path chiron.utils/  \\\n    -- --input input_fast5_folder \\\n    --output output\n\ngcloud ml-engine local train \\\n    --module-name chiron.chiron_rcnn_train \\\n    --package-path chiron/\n</code></pre>\n<p>If it is working well, please go to next step.</p>\n<h3>create a new bucket</h3>\n<pre><code>BUCKET_NAME=chiron-ml\nREGION=us-central1\ngsutil mb -l $REGION gs://$BUCKET_NAME\n</code></pre>\n<h3>Use gsutil to copy the fast5 files to your Cloud Storage bucket</h3>\n<pre><code>gsutil cp -r raw_fast_folder gs://$BUCKET_NAME/fast5-data\n</code></pre>\n<h3>Train model on google cloud ML engine</h3>\n<pre><code>JOB_NAME=chiron_single_1\nOUTPUT_PATH=gs://$BUCKET_NAME/$JOB_NAME\nINPUT_PATH=gs://$BUCKET_NAME/train_tfdata\n</code></pre>\n<pre><code>gcloud ml-engine jobs submit training $JOB_NAME \\\n    --staging-bucket gs://chiron-ml \\\n    --module-name chiron.chiron_rcnn_train \\\n    --package-path chiron/ \\\n    --region $REGION \\\n    --config config.yaml \\\n    -- \\\n    --data_dir gs://$BUCKET_NAME/train_tfdata \\\n    --cache_dir gs://$BUCKET_NAME/cache/train.hdf5 \\\n    --log_dir gs://$BUCKET_NAME/GVM_model\n</code></pre>\n<h2>Distributed training on Google Cloud ML Engine</h2>\n<h3>Configure</h3>\n<p>Change configure.yaml according to <a href=\"https://cloud.google.com/ml-engine/docs/training-overview\" rel=\"nofollow\">GCloud Docs</a>\nFor example the following configure_multi_gpu.yaml:</p>\n<pre><code>trainingInput: \n  scaleTier: CUSTOM \n  masterType: standard_p100 \n  workerType: standard_p100 \n  parameterServerType: large_model \n  workerCount: 3 \n  parameterServerCount: 3 \n</code></pre>\n<p>Will enable 3 workers + 1 master worker with one P-100 GPU in each worker.</p>\n<h3>Transfer fast5 files</h3>\n<pre><code>FAST5_FOLDER=/my/fast5/\nOTUPUT_FOLDER=/my/file_batch/\nSEGMENT_LEN=512\n</code></pre>\n<p><strong>Transfer fast5 to file batch</strong></p>\n<pre><code>python utils/file_batch.py --input $FAST5_FOLDER --output $OUTPUT_FOLDER --length $SEGMENT_LEN\n</code></pre>\n<p><strong>Copy to Google Cloud</strong></p>\n<pre><code>gsutil cp -r $OUTPUT_FOLDER gs://$BUCKET_NAME/file_batch\n</code></pre>\n<h3>Submit training request</h3>\n<pre><code>JOB_NAME=chiron_multi_4\nDATA_BUCKET=chiron-training-data\nMODEL_BUCKET=chiron-model\nREGION=us-central1\nMODEL_NAME=test_model1\nGPU_NUM=4\n</code></pre>\n<pre><code>gcloud ml-engine jobs submit training ${JOB_NAME} \\\n    --runtime-version 1.6 \\\n    --staging-bucket gs://chiron-model/ \\\n    --module-name chiron.chiron_multi_gpu_train \\\n    --package-path chiron \\\n    --region $REGION \\\n    --config config_multi_gpu.yaml \\\n    -- \\\n    -i gs://$DATA_BUCKET/file_batch \\\n    -o gs://$MODEL_BUCKET/ \\\n    -m ${MODEL_NAME} \\\n    -n ${GPU_NUM}\n</code></pre>\n\n          </div>"}, "last_serial": 6420500, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "8a5cb15c1ddce0867685e4deb90847d9", "sha256": "4899ad0e3271730f2687047d090781313ab476eabaa379f5f31a2fbb91433ee9"}, "downloads": -1, "filename": "chiron-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8a5cb15c1ddce0867685e4deb90847d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21478756, "upload_time": "2017-08-19T18:55:19", "upload_time_iso_8601": "2017-08-19T18:55:19.097749Z", "url": "https://files.pythonhosted.org/packages/6c/21/1c0e9990bacd4cfc51c7eaf49a445e8fd1691f9a5fa545033f07867df303/chiron-0.1.2.tar.gz", "yanked": false}], "0.1.2.1": [{"comment_text": "", "digests": {"md5": "c00b263b3349c70ba51783ff30463249", "sha256": "33cb8d4c39de3ba3c661942f34f9b2579a438f98e0ac2fd453fbfaa0bf94def3"}, "downloads": -1, "filename": "chiron-0.1.2.1.tar.gz", "has_sig": false, "md5_digest": "c00b263b3349c70ba51783ff30463249", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20609891, "upload_time": "2017-08-22T07:37:45", "upload_time_iso_8601": "2017-08-22T07:37:45.082162Z", "url": "https://files.pythonhosted.org/packages/c7/ad/1d30e117432ed4c3605dc7a66ffee80cf3cfb20318843081fd72a1490ce8/chiron-0.1.2.1.tar.gz", "yanked": false}], "0.1.2.2": [{"comment_text": "", "digests": {"md5": "9a5e40570d48a946f0c6f1d48f675519", "sha256": "418898369f014c80e61490bd5137edfb8ac0c9a330b99813fdefdc22a0c13fc2"}, "downloads": -1, "filename": "chiron-0.1.2.2.tar.gz", "has_sig": false, "md5_digest": "9a5e40570d48a946f0c6f1d48f675519", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20609868, "upload_time": "2017-08-22T07:50:15", "upload_time_iso_8601": "2017-08-22T07:50:15.358757Z", "url": "https://files.pythonhosted.org/packages/51/f8/eff612a0939b361aefe867dba40c09de412f3f948e40bc82c2645c7cde10/chiron-0.1.2.2.tar.gz", "yanked": false}], "0.1.2.3": [{"comment_text": "", "digests": {"md5": "726832ab32153912c09e4c80ca59df64", "sha256": "fb36d56a7121b1847fe7380d6ef665e98eca310a5625cbb23aea19c0bca53cc6"}, "downloads": -1, "filename": "chiron-0.1.2.3.tar.gz", "has_sig": false, "md5_digest": "726832ab32153912c09e4c80ca59df64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20609865, "upload_time": "2017-08-22T10:24:21", "upload_time_iso_8601": "2017-08-22T10:24:21.884706Z", "url": "https://files.pythonhosted.org/packages/41/f2/139795e024bb381771c89dbc047ae7a793f7ca74a8b4615553ddd61271fb/chiron-0.1.2.3.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1646954cb6e7a2a57e950514fed0a7ab", "sha256": "019f99d2c30d4c58a71359ff21e715be00ba307c04e86d3b7e543c9ba00bdeb6"}, "downloads": -1, "filename": "chiron-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1646954cb6e7a2a57e950514fed0a7ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23582244, "upload_time": "2017-08-23T05:30:08", "upload_time_iso_8601": "2017-08-23T05:30:08.577877Z", "url": "https://files.pythonhosted.org/packages/bb/dc/16208dec96e5205158d91a3082677704755a5a5a20d04d329da843d2a7b7/chiron-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "6545cc8b4ca44057c4ccc547415d61f3", "sha256": "57b8d8a9e32e4d64443e2353fbb0cb22b6613ef00037c0ce1bf0737694b3b410"}, "downloads": -1, "filename": "chiron-0.1.4.tar.gz", "has_sig": false, "md5_digest": "6545cc8b4ca44057c4ccc547415d61f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28043561, "upload_time": "2017-09-01T13:41:37", "upload_time_iso_8601": "2017-09-01T13:41:37.656807Z", "url": "https://files.pythonhosted.org/packages/ee/dc/5b1a9c661bbfa76713c28927875ea0d1dd462aba6477eeea2c34a12dc988/chiron-0.1.4.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5f2520ba696a994c8e9a56c2cc9f7a91", "sha256": "d48ec67b26e1b3bbc68e929343e37d922fbee59bf88baa7d1e758b6b6450339d"}, "downloads": -1, "filename": "chiron-0.2.tar.gz", "has_sig": false, "md5_digest": "5f2520ba696a994c8e9a56c2cc9f7a91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28035194, "upload_time": "2017-09-20T13:19:46", "upload_time_iso_8601": "2017-09-20T13:19:46.340935Z", "url": "https://files.pythonhosted.org/packages/d1/56/dedfaa8797c90097a9d79114b8e878332ad0f33ac9cee9190f2747b68c65/chiron-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a5a5aab4f274eebcc00b5a7318fbd6df", "sha256": "1fb1996321a96a85b813b4c40e62d70b2b7661d8a80222aad6cabcffca695ca1"}, "downloads": -1, "filename": "chiron-0.3.tar.gz", "has_sig": false, "md5_digest": "a5a5aab4f274eebcc00b5a7318fbd6df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28050382, "upload_time": "2017-11-08T07:02:46", "upload_time_iso_8601": "2017-11-08T07:02:46.508441Z", "url": "https://files.pythonhosted.org/packages/e8/73/a662033e786571f3f8161bcf545430f1e4872085e59ae6d289439cbd40cf/chiron-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "7c07a6ac00fae61b364e8da51865cc7b", "sha256": "cd3595620676743716cc2b09544f17c8d0b5a68199e664c187a2a7ea1afb0481"}, "downloads": -1, "filename": "chiron-0.4.tar.gz", "has_sig": false, "md5_digest": "7c07a6ac00fae61b364e8da51865cc7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43331617, "upload_time": "2018-06-07T09:13:05", "upload_time_iso_8601": "2018-06-07T09:13:05.632158Z", "url": "https://files.pythonhosted.org/packages/3a/33/d6d0a8da3ee3f45c2d60f5098721a34c1a2d8f544dc020c3b63850f91069/chiron-0.4.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "3378da162f0c6bee2862bb3df9b8311d", "sha256": "e5d7d57a4dd976bd305101306acc811fd33608b72cf8d9dc3c93af5cb54bd36b"}, "downloads": -1, "filename": "chiron-0.4.2.tar.gz", "has_sig": false, "md5_digest": "3378da162f0c6bee2862bb3df9b8311d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43367180, "upload_time": "2018-09-27T04:49:21", "upload_time_iso_8601": "2018-09-27T04:49:21.016480Z", "url": "https://files.pythonhosted.org/packages/48/c2/f7b82ab1b7725e83eb60a0928b6c8c1041621377aaa6cb2e7e08ea7490b8/chiron-0.4.2.tar.gz", "yanked": false}], "0.4.2.1": [{"comment_text": "", "digests": {"md5": "fa88c6e98189cea9eea9c0136741eced", "sha256": "a45baef2d74651185d8848fcc5a2abbf6663f8c3cbc6c4d1340c7ad7b0d2f0ec"}, "downloads": -1, "filename": "chiron-0.4.2.1.tar.gz", "has_sig": false, "md5_digest": "fa88c6e98189cea9eea9c0136741eced", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43513350, "upload_time": "2019-02-26T03:16:24", "upload_time_iso_8601": "2019-02-26T03:16:24.462975Z", "url": "https://files.pythonhosted.org/packages/fd/a7/59699e8ddb09d9dd42729efbfc1a2d9330b2dfd035274d4cfc06900fec81/chiron-0.4.2.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "558b6b7b36a92deed8a12e1bf1e7b5cc", "sha256": "7d5bece6e08297ff74ab699d7ecc0340c8f85883e45aedeb7c0c50fbf3d5e872"}, "downloads": -1, "filename": "chiron-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "558b6b7b36a92deed8a12e1bf1e7b5cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53379739, "upload_time": "2019-11-28T01:20:09", "upload_time_iso_8601": "2019-11-28T01:20:09.893262Z", "url": "https://files.pythonhosted.org/packages/13/f7/cd8d02a7f0e7b7965ed93b9328b964f6fa57b70ce2ea6432e56d464d018e/chiron-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62aeaf78f5ddb3352a7d5c64aaf60331", "sha256": "006801f25e711ccce99012b8a60c86002b31d4ea099ce9be1ceb4f851265abaa"}, "downloads": -1, "filename": "chiron-0.6.0.tar.gz", "has_sig": false, "md5_digest": "62aeaf78f5ddb3352a7d5c64aaf60331", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53283366, "upload_time": "2019-11-28T01:20:20", "upload_time_iso_8601": "2019-11-28T01:20:20.335045Z", "url": "https://files.pythonhosted.org/packages/c2/53/0638819e46645baf8125f5858424b2d7b8a9212d29407e98fd6df24c8954/chiron-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "ff67f9d0d396bcb4b3e81c1ebf4ac103", "sha256": "f96c4667a58a7e56097a532d9073d7c9aa13944435d1d3a0d9f3f91cf2e789d8"}, "downloads": -1, "filename": "chiron-0.6.1.tar.gz", "has_sig": false, "md5_digest": "ff67f9d0d396bcb4b3e81c1ebf4ac103", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53400898, "upload_time": "2019-11-28T01:40:37", "upload_time_iso_8601": "2019-11-28T01:40:37.400570Z", "url": "https://files.pythonhosted.org/packages/dc/b2/68611c1b634e44dc734c627c32abac9c8479f91009aca0e60781f01c3250/chiron-0.6.1.tar.gz", "yanked": false}], "0.6.1.1": [{"comment_text": "", "digests": {"md5": "6c6766ff0304989a02fc610284a358bb", "sha256": "ea04103f5508b7ce872f3ff6fe0414db6be11469d10483b380000645b26981a5"}, "downloads": -1, "filename": "chiron-0.6.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6c6766ff0304989a02fc610284a358bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53384242, "upload_time": "2020-01-09T07:22:36", "upload_time_iso_8601": "2020-01-09T07:22:36.824113Z", "url": "https://files.pythonhosted.org/packages/ae/e2/a9523b995c82744a1c45456acef6e54938dae0367e56dd5853500cdd7227/chiron-0.6.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5da1bf731176215587e5334f3fe4c943", "sha256": "00ff065d0fe237397a9fe40998bf6ac85f4f50c0fa92322f5e44f7694854df1b"}, "downloads": -1, "filename": "chiron-0.6.1.1.tar.gz", "has_sig": false, "md5_digest": "5da1bf731176215587e5334f3fe4c943", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53281188, "upload_time": "2020-01-09T07:22:47", "upload_time_iso_8601": "2020-01-09T07:22:47.278782Z", "url": "https://files.pythonhosted.org/packages/80/ae/bf35f32bb0d54fba18464541575b98644eb1750357b7338f054233f2ddf7/chiron-0.6.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c6766ff0304989a02fc610284a358bb", "sha256": "ea04103f5508b7ce872f3ff6fe0414db6be11469d10483b380000645b26981a5"}, "downloads": -1, "filename": "chiron-0.6.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6c6766ff0304989a02fc610284a358bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53384242, "upload_time": "2020-01-09T07:22:36", "upload_time_iso_8601": "2020-01-09T07:22:36.824113Z", "url": "https://files.pythonhosted.org/packages/ae/e2/a9523b995c82744a1c45456acef6e54938dae0367e56dd5853500cdd7227/chiron-0.6.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5da1bf731176215587e5334f3fe4c943", "sha256": "00ff065d0fe237397a9fe40998bf6ac85f4f50c0fa92322f5e44f7694854df1b"}, "downloads": -1, "filename": "chiron-0.6.1.1.tar.gz", "has_sig": false, "md5_digest": "5da1bf731176215587e5334f3fe4c943", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53281188, "upload_time": "2020-01-09T07:22:47", "upload_time_iso_8601": "2020-01-09T07:22:47.278782Z", "url": "https://files.pythonhosted.org/packages/80/ae/bf35f32bb0d54fba18464541575b98644eb1750357b7338f054233f2ddf7/chiron-0.6.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:32 2020"}