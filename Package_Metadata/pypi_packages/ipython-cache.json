{"info": {"author": "Bjoern Juergens", "author_email": "juergens@teco.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: IPython", "Framework :: Jupyter", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: Other/Proprietary License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "cache magic\n===========\n\nThis package adds ``%cache`` line-magic to ipython kernels in jupyter\nnotebooks.\n\nQuickstart\n----------\n\n-  The pip-package is called ``ipython-cache``\n-  The python module is called ``cache_magic``\n-  The magic is called ``%cache``\n\nSo you can run the magic by entering this into an ipython-cell:\n\n.. code:: python\n\n    !pip install ipython-cache\n    import cache_magic\n    %cache a = 1+1\n    %cache\n\ninstallation\n============\n\ninstall directly from notebook\n------------------------------\n\n1. open jupyter notebook\n2. create new cell\n3. enter ``!pip install cache-magic``\n4. execute\n\ninstall into conda-environment\n------------------------------\n\n.. code:: bash\n\n    conda create -n test\n    source activate test\n    conda install -c juergens ipython-cache\n    jupyter notebook\n\nusage\n=====\n\nActivate the magic by loading the module like any other module. Write\ninto a cell ``import cache_magic`` and excecute it.\n\nWhen you want to apply the magic to a line, just prepend the line with\n``%cache``\n\nexample\n-------\n\n::\n\n    %cache myVar = someSlowCalculation(some, \"parameters\")\n\nThis will calculate ``someSlowCalculation(some, \"parameters\")`` once.\nAnd in subsequent calls it restores myVar from storage.\n\nThe magic turns this example into something like this (if there was no\nipython-kernel and no versioning):\n\n.. code:: python\n\n    try:\n      with open(\"myVar.txt\", 'rb') as fp:\n        myVar = pickle.loads(fp.read())\n    except:\n      myVar = someSlowCalculation(some, \"parameters\")\n      with open(\"myVar.txt\", 'wb') as fp:\n        pickle.dump(myVar, fp)\n\ngeneral form\n------------\n\n::\n\n    %cache <variable> = <expression>\n\n**Variable**: This Variable\u2019s value will be fetched from cache.\n\n**Expression**: This will only be excecuted once and the result will be\nstored to disk.\n\nfull form\n---------\n\n::\n\n    %cache [--version <version>] [--reset] [--debug] variable [= <expression>]\n\n**-v or \u2013version**: either a variable name or an integer. Whenever this\nchanges, a new value is calculated (instead of returning an old value\nfrom the cache).\n\nif version is \u2018\\*\u2019 or omitted, the hashed expression is used as version,\nso whenever the expression changes, a new value is cached.\n\n**-r or \u2013reset**: delete the cached value for this variable. Forces\nrecalculation, if ``<expression>`` is present\n\n**-d or \u2013debug**: additional logging\n\nshow cache\n----------\n\n.. code:: python\n\n    %cache\n\nshows all variables in cache as html-table\n\nfull reset\n----------\n\n.. code:: python\n\n    %cache -r\n    %cache --reset\n\ndeletes all cached values for all variables\n\nwhere is the cache stored?\n--------------------------\n\nIn the directory where the kernel was started (usually where the\nnotebook is located) in a subfolder called ``.cache_magic``\n\ndeveloper Notes\n===============\n\npush to pypi\n------------\n\nprepare environment:\n\n.. code:: bash\n\n    gedit ~/.pypirc\n    chmod 600 ~/.pypirc\n    sudo apt install pandoc\n\nupload changes to test and production:\n\n.. code:: bash\n\n    pandoc -o README.rst README.md\n    restview --pypi-strict README.rst\n    # update version in setup.py\n    rm -r dist\n    python setup.py sdist\n    twine upload dist/* -r testpypi\n    firefox https://testpypi.python.org/pypi/ipython-cache\n    twine upload dist/*\n\ntest install from testpypi\n\n.. code:: bash\n\n    pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ipython_cache --no-cache-dir --user\n\ntest installation\n\n.. code:: bash\n\n    sudo pip install ipython_cache --no-cache-dir --user\n\neditable import\n---------------\n\nInstall into environment with ``-e``:\n\n.. code:: python\n\n    !pip install -e .\n\nreload after each change:\n\n.. code:: bash\n\n    import cache_magic\n    from imp import reload\n    reload(cache_magic)\n\nAlternatively (if you don\u2019t want to install python, jupyter & co), you\ncan use the docker-compose.yml for development:\n\n.. code:: bash\n\n    cd ipython-cache\n    docker-compose up\n\ncreate Conda Packet\n-------------------\n\nrequires the bash with latest anaconda on path\n\n.. code:: bash\n\n    bash\n    mkdir test && cd test\n    conda skeleton pypi ipython-cache\n    conda-build ipython-cache -c conda-forge\n    anaconda upload /home/juergens/anaconda3/conda-bld/linux-64/ipython-cache-*\n\nrunning tests\n-------------\n\n.. code:: bash\n\n    bash\n    conda remove --name test --all\n    conda env create -f test/environment.yml\n    source activate test\n    conda remove ipython-cache\n    pip uninstall ipython_cache\n    pip install -e .\n    ./test/run_example.py\n\nIf there is any error, it will be printed to stderr and the script\nfails.\n\nthe output can be found in \u201ctest/temp\u201d.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SmartDataInnovationLab/ipython-cache", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ipython-cache", "package_url": "https://pypi.org/project/ipython-cache/", "platform": "", "project_url": "https://pypi.org/project/ipython-cache/", "project_urls": {"Homepage": "https://github.com/SmartDataInnovationLab/ipython-cache"}, "release_url": "https://pypi.org/project/ipython-cache/0.2.6/", "requires_dist": null, "requires_python": "", "summary": "versatile cache line magic for ipython", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"cache-magic\">\n<h2>cache magic</h2>\n<p>This package adds <tt>%cache</tt> line-magic to ipython kernels in jupyter\nnotebooks.</p>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<ul>\n<li>The pip-package is called <tt><span class=\"pre\">ipython-cache</span></tt></li>\n<li>The python module is called <tt>cache_magic</tt></li>\n<li>The magic is called <tt>%cache</tt></li>\n</ul>\n<p>So you can run the magic by entering this into an ipython-cell:</p>\n<pre><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"n\">cache</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cache_magic</span>\n<span class=\"o\">%</span><span class=\"n\">cache</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n<span class=\"o\">%</span><span class=\"n\">cache</span>\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>installation</h2>\n<div id=\"install-directly-from-notebook\">\n<h3>install directly from notebook</h3>\n<ol>\n<li>open jupyter notebook</li>\n<li>create new cell</li>\n<li>enter <tt>!pip install <span class=\"pre\">cache-magic</span></tt></li>\n<li>execute</li>\n</ol>\n</div>\n<div id=\"install-into-conda-environment\">\n<h3>install into conda-environment</h3>\n<pre>conda create -n <span class=\"nb\">test</span>\n<span class=\"nb\">source</span> activate <span class=\"nb\">test</span>\nconda install -c juergens ipython-cache\njupyter notebook\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>usage</h2>\n<p>Activate the magic by loading the module like any other module. Write\ninto a cell <tt>import cache_magic</tt> and excecute it.</p>\n<p>When you want to apply the magic to a line, just prepend the line with\n<tt>%cache</tt></p>\n<div id=\"example\">\n<h3>example</h3>\n<pre>%cache myVar = someSlowCalculation(some, \"parameters\")\n</pre>\n<p>This will calculate <tt>someSlowCalculation(some, \"parameters\")</tt> once.\nAnd in subsequent calls it restores myVar from storage.</p>\n<p>The magic turns this example into something like this (if there was no\nipython-kernel and no versioning):</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"myVar.txt\"</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n    <span class=\"n\">myVar</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n  <span class=\"n\">myVar</span> <span class=\"o\">=</span> <span class=\"n\">someSlowCalculation</span><span class=\"p\">(</span><span class=\"n\">some</span><span class=\"p\">,</span> <span class=\"s2\">\"parameters\"</span><span class=\"p\">)</span>\n  <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"myVar.txt\"</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n    <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">myVar</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"general-form\">\n<h3>general form</h3>\n<pre>%cache &lt;variable&gt; = &lt;expression&gt;\n</pre>\n<p><strong>Variable</strong>: This Variable\u2019s value will be fetched from cache.</p>\n<p><strong>Expression</strong>: This will only be excecuted once and the result will be\nstored to disk.</p>\n</div>\n<div id=\"full-form\">\n<h3>full form</h3>\n<pre>%cache [--version &lt;version&gt;] [--reset] [--debug] variable [= &lt;expression&gt;]\n</pre>\n<p><strong>-v or \u2013version</strong>: either a variable name or an integer. Whenever this\nchanges, a new value is calculated (instead of returning an old value\nfrom the cache).</p>\n<p>if version is \u2018*\u2019 or omitted, the hashed expression is used as version,\nso whenever the expression changes, a new value is cached.</p>\n<p><strong>-r or \u2013reset</strong>: delete the cached value for this variable. Forces\nrecalculation, if <tt>&lt;expression&gt;</tt> is present</p>\n<p><strong>-d or \u2013debug</strong>: additional logging</p>\n</div>\n<div id=\"show-cache\">\n<h3>show cache</h3>\n<pre><span class=\"o\">%</span><span class=\"n\">cache</span>\n</pre>\n<p>shows all variables in cache as html-table</p>\n</div>\n<div id=\"full-reset\">\n<h3>full reset</h3>\n<pre><span class=\"o\">%</span><span class=\"n\">cache</span> <span class=\"o\">-</span><span class=\"n\">r</span>\n<span class=\"o\">%</span><span class=\"n\">cache</span> <span class=\"o\">--</span><span class=\"n\">reset</span>\n</pre>\n<p>deletes all cached values for all variables</p>\n</div>\n<div id=\"where-is-the-cache-stored\">\n<h3>where is the cache stored?</h3>\n<p>In the directory where the kernel was started (usually where the\nnotebook is located) in a subfolder called <tt>.cache_magic</tt></p>\n</div>\n</div>\n<div id=\"developer-notes\">\n<h2>developer Notes</h2>\n<div id=\"push-to-pypi\">\n<h3>push to pypi</h3>\n<p>prepare environment:</p>\n<pre>gedit ~/.pypirc\nchmod <span class=\"m\">600</span> ~/.pypirc\nsudo apt install pandoc\n</pre>\n<p>upload changes to test and production:</p>\n<pre>pandoc -o README.rst README.md\nrestview --pypi-strict README.rst\n<span class=\"c1\"># update version in setup.py\n</span>rm -r dist\npython setup.py sdist\ntwine upload dist/* -r testpypi\nfirefox https://testpypi.python.org/pypi/ipython-cache\ntwine upload dist/*\n</pre>\n<p>test install from testpypi</p>\n<pre>pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ipython_cache --no-cache-dir --user\n</pre>\n<p>test installation</p>\n<pre>sudo pip install ipython_cache --no-cache-dir --user\n</pre>\n</div>\n<div id=\"editable-import\">\n<h3>editable import</h3>\n<p>Install into environment with <tt><span class=\"pre\">-e</span></tt>:</p>\n<pre><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"o\">.</span>\n</pre>\n<p>reload after each change:</p>\n<pre>import cache_magic\nfrom imp import reload\nreload<span class=\"o\">(</span>cache_magic<span class=\"o\">)</span>\n</pre>\n<p>Alternatively (if you don\u2019t want to install python, jupyter &amp; co), you\ncan use the docker-compose.yml for development:</p>\n<pre><span class=\"nb\">cd</span> ipython-cache\ndocker-compose up\n</pre>\n</div>\n<div id=\"create-conda-packet\">\n<h3>create Conda Packet</h3>\n<p>requires the bash with latest anaconda on path</p>\n<pre>bash\nmkdir <span class=\"nb\">test</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> <span class=\"nb\">test</span>\nconda skeleton pypi ipython-cache\nconda-build ipython-cache -c conda-forge\nanaconda upload /home/juergens/anaconda3/conda-bld/linux-64/ipython-cache-*\n</pre>\n</div>\n<div id=\"running-tests\">\n<h3>running tests</h3>\n<pre>bash\nconda remove --name <span class=\"nb\">test</span> --all\nconda env create -f test/environment.yml\n<span class=\"nb\">source</span> activate <span class=\"nb\">test</span>\nconda remove ipython-cache\npip uninstall ipython_cache\npip install -e .\n./test/run_example.py\n</pre>\n<p>If there is any error, it will be printed to stderr and the script\nfails.</p>\n<p>the output can be found in \u201ctest/temp\u201d.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3523927, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "1ac5f693b628dfb418975d86685d4464", "sha256": "d1456b39a2d12cb6fe22a23046ade4709dfcbd6a235509de94328eebef8a8c86"}, "downloads": -1, "filename": "ipython-cache-0.2.tar.gz", "has_sig": false, "md5_digest": "1ac5f693b628dfb418975d86685d4464", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5244, "upload_time": "2018-01-25T16:13:34", "upload_time_iso_8601": "2018-01-25T16:13:34.298377Z", "url": "https://files.pythonhosted.org/packages/c0/66/8eb30e2cdf7c2b22baaa7b154b054fc2ef4ad244a7a36a350e89498f4dc8/ipython-cache-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "84528671773431a7aec9f92f689c2fb1", "sha256": "fb1222e9e5eb8b7064e319f678b84766e08e9fd7df8faf26f8d9a4bb1529528f"}, "downloads": -1, "filename": "ipython-cache-0.2.1.tar.gz", "has_sig": false, "md5_digest": "84528671773431a7aec9f92f689c2fb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5734, "upload_time": "2018-01-25T16:20:24", "upload_time_iso_8601": "2018-01-25T16:20:24.154735Z", "url": "https://files.pythonhosted.org/packages/f0/30/3e66cd6ae907ee6a3618a1a86dd082f5b8b8cb1896d392e12664f5938a3f/ipython-cache-0.2.1.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "3681319b0ff33f4f60e5bdee50831a96", "sha256": "a3b3ceb152c4be887982969cfdea53acdcaa16224ad2173c80a432ad339a612d"}, "downloads": -1, "filename": "ipython-cache-0.2.4.tar.gz", "has_sig": false, "md5_digest": "3681319b0ff33f4f60e5bdee50831a96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6272, "upload_time": "2018-01-25T17:03:18", "upload_time_iso_8601": "2018-01-25T17:03:18.210557Z", "url": "https://files.pythonhosted.org/packages/dd/43/7f7b62f899a312273b7b75fb379ec75ba06ea4b56937f0ac9342c450b371/ipython-cache-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "a320425f87a1fb828d905a587820693c", "sha256": "3df613c306eaf7e4a8b7c0c760b7be456680d841b3b4349c513d1be2a5c29d27"}, "downloads": -1, "filename": "ipython-cache-0.2.5.tar.gz", "has_sig": false, "md5_digest": "a320425f87a1fb828d905a587820693c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6297, "upload_time": "2018-01-25T18:02:31", "upload_time_iso_8601": "2018-01-25T18:02:31.203917Z", "url": "https://files.pythonhosted.org/packages/1d/7e/d4731dbc732e73916883ef27bc0f65f83fc89c60df6669accddb4d181a4f/ipython-cache-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "2d6d18a325a5a6bc1db6a2ef29119a35", "sha256": "354f58268db34ba5d69154673f368ba4feee2ebfce9ed3d099eb13bae5a369c5"}, "downloads": -1, "filename": "ipython-cache-0.2.6.tar.gz", "has_sig": false, "md5_digest": "2d6d18a325a5a6bc1db6a2ef29119a35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6816, "upload_time": "2018-01-26T11:52:51", "upload_time_iso_8601": "2018-01-26T11:52:51.260041Z", "url": "https://files.pythonhosted.org/packages/73/d8/27823c53e27450ce920bb1f22aa9f70838f6a1ccdbcdedc658549b9b585b/ipython-cache-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d6d18a325a5a6bc1db6a2ef29119a35", "sha256": "354f58268db34ba5d69154673f368ba4feee2ebfce9ed3d099eb13bae5a369c5"}, "downloads": -1, "filename": "ipython-cache-0.2.6.tar.gz", "has_sig": false, "md5_digest": "2d6d18a325a5a6bc1db6a2ef29119a35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6816, "upload_time": "2018-01-26T11:52:51", "upload_time_iso_8601": "2018-01-26T11:52:51.260041Z", "url": "https://files.pythonhosted.org/packages/73/d8/27823c53e27450ce920bb1f22aa9f70838f6a1ccdbcdedc658549b9b585b/ipython-cache-0.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:25 2020"}