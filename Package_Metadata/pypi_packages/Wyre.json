{"info": {"author": "Abel Andr\u00e9", "author_email": "abel.andre.87@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Philosophy\n----------\n\nInjecting class dependencies comes in 3 distinct ways :\n\n-  *using class attributes (okay)*\n-  using setters (better)\n-  **using constructor (best)**\n\nWyre allows you to declare the dependencies of a given class using kwargs on a constructor. A single decorator ``@inject`` does the trick. This is particularly handy when your dependency tree grows large and deep. For example, this dependency chain : ``A < B < C < D < E``, would require you to write ``a = A(B(C(D(E()))))`` in order to create an instance of your class.\n\nUsing Wyre, you keep :\n\n- your production code clean by writing just ``A()`` since it works recursively\n- your unit tests simple : ``A(b=Mock())`` is all you need to mock out dependencies\n\nUsage\n-----\n\n.. code:: python\n\n    class C:\n        name = 'Bob'\n\n\n    class B:\n        @inject\n        def __init__(self, other_dependency=C):\n            self.c = other_dependency\n\n        def say_hello(self):\n            return 'Hello %s !' % self.c.name\n\n\n    class A:\n        @inject\n        def __init__(self, dependency=B):\n            self.b = dependency\n\n        def greetings(self):\n            return self.b.say_hello()\n\n    a = A()\n    a.greetings() # returns 'Hello Bob !'\n\nSince ``__init__`` is decorated with ``@inject``, ``B`` instance will be created and injected in ``A`` at instantiation time.\n\nLimitations\n-----------\n\nImportant notes on what ``@inject`` does :\n\n- If an instance of a dependency is provided in ``kwargs``, it will be preserved and not overridden by a new instance.\n- Circular dependencies are detected at instantiation time : an ``InjectionError`` will be raised.\n- You can only use it on ``__init__()``. If you decorate any other function : an ``InjectionError`` will be raised.\n- If no dependency is found among declared ``kwargs`` : an ``InjectionError`` will be raised.\n- Wyre is strongly opinionated about dependency injection. As a matter of fact, singletons are not even considered.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/blndr/wyre", "keywords": "dependency", "license": "", "maintainer": "", "maintainer_email": "", "name": "Wyre", "package_url": "https://pypi.org/project/Wyre/", "platform": "", "project_url": "https://pypi.org/project/Wyre/", "project_urls": {"Homepage": "https://gitlab.com/blndr/wyre"}, "release_url": "https://pypi.org/project/Wyre/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Lightweight dependency injection for pure OOP.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"philosophy\">\n<h2>Philosophy</h2>\n<p>Injecting class dependencies comes in 3 distinct ways :</p>\n<ul>\n<li><em>using class attributes (okay)</em></li>\n<li>using setters (better)</li>\n<li><strong>using constructor (best)</strong></li>\n</ul>\n<p>Wyre allows you to declare the dependencies of a given class using kwargs on a constructor. A single decorator <tt>@inject</tt> does the trick. This is particularly handy when your dependency tree grows large and deep. For example, this dependency chain : <tt>A &lt; B &lt; C &lt; D &lt; E</tt>, would require you to write <tt>a = <span class=\"pre\">A(B(C(D(E()))))</span></tt> in order to create an instance of your class.</p>\n<p>Using Wyre, you keep :</p>\n<ul>\n<li>your production code clean by writing just <tt>A()</tt> since it works recursively</li>\n<li>your unit tests simple : <tt><span class=\"pre\">A(b=Mock())</span></tt> is all you need to mock out dependencies</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Bob'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other_dependency</span><span class=\"o\">=</span><span class=\"n\">C</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">other_dependency</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'Hello </span><span class=\"si\">%s</span><span class=\"s1\"> !'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dependency</span><span class=\"o\">=</span><span class=\"n\">B</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">dependency</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">greetings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">say_hello</span><span class=\"p\">()</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">greetings</span><span class=\"p\">()</span> <span class=\"c1\"># returns 'Hello Bob !'</span>\n</pre>\n<p>Since <tt>__init__</tt> is decorated with <tt>@inject</tt>, <tt>B</tt> instance will be created and injected in <tt>A</tt> at instantiation time.</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>Important notes on what <tt>@inject</tt> does :</p>\n<ul>\n<li>If an instance of a dependency is provided in <tt>kwargs</tt>, it will be preserved and not overridden by a new instance.</li>\n<li>Circular dependencies are detected at instantiation time : an <tt>InjectionError</tt> will be raised.</li>\n<li>You can only use it on <tt>__init__()</tt>. If you decorate any other function : an <tt>InjectionError</tt> will be raised.</li>\n<li>If no dependency is found among declared <tt>kwargs</tt> : an <tt>InjectionError</tt> will be raised.</li>\n<li>Wyre is strongly opinionated about dependency injection. As a matter of fact, singletons are not even considered.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3168943, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "1a0cd15fb078af84cfe1afbc1113f883", "sha256": "d00650aa10c95161342f5faad4c3e55c8dfaa1cc38ca1db59f8e7f4d651290df"}, "downloads": -1, "filename": "wyre-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1a0cd15fb078af84cfe1afbc1113f883", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4637, "upload_time": "2017-09-11T21:34:15", "upload_time_iso_8601": "2017-09-11T21:34:15.582412Z", "url": "https://files.pythonhosted.org/packages/97/35/21c669ea597e98855031fd5345311a98dd1442f21fa3d1108f909d65cbc6/wyre-0.1.1.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "fb8aa3ba07c4d14f8cfe12727230c71b", "sha256": "154f9ea45193729a020f0a2c03ef922fb912345073dc30e6a40ee5a540f05eea"}, "downloads": -1, "filename": "wyre-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fb8aa3ba07c4d14f8cfe12727230c71b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4955, "upload_time": "2017-09-12T20:31:56", "upload_time_iso_8601": "2017-09-12T20:31:56.393073Z", "url": "https://files.pythonhosted.org/packages/3a/1a/afcc4e737f363360f36cab9d73d7ede809e7261dd658de6facd05181b562/wyre-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb8aa3ba07c4d14f8cfe12727230c71b", "sha256": "154f9ea45193729a020f0a2c03ef922fb912345073dc30e6a40ee5a540f05eea"}, "downloads": -1, "filename": "wyre-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fb8aa3ba07c4d14f8cfe12727230c71b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4955, "upload_time": "2017-09-12T20:31:56", "upload_time_iso_8601": "2017-09-12T20:31:56.393073Z", "url": "https://files.pythonhosted.org/packages/3a/1a/afcc4e737f363360f36cab9d73d7ede809e7261dd658de6facd05181b562/wyre-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:26:33 2020"}