{"info": {"author": "Wim Glenn", "author_email": "hey@wimglenn.com", "bugtrack_url": null, "classifiers": ["Framework :: Pytest", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "|travis|_ |pypi|_ |pyversions|_ |womm|_\n\n.. |travis| image:: https://travis-ci.com/wimglenn/pytest-structlog.svg?branch=master\n.. _travis: https://travis-ci.com/wimglenn/pytest-structlog\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pytest-structlog.svg\n.. _pypi: https://pypi.org/project/pytest-structlog\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/pytest-structlog.svg\n.. _pyversions:\n\n.. |womm| image:: https://cdn.rawgit.com/nikku/works-on-my-machine/v0.2.0/badge.svg\n.. _womm: https://github.com/nikku/works-on-my-machine\n\n\npytest-structlog\n================\n\nStructured logging assertions.  pytest_ + structlog_ = ``pytest-structlog``.\n\n|pytest|    |structlog|\n\n\nInstallation:\n-------------\n\n.. code-block:: bash\n\n   $ pip install pytest-structlog\n\nUsage:\n------\n\nThe fixture name is ``log``. It has two attributes of interest: ``log.events`` is a list of events from captured log calls, and ``log.has`` is a helper function for asserting a single event was logged within the expected context.\n\nSuppose you have some library module, ``your_lib``, which is using ``structlog``:\n\n.. code-block:: python\n\n   # your_lib.py\n   from structlog import get_logger\n\n   logger = get_logger()\n\n   def spline_reticulator():\n       logger.info(\"reticulating splines\")\n       for i in range(3):\n           logger.debug(\"processing\", spline=i)\n       logger.info(\"reticulated splines\", n_splines=3)\n\n\nThen your test suite might use assertions such as shown below:\n\n.. code-block:: python\n\n   # test_your_lib.py\n   from your_lib import spline_reticulator\n\n   def test_spline_reticulator(log):\n       assert len(log.events) == 0\n       spline_reticulator()\n       assert len(log.events) == 5\n\n       # can assert on the event only\n       assert log.has(\"reticulating splines\")\n\n       # can assert with subcontext\n       assert log.has(\"reticulated splines\")\n       assert log.has(\"reticulated splines\", n_splines=3)\n       assert log.has(\"reticulated splines\", n_splines=3, level=\"info\")\n\n       # but not incorrect context\n       assert not log.has(\"reticulated splines\", n_splines=42)\n       assert not log.has(\"reticulated splines\", key=\"bogus\")\n\n       # can assert with the event dicts directly\n       assert log.events == [\n           {\"event\": \"reticulating splines\", \"level\": \"info\"},\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 0},\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 1},\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 2},\n           {\"event\": \"reticulated splines\", \"level\": \"info\", \"n_splines\": 3},\n       ]\n\n       # can use membership to check for a single event's data\n       assert {\"event\": \"reticulating splines\", \"level\": \"info\"} in log.events\n\n       # can use >= to specify only the events you're interested in\n       assert log.events >= [\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 0},\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 2},\n       ]\n\n       # or put the comparison the other way around if you prefer\n       assert [\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 0},\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 2},\n       ] <= log.events\n\n       # note: comparisons are order sensitive!\n       assert not [\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 2},\n           {\"event\": \"processing\", \"level\": \"debug\", \"spline\": 0},\n       ] <= log.events\n\n\n.. _pytest: https://docs.pytest.org/\n.. _structlog: https://www.structlog.org/\n.. |pytest| image:: https://user-images.githubusercontent.com/6615374/46903931-515eef00-cea2-11e8-8945-980ddbf0a053.png\n.. |structlog| image:: https://user-images.githubusercontent.com/6615374/46903937-5b80ed80-cea2-11e8-9b85-d3f071180fe1.png\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wimglenn/pytest-structlog", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-structlog", "package_url": "https://pypi.org/project/pytest-structlog/", "platform": "", "project_url": "https://pypi.org/project/pytest-structlog/", "project_urls": {"Homepage": "https://github.com/wimglenn/pytest-structlog"}, "release_url": "https://pypi.org/project/pytest-structlog/0.2/", "requires_dist": ["pytest", "structlog"], "requires_python": "", "summary": "Structured logging assertions", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/wimglenn/pytest-structlog\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/862af2adde3f7cedc5867cde754ca8900a19a4c9/68747470733a2f2f7472617669732d63692e636f6d2f77696d676c656e6e2f7079746573742d7374727563746c6f672e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/pytest-structlog\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01a462d5516de947cd3a1cd0d670b2702ff815d0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d7374727563746c6f672e737667\"></a> <a href=\"#pyversions\" rel=\"nofollow\"><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ba4f6d627117ecb70e8fe9a996a656a6a54931d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d7374727563746c6f672e737667\"></a> <a href=\"https://github.com/nikku/works-on-my-machine\" rel=\"nofollow\"><img alt=\"womm\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1ed00d0b017bce078a1b160ba0a3a0e789ca14b/68747470733a2f2f63646e2e7261776769742e636f6d2f6e696b6b752f776f726b732d6f6e2d6d792d6d616368696e652f76302e322e302f62616467652e737667\"></a></p>\n<span class=\"target\" id=\"pyversions\"></span><div id=\"pytest-structlog\">\n<h2>pytest-structlog</h2>\n<p>Structured logging assertions.  <a href=\"https://docs.pytest.org/\" rel=\"nofollow\">pytest</a> + <a href=\"https://www.structlog.org/\" rel=\"nofollow\">structlog</a> = <tt><span class=\"pre\">pytest-structlog</span></tt>.</p>\n<p><img alt=\"pytest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fdf4bc94db22ef7876110117922099d1bce209b/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363631353337342f34363930333933312d35313565656630302d636561322d313165382d383934352d3938306464626630613035332e706e67\">    <img alt=\"structlog\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9c46529dfda1b0ef00e4e0a2b607732ee85c8bd/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363631353337342f34363930333933372d35623830656438302d636561322d313165382d396238352d6433663037313138306665312e706e67\"></p>\n<div id=\"installation\">\n<h3>Installation:</h3>\n<pre>$ pip install pytest-structlog\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage:</h3>\n<p>The fixture name is <tt>log</tt>. It has two attributes of interest: <tt>log.events</tt> is a list of events from captured log calls, and <tt>log.has</tt> is a helper function for asserting a single event was logged within the expected context.</p>\n<p>Suppose you have some library module, <tt>your_lib</tt>, which is using <tt>structlog</tt>:</p>\n<pre><span class=\"c1\"># your_lib.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">structlog</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">spline_reticulator</span><span class=\"p\">():</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"reticulating splines\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"n\">spline</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"reticulated splines\"</span><span class=\"p\">,</span> <span class=\"n\">n_splines</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>Then your test suite might use assertions such as shown below:</p>\n<pre><span class=\"c1\"># test_your_lib.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">your_lib</span> <span class=\"kn\">import</span> <span class=\"n\">spline_reticulator</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_spline_reticulator</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"n\">spline_reticulator</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n\n    <span class=\"c1\"># can assert on the event only</span>\n    <span class=\"k\">assert</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s2\">\"reticulating splines\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># can assert with subcontext</span>\n    <span class=\"k\">assert</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s2\">\"reticulated splines\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s2\">\"reticulated splines\"</span><span class=\"p\">,</span> <span class=\"n\">n_splines</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s2\">\"reticulated splines\"</span><span class=\"p\">,</span> <span class=\"n\">n_splines</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s2\">\"info\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># but not incorrect context</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s2\">\"reticulated splines\"</span><span class=\"p\">,</span> <span class=\"n\">n_splines</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s2\">\"reticulated splines\"</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"bogus\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># can assert with the event dicts directly</span>\n    <span class=\"k\">assert</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">events</span> <span class=\"o\">==</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"reticulating splines\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"info\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"reticulated splines\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"info\"</span><span class=\"p\">,</span> <span class=\"s2\">\"n_splines\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># can use membership to check for a single event's data</span>\n    <span class=\"k\">assert</span> <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"reticulating splines\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"info\"</span><span class=\"p\">}</span> <span class=\"ow\">in</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">events</span>\n\n    <span class=\"c1\"># can use &gt;= to specify only the events you're interested in</span>\n    <span class=\"k\">assert</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">events</span> <span class=\"o\">&gt;=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># or put the comparison the other way around if you prefer</span>\n    <span class=\"k\">assert</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">events</span>\n\n    <span class=\"c1\"># note: comparisons are order sensitive!</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"processing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spline\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n    <span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">events</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6010391, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2c3292041eb989e0db8113070c025f46", "sha256": "41154e912f4210e42a8b944eef2b83397a0315417563861257118e53051f1947"}, "downloads": -1, "filename": "pytest_structlog-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2c3292041eb989e0db8113070c025f46", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4296, "upload_time": "2018-10-13T10:06:43", "upload_time_iso_8601": "2018-10-13T10:06:43.976822Z", "url": "https://files.pythonhosted.org/packages/c8/1f/dc367638f3f896d8fa4db21f42f923ce7d8c2249c89709f2e24032aedea8/pytest_structlog-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cda620c20893b51a62824e62f155eae", "sha256": "978f2e7d98d14d5addf4e4caaf9216ceac75bbe9e527d46eed0441a1116c3300"}, "downloads": -1, "filename": "pytest-structlog-0.1.tar.gz", "has_sig": false, "md5_digest": "8cda620c20893b51a62824e62f155eae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4578, "upload_time": "2018-10-13T10:06:57", "upload_time_iso_8601": "2018-10-13T10:06:57.111246Z", "url": "https://files.pythonhosted.org/packages/61/5b/5a7b5843959c46fcd8ae2c8c8af8dd7932f824eb4bb9a4ccaa73e630adea/pytest-structlog-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "61d601af03edb7fb3caf4a4f0e005225", "sha256": "82b387afbdbe343c31e5454deb99a55fd9b876d0c552392bbe0670b26e385ef1"}, "downloads": -1, "filename": "pytest_structlog-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "61d601af03edb7fb3caf4a4f0e005225", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4542, "upload_time": "2019-10-22T03:54:15", "upload_time_iso_8601": "2019-10-22T03:54:15.003375Z", "url": "https://files.pythonhosted.org/packages/80/99/9d20f200c31527a3ad8809a6c566ea8a8cf5c0e7ffe66f7233a6f7ba38e8/pytest_structlog-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b1801c3762295b69031c089c0e228fa", "sha256": "2b76b39aa53d6bcfd8cd5082fa82e759a0be4b58f4dbfad6bceeeee77ee63813"}, "downloads": -1, "filename": "pytest-structlog-0.2.tar.gz", "has_sig": false, "md5_digest": "6b1801c3762295b69031c089c0e228fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4809, "upload_time": "2019-10-22T03:54:29", "upload_time_iso_8601": "2019-10-22T03:54:29.596537Z", "url": "https://files.pythonhosted.org/packages/b7/70/4b407ae4ca9d70437cdc1ba7ca5547049a1b31ec0b71fe8d2da1a16d1bb6/pytest-structlog-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61d601af03edb7fb3caf4a4f0e005225", "sha256": "82b387afbdbe343c31e5454deb99a55fd9b876d0c552392bbe0670b26e385ef1"}, "downloads": -1, "filename": "pytest_structlog-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "61d601af03edb7fb3caf4a4f0e005225", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4542, "upload_time": "2019-10-22T03:54:15", "upload_time_iso_8601": "2019-10-22T03:54:15.003375Z", "url": "https://files.pythonhosted.org/packages/80/99/9d20f200c31527a3ad8809a6c566ea8a8cf5c0e7ffe66f7233a6f7ba38e8/pytest_structlog-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b1801c3762295b69031c089c0e228fa", "sha256": "2b76b39aa53d6bcfd8cd5082fa82e759a0be4b58f4dbfad6bceeeee77ee63813"}, "downloads": -1, "filename": "pytest-structlog-0.2.tar.gz", "has_sig": false, "md5_digest": "6b1801c3762295b69031c089c0e228fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4809, "upload_time": "2019-10-22T03:54:29", "upload_time_iso_8601": "2019-10-22T03:54:29.596537Z", "url": "https://files.pythonhosted.org/packages/b7/70/4b407ae4ca9d70437cdc1ba7ca5547049a1b31ec0b71fe8d2da1a16d1bb6/pytest-structlog-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:40 2020"}