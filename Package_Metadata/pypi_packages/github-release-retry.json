{"info": {"author": "The github-release-retry Project Authors", "author_email": "android-graphics-tools-team@google.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only"], "description": "# github-release-retry\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n\n`github-release-retry` is a\ntool for creating GitHub Releases and uploading assets **reliably**.\nIt differs from other\ntools because it uploads\nassets reliably by\nverifying that the asset\nexists,\nand retries (deleting partial assets) if not.\n\nThis is not an officially supported Google product.\n\n## Install\n\nRequires Python 3.6+.\n\nTo ensure you use the `pip` module associated with your\npreferred Python 3.6+ binary:\n\n```bash\npython3 -m pip install --user github-release-retry\n# where `python3` is your preferred Python 3.6+ binary.\n# Omit `--user` to install for all users.\n```\n\nOr just:\n\n```bash\npip3 install --user github-release-retry\n# where `pip3` is your version of pip for Python 3.6+.\n# Omit `--user` to install for all users.\n```\n\n## Usage\n\nIf your [Python user scripts directory](https://www.python.org/dev/peps/pep-0370/)\nis not on your `PATH`,\nyou can use:\n\n```bash\npython3 -m github_release_retry.github_release_retry\n# where `python3` is your preferred Python 3.6+ binary.\n```\n\nOtherwise:\n\n```bash\n$ github-release-retry -h\nusage: github-release-retry [-h] --user USER --repo REPO --tag_name TAG_NAME\n                            [--target_commitish TARGET_COMMITISH]\n                            [--release_name RELEASE_NAME]\n                            (--body_string BODY_STRING | --body_file BODY_FILE)\n                            [--draft] [--prerelease]\n                            [--github_api_url GITHUB_API_URL]\n                            [--retry_limit RETRY_LIMIT]\n                            [files [files ...]]\n\nCreates a GitHub release (if it does not already exist) and uploads files to the release.\nPlease set the GITHUB_TOKEN environment variable.\nEXAMPLE:\ngithub-release-retry \\\n  --user paul \\\n  --repo hello-world \\\n  --tag_name v1.0 \\\n  --target_commitish 448301eb \\\n  --body_string \"My first release.\" \\\n  hello-world.zip RELEASE_NOTES.txt\n\npositional arguments:\n  files                 The files to upload to the release. (default: None)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --user USER           Required: The GitHub username or organization name in\n                        which the repo resides. (default: None)\n  --repo REPO           Required: The GitHub repo name in which to make the\n                        release. (default: None)\n  --tag_name TAG_NAME   Required: The name of the tag to create or use.\n                        (default: None)\n  --target_commitish TARGET_COMMITISH\n                        The commit-ish value where the tag will be created.\n                        Unused if the tag already exists. (default: None)\n  --release_name RELEASE_NAME\n                        The name of the release. Leave unset to use the\n                        tag_name (recommended). (default: None)\n  --body_string BODY_STRING\n                        Required (or use --body_file): Text describing the\n                        release. Ignored if the release already exists.\n                        (default: None)\n  --body_file BODY_FILE\n                        Required (or use --body_string): Text describing the\n                        release, which will be read from BODY_FILE. Ignored if\n                        the release already exists. (default: None)\n  --draft               Creates a draft release, which means it is\n                        unpublished. (default: False)\n  --prerelease          Creates a prerelease release, which means it will be\n                        marked as such. (default: False)\n  --github_api_url GITHUB_API_URL\n                        The GitHub API URL without a trailing slash. (default:\n                        https://api.github.com)\n  --retry_limit RETRY_LIMIT\n                        The number of times to retry uploading a file.\n                        (default: 5)\n```\n\n## Development\n\n> Optional: if you have just done `git pull`\nand `Pipfile.lock` was updated,\nyou can delete `.venv/` to start from a fresh virtual environment.\n\n> On Windows, you can use the Git Bash shell, or adapt the commands (including those inside `dev_shell.sh.template`) for the Windows command prompt.\n\nClone this repo and change to the directory that contains this README file. Execute `./dev_shell.sh.template`. If the default settings don't work, make a copy of the file called `dev_shell.sh` and modify according to the comments before executing. `pip` must be installed for the version of Python you wish to use. Note that you can do e.g. `export PYTHON=python3` first to set your preferred Python binary.\nWe currently target Python 3.6+.\n\n> Pip for Python 3.6 may be broken on certain Debian distributions.\n> You can just use the newer Python 3.7+ version provided by your\n> distribution.\n> Alternatively, see \"Installing Python\" below if you want to use Python 3.6.\n\nThe script generates and activates a Python virtual environment (located at `.venv/`) with all dependencies installed.\n\n\n### Presubmit checks\n\n* Execute `./check_all.sh` to run various presubmit checks, linters, etc.\n* Execute `./fix_all.sh` to automatically fix certain issues, such as formatting.\n\n\n### PyCharm\n\nUse PyCharm to open the directory containing this README file.\nIt should pick up the Python virtual environment\n(at `.venv/`) automatically\nfor both the code\nand when you open a `Terminal` or `Python Console` tab.\n\nInstall and configure plugins:\n\n* File Watchers (may already be installed)\n  * The watcher task should already be under version control.\n* Mypy: the built-in PyCharm type checking uses Mypy behind-the-scenes, but this plugin enhances it by using the latest version and allowing the use of stricter settings, matching the settings used by the `./check_all.sh` script.\n\nAdd `whitelist.dic` as a custom dictionary (search for \"Spelling\" in Actions). Do not add words via PyCharm's \"Quick Fixes\" feature, as the word will only be added to your personal dictionary. Instead, manually add the word to `whitelist.dic`.\n\n## [Coding conventions](docs/conventions.md)\n\n## Terminal\n\nThe `Terminal` tab in PyCharm is useful and will use the project's Python virtual environment. In any other terminal, use:\n\n* `source .venv/bin/activate` (on Linux)\n* `source .venv/Scripts/activate` (on Windows with the Git Bash shell)\n* `.venv/Scripts/activate.bat` (on Windows with cmd)\n\nYou can alternatively execute the `./dev_shell.sh` script, but this is fairly slow as it checks and reinstalls all dependencies\n\n\n## Installing Python\n\nTo manually install Python on your Linux distribution, you can use `pyenv`.\n\nhttps://github.com/pyenv/pyenv#basic-github-checkout\n\nIn summary:\n\n* Install the required packages recommended [here](https://github.com/pyenv/pyenv/wiki/Common-build-problems).\n\n* Then:\n\n```sh\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\n# Add the following two lines to your ~/.bashrc file.\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\n\n# In a new terminal:\neval \"$(pyenv init -)\"\npyenv install 3.6.9\npyenv global 3.6.9\n\n# Now execute the development shell script, as usual.\nexport PYTHON=\"python\"\n./dev_shell.sh.template\n```\n\nYou can reactivate the virtual environment later\nusing `source .venv/bin/activate`,\nwithout having to re-execute the above `pyenv` commands.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/google/github-release-retry", "keywords": "GitHub Release Releases reliable retry upload assets", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "github-release-retry", "package_url": "https://pypi.org/project/github-release-retry/", "platform": "", "project_url": "https://pypi.org/project/github-release-retry/", "project_urls": {"Documentation": "https://github.com/google/github-release-retry", "Homepage": "https://github.com/google/github-release-retry", "Source": "https://github.com/google/github-release-retry"}, "release_url": "https://pypi.org/project/github-release-retry/1.0.3/", "requires_dist": ["dataclasses-json", "requests", "dataclasses ; python_version == \"3.6\""], "requires_python": ">=3.6", "summary": "A tool for creating GitHub Releases and uploading assets reliably.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>github-release-retry</h1>\n<p><a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a></p>\n<p><code>github-release-retry</code> is a\ntool for creating GitHub Releases and uploading assets <strong>reliably</strong>.\nIt differs from other\ntools because it uploads\nassets reliably by\nverifying that the asset\nexists,\nand retries (deleting partial assets) if not.</p>\n<p>This is not an officially supported Google product.</p>\n<h2>Install</h2>\n<p>Requires Python 3.6+.</p>\n<p>To ensure you use the <code>pip</code> module associated with your\npreferred Python 3.6+ binary:</p>\n<pre>python3 -m pip install --user github-release-retry\n<span class=\"c1\"># where `python3` is your preferred Python 3.6+ binary.</span>\n<span class=\"c1\"># Omit `--user` to install for all users.</span>\n</pre>\n<p>Or just:</p>\n<pre>pip3 install --user github-release-retry\n<span class=\"c1\"># where `pip3` is your version of pip for Python 3.6+.</span>\n<span class=\"c1\"># Omit `--user` to install for all users.</span>\n</pre>\n<h2>Usage</h2>\n<p>If your <a href=\"https://www.python.org/dev/peps/pep-0370/\" rel=\"nofollow\">Python user scripts directory</a>\nis not on your <code>PATH</code>,\nyou can use:</p>\n<pre>python3 -m github_release_retry.github_release_retry\n<span class=\"c1\"># where `python3` is your preferred Python 3.6+ binary.</span>\n</pre>\n<p>Otherwise:</p>\n<pre>$ github-release-retry -h\nusage: github-release-retry <span class=\"o\">[</span>-h<span class=\"o\">]</span> --user USER --repo REPO --tag_name TAG_NAME\n                            <span class=\"o\">[</span>--target_commitish TARGET_COMMITISH<span class=\"o\">]</span>\n                            <span class=\"o\">[</span>--release_name RELEASE_NAME<span class=\"o\">]</span>\n                            <span class=\"o\">(</span>--body_string BODY_STRING <span class=\"p\">|</span> --body_file BODY_FILE<span class=\"o\">)</span>\n                            <span class=\"o\">[</span>--draft<span class=\"o\">]</span> <span class=\"o\">[</span>--prerelease<span class=\"o\">]</span>\n                            <span class=\"o\">[</span>--github_api_url GITHUB_API_URL<span class=\"o\">]</span>\n                            <span class=\"o\">[</span>--retry_limit RETRY_LIMIT<span class=\"o\">]</span>\n                            <span class=\"o\">[</span>files <span class=\"o\">[</span>files ...<span class=\"o\">]]</span>\n\nCreates a GitHub release <span class=\"o\">(</span><span class=\"k\">if</span> it does not already exist<span class=\"o\">)</span> and uploads files to the release.\nPlease <span class=\"nb\">set</span> the GITHUB_TOKEN environment variable.\nEXAMPLE:\ngithub-release-retry <span class=\"se\">\\</span>\n  --user paul <span class=\"se\">\\</span>\n  --repo hello-world <span class=\"se\">\\</span>\n  --tag_name v1.0 <span class=\"se\">\\</span>\n  --target_commitish 448301eb <span class=\"se\">\\</span>\n  --body_string <span class=\"s2\">\"My first release.\"</span> <span class=\"se\">\\</span>\n  hello-world.zip RELEASE_NOTES.txt\n\npositional arguments:\n  files                 The files to upload to the release. <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --user USER           Required: The GitHub username or organization name in\n                        which the repo resides. <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --repo REPO           Required: The GitHub repo name in which to make the\n                        release. <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --tag_name TAG_NAME   Required: The name of the tag to create or use.\n                        <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --target_commitish TARGET_COMMITISH\n                        The commit-ish value where the tag will be created.\n                        Unused <span class=\"k\">if</span> the tag already exists. <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --release_name RELEASE_NAME\n                        The name of the release. Leave <span class=\"nb\">unset</span> to use the\n                        tag_name <span class=\"o\">(</span>recommended<span class=\"o\">)</span>. <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --body_string BODY_STRING\n                        Required <span class=\"o\">(</span>or use --body_file<span class=\"o\">)</span>: Text describing the\n                        release. Ignored <span class=\"k\">if</span> the release already exists.\n                        <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --body_file BODY_FILE\n                        Required <span class=\"o\">(</span>or use --body_string<span class=\"o\">)</span>: Text describing the\n                        release, which will be <span class=\"nb\">read</span> from BODY_FILE. Ignored <span class=\"k\">if</span>\n                        the release already exists. <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --draft               Creates a draft release, which means it is\n                        unpublished. <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n  --prerelease          Creates a prerelease release, which means it will be\n                        marked as such. <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n  --github_api_url GITHUB_API_URL\n                        The GitHub API URL without a trailing slash. <span class=\"o\">(</span>default:\n                        https://api.github.com<span class=\"o\">)</span>\n  --retry_limit RETRY_LIMIT\n                        The number of <span class=\"nb\">times</span> to retry uploading a file.\n                        <span class=\"o\">(</span>default: <span class=\"m\">5</span><span class=\"o\">)</span>\n</pre>\n<h2>Development</h2>\n<blockquote>\n<p>Optional: if you have just done <code>git pull</code>\nand <code>Pipfile.lock</code> was updated,\nyou can delete <code>.venv/</code> to start from a fresh virtual environment.</p>\n</blockquote>\n<blockquote>\n<p>On Windows, you can use the Git Bash shell, or adapt the commands (including those inside <code>dev_shell.sh.template</code>) for the Windows command prompt.</p>\n</blockquote>\n<p>Clone this repo and change to the directory that contains this README file. Execute <code>./dev_shell.sh.template</code>. If the default settings don't work, make a copy of the file called <code>dev_shell.sh</code> and modify according to the comments before executing. <code>pip</code> must be installed for the version of Python you wish to use. Note that you can do e.g. <code>export PYTHON=python3</code> first to set your preferred Python binary.\nWe currently target Python 3.6+.</p>\n<blockquote>\n<p>Pip for Python 3.6 may be broken on certain Debian distributions.\nYou can just use the newer Python 3.7+ version provided by your\ndistribution.\nAlternatively, see \"Installing Python\" below if you want to use Python 3.6.</p>\n</blockquote>\n<p>The script generates and activates a Python virtual environment (located at <code>.venv/</code>) with all dependencies installed.</p>\n<h3>Presubmit checks</h3>\n<ul>\n<li>Execute <code>./check_all.sh</code> to run various presubmit checks, linters, etc.</li>\n<li>Execute <code>./fix_all.sh</code> to automatically fix certain issues, such as formatting.</li>\n</ul>\n<h3>PyCharm</h3>\n<p>Use PyCharm to open the directory containing this README file.\nIt should pick up the Python virtual environment\n(at <code>.venv/</code>) automatically\nfor both the code\nand when you open a <code>Terminal</code> or <code>Python Console</code> tab.</p>\n<p>Install and configure plugins:</p>\n<ul>\n<li>File Watchers (may already be installed)\n<ul>\n<li>The watcher task should already be under version control.</li>\n</ul>\n</li>\n<li>Mypy: the built-in PyCharm type checking uses Mypy behind-the-scenes, but this plugin enhances it by using the latest version and allowing the use of stricter settings, matching the settings used by the <code>./check_all.sh</code> script.</li>\n</ul>\n<p>Add <code>whitelist.dic</code> as a custom dictionary (search for \"Spelling\" in Actions). Do not add words via PyCharm's \"Quick Fixes\" feature, as the word will only be added to your personal dictionary. Instead, manually add the word to <code>whitelist.dic</code>.</p>\n<h2><a href=\"docs/conventions.md\" rel=\"nofollow\">Coding conventions</a></h2>\n<h2>Terminal</h2>\n<p>The <code>Terminal</code> tab in PyCharm is useful and will use the project's Python virtual environment. In any other terminal, use:</p>\n<ul>\n<li><code>source .venv/bin/activate</code> (on Linux)</li>\n<li><code>source .venv/Scripts/activate</code> (on Windows with the Git Bash shell)</li>\n<li><code>.venv/Scripts/activate.bat</code> (on Windows with cmd)</li>\n</ul>\n<p>You can alternatively execute the <code>./dev_shell.sh</code> script, but this is fairly slow as it checks and reinstalls all dependencies</p>\n<h2>Installing Python</h2>\n<p>To manually install Python on your Linux distribution, you can use <code>pyenv</code>.</p>\n<p><a href=\"https://github.com/pyenv/pyenv#basic-github-checkout\" rel=\"nofollow\">https://github.com/pyenv/pyenv#basic-github-checkout</a></p>\n<p>In summary:</p>\n<ul>\n<li>\n<p>Install the required packages recommended <a href=\"https://github.com/pyenv/pyenv/wiki/Common-build-problems\" rel=\"nofollow\">here</a>.</p>\n</li>\n<li>\n<p>Then:</p>\n</li>\n</ul>\n<pre>git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\n<span class=\"c1\"># Add the following two lines to your ~/.bashrc file.</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n\n<span class=\"c1\"># In a new terminal:</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"k\">$(</span>pyenv init -<span class=\"k\">)</span><span class=\"s2\">\"</span>\npyenv install <span class=\"m\">3</span>.6.9\npyenv global <span class=\"m\">3</span>.6.9\n\n<span class=\"c1\"># Now execute the development shell script, as usual.</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PYTHON</span><span class=\"o\">=</span><span class=\"s2\">\"python\"</span>\n./dev_shell.sh.template\n</pre>\n<p>You can reactivate the virtual environment later\nusing <code>source .venv/bin/activate</code>,\nwithout having to re-execute the above <code>pyenv</code> commands.</p>\n\n          </div>"}, "last_serial": 6748684, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "d7fd445248b7f80eb3f1a34872409a1f", "sha256": "8080453bf7e525a23c5e4d5fd73dab0eb9b147add683b05de58755bec4b633a4"}, "downloads": -1, "filename": "github_release_retry-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d7fd445248b7f80eb3f1a34872409a1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12356, "upload_time": "2020-03-04T11:04:43", "upload_time_iso_8601": "2020-03-04T11:04:43.759520Z", "url": "https://files.pythonhosted.org/packages/3b/7f/862843d0bbfcc4a3459f604ff13be03abab9b35f02798d92cbcbf5e90ea4/github_release_retry-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a231011ebc7e4175fe863f7b459b6e78", "sha256": "2559a8e52a6aa811f4c560f7b73091821cfe5e24dc14f1ca6b5b6bf8513be399"}, "downloads": -1, "filename": "github-release-retry-1.0.tar.gz", "has_sig": false, "md5_digest": "a231011ebc7e4175fe863f7b459b6e78", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8747, "upload_time": "2020-03-04T11:04:46", "upload_time_iso_8601": "2020-03-04T11:04:46.102037Z", "url": "https://files.pythonhosted.org/packages/7e/72/bdd498b101c9d956d68ee5f7c171712f0f5d2ca6e8dbb0faaf463e0e49a4/github-release-retry-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "31d2b68480896fbff1979c39d26be77f", "sha256": "53f19e65bc78087d69454d185f0a905c53dcb8915b36b950e53d32cf0973dfa6"}, "downloads": -1, "filename": "github_release_retry-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "31d2b68480896fbff1979c39d26be77f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15115, "upload_time": "2020-03-04T11:28:52", "upload_time_iso_8601": "2020-03-04T11:28:52.581337Z", "url": "https://files.pythonhosted.org/packages/ad/17/12f008fbeceddfa6f561f180ef76911f10f3b7a2d2311423d2ac5059fdcf/github_release_retry-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c2565ae5bfd53ca162eeac39c0999f7", "sha256": "aeec6cecfb3304c0052758b194e6de423c879eb22acff412d2de133dea266e2b"}, "downloads": -1, "filename": "github-release-retry-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9c2565ae5bfd53ca162eeac39c0999f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9588, "upload_time": "2020-03-04T11:28:53", "upload_time_iso_8601": "2020-03-04T11:28:53.643114Z", "url": "https://files.pythonhosted.org/packages/e2/13/53584d6b374589c496784668e7b532175fda7972f797f2e02982a11a9d1b/github-release-retry-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "070afeee7d145b4e1e7c383e05370808", "sha256": "269fedc4cf12c5878252e60a4a849ab9d9a6fb14c2233188a74c9ea7c22bc93c"}, "downloads": -1, "filename": "github_release_retry-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "070afeee7d145b4e1e7c383e05370808", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15104, "upload_time": "2020-03-04T11:42:17", "upload_time_iso_8601": "2020-03-04T11:42:17.616354Z", "url": "https://files.pythonhosted.org/packages/bb/47/593a84e36d09e647531a5c6ca3cca2e7e307470ba2625fc64eac727eed65/github_release_retry-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c37e0bb2d6252f56d9b4b7757958bad1", "sha256": "7993b1f9b6465ef1d3ec1ba40829840f886cf386e0f66a3413c5163c93fedfa1"}, "downloads": -1, "filename": "github-release-retry-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c37e0bb2d6252f56d9b4b7757958bad1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9571, "upload_time": "2020-03-04T11:42:18", "upload_time_iso_8601": "2020-03-04T11:42:18.926793Z", "url": "https://files.pythonhosted.org/packages/f4/62/9c59fe718d781bf476d8fdffcaf217cf4e87380e8bd11e5da730a04329c6/github-release-retry-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b1c88c5ac3afe8a4a942b1db644c3554", "sha256": "5af786cff964549e8aad97789587035debb184770d39707b57e43681ad40e4ee"}, "downloads": -1, "filename": "github_release_retry-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b1c88c5ac3afe8a4a942b1db644c3554", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15140, "upload_time": "2020-03-04T15:52:52", "upload_time_iso_8601": "2020-03-04T15:52:52.938056Z", "url": "https://files.pythonhosted.org/packages/2d/d8/4a9b4dfb31afad48cc08ddc433b660172fec435fd7ab4cb1ae65cec16026/github_release_retry-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc8ad8f08ecf4c917b9a02c697917ac5", "sha256": "7a0917d353b00cdfabcf56a7b79404d6cced489c75d7b68418c02ee2e57e51d8"}, "downloads": -1, "filename": "github-release-retry-1.0.3.tar.gz", "has_sig": false, "md5_digest": "fc8ad8f08ecf4c917b9a02c697917ac5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9609, "upload_time": "2020-03-04T15:52:54", "upload_time_iso_8601": "2020-03-04T15:52:54.306158Z", "url": "https://files.pythonhosted.org/packages/cf/69/354fd22cf4a682e79565820e1d0819a4edc5706afad497a3c31f3febe8a4/github-release-retry-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1c88c5ac3afe8a4a942b1db644c3554", "sha256": "5af786cff964549e8aad97789587035debb184770d39707b57e43681ad40e4ee"}, "downloads": -1, "filename": "github_release_retry-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b1c88c5ac3afe8a4a942b1db644c3554", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15140, "upload_time": "2020-03-04T15:52:52", "upload_time_iso_8601": "2020-03-04T15:52:52.938056Z", "url": "https://files.pythonhosted.org/packages/2d/d8/4a9b4dfb31afad48cc08ddc433b660172fec435fd7ab4cb1ae65cec16026/github_release_retry-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc8ad8f08ecf4c917b9a02c697917ac5", "sha256": "7a0917d353b00cdfabcf56a7b79404d6cced489c75d7b68418c02ee2e57e51d8"}, "downloads": -1, "filename": "github-release-retry-1.0.3.tar.gz", "has_sig": false, "md5_digest": "fc8ad8f08ecf4c917b9a02c697917ac5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9609, "upload_time": "2020-03-04T15:52:54", "upload_time_iso_8601": "2020-03-04T15:52:54.306158Z", "url": "https://files.pythonhosted.org/packages/cf/69/354fd22cf4a682e79565820e1d0819a4edc5706afad497a3c31f3febe8a4/github-release-retry-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:59 2020"}