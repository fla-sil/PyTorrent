{"info": {"author": "Shinya Takamaeda-Yamazaki", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "Pyverilog\n==============================\n\n[![Build Status](https://travis-ci.org/PyHDI/Pyverilog.svg)](https://travis-ci.org/PyHDI/Pyverilog)\n\nPython-based Hardware Design Processing Toolkit for Verilog HDL\n\nCopyright 2013, Shinya Takamaeda-Yamazaki and Contributors\n\n\nLicense\n==============================\n\nApache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n\nNote that this software package includes PLY-3.4 in \"vparser/ply\". The license of PLY is BSD.\n\n\nPublication\n==============================\n\nIf you use Pyverilog in your research, please cite the following paper.\n\n- Shinya Takamaeda-Yamazaki: Pyverilog: A Python-based Hardware Design Processing Toolkit for Verilog HDL, 11th International Symposium on Applied Reconfigurable Computing (ARC 2015) (Poster), Lecture Notes in Computer Science, Vol.9040/2015, pp.451-460, April 2015.\n[Paper](http://link.springer.com/chapter/10.1007/978-3-319-16214-0_42)\n\n```\n@inproceedings{Takamaeda:2015:ARC:Pyverilog,\ntitle={Pyverilog: A Python-Based Hardware Design Processing Toolkit for Verilog HDL},\nauthor={Takamaeda-Yamazaki, Shinya},\nbooktitle={Applied Reconfigurable Computing},\nmonth={Apr},\nyear={2015},\npages={451-460},\nvolume={9040},\nseries={Lecture Notes in Computer Science},\npublisher={Springer International Publishing},\ndoi={10.1007/978-3-319-16214-0_42},\nurl={http://dx.doi.org/10.1007/978-3-319-16214-0_42},\n}\n```\n\n\nWhat's Pyverilog?\n==============================\n\nPyverilog is an open-source hardware design processing toolkit for Verilog HDL. All source codes are written in Python.\n\nPyverilog includes **(1) code parser, (2) dataflow analyzer, (3) control-flow analyzer and (4) code generator**.\nYou can create your own design analyzer, code translator and code generator of Verilog HDL based on this toolkit.\n\n\nContribute to Pyverilog\n==============================\n\nPyverilog project always welcomes questions, bug reports, feature proposals, and pull requests on [GitHub](https://github.com/PyHDI/Pyverilog).\n\nfor questions, bug reports, and feature proposals\n--------------------\n\nPlease leave your comment on the [issue tracker](https://github.com/PyHDI/Pyverilog/issues) on GitHub.\n\nfor pull requests\n--------------------\n\nPlease check \"CONTRIBUTORS.md\" for the contributors who provided pull requests.\n\nPyverilog uses **pytest** for the integration testing. **When you send a pull request, please include a testing example with pytest.** \nTo write a testing code, please refer the existing testing examples in \"tests\" directory.\n\nIf the pull request code passes all the tests successfully and has no obvious problem, it will be merged to the *develop* branch by the main committers.\n\n\nInstallation\n==============================\n\nRequirements\n--------------------\n\n- Python3: 3.6 or later\n- Icarus Verilog: 10.1 or later\n\n```\nsudo apt install iverilog\n```\n\n- Jinja2: 2.10 or later\n\n```\npip3 install jinja2\n```\n\nOptional installation for testing\n--------------------\n\nThese are required for automatic testing of **tests**.\nWe recommend to install these testing library to verify experimental features.\n\n- pytest: 3.8.1 or later\n- pytest-pythonpath: 0.7.3 or later\n\n```\npip3 install pytest pytest-pythonpath\n```\n\nOptional installation for visualization\n--------------------\n\nThese are required for graph visualization by dataflow/graphgen.py and controlflow/controlflow_analyzer.py.\n\n- Graphviz: 2.38.0 or later\n- Pygraphviz: 1.3.1 or later\n\n```\nsudo apt install graphviz\npip3 install pygraphviz\n```\n\nInstall\n--------------------\n\nNow you can install Pyverilog using setup.py script:\n\n```\npython3 setup.py install\n```\n\n\nTools\n==============================\n\nThis software includes various tools for Verilog HDL design.\n\n* vparser: Code parser to generate AST (Abstract Syntax Tree) from source codes of Verilog HDL.\n* dataflow: Dataflow analyzer with an optimizer to remove redundant expressions and some dataflow handling tools.\n* controlflow: Control-flow analyzer with condition analyzer that identify when a signal is activated.\n* ast\\_code\\_generator: Verilog HDL code generator from AST.\n\n\nGetting Started\n==============================\n\nFirst, please prepare a Verilog HDL source file as below. The file name is 'test.v'.\nThis sample design adds the input value internally whtn the enable signal is asserted. Then is outputs its partial value to the LED.\n\n```verilog\nmodule top\n  (\n   input CLK, \n   input RST,\n   input enable,\n   input [31:0] value,\n   output [7:0] led\n  );\n  reg [31:0] count;\n  reg [7:0] state;\n  assign led = count[23:16];\n  always @(posedge CLK) begin\n    if(RST) begin\n      count <= 0;\n      state <= 0;\n    end else begin\n      if(state == 0) begin\n        if(enable) state <= 1;\n      end else if(state == 1) begin\n        state <= 2;\n      end else if(state == 2) begin\n        count <= count + value;\n        state <= 0;\n      end\n    end\n  end\nendmodule\n```\n\nCode parser\n------------------------------\n\nLet's try syntax analysis. Please type the command as below.\n\n```\npython3 pyverilog/examples/example_parser.py test.v\n```\n\nThen you got the result as below. The result of syntax analysis is displayed.\n\n```\nSource:  (at 1)\n  Description:  (at 1)\n    ModuleDef: top (at 1)\n      Paramlist:  (at 0)\n      Portlist:  (at 2)\n        Ioport:  (at 3)\n          Input: CLK, False (at 3)\n        Ioport:  (at 4)\n          Input: RST, False (at 4)\n        Ioport:  (at 5)\n          Input: enable, False (at 5)\n        Ioport:  (at 6)\n          Input: value, False (at 6)\n            Width:  (at 6)\n              IntConst: 31 (at 6)\n              IntConst: 0 (at 6)\n        Ioport:  (at 7)\n          Output: led, False (at 7)\n            Width:  (at 7)\n              IntConst: 7 (at 7)\n              IntConst: 0 (at 7)\n      Decl:  (at 9)\n        Reg: count, False (at 9)\n          Width:  (at 9)\n            IntConst: 31 (at 9)\n            IntConst: 0 (at 9)\n      Decl:  (at 10)\n        Reg: state, False (at 10)\n          Width:  (at 10)\n            IntConst: 7 (at 10)\n            IntConst: 0 (at 10)\n      Assign:  (at 11)\n        Lvalue:  (at 11)\n          Identifier: led (at 11)\n        Rvalue:  (at 11)\n          Partselect:  (at 11)\n            Identifier: count (at 11)\n            IntConst: 23 (at 11)\n            IntConst: 16 (at 11)\n      Always:  (at 12)\n        SensList:  (at 12)\n          Sens: posedge (at 12)\n            Identifier: CLK (at 12)\n        Block: None (at 12)\n          IfStatement:  (at 13)\n            Identifier: RST (at 13)\n            Block: None (at 13)\n              NonblockingSubstitution:  (at 14)\n                Lvalue:  (at 14)\n                  Identifier: count (at 14)\n                Rvalue:  (at 14)\n                  IntConst: 0 (at 14)\n              NonblockingSubstitution:  (at 15)\n                Lvalue:  (at 15)\n                  Identifier: state (at 15)\n                Rvalue:  (at 15)\n                  IntConst: 0 (at 15)\n            Block: None (at 16)\n              IfStatement:  (at 17)\n                Eq:  (at 17)\n                  Identifier: state (at 17)\n                  IntConst: 0 (at 17)\n                Block: None (at 17)\n                  IfStatement:  (at 18)\n                    Identifier: enable (at 18)\n                    NonblockingSubstitution:  (at 18)\n                      Lvalue:  (at 18)\n                        Identifier: state (at 18)\n                      Rvalue:  (at 18)\n                        IntConst: 1 (at 18)\n                IfStatement:  (at 19)\n                  Eq:  (at 19)\n                    Identifier: state (at 19)\n                    IntConst: 1 (at 19)\n                  Block: None (at 19)\n                    NonblockingSubstitution:  (at 20)\n                      Lvalue:  (at 20)\n                        Identifier: state (at 20)\n                      Rvalue:  (at 20)\n                        IntConst: 2 (at 20)\n                  IfStatement:  (at 21)\n                    Eq:  (at 21)\n                      Identifier: state (at 21)\n                      IntConst: 2 (at 21)\n                    Block: None (at 21)\n                      NonblockingSubstitution:  (at 22)\n                        Lvalue:  (at 22)\n                          Identifier: count (at 22)\n                        Rvalue:  (at 22)\n                          Plus:  (at 22)\n                            Identifier: count (at 22)\n                            Identifier: value (at 22)\n                      NonblockingSubstitution:  (at 23)\n                        Lvalue:  (at 23)\n                          Identifier: state (at 23)\n                        Rvalue:  (at 23)\n                          IntConst: 0 (at 23)\n```\n\nDataflow analyzer\n------------------------------\n\nLet's try dataflow analysis. Please type the command as below.\n\n```\npython3 pyverilog/examples/example_dataflow_analyzer.py -t top test.v \n```\n\nThen you got the result as below. The result of each signal definition and each signal assignment are displayed.\n\n```\nDirective:\nInstance:\n(top, 'top')\nTerm:\n(Term name:top.led type:{'Output'} msb:(IntConst 7) lsb:(IntConst 0))\n(Term name:top.enable type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\n(Term name:top.CLK type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\n(Term name:top.count type:{'Reg'} msb:(IntConst 31) lsb:(IntConst 0))\n(Term name:top.state type:{'Reg'} msb:(IntConst 7) lsb:(IntConst 0))\n(Term name:top.RST type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\n(Term name:top.value type:{'Input'} msb:(IntConst 31) lsb:(IntConst 0))\nBind:\n(Bind dest:top.count tree:(Branch Cond:(Terminal top.RST) True:(IntConst 0) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 0)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 1)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 2)) True:(Operator Plus Next:(Terminal top.count),(Terminal top.value)))))))\n(Bind dest:top.state tree:(Branch Cond:(Terminal top.RST) True:(IntConst 0) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 0)) True:(Branch Cond:(Terminal top.enable) True:(IntConst 1)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 1)) True:(IntConst 2) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 2)) True:(IntConst 0))))))\n(Bind dest:top.led tree:(Partselect Var:(Terminal top.count) MSB:(IntConst 23) LSB:(IntConst 16)))\n```\n\nLet's view the result of dataflow analysis as a picture file. Now we select 'led' as the target. Please type the command as below. In this example, Graphviz and Pygraphviz are installed.\n\n```\npython3 pyverilog/examples/example_graphgen.py -t top -s top.led test.v \n```\n\nThen you got a png file (out.png). The picture shows that the definition of 'led' is a part-selection of 'count' from 23-bit to 16-bit.\n\n![out.png](img/out.png)\n\nControl-flow analyzer\n------------------------------\n\nLet's try control-flow analysis. Please type the command as below. In this example, Graphviz and Pygraphviz are installed. If don't use Graphviz, please append \"--nograph\" option.\n\n```\npython3 pyverilog/examples/example_controlflow_analyzer.py -t top test.v \n```\n\nThen you got the result as below. The result shows that the state machine structure and transition conditions to the next state in the state machine.\n\n```\nFSM signal: top.count, Condition list length: 4\nFSM signal: top.state, Condition list length: 5\nCondition: (Ulnot, Eq), Inferring transition condition\nCondition: (Eq, top.enable), Inferring transition condition\nCondition: (Ulnot, Ulnot, Eq), Inferring transition condition\n# SIGNAL NAME: top.state\n# DELAY CNT: 0\n0 --(top_enable>'d0)--> 1\n1 --None--> 2\n2 --None--> 0\nLoop\n(0, 1, 2)\n```\n\nYou got also a png file (top_state.png), if you did not append \"--nograph\". The picture shows that the graphical structure of the state machine.\n\n![top_state.png](img/top_state.png)\n\nCode generator\n------------------------------\n \nFinally, let's try code generation. Please prepare a Python script as below. The file name is 'test.py'.\nA Verilog HDL code is represented by using the AST classes defined in 'vparser.ast'.\n\n```python\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nimport sys\nimport os\nimport pyverilog.vparser.ast as vast\nfrom pyverilog.ast_code_generator.codegen import ASTCodeGenerator\n\ndef main():\n    datawid = vast.Parameter( 'DATAWID', vast.Rvalue(vast.IntConst('32')) )\n    params = vast.Paramlist( [datawid] )\n    clk = vast.Ioport( vast.Input('CLK') )\n    rst = vast.Ioport( vast.Input('RST') )\n    width = vast.Width( vast.IntConst('7'), vast.IntConst('0') )\n    led = vast.Ioport( vast.Output('led', width=width) )\n    ports = vast.Portlist( [clk, rst, led] )\n\n    width = vast.Width( vast.Minus(vast.Identifier('DATAWID'), vast.IntConst('1')), vast.IntConst('0') )\n    count = vast.Reg('count', width=width)\n\n    assign = vast.Assign(\n        vast.Lvalue(vast.Identifier('led')), \n        vast.Rvalue(\n            vast.Partselect(\n                vast.Identifier('count'), # count\n                vast.Minus(vast.Identifier('DATAWID'), vast.IntConst('1')), # [DATAWID-1:\n                vast.Minus(vast.Identifier('DATAWID'), vast.IntConst('8'))))) # :DATAWID-8]\n\n    sens = vast.Sens(vast.Identifier('CLK'), type='posedge')\n    senslist = vast.SensList([ sens ])\n\n    assign_count_true = vast.NonblockingSubstitution(\n        vast.Lvalue(vast.Identifier('count')),\n        vast.Rvalue(vast.IntConst('0')))\n    if0_true = vast.Block([ assign_count_true ])\n\n    # count + 1\n    count_plus_1 = vast.Plus(vast.Identifier('count'), vast.IntConst('1'))\n    assign_count_false = vast.NonblockingSubstitution(\n        vast.Lvalue(vast.Identifier('count')),\n        vast.Rvalue(count_plus_1))\n    if0_false = vast.Block([ assign_count_false ])\n\n    if0 = vast.IfStatement(vast.Identifier('RST'), if0_true, if0_false)\n    statement = vast.Block([ if0 ])\n\n    always = vast.Always(senslist, statement)\n\n    items = []\n    items.append(count)\n    items.append(assign)\n    items.append(always)\n\n    ast = vast.ModuleDef(\"top\", params, ports, items)\n    \n    codegen = ASTCodeGenerator()\n    rslt = codegen.visit(ast)\n    print(rslt)\n\nif __name__ == '__main__':\n    main()\n```\n\nPlease type the command as below at the same directory with Pyverilog.\n\n```\npython3 test.py\n```\n\nThen Verilog HDL code generated from the AST instances is displayed.\n\n```verilog\nmodule top #\n(\n  parameter DATAWID = 32\n)\n(\n  input CLK,\n  input RST,\n  output [7:0] led\n);\n\n  reg [DATAWID-1:0] count;\n  assign led = count[DATAWID-1:DATAWID-8];\n\n  always @(posedge CLK) begin\n    if(RST) begin\n      count <= 0;\n    end else begin\n      count <= count + 1;\n    end\n  end\n\n\nendmodule\n```\n\n\nRelated Project and Site\n==============================\n\n[Veriloggen](https://github.com/PyHDI/veriloggen)\n- A Mixed-Paradigm Hardware Construction Framework\n\n[NNgen](https://github.com/NNgen/nngen)\n- A Fully-Customizable Hardware Synthesis Compiler for Deep Neural Network\n\n[IPgen](https://github.com/PyHDI/ipgen)\n- IP-core package generator for AXI4/Avalon\n\n[PyCoRAM](https://github.com/PyHDI/PyCoRAM)\n- Python-based Portable IP-core Synthesis Framework for FPGA-based Computing\n\n[flipSyrup](https://github.com/shtaxxx/flipSyrup)\n- Cycle-Accurate Hardware Simulation Framework on Abstract FPGA Platforms\n\n[Pyverilog_toolbox](https://github.com/fukatani/Pyverilog_toolbox)\n- Pyverilog_toolbox is Pyverilog-based verification/design tool, which is developed by Fukatani-san and uses Pyverilog as a fundamental library. Thanks for your contribution!\n\n[shtaxxx.hatenablog.com](http://shtaxxx.hatenablog.com/entry/2014/01/01/045856)\n- Blog entry for introduction and examples of Pyverilog (in Japansese)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PyHDI/Pyverilog", "keywords": "Verilog HDL,Lexer,Parser,Dataflow Analyzer,Control-flow Analyzer,Code Generator,Visualizer", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "pyverilog", "package_url": "https://pypi.org/project/pyverilog/", "platform": "", "project_url": "https://pypi.org/project/pyverilog/", "project_urls": {"Homepage": "https://github.com/PyHDI/Pyverilog"}, "release_url": "https://pypi.org/project/pyverilog/1.2.1/", "requires_dist": null, "requires_python": "", "summary": "Python-based Hardware Design Processing Toolkit for Verilog HDL: Parser, Dataflow Analyzer, Controlflow Analyzer and Code Generator", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pyverilog</h1>\n<p><a href=\"https://travis-ci.org/PyHDI/Pyverilog\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49063a3a5c90c66f9ea6eabdac0b2569caf89204/68747470733a2f2f7472617669732d63692e6f72672f50794844492f5079766572696c6f672e737667\"></a></p>\n<p>Python-based Hardware Design Processing Toolkit for Verilog HDL</p>\n<p>Copyright 2013, Shinya Takamaeda-Yamazaki and Contributors</p>\n<h1>License</h1>\n<p>Apache License 2.0 (<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a>)</p>\n<p>Note that this software package includes PLY-3.4 in \"vparser/ply\". The license of PLY is BSD.</p>\n<h1>Publication</h1>\n<p>If you use Pyverilog in your research, please cite the following paper.</p>\n<ul>\n<li>Shinya Takamaeda-Yamazaki: Pyverilog: A Python-based Hardware Design Processing Toolkit for Verilog HDL, 11th International Symposium on Applied Reconfigurable Computing (ARC 2015) (Poster), Lecture Notes in Computer Science, Vol.9040/2015, pp.451-460, April 2015.\n<a href=\"http://link.springer.com/chapter/10.1007/978-3-319-16214-0_42\" rel=\"nofollow\">Paper</a></li>\n</ul>\n<pre><code>@inproceedings{Takamaeda:2015:ARC:Pyverilog,\ntitle={Pyverilog: A Python-Based Hardware Design Processing Toolkit for Verilog HDL},\nauthor={Takamaeda-Yamazaki, Shinya},\nbooktitle={Applied Reconfigurable Computing},\nmonth={Apr},\nyear={2015},\npages={451-460},\nvolume={9040},\nseries={Lecture Notes in Computer Science},\npublisher={Springer International Publishing},\ndoi={10.1007/978-3-319-16214-0_42},\nurl={http://dx.doi.org/10.1007/978-3-319-16214-0_42},\n}\n</code></pre>\n<h1>What's Pyverilog?</h1>\n<p>Pyverilog is an open-source hardware design processing toolkit for Verilog HDL. All source codes are written in Python.</p>\n<p>Pyverilog includes <strong>(1) code parser, (2) dataflow analyzer, (3) control-flow analyzer and (4) code generator</strong>.\nYou can create your own design analyzer, code translator and code generator of Verilog HDL based on this toolkit.</p>\n<h1>Contribute to Pyverilog</h1>\n<p>Pyverilog project always welcomes questions, bug reports, feature proposals, and pull requests on <a href=\"https://github.com/PyHDI/Pyverilog\" rel=\"nofollow\">GitHub</a>.</p>\n<h2>for questions, bug reports, and feature proposals</h2>\n<p>Please leave your comment on the <a href=\"https://github.com/PyHDI/Pyverilog/issues\" rel=\"nofollow\">issue tracker</a> on GitHub.</p>\n<h2>for pull requests</h2>\n<p>Please check \"CONTRIBUTORS.md\" for the contributors who provided pull requests.</p>\n<p>Pyverilog uses <strong>pytest</strong> for the integration testing. <strong>When you send a pull request, please include a testing example with pytest.</strong>\nTo write a testing code, please refer the existing testing examples in \"tests\" directory.</p>\n<p>If the pull request code passes all the tests successfully and has no obvious problem, it will be merged to the <em>develop</em> branch by the main committers.</p>\n<h1>Installation</h1>\n<h2>Requirements</h2>\n<ul>\n<li>Python3: 3.6 or later</li>\n<li>Icarus Verilog: 10.1 or later</li>\n</ul>\n<pre><code>sudo apt install iverilog\n</code></pre>\n<ul>\n<li>Jinja2: 2.10 or later</li>\n</ul>\n<pre><code>pip3 install jinja2\n</code></pre>\n<h2>Optional installation for testing</h2>\n<p>These are required for automatic testing of <strong>tests</strong>.\nWe recommend to install these testing library to verify experimental features.</p>\n<ul>\n<li>pytest: 3.8.1 or later</li>\n<li>pytest-pythonpath: 0.7.3 or later</li>\n</ul>\n<pre><code>pip3 install pytest pytest-pythonpath\n</code></pre>\n<h2>Optional installation for visualization</h2>\n<p>These are required for graph visualization by dataflow/graphgen.py and controlflow/controlflow_analyzer.py.</p>\n<ul>\n<li>Graphviz: 2.38.0 or later</li>\n<li>Pygraphviz: 1.3.1 or later</li>\n</ul>\n<pre><code>sudo apt install graphviz\npip3 install pygraphviz\n</code></pre>\n<h2>Install</h2>\n<p>Now you can install Pyverilog using setup.py script:</p>\n<pre><code>python3 setup.py install\n</code></pre>\n<h1>Tools</h1>\n<p>This software includes various tools for Verilog HDL design.</p>\n<ul>\n<li>vparser: Code parser to generate AST (Abstract Syntax Tree) from source codes of Verilog HDL.</li>\n<li>dataflow: Dataflow analyzer with an optimizer to remove redundant expressions and some dataflow handling tools.</li>\n<li>controlflow: Control-flow analyzer with condition analyzer that identify when a signal is activated.</li>\n<li>ast_code_generator: Verilog HDL code generator from AST.</li>\n</ul>\n<h1>Getting Started</h1>\n<p>First, please prepare a Verilog HDL source file as below. The file name is 'test.v'.\nThis sample design adds the input value internally whtn the enable signal is asserted. Then is outputs its partial value to the LED.</p>\n<pre><span class=\"k\">module</span> <span class=\"n\">top</span>\n  <span class=\"p\">(</span>\n   <span class=\"k\">input</span> <span class=\"n\">CLK</span><span class=\"p\">,</span> \n   <span class=\"k\">input</span> <span class=\"n\">RST</span><span class=\"p\">,</span>\n   <span class=\"k\">input</span> <span class=\"n\">enable</span><span class=\"p\">,</span>\n   <span class=\"k\">input</span> <span class=\"p\">[</span><span class=\"mh\">31</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span> <span class=\"n\">value</span><span class=\"p\">,</span>\n   <span class=\"k\">output</span> <span class=\"p\">[</span><span class=\"mh\">7</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span> <span class=\"n\">led</span>\n  <span class=\"p\">);</span>\n  <span class=\"kt\">reg</span> <span class=\"p\">[</span><span class=\"mh\">31</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n  <span class=\"kt\">reg</span> <span class=\"p\">[</span><span class=\"mh\">7</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span> <span class=\"n\">state</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">led</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"mh\">23</span><span class=\"o\">:</span><span class=\"mh\">16</span><span class=\"p\">];</span>\n  <span class=\"k\">always</span> <span class=\"p\">@(</span><span class=\"k\">posedge</span> <span class=\"n\">CLK</span><span class=\"p\">)</span> <span class=\"k\">begin</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">RST</span><span class=\"p\">)</span> <span class=\"k\">begin</span>\n      <span class=\"n\">count</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0</span><span class=\"p\">;</span>\n      <span class=\"n\">state</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">end</span> <span class=\"k\">else</span> <span class=\"k\">begin</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"mh\">0</span><span class=\"p\">)</span> <span class=\"k\">begin</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">enable</span><span class=\"p\">)</span> <span class=\"n\">state</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">1</span><span class=\"p\">;</span>\n      <span class=\"k\">end</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"mh\">1</span><span class=\"p\">)</span> <span class=\"k\">begin</span>\n        <span class=\"n\">state</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">2</span><span class=\"p\">;</span>\n      <span class=\"k\">end</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"mh\">2</span><span class=\"p\">)</span> <span class=\"k\">begin</span>\n        <span class=\"n\">count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n        <span class=\"n\">state</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0</span><span class=\"p\">;</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">endmodule</span>\n</pre>\n<h2>Code parser</h2>\n<p>Let's try syntax analysis. Please type the command as below.</p>\n<pre><code>python3 pyverilog/examples/example_parser.py test.v\n</code></pre>\n<p>Then you got the result as below. The result of syntax analysis is displayed.</p>\n<pre><code>Source:  (at 1)\n  Description:  (at 1)\n    ModuleDef: top (at 1)\n      Paramlist:  (at 0)\n      Portlist:  (at 2)\n        Ioport:  (at 3)\n          Input: CLK, False (at 3)\n        Ioport:  (at 4)\n          Input: RST, False (at 4)\n        Ioport:  (at 5)\n          Input: enable, False (at 5)\n        Ioport:  (at 6)\n          Input: value, False (at 6)\n            Width:  (at 6)\n              IntConst: 31 (at 6)\n              IntConst: 0 (at 6)\n        Ioport:  (at 7)\n          Output: led, False (at 7)\n            Width:  (at 7)\n              IntConst: 7 (at 7)\n              IntConst: 0 (at 7)\n      Decl:  (at 9)\n        Reg: count, False (at 9)\n          Width:  (at 9)\n            IntConst: 31 (at 9)\n            IntConst: 0 (at 9)\n      Decl:  (at 10)\n        Reg: state, False (at 10)\n          Width:  (at 10)\n            IntConst: 7 (at 10)\n            IntConst: 0 (at 10)\n      Assign:  (at 11)\n        Lvalue:  (at 11)\n          Identifier: led (at 11)\n        Rvalue:  (at 11)\n          Partselect:  (at 11)\n            Identifier: count (at 11)\n            IntConst: 23 (at 11)\n            IntConst: 16 (at 11)\n      Always:  (at 12)\n        SensList:  (at 12)\n          Sens: posedge (at 12)\n            Identifier: CLK (at 12)\n        Block: None (at 12)\n          IfStatement:  (at 13)\n            Identifier: RST (at 13)\n            Block: None (at 13)\n              NonblockingSubstitution:  (at 14)\n                Lvalue:  (at 14)\n                  Identifier: count (at 14)\n                Rvalue:  (at 14)\n                  IntConst: 0 (at 14)\n              NonblockingSubstitution:  (at 15)\n                Lvalue:  (at 15)\n                  Identifier: state (at 15)\n                Rvalue:  (at 15)\n                  IntConst: 0 (at 15)\n            Block: None (at 16)\n              IfStatement:  (at 17)\n                Eq:  (at 17)\n                  Identifier: state (at 17)\n                  IntConst: 0 (at 17)\n                Block: None (at 17)\n                  IfStatement:  (at 18)\n                    Identifier: enable (at 18)\n                    NonblockingSubstitution:  (at 18)\n                      Lvalue:  (at 18)\n                        Identifier: state (at 18)\n                      Rvalue:  (at 18)\n                        IntConst: 1 (at 18)\n                IfStatement:  (at 19)\n                  Eq:  (at 19)\n                    Identifier: state (at 19)\n                    IntConst: 1 (at 19)\n                  Block: None (at 19)\n                    NonblockingSubstitution:  (at 20)\n                      Lvalue:  (at 20)\n                        Identifier: state (at 20)\n                      Rvalue:  (at 20)\n                        IntConst: 2 (at 20)\n                  IfStatement:  (at 21)\n                    Eq:  (at 21)\n                      Identifier: state (at 21)\n                      IntConst: 2 (at 21)\n                    Block: None (at 21)\n                      NonblockingSubstitution:  (at 22)\n                        Lvalue:  (at 22)\n                          Identifier: count (at 22)\n                        Rvalue:  (at 22)\n                          Plus:  (at 22)\n                            Identifier: count (at 22)\n                            Identifier: value (at 22)\n                      NonblockingSubstitution:  (at 23)\n                        Lvalue:  (at 23)\n                          Identifier: state (at 23)\n                        Rvalue:  (at 23)\n                          IntConst: 0 (at 23)\n</code></pre>\n<h2>Dataflow analyzer</h2>\n<p>Let's try dataflow analysis. Please type the command as below.</p>\n<pre><code>python3 pyverilog/examples/example_dataflow_analyzer.py -t top test.v \n</code></pre>\n<p>Then you got the result as below. The result of each signal definition and each signal assignment are displayed.</p>\n<pre><code>Directive:\nInstance:\n(top, 'top')\nTerm:\n(Term name:top.led type:{'Output'} msb:(IntConst 7) lsb:(IntConst 0))\n(Term name:top.enable type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\n(Term name:top.CLK type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\n(Term name:top.count type:{'Reg'} msb:(IntConst 31) lsb:(IntConst 0))\n(Term name:top.state type:{'Reg'} msb:(IntConst 7) lsb:(IntConst 0))\n(Term name:top.RST type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\n(Term name:top.value type:{'Input'} msb:(IntConst 31) lsb:(IntConst 0))\nBind:\n(Bind dest:top.count tree:(Branch Cond:(Terminal top.RST) True:(IntConst 0) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 0)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 1)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 2)) True:(Operator Plus Next:(Terminal top.count),(Terminal top.value)))))))\n(Bind dest:top.state tree:(Branch Cond:(Terminal top.RST) True:(IntConst 0) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 0)) True:(Branch Cond:(Terminal top.enable) True:(IntConst 1)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 1)) True:(IntConst 2) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 2)) True:(IntConst 0))))))\n(Bind dest:top.led tree:(Partselect Var:(Terminal top.count) MSB:(IntConst 23) LSB:(IntConst 16)))\n</code></pre>\n<p>Let's view the result of dataflow analysis as a picture file. Now we select 'led' as the target. Please type the command as below. In this example, Graphviz and Pygraphviz are installed.</p>\n<pre><code>python3 pyverilog/examples/example_graphgen.py -t top -s top.led test.v \n</code></pre>\n<p>Then you got a png file (out.png). The picture shows that the definition of 'led' is a part-selection of 'count' from 23-bit to 16-bit.</p>\n<p><img alt=\"out.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4af4ff5e8afeac08178e98a2d6c326ea88e1d129/696d672f6f75742e706e67\"></p>\n<h2>Control-flow analyzer</h2>\n<p>Let's try control-flow analysis. Please type the command as below. In this example, Graphviz and Pygraphviz are installed. If don't use Graphviz, please append \"--nograph\" option.</p>\n<pre><code>python3 pyverilog/examples/example_controlflow_analyzer.py -t top test.v \n</code></pre>\n<p>Then you got the result as below. The result shows that the state machine structure and transition conditions to the next state in the state machine.</p>\n<pre><code>FSM signal: top.count, Condition list length: 4\nFSM signal: top.state, Condition list length: 5\nCondition: (Ulnot, Eq), Inferring transition condition\nCondition: (Eq, top.enable), Inferring transition condition\nCondition: (Ulnot, Ulnot, Eq), Inferring transition condition\n# SIGNAL NAME: top.state\n# DELAY CNT: 0\n0 --(top_enable&gt;'d0)--&gt; 1\n1 --None--&gt; 2\n2 --None--&gt; 0\nLoop\n(0, 1, 2)\n</code></pre>\n<p>You got also a png file (top_state.png), if you did not append \"--nograph\". The picture shows that the graphical structure of the state machine.</p>\n<p><img alt=\"top_state.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75cd0898d075cf71c41a2c1900615fcad39e1991/696d672f746f705f73746174652e706e67\"></p>\n<h2>Code generator</h2>\n<p>Finally, let's try code generation. Please prepare a Python script as below. The file name is 'test.py'.\nA Verilog HDL code is represented by using the AST classes defined in 'vparser.ast'.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyverilog.vparser.ast</span> <span class=\"k\">as</span> <span class=\"nn\">vast</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyverilog.ast_code_generator.codegen</span> <span class=\"kn\">import</span> <span class=\"n\">ASTCodeGenerator</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">datawid</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">(</span> <span class=\"s1\">'DATAWID'</span><span class=\"p\">,</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Rvalue</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'32'</span><span class=\"p\">))</span> <span class=\"p\">)</span>\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Paramlist</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"n\">datawid</span><span class=\"p\">]</span> <span class=\"p\">)</span>\n    <span class=\"n\">clk</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Ioport</span><span class=\"p\">(</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"s1\">'CLK'</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n    <span class=\"n\">rst</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Ioport</span><span class=\"p\">(</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"s1\">'RST'</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n    <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Width</span><span class=\"p\">(</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'7'</span><span class=\"p\">),</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n    <span class=\"n\">led</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Ioport</span><span class=\"p\">(</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"s1\">'led'</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n    <span class=\"n\">ports</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Portlist</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"n\">clk</span><span class=\"p\">,</span> <span class=\"n\">rst</span><span class=\"p\">,</span> <span class=\"n\">led</span><span class=\"p\">]</span> <span class=\"p\">)</span>\n\n    <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Width</span><span class=\"p\">(</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Minus</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'DATAWID'</span><span class=\"p\">),</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)),</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Reg</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">)</span>\n\n    <span class=\"n\">assign</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Assign</span><span class=\"p\">(</span>\n        <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Lvalue</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'led'</span><span class=\"p\">)),</span> \n        <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Rvalue</span><span class=\"p\">(</span>\n            <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Partselect</span><span class=\"p\">(</span>\n                <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">),</span> <span class=\"c1\"># count</span>\n                <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Minus</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'DATAWID'</span><span class=\"p\">),</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)),</span> <span class=\"c1\"># [DATAWID-1:</span>\n                <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Minus</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'DATAWID'</span><span class=\"p\">),</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'8'</span><span class=\"p\">)))))</span> <span class=\"c1\"># :DATAWID-8]</span>\n\n    <span class=\"n\">sens</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Sens</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'CLK'</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'posedge'</span><span class=\"p\">)</span>\n    <span class=\"n\">senslist</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">SensList</span><span class=\"p\">([</span> <span class=\"n\">sens</span> <span class=\"p\">])</span>\n\n    <span class=\"n\">assign_count_true</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">NonblockingSubstitution</span><span class=\"p\">(</span>\n        <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Lvalue</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">)),</span>\n        <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Rvalue</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)))</span>\n    <span class=\"n\">if0_true</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">([</span> <span class=\"n\">assign_count_true</span> <span class=\"p\">])</span>\n\n    <span class=\"c1\"># count + 1</span>\n    <span class=\"n\">count_plus_1</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Plus</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">),</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IntConst</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">))</span>\n    <span class=\"n\">assign_count_false</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">NonblockingSubstitution</span><span class=\"p\">(</span>\n        <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Lvalue</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">)),</span>\n        <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Rvalue</span><span class=\"p\">(</span><span class=\"n\">count_plus_1</span><span class=\"p\">))</span>\n    <span class=\"n\">if0_false</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">([</span> <span class=\"n\">assign_count_false</span> <span class=\"p\">])</span>\n\n    <span class=\"n\">if0</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">IfStatement</span><span class=\"p\">(</span><span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"s1\">'RST'</span><span class=\"p\">),</span> <span class=\"n\">if0_true</span><span class=\"p\">,</span> <span class=\"n\">if0_false</span><span class=\"p\">)</span>\n    <span class=\"n\">statement</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">([</span> <span class=\"n\">if0</span> <span class=\"p\">])</span>\n\n    <span class=\"n\">always</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">Always</span><span class=\"p\">(</span><span class=\"n\">senslist</span><span class=\"p\">,</span> <span class=\"n\">statement</span><span class=\"p\">)</span>\n\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n    <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">assign</span><span class=\"p\">)</span>\n    <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">always</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ast</span> <span class=\"o\">=</span> <span class=\"n\">vast</span><span class=\"o\">.</span><span class=\"n\">ModuleDef</span><span class=\"p\">(</span><span class=\"s2\">\"top\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">ports</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">codegen</span> <span class=\"o\">=</span> <span class=\"n\">ASTCodeGenerator</span><span class=\"p\">()</span>\n    <span class=\"n\">rslt</span> <span class=\"o\">=</span> <span class=\"n\">codegen</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rslt</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Please type the command as below at the same directory with Pyverilog.</p>\n<pre><code>python3 test.py\n</code></pre>\n<p>Then Verilog HDL code generated from the AST instances is displayed.</p>\n<pre><span class=\"k\">module</span> <span class=\"n\">top</span> <span class=\"p\">#</span>\n<span class=\"p\">(</span>\n  <span class=\"k\">parameter</span> <span class=\"n\">DATAWID</span> <span class=\"o\">=</span> <span class=\"mh\">32</span>\n<span class=\"p\">)</span>\n<span class=\"p\">(</span>\n  <span class=\"k\">input</span> <span class=\"n\">CLK</span><span class=\"p\">,</span>\n  <span class=\"k\">input</span> <span class=\"n\">RST</span><span class=\"p\">,</span>\n  <span class=\"k\">output</span> <span class=\"p\">[</span><span class=\"mh\">7</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span> <span class=\"n\">led</span>\n<span class=\"p\">);</span>\n\n  <span class=\"kt\">reg</span> <span class=\"p\">[</span><span class=\"n\">DATAWID</span><span class=\"o\">-</span><span class=\"mh\">1</span><span class=\"o\">:</span><span class=\"mh\">0</span><span class=\"p\">]</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">led</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">DATAWID</span><span class=\"o\">-</span><span class=\"mh\">1</span><span class=\"o\">:</span><span class=\"n\">DATAWID</span><span class=\"o\">-</span><span class=\"mh\">8</span><span class=\"p\">];</span>\n\n  <span class=\"k\">always</span> <span class=\"p\">@(</span><span class=\"k\">posedge</span> <span class=\"n\">CLK</span><span class=\"p\">)</span> <span class=\"k\">begin</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">RST</span><span class=\"p\">)</span> <span class=\"k\">begin</span>\n      <span class=\"n\">count</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">end</span> <span class=\"k\">else</span> <span class=\"k\">begin</span>\n      <span class=\"n\">count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mh\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n\n<span class=\"k\">endmodule</span>\n</pre>\n<h1>Related Project and Site</h1>\n<p><a href=\"https://github.com/PyHDI/veriloggen\" rel=\"nofollow\">Veriloggen</a></p>\n<ul>\n<li>A Mixed-Paradigm Hardware Construction Framework</li>\n</ul>\n<p><a href=\"https://github.com/NNgen/nngen\" rel=\"nofollow\">NNgen</a></p>\n<ul>\n<li>A Fully-Customizable Hardware Synthesis Compiler for Deep Neural Network</li>\n</ul>\n<p><a href=\"https://github.com/PyHDI/ipgen\" rel=\"nofollow\">IPgen</a></p>\n<ul>\n<li>IP-core package generator for AXI4/Avalon</li>\n</ul>\n<p><a href=\"https://github.com/PyHDI/PyCoRAM\" rel=\"nofollow\">PyCoRAM</a></p>\n<ul>\n<li>Python-based Portable IP-core Synthesis Framework for FPGA-based Computing</li>\n</ul>\n<p><a href=\"https://github.com/shtaxxx/flipSyrup\" rel=\"nofollow\">flipSyrup</a></p>\n<ul>\n<li>Cycle-Accurate Hardware Simulation Framework on Abstract FPGA Platforms</li>\n</ul>\n<p><a href=\"https://github.com/fukatani/Pyverilog_toolbox\" rel=\"nofollow\">Pyverilog_toolbox</a></p>\n<ul>\n<li>Pyverilog_toolbox is Pyverilog-based verification/design tool, which is developed by Fukatani-san and uses Pyverilog as a fundamental library. Thanks for your contribution!</li>\n</ul>\n<p><a href=\"http://shtaxxx.hatenablog.com/entry/2014/01/01/045856\" rel=\"nofollow\">shtaxxx.hatenablog.com</a></p>\n<ul>\n<li>Blog entry for introduction and examples of Pyverilog (in Japansese)</li>\n</ul>\n\n          </div>"}, "last_serial": 7155068, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "9856879f96616de42a80775c3c6c0ab5", "sha256": "2bebce94d6164498d3dd0cb141b102c000c1cca1a9d3ec393bd8675e9ed4ff2c"}, "downloads": -1, "filename": "pyverilog-0.9.1.tar.gz", "has_sig": false, "md5_digest": "9856879f96616de42a80775c3c6c0ab5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117607, "upload_time": "2014-11-10T11:25:46", "upload_time_iso_8601": "2014-11-10T11:25:46.209985Z", "url": "https://files.pythonhosted.org/packages/ab/8e/4f0b3ddd145dba52062041b0aa5c602b622cbd36f9fa8afc4d44c2087d28/pyverilog-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "19a3a6a192982cf9a3d9e771e74a483f", "sha256": "02aad9bd44affe436ce52976b27931ad0ba43c09cb21a612b508557c736341f8"}, "downloads": -1, "filename": "pyverilog-0.9.2.tar.gz", "has_sig": false, "md5_digest": "19a3a6a192982cf9a3d9e771e74a483f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118856, "upload_time": "2015-02-07T04:51:12", "upload_time_iso_8601": "2015-02-07T04:51:12.505795Z", "url": "https://files.pythonhosted.org/packages/4e/37/385ad837e527de66d6667bd1fa4090bdf002dd306f991a683302a229ce9a/pyverilog-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "463c213425faa8eea7c6a7ca9a78fe8b", "sha256": "5cd2d06a855ba684ee5c9089b467e3460e9c945bb58a0596e53519e25b2963f2"}, "downloads": -1, "filename": "pyverilog-0.9.3.tar.gz", "has_sig": false, "md5_digest": "463c213425faa8eea7c6a7ca9a78fe8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123309, "upload_time": "2015-05-23T02:06:32", "upload_time_iso_8601": "2015-05-23T02:06:32.687520Z", "url": "https://files.pythonhosted.org/packages/7a/a6/6d1e8d78bf82b870ba5734602d6b0792837e55f3aded4bff0f5f3ef302a9/pyverilog-0.9.3.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "5ff6c87e3fca9a636116376fa3bc9251", "sha256": "4b88f15d575d9e1663a6883837bed65b0286c9fa1df6eb9b6603be8fe01734c7"}, "downloads": -1, "filename": "pyverilog-0.9.5.tar.gz", "has_sig": false, "md5_digest": "5ff6c87e3fca9a636116376fa3bc9251", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124121, "upload_time": "2015-06-21T16:59:04", "upload_time_iso_8601": "2015-06-21T16:59:04.679347Z", "url": "https://files.pythonhosted.org/packages/46/60/a91affae8d1affd79b20531f80464e74434a0ed870b3369d3d70c70e524a/pyverilog-0.9.5.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "1221113d4904973da10d7e6653ac041a", "sha256": "cdb36aee241e6b1f17101a4a9008fad9cd98cbad72b2d55f4718083439a3e90b"}, "downloads": -1, "filename": "pyverilog-0.9.6.tar.gz", "has_sig": false, "md5_digest": "1221113d4904973da10d7e6653ac041a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121159, "upload_time": "2015-08-18T18:05:50", "upload_time_iso_8601": "2015-08-18T18:05:50.674892Z", "url": "https://files.pythonhosted.org/packages/2e/32/bc4847b323cefd360f27ad7496f800ea21da4cb8bcabdec4af31304a4120/pyverilog-0.9.6.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a70fc0c45d626607c11eeb59d817c633", "sha256": "2d45c39f077653f27af2bb8a2a829a0ad19f287f8676814965b012b2f1eb79c2"}, "downloads": -1, "filename": "pyverilog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a70fc0c45d626607c11eeb59d817c633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 300270, "upload_time": "2015-10-29T11:17:19", "upload_time_iso_8601": "2015-10-29T11:17:19.241864Z", "url": "https://files.pythonhosted.org/packages/36/53/21604ae9985ec4a61feb4702859fe22e243c463891fa035946e929dc8ffc/pyverilog-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b15349ecbac9e0a050ec4010579c3675", "sha256": "333614df9300bd15d6d33f915c6090bff1cfcb38a646e1ffb10d3e68be368a09"}, "downloads": -1, "filename": "pyverilog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b15349ecbac9e0a050ec4010579c3675", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 298249, "upload_time": "2015-10-31T17:37:02", "upload_time_iso_8601": "2015-10-31T17:37:02.578345Z", "url": "https://files.pythonhosted.org/packages/86/72/de80d0b2ad711c555f1b02391a2d2828a385c94bbad2e1851d69d4e231b3/pyverilog-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "16a774b636ebe642ea80a0f729931779", "sha256": "eaf6f7af10b644bb5ed413cae63bdfe06e55886277b43937e343ae2bf302455d"}, "downloads": -1, "filename": "pyverilog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "16a774b636ebe642ea80a0f729931779", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158317, "upload_time": "2015-11-19T19:07:10", "upload_time_iso_8601": "2015-11-19T19:07:10.379501Z", "url": "https://files.pythonhosted.org/packages/53/14/14d7a63f0a32f157d8663fe576f4c3f3ec7a30de468be03d9f9ec27f5c80/pyverilog-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "761efd2ebdffaffb0c82961f2117cc28", "sha256": "798bc84f6fd3bc0264418d9234768e28bf26ec2277ba5d979b764d79aeff290c"}, "downloads": -1, "filename": "pyverilog-1.0.3.tar.gz", "has_sig": false, "md5_digest": "761efd2ebdffaffb0c82961f2117cc28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158472, "upload_time": "2015-11-21T16:46:04", "upload_time_iso_8601": "2015-11-21T16:46:04.295931Z", "url": "https://files.pythonhosted.org/packages/52/b1/ce14c26de507c5655798ae65aea0747b1a64717798a184c968a211e91133/pyverilog-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ac7cb9df18a70b238a5644ba9fb9229b", "sha256": "7c211b665aac6cd8f9df42aea5afc4b46113b0d49d5d0878bdf6919bf230e3d9"}, "downloads": -1, "filename": "pyverilog-1.0.4.tar.gz", "has_sig": false, "md5_digest": "ac7cb9df18a70b238a5644ba9fb9229b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 160377, "upload_time": "2015-11-22T15:03:30", "upload_time_iso_8601": "2015-11-22T15:03:30.708592Z", "url": "https://files.pythonhosted.org/packages/25/0b/5a886f7b3e34c5240b1268bbeaf7937d25d2c2273223b913b028251971a0/pyverilog-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "3289641b3c47fa0cf4364b68aa911f99", "sha256": "603ff0e5f838718aca51a2e003e9e0fa113cde219fb6b90044df01f29eb70124"}, "downloads": -1, "filename": "pyverilog-1.0.5.tar.gz", "has_sig": false, "md5_digest": "3289641b3c47fa0cf4364b68aa911f99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 160828, "upload_time": "2016-01-18T05:48:11", "upload_time_iso_8601": "2016-01-18T05:48:11.396045Z", "url": "https://files.pythonhosted.org/packages/02/f6/50a50b3f9522af3721eba0cb30ce1ac2207a2c80f861531889512ed65262/pyverilog-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "58aa6898d572505080e4317fe1dc1e4e", "sha256": "c1378b7e0b0dc8a8c2dee9f869abf4fdc65bff171a959600c10cf11350452aee"}, "downloads": -1, "filename": "pyverilog-1.0.6.tar.gz", "has_sig": false, "md5_digest": "58aa6898d572505080e4317fe1dc1e4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 160875, "upload_time": "2016-01-21T09:13:41", "upload_time_iso_8601": "2016-01-21T09:13:41.884403Z", "url": "https://files.pythonhosted.org/packages/bd/c4/7ca905b8af670fda005be466d54ec730e270d7935e734f6c0186ac914d89/pyverilog-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "02ba863c378913eff20b3db16d70e4e1", "sha256": "70ab9ba6104c9d75c1b82d6b34a9c7b9f26c70f22c52127c571d9ee10dcd72d5"}, "downloads": -1, "filename": "pyverilog-1.0.7.tar.gz", "has_sig": false, "md5_digest": "02ba863c378913eff20b3db16d70e4e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 161858, "upload_time": "2017-04-07T12:27:48", "upload_time_iso_8601": "2017-04-07T12:27:48.137526Z", "url": "https://files.pythonhosted.org/packages/6c/d0/cfe44f0250b24e5f7dbd28e4fa17d9d1fab0b876eaa9ce7b1a3c3953041a/pyverilog-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "b802a3b9613b177861350d2285dad55f", "sha256": "12539b4c72bda452cabeb65ba1e830edb22dce40ad16713b0d55dc67526bccb8"}, "downloads": -1, "filename": "pyverilog-1.0.8.tar.gz", "has_sig": false, "md5_digest": "b802a3b9613b177861350d2285dad55f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 161935, "upload_time": "2017-04-10T04:18:46", "upload_time_iso_8601": "2017-04-10T04:18:46.929121Z", "url": "https://files.pythonhosted.org/packages/c9/fb/ee0f9efafad227f912113e321502f679a965509a7f5bb6822807e1c19f80/pyverilog-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "c1423f374440e372e69ae381310d9653", "sha256": "aede564aa04eefb0b04e4aaf3575ae5a97eb74df86cc4c3dcd44fad15d4ae66f"}, "downloads": -1, "filename": "pyverilog-1.0.9.tar.gz", "has_sig": false, "md5_digest": "c1423f374440e372e69ae381310d9653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 162240, "upload_time": "2017-05-02T15:44:50", "upload_time_iso_8601": "2017-05-02T15:44:50.832472Z", "url": "https://files.pythonhosted.org/packages/8d/c2/c2ead1ec11ff2b3f9b7b8fd98be439c427b32709cf52d7cb027e26a3a423/pyverilog-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e6f85f31c2a97725167a4649afbe642a", "sha256": "f3a24865439d371cc65680600b46177aefa9e0819ca817e01fb521b4273a0dc9"}, "downloads": -1, "filename": "pyverilog-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e6f85f31c2a97725167a4649afbe642a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 162153, "upload_time": "2017-10-01T03:06:25", "upload_time_iso_8601": "2017-10-01T03:06:25.241059Z", "url": "https://files.pythonhosted.org/packages/1a/a1/f313d58520decba985b3c0272696a64d790ee2b84971b21baa81c1b2c529/pyverilog-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "8030036d86634cf0d808a1b67e857e45", "sha256": "fcb40db21aa53ec675f1b51517856854c54c1ba47037c5e3436d74b082032f15"}, "downloads": -1, "filename": "pyverilog-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8030036d86634cf0d808a1b67e857e45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 162335, "upload_time": "2017-10-04T14:03:16", "upload_time_iso_8601": "2017-10-04T14:03:16.959446Z", "url": "https://files.pythonhosted.org/packages/ff/0b/3f98db8d77e315fa00c30445bd30b188148f958cb2a19f36ae2d42205183/pyverilog-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "48e5cd6a80ed72987542ede575b1fff3", "sha256": "1efa541b9a70b529b5ca6576ac24c65142865040b619f664dd235c053c06cade"}, "downloads": -1, "filename": "pyverilog-1.1.2.tar.gz", "has_sig": false, "md5_digest": "48e5cd6a80ed72987542ede575b1fff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 161094, "upload_time": "2018-07-01T15:09:03", "upload_time_iso_8601": "2018-07-01T15:09:03.435275Z", "url": "https://files.pythonhosted.org/packages/bc/cb/859d4925db309fc91f6219b6ae007c3061a05f39645c97698358c5f02c89/pyverilog-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "81a3b24f8269fe7c4bf8855793cea3c3", "sha256": "495506aa574df7dceae95702e534b0b3fc9b0402ca3b54a4cfc00bff8fa1097b"}, "downloads": -1, "filename": "pyverilog-1.1.3.tar.gz", "has_sig": false, "md5_digest": "81a3b24f8269fe7c4bf8855793cea3c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 161032, "upload_time": "2018-11-25T03:34:52", "upload_time_iso_8601": "2018-11-25T03:34:52.669146Z", "url": "https://files.pythonhosted.org/packages/99/7b/70e4d049fed21d7c8f1b9d8239398a412ae620a7295aafb449cb2c1d7f91/pyverilog-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "d7fca28cee521722d815a56f6933e9e1", "sha256": "f16d44db281e6ae5f20b14ca5170d63da7cbba3954b5210241886825f92ab74c"}, "downloads": -1, "filename": "pyverilog-1.1.4.tar.gz", "has_sig": false, "md5_digest": "d7fca28cee521722d815a56f6933e9e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166268, "upload_time": "2019-03-30T15:52:34", "upload_time_iso_8601": "2019-03-30T15:52:34.231831Z", "url": "https://files.pythonhosted.org/packages/c8/b1/9bd389bab35fe2d8669eabed10113d5aff7a78ebf13f193d194a2e09161c/pyverilog-1.1.4.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "d60d4227434262bdb8a1394fb63ed022", "sha256": "01bacbd5c3cdcd8418a856f5b6aa7f18f4f5232013026c152ce42aabf15ba2ae"}, "downloads": -1, "filename": "pyverilog-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d60d4227434262bdb8a1394fb63ed022", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167680, "upload_time": "2019-11-19T10:55:56", "upload_time_iso_8601": "2019-11-19T10:55:56.448071Z", "url": "https://files.pythonhosted.org/packages/01/f2/0d96d3f685a681fad3f8512ad43fe2c8b480bbda4a66a44f7a860859a01d/pyverilog-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "7a2cd70f06d5e28fe5d1a479704b9010", "sha256": "520322e442bb29cbae601fb066e710c01bed1fec34c8b62961afd48019a2b11d"}, "downloads": -1, "filename": "pyverilog-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7a2cd70f06d5e28fe5d1a479704b9010", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 165241, "upload_time": "2020-05-03T06:32:03", "upload_time_iso_8601": "2020-05-03T06:32:03.235077Z", "url": "https://files.pythonhosted.org/packages/a9/70/8ca2f9b66ed1576e3eeaf5e0ec9467eea2840bd4f0a2b3ce00c900d1be78/pyverilog-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a2cd70f06d5e28fe5d1a479704b9010", "sha256": "520322e442bb29cbae601fb066e710c01bed1fec34c8b62961afd48019a2b11d"}, "downloads": -1, "filename": "pyverilog-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7a2cd70f06d5e28fe5d1a479704b9010", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 165241, "upload_time": "2020-05-03T06:32:03", "upload_time_iso_8601": "2020-05-03T06:32:03.235077Z", "url": "https://files.pythonhosted.org/packages/a9/70/8ca2f9b66ed1576e3eeaf5e0ec9467eea2840bd4f0a2b3ce00c900d1be78/pyverilog-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:04 2020"}