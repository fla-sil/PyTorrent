{"info": {"author": "Artur de Sousa Rocha", "author_email": "adsr@poczta.onet.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Text Processing"], "description": "# awking\n\nMake it easier to use Python as an AWK replacement.\n\n## Basic usage\n\n### Extracting groups of lines\n\n```python\nfrom awking import RangeGrouper\n\nlines = '''\ntext 1\ntext 2\ngroup start 1\ntext 3\ngroup end 1\ntext 4\ngroup start 2\ntext 5\ngroup end 2\ntext 6\n'''.splitlines()\n\nfor group in RangeGrouper('start', 'end', lines):\n    print(list(group))\n```\n\nThis will output:\n\n```text\n['group start 1', 'text 3', 'group end 1']\n['group start 2', 'text 5', 'group end 2']\n```\n\n### Extracting fixed-width fields\n\n```python\nfrom awking import records\n\nps_aux = '''\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.0  51120  2796 ?        Ss   Dec22   0:09 /usr/lib/systemd/systemd --system --deserialize 22\nroot         2  0.0  0.0      0     0 ?        S    Dec22   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        S    Dec22   0:04 [ksoftirqd/0]\nroot         5  0.0  0.0      0     0 ?        S<   Dec22   0:00 [kworker/0:0H]\nroot         7  0.0  0.0      0     0 ?        S    Dec22   0:15 [migration/0]\nroot         8  0.0  0.0      0     0 ?        S    Dec22   0:00 [rcu_bh]\nroot         9  0.0  0.0      0     0 ?        S    Dec22   2:47 [rcu_sched]\nsaml      3015  0.0  0.0 117756   596 pts/2    Ss   Dec22   0:00 bash\nsaml      3093  0.9  4.1 1539436 330796 ?      Sl   Dec22  70:16 /usr/lib64/thunderbird/thunderbird\nsaml      3873  0.0  0.1 1482432 8628 ?        Sl   Dec22   0:02 gvim -f\nroot      5675  0.0  0.0 124096   412 ?        Ss   Dec22   0:02 /usr/sbin/crond -n\nroot      5777  0.0  0.0  51132  1068 ?        Ss   Dec22   0:08 /usr/sbin/wpa_supplicant -u -f /var/log/wpa_supplica\nsaml      5987  0.7  1.5 1237740 119876 ?      Sl   Dec26  14:05 /opt/google/chrome/chrome --type=renderer --lang=en-\nroot      6115  0.0  0.0      0     0 ?        S    Dec27   0:06 [kworker/0:2]\n'''\n\nfor user, _, command in records(ps_aux.splitlines(), widths=[7, 58, ...]):\n    print(user, command)\n```\n\nThis will output:\n\n```text\nUSER    COMMAND\nroot    /usr/lib/systemd/systemd --system --deserialize 22\nroot    [kthreadd]\nroot    [ksoftirqd/0]\nroot    [kworker/0:0H]\nroot    [migration/0]\nroot    [rcu_bh]\nroot    [rcu_sched]\nsaml    bash\nsaml    /usr/lib64/thunderbird/thunderbird\nsaml    gvim -f\nroot    /usr/sbin/crond -n\nroot    /usr/sbin/wpa_supplicant -u -f /var/log/wpa_supplica\nsaml    /opt/google/chrome/chrome --type=renderer --lang=en-\nroot    [kworker/0:2]\n```\n\n## The problem\n\nDid you ever have to scan a log file for XMLs? How hard was it for you to\nextract a set of multi-line XMLs into separate files?\n\nYou can use `re.findall` or `re.finditer` but you need to read the entire log\nfile into a string first. You can also use an AWK script like this one:\n\n```awk\n#!/usr/bin/awk -f\n\n/^Payload: <([-_a-zA-Z0-9]+:)?Request/ {\n    ofname = \"request_\" (++index) \".xml\"\n    sub(/^Payload: /, \"\")\n}\n\n/<([-_a-zA-Z0-9]+:)?Request/, /<\\/([-_a-zA-Z0-9]+:)?Request/ {\n    print > ofname\n}\n\n/<\\/([-_a-zA-Z0-9]+:)?Request/ {\n    if (ofname) {\n        close(ofname)\n        ofname = \"\"\n    }\n}\n```\n\nThis works, and quite well. (Despite this being a Python module I encourage you\nto learn AWK if you don't already know it.)\n\nBut what if you want to build this kind of stuff into your Python application?\nWhat if your input is not lines in a file but a different type of objects?\n\n### Python equivalent using `awking`\n\nThe `RangeGrouper` class groups elements from the input iterable based on\npredicates for the start and end element. This is a bit like Perl's range\noperator or AWK's range pattern, except that your ranges get grouped into\n`START..END` iterables.\n\nAn equivalent of the above AWK script might look like this:\n\n```python\nfrom awking import RangeGrouper\nimport re\nimport sys\n\ng = RangeGrouper(r'^Payload: <([-_a-zA-Z0-9]+:)?Request',\n                 r'</([-_a-zA-Z0-9]+:)?Request', sys.stdin)\nfor index, request in enumerate(g, 1):\n    with open(f'request_{index}.xml', 'w') as f:\n        for line in request:\n            line = re.sub(r'^Payload: ', '', line)  # Not optimal\n            print(line, file=f, end='')\n```\n\nThe predicates may be regular expressions, either as `re.compile()` objects or\nstrings; or they may be any callables that accept a single argument and return\na true/false value.\n\n## Caveats\n\nThe grouping algorithm reads the input iterable lazily. You can still run out\nof memory if you keep references to previous groups without consuming them.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adsr303/awking", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "awking", "package_url": "https://pypi.org/project/awking/", "platform": "", "project_url": "https://pypi.org/project/awking/", "project_urls": {"Homepage": "https://github.com/adsr303/awking"}, "release_url": "https://pypi.org/project/awking/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Make it easier to use Python as an AWK replacement", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>awking</h1>\n<p>Make it easier to use Python as an AWK replacement.</p>\n<h2>Basic usage</h2>\n<h3>Extracting groups of lines</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">awking</span> <span class=\"kn\">import</span> <span class=\"n\">RangeGrouper</span>\n\n<span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"s1\">'''</span>\n<span class=\"s1\">text 1</span>\n<span class=\"s1\">text 2</span>\n<span class=\"s1\">group start 1</span>\n<span class=\"s1\">text 3</span>\n<span class=\"s1\">group end 1</span>\n<span class=\"s1\">text 4</span>\n<span class=\"s1\">group start 2</span>\n<span class=\"s1\">text 5</span>\n<span class=\"s1\">group end 2</span>\n<span class=\"s1\">text 6</span>\n<span class=\"s1\">'''</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">RangeGrouper</span><span class=\"p\">(</span><span class=\"s1\">'start'</span><span class=\"p\">,</span> <span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"n\">lines</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">))</span>\n</pre>\n<p>This will output:</p>\n<pre>['group start 1', 'text 3', 'group end 1']\n['group start 2', 'text 5', 'group end 2']\n</pre>\n<h3>Extracting fixed-width fields</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">awking</span> <span class=\"kn\">import</span> <span class=\"n\">records</span>\n\n<span class=\"n\">ps_aux</span> <span class=\"o\">=</span> <span class=\"s1\">'''</span>\n<span class=\"s1\">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span>\n<span class=\"s1\">root         1  0.0  0.0  51120  2796 ?        Ss   Dec22   0:09 /usr/lib/systemd/systemd --system --deserialize 22</span>\n<span class=\"s1\">root         2  0.0  0.0      0     0 ?        S    Dec22   0:00 [kthreadd]</span>\n<span class=\"s1\">root         3  0.0  0.0      0     0 ?        S    Dec22   0:04 [ksoftirqd/0]</span>\n<span class=\"s1\">root         5  0.0  0.0      0     0 ?        S&lt;   Dec22   0:00 [kworker/0:0H]</span>\n<span class=\"s1\">root         7  0.0  0.0      0     0 ?        S    Dec22   0:15 [migration/0]</span>\n<span class=\"s1\">root         8  0.0  0.0      0     0 ?        S    Dec22   0:00 [rcu_bh]</span>\n<span class=\"s1\">root         9  0.0  0.0      0     0 ?        S    Dec22   2:47 [rcu_sched]</span>\n<span class=\"s1\">saml      3015  0.0  0.0 117756   596 pts/2    Ss   Dec22   0:00 bash</span>\n<span class=\"s1\">saml      3093  0.9  4.1 1539436 330796 ?      Sl   Dec22  70:16 /usr/lib64/thunderbird/thunderbird</span>\n<span class=\"s1\">saml      3873  0.0  0.1 1482432 8628 ?        Sl   Dec22   0:02 gvim -f</span>\n<span class=\"s1\">root      5675  0.0  0.0 124096   412 ?        Ss   Dec22   0:02 /usr/sbin/crond -n</span>\n<span class=\"s1\">root      5777  0.0  0.0  51132  1068 ?        Ss   Dec22   0:08 /usr/sbin/wpa_supplicant -u -f /var/log/wpa_supplica</span>\n<span class=\"s1\">saml      5987  0.7  1.5 1237740 119876 ?      Sl   Dec26  14:05 /opt/google/chrome/chrome --type=renderer --lang=en-</span>\n<span class=\"s1\">root      6115  0.0  0.0      0     0 ?        S    Dec27   0:06 [kworker/0:2]</span>\n<span class=\"s1\">'''</span>\n\n<span class=\"k\">for</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">command</span> <span class=\"ow\">in</span> <span class=\"n\">records</span><span class=\"p\">(</span><span class=\"n\">ps_aux</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">(),</span> <span class=\"n\">widths</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">)</span>\n</pre>\n<p>This will output:</p>\n<pre>USER    COMMAND\nroot    /usr/lib/systemd/systemd --system --deserialize 22\nroot    [kthreadd]\nroot    [ksoftirqd/0]\nroot    [kworker/0:0H]\nroot    [migration/0]\nroot    [rcu_bh]\nroot    [rcu_sched]\nsaml    bash\nsaml    /usr/lib64/thunderbird/thunderbird\nsaml    gvim -f\nroot    /usr/sbin/crond -n\nroot    /usr/sbin/wpa_supplicant -u -f /var/log/wpa_supplica\nsaml    /opt/google/chrome/chrome --type=renderer --lang=en-\nroot    [kworker/0:2]\n</pre>\n<h2>The problem</h2>\n<p>Did you ever have to scan a log file for XMLs? How hard was it for you to\nextract a set of multi-line XMLs into separate files?</p>\n<p>You can use <code>re.findall</code> or <code>re.finditer</code> but you need to read the entire log\nfile into a string first. You can also use an AWK script like this one:</p>\n<pre><span class=\"c1\">#!/usr/bin/awk -f</span>\n\n<span class=\"sr\">/^Payload: &lt;([-_a-zA-Z0-9]+:)?Request/</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ofname</span> <span class=\"o\">=</span> <span class=\"s2\">\"request_\"</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"kr\">index</span><span class=\"p\">)</span> <span class=\"s2\">\".xml\"</span>\n    <span class=\"kr\">sub</span><span class=\"p\">(</span><span class=\"sr\">/^Payload: /</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"sr\">/&lt;([-_a-zA-Z0-9]+:)?Request/</span><span class=\"p\">,</span> <span class=\"sr\">/&lt;\\/([-_a-zA-Z0-9]+:)?Request/</span> <span class=\"p\">{</span>\n    <span class=\"kr\">print</span> <span class=\"o\">&gt;</span> <span class=\"nx\">ofname</span>\n<span class=\"p\">}</span>\n\n<span class=\"sr\">/&lt;\\/([-_a-zA-Z0-9]+:)?Request/</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">ofname</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">close</span><span class=\"p\">(</span><span class=\"nx\">ofname</span><span class=\"p\">)</span>\n        <span class=\"nx\">ofname</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This works, and quite well. (Despite this being a Python module I encourage you\nto learn AWK if you don't already know it.)</p>\n<p>But what if you want to build this kind of stuff into your Python application?\nWhat if your input is not lines in a file but a different type of objects?</p>\n<h3>Python equivalent using <code>awking</code></h3>\n<p>The <code>RangeGrouper</code> class groups elements from the input iterable based on\npredicates for the start and end element. This is a bit like Perl's range\noperator or AWK's range pattern, except that your ranges get grouped into\n<code>START..END</code> iterables.</p>\n<p>An equivalent of the above AWK script might look like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">awking</span> <span class=\"kn\">import</span> <span class=\"n\">RangeGrouper</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">RangeGrouper</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^Payload: &lt;([-_a-zA-Z0-9]+:)?Request'</span><span class=\"p\">,</span>\n                 <span class=\"sa\">r</span><span class=\"s1\">'&lt;/([-_a-zA-Z0-9]+:)?Request'</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">request</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'request_</span><span class=\"si\">{</span><span class=\"n\">index</span><span class=\"si\">}</span><span class=\"s1\">.xml'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"p\">:</span>\n            <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^Payload: '</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">)</span>  <span class=\"c1\"># Not optimal</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n</pre>\n<p>The predicates may be regular expressions, either as <code>re.compile()</code> objects or\nstrings; or they may be any callables that accept a single argument and return\na true/false value.</p>\n<h2>Caveats</h2>\n<p>The grouping algorithm reads the input iterable lazily. You can still run out\nof memory if you keep references to previous groups without consuming them.</p>\n\n          </div>"}, "last_serial": 5660145, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bb3e0f3de98e5d99dd710193a8ab8c30", "sha256": "e4ecdf8180419424cbac56fcbd1c9695fa83c80db9029aa2e7de8394958b74b3"}, "downloads": -1, "filename": "awking-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb3e0f3de98e5d99dd710193a8ab8c30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5558, "upload_time": "2019-07-05T21:10:36", "upload_time_iso_8601": "2019-07-05T21:10:36.299567Z", "url": "https://files.pythonhosted.org/packages/5e/bb/cc5a88867b40e1ea3b375c4ba7f8c9fa445846ffb2a921e3a3a916c192e7/awking-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbdda576aef27adb541fe3d3c8324fa4", "sha256": "e1f7a278c24cbaa82ad02c50d43132701e12756093438622992d4b564e98f905"}, "downloads": -1, "filename": "awking-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bbdda576aef27adb541fe3d3c8324fa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4877, "upload_time": "2019-07-05T21:10:38", "upload_time_iso_8601": "2019-07-05T21:10:38.219060Z", "url": "https://files.pythonhosted.org/packages/43/af/bb57fb86cd4be13394fa8468a674d236546b0db769cbdb4e19677a96b73a/awking-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "31793a57cc6b3252f2bc3ced54f7381d", "sha256": "5e8d4e05654656b031950d07b7376abde7b5fa540a5286c3bdbd45c32135ee93"}, "downloads": -1, "filename": "awking-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "31793a57cc6b3252f2bc3ced54f7381d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5614, "upload_time": "2019-07-06T16:21:09", "upload_time_iso_8601": "2019-07-06T16:21:09.241998Z", "url": "https://files.pythonhosted.org/packages/54/25/944aca4e91c7caa9cc98db96070e6e96362db6293a388048a9ef3f06178e/awking-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6005ba57ad5d0e05a87fe56a9270279a", "sha256": "5a9148bdc6ebbca6d84a64dd0cd8c99188ce28196a893c2dff0e8b0dba70a43f"}, "downloads": -1, "filename": "awking-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6005ba57ad5d0e05a87fe56a9270279a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4923, "upload_time": "2019-07-06T16:21:10", "upload_time_iso_8601": "2019-07-06T16:21:10.742238Z", "url": "https://files.pythonhosted.org/packages/ad/67/886ee780698122889a76e52d856c3489fd4120623c77c6125adb52c11fe5/awking-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "ef65d8d858e8d2fd72c9509acbb7a249", "sha256": "f62aef7e31555a8656ed12184b7de40c15bedc94d026d037c06f1cae29ebcc1c"}, "downloads": -1, "filename": "awking-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ef65d8d858e8d2fd72c9509acbb7a249", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5633, "upload_time": "2019-08-10T19:27:42", "upload_time_iso_8601": "2019-08-10T19:27:42.825037Z", "url": "https://files.pythonhosted.org/packages/4f/9f/f555990d2de309257c32dc50ebaa47263f13ce853ca3533dd39f9e26eb15/awking-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "294bf42279b841e27f5b38bc90872976", "sha256": "8a90636f949c481a33e274d4b7610efaad9ae119a47d9cca8218ef905f828cae"}, "downloads": -1, "filename": "awking-1.1.1.tar.gz", "has_sig": false, "md5_digest": "294bf42279b841e27f5b38bc90872976", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4930, "upload_time": "2019-08-10T19:27:44", "upload_time_iso_8601": "2019-08-10T19:27:44.463732Z", "url": "https://files.pythonhosted.org/packages/2c/86/3b3760432d2e1b3cfffe5027188d3ab0abba54e5039afa860905fba40a1d/awking-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef65d8d858e8d2fd72c9509acbb7a249", "sha256": "f62aef7e31555a8656ed12184b7de40c15bedc94d026d037c06f1cae29ebcc1c"}, "downloads": -1, "filename": "awking-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ef65d8d858e8d2fd72c9509acbb7a249", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5633, "upload_time": "2019-08-10T19:27:42", "upload_time_iso_8601": "2019-08-10T19:27:42.825037Z", "url": "https://files.pythonhosted.org/packages/4f/9f/f555990d2de309257c32dc50ebaa47263f13ce853ca3533dd39f9e26eb15/awking-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "294bf42279b841e27f5b38bc90872976", "sha256": "8a90636f949c481a33e274d4b7610efaad9ae119a47d9cca8218ef905f828cae"}, "downloads": -1, "filename": "awking-1.1.1.tar.gz", "has_sig": false, "md5_digest": "294bf42279b841e27f5b38bc90872976", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4930, "upload_time": "2019-08-10T19:27:44", "upload_time_iso_8601": "2019-08-10T19:27:44.463732Z", "url": "https://files.pythonhosted.org/packages/2c/86/3b3760432d2e1b3cfffe5027188d3ab0abba54e5039afa860905fba40a1d/awking-1.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:00 2020"}