{"info": {"author": "Benoit Grosjean", "author_email": "grosjean.benoit@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# *givemebib*\n*givemebib* is a bibliographic tool for scientific litterature that does two things: \n\n1) provides **clean .bib files** downloaded from <http://api.crossref.org/works/>\n\n2) reformats .bib files by outputing **abbreviated or full journal names** and by **deleting specified information fields** (e.g. url, doi, abstract...)\n\nIt can do so starting from several **input** types: \n\n* .pdf file of article \n* directory with .pdf files of articles\n* doi of article (e.g. '10.1234/123blabla-(bla).7810')\n* list of doi written in a file and separated by tabulations, new lines and white spaces (see [this sample](https://github.com/bgrosjea/givemebib/blob/master/samples/doi_list))\n* Google Scholar query (e.g. 'author:Smith 2020 graphene ~device -nanotube')\n* list of Google Scholar queries written in a file on separate lines (see [this sample](https://github.com/bgrosjea/givemebib/blob/master/samples/query_list))\n* .bib file to be formated\n\nIt does not work 100% of the time for .pdf files and Google Scholar queries. \n\nThe sample files in the [samples](https://github.com/bgrosjea/givemebib/blob/master/samples/) repository are meant to also show some of the error messages, hence some input files would not yield all the bib information. \n\n## How to install: \n\n### Using pip\n\nRun in terminal: \n`pip install givemebib`\n\n### Manually\n\n1) Download the directory (https://github.com/bgrosjea/givemebib.py_package/).\n2) In the downloaded directory, run in terminal: `python setup.py install` or `python3 setup.py install`\n\n## How to run it:  \n### with Command line\n\nRun in terminal: \n\n`givemebib <target> <0 or 1>`\n\n* target is one of the input types described above\n* 0 will transform output .bib files to include full journal names\n* 1 will transform output .bib files to include abbreviated journal names\n\nIf the *givemebib* command is unknown, make sure python packages are added to your PATH system variable. \n\n\n### single functions in python script\n\nSingle functions used in the main script can be run in a python script : \n```python\nimport givemebib.functions as gmb\npdf = './example.pdf'\ndoi = gmb.pdf2doi(pdf)\n...\n```\n\nFunctions: \n\n* **scholarquery2doi(query)** given a search query (string), returns the doi of the first Google Scholar result. \n* **pdfminer2doi(pdf)** given the path to a .pdf file (string), tries to finds the doi in the .pdf using pdfminer.six and tries the figure captions as Google Scholar queries if not until a doi is found on the first search result link. This function is integrated in pdf2doi, which should be preferred. \n* **pdf2doi(pdf)** given the path to a .pdf file (string), tries to finds the doi in the .pdf first using PyPDF2, then pdfminer2doi\n* **doi2bib(doi)** given a doi (string starting with '10.'), returns bib as a string, as downloaded from <http://api.crossref.org/works/>\n* **pdf2bib(pdf)** given the path to a .pdf file (string), returns bib as a string. Interfaces pdf2doi and doi2bib. \n* **pdf2bibfile(pdf)** given the path to a .pdf file (string), saves bib in file pdfname.bib\n* **bib2reformat(bib, abbrev, exclusion_list)** given a bib (string), 0 (non abbreviated journal names in output) or 1 (abbreviated journal names in output), a list of information fields to delete (e.g. ['url', 'doi', 'month',...]), returns a reformated bib string without the fields listed and with abbreviated (abbrev=1) or not (abbrev=0) journal names.\n* **bibfile2reformat(bib, abbrev, exclusion_list)** given a .bib file, abbrev (0 or 1) and exclusion_list (see above), writes a reformated bib file as bibname.reformat.bib\n* **savenonamebib(bib, directory)** given a bib string and the path to a directory, saves the bib in a .bib file in the directory, naming it after information from the bib. It tries several names until one is not an existing file: nameinbib.bib, journalInitials_nameinbib.bib, journalInitials_nameinbib_2.bib, ...\n* **biburl(doi)** given a doi (string) returns the corresponding bib url on crossref.org: http://api.crossref.org/works/doi/transform/application/x-bibtex\n\n### Necessary files\n\nThose two files should be automatically installed\n* information fields to delete are to be entered in file *givemebib.ini* \n* journal names and their abbreviations are stored in *journal_abbreviations.dat*, additional entries can be written with 'XXX<>XXX' as separator. Most abbreviations were found on <http://guides.lib.berkeley.edu/bioscience-journal-abbreviations/>\n\n    Additional abbreviations can be found for instance on wikipedia or on:\n\n    * <http://cassi.cas.org/search.jsp>\n\n    * <http://www.journalabbr.com/>\n\n    * <https://journal-abbreviations.library.ubc.ca/>\n\n### Error output\n\nIn the directory of execution, the file *givemebib.log* stores errors encountered such as: \n\n* inputs that gave no results (.pdf files from which no *doi* was extracted, incorrect *doi* etc.)\n\n* inputs that gave possibly wrong results (.pdf from which the *doi* extracted had to be modified to yield a result or required a Google Scholar search)\n\n* journal names or abbreviations not detected or stored in *journal_abbreviations*.dat\n\n## How it works\n\nTo obtain a .bib, the *doi* of the article is read either as provided, extracted from a .pdf or from the webpage of the first Google Scholar result of a provided search query. The .bib is then downloaded using this url: <http://api.crossref.org/works/theDOI/transform/application/x-bibtex>\n\nThe extraction of a *doi* from an article does not always work right. Sometimes no *doi* is found, sometimes a *doi* with extra characters is found. In that latter case, the last characters of the *doi* are progressively removed until a match is found on crossref.org. To limit errors, three methods are used in the following order: i) with the pdf read by PyPDF2; ii) with the pdf read by pdfminer.six; iii) by using figure captions of the article as Google Scholar queries until a doi is found on the webpage of the first search result. The last method does not work well as: i) figure captions as queries do not always give a result nor the right one; ii) the IP address can get blocked by Google Scholar after multiple queries; iii) sometimes the doi of another article is detected on the page. This might be subject to future improvements. \n\nAll bib are then reformatted before being written into files. \n\n## License\n\nGNU General Public License v3 (GPLv3)\n\n## Credit\n\nBenoit Grosjean : <https://github.com/bgrosjea>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bgrosjea/givemebib", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "givemebib", "package_url": "https://pypi.org/project/givemebib/", "platform": "", "project_url": "https://pypi.org/project/givemebib/", "project_urls": {"Homepage": "https://github.com/bgrosjea/givemebib"}, "release_url": "https://pypi.org/project/givemebib/1.0.2/", "requires_dist": ["mechanize (>=0.4.5)", "pdfminer.six (>=20200402)", "PyPDF2 (>=1.26.0)"], "requires_python": ">=3.5.6", "summary": "Provides clean .bib files, with possible abbreviation of journal titles", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><em>givemebib</em></h1>\n<p><em>givemebib</em> is a bibliographic tool for scientific litterature that does two things:</p>\n<ol>\n<li>\n<p>provides <strong>clean .bib files</strong> downloaded from <a href=\"http://api.crossref.org/works/\" rel=\"nofollow\">http://api.crossref.org/works/</a></p>\n</li>\n<li>\n<p>reformats .bib files by outputing <strong>abbreviated or full journal names</strong> and by <strong>deleting specified information fields</strong> (e.g. url, doi, abstract...)</p>\n</li>\n</ol>\n<p>It can do so starting from several <strong>input</strong> types:</p>\n<ul>\n<li>.pdf file of article</li>\n<li>directory with .pdf files of articles</li>\n<li>doi of article (e.g. '10.1234/123blabla-(bla).7810')</li>\n<li>list of doi written in a file and separated by tabulations, new lines and white spaces (see <a href=\"https://github.com/bgrosjea/givemebib/blob/master/samples/doi_list\" rel=\"nofollow\">this sample</a>)</li>\n<li>Google Scholar query (e.g. 'author:Smith 2020 graphene ~device -nanotube')</li>\n<li>list of Google Scholar queries written in a file on separate lines (see <a href=\"https://github.com/bgrosjea/givemebib/blob/master/samples/query_list\" rel=\"nofollow\">this sample</a>)</li>\n<li>.bib file to be formated</li>\n</ul>\n<p>It does not work 100% of the time for .pdf files and Google Scholar queries.</p>\n<p>The sample files in the <a href=\"https://github.com/bgrosjea/givemebib/blob/master/samples/\" rel=\"nofollow\">samples</a> repository are meant to also show some of the error messages, hence some input files would not yield all the bib information.</p>\n<h2>How to install:</h2>\n<h3>Using pip</h3>\n<p>Run in terminal:\n<code>pip install givemebib</code></p>\n<h3>Manually</h3>\n<ol>\n<li>Download the directory (<a href=\"https://github.com/bgrosjea/givemebib.py_package/\" rel=\"nofollow\">https://github.com/bgrosjea/givemebib.py_package/</a>).</li>\n<li>In the downloaded directory, run in terminal: <code>python setup.py install</code> or <code>python3 setup.py install</code></li>\n</ol>\n<h2>How to run it:</h2>\n<h3>with Command line</h3>\n<p>Run in terminal:</p>\n<p><code>givemebib &lt;target&gt; &lt;0 or 1&gt;</code></p>\n<ul>\n<li>target is one of the input types described above</li>\n<li>0 will transform output .bib files to include full journal names</li>\n<li>1 will transform output .bib files to include abbreviated journal names</li>\n</ul>\n<p>If the <em>givemebib</em> command is unknown, make sure python packages are added to your PATH system variable.</p>\n<h3>single functions in python script</h3>\n<p>Single functions used in the main script can be run in a python script :</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">givemebib.functions</span> <span class=\"k\">as</span> <span class=\"nn\">gmb</span>\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"s1\">'./example.pdf'</span>\n<span class=\"n\">doi</span> <span class=\"o\">=</span> <span class=\"n\">gmb</span><span class=\"o\">.</span><span class=\"n\">pdf2doi</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>\n<p>Functions:</p>\n<ul>\n<li><strong>scholarquery2doi(query)</strong> given a search query (string), returns the doi of the first Google Scholar result.</li>\n<li><strong>pdfminer2doi(pdf)</strong> given the path to a .pdf file (string), tries to finds the doi in the .pdf using pdfminer.six and tries the figure captions as Google Scholar queries if not until a doi is found on the first search result link. This function is integrated in pdf2doi, which should be preferred.</li>\n<li><strong>pdf2doi(pdf)</strong> given the path to a .pdf file (string), tries to finds the doi in the .pdf first using PyPDF2, then pdfminer2doi</li>\n<li><strong>doi2bib(doi)</strong> given a doi (string starting with '10.'), returns bib as a string, as downloaded from <a href=\"http://api.crossref.org/works/\" rel=\"nofollow\">http://api.crossref.org/works/</a></li>\n<li><strong>pdf2bib(pdf)</strong> given the path to a .pdf file (string), returns bib as a string. Interfaces pdf2doi and doi2bib.</li>\n<li><strong>pdf2bibfile(pdf)</strong> given the path to a .pdf file (string), saves bib in file pdfname.bib</li>\n<li><strong>bib2reformat(bib, abbrev, exclusion_list)</strong> given a bib (string), 0 (non abbreviated journal names in output) or 1 (abbreviated journal names in output), a list of information fields to delete (e.g. ['url', 'doi', 'month',...]), returns a reformated bib string without the fields listed and with abbreviated (abbrev=1) or not (abbrev=0) journal names.</li>\n<li><strong>bibfile2reformat(bib, abbrev, exclusion_list)</strong> given a .bib file, abbrev (0 or 1) and exclusion_list (see above), writes a reformated bib file as bibname.reformat.bib</li>\n<li><strong>savenonamebib(bib, directory)</strong> given a bib string and the path to a directory, saves the bib in a .bib file in the directory, naming it after information from the bib. It tries several names until one is not an existing file: nameinbib.bib, journalInitials_nameinbib.bib, journalInitials_nameinbib_2.bib, ...</li>\n<li><strong>biburl(doi)</strong> given a doi (string) returns the corresponding bib url on crossref.org: <a href=\"http://api.crossref.org/works/doi/transform/application/x-bibtex\" rel=\"nofollow\">http://api.crossref.org/works/doi/transform/application/x-bibtex</a></li>\n</ul>\n<h3>Necessary files</h3>\n<p>Those two files should be automatically installed</p>\n<ul>\n<li>\n<p>information fields to delete are to be entered in file <em>givemebib.ini</em></p>\n</li>\n<li>\n<p>journal names and their abbreviations are stored in <em>journal_abbreviations.dat</em>, additional entries can be written with 'XXX&lt;&gt;XXX' as separator. Most abbreviations were found on <a href=\"http://guides.lib.berkeley.edu/bioscience-journal-abbreviations/\" rel=\"nofollow\">http://guides.lib.berkeley.edu/bioscience-journal-abbreviations/</a></p>\n<p>Additional abbreviations can be found for instance on wikipedia or on:</p>\n<ul>\n<li>\n<p><a href=\"http://cassi.cas.org/search.jsp\" rel=\"nofollow\">http://cassi.cas.org/search.jsp</a></p>\n</li>\n<li>\n<p><a href=\"http://www.journalabbr.com/\" rel=\"nofollow\">http://www.journalabbr.com/</a></p>\n</li>\n<li>\n<p><a href=\"https://journal-abbreviations.library.ubc.ca/\" rel=\"nofollow\">https://journal-abbreviations.library.ubc.ca/</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Error output</h3>\n<p>In the directory of execution, the file <em>givemebib.log</em> stores errors encountered such as:</p>\n<ul>\n<li>\n<p>inputs that gave no results (.pdf files from which no <em>doi</em> was extracted, incorrect <em>doi</em> etc.)</p>\n</li>\n<li>\n<p>inputs that gave possibly wrong results (.pdf from which the <em>doi</em> extracted had to be modified to yield a result or required a Google Scholar search)</p>\n</li>\n<li>\n<p>journal names or abbreviations not detected or stored in <em>journal_abbreviations</em>.dat</p>\n</li>\n</ul>\n<h2>How it works</h2>\n<p>To obtain a .bib, the <em>doi</em> of the article is read either as provided, extracted from a .pdf or from the webpage of the first Google Scholar result of a provided search query. The .bib is then downloaded using this url: <a href=\"http://api.crossref.org/works/theDOI/transform/application/x-bibtex\" rel=\"nofollow\">http://api.crossref.org/works/theDOI/transform/application/x-bibtex</a></p>\n<p>The extraction of a <em>doi</em> from an article does not always work right. Sometimes no <em>doi</em> is found, sometimes a <em>doi</em> with extra characters is found. In that latter case, the last characters of the <em>doi</em> are progressively removed until a match is found on crossref.org. To limit errors, three methods are used in the following order: i) with the pdf read by PyPDF2; ii) with the pdf read by pdfminer.six; iii) by using figure captions of the article as Google Scholar queries until a doi is found on the webpage of the first search result. The last method does not work well as: i) figure captions as queries do not always give a result nor the right one; ii) the IP address can get blocked by Google Scholar after multiple queries; iii) sometimes the doi of another article is detected on the page. This might be subject to future improvements.</p>\n<p>All bib are then reformatted before being written into files.</p>\n<h2>License</h2>\n<p>GNU General Public License v3 (GPLv3)</p>\n<h2>Credit</h2>\n<p>Benoit Grosjean : <a href=\"https://github.com/bgrosjea\" rel=\"nofollow\">https://github.com/bgrosjea</a></p>\n\n          </div>"}, "last_serial": 7069414, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "3bac90bdd73c56fd3d2212daec619b5d", "sha256": "f63c0f79abc52a345220779f7c51fce36ccbfa3d56a876ecff5ea19b72d44ea8"}, "downloads": -1, "filename": "givemebib-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3bac90bdd73c56fd3d2212daec619b5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.6", "size": 58084, "upload_time": "2020-04-21T16:49:09", "upload_time_iso_8601": "2020-04-21T16:49:09.752666Z", "url": "https://files.pythonhosted.org/packages/63/5a/71d78caa25b3389355cad9ede1be637a9048cfb367288a407967368eceed/givemebib-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2917fd03ec96a6153a5435a52add257c", "sha256": "5462892e41c046185e2b081a72f5bcbd5f9d0e075574f1f8178d45a9dd2203ac"}, "downloads": -1, "filename": "givemebib-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2917fd03ec96a6153a5435a52add257c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.6", "size": 11805, "upload_time": "2020-04-21T16:49:12", "upload_time_iso_8601": "2020-04-21T16:49:12.718891Z", "url": "https://files.pythonhosted.org/packages/72/54/1c5d40b36f622a8846a202dd13a11232b939775237ade7f00f80e46d0f38/givemebib-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d6bcaecaea7069aa9b6a22d4117a358c", "sha256": "1ccdcc662b5136bb6769cb9b44803a916c52bd228ef8026641320d673a8e0133"}, "downloads": -1, "filename": "givemebib-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6bcaecaea7069aa9b6a22d4117a358c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.6", "size": 58085, "upload_time": "2020-04-21T16:59:32", "upload_time_iso_8601": "2020-04-21T16:59:32.374271Z", "url": "https://files.pythonhosted.org/packages/17/97/42b3deff1bc905b5d90074ecf42a4ea9e6ee000d71430b880e843478d64e/givemebib-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4135ce2d7d9369974008dd2ab7a3256", "sha256": "751d0aea9c05cd66c16ee4aa2f4f32c7f94381f43763951013ae4c7480b72ba3"}, "downloads": -1, "filename": "givemebib-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f4135ce2d7d9369974008dd2ab7a3256", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.6", "size": 11791, "upload_time": "2020-04-21T16:59:34", "upload_time_iso_8601": "2020-04-21T16:59:34.043516Z", "url": "https://files.pythonhosted.org/packages/dd/94/5cac47e3344f76c415287c13cf4b369c028ef6d72cac6467d367598fcbf4/givemebib-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6bcaecaea7069aa9b6a22d4117a358c", "sha256": "1ccdcc662b5136bb6769cb9b44803a916c52bd228ef8026641320d673a8e0133"}, "downloads": -1, "filename": "givemebib-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6bcaecaea7069aa9b6a22d4117a358c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.6", "size": 58085, "upload_time": "2020-04-21T16:59:32", "upload_time_iso_8601": "2020-04-21T16:59:32.374271Z", "url": "https://files.pythonhosted.org/packages/17/97/42b3deff1bc905b5d90074ecf42a4ea9e6ee000d71430b880e843478d64e/givemebib-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4135ce2d7d9369974008dd2ab7a3256", "sha256": "751d0aea9c05cd66c16ee4aa2f4f32c7f94381f43763951013ae4c7480b72ba3"}, "downloads": -1, "filename": "givemebib-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f4135ce2d7d9369974008dd2ab7a3256", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.6", "size": 11791, "upload_time": "2020-04-21T16:59:34", "upload_time_iso_8601": "2020-04-21T16:59:34.043516Z", "url": "https://files.pythonhosted.org/packages/dd/94/5cac47e3344f76c415287c13cf4b369c028ef6d72cac6467d367598fcbf4/givemebib-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:42 2020"}