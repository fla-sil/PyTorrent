{"info": {"author": "Thomas Grenfell Smith", "author_email": "smithtg@ncbi.nlm.nih.gov", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: Public Domain", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "# `install_binaries` - install executable programs in bin/\n\n`install_binaries` is a tool to help you create wrappers around\nexecutable files.  It ensures that they're installed in a reasonable\ndirectory, and that they have their +x bit set.  It should work fine\nwith old versions of pip and setuptools, and with Python 2.7 and up.\nIt should work with both `sdist` and `bdist_wheel` packages.\n\nTo use it, you have to do two things.  First, you need to add two lines\nto your `setup.py`:\n\n```\nsetup(\n\tname=\"my_cool_app\",\n\t...\n\tsetup_requires=['install_binaries'],\n\tinstall_binaries=['my-binary', 'build/other-one'],\n)\n```\n\nThis will install both `my-binary` and `other-one` to\n`.../my-virtualenv/bin` when your package is installed.\n\nSecond, you need to make sure your binary is included in your\n`MANIFEST.in` file.  So that might look like:\n\n```\ninclude requirements.txt\ninclude VERSION\ninclude my-binary\ninclude build/other-one\n```\n\nIf it's left out, it won't be included in the package that `python\nsetup.py sdist` creates.\n\n## Known limitations\n\nIf your package gets installed as an egg, by using `easy_install` or\n`setup.py install`, the `install_binaries` code never gets called, so we\nhave no chance to install the binaries.  There may be a way around this,\nbut I haven't found it.  `install_binaries` attempts to warn the user in\nthis situation.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tgs/install-binaries", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "install_binaries", "package_url": "https://pypi.org/project/install_binaries/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/install_binaries/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/tgs/install-binaries"}, "release_url": "https://pypi.org/project/install_binaries/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "Install binaries to the same place Python would install scripts.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # `install_binaries` - install executable programs in bin/<br><br>`install_binaries` is a tool to help you create wrappers around<br>executable files.  It ensures that they're installed in a reasonable<br>directory, and that they have their +x bit set.  It should work fine<br>with old versions of pip and setuptools, and with Python 2.7 and up.<br>It should work with both `sdist` and `bdist_wheel` packages.<br><br>To use it, you have to do two things.  First, you need to add two lines<br>to your `setup.py`:<br><br>```<br>setup(<br>\tname=\"my_cool_app\",<br>\t...<br>\tsetup_requires=['install_binaries'],<br>\tinstall_binaries=['my-binary', 'build/other-one'],<br>)<br>```<br><br>This will install both `my-binary` and `other-one` to<br>`.../my-virtualenv/bin` when your package is installed.<br><br>Second, you need to make sure your binary is included in your<br>`MANIFEST.in` file.  So that might look like:<br><br>```<br>include requirements.txt<br>include VERSION<br>include my-binary<br>include build/other-one<br>```<br><br>If it's left out, it won't be included in the package that `python<br>setup.py sdist` creates.<br><br>## Known limitations<br><br>If your package gets installed as an egg, by using `easy_install` or<br>`setup.py install`, the `install_binaries` code never gets called, so we<br>have no chance to install the binaries.  There may be a way around this,<br>but I haven't found it.  `install_binaries` attempts to warn the user in<br>this situation.\n          </div>"}, "last_serial": 1567920, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "c4c1d1702f786b7ba18312b403f25562", "sha256": "3a6064aad534e0f623dcd32f44a354bd9004ab9c761bd2f453921fcf49329a53"}, "downloads": -1, "filename": "install_binaries-0.4.tar.gz", "has_sig": false, "md5_digest": "c4c1d1702f786b7ba18312b403f25562", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3517, "upload_time": "2015-05-29T14:35:55", "upload_time_iso_8601": "2015-05-29T14:35:55.613831Z", "url": "https://files.pythonhosted.org/packages/2b/76/0a631ac7bb2d15ab093305046e900c2203df3cea8b6b80f34652b8572b37/install_binaries-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "25747960a8d8773f53d42d9229bd164b", "sha256": "5c2e58b554fe33c253f85bb4e7564b063f478bbc5f22116a69149faa31a84a6f"}, "downloads": -1, "filename": "install_binaries-0.4.1.tar.gz", "has_sig": false, "md5_digest": "25747960a8d8773f53d42d9229bd164b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3658, "upload_time": "2015-05-29T14:42:44", "upload_time_iso_8601": "2015-05-29T14:42:44.925602Z", "url": "https://files.pythonhosted.org/packages/db/5c/391a40d92d335f05f2a3200ccdd60c1fab24724ef9b4ad8cfedb5388f2f9/install_binaries-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25747960a8d8773f53d42d9229bd164b", "sha256": "5c2e58b554fe33c253f85bb4e7564b063f478bbc5f22116a69149faa31a84a6f"}, "downloads": -1, "filename": "install_binaries-0.4.1.tar.gz", "has_sig": false, "md5_digest": "25747960a8d8773f53d42d9229bd164b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3658, "upload_time": "2015-05-29T14:42:44", "upload_time_iso_8601": "2015-05-29T14:42:44.925602Z", "url": "https://files.pythonhosted.org/packages/db/5c/391a40d92d335f05f2a3200ccdd60c1fab24724ef9b4ad8cfedb5388f2f9/install_binaries-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:40 2020"}