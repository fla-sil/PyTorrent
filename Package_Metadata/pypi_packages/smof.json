{"info": {"author": "Zebulun Arendsee", "author_email": "zbwrnz@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n[![Build Status](https://travis-ci.org/incertae-sedis/smof.svg?branch=master)](https://travis-ci.org/incertae-sedis/smof)\n[![Docker Docker build](https://img.shields.io/docker/cloud/build/incertaesedis/smof.svg)](https://hub.docker.com/r/incertaesedis/smof/) [![docker pulls](https://img.shields.io/docker/pulls/incertaesedis/smof.svg)](https://hub.docker.com/r/incertaesedis/smof/)\n![PyPI](https://img.shields.io/pypi/v/smof.svg)\n[![DOI](https://zenodo.org/badge/19203682.svg)](https://zenodo.org/badge/latestdoi/19203682)\n\nsmof - Simple Manipulation Of FASTA\n====\n\nUNIX-style FASTA tools\n\nInstallation\n============\n\n```\npip install smof\n```\n\nFunctions\n=========\n\n`smof` is divided into the following subcommands:\n\n | subcommand  | description                                           |\n | ----------  | ----------------------------------------------------- |\n | `cut`       | emulates UNIX cut command, where fields are entries   |\n | `clean`     | cleans fasta files                                    |\n | `consensus` | finds the consensus sequence for aligned sequence     |\n | `filter`    | extracts sequences meeting the given conditions       |\n | `grep`      | roughly emulates the UNIX grep command                |\n | `md5sum`    | calculate an md5 checksum for the input sequences     |\n | `head`      | writes the first sequences in a file                  |\n | `permute`   | randomly order sequence                               |\n | `reverse`   | reverse each sequence (or reverse complement)         |\n | `sample`    | randomly select entries from fasta file               |\n | `sniff`     | extract info about the sequence                       |\n | `sort`      | sort sequences                                        |\n | `split`     | split a fasta file into smaller files                 |\n | `stat`      | calculate sequence statistics                         |\n | `subseq`    | extract subsequence from each entry (revcomp if a\\<b) |\n | `tail`      | writes the last sequences in a file                   |\n | `translate` | translate a DNA sequence into a protein sequence      |\n | `uniq`      | count, omit, or merge repeated entries                |\n | `wc`        | roughly emulates the UNIX wc command                  |\n\n\nDetailed instructions on how to use each command in `smof` is available via the\n'-h' option.\n\nTo list subcommands\n\n``` bash\nsmof -h\n```\n\nGet help on a specific subcommand\n\n``` bash\nsmof grep -h\n```\n\nSample data\n===========\n\nThe FASTA files used in the examples below are available in the\n`sample-data/anncaliia_algerae` folder in the `smof` github repo\n([here](https://github.com/incertae-sedis/smof)).\n\nUNIX-like commands\n==================\n\nThis group of subcommands include commands based off UNIX builtins.\n\n## `smof head` and `tail`\n\nThese functions mimic their GNU counterparts but on the entry, rather than\nline, level. For example `smof head` prints the first entry in a file and `smof\n-5` prints the first 5. Similarly for `smof tail`. \n\n```bash\nsmof head aa.faa\nsmof head -3 aa.faa\nsmof tail aa.faa\nsmof tail -3 aa.faa\nsmof tail +2 aa.faa | smof head\n```\n\nIn addition to the GNU-like functionallity, `smof head` and `tail` can also\nlimit the sequence that is output. This can be useful for diagnostic purposes.\n\n```bash\n# print last 3 nucleotides (last codon) from the first 5 transcripts\nsmof head -l 3 -5 aa.transcripts.fna\n# print the first codon\nsmof head -f 3 -5 aa.transcripts.fna\n# print first and last\nsmof head -f 3 -l 3 -5 aa.transcripts.fna\n```\n\nThis sort of diagnostics is easier done with `smof sniff`.\n\n## `smof sort`\n\n`smof sort` can be used to simply sort sequences alphabetically by header. It\ncan also sort by sequence length. One useful feature with no homolog in GNU\nsort is the ability to sort by regex capture. For example, if the FASTA headers\nare formated like 'locus|xxx|taxon|yyy|gi|zzz', you can sort them numerically\nby taxon with the command `smof sort -nx 'taxon\\|(\\d+)'`.\n\n```bash\n# print the shortest sequence\nsmof sort -l aa.faa | smof head\n# print the longest sequence\nsmof sort -l aa.faa | smof tail\n# sort by the function in the header description\nsmof sort -x 'PRA339 (.*)' aa.faa | smof tail\n```\n\n## `smof sample`\n\n`smof sample` allows extraction of a random sample of entries. With no\narguments, it reads the entire file into memory and outputs a random one.\n\n```bash\n# retrieve 1 sequence by default\nsmof sample aa.faa\nsmof sample -n 5 aa.faa\n# set a random seed (useful for debugging and reproducible scripts)\nsmof sample --seed 42 aa.faa\n```\n\n## `smof split`\n\nThis command allows easily splitting of a large file into many smaller files.\n\nYou can split a large file several small files with equal numbers of sequences\n```bash\nsmof split -n 5 -p zzz aa.faa\ngrep -c '>' aa.faa zzz*\nrm zzz*\n```\n\nOf you can split a large file into many smaller files with a set maximum number\nof sequences per file\n```bash\nsmof split -qn 500 -p zzz aa.faa\ngrep -c '>' aa.faa zzz*\nrm zzz*\n```\n\n## `smof uniq`\n\nThis command corresponds roughly to GNU uniq, but entries are considered\nidentical only if both header and sequence are exactly the same. As currently\nimplemented, I don't find much use for this command.\n\n## `smof wc`\n\nOutputs the number of characters and entries in the fasta file. Generally `smof\nstat` is better.\n\n## `smof grep`\n\nWhereas GNU grep searches lines for matches, `smof grep` searches either the\nFASTA headers or the FASTA sequence.\n\nExtract the entries by matches to the header (default)\n\n``` bash\nsmof grep H312_03353 aa.faa\n```\n\nExtract entries by matches to a sequence \n\n```bash\nsmof grep --match-sequence SKSQ aa.faa\n# or equivalently\nsmof grep -q SKSQ aa.faa\n```\n\nYou can include flanking regions in the match\n```bash\n# match 3 residues downstream\nsmof grep -qA3 'SKSQ' aa.faa\n# match 3 residues upstream \nsmof grep -qB3 'SKSQ' aa.faa\n# match 3 residues up- and downstream \nsmof grep -qC3 'SKSQ' aa.faa\n```\n\nInclusion of flanking regions is particularly useful in tandem with the -o\noption, which extracts only the matching sequence\n```bash\nsmof grep -qoA3 'SKSQ' aa.faa\n```\n\nWrite the output in gff format\n```bash\nsmof grep -q --gff SKSQ aa.faa\n```\n\nYou can count the number of sequences with a match\n```bash\nsmof grep -qc SKS aa.faa\n```\n\nOr the total number of matches\n```bash\nsmof grep -qm SKSQ aa.faa\n```\n\nOr both\n```bash\nsmof grep -qmc SKS aa.faa\n```\n\nJust like in GNU grep, you can invert a search. This search finds all genes\nthat are not annotated as being hypothetical genes.\n```bash\nsmof grep -v hypothetical aa.faa\n```\n\nBy default `smof grep` is case insensitive (unlike GNU grep), but it can be\nmade case sensitive\n```bash\nsmof grep -I CoA aa.faa\n```\n\nYou can search using patterns in a file\n```bash\nsmof grep -f id-sample.txt aa.faa\n```\n\nThis, however, can be a little slow, since it searchs each pattern in the file\nagainst the entire header. A much faster approach is to extract a search\npattern from the headers (or sequence) and then lookup the header pattern in\nthe set of search patterns.\n\n```bash\nsmof grep -f id-sample.txt -w '\\| (\\S+) \\|' aa.faa\n```\n\nCount occurrences (on both strands) of a DNA pattern using IUPAC extended\nnucleotide alphabet.\n```bash\nsmof grep -qmbG YYNCTATAWAWASM aa.supercontigs.fna\n```\n\nYou can search using a sequence query\n```bash\n# select 5 random sequences\nsmof sample -n 5 aa.faa | smof subseq -b 5 35 > rand.faa\nsmof grep -q --fastain rand.faa aa.faa\n```\n\nOr you can search for identical sequences shared between two fasta files\n```bash\nsmof sample -n 5 aa.faa > rand.faa\nsmof grep -q --fastain rand.faa aa.faa \n```\n\nFind non-overlapping open reading frames of length greater than 100 codons.\nThis is meant as an example of regex searching. This will NOT give you a great\nanswer. smof does not consider frames (nor will it ever). It will not find the\nset of longest possible ORFs. If you want to identify ORFs, you should use a\nspecialized program. That said:\n\n``` bash\nsmof grep -qPb --gff 'ATG(.{3}){99,}?(TAA|TGA|TAG)' aa.supercontigs.fna\n```\n\n## `smof md5sum`\n\nThis tool is useful if you want a checksum for a FASTA file that is independent\nof format (e.g. column width or case).\n\n\nString manipulation commands\n============================\n\n## `smof permute`\n\nPermutes the letters of a sequence\n\n## `smof reverse`\n\nReverses a sequence (does NOT take the reverse complement)\n\n## `smof subseq`\n\n``` bash\n# extract a subsequence\nsmof grep H312_00003T0 aa.faa | smof subseq -b 10 20\n# color the subsequences instead\nsmof grep H312_00003T0 aa.faa | smof subseq -b 10 20 -c red\n```\n\nIf the start is higher than the end, and the sequence appears to be a DNA\nsequence, then smof will take the reverse complement.\n\n`smof subseq` can also read from a gff file. However, if you want to extract\nmany sequences from a fasta file using a gff file as a guide (or other gff/bed\nmanipulations), consider using a specialized tools such as `bedtools`.\n\n\nBiological sequence tools\n=========================\n\n## `smof clean`\n\nThis command can be used to tidy a sequence. You can change the column width,\nremove gaps and stops, convert all letters to one case and/or change irregular\ncharacters to unknowns. By default, it removes whitespace in a sequence and\nmakes uniform, 80-character columns.\n\n## `smof filter`\n\nOutput only sequence that meet a set of conditions.\n\nIf you want to only keep sequences that are longer than 100 letters\n\n```bash\nsmof clean -x aa.faa | smof filter -l 100\n```\n\nNote that I call clean before filtering to remove the stop character, which\nshould not be included when calculating length.\n\nOr shorter than 100 letters\n\n```bash\nsmof clean -x aa.faa | smof filter -s 100 aa.faa\n```\n\nOr that have greater than 50% AFILMVW content (hydrophobic amino acids)\n\n```bash\nsmof clean -x aa.faa | smof filter -c 'AFILMVW > .5' aa.faa\n```\n\n## `smof sniff`\n\nThis command runs a number of checks on a FASTA file and is useful in\ndiagnosing problems. For details, run `smof sniff -h`.\n\n## `smof stat`\n\nThe default operation outputs number of sequences and summary statistics\nconcerning the sequence lengths.\n\n```bash\nsmof stat aa.supercontigs.fna\n nseq:      431\n nchars:    12163397\n 5sum:      445 3301 9555 30563 746881\n mean(sd):  28221 (58445)\n N50:       71704\n```\n\n'5sum' refers to the five number summary of the sequence lengths (minimum, 25%\nquantile, median, 75% quantile, and maximum).\n\nStatistics can also be calculated on a sequence-by-sequence level, which by\ndefault outputs the sequence names (the first word of the header) and the\nsequence length, e.g.\n\n```bash\nsmof stat -q aa.supercontigs.fna | head\n```\n\nThere are many other options. Run `smof stat -h` for descriptions.\n\n\nCase study: exploring motifs in chloroplast genomes\n===================================================\n\nAlice is interested in the chloroplast *maturase* gene. Bob gives her a sample\ndataset which includes 10 fasta files of proteins encoded by the chloroplast\ngenomes of 10 different plant species. These files are available in the\n`sample-data/chloroplasts` directory.\n\nYou can find this dataset in the folder *doc/test-data/chloroplast-proteins*.\n\nHer first step is to explore the data. She first counts the sequences in each\nfile with a simple grep command.\n\n```\ngrep -c '>' *faa\n```\n\nNext she tests the sequences with `smof sniff`\n\n```\nsmof sniff *faa\n```\n\nProducing the following output:\n\n```\n578 uniq sequences (757 total)\nAll prot\nAll uppercase\nProtein Features:\n  initial-Met:         755        99.7358%\n  terminal-stop:       0          0.0000%\n  internal-stop:       0          0.0000%\n  selenocysteine:      0          0.0000%\nUniversal Features:\n  unknown:             8          1.0568%\n  ambiguous:           0          0.0000%\n  gapped:              0          0.0000%\n```\n\nEverything looks pretty good. But two of the sequences don't start with a\nmethionine. Alice wants to find them. She does this using `smof grep` and a\nPerl regular expressions.\n\n```\nsmof grep -qP '^[^M]' *faa\n```\n\nShe finds these genes are both from *Solanum lycopersicum* and are described in\nthe fasta headers as being *partial*.\n\nNow Alice wants to find the *maturase* genes by pulling out every entry with\n'maturase' in the fasta header.\n\n```\nsmof grep maturase *faa\nsmof grep maturase *faa > maturase.faa\n```\n\nFor a close look at the distribution of sequence lengths, Alice calls `smof\nstat`\n\n```\nsmof stat maturase.faa\n```\n\nAlice happens to be interested in the sequence WTQPQR from *Panicum virgatum*\nand would like to know what the homologous regions are in the other species.\n\nSo Alice aligns the maturase genes with\n[MUSCLE](http://nar.oxfordjournals.org/content/32/5/1792.short) and searches\nfor the motif using the GFF output option.\n\n```\nmuscle -quiet < maturase.faa | tee maturase.aln | smof grep -q --gff WTQPQR\n```\n\nThis is outputs the location of the match in standard GFF format, i.e. the\nmatch is at position 329 to 334. Homologs to this sequence will be at the same\npositions in the aligned fasta file output by MUSCLE.\n\n```\nsmof subseq -b 329 334 maturase.aln\n```\n\nHMMER could then be used to analyze the by-site conservation of the sextuplet.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/incertae-sedis/smof", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "smof", "package_url": "https://pypi.org/project/smof/", "platform": "", "project_url": "https://pypi.org/project/smof/", "project_urls": {"Homepage": "https://github.com/incertae-sedis/smof"}, "release_url": "https://pypi.org/project/smof/2.18.0/", "requires_dist": null, "requires_python": "", "summary": "UNIX-style utilities for FASTA file exploration", "version": "2.18.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://github.com/badges/stability-badges\" rel=\"nofollow\"><img alt=\"stable\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/520f36d2234031b7290fb37e49e0ef6dae554a26/687474703a2f2f6261646765732e6769746875622e696f2f73746162696c6974792d6261646765732f646973742f737461626c652e737667\"></a>\n<a href=\"https://travis-ci.org/incertae-sedis/smof\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/211f4b361db7c9b1427f12d33ad6ec7dc208b0ce/68747470733a2f2f7472617669732d63692e6f72672f696e6365727461652d73656469732f736d6f662e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://hub.docker.com/r/incertaesedis/smof/\" rel=\"nofollow\"><img alt=\"Docker Docker build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd134e7aedff404e5e91fe4173554b47926d5d39/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f636c6f75642f6275696c642f696e63657274616573656469732f736d6f662e737667\"></a> <a href=\"https://hub.docker.com/r/incertaesedis/smof/\" rel=\"nofollow\"><img alt=\"docker pulls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5445ae070df226103496fdbf05c37e1034e1e3dc/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f696e63657274616573656469732f736d6f662e737667\"></a>\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5dea573a8257f6e12dcf7dcd042ef18ca8b3357/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736d6f662e737667\">\n<a href=\"https://zenodo.org/badge/latestdoi/19203682\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7731c52802cf7f0488334db353080c7453194ac7/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f31393230333638322e737667\"></a></p>\n<h1>smof - Simple Manipulation Of FASTA</h1>\n<p>UNIX-style FASTA tools</p>\n<h1>Installation</h1>\n<pre><code>pip install smof\n</code></pre>\n<h1>Functions</h1>\n<p><code>smof</code> is divided into the following subcommands:</p>\n<table>\n<thead>\n<tr>\n<th>subcommand</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>cut</code></td>\n<td>emulates UNIX cut command, where fields are entries</td>\n</tr>\n<tr>\n<td><code>clean</code></td>\n<td>cleans fasta files</td>\n</tr>\n<tr>\n<td><code>consensus</code></td>\n<td>finds the consensus sequence for aligned sequence</td>\n</tr>\n<tr>\n<td><code>filter</code></td>\n<td>extracts sequences meeting the given conditions</td>\n</tr>\n<tr>\n<td><code>grep</code></td>\n<td>roughly emulates the UNIX grep command</td>\n</tr>\n<tr>\n<td><code>md5sum</code></td>\n<td>calculate an md5 checksum for the input sequences</td>\n</tr>\n<tr>\n<td><code>head</code></td>\n<td>writes the first sequences in a file</td>\n</tr>\n<tr>\n<td><code>permute</code></td>\n<td>randomly order sequence</td>\n</tr>\n<tr>\n<td><code>reverse</code></td>\n<td>reverse each sequence (or reverse complement)</td>\n</tr>\n<tr>\n<td><code>sample</code></td>\n<td>randomly select entries from fasta file</td>\n</tr>\n<tr>\n<td><code>sniff</code></td>\n<td>extract info about the sequence</td>\n</tr>\n<tr>\n<td><code>sort</code></td>\n<td>sort sequences</td>\n</tr>\n<tr>\n<td><code>split</code></td>\n<td>split a fasta file into smaller files</td>\n</tr>\n<tr>\n<td><code>stat</code></td>\n<td>calculate sequence statistics</td>\n</tr>\n<tr>\n<td><code>subseq</code></td>\n<td>extract subsequence from each entry (revcomp if a&lt;b)</td>\n</tr>\n<tr>\n<td><code>tail</code></td>\n<td>writes the last sequences in a file</td>\n</tr>\n<tr>\n<td><code>translate</code></td>\n<td>translate a DNA sequence into a protein sequence</td>\n</tr>\n<tr>\n<td><code>uniq</code></td>\n<td>count, omit, or merge repeated entries</td>\n</tr>\n<tr>\n<td><code>wc</code></td>\n<td>roughly emulates the UNIX wc command</td>\n</tr></tbody></table>\n<p>Detailed instructions on how to use each command in <code>smof</code> is available via the\n'-h' option.</p>\n<p>To list subcommands</p>\n<pre>smof -h\n</pre>\n<p>Get help on a specific subcommand</p>\n<pre>smof grep -h\n</pre>\n<h1>Sample data</h1>\n<p>The FASTA files used in the examples below are available in the\n<code>sample-data/anncaliia_algerae</code> folder in the <code>smof</code> github repo\n(<a href=\"https://github.com/incertae-sedis/smof\" rel=\"nofollow\">here</a>).</p>\n<h1>UNIX-like commands</h1>\n<p>This group of subcommands include commands based off UNIX builtins.</p>\n<h2><code>smof head</code> and <code>tail</code></h2>\n<p>These functions mimic their GNU counterparts but on the entry, rather than\nline, level. For example <code>smof head</code> prints the first entry in a file and <code>smof -5</code> prints the first 5. Similarly for <code>smof tail</code>.</p>\n<pre>smof head aa.faa\nsmof head -3 aa.faa\nsmof tail aa.faa\nsmof tail -3 aa.faa\nsmof tail +2 aa.faa <span class=\"p\">|</span> smof head\n</pre>\n<p>In addition to the GNU-like functionallity, <code>smof head</code> and <code>tail</code> can also\nlimit the sequence that is output. This can be useful for diagnostic purposes.</p>\n<pre><span class=\"c1\"># print last 3 nucleotides (last codon) from the first 5 transcripts</span>\nsmof head -l <span class=\"m\">3</span> -5 aa.transcripts.fna\n<span class=\"c1\"># print the first codon</span>\nsmof head -f <span class=\"m\">3</span> -5 aa.transcripts.fna\n<span class=\"c1\"># print first and last</span>\nsmof head -f <span class=\"m\">3</span> -l <span class=\"m\">3</span> -5 aa.transcripts.fna\n</pre>\n<p>This sort of diagnostics is easier done with <code>smof sniff</code>.</p>\n<h2><code>smof sort</code></h2>\n<p><code>smof sort</code> can be used to simply sort sequences alphabetically by header. It\ncan also sort by sequence length. One useful feature with no homolog in GNU\nsort is the ability to sort by regex capture. For example, if the FASTA headers\nare formated like 'locus|xxx|taxon|yyy|gi|zzz', you can sort them numerically\nby taxon with the command <code>smof sort -nx 'taxon\\|(\\d+)'</code>.</p>\n<pre><span class=\"c1\"># print the shortest sequence</span>\nsmof sort -l aa.faa <span class=\"p\">|</span> smof head\n<span class=\"c1\"># print the longest sequence</span>\nsmof sort -l aa.faa <span class=\"p\">|</span> smof tail\n<span class=\"c1\"># sort by the function in the header description</span>\nsmof sort -x <span class=\"s1\">'PRA339 (.*)'</span> aa.faa <span class=\"p\">|</span> smof tail\n</pre>\n<h2><code>smof sample</code></h2>\n<p><code>smof sample</code> allows extraction of a random sample of entries. With no\narguments, it reads the entire file into memory and outputs a random one.</p>\n<pre><span class=\"c1\"># retrieve 1 sequence by default</span>\nsmof sample aa.faa\nsmof sample -n <span class=\"m\">5</span> aa.faa\n<span class=\"c1\"># set a random seed (useful for debugging and reproducible scripts)</span>\nsmof sample --seed <span class=\"m\">42</span> aa.faa\n</pre>\n<h2><code>smof split</code></h2>\n<p>This command allows easily splitting of a large file into many smaller files.</p>\n<p>You can split a large file several small files with equal numbers of sequences</p>\n<pre>smof split -n <span class=\"m\">5</span> -p zzz aa.faa\ngrep -c <span class=\"s1\">'&gt;'</span> aa.faa zzz*\nrm zzz*\n</pre>\n<p>Of you can split a large file into many smaller files with a set maximum number\nof sequences per file</p>\n<pre>smof split -qn <span class=\"m\">500</span> -p zzz aa.faa\ngrep -c <span class=\"s1\">'&gt;'</span> aa.faa zzz*\nrm zzz*\n</pre>\n<h2><code>smof uniq</code></h2>\n<p>This command corresponds roughly to GNU uniq, but entries are considered\nidentical only if both header and sequence are exactly the same. As currently\nimplemented, I don't find much use for this command.</p>\n<h2><code>smof wc</code></h2>\n<p>Outputs the number of characters and entries in the fasta file. Generally <code>smof stat</code> is better.</p>\n<h2><code>smof grep</code></h2>\n<p>Whereas GNU grep searches lines for matches, <code>smof grep</code> searches either the\nFASTA headers or the FASTA sequence.</p>\n<p>Extract the entries by matches to the header (default)</p>\n<pre>smof grep H312_03353 aa.faa\n</pre>\n<p>Extract entries by matches to a sequence</p>\n<pre>smof grep --match-sequence SKSQ aa.faa\n<span class=\"c1\"># or equivalently</span>\nsmof grep -q SKSQ aa.faa\n</pre>\n<p>You can include flanking regions in the match</p>\n<pre><span class=\"c1\"># match 3 residues downstream</span>\nsmof grep -qA3 <span class=\"s1\">'SKSQ'</span> aa.faa\n<span class=\"c1\"># match 3 residues upstream </span>\nsmof grep -qB3 <span class=\"s1\">'SKSQ'</span> aa.faa\n<span class=\"c1\"># match 3 residues up- and downstream </span>\nsmof grep -qC3 <span class=\"s1\">'SKSQ'</span> aa.faa\n</pre>\n<p>Inclusion of flanking regions is particularly useful in tandem with the -o\noption, which extracts only the matching sequence</p>\n<pre>smof grep -qoA3 <span class=\"s1\">'SKSQ'</span> aa.faa\n</pre>\n<p>Write the output in gff format</p>\n<pre>smof grep -q --gff SKSQ aa.faa\n</pre>\n<p>You can count the number of sequences with a match</p>\n<pre>smof grep -qc SKS aa.faa\n</pre>\n<p>Or the total number of matches</p>\n<pre>smof grep -qm SKSQ aa.faa\n</pre>\n<p>Or both</p>\n<pre>smof grep -qmc SKS aa.faa\n</pre>\n<p>Just like in GNU grep, you can invert a search. This search finds all genes\nthat are not annotated as being hypothetical genes.</p>\n<pre>smof grep -v hypothetical aa.faa\n</pre>\n<p>By default <code>smof grep</code> is case insensitive (unlike GNU grep), but it can be\nmade case sensitive</p>\n<pre>smof grep -I CoA aa.faa\n</pre>\n<p>You can search using patterns in a file</p>\n<pre>smof grep -f id-sample.txt aa.faa\n</pre>\n<p>This, however, can be a little slow, since it searchs each pattern in the file\nagainst the entire header. A much faster approach is to extract a search\npattern from the headers (or sequence) and then lookup the header pattern in\nthe set of search patterns.</p>\n<pre>smof grep -f id-sample.txt -w <span class=\"s1\">'\\| (\\S+) \\|'</span> aa.faa\n</pre>\n<p>Count occurrences (on both strands) of a DNA pattern using IUPAC extended\nnucleotide alphabet.</p>\n<pre>smof grep -qmbG YYNCTATAWAWASM aa.supercontigs.fna\n</pre>\n<p>You can search using a sequence query</p>\n<pre><span class=\"c1\"># select 5 random sequences</span>\nsmof sample -n <span class=\"m\">5</span> aa.faa <span class=\"p\">|</span> smof subseq -b <span class=\"m\">5</span> <span class=\"m\">35</span> &gt; rand.faa\nsmof grep -q --fastain rand.faa aa.faa\n</pre>\n<p>Or you can search for identical sequences shared between two fasta files</p>\n<pre>smof sample -n <span class=\"m\">5</span> aa.faa &gt; rand.faa\nsmof grep -q --fastain rand.faa aa.faa \n</pre>\n<p>Find non-overlapping open reading frames of length greater than 100 codons.\nThis is meant as an example of regex searching. This will NOT give you a great\nanswer. smof does not consider frames (nor will it ever). It will not find the\nset of longest possible ORFs. If you want to identify ORFs, you should use a\nspecialized program. That said:</p>\n<pre>smof grep -qPb --gff <span class=\"s1\">'ATG(.{3}){99,}?(TAA|TGA|TAG)'</span> aa.supercontigs.fna\n</pre>\n<h2><code>smof md5sum</code></h2>\n<p>This tool is useful if you want a checksum for a FASTA file that is independent\nof format (e.g. column width or case).</p>\n<h1>String manipulation commands</h1>\n<h2><code>smof permute</code></h2>\n<p>Permutes the letters of a sequence</p>\n<h2><code>smof reverse</code></h2>\n<p>Reverses a sequence (does NOT take the reverse complement)</p>\n<h2><code>smof subseq</code></h2>\n<pre><span class=\"c1\"># extract a subsequence</span>\nsmof grep H312_00003T0 aa.faa <span class=\"p\">|</span> smof subseq -b <span class=\"m\">10</span> <span class=\"m\">20</span>\n<span class=\"c1\"># color the subsequences instead</span>\nsmof grep H312_00003T0 aa.faa <span class=\"p\">|</span> smof subseq -b <span class=\"m\">10</span> <span class=\"m\">20</span> -c red\n</pre>\n<p>If the start is higher than the end, and the sequence appears to be a DNA\nsequence, then smof will take the reverse complement.</p>\n<p><code>smof subseq</code> can also read from a gff file. However, if you want to extract\nmany sequences from a fasta file using a gff file as a guide (or other gff/bed\nmanipulations), consider using a specialized tools such as <code>bedtools</code>.</p>\n<h1>Biological sequence tools</h1>\n<h2><code>smof clean</code></h2>\n<p>This command can be used to tidy a sequence. You can change the column width,\nremove gaps and stops, convert all letters to one case and/or change irregular\ncharacters to unknowns. By default, it removes whitespace in a sequence and\nmakes uniform, 80-character columns.</p>\n<h2><code>smof filter</code></h2>\n<p>Output only sequence that meet a set of conditions.</p>\n<p>If you want to only keep sequences that are longer than 100 letters</p>\n<pre>smof clean -x aa.faa <span class=\"p\">|</span> smof filter -l <span class=\"m\">100</span>\n</pre>\n<p>Note that I call clean before filtering to remove the stop character, which\nshould not be included when calculating length.</p>\n<p>Or shorter than 100 letters</p>\n<pre>smof clean -x aa.faa <span class=\"p\">|</span> smof filter -s <span class=\"m\">100</span> aa.faa\n</pre>\n<p>Or that have greater than 50% AFILMVW content (hydrophobic amino acids)</p>\n<pre>smof clean -x aa.faa <span class=\"p\">|</span> smof filter -c <span class=\"s1\">'AFILMVW &gt; .5'</span> aa.faa\n</pre>\n<h2><code>smof sniff</code></h2>\n<p>This command runs a number of checks on a FASTA file and is useful in\ndiagnosing problems. For details, run <code>smof sniff -h</code>.</p>\n<h2><code>smof stat</code></h2>\n<p>The default operation outputs number of sequences and summary statistics\nconcerning the sequence lengths.</p>\n<pre>smof stat aa.supercontigs.fna\n nseq:      <span class=\"m\">431</span>\n nchars:    <span class=\"m\">12163397</span>\n 5sum:      <span class=\"m\">445</span> <span class=\"m\">3301</span> <span class=\"m\">9555</span> <span class=\"m\">30563</span> <span class=\"m\">746881</span>\n mean<span class=\"o\">(</span>sd<span class=\"o\">)</span>:  <span class=\"m\">28221</span> <span class=\"o\">(</span><span class=\"m\">58445</span><span class=\"o\">)</span>\n N50:       <span class=\"m\">71704</span>\n</pre>\n<p>'5sum' refers to the five number summary of the sequence lengths (minimum, 25%\nquantile, median, 75% quantile, and maximum).</p>\n<p>Statistics can also be calculated on a sequence-by-sequence level, which by\ndefault outputs the sequence names (the first word of the header) and the\nsequence length, e.g.</p>\n<pre>smof stat -q aa.supercontigs.fna <span class=\"p\">|</span> head\n</pre>\n<p>There are many other options. Run <code>smof stat -h</code> for descriptions.</p>\n<h1>Case study: exploring motifs in chloroplast genomes</h1>\n<p>Alice is interested in the chloroplast <em>maturase</em> gene. Bob gives her a sample\ndataset which includes 10 fasta files of proteins encoded by the chloroplast\ngenomes of 10 different plant species. These files are available in the\n<code>sample-data/chloroplasts</code> directory.</p>\n<p>You can find this dataset in the folder <em>doc/test-data/chloroplast-proteins</em>.</p>\n<p>Her first step is to explore the data. She first counts the sequences in each\nfile with a simple grep command.</p>\n<pre><code>grep -c '&gt;' *faa\n</code></pre>\n<p>Next she tests the sequences with <code>smof sniff</code></p>\n<pre><code>smof sniff *faa\n</code></pre>\n<p>Producing the following output:</p>\n<pre><code>578 uniq sequences (757 total)\nAll prot\nAll uppercase\nProtein Features:\n  initial-Met:         755        99.7358%\n  terminal-stop:       0          0.0000%\n  internal-stop:       0          0.0000%\n  selenocysteine:      0          0.0000%\nUniversal Features:\n  unknown:             8          1.0568%\n  ambiguous:           0          0.0000%\n  gapped:              0          0.0000%\n</code></pre>\n<p>Everything looks pretty good. But two of the sequences don't start with a\nmethionine. Alice wants to find them. She does this using <code>smof grep</code> and a\nPerl regular expressions.</p>\n<pre><code>smof grep -qP '^[^M]' *faa\n</code></pre>\n<p>She finds these genes are both from <em>Solanum lycopersicum</em> and are described in\nthe fasta headers as being <em>partial</em>.</p>\n<p>Now Alice wants to find the <em>maturase</em> genes by pulling out every entry with\n'maturase' in the fasta header.</p>\n<pre><code>smof grep maturase *faa\nsmof grep maturase *faa &gt; maturase.faa\n</code></pre>\n<p>For a close look at the distribution of sequence lengths, Alice calls <code>smof stat</code></p>\n<pre><code>smof stat maturase.faa\n</code></pre>\n<p>Alice happens to be interested in the sequence WTQPQR from <em>Panicum virgatum</em>\nand would like to know what the homologous regions are in the other species.</p>\n<p>So Alice aligns the maturase genes with\n<a href=\"http://nar.oxfordjournals.org/content/32/5/1792.short\" rel=\"nofollow\">MUSCLE</a> and searches\nfor the motif using the GFF output option.</p>\n<pre><code>muscle -quiet &lt; maturase.faa | tee maturase.aln | smof grep -q --gff WTQPQR\n</code></pre>\n<p>This is outputs the location of the match in standard GFF format, i.e. the\nmatch is at position 329 to 334. Homologs to this sequence will be at the same\npositions in the aligned fasta file output by MUSCLE.</p>\n<pre><code>smof subseq -b 329 334 maturase.aln\n</code></pre>\n<p>HMMER could then be used to analyze the by-site conservation of the sextuplet.</p>\n\n          </div>"}, "last_serial": 6736190, "releases": {"2.14.1": [{"comment_text": "", "digests": {"md5": "4f9e55cbc5b64f8a34ffc46fe4254e36", "sha256": "5b91cb26ba71d377e3c7582a192b5998994abcfe1ab20c15329c0b6afef069ae"}, "downloads": -1, "filename": "smof-2.14.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4f9e55cbc5b64f8a34ffc46fe4254e36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31575, "upload_time": "2019-06-21T18:57:06", "upload_time_iso_8601": "2019-06-21T18:57:06.114173Z", "url": "https://files.pythonhosted.org/packages/24/df/48f4c1d7aff08af7aec744f26a4fd57f712e26d915b230842be283993fb0/smof-2.14.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0e17fde7c0cb18788a47bd339b2ef1d", "sha256": "4e6466852242e98c7cb91983993711b3cdc487cc72cbb242a62190a7e3088bf6"}, "downloads": -1, "filename": "smof-2.14.1.tar.gz", "has_sig": false, "md5_digest": "c0e17fde7c0cb18788a47bd339b2ef1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34083, "upload_time": "2019-06-21T18:57:08", "upload_time_iso_8601": "2019-06-21T18:57:08.629178Z", "url": "https://files.pythonhosted.org/packages/ad/61/cac8855d4e23db7f7968f3db9994c0224ed7b3ff6eab2b96562644f28656/smof-2.14.1.tar.gz", "yanked": false}], "2.14.2": [{"comment_text": "", "digests": {"md5": "31727115602482a8a61ddc0a1f9a81b2", "sha256": "03926de8ab12fd2b43a33ab4272aafa3ba536d5f14c31c1bb8d556a9ef139f09"}, "downloads": -1, "filename": "smof-2.14.2-py3-none-any.whl", "has_sig": false, "md5_digest": "31727115602482a8a61ddc0a1f9a81b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33116, "upload_time": "2019-06-21T20:18:04", "upload_time_iso_8601": "2019-06-21T20:18:04.813580Z", "url": "https://files.pythonhosted.org/packages/fd/0b/972d90b00e4fe5b7ad221c9936c85014d861cf6730b55639e35034abd092/smof-2.14.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4531339af82d014713bda6ca0b971745", "sha256": "d32906f9fac479724675ea43caa54caeaf4c882e911a7eefb8ba9fe638e9cd6b"}, "downloads": -1, "filename": "smof-2.14.2.tar.gz", "has_sig": false, "md5_digest": "4531339af82d014713bda6ca0b971745", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37653, "upload_time": "2019-06-21T20:18:06", "upload_time_iso_8601": "2019-06-21T20:18:06.583865Z", "url": "https://files.pythonhosted.org/packages/99/43/3cd10ae12e911103f8aec75dabdc2921e886796dda37044d38d126cfc5db/smof-2.14.2.tar.gz", "yanked": false}], "2.14.3": [{"comment_text": "", "digests": {"md5": "77c322e13ee043cf8d48601c78e47ed0", "sha256": "c8e68dfdde6c4843a77fa65b5b52ce94cdb59aad198ed0567606927ac8ebcdc8"}, "downloads": -1, "filename": "smof-2.14.3-py3-none-any.whl", "has_sig": false, "md5_digest": "77c322e13ee043cf8d48601c78e47ed0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33253, "upload_time": "2019-06-27T16:24:40", "upload_time_iso_8601": "2019-06-27T16:24:40.739417Z", "url": "https://files.pythonhosted.org/packages/7c/d0/d2d7db945cad91d3de2e8a4c1c163ad1e016b7fc9f69f1d81531e0b28133/smof-2.14.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d04a69e172f497263bc71612453bf4e7", "sha256": "965af9331f853939a074c51f8ae15037117feccece3cc0cec3fffb8cd0268c2b"}, "downloads": -1, "filename": "smof-2.14.3.tar.gz", "has_sig": false, "md5_digest": "d04a69e172f497263bc71612453bf4e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37891, "upload_time": "2019-06-27T16:24:42", "upload_time_iso_8601": "2019-06-27T16:24:42.805981Z", "url": "https://files.pythonhosted.org/packages/3b/6c/5a1e08685a676564333903b81adba030b6c0813549096c7706997b2eb6d2/smof-2.14.3.tar.gz", "yanked": false}], "2.16.0": [{"comment_text": "", "digests": {"md5": "d60df0db8b23e07322d62b41c34b31d4", "sha256": "63b362169415a321d0c610f3d146424356bedd1678b23e58eddb03888a88934c"}, "downloads": -1, "filename": "smof-2.16.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d60df0db8b23e07322d62b41c34b31d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33429, "upload_time": "2019-07-19T16:51:00", "upload_time_iso_8601": "2019-07-19T16:51:00.808899Z", "url": "https://files.pythonhosted.org/packages/e0/21/73bae97c109aaad1bd08b1d10381c329b26b30da7bfce3c634c6a1eb117e/smof-2.16.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcacfd7dcfc2a987e00fe23881471263", "sha256": "117a14fdc7780c92f89fd1e0d2fe52ea2b86eb1dd87f1307fa3eefe2b62feabb"}, "downloads": -1, "filename": "smof-2.16.0.tar.gz", "has_sig": false, "md5_digest": "fcacfd7dcfc2a987e00fe23881471263", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38047, "upload_time": "2019-07-19T16:51:02", "upload_time_iso_8601": "2019-07-19T16:51:02.515634Z", "url": "https://files.pythonhosted.org/packages/4b/5d/1d8f69318057f51fd092ee48cc90aa3e618ad35f1fe688c8101410efbdc3/smof-2.16.0.tar.gz", "yanked": false}], "2.17.0": [{"comment_text": "", "digests": {"md5": "c4d22263d9e43206d1dfa139c1935f24", "sha256": "3a6926476e09d82cd487c649555afb2be717454fc023cdbe7777b4c57442120e"}, "downloads": -1, "filename": "smof-2.17.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c4d22263d9e43206d1dfa139c1935f24", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33542, "upload_time": "2019-12-31T18:42:51", "upload_time_iso_8601": "2019-12-31T18:42:51.806086Z", "url": "https://files.pythonhosted.org/packages/4e/e7/0ff44f3642aca4054bfb1d1fdf0c9bebaa078a16f6c90e84dd2d4cb1cb19/smof-2.17.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "563833c497c117b405f75becfa159ab8", "sha256": "b68c242a3f3e00cff659fc3a19611c49eab81bbcf46c055458f222c9e0e43acf"}, "downloads": -1, "filename": "smof-2.17.0.tar.gz", "has_sig": false, "md5_digest": "563833c497c117b405f75becfa159ab8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38162, "upload_time": "2019-12-31T18:42:53", "upload_time_iso_8601": "2019-12-31T18:42:53.522782Z", "url": "https://files.pythonhosted.org/packages/7f/b4/dcefaacb5d208fb7ae3fd8e0c65b7cdea4e0e4382ce7a2ff8239e786ddcb/smof-2.17.0.tar.gz", "yanked": false}], "2.18.0": [{"comment_text": "", "digests": {"md5": "0c35baea3c9c5a05313ded19ef800988", "sha256": "fff497ea2ea8bf6bdaadc3b783519050aef52a8249a813e1e25bd51fab5e1a0f"}, "downloads": -1, "filename": "smof-2.18.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c35baea3c9c5a05313ded19ef800988", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33783, "upload_time": "2020-03-02T21:23:02", "upload_time_iso_8601": "2020-03-02T21:23:02.507308Z", "url": "https://files.pythonhosted.org/packages/ec/f4/2387d3f4e12eda9140582938fcc5e2d21cc6b4e89c6b6a14795011bf16af/smof-2.18.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39f4f7a48c602dc4885be25500372405", "sha256": "82bbeb841de1df3a6ab5b83ce39f932ddcd9de0f64895792017c885bb6302e24"}, "downloads": -1, "filename": "smof-2.18.0.tar.gz", "has_sig": false, "md5_digest": "39f4f7a48c602dc4885be25500372405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38391, "upload_time": "2020-03-02T21:23:04", "upload_time_iso_8601": "2020-03-02T21:23:04.225979Z", "url": "https://files.pythonhosted.org/packages/f3/ef/7cf28f9873450d083ed6662ac3159c7b631dc4164ba272f6bbbc965950f1/smof-2.18.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c35baea3c9c5a05313ded19ef800988", "sha256": "fff497ea2ea8bf6bdaadc3b783519050aef52a8249a813e1e25bd51fab5e1a0f"}, "downloads": -1, "filename": "smof-2.18.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c35baea3c9c5a05313ded19ef800988", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33783, "upload_time": "2020-03-02T21:23:02", "upload_time_iso_8601": "2020-03-02T21:23:02.507308Z", "url": "https://files.pythonhosted.org/packages/ec/f4/2387d3f4e12eda9140582938fcc5e2d21cc6b4e89c6b6a14795011bf16af/smof-2.18.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39f4f7a48c602dc4885be25500372405", "sha256": "82bbeb841de1df3a6ab5b83ce39f932ddcd9de0f64895792017c885bb6302e24"}, "downloads": -1, "filename": "smof-2.18.0.tar.gz", "has_sig": false, "md5_digest": "39f4f7a48c602dc4885be25500372405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38391, "upload_time": "2020-03-02T21:23:04", "upload_time_iso_8601": "2020-03-02T21:23:04.225979Z", "url": "https://files.pythonhosted.org/packages/f3/ef/7cf28f9873450d083ed6662ac3159c7b631dc4164ba272f6bbbc965950f1/smof-2.18.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:51 2020"}