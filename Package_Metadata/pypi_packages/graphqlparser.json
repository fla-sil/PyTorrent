{"info": {"author": "Marco Paolini", "author_email": "markopaolini@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Graphql parser based  on libgraphqlparser\n=========================================\n\nPython2.7+ Python3.4+ class-based bindings to libgraphqlparser; just a thin layer on top of ``libgraphqlparser`` C API.\n\nStill **EXPERIMENTAL**\n\n\nInstalling\n----------\n\nFirst install ``libgraphqlparser`` following instructions on `libgraphqlparser github page`_ .\n\nNext you can install ``graphqlparser``. The easiest way is using precompiled wheels which are usually available\non `graphqlparser github releases`_\n\nPick the right wheel for your platform and python version, then install it using pip::\n\n  pip install https://github.com/elastic-coders/py-graphqlparser/releases/download/v0.0.3/graphqlparser-0.0.3-cp27-none-linux_x86_64.whl\n\n\nAs an alternative you can install ``graphqlparser`` from source distribution:\n\n- Install ``cython``\n- Set an env var ``$GRAPHQL_HOME`` to the folder where ``libgraphqlparser.so`` and ``Ast.h`` are\n- Install ``graphqlparser`` with pip::\n\n    LDFLAGS=\"-L$GRAPHQL_HOME\" CFLAGS=\"-I$GRAPHQL_HOME/c -I$GRAPHQL_HOME\" pip install graphqlparser\n\n\nUsage\n-----\n\nMake sure ``libgraphqlparser`` is available to the loader. You can add its base dir to  ``LD_LIBRARY_PATH``.\n\nThen you can start parsing by creating your custom visitor class:\n\n.. code-block:: python\n\n  from graphql_parser import GraphQLAstVisitor\n\n  class MyVisitor(GraphQLAstVisitor.GraphQLAstVisitor):\n\n      def visit_field(self, node):\n          print('start field %s visit' % node)\n          # Return 1 to keep visiting children, 0 to skip them\n          return 1\n\n      def end_visit_field(self, node):\n          print('end field %s visit' % node)\n\nAnd using it to visit a parsed query:\n\n.. code-block:: python\n\n  from graphql_parser import GraphQLParser\n\n  query = '{query{}}'\n  node = GraphQLParser.graphql_parse_string(query)\n  MyVisitor().visit_node(node)\n\nSee also ``examples`` folder.\n\n\nBuilding from source checkout\n-----------------------------\n\nRebuild the generated cython files from the libgraphql AST (usually not needed)\n\n- download submodules with ``git checkout --recursive``\n- build libgraphql library in folder ``./libgraphqlparser`` (python2.7 required for building)\n  (usually ``pushd libgraphqlparser && cmake . && make && popd`` works)\n- generate source code with ``python ast/build_ast.py``\n- you can now switch to python 3\n- install ``cython``\n- run::\n\n    LDFLAGS=\"-L./libgraphqlparser\" CFLAGS=\"-Ilibgraphqlparser/c -Ilibgraphqlparser\" python setup.py build_ext\n\n\nTo create a wheel distribution:\n\n- install wheel: ``pip install wheel``\n- create wheelhouse ``mkdir .wheelhouse``\n- build with ``pip wheel --wheel-dir=.wheelhouse .``\n\n\nKnown issues\n------------\n\n- Only (lightly) tested on python3\n- Unicode string handling not yet complete (a mixture of bytes and strings all over)\n- Exceptions in the visitor's class callbacks are ignored\n- libgraphqlparser is **dynamically** linked but It would be better if it was linked statically\n\n\nTODO\n----\n\n- build more wheel packages for linux 32 bit and other platforms\n\n\n.. _libgraphqlparser github page: https://github.com/graphql/libgraphqlparser\n.. _graphqlparser github releases:  https://github.com/elastic-coders/py-graphqlparser/releases/\n\n\n-----\n\nNews\n----\n\nv0.0.3\n------\n\n- fixed packaging and building", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/elastic-coders/py-graphqlparser", "keywords": "graphql,parser,libgraphql", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "graphqlparser", "package_url": "https://pypi.org/project/graphqlparser/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/graphqlparser/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/elastic-coders/py-graphqlparser"}, "release_url": "https://pypi.org/project/graphqlparser/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "Python bindings for libgraphqlparser (Cython-based)", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python2.7+ Python3.4+ class-based bindings to libgraphqlparser; just a thin layer on top of <tt>libgraphqlparser</tt> C API.</p>\n<p>Still <strong>EXPERIMENTAL</strong></p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>First install <tt>libgraphqlparser</tt> following instructions on <a href=\"https://github.com/graphql/libgraphqlparser\" rel=\"nofollow\">libgraphqlparser github page</a> .</p>\n<p>Next you can install <tt>graphqlparser</tt>. The easiest way is using precompiled wheels which are usually available\non <a href=\"https://github.com/elastic-coders/py-graphqlparser/releases/\" rel=\"nofollow\">graphqlparser github releases</a></p>\n<p>Pick the right wheel for your platform and python version, then install it using pip:</p>\n<pre>pip install https://github.com/elastic-coders/py-graphqlparser/releases/download/v0.0.3/graphqlparser-0.0.3-cp27-none-linux_x86_64.whl\n</pre>\n<p>As an alternative you can install <tt>graphqlparser</tt> from source distribution:</p>\n<ul>\n<li><p>Install <tt>cython</tt></p>\n</li>\n<li><p>Set an env var <tt>$GRAPHQL_HOME</tt> to the folder where <tt>libgraphqlparser.so</tt> and <tt>Ast.h</tt> are</p>\n</li>\n<li><p>Install <tt>graphqlparser</tt> with pip:</p>\n<pre>LDFLAGS=\"-L$GRAPHQL_HOME\" CFLAGS=\"-I$GRAPHQL_HOME/c -I$GRAPHQL_HOME\" pip install graphqlparser\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Make sure <tt>libgraphqlparser</tt> is available to the loader. You can add its base dir to  <tt>LD_LIBRARY_PATH</tt>.</p>\n<p>Then you can start parsing by creating your custom visitor class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">graphql_parser</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLAstVisitor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyVisitor</span><span class=\"p\">(</span><span class=\"n\">GraphQLAstVisitor</span><span class=\"o\">.</span><span class=\"n\">GraphQLAstVisitor</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">visit_field</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'start field </span><span class=\"si\">%s</span><span class=\"s1\"> visit'</span> <span class=\"o\">%</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Return 1 to keep visiting children, 0 to skip them</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">end_visit_field</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'end field </span><span class=\"si\">%s</span><span class=\"s1\"> visit'</span> <span class=\"o\">%</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n</pre>\n<p>And using it to visit a parsed query:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">graphql_parser</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLParser</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'{query</span><span class=\"si\">{}</span><span class=\"s1\">}'</span>\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLParser</span><span class=\"o\">.</span><span class=\"n\">graphql_parse_string</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"n\">MyVisitor</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">visit_node</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</pre>\n<p>See also <tt>examples</tt> folder.</p>\n</div>\n<div id=\"building-from-source-checkout\">\n<h2>Building from source checkout</h2>\n<p>Rebuild the generated cython files from the libgraphql AST (usually not needed)</p>\n<ul>\n<li><p>download submodules with <tt>git checkout <span class=\"pre\">--recursive</span></tt></p>\n</li>\n<li><p>build libgraphql library in folder <tt>./libgraphqlparser</tt> (python2.7 required for building)\n(usually <tt>pushd libgraphqlparser &amp;&amp; cmake . &amp;&amp; make &amp;&amp; popd</tt> works)</p>\n</li>\n<li><p>generate source code with <tt>python ast/build_ast.py</tt></p>\n</li>\n<li><p>you can now switch to python 3</p>\n</li>\n<li><p>install <tt>cython</tt></p>\n</li>\n<li><p>run:</p>\n<pre>LDFLAGS=\"-L./libgraphqlparser\" CFLAGS=\"-Ilibgraphqlparser/c -Ilibgraphqlparser\" python setup.py build_ext\n</pre>\n</li>\n</ul>\n<p>To create a wheel distribution:</p>\n<ul>\n<li>install wheel: <tt>pip install wheel</tt></li>\n<li>create wheelhouse <tt>mkdir .wheelhouse</tt></li>\n<li>build with <tt>pip wheel <span class=\"pre\">--wheel-dir=.wheelhouse</span> .</tt></li>\n</ul>\n</div>\n<div id=\"known-issues\">\n<h2>Known issues</h2>\n<ul>\n<li>Only (lightly) tested on python3</li>\n<li>Unicode string handling not yet complete (a mixture of bytes and strings all over)</li>\n<li>Exceptions in the visitor\u2019s class callbacks are ignored</li>\n<li>libgraphqlparser is <strong>dynamically</strong> linked but It would be better if it was linked statically</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>build more wheel packages for linux 32 bit and other platforms</li>\n</ul>\n</div>\n<hr class=\"docutils\">\n<div id=\"news\">\n<h2>News</h2>\n</div>\n<div id=\"v0-0-3\">\n<h2>v0.0.3</h2>\n<ul>\n<li>fixed packaging and building</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1730881, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "e2145912b0d0a3d3269b52ea2e1388e6", "sha256": "88ce2a46ec1cc0efb72586ca2b1ed351bfe282ebb3d28bf30d7e2f90af9438fd"}, "downloads": -1, "filename": "graphqlparser-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e2145912b0d0a3d3269b52ea2e1388e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15916, "upload_time": "2015-09-19T22:43:18", "upload_time_iso_8601": "2015-09-19T22:43:18.916798Z", "url": "https://files.pythonhosted.org/packages/1d/3b/2e77cfad51a6dbd85cea31fbe44a1328cd86d300a6bc4bb464179c92a2d4/graphqlparser-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e2145912b0d0a3d3269b52ea2e1388e6", "sha256": "88ce2a46ec1cc0efb72586ca2b1ed351bfe282ebb3d28bf30d7e2f90af9438fd"}, "downloads": -1, "filename": "graphqlparser-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e2145912b0d0a3d3269b52ea2e1388e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15916, "upload_time": "2015-09-19T22:43:18", "upload_time_iso_8601": "2015-09-19T22:43:18.916798Z", "url": "https://files.pythonhosted.org/packages/1d/3b/2e77cfad51a6dbd85cea31fbe44a1328cd86d300a6bc4bb464179c92a2d4/graphqlparser-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:33 2020"}