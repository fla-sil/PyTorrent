{"info": {"author": "Giulio Bottari", "author_email": "giuliobottari@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# TTS-Wrapper\n\n![](https://github.com/mediatechlab/tts-wrapper/workflows/Python%20package/badge.svg)\n\n_TTS-Wrapper_ is a hassle-free Python library that allows one to use text-to-speech APIs with the same interface.\n\nCurrently the following services are supported:\n\n- AWS Polly\n- Google TTS\n- Microsoft TTS\n- IBM Watson\n\n## Installation\n\nInstall using pip.\n\n```sh\npip install TTS-Wrapper\n```\n\n**Note: for each service you want to use, you have to install the required packages.**\n\nExample: to use `google` and `watson`:\n\n```sh\npip install TTS-Wrapper[google, watson]\n```\n\n## Usage\n\nSimply instantiate an object from the desired service and call `synth()`.\n\n```Python\nfrom tts_wrapper import PollyTTS\n\ntts = PollyTTS()\ntts.synth('Hello, world!', 'hello.wav')\n```\n\n### Selecting a Voice\n\nYou can change the default voice by specifying the voice name and the language code:\n\n```Python\ntts = PollyTTS(voice_name='Camila', lang='pt-BR')\n```\n\nCheck out the list of available voices for [Polly](https://docs.aws.amazon.com/polly/latest/dg/voicelist.html), [Google](https://cloud.google.com/text-to-speech/docs/voices), [Microsoft](https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#get-a-list-of-voices), and [Watson](https://cloud.ibm.com/docs/text-to-speech?topic=text-to-speech-voices).\n\n### SSML\n\nYou can also use [SSML](https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language) markup to control the output, like so:\n\n```Python\ntts.synth('Hello, <break time=\"3s\"/> world!')\n```\n\n**You don't need to wrap it with the `<speak></speak>` tag as it is automatically used with the required parameters for each TTS service.**\n\nLearn which tags are available for each service: [Polly](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html), [Google](https://cloud.google.com/text-to-speech/docs/ssml), [Microsoft](https://docs.microsoft.com/en-us/cortana/skills/speech-synthesis-markup-language), and [Watson](https://cloud.ibm.com/docs/text-to-speech?topic=text-to-speech-ssml).\n\n### Credentials\n\nYou need to setup credentials to access each service.\n\n#### Polly\n\nIf you don't explicitly define credentials, `boto3` will try to find them in your system's credentials file or your environment variables. However, you can specify them with:\n\n```Python\nfrom tts_wrapper import PollyTTS, AwsCredentials\n\ntts = PollyTTS(creds=AwsCredentials('AWS_KEY_ID', 'AWS_ACCESS_KEY'))\n```\n\n#### Google\n\nPoint to your [Oauth 2.0 credentials file](https://developers.google.com/identity/protocols/OAuth2) path:\n\n```Python\nfrom tts_wrapper import GoogleTTS\n\ntts = GoogleTTS(creds='path/to/creds.json')\n```\n\n#### Microsoft\n\nJust provide your [subscription key](https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#authentication), like so:\n\n```Python\nfrom tts_wrapper import MicrosoftTTS\n\ntts = MicrosoftTTS(creds='TOKEN')\n```\n\n#### Watson\n\nPass your [API key and URL](https://cloud.ibm.com/apidocs/text-to-speech/text-to-speech#authentication) to the initializer:\n\n```Python\nfrom tts_wrapper import WatsonTTS\n\ntts = WatsonTTS(api_key='API_KEY', api_url='API_URL')\n```\n\n## License\n\nLicensed under the [MIT License](./LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mediatechlab/tts-wrapper", "keywords": "tts text-to-speech lib library api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "TTS-Wrapper", "package_url": "https://pypi.org/project/TTS-Wrapper/", "platform": "", "project_url": "https://pypi.org/project/TTS-Wrapper/", "project_urls": {"Bus Tracker": "https://github.com/mediatechlab/tts-wrapper/issues", "Documentation": "https://github.com/mediatechlab/tts-wrapper/blob/master/README.md", "Homepage": "https://github.com/mediatechlab/tts-wrapper", "Source Code": "https://github.com/mediatechlab/tts-wrapper"}, "release_url": "https://pypi.org/project/TTS-Wrapper/0.4.2/", "requires_dist": ["google-cloud-texttospeech (>=0.5) ; extra == 'google'", "requests (>=2) ; extra == 'microsoft'", "boto3 (>=1) ; extra == 'polly'", "ibm-watson (>=4.3) ; extra == 'watson'"], "requires_python": "", "summary": "A hassle-free Python library that allows one to use text-to-speech APIs with the same interface", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TTS-Wrapper</h1>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40faae00321de236f86ef9252805f29e492b371c/68747470733a2f2f6769746875622e636f6d2f6d65646961746563686c61622f7474732d777261707065722f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></p>\n<p><em>TTS-Wrapper</em> is a hassle-free Python library that allows one to use text-to-speech APIs with the same interface.</p>\n<p>Currently the following services are supported:</p>\n<ul>\n<li>AWS Polly</li>\n<li>Google TTS</li>\n<li>Microsoft TTS</li>\n<li>IBM Watson</li>\n</ul>\n<h2>Installation</h2>\n<p>Install using pip.</p>\n<pre>pip install TTS-Wrapper\n</pre>\n<p><strong>Note: for each service you want to use, you have to install the required packages.</strong></p>\n<p>Example: to use <code>google</code> and <code>watson</code>:</p>\n<pre>pip install TTS-Wrapper<span class=\"o\">[</span>google, watson<span class=\"o\">]</span>\n</pre>\n<h2>Usage</h2>\n<p>Simply instantiate an object from the desired service and call <code>synth()</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tts_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">PollyTTS</span>\n\n<span class=\"n\">tts</span> <span class=\"o\">=</span> <span class=\"n\">PollyTTS</span><span class=\"p\">()</span>\n<span class=\"n\">tts</span><span class=\"o\">.</span><span class=\"n\">synth</span><span class=\"p\">(</span><span class=\"s1\">'Hello, world!'</span><span class=\"p\">,</span> <span class=\"s1\">'hello.wav'</span><span class=\"p\">)</span>\n</pre>\n<h3>Selecting a Voice</h3>\n<p>You can change the default voice by specifying the voice name and the language code:</p>\n<pre><span class=\"n\">tts</span> <span class=\"o\">=</span> <span class=\"n\">PollyTTS</span><span class=\"p\">(</span><span class=\"n\">voice_name</span><span class=\"o\">=</span><span class=\"s1\">'Camila'</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s1\">'pt-BR'</span><span class=\"p\">)</span>\n</pre>\n<p>Check out the list of available voices for <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\" rel=\"nofollow\">Polly</a>, <a href=\"https://cloud.google.com/text-to-speech/docs/voices\" rel=\"nofollow\">Google</a>, <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#get-a-list-of-voices\" rel=\"nofollow\">Microsoft</a>, and <a href=\"https://cloud.ibm.com/docs/text-to-speech?topic=text-to-speech-voices\" rel=\"nofollow\">Watson</a>.</p>\n<h3>SSML</h3>\n<p>You can also use <a href=\"https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language\" rel=\"nofollow\">SSML</a> markup to control the output, like so:</p>\n<pre><span class=\"n\">tts</span><span class=\"o\">.</span><span class=\"n\">synth</span><span class=\"p\">(</span><span class=\"s1\">'Hello, &lt;break time=\"3s\"/&gt; world!'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>You don't need to wrap it with the <code>&lt;speak&gt;&lt;/speak&gt;</code> tag as it is automatically used with the required parameters for each TTS service.</strong></p>\n<p>Learn which tags are available for each service: <a href=\"https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html\" rel=\"nofollow\">Polly</a>, <a href=\"https://cloud.google.com/text-to-speech/docs/ssml\" rel=\"nofollow\">Google</a>, <a href=\"https://docs.microsoft.com/en-us/cortana/skills/speech-synthesis-markup-language\" rel=\"nofollow\">Microsoft</a>, and <a href=\"https://cloud.ibm.com/docs/text-to-speech?topic=text-to-speech-ssml\" rel=\"nofollow\">Watson</a>.</p>\n<h3>Credentials</h3>\n<p>You need to setup credentials to access each service.</p>\n<h4>Polly</h4>\n<p>If you don't explicitly define credentials, <code>boto3</code> will try to find them in your system's credentials file or your environment variables. However, you can specify them with:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tts_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">PollyTTS</span><span class=\"p\">,</span> <span class=\"n\">AwsCredentials</span>\n\n<span class=\"n\">tts</span> <span class=\"o\">=</span> <span class=\"n\">PollyTTS</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"o\">=</span><span class=\"n\">AwsCredentials</span><span class=\"p\">(</span><span class=\"s1\">'AWS_KEY_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'AWS_ACCESS_KEY'</span><span class=\"p\">))</span>\n</pre>\n<h4>Google</h4>\n<p>Point to your <a href=\"https://developers.google.com/identity/protocols/OAuth2\" rel=\"nofollow\">Oauth 2.0 credentials file</a> path:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tts_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">GoogleTTS</span>\n\n<span class=\"n\">tts</span> <span class=\"o\">=</span> <span class=\"n\">GoogleTTS</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"o\">=</span><span class=\"s1\">'path/to/creds.json'</span><span class=\"p\">)</span>\n</pre>\n<h4>Microsoft</h4>\n<p>Just provide your <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#authentication\" rel=\"nofollow\">subscription key</a>, like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tts_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">MicrosoftTTS</span>\n\n<span class=\"n\">tts</span> <span class=\"o\">=</span> <span class=\"n\">MicrosoftTTS</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"o\">=</span><span class=\"s1\">'TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<h4>Watson</h4>\n<p>Pass your <a href=\"https://cloud.ibm.com/apidocs/text-to-speech/text-to-speech#authentication\" rel=\"nofollow\">API key and URL</a> to the initializer:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tts_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">WatsonTTS</span>\n\n<span class=\"n\">tts</span> <span class=\"o\">=</span> <span class=\"n\">WatsonTTS</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'API_KEY'</span><span class=\"p\">,</span> <span class=\"n\">api_url</span><span class=\"o\">=</span><span class=\"s1\">'API_URL'</span><span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p>Licensed under the <a href=\"./LICENSE\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 7174779, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f30bf9501c6386283cf26617dd5cd3d7", "sha256": "a71608d4c17dca5e531a4a740f9d6a7baaf353996a68b20763cc0897ab545e9a"}, "downloads": -1, "filename": "TTS_Wrapper-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f30bf9501c6386283cf26617dd5cd3d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6138, "upload_time": "2020-01-21T16:57:55", "upload_time_iso_8601": "2020-01-21T16:57:55.847701Z", "url": "https://files.pythonhosted.org/packages/e1/cf/b64ec306fbec044527f4b0aeddd018d078c772e2f404f4b463b0cb7f5618/TTS_Wrapper-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7d5ddc92cf44b082e80cf3bce4c67615", "sha256": "45089382bf24a0ab429d449330436f395502079a5ce9dba093c85ac787b0a187"}, "downloads": -1, "filename": "TTS_Wrapper-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7d5ddc92cf44b082e80cf3bce4c67615", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6163, "upload_time": "2020-01-21T17:05:11", "upload_time_iso_8601": "2020-01-21T17:05:11.342875Z", "url": "https://files.pythonhosted.org/packages/43/7b/18dc2bb06ce5918d709458cccc5d3eb715dd11eceaa5186fa653b2c29f2f/TTS_Wrapper-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "06c66c17ef04fd45d4a1a825cb9dd962", "sha256": "935e4c7cdf841d22580024e1288e0310b17c7a16f14015100e84a770387f4fb9"}, "downloads": -1, "filename": "TTS_Wrapper-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "06c66c17ef04fd45d4a1a825cb9dd962", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6888, "upload_time": "2020-03-21T01:59:30", "upload_time_iso_8601": "2020-03-21T01:59:30.978566Z", "url": "https://files.pythonhosted.org/packages/b3/f3/dcebb4c6abc17dbc21f94442e4fe4d84cd781ba2b33249b75288ac3a139e/TTS_Wrapper-0.3-py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "2e0f868d9ed200c5558ecebb6073c345", "sha256": "cb655c220f71251bf16c03b6b18c9b71dea59f2efdad3ee009b880d96bdfcfed"}, "downloads": -1, "filename": "TTS_Wrapper-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2e0f868d9ed200c5558ecebb6073c345", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7222, "upload_time": "2020-05-05T18:36:36", "upload_time_iso_8601": "2020-05-05T18:36:36.045058Z", "url": "https://files.pythonhosted.org/packages/88/e8/583bf9e5f220250879a7898022946e89a346b27f27de478080a85acaa475/TTS_Wrapper-0.4-py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "307c80c72e935f2d985a789f2009bce8", "sha256": "57cefe975baef3bd1fb7799f0c0bfddefbc7774fad94cabac82824d2293efda9"}, "downloads": -1, "filename": "TTS_Wrapper-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "307c80c72e935f2d985a789f2009bce8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7245, "upload_time": "2020-05-05T19:08:55", "upload_time_iso_8601": "2020-05-05T19:08:55.500334Z", "url": "https://files.pythonhosted.org/packages/ed/a1/83733196d0f0d7df1eff5c04d009a09f9351c2080d537f8e790286184192/TTS_Wrapper-0.4.1-py3-none-any.whl", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "579d11809734b87283b4169874677389", "sha256": "d91351f7109837137d59e3942277bbd8f09694d528c549afd7152ec5834f6b76"}, "downloads": -1, "filename": "TTS_Wrapper-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "579d11809734b87283b4169874677389", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7352, "upload_time": "2020-05-05T19:12:25", "upload_time_iso_8601": "2020-05-05T19:12:25.690458Z", "url": "https://files.pythonhosted.org/packages/16/f9/8c2ac79d625c333b79f095deac0c6002187ce04281a365b385ebc72dd825/TTS_Wrapper-0.4.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "579d11809734b87283b4169874677389", "sha256": "d91351f7109837137d59e3942277bbd8f09694d528c549afd7152ec5834f6b76"}, "downloads": -1, "filename": "TTS_Wrapper-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "579d11809734b87283b4169874677389", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7352, "upload_time": "2020-05-05T19:12:25", "upload_time_iso_8601": "2020-05-05T19:12:25.690458Z", "url": "https://files.pythonhosted.org/packages/16/f9/8c2ac79d625c333b79f095deac0c6002187ce04281a365b385ebc72dd825/TTS_Wrapper-0.4.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:44:56 2020"}