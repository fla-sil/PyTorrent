{"info": {"author": "Kitware, Inc.", "author_email": "kitware@kitware.com", "bugtrack_url": null, "classifiers": [], "description": "Tech Journal Plugin |build-status| |license-badge|\n==================================================\n\nAssumes a certain folder structure so far for the main page display:\nThe top level collection ID value is what should be used in the configuration page\nIt will then search for the folders under each, to find all available journal \"issues\"\n\nFrom each of those \"issues\", it will query for a \"submission\" which is an available folder\nin the \"issue\".  Eventually, this folder will have metadata for the rest of the information\nthat needs to be shown.  A sample structure is found in a graphic diagram below, with the Girder\ntype in parenthesis:\n\n.. parsed-literal::\n\n   OTJ (collection)\n   \u251c\u2500\u2500 2016 Jan-Jun (folder)\n   \u2502   \u251c\u2500\u2500 Submission 1 (folder)\n   \u2502   \u2502   \u2514\u2500\u2500 Revision 1\n   |   |       \u2514\u2500\u2500 blah.tar\n   \u2502   \u2502   \u2514\u2500\u2500 Revision 2\n   |   |       \u2514\u2500\u2500 blah_v2.tar\n   \u2502   \u2514\u2500\u2500 Submission 2 (folder)\n   \u2502   \u2502   \u2514\u2500\u2500 Revision 1\n   \u2502           \u2514\u2500\u2500 Paper.docx\n   \u2514\u2500\u2500 2016 Jun-Dec (folder)\n       \u2514\u2500\u2500 Submission 3 (folder)\n           \u2514\u2500\u2500 Revision 1\n               \u2514\u2500\u2500 Paper2.docx\n\nSetup Instructions\n------------------\n\nInstall pre-requisite programs\n++++++++++++++++++++++++++++++\n\nFollow the Girder `System Prerequisites`_ documentation to ensure that all\nnecessary programs are available for the pip-installed version of Girder.\n\n**Note:** The Technical Journal plugin requires Node.js 8+. When following the\ndocumentation to enable the Node.js APT repository, use:\n\n.. code:: bash\n\n  curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n\n**Note:** The Technical Journal plugin requires that MongoDB is at least 3.4+. When following the\ndocumentation to install MongoDB, replace '3.2' with '3.4'\n\n.. code:: bash\n\n  echo \"deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main\" \\\n    | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n\nor\n\n.. code:: bash\n\n  echo \"deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" \\\n    | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n\n\nSet up Technical Journal plugin\n+++++++++++++++++++++++++++++++\nThe plugin can either be installed directly from pip:\n\n.. code:: bash\n\n  pip install girder-tech-journal\n\nOr by cloning this repository\n\n.. code:: bash\n\n  git clone https://github.com/girder/tech_journal\n  cd tech_journal\n  pip install .\n\nIn the git repo directory, follow the Installation_ documentation to create a\nvirtual environment and install Girder from pypi. Do not install the web client\nlibraries yet. The following instructions assume you have entered the virtual\nenvironment.\n\nInstall yarn\n\n.. code:: bash\n\n  npm install -g yarn\n\nInstall web packages:\n\n.. code:: bash\n\n  cd girder-tech-journal-gui\n  yarn install\n\nTo run the development server:\n\n.. code:: bash\n\n  yarn run serve\n\nTo build the standalone web application for production:\n\n.. code:: bash\n\n  yarn run build\n\n\nIf you've cloned the repo and are developing for the plugin, there is a custom command in ``setup.py`` that will\nautomate installing yarn packages, building the frontend for production, and copying the dist folder to the proper location.\nTo use this, run: ``python setup.py build_ui``.\n\n**WARNING**\n\nIf you run ``girder serve`` in development mode, the standalone frontend **will not** be served at ``/tech_journal``.\nThis is because it is expected that the frontend will be served on its own (E.g. ``yarn run serve``) in order\nto see the changes being made. If for some reason you need to serve the frontend at ``/tech_journal``, you will need\nto run ``girder serve`` in production mode. However be aware that in this case it is serving the pre-built files,\nand thus no changes will take affect until you rebuild the frontend (E.g. by running ``python setup.py build_ui``).\n\n\nInstall girder_worker\n++++++++++++++++++++++\n\nThe submission upload page has the capability to submit a GitHub URL and\nhave the Tech Journal download the ``master`` branch of the repository\nto be made available as the download of the submission.  To do this,\nit utilizes the girder_worker_ tool. This is automatically installed when\ninstalling the Tech Journal plugin.\n\n\nInstall RabbitMQ\n________________\n\nFollow RabbitMQ_ documentation to install.\n\nAfter installation, ensure that the service is running\n\n.. parsed-literal::\n  service --status-all | grep rabbitmq\n    [ + ]  rabbitmq-server\n\n\nInstall Tech Journal Tasks\n__________________________\n\nThe package found in the ``tech_journal_tasks`` directory will also need\nto be installed into the environment prior to starting the ``girder_worker``\nprogram.\n\nThis is accomplished by entering the ``tech_journal_tasks`` directory\nand executing the setup.py file with the ``install`` directive.\n\n.. code:: bash\n\n  cd tech_journal_tasks\n  pip install .\n\nStart girder_worker\n___________________\n\nExecuting the ``girder_worker`` program will start the task listener. If\none has accepted the default installation for RabbitMQ, there will be no\nchanges necessary to the girder_worker configuration to allow it to connect\nto RabbitMQ.  Start girder_worker with the following command:\n\n.. code:: bash\n\n  girder-worker -l info\n\nWhen viewing the first set of output, ensure that the ``processGitHub`` and\n``surveySubmission`` tasks are listed under the ``[tasks]`` header:\n\n.. parsed-literal::\n\n  snyder@midas-vm:~$ girder-worker -l info\n  <....>\n\n  [tasks]\n    . girder_worker.docker.tasks.docker_run\n    . girder_worker.run\n    . **tech_journal_tasks.tasks.processGithub**\n    . **tech_journal_tasks.tasks.surveySubmission**\n\nConfigure the plugin\n++++++++++++++++++++\n\nOpen a new terminal and activate the virtual environment.\n\n.. code:: bash\n\n  cd tech_journal\n  . ~/girder_env/bin/activate\n\nBuild the Girder web client and start the server:\n\n.. code:: bash\n\n  girder build\n  girder serve\n\n**Note:** although ordinarily Girder would want to rebuild the newly activated\nplugin, you do not need to do that now, since we are building this plugin in a\n\"standalone\" mode, outside the control of Girder's build system\n\nCreate Admin User\n__________________\n\nOpen http://localhost:8080/ in your web browser, and you should see the\nGirder welcome page.\n\nThe first user to be created in the system is automatically given admin\npermission over the instance, so the first thing you should do after starting\nyour instance for the first time is to register a user. After that succeeds,\nyou should see a link appear in the navigation bar that says Admin console.\n\nGenerate Folder Structure\n_________________________\n\nFirst, generate a \"Collection\" to represent the total information of the OTJ.\nThis can be accomplished by clicking on ``Collections`` in the left menu and\nthen clicking on the ``Create Collection`` button. Enter a name and a\ndescription, then click ``Create``.\n\nThis creation of the collection can also be done by utilizing the\n``plugins/admin/journal`` page of the OTJ.\n\n**Note**  The description of the collection must contain the string\n``__journal__`` to be picked up by certain OTJ pages.\n\nThe \"Unique ID\" of this folder, which can be found by clicking on the blue\nbutton with  an ``i`` on it, will be used later to configure the Tech Journal\nplugin.\n\nThen, generate a folder within that collection to be the first \"Issue\" that will\nbe submitted to. This is accomplished by clicking on the ``Collection Actions``\nmenu and selecting ``Create folder here``.  The ``Collection Actions`` button\ncan be found to the right of the blue button from above. Enter a name and\ndescription for the first folder and then click \"Create\" again.\n\n\nEnable the Technical Journal plugin\n___________________________________\n\n\nTo enable the plugin, head to the ``Admin Console`` and click on the\n``Plugins`` link.\n\nA list of the current plugins will be shown, scroll down to the\n``Technical Journal Plugin`` and enable it by switching the ``OFF`` slider\nto the on position.\n\nClick on the ``Configure Plugin`` icon, which looks like a small gear.\n\nThis will show the 5 fields that are used to configure a Midas instance of\nthe Technical Journal.  Only the ``Default Journal`` entry will need to be\nfilled out at this point.  Enter the ``Unique ID`` of the collection that was\ngenerated above and click ``Save Configuration``.\n\nOnce that has been saved, the plugin should be configured and ready to be used.\nVisit the entry point of the plugin by visiting::\n\n   http://<webroot>/tech_journal\n\nOr something like this for a localhost instance::\n\n  http://localhost:8080/tech_journal\n\n**WARNING**\n\nSome of the links, ``Journal`` and ``Help``, in the menu bar do not point to\nvalid locations within the plugin yet.  The ``Home`` and ``New Submission``\nlinks will take you to the correct pages.\n\n\nReleasing\n_________________________\n\nTo update the PyPI release:\n\nFirst increment the version is setup.py. Then run:\n\n.. code:: bash\n\n  cd girder-tech-journal-gui;\n  yarn run build;\n  cd ..;\n  python setup.py sdist;\n  tox -e release\n\n\n.. |build-status| image:: https://circleci.com/gh/girder/tech_journal.png?style=shield\n    :target: https://circleci.com/gh/girder/tech_journal\n    :alt: Build Status\n\n.. |license-badge| image:: https://img.shields.io/github/license/girder/tech_journal.svg\n    :target: https://raw.githubusercontent.com/girder/tech_journal/master/LICENSE\n    :alt: License\n\n.. _`System Prerequisites`: https://girder.readthedocs.io/en/stable/prerequisites.html\n.. _`Installation`: https://girder.readthedocs.io/en/stable/installation.html\n.. _Girder_Worker: https://github.com/girder/girder_worker\n.. _RabbitMQ: https://www.rabbitmq.com/download.html", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/girder/tech_journal", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "girder-tech-journal", "package_url": "https://pypi.org/project/girder-tech-journal/", "platform": "", "project_url": "https://pypi.org/project/girder-tech-journal/", "project_urls": {"Homepage": "https://github.com/girder/tech_journal"}, "release_url": "https://pypi.org/project/girder-tech-journal/1.0.0a9/", "requires_dist": null, "requires_python": "", "summary": "A Girder plugin for a Technical Journal", "version": "1.0.0a9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Assumes a certain folder structure so far for the main page display:\nThe top level collection ID value is what should be used in the configuration page\nIt will then search for the folders under each, to find all available journal \u201cissues\u201d</p>\n<p>From each of those \u201cissues\u201d, it will query for a \u201csubmission\u201d which is an available folder\nin the \u201cissue\u201d.  Eventually, this folder will have metadata for the rest of the information\nthat needs to be shown.  A sample structure is found in a graphic diagram below, with the Girder\ntype in parenthesis:</p>\n<pre>OTJ (collection)\n\u251c\u2500\u2500 2016 Jan-Jun (folder)\n\u2502   \u251c\u2500\u2500 Submission 1 (folder)\n\u2502   \u2502   \u2514\u2500\u2500 Revision 1\n|   |       \u2514\u2500\u2500 blah.tar\n\u2502   \u2502   \u2514\u2500\u2500 Revision 2\n|   |       \u2514\u2500\u2500 blah_v2.tar\n\u2502   \u2514\u2500\u2500 Submission 2 (folder)\n\u2502   \u2502   \u2514\u2500\u2500 Revision 1\n\u2502           \u2514\u2500\u2500 Paper.docx\n\u2514\u2500\u2500 2016 Jun-Dec (folder)\n    \u2514\u2500\u2500 Submission 3 (folder)\n        \u2514\u2500\u2500 Revision 1\n            \u2514\u2500\u2500 Paper2.docx\n</pre>\n<div id=\"setup-instructions\">\n<h2>Setup Instructions</h2>\n<div id=\"install-pre-requisite-programs\">\n<h3>Install pre-requisite programs</h3>\n<p>Follow the Girder <a href=\"https://girder.readthedocs.io/en/stable/prerequisites.html\" rel=\"nofollow\">System Prerequisites</a> documentation to ensure that all\nnecessary programs are available for the pip-installed version of Girder.</p>\n<p><strong>Note:</strong> The Technical Journal plugin requires Node.js 8+. When following the\ndocumentation to enable the Node.js APT repository, use:</p>\n<pre>curl -sL https://deb.nodesource.com/setup_8.x <span class=\"p\">|</span> sudo -E bash -\n</pre>\n<p><strong>Note:</strong> The Technical Journal plugin requires that MongoDB is at least 3.4+. When following the\ndocumentation to install MongoDB, replace \u20183.2\u2019 with \u20183.4\u2019</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main\"</span> <span class=\"se\">\\\n</span>  <span class=\"p\">|</span> sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n</pre>\n<p>or</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\"</span> <span class=\"se\">\\\n</span>  <span class=\"p\">|</span> sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n</pre>\n</div>\n<div id=\"set-up-technical-journal-plugin\">\n<h3>Set up Technical Journal plugin</h3>\n<p>The plugin can either be installed directly from pip:</p>\n<pre>pip install girder-tech-journal\n</pre>\n<p>Or by cloning this repository</p>\n<pre>git clone https://github.com/girder/tech_journal\n<span class=\"nb\">cd</span> tech_journal\npip install .\n</pre>\n<p>In the git repo directory, follow the <a href=\"https://girder.readthedocs.io/en/stable/installation.html\" rel=\"nofollow\">Installation</a> documentation to create a\nvirtual environment and install Girder from pypi. Do not install the web client\nlibraries yet. The following instructions assume you have entered the virtual\nenvironment.</p>\n<p>Install yarn</p>\n<pre>npm install -g yarn\n</pre>\n<p>Install web packages:</p>\n<pre><span class=\"nb\">cd</span> girder-tech-journal-gui\nyarn install\n</pre>\n<p>To run the development server:</p>\n<pre>yarn run serve\n</pre>\n<p>To build the standalone web application for production:</p>\n<pre>yarn run build\n</pre>\n<p>If you\u2019ve cloned the repo and are developing for the plugin, there is a custom command in <tt>setup.py</tt> that will\nautomate installing yarn packages, building the frontend for production, and copying the dist folder to the proper location.\nTo use this, run: <tt>python setup.py build_ui</tt>.</p>\n<p><strong>WARNING</strong></p>\n<p>If you run <tt>girder serve</tt> in development mode, the standalone frontend <strong>will not</strong> be served at <tt>/tech_journal</tt>.\nThis is because it is expected that the frontend will be served on its own (E.g. <tt>yarn run serve</tt>) in order\nto see the changes being made. If for some reason you need to serve the frontend at <tt>/tech_journal</tt>, you will need\nto run <tt>girder serve</tt> in production mode. However be aware that in this case it is serving the pre-built files,\nand thus no changes will take affect until you rebuild the frontend (E.g. by running <tt>python setup.py build_ui</tt>).</p>\n</div>\n<div id=\"install-girder-worker\">\n<h3>Install girder_worker</h3>\n<p>The submission upload page has the capability to submit a GitHub URL and\nhave the Tech Journal download the <tt>master</tt> branch of the repository\nto be made available as the download of the submission.  To do this,\nit utilizes the <a href=\"https://github.com/girder/girder_worker\" rel=\"nofollow\">girder_worker</a> tool. This is automatically installed when\ninstalling the Tech Journal plugin.</p>\n<div id=\"install-rabbitmq\">\n<h4>Install RabbitMQ</h4>\n<p>Follow <a href=\"https://www.rabbitmq.com/download.html\" rel=\"nofollow\">RabbitMQ</a> documentation to install.</p>\n<p>After installation, ensure that the service is running</p>\n<pre>service --status-all | grep rabbitmq\n  [ + ]  rabbitmq-server\n</pre>\n</div>\n<div id=\"install-tech-journal-tasks\">\n<h4>Install Tech Journal Tasks</h4>\n<p>The package found in the <tt>tech_journal_tasks</tt> directory will also need\nto be installed into the environment prior to starting the <tt>girder_worker</tt>\nprogram.</p>\n<p>This is accomplished by entering the <tt>tech_journal_tasks</tt> directory\nand executing the setup.py file with the <tt>install</tt> directive.</p>\n<pre><span class=\"nb\">cd</span> tech_journal_tasks\npip install .\n</pre>\n</div>\n<div id=\"start-girder-worker\">\n<h4>Start girder_worker</h4>\n<p>Executing the <tt>girder_worker</tt> program will start the task listener. If\none has accepted the default installation for RabbitMQ, there will be no\nchanges necessary to the girder_worker configuration to allow it to connect\nto RabbitMQ.  Start girder_worker with the following command:</p>\n<pre>girder-worker -l info\n</pre>\n<p>When viewing the first set of output, ensure that the <tt>processGitHub</tt> and\n<tt>surveySubmission</tt> tasks are listed under the <tt>[tasks]</tt> header:</p>\n<pre><a href=\"mailto:snyder%40midas-vm\">snyder<span>@</span>midas-vm</a>:~$ girder-worker -l info\n&lt;....&gt;\n\n[tasks]\n  . girder_worker.docker.tasks.docker_run\n  . girder_worker.run\n  . <strong>tech_journal_tasks.tasks.processGithub</strong>\n  . <strong>tech_journal_tasks.tasks.surveySubmission</strong>\n</pre>\n</div>\n</div>\n<div id=\"configure-the-plugin\">\n<h3>Configure the plugin</h3>\n<p>Open a new terminal and activate the virtual environment.</p>\n<pre><span class=\"nb\">cd</span> tech_journal\n. ~/girder_env/bin/activate\n</pre>\n<p>Build the Girder web client and start the server:</p>\n<pre>girder build\ngirder serve\n</pre>\n<p><strong>Note:</strong> although ordinarily Girder would want to rebuild the newly activated\nplugin, you do not need to do that now, since we are building this plugin in a\n\u201cstandalone\u201d mode, outside the control of Girder\u2019s build system</p>\n<div id=\"create-admin-user\">\n<h4>Create Admin User</h4>\n<p>Open <a href=\"http://localhost:8080/\" rel=\"nofollow\">http://localhost:8080/</a> in your web browser, and you should see the\nGirder welcome page.</p>\n<p>The first user to be created in the system is automatically given admin\npermission over the instance, so the first thing you should do after starting\nyour instance for the first time is to register a user. After that succeeds,\nyou should see a link appear in the navigation bar that says Admin console.</p>\n</div>\n<div id=\"generate-folder-structure\">\n<h4>Generate Folder Structure</h4>\n<p>First, generate a \u201cCollection\u201d to represent the total information of the OTJ.\nThis can be accomplished by clicking on <tt>Collections</tt> in the left menu and\nthen clicking on the <tt>Create Collection</tt> button. Enter a name and a\ndescription, then click <tt>Create</tt>.</p>\n<p>This creation of the collection can also be done by utilizing the\n<tt>plugins/admin/journal</tt> page of the OTJ.</p>\n<p><strong>Note</strong>  The description of the collection must contain the string\n<tt>__journal__</tt> to be picked up by certain OTJ pages.</p>\n<p>The \u201cUnique ID\u201d of this folder, which can be found by clicking on the blue\nbutton with  an <tt>i</tt> on it, will be used later to configure the Tech Journal\nplugin.</p>\n<p>Then, generate a folder within that collection to be the first \u201cIssue\u201d that will\nbe submitted to. This is accomplished by clicking on the <tt>Collection Actions</tt>\nmenu and selecting <tt>Create folder here</tt>.  The <tt>Collection Actions</tt> button\ncan be found to the right of the blue button from above. Enter a name and\ndescription for the first folder and then click \u201cCreate\u201d again.</p>\n</div>\n<div id=\"enable-the-technical-journal-plugin\">\n<h4>Enable the Technical Journal plugin</h4>\n<p>To enable the plugin, head to the <tt>Admin Console</tt> and click on the\n<tt>Plugins</tt> link.</p>\n<p>A list of the current plugins will be shown, scroll down to the\n<tt>Technical Journal Plugin</tt> and enable it by switching the <tt>OFF</tt> slider\nto the on position.</p>\n<p>Click on the <tt>Configure Plugin</tt> icon, which looks like a small gear.</p>\n<p>This will show the 5 fields that are used to configure a Midas instance of\nthe Technical Journal.  Only the <tt>Default Journal</tt> entry will need to be\nfilled out at this point.  Enter the <tt>Unique ID</tt> of the collection that was\ngenerated above and click <tt>Save Configuration</tt>.</p>\n<p>Once that has been saved, the plugin should be configured and ready to be used.\nVisit the entry point of the plugin by visiting:</p>\n<pre>http://&lt;webroot&gt;/tech_journal\n</pre>\n<p>Or something like this for a localhost instance:</p>\n<pre>http://localhost:8080/tech_journal\n</pre>\n<p><strong>WARNING</strong></p>\n<p>Some of the links, <tt>Journal</tt> and <tt>Help</tt>, in the menu bar do not point to\nvalid locations within the plugin yet.  The <tt>Home</tt> and <tt>New Submission</tt>\nlinks will take you to the correct pages.</p>\n</div>\n<div id=\"releasing\">\n<h4>Releasing</h4>\n<p>To update the PyPI release:</p>\n<p>First increment the version is setup.py. Then run:</p>\n<pre><span class=\"nb\">cd</span> girder-tech-journal-gui<span class=\"p\">;</span>\nyarn run build<span class=\"p\">;</span>\n<span class=\"nb\">cd</span> ..<span class=\"p\">;</span>\npython setup.py sdist<span class=\"p\">;</span>\ntox -e release\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5426434, "releases": {"1.0.0a1": [{"comment_text": "", "digests": {"md5": "486b9c56f58f9c9ea99f8f56f82b713c", "sha256": "d7d84312099e3c01d057576b1103e6933f8fd4232903f05c0daf69c30dbfda98"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a1.zip", "has_sig": false, "md5_digest": "486b9c56f58f9c9ea99f8f56f82b713c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6554607, "upload_time": "2019-06-19T19:47:38", "upload_time_iso_8601": "2019-06-19T19:47:38.381578Z", "url": "https://files.pythonhosted.org/packages/83/58/7451230dd447bd65a070e1e4e76cfd503539f966222fb49badc7ba6f3db1/girder-tech-journal-1.0.0a1.zip", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "81320e47f761e18017c4370bd0e8a03f", "sha256": "4e9b9fc2cd31ab15714aac7fd931e9f29fbcc85367605027ffd233f5442e4a19"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a2.zip", "has_sig": false, "md5_digest": "81320e47f761e18017c4370bd0e8a03f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6701410, "upload_time": "2019-06-19T19:53:11", "upload_time_iso_8601": "2019-06-19T19:53:11.978014Z", "url": "https://files.pythonhosted.org/packages/78/a2/bb0be30a07a805f0c1327ba4ad817eac243e100ce8281987fbdeb337f087/girder-tech-journal-1.0.0a2.zip", "yanked": false}], "1.0.0a3": [{"comment_text": "", "digests": {"md5": "908cd6bc312b5bb4cbb994c99239eb82", "sha256": "084ea8ef977c5b136c8d3cb775cbfb878bc1ad77d03b13a9c0dba8e20ff72b80"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a3.zip", "has_sig": false, "md5_digest": "908cd6bc312b5bb4cbb994c99239eb82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6838359, "upload_time": "2019-06-19T20:41:47", "upload_time_iso_8601": "2019-06-19T20:41:47.287753Z", "url": "https://files.pythonhosted.org/packages/37/54/c2c5d1c304a759863cddec66bb01d9d153992ce4380cf977f04d19258a2e/girder-tech-journal-1.0.0a3.zip", "yanked": false}], "1.0.0a4": [{"comment_text": "", "digests": {"md5": "165f031124901bc8c40446e7b186dfa1", "sha256": "4406e73713f88155a4cee075bc08372d94b61fc5af71796458f6b9c96b041304"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a4.zip", "has_sig": false, "md5_digest": "165f031124901bc8c40446e7b186dfa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7264362, "upload_time": "2019-06-19T21:01:31", "upload_time_iso_8601": "2019-06-19T21:01:31.891871Z", "url": "https://files.pythonhosted.org/packages/d2/c1/f8f2333a47cdac65793aed25aa8cb9e0d0fd34bb83216edcd847def23376/girder-tech-journal-1.0.0a4.zip", "yanked": false}], "1.0.0a5": [{"comment_text": "", "digests": {"md5": "65b4bd5d62ce3aa3d351e3fe5fea9744", "sha256": "49ac1619c31e35fe6949c3a7d8825a42e3114558af575d0aef09f57230ce823f"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a5.zip", "has_sig": false, "md5_digest": "65b4bd5d62ce3aa3d351e3fe5fea9744", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7405859, "upload_time": "2019-06-19T21:13:47", "upload_time_iso_8601": "2019-06-19T21:13:47.299392Z", "url": "https://files.pythonhosted.org/packages/97/ef/579884c19cfdad0d038de8f50c07f3a177217fcc645fd88ddf263c7e522f/girder-tech-journal-1.0.0a5.zip", "yanked": false}], "1.0.0a6": [{"comment_text": "", "digests": {"md5": "bd46d01cfdf51e1210a49a0d51f58470", "sha256": "ae7ed9e55096577ce1edf1792618aef6d353188b1ef79db1f5d23ced5e6c0fc8"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a6.zip", "has_sig": false, "md5_digest": "bd46d01cfdf51e1210a49a0d51f58470", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7545406, "upload_time": "2019-06-19T21:40:37", "upload_time_iso_8601": "2019-06-19T21:40:37.173011Z", "url": "https://files.pythonhosted.org/packages/12/5a/d2145a5a4b0633da0d69aaf66fbb2b5b55f1a6bda913a5790b693c474dd3/girder-tech-journal-1.0.0a6.zip", "yanked": false}], "1.0.0a7": [{"comment_text": "", "digests": {"md5": "b406919095dc65d3a4a158928ca2c970", "sha256": "f46435a7a904922af368a593d38d1d4c8d549c51c8427c9b6aed18a39c0c0f34"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a7.zip", "has_sig": false, "md5_digest": "b406919095dc65d3a4a158928ca2c970", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7825069, "upload_time": "2019-06-19T22:44:19", "upload_time_iso_8601": "2019-06-19T22:44:19.505464Z", "url": "https://files.pythonhosted.org/packages/b7/b2/7d576babeeb4d63702efbe7243af8f4a5c68d97d9152b7c4709cee218039/girder-tech-journal-1.0.0a7.zip", "yanked": false}], "1.0.0a8": [{"comment_text": "", "digests": {"md5": "24bd973746b5e69307148534dacdb8e0", "sha256": "44dc113eba0e8efc56488f6c2f49f0ed702de9eb4e16a8644df55ae2741dbdfb"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a8.zip", "has_sig": false, "md5_digest": "24bd973746b5e69307148534dacdb8e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7964885, "upload_time": "2019-06-19T22:48:47", "upload_time_iso_8601": "2019-06-19T22:48:47.321352Z", "url": "https://files.pythonhosted.org/packages/86/4f/8677aced506014a9f0319a2861e70b51a8d07b51fc91915145963047c504/girder-tech-journal-1.0.0a8.zip", "yanked": false}], "1.0.0a9": [{"comment_text": "", "digests": {"md5": "67750bebd5a52a62a6242f4d972d1471", "sha256": "540895030062d5116e4ef1bcead4f29a6f47f6e5a0616a71f72815e63cc3b834"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a9.zip", "has_sig": false, "md5_digest": "67750bebd5a52a62a6242f4d972d1471", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8104724, "upload_time": "2019-06-20T15:32:30", "upload_time_iso_8601": "2019-06-20T15:32:30.960604Z", "url": "https://files.pythonhosted.org/packages/64/6a/7b7b23c42f71b3d56bc20f6eb4d91200f17f098b21e569b24df7f354031c/girder-tech-journal-1.0.0a9.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "67750bebd5a52a62a6242f4d972d1471", "sha256": "540895030062d5116e4ef1bcead4f29a6f47f6e5a0616a71f72815e63cc3b834"}, "downloads": -1, "filename": "girder-tech-journal-1.0.0a9.zip", "has_sig": false, "md5_digest": "67750bebd5a52a62a6242f4d972d1471", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8104724, "upload_time": "2019-06-20T15:32:30", "upload_time_iso_8601": "2019-06-20T15:32:30.960604Z", "url": "https://files.pythonhosted.org/packages/64/6a/7b7b23c42f71b3d56bc20f6eb4d91200f17f098b21e569b24df7f354031c/girder-tech-journal-1.0.0a9.zip", "yanked": false}], "timestamp": "Fri May  8 00:57:15 2020"}