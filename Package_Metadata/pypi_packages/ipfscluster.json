{"info": {"author": "ClearFoundation", "author_email": "developer@clearfoundation.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Other Audience", "Natural Language :: English", "Operating System :: MacOS", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "|pipeline status| |coverage report|\n\nIPFS Cluster HTTP API\n=====================\n\nThis is a python package to interact with the HTTP REST API of the IPFS\ncluster. `Full API\ndocumentation <https://clearos.gitlab.io/clearfoundation/py-ipfs-cluster-api>`__\nis available on gitlab pages.\n\nInstallation\n------------\n\n``ipfscluster`` is available from the PyPI repository:\n\n.. code:: bash\n\n   pip install ipfscluster\n\nGetting an IPFS Cluster Running\n-------------------------------\n\nTo try the API out, you need to have a running IPFS cluster. The easiest\nway to get one of those is to use ``docker``. In the\n``docker-compose.yml`` file shown below, you will need to adjust the\n``volumes`` tags to reference actual folders on your host machine. The\nchange in ``environment`` variables for ``ipfs_cluster`` service makes\nuse the docker network DNS resolution by service name. Since our docker\nagent is called ``ipfs``, we can get its IP address in the internal,\n``backend`` network by using ``ipfs`` as its DNS name.\n\nCopy this YML into a ``docker-compose.yml`` file in some folder and then\nrun ``docker-compose up``.\n\n.. code:: yaml\n\n   version: \"3.7\"\n   services:\n\n     ipfs:\n       image: ipfs/go-ipfs:latest\n       ports:\n         - \"4001:4001\"\n         - \"5001:5001\"\n       networks:\n         - backend\n       volumes:\n         - ~/ipfs/ipfs:/data/ipfs\n\n     ipfs_cluster:\n       image: ipfs/ipfs-cluster:latest\n       ports:\n         - \"9094:9094\"\n         - \"9095:9094\"\n         - \"9096:9096\"\n       volumes:\n         - ~/ipfs/ipfs-cluster:/data/ipfs-cluster\n       networks:\n         - backend\n       depends_on:\n         - ipfs\n       environment:\n         - CLUSTER_IPFSHTTP_NODEMULTIADDRESS=/dns4/ipfs/tcp/5001\n         - CLUSTER_IPFSPROXY_NODEMULTIADDRESS=/dns4/ipfs/tcp/5001\n\n     networks:\n       backend:\n\nTry out the API\n---------------\n\nNow that you have a cluster running, you can try the API out. Open a\npython CLI and try:\n\n.. code:: python\n\n   client = connect()\n   m = {'name': 'bytes',\n          'cid': {'/': 'QmZfF6C9j4VtoCsTp4KSrhYH47QMd3DNXVZBKaxJdhaPab'},\n          'size': 30}\n   with client:\n       r = client.add_bytes(b\"Mary had a little lamb\")\n   assert r == m\n\nRunning Unit Tests\n------------------\n\nRunning unit tests can prove to be a massive pain because the gitlab CI\nrunner runs on docker. For a project like this that uses\n``docker-compose``, we have to use ``docker-in-docker`` according to\ntheir instructions. However, the documentation is sparse and there are\nlots of dead-ends\u2026 Here are the steps to get the ``docker-compose.yml``\nfile to work:\n\n1. Install a local ``gitlab-runner`` using\n   ``brew install gitlab-runner``.\n2. ``gitlab-runner exec docker --docker-privileged test``. Notice that\n   there is a ``--docker-privileged`` argument. Without that, the\n   ``docker-in-docker`` won\u2019t work.\n3. Make sure all the ``multiaddr`` reference the ``docker`` service\n   (which hosts all the other containers using ``dind``).\n4. ``tox`` should work, but for some reason: running the tests using\n   ``tox`` produces connection refused errors, whereas running straight\n   with ``pytest`` does not. Something about the tox environment screws\n   things up.\n\n.. |pipeline status| image:: https://gitlab.com/clearos/clearfoundation/py-ipfs-cluster-api/badges/master/pipeline.svg\n   :target: https://gitlab.com/clearos/clearfoundation/py-ipfs-cluster-api/commits/master\n.. |coverage report| image:: https://gitlab.com/clearos/clearfoundation/py-ipfs-cluster-api/badges/master/coverage.svg\n   :target: https://gitlab.com/clearos/clearfoundation/py-ipfs-cluster-api/commits/master\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/clearos/clearfoundation/py-ipfs-cluster-api", "keywords": "", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "ipfscluster", "package_url": "https://pypi.org/project/ipfscluster/", "platform": "", "project_url": "https://pypi.org/project/ipfscluster/", "project_urls": {"Homepage": "https://gitlab.com/clearos/clearfoundation/py-ipfs-cluster-api"}, "release_url": "https://pypi.org/project/ipfscluster/0.2.0/", "requires_dist": ["argparse", "pyparsing", "termcolor", "pyyaml", "requests", "ipfshttpclient"], "requires_python": "", "summary": "HTTP Client for IPFS Cluster.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://gitlab.com/clearos/clearfoundation/py-ipfs-cluster-api/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/464e2dabe427a3f493d426d99f540fd60806d28b/68747470733a2f2f6769746c61622e636f6d2f636c6561726f732f636c656172666f756e646174696f6e2f70792d697066732d636c75737465722d6170692f6261646765732f6d61737465722f706970656c696e652e737667\"></a> <a href=\"https://gitlab.com/clearos/clearfoundation/py-ipfs-cluster-api/commits/master\" rel=\"nofollow\"><img alt=\"coverage report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0b12096a92c26780d5dead387115c979cc615fd/68747470733a2f2f6769746c61622e636f6d2f636c6561726f732f636c656172666f756e646174696f6e2f70792d697066732d636c75737465722d6170692f6261646765732f6d61737465722f636f7665726167652e737667\"></a></p>\n<div id=\"ipfs-cluster-http-api\">\n<h2>IPFS Cluster HTTP API</h2>\n<p>This is a python package to interact with the HTTP REST API of the IPFS\ncluster. <a href=\"https://clearos.gitlab.io/clearfoundation/py-ipfs-cluster-api\" rel=\"nofollow\">Full API\ndocumentation</a>\nis available on gitlab pages.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p><tt>ipfscluster</tt> is available from the PyPI repository:</p>\n<pre>pip install ipfscluster\n</pre>\n</div>\n<div id=\"getting-an-ipfs-cluster-running\">\n<h3>Getting an IPFS Cluster Running</h3>\n<p>To try the API out, you need to have a running IPFS cluster. The easiest\nway to get one of those is to use <tt>docker</tt>. In the\n<tt><span class=\"pre\">docker-compose.yml</span></tt> file shown below, you will need to adjust the\n<tt>volumes</tt> tags to reference actual folders on your host machine. The\nchange in <tt>environment</tt> variables for <tt>ipfs_cluster</tt> service makes\nuse the docker network DNS resolution by service name. Since our docker\nagent is called <tt>ipfs</tt>, we can get its IP address in the internal,\n<tt>backend</tt> network by using <tt>ipfs</tt> as its DNS name.</p>\n<p>Copy this YML into a <tt><span class=\"pre\">docker-compose.yml</span></tt> file in some folder and then\nrun <tt><span class=\"pre\">docker-compose</span> up</tt>.</p>\n<pre><span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"s\">\"3.7\"</span>\n<span class=\"nt\">services</span><span class=\"p\">:</span>\n\n  <span class=\"nt\">ipfs</span><span class=\"p\">:</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ipfs/go-ipfs:latest</span>\n    <span class=\"nt\">ports</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"4001:4001\"</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"5001:5001\"</span>\n    <span class=\"nt\">networks</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">backend</span>\n    <span class=\"nt\">volumes</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">~/ipfs/ipfs:/data/ipfs</span>\n\n  <span class=\"nt\">ipfs_cluster</span><span class=\"p\">:</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ipfs/ipfs-cluster:latest</span>\n    <span class=\"nt\">ports</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"9094:9094\"</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"9095:9094\"</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"9096:9096\"</span>\n    <span class=\"nt\">volumes</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">~/ipfs/ipfs-cluster:/data/ipfs-cluster</span>\n    <span class=\"nt\">networks</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">backend</span>\n    <span class=\"nt\">depends_on</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">ipfs</span>\n    <span class=\"nt\">environment</span><span class=\"p\">:</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">CLUSTER_IPFSHTTP_NODEMULTIADDRESS=/dns4/ipfs/tcp/5001</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">CLUSTER_IPFSPROXY_NODEMULTIADDRESS=/dns4/ipfs/tcp/5001</span>\n\n  <span class=\"nt\">networks</span><span class=\"p\">:</span>\n    <span class=\"nt\">backend</span><span class=\"p\">:</span>\n</pre>\n</div>\n<div id=\"try-out-the-api\">\n<h3>Try out the API</h3>\n<p>Now that you have a cluster running, you can try the API out. Open a\npython CLI and try:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'bytes'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'cid'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'/'</span><span class=\"p\">:</span> <span class=\"s1\">'QmZfF6C9j4VtoCsTp4KSrhYH47QMd3DNXVZBKaxJdhaPab'</span><span class=\"p\">},</span>\n       <span class=\"s1\">'size'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n<span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Mary had a little lamb\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"n\">m</span>\n</pre>\n</div>\n<div id=\"running-unit-tests\">\n<h3>Running Unit Tests</h3>\n<p>Running unit tests can prove to be a massive pain because the gitlab CI\nrunner runs on docker. For a project like this that uses\n<tt><span class=\"pre\">docker-compose</span></tt>, we have to use <tt><span class=\"pre\">docker-in-docker</span></tt> according to\ntheir instructions. However, the documentation is sparse and there are\nlots of dead-ends\u2026 Here are the steps to get the <tt><span class=\"pre\">docker-compose.yml</span></tt>\nfile to work:</p>\n<ol>\n<li>Install a local <tt><span class=\"pre\">gitlab-runner</span></tt> using\n<tt>brew install <span class=\"pre\">gitlab-runner</span></tt>.</li>\n<li><tt><span class=\"pre\">gitlab-runner</span> exec docker <span class=\"pre\">--docker-privileged</span> test</tt>. Notice that\nthere is a <tt><span class=\"pre\">--docker-privileged</span></tt> argument. Without that, the\n<tt><span class=\"pre\">docker-in-docker</span></tt> won\u2019t work.</li>\n<li>Make sure all the <tt>multiaddr</tt> reference the <tt>docker</tt> service\n(which hosts all the other containers using <tt>dind</tt>).</li>\n<li><tt>tox</tt> should work, but for some reason: running the tests using\n<tt>tox</tt> produces connection refused errors, whereas running straight\nwith <tt>pytest</tt> does not. Something about the tox environment screws\nthings up.</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5690108, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "8611b8e08327a6d419f6424c4c24e8b9", "sha256": "684dc5daa673dc40b437e77db0ae86254e414e90b73b12084dcc966e30f4ca3e"}, "downloads": -1, "filename": "ipfscluster-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8611b8e08327a6d419f6424c4c24e8b9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8754, "upload_time": "2019-07-04T15:35:35", "upload_time_iso_8601": "2019-07-04T15:35:35.072763Z", "url": "https://files.pythonhosted.org/packages/ac/3a/aba1b63d4541b9d20de61d7bf54a021bb17695ba5cc081f34c1cc7c0b076/ipfscluster-0.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e80780ed4de9da08ee718b34013eb4f1", "sha256": "d2b2f9f6901bb36ce7a713638707d99baaf1b848f888701e38233fb43360ae74"}, "downloads": -1, "filename": "ipfscluster-0.0.0.tar.gz", "has_sig": false, "md5_digest": "e80780ed4de9da08ee718b34013eb4f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6824, "upload_time": "2019-07-04T15:35:37", "upload_time_iso_8601": "2019-07-04T15:35:37.289686Z", "url": "https://files.pythonhosted.org/packages/86/6c/958703ddcd05c7707c4261fe4e7150e21e7e903333b66bf643bb82cbf430/ipfscluster-0.0.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5d9d3afa7134e1d91a3904e5fb270fb4", "sha256": "39e8ff030b77512d2b22e6ea2b5f0240b9516904d22791359ecd9f0a81551c01"}, "downloads": -1, "filename": "ipfscluster-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5d9d3afa7134e1d91a3904e5fb270fb4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22508, "upload_time": "2019-07-29T21:46:54", "upload_time_iso_8601": "2019-07-29T21:46:54.716793Z", "url": "https://files.pythonhosted.org/packages/f5/48/9b8a411bd10a5bc72300200872d54defe6804ee38194e45b940017684684/ipfscluster-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f977935da2c808bcd442b573e0b39a7", "sha256": "1bff55389648a40a0ee9e8d4e47c586e5f2fc575c64331c922a006bc99600503"}, "downloads": -1, "filename": "ipfscluster-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3f977935da2c808bcd442b573e0b39a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9485, "upload_time": "2019-07-29T21:46:56", "upload_time_iso_8601": "2019-07-29T21:46:56.086352Z", "url": "https://files.pythonhosted.org/packages/39/8e/bdb35dcd6db966f8c074679e19c18746f2014bb82b35bc34b2e2db49ca0c/ipfscluster-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f3f4e895c3f127aae07d81024d67580d", "sha256": "fbd1561c8571876b37ef73786c94278ff5589c3ec929a4d5d464a5a5ec2b0ed7"}, "downloads": -1, "filename": "ipfscluster-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3f4e895c3f127aae07d81024d67580d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23714, "upload_time": "2019-08-17T00:00:54", "upload_time_iso_8601": "2019-08-17T00:00:54.407680Z", "url": "https://files.pythonhosted.org/packages/c7/72/4b1800c2ae91136ef5bed29710b5e9015cfbb499e759f51ef3513793145f/ipfscluster-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00c6d01c045d5b1fab37e58f4c778f75", "sha256": "596b20d1c18844aee41860a59fb5bbfb5e771a3b4ca37d7123366f5a9761a325"}, "downloads": -1, "filename": "ipfscluster-0.2.0.tar.gz", "has_sig": false, "md5_digest": "00c6d01c045d5b1fab37e58f4c778f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11426, "upload_time": "2019-08-17T00:00:55", "upload_time_iso_8601": "2019-08-17T00:00:55.961841Z", "url": "https://files.pythonhosted.org/packages/bb/96/9de7d042c4334de5e83ea25894a78b11b4cf2038ac6deb400ea41319bcdb/ipfscluster-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f3f4e895c3f127aae07d81024d67580d", "sha256": "fbd1561c8571876b37ef73786c94278ff5589c3ec929a4d5d464a5a5ec2b0ed7"}, "downloads": -1, "filename": "ipfscluster-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3f4e895c3f127aae07d81024d67580d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23714, "upload_time": "2019-08-17T00:00:54", "upload_time_iso_8601": "2019-08-17T00:00:54.407680Z", "url": "https://files.pythonhosted.org/packages/c7/72/4b1800c2ae91136ef5bed29710b5e9015cfbb499e759f51ef3513793145f/ipfscluster-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00c6d01c045d5b1fab37e58f4c778f75", "sha256": "596b20d1c18844aee41860a59fb5bbfb5e771a3b4ca37d7123366f5a9761a325"}, "downloads": -1, "filename": "ipfscluster-0.2.0.tar.gz", "has_sig": false, "md5_digest": "00c6d01c045d5b1fab37e58f4c778f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11426, "upload_time": "2019-08-17T00:00:55", "upload_time_iso_8601": "2019-08-17T00:00:55.961841Z", "url": "https://files.pythonhosted.org/packages/bb/96/9de7d042c4334de5e83ea25894a78b11b4cf2038ac6deb400ea41319bcdb/ipfscluster-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:39 2020"}