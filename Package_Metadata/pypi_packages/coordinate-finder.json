{"info": {"author": "Alex Terry & Alistair Heath", "author_email": "alexterry48@gmail.com.com", "bugtrack_url": null, "classifiers": [], "description": "# Mars Coordinate Finder\n## Contents\n1. Description\n2. Installation\n3. Usage\n4. Generating a JSON file that bounds a required location\n\n## Description\n- This package allows the user to generate equidistant latitude and longitude coordinates within a region\ndefined by the user.\n- As most of the work done within Mars is not concerned with locations within the ocean, this package limits\nthe coordinates to those that are on land and ensures the equidistant locations are only over land mass.\n- There are two methods within this package: \n    - The first can find equidistant coordinates within a region bounded by North, South, East and West coordinates. \n    - The second can take a JSON file that defines the boundary coordinates of given region and creates equidistant\n    points within this region\n    \n- The result of either of these methods can be stored as a JSON for use using the createJSON method\n\n## Installation\nUse the package manager pip to install coordinate_finder\n```python\npip install coordinate-finder\n```\n## Usage\nTo use this package you can reference the following commands as an example:\n\n```python\nfrom coordinate_finder import Marscoordfinder\ncoords = Marscoordfinder()\n\n# Code to generate equidistant points within a boxed region\n# land_points are points within the region on land\n# equidistant_points are the number of coordinates (in this case 40) equidistant across the land in this region\n# n & s are the North and South Latitudes you wish to use as the boundaries\n# e & w are the East and West longitudes you wish to use as Boundaries\n# fidelity is the granularity of the defined grid, a smaller fidelity will give a finer granularity\nland_points, equidistant_points = coords.getNPointsInRegion(40, n=30, s=26, e=86.9, w=83.3, fidelity = 0.08)\n\n# Code to generate equidistant points within a custom defined boundary\nland_points, equidistant_points = coords.pointsInRegion(40,'BRA_Shape_Points.json')\n\n# Code to write the calculated coordinates to a JSON file\ncoords.createJson(equidistant_points, 'C:/Users/smithjoh/Documents/output_coords.json')\n\n```\n## Generating a JSON file that bounds a required location\n- Go to https://gadm.org/download_country_v3.html and search for the country you want a region within\n- Download the shapefile for this country\n- Go to https://mapshaper.org/ and upload all the files at the _0 level (this will give the country outline)\n- Export the GeoJSON files which will give a JSON file of all the cooridnates of the country outlines\n- This can now be used with the package", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Alexterry101/MarsCoordFinder", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "coordinate-finder", "package_url": "https://pypi.org/project/coordinate-finder/", "platform": "", "project_url": "https://pypi.org/project/coordinate-finder/", "project_urls": {"Homepage": "https://github.com/Alexterry101/MarsCoordFinder"}, "release_url": "https://pypi.org/project/coordinate-finder/1.2.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Package to find equidistant Lat & Long coordinates", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mars Coordinate Finder</h1>\n<h2>Contents</h2>\n<ol>\n<li>Description</li>\n<li>Installation</li>\n<li>Usage</li>\n<li>Generating a JSON file that bounds a required location</li>\n</ol>\n<h2>Description</h2>\n<ul>\n<li>\n<p>This package allows the user to generate equidistant latitude and longitude coordinates within a region\ndefined by the user.</p>\n</li>\n<li>\n<p>As most of the work done within Mars is not concerned with locations within the ocean, this package limits\nthe coordinates to those that are on land and ensures the equidistant locations are only over land mass.</p>\n</li>\n<li>\n<p>There are two methods within this package:</p>\n<ul>\n<li>The first can find equidistant coordinates within a region bounded by North, South, East and West coordinates.</li>\n<li>The second can take a JSON file that defines the boundary coordinates of given region and creates equidistant\npoints within this region</li>\n</ul>\n</li>\n<li>\n<p>The result of either of these methods can be stored as a JSON for use using the createJSON method</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Use the package manager pip to install coordinate_finder</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">coordinate</span><span class=\"o\">-</span><span class=\"n\">finder</span>\n</pre>\n<h2>Usage</h2>\n<p>To use this package you can reference the following commands as an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">coordinate_finder</span> <span class=\"kn\">import</span> <span class=\"n\">Marscoordfinder</span>\n<span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">Marscoordfinder</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Code to generate equidistant points within a boxed region</span>\n<span class=\"c1\"># land_points are points within the region on land</span>\n<span class=\"c1\"># equidistant_points are the number of coordinates (in this case 40) equidistant across the land in this region</span>\n<span class=\"c1\"># n &amp; s are the North and South Latitudes you wish to use as the boundaries</span>\n<span class=\"c1\"># e &amp; w are the East and West longitudes you wish to use as Boundaries</span>\n<span class=\"c1\"># fidelity is the granularity of the defined grid, a smaller fidelity will give a finer granularity</span>\n<span class=\"n\">land_points</span><span class=\"p\">,</span> <span class=\"n\">equidistant_points</span> <span class=\"o\">=</span> <span class=\"n\">coords</span><span class=\"o\">.</span><span class=\"n\">getNPointsInRegion</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">=</span><span class=\"mf\">86.9</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mf\">83.3</span><span class=\"p\">,</span> <span class=\"n\">fidelity</span> <span class=\"o\">=</span> <span class=\"mf\">0.08</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Code to generate equidistant points within a custom defined boundary</span>\n<span class=\"n\">land_points</span><span class=\"p\">,</span> <span class=\"n\">equidistant_points</span> <span class=\"o\">=</span> <span class=\"n\">coords</span><span class=\"o\">.</span><span class=\"n\">pointsInRegion</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"s1\">'BRA_Shape_Points.json'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Code to write the calculated coordinates to a JSON file</span>\n<span class=\"n\">coords</span><span class=\"o\">.</span><span class=\"n\">createJson</span><span class=\"p\">(</span><span class=\"n\">equidistant_points</span><span class=\"p\">,</span> <span class=\"s1\">'C:/Users/smithjoh/Documents/output_coords.json'</span><span class=\"p\">)</span>\n</pre>\n<h2>Generating a JSON file that bounds a required location</h2>\n<ul>\n<li>Go to <a href=\"https://gadm.org/download_country_v3.html\" rel=\"nofollow\">https://gadm.org/download_country_v3.html</a> and search for the country you want a region within</li>\n<li>Download the shapefile for this country</li>\n<li>Go to <a href=\"https://mapshaper.org/\" rel=\"nofollow\">https://mapshaper.org/</a> and upload all the files at the _0 level (this will give the country outline)</li>\n<li>Export the GeoJSON files which will give a JSON file of all the cooridnates of the country outlines</li>\n<li>This can now be used with the package</li>\n</ul>\n\n          </div>"}, "last_serial": 6421307, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "25c48c28635a3dd1025bd47b06b30843", "sha256": "5ff6532631ce960d1d98a8c00a429925e8bb6be8ba8e027f90d6cf66b371ea3c"}, "downloads": -1, "filename": "coordinate_finder-1.1.tar.gz", "has_sig": false, "md5_digest": "25c48c28635a3dd1025bd47b06b30843", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2044379, "upload_time": "2019-11-15T09:16:57", "upload_time_iso_8601": "2019-11-15T09:16:57.958777Z", "url": "https://files.pythonhosted.org/packages/e2/01/a4d9fbe147fd6c2e64d562037b9cdbdfc344c10796012a25de9558da56fe/coordinate_finder-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "cd79e1af82d128578d4c10191ed0af54", "sha256": "deebdca1dd85f1f659047fa1cde6513825f6d959e166cde67358f5035de48d55"}, "downloads": -1, "filename": "coordinate_finder-1.2.tar.gz", "has_sig": false, "md5_digest": "cd79e1af82d128578d4c10191ed0af54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2044553, "upload_time": "2019-11-15T09:27:48", "upload_time_iso_8601": "2019-11-15T09:27:48.259886Z", "url": "https://files.pythonhosted.org/packages/5c/3a/477dc2e0e9e9a0b17cf7b6accba7b4e03a12ed62e21eae20e190806a1ffa/coordinate_finder-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "a858a044b0e28ddc9b120a339f928b6e", "sha256": "60b4b510c9b4e48c0ee4dbd0b1b065390eedc45c0cd92a1e2d25f42c2e6051f2"}, "downloads": -1, "filename": "coordinate_finder-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a858a044b0e28ddc9b120a339f928b6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2044313, "upload_time": "2020-01-09T10:01:25", "upload_time_iso_8601": "2020-01-09T10:01:25.718413Z", "url": "https://files.pythonhosted.org/packages/c2/d7/10d2a76c687bf134b0c3edb9b947a9989ade8ad33ab650e71e9406ea137b/coordinate_finder-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a858a044b0e28ddc9b120a339f928b6e", "sha256": "60b4b510c9b4e48c0ee4dbd0b1b065390eedc45c0cd92a1e2d25f42c2e6051f2"}, "downloads": -1, "filename": "coordinate_finder-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a858a044b0e28ddc9b120a339f928b6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2044313, "upload_time": "2020-01-09T10:01:25", "upload_time_iso_8601": "2020-01-09T10:01:25.718413Z", "url": "https://files.pythonhosted.org/packages/c2/d7/10d2a76c687bf134b0c3edb9b947a9989ade8ad33ab650e71e9406ea137b/coordinate_finder-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:19 2020"}