{"info": {"author": "Syrus Akbary", "author_email": "me@syrusakbary.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Pytest", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "SnapshotTest |travis| |pypi|\n============================\n\nSnapshot testing is a way to test your APIs without writing actual test\ncases.\n\n1. A snapshot is a single state of your API, saved in a file.\n2. You have a set of snapshots for your API endpoints.\n3. Once you add a new feature, you can generate *automatically* new\n   snapshots for the updated API.\n\nInstallation\n------------\n\n::\n\n    $ pip install snapshottest\n\nUsage with unittest/nose\n------------------------\n\n.. code:: python\n\n    from snapshottest import TestCase\n\n    class APITestCase(TestCase):\n        def test_api_me(self):\n            \"\"\"Testing the API for /me\"\"\"\n            my_api_response = api.client.get('/me')\n            self.assertMatchSnapshot(my_api_response)\n\n            # Set custom snapshot name: `gpg_response`\n            my_gpg_response = api.client.get('/me?gpg_key')\n            self.assertMatchSnapshot(my_gpg_response, 'gpg_response')\n\nIf you want to update the snapshots automatically you can use the\n``nosetests --snapshot-update``.\n\nCheck the `Unittest\nexample <https://github.com/syrusakbary/snapshottest/tree/master/examples/unittest>`__.\n\nUsage with pytest\n-----------------\n\n.. code:: python\n\n    def test_mything(snapshot):\n        \"\"\"Testing the API for /me\"\"\"\n        my_api_response = api.client.get('/me')\n        snapshot.assert_match(my_api_response)\n\n        # Set custom snapshot name: `gpg_response`\n        my_gpg_response = api.client.get('/me?gpg_key')\n        snapshot.assert_match(my_gpg_response, 'gpg_response')\n\nIf you want to update the snapshots automatically you can use the\n``--snapshot-update`` config.\n\nCheck the `Pytest\nexample <https://github.com/syrusakbary/snapshottest/tree/master/examples/pytest>`__.\n\nUsage with django\n-----------------\n\nAdd to your settings:\n\n.. code:: python\n\n    TEST_RUNNER = 'snapshottest.django.TestRunner'\n\nTo create your snapshottest:\n\n.. code:: python\n\n    from snapshottest.django import TestCase\n\n    class APITestCase(TestCase):\n        def test_api_me(self):\n            \"\"\"Testing the API for /me\"\"\"\n            my_api_response = api.client.get('/me')\n            self.assertMatchSnapshot(my_api_response)\n\nIf you want to update the snapshots automatically you can use the\n``python manage.py test --snapshot-update``. Check the `Django\nexample <https://github.com/syrusakbary/snapshottest/tree/master/examples/django_project>`__.\n\nContributing\n============\n\nAfter cloning this repo and configuring a virtualenv for snapshottest\n(optional, but highly recommended), ensure dependencies are installed by\nrunning:\n\n.. code:: sh\n\n    make install\n\nAfter developing, the full test suite can be evaluated by running:\n\n.. code:: sh\n\n    make lint\n    # and\n    make test\n\nIf you change this ``README.md``, you'll need to have pandoc installed to update its ``README.rst`` counterpart (used by PyPI),\nwhich can be done by running:\n\n::\n\n    make README.rst\n\nNotes\n=====\n\nThis package is heavily inspired in `jest snapshot\ntesting <https://facebook.github.io/jest/docs/snapshot-testing.html>`__.\n\nReasons for use this package\n============================\n\n    Most of this content is taken from the `Jest snapshot\n    blogpost <https://facebook.github.io/jest/blog/2016/07/27/jest-14.html>`__.\n\nWe want to make it as frictionless as possible to write good tests that\nare useful. We observed that when engineers are provided with\nready-to-use tools, they end up writing more tests, which in turn\nresults in stable and healthy code bases.\n\nHowever engineers frequently spend more time writing a test than the\ncomponent itself. As a result many people stopped writing tests\naltogether which eventually led to instabilities.\n\nA typical snapshot test case for a mobile app renders a UI component,\ntakes a screenshot, then compares it to a reference image stored\nalongside the test. The test will fail if the two images do not match:\neither the change is unexpected, or the screenshot needs to be updated\nto the new version of the UI component.\n\nSnapshot Testing with SnapshotTest\n----------------------------------\n\nA similar approach can be taken when it comes to testing your APIs.\nInstead of rendering the graphical UI, which would require building the\nentire app, you can use a test renderer to quickly generate a\nserializable value for your API response.\n\nLicense\n-------\n\n`MIT\nLicense <https://github.com/syrusakbary/snapshottest/blob/master/LICENSE>`__\n\n|coveralls|\n\n.. |travis| image:: https://img.shields.io/travis/syrusakbary/snapshottest.svg?style=flat\n   :target: https://travis-ci.org/syrusakbary/snapshottest\n.. |pypi| image:: https://img.shields.io/pypi/v/snapshottest.svg?style=flat\n   :target: https://pypi.python.org/pypi/snapshottest\n.. |coveralls| image:: https://coveralls.io/repos/syrusakbary/snapshottest/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/syrusakbary/snapshottest?branch=master\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/syrusakbary/snapshottest", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "snapshottest", "package_url": "https://pypi.org/project/snapshottest/", "platform": "", "project_url": "https://pypi.org/project/snapshottest/", "project_urls": {"Homepage": "https://github.com/syrusakbary/snapshottest"}, "release_url": "https://pypi.org/project/snapshottest/0.5.1/", "requires_dist": null, "requires_python": "", "summary": "Snapshot Testing utils for Python", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"snapshottest-travis-pypi\">\n<h2>SnapshotTest <a href=\"https://travis-ci.org/syrusakbary/snapshottest\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33c3939a44d617c5a56a92245ac329398640dbf0/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7379727573616b626172792f736e617073686f74746573742e7376673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/snapshottest\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46573fea79a313c6b0673159b2e57cb6c07418d6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736e617073686f74746573742e7376673f7374796c653d666c6174\"></a></h2>\n<p>Snapshot testing is a way to test your APIs without writing actual test\ncases.</p>\n<ol>\n<li>A snapshot is a single state of your API, saved in a file.</li>\n<li>You have a set of snapshots for your API endpoints.</li>\n<li>Once you add a new feature, you can generate <em>automatically</em> new\nsnapshots for the updated API.</li>\n</ol>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>$ pip install snapshottest\n</pre>\n</div>\n<div id=\"usage-with-unittest-nose\">\n<h3>Usage with unittest/nose</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snapshottest</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">APITestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_api_me</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Testing the API for /me\"\"\"</span>\n        <span class=\"n\">my_api_response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/me'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertMatchSnapshot</span><span class=\"p\">(</span><span class=\"n\">my_api_response</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Set custom snapshot name: `gpg_response`</span>\n        <span class=\"n\">my_gpg_response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/me?gpg_key'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertMatchSnapshot</span><span class=\"p\">(</span><span class=\"n\">my_gpg_response</span><span class=\"p\">,</span> <span class=\"s1\">'gpg_response'</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to update the snapshots automatically you can use the\n<tt>nosetests <span class=\"pre\">--snapshot-update</span></tt>.</p>\n<p>Check the <a href=\"https://github.com/syrusakbary/snapshottest/tree/master/examples/unittest\" rel=\"nofollow\">Unittest\nexample</a>.</p>\n</div>\n<div id=\"usage-with-pytest\">\n<h3>Usage with pytest</h3>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_mything</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Testing the API for /me\"\"\"</span>\n    <span class=\"n\">my_api_response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/me'</span><span class=\"p\">)</span>\n    <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">assert_match</span><span class=\"p\">(</span><span class=\"n\">my_api_response</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Set custom snapshot name: `gpg_response`</span>\n    <span class=\"n\">my_gpg_response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/me?gpg_key'</span><span class=\"p\">)</span>\n    <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">assert_match</span><span class=\"p\">(</span><span class=\"n\">my_gpg_response</span><span class=\"p\">,</span> <span class=\"s1\">'gpg_response'</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to update the snapshots automatically you can use the\n<tt><span class=\"pre\">--snapshot-update</span></tt> config.</p>\n<p>Check the <a href=\"https://github.com/syrusakbary/snapshottest/tree/master/examples/pytest\" rel=\"nofollow\">Pytest\nexample</a>.</p>\n</div>\n<div id=\"usage-with-django\">\n<h3>Usage with django</h3>\n<p>Add to your settings:</p>\n<pre><span class=\"n\">TEST_RUNNER</span> <span class=\"o\">=</span> <span class=\"s1\">'snapshottest.django.TestRunner'</span>\n</pre>\n<p>To create your snapshottest:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snapshottest.django</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">APITestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_api_me</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Testing the API for /me\"\"\"</span>\n        <span class=\"n\">my_api_response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/me'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertMatchSnapshot</span><span class=\"p\">(</span><span class=\"n\">my_api_response</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to update the snapshots automatically you can use the\n<tt>python manage.py test <span class=\"pre\">--snapshot-update</span></tt>. Check the <a href=\"https://github.com/syrusakbary/snapshottest/tree/master/examples/django_project\" rel=\"nofollow\">Django\nexample</a>.</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>After cloning this repo and configuring a virtualenv for snapshottest\n(optional, but highly recommended), ensure dependencies are installed by\nrunning:</p>\n<pre>make install\n</pre>\n<p>After developing, the full test suite can be evaluated by running:</p>\n<pre>make lint\n<span class=\"c1\"># and\n</span>make <span class=\"nb\">test</span>\n</pre>\n<p>If you change this <tt>README.md</tt>, you\u2019ll need to have pandoc installed to update its <tt>README.rst</tt> counterpart (used by PyPI),\nwhich can be done by running:</p>\n<pre>make README.rst\n</pre>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<p>This package is heavily inspired in <a href=\"https://facebook.github.io/jest/docs/snapshot-testing.html\" rel=\"nofollow\">jest snapshot\ntesting</a>.</p>\n</div>\n<div id=\"reasons-for-use-this-package\">\n<h2>Reasons for use this package</h2>\n<blockquote>\nMost of this content is taken from the <a href=\"https://facebook.github.io/jest/blog/2016/07/27/jest-14.html\" rel=\"nofollow\">Jest snapshot\nblogpost</a>.</blockquote>\n<p>We want to make it as frictionless as possible to write good tests that\nare useful. We observed that when engineers are provided with\nready-to-use tools, they end up writing more tests, which in turn\nresults in stable and healthy code bases.</p>\n<p>However engineers frequently spend more time writing a test than the\ncomponent itself. As a result many people stopped writing tests\naltogether which eventually led to instabilities.</p>\n<p>A typical snapshot test case for a mobile app renders a UI component,\ntakes a screenshot, then compares it to a reference image stored\nalongside the test. The test will fail if the two images do not match:\neither the change is unexpected, or the screenshot needs to be updated\nto the new version of the UI component.</p>\n<div id=\"snapshot-testing-with-snapshottest\">\n<h3>Snapshot Testing with SnapshotTest</h3>\n<p>A similar approach can be taken when it comes to testing your APIs.\nInstead of rendering the graphical UI, which would require building the\nentire app, you can use a test renderer to quickly generate a\nserializable value for your API response.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p><a href=\"https://github.com/syrusakbary/snapshottest/blob/master/LICENSE\" rel=\"nofollow\">MIT\nLicense</a></p>\n<p><a href=\"https://coveralls.io/github/syrusakbary/snapshottest?branch=master\" rel=\"nofollow\"><img alt=\"coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62063c66e87840aa60b87a6dc3479f5289a31d17/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7379727573616b626172792f736e617073686f74746573742f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5528795, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "17c92bfcda3dff06da620f0b67502eae", "sha256": "5ff2d22b6d4be41c0b5d3b8bdb7fd800d35fd4bcba2180e12ed47b7f600217e3"}, "downloads": -1, "filename": "snapshottest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "17c92bfcda3dff06da620f0b67502eae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7358, "upload_time": "2017-04-10T03:39:37", "upload_time_iso_8601": "2017-04-10T03:39:37.180562Z", "url": "https://files.pythonhosted.org/packages/c6/c5/a7f8146738961868c29dfb7151d57ff22deadbbe2c290131ab6206d2895c/snapshottest-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f9535d5722da87c34162ef135a0ff95c", "sha256": "a46cb351915d2babe5d7359b07b8a3a4dd9748a8f237c14eae797b8b54619fba"}, "downloads": -1, "filename": "snapshottest-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f9535d5722da87c34162ef135a0ff95c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9918, "upload_time": "2017-04-10T10:53:20", "upload_time_iso_8601": "2017-04-10T10:53:20.119030Z", "url": "https://files.pythonhosted.org/packages/6d/c3/f0aeccd281f42e293dcec7424911664bc5e343e66b35e7e03307698495d4/snapshottest-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "98b43d0dd90c4b8c8bcadcd385ba6a62", "sha256": "b92cf1939d8558bbe9986bf51a25eb48ef5bd66c6a2c5945d09e0e978b73e303"}, "downloads": -1, "filename": "snapshottest-0.2.1.tar.gz", "has_sig": false, "md5_digest": "98b43d0dd90c4b8c8bcadcd385ba6a62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10031, "upload_time": "2017-04-10T11:25:21", "upload_time_iso_8601": "2017-04-10T11:25:21.610073Z", "url": "https://files.pythonhosted.org/packages/d0/76/4d08171ca038251f9df3c49689aa744564f9780ac5831edccc8b4f43a2d8/snapshottest-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "5e9a5f3bb90fc04b33d788c4661811c9", "sha256": "a0d72c0372a4ab10df9b673886d12661dcf3217615c09ad53133b27f3073ff30"}, "downloads": -1, "filename": "snapshottest-0.2.2.tar.gz", "has_sig": false, "md5_digest": "5e9a5f3bb90fc04b33d788c4661811c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10050, "upload_time": "2017-04-10T11:46:19", "upload_time_iso_8601": "2017-04-10T11:46:19.303290Z", "url": "https://files.pythonhosted.org/packages/ab/a6/b864cecb837f41962120e39df804195538b0e04eb39ee809624dad0396f1/snapshottest-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "77fff7bb4449b230bf9b1a556832a12a", "sha256": "22094c7dcf17fe6d32a90f7edbe15067ecc83e5c452dc827dcf2bc57faa99eb8"}, "downloads": -1, "filename": "snapshottest-0.3.0.tar.gz", "has_sig": false, "md5_digest": "77fff7bb4449b230bf9b1a556832a12a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10100, "upload_time": "2017-04-10T12:08:42", "upload_time_iso_8601": "2017-04-10T12:08:42.237179Z", "url": "https://files.pythonhosted.org/packages/93/26/4068277f2939a5356564c3bfb809bed8ed4d5838b891fd9383023dd91628/snapshottest-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "109667975601b64aefc11f64ce3e7566", "sha256": "319262e8c112ef445ccdbd79c2942696faaeb3f3da9aa988586589d1fedad219"}, "downloads": -1, "filename": "snapshottest-0.4.0.tar.gz", "has_sig": false, "md5_digest": "109667975601b64aefc11f64ce3e7566", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2017-04-11T06:50:02", "upload_time_iso_8601": "2017-04-11T06:50:02.235028Z", "url": "https://files.pythonhosted.org/packages/65/86/1b4fd67dd4a99e78049f0b7ece00c4bb365352c3eddec61cd6ae3b2977cc/snapshottest-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "fb9f4d3e42016de109973c52fecd88c5", "sha256": "215c28eb397fd171a25a0e7d8b7b82d39619bf38d0e44de97c38842e8495b40c"}, "downloads": -1, "filename": "snapshottest-0.5.0.tar.gz", "has_sig": false, "md5_digest": "fb9f4d3e42016de109973c52fecd88c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11662, "upload_time": "2017-06-30T07:31:14", "upload_time_iso_8601": "2017-06-30T07:31:14.159354Z", "url": "https://files.pythonhosted.org/packages/38/9d/6114ac51327ee8be784ebde5fb21606e161097a41eac3e0619bfc7fad0fd/snapshottest-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "ef976d82b94c5d287b8d23c797e9ebd6", "sha256": "2cc7157e77674ea8ebeb2351466ff50cd4b5ad8e213adc06df9c16a75ab5bafc"}, "downloads": -1, "filename": "snapshottest-0.5.1.tar.gz", "has_sig": false, "md5_digest": "ef976d82b94c5d287b8d23c797e9ebd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13976, "upload_time": "2019-07-14T03:27:04", "upload_time_iso_8601": "2019-07-14T03:27:04.561489Z", "url": "https://files.pythonhosted.org/packages/e0/dd/418e21530ef49b334211235e95a7212694a636687a4e2bc4be226cc84e40/snapshottest-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef976d82b94c5d287b8d23c797e9ebd6", "sha256": "2cc7157e77674ea8ebeb2351466ff50cd4b5ad8e213adc06df9c16a75ab5bafc"}, "downloads": -1, "filename": "snapshottest-0.5.1.tar.gz", "has_sig": false, "md5_digest": "ef976d82b94c5d287b8d23c797e9ebd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13976, "upload_time": "2019-07-14T03:27:04", "upload_time_iso_8601": "2019-07-14T03:27:04.561489Z", "url": "https://files.pythonhosted.org/packages/e0/dd/418e21530ef49b334211235e95a7212694a636687a4e2bc4be226cc84e40/snapshottest-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:32 2020"}