{"info": {"author": "lewoudar", "author_email": "lewoudar@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "# configuror\n\n[![Pypi version](https://img.shields.io/pypi/v/configuror.svg)](https://pypi.org/project/configuror/)\n[![Build Status](https://travis-ci.com/lewoudar/configuror.svg?branch=master)](https://travis-ci.com/lewoudar/configuror)\n[![Windows Build Status](https://img.shields.io/appveyor/ci/lewoudar/configuror/master.svg?label=Windows)](https://ci.appveyor.com/project/lewoudar/configuror)\n[![Coverage Status](https://codecov.io/gh/lewoudar/configuror/branch/master/graphs/badge.svg?branch=master)](https://codecov.io/gh/lewoudar/configuror)\n[![Documentation Status](https://readthedocs.org/projects/configuror/badge/?version=latest)](https://configuror.readthedocs.io/en/latest/?badge=latest)\n[![License Apache 2](https://img.shields.io/hexpm/l/plug.svg)](http://www.apache.org/licenses/LICENSE-2.0)\n\nYour configuration management toolkit!\n\n## Why?\n\nWhile using [Flask](http://flask.pocoo.org/docs/1.0/), I realized that their Config class could be useful for any type\nof project. And the utility became more and more obvious to me when I looked at a project like\n[Ansible](https://docs.ansible.com/ansible/latest/index.html). If you look the \n[section](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable)\nwhere they define variable precedence, you will notice that there may be several locations for the configuration files,\nand these configuration files can be written in different formats (json, yaml..).\n\nWhat if there was a simple tool that would aggregate information from different sources in the order you wanted? This\nis **why** the configuror project exists!\n\n## Installation\n\n```console\npip install configuror\n```\n\nconfiguror works starting from **python 3.6**. It has a few dependencies:\n- [pyyaml](https://pypi.org/project/PyYAML/) >= 5.1\n- [toml](https://pypi.org/project/toml/)\n\n## Documentation\n\nThe documentation is available at https://configuror.readthedocs.io/en/latest/.\n\n## Usage\n\nThe main class provided by configuror is `Config`. It is an extension of a regular dict object. There are two main ways \nto initialize it.\n\n### Using mapping files\n\n```python\nfrom configuror import Config\n\nmapping_files = {\n    'ini': ['foo.ini', 'bar.ini'],\n    'toml': ['foo.toml', 'bar.toml'],\n    'python': ['/path/to/python/file']\n}\nconfig = Config(mapping_files=mapping_files, ignore_file_absence=True)\n```\n\nYou can define a mapping of `file_type: <files>` where the `file_type` is the type of configuration file and `<files>` \nis the list of files from the lowest to the highest priority where values will be loaded.\n\nSince dictionaries are sorted starting from python3.6, the order of the keys is important as it will become the order of\nimportance of your files. For example in the example above, configuror will load values from files in the following order:\n- foo.ini\n- bar.ini\n- foo.toml\n- bar.toml\n- /path/to/python/file\n\nFor python files, only **uppercase** variables will be loaded.\n\nYou will notice the keyword argument `ignore_file_absence` in `Config` class initialization. If it is set to `True`, all\nfiles that does not exist will not raised `FileNotFoundError`. It comes in handy when you want to retrieve variables \nfrom files *that may or may not potentially exist*. By default this parameter is set to `False`.\n\nFile extension is not necessary when you use mapping files since the key is already telling which files we work with.\nThis is not the case with the second way to initialize `Config` class.\n\n### Using a list of files\n\n```python\nfrom configuror import Config\n\nfiles = [\n    'foo.yml',\n    'bar.toml',\n    'foobar.json',\n    '/path/to/python/file'\n    '.env'\n]\nconfig = Config(files=files)\n```\n\nIn this second form of initialization, you pass a list of files you want to retrieve values from the lowest to the\nhighest priority. File extension is **mandatory** here to help configuror to load the files properly.\n\nTo know file extensions supported by configuror, you can use the variable `EXTENSIONS`. it is a mapping\n`file_type: <extensions>` where `file_type` is a type of file supported like *yaml* and `extensions` is a list of\nrecognized extensions for this type of file, e.g: `[yml, yaml]`\n\nToday the file types supported are *toml*, *yaml*, *dotenv*, *ini*, *python* and *json*.\n\n### Other usages\n\nSince `Config` object is a dict-like object, you can pass arbitrary keyword arguments to initialize default values.\n\n```python\nfrom configuror import Config\n\nconfig = Config(FOO=2, BAR='a')\nprint(config)  # will print {'FOO': 2, 'BAR': 'a'}\n```\n\nYou can combine keyword arguments, mapping files and list of files at initialization. The order in which values will be\ninitialized is the following:\n- values from keyword arguments\n- values from mapping files\n- values from list of files\n\nYou can also add values from files after initialization. There are several practical methods for this:\n- `load_from_mapping_files(self, mapping_files: Dict[str, List[str]], ignore_file_absence: bool)`: It is in fact the \nmethod used under the hood when you initialized `Config` object by passing the parameter `mapping_files`.\n\n- `load_from_files(self, files: List[str], ignore_file_absence: bool)`: It is the method used under the hood when you\ninitialized `Config` objects by passing the parameter `files`. \n\n- `load_from_object(self, obj: Union[Object, str])`: `obj` can be an object or a path to a project module\n(with dotted notation). Only uppercase attributes of the corresponding object will be retrieved.\n\n- `load_from_python_file(self, filename: str, ignore_file_absence: bool)`: Loads values from an arbitrary python\nfile. It would be preferable if it were not a file related to your project (i.e a module). Only uppercase variables\nare considered.\n\n- `load_from_json(self, filename: str, ignore_file_absence: bool)`: Loads values from a json file.\n\n- `load_from_yaml(self, filename: str, ignore_file_absence: bool)`: Loads values from a yaml file.\n\n- `load_from_toml(self, filenames: Union[str, List[str]], ignore_file_absence: bool)`: Loads values from a toml file\nor a list of toml files.\n\n- `load_from_ini(self, filenames: Union[str, List], ignore_file_absence: bool, interpolation_method: str = 'basic')`:\nLoads values from an ini file or a list of ini files. There are two interpolation methods that can be used: **basic** \nor **extended** like explained in the\n[documentation](https://docs.python.org/3/library/configparser.html#interpolation-of-values).\n\n- `load_from_dotenv(self, filename: str, ignore_file_absence: bool)`: Loads values from a dotenv file.\n\nBonus: You also have the `update` method of a dict to add/update values.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://configuror.readthedocs.io/en/stable", "keywords": "configuration,yaml,toml,dotenv,ini", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "configuror", "package_url": "https://pypi.org/project/configuror/", "platform": "", "project_url": "https://pypi.org/project/configuror/", "project_urls": {"Bug Tracker": "https://github.com/lewoudar/configuror/issues", "Documentation": "https://configuror.readthedocs.io/en/stable/usage", "Homepage": "https://configuror.readthedocs.io/en/stable", "Repository": "https://github.com/lewoudar/configuror"}, "release_url": "https://pypi.org/project/configuror/0.1.2/", "requires_dist": ["toml (>=0.10.0,<0.11.0)", "pyyaml (>=5.2,<6.0)"], "requires_python": ">=3.6,<4.0", "summary": "A configuration management toolkit", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>configuror</h1>\n<p><a href=\"https://pypi.org/project/configuror/\" rel=\"nofollow\"><img alt=\"Pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d4bed4f6d6b7291c1006ad52b6f1602ffd2a384/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6e66696775726f722e737667\"></a>\n<a href=\"https://travis-ci.com/lewoudar/configuror\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9bf47828b17f0bbafb868559cafb41dc6c161abe/68747470733a2f2f7472617669732d63692e636f6d2f6c65776f756461722f636f6e66696775726f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/lewoudar/configuror\" rel=\"nofollow\"><img alt=\"Windows Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b312c81b0cd94ed78ae2094b44c6f3908876064c/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f6c65776f756461722f636f6e66696775726f722f6d61737465722e7376673f6c6162656c3d57696e646f7773\"></a>\n<a href=\"https://codecov.io/gh/lewoudar/configuror\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12e983a6d0c2dbb841da965e8bd3bc3e027592df/68747470733a2f2f636f6465636f762e696f2f67682f6c65776f756461722f636f6e66696775726f722f6272616e63682f6d61737465722f6772617068732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://configuror.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa9361e80854601e747490f9c5aa8857639981d4/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636f6e66696775726f722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\"><img alt=\"License Apache 2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53eae2bc16b4f1373ea0fc09c1b75dfd3cf52cf0/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f6c2f706c75672e737667\"></a></p>\n<p>Your configuration management toolkit!</p>\n<h2>Why?</h2>\n<p>While using <a href=\"http://flask.pocoo.org/docs/1.0/\" rel=\"nofollow\">Flask</a>, I realized that their Config class could be useful for any type\nof project. And the utility became more and more obvious to me when I looked at a project like\n<a href=\"https://docs.ansible.com/ansible/latest/index.html\" rel=\"nofollow\">Ansible</a>. If you look the\n<a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable\" rel=\"nofollow\">section</a>\nwhere they define variable precedence, you will notice that there may be several locations for the configuration files,\nand these configuration files can be written in different formats (json, yaml..).</p>\n<p>What if there was a simple tool that would aggregate information from different sources in the order you wanted? This\nis <strong>why</strong> the configuror project exists!</p>\n<h2>Installation</h2>\n<pre><span class=\"go\">pip install configuror</span>\n</pre>\n<p>configuror works starting from <strong>python 3.6</strong>. It has a few dependencies:</p>\n<ul>\n<li><a href=\"https://pypi.org/project/PyYAML/\" rel=\"nofollow\">pyyaml</a> &gt;= 5.1</li>\n<li><a href=\"https://pypi.org/project/toml/\" rel=\"nofollow\">toml</a></li>\n</ul>\n<h2>Documentation</h2>\n<p>The documentation is available at <a href=\"https://configuror.readthedocs.io/en/latest/\" rel=\"nofollow\">https://configuror.readthedocs.io/en/latest/</a>.</p>\n<h2>Usage</h2>\n<p>The main class provided by configuror is <code>Config</code>. It is an extension of a regular dict object. There are two main ways\nto initialize it.</p>\n<h3>Using mapping files</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configuror</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">mapping_files</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'ini'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'foo.ini'</span><span class=\"p\">,</span> <span class=\"s1\">'bar.ini'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'toml'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'foo.toml'</span><span class=\"p\">,</span> <span class=\"s1\">'bar.toml'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'python'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'/path/to/python/file'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">mapping_files</span><span class=\"o\">=</span><span class=\"n\">mapping_files</span><span class=\"p\">,</span> <span class=\"n\">ignore_file_absence</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can define a mapping of <code>file_type: &lt;files&gt;</code> where the <code>file_type</code> is the type of configuration file and <code>&lt;files&gt;</code>\nis the list of files from the lowest to the highest priority where values will be loaded.</p>\n<p>Since dictionaries are sorted starting from python3.6, the order of the keys is important as it will become the order of\nimportance of your files. For example in the example above, configuror will load values from files in the following order:</p>\n<ul>\n<li>foo.ini</li>\n<li>bar.ini</li>\n<li>foo.toml</li>\n<li>bar.toml</li>\n<li>/path/to/python/file</li>\n</ul>\n<p>For python files, only <strong>uppercase</strong> variables will be loaded.</p>\n<p>You will notice the keyword argument <code>ignore_file_absence</code> in <code>Config</code> class initialization. If it is set to <code>True</code>, all\nfiles that does not exist will not raised <code>FileNotFoundError</code>. It comes in handy when you want to retrieve variables\nfrom files <em>that may or may not potentially exist</em>. By default this parameter is set to <code>False</code>.</p>\n<p>File extension is not necessary when you use mapping files since the key is already telling which files we work with.\nThis is not the case with the second way to initialize <code>Config</code> class.</p>\n<h3>Using a list of files</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configuror</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'foo.yml'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bar.toml'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'foobar.json'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'/path/to/python/file'</span>\n    <span class=\"s1\">'.env'</span>\n<span class=\"p\">]</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">)</span>\n</pre>\n<p>In this second form of initialization, you pass a list of files you want to retrieve values from the lowest to the\nhighest priority. File extension is <strong>mandatory</strong> here to help configuror to load the files properly.</p>\n<p>To know file extensions supported by configuror, you can use the variable <code>EXTENSIONS</code>. it is a mapping\n<code>file_type: &lt;extensions&gt;</code> where <code>file_type</code> is a type of file supported like <em>yaml</em> and <code>extensions</code> is a list of\nrecognized extensions for this type of file, e.g: <code>[yml, yaml]</code></p>\n<p>Today the file types supported are <em>toml</em>, <em>yaml</em>, <em>dotenv</em>, <em>ini</em>, <em>python</em> and <em>json</em>.</p>\n<h3>Other usages</h3>\n<p>Since <code>Config</code> object is a dict-like object, you can pass arbitrary keyword arguments to initialize default values.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configuror</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">FOO</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">BAR</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>  <span class=\"c1\"># will print {'FOO': 2, 'BAR': 'a'}</span>\n</pre>\n<p>You can combine keyword arguments, mapping files and list of files at initialization. The order in which values will be\ninitialized is the following:</p>\n<ul>\n<li>values from keyword arguments</li>\n<li>values from mapping files</li>\n<li>values from list of files</li>\n</ul>\n<p>You can also add values from files after initialization. There are several practical methods for this:</p>\n<ul>\n<li>\n<p><code>load_from_mapping_files(self, mapping_files: Dict[str, List[str]], ignore_file_absence: bool)</code>: It is in fact the\nmethod used under the hood when you initialized <code>Config</code> object by passing the parameter <code>mapping_files</code>.</p>\n</li>\n<li>\n<p><code>load_from_files(self, files: List[str], ignore_file_absence: bool)</code>: It is the method used under the hood when you\ninitialized <code>Config</code> objects by passing the parameter <code>files</code>.</p>\n</li>\n<li>\n<p><code>load_from_object(self, obj: Union[Object, str])</code>: <code>obj</code> can be an object or a path to a project module\n(with dotted notation). Only uppercase attributes of the corresponding object will be retrieved.</p>\n</li>\n<li>\n<p><code>load_from_python_file(self, filename: str, ignore_file_absence: bool)</code>: Loads values from an arbitrary python\nfile. It would be preferable if it were not a file related to your project (i.e a module). Only uppercase variables\nare considered.</p>\n</li>\n<li>\n<p><code>load_from_json(self, filename: str, ignore_file_absence: bool)</code>: Loads values from a json file.</p>\n</li>\n<li>\n<p><code>load_from_yaml(self, filename: str, ignore_file_absence: bool)</code>: Loads values from a yaml file.</p>\n</li>\n<li>\n<p><code>load_from_toml(self, filenames: Union[str, List[str]], ignore_file_absence: bool)</code>: Loads values from a toml file\nor a list of toml files.</p>\n</li>\n<li>\n<p><code>load_from_ini(self, filenames: Union[str, List], ignore_file_absence: bool, interpolation_method: str = 'basic')</code>:\nLoads values from an ini file or a list of ini files. There are two interpolation methods that can be used: <strong>basic</strong>\nor <strong>extended</strong> like explained in the\n<a href=\"https://docs.python.org/3/library/configparser.html#interpolation-of-values\" rel=\"nofollow\">documentation</a>.</p>\n</li>\n<li>\n<p><code>load_from_dotenv(self, filename: str, ignore_file_absence: bool)</code>: Loads values from a dotenv file.</p>\n</li>\n</ul>\n<p>Bonus: You also have the <code>update</code> method of a dict to add/update values.</p>\n\n          </div>"}, "last_serial": 6399643, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e5f7b524dd96b32aa0c276098d8b823e", "sha256": "d322b6a052ce1a014953697e1500238a63cfa56c869d7663ae7d9c3114f0157b"}, "downloads": -1, "filename": "configuror-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e5f7b524dd96b32aa0c276098d8b823e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8637, "upload_time": "2019-05-14T22:02:48", "upload_time_iso_8601": "2019-05-14T22:02:48.180857Z", "url": "https://files.pythonhosted.org/packages/af/b7/dafda3a6d1e0952ece37e2e4597bec01b6dcc14e2b9c1afe570e1c4fcacd/configuror-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "119fcb3cb0d557c1fd50180c0b8962e4", "sha256": "d4af7ba3ade985c31012c0e57318220c6f27298c339325534c59a108a8be0357"}, "downloads": -1, "filename": "configuror-0.1.0.tar.gz", "has_sig": false, "md5_digest": "119fcb3cb0d557c1fd50180c0b8962e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8395, "upload_time": "2019-05-14T22:02:50", "upload_time_iso_8601": "2019-05-14T22:02:50.552772Z", "url": "https://files.pythonhosted.org/packages/5b/36/cfd4e49297a85b7027312f257790a4445b4b9a64da422228ee21bdbf2a67/configuror-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "db913ff83b746769ed8a27b31062c1e9", "sha256": "0cff41a3a5c9df92f6a7f256c3721c18559553fbd8302c4f4e3e82802503590b"}, "downloads": -1, "filename": "configuror-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "db913ff83b746769ed8a27b31062c1e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8890, "upload_time": "2019-05-14T22:46:57", "upload_time_iso_8601": "2019-05-14T22:46:57.696425Z", "url": "https://files.pythonhosted.org/packages/0a/b7/076d04cb3873070a88ea248680dec4643912db9fbc8c3920f93f0edbf6bf/configuror-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78e09654409c5772fc80ce64698497d6", "sha256": "4f646d97458306d8c7fee27f9f02ea50c7d9553eaf3fd812d0aa7bed779d10f1"}, "downloads": -1, "filename": "configuror-0.1.1.tar.gz", "has_sig": false, "md5_digest": "78e09654409c5772fc80ce64698497d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8692, "upload_time": "2019-05-14T22:46:59", "upload_time_iso_8601": "2019-05-14T22:46:59.217736Z", "url": "https://files.pythonhosted.org/packages/fe/63/2487f26615b8353a0e3ed77e417774614e85bda9f358c81ed1470cd672b3/configuror-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1e4ee15167abe9ff8ae112733872245e", "sha256": "18ba5086156c2e6adac0832bd94b81aab389732569c374ea295b969c64ec9dda"}, "downloads": -1, "filename": "configuror-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1e4ee15167abe9ff8ae112733872245e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8653, "upload_time": "2020-01-05T22:07:14", "upload_time_iso_8601": "2020-01-05T22:07:14.434918Z", "url": "https://files.pythonhosted.org/packages/ba/32/7a04ae5405c57e92f5f9afb99028618687d1c69639a68b01fc21b356c239/configuror-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25996f4bf361c68eaeba79f0cacf7632", "sha256": "310dde70099f0d4dc691375e55f43835382f6fd8633637945d2151a63d24f318"}, "downloads": -1, "filename": "configuror-0.1.2.tar.gz", "has_sig": false, "md5_digest": "25996f4bf361c68eaeba79f0cacf7632", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10095, "upload_time": "2020-01-05T22:07:15", "upload_time_iso_8601": "2020-01-05T22:07:15.561366Z", "url": "https://files.pythonhosted.org/packages/81/83/93f08d7299a61d104909198fbb1f55051eb7dffa7e86028e005befc4cfb3/configuror-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e4ee15167abe9ff8ae112733872245e", "sha256": "18ba5086156c2e6adac0832bd94b81aab389732569c374ea295b969c64ec9dda"}, "downloads": -1, "filename": "configuror-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1e4ee15167abe9ff8ae112733872245e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8653, "upload_time": "2020-01-05T22:07:14", "upload_time_iso_8601": "2020-01-05T22:07:14.434918Z", "url": "https://files.pythonhosted.org/packages/ba/32/7a04ae5405c57e92f5f9afb99028618687d1c69639a68b01fc21b356c239/configuror-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25996f4bf361c68eaeba79f0cacf7632", "sha256": "310dde70099f0d4dc691375e55f43835382f6fd8633637945d2151a63d24f318"}, "downloads": -1, "filename": "configuror-0.1.2.tar.gz", "has_sig": false, "md5_digest": "25996f4bf361c68eaeba79f0cacf7632", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10095, "upload_time": "2020-01-05T22:07:15", "upload_time_iso_8601": "2020-01-05T22:07:15.561366Z", "url": "https://files.pythonhosted.org/packages/81/83/93f08d7299a61d104909198fbb1f55051eb7dffa7e86028e005befc4cfb3/configuror-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:51 2020"}