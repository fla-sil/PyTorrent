{"info": {"author": "Rock Lee", "author_email": "insfocus@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha"], "description": "# Guava [![Build Status](https://travis-ci.org/flatpeach/guava.svg)](https://travis-ci.org/flatpeach/guava)\r\n\r\nGuava is a super lightweight and high performance web framework for Python written in C. It is totally different with other traditional Python web frameworks. Keep in mind, this project is not to revent the wheel.\r\n\r\nIf you don't like the features Guava supplied, you can use the underlying structures like **router**, **session**, **request**, **response**, **builtin web server** to construct your own web framework with the benifits of high performance which guava gives you.\r\n\r\nI wrote an article to explain a little bit of the design of the guava framework, [Link](http://code-trick.com/guava-a-super-lightweight-high-performance-web-framework-for-python-written-in-c/).\r\n\r\n\r\n## Status\r\n\r\n1. Under highly active development. \r\n2. Haven't release any stable versions, this git repo is the **Developer Preview Version**. Donot use it for production now.\r\n\r\nI will release the stable version ASAP. I will also release the traditional web applications built on top of guava.\r\n\r\nAnyways, you can evaluate it, hack it in advance. Don't forget to star it if you think guava can help you in the future. :)\r\n\r\nIf you want to contribute, please see the contribution section.\r\n\r\nI will try my best to keep this README.md up to date, any time it's better if you can read the source codes.\r\n\r\n\r\n## Philosophy of Guava\r\n\r\nFor the detailed story and design of the Guava project, please go to [My Blog](http://www.code-trick.com).\r\n\r\n1. High performance\r\n2. Prefer convention over configuration\r\n3. Lightweight, only do what one web framework should do\r\n4. Super scalability\r\n\r\n\r\n## Main Features\r\n\r\n1. Asynchorous, build on top of libuv\r\n2. Builtin HTTP webserver\r\n3. Builtin routers: Router, StaticRouter, MVCRouter, RESTFulRouter\r\n4. Session Management: InMemory, Local FileSystem, Remote(SSO)\r\n5. Everything is extensible\r\n\r\n\r\n## Performance\r\n\r\n\r\nI did a quick performance testing, all codes are stored in **benchmark** folder.\r\n\r\nIf anything is not correct, please kindly to correct me. \r\n\r\n\r\n**Testing Environment**\r\n\r\nEC2: t2.micro 1CPU 0.613GIB EBS\r\n\r\nOS: Ubuntu14.04\r\n\r\nBenchmark program: [wrk](https://github.com/wg/wrk)\r\n\r\n\r\n1. Helloworld Performance\r\n\r\nCommand: ```wrk -t12 -c400 -d30s http://127.0.0.1:8000/```\r\n\r\nThis runs a benchmark for 30 seconds, using 12 threads, and keeping 400 HTTP connections open.\r\n\r\nAlready disabled al\r\n\r\n| Framework |  Requests/s | Explaination |\r\n| --------- | ----------- | ------------ |\r\n| Flask     |  595.73 | Actually failed to run the full testing, lots of broken pipe |\r\n| CherryPy  |  1627.68 |\r\n| Tornado   |  3373.22 |\r\n| NodeJS Raw |  4977.63 |\r\n| Go Raw |  20230.32 |\r\n| guava     |  18799.11 | Memory Leak |\r\n\r\n\r\nThe reason why this time of testing guava didn't win Go is due to some known but unfixed bugs in guava, I will fix that soon and rerun the testing.\r\n\r\nAfter I finished basic features, I will focus on the optimization part, continously to improve the performance. To be honest, there're lots of places in guava could be optimized.\r\n\r\n\r\n## Deployment\r\n\r\n\r\n### Deploy behind of Nginx/Apache\r\n\r\n\r\n```\r\n------------                                ----------------------\r\n| WebServer | <<-- Reversed Proxy Rule -->> | Guava HTTP Server |\r\n------------                                ----------------------\r\n```\r\n\r\n### No Nginx/Apache\r\n\r\nThe performance of the Guava builtin web server is good enough for serving as the standalone web server. But till now I haven't spend so much time on the security part, so maybe it's not the best time to choose this kind of deployment.\r\n\r\n\r\n## Router\r\n\r\n\r\nGuava has four builtin routers trying to simplify your life. For detailed documentation, please refer to the doc directory in this repo.\r\n\r\nEach router has one mount point. All routers will composite the tree like structures. The concept of mount point is for you easily group you sub applications.\r\n\r\n### StaticRouter\r\n\r\nStaticRouter is dedicated for serving static resources, for example: css, javascript files or images.\r\n\r\n\r\n```\r\nstatic_router = guava.router.StaticRouter(mount_point=\"/static\",\r\n                                          directory=\"my_static_dir\",\r\n                                          allow_index=True)\r\n```\r\n\r\n### MVCRouter\r\n\r\nThis could be set as the default router, if your application is such a typical one.\r\n\r\n```\r\nmvc_router = guava.router.MVCRouter(mount_point=\"/\")\r\n```\r\n\r\nFor exmaple:\r\n\r\n|       URL      |     Package       | Module | Action |  Args  |  GET  | POST |\r\n| -------------- | ----------------- | ------ | ------ | ------ | ----- | ---- |\r\n| /              | controllers       | index  | index  | ()     | {}    | {}   |\r\n| /post          | controllers       | post   | index  | ()     | {}    | {}   |\r\n| /post/new      | controllers       | post   | new    | ()     | {}    | {}   |\r\n| /post/view/10   | controllers       | post   | view   | ('10',)  | {}  | {}  |\r\n| /post/move/10/20 | controllers     | post   | move   | ('10', '20',) | {} | {} |\r\n| /post/edit/10?type=draft | controllers | post | edit | ('10', ) | {'type': 'draft'} | {} |\r\n\r\n\r\n### RESTRouter\r\n\r\nThis router is especially useful if you want to supply the RESTFul apis.\r\n\r\n| Method | URL | Class | Action |\r\n| ------ | --- | ----- | ------ |\r\n| GET    | /users | UsersController | get_all |\r\n| GET  | /users/10 | UsersController | get_one |\r\n| DELETE | /users/10 | UsersController | delete_one |\r\n| POST | /users/ | UsersController | create_one |\r\n| PUT | /users/10 | UsersController | update_one |\r\n\r\n**I havn't thought the best way to handler subresource like this kind of urls ```/users/10/friends/```, after I get a better idea, I will integrate with this feature soon.**\r\n\r\n### Customerize or implement advanced router\r\n\r\nIf above routers can not match all of your requirements, you can use CustomRouter to build or overwrite complex routes\r\n\r\n```\r\ncustom_router = guava.router.Router({\r\n\t\"/about\": guava.handler.Handler(package='.',\r\n                                    module='misc',\r\n                                    controller='MiscController',\r\n                                    action='about')\r\n})\r\n```\r\n\r\n\r\n```\r\nclass MySpecialRouter(guava.router.Router):\r\n\r\n    def __init__(self):\r\n\t\tself.register('/hello',\r\n\t\t              guava.handler.Handler(package='.',\r\n                                            module='misc',\r\n                                            controller='MiscController',\r\n                                            action='hello'))\r\n\r\n\tdef route(self, req):\r\n\t\tif req.path == '/me' and req.GET['name'] == 'rock':\r\n\t\t\treturn guava.handler.Handler(package='.',\r\n                                         module='me',\r\n                                         controller='MeController',\r\n                                         action='show')\r\n\r\n\t\treturn None\r\n\r\n```\r\n\r\n\r\n## Controller\r\n\r\nAll your controllers should inherit from ```guava.controller.Controller```.\r\n\r\n\r\n\r\n## Session\r\n\r\nGuava already builtin two kinds of Session store solutions, one is in memory store, the other is file based store. If you want to support SSO and try to store session in MC, Redis or databases, you need to create a new class inherited from the builtin session store.\r\n\r\n### InMemory Store\r\n\r\nThis is specially useful for debugging purpose. Each time you restarted the guava web server, all data in this kind of session store will be dropped.\r\n\r\n```\r\nsession_store = guava.session.SessionStore(type=guava.session.Mem)\r\n```\r\n\r\n\r\n### File Based Store\r\n\r\n\r\n```\r\nsession_store = guava.session.SessionStore(type=guava.session.File)\r\n```\r\n\r\n### Custom the Session Store\r\n\r\nIf you want to implement the SSO, you need the central based session storage solution by using Redis, memcache, database or other brokers to store the session data.\r\n\r\n```\r\nclass RedisSessionStore(guava.session.SessionStore):\r\n\r\n    def __init__(self, *args, **kwargs)):\r\n        super(MySessionStore, self).__init__(*args, **kwargs)\r\n\r\n\tdef set(self, sid, value):\r\n        pass\r\n\r\n\tdef get(self, sid):\r\n        pass\r\n\r\n\tdef delete(self, sid):\r\n        pass\r\n\r\n\tdef clear(self, sid):\r\n        pass\r\n\r\n```\r\n\r\nYou need to implement the four placeholder functions to build your own session store solution.\r\n\r\n\r\n## Dependencies\r\n\r\nProject | Description\r\n----- | --------------------------------------\r\nlibuv | Cross-platform asychronous I/O library\r\nhttp-parser | http request/response parser for c\r\n\r\n\r\n## Install\r\n\r\n### Install from Git\r\n\r\n```sudo python setup.py install```\r\n\r\nRun tests: ```python -m unittest discover```\r\n\r\n\r\n### Install from github using pip\r\n\r\n```sudo pip install -e git+https://github.com/flatpeach/guava.git#egg=guava```\r\n\r\n\r\n## Quick Usage Tricks\r\n\r\n1. Launch a web server at current directory\r\n\r\n    ```python -c 'import guava; guava.server.start_static_server()'```\r\n\r\n    It's the same as\r\n\r\n    ```python -m SimpleHTTPServer```\r\n\r\n\r\n## Performance\r\n\r\nPlease see my blog.\r\n\r\n\r\n## Acknowledgements\r\n\r\n\r\n1. [Jim Baker](https://github.com/jimbaker)\r\n\r\n   Thanks for transfer the ownership of the name \"guava\" in PyPI. \r\n\r\n\r\n## Contributions\r\n\r\nTo me, all kinds of contributions are welcome.\r\n\r\n1. Contribute to the core codes\r\n2. Testcases\r\n3. Examples\r\n4. Documentation\r\n5. Website or the Logo for the Guava project\r\n6. Even request for new features!", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/flatpeach/guava/tarball/v0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/flatpeach/guava", "keywords": "guava", "license": "BSD", "maintainer": "Rock Lee", "maintainer_email": "insfocus@gmail.com", "name": "guava", "package_url": "https://pypi.org/project/guava/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/guava/", "project_urls": {"Download": "https://github.com/flatpeach/guava/tarball/v0.1", "Homepage": "https://github.com/flatpeach/guava"}, "release_url": "https://pypi.org/project/guava/0.1/", "requires_dist": null, "requires_python": null, "summary": "Guava - A super lightweight and high performance web framework for Python", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Guava [![Build Status](https://travis-ci.org/flatpeach/guava.svg)](https://travis-ci.org/flatpeach/guava)\n<br>\n<br>Guava is a super lightweight and high performance web framework for Python written in C. It is totally different with other traditional Python web frameworks. Keep in mind, this project is not to revent the wheel.\n<br>\n<br>If you don't like the features Guava supplied, you can use the underlying structures like **router**, **session**, **request**, **response**, **builtin web server** to construct your own web framework with the benifits of high performance which guava gives you.\n<br>\n<br>I wrote an article to explain a little bit of the design of the guava framework, [Link](http://code-trick.com/guava-a-super-lightweight-high-performance-web-framework-for-python-written-in-c/).\n<br>\n<br>\n<br>## Status\n<br>\n<br>1. Under highly active development. \n<br>2. Haven't release any stable versions, this git repo is the **Developer Preview Version**. Donot use it for production now.\n<br>\n<br>I will release the stable version ASAP. I will also release the traditional web applications built on top of guava.\n<br>\n<br>Anyways, you can evaluate it, hack it in advance. Don't forget to star it if you think guava can help you in the future. :)\n<br>\n<br>If you want to contribute, please see the contribution section.\n<br>\n<br>I will try my best to keep this README.md up to date, any time it's better if you can read the source codes.\n<br>\n<br>\n<br>## Philosophy of Guava\n<br>\n<br>For the detailed story and design of the Guava project, please go to [My Blog](http://www.code-trick.com).\n<br>\n<br>1. High performance\n<br>2. Prefer convention over configuration\n<br>3. Lightweight, only do what one web framework should do\n<br>4. Super scalability\n<br>\n<br>\n<br>## Main Features\n<br>\n<br>1. Asynchorous, build on top of libuv\n<br>2. Builtin HTTP webserver\n<br>3. Builtin routers: Router, StaticRouter, MVCRouter, RESTFulRouter\n<br>4. Session Management: InMemory, Local FileSystem, Remote(SSO)\n<br>5. Everything is extensible\n<br>\n<br>\n<br>## Performance\n<br>\n<br>\n<br>I did a quick performance testing, all codes are stored in **benchmark** folder.\n<br>\n<br>If anything is not correct, please kindly to correct me. \n<br>\n<br>\n<br>**Testing Environment**\n<br>\n<br>EC2: t2.micro 1CPU 0.613GIB EBS\n<br>\n<br>OS: Ubuntu14.04\n<br>\n<br>Benchmark program: [wrk](https://github.com/wg/wrk)\n<br>\n<br>\n<br>1. Helloworld Performance\n<br>\n<br>Command: ```wrk -t12 -c400 -d30s http://127.0.0.1:8000/```\n<br>\n<br>This runs a benchmark for 30 seconds, using 12 threads, and keeping 400 HTTP connections open.\n<br>\n<br>Already disabled al\n<br>\n<br>| Framework |  Requests/s | Explaination |\n<br>| --------- | ----------- | ------------ |\n<br>| Flask     |  595.73 | Actually failed to run the full testing, lots of broken pipe |\n<br>| CherryPy  |  1627.68 |\n<br>| Tornado   |  3373.22 |\n<br>| NodeJS Raw |  4977.63 |\n<br>| Go Raw |  20230.32 |\n<br>| guava     |  18799.11 | Memory Leak |\n<br>\n<br>\n<br>The reason why this time of testing guava didn't win Go is due to some known but unfixed bugs in guava, I will fix that soon and rerun the testing.\n<br>\n<br>After I finished basic features, I will focus on the optimization part, continously to improve the performance. To be honest, there're lots of places in guava could be optimized.\n<br>\n<br>\n<br>## Deployment\n<br>\n<br>\n<br>### Deploy behind of Nginx/Apache\n<br>\n<br>\n<br>```\n<br>------------                                ----------------------\n<br>| WebServer | &lt;&lt;-- Reversed Proxy Rule --&gt;&gt; | Guava HTTP Server |\n<br>------------                                ----------------------\n<br>```\n<br>\n<br>### No Nginx/Apache\n<br>\n<br>The performance of the Guava builtin web server is good enough for serving as the standalone web server. But till now I haven't spend so much time on the security part, so maybe it's not the best time to choose this kind of deployment.\n<br>\n<br>\n<br>## Router\n<br>\n<br>\n<br>Guava has four builtin routers trying to simplify your life. For detailed documentation, please refer to the doc directory in this repo.\n<br>\n<br>Each router has one mount point. All routers will composite the tree like structures. The concept of mount point is for you easily group you sub applications.\n<br>\n<br>### StaticRouter\n<br>\n<br>StaticRouter is dedicated for serving static resources, for example: css, javascript files or images.\n<br>\n<br>\n<br>```\n<br>static_router = guava.router.StaticRouter(mount_point=\"/static\",\n<br>                                          directory=\"my_static_dir\",\n<br>                                          allow_index=True)\n<br>```\n<br>\n<br>### MVCRouter\n<br>\n<br>This could be set as the default router, if your application is such a typical one.\n<br>\n<br>```\n<br>mvc_router = guava.router.MVCRouter(mount_point=\"/\")\n<br>```\n<br>\n<br>For exmaple:\n<br>\n<br>|       URL      |     Package       | Module | Action |  Args  |  GET  | POST |\n<br>| -------------- | ----------------- | ------ | ------ | ------ | ----- | ---- |\n<br>| /              | controllers       | index  | index  | ()     | {}    | {}   |\n<br>| /post          | controllers       | post   | index  | ()     | {}    | {}   |\n<br>| /post/new      | controllers       | post   | new    | ()     | {}    | {}   |\n<br>| /post/view/10   | controllers       | post   | view   | ('10',)  | {}  | {}  |\n<br>| /post/move/10/20 | controllers     | post   | move   | ('10', '20',) | {} | {} |\n<br>| /post/edit/10?type=draft | controllers | post | edit | ('10', ) | {'type': 'draft'} | {} |\n<br>\n<br>\n<br>### RESTRouter\n<br>\n<br>This router is especially useful if you want to supply the RESTFul apis.\n<br>\n<br>| Method | URL | Class | Action |\n<br>| ------ | --- | ----- | ------ |\n<br>| GET    | /users | UsersController | get_all |\n<br>| GET  | /users/10 | UsersController | get_one |\n<br>| DELETE | /users/10 | UsersController | delete_one |\n<br>| POST | /users/ | UsersController | create_one |\n<br>| PUT | /users/10 | UsersController | update_one |\n<br>\n<br>**I havn't thought the best way to handler subresource like this kind of urls ```/users/10/friends/```, after I get a better idea, I will integrate with this feature soon.**\n<br>\n<br>### Customerize or implement advanced router\n<br>\n<br>If above routers can not match all of your requirements, you can use CustomRouter to build or overwrite complex routes\n<br>\n<br>```\n<br>custom_router = guava.router.Router({\n<br>\t\"/about\": guava.handler.Handler(package='.',\n<br>                                    module='misc',\n<br>                                    controller='MiscController',\n<br>                                    action='about')\n<br>})\n<br>```\n<br>\n<br>\n<br>```\n<br>class MySpecialRouter(guava.router.Router):\n<br>\n<br>    def __init__(self):\n<br>\t\tself.register('/hello',\n<br>\t\t              guava.handler.Handler(package='.',\n<br>                                            module='misc',\n<br>                                            controller='MiscController',\n<br>                                            action='hello'))\n<br>\n<br>\tdef route(self, req):\n<br>\t\tif req.path == '/me' and req.GET['name'] == 'rock':\n<br>\t\t\treturn guava.handler.Handler(package='.',\n<br>                                         module='me',\n<br>                                         controller='MeController',\n<br>                                         action='show')\n<br>\n<br>\t\treturn None\n<br>\n<br>```\n<br>\n<br>\n<br>## Controller\n<br>\n<br>All your controllers should inherit from ```guava.controller.Controller```.\n<br>\n<br>\n<br>\n<br>## Session\n<br>\n<br>Guava already builtin two kinds of Session store solutions, one is in memory store, the other is file based store. If you want to support SSO and try to store session in MC, Redis or databases, you need to create a new class inherited from the builtin session store.\n<br>\n<br>### InMemory Store\n<br>\n<br>This is specially useful for debugging purpose. Each time you restarted the guava web server, all data in this kind of session store will be dropped.\n<br>\n<br>```\n<br>session_store = guava.session.SessionStore(type=guava.session.Mem)\n<br>```\n<br>\n<br>\n<br>### File Based Store\n<br>\n<br>\n<br>```\n<br>session_store = guava.session.SessionStore(type=guava.session.File)\n<br>```\n<br>\n<br>### Custom the Session Store\n<br>\n<br>If you want to implement the SSO, you need the central based session storage solution by using Redis, memcache, database or other brokers to store the session data.\n<br>\n<br>```\n<br>class RedisSessionStore(guava.session.SessionStore):\n<br>\n<br>    def __init__(self, *args, **kwargs)):\n<br>        super(MySessionStore, self).__init__(*args, **kwargs)\n<br>\n<br>\tdef set(self, sid, value):\n<br>        pass\n<br>\n<br>\tdef get(self, sid):\n<br>        pass\n<br>\n<br>\tdef delete(self, sid):\n<br>        pass\n<br>\n<br>\tdef clear(self, sid):\n<br>        pass\n<br>\n<br>```\n<br>\n<br>You need to implement the four placeholder functions to build your own session store solution.\n<br>\n<br>\n<br>## Dependencies\n<br>\n<br>Project | Description\n<br>----- | --------------------------------------\n<br>libuv | Cross-platform asychronous I/O library\n<br>http-parser | http request/response parser for c\n<br>\n<br>\n<br>## Install\n<br>\n<br>### Install from Git\n<br>\n<br>```sudo python setup.py install```\n<br>\n<br>Run tests: ```python -m unittest discover```\n<br>\n<br>\n<br>### Install from github using pip\n<br>\n<br>```sudo pip install -e git+https://github.com/flatpeach/guava.git#egg=guava```\n<br>\n<br>\n<br>## Quick Usage Tricks\n<br>\n<br>1. Launch a web server at current directory\n<br>\n<br>    ```python -c 'import guava; guava.server.start_static_server()'```\n<br>\n<br>    It's the same as\n<br>\n<br>    ```python -m SimpleHTTPServer```\n<br>\n<br>\n<br>## Performance\n<br>\n<br>Please see my blog.\n<br>\n<br>\n<br>## Acknowledgements\n<br>\n<br>\n<br>1. [Jim Baker](https://github.com/jimbaker)\n<br>\n<br>   Thanks for transfer the ownership of the name \"guava\" in PyPI. \n<br>\n<br>\n<br>## Contributions\n<br>\n<br>To me, all kinds of contributions are welcome.\n<br>\n<br>1. Contribute to the core codes\n<br>2. Testcases\n<br>3. Examples\n<br>4. Documentation\n<br>5. Website or the Logo for the Guava project\n<br>6. Even request for new features!\n          </div>"}, "last_serial": 1156926, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d7087dc5df92320f1762e78543afb3ee", "sha256": "7afc9379464faf5fae510e9a3b3311b1078b8e16e8d59244b66a1d3524cdfee3"}, "downloads": -1, "filename": "guava-0.1.tar.gz", "has_sig": false, "md5_digest": "d7087dc5df92320f1762e78543afb3ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1817694, "upload_time": "2014-07-14T08:32:50", "upload_time_iso_8601": "2014-07-14T08:32:50.004491Z", "url": "https://files.pythonhosted.org/packages/8b/49/0f5c3182e6b489035584eedcee0758ed13b03eab13ffb0e908052f337fc2/guava-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7087dc5df92320f1762e78543afb3ee", "sha256": "7afc9379464faf5fae510e9a3b3311b1078b8e16e8d59244b66a1d3524cdfee3"}, "downloads": -1, "filename": "guava-0.1.tar.gz", "has_sig": false, "md5_digest": "d7087dc5df92320f1762e78543afb3ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1817694, "upload_time": "2014-07-14T08:32:50", "upload_time_iso_8601": "2014-07-14T08:32:50.004491Z", "url": "https://files.pythonhosted.org/packages/8b/49/0f5c3182e6b489035584eedcee0758ed13b03eab13ffb0e908052f337fc2/guava-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:27 2020"}