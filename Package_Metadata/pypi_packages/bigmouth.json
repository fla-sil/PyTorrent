{"info": {"author": "Djerd Flanagan", "author_email": "gflanagan@devopsni.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "################\ndjango-bigmouth\n################\n\n``django-bigmouth`` provides a `Django`_ interface to the `Pelican`_ static blog\ngenerator.\n\nIntroduction\n============\n\nWhat?\n-----\n\nA Django app that provides a management command (``run_pelican``) that acts as\na thin facade over the `Pelican`_ blog generation process, together with various\ntemplatetags to assist with custom template creation, and the ability to preview\nthe blog via the development server and Django flatpages.\n\nWhy?\n----\n\nYou might use ``bigmouth`` rather than `Pelican`_ itself if you have an existing\ndynamic Django app to which you want to add a static blog while making use of\nyour app's templating and static file setup, or if you simply prefer Django\ntemplates to Jinja templates.\n\n\n\nQuickstart - running the example project\n========================================\n\nIt is assumed that everything that is required to run Python and Django is\ninstalled on your system. We also assume a unix/BSD system, but a windows\nsetup shouldn't be too dissimilar to what follows.\n\nSource\n------\n\nFirst get the source, for example::\n\n    pip install bigmouth --download=.\n\nor the latest version::\n\n    git clone ssh://git@github.com/devopsni/django-bigmouth.git\n\nBuildout\n--------\n\nIn the root directory of the files just downloaded, run the ``bootstrap.py`` file::\n\n    python bootstrap.py\n\nThis should create, among other things, a local ``bin`` directory. Now you should\nrun the ``bin/buildout`` script, but if you are familiar with buildout you\nmight want to look at the buildout.cfg file and update as required. The\n``eggs-directory`` settings is set to ``../eggs``, ie. a sibling rather than a\nchild of the current directory.\n\nSo now run::\n\n    ./bin/buildout\n\nand this should initialize a local sandboxed environment. In particular,\n``bigmouth`` depends on the latest `Pelican`_ and this will have been cloned\nfrom github to the ``develop-src`` directory.\n\nIf all went well, running::\n\n    ./bin/django\n\nshould print a list of available management commands and these should include\na command called ``run_pelican``.\n\nDatabase\n--------\n\nBefore you can create the example blog, you have to create a database and\nconfigure the Django settings file appropriately. This is the standard Django\ndatabase setup step for which the Django docs provide all the info you need.\nIt's the DATABASES parameter in the ``bigmouth_example/settings.py`` which need\nto be changed to match the database you create.\n\nIf you are using postgresql you could look at the included ``pgreset`` script.\nThis is a utlity shell script which will create a postgresql database and user.\nFor example::\n\n    pushd bigmouth_example/etc/postgres\n    ./pgreset\n    popd\n\nor, depending on your postgresql configuration::\n\n    sudo -u postgres ./pgreset\n\nOn completion, ``pgreset`` will print the required DATABASES setting which you\ncan then copy and paste to the settings file.\n\nOnce the database is created and configured, run the ``syncdb`` management command::\n\n    ./bin/django syncdb\n\nNote, that a database isn't strictly required if you pass ``--no-flatpages`` as\na parameter to the ``run_pelican`` command (and you are not interested in previewing\nthe files via the development server), but a database is recommended and could well\nbecome a requirement at some point.\n\n\nmkblog\n------\n\nNow you are ready to create the example blog application and the easiest way is\nto run the ``mkblog`` utility which simply wraps the call to the ``run_pelican``\ncommand::\n\n    ./mkblog\n\nand then view the blog by running::\n\n    ./bin/django runserver\n\nand visiting http://127.0.0.1:8000/ .\n\n\n.. _Pelican: http://readthedocs.org/docs/pelican/en/latest/\n.. _Django: https://www.djangoproject.com/", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/packages/source/b/bigmouth/bigmouth-0.1.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/devopsni/django-bigmouth", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "bigmouth", "package_url": "https://pypi.org/project/bigmouth/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bigmouth/", "project_urls": {"Download": "http://pypi.python.org/packages/source/b/bigmouth/bigmouth-0.1.3.tar.gz", "Homepage": "https://github.com/devopsni/django-bigmouth"}, "release_url": "https://pypi.org/project/bigmouth/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Django interface to the Pelican static blog generator.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt><span class=\"pre\">django-bigmouth</span></tt> provides a <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> interface to the <a href=\"http://readthedocs.org/docs/pelican/en/latest/\" rel=\"nofollow\">Pelican</a> static blog\ngenerator.</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<div id=\"what\">\n<h3>What?</h3>\n<p>A Django app that provides a management command (<tt>run_pelican</tt>) that acts as\na thin facade over the <a href=\"http://readthedocs.org/docs/pelican/en/latest/\" rel=\"nofollow\">Pelican</a> blog generation process, together with various\ntemplatetags to assist with custom template creation, and the ability to preview\nthe blog via the development server and Django flatpages.</p>\n</div>\n<div id=\"why\">\n<h3>Why?</h3>\n<p>You might use <tt>bigmouth</tt> rather than <a href=\"http://readthedocs.org/docs/pelican/en/latest/\" rel=\"nofollow\">Pelican</a> itself if you have an existing\ndynamic Django app to which you want to add a static blog while making use of\nyour app\u2019s templating and static file setup, or if you simply prefer Django\ntemplates to Jinja templates.</p>\n</div>\n</div>\n<div id=\"quickstart-running-the-example-project\">\n<h2>Quickstart - running the example project</h2>\n<p>It is assumed that everything that is required to run Python and Django is\ninstalled on your system. We also assume a unix/BSD system, but a windows\nsetup shouldn\u2019t be too dissimilar to what follows.</p>\n<div id=\"source\">\n<h3>Source</h3>\n<p>First get the source, for example:</p>\n<pre>pip install bigmouth --download=.\n</pre>\n<p>or the latest version:</p>\n<pre>git clone ssh://git@github.com/devopsni/django-bigmouth.git\n</pre>\n</div>\n<div id=\"buildout\">\n<h3>Buildout</h3>\n<p>In the root directory of the files just downloaded, run the <tt>bootstrap.py</tt> file:</p>\n<pre>python bootstrap.py\n</pre>\n<p>This should create, among other things, a local <tt>bin</tt> directory. Now you should\nrun the <tt>bin/buildout</tt> script, but if you are familiar with buildout you\nmight want to look at the buildout.cfg file and update as required. The\n<tt><span class=\"pre\">eggs-directory</span></tt> settings is set to <tt><span class=\"pre\">../eggs</span></tt>, ie. a sibling rather than a\nchild of the current directory.</p>\n<p>So now run:</p>\n<pre>./bin/buildout\n</pre>\n<p>and this should initialize a local sandboxed environment. In particular,\n<tt>bigmouth</tt> depends on the latest <a href=\"http://readthedocs.org/docs/pelican/en/latest/\" rel=\"nofollow\">Pelican</a> and this will have been cloned\nfrom github to the <tt><span class=\"pre\">develop-src</span></tt> directory.</p>\n<p>If all went well, running:</p>\n<pre>./bin/django\n</pre>\n<p>should print a list of available management commands and these should include\na command called <tt>run_pelican</tt>.</p>\n</div>\n<div id=\"database\">\n<h3>Database</h3>\n<p>Before you can create the example blog, you have to create a database and\nconfigure the Django settings file appropriately. This is the standard Django\ndatabase setup step for which the Django docs provide all the info you need.\nIt\u2019s the DATABASES parameter in the <tt>bigmouth_example/settings.py</tt> which need\nto be changed to match the database you create.</p>\n<p>If you are using postgresql you could look at the included <tt>pgreset</tt> script.\nThis is a utlity shell script which will create a postgresql database and user.\nFor example:</p>\n<pre>pushd bigmouth_example/etc/postgres\n./pgreset\npopd\n</pre>\n<p>or, depending on your postgresql configuration:</p>\n<pre>sudo -u postgres ./pgreset\n</pre>\n<p>On completion, <tt>pgreset</tt> will print the required DATABASES setting which you\ncan then copy and paste to the settings file.</p>\n<p>Once the database is created and configured, run the <tt>syncdb</tt> management command:</p>\n<pre>./bin/django syncdb\n</pre>\n<p>Note, that a database isn\u2019t strictly required if you pass <tt><span class=\"pre\">--no-flatpages</span></tt> as\na parameter to the <tt>run_pelican</tt> command (and you are not interested in previewing\nthe files via the development server), but a database is recommended and could well\nbecome a requirement at some point.</p>\n</div>\n<div id=\"mkblog\">\n<h3>mkblog</h3>\n<p>Now you are ready to create the example blog application and the easiest way is\nto run the <tt>mkblog</tt> utility which simply wraps the call to the <tt>run_pelican</tt>\ncommand:</p>\n<pre>./mkblog\n</pre>\n<p>and then view the blog by running:</p>\n<pre>./bin/django runserver\n</pre>\n<p>and visiting <a href=\"http://127.0.0.1:8000/\" rel=\"nofollow\">http://127.0.0.1:8000/</a> .</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 786851, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "7688847a3c2945906cadedc9224279cd", "sha256": "41e5068df197cf485672734bfdb584cb40818fae3dd119684fa5ad2a5fa7d43e"}, "downloads": -1, "filename": "bigmouth-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7688847a3c2945906cadedc9224279cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56014, "upload_time": "2012-01-31T14:43:02", "upload_time_iso_8601": "2012-01-31T14:43:02.648192Z", "url": "https://files.pythonhosted.org/packages/99/1b/cd72b05ebb410d156ac9a23a8f0e78ded23114534025ab43877c99b3f1ed/bigmouth-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "a0705afe912cf95b33fb563041860848", "sha256": "86d95cf3d25034f23ee27b04c84d75afd7b39103fbdeee903f375bca67a57e45"}, "downloads": -1, "filename": "bigmouth-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a0705afe912cf95b33fb563041860848", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32915, "upload_time": "2012-02-06T07:54:19", "upload_time_iso_8601": "2012-02-06T07:54:19.720875Z", "url": "https://files.pythonhosted.org/packages/52/42/18f428f7ddc7a4d6f7bf99b4ceed80b56e317f0d7048f4ca43775043be5e/bigmouth-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0705afe912cf95b33fb563041860848", "sha256": "86d95cf3d25034f23ee27b04c84d75afd7b39103fbdeee903f375bca67a57e45"}, "downloads": -1, "filename": "bigmouth-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a0705afe912cf95b33fb563041860848", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32915, "upload_time": "2012-02-06T07:54:19", "upload_time_iso_8601": "2012-02-06T07:54:19.720875Z", "url": "https://files.pythonhosted.org/packages/52/42/18f428f7ddc7a4d6f7bf99b4ceed80b56e317f0d7048f4ca43775043be5e/bigmouth-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:34 2020"}