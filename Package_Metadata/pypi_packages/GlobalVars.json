{"info": {"author": "Matheus Menezes Almeida", "author_email": "mrotame@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# GlobalVars\n A way to implement global vars between classes using the environment variable `\"os.environ\"`\n \n### Last updates\n* Added a function to clear all setted vars `clearAllVars` and `getAllVars`. See the new functionalities in methods and methods exemples\n* Last update now adds dunders `setitem`, `getitem` and `len` making the class work as a dictionary.\nsee the funcionalities in methods exemples `setOrUpdateVar`, `getVar`, and `getAllVars`\n\n## Importing\n``` \nfrom globalVars import GlobalVars;\ngv = GlobalVars()\n```\n\n## Methods\nThis class has five classes to be used:\n\n* getAllVars\n\t* Description: return all vars setted in the environment\n\t* Params: no params needed\n* clearAllVars\n\t* Description: Delete all vars already setted\n\t* Params: no params needed\n* setVar\n\t* Description: Set a new variable\n\t* Params: Accepts a `Dictionary` with `'Name':Value` containing one or more vars to add \n* getVar\n\t* Description: Get a setted variable\n\t* Params: Accepts a `String` with `'Name'` containing the name of a var\n* removeVar \n\t* Description: Remove a variable\n\t* Params: accepts a `String`with `'Name'` or a `List` with \"[Name1,Name2,...] containing one or more names of vars to remove\n* updateVar\n\t* Description: Update a variable\n\t* Params: accepts a `Dictionary` with `{'Name':Value,...}` containing one or more vars to update\n* setOrUpdateVar\n\t* Description: set a new variable or update it if already exists\n\t* Params: accepts a `Dictionary` with `{'Name':Value,...}` containing one or more vars to set or update\n\n\n### Methods Examples\n*Remember that you imported `GlobalVars` as `\"gv\"`\n### getAllVars()\n```\n# Store all already setted vars in a local variable\nmyVars = gv.getAllVars()\n\n# Print all the environment setted vars\nprint(gv.getAllVars())\n\n# If you want to now how many vars are setted you can use len()\nlen(gv)\n```\n### clearAllVars()\n```\n# Set a new var\ngv.setVar({\"test\":\"hello\"})\n\n# Clear all the vars setted\ngv.clearAllVars()\n\n# It will return an empty dictionary \"{}\"\ngv.getAllVars()\n```\n\n#### setVar()\n```\n# Will be setted two vars: \"foo\" with value \"bar\" and \"eggs\" with value 16\ngv.setVar({\"foo\":\"bar\",\"eggs\":16}) \n\n# The \"foo\" var will be setted with a \"bar\" value\ngv.setVar({\"foo\":\"bar\"}) \n```\n\n#### getVar()\n```\n# Result var will be the value in \"foo\"\nresult = gv.get(\"foo\") \n\n# Result var will be a list containing the result of all the three vars\nresult = gv.get([\"foo\",\"bars\",\"eggs\"]) \n\n# You can simply use gv as a dict to get the var\nresult = gv[\"foo\"]\n```\n\n#### removeVar()\n```\n# Var \"foo\" will be removed\ngv.removeVar(\"foo\") \n\n# All the three vars (\"foo\", \"bar\" and \"eggs\") will be removed\ngv.removeVar([\"foo\",\"bar\",\"eggs\"]) \n```\n\n#### updateVar()\n```\n# Variable foo will be updated with the new value \"bar\"\ngv.updateVar({\"foo\":\"bar\"}) \n\n# The two variables (\"foo\" and \"eggs\") will be updated with new values\ngv.updateVar({\"foo\":\"bar\",\"eggs\":16}) \n```\n\n#### setOrUpdateVar()\n```\n# The var \"foo\" will set if not exist, or will update with a new value if already exist a var with \"foo\" name\ngv.setOrUpdater({\"foo\":\"bar\"}) \n\n# Two vars will be setted (if not exist) or their values will be updated (if they already exist)\ngv.setOrUpdateVar({\"foo\":\"bar\",\"eggs\":16}) \n\n# You can use gv as a dict to add a new or update an existing var\ngv[\"test\"] = \"Hello\" \t      # setted a new one\ngv[\"test\"] \"Oh, hey there\"    # Update an existing one\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrotame/GlobalVars", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "GlobalVars", "package_url": "https://pypi.org/project/GlobalVars/", "platform": "", "project_url": "https://pypi.org/project/GlobalVars/", "project_urls": {"Homepage": "https://github.com/mrotame/GlobalVars"}, "release_url": "https://pypi.org/project/GlobalVars/0.0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Using environment variable to store global vars to the enrite project", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GlobalVars</h1>\n<p>A way to implement global vars between classes using the environment variable <code>\"os.environ\"</code></p>\n<h3>Last updates</h3>\n<ul>\n<li>Added a function to clear all setted vars <code>clearAllVars</code> and <code>getAllVars</code>. See the new functionalities in methods and methods exemples</li>\n<li>Last update now adds dunders <code>setitem</code>, <code>getitem</code> and <code>len</code> making the class work as a dictionary.\nsee the funcionalities in methods exemples <code>setOrUpdateVar</code>, <code>getVar</code>, and <code>getAllVars</code></li>\n</ul>\n<h2>Importing</h2>\n<pre><code>from globalVars import GlobalVars;\ngv = GlobalVars()\n</code></pre>\n<h2>Methods</h2>\n<p>This class has five classes to be used:</p>\n<ul>\n<li>getAllVars\n<ul>\n<li>Description: return all vars setted in the environment</li>\n<li>Params: no params needed</li>\n</ul>\n</li>\n<li>clearAllVars\n<ul>\n<li>Description: Delete all vars already setted</li>\n<li>Params: no params needed</li>\n</ul>\n</li>\n<li>setVar\n<ul>\n<li>Description: Set a new variable</li>\n<li>Params: Accepts a <code>Dictionary</code> with <code>'Name':Value</code> containing one or more vars to add</li>\n</ul>\n</li>\n<li>getVar\n<ul>\n<li>Description: Get a setted variable</li>\n<li>Params: Accepts a <code>String</code> with <code>'Name'</code> containing the name of a var</li>\n</ul>\n</li>\n<li>removeVar\n<ul>\n<li>Description: Remove a variable</li>\n<li>Params: accepts a <code>String</code>with <code>'Name'</code> or a <code>List</code> with \"[Name1,Name2,...] containing one or more names of vars to remove</li>\n</ul>\n</li>\n<li>updateVar\n<ul>\n<li>Description: Update a variable</li>\n<li>Params: accepts a <code>Dictionary</code> with <code>{'Name':Value,...}</code> containing one or more vars to update</li>\n</ul>\n</li>\n<li>setOrUpdateVar\n<ul>\n<li>Description: set a new variable or update it if already exists</li>\n<li>Params: accepts a <code>Dictionary</code> with <code>{'Name':Value,...}</code> containing one or more vars to set or update</li>\n</ul>\n</li>\n</ul>\n<h3>Methods Examples</h3>\n<p>*Remember that you imported <code>GlobalVars</code> as <code>\"gv\"</code></p>\n<h3>getAllVars()</h3>\n<pre><code># Store all already setted vars in a local variable\nmyVars = gv.getAllVars()\n\n# Print all the environment setted vars\nprint(gv.getAllVars())\n\n# If you want to now how many vars are setted you can use len()\nlen(gv)\n</code></pre>\n<h3>clearAllVars()</h3>\n<pre><code># Set a new var\ngv.setVar({\"test\":\"hello\"})\n\n# Clear all the vars setted\ngv.clearAllVars()\n\n# It will return an empty dictionary \"{}\"\ngv.getAllVars()\n</code></pre>\n<h4>setVar()</h4>\n<pre><code># Will be setted two vars: \"foo\" with value \"bar\" and \"eggs\" with value 16\ngv.setVar({\"foo\":\"bar\",\"eggs\":16}) \n\n# The \"foo\" var will be setted with a \"bar\" value\ngv.setVar({\"foo\":\"bar\"}) \n</code></pre>\n<h4>getVar()</h4>\n<pre><code># Result var will be the value in \"foo\"\nresult = gv.get(\"foo\") \n\n# Result var will be a list containing the result of all the three vars\nresult = gv.get([\"foo\",\"bars\",\"eggs\"]) \n\n# You can simply use gv as a dict to get the var\nresult = gv[\"foo\"]\n</code></pre>\n<h4>removeVar()</h4>\n<pre><code># Var \"foo\" will be removed\ngv.removeVar(\"foo\") \n\n# All the three vars (\"foo\", \"bar\" and \"eggs\") will be removed\ngv.removeVar([\"foo\",\"bar\",\"eggs\"]) \n</code></pre>\n<h4>updateVar()</h4>\n<pre><code># Variable foo will be updated with the new value \"bar\"\ngv.updateVar({\"foo\":\"bar\"}) \n\n# The two variables (\"foo\" and \"eggs\") will be updated with new values\ngv.updateVar({\"foo\":\"bar\",\"eggs\":16}) \n</code></pre>\n<h4>setOrUpdateVar()</h4>\n<pre><code># The var \"foo\" will set if not exist, or will update with a new value if already exist a var with \"foo\" name\ngv.setOrUpdater({\"foo\":\"bar\"}) \n\n# Two vars will be setted (if not exist) or their values will be updated (if they already exist)\ngv.setOrUpdateVar({\"foo\":\"bar\",\"eggs\":16}) \n\n# You can use gv as a dict to add a new or update an existing var\ngv[\"test\"] = \"Hello\" \t      # setted a new one\ngv[\"test\"] \"Oh, hey there\"    # Update an existing one\n</code></pre>\n\n          </div>"}, "last_serial": 7022686, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "c9ced99768cf87c3b21f5d3b12f140ea", "sha256": "725e7d7ef9231eb7293e97c39cd650801c14a207c3968474804ee64e13abdafc"}, "downloads": -1, "filename": "GlobalVars-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c9ced99768cf87c3b21f5d3b12f140ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4384, "upload_time": "2020-04-14T05:14:55", "upload_time_iso_8601": "2020-04-14T05:14:55.751510Z", "url": "https://files.pythonhosted.org/packages/e7/1f/64904fef46e899fc64706957dd1fc9d65cd44a81a31435f23be36267552f/GlobalVars-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "1de6428f79f2e86da6bcde00128f681a", "sha256": "d828b99da1f72eec25620c37f3286177a624fb7b418a31237a6173930b64ff41"}, "downloads": -1, "filename": "GlobalVars-0.0.5.tar.gz", "has_sig": false, "md5_digest": "1de6428f79f2e86da6bcde00128f681a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5110, "upload_time": "2020-04-15T06:54:04", "upload_time_iso_8601": "2020-04-15T06:54:04.326666Z", "url": "https://files.pythonhosted.org/packages/bb/56/6cf3c6d000a16e78258e34b75fc9fe83b9c90a7a384eb210788495621a82/GlobalVars-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1de6428f79f2e86da6bcde00128f681a", "sha256": "d828b99da1f72eec25620c37f3286177a624fb7b418a31237a6173930b64ff41"}, "downloads": -1, "filename": "GlobalVars-0.0.5.tar.gz", "has_sig": false, "md5_digest": "1de6428f79f2e86da6bcde00128f681a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5110, "upload_time": "2020-04-15T06:54:04", "upload_time_iso_8601": "2020-04-15T06:54:04.326666Z", "url": "https://files.pythonhosted.org/packages/bb/56/6cf3c6d000a16e78258e34b75fc9fe83b9c90a7a384eb210788495621a82/GlobalVars-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:33 2020"}