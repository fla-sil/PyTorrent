{"info": {"author": "David Shu", "author_email": "david.shu@126.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Text Processing", "Topic :: Text Processing :: Markup", "Topic :: Text Processing :: Markup :: XML"], "description": "What is lxml-mate?\r\n==================\r\n\r\nThe simplest XML-Object mapper for Python powered by lxml. It\u2019s powerful.\r\n\r\nNo class definitions are needed to define structure of your XML document.\r\n\r\nYou can create a brand new xml, or create from string, xml document and handle it in very pythonic way.\r\n\r\nSee source code for more documents.\r\n\r\n\r\n\r\nFeatures\r\n========\r\n\r\n**Intercept AttributeError** when access a non-existent tag in order to access more easily.\r\n\r\nFor exmaple:\r\n\r\n    >>> s = '''\r\n    ...    <root>\r\n    ...        <person height='180cm'>\r\n    ...            <name>jack</name>\r\n    ...            <age>18</age>\r\n    ...        </person>\r\n    ...        <person>\r\n    ...            <name>peter</name>\r\n    ...        </person>\r\n    ...    </root>\r\n    >>>    '''\r\n    \r\nwhen we access the second person's age, lxml.objectify.ObjectifiedElement will raise an AttributeError. **lxml-mate will create an null node instead of raising an exception**.\r\n    \r\n**lxml**:\r\n    \r\n    >>> r = objectify.fromstring( s )\r\n    >>> ages = [ ( p.name, p.age ) for p in r.person ] #AttributeError be raised.\r\n    >>> r.person[0].else.mother = 'jerry' #AttributeError be raised.\r\n    \r\n**lxml-mate**:\r\n    \r\n    >>> r = ObjectifiedElementProxy( xmlstr = s )\r\n    >>> ages = [ ( p.name.pyval, p.age.pyval ) for p in r.person[:] ] #dose work\r\n    >>> r.person[0].else.mother = 'jerry' #dose work\r\n\r\n\r\nUsage\r\n=====\r\n\r\ncreate\r\n------\r\n\r\nto create a new xml like::\r\n\r\n    <root>\r\n        <person height='180cm'>\r\n            <name>jack</name>\r\n            <age>18</age>\r\n        </person>\r\n    </root>\r\n    \r\n**lxml**:\r\n\r\n    >>> from lxml import objectify, etree\r\n    >>> r = objectify.Element('root')\r\n    >>> person = objectify.SubElement( r, 'person', attrib={'height':'180cm'} )\r\n    >>> name = objectify.SubElement( person, 'name' )\r\n    >>> person.name = 'jack'\r\n    >>> age = objectify.SubElement( person, 'age' )\r\n    >>> person.age = 18\r\n    \r\nor use E-factory\r\n    \r\n    >>> E = objectify.E\r\n    >>> E.root( E.person( E.name('jack'), E.age(18), height='180cm' ) )\r\n    \r\n**lxml-mate**:\r\n\r\n    >>> from lxmlmate import ObjectifiedElementProxy\r\n    >>> rm = ObjectifiedElementProxy( rootag='root' )\r\n    >>> rm.append( E.person( E.name('jack'), E.age(18), height='180cm' ) )\r\n    \r\nor\r\n    \r\n    >>> rm = ObjectifiedElementProxy( objectifiedElement = E.root( E.person( E.name('jack'), E.age(18), height='180cm', height='180cm' ) ) )\r\n    \r\nor\r\n    \r\n    >>> rm = ObjectifiedElementProxy( rootag='root' )\r\n    >>> rm.person.name = 'jack'\r\n    >>> rm.person.age = 18\r\n    >>> rm.person.attrib[ 'height' ] = '180cm'\r\n    \r\n    \r\nappend\r\n------\r\n\r\nto append xml snippet like::\r\n    \r\n    >>>\r\n    <person>\r\n        <name>peter</name>\r\n        <age>45</age>\r\n    </person>\r\n    <person>\r\n        <name>joe</name>\r\n        <age>25</age>\r\n    </person>\r\n    \r\n**lxml**:\r\n    \r\n    >>> r.append( E.person( E.name( 'peter' ), E.age( 45 ) ),\r\n    ...           E.person( E.name( 'joe' ), E.age( 25 ) )\r\n    ...          )\r\n    >>>\r\n    \r\n**lxml-mate**:\r\n        \r\n    >>> rm.append( E.person( E.name( 'peter' ), E.age( 45 ) ),\r\n    ...            E.person( E.name( 'joe' ), E.age( 25 ) )\r\n    ...           )\r\n    >>>\r\n\r\nor\r\n     \r\n    >>> rm.insert( 'person', i=None )( 'name', 'peter' )( 'age', 45 )\r\n    >>> rm.insert( 'person', i=None )( 'name', 'joe' )( 'age', 25 )\r\n\r\n    \r\nselect\r\n------\r\n     \r\n**lxml**:\r\n    \r\nto select the last person ( named joe ):\r\n    \r\n    >>> r.person[-1] #return an ObjectifiedElement instance.\r\n    \r\nto find persons named joe:\r\n\r\n    >>> r.xpath( '//person[name=\"joe\"]' )  #return ObjectifiedElement instances list\r\n\r\n**lxml-mate**:\r\n    \r\n    >>> rm.person[-1]  #return an ObjectifiedElementProxy instance.\r\n    >>> rm.xpath( '//person[name=\"joe\"]' )  #return ObjectifiedElementProxy objects list\r\n    \r\n        \r\nremove\r\n------\r\n\r\nto remove all persons named joe:\r\n    \r\n**lxml**:\r\n    \r\n    >>> p = r.xpath( '//person[name=\"joe\"]' )\r\n    >>> for k in p: r.remove( k )\r\n    \r\n**lxml-mate**:\r\n    \r\n    >>> pm = rm.xpath( '//person[name=\"joe\"]' )\r\n    >>> rm.remove( pm )\r\n    \r\nor \r\n    \r\n    >>> rm.remove( [ p for p in rm.person[:] if p.name.pyval == 'joe' ] )\r\n    \r\nto remove the first person: \r\n    \r\n**lxml**:\r\n    \r\n    >>> p = r.person[0]\r\n    >>> r.remove( p )\r\n    \r\n**lxml-mate**:\r\n\r\n    >>> rm.remove( 0 )  \r\n    \r\n    \r\ndump to file\r\n------------\r\n\r\n**lxml**:\r\n    \r\n    >>> f = open( 'person.xml', 'w' )\r\n    >>> s = etree.tostring( r )\r\n    >>> f.write( s )\r\n    >>> f.close()\r\n    \r\n**lxml-mate**:\r\n    \r\n    >>> rm.dump( 'person.xml' )\r\n    \r\n    \r\nload from file\r\n--------------\r\n\r\n**lxml**:\r\n    \r\n    >>> r = objectify.XML( 'person.xml' )\r\n    \r\n**lxml-mate**:\r\n    \r\n    >>> rm = ObjectifiedElementProxy( xmlFile = 'person.xml' ) \r\n\r\n\r\ncreate a brand new xml\r\n----------------------\r\n    \r\n**lxml**:\r\n    \r\n    >>> r = objectify.Element('root')\r\n    \r\n**lxml-mate**:\r\n    \r\n    >>> rm = ObjectifiedElementProxy( rootag='root' )\r\n\r\n    \r\nElse\r\n----\r\n\r\nto access a tag:\r\n    \r\n    >>> rm.person[0]\r\n    >>> rm[ 'person' ][0]\r\n    >>> rm.person\r\n    >>> rm.person[ 'name' ]\r\n    \r\nto modify a tag's value:\r\n    \r\n    >>> rm.person.age = 23\r\n    \r\nto get a tag's pyval:\r\n    \r\n    >>> rm.person.age.pyval\r\n\r\nto modify a tag's attrib:\r\n    \r\n    >>> rm.person[0].attrib['height'] = \"170cm\" \r\n    \r\nto modify tag:\r\n    \r\n    >>> rm.person[-1].tag = 'people'\r\n    \r\nto clean empty node ( no attributes & no children ):\r\n    \r\n    >>> rm.clean()\r\n    \r\nYou can use lxml.objectify.ObjectifiedElement's methods directly like this:\r\n    \r\n    >>> rm.addattr( 'kkk','vvv' )\r\n    \r\n\r\n\r\nDependencies\r\n============\r\nlxml https://github.com/lxml/lxml/\r\n\r\n\r\n\r\nInstallion\r\n==========\r\n    >>> pip install lxml-mate\r\n\t\r\n\t\r\nChangelog\r\n=========\r\n\r\n0.5.3 (2015-07-20)\r\n------------------\r\n* fix ObjectifiedElementProxy( xmlFileName='...' ) error.\r\n\r\n0.5.2 (2015-07-10)\r\n------------------\r\n* add xpath method.\r\n* improve document and readme.rst.\r\n\r\n0.5.0 (2015-06-29)\r\n------------------\r\n* initial public release.", "description_content_type": null, "docs_url": "https://pythonhosted.org/lxml-mate/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/david-shu/lxml-mate", "keywords": "xml lxml", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lxml-mate", "package_url": "https://pypi.org/project/lxml-mate/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lxml-mate/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/david-shu/lxml-mate"}, "release_url": "https://pypi.org/project/lxml-mate/0.5.3/", "requires_dist": null, "requires_python": null, "summary": "The simplest Object-XML mapper for Python. Mate for lxml.", "version": "0.5.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-lxml-mate\">\n<h2>What is lxml-mate?</h2>\n<p>The simplest XML-Object mapper for Python powered by lxml. It\u2019s powerful.</p>\n<p>No class definitions are needed to define structure of your XML document.</p>\n<p>You can create a brand new xml, or create from string, xml document and handle it in very pythonic way.</p>\n<p>See source code for more documents.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p><strong>Intercept AttributeError</strong> when access a non-existent tag in order to access more easily.</p>\n<p>For exmaple:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; s = '''\n...    &lt;root&gt;\n...        &lt;person height='180cm'&gt;\n...            &lt;name&gt;jack&lt;/name&gt;\n...            &lt;age&gt;18&lt;/age&gt;\n...        &lt;/person&gt;\n...        &lt;person&gt;\n...            &lt;name&gt;peter&lt;/name&gt;\n...        &lt;/person&gt;\n...    &lt;/root&gt;\n&gt;&gt;&gt;    '''\n</pre>\n</blockquote>\n<p>when we access the second person\u2019s age, lxml.objectify.ObjectifiedElement will raise an AttributeError. <strong>lxml-mate will create an null node instead of raising an exception</strong>.</p>\n<p><strong>lxml</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; r = objectify.fromstring( s )\n&gt;&gt;&gt; ages = [ ( p.name, p.age ) for p in r.person ] #AttributeError be raised.\n&gt;&gt;&gt; r.person[0].else.mother = 'jerry' #AttributeError be raised.\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; r = ObjectifiedElementProxy( xmlstr = s )\n&gt;&gt;&gt; ages = [ ( p.name.pyval, p.age.pyval ) for p in r.person[:] ] #dose work\n&gt;&gt;&gt; r.person[0].else.mother = 'jerry' #dose work\n</pre>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"create\">\n<h3>create</h3>\n<p>to create a new xml like:</p>\n<pre>&lt;root&gt;\n    &lt;person height='180cm'&gt;\n        &lt;name&gt;jack&lt;/name&gt;\n        &lt;age&gt;18&lt;/age&gt;\n    &lt;/person&gt;\n&lt;/root&gt;\n</pre>\n<p><strong>lxml</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from lxml import objectify, etree\n&gt;&gt;&gt; r = objectify.Element('root')\n&gt;&gt;&gt; person = objectify.SubElement( r, 'person', attrib={'height':'180cm'} )\n&gt;&gt;&gt; name = objectify.SubElement( person, 'name' )\n&gt;&gt;&gt; person.name = 'jack'\n&gt;&gt;&gt; age = objectify.SubElement( person, 'age' )\n&gt;&gt;&gt; person.age = 18\n</pre>\n</blockquote>\n<p>or use E-factory</p>\n<blockquote>\n<pre>&gt;&gt;&gt; E = objectify.E\n&gt;&gt;&gt; E.root( E.person( E.name('jack'), E.age(18), height='180cm' ) )\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from lxmlmate import ObjectifiedElementProxy\n&gt;&gt;&gt; rm = ObjectifiedElementProxy( rootag='root' )\n&gt;&gt;&gt; rm.append( E.person( E.name('jack'), E.age(18), height='180cm' ) )\n</pre>\n</blockquote>\n<p>or</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm = ObjectifiedElementProxy( objectifiedElement = E.root( E.person( E.name('jack'), E.age(18), height='180cm', height='180cm' ) ) )\n</pre>\n</blockquote>\n<p>or</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm = ObjectifiedElementProxy( rootag='root' )\n&gt;&gt;&gt; rm.person.name = 'jack'\n&gt;&gt;&gt; rm.person.age = 18\n&gt;&gt;&gt; rm.person.attrib[ 'height' ] = '180cm'\n</pre>\n</blockquote>\n</div>\n<div id=\"append\">\n<h3>append</h3>\n<p>to append xml snippet like:</p>\n<pre>&gt;&gt;&gt;\n&lt;person&gt;\n    &lt;name&gt;peter&lt;/name&gt;\n    &lt;age&gt;45&lt;/age&gt;\n&lt;/person&gt;\n&lt;person&gt;\n    &lt;name&gt;joe&lt;/name&gt;\n    &lt;age&gt;25&lt;/age&gt;\n&lt;/person&gt;\n</pre>\n<p><strong>lxml</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; r.append( E.person( E.name( 'peter' ), E.age( 45 ) ),\n...           E.person( E.name( 'joe' ), E.age( 25 ) )\n...          )\n&gt;&gt;&gt;\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.append( E.person( E.name( 'peter' ), E.age( 45 ) ),\n...            E.person( E.name( 'joe' ), E.age( 25 ) )\n...           )\n&gt;&gt;&gt;\n</pre>\n</blockquote>\n<p>or</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.insert( 'person', i=None )( 'name', 'peter' )( 'age', 45 )\n&gt;&gt;&gt; rm.insert( 'person', i=None )( 'name', 'joe' )( 'age', 25 )\n</pre>\n</blockquote>\n</div>\n<div id=\"select\">\n<h3>select</h3>\n<p><strong>lxml</strong>:</p>\n<p>to select the last person ( named joe ):</p>\n<blockquote>\n<pre>&gt;&gt;&gt; r.person[-1] #return an ObjectifiedElement instance.\n</pre>\n</blockquote>\n<p>to find persons named joe:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; r.xpath( '//person[name=\"joe\"]' )  #return ObjectifiedElement instances list\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.person[-1]  #return an ObjectifiedElementProxy instance.\n&gt;&gt;&gt; rm.xpath( '//person[name=\"joe\"]' )  #return ObjectifiedElementProxy objects list\n</pre>\n</blockquote>\n</div>\n<div id=\"remove\">\n<h3>remove</h3>\n<p>to remove all persons named joe:</p>\n<p><strong>lxml</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; p = r.xpath( '//person[name=\"joe\"]' )\n&gt;&gt;&gt; for k in p: r.remove( k )\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; pm = rm.xpath( '//person[name=\"joe\"]' )\n&gt;&gt;&gt; rm.remove( pm )\n</pre>\n</blockquote>\n<p>or</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.remove( [ p for p in rm.person[:] if p.name.pyval == 'joe' ] )\n</pre>\n</blockquote>\n<p>to remove the first person:</p>\n<p><strong>lxml</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; p = r.person[0]\n&gt;&gt;&gt; r.remove( p )\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.remove( 0 )\n</pre>\n</blockquote>\n</div>\n<div id=\"dump-to-file\">\n<h3>dump to file</h3>\n<p><strong>lxml</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; f = open( 'person.xml', 'w' )\n&gt;&gt;&gt; s = etree.tostring( r )\n&gt;&gt;&gt; f.write( s )\n&gt;&gt;&gt; f.close()\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.dump( 'person.xml' )\n</pre>\n</blockquote>\n</div>\n<div id=\"load-from-file\">\n<h3>load from file</h3>\n<p><strong>lxml</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; r = objectify.XML( 'person.xml' )\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm = ObjectifiedElementProxy( xmlFile = 'person.xml' )\n</pre>\n</blockquote>\n</div>\n<div id=\"create-a-brand-new-xml\">\n<h3>create a brand new xml</h3>\n<p><strong>lxml</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; r = objectify.Element('root')\n</pre>\n</blockquote>\n<p><strong>lxml-mate</strong>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm = ObjectifiedElementProxy( rootag='root' )\n</pre>\n</blockquote>\n</div>\n<div id=\"else\">\n<h3>Else</h3>\n<p>to access a tag:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.person[0]\n&gt;&gt;&gt; rm[ 'person' ][0]\n&gt;&gt;&gt; rm.person\n&gt;&gt;&gt; rm.person[ 'name' ]\n</pre>\n</blockquote>\n<p>to modify a tag\u2019s value:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.person.age = 23\n</pre>\n</blockquote>\n<p>to get a tag\u2019s pyval:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.person.age.pyval\n</pre>\n</blockquote>\n<p>to modify a tag\u2019s attrib:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.person[0].attrib['height'] = \"170cm\"\n</pre>\n</blockquote>\n<p>to modify tag:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.person[-1].tag = 'people'\n</pre>\n</blockquote>\n<p>to clean empty node ( no attributes &amp; no children ):</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.clean()\n</pre>\n</blockquote>\n<p>You can use lxml.objectify.ObjectifiedElement\u2019s methods directly like this:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rm.addattr( 'kkk','vvv' )\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>lxml <a href=\"https://github.com/lxml/lxml/\" rel=\"nofollow\">https://github.com/lxml/lxml/</a></p>\n</div>\n<div id=\"installion\">\n<h2>Installion</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; pip install lxml-mate\n</pre>\n</blockquote>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.5.3 (2015-07-20)</h3>\n<ul>\n<li>fix ObjectifiedElementProxy( xmlFileName=\u2019\u2026\u2019 ) error.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.5.2 (2015-07-10)</h3>\n<ul>\n<li>add xpath method.</li>\n<li>improve document and readme.rst.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.5.0 (2015-06-29)</h3>\n<ul>\n<li>initial public release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1640746, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "794abfc0d64f9b6da11674c3fdba79a5", "sha256": "9399ce5cba12ceb4b1a8fbccaa10723e21ec585400564d030f8acf518c71f15d"}, "downloads": -1, "filename": "lxml-mate-0.5.2.zip", "has_sig": false, "md5_digest": "794abfc0d64f9b6da11674c3fdba79a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12526, "upload_time": "2015-07-10T02:55:59", "upload_time_iso_8601": "2015-07-10T02:55:59.256876Z", "url": "https://files.pythonhosted.org/packages/d4/e5/fc5d5a219c29f11168ba24a6bf99ea2c8a358ae2122d634f12210071e7f2/lxml-mate-0.5.2.zip", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "048a4dde1f83cc5e05f069fda09644e4", "sha256": "af742a81e3da4512574fa12a017971a63a70b12da3c6e6a9f8f0b75ae8ddfee4"}, "downloads": -1, "filename": "lxml-mate-0.5.3.zip", "has_sig": false, "md5_digest": "048a4dde1f83cc5e05f069fda09644e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12897, "upload_time": "2015-07-20T00:33:39", "upload_time_iso_8601": "2015-07-20T00:33:39.513273Z", "url": "https://files.pythonhosted.org/packages/bd/fa/2e13059f1fc2a1089ae1caba0880561c40f3d7f4d95cd57efe970a1bbfa4/lxml-mate-0.5.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "048a4dde1f83cc5e05f069fda09644e4", "sha256": "af742a81e3da4512574fa12a017971a63a70b12da3c6e6a9f8f0b75ae8ddfee4"}, "downloads": -1, "filename": "lxml-mate-0.5.3.zip", "has_sig": false, "md5_digest": "048a4dde1f83cc5e05f069fda09644e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12897, "upload_time": "2015-07-20T00:33:39", "upload_time_iso_8601": "2015-07-20T00:33:39.513273Z", "url": "https://files.pythonhosted.org/packages/bd/fa/2e13059f1fc2a1089ae1caba0880561c40f3d7f4d95cd57efe970a1bbfa4/lxml-mate-0.5.3.zip", "yanked": false}], "timestamp": "Fri May  8 00:42:47 2020"}