{"info": {"author": "Pavel Aslanov", "author_email": "asl.pavel@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Pretzel\n-------\n\n|Build Status| |Coverage Status|\n\nIs an asynchronous application framework for python\n\nFeatures\n--------\n\n-  C# like async/await(async/yield) paradigm for asynchronous\n   programming (monad base)\n-  Cool asynchronous I/O loop implementation\n-  Uniform asynchronous stream implementation for sockets and pipes\n-  Interact with subprocesses asynchronously\n-  Greenlet support (but not required)\n-  Remote code executing over ssh or in child process (with only\n   requirements python and ssh)\n-  Python 2/3, PyPy (starting from 2.0) compatible\n-  Asynchronous python shell ``python -mpretzel.apps.shell`` (requires\n   greenlet)\n\nInstallation\n------------\n\nAs git submodule:\n``git submodule add git://github.com/aslpavel/pretzel.git <path_to_submodule>``\nPip from git:\n``pip install git+git://github.com/aslpavel/pretzel-pkg.git`` Pip from\nPyPI ``pip install pretzel``\n\nApproach\n--------\n\nUsage of asynchronous functions is similar to C# async/await but instead\nof ``async`` attribute it uses ``@async`` decorator and instead of\n``await`` keyword, ``yield`` is used. Internally unit of asynchrony is\nimplemented as continuation monad ``Cont`` with embedded ``Result``\nmonad (similar to Haskell's ``Cont`` and ``Either`` monads) as its\nvalue. One important difference of ``Cont`` monad from C# ``Task``\nobject, is that ``Task`` represents already running asynchronous\noperation, but continuation monad is a sequence of computations, and\nthis computations are not started. ``.future()`` method on instance of\n``Cont`` can be used to create ``Task`` like object. To use this library\nyou don't have to understand notion of the monad. Simple asynchronous\nfunction would look like this.\n\n.. code:: python\n\n    from pretzel.monad import async\n    from pretzel.core import sleep\n\n    @async\n    def print_after(delay, *args, **kwargs):\n      \"\"\"Calls print function after the lapse of `delay` sedonds.\n      \"\"\"\n      yield sleep(delay)  # execution will be resumed in delay seconds\n      print(*args, **kwargs)\n\nTo return something meaningful in python3 you can just use ``return``\nkeyword, but in python2 you have to use ``do_return`` function (it will\nalso work in python3) as ``return`` with value cannot be used inside a\ngenerator function. Result of such asynchronous function is again a\ncontinuation monad, if exception is thrown during execution of its body,\nit is marshaled to receiver of the result and can be processed\ncorrectly. For example.\n\n.. code:: python\n\n    @async\n    def process_error():\n      @async\n      def throw_after(delay, error):\n        yield sleep(delay)\n        raise error\n\n      try:\n        yield throw_after(1, ValueError('test error'))\n      except ValueError as error:\n        # process error in a meaningfull way\n      do_return('done')  # exectly equivalent to: return 'done'\n\nAsynchronous values (continuation monads) can be composed with two\nhelper functions ``async_all`` and ``async_any``.\n\n.. code:: python\n\n    @async\n    def composition_example():\n      yield async_all([sleep(1), sleep(2)])  # will be resumed in 2 seconds\n      yield async_any([sleep(1), sleep(2)])  # will be resumed in 1 sedond\n\n      result_all = yield async_all([func1(), func2()])  # = (result1, result2)\n      reuslt_any = yield async_any([func1(), func2()])  # = result1 | result2\n\n``Cont`` monad can also be called with callback function as its\nargument, in this case, on completion of asynchronous operation,\ncallback will be called with ``Result`` monad. If callback function is\nnot specified default, then default continuation callback will be used\nwhich only reports errors if any.\n\n.. code:: python\n\n    >>> sleep(1)(print)\n    Result(val:1374307530.015137)\n    >>> sleep(None)()\n    [continuation] error in coroutine started from\n      File \"<console>\", line 1, in <module>\n    `-------------------------------------------------------------------------------\n    Host   : fiend\n    Process: 13492\n    Error  : TypeError(\"unsupported operand type(s) for +: 'float' and 'NoneType'\")\n\n    Traceback (most recent call last):\n      File \"./pretzel/monad/do.py\", line 26, in do_block\n        return value(block(*args, **kwargs))\n      File \"./pretzel/core/core.py\", line 118, in sleep\n        do_done(self.time_queue.on(time() + delay))\n    TypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n\nInside body of asynchronous function you can ``yield`` not only ``Cont``\nmonad directly, but any object implementing ``.__monad__()`` method\nwhich returns ``Cont`` monad. There are many such types in this library,\nfor example ``Event``\n\n.. code:: python\n\n    @async\n    def func():\n      print(1)\n      yield event\n      print(2)\n      print((yield event))\n    event = Event()\n    func()()     # 1 is printed\n    event('e0')  # 2 is printed\n    event('e1')  # 'e1' is printed\n\nMain loop\n---------\n\n``Core`` class implements I/O loop, and it is used internally to\nimplement asynchronous streams, timers and more. Previously used\n``sleep`` function will work correctly only in presence of running I/O\nloop. Simplest way to intialize and use ``Core`` object is to use\n``@app`` decorator.\n\n.. code:: python\n\n    \"\"\"Minimal pretzel application\n\n    Sleeps for one second, then prints 'done' and exits.\n    \"\"\"\n    from pretzel.app import app\n    from pretzel.core import sleep\n\n    @app\n    def main():\n      yield sleep(1)\n      print('done')\n\n    if __name__ == '__main__':\n      main()\n\nSee `Core's init\nmodule <https://github.com/aslpavel/pretzel/blob/master/core/__init__.py>`__\nfor full list of available functions and their descriptions.\n\nRemoting\n--------\n\nMain reason for creation of this framework was to execute code on a set\nof machines via ssh connection. It is achieved by usage of\n``SSHConnection`` class. ``SSHConnection`` is a callable object which\nreturns proxy object for its argument. You can call proxy object, get\nits attributes or items ``proxy[item]``, result of such operations is\nagain a proxy object with this embedded operations. Proxy implements\nmonad interface, and to get result of embedded chain of operations you\ncan yield it inside asynchronous function. In this example we create\nproxy for ``os.getpid`` function, call it and then execute on remote\nprocess by yielding it. There is no need for pretzel to be installed on\nremote machine.\n\n.. code:: python\n\n    import os\n    from pretzel.app import app\n    from pretzel.remoting import SSHConnection\n\n    @app\n    def main():\n      \"\"\"Connect to localhost via ssh and print remote process's pid\n\n      Note:\n        You have to be able to login to the remote host without\n        entering any password (by means of ssh keys) otherwise\n        connecition will fail.\n      \"\"\"\n      with (yield SSHConnection('localhost')) as conn:\n        print((yield conn(os.getpid)()))\n\n    if __name__ == '__main__':\n      main()\n\nConnection can marshal any pickle-able object, or ``Sender`` object plus\nany object which is reducible to set of pickle-able and ``Sender``\nobjects. ``Proxy`` and ``Connection`` itself are examples of such\nobjects. You can also create proxy object from any arbitrary object with\n``proxify`` or ``proxify_func``.\n\n.. code:: python\n\n    import os\n    from pretzel.app import app\n    from pretzel.remoting import SSHConnection, proxify\n\n    class Remote(object):\n      \"\"\"Object which will be used remotely\n      \"\"\"\n      def __init__(self):\n        self.value = 0\n\n      def next(self):\n        self.value += 1\n        return self.value\n\n      def getpid(self):\n        return os.getpid()\n\n    @app\n    def main():\n      with (yield SSHConnection('localhost')) as conn:\n        with (yield proxify(conn(Remote)())) as o:  # remote object proxy\n          print(os.getpid(), (yield o.getpid()))    # prints two different pids\n          print((yield o.next()))  # prints 1\n          print((yield o.next()))  # prints 2\n\n    if __name__ == '__main__':\n      main()\n\nBut ``Cont`` monad is not marshallable, that is why there is special\noperation on proxy object ``~`` which is equivalent to ``yield`` inside\nasynchronous function. Here is an example of remote execution of\nasynchronous function.\n\n.. code:: python\n\n    from pretzel.app import app\n    from pretzel.process import process_call\n    from pretzel.remoting import SSHConnection\n\n    @app\n    def main():\n      \"\"\"Execute 'ls' on remote machine and show result of the execution\n      \"\"\"\n      with (yield SSHConnection('localhost')) as conn:\n        out, err, code = yield ~conn(process_call)('ls')\n        print(out.decode())\n\n    if __name__ == '__main__':\n      main()\n\nThere is also a way to work with multiple connections as if it one, by\nmeans of ``composite_ssh_conn``. It accepts list of hosts and returns\ncomposite connection, which behaves as ordinary connection but returns\nset of results.\n\n.. code:: python\n\n    import os\n    from pretzel.app import app\n    from pretzel.remoting import composite_ssh_conn\n\n    @app\n    def main():\n      hosts = ['localhost', 'localhost']\n      with (yield composite_ssh_conn(hosts)) as conns:\n        result = yield conns(os.getpid)()\n        print(result)  # List(25163, 25162) - iterable object of pids\n\n    if __name__ == '__main__':\n      main()\n\nRemoting submodule can be used as workaround for python's GIL, in a\nsimilar fashion to ``multiprocessing`` module. You can use\n``ForkConnection`` (or ``composite_fork_conn``) which behaves as\n``SSHConnection`` but instead of connecting via ssh, it just spawns new\nprocess.\n\n.. code:: python\n\n    import time\n    from pretzel.app import app\n    from pretzel.remoting import composite_fork_conn\n\n    def computation_heavy_task():\n      \"\"\"Some computation intensive task\n      \"\"\"\n      start_time = time.time()\n      time.sleep(10)\n      stop_time = time.time()\n      return int(stop_time - start_time)\n\n    @app\n    def main():\n      with (yield composite_fork_conn(10)) as conns:  # create 10 connections\n        result = yield conns(computation_heavy_task)()\n        print(result)  # prints List(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)\n\n    if __name__ == '__main__':\n      main()\n\nExamples\n--------\n\n-  `Simple echo server <https://gist.github.com/aslpavel/5635559>`__\n-  `Cat remote file over\n   ssh <https://gist.github.com/aslpavel/5635610>`__\n\n.. |Build Status| image:: https://api.travis-ci.org/aslpavel/pretzel.png\n   :target: https://travis-ci.org/aslpavel/pretzel\n.. |Coverage Status| image:: https://coveralls.io/repos/aslpavel/pretzel/badge.png?branch=master\n   :target: https://coveralls.io/r/aslpavel/pretzel?branch=master", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aslpavel/pretzel", "keywords": null, "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "pretzel", "package_url": "https://pypi.org/project/pretzel/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pretzel/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/aslpavel/pretzel"}, "release_url": "https://pypi.org/project/pretzel/1.0.10/", "requires_dist": null, "requires_python": null, "summary": "Pretzel - asynchronous python framework", "version": "1.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pretzel\">\n<h2>Pretzel</h2>\n<p><a href=\"https://travis-ci.org/aslpavel/pretzel\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/413278fcf325e0af6470b0203e0a5bab23fb6e9a/68747470733a2f2f6170692e7472617669732d63692e6f72672f61736c706176656c2f707265747a656c2e706e67\"></a> <a href=\"https://coveralls.io/r/aslpavel/pretzel?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e696001688185c9d5d9e5532a54d7a3dabac8fbf/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f61736c706176656c2f707265747a656c2f62616467652e706e673f6272616e63683d6d6173746572\"></a></p>\n<p>Is an asynchronous application framework for python</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>C# like async/await(async/yield) paradigm for asynchronous\nprogramming (monad base)</li>\n<li>Cool asynchronous I/O loop implementation</li>\n<li>Uniform asynchronous stream implementation for sockets and pipes</li>\n<li>Interact with subprocesses asynchronously</li>\n<li>Greenlet support (but not required)</li>\n<li>Remote code executing over ssh or in child process (with only\nrequirements python and ssh)</li>\n<li>Python 2/3, PyPy (starting from 2.0) compatible</li>\n<li>Asynchronous python shell <tt>python <span class=\"pre\">-mpretzel.apps.shell</span></tt> (requires\ngreenlet)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>As git submodule:\n<tt>git submodule add <span class=\"pre\">git://github.com/aslpavel/pretzel.git</span> &lt;path_to_submodule&gt;</tt>\nPip from git:\n<tt>pip install <span class=\"pre\">git+git://github.com/aslpavel/pretzel-pkg.git</span></tt> Pip from\nPyPI <tt>pip install pretzel</tt></p>\n</div>\n<div id=\"approach\">\n<h2>Approach</h2>\n<p>Usage of asynchronous functions is similar to C# async/await but instead\nof <tt>async</tt> attribute it uses <tt>@async</tt> decorator and instead of\n<tt>await</tt> keyword, <tt>yield</tt> is used. Internally unit of asynchrony is\nimplemented as continuation monad <tt>Cont</tt> with embedded <tt>Result</tt>\nmonad (similar to Haskell\u2019s <tt>Cont</tt> and <tt>Either</tt> monads) as its\nvalue. One important difference of <tt>Cont</tt> monad from C# <tt>Task</tt>\nobject, is that <tt>Task</tt> represents already running asynchronous\noperation, but continuation monad is a sequence of computations, and\nthis computations are not started. <tt>.future()</tt> method on instance of\n<tt>Cont</tt> can be used to create <tt>Task</tt> like object. To use this library\nyou don\u2019t have to understand notion of the monad. Simple asynchronous\nfunction would look like this.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pretzel.monad</span> <span class=\"kn\">import</span> <span class=\"k\">async</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.core</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"nd\">@async</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_after</span><span class=\"p\">(</span><span class=\"n\">delay</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n  <span class=\"sd\">\"\"\"Calls print function after the lapse of `delay` sedonds.\n  \"\"\"</span>\n  <span class=\"k\">yield</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">delay</span><span class=\"p\">)</span>  <span class=\"c1\"># execution will be resumed in delay seconds</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>To return something meaningful in python3 you can just use <tt>return</tt>\nkeyword, but in python2 you have to use <tt>do_return</tt> function (it will\nalso work in python3) as <tt>return</tt> with value cannot be used inside a\ngenerator function. Result of such asynchronous function is again a\ncontinuation monad, if exception is thrown during execution of its body,\nit is marshaled to receiver of the result and can be processed\ncorrectly. For example.</p>\n<pre><span class=\"nd\">@async</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_error</span><span class=\"p\">():</span>\n  <span class=\"nd\">@async</span>\n  <span class=\"k\">def</span> <span class=\"nf\">throw_after</span><span class=\"p\">(</span><span class=\"n\">delay</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">delay</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span> <span class=\"n\">error</span>\n\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">throw_after</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'test error'</span><span class=\"p\">))</span>\n  <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n    <span class=\"c1\"># process error in a meaningfull way</span>\n  <span class=\"n\">do_return</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>  <span class=\"c1\"># exectly equivalent to: return 'done'</span>\n</pre>\n<p>Asynchronous values (continuation monads) can be composed with two\nhelper functions <tt>async_all</tt> and <tt>async_any</tt>.</p>\n<pre><span class=\"nd\">@async</span>\n<span class=\"k\">def</span> <span class=\"nf\">composition_example</span><span class=\"p\">():</span>\n  <span class=\"k\">yield</span> <span class=\"n\">async_all</span><span class=\"p\">([</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)])</span>  <span class=\"c1\"># will be resumed in 2 seconds</span>\n  <span class=\"k\">yield</span> <span class=\"n\">async_any</span><span class=\"p\">([</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)])</span>  <span class=\"c1\"># will be resumed in 1 sedond</span>\n\n  <span class=\"n\">result_all</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">async_all</span><span class=\"p\">([</span><span class=\"n\">func1</span><span class=\"p\">(),</span> <span class=\"n\">func2</span><span class=\"p\">()])</span>  <span class=\"c1\"># = (result1, result2)</span>\n  <span class=\"n\">reuslt_any</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">async_any</span><span class=\"p\">([</span><span class=\"n\">func1</span><span class=\"p\">(),</span> <span class=\"n\">func2</span><span class=\"p\">()])</span>  <span class=\"c1\"># = result1 | result2</span>\n</pre>\n<p><tt>Cont</tt> monad can also be called with callback function as its\nargument, in this case, on completion of asynchronous operation,\ncallback will be called with <tt>Result</tt> monad. If callback function is\nnot specified default, then default continuation callback will be used\nwhich only reports errors if any.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"nb\">print</span><span class=\"p\">)</span>\n<span class=\"n\">Result</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">:</span><span class=\"mf\">1374307530.015137</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)()</span>\n<span class=\"p\">[</span><span class=\"n\">continuation</span><span class=\"p\">]</span> <span class=\"n\">error</span> <span class=\"ow\">in</span> <span class=\"n\">coroutine</span> <span class=\"n\">started</span> <span class=\"kn\">from</span>\n  <span class=\"nn\">File</span> <span class=\"s2\">\"&lt;console&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"err\">`</span><span class=\"o\">-------------------------------------------------------------------------------</span>\n<span class=\"n\">Host</span>   <span class=\"p\">:</span> <span class=\"n\">fiend</span>\n<span class=\"n\">Process</span><span class=\"p\">:</span> <span class=\"mi\">13492</span>\n<span class=\"n\">Error</span>  <span class=\"p\">:</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"unsupported operand type(s) for +: 'float' and 'NoneType'\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"./pretzel/monad/do.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">do_block</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"./pretzel/core/core.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">sleep</span>\n    <span class=\"n\">do_done</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time_queue</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">delay</span><span class=\"p\">))</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">unsupported</span> <span class=\"n\">operand</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"o\">+</span><span class=\"p\">:</span> <span class=\"s1\">'float'</span> <span class=\"ow\">and</span> <span class=\"s1\">'NoneType'</span>\n</pre>\n<p>Inside body of asynchronous function you can <tt>yield</tt> not only <tt>Cont</tt>\nmonad directly, but any object implementing <tt>.__monad__()</tt> method\nwhich returns <tt>Cont</tt> monad. There are many such types in this library,\nfor example <tt>Event</tt></p>\n<pre><span class=\"nd\">@async</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"k\">yield</span> <span class=\"n\">event</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"k\">yield</span> <span class=\"n\">event</span><span class=\"p\">))</span>\n<span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">func</span><span class=\"p\">()()</span>     <span class=\"c1\"># 1 is printed</span>\n<span class=\"n\">event</span><span class=\"p\">(</span><span class=\"s1\">'e0'</span><span class=\"p\">)</span>  <span class=\"c1\"># 2 is printed</span>\n<span class=\"n\">event</span><span class=\"p\">(</span><span class=\"s1\">'e1'</span><span class=\"p\">)</span>  <span class=\"c1\"># 'e1' is printed</span>\n</pre>\n</div>\n<div id=\"main-loop\">\n<h2>Main loop</h2>\n<p><tt>Core</tt> class implements I/O loop, and it is used internally to\nimplement asynchronous streams, timers and more. Previously used\n<tt>sleep</tt> function will work correctly only in presence of running I/O\nloop. Simplest way to intialize and use <tt>Core</tt> object is to use\n<tt>@app</tt> decorator.</p>\n<pre><span class=\"sd\">\"\"\"Minimal pretzel application\n\nSleeps for one second, then prints 'done' and exits.\n\"\"\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.app</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.core</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"nd\">@app</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n  <span class=\"k\">yield</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>See <a href=\"https://github.com/aslpavel/pretzel/blob/master/core/__init__.py\" rel=\"nofollow\">Core\u2019s init\nmodule</a>\nfor full list of available functions and their descriptions.</p>\n</div>\n<div id=\"remoting\">\n<h2>Remoting</h2>\n<p>Main reason for creation of this framework was to execute code on a set\nof machines via ssh connection. It is achieved by usage of\n<tt>SSHConnection</tt> class. <tt>SSHConnection</tt> is a callable object which\nreturns proxy object for its argument. You can call proxy object, get\nits attributes or items <tt>proxy[item]</tt>, result of such operations is\nagain a proxy object with this embedded operations. Proxy implements\nmonad interface, and to get result of embedded chain of operations you\ncan yield it inside asynchronous function. In this example we create\nproxy for <tt>os.getpid</tt> function, call it and then execute on remote\nprocess by yielding it. There is no need for pretzel to be installed on\nremote machine.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.app</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.remoting</span> <span class=\"kn\">import</span> <span class=\"n\">SSHConnection</span>\n\n<span class=\"nd\">@app</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n  <span class=\"sd\">\"\"\"Connect to localhost via ssh and print remote process's pid\n\n  Note:\n    You have to be able to login to the remote host without\n    entering any password (by means of ssh keys) otherwise\n    connecition will fail.\n  \"\"\"</span>\n  <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"k\">yield</span> <span class=\"n\">SSHConnection</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"k\">yield</span> <span class=\"n\">conn</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">)()))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Connection can marshal any pickle-able object, or <tt>Sender</tt> object plus\nany object which is reducible to set of pickle-able and <tt>Sender</tt>\nobjects. <tt>Proxy</tt> and <tt>Connection</tt> itself are examples of such\nobjects. You can also create proxy object from any arbitrary object with\n<tt>proxify</tt> or <tt>proxify_func</tt>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.app</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.remoting</span> <span class=\"kn\">import</span> <span class=\"n\">SSHConnection</span><span class=\"p\">,</span> <span class=\"n\">proxify</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Remote</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n  <span class=\"sd\">\"\"\"Object which will be used remotely\n  \"\"\"</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">getpid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n  <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"k\">yield</span> <span class=\"n\">SSHConnection</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"k\">yield</span> <span class=\"n\">proxify</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">(</span><span class=\"n\">Remote</span><span class=\"p\">)()))</span> <span class=\"k\">as</span> <span class=\"n\">o</span><span class=\"p\">:</span>  <span class=\"c1\"># remote object proxy</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span> <span class=\"p\">(</span><span class=\"k\">yield</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()))</span>    <span class=\"c1\"># prints two different pids</span>\n      <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"k\">yield</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()))</span>  <span class=\"c1\"># prints 1</span>\n      <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"k\">yield</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()))</span>  <span class=\"c1\"># prints 2</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>But <tt>Cont</tt> monad is not marshallable, that is why there is special\noperation on proxy object <tt>~</tt> which is equivalent to <tt>yield</tt> inside\nasynchronous function. Here is an example of remote execution of\nasynchronous function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pretzel.app</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.process</span> <span class=\"kn\">import</span> <span class=\"n\">process_call</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.remoting</span> <span class=\"kn\">import</span> <span class=\"n\">SSHConnection</span>\n\n<span class=\"nd\">@app</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n  <span class=\"sd\">\"\"\"Execute 'ls' on remote machine and show result of the execution\n  \"\"\"</span>\n  <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"k\">yield</span> <span class=\"n\">SSHConnection</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"o\">~</span><span class=\"n\">conn</span><span class=\"p\">(</span><span class=\"n\">process_call</span><span class=\"p\">)(</span><span class=\"s1\">'ls'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>There is also a way to work with multiple connections as if it one, by\nmeans of <tt>composite_ssh_conn</tt>. It accepts list of hosts and returns\ncomposite connection, which behaves as ordinary connection but returns\nset of results.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.app</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.remoting</span> <span class=\"kn\">import</span> <span class=\"n\">composite_ssh_conn</span>\n\n<span class=\"nd\">@app</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n  <span class=\"n\">hosts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"s1\">'localhost'</span><span class=\"p\">]</span>\n  <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"k\">yield</span> <span class=\"n\">composite_ssh_conn</span><span class=\"p\">(</span><span class=\"n\">hosts</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">conns</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">conns</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">)()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>  <span class=\"c1\"># List(25163, 25162) - iterable object of pids</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Remoting submodule can be used as workaround for python\u2019s GIL, in a\nsimilar fashion to <tt>multiprocessing</tt> module. You can use\n<tt>ForkConnection</tt> (or <tt>composite_fork_conn</tt>) which behaves as\n<tt>SSHConnection</tt> but instead of connecting via ssh, it just spawns new\nprocess.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.app</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pretzel.remoting</span> <span class=\"kn\">import</span> <span class=\"n\">composite_fork_conn</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">computation_heavy_task</span><span class=\"p\">():</span>\n  <span class=\"sd\">\"\"\"Some computation intensive task\n  \"\"\"</span>\n  <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n  <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n  <span class=\"n\">stop_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n  <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">stop_time</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n  <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"k\">yield</span> <span class=\"n\">composite_fork_conn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">conns</span><span class=\"p\">:</span>  <span class=\"c1\"># create 10 connections</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">conns</span><span class=\"p\">(</span><span class=\"n\">computation_heavy_task</span><span class=\"p\">)()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>  <span class=\"c1\"># prints List(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<ul>\n<li><a href=\"https://gist.github.com/aslpavel/5635559\" rel=\"nofollow\">Simple echo server</a></li>\n<li><a href=\"https://gist.github.com/aslpavel/5635610\" rel=\"nofollow\">Cat remote file over\nssh</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 832904, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "fcd6a7f594433bbfbb65b57d6a642e18", "sha256": "d8fd1834b512054fdc01e5dcd698c16944ff7e5aa865736ccdd4708643f0ee4b"}, "downloads": -1, "filename": "pretzel-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fcd6a7f594433bbfbb65b57d6a642e18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68108, "upload_time": "2013-06-13T09:38:08", "upload_time_iso_8601": "2013-06-13T09:38:08.492654Z", "url": "https://files.pythonhosted.org/packages/c3/50/14942cf0c5dbbb8a31297f56c62d580ca0f0b98c6f7c9b36d0860814f6de/pretzel-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "ce78458c5ccd308ddc116f4798b7a038", "sha256": "11068545128627f6958f1f46f8bcc8108dd832aa66a4684d53e7d48b82dfe58b"}, "downloads": -1, "filename": "pretzel-1.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce78458c5ccd308ddc116f4798b7a038", "packagetype": "bdist_wheel", "python_version": "3.3", "requires_python": null, "size": 118814, "upload_time": "2013-08-05T19:51:56", "upload_time_iso_8601": "2013-08-05T19:51:56.945239Z", "url": "https://files.pythonhosted.org/packages/5f/ad/beb4eefbe20deb4d19ef25757df3856c2f22cf33d2e61b6ae532f1034fff/pretzel-1.0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e715a7bf34168237d316c8f3f5b7bdd", "sha256": "5017fe30ce27291b9a2ecb45182c0d9bc78835dd1fe6b6b3f0d38324bc314f4e"}, "downloads": -1, "filename": "pretzel-1.0.10.tar.gz", "has_sig": false, "md5_digest": "6e715a7bf34168237d316c8f3f5b7bdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83840, "upload_time": "2013-08-05T19:51:00", "upload_time_iso_8601": "2013-08-05T19:51:00.482396Z", "url": "https://files.pythonhosted.org/packages/41/9d/4a7be162a793b820948f7c6dba85ed9495cf91d1d3b530091dd6e6d73bf5/pretzel-1.0.10.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "da46e6ab269341843f6ff51f837786a4", "sha256": "62fd3a805dbd2328da3ffc08802bb2a8d9c7089e14d79b5944b48114601b57e8"}, "downloads": -1, "filename": "pretzel-1.0.2.tar.gz", "has_sig": false, "md5_digest": "da46e6ab269341843f6ff51f837786a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68434, "upload_time": "2013-06-13T12:18:57", "upload_time_iso_8601": "2013-06-13T12:18:57.562432Z", "url": "https://files.pythonhosted.org/packages/02/12/5b88ccd5102c0c286db6af2dbc4568abbe52205e1296d1e0188a3a1262f4/pretzel-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "c8643000c1db914f41da6edce31eb455", "sha256": "9df0dc83332b0dae5876cdc955732022bad76ff9bedda0e3d0296554d476b89f"}, "downloads": -1, "filename": "pretzel-1.0.3.tar.gz", "has_sig": false, "md5_digest": "c8643000c1db914f41da6edce31eb455", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70694, "upload_time": "2013-06-21T12:21:53", "upload_time_iso_8601": "2013-06-21T12:21:53.502769Z", "url": "https://files.pythonhosted.org/packages/81/11/2884da79ae3c2144be0245d6b82ca217f72bd1bcedd68710a149840815c3/pretzel-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "a693c756979c5651426973e0862f11f0", "sha256": "c85ec2962fa22bc52e4f2ebae2b30696b26d9f3f7759607fb8b14288cdd22039"}, "downloads": -1, "filename": "pretzel-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a693c756979c5651426973e0862f11f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71326, "upload_time": "2013-06-26T11:21:34", "upload_time_iso_8601": "2013-06-26T11:21:34.782906Z", "url": "https://files.pythonhosted.org/packages/c5/a1/9cbdfdeab83c2e283c7da776123f702c04908ddb91fcc7cbe04f2920e112/pretzel-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "3d28c1360086dd766de043c43e8f1a33", "sha256": "2f2a2648249327e33952384c1b2e05e0f60686698805676cc171abc1fe05555c"}, "downloads": -1, "filename": "pretzel-1.0.5.tar.gz", "has_sig": false, "md5_digest": "3d28c1360086dd766de043c43e8f1a33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71337, "upload_time": "2013-06-30T08:54:17", "upload_time_iso_8601": "2013-06-30T08:54:17.450597Z", "url": "https://files.pythonhosted.org/packages/b7/94/8cf26edc831bd13446557cca9b4cd5e0a1da01be777b77655f1e67e5b984/pretzel-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "2039a4486bafaebaeb5202e46ae795eb", "sha256": "78d76e4be0c4d6f7943dfc931e3f755c4eceb871155458b46c5f4305a55c00ff"}, "downloads": -1, "filename": "pretzel-1.0.6.tar.gz", "has_sig": false, "md5_digest": "2039a4486bafaebaeb5202e46ae795eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76695, "upload_time": "2013-07-03T17:20:40", "upload_time_iso_8601": "2013-07-03T17:20:40.578936Z", "url": "https://files.pythonhosted.org/packages/a1/6d/8f6110d9364ac45c3ed79a8fe040ed8594cc1d53773aa9f1f1b9138cab20/pretzel-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "71c17a34455740773c3d23b3a6afe09f", "sha256": "aee80b12c46bf5929e27ff4c3c63deeb0bbf505675883144593b81e43ed49c53"}, "downloads": -1, "filename": "pretzel-1.0.7.tar.gz", "has_sig": false, "md5_digest": "71c17a34455740773c3d23b3a6afe09f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81880, "upload_time": "2013-07-22T08:42:53", "upload_time_iso_8601": "2013-07-22T08:42:53.428244Z", "url": "https://files.pythonhosted.org/packages/93/93/b415103582dadce849cd6dcf8afe55be1cdbf1af1e99eb5edd5eb1045fbf/pretzel-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "bcf0e945f20b1126b950fd51d10bacd7", "sha256": "ff65c8a83b5bb444249947d05f07998725639bd50791465609e5e297bc5898ce"}, "downloads": -1, "filename": "pretzel-1.0.8.tar.gz", "has_sig": false, "md5_digest": "bcf0e945f20b1126b950fd51d10bacd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81989, "upload_time": "2013-07-22T09:22:50", "upload_time_iso_8601": "2013-07-22T09:22:50.694375Z", "url": "https://files.pythonhosted.org/packages/60/29/c7e28739c77fee88b0997de3590ac265f893351075a9e67139d12ec97eac/pretzel-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "34d83c193936a71e8af0eaf747738a30", "sha256": "e3d81ec63610e98d129da4c4e11193a6d7c4abb3b0e97c5476142089f26c5b57"}, "downloads": -1, "filename": "pretzel-1.0.9.tar.gz", "has_sig": false, "md5_digest": "34d83c193936a71e8af0eaf747738a30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82063, "upload_time": "2013-07-31T14:51:45", "upload_time_iso_8601": "2013-07-31T14:51:45.304621Z", "url": "https://files.pythonhosted.org/packages/5a/9f/a54ccef6887e3feacc5216b864b39484b9e498d308d1330bdd07a7e5abc0/pretzel-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce78458c5ccd308ddc116f4798b7a038", "sha256": "11068545128627f6958f1f46f8bcc8108dd832aa66a4684d53e7d48b82dfe58b"}, "downloads": -1, "filename": "pretzel-1.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce78458c5ccd308ddc116f4798b7a038", "packagetype": "bdist_wheel", "python_version": "3.3", "requires_python": null, "size": 118814, "upload_time": "2013-08-05T19:51:56", "upload_time_iso_8601": "2013-08-05T19:51:56.945239Z", "url": "https://files.pythonhosted.org/packages/5f/ad/beb4eefbe20deb4d19ef25757df3856c2f22cf33d2e61b6ae532f1034fff/pretzel-1.0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e715a7bf34168237d316c8f3f5b7bdd", "sha256": "5017fe30ce27291b9a2ecb45182c0d9bc78835dd1fe6b6b3f0d38324bc314f4e"}, "downloads": -1, "filename": "pretzel-1.0.10.tar.gz", "has_sig": false, "md5_digest": "6e715a7bf34168237d316c8f3f5b7bdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83840, "upload_time": "2013-08-05T19:51:00", "upload_time_iso_8601": "2013-08-05T19:51:00.482396Z", "url": "https://files.pythonhosted.org/packages/41/9d/4a7be162a793b820948f7c6dba85ed9495cf91d1d3b530091dd6e6d73bf5/pretzel-1.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:32 2020"}