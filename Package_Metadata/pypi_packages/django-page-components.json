{"info": {"author": "Andrey Fedoseev", "author_email": "andrey.fedoseev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP"], "description": "======================\ndjango-page-components\n======================\n\n\"Page component\" is a unit of a user interface (think ReactJS components). ``django-page-components`` provide\na minimalistic framework for creating page components and using them in your Django views and templates.\n\nTo define a page component you need to create a sub-class of ``page_components.PageComponent``\nand implement ``render`` method like so:\n\n.. code-block:: python\n\n    import page_components\n    import django.utils.html\n\n\n    class AddToCartButton(page_components.PageComponent):\n\n        def __init__(self, product):\n            self.product = product\n\n        class Media:\n            js = (\n                \"add-to-cart.js\",  # this is where addToCart is defined\n            )\n            css = {\n                \"all\": (\n                    \"add-to-cart.css\"  # this is where `.add-to-card` styles are defined\n                )\n            }\n\n        def render(self):\n            return django.utils.html.format_html(\n                \"\"\"<button class=\"add-to-cart\" onclick=\"addToCart({ product_id })\">Add to cart</button>\"\"\",\n                product_id=self.product.id\n            )\n\n\nYou can also use a ``TemplatePageComponent`` base class to implement page components based on templates.\nIn that case you may want to implement ``get_context_data`` method:\n\n.. code-block:: python\n\n    class AddToCartButton(page_components.TemplatePageComponent):\n\n        template_name = \"add-to-cart-button.html\"\n\n        ...\n\n        def get_context_data(self, **kwargs):\n            kwargs[\"product_id\"] = self.product_id\n            return super(AddToCartButton, self).get_context_data(**kwargs)\n\nNote that it's up to you to decide how to implement the ``render`` method and what additional methods should be added\nto your page components. One general recommendation is to keep the ``__init__`` method as lightweight as possible and do\nall the heavy lifting in the ``render`` method.\n\nA proposed convention is to store your page components classes in ``page_components`` package/module inside your app::\n\n    myapp.page_components.AddToCartButton\n\nNow, when we have some page components defined it is time to use them in views:\n\n.. code-block:: python\n\n    import django.views.generic\n    import page_components\n\n    import myapp.models\n    import myapp.page_components\n\n    class ProductPage(\n        page_components.PageComponentsView,\n        django.views.generic.DetailView,\n    ):\n\n        model = myapp.models.Product\n        template_name = \"product.html\"\n\n        def get_page_components(self):\n            return {\n                \"add_to_cart_button\": myapp.page_components.AddToCartButton(self.object)\n            }\n\n\nand templates:\n\n.. code-block:: html\n\n    <html>\n      <head>\n        /* this will include CSS files for all page components on that page */\n        {{ view.media.css.render }}\n      </head>\n      <body>\n        <h1>{{ object.title }}</h1>\n        {{ page_components.add_to_cart_button }}\n\n        /* this will include JavaScript files for all page components on that page */\n        {{ view.media.js.render }}\n      </body>\n    </html>\n\nNote that page components are placed to ``page_components`` namespace in template context by default. You can change\nthat namespace on per-view basis by adding ``page_components_context_name`` attribute to a view class, or globally with\n``PAGE_COMPONENTS_CONTEXT_NAME`` setting. If you set ``page_components_context_name`` to ``None`` it will disable\nthe namespace entirely.\n\n\n=======\nChanges\n=======\n\n0.1\n===\n\n - Initial release\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andreyfedoseev/django-page-components", "keywords": "django", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-page-components", "package_url": "https://pypi.org/project/django-page-components/", "platform": "", "project_url": "https://pypi.org/project/django-page-components/", "project_urls": {"Homepage": "https://github.com/andreyfedoseev/django-page-components"}, "release_url": "https://pypi.org/project/django-page-components/0.1/", "requires_dist": null, "requires_python": "", "summary": "Mini-framework for creating re-usable UI components for Django", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-page-components\">\n<h2>django-page-components</h2>\n<p>\u201cPage component\u201d is a unit of a user interface (think ReactJS components). <tt><span class=\"pre\">django-page-components</span></tt> provide\na minimalistic framework for creating page components and using them in your Django views and templates.</p>\n<p>To define a page component you need to create a sub-class of <tt>page_components.PageComponent</tt>\nand implement <tt>render</tt> method like so:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">page_components</span>\n<span class=\"kn\">import</span> <span class=\"nn\">django.utils.html</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AddToCartButton</span><span class=\"p\">(</span><span class=\"n\">page_components</span><span class=\"o\">.</span><span class=\"n\">PageComponent</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">product</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">product</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Media</span><span class=\"p\">:</span>\n        <span class=\"n\">js</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">\"add-to-cart.js\"</span><span class=\"p\">,</span>  <span class=\"c1\"># this is where addToCart is defined</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"all\"</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n                <span class=\"s2\">\"add-to-cart.css\"</span>  <span class=\"c1\"># this is where `.add-to-card` styles are defined</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">format_html</span><span class=\"p\">(</span>\n            <span class=\"sd\">\"\"\"&lt;button class=\"add-to-cart\" onclick=\"addToCart({ product_id })\"&gt;Add to cart&lt;/button&gt;\"\"\"</span><span class=\"p\">,</span>\n            <span class=\"n\">product_id</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>You can also use a <tt>TemplatePageComponent</tt> base class to implement page components based on templates.\nIn that case you may want to implement <tt>get_context_data</tt> method:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AddToCartButton</span><span class=\"p\">(</span><span class=\"n\">page_components</span><span class=\"o\">.</span><span class=\"n\">TemplatePageComponent</span><span class=\"p\">):</span>\n\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"add-to-cart-button.html\"</span>\n\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">\"product_id\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">product_id</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">AddToCartButton</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Note that it\u2019s up to you to decide how to implement the <tt>render</tt> method and what additional methods should be added\nto your page components. One general recommendation is to keep the <tt>__init__</tt> method as lightweight as possible and do\nall the heavy lifting in the <tt>render</tt> method.</p>\n<p>A proposed convention is to store your page components classes in <tt>page_components</tt> package/module inside your app:</p>\n<pre>myapp.page_components.AddToCartButton\n</pre>\n<p>Now, when we have some page components defined it is time to use them in views:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">django.views.generic</span>\n<span class=\"kn\">import</span> <span class=\"nn\">page_components</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">myapp.models</span>\n<span class=\"kn\">import</span> <span class=\"nn\">myapp.page_components</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductPage</span><span class=\"p\">(</span>\n    <span class=\"n\">page_components</span><span class=\"o\">.</span><span class=\"n\">PageComponentsView</span><span class=\"p\">,</span>\n    <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">generic</span><span class=\"o\">.</span><span class=\"n\">DetailView</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">myapp</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Product</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"product.html\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_page_components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"add_to_cart_button\"</span><span class=\"p\">:</span> <span class=\"n\">myapp</span><span class=\"o\">.</span><span class=\"n\">page_components</span><span class=\"o\">.</span><span class=\"n\">AddToCartButton</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>and templates:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    /* this will include CSS files for all page components on that page */\n    {{ view.media.css.render }}\n  <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>{{ object.title }}<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n    {{ page_components.add_to_cart_button }}\n\n    /* this will include JavaScript files for all page components on that page */\n    {{ view.media.js.render }}\n  <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Note that page components are placed to <tt>page_components</tt> namespace in template context by default. You can change\nthat namespace on per-view basis by adding <tt>page_components_context_name</tt> attribute to a view class, or globally with\n<tt>PAGE_COMPONENTS_CONTEXT_NAME</tt> setting. If you set <tt>page_components_context_name</tt> to <tt>None</tt> it will disable\nthe namespace entirely.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1</span></h2>\n<blockquote>\n<ul>\n<li>Initial release</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 6485173, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7d83326f9ad7c368b89922d8559f40a3", "sha256": "a9ec0517917c7a8be0671592872cb312c2e3d001a90b2bcc598b350d67f5421d"}, "downloads": -1, "filename": "django-page-components-0.1.tar.gz", "has_sig": false, "md5_digest": "7d83326f9ad7c368b89922d8559f40a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5141, "upload_time": "2018-02-12T17:36:28", "upload_time_iso_8601": "2018-02-12T17:36:28.502707Z", "url": "https://files.pythonhosted.org/packages/8e/ff/ec675de66e44a5dac7c5a52695870059125813dd1610c8537af3ec9de0c2/django-page-components-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d83326f9ad7c368b89922d8559f40a3", "sha256": "a9ec0517917c7a8be0671592872cb312c2e3d001a90b2bcc598b350d67f5421d"}, "downloads": -1, "filename": "django-page-components-0.1.tar.gz", "has_sig": false, "md5_digest": "7d83326f9ad7c368b89922d8559f40a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5141, "upload_time": "2018-02-12T17:36:28", "upload_time_iso_8601": "2018-02-12T17:36:28.502707Z", "url": "https://files.pythonhosted.org/packages/8e/ff/ec675de66e44a5dac7c5a52695870059125813dd1610c8537af3ec9de0c2/django-page-components-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:19 2020"}