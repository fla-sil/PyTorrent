{"info": {"author": "Jason Farquhar", "author_email": "jason@mindaffect.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "mindaffectBCI\n=============\nThis repository contains the python SDK code for the Brain Computer Interface (BCI) developed by the company [Mindaffect](https://mindaffect.nl).\n\nFile Structure\n--------------\nThis repository is organized roughly as follows:\n\n - `mindaffectBCI` - contains the python package containing the mindaffectBCI SDK.  Important modules within this package are:\n\n   - noisetag.py - This module contains the main API for developing User Interfaces with BCI control\n   - utopiaController.py - This module contains the application level APIs for interacting with the MindAffect Decoder.\n   - utopiaclient.py - This module contains the low-level networking functions for communicating with the MindAffect Decoder - which is normally a separate computer running the eeg analysis software.\n   - stimseq.py -- This module contains the low-level functions for loading and codebooks - which define how the presented stimuli will look.\n\n - `codebooks` - Contains the most common noisetagging codebooks as text files\n - `examples` - contains python based examples for Presentation and Output parts of the BCI. Important sub-directories\n\n   - output - Example output modules.  An output module translates BCI based selections into actions.\n   - presentation - Example presentation modules.  A presentation module, presents the BCI stimulus to the user, and is normally the main UI.\n\nInstalling mindaffectBCI\n------------------------\n\nThat's easy::\n\n  pip3 install mindaffectBCI\n\n\nTesting the mindaffectBCI SDK\n-----------------------------\n\nThis SDK provides the functionality needed to add Brain Controls to your own applications.  However, it *does not* provide the actual brain measuring hardware (i.e. EEG) or the brain-signal decoding algorithms. \n\nIn order to allow you to develop and test your Brain Controlled applications without connecting to a real mindaffect Decoder, we provide a so called \"fake recogniser\".  This fake recogniser simulates the operation of the true mindaffect decoder to allow easy development and debugging.  Before starting with the example output and presentation modules.  You can download the fakerecogniser from our [github page](https://github.com/mindaffect/pymindaffectBCI/tree/master/bin)\n\nYou should start this fake recogniser by running, either ::\n\n  bin/startFakeRecogniser.bat\n\nif running on windows, or  ::\n\n  bin/startFakeRecogniser.sh\n\nif running on linux/macOS\n\nIf successfull, running these scripts should open a terminal window which shows the messages recieved/sent from your example application.\n\nNote: The fakerecogniser is written in [java](https://www.java.com), so you will need a JVM with version >8 for it to run.  If needed download from [here](https://www.java.com/ES/download/)\n\nQuick Installation Test\n-----------------------\n\nYou can run a quick test if the installation is correct by running::\n\n  python3 -m mindaffectBCI.noisetag\n\nEssentially, this run the SDK test code which pretends to run a full BCI sequence, with decoder discovery, calibration and prediction.  If you have the fakerecognise running then this should do this in a terminal and generate a lot of text saying things like: `cal 1/10`.\n\nQuick BCI Test\n--------------\n\nIf you have installed [pyglet](pyglet.org), e.g. using `pip3 install pyglet`, then you can also try some more advanced fully BCI exmaples with stimulation.  For a simple letter matrix test run::\n\n  python3 -m mindaffectBCI.examples.presentation.selectionMatrix\n\n\nSimple *output* module\n------------------------\n\nAn output module listens for selections from the mindaffect decoder and acts on them to create some output.  Here we show how to make a simple output module which print's \"Hello World\" when the presentation 'button' with ID=1 is selected.\n\nNote: Note: this should be in a separate file from the *output* example above.  You can find the complete code for this minimal-presentation on our [github](https://github.com/mindaffect/pymindaffectBCI/blob/master/mindaffectBCI/examples/output/minimal_output.py)\n\n\n.. code:: python\n\n  # Import the utopia2output module\n  from mindaffectBCI.utopia2output import Utopia2Output\n\n\nNow we can create an utopia2output object and connect it to a running mindaffect BCI decoder. \n\n.. code:: python\n\n  u2o=Utopia2Output()\n  u2o.connect()\n\n\n(Note: For this to succeed you must have a real or simulated mindaffectBCI decoder running somewhere on your network.)\n\nNow we define a function to print hello-world\n\n.. code:: python\n\n  def helloworld(objID):\n     print(\"hello world\")\n\n\nAnd connect it so it is run when the object with ID=1 is selected.\n\n\n.. code:: python\n\n  # set the objectID2Action dictionary to use our helloworld function if 1 is selected \n  u2o.objectID2Action={ 1:helloworld }\n\n\nFinally, run the main loop\n\n.. code:: python\n\n  u2o.run()\n\n\nFor more complex output examples, and examples for controlling a [lego boost](https://www.lego.com/en-gb/themes/boost) robot, or a [philips Hue](https://www2.meethue.com/en-us) controllable light, look in the `examples\\output` directory. \n\nSimple *presention* module\n----------------------------\n\nPresentation is inherently more complex that output as we must display the correct stimuli to the user with precise timing and communicate this timing information to the mindaffect decoder.  Further, for the BCI operation we need to operation in (at least),\n\n- _calibration_ mode where we cue the user where to attend to obtain correctly labelled brain data to train the machine learning algorithms in the decoder and\n- _prediction_ mode where the user actually uses the BCI to make selections.\n\nThe *noisetag* module mindaffectBCI SDK provides a number of tools to hide this complexity from the application developers.  Using the most extreeem of these all the application developer has to do is provide a function to _draw_ the display as instructed by the noisetag module.\n\nNote: this should be in a separate file from the *output* example above.  You can find the complete code for this minimal-presentation on our [github](https://github.com/mindaffect/pymindaffectBCI/blob/master/mindaffectBCI/examples/presentation/minimal_presentation.py)\n\nTo use this.  Import the module and creat the noisetag object.\n\n.. code:: python\n\n  from mindaffectBCI.noisetag import Noisetag\n  nt = Noisetag()\n  nt.connect()\n\n\nNote\\: Creation of the `Noisetag` object will also implictly create a connection to any running mindaffectBCI decoder - so you should have one running somewhere on your network.\n\nWrite a function to draw the screen.  Here we will use the python gaming librar [pyglet](www.pyglet.org) to draw 2 squares on the screen, with the given colors.\n\n\n.. code:: python\n\n  import pyglet\n  # make a default window, with fixed size for simplicty\n  window=pyglet.window.Window(width=640,height=480)\n\n  # define a simple 2-squares drawing function\n  def draw_squares(col1,col2):\n    # draw square 1: @100,190 , width=100, height=100\n    x=100; y=190; w=100; h=100;\n    pyglet.graphics.draw(4,pyglet.gl.GL_QUADS,\n                         ('v2f',(x,y,x+w,y,x+w,y+h,x,y+h)),\n\t\t\t                   ('c3f',(col1)*4))\n    # draw square 2: @440,100\n    x=640-100-100\n    pyglet.graphics.draw(4,pyglet.gl.GL_QUADS,\n                         ('v2f',(x,y,x+w,y,x+w,y+h,x,y+h)),\n\t\t\t                   ('c3f',(col2)*4))    \n\n\nNow, we need a bit of python hacking.  Because our BCI depends on accurate timelock of the brain data (EEG) with the visual display, we need to have accurate time-stamps for when the display changes.  Fortunately, pyglet allows us to get this accuracy as it provides a `flip` method on windows which blocks until the display is actually updated.  Thus we can use this to generate accurate time-stamps.   We do this by adding a time-stamp recording function to the windows normal `flip` method with the following magic:\n\n.. code:: python\n\n  # override window's flip method to record the exact *time* the\n  # flip happended\n  def timedflip(self):\n    '''pseudo method type which records the timestamp for window flips'''\n    type(self).flip(self) # call the 'real' flip method...\n    self.lastfliptime=nt.getTimeStamp()\n  import types\n  window.flip = types.MethodType(timedflip,window)\n  # ensure the field is already there.\n  window.lastfliptime=nt.getTimeStamp()\n\n\nNow we write a function which,\n1) asks the `noisetag` framework how the selectable squares should look,\n2) updates the `noisetag` framework with information about how the display was updated.\n\n\n.. code:: python\n\n  # dictionary mapping from stimulus-state to colors\n  state2color={0:(.2,.2,.2), # off=grey\n               1:(1,1,1),    # on=white\n               2:(0,1,0),    # cue=green\n  \t       3:(0,0,1)}    # feedback=blue\n  def draw(dt):\n    # send info on the *previous* stimulus state.\n    # N.B. we do it here as draw is called as soon as the vsync happens\n    nt.sendStimulusState(timestamp=window.lastfliptime)\n    # update and get the new stimulus state to display\n    # N.B. update raises StopIteration when noisetag sequence has finished\n    try : \n        nt.updateStimulusState()\n        stimulus_state,target_state,objIDs,sendEvents=nt.getStimulusState()\n    except StopIteration :\n        pyglet.app.exit() # terminate app when noisetag is done\n        return\n    # draw the display with the instructed colors\n    # draw the display with the instructed colors\n    if stimulus_state : \n        draw_squares(state2color[stimulus_state[0]],\n                     state2color[stimulus_state[1]])\n\n\nAs a final step we can attached a **selection** callback which will be called whenever a selection is made by the BCI.\n\n.. code:: python\n\n  # define a trival selection handler\n  def selectionHandler(objID):\n    print(\"Selected: %d\"%(objID))    \n  nt.addSelectionHandler(selectionHandler)\n\nFinally, we tell the `noisetag` module to run a complete BCI 'experiment' with calibration and feedback mode, and start the `pyglet` main loop.\n\n\n.. code:: python\n\n  # tell the noisetag framework to run a full : calibrate->prediction sequence\n  nt.setnumActiveObjIDs(2)  # say that we have 2 objects flickering\n  nt.startExpt(nCal=10,nPred=10)\n  # run the pyglet main loop\n  pyglet.clock.schedule(draw)\n  pyglet.app.run()\n\nThis will then run a full BCI with 10 *cued* calibration trials, and uncued prediction trials.   During the calibration trials a square turning green shows this is the cued direction.  During the prediction phase a square turning blue shows the selection by the BCI.\n\nFor more complex presentation examples, including a full 6x6 character typing keyboard, and a color-wheel for controlling a [philips Hue light](https://www2.meethue.com/en-us) see the `examples/presentation` directory.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mindaffect/pymindaffectBCI", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mindaffectBCI", "package_url": "https://pypi.org/project/mindaffectBCI/", "platform": "", "project_url": "https://pypi.org/project/mindaffectBCI/", "project_urls": {"Homepage": "http://github.com/mindaffect/pymindaffectBCI"}, "release_url": "https://pypi.org/project/mindaffectBCI/0.9.9/", "requires_dist": null, "requires_python": ">=3.5", "summary": "The MindAffect BCI python SDK", "version": "0.9.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This repository contains the python SDK code for the Brain Computer Interface (BCI) developed by the company [Mindaffect](<a href=\"https://mindaffect.nl\" rel=\"nofollow\">https://mindaffect.nl</a>).</p>\n<div id=\"file-structure\">\n<h2>File Structure</h2>\n<p>This repository is organized roughly as follows:</p>\n<blockquote>\n<ul>\n<li><cite>mindaffectBCI</cite> - contains the python package containing the mindaffectBCI SDK.  Important modules within this package are:<ul>\n<li>noisetag.py - This module contains the main API for developing User Interfaces with BCI control</li>\n<li>utopiaController.py - This module contains the application level APIs for interacting with the MindAffect Decoder.</li>\n<li>utopiaclient.py - This module contains the low-level networking functions for communicating with the MindAffect Decoder - which is normally a separate computer running the eeg analysis software.</li>\n<li>stimseq.py \u2013 This module contains the low-level functions for loading and codebooks - which define how the presented stimuli will look.</li>\n</ul>\n</li>\n<li><cite>codebooks</cite> - Contains the most common noisetagging codebooks as text files</li>\n<li><cite>examples</cite> - contains python based examples for Presentation and Output parts of the BCI. Important sub-directories<ul>\n<li>output - Example output modules.  An output module translates BCI based selections into actions.</li>\n<li>presentation - Example presentation modules.  A presentation module, presents the BCI stimulus to the user, and is normally the main UI.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installing-mindaffectbci\">\n<h2>Installing mindaffectBCI</h2>\n<p>That\u2019s easy:</p>\n<pre>pip3 install mindaffectBCI\n</pre>\n</div>\n<div id=\"testing-the-mindaffectbci-sdk\">\n<h2>Testing the mindaffectBCI SDK</h2>\n<p>This SDK provides the functionality needed to add Brain Controls to your own applications.  However, it <em>does not</em> provide the actual brain measuring hardware (i.e. EEG) or the brain-signal decoding algorithms.</p>\n<p>In order to allow you to develop and test your Brain Controlled applications without connecting to a real mindaffect Decoder, we provide a so called \u201cfake recogniser\u201d.  This fake recogniser simulates the operation of the true mindaffect decoder to allow easy development and debugging.  Before starting with the example output and presentation modules.  You can download the fakerecogniser from our [github page](<a href=\"https://github.com/mindaffect/pymindaffectBCI/tree/master/bin\" rel=\"nofollow\">https://github.com/mindaffect/pymindaffectBCI/tree/master/bin</a>)</p>\n<p>You should start this fake recogniser by running, either</p>\n<pre>bin/startFakeRecogniser.bat\n</pre>\n<p>if running on windows, or</p>\n<pre>bin/startFakeRecogniser.sh\n</pre>\n<p>if running on linux/macOS</p>\n<p>If successfull, running these scripts should open a terminal window which shows the messages recieved/sent from your example application.</p>\n<p>Note: The fakerecogniser is written in [java](<a href=\"https://www.java.com\" rel=\"nofollow\">https://www.java.com</a>), so you will need a JVM with version &gt;8 for it to run.  If needed download from [here](<a href=\"https://www.java.com/ES/download/\" rel=\"nofollow\">https://www.java.com/ES/download/</a>)</p>\n</div>\n<div id=\"quick-installation-test\">\n<h2>Quick Installation Test</h2>\n<p>You can run a quick test if the installation is correct by running:</p>\n<pre>python3 -m mindaffectBCI.noisetag\n</pre>\n<p>Essentially, this run the SDK test code which pretends to run a full BCI sequence, with decoder discovery, calibration and prediction.  If you have the fakerecognise running then this should do this in a terminal and generate a lot of text saying things like: <cite>cal 1/10</cite>.</p>\n</div>\n<div id=\"quick-bci-test\">\n<h2>Quick BCI Test</h2>\n<p>If you have installed [pyglet](pyglet.org), e.g. using <cite>pip3 install pyglet</cite>, then you can also try some more advanced fully BCI exmaples with stimulation.  For a simple letter matrix test run:</p>\n<pre>python3 -m mindaffectBCI.examples.presentation.selectionMatrix\n</pre>\n</div>\n<div id=\"simple-output-module\">\n<h2>Simple <em>output</em> module</h2>\n<p>An output module listens for selections from the mindaffect decoder and acts on them to create some output.  Here we show how to make a simple output module which print\u2019s \u201cHello World\u201d when the presentation \u2018button\u2019 with ID=1 is selected.</p>\n<p>Note: Note: this should be in a separate file from the <em>output</em> example above.  You can find the complete code for this minimal-presentation on our [github](<a href=\"https://github.com/mindaffect/pymindaffectBCI/blob/master/mindaffectBCI/examples/output/minimal_output.py\" rel=\"nofollow\">https://github.com/mindaffect/pymindaffectBCI/blob/master/mindaffectBCI/examples/output/minimal_output.py</a>)</p>\n<pre><span class=\"c1\"># Import the utopia2output module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mindaffectBCI.utopia2output</span> <span class=\"kn\">import</span> <span class=\"n\">Utopia2Output</span>\n</pre>\n<p>Now we can create an utopia2output object and connect it to a running mindaffect BCI decoder.</p>\n<pre><span class=\"n\">u2o</span><span class=\"o\">=</span><span class=\"n\">Utopia2Output</span><span class=\"p\">()</span>\n<span class=\"n\">u2o</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<p>(Note: For this to succeed you must have a real or simulated mindaffectBCI decoder running somewhere on your network.)</p>\n<p>Now we define a function to print hello-world</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">helloworld</span><span class=\"p\">(</span><span class=\"n\">objID</span><span class=\"p\">):</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"p\">)</span>\n</pre>\n<p>And connect it so it is run when the object with ID=1 is selected.</p>\n<pre><span class=\"c1\"># set the objectID2Action dictionary to use our helloworld function if 1 is selected</span>\n<span class=\"n\">u2o</span><span class=\"o\">.</span><span class=\"n\">objectID2Action</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">helloworld</span> <span class=\"p\">}</span>\n</pre>\n<p>Finally, run the main loop</p>\n<pre><span class=\"n\">u2o</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>For more complex output examples, and examples for controlling a [lego boost](<a href=\"https://www.lego.com/en-gb/themes/boost\" rel=\"nofollow\">https://www.lego.com/en-gb/themes/boost</a>) robot, or a [philips Hue](<a href=\"https://www2.meethue.com/en-us\" rel=\"nofollow\">https://www2.meethue.com/en-us</a>) controllable light, look in the <cite>examplesoutput</cite> directory.</p>\n</div>\n<div id=\"simple-presention-module\">\n<h2>Simple <em>presention</em> module</h2>\n<p>Presentation is inherently more complex that output as we must display the correct stimuli to the user with precise timing and communicate this timing information to the mindaffect decoder.  Further, for the BCI operation we need to operation in (at least),</p>\n<ul>\n<li>_calibration_ mode where we cue the user where to attend to obtain correctly labelled brain data to train the machine learning algorithms in the decoder and</li>\n<li>_prediction_ mode where the user actually uses the BCI to make selections.</li>\n</ul>\n<p>The <em>noisetag</em> module mindaffectBCI SDK provides a number of tools to hide this complexity from the application developers.  Using the most extreeem of these all the application developer has to do is provide a function to _draw_ the display as instructed by the noisetag module.</p>\n<p>Note: this should be in a separate file from the <em>output</em> example above.  You can find the complete code for this minimal-presentation on our [github](<a href=\"https://github.com/mindaffect/pymindaffectBCI/blob/master/mindaffectBCI/examples/presentation/minimal_presentation.py\" rel=\"nofollow\">https://github.com/mindaffect/pymindaffectBCI/blob/master/mindaffectBCI/examples/presentation/minimal_presentation.py</a>)</p>\n<p>To use this.  Import the module and creat the noisetag object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mindaffectBCI.noisetag</span> <span class=\"kn\">import</span> <span class=\"n\">Noisetag</span>\n<span class=\"n\">nt</span> <span class=\"o\">=</span> <span class=\"n\">Noisetag</span><span class=\"p\">()</span>\n<span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<p>Note: Creation of the <cite>Noisetag</cite> object will also implictly create a connection to any running mindaffectBCI decoder - so you should have one running somewhere on your network.</p>\n<p>Write a function to draw the screen.  Here we will use the python gaming librar [pyglet](www.pyglet.org) to draw 2 squares on the screen, with the given colors.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyglet</span>\n<span class=\"c1\"># make a default window, with fixed size for simplicty</span>\n<span class=\"n\">window</span><span class=\"o\">=</span><span class=\"n\">pyglet</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Window</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">640</span><span class=\"p\">,</span><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">480</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># define a simple 2-squares drawing function</span>\n<span class=\"k\">def</span> <span class=\"nf\">draw_squares</span><span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span><span class=\"n\">col2</span><span class=\"p\">):</span>\n  <span class=\"c1\"># draw square 1: @100,190 , width=100, height=100</span>\n  <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">;</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">190</span><span class=\"p\">;</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">;</span> <span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">;</span>\n  <span class=\"n\">pyglet</span><span class=\"o\">.</span><span class=\"n\">graphics</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"n\">pyglet</span><span class=\"o\">.</span><span class=\"n\">gl</span><span class=\"o\">.</span><span class=\"n\">GL_QUADS</span><span class=\"p\">,</span>\n                       <span class=\"p\">(</span><span class=\"s1\">'v2f'</span><span class=\"p\">,(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">)),</span>\n                                         <span class=\"p\">(</span><span class=\"s1\">'c3f'</span><span class=\"p\">,(</span><span class=\"n\">col1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n  <span class=\"c1\"># draw square 2: @440,100</span>\n  <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">640</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"o\">-</span><span class=\"mi\">100</span>\n  <span class=\"n\">pyglet</span><span class=\"o\">.</span><span class=\"n\">graphics</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"n\">pyglet</span><span class=\"o\">.</span><span class=\"n\">gl</span><span class=\"o\">.</span><span class=\"n\">GL_QUADS</span><span class=\"p\">,</span>\n                       <span class=\"p\">(</span><span class=\"s1\">'v2f'</span><span class=\"p\">,(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">)),</span>\n                                         <span class=\"p\">(</span><span class=\"s1\">'c3f'</span><span class=\"p\">,(</span><span class=\"n\">col2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<p>Now, we need a bit of python hacking.  Because our BCI depends on accurate timelock of the brain data (EEG) with the visual display, we need to have accurate time-stamps for when the display changes.  Fortunately, pyglet allows us to get this accuracy as it provides a <cite>flip</cite> method on windows which blocks until the display is actually updated.  Thus we can use this to generate accurate time-stamps.   We do this by adding a time-stamp recording function to the windows normal <cite>flip</cite> method with the following magic:</p>\n<pre><span class=\"c1\"># override window's flip method to record the exact *time* the</span>\n<span class=\"c1\"># flip happended</span>\n<span class=\"k\">def</span> <span class=\"nf\">timedflip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n  <span class=\"sd\">'''pseudo method type which records the timestamp for window flips'''</span>\n  <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">flip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"c1\"># call the 'real' flip method...</span>\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lastfliptime</span><span class=\"o\">=</span><span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">getTimeStamp</span><span class=\"p\">()</span>\n<span class=\"kn\">import</span> <span class=\"nn\">types</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">flip</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">MethodType</span><span class=\"p\">(</span><span class=\"n\">timedflip</span><span class=\"p\">,</span><span class=\"n\">window</span><span class=\"p\">)</span>\n<span class=\"c1\"># ensure the field is already there.</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">lastfliptime</span><span class=\"o\">=</span><span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">getTimeStamp</span><span class=\"p\">()</span>\n</pre>\n<p>Now we write a function which,\n1) asks the <cite>noisetag</cite> framework how the selectable squares should look,\n2) updates the <cite>noisetag</cite> framework with information about how the display was updated.</p>\n<pre><span class=\"c1\"># dictionary mapping from stimulus-state to colors</span>\n<span class=\"n\">state2color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:(</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"c1\"># off=grey</span>\n             <span class=\"mi\">1</span><span class=\"p\">:(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span>    <span class=\"c1\"># on=white</span>\n             <span class=\"mi\">2</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">),</span>    <span class=\"c1\"># cue=green</span>\n             <span class=\"mi\">3</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)}</span>    <span class=\"c1\"># feedback=blue</span>\n<span class=\"k\">def</span> <span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">):</span>\n  <span class=\"c1\"># send info on the *previous* stimulus state.</span>\n  <span class=\"c1\"># N.B. we do it here as draw is called as soon as the vsync happens</span>\n  <span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">sendStimulusState</span><span class=\"p\">(</span><span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">lastfliptime</span><span class=\"p\">)</span>\n  <span class=\"c1\"># update and get the new stimulus state to display</span>\n  <span class=\"c1\"># N.B. update raises StopIteration when noisetag sequence has finished</span>\n  <span class=\"k\">try</span> <span class=\"p\">:</span>\n      <span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">updateStimulusState</span><span class=\"p\">()</span>\n      <span class=\"n\">stimulus_state</span><span class=\"p\">,</span><span class=\"n\">target_state</span><span class=\"p\">,</span><span class=\"n\">objIDs</span><span class=\"p\">,</span><span class=\"n\">sendEvents</span><span class=\"o\">=</span><span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">getStimulusState</span><span class=\"p\">()</span>\n  <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span> <span class=\"p\">:</span>\n      <span class=\"n\">pyglet</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">()</span> <span class=\"c1\"># terminate app when noisetag is done</span>\n      <span class=\"k\">return</span>\n  <span class=\"c1\"># draw the display with the instructed colors</span>\n  <span class=\"c1\"># draw the display with the instructed colors</span>\n  <span class=\"k\">if</span> <span class=\"n\">stimulus_state</span> <span class=\"p\">:</span>\n      <span class=\"n\">draw_squares</span><span class=\"p\">(</span><span class=\"n\">state2color</span><span class=\"p\">[</span><span class=\"n\">stimulus_state</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]],</span>\n                   <span class=\"n\">state2color</span><span class=\"p\">[</span><span class=\"n\">stimulus_state</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n</pre>\n<p>As a final step we can attached a <strong>selection</strong> callback which will be called whenever a selection is made by the BCI.</p>\n<pre><span class=\"c1\"># define a trival selection handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">selectionHandler</span><span class=\"p\">(</span><span class=\"n\">objID</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Selected: </span><span class=\"si\">%d</span><span class=\"s2\">\"</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">objID</span><span class=\"p\">))</span>\n<span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">addSelectionHandler</span><span class=\"p\">(</span><span class=\"n\">selectionHandler</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, we tell the <cite>noisetag</cite> module to run a complete BCI \u2018experiment\u2019 with calibration and feedback mode, and start the <cite>pyglet</cite> main loop.</p>\n<pre><span class=\"c1\"># tell the noisetag framework to run a full : calibrate-&gt;prediction sequence</span>\n<span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">setnumActiveObjIDs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># say that we have 2 objects flickering</span>\n<span class=\"n\">nt</span><span class=\"o\">.</span><span class=\"n\">startExpt</span><span class=\"p\">(</span><span class=\"n\">nCal</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">nPred</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># run the pyglet main loop</span>\n<span class=\"n\">pyglet</span><span class=\"o\">.</span><span class=\"n\">clock</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"p\">(</span><span class=\"n\">draw</span><span class=\"p\">)</span>\n<span class=\"n\">pyglet</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>This will then run a full BCI with 10 <em>cued</em> calibration trials, and uncued prediction trials.   During the calibration trials a square turning green shows this is the cued direction.  During the prediction phase a square turning blue shows the selection by the BCI.</p>\n<p>For more complex presentation examples, including a full 6x6 character typing keyboard, and a color-wheel for controlling a [philips Hue light](<a href=\"https://www2.meethue.com/en-us\" rel=\"nofollow\">https://www2.meethue.com/en-us</a>) see the <cite>examples/presentation</cite> directory.</p>\n</div>\n\n          </div>"}, "last_serial": 7059707, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "968800fcfb1ea3bc39b3ac925ca7d1cd", "sha256": "1db3dc09df4820c4676d57407c059577dde2f308d30f1b47d9387edbbfc08cde"}, "downloads": -1, "filename": "mindaffectBCI-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "968800fcfb1ea3bc39b3ac925ca7d1cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19534, "upload_time": "2020-02-03T15:15:32", "upload_time_iso_8601": "2020-02-03T15:15:32.212765Z", "url": "https://files.pythonhosted.org/packages/8a/ce/4c921d3aa8e3d66fee107bd48d0571e8b495f660f1be083b7d8eef7b05d0/mindaffectBCI-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cbce32412d1271f3e44a6057aea43fa", "sha256": "d9268a5a868759386873f16ebffaaf32d703f418abb194adfae6155c06a79776"}, "downloads": -1, "filename": "mindaffectBCI-0.9.tar.gz", "has_sig": false, "md5_digest": "4cbce32412d1271f3e44a6057aea43fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16538, "upload_time": "2020-02-03T15:15:34", "upload_time_iso_8601": "2020-02-03T15:15:34.690301Z", "url": "https://files.pythonhosted.org/packages/d6/2f/dbc7032197583136840264930009e25442fd296cb287093bb71065b0a2ca/mindaffectBCI-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "d63f6618c7c2daa53fb4d073157a766a", "sha256": "2dcdfbfa532cfc7d5320a6c71841466f17e3141fd5508b627f70ca4d28f295f9"}, "downloads": -1, "filename": "mindaffectBCI-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d63f6618c7c2daa53fb4d073157a766a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 22118, "upload_time": "2020-02-04T11:41:35", "upload_time_iso_8601": "2020-02-04T11:41:35.192109Z", "url": "https://files.pythonhosted.org/packages/85/ad/603caf7a14a65c08f03c0d8e8f556ffa5b11f394f249cfe5ead1a03cb0e0/mindaffectBCI-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c7c2191a154422e6b5290eac482beda", "sha256": "4716ca06b7ec87084ccaf569105493758861d418b5933efe8d49b91b7f5db09c"}, "downloads": -1, "filename": "mindaffectBCI-0.9.1.tar.gz", "has_sig": false, "md5_digest": "5c7c2191a154422e6b5290eac482beda", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21889, "upload_time": "2020-02-04T11:41:36", "upload_time_iso_8601": "2020-02-04T11:41:36.400803Z", "url": "https://files.pythonhosted.org/packages/6c/c3/aad5f1b78b0b0b243ab4f480a1d422cc94f6b55dddc6256d1599b4efe0e6/mindaffectBCI-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "c2df6182e86a46fc1325aedfd26d6425", "sha256": "0a8aeee18b249e8f28851c87a6f80ce27c72958ab4869861a5edb6aa8113fdc6"}, "downloads": -1, "filename": "mindaffectBCI-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c2df6182e86a46fc1325aedfd26d6425", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24113, "upload_time": "2020-02-04T13:31:36", "upload_time_iso_8601": "2020-02-04T13:31:36.982705Z", "url": "https://files.pythonhosted.org/packages/d5/cc/9b2e493bb11724445749e2629990e79a10dcbf71cc5784baf9cd9f2a8e65/mindaffectBCI-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69399e928c0540ca8c3444b76d12b560", "sha256": "92f3254eba5b5a2d4f6b25e59e4c975c12eaaf867ddd75b7f011347165576a53"}, "downloads": -1, "filename": "mindaffectBCI-0.9.2.tar.gz", "has_sig": false, "md5_digest": "69399e928c0540ca8c3444b76d12b560", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24439, "upload_time": "2020-02-04T13:31:39", "upload_time_iso_8601": "2020-02-04T13:31:39.334787Z", "url": "https://files.pythonhosted.org/packages/cd/06/c077b81a298cd932218129e8ea970fd8d020e1505748af799868d44c31f7/mindaffectBCI-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "c26ae8f6a0ca437b4f8031b792fc9bb0", "sha256": "685fde5a9a1e3e6b4bdd607795164bcfa76ddae2c0b4061479bec82646a3c437"}, "downloads": -1, "filename": "mindaffectBCI-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c26ae8f6a0ca437b4f8031b792fc9bb0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24042, "upload_time": "2020-02-04T15:12:47", "upload_time_iso_8601": "2020-02-04T15:12:47.374780Z", "url": "https://files.pythonhosted.org/packages/d4/fe/3452da366b7caf6c7c707139c6fdf7c2c1432df6b2f6fde7cc05fdab3459/mindaffectBCI-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2de512a9213982140f4289fca4459a9d", "sha256": "e87dc8cd0d285b643eb49457e16817ecd5584a7ebd88cf066de58d0410d48d7d"}, "downloads": -1, "filename": "mindaffectBCI-0.9.3.tar.gz", "has_sig": false, "md5_digest": "2de512a9213982140f4289fca4459a9d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24486, "upload_time": "2020-02-04T15:12:48", "upload_time_iso_8601": "2020-02-04T15:12:48.816413Z", "url": "https://files.pythonhosted.org/packages/42/0e/3c496ed45dc7dfd87ad22402b6ccaaaabbd5055ec1046bfb79bc02e32f2c/mindaffectBCI-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "5b9fb1397bcb5365a43ca0ec3d2cd67e", "sha256": "8fbdc737d6e2fcc092dedf9f8c426b7be8d4e05b963f915bdca16dad45731fdd"}, "downloads": -1, "filename": "mindaffectBCI-0.9.4-py3-none-any.whl", "has_sig": false, "md5_digest": "5b9fb1397bcb5365a43ca0ec3d2cd67e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24254, "upload_time": "2020-02-04T15:33:32", "upload_time_iso_8601": "2020-02-04T15:33:32.637446Z", "url": "https://files.pythonhosted.org/packages/30/2d/f9732fa08f58ae9dd525b3c1103b556975fc16e9e84301a2167a00b7c1fc/mindaffectBCI-0.9.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5369cf157f69e624932c4cd189038a84", "sha256": "58abadcf5525df6c2a57c43fa0fe3179dd0b9f2ba7c37a9b2e9b882ec0af63d5"}, "downloads": -1, "filename": "mindaffectBCI-0.9.4.tar.gz", "has_sig": false, "md5_digest": "5369cf157f69e624932c4cd189038a84", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24921, "upload_time": "2020-02-04T15:33:34", "upload_time_iso_8601": "2020-02-04T15:33:34.513177Z", "url": "https://files.pythonhosted.org/packages/39/8f/501f2255259be10db713b619cea81595887104e90596adda1b2fde3e7376/mindaffectBCI-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "3974b3535951b9701b975183a01e5935", "sha256": "f0fb9de0ca62fa5fac3b9cad2b582ac9ab61135af6af4db8a6e97c6fd3364a44"}, "downloads": -1, "filename": "mindaffectBCI-0.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3974b3535951b9701b975183a01e5935", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29395, "upload_time": "2020-02-14T13:10:01", "upload_time_iso_8601": "2020-02-14T13:10:01.314830Z", "url": "https://files.pythonhosted.org/packages/f8/7d/e9b964ecc89ef49ebf77adcb12643dca2a7850a7db67be332153bfed08d5/mindaffectBCI-0.9.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ed5346f950f743c6a61fb41089480e1", "sha256": "2811b2e038081583d94f41a78cf4968252daec6484e58be8fd250d882d8a9049"}, "downloads": -1, "filename": "mindaffectBCI-0.9.5.tar.gz", "has_sig": false, "md5_digest": "7ed5346f950f743c6a61fb41089480e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27852, "upload_time": "2020-02-14T13:10:03", "upload_time_iso_8601": "2020-02-14T13:10:03.975214Z", "url": "https://files.pythonhosted.org/packages/9c/88/ea5bd38ca1994f2ffe57e46c36c800fa4638851a0c12a73b2c59d214738a/mindaffectBCI-0.9.5.tar.gz", "yanked": false}], "0.9.5a0": [{"comment_text": "", "digests": {"md5": "4ae0a459f17f75a4e99c9039b0cf40b3", "sha256": "b3720c5aa7be4cc418e37d56a543351e5aef28448dcca322d479aa2fef3cdaaa"}, "downloads": -1, "filename": "mindaffectBCI-0.9.5a0-py3-none-any.whl", "has_sig": false, "md5_digest": "4ae0a459f17f75a4e99c9039b0cf40b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 67295, "upload_time": "2020-02-14T14:11:20", "upload_time_iso_8601": "2020-02-14T14:11:20.042688Z", "url": "https://files.pythonhosted.org/packages/f4/d6/308c42dc7e91ea0a85861a9ffddcc64223ce89069c962152ed1dcc3df01f/mindaffectBCI-0.9.5a0-py3-none-any.whl", "yanked": false}], "0.9.5b0": [{"comment_text": "", "digests": {"md5": "c29e5510d59ee42eb9b2412b2984d760", "sha256": "756fd7ee92af66109efb6cd2d715d5a177b2fe3111f4907a5555a9a4bb7b72e7"}, "downloads": -1, "filename": "mindaffectBCI-0.9.5b0-py3-none-any.whl", "has_sig": false, "md5_digest": "c29e5510d59ee42eb9b2412b2984d760", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 67296, "upload_time": "2020-02-14T14:14:58", "upload_time_iso_8601": "2020-02-14T14:14:58.168692Z", "url": "https://files.pythonhosted.org/packages/b0/de/2b2e385d9d960c000fc8904e40a4457ebbbeff7125576e3c1f1f6c7f182d/mindaffectBCI-0.9.5b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8e44b02a3afdd7b0e49bb92fd9ddeac", "sha256": "46b814beab24e9a52cc37e5bb708d5299da8fe0a9023eafc6d5011d99b4f1dca"}, "downloads": -1, "filename": "mindaffectBCI-0.9.5b0.tar.gz", "has_sig": false, "md5_digest": "a8e44b02a3afdd7b0e49bb92fd9ddeac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 47837, "upload_time": "2020-02-14T14:15:00", "upload_time_iso_8601": "2020-02-14T14:15:00.668453Z", "url": "https://files.pythonhosted.org/packages/c9/7a/f66eac6a7589fbae8ce1973c07b1dad1099a7bc96a9bdc009892ce891578/mindaffectBCI-0.9.5b0.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "facb75361468ba593b6506bc354d695c", "sha256": "b0f09161e1e6b63a1dcf1d2dedf103820512a1c1d4343827f2e9b3fc7a090828"}, "downloads": -1, "filename": "mindaffectBCI-0.9.6-py3-none-any.whl", "has_sig": false, "md5_digest": "facb75361468ba593b6506bc354d695c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 67267, "upload_time": "2020-02-14T14:21:32", "upload_time_iso_8601": "2020-02-14T14:21:32.913215Z", "url": "https://files.pythonhosted.org/packages/49/9c/f3aa3a33fa7ccbb7a6a318b237254025a24268fd6449b0806211f969c872/mindaffectBCI-0.9.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b26d0a5e557c7e1c8975300b440780e4", "sha256": "84bf0a0c95e01e849b1f1b20ccca66b9ce2fa46b3f4dc2ddb9087fb6b4ad7bcf"}, "downloads": -1, "filename": "mindaffectBCI-0.9.6.tar.gz", "has_sig": false, "md5_digest": "b26d0a5e557c7e1c8975300b440780e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 47850, "upload_time": "2020-02-14T14:21:35", "upload_time_iso_8601": "2020-02-14T14:21:35.062698Z", "url": "https://files.pythonhosted.org/packages/3b/5c/2c4e109acef888fbcb8522fc68d57f0f68423706bc190c9eac8b4cdca848/mindaffectBCI-0.9.6.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "a0e92fccdd119156c34f392a9ea7d571", "sha256": "bf83da38e87abcbd35b0a8906e7bf4c719f4e19056bfcf04f6b4771a56c0ca59"}, "downloads": -1, "filename": "mindaffectBCI-0.9.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a0e92fccdd119156c34f392a9ea7d571", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 68317, "upload_time": "2020-02-24T16:13:45", "upload_time_iso_8601": "2020-02-24T16:13:45.390853Z", "url": "https://files.pythonhosted.org/packages/78/7d/b36d2f3ba3b3bd7f6cc584bbec4077060160f7f1efafa6c74890b9c21c9e/mindaffectBCI-0.9.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1445a7beab8f2ec7a694862303676f64", "sha256": "babd7ed57b5744eff4e80cac61e63aabedf4bffdcea13dd6c9c01288ebc16932"}, "downloads": -1, "filename": "mindaffectBCI-0.9.7.tar.gz", "has_sig": false, "md5_digest": "1445a7beab8f2ec7a694862303676f64", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 48330, "upload_time": "2020-02-24T16:13:48", "upload_time_iso_8601": "2020-02-24T16:13:48.153247Z", "url": "https://files.pythonhosted.org/packages/97/95/ab8a07e1e9683bc8f21f0a33cc0349620982fdabfbf030698b89d6210283/mindaffectBCI-0.9.7.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "c09f17cb76c599b2670929c094bcb5d5", "sha256": "17dba3334dec1c3ac1326b3cd658e2d34ed10ce27c815245f574052e06cfd0d1"}, "downloads": -1, "filename": "mindaffectBCI-0.9.8.tar.gz", "has_sig": false, "md5_digest": "c09f17cb76c599b2670929c094bcb5d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 53028, "upload_time": "2020-04-20T11:58:09", "upload_time_iso_8601": "2020-04-20T11:58:09.213219Z", "url": "https://files.pythonhosted.org/packages/88/01/1e4cec57aa5b81968110fbcf7d2058800559c67f805e13424c6c2e4680e7/mindaffectBCI-0.9.8.tar.gz", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "784f61bc052c7d88e7b16eaecaca3558", "sha256": "1651e3f2296b87545c3cb86638262495e3ab34887b41bcc3afba35fcfa9e3a74"}, "downloads": -1, "filename": "mindaffectBCI-0.9.9-py3-none-any.whl", "has_sig": false, "md5_digest": "784f61bc052c7d88e7b16eaecaca3558", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 74485, "upload_time": "2020-04-20T12:22:35", "upload_time_iso_8601": "2020-04-20T12:22:35.274391Z", "url": "https://files.pythonhosted.org/packages/25/44/fe6b0fa226e484e5901f1ee1d46b77478c507a8d29809921e43cbbe90426/mindaffectBCI-0.9.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f16aa43a29303bc5bc9582abbbdff720", "sha256": "948efbc0b28f2bd9946ef69af5deb54a1da892ea71ea3d22ead9839d0493b6d3"}, "downloads": -1, "filename": "mindaffectBCI-0.9.9.tar.gz", "has_sig": false, "md5_digest": "f16aa43a29303bc5bc9582abbbdff720", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 53266, "upload_time": "2020-04-20T12:22:37", "upload_time_iso_8601": "2020-04-20T12:22:37.555599Z", "url": "https://files.pythonhosted.org/packages/c5/36/797ffdc9c763396e42586514335f02f2c0a374da8d05102525712842192c/mindaffectBCI-0.9.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "784f61bc052c7d88e7b16eaecaca3558", "sha256": "1651e3f2296b87545c3cb86638262495e3ab34887b41bcc3afba35fcfa9e3a74"}, "downloads": -1, "filename": "mindaffectBCI-0.9.9-py3-none-any.whl", "has_sig": false, "md5_digest": "784f61bc052c7d88e7b16eaecaca3558", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 74485, "upload_time": "2020-04-20T12:22:35", "upload_time_iso_8601": "2020-04-20T12:22:35.274391Z", "url": "https://files.pythonhosted.org/packages/25/44/fe6b0fa226e484e5901f1ee1d46b77478c507a8d29809921e43cbbe90426/mindaffectBCI-0.9.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f16aa43a29303bc5bc9582abbbdff720", "sha256": "948efbc0b28f2bd9946ef69af5deb54a1da892ea71ea3d22ead9839d0493b6d3"}, "downloads": -1, "filename": "mindaffectBCI-0.9.9.tar.gz", "has_sig": false, "md5_digest": "f16aa43a29303bc5bc9582abbbdff720", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 53266, "upload_time": "2020-04-20T12:22:37", "upload_time_iso_8601": "2020-04-20T12:22:37.555599Z", "url": "https://files.pythonhosted.org/packages/c5/36/797ffdc9c763396e42586514335f02f2c0a374da8d05102525712842192c/mindaffectBCI-0.9.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:34 2020"}