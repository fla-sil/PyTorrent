{"info": {"author": "Alexander B\u00f6hm", "author_email": "alxndr.boehm@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: System :: Logging", "Topic :: System :: Monitoring"], "description": "# pysyslogclient\n\nSyslog client for Python 3 (RFC 3164/5424) for UNIX and Windows\n\n## Description\n\nSyslog client following\n\n* RFC3164 (https://www.ietf.org/rfc/rfc3164.txt)\n* RFC5424 (https://www.ietf.org/rfc/rfc5424.txt)\n\nwith UNIX and Windows support. TCP and UDP transport is possible.\n\nIf TCP is used, on every log message, that is send to the specified server,\nand a connection error occured, the message will be dismissed and\na reconnect will be tried for the next message.\n\n## Usage\n\nA small CLI client is implemented in *client.py*. To call it, run\n\n```\npython -m pysyslogclient.cli\n```\n\n### Startup client \n\nTo setup the client for RFC 5424 over TCP to send to SERVER:PORT:\n\n```\nimport pysyslogclient\nclient = pysyslogclient.SyslogClientRFC5424(SERVER, PORT, proto=\"TCP\")\n```\n\nor for RFC3164:\n\n```\nimport SyslogClient\nclient = pysyslogclient.SyslogClientRFC3164(SERVER, PORT, proto=\"TCP\")\n```\n\n### Log a messsage\n\nLog the message \"Hello syslog server\" with standard severity *INFO* as facility\n*USER*. As program name *SyslogClient* the PID of the called python interpreter\nis used.\n\n```\nclient.log(\"Hello syslog server\")\n\n```\n\nTo specify more options, call log with more arguments. For example to log a\nthe message as program *Logger* with PID *1* as facility *SYSTEM* with severity\n*EMERGENCY*, call log the following way:\n\n```\nclient.log(\"Hello syslog server\",\n\tfacility=pysyslogclient.FAC_SYSTEM,\n\tseverity=pysyslogclient.SEV_EMERGENCY,\n\tprogram=\"Logger\",\n\tpid=1)\n```\n\n### Shutdown\n\nTo disconnect, call\n\n```\nclient.close()\n```\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aboehm/pysyslogclient", "keywords": "syslog logging monitoring", "license": "BSD-2-Clause", "maintainer": "", "maintainer_email": "", "name": "pysyslogclient", "package_url": "https://pypi.org/project/pysyslogclient/", "platform": "", "project_url": "https://pypi.org/project/pysyslogclient/", "project_urls": {"Homepage": "https://github.com/aboehm/pysyslogclient"}, "release_url": "https://pypi.org/project/pysyslogclient/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Syslog client implementation (RFC 3164/RFC 5424)", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # pysyslogclient<br><br>Syslog client for Python 3 (RFC 3164/5424) for UNIX and Windows<br><br>## Description<br><br>Syslog client following<br><br>* RFC3164 (https://www.ietf.org/rfc/rfc3164.txt)<br>* RFC5424 (https://www.ietf.org/rfc/rfc5424.txt)<br><br>with UNIX and Windows support. TCP and UDP transport is possible.<br><br>If TCP is used, on every log message, that is send to the specified server,<br>and a connection error occured, the message will be dismissed and<br>a reconnect will be tried for the next message.<br><br>## Usage<br><br>A small CLI client is implemented in *client.py*. To call it, run<br><br>```<br>python -m pysyslogclient.cli<br>```<br><br>### Startup client <br><br>To setup the client for RFC 5424 over TCP to send to SERVER:PORT:<br><br>```<br>import pysyslogclient<br>client = pysyslogclient.SyslogClientRFC5424(SERVER, PORT, proto=\"TCP\")<br>```<br><br>or for RFC3164:<br><br>```<br>import SyslogClient<br>client = pysyslogclient.SyslogClientRFC3164(SERVER, PORT, proto=\"TCP\")<br>```<br><br>### Log a messsage<br><br>Log the message \"Hello syslog server\" with standard severity *INFO* as facility<br>*USER*. As program name *SyslogClient* the PID of the called python interpreter<br>is used.<br><br>```<br>client.log(\"Hello syslog server\")<br><br>```<br><br>To specify more options, call log with more arguments. For example to log a<br>the message as program *Logger* with PID *1* as facility *SYSTEM* with severity<br>*EMERGENCY*, call log the following way:<br><br>```<br>client.log(\"Hello syslog server\",<br>\tfacility=pysyslogclient.FAC_SYSTEM,<br>\tseverity=pysyslogclient.SEV_EMERGENCY,<br>\tprogram=\"Logger\",<br>\tpid=1)<br>```<br><br>### Shutdown<br><br>To disconnect, call<br><br>```<br>client.close()<br>```<br><br>\n          </div>"}, "last_serial": 2712339, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "b465f7a7b5737dc696245adae1110f57", "sha256": "dde5c514c79bb2fd9ccc47b2e036ecaa6f59c5c354d4d1f14a6611c5386ea77c"}, "downloads": -1, "filename": "pysyslogclient-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b465f7a7b5737dc696245adae1110f57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4950, "upload_time": "2017-03-17T11:38:20", "upload_time_iso_8601": "2017-03-17T11:38:20.158202Z", "url": "https://files.pythonhosted.org/packages/12/07/60adc5937bad88a57526a171b9fa6714f4a1555309fb962fde9b7e253a31/pysyslogclient-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b465f7a7b5737dc696245adae1110f57", "sha256": "dde5c514c79bb2fd9ccc47b2e036ecaa6f59c5c354d4d1f14a6611c5386ea77c"}, "downloads": -1, "filename": "pysyslogclient-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b465f7a7b5737dc696245adae1110f57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4950, "upload_time": "2017-03-17T11:38:20", "upload_time_iso_8601": "2017-03-17T11:38:20.158202Z", "url": "https://files.pythonhosted.org/packages/12/07/60adc5937bad88a57526a171b9fa6714f4a1555309fb962fde9b7e253a31/pysyslogclient-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:43 2020"}