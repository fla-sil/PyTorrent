{"info": {"author": "Pedro H.", "author_email": "5179251+pedrohdz@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Documentation"], "description": ".. COMMENT_OUT\n\n|Code Climate| |Build Status| |codecov| |PyPI version|\n\n###############################################################################\nmuextensions\n###############################################################################\n\n.. contents:: Table of contents\n\n\nOverview\n===============================================================================\n*This project is still in alpha.  Expect backwards compatibility breaking\nchanges.*\n\nAdds `ditaa`_ and `PlantUML`_ directives to `reStructuredText`_, and hopefully\n`Markdown`_ in the future.  *muextensions* does this by providing plugins for\nprojects like `Hovercraft! <Hovercraft_>`_ and `Pelican`_, and simplifies\nregistering the directives with other `Docutils`_ projects.\n\nIt allows for adding a *reStructuredText* block like the following:\n\n.. code:: rst\n\n  .. ditaa-image::\n\n      +---------------+                      /---------------------+\n      | +-----------+ |    +------------+    |+---+  +----+   /---+|\n      | | ..dita::  | +--->+muextensions+--->+|   +->+{io}+-> +   ||\n      | |   ~~~~~~~ | |    |        {io}|    ||{d}|  +----+   |   ||\n      | |   ~~~~~~~ | |    +------------+    |+---+           +---/|\n      | +-----------+ |                      |                     |\n      |            {d}|                      |                     |\n      +---------------+                      +---------------------/\n\nAnd having it embedded in the `Docutils`_ generated document as an image:\n\n.. image:: https://raw.githubusercontent.com/pedrohdz/muextensions/master/docs/images/simple-ditaa-example.svg\n  :alt: Simple ditaa example\n  :align: center\n\n\nIn the case of *PlantUML*, a block like:\n\n.. code:: rst\n\n  .. plantuml-image::\n\n    skinparam monochrome true\n    skinparam shadowing false\n\n    client -> front_end\n    front_end -> back_end\n    back_end -> front_end\n    front_end -> client\n\nWould be rendered as:\n\n.. image:: https://raw.githubusercontent.com/pedrohdz/muextensions/master/docs/images/simple-plantuml-example.svg\n  :alt: Simple PlantUML example\n  :align: center\n\n\nUsage\n===============================================================================\n\nPrerequisites\n-------------\n\nInstall `PlantUML`_ and have a wrapper script with the name ``plantuml`` that\nexecutes it installed in your path for *PlantUML* support.  A sample wrapper\nscript is included in `contrib/scripts/plantuml <plantuml_wrapper_>`_ of this\nproject.\n\nFor `ditaa`_ support, install as described in the `Getting it <get_ditaa_>`_\nsection of the *ditaa* documentation.\n\n.. _get_ditaa: https://github.com/stathissideris/ditaa#getting-it\n.. _plantuml_wrapper: contrib/scripts/plantuml\n\n\nPelican\n-------\n\n*muextensions* provides a plugin for `Pelican`_ in\n``muextensions.contrib.pelican``.\n\nIf everything is configured correctly, integrating *muextensions* into\n*Pelican* should be as simple as:\n\n1. Installing *muextensions* in the Python virtual environment that *Pelican*\n   is installed in with:\n\n   .. code:: bash\n\n      pip install muextensions\n\n2. Appending ``'muextensions.contrib.pelican'`` to ``PLUGINS`` in your\n   ``pelicanconf.py``:\n\n   .. code:: python\n\n      PLUGINS = ['muextensions.contrib.pelican',]\n\nFor more information on how to configure plugins in *Pelican*, refer to the\n`How to use plugins <pelican_plugins_>`_ section in their documentation.\n\n.. _pelican_plugins: http://docs.getpelican.com/en/stable/plugins.html\n\n\nHovercraft!\n-----------\n\nSupport for `Hovercraft! <Hovercraft_>`_ is currently pending pull request\n`regebro/hovercraft#196 <hovercraft_pr_196_>`_\nwhich adds the ``--directive-plugin`` argument to the ``hovercraft`` command.\nThe source code introducing ``--directive-plugin`` can be found in\n`pedrohdz/hovercraft <PATCHED_>`_ under the ``directives`` branch.\n\nHere is a quick example to see *muextensions*, make sure to complete the\n`Prerequisites`_ first.  We will utilize the demo presentation in\n`docs/examples/hovercraft/ <docs/examples/hovercraft/>`_.\n\n.. code:: bash\n\n  cd docs/examples/hovercraft/\n  python3.7 -m venv .venv\n  source .venv/bin/activate\n  pip install -U pip\n  pip install muextensions \\\n      https://github.com/pedrohdz/hovercraft/archive/directives.zip\n  hovercraft --directive-plugin muextensions.contrib.hovercraft demo.rst\n\nOpen http://localhost:8000/ in a web browser to see the *Hovercraft!*\npresentation.\n\n.. _Hovercraft: https://hovercraft.readthedocs.io/en/latest/\n.. _PATCHED: https://github.com/pedrohdz/hovercraft/tree/directives\n\n\nOther docutils projects\n-----------------------\n\nThe *muextensions* *reStructuredText* directives can be added to any\n`Docutils`_ project by way of *Docutils* *connectors* in\n``muextensions.connector.docutils``.\n\n.. code:: python\n\n  from pathlib import Path\n  from muextensions.connector.docutils import plantuml, ditaa\n\n  output_path = Path('.')\n  plantuml.register(output_path)\n  ditaa.register(output_path)\n\nThe ``plantuml`` and ``ditaa`` ``register()`` functions in\n``muextensions.connector.docutils`` handle registering the *reStructuredText*\ndirectives as described in the `Register the Directive <docutils_register_>`_\nsection on the *Docutils* of the documentation.\n\n.. _docutils_register: http://docutils.sourceforge.net/docs/howto/rst-directives.html#register-the-directive\n\n.. _Docutils: http://docutils.sourceforge.net/index.html\n\n\nDevelopment\n===============================================================================\n\nSetting up for development:\n\n.. code:: bash\n\n  git clone git@github.com:pedrohdz/muextensions.git\n  cd muextensions\n  python3.5 -m venv .venv\n  source .venv/bin/activate\n  pip install -U pip\n  pip install -e .[ci,test]\n\n\nMake sure you have a good baseline by running ``tox``.  Executing ``tox`` from\nwithin a *venv* (Python virtual environments) will cause ``pip`` related errors\nduring the tests, either exit the *venv* via the ``deactivate`` command, or\nexecute ``tox`` from a new terminal.\n\n.. code:: bash\n\n  deactivate\n  tox\n  source .venv/bin/activate\n\nTo execute the unit tests:\n\n.. code:: bash\n\n  pytest\n\nTo execute and view the unit test code coverage:\n\n.. code:: bash\n\n  pytest --cov-report=html --cov\n  open htmlcov/index.html\n\nTo run the integration tests, assuming both ``ditaa`` and ``plantuml`` are\ninstalled on the system, use the ``--run-integration`` option.  To save the\noutput of the integration tests for examination, add the\n``--save-integration-output-to`` option:\n\n.. code:: bash\n\n  pytest --run-integration\n  pytest --run-integration --save-integration-output-to=./tmp\n\n\nContribution\n------------\n\nWhen contributing, please keep in mind the following before submitting the pull\nrequest:\n\n- Make sure that the ``tox`` checks complete without failure.\n- When making code changes, add relevant unit tests.\n- If fixing a bug, please try and add a regression test.  It should fail before\n  the fix is applies, and pas after.\n- This project conforms to `Semantic Versioning 2.0.0 <semver_>`_.\n\n.. _semver: https://semver.org/\n\n\nAppendix\n===============================================================================\n\nTodo list\n---------\n\n- [X] Add Pelican support.\n- [X] Add Ditaa support.\n- [-] Spread the word:\n\n  - [-] Try and get it listed in `getpelican/pelican-plugins\n    <https://github.com/getpelican/pelican-plugins>`_\n    (`getpelican/pelican-plugins#1165\n    <https://github.com/getpelican/pelican-plugins/pull/1165>`_).\n  - [-] Try and get it listed in `stathissideris/ditaa\n    <https://github.com/stathissideris/ditaa>`_ (`stathissideris/ditaa#55\n    <https://github.com/stathissideris/ditaa/pull/55>`_).\n\n- [-] Finish adding plugin support to Hovercraft!  (`regebro/hovercraft#196\n  <hovercraft_pr_196_>`_).\n- [ ] Add GitHub tickets for each of the following.\n- [ ] Add caching.\n- [ ] Add a ``plantuml-text`` directive.  This should generate and embed ASCII\n  art by way of ``plantuml -ttxt``.\n- [ ] Add a ``ditaa-text`` directive.  This should embed ASCII art in the\n  directive contents directly as a ``code`` block.\n- [ ] Add ``ditaa-figure`` and ``plantuml-figure`` directives the inherit from\n  `figure\n  <http://docutils.sourceforge.net/docs/ref/rst/directives.html#figure>`_.\n- [ ] Add REST callers for execs to speed things up even more.\n- [ ] Finish removing the deprecated `uml` directive.\n- [ ] Look into https://pypi.org/project/pbr/\n- [ ] Add Markdown support.\n\n\nReferences\n----------\n\n- *TODO*\n\n\n.. _reStructuredText: http://docutils.sourceforge.net/rst.html\n.. _ditaa: https://github.com/stathissideris/ditaa\n.. _PlantUML: http://plantuml.com/\n.. _Markdown: https://daringfireball.net/projects/markdown/\n.. _Hovercraft: https://hovercraft.readthedocs.io/en/latest/\n.. _Pelican: http://docs.getpelican.com/en/stable/\n\n.. _hovercraft_pr_196: https://github.com/regebro/hovercraft/pull/196\n\n.. |Code Climate| image:: https://codeclimate.com/github/codeclimate/codeclimate/badges/gpa.svg\n   :target: https://codeclimate.com/github/pedrohdz/muextensions\n.. |Build Status| image:: https://travis-ci.org/pedrohdz/muextensions.svg?branch=master\n   :target: https://travis-ci.org/pedrohdz/muextensions\n.. |codecov| image:: https://codecov.io/gh/pedrohdz/muextensions/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/pedrohdz/muextensions\n.. |PyPI version| image:: https://badge.fury.io/py/muextensions.svg\n   :target: https://badge.fury.io/py/muextensions", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pedrohdz/muextensions", "keywords": "pelican hovercraft plantuml uml docutils", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "muextensions", "package_url": "https://pypi.org/project/muextensions/", "platform": "", "project_url": "https://pypi.org/project/muextensions/", "project_urls": {"Homepage": "https://github.com/pedrohdz/muextensions"}, "release_url": "https://pypi.org/project/muextensions/0.0.18/", "requires_dist": null, "requires_python": "", "summary": "Markup extentions", "version": "0.0.18", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://codeclimate.com/github/pedrohdz/muextensions\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cddea364b32e2f504d572ffe889588867f7a6291/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f636f6465636c696d6174652f636f6465636c696d6174652f6261646765732f6770612e737667\"></a> <a href=\"https://travis-ci.org/pedrohdz/muextensions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/463a820586fac6b585996e968efd90544cc51f6c/68747470733a2f2f7472617669732d63692e6f72672f706564726f68647a2f6d75657874656e73696f6e732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/pedrohdz/muextensions\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c20fcec537e2442fad731135935ae26195498c5a/68747470733a2f2f636f6465636f762e696f2f67682f706564726f68647a2f6d75657874656e73696f6e732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://badge.fury.io/py/muextensions\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be53dc5259ff38f204b33ca60e919a6411f2b8f5/68747470733a2f2f62616467652e667572792e696f2f70792f6d75657874656e73696f6e732e737667\"></a></p>\n<div id=\"muextensions\">\n<h2><a href=\"#id4\" rel=\"nofollow\">muextensions</a></h2>\n<div id=\"table-of-contents\">\n<p>Table of contents</p>\n<ul>\n<li><a href=\"#muextensions\" id=\"id4\" rel=\"nofollow\">muextensions</a><ul>\n<li><a href=\"#overview\" id=\"id5\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#usage\" id=\"id6\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#prerequisites\" id=\"id7\" rel=\"nofollow\">Prerequisites</a></li>\n<li><a href=\"#pelican\" id=\"id8\" rel=\"nofollow\">Pelican</a></li>\n<li><a href=\"#hovercraft\" id=\"id9\" rel=\"nofollow\">Hovercraft!</a></li>\n<li><a href=\"#other-docutils-projects\" id=\"id10\" rel=\"nofollow\">Other docutils projects</a></li>\n</ul>\n</li>\n<li><a href=\"#development\" id=\"id11\" rel=\"nofollow\">Development</a><ul>\n<li><a href=\"#contribution\" id=\"id12\" rel=\"nofollow\">Contribution</a></li>\n</ul>\n</li>\n<li><a href=\"#appendix\" id=\"id13\" rel=\"nofollow\">Appendix</a><ul>\n<li><a href=\"#todo-list\" id=\"id14\" rel=\"nofollow\">Todo list</a></li>\n<li><a href=\"#references\" id=\"id15\" rel=\"nofollow\">References</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Overview</a></h3>\n<p><em>This project is still in alpha.  Expect backwards compatibility breaking\nchanges.</em></p>\n<p>Adds <a href=\"https://github.com/stathissideris/ditaa\" rel=\"nofollow\">ditaa</a> and <a href=\"http://plantuml.com/\" rel=\"nofollow\">PlantUML</a> directives to <a href=\"http://docutils.sourceforge.net/rst.html\" rel=\"nofollow\">reStructuredText</a>, and hopefully\n<a href=\"https://daringfireball.net/projects/markdown/\" rel=\"nofollow\">Markdown</a> in the future.  <em>muextensions</em> does this by providing plugins for\nprojects like <a href=\"https://hovercraft.readthedocs.io/en/latest/\" rel=\"nofollow\">Hovercraft!</a> and <a href=\"http://docs.getpelican.com/en/stable/\" rel=\"nofollow\">Pelican</a>, and simplifies\nregistering the directives with other <a href=\"http://docutils.sourceforge.net/index.html\" rel=\"nofollow\">Docutils</a> projects.</p>\n<p>It allows for adding a <em>reStructuredText</em> block like the following:</p>\n<pre><span class=\"p\">..</span> <span class=\"ow\">ditaa-image</span><span class=\"p\">::</span>\n\n    +---------------+                      /---------------------+\n    <span class=\"o\">|</span> +-----------+ |    +------------+    |+---+  +----+   /---+|\n    <span class=\"o\">|</span> | ..dita::  | +---&gt;+muextensions+---&gt;+|   +-&gt;+{io}+-&gt; +   ||\n    <span class=\"o\">|</span> |   ~~~~~~~ | |    |        {io}|    ||{d}|  +----+   |   ||\n    <span class=\"o\">|</span> |   ~~~~~~~ | |    +------------+    |+---+           +---/|\n    <span class=\"o\">|</span> +-----------+ |                      |                     |\n    <span class=\"o\">|</span>            {d}|                      |                     |\n    +---------------+                      +---------------------/\n</pre>\n<p>And having it embedded in the <a href=\"http://docutils.sourceforge.net/index.html\" rel=\"nofollow\">Docutils</a> generated document as an image:</p>\n<img alt=\"Simple ditaa example\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5cad861fc9f7291e0419361e630752bbdda2fa68/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706564726f68647a2f6d75657874656e73696f6e732f6d61737465722f646f63732f696d616765732f73696d706c652d64697461612d6578616d706c652e737667\">\n<p>In the case of <em>PlantUML</em>, a block like:</p>\n<pre><span class=\"p\">..</span> <span class=\"ow\">plantuml-image</span><span class=\"p\">::</span>\n\n  skinparam monochrome true\n  skinparam shadowing false\n\n  client -&gt; front_end\n  front_end -&gt; back_end\n  back_end -&gt; front_end\n  front_end -&gt; client\n</pre>\n<p>Would be rendered as:</p>\n<img alt=\"Simple PlantUML example\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8471f7a6b6c386ba963377ed45339e8e15794b0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706564726f68647a2f6d75657874656e73696f6e732f6d61737465722f646f63732f696d616765732f73696d706c652d706c616e74756d6c2d6578616d706c652e737667\">\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Usage</a></h3>\n<div id=\"prerequisites\">\n<h4><a href=\"#id7\" rel=\"nofollow\">Prerequisites</a></h4>\n<p>Install <a href=\"http://plantuml.com/\" rel=\"nofollow\">PlantUML</a> and have a wrapper script with the name <tt>plantuml</tt> that\nexecutes it installed in your path for <em>PlantUML</em> support.  A sample wrapper\nscript is included in <a href=\"contrib/scripts/plantuml\" rel=\"nofollow\">contrib/scripts/plantuml</a> of this\nproject.</p>\n<p>For <a href=\"https://github.com/stathissideris/ditaa\" rel=\"nofollow\">ditaa</a> support, install as described in the <a href=\"https://github.com/stathissideris/ditaa#getting-it\" rel=\"nofollow\">Getting it</a>\nsection of the <em>ditaa</em> documentation.</p>\n</div>\n<div id=\"pelican\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Pelican</a></h4>\n<p><em>muextensions</em> provides a plugin for <a href=\"http://docs.getpelican.com/en/stable/\" rel=\"nofollow\">Pelican</a> in\n<tt>muextensions.contrib.pelican</tt>.</p>\n<p>If everything is configured correctly, integrating <em>muextensions</em> into\n<em>Pelican</em> should be as simple as:</p>\n<ol>\n<li><p>Installing <em>muextensions</em> in the Python virtual environment that <em>Pelican</em>\nis installed in with:</p>\n<pre>pip install muextensions\n</pre>\n</li>\n<li><p>Appending <tt>'muextensions.contrib.pelican'</tt> to <tt>PLUGINS</tt> in your\n<tt>pelicanconf.py</tt>:</p>\n<pre><span class=\"n\">PLUGINS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'muextensions.contrib.pelican'</span><span class=\"p\">,]</span>\n</pre>\n</li>\n</ol>\n<p>For more information on how to configure plugins in <em>Pelican</em>, refer to the\n<a href=\"http://docs.getpelican.com/en/stable/plugins.html\" rel=\"nofollow\">How to use plugins</a> section in their documentation.</p>\n</div>\n<div id=\"hovercraft\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Hovercraft!</a></h4>\n<p>Support for <a href=\"https://hovercraft.readthedocs.io/en/latest/\" rel=\"nofollow\">Hovercraft!</a> is currently pending pull request\n<a href=\"https://github.com/regebro/hovercraft/pull/196\" rel=\"nofollow\">regebro/hovercraft#196</a>\nwhich adds the <tt><span class=\"pre\">--directive-plugin</span></tt> argument to the <tt>hovercraft</tt> command.\nThe source code introducing <tt><span class=\"pre\">--directive-plugin</span></tt> can be found in\n<a href=\"https://github.com/pedrohdz/hovercraft/tree/directives\" rel=\"nofollow\">pedrohdz/hovercraft</a> under the <tt>directives</tt> branch.</p>\n<p>Here is a quick example to see <em>muextensions</em>, make sure to complete the\n<a href=\"#prerequisites\" rel=\"nofollow\">Prerequisites</a> first.  We will utilize the demo presentation in\n<a href=\"docs/examples/hovercraft/\" rel=\"nofollow\">docs/examples/hovercraft/</a>.</p>\n<pre><span class=\"nb\">cd</span> docs/examples/hovercraft/\npython3.7 -m venv .venv\n<span class=\"nb\">source</span> .venv/bin/activate\npip install -U pip\npip install muextensions <span class=\"se\">\\\n</span>    https://github.com/pedrohdz/hovercraft/archive/directives.zip\nhovercraft --directive-plugin muextensions.contrib.hovercraft demo.rst\n</pre>\n<p>Open <a href=\"http://localhost:8000/\" rel=\"nofollow\">http://localhost:8000/</a> in a web browser to see the <em>Hovercraft!</em>\npresentation.</p>\n</div>\n<div id=\"other-docutils-projects\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Other docutils projects</a></h4>\n<p>The <em>muextensions</em> <em>reStructuredText</em> directives can be added to any\n<a href=\"http://docutils.sourceforge.net/index.html\" rel=\"nofollow\">Docutils</a> project by way of <em>Docutils</em> <em>connectors</em> in\n<tt>muextensions.connector.docutils</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">muextensions.connector.docutils</span> <span class=\"kn\">import</span> <span class=\"n\">plantuml</span><span class=\"p\">,</span> <span class=\"n\">ditaa</span>\n\n<span class=\"n\">output_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n<span class=\"n\">plantuml</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">)</span>\n<span class=\"n\">ditaa</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>plantuml</tt> and <tt>ditaa</tt> <tt>register()</tt> functions in\n<tt>muextensions.connector.docutils</tt> handle registering the <em>reStructuredText</em>\ndirectives as described in the <a href=\"http://docutils.sourceforge.net/docs/howto/rst-directives.html#register-the-directive\" rel=\"nofollow\">Register the Directive</a>\nsection on the <em>Docutils</em> of the documentation.</p>\n</div>\n</div>\n<div id=\"development\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Development</a></h3>\n<p>Setting up for development:</p>\n<pre>git clone git@github.com:pedrohdz/muextensions.git\n<span class=\"nb\">cd</span> muextensions\npython3.5 -m venv .venv\n<span class=\"nb\">source</span> .venv/bin/activate\npip install -U pip\npip install -e .<span class=\"o\">[</span>ci,test<span class=\"o\">]</span>\n</pre>\n<p>Make sure you have a good baseline by running <tt>tox</tt>.  Executing <tt>tox</tt> from\nwithin a <em>venv</em> (Python virtual environments) will cause <tt>pip</tt> related errors\nduring the tests, either exit the <em>venv</em> via the <tt>deactivate</tt> command, or\nexecute <tt>tox</tt> from a new terminal.</p>\n<pre>deactivate\ntox\n<span class=\"nb\">source</span> .venv/bin/activate\n</pre>\n<p>To execute the unit tests:</p>\n<pre>pytest\n</pre>\n<p>To execute and view the unit test code coverage:</p>\n<pre>pytest --cov-report<span class=\"o\">=</span>html --cov\nopen htmlcov/index.html\n</pre>\n<p>To run the integration tests, assuming both <tt>ditaa</tt> and <tt>plantuml</tt> are\ninstalled on the system, use the <tt><span class=\"pre\">--run-integration</span></tt> option.  To save the\noutput of the integration tests for examination, add the\n<tt><span class=\"pre\">--save-integration-output-to</span></tt> option:</p>\n<pre>pytest --run-integration\npytest --run-integration --save-integration-output-to<span class=\"o\">=</span>./tmp\n</pre>\n<div id=\"contribution\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Contribution</a></h4>\n<p>When contributing, please keep in mind the following before submitting the pull\nrequest:</p>\n<ul>\n<li>Make sure that the <tt>tox</tt> checks complete without failure.</li>\n<li>When making code changes, add relevant unit tests.</li>\n<li>If fixing a bug, please try and add a regression test.  It should fail before\nthe fix is applies, and pas after.</li>\n<li>This project conforms to <a href=\"https://semver.org/\" rel=\"nofollow\">Semantic Versioning 2.0.0</a>.</li>\n</ul>\n</div>\n</div>\n<div id=\"appendix\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Appendix</a></h3>\n<div id=\"todo-list\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Todo list</a></h4>\n<ul>\n<li>[X] Add Pelican support.</li>\n<li>[X] Add Ditaa support.</li>\n<li>[-] Spread the word:<ul>\n<li>[-] Try and get it listed in <a href=\"https://github.com/getpelican/pelican-plugins\" rel=\"nofollow\">getpelican/pelican-plugins</a>\n(<a href=\"https://github.com/getpelican/pelican-plugins/pull/1165\" rel=\"nofollow\">getpelican/pelican-plugins#1165</a>).</li>\n<li>[-] Try and get it listed in <a href=\"https://github.com/stathissideris/ditaa\" rel=\"nofollow\">stathissideris/ditaa</a> (<a href=\"https://github.com/stathissideris/ditaa/pull/55\" rel=\"nofollow\">stathissideris/ditaa#55</a>).</li>\n</ul>\n</li>\n<li>[-] Finish adding plugin support to Hovercraft!  (<a href=\"https://github.com/regebro/hovercraft/pull/196\" rel=\"nofollow\">regebro/hovercraft#196</a>).</li>\n<li>[ ] Add GitHub tickets for each of the following.</li>\n<li>[ ] Add caching.</li>\n<li>[ ] Add a <tt><span class=\"pre\">plantuml-text</span></tt> directive.  This should generate and embed ASCII\nart by way of <tt>plantuml <span class=\"pre\">-ttxt</span></tt>.</li>\n<li>[ ] Add a <tt><span class=\"pre\">ditaa-text</span></tt> directive.  This should embed ASCII art in the\ndirective contents directly as a <tt>code</tt> block.</li>\n<li>[ ] Add <tt><span class=\"pre\">ditaa-figure</span></tt> and <tt><span class=\"pre\">plantuml-figure</span></tt> directives the inherit from\n<a href=\"http://docutils.sourceforge.net/docs/ref/rst/directives.html#figure\" rel=\"nofollow\">figure</a>.</li>\n<li>[ ] Add REST callers for execs to speed things up even more.</li>\n<li>[ ] Finish removing the deprecated <cite>uml</cite> directive.</li>\n<li>[ ] Look into <a href=\"https://pypi.org/project/pbr/\" rel=\"nofollow\">https://pypi.org/project/pbr/</a></li>\n<li>[ ] Add Markdown support.</li>\n</ul>\n</div>\n<div id=\"references\">\n<h4><a href=\"#id15\" rel=\"nofollow\">References</a></h4>\n<ul>\n<li><em>TODO</em></li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5727317, "releases": {"0.0.12": [{"comment_text": "", "digests": {"md5": "b59eb09288a5b6ba1db184b71b3fee61", "sha256": "fb9d243e89e63cd2624654ae6e078e307ce139bcfe85900b20af7ae25e65e05d"}, "downloads": -1, "filename": "muextensions-0.0.12.tar.gz", "has_sig": false, "md5_digest": "b59eb09288a5b6ba1db184b71b3fee61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5451, "upload_time": "2019-08-04T12:14:08", "upload_time_iso_8601": "2019-08-04T12:14:08.208586Z", "url": "https://files.pythonhosted.org/packages/69/9e/05efe48ea254589b9bdc5f1355a6455dda15b11579461ce73d2df64c5ebf/muextensions-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "ee188fb84166922270c31db1a74f0b8f", "sha256": "7e8ebb9fa1fdae875805c9d57aaf8b906575316cc5f5f70454f52e698a8429d9"}, "downloads": -1, "filename": "muextensions-0.0.13.tar.gz", "has_sig": false, "md5_digest": "ee188fb84166922270c31db1a74f0b8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6116, "upload_time": "2019-08-08T17:16:55", "upload_time_iso_8601": "2019-08-08T17:16:55.031522Z", "url": "https://files.pythonhosted.org/packages/53/30/07c258a74d1bdf4bbc16d748214447d45433fc88a8bf3cf4defb11dfbe4e/muextensions-0.0.13.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "1f0d4e87b8e4943f38a7569316ba1bed", "sha256": "58eb7d5e39d5714b9816945e0b603fa7fe661ff101b2082d3077407b6dc5fa19"}, "downloads": -1, "filename": "muextensions-0.0.17.tar.gz", "has_sig": false, "md5_digest": "1f0d4e87b8e4943f38a7569316ba1bed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13742, "upload_time": "2019-08-25T14:49:46", "upload_time_iso_8601": "2019-08-25T14:49:46.368751Z", "url": "https://files.pythonhosted.org/packages/fc/ce/598a39b799b420cdb0c229e9dcf894e7c25e2b593d66fc621fe4ea0d9480/muextensions-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "e48fa2bb2d139672ca6ef3932d397bce", "sha256": "3dd6757e63b04d3e43ac15d52fda7667aaf83144b1aa5ffc2f98b45b9652c6c4"}, "downloads": -1, "filename": "muextensions-0.0.18.tar.gz", "has_sig": false, "md5_digest": "e48fa2bb2d139672ca6ef3932d397bce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13790, "upload_time": "2019-08-25T15:20:40", "upload_time_iso_8601": "2019-08-25T15:20:40.960219Z", "url": "https://files.pythonhosted.org/packages/be/3c/378696a62418a87e0de940cfcc0b75ae57bb9121807d2646180667f21978/muextensions-0.0.18.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e48fa2bb2d139672ca6ef3932d397bce", "sha256": "3dd6757e63b04d3e43ac15d52fda7667aaf83144b1aa5ffc2f98b45b9652c6c4"}, "downloads": -1, "filename": "muextensions-0.0.18.tar.gz", "has_sig": false, "md5_digest": "e48fa2bb2d139672ca6ef3932d397bce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13790, "upload_time": "2019-08-25T15:20:40", "upload_time_iso_8601": "2019-08-25T15:20:40.960219Z", "url": "https://files.pythonhosted.org/packages/be/3c/378696a62418a87e0de940cfcc0b75ae57bb9121807d2646180667f21978/muextensions-0.0.18.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:37 2020"}