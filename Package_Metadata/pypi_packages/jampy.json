{"info": {"author": "Michele Cappellari", "author_email": "michele.cappellari@physics.ox.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "The JamPy Package\n=================\n\n**Jeans Anisotropic Modelling for Galactic Dynamics**\n\n.. image:: http://www-astro.physics.ox.ac.uk/~mxc/software/jam_logo.png\n.. image:: https://img.shields.io/pypi/v/jampy.svg\n        :target: https://pypi.org/project/jampy/\n.. image:: https://img.shields.io/badge/arXiv-0806.0042-orange.svg\n        :target: https://arxiv.org/abs/0806.0042\n.. image:: https://img.shields.io/badge/DOI-10.1111/...-green.svg\n        :target: https://doi.org/10.1111/j.1365-2966.2008.13754.x\n\n``JamPy`` is a Python implementation of the Jeans Anisotropic Modelling (JAM)\nformalism for the dynamical modelling of galaxies. \n\nThis software can be used e.g. to measure the mass of supermassive black holes \nin galaxies, to infer their dark-matter content or to measure galaxy masses.\n\nThe method calculates all the first and second velocity moments, for both the\nintrinsic and the projected kinematics, in spherical and axisymmetric geometry.\n\nThe JAM solution assuming a cylindrically-oriented velocity ellipsoid was introduced in \n`Cappellari (2008) <https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C>`_,\nwhile the solution assuming a spherically-oriented velocity ellipsoid was introduced in \n`Cappellari (2020) <https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959>`_\n\n.. contents:: :depth: 2\n\nAttribution\n-----------\n\nIf you use this software for your research, please cite \n`Cappellari (2008) <https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C>`_\nfor the cylindrically-aligned JAM solution and \n`Cappellari (2020) <https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959>`_\nfor the spherically-aligned JAM solution.\n\nThe BibTeX entry for the two main JAM papers are respectively::\n\n    @ARTICLE{Cappellari2008,\n        author = {{Cappellari}, Michele},\n        title = \"{Measuring the inclination and mass-to-light ratio of axisymmetric \n            galaxies via anisotropic Jeans models of stellar kinematics}\",\n        journal = {MNRAS},\n        eprint = {0806.0042},\n        year = 2008,\n        volume = 390,\n        pages = {71-86},\n        doi = {10.1111/j.1365-2966.2008.13754.x}\n    }\n\n    @ARTICLE{Cappellari2020,\n        author = {{Cappellari}, Michele},\n        title = \"{Efficient solution of the anisotropic spherically-aligned axisymmetric\n            Jeans equations of stellar hydrodynamics for galactic dynamics}\",\n        journal = {MNRAS in press},\n        eprint = {1907.09894},\n        year = 2020,\n        doi = {10.1093/mnras/staa959}\n    }\n\nInstallation\n------------\n\ninstall with::\n\n    pip install jampy\n\nWithout writing access to the global ``site-packages`` directory, use::\n\n    pip install --user jampy\n\nDocumentation\n-------------\n\nFull documentation is contained in the individual files headers.\n\nUsage examples are contained in the directory  ``jampy/examples``, which is\ncopied by ``pip`` within the global ``site-packages`` folder.\n\nWhat follows is the documentation of the two main procedures of the ``JamPy``\npackage, extracted from their Python docstrings. The other procedures are \ndocumented in their respective docstrings.\n\n###########################################################################\n\njam_axi_proj\n============\n\nPurpose\n-------\n\nThis procedure calculates a prediction for all the projected first or second\nvelocity moments for an anisotropic (three-integral) axisymmetric galaxy model.\n\nAny of the three components of the first velocity moment or any of the six\ncomponents of the symmetric velocity dispersion tensor are supported.\nThese include the line-of-sight velocities and the components of the proper motion.\n\nTwo assumptions for the orientation of the velocity ellipsoid are supported:\n\n- The cylindrically-aligned ``(R, z, phi)`` solution was presented in\n  `Cappellari (2008) <https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C>`_\n\n- The spherically-aligned ``(r, th, phi)`` solution was presented in\n  `Cappellari (2020) <https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959>`_\n\nCalling Sequence\n----------------\n\n.. code-block:: python\n\n    jam = jam_axi_proj(\n            surf_lum, sigma_lum, qobs_lum, surf_pot, sigma_pot, qobs_pot,\n            inc, mbh, distance, xbin, ybin, beta=None, gamma=None,\n            errors=None, flux_obs=None, goodbins=None, ml=None,\n            nang=10, normpsf=1., nrad=20, pixang=0., pixsize=0.,\n            plot=True, quiet=False, kappa=None, rbh=0.01, data=None,\n            sigmapsf=0., step=0., moment='zz', vmax=None, vmin=None,\n            nlos=65, epsrel=1e-2, align='cyl', kwargs={})\n\n    vrms = jam.model  # with moment='zz' the output is the LOS Vrms\n\nInput Parameters\n----------------\n\nsurf_lum: array_like with shape (n,)\n    peak surface values of the MGE Gaussians describing the surface\n    brightness of the tracer population for which the kinematics is derived.\n\n    The units are arbitrary as they cancel out in the final results.\n\n    EXAMPLE: when one obtains the kinematics from optical spectroscopy,\n    surf_lum contains the galaxy optical surface brightness, which has\n    typical units of ``Lsun/pc^2`` (solar luminosities per parsec^2).\nsigma_lum: array_like with shape (n,)\n    dispersion (sigma) in arcseconds of the MGE Gaussians describing the\n    kinematic-tracer population.\nqobs_lum: array_like with shape (n,)\n    observed axial ratio (q') of the MGE Gaussians describing the\n    kinematic-tracer population.\nsurf_pot: array_like with shape (m,)\n    peak value of the MGE Gaussians describing the galaxy total-mass\n    surface density in units of ``Msun/pc^2`` (solar masses per parsec^2).\n    This is the MGE model from which the model gravitational potential is\n    computed.\n\n    EXAMPLE: with a self-consistent model, one has the same Gaussians\n    for both the kinematic-tracer and the gravitational potential.\n    This implies ``surf_pot = surf_lum``, ``sigma_pot = sigma_lum`` and\n    ``qobs_pot = qobs_lum``. The global M/L of the model is fitted by the\n    routine when passing the ``data`` and ``errors`` keywords with the\n    observed kinematics.\nsigma_pot: array_like with shape (m,)\n    dispersion in arcseconds of the MGE Gaussians describing the galaxy\n    total-mass surface density.\nqobs_pot: array_like with shape (m,)\n    observed axial ratio of the MGE Gaussians describing the galaxy\n    total-mass surface density.\ninc: float\n    inclination in degrees (0 being face-on and 90 edge-on).\nmbh: float\n    Mass of a nuclear supermassive black hole in solar masses.\n\n    IMPORTANT: The model predictions are computed assuming ``surf_pot``\n    gives the total mass. In the self-consistent case, one has\n    ``surf_pot = surf_lum`` and if requested (keyword ``ml``) the program\n    can scale the output ``model`` to best fit the data. The scaling is\n    equivalent to multiplying *both* ``surf_pot`` and ``mbh`` by a factor M/L.\n    To avoid mistakes, the actual ``mbh`` used by the output model is\n    printed on the screen.\ndistance: float\n    the distance of the galaxy in Mpc.\nxbin: array_like with shape (p,)\n    X coordinates in arcseconds of the bins (or pixels) at which one wants\n    to compute the model predictions. The X-axis is assumed to coincide with\n    the galaxy projected major axis. The galaxy center is at ``(0,0)``.\n\n    When no PSF/pixel convolution is performed (``sigmapsf=0`` or\n    ``pixsize=0``) there is a singularity at ``(0,0)`` which should be\n    avoided by the user in the input coordinates.\nybin: array_like with shape (p,)\n    Y coordinates in arcseconds of the bins (or pixels) at which one wants\n    to compute the model predictions. The Y-axis is assumed to coincide with\n    the projected galaxy symmetry axis.\n\nOptional Keywords\n-----------------\n\nalign: {'cyl', 'sph'}, optional.\n    Assumed alignment for the velocity ellipsoid during the solution of\n    the Jeans equations.\n\n    - ``align='cyl'`` assumes a cylindrically-aligned velocity ellipsoid\n      using the solution of `Cappellari (2008)`_\n\n    - ``align='sph'`` assumes a spherically-aligned velocity ellipsoid\n      using the solution of `Cappellari (2020)`_\n\nbeta: array_like with shape (n,)\n    radial anisotropy of the individual kinematic-tracer MGE Gaussians\n    (Default: ``beta=np.zeros(n)``)::\n\n        beta = 1 - (sigma_th/sigma_r)^2  # with align=`sph`\n        beta = 1 - (sigma_z/sigma_R)^2   # with align=`cyl`\n\ngamma: array_like with shape (n,)\n    tangential anisotropy of the individual kinematic-tracer MGE Gaussians\n    (Default: ``gamma=np.zeros(n)``)::\n\n        gamma = 1 - (sigma_phi/sigma_r)^2  # with align=`sph`\n        gamma = 1 - (sigma_phi/sigma_R)^2  # with align=`cyl`\n\nepsrel: float, optional\n    Relative error requested for the numerical computation of the intrinsic\n    moments (before line-of-sight quadrature). (Default: ``epsrel=1e-2``)\nerrors: array_like with shape (p,), optional\n    1sigma uncertainty associated to the ``data`` measurements.\n\n    EXAMPLE: In the case where the data are given by the\n    ``Vrms = sqrt(velBin^2 + sigBin^2)``, from the error propagation::\n\n        errors = sqrt((dVel*velBin)^2 + (dSig*sigBin)^2)/RMS,\n\n    where ``velBin`` and ``sigBin`` are the velocity and dispersion in each\n    bin and ``dVel`` and ``dSig`` are the corresponding uncertainties.\n    (Default: constant errors ``errors = 0.05*np.median(data)``)\nflux_obs: array_like with shape (p,), optional\n    Optional mean surface brightness of each bin for plotting.\ngoodbins: array_like with shape (p,)\n    Boolean vector with values True for the bins which have to be included\n    in the fit (if requested) and ``chi**2`` calculation.\n    (Default: fit all bins).\nml: float, optional\n    Mass-to-light ratio (M/L) to multiply the values given by ``surf_pot``.\n    Setting this keyword is completely equivalent to multiplying the\n    output ``model`` by ``np.sqrt(M/L)`` after the fit. This implies that\n    the BH mass becomes ``mbh*(M/L)``.\n\n    If this keyword is not set or set to a negative number in input, the M/L\n    is fitted from the data and the best-fitting M/L is returned in the output.\n    The BH mass of the best-fitting model is ``mbh*(M/L)``.\nnlos: int (optional)\n    Number of values used for the numerical line-of-sight quadrature.\n    (default ``nlos=65``)\nnormpsf: array_like with shape (q,)\n    fraction of the total PSF flux contained in the circular Gaussians\n    describing the PSF of the kinematic observations.\n    The PSF will be used for seeing convolution of the model kinematics.\n    It has to be ``np.sum(normpsf) = 1``.\nnang: int, optional\n    Same as for ``nrad``, but for the number of angular intervals.\n    (default: ``nang=10``)\nnrad: int, optional\n    The number of logarithmically spaced radial positions for which the\n    model is evaluated before interpolation and PSF convolution. One may\n    want to increase this value if the model has to be evaluated over many\n    orders of magnitude in radius (default: ``nrad=20``).\npixang: float, optional\n    the angle between the observed spaxels and the galaxy major axis X.\npixsize: float, optional\n    Size in arcseconds of the (square) spatial elements at which the\n    kinematics is obtained. This may correspond to the side of the spaxel\n    or lenslets of an integral-field spectrograph. This size is used to\n    compute the kernel for the seeing and aperture convolution.\n\n    If this is not set, or ``pixsize=0``, then convolution is not performed.\nplot: bool\n    Set this keyword to produce a plot at the end of the calculation.\nquiet: bool\n    Set this keyword to avoid printing values on the screen.\nrbh: float, optional\n    This scalar gives the sigma in arcsec of the Gaussian representing the\n    central black hole of mass MBH (See Section 3.1.2 of `Cappellari 2008.\n    <http://adsabs.harvard.edu/abs/2008MNRAS.390...71C>`_)\n    The gravitational potential is indistinguishable from a point source\n    for ``radii > 2*rbh``, so the default ``rbh=0.01`` arcsec is appropriate\n    in most current situations.\n\n    ``RBH`` should not be decreased unless actually needed!\ndata: array_like with shape (p,), optional\n    observed first or second velocity moment used to fit the model.\n\n    EXAMPLE: In the common case where one has only line-of-sight velocities\n    the second moment is given by::\n\n        V_RMS = sqrt(velBin**2 + sigBin**2)\n\n    at the coordinates positions given by the vectors ``xbin`` and ``ybin``.\n\n    If ``data`` is set and ``ml`` is negative or ``None``, then the model\n    is fitted to the data, otherwise, the adopted ``ml`` is used and just\n    the ``chi**2`` is returned.\nsigmapsf: array_like with shape (q,)\n    dispersion in arcseconds of the circular Gaussians describing the PSF\n    of the kinematic observations.\n\n    If this is not set, or ``sigmapsf=0``, then convolution is not performed.\n\n    IMPORTANT: PSF convolution is done by creating a 2D image, with pixels\n    size given by ``step=max(sigmapsf, pixsize/2)/4``, and convolving it\n    with the PSF + aperture. If the input radii RAD are very large with\n    respect to ``step``, the 2D image may require a too large amount of memory.\n    If this is the case one may compute the model predictions at small radii\n    separately from those at large radii, where PSF convolution is not\n    needed.\nstep: float, optional\n    Spatial step for the model calculation and PSF convolution in arcsec.\n    This value is automatically computed by default as\n    ``step=max(sigmapsf,pixsize/2)/4``. It is assumed that when ``pixsize``\n    or ``sigmapsf`` are big, high-resolution calculations are not needed. In\n    some cases, however, e.g. to accurately estimate the central Vrms in a\n    very cuspy galaxy inside a large aperture, one may want to override the\n    default value to force smaller spatial pixels using this keyword.\nmoment: {'x', 'y', 'z', 'xx', 'yy', 'zz', 'xy', 'xz', 'yz'}, optional\n    String specifying the component of the velocity first or second moments.\n\n    - ``moment='x'`` gives the first moment <V_x'> of the proper motion in\n      the direction orthogonal to the projected symmetry axis.\n\n    - ``moment='y'`` gives the first moment <V_y'> of the proper motion in\n      the direction parallel to the projected symmetry axis.\n\n    - ``moment='z'`` gives the first moment <V_z'> of the line-of-sight\n      velocity.\n\n    - ``moment='xx'`` gives sigma_xx=sqrt<V_x'^2> of the component of the\n      proper motion dispersion tensor in the direction orthogonal to the\n      projected symmetry axis.\n\n    - ``moment='yy'`` gives sigma_yy=sqrt<V_y'^2> of the component of the\n      proper motion dispersion tensor in the direction parallel to the\n      projected symmetry axis.\n\n    - ``moment='zz'`` (default) gives the usual line-of-sight V_rms=sqrt<V_z'^2>.\n\n    - ``moment='xy'`` gives the mixed component <V_x'V_y'> of the proper\n      motion dispersion tensor.\n\n    - ``moment='xz'`` gives the mixed component <V_x'V_z'> of the proper\n      motion dispersion tensor.\n\n    - ``moment='yz'`` gives the mixed component <V_y'V_z'> of the proper\n      motion dispersion tensor.\nvmax: float, optional\n    Maximum value of the ``data`` to plot.\nvmin: float, optional\n    Minimum value of the ``data`` to plot.\nkwargs: dict, optioonal\n    Additional parameters passed to ``plot_velfield``.\n\nOutput Parameters\n-----------------\n\nStored as attributes of the ``jam_axi_proj`` class.\n\n.model: array_like with shape (p,)\n    model predictions for the selected velocity moments for each input bin.\n\n    Any of the six components of the symmetric proper motion dispersion\n    tensor, or any of the three first velocity moments can be provided in\n    output using the ``moment`` keyword.\n.ml: float\n    Best fitting M/L.\n.chi2: float\n    Reduced ``chi**2`` describing the quality of the fit::\n\n        chi2 = (((data[goodbins] - model[goodbins])/errors[goodbins])**2).sum()\n             / goodbins.sum()\n\n.flux: array_like with shape (p,)\n    PSF-convolved MGE surface brightness of each bin in ``Lsun/pc**2``,\n    used to plot the isophotes of the kinematic-tracer on the model results.\n\n###########################################################################\n\njam_axi_intr\n============\n\nPurpose\n-------\n\nThis procedure calculates all the intrinsic first and second velocity\nmoments for an anisotropic axisymmetric galaxy model.\n\nThis program is useful e.g. to model the kinematics of galaxies\nlike our Milky Way, for which the intrinsic moments can be observed\ndirectly, or to compute starting conditions for N-body numerical\nsimulations of galaxies.\n\nTwo assumptions for the orientation of the velocity ellipsoid are supported:\n\n- The cylindrically-aligned ``(R, z, phi)`` solution was presented in\n  `Cappellari (2008) <https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C>`_\n\n- The spherically-aligned ``(r, th, phi)`` solution was presented in\n  `Cappellari (2020) <https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959>`_\n\nCalling Sequence\n----------------\n\n.. code-block:: python\n\n    jam = jam_axi_intr(\n        dens_lum, sigma_lum, qintr_lum, dens_pot, sigma_pot, qintr_pot,\n        mbh, Rbin, zbin, beta=None, gamma=None, epsrel=1e-2, quiet=False,\n        rbh=1, plot=True, nodots=True, fignum=1, data=None, errors=None,\n        ml=None, goodbins=None, nrad=20, nang=10, interp=True,\n        proj_cyl=False, align='cyl')\n\n    # The meaning of the output is different depending on `align`\n    sig2R, sig2z, sig2phi, v2phi = jam.model  # with align='cyl'\n    sig2r, sig2th, sig2phi, v2phi = jam.model  # with align='sph'\n\nInput Parameters\n----------------\n\ndens_lum: array_like with shape (n,)\n    vector containing the peak value of the MGE Gaussians describing\n    the intrinsic density of the tracer population for which the kinematics\n    is derived.\n    The units are arbitarary as they cancel out in the final results.\n    Typical units are e.g. Lsun/pc^3 (solar luminosities per parsec^3)\nsigma_lum: array_like with shape (n,)\n    vector containing the dispersion (sigma) in pc of the MGE\n    Gaussians describing the galaxy kinematic-tracer population.\nqintr_lum: array_like with shape (n,)\n    vector containing the intrinsic axial ratio (q) of the MGE\n    Gaussians describing the galaxy kinematic-tracer population.\nsurf_pot: array_like with shape (m,)\n    vector containing the peak value of the MGE Gaussians\n    describing the galaxy total-mass density in units of Msun/pc^3 (solar\n    masses per parsec^3). This is the MGE model from which the model\n    gravitational potential is computed.\nsigma_pot: array_like with shape (m,)\n    vector containing the dispersion in pc of the MGE\n    Gaussians describing the galaxy total-mass density.\nqintr_pot: array_like with shape (m,)\n    vector containing the intrinsic axial ratio of the MGE\n    Gaussians describing the galaxy total-mass density.\nmbh: scalar\n    Mass of a nuclear supermassive black hole in solar masses.\nRbin: array_like with shape (p,)\n    Vector with the ``R`` coordinates in pc of the bins (or pixels) at\n    which one wants to compute the model predictions. This is the first\n    cylindrical coordinate ``(R, z)`` with the galaxy center at ``(0,0)``.\n\n    There is a singularity at ``(0,0)`` which should be avoided by the user\n    in the input coordinates.\nzbin: array_like with shape (p,)\n    Vector with the ``z`` coordinates in pc of the bins (or pixels) at\n    which one wants to compute the model predictions. This is the second\n    cylindrical coordinate ``(R, z)``, with the z-axis coincident with the\n    galaxy symmetry axis.\n\nOptional Keywords\n-----------------\n\nbeta: array_like with shape (n,)\n    Vector with the vertical anisotropy of the individual kinematic-tracer\n    MGE Gaussians (Default: ``beta=np.zeros(n)``)::\n\n        beta = 1 - (sigma_th/sigma_r)^2  # with align=`sph`\n        beta = 1 - (sigma_z/sigma_R)^2   # with align=`cyl`\n\ndata: array_like of shape (4, p)\n    Four input vectors with the observed values of:\n\n    - ``[sigR, sigz, sigphi, vphi]`` in km/s, when ``align='cyl'``\n      (or ``align='sph'`` and ``proj_cyl=True``).\n\n    - ``[sigr, sigth, sigphi, vphi]`` in km/s, when ``align='sph'``.\n\nerrors: array_like of shape (4, p)\n    errors on ``data``, in the same format (default 5 km/s).\ngamma: array_like with shape (n,)\n    Vector with the tangential anisotropy of the individual kinematic-tracer\n    MGE Gaussians (Default: ``gamma=np.zeros(n)``)::\n\n        gamma = 1 - (sigma_phi/sigma_r)^2  # with align=`sph`\n        gamma = 1 - (sigma_phi/sigma_R)^2  # with align=`cyl`\n\ngoodbins: array_like with shape (4, p)\n    Boolean vector of the same shape as ``data`` with values ``True``\n    for the bins which have to be included in the fit (if requested) and\n    ``chi^2`` calculation (Default: fit all bins).\nproj_cyl: bool, optional\n    If ``align='sph'`` and ``proj_cyl=True``, the function projects the\n    spherically-aligned moments to cylindrical coordinates and returns the\n    ``[sig2R, sig2z, sig2phi, v2phi]`` components as in the case\n    ``align='cyl'``. This is useful for a direct comparison of results with\n    either the spherical or cylindrical alignment, as it allows one to fit\n    the same data with both modelling assumptions.\nrbh: float, optional\n    This scalar gives the sigma in arcsec of the Gaussian representing the\n    central black hole of mass MBH [See Section 3.1.2 of `Cappellari (2008)`_].\n    The gravitational potential is indistinguishable from a point source\n    for radii > 2*RBH, so the default RBH=0.01 arcsec is appropriate in\n    most current situations.\n\n    ``rbh`` should not be decreased unless actually needed!\n\nOutput Parameters\n-----------------\n\nReturned as attributes of the jam_axi_intr class.\n\n.model: array_like with shape (4, p)\n    - Contains ``[sig2R, sig2z, sig2phi, v2phi]`` with ``align='cyl'``\n\n    - Contains ``[sig2r, sig2th, sig2phi, v2phi]`` with ``align='sph'``\n\n    where the above quantities are defined as:\n\n    sig2R (sig2r): array_like with shape (p,)\n        squared intrinsic dispersion in ``(km/s)^2`` along the R (r)\n        direction at each ``(R, z)`` location.\n\n    sig2z (sig2th): array_like with shape (p,)\n        squared intrinsic dispersion in ``(km/s)^2`` along the z (th)\n        direction at each ``(R, z)`` location.\n\n    sig2phi: array_like with shape (p,)\n        squared intrinsic dispersion in ``(km/s)^2``  along the\n        tangential ``phi`` direction at each ``(R, z)`` location.\n\n    v2phi: array_like with shape (p,)\n        the second velocity moment in ``(km/s)^2`` along the\n        tangential ``phi`` direction at each ``(R, z)`` location.\n\n    The mean velocity can be computed as ``vphi = np.sqrt(v2phi - sig2phi)``\n.flux: array_like  with shape (p,)\n    Vector with the MGE luminosity density at each ``(R, z)`` location in\n    ``Lsun/pc^3``, used to plot the isophotes on the model results.\n.ml: float\n    Best fitting M/L.\n.chi2: float\n    Reduced chi^2 (chi^2/DOF) describing the quality of the fit::\n\n        chi^2 = np.sum(((data[goodbins] - model[goodbins])/errors[goodbins])^2)\n              / goodbins.sum()\n\n###########################################################################\n\n\nLicense\n=======\n\nOther/Proprietary License\n\nCopyright (c) 2003-2020 Michele Cappellari\n\nThis software is provided as is without any warranty whatsoever.\nPermission to use, for non-commercial purposes is granted.\nPermission to modify for personal or internal use is granted,\nprovided this copyright and disclaimer are included in all \ncopies of the software. All other rights are reserved.\nIn particular, redistribution of the code is not allowed.\n\nChangelog\n=========\n\nV6.0.1: MC, Oxford, 23 April 2020\n    - Fixed ``model`` output when fitting ``ml``.\n      Thanks to Selina Nitschai (mpia-hd.mpg.de) for reporting.\n\nV6.0.0: MC, Oxford, 22 April 2020\n    - Major changes to the whole ``jampy`` package: from this version\n      I include the new spherically-aligned solution of the Jeans \n      equations from Cappellari (2020, MNRAS).\n    - Two new functions ``jam_axi_intr`` and ``jam_axi_proj``\n      now provide either the intrinsic or the projected moments,\n      respectively, for both the spherically-aligned and \n      cylindrically-aligned JAM solutions.\n    - I moved the previous procedures ``jam_axi_rms``, ``jam_axi_vel``\n      and ``jam_sph_rms`` to the ``jampy.legacy`` folder.  \n\nV5.0.23: MC, Oxford, 31 October 2019\n    - Use analytic mge_surf in convolution.\n\nV5.0.22: MC, Oxford, 21 March 2019\n    - Reformatted documentation of all procedures.\n\nV5.0.21: MC, Oxford, 14 February 2019\n    - Significant speedup of ``mge_vcirc``.\n    - Formatted documentation.\n    - Created package-wide CHANGELOG: before this version, the\n      CHANGELOG file only refers to the procedure ``jam_axi_rms``.\n\nV5.0.16: MC, Oxford, 27 September 2018\n    - Fixed clock DeprecationWarning in Python 3.7.\n\nV5.0.15: MC, Oxford, 12 May 2018\n    - Dropped Python 2.7 support.\n\nV5.0.14: MC, Oxford, 17 April 2018\n    - Fixed MatplotlibDeprecationWarning in Matplotlib 2.2.\n    - Changed imports for jam as a package.\n    - Removed example.\n\nV5.0.13: MC, Oxford, 7 March 2018\n    - Check that PSF is normalized.\n\nV5.0.12: MC, Oxford, 22 January 2018\n    - Print a message when no PSF convolution was performed.\n    - Broadcast kernel and MGE convolution loops.\n    - Fixed missing tensor in assertion test.\n\nV5.0.11: MC, Oxford, 10 September 2017\n    - Make default ``step`` depend on ``sigmapsf`` regardless of ``pixsize``.\n\nV5.0.10: MC, Oxford, 10 August 2017\n    - Raise an error if goodbins is all False.\n\nV5.0.9: MC, Oxford, 17 March 2017\n    - Included ``flux_obs`` keyword. Updated documentation.\n    - Fixed DeprecationWarning in Numpy 1.12.\n\nV5.0.8: MC, Oxford, 17 February 2017\n    - Use odd kernel size for convolution.\n    - Fixed corner case with coordinates falling outside the \n      interpolation region, due to finite machine precision.\n\nV5.0.7: MC, Oxford, 23 February 2016\n    - Scale rmsModel by the input M/L also when rms is not given.\n      Thanks to Alex Grainger (Oxford) for pointing out the inconsistency.\n    - Pass ``**kwargs`` for plotting.\n\nV5.0.6: MC, Oxford, 18 September 2015\n    - Plot bad bins on the data.\n\nV5.0.5: MC, Oxford, 23 May 2015\n    - Changed meaning of goodbins to be a boolean vector.\n\nV5.0.4: MC, Sydney, 5 February 2015\n    - Introduced further checks on matching input sizes.\n\nV5.0.3: MC, Oxford, 31 October 2014\n    - Modified final plot layout.\n\nV5.0.2: MC, Oxford, 25 May 2014\n    - Support both Python 2.7 and Python 3.\n\nV5.0.1: MC, Oxford, 24 February 2014\n    - Plot bi-symmetrized V_rms as in IDL version.\n\nV5.0.0: MC, Paranal, 11 November 2013\n    - Translated from IDL into Python.\n\nV4.1.5: MC, Paranal, 8 November 2013\n    - Use renamed CAP_* routines to avoid potential naming conflicts.\n\nV4.1.4: MC, Oxford, 12 February 2013\n    - Include _EXTRA and RANGE keywords for plotting.\n\nV4.1.3: MC, Oxford, 1 February 2013\n    - Output FLUX in Lsun/pc^2.\n\nV4.1.2: MC, Oxford, 28 May 2012\n    - Updated documentation.\n\nV4.1.1: MC, Oxford, 8 December 2011\n    - Only calculates FLUX if required.\n\nV4.1.0: MC, Oxford 19 October 2010\n    - Included TENSOR keyword to calculate any of the six components of\n      the symmetric proper motion dispersion tensor (as in note 5 of the paper).\n\nV4.0.9: MC, Oxford, 15 September 2010\n    - Plot and output with FLUX keyword the PSF-convolved MGE surface brightness.\n\nV4.0.8: MC, Oxford, 09 August 2010\n    - Use linear instead of smooth interpolation. After feedback from Eric Emsellem.\n\nV4.0.7: MC, Oxford, 01 March 2010\n    - Forces q_lum && q_pot < 1.\n\nV4.0.6: MC, Oxford, 08 February 2010\n    - The routine TEST_JAM_AXISYMMETRIC_RMS with the usage example now adopts a\n      more realistic input kinematics.\n    - Updated documentation.\n\nV4.0.5: MC, Oxford, 6 July 2009\n    - Skip unnecessary interpolation when computing a few points without PSF\n      convolution. After feedback from Eric Emsellem.\n\nV4.0.4: MC, Oxford, 29 May 2009\n    - Compute FLUX even when not plotting.\n\nV4.0.3: MC, Oxford 4 April 2009\n    - Added keyword RBH.\n\nV4.0.2: MC, Oxford, 21 November 2008\n    - Added keywords NRAD and NANG. Thanks to Michael Williams for\n      reporting possible problems with too coarse interpolation.\n\nV4.0.1: MC, Windhoek, 29 September 2008\n    - Bug fix: when ERMS was not given, the default was not properly set.\n      Included keyword STEP. The keyword FLUX is now only used for output:\n      the surface brightness for plotting is computed from the MGE model.\n\nV4.0.0: MC, Oxford, 11 September 2008\n    - Implemented PSF convolution using interpolation on a polar grid.\n      Dramatic speed-up of calculation. Further documentation.\n\nV3.2.0: MC, Oxford, 14 August 2008\n    - Updated documentation.\n\nV3.1.3: MC, Oxford, 12 August 2008\n    - First released version.\n\nV2.0.0: MC, Oxford, 20 September 2007\n    - Introduced new solution of the MGE Jeans equations with constant\n      anisotropy sig_R = b*sig_z.\n\nV1.0.0: Michele Cappellari, Vicenza, 19 November 2003\n    - Written and tested", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://purl.org/cappellari/software", "keywords": "", "license": "Other/Proprietary License", "maintainer": "", "maintainer_email": "", "name": "jampy", "package_url": "https://pypi.org/project/jampy/", "platform": "", "project_url": "https://pypi.org/project/jampy/", "project_urls": {"Homepage": "http://purl.org/cappellari/software"}, "release_url": "https://pypi.org/project/jampy/6.0.1/", "requires_dist": null, "requires_python": "", "summary": "JamPy: Jeans Anisotropic Models of Galactic Dynamics", "version": "6.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"the-jampy-package\">\n<h2><a href=\"#id13\" rel=\"nofollow\">The JamPy Package</a></h2>\n<p><strong>Jeans Anisotropic Modelling for Galactic Dynamics</strong></p>\n<img alt=\"http://www-astro.physics.ox.ac.uk/~mxc/software/jam_logo.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79edbd4fcf1a2f3870f52f43269426be162667ab/687474703a2f2f7777772d617374726f2e706879736963732e6f782e61632e756b2f7e6d78632f736f6674776172652f6a616d5f6c6f676f2e706e67\">\n<a href=\"https://pypi.org/project/jampy/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/jampy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4ab1daa9fb0bc7bd3e33910a062154d4151a33c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a616d70792e737667\"></a>\n<a href=\"https://arxiv.org/abs/0806.0042\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/arXiv-0806.0042-orange.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3614df60f15de739913b825468c74d5cac6e2ef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d303830362e303034322d6f72616e67652e737667\"></a>\n<a href=\"https://doi.org/10.1111/j.1365-2966.2008.13754.x\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/DOI-10.1111/...-green.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fa9e6bbe813f02568615f046d0de1261100850c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f444f492d31302e313131312f2e2e2e2d677265656e2e737667\"></a>\n<p><tt>JamPy</tt> is a Python implementation of the Jeans Anisotropic Modelling (JAM)\nformalism for the dynamical modelling of galaxies.</p>\n<p>This software can be used e.g. to measure the mass of supermassive black holes\nin galaxies, to infer their dark-matter content or to measure galaxy masses.</p>\n<p>The method calculates all the first and second velocity moments, for both the\nintrinsic and the projected kinematics, in spherical and axisymmetric geometry.</p>\n<p>The JAM solution assuming a cylindrically-oriented velocity ellipsoid was introduced in\n<a href=\"https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C\" rel=\"nofollow\">Cappellari (2008)</a>,\nwhile the solution assuming a spherically-oriented velocity ellipsoid was introduced in\n<a href=\"https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959\" rel=\"nofollow\">Cappellari (2020)</a></p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#the-jampy-package\" id=\"id13\" rel=\"nofollow\">The JamPy Package</a><ul>\n<li><a href=\"#attribution\" id=\"id14\" rel=\"nofollow\">Attribution</a></li>\n<li><a href=\"#installation\" id=\"id15\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#documentation\" id=\"id16\" rel=\"nofollow\">Documentation</a></li>\n</ul>\n</li>\n<li><a href=\"#jam-axi-proj\" id=\"id17\" rel=\"nofollow\">jam_axi_proj</a><ul>\n<li><a href=\"#purpose\" id=\"id18\" rel=\"nofollow\">Purpose</a></li>\n<li><a href=\"#calling-sequence\" id=\"id19\" rel=\"nofollow\">Calling Sequence</a></li>\n<li><a href=\"#input-parameters\" id=\"id20\" rel=\"nofollow\">Input Parameters</a></li>\n<li><a href=\"#optional-keywords\" id=\"id21\" rel=\"nofollow\">Optional Keywords</a></li>\n<li><a href=\"#output-parameters\" id=\"id22\" rel=\"nofollow\">Output Parameters</a></li>\n</ul>\n</li>\n<li><a href=\"#jam-axi-intr\" id=\"id23\" rel=\"nofollow\">jam_axi_intr</a><ul>\n<li><a href=\"#id6\" id=\"id24\" rel=\"nofollow\">Purpose</a></li>\n<li><a href=\"#id9\" id=\"id25\" rel=\"nofollow\">Calling Sequence</a></li>\n<li><a href=\"#id10\" id=\"id26\" rel=\"nofollow\">Input Parameters</a></li>\n<li><a href=\"#id11\" id=\"id27\" rel=\"nofollow\">Optional Keywords</a></li>\n<li><a href=\"#id12\" id=\"id28\" rel=\"nofollow\">Output Parameters</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" id=\"id29\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#changelog\" id=\"id30\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n</div>\n<div id=\"attribution\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Attribution</a></h3>\n<p>If you use this software for your research, please cite\n<a href=\"https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C\" rel=\"nofollow\">Cappellari (2008)</a>\nfor the cylindrically-aligned JAM solution and\n<a href=\"https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959\" rel=\"nofollow\">Cappellari (2020)</a>\nfor the spherically-aligned JAM solution.</p>\n<p>The BibTeX entry for the two main JAM papers are respectively:</p>\n<pre>@ARTICLE{Cappellari2008,\n    author = {{Cappellari}, Michele},\n    title = \"{Measuring the inclination and mass-to-light ratio of axisymmetric\n        galaxies via anisotropic Jeans models of stellar kinematics}\",\n    journal = {MNRAS},\n    eprint = {0806.0042},\n    year = 2008,\n    volume = 390,\n    pages = {71-86},\n    doi = {10.1111/j.1365-2966.2008.13754.x}\n}\n\n@ARTICLE{Cappellari2020,\n    author = {{Cappellari}, Michele},\n    title = \"{Efficient solution of the anisotropic spherically-aligned axisymmetric\n        Jeans equations of stellar hydrodynamics for galactic dynamics}\",\n    journal = {MNRAS in press},\n    eprint = {1907.09894},\n    year = 2020,\n    doi = {10.1093/mnras/staa959}\n}\n</pre>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Installation</a></h3>\n<p>install with:</p>\n<pre>pip install jampy\n</pre>\n<p>Without writing access to the global <tt><span class=\"pre\">site-packages</span></tt> directory, use:</p>\n<pre>pip install --user jampy\n</pre>\n</div>\n<div id=\"documentation\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Documentation</a></h3>\n<p>Full documentation is contained in the individual files headers.</p>\n<p>Usage examples are contained in the directory  <tt>jampy/examples</tt>, which is\ncopied by <tt>pip</tt> within the global <tt><span class=\"pre\">site-packages</span></tt> folder.</p>\n<p>What follows is the documentation of the two main procedures of the <tt>JamPy</tt>\npackage, extracted from their Python docstrings. The other procedures are\ndocumented in their respective docstrings.</p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"jam-axi-proj\">\n<h2><a href=\"#id17\" rel=\"nofollow\">jam_axi_proj</a></h2>\n<div id=\"purpose\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Purpose</a></h3>\n<p>This procedure calculates a prediction for all the projected first or second\nvelocity moments for an anisotropic (three-integral) axisymmetric galaxy model.</p>\n<p>Any of the three components of the first velocity moment or any of the six\ncomponents of the symmetric velocity dispersion tensor are supported.\nThese include the line-of-sight velocities and the components of the proper motion.</p>\n<p>Two assumptions for the orientation of the velocity ellipsoid are supported:</p>\n<ul>\n<li>The cylindrically-aligned <tt>(R, z, phi)</tt> solution was presented in\n<a href=\"https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C\" rel=\"nofollow\">Cappellari (2008)</a></li>\n<li>The spherically-aligned <tt>(r, th, phi)</tt> solution was presented in\n<a href=\"https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959\" rel=\"nofollow\">Cappellari (2020)</a></li>\n</ul>\n</div>\n<div id=\"calling-sequence\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Calling Sequence</a></h3>\n<pre><span class=\"n\">jam</span> <span class=\"o\">=</span> <span class=\"n\">jam_axi_proj</span><span class=\"p\">(</span>\n        <span class=\"n\">surf_lum</span><span class=\"p\">,</span> <span class=\"n\">sigma_lum</span><span class=\"p\">,</span> <span class=\"n\">qobs_lum</span><span class=\"p\">,</span> <span class=\"n\">surf_pot</span><span class=\"p\">,</span> <span class=\"n\">sigma_pot</span><span class=\"p\">,</span> <span class=\"n\">qobs_pot</span><span class=\"p\">,</span>\n        <span class=\"n\">inc</span><span class=\"p\">,</span> <span class=\"n\">mbh</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">,</span> <span class=\"n\">xbin</span><span class=\"p\">,</span> <span class=\"n\">ybin</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">flux_obs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">goodbins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ml</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">nang</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">normpsf</span><span class=\"o\">=</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">nrad</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">pixang</span><span class=\"o\">=</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"n\">pixsize</span><span class=\"o\">=</span><span class=\"mf\">0.</span><span class=\"p\">,</span>\n        <span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rbh</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sigmapsf</span><span class=\"o\">=</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"n\">moment</span><span class=\"o\">=</span><span class=\"s1\">'zz'</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">nlos</span><span class=\"o\">=</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"n\">epsrel</span><span class=\"o\">=</span><span class=\"mf\">1e-2</span><span class=\"p\">,</span> <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"s1\">'cyl'</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n\n<span class=\"n\">vrms</span> <span class=\"o\">=</span> <span class=\"n\">jam</span><span class=\"o\">.</span><span class=\"n\">model</span>  <span class=\"c1\"># with moment='zz' the output is the LOS Vrms</span>\n</pre>\n</div>\n<div id=\"input-parameters\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Input Parameters</a></h3>\n<dl>\n<dt>surf_lum: array_like with shape (n,)</dt>\n<dd><p>peak surface values of the MGE Gaussians describing the surface\nbrightness of the tracer population for which the kinematics is derived.</p>\n<p>The units are arbitrary as they cancel out in the final results.</p>\n<p>EXAMPLE: when one obtains the kinematics from optical spectroscopy,\nsurf_lum contains the galaxy optical surface brightness, which has\ntypical units of <tt>Lsun/pc^2</tt> (solar luminosities per parsec^2).</p>\n</dd>\n<dt>sigma_lum: array_like with shape (n,)</dt>\n<dd>dispersion (sigma) in arcseconds of the MGE Gaussians describing the\nkinematic-tracer population.</dd>\n<dt>qobs_lum: array_like with shape (n,)</dt>\n<dd>observed axial ratio (q\u2019) of the MGE Gaussians describing the\nkinematic-tracer population.</dd>\n<dt>surf_pot: array_like with shape (m,)</dt>\n<dd><p>peak value of the MGE Gaussians describing the galaxy total-mass\nsurface density in units of <tt>Msun/pc^2</tt> (solar masses per parsec^2).\nThis is the MGE model from which the model gravitational potential is\ncomputed.</p>\n<p>EXAMPLE: with a self-consistent model, one has the same Gaussians\nfor both the kinematic-tracer and the gravitational potential.\nThis implies <tt>surf_pot = surf_lum</tt>, <tt>sigma_pot = sigma_lum</tt> and\n<tt>qobs_pot = qobs_lum</tt>. The global M/L of the model is fitted by the\nroutine when passing the <tt>data</tt> and <tt>errors</tt> keywords with the\nobserved kinematics.</p>\n</dd>\n<dt>sigma_pot: array_like with shape (m,)</dt>\n<dd>dispersion in arcseconds of the MGE Gaussians describing the galaxy\ntotal-mass surface density.</dd>\n<dt>qobs_pot: array_like with shape (m,)</dt>\n<dd>observed axial ratio of the MGE Gaussians describing the galaxy\ntotal-mass surface density.</dd>\n<dt>inc: float</dt>\n<dd>inclination in degrees (0 being face-on and 90 edge-on).</dd>\n<dt>mbh: float</dt>\n<dd><p>Mass of a nuclear supermassive black hole in solar masses.</p>\n<p>IMPORTANT: The model predictions are computed assuming <tt>surf_pot</tt>\ngives the total mass. In the self-consistent case, one has\n<tt>surf_pot = surf_lum</tt> and if requested (keyword <tt>ml</tt>) the program\ncan scale the output <tt>model</tt> to best fit the data. The scaling is\nequivalent to multiplying <em>both</em> <tt>surf_pot</tt> and <tt>mbh</tt> by a factor M/L.\nTo avoid mistakes, the actual <tt>mbh</tt> used by the output model is\nprinted on the screen.</p>\n</dd>\n<dt>distance: float</dt>\n<dd>the distance of the galaxy in Mpc.</dd>\n<dt>xbin: array_like with shape (p,)</dt>\n<dd><p>X coordinates in arcseconds of the bins (or pixels) at which one wants\nto compute the model predictions. The X-axis is assumed to coincide with\nthe galaxy projected major axis. The galaxy center is at <tt>(0,0)</tt>.</p>\n<p>When no PSF/pixel convolution is performed (<tt>sigmapsf=0</tt> or\n<tt>pixsize=0</tt>) there is a singularity at <tt>(0,0)</tt> which should be\navoided by the user in the input coordinates.</p>\n</dd>\n<dt>ybin: array_like with shape (p,)</dt>\n<dd>Y coordinates in arcseconds of the bins (or pixels) at which one wants\nto compute the model predictions. The Y-axis is assumed to coincide with\nthe projected galaxy symmetry axis.</dd>\n</dl>\n</div>\n<div id=\"optional-keywords\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Optional Keywords</a></h3>\n<dl>\n<dt>align: {\u2018cyl\u2019, \u2018sph\u2019}, optional.</dt>\n<dd><p>Assumed alignment for the velocity ellipsoid during the solution of\nthe Jeans equations.</p>\n<ul>\n<li><tt><span class=\"pre\">align='cyl'</span></tt> assumes a cylindrically-aligned velocity ellipsoid\nusing the solution of <a href=\"https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C\" rel=\"nofollow\">Cappellari (2008)</a></li>\n<li><tt><span class=\"pre\">align='sph'</span></tt> assumes a spherically-aligned velocity ellipsoid\nusing the solution of <a href=\"https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959\" rel=\"nofollow\">Cappellari (2020)</a></li>\n</ul>\n</dd>\n<dt>beta: array_like with shape (n,)</dt>\n<dd><p>radial anisotropy of the individual kinematic-tracer MGE Gaussians\n(Default: <tt>beta=np.zeros(n)</tt>):</p>\n<pre>beta = 1 - (sigma_th/sigma_r)^2  # with align=`sph`\nbeta = 1 - (sigma_z/sigma_R)^2   # with align=`cyl`\n</pre>\n</dd>\n<dt>gamma: array_like with shape (n,)</dt>\n<dd><p>tangential anisotropy of the individual kinematic-tracer MGE Gaussians\n(Default: <tt>gamma=np.zeros(n)</tt>):</p>\n<pre>gamma = 1 - (sigma_phi/sigma_r)^2  # with align=`sph`\ngamma = 1 - (sigma_phi/sigma_R)^2  # with align=`cyl`\n</pre>\n</dd>\n<dt>epsrel: float, optional</dt>\n<dd>Relative error requested for the numerical computation of the intrinsic\nmoments (before line-of-sight quadrature). (Default: <tt><span class=\"pre\">epsrel=1e-2</span></tt>)</dd>\n<dt>errors: array_like with shape (p,), optional</dt>\n<dd><p>1sigma uncertainty associated to the <tt>data</tt> measurements.</p>\n<p>EXAMPLE: In the case where the data are given by the\n<tt>Vrms = sqrt(velBin^2 + sigBin^2)</tt>, from the error propagation:</p>\n<pre>errors = sqrt((dVel*velBin)^2 + (dSig*sigBin)^2)/RMS,\n</pre>\n<p>where <tt>velBin</tt> and <tt>sigBin</tt> are the velocity and dispersion in each\nbin and <tt>dVel</tt> and <tt>dSig</tt> are the corresponding uncertainties.\n(Default: constant errors <tt>errors = 0.05*np.median(data)</tt>)</p>\n</dd>\n<dt>flux_obs: array_like with shape (p,), optional</dt>\n<dd>Optional mean surface brightness of each bin for plotting.</dd>\n<dt>goodbins: array_like with shape (p,)</dt>\n<dd>Boolean vector with values True for the bins which have to be included\nin the fit (if requested) and <tt><span class=\"pre\">chi**2</span></tt> calculation.\n(Default: fit all bins).</dd>\n<dt>ml: float, optional</dt>\n<dd><p>Mass-to-light ratio (M/L) to multiply the values given by <tt>surf_pot</tt>.\nSetting this keyword is completely equivalent to multiplying the\noutput <tt>model</tt> by <tt>np.sqrt(M/L)</tt> after the fit. This implies that\nthe BH mass becomes <tt><span class=\"pre\">mbh*(M/L)</span></tt>.</p>\n<p>If this keyword is not set or set to a negative number in input, the M/L\nis fitted from the data and the best-fitting M/L is returned in the output.\nThe BH mass of the best-fitting model is <tt><span class=\"pre\">mbh*(M/L)</span></tt>.</p>\n</dd>\n<dt>nlos: int (optional)</dt>\n<dd>Number of values used for the numerical line-of-sight quadrature.\n(default <tt>nlos=65</tt>)</dd>\n<dt>normpsf: array_like with shape (q,)</dt>\n<dd>fraction of the total PSF flux contained in the circular Gaussians\ndescribing the PSF of the kinematic observations.\nThe PSF will be used for seeing convolution of the model kinematics.\nIt has to be <tt>np.sum(normpsf) = 1</tt>.</dd>\n<dt>nang: int, optional</dt>\n<dd>Same as for <tt>nrad</tt>, but for the number of angular intervals.\n(default: <tt>nang=10</tt>)</dd>\n<dt>nrad: int, optional</dt>\n<dd>The number of logarithmically spaced radial positions for which the\nmodel is evaluated before interpolation and PSF convolution. One may\nwant to increase this value if the model has to be evaluated over many\norders of magnitude in radius (default: <tt>nrad=20</tt>).</dd>\n<dt>pixang: float, optional</dt>\n<dd>the angle between the observed spaxels and the galaxy major axis X.</dd>\n<dt>pixsize: float, optional</dt>\n<dd><p>Size in arcseconds of the (square) spatial elements at which the\nkinematics is obtained. This may correspond to the side of the spaxel\nor lenslets of an integral-field spectrograph. This size is used to\ncompute the kernel for the seeing and aperture convolution.</p>\n<p>If this is not set, or <tt>pixsize=0</tt>, then convolution is not performed.</p>\n</dd>\n<dt>plot: bool</dt>\n<dd>Set this keyword to produce a plot at the end of the calculation.</dd>\n<dt>quiet: bool</dt>\n<dd>Set this keyword to avoid printing values on the screen.</dd>\n<dt>rbh: float, optional</dt>\n<dd><p>This scalar gives the sigma in arcsec of the Gaussian representing the\ncentral black hole of mass MBH (See Section 3.1.2 of <a href=\"http://adsabs.harvard.edu/abs/2008MNRAS.390...71C\" rel=\"nofollow\">Cappellari 2008.</a>)\nThe gravitational potential is indistinguishable from a point source\nfor <tt>radii &gt; 2*rbh</tt>, so the default <tt>rbh=0.01</tt> arcsec is appropriate\nin most current situations.</p>\n<p><tt>RBH</tt> should not be decreased unless actually needed!</p>\n</dd>\n<dt>data: array_like with shape (p,), optional</dt>\n<dd><p>observed first or second velocity moment used to fit the model.</p>\n<p>EXAMPLE: In the common case where one has only line-of-sight velocities\nthe second moment is given by:</p>\n<pre>V_RMS = sqrt(velBin**2 + sigBin**2)\n</pre>\n<p>at the coordinates positions given by the vectors <tt>xbin</tt> and <tt>ybin</tt>.</p>\n<p>If <tt>data</tt> is set and <tt>ml</tt> is negative or <tt>None</tt>, then the model\nis fitted to the data, otherwise, the adopted <tt>ml</tt> is used and just\nthe <tt><span class=\"pre\">chi**2</span></tt> is returned.</p>\n</dd>\n<dt>sigmapsf: array_like with shape (q,)</dt>\n<dd><p>dispersion in arcseconds of the circular Gaussians describing the PSF\nof the kinematic observations.</p>\n<p>If this is not set, or <tt>sigmapsf=0</tt>, then convolution is not performed.</p>\n<p>IMPORTANT: PSF convolution is done by creating a 2D image, with pixels\nsize given by <tt>step=max(sigmapsf, <span class=\"pre\">pixsize/2)/4</span></tt>, and convolving it\nwith the PSF + aperture. If the input radii RAD are very large with\nrespect to <tt>step</tt>, the 2D image may require a too large amount of memory.\nIf this is the case one may compute the model predictions at small radii\nseparately from those at large radii, where PSF convolution is not\nneeded.</p>\n</dd>\n<dt>step: float, optional</dt>\n<dd>Spatial step for the model calculation and PSF convolution in arcsec.\nThis value is automatically computed by default as\n<tt><span class=\"pre\">step=max(sigmapsf,pixsize/2)/4</span></tt>. It is assumed that when <tt>pixsize</tt>\nor <tt>sigmapsf</tt> are big, high-resolution calculations are not needed. In\nsome cases, however, e.g. to accurately estimate the central Vrms in a\nvery cuspy galaxy inside a large aperture, one may want to override the\ndefault value to force smaller spatial pixels using this keyword.</dd>\n<dt>moment: {\u2018x\u2019, \u2018y\u2019, \u2018z\u2019, \u2018xx\u2019, \u2018yy\u2019, \u2018zz\u2019, \u2018xy\u2019, \u2018xz\u2019, \u2018yz\u2019}, optional</dt>\n<dd><p>String specifying the component of the velocity first or second moments.</p>\n<ul>\n<li><tt><span class=\"pre\">moment='x'</span></tt> gives the first moment &lt;V_x\u2019&gt; of the proper motion in\nthe direction orthogonal to the projected symmetry axis.</li>\n<li><tt><span class=\"pre\">moment='y'</span></tt> gives the first moment &lt;V_y\u2019&gt; of the proper motion in\nthe direction parallel to the projected symmetry axis.</li>\n<li><tt><span class=\"pre\">moment='z'</span></tt> gives the first moment &lt;V_z\u2019&gt; of the line-of-sight\nvelocity.</li>\n<li><tt><span class=\"pre\">moment='xx'</span></tt> gives sigma_xx=sqrt&lt;V_x\u2019^2&gt; of the component of the\nproper motion dispersion tensor in the direction orthogonal to the\nprojected symmetry axis.</li>\n<li><tt><span class=\"pre\">moment='yy'</span></tt> gives sigma_yy=sqrt&lt;V_y\u2019^2&gt; of the component of the\nproper motion dispersion tensor in the direction parallel to the\nprojected symmetry axis.</li>\n<li><tt><span class=\"pre\">moment='zz'</span></tt> (default) gives the usual line-of-sight V_rms=sqrt&lt;V_z\u2019^2&gt;.</li>\n<li><tt><span class=\"pre\">moment='xy'</span></tt> gives the mixed component &lt;V_x\u2019V_y\u2019&gt; of the proper\nmotion dispersion tensor.</li>\n<li><tt><span class=\"pre\">moment='xz'</span></tt> gives the mixed component &lt;V_x\u2019V_z\u2019&gt; of the proper\nmotion dispersion tensor.</li>\n<li><tt><span class=\"pre\">moment='yz'</span></tt> gives the mixed component &lt;V_y\u2019V_z\u2019&gt; of the proper\nmotion dispersion tensor.</li>\n</ul>\n</dd>\n<dt>vmax: float, optional</dt>\n<dd>Maximum value of the <tt>data</tt> to plot.</dd>\n<dt>vmin: float, optional</dt>\n<dd>Minimum value of the <tt>data</tt> to plot.</dd>\n<dt>kwargs: dict, optioonal</dt>\n<dd>Additional parameters passed to <tt>plot_velfield</tt>.</dd>\n</dl>\n</div>\n<div id=\"output-parameters\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Output Parameters</a></h3>\n<p>Stored as attributes of the <tt>jam_axi_proj</tt> class.</p>\n<dl>\n<dt>.model: array_like with shape (p,)</dt>\n<dd><p>model predictions for the selected velocity moments for each input bin.</p>\n<p>Any of the six components of the symmetric proper motion dispersion\ntensor, or any of the three first velocity moments can be provided in\noutput using the <tt>moment</tt> keyword.</p>\n</dd>\n<dt>.ml: float</dt>\n<dd>Best fitting M/L.</dd>\n<dt>.chi2: float</dt>\n<dd><p>Reduced <tt><span class=\"pre\">chi**2</span></tt> describing the quality of the fit:</p>\n<pre>chi2 = (((data[goodbins] - model[goodbins])/errors[goodbins])**2).sum()\n     / goodbins.sum()\n</pre>\n</dd>\n<dt>.flux: array_like with shape (p,)</dt>\n<dd>PSF-convolved MGE surface brightness of each bin in <tt><span class=\"pre\">Lsun/pc**2</span></tt>,\nused to plot the isophotes of the kinematic-tracer on the model results.</dd>\n</dl>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"jam-axi-intr\">\n<h2><a href=\"#id23\" rel=\"nofollow\">jam_axi_intr</a></h2>\n<div id=\"id6\">\n<h3><a href=\"#id24\" rel=\"nofollow\">Purpose</a></h3>\n<p>This procedure calculates all the intrinsic first and second velocity\nmoments for an anisotropic axisymmetric galaxy model.</p>\n<p>This program is useful e.g. to model the kinematics of galaxies\nlike our Milky Way, for which the intrinsic moments can be observed\ndirectly, or to compute starting conditions for N-body numerical\nsimulations of galaxies.</p>\n<p>Two assumptions for the orientation of the velocity ellipsoid are supported:</p>\n<ul>\n<li>The cylindrically-aligned <tt>(R, z, phi)</tt> solution was presented in\n<a href=\"https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C\" rel=\"nofollow\">Cappellari (2008)</a></li>\n<li>The spherically-aligned <tt>(r, th, phi)</tt> solution was presented in\n<a href=\"https://ui.adsabs.harvard.edu/abs/10.1093/mnras/staa959\" rel=\"nofollow\">Cappellari (2020)</a></li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id25\" rel=\"nofollow\">Calling Sequence</a></h3>\n<pre><span class=\"n\">jam</span> <span class=\"o\">=</span> <span class=\"n\">jam_axi_intr</span><span class=\"p\">(</span>\n    <span class=\"n\">dens_lum</span><span class=\"p\">,</span> <span class=\"n\">sigma_lum</span><span class=\"p\">,</span> <span class=\"n\">qintr_lum</span><span class=\"p\">,</span> <span class=\"n\">dens_pot</span><span class=\"p\">,</span> <span class=\"n\">sigma_pot</span><span class=\"p\">,</span> <span class=\"n\">qintr_pot</span><span class=\"p\">,</span>\n    <span class=\"n\">mbh</span><span class=\"p\">,</span> <span class=\"n\">Rbin</span><span class=\"p\">,</span> <span class=\"n\">zbin</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">epsrel</span><span class=\"o\">=</span><span class=\"mf\">1e-2</span><span class=\"p\">,</span> <span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">rbh</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nodots</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fignum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ml</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">goodbins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nrad</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">nang</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">interp</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">proj_cyl</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"s1\">'cyl'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The meaning of the output is different depending on `align`</span>\n<span class=\"n\">sig2R</span><span class=\"p\">,</span> <span class=\"n\">sig2z</span><span class=\"p\">,</span> <span class=\"n\">sig2phi</span><span class=\"p\">,</span> <span class=\"n\">v2phi</span> <span class=\"o\">=</span> <span class=\"n\">jam</span><span class=\"o\">.</span><span class=\"n\">model</span>  <span class=\"c1\"># with align='cyl'</span>\n<span class=\"n\">sig2r</span><span class=\"p\">,</span> <span class=\"n\">sig2th</span><span class=\"p\">,</span> <span class=\"n\">sig2phi</span><span class=\"p\">,</span> <span class=\"n\">v2phi</span> <span class=\"o\">=</span> <span class=\"n\">jam</span><span class=\"o\">.</span><span class=\"n\">model</span>  <span class=\"c1\"># with align='sph'</span>\n</pre>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id26\" rel=\"nofollow\">Input Parameters</a></h3>\n<dl>\n<dt>dens_lum: array_like with shape (n,)</dt>\n<dd>vector containing the peak value of the MGE Gaussians describing\nthe intrinsic density of the tracer population for which the kinematics\nis derived.\nThe units are arbitarary as they cancel out in the final results.\nTypical units are e.g. Lsun/pc^3 (solar luminosities per parsec^3)</dd>\n<dt>sigma_lum: array_like with shape (n,)</dt>\n<dd>vector containing the dispersion (sigma) in pc of the MGE\nGaussians describing the galaxy kinematic-tracer population.</dd>\n<dt>qintr_lum: array_like with shape (n,)</dt>\n<dd>vector containing the intrinsic axial ratio (q) of the MGE\nGaussians describing the galaxy kinematic-tracer population.</dd>\n<dt>surf_pot: array_like with shape (m,)</dt>\n<dd>vector containing the peak value of the MGE Gaussians\ndescribing the galaxy total-mass density in units of Msun/pc^3 (solar\nmasses per parsec^3). This is the MGE model from which the model\ngravitational potential is computed.</dd>\n<dt>sigma_pot: array_like with shape (m,)</dt>\n<dd>vector containing the dispersion in pc of the MGE\nGaussians describing the galaxy total-mass density.</dd>\n<dt>qintr_pot: array_like with shape (m,)</dt>\n<dd>vector containing the intrinsic axial ratio of the MGE\nGaussians describing the galaxy total-mass density.</dd>\n<dt>mbh: scalar</dt>\n<dd>Mass of a nuclear supermassive black hole in solar masses.</dd>\n<dt>Rbin: array_like with shape (p,)</dt>\n<dd><p>Vector with the <tt>R</tt> coordinates in pc of the bins (or pixels) at\nwhich one wants to compute the model predictions. This is the first\ncylindrical coordinate <tt>(R, z)</tt> with the galaxy center at <tt>(0,0)</tt>.</p>\n<p>There is a singularity at <tt>(0,0)</tt> which should be avoided by the user\nin the input coordinates.</p>\n</dd>\n<dt>zbin: array_like with shape (p,)</dt>\n<dd>Vector with the <tt>z</tt> coordinates in pc of the bins (or pixels) at\nwhich one wants to compute the model predictions. This is the second\ncylindrical coordinate <tt>(R, z)</tt>, with the z-axis coincident with the\ngalaxy symmetry axis.</dd>\n</dl>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id27\" rel=\"nofollow\">Optional Keywords</a></h3>\n<dl>\n<dt>beta: array_like with shape (n,)</dt>\n<dd><p>Vector with the vertical anisotropy of the individual kinematic-tracer\nMGE Gaussians (Default: <tt>beta=np.zeros(n)</tt>):</p>\n<pre>beta = 1 - (sigma_th/sigma_r)^2  # with align=`sph`\nbeta = 1 - (sigma_z/sigma_R)^2   # with align=`cyl`\n</pre>\n</dd>\n<dt>data: array_like of shape (4, p)</dt>\n<dd><p>Four input vectors with the observed values of:</p>\n<ul>\n<li><tt>[sigR, sigz, sigphi, vphi]</tt> in km/s, when <tt><span class=\"pre\">align='cyl'</span></tt>\n(or <tt><span class=\"pre\">align='sph'</span></tt> and <tt>proj_cyl=True</tt>).</li>\n<li><tt>[sigr, sigth, sigphi, vphi]</tt> in km/s, when <tt><span class=\"pre\">align='sph'</span></tt>.</li>\n</ul>\n</dd>\n<dt>errors: array_like of shape (4, p)</dt>\n<dd>errors on <tt>data</tt>, in the same format (default 5 km/s).</dd>\n<dt>gamma: array_like with shape (n,)</dt>\n<dd><p>Vector with the tangential anisotropy of the individual kinematic-tracer\nMGE Gaussians (Default: <tt>gamma=np.zeros(n)</tt>):</p>\n<pre>gamma = 1 - (sigma_phi/sigma_r)^2  # with align=`sph`\ngamma = 1 - (sigma_phi/sigma_R)^2  # with align=`cyl`\n</pre>\n</dd>\n<dt>goodbins: array_like with shape (4, p)</dt>\n<dd>Boolean vector of the same shape as <tt>data</tt> with values <tt>True</tt>\nfor the bins which have to be included in the fit (if requested) and\n<tt>chi^2</tt> calculation (Default: fit all bins).</dd>\n<dt>proj_cyl: bool, optional</dt>\n<dd>If <tt><span class=\"pre\">align='sph'</span></tt> and <tt>proj_cyl=True</tt>, the function projects the\nspherically-aligned moments to cylindrical coordinates and returns the\n<tt>[sig2R, sig2z, sig2phi, v2phi]</tt> components as in the case\n<tt><span class=\"pre\">align='cyl'</span></tt>. This is useful for a direct comparison of results with\neither the spherical or cylindrical alignment, as it allows one to fit\nthe same data with both modelling assumptions.</dd>\n<dt>rbh: float, optional</dt>\n<dd><p>This scalar gives the sigma in arcsec of the Gaussian representing the\ncentral black hole of mass MBH [See Section 3.1.2 of <a href=\"https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C\" rel=\"nofollow\">Cappellari (2008)</a>].\nThe gravitational potential is indistinguishable from a point source\nfor radii &gt; 2*RBH, so the default RBH=0.01 arcsec is appropriate in\nmost current situations.</p>\n<p><tt>rbh</tt> should not be decreased unless actually needed!</p>\n</dd>\n</dl>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id28\" rel=\"nofollow\">Output Parameters</a></h3>\n<p>Returned as attributes of the jam_axi_intr class.</p>\n<dl>\n<dt>.model: array_like with shape (4, p)</dt>\n<dd><ul>\n<li>Contains <tt>[sig2R, sig2z, sig2phi, v2phi]</tt> with <tt><span class=\"pre\">align='cyl'</span></tt></li>\n<li>Contains <tt>[sig2r, sig2th, sig2phi, v2phi]</tt> with <tt><span class=\"pre\">align='sph'</span></tt></li>\n</ul>\n<p>where the above quantities are defined as:</p>\n<dl>\n<dt>sig2R (sig2r): array_like with shape (p,)</dt>\n<dd>squared intrinsic dispersion in <tt><span class=\"pre\">(km/s)^2</span></tt> along the R (r)\ndirection at each <tt>(R, z)</tt> location.</dd>\n<dt>sig2z (sig2th): array_like with shape (p,)</dt>\n<dd>squared intrinsic dispersion in <tt><span class=\"pre\">(km/s)^2</span></tt> along the z (th)\ndirection at each <tt>(R, z)</tt> location.</dd>\n<dt>sig2phi: array_like with shape (p,)</dt>\n<dd>squared intrinsic dispersion in <tt><span class=\"pre\">(km/s)^2</span></tt>  along the\ntangential <tt>phi</tt> direction at each <tt>(R, z)</tt> location.</dd>\n<dt>v2phi: array_like with shape (p,)</dt>\n<dd>the second velocity moment in <tt><span class=\"pre\">(km/s)^2</span></tt> along the\ntangential <tt>phi</tt> direction at each <tt>(R, z)</tt> location.</dd>\n</dl>\n<p>The mean velocity can be computed as <tt>vphi = np.sqrt(v2phi - sig2phi)</tt></p>\n</dd>\n<dt>.flux: array_like  with shape (p,)</dt>\n<dd>Vector with the MGE luminosity density at each <tt>(R, z)</tt> location in\n<tt>Lsun/pc^3</tt>, used to plot the isophotes on the model results.</dd>\n<dt>.ml: float</dt>\n<dd>Best fitting M/L.</dd>\n<dt>.chi2: float</dt>\n<dd><p>Reduced chi^2 (chi^2/DOF) describing the quality of the fit:</p>\n<pre>chi^2 = np.sum(((data[goodbins] - model[goodbins])/errors[goodbins])^2)\n      / goodbins.sum()\n</pre>\n</dd>\n</dl>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"license\">\n<h2><a href=\"#id29\" rel=\"nofollow\">License</a></h2>\n<p>Other/Proprietary License</p>\n<p>Copyright (c) 2003-2020 Michele Cappellari</p>\n<p>This software is provided as is without any warranty whatsoever.\nPermission to use, for non-commercial purposes is granted.\nPermission to modify for personal or internal use is granted,\nprovided this copyright and disclaimer are included in all\ncopies of the software. All other rights are reserved.\nIn particular, redistribution of the code is not allowed.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id30\" rel=\"nofollow\">Changelog</a></h2>\n<dl>\n<dt>V6.0.1: MC, Oxford, 23 April 2020</dt>\n<dd><ul>\n<li>Fixed <tt>model</tt> output when fitting <tt>ml</tt>.\nThanks to Selina Nitschai (mpia-hd.mpg.de) for reporting.</li>\n</ul>\n</dd>\n<dt>V6.0.0: MC, Oxford, 22 April 2020</dt>\n<dd><ul>\n<li>Major changes to the whole <tt>jampy</tt> package: from this version\nI include the new spherically-aligned solution of the Jeans\nequations from Cappellari (2020, MNRAS).</li>\n<li>Two new functions <tt>jam_axi_intr</tt> and <tt>jam_axi_proj</tt>\nnow provide either the intrinsic or the projected moments,\nrespectively, for both the spherically-aligned and\ncylindrically-aligned JAM solutions.</li>\n<li>I moved the previous procedures <tt>jam_axi_rms</tt>, <tt>jam_axi_vel</tt>\nand <tt>jam_sph_rms</tt> to the <tt>jampy.legacy</tt> folder.</li>\n</ul>\n</dd>\n<dt>V5.0.23: MC, Oxford, 31 October 2019</dt>\n<dd><ul>\n<li>Use analytic mge_surf in convolution.</li>\n</ul>\n</dd>\n<dt>V5.0.22: MC, Oxford, 21 March 2019</dt>\n<dd><ul>\n<li>Reformatted documentation of all procedures.</li>\n</ul>\n</dd>\n<dt>V5.0.21: MC, Oxford, 14 February 2019</dt>\n<dd><ul>\n<li>Significant speedup of <tt>mge_vcirc</tt>.</li>\n<li>Formatted documentation.</li>\n<li>Created package-wide CHANGELOG: before this version, the\nCHANGELOG file only refers to the procedure <tt>jam_axi_rms</tt>.</li>\n</ul>\n</dd>\n<dt>V5.0.16: MC, Oxford, 27 September 2018</dt>\n<dd><ul>\n<li>Fixed clock DeprecationWarning in Python 3.7.</li>\n</ul>\n</dd>\n<dt>V5.0.15: MC, Oxford, 12 May 2018</dt>\n<dd><ul>\n<li>Dropped Python 2.7 support.</li>\n</ul>\n</dd>\n<dt>V5.0.14: MC, Oxford, 17 April 2018</dt>\n<dd><ul>\n<li>Fixed MatplotlibDeprecationWarning in Matplotlib 2.2.</li>\n<li>Changed imports for jam as a package.</li>\n<li>Removed example.</li>\n</ul>\n</dd>\n<dt>V5.0.13: MC, Oxford, 7 March 2018</dt>\n<dd><ul>\n<li>Check that PSF is normalized.</li>\n</ul>\n</dd>\n<dt>V5.0.12: MC, Oxford, 22 January 2018</dt>\n<dd><ul>\n<li>Print a message when no PSF convolution was performed.</li>\n<li>Broadcast kernel and MGE convolution loops.</li>\n<li>Fixed missing tensor in assertion test.</li>\n</ul>\n</dd>\n<dt>V5.0.11: MC, Oxford, 10 September 2017</dt>\n<dd><ul>\n<li>Make default <tt>step</tt> depend on <tt>sigmapsf</tt> regardless of <tt>pixsize</tt>.</li>\n</ul>\n</dd>\n<dt>V5.0.10: MC, Oxford, 10 August 2017</dt>\n<dd><ul>\n<li>Raise an error if goodbins is all False.</li>\n</ul>\n</dd>\n<dt>V5.0.9: MC, Oxford, 17 March 2017</dt>\n<dd><ul>\n<li>Included <tt>flux_obs</tt> keyword. Updated documentation.</li>\n<li>Fixed DeprecationWarning in Numpy 1.12.</li>\n</ul>\n</dd>\n<dt>V5.0.8: MC, Oxford, 17 February 2017</dt>\n<dd><ul>\n<li>Use odd kernel size for convolution.</li>\n<li>Fixed corner case with coordinates falling outside the\ninterpolation region, due to finite machine precision.</li>\n</ul>\n</dd>\n<dt>V5.0.7: MC, Oxford, 23 February 2016</dt>\n<dd><ul>\n<li>Scale rmsModel by the input M/L also when rms is not given.\nThanks to Alex Grainger (Oxford) for pointing out the inconsistency.</li>\n<li>Pass <tt>**kwargs</tt> for plotting.</li>\n</ul>\n</dd>\n<dt>V5.0.6: MC, Oxford, 18 September 2015</dt>\n<dd><ul>\n<li>Plot bad bins on the data.</li>\n</ul>\n</dd>\n<dt>V5.0.5: MC, Oxford, 23 May 2015</dt>\n<dd><ul>\n<li>Changed meaning of goodbins to be a boolean vector.</li>\n</ul>\n</dd>\n<dt>V5.0.4: MC, Sydney, 5 February 2015</dt>\n<dd><ul>\n<li>Introduced further checks on matching input sizes.</li>\n</ul>\n</dd>\n<dt>V5.0.3: MC, Oxford, 31 October 2014</dt>\n<dd><ul>\n<li>Modified final plot layout.</li>\n</ul>\n</dd>\n<dt>V5.0.2: MC, Oxford, 25 May 2014</dt>\n<dd><ul>\n<li>Support both Python 2.7 and Python 3.</li>\n</ul>\n</dd>\n<dt>V5.0.1: MC, Oxford, 24 February 2014</dt>\n<dd><ul>\n<li>Plot bi-symmetrized V_rms as in IDL version.</li>\n</ul>\n</dd>\n<dt>V5.0.0: MC, Paranal, 11 November 2013</dt>\n<dd><ul>\n<li>Translated from IDL into Python.</li>\n</ul>\n</dd>\n<dt>V4.1.5: MC, Paranal, 8 November 2013</dt>\n<dd><ul>\n<li>Use renamed CAP_* routines to avoid potential naming conflicts.</li>\n</ul>\n</dd>\n<dt>V4.1.4: MC, Oxford, 12 February 2013</dt>\n<dd><ul>\n<li>Include _EXTRA and RANGE keywords for plotting.</li>\n</ul>\n</dd>\n<dt>V4.1.3: MC, Oxford, 1 February 2013</dt>\n<dd><ul>\n<li>Output FLUX in Lsun/pc^2.</li>\n</ul>\n</dd>\n<dt>V4.1.2: MC, Oxford, 28 May 2012</dt>\n<dd><ul>\n<li>Updated documentation.</li>\n</ul>\n</dd>\n<dt>V4.1.1: MC, Oxford, 8 December 2011</dt>\n<dd><ul>\n<li>Only calculates FLUX if required.</li>\n</ul>\n</dd>\n<dt>V4.1.0: MC, Oxford 19 October 2010</dt>\n<dd><ul>\n<li>Included TENSOR keyword to calculate any of the six components of\nthe symmetric proper motion dispersion tensor (as in note 5 of the paper).</li>\n</ul>\n</dd>\n<dt>V4.0.9: MC, Oxford, 15 September 2010</dt>\n<dd><ul>\n<li>Plot and output with FLUX keyword the PSF-convolved MGE surface brightness.</li>\n</ul>\n</dd>\n<dt>V4.0.8: MC, Oxford, 09 August 2010</dt>\n<dd><ul>\n<li>Use linear instead of smooth interpolation. After feedback from Eric Emsellem.</li>\n</ul>\n</dd>\n<dt>V4.0.7: MC, Oxford, 01 March 2010</dt>\n<dd><ul>\n<li>Forces q_lum &amp;&amp; q_pot &lt; 1.</li>\n</ul>\n</dd>\n<dt>V4.0.6: MC, Oxford, 08 February 2010</dt>\n<dd><ul>\n<li>The routine TEST_JAM_AXISYMMETRIC_RMS with the usage example now adopts a\nmore realistic input kinematics.</li>\n<li>Updated documentation.</li>\n</ul>\n</dd>\n<dt>V4.0.5: MC, Oxford, 6 July 2009</dt>\n<dd><ul>\n<li>Skip unnecessary interpolation when computing a few points without PSF\nconvolution. After feedback from Eric Emsellem.</li>\n</ul>\n</dd>\n<dt>V4.0.4: MC, Oxford, 29 May 2009</dt>\n<dd><ul>\n<li>Compute FLUX even when not plotting.</li>\n</ul>\n</dd>\n<dt>V4.0.3: MC, Oxford 4 April 2009</dt>\n<dd><ul>\n<li>Added keyword RBH.</li>\n</ul>\n</dd>\n<dt>V4.0.2: MC, Oxford, 21 November 2008</dt>\n<dd><ul>\n<li>Added keywords NRAD and NANG. Thanks to Michael Williams for\nreporting possible problems with too coarse interpolation.</li>\n</ul>\n</dd>\n<dt>V4.0.1: MC, Windhoek, 29 September 2008</dt>\n<dd><ul>\n<li>Bug fix: when ERMS was not given, the default was not properly set.\nIncluded keyword STEP. The keyword FLUX is now only used for output:\nthe surface brightness for plotting is computed from the MGE model.</li>\n</ul>\n</dd>\n<dt>V4.0.0: MC, Oxford, 11 September 2008</dt>\n<dd><ul>\n<li>Implemented PSF convolution using interpolation on a polar grid.\nDramatic speed-up of calculation. Further documentation.</li>\n</ul>\n</dd>\n<dt>V3.2.0: MC, Oxford, 14 August 2008</dt>\n<dd><ul>\n<li>Updated documentation.</li>\n</ul>\n</dd>\n<dt>V3.1.3: MC, Oxford, 12 August 2008</dt>\n<dd><ul>\n<li>First released version.</li>\n</ul>\n</dd>\n<dt>V2.0.0: MC, Oxford, 20 September 2007</dt>\n<dd><ul>\n<li>Introduced new solution of the MGE Jeans equations with constant\nanisotropy sig_R = b*sig_z.</li>\n</ul>\n</dd>\n<dt>V1.0.0: Michele Cappellari, Vicenza, 19 November 2003</dt>\n<dd><ul>\n<li>Written and tested</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 7086486, "releases": {"5.0.17": [{"comment_text": "", "digests": {"md5": "c6b6a625726d15695cbe7cbee7c036d4", "sha256": "b413a97abd059d26d35dc5baa8513daf103f98a26a92c3a366508a815edc1042"}, "downloads": -1, "filename": "jampy-5.0.17.tar.gz", "has_sig": false, "md5_digest": "c6b6a625726d15695cbe7cbee7c036d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47118, "upload_time": "2018-05-21T09:22:14", "upload_time_iso_8601": "2018-05-21T09:22:14.710997Z", "url": "https://files.pythonhosted.org/packages/3f/09/ca2eefd880183d437644354a83c6d440e744cdfe01886a7ea363e3efbf26/jampy-5.0.17.tar.gz", "yanked": false}], "5.0.21": [{"comment_text": "", "digests": {"md5": "ee01ef146b627edbdace5ea119de68be", "sha256": "b0e934d3b1f1ebd56adc677c4caf105339e7ea22d4dadc3237c96496c8d6654e"}, "downloads": -1, "filename": "jampy-5.0.21.tar.gz", "has_sig": false, "md5_digest": "ee01ef146b627edbdace5ea119de68be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56820, "upload_time": "2019-02-14T18:28:43", "upload_time_iso_8601": "2019-02-14T18:28:43.047369Z", "url": "https://files.pythonhosted.org/packages/77/db/f8c6da6d8875cd0469e11db483660bf963b7dd4ed24ce0f38e820c76af6a/jampy-5.0.21.tar.gz", "yanked": false}], "6.0.0": [{"comment_text": "", "digests": {"md5": "1b3ae5a2f356c726d32c8cd4006d685d", "sha256": "8c98dec622532511e07c808b78d11d6fbbd356656f07689cdbf4582daae04592"}, "downloads": -1, "filename": "jampy-6.0.0.tar.gz", "has_sig": false, "md5_digest": "1b3ae5a2f356c726d32c8cd4006d685d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83179, "upload_time": "2020-04-22T17:50:43", "upload_time_iso_8601": "2020-04-22T17:50:43.706446Z", "url": "https://files.pythonhosted.org/packages/d1/ee/83b3c129dc5a749d7a7e2c70a6946a45c6dccb2387abcdb84ccc6bcaf073/jampy-6.0.0.tar.gz", "yanked": false}], "6.0.1": [{"comment_text": "", "digests": {"md5": "6c881c1b229b2cbf70a503deff5257fa", "sha256": "778c56cec23ca1b68a877691cc0ea008441c152901e3e9fdb4ee9f6d1f0b7a93"}, "downloads": -1, "filename": "jampy-6.0.1.tar.gz", "has_sig": false, "md5_digest": "6c881c1b229b2cbf70a503deff5257fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82735, "upload_time": "2020-04-23T18:29:07", "upload_time_iso_8601": "2020-04-23T18:29:07.142100Z", "url": "https://files.pythonhosted.org/packages/6d/a4/1a82be6224af3b816424d706799739980e6802c59afb22dea9323713f5d9/jampy-6.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c881c1b229b2cbf70a503deff5257fa", "sha256": "778c56cec23ca1b68a877691cc0ea008441c152901e3e9fdb4ee9f6d1f0b7a93"}, "downloads": -1, "filename": "jampy-6.0.1.tar.gz", "has_sig": false, "md5_digest": "6c881c1b229b2cbf70a503deff5257fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82735, "upload_time": "2020-04-23T18:29:07", "upload_time_iso_8601": "2020-04-23T18:29:07.142100Z", "url": "https://files.pythonhosted.org/packages/6d/a4/1a82be6224af3b816424d706799739980e6802c59afb22dea9323713f5d9/jampy-6.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:18 2020"}