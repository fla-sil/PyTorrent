{"info": {"author": "zk", "author_email": "liuzq7@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console"], "description": "# intro\nsuppose you want to make a comand line tool called icrop.\nit accept integer as numbers\nouput carrots we need to feed\n```\nex:\n\tcmd> icrop 2 \n\touput: 4\n```\n\nwe can get the output by two ways:\n- command line\n\t```bash\n\t icrop  2\n\t```\n\n- call python moudle \n  ``` bash\n  python -m icrop 2\n  ```\n\n\n\n# best practice schema \n##  env \nGenerated by `make env`\n\nThis is first step you need to do in any python project\n- it will create a virtual env\n- auto source it \n- install requirements for the start up\n\n## test \nrun `make test`\n\n\n## run\n`make run ` will run in module mode \n`make main` will run in normal mode\n\n\nYou can see that `main.py` and `icrop/__main__.py` are the same  content file.\n\nwhy do we need `main.py` ? \nIt is eay to make an  entry in IDE , like intellij.\n\n\nCould I just use `__main__.py` to run  like this?\n``` bash\npython icrop/__main__.py\n```\nYou cound not.\n\nThat is because the top-level package problem.\n\nEx:\n```\npython main.py \ntop-level package is the same as main.py\n\npython src/func/main.py  \ntop-level package is the same as main.py, aka func \ntop-level package is the folder where you run this command from\n```\n\nSo , why `icrop/__main__.py` does not work?\n\nbecause top-level package is icrop now.\n\n\n## logging \n  Always use logging for log print,don`t use `print`\n  logging config is controlled by `logging.yml`, which can control every module level\n  call `setup_logging` in main file (ra)\n\n## make module\n  update readmeput moudle in the folder parallel with logx folder.\n\n  - logx \n  - your_module\n\n\n## packing module or cmd\n\n###  local \nfor quick test purpose\n- install: `pip install .` \n- uninstall: `pip uninstall <module_name>`\n\n> make install\n> make uninstall\n\n\n### upload to test or prod PYPI server \nupload to test server:\n```\nmake upload-to-test \n```\n\nupload to prod server:\n```\nmake upload-to-prod\n```\n\n### test and coverage \n\n#### pure test\n```\nmake test\n```\n\n#### test with coverage\n```\nmake coverage\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/zk4/icrop/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zk4/icrop", "keywords": "best practice for python project", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "icrop", "package_url": "https://pypi.org/project/icrop/", "platform": "", "project_url": "https://pypi.org/project/icrop/", "project_urls": {"Download": "https://github.com/zk4/icrop/archive/master.zip", "Homepage": "https://github.com/zk4/icrop"}, "release_url": "https://pypi.org/project/icrop/0.0.1/", "requires_dist": ["pytest (==5.2.1)", "setuptools (==40.6.3)", "PyYAML (==5.3.1)"], "requires_python": ">3.0.0", "summary": "this is a description", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>intro</h1>\n<p>suppose you want to make a comand line tool called icrop.\nit accept integer as numbers\nouput carrots we need to feed</p>\n<pre><code>ex:\n\tcmd&gt; icrop 2 \n\touput: 4\n</code></pre>\n<p>we can get the output by two ways:</p>\n<ul>\n<li>\n<p>command line</p>\n<pre>  icrop  <span class=\"m\">2</span>\n</pre>\n</li>\n<li>\n<p>call python moudle</p>\n<pre>python -m icrop <span class=\"m\">2</span>\n</pre>\n</li>\n</ul>\n<h1>best practice schema</h1>\n<h2>env</h2>\n<p>Generated by <code>make env</code></p>\n<p>This is first step you need to do in any python project</p>\n<ul>\n<li>it will create a virtual env</li>\n<li>auto source it</li>\n<li>install requirements for the start up</li>\n</ul>\n<h2>test</h2>\n<p>run <code>make test</code></p>\n<h2>run</h2>\n<p><code>make run</code> will run in module mode\n<code>make main</code> will run in normal mode</p>\n<p>You can see that <code>main.py</code> and <code>icrop/__main__.py</code> are the same  content file.</p>\n<p>why do we need <code>main.py</code> ?\nIt is eay to make an  entry in IDE , like intellij.</p>\n<p>Could I just use <code>__main__.py</code> to run  like this?</p>\n<pre>python icrop/__main__.py\n</pre>\n<p>You cound not.</p>\n<p>That is because the top-level package problem.</p>\n<p>Ex:</p>\n<pre><code>python main.py \ntop-level package is the same as main.py\n\npython src/func/main.py  \ntop-level package is the same as main.py, aka func \ntop-level package is the folder where you run this command from\n</code></pre>\n<p>So , why <code>icrop/__main__.py</code> does not work?</p>\n<p>because top-level package is icrop now.</p>\n<h2>logging</h2>\n<p>Always use logging for log print,don<code>t use</code>print<code>logging config is controlled by</code>logging.yml<code>, which can control every module level call</code>setup_logging` in main file (ra)</p>\n<h2>make module</h2>\n<p>update readmeput moudle in the folder parallel with logx folder.</p>\n<ul>\n<li>logx</li>\n<li>your_module</li>\n</ul>\n<h2>packing module or cmd</h2>\n<h3>local</h3>\n<p>for quick test purpose</p>\n<ul>\n<li>install: <code>pip install .</code></li>\n<li>uninstall: <code>pip uninstall &lt;module_name&gt;</code></li>\n</ul>\n<blockquote>\n<p>make install\nmake uninstall</p>\n</blockquote>\n<h3>upload to test or prod PYPI server</h3>\n<p>upload to test server:</p>\n<pre><code>make upload-to-test \n</code></pre>\n<p>upload to prod server:</p>\n<pre><code>make upload-to-prod\n</code></pre>\n<h3>test and coverage</h3>\n<h4>pure test</h4>\n<pre><code>make test\n</code></pre>\n<h4>test with coverage</h4>\n<pre><code>make coverage\n</code></pre>\n\n          </div>"}, "last_serial": 6855957, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3b818230fe346939295f46be1d038512", "sha256": "e72938932037ca7a8fe951a8494ea262370f610d8c6f7ed96a1d2256e11a1ef0"}, "downloads": -1, "filename": "icrop-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b818230fe346939295f46be1d038512", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">3.0.0", "size": 5125, "upload_time": "2020-03-21T15:36:58", "upload_time_iso_8601": "2020-03-21T15:36:58.330697Z", "url": "https://files.pythonhosted.org/packages/2f/11/1b8a6419930fc60d385d711dced8fd076cc90c4ab60f785c7979877ccf82/icrop-0.0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b818230fe346939295f46be1d038512", "sha256": "e72938932037ca7a8fe951a8494ea262370f610d8c6f7ed96a1d2256e11a1ef0"}, "downloads": -1, "filename": "icrop-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b818230fe346939295f46be1d038512", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">3.0.0", "size": 5125, "upload_time": "2020-03-21T15:36:58", "upload_time_iso_8601": "2020-03-21T15:36:58.330697Z", "url": "https://files.pythonhosted.org/packages/2f/11/1b8a6419930fc60d385d711dced8fd076cc90c4ab60f785c7979877ccf82/icrop-0.0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:49:00 2020"}