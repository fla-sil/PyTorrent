{"info": {"author": "Albert Puig Navarro", "author_email": "apuignav@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Physics"], "description": "*******************************\nPhaseSpace\n*******************************\n\n.. image:: https://joss.theoj.org/papers/10.21105/joss.01570/status.svg\n   :target: https://doi.org/10.21105/joss.01570\n.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.2591993.svg\n   :target: https://doi.org/10.5281/zenodo.2591993\n.. image:: https://img.shields.io/pypi/status/phasespace.svg\n   :target: https://pypi.org/project/phasespace/\n.. image:: https://img.shields.io/pypi/pyversions/phasespace.svg\n   :target: https://pypi.org/project/phasespace/\n.. image:: https://travis-ci.org/zfit/phasespace.svg?branch=master\n   :target: https://travis-ci.org/zfit/phasespace\n.. image:: https://coveralls.io/repos/github/zfit/phasespace/badge.svg?branch=master\n    :target: https://coveralls.io/github/zfit/phasespace?branch=master\n.. image:: https://readthedocs.org/projects/phasespace/badge/?version=stable\n   :target: https://phasespace.readthedocs.io/en/latest/?badge=stable\n   :alt: Documentation Status\n.. image:: https://badges.gitter.im/zfit/phasespace.svg\n   :target: https://gitter.im/zfit/phasespace?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\n   :alt: Gitter chat\n\nPython implementation of the Raubold and Lynch method for `n`-body events using\nTensorFlow as a backend.\n\nThe code is based on the GENBOD function (W515 from CERNLIB), documented in [1]\nand tries to follow it as closely as possible.\n\nDetailed documentation, including the API, can be found in https://phasespace.readthedocs.io.\nDon't hesitate to join our `gitter`_ channel for questions and comments.\n\nIf you use phasespace in a scientific publication we would appreciate citations to the `JOSS`_ publication:\n\n.. code-block:: bibtex\n\n    @article{puig_eschle_phasespace-2019,\n      title = {phasespace: n-body phase space generation in Python},\n      doi = {10.21105/joss.01570},\n      url = {https://doi.org/10.21105/joss.01570},\n      year = {2019},\n      month = {oct},\n      publisher = {The Open Journal},\n      author = {Albert Puig and Jonas Eschle},\n      journal = {Journal of Open Source Software}\n    }\n\nFree software: BSD-3-Clause.\n\n[1]  F. James, Monte Carlo Phase Space, CERN 68-15 (1968)\n\n.. _JOSS: https://joss.theoj.org/papers/10.21105/joss.01570\n.. _Gitter: https://gitter.im/zfit/phasespace\n\n\nWhy?\n====\nLately, data analysis in High Energy Physics (HEP), traditionally performed within the `ROOT`_ ecosystem,\nhas been moving more and more towards Python.\nThe possibility of carrying out purely Python-based analyses has become real thanks to the\ndevelopment of many open source Python packages,\nwhich have allowed to replace most ROOT functionality with Python-based packages.\n\nOne of the aspects where this is still not possible is in the random generation of `n`-body phase space events,\nwhich are widely used in the field, for example to study kinematics\nof the particle decays of interest, or to perform importance sampling in the case of complex amplitude models.\nThis has been traditionally done with the `TGenPhaseSpace`_ class, which is based of the GENBOD function of the\nCERNLIB FORTRAN libraries and which requires a full working ROOT installation.\n\nThis package aims to address this issue by providing a TensorFlow-based implementation of such a function\nto generate `n`-body decays without requiring a ROOT installation.\nAdditionally, an oft-needed functionality to generate complex decay chains, not included in ``TGenPhaseSpace``,\nis also offered, leaving room for decaying resonances (which don't have a fixed mass, but can be seen as a\nbroad peak).\n\n.. _ROOT: https://root.cern.ch\n.. _TGenPhaseSpace: https://root.cern.ch/doc/master/classTGenPhaseSpace.html\n\nInstalling\n==========\n\n``phasespace`` is available on conda-forge and pip.\n\nTo install ``phasespace`` with conda, run:\n\n\n.. code-block:: console\n\n    $ conda install phasespace -c conda-forge\n\nTo install with pip:\n\n.. code-block:: console\n\n    $ pip install phasespace\n\nThis is the preferred method to install ``phasespace``, as it will always install the most recent stable release.\n\nFor the newest development version, which may be unstable, you can install the version from git with\n\n.. code-block:: console\n\n   $ pip install git+https://github.com/zfit/phasespace\n\n\nHow to use\n==========\n\nThe generation of simple `n`-body decays can be done using the ``nbody_decay`` shortcut to create a decay chain\nwith a very simple interface: one needs to pass the mass of the top particle and the masses of the children particle as\na list, optionally giving the names of the particles. Then, the `generate` method can be used to produce the desired sample.\nFor example, to generate `B^0\\to K\\pi`, we would do:\n\n.. code-block:: python\n\n   import phasespace\n\n   B0_MASS = 5279.58\n   PION_MASS = 139.57018\n   KAON_MASS = 493.677\n\n   weights, particles = phasespace.nbody_decay(B0_MASS,\n                                               [PION_MASS, KAON_MASS]).generate(n_events=1000)\n\nBehind the scenes, this function runs the TensorFlow graph. It returns `tf.Tensor`, which, as TensorFlow 2.x is in eager mode,\nis basically a numpy array. Any `tf.Tensor` can be explicitly converted to a numpy array by calling `tf.Tensor.numpy()` on it.\nThe `generate` function returns a `tf.Tensor` of 1000 elements in the case of ``weights`` and a list of\n``n particles`` (2) arrays of (1000, 4) shape,\nwhere each of the 4-dimensions corresponds to one of the components of the generated Lorentz 4-vector.\nAll particles are generated in the rest frame of the top particle; boosting to a certain momentum (or list of momenta) can be\nachieved by passing the momenta to the ``boost_to`` argument.\n\nSequential decays can be handled with the ``GenParticle`` class (used internally by ``generate``) and its ``set_children`` method.\nAs an example, to build the `B^{0}\\to K^{*}\\gamma` decay in which `K^*\\to K\\pi`, we would write:\n\n.. code-block:: python\n\n   from phasespace import GenParticle\n\n   B0_MASS = 5279.58\n   KSTARZ_MASS = 895.81\n   PION_MASS = 139.57018\n   KAON_MASS = 493.677\n\n   pion = GenParticle('pi+', PION_MASS)\n   kaon = GenParticle('K+', KAON_MASS)\n   kstar = GenParticle('K*', KSTARZ_MASS).set_children(pion, kaon)\n   gamma = GenParticle('gamma', 0)\n   bz = GenParticle('B0', B0_MASS).set_children(kstar, gamma)\n\n   weights, particles = bz.generate(n_events=1000)\n\nWhere we have used the fact that ``set_children`` returns the parent particle.\nIn this case, ``particles`` is a ``dict`` with the particle names as keys:\n\n.. code-block:: pycon\n\n   >>> particles\n   {'K*': array([[ 1732.79325872, -1632.88873127,   950.85807735,  2715.78804872],\n          [-1633.95329448,   239.88921123, -1961.0402768 ,  2715.78804872],\n          [  407.15613764, -2236.6569286 , -1185.16616251,  2715.78804872],\n          ...,\n          [ 1091.64603395, -1301.78721269,  1920.07503991,  2715.78804872],\n          [ -517.3125083 ,  1901.39296899,  1640.15905194,  2715.78804872],\n          [  656.56413668,  -804.76922982,  2343.99214816,  2715.78804872]]),\n    'K+': array([[  750.08077976,  -547.22569019,   224.6920906 ,  1075.30490935],\n          [-1499.90049089,   289.19714633, -1935.27960292,  2514.43047106],\n          [   97.64746732, -1236.68112923,  -381.09526192,  1388.47607911],\n          ...,\n          [  508.66157459,  -917.93523639,  1474.7064148 ,  1876.11771642],\n          [ -212.28646168,   540.26381432,   610.86656669,   976.63988936],\n          [  177.16656666,  -535.98777569,   946.12636904,  1207.28744488]]),\n    'gamma': array([[-1732.79325872,  1632.88873127,  -950.85807735,  2563.79195128],\n          [ 1633.95329448,  -239.88921123,  1961.0402768 ,  2563.79195128],\n          [ -407.15613764,  2236.6569286 ,  1185.16616251,  2563.79195128],\n          ...,\n          [-1091.64603395,  1301.78721269, -1920.07503991,  2563.79195128],\n          [  517.3125083 , -1901.39296899, -1640.15905194,  2563.79195128],\n          [ -656.56413668,   804.76922982, -2343.99214816,  2563.79195128]]),\n    'pi+': array([[  982.71247896, -1085.66304109,   726.16598675,  1640.48313937],\n          [ -134.0528036 ,   -49.3079351 ,   -25.76067389,   201.35757766],\n          [  309.50867032,  -999.97579937,  -804.0709006 ,  1327.31196961],\n          ...,\n          [  582.98445936,  -383.85197629,   445.36862511,   839.6703323 ],\n          [ -305.02604662,  1361.12915468,  1029.29248526,  1739.14815935],\n          [  479.39757002,  -268.78145413,  1397.86577911,  1508.50060384]])}\n\nThe `GenParticle` class is able to cache the graphs so it is possible to generate in a loop\nwithout overhead:\n\n.. code-block:: pycon\n\n    for i in range(10):\n        weights, particles = bz.generate(n_events=1000)\n        ...\n        (do something with weights and particles)\n        ...\n\nThis way of generating is recommended in the case of large samples, as it allows to benefit from\nparallelisation while at the same time keep the memory usage low.\n\nIf we want to operate with the TensorFlow graph instead, we can use the `generate_tensor` method\nof `GenParticle`, which has the same signature as `generate`.\n\nMore examples can be found in the ``tests`` folder and in the `documentation`_.\n\n.. _documentation: https://phasespace.readthedocs.io/en/latest/usage.html\n\n\nPhysics validation\n==================\n\nPhysics validation is performed continuously in the included tests (``tests/test_physics.py``), run through Travis CI.\nThis validation is performed at two levels:\n\n- In simple `n`-body decays, the results of ``phasespace`` are checked against ``TGenPhaseSpace``.\n- For sequential decays, the results of ``phasespace`` are checked against `RapidSim`_, a \"fast Monte Carlo generator\n  for simulation of heavy-quark hadron decays\".\n  In the case of resonances, differences are expected because our tests don't include proper modelling of their\n  mass shape, as it would require the introduction of\n  further dependencies. However, the results of the comparison can be expected visually.\n\nThe results of all physics validation performed by the ``tests_physics.py`` test are written in ``tests/plots``.\n\n.. _RapidSim: https://github.com/gcowan/RapidSim/\n\n\n\nContributing\n============\n\nContributions are always welcome, please have a look at the `Contributing guide`_.\n\n.. _Contributing guide: CONTRIBUTING.rst\n\n\n\n\n\n*********\nChangelog\n*********\n\nDevelop\n=======\n\n\nMajor Features and Improvements\n-------------------------------\n\nBehavioral changes\n------------------\n\n\nBug fixes and small changes\n---------------------------\n\nRequirement changes\n-------------------\n\n\nThanks\n------\n\n1.1.0 (27.1.2020)\n=================\n\nThis release switched to TensorFlow 2.0 eager mode. Please upgrade your TensorFlow installation if possible and change\nyour code (minimal changes) as described under \"Behavioral changes\".\nIn case this is currently impossible to do, please downgrade to < 1.1.0.\n\nMajor Features and Improvements\n-------------------------------\n - full TF2 compatibility\n\nBehavioral changes\n------------------\n - `generate` now returns an eager Tensor. This is basically a numpy array wrapped by TensorFlow.\n   To explicitly convert it to a numpy array, use the `numpy()` method of the eager Tensor.\n - `generate_tensor` is now depreceated, `generate` can directly be used instead.\n\n\nBug fixes and small changes\n---------------------------\n\nRequirement changes\n-------------------\n - requires now TensorFlow >= 2.0.0\n\n\nThanks\n------\n\n\n1.0.4 (13-10-2019)\n==========================\n\n\nMajor Features and Improvements\n-------------------------------\n\nRelease to conda-forge, thanks to Chris Burr\n\n\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zfit/phasespace", "keywords": "phasespace", "license": "BSD license", "maintainer": "zfit", "maintainer_email": "zfit@physik.uzh.ch", "name": "phasespace", "package_url": "https://pypi.org/project/phasespace/", "platform": "", "project_url": "https://pypi.org/project/phasespace/", "project_urls": {"Homepage": "https://github.com/zfit/phasespace"}, "release_url": "https://pypi.org/project/phasespace/1.1.1/", "requires_dist": ["tensorflow (>=2)", "tensorflow-probability (>=0.8)"], "requires_python": ">=3.6", "summary": "TensorFlow implementation of the Raubold and Lynch method for n-body events", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"phasespace\">\n<h2>PhaseSpace</h2>\n<a href=\"https://doi.org/10.21105/joss.01570\" rel=\"nofollow\"><img alt=\"https://joss.theoj.org/papers/10.21105/joss.01570/status.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f047ec29f9f9a0833fe33b93bc572615d6f237a/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30313537302f7374617475732e737667\"></a>\n<a href=\"https://doi.org/10.5281/zenodo.2591993\" rel=\"nofollow\"><img alt=\"https://zenodo.org/badge/DOI/10.5281/zenodo.2591993.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc3096ad27b64c53dc9a3414b611e0fd46031222/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e323539313939332e737667\"></a>\n<a href=\"https://pypi.org/project/phasespace/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/status/phasespace.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6789f32cbb2c034c32295c62eaa0ac29c58214e0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f706861736573706163652e737667\"></a>\n<a href=\"https://pypi.org/project/phasespace/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/phasespace.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf2925d0a6ac9ca87024048bdf8fd27ba7c6f5c0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f706861736573706163652e737667\"></a>\n<a href=\"https://travis-ci.org/zfit/phasespace\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/zfit/phasespace.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d35c7be91921809160bbe325dafc782b6383653b/68747470733a2f2f7472617669732d63692e6f72672f7a6669742f706861736573706163652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/zfit/phasespace?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/zfit/phasespace/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cdad558f349e9c20ce3bc941de2dec8c44c02786/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7a6669742f706861736573706163652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://phasespace.readthedocs.io/en/latest/?badge=stable\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9102ccfa960ea3f5eadd7c2a8fdcf8ad6fd6d73d/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f706861736573706163652f62616467652f3f76657273696f6e3d737461626c65\"></a>\n<a href=\"https://gitter.im/zfit/phasespace?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\" rel=\"nofollow\"><img alt=\"Gitter chat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e1c3fdde5839d7af0169803de42be75ef95227a7/68747470733a2f2f6261646765732e6769747465722e696d2f7a6669742f706861736573706163652e737667\"></a>\n<p>Python implementation of the Raubold and Lynch method for <cite>n</cite>-body events using\nTensorFlow as a backend.</p>\n<p>The code is based on the GENBOD function (W515 from CERNLIB), documented in [1]\nand tries to follow it as closely as possible.</p>\n<p>Detailed documentation, including the API, can be found in <a href=\"https://phasespace.readthedocs.io\" rel=\"nofollow\">https://phasespace.readthedocs.io</a>.\nDon\u2019t hesitate to join our <a href=\"https://gitter.im/zfit/phasespace\" rel=\"nofollow\">gitter</a> channel for questions and comments.</p>\n<p>If you use phasespace in a scientific publication we would appreciate citations to the <a href=\"https://joss.theoj.org/papers/10.21105/joss.01570\" rel=\"nofollow\">JOSS</a> publication:</p>\n<pre><span class=\"nc\">@article</span><span class=\"p\">{</span><span class=\"nl\">puig_eschle_phasespace-2019</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span> <span class=\"p\">=</span> <span class=\"s\">{phasespace: n-body phase space generation in Python}</span><span class=\"p\">,</span>\n  <span class=\"na\">doi</span> <span class=\"p\">=</span> <span class=\"s\">{10.21105/joss.01570}</span><span class=\"p\">,</span>\n  <span class=\"na\">url</span> <span class=\"p\">=</span> <span class=\"s\">{https://doi.org/10.21105/joss.01570}</span><span class=\"p\">,</span>\n  <span class=\"na\">year</span> <span class=\"p\">=</span> <span class=\"s\">{2019}</span><span class=\"p\">,</span>\n  <span class=\"na\">month</span> <span class=\"p\">=</span> <span class=\"s\">{oct}</span><span class=\"p\">,</span>\n  <span class=\"na\">publisher</span> <span class=\"p\">=</span> <span class=\"s\">{The Open Journal}</span><span class=\"p\">,</span>\n  <span class=\"na\">author</span> <span class=\"p\">=</span> <span class=\"s\">{Albert Puig and Jonas Eschle}</span><span class=\"p\">,</span>\n  <span class=\"na\">journal</span> <span class=\"p\">=</span> <span class=\"s\">{Journal of Open Source Software}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Free software: BSD-3-Clause.</p>\n<p>[1]  F. James, Monte Carlo Phase Space, CERN 68-15 (1968)</p>\n<div id=\"why\">\n<h3>Why?</h3>\n<p>Lately, data analysis in High Energy Physics (HEP), traditionally performed within the <a href=\"https://root.cern.ch\" rel=\"nofollow\">ROOT</a> ecosystem,\nhas been moving more and more towards Python.\nThe possibility of carrying out purely Python-based analyses has become real thanks to the\ndevelopment of many open source Python packages,\nwhich have allowed to replace most ROOT functionality with Python-based packages.</p>\n<p>One of the aspects where this is still not possible is in the random generation of <cite>n</cite>-body phase space events,\nwhich are widely used in the field, for example to study kinematics\nof the particle decays of interest, or to perform importance sampling in the case of complex amplitude models.\nThis has been traditionally done with the <a href=\"https://root.cern.ch/doc/master/classTGenPhaseSpace.html\" rel=\"nofollow\">TGenPhaseSpace</a> class, which is based of the GENBOD function of the\nCERNLIB FORTRAN libraries and which requires a full working ROOT installation.</p>\n<p>This package aims to address this issue by providing a TensorFlow-based implementation of such a function\nto generate <cite>n</cite>-body decays without requiring a ROOT installation.\nAdditionally, an oft-needed functionality to generate complex decay chains, not included in <tt>TGenPhaseSpace</tt>,\nis also offered, leaving room for decaying resonances (which don\u2019t have a fixed mass, but can be seen as a\nbroad peak).</p>\n</div>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p><tt>phasespace</tt> is available on conda-forge and pip.</p>\n<p>To install <tt>phasespace</tt> with conda, run:</p>\n<pre><span class=\"gp\">$</span> conda install phasespace -c conda-forge\n</pre>\n<p>To install with pip:</p>\n<pre><span class=\"gp\">$</span> pip install phasespace\n</pre>\n<p>This is the preferred method to install <tt>phasespace</tt>, as it will always install the most recent stable release.</p>\n<p>For the newest development version, which may be unstable, you can install the version from git with</p>\n<pre><span class=\"gp\">$</span> pip install git+https://github.com/zfit/phasespace\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h3>How to use</h3>\n<p>The generation of simple <cite>n</cite>-body decays can be done using the <tt>nbody_decay</tt> shortcut to create a decay chain\nwith a very simple interface: one needs to pass the mass of the top particle and the masses of the children particle as\na list, optionally giving the names of the particles. Then, the <cite>generate</cite> method can be used to produce the desired sample.\nFor example, to generate <cite>B^0to Kpi</cite>, we would do:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">phasespace</span>\n\n<span class=\"n\">B0_MASS</span> <span class=\"o\">=</span> <span class=\"mf\">5279.58</span>\n<span class=\"n\">PION_MASS</span> <span class=\"o\">=</span> <span class=\"mf\">139.57018</span>\n<span class=\"n\">KAON_MASS</span> <span class=\"o\">=</span> <span class=\"mf\">493.677</span>\n\n<span class=\"n\">weights</span><span class=\"p\">,</span> <span class=\"n\">particles</span> <span class=\"o\">=</span> <span class=\"n\">phasespace</span><span class=\"o\">.</span><span class=\"n\">nbody_decay</span><span class=\"p\">(</span><span class=\"n\">B0_MASS</span><span class=\"p\">,</span>\n                                            <span class=\"p\">[</span><span class=\"n\">PION_MASS</span><span class=\"p\">,</span> <span class=\"n\">KAON_MASS</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">n_events</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p>Behind the scenes, this function runs the TensorFlow graph. It returns <cite>tf.Tensor</cite>, which, as TensorFlow 2.x is in eager mode,\nis basically a numpy array. Any <cite>tf.Tensor</cite> can be explicitly converted to a numpy array by calling <cite>tf.Tensor.numpy()</cite> on it.\nThe <cite>generate</cite> function returns a <cite>tf.Tensor</cite> of 1000 elements in the case of <tt>weights</tt> and a list of\n<tt>n particles</tt> (2) arrays of (1000, 4) shape,\nwhere each of the 4-dimensions corresponds to one of the components of the generated Lorentz 4-vector.\nAll particles are generated in the rest frame of the top particle; boosting to a certain momentum (or list of momenta) can be\nachieved by passing the momenta to the <tt>boost_to</tt> argument.</p>\n<p>Sequential decays can be handled with the <tt>GenParticle</tt> class (used internally by <tt>generate</tt>) and its <tt>set_children</tt> method.\nAs an example, to build the <cite>B^{0}to K^{*}gamma</cite> decay in which <cite>K^*to Kpi</cite>, we would write:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">phasespace</span> <span class=\"kn\">import</span> <span class=\"n\">GenParticle</span>\n\n<span class=\"n\">B0_MASS</span> <span class=\"o\">=</span> <span class=\"mf\">5279.58</span>\n<span class=\"n\">KSTARZ_MASS</span> <span class=\"o\">=</span> <span class=\"mf\">895.81</span>\n<span class=\"n\">PION_MASS</span> <span class=\"o\">=</span> <span class=\"mf\">139.57018</span>\n<span class=\"n\">KAON_MASS</span> <span class=\"o\">=</span> <span class=\"mf\">493.677</span>\n\n<span class=\"n\">pion</span> <span class=\"o\">=</span> <span class=\"n\">GenParticle</span><span class=\"p\">(</span><span class=\"s1\">'pi+'</span><span class=\"p\">,</span> <span class=\"n\">PION_MASS</span><span class=\"p\">)</span>\n<span class=\"n\">kaon</span> <span class=\"o\">=</span> <span class=\"n\">GenParticle</span><span class=\"p\">(</span><span class=\"s1\">'K+'</span><span class=\"p\">,</span> <span class=\"n\">KAON_MASS</span><span class=\"p\">)</span>\n<span class=\"n\">kstar</span> <span class=\"o\">=</span> <span class=\"n\">GenParticle</span><span class=\"p\">(</span><span class=\"s1\">'K*'</span><span class=\"p\">,</span> <span class=\"n\">KSTARZ_MASS</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_children</span><span class=\"p\">(</span><span class=\"n\">pion</span><span class=\"p\">,</span> <span class=\"n\">kaon</span><span class=\"p\">)</span>\n<span class=\"n\">gamma</span> <span class=\"o\">=</span> <span class=\"n\">GenParticle</span><span class=\"p\">(</span><span class=\"s1\">'gamma'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">bz</span> <span class=\"o\">=</span> <span class=\"n\">GenParticle</span><span class=\"p\">(</span><span class=\"s1\">'B0'</span><span class=\"p\">,</span> <span class=\"n\">B0_MASS</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_children</span><span class=\"p\">(</span><span class=\"n\">kstar</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">)</span>\n\n<span class=\"n\">weights</span><span class=\"p\">,</span> <span class=\"n\">particles</span> <span class=\"o\">=</span> <span class=\"n\">bz</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">n_events</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p>Where we have used the fact that <tt>set_children</tt> returns the parent particle.\nIn this case, <tt>particles</tt> is a <tt>dict</tt> with the particle names as keys:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">particles</span>\n<span class=\"go\">{'K*': array([[ 1732.79325872, -1632.88873127,   950.85807735,  2715.78804872],\n       [-1633.95329448,   239.88921123, -1961.0402768 ,  2715.78804872],\n       [  407.15613764, -2236.6569286 , -1185.16616251,  2715.78804872],\n       ...,\n       [ 1091.64603395, -1301.78721269,  1920.07503991,  2715.78804872],\n       [ -517.3125083 ,  1901.39296899,  1640.15905194,  2715.78804872],\n       [  656.56413668,  -804.76922982,  2343.99214816,  2715.78804872]]),\n 'K+': array([[  750.08077976,  -547.22569019,   224.6920906 ,  1075.30490935],\n       [-1499.90049089,   289.19714633, -1935.27960292,  2514.43047106],\n       [   97.64746732, -1236.68112923,  -381.09526192,  1388.47607911],\n       ...,\n       [  508.66157459,  -917.93523639,  1474.7064148 ,  1876.11771642],\n       [ -212.28646168,   540.26381432,   610.86656669,   976.63988936],\n       [  177.16656666,  -535.98777569,   946.12636904,  1207.28744488]]),\n 'gamma': array([[-1732.79325872,  1632.88873127,  -950.85807735,  2563.79195128],\n       [ 1633.95329448,  -239.88921123,  1961.0402768 ,  2563.79195128],\n       [ -407.15613764,  2236.6569286 ,  1185.16616251,  2563.79195128],\n       ...,\n       [-1091.64603395,  1301.78721269, -1920.07503991,  2563.79195128],\n       [  517.3125083 , -1901.39296899, -1640.15905194,  2563.79195128],\n       [ -656.56413668,   804.76922982, -2343.99214816,  2563.79195128]]),\n 'pi+': array([[  982.71247896, -1085.66304109,   726.16598675,  1640.48313937],\n       [ -134.0528036 ,   -49.3079351 ,   -25.76067389,   201.35757766],\n       [  309.50867032,  -999.97579937,  -804.0709006 ,  1327.31196961],\n       ...,\n       [  582.98445936,  -383.85197629,   445.36862511,   839.6703323 ],\n       [ -305.02604662,  1361.12915468,  1029.29248526,  1739.14815935],\n       [  479.39757002,  -268.78145413,  1397.86577911,  1508.50060384]])}</span>\n</pre>\n<p>The <cite>GenParticle</cite> class is able to cache the graphs so it is possible to generate in a loop\nwithout overhead:</p>\n<pre><span class=\"go\">for i in range(10):\n    weights, particles = bz.generate(n_events=1000)\n    ...\n    (do something with weights and particles)\n    ...</span>\n</pre>\n<p>This way of generating is recommended in the case of large samples, as it allows to benefit from\nparallelisation while at the same time keep the memory usage low.</p>\n<p>If we want to operate with the TensorFlow graph instead, we can use the <cite>generate_tensor</cite> method\nof <cite>GenParticle</cite>, which has the same signature as <cite>generate</cite>.</p>\n<p>More examples can be found in the <tt>tests</tt> folder and in the <a href=\"https://phasespace.readthedocs.io/en/latest/usage.html\" rel=\"nofollow\">documentation</a>.</p>\n</div>\n<div id=\"physics-validation\">\n<h3>Physics validation</h3>\n<p>Physics validation is performed continuously in the included tests (<tt>tests/test_physics.py</tt>), run through Travis CI.\nThis validation is performed at two levels:</p>\n<ul>\n<li>In simple <cite>n</cite>-body decays, the results of <tt>phasespace</tt> are checked against <tt>TGenPhaseSpace</tt>.</li>\n<li>For sequential decays, the results of <tt>phasespace</tt> are checked against <a href=\"https://github.com/gcowan/RapidSim/\" rel=\"nofollow\">RapidSim</a>, a \u201cfast Monte Carlo generator\nfor simulation of heavy-quark hadron decays\u201d.\nIn the case of resonances, differences are expected because our tests don\u2019t include proper modelling of their\nmass shape, as it would require the introduction of\nfurther dependencies. However, the results of the comparison can be expected visually.</li>\n</ul>\n<p>The results of all physics validation performed by the <tt>tests_physics.py</tt> test are written in <tt>tests/plots</tt>.</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Contributions are always welcome, please have a look at the <a href=\"CONTRIBUTING.rst\" rel=\"nofollow\">Contributing guide</a>.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"develop\">\n<h3>Develop</h3>\n<div id=\"major-features-and-improvements\">\n<h4>Major Features and Improvements</h4>\n</div>\n<div id=\"behavioral-changes\">\n<h4>Behavioral changes</h4>\n</div>\n<div id=\"bug-fixes-and-small-changes\">\n<h4>Bug fixes and small changes</h4>\n</div>\n<div id=\"requirement-changes\">\n<h4>Requirement changes</h4>\n</div>\n<div id=\"thanks\">\n<h4>Thanks</h4>\n</div>\n</div>\n<div id=\"id1\">\n<h3>1.1.0 (27.1.2020)</h3>\n<p>This release switched to TensorFlow 2.0 eager mode. Please upgrade your TensorFlow installation if possible and change\nyour code (minimal changes) as described under \u201cBehavioral changes\u201d.\nIn case this is currently impossible to do, please downgrade to &lt; 1.1.0.</p>\n<div id=\"id2\">\n<h4>Major Features and Improvements</h4>\n<blockquote>\n<ul>\n<li>full TF2 compatibility</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h4>Behavioral changes</h4>\n<blockquote>\n<ul>\n<li><cite>generate</cite> now returns an eager Tensor. This is basically a numpy array wrapped by TensorFlow.\nTo explicitly convert it to a numpy array, use the <cite>numpy()</cite> method of the eager Tensor.</li>\n<li><cite>generate_tensor</cite> is now depreceated, <cite>generate</cite> can directly be used instead.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h4>Bug fixes and small changes</h4>\n</div>\n<div id=\"id5\">\n<h4>Requirement changes</h4>\n<blockquote>\n<ul>\n<li>requires now TensorFlow &gt;= 2.0.0</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id6\">\n<h4>Thanks</h4>\n</div>\n</div>\n<div id=\"id7\">\n<h3>1.0.4 (13-10-2019)</h3>\n<h3 id=\"id8\"><span class=\"section-subtitle\">Major Features and Improvements</span></h3>\n<p>Release to conda-forge, thanks to Chris Burr</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6647454, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "eb741c7f0f20f639666f7ea63c432eba", "sha256": "cf99839473e8472a096cab2850a22c88bce440b2f9ad88a65e1e43dc8e14c182"}, "downloads": -1, "filename": "phasespace-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eb741c7f0f20f639666f7ea63c432eba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 15565, "upload_time": "2019-10-13T14:02:25", "upload_time_iso_8601": "2019-10-13T14:02:25.130919Z", "url": "https://files.pythonhosted.org/packages/c1/ec/a09a3bde02eb2eb5e0100f0d08996b1642e3f7526b97377fcb86bf54c095/phasespace-0.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0f425efb01778bb2b967ebe3011c85a", "sha256": "6e870657bcc873105304eb27dd953e951117e261c13e34b2dc5eb34a9e45d3d9"}, "downloads": -1, "filename": "phasespace-0.0.0.tar.gz", "has_sig": false, "md5_digest": "c0f425efb01778bb2b967ebe3011c85a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33180, "upload_time": "2019-10-13T14:02:26", "upload_time_iso_8601": "2019-10-13T14:02:26.966460Z", "url": "https://files.pythonhosted.org/packages/e4/9d/0b045f304096c8ae32d88b11331e679be593990ed740ace6f850d32652c4/phasespace-0.0.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "34689803b709aab9bdfbd389f3817f64", "sha256": "bf5e6ce157f5a5f01a7fd6609f3ee9a12a3ba9f1905fe3bd0daac520146ebe27"}, "downloads": -1, "filename": "phasespace-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34689803b709aab9bdfbd389f3817f64", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 13240, "upload_time": "2019-03-12T21:02:00", "upload_time_iso_8601": "2019-03-12T21:02:00.299417Z", "url": "https://files.pythonhosted.org/packages/6d/73/ef4a947ed4488b2183603d860e7bcdd1f4f845045e70c8fa1a6e0464a2b6/phasespace-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22e3a42ed549f8cf1228febd097ac1b7", "sha256": "b4df1f91dd1f939fa2063c5b39c7a540bcbb3eeedce48ef31219b3e57474df99"}, "downloads": -1, "filename": "phasespace-0.2.0.tar.gz", "has_sig": false, "md5_digest": "22e3a42ed549f8cf1228febd097ac1b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27167, "upload_time": "2019-03-12T21:02:02", "upload_time_iso_8601": "2019-03-12T21:02:02.317719Z", "url": "https://files.pythonhosted.org/packages/33/e9/e7ca8b1616368da68db9b6d761a4fa7e331af735bcf586a379de3e1c45db/phasespace-0.2.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "42d07c5a289966a9fe30e3f096ffa490", "sha256": "37e096032c99dc07ff49c402c92781b810e19df9ef67d281286d781e14563ec9"}, "downloads": -1, "filename": "phasespace-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42d07c5a289966a9fe30e3f096ffa490", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 13357, "upload_time": "2019-03-12T23:47:01", "upload_time_iso_8601": "2019-03-12T23:47:01.165782Z", "url": "https://files.pythonhosted.org/packages/7a/fd/a0a680308daa98d316c386e61e0cd5af87f7cc3ef72939bb2741f4dcb633/phasespace-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c49d352bbcfb0d68985f55f254d898b5", "sha256": "2112c09e53198ff1a325bc937ad220f3fcefa7e1f9562b633a84ae3a3622a349"}, "downloads": -1, "filename": "phasespace-0.8.0.tar.gz", "has_sig": false, "md5_digest": "c49d352bbcfb0d68985f55f254d898b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27415, "upload_time": "2019-03-12T23:47:02", "upload_time_iso_8601": "2019-03-12T23:47:02.535101Z", "url": "https://files.pythonhosted.org/packages/11/49/ddd444c6b1b2bf083d8b63ea8452b4e4328f2be836c6fad2679b357ff8b0/phasespace-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "5bc4a0dece2fe0775cbb845031db4146", "sha256": "f045cd15191c8676bd3d43b73a3c9ea8a9e487deaf4ca238a763a4766a631557"}, "downloads": -1, "filename": "phasespace-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5bc4a0dece2fe0775cbb845031db4146", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 13364, "upload_time": "2019-03-13T09:00:02", "upload_time_iso_8601": "2019-03-13T09:00:02.179496Z", "url": "https://files.pythonhosted.org/packages/c6/c2/45ca11439903c2745eb793a7e7ac66a7a141c5af993dff1f849182da2c04/phasespace-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13f67012dbfd823bc545a172693660eb", "sha256": "a0ce14f4d01616c2f75fac14127631f549be982c96219277e850a905a5cdb540"}, "downloads": -1, "filename": "phasespace-0.9.0.tar.gz", "has_sig": false, "md5_digest": "13f67012dbfd823bc545a172693660eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27454, "upload_time": "2019-03-13T09:00:04", "upload_time_iso_8601": "2019-03-13T09:00:04.271144Z", "url": "https://files.pythonhosted.org/packages/77/52/b0ea33988ed459dadddb135216d9a960889d470d70b2c77d79051e72df06/phasespace-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a403608ff8ad09150bd706f3c9f7e1c2", "sha256": "2cbae5132d6b3b4858abd82dda875e3debbdca37dd833ffab986e2c93fc69f2d"}, "downloads": -1, "filename": "phasespace-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a403608ff8ad09150bd706f3c9f7e1c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 14486, "upload_time": "2019-05-17T17:26:43", "upload_time_iso_8601": "2019-05-17T17:26:43.282342Z", "url": "https://files.pythonhosted.org/packages/4a/e1/2fa41d431c58720ebba5467cb76270cfc343b274d10b0d2f44d922e8a1f5/phasespace-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad1a97f09cc2f52e80524455217793ef", "sha256": "7b8e16038d369faaaefafaf0032ce9f83779685e709e796efcd7a0e04f1610bf"}, "downloads": -1, "filename": "phasespace-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ad1a97f09cc2f52e80524455217793ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30865, "upload_time": "2019-05-17T17:26:44", "upload_time_iso_8601": "2019-05-17T17:26:44.626092Z", "url": "https://files.pythonhosted.org/packages/6b/4f/6790625b114d545f44c7bcdee446456eb4388b1251e394818bcf38192b50/phasespace-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f1dfb7f7b7d0bc57a40d8bd10f53d008", "sha256": "88e0f00ee55907d8f5773e8f70de9eda2c195cae98f22a8add6a89efde5702ac"}, "downloads": -1, "filename": "phasespace-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f1dfb7f7b7d0bc57a40d8bd10f53d008", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 14744, "upload_time": "2019-05-20T12:33:16", "upload_time_iso_8601": "2019-05-20T12:33:16.738737Z", "url": "https://files.pythonhosted.org/packages/a9/b7/e140dfdcb9527a5506f15f7075e362c7c5e3acfc05ce4458da6ca39b9255/phasespace-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81ac5cfc1cc2d939b5067e3085dfcb68", "sha256": "b5972994608c2fdccf5caf8f93442d0bfcfa88f25f6f7e9a02ea974609897946"}, "downloads": -1, "filename": "phasespace-1.0.1.tar.gz", "has_sig": false, "md5_digest": "81ac5cfc1cc2d939b5067e3085dfcb68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31668, "upload_time": "2019-05-20T12:33:18", "upload_time_iso_8601": "2019-05-20T12:33:18.387548Z", "url": "https://files.pythonhosted.org/packages/98/3e/f74f8f50f470956408c4551a0766091ad07989f43f09030ea29c9f19a1bb/phasespace-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "98844f1df42bb2233d2a271b28bcfbfb", "sha256": "5792475d80e9dd22b6ab3483c728ff993aff30148fa8edfa22540393aeeb3914"}, "downloads": -1, "filename": "phasespace-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "98844f1df42bb2233d2a271b28bcfbfb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 14747, "upload_time": "2019-06-03T13:04:45", "upload_time_iso_8601": "2019-06-03T13:04:45.503567Z", "url": "https://files.pythonhosted.org/packages/78/b0/b0990b07c036fc89841e1933d99ae2230c4758a8a769ae25e84fffe83d86/phasespace-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "257195a6cff0ca78372349f0cea2c29a", "sha256": "cb194cfa9b8802118fdafecd98ca7c02a0379d8c1f7df4f639bd6eb7b4d8cc4e"}, "downloads": -1, "filename": "phasespace-1.0.2.tar.gz", "has_sig": false, "md5_digest": "257195a6cff0ca78372349f0cea2c29a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31674, "upload_time": "2019-06-03T13:04:46", "upload_time_iso_8601": "2019-06-03T13:04:46.902780Z", "url": "https://files.pythonhosted.org/packages/bb/f1/039ae54b297d13fe40156dbcd08e0b678a39ce4e5172ab7116466f7340e6/phasespace-1.0.2.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "b823721ff9039ad1ff9ed806fcb63992", "sha256": "1d95f76d013fb303c2426e365afdf1f55f87466650e0e2bad7ed4577e879da41"}, "downloads": -1, "filename": "phasespace-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b823721ff9039ad1ff9ed806fcb63992", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 16004, "upload_time": "2020-02-17T16:30:03", "upload_time_iso_8601": "2020-02-17T16:30:03.573340Z", "url": "https://files.pythonhosted.org/packages/fc/a4/2bf4170fbab5a0a085802a294b3ca3bfc3b83c8628c53d83e99ceeed4876/phasespace-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a8298ea8167d193a6ed020bf169b6d7", "sha256": "0cd26355b735ad7633e57160fe18e6a642aca63fcaf143a08d097259e0ccf20c"}, "downloads": -1, "filename": "phasespace-1.1.1.tar.gz", "has_sig": false, "md5_digest": "2a8298ea8167d193a6ed020bf169b6d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33844, "upload_time": "2020-02-17T16:30:04", "upload_time_iso_8601": "2020-02-17T16:30:04.906548Z", "url": "https://files.pythonhosted.org/packages/d6/0e/616883f2f5c973f6671c2281799690b42eb7e81881e45fe9c561e42aa274/phasespace-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b823721ff9039ad1ff9ed806fcb63992", "sha256": "1d95f76d013fb303c2426e365afdf1f55f87466650e0e2bad7ed4577e879da41"}, "downloads": -1, "filename": "phasespace-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b823721ff9039ad1ff9ed806fcb63992", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 16004, "upload_time": "2020-02-17T16:30:03", "upload_time_iso_8601": "2020-02-17T16:30:03.573340Z", "url": "https://files.pythonhosted.org/packages/fc/a4/2bf4170fbab5a0a085802a294b3ca3bfc3b83c8628c53d83e99ceeed4876/phasespace-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a8298ea8167d193a6ed020bf169b6d7", "sha256": "0cd26355b735ad7633e57160fe18e6a642aca63fcaf143a08d097259e0ccf20c"}, "downloads": -1, "filename": "phasespace-1.1.1.tar.gz", "has_sig": false, "md5_digest": "2a8298ea8167d193a6ed020bf169b6d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33844, "upload_time": "2020-02-17T16:30:04", "upload_time_iso_8601": "2020-02-17T16:30:04.906548Z", "url": "https://files.pythonhosted.org/packages/d6/0e/616883f2f5c973f6671c2281799690b42eb7e81881e45fe9c561e42aa274/phasespace-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:36 2020"}