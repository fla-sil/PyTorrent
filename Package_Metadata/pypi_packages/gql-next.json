{"info": {"author": "Eran Kampf", "author_email": "eran@ekampf.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# GQL: Python GraphQL Client Library\n\n[![Build Status](https://travis-ci.org/ekampf/cql.svg?branch=master)](https://travis-ci.org/ekampf/cql)\n[![Coverage Status](https://coveralls.io/repos/github/ekampf/gql/badge.svg?branch=master)](https://coveralls.io/github/ekampf/gql?branch=master)\n\n## Introduction\n\nGQL is a GraphQL Client Python library intended to help Python application make GraphQL\nAPI call while enjoying the advantages that come with GraphQL.\n\n- **Strongly Typed** response objects (dynamically created in build time to match your query)\n- **Query Validation** that checks your code's queries against the GraphQL server's schema.\n\n## Installation\n\nSimply install from PyPi:\n\n```bash\npip install gql-next\n```\n\nThen go to your project folder and run `gql init`\n\n## Quick Start\n\n`gql` works by parsing query files (`**/*.graphql` by default) into their own Python module where\nan class, named after the operation defined in the file, allows you to make that query and get a typed\nresponse.\n\nFor example, given the following file `get_film.graphql` file:\n```\nquery GetFilm($id: ID!) {\n  film(id: $id) {\n    title\n    director\n  }\n}\n```\n\nA `get_film.py` will be created defining a `GetFilm` class:\n\n```python\n# AUTOGENERATED file. Do not Change!\nfrom typing import Any, Callable, Mapping, List\nfrom enum import Enum\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\nfrom gql.clients import Client, AsyncIOClient\n\n\n@dataclass_json\n@dataclass\nclass GetFilm:\n    @dataclass_json\n    @dataclass\n    class GetFilmData:\n        @dataclass_json\n        @dataclass\n        class Film:\n            title: str\n            director: str\n        film: Film = None\n\n    data: GetFilmData = None\n    errors: Any = None\n\n    @classmethod\n    def execute(cls, id: str, on_before_callback: Callable[[Mapping[str, str], Mapping[str, str]], None] = None) -> GetFilm:\n        ...\n\n    @classmethod\n    async def execute_async(cls, id: str, on_before_callback: Callable[[Mapping[str, str], Mapping[str, str]], None] = None) -> GetFilm:\n        ...\n```\n\nAllowing you to make the GraphQL query:\n\n```python\nfrom .get_film import GetFilm\n\nresult = GetFilm.execute('meaning_of_life')\nfilm = result.data.film\n```\n\n*Important notes:*\n* Operations defined in graphql query __must be named__ so that we can name the relevant Python Class which you can then import in your code\n\n\n## How it works\n\n\n### The `gql` client\n\n#### `gql init`\nInitializes a project to use GQL as client - writes a .gql.json configuration file.\n\n#### `gql run`\n\nRun through your project's files and compile GraphQL queries into into Python types.\n\n#### `gql watch`\n\nUseful during development. Listen to file changes in your project's folder and continuously\nbuilds GraphQL queries as they change.\nThis allows you to:\n* Immediately verify query changes you make are valid.\n* Enjoy your IDE's autocomplete features on GraphQL auto-generated objects while developing\nas `watch` will auto-update them as you change queries.\n\n\n# Sponsors\n\n<a href=\"https://ebates.com\"><img src=\"https://opensource.ebates.com/static/images/ebates-rakuten.svg\" width=\"250\"></a>\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "Eran Kampf", "maintainer_email": "eran@ekampf.com", "name": "gql-next", "package_url": "https://pypi.org/project/gql-next/", "platform": "", "project_url": "https://pypi.org/project/gql-next/", "project_urls": null, "release_url": "https://pypi.org/project/gql-next/0.1.1/", "requires_dist": ["click (>=7.0,<8.0)", "graphql-core-next (>=1.0.0,<1.1.0)", "requests (>=2.21,<3.0)", "jinja2 (>=2.10,<3.0)", "inflection (>=0.3.1,<0.4.0)", "dataclasses-json (>=0.2.0,<0.3.0)", "aiohttp (>=3.5,<4.0); extra == \"async\"", "watchdog (>=0.9.0,<0.10.0)"], "requires_python": ">=3.7,<4.0", "summary": "Python GraphQL Client Library", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GQL: Python GraphQL Client Library</h1>\n<p><a href=\"https://travis-ci.org/ekampf/cql\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0173214a96f46a002f655b22a1186a74df6db961/68747470733a2f2f7472617669732d63692e6f72672f656b616d70662f63716c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/ekampf/gql?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b7a007267af7715b4cf08e54cec6873d3c5ef48f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656b616d70662f67716c2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Introduction</h2>\n<p>GQL is a GraphQL Client Python library intended to help Python application make GraphQL\nAPI call while enjoying the advantages that come with GraphQL.</p>\n<ul>\n<li><strong>Strongly Typed</strong> response objects (dynamically created in build time to match your query)</li>\n<li><strong>Query Validation</strong> that checks your code's queries against the GraphQL server's schema.</li>\n</ul>\n<h2>Installation</h2>\n<p>Simply install from PyPi:</p>\n<pre>pip install gql-next\n</pre>\n<p>Then go to your project folder and run <code>gql init</code></p>\n<h2>Quick Start</h2>\n<p><code>gql</code> works by parsing query files (<code>**/*.graphql</code> by default) into their own Python module where\nan class, named after the operation defined in the file, allows you to make that query and get a typed\nresponse.</p>\n<p>For example, given the following file <code>get_film.graphql</code> file:</p>\n<pre><code>query GetFilm($id: ID!) {\n  film(id: $id) {\n    title\n    director\n  }\n}\n</code></pre>\n<p>A <code>get_film.py</code> will be created defining a <code>GetFilm</code> class:</p>\n<pre><span class=\"c1\"># AUTOGENERATED file. Do not Change!</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">,</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gql.clients</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">AsyncIOClient</span>\n\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">GetFilm</span><span class=\"p\">:</span>\n    <span class=\"nd\">@dataclass_json</span>\n    <span class=\"nd\">@dataclass</span>\n    <span class=\"k\">class</span> <span class=\"nc\">GetFilmData</span><span class=\"p\">:</span>\n        <span class=\"nd\">@dataclass_json</span>\n        <span class=\"nd\">@dataclass</span>\n        <span class=\"k\">class</span> <span class=\"nc\">Film</span><span class=\"p\">:</span>\n            <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n            <span class=\"n\">director</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n        <span class=\"n\">film</span><span class=\"p\">:</span> <span class=\"n\">Film</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">GetFilmData</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">errors</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">on_before_callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">GetFilm</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">execute_async</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">on_before_callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">GetFilm</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>Allowing you to make the GraphQL query:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.get_film</span> <span class=\"kn\">import</span> <span class=\"n\">GetFilm</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">GetFilm</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'meaning_of_life'</span><span class=\"p\">)</span>\n<span class=\"n\">film</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">film</span>\n</pre>\n<p><em>Important notes:</em></p>\n<ul>\n<li>Operations defined in graphql query <strong>must be named</strong> so that we can name the relevant Python Class which you can then import in your code</li>\n</ul>\n<h2>How it works</h2>\n<h3>The <code>gql</code> client</h3>\n<h4><code>gql init</code></h4>\n<p>Initializes a project to use GQL as client - writes a .gql.json configuration file.</p>\n<h4><code>gql run</code></h4>\n<p>Run through your project's files and compile GraphQL queries into into Python types.</p>\n<h4><code>gql watch</code></h4>\n<p>Useful during development. Listen to file changes in your project's folder and continuously\nbuilds GraphQL queries as they change.\nThis allows you to:</p>\n<ul>\n<li>Immediately verify query changes you make are valid.</li>\n<li>Enjoy your IDE's autocomplete features on GraphQL auto-generated objects while developing\nas <code>watch</code> will auto-update them as you change queries.</li>\n</ul>\n<h1>Sponsors</h1>\n<p><a href=\"https://ebates.com\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afc613e9d680e32ca600c59858deec3cecececb3/68747470733a2f2f6f70656e736f757263652e6562617465732e636f6d2f7374617469632f696d616765732f6562617465732d72616b7574656e2e737667\" width=\"250\"></a></p>\n\n          </div>"}, "last_serial": 4865903, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "e0f119c9903b8cc60b12467e4a52b53a", "sha256": "189f2ac00b206753b5079003f0c27377ba5a0ab6737438364a70a044c806b6a2"}, "downloads": -1, "filename": "gql_next-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e0f119c9903b8cc60b12467e4a52b53a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 28450, "upload_time": "2019-02-25T17:44:00", "upload_time_iso_8601": "2019-02-25T17:44:00.878627Z", "url": "https://files.pythonhosted.org/packages/36/cf/e0d49f16f069d55991ef76620762a28abf09b00b653df06feb5a67b00054/gql_next-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "655bf9814e9e8f9fd3a860fe5addc352", "sha256": "7c27ad4ed06b87950991c392387bbd4525b6a266c23731002c892f8fb6c8c383"}, "downloads": -1, "filename": "gql-next-0.1.1.tar.gz", "has_sig": false, "md5_digest": "655bf9814e9e8f9fd3a860fe5addc352", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 10187, "upload_time": "2019-02-25T17:43:59", "upload_time_iso_8601": "2019-02-25T17:43:59.656447Z", "url": "https://files.pythonhosted.org/packages/36/ec/5413b0cf71059f5f066cfd1a664fe85cd3283965f6c1eb88e5e287e83d19/gql-next-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e0f119c9903b8cc60b12467e4a52b53a", "sha256": "189f2ac00b206753b5079003f0c27377ba5a0ab6737438364a70a044c806b6a2"}, "downloads": -1, "filename": "gql_next-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e0f119c9903b8cc60b12467e4a52b53a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 28450, "upload_time": "2019-02-25T17:44:00", "upload_time_iso_8601": "2019-02-25T17:44:00.878627Z", "url": "https://files.pythonhosted.org/packages/36/cf/e0d49f16f069d55991ef76620762a28abf09b00b653df06feb5a67b00054/gql_next-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "655bf9814e9e8f9fd3a860fe5addc352", "sha256": "7c27ad4ed06b87950991c392387bbd4525b6a266c23731002c892f8fb6c8c383"}, "downloads": -1, "filename": "gql-next-0.1.1.tar.gz", "has_sig": false, "md5_digest": "655bf9814e9e8f9fd3a860fe5addc352", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 10187, "upload_time": "2019-02-25T17:43:59", "upload_time_iso_8601": "2019-02-25T17:43:59.656447Z", "url": "https://files.pythonhosted.org/packages/36/ec/5413b0cf71059f5f066cfd1a664fe85cd3283965f6c1eb88e5e287e83d19/gql-next-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:03 2020"}