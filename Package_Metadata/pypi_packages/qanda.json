{"info": {"author": "Paul-Michael Agapow", "author_email": "pma@agapow.net", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: User Interfaces"], "description": "===========\nAbout qanda\n===========\n\nBackground\n----------\n\nInteractive command-line programs need to query users for information, be it\ntext, choices from a list, or simple yes-or-no answers. *qanda* is a Python\nmodule of simple functions to prompt users for such information, allowing\nvalidation and cleanup of answers, default responses, consistent formatting and\npresentation of help text, hints and choices. It is not a replacement for\ntextual interfaces like curses and urwid, but intended solely for simple console\nscripts with user input is required.\n\n\nInstallation\n------------\n\nThe simplest way to install *qanda* is via ``easy_install`` or an equivalent\nprogram::\n\n\t% easy_install qanda\n\nAlternatively the tarball can be downloaded, unpacked and ``setup.py`` run::\n\n\t% tar zxvf qanda.tgz\n\t% cd qanda\n\t% python set.py install\n\n*qanda* has no requisites and should work with just about any version of Python.\n\n\nUsing qanda\n-----------\n\nExamples\n~~~~~~~~\n\n::\n\n\t>>> from qanda import prompt\n\t>>> prompt.string (\"What is your name\")\n\tWhat is your name: Foo\n\t>>> fname = prompt.string (\"Your friends name is\",\n\t\t\thelp=\"I need to know your friends name as well before I talk to you.\",\n\t\t\thints=\"first name\",\n\t\t\tdefault='Bar',\n\t\t)\n\t\n\tI need to know your friends name as well before I talk to you.\n\tYour friends name is (first name) [Bar]:\n\t>>> print fname\n\tBar\n\t>>> years = prompt.integer (\"And what is your age\", min=1, max=100)\n\tAnd what is your age: 101\n\tA problem: 101 is higher than 100. Try again ...\n\tAnd what is your age: 28\n\n\n\nCentral concepts\n~~~~~~~~~~~~~~~~\n\n*qanda* packages all question-asking methods in a Session class. This allows\nthe appearance and functioning of all these methods to be handled consistently\nand modified centrally. However, you don't necessarily have to create a Session\nto use it - there's pre-existing Session in the variable called ``prompt``::\n\n\t>>> from qanda import Session\n\t>>> s = Session()\n\t>>> from qanda import prompt\n\t>>> type (prompt)\n\t<class 'qanda.session.Session'>\n\nThe question methods are named after the type of data they elicit::\n\n\t>>> print type(prompt.integer (\"Pick a number\"))\n\tPick a number: 2\n\t<type 'int'>\n\t>>> print type(prompt.string (\"Pick a name\"))\n\tPick a name: Bob\n\t<type 'string'>\n\nMany of the question methods with accept a list of \"converters\", each of which\nis used to sucessively transform or validate user input. If input fails\nvalidation, the question is posed again. *qanda* supplies a number of basic\nvalidators:\n\nToInt, ToFloat\n\tConvert inputs to other types\nRegex\n\tnly allow values that match a certain pattern\nRange\n\tCheck that input falls within given bounds\t\nLength\n\tCheck that input length falls within given bounds\nSynonyms\n\tMap values to other values\nVocab\n\tEnsure values fall within a fixed set\n\n\nReferences\n----------\n\n.. [qanda-home] qanda home page http://www.agapow.net/software/py-qanda\n\n.. [qanda-pypi] qanda on PyPi\n\n\n\nHistory\r\n-------\r\n\r\nv0.1dev (20110624)\r\n~~~~~~~~~~~~~~~~~~\r\n\r\n* Initial release, sure to be buggy and incomplete", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.agapow.net/software/py-qanda", "keywords": "text commandline ui prompt", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "qanda", "package_url": "https://pypi.org/project/qanda/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/qanda/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.agapow.net/software/py-qanda"}, "release_url": "https://pypi.org/project/qanda/0.1dev/", "requires_dist": null, "requires_python": null, "summary": "Simple text prompts and validation for user input", "version": "0.1dev", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"background\">\n<h2>Background</h2>\n<p>Interactive command-line programs need to query users for information, be it\ntext, choices from a list, or simple yes-or-no answers. <em>qanda</em> is a Python\nmodule of simple functions to prompt users for such information, allowing\nvalidation and cleanup of answers, default responses, consistent formatting and\npresentation of help text, hints and choices. It is not a replacement for\ntextual interfaces like curses and urwid, but intended solely for simple console\nscripts with user input is required.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The simplest way to install <em>qanda</em> is via <tt>easy_install</tt> or an equivalent\nprogram:</p>\n<pre>% easy_install qanda\n</pre>\n<p>Alternatively the tarball can be downloaded, unpacked and <tt>setup.py</tt> run:</p>\n<pre>% tar zxvf qanda.tgz\n% cd qanda\n% python set.py install\n</pre>\n<p><em>qanda</em> has no requisites and should work with just about any version of Python.</p>\n</div>\n<div id=\"using-qanda\">\n<h2>Using qanda</h2>\n<div id=\"examples\">\n<h3>Examples</h3>\n<pre>&gt;&gt;&gt; from qanda import prompt\n&gt;&gt;&gt; prompt.string (\"What is your name\")\nWhat is your name: Foo\n&gt;&gt;&gt; fname = prompt.string (\"Your friends name is\",\n                help=\"I need to know your friends name as well before I talk to you.\",\n                hints=\"first name\",\n                default='Bar',\n        )\n\nI need to know your friends name as well before I talk to you.\nYour friends name is (first name) [Bar]:\n&gt;&gt;&gt; print fname\nBar\n&gt;&gt;&gt; years = prompt.integer (\"And what is your age\", min=1, max=100)\nAnd what is your age: 101\nA problem: 101 is higher than 100. Try again ...\nAnd what is your age: 28\n</pre>\n</div>\n<div id=\"central-concepts\">\n<h3>Central concepts</h3>\n<p><em>qanda</em> packages all question-asking methods in a Session class. This allows\nthe appearance and functioning of all these methods to be handled consistently\nand modified centrally. However, you don\u2019t necessarily have to create a Session\nto use it - there\u2019s pre-existing Session in the variable called <tt>prompt</tt>:</p>\n<pre>&gt;&gt;&gt; from qanda import Session\n&gt;&gt;&gt; s = Session()\n&gt;&gt;&gt; from qanda import prompt\n&gt;&gt;&gt; type (prompt)\n&lt;class 'qanda.session.Session'&gt;\n</pre>\n<p>The question methods are named after the type of data they elicit:</p>\n<pre>&gt;&gt;&gt; print type(prompt.integer (\"Pick a number\"))\nPick a number: 2\n&lt;type 'int'&gt;\n&gt;&gt;&gt; print type(prompt.string (\"Pick a name\"))\nPick a name: Bob\n&lt;type 'string'&gt;\n</pre>\n<p>Many of the question methods with accept a list of \u201cconverters\u201d, each of which\nis used to sucessively transform or validate user input. If input fails\nvalidation, the question is posed again. <em>qanda</em> supplies a number of basic\nvalidators:</p>\n<dl>\n<dt>ToInt, ToFloat</dt>\n<dd>Convert inputs to other types</dd>\n<dt>Regex</dt>\n<dd>nly allow values that match a certain pattern</dd>\n<dt>Range</dt>\n<dd>Check that input falls within given bounds</dd>\n<dt>Length</dt>\n<dd>Check that input length falls within given bounds</dd>\n<dt>Synonyms</dt>\n<dd>Map values to other values</dd>\n<dt>Vocab</dt>\n<dd>Ensure values fall within a fixed set</dd>\n</dl>\n</div>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<table id=\"qanda-home\">\n<col><col>\n<tbody>\n<tr><td>[qanda-home]</td><td>qanda home page <a href=\"http://www.agapow.net/software/py-qanda\" rel=\"nofollow\">http://www.agapow.net/software/py-qanda</a></td></tr>\n</tbody>\n</table>\n<table id=\"qanda-pypi\">\n<col><col>\n<tbody>\n<tr><td>[qanda-pypi]</td><td>qanda on PyPi</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"v0-1dev-20110624\"><span class=\"section-subtitle\">v0.1dev (20110624)</span></h2>\n<ul>\n<li>Initial release, sure to be buggy and incomplete</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 798303, "releases": {"0.1dev": [{"comment_text": "", "digests": {"md5": "26ebeda5ba45d953777533dadfd31923", "sha256": "77c8f597f5b69c79810630ff87e282988e98f08ac0b070f192e376d57f7f23e6"}, "downloads": -1, "filename": "qanda-0.1dev.tar.gz", "has_sig": false, "md5_digest": "26ebeda5ba45d953777533dadfd31923", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61913, "upload_time": "2011-07-18T16:10:20", "upload_time_iso_8601": "2011-07-18T16:10:20.260092Z", "url": "https://files.pythonhosted.org/packages/05/1a/3e44f9eff0ee4ccf76ba97124fb4d98d6648a4af2b74d281f06955c1111e/qanda-0.1dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26ebeda5ba45d953777533dadfd31923", "sha256": "77c8f597f5b69c79810630ff87e282988e98f08ac0b070f192e376d57f7f23e6"}, "downloads": -1, "filename": "qanda-0.1dev.tar.gz", "has_sig": false, "md5_digest": "26ebeda5ba45d953777533dadfd31923", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61913, "upload_time": "2011-07-18T16:10:20", "upload_time_iso_8601": "2011-07-18T16:10:20.260092Z", "url": "https://files.pythonhosted.org/packages/05/1a/3e44f9eff0ee4ccf76ba97124fb4d98d6648a4af2b74d281f06955c1111e/qanda-0.1dev.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:17 2020"}