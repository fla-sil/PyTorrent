{"info": {"author": "Johann-Mattis List", "author_email": "mattis.list@lingpy.org", "bugtrack_url": null, "classifiers": [], "description": "Cross-Linguistic Phonetic Alphabet\n==================================\n\nThis is an attempt to create a cross-linguistic phonetic alphabet, realized as\na dialect of IPA, which can be used for cross-linguistic approaches to language\ncomparison.\n\nThe basic idea is to provide a fixed set of symbols for phonetic representation\nalong with a full description regarding their pronunciation following the\ntradition of IPA. This list is essentially expandable, when new languages\narise, and it can be linked to alternative datasets, like Mielke's (2008)\nP-Base, and PHOIBLE.\n\nIn addition to the mere description of symbols, we provide also a range of\nscripts that can be used in order to test how well a dataset reflects our\ncross-linguistic standard, and to which degree it diverges from it. In this\nway, linguists who want to publish their data in phonetic transcriptions that\nfollow a strict standard, they can use our tools and map their data to CLPA. In\nthis way, by conforming to our whitelist (and informing us in cases where we\nmiss important sounds that are essential for the description of a dataset so\nthat we can expand the CLPA), the community can make sure that we have a\nmaximal degree of comparability across lexical datasets. \n\n## The initial dataset\n\nOur initial dataset (file clpa/clpa-data/clpa.main.json) currently consists of 1192 symbols,\nincluding consonants, vowels, diphtongs, tones, and three markers (for word and\nmorpheme boundaries).  The original data is inspired by the IPA description\nused in the P-Base project, and we mostly follow their symbol conventions, but\nwe added tone letters and symbols which were missing in their inventory and also re-arranged \ntheir descripting features into more classes which are now differently defined for the main \nclasses of sounds.\n\nAdditionally, the dataset contains sets of instructions for conversion of\nsymbols which do not occur in our whitelist. Here, we distinguish between:\n\n* explitic mappings (clpa/clpa-data/explicit.tsv), which are explicit mappings of input segments with output segments, which are taken in full. As an example, consider [\u0294\u02b2] which we map to [\u0294j], or [uu], which we map to [u\u02d0].\n* alias symbols (clpa/clpa-data/alias.tsv), which are one-to-more mappings of symbols of length 1 in unicode, and are regularly applied to a symbol if we can't find it in our whitelist. As an example, consider [\u02a6] which we map to [ts].\n* symbols to be ignored (clpa/clpa-data/delete.tsv), which are symbols of length 1 which we ignore from the input data and then check whether we can find a mapping. As a an example, compare the combinging mark in the symbols [t\u0361s], which we delete in order to map to our [ts].\n* symbols to be converted as patterns (clpa/patterns.tsv): these are potentially riscant operations which we try to minimize as well as possible, but there are situations in which it is useful to apply changes on a pattern basis, as for example, in datasets in which \"aspiration\" is not marked by a superscript letter, where we would then turn every instance of plosive + h into plosive + \u02b0", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/glottobank/cpa", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "pyclpa", "package_url": "https://pypi.org/project/pyclpa/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyclpa/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/glottobank/cpa"}, "release_url": "https://pypi.org/project/pyclpa/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A python library to check phonetic transcriptions", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is an attempt to create a cross-linguistic phonetic alphabet, realized as\na dialect of IPA, which can be used for cross-linguistic approaches to language\ncomparison.</p>\n<p>The basic idea is to provide a fixed set of symbols for phonetic representation\nalong with a full description regarding their pronunciation following the\ntradition of IPA. This list is essentially expandable, when new languages\narise, and it can be linked to alternative datasets, like Mielke\u2019s (2008)\nP-Base, and PHOIBLE.</p>\n<p>In addition to the mere description of symbols, we provide also a range of\nscripts that can be used in order to test how well a dataset reflects our\ncross-linguistic standard, and to which degree it diverges from it. In this\nway, linguists who want to publish their data in phonetic transcriptions that\nfollow a strict standard, they can use our tools and map their data to CLPA. In\nthis way, by conforming to our whitelist (and informing us in cases where we\nmiss important sounds that are essential for the description of a dataset so\nthat we can expand the CLPA), the community can make sure that we have a\nmaximal degree of comparability across lexical datasets.</p>\n<p>## The initial dataset</p>\n<p>Our initial dataset (file clpa/clpa-data/clpa.main.json) currently consists of 1192 symbols,\nincluding consonants, vowels, diphtongs, tones, and three markers (for word and\nmorpheme boundaries).  The original data is inspired by the IPA description\nused in the P-Base project, and we mostly follow their symbol conventions, but\nwe added tone letters and symbols which were missing in their inventory and also re-arranged\ntheir descripting features into more classes which are now differently defined for the main\nclasses of sounds.</p>\n<p>Additionally, the dataset contains sets of instructions for conversion of\nsymbols which do not occur in our whitelist. Here, we distinguish between:</p>\n<ul>\n<li>explitic mappings (clpa/clpa-data/explicit.tsv), which are explicit mappings of input segments with output segments, which are taken in full. As an example, consider [\u0294\u02b2] which we map to [\u0294j], or [uu], which we map to [u\u02d0].</li>\n<li>alias symbols (clpa/clpa-data/alias.tsv), which are one-to-more mappings of symbols of length 1 in unicode, and are regularly applied to a symbol if we can\u2019t find it in our whitelist. As an example, consider [\u02a6] which we map to [ts].</li>\n<li>symbols to be ignored (clpa/clpa-data/delete.tsv), which are symbols of length 1 which we ignore from the input data and then check whether we can find a mapping. As a an example, compare the combinging mark in the symbols [t\u0361s], which we delete in order to map to our [ts].</li>\n<li>symbols to be converted as patterns (clpa/patterns.tsv): these are potentially riscant operations which we try to minimize as well as possible, but there are situations in which it is useful to apply changes on a pattern basis, as for example, in datasets in which \u201caspiration\u201d is not marked by a superscript letter, where we would then turn every instance of plosive + h into plosive + \u02b0</li>\n</ul>\n\n          </div>"}, "last_serial": 2599942, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "eb09404a1d0fc1f6c4fca93bef25e9cb", "sha256": "f6cd245eb68834da83e77bf234625e849f462fb98fd2dd9f9fb6918f70c1700c"}, "downloads": -1, "filename": "pyclpa-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eb09404a1d0fc1f6c4fca93bef25e9cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122313, "upload_time": "2016-07-15T08:57:32", "upload_time_iso_8601": "2016-07-15T08:57:32.275556Z", "url": "https://files.pythonhosted.org/packages/06/9e/9849559db50640a4f50d5c4d94d5e6b8c8f8556475789feaa4a6ba599482/pyclpa-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "76195d794111212496f1be380e7992d2", "sha256": "f572ca98003d17de9c2c478f7fee3533d6a4beb7f921c806b7f43d7e13e8a7b6"}, "downloads": -1, "filename": "pyclpa-0.3.0.tar.gz", "has_sig": false, "md5_digest": "76195d794111212496f1be380e7992d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123105, "upload_time": "2016-08-05T14:07:06", "upload_time_iso_8601": "2016-08-05T14:07:06.368760Z", "url": "https://files.pythonhosted.org/packages/84/c1/f8dbe096fb5c2a506c35e893523e14d29d64a8139247f31b21c7f7d8a107/pyclpa-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7e2c20d17a4704d111c88b55b02296ca", "sha256": "56ab965759af54a16aec2650a50f72824314699defc00575e68ac2c825effc69"}, "downloads": -1, "filename": "pyclpa-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7e2c20d17a4704d111c88b55b02296ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123125, "upload_time": "2016-08-05T14:17:06", "upload_time_iso_8601": "2016-08-05T14:17:06.577076Z", "url": "https://files.pythonhosted.org/packages/fe/be/4f17df529caf19aaf4821fa7f67c1e143f6c4decf76843ac6643c20c9c4c/pyclpa-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0ba75cc4874c348d01a8a5e7b9343939", "sha256": "4bad075d332fb2eaa60dd90fdbed662fddf139921a118079c737faf4a6f2ebb1"}, "downloads": -1, "filename": "pyclpa-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0ba75cc4874c348d01a8a5e7b9343939", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123932, "upload_time": "2017-01-21T14:44:47", "upload_time_iso_8601": "2017-01-21T14:44:47.087913Z", "url": "https://files.pythonhosted.org/packages/b5/c8/9ebfd6ddf3567830a84eaa8078ae92be48a99f8cdc71c452b2d8e49ce238/pyclpa-0.4.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "0d3029bdd42406bbee7ac15c7f1d1b7d", "sha256": "2376681e751239485e791b8ab8e780ab84bb1e6d01142df29343d9b83d647a3d"}, "downloads": -1, "filename": "pyclpa-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0d3029bdd42406bbee7ac15c7f1d1b7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91653, "upload_time": "2017-01-26T15:55:52", "upload_time_iso_8601": "2017-01-26T15:55:52.199717Z", "url": "https://files.pythonhosted.org/packages/c4/72/a57e4593c153f249273c45a22830f0703d3c8e01e4d4804106283a9c098e/pyclpa-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0d3029bdd42406bbee7ac15c7f1d1b7d", "sha256": "2376681e751239485e791b8ab8e780ab84bb1e6d01142df29343d9b83d647a3d"}, "downloads": -1, "filename": "pyclpa-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0d3029bdd42406bbee7ac15c7f1d1b7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91653, "upload_time": "2017-01-26T15:55:52", "upload_time_iso_8601": "2017-01-26T15:55:52.199717Z", "url": "https://files.pythonhosted.org/packages/c4/72/a57e4593c153f249273c45a22830f0703d3c8e01e4d4804106283a9c098e/pyclpa-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:22 2020"}