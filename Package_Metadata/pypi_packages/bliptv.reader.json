{"info": {"author": "Christian Scholz", "author_email": "mrtopf@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "**************\nblip.tv Reader\n**************\n\nThe goal of this project is to give developers an easy way to access\ndata stored on blip.tv, things like episodes, their enclosures and so on.\nIt is a wrapper around the blip.tv API and encapsulates the formatting\nand parsing job.\n\n.. contents ::\n\n\nbliptv.reader Package Changes\n*****************************\n\n======================================\nbliptv.reader version 1.0 (2008/07/27)\n======================================\n\n- initial release\n\n\nDetailed Documentation\n**********************\n\n\n============\nInstallation\n============\n\nTo install it, the best way is to use easy_install:\n\n$ easy_install bliptv.reader\n\nThis will download the package and it's dependencies from PyPI.\nIf you don't have easy_install installed, you can download it here:\n\nhttp://peak.telecommunity.com/DevCenter/EasyInstall\n\n=====\nUsage\n=====\n\nFirst you need to import it::\n\n    >>> from bliptv.reader import Show\n\nNow you can select a show and initialize it. We take COM.lounge TV as an example\nwhich can be found at http://comlounge.blip.tv. The showname thus is \"comlounge\"::\n\n    >>> show = Show('comlounge')\n\nWe can now select the first page of episodes from it::\n\n    >>> page1 = show.episodes.pages[1]\n\nWe can also retrieve the next page like that::\n\n    >>> page2 = page1.next\n\nAnd go back to page1 with prev::\n\n    >>> page1 = page2.prev\n\nUnfortunately blip.tv does not return the overall amount of episodes so that\nwe can only check next and prev if the return None like this::\n\n    >>> page1.prev is None\n    True\n\nAlso note, that the list of episodes is backwards, starting with the most\nrecent episode.\n\nNow we can check the episodes in that page (we can only test existance here\nbecause we don't know the exact names of the episodes as these change all the time)::\n\n    >>> episode = page1[0]\n    >>> len(episode.title)>0\n    True\n\n    >>> episode.url.startswith(\"http://blip.tv/file\")\n    True\n\nMoreover you can access:\n\nrating\n    The rating of the show, e.g. TV-UN\npureDescription\n    A plain text version of the description\ndescription\n    The HTML version of the description\nkeywords\n    The tags used as a list\n\n\n==========\nEnclosures\n==========\n\nOne important part of course are the media files of an episode.\nThese are stored as a dictionary inside the enclosures attribute of an episode::\n\n    >>> enclosures = episode.enclosures\n\nThe dict is a filetype => Enclosure structure::\n\n    >>> enclosure = enclosures['video/x-flv']\n    >>> enclosure.filetype\n    'video/x-flv'\n\n    >>> enclosure.url.startswith('http://blip.tv/file/get/')\n    True\n\n    >>> enclosure.filesize>0\n    True\n\n    >>> enclosure.height>0\n    True\n\n    >>> enclosure.width>0\n    True\n\n\n\nDownload\n**********************", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://comlounge.net", "keywords": "bliptv video socialnetworking socialmedia newmedia library screenscraping blip", "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "bliptv.reader", "package_url": "https://pypi.org/project/bliptv.reader/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bliptv.reader/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://comlounge.net"}, "release_url": "https://pypi.org/project/bliptv.reader/1.0/", "requires_dist": null, "requires_python": null, "summary": "A library for reading video episodes from any blip.tv show", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The goal of this project is to give developers an easy way to access\ndata stored on blip.tv, things like episodes, their enclosures and so on.\nIt is a wrapper around the blip.tv API and encapsulates the formatting\nand parsing job.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#bliptv-reader-package-changes\" id=\"id1\" rel=\"nofollow\">bliptv.reader Package Changes</a></li>\n<li><a href=\"#detailed-documentation\" id=\"id2\" rel=\"nofollow\">Detailed Documentation</a><ul>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#enclosures\" id=\"id5\" rel=\"nofollow\">Enclosures</a></li>\n</ul>\n</li>\n<li><a href=\"#download\" id=\"id6\" rel=\"nofollow\">Download</a></li>\n</ul>\n</div>\n<div id=\"bliptv-reader-package-changes\">\n<h2><a href=\"#id1\" rel=\"nofollow\">bliptv.reader Package Changes</a></h2>\n<h2 id=\"bliptv-reader-version-1-0-2008-07-27\"><span class=\"section-subtitle\">bliptv.reader version 1.0 (2008/07/27)</span></h2>\n<ul>\n<li>initial release</li>\n</ul>\n</div>\n<div id=\"detailed-documentation\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Detailed Documentation</a></h2>\n<div id=\"installation\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Installation</a></h3>\n<p>To install it, the best way is to use easy_install:</p>\n<p>$ easy_install bliptv.reader</p>\n<p>This will download the package and it\u2019s dependencies from PyPI.\nIf you don\u2019t have easy_install installed, you can download it here:</p>\n<p><a href=\"http://peak.telecommunity.com/DevCenter/EasyInstall\" rel=\"nofollow\">http://peak.telecommunity.com/DevCenter/EasyInstall</a></p>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Usage</a></h3>\n<p>First you need to import it:</p>\n<pre>&gt;&gt;&gt; from bliptv.reader import Show\n</pre>\n<p>Now you can select a show and initialize it. We take COM.lounge TV as an example\nwhich can be found at <a href=\"http://comlounge.blip.tv\" rel=\"nofollow\">http://comlounge.blip.tv</a>. The showname thus is \u201ccomlounge\u201d:</p>\n<pre>&gt;&gt;&gt; show = Show('comlounge')\n</pre>\n<p>We can now select the first page of episodes from it:</p>\n<pre>&gt;&gt;&gt; page1 = show.episodes.pages[1]\n</pre>\n<p>We can also retrieve the next page like that:</p>\n<pre>&gt;&gt;&gt; page2 = page1.next\n</pre>\n<p>And go back to page1 with prev:</p>\n<pre>&gt;&gt;&gt; page1 = page2.prev\n</pre>\n<p>Unfortunately blip.tv does not return the overall amount of episodes so that\nwe can only check next and prev if the return None like this:</p>\n<pre>&gt;&gt;&gt; page1.prev is None\nTrue\n</pre>\n<p>Also note, that the list of episodes is backwards, starting with the most\nrecent episode.</p>\n<p>Now we can check the episodes in that page (we can only test existance here\nbecause we don\u2019t know the exact names of the episodes as these change all the time):</p>\n<pre>&gt;&gt;&gt; episode = page1[0]\n&gt;&gt;&gt; len(episode.title)&gt;0\nTrue\n\n&gt;&gt;&gt; episode.url.startswith(\"http://blip.tv/file\")\nTrue\n</pre>\n<p>Moreover you can access:</p>\n<dl>\n<dt>rating</dt>\n<dd>The rating of the show, e.g. TV-UN</dd>\n<dt>pureDescription</dt>\n<dd>A plain text version of the description</dd>\n<dt>description</dt>\n<dd>The HTML version of the description</dd>\n<dt>keywords</dt>\n<dd>The tags used as a list</dd>\n</dl>\n</div>\n<div id=\"enclosures\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Enclosures</a></h3>\n<p>One important part of course are the media files of an episode.\nThese are stored as a dictionary inside the enclosures attribute of an episode:</p>\n<pre>&gt;&gt;&gt; enclosures = episode.enclosures\n</pre>\n<p>The dict is a filetype =&gt; Enclosure structure:</p>\n<pre>&gt;&gt;&gt; enclosure = enclosures['video/x-flv']\n&gt;&gt;&gt; enclosure.filetype\n'video/x-flv'\n\n&gt;&gt;&gt; enclosure.url.startswith('http://blip.tv/file/get/')\nTrue\n\n&gt;&gt;&gt; enclosure.filesize&gt;0\nTrue\n\n&gt;&gt;&gt; enclosure.height&gt;0\nTrue\n\n&gt;&gt;&gt; enclosure.width&gt;0\nTrue\n</pre>\n</div>\n</div>\n<div id=\"download\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Download</a></h2>\n</div>\n\n          </div>"}, "last_serial": 786918, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "87c944c241ecc2f6e160b0f70227b16b", "sha256": "34f257b79ee3f1011ae7844f03f805dd18db4c2cf5f737adb503d4e402f541a4"}, "downloads": -1, "filename": "bliptv.reader-1.0-py2.5.egg", "has_sig": false, "md5_digest": "87c944c241ecc2f6e160b0f70227b16b", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 9372, "upload_time": "2008-07-27T10:56:14", "upload_time_iso_8601": "2008-07-27T10:56:14Z", "url": "https://files.pythonhosted.org/packages/f9/21/7a004956109870844017e5c2a7862c9b0f5ade3968709f908f66e6000a11/bliptv.reader-1.0-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e362b83c19105395abce32344fbc498", "sha256": "2dd3f9b3aa60981f11ee95e3f1ae94d4dec02cb3773eeacd9521ebbbe6973782"}, "downloads": -1, "filename": "bliptv.reader-1.0.tar.gz", "has_sig": false, "md5_digest": "2e362b83c19105395abce32344fbc498", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4382, "upload_time": "2008-07-27T10:56:14", "upload_time_iso_8601": "2008-07-27T10:56:14Z", "url": "https://files.pythonhosted.org/packages/eb/03/bdbc6b68baf5b5f500da6f6323157627fd8c71f75795b75a448eac4a33ef/bliptv.reader-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87c944c241ecc2f6e160b0f70227b16b", "sha256": "34f257b79ee3f1011ae7844f03f805dd18db4c2cf5f737adb503d4e402f541a4"}, "downloads": -1, "filename": "bliptv.reader-1.0-py2.5.egg", "has_sig": false, "md5_digest": "87c944c241ecc2f6e160b0f70227b16b", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 9372, "upload_time": "2008-07-27T10:56:14", "upload_time_iso_8601": "2008-07-27T10:56:14Z", "url": "https://files.pythonhosted.org/packages/f9/21/7a004956109870844017e5c2a7862c9b0f5ade3968709f908f66e6000a11/bliptv.reader-1.0-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e362b83c19105395abce32344fbc498", "sha256": "2dd3f9b3aa60981f11ee95e3f1ae94d4dec02cb3773eeacd9521ebbbe6973782"}, "downloads": -1, "filename": "bliptv.reader-1.0.tar.gz", "has_sig": false, "md5_digest": "2e362b83c19105395abce32344fbc498", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4382, "upload_time": "2008-07-27T10:56:14", "upload_time_iso_8601": "2008-07-27T10:56:14Z", "url": "https://files.pythonhosted.org/packages/eb/03/bdbc6b68baf5b5f500da6f6323157627fd8c71f75795b75a448eac4a33ef/bliptv.reader-1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:05 2020"}