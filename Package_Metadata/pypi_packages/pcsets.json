{"info": {"author": "Bruce H. McCosar", "author_email": "bmccosar@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Education", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pcsets:\n                     Pitch Class Sets for Python\n\n                            version 2.0.2\n\n                           Bruce H. McCosar\n\n\nWelcome, and thank you for downloading pcsets. This is the third\nofficial (non-beta) release. With this release, I start the pcsets\ntutorial see \"About this Package\", below).\n\nLearning about Pitch Class Sets is easy -- the four modules presented\nhere are, like many Python programs, self documenting. They work well\nwith pydoc <http://docs.python.org/lib/module-pydoc.html>.\n\nLearning how to use these for practical compositional purposes, on the\nother hand ... well, that takes a lot of individual experimentation. I\nhave started a short tutorial, which will eventually demonstrate some\nof the techniques I've learned. However, you are a much better judge\nof what you want to know than I -- please, try the module out, and\nmost of all, have fun learning something new.\n\n\n                        About Pitch Class Sets\n                        ======================\n\nPitch Class Sets are a mathematical model for analyzing and composing\nmusic. Each note 'C' through 'B' has an equivalent pitch class number\n0 through 11. Sets of these numbers may be operated on by mathematical\nfunctions such as transpose and invert.\n\nThe goal of this project is to, eventually, have:\n\n  * A Python library capable of fully implementing Pitch Class Sets\n    and their common operations, as well as several convenience\n    functions to bring these abstract concepts to the real world.\n    (Mapping pitch classes to note names, for instance).\n\n  * A tool for composition.  Some applications are harmonization,\n    chord voicing generation, and melodic motif creation.\n\n  * More exotic goals -- creation of new chordal elements, musical\n    progressions, and harmonic relationships.\n\n\n                          About this Package\n                          ==================\n\nThe API will not change for any of the modules referred to as 'core'.\nBugs will be fixed and new modules will be added, but you won't wake\nup one day and find that PcSets wants input in statcoulombs or Dutch\nGuldens. In the version 2 series, the core will always behave like\nthe core. Occasionally new functionality will be introduced, but the\noriginal functionality will never be 'broken' -- that's why I spent all\nthat time writing unit tests.\n\n\nTHE CORE\n\nThis is the core as of 2.0.0:\n\n\n    pcsets.pcset\n\n        The base class, PcSet, includes methods that operate on single\n\tsets, such as inversion and transposition.\n\n    pcsets.pcops\n\n        Operations on two or more sets, such as subset_of(a,b).\n\n    pcsets.catalog\n\n        Generates the entire catalog of 224 prime sets as a Python\n        object. Since this takes a while to generate, it saves the\n        catalog in a pickle file (catalog.pkl) for future use.\n\n    pcsets.noteops\n\n        The 'universal translator' from PcSets to named notes and\n        vice versa.\n\n\nAny *new* modules will enter as 'experimental', however, not core.\nExperimental modules can change at any time.\n\n\nEXPERIMENTAL MODULES\n\nWith version 2.0.1, I introduced the first experimental module:\n\n\n    pcsets.tonerow\n\n        Implements the ToneRow class.  Unlike PcSets, which are\n\tunordered, a ToneRow consists of all 12 pitches in an\n\t*ordered* arrangement.\n\n\nThere is a lot of good information on this subject in the Straus book\nreferenced below. I've also put a lot of time into writing documentation\nstrings for the module; a run through it with pydoc will probably tell\nyou somewhere between too much and far too much ;-)\n\nAnother experimental module in development (and still in hiding,\nuntil I settle on a usable, workable interface):\n\n\n  * Operations on the familiar chords and scales -- sort of a noteops\n    for the common language of chord-scale theory.\n\n\nThese modules won't make it to the core until at least version 2.1.\n\n\nTHE TUTORIAL\n\nFinally, I've made a start on the tutorial.  My hope is that working\nthrough the documentation -- even for features that haven't been added\nyet! -- will let me streamline the API and introduce more relevant\nfeatures in future releases.\n\n\nBe sure to check back at the project website for updates.  I seem to\nhave embraced Google Code's slogan, \"Release early, release often.\"\n\n\n                   http://code.google.com/p/pcsets/", "description_content_type": null, "docs_url": null, "download_url": "http://pcsets.googlecode.com/files/pcsets-2.0.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/pcsets/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pcsets", "package_url": "https://pypi.org/project/pcsets/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pcsets/", "project_urls": {"Download": "http://pcsets.googlecode.com/files/pcsets-2.0.2.tar.gz", "Homepage": "http://code.google.com/p/pcsets/"}, "release_url": "https://pypi.org/project/pcsets/2.0.2/", "requires_dist": null, "requires_python": null, "summary": "Pitch Class Sets for Python.", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            pcsets:<br>                     Pitch Class Sets for Python<br><br>                            version 2.0.2<br><br>                           Bruce H. McCosar<br><br><br>Welcome, and thank you for downloading pcsets. This is the third<br>official (non-beta) release. With this release, I start the pcsets<br>tutorial see \"About this Package\", below).<br><br>Learning about Pitch Class Sets is easy -- the four modules presented<br>here are, like many Python programs, self documenting. They work well<br>with pydoc &lt;http://docs.python.org/lib/module-pydoc.html&gt;.<br><br>Learning how to use these for practical compositional purposes, on the<br>other hand ... well, that takes a lot of individual experimentation. I<br>have started a short tutorial, which will eventually demonstrate some<br>of the techniques I've learned. However, you are a much better judge<br>of what you want to know than I -- please, try the module out, and<br>most of all, have fun learning something new.<br><br><br>                        About Pitch Class Sets<br>                        ======================<br><br>Pitch Class Sets are a mathematical model for analyzing and composing<br>music. Each note 'C' through 'B' has an equivalent pitch class number<br>0 through 11. Sets of these numbers may be operated on by mathematical<br>functions such as transpose and invert.<br><br>The goal of this project is to, eventually, have:<br><br>  * A Python library capable of fully implementing Pitch Class Sets<br>    and their common operations, as well as several convenience<br>    functions to bring these abstract concepts to the real world.<br>    (Mapping pitch classes to note names, for instance).<br><br>  * A tool for composition.  Some applications are harmonization,<br>    chord voicing generation, and melodic motif creation.<br><br>  * More exotic goals -- creation of new chordal elements, musical<br>    progressions, and harmonic relationships.<br><br><br>                          About this Package<br>                          ==================<br><br>The API will not change for any of the modules referred to as 'core'.<br>Bugs will be fixed and new modules will be added, but you won't wake<br>up one day and find that PcSets wants input in statcoulombs or Dutch<br>Guldens. In the version 2 series, the core will always behave like<br>the core. Occasionally new functionality will be introduced, but the<br>original functionality will never be 'broken' -- that's why I spent all<br>that time writing unit tests.<br><br><br>THE CORE<br><br>This is the core as of 2.0.0:<br><br><br>    pcsets.pcset<br><br>        The base class, PcSet, includes methods that operate on single<br>\tsets, such as inversion and transposition.<br><br>    pcsets.pcops<br><br>        Operations on two or more sets, such as subset_of(a,b).<br><br>    pcsets.catalog<br><br>        Generates the entire catalog of 224 prime sets as a Python<br>        object. Since this takes a while to generate, it saves the<br>        catalog in a pickle file (catalog.pkl) for future use.<br><br>    pcsets.noteops<br><br>        The 'universal translator' from PcSets to named notes and<br>        vice versa.<br><br><br>Any *new* modules will enter as 'experimental', however, not core.<br>Experimental modules can change at any time.<br><br><br>EXPERIMENTAL MODULES<br><br>With version 2.0.1, I introduced the first experimental module:<br><br><br>    pcsets.tonerow<br><br>        Implements the ToneRow class.  Unlike PcSets, which are<br>\tunordered, a ToneRow consists of all 12 pitches in an<br>\t*ordered* arrangement.<br><br><br>There is a lot of good information on this subject in the Straus book<br>referenced below. I've also put a lot of time into writing documentation<br>strings for the module; a run through it with pydoc will probably tell<br>you somewhere between too much and far too much ;-)<br><br>Another experimental module in development (and still in hiding,<br>until I settle on a usable, workable interface):<br><br><br>  * Operations on the familiar chords and scales -- sort of a noteops<br>    for the common language of chord-scale theory.<br><br><br>These modules won't make it to the core until at least version 2.1.<br><br><br>THE TUTORIAL<br><br>Finally, I've made a start on the tutorial.  My hope is that working<br>through the documentation -- even for features that haven't been added<br>yet! -- will let me streamline the API and introduce more relevant<br>features in future releases.<br><br><br>Be sure to check back at the project website for updates.  I seem to<br>have embraced Google Code's slogan, \"Release early, release often.\"<br><br><br>                   http://code.google.com/p/pcsets/\n          </div>"}, "last_serial": 32200, "releases": {"2.0.0": [], "2.0.0b1": [], "2.0.0b2": [{"comment_text": "", "digests": {"md5": "02f6d355ecc92999a1b08ee04a426d36", "sha256": "3bf532fa3e59275061277a1135409b5b7cbb3b089e0385c4f8e9449195b4c0f2"}, "downloads": -1, "filename": "pcsets-2.0.0b2.tar.gz", "has_sig": false, "md5_digest": "02f6d355ecc92999a1b08ee04a426d36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36054, "upload_time": "2007-07-20T00:46:40", "upload_time_iso_8601": "2007-07-20T00:46:40Z", "url": "https://files.pythonhosted.org/packages/ba/3a/2c62291acba23cd13d4f9d458ce1b360a237e31580cdab5515e46d757d2d/pcsets-2.0.0b2.tar.gz", "yanked": false}], "2.0.0b3": [], "2.0.1": [], "2.0.2": []}, "urls": [], "timestamp": "Fri May  8 02:57:23 2020"}