{"info": {"author": "Gabriel S. Cabrera", "author_email": "gabric@uio.no", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Physics", "Topic :: Scientific/Engineering :: Visualization", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# nBody\n\n### A GPU-accelerated N-body particle simulator and animator\n\nCreate complex particle simulations the easy way: a high-level package for designing and simulating large-scale particle interactions. Let **nBody** do the hard work for you!\n\n## Features\n\nEasy to use \u2013 and fast \u2013 **nBody** can simulate:\n\n* Gravitational acceleration\n* Coulomb interactions\n* Particle collisions\n\n**nBody** is highly optimized:\n\n* GPU acceleration available via [```cupy```](https://cupy.chainer.org \"cuPY\")\n* CPU multiprocessing with [```numpy```](https://numpy.org/ \"NumPy\")\n* Energy conservation via the *velocity-verlet* algorithm\n\nAnimated [```matplotlib```](https://matplotlib.org/ \"Matplotlib\") visualizations included for 2-D simulations. 3-D animations are also supported through the use of [```vpython```](https://vpython.org/ \"VPython\").\n\n## Quick-Start\n\nUsing ```numpy``` arrays, you will need:\n\n* An initial position array ```x``` with shape ```(N,p)```\n    * *N* is the number of *particles*\n    * *p* is the number of *dimensions*\n* An initial velocity array ```v``` with shape ```(N,p)```\n* An array of masses ```m```with shape ```(N,)```\n* An array of charges ```q``` with shape ```(N,)```\n* An array of radii ```r``` with shape ```(N,)```\n\nA possible configuration is as follows:\n\n    import numpy as np\n    x = np.random.normal(0,   10, (N,p)) # Positions\n    v = np.random.normal(0,    2, (N,p)) # Velocities\n    m = np.random.normal(8,    1, (N, )) # Masses\n    q = np.random.normal(0, 1E-6, (N, )) # Charges\n    r = np.random.normal(1,  0.1, (N, )) # Radii\n\n    m[m < 0] = np.abs(m[m < 0])\n    m[m == 0] = 1E-3\n\nNext, pass these arrays in the given order to the ```spheres``` function, so as to create a new instance ```S``` of class ```System``` with the above conditions.\n\n    from nbody import *\n    S = spheres(x, v, m, q, r)\n\nAfter selecting a simulation runtime ```T``` and (optional) time-step ```dt```, use the ```solve``` method to calculate the particles' trajectories.\n\n    S.solve(T, dt)\n\nIf the system is 2-D such that ```p == 2```, an animation can be created and saved to file; here, the filename ```quick_start``` is chosen, and will produce a file ```animations/quick_start.mp4```.  \n\n    animate(S, \"quick_start\")\n\nIf the system is 3-D such that ```p == 3```, animations can be created but not saved to file \u2013 simply omit the string argument shown above, and no warnings will be raised.\n\nOnce the ```solve``` method has been called, it is also possible to save the ```System``` instance to file; in this case, the data will be saved to a directory ```saved/quick_start```.\n\n    save(S, \"quick_start\")", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GabrielSCabrera/nBody", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "nbody", "package_url": "https://pypi.org/project/nbody/", "platform": "", "project_url": "https://pypi.org/project/nbody/", "project_urls": {"Homepage": "https://github.com/GabrielSCabrera/nBody"}, "release_url": "https://pypi.org/project/nbody/0.0.4/", "requires_dist": null, "requires_python": ">=3.6.8", "summary": "GPU-accelerated N-Body particle simulator with visualizer", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># nBody</p>\n<p>### A GPU-accelerated N-body particle simulator and animator</p>\n<p>Create complex particle simulations the easy way: a high-level package for designing and simulating large-scale particle interactions. Let <strong>nBody</strong> do the hard work for you!</p>\n<p>## Features</p>\n<p>Easy to use \u2013 and fast \u2013 <strong>nBody</strong> can simulate:</p>\n<ul>\n<li>Gravitational acceleration</li>\n<li>Coulomb interactions</li>\n<li>Particle collisions</li>\n</ul>\n<p><strong>nBody</strong> is highly optimized:</p>\n<ul>\n<li>GPU acceleration available via [<tt>`cupy`</tt>](<a href=\"https://cupy.chainer.org\" rel=\"nofollow\">https://cupy.chainer.org</a> \u201ccuPY\u201d)</li>\n<li>CPU multiprocessing with [<tt>`numpy`</tt>](<a href=\"https://numpy.org/\" rel=\"nofollow\">https://numpy.org/</a> \u201cNumPy\u201d)</li>\n<li>Energy conservation via the <em>velocity-verlet</em> algorithm</li>\n</ul>\n<p>Animated [<tt>`matplotlib`</tt>](<a href=\"https://matplotlib.org/\" rel=\"nofollow\">https://matplotlib.org/</a> \u201cMatplotlib\u201d) visualizations included for 2-D simulations. 3-D animations are also supported through the use of [<tt>`vpython`</tt>](<a href=\"https://vpython.org/\" rel=\"nofollow\">https://vpython.org/</a> \u201cVPython\u201d).</p>\n<p>## Quick-Start</p>\n<p>Using <tt>`numpy`</tt> arrays, you will need:</p>\n<ul>\n<li><dl>\n<dt>An initial position array <tt>`x`</tt> with shape <tt>`(N,p)`</tt></dt>\n<dd><ul>\n<li><em>N</em> is the number of <em>particles</em></li>\n<li><em>p</em> is the number of <em>dimensions</em></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>An initial velocity array <tt>`v`</tt> with shape <tt>`(N,p)`</tt></li>\n<li>An array of masses <tt><span class=\"pre\">`m```with</span> shape <span class=\"pre\">```(N,)`</span></tt></li>\n<li>An array of charges <tt>`q`</tt> with shape <tt><span class=\"pre\">`(N,)`</span></tt></li>\n<li>An array of radii <tt>`r`</tt> with shape <tt><span class=\"pre\">`(N,)`</span></tt></li>\n</ul>\n<p>A possible configuration is as follows:</p>\n<blockquote>\n<p>import numpy as np\nx = np.random.normal(0,   10, (N,p)) # Positions\nv = np.random.normal(0,    2, (N,p)) # Velocities\nm = np.random.normal(8,    1, (N, )) # Masses\nq = np.random.normal(0, 1E-6, (N, )) # Charges\nr = np.random.normal(1,  0.1, (N, )) # Radii</p>\n<p>m[m &lt; 0] = np.abs(m[m &lt; 0])\nm[m == 0] = 1E-3</p>\n</blockquote>\n<p>Next, pass these arrays in the given order to the <tt>`spheres`</tt> function, so as to create a new instance <tt>`S`</tt> of class <tt>`System`</tt> with the above conditions.</p>\n<blockquote>\nfrom nbody import *\nS = spheres(x, v, m, q, r)</blockquote>\n<p>After selecting a simulation runtime <tt>`T`</tt> and (optional) time-step <tt>`dt`</tt>, use the <tt>`solve`</tt> method to calculate the particles\u2019 trajectories.</p>\n<blockquote>\nS.solve(T, dt)</blockquote>\n<p>If the system is 2-D such that <tt>`p == 2`</tt>, an animation can be created and saved to file; here, the filename <tt>`quick_start`</tt> is chosen, and will produce a file <tt>`animations/quick_start.mp4`</tt>.</p>\n<blockquote>\nanimate(S, \u201cquick_start\u201d)</blockquote>\n<p>If the system is 3-D such that <tt>`p == 3`</tt>, animations can be created but not saved to file \u2013 simply omit the string argument shown above, and no warnings will be raised.</p>\n<p>Once the <tt>`solve`</tt> method has been called, it is also possible to save the <tt>`System`</tt> instance to file; in this case, the data will be saved to a directory <tt>`saved/quick_start`</tt>.</p>\n<blockquote>\nsave(S, \u201cquick_start\u201d)</blockquote>\n\n          </div>"}, "last_serial": 6216491, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f92b3b92081fc144c1231347dd8d285d", "sha256": "450e8dbd7aa258aeda4f0f7bf3821bf220faf723e2eba65f3f690c392b20ed75"}, "downloads": -1, "filename": "nbody-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f92b3b92081fc144c1231347dd8d285d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12031, "upload_time": "2019-11-26T01:56:36", "upload_time_iso_8601": "2019-11-26T01:56:36.647962Z", "url": "https://files.pythonhosted.org/packages/55/7b/3252e50cf6e334148e4335960e7289cffbfdabd9984d0bef083c2aa5cdea/nbody-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "142babd3d6f59a6cdc874ebb51dbd716", "sha256": "699103172dd163e10148e3416268b572a521a15a0a3fe0c707778eef32b3bdce"}, "downloads": -1, "filename": "nbody-0.0.2.tar.gz", "has_sig": false, "md5_digest": "142babd3d6f59a6cdc874ebb51dbd716", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11998, "upload_time": "2019-11-26T02:16:29", "upload_time_iso_8601": "2019-11-26T02:16:29.829387Z", "url": "https://files.pythonhosted.org/packages/76/8d/151a4dbc7365d20023f51541ab8cb5625cfcbd50b65f1cb14c1835f13bd2/nbody-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2f41086b97489db1d93ced1ed696ad9d", "sha256": "a53c7e45c249a4fdc9b639120e47218c1ffe66da68ec074133dcf2e4240e388c"}, "downloads": -1, "filename": "nbody-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2f41086b97489db1d93ced1ed696ad9d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11958, "upload_time": "2019-11-26T11:56:10", "upload_time_iso_8601": "2019-11-26T11:56:10.704759Z", "url": "https://files.pythonhosted.org/packages/cf/9e/909db3510866a7af9665258a57997aa3dbb16e7642948df40ced89c267a8/nbody-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "cda0c88791670150527406ea5cdd2f91", "sha256": "c9dfb5076b6b734c344e20642460b3401d71bf1ee6594c3e173ef31acbc30924"}, "downloads": -1, "filename": "nbody-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cda0c88791670150527406ea5cdd2f91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8", "size": 17981, "upload_time": "2019-11-29T02:47:57", "upload_time_iso_8601": "2019-11-29T02:47:57.543682Z", "url": "https://files.pythonhosted.org/packages/02/2e/0813eaf2ff8386a2fd328d3f8367b6880e44b4b6b1603066fd21e6da6dc3/nbody-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cda0c88791670150527406ea5cdd2f91", "sha256": "c9dfb5076b6b734c344e20642460b3401d71bf1ee6594c3e173ef31acbc30924"}, "downloads": -1, "filename": "nbody-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cda0c88791670150527406ea5cdd2f91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8", "size": 17981, "upload_time": "2019-11-29T02:47:57", "upload_time_iso_8601": "2019-11-29T02:47:57.543682Z", "url": "https://files.pythonhosted.org/packages/02/2e/0813eaf2ff8386a2fd328d3f8367b6880e44b4b6b1603066fd21e6da6dc3/nbody-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:54 2020"}