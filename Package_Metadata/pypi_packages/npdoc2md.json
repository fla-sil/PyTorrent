{"info": {"author": "Jakub Wlodek", "author_email": "jwlodek.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# npdoc2md\n\nA simple python utility for auto-converting numpy-style python docstrings to \nmarkdown for use with mkdocs, an entire package at a time. It also includes a second utility, `code2npdoc`, which will attempt to generate docstring templates given code for an entire project.\n\n### Installation\n\nThe preferred method for installing npdoc2md is to use `pip`. (Python 3.5+ required)\n\n```\npip install npdoc2md\n```\n\nIf `pip` defaults to Python2, use `pip3`. You can also install from source:\n\n```\ngit clone https://github.com/jwlodek/npdoc2md\ncd npdoc2md\npip install .\n```\n\n### Usage\n\nBelow is the result of running `npdoc2md` with the `-h` flag:\n\n```\nusage: npdoc2md [-h] [-v] -i INPUT -o OUTPUT [-s SKIP [SKIP ...]] [-d]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Use this flag to print out npdoc2md version info.\n  -i INPUT, --input INPUT\n                        The path to the target python project or file to\n                        convert.\n  -o OUTPUT, --output OUTPUT\n                        The output directory where the markdown files should\n                        be placed.\n  -s SKIP [SKIP ...], --skip SKIP [SKIP ...]\n                        List of filenames/directories to skip.\n  -d, --debug           Add this flag to print detailed log messages during\n                        conversion.\n```\n\nBasic usage will require at least target and output locations that are valid.\n\n```\nnpdoc2md -i C:\\Users\\jwlodek\\demo -o C:\\Users\\jwlodek\\demo_output\n```\n\nYou can also specify to enable debug printing with `-d`, and files to skip with `-s` followed by a list of files. For example, to autogenerate [py_cui](https://github.com/jwlodek/py_cui) docs, the following command is run:\n\n```\nnpdoc2md -i ..\\..\\..\\py_cui -o ..\\..\\DocstringGenerated -s statusbar.py errors.py\n```\n\nwhich will ignore the `statusbar.py` and `errors.py` files.\n\nThe `npdoc2md` script will recursively search the target (if it is a folder) for files ending with the `.py` extension,\nand will generate a markdown file for each one not specified in the ignore section. Any encountered `__init__.py` files will use their containing folder's name for the name of the output markdown file.\n\n### Doc Rules\n\nYou must follow strict docstring style rules to use npdoc2md:\n\n* Each class of function docstring must start and end with `\"\"\"`, and the initial description must be right after the initial `\"\"\"`. Ex: `\"\"\"Hello this is a function`\n* Use numpy style guidelines for `Attributes`, `Parameters`, `Returns`, `Raises` lists\n* The `Returns` list should give a return value name and type with the doc message. If it doesn't, a generic name will be assigned to the return variable\n\n### Examples\n\nAs stated previously, [py_cui](https://github.com/jwlodek/py_cui) uses npdoc2md to auto-generate documentation to use with `mkdocs`.\nYou may also see the `Npdoc2md.md` file in this repository which was generated by running this script on itself:\n\n```\nnpdoc2md -i .\\npdoc2md.py -o .\\example\\.\n```\n\n### Generating template docs\n\nWriting out all of the docstrings for a project is a lengthy process, so a second helper script was written to help with generating template np docs. It has the following usage:\n\n```\nusage: code2npdoc [-h] [-v] -i INPUT [-c] [-s SKIP [SKIP ...]] [-d]\n\nA utility for auto-creating base numpy style docstrings for an entire python\nproject.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Add this flag for displaying version information.\n  -i INPUT, --input INPUT\n                        Path to target python project or file\n  -c, --createtemp      If this flag is set, code2npdoc will create a\n                        temporary conversion folder without overriding your\n                        sources.\n  -s SKIP [SKIP ...], --skip SKIP [SKIP ...]\n                        List of filenames/directories to skip.\n  -d, --debug           Add this flag to print detailed log messages during\n                        conversion.\n```\n\nWith similar flags as the base `npdoc2md` script. Add the `-c` flag if you don't want your original file to be auto-overwritten. An example of running this script on the `npdoc2md` file is as follows:\n\n```\ncode2npdoc -i npdoc2md.py -c\n```\n\n### License\n\nMIT License  \nCopyright (c) 2020, Jakub Wlodek\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jwlodek/npdoc2md", "keywords": "markdown numpy docs autogenerate script", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "npdoc2md", "package_url": "https://pypi.org/project/npdoc2md/", "platform": "", "project_url": "https://pypi.org/project/npdoc2md/", "project_urls": {"Homepage": "https://github.com/jwlodek/npdoc2md"}, "release_url": "https://pypi.org/project/npdoc2md/0.0.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Scripts for autogenerating markdown docs from numpy-style docstrings.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>npdoc2md</h1>\n<p>A simple python utility for auto-converting numpy-style python docstrings to\nmarkdown for use with mkdocs, an entire package at a time. It also includes a second utility, <code>code2npdoc</code>, which will attempt to generate docstring templates given code for an entire project.</p>\n<h3>Installation</h3>\n<p>The preferred method for installing npdoc2md is to use <code>pip</code>. (Python 3.5+ required)</p>\n<pre><code>pip install npdoc2md\n</code></pre>\n<p>If <code>pip</code> defaults to Python2, use <code>pip3</code>. You can also install from source:</p>\n<pre><code>git clone https://github.com/jwlodek/npdoc2md\ncd npdoc2md\npip install .\n</code></pre>\n<h3>Usage</h3>\n<p>Below is the result of running <code>npdoc2md</code> with the <code>-h</code> flag:</p>\n<pre><code>usage: npdoc2md [-h] [-v] -i INPUT -o OUTPUT [-s SKIP [SKIP ...]] [-d]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Use this flag to print out npdoc2md version info.\n  -i INPUT, --input INPUT\n                        The path to the target python project or file to\n                        convert.\n  -o OUTPUT, --output OUTPUT\n                        The output directory where the markdown files should\n                        be placed.\n  -s SKIP [SKIP ...], --skip SKIP [SKIP ...]\n                        List of filenames/directories to skip.\n  -d, --debug           Add this flag to print detailed log messages during\n                        conversion.\n</code></pre>\n<p>Basic usage will require at least target and output locations that are valid.</p>\n<pre><code>npdoc2md -i C:\\Users\\jwlodek\\demo -o C:\\Users\\jwlodek\\demo_output\n</code></pre>\n<p>You can also specify to enable debug printing with <code>-d</code>, and files to skip with <code>-s</code> followed by a list of files. For example, to autogenerate <a href=\"https://github.com/jwlodek/py_cui\" rel=\"nofollow\">py_cui</a> docs, the following command is run:</p>\n<pre><code>npdoc2md -i ..\\..\\..\\py_cui -o ..\\..\\DocstringGenerated -s statusbar.py errors.py\n</code></pre>\n<p>which will ignore the <code>statusbar.py</code> and <code>errors.py</code> files.</p>\n<p>The <code>npdoc2md</code> script will recursively search the target (if it is a folder) for files ending with the <code>.py</code> extension,\nand will generate a markdown file for each one not specified in the ignore section. Any encountered <code>__init__.py</code> files will use their containing folder's name for the name of the output markdown file.</p>\n<h3>Doc Rules</h3>\n<p>You must follow strict docstring style rules to use npdoc2md:</p>\n<ul>\n<li>Each class of function docstring must start and end with <code>\"\"\"</code>, and the initial description must be right after the initial <code>\"\"\"</code>. Ex: <code>\"\"\"Hello this is a function</code></li>\n<li>Use numpy style guidelines for <code>Attributes</code>, <code>Parameters</code>, <code>Returns</code>, <code>Raises</code> lists</li>\n<li>The <code>Returns</code> list should give a return value name and type with the doc message. If it doesn't, a generic name will be assigned to the return variable</li>\n</ul>\n<h3>Examples</h3>\n<p>As stated previously, <a href=\"https://github.com/jwlodek/py_cui\" rel=\"nofollow\">py_cui</a> uses npdoc2md to auto-generate documentation to use with <code>mkdocs</code>.\nYou may also see the <code>Npdoc2md.md</code> file in this repository which was generated by running this script on itself:</p>\n<pre><code>npdoc2md -i .\\npdoc2md.py -o .\\example\\.\n</code></pre>\n<h3>Generating template docs</h3>\n<p>Writing out all of the docstrings for a project is a lengthy process, so a second helper script was written to help with generating template np docs. It has the following usage:</p>\n<pre><code>usage: code2npdoc [-h] [-v] -i INPUT [-c] [-s SKIP [SKIP ...]] [-d]\n\nA utility for auto-creating base numpy style docstrings for an entire python\nproject.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Add this flag for displaying version information.\n  -i INPUT, --input INPUT\n                        Path to target python project or file\n  -c, --createtemp      If this flag is set, code2npdoc will create a\n                        temporary conversion folder without overriding your\n                        sources.\n  -s SKIP [SKIP ...], --skip SKIP [SKIP ...]\n                        List of filenames/directories to skip.\n  -d, --debug           Add this flag to print detailed log messages during\n                        conversion.\n</code></pre>\n<p>With similar flags as the base <code>npdoc2md</code> script. Add the <code>-c</code> flag if you don't want your original file to be auto-overwritten. An example of running this script on the <code>npdoc2md</code> file is as follows:</p>\n<pre><code>code2npdoc -i npdoc2md.py -c\n</code></pre>\n<h3>License</h3>\n<p>MIT License<br>\nCopyright (c) 2020, Jakub Wlodek</p>\n\n          </div>"}, "last_serial": 7007512, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9dd4a25331b5c787f9313d6f3679a20b", "sha256": "2c644e0964def0053acc1b6895e919ff051e11522bcbe9337d03a7b364ed38bd"}, "downloads": -1, "filename": "npdoc2md-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9dd4a25331b5c787f9313d6f3679a20b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12858, "upload_time": "2020-04-13T03:28:06", "upload_time_iso_8601": "2020-04-13T03:28:06.475239Z", "url": "https://files.pythonhosted.org/packages/94/1e/45b5d560ece761b071769d24aad6f80d77c743390c41e5bce4e3a263d7b6/npdoc2md-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29450d0cffbe26cecdcea2ea371e37df", "sha256": "2fc9d872dbdfc9b743da38859a8e43ad730e62d01e1affa361dbdb3862056eb9"}, "downloads": -1, "filename": "npdoc2md-0.0.1.tar.gz", "has_sig": false, "md5_digest": "29450d0cffbe26cecdcea2ea371e37df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10762, "upload_time": "2020-04-13T03:28:08", "upload_time_iso_8601": "2020-04-13T03:28:08.625674Z", "url": "https://files.pythonhosted.org/packages/1e/8b/dd39d2f050a6dfb2a54dc4ca054601829a9abe5e639cae85c9d5cb0f3422/npdoc2md-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9dd4a25331b5c787f9313d6f3679a20b", "sha256": "2c644e0964def0053acc1b6895e919ff051e11522bcbe9337d03a7b364ed38bd"}, "downloads": -1, "filename": "npdoc2md-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9dd4a25331b5c787f9313d6f3679a20b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12858, "upload_time": "2020-04-13T03:28:06", "upload_time_iso_8601": "2020-04-13T03:28:06.475239Z", "url": "https://files.pythonhosted.org/packages/94/1e/45b5d560ece761b071769d24aad6f80d77c743390c41e5bce4e3a263d7b6/npdoc2md-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29450d0cffbe26cecdcea2ea371e37df", "sha256": "2fc9d872dbdfc9b743da38859a8e43ad730e62d01e1affa361dbdb3862056eb9"}, "downloads": -1, "filename": "npdoc2md-0.0.1.tar.gz", "has_sig": false, "md5_digest": "29450d0cffbe26cecdcea2ea371e37df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10762, "upload_time": "2020-04-13T03:28:08", "upload_time_iso_8601": "2020-04-13T03:28:08.625674Z", "url": "https://files.pythonhosted.org/packages/1e/8b/dd39d2f050a6dfb2a54dc4ca054601829a9abe5e639cae85c9d5cb0f3422/npdoc2md-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:32 2020"}