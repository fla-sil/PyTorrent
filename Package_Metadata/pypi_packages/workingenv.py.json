{"info": {"author": "Ian Bicking", "author_email": "ianb@colorstudy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License"], "description": "**Status:** the author of workingenv recommends you use `virtualenv\r\n<http://pypi.python.org/pypi/virtualenv>`_ instead of workingenv, as virtualenv\r\nis less likely to bite.\r\n\r\n.. contents::\r\n\r\nInstallation\r\n------------\r\n\r\nYou don't need to install this as a Python package; you can simply\r\n`download the script\r\n<http://svn.colorstudy.com/home/ianb/workingenv/workingenv.py>`_ and\r\nrun it.  This avoids a chicken-and-egg problem of installing stuff\r\ninto your environment so you can start setting up environments.\r\n\r\nYou can also install it with ``easy_install workingenv.py``, install\r\nit without setuptools (it does not depend on setuptools for\r\ninstallation), or install from the `subversion repository\r\n<http://svn.colorstudy.com/home/ianb/workingenv/#egg=workingenv.py-dev>`_\r\nwith ``easy_install workingenv.py==dev``.\r\n\r\nSummary\r\n-------\r\n\r\nThis tool creates an environment that is isolated from the rest of the\r\nPython installation, eliminating site-packages and any other source of\r\nmodules, so that only the modules (and versions) you install into the\r\nenvironment will be available.  This allows for isolated and\r\ncontrolled environments, as well as reproduceability.  This is similar\r\nto `virtual-python\r\n<http://peak.telecommunity.com/dist/virtual-python.py>`_, but without\r\nthe symlinks and with some additional features.\r\n\r\nThe basic usage is::\r\n\r\n    $ python workingenv.py MyNewEnvironment\r\n    $ source MyNewEnvironment/bin/activate\r\n\r\nAfter sourcing ``bin/activate`` any commands (like ``python setup.py\r\ninstall``, etc) will install into the new environment.  A Windows\r\n``activate.bat`` file is also generated for that environment.  Scripts\r\nlike ``bin/easy_install`` will be tied to the environment, and so they\r\nwill automatically install into the environment even without\r\nactivation.\r\n\r\nChanges\r\n-------\r\n\r\n**0.6.5**: Export ``$_WE_OLD_WORKING_PATH``, etc.  Also deactivate\r\nenvironments when activating a new environment.  Include the Darwin\r\nPorts ``site-packages`` directory on that platform.  ``-env`` was\r\nbeing totally ignored; working now.\r\n\r\n**0.6.4**: Use ``--always-unzip`` with ``ez_setup.py``, so we don't\r\nsometimes (on Python 2.5?) get setuptools installed as an egg.  Don't\r\nput quotes around environmental variables in ``activate.bat``.  Print\r\nout installation with nesting to show what dependencies are drawn in\r\nby what libraries.\r\n\r\n**0.6.3**: Don't raise an exception when ``cli|gui.exe`` is missing.\r\nSet ``always_copy = True`` in ``distutils.cfg``, which avoids some\r\nproblems with system-wide packages.  Show some indication of progress\r\nduring the Setuptools installation.\r\n\r\n**0.6.2**: User the system distutils.cfg as well as the\r\nworkingenv-specific distutils.cfg; helpful for picking up system-wide\r\ncompiler settings.  Fix problem with creating command-line scripts on\r\nWindows (missing ``cli.exe`` or ``gui.exe``).\r\n\r\n**0.6.1**: Minor bugfix, plus Windows activate.bat file now changes\r\nthe prompt (from Patrick O'Brien).  Also, install script as just\r\n``workingenv`` so it doesn't conflict with the module.\r\n\r\n**0.6**: Pulls in dependencies from --requirements files, irregardless of\r\nwhether a currently activated environment might provide those\r\ndependencies.  Includes a ``setup.py`` file.  Doesn't print out boring\r\nmessages from ``ez_setup.py`` and ``easy_install``.\r\n\r\n**0.5**: Fix the self-activation of scripts.\r\n\r\n**0.4**: Fix the interaction of the ``--site-packages`` option (that\r\nbrings in the global ``site-packages/`` directory) and a global\r\ninstallation of setuptools.  If you get an error like \"site.py is not\r\na setuptools-generated site.py; please remove it\" you should upgrade\r\nand regenerate your workingenv.\r\n\r\n**0.3**: Support for Setuptools 0.6c5\r\n\r\nActivation\r\n----------\r\n\r\nWhen you \"activate\" the environment, ``python`` will treat that\r\nenvironment as though it was the only Python environment available.\r\nIt does this by setting ``$PYTHONPATH`` and overriding the standard\r\n``site.py``.\r\n\r\nInstallations with \"setup.py install\" and easy_install will go into\r\nthe right place.  Scripts built with easy_install (*not other ways*)\r\nwill be tied to the environment, even if the environment isn't\r\nactivated when the script is run.\r\n\r\nActivation itself means putting ``lib/python2.4/`` onto\r\n``$PYTHONPATH``.  If you don't want to use ``bin/activate``, just do:\r\n\r\n    $ export PYTHONPATH=\"WORKINGENV/lib/python2.4\"\r\n    $ <anything using Python>\r\n\r\n``bin/activate`` also updates your prompt and sets ``$PATH`` to point\r\nto the workingenv ``bin/``.  There is no other magic to it, so you can\r\nreproduce the same functionality that way if you want.  (Note also\r\nthat ``bin/activate`` changes your environment, which is why it must\r\nbe ``source``\\ d into a shell environment.)\r\n\r\nSee `this post <http://blog.ianbicking.org/working-env.html>`_ for an\r\ninitial discussion.  Discussion should go to `distutils-sig@python.org\r\n<http://www.python.org/community/sigs/current/distutils-sig/>`_.\r\n\r\nRequirements\r\n------------\r\n\r\nAlso included is the notion of a requirement set, so you can bootstrap\r\na complete set of packages.  This is a text file with\r\n``easy_install``\\ able requirements, one on each line.  The file can\r\nalso include ``-r other_file`` and ``-f place_to_find_packages``.\r\nUsing this you can provide a very specific working set of packages for\r\nusers/developers.  You may also use ``-e`` before a requirement to\r\ninstall that requirement into ``src/`` in development mode.\r\n\r\nTwo examples of this sense of requirements are provided,\r\n\"tg-example.txt\" and \"tg-0.9.txt\".  Note that by putting this into a\r\nseparate file, adjusting the requirements in response to testing does\r\nnot require changing the requirements of any particular package.  This\r\nway you can give very exacting requirements, and later adjust those\r\nrequirements in response to upgrades, without causing instabilities in\r\nany one package.\r\n\r\nRegenerating Environments\r\n-------------------------\r\n\r\nEnvironments carry around the settings they were created with (in\r\n``.workingenv/``).  This allows you to run ``workingenv.py\r\nENVIRONMENT`` over again to make updates, and settings will still be\r\npreserved.\r\n\r\nBefore overwriting any files you will be asked about the changes.\r\nAlso you can use ``--simulate`` to see what it *would* do.\r\n\r\nWindows\r\n-------\r\n\r\nworkingenv should work on Windows, but you must use ``activate.bat``\r\nbefore starting scripts -- they can't self-activate on Windows.\r\n\r\nZope\r\n----\r\n\r\nworkingenv.py *will* work with Zope 2, but you should use the --home\r\noption (which will put everything in lib/python/ instead of\r\nlib/python2.4/).  The way Zope and many Zope Products are set up, they\r\nexpect this kind of layout.\r\n\r\nUsing workingenv Programmatically\r\n---------------------------------\r\n\r\nYou can use ``workingenv.main()`` just like the script; this is\r\nprobably the best/safest way to use it programmatically.  Of course\r\ncalling it in a subprocess will also work.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://cheeseshop.python.org/pypi/workingenv.py", "keywords": "setuptools deployment installation distutils", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "workingenv.py", "package_url": "https://pypi.org/project/workingenv.py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/workingenv.py/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://cheeseshop.python.org/pypi/workingenv.py"}, "release_url": "https://pypi.org/project/workingenv.py/0.6.5/", "requires_dist": null, "requires_python": null, "summary": "Tool to create isolated Python environment", "version": "0.6.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Status:</strong> the author of workingenv recommends you use <a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">virtualenv</a> instead of workingenv, as virtualenv\nis less likely to bite.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#summary\" id=\"id2\" rel=\"nofollow\">Summary</a></li>\n<li><a href=\"#changes\" id=\"id3\" rel=\"nofollow\">Changes</a></li>\n<li><a href=\"#activation\" id=\"id4\" rel=\"nofollow\">Activation</a></li>\n<li><a href=\"#requirements\" id=\"id5\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#regenerating-environments\" id=\"id6\" rel=\"nofollow\">Regenerating Environments</a></li>\n<li><a href=\"#windows\" id=\"id7\" rel=\"nofollow\">Windows</a></li>\n<li><a href=\"#zope\" id=\"id8\" rel=\"nofollow\">Zope</a></li>\n<li><a href=\"#using-workingenv-programmatically\" id=\"id9\" rel=\"nofollow\">Using workingenv Programmatically</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>You don\u2019t need to install this as a Python package; you can simply\n<a href=\"http://svn.colorstudy.com/home/ianb/workingenv/workingenv.py\" rel=\"nofollow\">download the script</a> and\nrun it.  This avoids a chicken-and-egg problem of installing stuff\ninto your environment so you can start setting up environments.</p>\n<p>You can also install it with <tt>easy_install workingenv.py</tt>, install\nit without setuptools (it does not depend on setuptools for\ninstallation), or install from the <a href=\"http://svn.colorstudy.com/home/ianb/workingenv/#egg=workingenv.py-dev\" rel=\"nofollow\">subversion repository</a>\nwith <tt>easy_install <span class=\"pre\">workingenv.py==dev</span></tt>.</p>\n</div>\n<div id=\"summary\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Summary</a></h2>\n<p>This tool creates an environment that is isolated from the rest of the\nPython installation, eliminating site-packages and any other source of\nmodules, so that only the modules (and versions) you install into the\nenvironment will be available.  This allows for isolated and\ncontrolled environments, as well as reproduceability.  This is similar\nto <a href=\"http://peak.telecommunity.com/dist/virtual-python.py\" rel=\"nofollow\">virtual-python</a>, but without\nthe symlinks and with some additional features.</p>\n<p>The basic usage is:</p>\n<pre>$ python workingenv.py MyNewEnvironment\n$ source MyNewEnvironment/bin/activate\n</pre>\n<p>After sourcing <tt>bin/activate</tt> any commands (like <tt>python setup.py\ninstall</tt>, etc) will install into the new environment.  A Windows\n<tt>activate.bat</tt> file is also generated for that environment.  Scripts\nlike <tt>bin/easy_install</tt> will be tied to the environment, and so they\nwill automatically install into the environment even without\nactivation.</p>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Changes</a></h2>\n<p><strong>0.6.5</strong>: Export <tt>$_WE_OLD_WORKING_PATH</tt>, etc.  Also deactivate\nenvironments when activating a new environment.  Include the Darwin\nPorts <tt><span class=\"pre\">site-packages</span></tt> directory on that platform.  <tt><span class=\"pre\">-env</span></tt> was\nbeing totally ignored; working now.</p>\n<p><strong>0.6.4</strong>: Use <tt><span class=\"pre\">--always-unzip</span></tt> with <tt>ez_setup.py</tt>, so we don\u2019t\nsometimes (on Python 2.5?) get setuptools installed as an egg.  Don\u2019t\nput quotes around environmental variables in <tt>activate.bat</tt>.  Print\nout installation with nesting to show what dependencies are drawn in\nby what libraries.</p>\n<p><strong>0.6.3</strong>: Don\u2019t raise an exception when <tt>cli|gui.exe</tt> is missing.\nSet <tt>always_copy = True</tt> in <tt>distutils.cfg</tt>, which avoids some\nproblems with system-wide packages.  Show some indication of progress\nduring the Setuptools installation.</p>\n<p><strong>0.6.2</strong>: User the system distutils.cfg as well as the\nworkingenv-specific distutils.cfg; helpful for picking up system-wide\ncompiler settings.  Fix problem with creating command-line scripts on\nWindows (missing <tt>cli.exe</tt> or <tt>gui.exe</tt>).</p>\n<p><strong>0.6.1</strong>: Minor bugfix, plus Windows activate.bat file now changes\nthe prompt (from Patrick O\u2019Brien).  Also, install script as just\n<tt>workingenv</tt> so it doesn\u2019t conflict with the module.</p>\n<p><strong>0.6</strong>: Pulls in dependencies from \u2013requirements files, irregardless of\nwhether a currently activated environment might provide those\ndependencies.  Includes a <tt>setup.py</tt> file.  Doesn\u2019t print out boring\nmessages from <tt>ez_setup.py</tt> and <tt>easy_install</tt>.</p>\n<p><strong>0.5</strong>: Fix the self-activation of scripts.</p>\n<p><strong>0.4</strong>: Fix the interaction of the <tt><span class=\"pre\">--site-packages</span></tt> option (that\nbrings in the global <tt><span class=\"pre\">site-packages/</span></tt> directory) and a global\ninstallation of setuptools.  If you get an error like \u201csite.py is not\na setuptools-generated site.py; please remove it\u201d you should upgrade\nand regenerate your workingenv.</p>\n<p><strong>0.3</strong>: Support for Setuptools 0.6c5</p>\n</div>\n<div id=\"activation\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Activation</a></h2>\n<p>When you \u201cactivate\u201d the environment, <tt>python</tt> will treat that\nenvironment as though it was the only Python environment available.\nIt does this by setting <tt>$PYTHONPATH</tt> and overriding the standard\n<tt>site.py</tt>.</p>\n<p>Installations with \u201csetup.py install\u201d and easy_install will go into\nthe right place.  Scripts built with easy_install (<em>not other ways</em>)\nwill be tied to the environment, even if the environment isn\u2019t\nactivated when the script is run.</p>\n<p>Activation itself means putting <tt>lib/python2.4/</tt> onto\n<tt>$PYTHONPATH</tt>.  If you don\u2019t want to use <tt>bin/activate</tt>, just do:</p>\n<blockquote>\n$ export PYTHONPATH=\u201dWORKINGENV/lib/python2.4\u201d\n$ &lt;anything using Python&gt;</blockquote>\n<p><tt>bin/activate</tt> also updates your prompt and sets <tt>$PATH</tt> to point\nto the workingenv <tt>bin/</tt>.  There is no other magic to it, so you can\nreproduce the same functionality that way if you want.  (Note also\nthat <tt>bin/activate</tt> changes your environment, which is why it must\nbe <tt>source</tt>d into a shell environment.)</p>\n<p>See <a href=\"http://blog.ianbicking.org/working-env.html\" rel=\"nofollow\">this post</a> for an\ninitial discussion.  Discussion should go to <a href=\"http://www.python.org/community/sigs/current/distutils-sig/\" rel=\"nofollow\">distutils-sig@python.org</a>.</p>\n</div>\n<div id=\"requirements\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Requirements</a></h2>\n<p>Also included is the notion of a requirement set, so you can bootstrap\na complete set of packages.  This is a text file with\n<tt>easy_install</tt>able requirements, one on each line.  The file can\nalso include <tt><span class=\"pre\">-r</span> other_file</tt> and <tt><span class=\"pre\">-f</span> place_to_find_packages</tt>.\nUsing this you can provide a very specific working set of packages for\nusers/developers.  You may also use <tt><span class=\"pre\">-e</span></tt> before a requirement to\ninstall that requirement into <tt>src/</tt> in development mode.</p>\n<p>Two examples of this sense of requirements are provided,\n\u201ctg-example.txt\u201d and \u201ctg-0.9.txt\u201d.  Note that by putting this into a\nseparate file, adjusting the requirements in response to testing does\nnot require changing the requirements of any particular package.  This\nway you can give very exacting requirements, and later adjust those\nrequirements in response to upgrades, without causing instabilities in\nany one package.</p>\n</div>\n<div id=\"regenerating-environments\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Regenerating Environments</a></h2>\n<p>Environments carry around the settings they were created with (in\n<tt>.workingenv/</tt>).  This allows you to run <tt>workingenv.py\nENVIRONMENT</tt> over again to make updates, and settings will still be\npreserved.</p>\n<p>Before overwriting any files you will be asked about the changes.\nAlso you can use <tt><span class=\"pre\">--simulate</span></tt> to see what it <em>would</em> do.</p>\n</div>\n<div id=\"windows\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Windows</a></h2>\n<p>workingenv should work on Windows, but you must use <tt>activate.bat</tt>\nbefore starting scripts \u2013 they can\u2019t self-activate on Windows.</p>\n</div>\n<div id=\"zope\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Zope</a></h2>\n<p>workingenv.py <em>will</em> work with Zope 2, but you should use the \u2013home\noption (which will put everything in lib/python/ instead of\nlib/python2.4/).  The way Zope and many Zope Products are set up, they\nexpect this kind of layout.</p>\n</div>\n<div id=\"using-workingenv-programmatically\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Using workingenv Programmatically</a></h2>\n<p>You can use <tt>workingenv.main()</tt> just like the script; this is\nprobably the best/safest way to use it programmatically.  Of course\ncalling it in a subprocess will also work.</p>\n</div>\n\n          </div>"}, "last_serial": 803452, "releases": {"0.1": [], "0.2": [], "0.3": [], "0.4": [], "0.5": [], "0.6": [{"comment_text": "", "digests": {"md5": "5aeb8277c39ac13fecbcd392cac0a238", "sha256": "ee48283149be825e18334324b5d7179e87508ce6a1be00e2d20266231e9be8f5"}, "downloads": -1, "filename": "workingenv.py-0.6.tar.gz", "has_sig": false, "md5_digest": "5aeb8277c39ac13fecbcd392cac0a238", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21570, "upload_time": "2007-02-14T19:24:07", "upload_time_iso_8601": "2007-02-14T19:24:07Z", "url": "https://files.pythonhosted.org/packages/95/19/e3eb2790e3fad28734a1e987b22969f9f4818664b4db95ecbb1a8310de9e/workingenv.py-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "55aba3cc2bbf2f74dba2d4bccd371006", "sha256": "efa4d71fb9a08dd0d8d89a98c857aa749b28ecdbe372d08732991d10a621ef79"}, "downloads": -1, "filename": "workingenv.py-0.6.1.tar.gz", "has_sig": false, "md5_digest": "55aba3cc2bbf2f74dba2d4bccd371006", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22281, "upload_time": "2007-02-15T19:17:25", "upload_time_iso_8601": "2007-02-15T19:17:25Z", "url": "https://files.pythonhosted.org/packages/4e/36/a37745a7194092af7d43b8ebb2172315cd1c326f895fdb646fc9b46c3444/workingenv.py-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "45d65550cfb1f218abc37ca5ff603abb", "sha256": "678aca24c384c1a47602a2f02235bcca4c7001c20fb37499fcc61a86b9b64d22"}, "downloads": -1, "filename": "workingenv.py-0.6.2.tar.gz", "has_sig": false, "md5_digest": "45d65550cfb1f218abc37ca5ff603abb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22888, "upload_time": "2007-02-16T23:01:56", "upload_time_iso_8601": "2007-02-16T23:01:56Z", "url": "https://files.pythonhosted.org/packages/91/39/e386ae3383ca6f30fddf6882b9d28364e7ed7f2f4f5b32c23dbe7cdb1db4/workingenv.py-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "c562c422c6405a30a155f50e7c4cdb8e", "sha256": "3efef0b120aa8bcdde720b930a904c22c933f6e54ea5cc8af5a329e11e797e15"}, "downloads": -1, "filename": "workingenv.py-0.6.3.tar.gz", "has_sig": false, "md5_digest": "c562c422c6405a30a155f50e7c4cdb8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23242, "upload_time": "2007-02-19T21:53:01", "upload_time_iso_8601": "2007-02-19T21:53:01Z", "url": "https://files.pythonhosted.org/packages/6b/6f/39cf273b10f3232f5b28da736579dcfabf9f8c7cd98c8ed7a82397b4f51e/workingenv.py-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "c98237dd0429345d0f08a390fe14290a", "sha256": "290e9f1d6dda71f118985f19fda511c746e8cacb719246a52cd162096c171e96"}, "downloads": -1, "filename": "workingenv.py-0.6.4.tar.gz", "has_sig": false, "md5_digest": "c98237dd0429345d0f08a390fe14290a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24102, "upload_time": "2007-02-21T20:46:02", "upload_time_iso_8601": "2007-02-21T20:46:02Z", "url": "https://files.pythonhosted.org/packages/85/39/89eb47b65d1e03ee13914e24fbf75e09ab94dce41855115abb1b0c27e3b0/workingenv.py-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "8a0e793e7b4a2abe339b3c96b7889390", "sha256": "1e1831abc842ee9bd0748fb41a07741176438c4b7f0bebcb107013822d97cc9a"}, "downloads": -1, "filename": "workingenv.py-0.6.5.tar.gz", "has_sig": false, "md5_digest": "8a0e793e7b4a2abe339b3c96b7889390", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24454, "upload_time": "2007-04-20T17:47:46", "upload_time_iso_8601": "2007-04-20T17:47:46Z", "url": "https://files.pythonhosted.org/packages/8b/41/8b32c26756369eb06e9d8fc4f6a0cead948f248d1f53d1f2090726105a3a/workingenv.py-0.6.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a0e793e7b4a2abe339b3c96b7889390", "sha256": "1e1831abc842ee9bd0748fb41a07741176438c4b7f0bebcb107013822d97cc9a"}, "downloads": -1, "filename": "workingenv.py-0.6.5.tar.gz", "has_sig": false, "md5_digest": "8a0e793e7b4a2abe339b3c96b7889390", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24454, "upload_time": "2007-04-20T17:47:46", "upload_time_iso_8601": "2007-04-20T17:47:46Z", "url": "https://files.pythonhosted.org/packages/8b/41/8b32c26756369eb06e9d8fc4f6a0cead948f248d1f53d1f2090726105a3a/workingenv.py-0.6.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:50 2020"}