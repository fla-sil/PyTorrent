{"info": {"author": "Richard Tier", "author_email": "rikatee@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Alexa Voice Service Client\n\n[![code-climate-image]][code-climate]\n[![circle-ci-image]][circle-ci]\n[![codecov-image]][codecov]\n\n**Python Client for Alexa Voice Service (AVS)**\n\n---\n\n## Installation\n```sh\npip install alexa_client\n```\n\nor if you want to run the demos:\n\n```sh\npip install alexa_client[demo]\n```\n\n## Usage\n\n### File audio ###\n```py\nfrom alexa_client import AlexaClient\n\nclient = AlexaClient(\n    client_id='my-client-id',\n    secret='my-secret',\n    refresh_token='my-refresh-token',\n)\nclient.connect()  # authenticate and other handshaking steps\nwith open('./tests/resources/alexa_what_time_is_it.wav', 'rb') as f:\n    for i, directive in enumerate(client.send_audio_file(f)):\n        if directive.name in ['Speak', 'Play']:\n            with open(f'./output_{i}.mp3', 'wb') as f:\n                f.write(directive.audio_attachment)\n```\n\nNow listen to `output_0.wav` and Alexa should tell you the time.\n\n### Microphone audio\n\n```py\nimport io\n\nfrom alexa_client import AlexaClient\nimport pyaudio\n\n\ndef callback(in_data, frame_count, time_info, status):\n    buffer.write(in_data)\n    return (in_data, pyaudio.paContinue)\n\np = pyaudio.PyAudio()\nstream = p.open(\n    format=pyaudio.paInt16,\n    channels=1,\n    rate=16000,\n    input=True,\n    stream_callback=callback,\n)\n\nclient = AlexaClient(\n    client_id='my-client-id',\n    secret='my-secret',\n    refresh_token='my-refresh-token',\n)\n\nbuffer = io.BytesIO()\ntry:\n    stream.start_stream()\n    print('listening. Press CTRL + C to exit.')\n    client.connect()\n    for i, directive in enumerate(client.send_audio_file(buffer)):\n        if directive.name in ['Speak', 'Play']:\n            with open(f'./output_{i}.mp3', 'wb') as f:\n                f.write(directive.audio_attachment)\nfinally:\n    stream.stop_stream()\n    stream.close()\n    p.terminate()\n```\n\n### Multi-step requests\n\nAn Alexa command may relate to a previous command e.g,\n\n[you] \"Alexa, play twenty questions\"\n[Alexa] \"Is it a animal, mineral, or vegetable?\"\n[you] \"Mineral\"\n[Alexa] \"Is it valuable\"\n[you] \"No\"\n[Alexa] \"is it...\"\n\nThis can be achieved by passing the same dialog request ID to multiple `send_audio_file` calls:\n\n```py\nfrom alexa_client.alexa_client import helpers\n\ndialog_request_id = helpers.generate_unique_id()\ndirectives_one = client.send_audio_file(audio_one, dialog_request_id=dialog_request_id)\ndirectives_two = client.send_audio_file(audio_two, dialog_request_id=dialog_request_id)\ndirectives_three = client.send_audio_file(audio_three, dialog_request_id=dialog_request_id)\n\n```\n\nRun the streaming microphone audio demo to use this feature:\n\n```sh\npip install alexa_client[demo]\npython -m alexa_client.demo.streaming_microphone \\\n    --client-id=\"{enter-client-id-here}\" \\\n    --client-secret=\"{enter-client-secret-here}\" \\\n    --refresh-token=\"{enter-refresh-token-here}\"\n```\n\n### ASR Profiles\nAutomatic Speech Recognition (ASR) profiles optimized for user speech from varying distances. By default CLOSE_TALK is used but this can be specified:\n\n```\nfrom alexa_client import constants\n\nclient.send_audio_file(\n    audio_file=audio_file,\n    distance_profile=constants.NEAR_FIELD,  # or constants.FAR_FIELD\n)\n```\n\n### Audio format\n\nBy default PCM audio format is assumed, but OPUS can be specified:\n\n```\nfrom alexa_client import constants\n\nclient.send_audio_file(\n    audio_file=audio_file,\n    audio_format=constants.OPUS,\n)\n```\n\nWhen PCM format is specified the audio should be 16bit Linear PCM (LPCM16), 16kHz sample rate, single-channel, and little endian.\n\nWhen OPUS forat is specified the audio should be 16bit Opus, 16kHz sample rate, 32k bit rate, and little endian.\n\n### Base URL\n\n`base_url` can be set to improve latency. Choose a region closest to your location.\n\n```\nfrom alexa_client.alexa_client import constants\n\nclient = AlexaClient(\n    client_id='my-client-id',\n    secret='my-secret',\n    refresh_token='my-refresh-token',\n    base_url=constants.BASE_URL_ASIA\n)\n```\n\nThe default base URL is Europe. The available constants are BASE_URL_EUROPE, BASE_URL_ASIA and BASE_URL_NORTH_AMERICA but you can pass any string if required.\n\n[Read more](https://developer.amazon.com/docs/alexa-voice-service/api-overview.html#endpoints)\n\n## Authentication\n\nTo use AVS you must first have a [developer account](http://developer.amazon.com). Then register your product [here](https://developer.amazon.com/avs/home.html#/avs/products/new). Choose \"Application\" under \"Is your product an app or a device\"?\n\nThe client requires your `client_id`, `secret` and `refresh_token`:\n\n| client kwarg    | Notes |\n| --------------- | ------------------------------------- |\n| `client_id`     | Retrieve by clicking on the your product listed [here](https://developer.amazon.com/avs/home.html#/avs/home) |\n| `secret`        | Retrieve by clicking on the your product listed [here](https://developer.amazon.com/avs/home.html#/avs/home) |\n| `refresh_token` | You must generate this. [See below](#refresh-token) |\n\n### Refresh token ###\n\nYou will need to login to Amazon via a web browser to get your refresh token.\n\nTo enable this first go [here](https://developer.amazon.com/avs/home.html#/avs/home) and click on your product to set some security settings under `Security Profile`:\n\n| setting             | value                           |\n| ------------------- | --------------------------------|\n| Allowed Origins     | http://localhost:9000           |\n| Allowed Return URLs | http://localhost:9000/callback/ |\n\nNote what you entered for Product ID under Product Information, as this will be used as the device-type-id (case sensitive!)\n\nThen run:\n\n```sh\npython -m alexa_client.refreshtoken.serve \\\n    --device-type-id=\"{enter-device-type-id-here}\" \\\n    --client-id=\"{enter-client-id-here}\" \\\n    --client-secret=\"{enter-client-secret-here}\"\n```\n\nFollow the on-screen instructions shown at `http://localhost:9000` in your web browser. \nOn completion Amazon will return your `refresh_token` - which you will require to [send audio](#file-audio) or [recorded voice](#microphone-audio).\n\n## Steaming audio to AVS\n`AlexaClient.send_audio_file` streaming uploads a file-like object to AVS for great latency. The file-like object can be an actual file on your filesystem, an in-memory BytesIo buffer containing audio from your microphone, or even audio streaming from [your browser over a websocket in real-time](https://github.com/richtier/alexa-browser-client).\n\n## Persistent AVS connection\n\nCalling `AlexaClient.connect` creates a persistent connection to AVS. A thread runs that pings AVS after 4 minutes of no request being made to AVS. This prevents the connection getting forcefully closed due to inactivity.\n\n## Unit test ##\n\nTo run the unit tests, call the following commands:\n\n```sh\ngit clone git@github.com:richtier/alexa-voice-service-client.git\nmake test_requirements\npytest\n```\n\n## Other projects ##\n\nThis library is used by [alexa-browser-client](https://github.com/richtier/alexa-browser-client), which allows you to talk to Alexa from your browser.\n\n[code-climate-image]: https://codeclimate.com/github/richtier/alexa-voice-service-client/badges/gpa.svg\n[code-climate]: https://codeclimate.com/github/richtier/alexa-voice-service-client\n\n[circle-ci-image]: https://circleci.com/gh/richtier/alexa-voice-service-client/tree/master.svg?style=svg\n[circle-ci]: https://circleci.com/gh/richtier/alexa-voice-service-client/tree/master\n\n[codecov-image]: https://codecov.io/gh/richtier/alexa-voice-service-client/branch/master/graph/badge.svg\n[codecov]: https://codecov.io/gh/richtier/alexa-voice-service-client\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/richtier/alexa-voice-service-client", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "alexa-client", "package_url": "https://pypi.org/project/alexa-client/", "platform": "", "project_url": "https://pypi.org/project/alexa-client/", "project_urls": {"Homepage": "https://github.com/richtier/alexa-voice-service-client"}, "release_url": "https://pypi.org/project/alexa-client/1.5.1/", "requires_dist": ["hyper (>=0.7.0<1.0.0)", "requests-toolbelt (>=0.8.0<1.0.0)", "requests (>=2.19.1<3.0.0)", "resettabletimer (<1.0.0,>=0.6.3)", "pydub (<1.0.0,>=0.23.0) ; extra == 'demo'", "pyaudio (<1.0.0,>=0.2.11) ; extra == 'demo'", "flake8 (==3.4.0) ; extra == 'test'", "freezegun (==0.3.9) ; extra == 'test'", "pytest-cov (==2.5.1) ; extra == 'test'", "pytest-sugar (==0.9.0) ; extra == 'test'", "pytest (==3.2.0) ; extra == 'test'", "requests-mock (==1.3.0) ; extra == 'test'", "codecov (==2.0.9) ; extra == 'test'", "twine (<2.0.0,>=1.11.0) ; extra == 'test'", "wheel (<1.0.0,>=0.31.0) ; extra == 'test'", "setuptools (<39.0.0,>=38.6.0) ; extra == 'test'"], "requires_python": "", "summary": "Python Client for Alexa Voice Service (AVS)", "version": "1.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Alexa Voice Service Client</h1>\n<p><a href=\"https://codeclimate.com/github/richtier/alexa-voice-service-client\" rel=\"nofollow\"><img alt=\"code-climate-image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15819249fc76f44d68c9808ed0c174daea49e6c8/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f72696368746965722f616c6578612d766f6963652d736572766963652d636c69656e742f6261646765732f6770612e737667\"></a>\n<a href=\"https://circleci.com/gh/richtier/alexa-voice-service-client/tree/master\" rel=\"nofollow\"><img alt=\"circle-ci-image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8cb38b2afbdb72c3036c5f669a3d17a6d61d78b/68747470733a2f2f636972636c6563692e636f6d2f67682f72696368746965722f616c6578612d766f6963652d736572766963652d636c69656e742f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/richtier/alexa-voice-service-client\" rel=\"nofollow\"><img alt=\"codecov-image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6f3b68396287585f2db6a23f61b1e3e3167b899/68747470733a2f2f636f6465636f762e696f2f67682f72696368746965722f616c6578612d766f6963652d736572766963652d636c69656e742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p><strong>Python Client for Alexa Voice Service (AVS)</strong></p>\n<hr>\n<h2>Installation</h2>\n<pre>pip install alexa_client\n</pre>\n<p>or if you want to run the demos:</p>\n<pre>pip install alexa_client<span class=\"o\">[</span>demo<span class=\"o\">]</span>\n</pre>\n<h2>Usage</h2>\n<h3>File audio</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">alexa_client</span> <span class=\"kn\">import</span> <span class=\"n\">AlexaClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AlexaClient</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'my-client-id'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret</span><span class=\"o\">=</span><span class=\"s1\">'my-secret'</span><span class=\"p\">,</span>\n    <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'my-refresh-token'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>  <span class=\"c1\"># authenticate and other handshaking steps</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./tests/resources/alexa_what_time_is_it.wav'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">directive</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_audio_file</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">directive</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'Speak'</span><span class=\"p\">,</span> <span class=\"s1\">'Play'</span><span class=\"p\">]:</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'./output_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">.mp3'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">directive</span><span class=\"o\">.</span><span class=\"n\">audio_attachment</span><span class=\"p\">)</span>\n</pre>\n<p>Now listen to <code>output_0.wav</code> and Alexa should tell you the time.</p>\n<h3>Microphone audio</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">alexa_client</span> <span class=\"kn\">import</span> <span class=\"n\">AlexaClient</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyaudio</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">in_data</span><span class=\"p\">,</span> <span class=\"n\">frame_count</span><span class=\"p\">,</span> <span class=\"n\">time_info</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">):</span>\n    <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">in_data</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">in_data</span><span class=\"p\">,</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">paContinue</span><span class=\"p\">)</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PyAudio</span><span class=\"p\">()</span>\n<span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">paInt16</span><span class=\"p\">,</span>\n    <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mi\">16000</span><span class=\"p\">,</span>\n    <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">stream_callback</span><span class=\"o\">=</span><span class=\"n\">callback</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AlexaClient</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'my-client-id'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret</span><span class=\"o\">=</span><span class=\"s1\">'my-secret'</span><span class=\"p\">,</span>\n    <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'my-refresh-token'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">start_stream</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'listening. Press CTRL + C to exit.'</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">directive</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_audio_file</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">directive</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'Speak'</span><span class=\"p\">,</span> <span class=\"s1\">'Play'</span><span class=\"p\">]:</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'./output_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">.mp3'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">directive</span><span class=\"o\">.</span><span class=\"n\">audio_attachment</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">stop_stream</span><span class=\"p\">()</span>\n    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n</pre>\n<h3>Multi-step requests</h3>\n<p>An Alexa command may relate to a previous command e.g,</p>\n<p>[you] \"Alexa, play twenty questions\"\n[Alexa] \"Is it a animal, mineral, or vegetable?\"\n[you] \"Mineral\"\n[Alexa] \"Is it valuable\"\n[you] \"No\"\n[Alexa] \"is it...\"</p>\n<p>This can be achieved by passing the same dialog request ID to multiple <code>send_audio_file</code> calls:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">alexa_client.alexa_client</span> <span class=\"kn\">import</span> <span class=\"n\">helpers</span>\n\n<span class=\"n\">dialog_request_id</span> <span class=\"o\">=</span> <span class=\"n\">helpers</span><span class=\"o\">.</span><span class=\"n\">generate_unique_id</span><span class=\"p\">()</span>\n<span class=\"n\">directives_one</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_audio_file</span><span class=\"p\">(</span><span class=\"n\">audio_one</span><span class=\"p\">,</span> <span class=\"n\">dialog_request_id</span><span class=\"o\">=</span><span class=\"n\">dialog_request_id</span><span class=\"p\">)</span>\n<span class=\"n\">directives_two</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_audio_file</span><span class=\"p\">(</span><span class=\"n\">audio_two</span><span class=\"p\">,</span> <span class=\"n\">dialog_request_id</span><span class=\"o\">=</span><span class=\"n\">dialog_request_id</span><span class=\"p\">)</span>\n<span class=\"n\">directives_three</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_audio_file</span><span class=\"p\">(</span><span class=\"n\">audio_three</span><span class=\"p\">,</span> <span class=\"n\">dialog_request_id</span><span class=\"o\">=</span><span class=\"n\">dialog_request_id</span><span class=\"p\">)</span>\n</pre>\n<p>Run the streaming microphone audio demo to use this feature:</p>\n<pre>pip install alexa_client<span class=\"o\">[</span>demo<span class=\"o\">]</span>\npython -m alexa_client.demo.streaming_microphone <span class=\"se\">\\</span>\n    --client-id<span class=\"o\">=</span><span class=\"s2\">\"{enter-client-id-here}\"</span> <span class=\"se\">\\</span>\n    --client-secret<span class=\"o\">=</span><span class=\"s2\">\"{enter-client-secret-here}\"</span> <span class=\"se\">\\</span>\n    --refresh-token<span class=\"o\">=</span><span class=\"s2\">\"{enter-refresh-token-here}\"</span>\n</pre>\n<h3>ASR Profiles</h3>\n<p>Automatic Speech Recognition (ASR) profiles optimized for user speech from varying distances. By default CLOSE_TALK is used but this can be specified:</p>\n<pre><code>from alexa_client import constants\n\nclient.send_audio_file(\n    audio_file=audio_file,\n    distance_profile=constants.NEAR_FIELD,  # or constants.FAR_FIELD\n)\n</code></pre>\n<h3>Audio format</h3>\n<p>By default PCM audio format is assumed, but OPUS can be specified:</p>\n<pre><code>from alexa_client import constants\n\nclient.send_audio_file(\n    audio_file=audio_file,\n    audio_format=constants.OPUS,\n)\n</code></pre>\n<p>When PCM format is specified the audio should be 16bit Linear PCM (LPCM16), 16kHz sample rate, single-channel, and little endian.</p>\n<p>When OPUS forat is specified the audio should be 16bit Opus, 16kHz sample rate, 32k bit rate, and little endian.</p>\n<h3>Base URL</h3>\n<p><code>base_url</code> can be set to improve latency. Choose a region closest to your location.</p>\n<pre><code>from alexa_client.alexa_client import constants\n\nclient = AlexaClient(\n    client_id='my-client-id',\n    secret='my-secret',\n    refresh_token='my-refresh-token',\n    base_url=constants.BASE_URL_ASIA\n)\n</code></pre>\n<p>The default base URL is Europe. The available constants are BASE_URL_EUROPE, BASE_URL_ASIA and BASE_URL_NORTH_AMERICA but you can pass any string if required.</p>\n<p><a href=\"https://developer.amazon.com/docs/alexa-voice-service/api-overview.html#endpoints\" rel=\"nofollow\">Read more</a></p>\n<h2>Authentication</h2>\n<p>To use AVS you must first have a <a href=\"http://developer.amazon.com\" rel=\"nofollow\">developer account</a>. Then register your product <a href=\"https://developer.amazon.com/avs/home.html#/avs/products/new\" rel=\"nofollow\">here</a>. Choose \"Application\" under \"Is your product an app or a device\"?</p>\n<p>The client requires your <code>client_id</code>, <code>secret</code> and <code>refresh_token</code>:</p>\n<table>\n<thead>\n<tr>\n<th>client kwarg</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>client_id</code></td>\n<td>Retrieve by clicking on the your product listed <a href=\"https://developer.amazon.com/avs/home.html#/avs/home\" rel=\"nofollow\">here</a></td>\n</tr>\n<tr>\n<td><code>secret</code></td>\n<td>Retrieve by clicking on the your product listed <a href=\"https://developer.amazon.com/avs/home.html#/avs/home\" rel=\"nofollow\">here</a></td>\n</tr>\n<tr>\n<td><code>refresh_token</code></td>\n<td>You must generate this. <a href=\"#refresh-token\" rel=\"nofollow\">See below</a></td>\n</tr></tbody></table>\n<h3>Refresh token</h3>\n<p>You will need to login to Amazon via a web browser to get your refresh token.</p>\n<p>To enable this first go <a href=\"https://developer.amazon.com/avs/home.html#/avs/home\" rel=\"nofollow\">here</a> and click on your product to set some security settings under <code>Security Profile</code>:</p>\n<table>\n<thead>\n<tr>\n<th>setting</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Allowed Origins</td>\n<td><a href=\"http://localhost:9000\" rel=\"nofollow\">http://localhost:9000</a></td>\n</tr>\n<tr>\n<td>Allowed Return URLs</td>\n<td><a href=\"http://localhost:9000/callback/\" rel=\"nofollow\">http://localhost:9000/callback/</a></td>\n</tr></tbody></table>\n<p>Note what you entered for Product ID under Product Information, as this will be used as the device-type-id (case sensitive!)</p>\n<p>Then run:</p>\n<pre>python -m alexa_client.refreshtoken.serve <span class=\"se\">\\</span>\n    --device-type-id<span class=\"o\">=</span><span class=\"s2\">\"{enter-device-type-id-here}\"</span> <span class=\"se\">\\</span>\n    --client-id<span class=\"o\">=</span><span class=\"s2\">\"{enter-client-id-here}\"</span> <span class=\"se\">\\</span>\n    --client-secret<span class=\"o\">=</span><span class=\"s2\">\"{enter-client-secret-here}\"</span>\n</pre>\n<p>Follow the on-screen instructions shown at <code>http://localhost:9000</code> in your web browser.\nOn completion Amazon will return your <code>refresh_token</code> - which you will require to <a href=\"#file-audio\" rel=\"nofollow\">send audio</a> or <a href=\"#microphone-audio\" rel=\"nofollow\">recorded voice</a>.</p>\n<h2>Steaming audio to AVS</h2>\n<p><code>AlexaClient.send_audio_file</code> streaming uploads a file-like object to AVS for great latency. The file-like object can be an actual file on your filesystem, an in-memory BytesIo buffer containing audio from your microphone, or even audio streaming from <a href=\"https://github.com/richtier/alexa-browser-client\" rel=\"nofollow\">your browser over a websocket in real-time</a>.</p>\n<h2>Persistent AVS connection</h2>\n<p>Calling <code>AlexaClient.connect</code> creates a persistent connection to AVS. A thread runs that pings AVS after 4 minutes of no request being made to AVS. This prevents the connection getting forcefully closed due to inactivity.</p>\n<h2>Unit test</h2>\n<p>To run the unit tests, call the following commands:</p>\n<pre>git clone git@github.com:richtier/alexa-voice-service-client.git\nmake test_requirements\npytest\n</pre>\n<h2>Other projects</h2>\n<p>This library is used by <a href=\"https://github.com/richtier/alexa-browser-client\" rel=\"nofollow\">alexa-browser-client</a>, which allows you to talk to Alexa from your browser.</p>\n\n          </div>"}, "last_serial": 6443013, "releases": {"1.3.0": [{"comment_text": "", "digests": {"md5": "6745dc52fd20e16fbf43fdebddfec62c", "sha256": "45928863a013f0d6265caa7c8d24d14b1a7a9a0771636ee9e689ca03f471bbfd"}, "downloads": -1, "filename": "alexa_client-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6745dc52fd20e16fbf43fdebddfec62c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14922, "upload_time": "2019-01-17T19:42:56", "upload_time_iso_8601": "2019-01-17T19:42:56.638923Z", "url": "https://files.pythonhosted.org/packages/87/21/e02ac0b7a01adaf3371c742976411de59650fb848aa7c90a1fc95a855083/alexa_client-1.3.0-py3-none-any.whl", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "daead45a11637360207a8a228763bbcf", "sha256": "b286b91361dcaa61589686f60c22971a216a0d49588ca6afda452d4302a39a72"}, "downloads": -1, "filename": "alexa_client-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "daead45a11637360207a8a228763bbcf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15597, "upload_time": "2019-02-03T21:23:15", "upload_time_iso_8601": "2019-02-03T21:23:15.850440Z", "url": "https://files.pythonhosted.org/packages/21/f8/ddd0f6e02fd88e69bdd55745fc55c56f72622b9497a115fc9efab69a5f4e/alexa_client-1.4.0-py3-none-any.whl", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "6bda4e864ec5f584e44adf7e4241ce68", "sha256": "da74f5f353d208f92735e508d5fe648b0db885f5ad986eab8e4c6c2dcba4f0fe"}, "downloads": -1, "filename": "alexa_client-1.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6bda4e864ec5f584e44adf7e4241ce68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15590, "upload_time": "2019-10-28T07:03:11", "upload_time_iso_8601": "2019-10-28T07:03:11.146226Z", "url": "https://files.pythonhosted.org/packages/53/98/472bcf900b9098cf5b7ec350ea6d6db67fbdb08524fcd964229341f5c94b/alexa_client-1.4.1-py3-none-any.whl", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "a79c02a910f0f54033ee463a3f8c8767", "sha256": "4e6c0db0639fe7539f45ea5e0d80c3c90edb55c4fef668f0a07844052591b438"}, "downloads": -1, "filename": "alexa_client-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a79c02a910f0f54033ee463a3f8c8767", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15946, "upload_time": "2019-11-26T08:41:05", "upload_time_iso_8601": "2019-11-26T08:41:05.384179Z", "url": "https://files.pythonhosted.org/packages/a4/d8/2f31aec299a10b0a443ddd1e7904693ddc5388b2b4b9d5ddbefdadda78f1/alexa_client-1.5.0-py3-none-any.whl", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "e6d3c5a25874e71c3c1b55aeacbc7def", "sha256": "3923647b71f85edc981b21289aa4f7438d2d368b113172946a3db0bd898287e6"}, "downloads": -1, "filename": "alexa_client-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e6d3c5a25874e71c3c1b55aeacbc7def", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15957, "upload_time": "2020-01-13T08:09:04", "upload_time_iso_8601": "2020-01-13T08:09:04.038303Z", "url": "https://files.pythonhosted.org/packages/08/e4/3b135b457e278fc34d9c35e208b0d961cf5d416727305905e5f4ee1e9fa1/alexa_client-1.5.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e6d3c5a25874e71c3c1b55aeacbc7def", "sha256": "3923647b71f85edc981b21289aa4f7438d2d368b113172946a3db0bd898287e6"}, "downloads": -1, "filename": "alexa_client-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e6d3c5a25874e71c3c1b55aeacbc7def", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15957, "upload_time": "2020-01-13T08:09:04", "upload_time_iso_8601": "2020-01-13T08:09:04.038303Z", "url": "https://files.pythonhosted.org/packages/08/e4/3b135b457e278fc34d9c35e208b0d961cf5d416727305905e5f4ee1e9fa1/alexa_client-1.5.1-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:19:55 2020"}