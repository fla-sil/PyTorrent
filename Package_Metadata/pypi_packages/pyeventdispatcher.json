{"info": {"author": "Daniel Ancuta", "author_email": "whisller@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": "PyEventDispatcher\n---\n| master  | develop | PyPI | Python | Licence |\n| --- | --- | --- | --- | --- |\n| [![Build Status](https://travis-ci.org/whisller/pyeventdispatcher.svg?branch=master)](https://travis-ci.org/whisller/pyeventdispatcher)  | [![Build Status](https://travis-ci.org/whisller/pyeventdispatcher.svg?branch=develop)](https://travis-ci.org/whisller/pyeventdispatcher)  | [![PyPI](https://img.shields.io/pypi/v/pyeventdispatcher.svg)](https://pypi.org/project/pyeventdispatcher/) | ![](https://img.shields.io/pypi/pyversions/pyeventdispatcher.svg) | ![](https://img.shields.io/pypi/l/pyeventdispatcher.svg) |\n\n---\n\nPyEventDispatcher allows your application components to communicate with each\nother by sending events and listening to them.\nInspiration for this library was Symfony's [event-dispatcher](https://symfony.com/doc/current/components/event_dispatcher.html) component.\n\n## Disclaimer\nLibrary is in very early stage of development. A lot of things can change or might not work as expected, which includes breaking changes.\n\n## Easiest example\n```python\nfrom pyeventdispatcher import dispatch, Event, register\n\nregister(\"foo.bar\", lambda event: print(f\"{event.name}::{event.data}\"))\ndispatch(Event(\"foo.bar\", \"some data\"))\n# foo.bar::some data\n```\n\n## Installation\n```bash\npip install pyeventdispatcher\n```\n\n## Listeners\nAny [callable](https://docs.python.org/3/library/functions.html#callable) can be registered as listener,\nthe only requirements is that it takes one parameter, `event`.\n\nBelow function is simplest example of listener you can define:\n```python\ndef my_listener(event):\n    print(event.name)\n```\n\n## Registering global listener\nThere is several ways of registering your global listener, you can mix styles or keep one across whole application.\n\n### `register` function\n```python\nfrom pyeventdispatcher import register\n\ndef my_func(event):\n    print(event.name)\n\nregister(\"foo.bar\", my_func)\nregister(\"bar.foo\", my_func, -100)\n```\n\n### `listen` decorator\n```python\nfrom pyeventdispatcher import listen\n\n@listen(\"foo.bar\", (\"bar.foo\", -100))\ndef my_func(event):\n    print(event.name)\n```\n\n### By extending `EventSubscriber` class\n```python\nfrom pyeventdispatcher import EventSubscriber, register_event_subscribers\n\nclass MySubscriber(EventSubscriber):\n    EVENTS = {\"foo.bar\": \"execute_one\", \"bar.foo\": (\"execute_two\", -100)}\n\n    @staticmethod\n    def execute_one(event):\n        print(event.name)\n\n    @staticmethod\n    def execute_two(event):\n        print(event.name)\n\nregister_event_subscribers() # Register your classes\n```\n\n## Local listeners\nIn most of the cases your application will only need one global registration of listeners that is used across\nwhole application.\n\nBuf if you need, you can initialise as many instances of EventDispatcher as you wish. Everyone of them will have\nlocal registry of listeners.\n\n```python\nfrom pyeventdispatcher import EventDispatcher, register\n\n# Register listener in  global registry\nregister(\"foo.bar\", lambda event: print(\"global listener\"))\n\n# Initialise instances of local EventDispatcher\npy_event_dispatcher_1 = EventDispatcher()\npy_event_dispatcher_1.register(\"foo.bar\", lambda event: print(\"event dispatcher 1\"))\n\npy_event_dispatcher_2 = EventDispatcher()\npy_event_dispatcher_2.register(\"foo.bar\", lambda event: print(\"event dispatcher 2\"))\n```\n\n## Registering listeners with execution priority\nListeners are executed in order of priority parameter's value, which by default is set to \"0\".\n\nYou can change priority of registered listener to define in which order it will be executed.\n\n```python\nfrom pyeventdispatcher import register\n\nregister(\"foo.bar\", lambda event: print(\"second\"))\nregister(\"foo.bar\", lambda event: print(\"first \"), -100)\n# first second\n```\n\n## Dispatching an event\nWhen you dispatch your event, every registered listener that listens for occurrence of specified event,\nwill be called with event object as parameter.\n\n### Dispatching global event\n```python\nfrom pyeventdispatcher import dispatch, Event, register\n\nregister(\"foo.bar\", lambda event: print(event.name))\n\ndispatch(Event(\"foo.bar\", {\"id\": 1}))\n```\n\n### Dispatching local event\n```python\nfrom pyeventdispatcher import EventDispatcher, Event, register\n\nregister(\"foo.bar\", lambda event: print(f\"{event.name}::global\"))\n\n# Initialise separated instance\npy_event_dispatcher = EventDispatcher()\npy_event_dispatcher.register(\"foo.bar\", lambda event: print(f\"{event.name}::local\"))\n\n# Dispatch event to both global and local listeners\npy_event_dispatcher.dispatch(Event(\"foo.bar\"))\n# foo.bar::global\n# foo.bar::local\n\n# Dispatch event to local listeners only\npy_event_dispatcher.dispatch(Event(\"foo.bar\"), False)\n# foo.bar::local\n```\n\n## Stopping propagation\nSometimes you might want to stop propagation of event, for that you just have to set `event.stop` to `True`,\n\nIn example below only `first_listener` will be executed.\n\n```python\nfrom pyeventdispatcher import register\n\ndef first_listener(event):\n    event.stop = True\n    print(\"first_listener\")\n\ndef second_listener(event):\n    print(\"first_listener\")\n\nregister(\"foo.bar\", first_listener)\nregister(\"foo.bar\", second_listener)\n# first_listener\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/whisller/pyeventdispatcher", "keywords": "event dispatcher event-dispatcher", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyeventdispatcher", "package_url": "https://pypi.org/project/pyeventdispatcher/", "platform": "", "project_url": "https://pypi.org/project/pyeventdispatcher/", "project_urls": {"Homepage": "https://github.com/whisller/pyeventdispatcher"}, "release_url": "https://pypi.org/project/pyeventdispatcher/0.2.3a0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Your application components can communicate by sending and listening to events.", "version": "0.2.3a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>PyEventDispatcher</h2>\n<table>\n<thead>\n<tr>\n<th>master</th>\n<th>develop</th>\n<th>PyPI</th>\n<th>Python</th>\n<th>Licence</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://travis-ci.org/whisller/pyeventdispatcher\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78d44bb8e3812150fdb8fdb09ca1153a4cf83b4d/68747470733a2f2f7472617669732d63692e6f72672f776869736c6c65722f70796576656e74646973706174636865722e7376673f6272616e63683d6d6173746572\"></a></td>\n<td><a href=\"https://travis-ci.org/whisller/pyeventdispatcher\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47396c192b12bf87edcdb31e376111926ec59ed8/68747470733a2f2f7472617669732d63692e6f72672f776869736c6c65722f70796576656e74646973706174636865722e7376673f6272616e63683d646576656c6f70\"></a></td>\n<td><a href=\"https://pypi.org/project/pyeventdispatcher/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9c99f73702ba402078ee29095b96096343d73fd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796576656e74646973706174636865722e737667\"></a></td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1042f7173d44f52c3df90cd2974c1437cc613a7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70796576656e74646973706174636865722e737667\"></td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b9ec358c2888138e1ac704fa49b68bfa0c56ef8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f70796576656e74646973706174636865722e737667\"></td>\n</tr></tbody></table>\n<hr>\n<p>PyEventDispatcher allows your application components to communicate with each\nother by sending events and listening to them.\nInspiration for this library was Symfony's <a href=\"https://symfony.com/doc/current/components/event_dispatcher.html\" rel=\"nofollow\">event-dispatcher</a> component.</p>\n<h2>Disclaimer</h2>\n<p>Library is in very early stage of development. A lot of things can change or might not work as expected, which includes breaking changes.</p>\n<h2>Easiest example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span><span class=\"p\">,</span> <span class=\"n\">Event</span><span class=\"p\">,</span> <span class=\"n\">register</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">::</span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">))</span>\n<span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">Event</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"s2\">\"some data\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># foo.bar::some data</span>\n</pre>\n<h2>Installation</h2>\n<pre>pip install pyeventdispatcher\n</pre>\n<h2>Listeners</h2>\n<p>Any <a href=\"https://docs.python.org/3/library/functions.html#callable\" rel=\"nofollow\">callable</a> can be registered as listener,\nthe only requirements is that it takes one parameter, <code>event</code>.</p>\n<p>Below function is simplest example of listener you can define:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">my_listener</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<h2>Registering global listener</h2>\n<p>There is several ways of registering your global listener, you can mix styles or keep one across whole application.</p>\n<h3><code>register</code> function</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"n\">my_func</span><span class=\"p\">)</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"bar.foo\"</span><span class=\"p\">,</span> <span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<h3><code>listen</code> decorator</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">listen</span>\n\n<span class=\"nd\">@listen</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"bar.foo\"</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<h3>By extending <code>EventSubscriber</code> class</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">EventSubscriber</span><span class=\"p\">,</span> <span class=\"n\">register_event_subscribers</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MySubscriber</span><span class=\"p\">(</span><span class=\"n\">EventSubscriber</span><span class=\"p\">):</span>\n    <span class=\"n\">EVENTS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">:</span> <span class=\"s2\">\"execute_one\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar.foo\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"execute_two\"</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">)}</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">execute_one</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">execute_two</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"n\">register_event_subscribers</span><span class=\"p\">()</span> <span class=\"c1\"># Register your classes</span>\n</pre>\n<h2>Local listeners</h2>\n<p>In most of the cases your application will only need one global registration of listeners that is used across\nwhole application.</p>\n<p>Buf if you need, you can initialise as many instances of EventDispatcher as you wish. Everyone of them will have\nlocal registry of listeners.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">EventDispatcher</span><span class=\"p\">,</span> <span class=\"n\">register</span>\n\n<span class=\"c1\"># Register listener in  global registry</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"global listener\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Initialise instances of local EventDispatcher</span>\n<span class=\"n\">py_event_dispatcher_1</span> <span class=\"o\">=</span> <span class=\"n\">EventDispatcher</span><span class=\"p\">()</span>\n<span class=\"n\">py_event_dispatcher_1</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"event dispatcher 1\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">py_event_dispatcher_2</span> <span class=\"o\">=</span> <span class=\"n\">EventDispatcher</span><span class=\"p\">()</span>\n<span class=\"n\">py_event_dispatcher_2</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"event dispatcher 2\"</span><span class=\"p\">))</span>\n</pre>\n<h2>Registering listeners with execution priority</h2>\n<p>Listeners are executed in order of priority parameter's value, which by default is set to \"0\".</p>\n<p>You can change priority of registered listener to define in which order it will be executed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"second\"</span><span class=\"p\">))</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"first \"</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"c1\"># first second</span>\n</pre>\n<h2>Dispatching an event</h2>\n<p>When you dispatch your event, every registered listener that listens for occurrence of specified event,\nwill be called with event object as parameter.</p>\n<h3>Dispatching global event</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span><span class=\"p\">,</span> <span class=\"n\">Event</span><span class=\"p\">,</span> <span class=\"n\">register</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n<span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">Event</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}))</span>\n</pre>\n<h3>Dispatching local event</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">EventDispatcher</span><span class=\"p\">,</span> <span class=\"n\">Event</span><span class=\"p\">,</span> <span class=\"n\">register</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">::global\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Initialise separated instance</span>\n<span class=\"n\">py_event_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">EventDispatcher</span><span class=\"p\">()</span>\n<span class=\"n\">py_event_dispatcher</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">::local\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Dispatch event to both global and local listeners</span>\n<span class=\"n\">py_event_dispatcher</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">Event</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># foo.bar::global</span>\n<span class=\"c1\"># foo.bar::local</span>\n\n<span class=\"c1\"># Dispatch event to local listeners only</span>\n<span class=\"n\">py_event_dispatcher</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">Event</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># foo.bar::local</span>\n</pre>\n<h2>Stopping propagation</h2>\n<p>Sometimes you might want to stop propagation of event, for that you just have to set <code>event.stop</code> to <code>True</code>,</p>\n<p>In example below only <code>first_listener</code> will be executed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyeventdispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">register</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">first_listener</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"first_listener\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">second_listener</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"first_listener\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"n\">first_listener</span><span class=\"p\">)</span>\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span> <span class=\"n\">second_listener</span><span class=\"p\">)</span>\n<span class=\"c1\"># first_listener</span>\n</pre>\n\n          </div>"}, "last_serial": 4613541, "releases": {"0.1.0a0": [{"comment_text": "", "digests": {"md5": "ff9fab1156d7055c7657d7d1d01bd1e1", "sha256": "900a7e1daeee5edfb929d91c48aded6dfef03f182118be5830499ef0cef3d525"}, "downloads": -1, "filename": "pyeventdispatcher-0.1.0a0.tar.gz", "has_sig": false, "md5_digest": "ff9fab1156d7055c7657d7d1d01bd1e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6299, "upload_time": "2018-12-16T21:58:45", "upload_time_iso_8601": "2018-12-16T21:58:45.332432Z", "url": "https://files.pythonhosted.org/packages/6a/9c/92453652b593a5060e1d2d2361b3e97f62a834be9171074e811232882da5/pyeventdispatcher-0.1.0a0.tar.gz", "yanked": false}], "0.2.0a0": [{"comment_text": "", "digests": {"md5": "9d9a41096da228b3eda6a508e2e61263", "sha256": "e39507765822ea0fb492f3c501032bdff0ee49fda105fe58c9e368db5853d7eb"}, "downloads": -1, "filename": "pyeventdispatcher-0.2.0a0.tar.gz", "has_sig": false, "md5_digest": "9d9a41096da228b3eda6a508e2e61263", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6970, "upload_time": "2018-12-18T18:57:27", "upload_time_iso_8601": "2018-12-18T18:57:27.038131Z", "url": "https://files.pythonhosted.org/packages/43/24/ab0079d02c00d9420a1d851c9cf357e012f23667761e5e5dbfa706a1acae/pyeventdispatcher-0.2.0a0.tar.gz", "yanked": false}], "0.2.1a0": [{"comment_text": "", "digests": {"md5": "a650a173b4731c1e6b327b5ba4a1957b", "sha256": "80b956e4d4c79d6ac73e11e94554ca668643b0fe4930c8d47db37efaf6f7cb34"}, "downloads": -1, "filename": "pyeventdispatcher-0.2.1a0.tar.gz", "has_sig": false, "md5_digest": "a650a173b4731c1e6b327b5ba4a1957b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6957, "upload_time": "2018-12-18T19:07:18", "upload_time_iso_8601": "2018-12-18T19:07:18.509405Z", "url": "https://files.pythonhosted.org/packages/ca/16/b97d3e37f08f1e2e1091d79f370d49072115196156e9e4b2c3ab39a8909a/pyeventdispatcher-0.2.1a0.tar.gz", "yanked": false}], "0.2.2a0": [{"comment_text": "", "digests": {"md5": "a81b89b2d74e6b4e1c1b84e72b71c483", "sha256": "3b95065d44ecc9d353a721bf8f2396090cbc72126dcf719e8d29afedf1bb192f"}, "downloads": -1, "filename": "pyeventdispatcher-0.2.2a0.tar.gz", "has_sig": false, "md5_digest": "a81b89b2d74e6b4e1c1b84e72b71c483", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6958, "upload_time": "2018-12-18T19:20:39", "upload_time_iso_8601": "2018-12-18T19:20:39.784288Z", "url": "https://files.pythonhosted.org/packages/22/cb/5413fea472dc73643fe02c367e601ba897269122a51227de5df07099755b/pyeventdispatcher-0.2.2a0.tar.gz", "yanked": false}], "0.2.3a0": [{"comment_text": "", "digests": {"md5": "f60cde1ee29a53fe31d87720abc67bbd", "sha256": "902830665bde2248d60c8dcf78d2e2fdfc34d9642e757ace8ff6f6143855aad7"}, "downloads": -1, "filename": "pyeventdispatcher-0.2.3a0-py3-none-any.whl", "has_sig": false, "md5_digest": "f60cde1ee29a53fe31d87720abc67bbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6562, "upload_time": "2018-12-18T19:41:53", "upload_time_iso_8601": "2018-12-18T19:41:53.570020Z", "url": "https://files.pythonhosted.org/packages/23/97/85b1eb12fe401afd03a9629a788ae6198b73ede682caef316142faab7bb1/pyeventdispatcher-0.2.3a0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f60cde1ee29a53fe31d87720abc67bbd", "sha256": "902830665bde2248d60c8dcf78d2e2fdfc34d9642e757ace8ff6f6143855aad7"}, "downloads": -1, "filename": "pyeventdispatcher-0.2.3a0-py3-none-any.whl", "has_sig": false, "md5_digest": "f60cde1ee29a53fe31d87720abc67bbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6562, "upload_time": "2018-12-18T19:41:53", "upload_time_iso_8601": "2018-12-18T19:41:53.570020Z", "url": "https://files.pythonhosted.org/packages/23/97/85b1eb12fe401afd03a9629a788ae6198b73ede682caef316142faab7bb1/pyeventdispatcher-0.2.3a0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:06:14 2020"}