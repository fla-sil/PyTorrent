{"info": {"author": "Oben Sonne", "author_email": "obensonne@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "percache\n========\n\n*percache* is a Python module to persistently cache results of functions\n(or callables in general) using decorators.\n\nIt is somehow similar to the [Memoize\nExample](http://wiki.python.org/moin/PythonDecoratorLibrary#Memoize)\nfrom the Python Decorator Library but with the advantage that results\nare stored *persistently* in a cache. *percache* provides memoization\nacross multiple invocations of the Python interpreter.\n\n*percache* requires Python 3. Install with `pip install percache`. It\nhas no dependencies outside the standard library.\n\n[![image](https://builds.sr.ht/~obensonne/percache.svg?search=0.4.4)](https://builds.sr.ht/~obensonne/percache?search=0.4.4)\n\nExample\n-------\n\n    >>> import percache\n    >>> cache = percache.Cache(\"/tmp/my-cache\")\n    >>>\n    >>> @cache\n    ... def longtask(a, b):\n    ...     print(\"running a long task\")\n    ...     return a + b\n    ...\n    >>> longtask(1, 2)\n    running a long task\n    3\n    >>>\n    >>> longtask(1, 2)\n    3\n    >>> cache.close() # writes new cached results to disk\n\nAs you can see at the missing output after the second invocation,\n`longtask` has been called once only. The second time the result is\nretrieved from the cache. *The key feature of this module is that this\nworks across multiple invocations of the Python interpreter.*\n\nA requirement on the results to cache is that they are\n[pickable](http://docs.python.org/library/pickle.html#what-can-be-pickled-and-unpickled).\n\nEach cache file can be used for any number of differently named\ncallables.\n\n### Alternative back-ends and live synchronization\n\nBy default *percache* uses a\n[shelve](http://docs.python.org/library/shelve.html) as its cache\nback-end. Alternative back-ends may be used if they are given as\ndictionary-like objects with a `close()` and `sync()` method:\n\n```python\n>>> class FooCache(dict):\n...     def sync(self):\n...         ...\n...     def close(self):\n...         ...\n>>> fc = FooCache()\n>>> cache = percache.Cache(fc, livesync=True)\n```\n\nIn this example a cache is created in live-sync mode, i.e. results\n*immediately* are stored permanently. Normally this happens not until a\ncache's `close()` method has been called or until it gets\n[finalized](). Note that the live-sync mode may slow down your\npercache-decorated functions (though it reduces the risk of \"loosing\"\nresults).\n\nCaching details (you should know)\n---------------------------------\n\nWhen caching the result of a callable, a SHA1 hash based on the\ncallable's name and arguments is used as a key to store the result in\nthe cache file.\n\nThe hash calculation does not work directly with the arguments but with\ntheir *representations*, i.e. the string returned by applying `repr()`.\nArgument representations are supposed to differentiate values\nsufficiently for the purpose of the function but identically across\nmultiple invocations of the Python interpreter. By default the built-in\nfunction `repr()` is used to get argument representations. This is just\nperfect for basic types, lists, tuples and combinations of them but it\nmay fail on other types:\n\n```python\n>>> repr(42)\n42                                  # good\n>>> repr([\"a\", \"b\", (1, 2L)])\n\"['a', 'b', (1, 2L)]\"               # good\n>>> o = object()\n>>> repr(o)\n'<object object at 0xb769a4f8>'     # bad (address is dynamic)\n>>> repr({\"a\":1,\"b\":2,\"d\":4,\"c\":3})\n\"{'a': 1, 'c': 3, 'b': 2, 'd': 4}\"  # bad (order may change)\n>>> class A(object):\n...     def __init__(self, a):\n...         self.a = a\n...\n>>> repr(A(36))\n'<__main__.A object at 0xb725bb6c>' # bad (A.a not considered)\n>>> repr(A(35))\n'<__main__.A object at 0xb725bb6c>' # bad (A.a not considered)\n```\n\nA *bad* representation is one that is not identically across Python\ninvocations (all *bad* examples) or one that does not differentiate\nvalues sufficiently (last 2 *bad* examples).\n\nTo use such types anyway you can either\n\n1.  implement the type's `__repr__()` method accordingly or\n2.  provide a custom representation function using the `repr` keyword of\n    the `Cache` constructor.\n\n### Implement the `__repr__()` method\n\nTo pass dictionaries to *percache* decorated functions, you could wrap\nthem in an own dictionary type with a suitable `__repr__()` method:\n\n```python\n>>> class mydict(dict):\n...     def __repr__(self):\n...         items = [\"%r: %r\" % (k, self[k]) for k in sorted(self)]\n...         return \"{%s}\" % \", \".join(items)\n...\n>>> repr(mydict({\"a\":1,\"b\":2,\"d\":4,\"c\":3}))\n\"{'a': 1, 'b': 2, 'c': 3, 'd': 4}\"  # good (always same order)\n```\n\n### Provide a custom `repr()` function\n\nThe following example shows how to use a custom representation function\nto get a suitable argument representation of `file` objects:\n\n```python\n>>> def myrepr(arg):\n...     if isinstance(arg, file):\n...         # return a string with file name and modification time\n...         return \"%s:%s\" % (arg.name, os.fstat(arg.fileno())[8])\n...     else:\n...         return repr(arg)\n...\n>>> cache = percache.Cache(\"/some/path\", repr=myrepr)\n```\n\nHousekeeping\n------------\n\n-   Make sure to delete the cache file whenever the behavior of a cached\n    function has changed!\n-   To prevent the cache from getting larger and larger you can call the\n    `clear()` method of a `Cache` instance. By default it clears *all*\n    results from the cache. The keyword `maxage` my be used to specify a\n    maximum number of seconds passed since a cached result has been\n    *used* the last time. Any result not used (written or accessed) for\n    `maxage` seconds gets removed from the cache.\n\nChanges\n-------\n\n### Version 0.4.4\n\n-   Project README in markdown\n\n### Version 0.4.3\n\n-   Pin build status badge in README to a specific version.\n\n### Version 0.4.1\n\n-   README fixes.\n-   Use twine for PyPi upload.\n-   Use builds.sr.ht for CI.\n\n### Version 0.4.0\n\n-   Update docs due to project migration to\n    [sourcehut](https://hg.sr.ht/~obensonne/percache).\n-   Discontinue Python 2 support.\n\n### Version 0.3.0\n\n-   Support Python 3.3 (next to 2.6 and 2.7)\n\n### Version 0.2.1\n\n-   Add missing README to PyPi package.\n\n### Version 0.2\n\n-   Automatically close (i.e. sync) the cache on finalization.\n-   Optionally sync the cache on each change.\n-   Support for alternative back-ends (others than\n    [shelve](http://docs.python.org/library/shelve.html)).\n-   Cache object are callable now, which makes the explicit `check()`\n    method obsolete (though the old interface is still supported).\n\n### Version 0.1.1\n\n-   Fix wrong usage age output of command line interface.\n-   Meet half way with pylint.\n\n### Version 0.1\n\n-   Initial release", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://hg.sr.ht/~obensonne/percache", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "percache", "package_url": "https://pypi.org/project/percache/", "platform": "", "project_url": "https://pypi.org/project/percache/", "project_urls": {"Homepage": "https://hg.sr.ht/~obensonne/percache"}, "release_url": "https://pypi.org/project/percache/0.4.4/", "requires_dist": null, "requires_python": "", "summary": "Persistently cache results of callables", "version": "0.4.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>percache</h1>\n<p><em>percache</em> is a Python module to persistently cache results of functions\n(or callables in general) using decorators.</p>\n<p>It is somehow similar to the <a href=\"http://wiki.python.org/moin/PythonDecoratorLibrary#Memoize\" rel=\"nofollow\">Memoize\nExample</a>\nfrom the Python Decorator Library but with the advantage that results\nare stored <em>persistently</em> in a cache. <em>percache</em> provides memoization\nacross multiple invocations of the Python interpreter.</p>\n<p><em>percache</em> requires Python 3. Install with <code>pip install percache</code>. It\nhas no dependencies outside the standard library.</p>\n<p><a href=\"https://builds.sr.ht/%7Eobensonne/percache?search=0.4.4\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c42d83f128f84694822712827918980454fed95d/68747470733a2f2f6275696c64732e73722e68742f2537456f62656e736f6e6e652f70657263616368652e7376673f7365617263683d302e342e34\"></a></p>\n<h2>Example</h2>\n<pre><code>&gt;&gt;&gt; import percache\n&gt;&gt;&gt; cache = percache.Cache(\"/tmp/my-cache\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; @cache\n... def longtask(a, b):\n...     print(\"running a long task\")\n...     return a + b\n...\n&gt;&gt;&gt; longtask(1, 2)\nrunning a long task\n3\n&gt;&gt;&gt;\n&gt;&gt;&gt; longtask(1, 2)\n3\n&gt;&gt;&gt; cache.close() # writes new cached results to disk\n</code></pre>\n<p>As you can see at the missing output after the second invocation,\n<code>longtask</code> has been called once only. The second time the result is\nretrieved from the cache. <em>The key feature of this module is that this\nworks across multiple invocations of the Python interpreter.</em></p>\n<p>A requirement on the results to cache is that they are\n<a href=\"http://docs.python.org/library/pickle.html#what-can-be-pickled-and-unpickled\" rel=\"nofollow\">pickable</a>.</p>\n<p>Each cache file can be used for any number of differently named\ncallables.</p>\n<h3>Alternative back-ends and live synchronization</h3>\n<p>By default <em>percache</em> uses a\n<a href=\"http://docs.python.org/library/shelve.html\" rel=\"nofollow\">shelve</a> as its cache\nback-end. Alternative back-ends may be used if they are given as\ndictionary-like objects with a <code>close()</code> and <code>sync()</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">FooCache</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">sync</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">FooCache</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">percache</span><span class=\"o\">.</span><span class=\"n\">Cache</span><span class=\"p\">(</span><span class=\"n\">fc</span><span class=\"p\">,</span> <span class=\"n\">livesync</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>In this example a cache is created in live-sync mode, i.e. results\n<em>immediately</em> are stored permanently. Normally this happens not until a\ncache's <code>close()</code> method has been called or until it gets\n<a href=\"\" rel=\"nofollow\">finalized</a>. Note that the live-sync mode may slow down your\npercache-decorated functions (though it reduces the risk of \"loosing\"\nresults).</p>\n<h2>Caching details (you should know)</h2>\n<p>When caching the result of a callable, a SHA1 hash based on the\ncallable's name and arguments is used as a key to store the result in\nthe cache file.</p>\n<p>The hash calculation does not work directly with the arguments but with\ntheir <em>representations</em>, i.e. the string returned by applying <code>repr()</code>.\nArgument representations are supposed to differentiate values\nsufficiently for the purpose of the function but identically across\nmultiple invocations of the Python interpreter. By default the built-in\nfunction <code>repr()</code> is used to get argument representations. This is just\nperfect for basic types, lists, tuples and combinations of them but it\nmay fail on other types:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"mi\">42</span>                                  <span class=\"c1\"># good</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">([</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"n\">L</span><span class=\"p\">)])</span>\n<span class=\"s2\">\"['a', 'b', (1, 2L)]\"</span>               <span class=\"c1\"># good</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n<span class=\"s1\">'&lt;object object at 0xb769a4f8&gt;'</span>     <span class=\"c1\"># bad (address is dynamic)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">({</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s2\">\"b\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"d\"</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"s2\">\"{'a': 1, 'c': 3, 'b': 2, 'd': 4}\"</span>  <span class=\"c1\"># bad (order may change)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"p\">))</span>\n<span class=\"s1\">'&lt;__main__.A object at 0xb725bb6c&gt;'</span> <span class=\"c1\"># bad (A.a not considered)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">35</span><span class=\"p\">))</span>\n<span class=\"s1\">'&lt;__main__.A object at 0xb725bb6c&gt;'</span> <span class=\"c1\"># bad (A.a not considered)</span>\n</pre>\n<p>A <em>bad</em> representation is one that is not identically across Python\ninvocations (all <em>bad</em> examples) or one that does not differentiate\nvalues sufficiently (last 2 <em>bad</em> examples).</p>\n<p>To use such types anyway you can either</p>\n<ol>\n<li>implement the type's <code>__repr__()</code> method accordingly or</li>\n<li>provide a custom representation function using the <code>repr</code> keyword of\nthe <code>Cache</code> constructor.</li>\n</ol>\n<h3>Implement the <code>__repr__()</code> method</h3>\n<p>To pass dictionaries to <em>percache</em> decorated functions, you could wrap\nthem in an own dictionary type with a suitable <code>__repr__()</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">mydict</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\">: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)]</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"{</span><span class=\"si\">%s</span><span class=\"s2\">}\"</span> <span class=\"o\">%</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">mydict</span><span class=\"p\">({</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s2\">\"b\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"d\"</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}))</span>\n<span class=\"s2\">\"{'a': 1, 'b': 2, 'c': 3, 'd': 4}\"</span>  <span class=\"c1\"># good (always same order)</span>\n</pre>\n<h3>Provide a custom <code>repr()</code> function</h3>\n<p>The following example shows how to use a custom representation function\nto get a suitable argument representation of <code>file</code> objects:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">myrepr</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># return a string with file name and modification time</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">fstat</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">())[</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>     <span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">percache</span><span class=\"o\">.</span><span class=\"n\">Cache</span><span class=\"p\">(</span><span class=\"s2\">\"/some/path\"</span><span class=\"p\">,</span> <span class=\"nb\">repr</span><span class=\"o\">=</span><span class=\"n\">myrepr</span><span class=\"p\">)</span>\n</pre>\n<h2>Housekeeping</h2>\n<ul>\n<li>Make sure to delete the cache file whenever the behavior of a cached\nfunction has changed!</li>\n<li>To prevent the cache from getting larger and larger you can call the\n<code>clear()</code> method of a <code>Cache</code> instance. By default it clears <em>all</em>\nresults from the cache. The keyword <code>maxage</code> my be used to specify a\nmaximum number of seconds passed since a cached result has been\n<em>used</em> the last time. Any result not used (written or accessed) for\n<code>maxage</code> seconds gets removed from the cache.</li>\n</ul>\n<h2>Changes</h2>\n<h3>Version 0.4.4</h3>\n<ul>\n<li>Project README in markdown</li>\n</ul>\n<h3>Version 0.4.3</h3>\n<ul>\n<li>Pin build status badge in README to a specific version.</li>\n</ul>\n<h3>Version 0.4.1</h3>\n<ul>\n<li>README fixes.</li>\n<li>Use twine for PyPi upload.</li>\n<li>Use builds.sr.ht for CI.</li>\n</ul>\n<h3>Version 0.4.0</h3>\n<ul>\n<li>Update docs due to project migration to\n<a href=\"https://hg.sr.ht/%7Eobensonne/percache\" rel=\"nofollow\">sourcehut</a>.</li>\n<li>Discontinue Python 2 support.</li>\n</ul>\n<h3>Version 0.3.0</h3>\n<ul>\n<li>Support Python 3.3 (next to 2.6 and 2.7)</li>\n</ul>\n<h3>Version 0.2.1</h3>\n<ul>\n<li>Add missing README to PyPi package.</li>\n</ul>\n<h3>Version 0.2</h3>\n<ul>\n<li>Automatically close (i.e. sync) the cache on finalization.</li>\n<li>Optionally sync the cache on each change.</li>\n<li>Support for alternative back-ends (others than\n<a href=\"http://docs.python.org/library/shelve.html\" rel=\"nofollow\">shelve</a>).</li>\n<li>Cache object are callable now, which makes the explicit <code>check()</code>\nmethod obsolete (though the old interface is still supported).</li>\n</ul>\n<h3>Version 0.1.1</h3>\n<ul>\n<li>Fix wrong usage age output of command line interface.</li>\n<li>Meet half way with pylint.</li>\n</ul>\n<h3>Version 0.1</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n\n          </div>"}, "last_serial": 6112804, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "401355d709ec966cdd1ad508e7400b0f", "sha256": "328f79a519c28955428d436f750df358de3378bc05ed30e533a7719ded0a83ab"}, "downloads": -1, "filename": "percache-0.1.tar.gz", "has_sig": false, "md5_digest": "401355d709ec966cdd1ad508e7400b0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6240, "upload_time": "2010-04-06T16:47:50", "upload_time_iso_8601": "2010-04-06T16:47:50.411244Z", "url": "https://files.pythonhosted.org/packages/ba/6b/de4bb54a8873c38f37951f4f0b7bd4c8dec73e58f9cb09cf105e9bb41288/percache-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2d655a791c91dc277ec9618adbc2a8a0", "sha256": "9825145c1bf6996b52b225481aa11feafe58438d9e40125eca6889ff146fcc34"}, "downloads": -1, "filename": "percache-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2d655a791c91dc277ec9618adbc2a8a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6247, "upload_time": "2010-04-06T22:47:12", "upload_time_iso_8601": "2010-04-06T22:47:12.434955Z", "url": "https://files.pythonhosted.org/packages/ef/8a/9ea97afad650f05017eff98128647acf9151c4a5c4d845f9fcdaf65e654a/percache-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e764c6987d413ca74161fae7d8a6ff4b", "sha256": "6b71bdd5a2b277e9cc0a5806d2482152a81e30c78c0faf7e0eb92b9a4bb58e12"}, "downloads": -1, "filename": "percache-0.2.tar.gz", "has_sig": false, "md5_digest": "e764c6987d413ca74161fae7d8a6ff4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6778, "upload_time": "2011-09-25T21:08:22", "upload_time_iso_8601": "2011-09-25T21:08:22.000589Z", "url": "https://files.pythonhosted.org/packages/9b/b8/6d44954f05e72c918c6b10f8635c896d5887ee022a767bc706528f1145db/percache-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "65989e5382cce73d0b7d41986bfd9e6e", "sha256": "7dff8009288ba2d3275640801b8d1c585002a3d247a0bce3d5fa8fda4099e89d"}, "downloads": -1, "filename": "percache-0.2.1.tar.gz", "has_sig": false, "md5_digest": "65989e5382cce73d0b7d41986bfd9e6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7569, "upload_time": "2012-02-18T14:01:53", "upload_time_iso_8601": "2012-02-18T14:01:53.171300Z", "url": "https://files.pythonhosted.org/packages/b5/b2/479e00be63e279833a0bdabce3cdd860c65b035a98758e778a85beed0e34/percache-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "84054a8082127d20c290145dc87b6346", "sha256": "b60043937aece6d154ccd1fd7380fc01ea482335716c2bd41efb85b097bc88df"}, "downloads": -1, "filename": "percache-0.3.0.tar.gz", "has_sig": false, "md5_digest": "84054a8082127d20c290145dc87b6346", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7933, "upload_time": "2014-03-15T19:55:18", "upload_time_iso_8601": "2014-03-15T19:55:18.117467Z", "url": "https://files.pythonhosted.org/packages/c6/18/d875e846f3b46bc029fad2b8266e58bc38f44436307727c72c5dd25649e0/percache-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "83663dbd22eb2b2eb72379a12604da9f", "sha256": "756d7de5bcda46fd2ad6995cd1e6302dad692a07caa86c2b0f95c8bbd1827b0f"}, "downloads": -1, "filename": "percache-0.4.0.tar.gz", "has_sig": false, "md5_digest": "83663dbd22eb2b2eb72379a12604da9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7533, "upload_time": "2019-11-08T20:42:44", "upload_time_iso_8601": "2019-11-08T20:42:44.476889Z", "url": "https://files.pythonhosted.org/packages/15/2f/52d5d04b41de2da4b086ba8fbef204232b55942844ad9aa9d09617d43c49/percache-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "3de406f8457174d1685d13bda03e2d00", "sha256": "a7e6bab6316c883841afebf17a728c68f8c95e40534caef37c4150c5128eab75"}, "downloads": -1, "filename": "percache-0.4.1.tar.gz", "has_sig": false, "md5_digest": "3de406f8457174d1685d13bda03e2d00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7611, "upload_time": "2019-11-08T22:19:38", "upload_time_iso_8601": "2019-11-08T22:19:38.475005Z", "url": "https://files.pythonhosted.org/packages/62/d9/1e9cef6aad78adfa8effc9b4f91eb2460c94754b679d6b155c44aa242d66/percache-0.4.1.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "ebc4699760093ed6969a029b53870177", "sha256": "61af3ae30795834d83ae5b073447d1652349b3946b088e2f36124d5ae18fb02b"}, "downloads": -1, "filename": "percache-0.4.3.tar.gz", "has_sig": false, "md5_digest": "ebc4699760093ed6969a029b53870177", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7737, "upload_time": "2019-11-08T23:40:51", "upload_time_iso_8601": "2019-11-08T23:40:51.425070Z", "url": "https://files.pythonhosted.org/packages/18/86/bc083cc1a599acacda36bf8f3bad921d60d23271f2e6795a751a68e38075/percache-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "ef559648c2b7d7322f48b303e2d7e9d6", "sha256": "04b08b9d775b0e88666c14cfd6627691cc056ec526a4608f620595d68d1e31a2"}, "downloads": -1, "filename": "percache-0.4.4.tar.gz", "has_sig": false, "md5_digest": "ef559648c2b7d7322f48b303e2d7e9d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8055, "upload_time": "2019-11-10T20:21:25", "upload_time_iso_8601": "2019-11-10T20:21:25.639658Z", "url": "https://files.pythonhosted.org/packages/19/05/703715de1db93180ed0055a3c80878aa2d3c26f98000d6b7e65dd2e9b101/percache-0.4.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef559648c2b7d7322f48b303e2d7e9d6", "sha256": "04b08b9d775b0e88666c14cfd6627691cc056ec526a4608f620595d68d1e31a2"}, "downloads": -1, "filename": "percache-0.4.4.tar.gz", "has_sig": false, "md5_digest": "ef559648c2b7d7322f48b303e2d7e9d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8055, "upload_time": "2019-11-10T20:21:25", "upload_time_iso_8601": "2019-11-10T20:21:25.639658Z", "url": "https://files.pythonhosted.org/packages/19/05/703715de1db93180ed0055a3c80878aa2d3c26f98000d6b7e65dd2e9b101/percache-0.4.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:23 2020"}