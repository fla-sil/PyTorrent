{"info": {"author": "Etienne Millon", "author_email": "me@emillon.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "Mixcloud.com API access from Python\n-----------------------------------\n\n|Build Status| |Coverage Status|\n\nThis provides a Python API for the http://mixcloud.com website.\n\nExample\n-------\n\n.. code:: python\n\n    from mixcloud import Mixcloud\n    m = Mixcloud()\n    u = m.user('michelplatiniste')\n    for c in u.cloudcasts():\n        print c.name\n\nAuthorization\n-------------\n\nYou must have an application registered with Mixcloud and a corresponding\nclient ID and secret.\n\nAuthorization is a multi-step process:\n\n1. Generate the authorization URL\n2. Redirect the user to the URL to authorize your application\n3. Collect the `code` query string parameter from the redirect\n4. Exchange the code for an access token\n\n.. code:: python\n\n    o = mixcloud.MixcloudOauth(\n        client_id=client_id, client_secret=client_secret,\n        redirect_uri=redirect_uri)\n\n    url = o.authorize_url()\n\n    # Next redirect the user to `url`. They will be redirected to your\n    # redirect uri with a `code` query string parameter. This must be\n    # exchanged with Mixcloud for an access token.\n\n    access_token = o.exchange_token(code)\n\n    # This can then be used for calls that required authorization.\n\n    m = mixcloud.Mixcloud(access_token=access_token)\n    print(m.me())\n\nOptionally you can store an access token in your `.netrc` file and it\nwill be used automatically. The machine name must be `mixcloud-api`.\n\nE.g.::\n\n    machine mixcloud-api\n    password my_access_token\n\nUploading\n---------\n\nIt is possible to use this module to upload cloudcasts. In order to do\nthat you need to be authenticated. To do that, provide an API token to\nthe constructor.\n\n.. code:: python\n\n    m = mixcloud.Mixcloud(access_token=access_token)\n    cc = Cloudcast(...)\n    with open(mp3_path) as mp3:\n        r = m.upload(cc, mp3)\n\nYML file support\n----------------\n\nIt is possible to represent cloudcasts as YAML files. See\n``example.yml``.\n\nThe relevant keys are:\n\n+----------+-------------------+\n| Key      | Type              |\n+==========+===================+\n| title    | String            |\n+----------+-------------------+\n| desc     | String            |\n+----------+-------------------+\n| tags     | List of strings   |\n+----------+-------------------+\n| tracks   | List of tracks    |\n+----------+-------------------+\n\nEach track is a dict with the following keys:\n\n+----------+-----------+\n| Key      | Type      |\n+==========+===========+\n| start    | Integer   |\n+----------+-----------+\n| artist   | String    |\n+----------+-----------+\n| track    | String    |\n+----------+-----------+\n\nYou can leverage YAML syntax for the \"start\" field: ``2:54`` will be\nparsed directly as 174 (then number of seconds).\n\nIt is possible to parse such a file with:\n\n.. code:: python\n\n    with open(yml_path) as yml:\n        cc = mixcloud.Cloudcast.from_yml(yml, None)\n\nMocking\n-------\n\nA mock server is provided for testing purposes in ``mixcloud.mock``.\n\n.. |Build Status| image:: https://img.shields.io/travis/emillon/mixcloud/master.svg\n   :target: http://travis-ci.org/emillon/mixcloud\n.. |Coverage Status| image:: https://img.shields.io/coveralls/emillon/mixcloud/master.svg\n   :target: https://coveralls.io/r/emillon/mixcloud\n\n\nChangelog\n=========\n\n0.4.0\n-----\n**release date:** 2015-10-27\n\n* Switch to semantic versioning.\n* Include access token when calling /me (#10)\n* Add a helper class for OAuth (#11)\n* Support access token stored in netrc (#9, #12)\n\n0.0.3\n-----\n**release date:** 2015-03-15\n\n* Pictures can be uploaded and retrieved (#6)\n* Include LICENSE in tarball (#8)\n\n0.0.2\n-----\n**release date:** 2015-01-28\n\n* Switch from requirements.txt to install_requires (#7)\n* Add HISTORY.rst to MANIFEST.in\n\n0.0.1\n-----\n**release date:** 2015-01-28\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emillon/mixcloud", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "mixcloud", "package_url": "https://pypi.org/project/mixcloud/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mixcloud/", "project_urls": {"Homepage": "https://github.com/emillon/mixcloud"}, "release_url": "https://pypi.org/project/mixcloud/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "Bindings for the mixcloud.com API", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"mixcloud-com-api-access-from-python\">\n<h2>Mixcloud.com API access from Python</h2>\n<p><a href=\"http://travis-ci.org/emillon/mixcloud\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ea80a85ca48d9078443378e564eea725a2fe31b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f656d696c6c6f6e2f6d6978636c6f75642f6d61737465722e737667\"></a> <a href=\"https://coveralls.io/r/emillon/mixcloud\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f2b5e389a095306f92dc36ba45dba501ba63516/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f656d696c6c6f6e2f6d6978636c6f75642f6d61737465722e737667\"></a></p>\n<p>This provides a Python API for the <a href=\"http://mixcloud.com\" rel=\"nofollow\">http://mixcloud.com</a> website.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mixcloud</span> <span class=\"kn\">import</span> <span class=\"n\">Mixcloud</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Mixcloud</span><span class=\"p\">()</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"s1\">'michelplatiniste'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">cloudcasts</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre>\n</div>\n<div id=\"authorization\">\n<h2>Authorization</h2>\n<p>You must have an application registered with Mixcloud and a corresponding\nclient ID and secret.</p>\n<p>Authorization is a multi-step process:</p>\n<ol>\n<li>Generate the authorization URL</li>\n<li>Redirect the user to the URL to authorize your application</li>\n<li>Collect the <cite>code</cite> query string parameter from the redirect</li>\n<li>Exchange the code for an access token</li>\n</ol>\n<pre><span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">mixcloud</span><span class=\"o\">.</span><span class=\"n\">MixcloudOauth</span><span class=\"p\">(</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"n\">client_id</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"n\">client_secret</span><span class=\"p\">,</span>\n    <span class=\"n\">redirect_uri</span><span class=\"o\">=</span><span class=\"n\">redirect_uri</span><span class=\"p\">)</span>\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">authorize_url</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Next redirect the user to `url`. They will be redirected to your</span>\n<span class=\"c1\"># redirect uri with a `code` query string parameter. This must be</span>\n<span class=\"c1\"># exchanged with Mixcloud for an access token.</span>\n\n<span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">exchange_token</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This can then be used for calls that required authorization.</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">mixcloud</span><span class=\"o\">.</span><span class=\"n\">Mixcloud</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">me</span><span class=\"p\">())</span>\n</pre>\n<p>Optionally you can store an access token in your <cite>.netrc</cite> file and it\nwill be used automatically. The machine name must be <cite>mixcloud-api</cite>.</p>\n<p>E.g.:</p>\n<pre>machine mixcloud-api\npassword my_access_token\n</pre>\n</div>\n<div id=\"uploading\">\n<h2>Uploading</h2>\n<p>It is possible to use this module to upload cloudcasts. In order to do\nthat you need to be authenticated. To do that, provide an API token to\nthe constructor.</p>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">mixcloud</span><span class=\"o\">.</span><span class=\"n\">Mixcloud</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">Cloudcast</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">mp3_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mp3</span><span class=\"p\">:</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">mp3</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"yml-file-support\">\n<h2>YML file support</h2>\n<p>It is possible to represent cloudcasts as YAML files. See\n<tt>example.yml</tt>.</p>\n<p>The relevant keys are:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Key</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>title</td>\n<td>String</td>\n</tr>\n<tr><td>desc</td>\n<td>String</td>\n</tr>\n<tr><td>tags</td>\n<td>List of strings</td>\n</tr>\n<tr><td>tracks</td>\n<td>List of tracks</td>\n</tr>\n</tbody>\n</table>\n<p>Each track is a dict with the following keys:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Key</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>start</td>\n<td>Integer</td>\n</tr>\n<tr><td>artist</td>\n<td>String</td>\n</tr>\n<tr><td>track</td>\n<td>String</td>\n</tr>\n</tbody>\n</table>\n<p>You can leverage YAML syntax for the \u201cstart\u201d field: <tt>2:54</tt> will be\nparsed directly as 174 (then number of seconds).</p>\n<p>It is possible to parse such a file with:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">yml_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">yml</span><span class=\"p\">:</span>\n    <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">mixcloud</span><span class=\"o\">.</span><span class=\"n\">Cloudcast</span><span class=\"o\">.</span><span class=\"n\">from_yml</span><span class=\"p\">(</span><span class=\"n\">yml</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"mocking\">\n<h2>Mocking</h2>\n<p>A mock server is provided for testing purposes in <tt>mixcloud.mock</tt>.</p>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>0.4.0</h2>\n<p><strong>release date:</strong> 2015-10-27</p>\n<ul>\n<li>Switch to semantic versioning.</li>\n<li>Include access token when calling /me (#10)</li>\n<li>Add a helper class for OAuth (#11)</li>\n<li>Support access token stored in netrc (#9, #12)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>0.0.3</h2>\n<p><strong>release date:</strong> 2015-03-15</p>\n<ul>\n<li>Pictures can be uploaded and retrieved (#6)</li>\n<li>Include LICENSE in tarball (#8)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>0.0.2</h2>\n<p><strong>release date:</strong> 2015-01-28</p>\n<ul>\n<li>Switch from requirements.txt to install_requires (#7)</li>\n<li>Add HISTORY.rst to MANIFEST.in</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h2>0.0.1</h2>\n<p><strong>release date:</strong> 2015-01-28</p>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1787991, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b566e42a6d5606f11a044d7ced081bfb", "sha256": "0cbe2d0d9049abf818076a8ca4cd0ced30834097523873d91000ac01b3dd3409"}, "downloads": -1, "filename": "mixcloud-0.0.1.tar.gz", "has_sig": true, "md5_digest": "b566e42a6d5606f11a044d7ced081bfb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5201, "upload_time": "2015-01-28T16:07:44", "upload_time_iso_8601": "2015-01-28T16:07:44.860016Z", "url": "https://files.pythonhosted.org/packages/8a/fb/6436da1ed607956b4196232552ebed17c7f62e8d8b6f084965686ecd47a3/mixcloud-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "13a153635848708754beacbe0412bdd6", "sha256": "81cb7785a306eaa4d749c26a33e202a9884572e818e415d36639701cf2bb3f6f"}, "downloads": -1, "filename": "mixcloud-0.0.2.tar.gz", "has_sig": true, "md5_digest": "13a153635848708754beacbe0412bdd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5336, "upload_time": "2015-01-28T17:35:38", "upload_time_iso_8601": "2015-01-28T17:35:38.453843Z", "url": "https://files.pythonhosted.org/packages/61/ca/3d532af6c3d07121335f6103c74293f9c57015ebb0835d934ae6bc0da3eb/mixcloud-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "917ff82fc254616f493e9f473aec81d0", "sha256": "1f0f19bea440d3febd03ae027a8dfe789bab3ffa14d749f825d45d6b14992169"}, "downloads": -1, "filename": "mixcloud-0.0.3.tar.gz", "has_sig": true, "md5_digest": "917ff82fc254616f493e9f473aec81d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6324, "upload_time": "2015-03-15T16:56:41", "upload_time_iso_8601": "2015-03-15T16:56:41.253668Z", "url": "https://files.pythonhosted.org/packages/13/ed/16849f99b771437ccd41cd4fc19b494ea5903e44c95528f1d145ffd94be5/mixcloud-0.0.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "905e036e075181eaabee68559aca5653", "sha256": "797a7ac23187b033411d2a0897b4068af774eea93e92d18ac4f542f95af0d661"}, "downloads": -1, "filename": "mixcloud-0.4.0.tar.gz", "has_sig": true, "md5_digest": "905e036e075181eaabee68559aca5653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7674, "upload_time": "2015-10-27T08:18:04", "upload_time_iso_8601": "2015-10-27T08:18:04.570160Z", "url": "https://files.pythonhosted.org/packages/e3/9e/70aedb77e9b5d99b54dd569d0ba2357cb64909b20805f459f90d45c426c6/mixcloud-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "905e036e075181eaabee68559aca5653", "sha256": "797a7ac23187b033411d2a0897b4068af774eea93e92d18ac4f542f95af0d661"}, "downloads": -1, "filename": "mixcloud-0.4.0.tar.gz", "has_sig": true, "md5_digest": "905e036e075181eaabee68559aca5653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7674, "upload_time": "2015-10-27T08:18:04", "upload_time_iso_8601": "2015-10-27T08:18:04.570160Z", "url": "https://files.pythonhosted.org/packages/e3/9e/70aedb77e9b5d99b54dd569d0ba2357cb64909b20805f459f90d45c426c6/mixcloud-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:56 2020"}