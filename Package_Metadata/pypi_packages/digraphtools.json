{"info": {"author": "David Basden", "author_email": "davidb-python@rcpt.to", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "============\ndigraphtools\n============\n\nSome tools for working with directed acyclic graphs, partial orders and \ntopological sorting with Python\n\ndigraphtools was written as a lightweight way of using DAGs and partial\nordering to represent, sort and traverse dependency trees in a lightweight\nway.\n\nThe code is hosted on github at https://github.com/dbasden/python-digraphtools\n\nGraph Representation\n====================\n\nGraphs\n------\n\nA graph is represented as a dict which maps a node to a list\nnodes connected via the outgoing edges of that node. \n\ne.g.\n\n        graph = { 1: [2,3],\n                  2: [3],\n                  3: [] }\n\nis a DAG represented by the edges  (1,2) (1,3) (2,3)\nwhere the edge 2tuple is in the form of (from,to)\n\nThere are helper methods in deptools to generate graphs from a\nlist of edges, and vice versa\n\nBinary relations\n----------------\n\nIf a DAG represents dependencies, e.g. the edge (1,2) is taken\nto mean \"1 depends on 2\", this is backwards from a binary relation.\n(1,2) would be the relation 2P1\n\n\nTopological Sorting\n===================\n\nThere are two ways of generating linear extensions / topological sorts of\ndependencies (i.e. orders items must be processed in to satisfy dependency \nrequirements):\n\ndeptools.dfs_topsort_traversal\n------------------------------\n\ndeptools.dfs_topsort_traversal will take a graph and iterate over a\nsingle valid topologicaly sorted order\n\ndeptools.topsort.vr_topsort\n---------------------------\n\ndeptools.topsort.vr_topsort will generate all valid linear extensions /\ntopological orderings given an initial 'seed' linear extension (such as\nthe one generated by deptools.dfs_topsort_traversal).  \n\nThe method does not take the graph format as used by deptools as input, \nbut it does have a helper method to generate it's input matrix from a \npartial order set (which can be generated from a graph using helpers in \ndeptools).\n\nSee the examples in topsort.py and test/test_topsort.py for how to do this.\n\n\nAuthors\n=======\n\ndigraphtools was initially written by David Basden\n\n\nThanks\n======\n\nThanks to Yaakov L. Varol and Doron Rotem for the design of the algorithm \nin topsort.py", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dbasden/python-digraphtools", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "digraphtools", "package_url": "https://pypi.org/project/digraphtools/", "platform": "any", "project_url": "https://pypi.org/project/digraphtools/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/dbasden/python-digraphtools"}, "release_url": "https://pypi.org/project/digraphtools/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Some tools for working with digraphs, partial orders and topological sorting with Python", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Some tools for working with directed acyclic graphs, partial orders and\ntopological sorting with Python</p>\n<p>digraphtools was written as a lightweight way of using DAGs and partial\nordering to represent, sort and traverse dependency trees in a lightweight\nway.</p>\n<p>The code is hosted on github at <a href=\"https://github.com/dbasden/python-digraphtools\" rel=\"nofollow\">https://github.com/dbasden/python-digraphtools</a></p>\n<div id=\"graph-representation\">\n<h2>Graph Representation</h2>\n<div id=\"graphs\">\n<h3>Graphs</h3>\n<p>A graph is represented as a dict which maps a node to a list\nnodes connected via the outgoing edges of that node.</p>\n<p>e.g.</p>\n<blockquote>\n<dl>\n<dt>graph = { 1: [2,3],</dt>\n<dd>2: [3],\n3: [] }</dd>\n</dl>\n</blockquote>\n<p>is a DAG represented by the edges  (1,2) (1,3) (2,3)\nwhere the edge 2tuple is in the form of (from,to)</p>\n<p>There are helper methods in deptools to generate graphs from a\nlist of edges, and vice versa</p>\n</div>\n<div id=\"binary-relations\">\n<h3>Binary relations</h3>\n<p>If a DAG represents dependencies, e.g. the edge (1,2) is taken\nto mean \u201c1 depends on 2\u201d, this is backwards from a binary relation.\n(1,2) would be the relation 2P1</p>\n</div>\n</div>\n<div id=\"topological-sorting\">\n<h2>Topological Sorting</h2>\n<p>There are two ways of generating linear extensions / topological sorts of\ndependencies (i.e. orders items must be processed in to satisfy dependency\nrequirements):</p>\n<div id=\"deptools-dfs-topsort-traversal\">\n<h3>deptools.dfs_topsort_traversal</h3>\n<p>deptools.dfs_topsort_traversal will take a graph and iterate over a\nsingle valid topologicaly sorted order</p>\n</div>\n<div id=\"deptools-topsort-vr-topsort\">\n<h3>deptools.topsort.vr_topsort</h3>\n<p>deptools.topsort.vr_topsort will generate all valid linear extensions /\ntopological orderings given an initial \u2018seed\u2019 linear extension (such as\nthe one generated by deptools.dfs_topsort_traversal).</p>\n<p>The method does not take the graph format as used by deptools as input,\nbut it does have a helper method to generate it\u2019s input matrix from a\npartial order set (which can be generated from a graph using helpers in\ndeptools).</p>\n<p>See the examples in topsort.py and test/test_topsort.py for how to do this.</p>\n</div>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>digraphtools was initially written by David Basden</p>\n</div>\n<div id=\"thanks\">\n<h2>Thanks</h2>\n<p>Thanks to Yaakov L. Varol and Doron Rotem for the design of the algorithm\nin topsort.py</p>\n</div>\n\n          </div>"}, "last_serial": 788966, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "69cc44d0c10f1ff7ff32d1eaed919618", "sha256": "3002d8d3ac41eb48e636c634eab56127b6f262c1a2e62baf50ada21a3690374c"}, "downloads": -1, "filename": "digraphtools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "69cc44d0c10f1ff7ff32d1eaed919618", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6169, "upload_time": "2011-08-15T06:40:56", "upload_time_iso_8601": "2011-08-15T06:40:56.598595Z", "url": "https://files.pythonhosted.org/packages/3b/14/2d278553bc070045631c958f58bd33157420e18843adb43b3ececbd18a7b/digraphtools-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f7d946ee7aa5a4a6461835afc09f2748", "sha256": "dcda4a47c4845996f9921b6739167d497dcd71f38059da076d51dcf4b74a38f4"}, "downloads": -1, "filename": "digraphtools-0.2.0.tar.gz", "has_sig": true, "md5_digest": "f7d946ee7aa5a4a6461835afc09f2748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7702, "upload_time": "2011-08-21T17:14:53", "upload_time_iso_8601": "2011-08-21T17:14:53.754662Z", "url": "https://files.pythonhosted.org/packages/6f/0f/61d2b62da73e8fdf9dac96f4d730318e105f6464875a3d60ee645851bd23/digraphtools-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4adce3e37f577b056e3fe52e3a2f3829", "sha256": "0becd4a28189d8ecbd32714f4f234a77d22284a0ea9b04b64ea252091a10054e"}, "downloads": -1, "filename": "digraphtools-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4adce3e37f577b056e3fe52e3a2f3829", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8150, "upload_time": "2011-09-07T07:19:23", "upload_time_iso_8601": "2011-09-07T07:19:23.491746Z", "url": "https://files.pythonhosted.org/packages/b0/c6/c2759346d2afe28fecffcb924401fbec6055e3feb0ff77ebdebb04ab4b63/digraphtools-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4adce3e37f577b056e3fe52e3a2f3829", "sha256": "0becd4a28189d8ecbd32714f4f234a77d22284a0ea9b04b64ea252091a10054e"}, "downloads": -1, "filename": "digraphtools-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4adce3e37f577b056e3fe52e3a2f3829", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8150, "upload_time": "2011-09-07T07:19:23", "upload_time_iso_8601": "2011-09-07T07:19:23.491746Z", "url": "https://files.pythonhosted.org/packages/b0/c6/c2759346d2afe28fecffcb924401fbec6055e3feb0ff77ebdebb04ab4b63/digraphtools-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:24 2020"}