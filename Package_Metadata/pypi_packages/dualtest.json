{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Testing"], "description": "When you write a C extension, you can provide a Python version as a backup. A\nproblem with this is that only one of these modules will be tested, while the\nother is neglected.\n\nDualTest provides a class that, when inherited from, imports a list of modules\nand attributes from modules and makes them available as globals during tests.\nAllowing you to easily test both versions of a module and write just one set of\ntests.\n\n=====\nUsage\n=====\n\nCreate a test case class derived from DualTestCase and set the `import_names`\nor `import_from_names` class attributes.\n\n`import_names` should be set to a list of the names of modules with Python\nsource and C extension versions to import:\n\n.. code:: python\n\n    class ImportTestCase(DualTestCase):\n        import_names = ['mod1', 'mod2']\n\n        def test_something(self):\n            # mod1 and mod2 will be available here.\n\n`import_from_names` causes attributes to be imported from modules just like\n`from module import attribute` would. It should be set to a list of tuples\ncontaining the name of the module to import from, and a list of attribute names\nto import. If one of the attribute names is \"*\", then all public attributes are\nimported:\n\n.. code:: python\n\n    class ImportFromTestCase(DualTestCase):\n        import_from_names = [\n            ('mod1', ['attr1', 'attr2']),\n            # \"*\" causes all public attributes to be imported.\n            ('mod2', ['*']),\n            ]\n\n        def test_something(self):\n            # attr1, attr2 and everything from mod2 will be available here.\n\n============\nFull Example\n============\n\n.. code:: python\n\n    from dualtest import DualTestCase\n\n\n    class ImportTestCase(DualTestCase):\n        import_names = ['mod1', 'mod2']\n\n        def test_something(self):\n            # mod1 and mod2 will be available here.\n\n\n    class ImportFromTestCase(DualTestCase):\n        import_from_names = [\n            ('mod1', ['attr1', 'attr2']),\n            # \"*\" causes all public attributes to be imported.\n            ('mod2', ['*']),\n            ]\n\n        def test_something(self):\n            # attr1, attr2 and everything from mod2 will be available here.\n\n=========\nChangelog\n=========\n\n1.0.1\n-----\n\n* Patch imported modules into \"sys.modules\" during tests.\n* Fix error when \"import_from_names\" references a non-existing module.\n* Fix bug when importing '*' from a module.\n* Add module type context when \"subTest\" is called.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dualtest", "package_url": "https://pypi.org/project/dualtest/", "platform": "", "project_url": "https://pypi.org/project/dualtest/", "project_urls": null, "release_url": "https://pypi.org/project/dualtest/1.0.1/", "requires_dist": null, "requires_python": ">= 3.6", "summary": "Easily test both Python and C versions of modules.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>When you write a C extension, you can provide a Python version as a backup. A\nproblem with this is that only one of these modules will be tested, while the\nother is neglected.</p>\n<p>DualTest provides a class that, when inherited from, imports a list of modules\nand attributes from modules and makes them available as globals during tests.\nAllowing you to easily test both versions of a module and write just one set of\ntests.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create a test case class derived from DualTestCase and set the <cite>import_names</cite>\nor <cite>import_from_names</cite> class attributes.</p>\n<p><cite>import_names</cite> should be set to a list of the names of modules with Python\nsource and C extension versions to import:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ImportTestCase</span><span class=\"p\">(</span><span class=\"n\">DualTestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">import_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'mod1'</span><span class=\"p\">,</span> <span class=\"s1\">'mod2'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># mod1 and mod2 will be available here.</span>\n</pre>\n<p><cite>import_from_names</cite> causes attributes to be imported from modules just like\n<cite>from module import attribute</cite> would. It should be set to a list of tuples\ncontaining the name of the module to import from, and a list of attribute names\nto import. If one of the attribute names is \u201c*\u201d, then all public attributes are\nimported:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ImportFromTestCase</span><span class=\"p\">(</span><span class=\"n\">DualTestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">import_from_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'mod1'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'attr1'</span><span class=\"p\">,</span> <span class=\"s1\">'attr2'</span><span class=\"p\">]),</span>\n        <span class=\"c1\"># \"*\" causes all public attributes to be imported.</span>\n        <span class=\"p\">(</span><span class=\"s1\">'mod2'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'*'</span><span class=\"p\">]),</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># attr1, attr2 and everything from mod2 will be available here.</span>\n</pre>\n</div>\n<div id=\"full-example\">\n<h2>Full Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dualtest</span> <span class=\"kn\">import</span> <span class=\"n\">DualTestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ImportTestCase</span><span class=\"p\">(</span><span class=\"n\">DualTestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">import_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'mod1'</span><span class=\"p\">,</span> <span class=\"s1\">'mod2'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># mod1 and mod2 will be available here.</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ImportFromTestCase</span><span class=\"p\">(</span><span class=\"n\">DualTestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">import_from_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'mod1'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'attr1'</span><span class=\"p\">,</span> <span class=\"s1\">'attr2'</span><span class=\"p\">]),</span>\n        <span class=\"c1\"># \"*\" causes all public attributes to be imported.</span>\n        <span class=\"p\">(</span><span class=\"s1\">'mod2'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'*'</span><span class=\"p\">]),</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># attr1, attr2 and everything from mod2 will be available here.</span>\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.0.1</span></h2>\n<ul>\n<li>Patch imported modules into \u201csys.modules\u201d during tests.</li>\n<li>Fix error when \u201cimport_from_names\u201d references a non-existing module.</li>\n<li>Fix bug when importing \u2018*\u2019 from a module.</li>\n<li>Add module type context when \u201csubTest\u201d is called.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5296789, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "10b5134213e01ffed1e8631a1c5a3ba1", "sha256": "225d82190222ec06c02151d0449823cfd004f32ded6c083036f1d4703851bb41"}, "downloads": -1, "filename": "dualtest-1.0.tar.gz", "has_sig": false, "md5_digest": "10b5134213e01ffed1e8631a1c5a3ba1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5323, "upload_time": "2018-12-10T05:17:35", "upload_time_iso_8601": "2018-12-10T05:17:35.117260Z", "url": "https://files.pythonhosted.org/packages/ec/30/675760d2ce3048ebde6a76d7a4b33c024c1c9f197b6ab0bb2a2aa38edd22/dualtest-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ff419a71afee1118e7d751ebfddd731a", "sha256": "a6429c0946f936d7a5cdf74681a36fe0630bce0edde9cf1ce2764db4d827d3ca"}, "downloads": -1, "filename": "dualtest-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ff419a71afee1118e7d751ebfddd731a", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 5870, "upload_time": "2019-05-21T09:24:37", "upload_time_iso_8601": "2019-05-21T09:24:37.623408Z", "url": "https://files.pythonhosted.org/packages/7f/1c/cebe9c8ab0303d7fd6af6ecce3c846bc09073056cc3a8f5d79dc7ced9d36/dualtest-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff419a71afee1118e7d751ebfddd731a", "sha256": "a6429c0946f936d7a5cdf74681a36fe0630bce0edde9cf1ce2764db4d827d3ca"}, "downloads": -1, "filename": "dualtest-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ff419a71afee1118e7d751ebfddd731a", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 5870, "upload_time": "2019-05-21T09:24:37", "upload_time_iso_8601": "2019-05-21T09:24:37.623408Z", "url": "https://files.pythonhosted.org/packages/7f/1c/cebe9c8ab0303d7fd6af6ecce3c846bc09073056cc3a8f5d79dc7ced9d36/dualtest-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:10 2020"}