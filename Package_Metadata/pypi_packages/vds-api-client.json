{"info": {"author": "Teije", "author_email": "tvanderhorst@vandersat.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "==============\nvds_api_client\n==============\n\n\n(Command line) interface to download data batches directly from the VanderSat API\n\n\nDescription\n===========\n\nUsing this module, one can get data from the VanderSat API using either:\n\n- Command line\n- Python console\n\nCompatible for Linux, Mac and Windows\nPython >3.6\n\nThis package offers an easy interface to the asynchronous endpoints offered by\nthe `VanderSat API <https://maps.vandersat.com/api/v2/>`_. However, not all available\nendpoints can be accessed through this package.\n\nRequired packages\n-------------------------------------\n\n* click\n* requests\n* pandas\n* click_datetime\n* joblib\n\nSetting up an environment\n-------------------------\nIf you don't have an environment yet or would like a new one, use the following line to make a new one using `conda <https://docs.conda.io/en/latest/>`_\n\n    ``$ conda create -n vds_api -c conda-forge python=3 requests \"click>=7\" pandas joblib pip``\n\nactivate it\n\n    ``$ conda activate vds_api``\n\nand follow the installation steps\n\nInstallation\n------------\n\nThe package can be installed directly from PyPI. Activate your environment and then install with\n\n    ``$ pip install vds_api_client``\n\nWith this activated environment one can access the vds cli with\n\n    ``$ vds-api``\n\n(If not, your installation did not succeed)\n\n\nAvailable CLI commands\n----------------------------------------------\n\n    ``$ vds-api``\n\nwill show all available commands which should include:\n\n* ``grid`` - download gridded data\n* ``info`` - Show info for this account\n* ``test`` - test connection, credentials and if api is operational\n* ``ts`` - download time-series as csv over points or rois\n\n\nCalling any of these commands should be done after suppliying credentials:\n\n    ``$ vds api -u [username] -p [password] [command]``\n\nAnd it is always a good idea to start with a test:\n\n    ``$ vds-api -u [username] -p [password] test``\n\n\nCredentials\n-----------\nFor each api call using the cli, the credentials need to be supplied.\nThese can be parsed along with the call by typing them explicitly like:\n\n    ``$ vds-api -u [username] -p [password] [command]``\n\nHowever, it is also convenient to store the credentials so they don't have to be\ntyped each time. `Set the environment variables <https://www.schrodinger.com/kb/1842>`_\n``$VDS_USER`` and ``$VDS_PASS``\nwith the correct values to automatically fill in your credentials.\n\n.. note::\n    **From this point on, the credentials don't have to be parsed explicitly anymore thus the syntax reduces to:**\n\n    ``$ vds-api [command]``\n\nImpersonation\n-------------\n\nIf a user manages another VanderSat API user account, it can impersonate this user.\nThrough the CLI this can also be done using the ``--impersonate`` flag. e.g.\n\n    ``$ vds-api -u manager@company.com -p password --impersonate \"user@company.com\" [command]``\n\nor when credentials were stored already\n\n    ``$ vds-api --impersonate \"user@company.com\" [command]``\n\n\nCommand specifications: ``info``\n----------------------------------------------\n\nGet a summary of all user information. The shown information contains the following:\n\n* registred user information (name, email, role, etc)\n* registred products (api-name | product-name)\n* roi information\n\nAll info is shown by default but it is also possible to only show part of it with the following options:\n\n-u, --user           show user info\n-p, --product_list   show product-list\n-r, --roi            show roi info\n\nE.g. to show all available products, type:\n\n    ``$ vds-api info -p``\n\nCommand specifications: ``grid``\n----------------------------------------------\nGet one or multiple gridded data files in GeoTIFF or NetCDF.\n\nSee all available options by typing:\n\n    ``$ vds-api grid --help``\n\nRequired options:\n\n-p, --product      ``str`` // Product api-Name to download,\n                   you can specify multiple products by repeating the ``-p`` flag\n-lo, --lon_range   ``float float`` // Range of longitudes, ``-lo min max``\n-la, --lat_range   ``float float`` // Range of latitudes, ``-la min max``\n-dr, --date_range   ``yyyy-mm-dd yyyy-mm-dd`` // date range to download separated by a space\n\nOptional options:\n\n-f, --format       [``gtiff|netcdf4``] // File format to download, defaults to gtiff\n-n, --n_proc       ``int`` // Number of simultaneous calls to the server (default 4, pref <= 8)\n-o, --outfold      ``str`` // Path to output the data to (created if it does not exist)\n-v, --verbose      Switch to increase the output messages\n-c, --config_file  ``str`` // Path to condiguration file containing pre-defined parameters\n-z, --zipped       Switch to request the data zipped (if ``n_procs > 1``,\n                   multiple zip files will be received)\n\nCommand specifications: ``ts``\n----------------------------------------------\nGet one or multiple csv files with time-series.\n\nSee all available options by typing:\n\n    ``$ vds-api ts --help``\n\nRequired options:\n\n-p, --product      ``str`` // Product api-Name to download,\n                   you can specify multiple products by repeating the ``-p`` flag\n-dr, --date_range   ``yyyy-mm-dd yyyy-mm-dd`` // date range to download separated by a space\n\nAt least one of the following (yet multiple allowed):\n\n-ll, --latlon  ``float float`` // Latitude-Longitude pair to extract ts, can be multiple by repeating -ll\n-r, --roi      ``int`` // Region of interest id that can be referenced at maps.vandersat.com. Repeat -r for multiple\n\nOptional options:\n\n-f, --format       [``csv|json``] // File format to download, defaults to csv\n--masked           Switch to also download flagged data\n--av_win           ``int`` // Add averaging +/- days window column to output (supply full window)\n--clim             Switch to include climatology column in output\n-t                 ``int`` // Rootzone soil moisture parameter (days) (not used with streaming)\n-v, --verbose      Switch to increase the output messages\n-c, --config_file  text // Path to condiguration file containing pre-defined parameters\n-o, --outfold      ``str`` // Path to output the data to (created if it does not exist)\n\n\nV2 CLI Examples\n===============\n\nExample usage CLI V2 grid\n----------------------------------------------\nGet L-band for one month over NL in geotiff with 8 threads\n\n    ``$ vds-api grid -p SM-SMAP-LN-DESC_V003_100 -dr 2015-04-01 2015-04-30 -lo 3 8 -la 50 54 -o SM_L_Data -n 8 -v``\n\nGet L+C+X-band for two dates over NL in netcdf\n\n    ``$ vds-api grid -p SM-SMAP-LN-DESC_V003_100 -p SM-AMSR2-C1N-DESC_V003_100 -p SM-AMSR2-XN_V003_100 -f netcdf4 -dr 2016-07-01 2016-07-02 -lo 3.0 8.0 -la 50.0 54.0 -o NCData -v``\n\nExample usage CLI V2 ts\n----------------------------------------------\n\nGet L-band time-series for a region-of-interest (roi) and a lat-lon pair\n\n    ``$ vds-api ts -p SM-SMAP-LN-DESC_V003_100 -dr 2015-05-01 2020-01-01 -ll 52 4.5 -r 3249 -o tsfold -v``\n\nGet time-series with all additional columns\n\n    ``$ vds-api ts -p SM-SMAP-LN-DESC_V003_100 -dr 2015-04-01 2019-01-01 -ll 52 4.5 -o tsfold --masked --av_win 35 --clim -t 20 -v``\n\n\nExample usage Python API\n=========================\n\nAsynchronous requests can easily be downloaded using the ``VdsApiV2`` class.\nFor downloading of the desired files, the following steps need to be taken:\n\nAPI v2\n------\nFor the version 2 api, three steps have to be taken to download data from the api which are all methods of the ``VdsApiV2`` class:\n 1. Generate a request\n        Configure gridded data download or time-series download\n        through one of ``gen_time_series_requests()`` or ``gen_gridded_data_request()``\n 2. Submit request\n        After generating all desired URIs, submit these with ``submit_async_requests()``\n        to start the processing of these jobs\n 3. Download files\n        Get all data using ``download_async_files()``\n\n**Initialize class**\n\n.. code-block:: python\n\n    from vds_api_client import VdsApiV2\n\n    # Choose one of the following options to initialize\n    vds = VdsApiV2('username', 'password')\n    vds = VdsApiV2()  # extract login from $VDS_USER and $VDS_PASS\n\n\n**Impersonate user**\n\nWhen a user manages another account, it can impersonate this managed acount\nwhich means that all requests will be done as if the impersonated user has made them\n\n.. code-block:: python\n\n    vds = VdsApiV2('manager@company.com', 'password')\n\n    # Start impersonation\n    vds.impersonate('user@company.com')\n\n    # do_requests\n\n    # End impersonation\n    vds.forget()\n\n**Gridded data example [asynchronous]**\n\nRequest raster data using the `products/<api_name>/gridded-data` endpoint\n\n.. code-block:: python\n\n    from vds_api_client import VdsApiV2\n\n    vds = VdsApiV2()\n\n    vds.set_outfold('testdata/tiff')  # Created if it does not exist\n    vds.gen_gridded_data_request(products=['SM-SMAP-LN-DESC_V003_100', 'SM-AMSR2-XN-DESC_V003_100'],\n                                 start_date='2015-10-01', end_date='2016-09-30',\n                                 lat_min=-3.15, lat_max=-1.5, lon_min=105, lon_max=107,\n                                 nrequests=4)\n    vds.submit_async_requests()\n    vds.download_async_files()\n\n    # Get information on the downloaded files\n    vds.summary()\n\n**Time-series example [asynchronous]**\n\nRequest time-series data using the `products/<api_name>/[point|roi]-time-series` endpoints\n\n.. code-block:: python\n\n    from vds_api_client import VdsApiV2\n    vds = VdsApiV2()\n\n    vds.set_outfold('testdata/csv')  # Created if it does not exist\n    vds.gen_time_series_requests(products=['SM-XN_V001_100'],\n                                 start_time='2018-01-01', end_time='2018-01-03',\n                                 lons=[6.5], lats=[41.5], rois=[527, 811])\n    vds.submit_asynch_requests()\n    vds.download_async_files()\n\n    # Get information on the downloaded files\n    vds.summary()\n\n\n**Re-download previous requests**\n\nRe-download data using previously generated uuids. Note that data is not stored indefinitely,\nbut within 7 days you should be able to re-download your data.\n\n.. code-block:: python\n\n    from vds_api_client import VdsApiV2\n    vds = VdsApiV2()\n\n    # Choose from\n    vds.uuids.append('5742540a-cf87-49dd-a6e7-d484de137324')\n    vds.queue_uuids_files()\n    # or\n    vds.queue_uuids_files(uuids=['57f9950a-4e41-49dd-a6e7-d484de137324'])\n\n\n**Get a single point value**\n\nExtract a single value based on a product-coordinate using the `products/<api-name>/point-value`\nendpoint\n\n.. code-block:: python\n\n    from vds_api_client import VdsApiV2\n\n    vds = VdsApiV2()\n\n    # Load using the roi-id\n    val = vds.get_value('SM-XN_V001_100', '2020-04-01', lon=20.6, 40.4)\n\n\n\n**Load Roi time-series as pandas dataframe [synchronous]**\n\nRequest roi time-series data using the `products/<api_name>/roi-time-series-sync` endpoint\nand load the result as a pandas.DataFrame\n\n.. code-block:: python\n\n    from vds_api_client import VdsApiV2\n\n    vds = VdsApiV2()\n\n    # Load using the roi-id\n    df1 = vds.get_roi_df('SM-XN_V001_100', 2464, '2016-01-01', '2018-12-31')\n\n    # Load using the roi-name\n    df2 = vds.get_roi_df('SM-XN_V001_100', 'MyArea', '2016-01-01', '2018-12-31')\n\nROIS\n------\n\nKnowing and using the regions of interest (rois) attached to your account is now\neasier using the client methods that allow you to filter the rois.\n\n.. code-block:: python\n\n    from vds_api_client import VdsApiV2\n\n    vds = VdsApiV2()\n\n    print(vds.rois)\n\n.. parsed-literal::\n     # ID # |       # Name #       |   # Area #   |       # Description #\n    ============================================================================\n       3249 | GH                   | 3.227e+04 ha | Groene hart cirkel\n       3970 | Luxemburg            | 2.593e+05 ha | Administrative Country Boundary\n       7046 | Ernange              | 7.244e+02 ha | Ernange area for Kisters / SPW\n       9211 | Delete This          | 4.128e+04 ha | Selection to Delete\n       9212 | Delete also this one | 7.387e+04 ha | Selection to Delete\n\nBut now, also filters can be applied to select Rois based on a criterium,\nand give the corresponding ids:\n\n.. code-block:: python\n\n    rois_filtered = vds.rois.filter(min_id=100,\n                                    area_min=200,\n                                    description_regex='Delete')\n    print(rois_filtered)\n    print(rois_filtered.ids_to_list())\n\n.. parsed-literal::\n\n    # ID # |       # Name #       |   # Area #   |       # Description #\n    ============================================================================\n      9211 | Delete This          | 4.128e+04 ha | Selection to Delete\n      9212 | Delete also this one | 7.387e+04 ha | Selection to Delete\n\n    [9211, 9212]\n\nDeleting ROIS from your account is supported through the `delete_rois_from_account()` method.\nIt expects a list of integers, or a filtered Rois instance. Now we can delete our Rois\nquite easily like:\n\n.. code-block:: python\n\n    vds.delete_rois_from_account(vds.rois.filter(description_regex='Selection to Delete'))", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.vandersat.com/", "keywords": "", "license": "none", "maintainer": "", "maintainer_email": "", "name": "vds-api-client", "package_url": "https://pypi.org/project/vds-api-client/", "platform": "", "project_url": "https://pypi.org/project/vds-api-client/", "project_urls": {"Homepage": "https://www.vandersat.com/"}, "release_url": "https://pypi.org/project/vds-api-client/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "VanderSat API client package", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>(Command line) interface to download data batches directly from the VanderSat API</p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>Using this module, one can get data from the VanderSat API using either:</p>\n<ul>\n<li>Command line</li>\n<li>Python console</li>\n</ul>\n<p>Compatible for Linux, Mac and Windows\nPython &gt;3.6</p>\n<p>This package offers an easy interface to the asynchronous endpoints offered by\nthe <a href=\"https://maps.vandersat.com/api/v2/\" rel=\"nofollow\">VanderSat API</a>. However, not all available\nendpoints can be accessed through this package.</p>\n<div id=\"required-packages\">\n<h3>Required packages</h3>\n<ul>\n<li>click</li>\n<li>requests</li>\n<li>pandas</li>\n<li>click_datetime</li>\n<li>joblib</li>\n</ul>\n</div>\n<div id=\"setting-up-an-environment\">\n<h3>Setting up an environment</h3>\n<p>If you don\u2019t have an environment yet or would like a new one, use the following line to make a new one using <a href=\"https://docs.conda.io/en/latest/\" rel=\"nofollow\">conda</a></p>\n<blockquote>\n<tt>$ conda create <span class=\"pre\">-n</span> vds_api <span class=\"pre\">-c</span> <span class=\"pre\">conda-forge</span> python=3 requests <span class=\"pre\">\"click&gt;=7\"</span> pandas joblib pip</tt></blockquote>\n<p>activate it</p>\n<blockquote>\n<tt>$ conda activate vds_api</tt></blockquote>\n<p>and follow the installation steps</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>The package can be installed directly from PyPI. Activate your environment and then install with</p>\n<blockquote>\n<tt>$ pip install vds_api_client</tt></blockquote>\n<p>With this activated environment one can access the vds cli with</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span></tt></blockquote>\n<p>(If not, your installation did not succeed)</p>\n</div>\n<div id=\"available-cli-commands\">\n<h3>Available CLI commands</h3>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span></tt></blockquote>\n<p>will show all available commands which should include:</p>\n<ul>\n<li><tt>grid</tt> - download gridded data</li>\n<li><tt>info</tt> - Show info for this account</li>\n<li><tt>test</tt> - test connection, credentials and if api is operational</li>\n<li><tt>ts</tt> - download time-series as csv over points or rois</li>\n</ul>\n<p>Calling any of these commands should be done after suppliying credentials:</p>\n<blockquote>\n<tt>$ vds api <span class=\"pre\">-u</span> [username] <span class=\"pre\">-p</span> [password] [command]</tt></blockquote>\n<p>And it is always a good idea to start with a test:</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> <span class=\"pre\">-u</span> [username] <span class=\"pre\">-p</span> [password] test</tt></blockquote>\n</div>\n<div id=\"credentials\">\n<h3>Credentials</h3>\n<p>For each api call using the cli, the credentials need to be supplied.\nThese can be parsed along with the call by typing them explicitly like:</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> <span class=\"pre\">-u</span> [username] <span class=\"pre\">-p</span> [password] [command]</tt></blockquote>\n<p>However, it is also convenient to store the credentials so they don\u2019t have to be\ntyped each time. <a href=\"https://www.schrodinger.com/kb/1842\" rel=\"nofollow\">Set the environment variables</a>\n<tt>$VDS_USER</tt> and <tt>$VDS_PASS</tt>\nwith the correct values to automatically fill in your credentials.</p>\n<div>\n<p>Note</p>\n<p><strong>From this point on, the credentials don\u2019t have to be parsed explicitly anymore thus the syntax reduces to:</strong></p>\n<p><tt>$ <span class=\"pre\">vds-api</span> [command]</tt></p>\n</div>\n</div>\n<div id=\"impersonation\">\n<h3>Impersonation</h3>\n<p>If a user manages another VanderSat API user account, it can impersonate this user.\nThrough the CLI this can also be done using the <tt><span class=\"pre\">--impersonate</span></tt> flag. e.g.</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> <span class=\"pre\">-u</span> manager@company.com <span class=\"pre\">-p</span> password <span class=\"pre\">--impersonate</span> \"user@company.com\" [command]</tt></blockquote>\n<p>or when credentials were stored already</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> <span class=\"pre\">--impersonate</span> \"user@company.com\" [command]</tt></blockquote>\n</div>\n<div id=\"command-specifications-info\">\n<h3>Command specifications: <tt>info</tt></h3>\n<p>Get a summary of all user information. The shown information contains the following:</p>\n<ul>\n<li>registred user information (name, email, role, etc)</li>\n<li>registred products (api-name | product-name)</li>\n<li>roi information</li>\n</ul>\n<p>All info is shown by default but it is also possible to only show part of it with the following options:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-u</span>, <span class=\"option\">--user</span></kbd></td>\n<td>show user info</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-p</span>, <span class=\"option\">--product_list</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>show product-list</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-r</span>, <span class=\"option\">--roi</span></kbd></td>\n<td>show roi info</td></tr>\n</tbody>\n</table>\n<p>E.g. to show all available products, type:</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> info <span class=\"pre\">-p</span></tt></blockquote>\n</div>\n<div id=\"command-specifications-grid\">\n<h3>Command specifications: <tt>grid</tt></h3>\n<p>Get one or multiple gridded data files in GeoTIFF or NetCDF.</p>\n<p>See all available options by typing:</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> grid <span class=\"pre\">--help</span></tt></blockquote>\n<p>Required options:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-p</span>, <span class=\"option\">--product</span></kbd></td>\n<td><tt>str</tt> // Product api-Name to download,\nyou can specify multiple products by repeating the <tt><span class=\"pre\">-p</span></tt> flag</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-l<var>o</var></span>, <span class=\"option\">--lon_range</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><tt>float float</tt> // Range of longitudes, <tt><span class=\"pre\">-lo</span> min max</tt></td></tr>\n<tr><td>\n<kbd><span class=\"option\">-l<var>a</var></span>, <span class=\"option\">--lat_range</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><tt>float float</tt> // Range of latitudes, <tt><span class=\"pre\">-la</span> min max</tt></td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d<var>r</var></span>, <span class=\"option\">--date_range</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><tt><span class=\"pre\">yyyy-mm-dd</span> <span class=\"pre\">yyyy-mm-dd</span></tt> // date range to download separated by a space</td></tr>\n</tbody>\n</table>\n<p>Optional options:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-f</span>, <span class=\"option\">--format</span></kbd></td>\n<td>[<tt>gtiff|netcdf4</tt>] // File format to download, defaults to gtiff</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-n</span>, <span class=\"option\">--n_proc</span></kbd></td>\n<td><tt>int</tt> // Number of simultaneous calls to the server (default 4, pref &lt;= 8)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-o</span>, <span class=\"option\">--outfold</span></kbd></td>\n<td><tt>str</tt> // Path to output the data to (created if it does not exist)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--verbose</span></kbd></td>\n<td>Switch to increase the output messages</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c</span>, <span class=\"option\">--config_file</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><tt>str</tt> // Path to condiguration file containing pre-defined parameters</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-z</span>, <span class=\"option\">--zipped</span></kbd></td>\n<td>Switch to request the data zipped (if <tt>n_procs &gt; 1</tt>,\nmultiple zip files will be received)</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"command-specifications-ts\">\n<h3>Command specifications: <tt>ts</tt></h3>\n<p>Get one or multiple csv files with time-series.</p>\n<p>See all available options by typing:</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> ts <span class=\"pre\">--help</span></tt></blockquote>\n<p>Required options:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-p</span>, <span class=\"option\">--product</span></kbd></td>\n<td><tt>str</tt> // Product api-Name to download,\nyou can specify multiple products by repeating the <tt><span class=\"pre\">-p</span></tt> flag</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d<var>r</var></span>, <span class=\"option\">--date_range</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td><tt><span class=\"pre\">yyyy-mm-dd</span> <span class=\"pre\">yyyy-mm-dd</span></tt> // date range to download separated by a space</td></tr>\n</tbody>\n</table>\n<p>At least one of the following (yet multiple allowed):</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-l<var>l</var></span>, <span class=\"option\">--latlon</span></kbd></td>\n<td><tt>float float</tt> // Latitude-Longitude pair to extract ts, can be multiple by repeating -ll</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-r</span>, <span class=\"option\">--roi</span></kbd></td>\n<td><tt>int</tt> // Region of interest id that can be referenced at maps.vandersat.com. Repeat -r for multiple</td></tr>\n</tbody>\n</table>\n<p>Optional options:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-f</span>, <span class=\"option\">--format</span></kbd></td>\n<td>[<tt>csv|json</tt>] // File format to download, defaults to csv</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--masked</span></kbd></td>\n<td>Switch to also download flagged data</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--av_win</span></kbd></td>\n<td><tt>int</tt> // Add averaging +/- days window column to output (supply full window)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--clim</span></kbd></td>\n<td>Switch to include climatology column in output</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-t</span></kbd></td>\n<td><tt>int</tt> // Rootzone soil moisture parameter (days) (not used with streaming)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--verbose</span></kbd></td>\n<td>Switch to increase the output messages</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c</span>, <span class=\"option\">--config_file</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>text // Path to condiguration file containing pre-defined parameters</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-o</span>, <span class=\"option\">--outfold</span></kbd></td>\n<td><tt>str</tt> // Path to output the data to (created if it does not exist)</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"v2-cli-examples\">\n<h2>V2 CLI Examples</h2>\n<div id=\"example-usage-cli-v2-grid\">\n<h3>Example usage CLI V2 grid</h3>\n<p>Get L-band for one month over NL in geotiff with 8 threads</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> grid <span class=\"pre\">-p</span> <span class=\"pre\">SM-SMAP-LN-DESC_V003_100</span> <span class=\"pre\">-dr</span> <span class=\"pre\">2015-04-01</span> <span class=\"pre\">2015-04-30</span> <span class=\"pre\">-lo</span> 3 8 <span class=\"pre\">-la</span> 50 54 <span class=\"pre\">-o</span> SM_L_Data <span class=\"pre\">-n</span> 8 <span class=\"pre\">-v</span></tt></blockquote>\n<p>Get L+C+X-band for two dates over NL in netcdf</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> grid <span class=\"pre\">-p</span> <span class=\"pre\">SM-SMAP-LN-DESC_V003_100</span> <span class=\"pre\">-p</span> <span class=\"pre\">SM-AMSR2-C1N-DESC_V003_100</span> <span class=\"pre\">-p</span> <span class=\"pre\">SM-AMSR2-XN_V003_100</span> <span class=\"pre\">-f</span> netcdf4 <span class=\"pre\">-dr</span> <span class=\"pre\">2016-07-01</span> <span class=\"pre\">2016-07-02</span> <span class=\"pre\">-lo</span> 3.0 8.0 <span class=\"pre\">-la</span> 50.0 54.0 <span class=\"pre\">-o</span> NCData <span class=\"pre\">-v</span></tt></blockquote>\n</div>\n<div id=\"example-usage-cli-v2-ts\">\n<h3>Example usage CLI V2 ts</h3>\n<p>Get L-band time-series for a region-of-interest (roi) and a lat-lon pair</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> ts <span class=\"pre\">-p</span> <span class=\"pre\">SM-SMAP-LN-DESC_V003_100</span> <span class=\"pre\">-dr</span> <span class=\"pre\">2015-05-01</span> <span class=\"pre\">2020-01-01</span> <span class=\"pre\">-ll</span> 52 4.5 <span class=\"pre\">-r</span> 3249 <span class=\"pre\">-o</span> tsfold <span class=\"pre\">-v</span></tt></blockquote>\n<p>Get time-series with all additional columns</p>\n<blockquote>\n<tt>$ <span class=\"pre\">vds-api</span> ts <span class=\"pre\">-p</span> <span class=\"pre\">SM-SMAP-LN-DESC_V003_100</span> <span class=\"pre\">-dr</span> <span class=\"pre\">2015-04-01</span> <span class=\"pre\">2019-01-01</span> <span class=\"pre\">-ll</span> 52 4.5 <span class=\"pre\">-o</span> tsfold <span class=\"pre\">--masked</span> <span class=\"pre\">--av_win</span> 35 <span class=\"pre\">--clim</span> <span class=\"pre\">-t</span> 20 <span class=\"pre\">-v</span></tt></blockquote>\n</div>\n</div>\n<div id=\"example-usage-python-api\">\n<h2>Example usage Python API</h2>\n<p>Asynchronous requests can easily be downloaded using the <tt>VdsApiV2</tt> class.\nFor downloading of the desired files, the following steps need to be taken:</p>\n<div id=\"api-v2\">\n<h3>API v2</h3>\n<dl>\n<dt>For the version 2 api, three steps have to be taken to download data from the api which are all methods of the <tt>VdsApiV2</tt> class:</dt>\n<dd><ol>\n<li><dl>\n<dt>Generate a request</dt>\n<dd>Configure gridded data download or time-series download\nthrough one of <tt>gen_time_series_requests()</tt> or <tt>gen_gridded_data_request()</tt></dd>\n</dl>\n</li>\n<li><dl>\n<dt>Submit request</dt>\n<dd>After generating all desired URIs, submit these with <tt>submit_async_requests()</tt>\nto start the processing of these jobs</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Download files</dt>\n<dd>Get all data using <tt>download_async_files()</tt></dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n<p><strong>Initialize class</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vds_api_client</span> <span class=\"kn\">import</span> <span class=\"n\">VdsApiV2</span>\n\n<span class=\"c1\"># Choose one of the following options to initialize</span>\n<span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>\n<span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">()</span>  <span class=\"c1\"># extract login from $VDS_USER and $VDS_PASS</span>\n</pre>\n<p><strong>Impersonate user</strong></p>\n<p>When a user manages another account, it can impersonate this managed acount\nwhich means that all requests will be done as if the impersonated user has made them</p>\n<pre><span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">(</span><span class=\"s1\">'manager@company.com'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Start impersonation</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">impersonate</span><span class=\"p\">(</span><span class=\"s1\">'user@company.com'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># do_requests</span>\n\n<span class=\"c1\"># End impersonation</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">forget</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Gridded data example [asynchronous]</strong></p>\n<p>Request raster data using the <cite>products/&lt;api_name&gt;/gridded-data</cite> endpoint</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vds_api_client</span> <span class=\"kn\">import</span> <span class=\"n\">VdsApiV2</span>\n\n<span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">()</span>\n\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">set_outfold</span><span class=\"p\">(</span><span class=\"s1\">'testdata/tiff'</span><span class=\"p\">)</span>  <span class=\"c1\"># Created if it does not exist</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">gen_gridded_data_request</span><span class=\"p\">(</span><span class=\"n\">products</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'SM-SMAP-LN-DESC_V003_100'</span><span class=\"p\">,</span> <span class=\"s1\">'SM-AMSR2-XN-DESC_V003_100'</span><span class=\"p\">],</span>\n                             <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"s1\">'2015-10-01'</span><span class=\"p\">,</span> <span class=\"n\">end_date</span><span class=\"o\">=</span><span class=\"s1\">'2016-09-30'</span><span class=\"p\">,</span>\n                             <span class=\"n\">lat_min</span><span class=\"o\">=-</span><span class=\"mf\">3.15</span><span class=\"p\">,</span> <span class=\"n\">lat_max</span><span class=\"o\">=-</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"n\">lon_min</span><span class=\"o\">=</span><span class=\"mi\">105</span><span class=\"p\">,</span> <span class=\"n\">lon_max</span><span class=\"o\">=</span><span class=\"mi\">107</span><span class=\"p\">,</span>\n                             <span class=\"n\">nrequests</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">submit_async_requests</span><span class=\"p\">()</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">download_async_files</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get information on the downloaded files</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Time-series example [asynchronous]</strong></p>\n<p>Request time-series data using the <cite>products/&lt;api_name&gt;/[point|roi]-time-series</cite> endpoints</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vds_api_client</span> <span class=\"kn\">import</span> <span class=\"n\">VdsApiV2</span>\n<span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">()</span>\n\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">set_outfold</span><span class=\"p\">(</span><span class=\"s1\">'testdata/csv'</span><span class=\"p\">)</span>  <span class=\"c1\"># Created if it does not exist</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">gen_time_series_requests</span><span class=\"p\">(</span><span class=\"n\">products</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'SM-XN_V001_100'</span><span class=\"p\">],</span>\n                             <span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"s1\">'2018-01-01'</span><span class=\"p\">,</span> <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"s1\">'2018-01-03'</span><span class=\"p\">,</span>\n                             <span class=\"n\">lons</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">6.5</span><span class=\"p\">],</span> <span class=\"n\">lats</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">41.5</span><span class=\"p\">],</span> <span class=\"n\">rois</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">527</span><span class=\"p\">,</span> <span class=\"mi\">811</span><span class=\"p\">])</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">submit_asynch_requests</span><span class=\"p\">()</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">download_async_files</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get information on the downloaded files</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Re-download previous requests</strong></p>\n<p>Re-download data using previously generated uuids. Note that data is not stored indefinitely,\nbut within 7 days you should be able to re-download your data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vds_api_client</span> <span class=\"kn\">import</span> <span class=\"n\">VdsApiV2</span>\n<span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Choose from</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">uuids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'5742540a-cf87-49dd-a6e7-d484de137324'</span><span class=\"p\">)</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">queue_uuids_files</span><span class=\"p\">()</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">queue_uuids_files</span><span class=\"p\">(</span><span class=\"n\">uuids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'57f9950a-4e41-49dd-a6e7-d484de137324'</span><span class=\"p\">])</span>\n</pre>\n<p><strong>Get a single point value</strong></p>\n<p>Extract a single value based on a product-coordinate using the <cite>products/&lt;api-name&gt;/point-value</cite>\nendpoint</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vds_api_client</span> <span class=\"kn\">import</span> <span class=\"n\">VdsApiV2</span>\n\n<span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Load using the roi-id</span>\n<span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'SM-XN_V001_100'</span><span class=\"p\">,</span> <span class=\"s1\">'2020-04-01'</span><span class=\"p\">,</span> <span class=\"n\">lon</span><span class=\"o\">=</span><span class=\"mf\">20.6</span><span class=\"p\">,</span> <span class=\"mf\">40.4</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Load Roi time-series as pandas dataframe [synchronous]</strong></p>\n<p>Request roi time-series data using the <cite>products/&lt;api_name&gt;/roi-time-series-sync</cite> endpoint\nand load the result as a pandas.DataFrame</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vds_api_client</span> <span class=\"kn\">import</span> <span class=\"n\">VdsApiV2</span>\n\n<span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Load using the roi-id</span>\n<span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">get_roi_df</span><span class=\"p\">(</span><span class=\"s1\">'SM-XN_V001_100'</span><span class=\"p\">,</span> <span class=\"mi\">2464</span><span class=\"p\">,</span> <span class=\"s1\">'2016-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2018-12-31'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load using the roi-name</span>\n<span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">get_roi_df</span><span class=\"p\">(</span><span class=\"s1\">'SM-XN_V001_100'</span><span class=\"p\">,</span> <span class=\"s1\">'MyArea'</span><span class=\"p\">,</span> <span class=\"s1\">'2016-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2018-12-31'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"rois\">\n<h3>ROIS</h3>\n<p>Knowing and using the regions of interest (rois) attached to your account is now\neasier using the client methods that allow you to filter the rois.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vds_api_client</span> <span class=\"kn\">import</span> <span class=\"n\">VdsApiV2</span>\n\n<span class=\"n\">vds</span> <span class=\"o\">=</span> <span class=\"n\">VdsApiV2</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">rois</span><span class=\"p\">)</span>\n</pre>\n<pre> # ID # |       # Name #       |   # Area #   |       # Description #\n============================================================================\n   3249 | GH                   | 3.227e+04 ha | Groene hart cirkel\n   3970 | Luxemburg            | 2.593e+05 ha | Administrative Country Boundary\n   7046 | Ernange              | 7.244e+02 ha | Ernange area for Kisters / SPW\n   9211 | Delete This          | 4.128e+04 ha | Selection to Delete\n   9212 | Delete also this one | 7.387e+04 ha | Selection to Delete\n</pre>\n<p>But now, also filters can be applied to select Rois based on a criterium,\nand give the corresponding ids:</p>\n<pre><span class=\"n\">rois_filtered</span> <span class=\"o\">=</span> <span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">rois</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">min_id</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n                                <span class=\"n\">area_min</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n                                <span class=\"n\">description_regex</span><span class=\"o\">=</span><span class=\"s1\">'Delete'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rois_filtered</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rois_filtered</span><span class=\"o\">.</span><span class=\"n\">ids_to_list</span><span class=\"p\">())</span>\n</pre>\n<pre># ID # |       # Name #       |   # Area #   |       # Description #\n============================================================================\n  9211 | Delete This          | 4.128e+04 ha | Selection to Delete\n  9212 | Delete also this one | 7.387e+04 ha | Selection to Delete\n\n[9211, 9212]\n</pre>\n<p>Deleting ROIS from your account is supported through the <cite>delete_rois_from_account()</cite> method.\nIt expects a list of integers, or a filtered Rois instance. Now we can delete our Rois\nquite easily like:</p>\n<pre><span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">delete_rois_from_account</span><span class=\"p\">(</span><span class=\"n\">vds</span><span class=\"o\">.</span><span class=\"n\">rois</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">description_regex</span><span class=\"o\">=</span><span class=\"s1\">'Selection to Delete'</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6933743, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "252653eb2256dab53ec241ae448ff911", "sha256": "e7ebec4545804bc5e3fcd7355e809bcb2625c1d066cf41f972adc9864922165c"}, "downloads": -1, "filename": "vds_api_client-2.0.0.tar.gz", "has_sig": false, "md5_digest": "252653eb2256dab53ec241ae448ff911", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37722, "upload_time": "2020-04-02T07:36:39", "upload_time_iso_8601": "2020-04-02T07:36:39.069867Z", "url": "https://files.pythonhosted.org/packages/bf/60/8a8ef5bc1ffbc81309e09e31fea22d38cbbcc8554fcc2b2989fb33815405/vds_api_client-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "252653eb2256dab53ec241ae448ff911", "sha256": "e7ebec4545804bc5e3fcd7355e809bcb2625c1d066cf41f972adc9864922165c"}, "downloads": -1, "filename": "vds_api_client-2.0.0.tar.gz", "has_sig": false, "md5_digest": "252653eb2256dab53ec241ae448ff911", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37722, "upload_time": "2020-04-02T07:36:39", "upload_time_iso_8601": "2020-04-02T07:36:39.069867Z", "url": "https://files.pythonhosted.org/packages/bf/60/8a8ef5bc1ffbc81309e09e31fea22d38cbbcc8554fcc2b2989fb33815405/vds_api_client-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:18 2020"}