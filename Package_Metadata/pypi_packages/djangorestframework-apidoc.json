{"info": {"author": "Jes\u00fas Espino Garc\u00eda", "author_email": "jespinog@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "Django REST Framework APIDoc\n============================\n\nLibrary to better documentation system for Django REST framework.\n\nThis support file based documentation and other markup languages like RestructuredText or Textile.\n\nConfiguration\n-------------\n\nTo configure apidoc in djangorestframework version <= 2.3.8, you need to monkey\npatch it. Add this line in a very first loaded models module\n\n.. code:: python\n  from rest_framework_apidoc.monkey import patch_api_view; patch_api_view()\n\nThen you have to configure your `VIEW_DESCRIPTION_FUNCTION` of `REST_FRAMEWORK`\nsetting to use the rest_framework_apidoc version:\n\n.. code:: python\n  REST_FRAMEWORK = {\n      ...,\n      'VIEW_DESCRIPTION_FUNCTION': 'rest_framework_apidoc.apidoc.get_view_description',\n      ...,\n  }\n\nThen you can configure your apidoc default documenter classes:\n\n.. code:: python\n  APIDOC_DEFAULT_DOCUMENTER_CLASSES = ['rest_framework_apidoc.apidoc.MDDocStringDocumenter']\n\nThe `APIDOC_DEFAULT_DOCUMENTER_CLASSES` default value is `['rest_framework_apidoc.apidoc.MDDocStringsDocumenter']`\n\nIf you use file based documentation, you can set the path to your documentation files:\n\nYou can override the default setting for a APIView adding the attribute `documenter_classes`.\n\n.. code:: python\n  APIDOC_DOCUMENTATION_PATH = \"my-api-documentation\"\n\nThe `APIDOC_DOCUMENTATION_PATH` default value is `apidoc`\n\nAPIDoc Mixins\n-------------\n\nThe documenter classes are composed by 2 types of mixings, the content mixins\nand the process mixins. The content mixins obtain the documentation text, and\nthe process mixing transform this text in another thing.\n\nContent mixins\n~~~~~~~~~~~~~~\n\n* **FileContentMixin**: Get the content from a file named like the url_name +\n  extension attribute of the class (if exists), and placed in the\n  `APIDOC_DOCUMENTATION_PATH`.\n* **DocStringContentMixin**: Get the content from the APIView doc string.\n\nProcess mixins\n~~~~~~~~~~~~~~\n\n* **MarkupProcessMixin**: Use django-markup to convert to html the content, based\n  on the markup class attribute.\n* **NoProcessMixin**: Do nothing\n* **SafeProcessMixin**: Mark as safe the content.\n\nDocumenter Classes\n------------------\n\nRSTFilesDocumenter\n~~~~~~~~~~~~~~~~~~\nComposed by FileContentMixin and MarkupProcessMixin with extension = \".rst\" and markup = \"restructuredtext\"\n\nRSTDocStringsDocumenter\n~~~~~~~~~~~~~~~~~~~~~~~\nComposed by DocStringContentMixin and MarkupProcessMixin with markup = \"restructuredtext\"\n\nMDFilesDocumenter\n~~~~~~~~~~~~~~~~~\nComposed by FileContentMixin and MarkupProcessMixin with extension = \".md\" and markup = \"markdown\"\n\nMDDocStringsDocumenter\n~~~~~~~~~~~~~~~~~~~~~~\nComposed by DocStringContentMixin and MarkupProcessMixin with markup = \"markdown\"\n\nTextileFilesDocumenter\n~~~~~~~~~~~~~~~~~~~~~~\nComposed by FileContentMixin and MarkupProcessMixin with extension = \".textile\" and markup = \"textile\"\n\nTextileDocStringsDocumenter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nComposed by DocStringContentMixin and MarkupProcessMixin with markup = \"textile\"\n\nTxtFilesDocumenter\n~~~~~~~~~~~~~~~~~~\nComposed by FileContentMixin and NoProcessMixin with extension = \".txt\"\n\nTxtDocStringsDocumenter\n~~~~~~~~~~~~~~~~~~~~~~~\nComposed by DocStringContentMixin and NoProcessMixin\n\nHtmlFilesDocumenter\n~~~~~~~~~~~~~~~~~~~\nComposed by FileContentMixin, SafeProcessMixin with extension = \".html\"\n\nHtmlDocStringsDocumenter\n~~~~~~~~~~~~~~~~~~~~~~~~\nComposed by DocStringContentMixin and SafeProcessMixin\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaleidos/djangorestframework-apidoc", "keywords": "django,api,rest,doc", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "djangorestframework-apidoc", "package_url": "https://pypi.org/project/djangorestframework-apidoc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/djangorestframework-apidoc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kaleidos/djangorestframework-apidoc"}, "release_url": "https://pypi.org/project/djangorestframework-apidoc/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Modular documentation generator for rest framwork apis", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Django REST Framework APIDoc<br>============================<br><br>Library to better documentation system for Django REST framework.<br><br>This support file based documentation and other markup languages like RestructuredText or Textile.<br><br>Configuration<br>-------------<br><br>To configure apidoc in djangorestframework version &lt;= 2.3.8, you need to monkey<br>patch it. Add this line in a very first loaded models module<br><br>.. code:: python<br>  from rest_framework_apidoc.monkey import patch_api_view; patch_api_view()<br><br>Then you have to configure your `VIEW_DESCRIPTION_FUNCTION` of `REST_FRAMEWORK`<br>setting to use the rest_framework_apidoc version:<br><br>.. code:: python<br>  REST_FRAMEWORK = {<br>      ...,<br>      'VIEW_DESCRIPTION_FUNCTION': 'rest_framework_apidoc.apidoc.get_view_description',<br>      ...,<br>  }<br><br>Then you can configure your apidoc default documenter classes:<br><br>.. code:: python<br>  APIDOC_DEFAULT_DOCUMENTER_CLASSES = ['rest_framework_apidoc.apidoc.MDDocStringDocumenter']<br><br>The `APIDOC_DEFAULT_DOCUMENTER_CLASSES` default value is `['rest_framework_apidoc.apidoc.MDDocStringsDocumenter']`<br><br>If you use file based documentation, you can set the path to your documentation files:<br><br>You can override the default setting for a APIView adding the attribute `documenter_classes`.<br><br>.. code:: python<br>  APIDOC_DOCUMENTATION_PATH = \"my-api-documentation\"<br><br>The `APIDOC_DOCUMENTATION_PATH` default value is `apidoc`<br><br>APIDoc Mixins<br>-------------<br><br>The documenter classes are composed by 2 types of mixings, the content mixins<br>and the process mixins. The content mixins obtain the documentation text, and<br>the process mixing transform this text in another thing.<br><br>Content mixins<br>~~~~~~~~~~~~~~<br><br>* **FileContentMixin**: Get the content from a file named like the url_name +<br>  extension attribute of the class (if exists), and placed in the<br>  `APIDOC_DOCUMENTATION_PATH`.<br>* **DocStringContentMixin**: Get the content from the APIView doc string.<br><br>Process mixins<br>~~~~~~~~~~~~~~<br><br>* **MarkupProcessMixin**: Use django-markup to convert to html the content, based<br>  on the markup class attribute.<br>* **NoProcessMixin**: Do nothing<br>* **SafeProcessMixin**: Mark as safe the content.<br><br>Documenter Classes<br>------------------<br><br>RSTFilesDocumenter<br>~~~~~~~~~~~~~~~~~~<br>Composed by FileContentMixin and MarkupProcessMixin with extension = \".rst\" and markup = \"restructuredtext\"<br><br>RSTDocStringsDocumenter<br>~~~~~~~~~~~~~~~~~~~~~~~<br>Composed by DocStringContentMixin and MarkupProcessMixin with markup = \"restructuredtext\"<br><br>MDFilesDocumenter<br>~~~~~~~~~~~~~~~~~<br>Composed by FileContentMixin and MarkupProcessMixin with extension = \".md\" and markup = \"markdown\"<br><br>MDDocStringsDocumenter<br>~~~~~~~~~~~~~~~~~~~~~~<br>Composed by DocStringContentMixin and MarkupProcessMixin with markup = \"markdown\"<br><br>TextileFilesDocumenter<br>~~~~~~~~~~~~~~~~~~~~~~<br>Composed by FileContentMixin and MarkupProcessMixin with extension = \".textile\" and markup = \"textile\"<br><br>TextileDocStringsDocumenter<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>Composed by DocStringContentMixin and MarkupProcessMixin with markup = \"textile\"<br><br>TxtFilesDocumenter<br>~~~~~~~~~~~~~~~~~~<br>Composed by FileContentMixin and NoProcessMixin with extension = \".txt\"<br><br>TxtDocStringsDocumenter<br>~~~~~~~~~~~~~~~~~~~~~~~<br>Composed by DocStringContentMixin and NoProcessMixin<br><br>HtmlFilesDocumenter<br>~~~~~~~~~~~~~~~~~~~<br>Composed by FileContentMixin, SafeProcessMixin with extension = \".html\"<br><br>HtmlDocStringsDocumenter<br>~~~~~~~~~~~~~~~~~~~~~~~~<br>Composed by DocStringContentMixin and SafeProcessMixin<br>\n          </div>"}, "last_serial": 878882, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e01bfcd7c0dfbc35200016bc39bc94e7", "sha256": "22f90a7ce3490133ad6c21af670a47a7f8f8f1b014e0b097c11af7ff4c83a13d"}, "downloads": -1, "filename": "djangorestframework-apidoc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e01bfcd7c0dfbc35200016bc39bc94e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5406, "upload_time": "2013-10-02T10:10:36", "upload_time_iso_8601": "2013-10-02T10:10:36.207732Z", "url": "https://files.pythonhosted.org/packages/5f/b7/ca36fe2dc41771b21d8f472970fd840d98414086cd77a864acb0f21bb49b/djangorestframework-apidoc-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e01bfcd7c0dfbc35200016bc39bc94e7", "sha256": "22f90a7ce3490133ad6c21af670a47a7f8f8f1b014e0b097c11af7ff4c83a13d"}, "downloads": -1, "filename": "djangorestframework-apidoc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e01bfcd7c0dfbc35200016bc39bc94e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5406, "upload_time": "2013-10-02T10:10:36", "upload_time_iso_8601": "2013-10-02T10:10:36.207732Z", "url": "https://files.pythonhosted.org/packages/5f/b7/ca36fe2dc41771b21d8f472970fd840d98414086cd77a864acb0f21bb49b/djangorestframework-apidoc-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:10 2020"}