{"info": {"author": "Sebastien Celles", "author_email": "s.celles@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Cython", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Office/Business :: Scheduling"], "description": "|Latest Version| |Supported Python versions| |Download format| |License|\n|Development Status| |Downloads| |Build Status| |Documentation Status|\n\npyade\n=====\n\nA minimal Python class to use ADE Web API for ADE Planning from\n`Adesoft <http://www.adesoft.com/>`__.\n\nThis is an unofficial development. I am in no way related to this\ncompany. Use it at your own risk.\n\nWORK IN PROGRESS\n\nUsage\n-----\n\nCommand Line Interface script\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou might first define 3 environment variables.\n\n::\n\n    export ADE_WEB_API_URL=\"https://server/jsp/webapi\"\n    export ADE_WEB_API_LOGIN=\"user_login\"\n    export ADE_WEB_API_PASSWORD=\"user_password\" \n\nThan you can run sample using:\n\n::\n\n    $ python sample/main.py\n\nYou can also pass url, login, password as optional parameters of command\nline interface using:\n\n::\n\n    $ python sample/main.py --url https://server/jsp/webapi --user user_login --password user_password\n\nInteractive usage\n~~~~~~~~~~~~~~~~~\n\nRun IPython using:\n\n::\n\n    $ ipython\n\nYou can use interactively this class\n\n::\n\n    In [1]: from pyade import ADEWebAPI, Config\n\nImport logging module and set level to ``logging.DEBUG``\n\n::\n\n    In [2]: import logging\n    In [3]: logging.basicConfig(level=logging.DEBUG)\n\nGet a config (etiher from environment variables)\n\n::\n\n    In [4]: config = Config.create()\n\nor passing parameter to ``Config.create`` method\n\n::\n\n    In [4]: config = Config.create(url='server', login='user_login', password='user_password')\n\nYou can safely display config in a console, your password will not\nappear.\n\n::\n\n    In [5]: config\n    Out[5]:\n    <Config {'url': 'https://server/jsp/webapi', 'login': 'user_login', 'password': '*********'}>\n\nBut you can access to any key like a dict. For example:\n\n::\n\n    In [6]: config['url']\n    Out[6]: 'https://server/jsp/webapi'\n\nSo caution, your password is not in a safe place, as it's in memory.\n\nConfig can be unpacked using ``**`` operator and use as parameter for\n``ADEWebAPI`` constructor.\n\n::\n\n    In [7]: myade = ADEWebAPI(**config)\n\nYou can display methods of ADEWebAPI using \".\" and tab key\n\n::\n\n    In [8]: myade.\n    myade.connect                 myade.getActivities           myade.getProjects             myade.opt_params\n    myade.create_list_of_objects  myade.getCaracteristics       myade.getResources            myade.password\n    myade.disconnect              myade.getCosts                myade.hide_dict_values        myade.sessionId\n    myade.exception_factory       myade.getDate                 myade.logger                  myade.setProject\n    myade.factory                 myade.getEvents               myade.login                   myade.url\n\nMethod signature, docstring, ... can be printed using \"?\"\n\n::\n\n    In [8]: ?myade.connect\n    Signature: myade.connect()\n    Docstring: Connect to server\n    File:      ~/pyade/pyade/__init__.py\n    Type:      instancemethod\n\nLet's connect to server (using url, login and password saved in\n``myade`` instance of ``ADEWebAPI``)\n\n::\n\n    In [9]: myade.connect()\n    DEBUG:ADEWebAPI:send {'function': 'connect', 'login': 'user_login', 'password': '*********', 'sessionId': '14cef8679e2'}\n    INFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\n    DEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=connect&login=user_login&password=user_password&sessionId=14cef8679e2 HTTP/1.1\" 200 None\n    DEBUG:ADEWebAPI:<Response [200]>\n    DEBUG:ADEWebAPI:<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <session id=\"14cef878c17\"/>\n\n    Out[9]: True\n\nA list of dict describing projects can be returned using:\n\n::\n\n    In [10]: myade.getProjects()\n    DEBUG:ADEWebAPI:send {'function': 'getProjects', 'sessionId': '14cef8679e2'}\n    INFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\n    DEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=getProjects&sessionId=14cef8679e2 HTTP/1.1\" 200 None\n    DEBUG:ADEWebAPI:<Response [200]>\n    DEBUG:ADEWebAPI:<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <projects>\n        <project id=\"6\"/>\n        <project id=\"5\"/>\n    </projects>\n\n    Out[10]: [{'id': '6'}, {'id': '5'}]\n\nYou can also use optional parameters such as ``detail`` to get more\ndetails about each project.\n\n::\n\n    In [11]: myade.getProjects(detail=4)\n    DEBUG:ADEWebAPI:send {'function': 'getProjects', 'sessionId': '14cef8679e2', 'detail': 4}\n    INFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\n    DEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=getProjects&sessionId=14cef8679e2&detail=4 HTTP/1.1\" 200 None\n    DEBUG:ADEWebAPI:<Response [200]>\n    DEBUG:ADEWebAPI:<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <projects>\n        <project id=\"6\" name=\"2015-2016\" uid=\"1428406688761\" version=\"600\" loaded=\"true\"/>\n        <project id=\"5\" name=\"2014-2015\" uid=\"1364884711514\" version=\"520\" loaded=\"true\"/>\n    </projects>\n\n    Out[11]:\n    [{'id': '6',\n      'loaded': 'true',\n      'name': '2015-2016',\n      'uid': '1428406688761',\n      'version': '600'},\n     {'id': '5',\n      'loaded': 'true',\n      'name': '2014-2015',\n      'uid': '1364884711514',\n      'version': '520'}]\n\nYou can set ``myade`` instance of class ``ADEWebAPI`` in order methods\noutput list of objects instead of list of dictionaries\n\n::\n\n    In [12]: myade.create_list_of_objects(True)\n\n    In [13]: myade.getProjects()\n    DEBUG:ADEWebAPI:send {'function': 'getProjects', 'sessionId': '14cef8679e2'}\n    INFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\n    DEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=getProjects&sessionId=14cef8679e2 HTTP/1.1\" 200 None\n    DEBUG:ADEWebAPI:<Response [200]>\n    DEBUG:ADEWebAPI:<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <projects>\n        <project id=\"6\"/>\n        <project id=\"5\"/>\n    </projects>\n\n    Out[13]:\n    [Project({'id': '6'}),\n     Project({'id': '5'})]\n\nYou need to set current project. You probably won't be able to call most\nof methods without this.\n\n::\n\n    In [14]: myade.setProject(5)\n    Out[14]: True\n\n...\n\nDon't forget to disconnect from server before quitting.\n\n::\n\n    In [15]: myade.disconnect()\n    DEBUG:ADEWebAPI:send {'function': 'disconnect', 'sessionId': '14cef8679e2'}\n    INFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\n    DEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=disconnect&sessionId=14cef8679e2 HTTP/1.1\" 200 None\n    DEBUG:ADEWebAPI:<Response [200]>\n    DEBUG:ADEWebAPI:<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <disconnected sessionId=\"14cef8679e2\"/>\n\n    Out[15]: True\n\n.. |Latest Version| image:: https://pypip.in/version/pyade/badge.svg\n   :target: https://pypi.python.org/pypi/pyade/\n.. |Supported Python versions| image:: https://pypip.in/py_versions/pyade/badge.svg\n   :target: https://pypi.python.org/pypi/pyade/\n.. |Download format| image:: https://pypip.in/format/pyade/badge.svg\n   :target: https://pypi.python.org/pypi/pyade/\n.. |License| image:: https://pypip.in/license/pyade/badge.svg\n   :target: https://pypi.python.org/pypi/pyade/\n.. |Development Status| image:: https://pypip.in/status/pyade/badge.svg\n   :target: https://pypi.python.org/pypi/pyade/\n.. |Downloads| image:: https://pypip.in/download/pyade/badge.svg\n   :target: https://pypi.python.org/pypi/pyade/\n.. |Build Status| image:: https://travis-ci.org/scls19fr/pyade.svg\n   :target: https://travis-ci.org/scls19fr/pyade\n.. |Documentation Status| image:: https://readthedocs.org/projects/pyade/badge/?version=latest\n   :target: http://pyade.readthedocs.org/en/latest/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scls19fr/pyade", "keywords": "python ade client web api schedule scheduling software", "license": "GPL v3", "maintainer": null, "maintainer_email": null, "name": "pyade", "package_url": "https://pypi.org/project/pyade/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyade/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/scls19fr/pyade"}, "release_url": "https://pypi.org/project/pyade/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Python client for ADE web API", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/pyade/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a4632e7157b8868906ae0894f151892118f4c324/68747470733a2f2f70797069702e696e2f76657273696f6e2f70796164652f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/pyade/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20c787f0dee11d8af235bf09f28192d8bfc95fef/68747470733a2f2f70797069702e696e2f70795f76657273696f6e732f70796164652f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/pyade/\" rel=\"nofollow\"><img alt=\"Download format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75c27196e88b0eebd0ee58faa86b5842ac9d2dbd/68747470733a2f2f70797069702e696e2f666f726d61742f70796164652f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/pyade/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93db419c908709010478ce050eee91de7a902702/68747470733a2f2f70797069702e696e2f6c6963656e73652f70796164652f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pyade/\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6be5bdbb8ef4a1cda17fc41009ec2cd4d7303a81/68747470733a2f2f70797069702e696e2f7374617475732f70796164652f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/pyade/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d42f2ff2a087036657a8734bf9e889bd752fe8f/68747470733a2f2f70797069702e696e2f646f776e6c6f61642f70796164652f62616467652e737667\"></a> <a href=\"https://travis-ci.org/scls19fr/pyade\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/128bb5b87ff14a016907282fda35bb578078284e/68747470733a2f2f7472617669732d63692e6f72672f73636c73313966722f70796164652e737667\"></a> <a href=\"http://pyade.readthedocs.org/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48cecb74843388d7a5937f82c7ae634a61eb2837/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796164652f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<div id=\"pyade\">\n<h2>pyade</h2>\n<p>A minimal Python class to use ADE Web API for ADE Planning from\n<a href=\"http://www.adesoft.com/\" rel=\"nofollow\">Adesoft</a>.</p>\n<p>This is an unofficial development. I am in no way related to this\ncompany. Use it at your own risk.</p>\n<p>WORK IN PROGRESS</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"command-line-interface-script\">\n<h4>Command Line Interface script</h4>\n<p>You might first define 3 environment variables.</p>\n<pre>export ADE_WEB_API_URL=\"https://server/jsp/webapi\"\nexport ADE_WEB_API_LOGIN=\"user_login\"\nexport ADE_WEB_API_PASSWORD=\"user_password\"\n</pre>\n<p>Than you can run sample using:</p>\n<pre>$ python sample/main.py\n</pre>\n<p>You can also pass url, login, password as optional parameters of command\nline interface using:</p>\n<pre>$ python sample/main.py --url https://server/jsp/webapi --user user_login --password user_password\n</pre>\n</div>\n<div id=\"interactive-usage\">\n<h4>Interactive usage</h4>\n<p>Run IPython using:</p>\n<pre>$ ipython\n</pre>\n<p>You can use interactively this class</p>\n<pre>In [1]: from pyade import ADEWebAPI, Config\n</pre>\n<p>Import logging module and set level to <tt>logging.DEBUG</tt></p>\n<pre>In [2]: import logging\nIn [3]: logging.basicConfig(level=logging.DEBUG)\n</pre>\n<p>Get a config (etiher from environment variables)</p>\n<pre>In [4]: config = Config.create()\n</pre>\n<p>or passing parameter to <tt>Config.create</tt> method</p>\n<pre>In [4]: config = Config.create(url='server', login='user_login', password='user_password')\n</pre>\n<p>You can safely display config in a console, your password will not\nappear.</p>\n<pre>In [5]: config\nOut[5]:\n&lt;Config {'url': 'https://server/jsp/webapi', 'login': 'user_login', 'password': '*********'}&gt;\n</pre>\n<p>But you can access to any key like a dict. For example:</p>\n<pre>In [6]: config['url']\nOut[6]: 'https://server/jsp/webapi'\n</pre>\n<p>So caution, your password is not in a safe place, as it\u2019s in memory.</p>\n<p>Config can be unpacked using <tt>**</tt> operator and use as parameter for\n<tt>ADEWebAPI</tt> constructor.</p>\n<pre>In [7]: myade = ADEWebAPI(**config)\n</pre>\n<p>You can display methods of ADEWebAPI using \u201c.\u201d and tab key</p>\n<pre>In [8]: myade.\nmyade.connect                 myade.getActivities           myade.getProjects             myade.opt_params\nmyade.create_list_of_objects  myade.getCaracteristics       myade.getResources            myade.password\nmyade.disconnect              myade.getCosts                myade.hide_dict_values        myade.sessionId\nmyade.exception_factory       myade.getDate                 myade.logger                  myade.setProject\nmyade.factory                 myade.getEvents               myade.login                   myade.url\n</pre>\n<p>Method signature, docstring, \u2026 can be printed using \u201c?\u201d</p>\n<pre>In [8]: ?myade.connect\nSignature: myade.connect()\nDocstring: Connect to server\nFile:      ~/pyade/pyade/__init__.py\nType:      instancemethod\n</pre>\n<p>Let\u2019s connect to server (using url, login and password saved in\n<tt>myade</tt> instance of <tt>ADEWebAPI</tt>)</p>\n<pre>In [9]: myade.connect()\nDEBUG:ADEWebAPI:send {'function': 'connect', 'login': 'user_login', 'password': '*********', 'sessionId': '14cef8679e2'}\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=connect&amp;login=user_login&amp;password=user_password&amp;sessionId=14cef8679e2 HTTP/1.1\" 200 None\nDEBUG:ADEWebAPI:&lt;Response [200]&gt;\nDEBUG:ADEWebAPI:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;session id=\"14cef878c17\"/&gt;\n\nOut[9]: True\n</pre>\n<p>A list of dict describing projects can be returned using:</p>\n<pre>In [10]: myade.getProjects()\nDEBUG:ADEWebAPI:send {'function': 'getProjects', 'sessionId': '14cef8679e2'}\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=getProjects&amp;sessionId=14cef8679e2 HTTP/1.1\" 200 None\nDEBUG:ADEWebAPI:&lt;Response [200]&gt;\nDEBUG:ADEWebAPI:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;projects&gt;\n    &lt;project id=\"6\"/&gt;\n    &lt;project id=\"5\"/&gt;\n&lt;/projects&gt;\n\nOut[10]: [{'id': '6'}, {'id': '5'}]\n</pre>\n<p>You can also use optional parameters such as <tt>detail</tt> to get more\ndetails about each project.</p>\n<pre>In [11]: myade.getProjects(detail=4)\nDEBUG:ADEWebAPI:send {'function': 'getProjects', 'sessionId': '14cef8679e2', 'detail': 4}\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=getProjects&amp;sessionId=14cef8679e2&amp;detail=4 HTTP/1.1\" 200 None\nDEBUG:ADEWebAPI:&lt;Response [200]&gt;\nDEBUG:ADEWebAPI:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;projects&gt;\n    &lt;project id=\"6\" name=\"2015-2016\" uid=\"1428406688761\" version=\"600\" loaded=\"true\"/&gt;\n    &lt;project id=\"5\" name=\"2014-2015\" uid=\"1364884711514\" version=\"520\" loaded=\"true\"/&gt;\n&lt;/projects&gt;\n\nOut[11]:\n[{'id': '6',\n  'loaded': 'true',\n  'name': '2015-2016',\n  'uid': '1428406688761',\n  'version': '600'},\n {'id': '5',\n  'loaded': 'true',\n  'name': '2014-2015',\n  'uid': '1364884711514',\n  'version': '520'}]\n</pre>\n<p>You can set <tt>myade</tt> instance of class <tt>ADEWebAPI</tt> in order methods\noutput list of objects instead of list of dictionaries</p>\n<pre>In [12]: myade.create_list_of_objects(True)\n\nIn [13]: myade.getProjects()\nDEBUG:ADEWebAPI:send {'function': 'getProjects', 'sessionId': '14cef8679e2'}\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=getProjects&amp;sessionId=14cef8679e2 HTTP/1.1\" 200 None\nDEBUG:ADEWebAPI:&lt;Response [200]&gt;\nDEBUG:ADEWebAPI:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;projects&gt;\n    &lt;project id=\"6\"/&gt;\n    &lt;project id=\"5\"/&gt;\n&lt;/projects&gt;\n\nOut[13]:\n[Project({'id': '6'}),\n Project({'id': '5'})]\n</pre>\n<p>You need to set current project. You probably won\u2019t be able to call most\nof methods without this.</p>\n<pre>In [14]: myade.setProject(5)\nOut[14]: True\n</pre>\n<p>\u2026</p>\n<p>Don\u2019t forget to disconnect from server before quitting.</p>\n<pre>In [15]: myade.disconnect()\nDEBUG:ADEWebAPI:send {'function': 'disconnect', 'sessionId': '14cef8679e2'}\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): server\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /jsp/webapi?function=disconnect&amp;sessionId=14cef8679e2 HTTP/1.1\" 200 None\nDEBUG:ADEWebAPI:&lt;Response [200]&gt;\nDEBUG:ADEWebAPI:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;disconnected sessionId=\"14cef8679e2\"/&gt;\n\nOut[15]: True\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1520765, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a5db3cf6aa01c1973e6b65f7dd78eaa3", "sha256": "fa757a4f6ecd62fe43f06295596c05947d2b324b93bdbd820c35ec513a87f55d"}, "downloads": -1, "filename": "pyade-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a5db3cf6aa01c1973e6b65f7dd78eaa3", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11376, "upload_time": "2015-04-25T12:51:34", "upload_time_iso_8601": "2015-04-25T12:51:34.670550Z", "url": "https://files.pythonhosted.org/packages/8f/fa/1ce9bfe7a7bdbda70dbaa6bf5a3f94d4e15f34f8330ee0c0032fad631624/pyade-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f76b5d9d831ce8594f35469709d5b66", "sha256": "4528f476c654e3c003504d50532dd3b95e5b52f604dfa862c314e2b400fedf9f"}, "downloads": -1, "filename": "pyade-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7f76b5d9d831ce8594f35469709d5b66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8477, "upload_time": "2015-04-25T12:51:31", "upload_time_iso_8601": "2015-04-25T12:51:31.049722Z", "url": "https://files.pythonhosted.org/packages/d2/6a/17775232d024a32e88c73fe4e0b18a6f74535bbbab620c538bcf01e4b2ae/pyade-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "da7242cd2040784bbe5aeced61434565", "sha256": "7805c6fac912af5c5b3ad69ea68b3a303a7e57bade90558dcfb4e28b43e8cbd2"}, "downloads": -1, "filename": "pyade-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da7242cd2040784bbe5aeced61434565", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12206, "upload_time": "2015-04-25T14:01:22", "upload_time_iso_8601": "2015-04-25T14:01:22.142964Z", "url": "https://files.pythonhosted.org/packages/ed/b8/d8cc372660c178fb15d66c0e1920078ce451f66c13ecc05a492e2f4db9a8/pyade-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "565b7ed683500e9552d305bfd6b55951", "sha256": "31302541fa80abb850c3b4c378d25d47a90fb2cfdc8176321f1ea4231d0d6cb4"}, "downloads": -1, "filename": "pyade-0.0.2.tar.gz", "has_sig": false, "md5_digest": "565b7ed683500e9552d305bfd6b55951", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10811, "upload_time": "2015-04-25T14:01:19", "upload_time_iso_8601": "2015-04-25T14:01:19.001420Z", "url": "https://files.pythonhosted.org/packages/5c/a0/797c7a8947fd51c5ea9c5e7297dc246f6f6d3f0b3d1348d840302654123f/pyade-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da7242cd2040784bbe5aeced61434565", "sha256": "7805c6fac912af5c5b3ad69ea68b3a303a7e57bade90558dcfb4e28b43e8cbd2"}, "downloads": -1, "filename": "pyade-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da7242cd2040784bbe5aeced61434565", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12206, "upload_time": "2015-04-25T14:01:22", "upload_time_iso_8601": "2015-04-25T14:01:22.142964Z", "url": "https://files.pythonhosted.org/packages/ed/b8/d8cc372660c178fb15d66c0e1920078ce451f66c13ecc05a492e2f4db9a8/pyade-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "565b7ed683500e9552d305bfd6b55951", "sha256": "31302541fa80abb850c3b4c378d25d47a90fb2cfdc8176321f1ea4231d0d6cb4"}, "downloads": -1, "filename": "pyade-0.0.2.tar.gz", "has_sig": false, "md5_digest": "565b7ed683500e9552d305bfd6b55951", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10811, "upload_time": "2015-04-25T14:01:19", "upload_time_iso_8601": "2015-04-25T14:01:19.001420Z", "url": "https://files.pythonhosted.org/packages/5c/a0/797c7a8947fd51c5ea9c5e7297dc246f6f6d3f0b3d1348d840302654123f/pyade-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:59 2020"}