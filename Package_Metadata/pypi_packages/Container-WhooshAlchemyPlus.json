{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Welcome to Flask-WhooshAlchemyPlus!\n===================================\n\nForked from `gyllstromk/Flask-WhooshAlchemy <https://github.com/gyllstromk/Flask-WhooshAlchemy>`_\n\nFlask-WhooshAlchemyPlus is a Flask extension that integrates the text-search functionality of `Whoosh <https://bitbucket.org/mchaput/whoosh/wiki/Home>`_ with the ORM of `SQLAlchemy <http://www.sqlalchemy.org/>`_ for use in `Flask <http://flask.pocoo.org/>`_ applications.\n\nSource code and issue tracking at `GitHub <https://github.com/Revolution1/Flask-WhooshAlchemyPlus>`_.\n\n\nInstall\n-------\n\n::\n\n    $ pip install flask_whooshalchemyplus\n\nOr:\n\n::\n\n    $ git clone https://github.com/Revolution1/Flask-WhooshAlchemyPlus.git\n    $ cd Flask-WhooshAlchemyPlus && python setup.py install\n\nQuickstart\n----------\n\nLet's set up the environment and create our model:\n\n::\n\n    import flask_whooshalchemyplus\n\n    # set the location for the whoosh index\n    app.config['WHOOSH_BASE'] = 'path/to/whoosh/base'\n\n\n    class BlogPost(db.Model):\n      __tablename__ = 'blogpost'\n      __searchable__ = ['title', 'content']  # these fields will be indexed by whoosh\n      __analyzer__ = SimpleAnalyzer()        # configure analyzer; defaults to\n                                             # StemmingAnalyzer if not specified\n\n      id = app.db.Column(app.db.Integer, primary_key=True)\n      title = app.db.Column(app.db.Unicode)  # Indexed fields are either String,\n      content = app.db.Column(app.db.Text)   # Unicode, or Text\n      created = db.Column(db.DateTime, default=datetime.datetime.utcnow)\n\n    flask_whooshalchemyplus.init_app(app)    # initialize\n\nOnly two steps to get started:\n\n1) Set the ``WHOOSH_BASE`` to the path for the whoosh index. If not set, it will default to a directory called 'whoosh_index' in the directory from which the application is run.\n2) Add a ``__searchable__`` field to the model which specifies the fields (as ``str`` s) to be indexed .\n3) set ``WHOOSH_DISABLED`` to ``True`` to disable whoosh indexing .\n\nLet's create a post:\n\n::\n\n    db.session.add(\n        BlogPost(title='My cool title', content='This is the first post.')\n    ); db.session.commit()\n\nAfter the session is committed, our new ``BlogPost`` is indexed. Similarly, if the post is deleted, it will be removed from the Whoosh index.\n\n\nManually Indexing\n-----------------\n\nBy defualt records can be indexed only when the server is running.\nSo if you want to index them manually:\n\n::\n\n    from flask_whooshalchemyplus import index_all\n\n    index_all(app)\n\n\nText Searching\n--------------\n\nTo execute a simple search:\n\n::\n\n    results = BlogPost.query.whoosh_search('cool')\n\nThis will return all ``BlogPost`` instances in which at least one indexed field (i.e., 'title' or 'content') is a text match to the query. Results are ranked according to their relevance score, with the best match appearing first when iterating. The result of this call is a (subclass of) ``sqlalchemy.orm.query.Query`` object, so you can chain other SQL operations. For example::\n\n    two_days_ago = datetime.date.today() - datetime.timedelta(2)\n    recent_matches = BlogPost.query.whoosh_search('first').filter(\n        BlogPost.created >= two_days_ago)\n\nOr, in alternative (likely slower) order::\n\n    recent_matches = BlogPost.query.filter(\n        BlogPost.created >= two_days_ago).whoosh_search('first')\n\nWe can limit results::\n\n    # get 2 best results:\n    results = BlogPost.query.whoosh_search('cool', limit=2)\n\nBy default, the search is executed on all of the indexed fields as an OR conjunction. For example, if a model has 'title' and 'content' indicated as ``__searchable__``, a query will be checked against both fields, returning any instance whose title or content are a content match for the query. To specify particular fields to be checked, populate the ``fields`` parameter with the desired fields::\n\n    results = BlogPost.query.whoosh_search('cool', fields=('title',))\n\nBy default, results will only be returned if they contain all of the query terms (AND). To switch to an OR grouping, set the ``or_`` parameter to ``True``::\n\n    results = BlogPost.query.whoosh_search('cool', or_=True)\n\n\nIf you want ordinary text matching result too::\n\n    results =  BlogPost.query.whoosh_search('cool', like=True)\n\nThis acts like ``whoosh_search('cool') + SQL LIKE '%cool%'``\n\n\npure_whoosh\n------------------\n\nIf you want the ``whoosh.index.searcher().search()`` result::\n\n    results =  BlogPost.pure_whoosh(self, query, limit=None, fields=None, or_=False)\n\nWhooshDisabled context manager\n------------------------------\n\nTo disable whoosh indexing temporarily:\n\n::\n\n    with WhooshDisabled():\n        do sth.\n\n\nCHANGELOG\n---------\n\n- v0.7.5 :\n  \n  - feature: add WhooshDisabled context manager\n  - feature: add whoosh_index_all and init_app method\n  - refactory: indexing methods\n  - fix: index error: model has no attribute '__searchable__'\n\n- v0.7.4 :\n\n  - Feature: add fuzzy-searching using SQL LIKE\n\n- v0.7.3 :\n\n  - Fix: Chinese analyzer does not take affect\n\n- v0.7.2 :\n\n  - Fix: index_all cannot detect indexable models by itself\n\n- v0.7.1 :\n\n  - Feature: Indexing child module class `github issue #43 <https://github.com/gyllstromk/Flask-WhooshAlchemy/pull/43>`_\n  - Feature: Add python3 supprot\n  - Fix: Obey result sorting if caller explicitly uses order_by() on query `github pull request #32 <https://github.com/gyllstromk/Flask-WhooshAlchemy/pull/32>`_\n  - Fix: custom query_class usage `github pull request #35 <https://github.com/gyllstromk/Flask-WhooshAlchemy/pull/35>`_\n  - Feature: add ``WHOOSH_DISABLED`` option to disable whooshalchemyplus at runtime", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "Container-WhooshAlchemyPlus", "package_url": "https://pypi.org/project/Container-WhooshAlchemyPlus/", "platform": "any", "project_url": "https://pypi.org/project/Container-WhooshAlchemyPlus/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/Container-WhooshAlchemyPlus/0.7.5.post3/", "requires_dist": null, "requires_python": null, "summary": "Whoosh extension to Flask/SQLAlchemy which used in sina container", "version": "0.7.5.post3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Forked from <a href=\"https://github.com/gyllstromk/Flask-WhooshAlchemy\" rel=\"nofollow\">gyllstromk/Flask-WhooshAlchemy</a></p>\n<p>Flask-WhooshAlchemyPlus is a Flask extension that integrates the text-search functionality of <a href=\"https://bitbucket.org/mchaput/whoosh/wiki/Home\" rel=\"nofollow\">Whoosh</a> with the ORM of <a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a> for use in <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a> applications.</p>\n<p>Source code and issue tracking at <a href=\"https://github.com/Revolution1/Flask-WhooshAlchemyPlus\" rel=\"nofollow\">GitHub</a>.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>$ pip install flask_whooshalchemyplus\n</pre>\n<p>Or:</p>\n<pre>$ git clone https://github.com/Revolution1/Flask-WhooshAlchemyPlus.git\n$ cd Flask-WhooshAlchemyPlus &amp;&amp; python setup.py install\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Let\u2019s set up the environment and create our model:</p>\n<pre>import flask_whooshalchemyplus\n\n# set the location for the whoosh index\napp.config['WHOOSH_BASE'] = 'path/to/whoosh/base'\n\n\nclass BlogPost(db.Model):\n  __tablename__ = 'blogpost'\n  __searchable__ = ['title', 'content']  # these fields will be indexed by whoosh\n  __analyzer__ = SimpleAnalyzer()        # configure analyzer; defaults to\n                                         # StemmingAnalyzer if not specified\n\n  id = app.db.Column(app.db.Integer, primary_key=True)\n  title = app.db.Column(app.db.Unicode)  # Indexed fields are either String,\n  content = app.db.Column(app.db.Text)   # Unicode, or Text\n  created = db.Column(db.DateTime, default=datetime.datetime.utcnow)\n\nflask_whooshalchemyplus.init_app(app)    # initialize\n</pre>\n<p>Only two steps to get started:</p>\n<ol>\n<li>Set the <tt>WHOOSH_BASE</tt> to the path for the whoosh index. If not set, it will default to a directory called \u2018whoosh_index\u2019 in the directory from which the application is run.</li>\n<li>Add a <tt>__searchable__</tt> field to the model which specifies the fields (as <tt>str</tt> s) to be indexed .</li>\n<li>set <tt>WHOOSH_DISABLED</tt> to <tt>True</tt> to disable whoosh indexing .</li>\n</ol>\n<p>Let\u2019s create a post:</p>\n<pre>db.session.add(\n    BlogPost(title='My cool title', content='This is the first post.')\n); db.session.commit()\n</pre>\n<p>After the session is committed, our new <tt>BlogPost</tt> is indexed. Similarly, if the post is deleted, it will be removed from the Whoosh index.</p>\n</div>\n<div id=\"manually-indexing\">\n<h2>Manually Indexing</h2>\n<p>By defualt records can be indexed only when the server is running.\nSo if you want to index them manually:</p>\n<pre>from flask_whooshalchemyplus import index_all\n\nindex_all(app)\n</pre>\n</div>\n<div id=\"text-searching\">\n<h2>Text Searching</h2>\n<p>To execute a simple search:</p>\n<pre>results = BlogPost.query.whoosh_search('cool')\n</pre>\n<p>This will return all <tt>BlogPost</tt> instances in which at least one indexed field (i.e., \u2018title\u2019 or \u2018content\u2019) is a text match to the query. Results are ranked according to their relevance score, with the best match appearing first when iterating. The result of this call is a (subclass of) <tt>sqlalchemy.orm.query.Query</tt> object, so you can chain other SQL operations. For example:</p>\n<pre>two_days_ago = datetime.date.today() - datetime.timedelta(2)\nrecent_matches = BlogPost.query.whoosh_search('first').filter(\n    BlogPost.created &gt;= two_days_ago)\n</pre>\n<p>Or, in alternative (likely slower) order:</p>\n<pre>recent_matches = BlogPost.query.filter(\n    BlogPost.created &gt;= two_days_ago).whoosh_search('first')\n</pre>\n<p>We can limit results:</p>\n<pre># get 2 best results:\nresults = BlogPost.query.whoosh_search('cool', limit=2)\n</pre>\n<p>By default, the search is executed on all of the indexed fields as an OR conjunction. For example, if a model has \u2018title\u2019 and \u2018content\u2019 indicated as <tt>__searchable__</tt>, a query will be checked against both fields, returning any instance whose title or content are a content match for the query. To specify particular fields to be checked, populate the <tt>fields</tt> parameter with the desired fields:</p>\n<pre>results = BlogPost.query.whoosh_search('cool', fields=('title',))\n</pre>\n<p>By default, results will only be returned if they contain all of the query terms (AND). To switch to an OR grouping, set the <tt>or_</tt> parameter to <tt>True</tt>:</p>\n<pre>results = BlogPost.query.whoosh_search('cool', or_=True)\n</pre>\n<p>If you want ordinary text matching result too:</p>\n<pre>results =  BlogPost.query.whoosh_search('cool', like=True)\n</pre>\n<p>This acts like <tt><span class=\"pre\">whoosh_search('cool')</span> + SQL LIKE '%cool%'</tt></p>\n</div>\n<div id=\"pure-whoosh\">\n<h2>pure_whoosh</h2>\n<p>If you want the <tt><span class=\"pre\">whoosh.index.searcher().search()</span></tt> result:</p>\n<pre>results =  BlogPost.pure_whoosh(self, query, limit=None, fields=None, or_=False)\n</pre>\n</div>\n<div id=\"whooshdisabled-context-manager\">\n<h2>WhooshDisabled context manager</h2>\n<p>To disable whoosh indexing temporarily:</p>\n<pre>with WhooshDisabled():\n    do sth.\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>CHANGELOG</h2>\n<ul>\n<li>v0.7.5 :<ul>\n<li>feature: add WhooshDisabled context manager</li>\n<li>feature: add whoosh_index_all and init_app method</li>\n<li>refactory: indexing methods</li>\n<li>fix: index error: model has no attribute \u2018__searchable__\u2019</li>\n</ul>\n</li>\n<li>v0.7.4 :<ul>\n<li>Feature: add fuzzy-searching using SQL LIKE</li>\n</ul>\n</li>\n<li>v0.7.3 :<ul>\n<li>Fix: Chinese analyzer does not take affect</li>\n</ul>\n</li>\n<li>v0.7.2 :<ul>\n<li>Fix: index_all cannot detect indexable models by itself</li>\n</ul>\n</li>\n<li>v0.7.1 :<ul>\n<li>Feature: Indexing child module class <a href=\"https://github.com/gyllstromk/Flask-WhooshAlchemy/pull/43\" rel=\"nofollow\">github issue #43</a></li>\n<li>Feature: Add python3 supprot</li>\n<li>Fix: Obey result sorting if caller explicitly uses order_by() on query <a href=\"https://github.com/gyllstromk/Flask-WhooshAlchemy/pull/32\" rel=\"nofollow\">github pull request #32</a></li>\n<li>Fix: custom query_class usage <a href=\"https://github.com/gyllstromk/Flask-WhooshAlchemy/pull/35\" rel=\"nofollow\">github pull request #35</a></li>\n<li>Feature: add <tt>WHOOSH_DISABLED</tt> option to disable whooshalchemyplus at runtime</li>\n</ul>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2324945, "releases": {"0.7.5.post3": [{"comment_text": "", "digests": {"md5": "1ec2c389fbf549233ca89e04b79849f5", "sha256": "a60fc2f7c5115e48bcf0a86b8fa8a620130c37dccdf528b48504b880367c3987"}, "downloads": -1, "filename": "Container_WhooshAlchemyPlus-0.7.5.post3-py2.7.egg", "has_sig": false, "md5_digest": "1ec2c389fbf549233ca89e04b79849f5", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 14356, "upload_time": "2016-09-05T05:33:21", "upload_time_iso_8601": "2016-09-05T05:33:21.328755Z", "url": "https://files.pythonhosted.org/packages/8a/b2/337e8739d4bb6d0cc0a54debb46a994b2b6162e5c748e44f6b57c87969ba/Container_WhooshAlchemyPlus-0.7.5.post3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a663b567e6b25554817646ba5714befa", "sha256": "423ecf77954076ae7fa46c638c2b9aa8044fb1df68429fa11bc076231f3624ea"}, "downloads": -1, "filename": "Container-WhooshAlchemyPlus-0.7.5.post3.tar.gz", "has_sig": false, "md5_digest": "a663b567e6b25554817646ba5714befa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10813, "upload_time": "2016-09-05T05:33:17", "upload_time_iso_8601": "2016-09-05T05:33:17.407909Z", "url": "https://files.pythonhosted.org/packages/d3/fd/fd6b99be36263e8715212c26d9b6a0d1601dbfb3fd5beb6751eb297162b5/Container-WhooshAlchemyPlus-0.7.5.post3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ec2c389fbf549233ca89e04b79849f5", "sha256": "a60fc2f7c5115e48bcf0a86b8fa8a620130c37dccdf528b48504b880367c3987"}, "downloads": -1, "filename": "Container_WhooshAlchemyPlus-0.7.5.post3-py2.7.egg", "has_sig": false, "md5_digest": "1ec2c389fbf549233ca89e04b79849f5", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 14356, "upload_time": "2016-09-05T05:33:21", "upload_time_iso_8601": "2016-09-05T05:33:21.328755Z", "url": "https://files.pythonhosted.org/packages/8a/b2/337e8739d4bb6d0cc0a54debb46a994b2b6162e5c748e44f6b57c87969ba/Container_WhooshAlchemyPlus-0.7.5.post3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a663b567e6b25554817646ba5714befa", "sha256": "423ecf77954076ae7fa46c638c2b9aa8044fb1df68429fa11bc076231f3624ea"}, "downloads": -1, "filename": "Container-WhooshAlchemyPlus-0.7.5.post3.tar.gz", "has_sig": false, "md5_digest": "a663b567e6b25554817646ba5714befa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10813, "upload_time": "2016-09-05T05:33:17", "upload_time_iso_8601": "2016-09-05T05:33:17.407909Z", "url": "https://files.pythonhosted.org/packages/d3/fd/fd6b99be36263e8715212c26d9b6a0d1601dbfb3fd5beb6751eb297162b5/Container-WhooshAlchemyPlus-0.7.5.post3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:35 2020"}