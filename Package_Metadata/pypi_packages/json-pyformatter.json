{"info": {"author": "homoluctus", "author_email": "w.slife18sy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# json-pyformatter\n\n![GitHub Workflow Status](https://img.shields.io/github/workflow/status/homoluctus/json-pyformatter/Test)\n![GitHub release (latest by date including pre-releases)](https://img.shields.io/github/v/release/homoluctus/json-pyformatter?include_prereleases)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/json-pyformatter)\n![GitHub](https://img.shields.io/github/license/homoluctus/json-pyformatter)\n\nPython logging outputs as JSON.<br>\nThis JsonFormatter is written in Pure Python.\n\n## Installation\n\n```bash\npip install json-pyformatter\n```\n\n## Usage\n\n```python\nimport logging\nfrom json_pyformmatter import JsonFormatter\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nfields = ('levelname', 'filename', 'message')\nhandler.setFormatter(JsonFormatter(fields=fields))\nlogger.addHandler(hander)\n\nlogger.info('hello')\n```\n\ndefault fields is ('asctime', 'levelname', 'message')<br>\nOther supported fields are:\n\n|field name|description|\n|:--:|:--|\n|name|Name of the logger (logging channel)|\n|levelno|Numeric logging level for the message<br>(DEBUG, INFO, WARNING, ERROR, CRITICAL)|\n|levelname|Text logging level for the message<br>(\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\")|\n|pathname|Full pathname of the source file where the logging call was issued|\n|filename|Filename portion of pathname|\n|module|Module (name portion of filename)|\n|lineno|Source line number where the logging call was issued|\n|funcName|Function name|\n|created|Time when the LogRecord was created (time.time()return value)|\n|asctime|Textual time when the LogRecord was created|\n|msecs|Millisecond portion of the creation time|\n|relativeCreated|Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded (typically at application startup time)|\n|thread|Thread ID|\n|threadName|Thread name|\n|process|Process ID|\n|message|The result of record.getMessage(), computed just as the record is emitted|\n\nIn details, please refere to [logrecord-attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes)\n\n## Output\n\n```bash\n{\"levelname\": \"INFO\", \"filename\": \"test_formatter.py\", \"message\": \"hello\"}\n```\n\nIf specify indent option as 2, the result is as follows:\n\n```bash\n{\n  \"levelname\": \"INFO\",\n  \"filename\": \"test_formatter.py\",\n  \"message\": \"hello\"\n}\n```\n\nWhen exc_info is True, the result includes traceback infomation as follows:\n\n```bash\n{\n  'asctime': '2019-12-01 13:58:34',\n  'levelname': 'ERROR',\n  'message': 'error occurred !!',\n  'traceback': [\n    'Traceback (most rec...ll last):',\n    'File \"/example/test..._exc_info',\n    'raise TypeError(message)',\n    'TypeError: error occurred !!'\n  ]\n}\n```\n\nLogging message type is dict:\n\n```bash\n{\n  'asctime': '2019-12-01 23:34:32',\n  'levelname': 'INFO',\n  'message': {\n    'id': '001',\n    'msg': 'This is test.',\n    'name': 'test'\n  }\n}\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/homoluctus/json-pyformatter", "keywords": "python,json,logging,formatter", "license": "MIT", "maintainer": "homoluctus", "maintainer_email": "w.slife18sy@gmail.com", "name": "json-pyformatter", "package_url": "https://pypi.org/project/json-pyformatter/", "platform": "", "project_url": "https://pypi.org/project/json-pyformatter/", "project_urls": {"Homepage": "https://github.com/homoluctus/json-pyformatter", "Repository": "https://github.com/homoluctus/json-pyformatter"}, "release_url": "https://pypi.org/project/json-pyformatter/0.1.0/", "requires_dist": null, "requires_python": ">=3.7,<4.0", "summary": "Python logging module outputs logs as JSON.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>json-pyformatter</h1>\n<p><img alt=\"GitHub Workflow Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e7cfe6828dce0788f6dbb9e32b41749d84a5db3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f686f6d6f6c75637475732f6a736f6e2d7079666f726d61747465722f54657374\">\n<img alt=\"GitHub release (latest by date including pre-releases)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a47d6e731743cb10217164e047fc9cb2b25803c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f686f6d6f6c75637475732f6a736f6e2d7079666f726d61747465723f696e636c7564655f70726572656c6561736573\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24066588335eac02107b0c99ee85675c755e719e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6a736f6e2d7079666f726d6174746572\">\n<img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d122ea36d5c438eb66ed7c20dc673588302d5fd3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f686f6d6f6c75637475732f6a736f6e2d7079666f726d6174746572\"></p>\n<p>Python logging outputs as JSON.<br>\nThis JsonFormatter is written in Pure Python.</p>\n<h2>Installation</h2>\n<pre>pip install json-pyformatter\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">json_pyformmatter</span> <span class=\"kn\">import</span> <span class=\"n\">JsonFormatter</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'levelname'</span><span class=\"p\">,</span> <span class=\"s1\">'filename'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">JsonFormatter</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"n\">fields</span><span class=\"p\">))</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">hander</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n</pre>\n<p>default fields is ('asctime', 'levelname', 'message')<br>\nOther supported fields are:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">field name</th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"left\">Name of the logger (logging channel)</td>\n</tr>\n<tr>\n<td align=\"center\">levelno</td>\n<td align=\"left\">Numeric logging level for the message<br>(DEBUG, INFO, WARNING, ERROR, CRITICAL)</td>\n</tr>\n<tr>\n<td align=\"center\">levelname</td>\n<td align=\"left\">Text logging level for the message<br>(\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\")</td>\n</tr>\n<tr>\n<td align=\"center\">pathname</td>\n<td align=\"left\">Full pathname of the source file where the logging call was issued</td>\n</tr>\n<tr>\n<td align=\"center\">filename</td>\n<td align=\"left\">Filename portion of pathname</td>\n</tr>\n<tr>\n<td align=\"center\">module</td>\n<td align=\"left\">Module (name portion of filename)</td>\n</tr>\n<tr>\n<td align=\"center\">lineno</td>\n<td align=\"left\">Source line number where the logging call was issued</td>\n</tr>\n<tr>\n<td align=\"center\">funcName</td>\n<td align=\"left\">Function name</td>\n</tr>\n<tr>\n<td align=\"center\">created</td>\n<td align=\"left\">Time when the LogRecord was created (time.time()return value)</td>\n</tr>\n<tr>\n<td align=\"center\">asctime</td>\n<td align=\"left\">Textual time when the LogRecord was created</td>\n</tr>\n<tr>\n<td align=\"center\">msecs</td>\n<td align=\"left\">Millisecond portion of the creation time</td>\n</tr>\n<tr>\n<td align=\"center\">relativeCreated</td>\n<td align=\"left\">Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded (typically at application startup time)</td>\n</tr>\n<tr>\n<td align=\"center\">thread</td>\n<td align=\"left\">Thread ID</td>\n</tr>\n<tr>\n<td align=\"center\">threadName</td>\n<td align=\"left\">Thread name</td>\n</tr>\n<tr>\n<td align=\"center\">process</td>\n<td align=\"left\">Process ID</td>\n</tr>\n<tr>\n<td align=\"center\">message</td>\n<td align=\"left\">The result of record.getMessage(), computed just as the record is emitted</td>\n</tr></tbody></table>\n<p>In details, please refere to <a href=\"https://docs.python.org/3/library/logging.html#logrecord-attributes\" rel=\"nofollow\">logrecord-attributes</a></p>\n<h2>Output</h2>\n<pre><span class=\"o\">{</span><span class=\"s2\">\"levelname\"</span>: <span class=\"s2\">\"INFO\"</span>, <span class=\"s2\">\"filename\"</span>: <span class=\"s2\">\"test_formatter.py\"</span>, <span class=\"s2\">\"message\"</span>: <span class=\"s2\">\"hello\"</span><span class=\"o\">}</span>\n</pre>\n<p>If specify indent option as 2, the result is as follows:</p>\n<pre><span class=\"o\">{</span>\n  <span class=\"s2\">\"levelname\"</span>: <span class=\"s2\">\"INFO\"</span>,\n  <span class=\"s2\">\"filename\"</span>: <span class=\"s2\">\"test_formatter.py\"</span>,\n  <span class=\"s2\">\"message\"</span>: <span class=\"s2\">\"hello\"</span>\n<span class=\"o\">}</span>\n</pre>\n<p>When exc_info is True, the result includes traceback infomation as follows:</p>\n<pre><span class=\"o\">{</span>\n  <span class=\"s1\">'asctime'</span>: <span class=\"s1\">'2019-12-01 13:58:34'</span>,\n  <span class=\"s1\">'levelname'</span>: <span class=\"s1\">'ERROR'</span>,\n  <span class=\"s1\">'message'</span>: <span class=\"s1\">'error occurred !!'</span>,\n  <span class=\"s1\">'traceback'</span>: <span class=\"o\">[</span>\n    <span class=\"s1\">'Traceback (most rec...ll last):'</span>,\n    <span class=\"s1\">'File \"/example/test..._exc_info'</span>,\n    <span class=\"s1\">'raise TypeError(message)'</span>,\n    <span class=\"s1\">'TypeError: error occurred !!'</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre>\n<p>Logging message type is dict:</p>\n<pre><span class=\"o\">{</span>\n  <span class=\"s1\">'asctime'</span>: <span class=\"s1\">'2019-12-01 23:34:32'</span>,\n  <span class=\"s1\">'levelname'</span>: <span class=\"s1\">'INFO'</span>,\n  <span class=\"s1\">'message'</span>: <span class=\"o\">{</span>\n    <span class=\"s1\">'id'</span>: <span class=\"s1\">'001'</span>,\n    <span class=\"s1\">'msg'</span>: <span class=\"s1\">'This is test.'</span>,\n    <span class=\"s1\">'name'</span>: <span class=\"s1\">'test'</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6224869, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c3746dea082ff43cf387f5fbb0ee63d2", "sha256": "bebaeb4780815f7897bc9153ee8bee73788d01981530572c2c3418e296622e95"}, "downloads": -1, "filename": "json_pyformatter-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c3746dea082ff43cf387f5fbb0ee63d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 4803, "upload_time": "2019-12-01T16:26:20", "upload_time_iso_8601": "2019-12-01T16:26:20.293341Z", "url": "https://files.pythonhosted.org/packages/a5/23/4a8c36dd23160d6d9aba1f6b2d52a8d6d149215ff4dde764304de2a26177/json_pyformatter-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a1fd869935e5e8954f19568a3f3da90", "sha256": "006573f9ec788a7e90ed1b1e66b9dd19d55719d76fe7abb28b46ab6889e266f2"}, "downloads": -1, "filename": "json-pyformatter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3a1fd869935e5e8954f19568a3f3da90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4561, "upload_time": "2019-12-01T16:26:18", "upload_time_iso_8601": "2019-12-01T16:26:18.029256Z", "url": "https://files.pythonhosted.org/packages/df/59/64fe142209dde4b4dffaee37d9b0435d8bdaa4833a627f3be1150acc717a/json-pyformatter-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c3746dea082ff43cf387f5fbb0ee63d2", "sha256": "bebaeb4780815f7897bc9153ee8bee73788d01981530572c2c3418e296622e95"}, "downloads": -1, "filename": "json_pyformatter-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c3746dea082ff43cf387f5fbb0ee63d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 4803, "upload_time": "2019-12-01T16:26:20", "upload_time_iso_8601": "2019-12-01T16:26:20.293341Z", "url": "https://files.pythonhosted.org/packages/a5/23/4a8c36dd23160d6d9aba1f6b2d52a8d6d149215ff4dde764304de2a26177/json_pyformatter-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a1fd869935e5e8954f19568a3f3da90", "sha256": "006573f9ec788a7e90ed1b1e66b9dd19d55719d76fe7abb28b46ab6889e266f2"}, "downloads": -1, "filename": "json-pyformatter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3a1fd869935e5e8954f19568a3f3da90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4561, "upload_time": "2019-12-01T16:26:18", "upload_time_iso_8601": "2019-12-01T16:26:18.029256Z", "url": "https://files.pythonhosted.org/packages/df/59/64fe142209dde4b4dffaee37d9b0435d8bdaa4833a627f3be1150acc717a/json-pyformatter-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:42 2020"}