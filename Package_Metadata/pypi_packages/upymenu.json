{"info": {"author": "Joost Plattel", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# uPyMenu\n\nuPyMenu is a micropython menu implementation for LCD displays. Coming from an Arduino experience, I was used with [LiquidCrystal](https://github.com/arduino-libraries/LiquidCrystal) and [LiquidMenu](https://github.com/VaSe7u/LiquidMenu), but they don't offer a python implementation. So I figured I could create one myself.\n\n# Development\n\nCurrent development is done based on when I have to to work on it when I want to. But feel free to fork it and add your functionality. If you find any bugs or have suggestions for features, please open up a issue (or pull-request if you create the feature yourself!).\n\n## TODO\n\n*   Add arguments to callback actions in the menu\n\n# Usage\n\nThe example below renders a menu with a submenu and actions that have callbacks attached which you can use to run your own function. It requires one dependency, and that's [`python_lcd`](https://github.com/dhylands/python_lcd) for interacting with the LCD itself.\n\n```python\nfrom machine import Pin, I2C # Basics for creating an LCD interface\nfrom esp8266_i2c_lcd import I2cLcd # Example LCD interface used\nfrom upymenu import Menu, MenuAction, MenuNoop\n\ndef action_callback():\n    print(\"callback action chosen\")\n\nsubmenu = Menu(\"Submenu\")\nsubmenu_action_1 = MenuAction(\"Submenu Action\", callback=action_callback)\nsubmenu_action_2 = MenuAction(\"Submenu Action 1\", callback=action_callback)\nsubmenu.add_option(submenu_action_1)\nsubmenu.add_option(submenu_action_2)\n\nmenu_action = MenuAction(\"Action\", callback=action_callback)\nmenu = Menu(\"Main Menu\")\nmenu.add_option(submenu)\nmenu.add_option(menu_action)\nmenu.add_option(MenuNoop(\"Nothing here\"))\n\n# Example config for LCD via i2c, you will need this \n# for the menu to function, the screen size is required\n# to render the menu correctly on the screen.\ni2c = I2C(scl=Pin(5), sda=Pin(4), freq=400000)\nlcd = I2cLcd(i2c, 0x3F, 4, 20)\n\ncurrent_menu = menu.start(lcd) # Starts the menu on the LCD\n\nmenu.focus_next() # Focus on the next item in the menu \nmenu.focus_prev() # Focus on the previous item in the menu \n\n# Choose the focused item, if it's and action execute \n# the callback, or if it is a menu, render that menu.\nmenu = menu.choose()\n\n# If it's a submenu, you can use the parent() function\n# to navigate back up to the tree.\nmenu = menu.parent() \n```\n\n# Testing\n\nIf you have a `micropython` port running locally, you can run the test suite with it, ie: `micropython tests.py`. This is as close I can get with my current knowledge about micropython. Any pointers and suggestions towards improvement here would be appreciated!\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jplattel/upymenu", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "upymenu", "package_url": "https://pypi.org/project/upymenu/", "platform": "", "project_url": "https://pypi.org/project/upymenu/", "project_urls": {"Homepage": "https://github.com/jplattel/upymenu"}, "release_url": "https://pypi.org/project/upymenu/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A micropython Menu for LCD Displays", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>uPyMenu</h1>\n<p>uPyMenu is a micropython menu implementation for LCD displays. Coming from an Arduino experience, I was used with <a href=\"https://github.com/arduino-libraries/LiquidCrystal\" rel=\"nofollow\">LiquidCrystal</a> and <a href=\"https://github.com/VaSe7u/LiquidMenu\" rel=\"nofollow\">LiquidMenu</a>, but they don't offer a python implementation. So I figured I could create one myself.</p>\n<h1>Development</h1>\n<p>Current development is done based on when I have to to work on it when I want to. But feel free to fork it and add your functionality. If you find any bugs or have suggestions for features, please open up a issue (or pull-request if you create the feature yourself!).</p>\n<h2>TODO</h2>\n<ul>\n<li>Add arguments to callback actions in the menu</li>\n</ul>\n<h1>Usage</h1>\n<p>The example below renders a menu with a submenu and actions that have callbacks attached which you can use to run your own function. It requires one dependency, and that's <a href=\"https://github.com/dhylands/python_lcd\" rel=\"nofollow\"><code>python_lcd</code></a> for interacting with the LCD itself.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">machine</span> <span class=\"kn\">import</span> <span class=\"n\">Pin</span><span class=\"p\">,</span> <span class=\"n\">I2C</span> <span class=\"c1\"># Basics for creating an LCD interface</span>\n<span class=\"kn\">from</span> <span class=\"nn\">esp8266_i2c_lcd</span> <span class=\"kn\">import</span> <span class=\"n\">I2cLcd</span> <span class=\"c1\"># Example LCD interface used</span>\n<span class=\"kn\">from</span> <span class=\"nn\">upymenu</span> <span class=\"kn\">import</span> <span class=\"n\">Menu</span><span class=\"p\">,</span> <span class=\"n\">MenuAction</span><span class=\"p\">,</span> <span class=\"n\">MenuNoop</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">action_callback</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"callback action chosen\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">submenu</span> <span class=\"o\">=</span> <span class=\"n\">Menu</span><span class=\"p\">(</span><span class=\"s2\">\"Submenu\"</span><span class=\"p\">)</span>\n<span class=\"n\">submenu_action_1</span> <span class=\"o\">=</span> <span class=\"n\">MenuAction</span><span class=\"p\">(</span><span class=\"s2\">\"Submenu Action\"</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">action_callback</span><span class=\"p\">)</span>\n<span class=\"n\">submenu_action_2</span> <span class=\"o\">=</span> <span class=\"n\">MenuAction</span><span class=\"p\">(</span><span class=\"s2\">\"Submenu Action 1\"</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">action_callback</span><span class=\"p\">)</span>\n<span class=\"n\">submenu</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"n\">submenu_action_1</span><span class=\"p\">)</span>\n<span class=\"n\">submenu</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"n\">submenu_action_2</span><span class=\"p\">)</span>\n\n<span class=\"n\">menu_action</span> <span class=\"o\">=</span> <span class=\"n\">MenuAction</span><span class=\"p\">(</span><span class=\"s2\">\"Action\"</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">action_callback</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">Menu</span><span class=\"p\">(</span><span class=\"s2\">\"Main Menu\"</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"n\">submenu</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"n\">menu_action</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"n\">MenuNoop</span><span class=\"p\">(</span><span class=\"s2\">\"Nothing here\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Example config for LCD via i2c, you will need this </span>\n<span class=\"c1\"># for the menu to function, the screen size is required</span>\n<span class=\"c1\"># to render the menu correctly on the screen.</span>\n<span class=\"n\">i2c</span> <span class=\"o\">=</span> <span class=\"n\">I2C</span><span class=\"p\">(</span><span class=\"n\">scl</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">sda</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">400000</span><span class=\"p\">)</span>\n<span class=\"n\">lcd</span> <span class=\"o\">=</span> <span class=\"n\">I2cLcd</span><span class=\"p\">(</span><span class=\"n\">i2c</span><span class=\"p\">,</span> <span class=\"mh\">0x3F</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"n\">current_menu</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">lcd</span><span class=\"p\">)</span> <span class=\"c1\"># Starts the menu on the LCD</span>\n\n<span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">focus_next</span><span class=\"p\">()</span> <span class=\"c1\"># Focus on the next item in the menu </span>\n<span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">focus_prev</span><span class=\"p\">()</span> <span class=\"c1\"># Focus on the previous item in the menu </span>\n\n<span class=\"c1\"># Choose the focused item, if it's and action execute </span>\n<span class=\"c1\"># the callback, or if it is a menu, render that menu.</span>\n<span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">choose</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># If it's a submenu, you can use the parent() function</span>\n<span class=\"c1\"># to navigate back up to the tree.</span>\n<span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">()</span> \n</pre>\n<h1>Testing</h1>\n<p>If you have a <code>micropython</code> port running locally, you can run the test suite with it, ie: <code>micropython tests.py</code>. This is as close I can get with my current knowledge about micropython. Any pointers and suggestions towards improvement here would be appreciated!</p>\n\n          </div>"}, "last_serial": 6514377, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9a71147f342cf1a2f224bc39bab467de", "sha256": "45159f7c599400fdb8ba69e898472481b2f4e72eb417c90bf425b1cea7bd0442"}, "downloads": -1, "filename": "upymenu-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9a71147f342cf1a2f224bc39bab467de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4515, "upload_time": "2020-01-24T15:47:22", "upload_time_iso_8601": "2020-01-24T15:47:22.810597Z", "url": "https://files.pythonhosted.org/packages/2a/1a/3dd2d22a22150a74c2d664163cd3739c91612838377128cc2d3da43285f7/upymenu-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc87480218b64094e9b8a4191bd6d9ef", "sha256": "05c86d8690d8fd8f331ddca03544608a1e7993226d5d14ce5a7bbb96d215cc18"}, "downloads": -1, "filename": "upymenu-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dc87480218b64094e9b8a4191bd6d9ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2848, "upload_time": "2020-01-24T15:47:25", "upload_time_iso_8601": "2020-01-24T15:47:25.223650Z", "url": "https://files.pythonhosted.org/packages/86/10/c9555ec63106153aaaad753a281ff47f4ac79e980ff7f5d740d6649cd56a/upymenu-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9a71147f342cf1a2f224bc39bab467de", "sha256": "45159f7c599400fdb8ba69e898472481b2f4e72eb417c90bf425b1cea7bd0442"}, "downloads": -1, "filename": "upymenu-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9a71147f342cf1a2f224bc39bab467de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4515, "upload_time": "2020-01-24T15:47:22", "upload_time_iso_8601": "2020-01-24T15:47:22.810597Z", "url": "https://files.pythonhosted.org/packages/2a/1a/3dd2d22a22150a74c2d664163cd3739c91612838377128cc2d3da43285f7/upymenu-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc87480218b64094e9b8a4191bd6d9ef", "sha256": "05c86d8690d8fd8f331ddca03544608a1e7993226d5d14ce5a7bbb96d215cc18"}, "downloads": -1, "filename": "upymenu-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dc87480218b64094e9b8a4191bd6d9ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2848, "upload_time": "2020-01-24T15:47:25", "upload_time_iso_8601": "2020-01-24T15:47:25.223650Z", "url": "https://files.pythonhosted.org/packages/86/10/c9555ec63106153aaaad753a281ff47f4ac79e980ff7f5d740d6649cd56a/upymenu-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:40 2020"}