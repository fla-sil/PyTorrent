{"info": {"author": "scott2b <Scott B. Bradley>", "author_email": "scott@scott2b.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Django Multimail Requires Django 1.4+\n=====================================\n\nThe django-multimail demo site is at: http://www.django-multimail.com\n\nmultimail is a simple Django application that provides multiple-email address\nfunctionality for Django's existing User model. Features include:\n\n * Auto-creation of a multimail email from the email on a User object\n\n * Email verification via link sent to new email address\n\n * Auto-deletion of unverified email addresses when a user is administratively\n   deactivated.\n\nDJANGO COMPATIBILITY NOTE\n=========================\n\ndjango-multimail is tested against Django versions 1.4, 1.5, 1.6, and 1.7.\nPlease report any known issues with any of these Django versions.\n\nCHANGELOG\n=========\n\n0.1.3\n-----\n\nBreaks Django 1.3 Compatability. django-multimail is now compatible with\nDjango 1.4+.\n\nTESTING\n=======\n\nTo run the test suite:\n\n    $ demo/manage.py test\n\nQUICKSTART \n==========\n\nIf you already have email sending configured and Sites configured. (See\ndetailed setup for alternatives to configuring Sites)\n \n * pip install django-multimail\n * add multimail to installed apps\n * include 'django.template.loaders.eggs.Loader' in your TEMPLATE_LOADERS\n * In your base urls.py:\n    (r'^mail/', include('multimail.urls')),\n * syncdb\n\nDETAILED START\n==============\n\n * Configure your project for sending email. This usually involves setting\n   the following properties in your settings file: EMAIL_HOST, EMAIL_HOST_USER,\n   EMAIL_HOST_PASSWORD, EMAIL_USE_TLS, EMAIL_BACKEND.  (See the Django docs:\n   https://docs.djangoproject.com/en/1.7/topics/email/).  Additionally, you\n   will need to set either MULTIMAIL_FROM_EMAIL_ADDRESS or ADMIN_EMAIL for\n   Multimail to use as the from mail address. ADMIN_EMAIL is used if\n   MULTIMAIL_FROM_EMAIL_ADDRESS has not been set.\n\n * Be sure you are setup to use Django's sites framework (see the Django\n   docs: https://docs.djangoproject.com/en/1.7/ref/contrib/sites/).\n\n   multimail uses the current domain to build verification link URLs.\n   Alternatively, you can set the MULTIMAIL_EMAIL_VERIFICATION_URL settings\n   property. See the SETTINGS section below. Another option is to set both\n   the MULTIMAIL_SITE_DOMAIN, and MULTIMAIL_SITE_NAME. When both of these\n   are set, they will override the configured site settings (for multimail\n   purposes only).\n\n * Use of the messages framework is now optional. To use messages, set\n   MULTIMAL_USE_MESSAGES to True. Be sure you are exposing messages in your\n   templates. See Django docs on the messages framework:\n   https://docs.djangoproject.com/en/1.7/ref/contrib/messages/\n\n * Be sure to include 'django.template.loaders.eggs.Loader' in the\n   TEMPLATE_LOADERS in your settings file. You should put this after loaders\n   that load templates you create yourself so that you can create overriding\n   templates to replace the builtin multimail templates.\n\n * To install: pip install django-multimail\n\n   Or, to install from source:\n\n   pip install git+git@github.com:scott2b/django-multimail.git#egg=multimail\n\n   or, download the code and run python setup.py install\n\n * Add multimail to your installed apps in your settings file\n\n * In your base url config, add a line like the following:\n    (r'^mail/', include('multimail.urls')),\n\n   The path name 'mail' is arbitrary and can be set to whatever you choose.\n\n * Run syncdb\n\nYou can now start creating new EmailAddress objects for your users. A\nVerification email will be sent automatically when a new EmailAddress object is\ncreated.\n\nEXAMPLE\n=======\n\n>>> from django.contrib.auth.models import User\n>>> u = User.objects.all()[0]\n>>> u.save() # will automatically create an EmailAddress object for the user's current email address\n\nYou can also create EmailAddress objects for users directly:\n>>> from multimail.models import EmailAddress\n>>> addr = EmailAddress.objects.create(email='user@example.com', user=u)\n\nSETTINGS\n========\n\nThe following properties may be set to customize your multimail installation.\nNote that where default properties are enclosed with _() indicates translation\nvia Django's ugettext. Multimail does not currently have any built-in\ntranslations for its default messages. See the Django docs for information\nabout creating translation messages: https://docs.djangoproject.com/en/1.7/topics/i18n/translation/#how-to-create-language-files\n\nMULTIMAIL_ALLOW_VERIFICATION_OF_INACTIVE_ACCOUNTS\n    Default: False. Whether to allow users to verify emails associated\n    with a deactivated account.\n\nMULTIMAIL_DELETE_PRIMARY\n    Default: False. Whether to clear the email field on the user object\n    when the last EmailAddress is deleted.\n\nMULTIMAIL_VERIFICATION_LINK_SENT_MESSAGE\n    Default: _(\"A verification link has been sent to %(email)s\")\n\nMULTIMAIL_FROM_EMAIL_ADDRESS\n    Default: None, but falls back to ADMIN_EMAIL if not available\n\nMULTIMAIL_EMAIL_ALREADY_VERIFIED_MESSAGE\n    Default: _(\"This email address has already been verified.\")\n\nMULTIMAIL_EMAIL_VERIFIED_MESSAGE **(See note below)\n    Default: _(\"Thank you for verifying your email address.\")\n\nMULTIMAIL_EMAIL_VERIFICATION_URL **(See note below)\n    Default: 'http://%(current_site_domain)s/mail/verify/%(emailaddress_id)s/%(verif_key)s'\n\n    Notes: if you change this URL and/or the URL configuration for calling\n           the Verify view, you need to be sure that you are passing the\n           emailaddress id, and the verification key into the view call.\n\n           Current site domain is generally acquired from the Sites\n           configuration, but can be overridden by setting BOTH the\n           MULTIMAIL_SITE_DOMAIN and the MULTIMAIL_SITE_NAME\n\nMULTIMAIL_INACTIVE_ACCOUNT_MESSAGE\n    Default: _(\"The account associated with this email address has been marked as inactive. Please contact the site administrator.\")\n\nMULTIMAIL_INVALID_VERIFICATION_LINK_MESSAGE\n    Default: _(\"The seleted email verification link is invalid. Please re-register your email address.\")\n\nMULTIMAIL_POST_VERIFY_URL\n    Default: '/'\n\nMULTIMAIL_USE_MESSAGES\n    Default: False. Set to True to enable messages using Django's\n    messages framework.\n\nMULTIMAIL_VERIFICATION_EMAIL_SUBJECT **(See note below)\n    Default:  _('Verfication required')\n\nMULTIMAIL_VERIFICATION_EMAIL_HTML_TEMPLATE\n    Default: 'multimail/verification_email.html'\n\nMULTIMAIL_VERIFICATION_EMAIL_TEXT_TEMPLATE\n    Default: 'multimail/verification_email.txt'\n\n**NOTE: properties marked with ** receive a context dictionary for string\ntemplating. The default values do not take advantage of this, preferring\nstatic strings in order to take advantage of translation capabilities. The\nfollowing keys are passed to these strings:\ncurrent_site_domain\n        current_site_id\n        current_site_name\n        emailaddress_id\n        email (the email on the current multimail email object)\n        first_name\n        last_name\n        primary_email (the email on the user object)\n        user_id\n        username\n        verif_key\n        verify_link\n\nNote that MULTIMAIL_EMAIL_VERIFICATION_URL does not get the verif_link key\nfor security reasons.\n\nMULTIMAIL_FROM_EMAIL_ADDRESS\n    Defaults to using the ADMIN_EMAIL\n\nMULTIMAIL_SEND_EMAIL_ON_USER_SAVE_SIGNAL\n    Default: True. Affects the behavior of notifications when an email address\n    is created as a result of a user save. Multimail ensures that there is\n    a multimail version of the email on the user object (which is considered\n    to be the primary email address for the user). If a user save results\n    in the creation of a new EmailAddress object, the default behavior is to\n    send a verification link for that new address. Set this to False to\n    turn off that behavior.\n\nMULTIMAIL_USER_DEACTIVATION_HANDLER_ON\n    Default: False. The old default was to cleanup any lingering, unverified\n    email addresses on user save. This can be a nuisance if your user objects\n    are getting modified and saved before users have the opportunity to\n    verify their email address. If you know for sure that you do not need\n    to save users between the time it takes to send a verification link\n    and the user clicking the link, then it is probably safe to set this to\n    True for automated cleanup of lingering unverified emails. Otherwise, it\n    is probably best to delete unverified emails manually.\n\n    I am open to suggestions as to how to better handle automated cleanup of\n    lingering unverified email addresses.\n\nMULTIMAIL_EMAIL_ADMINS\n    Default: True. Multimail may send notification emails to the site admin\n    for some errors that occur. Set this to False to disable those emails.\n\nMULTIMAIL_SITE_DOMAIN\n    Default: None. Set to override the site domain for use in multimail\n    templates and template strings. Requires both this and MULTIMAIL_SITE_NAME\n    to be set to non-None values.\n\nMULTIMAIL_SITE_NAME\n    Default: None. Set to override the site name for use in multimail\n    templates and template strings. Requires both this and\n    MULTIMAIL_SITE_DOMAIN to be set to non-None values.\n\nMULTIMAIL_SET_AS_PRIMARY_REDIRECT\n    Default: 'profile'. Reverse name to redirect to after a call to the\n    built-in set-as-primary view. Defaults to 'profile'. Currently does not\n    handle passing of parameters -- if your user profiles require parameters\n    (such as the username or user pk) then you will need to implement your own\n    view for handling a set-as-primary request. For details, see\n    multimail.views.set_as_primary in the source code.\n\nMULTIMAIL_ALLOW_REMOVE_LAST_VERIFIED_EMAIL\n    Default: False. Whether to allow the user to delete all verified\n    emails.\n\nMULTIMAIL_REMOVE_LAST_VERIFIED_EMAIL_ATTEMPT_MSG\n    Default: \"Cannot remove last verified email. Add another verified email\n    address to remove the existing one.\" Message sent when user tries\n    to delete the last verified email. Only if\n    MULTIMAIL_ALLOW_REMOVE_LAST_VERIFIED_EMAIL is False.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://django-multimail.com", "keywords": "django,e-mail,email,multimail,multiple addresses", "license": "OSI Approved :: MIT License", "maintainer": null, "maintainer_email": null, "name": "django-multimail", "package_url": "https://pypi.org/project/django-multimail/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-multimail/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://django-multimail.com"}, "release_url": "https://pypi.org/project/django-multimail/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "Enable multiple email addresses per user in Django", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            Django Multimail Requires Django 1.4+<br>=====================================<br><br>The django-multimail demo site is at: http://www.django-multimail.com<br><br>multimail is a simple Django application that provides multiple-email address<br>functionality for Django's existing User model. Features include:<br><br> * Auto-creation of a multimail email from the email on a User object<br><br> * Email verification via link sent to new email address<br><br> * Auto-deletion of unverified email addresses when a user is administratively<br>   deactivated.<br><br>DJANGO COMPATIBILITY NOTE<br>=========================<br><br>django-multimail is tested against Django versions 1.4, 1.5, 1.6, and 1.7.<br>Please report any known issues with any of these Django versions.<br><br>CHANGELOG<br>=========<br><br>0.1.3<br>-----<br><br>Breaks Django 1.3 Compatability. django-multimail is now compatible with<br>Django 1.4+.<br><br>TESTING<br>=======<br><br>To run the test suite:<br><br>    $ demo/manage.py test<br><br>QUICKSTART <br>==========<br><br>If you already have email sending configured and Sites configured. (See<br>detailed setup for alternatives to configuring Sites)<br> <br> * pip install django-multimail<br> * add multimail to installed apps<br> * include 'django.template.loaders.eggs.Loader' in your TEMPLATE_LOADERS<br> * In your base urls.py:<br>    (r'^mail/', include('multimail.urls')),<br> * syncdb<br><br>DETAILED START<br>==============<br><br> * Configure your project for sending email. This usually involves setting<br>   the following properties in your settings file: EMAIL_HOST, EMAIL_HOST_USER,<br>   EMAIL_HOST_PASSWORD, EMAIL_USE_TLS, EMAIL_BACKEND.  (See the Django docs:<br>   https://docs.djangoproject.com/en/1.7/topics/email/).  Additionally, you<br>   will need to set either MULTIMAIL_FROM_EMAIL_ADDRESS or ADMIN_EMAIL for<br>   Multimail to use as the from mail address. ADMIN_EMAIL is used if<br>   MULTIMAIL_FROM_EMAIL_ADDRESS has not been set.<br><br> * Be sure you are setup to use Django's sites framework (see the Django<br>   docs: https://docs.djangoproject.com/en/1.7/ref/contrib/sites/).<br><br>   multimail uses the current domain to build verification link URLs.<br>   Alternatively, you can set the MULTIMAIL_EMAIL_VERIFICATION_URL settings<br>   property. See the SETTINGS section below. Another option is to set both<br>   the MULTIMAIL_SITE_DOMAIN, and MULTIMAIL_SITE_NAME. When both of these<br>   are set, they will override the configured site settings (for multimail<br>   purposes only).<br><br> * Use of the messages framework is now optional. To use messages, set<br>   MULTIMAL_USE_MESSAGES to True. Be sure you are exposing messages in your<br>   templates. See Django docs on the messages framework:<br>   https://docs.djangoproject.com/en/1.7/ref/contrib/messages/<br><br> * Be sure to include 'django.template.loaders.eggs.Loader' in the<br>   TEMPLATE_LOADERS in your settings file. You should put this after loaders<br>   that load templates you create yourself so that you can create overriding<br>   templates to replace the builtin multimail templates.<br><br> * To install: pip install django-multimail<br><br>   Or, to install from source:<br><br>   pip install git+git@github.com:scott2b/django-multimail.git#egg=multimail<br><br>   or, download the code and run python setup.py install<br><br> * Add multimail to your installed apps in your settings file<br><br> * In your base url config, add a line like the following:<br>    (r'^mail/', include('multimail.urls')),<br><br>   The path name 'mail' is arbitrary and can be set to whatever you choose.<br><br> * Run syncdb<br><br>You can now start creating new EmailAddress objects for your users. A<br>Verification email will be sent automatically when a new EmailAddress object is<br>created.<br><br>EXAMPLE<br>=======<br><br>&gt;&gt;&gt; from django.contrib.auth.models import User<br>&gt;&gt;&gt; u = User.objects.all()[0]<br>&gt;&gt;&gt; u.save() # will automatically create an EmailAddress object for the user's current email address<br><br>You can also create EmailAddress objects for users directly:<br>&gt;&gt;&gt; from multimail.models import EmailAddress<br>&gt;&gt;&gt; addr = EmailAddress.objects.create(email='user@example.com', user=u)<br><br>SETTINGS<br>========<br><br>The following properties may be set to customize your multimail installation.<br>Note that where default properties are enclosed with _() indicates translation<br>via Django's ugettext. Multimail does not currently have any built-in<br>translations for its default messages. See the Django docs for information<br>about creating translation messages: https://docs.djangoproject.com/en/1.7/topics/i18n/translation/#how-to-create-language-files<br><br>MULTIMAIL_ALLOW_VERIFICATION_OF_INACTIVE_ACCOUNTS<br>    Default: False. Whether to allow users to verify emails associated<br>    with a deactivated account.<br><br>MULTIMAIL_DELETE_PRIMARY<br>    Default: False. Whether to clear the email field on the user object<br>    when the last EmailAddress is deleted.<br><br>MULTIMAIL_VERIFICATION_LINK_SENT_MESSAGE<br>    Default: _(\"A verification link has been sent to %(email)s\")<br><br>MULTIMAIL_FROM_EMAIL_ADDRESS<br>    Default: None, but falls back to ADMIN_EMAIL if not available<br><br>MULTIMAIL_EMAIL_ALREADY_VERIFIED_MESSAGE<br>    Default: _(\"This email address has already been verified.\")<br><br>MULTIMAIL_EMAIL_VERIFIED_MESSAGE **(See note below)<br>    Default: _(\"Thank you for verifying your email address.\")<br><br>MULTIMAIL_EMAIL_VERIFICATION_URL **(See note below)<br>    Default: 'http://%(current_site_domain)s/mail/verify/%(emailaddress_id)s/%(verif_key)s'<br><br>    Notes: if you change this URL and/or the URL configuration for calling<br>           the Verify view, you need to be sure that you are passing the<br>           emailaddress id, and the verification key into the view call.<br><br>           Current site domain is generally acquired from the Sites<br>           configuration, but can be overridden by setting BOTH the<br>           MULTIMAIL_SITE_DOMAIN and the MULTIMAIL_SITE_NAME<br><br>MULTIMAIL_INACTIVE_ACCOUNT_MESSAGE<br>    Default: _(\"The account associated with this email address has been marked as inactive. Please contact the site administrator.\")<br><br>MULTIMAIL_INVALID_VERIFICATION_LINK_MESSAGE<br>    Default: _(\"The seleted email verification link is invalid. Please re-register your email address.\")<br><br>MULTIMAIL_POST_VERIFY_URL<br>    Default: '/'<br><br>MULTIMAIL_USE_MESSAGES<br>    Default: False. Set to True to enable messages using Django's<br>    messages framework.<br><br>MULTIMAIL_VERIFICATION_EMAIL_SUBJECT **(See note below)<br>    Default:  _('Verfication required')<br><br>MULTIMAIL_VERIFICATION_EMAIL_HTML_TEMPLATE<br>    Default: 'multimail/verification_email.html'<br><br>MULTIMAIL_VERIFICATION_EMAIL_TEXT_TEMPLATE<br>    Default: 'multimail/verification_email.txt'<br><br>**NOTE: properties marked with ** receive a context dictionary for string<br>templating. The default values do not take advantage of this, preferring<br>static strings in order to take advantage of translation capabilities. The<br>following keys are passed to these strings:<br>current_site_domain<br>        current_site_id<br>        current_site_name<br>        emailaddress_id<br>        email (the email on the current multimail email object)<br>        first_name<br>        last_name<br>        primary_email (the email on the user object)<br>        user_id<br>        username<br>        verif_key<br>        verify_link<br><br>Note that MULTIMAIL_EMAIL_VERIFICATION_URL does not get the verif_link key<br>for security reasons.<br><br>MULTIMAIL_FROM_EMAIL_ADDRESS<br>    Defaults to using the ADMIN_EMAIL<br><br>MULTIMAIL_SEND_EMAIL_ON_USER_SAVE_SIGNAL<br>    Default: True. Affects the behavior of notifications when an email address<br>    is created as a result of a user save. Multimail ensures that there is<br>    a multimail version of the email on the user object (which is considered<br>    to be the primary email address for the user). If a user save results<br>    in the creation of a new EmailAddress object, the default behavior is to<br>    send a verification link for that new address. Set this to False to<br>    turn off that behavior.<br><br>MULTIMAIL_USER_DEACTIVATION_HANDLER_ON<br>    Default: False. The old default was to cleanup any lingering, unverified<br>    email addresses on user save. This can be a nuisance if your user objects<br>    are getting modified and saved before users have the opportunity to<br>    verify their email address. If you know for sure that you do not need<br>    to save users between the time it takes to send a verification link<br>    and the user clicking the link, then it is probably safe to set this to<br>    True for automated cleanup of lingering unverified emails. Otherwise, it<br>    is probably best to delete unverified emails manually.<br><br>    I am open to suggestions as to how to better handle automated cleanup of<br>    lingering unverified email addresses.<br><br>MULTIMAIL_EMAIL_ADMINS<br>    Default: True. Multimail may send notification emails to the site admin<br>    for some errors that occur. Set this to False to disable those emails.<br><br>MULTIMAIL_SITE_DOMAIN<br>    Default: None. Set to override the site domain for use in multimail<br>    templates and template strings. Requires both this and MULTIMAIL_SITE_NAME<br>    to be set to non-None values.<br><br>MULTIMAIL_SITE_NAME<br>    Default: None. Set to override the site name for use in multimail<br>    templates and template strings. Requires both this and<br>    MULTIMAIL_SITE_DOMAIN to be set to non-None values.<br><br>MULTIMAIL_SET_AS_PRIMARY_REDIRECT<br>    Default: 'profile'. Reverse name to redirect to after a call to the<br>    built-in set-as-primary view. Defaults to 'profile'. Currently does not<br>    handle passing of parameters -- if your user profiles require parameters<br>    (such as the username or user pk) then you will need to implement your own<br>    view for handling a set-as-primary request. For details, see<br>    multimail.views.set_as_primary in the source code.<br><br>MULTIMAIL_ALLOW_REMOVE_LAST_VERIFIED_EMAIL<br>    Default: False. Whether to allow the user to delete all verified<br>    emails.<br><br>MULTIMAIL_REMOVE_LAST_VERIFIED_EMAIL_ATTEMPT_MSG<br>    Default: \"Cannot remove last verified email. Add another verified email<br>    address to remove the existing one.\" Message sent when user tries<br>    to delete the last verified email. Only if<br>    MULTIMAIL_ALLOW_REMOVE_LAST_VERIFIED_EMAIL is False.\n          </div>"}, "last_serial": 1328699, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "5f27bb735c2387d20af65b72363c611b", "sha256": "03ce5d196de2871898bc1f256d21edf0ae412335c09e9b4ced6a7544302acb49"}, "downloads": -1, "filename": "django-multimail-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5f27bb735c2387d20af65b72363c611b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14176, "upload_time": "2013-07-10T17:55:11", "upload_time_iso_8601": "2013-07-10T17:55:11.498779Z", "url": "https://files.pythonhosted.org/packages/d5/c0/7b7b825b1a227c6192384b52cff6bd75aae59306cf98ac1b2e27467b06b5/django-multimail-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6f55e58e4f319b0f51d6c89974925efa", "sha256": "74ef9a8a730bdf1e40d0e75180a4f002894b4f6b721bb0ea39c908ca38e3da4c"}, "downloads": -1, "filename": "django-multimail-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6f55e58e4f319b0f51d6c89974925efa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14180, "upload_time": "2013-07-10T18:13:54", "upload_time_iso_8601": "2013-07-10T18:13:54.059970Z", "url": "https://files.pythonhosted.org/packages/08/68/0a7f5fcb1d3c1357f9b8ee98a08eb8616b868be142095d9473e37e0d5851/django-multimail-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "e5b11f98d016a8cfe44c07239041a846", "sha256": "388c7d1a63b79cee3b450ec801271a5b940b7093d149146a02fc48b46d7805ec"}, "downloads": -1, "filename": "django-multimail-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e5b11f98d016a8cfe44c07239041a846", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19205, "upload_time": "2014-10-27T16:45:56", "upload_time_iso_8601": "2014-10-27T16:45:56.543420Z", "url": "https://files.pythonhosted.org/packages/bb/2f/10e3b61bc586553c83f1591228039faad4df0890ff8cd69f917e6a3f497a/django-multimail-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "da755f7ba3664b6a872e284920ffb373", "sha256": "794c08082c76b6189373efdc66ec9d4f94a32562d604b4d93e58a150e786b0e9"}, "downloads": -1, "filename": "django-multimail-0.1.4.tar.gz", "has_sig": false, "md5_digest": "da755f7ba3664b6a872e284920ffb373", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19414, "upload_time": "2014-12-02T19:51:36", "upload_time_iso_8601": "2014-12-02T19:51:36.616347Z", "url": "https://files.pythonhosted.org/packages/89/33/9d1140375005a3d7719aeee71526079476ef01c669b3db6ae86b59d4e1e9/django-multimail-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da755f7ba3664b6a872e284920ffb373", "sha256": "794c08082c76b6189373efdc66ec9d4f94a32562d604b4d93e58a150e786b0e9"}, "downloads": -1, "filename": "django-multimail-0.1.4.tar.gz", "has_sig": false, "md5_digest": "da755f7ba3664b6a872e284920ffb373", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19414, "upload_time": "2014-12-02T19:51:36", "upload_time_iso_8601": "2014-12-02T19:51:36.616347Z", "url": "https://files.pythonhosted.org/packages/89/33/9d1140375005a3d7719aeee71526079476ef01c669b3db6ae86b59d4e1e9/django-multimail-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:48 2020"}