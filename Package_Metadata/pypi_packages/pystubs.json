{"info": {"author": "Andrea Corbellini", "author_email": "corbellini.andrea@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# PyStubs: dummy values for equality testing\n\nThis tiny Python module provides various types that can be used to check\nfor conditions using equality (`==`) testing. For example, to test whether\na number is less than 5:\n\n```python\n>>> from stubs import *\n>>> 2 == LessThan(5)\nTrue\n```\n\nWhich is completely equivalent to:\n\n```\n>>> 2 < 5\nTrue\n```\n\nThis approach comes in handy when comparing nested containers, such as\nJSON objects returned by an API:\n\n```python\n>>> expected_order = {\n...     'id': MatchesRegex('[0-9a-z]{10}'),\n...     'quantity': GreaterThan(10),\n...     'shippingAddress': Contains('Dublin'),\n...     'deliveryDate': ANY,\n...     'amount': InRange(200, 500),\n...     'items': Contains('apples') &\n...              Contains('bananas') &\n...              ~Contains('pears'),\n... }\n\n>>> expected_order == {\n...     'id': 'cxw23fac3n',\n...     'quantity': 26,\n...     'shippingAddress': '18 Some Street, Dublin, London',\n...     'deliveryDate': 'tomorrow',\n...     'amount': 300,\n...     'items': [\n...         'apples',\n...         'avocados',\n...         'bananas',\n...     ],\n... }\nTrue\n\n>>> expected_order == {\n...     'id': 'XXX',\n...     'quantity': 3,\n...     'shippingAddress': '18 Some Other Street, New York City, USA',\n...     'deliveryDate': 'yesterday',\n...     'amount': 600,\n...     'items': [\n...         'apples',\n...         'pears',\n...     ],\n... }\nFalse\n```\n\nThis approach can be very useful in unit testing, to make tests cases\nshorter and easier to understand.\n\n\n# Installation\n\nPyStubs has no external dependencies. To install it:\n\n```shell\n$ pip install pystubs\n```\n\n\n## List of stubs\n\n**Generics:**\n\n| Stub                      | Usage                         | Equivalent to                 | Notes                                                             |\n|---------------------------|-------------------------------|-------------------------------|-------------------------------------------------------------------|\n| **ANY**                   | `x == ANY`                    | `True`                        |                                                                   |\n| **PLACEHOLDER**           | `x == PLACEHOLDER`            | `False`                       | Meant to be used as a placeholder to be replaced at a later time  |\n| **AnyOf**                 | `x == AnyOf([...])`           | `x in [...]`                  |                                                                   |\n| **NoneOf**                | `x == NoneOf([...])`          | `x not in [...]`              |                                                                   |\n\n**Equality:**\n\n| Stub                      | Usage                         | Equivalent to                 | Notes                                                             |\n|---------------------------|-------------------------------|-------------------------------|-------------------------------------------------------------------|\n| **Equal**                 | `x == Equal(y)`               | `x == y`                      | Useful when combined with other stubs                             |\n| **NotEqual**              | `x == NotEqual(y)`            | `x != y`                      |                                                                   |\n\n**Order:**\n\n| Stub                      | Usage                         | Equivalent to                 | Notes                                                             |\n|---------------------------|-------------------------------|-------------------------------|-------------------------------------------------------------------|\n| **LessThan**              | `x == LessThan(y)`            | `x < y`                       |                                                                   |\n| **LessThanOrEqual**       | `x == LessThanOrEqual(y)`     | `x <= y`                      |                                                                   |\n| **GreaterThan**           | `x == GreaterThan(y)`         | `x > y`                       |                                                                   |\n| **GreaterThanOrEqual**    | `x == GreaterThanOrEqual(y)`  | `x >= y`                      |                                                                   |\n| **InRange**               | `x == InRange(a, b)`          | `a <= x < b`                  |                                                                   |\n\n**Containers:**\n\n| Stub                      | Usage                         | Equivalent to                 | Notes                                                             |\n|---------------------------|-------------------------------|-------------------------------|-------------------------------------------------------------------|\n| **Contains**              | `x == Contains(y)`            | `y in x`                      |                                                                   |\n| **HasSize**               | `x == HasSize(y)`             | `len(x) == y`                 |                                                                   |\n| **CountOf**               | `x == CountOf(y, c)`          | `x.count(y) == c`             | Works on any iterable, even those that don't support `count()`    |\n| **HasItems**              | `x == HasItems({key: value})` | `x[key] = value`              |                                                                   |\n\n**Strings:**\n\nThese works on both `str` and `bytes` objects.\n\n| Stub                      | Usage                         | Equivalent to                 | Notes                                                             |\n|---------------------------|-------------------------------|-------------------------------|-------------------------------------------------------------------|\n| **StartsWith**            | `x == StartsWith(y)`          | `x.startswith(y)`             |                                                                   |\n| **EndsWith**              | `x == EndsWith(y)`            | `x.endswith(y)`               |                                                                   |\n| **MatchesRegex**          | `x == MatchesRegex(p)`        | `re.match(p, x) is not None`  |                                                                   |\n| **ContainsRegex**         | `x == ContainsRegex(p)`       | `re.search(p, x) is not None` |                                                                   |\n\n**Type and identity testing:**\n\n| Stub                      | Usage                         | Equivalent to                 | Notes                                                             |\n|---------------------------|-------------------------------|-------------------------------|-------------------------------------------------------------------|\n| **Is**                    | `x == Is(y)`                  | `x is y`                      |                                                                   |\n| **IsNot**                 | `x == IsNot(y)`               | `x is not y`                  |                                                                   |\n| **InstanceOf**            | `x == InstanceOf(type)`       | `isinstance(x, type)`         |                                                                   |\n\n\n## Combining stubs\n\nStubs can be combined with the `|` (or), `&` (and), `^` (exclusive or) and\n`~` (not) operators. For example, the following stub expression:\n\n```python\n>>> 'apple' == HasSize(5) & Contains('a')\nTrue\n```\n\nis equivalent to the expression:\n\n```python\n>>> len('apple') == 5 and 'a' in 'apple'\nTrue\n```\n\n\n## License\n\nPyStubs is placed in the public domain. Feel free to do whatever you want with\nit and/or it's source code!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andreacorbellini/pystubs", "keywords": "", "license": "Public Domain", "maintainer": "", "maintainer_email": "", "name": "pystubs", "package_url": "https://pypi.org/project/pystubs/", "platform": "", "project_url": "https://pypi.org/project/pystubs/", "project_urls": {"Homepage": "https://github.com/andreacorbellini/pystubs"}, "release_url": "https://pypi.org/project/pystubs/2018.5.3/", "requires_dist": null, "requires_python": "", "summary": "Dummy values for equality testing", "version": "2018.5.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyStubs: dummy values for equality testing</h1>\n<p>This tiny Python module provides various types that can be used to check\nfor conditions using equality (<code>==</code>) testing. For example, to test whether\na number is less than 5:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">stubs</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"n\">LessThan</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Which is completely equivalent to:</p>\n<pre><code>&gt;&gt;&gt; 2 &lt; 5\nTrue\n</code></pre>\n<p>This approach comes in handy when comparing nested containers, such as\nJSON objects returned by an API:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expected_order</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">MatchesRegex</span><span class=\"p\">(</span><span class=\"s1\">'[0-9a-z]</span><span class=\"si\">{10}</span><span class=\"s1\">'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'quantity'</span><span class=\"p\">:</span> <span class=\"n\">GreaterThan</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'shippingAddress'</span><span class=\"p\">:</span> <span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s1\">'Dublin'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'deliveryDate'</span><span class=\"p\">:</span> <span class=\"n\">ANY</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"n\">InRange</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s1\">'apples'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n<span class=\"o\">...</span>              <span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s1\">'bananas'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n<span class=\"o\">...</span>              <span class=\"o\">~</span><span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s1\">'pears'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expected_order</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'cxw23fac3n'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'quantity'</span><span class=\"p\">:</span> <span class=\"mi\">26</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'shippingAddress'</span><span class=\"p\">:</span> <span class=\"s1\">'18 Some Street, Dublin, London'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'deliveryDate'</span><span class=\"p\">:</span> <span class=\"s1\">'tomorrow'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'apples'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'avocados'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'bananas'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">],</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expected_order</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'XXX'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'quantity'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'shippingAddress'</span><span class=\"p\">:</span> <span class=\"s1\">'18 Some Other Street, New York City, USA'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'deliveryDate'</span><span class=\"p\">:</span> <span class=\"s1\">'yesterday'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">600</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'apples'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'pears'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">],</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>This approach can be very useful in unit testing, to make tests cases\nshorter and easier to understand.</p>\n<h1>Installation</h1>\n<p>PyStubs has no external dependencies. To install it:</p>\n<pre>$ pip install pystubs\n</pre>\n<h2>List of stubs</h2>\n<p><strong>Generics:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Stub</th>\n<th>Usage</th>\n<th>Equivalent to</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>ANY</strong></td>\n<td><code>x == ANY</code></td>\n<td><code>True</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>PLACEHOLDER</strong></td>\n<td><code>x == PLACEHOLDER</code></td>\n<td><code>False</code></td>\n<td>Meant to be used as a placeholder to be replaced at a later time</td>\n</tr>\n<tr>\n<td><strong>AnyOf</strong></td>\n<td><code>x == AnyOf([...])</code></td>\n<td><code>x in [...]</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>NoneOf</strong></td>\n<td><code>x == NoneOf([...])</code></td>\n<td><code>x not in [...]</code></td>\n<td></td>\n</tr></tbody></table>\n<p><strong>Equality:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Stub</th>\n<th>Usage</th>\n<th>Equivalent to</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Equal</strong></td>\n<td><code>x == Equal(y)</code></td>\n<td><code>x == y</code></td>\n<td>Useful when combined with other stubs</td>\n</tr>\n<tr>\n<td><strong>NotEqual</strong></td>\n<td><code>x == NotEqual(y)</code></td>\n<td><code>x != y</code></td>\n<td></td>\n</tr></tbody></table>\n<p><strong>Order:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Stub</th>\n<th>Usage</th>\n<th>Equivalent to</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>LessThan</strong></td>\n<td><code>x == LessThan(y)</code></td>\n<td><code>x &lt; y</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>LessThanOrEqual</strong></td>\n<td><code>x == LessThanOrEqual(y)</code></td>\n<td><code>x &lt;= y</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>GreaterThan</strong></td>\n<td><code>x == GreaterThan(y)</code></td>\n<td><code>x &gt; y</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>GreaterThanOrEqual</strong></td>\n<td><code>x == GreaterThanOrEqual(y)</code></td>\n<td><code>x &gt;= y</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>InRange</strong></td>\n<td><code>x == InRange(a, b)</code></td>\n<td><code>a &lt;= x &lt; b</code></td>\n<td></td>\n</tr></tbody></table>\n<p><strong>Containers:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Stub</th>\n<th>Usage</th>\n<th>Equivalent to</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Contains</strong></td>\n<td><code>x == Contains(y)</code></td>\n<td><code>y in x</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>HasSize</strong></td>\n<td><code>x == HasSize(y)</code></td>\n<td><code>len(x) == y</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>CountOf</strong></td>\n<td><code>x == CountOf(y, c)</code></td>\n<td><code>x.count(y) == c</code></td>\n<td>Works on any iterable, even those that don't support <code>count()</code></td>\n</tr>\n<tr>\n<td><strong>HasItems</strong></td>\n<td><code>x == HasItems({key: value})</code></td>\n<td><code>x[key] = value</code></td>\n<td></td>\n</tr></tbody></table>\n<p><strong>Strings:</strong></p>\n<p>These works on both <code>str</code> and <code>bytes</code> objects.</p>\n<table>\n<thead>\n<tr>\n<th>Stub</th>\n<th>Usage</th>\n<th>Equivalent to</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>StartsWith</strong></td>\n<td><code>x == StartsWith(y)</code></td>\n<td><code>x.startswith(y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>EndsWith</strong></td>\n<td><code>x == EndsWith(y)</code></td>\n<td><code>x.endswith(y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>MatchesRegex</strong></td>\n<td><code>x == MatchesRegex(p)</code></td>\n<td><code>re.match(p, x) is not None</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>ContainsRegex</strong></td>\n<td><code>x == ContainsRegex(p)</code></td>\n<td><code>re.search(p, x) is not None</code></td>\n<td></td>\n</tr></tbody></table>\n<p><strong>Type and identity testing:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Stub</th>\n<th>Usage</th>\n<th>Equivalent to</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Is</strong></td>\n<td><code>x == Is(y)</code></td>\n<td><code>x is y</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>IsNot</strong></td>\n<td><code>x == IsNot(y)</code></td>\n<td><code>x is not y</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>InstanceOf</strong></td>\n<td><code>x == InstanceOf(type)</code></td>\n<td><code>isinstance(x, type)</code></td>\n<td></td>\n</tr></tbody></table>\n<h2>Combining stubs</h2>\n<p>Stubs can be combined with the <code>|</code> (or), <code>&amp;</code> (and), <code>^</code> (exclusive or) and\n<code>~</code> (not) operators. For example, the following stub expression:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'apple'</span> <span class=\"o\">==</span> <span class=\"n\">HasSize</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>is equivalent to the expression:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"s1\">'apple'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">5</span> <span class=\"ow\">and</span> <span class=\"s1\">'a'</span> <span class=\"ow\">in</span> <span class=\"s1\">'apple'</span>\n<span class=\"kc\">True</span>\n</pre>\n<h2>License</h2>\n<p>PyStubs is placed in the public domain. Feel free to do whatever you want with\nit and/or it's source code!</p>\n\n          </div>"}, "last_serial": 3838846, "releases": {"2018.5.0": [{"comment_text": "", "digests": {"md5": "0e495195aa0b0d61959b6e7887344b30", "sha256": "ddc73dfffa1e8c34a72891f383e605617b337a77723ac35aad9e83648db1c405"}, "downloads": -1, "filename": "pystubs-2018.5.0.tar.gz", "has_sig": false, "md5_digest": "0e495195aa0b0d61959b6e7887344b30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5008, "upload_time": "2018-05-06T16:10:32", "upload_time_iso_8601": "2018-05-06T16:10:32.501115Z", "url": "https://files.pythonhosted.org/packages/68/ee/5c6c8e995dff82b4c32316a42945b4abe4dbbbf3269c996aa8eda2fa96d2/pystubs-2018.5.0.tar.gz", "yanked": false}], "2018.5.1": [{"comment_text": "", "digests": {"md5": "5444f75d9f91e096492ae886e6a9b9be", "sha256": "31262d32d7a962385758371081666dbbebfdc0c5d2c699267bc52ca938fef692"}, "downloads": -1, "filename": "pystubs-2018.5.1.tar.gz", "has_sig": false, "md5_digest": "5444f75d9f91e096492ae886e6a9b9be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5095, "upload_time": "2018-05-06T16:25:37", "upload_time_iso_8601": "2018-05-06T16:25:37.423534Z", "url": "https://files.pythonhosted.org/packages/6e/76/5c892668518c86540318f3a53636e7db94d5b9233625e3c41fdc6baac653/pystubs-2018.5.1.tar.gz", "yanked": false}], "2018.5.2": [{"comment_text": "", "digests": {"md5": "2a293cd0e2900c5531c329a7ac8ef918", "sha256": "eb9f79472469019dd214cfc2f6ec2458a4591999876ba318934a0ae31084e0c5"}, "downloads": -1, "filename": "pystubs-2018.5.2.tar.gz", "has_sig": false, "md5_digest": "2a293cd0e2900c5531c329a7ac8ef918", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5093, "upload_time": "2018-05-06T16:29:42", "upload_time_iso_8601": "2018-05-06T16:29:42.033122Z", "url": "https://files.pythonhosted.org/packages/a4/06/c283caab39c8116f413218a248b8a85117979107a1d57a0be4e98b3284a3/pystubs-2018.5.2.tar.gz", "yanked": false}], "2018.5.3": [{"comment_text": "", "digests": {"md5": "e9d6edbaa3f6285d725775d2c2a9f837", "sha256": "dafd6a02bdf4d29f56512e6825b75e74ccd8849b93756dce1a69c6dadc243ffb"}, "downloads": -1, "filename": "pystubs-2018.5.3.tar.gz", "has_sig": false, "md5_digest": "e9d6edbaa3f6285d725775d2c2a9f837", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6035, "upload_time": "2018-05-06T16:32:09", "upload_time_iso_8601": "2018-05-06T16:32:09.021172Z", "url": "https://files.pythonhosted.org/packages/61/73/18785f051c2c8d94fc49f19482219b063021b19de591423e5577727705e2/pystubs-2018.5.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9d6edbaa3f6285d725775d2c2a9f837", "sha256": "dafd6a02bdf4d29f56512e6825b75e74ccd8849b93756dce1a69c6dadc243ffb"}, "downloads": -1, "filename": "pystubs-2018.5.3.tar.gz", "has_sig": false, "md5_digest": "e9d6edbaa3f6285d725775d2c2a9f837", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6035, "upload_time": "2018-05-06T16:32:09", "upload_time_iso_8601": "2018-05-06T16:32:09.021172Z", "url": "https://files.pythonhosted.org/packages/61/73/18785f051c2c8d94fc49f19482219b063021b19de591423e5577727705e2/pystubs-2018.5.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:52 2020"}