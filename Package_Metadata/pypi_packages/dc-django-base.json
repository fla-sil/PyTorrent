{"info": {"author": "Tim Court", "author_email": "tctimmeh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4"], "description": "DC Django Base\n==============\n\nIncluded Libraries\n------------------\n\nThe following libraries are made available to your application by **dc-django-base**.\n\n**Python Libraries**:\n\n* django-widget-tweaks\n* django-allauth\n* django-gravatar2\n* selenium\n\n**Javascript**\n\n* bootstrap 3.3.2\n* jquery 2.1.3\n* jquery cookie 1.4.1\n* jquery form 3.51\n\nInstallation\n------------\n\nSettings\n````````\n\nStart the site's settings by importing the ``base_settings`` file::\n\n    from dcbase.base_settings import *\n\nRefer to this file to see the complete list of settings that are included by default. The following are settings that your \nsite **must** provide:\n\n* BASE_DIR (typically ``os.path.dirname(os.path.dirname(__file__))``)\n* SECRET_KEY (source the production key from a secure place, **not** a text file in a public source repository)\n* ROOT_URLCONF\n* WSGI_APPLICATION\n* DATABASES\n* EMAIL_BACKEND (consider using ``django.core.mail.backends.console.EmailBackend`` for testing)\n\nAdd the site's apps to ``INSTALLED_APPS`` by prepending them to the base apps::\n\n    INSTALLED_APPS = (\n        'some_app',\n        'allauth.socialaccount.providers.google',\n    ) + INSTALLED_APPS\n\nOther \"list\" settings can be modified in a similar way. \n\nBecause the order of middleware is important it may be required to copy and modify the entire ``MIDDLEWARE_CLASSES`` setting\nto inject a new middleware class in the middle of the list.\n\nMultiple Settings\n~~~~~~~~~~~~~~~~~\n\nA project often needs to maintain multiple settings files. For example, a project may require different settings for it's\ndevelopment, staging, and production sites. Follow this pattern to allow easy switching between settings.\n\nFirst, create a ``settings_common.py`` file. Fill this file with settings that are common to all configurations. Normally,\nthis file would import ``dcbase.base_settings`` as described above and include settings like ``BASE_DIR``, ``ROOT_URLCONF``,\n``INSTALLED_APPS``, etc. For safety, **never** include a setting here that could expose the production site to danger, such as\n``SECRET_KEY`` or ``DEBUG = True``.\n\nCreate a settings file for each specific configuration. Include the common settings file (e.g. ``from .settings_common import *``)\nand add settings that are unique to the specific installation. For example, create a ``settings_dev.py`` for development settings and\n``settings_prod.py`` for production settings. This file will normally contain settings like ``SECRET_KEY``, ``DATABASES``,\n``ALLOWED_HOSTS``, etc. Be **very** careful how the production settings file is managed and versioned to avoid exposing sensitive\ninformation such as the secret key and database credentials.\n\nFinally, create a symlink to the specific settings file. For example, ``ln -s settings_prod.py settings.py``.\n\nUrls\n````\n\nInclude the following urls in the site's urlconf::\n\n    url(r'', include('dcbase.urls')),\n\nTemplates\n`````````\n\nCreate a ``base.html`` in the root of your templates directory. Extend ``dcbase/base.html`` and override\nblocks that are global to your site. For example::\n\n    {% extends \"dcbase/base.html\" %}\n    \n    {% block headerBarBrand %}My Site Brand{% endblock %}\n    {% block footerBar %}\n        Footer content!\n    {% endblock %}\n\nTemplates\n---------\n\nDC-Base provides templates to override and include.\n\nBase\n````\n\nThe ``dcbase/base.html`` provides the basic page framework and layout. Provide your site's base template by extending this template\nand overriding the following blocks.\n\n- **pageTitle**: title of the page, as it will appear in the browser window's title bar\n- **style**: inline CSS to include in the page style tag. you need to include your own enclosing \\<style> element.\n- **head**: extra content to include in the page head tag. use this to link external css, add meta tags, etc.\n- **headerBarBrand**: content for the \"brand\" link in the upper right, usually the app title or site logo\n- **headerBarBrandLink**: target of the \"brand\" link, usually the app's home page. default is site root.\n- **headerBarLeft**: extra nav items (\\<li>'s) to include on the left side of the header bar\n- **headerBarRight**: extra nav items (\\<li>'s) to include on the right side of the header bar\n- **content**: the main content of the page. should normally start with a div with class \"container\" or \"container-fluid\"\n- **footerBar**: content for the footer nav bar\n- **script**: any additional scripts or script links the page needs. inline scripts must supply their own enclosing \\<script> tag\n\nNarrow Dialog Base\n~~~~~~~~~~~~~~~~~~\n\nExtend from ``dcbase/base-narrow-dialog.html`` for any page that is just a single, vertical form or dialog. Override the following\nblocks to provide the dialog content:\n\n- **panelHeading**: title of the dialog panel. include any required \\<h*> tags.\n- **panelType**: the type of panel (e.g. success, danger, etc.). default is \"default\"\n- **panelBody**: content of the dialog panel\n\nForms\n`````\n\nInclude ``dcbase/form.html`` or ``dcbase/form-horizontal.html`` to create consistently styled forms. These templates expect a context\nvariable called ``form``.\n\nSet the ``autofocus`` context variable to the id of a form field which should be automatically focused when the page loads. For example::\n\n    {% include \"dcbase/form.html\" with autofocus=\"id_important_field\" %}\n\n\nPop-up Ajax Forms\n~~~~~~~~~~~~~~~~~\n\nCreate an AJAX-ready form inside a pop-up dialog by following this pattern. First create a view using the standard Django form\npattern. When the form is new or contains errors then render a template that contains the form as it would appear inside the\ncontent portion of a boostrap modal dialog. The default template ``dcbase/form/popup-form.html`` should be suitable for most cases.\nThis template can either be extended or used directly.\n\nTo extend the template, override the \"url\" block to supply the form action, override the \"title\" block to supply a title for the\ndialog, and, optionally, override the \"footer\" block to provide controls such as submit buttons. If the \"footer\" block is not overridden\nthen Submit and Cancel buttons will be provided by default.\n\nNormally, only the url, title, and submit button text need to be changed. In this case the popup-form.html template can be used directly.\nSupply a template render context variable \"form_url\", \"dialog_title\", and \"submit_text\" to override these values without extending\nthe template. If no text is given for the submit button then the default of \"Submit\" is used.\n\nWhen the form is valid the view can take one of two actions. Either render the template again with a new form (for a \"submit\nanother\" pattern) or return a JSON response containing information on how the page should behave.\n\nThe JSON response must be a map. It must have a key called \"action\" that describes what action the page should take. Possible\nvalues are:\n\n- **reload**: The page will be reloaded at the current URL.\n- **close**: The modal dialog will be closed and destroyed.\n- **redirect**: The page will be redirected to the url given by the \"url\" member of the JSON response.\n\nFor example, returning a JSON response of ``{action: 'redirect', url: '/foo'}`` will cause the page to redirect to /foo.\n\nIf using class-based views, include the PopupFormMixin in the list of base classes **before** the other base view classes. This\nmixin class allows the following customizations:\n\n**Class-level Properties**\n\n- **form_valid_action**: The action to take when the form is valid. Must be a PopupValidAction value. Default is reload.\n- **form_url**: URL that generates and handles this form. Default is to use the path portion of the incoming HTTP request.\n- **dialog_title**: Text to put in the header bar of the pop-up dialog. Default is None.\n- **submit_text**: Text for the default submit button. Default is \"Submit\".\n- **submit_style**: Bootstrap style (e.g. info, danger, etc.) for the default submit button. Default is \"primary\".\n- **success_url**: The URL to redirect to when the action is redirect.\n\n**Methods**\n\nEach of the above class-level properties has a corresponding \"get_*\" method. Additionally, the following methods can be overridden\nor extended:\n\n- **popup_form_valid()**: Returns an HttpResponse as appropriate for the view's action.\n- **get_new_form()**: Returns a new form instance with initial data, regardless of any data on the incoming request.\n\nLaunch the pop-up form by calling the ``dcbase.popupAjaxForm(options)`` function. The \"options\" argument is an object which accepts\nthe following values:\n\n- **url**: (Required) The URL of the view that renders the form.\n- **small**: Boolean; true if the modal popup should be narrow. Default false.\n- **afterLoad**: function to be called after the form content is loaded from the server. The function is passed one argument: the modal-content div.\n\nTemplate Tags\n`````````````\n\nuser_tags\n~~~~~~~~~\n\n- **{% userNameLink user %}**: insert a link to the given user's profile\n\nUser Profiles\n-------------\n\nCreate app-specific user profile data by following these instructions. \n\nCreate a database model to encapsulate the profile data. Give it a ``OneToOneField`` to the ``User`` model and call it ``user``.\n\nCreate a ``ModelForm`` to update the new profile model.\n\nCreate a URL to the view that will edit the new profile model. To be consistent with other profile urls it should be in the form\nof ``^accounts/profile/edit/CATEGORY/$``, where CATEGORY is unique to your app.  Make sure the url has a name, such as\n``account_profile_edit_CATEGORY``.\n\nCreate the view for the above URL. The view class should look similar to this::\n\n    @profile_form_view()\n    class ProfileEditCATEGORYView(ProfileEditFormView):\n        form_class = MyProfileForm\n        profile_nav_name = _('Nav Name')\n        profile_panel_name = _('Panel Name')\n        profile_edit_url = reverse_lazy('account_profile_edit_CATEGORY')\n    \n    profileEditCATEGORYView = login_required(ProfileEditCATEGORYView.as_view())\n\nThe class-level attribute are:\n\n* **profile_nav_name**: the title that will appear on the user profile navigation bar\n* **profile_panel_name**: the title that will appear on the panel that holds the form\n* **profile_edit_url**: URL to the page that allows editing of this profile model\n\nAfter these things are done a new pane will appear in the user's profile edit page. This new page will contain the form for the\napps profile model.\n\nNew users will automatically get an instance of the new profile model in the database. If this is a new profile model for a site\nwith existing users then be sure to use a database migration to create an instance for every existing user.\n\nTesting\n-------\n\nThis project provides several classes with helper methods for testing. These classes are outlined below.\n\nBase Test Case\n``````````````\n\nAn abstract base test class is provided as `dcbase.tests.BaseTestCase`. This class provides the following methods:\n\n* **randStr**: generate a random string\n* **createUser**: create a normal user\n* **createAdminUser**: create an admin user\n* **createSuperUser**: create a super user\n* **expireSession**: expire a session\n* **logInAs**: log a user in\n* **logout**: logs out the currently logged in user\n\nUnit Testing\n````````````\n\nNormal \"unit\" tests should derive from `dcbase.tests.unit.UnitTestCase`. This class provides the following methods:\n\n* **assertResponseStatusIsOk**\n* **assertResponseStatusIsNotFound**\n* **assertResponseStatusIsNotAuthorized**\n\nRequires Login Mixin\n~~~~~~~~~~~~~~~~~~~~\n\nThe `dcbase.tests.unit.view.mixin.RequiresLogin` class is a mixin class for testing views that verifies that the\nview requires a logged in user. This mixin tests that:\n\n* An anonymous user is redirected to the log in page\n* The view returns status ok for logged in users\n\nThis mixin class requires that `self.url` contains the url of the view under test.\n\nBrowser Testing\n```````````````\n\nBrowser testing, using selenium webdriver, is comprised of two main parts. First, a `PageObject` must be created to\nrepresent each page that the tests will interact with. Second, a test case derived from\n`dcbase.tests.browser.BrowserTestCase` must be created for the page under test. Each page object and test case has\na property, `browser`, which is the selenium webdriver object for the browser used in the tests.\n\nPage Object\n~~~~~~~~~~~\n\nA page object abstracts all interaction with a web page. Tests should never make selenium calls directly. Follow this pattern\nto create a page object::\n\n    class ThingDetailPage(PageObject):\n        _urlPattern = 'thing:detail'\n        _pageName = 'Thing Detail'\n\nThe PageObject requires 2 class-level attributes: `_urlPattern` and `_pageName`. The url pattern specifies a named URL pattern\nfor the page under test. The page name is used for logging purposes.\n\nCreate a new instance of a page object by passing it a selenium webdriver instance and any other keyword arguments necessary to\nfill in the variables fields of the url pattern. For example::\n\n    page = ThingDetailPage(self.browser, thingId = 123)\n\nWhen a page object is created it will verify that the browser is currently at the correct URL for the page. A runtime error is\nraised if the browser is currently at any other URL.\n\nBrowserTestCase\n~~~~~~~~~~~~~~~\n\nThe browser test case derives from `BaseTestCase` and provides several other features. Create a new browser test case using this\npattern::\n\n    class TestThingDetail(BrowserTestCase):\n        _pageClass = ThingDetailPage\n        _requiresLogin = True           # Optional\n\n        def setUp(self):\n            thing = create_a_thing()\n            self._urlFields['thingId'] = thing.id\n            super().setUp()\n\nIn the above example `_pageClass` is the class of the PageObject for the page under test. The `_requiresLogin` property tells\nthe test case that this page requires the user to be logged in.  When a browser test case starts it will launch the browser,\nlog in a user if required, and then browse to the page represented by the given PageObject. Variable fields for the page object\nURL can be provided during the test case's setUp method, as shown above. An instance of the page object is available from a\nproperty called `page`.\n\nBy default, `BrowserTestCase` uses the \"Chrome\" webdriver. Set the `BROWSER` environment variable to the name of a different\nwebdriver class to change which browser is used to run the tests.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tctimmeh/dc-django-base", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "dc-django-base", "package_url": "https://pypi.org/project/dc-django-base/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dc-django-base/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/tctimmeh/dc-django-base"}, "release_url": "https://pypi.org/project/dc-django-base/0.6.3/", "requires_dist": null, "requires_python": null, "summary": "Django base application", "version": "0.6.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"included-libraries\">\n<h2>Included Libraries</h2>\n<p>The following libraries are made available to your application by <strong>dc-django-base</strong>.</p>\n<p><strong>Python Libraries</strong>:</p>\n<ul>\n<li>django-widget-tweaks</li>\n<li>django-allauth</li>\n<li>django-gravatar2</li>\n<li>selenium</li>\n</ul>\n<p><strong>Javascript</strong></p>\n<ul>\n<li>bootstrap 3.3.2</li>\n<li>jquery 2.1.3</li>\n<li>jquery cookie 1.4.1</li>\n<li>jquery form 3.51</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"settings\">\n<h3>Settings</h3>\n<p>Start the site\u2019s settings by importing the <tt>base_settings</tt> file:</p>\n<pre>from dcbase.base_settings import *\n</pre>\n<p>Refer to this file to see the complete list of settings that are included by default. The following are settings that your\nsite <strong>must</strong> provide:</p>\n<ul>\n<li>BASE_DIR (typically <tt>os.path.dirname(os.path.dirname(__file__))</tt>)</li>\n<li>SECRET_KEY (source the production key from a secure place, <strong>not</strong> a text file in a public source repository)</li>\n<li>ROOT_URLCONF</li>\n<li>WSGI_APPLICATION</li>\n<li>DATABASES</li>\n<li>EMAIL_BACKEND (consider using <tt>django.core.mail.backends.console.EmailBackend</tt> for testing)</li>\n</ul>\n<p>Add the site\u2019s apps to <tt>INSTALLED_APPS</tt> by prepending them to the base apps:</p>\n<pre>INSTALLED_APPS = (\n    'some_app',\n    'allauth.socialaccount.providers.google',\n) + INSTALLED_APPS\n</pre>\n<p>Other \u201clist\u201d settings can be modified in a similar way.</p>\n<p>Because the order of middleware is important it may be required to copy and modify the entire <tt>MIDDLEWARE_CLASSES</tt> setting\nto inject a new middleware class in the middle of the list.</p>\n<div id=\"multiple-settings\">\n<h4>Multiple Settings</h4>\n<p>A project often needs to maintain multiple settings files. For example, a project may require different settings for it\u2019s\ndevelopment, staging, and production sites. Follow this pattern to allow easy switching between settings.</p>\n<p>First, create a <tt>settings_common.py</tt> file. Fill this file with settings that are common to all configurations. Normally,\nthis file would import <tt>dcbase.base_settings</tt> as described above and include settings like <tt>BASE_DIR</tt>, <tt>ROOT_URLCONF</tt>,\n<tt>INSTALLED_APPS</tt>, etc. For safety, <strong>never</strong> include a setting here that could expose the production site to danger, such as\n<tt>SECRET_KEY</tt> or <tt>DEBUG = True</tt>.</p>\n<p>Create a settings file for each specific configuration. Include the common settings file (e.g. <tt>from .settings_common import *</tt>)\nand add settings that are unique to the specific installation. For example, create a <tt>settings_dev.py</tt> for development settings and\n<tt>settings_prod.py</tt> for production settings. This file will normally contain settings like <tt>SECRET_KEY</tt>, <tt>DATABASES</tt>,\n<tt>ALLOWED_HOSTS</tt>, etc. Be <strong>very</strong> careful how the production settings file is managed and versioned to avoid exposing sensitive\ninformation such as the secret key and database credentials.</p>\n<p>Finally, create a symlink to the specific settings file. For example, <tt>ln <span class=\"pre\">-s</span> settings_prod.py settings.py</tt>.</p>\n</div>\n</div>\n<div id=\"urls\">\n<h3>Urls</h3>\n<p>Include the following urls in the site\u2019s urlconf:</p>\n<pre>url(r'', include('dcbase.urls')),\n</pre>\n</div>\n<div id=\"templates\">\n<h3>Templates</h3>\n<p>Create a <tt>base.html</tt> in the root of your templates directory. Extend <tt>dcbase/base.html</tt> and override\nblocks that are global to your site. For example:</p>\n<pre>{% extends \"dcbase/base.html\" %}\n\n{% block headerBarBrand %}My Site Brand{% endblock %}\n{% block footerBar %}\n    Footer content!\n{% endblock %}\n</pre>\n</div>\n</div>\n<div id=\"id1\">\n<h2>Templates</h2>\n<p>DC-Base provides templates to override and include.</p>\n<div id=\"base\">\n<h3>Base</h3>\n<p>The <tt>dcbase/base.html</tt> provides the basic page framework and layout. Provide your site\u2019s base template by extending this template\nand overriding the following blocks.</p>\n<ul>\n<li><strong>pageTitle</strong>: title of the page, as it will appear in the browser window\u2019s title bar</li>\n<li><strong>style</strong>: inline CSS to include in the page style tag. you need to include your own enclosing &lt;style&gt; element.</li>\n<li><strong>head</strong>: extra content to include in the page head tag. use this to link external css, add meta tags, etc.</li>\n<li><strong>headerBarBrand</strong>: content for the \u201cbrand\u201d link in the upper right, usually the app title or site logo</li>\n<li><strong>headerBarBrandLink</strong>: target of the \u201cbrand\u201d link, usually the app\u2019s home page. default is site root.</li>\n<li><strong>headerBarLeft</strong>: extra nav items (&lt;li&gt;\u2019s) to include on the left side of the header bar</li>\n<li><strong>headerBarRight</strong>: extra nav items (&lt;li&gt;\u2019s) to include on the right side of the header bar</li>\n<li><strong>content</strong>: the main content of the page. should normally start with a div with class \u201ccontainer\u201d or \u201ccontainer-fluid\u201d</li>\n<li><strong>footerBar</strong>: content for the footer nav bar</li>\n<li><strong>script</strong>: any additional scripts or script links the page needs. inline scripts must supply their own enclosing &lt;script&gt; tag</li>\n</ul>\n<div id=\"narrow-dialog-base\">\n<h4>Narrow Dialog Base</h4>\n<p>Extend from <tt><span class=\"pre\">dcbase/base-narrow-dialog.html</span></tt> for any page that is just a single, vertical form or dialog. Override the following\nblocks to provide the dialog content:</p>\n<ul>\n<li><strong>panelHeading</strong>: title of the dialog panel. include any required &lt;h*&gt; tags.</li>\n<li><strong>panelType</strong>: the type of panel (e.g. success, danger, etc.). default is \u201cdefault\u201d</li>\n<li><strong>panelBody</strong>: content of the dialog panel</li>\n</ul>\n</div>\n</div>\n<div id=\"forms\">\n<h3>Forms</h3>\n<p>Include <tt>dcbase/form.html</tt> or <tt><span class=\"pre\">dcbase/form-horizontal.html</span></tt> to create consistently styled forms. These templates expect a context\nvariable called <tt>form</tt>.</p>\n<p>Set the <tt>autofocus</tt> context variable to the id of a form field which should be automatically focused when the page loads. For example:</p>\n<pre>{% include \"dcbase/form.html\" with autofocus=\"id_important_field\" %}\n</pre>\n<div id=\"pop-up-ajax-forms\">\n<h4>Pop-up Ajax Forms</h4>\n<p>Create an AJAX-ready form inside a pop-up dialog by following this pattern. First create a view using the standard Django form\npattern. When the form is new or contains errors then render a template that contains the form as it would appear inside the\ncontent portion of a boostrap modal dialog. The default template <tt><span class=\"pre\">dcbase/form/popup-form.html</span></tt> should be suitable for most cases.\nThis template can either be extended or used directly.</p>\n<p>To extend the template, override the \u201curl\u201d block to supply the form action, override the \u201ctitle\u201d block to supply a title for the\ndialog, and, optionally, override the \u201cfooter\u201d block to provide controls such as submit buttons. If the \u201cfooter\u201d block is not overridden\nthen Submit and Cancel buttons will be provided by default.</p>\n<p>Normally, only the url, title, and submit button text need to be changed. In this case the popup-form.html template can be used directly.\nSupply a template render context variable \u201cform_url\u201d, \u201cdialog_title\u201d, and \u201csubmit_text\u201d to override these values without extending\nthe template. If no text is given for the submit button then the default of \u201cSubmit\u201d is used.</p>\n<p>When the form is valid the view can take one of two actions. Either render the template again with a new form (for a \u201csubmit\nanother\u201d pattern) or return a JSON response containing information on how the page should behave.</p>\n<p>The JSON response must be a map. It must have a key called \u201caction\u201d that describes what action the page should take. Possible\nvalues are:</p>\n<ul>\n<li><strong>reload</strong>: The page will be reloaded at the current URL.</li>\n<li><strong>close</strong>: The modal dialog will be closed and destroyed.</li>\n<li><strong>redirect</strong>: The page will be redirected to the url given by the \u201curl\u201d member of the JSON response.</li>\n</ul>\n<p>For example, returning a JSON response of <tt>{action: 'redirect', url: '/foo'}</tt> will cause the page to redirect to /foo.</p>\n<p>If using class-based views, include the PopupFormMixin in the list of base classes <strong>before</strong> the other base view classes. This\nmixin class allows the following customizations:</p>\n<p><strong>Class-level Properties</strong></p>\n<ul>\n<li><strong>form_valid_action</strong>: The action to take when the form is valid. Must be a PopupValidAction value. Default is reload.</li>\n<li><strong>form_url</strong>: URL that generates and handles this form. Default is to use the path portion of the incoming HTTP request.</li>\n<li><strong>dialog_title</strong>: Text to put in the header bar of the pop-up dialog. Default is None.</li>\n<li><strong>submit_text</strong>: Text for the default submit button. Default is \u201cSubmit\u201d.</li>\n<li><strong>submit_style</strong>: Bootstrap style (e.g. info, danger, etc.) for the default submit button. Default is \u201cprimary\u201d.</li>\n<li><strong>success_url</strong>: The URL to redirect to when the action is redirect.</li>\n</ul>\n<p><strong>Methods</strong></p>\n<p>Each of the above class-level properties has a corresponding \u201cget_*\u201d method. Additionally, the following methods can be overridden\nor extended:</p>\n<ul>\n<li><strong>popup_form_valid()</strong>: Returns an HttpResponse as appropriate for the view\u2019s action.</li>\n<li><strong>get_new_form()</strong>: Returns a new form instance with initial data, regardless of any data on the incoming request.</li>\n</ul>\n<p>Launch the pop-up form by calling the <tt>dcbase.popupAjaxForm(options)</tt> function. The \u201coptions\u201d argument is an object which accepts\nthe following values:</p>\n<ul>\n<li><strong>url</strong>: (Required) The URL of the view that renders the form.</li>\n<li><strong>small</strong>: Boolean; true if the modal popup should be narrow. Default false.</li>\n<li><strong>afterLoad</strong>: function to be called after the form content is loaded from the server. The function is passed one argument: the modal-content div.</li>\n</ul>\n</div>\n</div>\n<div id=\"template-tags\">\n<h3>Template Tags</h3>\n<h3 id=\"user-tags\"><span class=\"section-subtitle\">user_tags</span></h3>\n<ul>\n<li><strong>{% userNameLink user %}</strong>: insert a link to the given user\u2019s profile</li>\n</ul>\n</div>\n</div>\n<div id=\"user-profiles\">\n<h2>User Profiles</h2>\n<p>Create app-specific user profile data by following these instructions.</p>\n<p>Create a database model to encapsulate the profile data. Give it a <tt>OneToOneField</tt> to the <tt>User</tt> model and call it <tt>user</tt>.</p>\n<p>Create a <tt>ModelForm</tt> to update the new profile model.</p>\n<p>Create a URL to the view that will edit the new profile model. To be consistent with other profile urls it should be in the form\nof <tt>^accounts/profile/edit/CATEGORY/$</tt>, where CATEGORY is unique to your app.  Make sure the url has a name, such as\n<tt>account_profile_edit_CATEGORY</tt>.</p>\n<p>Create the view for the above URL. The view class should look similar to this:</p>\n<pre>@profile_form_view()\nclass ProfileEditCATEGORYView(ProfileEditFormView):\n    form_class = MyProfileForm\n    profile_nav_name = _('Nav Name')\n    profile_panel_name = _('Panel Name')\n    profile_edit_url = reverse_lazy('account_profile_edit_CATEGORY')\n\nprofileEditCATEGORYView = login_required(ProfileEditCATEGORYView.as_view())\n</pre>\n<p>The class-level attribute are:</p>\n<ul>\n<li><strong>profile_nav_name</strong>: the title that will appear on the user profile navigation bar</li>\n<li><strong>profile_panel_name</strong>: the title that will appear on the panel that holds the form</li>\n<li><strong>profile_edit_url</strong>: URL to the page that allows editing of this profile model</li>\n</ul>\n<p>After these things are done a new pane will appear in the user\u2019s profile edit page. This new page will contain the form for the\napps profile model.</p>\n<p>New users will automatically get an instance of the new profile model in the database. If this is a new profile model for a site\nwith existing users then be sure to use a database migration to create an instance for every existing user.</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>This project provides several classes with helper methods for testing. These classes are outlined below.</p>\n<div id=\"base-test-case\">\n<h3>Base Test Case</h3>\n<p>An abstract base test class is provided as <cite>dcbase.tests.BaseTestCase</cite>. This class provides the following methods:</p>\n<ul>\n<li><strong>randStr</strong>: generate a random string</li>\n<li><strong>createUser</strong>: create a normal user</li>\n<li><strong>createAdminUser</strong>: create an admin user</li>\n<li><strong>createSuperUser</strong>: create a super user</li>\n<li><strong>expireSession</strong>: expire a session</li>\n<li><strong>logInAs</strong>: log a user in</li>\n<li><strong>logout</strong>: logs out the currently logged in user</li>\n</ul>\n</div>\n<div id=\"unit-testing\">\n<h3>Unit Testing</h3>\n<p>Normal \u201cunit\u201d tests should derive from <cite>dcbase.tests.unit.UnitTestCase</cite>. This class provides the following methods:</p>\n<ul>\n<li><strong>assertResponseStatusIsOk</strong></li>\n<li><strong>assertResponseStatusIsNotFound</strong></li>\n<li><strong>assertResponseStatusIsNotAuthorized</strong></li>\n</ul>\n<div id=\"requires-login-mixin\">\n<h4>Requires Login Mixin</h4>\n<p>The <cite>dcbase.tests.unit.view.mixin.RequiresLogin</cite> class is a mixin class for testing views that verifies that the\nview requires a logged in user. This mixin tests that:</p>\n<ul>\n<li>An anonymous user is redirected to the log in page</li>\n<li>The view returns status ok for logged in users</li>\n</ul>\n<p>This mixin class requires that <cite>self.url</cite> contains the url of the view under test.</p>\n</div>\n</div>\n<div id=\"browser-testing\">\n<h3>Browser Testing</h3>\n<p>Browser testing, using selenium webdriver, is comprised of two main parts. First, a <cite>PageObject</cite> must be created to\nrepresent each page that the tests will interact with. Second, a test case derived from\n<cite>dcbase.tests.browser.BrowserTestCase</cite> must be created for the page under test. Each page object and test case has\na property, <cite>browser</cite>, which is the selenium webdriver object for the browser used in the tests.</p>\n<div id=\"page-object\">\n<h4>Page Object</h4>\n<p>A page object abstracts all interaction with a web page. Tests should never make selenium calls directly. Follow this pattern\nto create a page object:</p>\n<pre>class ThingDetailPage(PageObject):\n    _urlPattern = 'thing:detail'\n    _pageName = 'Thing Detail'\n</pre>\n<p>The PageObject requires 2 class-level attributes: <cite>_urlPattern</cite> and <cite>_pageName</cite>. The url pattern specifies a named URL pattern\nfor the page under test. The page name is used for logging purposes.</p>\n<p>Create a new instance of a page object by passing it a selenium webdriver instance and any other keyword arguments necessary to\nfill in the variables fields of the url pattern. For example:</p>\n<pre>page = ThingDetailPage(self.browser, thingId = 123)\n</pre>\n<p>When a page object is created it will verify that the browser is currently at the correct URL for the page. A runtime error is\nraised if the browser is currently at any other URL.</p>\n</div>\n<div id=\"browsertestcase\">\n<h4>BrowserTestCase</h4>\n<p>The browser test case derives from <cite>BaseTestCase</cite> and provides several other features. Create a new browser test case using this\npattern:</p>\n<pre>class TestThingDetail(BrowserTestCase):\n    _pageClass = ThingDetailPage\n    _requiresLogin = True           # Optional\n\n    def setUp(self):\n        thing = create_a_thing()\n        self._urlFields['thingId'] = thing.id\n        super().setUp()\n</pre>\n<p>In the above example <cite>_pageClass</cite> is the class of the PageObject for the page under test. The <cite>_requiresLogin</cite> property tells\nthe test case that this page requires the user to be logged in.  When a browser test case starts it will launch the browser,\nlog in a user if required, and then browse to the page represented by the given PageObject. Variable fields for the page object\nURL can be provided during the test case\u2019s setUp method, as shown above. An instance of the page object is available from a\nproperty called <cite>page</cite>.</p>\n<p>By default, <cite>BrowserTestCase</cite> uses the \u201cChrome\u201d webdriver. Set the <cite>BROWSER</cite> environment variable to the name of a different\nwebdriver class to change which browser is used to run the tests.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1499167, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2dff3ef365d0189d4721f5ebc5d2ac6c", "sha256": "76f97cf50e290aed25f06dad43153a69f48fa1f4f19702c17ef92e8a28b354ac"}, "downloads": -1, "filename": "dc-django-base-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2dff3ef365d0189d4721f5ebc5d2ac6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19072, "upload_time": "2014-11-28T17:08:37", "upload_time_iso_8601": "2014-11-28T17:08:37.560702Z", "url": "https://files.pythonhosted.org/packages/88/a6/db0eb81563fbbfaab2182685033998c9c1c5f3b5eace57ab95e51b6e3802/dc-django-base-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "573c3ee3b4812a90b26bc12b9fcfacb2", "sha256": "31bbbfb3c637fef055179423342ac267fd05ee96eb09c4b495c090187ee746a3"}, "downloads": -1, "filename": "dc-django-base-0.2.0.tar.gz", "has_sig": false, "md5_digest": "573c3ee3b4812a90b26bc12b9fcfacb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26148, "upload_time": "2014-11-30T18:23:32", "upload_time_iso_8601": "2014-11-30T18:23:32.512089Z", "url": "https://files.pythonhosted.org/packages/b5/5c/2bf0de7fd99c8d336597b22792555bc302641e1b19f0fc98e769a3d2d740/dc-django-base-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "275b0f03861d4b73f9233fe17487b00b", "sha256": "d6e9572aa1160a14b08c4e1afd78cfcc95b603a16aa071795cba35285836fafe"}, "downloads": -1, "filename": "dc-django-base-0.3.0.tar.gz", "has_sig": false, "md5_digest": "275b0f03861d4b73f9233fe17487b00b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26889, "upload_time": "2015-02-13T15:29:49", "upload_time_iso_8601": "2015-02-13T15:29:49.477407Z", "url": "https://files.pythonhosted.org/packages/d0/8e/97e00d7ce2a4f4fe2f00df5a2c235ae7614c3743787be30a64addee9a793/dc-django-base-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "566e65df3e16f944aca5c30879865d44", "sha256": "c822e359be97421bd53f17e22682f9ade8e2296879d70ccbba87ce81394c13f2"}, "downloads": -1, "filename": "dc-django-base-0.3.1.tar.gz", "has_sig": false, "md5_digest": "566e65df3e16f944aca5c30879865d44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28337, "upload_time": "2015-02-17T05:10:37", "upload_time_iso_8601": "2015-02-17T05:10:37.541045Z", "url": "https://files.pythonhosted.org/packages/b7/89/d89b202182bdcfd2dc9bc31af7c54005b0656fd61aa8d5d53d2af8fc3f2c/dc-django-base-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "f7852cf584c4d0efdfb0aff0dff74b07", "sha256": "641e6148712c2b6b70c569f540a0be8697222df28fd6b927d8b33c1f3b3ef46a"}, "downloads": -1, "filename": "dc-django-base-0.3.2.tar.gz", "has_sig": false, "md5_digest": "f7852cf584c4d0efdfb0aff0dff74b07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28338, "upload_time": "2015-02-18T05:03:18", "upload_time_iso_8601": "2015-02-18T05:03:18.056619Z", "url": "https://files.pythonhosted.org/packages/42/e6/3b3e1d5753b2fa0468dcd90b9a4c8d86a5f16e303f0ec60b3200c00f1be7/dc-django-base-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "1229c4eaed0bb9436aea5b73379d69f0", "sha256": "131f4e942f0f8963ba2e6bb866afeae5dce69fc6cb4c4cea9fb697eec4aeaebe"}, "downloads": -1, "filename": "dc-django-base-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1229c4eaed0bb9436aea5b73379d69f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33904, "upload_time": "2015-02-20T04:59:41", "upload_time_iso_8601": "2015-02-20T04:59:41.228249Z", "url": "https://files.pythonhosted.org/packages/37/c6/5ac672e6dcabbd3d7dab7e80389b54cf1b71831d9d635d2ea23e073886ba/dc-django-base-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "3165e17960dd92957a9b5038a60f5fb3", "sha256": "1652bca06a367fcb3b6eba2a9be34347f1fa7d52e37e54cc57231d2472a9a7ab"}, "downloads": -1, "filename": "dc-django-base-0.4.1.tar.gz", "has_sig": false, "md5_digest": "3165e17960dd92957a9b5038a60f5fb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33929, "upload_time": "2015-02-20T13:27:40", "upload_time_iso_8601": "2015-02-20T13:27:40.315865Z", "url": "https://files.pythonhosted.org/packages/c4/b5/dde2b66b9c968c88b9f26573044e5128c2ad27cc185a6e7be847e5ce0270/dc-django-base-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "e737ce8b6ca4441577648032093f045c", "sha256": "ce3d46b84e1dab89826adcf7356c9fe067f0e73f980314d6c8fcf9decee5e828"}, "downloads": -1, "filename": "dc-django-base-0.4.2.tar.gz", "has_sig": false, "md5_digest": "e737ce8b6ca4441577648032093f045c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34142, "upload_time": "2015-02-21T02:40:49", "upload_time_iso_8601": "2015-02-21T02:40:49.636293Z", "url": "https://files.pythonhosted.org/packages/53/f6/dea0b60a48e6138942c46b9d85493f469f76302ec58ae36916ad459283f2/dc-django-base-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "5912146e4428b59ea9e55b6b26205b87", "sha256": "c00c54ce67fec7ddd10edf104df78f77b2bb14d38c9411934b17b3f3f6c816e2"}, "downloads": -1, "filename": "dc-django-base-0.5.0.tar.gz", "has_sig": false, "md5_digest": "5912146e4428b59ea9e55b6b26205b87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35190, "upload_time": "2015-02-26T05:01:31", "upload_time_iso_8601": "2015-02-26T05:01:31.807693Z", "url": "https://files.pythonhosted.org/packages/c0/0b/57b9218a51e67dae0847aca15c5bba8f52ae065bc5beee84acf6b11d49bc/dc-django-base-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "a5bfe9b4cb581ae49a793e5dfa48f886", "sha256": "0269c363faf3ca36ef456af39c03c40f2f66e010c3251ed173382eb29afca0b6"}, "downloads": -1, "filename": "dc-django-base-0.5.1.tar.gz", "has_sig": false, "md5_digest": "a5bfe9b4cb581ae49a793e5dfa48f886", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35460, "upload_time": "2015-03-10T02:51:27", "upload_time_iso_8601": "2015-03-10T02:51:27.369976Z", "url": "https://files.pythonhosted.org/packages/30/a5/95bd58f3d7c3a472d202ea68a942676697312d4e2cc8a40d9449d5eaeb20/dc-django-base-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "00ed6ec8ee1f95a050835a79062d6490", "sha256": "2f0dabbb236880aaef3611f3bd154b57e27a282b9ae2348a1f83643cb95f507a"}, "downloads": -1, "filename": "dc-django-base-0.6.0.tar.gz", "has_sig": false, "md5_digest": "00ed6ec8ee1f95a050835a79062d6490", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38510, "upload_time": "2015-03-10T04:35:35", "upload_time_iso_8601": "2015-03-10T04:35:35.739227Z", "url": "https://files.pythonhosted.org/packages/d4/38/ee81c5367771506c05d04313b3a3ef4e0991c1c87f69bdfe41c21ee203ce/dc-django-base-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "0a8992f817c4f5d59169eae1d326980d", "sha256": "b3c7ef5261c23cd79cae4a9d271cb39b9a921407d1c10cdbe2df32737db00e87"}, "downloads": -1, "filename": "dc-django-base-0.6.1.tar.gz", "has_sig": false, "md5_digest": "0a8992f817c4f5d59169eae1d326980d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43586, "upload_time": "2015-03-10T04:55:38", "upload_time_iso_8601": "2015-03-10T04:55:38.250410Z", "url": "https://files.pythonhosted.org/packages/13/5a/d862d82fb065c182e910148b5f8b0bf1a8a8d960d166e0da35ecc3853406/dc-django-base-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "22fe256fdc081ba3a227a89bdfc341fd", "sha256": "7b6782c68f72a252d58e7a2acaa6a7e089edae72c7a2c94ccb464010af985705"}, "downloads": -1, "filename": "dc-django-base-0.6.2.tar.gz", "has_sig": false, "md5_digest": "22fe256fdc081ba3a227a89bdfc341fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43578, "upload_time": "2015-03-13T17:48:25", "upload_time_iso_8601": "2015-03-13T17:48:25.943881Z", "url": "https://files.pythonhosted.org/packages/96/ea/591c7217936b35cb9251094f43ada131d54ef60eb1b9f608994a04182ddb/dc-django-base-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "a0ad68da5c632a50f51e14bd9d905aa2", "sha256": "f9b7e3ebf4619d47373a55c40a366401c41bebece659aae98461a8847551596a"}, "downloads": -1, "filename": "dc-django-base-0.6.3.tar.gz", "has_sig": false, "md5_digest": "a0ad68da5c632a50f51e14bd9d905aa2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43679, "upload_time": "2015-04-10T13:58:33", "upload_time_iso_8601": "2015-04-10T13:58:33.660122Z", "url": "https://files.pythonhosted.org/packages/c7/e4/2507d157ca6a9b1e1ace22d9396b9e586e78ef7f5940002aafd2ed43cbfc/dc-django-base-0.6.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0ad68da5c632a50f51e14bd9d905aa2", "sha256": "f9b7e3ebf4619d47373a55c40a366401c41bebece659aae98461a8847551596a"}, "downloads": -1, "filename": "dc-django-base-0.6.3.tar.gz", "has_sig": false, "md5_digest": "a0ad68da5c632a50f51e14bd9d905aa2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43679, "upload_time": "2015-04-10T13:58:33", "upload_time_iso_8601": "2015-04-10T13:58:33.660122Z", "url": "https://files.pythonhosted.org/packages/c7/e4/2507d157ca6a9b1e1ace22d9396b9e586e78ef7f5940002aafd2ed43cbfc/dc-django-base-0.6.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:49 2020"}