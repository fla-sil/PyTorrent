{"info": {"author": "Masahiko Okada", "author_email": "moqada@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "#######################\nDjango JS Error Logging\n#######################\n\nThe Django JS Error Logging is logging for Client-Side JavaScript errors.\nYou can log by the following three ways.\n\n* Save to Django model\n* Notify by Email\n* Logging by python logger\n\n\nInstallation\n============\n\n#. Add the ``jserrorlogging`` directory to your Python path.\n\n   Can use pip command::\n\n       $ pip install django-js-error-logging\n\n#. Add ``jserrorlogging`` to your ``INSTALLED_APPS``.::\n\n       INSTALLED_APPS = (\n           # ...\n           'jserrorlogging',\n           # ...\n       )\n\n#. Add the following context processor to your ``TEMPLATE_CONTEXT_PROCESSORS``.::\n\n       TEMPLATE_CONTEXT_PROCESSORS = (\n           # ...\n           'jserrorlogging.context_processors.static',\n           # ...\n       )\n\n#. Add the following configuration to your ``urls.py``.::\n\n       urlpatterns = patterns(\n           # ...\n           url(r'^jserr/$', include('jserrorlogging.urls', namespace='jserrorlogging')),\n           # ...\n       )\n\n#. Add the following templatetag to head tag in your template.::\n\n       <head>\n       # ...\n       {% include \"jserrorlogging/includes/script.html\" %}\n       # ...\n       </head>\n\n   About more information of static files for Django,\n   you can see at https://docs.djangoproject.com/en/dev/howto/static-files/.\n\n#. Add the following static files.\n\n   Copy ``static/jserrorlogging`` directory to ``STATIC_ROOT`` or run the following command::\n\n       $ python manage.py collectstatic\n\n#. Run syncdb.::\n\n       $ python manage.py syncdb\n\n   **Note**: When your project use South, run the following command.::\n\n       $ python manage.py migrate jserrorlogging\n\n   If you don't want to save to django model, don't you run these commands.\n\n\nConfiguration\n=============\n\nDjango JS Error Logging has the following optional settings. \n\nSave to Django model\n--------------------\n\nYou can see results of logging in Admin site.\n\nThis option is default enabled.\nWhen you don't need to this option, ``JSERRORLOGGING_ENABLE_MODEL`` set to False.\n\nNotify by Email\n---------------\n\nYou can send results of logging to Email.\n\nThis option is default enabled.\nWhen you don't need to this option, ``JSERRORLOGGING_ENABLE_MAIL`` set to False.\n\n``JSERRORLOGGING_MAIL_TO``\n   Default: ``settings.ADMINS``\n\n   You can set the custom recipients for notification::\n\n       JSERRORLOGGING_MAIL_TO = (\n           ('someone', 'someone@example.com'),\n       )\n\n``JSERRORLOGGING_MAIL_NOTIFY_INTERVAL``\n   Default: ``3600``\n\n   When the same errors occurred,\n   you can stop notification for the duration of this setting (seconds).\n\nLogging by python logger\n------------------------\n\nYou can use Python's builtin logger.\n\nThis option is default disabled. \nWhen you need to this option, ``JSERRORLOGGING_ENABLE_LOGGER`` set to True.\nAnd ``JSERRORLOGGING_LOGGER_NAME`` set to your custom logger name.\n\nExample::\n\n   LOGGING = {\n       # ...\n       'loggers': {\n           # ...\n           'jserror': {\n               'handlers': ['console', 'mail_admins'],\n               'level': 'INFO',\n               'filters': ['special']\n           },\n           # ...\n       }\n       # ...\n   }\n\n   # ...\n\n   JSERRORLOGGING_ENABLE_MODEL = 'jserror'\n\n   # ...\n\nAbout more information of logging for Django,\nyou can see at https://docs.djangoproject.com/en/dev/topics/logging/.\n\nLogging additional data\n-----------------------\n\nYou can log your custom data.\n\nFor example, Django JS Error Logging has another template for the following additional data.\n\n* ``django.contrib.auth.User.id``\n* ``request.session.session_key``\n\nWhen you want to log user_id and session_key, set the following templatetag::\n\n   <head>\n   # ...\n   {% include \"jserrorlogging/includes/script_with_user.html\" %}\n   # ...\n   </head>\n\nIf you want to log another data, \nCreate a template that extends ``jserrorlogging/includes/script.html`` and \nedit ``meta_data`` block.\n\nExample (path_to_your_template_dir/script_with_more_data.html)::\n\n   {% extends \"jserrorlogging/includes/script.html\" %}\n   {% block meta_data %}\n   djjserr.meta = {\n       username: '{{ user.username }}',\n       always_true: true\n   };\n   {% endblock %}\n\nOthers\n------\n\nother configuration options.\n\n``JSERRORLOGGING_LOG_MODEL``\n   Default: 'jserrorlogging.Log'\n    \n   A name of model to save log.\n\n``JSERRORLOGGING_STATIC_URL``\n   Default: settings.STATIC_URL + 'jserrorlogging/'\n    \n   A URL of script files for Django JS Error Logging.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/moqada/django-js-error-logging/", "keywords": "django,javascript,logging,notify", "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django-js-error-logging", "package_url": "https://pypi.org/project/django-js-error-logging/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-js-error-logging/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/moqada/django-js-error-logging/"}, "release_url": "https://pypi.org/project/django-js-error-logging/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Logging Client-Side JavaScript errors for Django", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Django JS Error Logging is logging for Client-Side JavaScript errors.\nYou can log by the following three ways.</p>\n<ul>\n<li>Save to Django model</li>\n<li>Notify by Email</li>\n<li>Logging by python logger</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Add the <tt>jserrorlogging</tt> directory to your Python path.</p>\n<p>Can use pip command:</p>\n<pre>$ pip install django-js-error-logging\n</pre>\n</li>\n<li><p>Add <tt>jserrorlogging</tt> to your <tt>INSTALLED_APPS</tt>.:</p>\n<pre>INSTALLED_APPS = (\n    # ...\n    'jserrorlogging',\n    # ...\n)\n</pre>\n</li>\n<li><p>Add the following context processor to your <tt>TEMPLATE_CONTEXT_PROCESSORS</tt>.:</p>\n<pre>TEMPLATE_CONTEXT_PROCESSORS = (\n    # ...\n    'jserrorlogging.context_processors.static',\n    # ...\n)\n</pre>\n</li>\n<li><p>Add the following configuration to your <tt>urls.py</tt>.:</p>\n<pre>urlpatterns = patterns(\n    # ...\n    url(r'^jserr/$', include('jserrorlogging.urls', namespace='jserrorlogging')),\n    # ...\n)\n</pre>\n</li>\n<li><p>Add the following templatetag to head tag in your template.:</p>\n<pre>&lt;head&gt;\n# ...\n{% include \"jserrorlogging/includes/script.html\" %}\n# ...\n&lt;/head&gt;\n</pre>\n<p>About more information of static files for Django,\nyou can see at <a href=\"https://docs.djangoproject.com/en/dev/howto/static-files/\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/howto/static-files/</a>.</p>\n</li>\n<li><p>Add the following static files.</p>\n<p>Copy <tt>static/jserrorlogging</tt> directory to <tt>STATIC_ROOT</tt> or run the following command:</p>\n<pre>$ python manage.py collectstatic\n</pre>\n</li>\n<li><p>Run syncdb.:</p>\n<pre>$ python manage.py syncdb\n</pre>\n<p><strong>Note</strong>: When your project use South, run the following command.:</p>\n<pre>$ python manage.py migrate jserrorlogging\n</pre>\n<p>If you don\u2019t want to save to django model, don\u2019t you run these commands.</p>\n</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Django JS Error Logging has the following optional settings.</p>\n<div id=\"save-to-django-model\">\n<h3>Save to Django model</h3>\n<p>You can see results of logging in Admin site.</p>\n<p>This option is default enabled.\nWhen you don\u2019t need to this option, <tt>JSERRORLOGGING_ENABLE_MODEL</tt> set to False.</p>\n</div>\n<div id=\"notify-by-email\">\n<h3>Notify by Email</h3>\n<p>You can send results of logging to Email.</p>\n<p>This option is default enabled.\nWhen you don\u2019t need to this option, <tt>JSERRORLOGGING_ENABLE_MAIL</tt> set to False.</p>\n<dl>\n<dt><tt>JSERRORLOGGING_MAIL_TO</tt></dt>\n<dd><p>Default: <tt>settings.ADMINS</tt></p>\n<p>You can set the custom recipients for notification:</p>\n<pre>JSERRORLOGGING_MAIL_TO = (\n    ('someone', 'someone@example.com'),\n)\n</pre>\n</dd>\n<dt><tt>JSERRORLOGGING_MAIL_NOTIFY_INTERVAL</tt></dt>\n<dd><p>Default: <tt>3600</tt></p>\n<p>When the same errors occurred,\nyou can stop notification for the duration of this setting (seconds).</p>\n</dd>\n</dl>\n</div>\n<div id=\"logging-by-python-logger\">\n<h3>Logging by python logger</h3>\n<p>You can use Python\u2019s builtin logger.</p>\n<p>This option is default disabled.\nWhen you need to this option, <tt>JSERRORLOGGING_ENABLE_LOGGER</tt> set to True.\nAnd <tt>JSERRORLOGGING_LOGGER_NAME</tt> set to your custom logger name.</p>\n<p>Example:</p>\n<pre>LOGGING = {\n    # ...\n    'loggers': {\n        # ...\n        'jserror': {\n            'handlers': ['console', 'mail_admins'],\n            'level': 'INFO',\n            'filters': ['special']\n        },\n        # ...\n    }\n    # ...\n}\n\n# ...\n\nJSERRORLOGGING_ENABLE_MODEL = 'jserror'\n\n# ...\n</pre>\n<p>About more information of logging for Django,\nyou can see at <a href=\"https://docs.djangoproject.com/en/dev/topics/logging/\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/topics/logging/</a>.</p>\n</div>\n<div id=\"logging-additional-data\">\n<h3>Logging additional data</h3>\n<p>You can log your custom data.</p>\n<p>For example, Django JS Error Logging has another template for the following additional data.</p>\n<ul>\n<li><tt>django.contrib.auth.User.id</tt></li>\n<li><tt>request.session.session_key</tt></li>\n</ul>\n<p>When you want to log user_id and session_key, set the following templatetag:</p>\n<pre>&lt;head&gt;\n# ...\n{% include \"jserrorlogging/includes/script_with_user.html\" %}\n# ...\n&lt;/head&gt;\n</pre>\n<p>If you want to log another data,\nCreate a template that extends <tt>jserrorlogging/includes/script.html</tt> and\nedit <tt>meta_data</tt> block.</p>\n<p>Example (path_to_your_template_dir/script_with_more_data.html):</p>\n<pre>{% extends \"jserrorlogging/includes/script.html\" %}\n{% block meta_data %}\ndjjserr.meta = {\n    username: '{{ user.username }}',\n    always_true: true\n};\n{% endblock %}\n</pre>\n</div>\n<div id=\"others\">\n<h3>Others</h3>\n<p>other configuration options.</p>\n<dl>\n<dt><tt>JSERRORLOGGING_LOG_MODEL</tt></dt>\n<dd><p>Default: \u2018jserrorlogging.Log\u2019</p>\n<p>A name of model to save log.</p>\n</dd>\n<dt><tt>JSERRORLOGGING_STATIC_URL</tt></dt>\n<dd><p>Default: settings.STATIC_URL + \u2018jserrorlogging/\u2019</p>\n<p>A URL of script files for Django JS Error Logging.</p>\n</dd>\n</dl>\n</div>\n</div>\n\n          </div>"}, "last_serial": 789919, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fe6b514e106286eaf3a8be4ef081aca3", "sha256": "1247297427ea62d5c88b72676b3de0d6dc4192003b7b0e5260ab09069ff6fd6a"}, "downloads": -1, "filename": "django-js-error-logging-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fe6b514e106286eaf3a8be4ef081aca3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11899, "upload_time": "2012-12-11T00:26:10", "upload_time_iso_8601": "2012-12-11T00:26:10.389083Z", "url": "https://files.pythonhosted.org/packages/81/f9/dd67a84aad96de2935d44f52a2364bdec689b39a96f1bf6815e221404d2f/django-js-error-logging-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7c06e1c4419066c39da1ee0e50ff661b", "sha256": "4d2ead6d8cb2759485866324d7e787d292d4fd116ffdf81ef6445c9a65afb63e"}, "downloads": -1, "filename": "django-js-error-logging-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7c06e1c4419066c39da1ee0e50ff661b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11898, "upload_time": "2012-12-11T07:03:41", "upload_time_iso_8601": "2012-12-11T07:03:41.414176Z", "url": "https://files.pythonhosted.org/packages/18/8e/4df0063d5185428351bdfb118affa272306c8984a13fa5057aecc2eb87c5/django-js-error-logging-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c06e1c4419066c39da1ee0e50ff661b", "sha256": "4d2ead6d8cb2759485866324d7e787d292d4fd116ffdf81ef6445c9a65afb63e"}, "downloads": -1, "filename": "django-js-error-logging-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7c06e1c4419066c39da1ee0e50ff661b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11898, "upload_time": "2012-12-11T07:03:41", "upload_time_iso_8601": "2012-12-11T07:03:41.414176Z", "url": "https://files.pythonhosted.org/packages/18/8e/4df0063d5185428351bdfb118affa272306c8984a13fa5057aecc2eb87c5/django-js-error-logging-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:29 2020"}