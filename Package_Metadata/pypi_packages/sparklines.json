{"info": {"author": "Dinu Gherman", "author_email": "gherman@darwin.in-berlin.de", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Sparklines\n==========\n\n|ci| |pypi|\n\n.. |ci| image:: http://img.shields.io/travis/deeplook/sparklines.svg\n  :target: https://travis-ci.org/deeplook/sparklines\n\n.. |pypi| image:: https://img.shields.io/pypi/v/sparklines.svg\n  :target: https://pypi.python.org/pypi/sparklines\n\nThis Python package implements Edward Tufte's concept of sparklines_, but\nlimited to text only e.g. like this: \u2583\u2581\u2584\u2581\u2585\u2588\u2582\u2585 (this I likely not displayed\ncorrectly in every browser). You can find more information about sparklines\n`on Wikipedia`_. This code was mainly developed for running simple\nplausibility tests in sensor networks as shown in fig. 1 below:\n\n.. figure:: https://raw.githubusercontent.com/deeplook/sparklines/master/example_sensors.png\n   :width: 75%\n   :alt: example usecase with sensor values\n   :align: center\n\n   Fig. 1: Example usecase for such \"sparklines\" on the command-line,\n   showing IoT sensor values (generating code not included here).\n\nDue to limitations of available Unicode characters this works best when all\nvalues are positive. And even then true sparklines that look more like lines\nand less like bars are a real challenge, because they would need multiple\ncharacters with a single horizontal line on different vertical positions. This\nwould work only with a dedicated font, which is way beyond the scope of this\ntool and which would significantly complicate its usage. So we stick to these\ncharacters: \"\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\", and use a blank for missing values.\n\nThis code was tested ok for Python 2.6 to 2.7 and 3.2 to 3.5.\n\n\nSample output\n-------------\n\nThis is a recorded sample session illustrating how to use ``sparklines`` (as\nGitHub doesn't render embedded Asciinema_ recordings you'll see here an image\npointing to the respective\n`asciicast <https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hep>`_):\n\n.. image:: https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hep.png\n   :target: https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hep\n\nHere is some example output on the command-line (please note that in some\nbrowsers the vertical alignment of these block characters might be displayed\nslightly wrong, the same effect can be seen for other repos referenced below):\n\nExamples for the code below:\n\n.. code-block:: bash\n\n    $ sparklines 2 7 1 8 2 8 1 8\n    \u2582\u2587\u2581\u2588\u2582\u2588\u2581\u2588\n    $ echo 2 7 1 8 2 8 1 8 | sparklines\n    \u2582\u2587\u2581\u2588\u2582\u2588\u2581\u2588\n    $ sparklines < numbers.txt\n    \u2582\u2587\u2581\u2588\u2582\u2588\u2581\u2588\n    $ sparklines 0 2. 1e0\n    \u2581\u2588\u2585\n\n\nInstallation\n------------\n\nYou can install this package using ``pip install sparklines`` from the `Python\nPackage Index`_.\nYou can also clone this repository and install it via ``python setup.py install``\nor ``pip install -e .``.\nAfter installing, you will have access system-wide (or in your virtualenv\nif you have used that) to ``sparklines``, programmatically as well as via a\ncommand-line tool with the same name.\n\nTest\n----\n\nTo run the (still very small) \"test suite\", download and unpack this repository\nor clone it, and run the command ``python setup.py test`` in the unpacked\narchive. This will use a minified version of the ``pytest`` package included\nin this package in the file ``test/runtests.py``. If you have the excellent\n``pytest`` package installed you can also run ``py.test test`` from the \ndownloaded repository's root folder.\n\n\nUsage\n-----\n\nPlease note that the samples below might look a little funky (misaligned or \neven colored) in some browsers, but it should be totally fine when you print\nthis in your terminal, Python or IPython session or your Python IDE of choice.\nFigure 2 below might sshow better what you should expect than the copied sample\ncode thereafter:\n\n.. figure:: https://raw.githubusercontent.com/deeplook/sparklines/master/example_python.png\n   :width: 65%\n   :alt: example interactive invocation\n   :align: center\n\n   Fig. 2: Example invocation from a Python and an IPython session.\n\n\nCommand-Line\n............\n\nHere are two sample invocations from the command-line, copied into this README:\n\n.. code-block:: console\n\n    $ sparklines 1 2 3 4 5.0 null 3 2 1\n    \u2581\u2583\u2585\u2586\u2588 \u2585\u2583\u2581\n\n    $ sparklines -n 2 1 2 3 4 5.0 null 3 2 1\n      \u2581\u2585\u2588 \u2581  \n    \u2581\u2585\u2588\u2588\u2588 \u2588\u2585\u2581\n\n\nProgrammatic\n............\n\nAnd here are sample invocations from interactive Python sessions, copied into\nthis README. The main function to use programmatically is \n``sparklines.sparklines()``:\n\n.. code-block:: python\n\n    In [1]: from sparklines import sparklines\n\n    In [2]: for line in sparklines([1, 2, 3, 4, 5.0, None, 3, 2, 1]):\n       ...:     print(line)\n       ...:     \n    \u2581\u2583\u2585\u2586\u2588 \u2585\u2583\u2581\n\n    In [3]: for line in sparklines([1, 2, 3, 4, 5.0, None, 3, 2, 1], num_lines=2):\n        print(line)\n       ...:     \n      \u2581\u2585\u2588 \u2581  \n    \u2581\u2585\u2588\u2588\u2588 \u2588\u2585\u2581\n\n\nReferences\n----------\n\nThis code was inspired by Zach Holman's `spark \n<https://github.com/holman/spark>`_, converted to a Python module \nby Kenneth Reitz as `spark.py \n<https://raw.githubusercontent.com/kennethreitz/spark.py/master/spark.py>`_ \nand by RegKrieg to a Python package named `pysparklines <https://github.com/RedKrieg/pysparklines>`_.\nAnd Roger Allen provides an even `shorter spark.py \n<https://gist.githubusercontent.com/rogerallen/1368454/raw/b17e96b56ae881621a9f3b1508ca2e7fde3ec93e/spark.py>`_.\n\nBut since it is so short and easy to code in Python we can add a few nice\nextra features I was missing, like:\n\n- increasing resolution with multiple output lines per sparkline\n- showing gaps in input numbers for missing data\n- issuing warnings for negative values (allowed, but misleading)\n- highlighting values exceeding some threshold with a different\n  color (if ``termcolor`` package is available)\n- wrapping long sparklines at some max. length\n- (todo) adding separator characters like ``:`` at regular intervals\n\n.. _Asciinema: https://asciinema.org\n.. _Python Package Index: https://pypi.python.org/pypi/sparklines/\n.. _sparklines: http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR\n.. _on Wikipedia: https://en.wikipedia.org/wiki/Sparkline\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deeplook/sparklines", "keywords": "visualization", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "sparklines", "package_url": "https://pypi.org/project/sparklines/", "platform": "", "project_url": "https://pypi.org/project/sparklines/", "project_urls": {"Homepage": "https://github.com/deeplook/sparklines"}, "release_url": "https://pypi.org/project/sparklines/0.4.2/", "requires_dist": null, "requires_python": "", "summary": "Generate sparklines for numbers using Unicode characters only.", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/deeplook/sparklines\" rel=\"nofollow\"><img alt=\"ci\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4717ea5e25e434d95ed11f7e73891a3a75a22e29/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f646565706c6f6f6b2f737061726b6c696e65732e737667\"></a> <a href=\"https://pypi.python.org/pypi/sparklines\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36a97c983a20ed20850c5a629c03645c7686295a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f737061726b6c696e65732e737667\"></a></p>\n<p>This Python package implements Edward Tufte\u2019s concept of <a href=\"http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR\" rel=\"nofollow\">sparklines</a>, but\nlimited to text only e.g. like this: \u2583\u2581\u2584\u2581\u2585\u2588\u2582\u2585 (this I likely not displayed\ncorrectly in every browser). You can find more information about sparklines\n<a href=\"https://en.wikipedia.org/wiki/Sparkline\" rel=\"nofollow\">on Wikipedia</a>. This code was mainly developed for running simple\nplausibility tests in sensor networks as shown in fig. 1 below:</p>\n<div>\n<img alt=\"example usecase with sensor values\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/008b3ec7c4695f556983bda0b3ffdbf026f2c98b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646565706c6f6f6b2f737061726b6c696e65732f6d61737465722f6578616d706c655f73656e736f72732e706e67\" width=\"75%\">\n<p>Fig. 1: Example usecase for such \u201csparklines\u201d on the command-line,\nshowing IoT sensor values (generating code not included here).</p>\n</div>\n<p>Due to limitations of available Unicode characters this works best when all\nvalues are positive. And even then true sparklines that look more like lines\nand less like bars are a real challenge, because they would need multiple\ncharacters with a single horizontal line on different vertical positions. This\nwould work only with a dedicated font, which is way beyond the scope of this\ntool and which would significantly complicate its usage. So we stick to these\ncharacters: \u201c\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\u201d, and use a blank for missing values.</p>\n<p>This code was tested ok for Python 2.6 to 2.7 and 3.2 to 3.5.</p>\n<div id=\"sample-output\">\n<h2>Sample output</h2>\n<p>This is a recorded sample session illustrating how to use <tt>sparklines</tt> (as\nGitHub doesn\u2019t render embedded <a href=\"https://asciinema.org\" rel=\"nofollow\">Asciinema</a> recordings you\u2019ll see here an image\npointing to the respective\n<a href=\"https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hep\" rel=\"nofollow\">asciicast</a>):</p>\n<a href=\"https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hep\" rel=\"nofollow\"><img alt=\"https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hep.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12089c5813669d806bde354d8fa7da4295bd0118/68747470733a2f2f61736369696e656d612e6f72672f612f35787766766372726b30396679336d6c3361386e36376865702e706e67\"></a>\n<p>Here is some example output on the command-line (please note that in some\nbrowsers the vertical alignment of these block characters might be displayed\nslightly wrong, the same effect can be seen for other repos referenced below):</p>\n<p>Examples for the code below:</p>\n<pre>$ sparklines <span class=\"m\">2</span> <span class=\"m\">7</span> <span class=\"m\">1</span> <span class=\"m\">8</span> <span class=\"m\">2</span> <span class=\"m\">8</span> <span class=\"m\">1</span> <span class=\"m\">8</span>\n\u2582\u2587\u2581\u2588\u2582\u2588\u2581\u2588\n$ <span class=\"nb\">echo</span> <span class=\"m\">2</span> <span class=\"m\">7</span> <span class=\"m\">1</span> <span class=\"m\">8</span> <span class=\"m\">2</span> <span class=\"m\">8</span> <span class=\"m\">1</span> <span class=\"m\">8</span> <span class=\"p\">|</span> sparklines\n\u2582\u2587\u2581\u2588\u2582\u2588\u2581\u2588\n$ sparklines &lt; numbers.txt\n\u2582\u2587\u2581\u2588\u2582\u2588\u2581\u2588\n$ sparklines <span class=\"m\">0</span> <span class=\"m\">2</span>. 1e0\n\u2581\u2588\u2585\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install this package using <tt>pip install sparklines</tt> from the <a href=\"https://pypi.python.org/pypi/sparklines/\" rel=\"nofollow\">Python\nPackage Index</a>.\nYou can also clone this repository and install it via <tt>python setup.py install</tt>\nor <tt>pip install <span class=\"pre\">-e</span> .</tt>.\nAfter installing, you will have access system-wide (or in your virtualenv\nif you have used that) to <tt>sparklines</tt>, programmatically as well as via a\ncommand-line tool with the same name.</p>\n</div>\n<div id=\"test\">\n<h2>Test</h2>\n<p>To run the (still very small) \u201ctest suite\u201d, download and unpack this repository\nor clone it, and run the command <tt>python setup.py test</tt> in the unpacked\narchive. This will use a minified version of the <tt>pytest</tt> package included\nin this package in the file <tt>test/runtests.py</tt>. If you have the excellent\n<tt>pytest</tt> package installed you can also run <tt>py.test test</tt> from the\ndownloaded repository\u2019s root folder.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Please note that the samples below might look a little funky (misaligned or\neven colored) in some browsers, but it should be totally fine when you print\nthis in your terminal, Python or IPython session or your Python IDE of choice.\nFigure 2 below might sshow better what you should expect than the copied sample\ncode thereafter:</p>\n<div>\n<img alt=\"example interactive invocation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10d3792138acbba2d3fd9bdacb2411e45c2cd74c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646565706c6f6f6b2f737061726b6c696e65732f6d61737465722f6578616d706c655f707974686f6e2e706e67\" width=\"65%\">\n<p>Fig. 2: Example invocation from a Python and an IPython session.</p>\n</div>\n<div id=\"command-line\">\n<h3>Command-Line</h3>\n<p>Here are two sample invocations from the command-line, copied into this README:</p>\n<pre><span class=\"gp\">$</span> sparklines <span class=\"m\">1</span> <span class=\"m\">2</span> <span class=\"m\">3</span> <span class=\"m\">4</span> <span class=\"m\">5</span>.0 null <span class=\"m\">3</span> <span class=\"m\">2</span> <span class=\"m\">1</span>\n<span class=\"go\">\u2581\u2583\u2585\u2586\u2588 \u2585\u2583\u2581\n\n</span><span class=\"gp\">$</span> sparklines -n <span class=\"m\">2</span> <span class=\"m\">1</span> <span class=\"m\">2</span> <span class=\"m\">3</span> <span class=\"m\">4</span> <span class=\"m\">5</span>.0 null <span class=\"m\">3</span> <span class=\"m\">2</span> <span class=\"m\">1</span>\n<span class=\"go\">  \u2581\u2585\u2588 \u2581\n\u2581\u2585\u2588\u2588\u2588 \u2588\u2585\u2581</span>\n</pre>\n</div>\n<div id=\"programmatic\">\n<h3>Programmatic</h3>\n<p>And here are sample invocations from interactive Python sessions, copied into\nthis README. The main function to use programmatically is\n<tt>sparklines.sparklines()</tt>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">sparklines</span> <span class=\"kn\">import</span> <span class=\"n\">sparklines</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">sparklines</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n<span class=\"err\">\u2581\u2583\u2585\u2586\u2588</span> <span class=\"err\">\u2585\u2583\u2581</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">sparklines</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n  <span class=\"err\">\u2581\u2585\u2588</span> <span class=\"err\">\u2581</span>\n<span class=\"err\">\u2581\u2585\u2588\u2588\u2588</span> <span class=\"err\">\u2588\u2585\u2581</span>\n</pre>\n</div>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<p>This code was inspired by Zach Holman\u2019s <a href=\"https://github.com/holman/spark\" rel=\"nofollow\">spark</a>, converted to a Python module\nby Kenneth Reitz as <a href=\"https://raw.githubusercontent.com/kennethreitz/spark.py/master/spark.py\" rel=\"nofollow\">spark.py</a>\nand by RegKrieg to a Python package named <a href=\"https://github.com/RedKrieg/pysparklines\" rel=\"nofollow\">pysparklines</a>.\nAnd Roger Allen provides an even <a href=\"https://gist.githubusercontent.com/rogerallen/1368454/raw/b17e96b56ae881621a9f3b1508ca2e7fde3ec93e/spark.py\" rel=\"nofollow\">shorter spark.py</a>.</p>\n<p>But since it is so short and easy to code in Python we can add a few nice\nextra features I was missing, like:</p>\n<ul>\n<li>increasing resolution with multiple output lines per sparkline</li>\n<li>showing gaps in input numbers for missing data</li>\n<li>issuing warnings for negative values (allowed, but misleading)</li>\n<li>highlighting values exceeding some threshold with a different\ncolor (if <tt>termcolor</tt> package is available)</li>\n<li>wrapping long sparklines at some max. length</li>\n<li>(todo) adding separator characters like <tt>:</tt> at regular intervals</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4108011, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "750c89b3868b885ec8bdef10796dc07c", "sha256": "526789c8763087164da02aa078f2173ab50208ab9aa72d6e37dd2be52fdab7e1"}, "downloads": -1, "filename": "sparklines-0.2.0.tar.gz", "has_sig": false, "md5_digest": "750c89b3868b885ec8bdef10796dc07c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18808, "upload_time": "2016-05-18T07:38:52", "upload_time_iso_8601": "2016-05-18T07:38:52.915950Z", "url": "https://files.pythonhosted.org/packages/80/e8/444e6fbff3f8e6ed6c452067aa65f58da73c396b01d59b295bc2342f6383/sparklines-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5de15a349a24b2c44febddcad26c8694", "sha256": "3145272d9bb267be2c92003254fbd763d09b812e21536083f803d056dacbf24f"}, "downloads": -1, "filename": "sparklines-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5de15a349a24b2c44febddcad26c8694", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19501, "upload_time": "2016-05-19T21:10:59", "upload_time_iso_8601": "2016-05-19T21:10:59.498980Z", "url": "https://files.pythonhosted.org/packages/b2/14/a5234646f6b7cd707e62b499ad7bf2c426fa6070915b128aa6aed8bdf2a7/sparklines-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "178f7c458bc503005e3ad76814e3b349", "sha256": "8995d8b3f80dbee843f4085ea65cbcacb0b0e0dc9f94b9b2debb5f8c4c6bf368"}, "downloads": -1, "filename": "sparklines-0.4.0.tar.gz", "has_sig": false, "md5_digest": "178f7c458bc503005e3ad76814e3b349", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20637, "upload_time": "2016-06-09T09:40:36", "upload_time_iso_8601": "2016-06-09T09:40:36.589167Z", "url": "https://files.pythonhosted.org/packages/0d/39/1e30171ad0ee39ae50fe56c28bbb27bb5565ec0445a241af62595f73f840/sparklines-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "79661656312ad3170c15e9a9b0fb912a", "sha256": "8f996505b25ecd01ef9535c38ccd3157059181a9b42a17cbd1a7355e7d1d6763"}, "downloads": -1, "filename": "sparklines-0.4.1.tar.gz", "has_sig": false, "md5_digest": "79661656312ad3170c15e9a9b0fb912a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20774, "upload_time": "2016-07-19T13:22:51", "upload_time_iso_8601": "2016-07-19T13:22:51.497464Z", "url": "https://files.pythonhosted.org/packages/52/02/c70c314bff579fae14ddb44b7e6b9ac171de79aec2d13ca88b54883ca4b1/sparklines-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "91797d85be97b6ab2f29fa665c255212", "sha256": "7c33fd6dc8b277b1fd729b31428df58a785c68be58202f439128e815f1dcae88"}, "downloads": -1, "filename": "sparklines-0.4.2.tar.gz", "has_sig": false, "md5_digest": "91797d85be97b6ab2f29fa665c255212", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 225407, "upload_time": "2018-07-27T09:46:01", "upload_time_iso_8601": "2018-07-27T09:46:01.269438Z", "url": "https://files.pythonhosted.org/packages/04/0d/a4b03bacacb2e057680568757ec75b522077b93fa66fc14c1f2633d24b57/sparklines-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91797d85be97b6ab2f29fa665c255212", "sha256": "7c33fd6dc8b277b1fd729b31428df58a785c68be58202f439128e815f1dcae88"}, "downloads": -1, "filename": "sparklines-0.4.2.tar.gz", "has_sig": false, "md5_digest": "91797d85be97b6ab2f29fa665c255212", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 225407, "upload_time": "2018-07-27T09:46:01", "upload_time_iso_8601": "2018-07-27T09:46:01.269438Z", "url": "https://files.pythonhosted.org/packages/04/0d/a4b03bacacb2e057680568757ec75b522077b93fa66fc14c1f2633d24b57/sparklines-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:55 2020"}