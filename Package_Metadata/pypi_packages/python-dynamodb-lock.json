{"info": {"author": "Mohan Kishore", "author_email": "mohankishore@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "====================\nPython DynamoDB Lock\n====================\n\n\n.. image:: https://img.shields.io/pypi/v/python_dynamodb_lock.svg\n        :target: https://pypi.python.org/pypi/python_dynamodb_lock\n\n.. image:: https://img.shields.io/travis/mohankishore/python_dynamodb_lock.svg\n        :target: https://travis-ci.org/mohankishore/python_dynamodb_lock\n\n.. image:: https://readthedocs.org/projects/python-dynamodb-lock/badge/?version=latest\n        :target: https://python-dynamodb-lock.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nThis is a general purpose distributed locking library built on top of DynamoDB. It is heavily\n\"inspired\" by the java-based `AmazonDynamoDBLockClient <https://github.com/awslabs/dynamodb-lock-client>`_\nlibrary, and supports both coarse-grained and fine-grained locking.\n\n* Free software: Apache Software License 2.0\n* Documentation: https://python-dynamodb-lock.readthedocs.io\n* Source Code: https://github.com/mohankishore/python_dynamodb_lock\n\n\nFeatures\n--------\n\n* Acquire named locks - with configurable retry semantics\n* Periodic heartbeat/update for the locks to keep them alive\n* Auto-release the locks if there is no heartbeat for a configurable lease-duration\n* Notify an app-callback function if the lock is stolen, or gets too close to lease expiry\n* Store arbitrary application data along with the locks\n* Uses monotonically increasing clock to avoid issues due to clock skew and/or DST etc.\n* Auto-delete the database entries after a configurable expiry-period\n\n\nConsistency Notes\n-----------------\n\nNote that while the lock itself can offer fairly strong consistency guarantees, it does NOT\nparticipate in any kind of distributed transaction.\n\nFor example, you may wish to acquire a lock for some customer-id \"xyz\", and then make some changes\nto the corresponding database entry for this customer-id, and then release the lock - thereby\nguaranteeing that only one process changes any given customer-id at a time.\n\nWhile the happy path looks okay, consider a case where the application changes take a long time,\nand some errors/gc-pauses prevent the heartbeat from updating the lock. Then, some other client\ncan assume the lock to be abandoned, and start processing the same customer in parallel. The original\nlock-client will recognize that its lock has been \"stolen\" and will let the app know through a callback\nevent, but the app may have already committed its changes to the database. This can only be solved by\nhaving the application changes and the lock-release be part of a single distributed transaction - which,\nas indicated earlier, is NOT supported.\n\nThat said, in most cases, where the heartbeat is not expected to get delayed beyond the lock's lease\nduration, the implementation should work just fine.\n\nRefer to an excellent post by Martin Kleppmann on this subject:\nhttps://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\n\nCredits\n-------\n\n* AmazonDynamoDBLockClient: https://github.com/awslabs/dynamodb-lock-client\n* Cookiecutter: https://github.com/audreyr/cookiecutter\n* Cookiecutter Python: https://github.com/audreyr/cookiecutter-pypackage\n\n\n\n=======\nHistory\n=======\n\n0.9.0 (2018-10-28)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mohankishore/python_dynamodb_lock", "keywords": "python_dynamodb_lock", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "python-dynamodb-lock", "package_url": "https://pypi.org/project/python-dynamodb-lock/", "platform": "", "project_url": "https://pypi.org/project/python-dynamodb-lock/", "project_urls": {"Homepage": "https://github.com/mohankishore/python_dynamodb_lock"}, "release_url": "https://pypi.org/project/python-dynamodb-lock/0.9.1/", "requires_dist": ["boto3", "botocore"], "requires_python": "", "summary": "Python library that emulates the java-based dynamo-db-client from awslabs", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-dynamodb-lock\">\n<h2>Python DynamoDB Lock</h2>\n<a href=\"https://pypi.python.org/pypi/python_dynamodb_lock\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/python_dynamodb_lock.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/179e0dd9bcf05e6bddd97187ac0436493d3ee8b3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707974686f6e5f64796e616d6f64625f6c6f636b2e737667\"></a>\n<a href=\"https://travis-ci.org/mohankishore/python_dynamodb_lock\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/mohankishore/python_dynamodb_lock.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc5035fc697335bf1aafe01767bd9f01154ebf09/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d6f68616e6b6973686f72652f707974686f6e5f64796e616d6f64625f6c6f636b2e737667\"></a>\n<a href=\"https://python-dynamodb-lock.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89db534b6dedf3e27af0792f0b35f07b86e76777/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707974686f6e2d64796e616d6f64622d6c6f636b2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>This is a general purpose distributed locking library built on top of DynamoDB. It is heavily\n\u201cinspired\u201d by the java-based <a href=\"https://github.com/awslabs/dynamodb-lock-client\" rel=\"nofollow\">AmazonDynamoDBLockClient</a>\nlibrary, and supports both coarse-grained and fine-grained locking.</p>\n<ul>\n<li>Free software: Apache Software License 2.0</li>\n<li>Documentation: <a href=\"https://python-dynamodb-lock.readthedocs.io\" rel=\"nofollow\">https://python-dynamodb-lock.readthedocs.io</a></li>\n<li>Source Code: <a href=\"https://github.com/mohankishore/python_dynamodb_lock\" rel=\"nofollow\">https://github.com/mohankishore/python_dynamodb_lock</a></li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Acquire named locks - with configurable retry semantics</li>\n<li>Periodic heartbeat/update for the locks to keep them alive</li>\n<li>Auto-release the locks if there is no heartbeat for a configurable lease-duration</li>\n<li>Notify an app-callback function if the lock is stolen, or gets too close to lease expiry</li>\n<li>Store arbitrary application data along with the locks</li>\n<li>Uses monotonically increasing clock to avoid issues due to clock skew and/or DST etc.</li>\n<li>Auto-delete the database entries after a configurable expiry-period</li>\n</ul>\n</div>\n<div id=\"consistency-notes\">\n<h3>Consistency Notes</h3>\n<p>Note that while the lock itself can offer fairly strong consistency guarantees, it does NOT\nparticipate in any kind of distributed transaction.</p>\n<p>For example, you may wish to acquire a lock for some customer-id \u201cxyz\u201d, and then make some changes\nto the corresponding database entry for this customer-id, and then release the lock - thereby\nguaranteeing that only one process changes any given customer-id at a time.</p>\n<p>While the happy path looks okay, consider a case where the application changes take a long time,\nand some errors/gc-pauses prevent the heartbeat from updating the lock. Then, some other client\ncan assume the lock to be abandoned, and start processing the same customer in parallel. The original\nlock-client will recognize that its lock has been \u201cstolen\u201d and will let the app know through a callback\nevent, but the app may have already committed its changes to the database. This can only be solved by\nhaving the application changes and the lock-release be part of a single distributed transaction - which,\nas indicated earlier, is NOT supported.</p>\n<p>That said, in most cases, where the heartbeat is not expected to get delayed beyond the lock\u2019s lease\nduration, the implementation should work just fine.</p>\n<p>Refer to an excellent post by Martin Kleppmann on this subject:\n<a href=\"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\" rel=\"nofollow\">https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html</a></p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<ul>\n<li>AmazonDynamoDBLockClient: <a href=\"https://github.com/awslabs/dynamodb-lock-client\" rel=\"nofollow\">https://github.com/awslabs/dynamodb-lock-client</a></li>\n<li>Cookiecutter: <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">https://github.com/audreyr/cookiecutter</a></li>\n<li>Cookiecutter Python: <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">https://github.com/audreyr/cookiecutter-pypackage</a></li>\n</ul>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.9.0 (2018-10-28)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4424881, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "e3b23c8172a9c75a9b5fb0a2e8c7fc8f", "sha256": "5a5c66d9bdbfdc37c53db38064dc8dd7a246e84bae09d5edb530befa5a347215"}, "downloads": -1, "filename": "python_dynamodb_lock-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e3b23c8172a9c75a9b5fb0a2e8c7fc8f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14190, "upload_time": "2018-10-28T17:50:45", "upload_time_iso_8601": "2018-10-28T17:50:45.395732Z", "url": "https://files.pythonhosted.org/packages/d1/13/dd519670814a5b7cb1f82e3db20bd41e1ad52eeaeb1ef49e0732ba80b0fe/python_dynamodb_lock-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4f85f1297fcb7874b2f3e5bc39697ce", "sha256": "87b3659293cee4b023342b881ff9e4c9435ffec0c12e935a36ddca6829ffda07"}, "downloads": -1, "filename": "python_dynamodb_lock-0.9.1.tar.gz", "has_sig": false, "md5_digest": "e4f85f1297fcb7874b2f3e5bc39697ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27181, "upload_time": "2018-10-28T17:50:46", "upload_time_iso_8601": "2018-10-28T17:50:46.633874Z", "url": "https://files.pythonhosted.org/packages/ac/94/4aca685482ddba53e9c7b2eaf9b8e8f18012c0fd36ad67ca31e9b4699f07/python_dynamodb_lock-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e3b23c8172a9c75a9b5fb0a2e8c7fc8f", "sha256": "5a5c66d9bdbfdc37c53db38064dc8dd7a246e84bae09d5edb530befa5a347215"}, "downloads": -1, "filename": "python_dynamodb_lock-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e3b23c8172a9c75a9b5fb0a2e8c7fc8f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14190, "upload_time": "2018-10-28T17:50:45", "upload_time_iso_8601": "2018-10-28T17:50:45.395732Z", "url": "https://files.pythonhosted.org/packages/d1/13/dd519670814a5b7cb1f82e3db20bd41e1ad52eeaeb1ef49e0732ba80b0fe/python_dynamodb_lock-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4f85f1297fcb7874b2f3e5bc39697ce", "sha256": "87b3659293cee4b023342b881ff9e4c9435ffec0c12e935a36ddca6829ffda07"}, "downloads": -1, "filename": "python_dynamodb_lock-0.9.1.tar.gz", "has_sig": false, "md5_digest": "e4f85f1297fcb7874b2f3e5bc39697ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27181, "upload_time": "2018-10-28T17:50:46", "upload_time_iso_8601": "2018-10-28T17:50:46.633874Z", "url": "https://files.pythonhosted.org/packages/ac/94/4aca685482ddba53e9c7b2eaf9b8e8f18012c0fd36ad67ca31e9b4699f07/python_dynamodb_lock-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:54 2020"}