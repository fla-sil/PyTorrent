{"info": {"author": "Chris McDonough, Agendaless Consulting", "author_email": "pylons-devel@googlegroups.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "venusian\n========\n\nVenusian is a library which allows framework authors to defer\ndecorator actions.  Instead of taking actions when a function (or\nclass) decorator is executed at import time, you can defer the action\nusually taken by the decorator until a separate \"scan\" phase.\n\nSee the \"docs\" directory of the package or the online documentation at\nhttp://docs.pylonsproject.org/projects/venusian/en/latest/\n\n\n2.0a3 (2016-01-27)\n------------------\n\n- Do an additional check to avoid scanning modules inserted by ``six``\n  for Python 3 compatibility. ``six`` assumes these modules exist in\n  Python but some of them, like ``gdbm``, cannot always be compiled,\n  so don't scan these. This hack may actually not be strictly proper\n  as it is possible for an outer module to be ignored while an inner\n  module is allowed by an ``ignore`` function, but we'll not worry\n  about that case for now.\n\n2.0a2 (2014-07-07)\n------------------\n\n- **NOTE** This will hopefully be in Venusian proper in Version 1.1; this\n  fork is just so I can make progress with the new recursive option.\n\n- Add a ``recursive`` option to the ``.scan()`` method to allow the\n  scanning of packages non-recursively (scan ``__init__.py`` only).\n\n- Some refactoring of internals from nested functions into separate\n  methods.\n\n1.0 (2014-06-30)\n----------------\n\n- Fix an issue under PyPy > 2.0 where attached decorators may not be found.\n\n- Drop support of Python 2.4 / 2.5 / Jython.\n\n- Add ``lift`` and ``onlyliftedfrom`` class decorators to allow for inheritance\n  of venusian decorators attached to superclass methods.  See the API\n  documentation for more information.\n\n- Fix bug where otherwise undecorated subclass of a superclass that had\n  venusian decorators on it would inherit its superclass' decorations.\n  Venusian decorators should have never been inherited implicitly.  See\n  https://github.com/Pylons/venusian/issues/11#issuecomment-4977352\n\n1.0a8 (2013-04-15)\n------------------\n\n- Pass ``ignore`` argument along recursively to ``walk_packages`` so custom\n  ignore functions will ignore things recursively.  See\n  https://github.com/Pylons/venusian/pull/16\n\n- Don't run tox tests under Python 2.4 anymore (tox no longer supports 2.4).\n\n1.0a7 (2012-08-25)\n------------------\n\n- Venusian now works on Python 3.3b2+ (importlib-based).\n\n- Use nose-exclude instead of relying on fragile module-scope code to ensure\n  we don't get errors resulting from import of fixture code during\n  \"nosetests\".\n\n- Bug fix: no longer suppress ``ImportError`` while scanning by default.  If\n  you want to suppress ``ImportError`` while scanning, you'll now need use an\n  ``onerror`` callback as described in the documentation.\n\n1.0a6 (2012-04-23)\n------------------\n\n- Don't ignore decorated objects within their original locations if they\n  happen to be imported into another module (remove ``seen`` set from invoke\n  in venusian scanning).  See https://github.com/Pylons/venusian/pull/13 .\n\n1.0a5 (2012-04-21)\n------------------\n\n- Slightly less sucky way to ignore objects during scanning that are only\n  imported into a module but not actually defined there.  See 1.0a4 change\n  notes for rationale.  Now instead of checking whether the module of the\n  *scanned object* matches the module being scanned, we check whether the\n  module of the *Venusian attachment* matches the module being scanned.  This\n  allows some genuine uses of imported objects as Venusian scan targets while\n  preventing inappropriate double-scanning of objects that have a venusian\n  attachment which just happen to be imported into other scanned modules.\n\n- Add ``dev`` and ``docs`` setup.py commands (ala Pyramid).\n\n1.0a4 (2012-04-16)\n------------------\n\n- Attempt to ignore objects during scanning that are only imported into a\n  module but not actually defined there.  This is a semantics change, but\n  it's the right thing to do, because I found myself facing a situation like\n  this::\n\n    # in a module named \"one\"\n\n    from two import anotheradecoratedthing\n    @adecorator\n    def adecoratedthing(): pass\n\n    # and scanning both modules\n    scan('one')\n    scan('two')\n\n  In this case you'd wind up with two repeated registrations for\n  \"anotherdecoratedthing\", which isn't what anyone expects.\n\n1.0a3 (2012-02-08)\n------------------\n\n- Add an ``ignore`` argument to the ``scan`` method of a ``Scanner``.  This\n  argument allows a user to ignore packages, modules, and global objects by\n  name during a ``scan``.  See the \"ignore Scan Argument\" in the narrative\n  documentation for more details.\n\n1.0a2 (2011-09-02)\n------------------\n\n- Close ImpLoader file handle to avoid resource warnings on Python 3.\n\n1.0a1 (2011-08-27)\n------------------\n\n- Python 3 compatibility.\n\n- Allow an ``onerror`` callback to be passed to ``Scanner.scan()``.\n\n0.9 (2011-06-18)\n----------------\n\n- Prevent corner case scan-time exception when trying to introspect insane\n  module-scope objects.  See https://github.com/Pylons/venusian/issues/5 .\n\n0.8 (2011-04-30)\n----------------\n\n- Normal \"setup.py test\" can't support running the venusian tests under py\n  2.4 or 2.5; when it scans the 'classdecorators' fixture, it barfs.  To get\n  around this, we used to depend on ``nose`` in ``setup_requires`` and tell\n  \"setup.py test\" to use nose by setting test_suite to \"nose.collector\" but\n  we can't anymore because folks use Venusian in systems which install from\n  pip bundles; pip bundles do not support setup_requires.  So, sorry, we're\n  painted into a corner; at this point you just have to know to install nose\n  and run \"setup.py nosetests\" rather than \"setup.py test\".  Or just run\n  \"tox\" which tests it under all Pythons.\n\n0.7 (2011-03-16)\n----------------\n\n- Use Pylons theme in documentation.\n\n- Fix orphaned pyc test on pypy.\n\n- Fix GitHub Issue #1: subclasses of decorated classes that do not\n  have any decorations should not inherit the decorations of their\n  parent classes. \n\n- Fix GitHub Issue #2: scans should only \"find\" each object once per\n  scan, regardless of how many modules that object is imported into.\n\n0.6 (2011-01-09)\n----------------\n\n- Some metaclasses (Elixir's) don't raise an AttributeError when asked for a\n  nonexistent attribute during a scan.  We now catch all exceptions when\n  interrogating an object for ``__venusian_callbacks__`` rather than just\n  AttributeError.\n\n0.5 (2010-12-19)\n----------------\n\n- Make ``codeinfo`` attribute available as an attribute of the AttachInfo\n  object. It will be a tuple in the form ``(filename, lineno, function,\n  sourceline)`` representing the context of the venusian decorator.  Eg.\n  ``('/home/chrism/projects/venusian/tests/test_advice.py', 81,\n  'testCallInfo', 'add_handler(foo, bar)')``\n\n0.4 (2010-09-03)\n----------------\n\n- Bug fix: when a venusian decorator used as a class decorator was\n  used against both a class *and* a subclass of that class, the\n  superclass and subclass would effectively share the same set of\n  callbacks.  This was not the intent: each class declaration should\n  have its own local set of callbacks; callbacks added via decorations\n  should not be inherited, and a superclass should not receive its\n  subclass' decorations.\n\n- Arrange test fixtures into a single directory.\n\n0.3 (2010-06-24)\n----------------\n\n- Ignore orphaned modules (``.pyc`` or ``.pyo`` files without a\n  corresponding ``.py`` file) during a scan.\n\n0.2 (2010-04-18)\n----------------\n\n- Add the concept of scan categories (see the \"Scan Categories\"\n  section of the documentation) to allow an application to make use of\n  more than one Venusian-using framework simultaneously.\n\n0.1 (2010-02-15)\n----------------\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pylonsproject.org", "keywords": "web wsgi zope pylons pyramid morepath", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "venusifork", "package_url": "https://pypi.org/project/venusifork/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/venusifork/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pylonsproject.org"}, "release_url": "https://pypi.org/project/venusifork/2.0a3/", "requires_dist": null, "requires_python": null, "summary": "A library for deferring decorator actions", "version": "2.0a3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Venusian is a library which allows framework authors to defer\ndecorator actions.  Instead of taking actions when a function (or\nclass) decorator is executed at import time, you can defer the action\nusually taken by the decorator until a separate \u201cscan\u201d phase.</p>\n<p>See the \u201cdocs\u201d directory of the package or the online documentation at\n<a href=\"http://docs.pylonsproject.org/projects/venusian/en/latest/\" rel=\"nofollow\">http://docs.pylonsproject.org/projects/venusian/en/latest/</a></p>\n<div id=\"a3-2016-01-27\">\n<h2>2.0a3 (2016-01-27)</h2>\n<ul>\n<li>Do an additional check to avoid scanning modules inserted by <tt>six</tt>\nfor Python 3 compatibility. <tt>six</tt> assumes these modules exist in\nPython but some of them, like <tt>gdbm</tt>, cannot always be compiled,\nso don\u2019t scan these. This hack may actually not be strictly proper\nas it is possible for an outer module to be ignored while an inner\nmodule is allowed by an <tt>ignore</tt> function, but we\u2019ll not worry\nabout that case for now.</li>\n</ul>\n</div>\n<div id=\"a2-2014-07-07\">\n<h2>2.0a2 (2014-07-07)</h2>\n<ul>\n<li><strong>NOTE</strong> This will hopefully be in Venusian proper in Version 1.1; this\nfork is just so I can make progress with the new recursive option.</li>\n<li>Add a <tt>recursive</tt> option to the <tt>.scan()</tt> method to allow the\nscanning of packages non-recursively (scan <tt>__init__.py</tt> only).</li>\n<li>Some refactoring of internals from nested functions into separate\nmethods.</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h2>1.0 (2014-06-30)</h2>\n<ul>\n<li>Fix an issue under PyPy &gt; 2.0 where attached decorators may not be found.</li>\n<li>Drop support of Python 2.4 / 2.5 / Jython.</li>\n<li>Add <tt>lift</tt> and <tt>onlyliftedfrom</tt> class decorators to allow for inheritance\nof venusian decorators attached to superclass methods.  See the API\ndocumentation for more information.</li>\n<li>Fix bug where otherwise undecorated subclass of a superclass that had\nvenusian decorators on it would inherit its superclass\u2019 decorations.\nVenusian decorators should have never been inherited implicitly.  See\n<a href=\"https://github.com/Pylons/venusian/issues/11#issuecomment-4977352\" rel=\"nofollow\">https://github.com/Pylons/venusian/issues/11#issuecomment-4977352</a></li>\n</ul>\n</div>\n<div id=\"a8-2013-04-15\">\n<h2>1.0a8 (2013-04-15)</h2>\n<ul>\n<li>Pass <tt>ignore</tt> argument along recursively to <tt>walk_packages</tt> so custom\nignore functions will ignore things recursively.  See\n<a href=\"https://github.com/Pylons/venusian/pull/16\" rel=\"nofollow\">https://github.com/Pylons/venusian/pull/16</a></li>\n<li>Don\u2019t run tox tests under Python 2.4 anymore (tox no longer supports 2.4).</li>\n</ul>\n</div>\n<div id=\"a7-2012-08-25\">\n<h2>1.0a7 (2012-08-25)</h2>\n<ul>\n<li>Venusian now works on Python 3.3b2+ (importlib-based).</li>\n<li>Use nose-exclude instead of relying on fragile module-scope code to ensure\nwe don\u2019t get errors resulting from import of fixture code during\n\u201cnosetests\u201d.</li>\n<li>Bug fix: no longer suppress <tt>ImportError</tt> while scanning by default.  If\nyou want to suppress <tt>ImportError</tt> while scanning, you\u2019ll now need use an\n<tt>onerror</tt> callback as described in the documentation.</li>\n</ul>\n</div>\n<div id=\"a6-2012-04-23\">\n<h2>1.0a6 (2012-04-23)</h2>\n<ul>\n<li>Don\u2019t ignore decorated objects within their original locations if they\nhappen to be imported into another module (remove <tt>seen</tt> set from invoke\nin venusian scanning).  See <a href=\"https://github.com/Pylons/venusian/pull/13\" rel=\"nofollow\">https://github.com/Pylons/venusian/pull/13</a> .</li>\n</ul>\n</div>\n<div id=\"a5-2012-04-21\">\n<h2>1.0a5 (2012-04-21)</h2>\n<ul>\n<li>Slightly less sucky way to ignore objects during scanning that are only\nimported into a module but not actually defined there.  See 1.0a4 change\nnotes for rationale.  Now instead of checking whether the module of the\n<em>scanned object</em> matches the module being scanned, we check whether the\nmodule of the <em>Venusian attachment</em> matches the module being scanned.  This\nallows some genuine uses of imported objects as Venusian scan targets while\npreventing inappropriate double-scanning of objects that have a venusian\nattachment which just happen to be imported into other scanned modules.</li>\n<li>Add <tt>dev</tt> and <tt>docs</tt> setup.py commands (ala Pyramid).</li>\n</ul>\n</div>\n<div id=\"a4-2012-04-16\">\n<h2>1.0a4 (2012-04-16)</h2>\n<ul>\n<li><p>Attempt to ignore objects during scanning that are only imported into a\nmodule but not actually defined there.  This is a semantics change, but\nit\u2019s the right thing to do, because I found myself facing a situation like\nthis:</p>\n<pre># in a module named \"one\"\n\nfrom two import anotheradecoratedthing\n@adecorator\ndef adecoratedthing(): pass\n\n# and scanning both modules\nscan('one')\nscan('two')\n</pre>\n<p>In this case you\u2019d wind up with two repeated registrations for\n\u201canotherdecoratedthing\u201d, which isn\u2019t what anyone expects.</p>\n</li>\n</ul>\n</div>\n<div id=\"a3-2012-02-08\">\n<h2>1.0a3 (2012-02-08)</h2>\n<ul>\n<li>Add an <tt>ignore</tt> argument to the <tt>scan</tt> method of a <tt>Scanner</tt>.  This\nargument allows a user to ignore packages, modules, and global objects by\nname during a <tt>scan</tt>.  See the \u201cignore Scan Argument\u201d in the narrative\ndocumentation for more details.</li>\n</ul>\n</div>\n<div id=\"a2-2011-09-02\">\n<h2>1.0a2 (2011-09-02)</h2>\n<ul>\n<li>Close ImpLoader file handle to avoid resource warnings on Python 3.</li>\n</ul>\n</div>\n<div id=\"a1-2011-08-27\">\n<h2>1.0a1 (2011-08-27)</h2>\n<ul>\n<li>Python 3 compatibility.</li>\n<li>Allow an <tt>onerror</tt> callback to be passed to <tt>Scanner.scan()</tt>.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>0.9 (2011-06-18)</h2>\n<ul>\n<li>Prevent corner case scan-time exception when trying to introspect insane\nmodule-scope objects.  See <a href=\"https://github.com/Pylons/venusian/issues/5\" rel=\"nofollow\">https://github.com/Pylons/venusian/issues/5</a> .</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>0.8 (2011-04-30)</h2>\n<ul>\n<li>Normal \u201csetup.py test\u201d can\u2019t support running the venusian tests under py\n2.4 or 2.5; when it scans the \u2018classdecorators\u2019 fixture, it barfs.  To get\naround this, we used to depend on <tt>nose</tt> in <tt>setup_requires</tt> and tell\n\u201csetup.py test\u201d to use nose by setting test_suite to \u201cnose.collector\u201d but\nwe can\u2019t anymore because folks use Venusian in systems which install from\npip bundles; pip bundles do not support setup_requires.  So, sorry, we\u2019re\npainted into a corner; at this point you just have to know to install nose\nand run \u201csetup.py nosetests\u201d rather than \u201csetup.py test\u201d.  Or just run\n\u201ctox\u201d which tests it under all Pythons.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h2>0.7 (2011-03-16)</h2>\n<ul>\n<li>Use Pylons theme in documentation.</li>\n<li>Fix orphaned pyc test on pypy.</li>\n<li>Fix GitHub Issue #1: subclasses of decorated classes that do not\nhave any decorations should not inherit the decorations of their\nparent classes.</li>\n<li>Fix GitHub Issue #2: scans should only \u201cfind\u201d each object once per\nscan, regardless of how many modules that object is imported into.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h2>0.6 (2011-01-09)</h2>\n<ul>\n<li>Some metaclasses (Elixir\u2019s) don\u2019t raise an AttributeError when asked for a\nnonexistent attribute during a scan.  We now catch all exceptions when\ninterrogating an object for <tt>__venusian_callbacks__</tt> rather than just\nAttributeError.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h2>0.5 (2010-12-19)</h2>\n<ul>\n<li>Make <tt>codeinfo</tt> attribute available as an attribute of the AttachInfo\nobject. It will be a tuple in the form <tt>(filename, lineno, function,\nsourceline)</tt> representing the context of the venusian decorator.  Eg.\n<tt><span class=\"pre\">('/home/chrism/projects/venusian/tests/test_advice.py',</span> 81,\n'testCallInfo', 'add_handler(foo, <span class=\"pre\">bar)')</span></tt></li>\n</ul>\n</div>\n<div id=\"id7\">\n<h2>0.4 (2010-09-03)</h2>\n<ul>\n<li>Bug fix: when a venusian decorator used as a class decorator was\nused against both a class <em>and</em> a subclass of that class, the\nsuperclass and subclass would effectively share the same set of\ncallbacks.  This was not the intent: each class declaration should\nhave its own local set of callbacks; callbacks added via decorations\nshould not be inherited, and a superclass should not receive its\nsubclass\u2019 decorations.</li>\n<li>Arrange test fixtures into a single directory.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h2>0.3 (2010-06-24)</h2>\n<ul>\n<li>Ignore orphaned modules (<tt>.pyc</tt> or <tt>.pyo</tt> files without a\ncorresponding <tt>.py</tt> file) during a scan.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h2>0.2 (2010-04-18)</h2>\n<ul>\n<li>Add the concept of scan categories (see the \u201cScan Categories\u201d\nsection of the documentation) to allow an application to make use of\nmore than one Venusian-using framework simultaneously.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h2>0.1 (2010-02-15)</h2>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1925342, "releases": {"2.0a1": [{"comment_text": "", "digests": {"md5": "ed23ed0524e4649b92b4f54d460fb15c", "sha256": "ae66ad9707adeed41b4d1f87c31c8567a359c07770df1a8ccf71a92c6616ab8b"}, "downloads": -1, "filename": "venusifork-2.0a1.zip", "has_sig": false, "md5_digest": "ed23ed0524e4649b92b4f54d460fb15c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65414, "upload_time": "2014-06-30T12:20:49", "upload_time_iso_8601": "2014-06-30T12:20:49.591738Z", "url": "https://files.pythonhosted.org/packages/af/2d/2a15748909bb4f3c4b4d4457ca795b8264662461083a38d6a3365a16c93f/venusifork-2.0a1.zip", "yanked": false}], "2.0a2": [{"comment_text": "", "digests": {"md5": "584b1bdd0138219ae1786444da713493", "sha256": "6735683b03fb687e6b0fd2e3628faba29b7620afc9af5ed7d47702fe27aa8f51"}, "downloads": -1, "filename": "venusifork-2.0a2.zip", "has_sig": false, "md5_digest": "584b1bdd0138219ae1786444da713493", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43166, "upload_time": "2014-07-07T11:18:48", "upload_time_iso_8601": "2014-07-07T11:18:48.000731Z", "url": "https://files.pythonhosted.org/packages/3a/a7/1b9a6c757295e3b5685442ff647f76e580f313700905ab099e98de6c0cd6/venusifork-2.0a2.zip", "yanked": false}], "2.0a3": [{"comment_text": "", "digests": {"md5": "1b8554298fa283e02c45b48cc8ed2f22", "sha256": "6271ecc9e360aae9503c17a9a8ec2acad368f26f357e384fd0186b34dfbde270"}, "downloads": -1, "filename": "venusifork-2.0a3.tar.gz", "has_sig": false, "md5_digest": "1b8554298fa283e02c45b48cc8ed2f22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34486, "upload_time": "2016-01-27T11:33:46", "upload_time_iso_8601": "2016-01-27T11:33:46.722376Z", "url": "https://files.pythonhosted.org/packages/56/d7/6a5ba45fc805a90d1fd61b22d2f940ecb153ba208eda69cbea0f9c8afd35/venusifork-2.0a3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1b8554298fa283e02c45b48cc8ed2f22", "sha256": "6271ecc9e360aae9503c17a9a8ec2acad368f26f357e384fd0186b34dfbde270"}, "downloads": -1, "filename": "venusifork-2.0a3.tar.gz", "has_sig": false, "md5_digest": "1b8554298fa283e02c45b48cc8ed2f22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34486, "upload_time": "2016-01-27T11:33:46", "upload_time_iso_8601": "2016-01-27T11:33:46.722376Z", "url": "https://files.pythonhosted.org/packages/56/d7/6a5ba45fc805a90d1fd61b22d2f940ecb153ba208eda69cbea0f9c8afd35/venusifork-2.0a3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:59 2020"}