{"info": {"author": "Alexander Solovyov", "author_email": "piranha@piranha.org.ua", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. -*- mode: rst -*-\n\n=================\n django-pingback\n=================\n\nThis two applications provide 3 connected services: pingback server,\npingback client and directory ping client.\n\nDepends on the `django-xmlrpc`_.\n\nConfiguration\n-------------\n\nFirst, install the `django-xmlrpc`_ application. You can download it\neither from `repo`_ or just use setuptools::\n\n    easy_install -Z -f http://pypi.aartemenko.com django-xmlrpc\n\nNext, download and install ``django-pingback``:\n\n * download sources from main `repository`_\n * or use ``easy_install django-pingback``\n * add ``pingback`` to your ``INSTALLED_APPS``\n * run ``./manage.py syncdb``\n * setup client and server callbacks.\n\n.. _repo: django-xmlrpc_\n.. _repository: django-pingback_\n\nConnecting server\n-----------------\n\nPingback server receives pings from other sites, so, we must create\nfunction which binds our URLs an objects.\n\nBut first of all, add this urlpattern to your urls configuration::\n\n    ((r'^xmlrpc/$', 'django_xmlrpc.views.handle_xmlrpc', {}, 'xmlrpc'))\n\nIt is a handler for all xmlrpc requests.\n\nUsually, blog has a detailed view for each post. Suppose that our view\nresides in ``blog.views.post_detail`` and accepts one keyword arguments ``slug``.\n\nHere is simple example, how to make ``Post`` objects pingable::\n\n    from datetime import time, date, datetime\n    from time import strptime\n\n    from blog.models import Post\n    from pingback import register_pingback, ping_func\n    from django_xmlrpc import xmlrpcdispatcher\n\n    # create simple function which returns Post object and accepts\n    # exactly same arguments as 'details' view.\n    def pingback_blog_handler(slug, **kwargs):\n        return Post.objects.get(slug=slug)\n\n    # register pingback on our post_detail\n    register_pingback('blog.views.post_detail', pingback_blog_handler)\n\n    # register pingback handler in the dispatcher\n    xmlrpcdispatcher.register_function(ping_func, 'pingback.ping')\n\n.. note::\n\n  If you are using middleware (described later), you don't need to register\n  ping_func in xmlrpc dispatcher, it's done automatically.\n\nNow, go at you http://mysweetsite.com/xmlrpc/ and you should see\n``pingback.ping`` method among few other system methods. If it is not\nthere, then you made mistake in you server setup.\n\nAlso, you need to tell other sites, that your blog accepts\npingbacks. You can do it by adding a link in the head of your site::\n\n    <link rel=\"pingback\" href=\"{% url 'xmlrpc' %}\" />\n\nOr by adding X-Pingback HTTP header. Do do this, just add such line in\nthe ``settings.py``::\n\n    MIDDLEWARE_CLASSES = [\n        # ...\n        'pingback.middleware.PingbackMiddleware',\n    ]\n\nConnecting client signals\n-------------------------\n\nLet's suppose, that you have a blog and want to ping external sites\n(like Technorati) on post save, and to receive pingbacks from other\nsites. Next two sections contain simple 'how-to' enable these features.\n\nAt first, setup configuration in the settings, here is an example::\n\n    DIRECTORY_URLS = (\n        'http://ping.blogs.yandex.ru/RPC2',\n        'http://rpc.technorati.com/rpc/ping',\n    )\n\n\nNext, you must connect some signals to ping workers, which created using\n``ping_external_links`` and ``ping_directories`` functions::\n\n    from django.db.models import signals\n    from pingback.client import ping_external_links, ping_directories\n    from blog.models import Post\n\n    signals.post_save.connect(\n            ping_external_links(content_attr = 'html',\n                                url_attr = 'get_absolute_url'),\n            sender=Post, weak=False)\n\n    signals.post_save.connect(\n            ping_directories(url_attr = 'get_absolute_url'),\n            sender=Post, weak=False)\n\nPlease note, that in the ``content_attr`` you must give either attribute\nor method name, which returns HTML content of the object.\n\nIf you don't have such attribute or method, for example if you apply\nmarkdown filter in the template, then ``content_func`` argument can be\nused instead of the ``content_attr``.\n\n``content_func`` must return HTML, and must accepts an instance as a\nsingle argument.\n\n.. note::\n\n  Pay attention to the ``weak=False`` argument. If case of omitting Django event\n  dispatcher will remove your signal.\n\n\nTemplate tags\n-------------\n\nTo show pingbacks on your page, you can use code like this::\n\n    {% load pingback_tags %}\n    {% get_pingback_list for object as pingbacks %}\n    {% if pingbacks %}\n        <h1>Pingbacks</h1>\n        {% for pingback in pingbacks %}\n            <div class=\"b-pingback\">\n                <p class=\"b-meta\">\n                    <a name=\"pingback-{{ pingback.id }}\"\n                       href=\"{{ object.get_absolute_url }}#pingback-{{ pingback.id }}\"\n                       class=\"b-permlink\">permalink</a>\n                    {{ pingback.date }}, pingback from {{ pingback.url|urlizetrunc:40 }}:\n                </p>\n\n                <p>{{ pingback.content }}</p>\n            </div>\n        {% endfor %}\n    {% endif %}\n\nAlso you can use ``{% get_pingback_count for object as cnt %}``, to save\npingbacks' count in the context variable.\n\n.. _django-xmlrpc: https://code.launchpad.net/~aartemenko/django-xmlrpc/svetlyak40wt\n.. _django-pingback: http://hg.piranha.org.ua/django-pingback/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://hg.piranha.org.ua/django-pingback/", "keywords": "django apps", "license": "New BSD License", "maintainer": null, "maintainer_email": null, "name": "django-pingback", "package_url": "https://pypi.org/project/django-pingback/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-pingback/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://hg.piranha.org.ua/django-pingback/"}, "release_url": "https://pypi.org/project/django-pingback/0.3/", "requires_dist": null, "requires_python": null, "summary": "Pingback client/server implementation for Django framework.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This two applications provide 3 connected services: pingback server,\npingback client and directory ping client.</p>\n<p>Depends on the <a href=\"https://code.launchpad.net/~aartemenko/django-xmlrpc/svetlyak40wt\" rel=\"nofollow\">django-xmlrpc</a>.</p>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>First, install the <a href=\"https://code.launchpad.net/~aartemenko/django-xmlrpc/svetlyak40wt\" rel=\"nofollow\">django-xmlrpc</a> application. You can download it\neither from <a href=\"https://code.launchpad.net/~aartemenko/django-xmlrpc/svetlyak40wt\" rel=\"nofollow\">repo</a> or just use setuptools:</p>\n<pre>easy_install -Z -f http://pypi.aartemenko.com django-xmlrpc\n</pre>\n<p>Next, download and install <tt><span class=\"pre\">django-pingback</span></tt>:</p>\n<blockquote>\n<ul>\n<li>download sources from main <a href=\"http://hg.piranha.org.ua/django-pingback/\" rel=\"nofollow\">repository</a></li>\n<li>or use <tt>easy_install <span class=\"pre\">django-pingback</span></tt></li>\n<li>add <tt>pingback</tt> to your <tt>INSTALLED_APPS</tt></li>\n<li>run <tt>./manage.py syncdb</tt></li>\n<li>setup client and server callbacks.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"connecting-server\">\n<h2>Connecting server</h2>\n<p>Pingback server receives pings from other sites, so, we must create\nfunction which binds our URLs an objects.</p>\n<p>But first of all, add this urlpattern to your urls configuration:</p>\n<pre>((r'^xmlrpc/$', 'django_xmlrpc.views.handle_xmlrpc', {}, 'xmlrpc'))\n</pre>\n<p>It is a handler for all xmlrpc requests.</p>\n<p>Usually, blog has a detailed view for each post. Suppose that our view\nresides in <tt>blog.views.post_detail</tt> and accepts one keyword arguments <tt>slug</tt>.</p>\n<p>Here is simple example, how to make <tt>Post</tt> objects pingable:</p>\n<pre>from datetime import time, date, datetime\nfrom time import strptime\n\nfrom blog.models import Post\nfrom pingback import register_pingback, ping_func\nfrom django_xmlrpc import xmlrpcdispatcher\n\n# create simple function which returns Post object and accepts\n# exactly same arguments as 'details' view.\ndef pingback_blog_handler(slug, **kwargs):\n    return Post.objects.get(slug=slug)\n\n# register pingback on our post_detail\nregister_pingback('blog.views.post_detail', pingback_blog_handler)\n\n# register pingback handler in the dispatcher\nxmlrpcdispatcher.register_function(ping_func, 'pingback.ping')\n</pre>\n<div>\n<p>Note</p>\n<p>If you are using middleware (described later), you don\u2019t need to register\nping_func in xmlrpc dispatcher, it\u2019s done automatically.</p>\n</div>\n<p>Now, go at you <a href=\"http://mysweetsite.com/xmlrpc/\" rel=\"nofollow\">http://mysweetsite.com/xmlrpc/</a> and you should see\n<tt>pingback.ping</tt> method among few other system methods. If it is not\nthere, then you made mistake in you server setup.</p>\n<p>Also, you need to tell other sites, that your blog accepts\npingbacks. You can do it by adding a link in the head of your site:</p>\n<pre>&lt;link rel=\"pingback\" href=\"{% url 'xmlrpc' %}\" /&gt;\n</pre>\n<p>Or by adding X-Pingback HTTP header. Do do this, just add such line in\nthe <tt>settings.py</tt>:</p>\n<pre>MIDDLEWARE_CLASSES = [\n    # ...\n    'pingback.middleware.PingbackMiddleware',\n]\n</pre>\n</div>\n<div id=\"connecting-client-signals\">\n<h2>Connecting client signals</h2>\n<p>Let\u2019s suppose, that you have a blog and want to ping external sites\n(like Technorati) on post save, and to receive pingbacks from other\nsites. Next two sections contain simple \u2018how-to\u2019 enable these features.</p>\n<p>At first, setup configuration in the settings, here is an example:</p>\n<pre>DIRECTORY_URLS = (\n    'http://ping.blogs.yandex.ru/RPC2',\n    'http://rpc.technorati.com/rpc/ping',\n)\n</pre>\n<p>Next, you must connect some signals to ping workers, which created using\n<tt>ping_external_links</tt> and <tt>ping_directories</tt> functions:</p>\n<pre>from django.db.models import signals\nfrom pingback.client import ping_external_links, ping_directories\nfrom blog.models import Post\n\nsignals.post_save.connect(\n        ping_external_links(content_attr = 'html',\n                            url_attr = 'get_absolute_url'),\n        sender=Post, weak=False)\n\nsignals.post_save.connect(\n        ping_directories(url_attr = 'get_absolute_url'),\n        sender=Post, weak=False)\n</pre>\n<p>Please note, that in the <tt>content_attr</tt> you must give either attribute\nor method name, which returns HTML content of the object.</p>\n<p>If you don\u2019t have such attribute or method, for example if you apply\nmarkdown filter in the template, then <tt>content_func</tt> argument can be\nused instead of the <tt>content_attr</tt>.</p>\n<p><tt>content_func</tt> must return HTML, and must accepts an instance as a\nsingle argument.</p>\n<div>\n<p>Note</p>\n<p>Pay attention to the <tt>weak=False</tt> argument. If case of omitting Django event\ndispatcher will remove your signal.</p>\n</div>\n</div>\n<div id=\"template-tags\">\n<h2>Template tags</h2>\n<p>To show pingbacks on your page, you can use code like this:</p>\n<pre>{% load pingback_tags %}\n{% get_pingback_list for object as pingbacks %}\n{% if pingbacks %}\n    &lt;h1&gt;Pingbacks&lt;/h1&gt;\n    {% for pingback in pingbacks %}\n        &lt;div class=\"b-pingback\"&gt;\n            &lt;p class=\"b-meta\"&gt;\n                &lt;a name=\"pingback-{{ pingback.id }}\"\n                   href=\"{{ object.get_absolute_url }}#pingback-{{ pingback.id }}\"\n                   class=\"b-permlink\"&gt;permalink&lt;/a&gt;\n                {{ pingback.date }}, pingback from {{ pingback.url|urlizetrunc:40 }}:\n            &lt;/p&gt;\n\n            &lt;p&gt;{{ pingback.content }}&lt;/p&gt;\n        &lt;/div&gt;\n    {% endfor %}\n{% endif %}\n</pre>\n<p>Also you can use <tt>{% get_pingback_count for object as cnt %}</tt>, to save\npingbacks\u2019 count in the context variable.</p>\n</div>\n\n          </div>"}, "last_serial": 724414, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "4e05b2bab2eb0982e4917bdb1d0a5020", "sha256": "c671ab57c4afaf82aaabc9f0cfdda3d62165eaaf6368a5a3dc93af31883521da"}, "downloads": -1, "filename": "django_pingback-0.1.1-py2.5.egg", "has_sig": false, "md5_digest": "4e05b2bab2eb0982e4917bdb1d0a5020", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 19771, "upload_time": "2008-11-25T11:08:36", "upload_time_iso_8601": "2008-11-25T11:08:36Z", "url": "https://files.pythonhosted.org/packages/50/d7/f00bcdd3262542656f07237bce7a20e753fe4a13d7d39f2db3841ee7d28d/django_pingback-0.1.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "106fea240d85d59b317fcc2256672750", "sha256": "5f2233d921d30ae26782fae6e673b34816cbbd52565c82daa4ca58bf2e836956"}, "downloads": -1, "filename": "django-pingback-0.1.1.tar.gz", "has_sig": false, "md5_digest": "106fea240d85d59b317fcc2256672750", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6147, "upload_time": "2008-11-25T11:08:25", "upload_time_iso_8601": "2008-11-25T11:08:25Z", "url": "https://files.pythonhosted.org/packages/f4/9e/25b66af802acc3ff4b49b2a77d9649ebcbb4b546297c0574a16f6dd7168b/django-pingback-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fb7835f2fc08b64a5304708baf73c426", "sha256": "0041e805161390bb63c57ad6b413d32df6de717d02fc57a3de750071dca6b24a"}, "downloads": -1, "filename": "django_pingback-0.1.2-py2.5.egg", "has_sig": false, "md5_digest": "fb7835f2fc08b64a5304708baf73c426", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 19928, "upload_time": "2009-02-03T09:35:48", "upload_time_iso_8601": "2009-02-03T09:35:48Z", "url": "https://files.pythonhosted.org/packages/53/a1/09b2b57748c762e402750c974b6cc0911fca0c83250ef69e0e53d5281173/django_pingback-0.1.2-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2918bc85c201f00b4f83e61666ceaefc", "sha256": "533e0877a46e932239c1b07873f4e100ee900af40454f479babdf4ba0000386c"}, "downloads": -1, "filename": "django-pingback-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2918bc85c201f00b4f83e61666ceaefc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6182, "upload_time": "2009-02-03T09:35:14", "upload_time_iso_8601": "2009-02-03T09:35:14Z", "url": "https://files.pythonhosted.org/packages/cd/d1/75d044a196c364397086168f68b4bfa73d02c5e5e3fb33414515b01dfb04/django-pingback-0.1.2.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "built for Darwin-9.6.0", "digests": {"md5": "318cc40b0be38b771f1636cafe3b334b", "sha256": "56f23d91d0fe0766ee0a47aa6b4993447887866f81c0677309b6f980ba6c97bb"}, "downloads": -1, "filename": "django-pingback-0.1.4.macosx-10.5-i386.tar.gz", "has_sig": false, "md5_digest": "318cc40b0be38b771f1636cafe3b334b", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 15997, "upload_time": "2009-04-13T11:06:16", "upload_time_iso_8601": "2009-04-13T11:06:16.189530Z", "url": "https://files.pythonhosted.org/packages/32/c2/a56f798d7667aa0ea0ae84aca8cf1f9ade13b369401514648700764751f6/django-pingback-0.1.4.macosx-10.5-i386.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "4322a69adff07aa9b18e2f5ba3c72fac", "sha256": "c05a475b8bd1111789b59bd3f7e97dd02abe40780aa8babd507f6caec3165638"}, "downloads": -1, "filename": "django_pingback-0.1.4-py2.5.egg", "has_sig": false, "md5_digest": "4322a69adff07aa9b18e2f5ba3c72fac", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 22143, "upload_time": "2009-04-13T11:06:29", "upload_time_iso_8601": "2009-04-13T11:06:29.882767Z", "url": "https://files.pythonhosted.org/packages/cd/57/cbc248c557986c74c41868b265998dcc07bea092bc42e08b67fe3683fad9/django_pingback-0.1.4-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "67eae9477306f639ce1512048cb6cdf6", "sha256": "147b3426c909f5454eb202ebe0fb5e666b2787cbe5767f20dbf8c73f1ae936d4"}, "downloads": -1, "filename": "django-pingback-0.1.4.tar.gz", "has_sig": false, "md5_digest": "67eae9477306f639ce1512048cb6cdf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10797, "upload_time": "2009-04-13T11:04:30", "upload_time_iso_8601": "2009-04-13T11:04:30.093675Z", "url": "https://files.pythonhosted.org/packages/84/32/97910ee3e67aa15c6a74a1b97e333b787df8d71a32f9f94d81ad33911b63/django-pingback-0.1.4.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4c22eb07f1101ca268b9b49241918f09", "sha256": "fa00ff331a828ceb9271949e9e17a0ad1e34215e641476e5d624141626b804ec"}, "downloads": -1, "filename": "django-pingback-0.2.tar.gz", "has_sig": false, "md5_digest": "4c22eb07f1101ca268b9b49241918f09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8479, "upload_time": "2010-01-05T22:22:15", "upload_time_iso_8601": "2010-01-05T22:22:15.820778Z", "url": "https://files.pythonhosted.org/packages/6e/12/2f3277b00c21776a348b06351c92a62663b74d75d477f843e47de4357359/django-pingback-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "1a190b0b811c080fc3b67c8bccbae275", "sha256": "8ddf13d36723e756bc91be59203c20aeef385c21492d275843ebc74aae3ac1e1"}, "downloads": -1, "filename": "django-pingback-0.3.tar.gz", "has_sig": false, "md5_digest": "1a190b0b811c080fc3b67c8bccbae275", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8407, "upload_time": "2010-01-10T21:34:34", "upload_time_iso_8601": "2010-01-10T21:34:34.809978Z", "url": "https://files.pythonhosted.org/packages/ee/d4/a1f49d323a9ef90ca6902dc86ebeb72d1b79deecf4526473ea9ef6db459c/django-pingback-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a190b0b811c080fc3b67c8bccbae275", "sha256": "8ddf13d36723e756bc91be59203c20aeef385c21492d275843ebc74aae3ac1e1"}, "downloads": -1, "filename": "django-pingback-0.3.tar.gz", "has_sig": false, "md5_digest": "1a190b0b811c080fc3b67c8bccbae275", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8407, "upload_time": "2010-01-10T21:34:34", "upload_time_iso_8601": "2010-01-10T21:34:34.809978Z", "url": "https://files.pythonhosted.org/packages/ee/d4/a1f49d323a9ef90ca6902dc86ebeb72d1b79deecf4526473ea9ef6db459c/django-pingback-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:01 2020"}