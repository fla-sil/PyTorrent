{"info": {"author": "Kumar McMillan", "author_email": "kumar.mcmillan@gmail.com", "bugtrack_url": null, "classifiers": [], "description": ".. contents::\n\nSummary\n-------\n\nWikir (pronounced \"wicker\") converts `reStructuredText`_ documents to various Wiki formats.  Currently, `Google Code Wiki Syntax`_ is the target, but compatibility with `Moin Moin Wiki Syntax`_ and `Trac Wiki Syntax`_ is maintained when possible.\n\n.. _Google Code Wiki Syntax: http://code.google.com/p/support/wiki/WikiSyntax\n.. _Moin Moin Wiki Syntax: http://musicbrainz.org/doc/MoinMoinWikiSyntax\n.. _Trac Wiki Syntax: http://trac.edgewall.org/wiki/WikiFormatting\n.. _reStructuredText: http://docutils.sourceforge.net/docs/user/rst/quickref.html\n\nInstallation\n------------\n\n::\n\n  easy_install wikir\n\nOr check out a development version from the `subversion repository`_.\n\n.. _subversion repository: http://wikir.googlecode.com/svn/trunk/#egg=wikir-dev\n\nHow Much reStructuredText Is Supported?\n---------------------------------------\n\nNot a whole lot!  Since `RST syntax`_ is huge and `Google Code Wiki Syntax`_ is small, RST may never be fully supported.  However, if you come across an unsupported RST directive please `submit an issue`_ and include the snippet of RST and how you think it should be displayed in wiki syntax.\n\n.. _submit an issue: http://code.google.com/p/wikir/issues/list\n.. _RST syntax: http://docutils.sourceforge.net/docs/user/rst/quickref.html\n\nIf possible, also submit a failing test for the new syntax you'd like supported.  You can see all currently tested and implemented RST syntax elements by running the following command (requires `nose`_)::\n\n    nosetests -v ./wikir/tests/test_syntax.py -a '!deferred'\n\nRemove the ``-a '!deferred'`` to see those that still need implementing.  Patches gladly accepted ;)\n\n.. _nose: http://somethingaboutorange.com/mrl/projects/nose/\n\nUsing Wikir In Your Project\n---------------------------\n\nThe publish_wiki Command\n++++++++++++++++++++++++\n\nAfter installing wikir, all `setuptools`_-enabled projects on the same machine will grow a new command, ``publish_wiki``.  A setuptools project is one with a setup.py file like so::\n\n  from setuptools import setup\n  setup(\n      name='MyModule',\n      version='0.999',\n      # ...etc...\n  )\n  \n.. _setuptools: http://pypi.python.org/pypi/setuptools\n\nCommand usage::\n\n    $ python setup.py publish_wiki --help\n    | Common commands: (see '--help-commands' for more)\n    | \n    |   setup.py build      will build the package underneath 'build/'\n    |   setup.py install    will install the package\n    | \n    | Global options:\n    |   --verbose (-v)  run verbosely (default)\n    |   --quiet (-q)    run quietly (turns verbosity off)\n    |   --dry-run (-n)  don't actually do anything\n    |   --help (-h)     show detailed help message\n    | \n    | Options for 'publish_wiki' command:\n    |   --source (-s)  path to RST source.  if a python module, the top-most\n    |                  docstring will be used as the source\n    | \n    | usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\n    |    or: setup.py --help [cmd1 cmd2 ...]\n    |    or: setup.py --help-commands\n    |    or: setup.py cmd --help\n    | \n\n\nPublishing RST To Wiki\n++++++++++++++++++++++\n\nHere is an example of publishing a module's docstring written in RST format to Wiki format::\n    \n    $ cd examples/basic\n    $ cat ./akimbo/__init__.py\n    | '''\n    | Welcome To Akimbo\n    | =================\n    | \n    | A Python module for akimbo'ing.\n    | \n    | This could live on `Google Code`_ if it wanted to.\n    | \n    | .. _Google Code: http://code.google.com/hosting/\n    | \n    | '''\n    $ python setup.py publish_wiki --source=./akimbo/__init__.py\n    | = Welcome To Akimbo =\n    | \n    | A Python module for akimbo'ing.\n    | \n    | This could live on [http://code.google.com/hosting/ Google Code] if it wanted to.\n    | \n\nUsing Custom RST Directives\n+++++++++++++++++++++++++++\n\nWikir provides an entry_point in case you need to register a `custom RST directive`_.  Here is an example::\n\n    $ cd examples/custom_directives\n    $ python setup.py -q develop\n    $ cat setup.py\n    | from setuptools import setup\n    | setup(\n    |     name = 'Foozilate',\n    |     entry_points = {\n    |         'wikir.rst_directives': [\n    |             'foozilate = foozilate.directives:foozilate'\n    |         ]\n    |     },\n    |     description = \"A mysterious package that aids in foozilation\")\n    $ cat ./README.txt\n    | This is the documentation for foozilate, which requires a custom directive called ``foozilate``.  All it does is wrap some tags around the input.\n    | \n    | .. foozilate::\n    |     this should be foozilated\n    $ python setup.py publish_wiki --source ./README.txt\n    | This is the documentation for foozilate, which requires a custom directive called `foozilate`.  All it does is wrap some tags around the input.\n    | \n    | --foozilated-- this should be foozilated --foozilated--\n    | \n    $ python setup.py -q develop --uninstall\n\n.. note::\n    You should avoid putting custom directives in a docstring if you want them to build with a standard docutils install.  For example, your RST docstrings may be parsed automatically by the `The Cheeseshop`_ or another documentation generator, like `pydoctor`_.\n\n.. _pydoctor: http://codespeak.net/~mwh/pydoctor/\n.. _The Cheeseshop: http://pypi.python.org/pypi\n.. _custom RST directive: http://docutils.sourceforge.net/docs/howto/rst-directives.html\n\nThe left side of the entry_point defined the directive name and the right side specifies the path to the directive function.  This is registered with docutils before any RST is published.\n\nThe wikir command\n+++++++++++++++++\n\nIf you don't want to use wikir through setup.py you can use the command line script, `wikir`, which gets installed for you.  \n\nCommand usge::\n\n    $ wikir --help\n    | Usage: wikir [options] path/to/module.py\n    |        wikir [options] path/to/file.txt\n    | \n    | Publish RST documents in Wiki format\n    | \n    | 1. finds the top-most docstring of module.py, parses as RST, and prints Wiki format to STDOUT\n    | 2. parses file.txt (or a file with any other extension) as RST and prints Wiki format to STDOUT\n    | \n    | Options:\n    |   -h, --help  show this help message and exit\n\nYou can publish a module's docstring written in RST format to Wiki format like so::\n\n    $ cd examples/basic\n    $ cat ./akimbo/__init__.py\n    | '''\n    | Welcome To Akimbo\n    | =================\n    | \n    | A Python module for akimbo'ing.\n    | \n    | This could live on `Google Code`_ if it wanted to.\n    | \n    | .. _Google Code: http://code.google.com/hosting/\n    | \n    | '''\n    $ wikir ./akimbo/__init__.py\n    | = Welcome To Akimbo =\n    | \n    | A Python module for akimbo'ing.\n    | \n    | This could live on [http://code.google.com/hosting/ Google Code] if it wanted to.\n    | \n    \n... and you can publish any document written in RST format to Wiki format like so::\n\n    $ cd examples/basic\n    $ cat ./README.txt\n    | ========================\n    | Documentation for Akimbo\n    | ========================\n    | \n    | .. contents:: :local:\n    | \n    | What is it?\n    | ===========\n    | \n    | A Python module for akimbo'ing.\n    | \n    | Where does it live?\n    | ===================\n    | \n    | Akimbo could live on `Google Code`_ if it wanted to.\n    | \n    | .. _Google Code: http://code.google.com/hosting/\n    $ wikir ./README.txt\n    | = Documentation for Akimbo =\n    | \n    |   * What is it?\n    |   * Where does it live?\n    | \n    | \n    | = What is it? =\n    | \n    | A Python module for akimbo'ing.\n    | \n    | = Where does it live? =\n    | \n    | Akimbo could live on [http://code.google.com/hosting/ Google Code] if it wanted to.\n    | \n\nUsing Wikir Programatically\n---------------------------\n\n::\n\n  >>> from wikir import publish_string\n  >>> print publish_string('''\n  ... My RST Document\n  ... ===============\n  ... \n  ... For `Google Code`_!\n  ... \n  ... .. _Google Code: http://code.google.com/\n  ... ''')\n  = My RST Document =\n  <BLANKLINE>\n  For [http://code.google.com/ Google Code]!\n  <BLANKLINE>\n  <BLANKLINE>\n  >>> \n\nCredits\n-------\n\nThis work is based on code I found while snooping around the `nose repository`_ (Jason Pellerin), `Ian Bicking's docutils sandbox`_, and `Matthew Gilbert's docutils sandbox`_.  Thanks to `Kent S. Johnson`_ for additional help and feedback.\n\n.. _nose repository: http://python-nose.googlecode.com/svn/trunk/scripts/\n.. _Ian Bicking's docutils sandbox: http://docutils.sourceforge.net/sandbox/ianb/wiki/Wiki.py\n.. _Matthew Gilbert's docutils sandbox: http://docutils.sourceforge.net/sandbox/mmgilbe/rst.py\n.. _Kent S. Johnson: http://personalpages.tds.net/~kent37/\n\nProject Home\n------------\n\nIf you're not there already, `wikir lives on Google Code`_.\n\n.. _wikir lives on Google Code: http://code.google.com/p/wikir/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/wikir/", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "wikir", "package_url": "https://pypi.org/project/wikir/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/wikir/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/wikir/"}, "release_url": "https://pypi.org/project/wikir/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "Publish RST documents in Wiki format.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#summary\" id=\"id1\" rel=\"nofollow\">Summary</a></li>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#how-much-restructuredtext-is-supported\" id=\"id3\" rel=\"nofollow\">How Much reStructuredText Is Supported?</a></li>\n<li><a href=\"#using-wikir-in-your-project\" id=\"id4\" rel=\"nofollow\">Using Wikir In Your Project</a><ul>\n<li><a href=\"#the-publish-wiki-command\" id=\"id5\" rel=\"nofollow\">The publish_wiki Command</a></li>\n<li><a href=\"#publishing-rst-to-wiki\" id=\"id6\" rel=\"nofollow\">Publishing RST To Wiki</a></li>\n<li><a href=\"#using-custom-rst-directives\" id=\"id7\" rel=\"nofollow\">Using Custom RST Directives</a></li>\n<li><a href=\"#the-wikir-command\" id=\"id8\" rel=\"nofollow\">The wikir command</a></li>\n</ul>\n</li>\n<li><a href=\"#using-wikir-programatically\" id=\"id9\" rel=\"nofollow\">Using Wikir Programatically</a></li>\n<li><a href=\"#credits\" id=\"id10\" rel=\"nofollow\">Credits</a></li>\n<li><a href=\"#project-home\" id=\"id11\" rel=\"nofollow\">Project Home</a></li>\n</ul>\n</div>\n<div id=\"summary\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Summary</a></h2>\n<p>Wikir (pronounced \u201cwicker\u201d) converts <a href=\"http://docutils.sourceforge.net/docs/user/rst/quickref.html\" rel=\"nofollow\">reStructuredText</a> documents to various Wiki formats.  Currently, <a href=\"http://code.google.com/p/support/wiki/WikiSyntax\" rel=\"nofollow\">Google Code Wiki Syntax</a> is the target, but compatibility with <a href=\"http://musicbrainz.org/doc/MoinMoinWikiSyntax\" rel=\"nofollow\">Moin Moin Wiki Syntax</a> and <a href=\"http://trac.edgewall.org/wiki/WikiFormatting\" rel=\"nofollow\">Trac Wiki Syntax</a> is maintained when possible.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Installation</a></h2>\n<pre>easy_install wikir\n</pre>\n<p>Or check out a development version from the <a href=\"http://wikir.googlecode.com/svn/trunk/#egg=wikir-dev\" rel=\"nofollow\">subversion repository</a>.</p>\n</div>\n<div id=\"how-much-restructuredtext-is-supported\">\n<h2><a href=\"#id3\" rel=\"nofollow\">How Much reStructuredText Is Supported?</a></h2>\n<p>Not a whole lot!  Since <a href=\"http://docutils.sourceforge.net/docs/user/rst/quickref.html\" rel=\"nofollow\">RST syntax</a> is huge and <a href=\"http://code.google.com/p/support/wiki/WikiSyntax\" rel=\"nofollow\">Google Code Wiki Syntax</a> is small, RST may never be fully supported.  However, if you come across an unsupported RST directive please <a href=\"http://code.google.com/p/wikir/issues/list\" rel=\"nofollow\">submit an issue</a> and include the snippet of RST and how you think it should be displayed in wiki syntax.</p>\n<p>If possible, also submit a failing test for the new syntax you\u2019d like supported.  You can see all currently tested and implemented RST syntax elements by running the following command (requires <a href=\"http://somethingaboutorange.com/mrl/projects/nose/\" rel=\"nofollow\">nose</a>):</p>\n<pre>nosetests -v ./wikir/tests/test_syntax.py -a '!deferred'\n</pre>\n<p>Remove the <tt><span class=\"pre\">-a</span> '!deferred'</tt> to see those that still need implementing.  Patches gladly accepted ;)</p>\n</div>\n<div id=\"using-wikir-in-your-project\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Using Wikir In Your Project</a></h2>\n<div id=\"the-publish-wiki-command\">\n<h3><a href=\"#id5\" rel=\"nofollow\">The publish_wiki Command</a></h3>\n<p>After installing wikir, all <a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">setuptools</a>-enabled projects on the same machine will grow a new command, <tt>publish_wiki</tt>.  A setuptools project is one with a setup.py file like so:</p>\n<pre>from setuptools import setup\nsetup(\n    name='MyModule',\n    version='0.999',\n    # ...etc...\n)\n</pre>\n<p>Command usage:</p>\n<pre>$ python setup.py publish_wiki --help\n| Common commands: (see '--help-commands' for more)\n|\n|   setup.py build      will build the package underneath 'build/'\n|   setup.py install    will install the package\n|\n| Global options:\n|   --verbose (-v)  run verbosely (default)\n|   --quiet (-q)    run quietly (turns verbosity off)\n|   --dry-run (-n)  don't actually do anything\n|   --help (-h)     show detailed help message\n|\n| Options for 'publish_wiki' command:\n|   --source (-s)  path to RST source.  if a python module, the top-most\n|                  docstring will be used as the source\n|\n| usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\n|    or: setup.py --help [cmd1 cmd2 ...]\n|    or: setup.py --help-commands\n|    or: setup.py cmd --help\n|\n</pre>\n</div>\n<div id=\"publishing-rst-to-wiki\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Publishing RST To Wiki</a></h3>\n<p>Here is an example of publishing a module\u2019s docstring written in RST format to Wiki format:</p>\n<pre>$ cd examples/basic\n$ cat ./akimbo/__init__.py\n| '''\n| Welcome To Akimbo\n| =================\n|\n| A Python module for akimbo'ing.\n|\n| This could live on `Google Code`_ if it wanted to.\n|\n| .. _Google Code: http://code.google.com/hosting/\n|\n| '''\n$ python setup.py publish_wiki --source=./akimbo/__init__.py\n| = Welcome To Akimbo =\n|\n| A Python module for akimbo'ing.\n|\n| This could live on [http://code.google.com/hosting/ Google Code] if it wanted to.\n|\n</pre>\n</div>\n<div id=\"using-custom-rst-directives\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Using Custom RST Directives</a></h3>\n<p>Wikir provides an entry_point in case you need to register a <a href=\"http://docutils.sourceforge.net/docs/howto/rst-directives.html\" rel=\"nofollow\">custom RST directive</a>.  Here is an example:</p>\n<pre>$ cd examples/custom_directives\n$ python setup.py -q develop\n$ cat setup.py\n| from setuptools import setup\n| setup(\n|     name = 'Foozilate',\n|     entry_points = {\n|         'wikir.rst_directives': [\n|             'foozilate = foozilate.directives:foozilate'\n|         ]\n|     },\n|     description = \"A mysterious package that aids in foozilation\")\n$ cat ./README.txt\n| This is the documentation for foozilate, which requires a custom directive called ``foozilate``.  All it does is wrap some tags around the input.\n|\n| .. foozilate::\n|     this should be foozilated\n$ python setup.py publish_wiki --source ./README.txt\n| This is the documentation for foozilate, which requires a custom directive called `foozilate`.  All it does is wrap some tags around the input.\n|\n| --foozilated-- this should be foozilated --foozilated--\n|\n$ python setup.py -q develop --uninstall\n</pre>\n<div>\n<p>Note</p>\n<p>You should avoid putting custom directives in a docstring if you want them to build with a standard docutils install.  For example, your RST docstrings may be parsed automatically by the <a href=\"http://pypi.python.org/pypi\" rel=\"nofollow\">The Cheeseshop</a> or another documentation generator, like <a href=\"http://codespeak.net/~mwh/pydoctor/\" rel=\"nofollow\">pydoctor</a>.</p>\n</div>\n<p>The left side of the entry_point defined the directive name and the right side specifies the path to the directive function.  This is registered with docutils before any RST is published.</p>\n</div>\n<div id=\"the-wikir-command\">\n<h3><a href=\"#id8\" rel=\"nofollow\">The wikir command</a></h3>\n<p>If you don\u2019t want to use wikir through setup.py you can use the command line script, <cite>wikir</cite>, which gets installed for you.</p>\n<p>Command usge:</p>\n<pre>$ wikir --help\n| Usage: wikir [options] path/to/module.py\n|        wikir [options] path/to/file.txt\n|\n| Publish RST documents in Wiki format\n|\n| 1. finds the top-most docstring of module.py, parses as RST, and prints Wiki format to STDOUT\n| 2. parses file.txt (or a file with any other extension) as RST and prints Wiki format to STDOUT\n|\n| Options:\n|   -h, --help  show this help message and exit\n</pre>\n<p>You can publish a module\u2019s docstring written in RST format to Wiki format like so:</p>\n<pre>$ cd examples/basic\n$ cat ./akimbo/__init__.py\n| '''\n| Welcome To Akimbo\n| =================\n|\n| A Python module for akimbo'ing.\n|\n| This could live on `Google Code`_ if it wanted to.\n|\n| .. _Google Code: http://code.google.com/hosting/\n|\n| '''\n$ wikir ./akimbo/__init__.py\n| = Welcome To Akimbo =\n|\n| A Python module for akimbo'ing.\n|\n| This could live on [http://code.google.com/hosting/ Google Code] if it wanted to.\n|\n</pre>\n<p>\u2026 and you can publish any document written in RST format to Wiki format like so:</p>\n<pre>$ cd examples/basic\n$ cat ./README.txt\n| ========================\n| Documentation for Akimbo\n| ========================\n|\n| .. contents:: :local:\n|\n| What is it?\n| ===========\n|\n| A Python module for akimbo'ing.\n|\n| Where does it live?\n| ===================\n|\n| Akimbo could live on `Google Code`_ if it wanted to.\n|\n| .. _Google Code: http://code.google.com/hosting/\n$ wikir ./README.txt\n| = Documentation for Akimbo =\n|\n|   * What is it?\n|   * Where does it live?\n|\n|\n| = What is it? =\n|\n| A Python module for akimbo'ing.\n|\n| = Where does it live? =\n|\n| Akimbo could live on [http://code.google.com/hosting/ Google Code] if it wanted to.\n|\n</pre>\n</div>\n</div>\n<div id=\"using-wikir-programatically\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Using Wikir Programatically</a></h2>\n<pre>&gt;&gt;&gt; from wikir import publish_string\n&gt;&gt;&gt; print publish_string('''\n... My RST Document\n... ===============\n...\n... For `Google Code`_!\n...\n... .. _Google Code: http://code.google.com/\n... ''')\n= My RST Document =\n&lt;BLANKLINE&gt;\nFor [http://code.google.com/ Google Code]!\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt;\n</pre>\n</div>\n<div id=\"credits\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Credits</a></h2>\n<p>This work is based on code I found while snooping around the <a href=\"http://python-nose.googlecode.com/svn/trunk/scripts/\" rel=\"nofollow\">nose repository</a> (Jason Pellerin), <a href=\"http://docutils.sourceforge.net/sandbox/ianb/wiki/Wiki.py\" rel=\"nofollow\">Ian Bicking\u2019s docutils sandbox</a>, and <a href=\"http://docutils.sourceforge.net/sandbox/mmgilbe/rst.py\" rel=\"nofollow\">Matthew Gilbert\u2019s docutils sandbox</a>.  Thanks to <a href=\"http://personalpages.tds.net/~kent37/\" rel=\"nofollow\">Kent S. Johnson</a> for additional help and feedback.</p>\n</div>\n<div id=\"project-home\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Project Home</a></h2>\n<p>If you\u2019re not there already, <a href=\"http://code.google.com/p/wikir/\" rel=\"nofollow\">wikir lives on Google Code</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 104195, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "97cea29dc91b697cedeadfa0e96a7cce", "sha256": "6468b1a5bfed8f9e1ccaf6134d6f9479465e58b63cb899ca04651351eeec5112"}, "downloads": -1, "filename": "wikir-0.1-py2.4.egg", "has_sig": true, "md5_digest": "97cea29dc91b697cedeadfa0e96a7cce", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 30399, "upload_time": "2007-12-21T06:49:48", "upload_time_iso_8601": "2007-12-21T06:49:48Z", "url": "https://files.pythonhosted.org/packages/d9/0e/49ffa896d89c54146cc914dd6e1c7e5352eb254f7d0f0cd754755ddac115/wikir-0.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd186dc1945b45131a9a5316f8dc41cf", "sha256": "b6e8978cc3cc4101a4bec46a787ea1b3220d6bff6078ba14d02acea281100029"}, "downloads": -1, "filename": "wikir-0.1.tar.gz", "has_sig": true, "md5_digest": "bd186dc1945b45131a9a5316f8dc41cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14207, "upload_time": "2007-12-21T06:49:47", "upload_time_iso_8601": "2007-12-21T06:49:47Z", "url": "https://files.pythonhosted.org/packages/74/e2/407dac6dce5e75c50f260ef56752abb87c5ae003cb782bbba9fb6c7b233d/wikir-0.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "762519e2c4f6d0428ff0b24d09e878f3", "sha256": "d3db5e331f087016abca292d272f1c690b71cfc3d77875bfc32bd2eefc61be79"}, "downloads": -1, "filename": "wikir-0.3-py2.4.egg", "has_sig": true, "md5_digest": "762519e2c4f6d0428ff0b24d09e878f3", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 32597, "upload_time": "2008-04-21T16:19:25", "upload_time_iso_8601": "2008-04-21T16:19:25Z", "url": "https://files.pythonhosted.org/packages/b4/f7/5c650a3b00357679b10102ce60f40a2e081034d386fe0396798e625ca392/wikir-0.3-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "874f1265e101af44c5b6b76a690313e4", "sha256": "431c469a34e2f1302b8f43e80eed60c13c8607087cb6b57bef26e4be62bfa869"}, "downloads": -1, "filename": "wikir-0.3-py2.5.egg", "has_sig": true, "md5_digest": "874f1265e101af44c5b6b76a690313e4", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 32391, "upload_time": "2008-04-21T16:19:39", "upload_time_iso_8601": "2008-04-21T16:19:39Z", "url": "https://files.pythonhosted.org/packages/30/12/a76a3a71cc0ec8eac0a9943e1256012850bd5b63457bf8de1ad906e3d187/wikir-0.3-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "06d2f177b75915e62895f26997ab2df7", "sha256": "10b109ee65e4a3860ff4ff4b9d51e49e7de9777c4e83671e2c076dda1f944399"}, "downloads": -1, "filename": "wikir-0.3.tar.gz", "has_sig": true, "md5_digest": "06d2f177b75915e62895f26997ab2df7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15800, "upload_time": "2008-04-21T16:19:26", "upload_time_iso_8601": "2008-04-21T16:19:26Z", "url": "https://files.pythonhosted.org/packages/dd/3a/365c47f43fc7261ce4166585da62ae1243352c79cff0eec49e1909d205c6/wikir-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "305c1b04c47c240e9920bda45bd8c1e6", "sha256": "6cd3c57678e4fc77fad7f06403e71250f616a6a7e20412b3dc1ad597bfc40d48"}, "downloads": -1, "filename": "wikir-0.4-py2.5.egg", "has_sig": true, "md5_digest": "305c1b04c47c240e9920bda45bd8c1e6", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 34267, "upload_time": "2009-05-15T17:49:04", "upload_time_iso_8601": "2009-05-15T17:49:04.228704Z", "url": "https://files.pythonhosted.org/packages/21/d2/ea1f02c040c0d026b0e27a91739d5f33c00190b2a822faa963a25495aca0/wikir-0.4-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1263d8ab497db2d14ddb9557e6eefa0", "sha256": "ce63f8076d0c8874b68d3cbcbea8aca64caec1620ae6b095611bf27e7f43001b"}, "downloads": -1, "filename": "wikir-0.4.tar.gz", "has_sig": true, "md5_digest": "b1263d8ab497db2d14ddb9557e6eefa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16196, "upload_time": "2009-05-15T17:49:02", "upload_time_iso_8601": "2009-05-15T17:49:02.733133Z", "url": "https://files.pythonhosted.org/packages/44/0b/cd43345cecac85e2fc93059814e260d287b2e179e5407a117b74499b26e0/wikir-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "e820d71ee17dfc73aa42e3b0ca750a31", "sha256": "28bcc0936ac414f5ea09ebbfe9a285fd4caf62c5a557ee0b07f04de34fa11489"}, "downloads": -1, "filename": "wikir-0.4.1-py2.5.egg", "has_sig": true, "md5_digest": "e820d71ee17dfc73aa42e3b0ca750a31", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 34433, "upload_time": "2009-05-15T18:01:47", "upload_time_iso_8601": "2009-05-15T18:01:47.862795Z", "url": "https://files.pythonhosted.org/packages/86/4f/82b21062f44f822815d6791743552701c3b158fb29848dbd6cece0556519/wikir-0.4.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4fa3305fea45f7a3bff8f1f26d4615c", "sha256": "8e246a3ad704cc302db1dc7c915511ec41d0fa75b5c87f7f1124ee79547abd63"}, "downloads": -1, "filename": "wikir-0.4.1.tar.gz", "has_sig": true, "md5_digest": "e4fa3305fea45f7a3bff8f1f26d4615c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16266, "upload_time": "2009-05-15T18:01:46", "upload_time_iso_8601": "2009-05-15T18:01:46.351103Z", "url": "https://files.pythonhosted.org/packages/05/7a/7ed24995ecc0ba28c843cc49bc9317fb01d77266633f14574d0f90f8da9a/wikir-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e820d71ee17dfc73aa42e3b0ca750a31", "sha256": "28bcc0936ac414f5ea09ebbfe9a285fd4caf62c5a557ee0b07f04de34fa11489"}, "downloads": -1, "filename": "wikir-0.4.1-py2.5.egg", "has_sig": true, "md5_digest": "e820d71ee17dfc73aa42e3b0ca750a31", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 34433, "upload_time": "2009-05-15T18:01:47", "upload_time_iso_8601": "2009-05-15T18:01:47.862795Z", "url": "https://files.pythonhosted.org/packages/86/4f/82b21062f44f822815d6791743552701c3b158fb29848dbd6cece0556519/wikir-0.4.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4fa3305fea45f7a3bff8f1f26d4615c", "sha256": "8e246a3ad704cc302db1dc7c915511ec41d0fa75b5c87f7f1124ee79547abd63"}, "downloads": -1, "filename": "wikir-0.4.1.tar.gz", "has_sig": true, "md5_digest": "e4fa3305fea45f7a3bff8f1f26d4615c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16266, "upload_time": "2009-05-15T18:01:46", "upload_time_iso_8601": "2009-05-15T18:01:46.351103Z", "url": "https://files.pythonhosted.org/packages/05/7a/7ed24995ecc0ba28c843cc49bc9317fb01d77266633f14574d0f90f8da9a/wikir-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:29:14 2020"}