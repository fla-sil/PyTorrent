{"info": {"author": "Sondre Lilleb\u00f8 Gundersen", "author_email": "sondrelg@live.no", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "License :: Other/Proprietary License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Documentation", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing", "Topic :: Software Development :: Testing :: Unit"], "description": "Django Swagger Tester\n=====================\n\n.. role:: python(code)\n   :language: python\n\n.. image:: https://img.shields.io/pypi/v/django-swagger-tester.svg\n    :target: https://pypi.org/project/django-swagger-tester/\n\n.. image:: https://img.shields.io/pypi/pyversions/django-swagger-tester.svg\n    :target: https://pypi.org/project/django-swagger-tester/\n\n.. image:: https://img.shields.io/pypi/djversions/django-swagger-tester.svg\n    :target: https://pypi.python.org/pypi/django-swagger-tester\n\n.. image:: https://readthedocs.org/projects/django-swagger-tester/badge/?version=latest\n    :target: https://django-swagger-tester.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://codecov.io/gh/sondrelg/django-swagger-tester/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/sondrelg/django-swagger-tester\n\n|\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://pypi.org/project/django-swagger-tester/\n\n.. image:: http://www.mypy-lang.org/static/mypy_badge.svg\n    :target: http://mypy-lang.org/\n    :alt: Checked with mypy\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white\n    :target: https://github.com/pre-commit/pre-commit\n\n--------------\n\n**Documentation**: `https://django-swagger-tester.readthedocs.io <https://django-swagger-tester.readthedocs.io/en/latest/?badge=latest>`_\n\n**Repository**: `https://github.com/sondrelg/django-swagger-tester <https://github.com/sondrelg/django-swagger-tester>`_\n\n--------------\n\n\n\nThis package is a simple test utility for your Django Swagger documentation.\n\nIts aim is to make it easy for developers to catch and correct documentation errors in their Swagger docs by\ncomparing documented responses to actual API responses, or validating documented request bodies using actual input serializers.\n\nFeatures\n--------\n\nThe package has three main features:\n\n-  `Testing response documentation`_\n\n-  `Testing input documentation`_\n\n-  `Ensuring your docs comply with a single parameter naming standard`_.\n\n   Supported naming standards include ``camelCase``, ``snake_case``,\n   ``kebab-case``, and ``PascalCase``.\n\n\nImplementations\n---------------\n\nWe currently support testing of:\n\n- Dynamically rendered Swagger docs, using `drf_yasg`_\n- All implementations which render Swagger docs from a schema file (yaml or json)\n\nIf you're using another method to generate your documentation and would like to use this package, feel free to add an issue, or create a PR. Adding a new implementation is as easy as adding the required logic needed to load the OpenAPI schema.\n\nInstallation\n============\n\nInstall using pip:\n\n.. code:: python\n\n   pip install django-swagger-tester\n\nConfiguration\n=============\n\nSettings\n--------\n\nTo use Django Swagger Settings in your project, your first need to add a ``SWAGGER_TESTER``\nobject to your ``settings.py``:\n\n.. code:: python\n\n   SWAGGER_TESTER = {\n       'CASE': 'camel case',\n       'PATH': BASE_DIR + '/openapi-schema.yml'  # not required for drf_yasg implementations\n   }\n\nParameters\n----------\n\n*CASE*\n~~~~~~\n\nThe parameter naming standard you wish to enforce for your documentation.\n\nNeeds to be one of the following:\n\n-  ``camel case``\n-  ``snake case``\n-  ``pascal case``\n-  ``kebab case``\n-  ``None``\n\nYour OpenAPI schema will be assessed to make sure all parameter names\nare correctly cased according to this preference. If you do not wish\nto enforce this check, you can specify ``None`` to skip this feature.\n\nExample:\n\n.. code:: python\n\n  SWAGGER_TESTER = {\n      'CASE': 'snake case',\n  }\n\n**Default**: ``camel case``\n\n*PATH*\n~~~~~~\n\nThe path to your OpenAPI specification.\n\nExample:\n\n.. code:: python\n\n  SWAGGER_TESTER = {\n      'PATH': BASE_DIR + '/openapi-schema.yml',\n  }\n\n*This setting is not required if your swagger docs are generated.*\n\n*CAMEL_CASE_PARSER*\n~~~~~~~~~~~~~~~~~~~\n\nShould be set to ``True`` if you use `djangorestframework-camel-case <https://github.com/vbabiy/djangorestframework-camel-case>`_'s\n``CamelCaseJSONParser`` or ``CamelCaseJSONRenderer`` for your API views.\n\nBy settings this to True, example values constructed in the ``validate_input`` function will be snake cased before it's passed\nto a serializer. See the `function docs <https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#the-validate-input-function>`_ for more info.\n\nExample:\n\n.. code:: python\n\n  SWAGGER_TESTER = {\n      'CAMEL_CASE_PARSER': True,\n  }\n\n\nResponse Validation\n===================\n\nTo verify that your API response documentation is correct, we test the\ngenerated documentation against actual API responses.\n\nA pytest implementation might look like this:\n\n.. code:: python\n\n   from django_swagger_tester.drf_yasg import validate_response  # or replace drf_yasg with `static_schema`\n\n\n   def test_response_documentation(client):\n       response = client.get('api/v1/test/')\n\n       assert response.status_code == 200\n       assert response.json() == expected_response\n\n       # Test Swagger documentation\n       validate_response(response=response, method='GET', route='api/v1/test/')\n\nA Django-test implementation might look like this:\n\n.. code:: python\n\n   class MyApiTest(APITestCase):\n\n       def setUp(self) -> None:\n           user, _ = User.objects.update_or_create(username='test_user')\n           self.client.force_authenticate(user=user)\n           self.path = '/api/v1/test/'\n\n       def test_get_200(self) -> None:\n           \"\"\"\n           Verifies that a 200 is returned for a valid GET request to the /test/ endpoint.\n           \"\"\"\n           response = self.client.get(self.path, headers={'Content-Type': 'application/json'})\n           expected_response = [...]\n\n           self.assertEqual(response.status_code, 200)\n           self.assertEqual(response.json(), expected_response)\n\n           # Test Swagger documentation\n           validate_response(response=response, method='GET', route=self.path)\n\nYou can also test more than a single response at the time:\n\n.. code:: python\n\n    def test_response_documentation(client):\n        # 201 - Resource created\n        response = client.post('api/v1/test/', data=...)\n        validate_response(response=response, method='POST', route='api/v1/test/')\n\n        # 200 - Idempotency --> if an object exists, return it with a 200 without creating a new resource\n        response = client.post('api/v1/test/', data=...)\n        validate_response(response=response, method='POST', route='api/v1/test/')\n\n        # 400 - Bad data\n        response = client.post('api/v1/test/', data=bad_data)\n        validate_response(response=response, method='POST', route='api/v1/test/')\n\nInput Validation\n================\n\nTo make sure your request body documentation is accurate, and will stay accurate, it can be useful to set up tests.\n\nConsidering most APIs will use input serializers for input validation, it seems sensible to just run the\nexample documentation on your serializer.\n\nA pytest implementation of input validation might look like this::\n\n    from myapp.api.serializers import MyAPISerializer  # <-- your custom serializer\n\n\n    def test_request_body_documentation(client):\n        \"\"\"\n        Verifies that our request body documentation is representative of a valid request body.\n        \"\"\"\n        from django_swagger_tester.drf_yasg import validate_input  # or replace drf_yasg with `static_schema`\n        validate_input(serializer=MyAPISerializer, method='POST', route='api/v1/test/', camel_case_parser=True)\n\n\nThe ``camel_case_parser`` argument should be set to ``True`` if you are using ``CamelCaseJSONParser`` or ``CamelCaseJSONRenderer``\nfrom the `djangorestframework-camel-case <https://github.com/vbabiy/djangorestframework-camel-case>`_ package.\n\n.. _`https://django-swagger-tester.readthedocs.io/`: https://django-swagger-tester.readthedocs.io/en/latest/?badge=latest\n.. _Testing response documentation: https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#response-validation\n.. _Testing input documentation: https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#input-validation\n.. _Ensuring your docs comply with a single parameter naming standard: https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#case-checking\n.. _drf_yasg: https://github.com/axnsan12/drf-yasg\n.. _documentation: https://django-swagger-tester.readthedocs.io/\n.. _docs: https://django-swagger-tester.readthedocs.io/\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sondrelg/django-swagger-tester", "keywords": "openapi,swagger,api,testing,django", "license": "BSD-4-Clause", "maintainer": "", "maintainer_email": "", "name": "django-swagger-tester", "package_url": "https://pypi.org/project/django-swagger-tester/", "platform": "", "project_url": "https://pypi.org/project/django-swagger-tester/", "project_urls": {"Documentation": "https://django-swagger-tester.readthedocs.io/en/latest/", "Homepage": "https://github.com/sondrelg/django-swagger-tester", "Repository": "https://github.com/sondrelg/django-swagger-tester"}, "release_url": "https://pypi.org/project/django-swagger-tester/1.0.2/", "requires_dist": ["djangorestframework", "django (>=2.2,<4.0)"], "requires_python": ">=3.6,<4.0", "summary": "Django test utility for validating Swagger documentation", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-swagger-tester\">\n<h2>Django Swagger Tester</h2>\n<a href=\"https://pypi.org/project/django-swagger-tester/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-swagger-tester.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e95c4db362f7548f72787faf662f376fd5cb6c16/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d737761676765722d7465737465722e737667\"></a>\n<a href=\"https://pypi.org/project/django-swagger-tester/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/django-swagger-tester.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d569f577827584b634b23f8c4296d21618f68fa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d737761676765722d7465737465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-swagger-tester\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/djversions/django-swagger-tester.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e509542d5ef8da827cf4055ba7d9535e0f1fc3ab/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646a76657273696f6e732f646a616e676f2d737761676765722d7465737465722e737667\"></a>\n<a href=\"https://django-swagger-tester.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9af3dae816f2c015edc2c7402d8405de53efecb/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646a616e676f2d737761676765722d7465737465722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://codecov.io/gh/sondrelg/django-swagger-tester\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/sondrelg/django-swagger-tester/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b39f5f357c101ef5ea893e6b123565dfe4b8b13e/68747470733a2f2f636f6465636f762e696f2f67682f736f6e6472656c672f646a616e676f2d737761676765722d7465737465722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<div>\n<div><br></div>\n</div>\n<a href=\"https://pypi.org/project/django-swagger-tester/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"http://mypy-lang.org/\" rel=\"nofollow\"><img alt=\"Checked with mypy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0db8f5dcbf5f340f278004d5db3d16b4cdf33ba/687474703a2f2f7777772e6d7970792d6c616e672e6f72672f7374617469632f6d7970795f62616467652e737667\"></a>\n<a href=\"https://github.com/pre-commit/pre-commit\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d861174d9af84b80d393b2e7c89badabc5e04097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7072652d2d636f6d6d69742d656e61626c65642d627269676874677265656e3f6c6f676f3d7072652d636f6d6d6974266c6f676f436f6c6f723d7768697465\"></a>\n<hr class=\"docutils\">\n<p><strong>Documentation</strong>: <a href=\"https://django-swagger-tester.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\">https://django-swagger-tester.readthedocs.io</a></p>\n<p><strong>Repository</strong>: <a href=\"https://github.com/sondrelg/django-swagger-tester\" rel=\"nofollow\">https://github.com/sondrelg/django-swagger-tester</a></p>\n<hr class=\"docutils\">\n<p>This package is a simple test utility for your Django Swagger documentation.</p>\n<p>Its aim is to make it easy for developers to catch and correct documentation errors in their Swagger docs by\ncomparing documented responses to actual API responses, or validating documented request bodies using actual input serializers.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<p>The package has three main features:</p>\n<ul>\n<li><p><a href=\"https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#response-validation\" rel=\"nofollow\">Testing response documentation</a></p>\n</li>\n<li><p><a href=\"https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#input-validation\" rel=\"nofollow\">Testing input documentation</a></p>\n</li>\n<li><p><a href=\"https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#case-checking\" rel=\"nofollow\">Ensuring your docs comply with a single parameter naming standard</a>.</p>\n<p>Supported naming standards include <tt>camelCase</tt>, <tt>snake_case</tt>,\n<tt><span class=\"pre\">kebab-case</span></tt>, and <tt>PascalCase</tt>.</p>\n</li>\n</ul>\n</div>\n<div id=\"implementations\">\n<h3>Implementations</h3>\n<p>We currently support testing of:</p>\n<ul>\n<li>Dynamically rendered Swagger docs, using <a href=\"https://github.com/axnsan12/drf-yasg\" rel=\"nofollow\">drf_yasg</a></li>\n<li>All implementations which render Swagger docs from a schema file (yaml or json)</li>\n</ul>\n<p>If you\u2019re using another method to generate your documentation and would like to use this package, feel free to add an issue, or create a PR. Adding a new implementation is as easy as adding the required logic needed to load the OpenAPI schema.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using pip:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">django</span><span class=\"o\">-</span><span class=\"n\">swagger</span><span class=\"o\">-</span><span class=\"n\">tester</span>\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"settings\">\n<h3>Settings</h3>\n<p>To use Django Swagger Settings in your project, your first need to add a <tt>SWAGGER_TESTER</tt>\nobject to your <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">SWAGGER_TESTER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'CASE'</span><span class=\"p\">:</span> <span class=\"s1\">'camel case'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'PATH'</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">+</span> <span class=\"s1\">'/openapi-schema.yml'</span>  <span class=\"c1\"># not required for drf_yasg implementations</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"parameters\">\n<h3>Parameters</h3>\n<div id=\"case\">\n<h4><em>CASE</em></h4>\n<p>The parameter naming standard you wish to enforce for your documentation.</p>\n<p>Needs to be one of the following:</p>\n<ul>\n<li><tt>camel case</tt></li>\n<li><tt>snake case</tt></li>\n<li><tt>pascal case</tt></li>\n<li><tt>kebab case</tt></li>\n<li><tt>None</tt></li>\n</ul>\n<p>Your OpenAPI schema will be assessed to make sure all parameter names\nare correctly cased according to this preference. If you do not wish\nto enforce this check, you can specify <tt>None</tt> to skip this feature.</p>\n<p>Example:</p>\n<pre><span class=\"n\">SWAGGER_TESTER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'CASE'</span><span class=\"p\">:</span> <span class=\"s1\">'snake case'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Default</strong>: <tt>camel case</tt></p>\n</div>\n<div id=\"path\">\n<h4><em>PATH</em></h4>\n<p>The path to your OpenAPI specification.</p>\n<p>Example:</p>\n<pre><span class=\"n\">SWAGGER_TESTER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'PATH'</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">+</span> <span class=\"s1\">'/openapi-schema.yml'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p><em>This setting is not required if your swagger docs are generated.</em></p>\n</div>\n<div id=\"camel-case-parser\">\n<h4><em>CAMEL_CASE_PARSER</em></h4>\n<p>Should be set to <tt>True</tt> if you use <a href=\"https://github.com/vbabiy/djangorestframework-camel-case\" rel=\"nofollow\">djangorestframework-camel-case</a>\u2019s\n<tt>CamelCaseJSONParser</tt> or <tt>CamelCaseJSONRenderer</tt> for your API views.</p>\n<p>By settings this to True, example values constructed in the <tt>validate_input</tt> function will be snake cased before it\u2019s passed\nto a serializer. See the <a href=\"https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#the-validate-input-function\" rel=\"nofollow\">function docs</a> for more info.</p>\n<p>Example:</p>\n<pre><span class=\"n\">SWAGGER_TESTER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'CAMEL_CASE_PARSER'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"response-validation\">\n<h2>Response Validation</h2>\n<p>To verify that your API response documentation is correct, we test the\ngenerated documentation against actual API responses.</p>\n<p>A pytest implementation might look like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_swagger_tester.drf_yasg</span> <span class=\"kn\">import</span> <span class=\"n\">validate_response</span>  <span class=\"c1\"># or replace drf_yasg with `static_schema`</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_response_documentation</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'api/v1/test/'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">expected_response</span>\n\n    <span class=\"c1\"># Test Swagger documentation</span>\n    <span class=\"n\">validate_response</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s1\">'api/v1/test/'</span><span class=\"p\">)</span>\n</pre>\n<p>A Django-test implementation might look like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyApiTest</span><span class=\"p\">(</span><span class=\"n\">APITestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update_or_create</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'test_user'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">force_authenticate</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/v1/test/'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_get_200</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"\n        Verifies that a 200 is returned for a valid GET request to the /test/ endpoint.\n        \"\"\"</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">})</span>\n        <span class=\"n\">expected_response</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(),</span> <span class=\"n\">expected_response</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Test Swagger documentation</span>\n        <span class=\"n\">validate_response</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<p>You can also test more than a single response at the time:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_response_documentation</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 201 - Resource created</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'api/v1/test/'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=...</span><span class=\"p\">)</span>\n    <span class=\"n\">validate_response</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s1\">'api/v1/test/'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 200 - Idempotency --&gt; if an object exists, return it with a 200 without creating a new resource</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'api/v1/test/'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=...</span><span class=\"p\">)</span>\n    <span class=\"n\">validate_response</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s1\">'api/v1/test/'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 400 - Bad data</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'api/v1/test/'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">bad_data</span><span class=\"p\">)</span>\n    <span class=\"n\">validate_response</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s1\">'api/v1/test/'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"input-validation\">\n<h2>Input Validation</h2>\n<p>To make sure your request body documentation is accurate, and will stay accurate, it can be useful to set up tests.</p>\n<p>Considering most APIs will use input serializers for input validation, it seems sensible to just run the\nexample documentation on your serializer.</p>\n<p>A pytest implementation of input validation might look like this:</p>\n<pre>from myapp.api.serializers import MyAPISerializer  # &lt;-- your custom serializer\n\n\ndef test_request_body_documentation(client):\n    \"\"\"\n    Verifies that our request body documentation is representative of a valid request body.\n    \"\"\"\n    from django_swagger_tester.drf_yasg import validate_input  # or replace drf_yasg with `static_schema`\n    validate_input(serializer=MyAPISerializer, method='POST', route='api/v1/test/', camel_case_parser=True)\n</pre>\n<p>The <tt>camel_case_parser</tt> argument should be set to <tt>True</tt> if you are using <tt>CamelCaseJSONParser</tt> or <tt>CamelCaseJSONRenderer</tt>\nfrom the <a href=\"https://github.com/vbabiy/djangorestframework-camel-case\" rel=\"nofollow\">djangorestframework-camel-case</a> package.</p>\n</div>\n\n          </div>"}, "last_serial": 7092154, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a92daaad6730f78ac9b5a47ab3152a5d", "sha256": "996c0ad88bb3a68daed65b8dea6f8306af93a4e4b77041d61193d4efe24fde48"}, "downloads": -1, "filename": "django_swagger_tester-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a92daaad6730f78ac9b5a47ab3152a5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32007, "upload_time": "2020-03-09T21:44:52", "upload_time_iso_8601": "2020-03-09T21:44:52.779686Z", "url": "https://files.pythonhosted.org/packages/09/8d/175578b941efe0840d25d263d3acc053a124db1ce4dcee0f3b31f877cea3/django_swagger_tester-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa0d2369b8c09a6c265ce538b3fa5d37", "sha256": "c75366ece12d6b0162bfa08b57f992ef4a0bd112cf2f669cb3714ae53ef950cf"}, "downloads": -1, "filename": "django-swagger-tester-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fa0d2369b8c09a6c265ce538b3fa5d37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21040, "upload_time": "2020-03-09T21:44:55", "upload_time_iso_8601": "2020-03-09T21:44:55.139405Z", "url": "https://files.pythonhosted.org/packages/da/16/cc347a16e670fab80e177a00b74d13c2a42d22a1413172b20fe5dbb3545e/django-swagger-tester-0.1.0.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "fc99c348f5ea2acabf14ded04bf22d06", "sha256": "95d23ef5510a1cdd02482377e6d8943f9197be798359cc914179c7cbf14d419b"}, "downloads": -1, "filename": "django_swagger_tester-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fc99c348f5ea2acabf14ded04bf22d06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 17904, "upload_time": "2020-04-05T18:48:09", "upload_time_iso_8601": "2020-04-05T18:48:09.350435Z", "url": "https://files.pythonhosted.org/packages/90/d4/549776d8058dbc8cf3143c577d51ab2db1c691b513aea9b436d831e312b0/django_swagger_tester-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e816a6f504ce1bc7c6239022994ac5a", "sha256": "0660709152111f75ebd701d62c2303ee0669e72d4a0d1a88765805ef1c057bba"}, "downloads": -1, "filename": "django-swagger-tester-0.2.3.tar.gz", "has_sig": false, "md5_digest": "1e816a6f504ce1bc7c6239022994ac5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 16698, "upload_time": "2020-04-05T18:48:08", "upload_time_iso_8601": "2020-04-05T18:48:08.040192Z", "url": "https://files.pythonhosted.org/packages/2b/19/2a34fa22355dbcee54c21770fdc49086578484be8e7d338234beab7ed022/django-swagger-tester-0.2.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "c04791b9667f987ee21603667b19a00c", "sha256": "ef8b55a198ee3fbbc80fb0e5c788f7d4c05589fd21c82ab025f422dbfddbb5e7"}, "downloads": -1, "filename": "django_swagger_tester-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c04791b9667f987ee21603667b19a00c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 26405, "upload_time": "2020-04-20T20:49:11", "upload_time_iso_8601": "2020-04-20T20:49:11.237759Z", "url": "https://files.pythonhosted.org/packages/cc/0a/c969bc53c8b13de8411d1c29d1cd3966dd1f56beee8d29b9f51890b0d953/django_swagger_tester-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "269f9f447705d71bd933e1c1ab573579", "sha256": "d824284f7bd66bdd0af804654428568b997c4f81de679e0a220f6fcfac74d0c2"}, "downloads": -1, "filename": "django-swagger-tester-1.0.0.tar.gz", "has_sig": false, "md5_digest": "269f9f447705d71bd933e1c1ab573579", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 19389, "upload_time": "2020-04-20T20:49:10", "upload_time_iso_8601": "2020-04-20T20:49:10.004968Z", "url": "https://files.pythonhosted.org/packages/ee/75/158ecaae508c00361745c6489da2b3cc312f0d95d312aeb5f4b9ccd4e0f6/django-swagger-tester-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "3326a65271ce6ea674f5b837f1b727d2", "sha256": "cb1c33985890b635d188623fb344ffed32a89a2b1a71630b0289a994962794a2"}, "downloads": -1, "filename": "django_swagger_tester-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3326a65271ce6ea674f5b837f1b727d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 26798, "upload_time": "2020-04-21T09:46:27", "upload_time_iso_8601": "2020-04-21T09:46:27.801568Z", "url": "https://files.pythonhosted.org/packages/37/81/4c50472da35fd5ee5c4b6f03cfd0c75d35fc0086e8c91110433912e0df16/django_swagger_tester-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b29cb782a0f0042f24de976a00b4d31", "sha256": "be7b026e1afb92b484248ed8fbc0e62d24776b87cbe7abdcb41696d32fcfa3a0"}, "downloads": -1, "filename": "django-swagger-tester-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2b29cb782a0f0042f24de976a00b4d31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 19707, "upload_time": "2020-04-21T09:46:26", "upload_time_iso_8601": "2020-04-21T09:46:26.431597Z", "url": "https://files.pythonhosted.org/packages/86/01/28e37561e3e16ace55d49d32b93d7981b64a79f1a4f9956a64a490a83373/django-swagger-tester-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "74f8c72d0ad608ff606dd3c902152f74", "sha256": "ac18616bbc65380597ab2df96e2fc4e85f0137b796c11e3c086cf568bc598948"}, "downloads": -1, "filename": "django_swagger_tester-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "74f8c72d0ad608ff606dd3c902152f74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 27736, "upload_time": "2020-04-24T12:07:16", "upload_time_iso_8601": "2020-04-24T12:07:16.018883Z", "url": "https://files.pythonhosted.org/packages/b2/80/76e7493336bb94df7ec4bbae16fbac84654cdd4f4edbfe154cfcaccc2bb9/django_swagger_tester-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1389545cc57a9c6040e9bbe3d69c913f", "sha256": "2aa74c2836032429d5fccfd2f195abed6cb71c82a6bc335d5c4becff45e94e43"}, "downloads": -1, "filename": "django-swagger-tester-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1389545cc57a9c6040e9bbe3d69c913f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 20620, "upload_time": "2020-04-24T12:07:14", "upload_time_iso_8601": "2020-04-24T12:07:14.527433Z", "url": "https://files.pythonhosted.org/packages/f7/61/7d488dfa55773d7d5a57213ead13ffa85f38368261391783305d49aecbfa/django-swagger-tester-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74f8c72d0ad608ff606dd3c902152f74", "sha256": "ac18616bbc65380597ab2df96e2fc4e85f0137b796c11e3c086cf568bc598948"}, "downloads": -1, "filename": "django_swagger_tester-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "74f8c72d0ad608ff606dd3c902152f74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 27736, "upload_time": "2020-04-24T12:07:16", "upload_time_iso_8601": "2020-04-24T12:07:16.018883Z", "url": "https://files.pythonhosted.org/packages/b2/80/76e7493336bb94df7ec4bbae16fbac84654cdd4f4edbfe154cfcaccc2bb9/django_swagger_tester-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1389545cc57a9c6040e9bbe3d69c913f", "sha256": "2aa74c2836032429d5fccfd2f195abed6cb71c82a6bc335d5c4becff45e94e43"}, "downloads": -1, "filename": "django-swagger-tester-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1389545cc57a9c6040e9bbe3d69c913f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 20620, "upload_time": "2020-04-24T12:07:14", "upload_time_iso_8601": "2020-04-24T12:07:14.527433Z", "url": "https://files.pythonhosted.org/packages/f7/61/7d488dfa55773d7d5a57213ead13ffa85f38368261391783305d49aecbfa/django-swagger-tester-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:47 2020"}