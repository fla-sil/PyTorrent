{"info": {"author": "enfold", "author_email": "info@enfoldsystems.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 5.0", "Framework :: Plone :: 5.1", "Framework :: Plone :: 5.2", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7"], "description": "Introduction\n============\n\nThe package allows you to notify users of actions or action requests for\nsite content and actions.\n\n\nInstallation\n============\n\nDownload the package from GitHub and extract into your src directory.\nAdd 'collective.notifications' to your eggs and zcml slugs in buildout.\nInclude the location (src/collective.notifications) in development slugs too.\nRun buildout\n\nIn Site Setup -> Add-ons, activate Notifications.\nOnce it is installed you will see \"Notifications\" under Add-on Configuration.\nThis is where you can see and manage site notifications. There is also a\nlink here to a form that allows admins to send notifications.\n\n\nSending Notifications\n=====================\n\nTo send notifications from code, use NotificationRequestedEvent. Send the\nevent notification from the place in your code where it is required, using\ncode similar to this:\n\n::\n\n    from zope.event import notify\n    from collective.notification.interfaces import NotificationRequestedEvent\n    notify(NotificationRequestedEvent(context,\n                                      note,\n                                      recipients,\n                                      user=user_id,\n                                      url=action_url,\n                                      external='email',\n                                      email_body=email_body,\n                                      email_subject=email_subject,\n                                      email_content_type=content_type,\n                                      first_read=False))\n\nThe `context` is the affected object. `note` is a plain text string with the\ndescription of the action that is being notified or needs to be performed;\n`recipients` is a list of user ids of all the users that will be notified,\nit allows the use of group ids with the prefix \"group\", so for example\n['group:Reviewers', 'group:Staff', 'jsmith', 'jdoe'] would send the\nnotification to all users of the groups reviewers and staff, as well as to\nindividual users jsmith and jdoe. The special group \"Members\" will notify\nall portal users.\n\nThe last seven parameters are optional: `user` can be the userid of the user\nassociated with the notification. This is just in case we need a different\nuser than the currently logged in user, which is the default. `url` will be\nused as a site action if provided, otherwise the context url will be used.\n`external` refers to external notification services (see below). Currently,\nthe only service included is 'email'. The parameter can be a list, in which\ncase the notification is sent using all the listed services. Default is None,\nso no external notifications will be sent if this parameter is omitted.\nFinally, `first_read`, if True, marks the notification as read for all\nrecipients after one user reads it. This can be used to send a notification\nto a group where multiple users can take action, but can safely ignore the\nnotification once someone reads it. Default is False. `email_body` is text for\nthe body of the email sent by the 'email' external service. `note` will be used\nif `email_body` is not set. `email_body` should be either html or plain text.\n`email_content_type` should be 'text/html' if `email_body` is html.\n`email_subject` text for the subject of the email sent by the 'email' external\nservice.\n\n\nExternal Notification Services\n==============================\n\nCollective.notifications allowseasy integration with external notification\nservices. Use the IExternalNotificationService interface for this. If a\nclass implements this interface and it has a `send` method, it can be used\nas a service and included in the `external` parameter when sending a\nnotification.\n\nExample:\n\n::\n\n    from zope.interface import implements\n    from collective.notification.interfaces import IExternalNotificationService\n\n    class TwitterNotifier(object):\n        implements(IExternalNotificationService)\n\n        def send(self, notification):\n            # send the tweet\n            ...\n\nThis requires configuring the service as un utility in configure.zcml:\n\n::\n\n    <utility\n      provides=\"collective.notifications.interfaces.IExternalNotificationService\"\n      factory=\".external.TwitterNotifier\"\n      name=\"twitter\"\n    />\n\n\nAsync and Celery\n================\n\nNotifications attempts to use plone.app.async to perform the notifications,\nbut if that fails it will finish the task directly.\nThe advantage of this is to allow an individual 'worker' client\nto run Async and handle all of these request.\nIf there is a lot of activity it will not get backed up.\nAsync queues the job up and handles it as it can\nwhile the users request finishes and moves on\navoiding sacrifices in performance.\nRefer to the collective.async pypi page\nfor instructions on setting it up if you use it.\nAsync is NOT required for Notifications to work,\nhowever it is advised, especially for high traffic sites.\n\n\nNote\n====\n\nFor inserting the number of pending notifications, the \"toolbar.pt\" template\nfrom plone.app.layout was overridden using z3c.jbot. Keep this in mind if\nyour project has its own modifications for this template.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/", "keywords": "Plone Notifications", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "collective.notifications", "package_url": "https://pypi.org/project/collective.notifications/", "platform": "", "project_url": "https://pypi.org/project/collective.notifications/", "project_urls": {"Homepage": "http://svn.plone.org/svn/collective/"}, "release_url": "https://pypi.org/project/collective.notifications/1.2/", "requires_dist": null, "requires_python": "", "summary": "Provides notifications for users.", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The package allows you to notify users of actions or action requests for\nsite content and actions.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Download the package from GitHub and extract into your src directory.\nAdd \u2018collective.notifications\u2019 to your eggs and zcml slugs in buildout.\nInclude the location (src/collective.notifications) in development slugs too.\nRun buildout</p>\n<p>In Site Setup -&gt; Add-ons, activate Notifications.\nOnce it is installed you will see \u201cNotifications\u201d under Add-on Configuration.\nThis is where you can see and manage site notifications. There is also a\nlink here to a form that allows admins to send notifications.</p>\n</div>\n<div id=\"sending-notifications\">\n<h2>Sending Notifications</h2>\n<p>To send notifications from code, use NotificationRequestedEvent. Send the\nevent notification from the place in your code where it is required, using\ncode similar to this:</p>\n<pre>from zope.event import notify\nfrom collective.notification.interfaces import NotificationRequestedEvent\nnotify(NotificationRequestedEvent(context,\n                                  note,\n                                  recipients,\n                                  user=user_id,\n                                  url=action_url,\n                                  external='email',\n                                  email_body=email_body,\n                                  email_subject=email_subject,\n                                  email_content_type=content_type,\n                                  first_read=False))\n</pre>\n<p>The <cite>context</cite> is the affected object. <cite>note</cite> is a plain text string with the\ndescription of the action that is being notified or needs to be performed;\n<cite>recipients</cite> is a list of user ids of all the users that will be notified,\nit allows the use of group ids with the prefix \u201cgroup\u201d, so for example\n[\u2018group:Reviewers\u2019, \u2018group:Staff\u2019, \u2018jsmith\u2019, \u2018jdoe\u2019] would send the\nnotification to all users of the groups reviewers and staff, as well as to\nindividual users jsmith and jdoe. The special group \u201cMembers\u201d will notify\nall portal users.</p>\n<p>The last seven parameters are optional: <cite>user</cite> can be the userid of the user\nassociated with the notification. This is just in case we need a different\nuser than the currently logged in user, which is the default. <cite>url</cite> will be\nused as a site action if provided, otherwise the context url will be used.\n<cite>external</cite> refers to external notification services (see below). Currently,\nthe only service included is \u2018email\u2019. The parameter can be a list, in which\ncase the notification is sent using all the listed services. Default is None,\nso no external notifications will be sent if this parameter is omitted.\nFinally, <cite>first_read</cite>, if True, marks the notification as read for all\nrecipients after one user reads it. This can be used to send a notification\nto a group where multiple users can take action, but can safely ignore the\nnotification once someone reads it. Default is False. <cite>email_body</cite> is text for\nthe body of the email sent by the \u2018email\u2019 external service. <cite>note</cite> will be used\nif <cite>email_body</cite> is not set. <cite>email_body</cite> should be either html or plain text.\n<cite>email_content_type</cite> should be \u2018text/html\u2019 if <cite>email_body</cite> is html.\n<cite>email_subject</cite> text for the subject of the email sent by the \u2018email\u2019 external\nservice.</p>\n</div>\n<div id=\"external-notification-services\">\n<h2>External Notification Services</h2>\n<p>Collective.notifications allowseasy integration with external notification\nservices. Use the IExternalNotificationService interface for this. If a\nclass implements this interface and it has a <cite>send</cite> method, it can be used\nas a service and included in the <cite>external</cite> parameter when sending a\nnotification.</p>\n<p>Example:</p>\n<pre>from zope.interface import implements\nfrom collective.notification.interfaces import IExternalNotificationService\n\nclass TwitterNotifier(object):\n    implements(IExternalNotificationService)\n\n    def send(self, notification):\n        # send the tweet\n        ...\n</pre>\n<p>This requires configuring the service as un utility in configure.zcml:</p>\n<pre>&lt;utility\n  provides=\"collective.notifications.interfaces.IExternalNotificationService\"\n  factory=\".external.TwitterNotifier\"\n  name=\"twitter\"\n/&gt;\n</pre>\n</div>\n<div id=\"async-and-celery\">\n<h2>Async and Celery</h2>\n<p>Notifications attempts to use plone.app.async to perform the notifications,\nbut if that fails it will finish the task directly.\nThe advantage of this is to allow an individual \u2018worker\u2019 client\nto run Async and handle all of these request.\nIf there is a lot of activity it will not get backed up.\nAsync queues the job up and handles it as it can\nwhile the users request finishes and moves on\navoiding sacrifices in performance.\nRefer to the collective.async pypi page\nfor instructions on setting it up if you use it.\nAsync is NOT required for Notifications to work,\nhowever it is advised, especially for high traffic sites.</p>\n</div>\n<div id=\"note\">\n<h2>Note</h2>\n<p>For inserting the number of pending notifications, the \u201ctoolbar.pt\u201d template\nfrom plone.app.layout was overridden using z3c.jbot. Keep this in mind if\nyour project has its own modifications for this template.</p>\n</div>\n\n          </div>"}, "last_serial": 6409602, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "466de7cd69b4c9913cd4330b08771370", "sha256": "f34673a874189b58b8ef3000b804f3b9f1df838963b8d543ba9d0a2fb9d114f7"}, "downloads": -1, "filename": "collective.notifications-1.0.zip", "has_sig": false, "md5_digest": "466de7cd69b4c9913cd4330b08771370", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32539, "upload_time": "2019-12-10T15:40:33", "upload_time_iso_8601": "2019-12-10T15:40:33.583297Z", "url": "https://files.pythonhosted.org/packages/2b/24/f54ea9d3b55c334f712f367943efe75ab6945e6100cfb8eb95ea0827761a/collective.notifications-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "8726ee2d72903a53afd166da85b6cb15", "sha256": "4c3c55f7486b8fecca4f262e4bb868e8435c0080cad51689ebe2943d1131cbbe"}, "downloads": -1, "filename": "collective.notifications-1.1.zip", "has_sig": false, "md5_digest": "8726ee2d72903a53afd166da85b6cb15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32578, "upload_time": "2019-12-30T22:46:54", "upload_time_iso_8601": "2019-12-30T22:46:54.316905Z", "url": "https://files.pythonhosted.org/packages/d6/e8/f47fe6ac7efd5b8767f6ead5d03e01a1ed6968376730a6f22cef13b21d1f/collective.notifications-1.1.zip", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "49df7482cffd2588d59b6cade7a1b232", "sha256": "437579301b53a25c25ade990c4aeadc0be1d264a5fcf908e9c439403a6401eba"}, "downloads": -1, "filename": "collective.notifications-1.2.zip", "has_sig": false, "md5_digest": "49df7482cffd2588d59b6cade7a1b232", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32638, "upload_time": "2020-01-07T16:55:19", "upload_time_iso_8601": "2020-01-07T16:55:19.813949Z", "url": "https://files.pythonhosted.org/packages/61/04/570150dfb440e2f9df913e477c561c8c0c3677c4ad077caaa385d197ee05/collective.notifications-1.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49df7482cffd2588d59b6cade7a1b232", "sha256": "437579301b53a25c25ade990c4aeadc0be1d264a5fcf908e9c439403a6401eba"}, "downloads": -1, "filename": "collective.notifications-1.2.zip", "has_sig": false, "md5_digest": "49df7482cffd2588d59b6cade7a1b232", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32638, "upload_time": "2020-01-07T16:55:19", "upload_time_iso_8601": "2020-01-07T16:55:19.813949Z", "url": "https://files.pythonhosted.org/packages/61/04/570150dfb440e2f9df913e477c561c8c0c3677c4ad077caaa385d197ee05/collective.notifications-1.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:45:05 2020"}