{"info": {"author": "Terence Zhi Liu", "author_email": "zhi.liu@utoledo.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Physics"], "description": "pydass\\_vasp (or, badass wasp)\n==============================\n\nConvenient Python modules and wrapping script executables.\n\nExample: plotting band structure\n''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    pydass_vasp.plotting.plot_bs(axis_range=[-4,6])\n\n.. figure:: http://terencezl.github.io/pydass_vasp/public/imgs/band_structure.png\n   :alt: band\\_structure\n\nReturned dictionary:\n\n.. code:: python\n\n    {'data': {'columns': ['k_points', \n                  'band_1', 'band_2', 'band_3', 'band_4', 'band_5', 'band_6', 'band_7', 'band_8', \n                  'band_9', 'band_10', 'band_11', 'band_12', 'band_13', 'band_14', 'band_15', 'band_16', \n                  'band_17', 'band_18', 'band_19', 'band_20', 'band_21', 'band_22', 'band_23', 'band_24', \n                  'band_25', 'band_26', 'band_27', 'band_28', 'band_29', 'band_30', 'band_31', 'band_32'],\n              'data': array(\n                [[  0.        , -20.342219  , -16.616756  , ...,   5.849101  ,\n                    5.855091  ,   6.074841  ],\n                 [  0.04558028, -20.342181  , -16.616823  , ...,   5.811826  ,\n                    5.815311  ,   6.060851  ],\n                 [  0.09116057, -20.34223   , -16.617067  , ...,   5.730248  ,\n                    5.734556  ,   5.80481   ],\n                 ..., \n                 [  2.49869989, -20.343194  , -16.628521  , ...,   5.172637  ,\n                    5.204402  ,   5.711173  ],\n                 [  2.53591604, -20.343228  , -16.6286    , ...,   5.219897  ,\n                    5.226956  ,   5.730676  ],\n                 [  2.57313218, -20.34319   , -16.628622  , ...,   5.234177  ,\n                    5.234205  ,   5.726715  ]])},\n     'reciprocal_point_locations': array([ 0.        ,  0.8660254 ,  1.3660254 ,  1.8660254 ,  2.57313218]),\n     'reciprocal_points': ['R', 'G', 'X', 'M', 'G']}\n\nExample: plotting total density of states with spin polarization\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    pydass_vasp.plotting.plot_tdos(axis_range=[-15, 15, 0, 40], return_refs=True)\n\n.. figure:: http://terencezl.github.io/pydass_vasp/public/imgs/dos_combined.png\n   :alt: dos\\_combined\n\n.. figure:: http://terencezl.github.io/pydass_vasp/public/imgs/dos_overlapping.png\n   :alt: dos\\_overlapping\n\nReturned dictionary:\n\n.. code:: python\n\n    {'ax_spin_combined': <matplotlib.axes._subplots.AxesSubplot at 0x108b95110>,\n     'ax_spin_overlapping': <matplotlib.axes._subplots.AxesSubplot at 0x10b0f5fd0>,\n     'data_spin_down': {'columns': ['E', 'total_down', 'integrated_down'],\n      'data': array([[-22.63140452,   0.        ,   0.        ],\n                     [-22.60640452,   0.        ,   0.        ],\n                     [-22.58040452,   0.        ,   0.        ],\n                     ..., \n                     [ 15.05159548,   0.        ,  56.        ],\n                     [ 15.07659548,   0.        ,  56.        ],\n                     [ 15.10159548,   0.        ,  56.        ]])},\n     'data_spin_up': {'columns': ['E', 'total_up', 'integrated_up'],\n      'data': array([[-22.63140452,   0.        ,   0.        ],\n                     [-22.60640452,   0.        ,   0.        ],\n                     [-22.58040452,   0.        ,   0.        ],\n                     ..., \n                     [ 15.05159548,   0.        ,  56.        ],\n                     [ 15.07659548,   0.        ,  56.        ],\n                     [ 15.10159548,   0.        ,  56.        ]])}}\n\nWhat is it?\n-----------\n\nThis Python package is the result of frustration of searching for an\norganized, straightforward and flexible approach of plotting, fitting\nand manipulation of `VASP <https://www.vasp.at/>`__ files (typically\n``POSCAR``) in a few key strokes as long as you have a terminal, and\npreferably a (S)FTP client. It has the following features:\n\n-  It is a Python package with a straightforward structure. When you\n   ``import pydass_vasp``, you have sub-packages\n   ``pydass_vasp.plotting``, ``pydass_vasp.fitting``,\n   ``pydass_vasp.manipulation``, ``pydass_vasp.xml_utils``, each\n   containing a few functions to carry out your tasks, with a careful\n   selection of options to choose from. Return values are Python\n   dictionaries, informative enough to be flexible for post-processing.\n   When there is no need for an object, don't bother creating one.\n\n-  It also has scripts that utilize the main package. They are simply\n   'wrappers' to the functions that are used the most frequently,\n   typically ``plotting`` and ``fitting`` functions. Instead of\n   ``cd``\\ ing into a directory and launching the Python interpreter\n   ``python``, making the imports and calling the functions, you just\n   need to stay in your terminal shell and type ``plot_tdos.py`` to plot\n   the total density of states (DOS), ``plot_ldos.py 1`` to plot the\n   local projected DOS of the first atom, and ``plot_bs.py`` to plot the\n   band structure. These scripts accept arguments and options as\n   flexible as their function counterparts.\n\n-  The defaults of the functions and wrapping scripts are sane and cater\n   to the most use cases. For example, If you are in a Python\n   interpreter, simply typing in ``pydass_vasp.plotting.plot_tdos()``\n   will collect data to plot from ``DOSCAR`` and parameters necessary\n   under the current VASP job directory, generate and **display** a\n   figure (or more) but **not save** it/them on disk, and at the same\n   time return a dictionary with the extracted data. It'll automatically\n   obtain critical parameters such as ``ISPIN``, ``E-fermi`` first from\n   VASP **output** files (e.g. ``OUTCAR``), then **input** files (e.g.\n   ``INCAR``) if the first attempt fails, and decide the number of\n   figures to generate. If you are just in a terminal shell, typing in\n   the script ``plot_tdos.py`` will do the same, but **rather than\n   display** the figure(s), instead, **save** it/them quietly and use\n   matplotlib's ``Agg`` backend. This would be particularly helpful for\n   terminal users who don't have X Window forwarding\n   (`Xming <http://www.straightrunning.com/XmingNotes/>`__ for Windows,\n   `XQuartz <http://xquartz.macosforge.org/landing/>`__ for Mac OS X)\n   set up on their own local machine, or the forwarding connection is\n   slow to hold the live generated figures.\n\n-  The options to the functions and wrapping scripts provide you with\n   room of customization from the beginning. For example, the internal\n   documentation of ``pydass_vasp.plotting.plot_tdos()`` looks like\n   below.\n\n   .. code:: python\n\n       # see the docstring\n\n       # in IPython interpreter\n       pydass_vasp.plotting.plot_tdos?\n\n       # or in regular python interpreter\n       help(pydass_vasp.plotting.plot_tdos)\n\n   ::\n\n       Plot the total density of states, with consideration of spin-polarization.\n       Accepts input file 'DOSCAR', or 'vasprun.xml'.\n\n       Parameters\n       ----------\n       axis_range: list\n           the range of axes x and y, 4 values in a list\n       ISPIN: int\n           user specified ISPIN\n           If not given, for DOSCAR-type input, infer from OUTCAR/INCAR.\n           For vasprun.xml-type input, infer from 'vasprun.xml'.\n       input_file: string\n           input file name, default to 'DOSCAR'\n           For DOSCAR-type, can be any string containing 'DOSCAR'.\n           For vasprun.xml-type input, can be any string ending with '.xml'.\n       display: bool\n           Display figures or not. Default to True.\n       on_figs: list/int\n           the current figure numbers to plot to, default to new figures\n       return_refs: bool\n           Return the axes reference(s) drawing or not. Default to False.\n       save_figs: bool\n           Save figures or not. Default to False. \n       save_data: bool\n           Save data or not. Default to False.\n       output_prefix: string\n           prefix string before the output files, default to 'TDOS'\n       return_states_at_Ef: bool\n           Calculate the TDOS at Ef with a 0.4 eV window of integration or not. Default to False.\n\n       Returns\n       -------\n       a dict, containing\n           'data': a dict that has 2D array of data,\n               easily to Pandas DataFrame by pd.DataFrame(**returned_dict['data'])\n           'ax': the axes reference, if return_refs == True\n\n-  The returned dictionary also leave room for adjustments. Take\n   ``pydass_vasp.plotting.plot_tdos(return_refs=True)`` as an example.\n\n   .. code:: python\n\n       returned_dict = {       \n           'data': {'columns': col_names, 'data': data}\n           'ax': ax\n       }\n\n   ``returned_dict['data']`` has a 2D numpy array of data, and their\n   column names. This construction is prefered because if you have\n   `pandas <http://pandas.pydata.org/>`__, you can just convert it to a\n   DataFrame by ``pd.DataFrame(**returned_dict['data'])``.\n\n   ``returned_dict['ax']`` is the matplotlib axes reference. When\n   ``ISPIN`` is 2, they are two elements: ``'ax_spin_up'`` and\n   ``'ax_spin_down'``.\n\n-  It has a uniform plotting support for the Crystal Orbital Hamilton\n   Populations (COHP) analysis tool `LOBSTER <http://cohp.de/>`__,\n   function ``pydass_vasp.plotting.plot_cohp()`` and script\n   ``plot_cohp.py``.\n\n-  If you use matplotlib >= 1.4, and you plot with the wrapping scripts,\n   you can optionally enjoy the aesthetic enhancement powered by its\n   newly added sub-package\n   `style <http://matplotlib.org/users/style_sheets.html>`__. For\n   example, ``plot_tdos.py --style=ggplot`` switches on the style of\n   `ggplot <http://ggplot2.org/>`__. Read the stylesheet\n   `guide <http://matplotlib.org/users/style_sheets.html>`__ for more\n   info, including designing and loading your own styles.\n\nMore on options\n---------------\n\nAs an example, we again consider ``pydass_vasp.plotting.plot_tdos()``,\nshortened as ``plot_tdos()``.\n\n``plot_tdos(input_file='vasprun.xml')`` switches from taking in\n``DOSCAR`` to ``vasprun.xml``. It lets you select what file you prefer\nto use. Any filename containing ``'DOSCAR'`` is considered to be of\n``DOSCAR`` type, any filename ending with ``'.xml'`` is considered to be\nof ``vasprun.xml`` type.\n\n``plot_tdos(ISPIN=2)`` lets you manually override the auto-detection of\n``ISPIN`` from files other than ``DOSCAR``. The program will skip the\ncorresponding part of work. This is helpful when you only have the major\ndata file ``DOSCAR`` transferred to you local machine, and do not have\nthe other files necessary to extract the parameters to proceed plotting.\nTo leave no confusion, when ``ISPIN`` is 2, two figures are generated,\none with spin up and down combined, the other with two overlapping\ncurves, denoting spin up and spin down separately.\n\n``plot_tdos(on_figs=1)`` creates the plot on top of an existing\nmatplotlib figure labeled as ``Figure 1``, instead of generating a whole\nnew one.\n\n``plot_tdos(on_figs=[1,2])`` when ``ISPIN`` is 2 puts the two plots\nmentioned before onto ``Figure 1`` and ``Figure 2``.\n``plot_tdos(on_figs=[1,None])`` is also valid, meaning putting the\ncombined curve to ``Figure 1``, and the two overlapping curves to a new\nfigure, which you can of course delete on its own.\n\n``plot_tdos(display=False, save_figs=True)`` replicates the behavior of\nthe corresponding wrapping script ``plot_tdos.py``.\n\n``plot_tdos(return_refs=True)`` adds the matplotlib axes reference(s) to\nthe returned dictionary, and keeps the figure(s) open to let you make\nfurther changes. Note: you don't need to switch ``display`` on to get\naxes references.\n\n``plot_tdos(save_data=True, output_prefix='TDOS')`` saves the extracted\ndata to disk, with the prefix ``'TDOS'``. The argument ``output_prefix``\nalso specifies the filenames for saved figures.\n\nThe wrapping script ``plot_tdos.py`` accepts the relevant options in the\nform of ``-i vasprun.xml``, or ``--input vasprun.xml``, ``-p`` or\n``--display``. For more readily available information, type in\n``plot_tdos.py -h`` to get help direclty from the terminal shell.\n\nDependencies\n------------\n\n-  Python 2.7 (Python 3 support is currently not considered)\n-  NumPy\n-  SciPy\n-  matplotlib\n-  IPython (optional, but better to have)\n\nI highly recommend every scientist/researcher who is new to Python to\ninstall the scientific superpack\n`Anaconda <https://store.continuum.io/cshop/anaconda/>`__, if you are\nusing Windows or Mac OS X. Even if you are on Linux, it is still highly\nrecommended if you don't have superuser control over the machine to\ninstall packages freely. It is often the case when you have ssh access\nto a supercomputer. In all these cases, just download the package and do\na simple local installation, and you already have everything to start\nwith, not only for ``pydass_vasp``, but also for the whole adventure of\nscientific computing.\n\nInstallation\n------------\n\n[STRIKEOUT:This package has already been registered on PyPI.] So if you\nhave `pip <https://pip.readthedocs.org/en/latest/>`__, which is a must\nhave, and should already have been included in Anaconda,\n\n[STRIKEOUT:pip install pydass\\_vasp]\n\n[STRIKEOUT:Or] if you wish to follow the more updated releases, which\nshould serve you better because small projects can fully enjoy the\nfreedom of updates on GitHub before committing to PyPI,\n\n::\n\n    pip install git+https://github.com/terencezl/pydass_vasp\n\nAlternatively, if you don't have pip, [STRIKEOUT:download the\n``.tar.gz`` file from the PyPI page and decompress it in a local\ndirectory of your choice, or]\n``git clone https://github.com/terencezl/pydass_vasp``, get into the\nouter ``pydass_vasp`` directory and\n\n::\n\n    python setup.py install\n\n    # then you can get out of that directory and just delete it\n    cd ..\n    rm -r pydass_vasp\n\nHowever, ``pip`` installation is always recommended, because of the ease\nof uninstallation,\n\n::\n\n    pip uninstall pydass_vasp\n\nGetting Help\n------------\n\nAn organized tutorial/documentation has not been ready yet, but the\ndocstrings of functions are fairly complete. If you use\n`IPython <http://ipython.org/>`__, which is also a must have, and should\nalready have been included in Anaconda,\n\n.. code:: python\n\n    import pydass_vasp\n\n    # in IPython interpreter\n    pydass_vasp.plotting.plot_tdos?\n\n    # or in regular python interpreter\n    help(pydass_vasp.plotting.plot_tdos)\n\nYou will get help. Experiment on a few options and you'll be quickly on\nyour way.\n\nIn addition, the help texts of scripts (option ``-h`` when you call them\nin the terminal shell) are available as well.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://terencezl.github.io/pydass_vasp/", "keywords": "vasp plotting fitting manipulation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pydass_vasp", "package_url": "https://pypi.org/project/pydass_vasp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pydass_vasp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://terencezl.github.io/pydass_vasp/"}, "release_url": "https://pypi.org/project/pydass_vasp/0.1/", "requires_dist": null, "requires_python": null, "summary": "Convenient Python modules and wrapping script executables", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Convenient Python modules and wrapping script executables.</p>\n<div id=\"example-plotting-band-structure\">\n<h2>Example: plotting band structure</h2>\n<pre><span class=\"n\">pydass_vasp</span><span class=\"o\">.</span><span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plot_bs</span><span class=\"p\">(</span><span class=\"n\">axis_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n</pre>\n<div>\n<img alt=\"band\\_structure\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4904d1c74d386b07cc750e7685d1832215426955/687474703a2f2f746572656e63657a6c2e6769746875622e696f2f7079646173735f766173702f7075626c69632f696d67732f62616e645f7374727563747572652e706e67\">\n</div>\n<p>Returned dictionary:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'k_points'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'band_1'</span><span class=\"p\">,</span> <span class=\"s1\">'band_2'</span><span class=\"p\">,</span> <span class=\"s1\">'band_3'</span><span class=\"p\">,</span> <span class=\"s1\">'band_4'</span><span class=\"p\">,</span> <span class=\"s1\">'band_5'</span><span class=\"p\">,</span> <span class=\"s1\">'band_6'</span><span class=\"p\">,</span> <span class=\"s1\">'band_7'</span><span class=\"p\">,</span> <span class=\"s1\">'band_8'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'band_9'</span><span class=\"p\">,</span> <span class=\"s1\">'band_10'</span><span class=\"p\">,</span> <span class=\"s1\">'band_11'</span><span class=\"p\">,</span> <span class=\"s1\">'band_12'</span><span class=\"p\">,</span> <span class=\"s1\">'band_13'</span><span class=\"p\">,</span> <span class=\"s1\">'band_14'</span><span class=\"p\">,</span> <span class=\"s1\">'band_15'</span><span class=\"p\">,</span> <span class=\"s1\">'band_16'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'band_17'</span><span class=\"p\">,</span> <span class=\"s1\">'band_18'</span><span class=\"p\">,</span> <span class=\"s1\">'band_19'</span><span class=\"p\">,</span> <span class=\"s1\">'band_20'</span><span class=\"p\">,</span> <span class=\"s1\">'band_21'</span><span class=\"p\">,</span> <span class=\"s1\">'band_22'</span><span class=\"p\">,</span> <span class=\"s1\">'band_23'</span><span class=\"p\">,</span> <span class=\"s1\">'band_24'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'band_25'</span><span class=\"p\">,</span> <span class=\"s1\">'band_26'</span><span class=\"p\">,</span> <span class=\"s1\">'band_27'</span><span class=\"p\">,</span> <span class=\"s1\">'band_28'</span><span class=\"p\">,</span> <span class=\"s1\">'band_29'</span><span class=\"p\">,</span> <span class=\"s1\">'band_30'</span><span class=\"p\">,</span> <span class=\"s1\">'band_31'</span><span class=\"p\">,</span> <span class=\"s1\">'band_32'</span><span class=\"p\">],</span>\n          <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">(</span>\n            <span class=\"p\">[[</span>  <span class=\"mf\">0.</span>        <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.342219</span>  <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">16.616756</span>  <span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span>   <span class=\"mf\">5.849101</span>  <span class=\"p\">,</span>\n                <span class=\"mf\">5.855091</span>  <span class=\"p\">,</span>   <span class=\"mf\">6.074841</span>  <span class=\"p\">],</span>\n             <span class=\"p\">[</span>  <span class=\"mf\">0.04558028</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.342181</span>  <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">16.616823</span>  <span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span>   <span class=\"mf\">5.811826</span>  <span class=\"p\">,</span>\n                <span class=\"mf\">5.815311</span>  <span class=\"p\">,</span>   <span class=\"mf\">6.060851</span>  <span class=\"p\">],</span>\n             <span class=\"p\">[</span>  <span class=\"mf\">0.09116057</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.34223</span>   <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">16.617067</span>  <span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span>   <span class=\"mf\">5.730248</span>  <span class=\"p\">,</span>\n                <span class=\"mf\">5.734556</span>  <span class=\"p\">,</span>   <span class=\"mf\">5.80481</span>   <span class=\"p\">],</span>\n             <span class=\"o\">...</span><span class=\"p\">,</span>\n             <span class=\"p\">[</span>  <span class=\"mf\">2.49869989</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.343194</span>  <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">16.628521</span>  <span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span>   <span class=\"mf\">5.172637</span>  <span class=\"p\">,</span>\n                <span class=\"mf\">5.204402</span>  <span class=\"p\">,</span>   <span class=\"mf\">5.711173</span>  <span class=\"p\">],</span>\n             <span class=\"p\">[</span>  <span class=\"mf\">2.53591604</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.343228</span>  <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">16.6286</span>    <span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span>   <span class=\"mf\">5.219897</span>  <span class=\"p\">,</span>\n                <span class=\"mf\">5.226956</span>  <span class=\"p\">,</span>   <span class=\"mf\">5.730676</span>  <span class=\"p\">],</span>\n             <span class=\"p\">[</span>  <span class=\"mf\">2.57313218</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">20.34319</span>   <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">16.628622</span>  <span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span>   <span class=\"mf\">5.234177</span>  <span class=\"p\">,</span>\n                <span class=\"mf\">5.234205</span>  <span class=\"p\">,</span>   <span class=\"mf\">5.726715</span>  <span class=\"p\">]])},</span>\n <span class=\"s1\">'reciprocal_point_locations'</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">([</span> <span class=\"mf\">0.</span>        <span class=\"p\">,</span>  <span class=\"mf\">0.8660254</span> <span class=\"p\">,</span>  <span class=\"mf\">1.3660254</span> <span class=\"p\">,</span>  <span class=\"mf\">1.8660254</span> <span class=\"p\">,</span>  <span class=\"mf\">2.57313218</span><span class=\"p\">]),</span>\n <span class=\"s1\">'reciprocal_points'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'R'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'M'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">]}</span>\n</pre>\n</div>\n<div id=\"example-plotting-total-density-of-states-with-spin-polarization\">\n<h2>Example: plotting total density of states with spin polarization</h2>\n<pre><span class=\"n\">pydass_vasp</span><span class=\"o\">.</span><span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plot_tdos</span><span class=\"p\">(</span><span class=\"n\">axis_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">],</span> <span class=\"n\">return_refs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<div>\n<img alt=\"dos\\_combined\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5bbe15e12dafd6a759952a2120546c29c52e8a4e/687474703a2f2f746572656e63657a6c2e6769746875622e696f2f7079646173735f766173702f7075626c69632f696d67732f646f735f636f6d62696e65642e706e67\">\n</div>\n<div>\n<img alt=\"dos\\_overlapping\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4b70d1eddf9f7a0a6af84778762bf4fb748baa1/687474703a2f2f746572656e63657a6c2e6769746875622e696f2f7079646173735f766173702f7075626c69632f696d67732f646f735f6f7665726c617070696e672e706e67\">\n</div>\n<p>Returned dictionary:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'ax_spin_combined'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_subplots</span><span class=\"o\">.</span><span class=\"n\">AxesSubplot</span> <span class=\"n\">at</span> <span class=\"mh\">0x108b95110</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"s1\">'ax_spin_overlapping'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_subplots</span><span class=\"o\">.</span><span class=\"n\">AxesSubplot</span> <span class=\"n\">at</span> <span class=\"mh\">0x10b0f5fd0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"s1\">'data_spin_down'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'total_down'</span><span class=\"p\">,</span> <span class=\"s1\">'integrated_down'</span><span class=\"p\">],</span>\n  <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mf\">22.63140452</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">22.60640452</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">22.58040452</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">],</span>\n                 <span class=\"o\">...</span><span class=\"p\">,</span>\n                 <span class=\"p\">[</span> <span class=\"mf\">15.05159548</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>  <span class=\"mf\">56.</span>        <span class=\"p\">],</span>\n                 <span class=\"p\">[</span> <span class=\"mf\">15.07659548</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>  <span class=\"mf\">56.</span>        <span class=\"p\">],</span>\n                 <span class=\"p\">[</span> <span class=\"mf\">15.10159548</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>  <span class=\"mf\">56.</span>        <span class=\"p\">]])},</span>\n <span class=\"s1\">'data_spin_up'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'total_up'</span><span class=\"p\">,</span> <span class=\"s1\">'integrated_up'</span><span class=\"p\">],</span>\n  <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mf\">22.63140452</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">22.60640452</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">22.58040452</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">],</span>\n                 <span class=\"o\">...</span><span class=\"p\">,</span>\n                 <span class=\"p\">[</span> <span class=\"mf\">15.05159548</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>  <span class=\"mf\">56.</span>        <span class=\"p\">],</span>\n                 <span class=\"p\">[</span> <span class=\"mf\">15.07659548</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>  <span class=\"mf\">56.</span>        <span class=\"p\">],</span>\n                 <span class=\"p\">[</span> <span class=\"mf\">15.10159548</span><span class=\"p\">,</span>   <span class=\"mf\">0.</span>        <span class=\"p\">,</span>  <span class=\"mf\">56.</span>        <span class=\"p\">]])}}</span>\n</pre>\n<div id=\"what-is-it\">\n<h3>What is it?</h3>\n<p>This Python package is the result of frustration of searching for an\norganized, straightforward and flexible approach of plotting, fitting\nand manipulation of <a href=\"https://www.vasp.at/\" rel=\"nofollow\">VASP</a> files (typically\n<tt>POSCAR</tt>) in a few key strokes as long as you have a terminal, and\npreferably a (S)FTP client. It has the following features:</p>\n<ul>\n<li><p>It is a Python package with a straightforward structure. When you\n<tt>import pydass_vasp</tt>, you have sub-packages\n<tt>pydass_vasp.plotting</tt>, <tt>pydass_vasp.fitting</tt>,\n<tt>pydass_vasp.manipulation</tt>, <tt>pydass_vasp.xml_utils</tt>, each\ncontaining a few functions to carry out your tasks, with a careful\nselection of options to choose from. Return values are Python\ndictionaries, informative enough to be flexible for post-processing.\nWhen there is no need for an object, don\u2019t bother creating one.</p>\n</li>\n<li><p>It also has scripts that utilize the main package. They are simply\n\u2018wrappers\u2019 to the functions that are used the most frequently,\ntypically <tt>plotting</tt> and <tt>fitting</tt> functions. Instead of\n<tt>cd</tt>ing into a directory and launching the Python interpreter\n<tt>python</tt>, making the imports and calling the functions, you just\nneed to stay in your terminal shell and type <tt>plot_tdos.py</tt> to plot\nthe total density of states (DOS), <tt>plot_ldos.py 1</tt> to plot the\nlocal projected DOS of the first atom, and <tt>plot_bs.py</tt> to plot the\nband structure. These scripts accept arguments and options as\nflexible as their function counterparts.</p>\n</li>\n<li><p>The defaults of the functions and wrapping scripts are sane and cater\nto the most use cases. For example, If you are in a Python\ninterpreter, simply typing in <tt>pydass_vasp.plotting.plot_tdos()</tt>\nwill collect data to plot from <tt>DOSCAR</tt> and parameters necessary\nunder the current VASP job directory, generate and <strong>display</strong> a\nfigure (or more) but <strong>not save</strong> it/them on disk, and at the same\ntime return a dictionary with the extracted data. It\u2019ll automatically\nobtain critical parameters such as <tt>ISPIN</tt>, <tt><span class=\"pre\">E-fermi</span></tt> first from\nVASP <strong>output</strong> files (e.g. <tt>OUTCAR</tt>), then <strong>input</strong> files (e.g.\n<tt>INCAR</tt>) if the first attempt fails, and decide the number of\nfigures to generate. If you are just in a terminal shell, typing in\nthe script <tt>plot_tdos.py</tt> will do the same, but <strong>rather than\ndisplay</strong> the figure(s), instead, <strong>save</strong> it/them quietly and use\nmatplotlib\u2019s <tt>Agg</tt> backend. This would be particularly helpful for\nterminal users who don\u2019t have X Window forwarding\n(<a href=\"http://www.straightrunning.com/XmingNotes/\" rel=\"nofollow\">Xming</a> for Windows,\n<a href=\"http://xquartz.macosforge.org/landing/\" rel=\"nofollow\">XQuartz</a> for Mac OS X)\nset up on their own local machine, or the forwarding connection is\nslow to hold the live generated figures.</p>\n</li>\n<li><p>The options to the functions and wrapping scripts provide you with\nroom of customization from the beginning. For example, the internal\ndocumentation of <tt>pydass_vasp.plotting.plot_tdos()</tt> looks like\nbelow.</p>\n<pre><span class=\"c1\"># see the docstring</span>\n\n<span class=\"c1\"># in IPython interpreter</span>\n<span class=\"n\">pydass_vasp</span><span class=\"o\">.</span><span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plot_tdos</span><span class=\"err\">?</span>\n\n<span class=\"c1\"># or in regular python interpreter</span>\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">pydass_vasp</span><span class=\"o\">.</span><span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plot_tdos</span><span class=\"p\">)</span>\n</pre>\n<pre>Plot the total density of states, with consideration of spin-polarization.\nAccepts input file 'DOSCAR', or 'vasprun.xml'.\n\nParameters\n----------\naxis_range: list\n    the range of axes x and y, 4 values in a list\nISPIN: int\n    user specified ISPIN\n    If not given, for DOSCAR-type input, infer from OUTCAR/INCAR.\n    For vasprun.xml-type input, infer from 'vasprun.xml'.\ninput_file: string\n    input file name, default to 'DOSCAR'\n    For DOSCAR-type, can be any string containing 'DOSCAR'.\n    For vasprun.xml-type input, can be any string ending with '.xml'.\ndisplay: bool\n    Display figures or not. Default to True.\non_figs: list/int\n    the current figure numbers to plot to, default to new figures\nreturn_refs: bool\n    Return the axes reference(s) drawing or not. Default to False.\nsave_figs: bool\n    Save figures or not. Default to False.\nsave_data: bool\n    Save data or not. Default to False.\noutput_prefix: string\n    prefix string before the output files, default to 'TDOS'\nreturn_states_at_Ef: bool\n    Calculate the TDOS at Ef with a 0.4 eV window of integration or not. Default to False.\n\nReturns\n-------\na dict, containing\n    'data': a dict that has 2D array of data,\n        easily to Pandas DataFrame by pd.DataFrame(**returned_dict['data'])\n    'ax': the axes reference, if return_refs == True\n</pre>\n</li>\n<li><p>The returned dictionary also leave room for adjustments. Take\n<tt>pydass_vasp.plotting.plot_tdos(return_refs=True)</tt> as an example.</p>\n<pre><span class=\"n\">returned_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"n\">col_names</span><span class=\"p\">,</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">}</span>\n    <span class=\"s1\">'ax'</span><span class=\"p\">:</span> <span class=\"n\">ax</span>\n<span class=\"p\">}</span>\n</pre>\n<p><tt><span class=\"pre\">returned_dict['data']</span></tt> has a 2D numpy array of data, and their\ncolumn names. This construction is prefered because if you have\n<a href=\"http://pandas.pydata.org/\" rel=\"nofollow\">pandas</a>, you can just convert it to a\nDataFrame by <tt><span class=\"pre\">pd.DataFrame(**returned_dict['data'])</span></tt>.</p>\n<p><tt><span class=\"pre\">returned_dict['ax']</span></tt> is the matplotlib axes reference. When\n<tt>ISPIN</tt> is 2, they are two elements: <tt>'ax_spin_up'</tt> and\n<tt>'ax_spin_down'</tt>.</p>\n</li>\n<li><p>It has a uniform plotting support for the Crystal Orbital Hamilton\nPopulations (COHP) analysis tool <a href=\"http://cohp.de/\" rel=\"nofollow\">LOBSTER</a>,\nfunction <tt>pydass_vasp.plotting.plot_cohp()</tt> and script\n<tt>plot_cohp.py</tt>.</p>\n</li>\n<li><p>If you use matplotlib &gt;= 1.4, and you plot with the wrapping scripts,\nyou can optionally enjoy the aesthetic enhancement powered by its\nnewly added sub-package\n<a href=\"http://matplotlib.org/users/style_sheets.html\" rel=\"nofollow\">style</a>. For\nexample, <tt>plot_tdos.py <span class=\"pre\">--style=ggplot</span></tt> switches on the style of\n<a href=\"http://ggplot2.org/\" rel=\"nofollow\">ggplot</a>. Read the stylesheet\n<a href=\"http://matplotlib.org/users/style_sheets.html\" rel=\"nofollow\">guide</a> for more\ninfo, including designing and loading your own styles.</p>\n</li>\n</ul>\n</div>\n<div id=\"more-on-options\">\n<h3>More on options</h3>\n<p>As an example, we again consider <tt>pydass_vasp.plotting.plot_tdos()</tt>,\nshortened as <tt>plot_tdos()</tt>.</p>\n<p><tt><span class=\"pre\">plot_tdos(input_file='vasprun.xml')</span></tt> switches from taking in\n<tt>DOSCAR</tt> to <tt>vasprun.xml</tt>. It lets you select what file you prefer\nto use. Any filename containing <tt>'DOSCAR'</tt> is considered to be of\n<tt>DOSCAR</tt> type, any filename ending with <tt>'.xml'</tt> is considered to be\nof <tt>vasprun.xml</tt> type.</p>\n<p><tt>plot_tdos(ISPIN=2)</tt> lets you manually override the auto-detection of\n<tt>ISPIN</tt> from files other than <tt>DOSCAR</tt>. The program will skip the\ncorresponding part of work. This is helpful when you only have the major\ndata file <tt>DOSCAR</tt> transferred to you local machine, and do not have\nthe other files necessary to extract the parameters to proceed plotting.\nTo leave no confusion, when <tt>ISPIN</tt> is 2, two figures are generated,\none with spin up and down combined, the other with two overlapping\ncurves, denoting spin up and spin down separately.</p>\n<p><tt>plot_tdos(on_figs=1)</tt> creates the plot on top of an existing\nmatplotlib figure labeled as <tt>Figure 1</tt>, instead of generating a whole\nnew one.</p>\n<p><tt><span class=\"pre\">plot_tdos(on_figs=[1,2])</span></tt> when <tt>ISPIN</tt> is 2 puts the two plots\nmentioned before onto <tt>Figure 1</tt> and <tt>Figure 2</tt>.\n<tt><span class=\"pre\">plot_tdos(on_figs=[1,None])</span></tt> is also valid, meaning putting the\ncombined curve to <tt>Figure 1</tt>, and the two overlapping curves to a new\nfigure, which you can of course delete on its own.</p>\n<p><tt>plot_tdos(display=False, save_figs=True)</tt> replicates the behavior of\nthe corresponding wrapping script <tt>plot_tdos.py</tt>.</p>\n<p><tt>plot_tdos(return_refs=True)</tt> adds the matplotlib axes reference(s) to\nthe returned dictionary, and keeps the figure(s) open to let you make\nfurther changes. Note: you don\u2019t need to switch <tt>display</tt> on to get\naxes references.</p>\n<p><tt>plot_tdos(save_data=True, <span class=\"pre\">output_prefix='TDOS')</span></tt> saves the extracted\ndata to disk, with the prefix <tt>'TDOS'</tt>. The argument <tt>output_prefix</tt>\nalso specifies the filenames for saved figures.</p>\n<p>The wrapping script <tt>plot_tdos.py</tt> accepts the relevant options in the\nform of <tt><span class=\"pre\">-i</span> vasprun.xml</tt>, or <tt><span class=\"pre\">--input</span> vasprun.xml</tt>, <tt><span class=\"pre\">-p</span></tt> or\n<tt><span class=\"pre\">--display</span></tt>. For more readily available information, type in\n<tt>plot_tdos.py <span class=\"pre\">-h</span></tt> to get help direclty from the terminal shell.</p>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<ul>\n<li>Python 2.7 (Python 3 support is currently not considered)</li>\n<li>NumPy</li>\n<li>SciPy</li>\n<li>matplotlib</li>\n<li>IPython (optional, but better to have)</li>\n</ul>\n<p>I highly recommend every scientist/researcher who is new to Python to\ninstall the scientific superpack\n<a href=\"https://store.continuum.io/cshop/anaconda/\" rel=\"nofollow\">Anaconda</a>, if you are\nusing Windows or Mac OS X. Even if you are on Linux, it is still highly\nrecommended if you don\u2019t have superuser control over the machine to\ninstall packages freely. It is often the case when you have ssh access\nto a supercomputer. In all these cases, just download the package and do\na simple local installation, and you already have everything to start\nwith, not only for <tt>pydass_vasp</tt>, but also for the whole adventure of\nscientific computing.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>[STRIKEOUT:This package has already been registered on PyPI.] So if you\nhave <a href=\"https://pip.readthedocs.org/en/latest/\" rel=\"nofollow\">pip</a>, which is a must\nhave, and should already have been included in Anaconda,</p>\n<p>[STRIKEOUT:pip install pydass_vasp]</p>\n<p>[STRIKEOUT:Or] if you wish to follow the more updated releases, which\nshould serve you better because small projects can fully enjoy the\nfreedom of updates on GitHub before committing to PyPI,</p>\n<pre>pip install git+https://github.com/terencezl/pydass_vasp\n</pre>\n<p>Alternatively, if you don\u2019t have pip, [STRIKEOUT:download the\n<tt>.tar.gz</tt> file from the PyPI page and decompress it in a local\ndirectory of your choice, or]\n<tt>git clone <span class=\"pre\">https://github.com/terencezl/pydass_vasp</span></tt>, get into the\nouter <tt>pydass_vasp</tt> directory and</p>\n<pre>python setup.py install\n\n# then you can get out of that directory and just delete it\ncd ..\nrm -r pydass_vasp\n</pre>\n<p>However, <tt>pip</tt> installation is always recommended, because of the ease\nof uninstallation,</p>\n<pre>pip uninstall pydass_vasp\n</pre>\n</div>\n<div id=\"getting-help\">\n<h3>Getting Help</h3>\n<p>An organized tutorial/documentation has not been ready yet, but the\ndocstrings of functions are fairly complete. If you use\n<a href=\"http://ipython.org/\" rel=\"nofollow\">IPython</a>, which is also a must have, and should\nalready have been included in Anaconda,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pydass_vasp</span>\n\n<span class=\"c1\"># in IPython interpreter</span>\n<span class=\"n\">pydass_vasp</span><span class=\"o\">.</span><span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plot_tdos</span><span class=\"err\">?</span>\n\n<span class=\"c1\"># or in regular python interpreter</span>\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">pydass_vasp</span><span class=\"o\">.</span><span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plot_tdos</span><span class=\"p\">)</span>\n</pre>\n<p>You will get help. Experiment on a few options and you\u2019ll be quickly on\nyour way.</p>\n<p>In addition, the help texts of scripts (option <tt><span class=\"pre\">-h</span></tt> when you call them\nin the terminal shell) are available as well.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1301663, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 03:07:24 2020"}