{"info": {"author": "Joe Farro", "author_email": "joe@jf.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Scrapy", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP :: Indexing/Search", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing", "Topic :: Text Processing :: Markup :: HTML", "Topic :: Text Processing :: Markup :: XML", "Topic :: Utilities"], "description": "A DSL for extracting data from a web page. The DSL serves two purposes:\nfinds elements and extracts their text or attribute values. The main\nreason for developing this is to have all the CSS selectors for scraping\na site in one place (I prefer CSS selectors over anything else).\n\nThe DSL wraps `PyQuery`_.\n\nA few links:\n\n* `Github repository <https://github.com/tiffon/take>`_\n\n* `PyPi package <https://pypi.python.org/pypi/take>`_\n\n* `Discussion group <https://groups.google.com/forum/#!forum/take-dsl>`_\n\nExample\n-------\n\nGiven the following take template:\n\n::\n\n    $ h1 | text\n        save: h1_title\n    $ ul\n        save each: uls\n            $ li\n                | 0 [title]\n                    save: title\n                | 1 text\n                    save: second_li\n    $ p | 1 text\n        save: p_text\n\nAnd the following HTML:\n\n.. code:: html\n\n    <div>\n        <h1>Le Title 1</h1>\n        <p>Some body here</p>\n        <p>The second body here</p>\n        <ul id=\"a\">\n            <li title=\"a less than awesome title\">A first li</li>\n            <li>Second li in list #a</li>\n            <li>A third li</li>\n        </ul>\n        <ul id=\"b\">\n            <li title=\"some awesome title\">B first li</li>\n            <li>Second li in list #b</li>\n            <li>B third li</li>\n        </ul>\n    </div>\n\nThe following data will be extracted (presented in JSON format):\n\n.. code:: json\n\n    {\n        \"h1_title\": \"Le Title 1\",\n        \"p_text\": \"The second body here\",\n        \"uls\": [\n            {\n                \"title\": \"a less than awesome title\",\n                \"second_li\": \"Second li in list #a\"\n            },\n            {\n                \"title\": \"some awesome title\",\n                \"second_li\": \"Second li in list #b\"\n            }\n        ]\n    }\n\nTake templates always result in a single python ``dict``.\n\nThe template can also be written in the following, more concise, syntax:\n\n::\n\n    $ h1 | text ;                   : h1_title\n    $ ul\n        save each                   : uls\n            $ li\n                | 0 [title] ;           : title\n                | 1 text ;              : second_li\n    $ p | 1 text ;                  : p_text\n\nThe example above is formatted with extra whitespace to make the structure\nof the resulting data more apparent.\n\nMore Examples\n^^^^^^^^^^^^^\n\nFor more complex examples:\n\n-  Scraping the `reddit home page <http://www.reddit.com/>`_\n\n   -  `Inline version <https://github.com/tiffon/take/blob/master/sample/reddit_inline_saves.take>`_\n\n   -  `Verbose version <https://github.com/tiffon/take/blob/master/sample/reddit.take>`_\n\n-  Scraping the latest `web-scraping questions <http://stackoverflow.com/questions/tagged/web-scraping?sort=newest&pageSize=10>`_ on Stack Overflow:\n\n   -  `Overview <https://github.com/tiffon/take-examples/tree/master/samples/stackoverflow>`_\n\n   -  `questions-listing.take <https://github.com/tiffon/take-examples/blob/master/samples/stackoverflow/questions-listing.take>`_\n\n   -  `question-page.take <https://github.com/tiffon/take-examples/blob/master/samples/stackoverflow/question-page.take>`_\n\nInstall\n-------\n\n.. code::\n\n    pip install take\n\n\nUsage\n-----\n\nCreating a Take Template\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nA take template can be created from a file via the static method\n``TakeTemplate.from_file()``.\n\n.. code:: python\n\n    from take import TakeTemplate\n    tt = TakeTemplate.from_file('yourfile.take')\n\nThe ``TakeTemplate`` constructor can be used to create a template from either\na ``basestring`` or an ``Iterable``.\n\nTo create a template from a string:\n\n.. code:: python\n\n    from take import TakeTemplate\n    TMPL = \"\"\"\n    $ nav a\n        save each: nav\n            | text\n                save: text\n            | [href]\n                save: link\n    \"\"\"\n    tt = TakeTemplate(TMPL)\n\nAdditionally, a ``base_url`` keyword argument can be specified which\nwill cause relative URLs to be made absolute via the value of the\n``base_url`` parameter for any documents that are processed.\n\n.. code:: python\n\n    tt = TakeTemplate.from_file('yourfile.take', base_url='http://www.example.com')\n\n    tt = TakeTempalte(TMPL, base_url='http://www.example.com')\n\nIf a ``base_url`` is provided when the template is used, it will\noverride the ``base_url`` provided when the template was created. The\n``base_url`` parameter must be provided as a keyword argument.\n\nUsing a Take Template\n^^^^^^^^^^^^^^^^^^^^^\n\nTo parse from a URL:\n\n.. code:: python\n\n    data = tt(url='http://www.example.com')\n\nTo parse from a html string:\n\n.. code:: python\n\n    data = tt('<div>hello world</div>')\n\nTo parse from a file:\n\n.. code:: python\n\n    data = tt(filename=path_to_html_file)\n\nAlternatively, the ``take()`` method can be used:\n\n.. code:: python\n\n    data = tt.take(url='http://www.example.com')\n\nValid parameters for the template callable or the ``take()`` method are\nthe same as those for the `PyQuery constructor`_.\n\nAdditionally, if the ``'base_url'`` keyword parameter is supplied, all\nrelative URLs will be made absolute via the value of ``'base_url'``.\n\n.. code:: python\n\n    data = tt(url='http://www.example.com', base_url='http://www.example.com')\n\nTake Templates\n--------------\n\nTake templates are whitespace sensitive and are comprised of three types\nof statements:\n\n-  Comment Lines\n\n   -  ``# some comment``\n\n-  Queries\n\n   -  ``$ h1``\n\n   -  ``| text``\n\n   -  ``$ h1 | 0 text``\n\n-  Directives\n\n   -  ``save: h1_title``\n\n   -  ``save each: comments``\n\n   -  ``merge: *``\n\n   -  ``def: get comments``\n\nComment Lines\n-------------\n\nAny line with a ``#`` as the first non-whitespace character is considered a comment line.\n\n::\n\n    # this line is a comment\n    # the third line is a CSS selector query\n    $ #main-nav a\n\nComment lines are completely ignored. Partially commented lines and multi-line comments are not supported at this time.\n\nQueries\n-------\n\nThere are two main types of queries in take templates:\n\n-  CSS selector queries\n\n-  Non-CSS selector queries\n\nThe reason they\u2019re divided like this is because CSS selectors always go\nfirst on the line and they can be followed by non-CSS selector queries.\nNon-CSS selector queries can\u2019t be followed by CSS selector queries.\nSeems easier to read this way, but it\u2019s arbitrary and may change.\n\nCSS Selector Queries\n^^^^^^^^^^^^^^^^^^^^\n\nCSS selector queries start with ``$`` and end either at the end of the\nline, the ``|`` character or the ``;`` character. The ``|`` character\nis the starting character for non-CSS selector queries, and the ``;``\ncharacter ends the statement and starts an `inline sub-context <#inline-sub-contexts>`_.\n\n-  ``$ #siteTable .thing | text``\n-  ``$ .domain a``\n\nIn the first example above, the CSS selector query is\n``#siteTable .thing``. The second is ``.domain a``.\n\nThe CSS selectors are passed to `PyQuery`_, so anything PyQuery can\naccept can be used. From what I understand, there are a few `bugs`_ in\nPyQuery (that may be in the underlying libraries `lxml`_ or\n`cssselect`_). Those will come up.\n\nNon-CSS Selector Queries\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nNon-CSS selector queries start with ``|`` and continue until the ``;`` character or the\nline ends. There are five non-CSS selector queries:\n\n-  **Element indexes**\n\n   -  Syntax: an integer\n\n   -  ``| 0`` will return the first element in the current context\n\n   -  ``| 1`` will return the second element in the current context\n\n   -  ``| -1`` will return the last element in the current context\n\n-  **Attribute retrieval**\n\n   -  Syntax: ``[attr]``\n\n   -  ``| [href]`` will return the value of the ``href`` attribute of the\n      first element in the current context\n\n   -  ``| 1 [href]`` will return the value of the ``href`` attribute of the\n      second element in the current context\n\n-  **Text retrieval**\n\n   -  Syntax: ``text``\n\n   -  ``| text`` will return the text of the current context\n\n   -  ``| 1 text`` will first get the second element in the current context\n      and then return it\u2019s text\n\n-  **Own text retrieval**\n\n   -  Syntax: ``own_text``\n\n   -  ``| own_text`` will return the text of the current context without the text\n      from its children\n\n   -  ``| 1 own_text`` will first get the second element in the current context\n      and then return it\u2019s text without the text from its children\n\n-  **Field retrieval**\n\n   -  Syntax: ``.field_name``\n\n   -  ``| .description`` will do a dictionary lookup on the context and retrieve\n      the value of the ``'description'`` item\n\n   -  ``| .parent.child`` will do a dictionary lookup on the context and retrieve\n      the value of the ``'parent'`` and then it will lookup ``'child'`` on that value\n\n**Order matters**: Index queries should precede other queries. Also, only one\nof ``[attr]``, ``text``, ``own_text`` or ``.field_name`` queries can be used.\n\nIndentation\n-----------\n\nThe level of indentation on each line defines the context for the line.\n\nThe root context of a take template is the current document being\nprocessed. Every statement that is not indented is executed against the\ndocument being processed.\n\nEach line that is indented more deeply has a context that is the result\nof the last query in the parent context. For example:\n\n::\n\n    $ #some-id\n        $ li\n        $ div\n\nThe query on the first line is executed against the document being\nprocessed. The query on the second line is executed against the result\nof the first line. So, the second line is synonomous with\n``$ #some-id li``. The query on the third line is also executed against\nthe result of the first line. So, it can be re-written as\n``$ #some-id div``.\n\nAnother example:\n\n::\n\n    $ a\n        | 0\n            | text\n            | [href]\n\nThe third and fourth lines retrieve the text and href attribute,\nrespectively, from the first ``<a>`` in the document being processed.\nThis could be rewritten as:\n\n::\n\n    $ a | 0\n        | text\n        | [href]\n\nInline Sub Contexts\n^^^^^^^^^^^^^^^^^^^\n\nInline sub-contexts allow multuple statements per line. The syntax is:\n\n::\n\n    statement ; sub-context-statement\n\nThe main thing to note is: whatever comes after the semi-colin is treated as if it were a line with deeper indentation.\n\nInline sub-contexts are primarily used with directives. For example, the following take template:\n\n::\n\n    $ h1 | 0 text\n        save: section_title\n\nCan be re-written as:\n\n::\n\n    $ h1 | 0 text ; save: document_title\n\nBoth templates save the text in the first ``<h1>`` element into the result ``dict`` with the key ``'document_title'``. More on `save directives <#save-directive>`_ later.\n\nDirectives\n----------\n\nDirectives are commands that are executed against the current context.\nThey're format is a directive name followed by an optional parameter list:\n\n::\n\n    <directive_name> [: <parameter>[<whitespace or comma> <parameter>]*]?\n\nAn example of a ``save`` directive:\n\n::\n\n    save : some_name\n\nNot all directives require parameters. For example, the ``shrink`` directive,\nwhich collapses whitespace, does not:\n\n::\n\n    shrink\n\nThe following directives are built-in:\n\n-  ``save``, alias ``:``\n\n   -  Saves a value.\n\n-  ``save each``\n\n   -  Creates a list of results.\n\n-  ``namespace``, alias ``+``\n\n   -  Creates child ``dict`` for saving values into.\n\n-  ``shrink``\n\n   -  Collapses and trims whitespace.\n\n-  ``def``\n\n   -  Defines a new directive. *Currently only new directives defined in the current document are available.*\n\n-  ``merge``, alias ``>>``\n\n   -  Copies a value from a directive's result into the template's result.\n\nSave Directive\n^^^^^^^^^^^^^^\n\n*Alias:* ``:``\n\nSave directives save the context into the result ``dict``. These are\ngenerally only intended to be applied to the result of non-CSS Selector\nqueries.\n\nThe syntax is:\n\n::\n\n    save: <identifier>\n\n``:`` is an alias for ``save:``. So, a save directive can also be written as:\n\n::\n\n    : <identifier>\n\nThe identifier can contain anything except whitespace, a comma (``,``) or a semi-colin (``;``).\nAlso, the identifier can contain dots (``.``), which designate sub-\\ ``dicts`` for\nsaving.\n\nFor example, the following take template:\n\n::\n\n    $ a | 0\n        | text\n            save: first_a.description\n        | [href]\n            save: first_a.url\n\nAnd the following HTML:\n\n.. code:: html\n\n    <div>\n        <a href=\"http://www.example.com\">fo sho</a>\n        <a href=\"http://www.another.com\">psych out</a>\n    </div>\n\nWill result in the following python ``dict``:\n\n.. code:: python\n\n    {\n        'first_a': {\n            'description': 'fo sho',\n            'url': 'http://www.example.com'\n        }\n    }\n\nUsing the ``:`` alias, the template can be written as:\n\n::\n\n    $ a | 0\n        | text\n            : first_a.text\n        | [href]\n            : first_a.href\n\nOr, more succinctly:\n\n::\n\n    $ a | 0\n        | text ;        : first_a.text\n        | [href] ;      : first_a.href\n\nSave Each Directive\n^^^^^^^^^^^^^^^^^^^\n\nSave each directives produce a ``dict`` for each element in the context. Generally, these are used for repeating elements on a page. In the `reddit sample <https://github.com/tiffon/take/blob/master/sample/reddit_inline_saves.take>`_, a save each directive is used to save each of the reddit entries.\n\nThe syntax is:\n\n::\n\n    save each: <identifier>\n        <sub-context>\n\nThe identifier can contain anything except whitespace, a comma (``,``) or a semi-colin (``;``).\nAlso, the identifier can contain dots (``.``), which designate sub-\\ ``dict``\\ s for\nsaving.\n\nSave each directives apply the next sub-context to each of the elements\nof their context value. Put another way, save each directives repeatedly\nprocess each element of their context.\n\nFor example, in the following take template, the ``| text`` and\n``| [href]`` queries (along with saving the results) will be applied to\nevery ``<a>`` in the document.\n\n::\n\n    $ a\n        save each: anchors\n            | text\n                save: description\n            | [href]\n                save: url\n\nApplying the above take template to the following HTML:\n\n.. code:: html\n\n    <div>\n        <a href=\"http://www.example.com\">fo sho</a>\n        <a href=\"http://www.another.com\">psych out</a>\n    </div>\n\nWill result in the following python ``dict``:\n\n.. code:: python\n\n    {\n        'anchors': [{\n                'description': 'fo sho',\n                'url': 'http://www.example.com'\n            },{\n                'description': 'psych out',\n                'url': 'http://www.another.com'\n            }\n        ]\n    }\n\nNamespace Directive\n^^^^^^^^^^^^^^^^^^^\n\n*Alias:* ``+``\n\nNamespace directives create a sub-``dict`` on the current result-value and everyting in the\nnext sub-context is saved into the new ``dict``.\n\nThe syntax is:\n\n::\n\n    namespace: <identifier>\n        <sub-context>\n\n``<identifier>`` is the key the sub-``dict`` is saved as.\n\nAn example:\n\n::\n\n    $ a | 0\n        namespace: first_a\n            | text\n                save: description\n            | [href]\n                save: url\n\nApplying the above take template to the following HTML:\n\n.. code:: html\n\n    <div>\n        <a href=\"http://www.example.com\">fo sho</a>\n        <a href=\"http://www.another.com\">psych out</a>\n    </div>\n\nWill result in the following python ``dict``:\n\n.. code:: python\n\n    {\n        'first_a': {\n            'description': 'fo sho',\n            'url': 'http://www.example.com'\n        }\n    }\n\nThe ``description`` and ``url`` fields are saved in the ``first_a`` namespace. This reduces\nthe need for save directives like: ``first_a.description``.\n\n``+`` is an alias for the ``namespace`` directive. So, the template above can also be written as:\n\n::\n\n    $ a | 0\n        +       : first_a\n            | text\n                save: description\n            | [href]\n                save: url\n\nOr, more succinctly, using inline sub-contexts and the ``:`` alias for save:\n\n::\n\n    $ a | 0 ; +         : first_a\n            | text ;        : description\n            | [href] ;      : url\n\n\n\nShrink Directive\n^^^^^^^^^^^^^^^^\n\nThe ``shrink`` directive trims and collapses whitespace from text. It doesn't take any parameters,\nso the usage is just the word ``shrink``:\n\n::\n\n    $ p | text ;            : with_spacing\n    $ p | text ; shrink ;   : shrink_on_text\n\nIf applied to an element, it will be applied to the element's text.\n\n::\n\n    $ p ; shrink ;          : shrink_on_elem\n\nApplying the above statements to the following HTML:\n\n.. code:: html\n\n    <p>Hello       World!</p>\n\nWill result in the following python ``dict``:\n\n.. code:: python\n\n    {\n        'with_spacing': 'Hello       World!',\n        'shrink_on_text': 'Hello World!',\n        'shrink_on_elem': 'Hello World!'\n    }\n\nDef Directive\n^^^^^^^^^^^^^\n\nThe ``def`` directive saves a sub-context as a custom directive which can be invoked later. This is a\nway to re-use sections of a take template. Directives created in this fashion **always result in a new**\n``dict``.\n\nThe syntax is:\n\n::\n\n    def: <identifier>\n        <sub-context>\n\nFor example:\n\n::\n\n    def: get first link\n        $ a | 0\n            | text ;    : description\n            | [href] ;  : url\n\nIn the above template, a new directive named ``get first link`` is created. The new directive saves\nthe text and href attribute from the first ``<a>`` element in the context onto which it is\ninvoked. The directive will always result in a new ``dict`` containing ``description`` and\n``url`` keys.\n\nThe identifier can contain spaces; all spaces are collapsed to be a single space,\ne.g. ``def: some    name`` is collapsed to ``def: some name``.\n\nDirectives created by ``def`` are invoked without parameters.\n\nThe example below defines a custom directive and applies it against the first ``<nav>`` element and the first ``<aside>`` element.\n\n::\n\n    def: get first link\n        $ a | 0\n            | text ;    : description\n            | [href] ;  : url\n\n    $ nav\n        get first link\n            save: first_nav_link\n    $ aside\n        get first link\n            save: first_aside_link\n\nGiven the following HTML:\n\n.. code:: html\n\n    <div>\n        <nav>\n            <a href=\"/local/a\">nav item A</a>\n            <a href=\"/local/b\">nav item B</a>\n        </nav>\n        <aside>\n            <p>some description</p>\n            <a href=\"http://ext.com/a\">aside item A</a>\n            <a href=\"http://ext.com/b\">aside item B</a>\n        </aside>\n    </div>\n\n\n\nThe template would result in:\n\n.. code:: python\n\n    {\n        'first_nav_link': {\n            'description': 'nav item A',\n            'url': '/local/a'\n        },\n        'first_aside_link': {\n            'description': 'aside item A',\n            'url': 'http://ext.com/a'\n        }\n    }\n\nEach time the directive is invoked it returns a python ``dict`` containing ``'description'`` and ``'url'`` keys. The return value of the first invocation is saved into the template's result as ``'first_nav_link'``. The second return value is saved as ``'first_aside_link'``\n\nAnother way to save the data from a custom directive is to use the ``| .property`` query. This allows renaming, too:\n\n::\n\n    def: get first link\n        $ a | 0\n            | text ;    : description\n            | [href] ;  : url\n\n    $ nav\n        get first link\n            | .url ;\n                save: first_nav_url\n    $ aside\n        get first link\n            | .url ;\n                save: first_aside_url\n\nThe above template would result in the following ``dict``:\n\n.. code:: python\n\n    {\n        'first_nav_url': '/local/a',\n        'first_aside_url': 'http://ext.com/a'\n    }\n\nMerge Directive\n^^^^^^^^^^^^^^^\n\n*Alias:* ``>>``\n\nThe ``merge`` directive copies properties from the context's value and saves them into the result value. The main\nuse-case is extracting data from the result of a custom directive. ``merge`` performs a shallow copy.\n\nThe syntax is:\n\n::\n\n    merge: <field> [<field>]*\n\nThe parameter(s) are the keys to copy. They are separated by spaces or a comma and new line.\n\nThe special parameter ``*`` can be used to copy all the keys. If used, it should be the only parameter:\n\n::\n\n    merge: *\n\n*Note:* ``merge`` expects the context's value to be a ``dict``; behind the scenes it uses the ``mapping[key]`` syntax.\n\nAn example:\n\n::\n\n    def: link info\n        | text              : text\n        | [href]            : url\n        | [title]           : title\n\n    $ footer a\n        save each               : footer_links\n            link info\n                merge               : url\n\nApplying the above take template to the following HTML:\n\n.. code:: html\n\n    <html>\n        <head>...</head>\n        <body>\n            <div class=\"main\">\n                ...\n            </div>\n            <footer>\n                <ul>\n                    <li>\n                        <a href=\"/about\" title=\"All about our company\">Team</a>\n                    </li>\n                    <li>\n                        <a href=\"https://blog.example.com\" title=\"Our self-promos\">Blog</a>\n                    </li>\n                    <li>\n                        <a href=\"www.facebook.com/example\" title=\"Our facebook page\">Facebook</a>\n                    </li>\n                    <li>\n                        <a href=\"/privacy\" title=\"Legalese\">Privacy</a>\n                    </li>\n                </ul>\n            </footer>\n        </body>\n    </html>\n\nWill result in the following python ``dict``:\n\n.. code:: python\n\n    {\n        'footer_links': [\n            {'url': '/about'},\n            {'url': 'https://blog.example.com'},\n            {'url': 'www.facebook.com/example'},\n            {'url': '/privacy'}\n        ]\n    }\n\nTo copy more than one property, separate the property names with a space or a comma and new-line:\n\n::\n\n                        # separated by spaces\n    merge               : url title\n\n                        # separated with comma line-continuation\n    merge               : url,\n                          title\n\n                        # using the `>>` alias\n    >>                  : url,\n                          title\n\n\n.. _PyQuery: https://pythonhosted.org/pyquery/index.html\n.. _PyQuery constructor: https://pythonhosted.org/pyquery/index.html#quickstart\n.. _bugs: https://github.com/gawel/pyquery/issues\n.. _lxml: http://lxml.de/\n.. _cssselect: https://pythonhosted.org/cssselect/", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tiffon/take", "keywords": "scraping scrapy scraper extraction html", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "take", "package_url": "https://pypi.org/project/take/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/take/", "project_urls": {"Homepage": "https://github.com/tiffon/take"}, "release_url": "https://pypi.org/project/take/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "A DSL for extracting data from a web page.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A DSL for extracting data from a web page. The DSL serves two purposes:\nfinds elements and extracts their text or attribute values. The main\nreason for developing this is to have all the CSS selectors for scraping\na site in one place (I prefer CSS selectors over anything else).</p>\n<p>The DSL wraps <a href=\"https://pythonhosted.org/pyquery/index.html\" rel=\"nofollow\">PyQuery</a>.</p>\n<p>A few links:</p>\n<ul>\n<li><a href=\"https://github.com/tiffon/take\" rel=\"nofollow\">Github repository</a></li>\n<li><a href=\"https://pypi.python.org/pypi/take\" rel=\"nofollow\">PyPi package</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/take-dsl\" rel=\"nofollow\">Discussion group</a></li>\n</ul>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Given the following take template:</p>\n<pre>$ h1 | text\n    save: h1_title\n$ ul\n    save each: uls\n        $ li\n            | 0 [title]\n                save: title\n            | 1 text\n                save: second_li\n$ p | 1 text\n    save: p_text\n</pre>\n<p>And the following HTML:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Le Title 1<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Some body here<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>The second body here<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"a\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"a less than awesome title\"</span><span class=\"p\">&gt;</span>A first li<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Second li in list #a<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>A third li<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"b\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"some awesome title\"</span><span class=\"p\">&gt;</span>B first li<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Second li in list #b<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>B third li<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>The following data will be extracted (presented in JSON format):</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"h1_title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Le Title 1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"p_text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"The second body here\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"uls\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a less than awesome title\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"second_li\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Second li in list #a\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"some awesome title\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"second_li\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Second li in list #b\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Take templates always result in a single python <tt>dict</tt>.</p>\n<p>The template can also be written in the following, more concise, syntax:</p>\n<pre>$ h1 | text ;                   : h1_title\n$ ul\n    save each                   : uls\n        $ li\n            | 0 [title] ;           : title\n            | 1 text ;              : second_li\n$ p | 1 text ;                  : p_text\n</pre>\n<p>The example above is formatted with extra whitespace to make the structure\nof the resulting data more apparent.</p>\n<div id=\"more-examples\">\n<h3>More Examples</h3>\n<p>For more complex examples:</p>\n<ul>\n<li>Scraping the <a href=\"http://www.reddit.com/\" rel=\"nofollow\">reddit home page</a><ul>\n<li><a href=\"https://github.com/tiffon/take/blob/master/sample/reddit_inline_saves.take\" rel=\"nofollow\">Inline version</a></li>\n<li><a href=\"https://github.com/tiffon/take/blob/master/sample/reddit.take\" rel=\"nofollow\">Verbose version</a></li>\n</ul>\n</li>\n<li>Scraping the latest <a href=\"http://stackoverflow.com/questions/tagged/web-scraping?sort=newest&amp;pageSize=10\" rel=\"nofollow\">web-scraping questions</a> on Stack Overflow:<ul>\n<li><a href=\"https://github.com/tiffon/take-examples/tree/master/samples/stackoverflow\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"https://github.com/tiffon/take-examples/blob/master/samples/stackoverflow/questions-listing.take\" rel=\"nofollow\">questions-listing.take</a></li>\n<li><a href=\"https://github.com/tiffon/take-examples/blob/master/samples/stackoverflow/question-page.take\" rel=\"nofollow\">question-page.take</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install take\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"creating-a-take-template\">\n<h3>Creating a Take Template</h3>\n<p>A take template can be created from a file via the static method\n<tt>TakeTemplate.from_file()</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">take</span> <span class=\"kn\">import</span> <span class=\"n\">TakeTemplate</span>\n<span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"n\">TakeTemplate</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"s1\">'yourfile.take'</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>TakeTemplate</tt> constructor can be used to create a template from either\na <tt>basestring</tt> or an <tt>Iterable</tt>.</p>\n<p>To create a template from a string:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">take</span> <span class=\"kn\">import</span> <span class=\"n\">TakeTemplate</span>\n<span class=\"n\">TMPL</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n$ nav a\n    save each: nav\n        | text\n            save: text\n        | [href]\n            save: link\n\"\"\"</span>\n<span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"n\">TakeTemplate</span><span class=\"p\">(</span><span class=\"n\">TMPL</span><span class=\"p\">)</span>\n</pre>\n<p>Additionally, a <tt>base_url</tt> keyword argument can be specified which\nwill cause relative URLs to be made absolute via the value of the\n<tt>base_url</tt> parameter for any documents that are processed.</p>\n<pre><span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"n\">TakeTemplate</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"s1\">'yourfile.take'</span><span class=\"p\">,</span> <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">)</span>\n\n<span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"n\">TakeTempalte</span><span class=\"p\">(</span><span class=\"n\">TMPL</span><span class=\"p\">,</span> <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">)</span>\n</pre>\n<p>If a <tt>base_url</tt> is provided when the template is used, it will\noverride the <tt>base_url</tt> provided when the template was created. The\n<tt>base_url</tt> parameter must be provided as a keyword argument.</p>\n</div>\n<div id=\"using-a-take-template\">\n<h3>Using a Take Template</h3>\n<p>To parse from a URL:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">)</span>\n</pre>\n<p>To parse from a html string:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div&gt;hello world&lt;/div&gt;'</span><span class=\"p\">)</span>\n</pre>\n<p>To parse from a file:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"n\">path_to_html_file</span><span class=\"p\">)</span>\n</pre>\n<p>Alternatively, the <tt>take()</tt> method can be used:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">)</span>\n</pre>\n<p>Valid parameters for the template callable or the <tt>take()</tt> method are\nthe same as those for the <a href=\"https://pythonhosted.org/pyquery/index.html#quickstart\" rel=\"nofollow\">PyQuery constructor</a>.</p>\n<p>Additionally, if the <tt>'base_url'</tt> keyword parameter is supplied, all\nrelative URLs will be made absolute via the value of <tt>'base_url'</tt>.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">,</span> <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">'http://www.example.com'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"take-templates\">\n<h2>Take Templates</h2>\n<p>Take templates are whitespace sensitive and are comprised of three types\nof statements:</p>\n<ul>\n<li>Comment Lines<ul>\n<li><tt># some comment</tt></li>\n</ul>\n</li>\n<li>Queries<ul>\n<li><tt>$ h1</tt></li>\n<li><tt>| text</tt></li>\n<li><tt>$ h1 | 0 text</tt></li>\n</ul>\n</li>\n<li>Directives<ul>\n<li><tt>save: h1_title</tt></li>\n<li><tt>save each: comments</tt></li>\n<li><tt>merge: *</tt></li>\n<li><tt>def: get comments</tt></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"comment-lines\">\n<h2>Comment Lines</h2>\n<p>Any line with a <tt>#</tt> as the first non-whitespace character is considered a comment line.</p>\n<pre># this line is a comment\n# the third line is a CSS selector query\n$ #main-nav a\n</pre>\n<p>Comment lines are completely ignored. Partially commented lines and multi-line comments are not supported at this time.</p>\n</div>\n<div id=\"queries\">\n<h2>Queries</h2>\n<p>There are two main types of queries in take templates:</p>\n<ul>\n<li>CSS selector queries</li>\n<li>Non-CSS selector queries</li>\n</ul>\n<p>The reason they\u2019re divided like this is because CSS selectors always go\nfirst on the line and they can be followed by non-CSS selector queries.\nNon-CSS selector queries can\u2019t be followed by CSS selector queries.\nSeems easier to read this way, but it\u2019s arbitrary and may change.</p>\n<div id=\"css-selector-queries\">\n<h3>CSS Selector Queries</h3>\n<p>CSS selector queries start with <tt>$</tt> and end either at the end of the\nline, the <tt>|</tt> character or the <tt>;</tt> character. The <tt>|</tt> character\nis the starting character for non-CSS selector queries, and the <tt>;</tt>\ncharacter ends the statement and starts an <a href=\"#inline-sub-contexts\" rel=\"nofollow\">inline sub-context</a>.</p>\n<ul>\n<li><tt>$ #siteTable .thing | text</tt></li>\n<li><tt>$ .domain a</tt></li>\n</ul>\n<p>In the first example above, the CSS selector query is\n<tt>#siteTable .thing</tt>. The second is <tt>.domain a</tt>.</p>\n<p>The CSS selectors are passed to <a href=\"https://pythonhosted.org/pyquery/index.html\" rel=\"nofollow\">PyQuery</a>, so anything PyQuery can\naccept can be used. From what I understand, there are a few <a href=\"https://github.com/gawel/pyquery/issues\" rel=\"nofollow\">bugs</a> in\nPyQuery (that may be in the underlying libraries <a href=\"http://lxml.de/\" rel=\"nofollow\">lxml</a> or\n<a href=\"https://pythonhosted.org/cssselect/\" rel=\"nofollow\">cssselect</a>). Those will come up.</p>\n</div>\n<div id=\"non-css-selector-queries\">\n<h3>Non-CSS Selector Queries</h3>\n<p>Non-CSS selector queries start with <tt>|</tt> and continue until the <tt>;</tt> character or the\nline ends. There are five non-CSS selector queries:</p>\n<ul>\n<li><strong>Element indexes</strong><ul>\n<li>Syntax: an integer</li>\n<li><tt>| 0</tt> will return the first element in the current context</li>\n<li><tt>| 1</tt> will return the second element in the current context</li>\n<li><tt>| <span class=\"pre\">-1</span></tt> will return the last element in the current context</li>\n</ul>\n</li>\n<li><strong>Attribute retrieval</strong><ul>\n<li>Syntax: <tt>[attr]</tt></li>\n<li><tt>| [href]</tt> will return the value of the <tt>href</tt> attribute of the\nfirst element in the current context</li>\n<li><tt>| 1 [href]</tt> will return the value of the <tt>href</tt> attribute of the\nsecond element in the current context</li>\n</ul>\n</li>\n<li><strong>Text retrieval</strong><ul>\n<li>Syntax: <tt>text</tt></li>\n<li><tt>| text</tt> will return the text of the current context</li>\n<li><tt>| 1 text</tt> will first get the second element in the current context\nand then return it\u2019s text</li>\n</ul>\n</li>\n<li><strong>Own text retrieval</strong><ul>\n<li>Syntax: <tt>own_text</tt></li>\n<li><tt>| own_text</tt> will return the text of the current context without the text\nfrom its children</li>\n<li><tt>| 1 own_text</tt> will first get the second element in the current context\nand then return it\u2019s text without the text from its children</li>\n</ul>\n</li>\n<li><strong>Field retrieval</strong><ul>\n<li>Syntax: <tt>.field_name</tt></li>\n<li><tt>| .description</tt> will do a dictionary lookup on the context and retrieve\nthe value of the <tt>'description'</tt> item</li>\n<li><tt>| .parent.child</tt> will do a dictionary lookup on the context and retrieve\nthe value of the <tt>'parent'</tt> and then it will lookup <tt>'child'</tt> on that value</li>\n</ul>\n</li>\n</ul>\n<p><strong>Order matters</strong>: Index queries should precede other queries. Also, only one\nof <tt>[attr]</tt>, <tt>text</tt>, <tt>own_text</tt> or <tt>.field_name</tt> queries can be used.</p>\n</div>\n</div>\n<div id=\"indentation\">\n<h2>Indentation</h2>\n<p>The level of indentation on each line defines the context for the line.</p>\n<p>The root context of a take template is the current document being\nprocessed. Every statement that is not indented is executed against the\ndocument being processed.</p>\n<p>Each line that is indented more deeply has a context that is the result\nof the last query in the parent context. For example:</p>\n<pre>$ #some-id\n    $ li\n    $ div\n</pre>\n<p>The query on the first line is executed against the document being\nprocessed. The query on the second line is executed against the result\nof the first line. So, the second line is synonomous with\n<tt>$ <span class=\"pre\">#some-id</span> li</tt>. The query on the third line is also executed against\nthe result of the first line. So, it can be re-written as\n<tt>$ <span class=\"pre\">#some-id</span> div</tt>.</p>\n<p>Another example:</p>\n<pre>$ a\n    | 0\n        | text\n        | [href]\n</pre>\n<p>The third and fourth lines retrieve the text and href attribute,\nrespectively, from the first <tt>&lt;a&gt;</tt> in the document being processed.\nThis could be rewritten as:</p>\n<pre>$ a | 0\n    | text\n    | [href]\n</pre>\n<div id=\"inline-sub-contexts\">\n<h3>Inline Sub Contexts</h3>\n<p>Inline sub-contexts allow multuple statements per line. The syntax is:</p>\n<pre>statement ; sub-context-statement\n</pre>\n<p>The main thing to note is: whatever comes after the semi-colin is treated as if it were a line with deeper indentation.</p>\n<p>Inline sub-contexts are primarily used with directives. For example, the following take template:</p>\n<pre>$ h1 | 0 text\n    save: section_title\n</pre>\n<p>Can be re-written as:</p>\n<pre>$ h1 | 0 text ; save: document_title\n</pre>\n<p>Both templates save the text in the first <tt>&lt;h1&gt;</tt> element into the result <tt>dict</tt> with the key <tt>'document_title'</tt>. More on <a href=\"#save-directive\" rel=\"nofollow\">save directives</a> later.</p>\n</div>\n</div>\n<div id=\"directives\">\n<h2>Directives</h2>\n<p>Directives are commands that are executed against the current context.\nThey\u2019re format is a directive name followed by an optional parameter list:</p>\n<pre>&lt;directive_name&gt; [: &lt;parameter&gt;[&lt;whitespace or comma&gt; &lt;parameter&gt;]*]?\n</pre>\n<p>An example of a <tt>save</tt> directive:</p>\n<pre>save : some_name\n</pre>\n<p>Not all directives require parameters. For example, the <tt>shrink</tt> directive,\nwhich collapses whitespace, does not:</p>\n<pre>shrink\n</pre>\n<p>The following directives are built-in:</p>\n<ul>\n<li><tt>save</tt>, alias <tt>:</tt><ul>\n<li>Saves a value.</li>\n</ul>\n</li>\n<li><tt>save each</tt><ul>\n<li>Creates a list of results.</li>\n</ul>\n</li>\n<li><tt>namespace</tt>, alias <tt>+</tt><ul>\n<li>Creates child <tt>dict</tt> for saving values into.</li>\n</ul>\n</li>\n<li><tt>shrink</tt><ul>\n<li>Collapses and trims whitespace.</li>\n</ul>\n</li>\n<li><tt>def</tt><ul>\n<li>Defines a new directive. <em>Currently only new directives defined in the current document are available.</em></li>\n</ul>\n</li>\n<li><tt>merge</tt>, alias <tt>&gt;&gt;</tt><ul>\n<li>Copies a value from a directive\u2019s result into the template\u2019s result.</li>\n</ul>\n</li>\n</ul>\n<div id=\"save-directive\">\n<h3>Save Directive</h3>\n<p><em>Alias:</em> <tt>:</tt></p>\n<p>Save directives save the context into the result <tt>dict</tt>. These are\ngenerally only intended to be applied to the result of non-CSS Selector\nqueries.</p>\n<p>The syntax is:</p>\n<pre>save: &lt;identifier&gt;\n</pre>\n<p><tt>:</tt> is an alias for <tt>save:</tt>. So, a save directive can also be written as:</p>\n<pre>: &lt;identifier&gt;\n</pre>\n<p>The identifier can contain anything except whitespace, a comma (<tt>,</tt>) or a semi-colin (<tt>;</tt>).\nAlso, the identifier can contain dots (<tt>.</tt>), which designate sub-<tt>dicts</tt> for\nsaving.</p>\n<p>For example, the following take template:</p>\n<pre>$ a | 0\n    | text\n        save: first_a.description\n    | [href]\n        save: first_a.url\n</pre>\n<p>And the following HTML:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://www.example.com\"</span><span class=\"p\">&gt;</span>fo sho<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://www.another.com\"</span><span class=\"p\">&gt;</span>psych out<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Will result in the following python <tt>dict</tt>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'first_a'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'fo sho'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://www.example.com'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Using the <tt>:</tt> alias, the template can be written as:</p>\n<pre>$ a | 0\n    | text\n        : first_a.text\n    | [href]\n        : first_a.href\n</pre>\n<p>Or, more succinctly:</p>\n<pre>$ a | 0\n    | text ;        : first_a.text\n    | [href] ;      : first_a.href\n</pre>\n</div>\n<div id=\"save-each-directive\">\n<h3>Save Each Directive</h3>\n<p>Save each directives produce a <tt>dict</tt> for each element in the context. Generally, these are used for repeating elements on a page. In the <a href=\"https://github.com/tiffon/take/blob/master/sample/reddit_inline_saves.take\" rel=\"nofollow\">reddit sample</a>, a save each directive is used to save each of the reddit entries.</p>\n<p>The syntax is:</p>\n<pre>save each: &lt;identifier&gt;\n    &lt;sub-context&gt;\n</pre>\n<p>The identifier can contain anything except whitespace, a comma (<tt>,</tt>) or a semi-colin (<tt>;</tt>).\nAlso, the identifier can contain dots (<tt>.</tt>), which designate sub-<tt>dict</tt>s for\nsaving.</p>\n<p>Save each directives apply the next sub-context to each of the elements\nof their context value. Put another way, save each directives repeatedly\nprocess each element of their context.</p>\n<p>For example, in the following take template, the <tt>| text</tt> and\n<tt>| [href]</tt> queries (along with saving the results) will be applied to\nevery <tt>&lt;a&gt;</tt> in the document.</p>\n<pre>$ a\n    save each: anchors\n        | text\n            save: description\n        | [href]\n            save: url\n</pre>\n<p>Applying the above take template to the following HTML:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://www.example.com\"</span><span class=\"p\">&gt;</span>fo sho<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://www.another.com\"</span><span class=\"p\">&gt;</span>psych out<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Will result in the following python <tt>dict</tt>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'anchors'</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'fo sho'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://www.example.com'</span>\n        <span class=\"p\">},{</span>\n            <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'psych out'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://www.another.com'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"namespace-directive\">\n<h3>Namespace Directive</h3>\n<p><em>Alias:</em> <tt>+</tt></p>\n<p>Namespace directives create a sub-<tt>dict</tt> on the current result-value and everyting in the\nnext sub-context is saved into the new <tt>dict</tt>.</p>\n<p>The syntax is:</p>\n<pre>namespace: &lt;identifier&gt;\n    &lt;sub-context&gt;\n</pre>\n<p><tt>&lt;identifier&gt;</tt> is the key the sub-<tt>dict</tt> is saved as.</p>\n<p>An example:</p>\n<pre>$ a | 0\n    namespace: first_a\n        | text\n            save: description\n        | [href]\n            save: url\n</pre>\n<p>Applying the above take template to the following HTML:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://www.example.com\"</span><span class=\"p\">&gt;</span>fo sho<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://www.another.com\"</span><span class=\"p\">&gt;</span>psych out<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Will result in the following python <tt>dict</tt>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'first_a'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'fo sho'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://www.example.com'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The <tt>description</tt> and <tt>url</tt> fields are saved in the <tt>first_a</tt> namespace. This reduces\nthe need for save directives like: <tt>first_a.description</tt>.</p>\n<p><tt>+</tt> is an alias for the <tt>namespace</tt> directive. So, the template above can also be written as:</p>\n<pre>$ a | 0\n    +       : first_a\n        | text\n            save: description\n        | [href]\n            save: url\n</pre>\n<p>Or, more succinctly, using inline sub-contexts and the <tt>:</tt> alias for save:</p>\n<pre>$ a | 0 ; +         : first_a\n        | text ;        : description\n        | [href] ;      : url\n</pre>\n</div>\n<div id=\"shrink-directive\">\n<h3>Shrink Directive</h3>\n<p>The <tt>shrink</tt> directive trims and collapses whitespace from text. It doesn\u2019t take any parameters,\nso the usage is just the word <tt>shrink</tt>:</p>\n<pre>$ p | text ;            : with_spacing\n$ p | text ; shrink ;   : shrink_on_text\n</pre>\n<p>If applied to an element, it will be applied to the element\u2019s text.</p>\n<pre>$ p ; shrink ;          : shrink_on_elem\n</pre>\n<p>Applying the above statements to the following HTML:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello       World!<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Will result in the following python <tt>dict</tt>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'with_spacing'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello       World!'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'shrink_on_text'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello World!'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'shrink_on_elem'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello World!'</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"def-directive\">\n<h3>Def Directive</h3>\n<p>The <tt>def</tt> directive saves a sub-context as a custom directive which can be invoked later. This is a\nway to re-use sections of a take template. Directives created in this fashion <strong>always result in a new</strong>\n<tt>dict</tt>.</p>\n<p>The syntax is:</p>\n<pre>def: &lt;identifier&gt;\n    &lt;sub-context&gt;\n</pre>\n<p>For example:</p>\n<pre>def: get first link\n    $ a | 0\n        | text ;    : description\n        | [href] ;  : url\n</pre>\n<p>In the above template, a new directive named <tt>get first link</tt> is created. The new directive saves\nthe text and href attribute from the first <tt>&lt;a&gt;</tt> element in the context onto which it is\ninvoked. The directive will always result in a new <tt>dict</tt> containing <tt>description</tt> and\n<tt>url</tt> keys.</p>\n<p>The identifier can contain spaces; all spaces are collapsed to be a single space,\ne.g. <tt>def: some\u00a0\u00a0\u00a0 name</tt> is collapsed to <tt>def: some name</tt>.</p>\n<p>Directives created by <tt>def</tt> are invoked without parameters.</p>\n<p>The example below defines a custom directive and applies it against the first <tt>&lt;nav&gt;</tt> element and the first <tt>&lt;aside&gt;</tt> element.</p>\n<pre>def: get first link\n    $ a | 0\n        | text ;    : description\n        | [href] ;  : url\n\n$ nav\n    get first link\n        save: first_nav_link\n$ aside\n    get first link\n        save: first_aside_link\n</pre>\n<p>Given the following HTML:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">nav</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/local/a\"</span><span class=\"p\">&gt;</span>nav item A<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/local/b\"</span><span class=\"p\">&gt;</span>nav item B<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">nav</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">aside</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>some description<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://ext.com/a\"</span><span class=\"p\">&gt;</span>aside item A<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://ext.com/b\"</span><span class=\"p\">&gt;</span>aside item B<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">aside</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>The template would result in:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'first_nav_link'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'nav item A'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'/local/a'</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'first_aside_link'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'aside item A'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://ext.com/a'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Each time the directive is invoked it returns a python <tt>dict</tt> containing <tt>'description'</tt> and <tt>'url'</tt> keys. The return value of the first invocation is saved into the template\u2019s result as <tt>'first_nav_link'</tt>. The second return value is saved as <tt>'first_aside_link'</tt></p>\n<p>Another way to save the data from a custom directive is to use the <tt>| .property</tt> query. This allows renaming, too:</p>\n<pre>def: get first link\n    $ a | 0\n        | text ;    : description\n        | [href] ;  : url\n\n$ nav\n    get first link\n        | .url ;\n            save: first_nav_url\n$ aside\n    get first link\n        | .url ;\n            save: first_aside_url\n</pre>\n<p>The above template would result in the following <tt>dict</tt>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'first_nav_url'</span><span class=\"p\">:</span> <span class=\"s1\">'/local/a'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'first_aside_url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://ext.com/a'</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"merge-directive\">\n<h3>Merge Directive</h3>\n<p><em>Alias:</em> <tt>&gt;&gt;</tt></p>\n<p>The <tt>merge</tt> directive copies properties from the context\u2019s value and saves them into the result value. The main\nuse-case is extracting data from the result of a custom directive. <tt>merge</tt> performs a shallow copy.</p>\n<p>The syntax is:</p>\n<pre>merge: &lt;field&gt; [&lt;field&gt;]*\n</pre>\n<p>The parameter(s) are the keys to copy. They are separated by spaces or a comma and new line.</p>\n<p>The special parameter <tt>*</tt> can be used to copy all the keys. If used, it should be the only parameter:</p>\n<pre>merge: *\n</pre>\n<p><em>Note:</em> <tt>merge</tt> expects the context\u2019s value to be a <tt>dict</tt>; behind the scenes it uses the <tt>mapping[key]</tt> syntax.</p>\n<p>An example:</p>\n<pre>def: link info\n    | text              : text\n    | [href]            : url\n    | [title]           : title\n\n$ footer a\n    save each               : footer_links\n        link info\n            merge               : url\n</pre>\n<p>Applying the above take template to the following HTML:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"main\"</span><span class=\"p\">&gt;</span>\n            ...\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/about\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"All about our company\"</span><span class=\"p\">&gt;</span>Team<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://blog.example.com\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"Our self-promos\"</span><span class=\"p\">&gt;</span>Blog<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"www.facebook.com/example\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"Our facebook page\"</span><span class=\"p\">&gt;</span>Facebook<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/privacy\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"Legalese\"</span><span class=\"p\">&gt;</span>Privacy<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Will result in the following python <tt>dict</tt>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'footer_links'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'/about'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'https://blog.example.com'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'www.facebook.com/example'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'/privacy'</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>To copy more than one property, separate the property names with a space or a comma and new-line:</p>\n<pre>                    # separated by spaces\nmerge               : url title\n\n                    # separated with comma line-continuation\nmerge               : url,\n                      title\n\n                    # using the `&gt;&gt;` alias\n&gt;&gt;                  : url,\n                      title\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1505967, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "3a4a348fee9eb81448b8b6b3592269ec", "sha256": "d47d67a3d723b4e5144e45c88dbf05317ecdddc362e7cdd3325fe7e4e7cc6879"}, "downloads": -1, "filename": "take-0.0.0.tar.gz", "has_sig": false, "md5_digest": "3a4a348fee9eb81448b8b6b3592269ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8874, "upload_time": "2015-03-25T08:13:58", "upload_time_iso_8601": "2015-03-25T08:13:58.494578Z", "url": "https://files.pythonhosted.org/packages/84/45/f82d9aadea3033e8a9b968b6fa3a646635b03bbedf89471b3962e21ac3fa/take-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "e8b957fdf2507820e82eb97132e4c02b", "sha256": "904a8e3aa2a8f1ea42b274f1fab06913aacb784491dd34c863fa8a49de4497cf"}, "downloads": -1, "filename": "take-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e8b957fdf2507820e82eb97132e4c02b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14174, "upload_time": "2015-03-25T08:28:53", "upload_time_iso_8601": "2015-03-25T08:28:53.775523Z", "url": "https://files.pythonhosted.org/packages/26/17/ba10aaec9004a86f4e15cb5f09697b07cd193dc107a1abf76b4e770eec2e/take-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "abb6da567bed40713c6086a5c9f7b56e", "sha256": "e794d99b53bd0f0a7cf3fb75edba24131de23700e485d24e3f3f4ede1b280de5"}, "downloads": -1, "filename": "take-0.0.2.tar.gz", "has_sig": false, "md5_digest": "abb6da567bed40713c6086a5c9f7b56e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14158, "upload_time": "2015-03-25T08:38:20", "upload_time_iso_8601": "2015-03-25T08:38:20.029010Z", "url": "https://files.pythonhosted.org/packages/fd/11/1494a9d8216f6114a585654effbcd0239668874d0d69bd78435c60b50e30/take-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "dc4cf5f4d4b3f53194c54d529224badd", "sha256": "2268eefbf38261ecfc451ef1b4de5da51884f9fb5cd52695043dcc7a7aeae609"}, "downloads": -1, "filename": "take-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dc4cf5f4d4b3f53194c54d529224badd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14589, "upload_time": "2015-03-25T11:41:51", "upload_time_iso_8601": "2015-03-25T11:41:51.416367Z", "url": "https://files.pythonhosted.org/packages/48/e4/2a1058681315702b4738c84ab8257fd5dba5ab694bf243ca4c8885b0ea42/take-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "aabe8da96539d8a213a41719db0aec0b", "sha256": "8614577f6382db069928998a10e05ac05bf8ccd06548bdf3fc3bcc421b5a47ab"}, "downloads": -1, "filename": "take-0.0.4.tar.gz", "has_sig": false, "md5_digest": "aabe8da96539d8a213a41719db0aec0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14954, "upload_time": "2015-03-27T07:15:47", "upload_time_iso_8601": "2015-03-27T07:15:47.183934Z", "url": "https://files.pythonhosted.org/packages/45/88/445c5c9ceb26f334d9e3dd6e5ae7b87970ea0988c13bce5fa7ec5a8d4287/take-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "d06bf0b8a3a69f9d3779afbc53b4affc", "sha256": "5e09f68a74866de6007dfb0459f68d78d185e28956c3b28c19c0683505c35015"}, "downloads": -1, "filename": "take-0.0.5.tar.gz", "has_sig": false, "md5_digest": "d06bf0b8a3a69f9d3779afbc53b4affc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14599, "upload_time": "2015-04-06T08:01:48", "upload_time_iso_8601": "2015-04-06T08:01:48.322002Z", "url": "https://files.pythonhosted.org/packages/32/58/b6039201d42a00d376a077cfdc2fba8fb92dfe6b487da74b8c7e2048fb59/take-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "0b6f13157b8328626f87f0523a8f0a12", "sha256": "5d338645614298e71d346f5f161b0cf2c232dee6332e9679660096bc00693103"}, "downloads": -1, "filename": "take-0.0.6.tar.gz", "has_sig": false, "md5_digest": "0b6f13157b8328626f87f0523a8f0a12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14601, "upload_time": "2015-04-06T08:47:09", "upload_time_iso_8601": "2015-04-06T08:47:09.412261Z", "url": "https://files.pythonhosted.org/packages/8c/dd/c9d3e266446af0006761abb03c24f7c37ed343bf74191702c4f4b67593dd/take-0.0.6.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "45943b30abcc4d3c54c46a4095ab8547", "sha256": "2ffb09f96feda07a6ff0c169d8147fcf752e3858f1c00bb59da0f00d04ab5edb"}, "downloads": -1, "filename": "take-0.1.0.tar.gz", "has_sig": false, "md5_digest": "45943b30abcc4d3c54c46a4095ab8547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16015, "upload_time": "2015-04-06T13:51:29", "upload_time_iso_8601": "2015-04-06T13:51:29.138184Z", "url": "https://files.pythonhosted.org/packages/0a/6c/a56f62e3f0cde8f565dda8307968934c450ddece8586143ed0993a4f11ef/take-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9dfd00698ff4ad230995bf1ce1d2bfe0", "sha256": "d8fa0f6ed6f86df43c7be205c4f34516c9d13d0fc7f8694a5f4b0bbeb19e2150"}, "downloads": -1, "filename": "take-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9dfd00698ff4ad230995bf1ce1d2bfe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23854, "upload_time": "2015-04-15T08:19:26", "upload_time_iso_8601": "2015-04-15T08:19:26.421411Z", "url": "https://files.pythonhosted.org/packages/89/27/397380ccfe887307213e5d5d917a20b573f6cca50c39f90f0fcb79e3b8d0/take-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9dfd00698ff4ad230995bf1ce1d2bfe0", "sha256": "d8fa0f6ed6f86df43c7be205c4f34516c9d13d0fc7f8694a5f4b0bbeb19e2150"}, "downloads": -1, "filename": "take-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9dfd00698ff4ad230995bf1ce1d2bfe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23854, "upload_time": "2015-04-15T08:19:26", "upload_time_iso_8601": "2015-04-15T08:19:26.421411Z", "url": "https://files.pythonhosted.org/packages/89/27/397380ccfe887307213e5d5d917a20b573f6cca50c39f90f0fcb79e3b8d0/take-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:19 2020"}