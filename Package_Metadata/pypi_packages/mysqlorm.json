{"info": {"author": "cirlmcesc", "author_email": "cirlmcesc_ma@163.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# mysqlorm\n\n\nTL:DR\n-----\nA simple ORM MySQL operation Library, running on Python3.\nAutomatic long connection\uff0csupport chain call, more secure statement generation and the MySQL query can be constructed more elegantly.\n\n\nInstallation\n------------\nInstall via pip\n\n```\n(sudo) pip(3) install mysqlorm\n```\n\n\nUsage\n-----\nBegin by importing the mysqlorm module:\n\n```python\nfrom mysqlorm import ORMModel, MySQLConnect\n```\n\nYou need to link the database before use\uff1a\n\n```python\nmysql_connect_config = {\n    \"host\": \"host\",\n    \"user\": \"user\",\n    \"passwd\": \"passwd\",\n    \"db\": \"db\",\n}\nMySQLConnect.connect(mysql_connect_config)\n```\n\nCreate a class to inherit ormmodel and set `table_name` attribute:\n(If no `table_name` attribute is set, use the lowercase class name by default.)\n\n```python\nclass ExampleModel(ORMModel):\n    table_name = \"exampletable\"\n```\n\nHow to use\n----------\n\n* Insert:\n\n    ```python\n    ExampleModel.insert({\"field1\": \"value1\", \"field2\", \"value2\"}) # single insert\n    ExampleModel.insert(( # batch insert, can use tuple or list\n        {\"field1\": \"value1\", \"field2\", \"value2\"}, \n        {\"field1\": \"value1\", \"field2\", \"value2\"}))\n    ```\n\n* Where:\n\n    Support call chaining.\n    The `where` method can pass 2 or 3 parameters.\n    If two parameters are passed, the comparison symbol uses the equal sign by default.\n    Call chaining use `and` connection condition, you must use `orWhere` method to `or` condition\n\n    ```python\n    ExampleModel.where(\"field\", \"value\").where(\"field\", \">\", \"value\")\n    ExampleModel.where(\"field\", \"value\").orWhere(\"field\", \">\", \"value\")\n    ```\n\n    Support batch afferent condition, can use tuple or list.\n    Use `and` connection condition\n\n    ```python\n    ExampleModel.where(((\"filed1\", \"value1\"), (\"filed2\", \"value2\")))\n    ```\n\n    Support aggregation condition query.\n    Or you can use lambda method.\n\n    ```python\n    def condition(query):\n        return query.where(\"field\", \"value\").where(\"field1\", \">\", \"value\")\n\n    ExampleModel.where(condition).orWhere(\n        lambda query: return query.where(\"field\", \"value\").where(\"field1\", \"<\", \"value\")\n    )\n    ```\n\n    The `like` condition uses the \"LOCATE()\" implementation,\n    because the `%` symbol is a special symbol in Python will cause some problems. \n    So do not pass in the `where` method the parameter with the `%` symbol.\n\n    ```python\n    ExampleModel.where(\"file\", 'like', \"value\")\n    ```\n\n    You can use `whereIn` and `whereNotIn` method.\n    Can use tuple or list.\n\n    ```python\n    ExampleModel.whereIn(\"field\", TupleOrList).whereNotIn(\"field\", TupleOrList)\n    ```\n\n    You can use `whereBetween` and `whereNotBetween`.\n\n    ```python\n    ExampleModel.whereBetween(\"field\", \"from_condition\", \"to_condition\"\n        ).whereNotBetween(\"field\", \"from_condition\", \"to_condition\")\n    ```\n\n    You can use `whereNull` and `whereNotNull`.\n\n    ```python\n    ExampleModel.whereNull(\"field1\").whereNotNull(\"field2\")\n    ```\n\n* Query:\n\n    You can use `select` method to defining query fields.\n    If a parameter is not passed, use by default `*`.\n    The default is to query `id`.\n    Or can not use `select` method.\n\n    ```python\n    query = ExampleModel.select(\"field1\", \"field2\", \"field3\")# n field parameters can be passed in.\n    ```\n\n    All queries support the `where` method conditional queries.\n\n    ```python\n    query.where(\"field\", \"value\")\n    ```\n\n    You can use `when` method.\n    Execute the query when the value is true or skip.\n    The second parameter can be a function, like the use of the `where` method.\n\n    ```python\n    import random\n    a = random.choice(range(1, 10))\n    b = random.choice(range(1, 10))\n    query.when(a != b, condition).when(a == b, lambda query: return query.where(\"field\", \"value\"))\n    ```\n\n    You can use `orderBy` method to sort resault.\n    The `orderBy` method can pass 1 or 2 parameters.\n    If one parameter passed, use 'ASC' by default.\n\n    ```python\n    query.orderBy(\"field\")\n    ```\n\n    You can use `groupBy` method\n    But you must pay attention to the problems caused by `sql_mode=only_full_group_by`\n\n    ```python\n    query.groupBy(\"field\")\n    ```\n\n    You can use `limit` method\n    The `where` method can pass 1 or 2 parameters.\n    If one parameter is passed, offer use 0 by default.\n\n    ```python\n    query.limit(0, 10)\n    ```\n\n    The query returns are all model instances.\n    Can easy to operate on a single instance.\n\n    ```python\n    query.all() # to get all data\n    query.find(1) # to find data from id\n    query.get() # to get data what query according to conditions\n    query.first() # to get first raw data what query according to conditions\n    ```\n\n* Update:\n\n    ```python\n    # The `update` method supports the `where` conditions.\n    ExampleModel.update({\"field1\": \"value1\", \"field2\", \"value2\"}) # batch update\n    ExampleModel.where(\"field\", \"value\").update({\"field1\": \"value1\"})\n    ```\n\n* Delete:\n\n    ```python\n    # The `delete` method supports the `where` conditions.\n    ExampleModel.where(\"field\", \"value\").delete()\n    ```\n\n* ORMModel:\n\n    ORMModel instances can be operated on a variety of operations.\n    You can get a ormmodel instance in this way:\n\n    ```python\n    example = ExampleModel(attributes=attr) # attr must be a dict that matches the database field\n    ```\n\n    You can use the `save` method to insert data.\n\n    ```python\n    example.save()\n    ```\n\n    You can use the `save` method to update data or use the `delete` method to delete data.\n    But the instances must from query resault.\n\n    ```python\n    example = ExampleModel.find(1)\n    example.field = \"new value\"\n    example.save() # update data\n    example.delete() # delete data\n    ```\n\n    Converting ormmodel instances to dict with `dict` method\n\n    ```python\n    example.dict()\n    ```\n\nTODO\n----\n* Perfect the join table query.\n* Add more functions for ormmodel.\n* Increase the association between ormmodel.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cirlmcesc/mysqlorm", "keywords": "mysql orm", "license": "", "maintainer": "", "maintainer_email": "", "name": "mysqlorm", "package_url": "https://pypi.org/project/mysqlorm/", "platform": "", "project_url": "https://pypi.org/project/mysqlorm/", "project_urls": {"Homepage": "https://github.com/cirlmcesc/mysqlorm"}, "release_url": "https://pypi.org/project/mysqlorm/0.2/", "requires_dist": null, "requires_python": "", "summary": "A simple ORM MySQL operation Library, running on Python3.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mysqlorm</h1>\n<h2>TL:DR</h2>\n<p>A simple ORM MySQL operation Library, running on Python3.\nAutomatic long connection\uff0csupport chain call, more secure statement generation and the MySQL query can be constructed more elegantly.</p>\n<h2>Installation</h2>\n<p>Install via pip</p>\n<pre><code>(sudo) pip(3) install mysqlorm\n</code></pre>\n<h2>Usage</h2>\n<p>Begin by importing the mysqlorm module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mysqlorm</span> <span class=\"kn\">import</span> <span class=\"n\">ORMModel</span><span class=\"p\">,</span> <span class=\"n\">MySQLConnect</span>\n</pre>\n<p>You need to link the database before use\uff1a</p>\n<pre><span class=\"n\">mysql_connect_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"host\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"user\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"passwd\"</span><span class=\"p\">:</span> <span class=\"s2\">\"passwd\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"db\"</span><span class=\"p\">:</span> <span class=\"s2\">\"db\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">MySQLConnect</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">mysql_connect_config</span><span class=\"p\">)</span>\n</pre>\n<p>Create a class to inherit ormmodel and set <code>table_name</code> attribute:\n(If no <code>table_name</code> attribute is set, use the lowercase class name by default.)</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleModel</span><span class=\"p\">(</span><span class=\"n\">ORMModel</span><span class=\"p\">):</span>\n    <span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"exampletable\"</span>\n</pre>\n<h2>How to use</h2>\n<ul>\n<li>\n<p>Insert:</p>\n<pre><span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">({</span><span class=\"s2\">\"field1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value2\"</span><span class=\"p\">})</span> <span class=\"c1\"># single insert</span>\n<span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">((</span> <span class=\"c1\"># batch insert, can use tuple or list</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"field1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value2\"</span><span class=\"p\">},</span> \n    <span class=\"p\">{</span><span class=\"s2\">\"field1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value2\"</span><span class=\"p\">}))</span>\n</pre>\n</li>\n<li>\n<p>Where:</p>\n<p>Support call chaining.\nThe <code>where</code> method can pass 2 or 3 parameters.\nIf two parameters are passed, the comparison symbol uses the equal sign by default.\nCall chaining use <code>and</code> connection condition, you must use <code>orWhere</code> method to <code>or</code> condition</p>\n<pre><span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n<span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">orWhere</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n</pre>\n<p>Support batch afferent condition, can use tuple or list.\nUse <code>and</code> connection condition</p>\n<pre><span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(((</span><span class=\"s2\">\"filed1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s2\">\"filed2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value2\"</span><span class=\"p\">)))</span>\n</pre>\n<p>Support aggregation condition query.\nOr you can use lambda method.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">condition</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">orWhere</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The <code>like</code> condition uses the \"LOCATE()\" implementation,\nbecause the <code>%</code> symbol is a special symbol in Python will cause some problems.\nSo do not pass in the <code>where</code> method the parameter with the <code>%</code> symbol.</p>\n<pre><span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"file\"</span><span class=\"p\">,</span> <span class=\"s1\">'like'</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can use <code>whereIn</code> and <code>whereNotIn</code> method.\nCan use tuple or list.</p>\n<pre><span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">whereIn</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"n\">TupleOrList</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">whereNotIn</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"n\">TupleOrList</span><span class=\"p\">)</span>\n</pre>\n<p>You can use <code>whereBetween</code> and <code>whereNotBetween</code>.</p>\n<pre><span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">whereBetween</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"from_condition\"</span><span class=\"p\">,</span> <span class=\"s2\">\"to_condition\"</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">whereNotBetween</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"from_condition\"</span><span class=\"p\">,</span> <span class=\"s2\">\"to_condition\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can use <code>whereNull</code> and <code>whereNotNull</code>.</p>\n<pre><span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">whereNull</span><span class=\"p\">(</span><span class=\"s2\">\"field1\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">whereNotNull</span><span class=\"p\">(</span><span class=\"s2\">\"field2\"</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Query:</p>\n<p>You can use <code>select</code> method to defining query fields.\nIf a parameter is not passed, use by default <code>*</code>.\nThe default is to query <code>id</code>.\nOr can not use <code>select</code> method.</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s2\">\"field1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field3\"</span><span class=\"p\">)</span><span class=\"c1\"># n field parameters can be passed in.</span>\n</pre>\n<p>All queries support the <code>where</code> method conditional queries.</p>\n<pre><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can use <code>when</code> method.\nExecute the query when the value is true or skip.\nThe second parameter can be a function, like the use of the <code>where</code> method.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">!=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">condition</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">))</span>\n</pre>\n<p>You can use <code>orderBy</code> method to sort resault.\nThe <code>orderBy</code> method can pass 1 or 2 parameters.\nIf one parameter passed, use 'ASC' by default.</p>\n<pre><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">orderBy</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can use <code>groupBy</code> method\nBut you must pay attention to the problems caused by <code>sql_mode=only_full_group_by</code></p>\n<pre><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">groupBy</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can use <code>limit</code> method\nThe <code>where</code> method can pass 1 or 2 parameters.\nIf one parameter is passed, offer use 0 by default.</p>\n<pre><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>The query returns are all model instances.\nCan easy to operate on a single instance.</p>\n<pre><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span> <span class=\"c1\"># to get all data</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># to find data from id</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"c1\"># to get data what query according to conditions</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span> <span class=\"c1\"># to get first raw data what query according to conditions</span>\n</pre>\n</li>\n<li>\n<p>Update:</p>\n<pre><span class=\"c1\"># The `update` method supports the `where` conditions.</span>\n<span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">\"field1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value2\"</span><span class=\"p\">})</span> <span class=\"c1\"># batch update</span>\n<span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">\"field1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">})</span>\n</pre>\n</li>\n<li>\n<p>Delete:</p>\n<pre><span class=\"c1\"># The `delete` method supports the `where` conditions.</span>\n<span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"field\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p>ORMModel:</p>\n<p>ORMModel instances can be operated on a variety of operations.\nYou can get a ormmodel instance in this way:</p>\n<pre><span class=\"n\">example</span> <span class=\"o\">=</span> <span class=\"n\">ExampleModel</span><span class=\"p\">(</span><span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"n\">attr</span><span class=\"p\">)</span> <span class=\"c1\"># attr must be a dict that matches the database field</span>\n</pre>\n<p>You can use the <code>save</code> method to insert data.</p>\n<pre><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>You can use the <code>save</code> method to update data or use the <code>delete</code> method to delete data.\nBut the instances must from query resault.</p>\n<pre><span class=\"n\">example</span> <span class=\"o\">=</span> <span class=\"n\">ExampleModel</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"s2\">\"new value\"</span>\n<span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span> <span class=\"c1\"># update data</span>\n<span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span> <span class=\"c1\"># delete data</span>\n</pre>\n<p>Converting ormmodel instances to dict with <code>dict</code> method</p>\n<pre><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ul>\n<h2>TODO</h2>\n<ul>\n<li>Perfect the join table query.</li>\n<li>Add more functions for ormmodel.</li>\n<li>Increase the association between ormmodel.</li>\n</ul>\n\n          </div>"}, "last_serial": 4087741, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "860ee856c5abe008fffe81fe9a5abbb7", "sha256": "d1c66987fe1aaeb933fb5eb789aa597594a32841c7990b6becf2bb6a72d8e983"}, "downloads": -1, "filename": "mysqlorm-0.1.tar.gz", "has_sig": false, "md5_digest": "860ee856c5abe008fffe81fe9a5abbb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8965, "upload_time": "2018-07-21T03:12:07", "upload_time_iso_8601": "2018-07-21T03:12:07.768333Z", "url": "https://files.pythonhosted.org/packages/b9/87/de4ceb4bc786fef21eaba451e7586d8c14cfa655d414b16cefc1ca0d5071/mysqlorm-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "891ae3f66db0b470984efc143983dfcd", "sha256": "03265d61c5a077f1f79fe382a297f2d433f45210b97e1629411fd267a5b1ffb6"}, "downloads": -1, "filename": "mysqlorm-0.2.tar.gz", "has_sig": false, "md5_digest": "891ae3f66db0b470984efc143983dfcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9108, "upload_time": "2018-07-21T03:46:43", "upload_time_iso_8601": "2018-07-21T03:46:43.044423Z", "url": "https://files.pythonhosted.org/packages/ae/5f/b7f7d28739acf47100342e3a5ade3f47164943a6b4f3443887a500396949/mysqlorm-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "891ae3f66db0b470984efc143983dfcd", "sha256": "03265d61c5a077f1f79fe382a297f2d433f45210b97e1629411fd267a5b1ffb6"}, "downloads": -1, "filename": "mysqlorm-0.2.tar.gz", "has_sig": false, "md5_digest": "891ae3f66db0b470984efc143983dfcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9108, "upload_time": "2018-07-21T03:46:43", "upload_time_iso_8601": "2018-07-21T03:46:43.044423Z", "url": "https://files.pythonhosted.org/packages/ae/5f/b7f7d28739acf47100342e3a5ade3f47164943a6b4f3443887a500396949/mysqlorm-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:01 2020"}