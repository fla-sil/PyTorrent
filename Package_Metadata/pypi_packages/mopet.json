{"info": {"author": "Caglar Cakan", "author_email": "cakan@ni.tu-berlin.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<p align=\"center\">\n  <a href=\"https://travis-ci.org/neurolib-dev/neurolib\">\n  \t<img alt=\"Build\" src=\"https://travis-ci.org/caglorithm/mopet.svg?branch=master\"></a>\n\n  <a href=\"https://www.python.org/downloads/release\">\n  \t<img alt=\"Python 3.6 + 3.7\" src=\"https://img.shields.io/badge/python-3.6 + 3.7-blue.svg\"></a>\n\n  <a href=\"https://github.com/caglorithm/mopet/releases\">\n  \t<img alt=\"Release\" src=\"https://img.shields.io/github/v/release/caglorithm/mopet\"></a>\n\n  <a href=\"https://pypi.org/project/mopet/\">\n  \t<img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/mopet\"></a>\n\n  <a href=\"https://codecov.io/gh/caglorithm/mopet\">\n  \t<img alt=\"codecov\" src=\"https://codecov.io/gh/caglorithm/mopet/branch/master/graph/badge.svg\"></a>\n\n  <a href=\"https://pepy.tech/project/mopet\">\n  \t<img alt=\"Downloads\" src=\"https://pepy.tech/badge/mopet\"></a>\n\n  <a href=\"https://github.com/psf/black\">\n  \t<img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n\n</p>\n\n\n# mopet \ud83d\udef5\n*The mildly ominous parameter exploration toolkit*\n\nIsn't it strange that, although parameter explorations are a crucial part of computational modeling, there are almost no Python tools available for making your life easier? \n`mopet` is here to help! You can run extensive grid searches in parallel (powered by `ray`) and store extremely huge amounts of data into a HDF file (powered by `pytables`) for later analysis - or whatever your excuse is for buying a yet another hard disk. \n\n# Installation \ud83d\udcbb\nThe easiest way to get going is to install the pypi package using `pip`:\n\n```\npip install mopet\n```\nAlternatively, you can also clone this repository and install all dependencies with\n\n```\ngit clone https://github.com/caglorithm/mopet.git\ncd mopet/\npip install -r requirements.txt\npip install .\n```\n\n# Example usage \ud83d\udc1d\nSetting up an exploration is as easy as can be!\n\n```python\n# first we define an toy evaluation function\ndef distance_from_circle(params):\n\t# let's simply calculate the distance of \n\t# the x-y parameters to the unit circle\n    distance = abs((params[\"x\"] ** 2 + params[\"y\"] ** 2) - 1)\n\n    # we package the result in a dictionary\n    result = {\"result\" : distance}\n    return result\n\n``` \n\nLet's set up the exploration by defining the parameters to explore and passing the evaluation function from above:\n\n```python\nimport numpy as np\nimport mopet\n\nexplore_params = {\"x\": np.linspace(-2, 2, 21), \"y\": np.linspace(-2, 2, 21)}\nex = mopet.Exploration(distance_from_circle, explore_params)\n```\n\nRunning the exploration is in parallel and is handled by `ray`. You can also use a private cluster or cloud infrastructure, see [here](https://ray.readthedocs.io/en/latest/autoscaling.html) for more info.\n\n```python\nex.run()\n>> 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 441/441 [426.57it/s]\nex.load_results()\n```\n\nAn overview of the runs and runs is given as a `pandas` DataFrame, available as `ex.df`. Here we load the result, which is simply a `float`, directly into the DataFrame. However, if the result was a timeseries (a `numpy.ndarray`), we could process it at this stage and extract some scalar value, for example the amplitude of the data or the dominant frequency. Using some fancy pivoting, we can create a 2D matrix with the results as entries\n\n\n```python\nex.df[\"result\"] = None\nfor r in ex.df.index:\n    ex.df.loc[r, \"result\"] = ex.results[r]['result']\n\npivoted = ex.df.pivot_table(values='result', index = 'y', columns='x', aggfunc='first')\n```\n<p align=\"center\">\n  <img src=\"https://github.com/caglorithm/mopet/raw/master/resources/pandas_pivot_table.png\", width=\"480\">\n</p>\n\nLet's plot the results!\n\n```python\n\nimport matplotlib.pyplot as plt\n# a nice color map\nplt.imshow(pivoted, \\\n           extent = [min(ex.df.x), max(ex.df.x),\n                     min(ex.df.y), max(ex.df.y)], origin='lower')\nplt.colorbar(label='Distance from unit circle')\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n```\n\n<p align=\"center\">\n  <img src=\"https://github.com/caglorithm/mopet/raw/master/resources/unit_circle.png\", width=\"350\">\n</p>\n\n## More information \ud83d\udcd3\n\n### Inspired by \ud83e\udd14\n\n`mopet` is inspired by [`pypet`](https://github.com/SmokinCaterpillar/pypet), a wonderful python parameter exploration toolkit. I have been using `pypet` for a very long time and I'm greatful for its existence! Unfortunately, the project is not maintained anymore and has run into several compatibility issues, which was the primary reason why I built `mopet`. \n\n### Built With \ud83d\udc9e\n\n`mopet` is built on other amazing open source projects:\n\n* [`ray`](https://github.com/ray-project/ray) - A fast and simple framework for building and running distributed applications.\n* [`pytables`](https://github.com/PyTables/PyTables) - A Python package to manage extremely large amounts of data.\n* [`tqdm`](https://github.com/tqdm/tqdm) - A Fast, Extensible Progress Bar for Python and CLI\n* [`pandas`](https://github.com/pandas-dev/pandas) - Flexible and powerful data analysis / manipulation library for Python\n* [`numpy`](https://github.com/numpy/numpy) - The fundamental package for scientific computing with Python\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/caglorithm/mopet", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mopet", "package_url": "https://pypi.org/project/mopet/", "platform": "", "project_url": "https://pypi.org/project/mopet/", "project_urls": {"Homepage": "https://github.com/caglorithm/mopet"}, "release_url": "https://pypi.org/project/mopet/0.1.1/", "requires_dist": ["ray", "numpy (>=1.16)", "tables", "pandas", "tqdm", "aiohttp", "psutil", "setproctitle", "grpcio"], "requires_python": ">=3.6, <3.8", "summary": "The mildly ominous parameter exploration toolkit", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <a href=\"https://travis-ci.org/neurolib-dev/neurolib\" rel=\"nofollow\">\n  \t<img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04ffe8190d15d2c1a7be98fdfb43cfed51cfc02a/68747470733a2f2f7472617669732d63692e6f72672f6361676c6f726974686d2f6d6f7065742e7376673f6272616e63683d6d6173746572\"></a>\n  <a href=\"https://www.python.org/downloads/release\" rel=\"nofollow\">\n  \t<img alt=\"Python 3.6 + 3.7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc58ea82b16d9e13db002af81639dc4960f40f8a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e36202b20332e372d626c75652e737667\"></a>\n  <a href=\"https://github.com/caglorithm/mopet/releases\" rel=\"nofollow\">\n  \t<img alt=\"Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/797f7ee246b6068ceaa705e539a1fbc707ecdde7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6361676c6f726974686d2f6d6f706574\"></a>\n  <a href=\"https://pypi.org/project/mopet/\" rel=\"nofollow\">\n  \t<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5db90d2b03bfdbca58bbed65c2e534fb8183a750/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6f706574\"></a>\n  <a href=\"https://codecov.io/gh/caglorithm/mopet\" rel=\"nofollow\">\n  \t<img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e27a7da67698439d4e464f1d3bfabffc72c915a/68747470733a2f2f636f6465636f762e696f2f67682f6361676c6f726974686d2f6d6f7065742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n  <a href=\"https://pepy.tech/project/mopet\" rel=\"nofollow\">\n  \t<img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/152e0be40c8428b93ab845e901b3e2f464fddf1f/68747470733a2f2f706570792e746563682f62616467652f6d6f706574\"></a>\n  <a href=\"https://github.com/psf/black\" rel=\"nofollow\">\n  \t<img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n</p>\n<h1>mopet \ud83d\udef5</h1>\n<p><em>The mildly ominous parameter exploration toolkit</em></p>\n<p>Isn't it strange that, although parameter explorations are a crucial part of computational modeling, there are almost no Python tools available for making your life easier?\n<code>mopet</code> is here to help! You can run extensive grid searches in parallel (powered by <code>ray</code>) and store extremely huge amounts of data into a HDF file (powered by <code>pytables</code>) for later analysis - or whatever your excuse is for buying a yet another hard disk.</p>\n<h1>Installation \ud83d\udcbb</h1>\n<p>The easiest way to get going is to install the pypi package using <code>pip</code>:</p>\n<pre><code>pip install mopet\n</code></pre>\n<p>Alternatively, you can also clone this repository and install all dependencies with</p>\n<pre><code>git clone https://github.com/caglorithm/mopet.git\ncd mopet/\npip install -r requirements.txt\npip install .\n</code></pre>\n<h1>Example usage \ud83d\udc1d</h1>\n<p>Setting up an exploration is as easy as can be!</p>\n<pre><span class=\"c1\"># first we define an toy evaluation function</span>\n<span class=\"k\">def</span> <span class=\"nf\">distance_from_circle</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">):</span>\n\t<span class=\"c1\"># let's simply calculate the distance of </span>\n\t<span class=\"c1\"># the x-y parameters to the unit circle</span>\n    <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">((</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s2\">\"x\"</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s2\">\"y\"</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># we package the result in a dictionary</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"result\"</span> <span class=\"p\">:</span> <span class=\"n\">distance</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre>\n<p>Let's set up the exploration by defining the parameters to explore and passing the evaluation function from above:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mopet</span>\n\n<span class=\"n\">explore_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">),</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)}</span>\n<span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"n\">mopet</span><span class=\"o\">.</span><span class=\"n\">Exploration</span><span class=\"p\">(</span><span class=\"n\">distance_from_circle</span><span class=\"p\">,</span> <span class=\"n\">explore_params</span><span class=\"p\">)</span>\n</pre>\n<p>Running the exploration is in parallel and is handled by <code>ray</code>. You can also use a private cluster or cloud infrastructure, see <a href=\"https://ray.readthedocs.io/en/latest/autoscaling.html\" rel=\"nofollow\">here</a> for more info.</p>\n<pre><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"mi\">100</span><span class=\"o\">%|</span><span class=\"err\">\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588</span><span class=\"o\">|</span> <span class=\"mi\">441</span><span class=\"o\">/</span><span class=\"mi\">441</span> <span class=\"p\">[</span><span class=\"mf\">426.57</span><span class=\"n\">it</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">load_results</span><span class=\"p\">()</span>\n</pre>\n<p>An overview of the runs and runs is given as a <code>pandas</code> DataFrame, available as <code>ex.df</code>. Here we load the result, which is simply a <code>float</code>, directly into the DataFrame. However, if the result was a timeseries (a <code>numpy.ndarray</code>), we could process it at this stage and extract some scalar value, for example the amplitude of the data or the dominant frequency. Using some fancy pivoting, we can create a 2D matrix with the results as entries</p>\n<pre><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s2\">\"result\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">:</span>\n    <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"s2\">\"result\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">]</span>\n\n<span class=\"n\">pivoted</span> <span class=\"o\">=</span> <span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">pivot_table</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"s1\">'result'</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">'first'</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43318d967d2ceaf90844339067a0d069e806b54f/68747470733a2f2f6769746875622e636f6d2f6361676c6f726974686d2f6d6f7065742f7261772f6d61737465722f7265736f75726365732f70616e6461735f7069766f745f7461626c652e706e67\" width=\"480\">\n</p>\n<p>Let's plot the results!</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"c1\"># a nice color map</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">pivoted</span><span class=\"p\">,</span> \\\n           <span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">),</span>\n                     <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)],</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">'lower'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Distance from unit circle'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s2\">\"x\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s2\">\"y\"</span><span class=\"p\">)</span>\n</pre>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67846e4d8e6d8bcddd3fb8b8bceac8a5327dae58/68747470733a2f2f6769746875622e636f6d2f6361676c6f726974686d2f6d6f7065742f7261772f6d61737465722f7265736f75726365732f756e69745f636972636c652e706e67\" width=\"350\">\n</p>\n<h2>More information \ud83d\udcd3</h2>\n<h3>Inspired by \ud83e\udd14</h3>\n<p><code>mopet</code> is inspired by <a href=\"https://github.com/SmokinCaterpillar/pypet\" rel=\"nofollow\"><code>pypet</code></a>, a wonderful python parameter exploration toolkit. I have been using <code>pypet</code> for a very long time and I'm greatful for its existence! Unfortunately, the project is not maintained anymore and has run into several compatibility issues, which was the primary reason why I built <code>mopet</code>.</p>\n<h3>Built With \ud83d\udc9e</h3>\n<p><code>mopet</code> is built on other amazing open source projects:</p>\n<ul>\n<li><a href=\"https://github.com/ray-project/ray\" rel=\"nofollow\"><code>ray</code></a> - A fast and simple framework for building and running distributed applications.</li>\n<li><a href=\"https://github.com/PyTables/PyTables\" rel=\"nofollow\"><code>pytables</code></a> - A Python package to manage extremely large amounts of data.</li>\n<li><a href=\"https://github.com/tqdm/tqdm\" rel=\"nofollow\"><code>tqdm</code></a> - A Fast, Extensible Progress Bar for Python and CLI</li>\n<li><a href=\"https://github.com/pandas-dev/pandas\" rel=\"nofollow\"><code>pandas</code></a> - Flexible and powerful data analysis / manipulation library for Python</li>\n<li><a href=\"https://github.com/numpy/numpy\" rel=\"nofollow\"><code>numpy</code></a> - The fundamental package for scientific computing with Python</li>\n</ul>\n\n          </div>"}, "last_serial": 6803331, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cdb339906778d02a569a1722c53345e0", "sha256": "f971f66201a1ff0410961d2143c14bcc55531db9c60dee282c3a358b91802bf2"}, "downloads": -1, "filename": "mopet-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cdb339906778d02a569a1722c53345e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <3.8", "size": 5983, "upload_time": "2020-03-13T02:16:49", "upload_time_iso_8601": "2020-03-13T02:16:49.677655Z", "url": "https://files.pythonhosted.org/packages/41/6f/f5dd56f3f7a4e6bd53058b6dd45e611f03d09ddd6f466086e9df611a8cd1/mopet-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "509c39f106334b69c62952b851e931bd", "sha256": "392c48f6383fb623c24094aae00e35fa70bf64265c96bd59582a4b5c50d16383"}, "downloads": -1, "filename": "mopet-0.1.tar.gz", "has_sig": false, "md5_digest": "509c39f106334b69c62952b851e931bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.8", "size": 5124, "upload_time": "2020-03-13T02:16:51", "upload_time_iso_8601": "2020-03-13T02:16:51.881288Z", "url": "https://files.pythonhosted.org/packages/81/94/b4955c90c190d72b5026b141351496476fa7b0ab6fc52739fd062e219bec/mopet-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6997a4dc4da20c0488e4d6b779028c6f", "sha256": "e8a5b5f9bf7cee0801774b7f24b6a15a7c14e483eb98d55e697bf40d18c1542f"}, "downloads": -1, "filename": "mopet-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6997a4dc4da20c0488e4d6b779028c6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <3.8", "size": 7812, "upload_time": "2020-03-13T03:20:18", "upload_time_iso_8601": "2020-03-13T03:20:18.810671Z", "url": "https://files.pythonhosted.org/packages/52/6b/dc49634fdd6f7159468ffebaf5f5da0ea9394a4cd2cfec4a13db23cd3a40/mopet-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5507fe9648d73e20ca74e9e51e6df13", "sha256": "e025e9f411865c5ae98eb2decc912c64379826a018aef7809cf21d50536ca2f4"}, "downloads": -1, "filename": "mopet-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c5507fe9648d73e20ca74e9e51e6df13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.8", "size": 7212, "upload_time": "2020-03-13T03:20:20", "upload_time_iso_8601": "2020-03-13T03:20:20.214001Z", "url": "https://files.pythonhosted.org/packages/99/d3/486a4a8c835e0600f0dcb53f1327005524903afde55cd44c390be2f8d34b/mopet-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6997a4dc4da20c0488e4d6b779028c6f", "sha256": "e8a5b5f9bf7cee0801774b7f24b6a15a7c14e483eb98d55e697bf40d18c1542f"}, "downloads": -1, "filename": "mopet-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6997a4dc4da20c0488e4d6b779028c6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <3.8", "size": 7812, "upload_time": "2020-03-13T03:20:18", "upload_time_iso_8601": "2020-03-13T03:20:18.810671Z", "url": "https://files.pythonhosted.org/packages/52/6b/dc49634fdd6f7159468ffebaf5f5da0ea9394a4cd2cfec4a13db23cd3a40/mopet-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5507fe9648d73e20ca74e9e51e6df13", "sha256": "e025e9f411865c5ae98eb2decc912c64379826a018aef7809cf21d50536ca2f4"}, "downloads": -1, "filename": "mopet-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c5507fe9648d73e20ca74e9e51e6df13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.8", "size": 7212, "upload_time": "2020-03-13T03:20:20", "upload_time_iso_8601": "2020-03-13T03:20:20.214001Z", "url": "https://files.pythonhosted.org/packages/99/d3/486a4a8c835e0600f0dcb53f1327005524903afde55cd44c390be2f8d34b/mopet-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:00 2020"}