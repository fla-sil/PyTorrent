{"info": {"author": "BrikerMan", "author_email": "eliyar917@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "<h1 align=\"center\">\n    <a href='https://en.wikipedia.org/wiki/Mahmud_al-Kashgari'>Kashgari</a>\n</h1>\n\n<p align=\"center\">\n    <a href=\"https://github.com/BrikerMan/kashgari/blob/master/LICENSE\">\n        <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/BrikerMan/kashgari.svg?color=blue&style=popout\">\n    </a>\n    <a href=\"https://travis-ci.com/BrikerMan/Kashgari\">\n        <img src=\"https://travis-ci.com/BrikerMan/Kashgari.svg?branch=master\"/>\n    </a>\n    <a href='https://coveralls.io/github/BrikerMan/Kashgari?branch=master'>\n        <img src='https://coveralls.io/repos/github/BrikerMan/Kashgari/badge.svg?branch=master' alt='Coverage Status'/>\n    </a>\n     <a href=\"https://pepy.tech/project/kashgari-tf\">\n        <img src=\"https://pepy.tech/badge/kashgari-tf\"/>\n    </a>\n    <a href=\"https://pypi.org/project/kashgari-tf/\">\n        <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/kashgari-tf.svg\">\n    </a>\n</p>\n\n<h4 align=\"center\">\n    <a href=\"#overview\">Overview</a> |\n    <a href=\"#performance\">Performance</a> |\n    <a href=\"#quick-start\">Quick start</a> |\n    <a href=\"https://kashgari.bmio.net/\">Documentation</a> |\n    <a href=\"https://kashgari-zh.bmio.net/\">\u4e2d\u6587\u6587\u6863</a> |\n    <a href=\"https://kashgari.bmio.net/about/contributing/\">Contributing</a>\n</h4>\n\n\ud83c\udf89\ud83c\udf89\ud83c\udf89 We are proud to announce that we entirely rewrote Kashgari with tf.keras, now Kashgari comes with easier to understand API and is faster! \ud83c\udf89\ud83c\udf89\ud83c\udf89\n\n## Overview\n\nKashgari is a simple and powerful NLP Transfer learning framework, build a state-of-art model in 5 minutes for named entity recognition (NER), part-of-speech tagging (PoS), and text classification tasks.\n\n- **Human-friendly**. Kashgari's code is straightforward, well documented and tested, which makes it very easy to understand and modify.\n- **Powerful and simple**. Kashgari allows you to apply state-of-the-art natural language processing (NLP) models to your text, such as named entity recognition (NER), part-of-speech tagging (PoS) and classification.\n- **Built-in transfer learning**. Kashgari built-in pre-trained BERT and Word2vec embedding models, which makes it very simple to transfer learning to train your model.\n- **Fully scalable**. Kashgari provides a simple, fast, and scalable environment for fast experimentation, train your models and experiment with new approaches using different embeddings and model structure. \n- **Production Ready**. Kashgari could export model with `SavedModel` format for tensorflow serving, you could directly deploy it on the cloud. \n\n## Our Goal\n\n- **Academic users** Easier experimentation to prove their hypothesis without coding from scratch.\n- **NLP beginners** Learn how to build an NLP project with production level code quality.\n- **NLP developers** Build a production level classification/labeling model within minutes.\n\n## Performance\n\n| Task                     | Language | Dataset                   | Score          | Detail                                                                                                             |\n| ------------------------ | -------- | ------------------------- | -------------- | ------------------------------------------------------------------------------------------------------------------ |\n| Named Entity Recognition | Chinese  | People's Daily Ner Corpus | **94.46** (F1) | [Text Labeling Performance Report](https://kashgari.bmio.net/tutorial/text-labeling/#performance-report) |\n\n## Tutorials\n\nHere is a set of quick tutorials to get you started with the library:\n\n- [Tutorial 1: Text Classification](https://kashgari.bmio.net/tutorial/text-classification/)\n- [Tutorial 2: Text Labeling](https://kashgari.bmio.net/tutorial/text-labeling/)\n- [Tutorial 3: Language Embedding](https://kashgari.bmio.net/embeddings/)\n\nThere are also articles and posts that illustrate how to use Kashgari:\n\n- [15 \u5206\u949f\u642d\u5efa\u4e2d\u6587\u6587\u672c\u5206\u7c7b\u6a21\u578b](https://eliyar.biz/nlp_chinese_text_classification_in_15mins/)\n- [\u57fa\u4e8e BERT \u7684\u4e2d\u6587\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff08NER)](https://eliyar.biz/nlp_chinese_bert_ner/)\n- [BERT/ERNIE \u6587\u672c\u5206\u7c7b\u548c\u90e8\u7f72](https://eliyar.biz/nlp_train_and_deploy_bert_text_classification/)\n- [\u4e94\u5206\u949f\u642d\u5efa\u4e00\u4e2a\u57fa\u4e8eBERT\u7684NER\u6a21\u578b](https://www.jianshu.com/p/1d6689851622)\n- [Multi-Class Text Classification with Kashgari in 15 minutes](https://medium.com/@BrikerMan/multi-class-text-classification-with-kashgari-in-15mins-c3e744ce971d)\n\n## Quick start\n\n### Requirements and Installation\n\n\ud83c\udf89\ud83c\udf89\ud83c\udf89 We renamed again for consistency and clarity. From now on, it is all `kashgari`. \ud83c\udf89\ud83c\udf89\ud83c\udf89\n\nThe project is based on Python 3.6+, because it is 2019 and type hinting is cool.\n\n| Backend          | pypi version                           | desc            |\n| ---------------- | -------------------------------------- | --------------- |\n| TensorFlow 2.x   | `pip install 'kashgari>=2.0.0'`        | coming soon     |\n| TensorFlow 1.14+ | `pip install 'kashgari>=1.0.0,<2.0.0'` | current version |\n| Keras            | `pip install 'kashgari<1.0.0'`         | legacy version  |\n\n[Find more info about the name changing.](https://github.com/BrikerMan/Kashgari/releases/tag/v1.0.0)\n\n### Example Usage\n\nLet's run an NER labeling model with Bi_LSTM Model.\n\n```python\nfrom kashgari.corpus import ChineseDailyNerCorpus\nfrom kashgari.tasks.labeling import BiLSTM_Model\n\ntrain_x, train_y = ChineseDailyNerCorpus.load_data('train')\ntest_x, test_y = ChineseDailyNerCorpus.load_data('test')\nvalid_x, valid_y = ChineseDailyNerCorpus.load_data('valid')\n\nmodel = BiLSTM_Model()\nmodel.fit(train_x, train_y, valid_x, valid_y, epochs=50)\n\n\"\"\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #\n=================================================================\ninput (InputLayer)           (None, 97)                0\n_________________________________________________________________\nlayer_embedding (Embedding)  (None, 97, 100)           320600\n_________________________________________________________________\nlayer_blstm (Bidirectional)  (None, 97, 256)           235520\n_________________________________________________________________\nlayer_dropout (Dropout)      (None, 97, 256)           0\n_________________________________________________________________\nlayer_time_distributed (Time (None, 97, 8)             2056\n_________________________________________________________________\nactivation_7 (Activation)    (None, 97, 8)             0\n=================================================================\nTotal params: 558,176\nTrainable params: 558,176\nNon-trainable params: 0\n_________________________________________________________________\nTrain on 20864 samples, validate on 2318 samples\nEpoch 1/50\n20864/20864 [==============================] - 9s 417us/sample - loss: 0.2508 - acc: 0.9333 - val_loss: 0.1240 - val_acc: 0.9607\n\n\"\"\"\n```\n\n### Run with GPT-2 Embedding\n\n```python\nfrom kashgari.embeddings import GPT2Embedding\nfrom kashgari.corpus import ChineseDailyNerCorpus\nfrom kashgari.tasks.labeling import BiGRU_Model\n\ntrain_x, train_y = ChineseDailyNerCorpus.load_data('train')\nvalid_x, valid_y = ChineseDailyNerCorpus.load_data('valid')\n\ngpt2_embedding = GPT2Embedding('<path-to-gpt-model-folder>', sequence_length=30)\nmodel = BiGRU_Model(gpt2_embedding)\nmodel.fit(train_x, train_y, valid_x, valid_y, epochs=50)\n```\n\n### Run with Bert Embedding\n\n```python\nfrom kashgari.embeddings import BERTEmbedding\nfrom kashgari.tasks.labeling import BiGRU_Model\nfrom kashgari.corpus import ChineseDailyNerCorpus\n\nbert_embedding = BERTEmbedding('<bert-model-folder>', sequence_length=30)\nmodel = BiGRU_Model(bert_embedding)\n\ntrain_x, train_y = ChineseDailyNerCorpus.load_data()\nmodel.fit(train_x, train_y)\n```\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your issues and feature request will be prioritized.[[Become a sponsor](https://www.patreon.com/join/brikerman?)]\n\n## Contributing\n\nThanks for your interest in contributing! There are many ways to get involved; start with the [contributor guidelines](https://kashgari.bmio.net/about/contributing/) and then check these open issues for specific tasks.\n\nFeel free to join the WeChat group if you want to more involved in Kashgari's development.\n\n![](http://s3.bmio.net/kashgari-qr-code.jpeg)\n\n## Reference\n\nThis library is inspired by and references following frameworks and papers.\n\n- [flair - A very simple framework for state-of-the-art Natural Language Processing (NLP)](https://github.com/zalandoresearch/flair)\n- [anago - Bidirectional LSTM-CRF and ELMo for Named-Entity Recognition, Part-of-Speech Tagging](https://github.com/Hironsan/anago)\n- [Chinese-Word-Vectors](https://github.com/Embedding/Chinese-Word-Vectors)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BrikerMan/Kashgari", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "kashgari-tf", "package_url": "https://pypi.org/project/kashgari-tf/", "platform": "", "project_url": "https://pypi.org/project/kashgari-tf/", "project_urls": {"Homepage": "https://github.com/BrikerMan/Kashgari"}, "release_url": "https://pypi.org/project/kashgari-tf/0.5.5/", "requires_dist": ["numpy (==1.16.4)", "scikit-learn (>=0.21.1)", "h5py", "keras-bert (>=0.50.0)", "keras-gpt-2 (>=0.8.0)", "gensim (>=3.5.0)", "seqeval (==0.0.10)", "pandas (>=0.23.0)"], "requires_python": ">3.6", "summary": "Simple, Keras-powered multilingual NLP framework, allows you to build your models in 5 minutes for named entity recognition (NER), part-of-speech tagging (PoS) and text classification tasks. Includes BERT, GPT-2 and word2vec embedding.", "version": "0.5.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\n    <a href=\"https://en.wikipedia.org/wiki/Mahmud_al-Kashgari\" rel=\"nofollow\">Kashgari</a>\n</h1>\n<p align=\"center\">\n    <a href=\"https://github.com/BrikerMan/kashgari/blob/master/LICENSE\" rel=\"nofollow\">\n        <img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81058d7de65fc73aa3e398fcf86541b6b3b1162a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4272696b65724d616e2f6b617368676172692e7376673f636f6c6f723d626c7565267374796c653d706f706f7574\">\n    </a>\n    <a href=\"https://travis-ci.com/BrikerMan/Kashgari\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f53cb405f7f1263b316d8bb2cc85d779e5ccf482/68747470733a2f2f7472617669732d63692e636f6d2f4272696b65724d616e2f4b617368676172692e7376673f6272616e63683d6d6173746572\">\n    </a>\n    <a href=\"https://coveralls.io/github/BrikerMan/Kashgari?branch=master\" rel=\"nofollow\">\n        <img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85c4589d0f4f5211e900c7edf340b33b39e42bcd/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4272696b65724d616e2f4b617368676172692f62616467652e7376673f6272616e63683d6d6173746572\">\n    </a>\n     <a href=\"https://pepy.tech/project/kashgari-tf\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2941ab4c2ceef5c9c8764d5a69654a2b86b612ea/68747470733a2f2f706570792e746563682f62616467652f6b617368676172692d7466\">\n    </a>\n    <a href=\"https://pypi.org/project/kashgari-tf/\" rel=\"nofollow\">\n        <img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4410f55faae0cba6cd64f1dc5df4d38c1debdf28/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b617368676172692d74662e737667\">\n    </a>\n</p>\n<h4>\n    <a href=\"#overview\" rel=\"nofollow\">Overview</a> |\n    <a href=\"#performance\" rel=\"nofollow\">Performance</a> |\n    <a href=\"#quick-start\" rel=\"nofollow\">Quick start</a> |\n    <a href=\"https://kashgari.bmio.net/\" rel=\"nofollow\">Documentation</a> |\n    <a href=\"https://kashgari-zh.bmio.net/\" rel=\"nofollow\">\u4e2d\u6587\u6587\u6863</a> |\n    <a href=\"https://kashgari.bmio.net/about/contributing/\" rel=\"nofollow\">Contributing</a>\n</h4>\n<p>\ud83c\udf89\ud83c\udf89\ud83c\udf89 We are proud to announce that we entirely rewrote Kashgari with tf.keras, now Kashgari comes with easier to understand API and is faster! \ud83c\udf89\ud83c\udf89\ud83c\udf89</p>\n<h2>Overview</h2>\n<p>Kashgari is a simple and powerful NLP Transfer learning framework, build a state-of-art model in 5 minutes for named entity recognition (NER), part-of-speech tagging (PoS), and text classification tasks.</p>\n<ul>\n<li><strong>Human-friendly</strong>. Kashgari's code is straightforward, well documented and tested, which makes it very easy to understand and modify.</li>\n<li><strong>Powerful and simple</strong>. Kashgari allows you to apply state-of-the-art natural language processing (NLP) models to your text, such as named entity recognition (NER), part-of-speech tagging (PoS) and classification.</li>\n<li><strong>Built-in transfer learning</strong>. Kashgari built-in pre-trained BERT and Word2vec embedding models, which makes it very simple to transfer learning to train your model.</li>\n<li><strong>Fully scalable</strong>. Kashgari provides a simple, fast, and scalable environment for fast experimentation, train your models and experiment with new approaches using different embeddings and model structure.</li>\n<li><strong>Production Ready</strong>. Kashgari could export model with <code>SavedModel</code> format for tensorflow serving, you could directly deploy it on the cloud.</li>\n</ul>\n<h2>Our Goal</h2>\n<ul>\n<li><strong>Academic users</strong> Easier experimentation to prove their hypothesis without coding from scratch.</li>\n<li><strong>NLP beginners</strong> Learn how to build an NLP project with production level code quality.</li>\n<li><strong>NLP developers</strong> Build a production level classification/labeling model within minutes.</li>\n</ul>\n<h2>Performance</h2>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Language</th>\n<th>Dataset</th>\n<th>Score</th>\n<th>Detail</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Named Entity Recognition</td>\n<td>Chinese</td>\n<td>People's Daily Ner Corpus</td>\n<td><strong>94.46</strong> (F1)</td>\n<td><a href=\"https://kashgari.bmio.net/tutorial/text-labeling/#performance-report\" rel=\"nofollow\">Text Labeling Performance Report</a></td>\n</tr></tbody></table>\n<h2>Tutorials</h2>\n<p>Here is a set of quick tutorials to get you started with the library:</p>\n<ul>\n<li><a href=\"https://kashgari.bmio.net/tutorial/text-classification/\" rel=\"nofollow\">Tutorial 1: Text Classification</a></li>\n<li><a href=\"https://kashgari.bmio.net/tutorial/text-labeling/\" rel=\"nofollow\">Tutorial 2: Text Labeling</a></li>\n<li><a href=\"https://kashgari.bmio.net/embeddings/\" rel=\"nofollow\">Tutorial 3: Language Embedding</a></li>\n</ul>\n<p>There are also articles and posts that illustrate how to use Kashgari:</p>\n<ul>\n<li><a href=\"https://eliyar.biz/nlp_chinese_text_classification_in_15mins/\" rel=\"nofollow\">15 \u5206\u949f\u642d\u5efa\u4e2d\u6587\u6587\u672c\u5206\u7c7b\u6a21\u578b</a></li>\n<li><a href=\"https://eliyar.biz/nlp_chinese_bert_ner/\" rel=\"nofollow\">\u57fa\u4e8e BERT \u7684\u4e2d\u6587\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff08NER)</a></li>\n<li><a href=\"https://eliyar.biz/nlp_train_and_deploy_bert_text_classification/\" rel=\"nofollow\">BERT/ERNIE \u6587\u672c\u5206\u7c7b\u548c\u90e8\u7f72</a></li>\n<li><a href=\"https://www.jianshu.com/p/1d6689851622\" rel=\"nofollow\">\u4e94\u5206\u949f\u642d\u5efa\u4e00\u4e2a\u57fa\u4e8eBERT\u7684NER\u6a21\u578b</a></li>\n<li><a href=\"https://medium.com/@BrikerMan/multi-class-text-classification-with-kashgari-in-15mins-c3e744ce971d\" rel=\"nofollow\">Multi-Class Text Classification with Kashgari in 15 minutes</a></li>\n</ul>\n<h2>Quick start</h2>\n<h3>Requirements and Installation</h3>\n<p>\ud83c\udf89\ud83c\udf89\ud83c\udf89 We renamed again for consistency and clarity. From now on, it is all <code>kashgari</code>. \ud83c\udf89\ud83c\udf89\ud83c\udf89</p>\n<p>The project is based on Python 3.6+, because it is 2019 and type hinting is cool.</p>\n<table>\n<thead>\n<tr>\n<th>Backend</th>\n<th>pypi version</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TensorFlow 2.x</td>\n<td><code>pip install 'kashgari&gt;=2.0.0'</code></td>\n<td>coming soon</td>\n</tr>\n<tr>\n<td>TensorFlow 1.14+</td>\n<td><code>pip install 'kashgari&gt;=1.0.0,&lt;2.0.0'</code></td>\n<td>current version</td>\n</tr>\n<tr>\n<td>Keras</td>\n<td><code>pip install 'kashgari&lt;1.0.0'</code></td>\n<td>legacy version</td>\n</tr></tbody></table>\n<p><a href=\"https://github.com/BrikerMan/Kashgari/releases/tag/v1.0.0\" rel=\"nofollow\">Find more info about the name changing.</a></p>\n<h3>Example Usage</h3>\n<p>Let's run an NER labeling model with Bi_LSTM Model.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kashgari.corpus</span> <span class=\"kn\">import</span> <span class=\"n\">ChineseDailyNerCorpus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kashgari.tasks.labeling</span> <span class=\"kn\">import</span> <span class=\"n\">BiLSTM_Model</span>\n\n<span class=\"n\">train_x</span><span class=\"p\">,</span> <span class=\"n\">train_y</span> <span class=\"o\">=</span> <span class=\"n\">ChineseDailyNerCorpus</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"s1\">'train'</span><span class=\"p\">)</span>\n<span class=\"n\">test_x</span><span class=\"p\">,</span> <span class=\"n\">test_y</span> <span class=\"o\">=</span> <span class=\"n\">ChineseDailyNerCorpus</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"n\">valid_x</span><span class=\"p\">,</span> <span class=\"n\">valid_y</span> <span class=\"o\">=</span> <span class=\"n\">ChineseDailyNerCorpus</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"s1\">'valid'</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">BiLSTM_Model</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train_x</span><span class=\"p\">,</span> <span class=\"n\">train_y</span><span class=\"p\">,</span> <span class=\"n\">valid_x</span><span class=\"p\">,</span> <span class=\"n\">valid_y</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">_________________________________________________________________</span>\n<span class=\"sd\">Layer (type)                 Output Shape              Param #</span>\n<span class=\"sd\">=================================================================</span>\n<span class=\"sd\">input (InputLayer)           (None, 97)                0</span>\n<span class=\"sd\">_________________________________________________________________</span>\n<span class=\"sd\">layer_embedding (Embedding)  (None, 97, 100)           320600</span>\n<span class=\"sd\">_________________________________________________________________</span>\n<span class=\"sd\">layer_blstm (Bidirectional)  (None, 97, 256)           235520</span>\n<span class=\"sd\">_________________________________________________________________</span>\n<span class=\"sd\">layer_dropout (Dropout)      (None, 97, 256)           0</span>\n<span class=\"sd\">_________________________________________________________________</span>\n<span class=\"sd\">layer_time_distributed (Time (None, 97, 8)             2056</span>\n<span class=\"sd\">_________________________________________________________________</span>\n<span class=\"sd\">activation_7 (Activation)    (None, 97, 8)             0</span>\n<span class=\"sd\">=================================================================</span>\n<span class=\"sd\">Total params: 558,176</span>\n<span class=\"sd\">Trainable params: 558,176</span>\n<span class=\"sd\">Non-trainable params: 0</span>\n<span class=\"sd\">_________________________________________________________________</span>\n<span class=\"sd\">Train on 20864 samples, validate on 2318 samples</span>\n<span class=\"sd\">Epoch 1/50</span>\n<span class=\"sd\">20864/20864 [==============================] - 9s 417us/sample - loss: 0.2508 - acc: 0.9333 - val_loss: 0.1240 - val_acc: 0.9607</span>\n\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Run with GPT-2 Embedding</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kashgari.embeddings</span> <span class=\"kn\">import</span> <span class=\"n\">GPT2Embedding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kashgari.corpus</span> <span class=\"kn\">import</span> <span class=\"n\">ChineseDailyNerCorpus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kashgari.tasks.labeling</span> <span class=\"kn\">import</span> <span class=\"n\">BiGRU_Model</span>\n\n<span class=\"n\">train_x</span><span class=\"p\">,</span> <span class=\"n\">train_y</span> <span class=\"o\">=</span> <span class=\"n\">ChineseDailyNerCorpus</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"s1\">'train'</span><span class=\"p\">)</span>\n<span class=\"n\">valid_x</span><span class=\"p\">,</span> <span class=\"n\">valid_y</span> <span class=\"o\">=</span> <span class=\"n\">ChineseDailyNerCorpus</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"s1\">'valid'</span><span class=\"p\">)</span>\n\n<span class=\"n\">gpt2_embedding</span> <span class=\"o\">=</span> <span class=\"n\">GPT2Embedding</span><span class=\"p\">(</span><span class=\"s1\">'&lt;path-to-gpt-model-folder&gt;'</span><span class=\"p\">,</span> <span class=\"n\">sequence_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">BiGRU_Model</span><span class=\"p\">(</span><span class=\"n\">gpt2_embedding</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train_x</span><span class=\"p\">,</span> <span class=\"n\">train_y</span><span class=\"p\">,</span> <span class=\"n\">valid_x</span><span class=\"p\">,</span> <span class=\"n\">valid_y</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre>\n<h3>Run with Bert Embedding</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kashgari.embeddings</span> <span class=\"kn\">import</span> <span class=\"n\">BERTEmbedding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kashgari.tasks.labeling</span> <span class=\"kn\">import</span> <span class=\"n\">BiGRU_Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kashgari.corpus</span> <span class=\"kn\">import</span> <span class=\"n\">ChineseDailyNerCorpus</span>\n\n<span class=\"n\">bert_embedding</span> <span class=\"o\">=</span> <span class=\"n\">BERTEmbedding</span><span class=\"p\">(</span><span class=\"s1\">'&lt;bert-model-folder&gt;'</span><span class=\"p\">,</span> <span class=\"n\">sequence_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">BiGRU_Model</span><span class=\"p\">(</span><span class=\"n\">bert_embedding</span><span class=\"p\">)</span>\n\n<span class=\"n\">train_x</span><span class=\"p\">,</span> <span class=\"n\">train_y</span> <span class=\"o\">=</span> <span class=\"n\">ChineseDailyNerCorpus</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train_x</span><span class=\"p\">,</span> <span class=\"n\">train_y</span><span class=\"p\">)</span>\n</pre>\n<h2>Sponsors</h2>\n<p>Support this project by becoming a sponsor. Your issues and feature request will be prioritized.[<a href=\"https://www.patreon.com/join/brikerman?\" rel=\"nofollow\">Become a sponsor</a>]</p>\n<h2>Contributing</h2>\n<p>Thanks for your interest in contributing! There are many ways to get involved; start with the <a href=\"https://kashgari.bmio.net/about/contributing/\" rel=\"nofollow\">contributor guidelines</a> and then check these open issues for specific tasks.</p>\n<p>Feel free to join the WeChat group if you want to more involved in Kashgari's development.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24e8c4bc5feef3d4069fd6ee34ad8b7bedff7dce/687474703a2f2f73332e626d696f2e6e65742f6b617368676172692d71722d636f64652e6a706567\"></p>\n<h2>Reference</h2>\n<p>This library is inspired by and references following frameworks and papers.</p>\n<ul>\n<li><a href=\"https://github.com/zalandoresearch/flair\" rel=\"nofollow\">flair - A very simple framework for state-of-the-art Natural Language Processing (NLP)</a></li>\n<li><a href=\"https://github.com/Hironsan/anago\" rel=\"nofollow\">anago - Bidirectional LSTM-CRF and ELMo for Named-Entity Recognition, Part-of-Speech Tagging</a></li>\n<li><a href=\"https://github.com/Embedding/Chinese-Word-Vectors\" rel=\"nofollow\">Chinese-Word-Vectors</a></li>\n</ul>\n\n          </div>"}, "last_serial": 5994283, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "19ef1cb0fc61bc246b02821a5f3958ac", "sha256": "386c9a61d435a614bc7eb8d0fe1142c29f42b321bcd89dac8574b6e1308c8572"}, "downloads": -1, "filename": "kashgari_tf-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "19ef1cb0fc61bc246b02821a5f3958ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 72093, "upload_time": "2019-07-11T09:48:55", "upload_time_iso_8601": "2019-07-11T09:48:55.744667Z", "url": "https://files.pythonhosted.org/packages/b3/2a/dd36a0df2759bfbdabd33dd1699a3fa5f913e4595c0ae705b380ff3edd93/kashgari_tf-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33ea5fa0746a5aee11397c38dc10aadd", "sha256": "f637379429a0eb732f490119833dd69dcab800e6adc1095fb24fb8a3457dd847"}, "downloads": -1, "filename": "kashgari-tf-0.5.0.tar.gz", "has_sig": false, "md5_digest": "33ea5fa0746a5aee11397c38dc10aadd", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 37594, "upload_time": "2019-07-11T09:48:59", "upload_time_iso_8601": "2019-07-11T09:48:59.659297Z", "url": "https://files.pythonhosted.org/packages/7c/9e/0183d89cde28ee50076740bb79f2b1a15cfb561c0a8b1ec89823177440d6/kashgari-tf-0.5.0.tar.gz", "yanked": false}], "0.5.0a1": [{"comment_text": "", "digests": {"md5": "c8aac84658ff411b463c3606ae30c89a", "sha256": "98dd12579512f334c0158b160d97072806b5defb35cf91e53d043b75680fa3ad"}, "downloads": -1, "filename": "kashgari_tf-0.5.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "c8aac84658ff411b463c3606ae30c89a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 69277, "upload_time": "2019-07-01T03:43:36", "upload_time_iso_8601": "2019-07-01T03:43:36.799156Z", "url": "https://files.pythonhosted.org/packages/0b/8a/329b02772caaff9fb266428f323ece0dbd883428c3b2b6e3547ee94c61d6/kashgari_tf-0.5.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2aa9a8fcb4afd4a09a01c18e0ef55ea6", "sha256": "d8690cb0b82bd683ff7b7ae3122ba2e95b445678eaaa5fedafa0b70d6ca493ad"}, "downloads": -1, "filename": "kashgari-tf-0.5.0a1.tar.gz", "has_sig": false, "md5_digest": "2aa9a8fcb4afd4a09a01c18e0ef55ea6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36048, "upload_time": "2019-07-01T03:43:47", "upload_time_iso_8601": "2019-07-01T03:43:47.625874Z", "url": "https://files.pythonhosted.org/packages/e6/04/b09bf7bf3ce0368e8dff9c4bec388d40baf83b6a54138836662100be6bc4/kashgari-tf-0.5.0a1.tar.gz", "yanked": false}], "0.5.0a2": [{"comment_text": "", "digests": {"md5": "b586e00949615b3f0b74704e07952296", "sha256": "ab5d681339a80f8f2650c361224445bfc365c497f685b267b361c87e5919c42f"}, "downloads": -1, "filename": "kashgari_tf-0.5.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "b586e00949615b3f0b74704e07952296", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 71877, "upload_time": "2019-07-10T08:59:40", "upload_time_iso_8601": "2019-07-10T08:59:40.611970Z", "url": "https://files.pythonhosted.org/packages/dd/ad/d1e219d245d607638ccbe777f1bb1e4ceca20acce1ecd204de6e325bb7ee/kashgari_tf-0.5.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cb67c4de10af49af64925507165be37", "sha256": "1c3ee47d47dc5228c565067112c0a2c2192f3ea6073d4457813087b81a43beac"}, "downloads": -1, "filename": "kashgari-tf-0.5.0a2.tar.gz", "has_sig": false, "md5_digest": "4cb67c4de10af49af64925507165be37", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 37754, "upload_time": "2019-07-10T08:59:42", "upload_time_iso_8601": "2019-07-10T08:59:42.369522Z", "url": "https://files.pythonhosted.org/packages/6e/9e/fc2896bc83fd36ca5f51ab5d097b94e5b4a97cc19647d588711fdd7ba2dc/kashgari-tf-0.5.0a2.tar.gz", "yanked": false}], "0.5.0a3": [{"comment_text": "", "digests": {"md5": "0c13344a30d5598beacb18d43bfe8f77", "sha256": "e076648744643bf8f02b2a3b31108c30f6734dc4b55a4265462634cae4572f90"}, "downloads": -1, "filename": "kashgari_tf-0.5.0a3-py3-none-any.whl", "has_sig": false, "md5_digest": "0c13344a30d5598beacb18d43bfe8f77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 71878, "upload_time": "2019-07-10T09:29:39", "upload_time_iso_8601": "2019-07-10T09:29:39.727195Z", "url": "https://files.pythonhosted.org/packages/da/e6/a2ae85bd93197468191379cbfc951d711ac2fc3b511e037c4b1bfff064b2/kashgari_tf-0.5.0a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5979186d4c64c20fa225c99ca2a21ab5", "sha256": "4c8ac0fda4ee506d4f471a8e9c0c2f3a399e3f32062e094338beaf8fdcf6b4c6"}, "downloads": -1, "filename": "kashgari-tf-0.5.0a3.tar.gz", "has_sig": false, "md5_digest": "5979186d4c64c20fa225c99ca2a21ab5", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 37758, "upload_time": "2019-07-10T09:29:42", "upload_time_iso_8601": "2019-07-10T09:29:42.629773Z", "url": "https://files.pythonhosted.org/packages/30/17/7dbe56cfae634ae5b8396f09604d45b1bb5de1c36bf6a7998fc4f744f5bf/kashgari-tf-0.5.0a3.tar.gz", "yanked": false}], "0.5.0a4": [{"comment_text": "", "digests": {"md5": "d1a6c14ee7c4ec2a39da89a088dc1d8d", "sha256": "083232070b4d5b1bb4e328b60abbbcb46329f63e861a656aebe2096f90ea54d1"}, "downloads": -1, "filename": "kashgari_tf-0.5.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "d1a6c14ee7c4ec2a39da89a088dc1d8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 71829, "upload_time": "2019-07-11T05:17:14", "upload_time_iso_8601": "2019-07-11T05:17:14.133691Z", "url": "https://files.pythonhosted.org/packages/fc/64/3a03010ffcb85762001012c1c26c05ad3e0e6bbf0ab311d8efc803cf4991/kashgari_tf-0.5.0a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1101c61e7576a9d82bd94aba7e0c049", "sha256": "978a7cf04990dde4360bb8b755ea0905b162f51c0b733c82cb52bb53341a74af"}, "downloads": -1, "filename": "kashgari-tf-0.5.0a4.tar.gz", "has_sig": false, "md5_digest": "e1101c61e7576a9d82bd94aba7e0c049", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 36984, "upload_time": "2019-07-11T05:17:17", "upload_time_iso_8601": "2019-07-11T05:17:17.312070Z", "url": "https://files.pythonhosted.org/packages/ba/b7/251ede6e8f4a008839cf672a620025a04e96d455d752a040d44a86958929/kashgari-tf-0.5.0a4.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "bfa902ebe1967619fd4cfabb12334bca", "sha256": "eb84f3667581316f5225e471c9394a8c3908dac5688f7a4e6d225a9b4857ee2a"}, "downloads": -1, "filename": "kashgari_tf-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bfa902ebe1967619fd4cfabb12334bca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 73112, "upload_time": "2019-07-15T10:56:49", "upload_time_iso_8601": "2019-07-15T10:56:49.809925Z", "url": "https://files.pythonhosted.org/packages/4e/65/d1e54798399a8740154faa9f02e56934e7f2bc3298317269e0c54aae8126/kashgari_tf-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33a6047dfd2543e682e083c8cb5af9b1", "sha256": "b3901826b215a70069521bf29ff113a317a49cb449162eea2997af5fdd053b0c"}, "downloads": -1, "filename": "kashgari-tf-0.5.1.tar.gz", "has_sig": false, "md5_digest": "33a6047dfd2543e682e083c8cb5af9b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 39082, "upload_time": "2019-07-15T10:56:51", "upload_time_iso_8601": "2019-07-15T10:56:51.738787Z", "url": "https://files.pythonhosted.org/packages/9c/37/565b8754e4d004378a76efc439df7f5bfe586776b987fd302ae4df128b0a/kashgari-tf-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "8fa93941d5c06b016a24208b9103f556", "sha256": "df7836045a0aa32be18ab06a8202b445e10cc0700b41eef468f771643738f945"}, "downloads": -1, "filename": "kashgari_tf-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8fa93941d5c06b016a24208b9103f556", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 73568, "upload_time": "2019-08-10T06:23:19", "upload_time_iso_8601": "2019-08-10T06:23:19.580094Z", "url": "https://files.pythonhosted.org/packages/65/a0/bef524a265b9407086577541c94e1229c7ffbd210b381b24f5dd6fbcee09/kashgari_tf-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66fbb21f82711f400e7403f65b4ed8f8", "sha256": "9d471cc01d5cf44e5f4c9b3740db2205e6ae9839fdb173a209bf80c613b64ea2"}, "downloads": -1, "filename": "kashgari-tf-0.5.2.tar.gz", "has_sig": false, "md5_digest": "66fbb21f82711f400e7403f65b4ed8f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 39563, "upload_time": "2019-08-10T06:23:21", "upload_time_iso_8601": "2019-08-10T06:23:21.834797Z", "url": "https://files.pythonhosted.org/packages/7b/6b/9c18376c5df73c2c81012fc7de32bc6cdf17c13a7b67e1b9977c61ef2f98/kashgari-tf-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "c2fbd034abb1c035f236cb990db9789b", "sha256": "f5ed4f6516d8e70571305d04f2abcab284e7c6d721dc47939956d394e47b3e97"}, "downloads": -1, "filename": "kashgari_tf-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c2fbd034abb1c035f236cb990db9789b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 73474, "upload_time": "2019-08-11T15:36:39", "upload_time_iso_8601": "2019-08-11T15:36:39.727551Z", "url": "https://files.pythonhosted.org/packages/40/f2/a7406ff260ea0394d6602e9324cd896756f456436420c824b345e0df06c4/kashgari_tf-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39f44b5c39861c5d168532e0be711133", "sha256": "87b9e6c0de148f255f7a906d168977f8526161d8f6502fa5ff1962632675c099"}, "downloads": -1, "filename": "kashgari-tf-0.5.3.tar.gz", "has_sig": false, "md5_digest": "39f44b5c39861c5d168532e0be711133", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 39576, "upload_time": "2019-08-11T15:36:43", "upload_time_iso_8601": "2019-08-11T15:36:43.475853Z", "url": "https://files.pythonhosted.org/packages/8d/0d/bf38afce104d1fec79a15996e89cd513fbd6e967d469c52f321ff6c4ae7f/kashgari-tf-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "7c321a404985e27c6d04b1879535ef74", "sha256": "6721e5a5b5552980868f6b3cf54505810e9ef55d3ce55cae4a0d80cdd3309672"}, "downloads": -1, "filename": "kashgari_tf-0.5.4-py3-none-any.whl", "has_sig": false, "md5_digest": "7c321a404985e27c6d04b1879535ef74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 74177, "upload_time": "2019-09-30T14:18:26", "upload_time_iso_8601": "2019-09-30T14:18:26.141534Z", "url": "https://files.pythonhosted.org/packages/89/14/46dcf2560339ab9d269a6e25103699b29f7c0cdfd3aed24d8efefbeb6e17/kashgari_tf-0.5.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "920c4e7d2f59286acc07096546490c77", "sha256": "2652cb294d6908be84ca3b7f896c8e04f1cedde9497a532b92a6c9e9b1d88da0"}, "downloads": -1, "filename": "kashgari-tf-0.5.4.tar.gz", "has_sig": false, "md5_digest": "920c4e7d2f59286acc07096546490c77", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 40292, "upload_time": "2019-09-30T14:18:28", "upload_time_iso_8601": "2019-09-30T14:18:28.314792Z", "url": "https://files.pythonhosted.org/packages/97/18/17bf288815f45a96c47b4779769717e5b5136a68d1bbc982b6e9a2eedcb4/kashgari-tf-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "071ccdb11813d462d55c3ffdeebfc633", "sha256": "92d6561dd9d6b743791c2aba6aac7e1ec4902ec7e2e09cbf562f3c9d0730a489"}, "downloads": -1, "filename": "kashgari_tf-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "071ccdb11813d462d55c3ffdeebfc633", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 75132, "upload_time": "2019-10-18T07:57:55", "upload_time_iso_8601": "2019-10-18T07:57:55.149255Z", "url": "https://files.pythonhosted.org/packages/2d/42/804e5199f4c9c2a461ff05773f61abe2094f2d430dac258a3a49a4b2a32d/kashgari_tf-0.5.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94bcf3ded15ad2219f774001bbb6b892", "sha256": "c9a5be9d197fb74caa75d39ee337f923d5a94e126272ed27cfaa80891fba597b"}, "downloads": -1, "filename": "kashgari-tf-0.5.5.tar.gz", "has_sig": false, "md5_digest": "94bcf3ded15ad2219f774001bbb6b892", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 41194, "upload_time": "2019-10-18T07:57:59", "upload_time_iso_8601": "2019-10-18T07:57:59.486148Z", "url": "https://files.pythonhosted.org/packages/36/e6/5c2b7548ff5f56c3224af30f65a238321725df1e91517c6e3b17ef2c8b19/kashgari-tf-0.5.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "071ccdb11813d462d55c3ffdeebfc633", "sha256": "92d6561dd9d6b743791c2aba6aac7e1ec4902ec7e2e09cbf562f3c9d0730a489"}, "downloads": -1, "filename": "kashgari_tf-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "071ccdb11813d462d55c3ffdeebfc633", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 75132, "upload_time": "2019-10-18T07:57:55", "upload_time_iso_8601": "2019-10-18T07:57:55.149255Z", "url": "https://files.pythonhosted.org/packages/2d/42/804e5199f4c9c2a461ff05773f61abe2094f2d430dac258a3a49a4b2a32d/kashgari_tf-0.5.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94bcf3ded15ad2219f774001bbb6b892", "sha256": "c9a5be9d197fb74caa75d39ee337f923d5a94e126272ed27cfaa80891fba597b"}, "downloads": -1, "filename": "kashgari-tf-0.5.5.tar.gz", "has_sig": false, "md5_digest": "94bcf3ded15ad2219f774001bbb6b892", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 41194, "upload_time": "2019-10-18T07:57:59", "upload_time_iso_8601": "2019-10-18T07:57:59.486148Z", "url": "https://files.pythonhosted.org/packages/36/e6/5c2b7548ff5f56c3224af30f65a238321725df1e91517c6e3b17ef2c8b19/kashgari-tf-0.5.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:36 2020"}