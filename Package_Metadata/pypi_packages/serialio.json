{"info": {"author": "Jose Tiago Macara Coutinho", "author_email": "coutinhotiago@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# serialio\n\n![Pypi version][pypi]\n\nA python concurrency agnostic serial line library.\n\nHelpful when handling with instrumentation which work over serial line and implement\nsimple REQ-REP communication protocols (example:\n[SCPI](https://en.m.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instruments)).\n\nSo far, only serial line over RFC2217 protocol and raw socket are available.\nIt should be compatible with:\n\n* ser2net bridge with telnet(RFC2217) and raw configurations\n* gserial[ser2tcp] bridge (RFC2217)\n\n\nBase implementation written in asyncio with support for different concurrency models:\n\n* asyncio\n* classic blocking API (TODO)\n* future based API (TODO)\n\nHere is a summary of what is forseen and what is implemented\n\n| Concurrency   | Local  | RFC2217 | Raw TCP |\n| ------------- |:------:|:-------:|:-------:|\n| asyncio       |   N    |    Y    |    Y    |\n| classic sync  |   N    |    N    |    N    |\n| conc. futures |   N    |    N    |    N    |\n\n\n## Installation\n\nFrom within your favourite python environment:\n\n```console\npip install serialio\n```\n\n## Usage\n\n*asyncio*\n\n```python\nimport asyncio\nfrom serialio.aio.tcp import Serial\n\nasync def main():\n    sl = Serial('raw.ser2net.com', 5000)\n    # Assuming a SCPI complient on the other end we can ask for:\n    reply = await sl.write_readline(b'*IDN?\\n')\n    print(reply)\n\nasyncio.run(main())\n```\n\n*classic (TODO)*\n\n```python\n\nfrom serialio.sio.tcp import Serial\n\nsl = Serial('raw.ser2net.com', 5000)\nreply = sl.write_readline(b'*IDN?\\n')\nprint(reply)\n```\n\n*concurrent.futures (TODO)*\n\n```python\nfrom serialio.sio.tcp import Serial\n\nsl = Serial('raw.ser2net.com', 5000, resolve_futures=False)\nreply = sl.write_readline(b'*IDN?\\n').result()\nprint(reply)\n```\n\n## Features\n\nThe main goal of a serialio Serial object is to facilitate communication\nwith instruments connected to a serial line.\n\nThe most frequent cases include instruments which expect a REQ/REP\nsemantics with ASCII protocols like SCPI. In these cases most commands\ntranslate in small packets being exchanged between the host and the\ninstrument. When a raw TCP or RFC2217 bridge is used to access the serial\nline, serialio uses the sockio library.\n\n### REQ-REP semantics\n\nMany instruments out there have a Request-Reply protocol. A serialio Serial\nprovides helpfull `write_read` family of methods which simplify communication\nwith these instruments.\n\n### Auto-reconnection\n\nTODO: Write this chapter\n\n### Custom EOL\n\nIn line based protocols, sometimes people decide `\\n` is not a good EOL character.\nA serialio can be customized with a different EOL character. Example:\n\n```python\nsl = Serial('raw.ser2net.com', 5000, eol=b'\\r')\n```\n\nThe EOL character can be overwritten in any of the `readline` methods. Example:\n\n```python\nawait sl.write_readline(b'*IDN?\\n', eol=b'\\r')\n```\n\n### Streams\n\nTODO: Write this chapter", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://tiagocoutinho.github.io/serialio/", "keywords": "socket,serial,rcf2217,asyncio,rs232", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "serialio", "package_url": "https://pypi.org/project/serialio/", "platform": "", "project_url": "https://pypi.org/project/serialio/", "project_urls": {"Homepage": "https://tiagocoutinho.github.io/serialio/"}, "release_url": "https://pypi.org/project/serialio/0.1.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Concurrency agnostic serialio API", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>serialio</h1>\n<p>![Pypi version][pypi]</p>\n<p>A python concurrency agnostic serial line library.</p>\n<p>Helpful when handling with instrumentation which work over serial line and implement\nsimple REQ-REP communication protocols (example:\n<a href=\"https://en.m.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instruments\" rel=\"nofollow\">SCPI</a>).</p>\n<p>So far, only serial line over RFC2217 protocol and raw socket are available.\nIt should be compatible with:</p>\n<ul>\n<li>ser2net bridge with telnet(RFC2217) and raw configurations</li>\n<li>gserial[ser2tcp] bridge (RFC2217)</li>\n</ul>\n<p>Base implementation written in asyncio with support for different concurrency models:</p>\n<ul>\n<li>asyncio</li>\n<li>classic blocking API (TODO)</li>\n<li>future based API (TODO)</li>\n</ul>\n<p>Here is a summary of what is forseen and what is implemented</p>\n<table>\n<thead>\n<tr>\n<th>Concurrency</th>\n<th align=\"center\">Local</th>\n<th align=\"center\">RFC2217</th>\n<th align=\"center\">Raw TCP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>asyncio</td>\n<td align=\"center\">N</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n</tr>\n<tr>\n<td>classic sync</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n</tr>\n<tr>\n<td>conc. futures</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n</tr></tbody></table>\n<h2>Installation</h2>\n<p>From within your favourite python environment:</p>\n<pre><span class=\"go\">pip install serialio</span>\n</pre>\n<h2>Usage</h2>\n<p><em>asyncio</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serialio.aio.tcp</span> <span class=\"kn\">import</span> <span class=\"n\">Serial</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'raw.ser2net.com'</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Assuming a SCPI complient on the other end we can ask for:</span>\n    <span class=\"n\">reply</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">write_readline</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'*IDN?</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">reply</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p><em>classic (TODO)</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serialio.sio.tcp</span> <span class=\"kn\">import</span> <span class=\"n\">Serial</span>\n\n<span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'raw.ser2net.com'</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"n\">reply</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">write_readline</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'*IDN?</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">reply</span><span class=\"p\">)</span>\n</pre>\n<p><em>concurrent.futures (TODO)</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serialio.sio.tcp</span> <span class=\"kn\">import</span> <span class=\"n\">Serial</span>\n\n<span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'raw.ser2net.com'</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">resolve_futures</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">reply</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">write_readline</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'*IDN?</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">reply</span><span class=\"p\">)</span>\n</pre>\n<h2>Features</h2>\n<p>The main goal of a serialio Serial object is to facilitate communication\nwith instruments connected to a serial line.</p>\n<p>The most frequent cases include instruments which expect a REQ/REP\nsemantics with ASCII protocols like SCPI. In these cases most commands\ntranslate in small packets being exchanged between the host and the\ninstrument. When a raw TCP or RFC2217 bridge is used to access the serial\nline, serialio uses the sockio library.</p>\n<h3>REQ-REP semantics</h3>\n<p>Many instruments out there have a Request-Reply protocol. A serialio Serial\nprovides helpfull <code>write_read</code> family of methods which simplify communication\nwith these instruments.</p>\n<h3>Auto-reconnection</h3>\n<p>TODO: Write this chapter</p>\n<h3>Custom EOL</h3>\n<p>In line based protocols, sometimes people decide <code>\\n</code> is not a good EOL character.\nA serialio can be customized with a different EOL character. Example:</p>\n<pre><span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'raw.ser2net.com'</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">eol</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\r</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>The EOL character can be overwritten in any of the <code>readline</code> methods. Example:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">write_readline</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'*IDN?</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">eol</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\r</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h3>Streams</h3>\n<p>TODO: Write this chapter</p>\n\n          </div>"}, "last_serial": 6559229, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "a7330510e8d7ba4377531facba1b985d", "sha256": "b9f99f6e411e960dbe2ca88d7d5546d6ed68f311ed9d65538dcc5a76c62bc143"}, "downloads": -1, "filename": "serialio-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a7330510e8d7ba4377531facba1b985d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17793, "upload_time": "2019-12-23T11:26:15", "upload_time_iso_8601": "2019-12-23T11:26:15.088052Z", "url": "https://files.pythonhosted.org/packages/bd/85/f50f77b198baedbed4f5a876c12282ca7f12ee7465e7ddc083a72cde89ec/serialio-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2c82025196e861c650c42be3ded02472", "sha256": "824d33530be10a45950edaef1cdf4e31abdcfd1113df4b586025ac9acedf9380"}, "downloads": -1, "filename": "serialio-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2c82025196e861c650c42be3ded02472", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17615, "upload_time": "2020-02-02T18:43:08", "upload_time_iso_8601": "2020-02-02T18:43:08.009606Z", "url": "https://files.pythonhosted.org/packages/0b/de/7a66d438c1ca3bd5f70d773785da103d59d3a5b37496b98934ea1fe051fa/serialio-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c82025196e861c650c42be3ded02472", "sha256": "824d33530be10a45950edaef1cdf4e31abdcfd1113df4b586025ac9acedf9380"}, "downloads": -1, "filename": "serialio-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2c82025196e861c650c42be3ded02472", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17615, "upload_time": "2020-02-02T18:43:08", "upload_time_iso_8601": "2020-02-02T18:43:08.009606Z", "url": "https://files.pythonhosted.org/packages/0b/de/7a66d438c1ca3bd5f70d773785da103d59d3a5b37496b98934ea1fe051fa/serialio-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:17 2020"}