{"info": {"author": "Lorenzo A. Garcia Calzadilla", "author_email": "lorenzogarciacalzadilla@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Version Control", "Topic :: System :: Software Distribution", "Topic :: Utilities"], "description": "# Dynamic versioning plugin for Poetry\n[![License: MIT](https://img.shields.io/badge/license-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis package is a plugin for [Poetry](https://github.com/sdispater/poetry)\nto enable dynamic versioning based on tags in your version control system,\npowered by [Scmver](https://pypi.com/scmver).\n\nSince Poetry does not yet officially support plugins\n(refer to [this issue](https://github.com/sdispater/poetry/issues/693))\nas of the time of writing on 2019-12-10, this package takes some novel\nliberties to make the functionality possible. As soon as official support\nlands, this plugin will be updated to do things the official way.\n\n\n## Installation\nPython 3.5 (or newer) and Poetry 0.12.1 (or newer) are required.\n\n* Run `pip install poetry-scmver`\n* Add this to your pyproject.toml:\n  ```toml\n  [tool.scmver]\n  enable = true\n  ```\n\nNote that you must install the plugin in your global Python installation,\n**not** as a dependency in pyroject.toml, because the virtual environment\nthat Poetry creates cannot see Poetry itself and therefore cannot patch it.\n\n## Configuration\nIn your pyproject.toml file, you may configure the following options:\n\n`[tool.scmver]`: General options.\n\n  * `enable`: Boolean. Default: false. Since the plugin has to be installed globally, this setting is an opt-in per project. This setting will likely be removed once plugins are officially supported.\n  * `root`: A path of the working directory. Default: ``'.'``\n  * `spec`: A version specifier to construct the public version indentifiers. It will be incremented by the number of commits from the latest tag.\n    \n    * ``major``: It will increment the major version.\n    * ``minor``: It will increment the minor version.\n    * ``micro`` or ``patch``: It will increment the micro (patch) version.\n    * ``post``: It will increment the post-release segment.\n    * ``major.dev``: It will increment the development release segment after incrementing the major version by 1.\n    * ``minor.dev``: It will increment the development release segment after incrementing the minor version by 1.\n    * ``micro.dev`` or ``patch.dev``: It will increment the development release segment after incrementing the micro (patch) version by 1.\n    \n    Default: ``'post'``\n  \n  * `local`: A ``string`` to construct the local version identifiers.\n\n    Available keywords:\n\n    * ``{distance}``\n    * ``{reivison}``\n    * ``{branch}``\n    * ``{utc}``      - Return value of ``datetime.datetime.utcnow()``\n    * ``{local}``    - Return value of ``datetime.datetime.now()``\n\n    Default: ``'{local:%Y-%m-%d}'``\n\n  * `version`: A regular expression object to extract the version from SCM tags. It should contain the version group.\n  * `write_to`: A path to a file which will be generated using ``template``.\n  * `template`: A format string which is used by ``write_to``.\n    Available keywords:\n\n    * ``{version}``\n    * ``{revision}``\n    * ``{branch}``\n\n  * `bazaar.tag`: A regular expression pattern to filter tags.\n  * `fossil.tag`: A regular expression pattern to filter tags.\n  * `git.tag`: It will be passed to ``git describe`` as ``--match``.\n  * `mercurial.tag`: A regular expression pattern to filter tags.\n  * `subversion.tag`: A regular expression pattern to filter tags.\n  * `subversion.trunk`: A relative repository path of the trunk directory. Default: ``'trunk'``\n  * `subversion.branches: A relative repository path of the directory where branches are located. Default: ``'branches'``\n  * `subversion.tags`: A relative repository path of the directory where tags are located. Default: ``'tags'``\n\nSimple example:\n\n```toml\n[tool.semver]\nenable = true\nwrite_to = \"version.py\"\n```\n\n## Implementation\nIn order to side-load plugin functionality into Poetry, this package\ndoes the following:\n\n* Upon installation, it delivers a `zzz_poetry_semver.pth`\n  file to your Python site-packages directory. This forces Python to\n  automatically load the plugin after all other modules have been loaded\n  (or at least those alphabetically prior to `zzz`).\n* It patches `builtins.__import__` so that, whenever the first import from\n  Poetry finishes, `poetry.console.main` will be patched. The reason we have\n  to wait for a Poetry import is in case you've used the get-poetry.py script,\n  in which case there is a gap between when Python is fully loaded and when\n  `~/.poetry/bin/poetry` adds the Poetry lib folder to the PYTHONPATH.\n* The patched version of `poetry.console.main` will then, when called,\n  additionally patch either `poetry.poetry.Poetry.create()` or\n  `poetry.factory.Factory.create_poetry()` (depending on your Poetry version)\n  to replace the version from your pyproject.toml file with the dynamically\n  generated version.\n\n## Changelog\n\nSee [Changelog](CHANGELOG.md)\n\n## License\n\nSee [License](LICENSE.txt)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "poetry,scm,version,plugin", "license": "MIT", "maintainer": "Lorenzo A. Garcia Calzadilla", "maintainer_email": "lorenzogarciacalzadilla@gmail.com", "name": "poetry-scmver", "package_url": "https://pypi.org/project/poetry-scmver/", "platform": "", "project_url": "https://pypi.org/project/poetry-scmver/", "project_urls": null, "release_url": "https://pypi.org/project/poetry-scmver/0.1.2.dev6/", "requires_dist": ["tomlkit", "poetry", "scmver"], "requires_python": ">=3.7,<4.0", "summary": "Plugin for Poetry to enable dynamic versioning based on VCS tags for semver", "version": "0.1.2.dev6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dynamic versioning plugin for Poetry</h1>\n<p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ede485ee1830ab55be8e2afd1d1af1291ab13b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>This package is a plugin for <a href=\"https://github.com/sdispater/poetry\" rel=\"nofollow\">Poetry</a>\nto enable dynamic versioning based on tags in your version control system,\npowered by <a href=\"https://pypi.com/scmver\" rel=\"nofollow\">Scmver</a>.</p>\n<p>Since Poetry does not yet officially support plugins\n(refer to <a href=\"https://github.com/sdispater/poetry/issues/693\" rel=\"nofollow\">this issue</a>)\nas of the time of writing on 2019-12-10, this package takes some novel\nliberties to make the functionality possible. As soon as official support\nlands, this plugin will be updated to do things the official way.</p>\n<h2>Installation</h2>\n<p>Python 3.5 (or newer) and Poetry 0.12.1 (or newer) are required.</p>\n<ul>\n<li>Run <code>pip install poetry-scmver</code></li>\n<li>Add this to your pyproject.toml:\n<pre><span class=\"k\">[tool.scmver]</span>\n<span class=\"n\">enable</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n</pre>\n</li>\n</ul>\n<p>Note that you must install the plugin in your global Python installation,\n<strong>not</strong> as a dependency in pyroject.toml, because the virtual environment\nthat Poetry creates cannot see Poetry itself and therefore cannot patch it.</p>\n<h2>Configuration</h2>\n<p>In your pyproject.toml file, you may configure the following options:</p>\n<p><code>[tool.scmver]</code>: General options.</p>\n<ul>\n<li>\n<p><code>enable</code>: Boolean. Default: false. Since the plugin has to be installed globally, this setting is an opt-in per project. This setting will likely be removed once plugins are officially supported.</p>\n</li>\n<li>\n<p><code>root</code>: A path of the working directory. Default: <code>'.'</code></p>\n</li>\n<li>\n<p><code>spec</code>: A version specifier to construct the public version indentifiers. It will be incremented by the number of commits from the latest tag.</p>\n<ul>\n<li><code>major</code>: It will increment the major version.</li>\n<li><code>minor</code>: It will increment the minor version.</li>\n<li><code>micro</code> or <code>patch</code>: It will increment the micro (patch) version.</li>\n<li><code>post</code>: It will increment the post-release segment.</li>\n<li><code>major.dev</code>: It will increment the development release segment after incrementing the major version by 1.</li>\n<li><code>minor.dev</code>: It will increment the development release segment after incrementing the minor version by 1.</li>\n<li><code>micro.dev</code> or <code>patch.dev</code>: It will increment the development release segment after incrementing the micro (patch) version by 1.</li>\n</ul>\n<p>Default: <code>'post'</code></p>\n</li>\n<li>\n<p><code>local</code>: A <code>string</code> to construct the local version identifiers.</p>\n<p>Available keywords:</p>\n<ul>\n<li><code>{distance}</code></li>\n<li><code>{reivison}</code></li>\n<li><code>{branch}</code></li>\n<li><code>{utc}</code>      - Return value of <code>datetime.datetime.utcnow()</code></li>\n<li><code>{local}</code>    - Return value of <code>datetime.datetime.now()</code></li>\n</ul>\n<p>Default: <code>'{local:%Y-%m-%d}'</code></p>\n</li>\n<li>\n<p><code>version</code>: A regular expression object to extract the version from SCM tags. It should contain the version group.</p>\n</li>\n<li>\n<p><code>write_to</code>: A path to a file which will be generated using <code>template</code>.</p>\n</li>\n<li>\n<p><code>template</code>: A format string which is used by <code>write_to</code>.\nAvailable keywords:</p>\n<ul>\n<li><code>{version}</code></li>\n<li><code>{revision}</code></li>\n<li><code>{branch}</code></li>\n</ul>\n</li>\n<li>\n<p><code>bazaar.tag</code>: A regular expression pattern to filter tags.</p>\n</li>\n<li>\n<p><code>fossil.tag</code>: A regular expression pattern to filter tags.</p>\n</li>\n<li>\n<p><code>git.tag</code>: It will be passed to <code>git describe</code> as <code>--match</code>.</p>\n</li>\n<li>\n<p><code>mercurial.tag</code>: A regular expression pattern to filter tags.</p>\n</li>\n<li>\n<p><code>subversion.tag</code>: A regular expression pattern to filter tags.</p>\n</li>\n<li>\n<p><code>subversion.trunk</code>: A relative repository path of the trunk directory. Default: <code>'trunk'</code></p>\n</li>\n<li>\n<p>`subversion.branches: A relative repository path of the directory where branches are located. Default: <code>'branches'</code></p>\n</li>\n<li>\n<p><code>subversion.tags</code>: A relative repository path of the directory where tags are located. Default: <code>'tags'</code></p>\n</li>\n</ul>\n<p>Simple example:</p>\n<pre><span class=\"k\">[tool.semver]</span>\n<span class=\"n\">enable</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"n\">write_to</span> <span class=\"o\">=</span> <span class=\"s\">\"version.py\"</span>\n</pre>\n<h2>Implementation</h2>\n<p>In order to side-load plugin functionality into Poetry, this package\ndoes the following:</p>\n<ul>\n<li>Upon installation, it delivers a <code>zzz_poetry_semver.pth</code>\nfile to your Python site-packages directory. This forces Python to\nautomatically load the plugin after all other modules have been loaded\n(or at least those alphabetically prior to <code>zzz</code>).</li>\n<li>It patches <code>builtins.__import__</code> so that, whenever the first import from\nPoetry finishes, <code>poetry.console.main</code> will be patched. The reason we have\nto wait for a Poetry import is in case you've used the get-poetry.py script,\nin which case there is a gap between when Python is fully loaded and when\n<code>~/.poetry/bin/poetry</code> adds the Poetry lib folder to the PYTHONPATH.</li>\n<li>The patched version of <code>poetry.console.main</code> will then, when called,\nadditionally patch either <code>poetry.poetry.Poetry.create()</code> or\n<code>poetry.factory.Factory.create_poetry()</code> (depending on your Poetry version)\nto replace the version from your pyproject.toml file with the dynamically\ngenerated version.</li>\n</ul>\n<h2>Changelog</h2>\n<p>See <a href=\"CHANGELOG.md\" rel=\"nofollow\">Changelog</a></p>\n<h2>License</h2>\n<p>See <a href=\"LICENSE.txt\" rel=\"nofollow\">License</a></p>\n\n          </div>"}, "last_serial": 6311534, "releases": {"0.1.1.dev0": [{"comment_text": "", "digests": {"md5": "1dba097a0894246c2dc8c56e6ac8461d", "sha256": "7023e34b4e5b6052341675f75cb782684cb0961e1622d31f97afa793c49a4cf8"}, "downloads": -1, "filename": "poetry_scmver-0.1.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "1dba097a0894246c2dc8c56e6ac8461d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5859, "upload_time": "2019-12-11T19:06:46", "upload_time_iso_8601": "2019-12-11T19:06:46.733774Z", "url": "https://files.pythonhosted.org/packages/5a/e3/e34a8c5ff6ba6ac93fdae06acd0216a1fc4f5db0a95f9b8ad94fcd1d90e9/poetry_scmver-0.1.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e60db913c4d84c58e8015018d1e69f9", "sha256": "200c28c1f6925a14abc8d580c8c76edc4b00cb6dd7702f142baf978b92bc1b83"}, "downloads": -1, "filename": "poetry-scmver-0.1.1.dev0.tar.gz", "has_sig": false, "md5_digest": "1e60db913c4d84c58e8015018d1e69f9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6148, "upload_time": "2019-12-11T19:06:42", "upload_time_iso_8601": "2019-12-11T19:06:42.739831Z", "url": "https://files.pythonhosted.org/packages/ce/df/242d3fcc59384c2e8f3c68c51223b7d7dd6c6e9752145a0e6a8e74ecf7a6/poetry-scmver-0.1.1.dev0.tar.gz", "yanked": false}], "0.1.2.dev6": [{"comment_text": "", "digests": {"md5": "5f0e4c77dcafc781c5a8edd00de435d8", "sha256": "4d6c07964152f221fc18df48759a6f4603482c135f200064b6a663212b73e6ca"}, "downloads": -1, "filename": "poetry_scmver-0.1.2.dev6-py3-none-any.whl", "has_sig": false, "md5_digest": "5f0e4c77dcafc781c5a8edd00de435d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5960, "upload_time": "2019-12-16T14:22:57", "upload_time_iso_8601": "2019-12-16T14:22:57.736843Z", "url": "https://files.pythonhosted.org/packages/76/b8/0d28dd22527aa6742c38786cc9f277aee07874b150d37a5d1b744d9a45cc/poetry_scmver-0.1.2.dev6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8db67da5d78f231aa8e8f430e66a4b50", "sha256": "63239d032c6928b5b7936420809d030911c73fdbb7670909c7a6ea086ac1e4f1"}, "downloads": -1, "filename": "poetry-scmver-0.1.2.dev6.tar.gz", "has_sig": false, "md5_digest": "8db67da5d78f231aa8e8f430e66a4b50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6230, "upload_time": "2019-12-16T14:22:55", "upload_time_iso_8601": "2019-12-16T14:22:55.365254Z", "url": "https://files.pythonhosted.org/packages/9d/b5/743c0e6374274444823f2fc1de5729bb3fdc4f4547238a3f963120983040/poetry-scmver-0.1.2.dev6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f0e4c77dcafc781c5a8edd00de435d8", "sha256": "4d6c07964152f221fc18df48759a6f4603482c135f200064b6a663212b73e6ca"}, "downloads": -1, "filename": "poetry_scmver-0.1.2.dev6-py3-none-any.whl", "has_sig": false, "md5_digest": "5f0e4c77dcafc781c5a8edd00de435d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5960, "upload_time": "2019-12-16T14:22:57", "upload_time_iso_8601": "2019-12-16T14:22:57.736843Z", "url": "https://files.pythonhosted.org/packages/76/b8/0d28dd22527aa6742c38786cc9f277aee07874b150d37a5d1b744d9a45cc/poetry_scmver-0.1.2.dev6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8db67da5d78f231aa8e8f430e66a4b50", "sha256": "63239d032c6928b5b7936420809d030911c73fdbb7670909c7a6ea086ac1e4f1"}, "downloads": -1, "filename": "poetry-scmver-0.1.2.dev6.tar.gz", "has_sig": false, "md5_digest": "8db67da5d78f231aa8e8f430e66a4b50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6230, "upload_time": "2019-12-16T14:22:55", "upload_time_iso_8601": "2019-12-16T14:22:55.365254Z", "url": "https://files.pythonhosted.org/packages/9d/b5/743c0e6374274444823f2fc1de5729bb3fdc4f4547238a3f963120983040/poetry-scmver-0.1.2.dev6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:03 2020"}