{"info": {"author": "Dominik Vilsmeier", "author_email": "d.vilsmeier@gsi.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Physics", "Topic :: Scientific/Engineering :: Visualization"], "description": "madplot\n=======\n\nThis project aims to facilitate working with MADX from within Python. It contains the following\nmajor components:\n\n* **MADX API**: `Build <#builder>`__, `parse <#parser>`__ and `run <#engine>`__ MADX scripts.\n* **Plot API**: `Plot <#plotting>`__ MADX output in various formats.\n* **Utilities**: `Convert <#utilities>`__ MADX output tables to pandas data frames.\n\nScript templating via `Jinja <#using-jinja-as-templating-engine>`__ is also supported.\n\n\nMADX API\n--------\n\nThe MADX API consists of three parts: *building*, *parsing* and *running* MADX scripts.\n\n\nBuilder\n```````\n\nThe builder API can be used for creating MADX scripts. The following example code shows the\nvarious features.\n\n.. code-block:: python\n\n   from madplot.madx.builder import Script\n\n   # At first generate a new script.\n   s = Script()\n\n   # Labeled or declaration statements can be created via `[]` access.\n   # This produces the following statement in the resulting MADX script:\n   # L = 5;\n   # N = 10;\n   s['L'] = 5\n   s['N'] = 10\n\n   # MADX commands can be created by accessing them through the script instance.\n   # Output: `DP: SBEND, L = L/2, ANGLE = 2*PI/(2*N);`.\n   s['DP'] = s.SBEND(L='L/2', ANGLE='2*PI/(2*N)')\n\n   # Output: `QF: MULTIPOLE, KNL = {0, 1/f};`.\n   s['QF'] = s.MULTIPOLE(KNL=[0, '1/f'])\n\n   # Sequences can be generated using the `Sequence` class.\n   from madplot.madx.builder import Sequence\n\n   with Sequence(refer='entry', l='N*L') as seq:\n       for n in range(s.N):  # Python loop over number of cells.\n           # Unlabeled statements can be just added the script instance.\n           # Stored element definitions can be reused via attribute access of the script instance.\n           # This produces the following output: `QF, at = 0 * L;`.\n           seq += s.QF(at=f'{n} * L')\n\n           # [...] Add more elements.\n\n   # Adding a sequence to the script will auto-expand it when dumping the script.\n   # This produces the following output:\n   # `LATTICE: sequence, refer = entry, l = N*L;`\n   # `    QF, at = 0 * L;`\n   # `    [...]`\n   # `endsequence;`\n   s['LATTICE'] = seq\n\n   # A script can be dumped by converting to `str`.\n   with open('example.seq', 'w') as f:\n       f.write(str(s))\n\nComplete code example\n~~~~~~~~~~~~~~~~~~~~~\n\nThe following is a complete code example.\n\n.. code-block:: python\n\n   from madplot.madx.builder import Sequence, Script\n\n   s = Script()\n\n   s['N_cells'] = 60\n   s['L_cell'] = 13.45\n   s['f'] = 7.570366\n\n   s['DP'] = s.SBEND(L='L_cell/2', ANGLE='2*PI / (2*N_cells)')\n   s['QF'] = s.MULTIPOLE(KNL=['0', '1/f'])\n   s['QD'] = s.MULTIPOLE(KNL=['0', '-1/f'])\n\n   with Sequence(refer='entry', l='N_cells*L_cell') as seq:\n       for n in range(s.N_cells):\n           seq += s.QF(at=f'{n} * L_cell')\n           seq += s.DP(at=f'{n} * L_cell')\n           seq += s.QD(at=f'{n} * L_cell + 0.50 * L_cell')\n           seq += s.DP(at=f'{n} * L_cell + 0.50 * L_cell')\n\n   s['FODO_LATTICE'] = seq\n\n   with open('example.seq', 'w') as f:\n       f.write(str(s))\n\nAdvanced control\n~~~~~~~~~~~~~~~~\n\nThe following operations allow for advanced control statements.\n\n* Comments can be placed as strings: ``s += '// Comment'``.\n* Re-evaluated (deferred) expressions (``:=``) can be created via the ``E`` class: ``from madplot.madx.builder import E; s += s.ealign(dx=E('ranf()'))``.\n* Any MADX command can be accessed via the script instance: ``s += s.TWISS(file='optics')``.\n\n\nParser\n``````\n\nThe ``parser.Parser`` class has two methods available:\n\n* ``Parser.raw_parse``: This method parses the given script into its statements and returns a list thereof. The different statement types can be found in ``Parser._types``. The literal values of command attributes will be returned.\n* ``Parser.parse``: Parses the script into its statements as well but only returns non-comment non-variable declaration statements and interpolates any command attribute values.\n\nFor example:\n\n.. code-block:: python\n\n   >>> madx = '''\n   ...     L = 5;\n   ...     QF: QUADRUPOLE, k1 := pi/5, l = L;\n   ... '''\n   >>> Parser.raw_parse(madx)\n   [[Variable] L = 5, [Command] QF: QUADRUPOLE {'k1': 'pi/5', 'l': 'L'}]\n   >>> Parser.parse(madx)\n   [[Command] QF: QUADRUPOLE {'k1': 0.6283185307179586, 'l': 5}]\n\n\nEngine\n``````\n\nThe MADX Engine API can be used to run MADX scripts. The ``MADXEngine`` class expects a set of templates\nwhich will be used to run the script. A template is a MADX script that contains unfilled parts which\ncan be interpolated later on. The first template is considered the entry point (the main script) and will be run.\n\nThe following code creates an engine:\n\n.. code-block:: python\n\n   from madplot.madx.engine import MADXEngine\n\n   engine = MADXEngine(\n       ['test.madx', 'test.seq'],  # Template files; `test.madx` is the main script.\n       madx='/opt/madx',  # File path to the MADX executable; if not specifed the `MADX` environment variable will be considered.\n       working_directory='/tmp/test'  # The directory in which the engine runs the scripts.\n   )\n\nThe templates can contain substitutions following the Python string formatting rules.\nFor example: ``QF: QUADRUPOLE, KL={kl};``. The ``{kl}`` part can be interpolated when running the scripts.\n\nThe ``run`` method can be invoked to run a script. It expects a list of output file names (which need to be\ngenerated by the template scripts). By default the file contents will be returned as ``pandas.DataFrame``\ninstances.\n\n.. code-block:: python\n\n   twiss, = engine.run(['example.twiss'])\n\nHere the file ``example.twiss`` needs to be generated when running ``test.madx``.\nIn case one or more template scripts require interpolation the corresponding values can be specified\nusing the ``configuration`` keyword argument:\n\n.. code-block:: python\n\n   twiss, = engine.run(\n       ['example.twiss'],\n       configuration={'test.madx': {'kl': 0.01}}\n   )\n\nSpecial arguments for the output conversion can be specified per output in form of a ``dict``:\n\n.. code-block:: python\n\n   (twiss, meta), = engine.run([('example.twiss', {'return_meta': True}])\n\nThis will return meta data (prefixed with ``@`` in the TFS output) along the main data frame.\n\n\nRunning without creating intermediary files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``MADXPipe`` class runs scripts without creating intermediary script files. This is useful in order to minimize\nthe load on the file system. It yields stdout and stderr from the underlying MADX sub-process:\n\n.. code-block:: python\n\n   from madplot.madx import MADXPipe\n\n   runner = MADXPipe(madx='path/to/madx')\n   with open('example.madx') as fh:\n       stdout, stderr = runner.run(fh.read())\n\nTemplating and formatting is done manually in Python before providing the full script to the ``runner`` instance:\n\n.. code-block:: python\n\n   with open('template.madx') as fh:\n       stdout, stderr = runner.run(fh.read() % {'h1_kick': 0.001})\n\n\nSessions\n~~~~~~~~\n\nThe ``MADXSession`` can be used to run interactive MADX sessions. This is advantageous to avoid rerunning parts of\na script that are the same for each run (e.g. sequence structure); also it doesn't require starting a new process for\neach run. Instead one can only issue the relevant commands (e.g. update an optics parameter) and then\nask for the results (e.g. Twiss file generation). For example:\n\n.. code-block:: python\n\n   from madplot.madx.engine import MADXSession\n\n   with open('/tmp/log', 'w') as log:\n       session = MADXSession(stderr=log, stdout=log)\n       session.run(['a := ranf()'])\n       session.run(['value a'] * 3)\n\n   # Running a script at start-up.\n   session = MADXSession(['twiss_script.madx'])\n   twiss, = session.run(results=['example.twiss'])\n   # Update a parameter and regenerate twiss.\n   twiss, = session.run(['some_parameter = 0', 'twiss, file=\"example.twiss\"'],\n                        results=['example.twiss'])\n\n\nUsing Jinja as templating engine\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``JinjaEngine`` and ``JinjaPipe`` classes allow for using the `Jinja2 <https://pypi.org/project/Jinja2/>`__ templating\nengine for configuring single runs. ``JinjaEngine`` creates intermediary script files for each configuration,\nsimilar to the ``MADXEngine`` class, while ``JinjaPipe`` directly pipes input and output to the MADX sub-process,\nsimilar to ``MADXPipe``.\n\n.. code-block:: python\n\n   from random import random\n   from madplot.madx import JinjaEngine, JinjaPipe\n\n   file_runner = JinjaEngine('example.madx.j2', madx='path/to/madx')\n   twiss, = file_runner.run(['twiss.tfs'],\n                            configuration={'quadrupole_gradient_errors': {f'quad_{i+1}': 0.001 * random() for i in range(18)}},\n                            job_id='test')\n\n   pipe_runner = JinjaPipe('example.madx.j2', madx='path/to/madx')\n   stdout, stderr = pipe_runner.run(quadrupole_gradient_errors={f'quad_{i+1}': 0.001 * random() for i in range(18)})\n\n\nPlotting\n--------\n\nVarious functions for plotting are available in the ``madplot.plot`` module. Please refer directly\nto this module for further information.\n\n\nUtilities\n---------\n\nUtilities for conversion of data formats are available at ``madplot.utils``:\n\n* ``Convert.tfs``: Converts TFS file to pandas data frame,\n* ``Convert.trackone``: Converts trackone table (as outputted by ``TRACK, onetable = true``) to pandas data frame.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/Dominik1123/madplot", "keywords": "MAD,MADX,accelerator,design,interface,plot,simulation,visualization", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "madplot", "package_url": "https://pypi.org/project/madplot/", "platform": "", "project_url": "https://pypi.org/project/madplot/", "project_urls": {"Homepage": "https://gitlab.com/Dominik1123/madplot"}, "release_url": "https://pypi.org/project/madplot/0.4.1/", "requires_dist": ["jinja2", "matplotlib", "numpy", "pandas", "scipy"], "requires_python": ">=3.6", "summary": "Plot MAD output (and more).", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project aims to facilitate working with MADX from within Python. It contains the following\nmajor components:</p>\n<ul>\n<li><strong>MADX API</strong>: <a href=\"#builder\" rel=\"nofollow\">Build</a>, <a href=\"#parser\" rel=\"nofollow\">parse</a> and <a href=\"#engine\" rel=\"nofollow\">run</a> MADX scripts.</li>\n<li><strong>Plot API</strong>: <a href=\"#plotting\" rel=\"nofollow\">Plot</a> MADX output in various formats.</li>\n<li><strong>Utilities</strong>: <a href=\"#utilities\" rel=\"nofollow\">Convert</a> MADX output tables to pandas data frames.</li>\n</ul>\n<p>Script templating via <a href=\"#using-jinja-as-templating-engine\" rel=\"nofollow\">Jinja</a> is also supported.</p>\n<div id=\"madx-api\">\n<h2>MADX API</h2>\n<p>The MADX API consists of three parts: <em>building</em>, <em>parsing</em> and <em>running</em> MADX scripts.</p>\n<div id=\"builder\">\n<h3>Builder</h3>\n<p>The builder API can be used for creating MADX scripts. The following example code shows the\nvarious features.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">madplot.madx.builder</span> <span class=\"kn\">import</span> <span class=\"n\">Script</span>\n\n<span class=\"c1\"># At first generate a new script.</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Labeled or declaration statements can be created via `[]` access.</span>\n<span class=\"c1\"># This produces the following statement in the resulting MADX script:</span>\n<span class=\"c1\"># L = 5;</span>\n<span class=\"c1\"># N = 10;</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'L'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'N'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># MADX commands can be created by accessing them through the script instance.</span>\n<span class=\"c1\"># Output: `DP: SBEND, L = L/2, ANGLE = 2*PI/(2*N);`.</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'DP'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">SBEND</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"o\">=</span><span class=\"s1\">'L/2'</span><span class=\"p\">,</span> <span class=\"n\">ANGLE</span><span class=\"o\">=</span><span class=\"s1\">'2*PI/(2*N)'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Output: `QF: MULTIPOLE, KNL = {0, 1/f};`.</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'QF'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">MULTIPOLE</span><span class=\"p\">(</span><span class=\"n\">KNL</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'1/f'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Sequences can be generated using the `Sequence` class.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">madplot.madx.builder</span> <span class=\"kn\">import</span> <span class=\"n\">Sequence</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Sequence</span><span class=\"p\">(</span><span class=\"n\">refer</span><span class=\"o\">=</span><span class=\"s1\">'entry'</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"s1\">'N*L'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">seq</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">N</span><span class=\"p\">):</span>  <span class=\"c1\"># Python loop over number of cells.</span>\n        <span class=\"c1\"># Unlabeled statements can be just added the script instance.</span>\n        <span class=\"c1\"># Stored element definitions can be reused via attribute access of the script instance.</span>\n        <span class=\"c1\"># This produces the following output: `QF, at = 0 * L;`.</span>\n        <span class=\"n\">seq</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">QF</span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s1\"> * L'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># [...] Add more elements.</span>\n\n<span class=\"c1\"># Adding a sequence to the script will auto-expand it when dumping the script.</span>\n<span class=\"c1\"># This produces the following output:</span>\n<span class=\"c1\"># `LATTICE: sequence, refer = entry, l = N*L;`</span>\n<span class=\"c1\"># `    QF, at = 0 * L;`</span>\n<span class=\"c1\"># `    [...]`</span>\n<span class=\"c1\"># `endsequence;`</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'LATTICE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">seq</span>\n\n<span class=\"c1\"># A script can be dumped by converting to `str`.</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'example.seq'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n</pre>\n<div id=\"complete-code-example\">\n<h4>Complete code example</h4>\n<p>The following is a complete code example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">madplot.madx.builder</span> <span class=\"kn\">import</span> <span class=\"n\">Sequence</span><span class=\"p\">,</span> <span class=\"n\">Script</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">()</span>\n\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'N_cells'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'L_cell'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">13.45</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'f'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">7.570366</span>\n\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'DP'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">SBEND</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"o\">=</span><span class=\"s1\">'L_cell/2'</span><span class=\"p\">,</span> <span class=\"n\">ANGLE</span><span class=\"o\">=</span><span class=\"s1\">'2*PI / (2*N_cells)'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'QF'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">MULTIPOLE</span><span class=\"p\">(</span><span class=\"n\">KNL</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'1/f'</span><span class=\"p\">])</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'QD'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">MULTIPOLE</span><span class=\"p\">(</span><span class=\"n\">KNL</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'-1/f'</span><span class=\"p\">])</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Sequence</span><span class=\"p\">(</span><span class=\"n\">refer</span><span class=\"o\">=</span><span class=\"s1\">'entry'</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"s1\">'N_cells*L_cell'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">seq</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">N_cells</span><span class=\"p\">):</span>\n        <span class=\"n\">seq</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">QF</span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s1\"> * L_cell'</span><span class=\"p\">)</span>\n        <span class=\"n\">seq</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">DP</span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s1\"> * L_cell'</span><span class=\"p\">)</span>\n        <span class=\"n\">seq</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">QD</span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s1\"> * L_cell + 0.50 * L_cell'</span><span class=\"p\">)</span>\n        <span class=\"n\">seq</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">DP</span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s1\"> * L_cell + 0.50 * L_cell'</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'FODO_LATTICE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">seq</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'example.seq'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"advanced-control\">\n<h4>Advanced control</h4>\n<p>The following operations allow for advanced control statements.</p>\n<ul>\n<li>Comments can be placed as strings: <tt>s += '// Comment'</tt>.</li>\n<li>Re-evaluated (deferred) expressions (<tt>:=</tt>) can be created via the <tt>E</tt> class: <tt>from madplot.madx.builder import E; s += <span class=\"pre\">s.ealign(dx=E('ranf()'))</span></tt>.</li>\n<li>Any MADX command can be accessed via the script instance: <tt>s += <span class=\"pre\">s.TWISS(file='optics')</span></tt>.</li>\n</ul>\n</div>\n</div>\n<div id=\"parser\">\n<h3>Parser</h3>\n<p>The <tt>parser.Parser</tt> class has two methods available:</p>\n<ul>\n<li><tt>Parser.raw_parse</tt>: This method parses the given script into its statements and returns a list thereof. The different statement types can be found in <tt>Parser._types</tt>. The literal values of command attributes will be returned.</li>\n<li><tt>Parser.parse</tt>: Parses the script into its statements as well but only returns non-comment non-variable declaration statements and interpolates any command attribute values.</li>\n</ul>\n<p>For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">madx</span> <span class=\"o\">=</span> <span class=\"s1\">'''\n...     L = 5;\n...     QF: QUADRUPOLE, k1 := pi/5, l = L;\n... '''</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Parser</span><span class=\"o\">.</span><span class=\"n\">raw_parse</span><span class=\"p\">(</span><span class=\"n\">madx</span><span class=\"p\">)</span>\n<span class=\"p\">[[</span><span class=\"n\">Variable</span><span class=\"p\">]</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Command</span><span class=\"p\">]</span> <span class=\"n\">QF</span><span class=\"p\">:</span> <span class=\"n\">QUADRUPOLE</span> <span class=\"p\">{</span><span class=\"s1\">'k1'</span><span class=\"p\">:</span> <span class=\"s1\">'pi/5'</span><span class=\"p\">,</span> <span class=\"s1\">'l'</span><span class=\"p\">:</span> <span class=\"s1\">'L'</span><span class=\"p\">}]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">madx</span><span class=\"p\">)</span>\n<span class=\"p\">[[</span><span class=\"n\">Command</span><span class=\"p\">]</span> <span class=\"n\">QF</span><span class=\"p\">:</span> <span class=\"n\">QUADRUPOLE</span> <span class=\"p\">{</span><span class=\"s1\">'k1'</span><span class=\"p\">:</span> <span class=\"mf\">0.6283185307179586</span><span class=\"p\">,</span> <span class=\"s1\">'l'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}]</span>\n</pre>\n</div>\n<div id=\"engine\">\n<h3>Engine</h3>\n<p>The MADX Engine API can be used to run MADX scripts. The <tt>MADXEngine</tt> class expects a set of templates\nwhich will be used to run the script. A template is a MADX script that contains unfilled parts which\ncan be interpolated later on. The first template is considered the entry point (the main script) and will be run.</p>\n<p>The following code creates an engine:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">madplot.madx.engine</span> <span class=\"kn\">import</span> <span class=\"n\">MADXEngine</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">MADXEngine</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"s1\">'test.madx'</span><span class=\"p\">,</span> <span class=\"s1\">'test.seq'</span><span class=\"p\">],</span>  <span class=\"c1\"># Template files; `test.madx` is the main script.</span>\n    <span class=\"n\">madx</span><span class=\"o\">=</span><span class=\"s1\">'/opt/madx'</span><span class=\"p\">,</span>  <span class=\"c1\"># File path to the MADX executable; if not specifed the `MADX` environment variable will be considered.</span>\n    <span class=\"n\">working_directory</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/test'</span>  <span class=\"c1\"># The directory in which the engine runs the scripts.</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The templates can contain substitutions following the Python string formatting rules.\nFor example: <tt>QF: QUADRUPOLE, <span class=\"pre\">KL={kl};</span></tt>. The <tt>{kl}</tt> part can be interpolated when running the scripts.</p>\n<p>The <tt>run</tt> method can be invoked to run a script. It expects a list of output file names (which need to be\ngenerated by the template scripts). By default the file contents will be returned as <tt>pandas.DataFrame</tt>\ninstances.</p>\n<pre><span class=\"n\">twiss</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">'example.twiss'</span><span class=\"p\">])</span>\n</pre>\n<p>Here the file <tt>example.twiss</tt> needs to be generated when running <tt>test.madx</tt>.\nIn case one or more template scripts require interpolation the corresponding values can be specified\nusing the <tt>configuration</tt> keyword argument:</p>\n<pre><span class=\"n\">twiss</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"s1\">'example.twiss'</span><span class=\"p\">],</span>\n    <span class=\"n\">configuration</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'test.madx'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'kl'</span><span class=\"p\">:</span> <span class=\"mf\">0.01</span><span class=\"p\">}}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Special arguments for the output conversion can be specified per output in form of a <tt>dict</tt>:</p>\n<pre><span class=\"p\">(</span><span class=\"n\">twiss</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">),</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([(</span><span class=\"s1\">'example.twiss'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'return_meta'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}])</span>\n</pre>\n<p>This will return meta data (prefixed with <tt>@</tt> in the TFS output) along the main data frame.</p>\n<div id=\"running-without-creating-intermediary-files\">\n<h4>Running without creating intermediary files</h4>\n<p>The <tt>MADXPipe</tt> class runs scripts without creating intermediary script files. This is useful in order to minimize\nthe load on the file system. It yields stdout and stderr from the underlying MADX sub-process:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">madplot.madx</span> <span class=\"kn\">import</span> <span class=\"n\">MADXPipe</span>\n\n<span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">MADXPipe</span><span class=\"p\">(</span><span class=\"n\">madx</span><span class=\"o\">=</span><span class=\"s1\">'path/to/madx'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'example.madx'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n    <span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n<p>Templating and formatting is done manually in Python before providing the full script to the <tt>runner</tt> instance:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'template.madx'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n    <span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span> <span class=\"o\">%</span> <span class=\"p\">{</span><span class=\"s1\">'h1_kick'</span><span class=\"p\">:</span> <span class=\"mf\">0.001</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"sessions\">\n<h4>Sessions</h4>\n<p>The <tt>MADXSession</tt> can be used to run interactive MADX sessions. This is advantageous to avoid rerunning parts of\na script that are the same for each run (e.g. sequence structure); also it doesn\u2019t require starting a new process for\neach run. Instead one can only issue the relevant commands (e.g. update an optics parameter) and then\nask for the results (e.g. Twiss file generation). For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">madplot.madx.engine</span> <span class=\"kn\">import</span> <span class=\"n\">MADXSession</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/log'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">log</span><span class=\"p\">:</span>\n    <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">MADXSession</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">log</span><span class=\"p\">)</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">'a := ranf()'</span><span class=\"p\">])</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">'value a'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Running a script at start-up.</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">MADXSession</span><span class=\"p\">([</span><span class=\"s1\">'twiss_script.madx'</span><span class=\"p\">])</span>\n<span class=\"n\">twiss</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'example.twiss'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Update a parameter and regenerate twiss.</span>\n<span class=\"n\">twiss</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">'some_parameter = 0'</span><span class=\"p\">,</span> <span class=\"s1\">'twiss, file=\"example.twiss\"'</span><span class=\"p\">],</span>\n                     <span class=\"n\">results</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'example.twiss'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"using-jinja-as-templating-engine\">\n<h4>Using Jinja as templating engine</h4>\n<p>The <tt>JinjaEngine</tt> and <tt>JinjaPipe</tt> classes allow for using the <a href=\"https://pypi.org/project/Jinja2/\" rel=\"nofollow\">Jinja2</a> templating\nengine for configuring single runs. <tt>JinjaEngine</tt> creates intermediary script files for each configuration,\nsimilar to the <tt>MADXEngine</tt> class, while <tt>JinjaPipe</tt> directly pipes input and output to the MADX sub-process,\nsimilar to <tt>MADXPipe</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">madplot.madx</span> <span class=\"kn\">import</span> <span class=\"n\">JinjaEngine</span><span class=\"p\">,</span> <span class=\"n\">JinjaPipe</span>\n\n<span class=\"n\">file_runner</span> <span class=\"o\">=</span> <span class=\"n\">JinjaEngine</span><span class=\"p\">(</span><span class=\"s1\">'example.madx.j2'</span><span class=\"p\">,</span> <span class=\"n\">madx</span><span class=\"o\">=</span><span class=\"s1\">'path/to/madx'</span><span class=\"p\">)</span>\n<span class=\"n\">twiss</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">file_runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">'twiss.tfs'</span><span class=\"p\">],</span>\n                         <span class=\"n\">configuration</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'quadrupole_gradient_errors'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sa\">f</span><span class=\"s1\">'quad_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">:</span> <span class=\"mf\">0.001</span> <span class=\"o\">*</span> <span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">)}},</span>\n                         <span class=\"n\">job_id</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n\n<span class=\"n\">pipe_runner</span> <span class=\"o\">=</span> <span class=\"n\">JinjaPipe</span><span class=\"p\">(</span><span class=\"s1\">'example.madx.j2'</span><span class=\"p\">,</span> <span class=\"n\">madx</span><span class=\"o\">=</span><span class=\"s1\">'path/to/madx'</span><span class=\"p\">)</span>\n<span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">pipe_runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">quadrupole_gradient_errors</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sa\">f</span><span class=\"s1\">'quad_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">:</span> <span class=\"mf\">0.001</span> <span class=\"o\">*</span> <span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">)})</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"plotting\">\n<h2>Plotting</h2>\n<p>Various functions for plotting are available in the <tt>madplot.plot</tt> module. Please refer directly\nto this module for further information.</p>\n</div>\n<div id=\"utilities\">\n<h2>Utilities</h2>\n<p>Utilities for conversion of data formats are available at <tt>madplot.utils</tt>:</p>\n<ul>\n<li><tt>Convert.tfs</tt>: Converts TFS file to pandas data frame,</li>\n<li><tt>Convert.trackone</tt>: Converts trackone table (as outputted by <tt>TRACK, onetable = true</tt>) to pandas data frame.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6703842, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d16801ecb8b3b1d6b77134f5b1d8a344", "sha256": "7382aba170f2fa8d9bc7e10c72a5d74a93f2a08ec21f8f23c3843109191f02db"}, "downloads": -1, "filename": "madplot-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d16801ecb8b3b1d6b77134f5b1d8a344", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13657, "upload_time": "2018-12-17T09:18:17", "upload_time_iso_8601": "2018-12-17T09:18:17.472334Z", "url": "https://files.pythonhosted.org/packages/e0/24/a89eec22391b9b7eee41e9632baca2cdf9c51f911c0ffd540f09b0a302a9/madplot-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72c0b05a1a76e9bc9d2df893fd546d4c", "sha256": "82ad9e7d38b845df4e8fa371197d13d2b02bb888e17979777aa0d4cf96b8fca8"}, "downloads": -1, "filename": "madplot-0.1.tar.gz", "has_sig": false, "md5_digest": "72c0b05a1a76e9bc9d2df893fd546d4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14030, "upload_time": "2018-12-17T09:18:25", "upload_time_iso_8601": "2018-12-17T09:18:25.658699Z", "url": "https://files.pythonhosted.org/packages/6b/a0/def8f1fde6bfcdb7ebcfd78ab8cb1276f1bf45cb9492a6da7c3474f1aabb/madplot-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "196fc6642e23d60ad2fe28e69c3fc1df", "sha256": "b329efeedab0dbfe9766501932c2dc12ce0b2d51466a436eb174a9d3c0adbca7"}, "downloads": -1, "filename": "madplot-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "196fc6642e23d60ad2fe28e69c3fc1df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14569, "upload_time": "2019-01-11T12:01:44", "upload_time_iso_8601": "2019-01-11T12:01:44.561302Z", "url": "https://files.pythonhosted.org/packages/39/08/29718deef4a1321e0f7338791f60e92f13d5cfa57988a2b2714ef0f9b0de/madplot-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00543f8b96cb3ad85c12d4c9a5f0597b", "sha256": "19ab90478b9dbd1cd579588a4dad043cdcb7dbd53f6827d41694eed81a77b7d8"}, "downloads": -1, "filename": "madplot-0.2.tar.gz", "has_sig": false, "md5_digest": "00543f8b96cb3ad85c12d4c9a5f0597b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14876, "upload_time": "2019-01-11T12:01:50", "upload_time_iso_8601": "2019-01-11T12:01:50.288335Z", "url": "https://files.pythonhosted.org/packages/ad/76/ad418d5f4844a267a373d987e25aafc620256b97ae78727190da537cf1bd/madplot-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c4700bd87f167921d1f9d5d1b142ee0b", "sha256": "e147504967420ed3e38cd6b59982239022b3608dadf2f1d226c44c363a2b15e7"}, "downloads": -1, "filename": "madplot-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c4700bd87f167921d1f9d5d1b142ee0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15206, "upload_time": "2019-03-23T12:36:07", "upload_time_iso_8601": "2019-03-23T12:36:07.099196Z", "url": "https://files.pythonhosted.org/packages/15/d5/87847d3cf9c3508222f1f4ac2b383ecd9851cff4fc038c6d7959e8b1b571/madplot-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afb9c8ada74ff4515ff768b672766b22", "sha256": "69e816b32f655444310a34060484f48b2d5f9cb232d2e976ed1e5e362994f2f2"}, "downloads": -1, "filename": "madplot-0.2.1.tar.gz", "has_sig": false, "md5_digest": "afb9c8ada74ff4515ff768b672766b22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15448, "upload_time": "2019-03-23T12:36:08", "upload_time_iso_8601": "2019-03-23T12:36:08.949252Z", "url": "https://files.pythonhosted.org/packages/c1/a8/b97616cd8ce5ad0806f7e62f1221d77451f5871870b346149e9bc3c2bef4/madplot-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "8da3f1f9d1c465ed11e00b220d0c427a", "sha256": "8d7c65a172c1973276d57f8e4d4b1fa0c2bf7895e51c04f23bba6e50062db0bd"}, "downloads": -1, "filename": "madplot-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8da3f1f9d1c465ed11e00b220d0c427a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15536, "upload_time": "2019-04-29T01:16:45", "upload_time_iso_8601": "2019-04-29T01:16:45.082876Z", "url": "https://files.pythonhosted.org/packages/5d/c2/9c69f14e832bee714886884b71552f39f017c9ff0e61bcaef78ec235c9fb/madplot-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fb3b73b9b76a29490a300e868334880", "sha256": "9065790442e104b3049668e6dff0f882fadb4e0a5bda2f812ed65296b5e5a78b"}, "downloads": -1, "filename": "madplot-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6fb3b73b9b76a29490a300e868334880", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15734, "upload_time": "2019-04-29T01:16:52", "upload_time_iso_8601": "2019-04-29T01:16:52.174897Z", "url": "https://files.pythonhosted.org/packages/78/49/0c9fdc23757314fced33870179e4eff33a7fc6fef3c4586fb3ca365ff57b/madplot-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "5dce784784f2b547771765a3b0e1ac4b", "sha256": "db26c16c8f31c62639d0b799ddb86cd54e8d4adf01e391f88f7abe29e6540723"}, "downloads": -1, "filename": "madplot-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5dce784784f2b547771765a3b0e1ac4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15847, "upload_time": "2019-04-29T02:04:03", "upload_time_iso_8601": "2019-04-29T02:04:03.402559Z", "url": "https://files.pythonhosted.org/packages/a1/ee/bce3ff45db826ba3133d7aa4b436dfb95eafaeca6d832da8f2803e50f5ea/madplot-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d866460a9830f744338489519551bda", "sha256": "4ab20b500f76d82d6d5e8bf3353eac66cd5816534b894895ab56a377288c97a1"}, "downloads": -1, "filename": "madplot-0.2.3.tar.gz", "has_sig": false, "md5_digest": "1d866460a9830f744338489519551bda", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16055, "upload_time": "2019-04-29T02:04:06", "upload_time_iso_8601": "2019-04-29T02:04:06.510872Z", "url": "https://files.pythonhosted.org/packages/74/04/43d837aa0eba998e57467686307fb5670906ac793772d37523c844d0fd3a/madplot-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "cee82f1b9c6c835ca8a65b72019c38f7", "sha256": "1d5270cd74839b31de52fd0a45f31878eb620f87fc1a34f61b17ea286dc2f60f"}, "downloads": -1, "filename": "madplot-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cee82f1b9c6c835ca8a65b72019c38f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16737, "upload_time": "2019-04-30T00:40:17", "upload_time_iso_8601": "2019-04-30T00:40:17.274780Z", "url": "https://files.pythonhosted.org/packages/33/9a/fed83283a4a06dd915b18353346ae6cf53acf930a6d17504c535fe5561f9/madplot-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46581e33a31c4662d06a5328bdd5141b", "sha256": "05c84cfced55ccbf33c219f3f8dfa55315ae83789ed1592101f1a307a030f725"}, "downloads": -1, "filename": "madplot-0.2.4.tar.gz", "has_sig": false, "md5_digest": "46581e33a31c4662d06a5328bdd5141b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17315, "upload_time": "2019-04-30T00:40:22", "upload_time_iso_8601": "2019-04-30T00:40:22.290779Z", "url": "https://files.pythonhosted.org/packages/a1/8f/9d2e46d2e8895671dca4c6e2db7f3f5db926b5c7d226154d793311819b23/madplot-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "ce957938d66f51339468263ab2b8e704", "sha256": "44700cee361e108aa3ec78bed3deb90cb2829ea18e1b9231f465ebe955a45748"}, "downloads": -1, "filename": "madplot-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ce957938d66f51339468263ab2b8e704", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16922, "upload_time": "2019-04-30T10:10:43", "upload_time_iso_8601": "2019-04-30T10:10:43.674781Z", "url": "https://files.pythonhosted.org/packages/60/bd/9f16f10a24ab6b9dd65b3669bfe6f316369d4a20aa01ad8a8d8d431b6626/madplot-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76f6a186ac9a6206b4f1216d04006443", "sha256": "15c1adf6ec27e830a0745e07f7245f1802f64149c07acbd53d791426b22fecd2"}, "downloads": -1, "filename": "madplot-0.2.5.tar.gz", "has_sig": false, "md5_digest": "76f6a186ac9a6206b4f1216d04006443", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17517, "upload_time": "2019-04-30T10:10:50", "upload_time_iso_8601": "2019-04-30T10:10:50.570876Z", "url": "https://files.pythonhosted.org/packages/e5/c8/ded469b49416a74e82eb17c7d5a20f2ca8c5acf2df3c81c8dd69602c0459/madplot-0.2.5.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "6331dc67384203913872f15dbcd3c780", "sha256": "d3a3b2fc5c64198a4bb88e61227b98d872a6899553d0b342c5e26f309684142a"}, "downloads": -1, "filename": "madplot-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6331dc67384203913872f15dbcd3c780", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17895, "upload_time": "2020-01-20T11:30:53", "upload_time_iso_8601": "2020-01-20T11:30:53.272965Z", "url": "https://files.pythonhosted.org/packages/48/53/d42088e9e9ac8987c56e14b37b69d6740c1cf73b0aec9c89f4479b80b6d6/madplot-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fdb26c50e88a91b4a629bf036c61279", "sha256": "8a48415b0686022b44ac1cefe964d002de44abf0c564656bad4ee6556cd41326"}, "downloads": -1, "filename": "madplot-0.3.tar.gz", "has_sig": false, "md5_digest": "0fdb26c50e88a91b4a629bf036c61279", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18364, "upload_time": "2020-01-20T11:20:40", "upload_time_iso_8601": "2020-01-20T11:20:40.591757Z", "url": "https://files.pythonhosted.org/packages/f7/91/2808acf13743fc449eff204d7b967093d373f61de7137893c22287bddcca/madplot-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "4f5769cf3a442594ec7a0b3be3bb5192", "sha256": "d3db402c75282a678b2067509bdc544e5115e517d80c4d91b0a8d8601e78ce0c"}, "downloads": -1, "filename": "madplot-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4f5769cf3a442594ec7a0b3be3bb5192", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18014, "upload_time": "2020-01-21T10:11:10", "upload_time_iso_8601": "2020-01-21T10:11:10.758493Z", "url": "https://files.pythonhosted.org/packages/79/d3/66cc3e2fece333aa32417844e168bf61e278b25ac7ab86e2a53dcf23f901/madplot-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32f4b48f57374f8daf8362583e96e32f", "sha256": "021aa3b1b1578e62913fadda774b6c80f8fca5955623763c952be45b3bcb04ec"}, "downloads": -1, "filename": "madplot-0.3.1.tar.gz", "has_sig": false, "md5_digest": "32f4b48f57374f8daf8362583e96e32f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18456, "upload_time": "2020-01-21T10:11:12", "upload_time_iso_8601": "2020-01-21T10:11:12.958003Z", "url": "https://files.pythonhosted.org/packages/ae/71/6458fb2902a5908c2d6ff3fac755e2977f5b47334a9124e40e3d1ac349fb/madplot-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "fa3434842dea7aedb16fb34e3848cc40", "sha256": "fabc2fcc56e2529b974aa70fe7f8c79e07ff2b25b44f72378a1a11a0f2b14616"}, "downloads": -1, "filename": "madplot-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fa3434842dea7aedb16fb34e3848cc40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18013, "upload_time": "2020-01-21T10:31:55", "upload_time_iso_8601": "2020-01-21T10:31:55.101040Z", "url": "https://files.pythonhosted.org/packages/62/a3/d3c15ea7e775eeddd447f24f674c88e3c79de79037bd01cb145e24491549/madplot-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c258709d9a91b7fdfcc1f6b53594cea", "sha256": "6cfc479bbc6af0933a9345342d7e3fae51b0c7be9d8300124828a9117a5eb6dd"}, "downloads": -1, "filename": "madplot-0.3.2.tar.gz", "has_sig": false, "md5_digest": "5c258709d9a91b7fdfcc1f6b53594cea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18452, "upload_time": "2020-01-21T10:31:57", "upload_time_iso_8601": "2020-01-21T10:31:57.551391Z", "url": "https://files.pythonhosted.org/packages/3b/6d/66739bdb129e6968432fe32f5b05b8d9cb9f2b06eef53553488ab0add767/madplot-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "b314293f360250345f9a57f09d016520", "sha256": "b20a6df3665898ce6f227e6bdbf57cd8b9c286014390b99b7a41d484830599bb"}, "downloads": -1, "filename": "madplot-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b314293f360250345f9a57f09d016520", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18014, "upload_time": "2020-01-21T10:40:18", "upload_time_iso_8601": "2020-01-21T10:40:18.306790Z", "url": "https://files.pythonhosted.org/packages/d2/3c/df404e20b1bf3a893779d5e68a4d74c87433329398046bb88b094bfa543d/madplot-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c944f89bc1f6ee139a54f27b705a43da", "sha256": "243e572542f1a39acdcc540b19a791f008f1b9d544800497b859babd95e162e1"}, "downloads": -1, "filename": "madplot-0.3.3.tar.gz", "has_sig": false, "md5_digest": "c944f89bc1f6ee139a54f27b705a43da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18447, "upload_time": "2020-01-21T10:40:20", "upload_time_iso_8601": "2020-01-21T10:40:20.345682Z", "url": "https://files.pythonhosted.org/packages/09/ce/4938a18466e9c7882725cd84c90af14274ebdaff01bd6cd6605f431e57c6/madplot-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "75fd8743b468f2cfa567c5533d1f3de2", "sha256": "2b2c367835003806acd18dd3c0b7d4598749e09616428e957c30f6be8057f40a"}, "downloads": -1, "filename": "madplot-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "75fd8743b468f2cfa567c5533d1f3de2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18018, "upload_time": "2020-01-22T20:00:09", "upload_time_iso_8601": "2020-01-22T20:00:09.414527Z", "url": "https://files.pythonhosted.org/packages/61/35/7ce07b4b0657e7f93956d505a44ce79de4e6465f0f6de182d37882dd82c5/madplot-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40f965a1cc589e1d6be5be1ec12fc832", "sha256": "3aaa749599620cca9dc1d3faaa6339cf1b544b695ad6ed1fd44ca6e0ab278724"}, "downloads": -1, "filename": "madplot-0.3.4.tar.gz", "has_sig": false, "md5_digest": "40f965a1cc589e1d6be5be1ec12fc832", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18480, "upload_time": "2020-01-22T20:00:12", "upload_time_iso_8601": "2020-01-22T20:00:12.806865Z", "url": "https://files.pythonhosted.org/packages/52/2a/7413815f010e42ae50db0083e2f6a1bb56bd80ffd7e7539ad8d4ca1ae5fe/madplot-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "2e0f63744f750d475ad5387f4dfa4d47", "sha256": "53a62e05a63ca16c71d53b8b230ae796b134c6a4cc5bb50f9ca9b68ef0471a06"}, "downloads": -1, "filename": "madplot-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2e0f63744f750d475ad5387f4dfa4d47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18032, "upload_time": "2020-02-25T13:25:40", "upload_time_iso_8601": "2020-02-25T13:25:40.264122Z", "url": "https://files.pythonhosted.org/packages/80/82/05a70061de52f57cbe7bfd8497ecb7debcff6d089cccd036463829383c22/madplot-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9b8da24f412fc5013a6d3666a803b67", "sha256": "9c798eb04ed641b7c124c36922f928ad32e0b01433c1996860fce74c33b4bd64"}, "downloads": -1, "filename": "madplot-0.3.5.tar.gz", "has_sig": false, "md5_digest": "b9b8da24f412fc5013a6d3666a803b67", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18490, "upload_time": "2020-02-25T13:25:42", "upload_time_iso_8601": "2020-02-25T13:25:42.007922Z", "url": "https://files.pythonhosted.org/packages/c2/b2/6b44e235381b9fd00c18dc2d0fe238a3e6f8e0899f77d91b780cb13d2f5d/madplot-0.3.5.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "16767115a007833c0c16a0ac9df44aba", "sha256": "4652f7f33c5489793b4ae942358e6e80a3f9731a4f830ed69d1dd7a945cc212f"}, "downloads": -1, "filename": "madplot-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "16767115a007833c0c16a0ac9df44aba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18747, "upload_time": "2020-02-26T13:42:24", "upload_time_iso_8601": "2020-02-26T13:42:24.645772Z", "url": "https://files.pythonhosted.org/packages/e6/1b/0c3827c32b19388cc4a8bd47a3fcd7de0c6671a844caa2eea3de27a3ce1d/madplot-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "585c49a90418c4461cad4ab94972d3d2", "sha256": "176f80f7334412d4ff3840379cc2e5a4497792138bddf3dfd612be6badc5d63f"}, "downloads": -1, "filename": "madplot-0.4.tar.gz", "has_sig": false, "md5_digest": "585c49a90418c4461cad4ab94972d3d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19244, "upload_time": "2020-02-26T13:42:26", "upload_time_iso_8601": "2020-02-26T13:42:26.797015Z", "url": "https://files.pythonhosted.org/packages/60/68/e9ecd26129a05424c9ae46e4c25d75bafef8f489935b2b112e9d6a5f381d/madplot-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "6eb175bb5176eece998bb3ca4c63f0ca", "sha256": "3cf7a4e8defed46d8a513961609e27943e8b35033194180b7a3c86043f0422b0"}, "downloads": -1, "filename": "madplot-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6eb175bb5176eece998bb3ca4c63f0ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19352, "upload_time": "2020-02-26T14:13:36", "upload_time_iso_8601": "2020-02-26T14:13:36.346845Z", "url": "https://files.pythonhosted.org/packages/5c/76/1b25049bdda164f381cd936f7b931adf34a992e4f186f8a2517fce89d681/madplot-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc332d826888f32056c33f9b501d27b1", "sha256": "c86b14cf7de2ced54b5769cc79c21aa560061e682e21f23c67ffe74730ba4a03"}, "downloads": -1, "filename": "madplot-0.4.1.tar.gz", "has_sig": false, "md5_digest": "cc332d826888f32056c33f9b501d27b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20388, "upload_time": "2020-02-26T14:13:38", "upload_time_iso_8601": "2020-02-26T14:13:38.191649Z", "url": "https://files.pythonhosted.org/packages/4e/d9/bd319c05e20d9ad9ba920ebe635e77a5c92c6b4802616e49dcceccbae737/madplot-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6eb175bb5176eece998bb3ca4c63f0ca", "sha256": "3cf7a4e8defed46d8a513961609e27943e8b35033194180b7a3c86043f0422b0"}, "downloads": -1, "filename": "madplot-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6eb175bb5176eece998bb3ca4c63f0ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19352, "upload_time": "2020-02-26T14:13:36", "upload_time_iso_8601": "2020-02-26T14:13:36.346845Z", "url": "https://files.pythonhosted.org/packages/5c/76/1b25049bdda164f381cd936f7b931adf34a992e4f186f8a2517fce89d681/madplot-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc332d826888f32056c33f9b501d27b1", "sha256": "c86b14cf7de2ced54b5769cc79c21aa560061e682e21f23c67ffe74730ba4a03"}, "downloads": -1, "filename": "madplot-0.4.1.tar.gz", "has_sig": false, "md5_digest": "cc332d826888f32056c33f9b501d27b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20388, "upload_time": "2020-02-26T14:13:38", "upload_time_iso_8601": "2020-02-26T14:13:38.191649Z", "url": "https://files.pythonhosted.org/packages/4e/d9/bd319c05e20d9ad9ba920ebe635e77a5c92c6b4802616e49dcceccbae737/madplot-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:12 2020"}