{"info": {"author": "Kevin Jasieniecki", "author_email": "jasieni2@illinois.edu", "bugtrack_url": null, "classifiers": [], "description": "Hercule 1.0.0\n=============\n\nHercule is a Python wrapper for Riot Games League of Legends API\n\nMaking Calls\n------------\n\nIt's simple! To start, from hercule, import Request - this is the class you'll use to make API calls\n\n\tfrom hercule import Request\n\nHercule uses the requests module - if you're getting module errors, pip install it -\n\n\tpip install requests\n\nThen, initialize your class - you'll need to have your API key, which you can get at https://developer.riotgames.com/sign-in\n\n\tr = Request(api_key)\n\nFrom this object, you can call any of Hercule's methods and receive your information as a string or a Python dict \n\nHere are a few examples - \n\n### Getting a summoner ID\n\n\tplayer_id = r.get_id_from_name('Greedoid')\n\nWhat this method returns is simply the player's summoner ID - useful for other methods that take it as an argument\n\nAs a note, any methods that return player information default to the North American server - if you wish to query EU-West or EU-Northeast players, just pass the server in after the player name \n\n\tplayer_id = r.get_id_from_name('Froggen', 'euw')\n\n### Getting many summoner names from a list of IDs\n\n\tbunch_of_ids = [1, 2, 3, ... 140]\n\tlist_of_ids = r.get_names_from_ids(bunch_of_ids)\n\nThis method returns a list of names corresponding to the list of summoner IDs passed to it.\n\n**NOTE**: This API call takes in a max of 40 IDs per call. You can pass in as many IDs as you want to the method, but you may be rate-limited if you use very large lists of IDs\n\n### Getting the rune/mastery pages from a player\n\n\tmy_runes = r.get_runes_from_name('Trick2g')\n\t\nThis returns a list of rune pages from the particular player\n\n**NOTE**: Due to the way the Riot Games API is set up, most player information-based calls take the player's summoner ID as the argument. As such, the above method technically takes 2 API calls to Riot to make - one to convert the player name to a summoner ID, and then one, using the summoner ID, to get the player information. If you're making a lot of calls in a short period of time, it may be wise to use the functions that take summoner IDs as arguments, in order to cut down on API calls made.\n\n\tmy_current_masteries = r.get_current_masteries_from_name('Trick2g')\n\nThis function goes one step further and returns only the current mastery page that the player has equipped. There is a similar function for rune pages.\n\n### Getting statistics \n\n\tstats = r.get_stats_summary_from_name('The Rain Man')\n\tranked_stats = r.get_ranked_summary_from_name('Greedoid', 'na', 'SEASON3')\n\nThe stats summary function will retrieve overall statistics for a summoner during a particular season, while the ranked summary will return ranked information for that summoner for all queue types\n\n**NOTE**: The statistics functions are defaulted to season 4 statistics. Since, as of this writing, season 4 has not begun yet, calling them as-is will not yield any particularly useful information. Passing in 'SEASON3', like in the ranked stats example, will allow you to see a player's performance for a past season (in this case, mine!)\n\n### Getting champions\n\n\tchamps = r.get_champions()\n\nThe default function for champions takes no parameters and returns all of the champions with regards to the North American server (for purposes of champions being disabled). get_champions has two possible arguments: region and a free-to-play flag. For example:\n\n\teuw_free_champs = r.get_champions(True, 'euw')\n\nWill return all free champions on the EU-West server\n\nContact\n-------\n\nLet me know what you think - things to improve, things to remove, if I should uninstall LoL, etc.\n\nYou can get in touch with me at kjazz15@gmail.com!\n\n\n\n\nThis product is not endorsed, certified or otherwise approved in any way by Riot Games, Inc. or any of its affiliates.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Greedoid", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "hercule", "package_url": "https://pypi.org/project/hercule/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hercule/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/Greedoid"}, "release_url": "https://pypi.org/project/hercule/1.1.1/", "requires_dist": null, "requires_python": null, "summary": "Easy-to-use python wrapper for the Riot Games League of Legends API", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Hercule is a Python wrapper for Riot Games League of Legends API</p>\n<div id=\"making-calls\">\n<h2>Making Calls</h2>\n<p>It\u2019s simple! To start, from hercule, import Request - this is the class you\u2019ll use to make API calls</p>\n<blockquote>\nfrom hercule import Request</blockquote>\n<p>Hercule uses the requests module - if you\u2019re getting module errors, pip install it -</p>\n<blockquote>\npip install requests</blockquote>\n<p>Then, initialize your class - you\u2019ll need to have your API key, which you can get at <a href=\"https://developer.riotgames.com/sign-in\" rel=\"nofollow\">https://developer.riotgames.com/sign-in</a></p>\n<blockquote>\nr = Request(api_key)</blockquote>\n<p>From this object, you can call any of Hercule\u2019s methods and receive your information as a string or a Python dict</p>\n<p>Here are a few examples -</p>\n<p>### Getting a summoner ID</p>\n<blockquote>\nplayer_id = r.get_id_from_name(\u2018Greedoid\u2019)</blockquote>\n<p>What this method returns is simply the player\u2019s summoner ID - useful for other methods that take it as an argument</p>\n<p>As a note, any methods that return player information default to the North American server - if you wish to query EU-West or EU-Northeast players, just pass the server in after the player name</p>\n<blockquote>\nplayer_id = r.get_id_from_name(\u2018Froggen\u2019, \u2018euw\u2019)</blockquote>\n<p>### Getting many summoner names from a list of IDs</p>\n<blockquote>\nbunch_of_ids = [1, 2, 3, \u2026 140]\nlist_of_ids = r.get_names_from_ids(bunch_of_ids)</blockquote>\n<p>This method returns a list of names corresponding to the list of summoner IDs passed to it.</p>\n<p><strong>NOTE</strong>: This API call takes in a max of 40 IDs per call. You can pass in as many IDs as you want to the method, but you may be rate-limited if you use very large lists of IDs</p>\n<p>### Getting the rune/mastery pages from a player</p>\n<blockquote>\nmy_runes = r.get_runes_from_name(\u2018Trick2g\u2019)</blockquote>\n<p>This returns a list of rune pages from the particular player</p>\n<p><strong>NOTE</strong>: Due to the way the Riot Games API is set up, most player information-based calls take the player\u2019s summoner ID as the argument. As such, the above method technically takes 2 API calls to Riot to make - one to convert the player name to a summoner ID, and then one, using the summoner ID, to get the player information. If you\u2019re making a lot of calls in a short period of time, it may be wise to use the functions that take summoner IDs as arguments, in order to cut down on API calls made.</p>\n<blockquote>\nmy_current_masteries = r.get_current_masteries_from_name(\u2018Trick2g\u2019)</blockquote>\n<p>This function goes one step further and returns only the current mastery page that the player has equipped. There is a similar function for rune pages.</p>\n<p>### Getting statistics</p>\n<blockquote>\nstats = r.get_stats_summary_from_name(\u2018The Rain Man\u2019)\nranked_stats = r.get_ranked_summary_from_name(\u2018Greedoid\u2019, \u2018na\u2019, \u2018SEASON3\u2019)</blockquote>\n<p>The stats summary function will retrieve overall statistics for a summoner during a particular season, while the ranked summary will return ranked information for that summoner for all queue types</p>\n<p><strong>NOTE</strong>: The statistics functions are defaulted to season 4 statistics. Since, as of this writing, season 4 has not begun yet, calling them as-is will not yield any particularly useful information. Passing in \u2018SEASON3\u2019, like in the ranked stats example, will allow you to see a player\u2019s performance for a past season (in this case, mine!)</p>\n<p>### Getting champions</p>\n<blockquote>\nchamps = r.get_champions()</blockquote>\n<p>The default function for champions takes no parameters and returns all of the champions with regards to the North American server (for purposes of champions being disabled). get_champions has two possible arguments: region and a free-to-play flag. For example:</p>\n<blockquote>\neuw_free_champs = r.get_champions(True, \u2018euw\u2019)</blockquote>\n<p>Will return all free champions on the EU-West server</p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>Let me know what you think - things to improve, things to remove, if I should uninstall LoL, etc.</p>\n<p>You can get in touch with me at <a href=\"mailto:kjazz15%40gmail.com\">kjazz15<span>@</span>gmail<span>.</span>com</a>!</p>\n<p>This product is not endorsed, certified or otherwise approved in any way by Riot Games, Inc. or any of its affiliates.</p>\n</div>\n\n          </div>"}, "last_serial": 955074, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2f62700916ce16178e66f3b4c38ecd1c", "sha256": "c14cc5baffc74b2430333d285d9326c7d40fdf6d48f1ca4a77afc64c7aa2c0e4"}, "downloads": -1, "filename": "hercule-1.0.tar.gz", "has_sig": false, "md5_digest": "2f62700916ce16178e66f3b4c38ecd1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3063, "upload_time": "2013-12-26T17:49:10", "upload_time_iso_8601": "2013-12-26T17:49:10.004826Z", "url": "https://files.pythonhosted.org/packages/95/6c/fd0fd30d21013245fbd16e2d24369da85a17e184fa94a093db54df5aec7a/hercule-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "454a5ae8f74c4c578210f08adf6bfb37", "sha256": "33406ef7d1521eeb269d3534d4ede145aad8ce74b9f1a1dce5491cad846533c7"}, "downloads": -1, "filename": "hercule-1.1.tar.gz", "has_sig": false, "md5_digest": "454a5ae8f74c4c578210f08adf6bfb37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3090, "upload_time": "2013-12-26T17:54:01", "upload_time_iso_8601": "2013-12-26T17:54:01.919611Z", "url": "https://files.pythonhosted.org/packages/82/b6/19f65058cd8c5593090c4e4c16a2bfb7f89246d2afaa1e8cd1bc75611a1a/hercule-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "8ec64aad1c68235b2ba3c2f16e04586c", "sha256": "e6d20ef753ac2ab1162b12f54a51d5386ae065b80f2b59bcfc4b1c31277fe2bf"}, "downloads": -1, "filename": "hercule-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8ec64aad1c68235b2ba3c2f16e04586c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3093, "upload_time": "2013-12-26T18:07:43", "upload_time_iso_8601": "2013-12-26T18:07:43.354295Z", "url": "https://files.pythonhosted.org/packages/6a/aa/c6fe49eb17a1931016a5507f4a83a0418be3b3f41f513888e7ee5a474000/hercule-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ec64aad1c68235b2ba3c2f16e04586c", "sha256": "e6d20ef753ac2ab1162b12f54a51d5386ae065b80f2b59bcfc4b1c31277fe2bf"}, "downloads": -1, "filename": "hercule-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8ec64aad1c68235b2ba3c2f16e04586c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3093, "upload_time": "2013-12-26T18:07:43", "upload_time_iso_8601": "2013-12-26T18:07:43.354295Z", "url": "https://files.pythonhosted.org/packages/6a/aa/c6fe49eb17a1931016a5507f4a83a0418be3b3f41f513888e7ee5a474000/hercule-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:34 2020"}