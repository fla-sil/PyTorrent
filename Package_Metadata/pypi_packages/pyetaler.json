{"info": {"author": "Martin Chang", "author_email": "marty188586@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# PyEtaler\n\nThis is the offical Python binding for Etaler. PyEtaler generates Python binging using [cppyy](https://cppyy.readthedocs.io/en/latest/) and adds additional feature on top of the automatically generated bindings.\n\n\n**Note:** As of now, installing cppyy (thus PyEtaler) will cause [ROOT](https://root.cern.ch) to fail to load due to dependency clash.\n\n## Installation\n\n**Note:** You must have Etaler and cppyy installed globally before building the binding.\n**Note:** Since the binding is generated to load the actual Etaler installation. You'll need to re-compile the binding everytime Etaler is updated.\n\nIf you are building from source (building via directly interacting with the generator).\n\n```shell\npip install cppyy # must installed globally\npython3 genbinding.py\ncp *.so etaler/\ncp *.pcm etaler/\n# Then copy the resulting files into your package directory\n```\n\nLocally build via PIP\n\n```shell\npip3 install .\n```\n\nAlternativelly you can install it directly via PyPI.\n\n```shell\npip install pyetaler\n```\n\n## Usage\n\nAfter installation, you can use Etaler from python. The API is exactly like it is in C++.\n\n```python\n>>> from etaler import et\n>>> et.ones([2, 2])\n{{ 1, 1}, \n { 1, 1}}\n>>> sp = et.SpatialPooler([128], [32])\n>>> x = et.encoder.scalar(0.1, 0, 1, 128, 12)\n>>> sp.compute(x)\n{ 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}\n```\n\n## Caveats\n\nPyEtaler tries it's best to make the Python API similar to the C++ API (so ou can use the C++ documents as the Python document). There are some caveats. A few changes are made in an effort to make the Python API Pythonic. The changes are:\n\n#### Tensor.toHost and Tensor.item are not templates\n\nSince Python is a dynamically typed language. There's really no point have functions maintaining a template. Your code in C++\n\n```C++\nauto t = et::ones({4,4});\nauto vec = t.toHost<int>()\n```\n\nbecomes\n\n```Python\nt = et.ones([4,4])\nvec = t.toHost()\n```\n\n#### No more brace arround tensor indices\n\nIt is quite annoning having to have extra braces when indexing. So we removed them in Python!\n\n```C++\nauto t = et::ones({4,4});\nauto q = t[{2, 2}];\n```\n\nbecomes\n\n```Python\nt = et.ones([4,4])\nq = t[2, 2]\n```\n\n#### Logical operators doesn't work\n\nDue to how Python works. It is impossible to provide the logical operators in the wrapper.\n\n```C++\nauto r = t && q;\n```\n\nShould have become:\n\n```Python\nr = t and q\n```\n\nBut instead of mapping `operator &&`. Python will try casting `et.Tensor` into a `bool` then performing the and operation.\nSo instead of using `and`. Please use the `logical_and` function.\n\n```Python\nr = et.logical_and(t, q)\n```\n\n### Hacking PyEtaler\n\nIn case that you need to use C++ STL - maybe because the wrapper is doing something stupid. You can access the STL using `etaler.std`.\n\nFor example\n\n```Python\n>>> from etaler import std\n>>> std.vector[int](10)\n<cppyy.gbl.std.vector<int> object at 0x1ef112c0>\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/etaler/PyEtaler/tree/master", "keywords": "HTM,Hierarchical Temporal Memory,Numenta,AI,SDRsparse distributed representation,bioinspired", "license": "bsd-3-clause", "maintainer": "", "maintainer_email": "", "name": "pyetaler", "package_url": "https://pypi.org/project/pyetaler/", "platform": "", "project_url": "https://pypi.org/project/pyetaler/", "project_urls": {"Homepage": "https://github.com/etaler/PyEtaler/tree/master"}, "release_url": "https://pypi.org/project/pyetaler/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "A high performance implementation of Numenta's HTM algorithms", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyEtaler</h1>\n<p>This is the offical Python binding for Etaler. PyEtaler generates Python binging using <a href=\"https://cppyy.readthedocs.io/en/latest/\" rel=\"nofollow\">cppyy</a> and adds additional feature on top of the automatically generated bindings.</p>\n<p><strong>Note:</strong> As of now, installing cppyy (thus PyEtaler) will cause <a href=\"https://root.cern.ch\" rel=\"nofollow\">ROOT</a> to fail to load due to dependency clash.</p>\n<h2>Installation</h2>\n<p><strong>Note:</strong> You must have Etaler and cppyy installed globally before building the binding.\n<strong>Note:</strong> Since the binding is generated to load the actual Etaler installation. You'll need to re-compile the binding everytime Etaler is updated.</p>\n<p>If you are building from source (building via directly interacting with the generator).</p>\n<pre>pip install cppyy <span class=\"c1\"># must installed globally</span>\npython3 genbinding.py\ncp *.so etaler/\ncp *.pcm etaler/\n<span class=\"c1\"># Then copy the resulting files into your package directory</span>\n</pre>\n<p>Locally build via PIP</p>\n<pre>pip3 install .\n</pre>\n<p>Alternativelly you can install it directly via PyPI.</p>\n<pre>pip install pyetaler\n</pre>\n<h2>Usage</h2>\n<p>After installation, you can use Etaler from python. The API is exactly like it is in C++.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">etaler</span> <span class=\"kn\">import</span> <span class=\"n\">et</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">et</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"p\">{{</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> \n <span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">et</span><span class=\"o\">.</span><span class=\"n\">SpatialPooler</span><span class=\"p\">([</span><span class=\"mi\">128</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">et</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n</pre>\n<h2>Caveats</h2>\n<p>PyEtaler tries it's best to make the Python API similar to the C++ API (so ou can use the C++ documents as the Python document). There are some caveats. A few changes are made in an effort to make the Python API Pythonic. The changes are:</p>\n<h4>Tensor.toHost and Tensor.item are not templates</h4>\n<p>Since Python is a dynamically typed language. There's really no point have functions maintaining a template. Your code in C++</p>\n<pre><span class=\"k\">auto</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">et</span><span class=\"o\">::</span><span class=\"n\">ones</span><span class=\"p\">({</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">});</span>\n<span class=\"k\">auto</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">toHost</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n</pre>\n<p>becomes</p>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">et</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">toHost</span><span class=\"p\">()</span>\n</pre>\n<h4>No more brace arround tensor indices</h4>\n<p>It is quite annoning having to have extra braces when indexing. So we removed them in Python!</p>\n<pre><span class=\"k\">auto</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">et</span><span class=\"o\">::</span><span class=\"n\">ones</span><span class=\"p\">({</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">});</span>\n<span class=\"k\">auto</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">[{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">}];</span>\n</pre>\n<p>becomes</p>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">et</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<h4>Logical operators doesn't work</h4>\n<p>Due to how Python works. It is impossible to provide the logical operators in the wrapper.</p>\n<pre><span class=\"k\">auto</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n</pre>\n<p>Should have become:</p>\n<pre><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"ow\">and</span> <span class=\"n\">q</span>\n</pre>\n<p>But instead of mapping <code>operator &amp;&amp;</code>. Python will try casting <code>et.Tensor</code> into a <code>bool</code> then performing the and operation.\nSo instead of using <code>and</code>. Please use the <code>logical_and</code> function.</p>\n<pre><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">et</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n</pre>\n<h3>Hacking PyEtaler</h3>\n<p>In case that you need to use C++ STL - maybe because the wrapper is doing something stupid. You can access the STL using <code>etaler.std</code>.</p>\n<p>For example</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">etaler</span> <span class=\"kn\">import</span> <span class=\"n\">std</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">std</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">](</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">cppyy</span><span class=\"o\">.</span><span class=\"n\">gbl</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"nb\">int</span><span class=\"o\">&gt;</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x1ef112c0</span><span class=\"o\">&gt;</span>\n</pre>\n\n          </div>"}, "last_serial": 6487455, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "0b030b5037c3d7beaa09fb9813363097", "sha256": "ee3cf17da3a73699b41043ae4d192b6f9fd082020aad74666f3a747e218af695"}, "downloads": -1, "filename": "pyetaler-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0b030b5037c3d7beaa09fb9813363097", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2810, "upload_time": "2019-11-26T07:22:09", "upload_time_iso_8601": "2019-11-26T07:22:09.552399Z", "url": "https://files.pythonhosted.org/packages/78/5e/de4a5303a4e734d58944b4f2f053a6c26aafd5f455c6e9e05e2ae0faf30c/pyetaler-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c7ff479a48260c4877e2172d0aad2266", "sha256": "3346297b0019d9079b206ccc3ccc4ea79e4198fb5c76a656915467880b442cd9"}, "downloads": -1, "filename": "pyetaler-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c7ff479a48260c4877e2172d0aad2266", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3173, "upload_time": "2019-11-26T08:26:55", "upload_time_iso_8601": "2019-11-26T08:26:55.835175Z", "url": "https://files.pythonhosted.org/packages/65/7b/7f928e0da5ae78bb5fe7d10d9407ab917c6d410a5b7a5439c566fd4f1343/pyetaler-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b9227ce5c278437c25f0fb2b9c3d8ff3", "sha256": "0f4eec28c5a994c6630bea264f902e6e3b5411d976eddc957bc464ad580bb12e"}, "downloads": -1, "filename": "pyetaler-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b9227ce5c278437c25f0fb2b9c3d8ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6391, "upload_time": "2020-01-20T14:45:07", "upload_time_iso_8601": "2020-01-20T14:45:07.823039Z", "url": "https://files.pythonhosted.org/packages/2d/88/26d8f3a088775453ae4dba427ee0e9b641991244347b0bd7ee42c380428b/pyetaler-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b9227ce5c278437c25f0fb2b9c3d8ff3", "sha256": "0f4eec28c5a994c6630bea264f902e6e3b5411d976eddc957bc464ad580bb12e"}, "downloads": -1, "filename": "pyetaler-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b9227ce5c278437c25f0fb2b9c3d8ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6391, "upload_time": "2020-01-20T14:45:07", "upload_time_iso_8601": "2020-01-20T14:45:07.823039Z", "url": "https://files.pythonhosted.org/packages/2d/88/26d8f3a088775453ae4dba427ee0e9b641991244347b0bd7ee42c380428b/pyetaler-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:16 2020"}