{"info": {"author": "@cryptax", "author_email": "aafortinet@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Software Development :: Disassemblers"], "description": "# DroidLysis\n\nDroidLysis is a **property extractor for Android apps**.\nIt automatically disassembles the Android application you provide\nand looks for various properties within the package or its disassembly.\n\nDroidLysis can be used over Android packages (apk), Dalvik executables (dex), Zip files (zip), Rar files (rar) or directories of files.\n\n## Install\n\n### Requirements\n\n1. **Install required system packages**: Python3, Pip, unzip: `sudo apt-get install default-jre git python3 python3-pip unzip wget libmagic-dev`\n2. **Install Android disassembly tools**. DroidLysis does not perform the disassembly itself, but relies on other tools to do so. Therefore, you must install:\n\n- [Apktool](https://ibotpeaches.github.io/Apktool/) - note we only need the Jar.\n- [Baksmali](https://bitbucket.org/JesusFreke/smali/downloads) - note we only need the Jar.\n- [Dex2jar](https://github.com/pxb1988/dex2jar)\n- [Procyon](https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler)\n\nSome of these tools are redundant, but sometimes one fails on a sample while another does not. DroidLysis detects this and tries to switch to a tool that works for the sample.\n\nAs of March 2 2020, the following installation works:\n\n```\n$ mkdir softs\n$ cd softs\n$ wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.4.1.jar\n$ wget https://bitbucket.org/JesusFreke/smali/downloads/baksmali-2.3.4.jar\n$ wget https://github.com/pxb1988/dex2jar/files/1867564/dex-tools-2.1-SNAPSHOT.zip\n$ unzip dex-tools-2.1-SNAPSHOT.zip\n$ wget https://bitbucket.org/mstrobel/procyon/downloads/procyon-decompiler-0.5.36.jar\n```\n\nThen, you have two options:\n\n3a. **Clone the repository**: `git clone https://github.com/cryptax/droidlysis`, then install Python requirements:\n\n```\n$ git clone https://github.com/cryptax/droidlysis\n$ cd droidlysis\n$ pip3 install -r requirements\n```\n\n3b. Or install using pip3: `pip3 install droidlysis`\n\n\n### Configuration\n\nThe configuration is extremely simple, you only need to tune `droidconfig.py`:\n\n- `APKTOOL_JAR`: set the path to your apktool jar\n- `BAKSMALI_JAR`: set the path to your baksmali jar\n- `DEX2JAR_CMD`: set the path to the folder containing `d2j-dex2.jar.sh`\n- `PROCYON_JAR`: set the path to the procyon decompiler jar\n- `INSTALL_DIR`: set the path to your DroidLysis instance. Do not forget to set this or DroidLysis won't work correctly!\n\nExample:\n\n```\nAPKTOOL_JAR = os.path.join( os.path.expanduser(\"~/softs\"), \"apktool_2.4.1.jar\")\nBAKSMALI_JAR = os.path.join(os.path.expanduser(\"~/softs\"), \"baksmali-2.3.4.jar\")\nDEX2JAR_CMD = os.path.join(os.path.expanduser(\"~/softs/dex-tools-2.1-SNAPSHOT\"), \"d2j-dex2jar.s\nh\")\nPROCYON_JAR = os.path.join( os.path.expanduser(\"~/softs\"), \"procyon-decompiler-0.5.36.jar\")\nINSTALL_DIR = os.path.expanduser(\"~/droidlysis\")\n```\n\nOptionally, if you need a specific situation, you might need to tune the following too. Normally, the default options will work and you won't have to touch these:\n- `SQLALCHEMY`: specify your SQL database.\n- `KEYTOOL`: absolute path of `keytool` which generally ships with Java\n- `SMALI_CONFIGFILE`: smali patterns\n- `WIDE_CONFIGFILE`: resource patterns\n- `ARM_CONFIGFILE`: ARM executable patterns\n- `KIT_CONFIGFILE`: 3rd party SDK patterns\n\n\n## Usage\n\nDroidLysis has been ported to Python 3. To launch it and get options:\n\n```\npython3 ./droidlysis3.py --help\n```\n\nFor example, test it on [Signal's APK](https://signal.org/android/apk/):\n\n```\npython3 ./droidlysis3.py --input Signal-website-universal-release-4.52.4.apk --output /tmp\n```\n\n![](./example.png)\n\nDroidLysis outputs:\n\n- A summary on the console (see example.png)\n- The unzipped, pre-processed sample in a subdirectory of your output dir. The subdirectory is named using the sample's filename and sha256 sum. For example, if we analyze the Signal application and set `--output /tmp`, the analysis will be written to `/tmp/Signalwebsiteuniversalrelease4.52.4.apk-f3c7d5e38df23925dd0b2fe1f44bfa12bac935a6bc8fe3a485a4436d4487a290`.\n- A database (by default, SQLite `droidlysis.db`) containing properties it noticed.\n\n## Options\n\nGet usage with `python3 ./droidlysis3.py --help`\n\n- The input can be a file or a directory of files to recursively look into. DroidLysis knows how to process Android packages, DEX, ODEX and ARM executables, ZIP, RAR. DroidLysis won't fail on other type of files (unless there is a bug...) but won't be able to understand the content.\n\n- When processing directories of files, it is typically quite helpful to move processed samples to another location to know what has been processed. This is handled by option `--movein`.  Also, if you are only interested in statistics, you should probably clear the output directory which contains detailed information for each sample: this is option `--clearoutput`.\n\n- When dealing with single samples, on the contrary, statistics are typically not so interesting, and their generation can be disabled with `--disable-sql`\n\n- DEX decompilation is quite long with Procyon, so this option is disabled by default. If you want to decompile to Java, use `--enable-procyon`.\n\n- DroidLysis's analysis does not inspect known 3rd party SDK by default, i.e. for instance it won't report any suspicious activity from these. If you want them to be inspected, use option `--no-kit-exception`. This usually creates many more detected properties for the sample, as SDKs (e.g. advertisment) use lots of flagged APIs (get GPS location, get IMEI, get IMSI, HTTP POST...).\n\n## Sample output directory (`--output DIR`)\n\nThis directory contains (when applicable):\n\n- A readable `AndroidManifest.xml`\n- Readable resources in `res`\n- Libraries `lib`, assets `assets`\n- Disassembled Smali code: `smali` (and others)\n- Package meta information: `META-INF`\n- Package contents when simply unzipped in `./unzipped`\n- DEX executable `classes.dex` (and others), and converted to jar: `classes-dex2jar.jar`, and unjarred in `./unjarred`\n\nThe following files are generated by DroidLysis:\n\n- `autoanalysis.md`: lists each pattern DroidLysis detected and where.\n- `report.md`: same as what was printed on the console\n\nIf you do not need the sample output directory to be generated, use the option `--clearoutput`.\n\n## SQLite database\n\nThis field is particularly useful when you are processing a directory of samples and later want to scan through properties DroidLysis found in them.\n\nBy default, you will find the database in the directory `droidlysis.db`.\n\nThe results are stored in a table named `samples`. Each entry in the table is relative to a given sample. Each column is properties DroidLysis tracks.\n\nFor example, to retrieve all filename, SHA256 sum and smali properties of the database:\n\n```\nsqlite> select sha256, sanitized_basename, smali_properties from samples;\nf3c7d5e38df23925dd0b2fe1f44bfa12bac935a6bc8fe3a485a4436d4487a290|Signalwebsiteuniversalrelease4.52.4.apk|{\"send_sms\": true, \"receive_sms\": true, \"abort_broadcast\": true, \"call\": false, \"email\": false, \"answer_call\": false, \"end_call\": true, \"phone_number\": false, \"intent_chooser\": true, \"get_accounts\": true, \"contacts\": false, \"get_imei\": true, \"get_external_storage_stage\": false, \"get_imsi\": false, \"get_network_operator\": false, \"get_active_network_info\": false, \"get_line_number\": true, \"get_sim_country_iso\": true,\n...\n```\n\n## Property patterns\n\nWhat DroidLysis detects can be configured and extended in the files of the `./conf` directory.\n\nA pattern consist of:\n\n- a **tag** name: example `send_sms`. This is to name the property. Must be unique across the `.conf` file.\n- a **pattern**: this is a regexp to be matched. Ex: `;->sendTextMessage|;->sendMultipartTextMessage|SmsManager;->sendDataMessage`. In the `smali.conf` file, this regexp is match on Smali code. In this particular case, there are 3 different ways to send SMS messages from the code: sendTextMessage, sendMultipartTextMessage and sendDataMessage.\n- a **description** (optional): explains the importance of the property and what it means.\n\n```\n[send_sms]\npattern=;->sendTextMessage|;->sendMultipartTextMessage|SmsManager;->sendDataMessage\ndescription=Sending SMS messages\n```\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cryptax/droidlysis", "keywords": "android malware reverse", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "droidlysis", "package_url": "https://pypi.org/project/droidlysis/", "platform": "", "project_url": "https://pypi.org/project/droidlysis/", "project_urls": {"Homepage": "https://github.com/cryptax/droidlysis"}, "release_url": "https://pypi.org/project/droidlysis/3.1.0/", "requires_dist": ["configparser", "python-magic", "SQLAlchemy", "rarfile", "androguard"], "requires_python": ">=3.0.*", "summary": "DroidLysis: pre-analysis script for suspicious Android samples", "version": "3.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># DroidLysis</p>\n<p>DroidLysis is a <strong>property extractor for Android apps</strong>.\nIt automatically disassembles the Android application you provide\nand looks for various properties within the package or its disassembly.</p>\n<p>DroidLysis can be used over Android packages (apk), Dalvik executables (dex), Zip files (zip), Rar files (rar) or directories of files.</p>\n<p>## Install</p>\n<p>### Requirements</p>\n<ol>\n<li><strong>Install required system packages</strong>: Python3, Pip, unzip: <cite>sudo apt-get install default-jre git python3 python3-pip unzip wget libmagic-dev</cite></li>\n<li><strong>Install Android disassembly tools</strong>. DroidLysis does not perform the disassembly itself, but relies on other tools to do so. Therefore, you must install:</li>\n</ol>\n<ul>\n<li>[Apktool](<a href=\"https://ibotpeaches.github.io/Apktool/\" rel=\"nofollow\">https://ibotpeaches.github.io/Apktool/</a>) - note we only need the Jar.</li>\n<li>[Baksmali](<a href=\"https://bitbucket.org/JesusFreke/smali/downloads\" rel=\"nofollow\">https://bitbucket.org/JesusFreke/smali/downloads</a>) - note we only need the Jar.</li>\n<li>[Dex2jar](<a href=\"https://github.com/pxb1988/dex2jar\" rel=\"nofollow\">https://github.com/pxb1988/dex2jar</a>)</li>\n<li>[Procyon](<a href=\"https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler\" rel=\"nofollow\">https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler</a>)</li>\n</ul>\n<p>Some of these tools are redundant, but sometimes one fails on a sample while another does not. DroidLysis detects this and tries to switch to a tool that works for the sample.</p>\n<p>As of March 2 2020, the following installation works:</p>\n<p><tt>`\n$ mkdir softs\n$ cd softs\n$ wget <span class=\"pre\">https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.4.1.jar</span>\n$ wget <span class=\"pre\">https://bitbucket.org/JesusFreke/smali/downloads/baksmali-2.3.4.jar</span>\n$ wget <span class=\"pre\">https://github.com/pxb1988/dex2jar/files/1867564/dex-tools-2.1-SNAPSHOT.zip</span>\n$ unzip <span class=\"pre\">dex-tools-2.1-SNAPSHOT.zip</span>\n$ wget <span class=\"pre\">https://bitbucket.org/mstrobel/procyon/downloads/procyon-decompiler-0.5.36.jar</span>\n`</tt></p>\n<p>Then, you have two options:</p>\n<p>3a. <strong>Clone the repository</strong>: <cite>git clone https://github.com/cryptax/droidlysis</cite>, then install Python requirements:</p>\n<p><tt>`\n$ git clone <span class=\"pre\">https://github.com/cryptax/droidlysis</span>\n$ cd droidlysis\n$ pip3 install <span class=\"pre\">-r</span> requirements\n`</tt></p>\n<p>3b. Or install using pip3: <cite>pip3 install droidlysis</cite></p>\n<p>### Configuration</p>\n<p>The configuration is extremely simple, you only need to tune <cite>droidconfig.py</cite>:</p>\n<ul>\n<li><cite>APKTOOL_JAR</cite>: set the path to your apktool jar</li>\n<li><cite>BAKSMALI_JAR</cite>: set the path to your baksmali jar</li>\n<li><cite>DEX2JAR_CMD</cite>: set the path to the folder containing <cite>d2j-dex2.jar.sh</cite></li>\n<li><cite>PROCYON_JAR</cite>: set the path to the procyon decompiler jar</li>\n<li><cite>INSTALL_DIR</cite>: set the path to your DroidLysis instance. Do not forget to set this or DroidLysis won\u2019t work correctly!</li>\n</ul>\n<p>Example:</p>\n<p><tt>`\nAPKTOOL_JAR = os.path.join( <span class=\"pre\">os.path.expanduser(\"~/softs\"),</span> \"apktool_2.4.1.jar\")\nBAKSMALI_JAR = <span class=\"pre\">os.path.join(os.path.expanduser(\"~/softs\"),</span> <span class=\"pre\">\"baksmali-2.3.4.jar\")</span>\nDEX2JAR_CMD = <span class=\"pre\">os.path.join(os.path.expanduser(\"~/softs/dex-tools-2.1-SNAPSHOT\"),</span> <span class=\"pre\">\"d2j-dex2jar.s</span>\nh\")\nPROCYON_JAR = os.path.join( <span class=\"pre\">os.path.expanduser(\"~/softs\"),</span> <span class=\"pre\">\"procyon-decompiler-0.5.36.jar\")</span>\nINSTALL_DIR = <span class=\"pre\">os.path.expanduser(\"~/droidlysis\")</span>\n`</tt></p>\n<p>Optionally, if you need a specific situation, you might need to tune the following too. Normally, the default options will work and you won\u2019t have to touch these:\n- <cite>SQLALCHEMY</cite>: specify your SQL database.\n- <cite>KEYTOOL</cite>: absolute path of <cite>keytool</cite> which generally ships with Java\n- <cite>SMALI_CONFIGFILE</cite>: smali patterns\n- <cite>WIDE_CONFIGFILE</cite>: resource patterns\n- <cite>ARM_CONFIGFILE</cite>: ARM executable patterns\n- <cite>KIT_CONFIGFILE</cite>: 3rd party SDK patterns</p>\n<p>## Usage</p>\n<p>DroidLysis has been ported to Python 3. To launch it and get options:</p>\n<p><tt>`\npython3 ./droidlysis3.py <span class=\"pre\">--help</span>\n`</tt></p>\n<p>For example, test it on [Signal\u2019s APK](<a href=\"https://signal.org/android/apk/\" rel=\"nofollow\">https://signal.org/android/apk/</a>):</p>\n<p><tt>`\npython3 ./droidlysis3.py <span class=\"pre\">--input</span> <span class=\"pre\">Signal-website-universal-release-4.52.4.apk</span> <span class=\"pre\">--output</span> /tmp\n`</tt></p>\n<p>![](./example.png)</p>\n<p>DroidLysis outputs:</p>\n<ul>\n<li>A summary on the console (see example.png)</li>\n<li>The unzipped, pre-processed sample in a subdirectory of your output dir. The subdirectory is named using the sample\u2019s filename and sha256 sum. For example, if we analyze the Signal application and set <cite>\u2013output /tmp</cite>, the analysis will be written to <cite>/tmp/Signalwebsiteuniversalrelease4.52.4.apk-f3c7d5e38df23925dd0b2fe1f44bfa12bac935a6bc8fe3a485a4436d4487a290</cite>.</li>\n<li>A database (by default, SQLite <cite>droidlysis.db</cite>) containing properties it noticed.</li>\n</ul>\n<p>## Options</p>\n<p>Get usage with <cite>python3 ./droidlysis3.py \u2013help</cite></p>\n<ul>\n<li>The input can be a file or a directory of files to recursively look into. DroidLysis knows how to process Android packages, DEX, ODEX and ARM executables, ZIP, RAR. DroidLysis won\u2019t fail on other type of files (unless there is a bug\u2026) but won\u2019t be able to understand the content.</li>\n<li>When processing directories of files, it is typically quite helpful to move processed samples to another location to know what has been processed. This is handled by option <cite>\u2013movein</cite>.  Also, if you are only interested in statistics, you should probably clear the output directory which contains detailed information for each sample: this is option <cite>\u2013clearoutput</cite>.</li>\n<li>When dealing with single samples, on the contrary, statistics are typically not so interesting, and their generation can be disabled with <cite>\u2013disable-sql</cite></li>\n<li>DEX decompilation is quite long with Procyon, so this option is disabled by default. If you want to decompile to Java, use <cite>\u2013enable-procyon</cite>.</li>\n<li>DroidLysis\u2019s analysis does not inspect known 3rd party SDK by default, i.e. for instance it won\u2019t report any suspicious activity from these. If you want them to be inspected, use option <cite>\u2013no-kit-exception</cite>. This usually creates many more detected properties for the sample, as SDKs (e.g. advertisment) use lots of flagged APIs (get GPS location, get IMEI, get IMSI, HTTP POST\u2026).</li>\n</ul>\n<p>## Sample output directory (<cite>\u2013output DIR</cite>)</p>\n<p>This directory contains (when applicable):</p>\n<ul>\n<li>A readable <cite>AndroidManifest.xml</cite></li>\n<li>Readable resources in <cite>res</cite></li>\n<li>Libraries <cite>lib</cite>, assets <cite>assets</cite></li>\n<li>Disassembled Smali code: <cite>smali</cite> (and others)</li>\n<li>Package meta information: <cite>META-INF</cite></li>\n<li>Package contents when simply unzipped in <cite>./unzipped</cite></li>\n<li>DEX executable <cite>classes.dex</cite> (and others), and converted to jar: <cite>classes-dex2jar.jar</cite>, and unjarred in <cite>./unjarred</cite></li>\n</ul>\n<p>The following files are generated by DroidLysis:</p>\n<ul>\n<li><cite>autoanalysis.md</cite>: lists each pattern DroidLysis detected and where.</li>\n<li><cite>report.md</cite>: same as what was printed on the console</li>\n</ul>\n<p>If you do not need the sample output directory to be generated, use the option <cite>\u2013clearoutput</cite>.</p>\n<p>## SQLite database</p>\n<p>This field is particularly useful when you are processing a directory of samples and later want to scan through properties DroidLysis found in them.</p>\n<p>By default, you will find the database in the directory <cite>droidlysis.db</cite>.</p>\n<p>The results are stored in a table named <cite>samples</cite>. Each entry in the table is relative to a given sample. Each column is properties DroidLysis tracks.</p>\n<p>For example, to retrieve all filename, SHA256 sum and smali properties of the database:</p>\n<p><tt>`\nsqlite&gt; select sha256, sanitized_basename, smali_properties from samples;\n<span class=\"pre\">f3c7d5e38df23925dd0b2fe1f44bfa12bac935a6bc8fe3a485a4436d4487a290|Signalwebsiteuniversalrelease4.52.4.apk|{\"send_sms\":</span> true, \"receive_sms\": true, \"abort_broadcast\": true, \"call\": false, \"email\": false, \"answer_call\": false, \"end_call\": true, \"phone_number\": false, \"intent_chooser\": true, \"get_accounts\": true, \"contacts\": false, \"get_imei\": true, \"get_external_storage_stage\": false, \"get_imsi\": false, \"get_network_operator\": false, \"get_active_network_info\": false, \"get_line_number\": true, \"get_sim_country_iso\": true,\n...\n`</tt></p>\n<p>## Property patterns</p>\n<p>What DroidLysis detects can be configured and extended in the files of the <cite>./conf</cite> directory.</p>\n<p>A pattern consist of:</p>\n<ul>\n<li>a <strong>tag</strong> name: example <cite>send_sms</cite>. This is to name the property. Must be unique across the <cite>.conf</cite> file.</li>\n<li>a <strong>pattern</strong>: this is a regexp to be matched. Ex: <cite>;-&gt;sendTextMessage|;-&gt;sendMultipartTextMessage|SmsManager;-&gt;sendDataMessage</cite>. In the <cite>smali.conf</cite> file, this regexp is match on Smali code. In this particular case, there are 3 different ways to send SMS messages from the code: sendTextMessage, sendMultipartTextMessage and sendDataMessage.</li>\n<li>a <strong>description</strong> (optional): explains the importance of the property and what it means.</li>\n</ul>\n<p><tt>`\n[send_sms]\n<span class=\"pre\">pattern=;-&gt;sendTextMessage|;-&gt;sendMultipartTextMessage|SmsManager;-&gt;sendDataMessage</span>\ndescription=Sending SMS messages\n`</tt></p>\n\n          </div>"}, "last_serial": 6741657, "releases": {"3.0.18": [{"comment_text": "", "digests": {"md5": "e2728eca4d7e08f8e60258d102cadf2c", "sha256": "9669370a6f294bc5890ee4c03d9b249d79f7de8e0480465a005a029ee71a2583"}, "downloads": -1, "filename": "droidlysis-3.0.18-py3-none-any.whl", "has_sig": false, "md5_digest": "e2728eca4d7e08f8e60258d102cadf2c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0.*", "size": 42492, "upload_time": "2020-03-02T08:47:26", "upload_time_iso_8601": "2020-03-02T08:47:26.922083Z", "url": "https://files.pythonhosted.org/packages/33/d9/144b76190c030485d152695d7822f981085e5a97aa11c0375e260f98b76f/droidlysis-3.0.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76f375401ad82f99dfe30ae7df209f59", "sha256": "f76be01397d563494a1d6dddbada82872c46d01c3d8403e49158eb8a895fe217"}, "downloads": -1, "filename": "droidlysis-3.0.18.tar.gz", "has_sig": false, "md5_digest": "76f375401ad82f99dfe30ae7df209f59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 40485, "upload_time": "2020-03-02T08:47:29", "upload_time_iso_8601": "2020-03-02T08:47:29.618497Z", "url": "https://files.pythonhosted.org/packages/f2/f3/762a2c8e092112a715f8c7e134f8e001c6aa8d8023acb1d3021528bb775f/droidlysis-3.0.18.tar.gz", "yanked": false}], "3.0.19": [{"comment_text": "", "digests": {"md5": "5e8b9aceb373d4cd78282e05b3017762", "sha256": "1f85ad1e5dec6f5a49aeec6bc0471e92d4dbc96d1935b27aedb206359f205256"}, "downloads": -1, "filename": "droidlysis-3.0.19-py3-none-any.whl", "has_sig": false, "md5_digest": "5e8b9aceb373d4cd78282e05b3017762", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0.*", "size": 42389, "upload_time": "2020-03-02T09:26:05", "upload_time_iso_8601": "2020-03-02T09:26:05.765395Z", "url": "https://files.pythonhosted.org/packages/8e/9d/4f39af181c8663befbc34bc99e1c7c0edee68f209487af98ded5e563f675/droidlysis-3.0.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15e9acd188076d9cc5eb053dfb3a00b9", "sha256": "143e2d12e77f2240033ed599fd1f6ce1080d8d5baa5efba6d433667aea89c688"}, "downloads": -1, "filename": "droidlysis-3.0.19.tar.gz", "has_sig": false, "md5_digest": "15e9acd188076d9cc5eb053dfb3a00b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 40283, "upload_time": "2020-03-02T09:26:09", "upload_time_iso_8601": "2020-03-02T09:26:09.063495Z", "url": "https://files.pythonhosted.org/packages/e1/3d/e2d10cf56a851f501eec0b1099bbaac3733abc5bc2a9bf3dec45d1509dc3/droidlysis-3.0.19.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "2ab18c379c46270f8e19945702c8aaf5", "sha256": "5fc39c76f31abf4b5bcf8c26dac43e431ab3441a1ae398fa666ea95b677f69cb"}, "downloads": -1, "filename": "droidlysis-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ab18c379c46270f8e19945702c8aaf5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0.*", "size": 42828, "upload_time": "2020-03-03T15:47:55", "upload_time_iso_8601": "2020-03-03T15:47:55.883171Z", "url": "https://files.pythonhosted.org/packages/15/a4/a166c630f19a759309822f8e5b33fbd2001a52fec77caa24c942b622b4a3/droidlysis-3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3b0214559f2c82be4ff2c36431bd092", "sha256": "6d64ed222c9b989050fd4c412324ff6055e0a18faa98b7b61bc224bc3bae2f54"}, "downloads": -1, "filename": "droidlysis-3.1.0.tar.gz", "has_sig": false, "md5_digest": "d3b0214559f2c82be4ff2c36431bd092", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 40750, "upload_time": "2020-03-03T15:48:00", "upload_time_iso_8601": "2020-03-03T15:48:00.018335Z", "url": "https://files.pythonhosted.org/packages/f0/32/fb37651df393b4df6645f4c6d4c1a7345bacb30f8cfbd342fc115a517bd6/droidlysis-3.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ab18c379c46270f8e19945702c8aaf5", "sha256": "5fc39c76f31abf4b5bcf8c26dac43e431ab3441a1ae398fa666ea95b677f69cb"}, "downloads": -1, "filename": "droidlysis-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ab18c379c46270f8e19945702c8aaf5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0.*", "size": 42828, "upload_time": "2020-03-03T15:47:55", "upload_time_iso_8601": "2020-03-03T15:47:55.883171Z", "url": "https://files.pythonhosted.org/packages/15/a4/a166c630f19a759309822f8e5b33fbd2001a52fec77caa24c942b622b4a3/droidlysis-3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3b0214559f2c82be4ff2c36431bd092", "sha256": "6d64ed222c9b989050fd4c412324ff6055e0a18faa98b7b61bc224bc3bae2f54"}, "downloads": -1, "filename": "droidlysis-3.1.0.tar.gz", "has_sig": false, "md5_digest": "d3b0214559f2c82be4ff2c36431bd092", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 40750, "upload_time": "2020-03-03T15:48:00", "upload_time_iso_8601": "2020-03-03T15:48:00.018335Z", "url": "https://files.pythonhosted.org/packages/f0/32/fb37651df393b4df6645f4c6d4c1a7345bacb30f8cfbd342fc115a517bd6/droidlysis-3.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:34 2020"}