{"info": {"author": "Michael.C Ryan", "author_email": "spacetime.engineer@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics"], "description": "![alt text](https://github.com/spacetimeengineer/spacetimeengine/blob/master/resources/spacetimeengine_logo.png)\nBeta\n\nA Python utility built on Sympy (A symbolic mathematics library) which will analyze any given metric solution to the Einstein field equations. \n\n![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20G_%7B%5Cmu%5Cnu%7D%20&plus;%20%5CLambda%20g_%7B%5Cmu%5Cnu%7D%20%3D%20%5Cfrac%7B8%5Cpi%20G%7D%7Bc%5E4%7DT_%7B%5Cmu%5Cnu%7D)\n\nPrerequisites\n=============\n1.) Install Python3\n\n    $ sudo apt install python3\n\n2.) Install pip3\n\n    $ sudo apt install python3-pip\n\nInstallation with pip (In development)\n=====================\n\n    $ pip3 install sympy spacetimeengine    \n\nInstallation with git\n=====================\n\n3.) Clone repository\n\n    $ git clone https://github.com/spacetimeengineer/spacetimeengine\n\n4.) Enter directory\n\n    $ cd spacetimeengine\n\nSuggested Use\n=============\nIf you are a student or researcher and find yourself reading a publication based in General Relativity which provides metric values then this utility can be used for working out the curvature coefficients that associate with the metric. This can be helpful as you read through the publication since you will be able to cross reference the information provided by the toolkit and the publication for richer analysis (This is why I developed it originally).\n\nRunning example.py\n==================\nExample.py is a good choice for someone new to the project becasue it demonstrates the functionality suite. Depending on the metric you use for input, the compute time may vary exponentially. There are other metric solutions available for study in the Solutions module. To change the metric just swap it out for another one or build your own. There are many metric examples to help you understand how to build input parameters.\n\n    $ python example.py\n\n[Metric Tensor](https://en.wikipedia.org/wiki/Metric_tensor)\n===============\n\nGenerally speaking, any metric solution to the Einstein field equations will be packaged into a geometric object known as the metric tensor. The metric tensor is often represented in matrix form and SpacetimeEngine adopts this representation.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%5Cbegin%7Bpmatrix%7D%20%5Cleft%20%28%201-%20%5Cfrac%7B2GM%7D%7Brc%5E2%7D%20%5Cright%20%29%20%26%200%20%26%200%26%200%5C%5C%200%26%20-%5Cleft%20%28%201-%20%5Cfrac%7B2GM%7D%7Brc%5E2%7D%20%5Cright%20%29%5E%7B-1%7D%26%200%26%200%5C%5C%200%26%200%26%20-r%5E%7B2%7D%20%26%200%5C%5C%200%26%200%26%200%26%20-r%5E%7B2%7D%5Csin%5E%7B2%7D%5Ctheta%20%5Cend%7Bpmatrix%7D)\n\nSpacetimeEngine employs the Sympy 'Matrix' object for packaging the metric tensor and it serves as the essential parameter for constructing a 'SpaceTime' object. The Solutions module currently stores some well known metrics for study but these can be used for understanding how to construct a new solution for study.\n\nConstructing a solution (In development)\n=======================\nCurrently, metric solutions are packaged by specifying four key parameters and storing them in an array. These paramaters include the index configuration for the given metric solution, the coordinates to define the metric in terms of, the metric and the cosmological constant. Below represents a valid definition of the Schwarzschild stationary black hole solution.\n\n    def schwarzschild(self):    \n\n        # Assigns meaning to the coordinates.\n        x0, x1, x2, x3 = symbols('t r theta phi')\n        # Groups the coordinates in an array.\n        coordinate_set = [x0, x1, x2, x3]\n\n\n        # Constants required to describe the metric.\n        G, M, c = symbols('G M c')\n\n\n        # Metric.\n        metric = Matrix([    \n                            [ (1-(2*G*M)/(x1*c**2)), 0, 0, 0 ], \n                            [ 0, - (1-(2*G*M)/(x1*c**2))**(-1), 0, 0 ], \n                            [ 0, 0, - x1**2, 0 ], \n                            [ 0, 0, 0, - x1**2*sin(x2)**2 ]\n                        ])\n\n        # Describes the index configuration which which the metric represents.\n        index_config = \"dd\"\n\n\n        # Cosmological constant.\n        cosmological_constant = 0\n\n\n        # An array detailing the solution.\n        solution_array = [ metric, coordinate_set, index_config, cosmological_constant ]\n\n\n        # Returns solution\n        return solution_array\n\nTo construct a 'SpaceTime' object just execute the below command and consider the solution given since high complexity solutions can take exponentially longer to process.\n\n    >>> spacetime = SpaceTime(Solution().schwarzschild())\n\nThe index configuration in this case is \"dd\" which represents down-down which represents a double covariant index configuration. These can be \"uu\", \"dd\", \"ud\", \"du\" but this library currently only supports  \n\n[Stress-Energy-Momentum Tensor](https://en.wikipedia.org/wiki/Stress%E2%80%93energy_tensor)\n=============================\nThe Einstein field equations describe the equivilence of space-time curvature and mass-energy. The mass-energy is represented by the coefficents encompassed within the stress-energy-momentum tensor denoted by T_{\\mu\\nu}. The cosmological constant denoted by Lambda is treated as an input parameter and represents the dark energy thought to be responsble for the accellerated expansion of the cosmos.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20T_%7B%5Cmu%20%5Cnu%20%7D%3D%7B%5Cfrac%20%7Bc%5E%7B4%7D%7D%7B8%5Cpi%20G%7D%7D%5Cleft%20%28%20G_%7B%5Cmu%20%5Cnu%20%7D&plus;%5CLambda%20g_%7B%5Cmu%20%5Cnu%20%7D%20%5Cright%20%29)\n\n\n    >>> cosmological_constant = 0\n    >>> mu = 0 # (dt)\n    >>> nu = 1 # (dr)\n    >>> index_config = \"dd\"\n    >>> spacetime.print_stress_energy_coefficient(index_config, mu, nu, cosmological_constant)\n\n    0\n\nSince the Schwarzschild solution is a vacuum solution, any stress energy coefficient will yield a zero.\n\n[The Einstein Tensor](https://en.wikipedia.org/wiki/Einstein_tensor)\n=====================\nThe Einstein tensor denoted by $G_{\\my\\nu}$ desribes the curvature of spacetime and allows the Einstein field equations to be written in concise form.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20G_%7B%5Cmu%20%5Cnu%20%7D%3DR_%7B%5Cmu%20%5Cnu%20%7D-%7B%5Ctfrac%20%7B1%7D%7B2%7D%7DRg_%7B%5Cmu%20%5Cnu%20%7D)\n\n    >>> mu = 0 # (dt)\n    >>> nu = 1 # (dr)\n    >>> index_config = \"dd\"\n    >>> spacetime.print_einstein_coefficient(index_config, mu, nu)\n\n    G\u2080\u2081 = 0\n\n\n[Ricci Tensor](https://en.wikipedia.org/wiki/Ricci_curvature)\n===============\nIn differential geometry, the Ricci curvature tensor represents the amount by which the volume of a narrow conical piece of a small geodesic ball in a curved Riemannian manifold deviates from that of the standard ball in Euclidean space. As such, it provides one way of measuring the degree to which the geometry determined by a given Riemannian metric might differ from that of ordinary Euclidean n-space.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20R_%7Bij%7D%20%3D%20%7BR%5Ek%7D_%7Bikj%7D)\n\n    >>> mu = 0 # (dt)\n    >>> nu = 1 # (dr)\n    >>> index_config = \"dd\"\n    >>> spacetime.print_ricci_coefficient(index_config, 3, 2)\n\n    R\u2083\u2082 = 0\n\n\n[Riemann Tensor](https://en.wikipedia.org/wiki/Riemann_curvature_tensor)\n================\nIn the mathematical field of differential geometry, the Riemann curvature tensor is the most common method used to express the curvature of Riemannian manifolds. It assigns a tensor to each point of a Riemannian manifold (i.e., it is a tensor field), that measures the extent to which the metric tensor is not locally isometric to that of Euclidean space.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20R%5E%5Crho%7B%7D_%7B%5Csigma%5Cmu%5Cnu%7D%20%3D%20%5Cpartial_%5Cmu%5CGamma%5E%5Crho%7B%7D_%7B%5Cnu%5Csigma%7D%20-%20%5Cpartial_%5Cnu%5CGamma%5E%5Crho%7B%7D_%7B%5Cmu%5Csigma%7D%20&plus;%20%5CGamma%5E%5Crho%7B%7D_%7B%5Cmu%5Clambda%7D%5CGamma%5E%5Clambda%7B%7D_%7B%5Cnu%5Csigma%7D%20-%20%5CGamma%5E%5Crho%7B%7D_%7B%5Cnu%5Clambda%7D%5CGamma%5E%5Clambda%7B%7D_%7B%5Cmu%5Csigma%7D)\n\n\n    >>> index_config = \"uddd\"\n    >>> spacetime.print_reimann_coefficient(index_config, 3, 2, 2, 3)\n\n            -2\u22c5G\u22c5M \n    R\u00b3\u2082\u2082\u2083 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\n              2    \n             c \u22c5x\u2081 \n\n![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20%7B%5Cdisplaystyle%20R_%7Bik%5Cell%20m%7D%3D%7B%5Cfrac%20%7B1%7D%7B2%7D%7D%5Cleft%28%7B%5Cfrac%20%7B%5Cpartial%20%5E%7B2%7Dg_%7Bim%7D%7D%7B%5Cpartial%20x%5E%7Bk%7D%5Cpartial%20x%5E%7B%5Cell%20%7D%7D%7D&plus;%7B%5Cfrac%20%7B%5Cpartial%20%5E%7B2%7Dg_%7Bk%5Cell%20%7D%7D%7B%5Cpartial%20x%5E%7Bi%7D%5Cpartial%20x%5E%7Bm%7D%7D%7D-%7B%5Cfrac%20%7B%5Cpartial%20%5E%7B2%7Dg_%7Bi%5Cell%20%7D%7D%7B%5Cpartial%20x%5E%7Bk%7D%5Cpartial%20x%5E%7Bm%7D%7D%7D-%7B%5Cfrac%20%7B%5Cpartial%20%5E%7B2%7Dg_%7Bkm%7D%7D%7B%5Cpartial%20x%5E%7Bi%7D%5Cpartial%20x%5E%7B%5Cell%20%7D%7D%7D%5Cright%29&plus;g_%7Bnp%7D%5Cleft%28%5CGamma%20%5E%7Bn%7D%7B%7D_%7Bk%5Cell%20%7D%5CGamma%20%5E%7Bp%7D%7B%7D_%7Bim%7D-%5CGamma%20%5E%7Bn%7D%7B%7D_%7Bkm%7D%5CGamma%20%5E%7Bp%7D%7B%7D_%7Bi%5Cell%20%7D%5Cright%29%7D)\n\n    >>> spacetime.print_riemann_coefficient(\"dddd\", 2, 0, 2, 0)\n\n                \u239b         2  \u239e\n            G\u22c5M\u22c5\u239d2\u22c5G\u22c5M - c \u22c5r\u23a0\n    R\u2082\u2080\u2082\u2080 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                   4  2       \n                  c \u22c5r        \n\n\n[Christoffel symbols of the First Kind](https://en.wikipedia.org/wiki/Christoffel_symbols)\n=======================================\n\nThe connection coefficients or 'Christoffel symbol' are an array of numbers which represent the metric connection. The metric connection can be used to measure distances along curved manifolds. In General Relativity, the metric connection actually identifies the meaning of the gravitational field and can be used to track trajectories through spacetime.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20%5CGamma%20_%7Bcab%7D%3D%7B%5Ctfrac%20%7B1%7D%7B2%7D%7D%5Cleft%28%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bca%7D%7D%7B%5Cpartial%20x%5E%7Bb%7D%7D%7D&plus;%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bcb%7D%7D%7B%5Cpartial%20x%5E%7Ba%7D%7D%7D-%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bab%7D%7D%7B%5Cpartial%20x%5E%7Bc%7D%7D%7D%5Cright%29)\n\n    >>> spacetime.print_connection_coefficient(\"ddd\", 1, 0, 0)\n\n           -G\u22c5M \n    \u0393\u2081\u2080\u2080 = \u2500\u2500\u2500\u2500\u2500\n            2  2\n           c \u22c5r \n\n[Christoffel symbols of the Second Kind](https://en.wikipedia.org/wiki/Christoffel_symbols)\n=======================================\n\n![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20%5CGamma%20%5E%7Bi%7D%7B%7D_%7Bkl%7D%3D%7B%5Ctfrac%20%7B1%7D%7B2%7D%7Dg%5E%7Bim%7D%5Cleft%28%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bmk%7D%7D%7B%5Cpartial%20x%5E%7Bl%7D%7D%7D&plus;%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bml%7D%7D%7B%5Cpartial%20x%5E%7Bk%7D%7D%7D-%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bkl%7D%7D%7B%5Cpartial%20x%5E%7Bm%7D%7D%7D%5Cright%29)\n\n    >>> index_config = \"udd\"\n    >>> spacetime.print_connection_coefficient(index_config, 1, 3, 3)\n\n           \u239b         2   \u239e    2    \n           \u239d2\u22c5G\u22c5M - c \u22c5x\u2081\u23a0\u22c5sin (x\u2082)\n    \u0393\u00b9\u2083\u2083 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                       2           \n                      c            \n\n[Weyl Tensor](https://en.wikipedia.org/wiki/Weyl_tensor)\n=============\n\nIn differential geometry, the Weyl curvature tensor, named after Hermann Weyl, is a measure of the curvature of spacetime or, more generally, a pseudo-Riemannian manifold. Like the Riemann curvature tensor, the Weyl tensor expresses the tidal force that a body feels when moving along a geodesic. The Weyl tensor differs from the Riemann curvature tensor in that it does not convey information on how the volume of the body changes, but rather only how the shape of the body is distorted by the tidal force.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%7B%5Cdisplaystyle%20C_%7Bik%5Cell%20m%7D%3DR_%7Bik%5Cell%20m%7D&plus;%7B%5Cfrac%20%7B1%7D%7Bn-2%7D%7D%5Cleft%28R_%7Bim%7Dg_%7Bk%5Cell%20%7D-R_%7Bi%5Cell%20%7Dg_%7Bkm%7D&plus;R_%7Bk%5Cell%20%7Dg_%7Bim%7D-R_%7Bkm%7Dg_%7Bi%5Cell%20%7D%5Cright%29&plus;%7B%5Cfrac%20%7B1%7D%7B%28n-1%29%28n-2%29%7D%7DR%5Cleft%28g_%7Bi%5Cell%20%7Dg_%7Bkm%7D-g_%7Bim%7Dg_%7Bk%5Cell%20%7D%5Cright%29%2C%7D)\n\n    >>> index_config = \"dddd\"\n    >>> spacetime.print_weyl_coefficient(index_config, 3, 2, 2, 3)\n\n                       2   \n            2\u22c5G\u22c5M\u22c5r\u22c5sin (\u03b8)\n    C\u2083\u2082\u2082\u2083 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                    2      \n                   c      \n\n[Schouten Tensor](https://en.wikipedia.org/wiki/Schouten_tensor) (Experimental)\n=================\n\n![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20P_%7Bij%7D%20%3D%20%5Cfrac%7B1%7D%7Bn-2%7D%5Cleft%20%28%20R_%7Bij%7D%20-%20%5Cfrac%7BR%7D%7B2d-2%7D%5C%3A%20g_%7Bij%7D%20%5Cright%20%29)\n\n    >>> spacetime.get_schouten_coefficient(\"dd\",0,0)\n\n                                    2\n              \u239b         2  \u239e \u239bd    \u239e \n          G\u22c5M\u22c5\u239d2\u22c5G\u22c5M - c \u22c5r\u23a0\u22c5\u239c\u2500\u2500(t)\u239f \n                             \u239ddt   \u23a0 \n    P\u2080\u2080 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                      4  3           \n                     c \u22c5r         \n\n\n[Geodesics parametrized by proper time](https://en.wikipedia.org/wiki/Geodesics_in_general_relativity#Mathematical_expression) (Experimental)\n=======================================\nThis is a measure of the local acceleration; that which could be measured by an accelerometer.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%5Cfrac%7Bd%5E%7B2%7Dx%5E%7B%5Clambda%7D%7D%7Bd%5Ctau%5E%7B2%7D%7D&plus;%5CGamma%5E%7B%5Clambda%7D_%7B%5Cmu%5Cnu%7D%5Cfrac%7Bdx%5E%7B%5Cmu%7D%7D%7Bd%5Ctau%7D%5Cfrac%7Bdx%5E%7B%5Cnu%7D%7D%7Bd%5Ctau%7D%3D0)\n\n    >>> spacetime.print_proper_acceleration(0)\n\n[Geodesics parametrized by coordinate time](https://en.wikipedia.org/wiki/Geodesics_in_general_relativity#Equivalent_mathematical_expression_using_coordinate_time_as_parameter) (Experimental)\n===========================================\nThis is a measure of the accelleration one observers another undergoing.\n\n![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%5Cfrac%7Bd%5E%7B2%7Dx%5E%7B%5Clambda%7D%7D%7Bdt%5E%7B2%7D%7D%3D%5CGamma%5E%7B0%7D_%7B%5Cmu%5Cnu%7D%5Cfrac%7Bdx%5E%7B%5Cmu%7D%7D%7Bdt%7D%5Cfrac%7Bdx%5E%7B%5Cnu%7D%7D%7Bdt%7D%5Cfrac%7Bdx%5E%7B%5Clambda%7D%7D%7Bdt%7D%5C%3B-%5C%3B%5CGamma%5E%7B%5Clambda%7D_%7B%5Cmu%5Cnu%7D%5Cfrac%7Bdx%5E%7B%5Cmu%7D%7D%7Bdt%7D%5Cfrac%7Bdx%5E%7B%5Cnu%7D%7D%7Bdt%7D)\n\n    >>> spacetime.print_coordinate_acceleration(0)\n\n[Geodesic deviation equation](https://en.wikipedia.org/wiki/Geodesic_deviation#Mathematical_definition) (Experimental)\n=============================\nThis is a measure of how much two initial paralell geodesic paths will deviate or converge. \n\n![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%5Cfrac%7Bd%5E%7B2%7D%5Cxi%5E%7B%5Clambda%7D%7D%7Bdt%5E%7B2%7D%7D%3D-%5C%3BR%5E%7B%5Clambda%7D_%7B%5Cmu%5Cnu%5Cell%7D%5Cfrac%7Bdx%5E%7B%5Cmu%7D%7D%7Bdt%7D%5Cfrac%7Bdx%5E%7B%5Cnu%7D%7D%7Bdt%7D%5Cxi%5E%7B%5Cell%7D)\n\n    >>> spacetime.print_separation_geodesic_acceleration(0)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spacetimeengineer/spacetimeengine", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "spacetimeengine", "package_url": "https://pypi.org/project/spacetimeengine/", "platform": "", "project_url": "https://pypi.org/project/spacetimeengine/", "project_urls": {"Homepage": "https://github.com/spacetimeengineer/spacetimeengine"}, "release_url": "https://pypi.org/project/spacetimeengine/0.1.11/", "requires_dist": ["sympy"], "requires_python": "", "summary": "A python physics utility which can analyze any given metric solution to the Einstein field equations.", "version": "0.1.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            ![alt text](https://github.com/spacetimeengineer/spacetimeengine/blob/master/resources/spacetimeengine_logo.png)<br>Beta<br><br>A Python utility built on Sympy (A symbolic mathematics library) which will analyze any given metric solution to the Einstein field equations. <br><br>![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20G_%7B%5Cmu%5Cnu%7D%20&amp;plus;%20%5CLambda%20g_%7B%5Cmu%5Cnu%7D%20%3D%20%5Cfrac%7B8%5Cpi%20G%7D%7Bc%5E4%7DT_%7B%5Cmu%5Cnu%7D)<br><br>Prerequisites<br>=============<br>1.) Install Python3<br><br>    $ sudo apt install python3<br><br>2.) Install pip3<br><br>    $ sudo apt install python3-pip<br><br>Installation with pip (In development)<br>=====================<br><br>    $ pip3 install sympy spacetimeengine    <br><br>Installation with git<br>=====================<br><br>3.) Clone repository<br><br>    $ git clone https://github.com/spacetimeengineer/spacetimeengine<br><br>4.) Enter directory<br><br>    $ cd spacetimeengine<br><br>Suggested Use<br>=============<br>If you are a student or researcher and find yourself reading a publication based in General Relativity which provides metric values then this utility can be used for working out the curvature coefficients that associate with the metric. This can be helpful as you read through the publication since you will be able to cross reference the information provided by the toolkit and the publication for richer analysis (This is why I developed it originally).<br><br>Running example.py<br>==================<br>Example.py is a good choice for someone new to the project becasue it demonstrates the functionality suite. Depending on the metric you use for input, the compute time may vary exponentially. There are other metric solutions available for study in the Solutions module. To change the metric just swap it out for another one or build your own. There are many metric examples to help you understand how to build input parameters.<br><br>    $ python example.py<br><br>[Metric Tensor](https://en.wikipedia.org/wiki/Metric_tensor)<br>===============<br><br>Generally speaking, any metric solution to the Einstein field equations will be packaged into a geometric object known as the metric tensor. The metric tensor is often represented in matrix form and SpacetimeEngine adopts this representation.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%5Cbegin%7Bpmatrix%7D%20%5Cleft%20%28%201-%20%5Cfrac%7B2GM%7D%7Brc%5E2%7D%20%5Cright%20%29%20%26%200%20%26%200%26%200%5C%5C%200%26%20-%5Cleft%20%28%201-%20%5Cfrac%7B2GM%7D%7Brc%5E2%7D%20%5Cright%20%29%5E%7B-1%7D%26%200%26%200%5C%5C%200%26%200%26%20-r%5E%7B2%7D%20%26%200%5C%5C%200%26%200%26%200%26%20-r%5E%7B2%7D%5Csin%5E%7B2%7D%5Ctheta%20%5Cend%7Bpmatrix%7D)<br><br>SpacetimeEngine employs the Sympy 'Matrix' object for packaging the metric tensor and it serves as the essential parameter for constructing a 'SpaceTime' object. The Solutions module currently stores some well known metrics for study but these can be used for understanding how to construct a new solution for study.<br><br>Constructing a solution (In development)<br>=======================<br>Currently, metric solutions are packaged by specifying four key parameters and storing them in an array. These paramaters include the index configuration for the given metric solution, the coordinates to define the metric in terms of, the metric and the cosmological constant. Below represents a valid definition of the Schwarzschild stationary black hole solution.<br><br>    def schwarzschild(self):    <br><br>        # Assigns meaning to the coordinates.<br>        x0, x1, x2, x3 = symbols('t r theta phi')<br>        # Groups the coordinates in an array.<br>        coordinate_set = [x0, x1, x2, x3]<br><br><br>        # Constants required to describe the metric.<br>        G, M, c = symbols('G M c')<br><br><br>        # Metric.<br>        metric = Matrix([    <br>                            [ (1-(2*G*M)/(x1*c**2)), 0, 0, 0 ], <br>                            [ 0, - (1-(2*G*M)/(x1*c**2))**(-1), 0, 0 ], <br>                            [ 0, 0, - x1**2, 0 ], <br>                            [ 0, 0, 0, - x1**2*sin(x2)**2 ]<br>                        ])<br><br>        # Describes the index configuration which which the metric represents.<br>        index_config = \"dd\"<br><br><br>        # Cosmological constant.<br>        cosmological_constant = 0<br><br><br>        # An array detailing the solution.<br>        solution_array = [ metric, coordinate_set, index_config, cosmological_constant ]<br><br><br>        # Returns solution<br>        return solution_array<br><br>To construct a 'SpaceTime' object just execute the below command and consider the solution given since high complexity solutions can take exponentially longer to process.<br><br>    &gt;&gt;&gt; spacetime = SpaceTime(Solution().schwarzschild())<br><br>The index configuration in this case is \"dd\" which represents down-down which represents a double covariant index configuration. These can be \"uu\", \"dd\", \"ud\", \"du\" but this library currently only supports  <br><br>[Stress-Energy-Momentum Tensor](https://en.wikipedia.org/wiki/Stress%E2%80%93energy_tensor)<br>=============================<br>The Einstein field equations describe the equivilence of space-time curvature and mass-energy. The mass-energy is represented by the coefficents encompassed within the stress-energy-momentum tensor denoted by T_{\\mu\\nu}. The cosmological constant denoted by Lambda is treated as an input parameter and represents the dark energy thought to be responsble for the accellerated expansion of the cosmos.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20T_%7B%5Cmu%20%5Cnu%20%7D%3D%7B%5Cfrac%20%7Bc%5E%7B4%7D%7D%7B8%5Cpi%20G%7D%7D%5Cleft%20%28%20G_%7B%5Cmu%20%5Cnu%20%7D&amp;plus;%5CLambda%20g_%7B%5Cmu%20%5Cnu%20%7D%20%5Cright%20%29)<br><br><br>    &gt;&gt;&gt; cosmological_constant = 0<br>    &gt;&gt;&gt; mu = 0 # (dt)<br>    &gt;&gt;&gt; nu = 1 # (dr)<br>    &gt;&gt;&gt; index_config = \"dd\"<br>    &gt;&gt;&gt; spacetime.print_stress_energy_coefficient(index_config, mu, nu, cosmological_constant)<br><br>    0<br><br>Since the Schwarzschild solution is a vacuum solution, any stress energy coefficient will yield a zero.<br><br>[The Einstein Tensor](https://en.wikipedia.org/wiki/Einstein_tensor)<br>=====================<br>The Einstein tensor denoted by $G_{\\my\\nu}$ desribes the curvature of spacetime and allows the Einstein field equations to be written in concise form.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20G_%7B%5Cmu%20%5Cnu%20%7D%3DR_%7B%5Cmu%20%5Cnu%20%7D-%7B%5Ctfrac%20%7B1%7D%7B2%7D%7DRg_%7B%5Cmu%20%5Cnu%20%7D)<br><br>    &gt;&gt;&gt; mu = 0 # (dt)<br>    &gt;&gt;&gt; nu = 1 # (dr)<br>    &gt;&gt;&gt; index_config = \"dd\"<br>    &gt;&gt;&gt; spacetime.print_einstein_coefficient(index_config, mu, nu)<br><br>    G\u2080\u2081 = 0<br><br><br>[Ricci Tensor](https://en.wikipedia.org/wiki/Ricci_curvature)<br>===============<br>In differential geometry, the Ricci curvature tensor represents the amount by which the volume of a narrow conical piece of a small geodesic ball in a curved Riemannian manifold deviates from that of the standard ball in Euclidean space. As such, it provides one way of measuring the degree to which the geometry determined by a given Riemannian metric might differ from that of ordinary Euclidean n-space.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20R_%7Bij%7D%20%3D%20%7BR%5Ek%7D_%7Bikj%7D)<br><br>    &gt;&gt;&gt; mu = 0 # (dt)<br>    &gt;&gt;&gt; nu = 1 # (dr)<br>    &gt;&gt;&gt; index_config = \"dd\"<br>    &gt;&gt;&gt; spacetime.print_ricci_coefficient(index_config, 3, 2)<br><br>    R\u2083\u2082 = 0<br><br><br>[Riemann Tensor](https://en.wikipedia.org/wiki/Riemann_curvature_tensor)<br>================<br>In the mathematical field of differential geometry, the Riemann curvature tensor is the most common method used to express the curvature of Riemannian manifolds. It assigns a tensor to each point of a Riemannian manifold (i.e., it is a tensor field), that measures the extent to which the metric tensor is not locally isometric to that of Euclidean space.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20R%5E%5Crho%7B%7D_%7B%5Csigma%5Cmu%5Cnu%7D%20%3D%20%5Cpartial_%5Cmu%5CGamma%5E%5Crho%7B%7D_%7B%5Cnu%5Csigma%7D%20-%20%5Cpartial_%5Cnu%5CGamma%5E%5Crho%7B%7D_%7B%5Cmu%5Csigma%7D%20&amp;plus;%20%5CGamma%5E%5Crho%7B%7D_%7B%5Cmu%5Clambda%7D%5CGamma%5E%5Clambda%7B%7D_%7B%5Cnu%5Csigma%7D%20-%20%5CGamma%5E%5Crho%7B%7D_%7B%5Cnu%5Clambda%7D%5CGamma%5E%5Clambda%7B%7D_%7B%5Cmu%5Csigma%7D)<br><br><br>    &gt;&gt;&gt; index_config = \"uddd\"<br>    &gt;&gt;&gt; spacetime.print_reimann_coefficient(index_config, 3, 2, 2, 3)<br><br>            -2\u22c5G\u22c5M <br>    R\u00b3\u2082\u2082\u2083 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500<br>              2    <br>             c \u22c5x\u2081 <br><br>![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20%7B%5Cdisplaystyle%20R_%7Bik%5Cell%20m%7D%3D%7B%5Cfrac%20%7B1%7D%7B2%7D%7D%5Cleft%28%7B%5Cfrac%20%7B%5Cpartial%20%5E%7B2%7Dg_%7Bim%7D%7D%7B%5Cpartial%20x%5E%7Bk%7D%5Cpartial%20x%5E%7B%5Cell%20%7D%7D%7D&amp;plus;%7B%5Cfrac%20%7B%5Cpartial%20%5E%7B2%7Dg_%7Bk%5Cell%20%7D%7D%7B%5Cpartial%20x%5E%7Bi%7D%5Cpartial%20x%5E%7Bm%7D%7D%7D-%7B%5Cfrac%20%7B%5Cpartial%20%5E%7B2%7Dg_%7Bi%5Cell%20%7D%7D%7B%5Cpartial%20x%5E%7Bk%7D%5Cpartial%20x%5E%7Bm%7D%7D%7D-%7B%5Cfrac%20%7B%5Cpartial%20%5E%7B2%7Dg_%7Bkm%7D%7D%7B%5Cpartial%20x%5E%7Bi%7D%5Cpartial%20x%5E%7B%5Cell%20%7D%7D%7D%5Cright%29&amp;plus;g_%7Bnp%7D%5Cleft%28%5CGamma%20%5E%7Bn%7D%7B%7D_%7Bk%5Cell%20%7D%5CGamma%20%5E%7Bp%7D%7B%7D_%7Bim%7D-%5CGamma%20%5E%7Bn%7D%7B%7D_%7Bkm%7D%5CGamma%20%5E%7Bp%7D%7B%7D_%7Bi%5Cell%20%7D%5Cright%29%7D)<br><br>    &gt;&gt;&gt; spacetime.print_riemann_coefficient(\"dddd\", 2, 0, 2, 0)<br><br>                \u239b         2  \u239e<br>            G\u22c5M\u22c5\u239d2\u22c5G\u22c5M - c \u22c5r\u23a0<br>    R\u2082\u2080\u2082\u2080 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500<br>                   4  2       <br>                  c \u22c5r        <br><br><br>[Christoffel symbols of the First Kind](https://en.wikipedia.org/wiki/Christoffel_symbols)<br>=======================================<br><br>The connection coefficients or 'Christoffel symbol' are an array of numbers which represent the metric connection. The metric connection can be used to measure distances along curved manifolds. In General Relativity, the metric connection actually identifies the meaning of the gravitational field and can be used to track trajectories through spacetime.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20%5CGamma%20_%7Bcab%7D%3D%7B%5Ctfrac%20%7B1%7D%7B2%7D%7D%5Cleft%28%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bca%7D%7D%7B%5Cpartial%20x%5E%7Bb%7D%7D%7D&amp;plus;%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bcb%7D%7D%7B%5Cpartial%20x%5E%7Ba%7D%7D%7D-%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bab%7D%7D%7B%5Cpartial%20x%5E%7Bc%7D%7D%7D%5Cright%29)<br><br>    &gt;&gt;&gt; spacetime.print_connection_coefficient(\"ddd\", 1, 0, 0)<br><br>           -G\u22c5M <br>    \u0393\u2081\u2080\u2080 = \u2500\u2500\u2500\u2500\u2500<br>            2  2<br>           c \u22c5r <br><br>[Christoffel symbols of the Second Kind](https://en.wikipedia.org/wiki/Christoffel_symbols)<br>=======================================<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdpi%7B100%7D%20%5Chuge%20%5CGamma%20%5E%7Bi%7D%7B%7D_%7Bkl%7D%3D%7B%5Ctfrac%20%7B1%7D%7B2%7D%7Dg%5E%7Bim%7D%5Cleft%28%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bmk%7D%7D%7B%5Cpartial%20x%5E%7Bl%7D%7D%7D&amp;plus;%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bml%7D%7D%7B%5Cpartial%20x%5E%7Bk%7D%7D%7D-%7B%5Cfrac%20%7B%5Cpartial%20g_%7Bkl%7D%7D%7B%5Cpartial%20x%5E%7Bm%7D%7D%7D%5Cright%29)<br><br>    &gt;&gt;&gt; index_config = \"udd\"<br>    &gt;&gt;&gt; spacetime.print_connection_coefficient(index_config, 1, 3, 3)<br><br>           \u239b         2   \u239e    2    <br>           \u239d2\u22c5G\u22c5M - c \u22c5x\u2081\u23a0\u22c5sin (x\u2082)<br>    \u0393\u00b9\u2083\u2083 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500<br>                       2           <br>                      c            <br><br>[Weyl Tensor](https://en.wikipedia.org/wiki/Weyl_tensor)<br>=============<br><br>In differential geometry, the Weyl curvature tensor, named after Hermann Weyl, is a measure of the curvature of spacetime or, more generally, a pseudo-Riemannian manifold. Like the Riemann curvature tensor, the Weyl tensor expresses the tidal force that a body feels when moving along a geodesic. The Weyl tensor differs from the Riemann curvature tensor in that it does not convey information on how the volume of the body changes, but rather only how the shape of the body is distorted by the tidal force.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%7B%5Cdisplaystyle%20C_%7Bik%5Cell%20m%7D%3DR_%7Bik%5Cell%20m%7D&amp;plus;%7B%5Cfrac%20%7B1%7D%7Bn-2%7D%7D%5Cleft%28R_%7Bim%7Dg_%7Bk%5Cell%20%7D-R_%7Bi%5Cell%20%7Dg_%7Bkm%7D&amp;plus;R_%7Bk%5Cell%20%7Dg_%7Bim%7D-R_%7Bkm%7Dg_%7Bi%5Cell%20%7D%5Cright%29&amp;plus;%7B%5Cfrac%20%7B1%7D%7B%28n-1%29%28n-2%29%7D%7DR%5Cleft%28g_%7Bi%5Cell%20%7Dg_%7Bkm%7D-g_%7Bim%7Dg_%7Bk%5Cell%20%7D%5Cright%29%2C%7D)<br><br>    &gt;&gt;&gt; index_config = \"dddd\"<br>    &gt;&gt;&gt; spacetime.print_weyl_coefficient(index_config, 3, 2, 2, 3)<br><br>                       2   <br>            2\u22c5G\u22c5M\u22c5r\u22c5sin (\u03b8)<br>    C\u2083\u2082\u2082\u2083 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500<br>                    2      <br>                   c      <br><br>[Schouten Tensor](https://en.wikipedia.org/wiki/Schouten_tensor) (Experimental)<br>=================<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20P_%7Bij%7D%20%3D%20%5Cfrac%7B1%7D%7Bn-2%7D%5Cleft%20%28%20R_%7Bij%7D%20-%20%5Cfrac%7BR%7D%7B2d-2%7D%5C%3A%20g_%7Bij%7D%20%5Cright%20%29)<br><br>    &gt;&gt;&gt; spacetime.get_schouten_coefficient(\"dd\",0,0)<br><br>                                    2<br>              \u239b         2  \u239e \u239bd    \u239e <br>          G\u22c5M\u22c5\u239d2\u22c5G\u22c5M - c \u22c5r\u23a0\u22c5\u239c\u2500\u2500(t)\u239f <br>                             \u239ddt   \u23a0 <br>    P\u2080\u2080 = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500<br>                      4  3           <br>                     c \u22c5r         <br><br><br>[Geodesics parametrized by proper time](https://en.wikipedia.org/wiki/Geodesics_in_general_relativity#Mathematical_expression) (Experimental)<br>=======================================<br>This is a measure of the local acceleration; that which could be measured by an accelerometer.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%5Cfrac%7Bd%5E%7B2%7Dx%5E%7B%5Clambda%7D%7D%7Bd%5Ctau%5E%7B2%7D%7D&amp;plus;%5CGamma%5E%7B%5Clambda%7D_%7B%5Cmu%5Cnu%7D%5Cfrac%7Bdx%5E%7B%5Cmu%7D%7D%7Bd%5Ctau%7D%5Cfrac%7Bdx%5E%7B%5Cnu%7D%7D%7Bd%5Ctau%7D%3D0)<br><br>    &gt;&gt;&gt; spacetime.print_proper_acceleration(0)<br><br>[Geodesics parametrized by coordinate time](https://en.wikipedia.org/wiki/Geodesics_in_general_relativity#Equivalent_mathematical_expression_using_coordinate_time_as_parameter) (Experimental)<br>===========================================<br>This is a measure of the accelleration one observers another undergoing.<br><br>![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%5Cfrac%7Bd%5E%7B2%7Dx%5E%7B%5Clambda%7D%7D%7Bdt%5E%7B2%7D%7D%3D%5CGamma%5E%7B0%7D_%7B%5Cmu%5Cnu%7D%5Cfrac%7Bdx%5E%7B%5Cmu%7D%7D%7Bdt%7D%5Cfrac%7Bdx%5E%7B%5Cnu%7D%7D%7Bdt%7D%5Cfrac%7Bdx%5E%7B%5Clambda%7D%7D%7Bdt%7D%5C%3B-%5C%3B%5CGamma%5E%7B%5Clambda%7D_%7B%5Cmu%5Cnu%7D%5Cfrac%7Bdx%5E%7B%5Cmu%7D%7D%7Bdt%7D%5Cfrac%7Bdx%5E%7B%5Cnu%7D%7D%7Bdt%7D)<br><br>    &gt;&gt;&gt; spacetime.print_coordinate_acceleration(0)<br><br>[Geodesic deviation equation](https://en.wikipedia.org/wiki/Geodesic_deviation#Mathematical_definition) (Experimental)<br>=============================<br>This is a measure of how much two initial paralell geodesic paths will deviate or converge. <br><br>![equation](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Chuge%20%5Cfrac%7Bd%5E%7B2%7D%5Cxi%5E%7B%5Clambda%7D%7D%7Bdt%5E%7B2%7D%7D%3D-%5C%3BR%5E%7B%5Clambda%7D_%7B%5Cmu%5Cnu%5Cell%7D%5Cfrac%7Bdx%5E%7B%5Cmu%7D%7D%7Bdt%7D%5Cfrac%7Bdx%5E%7B%5Cnu%7D%7D%7Bdt%7D%5Cxi%5E%7B%5Cell%7D)<br><br>    &gt;&gt;&gt; spacetime.print_separation_geodesic_acceleration(0)<br><br><br>\n          </div>"}, "last_serial": 4851287, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "f58a4ece73870fbe9e62e69f4d85a064", "sha256": "d82f04c53f8a068b558b7b7e0303eeff0a1347436b236d88322bee95d7576f72"}, "downloads": -1, "filename": "spacetimeengine-0.1.10-py2-none-any.whl", "has_sig": false, "md5_digest": "f58a4ece73870fbe9e62e69f4d85a064", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 25165, "upload_time": "2019-02-19T19:32:02", "upload_time_iso_8601": "2019-02-19T19:32:02.616683Z", "url": "https://files.pythonhosted.org/packages/5a/5f/8dc845a7c81eac194b1df0e228b9c42a8ef7834737662d0c1902eeb9d3e3/spacetimeengine-0.1.10-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21233d266b6dde0585af1b1ca0bfd64b", "sha256": "c3eb1d96e0f749dd88d5e08581fd1a3b176d8cc86fa6ec84344be50d8640c07e"}, "downloads": -1, "filename": "spacetimeengine-0.1.10.tar.gz", "has_sig": false, "md5_digest": "21233d266b6dde0585af1b1ca0bfd64b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18439, "upload_time": "2019-02-19T19:32:04", "upload_time_iso_8601": "2019-02-19T19:32:04.080697Z", "url": "https://files.pythonhosted.org/packages/8e/7b/28b08774838438d6331dd735d8c2f5dd716ccdebaa18072f857e635b0ce0/spacetimeengine-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "d815e6abea69686b971551d9b86d5164", "sha256": "b3d5d83cda00a1a14402a0fa993abe598fb81bc0f5fb2bff51613bec79336477"}, "downloads": -1, "filename": "spacetimeengine-0.1.11-py2-none-any.whl", "has_sig": false, "md5_digest": "d815e6abea69686b971551d9b86d5164", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 24872, "upload_time": "2019-02-21T18:30:49", "upload_time_iso_8601": "2019-02-21T18:30:49.504128Z", "url": "https://files.pythonhosted.org/packages/70/d0/0e60f5adc84a4d0658e6b1be5e913f739d04bf382cd48c2972f91708c70f/spacetimeengine-0.1.11-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66d0b4d719b5985beaee8df41a05c4a6", "sha256": "81433647eb054f590508e33a8df33bf2c5708b20e6c768993f2d42a444459e3a"}, "downloads": -1, "filename": "spacetimeengine-0.1.11.tar.gz", "has_sig": false, "md5_digest": "66d0b4d719b5985beaee8df41a05c4a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18294, "upload_time": "2019-02-21T18:30:51", "upload_time_iso_8601": "2019-02-21T18:30:51.198391Z", "url": "https://files.pythonhosted.org/packages/44/8d/694a54439d745cc9859546867bae7356a6f050533634a51cf6c663a3589a/spacetimeengine-0.1.11.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "26a718dcdaac7574b9c6bb4089c5e844", "sha256": "f9fdd4204e8d92359bbb1998ff6e1cf93db964655f6fccf0f4eaccc87f160e4b"}, "downloads": -1, "filename": "spacetimeengine-0.1.3.zip", "has_sig": false, "md5_digest": "26a718dcdaac7574b9c6bb4089c5e844", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18056, "upload_time": "2019-02-15T15:44:03", "upload_time_iso_8601": "2019-02-15T15:44:03.347777Z", "url": "https://files.pythonhosted.org/packages/44/47/435237219a727d860f41d8d87f6d700e47fc629fe02195aae78502f4c648/spacetimeengine-0.1.3.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2e1e8551a1db5ad487c3922effd3eded", "sha256": "0616153c33680d9c76338469c0f1f1f3e5e7fb02e216d0835cd8d06e95b6edf5"}, "downloads": -1, "filename": "spacetimeengine-0.1.4-py2-none-any.whl", "has_sig": false, "md5_digest": "2e1e8551a1db5ad487c3922effd3eded", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10703, "upload_time": "2019-02-15T16:21:05", "upload_time_iso_8601": "2019-02-15T16:21:05.352139Z", "url": "https://files.pythonhosted.org/packages/3f/14/b6541426d919958f08fcaedcabede7dc767bb439ca14c3de24c18681aa94/spacetimeengine-0.1.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5b1a6c6c1001be70e3206d1ba60b007", "sha256": "180740f75104fd5bf5a88e0fdd62fa795e76dba898a656dec3b03248d0da3d6e"}, "downloads": -1, "filename": "spacetimeengine-0.1.4.tar.gz", "has_sig": false, "md5_digest": "e5b1a6c6c1001be70e3206d1ba60b007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8029, "upload_time": "2019-02-15T16:21:06", "upload_time_iso_8601": "2019-02-15T16:21:06.551430Z", "url": "https://files.pythonhosted.org/packages/41/62/9f7f475e55cec388124cba9207e3a9d1d2c7fffa489d2766bdaa2f232de6/spacetimeengine-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "2763817d7dd4f04de8865da643d8097d", "sha256": "f95659ae91693812b8781f00be8c8653ccbbfc2d6d81fc281db953056833ceff"}, "downloads": -1, "filename": "spacetimeengine-0.1.5.tar.gz", "has_sig": false, "md5_digest": "2763817d7dd4f04de8865da643d8097d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8028, "upload_time": "2019-02-15T16:26:54", "upload_time_iso_8601": "2019-02-15T16:26:54.570351Z", "url": "https://files.pythonhosted.org/packages/8e/f1/f538ebc50d628401856d9df75743dcd5052dfa4778ea67787802760ec94d/spacetimeengine-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "5eb90988a7f39c87277b2542b14aa362", "sha256": "82eaec3075d88c9aade083c1c2226a87955d4a3174908253d02a9efa010d70c8"}, "downloads": -1, "filename": "spacetimeengine-0.1.6-py2-none-any.whl", "has_sig": false, "md5_digest": "5eb90988a7f39c87277b2542b14aa362", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10895, "upload_time": "2019-02-15T17:36:56", "upload_time_iso_8601": "2019-02-15T17:36:56.204559Z", "url": "https://files.pythonhosted.org/packages/79/29/1c23422a39933a3b72e08a90265bfaee3e2e1bffdf32510069490ffc3189/spacetimeengine-0.1.6-py2-none-any.whl", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "b770a88efa73d5913a2c6851721df0e4", "sha256": "fe02427eb87849236d1d4671824b087eb109836792fc91e701bc0d1a3e1c12ff"}, "downloads": -1, "filename": "spacetimeengine-0.1.7.tar.gz", "has_sig": false, "md5_digest": "b770a88efa73d5913a2c6851721df0e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8142, "upload_time": "2019-02-15T17:41:25", "upload_time_iso_8601": "2019-02-15T17:41:25.543607Z", "url": "https://files.pythonhosted.org/packages/cf/59/7383f03eba56039edec4d7843ee1d0ecfd7e259acc4b396a6c95a344db29/spacetimeengine-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "dfbe6004f40d3071a95c2d7b80cd7801", "sha256": "f924ea6324e25e78ac16938ad03c411471e5d5e47f3089b58dcfaed76f0ff65c"}, "downloads": -1, "filename": "spacetimeengine-0.1.8-py2-none-any.whl", "has_sig": false, "md5_digest": "dfbe6004f40d3071a95c2d7b80cd7801", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10895, "upload_time": "2019-02-19T18:13:04", "upload_time_iso_8601": "2019-02-19T18:13:04.830393Z", "url": "https://files.pythonhosted.org/packages/db/40/564fa45d49971ab4af124ccbfae3add97de0d58ac4cfc7bb9566e27a96ae/spacetimeengine-0.1.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26f08409822bbc25267884378d79a6d2", "sha256": "5a22d4f76c3385288b2a5f73030bdd01721bc4a48f08c0329fada72a2262f74b"}, "downloads": -1, "filename": "spacetimeengine-0.1.8.tar.gz", "has_sig": false, "md5_digest": "26f08409822bbc25267884378d79a6d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7125, "upload_time": "2019-02-19T18:13:06", "upload_time_iso_8601": "2019-02-19T18:13:06.059695Z", "url": "https://files.pythonhosted.org/packages/aa/c9/076cd9be3c54880293e4dc3afc4ada6105b3c3bc168afe9ab985e6962d93/spacetimeengine-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d815e6abea69686b971551d9b86d5164", "sha256": "b3d5d83cda00a1a14402a0fa993abe598fb81bc0f5fb2bff51613bec79336477"}, "downloads": -1, "filename": "spacetimeengine-0.1.11-py2-none-any.whl", "has_sig": false, "md5_digest": "d815e6abea69686b971551d9b86d5164", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 24872, "upload_time": "2019-02-21T18:30:49", "upload_time_iso_8601": "2019-02-21T18:30:49.504128Z", "url": "https://files.pythonhosted.org/packages/70/d0/0e60f5adc84a4d0658e6b1be5e913f739d04bf382cd48c2972f91708c70f/spacetimeengine-0.1.11-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66d0b4d719b5985beaee8df41a05c4a6", "sha256": "81433647eb054f590508e33a8df33bf2c5708b20e6c768993f2d42a444459e3a"}, "downloads": -1, "filename": "spacetimeengine-0.1.11.tar.gz", "has_sig": false, "md5_digest": "66d0b4d719b5985beaee8df41a05c4a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18294, "upload_time": "2019-02-21T18:30:51", "upload_time_iso_8601": "2019-02-21T18:30:51.198391Z", "url": "https://files.pythonhosted.org/packages/44/8d/694a54439d745cc9859546867bae7356a6f050533634a51cf6c663a3589a/spacetimeengine-0.1.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:08 2020"}