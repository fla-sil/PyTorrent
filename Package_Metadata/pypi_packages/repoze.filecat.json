{"info": {"author": "Malthe Borch and Stefan Eletzhofer", "author_email": "repoze-dev@lists.repoze.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"], "description": "Filecat\n=======\n\nThis package provides application support for indexing and serving\ncontent in a file system.\n\nAn HTTP API is available for querying operations.\n\nSetup\n-----\n\nThe Xapian database queue processor must be configured with an\nindexer which points to a database file on disk, e.g.::\n\n  >>> indexer = repoze.filecat.index.create_indexer(db_path)\n  >>> ore.xapian.queue.QueueProcessor.start(indexer)\n\nTo start the directory observer (configured to scan every 3 seconds)::\n\n  >>> repoze.filecat.watch.start(directory, 3)\n\nWe can then query the Xapian database by opening a connection::\n\n  >>> connection = xapian.Connection(db_path)\n\nFormats\n-------\n\nCurrently supported file formats:\n\n- JPEG (image/jpeg)\n- ReStructuredText (text/x-rst)\n  \nAuthors\n-------\n\nMalthe Borch <mborch@gmail.com>\nStefan Eletzhofer <stefan.eletzhofer@inquant.de>\nRobert Marianski <rmarianski@gmail.com>\n\nApplication\n===========\n\nThe filecat server application is configured with a ``path`` parameter\nwhich points to a pool of files (a directory structure) and a ``host``\nparameter which provides a URL at which a webserver is configured to\nserve up the directory as static files.\n\nAPI\n---\n\nAll queries are performed using the following HTTP API::\n\n method  path                           description\n ----------------------------------------------------------\n  POST    /purge                        Clear index\n  POST    /add                          Add file to index\n  \n          @path   Relative filename\n\n  POST    /update                       Reindex file\n  \n          @path   Relative filename\n\n  POST    /remove                       Remove file from index\n  \n          @path   Relative filename\n         \n  GET     /query                        Perform query\n  \n          Parameters are passed as-is\n          to the Xapian query engine.\n\nResults\n-------\n\nQueries return a JSON structure which is first a two-tuple\n(matches_estimated, results). The result set is a tuple of dicts:\n\n  @url       The URL where this file can be downloaded\n  @mimetype  MIME-type of the file\n  @metadata  Dict-like structure with mimetype-specific metadata*\n\n\n\n\n\nChangelog\n=========\n\n0.2 - (2009-08-03)\n~~~~~~~~~~~~~~~~~~\n\n- The JSON-output of a query is now a tuple of estimated number of\n  matches and the result set. [malthe]\n\n- Fixed issue where global registry would not be properly\n  configured. [malthe]\n\n- Handle JPEG-files without a XMP application segment (these are\n  indexed with a trival metadata tree). [malthe]\n\n- Use XMP instead of IPCT/EXIF; this sheds the dependency on the\n  Hachoir library. [malthe]\n\n- Added XMP extraction capabilities for JPEG-files. [malthe]\n\n- Updated Xapian library versions in buildout configuration. [malthe]\n\n0.1 - (2008-10-03)\n~~~~~~~~~~~~~~~~~~\n\n- Remove print statements. [seletz]\n\n- Added tests for directory watch/observer.  Fixed a bug where the observer would\n  emit absolute paths causing xapian to index absolute paths. [seletz]\n\n- Hook watcher in.  The configured ``static`` directory is now watched.  Changes\n  are now added to the Xapian queue. [seletz]\n\n- Created a directory observer thing which will allow us later to atomatically\n  wahtch a directory and issue Xapian operations. [seletz]\n\n- Hooked in ``modify`` and ``remove`` views. [seletz]\n\n- Changed query parser -- it now just uses the passed-in query string.  Also\n  added ability to limit/batch query results. [seletz]\n\n- Configured Xapian indexer.  This has to be done separately from the BFG\n  components, because the Xapian indexer runs in its own thread and thus uses\n  the global component registry. [seletz]\n\n- Hooked up ``add`` view. [seletz]\n\n- Implemented ``query`` view. [seletz]\n\n- Fixed ``routes``setup wrt. permissions. [seletz]\n\n- Changed svn layout. [seletz]\n\n- Added buildout. [seletz]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.repoze.org", "keywords": "web wsgi bfg zope", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "repoze.filecat", "package_url": "https://pypi.org/project/repoze.filecat/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/repoze.filecat/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.repoze.org"}, "release_url": "https://pypi.org/project/repoze.filecat/0.2/", "requires_dist": null, "requires_python": null, "summary": "A file catalog with an HTTP frontend.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Filecat<br>=======<br><br>This package provides application support for indexing and serving<br>content in a file system.<br><br>An HTTP API is available for querying operations.<br><br>Setup<br>-----<br><br>The Xapian database queue processor must be configured with an<br>indexer which points to a database file on disk, e.g.::<br><br>  &gt;&gt;&gt; indexer = repoze.filecat.index.create_indexer(db_path)<br>  &gt;&gt;&gt; ore.xapian.queue.QueueProcessor.start(indexer)<br><br>To start the directory observer (configured to scan every 3 seconds)::<br><br>  &gt;&gt;&gt; repoze.filecat.watch.start(directory, 3)<br><br>We can then query the Xapian database by opening a connection::<br><br>  &gt;&gt;&gt; connection = xapian.Connection(db_path)<br><br>Formats<br>-------<br><br>Currently supported file formats:<br><br>- JPEG (image/jpeg)<br>- ReStructuredText (text/x-rst)<br>  <br>Authors<br>-------<br><br>Malthe Borch &lt;mborch@gmail.com&gt;<br>Stefan Eletzhofer &lt;stefan.eletzhofer@inquant.de&gt;<br>Robert Marianski &lt;rmarianski@gmail.com&gt;<br><br>Application<br>===========<br><br>The filecat server application is configured with a ``path`` parameter<br>which points to a pool of files (a directory structure) and a ``host``<br>parameter which provides a URL at which a webserver is configured to<br>serve up the directory as static files.<br><br>API<br>---<br><br>All queries are performed using the following HTTP API::<br><br> method  path                           description<br> ----------------------------------------------------------<br>  POST    /purge                        Clear index<br>  POST    /add                          Add file to index<br>  <br>          @path   Relative filename<br><br>  POST    /update                       Reindex file<br>  <br>          @path   Relative filename<br><br>  POST    /remove                       Remove file from index<br>  <br>          @path   Relative filename<br>         <br>  GET     /query                        Perform query<br>  <br>          Parameters are passed as-is<br>          to the Xapian query engine.<br><br>Results<br>-------<br><br>Queries return a JSON structure which is first a two-tuple<br>(matches_estimated, results). The result set is a tuple of dicts:<br><br>  @url       The URL where this file can be downloaded<br>  @mimetype  MIME-type of the file<br>  @metadata  Dict-like structure with mimetype-specific metadata*<br><br><br><br><br><br>Changelog<br>=========<br><br>0.2 - (2009-08-03)<br>~~~~~~~~~~~~~~~~~~<br><br>- The JSON-output of a query is now a tuple of estimated number of<br>  matches and the result set. [malthe]<br><br>- Fixed issue where global registry would not be properly<br>  configured. [malthe]<br><br>- Handle JPEG-files without a XMP application segment (these are<br>  indexed with a trival metadata tree). [malthe]<br><br>- Use XMP instead of IPCT/EXIF; this sheds the dependency on the<br>  Hachoir library. [malthe]<br><br>- Added XMP extraction capabilities for JPEG-files. [malthe]<br><br>- Updated Xapian library versions in buildout configuration. [malthe]<br><br>0.1 - (2008-10-03)<br>~~~~~~~~~~~~~~~~~~<br><br>- Remove print statements. [seletz]<br><br>- Added tests for directory watch/observer.  Fixed a bug where the observer would<br>  emit absolute paths causing xapian to index absolute paths. [seletz]<br><br>- Hook watcher in.  The configured ``static`` directory is now watched.  Changes<br>  are now added to the Xapian queue. [seletz]<br><br>- Created a directory observer thing which will allow us later to atomatically<br>  wahtch a directory and issue Xapian operations. [seletz]<br><br>- Hooked in ``modify`` and ``remove`` views. [seletz]<br><br>- Changed query parser -- it now just uses the passed-in query string.  Also<br>  added ability to limit/batch query results. [seletz]<br><br>- Configured Xapian indexer.  This has to be done separately from the BFG<br>  components, because the Xapian indexer runs in its own thread and thus uses<br>  the global component registry. [seletz]<br><br>- Hooked up ``add`` view. [seletz]<br><br>- Implemented ``query`` view. [seletz]<br><br>- Fixed ``routes``setup wrt. permissions. [seletz]<br><br>- Changed svn layout. [seletz]<br><br>- Added buildout. [seletz]\n          </div>"}, "last_serial": 798815, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "60b7b45190e28b0d60ef3a89a29f50aa", "sha256": "caecaaa6d59a7b5deeddc7a4ec037f8ca46ffaf1df602389b5880b9f9a8d5837"}, "downloads": -1, "filename": "repoze.filecat-0.1.tar.gz", "has_sig": false, "md5_digest": "60b7b45190e28b0d60ef3a89a29f50aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63488, "upload_time": "2008-10-03T15:36:20", "upload_time_iso_8601": "2008-10-03T15:36:20Z", "url": "https://files.pythonhosted.org/packages/11/72/304b88842e7e59f8c3382086f49f720a2234a988c5897da1612474e77970/repoze.filecat-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "942dcd8f01a5e295fa48f399a6a260d9", "sha256": "7fcf1c7561e341a377ab877d17ad404f7afaa45374da50bef79e2d2d6d177c11"}, "downloads": -1, "filename": "repoze.filecat-0.2.tar.gz", "has_sig": false, "md5_digest": "942dcd8f01a5e295fa48f399a6a260d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68306, "upload_time": "2009-08-24T16:53:17", "upload_time_iso_8601": "2009-08-24T16:53:17.507428Z", "url": "https://files.pythonhosted.org/packages/57/b3/d6900ec90f189ed6442ce0b9e51b4e1f23ece0a25debb0a34e5d13bd0dd8/repoze.filecat-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "942dcd8f01a5e295fa48f399a6a260d9", "sha256": "7fcf1c7561e341a377ab877d17ad404f7afaa45374da50bef79e2d2d6d177c11"}, "downloads": -1, "filename": "repoze.filecat-0.2.tar.gz", "has_sig": false, "md5_digest": "942dcd8f01a5e295fa48f399a6a260d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68306, "upload_time": "2009-08-24T16:53:17", "upload_time_iso_8601": "2009-08-24T16:53:17.507428Z", "url": "https://files.pythonhosted.org/packages/57/b3/d6900ec90f189ed6442ce0b9e51b4e1f23ece0a25debb0a34e5d13bd0dd8/repoze.filecat-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:26 2020"}