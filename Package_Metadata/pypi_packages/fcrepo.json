{"info": {"author": "Infrae", "author_email": "info@infrae.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "FCRepo, a client for the Fedora Commons Repository\r\n==================================================\r\n\r\nInfo\r\n----\r\n\r\nThis package provides access to the `Fedora Commons Repository`_.\r\n\r\nFrom the Fedora Commons Website:\r\n\r\n     Fedora (Flexible Extensible Digital Object Repository Architecture) was originally developed by researchers at Cornell University as an architecture for storing, managing, and accessing digital content in the form of digital objects inspired by the `Kahn and Wilensky`_ Framework.  Fedora defines a set of abstractions for expressing digital objects, asserting relationships among digital objects, and linking \"behaviors\" (i.e., services) to digital objects. The Fedora Repository Project (i.e., Fedora) implements the Fedora abstractions in a robust open source software system. \r\n\r\nThis package uses WADL, `Web Application Description Language`_ to parse the\r\nWADL file that comes with Fedora so it offers support for the\r\ncomplete REST API.\r\nOn top of that a more highlevel abstraction is written, which will be\r\ndemonstrated in this `doctest`_.\r\nThis package has been written for FedoraCommons 3.3 and 3.4, it has not been \r\ntested with older versions. REST API documentation can be found in the \r\n`Fedora wiki`_.\r\n\r\n\r\nThis package can be installed using buildout which will also fetch the\r\nFedora installer, and install it locally for testing purposes. \r\nUse the following steps to install and run this doctest::\r\n\r\n   python2.6 bootstrap.py\r\n   ./bin/buildout\r\n   ./bin/install_fedora\r\n   ./bin/start_fedora\r\n   ./bin/test\r\n\r\n.. _Fedora Commons Repository: http://www.fedora-commons.org/\r\n.. _Kahn and Wilensky: http://www.cnri.reston.va.us/k-w.html\r\n.. _Web Application Description Language: http://www.w3.org/Submission/wadl/\r\n.. _Fedora wiki: http://www.fedora-commons.org/confluence/display/FCR30/REST+API\r\n.. _doctest: http://en.wikipedia.org/wiki/Doctest\r\n.. _REST API Documentation: http://www.fedora-commons.org/confluence/display/FCR30/REST+API\r\n\r\nUsing the fcrepo package\r\n------------------------\r\n\r\nConnecting to the Repository\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nTo connect to the running Fedora, we first need a connection. The connection\r\ncode was largely copied from `Etienne Posthumus (\"Epoz\") duraspace module`_.\r\n\r\n.. _Etienne Posthumus (\"Epoz\") duraspace module: http://bitbucket.org/epoz/duraspace\r\n\r\n  >>> from fcrepo.connection import Connection\r\n  >>> connection = Connection('http://localhost:8080/fedora', \r\n  ...                         username='fedoraAdmin', \r\n  ...                         password='fedoraAdmin')\r\n\r\n\r\nNow that we have a connection, we can create a FedoraClient:\r\n\r\n  >>> from fcrepo.client import FedoraClient\r\n  >>> client = FedoraClient(connection)\r\n\r\nPIDs\r\n~~~~\r\n\r\nA Fedora object needs a unique PID to function. The PID consists of a \r\nnamespace string, then a semicolon and then a string identifier. \r\nYou can create your own PIDs using a random UUID, but you can also use\r\nthe nextPID feature of Fedora which returns an ascending number.\r\n\r\n  >>> pid = client.getNextPID(u'foo')\r\n  >>> ns, num = pid.split(':')\r\n  >>> ns == 'foo' and num.isdigit()\r\n  True\r\n\r\nWe can also get multiple PIDs at once\r\n\r\n  >>> pids = client.getNextPID(u'foo', numPIDs=10)\r\n  >>> len(pids)\r\n  10\r\n\r\nThis method returns unicode strings or a list of unicode strings if\r\nmultiple PIDs are requested. \r\n\r\nThe client abstraction provides wrappers around the 'low-level' \r\nAPI code which is generated from the WADL file. \r\nHere's the same call through the WADL API:\r\n\r\n  >>> print client.api.getNextPID().submit(namespace=u'foo', format=u'text/xml').read()\r\n  <?xml  ...?>\r\n  <pidList ...>\r\n    <pid>...</pid>\r\n  </pidList>\r\n\r\nSo the client methods call the methods from the WADL API, \r\nparse the resulting xml and uses sensible default arguments.\r\n\r\nThis is how most client method calls work. \r\nNormally you would never need to access the WADL API directly, \r\nso let's move on.\r\n\r\nCreating Objects\r\n~~~~~~~~~~~~~~~~\r\n\r\nNow that we can get PIDs we can use them and create a new object:\r\n\r\n  >>> pid = client.getNextPID(u'foo')\r\n  >>> obj = client.createObject(pid, label=u'My First Test Object')\r\n \r\nYou can't create an object with the same PID twice.\r\n\r\n  >>> obj = client.createObject(pid, label=u'Second try?')\r\n  Traceback (most recent call last):\r\n  ...\r\n  FedoraConnectionException: ... The PID 'foo:...' already exists in the registry; the object can't be re-created.\r\n\r\nFetching Objects\r\n~~~~~~~~~~~~~~~~\r\n\r\nOff course it's also possible to retrieve an existing object with the client:\r\n\r\n  >>> obj = client.getObject(pid)\r\n  >>> print obj.label\r\n  My First Test Object  \r\n\r\nYou'll get an error if the object does not exist:\r\n\r\n  >>> obj = client.getObject(u'foo:bar')\r\n  Traceback (most recent call last):\r\n  ...\r\n  FedoraConnectionException: ...HTTP code=404, Reason=Not Found...\r\n\r\n\r\nDeleting Objects\r\n~~~~~~~~~~~~~~~~\r\n\r\nDeleting objects can be done by calling the delete method on an object,\r\nor by passing the pid to the deleteObject method on the client.\r\n\r\n  >>> pid = client.getNextPID(u'foo')\r\n  >>> o = client.createObject(pid, label=u'About to be deleted')\r\n  >>> o.delete(logMessage=u'Bye Bye')\r\n  >>> o = client.getObject(pid)\r\n  Traceback (most recent call last):\r\n  ...\r\n  FedoraConnectionException: ...HTTP code=404, Reason=Not Found...\r\n\r\nNote that in most cases you don't want to delete an object. It's better to\r\nset the state of the object to `deleted`. More about this in the next section.\r\n\r\nObject Properties\r\n~~~~~~~~~~~~~~~~~\r\n\r\nIn the previous examples we retrieved a Fedora object. \r\nThese objects have a number of properties that can be get and set:\r\n\r\n  >>> obj.label\r\n  u'My First Test Object'\r\n  >>> date = obj.lastModifiedDate\r\n  >>> obj.label = u'Changed it!'\r\n\r\nThe last line modified the label property on the Fedora server, \r\nthe lastmodified date should now have been updated:\r\n\r\n  >>> obj.lastModifiedDate > date\r\n  True\r\n  >>> obj.label\r\n  u'Changed it!'\r\n\r\nSetting properties can also be used to change the state of a FedoraObject \r\nto inactive or deleted. The following strings can be used: \r\n\r\n  * `A` means active\r\n  * `I` means inactive\r\n  * `D` means deleted\r\n\r\n  >>> obj.state = u'I'\r\n\r\nLet's try a non supported state:\r\n\r\n  >>> obj.state = u'Z'\r\n  Traceback (most recent call last): \r\n  ...\r\n  FedoraConnectionException: ... The object state of \"Z\" is invalid. The allowed values for state are:  A (active), D (deleted), and I (inactive).\r\n\r\n\r\nSetting the modification or creation date directly results in an error, they can not be set.\r\n\r\n  >>> obj.lastModifiedDate = date\r\n  Traceback (most recent call last):\r\n  ...\r\n  AttributeError: can't set attribute\r\n\r\nAn ownerId can also be configured using the properties:\r\n\r\n  >>> obj.ownerId = u'me'\r\n  >>> print obj.ownerId\r\n  me\r\n\r\nObject DataStreams\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nA Fedora object is basicly a container of Datastreams. You can iterate through \r\nthe object to find the datastream ids or call the datastreams method:\r\n\r\n  >>> print obj.datastreams()\r\n  ['DC']\r\n  >>> for id in obj: print id\r\n  DC\r\n  >>> 'DC' in obj\r\n  True\r\n\r\nTo actually get a datastream we can access it as if it's a dictionary:\r\n \r\n  >>> ds = obj['DC']\r\n  >>> ds\r\n  <fcrepo.datastream.DCDatastream object at ...>\r\n  >>> obj['FOO']\r\n  Traceback (most recent call last):\r\n  ...\r\n  FedoraConnectionException: ...No datastream could be found. Either there is no datastream for the digital object \"...\" with datastream ID of \"FOO\"  OR  there are no datastreams that match the specified date/time value of \"null\".\r\n\r\nDatastream Properties\r\n~~~~~~~~~~~~~~~~~~~~~\r\n\r\nA datastream has many properties, including label, state and createdDate, just\r\nlike the Fedora object:\r\n\r\n  >>> print ds.label\r\n  Dublin Core Record for this object\r\n\r\n  >>> print ds.state\r\n  A\r\n\r\nThere are different types of datastreams, this one is of type `X`, which means\r\nthe content is stored inline in the `FOXML file`_ . FOXML is the internal \r\nstorage format of Fedora.\r\n\r\n.. _FOXML file: http://fedora-commons.org/confluence/display/FCR30/Introduction+to+FOXML\r\n\r\n\r\n  >>> print ds.controlGroup\r\n  X\r\n\r\nA datastream can be versionable, this can be turned on or off.\r\n\r\n  >>> ds.versionable\r\n  True\r\n\r\nThe datastream also has a location, which is composed of the object pid,\r\nthe datastream id, and the version number\r\n\r\n  >>> ds.location\r\n  u'foo:...+DC+DC1.0'\r\n\r\nLet's change the label, and see what happens:\r\n\r\n  >>> ds.label = u'Datastream Metadata'\r\n  >>> ds.location\r\n  u'foo:...+DC+DC.1'\r\n\r\n  >>> ds.label = u'Datastream DC Metadata'\r\n  >>> ds.location\r\n  u'foo:...+DC+DC.2'\r\n\r\nThe location ID changes with every version, and old versions of the datastream\r\nare still available. The fcrepo client code contains no methods to retrieve\r\nold versions of datastreams or view the audit trail of objects. \r\nThe methods that implement this are available in the WADL API though.\r\n\r\nFedora can create checksums of the content stored in a datastream, \r\nby default checksums are disabled, if we set the checksumType property\r\nto MD5, Fedora will generate the checksum for us.\r\n\r\n  >>> ds.checksumType  \r\n  u'DISABLED'\r\n  >>> ds.checksumType = u'MD5'\r\n  >>> ds.checksum # the checksum always changes between tests\r\n  u'...'\r\n\r\nThere are some additional properties, not all of them can be set.\r\nHave a look at the `REST API Documentation`_ for a full list\r\n\r\n  >>> ds.mimeType\r\n  u'text/xml'\r\n  >>> ds.size > 0\r\n  True\r\n  >>> ds.formatURI\r\n  u'http://www.openarchives.org/OAI/2.0/oai_dc/'\r\n\r\n\r\nGetting and Setting Content - 1\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nWe can also get and set the content of the datastream:\r\n\r\n  >>> xml = ds.getContent().read()\r\n  >>> print xml\r\n  <oai_dc:dc ...>\r\n    <dc:title>My First Test Object</dc:title>\r\n    <dc:identifier>foo:...</dc:identifier>\r\n  </oai_dc:dc>\r\n\r\n  >>> xml = xml.replace('My First Test Object', 'My First Modified Datastream')\r\n  >>> ds.setContent(xml)\r\n\r\n\r\nGetting and Setting Content - 2\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nWe can also get and set the content directly, \r\nas if it is a dictionarie of dictionaries\r\n\r\n  >>> print obj['DC']['title']\r\n  [u'My First Modified Datastream']\r\n  >>> obj['DC']['title'] = [u'My Second Modified Datastream']\r\n  >>> print obj['DC']['title']\r\n  [u'My Second Modified Datastream']\r\n\r\n\r\nSpecial Datastream: DC\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThis `DC` datastream that is always available is actually a special kind of \r\ndatastream. The Dublin Core properties from this XML stream are stored in a\r\nrelational database which can be searched. The values are also used in the\r\nOAIPMH feed. Fedora uses the legacy `/elements/1.1/` namespace which contains\r\nthe following terms:\r\n\r\n * contributor\r\n * coverage\r\n * creator\r\n * date\r\n * description\r\n * format\r\n * identifier\r\n * language\r\n * publisher\r\n * relation\r\n * rights\r\n * source\r\n * subject\r\n * title\r\n * type\r\n\r\nView the `Dublin Core website`_ for a `description of these properties`_.\r\n\r\n.. _description of these properties: http://dublincore.org/documents/dcmi-terms/#H3\r\n.. _Dublin Core website: http://dublincore.org\r\n\r\nSince editing the Dublin Core XML data by hand gets a bit cumbersome, \r\nthe DC datastream allows access to the DC properties as if the datastream \r\nis a dictionary:\r\n\r\n  >>> ds['title']\r\n  [u'My Second Modified Datastream']\r\n\r\nThis can also be used to set values:\r\n\r\n  >>> ds['subject'] = [u'fcrepo', u'unittest']\r\n  >>> ds['description'].append(u'A test object from the fcrepo unittest')\r\n\r\n  >>> for prop in sorted(ds): print prop\r\n  description\r\n  identifier\r\n  subject\r\n  title\r\n  >>> 'subject' in ds\r\n  True\r\n \r\n\r\nTo save this, we call the setContent method again, but this time with no\r\narguments. This will make the code use the values from the dictionary to\r\ngenerate the XML string for you\r\n\r\n  >>> ds.setContent()\r\n  >>> print ds.getContent().read()\r\n  <oai_dc:dc ...>\r\n    ...\r\n    <dc:description>A test object from the fcrepo unittest</dc:description>\r\n    ...\r\n  </oai_dc:dc>\r\n\r\nInline XML Datastreams\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nLet's try adding some datastreams, for example, we want to store some XML data:\r\n\r\n  >>> obj.addDataStream('FOOXML', '<foo/>', \r\n  ...                   label=u'Foo XML', \r\n  ...                   logMessage=u'Added an XML Datastream')\r\n  >>> obj.datastreams()\r\n  ['DC', 'FOOXML']\r\n  >>> print obj['FOOXML'].getContent().read()\r\n  <foo></foo>\r\n\r\nManaged Content Datastreams\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nWe can also add Managed Content, this will be stored and managed by fedora,\r\nbut it's not inline xml. The data is stored in a seperate file on \r\nthe harddrive. We do this by setting the controlGroup param to `M`\r\n\r\n  >>> obj.addDataStream('TEXT', 'Hello!', label=u'Some Text',\r\n  ...                   mimeType=u'text/plain', controlGroup=u'M', \r\n  ...                   logMessage=u'Added some managed text')\r\n  >>> obj.datastreams()\r\n  ['DC', 'FOOXML', 'TEXT']\r\n  >>> ds = obj['TEXT']\r\n  >>> ds.size == 0 or ds.size == 6 # this does not work in Fedora 3.3\r\n  True\r\n  >>> ds.getContent().read()\r\n  'Hello!'\r\n\r\nThis is perfectly fine for small files, however when you don't want to hold\r\nthe whole file in memory you can also supply a file stream. Let's make a 3MB\r\nfile:\r\n\r\n  >>> import tempfile, os\r\n  >>> fp = tempfile.NamedTemporaryFile(mode='w+b', delete=False)\r\n  >>> filename = fp.name\r\n  >>> fp.write('foo' * (1024**2))\r\n  >>> fp.close()\r\n  >>> os.path.getsize(filename)\r\n  3145728...\r\n\r\nNow we'll open the file and stream it to Fedora. We then read the whole thing\r\nin memory and see if it's the same size:\r\n\r\n  >>> fp = open(filename, 'r')\r\n  >>> ds.setContent(fp)\r\n  >>> fp.close()\r\n  >>> content = ds.getContent().read()\r\n  >>> len(content)\r\n  3145728...\r\n  >>> os.remove(filename)  \r\n\r\nExternally Referenced Datastreams\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nFor large files it might not be convenient to store them inside Fedora. \r\nIn this case the file can be hosted externally, and we store a datastream\r\nof controlGroup type `E` (Externally referenced)\r\n\r\n  >>> obj.addDataStream('URL', controlGroup=u'E',\r\n  ...                   location=u'http://pypi.python.org/fcrepo')\r\n  >>> obj.datastreams()\r\n  ['DC', 'FOOXML', 'TEXT', 'URL']\r\n\r\nThis datastream does not have any content, so trying to read the\r\ncontent will result in an error\r\n\r\n  >>> ds = obj['URL']\r\n  >>> ds.getContent()\r\n  Traceback (most recent call last):\r\n  ...\r\n  FedoraConnectionException:...\"Error getting http://pypi.python.org/fcrepo\"  .\r\n\r\nWe can get the location though:\r\n\r\n  >>> ds.location\r\n  u'http://pypi.python.org/fcrepo'\r\n\r\nThe last of the datastream types is an externally referenced stream that \r\nredirects. This datastream has controlGroup `R` (Redirect Referenced)\r\n\r\n  >>> obj.addDataStream('HOMEPAGE', controlGroup=u'R',\r\n  ...                   location=u'http://pypi.python.org/fcrepo')\r\n  >>> obj.datastreams()\r\n  ['DC', 'FOOXML', 'TEXT', 'URL', 'HOMEPAGE']\r\n\r\nThis datastream works the same as an externally referenced stream. \r\n\r\nDeleting Datastreams\r\n~~~~~~~~~~~~~~~~~~~~\r\n\r\nA datastream can be deleted by using the python del keyword on the object,\r\nor by calling the delete method on a datastream.\r\n\r\n  >>> len(obj.datastreams())\r\n  5\r\n  >>> ds = obj['HOMEPAGE']\r\n  >>> ds.delete(logMessage=u'Removed Homepage DS')  \r\n  >>> len(obj.datastreams())\r\n  4\r\n  >>> del obj['URL']\r\n  >>> len(obj.datastreams())\r\n  3\r\n\r\nAnother Special Datastream: RELS-EXT\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nBesides the special `DC` datastream, there is another special datastream \r\ncalled `RELS-EXT`.\r\nThis datastream should contain `flat` RDFXML data which will be indexed in a\r\ntriplestore. The `RELS-EXT` datastream has some additional methods to assist in \r\nworking with the RDF data.\r\n\r\nTo create the RELS-EXT stream we don't need to supply an RDFXML file, it will\r\ncreate an empty one if no data is send.\r\n\r\n  >>> obj.addDataStream('RELS-EXT')\r\n  >>> ds = obj['RELS-EXT']\r\n\r\nNow we can add some RDF data. Each predicate contains a list of values, each\r\nvalue is a dictionary with a value and type key, and optionally a lang and\r\ndatatype key. This is identical to the `RDF+JSON format`_.\r\n\r\n.. _RDF+JSON format: http://n2.talis.com/wiki/RDF_JSON_Specification\r\n\r\n  >>> from fcrepo.utils import NS\r\n  >>> ds[NS.rdfs.comment].append(\r\n  ...       {'value': u'A Comment set in RDF', 'type': u'literal'})\r\n  >>> ds[NS.rdfs.comment]\r\n  [{'type': u'literal', 'value': u'A Comment set in RDF'}]\r\n  >>> NS.rdfs.comment in ds\r\n  True\r\n  >>> for predicate in ds: print predicate\r\n  http://www.w3.org/2000/01/rdf-schema#comment\r\n\r\nTo save this we call the setContent method without any data. \r\nThis will serialise the RDF statements to RDFXML and perform the save action:\r\n   \r\n  >>> ds.setContent()\r\n  >>> print ds.getContent().read()\r\n  <rdf:RDF ...>\r\n    <rdf:Description rdf:about=\"info:fedora/foo:...\">\r\n      <rdfs:comment>A Comment set in RDF</rdfs:comment>\r\n    </rdf:Description>\r\n  </rdf:RDF>\r\n\r\nWe are not allowed to add statements using the `DC` namespace.\r\nThis will result in an error. I suppose this is because it should be set \r\nthrough the `DC` datastream.\r\n\r\n  >>> ds[NS.dc.title].append({'value': u'A title', 'type': 'literal'})\r\n  >>> ds.setContent()\r\n  Traceback (most recent call last):\r\n  ...\r\n  FedoraConnectionException: ... The RELS-EXT datastream has improper relationship assertion: dc:title.\r\n\r\nWe can also use RDF to create relations between objects. For example we can add\r\na relation using the Fedora isMemberOfCollection which can be used to group\r\nobjects into collections that are used in the OAIPMH feed.\r\n\r\n  >>> colpid = client.getNextPID(u'foo')\r\n  >>> collection = client.createObject(colpid, label=u'A test Collection')\r\n  >>> ds[NS.fedora.isMemberOfCollection].append(\r\n  ...  {'value': u'info:fedora/%s' % colpid, 'type':u'uri'})\r\n  >>> ds.setContent()\r\n  >>> print ds.getContent().read()\r\n  <rdf:RDF ...>\r\n    <rdf:Description rdf:about=\"info:fedora/foo:...\">\r\n      <fedora:isMemberOfCollection rdf:resource=\"info:fedora/foo:...\"></fedora:isMemberOfCollection>\r\n      <rdfs:comment>A Comment set in RDF</rdfs:comment>\r\n    </rdf:Description>\r\n  </rdf:RDF>\r\n\r\n  >>> print ds.predicates()\r\n  ['http://www.w3.org/2000/01/rdf-schema#comment', 'info:fedora/fedora-system:def/relations-external#isMemberOfCollection']\r\n\r\nNotice that the Fedora PID needs to be converted to an URI before it can be\r\nreferenced in RDF, this is done by prepending `info:fedora/` to the PID.\r\n\r\nService Definitions and Object Methods\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nBesides datastreams, a Fedora object can have methods registered to it through\r\nservice definitions. We don't provide direct access to the service definitions\r\nbut assume that all the methods have unique names.\r\n\r\n  >>> obj.methods()\r\n  ['viewObjectProfile', 'viewMethodIndex', 'viewItemIndex', 'viewDublinCore']\r\n\r\n  >>> print obj.call('viewDublinCore').read()\r\n  <html ...>\r\n  ...\r\n  <td ...>My Second Modified Datastream</td>\r\n  ...\r\n  </html>\r\n\r\nSearching Objects\r\n~~~~~~~~~~~~~~~~~\r\n\r\nFedora comes with 2 search functionalities: a fielded query search and a simple query search.\r\nThey both search data from the `DC` datastream and the Fedora object properties. \r\n\r\nThe fielded search query can search on the following fields:\r\n\r\n * cDate  \r\n * contributor     \r\n * coverage        \r\n * creator \r\n * date    \r\n * dcmDate \r\n * description     \r\n * format  \r\n * identifier      \r\n * label   \r\n * language        \r\n * mDate   \r\n * ownerId \r\n * pid     \r\n * publisher       \r\n * source  \r\n * state   \r\n * subject \r\n * title   \r\n * type    \r\n * rights\r\n\r\nFedora has a query syntax where you can enter one or more conditions, separated by space.  Objects matching all conditions will be returned.\r\n\r\nA condition is a field (choose from the field names above) followed by an operator, followed by a value.\r\n\r\nThe = operator will match if the field's entire value matches the value given.\r\nThe ~ operator will match on phrases within fields, and accepts the ? and * wildcards.\r\nThe <, >, <=, and >= operators can be used with numeric values, such as dates.\r\n\r\nExamples:\r\n\r\n  pid~demo:* description~fedora\r\n    Matches all demo objects with a description containing the word fedora.\r\n\r\n  cDate>=1976-03-04 creator~*n*\r\n    Matches objects created on or after March 4th, 1976 where at least one of the creators has an n in their name.\r\n\r\n  mDate>2002-10-2 mDate<2002-10-2T12:00:00\r\n    Matches objects modified sometime before noon (UTC) on October 2nd, 2002\r\n\r\nSo let's create 5 objects which we can use to search on:\r\n\r\n   >>> pids = client.getNextPID(u'searchtest', numPIDs=5)\r\n   >>> for pid in pids: client.createObject(pid, label=u'Search Test Object')\r\n   <fcrepo.object.FedoraObject object at ...>\r\n   <fcrepo.object.FedoraObject object at ...>\r\n   <fcrepo.object.FedoraObject object at ...>\r\n   <fcrepo.object.FedoraObject object at ...>\r\n   <fcrepo.object.FedoraObject object at ...>\r\n\r\nNow we'll search for these objects with a pid search, we also want the label\r\nreturned from the search.\r\n\r\n   >>> client.searchObjects(u'pid~searchtest:*', ['pid', 'label'])\r\n   <generator object searchObjects at ...>\r\n\r\nThe search returns a generator, by default it queries the server for the\r\nfirst 10 objects, but if you iterate through the resultset and come to the end\r\nthe next batch will automatically be added. \r\n\r\nTo illustrate this we will query with a batch size of 2:\r\n\r\n   >>> results = client.searchObjects(u'pid~searchtest:*', ['pid', 'label'],\r\n   ...                                maxResults=2)\r\n   >>> result_list = [r for r in results]\r\n   >>> len(result_list) >= 5\r\n   True\r\n   >>> result_list[0]['pid']\r\n   [u'searchtest:...']\r\n   >>> result_list[0]['label']\r\n   [u'Search Test Object']\r\n\r\nAs shown we actually get more results then the max of 2, but the client asks\r\nFedora for results in batches of 2 while we iterate through the results \r\ngenerator.\r\n\r\nWhen we want to search in all fields, we just have to drop the condition 'pid:',\r\nand specify 'terms=True'. The search is case-insensitive, and use * or ? as wildcard.\r\n\r\n    >>> client.searchObjects(u'searchtest*', ['pid', 'label'], terms=True)\r\n    <generator object searchObjects at ...>\r\n\r\n\r\nRDF Index Search\r\n~~~~~~~~~~~~~~~~\r\n\r\nBesides searching the DC datastream in the relational database, \r\nit's also possible to query the RELS-EXT datastream through the triplestore \r\nin the SPARQL language.\r\n\r\nLet's find all objects that are part of the collection we created above in the\r\nRELS-EXT datastream example\r\n\r\n   >>> sparql = '''prefix fedora: <%s>\r\n   ... select ?s where {?s fedora:isMemberOfCollection <info:fedora/%s>.}\r\n   ... ''' % (NS.fedora, colpid)\r\n   >>> result = client.searchTriples(sparql)\r\n   >>> result\r\n   <generator object searchTriples  at ...>\r\n   >>> result = list(result)\r\n   >>> len(result)\r\n   1\r\n   >>> result[0]['s']['value']\r\n   u'info:fedora/foo:...'\r\n\r\nOther output formats and query languages can be specified as parameters, by\r\ndefault only SPARQL is supported.\r\n\r\nThe searchTriples method also has a `flush` argument. \r\nIf you change a RELS-EXT datastream in Fedora, the triplestore is actually not\r\nupdated! You have to set this flush param when you're searching to `true` to\r\nmake sure the triplestore is updated. By default Fedora sets the flush \r\nparameter to `false` which is understandable for performance reasons but \r\ncan be very confusing.\r\nThis library sets the param to `true` by default, which is not always very \r\nefficient, but you are sure the triplestore is up to date.\r\n\r\n\r\nFCRepo Changes\r\n==============\r\n\r\n1.1 (2010-11-04)\r\n----------------\r\n\r\n   - Added simple searching (via searchObject), courtesy of Steen Manniche\r\n   - Removed buildout versions from buildout.cfg\r\n   - Fixed bug when decoding empty text\r\n   - Updated readme\r\n\r\n\r\n1.0 (2010-09-30)\r\n----------------\r\n \r\n   - Added support for Fedora3.4\r\n   - Changed contact info, switched from Subversion to Mercurial\r\n\r\nChanges\r\n~~~~~~~\r\n   - Fixed bug triggered when retrieving DC datastream values that\r\n     contain no text\r\n\r\nfcrepo 1.0b2 (2010-05-17)\r\n-------------------------\r\n\r\nChanges\r\n~~~~~~~\r\n   - Full Windows compatibility through patches from Owen Nelson\r\n   - Bugfix in datastreams handling\r\n\r\nfcrepo 1.0b1 (2010-05-03)\r\n-------------------------\r\n\r\nChanges\r\n~~~~~~~\r\n  - Initial Code release with working API-A, API-M\r\n    search and index search.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://infrae.com/download/fedoracommons/fcrepo", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "fcrepo", "package_url": "https://pypi.org/project/fcrepo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fcrepo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://infrae.com/download/fedoracommons/fcrepo"}, "release_url": "https://pypi.org/project/fcrepo/1.1/", "requires_dist": null, "requires_python": null, "summary": "API implementation for the Fedora Commons Repository platform", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"fcrepo-a-client-for-the-fedora-commons-repository\">\n<h2>FCRepo, a client for the Fedora Commons Repository</h2>\n<div id=\"info\">\n<h3>Info</h3>\n<p>This package provides access to the <a href=\"http://www.fedora-commons.org/\" rel=\"nofollow\">Fedora Commons Repository</a>.</p>\n<p>From the Fedora Commons Website:</p>\n<blockquote>\nFedora (Flexible Extensible Digital Object Repository Architecture) was originally developed by researchers at Cornell University as an architecture for storing, managing, and accessing digital content in the form of digital objects inspired by the <a href=\"http://www.cnri.reston.va.us/k-w.html\" rel=\"nofollow\">Kahn and Wilensky</a> Framework.  Fedora defines a set of abstractions for expressing digital objects, asserting relationships among digital objects, and linking \u201cbehaviors\u201d (i.e., services) to digital objects. The Fedora Repository Project (i.e., Fedora) implements the Fedora abstractions in a robust open source software system.</blockquote>\n<p>This package uses WADL, <a href=\"http://www.w3.org/Submission/wadl/\" rel=\"nofollow\">Web Application Description Language</a> to parse the\nWADL file that comes with Fedora so it offers support for the\ncomplete REST API.\nOn top of that a more highlevel abstraction is written, which will be\ndemonstrated in this <a href=\"http://en.wikipedia.org/wiki/Doctest\" rel=\"nofollow\">doctest</a>.\nThis package has been written for FedoraCommons 3.3 and 3.4, it has not been\ntested with older versions. REST API documentation can be found in the\n<a href=\"http://www.fedora-commons.org/confluence/display/FCR30/REST+API\" rel=\"nofollow\">Fedora wiki</a>.</p>\n<p>This package can be installed using buildout which will also fetch the\nFedora installer, and install it locally for testing purposes.\nUse the following steps to install and run this doctest:</p>\n<pre>python2.6 bootstrap.py\n./bin/buildout\n./bin/install_fedora\n./bin/start_fedora\n./bin/test\n</pre>\n</div>\n<div id=\"using-the-fcrepo-package\">\n<h3>Using the fcrepo package</h3>\n<div id=\"connecting-to-the-repository\">\n<h4>Connecting to the Repository</h4>\n<p>To connect to the running Fedora, we first need a connection. The connection\ncode was largely copied from <a href=\"http://bitbucket.org/epoz/duraspace\" rel=\"nofollow\">Etienne Posthumus (\u201cEpoz\u201d) duraspace module</a>.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from fcrepo.connection import Connection\n&gt;&gt;&gt; connection = Connection('http://localhost:8080/fedora',\n...                         username='fedoraAdmin',\n...                         password='fedoraAdmin')\n</pre>\n</blockquote>\n<p>Now that we have a connection, we can create a FedoraClient:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from fcrepo.client import FedoraClient\n&gt;&gt;&gt; client = FedoraClient(connection)\n</pre>\n</blockquote>\n</div>\n<div id=\"pids\">\n<h4>PIDs</h4>\n<p>A Fedora object needs a unique PID to function. The PID consists of a\nnamespace string, then a semicolon and then a string identifier.\nYou can create your own PIDs using a random UUID, but you can also use\nthe nextPID feature of Fedora which returns an ascending number.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; pid = client.getNextPID(u'foo')\n&gt;&gt;&gt; ns, num = pid.split(':')\n&gt;&gt;&gt; ns == 'foo' and num.isdigit()\nTrue\n</pre>\n</blockquote>\n<p>We can also get multiple PIDs at once</p>\n<blockquote>\n<pre>&gt;&gt;&gt; pids = client.getNextPID(u'foo', numPIDs=10)\n&gt;&gt;&gt; len(pids)\n10\n</pre>\n</blockquote>\n<p>This method returns unicode strings or a list of unicode strings if\nmultiple PIDs are requested.</p>\n<p>The client abstraction provides wrappers around the \u2018low-level\u2019\nAPI code which is generated from the WADL file.\nHere\u2019s the same call through the WADL API:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print client.api.getNextPID().submit(namespace=u'foo', format=u'text/xml').read()\n&lt;?xml  ...?&gt;\n&lt;pidList ...&gt;\n  &lt;pid&gt;...&lt;/pid&gt;\n&lt;/pidList&gt;\n</pre>\n</blockquote>\n<p>So the client methods call the methods from the WADL API,\nparse the resulting xml and uses sensible default arguments.</p>\n<p>This is how most client method calls work.\nNormally you would never need to access the WADL API directly,\nso let\u2019s move on.</p>\n</div>\n<div id=\"creating-objects\">\n<h4>Creating Objects</h4>\n<p>Now that we can get PIDs we can use them and create a new object:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; pid = client.getNextPID(u'foo')\n&gt;&gt;&gt; obj = client.createObject(pid, label=u'My First Test Object')\n</pre>\n</blockquote>\n<p>You can\u2019t create an object with the same PID twice.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj = client.createObject(pid, label=u'Second try?')\nTraceback (most recent call last):\n...\nFedoraConnectionException: ... The PID 'foo:...' already exists in the registry; the object can't be re-created.\n</pre>\n</blockquote>\n</div>\n<div id=\"fetching-objects\">\n<h4>Fetching Objects</h4>\n<p>Off course it\u2019s also possible to retrieve an existing object with the client:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj = client.getObject(pid)\n&gt;&gt;&gt; print obj.label\nMy First Test Object\n</pre>\n</blockquote>\n<p>You\u2019ll get an error if the object does not exist:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj = client.getObject(u'foo:bar')\nTraceback (most recent call last):\n...\nFedoraConnectionException: ...HTTP code=404, Reason=Not Found...\n</pre>\n</blockquote>\n</div>\n<div id=\"deleting-objects\">\n<h4>Deleting Objects</h4>\n<p>Deleting objects can be done by calling the delete method on an object,\nor by passing the pid to the deleteObject method on the client.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; pid = client.getNextPID(u'foo')\n&gt;&gt;&gt; o = client.createObject(pid, label=u'About to be deleted')\n&gt;&gt;&gt; o.delete(logMessage=u'Bye Bye')\n&gt;&gt;&gt; o = client.getObject(pid)\nTraceback (most recent call last):\n...\nFedoraConnectionException: ...HTTP code=404, Reason=Not Found...\n</pre>\n</blockquote>\n<p>Note that in most cases you don\u2019t want to delete an object. It\u2019s better to\nset the state of the object to <cite>deleted</cite>. More about this in the next section.</p>\n</div>\n<div id=\"object-properties\">\n<h4>Object Properties</h4>\n<p>In the previous examples we retrieved a Fedora object.\nThese objects have a number of properties that can be get and set:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.label\nu'My First Test Object'\n&gt;&gt;&gt; date = obj.lastModifiedDate\n&gt;&gt;&gt; obj.label = u'Changed it!'\n</pre>\n</blockquote>\n<p>The last line modified the label property on the Fedora server,\nthe lastmodified date should now have been updated:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.lastModifiedDate &gt; date\nTrue\n&gt;&gt;&gt; obj.label\nu'Changed it!'\n</pre>\n</blockquote>\n<p>Setting properties can also be used to change the state of a FedoraObject\nto inactive or deleted. The following strings can be used:</p>\n<blockquote>\n<ul>\n<li><cite>A</cite> means active</li>\n<li><cite>I</cite> means inactive</li>\n<li><cite>D</cite> means deleted</li>\n</ul>\n<pre>&gt;&gt;&gt; obj.state = u'I'\n</pre>\n</blockquote>\n<p>Let\u2019s try a non supported state:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.state = u'Z'\nTraceback (most recent call last):\n...\nFedoraConnectionException: ... The object state of \"Z\" is invalid. The allowed values for state are:  A (active), D (deleted), and I (inactive).\n</pre>\n</blockquote>\n<p>Setting the modification or creation date directly results in an error, they can not be set.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.lastModifiedDate = date\nTraceback (most recent call last):\n...\nAttributeError: can't set attribute\n</pre>\n</blockquote>\n<p>An ownerId can also be configured using the properties:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.ownerId = u'me'\n&gt;&gt;&gt; print obj.ownerId\nme\n</pre>\n</blockquote>\n</div>\n<div id=\"object-datastreams\">\n<h4>Object DataStreams</h4>\n<p>A Fedora object is basicly a container of Datastreams. You can iterate through\nthe object to find the datastream ids or call the datastreams method:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print obj.datastreams()\n['DC']\n&gt;&gt;&gt; for id in obj: print id\nDC\n&gt;&gt;&gt; 'DC' in obj\nTrue\n</pre>\n</blockquote>\n<p>To actually get a datastream we can access it as if it\u2019s a dictionary:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds = obj['DC']\n&gt;&gt;&gt; ds\n&lt;fcrepo.datastream.DCDatastream object at ...&gt;\n&gt;&gt;&gt; obj['FOO']\nTraceback (most recent call last):\n...\nFedoraConnectionException: ...No datastream could be found. Either there is no datastream for the digital object \"...\" with datastream ID of \"FOO\"  OR  there are no datastreams that match the specified date/time value of \"null\".\n</pre>\n</blockquote>\n</div>\n<div id=\"datastream-properties\">\n<h4>Datastream Properties</h4>\n<p>A datastream has many properties, including label, state and createdDate, just\nlike the Fedora object:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print ds.label\nDublin Core Record for this object\n</pre>\n<pre>&gt;&gt;&gt; print ds.state\nA\n</pre>\n</blockquote>\n<p>There are different types of datastreams, this one is of type <cite>X</cite>, which means\nthe content is stored inline in the <a href=\"http://fedora-commons.org/confluence/display/FCR30/Introduction+to+FOXML\" rel=\"nofollow\">FOXML file</a> . FOXML is the internal\nstorage format of Fedora.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print ds.controlGroup\nX\n</pre>\n</blockquote>\n<p>A datastream can be versionable, this can be turned on or off.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds.versionable\nTrue\n</pre>\n</blockquote>\n<p>The datastream also has a location, which is composed of the object pid,\nthe datastream id, and the version number</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds.location\nu'foo:...+DC+DC1.0'\n</pre>\n</blockquote>\n<p>Let\u2019s change the label, and see what happens:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds.label = u'Datastream Metadata'\n&gt;&gt;&gt; ds.location\nu'foo:...+DC+DC.1'\n</pre>\n<pre>&gt;&gt;&gt; ds.label = u'Datastream DC Metadata'\n&gt;&gt;&gt; ds.location\nu'foo:...+DC+DC.2'\n</pre>\n</blockquote>\n<p>The location ID changes with every version, and old versions of the datastream\nare still available. The fcrepo client code contains no methods to retrieve\nold versions of datastreams or view the audit trail of objects.\nThe methods that implement this are available in the WADL API though.</p>\n<p>Fedora can create checksums of the content stored in a datastream,\nby default checksums are disabled, if we set the checksumType property\nto MD5, Fedora will generate the checksum for us.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds.checksumType\nu'DISABLED'\n&gt;&gt;&gt; ds.checksumType = u'MD5'\n&gt;&gt;&gt; ds.checksum # the checksum always changes between tests\nu'...'\n</pre>\n</blockquote>\n<p>There are some additional properties, not all of them can be set.\nHave a look at the <a href=\"http://www.fedora-commons.org/confluence/display/FCR30/REST+API\" rel=\"nofollow\">REST API Documentation</a> for a full list</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds.mimeType\nu'text/xml'\n&gt;&gt;&gt; ds.size &gt; 0\nTrue\n&gt;&gt;&gt; ds.formatURI\nu'http://www.openarchives.org/OAI/2.0/oai_dc/'\n</pre>\n</blockquote>\n</div>\n<div id=\"getting-and-setting-content-1\">\n<h4>Getting and Setting Content - 1</h4>\n<p>We can also get and set the content of the datastream:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; xml = ds.getContent().read()\n&gt;&gt;&gt; print xml\n&lt;oai_dc:dc ...&gt;\n  &lt;dc:title&gt;My First Test Object&lt;/dc:title&gt;\n  &lt;dc:identifier&gt;foo:...&lt;/dc:identifier&gt;\n&lt;/oai_dc:dc&gt;\n</pre>\n<pre>&gt;&gt;&gt; xml = xml.replace('My First Test Object', 'My First Modified Datastream')\n&gt;&gt;&gt; ds.setContent(xml)\n</pre>\n</blockquote>\n</div>\n<div id=\"getting-and-setting-content-2\">\n<h4>Getting and Setting Content - 2</h4>\n<p>We can also get and set the content directly,\nas if it is a dictionarie of dictionaries</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print obj['DC']['title']\n[u'My First Modified Datastream']\n&gt;&gt;&gt; obj['DC']['title'] = [u'My Second Modified Datastream']\n&gt;&gt;&gt; print obj['DC']['title']\n[u'My Second Modified Datastream']\n</pre>\n</blockquote>\n</div>\n<div id=\"special-datastream-dc\">\n<h4>Special Datastream: DC</h4>\n<p>This <cite>DC</cite> datastream that is always available is actually a special kind of\ndatastream. The Dublin Core properties from this XML stream are stored in a\nrelational database which can be searched. The values are also used in the\nOAIPMH feed. Fedora uses the legacy <cite>/elements/1.1/</cite> namespace which contains\nthe following terms:</p>\n<blockquote>\n<ul>\n<li>contributor</li>\n<li>coverage</li>\n<li>creator</li>\n<li>date</li>\n<li>description</li>\n<li>format</li>\n<li>identifier</li>\n<li>language</li>\n<li>publisher</li>\n<li>relation</li>\n<li>rights</li>\n<li>source</li>\n<li>subject</li>\n<li>title</li>\n<li>type</li>\n</ul>\n</blockquote>\n<p>View the <a href=\"http://dublincore.org\" rel=\"nofollow\">Dublin Core website</a> for a <a href=\"http://dublincore.org/documents/dcmi-terms/#H3\" rel=\"nofollow\">description of these properties</a>.</p>\n<p>Since editing the Dublin Core XML data by hand gets a bit cumbersome,\nthe DC datastream allows access to the DC properties as if the datastream\nis a dictionary:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds['title']\n[u'My Second Modified Datastream']\n</pre>\n</blockquote>\n<p>This can also be used to set values:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds['subject'] = [u'fcrepo', u'unittest']\n&gt;&gt;&gt; ds['description'].append(u'A test object from the fcrepo unittest')\n</pre>\n<pre>&gt;&gt;&gt; for prop in sorted(ds): print prop\ndescription\nidentifier\nsubject\ntitle\n&gt;&gt;&gt; 'subject' in ds\nTrue\n</pre>\n</blockquote>\n<p>To save this, we call the setContent method again, but this time with no\narguments. This will make the code use the values from the dictionary to\ngenerate the XML string for you</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds.setContent()\n&gt;&gt;&gt; print ds.getContent().read()\n&lt;oai_dc:dc ...&gt;\n  ...\n  &lt;dc:description&gt;A test object from the fcrepo unittest&lt;/dc:description&gt;\n  ...\n&lt;/oai_dc:dc&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"inline-xml-datastreams\">\n<h4>Inline XML Datastreams</h4>\n<p>Let\u2019s try adding some datastreams, for example, we want to store some XML data:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.addDataStream('FOOXML', '&lt;foo/&gt;',\n...                   label=u'Foo XML',\n...                   logMessage=u'Added an XML Datastream')\n&gt;&gt;&gt; obj.datastreams()\n['DC', 'FOOXML']\n&gt;&gt;&gt; print obj['FOOXML'].getContent().read()\n&lt;foo&gt;&lt;/foo&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"managed-content-datastreams\">\n<h4>Managed Content Datastreams</h4>\n<p>We can also add Managed Content, this will be stored and managed by fedora,\nbut it\u2019s not inline xml. The data is stored in a seperate file on\nthe harddrive. We do this by setting the controlGroup param to <cite>M</cite></p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.addDataStream('TEXT', 'Hello!', label=u'Some Text',\n...                   mimeType=u'text/plain', controlGroup=u'M',\n...                   logMessage=u'Added some managed text')\n&gt;&gt;&gt; obj.datastreams()\n['DC', 'FOOXML', 'TEXT']\n&gt;&gt;&gt; ds = obj['TEXT']\n&gt;&gt;&gt; ds.size == 0 or ds.size == 6 # this does not work in Fedora 3.3\nTrue\n&gt;&gt;&gt; ds.getContent().read()\n'Hello!'\n</pre>\n</blockquote>\n<p>This is perfectly fine for small files, however when you don\u2019t want to hold\nthe whole file in memory you can also supply a file stream. Let\u2019s make a 3MB\nfile:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import tempfile, os\n&gt;&gt;&gt; fp = tempfile.NamedTemporaryFile(mode='w+b', delete=False)\n&gt;&gt;&gt; filename = fp.name\n&gt;&gt;&gt; fp.write('foo' * (1024**2))\n&gt;&gt;&gt; fp.close()\n&gt;&gt;&gt; os.path.getsize(filename)\n3145728...\n</pre>\n</blockquote>\n<p>Now we\u2019ll open the file and stream it to Fedora. We then read the whole thing\nin memory and see if it\u2019s the same size:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fp = open(filename, 'r')\n&gt;&gt;&gt; ds.setContent(fp)\n&gt;&gt;&gt; fp.close()\n&gt;&gt;&gt; content = ds.getContent().read()\n&gt;&gt;&gt; len(content)\n3145728...\n&gt;&gt;&gt; os.remove(filename)\n</pre>\n</blockquote>\n</div>\n<div id=\"externally-referenced-datastreams\">\n<h4>Externally Referenced Datastreams</h4>\n<p>For large files it might not be convenient to store them inside Fedora.\nIn this case the file can be hosted externally, and we store a datastream\nof controlGroup type <cite>E</cite> (Externally referenced)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.addDataStream('URL', controlGroup=u'E',\n...                   location=u'http://pypi.python.org/fcrepo')\n&gt;&gt;&gt; obj.datastreams()\n['DC', 'FOOXML', 'TEXT', 'URL']\n</pre>\n</blockquote>\n<p>This datastream does not have any content, so trying to read the\ncontent will result in an error</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds = obj['URL']\n&gt;&gt;&gt; ds.getContent()\nTraceback (most recent call last):\n...\nFedoraConnectionException:...\"Error getting http://pypi.python.org/fcrepo\"  .\n</pre>\n</blockquote>\n<p>We can get the location though:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds.location\nu'http://pypi.python.org/fcrepo'\n</pre>\n</blockquote>\n<p>The last of the datastream types is an externally referenced stream that\nredirects. This datastream has controlGroup <cite>R</cite> (Redirect Referenced)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.addDataStream('HOMEPAGE', controlGroup=u'R',\n...                   location=u'http://pypi.python.org/fcrepo')\n&gt;&gt;&gt; obj.datastreams()\n['DC', 'FOOXML', 'TEXT', 'URL', 'HOMEPAGE']\n</pre>\n</blockquote>\n<p>This datastream works the same as an externally referenced stream.</p>\n</div>\n<div id=\"deleting-datastreams\">\n<h4>Deleting Datastreams</h4>\n<p>A datastream can be deleted by using the python del keyword on the object,\nor by calling the delete method on a datastream.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; len(obj.datastreams())\n5\n&gt;&gt;&gt; ds = obj['HOMEPAGE']\n&gt;&gt;&gt; ds.delete(logMessage=u'Removed Homepage DS')\n&gt;&gt;&gt; len(obj.datastreams())\n4\n&gt;&gt;&gt; del obj['URL']\n&gt;&gt;&gt; len(obj.datastreams())\n3\n</pre>\n</blockquote>\n</div>\n<div id=\"another-special-datastream-rels-ext\">\n<h4>Another Special Datastream: RELS-EXT</h4>\n<p>Besides the special <cite>DC</cite> datastream, there is another special datastream\ncalled <cite>RELS-EXT</cite>.\nThis datastream should contain <cite>flat</cite> RDFXML data which will be indexed in a\ntriplestore. The <cite>RELS-EXT</cite> datastream has some additional methods to assist in\nworking with the RDF data.</p>\n<p>To create the RELS-EXT stream we don\u2019t need to supply an RDFXML file, it will\ncreate an empty one if no data is send.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.addDataStream('RELS-EXT')\n&gt;&gt;&gt; ds = obj['RELS-EXT']\n</pre>\n</blockquote>\n<p>Now we can add some RDF data. Each predicate contains a list of values, each\nvalue is a dictionary with a value and type key, and optionally a lang and\ndatatype key. This is identical to the <a href=\"http://n2.talis.com/wiki/RDF_JSON_Specification\" rel=\"nofollow\">RDF+JSON format</a>.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from fcrepo.utils import NS\n&gt;&gt;&gt; ds[NS.rdfs.comment].append(\n...       {'value': u'A Comment set in RDF', 'type': u'literal'})\n&gt;&gt;&gt; ds[NS.rdfs.comment]\n[{'type': u'literal', 'value': u'A Comment set in RDF'}]\n&gt;&gt;&gt; NS.rdfs.comment in ds\nTrue\n&gt;&gt;&gt; for predicate in ds: print predicate\nhttp://www.w3.org/2000/01/rdf-schema#comment\n</pre>\n</blockquote>\n<p>To save this we call the setContent method without any data.\nThis will serialise the RDF statements to RDFXML and perform the save action:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds.setContent()\n&gt;&gt;&gt; print ds.getContent().read()\n&lt;rdf:RDF ...&gt;\n  &lt;rdf:Description rdf:about=\"info:fedora/foo:...\"&gt;\n    &lt;rdfs:comment&gt;A Comment set in RDF&lt;/rdfs:comment&gt;\n  &lt;/rdf:Description&gt;\n&lt;/rdf:RDF&gt;\n</pre>\n</blockquote>\n<p>We are not allowed to add statements using the <cite>DC</cite> namespace.\nThis will result in an error. I suppose this is because it should be set\nthrough the <cite>DC</cite> datastream.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ds[NS.dc.title].append({'value': u'A title', 'type': 'literal'})\n&gt;&gt;&gt; ds.setContent()\nTraceback (most recent call last):\n...\nFedoraConnectionException: ... The RELS-EXT datastream has improper relationship assertion: dc:title.\n</pre>\n</blockquote>\n<p>We can also use RDF to create relations between objects. For example we can add\na relation using the Fedora isMemberOfCollection which can be used to group\nobjects into collections that are used in the OAIPMH feed.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; colpid = client.getNextPID(u'foo')\n&gt;&gt;&gt; collection = client.createObject(colpid, label=u'A test Collection')\n&gt;&gt;&gt; ds[NS.fedora.isMemberOfCollection].append(\n...  {'value': u'info:fedora/%s' % colpid, 'type':u'uri'})\n&gt;&gt;&gt; ds.setContent()\n&gt;&gt;&gt; print ds.getContent().read()\n&lt;rdf:RDF ...&gt;\n  &lt;rdf:Description rdf:about=\"info:fedora/foo:...\"&gt;\n    &lt;fedora:isMemberOfCollection rdf:resource=\"info:fedora/foo:...\"&gt;&lt;/fedora:isMemberOfCollection&gt;\n    &lt;rdfs:comment&gt;A Comment set in RDF&lt;/rdfs:comment&gt;\n  &lt;/rdf:Description&gt;\n&lt;/rdf:RDF&gt;\n</pre>\n<pre>&gt;&gt;&gt; print ds.predicates()\n['http://www.w3.org/2000/01/rdf-schema#comment', 'info:fedora/fedora-system:def/relations-external#isMemberOfCollection']\n</pre>\n</blockquote>\n<p>Notice that the Fedora PID needs to be converted to an URI before it can be\nreferenced in RDF, this is done by prepending <cite>info:fedora/</cite> to the PID.</p>\n</div>\n<div id=\"service-definitions-and-object-methods\">\n<h4>Service Definitions and Object Methods</h4>\n<p>Besides datastreams, a Fedora object can have methods registered to it through\nservice definitions. We don\u2019t provide direct access to the service definitions\nbut assume that all the methods have unique names.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj.methods()\n['viewObjectProfile', 'viewMethodIndex', 'viewItemIndex', 'viewDublinCore']\n</pre>\n<pre>&gt;&gt;&gt; print obj.call('viewDublinCore').read()\n&lt;html ...&gt;\n...\n&lt;td ...&gt;My Second Modified Datastream&lt;/td&gt;\n...\n&lt;/html&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"searching-objects\">\n<h4>Searching Objects</h4>\n<p>Fedora comes with 2 search functionalities: a fielded query search and a simple query search.\nThey both search data from the <cite>DC</cite> datastream and the Fedora object properties.</p>\n<p>The fielded search query can search on the following fields:</p>\n<blockquote>\n<ul>\n<li>cDate</li>\n<li>contributor</li>\n<li>coverage</li>\n<li>creator</li>\n<li>date</li>\n<li>dcmDate</li>\n<li>description</li>\n<li>format</li>\n<li>identifier</li>\n<li>label</li>\n<li>language</li>\n<li>mDate</li>\n<li>ownerId</li>\n<li>pid</li>\n<li>publisher</li>\n<li>source</li>\n<li>state</li>\n<li>subject</li>\n<li>title</li>\n<li>type</li>\n<li>rights</li>\n</ul>\n</blockquote>\n<p>Fedora has a query syntax where you can enter one or more conditions, separated by space.  Objects matching all conditions will be returned.</p>\n<p>A condition is a field (choose from the field names above) followed by an operator, followed by a value.</p>\n<p>The = operator will match if the field\u2019s entire value matches the value given.\nThe ~ operator will match on phrases within fields, and accepts the ? and * wildcards.\nThe &lt;, &gt;, &lt;=, and &gt;= operators can be used with numeric values, such as dates.</p>\n<p>Examples:</p>\n<blockquote>\n<dl>\n<dt>pid~demo:* description~fedora</dt>\n<dd>Matches all demo objects with a description containing the word fedora.</dd>\n<dt>cDate&gt;=1976-03-04 creator~*n*</dt>\n<dd>Matches objects created on or after March 4th, 1976 where at least one of the creators has an n in their name.</dd>\n<dt>mDate&gt;2002-10-2 mDate&lt;2002-10-2T12:00:00</dt>\n<dd>Matches objects modified sometime before noon (UTC) on October 2nd, 2002</dd>\n</dl>\n</blockquote>\n<p>So let\u2019s create 5 objects which we can use to search on:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; pids = client.getNextPID(u'searchtest', numPIDs=5)\n&gt;&gt;&gt; for pid in pids: client.createObject(pid, label=u'Search Test Object')\n&lt;fcrepo.object.FedoraObject object at ...&gt;\n&lt;fcrepo.object.FedoraObject object at ...&gt;\n&lt;fcrepo.object.FedoraObject object at ...&gt;\n&lt;fcrepo.object.FedoraObject object at ...&gt;\n&lt;fcrepo.object.FedoraObject object at ...&gt;\n</pre>\n</blockquote>\n<p>Now we\u2019ll search for these objects with a pid search, we also want the label\nreturned from the search.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; client.searchObjects(u'pid~searchtest:*', ['pid', 'label'])\n&lt;generator object searchObjects at ...&gt;\n</pre>\n</blockquote>\n<p>The search returns a generator, by default it queries the server for the\nfirst 10 objects, but if you iterate through the resultset and come to the end\nthe next batch will automatically be added.</p>\n<p>To illustrate this we will query with a batch size of 2:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; results = client.searchObjects(u'pid~searchtest:*', ['pid', 'label'],\n...                                maxResults=2)\n&gt;&gt;&gt; result_list = [r for r in results]\n&gt;&gt;&gt; len(result_list) &gt;= 5\nTrue\n&gt;&gt;&gt; result_list[0]['pid']\n[u'searchtest:...']\n&gt;&gt;&gt; result_list[0]['label']\n[u'Search Test Object']\n</pre>\n</blockquote>\n<p>As shown we actually get more results then the max of 2, but the client asks\nFedora for results in batches of 2 while we iterate through the results\ngenerator.</p>\n<p>When we want to search in all fields, we just have to drop the condition \u2018pid:\u2019,\nand specify \u2018terms=True\u2019. The search is case-insensitive, and use * or ? as wildcard.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; client.searchObjects(u'searchtest*', ['pid', 'label'], terms=True)\n&lt;generator object searchObjects at ...&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"rdf-index-search\">\n<h4>RDF Index Search</h4>\n<p>Besides searching the DC datastream in the relational database,\nit\u2019s also possible to query the RELS-EXT datastream through the triplestore\nin the SPARQL language.</p>\n<p>Let\u2019s find all objects that are part of the collection we created above in the\nRELS-EXT datastream example</p>\n<blockquote>\n<pre>&gt;&gt;&gt; sparql = '''prefix fedora: &lt;%s&gt;\n... select ?s where {?s fedora:isMemberOfCollection &lt;info:fedora/%s&gt;.}\n... ''' % (NS.fedora, colpid)\n&gt;&gt;&gt; result = client.searchTriples(sparql)\n&gt;&gt;&gt; result\n&lt;generator object searchTriples  at ...&gt;\n&gt;&gt;&gt; result = list(result)\n&gt;&gt;&gt; len(result)\n1\n&gt;&gt;&gt; result[0]['s']['value']\nu'info:fedora/foo:...'\n</pre>\n</blockquote>\n<p>Other output formats and query languages can be specified as parameters, by\ndefault only SPARQL is supported.</p>\n<p>The searchTriples method also has a <cite>flush</cite> argument.\nIf you change a RELS-EXT datastream in Fedora, the triplestore is actually not\nupdated! You have to set this flush param when you\u2019re searching to <cite>true</cite> to\nmake sure the triplestore is updated. By default Fedora sets the flush\nparameter to <cite>false</cite> which is understandable for performance reasons but\ncan be very confusing.\nThis library sets the param to <cite>true</cite> by default, which is not always very\nefficient, but you are sure the triplestore is up to date.</p>\n</div>\n</div>\n</div>\n<div id=\"fcrepo-changes\">\n<h2>FCRepo Changes</h2>\n<div id=\"id1\">\n<h3>1.1 (2010-11-04)</h3>\n<blockquote>\n<ul>\n<li>Added simple searching (via searchObject), courtesy of Steen Manniche</li>\n<li>Removed buildout versions from buildout.cfg</li>\n<li>Fixed bug when decoding empty text</li>\n<li>Updated readme</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h3>1.0 (2010-09-30)</h3>\n<blockquote>\n<ul>\n<li>Added support for Fedora3.4</li>\n<li>Changed contact info, switched from Subversion to Mercurial</li>\n</ul>\n</blockquote>\n<div id=\"changes\">\n<h4>Changes</h4>\n<blockquote>\n<ul>\n<li>Fixed bug triggered when retrieving DC datastream values that\ncontain no text</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"fcrepo-1-0b2-2010-05-17\">\n<h3>fcrepo 1.0b2 (2010-05-17)</h3>\n<h3 id=\"id3\"><span class=\"section-subtitle\">Changes</span></h3>\n<blockquote>\n<ul>\n<li>Full Windows compatibility through patches from Owen Nelson</li>\n<li>Bugfix in datastreams handling</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"fcrepo-1-0b1-2010-05-03\">\n<h3>fcrepo 1.0b1 (2010-05-03)</h3>\n<h3 id=\"id4\"><span class=\"section-subtitle\">Changes</span></h3>\n<blockquote>\n<ul>\n<li>Initial Code release with working API-A, API-M\nsearch and index search.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 220825, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5b20e12677d0305afe5daae03710e28e", "sha256": "532268a5c45d7625655854266400047298774f614e8d002bdbb9bb5364356318"}, "downloads": -1, "filename": "fcrepo-1.0.tar.gz", "has_sig": false, "md5_digest": "5b20e12677d0305afe5daae03710e28e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26192, "upload_time": "2010-09-30T11:12:18", "upload_time_iso_8601": "2010-09-30T11:12:18.530809Z", "url": "https://files.pythonhosted.org/packages/ff/14/08385b9805f88c57d2567966fc82090c0a98f802e64b1cb577ab6c0dbc49/fcrepo-1.0.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "196ad5465ec0d709cdb29d64adafd130", "sha256": "ff05bdbf514669b26998e203b7e7d40004879f264fc4266b3e92c2df094f0039"}, "downloads": -1, "filename": "fcrepo-1.0b1.tar.gz", "has_sig": false, "md5_digest": "196ad5465ec0d709cdb29d64adafd130", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25106, "upload_time": "2010-05-03T14:46:47", "upload_time_iso_8601": "2010-05-03T14:46:47.257501Z", "url": "https://files.pythonhosted.org/packages/c0/6f/ed7e87fe45ec25f9cc8ff0deacd1f66df5d7822944a13be1a6a5238bd766/fcrepo-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "655f1b404c7cf6a2982108e67fa95c31", "sha256": "2e7a010e902ee5263f6f4b6a4172344f1cefe26547ad2b3cdd924c600a5c5b3f"}, "downloads": -1, "filename": "fcrepo-1.0b2.tar.gz", "has_sig": false, "md5_digest": "655f1b404c7cf6a2982108e67fa95c31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25074, "upload_time": "2010-05-17T16:07:43", "upload_time_iso_8601": "2010-05-17T16:07:43.948372Z", "url": "https://files.pythonhosted.org/packages/8f/bf/a18f894d0a94a1e873dd5b5ed4620bb49955fea056517f2fef4950c87fbf/fcrepo-1.0b2.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "61bafa0ca88316a7e87de5be82c7688a", "sha256": "87bb2d30d8effc281f64054a1269431c96f57477be0c0eff774a31cc27beb82d"}, "downloads": -1, "filename": "fcrepo-1.1.tar.gz", "has_sig": false, "md5_digest": "61bafa0ca88316a7e87de5be82c7688a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36651, "upload_time": "2010-11-04T17:02:22", "upload_time_iso_8601": "2010-11-04T17:02:22.138835Z", "url": "https://files.pythonhosted.org/packages/81/58/a9933d6d93b5f78f6715371b94caca2d63a055600cc6cc1d0b831b62a2fd/fcrepo-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61bafa0ca88316a7e87de5be82c7688a", "sha256": "87bb2d30d8effc281f64054a1269431c96f57477be0c0eff774a31cc27beb82d"}, "downloads": -1, "filename": "fcrepo-1.1.tar.gz", "has_sig": false, "md5_digest": "61bafa0ca88316a7e87de5be82c7688a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36651, "upload_time": "2010-11-04T17:02:22", "upload_time_iso_8601": "2010-11-04T17:02:22.138835Z", "url": "https://files.pythonhosted.org/packages/81/58/a9933d6d93b5f78f6715371b94caca2d63a055600cc6cc1d0b831b62a2fd/fcrepo-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:11 2020"}