{"info": {"author": "Ken Kundert", "author_email": "psf_utils@nurdletech.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Utilities"], "description": "PSF Utilities - Read Spectre Data Files\n=======================================\n\n.. image:: https://img.shields.io/pypi/v/psf_utils.svg\n    :target: https://pypi.python.org/pypi/psf_utils\n\n.. image:: https://img.shields.io/pypi/pyversions/psf_utils.svg\n    :target: https://pypi.python.org/pypi/psf_utils/\n\n:Author: Ken Kundert\n:Version: 0.6.0\n:Released: 2020-04-16\n\n\nWhat?\n-----\n\n*psf_utils* is a library allows you to read data from a Spectre PSF ASCII file.\nSpectre is a commercial circuit simulator produced by Cadence Design Systems.\nPSF files contain signals generated by Spectre.  This package also contains two\nprograms that are useful in their own right, but also act as demonstrators as to\nhow to use the library. They are *list-psf* and *plot-psf*.  The first lists the\navailable signals in a file, and the other displays them.\n\n\nAccessing the Results\n---------------------\n\nYou can use the PSF class to read ASCII Parameter Storage Format files. When\ninstantiating the class you pass in the path to the file and then the resulting\nPSF object contains a dictionary that containing the signals. For example, the\nfollowing lists is a::\n\n    from psf_utils import PSF\n    from inform import Error, display\n\n    kinds = {\n        'float double': 'real',\n        'float complex': 'complex',\n    }\n\n    try:\n        psf = PSF('adc.raw/tran.tran')\n\n        for signal in psf.all_signals():\n            kind = signal.type.kind\n            kind = kinds.get(kind, kind)\n            display(f'{signal.name:<15}  {signal.units:<12}  {kind}')\n    except Error as e:\n        e.terminate()\n\nThis example plots the output signal::\n\n    from psf_utils import PSF\n    from inform import Error, display\n    import matplotlib.pyplot as plt\n\n    try:\n        psf = PSF('adc.raw/tran.tran')\n        sweep = psf.get_sweep()\n        out = psf.get_signal('out')\n\n        figure = plt.figure()\n        axes = figure.add_subplot(1,1,1)\n        axes.plot(sweep.abscissa, out.ordinate, linewidth=2, label=out.name)\n        axes.set_title('ADC Output')\n        axes.set_xlabel(f'{sweep.name} ({PSF.units_to_unicode(sweep.units)})')\n        axes.set_ylabel(f'{out.name} ({PSF.units_to_unicode(out.units)})')\n        plt.show()\n    except Error as e:\n        e.terminate()\n\n*abscissa* and *ordinate* are NumPy arrays.  As such, you can perform \ncomputation with them::\n\n    out = out_p.ordinate - out_n.ordinate\n\n    from numpy import sin\n    sine = sin(sweep.abscissa)\n\nReading large ASCII data files is slow, so *PSF* reads the PSF file once,\nthen pickles the data and writes it to disk. On subsequent runs the pickled data\nis used if the pickle file is newer that the corresponding PSF file.\n\n\nUtility Programs\n----------------\n\nTwo utility programs are installed along with the *psf_utils* library:\n*list-psf* and *plot-psf*. The first lists the signals available from a PSF\nfile, and the second displays them. They both employ caching to speed up access\nto the data. They also cache the name of the PSF file so that it need not be\ngiven every time. *plot-psf* also caches its arguments, so if you run it again\nwith no arguments it will simply repeat what it did last time. For example, here\nis a typical session::\n\n    # display signals in noise PSF file\n    > list-psf -f resistor.raw/pnoise.pnoise\n    Using resistor.raw/pnoise.pnoise.\n        R1:flicker  R1:total    R2:fn       out\n        R1:thermal  R2:rn       R2:total\n\n    # display them again, this time in long form\n    > list-psf -l\n    Using resistor.raw/pnoise.pnoise.\n        R1:flicker  A\u00b2/Hz  real  (12042 points)\n        R1:thermal  A\u00b2/Hz  real  (12042 points)\n        R1:total    A\u00b2/Hz  real  (12042 points)\n        R2:fn       A\u00b2/Hz  real  (12042 points)\n        R2:rn       A\u00b2/Hz  real  (12042 points)\n        R2:total    A\u00b2/Hz  real  (12042 points)\n        out         A/\u221aHz  real  (12042 points)\n\n    # display only those that match R1:* (assumes nonomatch variable is set in shell)\n    > list-psf -l R1:*\n    Using resistor.raw/pnoise.pnoise.\n        R1:flicker  A\u00b2/Hz  real  (12042 points)\n        R1:thermal  A\u00b2/Hz  real  (12042 points)\n        R1:total    A\u00b2/Hz  real  (12042 points)\n\n    # display a graph containing signals that start with R1:\n    > plot-psf R1:*\n\n    # display the thermal noise of R1, and then the total noise minus the flicker noise\n    > plot-psf R1:thermal R1:total-R1:flicker\n\n    # display a graph containing only out\n    > plot-psf out\n\n    > plot-psf        # display out again\n\n    # display signals in transient PSF file\n    > list-psf -f diffamp.raw/tran.tran\n    Using diffamp.raw/pnoise.pnoise.\n        in_n    in_p    out_n   out_p   Vdd\n\n    # display differential output and differential input\n    > plot-psf out_p-out_n in_p-in_n\n\n\nConverting to PSF ASCII\n-----------------------\n\n*psf_utils* only supports PSF ASCII files. As an alternative, `libpsf\n<https://pypi.org/project/libpsf>`_ is a Python package that can read both ASCII\nand binary PSF files. Or, you can use the Cadence *psf* program to convert\nvarious types of simulation results files into PSF ASCII format. To use it,\nsimply specify the input and output files::\n\n    > psf -i adc.raw/tran.tran -o adc.raw/tran.psfascii\n    > list-psf -f adc.raw/tran.psfascii\n\nIn this example there is nothing special about the 'psfascii' suffix, it is\nsimply mnemonic.  Rather, the output is in ASCII format because the ``-b``\n(binary) option is not specified.\n\n*psf_utils* does not support SST files, which are generated by AMS Designer, \nCadence's mixed-signal simulator. You can recognize SST files in that they come \nin pairs, and the two files have ``.dsn`` and ``.trn`` suffixes.  In this case, \nCadence's PSF utility cannot help you either.  However, you can use the \n*simvisdbutil* to convert the data to a CSV file, which would allow you to \naccess the data, though not with *psf_utils*.  For example, the following\nconverts all waveforms contained in ldo.trn into CSV data::\n\n    simvisdbutil ldo.trn -csv -timeunits s -output ldo.csv\n\n\nExamples\n--------\n\n`Flicker Noise <https://github.com/KenKundert/flicker-noise>`_ is a simulation \nscript that shows how to write simple Python scripts that run Spectre and use \n*psf_utils* to extract and display the desired results.\n\n\nReleases\n--------\n\n**Latest development release**:\n    | Version: 0.6.0\n    | Released: 2020-04-16\n\n**0.6 (2020-04-16)**:\n    - modest refinements\n\n**0.5 (2020-01-08)**:\n    - beta release\n\n**0.4 (2019-09-26)**:\n    - Allow glob patterns to be passed to both *list-psf* and *plot-psf*.\n\n**0.3 (2019-09-25)**:\n    - Fix import errors in *plot-psf* command.\n\n**0.2 (2019-09-25)**:\n    - Fix dependencies.\n\n**0.1 (2019-09-25)**:\n    - Initial version", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "https://github.com/kenkundert/psf_utils/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://psf_utils.readthedocs.io", "keywords": "cadence,spectre,PSF,simulation", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "psf-utils", "package_url": "https://pypi.org/project/psf-utils/", "platform": "", "project_url": "https://pypi.org/project/psf-utils/", "project_urls": {"Download": "https://github.com/kenkundert/psf_utils/tarball/master", "Homepage": "https://psf_utils.readthedocs.io"}, "release_url": "https://pypi.org/project/psf-utils/0.6.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Cadence PSF file utilities", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/psf_utils\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/psf_utils.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c635d684d642b911c28819d90f558897e9a788fa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7073665f7574696c732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/psf_utils/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/psf_utils.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e3840909b88749be176da5d17fb45cdd3072f8d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7073665f7574696c732e737667\"></a>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th><td>Ken Kundert</td>\n</tr>\n<tr><th>Version:</th><td>0.6.0</td>\n</tr>\n<tr><th>Released:</th><td>2020-04-16</td>\n</tr>\n</tbody>\n</table>\n<div id=\"what\">\n<h2>What?</h2>\n<p><em>psf_utils</em> is a library allows you to read data from a Spectre PSF ASCII file.\nSpectre is a commercial circuit simulator produced by Cadence Design Systems.\nPSF files contain signals generated by Spectre.  This package also contains two\nprograms that are useful in their own right, but also act as demonstrators as to\nhow to use the library. They are <em>list-psf</em> and <em>plot-psf</em>.  The first lists the\navailable signals in a file, and the other displays them.</p>\n</div>\n<div id=\"accessing-the-results\">\n<h2>Accessing the Results</h2>\n<p>You can use the PSF class to read ASCII Parameter Storage Format files. When\ninstantiating the class you pass in the path to the file and then the resulting\nPSF object contains a dictionary that containing the signals. For example, the\nfollowing lists is a:</p>\n<pre>from psf_utils import PSF\nfrom inform import Error, display\n\nkinds = {\n    'float double': 'real',\n    'float complex': 'complex',\n}\n\ntry:\n    psf = PSF('adc.raw/tran.tran')\n\n    for signal in psf.all_signals():\n        kind = signal.type.kind\n        kind = kinds.get(kind, kind)\n        display(f'{signal.name:&lt;15}  {signal.units:&lt;12}  {kind}')\nexcept Error as e:\n    e.terminate()\n</pre>\n<p>This example plots the output signal:</p>\n<pre>from psf_utils import PSF\nfrom inform import Error, display\nimport matplotlib.pyplot as plt\n\ntry:\n    psf = PSF('adc.raw/tran.tran')\n    sweep = psf.get_sweep()\n    out = psf.get_signal('out')\n\n    figure = plt.figure()\n    axes = figure.add_subplot(1,1,1)\n    axes.plot(sweep.abscissa, out.ordinate, linewidth=2, label=out.name)\n    axes.set_title('ADC Output')\n    axes.set_xlabel(f'{sweep.name} ({PSF.units_to_unicode(sweep.units)})')\n    axes.set_ylabel(f'{out.name} ({PSF.units_to_unicode(out.units)})')\n    plt.show()\nexcept Error as e:\n    e.terminate()\n</pre>\n<p><em>abscissa</em> and <em>ordinate</em> are NumPy arrays.  As such, you can perform\ncomputation with them:</p>\n<pre>out = out_p.ordinate - out_n.ordinate\n\nfrom numpy import sin\nsine = sin(sweep.abscissa)\n</pre>\n<p>Reading large ASCII data files is slow, so <em>PSF</em> reads the PSF file once,\nthen pickles the data and writes it to disk. On subsequent runs the pickled data\nis used if the pickle file is newer that the corresponding PSF file.</p>\n</div>\n<div id=\"utility-programs\">\n<h2>Utility Programs</h2>\n<p>Two utility programs are installed along with the <em>psf_utils</em> library:\n<em>list-psf</em> and <em>plot-psf</em>. The first lists the signals available from a PSF\nfile, and the second displays them. They both employ caching to speed up access\nto the data. They also cache the name of the PSF file so that it need not be\ngiven every time. <em>plot-psf</em> also caches its arguments, so if you run it again\nwith no arguments it will simply repeat what it did last time. For example, here\nis a typical session:</p>\n<pre># display signals in noise PSF file\n&gt; list-psf -f resistor.raw/pnoise.pnoise\nUsing resistor.raw/pnoise.pnoise.\n    R1:flicker  R1:total    R2:fn       out\n    R1:thermal  R2:rn       R2:total\n\n# display them again, this time in long form\n&gt; list-psf -l\nUsing resistor.raw/pnoise.pnoise.\n    R1:flicker  A\u00b2/Hz  real  (12042 points)\n    R1:thermal  A\u00b2/Hz  real  (12042 points)\n    R1:total    A\u00b2/Hz  real  (12042 points)\n    R2:fn       A\u00b2/Hz  real  (12042 points)\n    R2:rn       A\u00b2/Hz  real  (12042 points)\n    R2:total    A\u00b2/Hz  real  (12042 points)\n    out         A/\u221aHz  real  (12042 points)\n\n# display only those that match R1:* (assumes nonomatch variable is set in shell)\n&gt; list-psf -l R1:*\nUsing resistor.raw/pnoise.pnoise.\n    R1:flicker  A\u00b2/Hz  real  (12042 points)\n    R1:thermal  A\u00b2/Hz  real  (12042 points)\n    R1:total    A\u00b2/Hz  real  (12042 points)\n\n# display a graph containing signals that start with R1:\n&gt; plot-psf R1:*\n\n# display the thermal noise of R1, and then the total noise minus the flicker noise\n&gt; plot-psf R1:thermal R1:total-R1:flicker\n\n# display a graph containing only out\n&gt; plot-psf out\n\n&gt; plot-psf        # display out again\n\n# display signals in transient PSF file\n&gt; list-psf -f diffamp.raw/tran.tran\nUsing diffamp.raw/pnoise.pnoise.\n    in_n    in_p    out_n   out_p   Vdd\n\n# display differential output and differential input\n&gt; plot-psf out_p-out_n in_p-in_n\n</pre>\n</div>\n<div id=\"converting-to-psf-ascii\">\n<h2>Converting to PSF ASCII</h2>\n<p><em>psf_utils</em> only supports PSF ASCII files. As an alternative, <a href=\"https://pypi.org/project/libpsf\" rel=\"nofollow\">libpsf</a> is a Python package that can read both ASCII\nand binary PSF files. Or, you can use the Cadence <em>psf</em> program to convert\nvarious types of simulation results files into PSF ASCII format. To use it,\nsimply specify the input and output files:</p>\n<pre>&gt; psf -i adc.raw/tran.tran -o adc.raw/tran.psfascii\n&gt; list-psf -f adc.raw/tran.psfascii\n</pre>\n<p>In this example there is nothing special about the \u2018psfascii\u2019 suffix, it is\nsimply mnemonic.  Rather, the output is in ASCII format because the <tt><span class=\"pre\">-b</span></tt>\n(binary) option is not specified.</p>\n<p><em>psf_utils</em> does not support SST files, which are generated by AMS Designer,\nCadence\u2019s mixed-signal simulator. You can recognize SST files in that they come\nin pairs, and the two files have <tt>.dsn</tt> and <tt>.trn</tt> suffixes.  In this case,\nCadence\u2019s PSF utility cannot help you either.  However, you can use the\n<em>simvisdbutil</em> to convert the data to a CSV file, which would allow you to\naccess the data, though not with <em>psf_utils</em>.  For example, the following\nconverts all waveforms contained in ldo.trn into CSV data:</p>\n<pre>simvisdbutil ldo.trn -csv -timeunits s -output ldo.csv\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p><a href=\"https://github.com/KenKundert/flicker-noise\" rel=\"nofollow\">Flicker Noise</a> is a simulation\nscript that shows how to write simple Python scripts that run Spectre and use\n<em>psf_utils</em> to extract and display the desired results.</p>\n</div>\n<div id=\"releases\">\n<h2>Releases</h2>\n<dl>\n<dt><strong>Latest development release</strong>:</dt>\n<dd><div>\n<div>Version: 0.6.0</div>\n<div>Released: 2020-04-16</div>\n</div>\n</dd>\n<dt><strong>0.6 (2020-04-16)</strong>:</dt>\n<dd><ul>\n<li>modest refinements</li>\n</ul>\n</dd>\n<dt><strong>0.5 (2020-01-08)</strong>:</dt>\n<dd><ul>\n<li>beta release</li>\n</ul>\n</dd>\n<dt><strong>0.4 (2019-09-26)</strong>:</dt>\n<dd><ul>\n<li>Allow glob patterns to be passed to both <em>list-psf</em> and <em>plot-psf</em>.</li>\n</ul>\n</dd>\n<dt><strong>0.3 (2019-09-25)</strong>:</dt>\n<dd><ul>\n<li>Fix import errors in <em>plot-psf</em> command.</li>\n</ul>\n</dd>\n<dt><strong>0.2 (2019-09-25)</strong>:</dt>\n<dd><ul>\n<li>Fix dependencies.</li>\n</ul>\n</dd>\n<dt><strong>0.1 (2019-09-25)</strong>:</dt>\n<dd><ul>\n<li>Initial version</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 7035666, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4d4fa20051ff2ad3f27117ee0235dcce", "sha256": "adb2a8c5ef7f75c6bc48945573b70d1ee2d6fbb20f3c0926f3e3defb4970b8a1"}, "downloads": -1, "filename": "psf_utils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4d4fa20051ff2ad3f27117ee0235dcce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10246, "upload_time": "2019-09-26T02:15:25", "upload_time_iso_8601": "2019-09-26T02:15:25.922781Z", "url": "https://files.pythonhosted.org/packages/f6/31/e3da87d009256c9dc244422a9d0ef974d9b3c904d329de2c48b805da1ef5/psf_utils-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2a21db7ec6d3add58df9959f04341e31", "sha256": "14b4369a889d8a44c95b4634e1ab164c21bdec8e476cf50c93eead56011e4291"}, "downloads": -1, "filename": "psf_utils-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2a21db7ec6d3add58df9959f04341e31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10253, "upload_time": "2019-09-26T04:20:47", "upload_time_iso_8601": "2019-09-26T04:20:47.854383Z", "url": "https://files.pythonhosted.org/packages/f9/bb/48b6658c63ad9af23dd709e2fcbab20464ffe0c8e68044e50c7ed8af987e/psf_utils-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c4c9c58f87ebfc14f66d92b290a5f612", "sha256": "2387dd83db548837227f8735a2463d4ae19b31c519507002fd0654cd5a89707c"}, "downloads": -1, "filename": "psf_utils-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c4c9c58f87ebfc14f66d92b290a5f612", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10252, "upload_time": "2019-09-26T05:11:29", "upload_time_iso_8601": "2019-09-26T05:11:29.843497Z", "url": "https://files.pythonhosted.org/packages/6c/45/469899ff552510bf358d80b2d4f2de1a0a8122c93549e21bc54a2b5118e1/psf_utils-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "08ca888d00c245416c2a4227dd2b2e4a", "sha256": "965a81ed7f2c5bb4396b66745141f30af0858e0c4c8b187f8a477342b9c4dee2"}, "downloads": -1, "filename": "psf_utils-0.4.0.tar.gz", "has_sig": false, "md5_digest": "08ca888d00c245416c2a4227dd2b2e4a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11964, "upload_time": "2019-09-27T01:39:14", "upload_time_iso_8601": "2019-09-27T01:39:14.747037Z", "url": "https://files.pythonhosted.org/packages/48/db/a862caa75b6ee506b15fafa0c34f34bd63edbdcdbae9bbf1a7d813215303/psf_utils-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "83852242a3d9144a51b6c0f1c7dcebcc", "sha256": "fa3a85a83437aedc7e4316b407de409c580ac58bc44218b0e32d00d9c0b53264"}, "downloads": -1, "filename": "psf_utils-0.5.0.tar.gz", "has_sig": false, "md5_digest": "83852242a3d9144a51b6c0f1c7dcebcc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12153, "upload_time": "2020-01-08T22:22:01", "upload_time_iso_8601": "2020-01-08T22:22:01.177450Z", "url": "https://files.pythonhosted.org/packages/ba/f2/ad8f5635893eade66792045140dadda8fca6ddc984aba82e0eec94f95b15/psf_utils-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "b614ab4254be2830a42b86b924ab1840", "sha256": "200f445314310f5a5cd85eb2545928f49e7aff8af794186d8e6abf6bdc64797e"}, "downloads": -1, "filename": "psf_utils-0.6.0.tar.gz", "has_sig": false, "md5_digest": "b614ab4254be2830a42b86b924ab1840", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14360, "upload_time": "2020-04-16T21:19:12", "upload_time_iso_8601": "2020-04-16T21:19:12.259449Z", "url": "https://files.pythonhosted.org/packages/57/27/2496f33d9274b8c24bc758c3fb5865b08b650fc5422792e58443b36eb788/psf_utils-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b614ab4254be2830a42b86b924ab1840", "sha256": "200f445314310f5a5cd85eb2545928f49e7aff8af794186d8e6abf6bdc64797e"}, "downloads": -1, "filename": "psf_utils-0.6.0.tar.gz", "has_sig": false, "md5_digest": "b614ab4254be2830a42b86b924ab1840", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14360, "upload_time": "2020-04-16T21:19:12", "upload_time_iso_8601": "2020-04-16T21:19:12.259449Z", "url": "https://files.pythonhosted.org/packages/57/27/2496f33d9274b8c24bc758c3fb5865b08b650fc5422792e58443b36eb788/psf_utils-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:56 2020"}