{"info": {"author": "Emily Mills", "author_email": "emily@emlove.me", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "jsonrpc-websocket: a compact JSON-RPC websocket client library for asyncio\n=======================================================================================================\n\n.. image:: https://travis-ci.org/armills/jsonrpc-websocket.svg\n    :target: https://travis-ci.org/armills/jsonrpc-websocket\n.. image:: https://coveralls.io/repos/armills/jsonrpc-websocket/badge.svg\n    :target: https://coveralls.io/r/armills/jsonrpc-websocket\n\nThis is a compact and simple JSON-RPC websocket client implementation for asyncio python code. This code is forked from https://github.com/gciotta/jsonrpc-requests\n\nMain Features\n-------------\n\n* Python 3.5, 3.6, 3.7 & 3.8 compatible\n* Supports nested namespaces (eg. `app.users.getUsers()`)\n* 100% test coverage\n\nUsage\n-----\nIt is recommended to manage the aiohttp ClientSession object externally and pass it to the Server constructor. `(See the aiohttp documentation.) <https://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession>`_ If not passed to Server, a ClientSession object will be created automatically.\n\nExecute remote JSON-RPC functions\n\n.. code-block:: python\n\n    import asyncio\n    from jsonrpc_websocket import Server\n\n    async def routine():\n        server = Server('ws://localhost:9090')\n        try:\n            await server.ws_connect()\n\n            await server.foo(1, 2)\n            await server.foo(bar=1, baz=2)\n            await server.foo({'foo': 'bar'})\n            await server.foo.bar(baz=1, qux=2)\n        finally:\n            await server.close()\n            await server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nA notification\n\n.. code-block:: python\n\n    import asyncio\n    from jsonrpc_websocket import Server\n\n    async def routine():\n        server = Server('ws://localhost:9090')\n        try:\n            await server.ws_connect()\n\n            await server.foo(bar=1, _notification=True)\n        finally:\n            await server.close()\n            await server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nHandle requests from server to client\n\n.. code-block:: python\n\n    import asyncio\n    from jsonrpc_websocket import Server\n\n    def client_method(arg1, arg2):\n        return arg1 + arg2\n\n    async def routine():\n        server = Server('ws://localhost:9090')\n        # client_method is called when server requests method 'namespace.client_method'\n        server.namespace.client_method = client_method\n        try:\n            await server.ws_connect()\n        finally:\n            await server.close()\n            await server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nPass through arguments to aiohttp (see also `aiohttp  documentation <http://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession.request>`_)\n\n.. code-block:: python\n\n    import asyncio\n    import aiohttp\n    from jsonrpc_websocket import Server\n\n    async def routine():\n        server = Server(\n            'ws://localhost:9090',\n            auth=aiohttp.BasicAuth('user', 'pass'),\n            headers={'x-test2': 'true'})\n        try:\n            await server.ws_connect()\n\n            await server.foo()\n        finally:\n            await server.close()\n            await server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nPass through aiohttp exceptions\n\n.. code-block:: python\n\n    import asyncio\n    import aiohttp\n    from jsonrpc_websocket import Server\n\n    async def routine():\n        server = Server('ws://unknown-host')\n        try:\n            await server.ws_connect()\n\n            await server.foo()\n        except TransportError as transport_error:\n            print(transport_error.args[1]) # this will hold a aiohttp exception instance\n        finally:\n            await server.close()\n            await server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nTests\n-----\nInstall the Python tox package and run ``tox``, it'll test this package with various versions of Python.\n\nChangelog\n---------\n1.1.0 (February 17, 2020)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n- Support servers that send JSON-RPC requests as binary messages encoded with UTF-8 `(#5) <https://github.com/emlove/jsonrpc-websocket/pull/5>`_ `@shiaky <https://github.com/shiaky>`_\n\n1.0.2 (November 12, 2019)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n- Bumped jsonrpc-base to version 1.0.3\n\n1.0.1 (August 23, 2018)\n~~~~~~~~~~~~~~~~~~~~~~~\n- Bumped jsonrpc-base to version 1.0.2\n\n1.0.0 (July 6, 2018)\n~~~~~~~~~~~~~~~~~~~~\n- Bumped jsonrpc-base to version 1.0.1\n\n0.6 (March 11, 2018)\n~~~~~~~~~~~~~~~~~~~~\n- Minimum required version of aiohttp is now 3.0.\n- Support for Python 3.4 is now dropped.\n\nCredits\n-------\n`@gciotta <https://github.com/gciotta>`_ for creating the base project `jsonrpc-requests <https://github.com/gciotta/jsonrpc-requests>`_.\n\n`@mbroadst <https://github.com/mbroadst>`_ for providing full support for nested method calls, JSON-RPC RFC\ncompliance and other improvements.\n\n`@vaab <https://github.com/vaab>`_ for providing api and tests improvements, better RFC compliance.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/armills/jsonrpc-websocket", "keywords": "json-rpc async asyncio websocket", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "jsonrpc-websocket", "package_url": "https://pypi.org/project/jsonrpc-websocket/", "platform": "", "project_url": "https://pypi.org/project/jsonrpc-websocket/", "project_urls": {"Homepage": "http://github.com/armills/jsonrpc-websocket"}, "release_url": "https://pypi.org/project/jsonrpc-websocket/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "A JSON-RPC websocket client library for asyncio", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/armills/jsonrpc-websocket\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/armills/jsonrpc-websocket.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5828a8e7be8b24ab7ad2050b71319c036974f267/68747470733a2f2f7472617669732d63692e6f72672f61726d696c6c732f6a736f6e7270632d776562736f636b65742e737667\"></a>\n<a href=\"https://coveralls.io/r/armills/jsonrpc-websocket\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/armills/jsonrpc-websocket/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/adc8955fea0af1e508fd2b8a2e712d3f52f19968/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f61726d696c6c732f6a736f6e7270632d776562736f636b65742f62616467652e737667\"></a>\n<p>This is a compact and simple JSON-RPC websocket client implementation for asyncio python code. This code is forked from <a href=\"https://github.com/gciotta/jsonrpc-requests\" rel=\"nofollow\">https://github.com/gciotta/jsonrpc-requests</a></p>\n<div id=\"main-features\">\n<h2>Main Features</h2>\n<ul>\n<li>Python 3.5, 3.6, 3.7 &amp; 3.8 compatible</li>\n<li>Supports nested namespaces (eg. <cite>app.users.getUsers()</cite>)</li>\n<li>100% test coverage</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>It is recommended to manage the aiohttp ClientSession object externally and pass it to the Server constructor. <a href=\"https://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession\" rel=\"nofollow\">(See the aiohttp documentation.)</a> If not passed to Server, a ClientSession object will be created automatically.</p>\n<p>Execute remote JSON-RPC functions</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonrpc_websocket</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">routine</span><span class=\"p\">():</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s1\">'ws://localhost:9090'</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ws_connect</span><span class=\"p\">()</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">})</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">qux</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">routine</span><span class=\"p\">())</span>\n</pre>\n<p>A notification</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonrpc_websocket</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">routine</span><span class=\"p\">():</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s1\">'ws://localhost:9090'</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ws_connect</span><span class=\"p\">()</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">_notification</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">routine</span><span class=\"p\">())</span>\n</pre>\n<p>Handle requests from server to client</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonrpc_websocket</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">client_method</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">arg1</span> <span class=\"o\">+</span> <span class=\"n\">arg2</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">routine</span><span class=\"p\">():</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s1\">'ws://localhost:9090'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># client_method is called when server requests method 'namespace.client_method'</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"o\">.</span><span class=\"n\">client_method</span> <span class=\"o\">=</span> <span class=\"n\">client_method</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ws_connect</span><span class=\"p\">()</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">routine</span><span class=\"p\">())</span>\n</pre>\n<p>Pass through arguments to aiohttp (see also <a href=\"http://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession.request\" rel=\"nofollow\">aiohttp  documentation</a>)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonrpc_websocket</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">routine</span><span class=\"p\">():</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span>\n        <span class=\"s1\">'ws://localhost:9090'</span><span class=\"p\">,</span>\n        <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">BasicAuth</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">),</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'x-test2'</span><span class=\"p\">:</span> <span class=\"s1\">'true'</span><span class=\"p\">})</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ws_connect</span><span class=\"p\">()</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">()</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">routine</span><span class=\"p\">())</span>\n</pre>\n<p>Pass through aiohttp exceptions</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonrpc_websocket</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">routine</span><span class=\"p\">():</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s1\">'ws://unknown-host'</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ws_connect</span><span class=\"p\">()</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">TransportError</span> <span class=\"k\">as</span> <span class=\"n\">transport_error</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transport_error</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"c1\"># this will hold a aiohttp exception instance</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">routine</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Install the Python tox package and run <tt>tox</tt>, it\u2019ll test this package with various versions of Python.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"february-17-2020\">\n<h3>1.1.0 (February 17, 2020)</h3>\n<ul>\n<li>Support servers that send JSON-RPC requests as binary messages encoded with UTF-8 <a href=\"https://github.com/emlove/jsonrpc-websocket/pull/5\" rel=\"nofollow\">(#5)</a> <a href=\"https://github.com/shiaky\" rel=\"nofollow\">@shiaky</a></li>\n</ul>\n</div>\n<div id=\"november-12-2019\">\n<h3>1.0.2 (November 12, 2019)</h3>\n<ul>\n<li>Bumped jsonrpc-base to version 1.0.3</li>\n</ul>\n</div>\n<div id=\"august-23-2018\">\n<h3>1.0.1 (August 23, 2018)</h3>\n<ul>\n<li>Bumped jsonrpc-base to version 1.0.2</li>\n</ul>\n</div>\n<div id=\"july-6-2018\">\n<h3>1.0.0 (July 6, 2018)</h3>\n<ul>\n<li>Bumped jsonrpc-base to version 1.0.1</li>\n</ul>\n</div>\n<div id=\"march-11-2018\">\n<h3>0.6 (March 11, 2018)</h3>\n<ul>\n<li>Minimum required version of aiohttp is now 3.0.</li>\n<li>Support for Python 3.4 is now dropped.</li>\n</ul>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p><a href=\"https://github.com/gciotta\" rel=\"nofollow\">@gciotta</a> for creating the base project <a href=\"https://github.com/gciotta/jsonrpc-requests\" rel=\"nofollow\">jsonrpc-requests</a>.</p>\n<p><a href=\"https://github.com/mbroadst\" rel=\"nofollow\">@mbroadst</a> for providing full support for nested method calls, JSON-RPC RFC\ncompliance and other improvements.</p>\n<p><a href=\"https://github.com/vaab\" rel=\"nofollow\">@vaab</a> for providing api and tests improvements, better RFC compliance.</p>\n</div>\n\n          </div>"}, "last_serial": 7159967, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a8906f1b9fa0b249d6f2d76398fb0903", "sha256": "2b01e0237f2e05f52e6099a4ad1d79ad2624b4c636797383e3eede2c8711c187"}, "downloads": -1, "filename": "jsonrpc-websocket-0.1.tar.gz", "has_sig": false, "md5_digest": "a8906f1b9fa0b249d6f2d76398fb0903", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4866, "upload_time": "2017-02-15T16:55:56", "upload_time_iso_8601": "2017-02-15T16:55:56.382993Z", "url": "https://files.pythonhosted.org/packages/19/b2/97e6c1e807b7e43d05c8ed69d58712c14abbbde5562f36911c126807fb9d/jsonrpc-websocket-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4addfb7a9a7f993a22168d5307c20fee", "sha256": "608b4b99532059ca6e77025c936751c7b33bac726609b5ac2acbf1f8c6307141"}, "downloads": -1, "filename": "jsonrpc-websocket-0.2.tar.gz", "has_sig": false, "md5_digest": "4addfb7a9a7f993a22168d5307c20fee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4938, "upload_time": "2017-02-16T01:29:18", "upload_time_iso_8601": "2017-02-16T01:29:18.619502Z", "url": "https://files.pythonhosted.org/packages/e6/90/a196a99a2db1712476e82ba84f03b1b9d21440e3eb475b5e55db51bd2ab6/jsonrpc-websocket-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b0a41d5adb5696a484696611fdaf570f", "sha256": "c7c62e364d7856d3d3eb18ad17cc016e532770ecaeae2cc4da34c5d2b8cd4de5"}, "downloads": -1, "filename": "jsonrpc-websocket-0.3.tar.gz", "has_sig": false, "md5_digest": "b0a41d5adb5696a484696611fdaf570f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4895, "upload_time": "2017-03-19T15:38:58", "upload_time_iso_8601": "2017-03-19T15:38:58.990262Z", "url": "https://files.pythonhosted.org/packages/c0/55/06500a5dc4ca07bae5bd327c46fd2f8020487df3342708e495f9c0a82d44/jsonrpc-websocket-0.3.tar.gz", "yanked": false}], "0.4": [], "0.5": [{"comment_text": "", "digests": {"md5": "7d7fa81ff1a71c9b89fb8d31cad1c5d0", "sha256": "04c30808f9dd21713f9b77e357418a5751d31e90baf8a45bc131ededd0c23232"}, "downloads": -1, "filename": "jsonrpc-websocket-0.5.tar.gz", "has_sig": false, "md5_digest": "7d7fa81ff1a71c9b89fb8d31cad1c5d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4905, "upload_time": "2017-04-06T21:52:19", "upload_time_iso_8601": "2017-04-06T21:52:19.356528Z", "url": "https://files.pythonhosted.org/packages/11/ea/85f2bc48b322a1e36f40636e43b34b65ca9e48e1a488dd83095da4dfea41/jsonrpc-websocket-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "d71261b0cd63e58525d5a9968bbea5af", "sha256": "cf349bee4ab96db2e457b6a71a45380e1a9cf3e1ceb08260ecfd9928040ebe71"}, "downloads": -1, "filename": "jsonrpc-websocket-0.6.tar.gz", "has_sig": false, "md5_digest": "d71261b0cd63e58525d5a9968bbea5af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5031, "upload_time": "2018-03-11T17:21:06", "upload_time_iso_8601": "2018-03-11T17:21:06.193985Z", "url": "https://files.pythonhosted.org/packages/0d/0c/27c53b8953404c6bc150649af58937a2962c451d1c4101a5e309d85806e2/jsonrpc-websocket-0.6.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "84b206d511a9b0b790cc0631311d21c3", "sha256": "40949836996c0a8104e7878997d3f68bda4561e9d3af64e5cd178127ec3c2778"}, "downloads": -1, "filename": "jsonrpc-websocket-1.0.0.tar.gz", "has_sig": false, "md5_digest": "84b206d511a9b0b790cc0631311d21c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5018, "upload_time": "2018-07-06T15:13:23", "upload_time_iso_8601": "2018-07-06T15:13:23.184004Z", "url": "https://files.pythonhosted.org/packages/76/ff/c9328b57b01a124af77809ec53d17759c245830953fe49df3f3809b191c3/jsonrpc-websocket-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0ea966e05f51fc0d0fb98ae0b5379011", "sha256": "e74e490fefa3b8f33620fca98f7cd9a53fb765b9ed6f78360482a3f364230885"}, "downloads": -1, "filename": "jsonrpc-websocket-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0ea966e05f51fc0d0fb98ae0b5379011", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5058, "upload_time": "2018-08-23T21:37:01", "upload_time_iso_8601": "2018-08-23T21:37:01.310815Z", "url": "https://files.pythonhosted.org/packages/9b/7c/36967cced11972a6f69c27d48ee40ce868774e15c0369adb45973f0d5294/jsonrpc-websocket-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e659a55971a2d84857e3577f622a3d5d", "sha256": "f1aaca95db795d6a9f7bba52ff83c7fd4139050d0df93ee3a5a448adcfa0c0ac"}, "downloads": -1, "filename": "jsonrpc-websocket-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e659a55971a2d84857e3577f622a3d5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8354, "upload_time": "2019-11-12T19:01:51", "upload_time_iso_8601": "2019-11-12T19:01:51.682015Z", "url": "https://files.pythonhosted.org/packages/52/d4/045d08bdfaac4ca5c0c879a232358f2b1a6e102800e3fe69abe140df20db/jsonrpc-websocket-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "99cdac3c7cb5b81b6749b2b44cb60074", "sha256": "a0904f14abb96d8cd198e8f4032f9eb368e87af9cd75fa8e5af519e0cced2f09"}, "downloads": -1, "filename": "jsonrpc-websocket-1.1.0.tar.gz", "has_sig": false, "md5_digest": "99cdac3c7cb5b81b6749b2b44cb60074", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9105, "upload_time": "2020-02-17T21:32:25", "upload_time_iso_8601": "2020-02-17T21:32:25.076707Z", "url": "https://files.pythonhosted.org/packages/46/f1/a5fa1dbb3ca43df9be8c580cf06dbd70a1dd9a70666f200305e218807df6/jsonrpc-websocket-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "99cdac3c7cb5b81b6749b2b44cb60074", "sha256": "a0904f14abb96d8cd198e8f4032f9eb368e87af9cd75fa8e5af519e0cced2f09"}, "downloads": -1, "filename": "jsonrpc-websocket-1.1.0.tar.gz", "has_sig": false, "md5_digest": "99cdac3c7cb5b81b6749b2b44cb60074", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9105, "upload_time": "2020-02-17T21:32:25", "upload_time_iso_8601": "2020-02-17T21:32:25.076707Z", "url": "https://files.pythonhosted.org/packages/46/f1/a5fa1dbb3ca43df9be8c580cf06dbd70a1dd9a70666f200305e218807df6/jsonrpc-websocket-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:40 2020"}