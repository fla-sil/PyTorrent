{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "**XDV has been renamed to Diazo and this package has been replaced by plone.app.theming.** Visit the `Diazo website`_ or the `plone.app.theming PyPI page`_ for further information.\n\n.. _`Diazo website`: http://diazo.org\n.. _`plone.app.theming PyPI page`: http://pypi.python.org/pypi/plone.app.theming\n\n\n============\nIntroduction\n============\n\nThis package offers a simple way to develop and deploy Plone themes using\nthe `XDV`_ engine. If you are not familiar with XDV or rules-based theming,\ncheck out the `XDV documentation <http://pypi.python.org/pypi/xdv>`_.\n\n.. contents:: Contents\n\nInstallation\n============\n\ncollective.xdv depends on:\n\n  * `plone.transformchain`_ to hook the transformation into the publisher\n  * `plone.registry`_ and `plone.app.registry`_ to manage settings\n  * `plone.autoform`_, `plone.z3cform`_ and `plone.app.z3cform`_ to render the \n    control panel\n  * `five.globalrequest`_ and `zope.globalrequest`_ for internal request\n    access\n  * `XDV`_, containing XDV itself itself\n  * `lxml`_ to perform the final transform\n\nThese will all be pulled in automatically if you are using zc.buildout and\nfollow the installation instructions.\n\nTo install collective.xdv into your Plone instance, locate the file\nbuildout.cfg in the root of your Plone instance directory on the file system,\nand open it in a text editor. Locate the section that looks like this::\n\n    # extends = http://dist.plone.org/release/3.3/versions.cfg\n    extends = versions.cfg\n    versions = versions\n\nIt may also have a URL in the \"extends\" section, similar to the commented-out\nfirst line, depending on whether you pull the Plone configuration from the\nnetwork or locally.\n\nTo add collective.xdv to our setup, we need some slightly different versions\nof a couple of the packages, so we extend the base config with a version list\nfrom the good-py service, so change this part of the configuration so it looks\nlike this::\n\n    extends =\n        versions.cfg\n        http://good-py.appspot.com/release/collective.xdv/1.0?plone=3.3.5\n    versions = versions\n\nNote that the last part of the URL above before the ``?`` is the xdv version\nnumber. There may be a newer version by the time you read this, so check out\nthe `overview page <http://good-py.appspot.com/release/collective.xdv>`_ for\nthe known good set.\n\nReplace ``?plone=3.3.5`` with the version of Plone you are using. This\ndependency versions appropriate to your Plone.\n\nWhat happens here is that the dependency list for collective.xdv specifies\nsome new versions for you via the good-py URL. This way, you don't have to\nworry about getting the right versions, Buildout will handle it for you.\n\nNext step is to add the actual collective.xdv add-on to the \"eggs\" section of\nbuildout.cfg. Look for the section that looks like this::\n\n    eggs =\n        Plone\n\nThis section might have additional lines if you have other add-ons already\ninstalled. Just add the collective.xdv on a separate line, like this::\n\n    eggs =\n        Plone\n        collective.xdv [Zope2.10]\n\nNote the use of the [Zope2.10] extra, which brings in the\nZPublisherEventsBackport package for forward compatibility with Zope 2.12 /\nPlone 4. If you are using Zope 2.12 or later (e.g. with Plone 4), you should\ndo::\n\n    eggs =\n        Plone\n        collective.xdv\n\nNote that there is no need to add a ZCML slug as collective.xdv uses\nz3c.autoinclude to configure itself automatically.\n\nOnce you have added these lines to your configuration file, it's time to run\nbuildout, so the system can add and set up collective.xdv for you. Go to the\ncommand line, and from the root of your Plone instance (same directory as\nbuildout.cfg is located in), run buildout like this::\n\n    $ bin/buildout\n\nYou will see output similar to this::\n\n    Getting distribution for 'collective.xdv==1.0'.\n    Got collective.xdv 1.0.\n    Getting distribution for 'plone.app.registry'.\n    Got plone.app.registry 1.0a1.\n    Getting distribution for 'plone.synchronize'.\n    Got plone.synchronize 1.0b1.\n    ...\n\nIf everything went according to plan, you now have collective.xdv installed\nin your Zope instance.\n\nNext, start up Zope, e.g with::\n\n    $ bin/instance fg\n\nThen go to the \"Add-ons\" control panel in Plone as an administrator, and\ninstall the \"XDV theme support\" product. You should then notice a new\n\"XDV Theme\" control panel in Plone's site setup.\n    \nUsage\n=====\n\nIn the \"XDV Theme\" control panel, you can set the following options:\n\n  Enabled yes/no\n    Whether or not the transform is enabled.\n\n  Domains\n    A list of domains (including ports) that will be matched against\n    the HOST header to determine if the theme should be applied. Note that\n    127.0.0.1 is never styled, to ensure there's always a way back into Plone\n    to change these very settings. However, 'localhost' should work just fine.\n  \n  Theme\n    A file path or URL pointing to the theme file. This is just a\n    static HTML file.\n\n  Rules\n    The filesystem path to the rules XML file.  \n  \n  Alternate themes\n    A list of definitions of alternate themes and rules files for a different\n    path. Should be of the form 'path theme rules' where path may use a\n    regular expression syntax, theme is a file path or URL to the theme\n    template and rule is a file path to the rules file. If the theme or a\n    rules string starts with 'python://' a path resolve is done, so for\n    example you could refer to a theme file in your theme package as\n    python://yourtheme.xdvtheme/static/page.html .\n    \n  XSLT extension file \n    It is possible to extend XDV with a custom XSLT file.\n    If you have such a file, give its URL here.\n    \n  Absolute prefix \n    If given, any relative URL in an ``<img />``, ``<link\n    />``, ``<style />`` or ``<script />`` in the theme HTML file will be\n    prefixed by this URL snippet when the theme is compiled. This makes it\n    easier to develop theme HTML/CSS on the file system using relative paths\n    that still work on any URL on the server.\n    \n  Unstyled paths \n    This is used to give a list of URL patterns (using regular\n    expression syntax) for pages that will not be styled even if XDV is\n    enabled. By default, this includes the 'emptypage' view that is necessary\n    for the Kupu editor to work, and the manage_* pages that make up the ZMI.\n    \n  Note that when Zope is in debug mode, the theme will be re-compiled on\n  each request. In non-debug mode, it is compiled once on startup, and then\n  only if the control panel values are changed.\n\nResources in Python packages\n----------------------------\n\nWhen specifying the rules, theme and/or XSLT extension files, you should\nnormally use a file path. If you are distributing your theme in a Python\npackage that is installed using Distribute/setuptools (e.g. a standard\nPlone package installed via buildout), you can use the special ``python``\nURL scheme to reference your files.\n\nFor example, if your package is called ``my.package`` and it contains a\ndirectory ``mytheme``, you could reference the file ``rules.xml`` in that\nfile as::\n\n    ``python://my.package/mytheme/rules.xml``\n\nThis will be resolved to an absolute ``file://`` URL by the collective.xdv.\n\nStatic files and CSS\n--------------------\n\nTypically, the theme will reference static resources such as images or\nstylesheets. It is usually a good idea to keep all of these in a single,\ntop-level directory to minimise the risk of clashes with Plone content paths.\n\nIf you are using Zope/Plone standalone, you will need to make your static\nresources available through Zope, or serve them from a separate (sub-)domain.\nHere, you have a few options:\n\n * Create the static resources as ``File`` content objects through Plone.\n * Create the resources inside the ``portal_skins/custom`` folder in the ZMI.\n * Install the resources through a filesystem product.\n\nThe latter is most the appropriate option if you are distributing your theme\nas a Python package. In this case, you can register a resource directory in\nZCML like so::\n\n    <configure\n        xmlns=\"http://namespaces.zope.org/zope\"\n        xmlns:browser=\"http://namespaces.zope.org/browser\">\n        \n        ...\n        \n        <browser:resourceDirectory\n            name=\"my.package\"\n            directory=\"mytheme\"\n            />\n        \n        ...\n\n    </configure>\n\nThe ``mytheme`` directory should be in the same directory as the\n``configure.zcml`` file. You can now put your theme, rules and static\nresources here.\n\nIf you make sure that your theme uses only relative URLs to reference any\nstylesheets, JavaScript files, or images that it needs (including those\nreferenced from stylesheets), you should now be able to view your static\ntheme by going to a URL like::\n\n    http://localhost:8080/Plone/++resource++my.package/theme.html\n\nYou can now set the \"Absolute prefix\" configuration option to be\n'/++resource++my.package'. XDV will then turn those relative URLs into\nappropriate absolute URLs with this prefix.\n\nIf you have put Apache, nginx or IIS in front of Zope, you may want to serve\nthe static resources from the web server directly instead.\n\nUsing portal_css to manage your CSS\n-----------------------------------\n\nPlone's \"resource registries\", including the ``portal_css`` tool, can be used\nto manage CSS stylesheets. This offers several advantages over simply linking\nto your stylesheets in the template, such as:\n\n* Detailed control over the ordering of stylesheets\n* Merging of stylesheets to reduce the number of downloads required to render\n  your page\n* On-the-fly stylesheet compression (e.g. whitespace removal)\n* The ability to include or exclude a stylesheet based on an expression\n\nIt is usually desirable (and sometimes completely necessary) to leave the\ntheme file untouched, but you can still use ``portal_css`` to manage your\nstylesheets. The trick is to drop the theme's styles and then include all\nstyles from Plone. For example, you could add the following rules::\n\n    <drop theme=\"/html/head/link\" />\n    <drop theme=\"/html/head/style\" />\n    \n    <!-- Pull in Plone CSS -->\n    <append theme=\"/html/head\" content=\"/html/head/link | /html/head/style\" />\n\nThe use of an \"or\" expression for the content in the ``<append />`` rule means\nthat the precise ordering is maintained.\n\nFor an example of how to register stylesheets upon product installation using\nGenericSetup, see below. In short - use the ``cssregistry.xml`` import step\nin your GenericSetup profile directory.\n\nThere is one important caveat, however. Your stylesheet may include relative\nURL references of the following form:\n\n    background-image: url(../images/bg.jpg);\n    \nIf your stylesheet lives in a resource directory (e.g. it is registered in\n``portal_css`` with the id ``++resource++my.package/css/styles.css``), this\nwill work fine so long as the registry (and Zope) is in debug mode. The\nrelative URL will be resolved by the browser to\n``++resource++my.package/images/bg.jpg``.\n\nHowever, you may find that the relative URL breaks when the registry is put\ninto production mode. This is because resource merging also changes the URL\nof the stylesheet to be something like::\n\n    /plone-site/portal_css/Suburst+Theme/merged-cachekey-1234.css\n\nTo correct for this, you have a few options:\n\n1. Replace your static stylesheet with something dynamic so that you can\n   calculate it relative an absolute path on the fly. This obviously will not\n   work if you want to be able to view the theme standalone.\n2. Change your URLs to use an absolute path, e.g.\n   ``/++resource++my.theme/images/bg.jpg``. Again, this will break the\n   original stylesheet. However, you can perhaps create a Plone-only override\n   stylesheet that overrides each CSS property that uses a url().\n3. Avoid using ``portal_css`` for your static stylesheets.\n4. Use Plone 4. :-) In Plone 4 (b3 and later), the ``portal_css`` tool has an\n   option to parse a stylesheet for relative URLs and apply an absolute prefix\n   based on the stylesheet's debug-mode URL. The option is called\n   ``applyPrefix`` in the ``cssregistry.xml`` syntax.\n\nControlling Plone's default CSS\n-------------------------------\n\nIt is sometimes useful to show some of Plone's CSS in the styled site. You\ncan achieve this by using an XDV ``<append />`` rule or similar to copy the\nCSS from Plone's generated ``<head />`` into the theme. You can use the\nportal_css tool to turn off the style sheets you do not want.\n\nHowever, if you also want the site to be usable in non-themed mode (e.g. on\na separate URL), you may want to have a larger set of styles enabled when\nXDV is not used. To make this easier, you can use the following expressions\nas conditions in the portal_css tool (and portal_javascripts, portal_kss),\nin portal_actions, in page templates, and other places that use TAL expression\nsyntax::\n\n    request/HTTP_X_XDV | nothing\n\nThis expression will return True if XDV is currently enabled, in which case\nan HTTP header \"X-XDV\" will be set. By default, this will check both the\n'enabled' flag in the XDV control panel, and the current domain. If you later\ndeploy the theme to a fronting web server such as nginx, you can set the\nsame request header there to get the same effect, even if collective.xdv is\nuninstalled.\n\nUse::\n\n    not: request/HTTP_X_XDV | nothing\n    \nto 'hide' a style sheet from the themed site.\n\nA worked example\n=================\n\nThere are many ways to set up an XDV theme. For example, you could upload\nthe theme and rules as content in Plone use absolute paths to configure them.\nYou could also serve them from a separate static web server, or even load\nthem from the filesystem.\n\nTo create a deployable theme, however, it is often best to create a simple\nPython package. This also provides a natural home for theme-related \ncustomisations such as template overrides.\n\nAlthough a detailed tutorial is beyond the scope of this help file, a brief,\nworked example is shown below.\n\n1. Create a package and install it in your buildout::\n\n    $ cd src\n    $ paster create -t plone my.theme\n\nSee `the buildout manual`_ for details\n\nIf you have a recent ``ZopeSkel`` installed, this should work. Pick ``easy``\nmode. Answer \"yes\" when asked if you want to register a profile.\n\nThen edit ``buildout.cfg`` to add your new package (``my.theme`` above) to the\n``develop`` and ``eggs`` lists.\n\n2. Edit ``setup.py`` inside the newly created package\n\nThe ``install_requires`` list should be::\n\n    install_requires=[\n          'setuptools',\n          'collective.xdv',\n      ],\n\nRe-run buildout::\n\n    $ bin/buildout\n\n3. Edit ``configure.zcml`` inside the newly created package.\n\nAdd a resource directory inside the ``<configure />`` tag. Note that you may\nneed to add the ``browser`` namespace, as shown.\n\n    <configure\n        xmlns=\"http://namespaces.zope.org/zope\"\n        xmlns:browser=\"http://namespaces.zope.org/browser\"\n        xmlns:i18n=\"http://namespaces.zope.org/i18n\"\n        xmlns:genericsetup=\"http://namespaces.zope.org/genericsetup\"\n        i18n_domain=\"my.theme\">\n\n        <genericsetup:registerProfile\n            name=\"default\"\n            title=\"my.theme\"\n            directory=\"profiles/default\"\n            description=\"Installs the my.theme package\"\n            provides=\"Products.GenericSetup.interfaces.EXTENSION\"\n            />\n\n        <browser:resourceDirectory\n            name=\"my.theme\"\n            directory=\"static\"\n            />\n  \n    </configure>\n\nHere, we have used the package name, ``my.theme``, for the resource directory\nname. Adjust as appropriate.\n\n4. Add a ``static`` directory next to ``configure.zcml``.\n\n5. Put your theme and rules files into this directory.\n\nFor example, you may have a ``theme.html`` that references images in a\nsub-directory ``images/`` and stylesheets in a sub-directory ``css/``. Place\nthis file and the two directories inside the newly created ``static``\ndirectory.\n\nMake sure the theme uses relative URLs (e.g. ``<img src=\"images/foo.jpg\" />``)\nto reference its resources. This means you can open theme up from the\nfilesystem and view it in its splendour.\n\nAlso place a ``rules.xml`` file there. See the `XDV`_ documentation for\ndetails about its syntax. You can start with some very simple rules if\nyou just want to test::\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <rules\n        xmlns=\"http://namespaces.plone.org/xdv\"\n        xmlns:css=\"http://namespaces.plone.org/xdv+css\">\n        \n        <!-- Head: title -->\n        <replace theme=\"/html/head/title\" content=\"/html/head/title\" />\n    \n        <!-- Base tag -->\n        <replace theme=\"/html/head/base\" content=\"/html/head/base\" />\n    \n        <!-- Drop styles in the head - these are added back by including them from Plone -->\n        <drop theme=\"/html/head/link\" />\n        <drop theme=\"/html/head/style\" />\n    \n        <!-- Pull in Plone CSS -->\n        <append theme=\"/html/head\" content=\"/html/head/link | /html/head/style \" />\n\n    </rules>\n\nThese rules will pull in the ``<title />`` tag (i.e. the browser window's\ntitle), the ``<base />`` tag (necessary for certain Plone URLs to work\ncorrectly), and Plone's stylesheets.\n\nSee below for some more useful rules.\n\n6. Create the installation profile\n\nThe generated code above for the ``<genericsetup:registerProfile />`` tag\ncontains a reference to a directory ``profiles/default``. You may need to\ncreate this next to ``configure.zcml`` if it doesn't exist already, i.e.\ncreate a new directory ``profiles`` and inside it another directory\n``default``.\n\nIn this directory, add a file called ``metadata.xml`` containing::\n\n    <metadata>\n        <version>1</version>\n        <dependencies>\n            <dependency>profile-collective.xdv:default</dependency>\n        </dependencies>\n    </metadata>\n\nThis will install collective.xdv into Plone when my.theme is installed via\nthe add-on control panel later.\n\nAlso create a file called ``registry.xml``, with the following contents::\n\n    <registry>\n    \n        <!-- collective.xdv settings -->\n\n        <record interface=\"collective.xdv.interfaces.ITransformSettings\" field=\"domains\">\n            <value>\n                <element>domain.my:8080</element>\n            </value>\n        </record>\n\n        <record interface=\"collective.xdv.interfaces.ITransformSettings\" field=\"rules\">\n            <value>python://my.theme/static/rules.xml</value>\n        </record>\n    \n        <record interface=\"collective.xdv.interfaces.ITransformSettings\" field=\"theme\">\n            <value>python://my.theme/static/theme.html</value>\n        </record>\n    \n        <record interface=\"collective.xdv.interfaces.ITransformSettings\" field=\"absolute_prefix\">\n            <value>/++resource++my.theme</value>\n        </record>\n\n    </registry>\n\nReplace ``my.theme`` with your own package name, and ``rules.xml`` and\n``theme.html`` as appropriate.\n\nThis file configures the settings behind the XDV control panel.\n\nHint: If you have played with the control panel and want to export your\nsettings, you can create a snapshot in the ``portal_setup`` tool in the ZMI.\nExamine the ``registry.xml`` file this creates, and pick out the records that\nrelate to ``collective.xdv``. You should strip out the ``<field />`` tags\nin the export, so that you are left with ``<record />`` and ``<value />`` tags\nas shown above.\n\nAlso, add a ``cssregistry.xml`` in the ``profiles/default`` directory to\nconfigure the ``portal_css`` tool::\n\n    <?xml version=\"1.0\"?>\n    <object name=\"portal_css\">\n \n     <!-- Set conditions on stylesheets we don't want to pull in -->\n     <stylesheet\n         expression=\"not:request/HTTP_X_XDV | nothing\"\n         id=\"public.css\"\n         />\n     \n     <!-- Add new stylesheets -->\n     <!-- Note: applyPrefix is not available in Plone < 4.0b3 -->\n \n     <stylesheet title=\"\" authenticated=\"False\" cacheable=\"True\"\n        compression=\"safe\" conditionalcomment=\"\" cookable=\"True\" enabled=\"on\"\n        expression=\"request/HTTP_X_XDV | nothing\"\n        id=\"++resource++my.theme/css/styles.css\" media=\"\" rel=\"stylesheet\"\n        rendering=\"link\"\n        applyPrefix=\"True\"\n        />\n\n    </object>\n\nThis shows how to set a condition on an existing stylesheet, as well as\nregistering a brand new one. We've set ``applyPrefix`` to True here, as\nexplained above. This will only work in Plone 4.b3 and later. For earlier\nversions, simply take this out. \n\n7. Test\n\nStart up Zope and go to your Plone site. Your new package should show as\ninstallable in the add-on product control panel. When installed, it should\ninstall collective.xdv as a dependency and pre-configure it to use your theme\nand rule set. By default, the theme is not enabled, so you will need to go to\nthe control panel to switch it on.\n\nYou can now compare your untouched theme, the unstyled Plone site, and the\nthemed site by using the following URLs:\n\n* ``http://localhost:8080`` (or whatever you have configured as the styled\n  domain) for a styled Plone. If you used the sample rule above, this will\n  look almost exactly like your theme, but with the ``<title />`` tag\n  (normally shown in the title bar of your web browser) taken from Plone.\n* ``http://127.0.0.1:8080`` (presuming this is the port where Plone is\n  running) for an unstyled Plone.\n* ``http://localhost:8080/++resource++my.theme/theme.html`` for the pristine\n  theme. This is served as a static resource, almost as if it is being\n  opened on the filesystem.\n\nCommon rules\n============\n\nTo copy the page title::\n\n    <!-- Head: title -->\n    <replace theme=\"/html/head/title\" content=\"/html/head/title\" />\n\nTo copy the ``<base />`` tag (necessary for Plone's links to work)::\n\n    <!-- Base tag -->\n    <replace theme=\"/html/head/base\" content=\"/html/head/base\" />\n\nTo drop all styles and JavaScript resources from the theme and copy them\nfrom Plone's ``portal_css`` tool instead::\n\n    <!-- Drop styles in the head - these are added back by including them from Plone -->\n    <drop theme=\"/html/head/link\" />\n    <drop theme=\"/html/head/style\" />\n    \n    <!-- Pull in Plone CSS -->\n    <append theme=\"/html/head\" content=\"/html/head/link | /html/head/style\" />\n\nTo copy Plone's JavaScript resources::\n\n    <!-- Pull in Plone CSS -->\n    <append theme=\"/html/head\" content=\"/html/head/script\" />\n\nTo copy the class of the ``<body />`` tag (necessary for certain Plone\nJavaScript functions and styles to work properly)::\n\n    <!-- Body -->\n    <prepend theme=\"/html/body\" content=\"/html/body/attribute::class\" />    \n\nOther tips\n==========\n\n* Firebug is an excellent tool for inspecting the theme and content when\n  building rules. It even has an XPath extractor.\n* Read up on XPath. It's not as complex as it looks and very powerful.\n* Run Zope in debug mode whilst developing so that you don't need to restart\n  to see changes to theme, rules or, resources.\n\n.. _XDV: http://pypi.python.org/pypi/xdv\n.. _Deliverance: http://pypi.python.org/pypi/Deliverance\n.. _plone.transformchain: http://pypi.python.org/pypi/plone.transformchain\n.. _repoze.zope2: http://pypi.python.org/pypi/repoze.zope2\n.. _plone.transformchain: http://pypi.python.org/pypi/plone.transformchain\n.. _plone.registry: http://pypi.python.org/pypi/plone.registry\n.. _plone.app.registry: http://pypi.python.org/pypi/plone.app.registry\n.. _plone.autoform: http://pypi.python.org/pypi/plone.autoform\n.. _plone.z3cform: http://pypi.python.org/pypi/plone.z3cform\n.. _plone.app.z3cform: http://pypi.python.org/pypi/plone.app.z3cform\n.. _lxml: http://pypi.python.org/pypi/lxml\n.. _five.globalrequest: http://pypi.python.org/pypi/five.globalrequest\n.. _zope.globalrequest: http://pypi.python.org/pypi/zope.globalrequest\n.. _the buildout manual: http://plone.org/documentation/manual/developer-manual/managing-projects-with-buildout\n\n\nChangelog\n=========\n\n1.0rc11 - 2010-09-05\n--------------------\n\n* Add French translation, use real msgids in python files and cleanup obsolete\n  Japanese translations.\n  [laz]\n\n* Don't pretty print output - it can break browser renderings and introduces\n  unnecessary whitespace.\n  [elro]\n\n* Fix python:// URL resolution on Windows.\n  [optilude]\n\n* Clarify space separator warning.\n  [fvandijk]\n\n1.0rc10 - 2010-08-05\n--------------------\n\n* Use plone.subrequest.\n  [elro]\n\n* Use space as a separator for alternate themes. '|' is common in regular\n  expressions.\n  [elro]\n\n* Support XDV 0.4 <theme> directive so theme is not required on settings.\n  [elro]\n\n* Fix resolution of network (http/https) urls for external includes.\n  [elro]\n\n1.0rc9 - 2010-08-05\n-------------------\n\n* Use an IBeforeTraverseEvent on the Plone site root instead of an \n  IPubAfterTraversal event to hook in the X-XDV request header. This makes\n  the header work on 404 error pages.\n  [optilude]\n\n* Add collective.directoryresourcepatch to the Zope2.10 extras. This allows\n  for subdirectories to be traversed by the ResourceRegistries while running\n  Plone 3/Zope 2.10.\n  [dunlapm]\n\n* Require lxml>=2.2.4. The Zope2 KGS lists lxml=2.2, a version which errors on\n  invalid html.\n  [elro]\n\n* Fix extra.xsl support.\n  [elro]\n\n1.0rc8 - 2010-05-24\n-------------------\n\n* Support for styling sites using virtual hosting with a subpath.\n  https://bugs.launchpad.net/xdv/+bug/517244\n  [elro]\n\n* Exclusions for TinyMCE. https://bugs.launchpad.net/xdv/+bug/527807\n  [elro]\n\n1.0rc7 - 2010-05-23\n-------------------\n\n* UPGRADE NOTE: Reinstall product in the Add-ons control panel.\n\n* Switch on XInclude processing always.\n  [elro]\n\n* Fix Windows install. For running under Plone 4 on Windows, you must specify::\n\n    [versions]\n    lxml = 2.2.4\n\n until a newer lxml Windows binary egg is released.\n [elro]\n\n* Instead of the external resolver, let lxml read the network. You must now\n  explicitly enable ``Read network`` in the control panel.\n  [elro]\n\n1.0rc6 - 2010-05-21\n-------------------\n\n* Fix transform caching to account for different virtual hosts of the same\n  site and make cache invalidation work across ZEO clients.\n  [elro]\n\n1.0rc5 - 2010-04-21\n-------------------\n\n* Fix in-Plone content inclusion via the ``href`` mechanism, including the use\n  of relative paths in hrefs.\n  [optilude]\n\n* Ensured that the absolute prefix would work even in a virtual hosting\n  scenario where the aboslute path of the site root is '/'.\n  [optilude]\n  \n* Added an event handler which will set an HTTP request header 'X-XDV'\n  if XDV is enabled for the incoming domain. This can be used as a check\n  in e.g. portal_css, for example with a TALES expression like\n  'request/HTTP_X_XDV | nothing'. The @@xdv-check/enabled method\n  now just checks for the existence of this variable too. The idea is that\n  it is easier to replicate this in a pure-XSLT deployment scenario with\n  collective.xdv disabled, for example by setting the same request header in\n  nginx or Apache.\n  [optilude]\n\n* Made all zope paths resolve relative to the Plone site.\n  [marshalium]\n\n* Add support for resolving files with http/ftp absolute urls and zope paths.\n  [marshalium]\n\n* Make absolute_prefix prepend the Plone site path if necessary. This means\n  that an absolute prefix starting with / is always relative to the Plone\n  site root.\n  [optilude]\n\n* Add support for the python:// pseudo-scheme for the theme, rules and\n  extrauri files. See README.txt for details.\n  [optilude]\n\n* Improve the wording in the control panel\n  [optilude]\n\n* Fix a bug whereby the cached transforms (in non-debug-mode) would leak\n  across Plone sites in the same instance.\n  [optilude]\n\n* Remove the ``boilerplate`` parameter. Use ``extraurl`` instead.\n  [optilude]\n\n* Let collective.xdv depend on the new XDV egg, instead of dv.xdvserver.\n  [optilude]\n\n* Only invoke the transformation if collective.xdv is in fact installed.\n  Note: you may need to re-install the product after upgrading.\n  [optilude]\n\n* Use plone.transformchain to sequence transformation activities. Among\n  other things, this helps us avoid re-parsing/serialising lxml trees when\n  other things in the chain prefer to work with such representations of the\n  response. It also helps control the sequence of post-publication events.\n  [optilude]\n\n* Zope 2.12 / Plone 4 compatability.\n  [lrowe]\n\n1.0rc4 - 2009-10-27\n-------------------\n\n* Style error responses as well as successful responses.\n  [lrowe]\n\n* Use ZPublisher events instead of plone.postpublicationhook for compatibility\n  with Zope 2.12 / Plone 4. For Zope2.10 / Plone 3.x, you must now specify\n  \"collective.xdv [Zope2.10]\" in your buildout to bring in the package\n  ZPublisherEventsBackport.\n  [lrowe]\n\n* Added support for extraurl parameter\n  [mhora]\n\n* Added alternate themes and modified transform so it can decide by a path\n  regular expression which theme and rules files it will use for\n  transformation\n  [mhora]\n\n* Add /manage in unstyled paths default list.\n  [encolpe]\n  \n1.0a2 - 2009-07-12\n------------------\n\n* Catch up with changes in plone.registry's API.\n  [optilude]\n\n1.0a1 - 2009-04-17\n------------------\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/collective.xdv", "keywords": "plone xdv deliverance theme transform xslt", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "collective.xdv", "package_url": "https://pypi.org/project/collective.xdv/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.xdv/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/collective.xdv"}, "release_url": "https://pypi.org/project/collective.xdv/1.0rc11/", "requires_dist": null, "requires_python": null, "summary": "Integrates the xdv Deliverance implementation with Plone using a post-publication hook to transform content", "version": "1.0rc11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>XDV has been renamed to Diazo and this package has been replaced by plone.app.theming.</strong> Visit the <a href=\"http://diazo.org\" rel=\"nofollow\">Diazo website</a> or the <a href=\"http://pypi.python.org/pypi/plone.app.theming\" rel=\"nofollow\">plone.app.theming PyPI page</a> for further information.</p>\n<div id=\"introduction\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Introduction</a></h2>\n<p>This package offers a simple way to develop and deploy Plone themes using\nthe <a href=\"http://pypi.python.org/pypi/xdv\" rel=\"nofollow\">XDV</a> engine. If you are not familiar with XDV or rules-based theming,\ncheck out the <a href=\"http://pypi.python.org/pypi/xdv\" rel=\"nofollow\">XDV documentation</a>.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id2\" rel=\"nofollow\">Introduction</a><ul>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#resources-in-python-packages\" id=\"id5\" rel=\"nofollow\">Resources in Python packages</a></li>\n<li><a href=\"#static-files-and-css\" id=\"id6\" rel=\"nofollow\">Static files and CSS</a></li>\n<li><a href=\"#using-portal-css-to-manage-your-css\" id=\"id7\" rel=\"nofollow\">Using portal_css to manage your CSS</a></li>\n<li><a href=\"#controlling-plone-s-default-css\" id=\"id8\" rel=\"nofollow\">Controlling Plone\u2019s default CSS</a></li>\n</ul>\n</li>\n<li><a href=\"#a-worked-example\" id=\"id9\" rel=\"nofollow\">A worked example</a></li>\n<li><a href=\"#common-rules\" id=\"id10\" rel=\"nofollow\">Common rules</a></li>\n<li><a href=\"#other-tips\" id=\"id11\" rel=\"nofollow\">Other tips</a></li>\n<li><a href=\"#changelog\" id=\"id12\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#rc11-2010-09-05\" id=\"id13\" rel=\"nofollow\">1.0rc11 - 2010-09-05</a></li>\n<li><a href=\"#rc10-2010-08-05\" id=\"id14\" rel=\"nofollow\">1.0rc10 - 2010-08-05</a></li>\n<li><a href=\"#rc9-2010-08-05\" id=\"id15\" rel=\"nofollow\">1.0rc9 - 2010-08-05</a></li>\n<li><a href=\"#rc8-2010-05-24\" id=\"id16\" rel=\"nofollow\">1.0rc8 - 2010-05-24</a></li>\n<li><a href=\"#rc7-2010-05-23\" id=\"id17\" rel=\"nofollow\">1.0rc7 - 2010-05-23</a></li>\n<li><a href=\"#rc6-2010-05-21\" id=\"id18\" rel=\"nofollow\">1.0rc6 - 2010-05-21</a></li>\n<li><a href=\"#rc5-2010-04-21\" id=\"id19\" rel=\"nofollow\">1.0rc5 - 2010-04-21</a></li>\n<li><a href=\"#rc4-2009-10-27\" id=\"id20\" rel=\"nofollow\">1.0rc4 - 2009-10-27</a></li>\n<li><a href=\"#a2-2009-07-12\" id=\"id21\" rel=\"nofollow\">1.0a2 - 2009-07-12</a></li>\n<li><a href=\"#a1-2009-04-17\" id=\"id22\" rel=\"nofollow\">1.0a1 - 2009-04-17</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Installation</a></h3>\n<p>collective.xdv depends on:</p>\n<blockquote>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/plone.transformchain\" rel=\"nofollow\">plone.transformchain</a> to hook the transformation into the publisher</li>\n<li><a href=\"http://pypi.python.org/pypi/plone.registry\" rel=\"nofollow\">plone.registry</a> and <a href=\"http://pypi.python.org/pypi/plone.app.registry\" rel=\"nofollow\">plone.app.registry</a> to manage settings</li>\n<li><a href=\"http://pypi.python.org/pypi/plone.autoform\" rel=\"nofollow\">plone.autoform</a>, <a href=\"http://pypi.python.org/pypi/plone.z3cform\" rel=\"nofollow\">plone.z3cform</a> and <a href=\"http://pypi.python.org/pypi/plone.app.z3cform\" rel=\"nofollow\">plone.app.z3cform</a> to render the\ncontrol panel</li>\n<li><a href=\"http://pypi.python.org/pypi/five.globalrequest\" rel=\"nofollow\">five.globalrequest</a> and <a href=\"http://pypi.python.org/pypi/zope.globalrequest\" rel=\"nofollow\">zope.globalrequest</a> for internal request\naccess</li>\n<li><a href=\"http://pypi.python.org/pypi/xdv\" rel=\"nofollow\">XDV</a>, containing XDV itself itself</li>\n<li><a href=\"http://pypi.python.org/pypi/lxml\" rel=\"nofollow\">lxml</a> to perform the final transform</li>\n</ul>\n</blockquote>\n<p>These will all be pulled in automatically if you are using zc.buildout and\nfollow the installation instructions.</p>\n<p>To install collective.xdv into your Plone instance, locate the file\nbuildout.cfg in the root of your Plone instance directory on the file system,\nand open it in a text editor. Locate the section that looks like this:</p>\n<pre># extends = http://dist.plone.org/release/3.3/versions.cfg\nextends = versions.cfg\nversions = versions\n</pre>\n<p>It may also have a URL in the \u201cextends\u201d section, similar to the commented-out\nfirst line, depending on whether you pull the Plone configuration from the\nnetwork or locally.</p>\n<p>To add collective.xdv to our setup, we need some slightly different versions\nof a couple of the packages, so we extend the base config with a version list\nfrom the good-py service, so change this part of the configuration so it looks\nlike this:</p>\n<pre>extends =\n    versions.cfg\n    http://good-py.appspot.com/release/collective.xdv/1.0?plone=3.3.5\nversions = versions\n</pre>\n<p>Note that the last part of the URL above before the <tt>?</tt> is the xdv version\nnumber. There may be a newer version by the time you read this, so check out\nthe <a href=\"http://good-py.appspot.com/release/collective.xdv\" rel=\"nofollow\">overview page</a> for\nthe known good set.</p>\n<p>Replace <tt><span class=\"pre\">?plone=3.3.5</span></tt> with the version of Plone you are using. This\ndependency versions appropriate to your Plone.</p>\n<p>What happens here is that the dependency list for collective.xdv specifies\nsome new versions for you via the good-py URL. This way, you don\u2019t have to\nworry about getting the right versions, Buildout will handle it for you.</p>\n<p>Next step is to add the actual collective.xdv add-on to the \u201ceggs\u201d section of\nbuildout.cfg. Look for the section that looks like this:</p>\n<pre>eggs =\n    Plone\n</pre>\n<p>This section might have additional lines if you have other add-ons already\ninstalled. Just add the collective.xdv on a separate line, like this:</p>\n<pre>eggs =\n    Plone\n    collective.xdv [Zope2.10]\n</pre>\n<p>Note the use of the [Zope2.10] extra, which brings in the\nZPublisherEventsBackport package for forward compatibility with Zope 2.12 /\nPlone 4. If you are using Zope 2.12 or later (e.g. with Plone 4), you should\ndo:</p>\n<pre>eggs =\n    Plone\n    collective.xdv\n</pre>\n<p>Note that there is no need to add a ZCML slug as collective.xdv uses\nz3c.autoinclude to configure itself automatically.</p>\n<p>Once you have added these lines to your configuration file, it\u2019s time to run\nbuildout, so the system can add and set up collective.xdv for you. Go to the\ncommand line, and from the root of your Plone instance (same directory as\nbuildout.cfg is located in), run buildout like this:</p>\n<pre>$ bin/buildout\n</pre>\n<p>You will see output similar to this:</p>\n<pre>Getting distribution for 'collective.xdv==1.0'.\nGot collective.xdv 1.0.\nGetting distribution for 'plone.app.registry'.\nGot plone.app.registry 1.0a1.\nGetting distribution for 'plone.synchronize'.\nGot plone.synchronize 1.0b1.\n...\n</pre>\n<p>If everything went according to plan, you now have collective.xdv installed\nin your Zope instance.</p>\n<p>Next, start up Zope, e.g with:</p>\n<pre>$ bin/instance fg\n</pre>\n<p>Then go to the \u201cAdd-ons\u201d control panel in Plone as an administrator, and\ninstall the \u201cXDV theme support\u201d product. You should then notice a new\n\u201cXDV Theme\u201d control panel in Plone\u2019s site setup.</p>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Usage</a></h3>\n<p>In the \u201cXDV Theme\u201d control panel, you can set the following options:</p>\n<blockquote>\n<dl>\n<dt>Enabled yes/no</dt>\n<dd>Whether or not the transform is enabled.</dd>\n<dt>Domains</dt>\n<dd>A list of domains (including ports) that will be matched against\nthe HOST header to determine if the theme should be applied. Note that\n127.0.0.1 is never styled, to ensure there\u2019s always a way back into Plone\nto change these very settings. However, \u2018localhost\u2019 should work just fine.</dd>\n<dt>Theme</dt>\n<dd>A file path or URL pointing to the theme file. This is just a\nstatic HTML file.</dd>\n<dt>Rules</dt>\n<dd>The filesystem path to the rules XML file.</dd>\n<dt>Alternate themes</dt>\n<dd>A list of definitions of alternate themes and rules files for a different\npath. Should be of the form \u2018path theme rules\u2019 where path may use a\nregular expression syntax, theme is a file path or URL to the theme\ntemplate and rule is a file path to the rules file. If the theme or a\nrules string starts with \u2018python://\u2019 a path resolve is done, so for\nexample you could refer to a theme file in your theme package as\npython://yourtheme.xdvtheme/static/page.html .</dd>\n<dt>XSLT extension file</dt>\n<dd>It is possible to extend XDV with a custom XSLT file.\nIf you have such a file, give its URL here.</dd>\n<dt>Absolute prefix</dt>\n<dd>If given, any relative URL in an <tt>&lt;img /&gt;</tt>, <tt>&lt;link\n/&gt;</tt>, <tt>&lt;style /&gt;</tt> or <tt>&lt;script /&gt;</tt> in the theme HTML file will be\nprefixed by this URL snippet when the theme is compiled. This makes it\neasier to develop theme HTML/CSS on the file system using relative paths\nthat still work on any URL on the server.</dd>\n<dt>Unstyled paths</dt>\n<dd>This is used to give a list of URL patterns (using regular\nexpression syntax) for pages that will not be styled even if XDV is\nenabled. By default, this includes the \u2018emptypage\u2019 view that is necessary\nfor the Kupu editor to work, and the manage_* pages that make up the ZMI.</dd>\n</dl>\n<p>Note that when Zope is in debug mode, the theme will be re-compiled on\neach request. In non-debug mode, it is compiled once on startup, and then\nonly if the control panel values are changed.</p>\n</blockquote>\n<div id=\"resources-in-python-packages\">\n<h4><a href=\"#id5\" rel=\"nofollow\">Resources in Python packages</a></h4>\n<p>When specifying the rules, theme and/or XSLT extension files, you should\nnormally use a file path. If you are distributing your theme in a Python\npackage that is installed using Distribute/setuptools (e.g. a standard\nPlone package installed via buildout), you can use the special <tt>python</tt>\nURL scheme to reference your files.</p>\n<p>For example, if your package is called <tt>my.package</tt> and it contains a\ndirectory <tt>mytheme</tt>, you could reference the file <tt>rules.xml</tt> in that\nfile as:</p>\n<pre>``python://my.package/mytheme/rules.xml``\n</pre>\n<p>This will be resolved to an absolute <tt><span class=\"pre\">file://</span></tt> URL by the collective.xdv.</p>\n</div>\n<div id=\"static-files-and-css\">\n<h4><a href=\"#id6\" rel=\"nofollow\">Static files and CSS</a></h4>\n<p>Typically, the theme will reference static resources such as images or\nstylesheets. It is usually a good idea to keep all of these in a single,\ntop-level directory to minimise the risk of clashes with Plone content paths.</p>\n<p>If you are using Zope/Plone standalone, you will need to make your static\nresources available through Zope, or serve them from a separate (sub-)domain.\nHere, you have a few options:</p>\n<blockquote>\n<ul>\n<li>Create the static resources as <tt>File</tt> content objects through Plone.</li>\n<li>Create the resources inside the <tt>portal_skins/custom</tt> folder in the ZMI.</li>\n<li>Install the resources through a filesystem product.</li>\n</ul>\n</blockquote>\n<p>The latter is most the appropriate option if you are distributing your theme\nas a Python package. In this case, you can register a resource directory in\nZCML like so:</p>\n<pre>&lt;configure\n    xmlns=\"http://namespaces.zope.org/zope\"\n    xmlns:browser=\"http://namespaces.zope.org/browser\"&gt;\n\n    ...\n\n    &lt;browser:resourceDirectory\n        name=\"my.package\"\n        directory=\"mytheme\"\n        /&gt;\n\n    ...\n\n&lt;/configure&gt;\n</pre>\n<p>The <tt>mytheme</tt> directory should be in the same directory as the\n<tt>configure.zcml</tt> file. You can now put your theme, rules and static\nresources here.</p>\n<p>If you make sure that your theme uses only relative URLs to reference any\nstylesheets, JavaScript files, or images that it needs (including those\nreferenced from stylesheets), you should now be able to view your static\ntheme by going to a URL like:</p>\n<pre>http://localhost:8080/Plone/++resource++my.package/theme.html\n</pre>\n<p>You can now set the \u201cAbsolute prefix\u201d configuration option to be\n\u2018/++resource++my.package\u2019. XDV will then turn those relative URLs into\nappropriate absolute URLs with this prefix.</p>\n<p>If you have put Apache, nginx or IIS in front of Zope, you may want to serve\nthe static resources from the web server directly instead.</p>\n</div>\n<div id=\"using-portal-css-to-manage-your-css\">\n<h4><a href=\"#id7\" rel=\"nofollow\">Using portal_css to manage your CSS</a></h4>\n<p>Plone\u2019s \u201cresource registries\u201d, including the <tt>portal_css</tt> tool, can be used\nto manage CSS stylesheets. This offers several advantages over simply linking\nto your stylesheets in the template, such as:</p>\n<ul>\n<li>Detailed control over the ordering of stylesheets</li>\n<li>Merging of stylesheets to reduce the number of downloads required to render\nyour page</li>\n<li>On-the-fly stylesheet compression (e.g. whitespace removal)</li>\n<li>The ability to include or exclude a stylesheet based on an expression</li>\n</ul>\n<p>It is usually desirable (and sometimes completely necessary) to leave the\ntheme file untouched, but you can still use <tt>portal_css</tt> to manage your\nstylesheets. The trick is to drop the theme\u2019s styles and then include all\nstyles from Plone. For example, you could add the following rules:</p>\n<pre>&lt;drop theme=\"/html/head/link\" /&gt;\n&lt;drop theme=\"/html/head/style\" /&gt;\n\n&lt;!-- Pull in Plone CSS --&gt;\n&lt;append theme=\"/html/head\" content=\"/html/head/link | /html/head/style\" /&gt;\n</pre>\n<p>The use of an \u201cor\u201d expression for the content in the <tt>&lt;append /&gt;</tt> rule means\nthat the precise ordering is maintained.</p>\n<p>For an example of how to register stylesheets upon product installation using\nGenericSetup, see below. In short - use the <tt>cssregistry.xml</tt> import step\nin your GenericSetup profile directory.</p>\n<p>There is one important caveat, however. Your stylesheet may include relative\nURL references of the following form:</p>\n<blockquote>\nbackground-image: url(../images/bg.jpg);</blockquote>\n<p>If your stylesheet lives in a resource directory (e.g. it is registered in\n<tt>portal_css</tt> with the id <tt><span class=\"pre\">++resource++my.package/css/styles.css</span></tt>), this\nwill work fine so long as the registry (and Zope) is in debug mode. The\nrelative URL will be resolved by the browser to\n<tt><span class=\"pre\">++resource++my.package/images/bg.jpg</span></tt>.</p>\n<p>However, you may find that the relative URL breaks when the registry is put\ninto production mode. This is because resource merging also changes the URL\nof the stylesheet to be something like:</p>\n<pre>/plone-site/portal_css/Suburst+Theme/merged-cachekey-1234.css\n</pre>\n<p>To correct for this, you have a few options:</p>\n<ol>\n<li>Replace your static stylesheet with something dynamic so that you can\ncalculate it relative an absolute path on the fly. This obviously will not\nwork if you want to be able to view the theme standalone.</li>\n<li>Change your URLs to use an absolute path, e.g.\n<tt><span class=\"pre\">/++resource++my.theme/images/bg.jpg</span></tt>. Again, this will break the\noriginal stylesheet. However, you can perhaps create a Plone-only override\nstylesheet that overrides each CSS property that uses a url().</li>\n<li>Avoid using <tt>portal_css</tt> for your static stylesheets.</li>\n<li>Use Plone 4. :-) In Plone 4 (b3 and later), the <tt>portal_css</tt> tool has an\noption to parse a stylesheet for relative URLs and apply an absolute prefix\nbased on the stylesheet\u2019s debug-mode URL. The option is called\n<tt>applyPrefix</tt> in the <tt>cssregistry.xml</tt> syntax.</li>\n</ol>\n</div>\n<div id=\"controlling-plone-s-default-css\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Controlling Plone\u2019s default CSS</a></h4>\n<p>It is sometimes useful to show some of Plone\u2019s CSS in the styled site. You\ncan achieve this by using an XDV <tt>&lt;append /&gt;</tt> rule or similar to copy the\nCSS from Plone\u2019s generated <tt>&lt;head /&gt;</tt> into the theme. You can use the\nportal_css tool to turn off the style sheets you do not want.</p>\n<p>However, if you also want the site to be usable in non-themed mode (e.g. on\na separate URL), you may want to have a larger set of styles enabled when\nXDV is not used. To make this easier, you can use the following expressions\nas conditions in the portal_css tool (and portal_javascripts, portal_kss),\nin portal_actions, in page templates, and other places that use TAL expression\nsyntax:</p>\n<pre>request/HTTP_X_XDV | nothing\n</pre>\n<p>This expression will return True if XDV is currently enabled, in which case\nan HTTP header \u201cX-XDV\u201d will be set. By default, this will check both the\n\u2018enabled\u2019 flag in the XDV control panel, and the current domain. If you later\ndeploy the theme to a fronting web server such as nginx, you can set the\nsame request header there to get the same effect, even if collective.xdv is\nuninstalled.</p>\n<p>Use:</p>\n<pre>not: request/HTTP_X_XDV | nothing\n</pre>\n<p>to \u2018hide\u2019 a style sheet from the themed site.</p>\n</div>\n</div>\n<div id=\"a-worked-example\">\n<h3><a href=\"#id9\" rel=\"nofollow\">A worked example</a></h3>\n<p>There are many ways to set up an XDV theme. For example, you could upload\nthe theme and rules as content in Plone use absolute paths to configure them.\nYou could also serve them from a separate static web server, or even load\nthem from the filesystem.</p>\n<p>To create a deployable theme, however, it is often best to create a simple\nPython package. This also provides a natural home for theme-related\ncustomisations such as template overrides.</p>\n<p>Although a detailed tutorial is beyond the scope of this help file, a brief,\nworked example is shown below.</p>\n<ol>\n<li><p>Create a package and install it in your buildout:</p>\n<pre>$ cd src\n$ paster create -t plone my.theme\n</pre>\n</li>\n</ol>\n<p>See <a href=\"http://plone.org/documentation/manual/developer-manual/managing-projects-with-buildout\" rel=\"nofollow\">the buildout manual</a> for details</p>\n<p>If you have a recent <tt>ZopeSkel</tt> installed, this should work. Pick <tt>easy</tt>\nmode. Answer \u201cyes\u201d when asked if you want to register a profile.</p>\n<p>Then edit <tt>buildout.cfg</tt> to add your new package (<tt>my.theme</tt> above) to the\n<tt>develop</tt> and <tt>eggs</tt> lists.</p>\n<ol>\n<li>Edit <tt>setup.py</tt> inside the newly created package</li>\n</ol>\n<p>The <tt>install_requires</tt> list should be:</p>\n<pre>install_requires=[\n      'setuptools',\n      'collective.xdv',\n  ],\n</pre>\n<p>Re-run buildout:</p>\n<pre>$ bin/buildout\n</pre>\n<ol>\n<li>Edit <tt>configure.zcml</tt> inside the newly created package.</li>\n</ol>\n<p>Add a resource directory inside the <tt>&lt;configure /&gt;</tt> tag. Note that you may\nneed to add the <tt>browser</tt> namespace, as shown.</p>\n<blockquote>\n<dl>\n<dt>&lt;configure</dt>\n<dd><p>xmlns=\u201d<a href=\"http://namespaces.zope.org/zope\" rel=\"nofollow\">http://namespaces.zope.org/zope</a>\u201d\nxmlns:browser=\u201dhttp://namespaces.zope.org/browser\u201d\nxmlns:i18n=\u201dhttp://namespaces.zope.org/i18n\u201d\nxmlns:genericsetup=\u201dhttp://namespaces.zope.org/genericsetup\u201d\ni18n_domain=\u201dmy.theme\u201d&gt;</p>\n<dl>\n<dt>&lt;genericsetup:registerProfile</dt>\n<dd>name=\u201ddefault\u201d\ntitle=\u201dmy.theme\u201d\ndirectory=\u201dprofiles/default\u201d\ndescription=\u201dInstalls the my.theme package\u201d\nprovides=\u201dProducts.GenericSetup.interfaces.EXTENSION\u201d\n/&gt;</dd>\n<dt>&lt;browser:resourceDirectory</dt>\n<dd>name=\u201dmy.theme\u201d\ndirectory=\u201dstatic\u201d\n/&gt;</dd>\n</dl>\n</dd>\n</dl>\n<p>&lt;/configure&gt;</p>\n</blockquote>\n<p>Here, we have used the package name, <tt>my.theme</tt>, for the resource directory\nname. Adjust as appropriate.</p>\n<ol>\n<li>Add a <tt>static</tt> directory next to <tt>configure.zcml</tt>.</li>\n<li>Put your theme and rules files into this directory.</li>\n</ol>\n<p>For example, you may have a <tt>theme.html</tt> that references images in a\nsub-directory <tt>images/</tt> and stylesheets in a sub-directory <tt>css/</tt>. Place\nthis file and the two directories inside the newly created <tt>static</tt>\ndirectory.</p>\n<p>Make sure the theme uses relative URLs (e.g. <tt>&lt;img <span class=\"pre\">src=\"images/foo.jpg\"</span> /&gt;</tt>)\nto reference its resources. This means you can open theme up from the\nfilesystem and view it in its splendour.</p>\n<p>Also place a <tt>rules.xml</tt> file there. See the <a href=\"http://pypi.python.org/pypi/xdv\" rel=\"nofollow\">XDV</a> documentation for\ndetails about its syntax. You can start with some very simple rules if\nyou just want to test:</p>\n<pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;rules\n    xmlns=\"http://namespaces.plone.org/xdv\"\n    xmlns:css=\"http://namespaces.plone.org/xdv+css\"&gt;\n\n    &lt;!-- Head: title --&gt;\n    &lt;replace theme=\"/html/head/title\" content=\"/html/head/title\" /&gt;\n\n    &lt;!-- Base tag --&gt;\n    &lt;replace theme=\"/html/head/base\" content=\"/html/head/base\" /&gt;\n\n    &lt;!-- Drop styles in the head - these are added back by including them from Plone --&gt;\n    &lt;drop theme=\"/html/head/link\" /&gt;\n    &lt;drop theme=\"/html/head/style\" /&gt;\n\n    &lt;!-- Pull in Plone CSS --&gt;\n    &lt;append theme=\"/html/head\" content=\"/html/head/link | /html/head/style \" /&gt;\n\n&lt;/rules&gt;\n</pre>\n<p>These rules will pull in the <tt>&lt;title /&gt;</tt> tag (i.e. the browser window\u2019s\ntitle), the <tt>&lt;base /&gt;</tt> tag (necessary for certain Plone URLs to work\ncorrectly), and Plone\u2019s stylesheets.</p>\n<p>See below for some more useful rules.</p>\n<ol>\n<li>Create the installation profile</li>\n</ol>\n<p>The generated code above for the <tt>&lt;genericsetup:registerProfile /&gt;</tt> tag\ncontains a reference to a directory <tt>profiles/default</tt>. You may need to\ncreate this next to <tt>configure.zcml</tt> if it doesn\u2019t exist already, i.e.\ncreate a new directory <tt>profiles</tt> and inside it another directory\n<tt>default</tt>.</p>\n<p>In this directory, add a file called <tt>metadata.xml</tt> containing:</p>\n<pre>&lt;metadata&gt;\n    &lt;version&gt;1&lt;/version&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;profile-collective.xdv:default&lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/metadata&gt;\n</pre>\n<p>This will install collective.xdv into Plone when my.theme is installed via\nthe add-on control panel later.</p>\n<p>Also create a file called <tt>registry.xml</tt>, with the following contents:</p>\n<pre>&lt;registry&gt;\n\n    &lt;!-- collective.xdv settings --&gt;\n\n    &lt;record interface=\"collective.xdv.interfaces.ITransformSettings\" field=\"domains\"&gt;\n        &lt;value&gt;\n            &lt;element&gt;domain.my:8080&lt;/element&gt;\n        &lt;/value&gt;\n    &lt;/record&gt;\n\n    &lt;record interface=\"collective.xdv.interfaces.ITransformSettings\" field=\"rules\"&gt;\n        &lt;value&gt;python://my.theme/static/rules.xml&lt;/value&gt;\n    &lt;/record&gt;\n\n    &lt;record interface=\"collective.xdv.interfaces.ITransformSettings\" field=\"theme\"&gt;\n        &lt;value&gt;python://my.theme/static/theme.html&lt;/value&gt;\n    &lt;/record&gt;\n\n    &lt;record interface=\"collective.xdv.interfaces.ITransformSettings\" field=\"absolute_prefix\"&gt;\n        &lt;value&gt;/++resource++my.theme&lt;/value&gt;\n    &lt;/record&gt;\n\n&lt;/registry&gt;\n</pre>\n<p>Replace <tt>my.theme</tt> with your own package name, and <tt>rules.xml</tt> and\n<tt>theme.html</tt> as appropriate.</p>\n<p>This file configures the settings behind the XDV control panel.</p>\n<p>Hint: If you have played with the control panel and want to export your\nsettings, you can create a snapshot in the <tt>portal_setup</tt> tool in the ZMI.\nExamine the <tt>registry.xml</tt> file this creates, and pick out the records that\nrelate to <tt>collective.xdv</tt>. You should strip out the <tt>&lt;field /&gt;</tt> tags\nin the export, so that you are left with <tt>&lt;record /&gt;</tt> and <tt>&lt;value /&gt;</tt> tags\nas shown above.</p>\n<p>Also, add a <tt>cssregistry.xml</tt> in the <tt>profiles/default</tt> directory to\nconfigure the <tt>portal_css</tt> tool:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;object name=\"portal_css\"&gt;\n\n &lt;!-- Set conditions on stylesheets we don't want to pull in --&gt;\n &lt;stylesheet\n     expression=\"not:request/HTTP_X_XDV | nothing\"\n     id=\"public.css\"\n     /&gt;\n\n &lt;!-- Add new stylesheets --&gt;\n &lt;!-- Note: applyPrefix is not available in Plone &lt; 4.0b3 --&gt;\n\n &lt;stylesheet title=\"\" authenticated=\"False\" cacheable=\"True\"\n    compression=\"safe\" conditionalcomment=\"\" cookable=\"True\" enabled=\"on\"\n    expression=\"request/HTTP_X_XDV | nothing\"\n    id=\"++resource++my.theme/css/styles.css\" media=\"\" rel=\"stylesheet\"\n    rendering=\"link\"\n    applyPrefix=\"True\"\n    /&gt;\n\n&lt;/object&gt;\n</pre>\n<p>This shows how to set a condition on an existing stylesheet, as well as\nregistering a brand new one. We\u2019ve set <tt>applyPrefix</tt> to True here, as\nexplained above. This will only work in Plone 4.b3 and later. For earlier\nversions, simply take this out.</p>\n<ol>\n<li>Test</li>\n</ol>\n<p>Start up Zope and go to your Plone site. Your new package should show as\ninstallable in the add-on product control panel. When installed, it should\ninstall collective.xdv as a dependency and pre-configure it to use your theme\nand rule set. By default, the theme is not enabled, so you will need to go to\nthe control panel to switch it on.</p>\n<p>You can now compare your untouched theme, the unstyled Plone site, and the\nthemed site by using the following URLs:</p>\n<ul>\n<li><tt><span class=\"pre\">http://localhost:8080</span></tt> (or whatever you have configured as the styled\ndomain) for a styled Plone. If you used the sample rule above, this will\nlook almost exactly like your theme, but with the <tt>&lt;title /&gt;</tt> tag\n(normally shown in the title bar of your web browser) taken from Plone.</li>\n<li><tt><span class=\"pre\">http://127.0.0.1:8080</span></tt> (presuming this is the port where Plone is\nrunning) for an unstyled Plone.</li>\n<li><tt><span class=\"pre\">http://localhost:8080/++resource++my.theme/theme.html</span></tt> for the pristine\ntheme. This is served as a static resource, almost as if it is being\nopened on the filesystem.</li>\n</ul>\n</div>\n<div id=\"common-rules\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Common rules</a></h3>\n<p>To copy the page title:</p>\n<pre>&lt;!-- Head: title --&gt;\n&lt;replace theme=\"/html/head/title\" content=\"/html/head/title\" /&gt;\n</pre>\n<p>To copy the <tt>&lt;base /&gt;</tt> tag (necessary for Plone\u2019s links to work):</p>\n<pre>&lt;!-- Base tag --&gt;\n&lt;replace theme=\"/html/head/base\" content=\"/html/head/base\" /&gt;\n</pre>\n<p>To drop all styles and JavaScript resources from the theme and copy them\nfrom Plone\u2019s <tt>portal_css</tt> tool instead:</p>\n<pre>&lt;!-- Drop styles in the head - these are added back by including them from Plone --&gt;\n&lt;drop theme=\"/html/head/link\" /&gt;\n&lt;drop theme=\"/html/head/style\" /&gt;\n\n&lt;!-- Pull in Plone CSS --&gt;\n&lt;append theme=\"/html/head\" content=\"/html/head/link | /html/head/style\" /&gt;\n</pre>\n<p>To copy Plone\u2019s JavaScript resources:</p>\n<pre>&lt;!-- Pull in Plone CSS --&gt;\n&lt;append theme=\"/html/head\" content=\"/html/head/script\" /&gt;\n</pre>\n<p>To copy the class of the <tt>&lt;body /&gt;</tt> tag (necessary for certain Plone\nJavaScript functions and styles to work properly):</p>\n<pre>&lt;!-- Body --&gt;\n&lt;prepend theme=\"/html/body\" content=\"/html/body/attribute::class\" /&gt;\n</pre>\n</div>\n<div id=\"other-tips\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Other tips</a></h3>\n<ul>\n<li>Firebug is an excellent tool for inspecting the theme and content when\nbuilding rules. It even has an XPath extractor.</li>\n<li>Read up on XPath. It\u2019s not as complex as it looks and very powerful.</li>\n<li>Run Zope in debug mode whilst developing so that you don\u2019t need to restart\nto see changes to theme, rules or, resources.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Changelog</a></h3>\n<div id=\"rc11-2010-09-05\">\n<h4><a href=\"#id13\" rel=\"nofollow\">1.0rc11 - 2010-09-05</a></h4>\n<ul>\n<li>Add French translation, use real msgids in python files and cleanup obsolete\nJapanese translations.\n[laz]</li>\n<li>Don\u2019t pretty print output - it can break browser renderings and introduces\nunnecessary whitespace.\n[elro]</li>\n<li>Fix python:// URL resolution on Windows.\n[optilude]</li>\n<li>Clarify space separator warning.\n[fvandijk]</li>\n</ul>\n</div>\n<div id=\"rc10-2010-08-05\">\n<h4><a href=\"#id14\" rel=\"nofollow\">1.0rc10 - 2010-08-05</a></h4>\n<ul>\n<li>Use plone.subrequest.\n[elro]</li>\n<li>Use space as a separator for alternate themes. \u2018|\u2019 is common in regular\nexpressions.\n[elro]</li>\n<li>Support XDV 0.4 &lt;theme&gt; directive so theme is not required on settings.\n[elro]</li>\n<li>Fix resolution of network (http/https) urls for external includes.\n[elro]</li>\n</ul>\n</div>\n<div id=\"rc9-2010-08-05\">\n<h4><a href=\"#id15\" rel=\"nofollow\">1.0rc9 - 2010-08-05</a></h4>\n<ul>\n<li>Use an IBeforeTraverseEvent on the Plone site root instead of an\nIPubAfterTraversal event to hook in the X-XDV request header. This makes\nthe header work on 404 error pages.\n[optilude]</li>\n<li>Add collective.directoryresourcepatch to the Zope2.10 extras. This allows\nfor subdirectories to be traversed by the ResourceRegistries while running\nPlone 3/Zope 2.10.\n[dunlapm]</li>\n<li>Require lxml&gt;=2.2.4. The Zope2 KGS lists lxml=2.2, a version which errors on\ninvalid html.\n[elro]</li>\n<li>Fix extra.xsl support.\n[elro]</li>\n</ul>\n</div>\n<div id=\"rc8-2010-05-24\">\n<h4><a href=\"#id16\" rel=\"nofollow\">1.0rc8 - 2010-05-24</a></h4>\n<ul>\n<li>Support for styling sites using virtual hosting with a subpath.\n<a href=\"https://bugs.launchpad.net/xdv/+bug/517244\" rel=\"nofollow\">https://bugs.launchpad.net/xdv/+bug/517244</a>\n[elro]</li>\n<li>Exclusions for TinyMCE. <a href=\"https://bugs.launchpad.net/xdv/+bug/527807\" rel=\"nofollow\">https://bugs.launchpad.net/xdv/+bug/527807</a>\n[elro]</li>\n</ul>\n</div>\n<div id=\"rc7-2010-05-23\">\n<h4><a href=\"#id17\" rel=\"nofollow\">1.0rc7 - 2010-05-23</a></h4>\n<ul>\n<li><p>UPGRADE NOTE: Reinstall product in the Add-ons control panel.</p>\n</li>\n<li><p>Switch on XInclude processing always.\n[elro]</p>\n</li>\n<li><p>Fix Windows install. For running under Plone 4 on Windows, you must specify:</p>\n<pre>[versions]\nlxml = 2.2.4\n</pre>\n</li>\n</ul>\n<blockquote>\nuntil a newer lxml Windows binary egg is released.\n[elro]</blockquote>\n<ul>\n<li>Instead of the external resolver, let lxml read the network. You must now\nexplicitly enable <tt>Read network</tt> in the control panel.\n[elro]</li>\n</ul>\n</div>\n<div id=\"rc6-2010-05-21\">\n<h4><a href=\"#id18\" rel=\"nofollow\">1.0rc6 - 2010-05-21</a></h4>\n<ul>\n<li>Fix transform caching to account for different virtual hosts of the same\nsite and make cache invalidation work across ZEO clients.\n[elro]</li>\n</ul>\n</div>\n<div id=\"rc5-2010-04-21\">\n<h4><a href=\"#id19\" rel=\"nofollow\">1.0rc5 - 2010-04-21</a></h4>\n<ul>\n<li>Fix in-Plone content inclusion via the <tt>href</tt> mechanism, including the use\nof relative paths in hrefs.\n[optilude]</li>\n<li>Ensured that the absolute prefix would work even in a virtual hosting\nscenario where the aboslute path of the site root is \u2018/\u2019.\n[optilude]</li>\n<li>Added an event handler which will set an HTTP request header \u2018X-XDV\u2019\nif XDV is enabled for the incoming domain. This can be used as a check\nin e.g. portal_css, for example with a TALES expression like\n\u2018request/HTTP_X_XDV | nothing\u2019. The @@xdv-check/enabled method\nnow just checks for the existence of this variable too. The idea is that\nit is easier to replicate this in a pure-XSLT deployment scenario with\ncollective.xdv disabled, for example by setting the same request header in\nnginx or Apache.\n[optilude]</li>\n<li>Made all zope paths resolve relative to the Plone site.\n[marshalium]</li>\n<li>Add support for resolving files with http/ftp absolute urls and zope paths.\n[marshalium]</li>\n<li>Make absolute_prefix prepend the Plone site path if necessary. This means\nthat an absolute prefix starting with / is always relative to the Plone\nsite root.\n[optilude]</li>\n<li>Add support for the python:// pseudo-scheme for the theme, rules and\nextrauri files. See README.txt for details.\n[optilude]</li>\n<li>Improve the wording in the control panel\n[optilude]</li>\n<li>Fix a bug whereby the cached transforms (in non-debug-mode) would leak\nacross Plone sites in the same instance.\n[optilude]</li>\n<li>Remove the <tt>boilerplate</tt> parameter. Use <tt>extraurl</tt> instead.\n[optilude]</li>\n<li>Let collective.xdv depend on the new XDV egg, instead of dv.xdvserver.\n[optilude]</li>\n<li>Only invoke the transformation if collective.xdv is in fact installed.\nNote: you may need to re-install the product after upgrading.\n[optilude]</li>\n<li>Use plone.transformchain to sequence transformation activities. Among\nother things, this helps us avoid re-parsing/serialising lxml trees when\nother things in the chain prefer to work with such representations of the\nresponse. It also helps control the sequence of post-publication events.\n[optilude]</li>\n<li>Zope 2.12 / Plone 4 compatability.\n[lrowe]</li>\n</ul>\n</div>\n<div id=\"rc4-2009-10-27\">\n<h4><a href=\"#id20\" rel=\"nofollow\">1.0rc4 - 2009-10-27</a></h4>\n<ul>\n<li>Style error responses as well as successful responses.\n[lrowe]</li>\n<li>Use ZPublisher events instead of plone.postpublicationhook for compatibility\nwith Zope 2.12 / Plone 4. For Zope2.10 / Plone 3.x, you must now specify\n\u201ccollective.xdv [Zope2.10]\u201d in your buildout to bring in the package\nZPublisherEventsBackport.\n[lrowe]</li>\n<li>Added support for extraurl parameter\n[mhora]</li>\n<li>Added alternate themes and modified transform so it can decide by a path\nregular expression which theme and rules files it will use for\ntransformation\n[mhora]</li>\n<li>Add /manage in unstyled paths default list.\n[encolpe]</li>\n</ul>\n</div>\n<div id=\"a2-2009-07-12\">\n<h4><a href=\"#id21\" rel=\"nofollow\">1.0a2 - 2009-07-12</a></h4>\n<ul>\n<li>Catch up with changes in plone.registry\u2019s API.\n[optilude]</li>\n</ul>\n</div>\n<div id=\"a1-2009-04-17\">\n<h4><a href=\"#id22\" rel=\"nofollow\">1.0a1 - 2009-04-17</a></h4>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 788282, "releases": {"1.0a1": [{"comment_text": "", "digests": {"md5": "3bc2be62327a3d520a0a32e0ec88c8ee", "sha256": "a2dd36f6acd9d14a70bf73d33fc9c6637b8af9ff80cedc99ac7c55a04fe81de9"}, "downloads": -1, "filename": "collective.xdv-1.0a1.tar.gz", "has_sig": false, "md5_digest": "3bc2be62327a3d520a0a32e0ec88c8ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15567, "upload_time": "2009-04-17T08:16:21", "upload_time_iso_8601": "2009-04-17T08:16:21.556033Z", "url": "https://files.pythonhosted.org/packages/bb/46/91e904172817f6a5d1edddafa5536ae20450371d4699bd1e5df556847d4c/collective.xdv-1.0a1.tar.gz", "yanked": false}], "1.0rc1": [{"comment_text": "", "digests": {"md5": "7412200d8447485e175eefff38d94ed6", "sha256": "3635101cbb54d57f890d2923c83e57963090bf64c5e4554b740858f652cd74b4"}, "downloads": -1, "filename": "collective.xdv-1.0rc1.tar.gz", "has_sig": false, "md5_digest": "7412200d8447485e175eefff38d94ed6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15638, "upload_time": "2009-05-25T12:30:59", "upload_time_iso_8601": "2009-05-25T12:30:59.373726Z", "url": "https://files.pythonhosted.org/packages/ee/a3/a92396b1cfff36522f39dabb4ea18c7e2fe6a7f12b823b5753269a67ebf6/collective.xdv-1.0rc1.tar.gz", "yanked": false}], "1.0rc10": [{"comment_text": "", "digests": {"md5": "98bcd9e8593692f3f973d03a288714e8", "sha256": "bb774c71c32087ad8d74e7de4b4ddf6e69641515a79e960f360f0f9b1918a062"}, "downloads": -1, "filename": "collective.xdv-1.0rc10.tar.gz", "has_sig": false, "md5_digest": "98bcd9e8593692f3f973d03a288714e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45851, "upload_time": "2010-08-16T21:13:25", "upload_time_iso_8601": "2010-08-16T21:13:25.966420Z", "url": "https://files.pythonhosted.org/packages/b8/55/8e495779ab1df7ed8c8edeb3e85ea6379d453c5567701c05d15a18d79eaa/collective.xdv-1.0rc10.tar.gz", "yanked": false}], "1.0rc11": [{"comment_text": "", "digests": {"md5": "5cbd56865ca9335b8d8b4b7fa4c299ce", "sha256": "306783ed18862e2c8978e1a71fdbebbaaa013d80549be00a76666272e57c28b9"}, "downloads": -1, "filename": "collective.xdv-1.0rc11.zip", "has_sig": false, "md5_digest": "5cbd56865ca9335b8d8b4b7fa4c299ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60346, "upload_time": "2010-09-05T19:41:00", "upload_time_iso_8601": "2010-09-05T19:41:00.359294Z", "url": "https://files.pythonhosted.org/packages/cc/94/21781f48cd7f02a7aa4e927d33b26c0d06ca0a0e67021b418ef99b23491d/collective.xdv-1.0rc11.zip", "yanked": false}], "1.0rc2": [{"comment_text": "", "digests": {"md5": "dc5051272c0bcc23b7538b3ac0fb1080", "sha256": "98fb0dba363743cc55a003da49c45bf9bbc1e06720d4a4667c62cdf2e4512651"}, "downloads": -1, "filename": "collective.xdv-1.0rc2.tar.gz", "has_sig": false, "md5_digest": "dc5051272c0bcc23b7538b3ac0fb1080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15679, "upload_time": "2009-05-25T12:42:32", "upload_time_iso_8601": "2009-05-25T12:42:32.110136Z", "url": "https://files.pythonhosted.org/packages/40/bb/a9febdbb524cd152cd4ffc6209b319caaca24f83a74b7647efc78440a378/collective.xdv-1.0rc2.tar.gz", "yanked": false}], "1.0rc3": [{"comment_text": "", "digests": {"md5": "37fbf307cbc984901a9265b04f91495c", "sha256": "010f805b3d22d025f1d069b0336f238817e899041bd51a822c7558ac81ef3ac0"}, "downloads": -1, "filename": "collective.xdv-1.0rc3.tar.gz", "has_sig": false, "md5_digest": "37fbf307cbc984901a9265b04f91495c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15755, "upload_time": "2009-07-12T10:36:31", "upload_time_iso_8601": "2009-07-12T10:36:31.708860Z", "url": "https://files.pythonhosted.org/packages/4c/10/fe8c0cd6ff23765e79fae4bb4d03a9c287d02c1522160e9c201d4b2b603b/collective.xdv-1.0rc3.tar.gz", "yanked": false}], "1.0rc4": [{"comment_text": "", "digests": {"md5": "3dc811567593453b302d131eb326407f", "sha256": "c59a4f13e4f6bbfc6d491cdfa79ce778e65ff0f72581a9316140a98ce59e64bf"}, "downloads": -1, "filename": "collective.xdv-1.0rc4.tar.gz", "has_sig": false, "md5_digest": "3dc811567593453b302d131eb326407f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21063, "upload_time": "2009-10-27T16:27:53", "upload_time_iso_8601": "2009-10-27T16:27:53.847264Z", "url": "https://files.pythonhosted.org/packages/15/81/b27c264c96918609a200751c7a177eae7b53aff58f08f6fe7f24b65f818b/collective.xdv-1.0rc4.tar.gz", "yanked": false}], "1.0rc5": [{"comment_text": "", "digests": {"md5": "d8dda0927585f8ceb926a686e7222799", "sha256": "945bb6b2811235e789532d95b9ec5ee8f89a032a8e8c7fcb532ca6fa8ee84506"}, "downloads": -1, "filename": "collective.xdv-1.0rc5.zip", "has_sig": false, "md5_digest": "d8dda0927585f8ceb926a686e7222799", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58363, "upload_time": "2010-04-21T19:06:03", "upload_time_iso_8601": "2010-04-21T19:06:03.002039Z", "url": "https://files.pythonhosted.org/packages/4f/e6/2e18efb23a230bd39b0b8e1f69b426970f0584d0e5ac061627581dece841/collective.xdv-1.0rc5.zip", "yanked": false}], "1.0rc6": [{"comment_text": "", "digests": {"md5": "6539da96aeb6925a898dcbe075b9ce0d", "sha256": "66190d64d59b9d9f4a0cc60ef2425aa4f9a1f906cddb486176799660ec9a235b"}, "downloads": -1, "filename": "collective.xdv-1.0rc6.tar.gz", "has_sig": false, "md5_digest": "6539da96aeb6925a898dcbe075b9ce0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40678, "upload_time": "2010-05-21T21:07:20", "upload_time_iso_8601": "2010-05-21T21:07:20.682118Z", "url": "https://files.pythonhosted.org/packages/bd/49/ac52b1433dbb6179ff131c08b3a829c3e9769e7d05625d6b068e5c26eaa9/collective.xdv-1.0rc6.tar.gz", "yanked": false}], "1.0rc7": [{"comment_text": "", "digests": {"md5": "e776be2fff8c6539fbc018e73e784fbd", "sha256": "bd644b0fafcd2a8e20401e82384f427d9d8337680115cd5cfeaa40646153bc1a"}, "downloads": -1, "filename": "collective.xdv-1.0rc7.tar.gz", "has_sig": false, "md5_digest": "e776be2fff8c6539fbc018e73e784fbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42090, "upload_time": "2010-05-23T23:42:56", "upload_time_iso_8601": "2010-05-23T23:42:56.124922Z", "url": "https://files.pythonhosted.org/packages/77/19/306c1318cc4d7be88f02180b42b07c2956da931d80450fab68e36e2b165a/collective.xdv-1.0rc7.tar.gz", "yanked": false}], "1.0rc8": [{"comment_text": "", "digests": {"md5": "36941c5ad5cb493a999c6785c2289530", "sha256": "730da2ead58552c3ac868ce86734b3c61fd4d6ad4df616249b8772790effeb7a"}, "downloads": -1, "filename": "collective.xdv-1.0rc8.tar.gz", "has_sig": false, "md5_digest": "36941c5ad5cb493a999c6785c2289530", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43445, "upload_time": "2010-05-24T02:16:14", "upload_time_iso_8601": "2010-05-24T02:16:14.134787Z", "url": "https://files.pythonhosted.org/packages/00/d8/63a72a887adba2a7db70afbe955a1489a32b19b9cc136f1d49ffe720f140/collective.xdv-1.0rc8.tar.gz", "yanked": false}], "1.0rc9": [{"comment_text": "", "digests": {"md5": "0e7b37ff2b243aadf131e2f49c9f9ca9", "sha256": "70c81529e4e7ab79d0f0574b048efacc069568f95c76824d060d330292500b40"}, "downloads": -1, "filename": "collective.xdv-1.0rc9.zip", "has_sig": false, "md5_digest": "0e7b37ff2b243aadf131e2f49c9f9ca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59354, "upload_time": "2010-08-05T04:51:54", "upload_time_iso_8601": "2010-08-05T04:51:54.985441Z", "url": "https://files.pythonhosted.org/packages/32/3b/8766d69b660ce5b3cfcf9e977b0676b6fb06e9d4e9409c5982f41c923e21/collective.xdv-1.0rc9.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5cbd56865ca9335b8d8b4b7fa4c299ce", "sha256": "306783ed18862e2c8978e1a71fdbebbaaa013d80549be00a76666272e57c28b9"}, "downloads": -1, "filename": "collective.xdv-1.0rc11.zip", "has_sig": false, "md5_digest": "5cbd56865ca9335b8d8b4b7fa4c299ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60346, "upload_time": "2010-09-05T19:41:00", "upload_time_iso_8601": "2010-09-05T19:41:00.359294Z", "url": "https://files.pythonhosted.org/packages/cc/94/21781f48cd7f02a7aa4e927d33b26c0d06ca0a0e67021b418ef99b23491d/collective.xdv-1.0rc11.zip", "yanked": false}], "timestamp": "Fri May  8 00:44:42 2020"}