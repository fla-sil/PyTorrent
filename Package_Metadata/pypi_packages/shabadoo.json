{"info": {"author": "Nolan Conaway", "author_email": "nolanbconaway@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Shabadoo: very easy Bayesian regression.\n\n>![Imgur](https://i.imgur.com/yScWnEt.jpg)\n>\n> \"That's the worst name I ever heard.\"\n\n[![badge](https://github.com/nolanbconaway/shabadoo/workflows/Lint%20and%20Test/badge.svg)](https://github.com/nolanbconaway/shabadoo/actions?query=workflow%3A%22Lint+and+Test%22)\n[![badge](https://github.com/nolanbconaway/shabadoo/workflows/Scheduled%20Testing/badge.svg)](https://github.com/nolanbconaway/shabadoo/actions?query=workflow%3A%22Scheduled+Testing%22)\n[![codecov](https://codecov.io/gh/nolanbconaway/shabadoo/branch/master/graph/badge.svg?token=gIubsLSSHH)](https://codecov.io/gh/nolanbconaway/shabadoo)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/shabadoo)](https://pypi.org/project/shabadoo/)\n[![PyPI](https://img.shields.io/pypi/v/shabadoo)](https://pypi.org/project/shabadoo/)\n\nShabadoo is the worst kind of machine learning. It automates nothing; your models will not perform well and it will be your own fault. \n\n> **BEWARE**. Shabadoo is in an open alpha phase. It is authored by someone who does not know how to manage open source projects. Things will change as the author identifies mistakes and corrects (?) them.\n\nShabadoo is for people who want to do Bayesian regression but who do not want to write probabilistic programming code. You only need to assign priors to features and pass your pandas dataframe to a `.fit()` / `.predict()` API.\n\nShabadoo runs on [numpyro](http://num.pyro.ai/) and is basically a wrapper around the [numpyro Bayesian regression tutorial](https://pyro.ai/numpyro/bayesian_regression.html).\n\n## Quickstart\n\n### Install\n\n```sh\npip install shabadoo\n```\n\nor\n\n```sh\npip install git+https://github.com/nolanbconaway/shabadoo\n```\n\n### Specifying a Shabadoo Bayesian model\n\nShabadoo was designed to make it as easy as possible to test ideas about features and their priors. Models are defined using a class which contains configuration specifying how the model should behave.\n\nYou need to define a new class which inherits from one of the Shabadoo models. Currently, Normal, Poisson, and Bernoulli are implemented.\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom numpyro import distributions as dist\nfrom shabadoo import Normal\n\n\n# random number generator seed, to reproduce exactly.\nRNG_KEY = np.array([0, 0])\n\nclass Model(Normal):\n    dv = \"y\"\n    features = dict(\n        const=dict(transformer=1, prior=dist.Normal(0, 1)),\n        x=dict(transformer=lambda df: df.x, prior=dist.Normal(0, 1)),\n    )\n\n\ndf = pd.DataFrame(dict(x=[1, 2, 2, 3, 4, 5], y=[1, 2, 3, 4, 3, 5]))\n```\n\nThe `dv` attribute specifies the variable you are predicting. `features` is a dictionary of dictionaries, with one item per feature. Above, two features are defined (`const` and `x`). Each feature needs a `transformer` and a `prior`. \n\nThe transformer specifies how to obtain the feature given a source dataframe. The prior specifies your beliefs about the model's coefficient for that feature.\n\n### Fitting & predicting the model\n\nShabadoo models implement the well-known `.fit` / `.predict` api pattern.\n\n```python\nmodel = Model().fit(df, rng_key=RNG_KEY)\n# sample: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [00:04<00:00, 308.01it/s, 7 steps of size 4.17e-01. acc. prob=0.89]\n\nmodel.predict(df)\n\n\"\"\"\n0    1.351874\n1    2.219510\n2    2.219510\n3    3.087146\n4    3.954782\n5    4.822418\n\"\"\"\n```\n\n#### Credible Intervals\n\nUse `model.predict(df, ci=True)` to obtain a credible interval around the model's prediction. This interval accounts for error estimating the model's coefficients but does not account for the error around the model's point estimate (PRs welcome ya'll!).\n\n```python\nmodel.predict(df, ci=True)\n\n\"\"\"\n          y  ci_lower  ci_upper\n0  1.351874  0.730992  1.946659\n1  2.219510  1.753340  2.654678\n2  2.219510  1.753340  2.654678\n3  3.087146  2.663617  3.526434\n4  3.954782  3.401837  4.548420\n5  4.822418  4.047847  5.578753\n\"\"\"\n```\n\n### Inspecting the model\n\nShabadoo's model classes come with a number of model inspection methods. It should be easy to understand your model's composition and with Shabadoo it is!\n\n#### Print the model formula\n\nThe average and standard deviation of the MCMC samples are used to provide a rough sense of the coefficient in general.\n\n```python\nprint(model.formula)\n\n\"\"\"\ny = (\n    const * 0.48424(+-0.64618)\n  + x * 0.86764(+-0.21281)\n)\n\"\"\"\n```\n\n#### Look at the posterior samples\n\nSamples from fitted models can be accessed using `model.samples` (for raw device arrays) and `model.samples_df` (for a tidy DataFrame).\n\n\n```python\nmodel.samples['x']\n\"\"\"\nDeviceArray([[0.9443443 , 1.0215557 , 1.0401363 , 1.1768144 , 1.1752374 ,\n...\n\"\"\"\n\nmodel.samples_df.head()\n\"\"\"\n                 const         x\nchain sample                    \n0     0       0.074572  0.944344\n      1       0.214246  1.021556\n      2      -0.172168  1.040136\n      3       0.440978  1.176814\n      4       0.454463  1.175237\n\"\"\"\n```\n\n#### Measure prediction accuracy\n\nThe `Model.metrics()` method is packed with functionality. You should not have to write a lot of code to evaluate your model's prediction accuracy!\n\nObtaining aggregate statistics is as easy as:\n\n```python\nmodel.metrics(df)\n\n{'r': 0.8646920305474705,\n 'rsq': 0.7476923076923075,\n 'mae': 0.5661819464378061,\n 'mape': 0.21729708806356265}\n```\n\nFor per-point errors, use `aggerrs=False`. A pandas dataframe will be returned that you can join on your source data using its index.\n\n```python\nmodel.metrics(df, aggerrs=False)\n\n\"\"\"\n   residual         pe        ape\n0 -0.351874 -35.187366  35.187366\n1 -0.219510 -10.975488  10.975488\n2  0.780490  26.016341  26.016341\n3  0.912854  22.821353  22.821353\n4 -0.954782 -31.826066  31.826066\n5  0.177582   3.551638   3.551638\n\"\"\"\n```\n\nYou can use `grouped_metrics` to understand within-group errors. Under the hood, the predicted and actual `dv` are groupby-aggregated (default sum) and metrics are computed within each group.\n\n```python\ndf[\"group\"] = [1, 1, 1, 2, 2, 2]\nmodel.grouped_metrics(df, 'group')\n\n{'r': 1.0,\n 'rsq': 1.0,\n 'mae': 0.17238043177407247,\n 'mape': 0.023077819594065668}\n```\n\n```python\nmodel.grouped_metrics(df, \"group\", aggerrs=False)\n\n\"\"\"\n       residual        pe       ape\ngroup                              \n1     -0.209107 -3.485113  3.485113\n2     -0.135654 -1.130450  1.130450\n\"\"\"\n```\n\n### Saving and recovering a saved model\n\nShabadoo models have `to_json` and `from_dict` methods which allow models to be saved and recovered exactly. \n\n```python\nimport json\n\n# export to a JSON string\nmodel_json = model.to_json()\n\n# recover the model\nmodel_recovered = Model.from_dict(json.loads(model_json))\n\n# check the predictions are the same\nmodel_recovered.predict(df).equals(model.predict(df))\nTrue\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nolanbconaway/shabadoo", "keywords": "bayesian,regression,mcmc", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "shabadoo", "package_url": "https://pypi.org/project/shabadoo/", "platform": "", "project_url": "https://pypi.org/project/shabadoo/", "project_urls": {"Homepage": "https://github.com/nolanbconaway/shabadoo"}, "release_url": "https://pypi.org/project/shabadoo/0.1.0/", "requires_dist": ["numpyro (~=0.2.4)", "pandas (~=1.0.1)", "sphinx ; extra == 'docs'", "m2r ; extra == 'docs'", "numpydoc ; extra == 'docs'", "black ; extra == 'test'", "pytest ; extra == 'test'"], "requires_python": "", "summary": "Very easy Bayesian regression using numpyro.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Shabadoo: very easy Bayesian regression.</h1>\n<blockquote>\n<p><img alt=\"Imgur\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d8e6614839dc19147aad98fd8abba52512ce807/68747470733a2f2f692e696d6775722e636f6d2f795363576e45742e6a7067\"></p>\n<p>\"That's the worst name I ever heard.\"</p>\n</blockquote>\n<p><a href=\"https://github.com/nolanbconaway/shabadoo/actions?query=workflow%3A%22Lint+and+Test%22\" rel=\"nofollow\"><img alt=\"badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4fa0aecb147959b77b95735fc5db1c69c93d7eab/68747470733a2f2f6769746875622e636f6d2f6e6f6c616e62636f6e617761792f7368616261646f6f2f776f726b666c6f77732f4c696e74253230616e64253230546573742f62616467652e737667\"></a>\n<a href=\"https://github.com/nolanbconaway/shabadoo/actions?query=workflow%3A%22Scheduled+Testing%22\" rel=\"nofollow\"><img alt=\"badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acb156e2a05182bb46636a2e8b98dd245d8b010d/68747470733a2f2f6769746875622e636f6d2f6e6f6c616e62636f6e617761792f7368616261646f6f2f776f726b666c6f77732f5363686564756c656425323054657374696e672f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/nolanbconaway/shabadoo\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb544f7469b39683215fc7b27c14adaab012f40e/68747470733a2f2f636f6465636f762e696f2f67682f6e6f6c616e62636f6e617761792f7368616261646f6f2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d67497562734c53534848\"></a>\n<a href=\"https://pypi.org/project/shabadoo/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6fd9b5553a9591bd5a51924fe49f164cb44bde3e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7368616261646f6f\"></a>\n<a href=\"https://pypi.org/project/shabadoo/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/846941b4cafe1274f17c6a7e8ff54d857f3ad103/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7368616261646f6f\"></a></p>\n<p>Shabadoo is the worst kind of machine learning. It automates nothing; your models will not perform well and it will be your own fault.</p>\n<blockquote>\n<p><strong>BEWARE</strong>. Shabadoo is in an open alpha phase. It is authored by someone who does not know how to manage open source projects. Things will change as the author identifies mistakes and corrects (?) them.</p>\n</blockquote>\n<p>Shabadoo is for people who want to do Bayesian regression but who do not want to write probabilistic programming code. You only need to assign priors to features and pass your pandas dataframe to a <code>.fit()</code> / <code>.predict()</code> API.</p>\n<p>Shabadoo runs on <a href=\"http://num.pyro.ai/\" rel=\"nofollow\">numpyro</a> and is basically a wrapper around the <a href=\"https://pyro.ai/numpyro/bayesian_regression.html\" rel=\"nofollow\">numpyro Bayesian regression tutorial</a>.</p>\n<h2>Quickstart</h2>\n<h3>Install</h3>\n<pre>pip install shabadoo\n</pre>\n<p>or</p>\n<pre>pip install git+https://github.com/nolanbconaway/shabadoo\n</pre>\n<h3>Specifying a Shabadoo Bayesian model</h3>\n<p>Shabadoo was designed to make it as easy as possible to test ideas about features and their priors. Models are defined using a class which contains configuration specifying how the model should behave.</p>\n<p>You need to define a new class which inherits from one of the Shabadoo models. Currently, Normal, Poisson, and Bernoulli are implemented.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">numpyro</span> <span class=\"kn\">import</span> <span class=\"n\">distributions</span> <span class=\"k\">as</span> <span class=\"n\">dist</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shabadoo</span> <span class=\"kn\">import</span> <span class=\"n\">Normal</span>\n\n\n<span class=\"c1\"># random number generator seed, to reproduce exactly.</span>\n<span class=\"n\">RNG_KEY</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">(</span><span class=\"n\">Normal</span><span class=\"p\">):</span>\n    <span class=\"n\">dv</span> <span class=\"o\">=</span> <span class=\"s2\">\"y\"</span>\n    <span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">transformer</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">prior</span><span class=\"o\">=</span><span class=\"n\">dist</span><span class=\"o\">.</span><span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n        <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">transformer</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">prior</span><span class=\"o\">=</span><span class=\"n\">dist</span><span class=\"o\">.</span><span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n</pre>\n<p>The <code>dv</code> attribute specifies the variable you are predicting. <code>features</code> is a dictionary of dictionaries, with one item per feature. Above, two features are defined (<code>const</code> and <code>x</code>). Each feature needs a <code>transformer</code> and a <code>prior</code>.</p>\n<p>The transformer specifies how to obtain the feature given a source dataframe. The prior specifies your beliefs about the model's coefficient for that feature.</p>\n<h3>Fitting &amp; predicting the model</h3>\n<p>Shabadoo models implement the well-known <code>.fit</code> / <code>.predict</code> api pattern.</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">rng_key</span><span class=\"o\">=</span><span class=\"n\">RNG_KEY</span><span class=\"p\">)</span>\n<span class=\"c1\"># sample: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [00:04&lt;00:00, 308.01it/s, 7 steps of size 4.17e-01. acc. prob=0.89]</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">0    1.351874</span>\n<span class=\"sd\">1    2.219510</span>\n<span class=\"sd\">2    2.219510</span>\n<span class=\"sd\">3    3.087146</span>\n<span class=\"sd\">4    3.954782</span>\n<span class=\"sd\">5    4.822418</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h4>Credible Intervals</h4>\n<p>Use <code>model.predict(df, ci=True)</code> to obtain a credible interval around the model's prediction. This interval accounts for error estimating the model's coefficients but does not account for the error around the model's point estimate (PRs welcome ya'll!).</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">ci</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">          y  ci_lower  ci_upper</span>\n<span class=\"sd\">0  1.351874  0.730992  1.946659</span>\n<span class=\"sd\">1  2.219510  1.753340  2.654678</span>\n<span class=\"sd\">2  2.219510  1.753340  2.654678</span>\n<span class=\"sd\">3  3.087146  2.663617  3.526434</span>\n<span class=\"sd\">4  3.954782  3.401837  4.548420</span>\n<span class=\"sd\">5  4.822418  4.047847  5.578753</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Inspecting the model</h3>\n<p>Shabadoo's model classes come with a number of model inspection methods. It should be easy to understand your model's composition and with Shabadoo it is!</p>\n<h4>Print the model formula</h4>\n<p>The average and standard deviation of the MCMC samples are used to provide a rough sense of the coefficient in general.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">formula</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">y = (</span>\n<span class=\"sd\">    const * 0.48424(+-0.64618)</span>\n<span class=\"sd\">  + x * 0.86764(+-0.21281)</span>\n<span class=\"sd\">)</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h4>Look at the posterior samples</h4>\n<p>Samples from fitted models can be accessed using <code>model.samples</code> (for raw device arrays) and <code>model.samples_df</code> (for a tidy DataFrame).</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">DeviceArray([[0.9443443 , 1.0215557 , 1.0401363 , 1.1768144 , 1.1752374 ,</span>\n<span class=\"sd\">...</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">samples_df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">                 const         x</span>\n<span class=\"sd\">chain sample                    </span>\n<span class=\"sd\">0     0       0.074572  0.944344</span>\n<span class=\"sd\">      1       0.214246  1.021556</span>\n<span class=\"sd\">      2      -0.172168  1.040136</span>\n<span class=\"sd\">      3       0.440978  1.176814</span>\n<span class=\"sd\">      4       0.454463  1.175237</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h4>Measure prediction accuracy</h4>\n<p>The <code>Model.metrics()</code> method is packed with functionality. You should not have to write a lot of code to evaluate your model's prediction accuracy!</p>\n<p>Obtaining aggregate statistics is as easy as:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"p\">{</span><span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"mf\">0.8646920305474705</span><span class=\"p\">,</span>\n <span class=\"s1\">'rsq'</span><span class=\"p\">:</span> <span class=\"mf\">0.7476923076923075</span><span class=\"p\">,</span>\n <span class=\"s1\">'mae'</span><span class=\"p\">:</span> <span class=\"mf\">0.5661819464378061</span><span class=\"p\">,</span>\n <span class=\"s1\">'mape'</span><span class=\"p\">:</span> <span class=\"mf\">0.21729708806356265</span><span class=\"p\">}</span>\n</pre>\n<p>For per-point errors, use <code>aggerrs=False</code>. A pandas dataframe will be returned that you can join on your source data using its index.</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">aggerrs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">   residual         pe        ape</span>\n<span class=\"sd\">0 -0.351874 -35.187366  35.187366</span>\n<span class=\"sd\">1 -0.219510 -10.975488  10.975488</span>\n<span class=\"sd\">2  0.780490  26.016341  26.016341</span>\n<span class=\"sd\">3  0.912854  22.821353  22.821353</span>\n<span class=\"sd\">4 -0.954782 -31.826066  31.826066</span>\n<span class=\"sd\">5  0.177582   3.551638   3.551638</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p>You can use <code>grouped_metrics</code> to understand within-group errors. Under the hood, the predicted and actual <code>dv</code> are groupby-aggregated (default sum) and metrics are computed within each group.</p>\n<pre><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s2\">\"group\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">grouped_metrics</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">'group'</span><span class=\"p\">)</span>\n\n<span class=\"p\">{</span><span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>\n <span class=\"s1\">'rsq'</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>\n <span class=\"s1\">'mae'</span><span class=\"p\">:</span> <span class=\"mf\">0.17238043177407247</span><span class=\"p\">,</span>\n <span class=\"s1\">'mape'</span><span class=\"p\">:</span> <span class=\"mf\">0.023077819594065668</span><span class=\"p\">}</span>\n</pre>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">grouped_metrics</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s2\">\"group\"</span><span class=\"p\">,</span> <span class=\"n\">aggerrs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">       residual        pe       ape</span>\n<span class=\"sd\">group                              </span>\n<span class=\"sd\">1     -0.209107 -3.485113  3.485113</span>\n<span class=\"sd\">2     -0.135654 -1.130450  1.130450</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Saving and recovering a saved model</h3>\n<p>Shabadoo models have <code>to_json</code> and <code>from_dict</code> methods which allow models to be saved and recovered exactly.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\"># export to a JSON string</span>\n<span class=\"n\">model_json</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># recover the model</span>\n<span class=\"n\">model_recovered</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">model_json</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># check the predictions are the same</span>\n<span class=\"n\">model_recovered</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">equals</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n</pre>\n\n          </div>"}, "last_serial": 6965772, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "6b274efffbc9f7180251fc53720a58a7", "sha256": "2167aa2f4989eda4d979ffafa50549b176039b361a9ff6168f5f86c431ab7395"}, "downloads": -1, "filename": "shabadoo-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6b274efffbc9f7180251fc53720a58a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8606, "upload_time": "2020-02-15T20:36:44", "upload_time_iso_8601": "2020-02-15T20:36:44.738851Z", "url": "https://files.pythonhosted.org/packages/9c/7e/4b65a0601dfb821aac9a482de19307f089557c79a75b248b4a13a40e87ff/shabadoo-0.0.0-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c579b138feef63471e84bcad6ff2e2cd", "sha256": "d72d1d5191ebb2932d50e6735ca6f07603557d6e5ea8b29217851eb7c2dbf1a1"}, "downloads": -1, "filename": "shabadoo-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c579b138feef63471e84bcad6ff2e2cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8696, "upload_time": "2020-02-15T21:17:15", "upload_time_iso_8601": "2020-02-15T21:17:15.140339Z", "url": "https://files.pythonhosted.org/packages/cf/57/779ee4ee3448c98f047cef080548c81461a0d9e7f1b2fe1dd51930335e11/shabadoo-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a161313a04600707f85a0bf02282167", "sha256": "ab6c719ad3531cffc15c04e9f18edbcf963ca537695eace92a5883b3e3492d19"}, "downloads": -1, "filename": "shabadoo-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1a161313a04600707f85a0bf02282167", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10424, "upload_time": "2020-02-15T21:17:16", "upload_time_iso_8601": "2020-02-15T21:17:16.133336Z", "url": "https://files.pythonhosted.org/packages/d8/bc/29ea5a6a70972d0226c1baa29b26c1c426616650d46e3bb798aa57fb523d/shabadoo-0.0.2.tar.gz", "yanked": false}], "0.0.2.1": [{"comment_text": "", "digests": {"md5": "ebb1f4c5207c1eac0c2fa1c532d3edb9", "sha256": "78c97e7002825dff84b03f5899fb905434fb09d32d687887cb8f0a34c88f1567"}, "downloads": -1, "filename": "shabadoo-0.0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ebb1f4c5207c1eac0c2fa1c532d3edb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8711, "upload_time": "2020-02-15T21:45:33", "upload_time_iso_8601": "2020-02-15T21:45:33.451345Z", "url": "https://files.pythonhosted.org/packages/1a/e6/234102871aaa372b3e2137f14d194514d07a9076a7c95349465dd7c1025b/shabadoo-0.0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89c208b6aae79996a4e4b66a848a2b07", "sha256": "13c778e6288ce10f4cf96ce68437ed3f3c4ce70b9ccfbe0801be8a52c010f525"}, "downloads": -1, "filename": "shabadoo-0.0.2.1.tar.gz", "has_sig": false, "md5_digest": "89c208b6aae79996a4e4b66a848a2b07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10427, "upload_time": "2020-02-15T21:45:34", "upload_time_iso_8601": "2020-02-15T21:45:34.780479Z", "url": "https://files.pythonhosted.org/packages/51/42/55bf10d8db0398c74da699cb7357db027a8b5080f0665cec0f2ac11aa643/shabadoo-0.0.2.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d4f1a0006ae56b31649aa4e2b2d58a6f", "sha256": "351f02341c9dfae63de26a6c9e3cc9c77473da5c3968d63334eb0a9c86ea2e41"}, "downloads": -1, "filename": "shabadoo-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d4f1a0006ae56b31649aa4e2b2d58a6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9916, "upload_time": "2020-02-23T16:30:31", "upload_time_iso_8601": "2020-02-23T16:30:31.690754Z", "url": "https://files.pythonhosted.org/packages/92/3e/aa59981593df1ecfe0cfd9c2e1b7d9718b802967c3fa77cdfd35732cd155/shabadoo-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f1e6cc4e65f1e56823a8660aba497e0", "sha256": "08608bacd78b555c1473c6279033e783bc22522de9e800ae81b17369f3167528"}, "downloads": -1, "filename": "shabadoo-0.0.3.tar.gz", "has_sig": false, "md5_digest": "3f1e6cc4e65f1e56823a8660aba497e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13471, "upload_time": "2020-02-23T16:30:32", "upload_time_iso_8601": "2020-02-23T16:30:32.942643Z", "url": "https://files.pythonhosted.org/packages/32/93/f4c8aea08e097bdc12be3942ee15c1c777254c9c934c56de78bb1c1ee2ee/shabadoo-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "c38c31d1d7b05aad9947dd324af967d5", "sha256": "c1e60780858fd341379f020d578722c3f1b00f8dc0184afcd6589bc4014d1bc5"}, "downloads": -1, "filename": "shabadoo-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c38c31d1d7b05aad9947dd324af967d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10671, "upload_time": "2020-03-07T19:13:09", "upload_time_iso_8601": "2020-03-07T19:13:09.103054Z", "url": "https://files.pythonhosted.org/packages/43/3a/ba168b521fe14ba8f44a2e2a81ef3211db400fcc09f2b988e94190eb0889/shabadoo-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a117833b27486a530bf39b57899f8c6f", "sha256": "52576d4215f746777576069fbaeba89134ce6d82911db13d1809b7d684d6333f"}, "downloads": -1, "filename": "shabadoo-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a117833b27486a530bf39b57899f8c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14533, "upload_time": "2020-03-07T19:13:09", "upload_time_iso_8601": "2020-03-07T19:13:09.974978Z", "url": "https://files.pythonhosted.org/packages/69/19/4acd2e5094d8ea8f2001a5a92a1cce00e9162e91eb8533a2a0e307063787/shabadoo-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b99b6b388d71eaaf10f84cebdb9c6bc0", "sha256": "1179f2f3127e820a6a7f4b48057f93e74965d1cfcc3e1bcfde975b1958886452"}, "downloads": -1, "filename": "shabadoo-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b99b6b388d71eaaf10f84cebdb9c6bc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11632, "upload_time": "2020-04-07T00:58:38", "upload_time_iso_8601": "2020-04-07T00:58:38.026304Z", "url": "https://files.pythonhosted.org/packages/20/14/9543a1c9f311242bc2d8a2cbbf3506a921b5fe9b79e849d0b86ffff21923/shabadoo-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7adcb2267807d61296712802fbed4d98", "sha256": "dacd5be4f7ce1e5368d315331fbb7b16455c5caff846d7cffc003d8a5a249b29"}, "downloads": -1, "filename": "shabadoo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7adcb2267807d61296712802fbed4d98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16154, "upload_time": "2020-04-07T00:58:38", "upload_time_iso_8601": "2020-04-07T00:58:38.899621Z", "url": "https://files.pythonhosted.org/packages/d1/64/458514c5fb78ed74db3692d5665dacd412f575c27b826c0c986ca2ea631d/shabadoo-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b99b6b388d71eaaf10f84cebdb9c6bc0", "sha256": "1179f2f3127e820a6a7f4b48057f93e74965d1cfcc3e1bcfde975b1958886452"}, "downloads": -1, "filename": "shabadoo-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b99b6b388d71eaaf10f84cebdb9c6bc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11632, "upload_time": "2020-04-07T00:58:38", "upload_time_iso_8601": "2020-04-07T00:58:38.026304Z", "url": "https://files.pythonhosted.org/packages/20/14/9543a1c9f311242bc2d8a2cbbf3506a921b5fe9b79e849d0b86ffff21923/shabadoo-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7adcb2267807d61296712802fbed4d98", "sha256": "dacd5be4f7ce1e5368d315331fbb7b16455c5caff846d7cffc003d8a5a249b29"}, "downloads": -1, "filename": "shabadoo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7adcb2267807d61296712802fbed4d98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16154, "upload_time": "2020-04-07T00:58:38", "upload_time_iso_8601": "2020-04-07T00:58:38.899621Z", "url": "https://files.pythonhosted.org/packages/d1/64/458514c5fb78ed74db3692d5665dacd412f575c27b826c0c986ca2ea631d/shabadoo-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:57 2020"}