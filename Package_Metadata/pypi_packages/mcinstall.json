{"info": {"author": "Dinu Gherman", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Testing", "Topic :: System :: Installation/Setup"], "description": "mcinstall\n=========\n\n.. image:: http://img.shields.io/travis/deeplook/mcinstall.svg\n  :target: https://travis-ci.org/deeplook/mcinstall\n\n.. image:: https://img.shields.io/pypi/pyversions/mcinstall.svg\n  :target: https://pypi.org/project/mcinstall\n\n.. image:: https://img.shields.io/pypi/dm/mcinstall.svg\n  :target: https://pypi.org/project/mcinstall\n\n.. image:: https://img.shields.io/pypi/v/mcinstall.svg\n  :target: https://pypi.org/project/mcinstall\n\n.. image:: https://img.shields.io/pypi/l/mcinstall.svg\n  :target: https://pypi.org/project/mcinstall\n\nA script to quickly make/provision a fresh Miniconda installation from scratch.\n\nThe goal of this script is to quickly install a fresh Miniconda across different\noperating systems and use it in a CI/CD context, too. It will download a Miniconda\nbinary based on your operating system, unpack the binary and install it locally.\nIt was tested on MacOS and Linux ok, has decent Windows support and also aims to\nsupport ARM6 and ARM7 on the Raspberry Pi via `Berryconda \n<https://github.com/jjhelmus/berryconda/releases>`_ (sadly no longer maintained).\n\nThis script has no external dependencies, but expects to be run with Python 3.6+.\n\nN.B. This project is often updated online which is why its git history might look\nstrange...\n\nInstallation\n------------\n\nYou can use ``pip`` (for Python 3) to install and uninstall this package like the\nfollowing::\n\n     pip install mcinstall\n     pip uninstall mcinstall\n\nMore recent, not yet released, versions can be installed like the following\nwithout cloning the repo::\n\n     pip install -e git+https://github.com/deeplook/mcinstall#egg=mcinstall\n\nOr you clone the repo locally and install the package like this::\n\n     git clone https://github.com/deeplook/mcinstall.git\n     cd mcinstall\n     pip install -e .\n\nSample Usage\n------------\n\nIf you run it like this::\n\n    mcinstall ~/Downloads/mc3\n\nit will run a command like this on macOS (using some defaults and decent\nsystem introspection) to create a conda base installation::\n\n    bash Miniconda3-latest-MacOSX-x86_64.sh -b -f -p ~/Downloads/mc3\n\nThis can be activated then with a command like this::\n\n    source ~/Downloads/mc3/bin/activate\n\nWindows Example:\n\nOn Windows if you execute this command::\n\n    mcinstall %USERPROFILE%\\downloads\\mc3\n\nit will run a command like this::\n\n    start /wait \"\" Miniconda3-latest-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%USERPROFILE%\\downloads\\mc3\n\nThis conda installation can be activated then with a command like this::\n\n    %USERPROFILE%\\mc3\\condabin\\activate\n\nSuggested test::\n\n    mcinstall --verbose --pip-dependencies jupyter,torch ~/Downloads/torchy\n    source ~/Downloads/torchy/bin/activate\n    python -c \"import torch; print('ok')\"\n\nSuggested test dependencies files::\n\n    $ more ~/Downloads/reqs.txt\n    asciinema\n    torch\n    torchvision\n\n    $ more ~/Downloads/env.yml\n    name: test\n    channels:\n      - conda-forge\n    dependencies:\n      - voila\n\nSample run (replaced home directory with ``~`` manually)::\n\n    $ mcinstall --verbose --pip-dependencies jupyter,torch ~/Downloads/torchy\n    Making directory ~/Downloads/torchy.\n    Downloading https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh ...\n    Copying to ~/Downloads/Miniconda3-latest-MacOSX-x86_64.sh ...\n    Running command: bash ~/Downloads/Miniconda3-latest-MacOSX-x86_64.sh -b -f -p ~/Downloads/torchy\n    PREFIX=~/Downloads/torchy\n    Unpacking payload ...\n    Collecting package metadata (current_repodata.json): ...working... done\n    Solving environment: ...working... done\n\n    [...]\n\n    Preparing transaction: ...working... done\n    Executing transaction: ...working... done\n    installation finished.\n\n    Running command: ~/Downloads/torchy/bin/pip install jupyter\n    [...]\n\n    Running command: ~/Downloads/torchy/bin/pip install torch\n    [...]\n\n    Run this to start using your fresh Miniconda: \"source ~/Downloads/torchy/bin/activate\".\n\nSample log file (``mcinstall.log``)::\n\n    wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\n    mv Miniconda3-latest-MacOSX-x86_64.sh ~/Downloads/Miniconda3-latest-MacOSX-x86_64.sh\n    bash ~/Downloads/Miniconda3-latest-MacOSX-x86_64.sh -b -f -p ~/Downloads/torchy\n    source ~/Downloads/torchy/bin/activate\n    ~/Downloads/torchy/bin/pip install jupyter\n    ~/Downloads/torchy/bin/pip install torch\n\nTO DO\n-----\n\n- improve logging executed commands to reproduce them as a shell script\n- add self.clean_dest_path to MinicondaInstaller.__init__\n- same with self.download_path\n- consolidate Windows support\n- improve configuration\n- make a sample screencast with asciinema", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deeplook/mcinstall", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mcinstall", "package_url": "https://pypi.org/project/mcinstall/", "platform": "", "project_url": "https://pypi.org/project/mcinstall/", "project_urls": {"Homepage": "https://github.com/deeplook/mcinstall"}, "release_url": "https://pypi.org/project/mcinstall/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Quick-install/provision a fresh Miniconda distribution from scratch.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/deeplook/mcinstall\" rel=\"nofollow\"><img alt=\"http://img.shields.io/travis/deeplook/mcinstall.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa34cb0d6395f9a8098e84eb9487db050c1a9eca/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f646565706c6f6f6b2f6d63696e7374616c6c2e737667\"></a>\n<a href=\"https://pypi.org/project/mcinstall\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/mcinstall.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/335d0ca5a8a8a658524b473c20b97c07966c6363/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d63696e7374616c6c2e737667\"></a>\n<a href=\"https://pypi.org/project/mcinstall\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/mcinstall.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e754bcac7856045451e0588b60124b54b70aba3e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d63696e7374616c6c2e737667\"></a>\n<a href=\"https://pypi.org/project/mcinstall\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/mcinstall.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f08e9af51eb1523703f4518d44c4bd9cbc2db68/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d63696e7374616c6c2e737667\"></a>\n<a href=\"https://pypi.org/project/mcinstall\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/mcinstall.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d5e725d5ef04aac09580142087a37458e3d6afe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d63696e7374616c6c2e737667\"></a>\n<p>A script to quickly make/provision a fresh Miniconda installation from scratch.</p>\n<p>The goal of this script is to quickly install a fresh Miniconda across different\noperating systems and use it in a CI/CD context, too. It will download a Miniconda\nbinary based on your operating system, unpack the binary and install it locally.\nIt was tested on MacOS and Linux ok, has decent Windows support and also aims to\nsupport ARM6 and ARM7 on the Raspberry Pi via <a href=\"https://github.com/jjhelmus/berryconda/releases\" rel=\"nofollow\">Berryconda</a> (sadly no longer maintained).</p>\n<p>This script has no external dependencies, but expects to be run with Python 3.6+.</p>\n<p>N.B. This project is often updated online which is why its git history might look\nstrange\u2026</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can use <tt>pip</tt> (for Python 3) to install and uninstall this package like the\nfollowing:</p>\n<pre>pip install mcinstall\npip uninstall mcinstall\n</pre>\n<p>More recent, not yet released, versions can be installed like the following\nwithout cloning the repo:</p>\n<pre>pip install -e git+https://github.com/deeplook/mcinstall#egg=mcinstall\n</pre>\n<p>Or you clone the repo locally and install the package like this:</p>\n<pre>git clone https://github.com/deeplook/mcinstall.git\ncd mcinstall\npip install -e .\n</pre>\n</div>\n<div id=\"sample-usage\">\n<h2>Sample Usage</h2>\n<p>If you run it like this:</p>\n<pre>mcinstall ~/Downloads/mc3\n</pre>\n<p>it will run a command like this on macOS (using some defaults and decent\nsystem introspection) to create a conda base installation:</p>\n<pre>bash Miniconda3-latest-MacOSX-x86_64.sh -b -f -p ~/Downloads/mc3\n</pre>\n<p>This can be activated then with a command like this:</p>\n<pre>source ~/Downloads/mc3/bin/activate\n</pre>\n<p>Windows Example:</p>\n<p>On Windows if you execute this command:</p>\n<pre>mcinstall %USERPROFILE%\\downloads\\mc3\n</pre>\n<p>it will run a command like this:</p>\n<pre>start /wait \"\" Miniconda3-latest-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%USERPROFILE%\\downloads\\mc3\n</pre>\n<p>This conda installation can be activated then with a command like this:</p>\n<pre>%USERPROFILE%\\mc3\\condabin\\activate\n</pre>\n<p>Suggested test:</p>\n<pre>mcinstall --verbose --pip-dependencies jupyter,torch ~/Downloads/torchy\nsource ~/Downloads/torchy/bin/activate\npython -c \"import torch; print('ok')\"\n</pre>\n<p>Suggested test dependencies files:</p>\n<pre>$ more ~/Downloads/reqs.txt\nasciinema\ntorch\ntorchvision\n\n$ more ~/Downloads/env.yml\nname: test\nchannels:\n  - conda-forge\ndependencies:\n  - voila\n</pre>\n<p>Sample run (replaced home directory with <tt>~</tt> manually):</p>\n<pre>$ mcinstall --verbose --pip-dependencies jupyter,torch ~/Downloads/torchy\nMaking directory ~/Downloads/torchy.\nDownloading https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh ...\nCopying to ~/Downloads/Miniconda3-latest-MacOSX-x86_64.sh ...\nRunning command: bash ~/Downloads/Miniconda3-latest-MacOSX-x86_64.sh -b -f -p ~/Downloads/torchy\nPREFIX=~/Downloads/torchy\nUnpacking payload ...\nCollecting package metadata (current_repodata.json): ...working... done\nSolving environment: ...working... done\n\n[...]\n\nPreparing transaction: ...working... done\nExecuting transaction: ...working... done\ninstallation finished.\n\nRunning command: ~/Downloads/torchy/bin/pip install jupyter\n[...]\n\nRunning command: ~/Downloads/torchy/bin/pip install torch\n[...]\n\nRun this to start using your fresh Miniconda: \"source ~/Downloads/torchy/bin/activate\".\n</pre>\n<p>Sample log file (<tt>mcinstall.log</tt>):</p>\n<pre>wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\nmv Miniconda3-latest-MacOSX-x86_64.sh ~/Downloads/Miniconda3-latest-MacOSX-x86_64.sh\nbash ~/Downloads/Miniconda3-latest-MacOSX-x86_64.sh -b -f -p ~/Downloads/torchy\nsource ~/Downloads/torchy/bin/activate\n~/Downloads/torchy/bin/pip install jupyter\n~/Downloads/torchy/bin/pip install torch\n</pre>\n</div>\n<div id=\"to-do\">\n<h2>TO DO</h2>\n<ul>\n<li>improve logging executed commands to reproduce them as a shell script</li>\n<li>add self.clean_dest_path to MinicondaInstaller.__init__</li>\n<li>same with self.download_path</li>\n<li>consolidate Windows support</li>\n<li>improve configuration</li>\n<li>make a sample screencast with asciinema</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6713460, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "4dc4de950f465ebf08766dd2dbb86bca", "sha256": "a211bbd244150393424a7b2c0ba7f59182e5042d5d2bdafeb027b6fc0b0e20b3"}, "downloads": -1, "filename": "mcinstall-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4dc4de950f465ebf08766dd2dbb86bca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7313, "upload_time": "2020-02-27T21:22:29", "upload_time_iso_8601": "2020-02-27T21:22:29.973544Z", "url": "https://files.pythonhosted.org/packages/51/96/44fccc64a07d975d770258c8646fd0a638dcb02f87b30f05ec491e6c83d8/mcinstall-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4dc4de950f465ebf08766dd2dbb86bca", "sha256": "a211bbd244150393424a7b2c0ba7f59182e5042d5d2bdafeb027b6fc0b0e20b3"}, "downloads": -1, "filename": "mcinstall-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4dc4de950f465ebf08766dd2dbb86bca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7313, "upload_time": "2020-02-27T21:22:29", "upload_time_iso_8601": "2020-02-27T21:22:29.973544Z", "url": "https://files.pythonhosted.org/packages/51/96/44fccc64a07d975d770258c8646fd0a638dcb02f87b30f05ec491e6c83d8/mcinstall-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:57 2020"}