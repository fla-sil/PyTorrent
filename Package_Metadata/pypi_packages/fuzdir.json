{"info": {"author": "n3va", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Fuzdir\nWeb path fuzzer\n\n## Installing\nRun the following command to install with pip:\n```bash\n$ pip3 install fuzdir \n```\nRun the following commands to manually install:\n```bash\n$ git clone https://github.com/n3v4/fuzdir.git fuzdir\n$ cd fuzdir\n$ python3 setup.py install\n```\n\n## Usage\nYou can start the process of fuzzing files and directories with the following command:\n```bash\n$ fuzdir.py -u <url> -W <wordlist>\n```\nHelp message:\n```bash\nusage: fuzdir [-h] -u URL (-w WORDS | -W PATH) [-e EXTENSIONS] [-E PATH]\n              [-m METHOD] [-t THREADS] [--timeout TIMEOUT] [--retry RETRY]\n              [--retry-status-list STATUS_LIST] [--ignore-retry-fail]\n              [--throttling [SECONDS]] [--proxy URL] [--user-agent USER AGENT]\n              [-c COOKIE] [-H HEADER] [--allow-redirect] [-v]\n              [--report CONFIG] [-x CONDITIONS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nnecessary arguments:\n  -u URL, --url URL     target URL\n  -w WORDS, --wordlist WORDS\n                        a comma-separated list of words\n  -W PATH, --wordlist-path PATH\n                        path to word list\n\nextensions settings:\n  -e EXTENSIONS, --extensions EXTENSIONS\n                        extension list separated by comma\n  -E PATH, --extensions-file PATH\n                        path to file with extensions\n\nconnection settings:\n  -m METHOD, --method METHOD\n                        HTTP method to use^ by default is GET\n  -t THREADS, --threads THREADS\n                        the maximum number of threads that can be used to requests, by default 10 threads\n  --timeout TIMEOUT     connection timeout, by default 5s.\n  --retry RETRY         number of attempts to connect to the server, by default 3 times\n  --retry-status-list STATUS_LIST\n                        a comma-separated list of HTTP status codes for which should be retry on, by default 504, 502, 503\n  --ignore-retry-fail   ignore failed attempts to connect to server and continue fuzzing\n  --throttling [SECONDS]\n                        delay time in seconds (float) between requests sending, if the throttling value is not specified, it will automatically adjust during fuzzing\n  --proxy URL           HTTP or SOCKS5 proxy\n                        usage format:\n                          [http|socks5]://user:pass@host:port\n\nrequest settings:\n  --user-agent USER AGENT\n                        custom user agent, by default setting random user agent\n  -c COOKIE, --cookie COOKIE\n  -H HEADER, --header HEADER\n                        pass custom header(s)\n  --allow-redirect      allow follow up to redirection\n\nlogging settings:\n  -v, --verbose         verbose logging\n\nreports settings:\n  --report CONFIG       reports on responses\n                        available types:\n                          plain         a plain text reporting\n                          json          a reporting in JSON\n                        usage format:\n                          <type>[:components]=<path>\n                        available components:\n                          json:\n                            body        a response body\n                            length      a response content length\n                            headers     a response headers\n                            code        a response status code\n                        examples:\n                          plain=/tmp/report.txt                 a plain text reporting about the found status code, content length and path\n                          json=/tmp/report.json                 a reporting in JSON about the found status code, content length and path\n                          json:code,body=/tmp/report.json       a reporting in JSON about the found status code, body and path\n\nfilter:\n  -x CONDITIONS         conditions for responses matching\n                        available conditions:\n                          code          filter by status code\n                          length        filter by content length\n                          grep          filter by regex in response headers or / and body\n                        usage format:\n                          [ignore:]<condition>[:<area>]=<args>[;]\n                        examples:\n                          code=200,500                  match responses with 200 or 500 status code\n                          ignore:code=404               match responses exclude with 404 status code\n                          length=0-1337,7331            match responses with content length between 0 and 1337 or equals 7331\n                          grep='regex'                  match responses with 'regex' in headers or body\n                          grep:body='regex'             match responses with 'regex' in body\n                          code=200;length=0-1337        match responses with 200 status code and content length between 0 and 1337\n\nexamples:\n  fuzdir -u https://example.com -W wordlist.txt\n  fuzdir -u https://example.com -w index,robots -e html,txt\n  fuzdir -u https://example.com -W wordlist.txt -e html,js,php -x code=200\n  fuzdir -u https://example.com -W wordlist.txt -x code=200;ignore:grep:headers='Auth'\n```\n\n### Extensions\nExtensions can be specified as `.ext` or `ext`, or as a formatted string `%.ext`. For example, if wordlist contains only\n `index`, and the extensions `php`, `.html`, `%.txt`, the following path will be sent to the server:\n```\n/index\n/index.php\n/index.html\n/index.txt\n```\n\n### Throttling\nThrottling allows you to adjust the frequency of sending packets to the server. To do this, you can explicitly pass the\n number of seconds that must elapse before sending the next packet to the server. For example, if the argument\n `--throttling 2.5` is passed to fuzdir, then 1 packet will be sent to the server every 2.5 seconds.\n\nWhen throttling value isn't specified, fuzdir adjusts the throttling value during fuzzing, tracking the response time\n from the server.\n\nBy default, throttling completely disabled, similar `--throttling 0`. \n\n### Custom header(s)\nYou can pass one or more custom headers with `-H` or `--header`. For example, if you pass `-H Platform:web` and\n `-H \"Token: reWfBt1fnbgjEhA6wfs+Uw==\"` the following HTTP-request will be sent to the server:\n```\nGET /path HTTP/1.1\nHost: www.example.com\n...\nPlatform: web\nToken: reWfBt1fnbgjEhA6wfs+Uw==\n...\n```\n\n### Retry settings\nYou can specify a list of HTTP status codes with `--retry-status-list`, for which fuzdir should resend the request to\n the server, the default value is 502, 503, 504.\n\nThe number of attempts can be adjusted using `--retry` from 0 to 5 inclusive, by default 3 attempts.\n\nBy default, if all attempts were fail, fuzzing will be interrupted and the program will exit. To avoid this, you can use\n `--ignore-retry-fail`.\n\n### Report\nYou can write a fuzzing results to file with `--report` key.\n\nUsage format `<type>[:components]=<path>`\n- `type` report type,\n- `components` list of components that should be included in the report,\n- `path` path to file.\n\nCurrently it supports the following components:\n- `body` a response body,\n- `length` a response content length,\n- `headers` a response headers,\n- `code` a response status code.\n\nCurrently it supports the following report types:\n\n| Type | Default Components | Supported Components | Examples |\n| ---- | :----------------: | :------------------: | -------- |\n| plain | code, length | no | `--report plain=/tmp/report.txt` a plain text reporting about the found status code, content length and path |\n| json | code, length | body, length, headers, code | `--report json=/tmp/report.txt` a reporting in JSON about the found status code, content length and path<br/>`--report json:code,body=/tmp/report.json` a reporting in JSON about the found status code, body and path |\n\n### Conditions\nConditions is a system for filtering HTTP responses during fuzzing. \n\nUsage format `[ignore]:<condition>:[<area>]=<args>[;]`\n- `ignore` condition inverting,\n- `condition` condition name,\n- `area` search area (only grep supported),\n- `args` condition arguments.\n\nCurrently it supports the following conditions:\n\n| Condition | Area  | Args | Examples |\n| --------- | :---: | ---- | -------- |\n| code      | no    | list of status codes (or ranges) separated by comma | `-x code=200,500-503` match responses with 200, 500, 501, 502, or 503 status code |\n| length    | no    | list of lengths (or ranges) separated by comma | `-x length=0-1337,7331` match responses with content length between 0 and 1337 or equals 7331 |\n| grep      | headers, body | regex | `-x grep=token` match responses which contains 'token' in headers or body <br/>`-x grep:body=token` match responses which contains 'token' in body |\n\nYou can use multiple conditions, separating them with a semicolon, for example: `-x code=200;length=0-1337`\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/0xn3v4/fuzdir", "keywords": "fuzzing,web security,bruteforce,testing", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "fuzdir", "package_url": "https://pypi.org/project/fuzdir/", "platform": "", "project_url": "https://pypi.org/project/fuzdir/", "project_urls": {"Homepage": "https://github.com/0xn3v4/fuzdir"}, "release_url": "https://pypi.org/project/fuzdir/1.0.4/", "requires_dist": ["requests (==2.23.0)", "pysocks (==1.7.1)", "urllib3 (==1.25.8)", "colorama (==0.4.3)", "wheel ; extra == 'dev'", "twine ; extra == 'dev'"], "requires_python": ">=3.5", "summary": "Web path fuzzer", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Fuzdir</h1>\n<p>Web path fuzzer</p>\n<h2>Installing</h2>\n<p>Run the following command to install with pip:</p>\n<pre>$ pip3 install fuzdir \n</pre>\n<p>Run the following commands to manually install:</p>\n<pre>$ git clone https://github.com/n3v4/fuzdir.git fuzdir\n$ <span class=\"nb\">cd</span> fuzdir\n$ python3 setup.py install\n</pre>\n<h2>Usage</h2>\n<p>You can start the process of fuzzing files and directories with the following command:</p>\n<pre>$ fuzdir.py -u &lt;url&gt; -W &lt;wordlist&gt;\n</pre>\n<p>Help message:</p>\n<pre>usage: fuzdir <span class=\"o\">[</span>-h<span class=\"o\">]</span> -u URL <span class=\"o\">(</span>-w WORDS <span class=\"p\">|</span> -W PATH<span class=\"o\">)</span> <span class=\"o\">[</span>-e EXTENSIONS<span class=\"o\">]</span> <span class=\"o\">[</span>-E PATH<span class=\"o\">]</span>\n              <span class=\"o\">[</span>-m METHOD<span class=\"o\">]</span> <span class=\"o\">[</span>-t THREADS<span class=\"o\">]</span> <span class=\"o\">[</span>--timeout TIMEOUT<span class=\"o\">]</span> <span class=\"o\">[</span>--retry RETRY<span class=\"o\">]</span>\n              <span class=\"o\">[</span>--retry-status-list STATUS_LIST<span class=\"o\">]</span> <span class=\"o\">[</span>--ignore-retry-fail<span class=\"o\">]</span>\n              <span class=\"o\">[</span>--throttling <span class=\"o\">[</span>SECONDS<span class=\"o\">]]</span> <span class=\"o\">[</span>--proxy URL<span class=\"o\">]</span> <span class=\"o\">[</span>--user-agent USER AGENT<span class=\"o\">]</span>\n              <span class=\"o\">[</span>-c COOKIE<span class=\"o\">]</span> <span class=\"o\">[</span>-H HEADER<span class=\"o\">]</span> <span class=\"o\">[</span>--allow-redirect<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span>\n              <span class=\"o\">[</span>--report CONFIG<span class=\"o\">]</span> <span class=\"o\">[</span>-x CONDITIONS<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n\nnecessary arguments:\n  -u URL, --url URL     target URL\n  -w WORDS, --wordlist WORDS\n                        a comma-separated list of words\n  -W PATH, --wordlist-path PATH\n                        path to word list\n\nextensions settings:\n  -e EXTENSIONS, --extensions EXTENSIONS\n                        extension list separated by comma\n  -E PATH, --extensions-file PATH\n                        path to file with extensions\n\nconnection settings:\n  -m METHOD, --method METHOD\n                        HTTP method to use^ by default is GET\n  -t THREADS, --threads THREADS\n                        the maximum number of threads that can be used to requests, by default <span class=\"m\">10</span> threads\n  --timeout TIMEOUT     connection timeout, by default 5s.\n  --retry RETRY         number of attempts to connect to the server, by default <span class=\"m\">3</span> <span class=\"nb\">times</span>\n  --retry-status-list STATUS_LIST\n                        a comma-separated list of HTTP status codes <span class=\"k\">for</span> which should be retry on, by default <span class=\"m\">504</span>, <span class=\"m\">502</span>, <span class=\"m\">503</span>\n  --ignore-retry-fail   ignore failed attempts to connect to server and <span class=\"k\">continue</span> fuzzing\n  --throttling <span class=\"o\">[</span>SECONDS<span class=\"o\">]</span>\n                        delay <span class=\"nb\">time</span> in seconds <span class=\"o\">(</span>float<span class=\"o\">)</span> between requests sending, <span class=\"k\">if</span> the throttling value is not specified, it will automatically adjust during fuzzing\n  --proxy URL           HTTP or SOCKS5 proxy\n                        usage format:\n                          <span class=\"o\">[</span>http<span class=\"p\">|</span>socks5<span class=\"o\">]</span>://user:pass@host:port\n\nrequest settings:\n  --user-agent USER AGENT\n                        custom user agent, by default setting random user agent\n  -c COOKIE, --cookie COOKIE\n  -H HEADER, --header HEADER\n                        pass custom header<span class=\"o\">(</span>s<span class=\"o\">)</span>\n  --allow-redirect      allow follow up to redirection\n\nlogging settings:\n  -v, --verbose         verbose logging\n\nreports settings:\n  --report CONFIG       reports on responses\n                        available types:\n                          plain         a plain text reporting\n                          json          a reporting in JSON\n                        usage format:\n                          &lt;type&gt;<span class=\"o\">[</span>:components<span class=\"o\">]=</span>&lt;path&gt;\n                        available components:\n                          json:\n                            body        a response body\n                            length      a response content length\n                            headers     a response headers\n                            code        a response status code\n                        examples:\n                          <span class=\"nv\">plain</span><span class=\"o\">=</span>/tmp/report.txt                 a plain text reporting about the found status code, content length and path\n                          <span class=\"nv\">json</span><span class=\"o\">=</span>/tmp/report.json                 a reporting in JSON about the found status code, content length and path\n                          json:code,body<span class=\"o\">=</span>/tmp/report.json       a reporting in JSON about the found status code, body and path\n\nfilter:\n  -x CONDITIONS         conditions <span class=\"k\">for</span> responses matching\n                        available conditions:\n                          code          filter by status code\n                          length        filter by content length\n                          grep          filter by regex in response headers or / and body\n                        usage format:\n                          <span class=\"o\">[</span>ignore:<span class=\"o\">]</span>&lt;condition&gt;<span class=\"o\">[</span>:&lt;area&gt;<span class=\"o\">]=</span>&lt;args&gt;<span class=\"o\">[</span><span class=\"p\">;</span><span class=\"o\">]</span>\n                        examples:\n                          <span class=\"nv\">code</span><span class=\"o\">=</span><span class=\"m\">200</span>,500                  match responses with <span class=\"m\">200</span> or <span class=\"m\">500</span> status code\n                          ignore:code<span class=\"o\">=</span><span class=\"m\">404</span>               match responses exclude with <span class=\"m\">404</span> status code\n                          <span class=\"nv\">length</span><span class=\"o\">=</span><span class=\"m\">0</span>-1337,7331            match responses with content length between <span class=\"m\">0</span> and <span class=\"m\">1337</span> or equals <span class=\"m\">7331</span>\n                          <span class=\"nv\">grep</span><span class=\"o\">=</span><span class=\"s1\">'regex'</span>                  match responses with <span class=\"s1\">'regex'</span> in headers or body\n                          grep:body<span class=\"o\">=</span><span class=\"s1\">'regex'</span>             match responses with <span class=\"s1\">'regex'</span> in body\n                          <span class=\"nv\">code</span><span class=\"o\">=</span><span class=\"m\">200</span><span class=\"p\">;</span><span class=\"nv\">length</span><span class=\"o\">=</span><span class=\"m\">0</span>-1337        match responses with <span class=\"m\">200</span> status code and content length between <span class=\"m\">0</span> and <span class=\"m\">1337</span>\n\nexamples:\n  fuzdir -u https://example.com -W wordlist.txt\n  fuzdir -u https://example.com -w index,robots -e html,txt\n  fuzdir -u https://example.com -W wordlist.txt -e html,js,php -x <span class=\"nv\">code</span><span class=\"o\">=</span><span class=\"m\">200</span>\n  fuzdir -u https://example.com -W wordlist.txt -x <span class=\"nv\">code</span><span class=\"o\">=</span><span class=\"m\">200</span><span class=\"p\">;</span>ignore:grep:headers<span class=\"o\">=</span><span class=\"s1\">'Auth'</span>\n</pre>\n<h3>Extensions</h3>\n<p>Extensions can be specified as <code>.ext</code> or <code>ext</code>, or as a formatted string <code>%.ext</code>. For example, if wordlist contains only\n<code>index</code>, and the extensions <code>php</code>, <code>.html</code>, <code>%.txt</code>, the following path will be sent to the server:</p>\n<pre><code>/index\n/index.php\n/index.html\n/index.txt\n</code></pre>\n<h3>Throttling</h3>\n<p>Throttling allows you to adjust the frequency of sending packets to the server. To do this, you can explicitly pass the\nnumber of seconds that must elapse before sending the next packet to the server. For example, if the argument\n<code>--throttling 2.5</code> is passed to fuzdir, then 1 packet will be sent to the server every 2.5 seconds.</p>\n<p>When throttling value isn't specified, fuzdir adjusts the throttling value during fuzzing, tracking the response time\nfrom the server.</p>\n<p>By default, throttling completely disabled, similar <code>--throttling 0</code>.</p>\n<h3>Custom header(s)</h3>\n<p>You can pass one or more custom headers with <code>-H</code> or <code>--header</code>. For example, if you pass <code>-H Platform:web</code> and\n<code>-H \"Token: reWfBt1fnbgjEhA6wfs+Uw==\"</code> the following HTTP-request will be sent to the server:</p>\n<pre><code>GET /path HTTP/1.1\nHost: www.example.com\n...\nPlatform: web\nToken: reWfBt1fnbgjEhA6wfs+Uw==\n...\n</code></pre>\n<h3>Retry settings</h3>\n<p>You can specify a list of HTTP status codes with <code>--retry-status-list</code>, for which fuzdir should resend the request to\nthe server, the default value is 502, 503, 504.</p>\n<p>The number of attempts can be adjusted using <code>--retry</code> from 0 to 5 inclusive, by default 3 attempts.</p>\n<p>By default, if all attempts were fail, fuzzing will be interrupted and the program will exit. To avoid this, you can use\n<code>--ignore-retry-fail</code>.</p>\n<h3>Report</h3>\n<p>You can write a fuzzing results to file with <code>--report</code> key.</p>\n<p>Usage format <code>&lt;type&gt;[:components]=&lt;path&gt;</code></p>\n<ul>\n<li><code>type</code> report type,</li>\n<li><code>components</code> list of components that should be included in the report,</li>\n<li><code>path</code> path to file.</li>\n</ul>\n<p>Currently it supports the following components:</p>\n<ul>\n<li><code>body</code> a response body,</li>\n<li><code>length</code> a response content length,</li>\n<li><code>headers</code> a response headers,</li>\n<li><code>code</code> a response status code.</li>\n</ul>\n<p>Currently it supports the following report types:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th align=\"center\">Default Components</th>\n<th align=\"center\">Supported Components</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>plain</td>\n<td align=\"center\">code, length</td>\n<td align=\"center\">no</td>\n<td><code>--report plain=/tmp/report.txt</code> a plain text reporting about the found status code, content length and path</td>\n</tr>\n<tr>\n<td>json</td>\n<td align=\"center\">code, length</td>\n<td align=\"center\">body, length, headers, code</td>\n<td><code>--report json=/tmp/report.txt</code> a reporting in JSON about the found status code, content length and path<br><code>--report json:code,body=/tmp/report.json</code> a reporting in JSON about the found status code, body and path</td>\n</tr></tbody></table>\n<h3>Conditions</h3>\n<p>Conditions is a system for filtering HTTP responses during fuzzing.</p>\n<p>Usage format <code>[ignore]:&lt;condition&gt;:[&lt;area&gt;]=&lt;args&gt;[;]</code></p>\n<ul>\n<li><code>ignore</code> condition inverting,</li>\n<li><code>condition</code> condition name,</li>\n<li><code>area</code> search area (only grep supported),</li>\n<li><code>args</code> condition arguments.</li>\n</ul>\n<p>Currently it supports the following conditions:</p>\n<table>\n<thead>\n<tr>\n<th>Condition</th>\n<th align=\"center\">Area</th>\n<th>Args</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>code</td>\n<td align=\"center\">no</td>\n<td>list of status codes (or ranges) separated by comma</td>\n<td><code>-x code=200,500-503</code> match responses with 200, 500, 501, 502, or 503 status code</td>\n</tr>\n<tr>\n<td>length</td>\n<td align=\"center\">no</td>\n<td>list of lengths (or ranges) separated by comma</td>\n<td><code>-x length=0-1337,7331</code> match responses with content length between 0 and 1337 or equals 7331</td>\n</tr>\n<tr>\n<td>grep</td>\n<td align=\"center\">headers, body</td>\n<td>regex</td>\n<td><code>-x grep=token</code> match responses which contains 'token' in headers or body <br><code>-x grep:body=token</code> match responses which contains 'token' in body</td>\n</tr></tbody></table>\n<p>You can use multiple conditions, separating them with a semicolon, for example: <code>-x code=200;length=0-1337</code></p>\n\n          </div>"}, "last_serial": 6993522, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a5cdfd7ab64d2c613b89aabf02b444b7", "sha256": "852ca792269018072fbd06e993f54827689bb66d84fbe057ae1c1a3b49fc4fb4"}, "downloads": -1, "filename": "fuzdir-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a5cdfd7ab64d2c613b89aabf02b444b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36811, "upload_time": "2019-09-05T15:12:03", "upload_time_iso_8601": "2019-09-05T15:12:03.876835Z", "url": "https://files.pythonhosted.org/packages/fe/44/9f307a829b01a7c86fb2cbae168214f10ce3a481af664edfa61777925b97/fuzdir-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4237b7f8e912b183019202896581da73", "sha256": "55b719737e0288d6b0fedfea098f1bd869130aa692a757e3a173ac4f60c19082"}, "downloads": -1, "filename": "fuzdir-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4237b7f8e912b183019202896581da73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 19423, "upload_time": "2019-09-05T15:12:06", "upload_time_iso_8601": "2019-09-05T15:12:06.111385Z", "url": "https://files.pythonhosted.org/packages/1d/ce/54b7cc40a7ce5bc417d86341ac41eb391e1258b816078df9ee38ee2a6eec/fuzdir-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5ed740cbcfa7dab19f49eefa7ddf7be3", "sha256": "f8c7a42cb13f4492e2b66d541ab24c3e1620178683d29420d798ed2bf7533325"}, "downloads": -1, "filename": "fuzdir-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5ed740cbcfa7dab19f49eefa7ddf7be3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 37942, "upload_time": "2020-02-22T18:28:38", "upload_time_iso_8601": "2020-02-22T18:28:38.293893Z", "url": "https://files.pythonhosted.org/packages/26/e9/1fcd1a6dc8164fd8e7c426705c51c328e0c4b4f5621cb2d5ea5cbe89c929/fuzdir-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81f9c19c2377be6c662d4e66eef1e991", "sha256": "1229fb2bf0eea2b7c27a9bab7954e7957b39eb95f88d2fb57cfa1ccdc6d93c89"}, "downloads": -1, "filename": "fuzdir-1.0.1.tar.gz", "has_sig": false, "md5_digest": "81f9c19c2377be6c662d4e66eef1e991", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21006, "upload_time": "2020-02-22T18:28:41", "upload_time_iso_8601": "2020-02-22T18:28:41.372556Z", "url": "https://files.pythonhosted.org/packages/61/a3/43212f3f521277dc9679a8297b56d0785318006bd0763668139edc661ae8/fuzdir-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "c0a7a83c683fbc6b5861da143030b4a5", "sha256": "b2f9d689f300c5fcdec090d7b3708d09006f9f164fc0b4e25a6e1e6f58f7f1aa"}, "downloads": -1, "filename": "fuzdir-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c0a7a83c683fbc6b5861da143030b4a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 38062, "upload_time": "2020-03-16T10:34:18", "upload_time_iso_8601": "2020-03-16T10:34:18.089423Z", "url": "https://files.pythonhosted.org/packages/2d/3e/be6df076c13a15ea3c2a80ec82bb29e6767da6de4984bff28c13beea584d/fuzdir-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d2211cde0996ad8a0849599ad323801", "sha256": "0a64fe4ea51fd259fe866f033d6be2a4fa8c57ee094dca04ac4508e3efa3a424"}, "downloads": -1, "filename": "fuzdir-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0d2211cde0996ad8a0849599ad323801", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21133, "upload_time": "2020-03-16T10:34:20", "upload_time_iso_8601": "2020-03-16T10:34:20.089975Z", "url": "https://files.pythonhosted.org/packages/87/73/e0835dbee9d070d1c67a90d46c88307fc61aa15806d207852d7f60081f04/fuzdir-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "cdf45eaf35b7112d5ae6c6591e10bfe5", "sha256": "a3f5cc2cf9e81ddebb132e5a72ee00b5430fde3e71c621d5f1cea111fe6ec7ef"}, "downloads": -1, "filename": "fuzdir-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cdf45eaf35b7112d5ae6c6591e10bfe5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 44413, "upload_time": "2020-04-10T14:11:45", "upload_time_iso_8601": "2020-04-10T14:11:45.930676Z", "url": "https://files.pythonhosted.org/packages/36/61/840959066bbfc03c66f1f088554cc2be29b98b40bc628bc7c5e261d9d427/fuzdir-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f90d80777c9151514e8951234a809884", "sha256": "4bf3eff7c77a966ec28b568f838002cb2f7aaa17b85c36e968cce5bb6f8bbc96"}, "downloads": -1, "filename": "fuzdir-1.0.4.tar.gz", "has_sig": false, "md5_digest": "f90d80777c9151514e8951234a809884", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24016, "upload_time": "2020-04-10T14:11:48", "upload_time_iso_8601": "2020-04-10T14:11:48.546108Z", "url": "https://files.pythonhosted.org/packages/d4/04/301c77db192d56b7c4fa0a12bd9a0a0b57053810d2ea3594b032156d2703/fuzdir-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cdf45eaf35b7112d5ae6c6591e10bfe5", "sha256": "a3f5cc2cf9e81ddebb132e5a72ee00b5430fde3e71c621d5f1cea111fe6ec7ef"}, "downloads": -1, "filename": "fuzdir-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cdf45eaf35b7112d5ae6c6591e10bfe5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 44413, "upload_time": "2020-04-10T14:11:45", "upload_time_iso_8601": "2020-04-10T14:11:45.930676Z", "url": "https://files.pythonhosted.org/packages/36/61/840959066bbfc03c66f1f088554cc2be29b98b40bc628bc7c5e261d9d427/fuzdir-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f90d80777c9151514e8951234a809884", "sha256": "4bf3eff7c77a966ec28b568f838002cb2f7aaa17b85c36e968cce5bb6f8bbc96"}, "downloads": -1, "filename": "fuzdir-1.0.4.tar.gz", "has_sig": false, "md5_digest": "f90d80777c9151514e8951234a809884", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24016, "upload_time": "2020-04-10T14:11:48", "upload_time_iso_8601": "2020-04-10T14:11:48.546108Z", "url": "https://files.pythonhosted.org/packages/d4/04/301c77db192d56b7c4fa0a12bd9a0a0b57053810d2ea3594b032156d2703/fuzdir-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:33 2020"}