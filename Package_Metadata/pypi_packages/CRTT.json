{"info": {"author": "Trelay Wang", "author_email": "trelwan@celestica.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "CRTT\n====\n\nOnly Python3 is supported.\n\nCRTT is shortened for Common [RESTful] Test Tool; it can be used in following occasions:\n\n* Test the reliability of RESTful server \n* Find unknown issue\n* Stress test for RESTful server \n* Key String matching\n\n\n\nSupport\n-------\n* This tool is intended to support all kinds of RESTful server, from Redfish to...\n\nVersion\n-------\n\n0.8.1\n\nInstallation\n------------\nInstall with pip3::\n\n    pip3 install CRTT\n\nQuick Start\n-----------\n.. code-block:: python\n\n    from CRTT.get_nodes import GET_NODE\n    get_node=GET_NODE(host, client_app_ver, port)\n    get_node.scan_node()\n\nOr use build-in sample::\n\n    `./test.py <https://github.com/trelay/CRTT/blob/master/CRTT/test/test.py>`_\n\n\nArguments & CLI options:\n------------------------\n\n* --help: Print help message and exit\n* --config-dir: Path to a config directory to pull \\*.conf files from.\n* --config-file: Path to a config file to use. Multiple config files can be specified, with values in later files taking precedence.\n* --CLI-comp_file: The url response data comparing file\n* --CLI-cycles: How many times we scan the nodes\n* --CLI-time_to_stop: CLI_TIME_TO_STOP: If both this option and --CLI-cycles are set, the one which comes first will take effect.\n* --CLI-retry: How many times retries after failure\n\nResponse check from URL:\n------------------------\n\nThe conf file for checking response from URL is defined in file `value_check.conf <https://github.com/trelay/CRTT/blob/master/CRTT/test/value_check.conf>`_ by default, but you can also define it when run CLI, refer the help::\n\n\n    [MemoryModule]\t#The name of current url, can be found by key \"Name\"\n\n    SizeGB= 16\t\t#The size of memory of current url\n\n    VoltageVolt= 1.21 < 1.30 < x < 1.40 < 1.51\t\t#The threshold check format, it should have LowerThresholdFatal,     LowerThresholdWarning, UpperThresholdWarning, UpperThresholdCritical\n\n\nIf the node_name or the check_key is not defined properly, it won't check without any warning.\n\nFor Advanced user:\n------------------\n\nThis application provides a config file to let user customize, modify. One can change the setting in file `CRTT.conf <https://github.com/trelay/CRTT/blob/master/CRTT/test/CRTT.conf>`_, here is the help for this document::\n\n    [REST]\n\n    root_node='http://10.204.29.243:8888/redfish/v1/Chassis/Defaultstring/Thermal'\n    #Noen by default, This one will take effect of rest of this section.\n    client_name=redfish     #The name of the RESTful client application.\n    host=10.204.29.244      #The IP of this RESTful server \n    bind_port = 8888        #The port of the RESTful service.\n    ver_support = 1         #The ver list of the RESTful client application.\n    client_app_ver=1        #The ver of this RESTful client app\n    subnode_keys= '@odata.id'\t# All sub nodes should be found in a dict, and this defines the key to find sub nodes\n\n    \n\n    [MAIN]\n\n    value_file=Red_lib/product/url_dict.conf    #This file is used to check the\n    #response(response is in JSON format) from RESTful server .\n    cycle=20                #How many cycles to scan all the nodes\n    processes =4\t\t\t#How many of processes in this running host\n\n    [LOG]\n    app_name='redfish_test'     #The log channel name\n    logfilename='redfish.html'  #The file name to save html log file\n    log_format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s'\n    root_level=10               #The root log level\n    ch_level=10                 #The log level for console stream logging\n    fh_level=20                 #The log level for html file stream logging\n    html_color=color_2          #How we display the msg in the html file, it has options, choose one from below dict.\n    color_1=err_color: red, warn_color: yellow, info_color: white, dbg_color: white\n    color_2=err_color: red, warn_color: orange, info_color: white, dbg_color:blue\n\n    Keyword_Italic=True         #The setting of keyword in html log\n    Keyword_FontSize=3          #The setting of keyword in html log\n    Keyword_tag_start=\"<hl>\"    #The setting of keyword in html log\n    Keyword_tag_end=\"</hl>\"     #The setting of keyword in html log\n    title=Red fish log          #The tile for html log\n    console_log=True            #Display log to console?\n    HtmlmaxBytes=52428800       # You can specify particular values of maxBytes and backupCount to allow the \n                            #file to rollover at predetermined size if rotating is set to True, otherwise\n                            #rotate file without backCount limited.\n    Html_backupCount=5\n    Html_Rotating=True\n\n    [REQUEST]\n    http_time_warn=0.5          #Setting of response time from RESTful server \n    http_time_error=1.2         #Setting of response time from RESTful server \n    timeout=3                   #The max time(second) to get response from RESTful server \n    retries=4                   #How many times to retry if error occurs\n    delay=1.5                   #Time delay during a next retry if error occurs\n    backoff=2                   #backoff of delay\n    failonerror=False           #Stop test if fail still occurs if retries.\n\n\nModules defined:\n----------------\n\n|\n\n`[get_nodes.py] <https://github.com/trelay/CRTT/blob/master/CRTT/get_nodes.py>`_: \n\nThis file contains classes and functions: GEN_URL, GET_NODE, URL_REQUEST and Responses check:\n\nGEN_URL: This class is to build complete URL. \n\nA complete URL to interact with RESTful server is like this: :\n\n    http://10.204.29.221:8888/redfish/v1/Managers/1\n\nhere is example to use::\n\n    url=GEN_URL('10.204.29.221')\n    gen_url=GEN_URL('10.204.29.221')\n    url=gen_url.get_url('/redfish/v1/Managers/1')\n\nGET_NODE: Scan and find all the child nodes from root(is node_path=None) or any node that is defined in function \"scan_node\", and put them into a list, during this scanning and searching, one can compare the value returned from RESTful server . url_list contains all the urls after scanning.\n\nURL_REQUEST: Send Request to RESTful server, generally, the request should be one of GET, PUT, POST, DELETE. This class can handle all http errors. Example::\n\n    url_request=URL_REQUEST('http://10.204.29.221:8888/redfish/v1/Managers/1',username,password)\n    url_request.get_req(value)   #Value: a python dict\n\nReponse_check: It has two functions: 1. Check the response from RESTful server which defined in file [url_dict.conf] 2. Check if request time exceeds the limit.\n\n|\n\n`[retry.py] <https://github.com/trelay/CRTT/blob/master/CRTT/retry.py>`_:\n\nThis file is an independent module, it's a decorator and used to retry a function in a particular error occurs.\nretry calling the decorated function using an exponential backoff. Example:\n\n.. code-block:: python\n\n   @retry(ExceptionToCheck=ValueError,  tries=3, delay=1, backoff=1,stoponerror=False, logger=None)\n   def foo():\n      try:\n         raise ValueError\n      except ValueError as ve:\n         raise\n\n**Free Software, Hell Yeah!**\n\n.. (Contact trelwan@celestica.com if you have any questions.)", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/trelay/CRTT/tarball/0.8.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/trelay/CRTT", "keywords": "restful test tool", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "CRTT", "package_url": "https://pypi.org/project/CRTT/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/CRTT/", "project_urls": {"Download": "https://github.com/trelay/CRTT/tarball/0.8.1", "Homepage": "https://github.com/trelay/CRTT"}, "release_url": "https://pypi.org/project/CRTT/0.8.1/", "requires_dist": null, "requires_python": null, "summary": "Common Restful Test Tool", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Only Python3 is supported.</p>\n<p>CRTT is shortened for Common [RESTful] Test Tool; it can be used in following occasions:</p>\n<ul>\n<li>Test the reliability of RESTful server</li>\n<li>Find unknown issue</li>\n<li>Stress test for RESTful server</li>\n<li>Key String matching</li>\n</ul>\n<div id=\"support\">\n<h2>Support</h2>\n<ul>\n<li>This tool is intended to support all kinds of RESTful server, from Redfish to\u2026</li>\n</ul>\n</div>\n<div id=\"version\">\n<h2>Version</h2>\n<p>0.8.1</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install with pip3:</p>\n<pre>pip3 install CRTT\n</pre>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">CRTT.get_nodes</span> <span class=\"kn\">import</span> <span class=\"n\">GET_NODE</span>\n<span class=\"n\">get_node</span><span class=\"o\">=</span><span class=\"n\">GET_NODE</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">client_app_ver</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n<span class=\"n\">get_node</span><span class=\"o\">.</span><span class=\"n\">scan_node</span><span class=\"p\">()</span>\n</pre>\n<p>Or use build-in sample:</p>\n<pre>`./test.py &lt;https://github.com/trelay/CRTT/blob/master/CRTT/test/test.py&gt;`_\n</pre>\n</div>\n<div id=\"arguments-cli-options\">\n<h2>Arguments &amp; CLI options:</h2>\n<ul>\n<li>\u2013help: Print help message and exit</li>\n<li>\u2013config-dir: Path to a config directory to pull *.conf files from.</li>\n<li>\u2013config-file: Path to a config file to use. Multiple config files can be specified, with values in later files taking precedence.</li>\n<li>\u2013CLI-comp_file: The url response data comparing file</li>\n<li>\u2013CLI-cycles: How many times we scan the nodes</li>\n<li>\u2013CLI-time_to_stop: CLI_TIME_TO_STOP: If both this option and \u2013CLI-cycles are set, the one which comes first will take effect.</li>\n<li>\u2013CLI-retry: How many times retries after failure</li>\n</ul>\n</div>\n<div id=\"response-check-from-url\">\n<h2>Response check from URL:</h2>\n<p>The conf file for checking response from URL is defined in file <a href=\"https://github.com/trelay/CRTT/blob/master/CRTT/test/value_check.conf\" rel=\"nofollow\">value_check.conf</a> by default, but you can also define it when run CLI, refer the help:</p>\n<pre>[MemoryModule]      #The name of current url, can be found by key \"Name\"\n\nSizeGB= 16          #The size of memory of current url\n\nVoltageVolt= 1.21 &lt; 1.30 &lt; x &lt; 1.40 &lt; 1.51          #The threshold check format, it should have LowerThresholdFatal,     LowerThresholdWarning, UpperThresholdWarning, UpperThresholdCritical\n</pre>\n<p>If the node_name or the check_key is not defined properly, it won\u2019t check without any warning.</p>\n</div>\n<div id=\"for-advanced-user\">\n<h2>For Advanced user:</h2>\n<p>This application provides a config file to let user customize, modify. One can change the setting in file <a href=\"https://github.com/trelay/CRTT/blob/master/CRTT/test/CRTT.conf\" rel=\"nofollow\">CRTT.conf</a>, here is the help for this document:</p>\n<pre>[REST]\n\nroot_node='http://10.204.29.243:8888/redfish/v1/Chassis/Defaultstring/Thermal'\n#Noen by default, This one will take effect of rest of this section.\nclient_name=redfish     #The name of the RESTful client application.\nhost=10.204.29.244      #The IP of this RESTful server\nbind_port = 8888        #The port of the RESTful service.\nver_support = 1         #The ver list of the RESTful client application.\nclient_app_ver=1        #The ver of this RESTful client app\nsubnode_keys= '@odata.id'   # All sub nodes should be found in a dict, and this defines the key to find sub nodes\n\n\n\n[MAIN]\n\nvalue_file=Red_lib/product/url_dict.conf    #This file is used to check the\n#response(response is in JSON format) from RESTful server .\ncycle=20                #How many cycles to scan all the nodes\nprocesses =4                        #How many of processes in this running host\n\n[LOG]\napp_name='redfish_test'     #The log channel name\nlogfilename='redfish.html'  #The file name to save html log file\nlog_format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s'\nroot_level=10               #The root log level\nch_level=10                 #The log level for console stream logging\nfh_level=20                 #The log level for html file stream logging\nhtml_color=color_2          #How we display the msg in the html file, it has options, choose one from below dict.\ncolor_1=err_color: red, warn_color: yellow, info_color: white, dbg_color: white\ncolor_2=err_color: red, warn_color: orange, info_color: white, dbg_color:blue\n\nKeyword_Italic=True         #The setting of keyword in html log\nKeyword_FontSize=3          #The setting of keyword in html log\nKeyword_tag_start=\"&lt;hl&gt;\"    #The setting of keyword in html log\nKeyword_tag_end=\"&lt;/hl&gt;\"     #The setting of keyword in html log\ntitle=Red fish log          #The tile for html log\nconsole_log=True            #Display log to console?\nHtmlmaxBytes=52428800       # You can specify particular values of maxBytes and backupCount to allow the\n                        #file to rollover at predetermined size if rotating is set to True, otherwise\n                        #rotate file without backCount limited.\nHtml_backupCount=5\nHtml_Rotating=True\n\n[REQUEST]\nhttp_time_warn=0.5          #Setting of response time from RESTful server\nhttp_time_error=1.2         #Setting of response time from RESTful server\ntimeout=3                   #The max time(second) to get response from RESTful server\nretries=4                   #How many times to retry if error occurs\ndelay=1.5                   #Time delay during a next retry if error occurs\nbackoff=2                   #backoff of delay\nfailonerror=False           #Stop test if fail still occurs if retries.\n</pre>\n</div>\n<div id=\"modules-defined\">\n<h2>Modules defined:</h2>\n<div>\n<div><br></div>\n</div>\n<p><a href=\"https://github.com/trelay/CRTT/blob/master/CRTT/get_nodes.py\" rel=\"nofollow\">[get_nodes.py]</a>:</p>\n<p>This file contains classes and functions: GEN_URL, GET_NODE, URL_REQUEST and Responses check:</p>\n<p>GEN_URL: This class is to build complete URL.</p>\n<p>A complete URL to interact with RESTful server is like this: :</p>\n<blockquote>\n<a href=\"http://10.204.29.221:8888/redfish/v1/Managers/1\" rel=\"nofollow\">http://10.204.29.221:8888/redfish/v1/Managers/1</a></blockquote>\n<p>here is example to use:</p>\n<pre>url=GEN_URL('10.204.29.221')\ngen_url=GEN_URL('10.204.29.221')\nurl=gen_url.get_url('/redfish/v1/Managers/1')\n</pre>\n<p>GET_NODE: Scan and find all the child nodes from root(is node_path=None) or any node that is defined in function \u201cscan_node\u201d, and put them into a list, during this scanning and searching, one can compare the value returned from RESTful server . url_list contains all the urls after scanning.</p>\n<p>URL_REQUEST: Send Request to RESTful server, generally, the request should be one of GET, PUT, POST, DELETE. This class can handle all http errors. Example:</p>\n<pre>url_request=URL_REQUEST('http://10.204.29.221:8888/redfish/v1/Managers/1',username,password)\nurl_request.get_req(value)   #Value: a python dict\n</pre>\n<p>Reponse_check: It has two functions: 1. Check the response from RESTful server which defined in file [url_dict.conf] 2. Check if request time exceeds the limit.</p>\n<div>\n<div><br></div>\n</div>\n<p><a href=\"https://github.com/trelay/CRTT/blob/master/CRTT/retry.py\" rel=\"nofollow\">[retry.py]</a>:</p>\n<p>This file is an independent module, it\u2019s a decorator and used to retry a function in a particular error occurs.\nretry calling the decorated function using an exponential backoff. Example:</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">ExceptionToCheck</span><span class=\"o\">=</span><span class=\"ne\">ValueError</span><span class=\"p\">,</span>  <span class=\"n\">tries</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">backoff</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">stoponerror</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n   <span class=\"k\">try</span><span class=\"p\">:</span>\n      <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n   <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">ve</span><span class=\"p\">:</span>\n      <span class=\"k\">raise</span>\n</pre>\n<p><strong>Free Software, Hell Yeah!</strong></p>\n</div>\n\n          </div>"}, "last_serial": 2301676, "releases": {"0.8": [{"comment_text": "", "digests": {"md5": "bdc35717585505f32111a1ff04507328", "sha256": "d9282ca7c6d17c8b0d45f5c3c08b042efbaad2310f7517d4ec91bd9c9e617e56"}, "downloads": -1, "filename": "CRTT-0.8.tar.gz", "has_sig": false, "md5_digest": "bdc35717585505f32111a1ff04507328", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15204, "upload_time": "2016-08-23T06:44:16", "upload_time_iso_8601": "2016-08-23T06:44:16.541099Z", "url": "https://files.pythonhosted.org/packages/0a/dc/361ca2986597bb37318f0914ace4cd51b4df8deca399de43f30ef6cabfdc/CRTT-0.8.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "4892fa28c58ae1c65299535f5a26f6bc", "sha256": "d56a04c9a94e65c10566298bdca51fdcbb8c5b2ebe3fe3be295a7245a3e26fac"}, "downloads": -1, "filename": "CRTT-0.8.1.tar.gz", "has_sig": false, "md5_digest": "4892fa28c58ae1c65299535f5a26f6bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17535, "upload_time": "2016-08-25T03:39:14", "upload_time_iso_8601": "2016-08-25T03:39:14.099992Z", "url": "https://files.pythonhosted.org/packages/a5/bb/de16e38b05cd0143ffa9a161fbc42458336f0d0cba9620fcb8ad9dd6357f/CRTT-0.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4892fa28c58ae1c65299535f5a26f6bc", "sha256": "d56a04c9a94e65c10566298bdca51fdcbb8c5b2ebe3fe3be295a7245a3e26fac"}, "downloads": -1, "filename": "CRTT-0.8.1.tar.gz", "has_sig": false, "md5_digest": "4892fa28c58ae1c65299535f5a26f6bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17535, "upload_time": "2016-08-25T03:39:14", "upload_time_iso_8601": "2016-08-25T03:39:14.099992Z", "url": "https://files.pythonhosted.org/packages/a5/bb/de16e38b05cd0143ffa9a161fbc42458336f0d0cba9620fcb8ad9dd6357f/CRTT-0.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:07 2020"}