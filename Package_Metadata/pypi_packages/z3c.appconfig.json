{"info": {"author": "Wichert Akkerman", "author_email": "wichert@wiggy.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Plone", "Framework :: Zope2", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\n============\n\nThis package provides a method to configure an application via standard\n``.ini`` files. This is convenient for site admins since they are more\nlikely to be familiar with ini files than with ZCML.\n\n\nCreating config files\n=====================\nThere are two ways to tell a Zope instance which configuration files to\nload: zcml statements and the APPCONFIG environment variable. zcml statements\nare processed first, making it possible to override standard configuration.\n\nThe zcml syntax looks like this::\n\n  <configure xmlns=\"http://namespaces.zope.org/zope\">\n    <include package=\"z3c.appconfig\" file=\"meta.zcml\"/>\n    <appconfig file=\"default.ini\" />\n  </configure>\n\nThis will load the contents of ``default.ini`` and merge it into the\napplication configuration.\n\nIf an APPCONFIG environment variable is set and points to a file\nits contents will be merged into the application configuration. This is done\nlast, allowing you to override application defined defaults. For example::\n\n   $ APPCONFIG=etc/mysite.ini bin/instance fg\n\n\nAccessing configuration\n=======================\n\nThe configuration data can be accessed from your code via a IAppConfig utility.\nThis utility is essentially a standard python dictionary which stores all\nconfiguration data. For example lets use a very simple configuration file::\n\n   [site]\n   title = My lovely site\n\nYou can access the title from python with code like this::\n\n   from zope.component import getUtility\n   from z3c.appconfig.interfaces import IAppConfig\n\n   appconfig=getUtility(IAppConfig)\n   print \"Site title is: %s\" % appconfig[\"site\"][\"title\"]\n\n\nUtility methods\n===============\n\nAs a convenience a utility method is provided to convert values from a\nconfiguration file to booleans: the ``z3c.appconfig.utils.asBool`` method::\n\n   from z3c.appconfig.utils import asBool\n   print \"Pants are on: %s\" % asBool(\"true\")\n\n\n\nChangelog\n=========\n\n1.0 (2011-01-24)\n----------------\n\n- Add more trove classifiers.\n  [wichert]\n\n- Add a ``asBool`` utility method.\n  [wichert]\n\n\n\n1.0b1 (2010-05-17)\n------------------\n\n- Initial release.\n  [wichert]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/", "keywords": "", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "z3c.appconfig", "package_url": "https://pypi.org/project/z3c.appconfig/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.appconfig/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/"}, "release_url": "https://pypi.org/project/z3c.appconfig/1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple application configuration system", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package provides a method to configure an application via standard\n<tt>.ini</tt> files. This is convenient for site admins since they are more\nlikely to be familiar with ini files than with ZCML.</p>\n</div>\n<div id=\"creating-config-files\">\n<h2>Creating config files</h2>\n<p>There are two ways to tell a Zope instance which configuration files to\nload: zcml statements and the APPCONFIG environment variable. zcml statements\nare processed first, making it possible to override standard configuration.</p>\n<p>The zcml syntax looks like this:</p>\n<pre>&lt;configure xmlns=\"http://namespaces.zope.org/zope\"&gt;\n  &lt;include package=\"z3c.appconfig\" file=\"meta.zcml\"/&gt;\n  &lt;appconfig file=\"default.ini\" /&gt;\n&lt;/configure&gt;\n</pre>\n<p>This will load the contents of <tt>default.ini</tt> and merge it into the\napplication configuration.</p>\n<p>If an APPCONFIG environment variable is set and points to a file\nits contents will be merged into the application configuration. This is done\nlast, allowing you to override application defined defaults. For example:</p>\n<pre>$ APPCONFIG=etc/mysite.ini bin/instance fg\n</pre>\n</div>\n<div id=\"accessing-configuration\">\n<h2>Accessing configuration</h2>\n<p>The configuration data can be accessed from your code via a IAppConfig utility.\nThis utility is essentially a standard python dictionary which stores all\nconfiguration data. For example lets use a very simple configuration file:</p>\n<pre>[site]\ntitle = My lovely site\n</pre>\n<p>You can access the title from python with code like this:</p>\n<pre>from zope.component import getUtility\nfrom z3c.appconfig.interfaces import IAppConfig\n\nappconfig=getUtility(IAppConfig)\nprint \"Site title is: %s\" % appconfig[\"site\"][\"title\"]\n</pre>\n</div>\n<div id=\"utility-methods\">\n<h2>Utility methods</h2>\n<p>As a convenience a utility method is provided to convert values from a\nconfiguration file to booleans: the <tt>z3c.appconfig.utils.asBool</tt> method:</p>\n<pre>from z3c.appconfig.utils import asBool\nprint \"Pants are on: %s\" % asBool(\"true\")\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.0 (2011-01-24)</h3>\n<ul>\n<li>Add more trove classifiers.\n[wichert]</li>\n<li>Add a <tt>asBool</tt> utility method.\n[wichert]</li>\n</ul>\n</div>\n<div id=\"b1-2010-05-17\">\n<h3>1.0b1 (2010-05-17)</h3>\n<ul>\n<li>Initial release.\n[wichert]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 635888, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "84de07244213b7bf4d6bd87b7ee46b93", "sha256": "20164eb39c1bdfbac56d7a52483cc925f603c22df77b947f429537528c0c3f73"}, "downloads": -1, "filename": "z3c.appconfig-1.0.tar.gz", "has_sig": false, "md5_digest": "84de07244213b7bf4d6bd87b7ee46b93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5678, "upload_time": "2011-01-24T10:11:33", "upload_time_iso_8601": "2011-01-24T10:11:33.682158Z", "url": "https://files.pythonhosted.org/packages/f9/86/dbdba9b8e0312c2d12f46669e549fca78aaca830a69cc95aa5c5b1b067fd/z3c.appconfig-1.0.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "8149008b426e89dd394192e12749df94", "sha256": "d1cf9eedd80f8698a9e611ebda0c2ac8948e588eff86d5844739363cce8c9f61"}, "downloads": -1, "filename": "z3c.appconfig-1.0b1.tar.gz", "has_sig": false, "md5_digest": "8149008b426e89dd394192e12749df94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4853, "upload_time": "2010-05-17T16:20:16", "upload_time_iso_8601": "2010-05-17T16:20:16.431522Z", "url": "https://files.pythonhosted.org/packages/95/7f/22e767c9dadfe397aba4ec110aa141ed8f2f0c1c82dbc4d9bd0a723f0f18/z3c.appconfig-1.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "84de07244213b7bf4d6bd87b7ee46b93", "sha256": "20164eb39c1bdfbac56d7a52483cc925f603c22df77b947f429537528c0c3f73"}, "downloads": -1, "filename": "z3c.appconfig-1.0.tar.gz", "has_sig": false, "md5_digest": "84de07244213b7bf4d6bd87b7ee46b93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5678, "upload_time": "2011-01-24T10:11:33", "upload_time_iso_8601": "2011-01-24T10:11:33.682158Z", "url": "https://files.pythonhosted.org/packages/f9/86/dbdba9b8e0312c2d12f46669e549fca78aaca830a69cc95aa5c5b1b067fd/z3c.appconfig-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:13 2020"}