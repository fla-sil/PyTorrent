{"info": {"author": "Pavel Perestoronin", "author_email": "eigenein@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# `sqlitemap`\n\nDictionary interface to an SQLite database.\n\n[![Build Status](https://travis-ci.com/eigenein/sqlitemap.svg?branch=master)](https://travis-ci.com/eigenein/sqlitemap)\n[![Coverage Status](https://coveralls.io/repos/github/eigenein/sqlitemap/badge.svg?branch=master)](https://coveralls.io/github/eigenein/sqlitemap?branch=master)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/sqlitemap.svg)](https://pypi.org/project/sqlitemap/)\n[![PyPI \u2013 Version](https://img.shields.io/pypi/v/sqlitemap.svg)](https://pypi.org/project/sqlitemap/#history)\n[![PyPI \u2013 Python](https://img.shields.io/pypi/pyversions/sqlitemap.svg)](https://pypi.org/project/sqlitemap/#files)\n[![License](https://img.shields.io/pypi/l/sqlitemap.svg)](https://github.com/eigenein/sqlitemap/blob/master/LICENSE)\n\n## Intro\n\n\u2026One day I needed an embedded key-value store for a pet project, but didn't find a \u00abgood enough\u00bb implementation. So, I made my own one.\n\nIt's a lightweight wrapper over the standard [sqlite3](https://docs.python.org/3/library/sqlite3.html) module. It provides the standard [`MutableMapping`](https://docs.python.org/3/library/typing.html#typing.MutableMapping) interface for an SQLite connection and SQLite table.\n\n## `Connection`\n\nYou create an instance of `Connection` as if it was a normal [`sqlite3.connect`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect) call:\n\n```python\nfrom sqlitemap import Connection\n\nconnection = Connection(':memory:', ...)\n```\n\nIt implements the [context manager](https://docs.python.org/3/library/stdtypes.html#typecontextmanager) interface, so you use `with` to make a transaction as if it was an [`sqlite3.Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection). And it implements `MutableMapping[str, Collection]`, except for `__setitem__`. So you can imagine a `Connection` as a dictionary of collections altogether with their [names](https://stackoverflow.com/questions/3694276/what-are-valid-table-names-in-sqlite) and do virtually everything you could do with a normal [`dict`](https://docs.python.org/3.7/library/stdtypes.html#dict):\n\n```python\nfrom sqlitemap import Collection\n\n# Collection is automatically created:\nfoo: Collection = connection['foo']\n\n# You can iterate over collection names:\nnames = list(connection)\n\n# Or even over collections:\ncollections = connection.values()\n\n# Drop collection:\ndel connection['foo']\n\n# Get number of collections:\nlen(connection)\n\n# Special one, to close the connection:\nconnection.close()\n```\n\nInternally, collection is a table with two columns: `key: str` and `value: bytes`. So, you need some serialization to represent objects as byte strings. By default, `sqlitemap` uses the standard [`json`](https://docs.python.org/3/library/json.html) module. It picks up [`ujson`](https://pypi.org/project/ujson/) or [`orjson`](https://pypi.org/project/orjson/), if available. These are also available as `sqlitemap` extras: `sqlitemap[ujson]` and `sqlitemap[orjson]`.\n\nOtherwise, you can specify any custom `Callable[[Any], bytes]` for encoder and `Callable[[bytes], Any]` for decoder:\n\n```python\nconnection = Connection(':memory:', dumps_=custom_dumps, loads_=custom_loads)\n``` \n\n## `Collection`\n\n`Collection` also implements the [context manager](https://docs.python.org/3/library/stdtypes.html#typecontextmanager) interface to make a transaction, and `MutableMapping[str, Any]`:\n\n### Setting an item\n\n```python\nwith raises(KeyError):\n    _ = collection['foo']\ncollection['foo'] = 'bar'\nassert collection['foo'] == 'bar'\ncollection['foo'] = 'qux'\nassert collection['foo'] == 'qux'\n```\n\n`key` column is a primary key.\n\n### Retrieving keys\n\n```python\nassert list(collection) == []\ncollection['foo'] = 'bar'\nassert list(collection) == ['foo']\n```\n\n### Retrieving values\n\n```python\nassert collection.values() == []\ncollection['foo'] = 'bar'\nassert collection.values() == ['bar']\n```\n\n### Deleting an item\n\n```python\nwith raises(KeyError):\n    del collection['foo']\ncollection['foo'] = 42\ndel collection['foo']\nwith raises(KeyError):\n    del collection['foo']\n```\n\n### Using slices\n\n`Collection.__getitem__` and `Collection.__setitem__` also support [slices](https://docs.python.org/3/library/functions.html#slice) as their arguments. Slice `start` is then converted to `key >= start` clause, `stop` to `key < stop` and `step` to `key LIKE step`. All of these are combined with the `AND` operator. `Collection.__getitem__` also applies `ORDER BY key` clause, so it's possible to make some more sophisticated queries:\n\n```python\ncollection['bar'] = 1\ncollection['foo'] = 2\ncollection['quw'] = 3\ncollection['qux'] = 4\ncollection['quy'] = 5\ncollection['quz'] = 6\nassert collection['foo':] == [2, 3, 4, 5, 6]\nassert collection[:'foo'] == [1]\nassert collection[::'qu%'] == [3, 4, 5, 6]\nassert collection['bar':'quz':'qu%'] == [3, 4, 5]\n```\n\nThe same also works with `del collection [...]`. It deletes the rows that would be selected with the corresponding `__getitem__` call:\n\n```python\ncollection['bar'] = 1\ncollection['foo'] = 2\ncollection['quw'] = 3\ncollection['qux'] = 4\ncollection['quy'] = 5\ncollection['quz'] = 6\ndel collection['bar':'quz':'qu%']\nassert list(collection) == ['bar', 'foo', 'quz']\n```\n\n## Controlling transactions\n\n`sqlitemap` does nothing special to control transactions. For that refer to [the standard library documentation](https://docs.python.org/3/library/sqlite3.html#controlling-transactions).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eigenein/sqlitemap", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sqlitemap", "package_url": "https://pypi.org/project/sqlitemap/", "platform": "", "project_url": "https://pypi.org/project/sqlitemap/", "project_urls": {"Homepage": "https://github.com/eigenein/sqlitemap"}, "release_url": "https://pypi.org/project/sqlitemap/0.2.0/", "requires_dist": ["flake8 ; extra == 'dev'", "isort ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "coveralls ; extra == 'dev'", "ujson ; extra == 'dev'", "orjson ; extra == 'dev'", "twine ; extra == 'dev'", "mypy ; extra == 'dev'", "orjson ; extra == 'orjson'", "ujson ; extra == 'ujson'"], "requires_python": "", "summary": "Dictionary interface to an SQLite database", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>sqlitemap</code></h1>\n<p>Dictionary interface to an SQLite database.</p>\n<p><a href=\"https://travis-ci.com/eigenein/sqlitemap\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdbab4d6ba814c1463e0f5231bc0d75d14a8c2d7/68747470733a2f2f7472617669732d63692e636f6d2f656967656e65696e2f73716c6974656d61702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/eigenein/sqlitemap?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e0d76c35502d1422f7c5ce56e748d5ac4cba855/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656967656e65696e2f73716c6974656d61702f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/sqlitemap/\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/809b8231cbbd65b94dbfa17782eba5275d86dd44/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f73716c6974656d61702e737667\"></a>\n<a href=\"https://pypi.org/project/sqlitemap/#history\" rel=\"nofollow\"><img alt=\"PyPI \u2013 Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/238b96337554d9ed50d9eecc121f189e012b0487/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73716c6974656d61702e737667\"></a>\n<a href=\"https://pypi.org/project/sqlitemap/#files\" rel=\"nofollow\"><img alt=\"PyPI \u2013 Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30b1acbcae1cde8fa6894d3bf2a4f613103026a5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73716c6974656d61702e737667\"></a>\n<a href=\"https://github.com/eigenein/sqlitemap/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b67807fc07393efa5bab945af2c148ea0b2413ce/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f73716c6974656d61702e737667\"></a></p>\n<h2>Intro</h2>\n<p>\u2026One day I needed an embedded key-value store for a pet project, but didn't find a \u00abgood enough\u00bb implementation. So, I made my own one.</p>\n<p>It's a lightweight wrapper over the standard <a href=\"https://docs.python.org/3/library/sqlite3.html\" rel=\"nofollow\">sqlite3</a> module. It provides the standard <a href=\"https://docs.python.org/3/library/typing.html#typing.MutableMapping\" rel=\"nofollow\"><code>MutableMapping</code></a> interface for an SQLite connection and SQLite table.</p>\n<h2><code>Connection</code></h2>\n<p>You create an instance of <code>Connection</code> as if it was a normal <a href=\"https://docs.python.org/3/library/sqlite3.html#sqlite3.connect\" rel=\"nofollow\"><code>sqlite3.connect</code></a> call:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlitemap</span> <span class=\"kn\">import</span> <span class=\"n\">Connection</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"s1\">':memory:'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>It implements the <a href=\"https://docs.python.org/3/library/stdtypes.html#typecontextmanager\" rel=\"nofollow\">context manager</a> interface, so you use <code>with</code> to make a transaction as if it was an <a href=\"https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection\" rel=\"nofollow\"><code>sqlite3.Connection</code></a>. And it implements <code>MutableMapping[str, Collection]</code>, except for <code>__setitem__</code>. So you can imagine a <code>Connection</code> as a dictionary of collections altogether with their <a href=\"https://stackoverflow.com/questions/3694276/what-are-valid-table-names-in-sqlite\" rel=\"nofollow\">names</a> and do virtually everything you could do with a normal <a href=\"https://docs.python.org/3.7/library/stdtypes.html#dict\" rel=\"nofollow\"><code>dict</code></a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlitemap</span> <span class=\"kn\">import</span> <span class=\"n\">Collection</span>\n\n<span class=\"c1\"># Collection is automatically created:</span>\n<span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"n\">Collection</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># You can iterate over collection names:</span>\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or even over collections:</span>\n<span class=\"n\">collections</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Drop collection:</span>\n<span class=\"k\">del</span> <span class=\"n\">connection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get number of collections:</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Special one, to close the connection:</span>\n<span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Internally, collection is a table with two columns: <code>key: str</code> and <code>value: bytes</code>. So, you need some serialization to represent objects as byte strings. By default, <code>sqlitemap</code> uses the standard <a href=\"https://docs.python.org/3/library/json.html\" rel=\"nofollow\"><code>json</code></a> module. It picks up <a href=\"https://pypi.org/project/ujson/\" rel=\"nofollow\"><code>ujson</code></a> or <a href=\"https://pypi.org/project/orjson/\" rel=\"nofollow\"><code>orjson</code></a>, if available. These are also available as <code>sqlitemap</code> extras: <code>sqlitemap[ujson]</code> and <code>sqlitemap[orjson]</code>.</p>\n<p>Otherwise, you can specify any custom <code>Callable[[Any], bytes]</code> for encoder and <code>Callable[[bytes], Any]</code> for decoder:</p>\n<pre><span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"s1\">':memory:'</span><span class=\"p\">,</span> <span class=\"n\">dumps_</span><span class=\"o\">=</span><span class=\"n\">custom_dumps</span><span class=\"p\">,</span> <span class=\"n\">loads_</span><span class=\"o\">=</span><span class=\"n\">custom_loads</span><span class=\"p\">)</span>\n</pre>\n<h2><code>Collection</code></h2>\n<p><code>Collection</code> also implements the <a href=\"https://docs.python.org/3/library/stdtypes.html#typecontextmanager\" rel=\"nofollow\">context manager</a> interface to make a transaction, and <code>MutableMapping[str, Any]</code>:</p>\n<h3>Setting an item</h3>\n<pre><span class=\"k\">with</span> <span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">):</span>\n    <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n<span class=\"k\">assert</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'bar'</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'qux'</span>\n<span class=\"k\">assert</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'qux'</span>\n</pre>\n<p><code>key</code> column is a primary key.</p>\n<h3>Retrieving keys</h3>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[]</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n<span class=\"k\">assert</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n</pre>\n<h3>Retrieving values</h3>\n<pre><span class=\"k\">assert</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[]</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n<span class=\"k\">assert</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">]</span>\n</pre>\n<h3>Deleting an item</h3>\n<pre><span class=\"k\">with</span> <span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">):</span>\n    <span class=\"k\">del</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"k\">del</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n<span class=\"k\">with</span> <span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">):</span>\n    <span class=\"k\">del</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>\n</pre>\n<h3>Using slices</h3>\n<p><code>Collection.__getitem__</code> and <code>Collection.__setitem__</code> also support <a href=\"https://docs.python.org/3/library/functions.html#slice\" rel=\"nofollow\">slices</a> as their arguments. Slice <code>start</code> is then converted to <code>key &gt;= start</code> clause, <code>stop</code> to <code>key &lt; stop</code> and <code>step</code> to <code>key LIKE step</code>. All of these are combined with the <code>AND</code> operator. <code>Collection.__getitem__</code> also applies <code>ORDER BY key</code> clause, so it's possible to make some more sophisticated queries:</p>\n<pre><span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'quw'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'qux'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'quy'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'quz'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"k\">assert</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">:]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">collection</span><span class=\"p\">[:</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">collection</span><span class=\"p\">[::</span><span class=\"s1\">'qu%'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span><span class=\"s1\">'quz'</span><span class=\"p\">:</span><span class=\"s1\">'qu%'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre>\n<p>The same also works with <code>del collection [...]</code>. It deletes the rows that would be selected with the corresponding <code>__getitem__</code> call:</p>\n<pre><span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'quw'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'qux'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'quy'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'quz'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"k\">del</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span><span class=\"s1\">'quz'</span><span class=\"p\">:</span><span class=\"s1\">'qu%'</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'quz'</span><span class=\"p\">]</span>\n</pre>\n<h2>Controlling transactions</h2>\n<p><code>sqlitemap</code> does nothing special to control transactions. For that refer to <a href=\"https://docs.python.org/3/library/sqlite3.html#controlling-transactions\" rel=\"nofollow\">the standard library documentation</a>.</p>\n\n          </div>"}, "last_serial": 5080872, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "089a97ea5b12c129fd3bbf2f87613268", "sha256": "55fb7c50761d4e7f50da9b440ee3cc746439434d0942c9ff2111c7529a301c06"}, "downloads": -1, "filename": "sqlitemap-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "089a97ea5b12c129fd3bbf2f87613268", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5173, "upload_time": "2019-03-28T18:49:05", "upload_time_iso_8601": "2019-03-28T18:49:05.411987Z", "url": "https://files.pythonhosted.org/packages/b4/56/e5d6c62c5eea4edc97ab4e4cf9d7810e6df3efccb57fd6122ed611d228d5/sqlitemap-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d91196dd513754ef084c99a8e5bc0cde", "sha256": "5b116d5f8e576bb9a3a31d1b8dfda35ae64decee4ee2d2467e8131af9ad10744"}, "downloads": -1, "filename": "sqlitemap-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d91196dd513754ef084c99a8e5bc0cde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3844, "upload_time": "2019-03-28T18:49:07", "upload_time_iso_8601": "2019-03-28T18:49:07.536442Z", "url": "https://files.pythonhosted.org/packages/86/a0/d691b27c5a4a62363ec3226384670b668e863bae0ed9e32ce37f1ab005a6/sqlitemap-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3cd9e87d0724ff56f34e87fddaa6b134", "sha256": "dd63e4908cb2d2a613ca3c99bb5fa88b8a73a8930c52c82b0b2fe256910f4e9f"}, "downloads": -1, "filename": "sqlitemap-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3cd9e87d0724ff56f34e87fddaa6b134", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7053, "upload_time": "2019-03-31T16:52:49", "upload_time_iso_8601": "2019-03-31T16:52:49.941684Z", "url": "https://files.pythonhosted.org/packages/32/5b/1c474f3bb15d3211cd850b6de87e2ec3edba5e671dc79923223fccfd20b6/sqlitemap-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b8e20752b69fa1b07bffef5a2358589", "sha256": "335cee94f448e7c07f883b987ee635fd503814f8dd2caa6fce5e4e479c227d9c"}, "downloads": -1, "filename": "sqlitemap-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2b8e20752b69fa1b07bffef5a2358589", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5860, "upload_time": "2019-03-31T16:52:51", "upload_time_iso_8601": "2019-03-31T16:52:51.977250Z", "url": "https://files.pythonhosted.org/packages/1c/cc/5977b3462a0b184cc845a903aabdd5cf22fa00d5e4545a378ef9886bd211/sqlitemap-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3982ab28b94fa9f764dcc4735a967f35", "sha256": "eb2d11dfd66786e3dbb8de0fe8ece589b0197c8f2838a6ae06624b583be79e35"}, "downloads": -1, "filename": "sqlitemap-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3982ab28b94fa9f764dcc4735a967f35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7181, "upload_time": "2019-04-02T20:55:25", "upload_time_iso_8601": "2019-04-02T20:55:25.473186Z", "url": "https://files.pythonhosted.org/packages/d6/e5/4499c71ff2f45aa5ff7d84313ab0bac7e4f75c3303dd65a70a0a4037a0c4/sqlitemap-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd8d066c662dbd6a89ae51432777f31d", "sha256": "456b53b71283910d56ad01ad28272495d51ae7b732d8413b33d36c90bc8c542a"}, "downloads": -1, "filename": "sqlitemap-0.2.0.tar.gz", "has_sig": false, "md5_digest": "cd8d066c662dbd6a89ae51432777f31d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5978, "upload_time": "2019-04-02T20:55:27", "upload_time_iso_8601": "2019-04-02T20:55:27.858780Z", "url": "https://files.pythonhosted.org/packages/6b/a3/4123f4e4a184f59f6e9002a2bac162acefed162877da97aecf57e08d76d4/sqlitemap-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3982ab28b94fa9f764dcc4735a967f35", "sha256": "eb2d11dfd66786e3dbb8de0fe8ece589b0197c8f2838a6ae06624b583be79e35"}, "downloads": -1, "filename": "sqlitemap-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3982ab28b94fa9f764dcc4735a967f35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7181, "upload_time": "2019-04-02T20:55:25", "upload_time_iso_8601": "2019-04-02T20:55:25.473186Z", "url": "https://files.pythonhosted.org/packages/d6/e5/4499c71ff2f45aa5ff7d84313ab0bac7e4f75c3303dd65a70a0a4037a0c4/sqlitemap-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd8d066c662dbd6a89ae51432777f31d", "sha256": "456b53b71283910d56ad01ad28272495d51ae7b732d8413b33d36c90bc8c542a"}, "downloads": -1, "filename": "sqlitemap-0.2.0.tar.gz", "has_sig": false, "md5_digest": "cd8d066c662dbd6a89ae51432777f31d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5978, "upload_time": "2019-04-02T20:55:27", "upload_time_iso_8601": "2019-04-02T20:55:27.858780Z", "url": "https://files.pythonhosted.org/packages/6b/a3/4123f4e4a184f59f6e9002a2bac162acefed162877da97aecf57e08d76d4/sqlitemap-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:41 2020"}