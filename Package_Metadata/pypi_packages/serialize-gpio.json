{"info": {"author": "Pablo Paglilla", "author_email": "pablopaglilla16@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# Serialize Gpio\n\nSerialize Gpio is a Python library that provides tools for manipulating Raspberry Pi\u00ae GPIO pins using a serializable message protocol. These messages are modelled with Python dictionaries, but can also be encoded into either JSON or XML format. Using one of these two formats allows you to easily interact with the pins remotely or from an application which doesn't have access to a library for doing so.\n\nAt it's core; Serialize Gpio is a wrapper for [gpiozero](https://github.com/RPi-Distro/python-gpiozero), which provides a simple interface for managing the GPIO pins. That library abstracts away lower level concerns using device classes, which go from simple ones like 'LED' or 'Button' to more complex ones like 'Robot' (a representation of a generic dual motor robot). Of course, it also supports more general classes such as 'DigitalOutputDevice'.\n\nYou can interact with these device objects through:\n\n* Their methods ( such as LED.on() )\n* Their properties, each falling into one of two categories:\n    * Properties which take functions which will be executed when certain event happens (such as Button.when_pressed)\n    * Properties which take literal values (such as Button.hold_time)\n\nFor more information on the available device classes and their corresponding attributes, visit [gpiozero's documentation](https://gpiozero.readthedocs.io/en/stable/index.html).\n\n# Installation\n\n## Dependencies\n\nSerialize Gpio directly depends on gpiozero, which comes already installed by default in the Raspbian image. If you are using Raspbian Lite, you can install it with:\n\n```bash\npi@raspberrypi:~$ sudo apt update\npi@raspberrypi:~$ sudo apt install python3-gpiozero\n```\n\nor \n\n```bash\npi@raspberrypi:~$ sudo pip3 install gpiozero\n```\n\nIf you are using a different operating system, you might need to use the pip version.\n\nAlso, it's recommended that you install RPi.GPIO if you don't have it installed already. Gpiozero can use multiple libraries for controlling the pins or a custom implementation if none are availabe. Nonetheless, the prefered implementation is RPi.GPIO. You can install it with:\n\n```bash\npi@raspberrypi:~$ sudo pip3 install rpi.gpio\n```\n\n#### **Disclaimer**\n\nWhile gpiozero supports Python 2, Serialize Gpio only supports Python 3.\n\n## Installing Serialize Gpio\n\nSerialize Gpio is available in the Python Package index, so you can install it using pip:\n\n```bash\npi@raspberrypi:~$ sudo pip3 install serialize_gpio\n```\n\nAlternatively; you can download it from the [releases page](https://github.com/PabloPaglilla/serialize_gpio/releases) and install it from that file or clone this repository and use it from source.\n\n# Usage\n\nSerialize Gpio provides the GPIOController object to interface with the GPIO pins. Through the method 'handle_message', it receives a message and execute the action it describes.\n\nMessage manipulators are used for building, encoding and decoding messages. Use BasicMessageManipulator for messages in dictionary format, JsonMessageManipulator for JSON and XMLMessageManipulator for XML.\n\n```python\nfrom serialize_gpio.controller import GPIOController\nfrom serialize_gpio.messageManipulators import JsonMessageManipulator\n\n#The GPIOController constructor takes desired message format as a parameter.\ncontroller = GPIOController('json')\nmessageBuilder = JsonMessageManipulator()\n\n# The build_create_device_message method takes the name of device class, the name you want\n# to assign to device and the keyword arguments for the classes' __init__ method.\ncreate_led_message = messageBuilder.build_create_device_message('LED', 'blinkingLED', pin=4)\ncontroller.handle_message(create_led_message)\n\n# Make the led blink\n# build_execute_device_method_message takes the device's name, the name of the method and\n# keyword arguments for any method arguments.\nexecute_blink_message = messageBuilder.build_execute_device_method_message('blinkingLED', 'blink', on_time=0.5)\ncontroller.handle_message(execute_blink_message)\n```\n\n# Documentation\n\nYou can find the project's documentation it the [wiki](https://github.com/PabloPaglilla/serialize_gpio/wiki).\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PabloPaglilla/serialize_gpio", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "serialize-gpio", "package_url": "https://pypi.org/project/serialize-gpio/", "platform": "", "project_url": "https://pypi.org/project/serialize-gpio/", "project_urls": {"Homepage": "https://github.com/PabloPaglilla/serialize_gpio"}, "release_url": "https://pypi.org/project/serialize-gpio/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python library for controlling Raspberry Pi\u00ae GPIO Pins through a serializable message protocol.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Serialize Gpio</h1>\n<p>Serialize Gpio is a Python library that provides tools for manipulating Raspberry Pi\u00ae GPIO pins using a serializable message protocol. These messages are modelled with Python dictionaries, but can also be encoded into either JSON or XML format. Using one of these two formats allows you to easily interact with the pins remotely or from an application which doesn't have access to a library for doing so.</p>\n<p>At it's core; Serialize Gpio is a wrapper for <a href=\"https://github.com/RPi-Distro/python-gpiozero\" rel=\"nofollow\">gpiozero</a>, which provides a simple interface for managing the GPIO pins. That library abstracts away lower level concerns using device classes, which go from simple ones like 'LED' or 'Button' to more complex ones like 'Robot' (a representation of a generic dual motor robot). Of course, it also supports more general classes such as 'DigitalOutputDevice'.</p>\n<p>You can interact with these device objects through:</p>\n<ul>\n<li>Their methods ( such as LED.on() )</li>\n<li>Their properties, each falling into one of two categories:\n<ul>\n<li>Properties which take functions which will be executed when certain event happens (such as Button.when_pressed)</li>\n<li>Properties which take literal values (such as Button.hold_time)</li>\n</ul>\n</li>\n</ul>\n<p>For more information on the available device classes and their corresponding attributes, visit <a href=\"https://gpiozero.readthedocs.io/en/stable/index.html\" rel=\"nofollow\">gpiozero's documentation</a>.</p>\n<h1>Installation</h1>\n<h2>Dependencies</h2>\n<p>Serialize Gpio directly depends on gpiozero, which comes already installed by default in the Raspbian image. If you are using Raspbian Lite, you can install it with:</p>\n<pre>pi@raspberrypi:~$ sudo apt update\npi@raspberrypi:~$ sudo apt install python3-gpiozero\n</pre>\n<p>or</p>\n<pre>pi@raspberrypi:~$ sudo pip3 install gpiozero\n</pre>\n<p>If you are using a different operating system, you might need to use the pip version.</p>\n<p>Also, it's recommended that you install RPi.GPIO if you don't have it installed already. Gpiozero can use multiple libraries for controlling the pins or a custom implementation if none are availabe. Nonetheless, the prefered implementation is RPi.GPIO. You can install it with:</p>\n<pre>pi@raspberrypi:~$ sudo pip3 install rpi.gpio\n</pre>\n<h4><strong>Disclaimer</strong></h4>\n<p>While gpiozero supports Python 2, Serialize Gpio only supports Python 3.</p>\n<h2>Installing Serialize Gpio</h2>\n<p>Serialize Gpio is available in the Python Package index, so you can install it using pip:</p>\n<pre>pi@raspberrypi:~$ sudo pip3 install serialize_gpio\n</pre>\n<p>Alternatively; you can download it from the <a href=\"https://github.com/PabloPaglilla/serialize_gpio/releases\" rel=\"nofollow\">releases page</a> and install it from that file or clone this repository and use it from source.</p>\n<h1>Usage</h1>\n<p>Serialize Gpio provides the GPIOController object to interface with the GPIO pins. Through the method 'handle_message', it receives a message and execute the action it describes.</p>\n<p>Message manipulators are used for building, encoding and decoding messages. Use BasicMessageManipulator for messages in dictionary format, JsonMessageManipulator for JSON and XMLMessageManipulator for XML.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serialize_gpio.controller</span> <span class=\"kn\">import</span> <span class=\"n\">GPIOController</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serialize_gpio.messageManipulators</span> <span class=\"kn\">import</span> <span class=\"n\">JsonMessageManipulator</span>\n\n<span class=\"c1\">#The GPIOController constructor takes desired message format as a parameter.</span>\n<span class=\"n\">controller</span> <span class=\"o\">=</span> <span class=\"n\">GPIOController</span><span class=\"p\">(</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n<span class=\"n\">messageBuilder</span> <span class=\"o\">=</span> <span class=\"n\">JsonMessageManipulator</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># The build_create_device_message method takes the name of device class, the name you want</span>\n<span class=\"c1\"># to assign to device and the keyword arguments for the classes' __init__ method.</span>\n<span class=\"n\">create_led_message</span> <span class=\"o\">=</span> <span class=\"n\">messageBuilder</span><span class=\"o\">.</span><span class=\"n\">build_create_device_message</span><span class=\"p\">(</span><span class=\"s1\">'LED'</span><span class=\"p\">,</span> <span class=\"s1\">'blinkingLED'</span><span class=\"p\">,</span> <span class=\"n\">pin</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">handle_message</span><span class=\"p\">(</span><span class=\"n\">create_led_message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make the led blink</span>\n<span class=\"c1\"># build_execute_device_method_message takes the device's name, the name of the method and</span>\n<span class=\"c1\"># keyword arguments for any method arguments.</span>\n<span class=\"n\">execute_blink_message</span> <span class=\"o\">=</span> <span class=\"n\">messageBuilder</span><span class=\"o\">.</span><span class=\"n\">build_execute_device_method_message</span><span class=\"p\">(</span><span class=\"s1\">'blinkingLED'</span><span class=\"p\">,</span> <span class=\"s1\">'blink'</span><span class=\"p\">,</span> <span class=\"n\">on_time</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">handle_message</span><span class=\"p\">(</span><span class=\"n\">execute_blink_message</span><span class=\"p\">)</span>\n</pre>\n<h1>Documentation</h1>\n<p>You can find the project's documentation it the <a href=\"https://github.com/PabloPaglilla/serialize_gpio/wiki\" rel=\"nofollow\">wiki</a>.</p>\n\n          </div>"}, "last_serial": 4267196, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "97e591fe6a74102b70d86f8846634c3a", "sha256": "415efac784114d03ec76e4a337975e211f65dee0cbc644080c50cdfaafc8e12d"}, "downloads": -1, "filename": "serialize_gpio-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97e591fe6a74102b70d86f8846634c3a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10897, "upload_time": "2018-09-13T02:17:30", "upload_time_iso_8601": "2018-09-13T02:17:30.192255Z", "url": "https://files.pythonhosted.org/packages/ba/66/446dabe736da8b8dc6040c5d6672332ab45a63d22f7ffc4290594fcc3931/serialize_gpio-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "037cb60ed112a8fa5eba4ed5e767dacf", "sha256": "8b6cf05c648bbe74804f777eb45b4810b0956a0bc8e0dfbbd98bad54bf99614d"}, "downloads": -1, "filename": "serialize_gpio-0.1.0.tar.gz", "has_sig": false, "md5_digest": "037cb60ed112a8fa5eba4ed5e767dacf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8938, "upload_time": "2018-09-13T02:17:31", "upload_time_iso_8601": "2018-09-13T02:17:31.976416Z", "url": "https://files.pythonhosted.org/packages/23/99/c4d74037339bb644572ce41cd5733da836a464333a0242bc5e7626c8967a/serialize_gpio-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97e591fe6a74102b70d86f8846634c3a", "sha256": "415efac784114d03ec76e4a337975e211f65dee0cbc644080c50cdfaafc8e12d"}, "downloads": -1, "filename": "serialize_gpio-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97e591fe6a74102b70d86f8846634c3a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10897, "upload_time": "2018-09-13T02:17:30", "upload_time_iso_8601": "2018-09-13T02:17:30.192255Z", "url": "https://files.pythonhosted.org/packages/ba/66/446dabe736da8b8dc6040c5d6672332ab45a63d22f7ffc4290594fcc3931/serialize_gpio-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "037cb60ed112a8fa5eba4ed5e767dacf", "sha256": "8b6cf05c648bbe74804f777eb45b4810b0956a0bc8e0dfbbd98bad54bf99614d"}, "downloads": -1, "filename": "serialize_gpio-0.1.0.tar.gz", "has_sig": false, "md5_digest": "037cb60ed112a8fa5eba4ed5e767dacf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8938, "upload_time": "2018-09-13T02:17:31", "upload_time_iso_8601": "2018-09-13T02:17:31.976416Z", "url": "https://files.pythonhosted.org/packages/23/99/c4d74037339bb644572ce41cd5733da836a464333a0242bc5e7626c8967a/serialize_gpio-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:16 2020"}