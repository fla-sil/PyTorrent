{"info": {"author": "Honza Pokorny", "author_email": "me@honza.ca", "bugtrack_url": null, "classifiers": [], "description": "anosql\n======\n\n.. image:: https://badge.fury.io/py/anosql.svg\n    :target: https://badge.fury.io/py/anosql\n    :alt: pypi package version\n\n.. image:: http://readthedocs.org/projects/anosql/badge/?version=latest\n    :target: http://anosql.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://travis-ci.org/honza/anosql.svg?branch=master\n    :target: https://travis-ci.org/honza/anosql\n    :alt: Travid build status\n\nA Python library for using SQL\n\nInspired by the excellent `Yesql`_ library by Kris Jenkins.  In my mother\ntongue, *ano* means *yes*.\n\nIf you are on python3.6+ or need ``anosql`` to work with ``asyncio``-based database drivers, see the related project, `aiosql <https://github.com/nackjicholson/aiosql>`_.\n\nComplete documentation is available at `Read The Docs <https://anosql.readthedocs.io/en/latest/>`_.\n\nInstallation\n------------\n\n::\n\n  $ pip install anosql\n\nUsage\n-----\n\nBasics\n******\n\nGiven a ``queries.sql`` file:\n\n.. code-block:: sql\n\n  -- name: get-all-greetings\n  -- Get all the greetings in the database\n  SELECT * FROM greetings;\n\n  -- name: select-users\n  -- Get all the users from the database,\n  -- and return it as a dict\n  SELECT * FROM USERS;\n\nWe can issue SQL queries, like so:\n\n.. code-block:: python\n\n    import anosql\n    import psycopg2\n    import sqlite3\n\n    # PostgreSQL\n    conn = psycopg2.connect('...')\n    queries = anosql.from_path('queries.sql', 'psycopg2')\n\n    # Or, Sqlite3...\n    conn = sqlite3.connect('cool.db')\n    queries = anosql.from_path('queries.sql', 'sqlite3')\n\n    queries.get_all_greetings(conn)\n    # => [(1, 'Hi')]\n\n    queries.get_all_greetings.__doc__\n    # => Get all the greetings in the database\n\n    queries.get_all_greetings.sql\n    # => SELECT * FROM greetings;\n\n    queries.available_queries\n    # => ['get_all_greetings']\n\n\nParameters\n**********\n\nOften, you want to change parts of the query dynamically, particularly values in\nthe ``WHERE`` clause.  You can use parameters to do this:\n\n.. code-block:: sql\n\n  -- name: get-greetings-for-language\n  -- Get all the greetings in the database for given language\n  SELECT *\n  FROM greetings\n  WHERE lang = %s;\n\nAnd they become positional parameters:\n\n.. code-block:: python\n\n  visitor_language = \"en\"\n  queries.get_greetings_for_language(conn, visitor_language)\n\n\n\nNamed Parameters\n****************\n\nTo make queries with many parameters more understandable and maintainable, you\ncan give the parameters names:\n\n.. code-block:: sql\n\n  -- name: get-greetings-for-language-and-length\n  -- Get all the greetings in the database for given language and length\n  SELECT *\n  FROM greetings\n  WHERE lang = :lang\n  AND len(greeting) <= :length_limit;\n\nIf you were writing a Postgresql query, you could also format the parameters as\n``%s(lang)`` and ``%s(length_limit)``.\n\nThen, call your queries like you would any Python function with named\nparameters:\n\n.. code-block:: python\n\n  visitor_language = \"en\"\n\n  greetings_for_texting = queries.get_greetings_for_language_and_length(\n                conn, lang=visitor_language, length_limit=140)\n\nUpdate/Insert/Delete\n********************\n\nIn order to run ``UPDATE``, ``INSERT``, or ``DELETE`` statements, you need to\nadd ``!`` to the end of your query name.  Anosql will then execute it properly.\nIt will also return the number of affected rows.\n\nInsert queries returning autogenerated values\n*********************************************\n\nIf you want the auto-generated primary key to be returned after you run an\ninsert query, you can add ``<!`` to the end of your query name.\n\n.. code-block:: sql\n\n  -- name: create-user<!\n  INSERT INTO person (name) VALUES (:name)\n\nAdding custom query loaders.\n****************************\n\nOut of the box, ``anosql`` supports SQLite and PostgreSQL via the stdlib ``sqlite3`` database driver\nand ``psycopg2``. If you would like to extend ``anosql`` to communicate with other types of databases,\nyou may create a driver adapter class and register it with ``anosql.core.register_driver_adapter()``.\n\nDriver adapters are duck-typed classes which adhere to the below interface. Looking at ``anosql/adapters`` package\nis a good place to get started by looking at how the ``psycopg2`` and ``sqlite3`` adapters work.\n\nTo register a new loader::\n\n    import anosql\n    import anosql.core\n\n    class MyDbAdapter():\n        def process_sql(self, name, op_type, sql):\n            pass\n\n        def select(self, conn, sql, parameters):\n            pass\n\n        @contextmanager\n        def select_cursor(self, conn, sql, parameters):\n            pass\n\n        def insert_update_delete(self, conn, sql, parameters):\n            pass\n\n        def insert_update_delete_many(self, conn, sql, parameters):\n            pass\n\n        def insert_returning(self, conn, sql, parameters):\n            pass\n\n        def execute_script(self, conn, sql):\n            pass\n\n\n    anosql.core.register_driver_adapter(\"mydb\", MyDbAdapter)\n\n    # To use make a connection to your db, and pass \"mydb\" as the db_type:\n    import mydbdriver\n    conn = mydbriver.connect(\"...\")\n\n    anosql.load_queries(\"path/to/sql/\", \"mydb\")\n    greetings = anosql.get_greetings(conn)\n\n    conn.close()\n\nIf your adapter constructor takes arguments, you can register a function which can build\nyour adapter instance::\n\n    def adapter_factory():\n        return MyDbAdapter(\"foo\", 42)\n\n    anosql.register_driver_adapter(\"mydb\", adapter_factory)\n\nTests\n-----\n\n::\n\n   $ pip install tox\n   $ tox\n\nLicense\n-------\n\nBSD, short and sweet\n\n.. _Yesql: https://github.com/krisajenkins/yesql/", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/honza/anosql", "keywords": "", "license": "", "maintainer": "Honza Pokorny", "maintainer_email": "me@honza.ca", "name": "anosql", "package_url": "https://pypi.org/project/anosql/", "platform": "", "project_url": "https://pypi.org/project/anosql/", "project_urls": {"Homepage": "https://github.com/honza/anosql"}, "release_url": "https://pypi.org/project/anosql/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Easy SQL in Python", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/anosql\" rel=\"nofollow\"><img alt=\"pypi package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a2de64cf2459b4bd4384f7bfd597039b74c3d7f/68747470733a2f2f62616467652e667572792e696f2f70792f616e6f73716c2e737667\"></a>\n<a href=\"http://anosql.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01d599e4d1ef21420cba3ede665fdb4ee84cb166/687474703a2f2f72656164746865646f63732e6f72672f70726f6a656374732f616e6f73716c2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/honza/anosql\" rel=\"nofollow\"><img alt=\"Travid build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92cb7998e2a237884ba2c3fa883a3b21928e2f45/68747470733a2f2f7472617669732d63692e6f72672f686f6e7a612f616e6f73716c2e7376673f6272616e63683d6d6173746572\"></a>\n<p>A Python library for using SQL</p>\n<p>Inspired by the excellent <a href=\"https://github.com/krisajenkins/yesql/\" rel=\"nofollow\">Yesql</a> library by Kris Jenkins.  In my mother\ntongue, <em>ano</em> means <em>yes</em>.</p>\n<p>If you are on python3.6+ or need <tt>anosql</tt> to work with <tt>asyncio</tt>-based database drivers, see the related project, <a href=\"https://github.com/nackjicholson/aiosql\" rel=\"nofollow\">aiosql</a>.</p>\n<p>Complete documentation is available at <a href=\"https://anosql.readthedocs.io/en/latest/\" rel=\"nofollow\">Read The Docs</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install anosql\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"basics\">\n<h3>Basics</h3>\n<p>Given a <tt>queries.sql</tt> file:</p>\n<pre><span class=\"c1\">-- name: get-all-greetings\n-- Get all the greetings in the database\n</span><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">greetings</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- name: select-users\n-- Get all the users from the database,\n-- and return it as a dict\n</span><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">USERS</span><span class=\"p\">;</span>\n</pre>\n<p>We can issue SQL queries, like so:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">anosql</span>\n<span class=\"kn\">import</span> <span class=\"nn\">psycopg2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlite3</span>\n\n<span class=\"c1\"># PostgreSQL</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'...'</span><span class=\"p\">)</span>\n<span class=\"n\">queries</span> <span class=\"o\">=</span> <span class=\"n\">anosql</span><span class=\"o\">.</span><span class=\"n\">from_path</span><span class=\"p\">(</span><span class=\"s1\">'queries.sql'</span><span class=\"p\">,</span> <span class=\"s1\">'psycopg2'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or, Sqlite3...</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'cool.db'</span><span class=\"p\">)</span>\n<span class=\"n\">queries</span> <span class=\"o\">=</span> <span class=\"n\">anosql</span><span class=\"o\">.</span><span class=\"n\">from_path</span><span class=\"p\">(</span><span class=\"s1\">'queries.sql'</span><span class=\"p\">,</span> <span class=\"s1\">'sqlite3'</span><span class=\"p\">)</span>\n\n<span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"n\">get_all_greetings</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; [(1, 'Hi')]</span>\n\n<span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"n\">get_all_greetings</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n<span class=\"c1\"># =&gt; Get all the greetings in the database</span>\n\n<span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"n\">get_all_greetings</span><span class=\"o\">.</span><span class=\"n\">sql</span>\n<span class=\"c1\"># =&gt; SELECT * FROM greetings;</span>\n\n<span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"n\">available_queries</span>\n<span class=\"c1\"># =&gt; ['get_all_greetings']</span>\n</pre>\n</div>\n<div id=\"parameters\">\n<h3>Parameters</h3>\n<p>Often, you want to change parts of the query dynamically, particularly values in\nthe <tt>WHERE</tt> clause.  You can use parameters to do this:</p>\n<pre><span class=\"c1\">-- name: get-greetings-for-language\n-- Get all the greetings in the database for given language\n</span><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">greetings</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">lang</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"n\">s</span><span class=\"p\">;</span>\n</pre>\n<p>And they become positional parameters:</p>\n<pre><span class=\"n\">visitor_language</span> <span class=\"o\">=</span> <span class=\"s2\">\"en\"</span>\n<span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"n\">get_greetings_for_language</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">visitor_language</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"named-parameters\">\n<h3>Named Parameters</h3>\n<p>To make queries with many parameters more understandable and maintainable, you\ncan give the parameters names:</p>\n<pre><span class=\"c1\">-- name: get-greetings-for-language-and-length\n-- Get all the greetings in the database for given language and length\n</span><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">greetings</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">lang</span> <span class=\"o\">=</span> <span class=\"p\">:</span><span class=\"n\">lang</span>\n<span class=\"k\">AND</span> <span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">greeting</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"p\">:</span><span class=\"n\">length_limit</span><span class=\"p\">;</span>\n</pre>\n<p>If you were writing a Postgresql query, you could also format the parameters as\n<tt>%s(lang)</tt> and <tt>%s(length_limit)</tt>.</p>\n<p>Then, call your queries like you would any Python function with named\nparameters:</p>\n<pre><span class=\"n\">visitor_language</span> <span class=\"o\">=</span> <span class=\"s2\">\"en\"</span>\n\n<span class=\"n\">greetings_for_texting</span> <span class=\"o\">=</span> <span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"n\">get_greetings_for_language_and_length</span><span class=\"p\">(</span>\n              <span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"n\">visitor_language</span><span class=\"p\">,</span> <span class=\"n\">length_limit</span><span class=\"o\">=</span><span class=\"mi\">140</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"update-insert-delete\">\n<h3>Update/Insert/Delete</h3>\n<p>In order to run <tt>UPDATE</tt>, <tt>INSERT</tt>, or <tt>DELETE</tt> statements, you need to\nadd <tt>!</tt> to the end of your query name.  Anosql will then execute it properly.\nIt will also return the number of affected rows.</p>\n</div>\n<div id=\"insert-queries-returning-autogenerated-values\">\n<h3>Insert queries returning autogenerated values</h3>\n<p>If you want the auto-generated primary key to be returned after you run an\ninsert query, you can add <tt>&lt;!</tt> to the end of your query name.</p>\n<pre><span class=\"c1\">-- name: create-user&lt;!\n</span><span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">person</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(:</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"adding-custom-query-loaders\">\n<h3>Adding custom query loaders.</h3>\n<p>Out of the box, <tt>anosql</tt> supports SQLite and PostgreSQL via the stdlib <tt>sqlite3</tt> database driver\nand <tt>psycopg2</tt>. If you would like to extend <tt>anosql</tt> to communicate with other types of databases,\nyou may create a driver adapter class and register it with <tt>anosql.core.register_driver_adapter()</tt>.</p>\n<p>Driver adapters are duck-typed classes which adhere to the below interface. Looking at <tt>anosql/adapters</tt> package\nis a good place to get started by looking at how the <tt>psycopg2</tt> and <tt>sqlite3</tt> adapters work.</p>\n<p>To register a new loader:</p>\n<pre>import anosql\nimport anosql.core\n\nclass MyDbAdapter():\n    def process_sql(self, name, op_type, sql):\n        pass\n\n    def select(self, conn, sql, parameters):\n        pass\n\n    @contextmanager\n    def select_cursor(self, conn, sql, parameters):\n        pass\n\n    def insert_update_delete(self, conn, sql, parameters):\n        pass\n\n    def insert_update_delete_many(self, conn, sql, parameters):\n        pass\n\n    def insert_returning(self, conn, sql, parameters):\n        pass\n\n    def execute_script(self, conn, sql):\n        pass\n\n\nanosql.core.register_driver_adapter(\"mydb\", MyDbAdapter)\n\n# To use make a connection to your db, and pass \"mydb\" as the db_type:\nimport mydbdriver\nconn = mydbriver.connect(\"...\")\n\nanosql.load_queries(\"path/to/sql/\", \"mydb\")\ngreetings = anosql.get_greetings(conn)\n\nconn.close()\n</pre>\n<p>If your adapter constructor takes arguments, you can register a function which can build\nyour adapter instance:</p>\n<pre>def adapter_factory():\n    return MyDbAdapter(\"foo\", 42)\n\nanosql.register_driver_adapter(\"mydb\", adapter_factory)\n</pre>\n</div>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<pre>$ pip install tox\n$ tox\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>BSD, short and sweet</p>\n</div>\n\n          </div>"}, "last_serial": 6241238, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "831bd38e2e896a79f364fb995954b6a4", "sha256": "60ef0964121d3f7c49945f0c6170410036295fd130eb88dc64d417ae7513eb53"}, "downloads": -1, "filename": "anosql-0.0.1.tar.gz", "has_sig": false, "md5_digest": "831bd38e2e896a79f364fb995954b6a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1938, "upload_time": "2014-08-24T18:59:38", "upload_time_iso_8601": "2014-08-24T18:59:38.815380Z", "url": "https://files.pythonhosted.org/packages/89/58/87184fd637cfa7a1ddf2227ed2cd79af5b6990bc252bb5bdcbf76dec7a23/anosql-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "14bce73cdf3810ba104b1c178abc09dd", "sha256": "126953fb4dbf247a05de53aeecb0f37c1c512e50427b8cc2431bed224c2eeb58"}, "downloads": -1, "filename": "anosql-0.0.2.tar.gz", "has_sig": false, "md5_digest": "14bce73cdf3810ba104b1c178abc09dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2073, "upload_time": "2014-08-25T07:14:07", "upload_time_iso_8601": "2014-08-25T07:14:07.023801Z", "url": "https://files.pythonhosted.org/packages/d9/18/dcc06dd6103506ae4c51e2f0328c8dcddbe55df06bf4a6842845c4681124/anosql-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "77c945724b0213fffab3bdca35532a56", "sha256": "6dd9545bdb9ed2a438fb34f131ceda9da5f3514f7e77317a3f85c2c5a121f805"}, "downloads": -1, "filename": "anosql-0.1.0.tar.gz", "has_sig": false, "md5_digest": "77c945724b0213fffab3bdca35532a56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2235, "upload_time": "2014-08-31T19:53:24", "upload_time_iso_8601": "2014-08-31T19:53:24.805360Z", "url": "https://files.pythonhosted.org/packages/a1/28/36c4f19d8bd4ae0a7874a711785e808a990cb0b054cda65f9209212a5349/anosql-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "43d0d75b886fcd5f7f60927b5cb55f62", "sha256": "0f9a4371fabfa5a3a48704481364285b01bdeaff1f82bdf6be28f96b6f2018f4"}, "downloads": -1, "filename": "anosql-0.1.1.tar.gz", "has_sig": false, "md5_digest": "43d0d75b886fcd5f7f60927b5cb55f62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2460, "upload_time": "2015-09-16T12:50:25", "upload_time_iso_8601": "2015-09-16T12:50:25.495498Z", "url": "https://files.pythonhosted.org/packages/4e/47/712cbfe34d060c811513c5abbf6f6bf6659351f975266f9faea4d118d486/anosql-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ffb2ddc30459b61ab3c7d4a8b658c500", "sha256": "1a8d712fbfac27a2e66e64bf9a82ac3246a6ab91f56f26683a481a106917abc0"}, "downloads": -1, "filename": "anosql-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ffb2ddc30459b61ab3c7d4a8b658c500", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2513, "upload_time": "2015-10-09T12:43:10", "upload_time_iso_8601": "2015-10-09T12:43:10.695020Z", "url": "https://files.pythonhosted.org/packages/38/e8/4eafdb84832a7e0af9620069624e8a2a4ac25adc69a5b45e881e530ad647/anosql-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "99d255ae0e4be805e9054d8cdd44d1a6", "sha256": "46d7a7fd77c246a39e1cd1e0fc55fb2e232484474025a7b620a229b081511d82"}, "downloads": -1, "filename": "anosql-0.2.0.tar.gz", "has_sig": false, "md5_digest": "99d255ae0e4be805e9054d8cdd44d1a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11123, "upload_time": "2017-06-07T16:38:23", "upload_time_iso_8601": "2017-06-07T16:38:23.939547Z", "url": "https://files.pythonhosted.org/packages/54/c8/729e0a86adb88038ebe697818ce7ec0284a43da9ed3ced7b6a20bbcef786/anosql-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "174dad685b7abaa84fb8e66d173bc4fb", "sha256": "f090443643b25434da69b3a8fbf2d0cc46a55255d48236d7745b83b4f29f024a"}, "downloads": -1, "filename": "anosql-0.3.0.tar.gz", "has_sig": false, "md5_digest": "174dad685b7abaa84fb8e66d173bc4fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15572, "upload_time": "2018-11-28T19:24:39", "upload_time_iso_8601": "2018-11-28T19:24:39.758217Z", "url": "https://files.pythonhosted.org/packages/55/9e/051ad04f51b9d627db0a9cb16d024e750d419351e4541e45444cb064b308/anosql-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2b19f03c235471e39fb4c564154fc384", "sha256": "76797e8c2849b4f271efe2d3ff2fe763a3cebd9c8275ecf1f4e03eca2793a037"}, "downloads": -1, "filename": "anosql-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2b19f03c235471e39fb4c564154fc384", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15588, "upload_time": "2018-12-10T13:29:27", "upload_time_iso_8601": "2018-12-10T13:29:27.480866Z", "url": "https://files.pythonhosted.org/packages/e7/0b/96e94d966171dc8db20c4974c005e26ac2599dc66b54f713543ef6949ba4/anosql-0.3.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "63c4d098092c4cc6312b72809126fb28", "sha256": "7d1365e8157822b115a2c4251fe71304a9eb5ac517c81368a7297cf6fc62449e"}, "downloads": -1, "filename": "anosql-1.0.0.tar.gz", "has_sig": false, "md5_digest": "63c4d098092c4cc6312b72809126fb28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15851, "upload_time": "2018-12-12T18:00:10", "upload_time_iso_8601": "2018-12-12T18:00:10.829343Z", "url": "https://files.pythonhosted.org/packages/84/df/6bf2a0eef6d29278ca233608b4b1e36ecf18f7805e900e060d5efcf5a5fd/anosql-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "416bee61c01eca8c37b358f4bcd2866e", "sha256": "3d615c8c4a9a8b3cc392965ee56d66e709c21821f4950c88c226193aed32f29a"}, "downloads": -1, "filename": "anosql-1.0.1.tar.gz", "has_sig": false, "md5_digest": "416bee61c01eca8c37b358f4bcd2866e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20238, "upload_time": "2019-01-15T19:05:23", "upload_time_iso_8601": "2019-01-15T19:05:23.680671Z", "url": "https://files.pythonhosted.org/packages/1f/76/21a0f7ffbda0e0a3b1a5d56f08fe399108c1332effdcbe789aa0c00d27d5/anosql-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bde9767fa375b850b49c9eaf7e5318bb", "sha256": "ad009427db735cd7d86e76b596a839a736a5d8531897976ec2606cbbca551ec8"}, "downloads": -1, "filename": "anosql-1.0.2.tar.gz", "has_sig": false, "md5_digest": "bde9767fa375b850b49c9eaf7e5318bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27588, "upload_time": "2019-12-04T11:50:48", "upload_time_iso_8601": "2019-12-04T11:50:48.690661Z", "url": "https://files.pythonhosted.org/packages/6e/13/86e80d2344f2bce76a1dfdd2c7cfcc87e70e50506aa7eadffb52fb2833dc/anosql-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bde9767fa375b850b49c9eaf7e5318bb", "sha256": "ad009427db735cd7d86e76b596a839a736a5d8531897976ec2606cbbca551ec8"}, "downloads": -1, "filename": "anosql-1.0.2.tar.gz", "has_sig": false, "md5_digest": "bde9767fa375b850b49c9eaf7e5318bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27588, "upload_time": "2019-12-04T11:50:48", "upload_time_iso_8601": "2019-12-04T11:50:48.690661Z", "url": "https://files.pythonhosted.org/packages/6e/13/86e80d2344f2bce76a1dfdd2c7cfcc87e70e50506aa7eadffb52fb2833dc/anosql-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:06 2020"}