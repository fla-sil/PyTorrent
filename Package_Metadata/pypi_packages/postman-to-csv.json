{"info": {"author": "Michael Koslap", "author_email": "michael.koslap@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Postman-to-CSV\n==============\n\nA CLI which consumes a Postman results file in JSON format and outputs a\nsimple CSV file of the results.\n\nInstallation\n------------\n\n.. code:: shell\n\n    pip install postman-to-csv\n\nUsage\n-----\n\nA few examples:\n\n.. code:: shell\n\n    # Convert the JSON results to CSV without any build information\n    postman-to-csv \\\n        --input 'test-results.json' \\\n        --output 'test-results.csv'\n\n    # Flesh out additional information about the build\n    postman-to-csv \\\n        --input 'test-results.json' \\\n        --output 'test-results.csv' \\\n        --projectname 'my-web-api' \\\n        --branch 'release' \\\n        --buildnumber '1.2.3.4' \\\n        --deployenv 'stage' \\\n        --testtype 'integration'\n\n    # Providing all of the available flags\n    postman-to-csv \\\n        --input 'test-results.json' \\\n        --output 'test-results.csv' \\\n        --projectname 'my-test-project' \\\n        --branch 'release' \\\n        --buildnumber '1.2.3.4' \\\n        --buildtarget 'AnyCPU' \\\n        --buildstatus 'pass' \\\n        --deployenv 'stage' \\\n        --testtype 'integration'\n\nLimitations\n-----------\n\nThis was built to provide a simplified data format that could be used to\nload the results of Postman tests into a data store for tracking and\nmetrics. It is based on the output format from Newman 4.2.3 and contain\nminimal information about the test cases and assertions. If you need\nmore complete information, I would recommend that you parse the JSON\ndirectly.\n\nPublishing Updates to PyPi\n--------------------------\n\nFor the maintainer - to publish an updated version of ssm-search,\nincrement the version number in version.py and run the following:\n\n.. code:: shell\n\n    docker build -f ./Dockerfile.buildenv -t postman-to-csv:build .\n    docker run --rm -it --entrypoint make postman-to-csv:build publish\n\nAt the prompts, enter the username and password to the pypi.org repo.\n\nTesting\n-------\n\nTest execution in a container using packaged test files.\n\n.. code:: shell\n\n    docker build -f ./Dockerfile.buildenv -t postman-to-csv:build .\n    docker run -it postman-to-csv:build\n    postman-to-csv --input <postman JSON> --output <output file name>", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/billtrust/postman-to-csv", "keywords": "postman,newman", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "postman-to-csv", "package_url": "https://pypi.org/project/postman-to-csv/", "platform": "", "project_url": "https://pypi.org/project/postman-to-csv/", "project_urls": {"Homepage": "https://github.com/billtrust/postman-to-csv"}, "release_url": "https://pypi.org/project/postman-to-csv/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "A CLI which consumes the JSON output from a Postman test run and outputs a simple CSV format.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A CLI which consumes a Postman results file in JSON format and outputs a\nsimple CSV file of the results.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install postman-to-csv\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>A few examples:</p>\n<pre><span class=\"c1\"># Convert the JSON results to CSV without any build information\n</span>postman-to-csv <span class=\"se\">\\\n</span>    --input <span class=\"s1\">'test-results.json'</span> <span class=\"se\">\\\n</span>    --output <span class=\"s1\">'test-results.csv'</span>\n\n<span class=\"c1\"># Flesh out additional information about the build\n</span>postman-to-csv <span class=\"se\">\\\n</span>    --input <span class=\"s1\">'test-results.json'</span> <span class=\"se\">\\\n</span>    --output <span class=\"s1\">'test-results.csv'</span> <span class=\"se\">\\\n</span>    --projectname <span class=\"s1\">'my-web-api'</span> <span class=\"se\">\\\n</span>    --branch <span class=\"s1\">'release'</span> <span class=\"se\">\\\n</span>    --buildnumber <span class=\"s1\">'1.2.3.4'</span> <span class=\"se\">\\\n</span>    --deployenv <span class=\"s1\">'stage'</span> <span class=\"se\">\\\n</span>    --testtype <span class=\"s1\">'integration'</span>\n\n<span class=\"c1\"># Providing all of the available flags\n</span>postman-to-csv <span class=\"se\">\\\n</span>    --input <span class=\"s1\">'test-results.json'</span> <span class=\"se\">\\\n</span>    --output <span class=\"s1\">'test-results.csv'</span> <span class=\"se\">\\\n</span>    --projectname <span class=\"s1\">'my-test-project'</span> <span class=\"se\">\\\n</span>    --branch <span class=\"s1\">'release'</span> <span class=\"se\">\\\n</span>    --buildnumber <span class=\"s1\">'1.2.3.4'</span> <span class=\"se\">\\\n</span>    --buildtarget <span class=\"s1\">'AnyCPU'</span> <span class=\"se\">\\\n</span>    --buildstatus <span class=\"s1\">'pass'</span> <span class=\"se\">\\\n</span>    --deployenv <span class=\"s1\">'stage'</span> <span class=\"se\">\\\n</span>    --testtype <span class=\"s1\">'integration'</span>\n</pre>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>This was built to provide a simplified data format that could be used to\nload the results of Postman tests into a data store for tracking and\nmetrics. It is based on the output format from Newman 4.2.3 and contain\nminimal information about the test cases and assertions. If you need\nmore complete information, I would recommend that you parse the JSON\ndirectly.</p>\n</div>\n<div id=\"publishing-updates-to-pypi\">\n<h2>Publishing Updates to PyPi</h2>\n<p>For the maintainer - to publish an updated version of ssm-search,\nincrement the version number in version.py and run the following:</p>\n<pre>docker build -f ./Dockerfile.buildenv -t postman-to-csv:build .\ndocker run --rm -it --entrypoint make postman-to-csv:build publish\n</pre>\n<p>At the prompts, enter the username and password to the pypi.org repo.</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Test execution in a container using packaged test files.</p>\n<pre>docker build -f ./Dockerfile.buildenv -t postman-to-csv:build .\ndocker run -it postman-to-csv:build\npostman-to-csv --input &lt;postman JSON&gt; --output &lt;output file name&gt;\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4622548, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "618572f2a1a5e6df813f78306c5b1cb8", "sha256": "53e1d1b1c664a10e90564a77e164204d2e08b5229d1ecb40528c2618d43a14d6"}, "downloads": -1, "filename": "postman-to-csv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "618572f2a1a5e6df813f78306c5b1cb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3792, "upload_time": "2018-12-20T21:16:44", "upload_time_iso_8601": "2018-12-20T21:16:44.746625Z", "url": "https://files.pythonhosted.org/packages/72/71/0bed18bd8f08db3f9a663a91ec2295677c7d783a3023834570e709dfc882/postman-to-csv-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "618572f2a1a5e6df813f78306c5b1cb8", "sha256": "53e1d1b1c664a10e90564a77e164204d2e08b5229d1ecb40528c2618d43a14d6"}, "downloads": -1, "filename": "postman-to-csv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "618572f2a1a5e6df813f78306c5b1cb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3792, "upload_time": "2018-12-20T21:16:44", "upload_time_iso_8601": "2018-12-20T21:16:44.746625Z", "url": "https://files.pythonhosted.org/packages/72/71/0bed18bd8f08db3f9a663a91ec2295677c7d783a3023834570e709dfc882/postman-to-csv-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:54 2020"}