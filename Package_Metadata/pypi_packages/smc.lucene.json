{"info": {"author": "Christian Heimes", "author_email": "c.heimes@semantics.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python"], "description": "lucene module wrapper\n=====================\n\nThe lucene module wrapper takes care of the initialization and threading\npitfalls in the JCC API. It automatically initializes the VM when the first\nobject is retrieved from the facade module. It also attaches the current\nPython thread to the JNI VM environment when it hasn't been attached before.\n\nThe wrapper also solves the problem with JVM installing its own signal \nhandlers. By default the JVM overwrites Python's signal handlers in initVM(),\nthus causing some hard to debug problems. For example SIGINT is no longer\ntranslated into a KeyboradInterrupt exception. The wrapper code restores all\nsignal handlers to its former state.\nOnly JVM's SIGSEGV handler is left in place because it logs and prints useful\ninformation when the JVM segfaults. \n\nThe classpath argument is optional. When no classpath is set, smc.lucene\nautomatically adds classpath=lucene.CLASSPATH for you.\n\n\nExample 1 - Initialize Lucene on demand\n---------------------------------------\n\nReplace code like::\n\n  import lucene\n  lucene.initVM(classpath=lucene.CLASSPATH, vmwargs='...')\n\n  def query_lucene(...):\n      lucene.attachCurrentThread()\n      query = lucene.BooleanQuery()\n      ...\n\nwith::\n\n  from smc.lucene import lucene\n  lucene.set_initargs(vmargs='...')\n  \n  def query_lucene(...):\n      query = lucene.BooleanQuery()\n\n\nLucene is automatically initialized when the BooleanQuery attribute is retrieved\nfrom the facade module. If PyLucene was already initialized the facade module\nmakes sure that the current thread is attached.\n\nYou must not assign Lucene attributes to objects which a shared across threads.\nIf you have to share an object across threads you must call lucene.attach()\nbefore you can use an object. \n\nExample 2 - Explicit initialization of Lucene\n---------------------------------------------\n\nExample::\n\n  from smc.lucene import lucene as lucene_wrapper\n  from lucene import BooleanQuery\n\n  def query_lucene(...):\n      lucene_wrapper.attach()\n      query = BooleanQuery()\n\nThe attach method either initializes lucene or or attaches the current thread. \n\n\nAuthors\n=======\n\nChristian Heimes\n\nCopyright\n=========\n \nCopyright (C) 2008 semantics GmbH. All Rights Reserved.::\n\n  semantics\n  Kommunikationsmanagement GmbH\n  Viktoriaallee 45\n  D-52066 Aachen\n  Germany\n\n  Tel.: +49 241 89 49 89 29\n  eMail: info(at)semantics.de\n  http://www.semantics.de/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.semantics.de/", "keywords": "lucene java", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "smc.lucene", "package_url": "https://pypi.org/project/smc.lucene/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/smc.lucene/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.semantics.de/"}, "release_url": "https://pypi.org/project/smc.lucene/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "An initialization helper and simple wrapper for PyLucene", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"lucene-module-wrapper\">\n<h2>lucene module wrapper</h2>\n<p>The lucene module wrapper takes care of the initialization and threading\npitfalls in the JCC API. It automatically initializes the VM when the first\nobject is retrieved from the facade module. It also attaches the current\nPython thread to the JNI VM environment when it hasn\u2019t been attached before.</p>\n<p>The wrapper also solves the problem with JVM installing its own signal\nhandlers. By default the JVM overwrites Python\u2019s signal handlers in initVM(),\nthus causing some hard to debug problems. For example SIGINT is no longer\ntranslated into a KeyboradInterrupt exception. The wrapper code restores all\nsignal handlers to its former state.\nOnly JVM\u2019s SIGSEGV handler is left in place because it logs and prints useful\ninformation when the JVM segfaults.</p>\n<p>The classpath argument is optional. When no classpath is set, smc.lucene\nautomatically adds classpath=lucene.CLASSPATH for you.</p>\n<div id=\"example-1-initialize-lucene-on-demand\">\n<h3>Example 1 - Initialize Lucene on demand</h3>\n<p>Replace code like:</p>\n<pre>import lucene\nlucene.initVM(classpath=lucene.CLASSPATH, vmwargs='...')\n\ndef query_lucene(...):\n    lucene.attachCurrentThread()\n    query = lucene.BooleanQuery()\n    ...\n</pre>\n<p>with:</p>\n<pre>from smc.lucene import lucene\nlucene.set_initargs(vmargs='...')\n\ndef query_lucene(...):\n    query = lucene.BooleanQuery()\n</pre>\n<p>Lucene is automatically initialized when the BooleanQuery attribute is retrieved\nfrom the facade module. If PyLucene was already initialized the facade module\nmakes sure that the current thread is attached.</p>\n<p>You must not assign Lucene attributes to objects which a shared across threads.\nIf you have to share an object across threads you must call lucene.attach()\nbefore you can use an object.</p>\n</div>\n<div id=\"example-2-explicit-initialization-of-lucene\">\n<h3>Example 2 - Explicit initialization of Lucene</h3>\n<p>Example:</p>\n<pre>from smc.lucene import lucene as lucene_wrapper\nfrom lucene import BooleanQuery\n\ndef query_lucene(...):\n    lucene_wrapper.attach()\n    query = BooleanQuery()\n</pre>\n<p>The attach method either initializes lucene or or attaches the current thread.</p>\n</div>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Christian Heimes</p>\n</div>\n<div id=\"copyright\">\n<h2>Copyright</h2>\n<p>Copyright (C) 2008 semantics GmbH. All Rights Reserved.:</p>\n<pre>semantics\nKommunikationsmanagement GmbH\nViktoriaallee 45\nD-52066 Aachen\nGermany\n\nTel.: +49 241 89 49 89 29\neMail: info(at)semantics.de\nhttp://www.semantics.de/\n</pre>\n</div>\n\n          </div>"}, "last_serial": 257123, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 03:07:56 2020"}