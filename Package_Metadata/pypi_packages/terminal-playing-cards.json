{"info": {"author": "Paul Wildenhain", "author_email": "pwildenhain@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "\ufeff# terminal_playing_cards\n\n[![CircleCI](https://circleci.com/gh/pwildenhain/terminal_playing_cards.svg?style=shield)](https://circleci.com/gh/pwildenhain/terminal_playing_cards)\n[![codecov](https://codecov.io/gh/pwildenhain/terminal_playing_cards/branch/master/graph/badge.svg)](https://codecov.io/gh/pwildenhain/terminal_playing_cards)\n\nPython \ud83d\udce6 for building playing card games in the terminal.\n\nCheckout how pretty these cards look in a terminal window!\n\n![](_static/run_as_module.png)\n\nCheckout this [blackjack](https://github.com/pwildenhain/blackjack) repo for an example of how to use `terminal_playing_cards` to create python card games that run in a terminal window.\n\n1. [Getting started](#getting-started)\n2. [Customize a View](#customize-a-view)\n    * [Negative spacing](#negative-spacing)\n    * [Sorting](#sorting)\n    * [Adding cards](#adding-cards)\n    * [Removing cards](#removing-cards)\n3. [Customize a Deck](#customize-a-deck)\n    * [Customize card values](#customize-card-values)\n    * [Hidden cards](#hidden-cards)\n    * [Add Joker cards](#add-joker-cards)\n    * [Remove face card emojis](#remove-face-card-emojis)\n4. [Built-in methods](#built-in-methods)\n    * [Math with Cards](#math-with-cards)\n    * [Iterate through a Deck/View](#iterate-through-a-deck/view)\n    * [Check the length of a Deck/View](#check-the-length-of-a-deck/view)\n\n## Getting started\n\n:arrow_down: Install the package from PyPI.\n\n```\npip install terminal_playing_cards\n```\n\n:hammer: Build a standard 52 playing card deck.\n\n```python\nfrom terminal_playing_cards import Deck\n\ndeck = Deck()\n```\n\n:arrows_counterclockwise: Shuffle the deck, deal out some cards, and convert the list of cards into a `View` that can be printed to the terminal.\n\n```python\n>>> from terminal_playing_cards import View\n\n>>> deck.shuffle()\n# Deal 5 cards\n>>> player_1_hand = View([deck.pop() for _ in range(5)])\n>>> print(player_1_hand)\n```\n\n![](_static/five_card_view.png)\n\n## Customize a View\n\n### Negative spacing\n\nIf you anticipate having a lot of cards in a single `View`, specify a negative value for the `View.spacing` attribute.\n\n```python\n>>> player_1_hand = View(\n...     cards=[deck.pop() for _ in range(5)],\n...     spacing=-5\n... )\n>>> print(player_1_hand)\n```\n\n![](_static/five_card_view_negative_spacing.png)\n\n### Sorting\n\nWhenever I play card games, I have a particular way I like to sort my hand. Use the `View.sort()` method to sort a `View` by value, suit, or both!\n\n```python\n>>> player_1_hand.sort()\n>>> print(player_1_hand)\n```\n\n![](_static/view_default_sort.png)\n\nIf you prefer to sort purely by value, specify that in `sort_order`.\n\n```python\n>>> player_1_hand.sort(sort_order=[\"value\"])\n>>> print(player_1_hand)\n```\n\n![](_static/view_sort_by_value.png)\n\nSee `help(View.sort)` for further details.\n\n### Adding cards\n\nAdding cards to a `View` is easy! Just deal another card from the deck, and add it to the existing view.\n\n```python\n>>> next_card = deck.pop()\n>>> player_1_hand += [next_card]\n>>> print(player_1_hand)\n```\n\n![](_static/add_card_to_view.png)\n\nNotice that this was done with a `list` of `Card` objects. This allows multiple cards to be added into a `View` at one time, and also allows two `View` objects to be added together.\n\n### Removing cards\n\nSince `View` inherits many of it's methods from `Deck`, use the `View.pop()` to kick cards out of a `View`\n\n```python\n>>> played_card = player_1_hand.pop()\n>>> print(played_card)\n```\n![](_static/card_dealt_from_view.png)\n\nAnd now our hand doesn't have that card in it anymore.\n\n```python\n>>> print(player_1_hand)\n```\n\n![](_static/view_after_dealt_card.png)\n\n## Customize a Deck\n\n### Customize card values\n\nIn a game like [Blackjack](https://en.wikipedia.org/wiki/Blackjack), face cards are all valued at ten. But the default deck specifications assign a jack a value of eleven. Set the `specifications` parameter to customize options like card values.\n\n```python\n>>> blackjack_deck = Deck(specifications=[\"face_cards\"])\n```\n\nSee `help(Deck)` for more details on how to customize `Deck` build specifications.\n\n### Hidden cards\n\nIf you were going to build a game like [Texas hold'em](https://en.wikipedia.org/wiki/Texas_hold_%27em) then you would want to hide the turn and the river cards by default.\n\nWhen building the `Deck`, set the `hidden` parameter to hide all cards  when printed to the terminal by default.\n\n```python\n>>> hidden_deck = Deck(hidden=True)\n>>> top_card = hidden_deck.pop()\n>>> print(top_card)\n```\n\n![](_static/hidden_card.png)\n\nThis ensures that that \"back\" of a card is printed to the terminal, rather than the regular face. In order to reveal this card, set the `Card.hidden` attribute to `False`.\n\n```python\n>>> top_card.hidden = False\n>>> print(top_card)\n```\n![](_static/unhide_hidden_card.png)\n\n### Add Joker cards\n\n[Jokers](https://en.wikipedia.org/wiki/Joker_(playing_card)) aren't included in a `Deck` by default. Add them in after the fact if you need them for your game.\n\n```python\n>>> from terminal_playing_cards import Card\n\n>>> deck = Deck()\n>>> jokers = [Card(\"JK\", suit=\"none\") for _ in range(2)]\n>>> deck += jokers\n>>> print(deck[53])\n```\n\n![](_static/joker.png)\n\n### Remove face card emojis\n\nOn some terminal windows, emoji's don't print out as expected. Check out how the queen of hearts prints out in the [cmder](https://cmder.net/) console emulator.\n\n![](_static/queen_hearts_cmder.png)\n\n:rage: Why is it messed up??? :rage:\n\nNever fear! If this happens on your terminal, make sure to set `picture` parameter to False when building the `Deck`.\n\n```python\n>>> no_pic_deck = Deck(picture=False)\n# Default position of queen of hearts in a sorted Deck\n>>> queen_hearts = no_pic_deck[47]\n>>> print(queen_hearts)\n```\n\n![](_static/queen_hearts_no_emoji.png)\n\n:+1: That's more like it!\n\n## Built-in methods\n\n### Math with Cards\n\nAll cards have a `Card.value` attribute that is used for logical comparisions and simple arithmetic with numbers and other `Card` objects.\n\n```python\n>>> from terminal_playing_cards import Card\n\n>>> ace_spades = Card(\"A\", \"spades\", value=1)\n>>> ace_hearts = Card(\"A\", \"hearts\", value=1)\n>>> two_hearts = Card(\"2\", \"hearts\", value=2)\n>>> ace_spades < two_hearts\nTrue\n>>> ace_spades == ace_hearts\nTrue\n>>> two_hearts - 1\n1\n>>> sum([ace_spades, ace_hearts, two_hearts])\n4\n```\n\nNote: Equality is based on **value alone**. This is why the `ace_spades` is equal to the `ace_hearts` even though they have different suits.\n\n### Iterate through a Deck/View\n\nIteration is simple, treat a `Deck`/`View` as a list of `Card` objects.\n\n```python\n>>> deck = Deck()\n>>> hand = View([deck.pop() for _ in range(3)])\n>>> for card in hand:\n...     print(repr(card))\nCard('A', 'clubs', value=1, hidden=False, picture=True)\nCard('A', 'diamonds', value=1, hidden=False, picture=True)\nCard('A', 'spades', value=1, hidden=False, picture=True)\n>>> for card in deck[:3]:\n...     print(repr(card))\nCard('A', 'hearts', value=1, hidden=False, picture=True)\nCard('2', 'clubs', value=2, hidden=False, picture=True)\nCard('2', 'diamonds', value=2, hidden=False, picture=True)\n```\n\n### Check the length of a Deck/View\n\nEasy-peasy.\n\n```python\n>>> deck = Deck()\n>>> len(deck)\n52\n>>> hand = View([deck.pop() for _ in range(3)])\n>>> len(hand)\n3\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pwildenhain/terminal_playing_cards", "keywords": "cards", "license": "MIT", "maintainer": "Paul Wildenhain", "maintainer_email": "pwildenhain@gmail.com", "name": "terminal-playing-cards", "package_url": "https://pypi.org/project/terminal-playing-cards/", "platform": "", "project_url": "https://pypi.org/project/terminal-playing-cards/", "project_urls": {"Homepage": "https://github.com/pwildenhain/terminal_playing_cards", "Repository": "https://github.com/pwildenhain/terminal_playing_cards"}, "release_url": "https://pypi.org/project/terminal-playing-cards/0.1.0/", "requires_dist": ["colorama (>=0.4.1,<0.5.0)"], "requires_python": ">=3.6,<4.0", "summary": "Create card games for the terminal", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>terminal_playing_cards</h1>\n<p><a href=\"https://circleci.com/gh/pwildenhain/terminal_playing_cards\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc845539eac22d555429ee08f29687cbb2a11138/68747470733a2f2f636972636c6563692e636f6d2f67682f7077696c64656e6861696e2f7465726d696e616c5f706c6179696e675f63617264732e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://codecov.io/gh/pwildenhain/terminal_playing_cards\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c350a14a75eab97695479d442bb25941ca56e629/68747470733a2f2f636f6465636f762e696f2f67682f7077696c64656e6861696e2f7465726d696e616c5f706c6179696e675f63617264732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Python \ud83d\udce6 for building playing card games in the terminal.</p>\n<p>Checkout how pretty these cards look in a terminal window!</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75b7304c9bf21e8c1b08c4db95c0ebd1883de614/5f7374617469632f72756e5f61735f6d6f64756c652e706e67\"></p>\n<p>Checkout this <a href=\"https://github.com/pwildenhain/blackjack\" rel=\"nofollow\">blackjack</a> repo for an example of how to use <code>terminal_playing_cards</code> to create python card games that run in a terminal window.</p>\n<ol>\n<li><a href=\"#getting-started\" rel=\"nofollow\">Getting started</a></li>\n<li><a href=\"#customize-a-view\" rel=\"nofollow\">Customize a View</a>\n<ul>\n<li><a href=\"#negative-spacing\" rel=\"nofollow\">Negative spacing</a></li>\n<li><a href=\"#sorting\" rel=\"nofollow\">Sorting</a></li>\n<li><a href=\"#adding-cards\" rel=\"nofollow\">Adding cards</a></li>\n<li><a href=\"#removing-cards\" rel=\"nofollow\">Removing cards</a></li>\n</ul>\n</li>\n<li><a href=\"#customize-a-deck\" rel=\"nofollow\">Customize a Deck</a>\n<ul>\n<li><a href=\"#customize-card-values\" rel=\"nofollow\">Customize card values</a></li>\n<li><a href=\"#hidden-cards\" rel=\"nofollow\">Hidden cards</a></li>\n<li><a href=\"#add-joker-cards\" rel=\"nofollow\">Add Joker cards</a></li>\n<li><a href=\"#remove-face-card-emojis\" rel=\"nofollow\">Remove face card emojis</a></li>\n</ul>\n</li>\n<li><a href=\"#built-in-methods\" rel=\"nofollow\">Built-in methods</a>\n<ul>\n<li><a href=\"#math-with-cards\" rel=\"nofollow\">Math with Cards</a></li>\n<li><a href=\"#iterate-through-a-deck/view\" rel=\"nofollow\">Iterate through a Deck/View</a></li>\n<li><a href=\"#check-the-length-of-a-deck/view\" rel=\"nofollow\">Check the length of a Deck/View</a></li>\n</ul>\n</li>\n</ol>\n<h2>Getting started</h2>\n<p>:arrow_down: Install the package from PyPI.</p>\n<pre><code>pip install terminal_playing_cards\n</code></pre>\n<p>:hammer: Build a standard 52 playing card deck.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">terminal_playing_cards</span> <span class=\"kn\">import</span> <span class=\"n\">Deck</span>\n\n<span class=\"n\">deck</span> <span class=\"o\">=</span> <span class=\"n\">Deck</span><span class=\"p\">()</span>\n</pre>\n<p>:arrows_counterclockwise: Shuffle the deck, deal out some cards, and convert the list of cards into a <code>View</code> that can be printed to the terminal.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">terminal_playing_cards</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">()</span>\n<span class=\"c1\"># Deal 5 cards</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">player_1_hand</span> <span class=\"o\">=</span> <span class=\"n\">View</span><span class=\"p\">([</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">player_1_hand</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e36643b73167187fc672cbcf98da2a95a03f8c7/5f7374617469632f666976655f636172645f766965772e706e67\"></p>\n<h2>Customize a View</h2>\n<h3>Negative spacing</h3>\n<p>If you anticipate having a lot of cards in a single <code>View</code>, specify a negative value for the <code>View.spacing</code> attribute.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">player_1_hand</span> <span class=\"o\">=</span> <span class=\"n\">View</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">cards</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)],</span>\n<span class=\"o\">...</span>     <span class=\"n\">spacing</span><span class=\"o\">=-</span><span class=\"mi\">5</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">player_1_hand</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e3137766a04ce989edea1b7ca5933ea4f0f33447/5f7374617469632f666976655f636172645f766965775f6e656761746976655f73706163696e672e706e67\"></p>\n<h3>Sorting</h3>\n<p>Whenever I play card games, I have a particular way I like to sort my hand. Use the <code>View.sort()</code> method to sort a <code>View</code> by value, suit, or both!</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">player_1_hand</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">player_1_hand</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90eacc439cafd7cfb5a7d162f445d46feb6ad8fa/5f7374617469632f766965775f64656661756c745f736f72742e706e67\"></p>\n<p>If you prefer to sort purely by value, specify that in <code>sort_order</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">player_1_hand</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">sort_order</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"value\"</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">player_1_hand</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bee7cfb2f4fa40c719abc23d931a479608d59799/5f7374617469632f766965775f736f72745f62795f76616c75652e706e67\"></p>\n<p>See <code>help(View.sort)</code> for further details.</p>\n<h3>Adding cards</h3>\n<p>Adding cards to a <code>View</code> is easy! Just deal another card from the deck, and add it to the existing view.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">next_card</span> <span class=\"o\">=</span> <span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">player_1_hand</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">next_card</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">player_1_hand</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f549caa80112c9ebfe71b4589771f798d704dfd/5f7374617469632f6164645f636172645f746f5f766965772e706e67\"></p>\n<p>Notice that this was done with a <code>list</code> of <code>Card</code> objects. This allows multiple cards to be added into a <code>View</code> at one time, and also allows two <code>View</code> objects to be added together.</p>\n<h3>Removing cards</h3>\n<p>Since <code>View</code> inherits many of it's methods from <code>Deck</code>, use the <code>View.pop()</code> to kick cards out of a <code>View</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">played_card</span> <span class=\"o\">=</span> <span class=\"n\">player_1_hand</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">played_card</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e69809038495374b2b537b56e483b6655b27437f/5f7374617469632f636172645f6465616c745f66726f6d5f766965772e706e67\"></p>\n<p>And now our hand doesn't have that card in it anymore.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">player_1_hand</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6adaada46ed3578fddb8b7513f3f9afdaade4605/5f7374617469632f766965775f61667465725f6465616c745f636172642e706e67\"></p>\n<h2>Customize a Deck</h2>\n<h3>Customize card values</h3>\n<p>In a game like <a href=\"https://en.wikipedia.org/wiki/Blackjack\" rel=\"nofollow\">Blackjack</a>, face cards are all valued at ten. But the default deck specifications assign a jack a value of eleven. Set the <code>specifications</code> parameter to customize options like card values.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">blackjack_deck</span> <span class=\"o\">=</span> <span class=\"n\">Deck</span><span class=\"p\">(</span><span class=\"n\">specifications</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"face_cards\"</span><span class=\"p\">])</span>\n</pre>\n<p>See <code>help(Deck)</code> for more details on how to customize <code>Deck</code> build specifications.</p>\n<h3>Hidden cards</h3>\n<p>If you were going to build a game like <a href=\"https://en.wikipedia.org/wiki/Texas_hold_%27em\" rel=\"nofollow\">Texas hold'em</a> then you would want to hide the turn and the river cards by default.</p>\n<p>When building the <code>Deck</code>, set the <code>hidden</code> parameter to hide all cards  when printed to the terminal by default.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hidden_deck</span> <span class=\"o\">=</span> <span class=\"n\">Deck</span><span class=\"p\">(</span><span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">top_card</span> <span class=\"o\">=</span> <span class=\"n\">hidden_deck</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">top_card</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f74318246425b758364257b2c690d11749a5094/5f7374617469632f68696464656e5f636172642e706e67\"></p>\n<p>This ensures that that \"back\" of a card is printed to the terminal, rather than the regular face. In order to reveal this card, set the <code>Card.hidden</code> attribute to <code>False</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">top_card</span><span class=\"o\">.</span><span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">top_card</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b583bd4a33efcc9907406ee65b670d9f0d9be362/5f7374617469632f756e686964655f68696464656e5f636172642e706e67\"></p>\n<h3>Add Joker cards</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Joker_(playing_card)\" rel=\"nofollow\">Jokers</a> aren't included in a <code>Deck</code> by default. Add them in after the fact if you need them for your game.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">terminal_playing_cards</span> <span class=\"kn\">import</span> <span class=\"n\">Card</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">deck</span> <span class=\"o\">=</span> <span class=\"n\">Deck</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jokers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s2\">\"JK\"</span><span class=\"p\">,</span> <span class=\"n\">suit</span><span class=\"o\">=</span><span class=\"s2\">\"none\"</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">deck</span> <span class=\"o\">+=</span> <span class=\"n\">jokers</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">deck</span><span class=\"p\">[</span><span class=\"mi\">53</span><span class=\"p\">])</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e2c253c4da8d2ef7b14bb5a72c5406fd3bba672/5f7374617469632f6a6f6b65722e706e67\"></p>\n<h3>Remove face card emojis</h3>\n<p>On some terminal windows, emoji's don't print out as expected. Check out how the queen of hearts prints out in the <a href=\"https://cmder.net/\" rel=\"nofollow\">cmder</a> console emulator.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/920415091a5b043e82dade226e5518d976346f87/5f7374617469632f717565656e5f6865617274735f636d6465722e706e67\"></p>\n<p>:rage: Why is it messed up??? :rage:</p>\n<p>Never fear! If this happens on your terminal, make sure to set <code>picture</code> parameter to False when building the <code>Deck</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">no_pic_deck</span> <span class=\"o\">=</span> <span class=\"n\">Deck</span><span class=\"p\">(</span><span class=\"n\">picture</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># Default position of queen of hearts in a sorted Deck</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">queen_hearts</span> <span class=\"o\">=</span> <span class=\"n\">no_pic_deck</span><span class=\"p\">[</span><span class=\"mi\">47</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">queen_hearts</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b858793b2b963ed39f6fcbc7fb03038054299a3a/5f7374617469632f717565656e5f6865617274735f6e6f5f656d6f6a692e706e67\"></p>\n<p>:+1: That's more like it!</p>\n<h2>Built-in methods</h2>\n<h3>Math with Cards</h3>\n<p>All cards have a <code>Card.value</code> attribute that is used for logical comparisions and simple arithmetic with numbers and other <code>Card</code> objects.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">terminal_playing_cards</span> <span class=\"kn\">import</span> <span class=\"n\">Card</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ace_spades</span> <span class=\"o\">=</span> <span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"spades\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ace_hearts</span> <span class=\"o\">=</span> <span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hearts\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">two_hearts</span> <span class=\"o\">=</span> <span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hearts\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ace_spades</span> <span class=\"o\">&lt;</span> <span class=\"n\">two_hearts</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ace_spades</span> <span class=\"o\">==</span> <span class=\"n\">ace_hearts</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">two_hearts</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">ace_spades</span><span class=\"p\">,</span> <span class=\"n\">ace_hearts</span><span class=\"p\">,</span> <span class=\"n\">two_hearts</span><span class=\"p\">])</span>\n<span class=\"mi\">4</span>\n</pre>\n<p>Note: Equality is based on <strong>value alone</strong>. This is why the <code>ace_spades</code> is equal to the <code>ace_hearts</code> even though they have different suits.</p>\n<h3>Iterate through a Deck/View</h3>\n<p>Iteration is simple, treat a <code>Deck</code>/<code>View</code> as a list of <code>Card</code> objects.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">deck</span> <span class=\"o\">=</span> <span class=\"n\">Deck</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hand</span> <span class=\"o\">=</span> <span class=\"n\">View</span><span class=\"p\">([</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">card</span> <span class=\"ow\">in</span> <span class=\"n\">hand</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">card</span><span class=\"p\">))</span>\n<span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'clubs'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">picture</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'diamonds'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">picture</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'spades'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">picture</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">card</span> <span class=\"ow\">in</span> <span class=\"n\">deck</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">card</span><span class=\"p\">))</span>\n<span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'hearts'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">picture</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'clubs'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">picture</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Card</span><span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'diamonds'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">picture</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Check the length of a Deck/View</h3>\n<p>Easy-peasy.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">deck</span> <span class=\"o\">=</span> <span class=\"n\">Deck</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">deck</span><span class=\"p\">)</span>\n<span class=\"mi\">52</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hand</span> <span class=\"o\">=</span> <span class=\"n\">View</span><span class=\"p\">([</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hand</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n</pre>\n\n          </div>"}, "last_serial": 5762483, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d5b86dad893dd177880cf7f843a0ecb9", "sha256": "ba3e274d10fae133362a5cc2cb2505f4d859a131a06290ad3f9442387674eca9"}, "downloads": -1, "filename": "terminal_playing_cards-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d5b86dad893dd177880cf7f843a0ecb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12900, "upload_time": "2019-08-30T22:31:24", "upload_time_iso_8601": "2019-08-30T22:31:24.976808Z", "url": "https://files.pythonhosted.org/packages/38/3b/01ace752c5d4df6c8b7fef72bcb79f3729747c0142a7b5a0e243cbe06a99/terminal_playing_cards-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ac1d0ee044a971a0da31073f3f48667", "sha256": "bbc540da1e5ce81b4652e8f5b92748f5d495bc2affd338ed708965c6db0a17d4"}, "downloads": -1, "filename": "terminal_playing_cards-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7ac1d0ee044a971a0da31073f3f48667", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13433, "upload_time": "2019-08-30T22:31:27", "upload_time_iso_8601": "2019-08-30T22:31:27.525408Z", "url": "https://files.pythonhosted.org/packages/16/fa/3f1d835036d8783e532eddf0bd72fb11fcb5d672a2bd7b16636ee2088b01/terminal_playing_cards-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5b86dad893dd177880cf7f843a0ecb9", "sha256": "ba3e274d10fae133362a5cc2cb2505f4d859a131a06290ad3f9442387674eca9"}, "downloads": -1, "filename": "terminal_playing_cards-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d5b86dad893dd177880cf7f843a0ecb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12900, "upload_time": "2019-08-30T22:31:24", "upload_time_iso_8601": "2019-08-30T22:31:24.976808Z", "url": "https://files.pythonhosted.org/packages/38/3b/01ace752c5d4df6c8b7fef72bcb79f3729747c0142a7b5a0e243cbe06a99/terminal_playing_cards-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ac1d0ee044a971a0da31073f3f48667", "sha256": "bbc540da1e5ce81b4652e8f5b92748f5d495bc2affd338ed708965c6db0a17d4"}, "downloads": -1, "filename": "terminal_playing_cards-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7ac1d0ee044a971a0da31073f3f48667", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13433, "upload_time": "2019-08-30T22:31:27", "upload_time_iso_8601": "2019-08-30T22:31:27.525408Z", "url": "https://files.pythonhosted.org/packages/16/fa/3f1d835036d8783e532eddf0bd72fb11fcb5d672a2bd7b16636ee2088b01/terminal_playing_cards-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:55 2020"}