{"info": {"author": "Legisign.org", "author_email": "software@legisign.org", "bugtrack_url": null, "classifiers": [], "description": "# praat-textgrids -- Praat TextGrid manipulation in Python\n\n## Description\n\n`textgrids` is a module for handling Praat TextGrid files in any format (short text, long text, or binary). The module implements five classes, from largest to smallest:\n\n* `TextGrid` -- a `dict` with tier names as keys and `Tier`s as values\n* `Tier` -- a `list` of either `Interval` or `Point` objects\n* `Interval` -- an `object` representing Praat intervals\n* `Point` -- a `namedtuple` representing Praat points\n* `Transcript` -- a `str` with special methods for transcription handling\n\nAll Praat text objects are represented as `Transcript` objects.\n\nThe module also exports the following variables:\n\n* `diacritics` -- a `dict` of all diacritics with their Unicode counterparts\n* `inline_diacritics` -- a `dict` of inline (symbol-like) diacritics\n* `index_diacritics` -- a `dict` of over/understrike diacritics\n* `symbols` -- a `dict` of special Praat symbols with their Unicode counterparts\n* `vowels` -- a `list` of all vowels in either Praat or Unicode notation\n\nAnd the following constants (although they CAN be changed due to Python they SHOULDN\u2019T be changed):\n\n* `BINARY` -- symbolic name for the binary file format\n* `TEXT_LONG` -- symbolic name for the long text file format\n* `TEXT_SHORT` -- symbolic name for the short text file format\n* `version` -- module version as string\n\n## Version\n\nThis file documents `praat-textgrids` version 1.3.1.\n\n## Copyright\n\nCopyright \u00a9 2019\u201320 Legisign.org, Tommi Nieminen <software@legisign.org>\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n## Module contents\n\n### 0. Module properties\n\nBesides `textgrids.version`, which contains the module version number as string, the module exports the following properties:\n\n#### 0.1. symbols\n\n`symbols` is a `dict` that contains all the Praat special notation symbols (as keys) and their Unicode counterparts (as values).\n\n#### 0.2. vowels\n\n`vowels` is a `list` of all vowel symbols in either Praat notation (e.g., `\"\\as\"`) or in Unicode. It is used by `Interval` methods `containsvowel()` and `startswithvowel()`, so changing it, for example, adding new symbols to it or removing symbols used for other purposes in a specific case, will change how those methods function.\n\n#### 0.3. diacritics, inline_diacritics, and index_diacritics\n\n`diacritics` is a `dict` of all diacritics in Praat notation (as keys) and their Unicode counterparts (as values).\n\n`inline_diacritics` and `index_diacritics` are subsets of `diacritics`. The former are semantically diacritics but appear as inline symbols, the latter are the \u201ctrue\u201d diacritics (i.e., under- or overstrikes) that need special handling when transcoding.\n\n### 0.4. TEXT_LONG, TEXT_SHORT, BINARY\n\nSymbolic constants specifying different file formats in `TextGrid.format()` and `TextGrid.write()` methods. Internally they are just small integers (0, 1, and 2, respectively). The default format is `TEXT_LONG`.\n\n### 1. TextGrid\n\n`TextGrid` is an `collections.OrderedDict` whose keys are tier names (strings) and values are `Tier` objects. The constructor takes an optional filename argument for easy loading and parsing textgrid files.\n\n#### 1.1. Properties\n\nAll the properties of `dict` plus:\n\n* `filename` holds the textgrid filename, if any. `read()` and `write()` methods both set or update it.\n\n#### 1.2. Methods\n\nAll the methods of `dict` plus:\n\n* `parse()` -- parse string into a TextGrid\n* `read()` -- read (and parse) a TextGrid file\n* `tier_from_csv()` -- read a textgrid tier from a CSV file\n* `tier_to_csv()` -- write a textgrid tier into a CSV file\n* `write()` -- write a TextGrid file\n\n`parse()` takes an obligatory string (or `bytes`) argument which contains textgrid data in any of Praat\u2019s three formats (long text, short text, or binary).\n\n`read()` and `write()` both take an obligatory filename argument.\n\n`write()` can take an optional argument specifying the file format; this can be one of `BINARY` (= `int` 2), `TEXT_LONG` (= `int` 0, the default), or `TEXT_SHORT` (= `int` 1).\n\n`tier_from_csv()` and `tier_to_csv()` both take two obligatory arguments, the tier name and the filename, in that order.\n\n### 2. Tier\n\n`Tier` is a list of either `Interval` or `Point` objects.\n\n**NOTE:** `Tier` only allows adding `Interval` or `Point` objects. Adding anything else or mixing `Interval`s and `Point`s will trigger an exception.\n\n#### 2.2. Properties\n\nAll the properties of `list` plus:\n\n* `is_point_tier` -- `bool` `True` for point tier, `False` for interval tier.\n* `tier_type` -- `str`, either `\"IntervalTier\"` or `\"PointTier\"`\n\n`tier_type` exists principally for the convenience of the formatting functions.\n\n#### 2.3. Methods\n\nAll the methods of `list` plus:\n\n* `concat()` -- concatenate intervals\n* `to_csv()` -- convert tier data into a CSV-like list\n\n`concat()` concatenates given intervals into one. It takes two arguments, `first=` and `last=`, both of which are integer indexes with the usual Python semantics: 0 stands for the first element, -1 for the last element, these being also the defaults. The function raises a `TypeError` if used with a point tier, and `ValueError` if the parameters do not specify a valid slice. **Note** that this is a function and returns the result instead of modifying the Tier in place.\n\n`to_csv()` returns a CSV-like list. It\u2019s mainly intended to be used from the `TextGrid` level method `tier_to_csv()` but can be called directly if writing to a file is not desired.\n\n### 3. Interval\n\n`Interval` is an `object` class representing one Interval on an IntervalTier.\n\n#### 3.1. Properties\n\n* `dur` -- interval duration (`float`)\n* `mid` -- interval midpoint (`float`)\n* `text` -- text label (`Transcript`)\n* `xmax` -- interval end time (`float`)\n* `xmin` -- interval start time (`float`)\n\n#### 3.3. Methods\n\n* `containsvowel()` -- does the interval contain a vowel?\n* `endswithvowel()` -- does the interval end with a vowel?\n* `startswithvowel()` -- does the interval start with a vowel?\n* `timegrid()` -- create a time grid\n\n`containsvowel()`, `endswithvowel()`, and `startswithvowel()` are `bool` functions. They check for possible vowels in the `text` property in both Praat notation and Unicode, but can of course make an error if symbols are used in an unexpected way. They don\u2019t take arguments. (Internally, `endswithvowel()` first transcodes the text to IPA removing all diacritics to simplify the test.)\n\n`timegrid()` returns a list of timepoints (in `float`) evenly distributed from `xmin` to `xmax`. It takes an optional integer argument specifying the number of timepoints desired; the default is 3. It raises a `ValueError` if the argument is not an integer or is less than 1.\n\n### 4. Point\n\n`Point` is a `namedtuple` representing one Point on a PointTier.\n\n#### 4.1. Properties\n\n* `text` -- text label (`Transcript`)\n* `xpos` -- temporal position (`float`)\n\n### 5. Transcript\n\n`Transcript` is a `str`-derived class with one special method: `transcode()`.\n\n### 5.1. Properties\n\nAll the properties of `str`.\n\n#### 5.2. Methods\n\nAll the methods of `str` plus:\n\n* `transcode()` -- convert Praat notation to Unicode or vice versa.\n\nWithout arguments, `transcode()` assumes its input to be in Praat notation and converts it to Unicode; no check is made as to whether the input really is in Praat notation but nothing **should** happen if it isn\u2019t. User should take care and handle any exceptions.\n\nOptional `to_unicode=False` argument inverts the direction of the transcoding from Unicode to Praat. Again, it is not checked whether input is in Unicode.\n\nWith optional `retain_diacritics=True` argument the transcoding does not remove over- and understrike diacritics from the result.\n\n## Examples\n\n### Snippet 1: list syllable durations\n\n    import sys\n    import textgrids\n\n    for arg in sys.argv[1:]:\n        # Try to open the file as textgrid\n        try:\n            grid = textgrids.TextGrid(arg)\n        # Discard and try the next one\n        except:\n            continue\n\n        # Assume \"syllables\" is the name of the tier\n        # containing syllable information\n        for syll in grid['syllables']:\n            # Convert Praat to Unicode in the label\n            label = syll.text.transcode()\n            # Print label and syllable duration, CSV-like\n            print('\"{}\";{}'.format(label, syll.dur))\n\n### Snippet 2: convert any textgrid to binary format\n\n    import sys\n    import os.path\n    import textgrids\n\n    for arg in sys.argv[1:]:\n        name, ext = os.path.splitext(arg)\n        try:\n            grid = textgrids.TextGrid(arg)\n        except (textgrids.ParseError, textgrids.BinaryError):\n            print('Not a recognized file format!', file=sys.stderr)\n            continue\n\n        # Write a new file\n        grid.write(name + '.bin', fmt=textgrids.BINARY)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Legisign/Praat-textgrids", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "praat-textgrids", "package_url": "https://pypi.org/project/praat-textgrids/", "platform": "", "project_url": "https://pypi.org/project/praat-textgrids/", "project_urls": {"Homepage": "http://github.com/Legisign/Praat-textgrids"}, "release_url": "https://pypi.org/project/praat-textgrids/1.3.1/", "requires_dist": null, "requires_python": "", "summary": "Manipulation of Praat TextGrids", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>praat-textgrids -- Praat TextGrid manipulation in Python</h1>\n<h2>Description</h2>\n<p><code>textgrids</code> is a module for handling Praat TextGrid files in any format (short text, long text, or binary). The module implements five classes, from largest to smallest:</p>\n<ul>\n<li><code>TextGrid</code> -- a <code>dict</code> with tier names as keys and <code>Tier</code>s as values</li>\n<li><code>Tier</code> -- a <code>list</code> of either <code>Interval</code> or <code>Point</code> objects</li>\n<li><code>Interval</code> -- an <code>object</code> representing Praat intervals</li>\n<li><code>Point</code> -- a <code>namedtuple</code> representing Praat points</li>\n<li><code>Transcript</code> -- a <code>str</code> with special methods for transcription handling</li>\n</ul>\n<p>All Praat text objects are represented as <code>Transcript</code> objects.</p>\n<p>The module also exports the following variables:</p>\n<ul>\n<li><code>diacritics</code> -- a <code>dict</code> of all diacritics with their Unicode counterparts</li>\n<li><code>inline_diacritics</code> -- a <code>dict</code> of inline (symbol-like) diacritics</li>\n<li><code>index_diacritics</code> -- a <code>dict</code> of over/understrike diacritics</li>\n<li><code>symbols</code> -- a <code>dict</code> of special Praat symbols with their Unicode counterparts</li>\n<li><code>vowels</code> -- a <code>list</code> of all vowels in either Praat or Unicode notation</li>\n</ul>\n<p>And the following constants (although they CAN be changed due to Python they SHOULDN\u2019T be changed):</p>\n<ul>\n<li><code>BINARY</code> -- symbolic name for the binary file format</li>\n<li><code>TEXT_LONG</code> -- symbolic name for the long text file format</li>\n<li><code>TEXT_SHORT</code> -- symbolic name for the short text file format</li>\n<li><code>version</code> -- module version as string</li>\n</ul>\n<h2>Version</h2>\n<p>This file documents <code>praat-textgrids</code> version 1.3.1.</p>\n<h2>Copyright</h2>\n<p>Copyright \u00a9 2019\u201320 Legisign.org, Tommi Nieminen <a href=\"mailto:software@legisign.org\">software@legisign.org</a></p>\n<p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p>\n<p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License along with this program.  If not, see <a href=\"https://www.gnu.org/licenses/\" rel=\"nofollow\">https://www.gnu.org/licenses/</a>.</p>\n<h2>Module contents</h2>\n<h3>0. Module properties</h3>\n<p>Besides <code>textgrids.version</code>, which contains the module version number as string, the module exports the following properties:</p>\n<h4>0.1. symbols</h4>\n<p><code>symbols</code> is a <code>dict</code> that contains all the Praat special notation symbols (as keys) and their Unicode counterparts (as values).</p>\n<h4>0.2. vowels</h4>\n<p><code>vowels</code> is a <code>list</code> of all vowel symbols in either Praat notation (e.g., <code>\"\\as\"</code>) or in Unicode. It is used by <code>Interval</code> methods <code>containsvowel()</code> and <code>startswithvowel()</code>, so changing it, for example, adding new symbols to it or removing symbols used for other purposes in a specific case, will change how those methods function.</p>\n<h4>0.3. diacritics, inline_diacritics, and index_diacritics</h4>\n<p><code>diacritics</code> is a <code>dict</code> of all diacritics in Praat notation (as keys) and their Unicode counterparts (as values).</p>\n<p><code>inline_diacritics</code> and <code>index_diacritics</code> are subsets of <code>diacritics</code>. The former are semantically diacritics but appear as inline symbols, the latter are the \u201ctrue\u201d diacritics (i.e., under- or overstrikes) that need special handling when transcoding.</p>\n<h3>0.4. TEXT_LONG, TEXT_SHORT, BINARY</h3>\n<p>Symbolic constants specifying different file formats in <code>TextGrid.format()</code> and <code>TextGrid.write()</code> methods. Internally they are just small integers (0, 1, and 2, respectively). The default format is <code>TEXT_LONG</code>.</p>\n<h3>1. TextGrid</h3>\n<p><code>TextGrid</code> is an <code>collections.OrderedDict</code> whose keys are tier names (strings) and values are <code>Tier</code> objects. The constructor takes an optional filename argument for easy loading and parsing textgrid files.</p>\n<h4>1.1. Properties</h4>\n<p>All the properties of <code>dict</code> plus:</p>\n<ul>\n<li><code>filename</code> holds the textgrid filename, if any. <code>read()</code> and <code>write()</code> methods both set or update it.</li>\n</ul>\n<h4>1.2. Methods</h4>\n<p>All the methods of <code>dict</code> plus:</p>\n<ul>\n<li><code>parse()</code> -- parse string into a TextGrid</li>\n<li><code>read()</code> -- read (and parse) a TextGrid file</li>\n<li><code>tier_from_csv()</code> -- read a textgrid tier from a CSV file</li>\n<li><code>tier_to_csv()</code> -- write a textgrid tier into a CSV file</li>\n<li><code>write()</code> -- write a TextGrid file</li>\n</ul>\n<p><code>parse()</code> takes an obligatory string (or <code>bytes</code>) argument which contains textgrid data in any of Praat\u2019s three formats (long text, short text, or binary).</p>\n<p><code>read()</code> and <code>write()</code> both take an obligatory filename argument.</p>\n<p><code>write()</code> can take an optional argument specifying the file format; this can be one of <code>BINARY</code> (= <code>int</code> 2), <code>TEXT_LONG</code> (= <code>int</code> 0, the default), or <code>TEXT_SHORT</code> (= <code>int</code> 1).</p>\n<p><code>tier_from_csv()</code> and <code>tier_to_csv()</code> both take two obligatory arguments, the tier name and the filename, in that order.</p>\n<h3>2. Tier</h3>\n<p><code>Tier</code> is a list of either <code>Interval</code> or <code>Point</code> objects.</p>\n<p><strong>NOTE:</strong> <code>Tier</code> only allows adding <code>Interval</code> or <code>Point</code> objects. Adding anything else or mixing <code>Interval</code>s and <code>Point</code>s will trigger an exception.</p>\n<h4>2.2. Properties</h4>\n<p>All the properties of <code>list</code> plus:</p>\n<ul>\n<li><code>is_point_tier</code> -- <code>bool</code> <code>True</code> for point tier, <code>False</code> for interval tier.</li>\n<li><code>tier_type</code> -- <code>str</code>, either <code>\"IntervalTier\"</code> or <code>\"PointTier\"</code></li>\n</ul>\n<p><code>tier_type</code> exists principally for the convenience of the formatting functions.</p>\n<h4>2.3. Methods</h4>\n<p>All the methods of <code>list</code> plus:</p>\n<ul>\n<li><code>concat()</code> -- concatenate intervals</li>\n<li><code>to_csv()</code> -- convert tier data into a CSV-like list</li>\n</ul>\n<p><code>concat()</code> concatenates given intervals into one. It takes two arguments, <code>first=</code> and <code>last=</code>, both of which are integer indexes with the usual Python semantics: 0 stands for the first element, -1 for the last element, these being also the defaults. The function raises a <code>TypeError</code> if used with a point tier, and <code>ValueError</code> if the parameters do not specify a valid slice. <strong>Note</strong> that this is a function and returns the result instead of modifying the Tier in place.</p>\n<p><code>to_csv()</code> returns a CSV-like list. It\u2019s mainly intended to be used from the <code>TextGrid</code> level method <code>tier_to_csv()</code> but can be called directly if writing to a file is not desired.</p>\n<h3>3. Interval</h3>\n<p><code>Interval</code> is an <code>object</code> class representing one Interval on an IntervalTier.</p>\n<h4>3.1. Properties</h4>\n<ul>\n<li><code>dur</code> -- interval duration (<code>float</code>)</li>\n<li><code>mid</code> -- interval midpoint (<code>float</code>)</li>\n<li><code>text</code> -- text label (<code>Transcript</code>)</li>\n<li><code>xmax</code> -- interval end time (<code>float</code>)</li>\n<li><code>xmin</code> -- interval start time (<code>float</code>)</li>\n</ul>\n<h4>3.3. Methods</h4>\n<ul>\n<li><code>containsvowel()</code> -- does the interval contain a vowel?</li>\n<li><code>endswithvowel()</code> -- does the interval end with a vowel?</li>\n<li><code>startswithvowel()</code> -- does the interval start with a vowel?</li>\n<li><code>timegrid()</code> -- create a time grid</li>\n</ul>\n<p><code>containsvowel()</code>, <code>endswithvowel()</code>, and <code>startswithvowel()</code> are <code>bool</code> functions. They check for possible vowels in the <code>text</code> property in both Praat notation and Unicode, but can of course make an error if symbols are used in an unexpected way. They don\u2019t take arguments. (Internally, <code>endswithvowel()</code> first transcodes the text to IPA removing all diacritics to simplify the test.)</p>\n<p><code>timegrid()</code> returns a list of timepoints (in <code>float</code>) evenly distributed from <code>xmin</code> to <code>xmax</code>. It takes an optional integer argument specifying the number of timepoints desired; the default is 3. It raises a <code>ValueError</code> if the argument is not an integer or is less than 1.</p>\n<h3>4. Point</h3>\n<p><code>Point</code> is a <code>namedtuple</code> representing one Point on a PointTier.</p>\n<h4>4.1. Properties</h4>\n<ul>\n<li><code>text</code> -- text label (<code>Transcript</code>)</li>\n<li><code>xpos</code> -- temporal position (<code>float</code>)</li>\n</ul>\n<h3>5. Transcript</h3>\n<p><code>Transcript</code> is a <code>str</code>-derived class with one special method: <code>transcode()</code>.</p>\n<h3>5.1. Properties</h3>\n<p>All the properties of <code>str</code>.</p>\n<h4>5.2. Methods</h4>\n<p>All the methods of <code>str</code> plus:</p>\n<ul>\n<li><code>transcode()</code> -- convert Praat notation to Unicode or vice versa.</li>\n</ul>\n<p>Without arguments, <code>transcode()</code> assumes its input to be in Praat notation and converts it to Unicode; no check is made as to whether the input really is in Praat notation but nothing <strong>should</strong> happen if it isn\u2019t. User should take care and handle any exceptions.</p>\n<p>Optional <code>to_unicode=False</code> argument inverts the direction of the transcoding from Unicode to Praat. Again, it is not checked whether input is in Unicode.</p>\n<p>With optional <code>retain_diacritics=True</code> argument the transcoding does not remove over- and understrike diacritics from the result.</p>\n<h2>Examples</h2>\n<h3>Snippet 1: list syllable durations</h3>\n<pre><code>import sys\nimport textgrids\n\nfor arg in sys.argv[1:]:\n    # Try to open the file as textgrid\n    try:\n        grid = textgrids.TextGrid(arg)\n    # Discard and try the next one\n    except:\n        continue\n\n    # Assume \"syllables\" is the name of the tier\n    # containing syllable information\n    for syll in grid['syllables']:\n        # Convert Praat to Unicode in the label\n        label = syll.text.transcode()\n        # Print label and syllable duration, CSV-like\n        print('\"{}\";{}'.format(label, syll.dur))\n</code></pre>\n<h3>Snippet 2: convert any textgrid to binary format</h3>\n<pre><code>import sys\nimport os.path\nimport textgrids\n\nfor arg in sys.argv[1:]:\n    name, ext = os.path.splitext(arg)\n    try:\n        grid = textgrids.TextGrid(arg)\n    except (textgrids.ParseError, textgrids.BinaryError):\n        print('Not a recognized file format!', file=sys.stderr)\n        continue\n\n    # Write a new file\n    grid.write(name + '.bin', fmt=textgrids.BINARY)\n</code></pre>\n\n          </div>"}, "last_serial": 6866349, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "f022fa4b6aff8e3e5a4acf6fde7aa4f2", "sha256": "1d6cb1afd37bfb1aee7b7b5427db9ba99cbd428645204bbf18671b95321862be"}, "downloads": -1, "filename": "praat_textgrids-1.0.2-py3.6.egg", "has_sig": false, "md5_digest": "f022fa4b6aff8e3e5a4acf6fde7aa4f2", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 15448, "upload_time": "2019-06-30T16:15:03", "upload_time_iso_8601": "2019-06-30T16:15:03.263844Z", "url": "https://files.pythonhosted.org/packages/d5/ff/a524f67148ad2ac20bfc46b32abfde37126bd29345dff06e36c9228d71e0/praat_textgrids-1.0.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a2998186ea123814bcdd088a5c77ac7", "sha256": "31e74681a07afcc9533b3a457e16f3ed6864c7c2fe8ef4b94b4e95463c75aaea"}, "downloads": -1, "filename": "praat-textgrids-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0a2998186ea123814bcdd088a5c77ac7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8616, "upload_time": "2019-06-30T16:15:05", "upload_time_iso_8601": "2019-06-30T16:15:05.241362Z", "url": "https://files.pythonhosted.org/packages/45/1f/982c453f32f8e5f5fa78fce62f20e852065290edb00282fd712fb26fab69/praat-textgrids-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "8b56028427add396ce8430fb5152f649", "sha256": "e3a908ad43a3164cf108158984de56117afed1214476aa1244c879d51bccb9c5"}, "downloads": -1, "filename": "praat_textgrids-1.0.3-py3.6.egg", "has_sig": false, "md5_digest": "8b56028427add396ce8430fb5152f649", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 17026, "upload_time": "2019-07-10T12:04:58", "upload_time_iso_8601": "2019-07-10T12:04:58.496597Z", "url": "https://files.pythonhosted.org/packages/52/e6/0201d2ebcd7887013c37dff4534120ee6b0ec9be439faf6f46ef9232c0e8/praat_textgrids-1.0.3-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b952f31057cb4147c405ab47ede3e4ad", "sha256": "5201ad2c44adb07cb3a7fae3936fa44283974e2e601fd2a5624a045bef57c3b4"}, "downloads": -1, "filename": "praat-textgrids-1.0.3.tar.gz", "has_sig": false, "md5_digest": "b952f31057cb4147c405ab47ede3e4ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9697, "upload_time": "2019-07-10T12:05:00", "upload_time_iso_8601": "2019-07-10T12:05:00.374743Z", "url": "https://files.pythonhosted.org/packages/63/ae/0b608da96d5ae928549daffa4ef5e8db0e7ad05b1e9bef05bec7ebd1b79d/praat-textgrids-1.0.3.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "17f9e9d56f1688921d08b4714e3aa8eb", "sha256": "5af554f304712ad274387e5a556999e5797a3c6c772cc63f95790b91f6676f7f"}, "downloads": -1, "filename": "praat_textgrids-1.2.0-py3.7.egg", "has_sig": false, "md5_digest": "17f9e9d56f1688921d08b4714e3aa8eb", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 20012, "upload_time": "2019-07-14T19:03:58", "upload_time_iso_8601": "2019-07-14T19:03:58.423069Z", "url": "https://files.pythonhosted.org/packages/7b/dc/7b6b02b43abb85e81aff5c08bfa250f310af0da12c0587f862c6a9a3b05f/praat_textgrids-1.2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ac5eef6dea4ccb755f4daee199ba933", "sha256": "876329cfb8a037b7222c0d77a28e625fb2bc311e815edee21212e03e7a5fa613"}, "downloads": -1, "filename": "praat-textgrids-1.2.0.tar.gz", "has_sig": false, "md5_digest": "4ac5eef6dea4ccb755f4daee199ba933", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11003, "upload_time": "2019-07-14T19:04:00", "upload_time_iso_8601": "2019-07-14T19:04:00.166636Z", "url": "https://files.pythonhosted.org/packages/fc/15/ce5f224603105c93f43ec3d9c41a3e4b13dabfd7835bee57266466d0d6db/praat-textgrids-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "7f0d7d2948a270955ac4e00536942f3f", "sha256": "72f8bd0b724e7639b868cdde349a161ecaef7535e268957b11404df0925ca793"}, "downloads": -1, "filename": "praat_textgrids-1.3.0-py3.6.egg", "has_sig": false, "md5_digest": "7f0d7d2948a270955ac4e00536942f3f", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 22012, "upload_time": "2020-01-21T15:11:51", "upload_time_iso_8601": "2020-01-21T15:11:51.211512Z", "url": "https://files.pythonhosted.org/packages/d2/10/6827ee180ec28eadfe0a8c6973606561c4de60f0ce1b26ccbfdc81b8bb00/praat_textgrids-1.3.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "89302f842ca6f88da9ad8b69ae9aaedf", "sha256": "f8588f9fdb99403c47909d40e126c29a701fb47241b7410ce227662678f35b56"}, "downloads": -1, "filename": "praat-textgrids-1.3.0.tar.gz", "has_sig": false, "md5_digest": "89302f842ca6f88da9ad8b69ae9aaedf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12495, "upload_time": "2020-01-21T15:11:52", "upload_time_iso_8601": "2020-01-21T15:11:52.859988Z", "url": "https://files.pythonhosted.org/packages/de/10/87f70ebac579347557fa92ed2511668355cfa09083478c7934af25f41175/praat-textgrids-1.3.0.tar.gz", "yanked": false}], "1.3.0.dev5": [{"comment_text": "", "digests": {"md5": "a0a783eeb4afa064d586f2c8fa511394", "sha256": "3f593613af00e3d6b19443a7ec93ed59aea4a5ac1f57efbf58c4682665034d42"}, "downloads": -1, "filename": "praat_textgrids-1.3.0.dev5-py3.7.egg", "has_sig": false, "md5_digest": "a0a783eeb4afa064d586f2c8fa511394", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 21510, "upload_time": "2020-01-21T15:11:48", "upload_time_iso_8601": "2020-01-21T15:11:48.200318Z", "url": "https://files.pythonhosted.org/packages/02/e6/21a51dc8e94c0f7be990bbda734c319c8667711a8f27aa0a4d23e713a01f/praat_textgrids-1.3.0.dev5-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "59a17e978ef1b58eef52a3e3b8393c24", "sha256": "cddb890b8766010b8593f4b0be220578834fef8ca4ca897e0979d043854e31fd"}, "downloads": -1, "filename": "praat-textgrids-1.3.0.dev5.tar.gz", "has_sig": false, "md5_digest": "59a17e978ef1b58eef52a3e3b8393c24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11167, "upload_time": "2020-01-21T15:11:49", "upload_time_iso_8601": "2020-01-21T15:11:49.715904Z", "url": "https://files.pythonhosted.org/packages/8d/00/896c4182431bab95f3b56ec91e65bafd2bf4364a89ea60b8d4cc76827986/praat-textgrids-1.3.0.dev5.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "2b966bdd9aa858cc22db2bfcf9bfe320", "sha256": "e0db2005f0e455e57b36190bc2f5dfa2c6cc4d552f48148648a0bd2cbf7fdd11"}, "downloads": -1, "filename": "praat_textgrids-1.3.1-py3.6.egg", "has_sig": false, "md5_digest": "2b966bdd9aa858cc22db2bfcf9bfe320", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 22114, "upload_time": "2020-03-23T15:47:39", "upload_time_iso_8601": "2020-03-23T15:47:39.714011Z", "url": "https://files.pythonhosted.org/packages/04/8c/05a6bdc6817481fe5b1d88bb397daaf9b5bd6ce1c9a5e27e7912e8139496/praat_textgrids-1.3.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5302da0e0cc820f2e04692687d54e62d", "sha256": "21a7d0cdee907db6c4e011a8d62e903b1a9a7c89781d05afc0a3036280e690b5"}, "downloads": -1, "filename": "praat-textgrids-1.3.1.tar.gz", "has_sig": false, "md5_digest": "5302da0e0cc820f2e04692687d54e62d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12597, "upload_time": "2020-03-23T15:47:41", "upload_time_iso_8601": "2020-03-23T15:47:41.039939Z", "url": "https://files.pythonhosted.org/packages/58/a1/474304ce1c8d391a6c6bf87ed9f9566eab3d594dd1dbb739a79db7720c3e/praat-textgrids-1.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b966bdd9aa858cc22db2bfcf9bfe320", "sha256": "e0db2005f0e455e57b36190bc2f5dfa2c6cc4d552f48148648a0bd2cbf7fdd11"}, "downloads": -1, "filename": "praat_textgrids-1.3.1-py3.6.egg", "has_sig": false, "md5_digest": "2b966bdd9aa858cc22db2bfcf9bfe320", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 22114, "upload_time": "2020-03-23T15:47:39", "upload_time_iso_8601": "2020-03-23T15:47:39.714011Z", "url": "https://files.pythonhosted.org/packages/04/8c/05a6bdc6817481fe5b1d88bb397daaf9b5bd6ce1c9a5e27e7912e8139496/praat_textgrids-1.3.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5302da0e0cc820f2e04692687d54e62d", "sha256": "21a7d0cdee907db6c4e011a8d62e903b1a9a7c89781d05afc0a3036280e690b5"}, "downloads": -1, "filename": "praat-textgrids-1.3.1.tar.gz", "has_sig": false, "md5_digest": "5302da0e0cc820f2e04692687d54e62d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12597, "upload_time": "2020-03-23T15:47:41", "upload_time_iso_8601": "2020-03-23T15:47:41.039939Z", "url": "https://files.pythonhosted.org/packages/58/a1/474304ce1c8d391a6c6bf87ed9f9566eab3d594dd1dbb739a79db7720c3e/praat-textgrids-1.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:15 2020"}