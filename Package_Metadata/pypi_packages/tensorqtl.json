{"info": {"author": "Francois Aguet (Broad Institute)", "author_email": "francois@broadinstitute.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "## tensorQTL\n\ntensorQTL is a GPU-based QTL mapper, enabling ~200-300 fold faster *cis*- and *trans*-QTL mapping compared to CPU-based implementations.\n\nIf you use tensorQTL in your research, please cite the following paper:\n[Taylor-Weiner, Aguet, et al., bioRxiv, 2019](https://www.biorxiv.org/content/10.1101/470138v3).\n\nEmpirical beta-approximated p-values are computed as described in [FastQTL](http://fastqtl.sourceforge.net/) ([Ongen et al., 2016](https://academic.oup.com/bioinformatics/article/32/10/1479/1742545)).\n\n### Install\nYou can install tensorQTL using pip:\n```\npip3 install tensorqtl\n```\nor directly from this repository:\n```\n$ git clone git@github.com:broadinstitute/tensorqtl.git\n$ cd tensorqtl\n# set up virtual environment and install\n$ virtualenv venv\n$ source venv/bin/activate\n(venv)$ pip install -r install/requirements.txt .\n```\n\n### Requirements\n\ntensorQTL requires an environment configured with a GPU. Instructions for setting up a virtual machine on Google Cloud Platform are provided [here](install/INSTALL.md).\n\n### Input formats\n\ntensorQTL requires three input files: genotypes, phenotypes, and covariates. Phenotypes must be provided in BED format (phenotypes x samples), and covariates as a text file (covariates x samples). Both are in the format used by [FastQTL](http://fastqtl.sourceforge.net/). Genotypes must currently be in [PLINK](https://www.cog-genomics.org/plink/2.0/) format, and can be converted as follows:\n```\nplink2 --make-bed \\\n    --output-chr chrM \\\n    --vcf ${plink_prefix_path}.vcf.gz \\\n    --out ${plink_prefix_path}\n```\n\n### Examples\nFor examples illustrating *cis*- and *trans*-QTL mapping, please see [tensorqtl_examples.ipynb](example/tensorqtl_examples.ipynb).\n\n### Running tensorQTL from the command line\nThis section describes how  to run tensorQTL from the command line. For a full list of options, run\n```\npython3 -m tensorqtl --help\n```\n\n#### *cis*-QTL mapping\nPhenotype-level summary statistics with empirical p-values:\n```\npython3 -m tensorqtl ${plink_prefix_path} ${expression_bed} ${prefix} \\\n    --covariates ${covariates_file} \\\n    --mode cis\n```\nAll variant-phenotype associations:\n```\npython3 -m tensorqtl ${plink_prefix_path} ${expression_bed} ${prefix} \\\n    --covariates ${covariates_file} \\\n    --mode cis_nominal\n```\nThis will generate a [parquet](https://parquet.apache.org/) file for each chromosome. These files can be read using `pandas`:\n```\nimport pandas as pd\ndf = pd.read_parquet(file_name)\n```\nConditionally independent *cis*-QTL (as described in [GTEx Consortium, 2017](https://www.nature.com/articles/nature24277)):\n```\npython3 -m tensorqtl ${plink_prefix_path} ${expression_bed} ${prefix} \\\n    --covariates ${covariates_file} \\\n    --cis_results ${cis_results_file} \\\n    --mode cis_independent\n```\n\n#### *trans*-QTL mapping\n```\npython3 -m tensorqtl ${plink_prefix_path} ${expression_bed} ${prefix} \\\n    --covariates ${covariates_file} \\\n    --mode trans\n```\nFor *trans*-QTL mapping, tensorQTL generates sparse output by default (associations with p-value < 1e-5). *cis*-associations are filtered out. The output is in parquet format, with four columns: phenotype_id, variant_id, pval, maf.\n\n### Running tensorQTL as a Python module\nTensorQTL can also be run as a module to more efficiently run multiple analyses:\n```\nimport pandas as pd\nimport tensorqtl\nfrom tensorqtl import genotypeio, cis, trans\n```\n#### Loading input files\nLoad phenotypes and covariates:\n```\nphenotype_df, phenotype_pos_df = tensorqtl.read_phenotype_bed(phenotype_bed_file)\ncovariates_df = pd.read_csv(covariates_file, sep='\\t', index_col=0).T  # samples x covariates\n```\nGenotypes can be loaded as follows, where `plink_prefix_path` is the path to the VCF in PLINK format:\n```\npr = genotypeio.PlinkReader(plink_prefix_path)\n# load genotypes and variants into data frames\ngenotype_df = pd.DataFrame(pr.get_all_genotypes(), index=pr.bim['snp'], columns=pr.fam['iid'])\nvariant_df = pr.bim.set_index('snp')[['chrom', 'pos']]\n```\nTo save memory when using genotypes for a subset of samples, you can specify the samples as follows (this is not strictly necessary, since tensorQTL will select the relevant samples from `genotype_df` otherwise):\n```\npr = genotypeio.PlinkReader(plink_prefix_path, select_samples=phenotype_df.columns)\n```\n#### *cis*-QTL mapping\n```\ncis_df = cis.map_cis(genotype_df, variant_df, phenotype_df, phenotype_pos_df, covariates_df)\ntensorqtl.calculate_qvalues(cis_df, qvalue_lambda=0.85)\n```\n#### *trans*-QTL mapping\n```\ntrans_df = trans.map_trans(genotype_df, phenotype_df, covariates_df, return_sparse=True)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tensorqtl", "package_url": "https://pypi.org/project/tensorqtl/", "platform": "", "project_url": "https://pypi.org/project/tensorqtl/", "project_urls": null, "release_url": "https://pypi.org/project/tensorqtl/1.0.2/", "requires_dist": ["numpy", "pandas", "pyarrow", "scipy", "pandas-plink", "torch"], "requires_python": "", "summary": "GPU-based QTL mapper", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>tensorQTL</h2>\n<p>tensorQTL is a GPU-based QTL mapper, enabling ~200-300 fold faster <em>cis</em>- and <em>trans</em>-QTL mapping compared to CPU-based implementations.</p>\n<p>If you use tensorQTL in your research, please cite the following paper:\n<a href=\"https://www.biorxiv.org/content/10.1101/470138v3\" rel=\"nofollow\">Taylor-Weiner, Aguet, et al., bioRxiv, 2019</a>.</p>\n<p>Empirical beta-approximated p-values are computed as described in <a href=\"http://fastqtl.sourceforge.net/\" rel=\"nofollow\">FastQTL</a> (<a href=\"https://academic.oup.com/bioinformatics/article/32/10/1479/1742545\" rel=\"nofollow\">Ongen et al., 2016</a>).</p>\n<h3>Install</h3>\n<p>You can install tensorQTL using pip:</p>\n<pre><code>pip3 install tensorqtl\n</code></pre>\n<p>or directly from this repository:</p>\n<pre><code>$ git clone git@github.com:broadinstitute/tensorqtl.git\n$ cd tensorqtl\n# set up virtual environment and install\n$ virtualenv venv\n$ source venv/bin/activate\n(venv)$ pip install -r install/requirements.txt .\n</code></pre>\n<h3>Requirements</h3>\n<p>tensorQTL requires an environment configured with a GPU. Instructions for setting up a virtual machine on Google Cloud Platform are provided <a href=\"install/INSTALL.md\" rel=\"nofollow\">here</a>.</p>\n<h3>Input formats</h3>\n<p>tensorQTL requires three input files: genotypes, phenotypes, and covariates. Phenotypes must be provided in BED format (phenotypes x samples), and covariates as a text file (covariates x samples). Both are in the format used by <a href=\"http://fastqtl.sourceforge.net/\" rel=\"nofollow\">FastQTL</a>. Genotypes must currently be in <a href=\"https://www.cog-genomics.org/plink/2.0/\" rel=\"nofollow\">PLINK</a> format, and can be converted as follows:</p>\n<pre><code>plink2 --make-bed \\\n    --output-chr chrM \\\n    --vcf ${plink_prefix_path}.vcf.gz \\\n    --out ${plink_prefix_path}\n</code></pre>\n<h3>Examples</h3>\n<p>For examples illustrating <em>cis</em>- and <em>trans</em>-QTL mapping, please see <a href=\"example/tensorqtl_examples.ipynb\" rel=\"nofollow\">tensorqtl_examples.ipynb</a>.</p>\n<h3>Running tensorQTL from the command line</h3>\n<p>This section describes how  to run tensorQTL from the command line. For a full list of options, run</p>\n<pre><code>python3 -m tensorqtl --help\n</code></pre>\n<h4><em>cis</em>-QTL mapping</h4>\n<p>Phenotype-level summary statistics with empirical p-values:</p>\n<pre><code>python3 -m tensorqtl ${plink_prefix_path} ${expression_bed} ${prefix} \\\n    --covariates ${covariates_file} \\\n    --mode cis\n</code></pre>\n<p>All variant-phenotype associations:</p>\n<pre><code>python3 -m tensorqtl ${plink_prefix_path} ${expression_bed} ${prefix} \\\n    --covariates ${covariates_file} \\\n    --mode cis_nominal\n</code></pre>\n<p>This will generate a <a href=\"https://parquet.apache.org/\" rel=\"nofollow\">parquet</a> file for each chromosome. These files can be read using <code>pandas</code>:</p>\n<pre><code>import pandas as pd\ndf = pd.read_parquet(file_name)\n</code></pre>\n<p>Conditionally independent <em>cis</em>-QTL (as described in <a href=\"https://www.nature.com/articles/nature24277\" rel=\"nofollow\">GTEx Consortium, 2017</a>):</p>\n<pre><code>python3 -m tensorqtl ${plink_prefix_path} ${expression_bed} ${prefix} \\\n    --covariates ${covariates_file} \\\n    --cis_results ${cis_results_file} \\\n    --mode cis_independent\n</code></pre>\n<h4><em>trans</em>-QTL mapping</h4>\n<pre><code>python3 -m tensorqtl ${plink_prefix_path} ${expression_bed} ${prefix} \\\n    --covariates ${covariates_file} \\\n    --mode trans\n</code></pre>\n<p>For <em>trans</em>-QTL mapping, tensorQTL generates sparse output by default (associations with p-value &lt; 1e-5). <em>cis</em>-associations are filtered out. The output is in parquet format, with four columns: phenotype_id, variant_id, pval, maf.</p>\n<h3>Running tensorQTL as a Python module</h3>\n<p>TensorQTL can also be run as a module to more efficiently run multiple analyses:</p>\n<pre><code>import pandas as pd\nimport tensorqtl\nfrom tensorqtl import genotypeio, cis, trans\n</code></pre>\n<h4>Loading input files</h4>\n<p>Load phenotypes and covariates:</p>\n<pre><code>phenotype_df, phenotype_pos_df = tensorqtl.read_phenotype_bed(phenotype_bed_file)\ncovariates_df = pd.read_csv(covariates_file, sep='\\t', index_col=0).T  # samples x covariates\n</code></pre>\n<p>Genotypes can be loaded as follows, where <code>plink_prefix_path</code> is the path to the VCF in PLINK format:</p>\n<pre><code>pr = genotypeio.PlinkReader(plink_prefix_path)\n# load genotypes and variants into data frames\ngenotype_df = pd.DataFrame(pr.get_all_genotypes(), index=pr.bim['snp'], columns=pr.fam['iid'])\nvariant_df = pr.bim.set_index('snp')[['chrom', 'pos']]\n</code></pre>\n<p>To save memory when using genotypes for a subset of samples, you can specify the samples as follows (this is not strictly necessary, since tensorQTL will select the relevant samples from <code>genotype_df</code> otherwise):</p>\n<pre><code>pr = genotypeio.PlinkReader(plink_prefix_path, select_samples=phenotype_df.columns)\n</code></pre>\n<h4><em>cis</em>-QTL mapping</h4>\n<pre><code>cis_df = cis.map_cis(genotype_df, variant_df, phenotype_df, phenotype_pos_df, covariates_df)\ntensorqtl.calculate_qvalues(cis_df, qvalue_lambda=0.85)\n</code></pre>\n<h4><em>trans</em>-QTL mapping</h4>\n<pre><code>trans_df = trans.map_trans(genotype_df, phenotype_df, covariates_df, return_sparse=True)\n</code></pre>\n\n          </div>"}, "last_serial": 6238254, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3b9fc4a66fc8ca59ebdb1f2b9e19de85", "sha256": "efec076d3bc943fc6fc6272f60ebb3ba94826fb93d63d16ea897ac1e0f30e193"}, "downloads": -1, "filename": "tensorqtl-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b9fc4a66fc8ca59ebdb1f2b9e19de85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28385, "upload_time": "2019-09-03T14:31:47", "upload_time_iso_8601": "2019-09-03T14:31:47.578778Z", "url": "https://files.pythonhosted.org/packages/9c/93/e4f537a17b124b648d4076adc9a64d4abf42e26312d573d0410da30a4263/tensorqtl-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae1ceaa05a4ece495feb101266169238", "sha256": "efb047e9956e76dae0415d21d5f95f27a1ab0fa9cf8189f63ab9b84d3eda10a7"}, "downloads": -1, "filename": "tensorqtl-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ae1ceaa05a4ece495feb101266169238", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24745, "upload_time": "2019-09-03T14:31:50", "upload_time_iso_8601": "2019-09-03T14:31:50.014221Z", "url": "https://files.pythonhosted.org/packages/7e/28/f19640a8a8f22b1b9661a13f1ba7405fd7ccf6df77df62c076251618ad9f/tensorqtl-1.0.0.tar.gz", "yanked": false}], "1.0.0-0": [{"comment_text": "", "digests": {"md5": "758a4c70904d930e0c364bb4211f5270", "sha256": "8896da4338fd05e94c86ade821dde6d50523e2cd85d379d56cb4a457ed1112e4"}, "downloads": -1, "filename": "tensorqtl-1.0.0-0.tar.gz", "has_sig": false, "md5_digest": "758a4c70904d930e0c364bb4211f5270", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26904, "upload_time": "2019-10-01T20:41:11", "upload_time_iso_8601": "2019-10-01T20:41:11.687002Z", "url": "https://files.pythonhosted.org/packages/dc/95/fe32b1e83ce03882e63949a789b6441e289136bc68966925ddc8221a9ac7/tensorqtl-1.0.0-0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e557de8397190bc9ab9db2b4732ff2a", "sha256": "38d71a3de4824cc3660c7fd30ed12101fad94842f5a4627ee794322600dd2166"}, "downloads": -1, "filename": "tensorqtl-1.0.0.post0-py3-none-any.whl", "has_sig": false, "md5_digest": "3e557de8397190bc9ab9db2b4732ff2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31132, "upload_time": "2019-10-01T20:41:09", "upload_time_iso_8601": "2019-10-01T20:41:09.876019Z", "url": "https://files.pythonhosted.org/packages/b1/37/4dc495fad2d30a1f39f0faad87d08ceaa3b8afbea55627055ba72f725946/tensorqtl-1.0.0.post0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c2d28dd1e63c9233928bed0dc23ad8c4", "sha256": "3070c31eeff7396d17d48f2fd48c085c9585d16b9b56ca47f9378917c20f8d4a"}, "downloads": -1, "filename": "tensorqtl-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c2d28dd1e63c9233928bed0dc23ad8c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31293, "upload_time": "2019-11-01T19:31:26", "upload_time_iso_8601": "2019-11-01T19:31:26.678380Z", "url": "https://files.pythonhosted.org/packages/59/32/0a27a774db73887f54a563251f253921732a27481d56857462d379ca2790/tensorqtl-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60d281c4a36959859d9d6bc174a114c5", "sha256": "4a7ef8fba8340714d37577f4183701babd352278e5139b08e4563ec87a87a3e8"}, "downloads": -1, "filename": "tensorqtl-1.0.1.tar.gz", "has_sig": false, "md5_digest": "60d281c4a36959859d9d6bc174a114c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27068, "upload_time": "2019-11-01T19:31:28", "upload_time_iso_8601": "2019-11-01T19:31:28.693710Z", "url": "https://files.pythonhosted.org/packages/36/4a/a2f1696b79f6e483de96afeca9a0b3ab766c4582bdbcbd59fb43d51ce2ff/tensorqtl-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "192531ce5639de6f782e3cdbb7377582", "sha256": "d46d810c28a4abb3891a7811110a44a56bc46b2885a8e434d84f5933d0e06761"}, "downloads": -1, "filename": "tensorqtl-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "192531ce5639de6f782e3cdbb7377582", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32414, "upload_time": "2019-12-03T23:27:45", "upload_time_iso_8601": "2019-12-03T23:27:45.282826Z", "url": "https://files.pythonhosted.org/packages/65/50/363caaf54fb59177c3d25bfbd72f29fd8eab5def92038de6747d806aaf6d/tensorqtl-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f345b75e89e1f0babc4792c1960caa18", "sha256": "8389907a29ae69f3c37c50b2b1de3bc9912e4995126c8b0f53eff1277e3b3ccf"}, "downloads": -1, "filename": "tensorqtl-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f345b75e89e1f0babc4792c1960caa18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28434, "upload_time": "2019-12-03T23:27:46", "upload_time_iso_8601": "2019-12-03T23:27:46.972706Z", "url": "https://files.pythonhosted.org/packages/0a/24/a223bebe8011426ee1c5f835b71424d75224b295752dbaa4c59097557639/tensorqtl-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "192531ce5639de6f782e3cdbb7377582", "sha256": "d46d810c28a4abb3891a7811110a44a56bc46b2885a8e434d84f5933d0e06761"}, "downloads": -1, "filename": "tensorqtl-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "192531ce5639de6f782e3cdbb7377582", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32414, "upload_time": "2019-12-03T23:27:45", "upload_time_iso_8601": "2019-12-03T23:27:45.282826Z", "url": "https://files.pythonhosted.org/packages/65/50/363caaf54fb59177c3d25bfbd72f29fd8eab5def92038de6747d806aaf6d/tensorqtl-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f345b75e89e1f0babc4792c1960caa18", "sha256": "8389907a29ae69f3c37c50b2b1de3bc9912e4995126c8b0f53eff1277e3b3ccf"}, "downloads": -1, "filename": "tensorqtl-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f345b75e89e1f0babc4792c1960caa18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28434, "upload_time": "2019-12-03T23:27:46", "upload_time_iso_8601": "2019-12-03T23:27:46.972706Z", "url": "https://files.pythonhosted.org/packages/0a/24/a223bebe8011426ee1c5f835b71424d75224b295752dbaa4c59097557639/tensorqtl-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:02 2020"}