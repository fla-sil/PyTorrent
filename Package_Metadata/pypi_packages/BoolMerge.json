{"info": {"author": "Micha\u00ebl Meyer", "author_email": "michaelnm.meyer@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: C", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "boolmerge - Tools for merging sorted iterables according to boolean operators.\r\n==============================================================================\r\n\r\nThis module provides 4 efficient iterator types for merging sorted\r\niterables according to boolean operators (AND, NOT, OR, XOR),\r\nin a lazy fashion. All code is written is C for performance reasons.\r\n\r\nInstallation\r\n------------\r\n\r\n\r\n    $ python setup.py install\r\n\r\n\r\nUsage\r\n-----\r\n\r\nFirst import the module:\r\n\r\n    >>> import boolmerge\r\n\r\nAll the iterator types have the same interface. They should be\r\ncalled with two argument, each one being a sorted iterable\r\n(be it of any kind), which items should be orderable.\r\nIf this is not the case, the result is undefined.\r\n\r\n``boolmerge.andmerge`` returns an iterator which yields all items\r\npresent in both of the iterables it is given as arguments:\r\n\r\n    >>> list(boolmerge.andmerge(\"acd\", \"abc\"))\r\n    ['a', 'c']\r\n\r\n``boolmerge.ormerge`` returns an iterator which yields all items\r\npresent in any of the iterables it is given as arguments:\r\n\r\n    >>> list(boolmerge.ormerge(\"abcd\", \"cef\"))\r\n    ['a', 'b', 'c', 'd', 'e', 'f']\r\n\r\n``boolmerge.notmerge`` returns an iterator which yields all items\r\npresent in the first iterable it is given as argument, but not in\r\nthe second:\r\n\r\n    >>> list(boolmerge.notmerge(\"bdf\", \"abcf\"))\r\n    ['d']\r\n\r\n``boolmerge.xormerge`` returns an iterator which yields all items\r\npresent in either of the iterables it is given as arguments, but\r\nnot in both:\r\n\r\n    >>> list(boolmerge.xormerge(\"adf\", \"abcd\"))\r\n    ['b', 'c', 'f']", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/doukremt/boolmerge", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "BoolMerge", "package_url": "https://pypi.org/project/BoolMerge/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/BoolMerge/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/doukremt/boolmerge"}, "release_url": "https://pypi.org/project/BoolMerge/1.0/", "requires_dist": null, "requires_python": null, "summary": "Tools for merging sorted iterables according to boolean operators", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module provides 4 efficient iterator types for merging sorted\niterables according to boolean operators (AND, NOT, OR, XOR),\nin a lazy fashion. All code is written is C for performance reasons.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\n$ python setup.py install</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>First import the module:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import boolmerge\n</pre>\n</blockquote>\n<p>All the iterator types have the same interface. They should be\ncalled with two argument, each one being a sorted iterable\n(be it of any kind), which items should be orderable.\nIf this is not the case, the result is undefined.</p>\n<p><tt>boolmerge.andmerge</tt> returns an iterator which yields all items\npresent in both of the iterables it is given as arguments:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; list(boolmerge.andmerge(\"acd\", \"abc\"))\n['a', 'c']\n</pre>\n</blockquote>\n<p><tt>boolmerge.ormerge</tt> returns an iterator which yields all items\npresent in any of the iterables it is given as arguments:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; list(boolmerge.ormerge(\"abcd\", \"cef\"))\n['a', 'b', 'c', 'd', 'e', 'f']\n</pre>\n</blockquote>\n<p><tt>boolmerge.notmerge</tt> returns an iterator which yields all items\npresent in the first iterable it is given as argument, but not in\nthe second:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; list(boolmerge.notmerge(\"bdf\", \"abcf\"))\n['d']\n</pre>\n</blockquote>\n<p><tt>boolmerge.xormerge</tt> returns an iterator which yields all items\npresent in either of the iterables it is given as arguments, but\nnot in both:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; list(boolmerge.xormerge(\"adf\", \"abcd\"))\n['b', 'c', 'f']\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 813796, "releases": {"1.0": [{"comment_text": "Fixed an error in notmerge", "digests": {"md5": "bc2884cd373a6f653ebf8b2466d3fd48", "sha256": "12413490fa5b3462ba983e6aed3d7ddf132b9e43d2dde78b62be22ec41bb205c"}, "downloads": -1, "filename": "boolmerge-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bc2884cd373a6f653ebf8b2466d3fd48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86541, "upload_time": "2013-07-12T00:19:52", "upload_time_iso_8601": "2013-07-12T00:19:52.517999Z", "url": "https://files.pythonhosted.org/packages/d5/5e/ca6b3ac5950d1189d59244d999051dfb06aeae4ac5073119cb00aceb37de/boolmerge-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "Fixed an error in notmerge", "digests": {"md5": "bc2884cd373a6f653ebf8b2466d3fd48", "sha256": "12413490fa5b3462ba983e6aed3d7ddf132b9e43d2dde78b62be22ec41bb205c"}, "downloads": -1, "filename": "boolmerge-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bc2884cd373a6f653ebf8b2466d3fd48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86541, "upload_time": "2013-07-12T00:19:52", "upload_time_iso_8601": "2013-07-12T00:19:52.517999Z", "url": "https://files.pythonhosted.org/packages/d5/5e/ca6b3ac5950d1189d59244d999051dfb06aeae4ac5073119cb00aceb37de/boolmerge-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:43 2020"}