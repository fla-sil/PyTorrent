{"info": {"author": "Nikolai Hartmann", "author_email": "nikoladze@posteo.de", "bugtrack_url": null, "classifiers": [], "description": "# ahoi (A Horrible Optimisation Instrument)\n\nThis module contains a few python functions to run Brute-force scans for rectangular cut optimization.\n\n# Installation\n\nTo install ahoi run\n\n```sh\npython3 -m pip install [--user] ahoi\n```\n\nUse `--user` if not in a virtual environment or conda environment.\n\nIt's recommended to use python3, but currently python2 is also supported.\n\n# Example\nThe basic functionality uses a `masks_list` which is a list of lists or a list\nof 2D numpy arrays that represent pass flags for selection criteria.\n\nFor example, the following represents pass flags for the criteria `>0`, `>0.1`,\n`>0.2`, ..., `>0.9` for 5 random uniform variables in 10000 events:\n\n```python\nimport numpy as np\nnp.random.seed(42)\nx = np.random.rand(10000, 5)\nmasks_list = [[x[:,i] > v for v in np.linspace(0, 0.9, 10)] for i in range(x.shape[1])]\n```\n\nTo count all matching combinations for all criteria on each variable run\n\n```\nimport ahoi\ncounts = ahoi.scan(masks_list)\n```\n\nThe entry `[0, 1, 2, 3, 4]` of `counts` will contain the number of matching\nevents where the first column of `x` is `>0`, the second one `>0.1`, the third\none `>0.2` etc.\n\n```python\n>>> counts[0, 1, 2, 3, 4]\n3032\n>>> np.count_nonzero((x[:,0] > 0) & (x[:,1] > 0.1) & (x[:,2] > 0.2) & (x[:,3] > 0.3) & (x[:,4] > 0.4))\n3032\n```\n\nYou can also pass weights\n\n```python\nweights = np.random.normal(loc=1, size=len(x))\ncounts, sumw, sumw2 = ahoi.scan(masks_list, weights=weights)\n```\n\nThe arrays `sumw` and `sumw2` will contain the sum of weights and sum of squares\nof weights for matching combinations. The sum of squares of weights can be used\nto estimate the statistical uncertainty on the sum of weights ($`\\sigma = \\sqrt{\\sum w_i^2}`$).\n\n```python\n>>> sumw[0, 1, 2, 3, 4]\n3094.2191136427627\n>>> np.dot(\n...     (x[:,0] > 0) & (x[:,1] > 0.1) & (x[:,2] > 0.2) & (x[:,3] > 0.3) & (x[:,4] > 0.4),\n...     weights\n... )\n3094.219113642755\n>>> np.sqrt(sumw2[0, 1, 2, 3, 4])\n78.5528532026876\n>>> np.sqrt(\n...     np.dot(\n...         (x[:,0] > 0) & (x[:,1] > 0.1) & (x[:,2] > 0.2) & (x[:,3] > 0.3) & (x[:,4] > 0.4),\n...         weights ** 2\n...     )\n... )\n78.55285320268761\n```\n\n# Tutorial/Notebook\nHave a look at the [examples](examples) for a tutorial that explains how to use\nthis for solving a classification problem.\n\n# Tests/Coverage\n\nRun the tests and coverage report inside the project directory with\n\n```sh\npython3 -m pytest --cov=ahoi --doctest-modules\ncoverage html\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/nikoladze/ahoi", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ahoi", "package_url": "https://pypi.org/project/ahoi/", "platform": "", "project_url": "https://pypi.org/project/ahoi/", "project_urls": {"Homepage": "https://gitlab.com/nikoladze/ahoi"}, "release_url": "https://pypi.org/project/ahoi/0.6/", "requires_dist": null, "requires_python": ">2.7", "summary": "Brute-force scan for rectangular cuts", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ahoi (A Horrible Optimisation Instrument)</h1>\n<p>This module contains a few python functions to run Brute-force scans for rectangular cut optimization.</p>\n<h1>Installation</h1>\n<p>To install ahoi run</p>\n<pre>python3 -m pip install <span class=\"o\">[</span>--user<span class=\"o\">]</span> ahoi\n</pre>\n<p>Use <code>--user</code> if not in a virtual environment or conda environment.</p>\n<p>It's recommended to use python3, but currently python2 is also supported.</p>\n<h1>Example</h1>\n<p>The basic functionality uses a <code>masks_list</code> which is a list of lists or a list\nof 2D numpy arrays that represent pass flags for selection criteria.</p>\n<p>For example, the following represents pass flags for the criteria <code>&gt;0</code>, <code>&gt;0.1</code>,\n<code>&gt;0.2</code>, ..., <code>&gt;0.9</code> for 5 random uniform variables in 10000 events:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">masks_list</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])]</span>\n</pre>\n<p>To count all matching combinations for all criteria on each variable run</p>\n<pre><code>import ahoi\ncounts = ahoi.scan(masks_list)\n</code></pre>\n<p>The entry <code>[0, 1, 2, 3, 4]</code> of <code>counts</code> will contain the number of matching\nevents where the first column of <code>x</code> is <code>&gt;0</code>, the second one <code>&gt;0.1</code>, the third\none <code>&gt;0.2</code> etc.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"mi\">3032</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">count_nonzero</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.4</span><span class=\"p\">))</span>\n<span class=\"mi\">3032</span>\n</pre>\n<p>You can also pass weights</p>\n<pre><span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"n\">counts</span><span class=\"p\">,</span> <span class=\"n\">sumw</span><span class=\"p\">,</span> <span class=\"n\">sumw2</span> <span class=\"o\">=</span> <span class=\"n\">ahoi</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">masks_list</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"n\">weights</span><span class=\"p\">)</span>\n</pre>\n<p>The arrays <code>sumw</code> and <code>sumw2</code> will contain the sum of weights and sum of squares\nof weights for matching combinations. The sum of squares of weights can be used\nto estimate the statistical uncertainty on the sum of weights ($<code>\\sigma = \\sqrt{\\sum w_i^2}</code>$).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sumw</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"mf\">3094.2191136427627</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.4</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"n\">weights</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"mf\">3094.219113642755</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">sumw2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"mf\">78.5528532026876</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>         <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.4</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>         <span class=\"n\">weights</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>     <span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"mf\">78.55285320268761</span>\n</pre>\n<h1>Tutorial/Notebook</h1>\n<p>Have a look at the <a href=\"examples\" rel=\"nofollow\">examples</a> for a tutorial that explains how to use\nthis for solving a classification problem.</p>\n<h1>Tests/Coverage</h1>\n<p>Run the tests and coverage report inside the project directory with</p>\n<pre>python3 -m pytest --cov<span class=\"o\">=</span>ahoi --doctest-modules\ncoverage html\n</pre>\n\n          </div>"}, "last_serial": 6826849, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "788cd34dd393a236ed947efe808809ce", "sha256": "9fd9ef60e590c1c4cbc0a133377926dc1bb4b1537b24b52ee3189d795e57e02c"}, "downloads": -1, "filename": "ahoi-0.1.tar.gz", "has_sig": false, "md5_digest": "788cd34dd393a236ed947efe808809ce", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7", "size": 5375, "upload_time": "2020-02-09T16:36:17", "upload_time_iso_8601": "2020-02-09T16:36:17.069008Z", "url": "https://files.pythonhosted.org/packages/37/e4/606090112fb6b4ecd9fed9d81cd6d1acdb1b8d087ed6e0fbb9595efa6719/ahoi-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d8ae966ffbc90bb7c6f5fd9663931ced", "sha256": "51225c21bc741456c888279ddaa799837be55894630444e52460f39ff0a42986"}, "downloads": -1, "filename": "ahoi-0.2.tar.gz", "has_sig": false, "md5_digest": "d8ae966ffbc90bb7c6f5fd9663931ced", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7", "size": 6701, "upload_time": "2020-02-17T13:34:44", "upload_time_iso_8601": "2020-02-17T13:34:44.351673Z", "url": "https://files.pythonhosted.org/packages/18/e4/5cb0dd3545786a9bd5a3ccd8edbe6e373c8279897b129b423c57292adb18/ahoi-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "f2d07470d5cb5a6510ed06761e6e4a94", "sha256": "e47462bc769f6fd197abbcb8996fbde87d4567cd6987a33a124378468ffc182d"}, "downloads": -1, "filename": "ahoi-0.3.tar.gz", "has_sig": false, "md5_digest": "f2d07470d5cb5a6510ed06761e6e4a94", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7", "size": 7310, "upload_time": "2020-02-22T08:40:46", "upload_time_iso_8601": "2020-02-22T08:40:46.241457Z", "url": "https://files.pythonhosted.org/packages/9b/ad/b0d1897b1b1492d79bf9c79d08a9c4c3b207869c339a6c4208549e22d90d/ahoi-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "db7fd3b6b5e2a61d3d62a047a2202bd2", "sha256": "4dfef0468f12f4b173d7b68210c823146954945e38e65c2da0e7d64272cd5c43"}, "downloads": -1, "filename": "ahoi-0.4.tar.gz", "has_sig": false, "md5_digest": "db7fd3b6b5e2a61d3d62a047a2202bd2", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7", "size": 9795, "upload_time": "2020-03-04T07:25:05", "upload_time_iso_8601": "2020-03-04T07:25:05.230698Z", "url": "https://files.pythonhosted.org/packages/7c/00/80e8573210ae68e12aba6a0732b3163b0ba52b854d40fe21f5a135bb8514/ahoi-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "0aed56dc694bbaa793d5cf9c0d72d3dd", "sha256": "35f499f8c7819c734c92f697fc3389dedb865ff99b0f70e7f67275ce13da7016"}, "downloads": -1, "filename": "ahoi-0.4.1.tar.gz", "has_sig": false, "md5_digest": "0aed56dc694bbaa793d5cf9c0d72d3dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7", "size": 9800, "upload_time": "2020-03-04T07:34:54", "upload_time_iso_8601": "2020-03-04T07:34:54.314518Z", "url": "https://files.pythonhosted.org/packages/a1/03/f055009cc7af50be29a4a07c3a3699c8d81e3857f8c4a7234e3ec0cc5b57/ahoi-0.4.1.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "fa306e2df767fa0986d7deb6b5f1f170", "sha256": "51a47bf22cb919ca44a9ca254d3465af5005dbbae9bb2c65d5f2a7cb1eae33b2"}, "downloads": -1, "filename": "ahoi-0.5.tar.gz", "has_sig": false, "md5_digest": "fa306e2df767fa0986d7deb6b5f1f170", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7", "size": 10998, "upload_time": "2020-03-09T07:24:28", "upload_time_iso_8601": "2020-03-09T07:24:28.192466Z", "url": "https://files.pythonhosted.org/packages/ef/9a/3143445177e45bce4f9ef60edb2419dee224b59476cdf75492fa5d9d94e1/ahoi-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "a1bc9465b460f91a789750ee54629264", "sha256": "f4100f44cbb082567910b89d717164cbf70600dc4df4fd96b8769060edfc8090"}, "downloads": -1, "filename": "ahoi-0.6.tar.gz", "has_sig": false, "md5_digest": "a1bc9465b460f91a789750ee54629264", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7", "size": 11068, "upload_time": "2020-03-17T08:01:35", "upload_time_iso_8601": "2020-03-17T08:01:35.366042Z", "url": "https://files.pythonhosted.org/packages/bd/83/0819a46efa44a005de0f028cfe18f7af238da3bca837c626ff12477b9f8e/ahoi-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a1bc9465b460f91a789750ee54629264", "sha256": "f4100f44cbb082567910b89d717164cbf70600dc4df4fd96b8769060edfc8090"}, "downloads": -1, "filename": "ahoi-0.6.tar.gz", "has_sig": false, "md5_digest": "a1bc9465b460f91a789750ee54629264", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.7", "size": 11068, "upload_time": "2020-03-17T08:01:35", "upload_time_iso_8601": "2020-03-17T08:01:35.366042Z", "url": "https://files.pythonhosted.org/packages/bd/83/0819a46efa44a005de0f028cfe18f7af238da3bca837c626ff12477b9f8e/ahoi-0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:14 2020"}