{"info": {"author": "tengu", "author_email": "karasuyamatengu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Software Development", "Topic :: Utilities"], "description": "* Synopsis\n\nPROJECT_NAME=yoyodyne\nFCGI_PORT=9000\nconfigen.py init.conf.template > yoyodyne.conf\n\nWhen automating software configuration, one ends up using adhoc templating scheme to \nparametrize config files with sed and awk. configen let's you use python's powerful \nstring formatting to generate config files (or any text for that matter) with \nparams from various sources.\n\n* Usage\n    * environment variables\n      set a bunch of env vars in shell script and invoke from it.\n      env foo=bar configen template\n\n    * name-values fed to stdin\n      echo foo=bar | configen tempalte -s\n      env | configen tempalte -s\n\n    * json\n      configen template -j params.json\n\n    * yaml\n      configen template -y params.yaml\n\n    * dash '-' can be passed for stdin\n\n* Recpie\n \n * generating from a shell script\n--------- genconf.sh\nPROJECT_NAME=yoyodyne\nPYTHON=/usr/bin/python\nPROJECT_ROOT=/home/yoyo/dyne\nRUNTIME_ROOT=/home/yoyo/dyne\nFCGI_PORT=9000\nUSER=tengu\n\nconfigen.py init.conf.t\n---------\n\n * generating a config file from makefile\n   export the variables and run configen as follows:\n\n---------- Makefile\nexport PROJECT_NAME=yoyodyne\nexport PYTHON=/usr/bin/python\nexport PROJECT_ROOT=/home/yoyo/dyne\nexport RUNTIME_ROOT=/home/yoyo/dyne\nexport FCGI_PORT=9000\nUSER=tengu\n\nyoyodyne.conf:\n\tconfigen.py init.conf.t | tee $@\n----------", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tengu/configen", "keywords": null, "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "configen", "package_url": "https://pypi.org/project/configen/", "platform": "POSIX,Windows", "project_url": "https://pypi.org/project/configen/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/tengu/configen"}, "release_url": "https://pypi.org/project/configen/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "instantiate a template from various parameter representations.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            * Synopsis<br><br>PROJECT_NAME=yoyodyne<br>FCGI_PORT=9000<br>configen.py init.conf.template &gt; yoyodyne.conf<br><br>When automating software configuration, one ends up using adhoc templating scheme to <br>parametrize config files with sed and awk. configen let's you use python's powerful <br>string formatting to generate config files (or any text for that matter) with <br>params from various sources.<br><br>* Usage<br>    * environment variables<br>      set a bunch of env vars in shell script and invoke from it.<br>      env foo=bar configen template<br><br>    * name-values fed to stdin<br>      echo foo=bar | configen tempalte -s<br>      env | configen tempalte -s<br><br>    * json<br>      configen template -j params.json<br><br>    * yaml<br>      configen template -y params.yaml<br><br>    * dash '-' can be passed for stdin<br><br>* Recpie<br> <br> * generating from a shell script<br>--------- genconf.sh<br>PROJECT_NAME=yoyodyne<br>PYTHON=/usr/bin/python<br>PROJECT_ROOT=/home/yoyo/dyne<br>RUNTIME_ROOT=/home/yoyo/dyne<br>FCGI_PORT=9000<br>USER=tengu<br><br>configen.py init.conf.t<br>---------<br><br> * generating a config file from makefile<br>   export the variables and run configen as follows:<br><br>---------- Makefile<br>export PROJECT_NAME=yoyodyne<br>export PYTHON=/usr/bin/python<br>export PROJECT_ROOT=/home/yoyo/dyne<br>export RUNTIME_ROOT=/home/yoyo/dyne<br>export FCGI_PORT=9000<br>USER=tengu<br><br>yoyodyne.conf:<br>\tconfigen.py init.conf.t | tee $@<br>----------\n          </div>"}, "last_serial": 788367, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c24fc50bca5aa2099f488d0ddc22363f", "sha256": "05c3224f9b03e3e48f01946d28929e8135df344251572afdee946b54c8533e5f"}, "downloads": -1, "filename": "configen-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c24fc50bca5aa2099f488d0ddc22363f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2298, "upload_time": "2012-04-26T09:42:14", "upload_time_iso_8601": "2012-04-26T09:42:14.174400Z", "url": "https://files.pythonhosted.org/packages/71/87/472bfeb04d415c146134d812c7b726f816174285cd57f51f8067da0df821/configen-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c24fc50bca5aa2099f488d0ddc22363f", "sha256": "05c3224f9b03e3e48f01946d28929e8135df344251572afdee946b54c8533e5f"}, "downloads": -1, "filename": "configen-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c24fc50bca5aa2099f488d0ddc22363f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2298, "upload_time": "2012-04-26T09:42:14", "upload_time_iso_8601": "2012-04-26T09:42:14.174400Z", "url": "https://files.pythonhosted.org/packages/71/87/472bfeb04d415c146134d812c7b726f816174285cd57f51f8067da0df821/configen-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:57 2020"}