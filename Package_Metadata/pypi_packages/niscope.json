{"info": {"author": "National Instruments", "author_email": "opensource@ni.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Manufacturing", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: System :: Hardware :: Hardware Drivers"], "description": "Overall Status\n--------------\n\n+----------------------+------------------------------------------------------------------------------------------------------------------------------------+\n| master branch status | |BuildStatus| |Docs| |MITLicense| |CoverageStatus|                                                                                 |\n+----------------------+------------------------------------------------------------------------------------------------------------------------------------+\n| GitHub status        | |OpenIssues| |OpenPullRequests|                                                                                                    |\n+----------------------+------------------------------------------------------------------------------------------------------------------------------------+\n\n===========  ============================================================================================================================\nInfo         Python bindings for NI Modular Instrument drivers. See `GitHub <https://github.com/ni/nimi-python/>`_ for the latest source.\nAuthor       National Instruments\n===========  ============================================================================================================================\n\n.. |BuildStatus| image:: https://img.shields.io/travis/ni/nimi-python.svg\n    :alt: Build Status - master branch\n    :target: https://travis-ci.org/ni/nimi-python\n\n.. |Docs| image:: https://readthedocs.org/projects/nimi-python/badge/?version=latest\n    :alt: Documentation Status - master branch\n    :target: https://nimi-python.readthedocs.io/en/latest/?badge=latest\n\n.. |MITLicense| image:: https://img.shields.io/badge/License-MIT-yellow.svg\n    :alt: MIT License\n    :target: https://opensource.org/licenses/MIT\n\n.. |CoverageStatus| image:: https://coveralls.io/repos/github/ni/nimi-python/badge.svg?branch=master&dummy=no_cache_please_1\n    :alt: Test Coverage - master branch\n    :target: https://coveralls.io/github/ni/nimi-python?branch=master\n\n.. |OpenIssues| image:: https://img.shields.io/github/issues/ni/nimi-python.svg\n    :alt: Open Issues + Pull Requests\n    :target: https://github.com/ni/nimi-python/issues\n\n.. |OpenPullRequests| image:: https://img.shields.io/github/issues-pr/ni/nimi-python.svg\n    :alt: Open Pull Requests\n    :target: https://github.com/ni/nimi-python/pulls\n\n\n.. _about-section:\n\nAbout\n=====\n\nThe **nimi-python** repository generates Python bindings (Application Programming Interface) for interacting with the Modular Instrument drivers. The\nfollowing drivers are supported:\n\n* NI-DCPower (Python module: nidcpower)\n* NI-Digital Pattern Driver (Python module: nidigital)\n* NI-DMM (Python module: nidmm)\n* NI-FGEN (Python module: nifgen)\n* NI-ModInst (Python module: nimodinst)\n* NI-SCOPE (Python module: niscope)\n* NI Switch Executive (Python module: nise)\n* NI-SWITCH (Python module: niswitch)\n* NI-TClk (Python module: nitclk)\n\nIt is implemented as a set of `Mako templates <http://makotemplates.org>`_ and per-driver metafiles that produce a Python module for each driver. The driver is\ncalled through its public C API using the `ctypes <https://docs.python.org/2/library/ctypes.html>`_ Python library.\n\n**nimi-python** supports all the Operating Systems supported by the underlying driver.\n\n**nimi-python** follows `Python Software Foundation <https://devguide.python.org/#status-of-python-branches>`_ support policy for different versions. At\nthis time this includes Python 3.5 and above using CPython.\n\n\nNI-SCOPE Python API Status\n--------------------------\n\n+-------------------------------+------------------------+\n| NI-SCOPE (niscope)            |                        |\n+===============================+========================+\n| Driver Version Tested Against | 19.1.0                 |\n+-------------------------------+------------------------+\n| PyPI Version                  | |niscopeLatestVersion| |\n+-------------------------------+------------------------+\n| Supported Python Version      | |niscopePythonVersion| |\n+-------------------------------+------------------------+\n| Open Issues                   | |niscopeOpenIssues|    |\n+-------------------------------+------------------------+\n| Open Pull Requests            | |niscopeOpenPRs|       |\n+-------------------------------+------------------------+\n\n\n.. |niscopeLatestVersion| image:: http://img.shields.io/pypi/v/niscope.svg\n    :alt: Latest NI-SCOPE Version\n    :target: http://pypi.python.org/pypi/niscope\n\n\n.. |niscopePythonVersion| image:: http://img.shields.io/pypi/pyversions/niscope.svg\n    :alt: NI-SCOPE supported Python versions\n    :target: http://pypi.python.org/pypi/niscope\n\n\n.. |niscopeOpenIssues| image:: https://img.shields.io/github/issues/ni/nimi-python/niscope.svg\n    :alt: Open Issues + Pull Requests for NI-SCOPE\n    :target: https://github.com/ni/nimi-python/issues?q=is%3Aopen+is%3Aissue+label%3Aniscope\n\n\n.. |niscopeOpenPRs| image:: https://img.shields.io/github/issues-pr/ni/nimi-python/niscope.svg\n    :alt: Pull Requests for NI-SCOPE\n    :target: https://github.com/ni/nimi-python/pulls?q=is%3Aopen+is%3Aissue+label%3Aniscope\n\n\n\n.. _niscope_installation-section:\n\nInstallation\n------------\n\nAs a prerequisite to using the niscope module, you must install the NI-SCOPE runtime on your system. Visit `ni.com/downloads <http://www.ni.com/downloads/>`_ to download the driver runtime for your devices.\n\nThe nimi-python modules (i.e. for **NI-SCOPE**) can be installed with `pip <http://pypi.python.org/pypi/pip>`_::\n\n  $ python -m pip install niscope~=1.2.1\n\nOr **easy_install** from\n`setuptools <http://pypi.python.org/pypi/setuptools>`_::\n\n  $ python -m easy_install niscope\n\n\nContributing\n============\n\nWe welcome contributions! You can clone the project repository, build it, and install it by `following these instructions <https://github.com/ni/nimi-python/blob/master/CONTRIBUTING.md>`_.\n\nUsage\n------\n\nThe following is a basic example of using the **niscope** module to open a session to a High Speed Digitizer and capture a single record of 1000 points.\n\n.. code-block:: python\n\n    import niscope\n    with niscope.Session(\"Dev1\") as session:\n        session.channels[0].configure_vertical(range=1.0, coupling=niscope.VerticalCoupling.AC)\n        session.channels[1].configure_vertical(range=10.0, coupling=niscope.VerticalCoupling.DC)\n        session.configure_horizontal_timing(min_sample_rate=50000000, min_num_pts=1000, ref_position=50.0, num_records=5, enforce_realtime=True)\n        with session.initiate():\n            waveforms = session.channels[0,1].fetch(num_records=5)\n        for wfm in waveforms:\n            print('Channel {0}, record {1} samples acquired: {2:,}\\n'.format(wfm.channel, wfm.record, len(wfm.samples)))\n\n        # Find all channel 1 records (Note channel name is always a string even if integers used in channel[])\n        chan1 = [wfm for wfm in waveforms if wfm.channel == '0']\n\n        # Find all record number 3\n        rec3 = [wfm for wfm in waveforms if wfm.record == 3]\n\nThe waveform returned from `fetch <niscope/class.html#fetch>`_ is a flat list of Python objects\n\n    - Attributes:\n\n        -  **relative_initial_x** (float) the time (in seconds) from the trigger to the first sample in the fetched waveform\n        -  **absolute_initial_x** (float) timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.\n        -  **x_increment** (float) the time between points in the acquired waveform in seconds\n        -  **channel** (str) channel name this waveform was acquired from\n        -  **record** (int) record number of this waveform\n        -  **gain** (float) the gain factor of the given channel; useful for scaling binary data with the following formula:\n\n                voltage = binary data * gain factor + offset\n\n        -  **offset** (float) the offset factor of the given channel; useful for scaling binary data with the following formula:\n\n                voltage = binary data * gain factor + offset\n\n        - **samples** (array of float) floating point array of samples. Length will be of the actual samples acquired\n\n    - Such that all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values:\n\n        - index 0 = record 0, channel 0\n        - index 1 = record 0, channel 1\n        - index 2 = record 1, channel 0\n        - index 3 = record 1, channel 1\n        - etc.\n\n\nIf you need more performance or need to work with `SciPy <https://www.scipy.org/>`_, you can use the `fetch_into()` method instead of `fetch()`. This\nmethod takes an already allocated `numpy <http://www.numpy.org/>`_ array and puts the acquired samples in it. Data types supported:\n\n    - `numpy.float64`\n    - `numpy.int8`\n    - `numpy.in16`\n    - `numpy.int32`\n\n.. code-block:: python\n\n    voltage_range = 1.0\n    record_length = 2000\n    channels = [0, 1]\n    num_channels = len(channels)\n    num_records = 5\n    wfm = numpy.ndarray(num_channels * record_length, dtype=numpy.int8)\n    session.configure_vertical(voltage_range, niscope.VerticalCoupling.AC)\n    session.configure_horizontal_timing(50000000, record_length, 50.0, num_records, True)\n    with session.initiate():\n        waveform_infos = session.channels[channels].fetch_into(wfm=wfm, num_records=num_records)\n\nThe waveform_infos returned from `fetch_into <niscope/class.html#fetch-into>`_ is a 1D list of Python objects\n\n    - Attributes:\n\n        -  **relative_initial_x** (float) the time (in seconds) from the trigger to the first sample in the fetched waveform\n        -  **absolute_initial_x** (float) timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.\n        -  **x_increment** (float) the time between points in the acquired waveform in seconds\n        -  **channel** (str) channel name this waveform was asquire from\n        -  **record** (int) record number of this waveform\n        -  **gain** (float) the gain factor of the given channel; useful for scaling binary data with the following formula:\n\n                voltage = binary data * gain factor + offset\n\n        -  **offset** (float) the offset factor of the given channel; useful for scaling binary data with the following formula:\n\n                voltage = binary data * gain factor + offset\n\n        - **samples** (numpy array of datatype used) floating point array of samples. Length will be of the actual samples acquired\n\n            .. note::\n\n                Python 3 only\n\n    - Such that all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values:\n\n        - index 0 = record 0, channel 0\n        - index 1 = record 0, channel 1\n        - index 2 = record 1, channel 0\n        - index 3 = record 1, channel 1\n        - etc.\n\n\n.. note:: When using Python 2, the waveform_infos objects do not include the waveform for that record. Instead, samples are in the waveform passed into the function using the following layout:\n\n    - index 0 = record 0, channel 0\n    - index *x* = record 0, channel 1\n    - index 2\\ *x* = record 1, channel 0\n    - index 3\\ *x* = record 1, channel 1\n    - etc.\n    - Where *x* = the record length\n\n\nAdditional examples for NI-SCOPE are located in src/niscope/examples/ directory.\n\n\n.. _support-section:\n\nSupport / Feedback\n==================\n\nThe packages included in **nimi-python** package are supported by NI. For support, open\na request through the NI support portal at `ni.com <http://www.ni.com>`_.\n\n.. _bugs-section:\n\nBugs / Feature Requests\n=======================\n\nTo report a bug or submit a feature request specific to NI Modular Instruments Python bindings (nimi-python), please use the\n`GitHub issues page <https://github.com/ni/nimi-python/issues>`_.\n\nFill in the issue template as completely as possible and we will respond as soon\nas we can.\n\nFor hardware support or any other questions not specific to this GitHub project, please visit `NI Community Forums <https://forums.ni.com/>`_.\n\n\n.. _documentation-section:\n\nDocumentation\n=============\n\nDocumentation is available `here <http://nimi-python.readthedocs.io>`_.\n\n\n.. _license-section:\n\nLicense\n=======\n\n**nimi-python** is licensed under an MIT-style license (`see\nLICENSE <https://github.com/ni/nimi-python/blob/master/LICENSE>`_).\nOther incorporated projects may be licensed under different licenses. All\nlicenses allow for non-commercial and commercial use.\n\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ni/nimi-python", "keywords": "niscope", "license": "MIT", "maintainer": "National Instruments", "maintainer_email": "opensource@ni.com", "name": "niscope", "package_url": "https://pypi.org/project/niscope/", "platform": "", "project_url": "https://pypi.org/project/niscope/", "project_urls": {"Homepage": "https://github.com/ni/nimi-python"}, "release_url": "https://pypi.org/project/niscope/1.2.1/", "requires_dist": ["nitclk", "enum34 ; python_version < \"3.4\"", "singledispatch ; python_version < \"3.4\""], "requires_python": "", "summary": "NI-SCOPE Python API", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overall-status\">\n<h2>Overall Status</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>master branch status</td>\n<td><a href=\"https://travis-ci.org/ni/nimi-python\" rel=\"nofollow\"><img alt=\"Build Status - master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2547a995070784778db60e29a0261e7cdd7310a5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6e692f6e696d692d707974686f6e2e737667\"></a> <a href=\"https://nimi-python.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status - master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdce41902c29562a32c191a45e8fb4dded56588d/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6e696d692d707974686f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a> <a href=\"https://coveralls.io/github/ni/nimi-python?branch=master\" rel=\"nofollow\"><img alt=\"Test Coverage - master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e896c868710200327ab314ac26438e1fb2ef5f74/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6e692f6e696d692d707974686f6e2f62616467652e7376673f6272616e63683d6d61737465722664756d6d793d6e6f5f63616368655f706c656173655f31\"></a></td>\n</tr>\n<tr><td>GitHub status</td>\n<td><a href=\"https://github.com/ni/nimi-python/issues\" rel=\"nofollow\"><img alt=\"Open Issues + Pull Requests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e3ab844e297928368d7e91b73c1794bdca1ad116/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6e692f6e696d692d707974686f6e2e737667\"></a> <a href=\"https://github.com/ni/nimi-python/pulls\" rel=\"nofollow\"><img alt=\"Open Pull Requests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09ecc89155f5636abe05eacb3435c8b8b40889f5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f6e692f6e696d692d707974686f6e2e737667\"></a></td>\n</tr>\n</tbody>\n</table>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Info</td>\n<td>Python bindings for NI Modular Instrument drivers. See <a href=\"https://github.com/ni/nimi-python/\" rel=\"nofollow\">GitHub</a> for the latest source.</td>\n</tr>\n<tr><td>Author</td>\n<td>National Instruments</td>\n</tr>\n</tbody>\n</table>\n<div id=\"about\">\n<span id=\"about-section\"></span><h3>About</h3>\n<p>The <strong>nimi-python</strong> repository generates Python bindings (Application Programming Interface) for interacting with the Modular Instrument drivers. The\nfollowing drivers are supported:</p>\n<ul>\n<li>NI-DCPower (Python module: nidcpower)</li>\n<li>NI-Digital Pattern Driver (Python module: nidigital)</li>\n<li>NI-DMM (Python module: nidmm)</li>\n<li>NI-FGEN (Python module: nifgen)</li>\n<li>NI-ModInst (Python module: nimodinst)</li>\n<li>NI-SCOPE (Python module: niscope)</li>\n<li>NI Switch Executive (Python module: nise)</li>\n<li>NI-SWITCH (Python module: niswitch)</li>\n<li>NI-TClk (Python module: nitclk)</li>\n</ul>\n<p>It is implemented as a set of <a href=\"http://makotemplates.org\" rel=\"nofollow\">Mako templates</a> and per-driver metafiles that produce a Python module for each driver. The driver is\ncalled through its public C API using the <a href=\"https://docs.python.org/2/library/ctypes.html\" rel=\"nofollow\">ctypes</a> Python library.</p>\n<p><strong>nimi-python</strong> supports all the Operating Systems supported by the underlying driver.</p>\n<p><strong>nimi-python</strong> follows <a href=\"https://devguide.python.org/#status-of-python-branches\" rel=\"nofollow\">Python Software Foundation</a> support policy for different versions. At\nthis time this includes Python 3.5 and above using CPython.</p>\n</div>\n</div>\n<div id=\"ni-scope-python-api-status\">\n<h2>NI-SCOPE Python API Status</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>NI-SCOPE (niscope)</th>\n<th>\u00a0</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Driver Version Tested Against</td>\n<td>19.1.0</td>\n</tr>\n<tr><td>PyPI Version</td>\n<td><a href=\"http://pypi.python.org/pypi/niscope\" rel=\"nofollow\"><img alt=\"Latest NI-SCOPE Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65c4362f88b01580d7a83fadbfc67ee97a9ee614/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f6e6973636f70652e737667\"></a></td>\n</tr>\n<tr><td>Supported Python Version</td>\n<td><a href=\"http://pypi.python.org/pypi/niscope\" rel=\"nofollow\"><img alt=\"NI-SCOPE supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15dfe0908781e8de455aa853888e3fda6c8bd3f3/687474703a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6e6973636f70652e737667\"></a></td>\n</tr>\n<tr><td>Open Issues</td>\n<td><a href=\"https://github.com/ni/nimi-python/issues?q=is%3Aopen+is%3Aissue+label%3Aniscope\" rel=\"nofollow\"><img alt=\"Open Issues + Pull Requests for NI-SCOPE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1641ae0208f21ccede637b1f1229721ba1bf8980/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6e692f6e696d692d707974686f6e2f6e6973636f70652e737667\"></a></td>\n</tr>\n<tr><td>Open Pull Requests</td>\n<td><a href=\"https://github.com/ni/nimi-python/pulls?q=is%3Aopen+is%3Aissue+label%3Aniscope\" rel=\"nofollow\"><img alt=\"Pull Requests for NI-SCOPE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/685c45f2b6b9e231a37f7962b8b7d203f8263929/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f6e692f6e696d692d707974686f6e2f6e6973636f70652e737667\"></a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"installation\">\n<span id=\"niscope-installation-section\"></span><h2>Installation</h2>\n<p>As a prerequisite to using the niscope module, you must install the NI-SCOPE runtime on your system. Visit <a href=\"http://www.ni.com/downloads/\" rel=\"nofollow\">ni.com/downloads</a> to download the driver runtime for your devices.</p>\n<p>The nimi-python modules (i.e. for <strong>NI-SCOPE</strong>) can be installed with <a href=\"http://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ python -m pip install niscope~=1.2.1\n</pre>\n<p>Or <strong>easy_install</strong> from\n<a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">setuptools</a>:</p>\n<pre>$ python -m easy_install niscope\n</pre>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>We welcome contributions! You can clone the project repository, build it, and install it by <a href=\"https://github.com/ni/nimi-python/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">following these instructions</a>.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The following is a basic example of using the <strong>niscope</strong> module to open a session to a High Speed Digitizer and capture a single record of 1000 points.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">niscope</span>\n<span class=\"k\">with</span> <span class=\"n\">niscope</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"s2\">\"Dev1\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">configure_vertical</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">coupling</span><span class=\"o\">=</span><span class=\"n\">niscope</span><span class=\"o\">.</span><span class=\"n\">VerticalCoupling</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">)</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">configure_vertical</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"o\">=</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"n\">coupling</span><span class=\"o\">=</span><span class=\"n\">niscope</span><span class=\"o\">.</span><span class=\"n\">VerticalCoupling</span><span class=\"o\">.</span><span class=\"n\">DC</span><span class=\"p\">)</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">configure_horizontal_timing</span><span class=\"p\">(</span><span class=\"n\">min_sample_rate</span><span class=\"o\">=</span><span class=\"mi\">50000000</span><span class=\"p\">,</span> <span class=\"n\">min_num_pts</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">ref_position</span><span class=\"o\">=</span><span class=\"mf\">50.0</span><span class=\"p\">,</span> <span class=\"n\">num_records</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">enforce_realtime</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">initiate</span><span class=\"p\">():</span>\n        <span class=\"n\">waveforms</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">num_records</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">wfm</span> <span class=\"ow\">in</span> <span class=\"n\">waveforms</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Channel </span><span class=\"si\">{0}</span><span class=\"s1\">, record </span><span class=\"si\">{1}</span><span class=\"s1\"> samples acquired: </span><span class=\"si\">{2:,}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">wfm</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">wfm</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">wfm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"p\">)))</span>\n\n    <span class=\"c1\"># Find all channel 1 records (Note channel name is always a string even if integers used in channel[])</span>\n    <span class=\"n\">chan1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">wfm</span> <span class=\"k\">for</span> <span class=\"n\">wfm</span> <span class=\"ow\">in</span> <span class=\"n\">waveforms</span> <span class=\"k\">if</span> <span class=\"n\">wfm</span><span class=\"o\">.</span><span class=\"n\">channel</span> <span class=\"o\">==</span> <span class=\"s1\">'0'</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Find all record number 3</span>\n    <span class=\"n\">rec3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">wfm</span> <span class=\"k\">for</span> <span class=\"n\">wfm</span> <span class=\"ow\">in</span> <span class=\"n\">waveforms</span> <span class=\"k\">if</span> <span class=\"n\">wfm</span><span class=\"o\">.</span><span class=\"n\">record</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<p>The waveform returned from <a href=\"niscope/class.html#fetch\" rel=\"nofollow\">fetch</a> is a flat list of Python objects</p>\n<blockquote>\n<ul>\n<li><p>Attributes:</p>\n<blockquote>\n<ul>\n<li><p><strong>relative_initial_x</strong> (float) the time (in seconds) from the trigger to the first sample in the fetched waveform</p>\n</li>\n<li><p><strong>absolute_initial_x</strong> (float) timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</p>\n</li>\n<li><p><strong>x_increment</strong> (float) the time between points in the acquired waveform in seconds</p>\n</li>\n<li><p><strong>channel</strong> (str) channel name this waveform was acquired from</p>\n</li>\n<li><p><strong>record</strong> (int) record number of this waveform</p>\n</li>\n<li><p><strong>gain</strong> (float) the gain factor of the given channel; useful for scaling binary data with the following formula:</p>\n<blockquote>\n<p>voltage = binary data * gain factor + offset</p>\n</blockquote>\n</li>\n<li><p><strong>offset</strong> (float) the offset factor of the given channel; useful for scaling binary data with the following formula:</p>\n<blockquote>\n<p>voltage = binary data * gain factor + offset</p>\n</blockquote>\n</li>\n<li><p><strong>samples</strong> (array of float) floating point array of samples. Length will be of the actual samples acquired</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Such that all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values:</p>\n<blockquote>\n<ul>\n<li>index 0 = record 0, channel 0</li>\n<li>index 1 = record 0, channel 1</li>\n<li>index 2 = record 1, channel 0</li>\n<li>index 3 = record 1, channel 1</li>\n<li>etc.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<p>If you need more performance or need to work with <a href=\"https://www.scipy.org/\" rel=\"nofollow\">SciPy</a>, you can use the <cite>fetch_into()</cite> method instead of <cite>fetch()</cite>. This\nmethod takes an already allocated <a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a> array and puts the acquired samples in it. Data types supported:</p>\n<blockquote>\n<ul>\n<li><cite>numpy.float64</cite></li>\n<li><cite>numpy.int8</cite></li>\n<li><cite>numpy.in16</cite></li>\n<li><cite>numpy.int32</cite></li>\n</ul>\n</blockquote>\n<pre><span class=\"n\">voltage_range</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n<span class=\"n\">record_length</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">num_channels</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n<span class=\"n\">num_records</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">wfm</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">(</span><span class=\"n\">num_channels</span> <span class=\"o\">*</span> <span class=\"n\">record_length</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int8</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">configure_vertical</span><span class=\"p\">(</span><span class=\"n\">voltage_range</span><span class=\"p\">,</span> <span class=\"n\">niscope</span><span class=\"o\">.</span><span class=\"n\">VerticalCoupling</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">configure_horizontal_timing</span><span class=\"p\">(</span><span class=\"mi\">50000000</span><span class=\"p\">,</span> <span class=\"n\">record_length</span><span class=\"p\">,</span> <span class=\"mf\">50.0</span><span class=\"p\">,</span> <span class=\"n\">num_records</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">initiate</span><span class=\"p\">():</span>\n    <span class=\"n\">waveform_infos</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"p\">[</span><span class=\"n\">channels</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fetch_into</span><span class=\"p\">(</span><span class=\"n\">wfm</span><span class=\"o\">=</span><span class=\"n\">wfm</span><span class=\"p\">,</span> <span class=\"n\">num_records</span><span class=\"o\">=</span><span class=\"n\">num_records</span><span class=\"p\">)</span>\n</pre>\n<p>The waveform_infos returned from <a href=\"niscope/class.html#fetch-into\" rel=\"nofollow\">fetch_into</a> is a 1D list of Python objects</p>\n<blockquote>\n<ul>\n<li><p>Attributes:</p>\n<blockquote>\n<ul>\n<li><p><strong>relative_initial_x</strong> (float) the time (in seconds) from the trigger to the first sample in the fetched waveform</p>\n</li>\n<li><p><strong>absolute_initial_x</strong> (float) timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</p>\n</li>\n<li><p><strong>x_increment</strong> (float) the time between points in the acquired waveform in seconds</p>\n</li>\n<li><p><strong>channel</strong> (str) channel name this waveform was asquire from</p>\n</li>\n<li><p><strong>record</strong> (int) record number of this waveform</p>\n</li>\n<li><p><strong>gain</strong> (float) the gain factor of the given channel; useful for scaling binary data with the following formula:</p>\n<blockquote>\n<p>voltage = binary data * gain factor + offset</p>\n</blockquote>\n</li>\n<li><p><strong>offset</strong> (float) the offset factor of the given channel; useful for scaling binary data with the following formula:</p>\n<blockquote>\n<p>voltage = binary data * gain factor + offset</p>\n</blockquote>\n</li>\n<li><p><strong>samples</strong> (numpy array of datatype used) floating point array of samples. Length will be of the actual samples acquired</p>\n<blockquote>\n<div>\n<p>Note</p>\n<p>Python 3 only</p>\n</div>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Such that all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values:</p>\n<blockquote>\n<ul>\n<li>index 0 = record 0, channel 0</li>\n<li>index 1 = record 0, channel 1</li>\n<li>index 2 = record 1, channel 0</li>\n<li>index 3 = record 1, channel 1</li>\n<li>etc.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<div>\n<p>Note</p>\n<p>When using Python 2, the waveform_infos objects do not include the waveform for that record. Instead, samples are in the waveform passed into the function using the following layout:</p>\n<ul>\n<li>index 0 = record 0, channel 0</li>\n<li>index <em>x</em> = record 0, channel 1</li>\n<li>index 2<em>x</em> = record 1, channel 0</li>\n<li>index 3<em>x</em> = record 1, channel 1</li>\n<li>etc.</li>\n<li>Where <em>x</em> = the record length</li>\n</ul>\n</div>\n<p>Additional examples for NI-SCOPE are located in src/niscope/examples/ directory.</p>\n<div id=\"support-feedback\">\n<span id=\"support-section\"></span><h3>Support / Feedback</h3>\n<p>The packages included in <strong>nimi-python</strong> package are supported by NI. For support, open\na request through the NI support portal at <a href=\"http://www.ni.com\" rel=\"nofollow\">ni.com</a>.</p>\n</div>\n<div id=\"bugs-feature-requests\">\n<span id=\"bugs-section\"></span><h3>Bugs / Feature Requests</h3>\n<p>To report a bug or submit a feature request specific to NI Modular Instruments Python bindings (nimi-python), please use the\n<a href=\"https://github.com/ni/nimi-python/issues\" rel=\"nofollow\">GitHub issues page</a>.</p>\n<p>Fill in the issue template as completely as possible and we will respond as soon\nas we can.</p>\n<p>For hardware support or any other questions not specific to this GitHub project, please visit <a href=\"https://forums.ni.com/\" rel=\"nofollow\">NI Community Forums</a>.</p>\n</div>\n<div id=\"documentation\">\n<span id=\"documentation-section\"></span><h3>Documentation</h3>\n<p>Documentation is available <a href=\"http://nimi-python.readthedocs.io\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"license\">\n<span id=\"license-section\"></span><h3>License</h3>\n<p><strong>nimi-python</strong> is licensed under an MIT-style license (<a href=\"https://github.com/ni/nimi-python/blob/master/LICENSE\" rel=\"nofollow\">see\nLICENSE</a>).\nOther incorporated projects may be licensed under different licenses. All\nlicenses allow for non-commercial and commercial use.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7078324, "releases": {"0.2": [], "0.5.0": [{"comment_text": "", "digests": {"md5": "bb2dd9f937ad6c73149f0bb09712ee33", "sha256": "b89889703015cbffea439fe69ae62176d3c5995a6334884496d44048ef656374"}, "downloads": -1, "filename": "niscope-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bb2dd9f937ad6c73149f0bb09712ee33", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 51859, "upload_time": "2017-11-27T22:26:37", "upload_time_iso_8601": "2017-11-27T22:26:37.131074Z", "url": "https://files.pythonhosted.org/packages/c3/70/ae6ff73567e5b16ce1d697039e2aa224c1f4ae2288fa5069e68e317a5d0a/niscope-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a26530dd422f31070e185ec0cec7abba", "sha256": "6bb9f26499fe6ac1cd782f340565f35c2859b80231e2df4e541a9a859a64d5c3"}, "downloads": -1, "filename": "niscope-0.5.0.tar.gz", "has_sig": false, "md5_digest": "a26530dd422f31070e185ec0cec7abba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46657, "upload_time": "2017-11-27T22:26:46", "upload_time_iso_8601": "2017-11-27T22:26:46.956277Z", "url": "https://files.pythonhosted.org/packages/59/9d/88b3321318ff0ba35b0aaf8ff8afbbd25dc8ec628c7694bd49e3abc4da81/niscope-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "4e10f71754fbe8a0caf515a821b1e866", "sha256": "c4c8147f7b8aff009cfe0a2ed2392618aa66811b1ad92abf672ff11e9a0b2214"}, "downloads": -1, "filename": "niscope-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4e10f71754fbe8a0caf515a821b1e866", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 52361, "upload_time": "2017-12-20T22:57:57", "upload_time_iso_8601": "2017-12-20T22:57:57.427763Z", "url": "https://files.pythonhosted.org/packages/05/a5/5440148a4e40a662e19459ad7255ec70670f7b41b1951a6804c6312579c3/niscope-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a07a0b6849c78ac8d706dbde91b48c2f", "sha256": "a0edbb260be30b35ceb4ab4b96119773cfb1efe98c18dc473feea4dd20b681b2"}, "downloads": -1, "filename": "niscope-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a07a0b6849c78ac8d706dbde91b48c2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47251, "upload_time": "2017-12-20T22:58:09", "upload_time_iso_8601": "2017-12-20T22:58:09.662875Z", "url": "https://files.pythonhosted.org/packages/5a/f9/af7bad5eac512fee2c8d8fb25aca1ba4a7afb290dbe9f016ceeafa37907c/niscope-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "143cc742276d165e8b55ab6b4a1781ae", "sha256": "c22904e89f3d7f8ba0da8bc103e8f458eb4f91606ea88ec4c2935cd81e5a2b26"}, "downloads": -1, "filename": "niscope-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "143cc742276d165e8b55ab6b4a1781ae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 57816, "upload_time": "2018-02-20T19:33:25", "upload_time_iso_8601": "2018-02-20T19:33:25.963405Z", "url": "https://files.pythonhosted.org/packages/5e/e1/ac5595305a8b39b3e5ef6e6b774db45e9c0606388a3ba1a5d33a561110da/niscope-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ed286dfe166d92a135389e1bf115987", "sha256": "bedf0ac1659ff45d436b59cd1156a786fcbda86be851e00b0d61ccde4161a14c"}, "downloads": -1, "filename": "niscope-0.7.0.tar.gz", "has_sig": false, "md5_digest": "8ed286dfe166d92a135389e1bf115987", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52311, "upload_time": "2018-02-20T19:33:35", "upload_time_iso_8601": "2018-02-20T19:33:35.542384Z", "url": "https://files.pythonhosted.org/packages/1c/15/de3e6583a72aa476949c092acf55a7aa9e28be9ce4947509415b5d0e32b4/niscope-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "1bda81ecfb8aa5b8b2a3064334b6fc6d", "sha256": "3ae9d820991402abf3bdf52bfdd7ebf0a856e2844c0d1403a15c2c4563d8bb68"}, "downloads": -1, "filename": "niscope-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1bda81ecfb8aa5b8b2a3064334b6fc6d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 61958, "upload_time": "2018-04-27T18:35:35", "upload_time_iso_8601": "2018-04-27T18:35:35.103261Z", "url": "https://files.pythonhosted.org/packages/3d/d2/ccb9d536cbf4af394912774a0248ebfa1ce129164e5a9f83d5151d95d7bc/niscope-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f58f3c0afd72f9baeea2868ca618f17b", "sha256": "4b7de4e903436df57e64f67695e896ab62aa13e477f60596d7b675f07c73dc3c"}, "downloads": -1, "filename": "niscope-0.8.0.tar.gz", "has_sig": false, "md5_digest": "f58f3c0afd72f9baeea2868ca618f17b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60117, "upload_time": "2018-04-27T18:35:41", "upload_time_iso_8601": "2018-04-27T18:35:41.830602Z", "url": "https://files.pythonhosted.org/packages/28/f3/fe82546ca2bc8274a925dd3e57bd15c69023d68049c426df31cd13120f91/niscope-0.8.0.tar.gz", "yanked": false}], "0.8.0.dev0": [{"comment_text": "", "digests": {"md5": "26783635571049ef996ba00b98ca4244", "sha256": "a535e358549772b6e7ce52893855433b8db2b427ff976ef42f8b9f81c9c699da"}, "downloads": -1, "filename": "niscope-0.8.0.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26783635571049ef996ba00b98ca4244", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 63158, "upload_time": "2018-03-20T22:15:00", "upload_time_iso_8601": "2018-03-20T22:15:00.176463Z", "url": "https://files.pythonhosted.org/packages/0d/86/998dad04c29afaaf662953960ff6e77f205100a1ba314d9c2641b826039e/niscope-0.8.0.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cab33e6d6d33e6a2c10affa3c93b43c5", "sha256": "d0d9134ec2d9ac099913bc33d5dd83834490890d2bf324ecc73d829e50ba8109"}, "downloads": -1, "filename": "niscope-0.8.0.dev0.tar.gz", "has_sig": false, "md5_digest": "cab33e6d6d33e6a2c10affa3c93b43c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56637, "upload_time": "2018-03-20T22:15:08", "upload_time_iso_8601": "2018-03-20T22:15:08.150947Z", "url": "https://files.pythonhosted.org/packages/db/e5/68f0c560c365163a67ce7e9d870da9617cb96040dac947cdb1ed63b31987/niscope-0.8.0.dev0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "0133e93694c5f32aa8b28723d4991b4d", "sha256": "697bac857b0ceb82bdb5306acaba2141cb3d8ad564777f4f21de8c0a0ec8d150"}, "downloads": -1, "filename": "niscope-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0133e93694c5f32aa8b28723d4991b4d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 58866, "upload_time": "2018-05-22T19:53:46", "upload_time_iso_8601": "2018-05-22T19:53:46.149666Z", "url": "https://files.pythonhosted.org/packages/92/ed/88be8ee345ab2f0dab345b33eb35b7933dedbecdf1f4f1e2e61885187420/niscope-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49cc2ce2b0d260b10e501099b125b3a3", "sha256": "c1db30ce4e9b869cc43f1313a1f47e97b5a32fdfe970134d0b13dacee444bd0e"}, "downloads": -1, "filename": "niscope-0.9.0.tar.gz", "has_sig": false, "md5_digest": "49cc2ce2b0d260b10e501099b125b3a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56941, "upload_time": "2018-05-22T19:53:51", "upload_time_iso_8601": "2018-05-22T19:53:51.842640Z", "url": "https://files.pythonhosted.org/packages/e4/55/1966428809a35a50a4d92a2b766c83f6eeeec43f8e7401f5960ae3bef252/niscope-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "7205c3d5cfe10712ff32b6b901d00ef5", "sha256": "1ff8c4482a947cf87f4ae77f4f2771370b10ba62ed65e14941bda70012785856"}, "downloads": -1, "filename": "niscope-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7205c3d5cfe10712ff32b6b901d00ef5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 58961, "upload_time": "2018-06-08T21:04:53", "upload_time_iso_8601": "2018-06-08T21:04:53.846123Z", "url": "https://files.pythonhosted.org/packages/21/88/6ca19a8c10e09bc1803dc7c6009f13db72bf43f23f1e33cc205daa496cbf/niscope-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6ef5cac0cc1a9796949a099bfcb5ede", "sha256": "8d80fc0e3d39310a67d77db3ae2659564f85f2e8801165c86d2167500a1e38fa"}, "downloads": -1, "filename": "niscope-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b6ef5cac0cc1a9796949a099bfcb5ede", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57016, "upload_time": "2018-06-08T21:05:00", "upload_time_iso_8601": "2018-06-08T21:05:00.878339Z", "url": "https://files.pythonhosted.org/packages/0e/fe/a00e3f41c61cf915c42e0273ed71eb9a1acbfb293441f576f7bf8defcce8/niscope-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a2f6b004a623a055b7426a2ac03fff08", "sha256": "c7ddb8d3bdf6d52c7c82ff106f68d0ecd34c437f325a34a26c2cd6a2d6e2b88b"}, "downloads": -1, "filename": "niscope-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a2f6b004a623a055b7426a2ac03fff08", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 59505, "upload_time": "2018-10-17T14:59:34", "upload_time_iso_8601": "2018-10-17T14:59:34.985937Z", "url": "https://files.pythonhosted.org/packages/b5/0e/9ada14c304125672c33b7e95f0e76c19da66290be446f29e820f2ddabdee/niscope-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a450edcf723b342b8266aaffbf0bf058", "sha256": "b439cb541afa3d7b9504ce66ce49c6b5600233286adf0454716cec58f2718987"}, "downloads": -1, "filename": "niscope-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a450edcf723b342b8266aaffbf0bf058", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57545, "upload_time": "2018-10-17T14:59:44", "upload_time_iso_8601": "2018-10-17T14:59:44.826743Z", "url": "https://files.pythonhosted.org/packages/97/e2/d306d3e750a38fd9766fac7c6775801f3137eca2a6566d55bb929b147fbd/niscope-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ac90f58a06a58196344704b579a99d81", "sha256": "d8fd355af879ba0bd42902ae6cc9b032cbee216826d26ae62d523cf62987eba2"}, "downloads": -1, "filename": "niscope-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac90f58a06a58196344704b579a99d81", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 60529, "upload_time": "2018-10-25T20:16:21", "upload_time_iso_8601": "2018-10-25T20:16:21.761500Z", "url": "https://files.pythonhosted.org/packages/6e/f2/5a3de40ec4d89c447437c2f76429870b6da92baadfe6455917bc06c3bf06/niscope-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e14916ec3f521d818fad71e61f2e78b", "sha256": "da2164c1bebbae0a500dd6c824241d0569db169225efa192ce2d543243b2972c"}, "downloads": -1, "filename": "niscope-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2e14916ec3f521d818fad71e61f2e78b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58548, "upload_time": "2018-10-25T20:16:29", "upload_time_iso_8601": "2018-10-25T20:16:29.829735Z", "url": "https://files.pythonhosted.org/packages/de/59/0650ca7b3b959d63bdad22b90a78a3d7f9700c6cae6d647fee305ae80f48/niscope-1.1.0.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "d36e4d2a980c60c40ef5aeea70847a9c", "sha256": "6f8b0369c0b544da8cc0ef148af34af321decb8b0fa5204bbcbc02c4b80af215"}, "downloads": -1, "filename": "niscope-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d36e4d2a980c60c40ef5aeea70847a9c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 60498, "upload_time": "2019-06-06T15:28:12", "upload_time_iso_8601": "2019-06-06T15:28:12.746126Z", "url": "https://files.pythonhosted.org/packages/50/c5/d51ca8656724daef073e69833a15a7d99996ec54258aba1a1c2ea777e3e5/niscope-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3a0d151b0bb559b0950a3485aec0c80", "sha256": "f156c1522ef88e139d3b23bc30f2d77dbfb70eddb631a66f70eceb8bb2778fa9"}, "downloads": -1, "filename": "niscope-1.1.2.tar.gz", "has_sig": false, "md5_digest": "a3a0d151b0bb559b0950a3485aec0c80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58453, "upload_time": "2019-06-06T15:28:23", "upload_time_iso_8601": "2019-06-06T15:28:23.398146Z", "url": "https://files.pythonhosted.org/packages/7f/bb/6fd7ebcdd30261f7065476feb6224b61f56a027d4b2fd972b0f00d62bc9c/niscope-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "32fa64dba3429df6737059cb03224a8d", "sha256": "57a240604ff905e8d892ce6491c398dede03cbf002f6417e363301b565649355"}, "downloads": -1, "filename": "niscope-1.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32fa64dba3429df6737059cb03224a8d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 63467, "upload_time": "2019-10-21T22:17:44", "upload_time_iso_8601": "2019-10-21T22:17:44.422783Z", "url": "https://files.pythonhosted.org/packages/17/b2/25ba82279d3b35d26b83625ee9eec681fa3b6937e6f9277cfbf196ec73ee/niscope-1.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2660c6043d841aab9e8747fd2f691d90", "sha256": "7a8f15a980ce96df5a74f86fae41e1c3ab7b96388f781c872986779f98062c59"}, "downloads": -1, "filename": "niscope-1.1.3.tar.gz", "has_sig": false, "md5_digest": "2660c6043d841aab9e8747fd2f691d90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61119, "upload_time": "2019-10-21T22:18:01", "upload_time_iso_8601": "2019-10-21T22:18:01.562786Z", "url": "https://files.pythonhosted.org/packages/71/d4/152ef222cf0239a829fabe1c61646e82294b4f4a6d92bfa0dca25eb684e9/niscope-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "f991b7ad60a15352e209390793b4c7aa", "sha256": "99cb8e9c3c74c0137de8567abfaf5d2361b10b6831a4da1eac594ff24b9b8e2e"}, "downloads": -1, "filename": "niscope-1.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f991b7ad60a15352e209390793b4c7aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 63446, "upload_time": "2019-11-19T16:54:14", "upload_time_iso_8601": "2019-11-19T16:54:14.499832Z", "url": "https://files.pythonhosted.org/packages/73/da/8c85e8c707cd2e36a675a832a6b4c11833cef2b6d49307fdc81a807249c4/niscope-1.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02ad8d47ef23cf1e832a49570c7ffd87", "sha256": "2545dbdea0c638a1386714108d6e18407b33718826916671ceb87a4f3aec9099"}, "downloads": -1, "filename": "niscope-1.1.4.tar.gz", "has_sig": false, "md5_digest": "02ad8d47ef23cf1e832a49570c7ffd87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61047, "upload_time": "2019-11-19T16:54:29", "upload_time_iso_8601": "2019-11-19T16:54:29.479989Z", "url": "https://files.pythonhosted.org/packages/e9/a6/a247269d893b4ba65ebe338492196a30c793b4b2aa447a3b36e8ad7a0937/niscope-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "3e6d99d10a5a955762666a652104e244", "sha256": "d173982dca08f2795b996955fb31bf5a02aeb51e7674b147283b9819db8ea78d"}, "downloads": -1, "filename": "niscope-1.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e6d99d10a5a955762666a652104e244", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 63414, "upload_time": "2019-11-22T19:06:45", "upload_time_iso_8601": "2019-11-22T19:06:45.590775Z", "url": "https://files.pythonhosted.org/packages/07/6a/0890d7f952ccdbdfd8dc3df4aa182956860ac180fe98ada348288aecc87f/niscope-1.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a55a082ba8dbc14f798ca75116efac3b", "sha256": "06324338ea4991f8e136ba1aab824c3a11c960f5a8cb8cd6ecf38a974a8eeaeb"}, "downloads": -1, "filename": "niscope-1.1.5.tar.gz", "has_sig": false, "md5_digest": "a55a082ba8dbc14f798ca75116efac3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61046, "upload_time": "2019-11-22T19:06:54", "upload_time_iso_8601": "2019-11-22T19:06:54.276035Z", "url": "https://files.pythonhosted.org/packages/6d/e8/55cab166c1d4dcde683523a1fc42a969c1d3d211912076a3aeec1260ed78/niscope-1.1.5.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "4b566aa0e0372e98affe383f4dc0d763", "sha256": "8cfa231298bc2f312b6eea04f73cb048b5b6318aea19701fe62ec799c9694a95"}, "downloads": -1, "filename": "niscope-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4b566aa0e0372e98affe383f4dc0d763", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 62518, "upload_time": "2020-03-07T00:23:56", "upload_time_iso_8601": "2020-03-07T00:23:56.983726Z", "url": "https://files.pythonhosted.org/packages/1a/fe/0d8e0226bbb1c2ea6b51fc859b57afaa2899d98442298d08a6574986aab3/niscope-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "363ba81da47a65f4d4162f0c81008f05", "sha256": "7be6e816dadfa9f3244eb71d5aafee5ddf85ab2f3de0b693c3ce2d58e504ddce"}, "downloads": -1, "filename": "niscope-1.2.0.tar.gz", "has_sig": false, "md5_digest": "363ba81da47a65f4d4162f0c81008f05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64252, "upload_time": "2020-03-07T00:24:11", "upload_time_iso_8601": "2020-03-07T00:24:11.202015Z", "url": "https://files.pythonhosted.org/packages/46/04/ac13726551a47d0b8d05d97f338fdddfea474eb93623a2fbfa20f4cc2789/niscope-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "214540eed1b89e31e28f36a8ac444168", "sha256": "09fd4fa3fd9a13d7c33dd5ce7ca96682ac18465f5be9598c12c595d042a86cbd"}, "downloads": -1, "filename": "niscope-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "214540eed1b89e31e28f36a8ac444168", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 62239, "upload_time": "2020-04-22T17:34:17", "upload_time_iso_8601": "2020-04-22T17:34:17.345600Z", "url": "https://files.pythonhosted.org/packages/0a/3c/0c596e6f4f21917825f745e57400ca7da6732223aaeb0ab4a50713b1555d/niscope-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04afd473ba647e3a01ca5027155f6ff3", "sha256": "4f44cc9689aa062208ddf11d89c14ba9a49db11c5427469ac80d8bdaf0694953"}, "downloads": -1, "filename": "niscope-1.2.1.tar.gz", "has_sig": false, "md5_digest": "04afd473ba647e3a01ca5027155f6ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63973, "upload_time": "2020-04-22T17:34:27", "upload_time_iso_8601": "2020-04-22T17:34:27.930794Z", "url": "https://files.pythonhosted.org/packages/44/53/51a69eca0d712598194d2abe843747fc9d927390df882063af9ad1bc22e6/niscope-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "214540eed1b89e31e28f36a8ac444168", "sha256": "09fd4fa3fd9a13d7c33dd5ce7ca96682ac18465f5be9598c12c595d042a86cbd"}, "downloads": -1, "filename": "niscope-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "214540eed1b89e31e28f36a8ac444168", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 62239, "upload_time": "2020-04-22T17:34:17", "upload_time_iso_8601": "2020-04-22T17:34:17.345600Z", "url": "https://files.pythonhosted.org/packages/0a/3c/0c596e6f4f21917825f745e57400ca7da6732223aaeb0ab4a50713b1555d/niscope-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04afd473ba647e3a01ca5027155f6ff3", "sha256": "4f44cc9689aa062208ddf11d89c14ba9a49db11c5427469ac80d8bdaf0694953"}, "downloads": -1, "filename": "niscope-1.2.1.tar.gz", "has_sig": false, "md5_digest": "04afd473ba647e3a01ca5027155f6ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63973, "upload_time": "2020-04-22T17:34:27", "upload_time_iso_8601": "2020-04-22T17:34:27.930794Z", "url": "https://files.pythonhosted.org/packages/44/53/51a69eca0d712598194d2abe843747fc9d927390df882063af9ad1bc22e6/niscope-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:17 2020"}