{"info": {"author": "k.r. goger", "author_email": "k.r.goger+pyatomic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "\n# Atomic locking\n\nAtomic makes your code thread safe.\nJust use the `@Atomic.LockFunc` decorator and derive your class from `Atomic` to lock easily object instances against unsynchronized access  \n\n## Dependencies to other Python packages\n\nNo dependencies, pure Python.\n\n\n## Code\n\nThe sample code produces some trace output on the console\n\n\n    from atomic import *\n\n    def sample():\n\n        a = Atomic()\n        with a.openlocked() as aa:\n            print( f\"locked?: {a.locked()}\" )\n        print( f\"locked?: {a.locked()}\" )\n\n        # a complex class with locking on function level\n        class complex_stuff(Atomic):\n\n            def normal(self):\n                print(\"normal\")\n\n            @Atomic.LockFunc\n            def special(self):\n                print(\"special\")\n                print(\"locked?\",self.locked())\n\n            @Atomic.LockFunc\n            def special_complex(self):\n                print(\"special complex\")\n                print(\"locked?\",self.locked())\n                # call another decorated lock function\n                # internal lock counter will increased\n                self.special()\n\n            @Atomic.LockFunc\n            def special_complex_sample(self):\n                print(\"special complex\")\n                print(\"locked?\",self.locked())\n                # call another decorated lock function\n                # internal lock counter will increased\n                print(\"before with block\")\n                with self.openlocked() as lockself:\n                    self.special()\n\n            def callback(self):\n                print(\"inside callback\")                \n\n\n        cstuff = complex_stuff()\n\n        #enable trace for this instance\n        cstuff.trace(True)\n\n        cstuff.normal()\n        cstuff.special()\n        cstuff.special_complex()\n        cstuff.special_complex_sample()\n        print( f\"cstuff internal {cstuff._lock_count_atomic}\" )\n\n        with cstuff.openlocked():\n            print()\n            print( \"call complex sample again from within a context\" )\n            cstuff.special_complex_sample()\n\n        # perform the callback action\n        cstuff.exe()\n\n        cstuff.exe( callback = lambda : print(\"and now something completely different\") )\n\n        try:\n            # this is not derived from Atomic\n            class stuff_no_atomic_base(object):\n\n                @Atomic.LockFunc\n                def do_something():\n                    \"\"\"calling this will raise an exception\"\"\"\n                    pass\n\n            cbrk = stuff_no_atomic_base()\n            cbrk.do_something()\n        except Exception as ex:\n            print(ex,file=sys.stderr)\n\n        print(\"all done\")\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kr-g/pyatomic", "keywords": "python threading lock sequence", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyatomic", "package_url": "https://pypi.org/project/pyatomic/", "platform": "", "project_url": "https://pypi.org/project/pyatomic/", "project_urls": {"Homepage": "https://github.com/kr-g/pyatomic"}, "release_url": "https://pypi.org/project/pyatomic/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Atomic makes your code thread safe", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Atomic locking</h1>\n<p>Atomic makes your code thread safe.\nJust use the <code>@Atomic.LockFunc</code> decorator and derive your class from <code>Atomic</code> to lock easily object instances against unsynchronized access</p>\n<h2>Dependencies to other Python packages</h2>\n<p>No dependencies, pure Python.</p>\n<h2>Code</h2>\n<p>The sample code produces some trace output on the console</p>\n<pre><code>from atomic import *\n\ndef sample():\n\n    a = Atomic()\n    with a.openlocked() as aa:\n        print( f\"locked?: {a.locked()}\" )\n    print( f\"locked?: {a.locked()}\" )\n\n    # a complex class with locking on function level\n    class complex_stuff(Atomic):\n\n        def normal(self):\n            print(\"normal\")\n\n        @Atomic.LockFunc\n        def special(self):\n            print(\"special\")\n            print(\"locked?\",self.locked())\n\n        @Atomic.LockFunc\n        def special_complex(self):\n            print(\"special complex\")\n            print(\"locked?\",self.locked())\n            # call another decorated lock function\n            # internal lock counter will increased\n            self.special()\n\n        @Atomic.LockFunc\n        def special_complex_sample(self):\n            print(\"special complex\")\n            print(\"locked?\",self.locked())\n            # call another decorated lock function\n            # internal lock counter will increased\n            print(\"before with block\")\n            with self.openlocked() as lockself:\n                self.special()\n\n        def callback(self):\n            print(\"inside callback\")                \n\n\n    cstuff = complex_stuff()\n\n    #enable trace for this instance\n    cstuff.trace(True)\n\n    cstuff.normal()\n    cstuff.special()\n    cstuff.special_complex()\n    cstuff.special_complex_sample()\n    print( f\"cstuff internal {cstuff._lock_count_atomic}\" )\n\n    with cstuff.openlocked():\n        print()\n        print( \"call complex sample again from within a context\" )\n        cstuff.special_complex_sample()\n\n    # perform the callback action\n    cstuff.exe()\n\n    cstuff.exe( callback = lambda : print(\"and now something completely different\") )\n\n    try:\n        # this is not derived from Atomic\n        class stuff_no_atomic_base(object):\n\n            @Atomic.LockFunc\n            def do_something():\n                \"\"\"calling this will raise an exception\"\"\"\n                pass\n\n        cbrk = stuff_no_atomic_base()\n        cbrk.do_something()\n    except Exception as ex:\n        print(ex,file=sys.stderr)\n\n    print(\"all done\")\n</code></pre>\n\n          </div>"}, "last_serial": 6369165, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "76d6a383ef15a7ac4dda7c1dadea138b", "sha256": "7e0bec0eb8dec4f2af7778ae1452e8dae0a2b556e1bed1d75e3a5a19df8c523d"}, "downloads": -1, "filename": "pyatomic-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "76d6a383ef15a7ac4dda7c1dadea138b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5610, "upload_time": "2019-12-11T15:19:35", "upload_time_iso_8601": "2019-12-11T15:19:35.298540Z", "url": "https://files.pythonhosted.org/packages/c6/9c/a35bcdad7337c62b333ee1c6f016f6cdf77e358177ec5de08ba442a5f1d1/pyatomic-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b60598c6a3ea9ecb37afea63510d07b5", "sha256": "b96f52d6d9e75b9d4eb42d67d5b0f12a40f59a77fbbb619eef9eabf692d390e5"}, "downloads": -1, "filename": "pyatomic-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b60598c6a3ea9ecb37afea63510d07b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3728, "upload_time": "2019-12-11T15:19:37", "upload_time_iso_8601": "2019-12-11T15:19:37.616461Z", "url": "https://files.pythonhosted.org/packages/63/59/65223d1b53d2e8d073205ab0a172d994c63e52d6926fa46d28ae69499e1e/pyatomic-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b0611de3d628ce278ce6e0b5f12e96b1", "sha256": "fc428f08ba3eb45ce4704a54fd2d513c32ec2af7982f03a4e5b0bad5075585eb"}, "downloads": -1, "filename": "pyatomic-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b0611de3d628ce278ce6e0b5f12e96b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5607, "upload_time": "2019-12-28T19:05:56", "upload_time_iso_8601": "2019-12-28T19:05:56.649017Z", "url": "https://files.pythonhosted.org/packages/16/56/4b2c2fbbb1b80b4aaedc45d898032998e87574621d0620a8f71b11142dc5/pyatomic-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba659c1f3dfc77821ff122d01e6a054b", "sha256": "6061c4b8c76e347306024b6be5fb4090a4c905c383ac78bea1391e567430119d"}, "downloads": -1, "filename": "pyatomic-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ba659c1f3dfc77821ff122d01e6a054b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3714, "upload_time": "2019-12-28T19:05:59", "upload_time_iso_8601": "2019-12-28T19:05:59.157603Z", "url": "https://files.pythonhosted.org/packages/e2/1f/847a82f9d04943e888e39c3fe06bb18a22dffb787f9ed256662bcb0e9388/pyatomic-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b0611de3d628ce278ce6e0b5f12e96b1", "sha256": "fc428f08ba3eb45ce4704a54fd2d513c32ec2af7982f03a4e5b0bad5075585eb"}, "downloads": -1, "filename": "pyatomic-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b0611de3d628ce278ce6e0b5f12e96b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5607, "upload_time": "2019-12-28T19:05:56", "upload_time_iso_8601": "2019-12-28T19:05:56.649017Z", "url": "https://files.pythonhosted.org/packages/16/56/4b2c2fbbb1b80b4aaedc45d898032998e87574621d0620a8f71b11142dc5/pyatomic-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba659c1f3dfc77821ff122d01e6a054b", "sha256": "6061c4b8c76e347306024b6be5fb4090a4c905c383ac78bea1391e567430119d"}, "downloads": -1, "filename": "pyatomic-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ba659c1f3dfc77821ff122d01e6a054b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3714, "upload_time": "2019-12-28T19:05:59", "upload_time_iso_8601": "2019-12-28T19:05:59.157603Z", "url": "https://files.pythonhosted.org/packages/e2/1f/847a82f9d04943e888e39c3fe06bb18a22dffb787f9ed256662bcb0e9388/pyatomic-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:58 2020"}