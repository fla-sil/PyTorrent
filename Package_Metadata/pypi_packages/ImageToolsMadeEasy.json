{"info": {"author": "Paul Baumgarten", "author_email": "pbaumgarten@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# ImageToolsMadeEasy\n\nTools to simplify using face detection and ArUco recognition with PIL image objects\n\n## About\n\nThis brings a range of CV2 image functionlaity into a form that is easy to use with PIL Image objects. The module was created to allow me to introduce image based functionality to my students while keeping things as simple as possible (switching between PIL and CV2 was an unnecessary complication I felt).\n\nKey functions currently provided are:\n\n* Taking a photo with the built in camera, returning a PIL image\n* Face detection within a PIL image\n* ArUco marker detection within a PIL image\n\n## Usage: Camera\n\nA basic example\n\n```python\ncamera = ImageTools.Camera()\nimg = camera.take_photo()\nimg.save(\"my photo.png\", \"png\")\nimg.show()\n```\n\n## Usage: Face detection\n\nFor the face detection function to work, you must supply a file path to a haarcascade file. You can obtain the relevant file from [https://github.com/opencv/opencv/tree/master/data/haarcascades](https://github.com/opencv/opencv/tree/master/data/haarcascades)\n\nThe `ImageTools.get_faces()` function will return a list of lists. The outer list represents the number of faces seen, where as the inner list represent the coordinates for an individual face being the `[left, top, width, height]` pixel values.\n\nTo get the coordinates of each face in an image\n\n```python\nfrom PIL import Image\nimport ImageTools\n# ...\ncamera = ImageTools.Camera()\nimg = camera.take_photo()\nfaces = ImageTools.get_faces(img, \"haarcascade_frontalface_default.xml\")\nprint(faces)\n```\n\nTo obtain seperate jpg image for each face detected\n\n```python\nfrom PIL import Image\nimport ImageTools\n# ...\ncounter = 0\ncamera = ImageTools.Camera()\nimg = camera.take_photo()\nfaces = ImageTools.get_faces(img, \"haarcascade_frontalface_default.xml\")\nfor a_face in faces: # for each individual face in the list of faces...\n    x,y,w,h = a_face # extract the left, top, width and height locations of a face\n    a_face_img = img.crop((x,y,x+w,y+h))\n    a_face_img.save(f\"face_{counter:2}.jpg\", \"jpg\")\n    a_face_img.show()\n    counter = counter + 1\n```\n\nTo use a drawing tool to put rectangles highlighting the faces found in the original image...\n\n```python\nfrom PIL import Image, ImageDraw\nimport ImageTools\n# ...\ncamera = ImageTools.Camera()\nimg = camera.take_photo()\ndraw = ImageDraw.Draw(img)          # create the drawing object\nfaces = ImageTools.get_faces(img, \"haarcascade_frontalface_default.xml\")\nfor a_face in faces: # for each individual face in the list of faces...\n    x,y,w,h = a_face # extract the left, top, width and height locations of a face\n    draw.rectangle((x,y,x+w,y+h), outline=\"#ffff00\", width=5)   # draw a rectangle around the face\n# show the final image, highlighting each face\nimg.show()\n```\n\n## Uuage: ArUco markers\n\nThe `ImageTools.get_aruco()` function when provided a PIL Image object as a parameter, will return a Python list of the ArUco markers it detected within the image.\n\n```python\nfrom PIL import Image\nimport ImageTools\n# ....\ncamera = ImageTools.Camera()\nimage = camera.take_photo()\nmarkers = ImageTools.get_aruco(image)\nif 70 in markers:\n    print(\"I saw ArUco marker 70\")\nif 71 in markers:\n    print(\"I saw ArUco marker 71\")\nif 72 in markers:\n    print(\"I saw ArUco marker 72\")\n```\n\n* ArUco Markers are simple black and white printed codes (think of them as QR-code-lite) that resolve to an integer number.\n* The OpenCV library has [built in functionality](https://docs.opencv.org/trunk/d5/dae/tutorial_aruco_detection.html) for recognising these markers.  \n* The Python implementation of OpenCV detection was based on [this stackoverflow](https://stackoverflow.com/questions/52814747/aruco-opencv-example-all-markers-rejected)\n* Aruco markers I printed to test where were generated from [here](https://docs.opencv.org/trunk/d5/dae/tutorial_aruco_detection.html)\n* The code has been designed for the \"4x4_1000\" style of aruco markers but you can easily change that in the `camera_got_image` function if you wish\n\n\n## Install\n\n```bash\npip install ImageToolsMadeEAsy\n```\n\n## Dependencies\n\nThese should all be installed for you automatically, so are just provided for informational purposes.\n\n* `opencv-contrib-python`\n* `numpy`\n* `PIL`\n\n## Author\n\nPaul Baumgarten 2019 @ [https://github.com/paulbaumgarten/ImageToolsMadeEasy](https://github.com/paulbaumgarten/ImageToolsMadeEasy)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paulbaumgarten/ImageToolsMadyEasy", "keywords": "PIL pillow opencv aruco haarcascades", "license": "", "maintainer": "", "maintainer_email": "", "name": "ImageToolsMadeEasy", "package_url": "https://pypi.org/project/ImageToolsMadeEasy/", "platform": "", "project_url": "https://pypi.org/project/ImageToolsMadeEasy/", "project_urls": {"Homepage": "https://github.com/paulbaumgarten/ImageToolsMadyEasy"}, "release_url": "https://pypi.org/project/ImageToolsMadeEasy/2019.12.30/", "requires_dist": ["numpy", "opencv-contrib-python", "pillow"], "requires_python": ">=3", "summary": "Tools to simplify using face detection and ArUco recognition with PIL image objects", "version": "2019.12.30", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ImageToolsMadeEasy</h1>\n<p>Tools to simplify using face detection and ArUco recognition with PIL image objects</p>\n<h2>About</h2>\n<p>This brings a range of CV2 image functionlaity into a form that is easy to use with PIL Image objects. The module was created to allow me to introduce image based functionality to my students while keeping things as simple as possible (switching between PIL and CV2 was an unnecessary complication I felt).</p>\n<p>Key functions currently provided are:</p>\n<ul>\n<li>Taking a photo with the built in camera, returning a PIL image</li>\n<li>Face detection within a PIL image</li>\n<li>ArUco marker detection within a PIL image</li>\n</ul>\n<h2>Usage: Camera</h2>\n<p>A basic example</p>\n<pre><span class=\"n\">camera</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">Camera</span><span class=\"p\">()</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">take_photo</span><span class=\"p\">()</span>\n<span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">\"my photo.png\"</span><span class=\"p\">,</span> <span class=\"s2\">\"png\"</span><span class=\"p\">)</span>\n<span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h2>Usage: Face detection</h2>\n<p>For the face detection function to work, you must supply a file path to a haarcascade file. You can obtain the relevant file from <a href=\"https://github.com/opencv/opencv/tree/master/data/haarcascades\" rel=\"nofollow\">https://github.com/opencv/opencv/tree/master/data/haarcascades</a></p>\n<p>The <code>ImageTools.get_faces()</code> function will return a list of lists. The outer list represents the number of faces seen, where as the inner list represent the coordinates for an individual face being the <code>[left, top, width, height]</code> pixel values.</p>\n<p>To get the coordinates of each face in an image</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ImageTools</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">camera</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">Camera</span><span class=\"p\">()</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">take_photo</span><span class=\"p\">()</span>\n<span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">get_faces</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"s2\">\"haarcascade_frontalface_default.xml\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">faces</span><span class=\"p\">)</span>\n</pre>\n<p>To obtain seperate jpg image for each face detected</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ImageTools</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">camera</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">Camera</span><span class=\"p\">()</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">take_photo</span><span class=\"p\">()</span>\n<span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">get_faces</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"s2\">\"haarcascade_frontalface_default.xml\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">a_face</span> <span class=\"ow\">in</span> <span class=\"n\">faces</span><span class=\"p\">:</span> <span class=\"c1\"># for each individual face in the list of faces...</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">a_face</span> <span class=\"c1\"># extract the left, top, width and height locations of a face</span>\n    <span class=\"n\">a_face_img</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">crop</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">))</span>\n    <span class=\"n\">a_face_img</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"face_</span><span class=\"si\">{</span><span class=\"n\">counter</span><span class=\"si\">:</span><span class=\"s2\">2</span><span class=\"si\">}</span><span class=\"s2\">.jpg\"</span><span class=\"p\">,</span> <span class=\"s2\">\"jpg\"</span><span class=\"p\">)</span>\n    <span class=\"n\">a_face_img</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n    <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"n\">counter</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</pre>\n<p>To use a drawing tool to put rectangles highlighting the faces found in the original image...</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">ImageDraw</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ImageTools</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">camera</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">Camera</span><span class=\"p\">()</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">take_photo</span><span class=\"p\">()</span>\n<span class=\"n\">draw</span> <span class=\"o\">=</span> <span class=\"n\">ImageDraw</span><span class=\"o\">.</span><span class=\"n\">Draw</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>          <span class=\"c1\"># create the drawing object</span>\n<span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">get_faces</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"s2\">\"haarcascade_frontalface_default.xml\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">a_face</span> <span class=\"ow\">in</span> <span class=\"n\">faces</span><span class=\"p\">:</span> <span class=\"c1\"># for each individual face in the list of faces...</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">a_face</span> <span class=\"c1\"># extract the left, top, width and height locations of a face</span>\n    <span class=\"n\">draw</span><span class=\"o\">.</span><span class=\"n\">rectangle</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">),</span> <span class=\"n\">outline</span><span class=\"o\">=</span><span class=\"s2\">\"#ffff00\"</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>   <span class=\"c1\"># draw a rectangle around the face</span>\n<span class=\"c1\"># show the final image, highlighting each face</span>\n<span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h2>Uuage: ArUco markers</h2>\n<p>The <code>ImageTools.get_aruco()</code> function when provided a PIL Image object as a parameter, will return a Python list of the ArUco markers it detected within the image.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ImageTools</span>\n<span class=\"c1\"># ....</span>\n<span class=\"n\">camera</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">Camera</span><span class=\"p\">()</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">take_photo</span><span class=\"p\">()</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">ImageTools</span><span class=\"o\">.</span><span class=\"n\">get_aruco</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"mi\">70</span> <span class=\"ow\">in</span> <span class=\"n\">markers</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I saw ArUco marker 70\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"mi\">71</span> <span class=\"ow\">in</span> <span class=\"n\">markers</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I saw ArUco marker 71\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"mi\">72</span> <span class=\"ow\">in</span> <span class=\"n\">markers</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I saw ArUco marker 72\"</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>ArUco Markers are simple black and white printed codes (think of them as QR-code-lite) that resolve to an integer number.</li>\n<li>The OpenCV library has <a href=\"https://docs.opencv.org/trunk/d5/dae/tutorial_aruco_detection.html\" rel=\"nofollow\">built in functionality</a> for recognising these markers.</li>\n<li>The Python implementation of OpenCV detection was based on <a href=\"https://stackoverflow.com/questions/52814747/aruco-opencv-example-all-markers-rejected\" rel=\"nofollow\">this stackoverflow</a></li>\n<li>Aruco markers I printed to test where were generated from <a href=\"https://docs.opencv.org/trunk/d5/dae/tutorial_aruco_detection.html\" rel=\"nofollow\">here</a></li>\n<li>The code has been designed for the \"4x4_1000\" style of aruco markers but you can easily change that in the <code>camera_got_image</code> function if you wish</li>\n</ul>\n<h2>Install</h2>\n<pre>pip install ImageToolsMadeEAsy\n</pre>\n<h2>Dependencies</h2>\n<p>These should all be installed for you automatically, so are just provided for informational purposes.</p>\n<ul>\n<li><code>opencv-contrib-python</code></li>\n<li><code>numpy</code></li>\n<li><code>PIL</code></li>\n</ul>\n<h2>Author</h2>\n<p>Paul Baumgarten 2019 @ <a href=\"https://github.com/paulbaumgarten/ImageToolsMadeEasy\" rel=\"nofollow\">https://github.com/paulbaumgarten/ImageToolsMadeEasy</a></p>\n\n          </div>"}, "last_serial": 6375750, "releases": {"2019.12.30": [{"comment_text": "", "digests": {"md5": "3403303ee0ba0cfdfba62f379ae8da9d", "sha256": "211539595fb5acfcf48a7d69f97b6a808843d3f47800a2b04b97a1128a8ca315"}, "downloads": -1, "filename": "ImageToolsMadeEasy-2019.12.30-py3-none-any.whl", "has_sig": false, "md5_digest": "3403303ee0ba0cfdfba62f379ae8da9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 5282, "upload_time": "2019-12-30T15:38:03", "upload_time_iso_8601": "2019-12-30T15:38:03.056279Z", "url": "https://files.pythonhosted.org/packages/d7/05/c202431ee006e29f32c2733dcf95a0a2ca8d08a3c1b1fbad4ca70e0c7038/ImageToolsMadeEasy-2019.12.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37a90edbdeb97d1855186b496762bd04", "sha256": "7da3e9e3ee8086213606ebe9655fe9a1ca9dfbd680d5dd461f745d64790c5e41"}, "downloads": -1, "filename": "ImageToolsMadeEasy-2019.12.30.tar.gz", "has_sig": false, "md5_digest": "37a90edbdeb97d1855186b496762bd04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4991, "upload_time": "2019-12-30T15:38:05", "upload_time_iso_8601": "2019-12-30T15:38:05.828330Z", "url": "https://files.pythonhosted.org/packages/92/9b/d081cbc10a76696759c1f9fa7731d4cacd45e3c66c6eb55a90e35bbb3ada/ImageToolsMadeEasy-2019.12.30.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3403303ee0ba0cfdfba62f379ae8da9d", "sha256": "211539595fb5acfcf48a7d69f97b6a808843d3f47800a2b04b97a1128a8ca315"}, "downloads": -1, "filename": "ImageToolsMadeEasy-2019.12.30-py3-none-any.whl", "has_sig": false, "md5_digest": "3403303ee0ba0cfdfba62f379ae8da9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 5282, "upload_time": "2019-12-30T15:38:03", "upload_time_iso_8601": "2019-12-30T15:38:03.056279Z", "url": "https://files.pythonhosted.org/packages/d7/05/c202431ee006e29f32c2733dcf95a0a2ca8d08a3c1b1fbad4ca70e0c7038/ImageToolsMadeEasy-2019.12.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37a90edbdeb97d1855186b496762bd04", "sha256": "7da3e9e3ee8086213606ebe9655fe9a1ca9dfbd680d5dd461f745d64790c5e41"}, "downloads": -1, "filename": "ImageToolsMadeEasy-2019.12.30.tar.gz", "has_sig": false, "md5_digest": "37a90edbdeb97d1855186b496762bd04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4991, "upload_time": "2019-12-30T15:38:05", "upload_time_iso_8601": "2019-12-30T15:38:05.828330Z", "url": "https://files.pythonhosted.org/packages/92/9b/d081cbc10a76696759c1f9fa7731d4cacd45e3c66c6eb55a90e35bbb3ada/ImageToolsMadeEasy-2019.12.30.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:49 2020"}