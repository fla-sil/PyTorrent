{"info": {"author": "Michael Lam", "author_email": "michael.lam@nanograv.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "PyPulse\n=======\n\nA pure-Python package for handling and analyzing PSRFITS files.\n\nRead the documentation [here](https://mtlam.github.io/PyPulse/).\n\nThis is an alternate code base from [PSRCHIVE](http://psrchive.sourceforge.net/).\n\nRequires:<br>\npython 2.7 or 3.X<br>\nnumpy<br>\nscipy<br>\nmatplotlib<br>\nastropy or pyfits\n\n\nArchive\n-------\n\nA class for loading PSRFITS files\n\nUsage: \n\n    ar = Archive(FILENAME) #loads archive, dedispersed and polarization averaged by default\n    ar.tscrunch() #averages the pulse in time\n    data = ar.getData() #returns the numpy data array for use by you\n    ar.imshow() #plots frequency vs phase for the pulses\n\n\nSinglePulse\n-----------\n\nA class for handling calculations on single pulses\n\nUsage:\n\n    sp = SinglePulse(data,windowsize=256) #will auto-calculate an offpulse region of length 256 bins\n    print sp.getFWHM() #prints the FWHM of the pulse\n    print sp.getSN() #prints a crude S/N of the pulse\n    print sp.fitPulse(template_array)[5] #prints a better S/N of the pulse using a template array\n\nDynamicSpectrum\n---------------\n\nA class for handling dynamic spectra\n\n\nUsage:\n\n    ds = DynamicSpectrum(FILENAME) #takes a 2D data array or a string to a .npz file for now\n    acf2d = ds.acf2d() #calculates the 2D ACF of the dynamic spectrum\n    ds.imshow() #plots the dynamic spectrum\n    ds.save(NEWFILENAME) #saves to a .npz file, which can then be loaded again with the first line\n\nPar\n---\n\nA class for parsing pulsar parameter files\n\nUsage:\n\n    p = Par(FILENAME)\n    print p.getPeriod() #prints the period in the par file (does not calculate for a specific MJD for now)\n    t,dmx,dmxerr = p.getDMseries() #returns the DM parameters in a nice time-series. Note that errors are those given in the par file, which may not be the \"correct\" ones (more info to be provided later)\n    print p.get(\"PX\") #prints the parallax\n    print p.get(\"PX\",error=True) #prints the error on the parallax\n\n\nTim\n---\n\nA class for parsing pulsar TOA files\n\nUsage:\n\n    t = Tim(FILENAME) #automatically parses each TOA with the TOA() class\n    print t.toas[0].getMJD() #prints the MJD of the first TOA as a python Decimal\n    print t.toas[0].get('snr') #prints the value of the -snr flag of the TOA if it is available\n\n\nCitations\n---------\n\nSee [http://ascl.net/1706.011](http://ascl.net/1706.011). You can cite as:\n\n[Lam, M. T., 2017, PyPulse, Astrophysics Source Code Library, record ascl:1706.011](http://adsabs.harvard.edu/abs/2017ascl.soft06011L)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/mtlam/PyPulse/archive/v0.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mtlam/PyPulse", "keywords": "", "license": "BSD-3", "maintainer": "", "maintainer_email": "", "name": "PyPulse", "package_url": "https://pypi.org/project/PyPulse/", "platform": "", "project_url": "https://pypi.org/project/PyPulse/", "project_urls": {"Download": "https://github.com/mtlam/PyPulse/archive/v0.0.1.tar.gz", "Homepage": "https://github.com/mtlam/PyPulse"}, "release_url": "https://pypi.org/project/PyPulse/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A python package for handling and analyzing PSRFITS files.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyPulse</h1>\n<p>A pure-Python package for handling and analyzing PSRFITS files.</p>\n<p>Read the documentation <a href=\"https://mtlam.github.io/PyPulse/\" rel=\"nofollow\">here</a>.</p>\n<p>This is an alternate code base from <a href=\"http://psrchive.sourceforge.net/\" rel=\"nofollow\">PSRCHIVE</a>.</p>\n<p>Requires:<br>\npython 2.7 or 3.X<br>\nnumpy<br>\nscipy<br>\nmatplotlib<br>\nastropy or pyfits</p>\n<h2>Archive</h2>\n<p>A class for loading PSRFITS files</p>\n<p>Usage:</p>\n<pre><code>ar = Archive(FILENAME) #loads archive, dedispersed and polarization averaged by default\nar.tscrunch() #averages the pulse in time\ndata = ar.getData() #returns the numpy data array for use by you\nar.imshow() #plots frequency vs phase for the pulses\n</code></pre>\n<h2>SinglePulse</h2>\n<p>A class for handling calculations on single pulses</p>\n<p>Usage:</p>\n<pre><code>sp = SinglePulse(data,windowsize=256) #will auto-calculate an offpulse region of length 256 bins\nprint sp.getFWHM() #prints the FWHM of the pulse\nprint sp.getSN() #prints a crude S/N of the pulse\nprint sp.fitPulse(template_array)[5] #prints a better S/N of the pulse using a template array\n</code></pre>\n<h2>DynamicSpectrum</h2>\n<p>A class for handling dynamic spectra</p>\n<p>Usage:</p>\n<pre><code>ds = DynamicSpectrum(FILENAME) #takes a 2D data array or a string to a .npz file for now\nacf2d = ds.acf2d() #calculates the 2D ACF of the dynamic spectrum\nds.imshow() #plots the dynamic spectrum\nds.save(NEWFILENAME) #saves to a .npz file, which can then be loaded again with the first line\n</code></pre>\n<h2>Par</h2>\n<p>A class for parsing pulsar parameter files</p>\n<p>Usage:</p>\n<pre><code>p = Par(FILENAME)\nprint p.getPeriod() #prints the period in the par file (does not calculate for a specific MJD for now)\nt,dmx,dmxerr = p.getDMseries() #returns the DM parameters in a nice time-series. Note that errors are those given in the par file, which may not be the \"correct\" ones (more info to be provided later)\nprint p.get(\"PX\") #prints the parallax\nprint p.get(\"PX\",error=True) #prints the error on the parallax\n</code></pre>\n<h2>Tim</h2>\n<p>A class for parsing pulsar TOA files</p>\n<p>Usage:</p>\n<pre><code>t = Tim(FILENAME) #automatically parses each TOA with the TOA() class\nprint t.toas[0].getMJD() #prints the MJD of the first TOA as a python Decimal\nprint t.toas[0].get('snr') #prints the value of the -snr flag of the TOA if it is available\n</code></pre>\n<h2>Citations</h2>\n<p>See <a href=\"http://ascl.net/1706.011\" rel=\"nofollow\">http://ascl.net/1706.011</a>. You can cite as:</p>\n<p><a href=\"http://adsabs.harvard.edu/abs/2017ascl.soft06011L\" rel=\"nofollow\">Lam, M. T., 2017, PyPulse, Astrophysics Source Code Library, record ascl:1706.011</a></p>\n\n          </div>"}, "last_serial": 6729578, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b090da7d7955dec995a73c042c5c1794", "sha256": "239823737644bdf1e09e23e81b3fc439db096aa589581d9fa2b5717f1572e75b"}, "downloads": -1, "filename": "PyPulse-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b090da7d7955dec995a73c042c5c1794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52414, "upload_time": "2020-03-01T19:08:45", "upload_time_iso_8601": "2020-03-01T19:08:45.080731Z", "url": "https://files.pythonhosted.org/packages/df/cd/599f92848d4f01e22b479127b07bccc5324304c153dac3e6af5e75be0b36/PyPulse-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b090da7d7955dec995a73c042c5c1794", "sha256": "239823737644bdf1e09e23e81b3fc439db096aa589581d9fa2b5717f1572e75b"}, "downloads": -1, "filename": "PyPulse-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b090da7d7955dec995a73c042c5c1794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52414, "upload_time": "2020-03-01T19:08:45", "upload_time_iso_8601": "2020-03-01T19:08:45.080731Z", "url": "https://files.pythonhosted.org/packages/df/cd/599f92848d4f01e22b479127b07bccc5324304c153dac3e6af5e75be0b36/PyPulse-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:58 2020"}