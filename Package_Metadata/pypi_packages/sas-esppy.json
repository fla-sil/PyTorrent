{"info": {"author": "SAS", "author_email": "Robert.Levey@sas.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# SAS Event Stream Processing Python Interface\n\nThe ESPPy package enables you to create\n[SAS Event Stream Processing (ESP)](https://www.sas.com/en_us/software/event-stream-processing.html)\nmodels programmatically in Python. Using ESPPy, you can connect to \nan ESP server and interact with projects and their components as \nPython objects. These objects include projects, continuous queries, \nwindows, events, loggers, SAS Micro Analytic Service modules, \nrouters, and analytical algorithms.\n\nESPPy has full integration with [Jupyter](https://jupyter.org/) notebooks including visualizing \ndiagrams of your ESP projects, and support for streaming charts and \nimages. This allows you to easily explore and prototype your ESP \nprojects in a familiar notebook interface.\n\n## Installation\n\nTo install ESPPy, you can use either `pip` or `conda`.  This will install\nESPPy as well as the Python package dependencies.\n\n```\npip install sas-esppy\n```\n\nor, if you are using an Anaconda distribution:\n\n```\nconda install -c sas-institute sas-esppy\n```\n\n### Additional Requirements\n\nIn addition to the Python package dependencies, you will also need the \n`graphviz` command-line tools to fully take advantage of ESPPy.  These can\nbe downloaded from http://www.graphviz.org/download/.\n\n### Performance Enhancement\n\nAlso, ESPPy uses the `ws4py` websocket Python package.  In some cases\nyou can improve performance greatly by installing the `wsaccel` package.\nThis may not be available on all platforms though, and is left up to \nthe user to install.\n\n## The Basics\n\nImporting the package is done just as it is with any other Python package.\n\n```\n>>> import esppy\n```\n\nTo connect to an ESP server, you use the `ESP` class.  In most cases, the only\ninformation that is needed is the hostname and port.\n\n```\n>>> esp = esppy.ESP('http://myesp.com:8777')\n```\n\n### Getting Information about the Server\n\nNow that we have a connection to the server, we can get information about the\nserver and projects.\n\n```\n>>> esp.server_info\n{'analytics-license': True,\n 'engine': 'esp',\n 'http-admin': 8777,\n 'pubsub': 8778,\n 'version': '5.2'}\n\n# Currently no projects are loaded\n>>> esp.get_projects()\n{}\n```\n\n### Loading a Project\n\nLoading a project is done with the `load_project` method.\n\n```\n>>> esp.load_project('project.xml')\n\n>>> esp.get_projects()\n{'project': Project(name='project')}\n```\n\nContinous queries and windows within projects can be accessed using\nthe `queries` and `windows` attributes of the `Project` and\n`ContinuousQuery` objects, respectively.\n\n```\n>>> proj = esp.get_project('project')\n>>> proj.queries\n{'contquery': ContinuousQuery(name='contquery', project='project')}\n\n>>> proj.queries['contquery'].windows\n{'w_data': CopyWindow(name='w_data', continuous_query='contquery', project='project'),\n 'w_request': SourceWindow(name='w_request', continuous_query='contquery', project='project'),\n 'w_calculate': CalculateWindow(name='w_calculate', continuous_query='contquery', project='project')}\n\n>>> dataw = proj.queries['contquery'].windows['w_data']\n```\n\nYou can even drop the `queries` and `windows` attribute name as a shortcut.\nprojects and continuous queries act like dictionaries of those components.\n\n```\n>>> dataw = proj['contquery']['w_data']\n```\n\n### Publishing Event Data\n\nTo publish events to a window, you simply use the `publish_events` method.\nIt will accept a file name, file-like object, DataFrame, or a string of\nCSV, XML, or JSON data.\n\n```\n>>> dataw.publish_events('data.csv')\n```\n\n### Monitoring Events\n\nYou can subscribe to the events of any window in a project.  By default,\nall event data will be cached in the local window object.\n\n```\n>>> dataw.subscribe()\n>>> dataw\n       time        x        y        z\nid                                    \n6   0.15979 -2.30180  0.23155  10.6510\n7   0.18982 -1.41650  1.18500  11.0730\n8   0.22040 -0.27241  2.22010  11.9860\n9   0.24976 -0.61292  2.22010  11.9860\n10  0.27972  1.33480  4.24950  11.4140\n11  0.31802  3.44590  7.58650  12.5990\n```\n\nYou can limit the number of cached events using the `limit`\nparameter.  For example, to only keep the last 20 events, you would do\nthe following.\n\n```\n>>> dataw.subscribe(limit=20)\n```\n\nYou can also limit the amount of time that events are collected using\nthe `horizon` parameter.  It will take a `datetime`, `date`, `time`,\nor `timedelta` object.\n\n```\n>>> dataw.subscribe(horizon=datetime.timedelta(hours=1))\n```\n\nYou can also perform any DataFrame operation on your ESP windows.\n\n```\n>>> dataw.info()\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 2108 entries, 6 to 2113\nData columns (total 4 columns):\ntime    2108 non-null float64\nx       2108 non-null float64\ny       2108 non-null float64\nz       2108 non-null float64\ndtypes: float64(4)\nmemory usage: 82.3 KB\n\n>>> dataw.describe()\n            time          x          y          z\ncount  20.000000  20.000000  20.000000  20.000000\nmean   69.655050  -4.365320   8.589630  -1.675292\nstd     0.177469   1.832482   2.688911   2.108300\nmin    69.370000  -7.436700   4.862500  -5.175700\n25%    69.512500  -5.911250   7.007675  -3.061150\n50%    69.655000  -4.099700   7.722700  -1.702500\n75%    69.797500  -2.945400   9.132350  -0.766110\nmax    69.940000  -1.566300  14.601000   3.214400\n```\n\n### Using ESPPY Visualizations with Jupyter LAB\n\nNOTE: These instructions assume you have Anaconda installed.\n\nThe steps to use the new ESPPY 6.2 jupyterlab visualizations are:\n\n1. Create new Anaconda environment. This can be called anything you want, but for this demonstration the environment will be called esp\n```\n    $ conda create -n esp python=3.7\n```\n2. Activate the new environment, i.e. make it your current environment\n```\n$ conda activate esp\n```\n3. Install the following packages:\n```\n$ pip install jupyter\n$ pip install jupyterlab\n$ pip install matplotlib\n$ pip install ipympl\n$ pip install pandas\n$ pip install requests\n$ pip install image\n$ pip install ws4py\n$ pip install plotly\n$ pip install ipyleaflet\n$ pip install graphviz\n```\n4. Install the following Jupyterlab extensions:\n```\n$ jupyter labextension install @jupyter-widgets/jupyterlab-manager\n$ jupyter labextension install plotlywidget\n$ jupyter labextension install jupyter-leaflet\n```\n\n5. Install the following packages (WINDOWS ONLY):\n```\n$ conda install -c conda-forge python-graphviz\n```\n\n6. Create a working directory and change to it\n```\n$ cd $HOME\n$ mkdir esppy\n$ cd esppy\n```\n\n7. Install ESPPY\n```\npip install sas-esppy==6.2\n```\n\n8. Create a notebooks directory to store your notebooks\n```\n$ mkdir notebooks\n```\n\n9. Start the Jupyterlab server (Pick an available port of your choosing, this example uses 35000)\n```\n$ jupyter lab --port 35000\n```\n\nOnce these steps are complete, you should be able to use the latest ESP graphics in your Jupyter notebooks.\n\n### Documentation\n\nThe full API documentation of ESPPy is available at \nhttps://sassoftware.github.io/python-esppy/.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sassoftware/python-esppy/", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "sas-esppy", "package_url": "https://pypi.org/project/sas-esppy/", "platform": "", "project_url": "https://pypi.org/project/sas-esppy/", "project_urls": {"Homepage": "https://github.com/sassoftware/python-esppy/"}, "release_url": "https://pypi.org/project/sas-esppy/7.1/", "requires_dist": ["pandas (>=0.16.0)", "pillow", "six (>=1.9.0)", "plotly", "ipywidgets", "requests", "graphviz", "ws4py"], "requires_python": "", "summary": "SAS Event Stream Processing Python Interface", "version": "7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SAS Event Stream Processing Python Interface</h1>\n<p>The ESPPy package enables you to create\n<a href=\"https://www.sas.com/en_us/software/event-stream-processing.html\" rel=\"nofollow\">SAS Event Stream Processing (ESP)</a>\nmodels programmatically in Python. Using ESPPy, you can connect to\nan ESP server and interact with projects and their components as\nPython objects. These objects include projects, continuous queries,\nwindows, events, loggers, SAS Micro Analytic Service modules,\nrouters, and analytical algorithms.</p>\n<p>ESPPy has full integration with <a href=\"https://jupyter.org/\" rel=\"nofollow\">Jupyter</a> notebooks including visualizing\ndiagrams of your ESP projects, and support for streaming charts and\nimages. This allows you to easily explore and prototype your ESP\nprojects in a familiar notebook interface.</p>\n<h2>Installation</h2>\n<p>To install ESPPy, you can use either <code>pip</code> or <code>conda</code>.  This will install\nESPPy as well as the Python package dependencies.</p>\n<pre><code>pip install sas-esppy\n</code></pre>\n<p>or, if you are using an Anaconda distribution:</p>\n<pre><code>conda install -c sas-institute sas-esppy\n</code></pre>\n<h3>Additional Requirements</h3>\n<p>In addition to the Python package dependencies, you will also need the\n<code>graphviz</code> command-line tools to fully take advantage of ESPPy.  These can\nbe downloaded from <a href=\"http://www.graphviz.org/download/\" rel=\"nofollow\">http://www.graphviz.org/download/</a>.</p>\n<h3>Performance Enhancement</h3>\n<p>Also, ESPPy uses the <code>ws4py</code> websocket Python package.  In some cases\nyou can improve performance greatly by installing the <code>wsaccel</code> package.\nThis may not be available on all platforms though, and is left up to\nthe user to install.</p>\n<h2>The Basics</h2>\n<p>Importing the package is done just as it is with any other Python package.</p>\n<pre><code>&gt;&gt;&gt; import esppy\n</code></pre>\n<p>To connect to an ESP server, you use the <code>ESP</code> class.  In most cases, the only\ninformation that is needed is the hostname and port.</p>\n<pre><code>&gt;&gt;&gt; esp = esppy.ESP('http://myesp.com:8777')\n</code></pre>\n<h3>Getting Information about the Server</h3>\n<p>Now that we have a connection to the server, we can get information about the\nserver and projects.</p>\n<pre><code>&gt;&gt;&gt; esp.server_info\n{'analytics-license': True,\n 'engine': 'esp',\n 'http-admin': 8777,\n 'pubsub': 8778,\n 'version': '5.2'}\n\n# Currently no projects are loaded\n&gt;&gt;&gt; esp.get_projects()\n{}\n</code></pre>\n<h3>Loading a Project</h3>\n<p>Loading a project is done with the <code>load_project</code> method.</p>\n<pre><code>&gt;&gt;&gt; esp.load_project('project.xml')\n\n&gt;&gt;&gt; esp.get_projects()\n{'project': Project(name='project')}\n</code></pre>\n<p>Continous queries and windows within projects can be accessed using\nthe <code>queries</code> and <code>windows</code> attributes of the <code>Project</code> and\n<code>ContinuousQuery</code> objects, respectively.</p>\n<pre><code>&gt;&gt;&gt; proj = esp.get_project('project')\n&gt;&gt;&gt; proj.queries\n{'contquery': ContinuousQuery(name='contquery', project='project')}\n\n&gt;&gt;&gt; proj.queries['contquery'].windows\n{'w_data': CopyWindow(name='w_data', continuous_query='contquery', project='project'),\n 'w_request': SourceWindow(name='w_request', continuous_query='contquery', project='project'),\n 'w_calculate': CalculateWindow(name='w_calculate', continuous_query='contquery', project='project')}\n\n&gt;&gt;&gt; dataw = proj.queries['contquery'].windows['w_data']\n</code></pre>\n<p>You can even drop the <code>queries</code> and <code>windows</code> attribute name as a shortcut.\nprojects and continuous queries act like dictionaries of those components.</p>\n<pre><code>&gt;&gt;&gt; dataw = proj['contquery']['w_data']\n</code></pre>\n<h3>Publishing Event Data</h3>\n<p>To publish events to a window, you simply use the <code>publish_events</code> method.\nIt will accept a file name, file-like object, DataFrame, or a string of\nCSV, XML, or JSON data.</p>\n<pre><code>&gt;&gt;&gt; dataw.publish_events('data.csv')\n</code></pre>\n<h3>Monitoring Events</h3>\n<p>You can subscribe to the events of any window in a project.  By default,\nall event data will be cached in the local window object.</p>\n<pre><code>&gt;&gt;&gt; dataw.subscribe()\n&gt;&gt;&gt; dataw\n       time        x        y        z\nid                                    \n6   0.15979 -2.30180  0.23155  10.6510\n7   0.18982 -1.41650  1.18500  11.0730\n8   0.22040 -0.27241  2.22010  11.9860\n9   0.24976 -0.61292  2.22010  11.9860\n10  0.27972  1.33480  4.24950  11.4140\n11  0.31802  3.44590  7.58650  12.5990\n</code></pre>\n<p>You can limit the number of cached events using the <code>limit</code>\nparameter.  For example, to only keep the last 20 events, you would do\nthe following.</p>\n<pre><code>&gt;&gt;&gt; dataw.subscribe(limit=20)\n</code></pre>\n<p>You can also limit the amount of time that events are collected using\nthe <code>horizon</code> parameter.  It will take a <code>datetime</code>, <code>date</code>, <code>time</code>,\nor <code>timedelta</code> object.</p>\n<pre><code>&gt;&gt;&gt; dataw.subscribe(horizon=datetime.timedelta(hours=1))\n</code></pre>\n<p>You can also perform any DataFrame operation on your ESP windows.</p>\n<pre><code>&gt;&gt;&gt; dataw.info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 2108 entries, 6 to 2113\nData columns (total 4 columns):\ntime    2108 non-null float64\nx       2108 non-null float64\ny       2108 non-null float64\nz       2108 non-null float64\ndtypes: float64(4)\nmemory usage: 82.3 KB\n\n&gt;&gt;&gt; dataw.describe()\n            time          x          y          z\ncount  20.000000  20.000000  20.000000  20.000000\nmean   69.655050  -4.365320   8.589630  -1.675292\nstd     0.177469   1.832482   2.688911   2.108300\nmin    69.370000  -7.436700   4.862500  -5.175700\n25%    69.512500  -5.911250   7.007675  -3.061150\n50%    69.655000  -4.099700   7.722700  -1.702500\n75%    69.797500  -2.945400   9.132350  -0.766110\nmax    69.940000  -1.566300  14.601000   3.214400\n</code></pre>\n<h3>Using ESPPY Visualizations with Jupyter LAB</h3>\n<p>NOTE: These instructions assume you have Anaconda installed.</p>\n<p>The steps to use the new ESPPY 6.2 jupyterlab visualizations are:</p>\n<ol>\n<li>Create new Anaconda environment. This can be called anything you want, but for this demonstration the environment will be called esp</li>\n</ol>\n<pre><code>    $ conda create -n esp python=3.7\n</code></pre>\n<ol>\n<li>Activate the new environment, i.e. make it your current environment</li>\n</ol>\n<pre><code>$ conda activate esp\n</code></pre>\n<ol>\n<li>Install the following packages:</li>\n</ol>\n<pre><code>$ pip install jupyter\n$ pip install jupyterlab\n$ pip install matplotlib\n$ pip install ipympl\n$ pip install pandas\n$ pip install requests\n$ pip install image\n$ pip install ws4py\n$ pip install plotly\n$ pip install ipyleaflet\n$ pip install graphviz\n</code></pre>\n<ol>\n<li>Install the following Jupyterlab extensions:</li>\n</ol>\n<pre><code>$ jupyter labextension install @jupyter-widgets/jupyterlab-manager\n$ jupyter labextension install plotlywidget\n$ jupyter labextension install jupyter-leaflet\n</code></pre>\n<ol>\n<li>Install the following packages (WINDOWS ONLY):</li>\n</ol>\n<pre><code>$ conda install -c conda-forge python-graphviz\n</code></pre>\n<ol>\n<li>Create a working directory and change to it</li>\n</ol>\n<pre><code>$ cd $HOME\n$ mkdir esppy\n$ cd esppy\n</code></pre>\n<ol>\n<li>Install ESPPY</li>\n</ol>\n<pre><code>pip install sas-esppy==6.2\n</code></pre>\n<ol>\n<li>Create a notebooks directory to store your notebooks</li>\n</ol>\n<pre><code>$ mkdir notebooks\n</code></pre>\n<ol>\n<li>Start the Jupyterlab server (Pick an available port of your choosing, this example uses 35000)</li>\n</ol>\n<pre><code>$ jupyter lab --port 35000\n</code></pre>\n<p>Once these steps are complete, you should be able to use the latest ESP graphics in your Jupyter notebooks.</p>\n<h3>Documentation</h3>\n<p>The full API documentation of ESPPy is available at\n<a href=\"https://sassoftware.github.io/python-esppy/\" rel=\"nofollow\">https://sassoftware.github.io/python-esppy/</a>.</p>\n\n          </div>"}, "last_serial": 6229730, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9f410255f8ab8535ee4e499e4bfe2f55", "sha256": "23f03fef7f5fdfb97c7c06a76a6300a4fc248e49dc845c1677f6574e8951ca51"}, "downloads": -1, "filename": "sas-esppy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9f410255f8ab8535ee4e499e4bfe2f55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 175579, "upload_time": "2018-10-05T17:48:43", "upload_time_iso_8601": "2018-10-05T17:48:43.128806Z", "url": "https://files.pythonhosted.org/packages/7d/43/f9770c9637556a6eb5ea0e63bf90654a98f7d72d8916916e3af74512cc2e/sas-esppy-1.0.0.tar.gz", "yanked": false}], "5.2": [{"comment_text": "", "digests": {"md5": "eae2eaad4d45af360a8de1e81428c6df", "sha256": "06d122547fde9d1c6be3721a39e1aafe160e1a7afae81cc627d663c71d7047b5"}, "downloads": -1, "filename": "sas_esppy-5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "eae2eaad4d45af360a8de1e81428c6df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 308449, "upload_time": "2019-05-23T16:44:07", "upload_time_iso_8601": "2019-05-23T16:44:07.631751Z", "url": "https://files.pythonhosted.org/packages/45/15/f236011aeb6b0bb5a876e9de0ccce582b8cb203a8fe90fe2c8e629dcdf64/sas_esppy-5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9eef72f9c17f63100a58004341b7e5f7", "sha256": "951ffdcc664aee00285b220349231fc6f095db67fc0183c2dfc3c16d8a5c25be"}, "downloads": -1, "filename": "sas-esppy-5.2.tar.gz", "has_sig": false, "md5_digest": "9eef72f9c17f63100a58004341b7e5f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179044, "upload_time": "2019-05-23T16:44:09", "upload_time_iso_8601": "2019-05-23T16:44:09.367356Z", "url": "https://files.pythonhosted.org/packages/c9/11/a14e2728a9fe3009f5737d487b827a19ec134a77cd95f569fdbf579f54af/sas-esppy-5.2.tar.gz", "yanked": false}], "6.1": [{"comment_text": "", "digests": {"md5": "8f1e1c49c906886e4e0f2342429dfdb7", "sha256": "e8d33d0d91afbff8bc107e74056be1c0316cae90b4832c3fa9e93a88dd47fde2"}, "downloads": -1, "filename": "sas_esppy-6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8f1e1c49c906886e4e0f2342429dfdb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 321508, "upload_time": "2019-05-23T16:59:21", "upload_time_iso_8601": "2019-05-23T16:59:21.236429Z", "url": "https://files.pythonhosted.org/packages/70/88/298e81d94312efad25a9c67e934fcf07d7d7b4ad967e6c8694e70c1eb586/sas_esppy-6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "568dfb2b934ecc78b20a6a9e6fce1aea", "sha256": "663621c4c3f66e307b470d8a488427d60b554492e2d7a0a92746fff2bed3ce76"}, "downloads": -1, "filename": "sas-esppy-6.1.tar.gz", "has_sig": false, "md5_digest": "568dfb2b934ecc78b20a6a9e6fce1aea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189525, "upload_time": "2019-05-23T16:59:23", "upload_time_iso_8601": "2019-05-23T16:59:23.174406Z", "url": "https://files.pythonhosted.org/packages/7e/0b/7273531e2fb391c6aa2cbef958f684613938bfef00102004b9569a108146/sas-esppy-6.1.tar.gz", "yanked": false}], "6.2": [], "6.2.post1": [{"comment_text": "", "digests": {"md5": "be9c8edb9f70e3c3790052c49dd72ac0", "sha256": "d1c7bece5f3d74404811e99d69800d610c41dcf73df9e37d468102a282f49d64"}, "downloads": -1, "filename": "sas_esppy-6.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "be9c8edb9f70e3c3790052c49dd72ac0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 366438, "upload_time": "2019-11-01T20:49:51", "upload_time_iso_8601": "2019-11-01T20:49:51.936029Z", "url": "https://files.pythonhosted.org/packages/13/d1/13b9b3ab9cb53c820cdc8d28269c66e3df571688119a51394be7a8a369b1/sas_esppy-6.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3ef66d67e38b3d7dc0f6589c154017e", "sha256": "c86c87ef6318d5c9914cba2a22456d078d2ed805cd1f7ea3b5f407477a098ec3"}, "downloads": -1, "filename": "sas-esppy-6.2.post1.tar.gz", "has_sig": false, "md5_digest": "a3ef66d67e38b3d7dc0f6589c154017e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231668, "upload_time": "2019-11-01T20:49:54", "upload_time_iso_8601": "2019-11-01T20:49:54.164562Z", "url": "https://files.pythonhosted.org/packages/b1/63/370f53606974c112cc1002d1270b7f36de7229e4da33d543a2b7b6a3deb0/sas-esppy-6.2.post1.tar.gz", "yanked": false}], "7.1": [{"comment_text": "", "digests": {"md5": "01df2df0832e92f1bb26dd76fefd0b9d", "sha256": "912727a7f0888ae216f311761643bc7d6a0bb90ade798c090366d1a2d067f632"}, "downloads": -1, "filename": "sas_esppy-7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "01df2df0832e92f1bb26dd76fefd0b9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 366415, "upload_time": "2019-12-02T16:33:27", "upload_time_iso_8601": "2019-12-02T16:33:27.207005Z", "url": "https://files.pythonhosted.org/packages/3b/9f/4ac128b81e7a511a1ee49861feb3785f9dd4517cfdaa4f1faa47148fa528/sas_esppy-7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69562d1b72cd24ccb68e67e56ef434c8", "sha256": "eeaa641ac31025b2b291322c8e838254d7e01e52b97e4bf2ea0a65cdd0b45dc3"}, "downloads": -1, "filename": "sas-esppy-7.1.tar.gz", "has_sig": false, "md5_digest": "69562d1b72cd24ccb68e67e56ef434c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231645, "upload_time": "2019-12-02T16:33:29", "upload_time_iso_8601": "2019-12-02T16:33:29.039542Z", "url": "https://files.pythonhosted.org/packages/e2/56/482decf6db0a3e91412715408c4a35b4ba73a903180fc7b073298c09e03f/sas-esppy-7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01df2df0832e92f1bb26dd76fefd0b9d", "sha256": "912727a7f0888ae216f311761643bc7d6a0bb90ade798c090366d1a2d067f632"}, "downloads": -1, "filename": "sas_esppy-7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "01df2df0832e92f1bb26dd76fefd0b9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 366415, "upload_time": "2019-12-02T16:33:27", "upload_time_iso_8601": "2019-12-02T16:33:27.207005Z", "url": "https://files.pythonhosted.org/packages/3b/9f/4ac128b81e7a511a1ee49861feb3785f9dd4517cfdaa4f1faa47148fa528/sas_esppy-7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69562d1b72cd24ccb68e67e56ef434c8", "sha256": "eeaa641ac31025b2b291322c8e838254d7e01e52b97e4bf2ea0a65cdd0b45dc3"}, "downloads": -1, "filename": "sas-esppy-7.1.tar.gz", "has_sig": false, "md5_digest": "69562d1b72cd24ccb68e67e56ef434c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231645, "upload_time": "2019-12-02T16:33:29", "upload_time_iso_8601": "2019-12-02T16:33:29.039542Z", "url": "https://files.pythonhosted.org/packages/e2/56/482decf6db0a3e91412715408c4a35b4ba73a903180fc7b073298c09e03f/sas-esppy-7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:33 2020"}