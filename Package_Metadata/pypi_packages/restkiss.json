{"info": {"author": "Bruno Marques", "author_email": "bruno@cravefood.services", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Flask", "Framework :: Pyramid", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "**DEPRECATED.** We're now part of the restless_ team, so development will continue there.\n\n========\nrestkiss\n========\n\n.. image:: https://travis-ci.org/CraveFood/restkiss.png?branch=master\n        :target: https://travis-ci.org/CraveFood/restkiss\n\nA fork of the restless_ lightweight REST miniframework for Python.\n\nDocumentation is at http://restkiss.readthedocs.io/.\n\nWorks great with Django_, Flask_, Pyramid_, Tornado_ & Itty_, but should be useful for\nmany other Python web frameworks. Based on the lessons learned from Tastypie_\n& other REST libraries.\n\n.. _restless: http://github.com/toastdriven/restless\n.. _Django: http://djangoproject.com/\n.. _Flask: http://flask.pocoo.org/\n.. _Pyramid: http://www.pylonsproject.org/\n.. _Itty: https://pypi.python.org/pypi/itty\n.. _Tastypie: http://tastypieapi.org/\n.. _Tornado: http://www.tornadoweb.org/\n.. _tox: https://tox.readthedocs.io/\n\n\nFeatures\n========\n\n* Small, fast codebase\n* JSON output by default, but overridable\n* RESTful\n* Python 3.2+ (with shims to make broke-ass Python 2.6+ work)\n* Flexible\n\n\nAnti-Features\n=============\n\nThings that will never be added to the core library - but plugins are encouraged!\n\n* Automatic ORM integration\n* Authorization (per-object or not)\n* Extensive filtering options\n* XML output\n* Metaclasses\n* Mixins\n* HATEOAS\n\n\nWhy?\n====\n\nCreator `@toastdriven <http://github.com/toastdriven>`_ had a very specific goal when building the original\nrestless_, and our goal is to respect it. Here it follows:\n\n> Quite simply, I care about creating flexible & RESTful APIs. In building\n> Tastypie, I tried to create something extremely complete & comprehensive.\n> The result was writing a lot of hook methods (for easy extensibility) & a lot\n> of (perceived) bloat, as I tried to accommodate for everything people might\n> want/need in a flexible/overridable manner.\n>\n> But in reality, all I really ever personally want are the RESTful verbs, JSON\n> serialization & the ability of override behavior.\n>\n> This one is written for me, but maybe it's useful to you.\n\n\nManifesto\n=========\n\nRather than try to build something that automatically does the typically\ncorrect thing within each of the views, it's up to you to implement the bodies\nof various HTTP methods.\n\nExample code:\n\n.. code:: python\n\n    # posts/api.py\n    from django.contrib.auth.models import User\n\n    from restkiss.dj import DjangoResource\n    from restkiss.preparers import FieldsPreparer\n\n    from posts.models import Post\n\n\n    class PostResource(DjangoResource):\n        # Controls what data is included in the serialized output.\n        preparer = FieldsPreparer(fields={\n            'id': 'id',\n            'title': 'title',\n            'author': 'user.username',\n            'body': 'content',\n            'posted_on': 'posted_on',\n        })\n\n        # GET /\n        def list(self):\n            return Post.objects.all()\n\n        # GET /pk/\n        def detail(self, pk):\n            return Post.objects.get(id=pk)\n\n        # POST /\n        def create(self):\n            return Post.objects.create(\n                title=self.data['title'],\n                user=User.objects.get(username=self.data['author']),\n                content=self.data['body']\n            )\n\n        # PUT /pk/\n        def update(self, pk):\n            try:\n                post = Post.objects.get(id=pk)\n            except Post.DoesNotExist:\n                post = Post()\n\n            post.title = self.data['title']\n            post.user = User.objects.get(username=self.data['author'])\n            post.content = self.data['body']\n            post.save()\n            return post\n\n        # DELETE /pk/\n        def delete(self, pk):\n            Post.objects.get(id=pk).delete()\n\nHooking it up:\n\n.. code:: python\n\n    # api/urls.py\n    from django.conf.urls.default import url, include\n\n    from posts.api import PostResource\n\n    urlpatterns = [\n        # The usual suspects, then...\n\n        url(r'^api/posts/', include(PostResource.urls())),\n    ]\n\n\nLicence\n=======\n\nBSD\n\n\nRunning the Tests\n=================\n\nThe test suite uses tox_ for simultaneous support of multiple versions of both\nPython and Django. The current versions of Python supported are:\n\n* CPython 2.7\n* CPython 3.4\n* CPython 3.5\n* PyPy (Python 2.7)\n* PyPy3 (Python 3.2)\n* PyPy3 beta (Python 3.3)\n\nYou just need to install the Python interpreters above and the `tox` package\n(available via `pip`), then run the `tox` command.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/CraveFood/restkiss", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "restkiss", "package_url": "https://pypi.org/project/restkiss/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/restkiss/", "project_urls": {"Homepage": "http://github.com/CraveFood/restkiss"}, "release_url": "https://pypi.org/project/restkiss/2.0.2/", "requires_dist": null, "requires_python": null, "summary": "A lightweight REST miniframework for Python.", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>DEPRECATED.</strong> We\u2019re now part of the <a href=\"http://github.com/toastdriven/restless\" rel=\"nofollow\">restless</a> team, so development will continue there.</p>\n<div id=\"restkiss\">\n<h2>restkiss</h2>\n<a href=\"https://travis-ci.org/CraveFood/restkiss\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/CraveFood/restkiss.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b47258c4b5ef23501148975e02472387a38ab2c4/68747470733a2f2f7472617669732d63692e6f72672f4372617665466f6f642f726573746b6973732e706e673f6272616e63683d6d6173746572\"></a>\n<p>A fork of the <a href=\"http://github.com/toastdriven/restless\" rel=\"nofollow\">restless</a> lightweight REST miniframework for Python.</p>\n<p>Documentation is at <a href=\"http://restkiss.readthedocs.io/\" rel=\"nofollow\">http://restkiss.readthedocs.io/</a>.</p>\n<p>Works great with <a href=\"http://djangoproject.com/\" rel=\"nofollow\">Django</a>, <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a>, <a href=\"http://www.pylonsproject.org/\" rel=\"nofollow\">Pyramid</a>, <a href=\"http://www.tornadoweb.org/\" rel=\"nofollow\">Tornado</a> &amp; <a href=\"https://pypi.python.org/pypi/itty\" rel=\"nofollow\">Itty</a>, but should be useful for\nmany other Python web frameworks. Based on the lessons learned from <a href=\"http://tastypieapi.org/\" rel=\"nofollow\">Tastypie</a>\n&amp; other REST libraries.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Small, fast codebase</li>\n<li>JSON output by default, but overridable</li>\n<li>RESTful</li>\n<li>Python 3.2+ (with shims to make broke-ass Python 2.6+ work)</li>\n<li>Flexible</li>\n</ul>\n</div>\n<div id=\"anti-features\">\n<h3>Anti-Features</h3>\n<p>Things that will never be added to the core library - but plugins are encouraged!</p>\n<ul>\n<li>Automatic ORM integration</li>\n<li>Authorization (per-object or not)</li>\n<li>Extensive filtering options</li>\n<li>XML output</li>\n<li>Metaclasses</li>\n<li>Mixins</li>\n<li>HATEOAS</li>\n</ul>\n</div>\n<div id=\"why\">\n<h3>Why?</h3>\n<p>Creator <a href=\"http://github.com/toastdriven\" rel=\"nofollow\">@toastdriven</a> had a very specific goal when building the original\n<a href=\"http://github.com/toastdriven/restless\" rel=\"nofollow\">restless</a>, and our goal is to respect it. Here it follows:</p>\n<p>&gt; Quite simply, I care about creating flexible &amp; RESTful APIs. In building\n&gt; Tastypie, I tried to create something extremely complete &amp; comprehensive.\n&gt; The result was writing a lot of hook methods (for easy extensibility) &amp; a lot\n&gt; of (perceived) bloat, as I tried to accommodate for everything people might\n&gt; want/need in a flexible/overridable manner.\n&gt;\n&gt; But in reality, all I really ever personally want are the RESTful verbs, JSON\n&gt; serialization &amp; the ability of override behavior.\n&gt;\n&gt; This one is written for me, but maybe it\u2019s useful to you.</p>\n</div>\n<div id=\"manifesto\">\n<h3>Manifesto</h3>\n<p>Rather than try to build something that automatically does the typically\ncorrect thing within each of the views, it\u2019s up to you to implement the bodies\nof various HTTP methods.</p>\n<p>Example code:</p>\n<pre><span class=\"c1\"># posts/api.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">restkiss.dj</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoResource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">restkiss.preparers</span> <span class=\"kn\">import</span> <span class=\"n\">FieldsPreparer</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">posts.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostResource</span><span class=\"p\">(</span><span class=\"n\">DjangoResource</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Controls what data is included in the serialized output.</span>\n    <span class=\"n\">preparer</span> <span class=\"o\">=</span> <span class=\"n\">FieldsPreparer</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'id'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'title'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'user.username'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"s1\">'content'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'posted_on'</span><span class=\"p\">:</span> <span class=\"s1\">'posted_on'</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># GET /</span>\n    <span class=\"k\">def</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># GET /pk/</span>\n    <span class=\"k\">def</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># POST /</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">],</span>\n            <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'author'</span><span class=\"p\">]),</span>\n            <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># PUT /pk/</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n            <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"p\">()</span>\n\n        <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span>\n        <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'author'</span><span class=\"p\">])</span>\n        <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">]</span>\n        <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">post</span>\n\n    <span class=\"c1\"># DELETE /pk/</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<p>Hooking it up:</p>\n<pre><span class=\"c1\"># api/urls.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.default</span> <span class=\"kn\">import</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">posts.api</span> <span class=\"kn\">import</span> <span class=\"n\">PostResource</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># The usual suspects, then...</span>\n\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^api/posts/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">PostResource</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">())),</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"licence\">\n<h3>Licence</h3>\n<p>BSD</p>\n</div>\n<div id=\"running-the-tests\">\n<h3>Running the Tests</h3>\n<p>The test suite uses <a href=\"https://tox.readthedocs.io/\" rel=\"nofollow\">tox</a> for simultaneous support of multiple versions of both\nPython and Django. The current versions of Python supported are:</p>\n<ul>\n<li>CPython 2.7</li>\n<li>CPython 3.4</li>\n<li>CPython 3.5</li>\n<li>PyPy (Python 2.7)</li>\n<li>PyPy3 (Python 3.2)</li>\n<li>PyPy3 beta (Python 3.3)</li>\n</ul>\n<p>You just need to install the Python interpreters above and the <cite>tox</cite> package\n(available via <cite>pip</cite>), then run the <cite>tox</cite> command.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2459940, "releases": {"2.0.2": [{"comment_text": "", "digests": {"md5": "c40c23c5cfcd61b2f49172e7696c7e5a", "sha256": "fae21c0cc3cbc4f3854d2d1c7217a70e25245db8e124bfd72c8fbd689e6b50b3"}, "downloads": -1, "filename": "restkiss-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c40c23c5cfcd61b2f49172e7696c7e5a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22681, "upload_time": "2016-10-15T22:30:13", "upload_time_iso_8601": "2016-10-15T22:30:13.424656Z", "url": "https://files.pythonhosted.org/packages/14/7b/78e535b01bd13fc3be3703f4c4c5be2484ff4fca817398d6ee1e344013de/restkiss-2.0.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c40c23c5cfcd61b2f49172e7696c7e5a", "sha256": "fae21c0cc3cbc4f3854d2d1c7217a70e25245db8e124bfd72c8fbd689e6b50b3"}, "downloads": -1, "filename": "restkiss-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c40c23c5cfcd61b2f49172e7696c7e5a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22681, "upload_time": "2016-10-15T22:30:13", "upload_time_iso_8601": "2016-10-15T22:30:13.424656Z", "url": "https://files.pythonhosted.org/packages/14/7b/78e535b01bd13fc3be3703f4c4c5be2484ff4fca817398d6ee1e344013de/restkiss-2.0.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:03:36 2020"}