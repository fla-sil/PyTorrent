{"info": {"author": "Marcel Hellkamp", "author_email": "marc@gsites.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"], "description": "Pycopine - Handle with Care\n===========================\n\nPycopine is a latency and fault tolerance library designed to isolate points of\naccess to remote systems, services and 3rd party libraries, stop cascading\nfailure and enable resilience in complex distributed systems where failure\nis inevitable.\n\nAs this copy-pasted text suggests, pycopine is heavily inspired by\n`Hystrix <https://github.com/Netflix/Hystrix>`_. \n\nPrerequisites\n-------------\n\nPycopine requires Python 3.2+, but may be backportet to 2.7 in the future.\n\nInstallation\n------------\n\nPycopine is not released yet.\n\n(Planned) Features\n------------------\n\n* Detect and report failing services.\n* Short-circuit services that fail on high load to help them recover.\n* Monitor failure rates and performance metrics to detect bottlenecks.\n* Manage thread pool and queue sizes on demand, at runtime, from everywhere.\n* ... (more to come)\n\nExample\n-------\n\nLets say we want to speak to a remote service that is slow, unreliable or both:\n\n.. code-block:: python\n\n    import time\n    import random\n    \n    def crappy_service(input):\n        ''' The most useless piece of code ever.'''\n        time.sleep(5)\n        if 'OK' != random.choice(['OK', 'OK', 'f**ck']):\n            raise RuntimeError('We broke something.')\n        return input\n\nYou could throw lots of threads and try/except clauses at the problem and hope\nto not break the internet. Or you could use pycopine:\n\n.. code-block:: python\n\n    from pycopine import Command\n    \n    class MyCommand(Command):\n        ''' Does nothing with the input, but with style. '''\n    \n        def run(self, input):\n            return crappy_service(input)\n\n        def fallback(self, input):\n            return input\n    \n    # Run and wait for the result\n    result = MyCommand('input').result()\n    \n    # Give up after 2 seconds\n    result = MyCommand('input').result(timeout=2)\n    \n    # Fire and forget\n    MyCommand('input').submit()\n    \n    # Do stuff in parallel\n    foo = MyCommand('input_a').submit()\n    bar = MyCommand('input_b').submit()\n    results = [foo.result(), bar.result()]\n    \n    # Change your mind midway through\n    foobar = MyCommand('input').submit()\n    if foobar.wait(timeout=2):\n        result = foobar.reault()\n    else:\n        foobar.cancel(RuntimeError('No time for this sh**t'))\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/pypi/pycopine/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/defnull/pycopine", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pycopine", "package_url": "https://pypi.org/project/pycopine/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pycopine/", "project_urls": {"Download": "http://pypi.python.org/pypi/pycopine/", "Homepage": "https://github.com/defnull/pycopine"}, "release_url": "https://pypi.org/project/pycopine/0.1.dev1/", "requires_dist": null, "requires_python": null, "summary": "Latency and fault tolerance library inspired by Hystrix.", "version": "0.1.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pycopine is a latency and fault tolerance library designed to isolate points of\naccess to remote systems, services and 3rd party libraries, stop cascading\nfailure and enable resilience in complex distributed systems where failure\nis inevitable.</p>\n<p>As this copy-pasted text suggests, pycopine is heavily inspired by\n<a href=\"https://github.com/Netflix/Hystrix\" rel=\"nofollow\">Hystrix</a>.</p>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>Pycopine requires Python 3.2+, but may be backportet to 2.7 in the future.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Pycopine is not released yet.</p>\n</div>\n<div id=\"planned-features\">\n<h2>(Planned) Features</h2>\n<ul>\n<li>Detect and report failing services.</li>\n<li>Short-circuit services that fail on high load to help them recover.</li>\n<li>Monitor failure rates and performance metrics to detect bottlenecks.</li>\n<li>Manage thread pool and queue sizes on demand, at runtime, from everywhere.</li>\n<li>\u2026 (more to come)</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Lets say we want to speak to a remote service that is slow, unreliable or both:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">crappy_service</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">):</span>\n    <span class=\"sd\">''' The most useless piece of code ever.'''</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"s1\">'OK'</span> <span class=\"o\">!=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"s1\">'OK'</span><span class=\"p\">,</span> <span class=\"s1\">'OK'</span><span class=\"p\">,</span> <span class=\"s1\">'f**ck'</span><span class=\"p\">]):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'We broke something.'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">input</span>\n</pre>\n<p>You could throw lots of threads and try/except clauses at the problem and hope\nto not break the internet. Or you could use pycopine:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycopine</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCommand</span><span class=\"p\">(</span><span class=\"n\">Command</span><span class=\"p\">):</span>\n    <span class=\"sd\">''' Does nothing with the input, but with style. '''</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">crappy_service</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fallback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">input</span>\n\n<span class=\"c1\"># Run and wait for the result</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">MyCommand</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Give up after 2 seconds</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">MyCommand</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fire and forget</span>\n<span class=\"n\">MyCommand</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Do stuff in parallel</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">MyCommand</span><span class=\"p\">(</span><span class=\"s1\">'input_a'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">()</span>\n<span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">MyCommand</span><span class=\"p\">(</span><span class=\"s1\">'input_b'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">()</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">(),</span> <span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()]</span>\n\n<span class=\"c1\"># Change your mind midway through</span>\n<span class=\"n\">foobar</span> <span class=\"o\">=</span> <span class=\"n\">MyCommand</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">reault</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'No time for this sh**t'</span><span class=\"p\">))</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 663290, "releases": {"0.1.dev1": [{"comment_text": "", "digests": {"md5": "be5f55087eba33fc51164b6b3e41c3c7", "sha256": "622d9648f9a53ad278b68bf37006bddee404b81fde1df280ba2ce4f1f01d0de2"}, "downloads": -1, "filename": "pycopine-0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "be5f55087eba33fc51164b6b3e41c3c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8098, "upload_time": "2013-05-16T20:57:42", "upload_time_iso_8601": "2013-05-16T20:57:42.134442Z", "url": "https://files.pythonhosted.org/packages/72/7e/b55d00dc206c446c6559e6da14a37e179f015086445430ad536110ee156f/pycopine-0.1.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be5f55087eba33fc51164b6b3e41c3c7", "sha256": "622d9648f9a53ad278b68bf37006bddee404b81fde1df280ba2ce4f1f01d0de2"}, "downloads": -1, "filename": "pycopine-0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "be5f55087eba33fc51164b6b3e41c3c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8098, "upload_time": "2013-05-16T20:57:42", "upload_time_iso_8601": "2013-05-16T20:57:42.134442Z", "url": "https://files.pythonhosted.org/packages/72/7e/b55d00dc206c446c6559e6da14a37e179f015086445430ad536110ee156f/pycopine-0.1.dev1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:03 2020"}