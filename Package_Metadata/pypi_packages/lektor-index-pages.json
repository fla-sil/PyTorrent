{"info": {"author": "Jeff Dairiki", "author_email": "dairiki@dairiki.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Plugins", "Environment :: Web Environment", "Framework :: Lektor", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Text Processing :: Indexing"], "description": "# Lektor Index Pages Plugin\n\n[![PyPI version](https://img.shields.io/pypi/v/lektor-index-pages.svg)](https://pypi.org/project/lektor-index-pages/)\n[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/lektor-index-pages.svg)](https://pypi.python.org/pypi/lektor-index-pages/)\n[![GitHub license](https://img.shields.io/github/license/dairiki/lektor-index-pages)](https://github.com/dairiki/lektor-index-pages/blob/master/LICENSE)\n[![GitHub Actions (Tests)](https://github.com/dairiki/lektor-index-pages/workflows/Tests/badge.svg)](https://github.com/dairiki/lektor-index-pages)\n\n\nThis [Lektor][] plugin can be used to generate \u201cindex pages\u201d for a\nblog or similar collection of pages.  These index pages list the blog posts\nsegregated by some key, with each index page containing only those posts\nwhich match that key.\n\nExamples of what this can be used for include:\n\n- *Category Indexes*: A set of index pages, one for each category,\n  which lists all the posts in that category.  (Multi-valued index keys\n  are also supported, so that each post can appear on more than a single\n  index page: e.g. *keyword indexes*.)\n\n- *Date Indexes*: A set of index pages, one for each year (say), which\n  list all the posts in that year.  (Sub-indexes are supported\n  subindexes \u2014 e.g., each year index may have as children a sequence\n  of month indexes.)\n\nBehind the scenes, judicious caching of indexing results, and careful\ncontrol of Lektor\u2019s dependency tracking prevent all this from slowing\nthe build process down too excruciatingly much.\n\n[lektor]: <https://www.getlektor.com/> \"Lektor Static Content Management System\"\n\n## Installation\n\nAdd `lektor-index-pages` to your project from command line:\n\n```\nlektor plugins add lektor-index-pages\n```\n\nSee [the Lektor plugin documentation][plugins] for more information.\n\n[plugins]: <https://www.getlektor.com/docs/plugins/>\n\n## Configuration\n\nThis plugin is configured via a configuration file named\n`index-pages.ini` in the [`configs` subdirectory][configs] of\nthe Lektor tree.\n\n[configs]: <https://www.getlektor.com/docs/plugins/howto/#configure-plugins>\n        (Lektor Plugin Configuration Documentation)\n\n### Top-Level Indexes\n\nEach section in the config file which has a non-dotted section name and which\nincludes a setting for the `keys` key defines a top-level index.  The index is\nnamed after the section name.\n\nRecognized keys:\n\n#### parent_path\n\nThe lektor [path][] of the record under which the index virtual source\nobjects will be created.  This defaults to \u201c`/`\u201d.\n\n[path]: <https://www.getlektor.com/docs/content/paths/>\n        (Lektor Documentation on Paths)\n\n#### items\n\nA jinja-evaluated expression which specifies the\n[query][] used to determine which records are to be indexed.\nIt defaults to `<parent>.children`, where `<parent>` is the record specified by\nthe `parent_path` key (see above.)\n\n[query]: <https://www.getlektor.com/docs/api/db/query/>\n\n#### keys\n\n**Required**.\nThis key defines the index key(s).\nIt is a jinja-evaluated expression which is evaluated in a context with `this`\nset to the record to be indexed.  This expression should evaluate\neither to a single string, or, for multi-valued keys to a sequence of\nstrings.\n\n#### template\n\nThe names of the the Jinja template used to generate each index page.\nDefaults to `index-pages.html`.\n\n#### slug_format\n\nSpecifies the URL slug to be used for the index pages in this index.\nThis is a jinja-evaluated expression evaulated in a context with `this` set\nto the index page virtual source object.\nThe default is `this._id`.\n\n#### subindex\n\nTo declare a sub-index, this key is set to the name of the sub-index.\nThe sub-index must be configured in its own config section (see below.) \n\n### Fields\n\nThere may be an additional section in the config file for each index named\n`[<index-name>.fields]` which can be used to define fields which will be\nmade available on the index virtual source objects.\n\nEach key in the *fields* config section defines a field of the same name.\nThe value of the key is a jinja-evaluated expression which is evaluated with `this`\nset to the index virtual source object.\n\n### Pagination\n\nPagination settings may be placed in the `[pagination]` config\nsection, on in the `[<index-name>.pagination]` config section.  The\nsettings in the `[pagination]` section apply to all indexes \u2014 settings\nin the `[<index-name>.pagination]` section are, not surprisingly,\nspecific to the named index (and any sub-index of that index.)\n(Pagination configuration specific to a sub-index may be placed in\nthe `[<index-name>.<sub-index-name>.pagination]` section.)\n\nThe keys recognized in this section are `enabled`, `per_page`, and\n`url_suffix`.  These work the same as the like-named keys for\n[Lektor\u2019s built-in pagination system][pagination], with the exception\nthat the `items` key is not supported.\n\n[pagination]: <https://www.getlektor.com/docs/models/children/#pagination>\n\n\n### Sub-Indexes\n\nSubindexes are configured in a section named `[<index-name>.<subindex-name>]`.\n\nThe only keys supported in the sub-index config section are `keys`,\n`template`, `slug_format`, and (to declare a sub-sub-index) `subindex`.\nThese have the same meanings as they do for a top-level index.\n\n## Virtual Source Objects\n\nThe index pages are generated as [virtual source objects][virtual].\n\n### The Index Roots\n\nEach top-level index will have a root virtual source.  These have\n[Lektor path][path]s like `<parent>@index-pages/<index-name>`.  These\ndo not generate any artifacts.  For the most part, they have one\nuseful attribute, `subindexes` which contains a Lektor Query instance\ncontaining the individual index pages for the index.\n\nThe ordering of the index pages in `subindexes` preserves the ordering\ndefined of the indexes `items` setting.  I.e. the `items` are iterated\nthrough; the `keys` are computed for each item in order; the first key\nencountered will be listed first in `subindexes`, the second key\nencountered will be listed second, etc.\n\n[virtual]: <https://www.getlektor.com/docs/api/db/obj/#virtual-source-objects>\n        (Lektor Documentation on Virtual Source Objects)\n\n\n### The Index Pages\n\nThe items in the root index\u2019s `attributes` query live at [path][]s like\n`<parent>@index-pages/<index-name>/<key>`, where `<key>` is the index\nkey for the page.\n\nUseful fields on the index page include `_id`, which is equal to the index\nkey for the page, as well as any custom fields configured in the `[<index-name>.fields]` section of `index-pages.ini`.\n\nUseful attributes on the index page virtual source objects include:\n\n#### children\n\nThe records in the configured `items` for the query that match this\nindex page\u2019s *key*.\n\n#### pagination\n\n(Only If pagination is configured for the index.) This works just like\nthe regular Lektor [pagination object][pagination].  E.g. the children\nfor this current page are available in `pagination.items`.\n\n[pagination]: <https://www.getlektor.com/docs/guides/pagination/#rendering-a-pagination>\n\n#### subindexes\n\nIf a sub-index is configured on this index, `subindexes` will contain\na query containing the sub-index pages.  The sub-index virtual sources\nwill have [path][]s like\n`<parent>@index-pages/<index-name>/<key>/<subindex-key>`.\n\n## Template API\n\nThis plugin inserts a template global function `index_pages` which can\nbe used to access the index pages for an index. \n\n`index_pages(index_name, alt=PRIMARY_ALT)`\n\nFIXME: more detail\n\n----\n\n## Examples\n\n### \u201cSimple\u201d Example: A Category Index\n\nLet\u2019s assume your blog posts already include a string-valued `category`\nfield in their [datamodel][], and the blog posts live under the blog\nat Lektor path `/blog`. A category index could be generated with the following\nconfiguration in `configs/index-pages.ini`.\n\n[datamodel]: <https://www.getlektor.com/docs/models/> \"Lektor Data Model Documentation\"\n\n```ini\n[category]\n\n# index page are rooted at /\nparent_path = /\n\n# the blog children are what is indexed\nitems = site.get('/blog').children\n\n# the category of each post is what is being indexed\nkeys = this.category\n\n# the index pages will be placed at URL path /category/<category>/\nslug_format = 'category/{}'.format(this._id)\n\n# this template will be rendered, once for each category to generate the indexes\ntemplate = category-index.html\n\n[category.fields]\n# Define the `category` field of the index pages to be an alias for the index `id`\n# (which is the key for the index page \u2014 in this case the category.)\ncategory = this._id\n```\n\nThe index template, in this case `category-index.html`, might look like:\n\n```html+jinja\n{% extends \"layout.html\" %}\n{% block body %}\n  <h1>Category {{ this.category }}</h1>\n  <p>Posts in this category:</p>\n  <ul>\n    {% for post in this.children %}\n      <li><a href=\"{post|url}\">{{ post.title }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}\n```\n\nIn the template for the blog parent page (at `/blog`) one could do something\nlike this to link to the category index pages:\n\n```html+jinja\n{% extends \"layout.html\" %}\n{% block body %}\n  <h1>The Blog!</h1>\n  <p>Categories in this blog</p>\n  <ul>\n    {% for cat_idx in index_pages('category') %}\n      <li><a href=\"{cat_idx|url}\">{{ cat_idx.category }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}\n```\n\n### A Hairier Example: Date Index by Year then Month\n\nIn `configs/index-pages.ini`:\n\n```ini\n[date]\nparent_path = /blog\nkeys = '{.year:04d}'.format(this.pub_date)\ntemplate = blog-year-index.html\nsubindex = month\n\n[date.fields]\ndate = this.children.first().pub_date.replace(month=1, day=1)\nyear = this._id|int\n\n[date.month]\nkeys = '{.month:02d}'.format(this.pub_date)\ntemplate = blog-month-index.html\n\n[date.month.fields]\n# this.parent is the year-index page this month-index belongs to.\ndate = this.parent.date.replace(month=this._id|int)\nyear = this.parent.year\nmonth = this._id|int\n```\n\nThis will create year-index pages at URL path `/blog/<yyyy>/` and\nmonth-indexes at `/blog/<yyyy>/<mm>/`.  Note that if the blog-post\nchildren.slug_format for the blog is set to something like\n`{.year:04d}/{.month:02d}/{._id}'.format(this)`, then the individual\nblog posts will be placed at `/blog/<yyyy>/<mm>/<post-id>/` which will\njibe nicely with the index URL layout.\n\n\n## Author\n\nJeff Dairiki <dairiki@dairiki.org>\n\n## Changelog\n\n### 0.1a2 \u2014 2020-05-06\n\n#### API changes\n\n- Drop the `record` argument from the (jinja) global `index_pages` function.\n  (Since indexes can not have multiple parents, it is not necessary.)\n\n- The `parent` configuration key has been renamed to `parent_path`.\n\n- The `slug` configuration key has been renamed to `slug_format`.\n\n- The `attributes` config section has been renamed to `fields`.\n\n  Though they are not quite like regular Lektor Record fields, they\n  are more field-like than attribute-like.  (I.e. access is via\n  *__getitem__* rather than *getattr*.)\n\n### 0.1a1 \u2014 2020-05-05\n\nInitial release.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dairiki/lektor-index-pages", "keywords": "Lektor plugin,blog index", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lektor-index-pages", "package_url": "https://pypi.org/project/lektor-index-pages/", "platform": "", "project_url": "https://pypi.org/project/lektor-index-pages/", "project_urls": {"Homepage": "https://github.com/dairiki/lektor-index-pages"}, "release_url": "https://pypi.org/project/lektor-index-pages/0.1a2/", "requires_dist": ["more-itertools", "lektorlib"], "requires_python": "", "summary": "Lektor plugin to generate blog-like index pages", "version": "0.1a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Lektor Index Pages Plugin</h1>\n<p><a href=\"https://pypi.org/project/lektor-index-pages/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb640aba71de0ae4a13f7ccdcf89a8010f02202b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c656b746f722d696e6465782d70616765732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/lektor-index-pages/\" rel=\"nofollow\"><img alt=\"PyPI Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ca5046523fca48aa3331503b3d1c10979b279b3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6c656b746f722d696e6465782d70616765732e737667\"></a>\n<a href=\"https://github.com/dairiki/lektor-index-pages/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bcae34576c67fcc424521f0510cee2073356746/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f64616972696b692f6c656b746f722d696e6465782d7061676573\"></a>\n<a href=\"https://github.com/dairiki/lektor-index-pages\" rel=\"nofollow\"><img alt=\"GitHub Actions (Tests)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d77a503b19ad53f7b83bb2d59b13bcf61d6f40b/68747470733a2f2f6769746875622e636f6d2f64616972696b692f6c656b746f722d696e6465782d70616765732f776f726b666c6f77732f54657374732f62616467652e737667\"></a></p>\n<p>This <a href=\"https://www.getlektor.com/\" rel=\"nofollow\" title=\"Lektor Static Content Management System\">Lektor</a> plugin can be used to generate \u201cindex pages\u201d for a\nblog or similar collection of pages.  These index pages list the blog posts\nsegregated by some key, with each index page containing only those posts\nwhich match that key.</p>\n<p>Examples of what this can be used for include:</p>\n<ul>\n<li>\n<p><em>Category Indexes</em>: A set of index pages, one for each category,\nwhich lists all the posts in that category.  (Multi-valued index keys\nare also supported, so that each post can appear on more than a single\nindex page: e.g. <em>keyword indexes</em>.)</p>\n</li>\n<li>\n<p><em>Date Indexes</em>: A set of index pages, one for each year (say), which\nlist all the posts in that year.  (Sub-indexes are supported\nsubindexes \u2014 e.g., each year index may have as children a sequence\nof month indexes.)</p>\n</li>\n</ul>\n<p>Behind the scenes, judicious caching of indexing results, and careful\ncontrol of Lektor\u2019s dependency tracking prevent all this from slowing\nthe build process down too excruciatingly much.</p>\n<h2>Installation</h2>\n<p>Add <code>lektor-index-pages</code> to your project from command line:</p>\n<pre><code>lektor plugins add lektor-index-pages\n</code></pre>\n<p>See <a href=\"https://www.getlektor.com/docs/plugins/\" rel=\"nofollow\">the Lektor plugin documentation</a> for more information.</p>\n<h2>Configuration</h2>\n<p>This plugin is configured via a configuration file named\n<code>index-pages.ini</code> in the <a href=\"https://www.getlektor.com/docs/plugins/howto/#configure-plugins\" rel=\"nofollow\" title=\"Lektor Plugin Configuration Documentation\"><code>configs</code> subdirectory</a> of\nthe Lektor tree.</p>\n<h3>Top-Level Indexes</h3>\n<p>Each section in the config file which has a non-dotted section name and which\nincludes a setting for the <code>keys</code> key defines a top-level index.  The index is\nnamed after the section name.</p>\n<p>Recognized keys:</p>\n<h4>parent_path</h4>\n<p>The lektor <a href=\"https://www.getlektor.com/docs/content/paths/\" rel=\"nofollow\" title=\"Lektor Documentation on Paths\">path</a> of the record under which the index virtual source\nobjects will be created.  This defaults to \u201c<code>/</code>\u201d.</p>\n<h4>items</h4>\n<p>A jinja-evaluated expression which specifies the\n<a href=\"https://www.getlektor.com/docs/api/db/query/\" rel=\"nofollow\">query</a> used to determine which records are to be indexed.\nIt defaults to <code>&lt;parent&gt;.children</code>, where <code>&lt;parent&gt;</code> is the record specified by\nthe <code>parent_path</code> key (see above.)</p>\n<h4>keys</h4>\n<p><strong>Required</strong>.\nThis key defines the index key(s).\nIt is a jinja-evaluated expression which is evaluated in a context with <code>this</code>\nset to the record to be indexed.  This expression should evaluate\neither to a single string, or, for multi-valued keys to a sequence of\nstrings.</p>\n<h4>template</h4>\n<p>The names of the the Jinja template used to generate each index page.\nDefaults to <code>index-pages.html</code>.</p>\n<h4>slug_format</h4>\n<p>Specifies the URL slug to be used for the index pages in this index.\nThis is a jinja-evaluated expression evaulated in a context with <code>this</code> set\nto the index page virtual source object.\nThe default is <code>this._id</code>.</p>\n<h4>subindex</h4>\n<p>To declare a sub-index, this key is set to the name of the sub-index.\nThe sub-index must be configured in its own config section (see below.)</p>\n<h3>Fields</h3>\n<p>There may be an additional section in the config file for each index named\n<code>[&lt;index-name&gt;.fields]</code> which can be used to define fields which will be\nmade available on the index virtual source objects.</p>\n<p>Each key in the <em>fields</em> config section defines a field of the same name.\nThe value of the key is a jinja-evaluated expression which is evaluated with <code>this</code>\nset to the index virtual source object.</p>\n<h3>Pagination</h3>\n<p>Pagination settings may be placed in the <code>[pagination]</code> config\nsection, on in the <code>[&lt;index-name&gt;.pagination]</code> config section.  The\nsettings in the <code>[pagination]</code> section apply to all indexes \u2014 settings\nin the <code>[&lt;index-name&gt;.pagination]</code> section are, not surprisingly,\nspecific to the named index (and any sub-index of that index.)\n(Pagination configuration specific to a sub-index may be placed in\nthe <code>[&lt;index-name&gt;.&lt;sub-index-name&gt;.pagination]</code> section.)</p>\n<p>The keys recognized in this section are <code>enabled</code>, <code>per_page</code>, and\n<code>url_suffix</code>.  These work the same as the like-named keys for\n<a href=\"https://www.getlektor.com/docs/models/children/#pagination\" rel=\"nofollow\">Lektor\u2019s built-in pagination system</a>, with the exception\nthat the <code>items</code> key is not supported.</p>\n<h3>Sub-Indexes</h3>\n<p>Subindexes are configured in a section named <code>[&lt;index-name&gt;.&lt;subindex-name&gt;]</code>.</p>\n<p>The only keys supported in the sub-index config section are <code>keys</code>,\n<code>template</code>, <code>slug_format</code>, and (to declare a sub-sub-index) <code>subindex</code>.\nThese have the same meanings as they do for a top-level index.</p>\n<h2>Virtual Source Objects</h2>\n<p>The index pages are generated as <a href=\"https://www.getlektor.com/docs/api/db/obj/#virtual-source-objects\" rel=\"nofollow\" title=\"Lektor Documentation on Virtual Source Objects\">virtual source objects</a>.</p>\n<h3>The Index Roots</h3>\n<p>Each top-level index will have a root virtual source.  These have\n<a href=\"https://www.getlektor.com/docs/content/paths/\" rel=\"nofollow\" title=\"Lektor Documentation on Paths\">Lektor path</a>s like <code>&lt;parent&gt;@index-pages/&lt;index-name&gt;</code>.  These\ndo not generate any artifacts.  For the most part, they have one\nuseful attribute, <code>subindexes</code> which contains a Lektor Query instance\ncontaining the individual index pages for the index.</p>\n<p>The ordering of the index pages in <code>subindexes</code> preserves the ordering\ndefined of the indexes <code>items</code> setting.  I.e. the <code>items</code> are iterated\nthrough; the <code>keys</code> are computed for each item in order; the first key\nencountered will be listed first in <code>subindexes</code>, the second key\nencountered will be listed second, etc.</p>\n<h3>The Index Pages</h3>\n<p>The items in the root index\u2019s <code>attributes</code> query live at <a href=\"https://www.getlektor.com/docs/content/paths/\" rel=\"nofollow\" title=\"Lektor Documentation on Paths\">path</a>s like\n<code>&lt;parent&gt;@index-pages/&lt;index-name&gt;/&lt;key&gt;</code>, where <code>&lt;key&gt;</code> is the index\nkey for the page.</p>\n<p>Useful fields on the index page include <code>_id</code>, which is equal to the index\nkey for the page, as well as any custom fields configured in the <code>[&lt;index-name&gt;.fields]</code> section of <code>index-pages.ini</code>.</p>\n<p>Useful attributes on the index page virtual source objects include:</p>\n<h4>children</h4>\n<p>The records in the configured <code>items</code> for the query that match this\nindex page\u2019s <em>key</em>.</p>\n<h4>pagination</h4>\n<p>(Only If pagination is configured for the index.) This works just like\nthe regular Lektor <a href=\"https://www.getlektor.com/docs/models/children/#pagination\" rel=\"nofollow\">pagination object</a>.  E.g. the children\nfor this current page are available in <code>pagination.items</code>.</p>\n<h4>subindexes</h4>\n<p>If a sub-index is configured on this index, <code>subindexes</code> will contain\na query containing the sub-index pages.  The sub-index virtual sources\nwill have <a href=\"https://www.getlektor.com/docs/content/paths/\" rel=\"nofollow\" title=\"Lektor Documentation on Paths\">path</a>s like\n<code>&lt;parent&gt;@index-pages/&lt;index-name&gt;/&lt;key&gt;/&lt;subindex-key&gt;</code>.</p>\n<h2>Template API</h2>\n<p>This plugin inserts a template global function <code>index_pages</code> which can\nbe used to access the index pages for an index.</p>\n<p><code>index_pages(index_name, alt=PRIMARY_ALT)</code></p>\n<p>FIXME: more detail</p>\n<hr>\n<h2>Examples</h2>\n<h3>\u201cSimple\u201d Example: A Category Index</h3>\n<p>Let\u2019s assume your blog posts already include a string-valued <code>category</code>\nfield in their <a href=\"https://www.getlektor.com/docs/models/\" rel=\"nofollow\" title=\"Lektor Data Model Documentation\">datamodel</a>, and the blog posts live under the blog\nat Lektor path <code>/blog</code>. A category index could be generated with the following\nconfiguration in <code>configs/index-pages.ini</code>.</p>\n<pre><span class=\"k\">[category]</span>\n\n<span class=\"c1\"># index page are rooted at /</span>\n<span class=\"na\">parent_path</span> <span class=\"o\">=</span> <span class=\"s\">/</span>\n\n<span class=\"c1\"># the blog children are what is indexed</span>\n<span class=\"na\">items</span> <span class=\"o\">=</span> <span class=\"s\">site.get('/blog').children</span>\n\n<span class=\"c1\"># the category of each post is what is being indexed</span>\n<span class=\"na\">keys</span> <span class=\"o\">=</span> <span class=\"s\">this.category</span>\n\n<span class=\"c1\"># the index pages will be placed at URL path /category/&lt;category&gt;/</span>\n<span class=\"na\">slug_format</span> <span class=\"o\">=</span> <span class=\"s\">'category/{}'.format(this._id)</span>\n\n<span class=\"c1\"># this template will be rendered, once for each category to generate the indexes</span>\n<span class=\"na\">template</span> <span class=\"o\">=</span> <span class=\"s\">category-index.html</span>\n\n<span class=\"k\">[category.fields]</span>\n<span class=\"c1\"># Define the `category` field of the index pages to be an alias for the index `id`</span>\n<span class=\"c1\"># (which is the key for the index page \u2014 in this case the category.)</span>\n<span class=\"na\">category</span> <span class=\"o\">=</span> <span class=\"s\">this._id</span>\n</pre>\n<p>The index template, in this case <code>category-index.html</code>, might look like:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">\"layout.html\"</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">body</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Category <span class=\"cp\">{{</span> <span class=\"nv\">this.category</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Posts in this category:<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">post</span> <span class=\"k\">in</span> <span class=\"nv\">this.children</span> <span class=\"cp\">%}</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{post|url}\"</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">post.title</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre>\n<p>In the template for the blog parent page (at <code>/blog</code>) one could do something\nlike this to link to the category index pages:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">\"layout.html\"</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">body</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>The Blog!<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Categories in this blog<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">cat_idx</span> <span class=\"k\">in</span> <span class=\"nv\">index_pages</span><span class=\"o\">(</span><span class=\"s1\">'category'</span><span class=\"o\">)</span> <span class=\"cp\">%}</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{cat_idx|url}\"</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">cat_idx.category</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre>\n<h3>A Hairier Example: Date Index by Year then Month</h3>\n<p>In <code>configs/index-pages.ini</code>:</p>\n<pre><span class=\"k\">[date]</span>\n<span class=\"na\">parent_path</span> <span class=\"o\">=</span> <span class=\"s\">/blog</span>\n<span class=\"na\">keys</span> <span class=\"o\">=</span> <span class=\"s\">'{.year:04d}'.format(this.pub_date)</span>\n<span class=\"na\">template</span> <span class=\"o\">=</span> <span class=\"s\">blog-year-index.html</span>\n<span class=\"na\">subindex</span> <span class=\"o\">=</span> <span class=\"s\">month</span>\n\n<span class=\"k\">[date.fields]</span>\n<span class=\"na\">date</span> <span class=\"o\">=</span> <span class=\"s\">this.children.first().pub_date.replace(month=1, day=1)</span>\n<span class=\"na\">year</span> <span class=\"o\">=</span> <span class=\"s\">this._id|int</span>\n\n<span class=\"k\">[date.month]</span>\n<span class=\"na\">keys</span> <span class=\"o\">=</span> <span class=\"s\">'{.month:02d}'.format(this.pub_date)</span>\n<span class=\"na\">template</span> <span class=\"o\">=</span> <span class=\"s\">blog-month-index.html</span>\n\n<span class=\"k\">[date.month.fields]</span>\n<span class=\"c1\"># this.parent is the year-index page this month-index belongs to.</span>\n<span class=\"na\">date</span> <span class=\"o\">=</span> <span class=\"s\">this.parent.date.replace(month=this._id|int)</span>\n<span class=\"na\">year</span> <span class=\"o\">=</span> <span class=\"s\">this.parent.year</span>\n<span class=\"na\">month</span> <span class=\"o\">=</span> <span class=\"s\">this._id|int</span>\n</pre>\n<p>This will create year-index pages at URL path <code>/blog/&lt;yyyy&gt;/</code> and\nmonth-indexes at <code>/blog/&lt;yyyy&gt;/&lt;mm&gt;/</code>.  Note that if the blog-post\nchildren.slug_format for the blog is set to something like\n<code>{.year:04d}/{.month:02d}/{._id}'.format(this)</code>, then the individual\nblog posts will be placed at <code>/blog/&lt;yyyy&gt;/&lt;mm&gt;/&lt;post-id&gt;/</code> which will\njibe nicely with the index URL layout.</p>\n<h2>Author</h2>\n<p>Jeff Dairiki <a href=\"mailto:dairiki@dairiki.org\">dairiki@dairiki.org</a></p>\n<h2>Changelog</h2>\n<h3>0.1a2 \u2014 2020-05-06</h3>\n<h4>API changes</h4>\n<ul>\n<li>\n<p>Drop the <code>record</code> argument from the (jinja) global <code>index_pages</code> function.\n(Since indexes can not have multiple parents, it is not necessary.)</p>\n</li>\n<li>\n<p>The <code>parent</code> configuration key has been renamed to <code>parent_path</code>.</p>\n</li>\n<li>\n<p>The <code>slug</code> configuration key has been renamed to <code>slug_format</code>.</p>\n</li>\n<li>\n<p>The <code>attributes</code> config section has been renamed to <code>fields</code>.</p>\n<p>Though they are not quite like regular Lektor Record fields, they\nare more field-like than attribute-like.  (I.e. access is via\n<em><strong>getitem</strong></em> rather than <em>getattr</em>.)</p>\n</li>\n</ul>\n<h3>0.1a1 \u2014 2020-05-05</h3>\n<p>Initial release.</p>\n\n          </div>"}, "last_serial": 7183364, "releases": {"0.1a1": [{"comment_text": "", "digests": {"md5": "5cd7b88227f753a399e2d7191a1c7b1b", "sha256": "412c6f1fc41f01f5f581fe7a46d299f0860748e3a60c310eb615bbf831ea3fd9"}, "downloads": -1, "filename": "lektor_index_pages-0.1a1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "5cd7b88227f753a399e2d7191a1c7b1b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15179, "upload_time": "2020-05-06T04:21:53", "upload_time_iso_8601": "2020-05-06T04:21:53.218811Z", "url": "https://files.pythonhosted.org/packages/c2/dd/3d4423bddddb30feefc529c24125a284f591ba8d6a21225dbe7fe85cf04d/lektor_index_pages-0.1a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08c79191338660462448d7b6f9f3468b", "sha256": "87ad124df7c454d676beaa8c60090965eb453895112b15e4ddfd947cf1574280"}, "downloads": -1, "filename": "lektor-index-pages-0.1a1.tar.gz", "has_sig": true, "md5_digest": "08c79191338660462448d7b6f9f3468b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28701, "upload_time": "2020-05-06T04:21:55", "upload_time_iso_8601": "2020-05-06T04:21:55.502658Z", "url": "https://files.pythonhosted.org/packages/33/ae/20b51a55eb9f945c4fb37136520af9e2d94b53ba32cb57961c066545f01c/lektor-index-pages-0.1a1.tar.gz", "yanked": false}], "0.1a2": [{"comment_text": "", "digests": {"md5": "8ca52c2919be697495793d0cee61bef4", "sha256": "473899acc096ac852453f8c9dbc423ddd9d1e2e74a548e95531960d4bc2a8026"}, "downloads": -1, "filename": "lektor_index_pages-0.1a2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8ca52c2919be697495793d0cee61bef4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16994, "upload_time": "2020-05-06T20:34:22", "upload_time_iso_8601": "2020-05-06T20:34:22.906366Z", "url": "https://files.pythonhosted.org/packages/44/7b/ac01d4910ecec453b16f291d845eb07221a4f3e84ad4501cb8cae12dfe1b/lektor_index_pages-0.1a2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08b0b23e9ffcd60f014806e1b47ebe70", "sha256": "c3be8a9ce755a506e1d6f4161ac54eb5688546a6b91f0b1889a355bb3229fc85"}, "downloads": -1, "filename": "lektor-index-pages-0.1a2.tar.gz", "has_sig": true, "md5_digest": "08b0b23e9ffcd60f014806e1b47ebe70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32863, "upload_time": "2020-05-06T20:34:24", "upload_time_iso_8601": "2020-05-06T20:34:24.411676Z", "url": "https://files.pythonhosted.org/packages/9a/76/6c527b6775ba307f4fc1e8682b9333c35db9be95338932aaf84590160d17/lektor-index-pages-0.1a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ca52c2919be697495793d0cee61bef4", "sha256": "473899acc096ac852453f8c9dbc423ddd9d1e2e74a548e95531960d4bc2a8026"}, "downloads": -1, "filename": "lektor_index_pages-0.1a2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8ca52c2919be697495793d0cee61bef4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16994, "upload_time": "2020-05-06T20:34:22", "upload_time_iso_8601": "2020-05-06T20:34:22.906366Z", "url": "https://files.pythonhosted.org/packages/44/7b/ac01d4910ecec453b16f291d845eb07221a4f3e84ad4501cb8cae12dfe1b/lektor_index_pages-0.1a2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08b0b23e9ffcd60f014806e1b47ebe70", "sha256": "c3be8a9ce755a506e1d6f4161ac54eb5688546a6b91f0b1889a355bb3229fc85"}, "downloads": -1, "filename": "lektor-index-pages-0.1a2.tar.gz", "has_sig": true, "md5_digest": "08b0b23e9ffcd60f014806e1b47ebe70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32863, "upload_time": "2020-05-06T20:34:24", "upload_time_iso_8601": "2020-05-06T20:34:24.411676Z", "url": "https://files.pythonhosted.org/packages/9a/76/6c527b6775ba307f4fc1e8682b9333c35db9be95338932aaf84590160d17/lektor-index-pages-0.1a2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:08 2020"}