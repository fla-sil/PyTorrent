{"info": {"author": "Roger Ineichen and the Zope Community", "author_email": "zope3-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "Macro viewlets are Zope 3 UI components. In particular they allow the developer\nto specify viewlets based on macros instead of entire templates.\n\n.. contents::\n\n==============\nMacro Provider\n==============\n\nThis package provides a ZCML directive which allows you to register a macro\ndefined in a template as a viewlet. Such a macro based viewlet acts 100% the\nsame as a other viewlets. It could be very handy if you want to write a layout\ntemplate in one page template and define selective parts as viewlets without\nadding any additional HTML. Let me show what this will look like:\n\nThe layout/master template can look like this::\n\n  <!DOCTYPE ...>\n  <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"\n        i18n:domain=\"z3c\">\n  <head>\n  <tal:block replace=\"structure provider:ITitle\">\n    <metal:block define-macro=\"title\">\n      <title>The title</title>\n    </metal:block>\n  </tal:block>\n  </head>\n  <body tal:define=\"applicationURL request/getApplicationURL\">\n  <div id=\"content\">\n    <tal:block content=\"structure provider:pagelet\">content</tal:block>\n  </div>\n  </div>\n  </body>\n  </html>\n\nThe tempalte above defines an ITitle provider which contains the definition\nfor a macro within itself. You have to define a viewlet manager within the\nzope.viewlet ZCMl directive which provides ITitle as a viewlet manager.\nAfter that, you can register the template above as a layout template wthin\nthe z3c:layout ZCML directive like this::\n\n  <z3c:layout\n      for=\"*\"\n      layer=\"z3c.skin.pagelet.IPageletBrowserSkin\"\n      template=\"template.pt\"\n      />\n\nThen you can register the macro viewlet for the ITitle viewlet manager\nlike this::\n\n  <z3c:macroViewlet\n      for=\"*\"\n      template=\"template.pt\"\n      macro=\"title\"\n      manager=\"z3c.skin.pagelet.ITitle\"\n      layer=\"z3c.skin.pagelet.IPageletBrowserSkin\"\n      />\n\nAs you can see, the ZCML configuration directive above uses ``title`` as the\nmacro attribute and uses ITitle as the viewlet manager. This will use the\nfollowing part of the template.pt::\n\n  <title>Pagelet skin</title>\n\nand registers it as a viewlet. This viewlet gets rendered in the ITitle\nprovider. As you can see, you can use a complete layout tempalte and use it\nas it is. And here it comes, you can offer an included viewlet manager\nrendering the viewlet which can be overriden for other contexts or views etc.\nYou also can register more than one viewlet for the ITitle viewlet manager.\nWhich of course makes no sense in our special title tag example.\n\nLet's show this in some tests. We'll start by creating a content object that\nis used as a view context later::\n\n  >>> import zope.interface\n  >>> import zope.component\n  >>> from zope.publisher.interfaces.browser import IBrowserView\n  >>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n  >>> class Content(object):\n  ...     zope.interface.implements(zope.interface.Interface)\n\n  >>> content = Content()\n\nWe also create a temp dir for sample templates which will be defined later\nfor testing::\n\n  >>> import os, tempfile\n  >>> temp_dir = tempfile.mkdtemp()\n\nAnd we register a security checker for the MacroViewlet class::\n\n  >>> from zope.configuration.xmlconfig import XMLConfig\n  >>> import zope.app.component\n  >>> import z3c.macroviewlet\n  >>> XMLConfig('meta.zcml', zope.app.component)()\n  >>> XMLConfig('configure.zcml', z3c.macroviewlet)()\n\n\nLayout template\n---------------\n\nWe define a template including a macro definition and using a provider::\n\n  >>> path = os.path.join(temp_dir, 'template.pt')\n  >>> open(path, 'w').write('''\n  ... <html>\n  ... <body>\n  ... <head>\n  ... <tal:block replace=\"structure provider:ITitle\">\n  ...   <metal:block define-macro=\"title\">\n  ...     <title>The title</title>\n  ...   </metal:block>\n  ... </tal:block>\n  ... </head>\n  ... <body tal:define=\"applicationURL request/getApplicationURL\">\n  ...   content\n  ... </body>\n  ... </html>\n  ... ''')\n\nLet's register a view class using the view template::\n\n  >>> import zope.interface\n  >>> from zope.app.pagetemplate import viewpagetemplatefile\n  >>> from zope.publisher.interfaces.browser import IBrowserView\n  >>> class View(object):\n  ...     zope.interface.implements(IBrowserView)\n  ...     def __init__(self, context, request):\n  ...        self.context = context\n  ...        self.request = request\n  ...     def __call__(self):\n  ...         return viewpagetemplatefile.ViewPageTemplateFile(path)(self)\n\nLet's prepare the view::\n\n  >>> from zope.publisher.browser import TestRequest\n  >>> request = TestRequest()\n  >>> view = View(content, request)\n\nLet's define the viewlet manager ``ITitle``::\n\n  >>> from zope.viewlet.interfaces import IViewletManager\n  >>> from zope.viewlet.manager import ViewletManager\n  >>> class ITitle(IViewletManager):\n  ...     \"\"\"Viewlet manager located in the title tag.\"\"\"\n\n  >>> title = ViewletManager('title', ITitle)\n\nLet's register the viewlet manager::\n\n  >>> from zope.viewlet.interfaces import IViewletManager\n  >>> manager = zope.component.provideAdapter(\n  ...     title,\n  ...     (zope.interface.Interface, TestRequest, IBrowserView),\n  ...     IViewletManager,\n  ...     name='ITitle')\n\n\nMacroViewlet\n------------\n\nBefore we register the macro viewlet, we check the rendered page without any\nregistered macro viewlet::\n\n  >>> print view()\n  <html>\n  <body>\n  <head>\n  </head>\n  <body>\n    content\n  </body>\n  </body></html>\n\nAs you can see there is no title rendered. Now we can define the macro\nviewlet...::\n\n  >>> from zope.app.pagetemplate import viewpagetemplatefile\n  >>> from z3c.macroviewlet import zcml\n  >>> macroViewlet = zcml.MacroViewletFactory(path, 'title', 'text/html')\n\nand register them as adapter::\n\n  >>> from zope.viewlet.interfaces import IViewlet\n  >>> zope.component.provideAdapter(\n  ...     macroViewlet,\n  ...     (zope.interface.Interface, IDefaultBrowserLayer, IBrowserView,\n  ...      ITitle),\n  ...     IViewlet,\n  ...     name='title')\n\nNow we are ready to test it again::\n\n  >>> print view()\n  <html>\n  <body>\n  <head>\n      <title>The title</title>\n  </head>\n  <body>\n    content\n  </body>\n  </body></html>\n\nAs you can see, the title gets rendered as a viewlet into the ITitle provider.\n\nCleanup\n-------\n\n  >>> import shutil\n  >>> shutil.rmtree(temp_dir)\n\n\n\n=======\nChanges\n=======\n\n1.1.0 (2010-07-14)\n------------------\n\n- Fixed tests to run with current package versions\n  (``metaconfigure.registerType`` moved from ``zope.app.pagetemplate``\n  to ``zope.browserpage``). Thus requiring ``zope.browserpage`` now.\n\n- No longer use depreacted ``zope.testing.doctest`` and\n  ``zope.testing.doctestunit``.\n\n- Removed ZPKG and ZCML slugs.\n\n- Fixed RST formatting in README.\n\n\n\n1.0.0 (2007-09-21)\n------------------\n\n- Initial Release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.zope.org/z3c.macroviewlet", "keywords": "zope3 template macro viewlet zpt pagetemplate", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "z3c.macroviewlet", "package_url": "https://pypi.org/project/z3c.macroviewlet/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.macroviewlet/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.zope.org/z3c.macroviewlet"}, "release_url": "https://pypi.org/project/z3c.macroviewlet/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "Viewlets based on ZPT macros.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Macro viewlets are Zope 3 UI components. In particular they allow the developer\nto specify viewlets based on macros instead of entire templates.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#macro-provider\" id=\"id3\" rel=\"nofollow\">Macro Provider</a><ul>\n<li><a href=\"#layout-template\" id=\"id4\" rel=\"nofollow\">Layout template</a></li>\n<li><a href=\"#macroviewlet\" id=\"id5\" rel=\"nofollow\">MacroViewlet</a></li>\n<li><a href=\"#cleanup\" id=\"id6\" rel=\"nofollow\">Cleanup</a></li>\n</ul>\n</li>\n<li><a href=\"#changes\" id=\"id7\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#id1\" id=\"id8\" rel=\"nofollow\">1.1.0 (2010-07-14)</a></li>\n<li><a href=\"#id2\" id=\"id9\" rel=\"nofollow\">1.0.0 (2007-09-21)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"macro-provider\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Macro Provider</a></h2>\n<p>This package provides a ZCML directive which allows you to register a macro\ndefined in a template as a viewlet. Such a macro based viewlet acts 100% the\nsame as a other viewlets. It could be very handy if you want to write a layout\ntemplate in one page template and define selective parts as viewlets without\nadding any additional HTML. Let me show what this will look like:</p>\n<p>The layout/master template can look like this:</p>\n<pre>&lt;!DOCTYPE ...&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"\n      i18n:domain=\"z3c\"&gt;\n&lt;head&gt;\n&lt;tal:block replace=\"structure provider:ITitle\"&gt;\n  &lt;metal:block define-macro=\"title\"&gt;\n    &lt;title&gt;The title&lt;/title&gt;\n  &lt;/metal:block&gt;\n&lt;/tal:block&gt;\n&lt;/head&gt;\n&lt;body tal:define=\"applicationURL request/getApplicationURL\"&gt;\n&lt;div id=\"content\"&gt;\n  &lt;tal:block content=\"structure provider:pagelet\"&gt;content&lt;/tal:block&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The tempalte above defines an ITitle provider which contains the definition\nfor a macro within itself. You have to define a viewlet manager within the\nzope.viewlet ZCMl directive which provides ITitle as a viewlet manager.\nAfter that, you can register the template above as a layout template wthin\nthe z3c:layout ZCML directive like this:</p>\n<pre>&lt;z3c:layout\n    for=\"*\"\n    layer=\"z3c.skin.pagelet.IPageletBrowserSkin\"\n    template=\"template.pt\"\n    /&gt;\n</pre>\n<p>Then you can register the macro viewlet for the ITitle viewlet manager\nlike this:</p>\n<pre>&lt;z3c:macroViewlet\n    for=\"*\"\n    template=\"template.pt\"\n    macro=\"title\"\n    manager=\"z3c.skin.pagelet.ITitle\"\n    layer=\"z3c.skin.pagelet.IPageletBrowserSkin\"\n    /&gt;\n</pre>\n<p>As you can see, the ZCML configuration directive above uses <tt>title</tt> as the\nmacro attribute and uses ITitle as the viewlet manager. This will use the\nfollowing part of the template.pt:</p>\n<pre>&lt;title&gt;Pagelet skin&lt;/title&gt;\n</pre>\n<p>and registers it as a viewlet. This viewlet gets rendered in the ITitle\nprovider. As you can see, you can use a complete layout tempalte and use it\nas it is. And here it comes, you can offer an included viewlet manager\nrendering the viewlet which can be overriden for other contexts or views etc.\nYou also can register more than one viewlet for the ITitle viewlet manager.\nWhich of course makes no sense in our special title tag example.</p>\n<p>Let\u2019s show this in some tests. We\u2019ll start by creating a content object that\nis used as a view context later:</p>\n<pre>&gt;&gt;&gt; import zope.interface\n&gt;&gt;&gt; import zope.component\n&gt;&gt;&gt; from zope.publisher.interfaces.browser import IBrowserView\n&gt;&gt;&gt; from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n&gt;&gt;&gt; class Content(object):\n...     zope.interface.implements(zope.interface.Interface)\n\n&gt;&gt;&gt; content = Content()\n</pre>\n<p>We also create a temp dir for sample templates which will be defined later\nfor testing:</p>\n<pre>&gt;&gt;&gt; import os, tempfile\n&gt;&gt;&gt; temp_dir = tempfile.mkdtemp()\n</pre>\n<p>And we register a security checker for the MacroViewlet class:</p>\n<pre>&gt;&gt;&gt; from zope.configuration.xmlconfig import XMLConfig\n&gt;&gt;&gt; import zope.app.component\n&gt;&gt;&gt; import z3c.macroviewlet\n&gt;&gt;&gt; XMLConfig('meta.zcml', zope.app.component)()\n&gt;&gt;&gt; XMLConfig('configure.zcml', z3c.macroviewlet)()\n</pre>\n<div id=\"layout-template\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Layout template</a></h3>\n<p>We define a template including a macro definition and using a provider:</p>\n<pre>&gt;&gt;&gt; path = os.path.join(temp_dir, 'template.pt')\n&gt;&gt;&gt; open(path, 'w').write('''\n... &lt;html&gt;\n... &lt;body&gt;\n... &lt;head&gt;\n... &lt;tal:block replace=\"structure provider:ITitle\"&gt;\n...   &lt;metal:block define-macro=\"title\"&gt;\n...     &lt;title&gt;The title&lt;/title&gt;\n...   &lt;/metal:block&gt;\n... &lt;/tal:block&gt;\n... &lt;/head&gt;\n... &lt;body tal:define=\"applicationURL request/getApplicationURL\"&gt;\n...   content\n... &lt;/body&gt;\n... &lt;/html&gt;\n... ''')\n</pre>\n<p>Let\u2019s register a view class using the view template:</p>\n<pre>&gt;&gt;&gt; import zope.interface\n&gt;&gt;&gt; from zope.app.pagetemplate import viewpagetemplatefile\n&gt;&gt;&gt; from zope.publisher.interfaces.browser import IBrowserView\n&gt;&gt;&gt; class View(object):\n...     zope.interface.implements(IBrowserView)\n...     def __init__(self, context, request):\n...        self.context = context\n...        self.request = request\n...     def __call__(self):\n...         return viewpagetemplatefile.ViewPageTemplateFile(path)(self)\n</pre>\n<p>Let\u2019s prepare the view:</p>\n<pre>&gt;&gt;&gt; from zope.publisher.browser import TestRequest\n&gt;&gt;&gt; request = TestRequest()\n&gt;&gt;&gt; view = View(content, request)\n</pre>\n<p>Let\u2019s define the viewlet manager <tt>ITitle</tt>:</p>\n<pre>&gt;&gt;&gt; from zope.viewlet.interfaces import IViewletManager\n&gt;&gt;&gt; from zope.viewlet.manager import ViewletManager\n&gt;&gt;&gt; class ITitle(IViewletManager):\n...     \"\"\"Viewlet manager located in the title tag.\"\"\"\n\n&gt;&gt;&gt; title = ViewletManager('title', ITitle)\n</pre>\n<p>Let\u2019s register the viewlet manager:</p>\n<pre>&gt;&gt;&gt; from zope.viewlet.interfaces import IViewletManager\n&gt;&gt;&gt; manager = zope.component.provideAdapter(\n...     title,\n...     (zope.interface.Interface, TestRequest, IBrowserView),\n...     IViewletManager,\n...     name='ITitle')\n</pre>\n</div>\n<div id=\"macroviewlet\">\n<h3><a href=\"#id5\" rel=\"nofollow\">MacroViewlet</a></h3>\n<p>Before we register the macro viewlet, we check the rendered page without any\nregistered macro viewlet:</p>\n<pre>&gt;&gt;&gt; print view()\n&lt;html&gt;\n&lt;body&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  content\n&lt;/body&gt;\n&lt;/body&gt;&lt;/html&gt;\n</pre>\n<p>As you can see there is no title rendered. Now we can define the macro\nviewlet\u2026:</p>\n<pre>&gt;&gt;&gt; from zope.app.pagetemplate import viewpagetemplatefile\n&gt;&gt;&gt; from z3c.macroviewlet import zcml\n&gt;&gt;&gt; macroViewlet = zcml.MacroViewletFactory(path, 'title', 'text/html')\n</pre>\n<p>and register them as adapter:</p>\n<pre>&gt;&gt;&gt; from zope.viewlet.interfaces import IViewlet\n&gt;&gt;&gt; zope.component.provideAdapter(\n...     macroViewlet,\n...     (zope.interface.Interface, IDefaultBrowserLayer, IBrowserView,\n...      ITitle),\n...     IViewlet,\n...     name='title')\n</pre>\n<p>Now we are ready to test it again:</p>\n<pre>&gt;&gt;&gt; print view()\n&lt;html&gt;\n&lt;body&gt;\n&lt;head&gt;\n    &lt;title&gt;The title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  content\n&lt;/body&gt;\n&lt;/body&gt;&lt;/html&gt;\n</pre>\n<p>As you can see, the title gets rendered as a viewlet into the ITitle provider.</p>\n</div>\n<div id=\"cleanup\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Cleanup</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.rmtree(temp_dir)\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id8\" rel=\"nofollow\">1.1.0 (2010-07-14)</a></h3>\n<ul>\n<li>Fixed tests to run with current package versions\n(<tt>metaconfigure.registerType</tt> moved from <tt>zope.app.pagetemplate</tt>\nto <tt>zope.browserpage</tt>). Thus requiring <tt>zope.browserpage</tt> now.</li>\n<li>No longer use depreacted <tt>zope.testing.doctest</tt> and\n<tt>zope.testing.doctestunit</tt>.</li>\n<li>Removed ZPKG and ZCML slugs.</li>\n<li>Fixed RST formatting in README.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id9\" rel=\"nofollow\">1.0.0 (2007-09-21)</a></h3>\n<ul>\n<li>Initial Release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 802049, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a5a29c456c6b8bad383f4d7dc60792b5", "sha256": "addb86c5b55bf7ef3bd4d8b29097fefd8b4d0db2335b37dd8c855f72a1f9ea44"}, "downloads": -1, "filename": "z3c.macroviewlet-1.0.0-py2.4.egg", "has_sig": false, "md5_digest": "a5a29c456c6b8bad383f4d7dc60792b5", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 15067, "upload_time": "2007-09-21T22:36:18", "upload_time_iso_8601": "2007-09-21T22:36:18Z", "url": "https://files.pythonhosted.org/packages/d6/54/b90d54e29611f65bbdaab7434eada7b815d31220669ea91443c46fea7b00/z3c.macroviewlet-1.0.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac24dadac2cf45e4493c65813cfabd97", "sha256": "25297a09c98ffd0ab06061ca8967632a902fa150cdf59c6a3c5d5618770312bb"}, "downloads": -1, "filename": "z3c.macroviewlet-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ac24dadac2cf45e4493c65813cfabd97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8796, "upload_time": "2007-09-21T22:36:10", "upload_time_iso_8601": "2007-09-21T22:36:10Z", "url": "https://files.pythonhosted.org/packages/18/14/5e1f0ade653add0ae2143b741142cd4a9d38eb2fcd3e2fd8a68757abf670/z3c.macroviewlet-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "da0363eb1d23c40e107eacb72244798b", "sha256": "4c450828a49385b18fe71009a2d14f06a31497048f0b05ab289dc488f870e145"}, "downloads": -1, "filename": "z3c.macroviewlet-1.1.0.tar.gz", "has_sig": false, "md5_digest": "da0363eb1d23c40e107eacb72244798b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8563, "upload_time": "2010-07-14T08:23:57", "upload_time_iso_8601": "2010-07-14T08:23:57.955283Z", "url": "https://files.pythonhosted.org/packages/63/54/13054be548ff05cb18b0ef226965fde987ea5d70c225c6145d25986cf834/z3c.macroviewlet-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da0363eb1d23c40e107eacb72244798b", "sha256": "4c450828a49385b18fe71009a2d14f06a31497048f0b05ab289dc488f870e145"}, "downloads": -1, "filename": "z3c.macroviewlet-1.1.0.tar.gz", "has_sig": false, "md5_digest": "da0363eb1d23c40e107eacb72244798b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8563, "upload_time": "2010-07-14T08:23:57", "upload_time_iso_8601": "2010-07-14T08:23:57.955283Z", "url": "https://files.pythonhosted.org/packages/63/54/13054be548ff05cb18b0ef226965fde987ea5d70c225c6145d25986cf834/z3c.macroviewlet-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:56 2020"}