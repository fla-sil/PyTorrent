{"info": {"author": "Philippe Muller", "author_email": "philippe.muller@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5"], "description": "awsudo\n======\n\nawsudo is a command-line tool that requests temporary credentials from `STS\n<https://docs.aws.amazon.com/fr_fr/STS/latest/APIReference/Welcome.html>`_\nto use an `IAM role\n<https://docs.aws.amazon.com/fr_fr/IAM/latest/UserGuide/id_roles.html>`_.\n\nIf `MFA <https://aws.amazon.com/iam/details/mfa/>`_ is enabled,\nyou'll be prompted for the token code.\n\n\nUsage\n-----\n\nFirst, you need to define your credentials in ``~/.aws/credentials``:\n\n.. code-block:: ini\n\n    [default]\n    aws_access_key_id = AKIAIJFLKDSJFKLDSZ2Q\n    aws_secret_access_key = Eoz3FDKJLSfdsJLKFDjflsFDjklJFDjfdFDjdOKa\n\nThen define your profiles in ``~/.aws/config``:\n\n.. code-block:: ini\n\n    [profile administrator@development]\n    role_arn = arn:aws:iam::00000000002:role/administrator\n    source_profile = default\n    mfa_serial = arn:aws:iam::00000000001:mfa/pmuller\n\n    [profile administrator@staging]\n    role_arn = arn:aws:iam::00000000003:role/administrator\n    source_profile = default\n    mfa_serial = arn:aws:iam::00000000001:mfa/pmuller\n\n    [profile administrator@production]\n    role_arn = arn:aws:iam::00000000004:role/administrator\n    source_profile = default\n    mfa_serial = arn:aws:iam::00000000001:mfa/pmuller\n\n\nYou can use awsudo either to get temporary credentials as ready-to-use\nenvironment variables:\n\n.. code-block:: console\n\n    $ awsudo administrator@staging\n    Enter MFA code:\n    AWS_ACCESS_KEY_ID=ASIAJFSDLKJFS3VLA\n    AWS_SECRET_ACCESS_KEY=UKvIegRLKJSFLKJFDSLKFJSDLKJ\n    AWS_SESSION_TOKEN=FQoDYXdzEHIaDONIt4M0O10zRms0ac2.....\n\n\nOr to directly run another executable with credentials defined in its\nenvironment:\n\n.. code-block:: console\n\n    $ awsudo administrator@development aws iam list-groups\n    Enter MFA code:\n    {\n        \"Groups\": [\n            {\n                \"Path\": \"/\",\n                \"CreateDate\": \"2016-08-01T02:13:52Z\",\n                \"GroupId\": \"AGPAILKJFSDLFKJSDLFS2\",\n                \"Arn\": \"arn:aws:iam::1234567890:group/administrators\",\n                \"GroupName\": \"administrators\"\n            },\n            {\n                \"Path\": \"/\",\n                \"CreateDate\": \"2016-08-01T02:24:05Z\",\n                \"GroupId\": \"AGPAFSJDKLJFDSLKJFST6\",\n                \"Arn\": \"arn:aws:iam::1234567890:group/users\",\n                \"GroupName\": \"users\"\n            }\n        ]\n    }\n\n\nDevelopment\n-----------\n\nRun tests:\n\n.. code-block:: console\n\n    $ make check", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pmuller/awsudo", "keywords": null, "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "awsudo", "package_url": "https://pypi.org/project/awsudo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/awsudo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/pmuller/awsudo"}, "release_url": "https://pypi.org/project/awsudo/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Get temporary credentials for AWS roles.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>awsudo is a command-line tool that requests temporary credentials from <a href=\"https://docs.aws.amazon.com/fr_fr/STS/latest/APIReference/Welcome.html\" rel=\"nofollow\">STS</a>\nto use an <a href=\"https://docs.aws.amazon.com/fr_fr/IAM/latest/UserGuide/id_roles.html\" rel=\"nofollow\">IAM role</a>.</p>\n<p>If <a href=\"https://aws.amazon.com/iam/details/mfa/\" rel=\"nofollow\">MFA</a> is enabled,\nyou\u2019ll be prompted for the token code.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>First, you need to define your credentials in <tt><span class=\"pre\">~/.aws/credentials</span></tt>:</p>\n<pre><span class=\"k\">[default]</span>\n<span class=\"na\">aws_access_key_id</span> <span class=\"o\">=</span> <span class=\"s\">AKIAIJFLKDSJFKLDSZ2Q</span>\n<span class=\"na\">aws_secret_access_key</span> <span class=\"o\">=</span> <span class=\"s\">Eoz3FDKJLSfdsJLKFDjflsFDjklJFDjfdFDjdOKa</span>\n</pre>\n<p>Then define your profiles in <tt><span class=\"pre\">~/.aws/config</span></tt>:</p>\n<pre><span class=\"k\">[profile administrator@development]</span>\n<span class=\"na\">role_arn</span> <span class=\"o\">=</span> <span class=\"s\">arn:aws:iam::00000000002:role/administrator</span>\n<span class=\"na\">source_profile</span> <span class=\"o\">=</span> <span class=\"s\">default</span>\n<span class=\"na\">mfa_serial</span> <span class=\"o\">=</span> <span class=\"s\">arn:aws:iam::00000000001:mfa/pmuller</span>\n\n<span class=\"k\">[profile administrator@staging]</span>\n<span class=\"na\">role_arn</span> <span class=\"o\">=</span> <span class=\"s\">arn:aws:iam::00000000003:role/administrator</span>\n<span class=\"na\">source_profile</span> <span class=\"o\">=</span> <span class=\"s\">default</span>\n<span class=\"na\">mfa_serial</span> <span class=\"o\">=</span> <span class=\"s\">arn:aws:iam::00000000001:mfa/pmuller</span>\n\n<span class=\"k\">[profile administrator@production]</span>\n<span class=\"na\">role_arn</span> <span class=\"o\">=</span> <span class=\"s\">arn:aws:iam::00000000004:role/administrator</span>\n<span class=\"na\">source_profile</span> <span class=\"o\">=</span> <span class=\"s\">default</span>\n<span class=\"na\">mfa_serial</span> <span class=\"o\">=</span> <span class=\"s\">arn:aws:iam::00000000001:mfa/pmuller</span>\n</pre>\n<p>You can use awsudo either to get temporary credentials as ready-to-use\nenvironment variables:</p>\n<pre><span class=\"gp\">$</span> awsudo administrator@staging\n<span class=\"go\">Enter MFA code:\nAWS_ACCESS_KEY_ID=ASIAJFSDLKJFS3VLA\nAWS_SECRET_ACCESS_KEY=UKvIegRLKJSFLKJFDSLKFJSDLKJ\nAWS_SESSION_TOKEN=FQoDYXdzEHIaDONIt4M0O10zRms0ac2.....</span>\n</pre>\n<p>Or to directly run another executable with credentials defined in its\nenvironment:</p>\n<pre><span class=\"gp\">$</span> awsudo administrator@development aws iam list-groups\n<span class=\"go\">Enter MFA code:\n{\n    \"Groups\": [\n        {\n            \"Path\": \"/\",\n            \"CreateDate\": \"2016-08-01T02:13:52Z\",\n            \"GroupId\": \"AGPAILKJFSDLFKJSDLFS2\",\n            \"Arn\": \"arn:aws:iam::1234567890:group/administrators\",\n            \"GroupName\": \"administrators\"\n        },\n        {\n            \"Path\": \"/\",\n            \"CreateDate\": \"2016-08-01T02:24:05Z\",\n            \"GroupId\": \"AGPAFSJDKLJFDSLKJFST6\",\n            \"Arn\": \"arn:aws:iam::1234567890:group/users\",\n            \"GroupName\": \"users\"\n        }\n    ]\n}</span>\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Run tests:</p>\n<pre><span class=\"gp\">$</span> make check\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2261222, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "e6ba39d5ef527528f4f25d8b56238101", "sha256": "c4681458ffd0dbba639b0aea332f6845c6e9b6b0577b524c177337000efa4f45"}, "downloads": -1, "filename": "awsudo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e6ba39d5ef527528f4f25d8b56238101", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2824, "upload_time": "2016-08-03T14:29:04", "upload_time_iso_8601": "2016-08-03T14:29:04.092693Z", "url": "https://files.pythonhosted.org/packages/2e/7b/0120a3200f893a9de8806244c17a24f1a07ee9889e4322fa0e4fe7bd0955/awsudo-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4f83914acd4b499e5f09c1f97d666153", "sha256": "0ca886736d1f75b06f681af0acfa4171cf9a33e52c4a1f46512ed1f043f475de"}, "downloads": -1, "filename": "awsudo-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4f83914acd4b499e5f09c1f97d666153", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2988, "upload_time": "2016-08-04T02:33:59", "upload_time_iso_8601": "2016-08-04T02:33:59.091417Z", "url": "https://files.pythonhosted.org/packages/b7/2f/4cecced782959e3d61f4ccb0c9a2bac3b949c5e0b70ffae388624d950391/awsudo-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fd8784d5722cb666f0ffc616066812c0", "sha256": "008dcbccbd6717d5450ecea7d828272f97fda513ff4f4efcc4287a5d2b02afe9"}, "downloads": -1, "filename": "awsudo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fd8784d5722cb666f0ffc616066812c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3276, "upload_time": "2016-08-04T05:31:41", "upload_time_iso_8601": "2016-08-04T05:31:41.764502Z", "url": "https://files.pythonhosted.org/packages/6b/90/e4b28a5af79290d43fb5e1ceaff14d77a27d26b962275661898e066a3479/awsudo-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fd8784d5722cb666f0ffc616066812c0", "sha256": "008dcbccbd6717d5450ecea7d828272f97fda513ff4f4efcc4287a5d2b02afe9"}, "downloads": -1, "filename": "awsudo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fd8784d5722cb666f0ffc616066812c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3276, "upload_time": "2016-08-04T05:31:41", "upload_time_iso_8601": "2016-08-04T05:31:41.764502Z", "url": "https://files.pythonhosted.org/packages/6b/90/e4b28a5af79290d43fb5e1ceaff14d77a27d26b962275661898e066a3479/awsudo-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:33 2020"}