{"info": {"author": "Karl Chen", "author_email": "quarl@8166.clguba.z.quarl.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Topic :: Software Development", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Interpreters"], "description": "#########\n Pyflyby\n#########\n\n.. image:: https://badge.fury.io/py/pyflyby.svg\n   :target: https://pypi.org/project/pyflyby/\n\n.. image:: https://travis-ci.com/deshaw/pyflyby.png?branch=master\n   :target: https://travis-ci.com/deshaw/pyflyby\n\nPyflyby is a set of Python programming productivity tools.\n\nFor command-line interaction:\n  * ``py``: command-line multitool\n\nFor IPython interaction:\n  * ``autoimporter``: automatically imports symbols when needed.\n\nFor editing python source code:\n  * ``tidy-imports``: adds missing 'import's, removes unused 'import's,\n    and also reformats import blocks.\n  * ``find-imports``: prints to stdout how to import a particular symbol.\n  * ``reformat-imports``: reformats ``import`` blocks\n  * ``collect-imports``: prints out all the imports in a given set of files.\n  * ``collect-exports``: prints out definitions in a given set of modules,\n    in the form of import statements.\n  * ``transform-imports``: renames imported modules/functions.\n\nQuick start: Autoimporter + IPython\n===================================\n\n.. code:: bash\n\n   $ py\n   In [1]: re.search(\"[a-z]+\", \"....hello...\").group(0)\n   [PYFLYBY] import re\n   Out[1]: 'hello'\n\n   In [2]: chisqprob(arange(5), 2)\n   [PYFLYBY] from numpy import arange\n   [PYFLYBY] from scipy.stats import chisqprob\n   Out[2]: [ 1.      0.6065  0.3679  0.2231  0.1353]\n\nTo load pyflyby into an existing IPython session as a 1-off:\n\n.. code:: bash\n\n   $ ipython\n   In [1]: %load_ext pyflyby\n\nTo configure IPython/Jupyter Notebook to load pyflyby automatically:\n\n.. code:: bash\n\n   $ py pyflyby.install_in_ipython_config_file\n\nor\n\n.. code:: bash\n\n   $ echo 'c.InteractiveShellApp.extensions.append(\"pyflyby\")' \\\n     >> ~/.ipython/profile_default/ipython_config.py\n\n   $ ipython\n   In [1]: b64decode('aGVsbG8=')\n   [PYFLYBY] from base64 import b64decode\n   Out[1]: 'hello'\n\n\nQuick start: ``py`` command-line multi-tool\n===========================================\n\n.. code:: bash\n\n  $ py b64decode aGVsbG8=\n  [PYFLYBY] from base64 import b64decode\n  [PYFLYBY] b64decode('aGVsbG8=', altchars=None)\n  'hello'\n\n  $ py log2 sys.maxint\n  [PYFLYBY] from numpy import log2\n  [PYFLYBY] import sys\n  [PYFLYBY] log2(9223372036854775807)\n  63.0\n\n  $ py 'plot(cos(arange(30)))'\n  [PYFLYBY] from numpy import arange\n  [PYFLYBY] from numpy import cos\n  [PYFLYBY] from matplotlib.pyplot import plot\n  [PYFLYBY] plot(cos(arange(30)))\n  <plot>\n\n  $ py 38497631 / 13951446\n  2.7594007818257693\n\n  $ py foo.py\n\nQuick start: ``tidy-imports``\n=============================\n\nTo use ``tidy-imports``, just specify the filename(s) to tidy.\n\nFor example:\n\n.. code::\n\n   $ echo 're.search(\"[a-z]+\", \"....hello...\"), chisqprob(arange(5), 2)' > foo.py\n\n   $ tidy-imports foo.py\n   --- /tmp/foo.py\n   +++ /tmp/foo.py\n   @@ -1 +1,9 @@\n   +from __future__ import absolute_import, division, with_statement\n   +\n   +from   numpy                    import arange\n   +from   scipy.stats              import chisqprob\n   +import re\n   +\n    re.search(\"[a-z]+\", \"....hello...\"), chisqprob(arange(5), 2)\n\n   Replace /tmp/foo.py? [y/N]\n\n\nQuick start: import libraries\n=============================\n\nCreate a file named .pyflyby with lines such as\n\n.. code:: python\n\n   from mypackage.mymodule import MyClass, my_function\n   import anotherpackage.anothermodule\n\nYou can put this file in your home directory or in the same directory as your\n``*.py`` files.\n\n\nDetails: automatic imports\n==========================\n\nAUTOMATIC IMPORTS - never type \"import\" again!\n\nThis module allows your \"known imports\" to work automatically in your IPython\ninteractive session without having to type the 'import' statements (and also\nwithout having to slow down your Python startup with imports you only use\noccasionally).\n\nExample::\n\n  In [1]: re.search(\"[a-z]+\", \"....hello...\").group(0)\n  [PYFLYBY] import re\n  Out[1]: 'hello'\n\n  In [2]: chisqprob(arange(5), 2)\n  [PYFLYBY] from numpy import arange\n  [PYFLYBY] from scipy.stats import chisqprob\n  Out[2]: [ 1.      0.6065  0.3679  0.2231  0.1353]\n\n  In [3]: np.sin(arandom(5))\n  [PYFLYBY] from numpy.random import random as arandom\n  [PYFLYBY] import numpy as np\n  Out[3]: [ 0.0282  0.0603  0.4653  0.8371  0.3347]\n\n  In [4]: isinstance(42, Number)\n  [PYFLYBY] from numbers import Number\n  Out[4]: True\n\n\nIt just works\n-------------\n\nTab completion works, even on modules that are not yet imported.  In the\nfollowing example, notice that numpy is imported when we need to know its\nmembers, and only then::\n\n  $ ipython\n  In [1]: nump<TAB>\n  In [1]: numpy\n  In [1]: numpy.arang<TAB>\n  [PYFLYBY] import numpy\n  In [1]: numpy.arange\n\n\nThe IPython \"?\" magic help (pinfo/pinfo2) automatically imports symbols first\nif necessary::\n\n  $ ipython\n  In [1]: arange?\n  [PYFLYBY] from numpy import arange\n  ... Docstring: arange([start,] stop[, step,], dtype=None) ...\n\nOther IPython magic commands work as well::\n\n  $ ipython\n  In [1]: %timeit np.cos(pi)\n  [PYFLYBY] import numpy as np\n  [PYFLYBY] from numpy import pi\n  100000 loops, best of 3: 2.51 us per loop\n\n  $ echo 'print arange(4)' > foo.py\n  $ ipython\n  In [1]: %run foo.py\n  [PYFLYBY] from numpy import arange\n  [0 1 2 3]\n\n\nImplementation details\n----------------------\n\nThe automatic importing happens at parse time, before code is executed.  The\nnamespace never contains entries for names that are not yet imported.\n\nThis method of importing at parse time contrasts with previous implementations\nof automatic importing that use proxy objects.  Those implementations using\nproxy objects don't work as well, because it is impossible to make proxy\nobjects behave perfectly.  For example, instance(x, T) will return the wrong\nanswer if either x or T is a proxy object.\n\n\nCompatibility\n-------------\n\nTested with:\n  - Python 2.6, 2.7, 3.7, 3.8\n  - IPython 0.10, 0.11, 0.12, 0.13, 1.0, 1.2, 2.0, 2.1, 2.2, 2.3, 2.4, 3.0,\n    3.1, 3.2, 4.0., 7.11 (latest)\n  - IPython (text console), IPython Notebook, Spyder\n\n\nDetails: import libraries\n=========================\n\nPyflyby uses \"import libraries\" that tell how to import a given symbol.\n\nAn import library file is simply a python source file containing 'import' (or\n'from ... import ...') lines.  These can be generated automatically with\n``collect-imports`` and ``collect-exports``.\n\nKnown imports\n-------------\n\nFind-imports, ``tidy-imports``, and autoimport consult the database of known\nimports to figure out where to get an import.  For example, if the\nimports database contains::\n\n    from numpy import arange, NaN\n\nthen when you type the following in IPython::\n\n    print(arange(10))\n\nthe autoimporter would automatically execute ``from numpy import arange``.\n\nThe database can be one file or multiple files.  This makes it easy to have\nproject-specific known_imports along with global and per-user defaults.\n\nThe ``PYFLYBY_PATH`` environment variable specifies which files to read.\nThis is a colon-separated list of filenames or directory names.  The default\nis::\n\n  PYFLYBY_PATH=/etc/pyflyby:~/.pyflyby:.../.pyflyby\n\nIf you set::\n\n  PYFLYBY_PATH=/foo1/bar1:/foo2/bar2\n\nthen this replaces the default.\n\nYou can use a hyphen to include the default in the path.  If you set::\n\n  PYFLYBY_PATH=/foo1/bar1:-:/foo2/bar2\n\nthen this reads ``/foo1/bar1``, then the default locations, then ``/foo2/bar2``.\n\nIn ``$PYFLYBY_PATH``, ``.../.pyflyby`` (with _three_ dots) means that all ancestor\ndirectories are searched for a member named \".pyflyby\".\n\nFor example, suppose the following files exist::\n\n  /etc/pyflyby/stuff.py\n  /u/quarl/.pyflyby/blah1.py\n  /u/quarl/.pyflyby/more/blah2.py\n  /proj/share/mypythonstuff/.pyflyby\n  /proj/share/mypythonstuff/foo/bar/.pyflyby/baz.py\n  /.pyflyby\n\nFurther, suppose:\n\n  * ``/proj`` is on a separate file system from ``/``.\n  * ``$HOME=/u/quarl``\n\nThen ``tidy-imports /proj/share/mypythonstuff/foo/bar/quux/zot.py`` will by\ndefault use the following::\n\n  /etc/pyflyby/stuff.py\n  /u/quarl/.pyflyby/blah1.py\n  /u/quarl/.pyflyby/more/blah2.py\n  /proj/share/mypythonstuff/foo/bar/.pyflyby/baz.py\n  /proj/share/mypythonstuff/.pyflyby (a file)\n\n.. note::\n\n  * ``/.pyflyby`` is not included, because traversal stops at file system\n    boundaries, and in this example, ``/proj`` is on a different file system than\n    ``/``.\n  * ``.pyflyby`` (in ``$HOME`` or near the target file) can be a file or a directory.\n    If it is a directory, then it is recursively searched for ``*.py`` files.\n  * The order usually doesn't matter, but if there are \"forget\" instructions\n    (see below), then the order matters.  In the default ``$PYFLYBY_PATH``,\n    .../.pyflyby is placed last so that per-directory configuration can\n    override per-user configuration, which can override systemwide\n    configuration.\n\n\nForgetting imports\n------------------\n\nOccasionally you may have reason to tell pyflyby to \"forget\" entries from the\ndatabase of known imports.\n\nYou can put the following in any file reachable from ``$PYFLYBY_PATH``::\n\n  __forget_imports__ = [\"from numpy import NaN\"]\n\nThis is useful if you want to use a set of imports maintained by someone else\nexcept for a few particular imports.\n\nEntries in ``$PYFLYBY_PATH`` are processed left-to-right in the order specified,\nso put the files containing these at the end of your ``$PYFLYBY_PATH``.  By\ndefault, ``tidy-imports`` and friends process ``/etc/pyflyby``, then ``~/.pyflyby``,\nthen the per-directory ``.pyflyby``.\n\n\nMandatory imports\n-----------------\n\nWithin a certain project you may have a policy to always include certain\nimports.  For example, maybe you always want to do ``from __future__ import\ndivision`` in all files.\n\nYou can put the following in any file reachable from ``$PYFLYBY_PATH``::\n\n  __mandatory_imports__ = [\"from __future__ import division\"]\n\nTo undo mandatory imports inherited from other ``.pyflyby`` files, use\n``__forget_imports__`` (see above).\n\n\nCanonicalize imports\n--------------------\n\nSometimes you want every run of ``tidy-imports`` to automatically rename an import\nto a new name.\n\nYou can put the following in any file reachable from ``$PYFLYBY_PATH``::\n\n  __canonical_imports__ = {\"oldmodule.oldfunction\": \"newmodule.newfunction\"}\n\nThis is equivalent to running::\n\n  tidy-imports --transform=oldmodule.oldfunction=newmodule.newfunction\n\n\nSoapbox: avoid \"star\" imports\n=============================\n\nWhen programming in Python, a good software engineering practice is to avoid\nusing ``from foopackage import *`` in production code.\n\nThis style is a maintenance nightmare:\n\n  * It becomes difficult to figure out where various symbols\n    (functions/classes/etc) come from.\n\n  * It's hard to tell what gets shadowed by what.\n\n  * When the package changes in trivial ways, your code will be affected.\n    Consider the following example: Suppose ``foopackage.py`` contains ``import\n    sys``, and ``myprogram.py`` contains ``from foopackage import *; if\n    some_condition: sys.exit(0)``.  If ``foopackage.py`` changes so that ``import\n    sys`` is removed, ``myprogram.py`` is now broken because it's missing ``import\n    sys``.\n\nTo fix such code, you can run ``tidy-imports --replace-star-imports`` to\nautomatically replace star imports with the specific needed imports.\n\n\nEmacs support\n=============\n\n* To get a ``M-x tidy-imports`` command in GNU Emacs, add to your ``~/.emacs``::\n\n    (load \"/path/to/pyflyby/lib/emacs/pyflyby.el\")\n\n\n- Pyflyby.el doesn't yet work with XEmacs; patches welcome.\n\n\nAuthorship\n==========\n\nThis plugin was contributed back to the community by the `D. E. Shaw group\n<https://www.deshaw.com/>`_.\n\n.. image:: https://www.deshaw.com/assets/logos/black_logo_417x125.png\n   :target: https://www.deshaw.com\n   :height: 75 px\n\nPyflyby is written by Karl Chen <quarl@8166.clguba.z.quarl.org>\n\n\nLicense\n=======\n\nPyflyby is released under a very permissive license, the MIT/X11 license; see\nLICENSE.txt.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://packages.python.org/pyflyby", "keywords": "pyflyby py autopython autoipython productivity automatic imports autoimporter tidy-imports", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyflyby", "package_url": "https://pypi.org/project/pyflyby/", "platform": "", "project_url": "https://pypi.org/project/pyflyby/", "project_urls": {"Homepage": "http://packages.python.org/pyflyby"}, "release_url": "https://pypi.org/project/pyflyby/1.6.1/", "requires_dist": null, "requires_python": "", "summary": "pyflyby - Python development productivity tools, in particular automatic import management", "version": "1.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/pyflyby/\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pyflyby.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1af6e0a42d22cc29db8d0dee13efc6b54d56581f/68747470733a2f2f62616467652e667572792e696f2f70792f7079666c7962792e737667\"></a>\n<a href=\"https://travis-ci.com/deshaw/pyflyby\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/deshaw/pyflyby.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2eeddee1fafe0726e401ccead0d3c3bec3fe5952/68747470733a2f2f7472617669732d63692e636f6d2f6465736861772f7079666c7962792e706e673f6272616e63683d6d6173746572\"></a>\n<p>Pyflyby is a set of Python programming productivity tools.</p>\n<dl>\n<dt>For command-line interaction:</dt>\n<dd><ul>\n<li><tt>py</tt>: command-line multitool</li>\n</ul>\n</dd>\n<dt>For IPython interaction:</dt>\n<dd><ul>\n<li><tt>autoimporter</tt>: automatically imports symbols when needed.</li>\n</ul>\n</dd>\n<dt>For editing python source code:</dt>\n<dd><ul>\n<li><tt><span class=\"pre\">tidy-imports</span></tt>: adds missing \u2018import\u2019s, removes unused \u2018import\u2019s,\nand also reformats import blocks.</li>\n<li><tt><span class=\"pre\">find-imports</span></tt>: prints to stdout how to import a particular symbol.</li>\n<li><tt><span class=\"pre\">reformat-imports</span></tt>: reformats <tt>import</tt> blocks</li>\n<li><tt><span class=\"pre\">collect-imports</span></tt>: prints out all the imports in a given set of files.</li>\n<li><tt><span class=\"pre\">collect-exports</span></tt>: prints out definitions in a given set of modules,\nin the form of import statements.</li>\n<li><tt><span class=\"pre\">transform-imports</span></tt>: renames imported modules/functions.</li>\n</ul>\n</dd>\n</dl>\n<div id=\"quick-start-autoimporter-ipython\">\n<h2>Quick start: Autoimporter + IPython</h2>\n<pre>$ py\nIn <span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>: re.search<span class=\"o\">(</span><span class=\"s2\">\"[a-z]+\"</span>, <span class=\"s2\">\"....hello...\"</span><span class=\"o\">)</span>.group<span class=\"o\">(</span><span class=\"m\">0</span><span class=\"o\">)</span>\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> import re\nOut<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>: <span class=\"s1\">'hello'</span>\n\nIn <span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>: chisqprob<span class=\"o\">(</span>arange<span class=\"o\">(</span><span class=\"m\">5</span><span class=\"o\">)</span>, <span class=\"m\">2</span><span class=\"o\">)</span>\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> from numpy import arange\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> from scipy.stats import chisqprob\nOut<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>: <span class=\"o\">[</span> <span class=\"m\">1</span>.      <span class=\"m\">0</span>.6065  <span class=\"m\">0</span>.3679  <span class=\"m\">0</span>.2231  <span class=\"m\">0</span>.1353<span class=\"o\">]</span>\n</pre>\n<p>To load pyflyby into an existing IPython session as a 1-off:</p>\n<pre>$ ipython\nIn <span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>: %load_ext pyflyby\n</pre>\n<p>To configure IPython/Jupyter Notebook to load pyflyby automatically:</p>\n<pre>$ py pyflyby.install_in_ipython_config_file\n</pre>\n<p>or</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s1\">'c.InteractiveShellApp.extensions.append(\"pyflyby\")'</span> <span class=\"se\">\\\n</span>  &gt;&gt; ~/.ipython/profile_default/ipython_config.py\n\n$ ipython\nIn <span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>: b64decode<span class=\"o\">(</span><span class=\"s1\">'aGVsbG8='</span><span class=\"o\">)</span>\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> from base64 import b64decode\nOut<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>: <span class=\"s1\">'hello'</span>\n</pre>\n</div>\n<div id=\"quick-start-py-command-line-multi-tool\">\n<h2>Quick start: <tt>py</tt> command-line multi-tool</h2>\n<pre>$ py b64decode <span class=\"nv\">aGVsbG8</span><span class=\"o\">=</span>\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> from base64 import b64decode\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> b64decode<span class=\"o\">(</span><span class=\"s1\">'aGVsbG8='</span>, <span class=\"nv\">altchars</span><span class=\"o\">=</span>None<span class=\"o\">)</span>\n<span class=\"s1\">'hello'</span>\n\n$ py log2 sys.maxint\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> from numpy import log2\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> import sys\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> log2<span class=\"o\">(</span><span class=\"m\">9223372036854775807</span><span class=\"o\">)</span>\n<span class=\"m\">63</span>.0\n\n$ py <span class=\"s1\">'plot(cos(arange(30)))'</span>\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> from numpy import arange\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> from numpy import cos\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> from matplotlib.pyplot import plot\n<span class=\"o\">[</span>PYFLYBY<span class=\"o\">]</span> plot<span class=\"o\">(</span>cos<span class=\"o\">(</span>arange<span class=\"o\">(</span><span class=\"m\">30</span><span class=\"o\">)))</span>\n&lt;plot&gt;\n\n$ py <span class=\"m\">38497631</span> / <span class=\"m\">13951446</span>\n<span class=\"m\">2</span>.7594007818257693\n\n$ py foo.py\n</pre>\n</div>\n<div id=\"quick-start-tidy-imports\">\n<h2>Quick start: <tt><span class=\"pre\">tidy-imports</span></tt></h2>\n<p>To use <tt><span class=\"pre\">tidy-imports</span></tt>, just specify the filename(s) to tidy.</p>\n<p>For example:</p>\n<pre>$ echo 're.search(\"[a-z]+\", \"....hello...\"), chisqprob(arange(5), 2)' &gt; foo.py\n\n$ tidy-imports foo.py\n--- /tmp/foo.py\n+++ /tmp/foo.py\n@@ -1 +1,9 @@\n+from __future__ import absolute_import, division, with_statement\n+\n+from   numpy                    import arange\n+from   scipy.stats              import chisqprob\n+import re\n+\n re.search(\"[a-z]+\", \"....hello...\"), chisqprob(arange(5), 2)\n\nReplace /tmp/foo.py? [y/N]\n</pre>\n</div>\n<div id=\"quick-start-import-libraries\">\n<h2>Quick start: import libraries</h2>\n<p>Create a file named .pyflyby with lines such as</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mypackage.mymodule</span> <span class=\"kn\">import</span> <span class=\"n\">MyClass</span><span class=\"p\">,</span> <span class=\"n\">my_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">anotherpackage.anothermodule</span>\n</pre>\n<p>You can put this file in your home directory or in the same directory as your\n<tt>*.py</tt> files.</p>\n</div>\n<div id=\"details-automatic-imports\">\n<h2>Details: automatic imports</h2>\n<p>AUTOMATIC IMPORTS - never type \u201cimport\u201d again!</p>\n<p>This module allows your \u201cknown imports\u201d to work automatically in your IPython\ninteractive session without having to type the \u2018import\u2019 statements (and also\nwithout having to slow down your Python startup with imports you only use\noccasionally).</p>\n<p>Example:</p>\n<pre>In [1]: re.search(\"[a-z]+\", \"....hello...\").group(0)\n[PYFLYBY] import re\nOut[1]: 'hello'\n\nIn [2]: chisqprob(arange(5), 2)\n[PYFLYBY] from numpy import arange\n[PYFLYBY] from scipy.stats import chisqprob\nOut[2]: [ 1.      0.6065  0.3679  0.2231  0.1353]\n\nIn [3]: np.sin(arandom(5))\n[PYFLYBY] from numpy.random import random as arandom\n[PYFLYBY] import numpy as np\nOut[3]: [ 0.0282  0.0603  0.4653  0.8371  0.3347]\n\nIn [4]: isinstance(42, Number)\n[PYFLYBY] from numbers import Number\nOut[4]: True\n</pre>\n<div id=\"it-just-works\">\n<h3>It just works</h3>\n<p>Tab completion works, even on modules that are not yet imported.  In the\nfollowing example, notice that numpy is imported when we need to know its\nmembers, and only then:</p>\n<pre>$ ipython\nIn [1]: nump&lt;TAB&gt;\nIn [1]: numpy\nIn [1]: numpy.arang&lt;TAB&gt;\n[PYFLYBY] import numpy\nIn [1]: numpy.arange\n</pre>\n<p>The IPython \u201c?\u201d magic help (pinfo/pinfo2) automatically imports symbols first\nif necessary:</p>\n<pre>$ ipython\nIn [1]: arange?\n[PYFLYBY] from numpy import arange\n... Docstring: arange([start,] stop[, step,], dtype=None) ...\n</pre>\n<p>Other IPython magic commands work as well:</p>\n<pre>$ ipython\nIn [1]: %timeit np.cos(pi)\n[PYFLYBY] import numpy as np\n[PYFLYBY] from numpy import pi\n100000 loops, best of 3: 2.51 us per loop\n\n$ echo 'print arange(4)' &gt; foo.py\n$ ipython\nIn [1]: %run foo.py\n[PYFLYBY] from numpy import arange\n[0 1 2 3]\n</pre>\n</div>\n<div id=\"implementation-details\">\n<h3>Implementation details</h3>\n<p>The automatic importing happens at parse time, before code is executed.  The\nnamespace never contains entries for names that are not yet imported.</p>\n<p>This method of importing at parse time contrasts with previous implementations\nof automatic importing that use proxy objects.  Those implementations using\nproxy objects don\u2019t work as well, because it is impossible to make proxy\nobjects behave perfectly.  For example, instance(x, T) will return the wrong\nanswer if either x or T is a proxy object.</p>\n</div>\n<div id=\"compatibility\">\n<h3>Compatibility</h3>\n<dl>\n<dt>Tested with:</dt>\n<dd><ul>\n<li>Python 2.6, 2.7, 3.7, 3.8</li>\n<li>IPython 0.10, 0.11, 0.12, 0.13, 1.0, 1.2, 2.0, 2.1, 2.2, 2.3, 2.4, 3.0,\n3.1, 3.2, 4.0., 7.11 (latest)</li>\n<li>IPython (text console), IPython Notebook, Spyder</li>\n</ul>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"details-import-libraries\">\n<h2>Details: import libraries</h2>\n<p>Pyflyby uses \u201cimport libraries\u201d that tell how to import a given symbol.</p>\n<p>An import library file is simply a python source file containing \u2018import\u2019 (or\n\u2018from \u2026 import \u2026\u2019) lines.  These can be generated automatically with\n<tt><span class=\"pre\">collect-imports</span></tt> and <tt><span class=\"pre\">collect-exports</span></tt>.</p>\n<div id=\"known-imports\">\n<h3>Known imports</h3>\n<p>Find-imports, <tt><span class=\"pre\">tidy-imports</span></tt>, and autoimport consult the database of known\nimports to figure out where to get an import.  For example, if the\nimports database contains:</p>\n<pre>from numpy import arange, NaN\n</pre>\n<p>then when you type the following in IPython:</p>\n<pre>print(arange(10))\n</pre>\n<p>the autoimporter would automatically execute <tt>from numpy import arange</tt>.</p>\n<p>The database can be one file or multiple files.  This makes it easy to have\nproject-specific known_imports along with global and per-user defaults.</p>\n<p>The <tt>PYFLYBY_PATH</tt> environment variable specifies which files to read.\nThis is a colon-separated list of filenames or directory names.  The default\nis:</p>\n<pre>PYFLYBY_PATH=/etc/pyflyby:~/.pyflyby:.../.pyflyby\n</pre>\n<p>If you set:</p>\n<pre>PYFLYBY_PATH=/foo1/bar1:/foo2/bar2\n</pre>\n<p>then this replaces the default.</p>\n<p>You can use a hyphen to include the default in the path.  If you set:</p>\n<pre>PYFLYBY_PATH=/foo1/bar1:-:/foo2/bar2\n</pre>\n<p>then this reads <tt>/foo1/bar1</tt>, then the default locations, then <tt>/foo2/bar2</tt>.</p>\n<p>In <tt>$PYFLYBY_PATH</tt>, <tt><span class=\"pre\">.../.pyflyby</span></tt> (with _three_ dots) means that all ancestor\ndirectories are searched for a member named \u201c.pyflyby\u201d.</p>\n<p>For example, suppose the following files exist:</p>\n<pre>/etc/pyflyby/stuff.py\n/u/quarl/.pyflyby/blah1.py\n/u/quarl/.pyflyby/more/blah2.py\n/proj/share/mypythonstuff/.pyflyby\n/proj/share/mypythonstuff/foo/bar/.pyflyby/baz.py\n/.pyflyby\n</pre>\n<p>Further, suppose:</p>\n<blockquote>\n<ul>\n<li><tt>/proj</tt> is on a separate file system from <tt>/</tt>.</li>\n<li><tt><span class=\"pre\">$HOME=/u/quarl</span></tt></li>\n</ul>\n</blockquote>\n<p>Then <tt><span class=\"pre\">tidy-imports</span> /proj/share/mypythonstuff/foo/bar/quux/zot.py</tt> will by\ndefault use the following:</p>\n<pre>/etc/pyflyby/stuff.py\n/u/quarl/.pyflyby/blah1.py\n/u/quarl/.pyflyby/more/blah2.py\n/proj/share/mypythonstuff/foo/bar/.pyflyby/baz.py\n/proj/share/mypythonstuff/.pyflyby (a file)\n</pre>\n<div>\n<p>Note</p>\n<ul>\n<li><tt>/.pyflyby</tt> is not included, because traversal stops at file system\nboundaries, and in this example, <tt>/proj</tt> is on a different file system than\n<tt>/</tt>.</li>\n<li><tt>.pyflyby</tt> (in <tt>$HOME</tt> or near the target file) can be a file or a directory.\nIf it is a directory, then it is recursively searched for <tt>*.py</tt> files.</li>\n<li>The order usually doesn\u2019t matter, but if there are \u201cforget\u201d instructions\n(see below), then the order matters.  In the default <tt>$PYFLYBY_PATH</tt>,\n\u2026/.pyflyby is placed last so that per-directory configuration can\noverride per-user configuration, which can override systemwide\nconfiguration.</li>\n</ul>\n</div>\n</div>\n<div id=\"forgetting-imports\">\n<h3>Forgetting imports</h3>\n<p>Occasionally you may have reason to tell pyflyby to \u201cforget\u201d entries from the\ndatabase of known imports.</p>\n<p>You can put the following in any file reachable from <tt>$PYFLYBY_PATH</tt>:</p>\n<pre>__forget_imports__ = [\"from numpy import NaN\"]\n</pre>\n<p>This is useful if you want to use a set of imports maintained by someone else\nexcept for a few particular imports.</p>\n<p>Entries in <tt>$PYFLYBY_PATH</tt> are processed left-to-right in the order specified,\nso put the files containing these at the end of your <tt>$PYFLYBY_PATH</tt>.  By\ndefault, <tt><span class=\"pre\">tidy-imports</span></tt> and friends process <tt>/etc/pyflyby</tt>, then <tt><span class=\"pre\">~/.pyflyby</span></tt>,\nthen the per-directory <tt>.pyflyby</tt>.</p>\n</div>\n<div id=\"mandatory-imports\">\n<h3>Mandatory imports</h3>\n<p>Within a certain project you may have a policy to always include certain\nimports.  For example, maybe you always want to do <tt>from __future__ import\ndivision</tt> in all files.</p>\n<p>You can put the following in any file reachable from <tt>$PYFLYBY_PATH</tt>:</p>\n<pre>__mandatory_imports__ = [\"from __future__ import division\"]\n</pre>\n<p>To undo mandatory imports inherited from other <tt>.pyflyby</tt> files, use\n<tt>__forget_imports__</tt> (see above).</p>\n</div>\n<div id=\"canonicalize-imports\">\n<h3>Canonicalize imports</h3>\n<p>Sometimes you want every run of <tt><span class=\"pre\">tidy-imports</span></tt> to automatically rename an import\nto a new name.</p>\n<p>You can put the following in any file reachable from <tt>$PYFLYBY_PATH</tt>:</p>\n<pre>__canonical_imports__ = {\"oldmodule.oldfunction\": \"newmodule.newfunction\"}\n</pre>\n<p>This is equivalent to running:</p>\n<pre>tidy-imports --transform=oldmodule.oldfunction=newmodule.newfunction\n</pre>\n</div>\n</div>\n<div id=\"soapbox-avoid-star-imports\">\n<h2>Soapbox: avoid \u201cstar\u201d imports</h2>\n<p>When programming in Python, a good software engineering practice is to avoid\nusing <tt>from foopackage import *</tt> in production code.</p>\n<p>This style is a maintenance nightmare:</p>\n<blockquote>\n<ul>\n<li>It becomes difficult to figure out where various symbols\n(functions/classes/etc) come from.</li>\n<li>It\u2019s hard to tell what gets shadowed by what.</li>\n<li>When the package changes in trivial ways, your code will be affected.\nConsider the following example: Suppose <tt>foopackage.py</tt> contains <tt>import\nsys</tt>, and <tt>myprogram.py</tt> contains <tt>from foopackage import *; if\nsome_condition: sys.exit(0)</tt>.  If <tt>foopackage.py</tt> changes so that <tt>import\nsys</tt> is removed, <tt>myprogram.py</tt> is now broken because it\u2019s missing <tt>import\nsys</tt>.</li>\n</ul>\n</blockquote>\n<p>To fix such code, you can run <tt><span class=\"pre\">tidy-imports</span> <span class=\"pre\">--replace-star-imports</span></tt> to\nautomatically replace star imports with the specific needed imports.</p>\n</div>\n<div id=\"emacs-support\">\n<h2>Emacs support</h2>\n<ul>\n<li><p>To get a <tt><span class=\"pre\">M-x</span> <span class=\"pre\">tidy-imports</span></tt> command in GNU Emacs, add to your <tt><span class=\"pre\">~/.emacs</span></tt>:</p>\n<pre>(load \"/path/to/pyflyby/lib/emacs/pyflyby.el\")\n</pre>\n</li>\n</ul>\n<ul>\n<li>Pyflyby.el doesn\u2019t yet work with XEmacs; patches welcome.</li>\n</ul>\n</div>\n<div id=\"authorship\">\n<h2>Authorship</h2>\n<p>This plugin was contributed back to the community by the <a href=\"https://www.deshaw.com/\" rel=\"nofollow\">D. E. Shaw group</a>.</p>\n<a href=\"https://www.deshaw.com\" rel=\"nofollow\"><img alt=\"https://www.deshaw.com/assets/logos/black_logo_417x125.png\" height=\"75px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a62b3ec88a0e649a501448a021ca22f767e58651/68747470733a2f2f7777772e6465736861772e636f6d2f6173736574732f6c6f676f732f626c61636b5f6c6f676f5f343137783132352e706e67\"></a>\n<p>Pyflyby is written by Karl Chen &lt;<a href=\"mailto:quarl%408166.clguba.z.quarl.org\">quarl<span>@</span>8166<span>.</span>clguba<span>.</span>z<span>.</span>quarl<span>.</span>org</a>&gt;</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Pyflyby is released under a very permissive license, the MIT/X11 license; see\nLICENSE.txt.</p>\n</div>\n\n          </div>"}, "last_serial": 7191686, "releases": {"1.6.0": [{"comment_text": "", "digests": {"md5": "d8be6041fb9e33cd84ebd35e240e508b", "sha256": "75a977efa587ae52340210453d1b81f19a68ae94e527c318d115a7fca0461b46"}, "downloads": -1, "filename": "pyflyby-1.6.0.tar.gz", "has_sig": false, "md5_digest": "d8be6041fb9e33cd84ebd35e240e508b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6337529, "upload_time": "2020-04-10T19:55:49", "upload_time_iso_8601": "2020-04-10T19:55:49.373194Z", "url": "https://files.pythonhosted.org/packages/f2/76/a1f6e7042cd752921f99d9a0105b45c187f4cfce79d5e5d08b8e71bb8284/pyflyby-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "944383dc084b57325dbd88ecc9157efe", "sha256": "963cd70b944eca6ed8610dae4d1400b1325e448e7faebf39d11bdb0c59a855e2"}, "downloads": -1, "filename": "pyflyby-1.6.1.tar.gz", "has_sig": false, "md5_digest": "944383dc084b57325dbd88ecc9157efe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6339141, "upload_time": "2020-04-20T19:13:27", "upload_time_iso_8601": "2020-04-20T19:13:27.091998Z", "url": "https://files.pythonhosted.org/packages/e8/e7/a520326aac40bf311db18ae7ec7d631668cca76ee013a4c7504c9962865c/pyflyby-1.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "944383dc084b57325dbd88ecc9157efe", "sha256": "963cd70b944eca6ed8610dae4d1400b1325e448e7faebf39d11bdb0c59a855e2"}, "downloads": -1, "filename": "pyflyby-1.6.1.tar.gz", "has_sig": false, "md5_digest": "944383dc084b57325dbd88ecc9157efe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6339141, "upload_time": "2020-04-20T19:13:27", "upload_time_iso_8601": "2020-04-20T19:13:27.091998Z", "url": "https://files.pythonhosted.org/packages/e8/e7/a520326aac40bf311db18ae7ec7d631668cca76ee013a4c7504c9962865c/pyflyby-1.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:40 2020"}