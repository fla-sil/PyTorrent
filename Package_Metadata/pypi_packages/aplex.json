{"info": {"author": "Lunluen", "author_email": "mas581301@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n# Aplex\n\n[![build](https://img.shields.io/travis/com/lunluen/aplex.svg?style=flat)]()\n[![coverage](https://img.shields.io/codecov/c/github/lunluen/aplex.svg?style=flat)](https://github.com/lunluen/aplex)\n[![platform]()]()\n[![supported pythons](https://img.shields.io/pypi/pyversions/aplex.svg?style=flat)]()\n[![package version](https://img.shields.io/pypi/v/aplex.svg?style=flat)]()\n[![license](https://img.shields.io/github/license/lunluen/aplex.svg?style=flat)]()\n[![maintenance](https://img.shields.io/maintenance/yes/2019.svg?style=flat)]()\n\nTranslation: \n[\u7b80\u4f53\u4e2d\u6587](https://github.com/lunluen/aplex/blob/master/README_zh_cn.md)\n|\n[\u7e41\u9ad4\u4e2d\u6587](https://github.com/lunluen/aplex/blob/master/misc/README_zh_tw.md)\n\nAplex is a Python library for combining asyncio with\nmultiprocessing and threading.\n\n- Aplex helps you run coroutines and functions in other process\n  or thread with asyncio.\n- Aplex provides a usage like that of  standard library `concurrent.futures`,\n  which is familiar to you and intuitive.\n- Aplex lets you do load balancing in a simple way if you need.\n\n## Installation\n\nFor general users, use the package manager [pip](https://pip.pypa.io/en/stable/) to\ninstall aplex.\n\n```bash\npip install aplex\n```\n\nFor contributors, install with pipenv:\n\n```bash\ngit clone https://github.com/lunluen/aplex.git\ncd aplex\npipenv install --dev\n```\nor with setuptools\n\n```bash\ngit clone https://github.com/lunluen/aplex.git\ncd aplex\npython setup.py develop\n```\n\n## Usage\n\nDefinition to know:\n> A `work` is a `callable` you want to run with asyncio and multiprocessing or threading.\n> It can be a coroutine function or just a function.\n\nIn below case, the `work` is the coroutine function `demo`.\n\n### Submit\n\nYou can submit your work like:\n\n```python\nimport aiohttp\nfrom aplex import ProcessAsyncPoolExecutor\n\nasync def demo(url):\n    async with aiohttp.request('GET', url) as response:\n        return response.status\n\nif __name__ == '__main__':\n    pool = ProcessAsyncPoolExecutor(pool_size=8)\n    future = pool.submit(demo, 'http://httpbin.org')\n    print('Status: %d.' % future.result())\n```\n\n*Note*: If you are running python on windows, `if __name__ == '__main__':`\nis necessary. That's the design of multiprocessing.\n\nResult:\n\n```bash\nStatus: 200\n```\n\n### Map\n\nFor multiple works, try `map`:\n\n```python\niterable = ('http://httpbin.org' for __ in range(10))\nfor status in pool.map(demo, iterable, timeout=10):\n    print('Status: %d.' % status)\n```\n\n### Awaiting results\n\nAplex allows one to await results with loop that already exists. It's quite simple.\n\nJust set keyword argument `awaitable`  to `True`!\n\nFor example:\n\n```python\npool = ProcessAsyncPoolExecutor(awaitable=True)\n```\n\nThen \n\n```python\nfuture = pool.submit(demo, 'http://httpbin.org')\nstatus = await future\n```\n\nHow about map?\n\n```python\nasync for status in pool.map(demo, iterable, timeout=10):\n    print('Status: %d.' % status)\n```\n\n### Load balancing\n\nIn aplex, each worker is the process or thread on your computer. That is, they have the same capability computing.\n*But*, your works might have different workloads. Then you need a load balancer.\n\nAplex provides some useful load balancers. They are `RoundRobin`, `Random`, and `Average`. The default is `RoundRobin`.\n\nSimply set this in contruction keyword argument:\n\n```python\nfrom aplex.load_balancers import Average\n\nif __name__ == '__main__':\n    pool = ProcessAsyncPoolExecutor(load_balancer=Average)\n```\n\nDone. So easy. :100:\n\nYou can also customize one:\n\n```python\nfrom aplex import LoadBalancer\n\nclass MyAwesomeLoadBalancer(LoadBalancer):\n    def __init__(*args, **kwargs):\n        super().__init__(*args, **kwargs)  # Don't forget this.\n        awesome_attribute = 'Hello Aplex!'\n\n    def get_proper_worker(self):\n        the_poor_guy = self.workers[0]\n        return the_poor_guy\n```\n\nSee details of how to implement a load balancer at: []()\n\n\n### Worker loop factory\n\nBy the way, if you think the build-in asyncio loop is too slow:\n\n```python\nimport uvloop\n\nif __name__ == '__main__':\n    pool = ProcessAsyncPoolExecutor(worker_loop_factory=uvloop.Loop)\n```\n\n## Like this?\n\nScroll up and click `Watch - Releases only` and `Star` as a thumbs up! :+1:\n\n## Any feedback?\n\nFeel free to open a issue (just don't abuse it).\n\nOr contact me: `mas581301@gmail.com` :mailbox:\n\nAnything about aplex is welcome, such like bugs, system design, variable naming, even English grammer of docstrings!\n\n## How to contribute\n\nContribution are welcome.\n\nAsking and advising are also kinds of contribution.\n\nPlease see [CONTRIBUTING.md](https://github.com/lunluen/aplex/blob/master/CONTRIBUTING.md)\n\n## License\n\n[MIT](https://github.com/lunluen/aplex/blob/master/LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lunluen/aplex", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aplex", "package_url": "https://pypi.org/project/aplex/", "platform": "", "project_url": "https://pypi.org/project/aplex/", "project_urls": {"Homepage": "https://github.com/lunluen/aplex"}, "release_url": "https://pypi.org/project/aplex/1.0.1/", "requires_dist": ["uvloop ; extra == 'uvloop'"], "requires_python": ">=3.5.0", "summary": "Run your coroutines and functions in child process or thread like the way using concurrent.futures.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Aplex</h1>\n<p><a href=\"\" rel=\"nofollow\"><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c21478705ab797580e07ccf8ed33752586978250/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6c756e6c75656e2f61706c65782e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://github.com/lunluen/aplex\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5fad8728237b39ea94a838e2cca0221ad84cdd72/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6c756e6c75656e2f61706c65782e7376673f7374796c653d666c6174\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"platform\" src=\"\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"supported pythons\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00c396d0a6ecdcf1038602662deff62965e9eaef/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61706c65782e7376673f7374796c653d666c6174\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac0928a4c07e7d338b1fa1dc9a4235a9424a3821/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61706c65782e7376673f7374796c653d666c6174\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/345c86f0a4ed859b09e3f4f70468f8a8582121e0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6c756e6c75656e2f61706c65782e7376673f7374796c653d666c6174\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bff52730a2ae2d099c41ead39e94d7b24915e388/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f323031392e7376673f7374796c653d666c6174\"></a></p>\n<p>Translation:\n<a href=\"https://github.com/lunluen/aplex/blob/master/README_zh_cn.md\" rel=\"nofollow\">\u7b80\u4f53\u4e2d\u6587</a>\n|\n<a href=\"https://github.com/lunluen/aplex/blob/master/misc/README_zh_tw.md\" rel=\"nofollow\">\u7e41\u9ad4\u4e2d\u6587</a></p>\n<p>Aplex is a Python library for combining asyncio with\nmultiprocessing and threading.</p>\n<ul>\n<li>Aplex helps you run coroutines and functions in other process\nor thread with asyncio.</li>\n<li>Aplex provides a usage like that of  standard library <code>concurrent.futures</code>,\nwhich is familiar to you and intuitive.</li>\n<li>Aplex lets you do load balancing in a simple way if you need.</li>\n</ul>\n<h2>Installation</h2>\n<p>For general users, use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to\ninstall aplex.</p>\n<pre>pip install aplex\n</pre>\n<p>For contributors, install with pipenv:</p>\n<pre>git clone https://github.com/lunluen/aplex.git\n<span class=\"nb\">cd</span> aplex\npipenv install --dev\n</pre>\n<p>or with setuptools</p>\n<pre>git clone https://github.com/lunluen/aplex.git\n<span class=\"nb\">cd</span> aplex\npython setup.py develop\n</pre>\n<h2>Usage</h2>\n<p>Definition to know:</p>\n<blockquote>\n<p>A <code>work</code> is a <code>callable</code> you want to run with asyncio and multiprocessing or threading.\nIt can be a coroutine function or just a function.</p>\n</blockquote>\n<p>In below case, the <code>work</code> is the coroutine function <code>demo</code>.</p>\n<h3>Submit</h3>\n<p>You can submit your work like:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aplex</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessAsyncPoolExecutor</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">demo</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">ProcessAsyncPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">pool_size</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">demo</span><span class=\"p\">,</span> <span class=\"s1\">'http://httpbin.org'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Status: </span><span class=\"si\">%d</span><span class=\"s1\">.'</span> <span class=\"o\">%</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>\n</pre>\n<p><em>Note</em>: If you are running python on windows, <code>if __name__ == '__main__':</code>\nis necessary. That's the design of multiprocessing.</p>\n<p>Result:</p>\n<pre>Status: <span class=\"m\">200</span>\n</pre>\n<h3>Map</h3>\n<p>For multiple works, try <code>map</code>:</p>\n<pre><span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org'</span> <span class=\"k\">for</span> <span class=\"n\">__</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">status</span> <span class=\"ow\">in</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">demo</span><span class=\"p\">,</span> <span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Status: </span><span class=\"si\">%d</span><span class=\"s1\">.'</span> <span class=\"o\">%</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n</pre>\n<h3>Awaiting results</h3>\n<p>Aplex allows one to await results with loop that already exists. It's quite simple.</p>\n<p>Just set keyword argument <code>awaitable</code>  to <code>True</code>!</p>\n<p>For example:</p>\n<pre><span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">ProcessAsyncPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">awaitable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Then</p>\n<pre><span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">demo</span><span class=\"p\">,</span> <span class=\"s1\">'http://httpbin.org'</span><span class=\"p\">)</span>\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">future</span>\n</pre>\n<p>How about map?</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">status</span> <span class=\"ow\">in</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">demo</span><span class=\"p\">,</span> <span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Status: </span><span class=\"si\">%d</span><span class=\"s1\">.'</span> <span class=\"o\">%</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n</pre>\n<h3>Load balancing</h3>\n<p>In aplex, each worker is the process or thread on your computer. That is, they have the same capability computing.\n<em>But</em>, your works might have different workloads. Then you need a load balancer.</p>\n<p>Aplex provides some useful load balancers. They are <code>RoundRobin</code>, <code>Random</code>, and <code>Average</code>. The default is <code>RoundRobin</code>.</p>\n<p>Simply set this in contruction keyword argument:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aplex.load_balancers</span> <span class=\"kn\">import</span> <span class=\"n\">Average</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">ProcessAsyncPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">load_balancer</span><span class=\"o\">=</span><span class=\"n\">Average</span><span class=\"p\">)</span>\n</pre>\n<p>Done. So easy. :100:</p>\n<p>You can also customize one:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aplex</span> <span class=\"kn\">import</span> <span class=\"n\">LoadBalancer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAwesomeLoadBalancer</span><span class=\"p\">(</span><span class=\"n\">LoadBalancer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>  <span class=\"c1\"># Don't forget this.</span>\n        <span class=\"n\">awesome_attribute</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello Aplex!'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_proper_worker</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">the_poor_guy</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">workers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">the_poor_guy</span>\n</pre>\n<p>See details of how to implement a load balancer at: <a href=\"\" rel=\"nofollow\"></a></p>\n<h3>Worker loop factory</h3>\n<p>By the way, if you think the build-in asyncio loop is too slow:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uvloop</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">ProcessAsyncPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">worker_loop_factory</span><span class=\"o\">=</span><span class=\"n\">uvloop</span><span class=\"o\">.</span><span class=\"n\">Loop</span><span class=\"p\">)</span>\n</pre>\n<h2>Like this?</h2>\n<p>Scroll up and click <code>Watch - Releases only</code> and <code>Star</code> as a thumbs up! :+1:</p>\n<h2>Any feedback?</h2>\n<p>Feel free to open a issue (just don't abuse it).</p>\n<p>Or contact me: <code>mas581301@gmail.com</code> :mailbox:</p>\n<p>Anything about aplex is welcome, such like bugs, system design, variable naming, even English grammer of docstrings!</p>\n<h2>How to contribute</h2>\n<p>Contribution are welcome.</p>\n<p>Asking and advising are also kinds of contribution.</p>\n<p>Please see <a href=\"https://github.com/lunluen/aplex/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a></p>\n<h2>License</h2>\n<p><a href=\"https://github.com/lunluen/aplex/blob/master/LICENSE\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 4803175, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "41735ce6e6c7789df1a7eec94909cd72", "sha256": "1f9e12bb3802703d475776055ded237cb64f69ccf96e496fa64374c0ad6eafab"}, "downloads": -1, "filename": "aplex-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "41735ce6e6c7789df1a7eec94909cd72", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 35096, "upload_time": "2019-02-10T20:04:00", "upload_time_iso_8601": "2019-02-10T20:04:00.807303Z", "url": "https://files.pythonhosted.org/packages/ef/67/fc4f21422741b5cb9511f2a95d45290d8a15326c8184cfb640c47b3482dd/aplex-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c21477f83010c58fa7a85eb4d872ae71", "sha256": "e393fabe502f827fcc02b7dda68489c9b8562ed10d38a58089f73b54fbef5ea9"}, "downloads": -1, "filename": "aplex-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c21477f83010c58fa7a85eb4d872ae71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 500730, "upload_time": "2019-02-10T20:04:04", "upload_time_iso_8601": "2019-02-10T20:04:04.338291Z", "url": "https://files.pythonhosted.org/packages/cb/97/9af8e96a68ba698c86f5a808cd8ce50b64380d015a84ac705fc0ea088aa3/aplex-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41735ce6e6c7789df1a7eec94909cd72", "sha256": "1f9e12bb3802703d475776055ded237cb64f69ccf96e496fa64374c0ad6eafab"}, "downloads": -1, "filename": "aplex-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "41735ce6e6c7789df1a7eec94909cd72", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 35096, "upload_time": "2019-02-10T20:04:00", "upload_time_iso_8601": "2019-02-10T20:04:00.807303Z", "url": "https://files.pythonhosted.org/packages/ef/67/fc4f21422741b5cb9511f2a95d45290d8a15326c8184cfb640c47b3482dd/aplex-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c21477f83010c58fa7a85eb4d872ae71", "sha256": "e393fabe502f827fcc02b7dda68489c9b8562ed10d38a58089f73b54fbef5ea9"}, "downloads": -1, "filename": "aplex-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c21477f83010c58fa7a85eb4d872ae71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 500730, "upload_time": "2019-02-10T20:04:04", "upload_time_iso_8601": "2019-02-10T20:04:04.338291Z", "url": "https://files.pythonhosted.org/packages/cb/97/9af8e96a68ba698c86f5a808cd8ce50b64380d015a84ac705fc0ea088aa3/aplex-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:43 2020"}