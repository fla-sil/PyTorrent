{"info": {"author": "CloudSigma AG", "author_email": "dev-support@cloudsigma.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Terminals :: Serial"], "description": "Cepko implements easy-to-use communication with CloudSigma's VMs through a virtual\nserial port without bothering with formatting the messages properly nor parsing the\noutput with the specific and sometimes confusing shell tools for that purpose.\n\nHaving the server definition accessible by the VM can ve useful in various ways.\nFor example it is possible to easily determine from within the VM, which network\ninterfaces are connected to public and which to private network. Another use is\nto pass some data to initial VM setup scripts, like setting the hostname to the\nVM name or passing ssh public keys through server meta.\n\nFor more information take a look at the Server Context section of CloudSigma\nAPI Docs: http://cloudsigma-docs.readthedocs.org/en/latest/server_context.html\n\nUsage\n=====\n\nImports and definitions\n-----------------------\n\n    >>> from cepko import Cepko\n    >>> client = Cepko()\n\n\nFetch the whole server context\n------------------------------\n\n    >>> server_context = client.all()\n    >>> server_context['name']\n\n\nFetch the server's meta\n-----------------------\n\n    >>> meta = client.meta()\n    >>> meta['ssh_public_key']\n    'ssh-rsa AAAAB3NzaC1yc2EAAAAD...'\n\nFetch conrete key from the server context\n-----------------------------------------\n\n    >>> drives = client.get('drives')\n    >>> [key for key in drives[0]['drive']]\n    ['uuid', 'tags', 'media', 'name', 'meta', 'allow_multimount', 'licenses', 'affinities', 'size']\n    >>> drives[0]['drive']['size']\n    10737418240\n\nFetch nested key from the server context\n----------------------------------------\n\n    >>> first_drive = client.get('drives/0/drive')\n    >>> first_drive['size']\n    10737418240", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cloudsigma/cepko", "keywords": "cepko,cloud,cloudsigma,serial port,serial,console", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "cepko", "package_url": "https://pypi.org/project/cepko/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cepko/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cloudsigma/cepko"}, "release_url": "https://pypi.org/project/cepko/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Communication with CloudSigma's VMs through a virtual serial port", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Cepko implements easy-to-use communication with CloudSigma\u2019s VMs through a virtual\nserial port without bothering with formatting the messages properly nor parsing the\noutput with the specific and sometimes confusing shell tools for that purpose.</p>\n<p>Having the server definition accessible by the VM can ve useful in various ways.\nFor example it is possible to easily determine from within the VM, which network\ninterfaces are connected to public and which to private network. Another use is\nto pass some data to initial VM setup scripts, like setting the hostname to the\nVM name or passing ssh public keys through server meta.</p>\n<p>For more information take a look at the Server Context section of CloudSigma\nAPI Docs: <a href=\"http://cloudsigma-docs.readthedocs.org/en/latest/server_context.html\" rel=\"nofollow\">http://cloudsigma-docs.readthedocs.org/en/latest/server_context.html</a></p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"imports-and-definitions\">\n<h3>Imports and definitions</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; from cepko import Cepko\n&gt;&gt;&gt; client = Cepko()\n</pre>\n</blockquote>\n</div>\n<div id=\"fetch-the-whole-server-context\">\n<h3>Fetch the whole server context</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; server_context = client.all()\n&gt;&gt;&gt; server_context['name']\n</pre>\n</blockquote>\n</div>\n<div id=\"fetch-the-server-s-meta\">\n<h3>Fetch the server\u2019s meta</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; meta = client.meta()\n&gt;&gt;&gt; meta['ssh_public_key']\n'ssh-rsa AAAAB3NzaC1yc2EAAAAD...'\n</pre>\n</blockquote>\n</div>\n<div id=\"fetch-conrete-key-from-the-server-context\">\n<h3>Fetch conrete key from the server context</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; drives = client.get('drives')\n&gt;&gt;&gt; [key for key in drives[0]['drive']]\n['uuid', 'tags', 'media', 'name', 'meta', 'allow_multimount', 'licenses', 'affinities', 'size']\n&gt;&gt;&gt; drives[0]['drive']['size']\n10737418240\n</pre>\n</blockquote>\n</div>\n<div id=\"fetch-nested-key-from-the-server-context\">\n<h3>Fetch nested key from the server context</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; first_drive = client.get('drives/0/drive')\n&gt;&gt;&gt; first_drive['size']\n10737418240\n</pre>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1032127, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "77676c221a6114a36c124e252127ef7e", "sha256": "61f1ec5e927f5d4a327406b1eede9522a0e37990df9a320dd17b02598c1cb01d"}, "downloads": -1, "filename": "cepko-1.0.tar.gz", "has_sig": false, "md5_digest": "77676c221a6114a36c124e252127ef7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3017, "upload_time": "2014-02-06T15:13:05", "upload_time_iso_8601": "2014-02-06T15:13:05.675261Z", "url": "https://files.pythonhosted.org/packages/b5/ec/c896014e8cd314f9ce2e1bc5ec03bc2c339b9c981d424809f29a96e11995/cepko-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a19f4eefba6c1ac2b63a0783e89e8ce1", "sha256": "25dff9c302a4a706ab85281ad8940cfb52b0d66670657ca5bb996bc1fd713ab8"}, "downloads": -1, "filename": "cepko-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a19f4eefba6c1ac2b63a0783e89e8ce1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3328, "upload_time": "2014-03-17T10:44:24", "upload_time_iso_8601": "2014-03-17T10:44:24.416833Z", "url": "https://files.pythonhosted.org/packages/88/97/470c067d6fcd3b32986478edad88f1af668ae509c0a8571386b5ba4772cf/cepko-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a19f4eefba6c1ac2b63a0783e89e8ce1", "sha256": "25dff9c302a4a706ab85281ad8940cfb52b0d66670657ca5bb996bc1fd713ab8"}, "downloads": -1, "filename": "cepko-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a19f4eefba6c1ac2b63a0783e89e8ce1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3328, "upload_time": "2014-03-17T10:44:24", "upload_time_iso_8601": "2014-03-17T10:44:24.416833Z", "url": "https://files.pythonhosted.org/packages/88/97/470c067d6fcd3b32986478edad88f1af668ae509c0a8571386b5ba4772cf/cepko-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:47 2020"}