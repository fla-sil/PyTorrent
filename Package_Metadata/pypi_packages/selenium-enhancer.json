{"info": {"author": "Danny Brown", "author_email": "dannybrown37@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Installation\n\n```\npip install selenium-enhancer\n```\n\n# Setting Up a Driver\n\n[ChromeDriver](https://chromedriver.chromium.org/) is recommended as it has more options, but Firefox and \nIE drivers are compatible as well. Set the path to your chosen driver \nas a system environment variable named CHROME_DRIVER, FIREFOX_DRIVER, \nor IE_DRIVER.\n\nI just found this repo: https://pypi.org/project/chromedriver-binary/\nI have not tested it yet, but it might be an easier solution to the \nproblem. Will upate this note after testing.\n\n# Miscellaneous\n\n[PyPi](https://pypi.org/project/selenium-enhancer/0.1/)\n\n# pydoc Output\n\nHelp on module selenium_helper:\n\nNAME\n    selenium_helper\n\nCLASSES\n    builtins.object\n        SeleniumHelper\n\n    class SeleniumHelper(builtins.object)\n     |  A parent class that assists with Selenium testing and automation.\n     |  \n     |  This class is built to be inherited by more specialized tasks that\n     |  will benefit from the Selenium web driver functionality within.\n     |  \n     |  Methods are arranged alphabetically for value.\n     |  \n     |  Methods defined here:\n     |  \n     |  accept_simple_alert(self)\n     |      Method method clicks the OK button in a pop-up alert.\n     |  \n     |  attach_image_file_to_input(self, input_id, img_path)\n     |      Method to attach an image file to input with type=\"file\".\n     |      \n     |      Requires two strings: a partial/unique id of an input element\n     |      and the path of an image file (relative to working directory).\n     |  \n     |  check_box(self, checkbox_id, uncheck=False, return_status=False)\n     |      Method's default behavior is to check unchecked boxes.\n     |      \n     |      Requires a string equal to a partial/unique id or XPath.\n     |      \n     |      * Optional arguments/behavior *\n     |      uncheck=True -- will instead uncheck a checked box.\n     |      return_status=True -- instead returns checked status\n     |  \n     |  check_for_presence_of_element(self, element_id)\n     |      Method returns True if element exists or False if not.\n     |      \n     |      Takes partial but unique ID, XPath, or CSS selector.\n     |  \n     |  clear_input_element(self, element_id)\n     |      Method to clear an input element.\n     |      \n     |      Requires a string equal to a partial/unique id or XPath.\n     |  \n     |  click_button(self, identifier, dbl_click=False, no_js=False)\n     |      Method to click an element (with JavaScript by default).\n     |      \n     |      Requires a string identifier that can be a partial/unique\n     |      id, CSS selector, or XPath.\n     |      \n     |      * Optional arguments/behavior *\n     |      dbl_click=True --  double clicks the element.\n     |      no_js=True -- mimic user click rather than click with JS\n     |  \n     |  get_text_from_element(self, element_id, input=False)\n     |      Method returns text from an element.\n     |      \n     |      Requires a string identifier that can be a partial/unique\n     |      id, CSS selector, or XPath.\n     |      \n     |      If trying to get the current text/value from an input\n     |      element, include `input=True` to do so.\n     |  \n     |  get_text_of_current_selection(self, element_id)\n     |      Method returns selected text from a select element.\n     |      \n     |      Takes an id only (for now).\n     |  \n     |  set_input_elements(self, data)\n     |      Method to set any number of text input elements on a page.\n     |      \n     |      Requires a dictionary with at least one key-value pair but\n     |      can be any size. Keys must be an identifier that can be a\n     |      partial/unique id or XPath. Values should be the desired\n     |      text corresponding to each identifier.\n     |  \n     |  set_select_elements(self, data)\n     |      Method to choose any number of select elements on a page.\n     |      \n     |      Requires a dictionary with at least one key-value pair but\n     |      can be any size. Keys must be an identifier that can be a\n     |      partial/unique ~name~. Values should be the text of the\n     |      desired option to select.\n     |  \n     |  start_chrome_driver(self, detach=False, headless=False, ga_debug=False)\n     |      Method to start the Chrome driver with specified options. \n     |      \n     |      This is where I do most of my work and thus has the most\n     |      extensive option list.\n     |  \n     |  start_firefox_driver(self)\n     |      Method to start the Firefox driver with specified optons.\n     |  \n     |  start_ie_driver(self)\n     |      Method to start the Internet Explorer driver.\n     |  \n     |  switch_to_iframe(self, iframe_id)\n     |      Method to switch to an iframe on a page.\n     |      \n     |      Requires a string identifier that can be a partial/unique\n     |      id or Xpath.\n     |  \n     |  wait_for_page_load(self, timeout=10)\n     |      Method to wait for page to load before continuing.\n     |      \n     |      This method checks for the staleness of the old page\n     |      (i.e., that the new page has loaded) prior to moving\n     |      forward with further actions. Therefore, it only\n     |      works in situations where the URL changes between\n     |      page loads. \n     |      \n     |      Usage:\n     |      \n     |      with self.wait_for_page_load():\n     |          # click a button or do whatever\n     |      # do the next thing that was failing before using this\n     |      \n     |      Thanks to ObeyTheTestingGoat for this delightfully\n     |      borrowed method!\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dannybrown37/SeleniumEnhancer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "selenium-enhancer", "package_url": "https://pypi.org/project/selenium-enhancer/", "platform": "", "project_url": "https://pypi.org/project/selenium-enhancer/", "project_urls": {"Homepage": "https://github.com/dannybrown37/SeleniumEnhancer"}, "release_url": "https://pypi.org/project/selenium-enhancer/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "A package to enhance your Selenium WebDriver experience", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Installation</h1>\n<pre><code>pip install selenium-enhancer\n</code></pre>\n<h1>Setting Up a Driver</h1>\n<p><a href=\"https://chromedriver.chromium.org/\" rel=\"nofollow\">ChromeDriver</a> is recommended as it has more options, but Firefox and\nIE drivers are compatible as well. Set the path to your chosen driver\nas a system environment variable named CHROME_DRIVER, FIREFOX_DRIVER,\nor IE_DRIVER.</p>\n<p>I just found this repo: <a href=\"https://pypi.org/project/chromedriver-binary/\" rel=\"nofollow\">https://pypi.org/project/chromedriver-binary/</a>\nI have not tested it yet, but it might be an easier solution to the\nproblem. Will upate this note after testing.</p>\n<h1>Miscellaneous</h1>\n<p><a href=\"https://pypi.org/project/selenium-enhancer/0.1/\" rel=\"nofollow\">PyPi</a></p>\n<h1>pydoc Output</h1>\n<p>Help on module selenium_helper:</p>\n<p>NAME\nselenium_helper</p>\n<p>CLASSES\nbuiltins.object\nSeleniumHelper</p>\n<pre><code>class SeleniumHelper(builtins.object)\n |  A parent class that assists with Selenium testing and automation.\n |  \n |  This class is built to be inherited by more specialized tasks that\n |  will benefit from the Selenium web driver functionality within.\n |  \n |  Methods are arranged alphabetically for value.\n |  \n |  Methods defined here:\n |  \n |  accept_simple_alert(self)\n |      Method method clicks the OK button in a pop-up alert.\n |  \n |  attach_image_file_to_input(self, input_id, img_path)\n |      Method to attach an image file to input with type=\"file\".\n |      \n |      Requires two strings: a partial/unique id of an input element\n |      and the path of an image file (relative to working directory).\n |  \n |  check_box(self, checkbox_id, uncheck=False, return_status=False)\n |      Method's default behavior is to check unchecked boxes.\n |      \n |      Requires a string equal to a partial/unique id or XPath.\n |      \n |      * Optional arguments/behavior *\n |      uncheck=True -- will instead uncheck a checked box.\n |      return_status=True -- instead returns checked status\n |  \n |  check_for_presence_of_element(self, element_id)\n |      Method returns True if element exists or False if not.\n |      \n |      Takes partial but unique ID, XPath, or CSS selector.\n |  \n |  clear_input_element(self, element_id)\n |      Method to clear an input element.\n |      \n |      Requires a string equal to a partial/unique id or XPath.\n |  \n |  click_button(self, identifier, dbl_click=False, no_js=False)\n |      Method to click an element (with JavaScript by default).\n |      \n |      Requires a string identifier that can be a partial/unique\n |      id, CSS selector, or XPath.\n |      \n |      * Optional arguments/behavior *\n |      dbl_click=True --  double clicks the element.\n |      no_js=True -- mimic user click rather than click with JS\n |  \n |  get_text_from_element(self, element_id, input=False)\n |      Method returns text from an element.\n |      \n |      Requires a string identifier that can be a partial/unique\n |      id, CSS selector, or XPath.\n |      \n |      If trying to get the current text/value from an input\n |      element, include `input=True` to do so.\n |  \n |  get_text_of_current_selection(self, element_id)\n |      Method returns selected text from a select element.\n |      \n |      Takes an id only (for now).\n |  \n |  set_input_elements(self, data)\n |      Method to set any number of text input elements on a page.\n |      \n |      Requires a dictionary with at least one key-value pair but\n |      can be any size. Keys must be an identifier that can be a\n |      partial/unique id or XPath. Values should be the desired\n |      text corresponding to each identifier.\n |  \n |  set_select_elements(self, data)\n |      Method to choose any number of select elements on a page.\n |      \n |      Requires a dictionary with at least one key-value pair but\n |      can be any size. Keys must be an identifier that can be a\n |      partial/unique ~name~. Values should be the text of the\n |      desired option to select.\n |  \n |  start_chrome_driver(self, detach=False, headless=False, ga_debug=False)\n |      Method to start the Chrome driver with specified options. \n |      \n |      This is where I do most of my work and thus has the most\n |      extensive option list.\n |  \n |  start_firefox_driver(self)\n |      Method to start the Firefox driver with specified optons.\n |  \n |  start_ie_driver(self)\n |      Method to start the Internet Explorer driver.\n |  \n |  switch_to_iframe(self, iframe_id)\n |      Method to switch to an iframe on a page.\n |      \n |      Requires a string identifier that can be a partial/unique\n |      id or Xpath.\n |  \n |  wait_for_page_load(self, timeout=10)\n |      Method to wait for page to load before continuing.\n |      \n |      This method checks for the staleness of the old page\n |      (i.e., that the new page has loaded) prior to moving\n |      forward with further actions. Therefore, it only\n |      works in situations where the URL changes between\n |      page loads. \n |      \n |      Usage:\n |      \n |      with self.wait_for_page_load():\n |          # click a button or do whatever\n |      # do the next thing that was failing before using this\n |      \n |      Thanks to ObeyTheTestingGoat for this delightfully\n |      borrowed method!\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n</code></pre>\n\n          </div>"}, "last_serial": 7042188, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "216eb59e9e6ffec4e619d8a0cf91c1ff", "sha256": "a1c9854f144c21fd0004f5f98d11093d934c4c4fc44aeee631efb30b78ea73f5"}, "downloads": -1, "filename": "selenium_enhancer-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "216eb59e9e6ffec4e619d8a0cf91c1ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7540, "upload_time": "2020-03-23T15:19:19", "upload_time_iso_8601": "2020-03-23T15:19:19.049052Z", "url": "https://files.pythonhosted.org/packages/02/6e/86f375de6db0a22dcd15d493add4bc805f634468d5c38ab0559fd072d0fc/selenium_enhancer-0.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "867a35e0a4aa01e73ffaba32dc5ad1b6", "sha256": "18308e0eb289bc0b1062e0f5267c1166ac56790d6772354afb1bec798f5992b9"}, "downloads": -1, "filename": "selenium_enhancer-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "867a35e0a4aa01e73ffaba32dc5ad1b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7850, "upload_time": "2020-03-24T11:49:35", "upload_time_iso_8601": "2020-03-24T11:49:35.596206Z", "url": "https://files.pythonhosted.org/packages/e3/6f/c8e8653c3e706944835b5139a606661507629960bc9842e11692c26668f8/selenium_enhancer-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "457bddcf81b82f09bf1ae54d835d721e", "sha256": "598227ee008153d31de7e36982f09cb29bbde51e4862f09d2fd57a18571ee563"}, "downloads": -1, "filename": "selenium_enhancer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "457bddcf81b82f09bf1ae54d835d721e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6201, "upload_time": "2020-03-24T11:49:36", "upload_time_iso_8601": "2020-03-24T11:49:36.907274Z", "url": "https://files.pythonhosted.org/packages/04/8c/811f5c6d30f603c706773c2c6c26b363e0c89a64a73b12d11033549ff768/selenium_enhancer-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b700797a338d4c944b75d514f5a52bd5", "sha256": "52d3953f6e4559e9ce38319d859cc3434c712d21e5b5bfdb6f3034f9d6b0bb1c"}, "downloads": -1, "filename": "selenium_enhancer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b700797a338d4c944b75d514f5a52bd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3696, "upload_time": "2020-04-17T17:51:58", "upload_time_iso_8601": "2020-04-17T17:51:58.268238Z", "url": "https://files.pythonhosted.org/packages/cc/00/bd79658492c8ba2a6ae0bf7e5d37635db49e424e81f7f1f3f8b722b8732b/selenium_enhancer-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "bbda1c09de5c881cefd202fcbe7ac669", "sha256": "bb95116b2e05ef48c259bc094eaa7e05bb0e233d64d9f833dcb9cc6159bc96e3"}, "downloads": -1, "filename": "selenium_enhancer-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "bbda1c09de5c881cefd202fcbe7ac669", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11701, "upload_time": "2020-04-17T17:51:56", "upload_time_iso_8601": "2020-04-17T17:51:56.983446Z", "url": "https://files.pythonhosted.org/packages/f8/3a/fe27cc9d018508982727258e2e1eba09544abe649fd257e7482f7f90dbfd/selenium_enhancer-0.1.4-py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "727a87f446c1e408845aec10675dbb30", "sha256": "4ebfaba207957f821fd2e3d893d2cbf1b6e276e108888d9609fc550b5531a5e1"}, "downloads": -1, "filename": "selenium_enhancer-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "727a87f446c1e408845aec10675dbb30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15434, "upload_time": "2020-04-17T18:05:13", "upload_time_iso_8601": "2020-04-17T18:05:13.095705Z", "url": "https://files.pythonhosted.org/packages/e1/47/c0490953db23dc3ec0d418685036e04e1ea66f64fe6dea530caea1719e26/selenium_enhancer-0.1.5-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "727a87f446c1e408845aec10675dbb30", "sha256": "4ebfaba207957f821fd2e3d893d2cbf1b6e276e108888d9609fc550b5531a5e1"}, "downloads": -1, "filename": "selenium_enhancer-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "727a87f446c1e408845aec10675dbb30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15434, "upload_time": "2020-04-17T18:05:13", "upload_time_iso_8601": "2020-04-17T18:05:13.095705Z", "url": "https://files.pythonhosted.org/packages/e1/47/c0490953db23dc3ec0d418685036e04e1ea66f64fe6dea530caea1719e26/selenium_enhancer-0.1.5-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:55:29 2020"}