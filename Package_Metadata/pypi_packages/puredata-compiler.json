{"info": {"author": "Dylan Burati", "author_email": "dylanburati@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Multimedia :: Sound/Audio"], "description": "# PureData Compiler\n\nThis package allows you to write patches for [PureData](https://puredata.info) in Python.\n\n## Install\n\n```bash\npython -m pip install puredata-compiler  # requires Python >=3.5\n```\n\n## Usage\n\nThe compiler gives you **creator functions** to compose a patch. These functions\nadd elements to the patch, using the content and connections you provide.\n\n```python\nfrom puredata_compiler import Patch, write_file\n\n\ndef example():\n    \"\"\"Patch that increments a counter\"\"\"\n    patch = Patch()\n    obj, msg, floatatom, connect = patch.get_creators('obj, msg, floatatom, connect')\n\n    bang = msg('bang')\n    delay_params = msg('500', new_row=0, new_col=1)\n    delay_trig = obj('t b f', delay_params[0])\n    delay = obj('delay', delay_trig[0], delay_trig[1])\n\n    start_val = obj('f', (bang[0], delay[0]), x_pos=25, y_pos=125)\n    increment = floatatom(new_row=0)\n    current_val = obj('+', start_val[0], increment[0])\n    # connect is different - it takes an existing element and adds connections,\n    # so you can create circular structures\n    connect(start_val, (), current_val[0])\n    current_val_display = floatatom(current_val[0])\n\n    return patch\n\nif __name__ == \"__main__\":\n    pd_example = example()\n    write_file('pd_example.pd', str(pd_example))\n```\n\n### Result\n\n![pd_example.pd](https://dylanburati.github.io/assets/puredata-compiler1.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dylanburati/puredata-compiler", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "puredata-compiler", "package_url": "https://pypi.org/project/puredata-compiler/", "platform": "", "project_url": "https://pypi.org/project/puredata-compiler/", "project_urls": {"Homepage": "https://github.com/dylanburati/puredata-compiler"}, "release_url": "https://pypi.org/project/puredata-compiler/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A tool for writing PureData patches", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PureData Compiler</h1>\n<p>This package allows you to write patches for <a href=\"https://puredata.info\" rel=\"nofollow\">PureData</a> in Python.</p>\n<h2>Install</h2>\n<pre>python -m pip install puredata-compiler  <span class=\"c1\"># requires Python &gt;=3.5</span>\n</pre>\n<h2>Usage</h2>\n<p>The compiler gives you <strong>creator functions</strong> to compose a patch. These functions\nadd elements to the patch, using the content and connections you provide.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">puredata_compiler</span> <span class=\"kn\">import</span> <span class=\"n\">Patch</span><span class=\"p\">,</span> <span class=\"n\">write_file</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Patch that increments a counter\"\"\"</span>\n    <span class=\"n\">patch</span> <span class=\"o\">=</span> <span class=\"n\">Patch</span><span class=\"p\">()</span>\n    <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">floatatom</span><span class=\"p\">,</span> <span class=\"n\">connect</span> <span class=\"o\">=</span> <span class=\"n\">patch</span><span class=\"o\">.</span><span class=\"n\">get_creators</span><span class=\"p\">(</span><span class=\"s1\">'obj, msg, floatatom, connect'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">bang</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">(</span><span class=\"s1\">'bang'</span><span class=\"p\">)</span>\n    <span class=\"n\">delay_params</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">(</span><span class=\"s1\">'500'</span><span class=\"p\">,</span> <span class=\"n\">new_row</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">new_col</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">delay_trig</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"p\">(</span><span class=\"s1\">'t b f'</span><span class=\"p\">,</span> <span class=\"n\">delay_params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">delay</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"p\">(</span><span class=\"s1\">'delay'</span><span class=\"p\">,</span> <span class=\"n\">delay_trig</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">delay_trig</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n    <span class=\"n\">start_val</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"p\">(</span><span class=\"s1\">'f'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">bang</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">delay</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">x_pos</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">y_pos</span><span class=\"o\">=</span><span class=\"mi\">125</span><span class=\"p\">)</span>\n    <span class=\"n\">increment</span> <span class=\"o\">=</span> <span class=\"n\">floatatom</span><span class=\"p\">(</span><span class=\"n\">new_row</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">current_val</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"p\">(</span><span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"n\">start_val</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">increment</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"c1\"># connect is different - it takes an existing element and adds connections,</span>\n    <span class=\"c1\"># so you can create circular structures</span>\n    <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">start_val</span><span class=\"p\">,</span> <span class=\"p\">(),</span> <span class=\"n\">current_val</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">current_val_display</span> <span class=\"o\">=</span> <span class=\"n\">floatatom</span><span class=\"p\">(</span><span class=\"n\">current_val</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">patch</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">pd_example</span> <span class=\"o\">=</span> <span class=\"n\">example</span><span class=\"p\">()</span>\n    <span class=\"n\">write_file</span><span class=\"p\">(</span><span class=\"s1\">'pd_example.pd'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pd_example</span><span class=\"p\">))</span>\n</pre>\n<h3>Result</h3>\n<p><img alt=\"pd_example.pd\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe0f5480bc86fb8473f71fdb6275d5f3185a7b0e/68747470733a2f2f64796c616e6275726174692e6769746875622e696f2f6173736574732f70757265646174612d636f6d70696c6572312e706e67\"></p>\n\n          </div>"}, "last_serial": 5723189, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "da19d351a05903eb95f6e20b545f03c8", "sha256": "5d42009c518b549cf764eef04f37eb2bab93a518d8af0cdc41ca8dd2543bea52"}, "downloads": -1, "filename": "puredata_compiler-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "da19d351a05903eb95f6e20b545f03c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5709, "upload_time": "2019-08-23T23:47:50", "upload_time_iso_8601": "2019-08-23T23:47:50.443194Z", "url": "https://files.pythonhosted.org/packages/e8/f4/9d63d50bac18a586c055981a169b22bcb725b01ee5fbb450d96470d98261/puredata_compiler-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dda1c8e66ba9688ca396fea47b1ec78b", "sha256": "3f595b910de27e82119b645db5a9d3a7f3fc5ce2502386794742a45a242cd282"}, "downloads": -1, "filename": "puredata-compiler-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dda1c8e66ba9688ca396fea47b1ec78b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5142, "upload_time": "2019-08-23T23:47:52", "upload_time_iso_8601": "2019-08-23T23:47:52.747397Z", "url": "https://files.pythonhosted.org/packages/81/d3/dc91a6634ea1acc28912b411dec7733a07c3c19172793974a9f8f7aa1995/puredata-compiler-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da19d351a05903eb95f6e20b545f03c8", "sha256": "5d42009c518b549cf764eef04f37eb2bab93a518d8af0cdc41ca8dd2543bea52"}, "downloads": -1, "filename": "puredata_compiler-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "da19d351a05903eb95f6e20b545f03c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5709, "upload_time": "2019-08-23T23:47:50", "upload_time_iso_8601": "2019-08-23T23:47:50.443194Z", "url": "https://files.pythonhosted.org/packages/e8/f4/9d63d50bac18a586c055981a169b22bcb725b01ee5fbb450d96470d98261/puredata_compiler-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dda1c8e66ba9688ca396fea47b1ec78b", "sha256": "3f595b910de27e82119b645db5a9d3a7f3fc5ce2502386794742a45a242cd282"}, "downloads": -1, "filename": "puredata-compiler-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dda1c8e66ba9688ca396fea47b1ec78b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5142, "upload_time": "2019-08-23T23:47:52", "upload_time_iso_8601": "2019-08-23T23:47:52.747397Z", "url": "https://files.pythonhosted.org/packages/81/d3/dc91a6634ea1acc28912b411dec7733a07c3c19172793974a9f8f7aa1995/puredata-compiler-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:23 2020"}