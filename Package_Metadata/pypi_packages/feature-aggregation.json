{"info": {"author": "Despoina Paschalidou <paschalidoud@gmail.com>, Angelos Katharopoulos <katharas@gmail.com>", "author_email": "paschalidoud@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering"], "description": "Local feature aggregation\n=========================\n\nThis is a library that implements methods to aggregate local features\n(mainly for multimedia) into a single global feature that can be used\neasily with any classifier.\n\nDependencies\n------------\n\nThe library depends on **scikit-learn** and all the feature aggregation\nmethods extend the scikit-learn BaseEstimator class.\n\nExample\n-------\n\n.. code:: python\n\n    import numpy as np\n    from feature_aggregation import BagOfWords, FisherVectors\n\n    X = np.random.rand(1000, 2)\n    bow = BagOfWords(10)\n    fv = FisherVectors(10)\n\n    bow.fit(X)\n    fv.fit(X)\n\n    G1 = bow.transform(np.random.rand(10, 100, 2))\n    G2 = fv.transform([\n        np.random.rand(int(np.random.rand()*100), 2) for _ in range(10)\n    ])\n\nA more complex example using OpenCV to extract dense SIFT and then\ntransform them using Bag Of Words and train an SVM with chi square\nadditive kernel.\n\n.. code:: python\n\n    import numpy as np\n    import cv2\n    from sklearn.datasets import fetch_olivetti_faces\n    from sklearn.kernel_approximation import AdditiveChi2Sampler\n    from sklearn.metrics import classification_report\n    from sklearn.pipeline import Pipeline\n    from sklearn.svm import LinearSVC\n\n    from feature_aggregation import BagOfWords\n\n    def sift(*args, **kwargs):\n        try:\n            return cv2.xfeatures2d.SIFT_create(*args, **kwargs)\n        except:\n            return cv2.SIFT()\n\n    def dsift(img, step=5):\n        keypoints = [\n            cv2.KeyPoint(x, y, step)\n            for y in range(0, img.shape[0], step)\n            for x in range(0, img.shape[1], step)\n        ]\n        features = sift().compute(img, keypoints)[1]\n        features /= features.sum(axis=1).reshape(-1, 1)\n        return features\n\n    # Generate dense SIFT features\n    faces = fetch_olivetti_faces()\n    features = [\n        dsift((x.reshape(64, 64, 1)*255).astype(np.uint8))\n        for x in faces.data\n    ]\n\n    # Aggregate those features with bag of words using online training\n    bow = BagOfWords(100)\n    for i in range(2):\n        for j in range(0, len(features), 10):\n            bow.partial_fit(features[j:j+10])\n    faces_bow = bow.transform(features)\n\n    # Split in training and test set\n    train = np.arange(len(features))\n    np.random.shuffle(train)\n    test = train[200:]\n    train = train[:200]\n\n    # Train and evaluate\n    svm = Pipeline([(\"chi2\", AdditiveChi2Sampler()), (\"svm\", LinearSVC(C=10))])\n    svm.fit(faces_bow[train], faces.target[train])\n    print(classification_report(faces.target[test], svm.predict(faces_bow[test])))\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "feature-aggregation", "package_url": "https://pypi.org/project/feature-aggregation/", "platform": "", "project_url": "https://pypi.org/project/feature-aggregation/", "project_urls": null, "release_url": "https://pypi.org/project/feature-aggregation/0.3/", "requires_dist": ["scikit-learn"], "requires_python": "", "summary": "Aggregate local features into global features", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a library that implements methods to aggregate local features\n(mainly for multimedia) into a single global feature that can be used\neasily with any classifier.</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>The library depends on <strong>scikit-learn</strong> and all the feature aggregation\nmethods extend the scikit-learn BaseEstimator class.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">feature_aggregation</span> <span class=\"kn\">import</span> <span class=\"n\">BagOfWords</span><span class=\"p\">,</span> <span class=\"n\">FisherVectors</span>\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">bow</span> <span class=\"o\">=</span> <span class=\"n\">BagOfWords</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">fv</span> <span class=\"o\">=</span> <span class=\"n\">FisherVectors</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">bow</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"n\">fv</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"n\">G1</span> <span class=\"o\">=</span> <span class=\"n\">bow</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">G2</span> <span class=\"o\">=</span> <span class=\"n\">fv</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">([</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">()</span><span class=\"o\">*</span><span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n</pre>\n<p>A more complex example using OpenCV to extract dense SIFT and then\ntransform them using Bag Of Words and train an SVM with chi square\nadditive kernel.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_olivetti_faces</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.kernel_approximation</span> <span class=\"kn\">import</span> <span class=\"n\">AdditiveChi2Sampler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">classification_report</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.svm</span> <span class=\"kn\">import</span> <span class=\"n\">LinearSVC</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">feature_aggregation</span> <span class=\"kn\">import</span> <span class=\"n\">BagOfWords</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sift</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">xfeatures2d</span><span class=\"o\">.</span><span class=\"n\">SIFT_create</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">SIFT</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">dsift</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">keypoints</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">KeyPoint</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">step</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">step</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"n\">sift</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">keypoints</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">features</span> <span class=\"o\">/=</span> <span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">features</span>\n\n<span class=\"c1\"># Generate dense SIFT features</span>\n<span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">fetch_olivetti_faces</span><span class=\"p\">()</span>\n<span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">dsift</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">faces</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Aggregate those features with bag of words using online training</span>\n<span class=\"n\">bow</span> <span class=\"o\">=</span> <span class=\"n\">BagOfWords</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">),</span> <span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">bow</span><span class=\"o\">.</span><span class=\"n\">partial_fit</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">:</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n<span class=\"n\">faces_bow</span> <span class=\"o\">=</span> <span class=\"n\">bow</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Split in training and test set</span>\n<span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">))</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">)</span>\n<span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">train</span><span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">:]</span>\n<span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">train</span><span class=\"p\">[:</span><span class=\"mi\">200</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Train and evaluate</span>\n<span class=\"n\">svm</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">([(</span><span class=\"s2\">\"chi2\"</span><span class=\"p\">,</span> <span class=\"n\">AdditiveChi2Sampler</span><span class=\"p\">()),</span> <span class=\"p\">(</span><span class=\"s2\">\"svm\"</span><span class=\"p\">,</span> <span class=\"n\">LinearSVC</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))])</span>\n<span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">faces_bow</span><span class=\"p\">[</span><span class=\"n\">train</span><span class=\"p\">],</span> <span class=\"n\">faces</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">[</span><span class=\"n\">train</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">faces</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">],</span> <span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">faces_bow</span><span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">])))</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2646406, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "66adf5ec3cb3f4dba0a5dcf4ddcff5be", "sha256": "c866576e044bc2eb2dfd4e05cfe2781a393d8a183c4602d197a78e4d6c12abaf"}, "downloads": -1, "filename": "feature_aggregation-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "66adf5ec3cb3f4dba0a5dcf4ddcff5be", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10546, "upload_time": "2016-12-15T01:48:48", "upload_time_iso_8601": "2016-12-15T01:48:48.394889Z", "url": "https://files.pythonhosted.org/packages/20/f0/dd56e251f62e5a0f8a3d04496de6847059a44deb6e51a566091104c7f7a6/feature_aggregation-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "fe1b4c973ae4289bd68d31692ed57b12", "sha256": "4cc88c59538b1f24c49efa5091c99f8621e4c5f468cccf9863e542e4c812488d"}, "downloads": -1, "filename": "feature_aggregation-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fe1b4c973ae4289bd68d31692ed57b12", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9487, "upload_time": "2016-12-16T10:11:04", "upload_time_iso_8601": "2016-12-16T10:11:04.690473Z", "url": "https://files.pythonhosted.org/packages/e3/98/757ace8ef5971c544758c6841bd5ccd7a83f364f183ae21bb998ba59d7ca/feature_aggregation-0.2-py2.py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "232b1731d0de41c9742f2b1b627b179c", "sha256": "9edd66f946dffdf6c4ae3942e13fb5fa8c464efd6525a777d879c241dddd7e07"}, "downloads": -1, "filename": "feature_aggregation-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "232b1731d0de41c9742f2b1b627b179c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13160, "upload_time": "2017-02-16T09:39:38", "upload_time_iso_8601": "2017-02-16T09:39:38.286414Z", "url": "https://files.pythonhosted.org/packages/21/51/317a3238ba37c30763177651fb9751f3f545abe021e446ed1e9b5cdc57f5/feature_aggregation-0.3-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "232b1731d0de41c9742f2b1b627b179c", "sha256": "9edd66f946dffdf6c4ae3942e13fb5fa8c464efd6525a777d879c241dddd7e07"}, "downloads": -1, "filename": "feature_aggregation-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "232b1731d0de41c9742f2b1b627b179c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13160, "upload_time": "2017-02-16T09:39:38", "upload_time_iso_8601": "2017-02-16T09:39:38.286414Z", "url": "https://files.pythonhosted.org/packages/21/51/317a3238ba37c30763177651fb9751f3f545abe021e446ed1e9b5cdc57f5/feature_aggregation-0.3-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:43:06 2020"}