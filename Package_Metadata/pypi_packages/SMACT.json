{"info": {"author": "Daniel W. Davies", "author_email": "d.davies16@imperial.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering"], "description": "[![DOI](https://zenodo.org/badge/14117740.svg)](https://zenodo.org/badge/latestdoi/14117740)\n[![Documentation Status](https://readthedocs.org/projects/smact/badge/?version=latest)](http://smact.readthedocs.org/en/latest/?badge=latest)\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Build Status](https://travis-ci.org/WMD-group/SMACT.svg?branch=master)](https://travis-ci.org/WMD-group/SMACT)\n[![DOI](http://joss.theoj.org/papers/10.21105/joss.01361/status.svg)](https://doi.org/10.21105/joss.01361)\n[![HitCount](http://hits.dwyl.io/wmd-group/smact.svg)](http://hits.dwyl.io/wmd-group/smact)\n\nSMACT\n=====\n\n**Semiconducting Materials from Analogy and Chemical Theory** (SMACT) is a collection of rapid screening tools that uses data about chemical elements.\n\n- **Documentation:** https://smact.readthedocs.io/en/latest/\n- **Examples folder:** https://github.com/WMD-group/SMACT/tree/master/examples\n\n![](SMACT.png)\n\n*If you torture the data enough, nature will always confess* - Roland Coase (from 'How should economists choose?')\n\nStatement of need\n--------\nThere is a strong demand for functional materials across a wide range of technologies. The motivation can include cost reduction, performance enhancement, or to enable a new application. Data collections such as the [Materials Project](https://www.materialsproject.org), [NREL Materials Database](http://materials.nrel.gov) and the [Open Quantum Materials Database](http://oqmd.org) are valuable resources, but they largely cover the properties of *known* compounds as calculated using high-level quantum mechanical theories.\n\nWe have developed low-cost procedures for screening hypothetical materials in SMACT. This framework can be used for simple calculations on your own computer. SMACT follows a top-down approach where a set of element combinations is generated and then screened using rapid chemical filters. It can be used as part of a multi-technique workflow or to feed machine learning models for materials.\n\n\n![](smact_simple.gif)\n\n\nGetting started\n-----\n\nSMACT's features are accessed through Python scripts, importing classes and functions as needed.\nThe best place to start is looking at [the docs](https://smact.readthedocs.io/en/latest/), which highlight some simple examples of how these classes and functions can be used.\nExtended examples are available in [our examples folder](https://github.com/WMD-group/SMACT/tree/master/examples).\n\nCode features\n--------\n- At the core of SMACT are [Element](https://smact.readthedocs.io/en/latest/smact.html#smact.Element) and [Species](https://smact.readthedocs.io/en/latest/smact.html#smact.Species) (element in a given oxidation state) classes that have various properties associated with them. \n\n- The various oxidation states that are accessible to each element are included in their properties.\n\n- Element compositions can be screened through based on the heuristic filters of charge neutrality and electronegativity order. This is handled using the [screening module](https://smact.readthedocs.io/en/latest/smact.screening.html) and [this publication](https://www.cell.com/chem/fulltext/S2451-9294(16)30155-3) describes the underlying theory. An example procedure is [outlined in the docs](https://smact.readthedocs.io/en/latest/examples.html#neutral-combinations) and further examples can be found in the [counting examples subfolder](https://github.com/WMD-group/SMACT/tree/master/examples/Counting).\n\n- Further filters can be applied to generated lists of compositions in order to screen for particular properties. These properties are either intrinsic properties of elements or are calculated for compositions using the [properties module](https://smact.readthedocs.io/en/latest/smact.properties.html). For example: \n  - A use case is shown in [this publication](https://pubs.rsc.org/en/content/articlehtml/2018/sc/c7sc03961a), in which 160,000 chemical compositions are screened based on optical band gap calculated using the [solid-state energy scale](https://www.sciencedirect.com/science/article/pii/S0022459615300888).\n  - The [oxidation_states module](https://smact.readthedocs.io/en/latest/smact.oxidation_states.html) can be used to filter out compositions containing metals in unlikely oxidation states according to [a data-driven model](https://pubs.rsc.org/en/content/articlelanding/2018/fd/c8fd00032h#!divAbstract).\n\n- Compositions can also be filtered based on sustainability via the abundance of elements in the Earth's crust or via the [HHI scale](https://pubs.acs.org/doi/10.1021/cm400893e). \n\n- Compositions can easily be converted for use in Pymatgen or for representation to machine learning algorithms ([see \"next steps\" in this example](https://github.com/WMD-group/SMACT/blob/master/examples/Counting/Generate_compositions_lists.ipynb)).\n\n- The code also has some tools for manipulating common crystal lattice types: \n - Common crystal structure types can be built using the [builder module](https://smact.readthedocs.io/en/latest/smact.builder.html)\n - Lattice parameters can be quickly estimated using ionic radii of the elements for various common crystal structure types using the [lattice_parameters module](https://smact.readthedocs.io/en/latest/smact.lattice_parameters.html).\n - The [lattice module](https://smact.readthedocs.io/en/latest/smact.lattice.html) and [distorter module](https://smact.readthedocs.io/en/latest/smact.distorter.html) rely on the [Atomic Simulation Environment](https://wiki.fysik.dtu.dk/ase/) and can be used to generate unique atomic substitutions on a given crystal structure.  \n\nList of modules\n-------\n\n* **smact** library containing:\n  * **\\_\\_init\\_\\_.py** Contains the core `Element` and `Species` classes.\n  *  **data_loader.py** Handles the loading of external data used to initialise the core `smact.Element` and `smact.Species` classes.\n  *  **screening.py** Used for generating and applying filters to compositional search spaces.\n  *  **properties.py** A collection of tools for estimating useful properties based on composition.\n  * **lattice.py** Given the sites, multiplicities and possible oxidation states\n    at those sites, this reads from the database and generates all possible\n    stoichiometeries.\n  * **builder.py** Builds some common lattice structures, given the chemical\n    composition.\n  * **lattice_parameters.py** Estimation of lattice parameters for various lattice types using covalent/ionic radii.\n  * **distorter.py** A collection of functions for enumerating and then\n    substituting on inequivalent sites of a sub-lattice.\n\nRequirements\n------------\n\nThe main language is Python 3 and has been tested using Python 3.6+.\nBasic requirements are Numpy and Scipy.\nThe [Atomic Simulation Environment](https://wiki.fysik.dtu.dk/ase) (ASE),  [spglib](http://atztogo.github.io/spglib), and [pymatgen](www.pymatgen.org) are also required for many components.\n\nInstallation\n------------\nThe latest stable release of SMACT can be installed via pip which will automatically setup other Python packages as required:\n\n    pip install smact  \n\nAlternatively, the very latest version can be installed using:\n\n    pip install git+git://github.com/WMD-group/SMACT.git\n\nFor developer installation SMACT can be installed from a copy of the source\nrepository (https://github.com/wmd-group/smact); this will be preferred if using experimental code branches.\n\nTo clone the project from Github and make a local installation:\n\n    git clone https://github.com/wmd-group/smact.git\n    cd smact\n    pip install --user -e .\n\nWith -e pip will create links to the source folder so that that changes\nto the code will be immediately reflected on the PATH.\n\n\nLicense and attribution\n-----------------------\n\nPython code and original data tables are licensed under the MIT License.\n\nDevelopment notes\n-----------------\n\n### Bugs, features and questions\nPlease use the [Issue Tracker](https://github.com/WMD-group/smact/issues) to report bugs or request features in the first instance. While we hope that most questions can be answered by searching [the docs](https://smact.readthedocs.io/en/latest/), we welcome new questions on the issue tracker, especially if they helps us improve the docs! For other queries about any aspect of the code, please contact Dan Davies by e-mail: D.Davies16@imperial.ac.uk. \n\n### Code contributions\nWe are always looking for ways to make SMACT better and more useful to the wider community; contributions are very welcome. Please use the [\"Fork and Pull\"](https://guides.github.com/activities/forking/) workflow to make contributions and stick as closely as possible to the following:\n\n- Code style should comply with [PEP8](http://www.python.org/dev/peps/pep-0008) where possible. [Google's house style](https://google.github.io/styleguide/pyguide.html)\nis also helpful, including a good model for docstrings.\n- Please use comments liberally when adding nontrivial features, and take the chance to clean up other people's code while looking at it.\n- Add tests wherever possible, and use the test suite to check if you broke anything.\n\n### Tests\nTesting modules should be pass/fail and wrapped into **tests/test.py**.\nRun the tests using `python -m smact.tests.test -v`.\n(The final `-v` is optional and adds more detail to the output.)\n\nWe also use integrated testing on Github via [travis](https://travis-ci.org).\n\n### List of Developers\nContributors to SMACT: \n- Daniel Davies\n- Keith Butler\n- Adam Jackson\n- Jonathan Skelton\n- Aron Walsh\n- Jarvist Frost\n- Kazuki Morita\n- Alex Moriarty\n- Tim Gauntlet\n\n Thanks to [JOSS](https://github.com/openjournals/joss-reviews/issues/1361) reviewers and editors: \n - Adam Symington\n - Alex Ganose\n - Daniel Katz\n - Lorena Barba\n\nReferences\n----------\n\n[D. W. Davies et al,\n\"SMACT: Semiconducting Materials by Analogy and Chemical Theory\" *JOSS* **4**, 1361 (2019)](https://joss.theoj.org/papers/7efd2f2ad60d25bdccee3fbd3fc11448)\n\n[D. W. Davies et al,\n\"Materials discovery by chemical analogy: role of oxidation states in structure prediction\" *Faraday Discuss.* **211**, 553 (2018)](https://pubs.rsc.org/en/Content/ArticleLanding/2018/FD/C8FD00032H)\n\n[D. W. Davies et al,\n\"Computer-aided design of metal chalcohalide semiconductors: from chemical composition to crystal structure\" *Chem. Sci.* **9**, 1022 (2018)](http://www.cell.com/chem/abstract/S2451-9294(16)30155-3)\n\n[D. W. Davies et al,\n\"Computational screening of all stoichiometric inorganic materials\" *Chem* **1**, 617 (2016)](http://www.cell.com/chem/abstract/S2451-9294(16)30155-3)\n\n[B. R. Pamplin, \"A systematic method of deriving new semiconducting\ncompounds by structural analogy\", *J. Phys. Chem. Solids*\n**25**, 675 (1964)](http://www.sciencedirect.com/science/article/pii/0022369764901763)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/WMD-group/SMACT", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "SMACT", "package_url": "https://pypi.org/project/SMACT/", "platform": "", "project_url": "https://pypi.org/project/SMACT/", "project_urls": {"Homepage": "https://github.com/WMD-group/SMACT"}, "release_url": "https://pypi.org/project/SMACT/2.2/", "requires_dist": ["scipy", "numpy", "spglib", "pymatgen", "ase", "pandas", "pathos"], "requires_python": "", "summary": "Semiconducting Materials by Analogy and Chemical Theory", "version": "2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://zenodo.org/badge/latestdoi/14117740\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6246b5b2770c0b4590cc450bb76ef24487426985/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f31343131373734302e737667\"></a>\n<a href=\"http://smact.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e61162fc4c418462fb5c02e1df2658b0a3401eef/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736d6163742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"made-with-python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68a99107ffdf24c5fb2cc4bca38b7b662e501b97/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d507974686f6e2d3166343235662e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://travis-ci.org/WMD-group/SMACT\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20106ff4211a5ec1600b9ccd3642ef005d9d3e99/68747470733a2f2f7472617669732d63692e6f72672f574d442d67726f75702f534d4143542e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://doi.org/10.21105/joss.01361\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d87a05f41cdd3b7cb55ecb341b448d2a08d257b2/687474703a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30313336312f7374617475732e737667\"></a>\n<a href=\"http://hits.dwyl.io/wmd-group/smact\" rel=\"nofollow\"><img alt=\"HitCount\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf92eb39c77d2b0a953d994ab689ef4726972743/687474703a2f2f686974732e6477796c2e696f2f776d642d67726f75702f736d6163742e737667\"></a></p>\n<h1>SMACT</h1>\n<p><strong>Semiconducting Materials from Analogy and Chemical Theory</strong> (SMACT) is a collection of rapid screening tools that uses data about chemical elements.</p>\n<ul>\n<li><strong>Documentation:</strong> <a href=\"https://smact.readthedocs.io/en/latest/\" rel=\"nofollow\">https://smact.readthedocs.io/en/latest/</a></li>\n<li><strong>Examples folder:</strong> <a href=\"https://github.com/WMD-group/SMACT/tree/master/examples\" rel=\"nofollow\">https://github.com/WMD-group/SMACT/tree/master/examples</a></li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdc79489f60de543b5a52a91ce61e153bdcdddfa/534d4143542e706e67\"></p>\n<p><em>If you torture the data enough, nature will always confess</em> - Roland Coase (from 'How should economists choose?')</p>\n<h2>Statement of need</h2>\n<p>There is a strong demand for functional materials across a wide range of technologies. The motivation can include cost reduction, performance enhancement, or to enable a new application. Data collections such as the <a href=\"https://www.materialsproject.org\" rel=\"nofollow\">Materials Project</a>, <a href=\"http://materials.nrel.gov\" rel=\"nofollow\">NREL Materials Database</a> and the <a href=\"http://oqmd.org\" rel=\"nofollow\">Open Quantum Materials Database</a> are valuable resources, but they largely cover the properties of <em>known</em> compounds as calculated using high-level quantum mechanical theories.</p>\n<p>We have developed low-cost procedures for screening hypothetical materials in SMACT. This framework can be used for simple calculations on your own computer. SMACT follows a top-down approach where a set of element combinations is generated and then screened using rapid chemical filters. It can be used as part of a multi-technique workflow or to feed machine learning models for materials.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fc87756dae1319a434dd784c0c89559e634e9f8/736d6163745f73696d706c652e676966\"></p>\n<h2>Getting started</h2>\n<p>SMACT's features are accessed through Python scripts, importing classes and functions as needed.\nThe best place to start is looking at <a href=\"https://smact.readthedocs.io/en/latest/\" rel=\"nofollow\">the docs</a>, which highlight some simple examples of how these classes and functions can be used.\nExtended examples are available in <a href=\"https://github.com/WMD-group/SMACT/tree/master/examples\" rel=\"nofollow\">our examples folder</a>.</p>\n<h2>Code features</h2>\n<ul>\n<li>\n<p>At the core of SMACT are <a href=\"https://smact.readthedocs.io/en/latest/smact.html#smact.Element\" rel=\"nofollow\">Element</a> and <a href=\"https://smact.readthedocs.io/en/latest/smact.html#smact.Species\" rel=\"nofollow\">Species</a> (element in a given oxidation state) classes that have various properties associated with them.</p>\n</li>\n<li>\n<p>The various oxidation states that are accessible to each element are included in their properties.</p>\n</li>\n<li>\n<p>Element compositions can be screened through based on the heuristic filters of charge neutrality and electronegativity order. This is handled using the <a href=\"https://smact.readthedocs.io/en/latest/smact.screening.html\" rel=\"nofollow\">screening module</a> and <a href=\"https://www.cell.com/chem/fulltext/S2451-9294(16)30155-3\" rel=\"nofollow\">this publication</a> describes the underlying theory. An example procedure is <a href=\"https://smact.readthedocs.io/en/latest/examples.html#neutral-combinations\" rel=\"nofollow\">outlined in the docs</a> and further examples can be found in the <a href=\"https://github.com/WMD-group/SMACT/tree/master/examples/Counting\" rel=\"nofollow\">counting examples subfolder</a>.</p>\n</li>\n<li>\n<p>Further filters can be applied to generated lists of compositions in order to screen for particular properties. These properties are either intrinsic properties of elements or are calculated for compositions using the <a href=\"https://smact.readthedocs.io/en/latest/smact.properties.html\" rel=\"nofollow\">properties module</a>. For example:</p>\n<ul>\n<li>A use case is shown in <a href=\"https://pubs.rsc.org/en/content/articlehtml/2018/sc/c7sc03961a\" rel=\"nofollow\">this publication</a>, in which 160,000 chemical compositions are screened based on optical band gap calculated using the <a href=\"https://www.sciencedirect.com/science/article/pii/S0022459615300888\" rel=\"nofollow\">solid-state energy scale</a>.</li>\n<li>The <a href=\"https://smact.readthedocs.io/en/latest/smact.oxidation_states.html\" rel=\"nofollow\">oxidation_states module</a> can be used to filter out compositions containing metals in unlikely oxidation states according to <a href=\"https://pubs.rsc.org/en/content/articlelanding/2018/fd/c8fd00032h#!divAbstract\" rel=\"nofollow\">a data-driven model</a>.</li>\n</ul>\n</li>\n<li>\n<p>Compositions can also be filtered based on sustainability via the abundance of elements in the Earth's crust or via the <a href=\"https://pubs.acs.org/doi/10.1021/cm400893e\" rel=\"nofollow\">HHI scale</a>.</p>\n</li>\n<li>\n<p>Compositions can easily be converted for use in Pymatgen or for representation to machine learning algorithms (<a href=\"https://github.com/WMD-group/SMACT/blob/master/examples/Counting/Generate_compositions_lists.ipynb\" rel=\"nofollow\">see \"next steps\" in this example</a>).</p>\n</li>\n<li>\n<p>The code also has some tools for manipulating common crystal lattice types:</p>\n</li>\n<li>\n<p>Common crystal structure types can be built using the <a href=\"https://smact.readthedocs.io/en/latest/smact.builder.html\" rel=\"nofollow\">builder module</a></p>\n</li>\n<li>\n<p>Lattice parameters can be quickly estimated using ionic radii of the elements for various common crystal structure types using the <a href=\"https://smact.readthedocs.io/en/latest/smact.lattice_parameters.html\" rel=\"nofollow\">lattice_parameters module</a>.</p>\n</li>\n<li>\n<p>The <a href=\"https://smact.readthedocs.io/en/latest/smact.lattice.html\" rel=\"nofollow\">lattice module</a> and <a href=\"https://smact.readthedocs.io/en/latest/smact.distorter.html\" rel=\"nofollow\">distorter module</a> rely on the <a href=\"https://wiki.fysik.dtu.dk/ase/\" rel=\"nofollow\">Atomic Simulation Environment</a> and can be used to generate unique atomic substitutions on a given crystal structure.</p>\n</li>\n</ul>\n<h2>List of modules</h2>\n<ul>\n<li><strong>smact</strong> library containing:\n<ul>\n<li><strong>__init__.py</strong> Contains the core <code>Element</code> and <code>Species</code> classes.</li>\n<li><strong>data_loader.py</strong> Handles the loading of external data used to initialise the core <code>smact.Element</code> and <code>smact.Species</code> classes.</li>\n<li><strong>screening.py</strong> Used for generating and applying filters to compositional search spaces.</li>\n<li><strong>properties.py</strong> A collection of tools for estimating useful properties based on composition.</li>\n<li><strong>lattice.py</strong> Given the sites, multiplicities and possible oxidation states\nat those sites, this reads from the database and generates all possible\nstoichiometeries.</li>\n<li><strong>builder.py</strong> Builds some common lattice structures, given the chemical\ncomposition.</li>\n<li><strong>lattice_parameters.py</strong> Estimation of lattice parameters for various lattice types using covalent/ionic radii.</li>\n<li><strong>distorter.py</strong> A collection of functions for enumerating and then\nsubstituting on inequivalent sites of a sub-lattice.</li>\n</ul>\n</li>\n</ul>\n<h2>Requirements</h2>\n<p>The main language is Python 3 and has been tested using Python 3.6+.\nBasic requirements are Numpy and Scipy.\nThe <a href=\"https://wiki.fysik.dtu.dk/ase\" rel=\"nofollow\">Atomic Simulation Environment</a> (ASE),  <a href=\"http://atztogo.github.io/spglib\" rel=\"nofollow\">spglib</a>, and <a href=\"www.pymatgen.org\" rel=\"nofollow\">pymatgen</a> are also required for many components.</p>\n<h2>Installation</h2>\n<p>The latest stable release of SMACT can be installed via pip which will automatically setup other Python packages as required:</p>\n<pre><code>pip install smact  \n</code></pre>\n<p>Alternatively, the very latest version can be installed using:</p>\n<pre><code>pip install git+git://github.com/WMD-group/SMACT.git\n</code></pre>\n<p>For developer installation SMACT can be installed from a copy of the source\nrepository (<a href=\"https://github.com/wmd-group/smact\" rel=\"nofollow\">https://github.com/wmd-group/smact</a>); this will be preferred if using experimental code branches.</p>\n<p>To clone the project from Github and make a local installation:</p>\n<pre><code>git clone https://github.com/wmd-group/smact.git\ncd smact\npip install --user -e .\n</code></pre>\n<p>With -e pip will create links to the source folder so that that changes\nto the code will be immediately reflected on the PATH.</p>\n<h2>License and attribution</h2>\n<p>Python code and original data tables are licensed under the MIT License.</p>\n<h2>Development notes</h2>\n<h3>Bugs, features and questions</h3>\n<p>Please use the <a href=\"https://github.com/WMD-group/smact/issues\" rel=\"nofollow\">Issue Tracker</a> to report bugs or request features in the first instance. While we hope that most questions can be answered by searching <a href=\"https://smact.readthedocs.io/en/latest/\" rel=\"nofollow\">the docs</a>, we welcome new questions on the issue tracker, especially if they helps us improve the docs! For other queries about any aspect of the code, please contact Dan Davies by e-mail: <a href=\"mailto:D.Davies16@imperial.ac.uk\">D.Davies16@imperial.ac.uk</a>.</p>\n<h3>Code contributions</h3>\n<p>We are always looking for ways to make SMACT better and more useful to the wider community; contributions are very welcome. Please use the <a href=\"https://guides.github.com/activities/forking/\" rel=\"nofollow\">\"Fork and Pull\"</a> workflow to make contributions and stick as closely as possible to the following:</p>\n<ul>\n<li>Code style should comply with <a href=\"http://www.python.org/dev/peps/pep-0008\" rel=\"nofollow\">PEP8</a> where possible. <a href=\"https://google.github.io/styleguide/pyguide.html\" rel=\"nofollow\">Google's house style</a>\nis also helpful, including a good model for docstrings.</li>\n<li>Please use comments liberally when adding nontrivial features, and take the chance to clean up other people's code while looking at it.</li>\n<li>Add tests wherever possible, and use the test suite to check if you broke anything.</li>\n</ul>\n<h3>Tests</h3>\n<p>Testing modules should be pass/fail and wrapped into <strong>tests/test.py</strong>.\nRun the tests using <code>python -m smact.tests.test -v</code>.\n(The final <code>-v</code> is optional and adds more detail to the output.)</p>\n<p>We also use integrated testing on Github via <a href=\"https://travis-ci.org\" rel=\"nofollow\">travis</a>.</p>\n<h3>List of Developers</h3>\n<p>Contributors to SMACT:</p>\n<ul>\n<li>Daniel Davies</li>\n<li>Keith Butler</li>\n<li>Adam Jackson</li>\n<li>Jonathan Skelton</li>\n<li>Aron Walsh</li>\n<li>Jarvist Frost</li>\n<li>Kazuki Morita</li>\n<li>Alex Moriarty</li>\n<li>Tim Gauntlet</li>\n</ul>\n<p>Thanks to <a href=\"https://github.com/openjournals/joss-reviews/issues/1361\" rel=\"nofollow\">JOSS</a> reviewers and editors:</p>\n<ul>\n<li>Adam Symington</li>\n<li>Alex Ganose</li>\n<li>Daniel Katz</li>\n<li>Lorena Barba</li>\n</ul>\n<h2>References</h2>\n<p><a href=\"https://joss.theoj.org/papers/7efd2f2ad60d25bdccee3fbd3fc11448\" rel=\"nofollow\">D. W. Davies et al,\n\"SMACT: Semiconducting Materials by Analogy and Chemical Theory\" <em>JOSS</em> <strong>4</strong>, 1361 (2019)</a></p>\n<p><a href=\"https://pubs.rsc.org/en/Content/ArticleLanding/2018/FD/C8FD00032H\" rel=\"nofollow\">D. W. Davies et al,\n\"Materials discovery by chemical analogy: role of oxidation states in structure prediction\" <em>Faraday Discuss.</em> <strong>211</strong>, 553 (2018)</a></p>\n<p><a href=\"http://www.cell.com/chem/abstract/S2451-9294(16)30155-3\" rel=\"nofollow\">D. W. Davies et al,\n\"Computer-aided design of metal chalcohalide semiconductors: from chemical composition to crystal structure\" <em>Chem. Sci.</em> <strong>9</strong>, 1022 (2018)</a></p>\n<p><a href=\"http://www.cell.com/chem/abstract/S2451-9294(16)30155-3\" rel=\"nofollow\">D. W. Davies et al,\n\"Computational screening of all stoichiometric inorganic materials\" <em>Chem</em> <strong>1</strong>, 617 (2016)</a></p>\n<p><a href=\"http://www.sciencedirect.com/science/article/pii/0022369764901763\" rel=\"nofollow\">B. R. Pamplin, \"A systematic method of deriving new semiconducting\ncompounds by structural analogy\", <em>J. Phys. Chem. Solids</em>\n<strong>25</strong>, 675 (1964)</a></p>\n\n          </div>"}, "last_serial": 6085863, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "86faf77cdb734d9262bd6fb676b278e8", "sha256": "abacde1d3a72557bd1508561cbb5d66a3a951bf4fb9efce6c7f19531110edd3a"}, "downloads": -1, "filename": "SMACT-1.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "86faf77cdb734d9262bd6fb676b278e8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 57536, "upload_time": "2017-01-03T14:50:17", "upload_time_iso_8601": "2017-01-03T14:50:17.395832Z", "url": "https://files.pythonhosted.org/packages/6e/0f/e695a7a1c27f58bdbe6a451c09043712a8cd5150b32954301691bb0e4b56/SMACT-1.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51bae620d86757b2ae890df50ebfd9ff", "sha256": "6213352b0836830021c30d82a4b6511460064b4abeb47ca0b0ccdaef95445b2d"}, "downloads": -1, "filename": "SMACT-1.1.0.tar.gz", "has_sig": false, "md5_digest": "51bae620d86757b2ae890df50ebfd9ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47394, "upload_time": "2017-01-03T14:50:19", "upload_time_iso_8601": "2017-01-03T14:50:19.235912Z", "url": "https://files.pythonhosted.org/packages/6c/25/7d13cf7c153585edba3f3b4bcbade3c9941ebc0cc7aa8b684483be5ae288/SMACT-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "d24ae22e7f6cfedf81de4161432a7cd4", "sha256": "d026faadae0fca4b646f68bde0c4300d7d6967cd638338f5c3a628f824672ece"}, "downloads": -1, "filename": "SMACT-1.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "d24ae22e7f6cfedf81de4161432a7cd4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 60296, "upload_time": "2017-01-03T15:03:39", "upload_time_iso_8601": "2017-01-03T15:03:39.883864Z", "url": "https://files.pythonhosted.org/packages/9c/8d/497d20b8d2c8f29a898c8b0532d35ca08d66343458a3d647619c901c06af/SMACT-1.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ffe50e8136d79c3526be4b7ce954bf4", "sha256": "02269898605b91481beae78370d10f4385fe2b0a1dedfaf8a09cd0e6069d1023"}, "downloads": -1, "filename": "SMACT-1.1.1.tar.gz", "has_sig": false, "md5_digest": "2ffe50e8136d79c3526be4b7ce954bf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47334, "upload_time": "2017-01-03T15:03:41", "upload_time_iso_8601": "2017-01-03T15:03:41.559549Z", "url": "https://files.pythonhosted.org/packages/71/b1/75b8d159b5b087da0f9e8d8cf029a21218668f99bd00800efef2114f54c4/SMACT-1.1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "06937f5579f2132cdbf702ae247df308", "sha256": "dc8d5c0cfb5d1c1a6f2e14a257a9b5d17284952c70a1c1e35f3bb8b3e08cb672"}, "downloads": -1, "filename": "SMACT-1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "06937f5579f2132cdbf702ae247df308", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 57834, "upload_time": "2017-02-06T11:35:55", "upload_time_iso_8601": "2017-02-06T11:35:55.249334Z", "url": "https://files.pythonhosted.org/packages/4a/66/cb7d0c554042bfdc2e947bd2c276af49cac00afedc79920763da70ed9fe2/SMACT-1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8577174d28bbda72851244c69855f95", "sha256": "cdef812ddb342ba32e498ca320598e2c3ea78ad5d347200e814ca33fc89e6904"}, "downloads": -1, "filename": "SMACT-1.2.tar.gz", "has_sig": false, "md5_digest": "f8577174d28bbda72851244c69855f95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47416, "upload_time": "2017-02-06T11:36:58", "upload_time_iso_8601": "2017-02-06T11:36:58.054326Z", "url": "https://files.pythonhosted.org/packages/96/f7/dfbe33a086af257d96bb59e6e0a27eb92f24f13a891ec431205fbc387580/SMACT-1.2.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "7cb6bf47c695c1b2c989606480dfa8f0", "sha256": "a555502d8f72fe847fe57745daa13397e234174543d0316d0b0d821a4a21de8d"}, "downloads": -1, "filename": "SMACT-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7cb6bf47c695c1b2c989606480dfa8f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 66265, "upload_time": "2019-03-13T15:56:59", "upload_time_iso_8601": "2019-03-13T15:56:59.800101Z", "url": "https://files.pythonhosted.org/packages/80/fb/7b899c9b7a41421be9b874401f0a569b8620e264b4e0db38cb5c8a9bff4d/SMACT-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ccc73cc6fcf88744067b654ea30800a0", "sha256": "eed5a465c0f0ef06fc5dc676daef71cffe440aeb2d11fabb4344731cc61878a2"}, "downloads": -1, "filename": "SMACT-2.0.tar.gz", "has_sig": false, "md5_digest": "ccc73cc6fcf88744067b654ea30800a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45905, "upload_time": "2019-03-13T15:57:01", "upload_time_iso_8601": "2019-03-13T15:57:01.190869Z", "url": "https://files.pythonhosted.org/packages/71/4c/71b6d5d54d27012b1edc4ba6145c5804bd54a8fbb746e5f7203ee890fa59/SMACT-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "254dc64d7ebe59174ad887d74fbad4cf", "sha256": "e780e618ae044efab275c2df292e2c5acd68a10e1703d024490e84373c4050d9"}, "downloads": -1, "filename": "SMACT-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "254dc64d7ebe59174ad887d74fbad4cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 111623, "upload_time": "2019-03-13T16:22:27", "upload_time_iso_8601": "2019-03-13T16:22:27.980730Z", "url": "https://files.pythonhosted.org/packages/fe/dc/cbbb827be4e92c80a17846bb985e5154a8d623726e1a684ae59c99fe647d/SMACT-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ae537aa818acb0fc246b75719b4556d", "sha256": "b1e9a246befb369d59e2076c8ac3f4171df1e5fd7bd620d974460e3e5e625d67"}, "downloads": -1, "filename": "SMACT-2.0.1.tar.gz", "has_sig": false, "md5_digest": "2ae537aa818acb0fc246b75719b4556d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93174, "upload_time": "2019-03-13T16:22:31", "upload_time_iso_8601": "2019-03-13T16:22:31.630332Z", "url": "https://files.pythonhosted.org/packages/18/c2/94ad8ef9a21263f36ae116a6c96496a319ad839dc08b6c419076364e6d0b/SMACT-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "5814e59e604fe30a40f702a66b26eb23", "sha256": "f1a93242b9f803af4495326390daac6e1cea57b9f6b535ecf7e6bd7eccd7831c"}, "downloads": -1, "filename": "SMACT-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5814e59e604fe30a40f702a66b26eb23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 114460, "upload_time": "2019-03-26T15:49:25", "upload_time_iso_8601": "2019-03-26T15:49:25.122728Z", "url": "https://files.pythonhosted.org/packages/9c/d3/f570ac9403d0bf1a66ad6549e055fdadb251135de7b7184d2beff8909b2a/SMACT-2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff6db7704ddee8e3c6035984b4e27815", "sha256": "258fac66d4663b0771a439e26df14f6dbe299619492dd7eae508f5b119f4060b"}, "downloads": -1, "filename": "SMACT-2.0.2.tar.gz", "has_sig": false, "md5_digest": "ff6db7704ddee8e3c6035984b4e27815", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105338, "upload_time": "2019-03-26T15:49:26", "upload_time_iso_8601": "2019-03-26T15:49:26.774151Z", "url": "https://files.pythonhosted.org/packages/b5/38/0dc528368a7d38f051314730b4a4aa3e2f35504531cc3b780c079b3e9f19/SMACT-2.0.2.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "93c82b99534770603b5b094cd2a094ff", "sha256": "656582c0f48039e4d0a6b0331e3391275f1048c0f676e60e26156442d83b7a6d"}, "downloads": -1, "filename": "SMACT-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "93c82b99534770603b5b094cd2a094ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 115800, "upload_time": "2019-06-10T09:22:03", "upload_time_iso_8601": "2019-06-10T09:22:03.330171Z", "url": "https://files.pythonhosted.org/packages/ea/0a/ca950f5e5b0d3d50b7bd26280475a57e6e093ad174fd70ff6b531aa397fc/SMACT-2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4398680cde1e5491fbcb4fbeb9aa6c39", "sha256": "21b3835604f01a8d543e12946d3d38320ed3029204fe57876126ff0221f01eda"}, "downloads": -1, "filename": "SMACT-2.1.tar.gz", "has_sig": false, "md5_digest": "4398680cde1e5491fbcb4fbeb9aa6c39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107834, "upload_time": "2019-06-10T09:22:04", "upload_time_iso_8601": "2019-06-10T09:22:04.797272Z", "url": "https://files.pythonhosted.org/packages/9c/86/6f0fd1dd31e04d7e3f5f4102716fbbd5b7ff89df32b8a4f1c8a929a41427/SMACT-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "5c08c0209d0feb615e910216c437bca6", "sha256": "05c44269d49690abc30fe964c077f9c6280193a73ce0839100173fa743c60f61"}, "downloads": -1, "filename": "SMACT-2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5c08c0209d0feb615e910216c437bca6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 103263, "upload_time": "2019-11-06T08:01:16", "upload_time_iso_8601": "2019-11-06T08:01:16.867509Z", "url": "https://files.pythonhosted.org/packages/2d/db/49828b10f49e7be60c6015117fa3e655509173047f8ce2eda3ea01a022e3/SMACT-2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13ac9e6afea71163434fab1863676fbb", "sha256": "48200f824c11e0c53772de6ded7b1232fb23f8c44fb56aed4901d8aca3cc982b"}, "downloads": -1, "filename": "SMACT-2.2.tar.gz", "has_sig": false, "md5_digest": "13ac9e6afea71163434fab1863676fbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93065, "upload_time": "2019-11-06T08:01:18", "upload_time_iso_8601": "2019-11-06T08:01:18.355892Z", "url": "https://files.pythonhosted.org/packages/31/46/4eb38fce1fa1efe4b2d700b9621c11475765e05eda90b207ac4774edbfbc/SMACT-2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c08c0209d0feb615e910216c437bca6", "sha256": "05c44269d49690abc30fe964c077f9c6280193a73ce0839100173fa743c60f61"}, "downloads": -1, "filename": "SMACT-2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5c08c0209d0feb615e910216c437bca6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 103263, "upload_time": "2019-11-06T08:01:16", "upload_time_iso_8601": "2019-11-06T08:01:16.867509Z", "url": "https://files.pythonhosted.org/packages/2d/db/49828b10f49e7be60c6015117fa3e655509173047f8ce2eda3ea01a022e3/SMACT-2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13ac9e6afea71163434fab1863676fbb", "sha256": "48200f824c11e0c53772de6ded7b1232fb23f8c44fb56aed4901d8aca3cc982b"}, "downloads": -1, "filename": "SMACT-2.2.tar.gz", "has_sig": false, "md5_digest": "13ac9e6afea71163434fab1863676fbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93065, "upload_time": "2019-11-06T08:01:18", "upload_time_iso_8601": "2019-11-06T08:01:18.355892Z", "url": "https://files.pythonhosted.org/packages/31/46/4eb38fce1fa1efe4b2d700b9621c11475765e05eda90b207ac4774edbfbc/SMACT-2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:09 2020"}