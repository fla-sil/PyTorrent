{"info": {"author": "kororo", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "rand\n====\n\n[![Travis (.org)](https://img.shields.io/travis/kororo/rand)](https://pypi.python.org/project/rand/)\n[![Coveralls github](https://img.shields.io/coveralls/github/kororo/rand)](https://pypi.python.org/project/rand/)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-license.org/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/rand.svg)](https://pypi.python.org/project/rand/)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/rand)](https://pypi.python.org/project/rand/)\n\n---\n\nRandom generated String from regex pattern\n\n# WARNING\n\nThe library **rand** is still in working-in-progress. It is subject to high possibility of API changes. Would appreciate feedback, suggestions or help.\n\n# Why?\n\nThere are lot of existing projects similar to **rand**, they are powerful and have similar goals and results. However most of them are old projects/non-maintained and non-MIT licenses.\n\nThis is a good opportunity for **rand** to be the library to help generate random data for any projects and gather all other existing libraries to be the main driver.\n\n\n# Install\n\nUse pip or clone this repository and execute the setup.py file.\n\n```shell script\n$ pip install rand\n```\n\n# Usages\n\nBasic usage **rand** examples\n\n```python\n# import module\nfrom rand import Rand\n\n# initialise object\nrnd = Rand()\n\n# generate pattern literal\nrnd.gen('koro') # ['koro']\nrnd.gen('28') # ['28']\nrnd.gen('a-z') # ['a-z']\n\n# generate pattern any\nrnd.gen('.') # any char in string.printable\n\n# generate pattern branch\nrnd.gen('ko|ro') # either ['ko'] or ['ro']\nrnd.gen('ko|ro|ro') # either ['ko'] or ['ro']\n\n# generate pattern in\nrnd.gen('[kororo]') # either ['k'] or ['o'] or ['r']\nrnd.gen('k[o]r[o]r[o]') # ['kororo']\n\n# generate pattern repeat\nrnd.gen('r{2,8}') # char r in length between 2 to 8 times\n\n# generate pattern range\nrnd.gen('[a-z]') # char between a to z\n\n# generate pattern subpattern\nrnd.gen('(ro)') # ['ro']\n```\n\nProviders\n---------\n\nThe library **rand** at core only provide random generators based on regex. Providers are built to allow extensions for rand.\n\n## Built-in Providers\n\nThere are a few built-in providers inside **rand**\n\n### EN Provider\n\nThis library covers most usage around English requirements.\n\n```python\nfrom rand import Rand\n\n\nrnd = Rand()\nrnd.gen('(:en_vocal:)') # char either a, i, u, e, o\n```\n\n### Dataset Provider\n\nThis library helps on getting data from dataset such as Python object or Database with [peewee](https://github.com/coleifer/peewee).\n\n```python\nfrom rand import Rand\nfrom rand.providers.ds import RandDatasetBaseProvider, ListDatasetTarget\n\n\n# example using dict of list\ndb = {'names': ['test1', 'test1'], 'cities': ['test2', 'test2']}\nds = RandDatasetBaseProvider(prefix='ds', target=ListDatasetTarget(db=db))\nrnd = Rand()\nrnd.register_provider(ds)\nrnd.gen('(:ds_get:)', ['names'])  # ['test1']\nrnd.gen('(:ds_get:)', ['cities']) # ['test2']\n# or, magic getattr\nrnd.gen('(:ds_get_names:)-(:ds_get_cities:)') # ['test1-test2']\n\n# example of database using peewee\nfrom peewee import Proxy\nfrom playhouse.sqlite_ext import CSqliteExtDatabase\nfrom rand.providers.ds import RandDatasetBaseProvider, DBDatasetTarget\ndb = Proxy()\n# ensure to have table with name \"names\", contains column at least (id, name)\ndb.initialize(CSqliteExtDatabase(':memory:', bloomfilter=True))\nds = RandDatasetBaseProvider(prefix='ds', target=DBDatasetTarget(db=db))\nrnd = Rand()\nrnd.register_provider(ds)\nrnd.gen('(:ds_get:)', ['names']) # ['test']\ndb.close()\n```\n\n## Integration Providers\n\nThe library *rand* also has integration with existing projects such as Faker. Ensure you have faker library installed.\n\n### [Faker](https://github.com/joke2k/faker)\n\nThere is super basic integration with Faker for now, soon will be more implemented.\n\n```shell script\n# ensure you have Faker installed\npip install Faker\n```\n\n```python\nfrom rand import Rand\n\n\nrnd = Rand()\nrnd.gen('(:faker_hexify:)') # abc\n```\n\n## Custom Providers\n\nBelow is sample code on how to integrate an existing class definition (TestProxy) to Rand.\n\n```python\nfrom rand import Rand\nfrom rand.providers.base import RandProxyBaseProvider\n\n# class definition\nclass TestProxy:\n    # simple function definition to return args values\n    def target(self, arg1='def1', arg2='def2'):\n        return '%s-%s' % (arg1, arg2)\n\n# init rand class\nrnd = Rand()\n\n# create proxy provider helper and register to rand\ntest_proxy = RandProxyBaseProvider(prefix='test', target=TestProxy())\nrnd.register_provider(test_proxy)\n\n# test\nprint(rnd.gen('(:test_target:)')) # ['def1-def2']\nprint(rnd.gen('(:test_target:)', ['ok1'])) # ['ok1-def2']\nprint(rnd.gen('(:test_target:)', ['ok1', 'ok2'])) # ['ok1-def2']\nprint(rnd.gen('(:test_target:)', [['ok1', 'ok2']])) # ['ok1-ok2']\nprint(rnd.gen('(:test_target:)', [['ok1', 'ok2'], 'ok3'])) # ['ok1-ok2']\nprint(rnd.gen('(:test_target:)', [{'arg1': 'ok1'}])) # ['ok1-def2']\nprint(rnd.gen('(:test_target:)', [{'arg1': 'ok1', 'arg2': 'ok2'}])) # ['ok1-ok2']\n```\n\n# Test\n\nRun test by installing packages and run tox\n\n```shell script\n$ pip install poetry tox\n$ tox\n$ tox -e py36 -- tests/test_ds.py\n```\n\nFor hot-reload development coding\n```shell script\n$ npm i -g nodemon\n$ nodemon -w rand --exec python -c \"from rand import Rand\"\n```\n\n# Help?\n\nAny feedback, suggestions and integration with 3rd-party libraries can be added using PR or create issues if needed helps. \n\n# Similar Projects\n\nList of projects similar to **rand**:\n- [exrex](https://github.com/asciimoo/exrex): Irregular methods on regular expressions\n- [xeger](https://github.com/crdoconnor/xeger): Library to generate random strings from regular expressions\n- [strgen](https://github.com/paul-wolf/strgen): A Python module for a template language that generates randomized data\n\n# Acknowdlge Projects\n\nList of projects that **rand** depends on:\n- [peewee](https://github.com/coleifer/peewee): a small, expressive orm -- supports postgresql, mysql and sqlite\n- [pytest](https://github.com/pytest-dev/pytest/): The pytest framework makes it easy to write small tests, yet scales to support complex functional testing\n- [coverage](https://github.com/nedbat/coveragepy): Code coverage measurement for Python\n- [pytest-cov](https://github.com/pytest-dev/pytest-cov): Coverage plugin for pytest\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kororo/rand", "keywords": "random,generator,string,regex", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rand", "package_url": "https://pypi.org/project/rand/", "platform": "", "project_url": "https://pypi.org/project/rand/", "project_urls": {"Homepage": "https://github.com/kororo/rand", "Repository": "https://github.com/kororo/rand"}, "release_url": "https://pypi.org/project/rand/0.2.0/", "requires_dist": ["pytest-cov (>=2.0,<3.0)", "peewee (>=3.13.3,<4.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "Generate String from regex pattern", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>rand</h1>\n<p><a href=\"https://pypi.python.org/project/rand/\" rel=\"nofollow\"><img alt=\"Travis (.org)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36c876634964d498627ffa1fd15b9e972d5febe8/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6b6f726f726f2f72616e64\"></a>\n<a href=\"https://pypi.python.org/project/rand/\" rel=\"nofollow\"><img alt=\"Coveralls github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02cd637d3fe38a2bba0a06bb2b1d2e293f8a700f/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f6b6f726f726f2f72616e64\"></a>\n<a href=\"https://lbesson.mit-license.org/\" rel=\"nofollow\"><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"https://pypi.python.org/project/rand/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e980ee01f7d5562e3eddff1d10010d1d91dfe7d9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72616e642e737667\"></a>\n<a href=\"https://pypi.python.org/project/rand/\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07c55ae64e946e38b6d1cb87ed6126516344034e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f72616e64\"></a></p>\n<hr>\n<p>Random generated String from regex pattern</p>\n<h1>WARNING</h1>\n<p>The library <strong>rand</strong> is still in working-in-progress. It is subject to high possibility of API changes. Would appreciate feedback, suggestions or help.</p>\n<h1>Why?</h1>\n<p>There are lot of existing projects similar to <strong>rand</strong>, they are powerful and have similar goals and results. However most of them are old projects/non-maintained and non-MIT licenses.</p>\n<p>This is a good opportunity for <strong>rand</strong> to be the library to help generate random data for any projects and gather all other existing libraries to be the main driver.</p>\n<h1>Install</h1>\n<p>Use pip or clone this repository and execute the setup.py file.</p>\n<pre>$ pip install rand\n</pre>\n<h1>Usages</h1>\n<p>Basic usage <strong>rand</strong> examples</p>\n<pre><span class=\"c1\"># import module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rand</span> <span class=\"kn\">import</span> <span class=\"n\">Rand</span>\n\n<span class=\"c1\"># initialise object</span>\n<span class=\"n\">rnd</span> <span class=\"o\">=</span> <span class=\"n\">Rand</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># generate pattern literal</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'koro'</span><span class=\"p\">)</span> <span class=\"c1\"># ['koro']</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'28'</span><span class=\"p\">)</span> <span class=\"c1\"># ['28']</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'a-z'</span><span class=\"p\">)</span> <span class=\"c1\"># ['a-z']</span>\n\n<span class=\"c1\"># generate pattern any</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span> <span class=\"c1\"># any char in string.printable</span>\n\n<span class=\"c1\"># generate pattern branch</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'ko|ro'</span><span class=\"p\">)</span> <span class=\"c1\"># either ['ko'] or ['ro']</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'ko|ro|ro'</span><span class=\"p\">)</span> <span class=\"c1\"># either ['ko'] or ['ro']</span>\n\n<span class=\"c1\"># generate pattern in</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'[kororo]'</span><span class=\"p\">)</span> <span class=\"c1\"># either ['k'] or ['o'] or ['r']</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'k[o]r[o]r[o]'</span><span class=\"p\">)</span> <span class=\"c1\"># ['kororo']</span>\n\n<span class=\"c1\"># generate pattern repeat</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'r{2,8}'</span><span class=\"p\">)</span> <span class=\"c1\"># char r in length between 2 to 8 times</span>\n\n<span class=\"c1\"># generate pattern range</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'[a-z]'</span><span class=\"p\">)</span> <span class=\"c1\"># char between a to z</span>\n\n<span class=\"c1\"># generate pattern subpattern</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(ro)'</span><span class=\"p\">)</span> <span class=\"c1\"># ['ro']</span>\n</pre>\n<h2>Providers</h2>\n<p>The library <strong>rand</strong> at core only provide random generators based on regex. Providers are built to allow extensions for rand.</p>\n<h2>Built-in Providers</h2>\n<p>There are a few built-in providers inside <strong>rand</strong></p>\n<h3>EN Provider</h3>\n<p>This library covers most usage around English requirements.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rand</span> <span class=\"kn\">import</span> <span class=\"n\">Rand</span>\n\n\n<span class=\"n\">rnd</span> <span class=\"o\">=</span> <span class=\"n\">Rand</span><span class=\"p\">()</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:en_vocal:)'</span><span class=\"p\">)</span> <span class=\"c1\"># char either a, i, u, e, o</span>\n</pre>\n<h3>Dataset Provider</h3>\n<p>This library helps on getting data from dataset such as Python object or Database with <a href=\"https://github.com/coleifer/peewee\" rel=\"nofollow\">peewee</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rand</span> <span class=\"kn\">import</span> <span class=\"n\">Rand</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rand.providers.ds</span> <span class=\"kn\">import</span> <span class=\"n\">RandDatasetBaseProvider</span><span class=\"p\">,</span> <span class=\"n\">ListDatasetTarget</span>\n\n\n<span class=\"c1\"># example using dict of list</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'names'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'test1'</span><span class=\"p\">,</span> <span class=\"s1\">'test1'</span><span class=\"p\">],</span> <span class=\"s1\">'cities'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'test2'</span><span class=\"p\">,</span> <span class=\"s1\">'test2'</span><span class=\"p\">]}</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">RandDatasetBaseProvider</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'ds'</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">ListDatasetTarget</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">))</span>\n<span class=\"n\">rnd</span> <span class=\"o\">=</span> <span class=\"n\">Rand</span><span class=\"p\">()</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">register_provider</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:ds_get:)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'names'</span><span class=\"p\">])</span>  <span class=\"c1\"># ['test1']</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:ds_get:)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'cities'</span><span class=\"p\">])</span> <span class=\"c1\"># ['test2']</span>\n<span class=\"c1\"># or, magic getattr</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:ds_get_names:)-(:ds_get_cities:)'</span><span class=\"p\">)</span> <span class=\"c1\"># ['test1-test2']</span>\n\n<span class=\"c1\"># example of database using peewee</span>\n<span class=\"kn\">from</span> <span class=\"nn\">peewee</span> <span class=\"kn\">import</span> <span class=\"n\">Proxy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">playhouse.sqlite_ext</span> <span class=\"kn\">import</span> <span class=\"n\">CSqliteExtDatabase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rand.providers.ds</span> <span class=\"kn\">import</span> <span class=\"n\">RandDatasetBaseProvider</span><span class=\"p\">,</span> <span class=\"n\">DBDatasetTarget</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Proxy</span><span class=\"p\">()</span>\n<span class=\"c1\"># ensure to have table with name \"names\", contains column at least (id, name)</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">CSqliteExtDatabase</span><span class=\"p\">(</span><span class=\"s1\">':memory:'</span><span class=\"p\">,</span> <span class=\"n\">bloomfilter</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">RandDatasetBaseProvider</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'ds'</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">DBDatasetTarget</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">))</span>\n<span class=\"n\">rnd</span> <span class=\"o\">=</span> <span class=\"n\">Rand</span><span class=\"p\">()</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">register_provider</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:ds_get:)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'names'</span><span class=\"p\">])</span> <span class=\"c1\"># ['test']</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Integration Providers</h2>\n<p>The library <em>rand</em> also has integration with existing projects such as Faker. Ensure you have faker library installed.</p>\n<h3><a href=\"https://github.com/joke2k/faker\" rel=\"nofollow\">Faker</a></h3>\n<p>There is super basic integration with Faker for now, soon will be more implemented.</p>\n<pre><span class=\"c1\"># ensure you have Faker installed</span>\npip install Faker\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rand</span> <span class=\"kn\">import</span> <span class=\"n\">Rand</span>\n\n\n<span class=\"n\">rnd</span> <span class=\"o\">=</span> <span class=\"n\">Rand</span><span class=\"p\">()</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:faker_hexify:)'</span><span class=\"p\">)</span> <span class=\"c1\"># abc</span>\n</pre>\n<h2>Custom Providers</h2>\n<p>Below is sample code on how to integrate an existing class definition (TestProxy) to Rand.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rand</span> <span class=\"kn\">import</span> <span class=\"n\">Rand</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rand.providers.base</span> <span class=\"kn\">import</span> <span class=\"n\">RandProxyBaseProvider</span>\n\n<span class=\"c1\"># class definition</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestProxy</span><span class=\"p\">:</span>\n    <span class=\"c1\"># simple function definition to return args values</span>\n    <span class=\"k\">def</span> <span class=\"nf\">target</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"o\">=</span><span class=\"s1\">'def1'</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'def2'</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">-</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># init rand class</span>\n<span class=\"n\">rnd</span> <span class=\"o\">=</span> <span class=\"n\">Rand</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create proxy provider helper and register to rand</span>\n<span class=\"n\">test_proxy</span> <span class=\"o\">=</span> <span class=\"n\">RandProxyBaseProvider</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">TestProxy</span><span class=\"p\">())</span>\n<span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">register_provider</span><span class=\"p\">(</span><span class=\"n\">test_proxy</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># test</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:test_target:)'</span><span class=\"p\">))</span> <span class=\"c1\"># ['def1-def2']</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:test_target:)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'ok1'</span><span class=\"p\">]))</span> <span class=\"c1\"># ['ok1-def2']</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:test_target:)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'ok1'</span><span class=\"p\">,</span> <span class=\"s1\">'ok2'</span><span class=\"p\">]))</span> <span class=\"c1\"># ['ok1-def2']</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:test_target:)'</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"s1\">'ok1'</span><span class=\"p\">,</span> <span class=\"s1\">'ok2'</span><span class=\"p\">]]))</span> <span class=\"c1\"># ['ok1-ok2']</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:test_target:)'</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"s1\">'ok1'</span><span class=\"p\">,</span> <span class=\"s1\">'ok2'</span><span class=\"p\">],</span> <span class=\"s1\">'ok3'</span><span class=\"p\">]))</span> <span class=\"c1\"># ['ok1-ok2']</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:test_target:)'</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"s1\">'arg1'</span><span class=\"p\">:</span> <span class=\"s1\">'ok1'</span><span class=\"p\">}]))</span> <span class=\"c1\"># ['ok1-def2']</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rnd</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"s1\">'(:test_target:)'</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"s1\">'arg1'</span><span class=\"p\">:</span> <span class=\"s1\">'ok1'</span><span class=\"p\">,</span> <span class=\"s1\">'arg2'</span><span class=\"p\">:</span> <span class=\"s1\">'ok2'</span><span class=\"p\">}]))</span> <span class=\"c1\"># ['ok1-ok2']</span>\n</pre>\n<h1>Test</h1>\n<p>Run test by installing packages and run tox</p>\n<pre>$ pip install poetry tox\n$ tox\n$ tox -e py36 -- tests/test_ds.py\n</pre>\n<p>For hot-reload development coding</p>\n<pre>$ npm i -g nodemon\n$ nodemon -w rand --exec python -c <span class=\"s2\">\"from rand import Rand\"</span>\n</pre>\n<h1>Help?</h1>\n<p>Any feedback, suggestions and integration with 3rd-party libraries can be added using PR or create issues if needed helps.</p>\n<h1>Similar Projects</h1>\n<p>List of projects similar to <strong>rand</strong>:</p>\n<ul>\n<li><a href=\"https://github.com/asciimoo/exrex\" rel=\"nofollow\">exrex</a>: Irregular methods on regular expressions</li>\n<li><a href=\"https://github.com/crdoconnor/xeger\" rel=\"nofollow\">xeger</a>: Library to generate random strings from regular expressions</li>\n<li><a href=\"https://github.com/paul-wolf/strgen\" rel=\"nofollow\">strgen</a>: A Python module for a template language that generates randomized data</li>\n</ul>\n<h1>Acknowdlge Projects</h1>\n<p>List of projects that <strong>rand</strong> depends on:</p>\n<ul>\n<li><a href=\"https://github.com/coleifer/peewee\" rel=\"nofollow\">peewee</a>: a small, expressive orm -- supports postgresql, mysql and sqlite</li>\n<li><a href=\"https://github.com/pytest-dev/pytest/\" rel=\"nofollow\">pytest</a>: The pytest framework makes it easy to write small tests, yet scales to support complex functional testing</li>\n<li><a href=\"https://github.com/nedbat/coveragepy\" rel=\"nofollow\">coverage</a>: Code coverage measurement for Python</li>\n<li><a href=\"https://github.com/pytest-dev/pytest-cov\" rel=\"nofollow\">pytest-cov</a>: Coverage plugin for pytest</li>\n</ul>\n\n          </div>"}, "last_serial": 7142586, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b462c287e927e8d5dc1baa918a63ad56", "sha256": "7a9cded37cbb3ad39e6b85c08b5ca77ee35f5ad5124f6a4f813ba1ecd914f026"}, "downloads": -1, "filename": "rand-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b462c287e927e8d5dc1baa918a63ad56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3074, "upload_time": "2020-04-09T11:14:23", "upload_time_iso_8601": "2020-04-09T11:14:23.028010Z", "url": "https://files.pythonhosted.org/packages/69/2c/7e7306239be12ae40a2efcf598a7548b082b3eedef353bc097580ccc2f83/rand-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef36db52eec4b1e259c45c6c1df57dbf", "sha256": "cd102d5211ad9eeb50ebab306d8cc2e4e813650661ea006cf98d3c88b62f3f6a"}, "downloads": -1, "filename": "rand-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ef36db52eec4b1e259c45c6c1df57dbf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 2690, "upload_time": "2020-04-09T11:14:25", "upload_time_iso_8601": "2020-04-09T11:14:25.386353Z", "url": "https://files.pythonhosted.org/packages/86/8e/57c908a5d2a33a11d4d8f1652a23190ba3d4ee40f60d1001324f73bf69a5/rand-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f20df6a0e0060ce29c4f1fc763072743", "sha256": "7247207c0c973c5505483105e4bc35db9de32a3db56bc77b4cef3e5db92fbfff"}, "downloads": -1, "filename": "rand-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f20df6a0e0060ce29c4f1fc763072743", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7656, "upload_time": "2020-04-12T03:43:21", "upload_time_iso_8601": "2020-04-12T03:43:21.058504Z", "url": "https://files.pythonhosted.org/packages/3f/07/ec5058048449f16472b23d50921225cb7913c74cbc38fe5e56b9b822bbd8/rand-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e1aacc120d5437a9b4ec341a17d890a", "sha256": "53b96d98a0ec02325e24c36db9d165f562015a0783324ba2c2f9f4897e51c1f5"}, "downloads": -1, "filename": "rand-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6e1aacc120d5437a9b4ec341a17d890a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7139, "upload_time": "2020-04-12T03:43:22", "upload_time_iso_8601": "2020-04-12T03:43:22.793072Z", "url": "https://files.pythonhosted.org/packages/0a/08/9a3bd9f80bc1c8e97373d51b9c2324b2512406bdd6faca4f83a3db1b2f7d/rand-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e886aeb000d8c2f56da154dd56b49642", "sha256": "f912aa47408fb0331714f7d0e67296f0ba5671952cbcbeb68b95cb282ac4cb93"}, "downloads": -1, "filename": "rand-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e886aeb000d8c2f56da154dd56b49642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10614, "upload_time": "2020-05-01T04:15:38", "upload_time_iso_8601": "2020-05-01T04:15:38.183020Z", "url": "https://files.pythonhosted.org/packages/bd/42/3ac3ac5c659425071d7486b4277bcec61760f772b95033d1eace65e8723e/rand-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9b68fc6c9f3f4317261279f48acc660", "sha256": "d8405a26ed6a1e53b58e299f5df879d182377b54a06bdb7b9eb890240b06374a"}, "downloads": -1, "filename": "rand-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e9b68fc6c9f3f4317261279f48acc660", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11640, "upload_time": "2020-05-01T04:15:40", "upload_time_iso_8601": "2020-05-01T04:15:40.030591Z", "url": "https://files.pythonhosted.org/packages/7a/e5/c21a9eb8d6f82c19d5ae48d2e87dbd86673312ffa30b0c861553ce0ce335/rand-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e886aeb000d8c2f56da154dd56b49642", "sha256": "f912aa47408fb0331714f7d0e67296f0ba5671952cbcbeb68b95cb282ac4cb93"}, "downloads": -1, "filename": "rand-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e886aeb000d8c2f56da154dd56b49642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10614, "upload_time": "2020-05-01T04:15:38", "upload_time_iso_8601": "2020-05-01T04:15:38.183020Z", "url": "https://files.pythonhosted.org/packages/bd/42/3ac3ac5c659425071d7486b4277bcec61760f772b95033d1eace65e8723e/rand-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9b68fc6c9f3f4317261279f48acc660", "sha256": "d8405a26ed6a1e53b58e299f5df879d182377b54a06bdb7b9eb890240b06374a"}, "downloads": -1, "filename": "rand-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e9b68fc6c9f3f4317261279f48acc660", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11640, "upload_time": "2020-05-01T04:15:40", "upload_time_iso_8601": "2020-05-01T04:15:40.030591Z", "url": "https://files.pythonhosted.org/packages/7a/e5/c21a9eb8d6f82c19d5ae48d2e87dbd86673312ffa30b0c861553ce0ce335/rand-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:41 2020"}