{"info": {"author": "Felix Welter", "author_email": "felixwelter@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Lexicon overlap score\nThe lexicon overlap score is a similarity measure for sentiment lexicons as they are used in Sentiment Classification. \n\n# Installation\nInstall via `pip install lexicon_overlap_score`\n\n# Usage\nImport via `import lexicon_overlap_score as los`\n\nYour lexicons should be a pandas dataframe with the columns `word` and `so` (semantic orientation).\nThen the following three functions can be used.\n\n``` python\nlos.simple(lex1, lex2)\nlos.binary(lex1, lex2)\nlos.score(lex1, lex2)\n```\n\n`simple` and `binary` return a value between 0 and 1, while `score` returns values between -1 and 1.\nThe functions expect positive words to have a positive value and negative words to have a negative value.\n\nIf your lexicon is a python dictionary mapping words to values, convert it to a pandas dataframe. \n\n``` python\nimport pandas as pd\ndf_lex = pd.DataFrame().from_dict(dict_lex, orient=\"index\").reset_index().rename(columns={\"index\": \"word\", 0: \"so\"})\n```\n\n# Example\n```\nimport pandas as pd\nimport lexicon_overlap_score as los\ndf1 = pd.DataFrame([(\"test\",   1), (\"free\",    1), (\"other\", 1), (\"check\", 0.5)], columns=[\"word\", \"so\"])\ndf2 = pd.DataFrame([(\"test\", 0.5), (\"free\",    1)],                               columns=[\"word\", \"so\"])\nlos.simple(df1, df2), los.binary(df1, df2), los.score(df1, df2)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.rrz.uni-hamburg.de/bay1620/lexicon_overlap_score", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "lexicon-overlap-score", "package_url": "https://pypi.org/project/lexicon-overlap-score/", "platform": "", "project_url": "https://pypi.org/project/lexicon-overlap-score/", "project_urls": {"Homepage": "https://gitlab.rrz.uni-hamburg.de/bay1620/lexicon_overlap_score"}, "release_url": "https://pypi.org/project/lexicon-overlap-score/0.0.1/", "requires_dist": ["numpy (>=1)", "pandas"], "requires_python": ">=3.6", "summary": "Functions for calculation of the lexicon overlap score", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Lexicon overlap score</h1>\n<p>The lexicon overlap score is a similarity measure for sentiment lexicons as they are used in Sentiment Classification.</p>\n<h1>Installation</h1>\n<p>Install via <code>pip install lexicon_overlap_score</code></p>\n<h1>Usage</h1>\n<p>Import via <code>import lexicon_overlap_score as los</code></p>\n<p>Your lexicons should be a pandas dataframe with the columns <code>word</code> and <code>so</code> (semantic orientation).\nThen the following three functions can be used.</p>\n<pre><span class=\"n\">los</span><span class=\"o\">.</span><span class=\"n\">simple</span><span class=\"p\">(</span><span class=\"n\">lex1</span><span class=\"p\">,</span> <span class=\"n\">lex2</span><span class=\"p\">)</span>\n<span class=\"n\">los</span><span class=\"o\">.</span><span class=\"n\">binary</span><span class=\"p\">(</span><span class=\"n\">lex1</span><span class=\"p\">,</span> <span class=\"n\">lex2</span><span class=\"p\">)</span>\n<span class=\"n\">los</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">lex1</span><span class=\"p\">,</span> <span class=\"n\">lex2</span><span class=\"p\">)</span>\n</pre>\n<p><code>simple</code> and <code>binary</code> return a value between 0 and 1, while <code>score</code> returns values between -1 and 1.\nThe functions expect positive words to have a positive value and negative words to have a negative value.</p>\n<p>If your lexicon is a python dictionary mapping words to values, convert it to a pandas dataframe.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">df_lex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">dict_lex</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s2\">\"index\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"index\"</span><span class=\"p\">:</span> <span class=\"s2\">\"word\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s2\">\"so\"</span><span class=\"p\">})</span>\n</pre>\n<h1>Example</h1>\n<pre><code>import pandas as pd\nimport lexicon_overlap_score as los\ndf1 = pd.DataFrame([(\"test\",   1), (\"free\",    1), (\"other\", 1), (\"check\", 0.5)], columns=[\"word\", \"so\"])\ndf2 = pd.DataFrame([(\"test\", 0.5), (\"free\",    1)],                               columns=[\"word\", \"so\"])\nlos.simple(df1, df2), los.binary(df1, df2), los.score(df1, df2)\n</code></pre>\n\n          </div>"}, "last_serial": 7111650, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7f6eaaef9710d832d1e9219b82f681b4", "sha256": "543ecb2572df3ddea57ceaa0d16572b5b422a586173e9eebbbf1e7e5446dd37d"}, "downloads": -1, "filename": "lexicon_overlap_score-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7f6eaaef9710d832d1e9219b82f681b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3974, "upload_time": "2020-04-27T13:14:04", "upload_time_iso_8601": "2020-04-27T13:14:04.729329Z", "url": "https://files.pythonhosted.org/packages/2f/a6/6e1e021f65057ef8e91e5443f4a5c9c4bf8f1ca4546a65ef2ddcd66ae00d/lexicon_overlap_score-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7daba91c0e736cd68c0e77d589d2d94", "sha256": "3b681b532f1dcbe58314562bac9a2ea1408dac9cd63c4141122fc0dd4a0f9168"}, "downloads": -1, "filename": "lexicon_overlap_score-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c7daba91c0e736cd68c0e77d589d2d94", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2549, "upload_time": "2020-04-27T13:14:06", "upload_time_iso_8601": "2020-04-27T13:14:06.789250Z", "url": "https://files.pythonhosted.org/packages/37/8a/7ed33a5877afa3b6fd8949f6ee00216e8513b42e9519ee0ccb2eb947e0e5/lexicon_overlap_score-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f6eaaef9710d832d1e9219b82f681b4", "sha256": "543ecb2572df3ddea57ceaa0d16572b5b422a586173e9eebbbf1e7e5446dd37d"}, "downloads": -1, "filename": "lexicon_overlap_score-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7f6eaaef9710d832d1e9219b82f681b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3974, "upload_time": "2020-04-27T13:14:04", "upload_time_iso_8601": "2020-04-27T13:14:04.729329Z", "url": "https://files.pythonhosted.org/packages/2f/a6/6e1e021f65057ef8e91e5443f4a5c9c4bf8f1ca4546a65ef2ddcd66ae00d/lexicon_overlap_score-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7daba91c0e736cd68c0e77d589d2d94", "sha256": "3b681b532f1dcbe58314562bac9a2ea1408dac9cd63c4141122fc0dd4a0f9168"}, "downloads": -1, "filename": "lexicon_overlap_score-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c7daba91c0e736cd68c0e77d589d2d94", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2549, "upload_time": "2020-04-27T13:14:06", "upload_time_iso_8601": "2020-04-27T13:14:06.789250Z", "url": "https://files.pythonhosted.org/packages/37/8a/7ed33a5877afa3b6fd8949f6ee00216e8513b42e9519ee0ccb2eb947e0e5/lexicon_overlap_score-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:50 2020"}