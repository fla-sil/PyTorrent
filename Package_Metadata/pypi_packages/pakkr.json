{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "# PAKKR\nPython pipeline utility library\n\n# Description\nIn the process of building machine learning things at Zendesk, we have noticed that a lot of the steps are sequential where later steps rely on outputs of previous steps. Because Python functions only return a single value (`return` with multiple values are returned as a tuple), deconstructing and keeping track of return values becomes tedious for long sequences of steps, especially when inputs are not returned from the immediately previous step.\n\nPAKKR is an utility created to remediate these pain points; it provides the user with a way to specify how return values should be interpreted and optionally caches results and injects them in later steps automatically.\n\n# Install from PyPi\n```bash\npip install pakkr\n```\n\n# Install from source\n```bash\ngit clone git@github.com:zendesk/pakkr.git\ncd pakkr\npython setup.py install\n```\n\n# Usage\n```python\nfrom pakkr import Pipeline, returns\n\n@returns(int, original_num_as_string=str)  # this function returns an integer and insert original_num_as_string into the meta cache\ndef times_two(n):\n  return n*2, {'original_num_as_string': str(n)}\n\n@returns(int, int)  # this functions returns two integers and will be passed on as two arguments\ndef plus_five_and_three(n):\n  return n + 5, n + 3\n\n@returns(str)\ndef summary(a, b, original_num_as_string):  # a and b are passed in as positional arguments,\n                                            # but original_num_as_string would be injected from the meta cache\n  return f'Original input was {original_num_as_string} and it became {str(a)} and {str(b)} after processing'\n\npipeline = Pipeline(times_two, plus_five_and_three, summary, _name='process_int')\nprint(pipeline(3))\n```\nRunning the above code should print:\n```\nOriginal input was 3 and it became 11 and 9 after processing\n```\n\n## What's going on?\n`returns` is used to indicate how the return values should be interpreted; `@returns(int, str, x=bool)` means the `Callable` should be returning something like `return 10, 'hello', {'x': True}` and the `10` and `'hello'` will be passed as two positional arguments into the next `Callable` while `x` would be cached in the meta space and be injected if any following `Callable`s require `x` but not being given as positional argument from the previous `Callable`.\n\n\n# Development\nThis project uses `tox` to manage testing on multiple Python versions assuming the required Python versions are available.\n```\ngit clone git@github.com:zendesk/pakkr.git\ncd pakkr\npip install tox\ntox\n```\n\nOptionally, uses `pyenv` and `pipenv` to manage Python installation and development dependencies.\n```\ngit clone git@github.com:zendesk/pakkr.git\ncd pakkr\n\n# Install pyenv, see instructions in https://github.com/pyenv/pyenv\n# Install Python versions supported by pakkr if not available locally\n# pyenv install 3.6.10\n# pyenv install 3.7.6\n# pyenv install 3.8.1\n\n# Set available Python verions\npyenv local 3.6.10 3.7.6 3.8.1\n\n# Install pipenv\npip install pipenv\npipenv sync --dev\n\n# Run tests\npipenv run tox\n```\n\n# Reporting Bugs\nPlease [raise an isses](https://github.com/zendesk/pakkr/issues/new) in GitHub.\n\n\n# Contributing\nImprovements are always welcome. Please follow these steps to contribute\n\n1. Submit a Pull Request with a detailed explanation of changes\n2. Receive approval from maintainers\n3. Maintainers will merge your changes\n\n# License\nUse of this software is subject to important terms and conditions as set forth in the [LICENSE](https://github.com/zendesk/pakkr/blob/master/LICENSE) file.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zendesk/pakkr", "keywords": "", "license": "Apache License 2.0", "maintainer": "Zendesk", "maintainer_email": "opensource@zendesk.com", "name": "pakkr", "package_url": "https://pypi.org/project/pakkr/", "platform": "", "project_url": "https://pypi.org/project/pakkr/", "project_urls": {"Homepage": "https://github.com/zendesk/pakkr"}, "release_url": "https://pypi.org/project/pakkr/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Pipeline utility library", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PAKKR</h1>\n<p>Python pipeline utility library</p>\n<h1>Description</h1>\n<p>In the process of building machine learning things at Zendesk, we have noticed that a lot of the steps are sequential where later steps rely on outputs of previous steps. Because Python functions only return a single value (<code>return</code> with multiple values are returned as a tuple), deconstructing and keeping track of return values becomes tedious for long sequences of steps, especially when inputs are not returned from the immediately previous step.</p>\n<p>PAKKR is an utility created to remediate these pain points; it provides the user with a way to specify how return values should be interpreted and optionally caches results and injects them in later steps automatically.</p>\n<h1>Install from PyPi</h1>\n<pre>pip install pakkr\n</pre>\n<h1>Install from source</h1>\n<pre>git clone git@github.com:zendesk/pakkr.git\n<span class=\"nb\">cd</span> pakkr\npython setup.py install\n</pre>\n<h1>Usage</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pakkr</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span><span class=\"p\">,</span> <span class=\"n\">returns</span>\n\n<span class=\"nd\">@returns</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">original_num_as_string</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>  <span class=\"c1\"># this function returns an integer and insert original_num_as_string into the meta cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">times_two</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'original_num_as_string'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)}</span>\n\n<span class=\"nd\">@returns</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>  <span class=\"c1\"># this functions returns two integers and will be passed on as two arguments</span>\n<span class=\"k\">def</span> <span class=\"nf\">plus_five_and_three</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">3</span>\n\n<span class=\"nd\">@returns</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">summary</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">original_num_as_string</span><span class=\"p\">):</span>  <span class=\"c1\"># a and b are passed in as positional arguments,</span>\n                                            <span class=\"c1\"># but original_num_as_string would be injected from the meta cache</span>\n  <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'Original input was </span><span class=\"si\">{</span><span class=\"n\">original_num_as_string</span><span class=\"si\">}</span><span class=\"s1\"> and it became </span><span class=\"si\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\"> and </span><span class=\"si\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\"> after processing'</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">times_two</span><span class=\"p\">,</span> <span class=\"n\">plus_five_and_three</span><span class=\"p\">,</span> <span class=\"n\">summary</span><span class=\"p\">,</span> <span class=\"n\">_name</span><span class=\"o\">=</span><span class=\"s1\">'process_int'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pipeline</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</pre>\n<p>Running the above code should print:</p>\n<pre><code>Original input was 3 and it became 11 and 9 after processing\n</code></pre>\n<h2>What's going on?</h2>\n<p><code>returns</code> is used to indicate how the return values should be interpreted; <code>@returns(int, str, x=bool)</code> means the <code>Callable</code> should be returning something like <code>return 10, 'hello', {'x': True}</code> and the <code>10</code> and <code>'hello'</code> will be passed as two positional arguments into the next <code>Callable</code> while <code>x</code> would be cached in the meta space and be injected if any following <code>Callable</code>s require <code>x</code> but not being given as positional argument from the previous <code>Callable</code>.</p>\n<h1>Development</h1>\n<p>This project uses <code>tox</code> to manage testing on multiple Python versions assuming the required Python versions are available.</p>\n<pre><code>git clone git@github.com:zendesk/pakkr.git\ncd pakkr\npip install tox\ntox\n</code></pre>\n<p>Optionally, uses <code>pyenv</code> and <code>pipenv</code> to manage Python installation and development dependencies.</p>\n<pre><code>git clone git@github.com:zendesk/pakkr.git\ncd pakkr\n\n# Install pyenv, see instructions in https://github.com/pyenv/pyenv\n# Install Python versions supported by pakkr if not available locally\n# pyenv install 3.6.10\n# pyenv install 3.7.6\n# pyenv install 3.8.1\n\n# Set available Python verions\npyenv local 3.6.10 3.7.6 3.8.1\n\n# Install pipenv\npip install pipenv\npipenv sync --dev\n\n# Run tests\npipenv run tox\n</code></pre>\n<h1>Reporting Bugs</h1>\n<p>Please <a href=\"https://github.com/zendesk/pakkr/issues/new\" rel=\"nofollow\">raise an isses</a> in GitHub.</p>\n<h1>Contributing</h1>\n<p>Improvements are always welcome. Please follow these steps to contribute</p>\n<ol>\n<li>Submit a Pull Request with a detailed explanation of changes</li>\n<li>Receive approval from maintainers</li>\n<li>Maintainers will merge your changes</li>\n</ol>\n<h1>License</h1>\n<p>Use of this software is subject to important terms and conditions as set forth in the <a href=\"https://github.com/zendesk/pakkr/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file.</p>\n\n          </div>"}, "last_serial": 6441363, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "daeccf892eb4a2e9b1aa857e87f7a307", "sha256": "7c49d54e3f81ebd6663e45215627a5b2e8e5975ce91083a8e345dc4b74d121d7"}, "downloads": -1, "filename": "pakkr-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "daeccf892eb4a2e9b1aa857e87f7a307", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24863, "upload_time": "2020-01-12T21:56:35", "upload_time_iso_8601": "2020-01-12T21:56:35.238859Z", "url": "https://files.pythonhosted.org/packages/a6/54/b15461755f48d62144e352b9b8f8d3d7fe1b0fe9ff8fe977a37c785f3049/pakkr-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44523c371eb65817a4b8f1e589bfb5a4", "sha256": "35fd5d065746b3d8727b2177070f3029c438e22793bf6396e5340e64b12cc989"}, "downloads": -1, "filename": "pakkr-0.1.0.tar.gz", "has_sig": false, "md5_digest": "44523c371eb65817a4b8f1e589bfb5a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14338, "upload_time": "2020-01-12T21:56:37", "upload_time_iso_8601": "2020-01-12T21:56:37.638217Z", "url": "https://files.pythonhosted.org/packages/d1/fb/a7a11014708f58ee6b0fb849b5011a21ad899074a6b37257c9dba1737b25/pakkr-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "daeccf892eb4a2e9b1aa857e87f7a307", "sha256": "7c49d54e3f81ebd6663e45215627a5b2e8e5975ce91083a8e345dc4b74d121d7"}, "downloads": -1, "filename": "pakkr-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "daeccf892eb4a2e9b1aa857e87f7a307", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24863, "upload_time": "2020-01-12T21:56:35", "upload_time_iso_8601": "2020-01-12T21:56:35.238859Z", "url": "https://files.pythonhosted.org/packages/a6/54/b15461755f48d62144e352b9b8f8d3d7fe1b0fe9ff8fe977a37c785f3049/pakkr-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44523c371eb65817a4b8f1e589bfb5a4", "sha256": "35fd5d065746b3d8727b2177070f3029c438e22793bf6396e5340e64b12cc989"}, "downloads": -1, "filename": "pakkr-0.1.0.tar.gz", "has_sig": false, "md5_digest": "44523c371eb65817a4b8f1e589bfb5a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14338, "upload_time": "2020-01-12T21:56:37", "upload_time_iso_8601": "2020-01-12T21:56:37.638217Z", "url": "https://files.pythonhosted.org/packages/d1/fb/a7a11014708f58ee6b0fb849b5011a21ad899074a6b37257c9dba1737b25/pakkr-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:46 2020"}