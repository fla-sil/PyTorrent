{"info": {"author": "jan grant", "author_email": "parsy-extn@ioctl.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Topic :: Software Development :: Compilers", "Topic :: Software Development :: Interpreters", "Topic :: Text Processing"], "description": "# Some small extensions to parsy\n\nThis offers a small extension to the behaviour of Parsy.\n\n## Note-keeping\n\nInput streams gain the ability to keep notes. These are additional information\nassociated with a particular index in the stream. As the parsing process proceeds,\nnew notes may be written. An attempt to fetch the most recent set of notes can be performed\nby:\n\n    recent_notes = yield parsy_extn.get_notes\n\nand notes at the current point in parsing may be written by\n\n    yield put_notes(new_notes)\n\nAs the parser backtracks, older sets of notes may be thrown away.\n\n### Notes on the mutability of notes\n\nNotes are kept in a dictionary. `get_notes` performs a shallow copy of this dictionary;\nhowever, references to embedded objects are identical.\n\nThis is intentional; the utility of notes is in allowing a parser to back-fill\nalready-generated placeholder values with actual content.\n\nHowever, care should be taken when writing new sets of notes that references to other\nmutable objects (such as lists) are not duplicated accidentally; this will result in\nthe backtracking process losing the immutability of previous notes.\n\n## Handling augmentation\n\n### Manually augmenting the stream\n\nAn input `str` or `list` may be augmented before being passed to a parser. This should\nbe done at the initial point of ingestion into the grammar:\n\n    result = grammar_entry_point.parse(parsy_extn.Noted.augment(original_input))\n\n### Wrapping a single entry-point's `parse` method\n\nAlternatively, a grammar's entry-point may be decorated to automatically wrap values as\nthey are passed to the `parse` method:\n\n    grammar_entry_point = parsy_ext.keeps_notes(grammar_entry_point)\n    result = grammar_entry_point.parse(original_input)\n\n### Monkey-patching `parsy.Parser`\n\nFinally, the `parsy.Parser` object itself may be monkey-patched to wrap any input on\nentry to `parse` or `parse_partial`:\n\n    parsy_extn.monkeypatch_parsy()\n    result = grammar_entry_point.parse(original_input)\n\n## Motivation\n\nThe motivation for this is to handle constructs like shell 'heredocs' with a single\npass of a parser. They are otherwise notoriously difficult to handle; even with\nthis facility, the resulting grammars are fiddly.\n\nA trivial example is given in the `test_parsy_extn` module.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jan-g/{name}", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "parsy-extn", "package_url": "https://pypi.org/project/parsy-extn/", "platform": "", "project_url": "https://pypi.org/project/parsy-extn/", "project_urls": {"Homepage": "http://github.com/jan-g/{name}"}, "release_url": "https://pypi.org/project/parsy-extn/0.0.2/", "requires_dist": ["parsy"], "requires_python": "", "summary": "Some small extensions to parsy", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Some small extensions to parsy</h1>\n<p>This offers a small extension to the behaviour of Parsy.</p>\n<h2>Note-keeping</h2>\n<p>Input streams gain the ability to keep notes. These are additional information\nassociated with a particular index in the stream. As the parsing process proceeds,\nnew notes may be written. An attempt to fetch the most recent set of notes can be performed\nby:</p>\n<pre><code>recent_notes = yield parsy_extn.get_notes\n</code></pre>\n<p>and notes at the current point in parsing may be written by</p>\n<pre><code>yield put_notes(new_notes)\n</code></pre>\n<p>As the parser backtracks, older sets of notes may be thrown away.</p>\n<h3>Notes on the mutability of notes</h3>\n<p>Notes are kept in a dictionary. <code>get_notes</code> performs a shallow copy of this dictionary;\nhowever, references to embedded objects are identical.</p>\n<p>This is intentional; the utility of notes is in allowing a parser to back-fill\nalready-generated placeholder values with actual content.</p>\n<p>However, care should be taken when writing new sets of notes that references to other\nmutable objects (such as lists) are not duplicated accidentally; this will result in\nthe backtracking process losing the immutability of previous notes.</p>\n<h2>Handling augmentation</h2>\n<h3>Manually augmenting the stream</h3>\n<p>An input <code>str</code> or <code>list</code> may be augmented before being passed to a parser. This should\nbe done at the initial point of ingestion into the grammar:</p>\n<pre><code>result = grammar_entry_point.parse(parsy_extn.Noted.augment(original_input))\n</code></pre>\n<h3>Wrapping a single entry-point's <code>parse</code> method</h3>\n<p>Alternatively, a grammar's entry-point may be decorated to automatically wrap values as\nthey are passed to the <code>parse</code> method:</p>\n<pre><code>grammar_entry_point = parsy_ext.keeps_notes(grammar_entry_point)\nresult = grammar_entry_point.parse(original_input)\n</code></pre>\n<h3>Monkey-patching <code>parsy.Parser</code></h3>\n<p>Finally, the <code>parsy.Parser</code> object itself may be monkey-patched to wrap any input on\nentry to <code>parse</code> or <code>parse_partial</code>:</p>\n<pre><code>parsy_extn.monkeypatch_parsy()\nresult = grammar_entry_point.parse(original_input)\n</code></pre>\n<h2>Motivation</h2>\n<p>The motivation for this is to handle constructs like shell 'heredocs' with a single\npass of a parser. They are otherwise notoriously difficult to handle; even with\nthis facility, the resulting grammars are fiddly.</p>\n<p>A trivial example is given in the <code>test_parsy_extn</code> module.</p>\n\n          </div>"}, "last_serial": 6994641, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "fa195897a2452bc544a861d8534ee89d", "sha256": "a98077ca3c3267a3630ef877f24d631dcf81ae98a9372390d8928d5f49c59ca5"}, "downloads": -1, "filename": "parsy_extn-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fa195897a2452bc544a861d8534ee89d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3530, "upload_time": "2019-11-26T14:12:46", "upload_time_iso_8601": "2019-11-26T14:12:46.497844Z", "url": "https://files.pythonhosted.org/packages/75/c2/f74181503368e653bcaf573411607b174423ed05f216b42caec08b707ccb/parsy_extn-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4cdf6e650b4393a499b5248755313fd", "sha256": "8263d0c90a3375e88fb9f31fd61eaf9f1ac0581317cb7ff14f6e5daaa3e36081"}, "downloads": -1, "filename": "parsy-extn-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e4cdf6e650b4393a499b5248755313fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2982, "upload_time": "2019-11-26T14:12:48", "upload_time_iso_8601": "2019-11-26T14:12:48.979034Z", "url": "https://files.pythonhosted.org/packages/02/10/11647d4b5d62a4409928768e46c2ac3087fb10df5f6c223f69cdc0b3ac28/parsy-extn-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "387823c31829ae1fe27a318cd6c644fa", "sha256": "b18bdfe84cf13d1b2dc12ccc5b967e4f5cda7f66ef5230081eaa76538173a203"}, "downloads": -1, "filename": "parsy_extn-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "387823c31829ae1fe27a318cd6c644fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3564, "upload_time": "2020-04-10T16:22:42", "upload_time_iso_8601": "2020-04-10T16:22:42.339490Z", "url": "https://files.pythonhosted.org/packages/d1/6d/a2400ea0627d2e35903e853e893f84acb4d04833ab91afb949241375dc14/parsy_extn-0.0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "387823c31829ae1fe27a318cd6c644fa", "sha256": "b18bdfe84cf13d1b2dc12ccc5b967e4f5cda7f66ef5230081eaa76538173a203"}, "downloads": -1, "filename": "parsy_extn-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "387823c31829ae1fe27a318cd6c644fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3564, "upload_time": "2020-04-10T16:22:42", "upload_time_iso_8601": "2020-04-10T16:22:42.339490Z", "url": "https://files.pythonhosted.org/packages/d1/6d/a2400ea0627d2e35903e853e893f84acb4d04833ab91afb949241375dc14/parsy_extn-0.0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:14 2020"}