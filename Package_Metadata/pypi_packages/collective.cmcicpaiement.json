{"info": {"author": "Jean-Michel FRANCOIS aka toutpt@gmail.com", "author_email": "toutpt@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 4.0", "Framework :: Plone :: 4.1", "Framework :: Plone :: 4.2", "Programming Language :: Python"], "description": "Introduction\r\n============\r\n\r\nThis addon provide components to create the UI that will let you make a simple\r\npaiement process to the `CM CIC paiement <https://www.cmcicpaiement.fr/>`_ \r\nsolution\r\n\r\nIt can't be use alone, you must provide custom implementation for\r\nyour contents\r\n\r\nHow to install\r\n==============\r\n\r\nThis addon can be installed has any other addons. please follow official\r\ndocumentation_\r\n\r\n.. _documentation: http://plone.org/documentation/kb/installing-add-ons-quick-how-to\r\n.. image:: https://secure.travis-ci.org/toutpt/collective.categories.png\r\n    :target: http://travis-ci.org/toutpt/collective.categories\r\n\r\nYou will find settings in the registry ( /portal_registry )\r\n\r\nComponents\r\n==========\r\n\r\nAller form\r\n----------\r\n\r\nThis addon add a base Browser to build an \"Aller\" form. The idea\r\nis to adapt and implement the current context and request to be an order.\r\n\r\nAn order must provide following elements:\r\n\r\n* montant: the amount of the order\r\n* reference: the id of the order\r\n\r\nYou can achieve this in many way: Having a cart done with simplecartjs\r\nwith an Order content type that will provide thoses information. \r\nYou will then just have to create the view inheriting from \r\ncollective.cmcicpaiement.aller.AllerForm , implements montant and reference\r\nmethod and call aller_form in your template to render the paid button that\r\nwill do the job.\r\n\r\nRetour\r\n------\r\n\r\nThis addon manage the \"Retour\" phase and response to the bank.\r\nIt use the zope event infrastructure to notify the system of paiements.\r\n\r\nThe retour URL must be configured by the bank and must be:\r\n\r\n  yoursite.com/@@cmcic_retour\r\n\r\nevent example::\r\n\r\n    <subscriber\r\n      for=\"collective.cmcicpaiement.retour.IRetourEvent\"\r\n      handler=\".retour.retour_handler\" />\r\n    \r\n    \r\n    def retour_handler(event):\r\n    \r\n        if event.code_retour == \"Annulation\":\r\n            # Payment has been refused\r\n            # The payment may be accepted later\r\n            # put your code here (email sending / Database update)\r\n            logger.info('paiement refused')\r\n    \r\n        elif event.code_retour == \"payetest\":\r\n            # Payment has been accepeted on the test server\r\n            # put your code here (email sending / Database update)\r\n            logger.info('paiement accepted from test server')\r\n    \r\n        elif event.code_retour == \"paiement\":\r\n            # Payment has been accepeted on the productive server\r\n            # put your code here (email sending / Database update)\r\n            logger.info('paiement accepted from production server')\r\n    \r\n        #*** ONLY FOR MULTIPART PAYMENT ***#\r\n        elif event.code_retour == \"paiement_pf2\" or event.code_retour == \"paiement_pf3\" or event.code_retour == \"paiement_pf4\":\r\n            # Payment has been accepted on the productive server for the part #N\r\n            # return code is like paiement_pf[#N]\r\n            # put your code here (email sending / Database update)\r\n            # You have the amount of the payment part in event.montantech\r\n            logger.info('paiement accepted from production server for a part')\r\n    \r\n        elif event.code_retour == \"Annulation_pf2\" or event.code_retour == \"Annulation_pf3\" or event.code_retour == \"Annulation_pf4\":\r\n            # Payment has been refused on the productive server for the part #N\r\n            # return code is like Annulation_pf[#N]\r\n            # put your code here (email sending / Database update)\r\n            # You have the amount of the payment part in event.montantech\r\n            logger.info('paiement refused from production server for a part')\r\n\r\n\r\nCredits\r\n=======\r\n\r\n|makinacom|_\r\n\r\n* `Planet Makina Corpus <http://www.makina-corpus.org>`_\r\n* `Contact Makina-Corpus <mailto:python@makina-corpus.org>`_\r\n\r\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\r\n.. _makinacom:  http://www.makina-corpus.com\r\n\r\nChangelog\r\n=========\r\n\r\n1.0b1 (2013-01-22)\r\n------------------\r\n\r\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/collective/collective.cmcicpaiement", "keywords": "Plone cmcicpaiement ecommerce", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "collective.cmcicpaiement", "package_url": "https://pypi.org/project/collective.cmcicpaiement/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.cmcicpaiement/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/collective/collective.cmcicpaiement"}, "release_url": "https://pypi.org/project/collective.cmcicpaiement/1.0b1/", "requires_dist": null, "requires_python": null, "summary": "CM CIC Paiement for Plone", "version": "1.0b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This addon provide components to create the UI that will let you make a simple\npaiement process to the <a href=\"https://www.cmcicpaiement.fr/\" rel=\"nofollow\">CM CIC paiement</a>\nsolution</p>\n<p>It can\u2019t be use alone, you must provide custom implementation for\nyour contents</p>\n</div>\n<div id=\"how-to-install\">\n<h2>How to install</h2>\n<p>This addon can be installed has any other addons. please follow official\n<a href=\"http://plone.org/documentation/kb/installing-add-ons-quick-how-to\" rel=\"nofollow\">documentation</a></p>\n<a href=\"http://travis-ci.org/toutpt/collective.categories\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/toutpt/collective.categories.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee81bb9e942b74404102f12466d9cc7482b4cb24/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f746f757470742f636f6c6c6563746976652e63617465676f726965732e706e67\"></a>\n<p>You will find settings in the registry ( /portal_registry )</p>\n</div>\n<div id=\"components\">\n<h2>Components</h2>\n<div id=\"aller-form\">\n<h3>Aller form</h3>\n<p>This addon add a base Browser to build an \u201cAller\u201d form. The idea\nis to adapt and implement the current context and request to be an order.</p>\n<p>An order must provide following elements:</p>\n<ul>\n<li>montant: the amount of the order</li>\n<li>reference: the id of the order</li>\n</ul>\n<p>You can achieve this in many way: Having a cart done with simplecartjs\nwith an Order content type that will provide thoses information.\nYou will then just have to create the view inheriting from\ncollective.cmcicpaiement.aller.AllerForm , implements montant and reference\nmethod and call aller_form in your template to render the paid button that\nwill do the job.</p>\n</div>\n<div id=\"retour\">\n<h3>Retour</h3>\n<p>This addon manage the \u201cRetour\u201d phase and response to the bank.\nIt use the zope event infrastructure to notify the system of paiements.</p>\n<p>The retour URL must be configured by the bank and must be:</p>\n<blockquote>\nyoursite.com/@@cmcic_retour</blockquote>\n<p>event example:</p>\n<pre>&lt;subscriber\n  for=\"collective.cmcicpaiement.retour.IRetourEvent\"\n  handler=\".retour.retour_handler\" /&gt;\n\n\ndef retour_handler(event):\n\n    if event.code_retour == \"Annulation\":\n        # Payment has been refused\n        # The payment may be accepted later\n        # put your code here (email sending / Database update)\n        logger.info('paiement refused')\n\n    elif event.code_retour == \"payetest\":\n        # Payment has been accepeted on the test server\n        # put your code here (email sending / Database update)\n        logger.info('paiement accepted from test server')\n\n    elif event.code_retour == \"paiement\":\n        # Payment has been accepeted on the productive server\n        # put your code here (email sending / Database update)\n        logger.info('paiement accepted from production server')\n\n    #*** ONLY FOR MULTIPART PAYMENT ***#\n    elif event.code_retour == \"paiement_pf2\" or event.code_retour == \"paiement_pf3\" or event.code_retour == \"paiement_pf4\":\n        # Payment has been accepted on the productive server for the part #N\n        # return code is like paiement_pf[#N]\n        # put your code here (email sending / Database update)\n        # You have the amount of the payment part in event.montantech\n        logger.info('paiement accepted from production server for a part')\n\n    elif event.code_retour == \"Annulation_pf2\" or event.code_retour == \"Annulation_pf3\" or event.code_retour == \"Annulation_pf4\":\n        # Payment has been refused on the productive server for the part #N\n        # return code is like Annulation_pf[#N]\n        # put your code here (email sending / Database update)\n        # You have the amount of the payment part in event.montantech\n        logger.info('paiement refused from production server for a part')\n</pre>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p><a href=\"http://www.makina-corpus.com\" rel=\"nofollow\"><img alt=\"makinacom\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a7ff2c6fc5ab8cd2f425946f19dbfbf0aa4c1d7/687474703a2f2f6465706f742e6d616b696e612d636f727075732e6f72672f7075626c69632f6c6f676f2e676966\"></a></p>\n<ul>\n<li><a href=\"http://www.makina-corpus.org\" rel=\"nofollow\">Planet Makina Corpus</a></li>\n<li><a href=\"mailto:python%40makina-corpus.org\">Contact Makina-Corpus</a></li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"b1-2013-01-22\"><span class=\"section-subtitle\">1.0b1 (2013-01-22)</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 787697, "releases": {"1.0b1": [{"comment_text": "", "digests": {"md5": "ba656a25fdec5ddbfe1ebf725eaec63d", "sha256": "ea7c5b7f197bebdd59f34fe393bcd828583c922e1315989548f19f9394fef05e"}, "downloads": -1, "filename": "collective.cmcicpaiement-1.0b1.zip", "has_sig": false, "md5_digest": "ba656a25fdec5ddbfe1ebf725eaec63d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33414, "upload_time": "2013-01-22T13:15:07", "upload_time_iso_8601": "2013-01-22T13:15:07.835272Z", "url": "https://files.pythonhosted.org/packages/cf/10/e60c146d48fcb7a8eadb304c04f1b8a376be0a882228c155f208b3e7667b/collective.cmcicpaiement-1.0b1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba656a25fdec5ddbfe1ebf725eaec63d", "sha256": "ea7c5b7f197bebdd59f34fe393bcd828583c922e1315989548f19f9394fef05e"}, "downloads": -1, "filename": "collective.cmcicpaiement-1.0b1.zip", "has_sig": false, "md5_digest": "ba656a25fdec5ddbfe1ebf725eaec63d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33414, "upload_time": "2013-01-22T13:15:07", "upload_time_iso_8601": "2013-01-22T13:15:07.835272Z", "url": "https://files.pythonhosted.org/packages/cf/10/e60c146d48fcb7a8eadb304c04f1b8a376be0a882228c155f208b3e7667b/collective.cmcicpaiement-1.0b1.zip", "yanked": false}], "timestamp": "Thu May  7 22:17:59 2020"}