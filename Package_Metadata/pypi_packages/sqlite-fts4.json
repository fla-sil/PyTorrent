{"info": {"author": "Simon Willison", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# sqlite-fts4\n\n[![PyPI](https://img.shields.io/pypi/v/sqlite-fts4.svg)](https://pypi.org/project/sqlite-fts4/)\n[![Travis CI](https://travis-ci.com/simonw/sqlite-fts4.svg?branch=master)](https://travis-ci.com/simonw/sqlite-fts4)\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/simonw/sqlite-fts4/blob/master/LICENSE)\n\nCustom SQLite functions written in Python for ranking documents indexed using the FTS4 extension.\n\nRead [Exploring search relevance algorithms with SQLite](https://simonwillison.net/2019/Jan/7/exploring-search-relevance-algorithms-sqlite/) for further details on this project.\n\n## Demo\n\nYou can try out these SQL functions [using this interactive demo](https://datasette-sqlite-fts4.datasette.io/24ways-fts4?sql=select%0D%0A++++json_object%28%0D%0A++++++++\"label\"%2C+articles.title%2C+\"href\"%2C+articles.url%0D%0A++++%29+as+article%2C%0D%0A++++articles.author%2C%0D%0A++++rank_score%28matchinfo%28articles_fts%2C+\"pcx\"%29%29+as+score%2C%0D%0A++++rank_bm25%28matchinfo%28articles_fts%2C+\"pcnalx\"%29%29+as+bm25%2C%0D%0A++++json_object%28%0D%0A++++++++\"pre\"%2C+annotate_matchinfo%28matchinfo%28articles_fts%2C+\"pcxnalyb\"%29%2C+\"pcxnalyb\"%29%0D%0A++++%29+as+annotated_matchinfo%2C%0D%0A++++matchinfo%28articles_fts%2C+\"pcxnalyb\"%29+as+matchinfo%2C%0D%0A++++decode_matchinfo%28matchinfo%28articles_fts%2C+\"pcxnalyb\"%29%29+as+decoded_matchinfo%0D%0Afrom%0D%0A++++articles_fts+join+articles+on+articles.rowid+%3D+articles_fts.rowid%0D%0Awhere%0D%0A++++articles_fts+match+%3Asearch%0D%0Aorder+by+bm25&search=jquery+maps).\n\n## Usage\n\nThis module implements several custom SQLite3 functions. You can register them against an existing SQLite connection like so:\n\n    import sqlite3\n    from sqlite_fts4 import register_functions\n\n    conn = sqlite3.connect(\":memory:\")\n    register_functions(conn)\n\nIf you only want a subset of the functions registered you can do so like this:\n\n    from sqlite_fts4 import rank_score\n\n    conn = sqlite3.connect(\":memory:\")\n    conn.create_function(\"rank_score\", 1, rank_score)\n\nif you want to use these functions with [Datasette](https://github.com/simonw/datasette) you can enable them by installing the [datasette-sqlite-fts4](https://github.com/simonw/datasette-sqlite-fts4) plugin:\n\n    pip install datasette-sqlite-fts4\n\n## rank_score()\n\nThis is an extremely simple ranking function, based on [an example](https://www.sqlite.org/fts3.html#appendix_a) in the SQLite documentation. It generates a score for each document using the sum of the score for each column. The score for each column is calculated as the number of search matches in that column divided by the number of search matches for every column in the index - a classic [TF-IDF](https://en.wikipedia.org/wiki/Tf%E2%80%93idf) calculation.\n\nYou can use it in a query like this:\n\n    select *, rank_score(matchinfo(docs, \"pcx\")) as score\n    from docs where docs match \"dog\"\n    order by score desc\n\nYou *must* use the `\"pcx\"` matchinfo format string here, or you will get incorrect results.\n\n## rank_bm25()\n\nAn implementation of the [Okapi BM25](https://en.wikipedia.org/wiki/Okapi_BM25) scoring algorithm. Use it in a query like this:\n\n    select *, rank_bm25(matchinfo(docs, \"pcnalx\")) as score\n    from docs where docs match \"dog\"\n    order by score desc\n\nYou *must* use the `\"pcnalx\"` matchinfo format string here, or you will get incorrect results. If you see any `math domain` errors in your logs it may be because you did not use exactly the right format string here.\n\n## decode_matchinfo()\n\nSQLite's [built-in matchinfo() function](https://www.sqlite.org/fts3.html#matchinfo) returns results as a binary string. This binary represents a list of 32 bit unsigned integers, but reading the binary results is not particularly human-friendly.\n\nThe `decode_matchinfo()` function decodes the binary string and converts it into a JSON list of integers.\n\nUsage:\n\n    select *, decode_matchinfo(matchinfo(docs, \"pcx\"))\n    from docs where docs match \"dog\"\n\nExample output:\n\n    hello dog, [1, 1, 1, 1, 1]\n\n## annotate_matchinfo()\n\nThis function decodes the matchinfo document into a verbose JSON structure that describes exactly what each of the returned integers actually means.\n\nFull documentation for the different format string options can be found here: https://www.sqlite.org/fts3.html#matchinfo\n\nYou need to call this function with the same format string as was passed to `matchinfo()` - for example:\n\n    select annotate_matchinfo(matchinfo(docs, \"pcxnal\"), \"pcxnal\")\n    from docs where docs match \"dog\"\n\nThe returned JSON will include a key for each letter in the format string. For example:\n\n    {\n        \"p\": {\n            \"value\": 1,\n            \"title\": \"Number of matchable phrases in the query\"\n        },\n        \"c\": {\n            \"value\": 1,\n            \"title\": \"Number of user defined columns in the FTS table\"\n        },\n        \"x\": {\n            \"value\": [\n                {\n                    \"column_index\": 0,\n                    \"phrase_index\": 0,\n                    \"hits_this_column_this_row\": 1,\n                    \"hits_this_column_all_rows\": 2,\n                    \"docs_with_hits\": 2\n                }\n            ],\n            \"title\": \"Details for each phrase/column combination\"\n        },\n        \"n\": {\n            \"value\": 3,\n            \"title\": \"Number of rows in the FTS4 table\"\n        },\n        \"a\": {\n            \"title\":\"Average number of tokens in the text values stored in each column\",\n            \"value\": [\n                {\n                    \"column_index\": 0,\n                    \"average_num_tokens\": 2\n                }\n            ]\n        },\n        \"l\": {\n            \"title\": \"Length of value stored in current row of the FTS4 table in tokens for each column\",\n            \"value\": [\n                {\n                    \"column_index\": 0,\n                    \"length_of_value\": 2\n                }\n            ]\n        }\n    }\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/simonw/sqlite-fts4", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "sqlite-fts4", "package_url": "https://pypi.org/project/sqlite-fts4/", "platform": "", "project_url": "https://pypi.org/project/sqlite-fts4/", "project_urls": {"Homepage": "https://github.com/simonw/sqlite-fts4"}, "release_url": "https://pypi.org/project/sqlite-fts4/0.5.2/", "requires_dist": ["pytest ; extra == 'test'"], "requires_python": "", "summary": "Python functions for working with SQLite FTS4 search", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sqlite-fts4</h1>\n<p><a href=\"https://pypi.org/project/sqlite-fts4/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c254de8814b6ecb8adaaa343a34bd1f8535cd63/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73716c6974652d667473342e737667\"></a>\n<a href=\"https://travis-ci.com/simonw/sqlite-fts4\" rel=\"nofollow\"><img alt=\"Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48f6746f254ad1597596869bf8854b6440eb9f8b/68747470733a2f2f7472617669732d63692e636f6d2f73696d6f6e772f73716c6974652d667473342e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/simonw/sqlite-fts4/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bad0ad2a7195b40874e3a10488118122d89489fd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d417061636865253230322e302d626c75652e737667\"></a></p>\n<p>Custom SQLite functions written in Python for ranking documents indexed using the FTS4 extension.</p>\n<p>Read <a href=\"https://simonwillison.net/2019/Jan/7/exploring-search-relevance-algorithms-sqlite/\" rel=\"nofollow\">Exploring search relevance algorithms with SQLite</a> for further details on this project.</p>\n<h2>Demo</h2>\n<p>You can try out these SQL functions <a href=\"https://datasette-sqlite-fts4.datasette.io/24ways-fts4?sql=select%0D%0A++++json_object%28%0D%0A++++++++%22label%22%2C+articles.title%2C+%22href%22%2C+articles.url%0D%0A++++%29+as+article%2C%0D%0A++++articles.author%2C%0D%0A++++rank_score%28matchinfo%28articles_fts%2C+%22pcx%22%29%29+as+score%2C%0D%0A++++rank_bm25%28matchinfo%28articles_fts%2C+%22pcnalx%22%29%29+as+bm25%2C%0D%0A++++json_object%28%0D%0A++++++++%22pre%22%2C+annotate_matchinfo%28matchinfo%28articles_fts%2C+%22pcxnalyb%22%29%2C+%22pcxnalyb%22%29%0D%0A++++%29+as+annotated_matchinfo%2C%0D%0A++++matchinfo%28articles_fts%2C+%22pcxnalyb%22%29+as+matchinfo%2C%0D%0A++++decode_matchinfo%28matchinfo%28articles_fts%2C+%22pcxnalyb%22%29%29+as+decoded_matchinfo%0D%0Afrom%0D%0A++++articles_fts+join+articles+on+articles.rowid+%3D+articles_fts.rowid%0D%0Awhere%0D%0A++++articles_fts+match+%3Asearch%0D%0Aorder+by+bm25&amp;search=jquery+maps\" rel=\"nofollow\">using this interactive demo</a>.</p>\n<h2>Usage</h2>\n<p>This module implements several custom SQLite3 functions. You can register them against an existing SQLite connection like so:</p>\n<pre><code>import sqlite3\nfrom sqlite_fts4 import register_functions\n\nconn = sqlite3.connect(\":memory:\")\nregister_functions(conn)\n</code></pre>\n<p>If you only want a subset of the functions registered you can do so like this:</p>\n<pre><code>from sqlite_fts4 import rank_score\n\nconn = sqlite3.connect(\":memory:\")\nconn.create_function(\"rank_score\", 1, rank_score)\n</code></pre>\n<p>if you want to use these functions with <a href=\"https://github.com/simonw/datasette\" rel=\"nofollow\">Datasette</a> you can enable them by installing the <a href=\"https://github.com/simonw/datasette-sqlite-fts4\" rel=\"nofollow\">datasette-sqlite-fts4</a> plugin:</p>\n<pre><code>pip install datasette-sqlite-fts4\n</code></pre>\n<h2>rank_score()</h2>\n<p>This is an extremely simple ranking function, based on <a href=\"https://www.sqlite.org/fts3.html#appendix_a\" rel=\"nofollow\">an example</a> in the SQLite documentation. It generates a score for each document using the sum of the score for each column. The score for each column is calculated as the number of search matches in that column divided by the number of search matches for every column in the index - a classic <a href=\"https://en.wikipedia.org/wiki/Tf%E2%80%93idf\" rel=\"nofollow\">TF-IDF</a> calculation.</p>\n<p>You can use it in a query like this:</p>\n<pre><code>select *, rank_score(matchinfo(docs, \"pcx\")) as score\nfrom docs where docs match \"dog\"\norder by score desc\n</code></pre>\n<p>You <em>must</em> use the <code>\"pcx\"</code> matchinfo format string here, or you will get incorrect results.</p>\n<h2>rank_bm25()</h2>\n<p>An implementation of the <a href=\"https://en.wikipedia.org/wiki/Okapi_BM25\" rel=\"nofollow\">Okapi BM25</a> scoring algorithm. Use it in a query like this:</p>\n<pre><code>select *, rank_bm25(matchinfo(docs, \"pcnalx\")) as score\nfrom docs where docs match \"dog\"\norder by score desc\n</code></pre>\n<p>You <em>must</em> use the <code>\"pcnalx\"</code> matchinfo format string here, or you will get incorrect results. If you see any <code>math domain</code> errors in your logs it may be because you did not use exactly the right format string here.</p>\n<h2>decode_matchinfo()</h2>\n<p>SQLite's <a href=\"https://www.sqlite.org/fts3.html#matchinfo\" rel=\"nofollow\">built-in matchinfo() function</a> returns results as a binary string. This binary represents a list of 32 bit unsigned integers, but reading the binary results is not particularly human-friendly.</p>\n<p>The <code>decode_matchinfo()</code> function decodes the binary string and converts it into a JSON list of integers.</p>\n<p>Usage:</p>\n<pre><code>select *, decode_matchinfo(matchinfo(docs, \"pcx\"))\nfrom docs where docs match \"dog\"\n</code></pre>\n<p>Example output:</p>\n<pre><code>hello dog, [1, 1, 1, 1, 1]\n</code></pre>\n<h2>annotate_matchinfo()</h2>\n<p>This function decodes the matchinfo document into a verbose JSON structure that describes exactly what each of the returned integers actually means.</p>\n<p>Full documentation for the different format string options can be found here: <a href=\"https://www.sqlite.org/fts3.html#matchinfo\" rel=\"nofollow\">https://www.sqlite.org/fts3.html#matchinfo</a></p>\n<p>You need to call this function with the same format string as was passed to <code>matchinfo()</code> - for example:</p>\n<pre><code>select annotate_matchinfo(matchinfo(docs, \"pcxnal\"), \"pcxnal\")\nfrom docs where docs match \"dog\"\n</code></pre>\n<p>The returned JSON will include a key for each letter in the format string. For example:</p>\n<pre><code>{\n    \"p\": {\n        \"value\": 1,\n        \"title\": \"Number of matchable phrases in the query\"\n    },\n    \"c\": {\n        \"value\": 1,\n        \"title\": \"Number of user defined columns in the FTS table\"\n    },\n    \"x\": {\n        \"value\": [\n            {\n                \"column_index\": 0,\n                \"phrase_index\": 0,\n                \"hits_this_column_this_row\": 1,\n                \"hits_this_column_all_rows\": 2,\n                \"docs_with_hits\": 2\n            }\n        ],\n        \"title\": \"Details for each phrase/column combination\"\n    },\n    \"n\": {\n        \"value\": 3,\n        \"title\": \"Number of rows in the FTS4 table\"\n    },\n    \"a\": {\n        \"title\":\"Average number of tokens in the text values stored in each column\",\n        \"value\": [\n            {\n                \"column_index\": 0,\n                \"average_num_tokens\": 2\n            }\n        ]\n    },\n    \"l\": {\n        \"title\": \"Length of value stored in current row of the FTS4 table in tokens for each column\",\n        \"value\": [\n            {\n                \"column_index\": 0,\n                \"length_of_value\": 2\n            }\n        ]\n    }\n}\n</code></pre>\n\n          </div>"}, "last_serial": 4678379, "releases": {"0.4.1": [{"comment_text": "", "digests": {"md5": "854778d4003c4907a881d50aad9a7f63", "sha256": "5a31b0193f20262f588e573a88c158029646ec94b5c043909d331f343ea70232"}, "downloads": -1, "filename": "sqlite_fts4-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "854778d4003c4907a881d50aad9a7f63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8546, "upload_time": "2019-01-02T16:50:28", "upload_time_iso_8601": "2019-01-02T16:50:28.614896Z", "url": "https://files.pythonhosted.org/packages/80/66/e830d7fe56b6d46afe0b77a495a6722678fcff24f1eb57a8389885506c92/sqlite_fts4-0.4.1-py3-none-any.whl", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "1730dd73cec7b617e582ded8e1e3db7b", "sha256": "d8a03466d7dc80b86c232fdd24dd0bf570d89fa246f9533ebd93074973f6d1fe"}, "downloads": -1, "filename": "sqlite_fts4-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1730dd73cec7b617e582ded8e1e3db7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8967, "upload_time": "2019-01-06T23:57:29", "upload_time_iso_8601": "2019-01-06T23:57:29.181110Z", "url": "https://files.pythonhosted.org/packages/c3/e7/aed3ee1c1b606474d55aafff8eb85d6c3426509e4f40102918441e0db198/sqlite_fts4-0.4.3-py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "3d308bae695b9cb7aa47005d4cb53652", "sha256": "2d2dad13adcf5337d1da0c30016ca38cff32dea9aea61454eaf16f22b45e135f"}, "downloads": -1, "filename": "sqlite_fts4-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3d308bae695b9cb7aa47005d4cb53652", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9577, "upload_time": "2019-01-07T00:43:01", "upload_time_iso_8601": "2019-01-07T00:43:01.178646Z", "url": "https://files.pythonhosted.org/packages/90/89/21e0894b6af6c41831048c933332124ffc58d42847b7a0ce1b20ea7f6d20/sqlite_fts4-0.5.0-py3-none-any.whl", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "ed274be8ff05c325e2f6c61e560e2964", "sha256": "1721a45b3120c3903d89db13bc8e1562888c435e2d0f8ced2d20432d0e8319da"}, "downloads": -1, "filename": "sqlite_fts4-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ed274be8ff05c325e2f6c61e560e2964", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9707, "upload_time": "2019-01-07T04:05:24", "upload_time_iso_8601": "2019-01-07T04:05:24.860879Z", "url": "https://files.pythonhosted.org/packages/8f/f8/7c9f979a477c284cf7694a383c93b5ced3b6ec7f634b13817e4ad270fc75/sqlite_fts4-0.5.1-py3-none-any.whl", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "ea9251f74c46db0327b196709cbd192c", "sha256": "46b1d3996b030d1a5cc3584524e1e5b8dcb2859cf203abfd99d514f3c98b78d8"}, "downloads": -1, "filename": "sqlite_fts4-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ea9251f74c46db0327b196709cbd192c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9853, "upload_time": "2019-01-09T20:47:35", "upload_time_iso_8601": "2019-01-09T20:47:35.947336Z", "url": "https://files.pythonhosted.org/packages/12/40/a6e0ed5033e1b273b3a8d82fdd2c7826f4daf48c88a43dbc65e5a92c6235/sqlite_fts4-0.5.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea9251f74c46db0327b196709cbd192c", "sha256": "46b1d3996b030d1a5cc3584524e1e5b8dcb2859cf203abfd99d514f3c98b78d8"}, "downloads": -1, "filename": "sqlite_fts4-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ea9251f74c46db0327b196709cbd192c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9853, "upload_time": "2019-01-09T20:47:35", "upload_time_iso_8601": "2019-01-09T20:47:35.947336Z", "url": "https://files.pythonhosted.org/packages/12/40/a6e0ed5033e1b273b3a8d82fdd2c7826f4daf48c88a43dbc65e5a92c6235/sqlite_fts4-0.5.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:03:41 2020"}