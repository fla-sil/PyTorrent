{"info": {"author": "Joel Nothman", "author_email": "joel.nothman@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "searchgrid documentation\n============================\n\nHelps building parameter grids for `scikit-learn grid search\n<scikit-learn:grid_search>`.\n\n|version| |licence| |py-versions|\n\n|issues| |build| |docs| |coverage|\n\nSpecifying a parameter grid for `sklearn.model_selection.GridSearchCV <GridSearchCV>` in\nScikit-Learn can be annoying, particularly when:\n\n-  you change your code to wrap some estimator in, say, a ``Pipeline``\n   and then need to prefix all the parameters in the grid using lots of\n   ``__``\\ s\n-  you are searching over multiple grids (i.e. your ``param_grid`` is a\n   list) and you want to make a change to all of those grids\n\nsearchgrid allows you to define (and change) the grid together with the\nesimator, reducing effort and sometimes code.\nIt stores the parameters you want to search on each particular estimator\nobject. This makes it much more straightforward to\nspecify complex parameter grids, and means you don't need to update your\ngrid when you change the structure of your composite estimator.\n\nIt provides two main functions:\n\n-  `searchgrid.set_grid` is used to specify the parameter values to be\n   searched for an estimator or GP kernel.\n-  `searchgrid.make_grid_search` is used to construct the\n   ``GridSearchCV`` object using the parameter space the estimator is annotated\n   with.\n\nOther utilities for constructing search spaces include:\n\n- `searchgrid.build_param_grid`\n- `searchgrid.make_pipeline`\n- `searchgrid.make_union`\n\nQuick Start\n...........\n\nIf scikit-learn is installed, then, in a terminal::\n\n    pip install searchgrid\n\nand use in Python::\n\n    from search_grid import set_grid, make_grid_search\n    estimator = set_grid(MyEstimator(), param=[value1, value2, value3])\n    search = make_grid_search(estimator, cv=..., scoring=...)\n    search.fit(X, y)\n\nOr search for the best among multiple distinct estimators/pipelines::\n\n    search = make_grid_search([estimator1, estimator2], cv=..., scoring=...)\n    search.fit(X, y)\n\nMotivating examples\n...................\n\nLet's look over some of the messy change cases. We'll get some imports out of\nthe way.::\n\n    >>> from sklearn.pipeline import Pipeline\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> from sklearn.feature_selection import SelectKBest\n    >>> from sklearn.decomposition import PCA\n    >>> from searchgrid import set_grid, make_grid_search\n    >>> from sklearn.model_selection import GridSearchCV\n\nWrapping an estimator in a pipeline.\n    You had code which searched over parameters for a classifier.\n    Now you want to search for that classifier in a Pipeline.\n    With plain old scikit-learn, you have to insert ``__``\\ s and change::\n\n        >>> gs = GridSearchCV(LogisticRegression(), {'C': [.1, 1, 10]})\n\n    to::\n\n        >>> gs = GridSearchCV(Pipeline([('reduce', SelectKBest()),\n        ...                             ('clf', LogisticRegression())]),\n        ...                   {'clf__C': [.1, 1, 10]})\n\n    With searchgrid we only have to wrap our classifier in a Pipeline, and\n    do not have to change the parameter grid, adding the ``clf__`` prefix. From::\n\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> gs = make_grid_search(lr)\n\n    to::\n\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> gs = make_grid_search(Pipeline([('reduce', SelectKBest()),\n        ...                                 ('clf', lr)]))\n\n\nYou want to change the estimator being searched in a pipeline.\n    With scikit-learn, to use PCA instead of SelectKBest, you change::\n\n        >>> pipe = Pipeline([('reduce', SelectKBest()),\n        ...                  ('clf', LogisticRegression())])\n        >>> gs = GridSearchCV(pipe,\n        ...                   {'reduce__k': [5, 10, 20],\n        ...                    'clf__C': [.1, 1, 10]})\n\n    to::\n\n        >>> pipe = Pipeline([('reduce', PCA()),\n        ...                  ('clf', LogisticRegression())])\n        >>> gs = GridSearchCV(pipe,\n        ...                   {'reduce__n_components': [5, 10, 20],\n        ...                    'clf__C': [.1, 1, 10]})\n\n    Note that ``reduce__k`` became ``reduce__n_components``.\n\n    With searchgrid it's easier because you change the estimator and the\n    parameters in the same place::\n\n        >>> reduce = set_grid(SelectKBest(), k=[5, 10, 20])\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> pipe = Pipeline([('reduce', reduce),\n        ...                  ('clf', lr)])\n        >>> gs = make_grid_search(pipe)\n\n    becomes::\n\n        >>> reduce = set_grid(PCA(), n_components=[5, 10, 20])\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> pipe = Pipeline([('reduce', reduce),\n        ...                  ('clf', lr)])\n        >>> gs = make_grid_search(pipe)\n\nSearching over multiple grids.\n    You want to take the code from the previous example, but instead search\n    over feature selection and PCA reduction in the same search.\n\n    Without searchgrid::\n\n        >>> pipe = Pipeline([('reduce', None),\n        ...                  ('clf', LogisticRegression())])\n        >>> gs = GridSearchCV(pipe, [{'reduce': [SelectKBest()],\n        ...                           'reduce__k': [5, 10, 20],\n        ...                           'clf__C': [.1, 1, 10]},\n        ...                          {'reduce': [PCA()],\n        ...                           'reduce__n_components': [5, 10, 20],\n        ...                           'clf__C': [.1, 1, 10]}])\n\n    With searchgrid::\n\n        >>> kbest = set_grid(SelectKBest(), k=[5, 10, 20])\n        >>> pca = set_grid(PCA(), n_components=[5, 10, 20])\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> pipe = set_grid(Pipeline([('reduce', None),\n        ...                           ('clf', lr)]),\n        ...                 reduce=[kbest, pca])\n        >>> gs = make_grid_search(pipe)\n\n    And since you no longer care about step names, use\n    `searchgrid.make_pipeline` to express alternative steps even more simply::\n\n        >>> from searchgrid import make_pipeline\n        >>> kbest = set_grid(SelectKBest(), k=[5, 10, 20])\n        >>> pca = set_grid(PCA(), n_components=[5, 10, 20])\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> pipe = make_pipeline([kbest, pca], lr)\n        >>> gs = make_grid_search(pipe)\n\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/searchgrid.svg\n    :alt: Python versions supported\n\n.. |version| image:: https://badge.fury.io/py/searchgrid.svg\n    :alt: Latest version on PyPi\n    :target: https://badge.fury.io/py/searchgrid\n\n.. |build| image:: https://travis-ci.org/jnothman/searchgrid.svg?branch=master\n    :alt: Travis CI build status\n    :scale: 100%\n    :target: https://travis-ci.org/jnothman/searchgrid\n\n.. |issues| image:: https://img.shields.io/github/issues/jnothman/searchgrid.svg\n    :alt: Issue tracker\n    :target: https://github.com/jnothman/searchgrid\n\n.. |coverage| image:: https://coveralls.io/repos/github/jnothman/searchgrid/badge.svg\n    :alt: Test coverage\n    :target: https://coveralls.io/github/jnothman/searchgrid\n\n.. |docs| image:: https://readthedocs.org/projects/searchgrid/badge/?version=latest\n     :alt: Documentation Status\n     :scale: 100%\n     :target: https://searchgrid.readthedocs.io/en/latest/?badge=latest\n\n.. |licence| image:: https://img.shields.io/badge/Licence-BSD-blue.svg\n     :target: https://opensource.org/licenses/BSD-3-Clause\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://searchgrid.readthedocs.io", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "searchgrid", "package_url": "https://pypi.org/project/searchgrid/", "platform": "", "project_url": "https://pypi.org/project/searchgrid/", "project_urls": {"Homepage": "https://searchgrid.readthedocs.io"}, "release_url": "https://pypi.org/project/searchgrid/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Helpers for building parameter grids for scikit-learn grid search", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Helps building parameter grids for <cite>scikit-learn grid search\n&lt;scikit-learn:grid_search&gt;</cite>.</p>\n<p><a href=\"https://badge.fury.io/py/searchgrid\" rel=\"nofollow\"><img alt=\"Latest version on PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3d8ab9a330c5ad054546f250453533aed75f44d/68747470733a2f2f62616467652e667572792e696f2f70792f736561726368677269642e737667\"></a> <a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"licence\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3643cf69b4beb04b820ddeb1ba12e8f6372a3af/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e63652d4253442d626c75652e737667\"></a> <img alt=\"Python versions supported\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/adb0410a64f9d237537da6da26ac816155ae7b02/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f736561726368677269642e737667\"></p>\n<p><a href=\"https://github.com/jnothman/searchgrid\" rel=\"nofollow\"><img alt=\"Issue tracker\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d19e4146692ec55a6ef13713f29087904f2c9dce/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6a6e6f74686d616e2f736561726368677269642e737667\"></a> <a href=\"https://travis-ci.org/jnothman/searchgrid\" rel=\"nofollow\"><img alt=\"Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3024f5e1e5e52a77b24d5641a7a4958dc54dc5df/68747470733a2f2f7472617669732d63692e6f72672f6a6e6f74686d616e2f736561726368677269642e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://searchgrid.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/167790a91bfed7dddc7656bdd44a2900229d8a4d/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736561726368677269642f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://coveralls.io/github/jnothman/searchgrid\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87b7a74893f687fc2cc8bd3ac7971f742bdfef1c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6e6f74686d616e2f736561726368677269642f62616467652e737667\"></a></p>\n<p>Specifying a parameter grid for <cite>sklearn.model_selection.GridSearchCV &lt;GridSearchCV&gt;</cite> in\nScikit-Learn can be annoying, particularly when:</p>\n<ul>\n<li>you change your code to wrap some estimator in, say, a <tt>Pipeline</tt>\nand then need to prefix all the parameters in the grid using lots of\n<tt>__</tt>s</li>\n<li>you are searching over multiple grids (i.e. your <tt>param_grid</tt> is a\nlist) and you want to make a change to all of those grids</li>\n</ul>\n<p>searchgrid allows you to define (and change) the grid together with the\nesimator, reducing effort and sometimes code.\nIt stores the parameters you want to search on each particular estimator\nobject. This makes it much more straightforward to\nspecify complex parameter grids, and means you don\u2019t need to update your\ngrid when you change the structure of your composite estimator.</p>\n<p>It provides two main functions:</p>\n<ul>\n<li><cite>searchgrid.set_grid</cite> is used to specify the parameter values to be\nsearched for an estimator or GP kernel.</li>\n<li><cite>searchgrid.make_grid_search</cite> is used to construct the\n<tt>GridSearchCV</tt> object using the parameter space the estimator is annotated\nwith.</li>\n</ul>\n<p>Other utilities for constructing search spaces include:</p>\n<ul>\n<li><cite>searchgrid.build_param_grid</cite></li>\n<li><cite>searchgrid.make_pipeline</cite></li>\n<li><cite>searchgrid.make_union</cite></li>\n</ul>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>If scikit-learn is installed, then, in a terminal:</p>\n<pre>pip install searchgrid\n</pre>\n<p>and use in Python:</p>\n<pre>from search_grid import set_grid, make_grid_search\nestimator = set_grid(MyEstimator(), param=[value1, value2, value3])\nsearch = make_grid_search(estimator, cv=..., scoring=...)\nsearch.fit(X, y)\n</pre>\n<p>Or search for the best among multiple distinct estimators/pipelines:</p>\n<pre>search = make_grid_search([estimator1, estimator2], cv=..., scoring=...)\nsearch.fit(X, y)\n</pre>\n</div>\n<div id=\"motivating-examples\">\n<h2>Motivating examples</h2>\n<p>Let\u2019s look over some of the messy change cases. We\u2019ll get some imports out of\nthe way.:</p>\n<pre>&gt;&gt;&gt; from sklearn.pipeline import Pipeline\n&gt;&gt;&gt; from sklearn.linear_model import LogisticRegression\n&gt;&gt;&gt; from sklearn.feature_selection import SelectKBest\n&gt;&gt;&gt; from sklearn.decomposition import PCA\n&gt;&gt;&gt; from searchgrid import set_grid, make_grid_search\n&gt;&gt;&gt; from sklearn.model_selection import GridSearchCV\n</pre>\n<dl>\n<dt>Wrapping an estimator in a pipeline.</dt>\n<dd><p>You had code which searched over parameters for a classifier.\nNow you want to search for that classifier in a Pipeline.\nWith plain old scikit-learn, you have to insert <tt>__</tt>s and change:</p>\n<pre>&gt;&gt;&gt; gs = GridSearchCV(LogisticRegression(), {'C': [.1, 1, 10]})\n</pre>\n<p>to:</p>\n<pre>&gt;&gt;&gt; gs = GridSearchCV(Pipeline([('reduce', SelectKBest()),\n...                             ('clf', LogisticRegression())]),\n...                   {'clf__C': [.1, 1, 10]})\n</pre>\n<p>With searchgrid we only have to wrap our classifier in a Pipeline, and\ndo not have to change the parameter grid, adding the <tt>clf__</tt> prefix. From:</p>\n<pre>&gt;&gt;&gt; lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n&gt;&gt;&gt; gs = make_grid_search(lr)\n</pre>\n<p>to:</p>\n<pre>&gt;&gt;&gt; lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n&gt;&gt;&gt; gs = make_grid_search(Pipeline([('reduce', SelectKBest()),\n...                                 ('clf', lr)]))\n</pre>\n</dd>\n<dt>You want to change the estimator being searched in a pipeline.</dt>\n<dd><p>With scikit-learn, to use PCA instead of SelectKBest, you change:</p>\n<pre>&gt;&gt;&gt; pipe = Pipeline([('reduce', SelectKBest()),\n...                  ('clf', LogisticRegression())])\n&gt;&gt;&gt; gs = GridSearchCV(pipe,\n...                   {'reduce__k': [5, 10, 20],\n...                    'clf__C': [.1, 1, 10]})\n</pre>\n<p>to:</p>\n<pre>&gt;&gt;&gt; pipe = Pipeline([('reduce', PCA()),\n...                  ('clf', LogisticRegression())])\n&gt;&gt;&gt; gs = GridSearchCV(pipe,\n...                   {'reduce__n_components': [5, 10, 20],\n...                    'clf__C': [.1, 1, 10]})\n</pre>\n<p>Note that <tt>reduce__k</tt> became <tt>reduce__n_components</tt>.</p>\n<p>With searchgrid it\u2019s easier because you change the estimator and the\nparameters in the same place:</p>\n<pre>&gt;&gt;&gt; reduce = set_grid(SelectKBest(), k=[5, 10, 20])\n&gt;&gt;&gt; lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n&gt;&gt;&gt; pipe = Pipeline([('reduce', reduce),\n...                  ('clf', lr)])\n&gt;&gt;&gt; gs = make_grid_search(pipe)\n</pre>\n<p>becomes:</p>\n<pre>&gt;&gt;&gt; reduce = set_grid(PCA(), n_components=[5, 10, 20])\n&gt;&gt;&gt; lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n&gt;&gt;&gt; pipe = Pipeline([('reduce', reduce),\n...                  ('clf', lr)])\n&gt;&gt;&gt; gs = make_grid_search(pipe)\n</pre>\n</dd>\n<dt>Searching over multiple grids.</dt>\n<dd><p>You want to take the code from the previous example, but instead search\nover feature selection and PCA reduction in the same search.</p>\n<p>Without searchgrid:</p>\n<pre>&gt;&gt;&gt; pipe = Pipeline([('reduce', None),\n...                  ('clf', LogisticRegression())])\n&gt;&gt;&gt; gs = GridSearchCV(pipe, [{'reduce': [SelectKBest()],\n...                           'reduce__k': [5, 10, 20],\n...                           'clf__C': [.1, 1, 10]},\n...                          {'reduce': [PCA()],\n...                           'reduce__n_components': [5, 10, 20],\n...                           'clf__C': [.1, 1, 10]}])\n</pre>\n<p>With searchgrid:</p>\n<pre>&gt;&gt;&gt; kbest = set_grid(SelectKBest(), k=[5, 10, 20])\n&gt;&gt;&gt; pca = set_grid(PCA(), n_components=[5, 10, 20])\n&gt;&gt;&gt; lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n&gt;&gt;&gt; pipe = set_grid(Pipeline([('reduce', None),\n...                           ('clf', lr)]),\n...                 reduce=[kbest, pca])\n&gt;&gt;&gt; gs = make_grid_search(pipe)\n</pre>\n<p>And since you no longer care about step names, use\n<cite>searchgrid.make_pipeline</cite> to express alternative steps even more simply:</p>\n<pre>&gt;&gt;&gt; from searchgrid import make_pipeline\n&gt;&gt;&gt; kbest = set_grid(SelectKBest(), k=[5, 10, 20])\n&gt;&gt;&gt; pca = set_grid(PCA(), n_components=[5, 10, 20])\n&gt;&gt;&gt; lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n&gt;&gt;&gt; pipe = make_pipeline([kbest, pca], lr)\n&gt;&gt;&gt; gs = make_grid_search(pipe)\n</pre>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 4429919, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9a4349ef6135bae4ab35429ac6803900", "sha256": "7b6f832f83e77d599644dcba9f5d2f385d3c6923b23aeddb345bf1e255d60c6e"}, "downloads": -1, "filename": "searchgrid-0.1.tar.gz", "has_sig": false, "md5_digest": "9a4349ef6135bae4ab35429ac6803900", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4885, "upload_time": "2017-10-19T02:22:21", "upload_time_iso_8601": "2017-10-19T02:22:21.264235Z", "url": "https://files.pythonhosted.org/packages/36/8f/86cb25fd073f5054be9f75b9378dafd424e42836ba3074bc2b026f60403c/searchgrid-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5f6732211969e504487c9ceb09aad2eb", "sha256": "fcef58de13ad59b69cc2900ded570d9247023a963ef136411937704976a13a65"}, "downloads": -1, "filename": "searchgrid-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5f6732211969e504487c9ceb09aad2eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4938, "upload_time": "2017-10-25T04:11:31", "upload_time_iso_8601": "2017-10-25T04:11:31.814921Z", "url": "https://files.pythonhosted.org/packages/8b/f5/4d7e018abfa006f3bdb50996f1deaeda1bc486014960ffbc52e920664d13/searchgrid-0.1.1.tar.gz", "yanked": false}], "0.1a1": [{"comment_text": "", "digests": {"md5": "5d3ce0ba2aa34232cdf054f4c9ebc068", "sha256": "158f5620a5d41270ab5283a98e43da148d193134542bfbaecc887039e6963214"}, "downloads": -1, "filename": "searchgrid-0.1a1.tar.gz", "has_sig": false, "md5_digest": "5d3ce0ba2aa34232cdf054f4c9ebc068", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3217, "upload_time": "2017-08-04T04:01:05", "upload_time_iso_8601": "2017-08-04T04:01:05.584283Z", "url": "https://files.pythonhosted.org/packages/14/c7/e0640b497c75586a69286201696d15a23327c58f95694e20958750321505/searchgrid-0.1a1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "545ffd93cebe33ed8577a3fa90e9781e", "sha256": "b3e660a4579d4ebd71081b21254ee945f43e2971bd1adab5d0826e0a340330f1"}, "downloads": -1, "filename": "searchgrid-0.2.0.tar.gz", "has_sig": false, "md5_digest": "545ffd93cebe33ed8577a3fa90e9781e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6179, "upload_time": "2018-10-30T03:26:46", "upload_time_iso_8601": "2018-10-30T03:26:46.983234Z", "url": "https://files.pythonhosted.org/packages/a2/cd/10e39018f721b77a8decbb3f6442e4c0f0ad6cab2999aec2cf9af3b3d1b4/searchgrid-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "545ffd93cebe33ed8577a3fa90e9781e", "sha256": "b3e660a4579d4ebd71081b21254ee945f43e2971bd1adab5d0826e0a340330f1"}, "downloads": -1, "filename": "searchgrid-0.2.0.tar.gz", "has_sig": false, "md5_digest": "545ffd93cebe33ed8577a3fa90e9781e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6179, "upload_time": "2018-10-30T03:26:46", "upload_time_iso_8601": "2018-10-30T03:26:46.983234Z", "url": "https://files.pythonhosted.org/packages/a2/cd/10e39018f721b77a8decbb3f6442e4c0f0ad6cab2999aec2cf9af3b3d1b4/searchgrid-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:05 2020"}