{"info": {"author": "SPCL @ ETH Zurich", "author_email": "talbn@inf.ethz.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/spcl/pymlir.svg?branch=master)](https://travis-ci.org/spcl/pymlir)\n[![codecov](https://codecov.io/gh/spcl/pymlir/branch/master/graph/badge.svg)](https://codecov.io/gh/spcl/pymlir)\n\n\n# pyMLIR: Python Interface for the Multi-Level Intermediate Representation\n\npyMLIR is a full Python interface to parse, process, and output [MLIR](https://mlir.llvm.org/) files according to the\nsyntax described in the [MLIR documentation](https://github.com/llvm/llvm-project/tree/master/mlir/docs). pyMLIR \nsupports the basic dialects and can be extended with other dialects. It uses [Lark](https://github.com/lark-parser/lark)\nto parse the MLIR syntax, and mirrors the classes into Python classes. Custom dialects can also be implemented with a\nPython string-format-like syntax, or via direct parsing.\n\nNote that the tool *does not depend on LLVM or MLIR*. It can be installed and invoked directly from Python. \n\n## Instructions \n\n**How to install:** `pip install git+git://github.com/spcl/pymlir.git`\n\n**Requirements:** Python 3.6 or newer, and the requirements in `setup.py` or `requirements.txt`. To manually install the\nrequirements, use `pip install -r requirements.txt`\n\n**Problem parsing MLIR files?** Run the file through LLVM's `mlir-opt` to canonicalize it (instructions on how to\nbuild/install MLIR can be found [here](https://mlir.llvm.org/getting_started/)):\n```\n$ mlir-opt file.mlir > output.mlir\n```\n\n**Found other problems parsing files?** Not all dialects and modes are supported. Feel free to send us an issue or\ncreate a pull request! This is a community project and we welcome any contribution.\n\n## Usage examples\n\n### Parsing MLIR files into Python\n\n```python\nimport mlir\n\n# Read a file path, file handle (stream), or a string\nast1 = mlir.parse_path('/path/to/file.mlir')\nast2 = mlir.parse_file(open('/path/to/file.mlir', 'r'))\nast3 = mlir.parse_string('''\nmodule {\n  func @toy_func(%tensor: tensor<2x3xf64>) -> tensor<3x2xf64> {\n    %t_tensor = \"toy.transpose\"(%tensor) { inplace = true } : (tensor<2x3xf64>) -> tensor<3x2xf64>\n    return %t_tensor : tensor<3x2xf64>\n  }\n}\n''')\n```\n\n### Inspecting MLIR files in Python\n\nMLIR files can be inspected by dumping their contents (which will print standard MLIR code), or by using the same tools\nas you would with Python's [ast](https://docs.python.org/3/library/ast.html) module.\n\n```python\nimport mlir\n\n# Dump valid MLIR files\nm = mlir.parse_path('/path/to/file.mlir')\nprint(m.dump())\n\nprint('---')\n\n# Dump the AST directly\nprint(m.dump_ast())\n\nprint('---')\n\n# Or visit each node type by implementing visitor functions\nclass MyVisitor(mlir.NodeVisitor):\n    def visit_Function(self, node: mlir.astnodes.Function):\n        print('Function detected:', node.name.value)\n\nMyVisitor().visit(m)\n```\n\n### Transforming MLIR files\n\nMLIR files can also be transformed with a Python-like \n[NodeTransformer](https://docs.python.org/3/library/ast.html#ast.NodeTransformer) object.\n\n```python\nimport mlir\n\nm = mlir.parse_path('/path/to/file.mlir')\n\n# Simple node transformer that removes all operations with a result\nclass RemoveAllResultOps(mlir.NodeTransformer):\n    def visit_Operation(self, node: mlir.astnodes.Operation):\n        # There are one or more outputs, return None to remove from AST\n        if len(node.result_list) > 0:\n            return None\n\n        # No outputs, no need to do anything\n        return self.generic_visit(node)\n\nm = RemoveAllResultOps().visit(m)\n\n# Write back to file\nwith open('output.mlir', 'w') as fp:\n    fp.write(m.dump())\n```\n\n### Using custom dialects\n\nCustom dialects can be written and loaded as part of the pyMLIR parser.\n\n```python\nimport mlir\nfrom lark import UnexpectedCharacters\nfrom .mydialect import dialect\n\n# Try to parse as-is\ntry:\n    m = mlir.parse_path('/path/to/matrixfile.mlir')\nexcept UnexpectedCharacters:  # MyMatrix dialect not recognized\n    pass\n\n# Add dialect to the parser\nm = mlir.parse_path('/path/to/matrixfile.mlir', \n                    dialects=[dialect])\n\n# Print output back\nprint(m.dump_ast())\n```\n\n### Built-in dialect implementations and more examples\n\nAll dialect implementations can be found in the `mlir/dialects` subfolder. Additional uses\nof the library, including a custom dialect implementation, can be found in the `tests`\nsubfolder.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spcl/pymlir", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pymlir", "package_url": "https://pypi.org/project/pymlir/", "platform": "", "project_url": "https://pypi.org/project/pymlir/", "project_urls": {"Homepage": "https://github.com/spcl/pymlir"}, "release_url": "https://pypi.org/project/pymlir/0.3/", "requires_dist": ["lark-parser", "parse"], "requires_python": ">=3.6", "summary": "", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/spcl/pymlir\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6be06d5b65cb46c89b72bdd918a13d25939b752/68747470733a2f2f7472617669732d63692e6f72672f7370636c2f70796d6c69722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/spcl/pymlir\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1c882b9f6e82b8e5cebc1818609028b4391a414/68747470733a2f2f636f6465636f762e696f2f67682f7370636c2f70796d6c69722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>pyMLIR: Python Interface for the Multi-Level Intermediate Representation</h1>\n<p>pyMLIR is a full Python interface to parse, process, and output <a href=\"https://mlir.llvm.org/\" rel=\"nofollow\">MLIR</a> files according to the\nsyntax described in the <a href=\"https://github.com/llvm/llvm-project/tree/master/mlir/docs\" rel=\"nofollow\">MLIR documentation</a>. pyMLIR\nsupports the basic dialects and can be extended with other dialects. It uses <a href=\"https://github.com/lark-parser/lark\" rel=\"nofollow\">Lark</a>\nto parse the MLIR syntax, and mirrors the classes into Python classes. Custom dialects can also be implemented with a\nPython string-format-like syntax, or via direct parsing.</p>\n<p>Note that the tool <em>does not depend on LLVM or MLIR</em>. It can be installed and invoked directly from Python.</p>\n<h2>Instructions</h2>\n<p><strong>How to install:</strong> <code>pip install git+git://github.com/spcl/pymlir.git</code></p>\n<p><strong>Requirements:</strong> Python 3.6 or newer, and the requirements in <code>setup.py</code> or <code>requirements.txt</code>. To manually install the\nrequirements, use <code>pip install -r requirements.txt</code></p>\n<p><strong>Problem parsing MLIR files?</strong> Run the file through LLVM's <code>mlir-opt</code> to canonicalize it (instructions on how to\nbuild/install MLIR can be found <a href=\"https://mlir.llvm.org/getting_started/\" rel=\"nofollow\">here</a>):</p>\n<pre><code>$ mlir-opt file.mlir &gt; output.mlir\n</code></pre>\n<p><strong>Found other problems parsing files?</strong> Not all dialects and modes are supported. Feel free to send us an issue or\ncreate a pull request! This is a community project and we welcome any contribution.</p>\n<h2>Usage examples</h2>\n<h3>Parsing MLIR files into Python</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mlir</span>\n\n<span class=\"c1\"># Read a file path, file handle (stream), or a string</span>\n<span class=\"n\">ast1</span> <span class=\"o\">=</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">parse_path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.mlir'</span><span class=\"p\">)</span>\n<span class=\"n\">ast2</span> <span class=\"o\">=</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">parse_file</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.mlir'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">))</span>\n<span class=\"n\">ast3</span> <span class=\"o\">=</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">parse_string</span><span class=\"p\">(</span><span class=\"s1\">'''</span>\n<span class=\"s1\">module {</span>\n<span class=\"s1\">  func @toy_func(%tensor: tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;3x2xf64&gt; {</span>\n<span class=\"s1\">    %t_tensor = \"toy.transpose\"(%tensor) { inplace = true } : (tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;3x2xf64&gt;</span>\n<span class=\"s1\">    return %t_tensor : tensor&lt;3x2xf64&gt;</span>\n<span class=\"s1\">  }</span>\n<span class=\"s1\">}</span>\n<span class=\"s1\">'''</span><span class=\"p\">)</span>\n</pre>\n<h3>Inspecting MLIR files in Python</h3>\n<p>MLIR files can be inspected by dumping their contents (which will print standard MLIR code), or by using the same tools\nas you would with Python's <a href=\"https://docs.python.org/3/library/ast.html\" rel=\"nofollow\">ast</a> module.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mlir</span>\n\n<span class=\"c1\"># Dump valid MLIR files</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">parse_path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.mlir'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">())</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Dump the AST directly</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">dump_ast</span><span class=\"p\">())</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or visit each node type by implementing visitor functions</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyVisitor</span><span class=\"p\">(</span><span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">NodeVisitor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">visit_Function</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">astnodes</span><span class=\"o\">.</span><span class=\"n\">Function</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Function detected:'</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"n\">MyVisitor</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n</pre>\n<h3>Transforming MLIR files</h3>\n<p>MLIR files can also be transformed with a Python-like\n<a href=\"https://docs.python.org/3/library/ast.html#ast.NodeTransformer\" rel=\"nofollow\">NodeTransformer</a> object.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mlir</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">parse_path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.mlir'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Simple node transformer that removes all operations with a result</span>\n<span class=\"k\">class</span> <span class=\"nc\">RemoveAllResultOps</span><span class=\"p\">(</span><span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">NodeTransformer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">visit_Operation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">astnodes</span><span class=\"o\">.</span><span class=\"n\">Operation</span><span class=\"p\">):</span>\n        <span class=\"c1\"># There are one or more outputs, return None to remove from AST</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">result_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># No outputs, no need to do anything</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generic_visit</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">RemoveAllResultOps</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Write back to file</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output.mlir'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n    <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">())</span>\n</pre>\n<h3>Using custom dialects</h3>\n<p>Custom dialects can be written and loaded as part of the pyMLIR parser.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mlir</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lark</span> <span class=\"kn\">import</span> <span class=\"n\">UnexpectedCharacters</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.mydialect</span> <span class=\"kn\">import</span> <span class=\"n\">dialect</span>\n\n<span class=\"c1\"># Try to parse as-is</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">parse_path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/matrixfile.mlir'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">UnexpectedCharacters</span><span class=\"p\">:</span>  <span class=\"c1\"># MyMatrix dialect not recognized</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Add dialect to the parser</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">mlir</span><span class=\"o\">.</span><span class=\"n\">parse_path</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/matrixfile.mlir'</span><span class=\"p\">,</span> \n                    <span class=\"n\">dialects</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">dialect</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Print output back</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">dump_ast</span><span class=\"p\">())</span>\n</pre>\n<h3>Built-in dialect implementations and more examples</h3>\n<p>All dialect implementations can be found in the <code>mlir/dialects</code> subfolder. Additional uses\nof the library, including a custom dialect implementation, can be found in the <code>tests</code>\nsubfolder.</p>\n\n          </div>"}, "last_serial": 6441336, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "fcd33f85010e352289285967db1cd39e", "sha256": "7da86768f918dc8550ede91670bda037862fbb54de20482066a0752461c932da"}, "downloads": -1, "filename": "pymlir-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fcd33f85010e352289285967db1cd39e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23628, "upload_time": "2020-01-12T21:44:34", "upload_time_iso_8601": "2020-01-12T21:44:34.663273Z", "url": "https://files.pythonhosted.org/packages/48/95/5f0fe876cab1b047dd0f582530dc819b27628187814e6de3145b9eaeb6e7/pymlir-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8412083bf0bac7ab2473cd70942c691a", "sha256": "8202fe59c2fa8416098d8b6158a7c1e0965b94645076a9a0773c549f52aef9af"}, "downloads": -1, "filename": "pymlir-0.3.tar.gz", "has_sig": false, "md5_digest": "8412083bf0bac7ab2473cd70942c691a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16470, "upload_time": "2020-01-12T21:44:37", "upload_time_iso_8601": "2020-01-12T21:44:37.507224Z", "url": "https://files.pythonhosted.org/packages/3b/05/9ced6a67b15c78fb80270b3efd35803ab8ab693b2aaa54dfcbff8fd9d550/pymlir-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcd33f85010e352289285967db1cd39e", "sha256": "7da86768f918dc8550ede91670bda037862fbb54de20482066a0752461c932da"}, "downloads": -1, "filename": "pymlir-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fcd33f85010e352289285967db1cd39e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23628, "upload_time": "2020-01-12T21:44:34", "upload_time_iso_8601": "2020-01-12T21:44:34.663273Z", "url": "https://files.pythonhosted.org/packages/48/95/5f0fe876cab1b047dd0f582530dc819b27628187814e6de3145b9eaeb6e7/pymlir-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8412083bf0bac7ab2473cd70942c691a", "sha256": "8202fe59c2fa8416098d8b6158a7c1e0965b94645076a9a0773c549f52aef9af"}, "downloads": -1, "filename": "pymlir-0.3.tar.gz", "has_sig": false, "md5_digest": "8412083bf0bac7ab2473cd70942c691a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16470, "upload_time": "2020-01-12T21:44:37", "upload_time_iso_8601": "2020-01-12T21:44:37.507224Z", "url": "https://files.pythonhosted.org/packages/3b/05/9ced6a67b15c78fb80270b3efd35803ab8ab693b2aaa54dfcbff8fd9d550/pymlir-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:01 2020"}