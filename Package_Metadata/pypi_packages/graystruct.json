{"info": {"author": "Simon Jagoe", "author_email": "simon@simonjagoe.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development", "Topic :: System :: Logging"], "description": "============\n graystruct\n============\n\nIntegration between structlog and graylog GELF, provided by graypy.\n\n\nRationale\n=========\n\nStructlog_ provides a rich tool for producing structured log messages\nfrom applications.  Graypy_ provides a Python interface to emit logs in\nthe GELF_ format accepted by graylog_.  In effect, structlog_\npre-processes the _inputs_ to Python ``logging`` module, while graypy_\nprocesses the outputs (``LogRecord`` instances), and neither expects the\nother to be present.\n\n``graystruct`` provides a small integration layer composed of two main\ncomponents that are used in conjunction with both structlog_ and\ngraypy_.  These components minimally alter the behaviour of structlog_\nand graypy_ at their interface points so that they are able to cooperate\nin producing structured logs.\n\n\nExample\n=======\n\n\n.. code-block:: python\n\n    >>> import logging\n    >>> import structlog\n    >>> from graystruct.encoder import GELFEncoder\n    >>> from graystruct.handler import GELFHandler\n    >>> from graystruct.utils import add_app_context\n    >>> structlog.configure(\n    ...     logger_factory=structlog.stdlib.LoggerFactory(),\n    ...     processors=[\n    ...         # Prevent exception formatting if logging is not configured\n    ...         structlog.stdlib.filter_by_level,\n    ...         # Add file, line, function information of where log occurred\n    ...         add_app_context,\n    ...         # Format positional args to log as in stdlib\n    ...         structlog.stdlib.PositionalArgumentsFormatter(),\n    ...         # Add a timestamp to log message\n    ...         structlog.processors.TimeStamper(fmt='iso', utc=True),\n    ...         # Dump stack if ``stack_info=True`` passed to log\n    ...         structlog.processors.StackInfoRenderer(),\n    ...         # Format exception info is ``exc_info`` passed to log\n    ...         structlog.processors.format_exc_info,\n    ...         # Encode the message in GELF format (this must be the final processor)\n    ...         structlog.processors.GELFEncoder(),\n    ...     ],\n    ... )\n    >>> std_logger = logging.getLogger()\n    >>> std_logger.setLevel(logging.WARNING)\n    >>> gelf_handler = GELFHandler('localhost', 12201)\n    >>> std_logger.addHandler(gelf_handler)\n    >>> logger = structlog.get_logger('some.package')\n    # Will transmit a GELF-encoded message\n    >>> logger.error('user.login', username='sjagoe')\n\n\n.. _structlog: https://pypi.python.org/pypi/structlog\n.. _Structlog: https://pypi.python.org/pypi/structlog\n\n.. _graypy: https://pypi.python.org/pypi/graypy\n.. _Graypy: https://pypi.python.org/pypi/graypy\n\n.. _graylog: https://www.graylog.org\n.. _GELF: https://www.graylog.org/resources/gelf-2/", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sjagoe/graystruct", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "graystruct", "package_url": "https://pypi.org/project/graystruct/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/graystruct/", "project_urls": {"Homepage": "https://github.com/sjagoe/graystruct"}, "release_url": "https://pypi.org/project/graystruct/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Integration between structlog and graylog GELF, provided by graypy", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Integration between structlog and graylog GELF, provided by graypy.</p>\n<div id=\"rationale\">\n<h2>Rationale</h2>\n<p><a href=\"https://pypi.python.org/pypi/structlog\" rel=\"nofollow\">Structlog</a> provides a rich tool for producing structured log messages\nfrom applications.  <a href=\"https://pypi.python.org/pypi/graypy\" rel=\"nofollow\">Graypy</a> provides a Python interface to emit logs in\nthe <a href=\"https://www.graylog.org/resources/gelf-2/\" rel=\"nofollow\">GELF</a> format accepted by <a href=\"https://www.graylog.org\" rel=\"nofollow\">graylog</a>.  In effect, <a href=\"https://pypi.python.org/pypi/structlog\" rel=\"nofollow\">structlog</a>\npre-processes the _inputs_ to Python <tt>logging</tt> module, while <a href=\"https://pypi.python.org/pypi/graypy\" rel=\"nofollow\">graypy</a>\nprocesses the outputs (<tt>LogRecord</tt> instances), and neither expects the\nother to be present.</p>\n<p><tt>graystruct</tt> provides a small integration layer composed of two main\ncomponents that are used in conjunction with both <a href=\"https://pypi.python.org/pypi/structlog\" rel=\"nofollow\">structlog</a> and\n<a href=\"https://pypi.python.org/pypi/graypy\" rel=\"nofollow\">graypy</a>.  These components minimally alter the behaviour of <a href=\"https://pypi.python.org/pypi/structlog\" rel=\"nofollow\">structlog</a>\nand <a href=\"https://pypi.python.org/pypi/graypy\" rel=\"nofollow\">graypy</a> at their interface points so that they are able to cooperate\nin producing structured logs.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">structlog</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">graystruct.encoder</span> <span class=\"kn\">import</span> <span class=\"n\">GELFEncoder</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">graystruct.handler</span> <span class=\"kn\">import</span> <span class=\"n\">GELFHandler</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">graystruct.utils</span> <span class=\"kn\">import</span> <span class=\"n\">add_app_context</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">logger_factory</span><span class=\"o\">=</span><span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">LoggerFactory</span><span class=\"p\">(),</span>\n<span class=\"o\">...</span>     <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"p\">[</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># Prevent exception formatting if logging is not configured</span>\n<span class=\"o\">...</span>         <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">filter_by_level</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># Add file, line, function information of where log occurred</span>\n<span class=\"o\">...</span>         <span class=\"n\">add_app_context</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># Format positional args to log as in stdlib</span>\n<span class=\"o\">...</span>         <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">PositionalArgumentsFormatter</span><span class=\"p\">(),</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># Add a timestamp to log message</span>\n<span class=\"o\">...</span>         <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">processors</span><span class=\"o\">.</span><span class=\"n\">TimeStamper</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'iso'</span><span class=\"p\">,</span> <span class=\"n\">utc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># Dump stack if ``stack_info=True`` passed to log</span>\n<span class=\"o\">...</span>         <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">processors</span><span class=\"o\">.</span><span class=\"n\">StackInfoRenderer</span><span class=\"p\">(),</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># Format exception info is ``exc_info`` passed to log</span>\n<span class=\"o\">...</span>         <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">processors</span><span class=\"o\">.</span><span class=\"n\">format_exc_info</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># Encode the message in GELF format (this must be the final processor)</span>\n<span class=\"o\">...</span>         <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">processors</span><span class=\"o\">.</span><span class=\"n\">GELFEncoder</span><span class=\"p\">(),</span>\n<span class=\"o\">...</span>     <span class=\"p\">],</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">std_logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">std_logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">WARNING</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gelf_handler</span> <span class=\"o\">=</span> <span class=\"n\">GELFHandler</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">12201</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">std_logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">gelf_handler</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s1\">'some.package'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Will transmit a GELF-encoded message</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'user.login'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'sjagoe'</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1444559, "releases": {"0.0.1": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "c335a54c90021514172267a4656ef510", "sha256": "d76181886b0451e633d11e3023ebb4712d3452f944b13163661b775834569059"}, "downloads": -1, "filename": "graystruct-0.1.1.zip", "has_sig": false, "md5_digest": "c335a54c90021514172267a4656ef510", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10212, "upload_time": "2015-03-01T12:49:55", "upload_time_iso_8601": "2015-03-01T12:49:55.947758Z", "url": "https://files.pythonhosted.org/packages/0c/b2/6d519b74d1f2e671bdaff707d4425763c9536692544c496a05c0e15fb785/graystruct-0.1.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c335a54c90021514172267a4656ef510", "sha256": "d76181886b0451e633d11e3023ebb4712d3452f944b13163661b775834569059"}, "downloads": -1, "filename": "graystruct-0.1.1.zip", "has_sig": false, "md5_digest": "c335a54c90021514172267a4656ef510", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10212, "upload_time": "2015-03-01T12:49:55", "upload_time_iso_8601": "2015-03-01T12:49:55.947758Z", "url": "https://files.pythonhosted.org/packages/0c/b2/6d519b74d1f2e671bdaff707d4425763c9536692544c496a05c0e15fb785/graystruct-0.1.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:54:24 2020"}