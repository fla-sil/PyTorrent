{"info": {"author": "Dmitry Vakhrushev", "author_email": "self@kr41.net", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Green Rocket\n============\n\nGreen Rocket is a simple and compact implementation of Observer\n(or Publish/Subscribe) design pattern via signals.\n\nCreate specific signal using base one:\n\n..  code-block:: pycon\n\n    >>> from greenrocket import Signal\n    >>> class MySignal(Signal):\n    ...     pass\n    ...\n\nSubscribe handler:\n\n..  code-block:: pycon\n\n    >>> @MySignal.subscribe\n    ... def handler(signal):\n    ...     print('handler: ' + repr(signal))\n    ...\n\nFire signal:\n\n..  code-block:: pycon\n\n    >>> MySignal().fire()\n    handler: MySignal()\n\nIf you are using ``asyncio``, you can also use coroutines as handlers\nand fire signal asynchronously using ``await Signal.afire()`` or\n``yield from Signal().afire()``.  Method ``afire()`` works well with\nsynchronous handlers too.\n\nNote, that signal propagates over inheritance, i.e. all subscribers of base\nsignal will be called when child one is fired:\n\n..  code-block:: pycon\n\n    >>> @Signal.subscribe\n    ... def base_handler(signal):\n    ...     print('base_handler: ' + repr(signal))\n    ...\n    >>> MySignal().fire()\n    handler: MySignal()\n    base_handler: MySignal()\n\nUnsubscribe handler:\n\n..  code-block:: pycon\n\n    >>> MySignal.unsubscribe(handler)\n    >>> MySignal().fire()\n    base_handler: MySignal()\n\nThe handler is subscribed using weak reference.  So if you create and subscribe\na handler in local scope (for example inside a generator), it will be\nunsubscribed automatically.\n\n..  code-block:: pycon\n\n    >>> def gen():\n    ...     @MySignal.subscribe\n    ...     def local_handler(signal):\n    ...         print('local_handler: ' + repr(signal))\n    ...     yield 1\n    ...\n    >>> for value in gen():\n    ...     MySignal(value=value).fire()\n    ...\n    local_handler: MySignal(value=1)\n    base_handler: MySignal(value=1)\n    >>> import gc                    # PyPy fails the following test without\n    >>> _ = gc.collect()             # explicit call of garbage collector.\n    >>> MySignal(value=2).fire()\n    base_handler: MySignal(value=2)\n    >>> Signal.unsubscribe(base_handler)\n\nAs you can see above, signal constructor accepts keyword arguments.  These\narguments are available as signal's attributes:\n\n..  code-block:: pycon\n\n    >>> s = MySignal(a=1, b=2)\n    >>> s.a\n    1\n    >>> s.b\n    2\n\nSignal suppresses any exception which is raised on handler call.  It uses\nlogger named ``greenrocket`` from standard ``logging`` module to log errors and\ndebug information.\n\nThe library also provides ``Watchman`` class as a convenient way for testing\nsignals.\n\nCreate watchman for specific signal:\n\n..  code-block:: pycon\n\n    >>> from greenrocket import Watchman\n    >>> watchman = Watchman(MySignal)\n\nFire signal:\n\n..  code-block:: pycon\n\n    >>> MySignal(x=1).fire()\n\nTest signal:\n\n..  code-block:: pycon\n\n    >>> watchman.assert_fired_with(x=1)\n    >>> watchman.assert_fired_with(x=2)          # DOCTEST: +ellipsis\n    Traceback (most recent call last):\n      ...\n    AssertionError: Failed assertion on MySignal.x: 1 != 2\n    >>> watchman.assert_fired_with(x=1, y=2)     # DOCTEST: +ellipsis\n    Traceback (most recent call last):\n      ...\n    AssertionError: MySignal has no attribute y\n\nWatchman object saves each fired signal to its log:\n\n..  code-block:: pycon\n\n    >>> watchman.log\n    [MySignal(x=1)]\n    >>> MySignal(x=2).fire()\n    >>> watchman.log\n    [MySignal(x=1), MySignal(x=2)]\n\nThe method ``assert_fired_with`` tests the last signal from\nthe log by default:\n\n..  code-block:: pycon\n\n    >>> watchman.assert_fired_with(x=2)\n\nBut you can specify which one to test:\n\n..  code-block:: pycon\n\n    >>> watchman.assert_fired_with(-2, x=1)\n\n\n\nCHANGES\n=======\n\n0.30\n----\n\n*   Added ``Signal.afire()`` method that returns awaitable to support\n    coroutine-based signal handlers\n*   Dropped Python 2.6 and 3.2 support\n\n0.22\n----\n\n*   Added `Watchman` class as a testing helper\n\n0.21\n----\n\n*   Removed distribute dependency\n*   Improved tests\n\n0.20\n----\n\n*   Changed handler subscription mechanism from subscription by reference to\n    subscription by weak reference\n\n0.11\n----\n\n*   Fixed logger loose on program termination\n\n0.1\n---\n\n*   Initial release", "description_content_type": null, "docs_url": null, "download_url": "https://bitbucket.org/kr41/greenrocket/downloads", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/kr41/greenrocket", "keywords": "signal observer publisher subscriber asyncio", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "GreenRocket", "package_url": "https://pypi.org/project/GreenRocket/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/GreenRocket/", "project_urls": {"Download": "https://bitbucket.org/kr41/greenrocket/downloads", "Homepage": "https://bitbucket.org/kr41/greenrocket"}, "release_url": "https://pypi.org/project/GreenRocket/0.30/", "requires_dist": null, "requires_python": null, "summary": "A simple and compact implementation of Observer design pattern", "version": "0.30", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"green-rocket\">\n<h2>Green Rocket</h2>\n<p>Green Rocket is a simple and compact implementation of Observer\n(or Publish/Subscribe) design pattern via signals.</p>\n<p>Create specific signal using base one:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">greenrocket</span> <span class=\"kn\">import</span> <span class=\"n\">Signal</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MySignal</span><span class=\"p\">(</span><span class=\"n\">Signal</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n</pre>\n<p>Subscribe handler:</p>\n<pre><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@MySignal</span><span class=\"o\">.</span><span class=\"n\">subscribe</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'handler: '</span> <span class=\"o\">+</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">))</span>\n<span class=\"gp\">...</span>\n</pre>\n<p>Fire signal:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MySignal</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fire</span><span class=\"p\">()</span>\n<span class=\"go\">handler: MySignal()</span>\n</pre>\n<p>If you are using <tt>asyncio</tt>, you can also use coroutines as handlers\nand fire signal asynchronously using <tt>await Signal.afire()</tt> or\n<tt>yield from <span class=\"pre\">Signal().afire()</span></tt>.  Method <tt>afire()</tt> works well with\nsynchronous handlers too.</p>\n<p>Note, that signal propagates over inheritance, i.e. all subscribers of base\nsignal will be called when child one is fired:</p>\n<pre><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@Signal</span><span class=\"o\">.</span><span class=\"n\">subscribe</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">base_handler</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'base_handler: '</span> <span class=\"o\">+</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">))</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MySignal</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fire</span><span class=\"p\">()</span>\n<span class=\"go\">handler: MySignal()\nbase_handler: MySignal()</span>\n</pre>\n<p>Unsubscribe handler:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MySignal</span><span class=\"o\">.</span><span class=\"n\">unsubscribe</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MySignal</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fire</span><span class=\"p\">()</span>\n<span class=\"go\">base_handler: MySignal()</span>\n</pre>\n<p>The handler is subscribed using weak reference.  So if you create and subscribe\na handler in local scope (for example inside a generator), it will be\nunsubscribed automatically.</p>\n<pre><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">gen</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"nd\">@MySignal</span><span class=\"o\">.</span><span class=\"n\">subscribe</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">local_handler</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'local_handler: '</span> <span class=\"o\">+</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"k\">yield</span> <span class=\"mi\">1</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">MySignal</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fire</span><span class=\"p\">()</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">local_handler: MySignal(value=1)\nbase_handler: MySignal(value=1)\n</span><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">gc</span>                    <span class=\"c1\"># PyPy fails the following test without</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>             <span class=\"c1\"># explicit call of garbage collector.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MySignal</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fire</span><span class=\"p\">()</span>\n<span class=\"go\">base_handler: MySignal(value=2)\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Signal</span><span class=\"o\">.</span><span class=\"n\">unsubscribe</span><span class=\"p\">(</span><span class=\"n\">base_handler</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see above, signal constructor accepts keyword arguments.  These\narguments are available as signal\u2019s attributes:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">MySignal</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"go\">1\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"go\">2</span>\n</pre>\n<p>Signal suppresses any exception which is raised on handler call.  It uses\nlogger named <tt>greenrocket</tt> from standard <tt>logging</tt> module to log errors and\ndebug information.</p>\n<p>The library also provides <tt>Watchman</tt> class as a convenient way for testing\nsignals.</p>\n<p>Create watchman for specific signal:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">greenrocket</span> <span class=\"kn\">import</span> <span class=\"n\">Watchman</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">watchman</span> <span class=\"o\">=</span> <span class=\"n\">Watchman</span><span class=\"p\">(</span><span class=\"n\">MySignal</span><span class=\"p\">)</span>\n</pre>\n<p>Fire signal:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MySignal</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fire</span><span class=\"p\">()</span>\n</pre>\n<p>Test signal:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">watchman</span><span class=\"o\">.</span><span class=\"n\">assert_fired_with</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">watchman</span><span class=\"o\">.</span><span class=\"n\">assert_fired_with</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>          <span class=\"c1\"># DOCTEST: +ellipsis</span>\n<span class=\"gt\">Traceback (most recent call last):\n</span>  <span class=\"c\">...</span>\n<span class=\"gr\">AssertionError</span>: <span class=\"n\">Failed assertion on MySignal.x: 1 != 2</span>\n<span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">watchman</span><span class=\"o\">.</span><span class=\"n\">assert_fired_with</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>     <span class=\"c1\"># DOCTEST: +ellipsis</span>\n<span class=\"gt\">Traceback (most recent call last):\n</span>  <span class=\"c\">...</span>\n<span class=\"gr\">AssertionError</span>: <span class=\"n\">MySignal has no attribute y</span>\n</pre>\n<p>Watchman object saves each fired signal to its log:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">watchman</span><span class=\"o\">.</span><span class=\"n\">log</span>\n<span class=\"go\">[MySignal(x=1)]\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MySignal</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fire</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">watchman</span><span class=\"o\">.</span><span class=\"n\">log</span>\n<span class=\"go\">[MySignal(x=1), MySignal(x=2)]</span>\n</pre>\n<p>The method <tt>assert_fired_with</tt> tests the last signal from\nthe log by default:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">watchman</span><span class=\"o\">.</span><span class=\"n\">assert_fired_with</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>But you can specify which one to test:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">watchman</span><span class=\"o\">.</span><span class=\"n\">assert_fired_with</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>0.30</h3>\n<ul>\n<li>Added <tt>Signal.afire()</tt> method that returns awaitable to support\ncoroutine-based signal handlers</li>\n<li>Dropped Python 2.6 and 3.2 support</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.22</h3>\n<ul>\n<li>Added <cite>Watchman</cite> class as a testing helper</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.21</h3>\n<ul>\n<li>Removed distribute dependency</li>\n<li>Improved tests</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.20</h3>\n<ul>\n<li>Changed handler subscription mechanism from subscription by reference to\nsubscription by weak reference</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.11</h3>\n<ul>\n<li>Fixed logger loose on program termination</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2549898, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9b4c092d02487d8c9bae313ebaf2cb0e", "sha256": "a7cf2774748dd1d2c257c85c69102e8b2ae8bbf4aeb70143cc6a2b33d1231cb9"}, "downloads": -1, "filename": "GreenRocket-0.1.tar.gz", "has_sig": false, "md5_digest": "9b4c092d02487d8c9bae313ebaf2cb0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3379, "upload_time": "2013-02-28T17:05:33", "upload_time_iso_8601": "2013-02-28T17:05:33.316562Z", "url": "https://files.pythonhosted.org/packages/83/4c/3e668724893e295502fa954d788891e1545a95241d3eda4c032a8ca84bf9/GreenRocket-0.1.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "468a30bd8851c43237669fd1927dc8a7", "sha256": "aa81d23e1a1e1138942e77d48006a0900fa6e3c4e681191075298bb1275bd1df"}, "downloads": -1, "filename": "GreenRocket-0.11.tar.gz", "has_sig": false, "md5_digest": "468a30bd8851c43237669fd1927dc8a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3381, "upload_time": "2013-02-28T17:06:28", "upload_time_iso_8601": "2013-02-28T17:06:28.796070Z", "url": "https://files.pythonhosted.org/packages/25/19/68d1336b8d40a4a7d77f0935bc6bd20b9a2ca43593b0f7574dfd98f74a9a/GreenRocket-0.11.tar.gz", "yanked": false}], "0.20": [{"comment_text": "", "digests": {"md5": "1e1d11f45deb2d007dea1a142ae89112", "sha256": "7fdcf9cba366c691d3ab471dbe27211ae47f7ef1464a9a302f494a55e57b9cc6"}, "downloads": -1, "filename": "GreenRocket-0.20.tar.gz", "has_sig": false, "md5_digest": "1e1d11f45deb2d007dea1a142ae89112", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8833, "upload_time": "2013-06-25T19:53:11", "upload_time_iso_8601": "2013-06-25T19:53:11.556147Z", "url": "https://files.pythonhosted.org/packages/24/ba/560fc1e36abfdbbeea284cfa8e76de44e9608cc071cc2364fb5fe507a2b9/GreenRocket-0.20.tar.gz", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "77a9afd367f798fdbf569626a8551673", "sha256": "74b1eee168d6b6b97c93b4e50e50994be20a5c26224aa337de458e4a0430458e"}, "downloads": -1, "filename": "GreenRocket-0.21.tar.gz", "has_sig": false, "md5_digest": "77a9afd367f798fdbf569626a8551673", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4146, "upload_time": "2014-11-24T18:51:07", "upload_time_iso_8601": "2014-11-24T18:51:07.621378Z", "url": "https://files.pythonhosted.org/packages/90/e4/1dc88b6eaa50bac01567717d59dda17106dfd6a37066e3dff2bd288543d4/GreenRocket-0.21.tar.gz", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "24a594ebbb60b308ed532c0911e1dfca", "sha256": "adcb06d8d46d69abe8268396412aa76a664c795726480b20b8729251a9085372"}, "downloads": -1, "filename": "GreenRocket-0.22.tar.gz", "has_sig": false, "md5_digest": "24a594ebbb60b308ed532c0911e1dfca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4988, "upload_time": "2015-04-04T15:13:18", "upload_time_iso_8601": "2015-04-04T15:13:18.277763Z", "url": "https://files.pythonhosted.org/packages/4b/c7/cc5af6c0b83e658e2267142cceca670ab709bfb313ee41621ed7f0e3e229/GreenRocket-0.22.tar.gz", "yanked": false}], "0.30": [{"comment_text": "", "digests": {"md5": "69cfdd2a3a09d9e78e26bc6a9df96119", "sha256": "57a729e8a3d31e34f1eabed3570a34645d7f38cefb4678d809cead293720dbae"}, "downloads": -1, "filename": "GreenRocket-0.30.tar.gz", "has_sig": false, "md5_digest": "69cfdd2a3a09d9e78e26bc6a9df96119", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5392, "upload_time": "2017-01-02T14:52:19", "upload_time_iso_8601": "2017-01-02T14:52:19.184185Z", "url": "https://files.pythonhosted.org/packages/b6/8b/55faeb7889eed5d22b467e17380f966aea5aa97484a79990aaee80f51af9/GreenRocket-0.30.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "69cfdd2a3a09d9e78e26bc6a9df96119", "sha256": "57a729e8a3d31e34f1eabed3570a34645d7f38cefb4678d809cead293720dbae"}, "downloads": -1, "filename": "GreenRocket-0.30.tar.gz", "has_sig": false, "md5_digest": "69cfdd2a3a09d9e78e26bc6a9df96119", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5392, "upload_time": "2017-01-02T14:52:19", "upload_time_iso_8601": "2017-01-02T14:52:19.184185Z", "url": "https://files.pythonhosted.org/packages/b6/8b/55faeb7889eed5d22b467e17380f966aea5aa97484a79990aaee80f51af9/GreenRocket-0.30.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:19 2020"}