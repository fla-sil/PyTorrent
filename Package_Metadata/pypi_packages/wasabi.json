{"info": {"author": "Ines Montani", "author_email": "ines@explosion.ai", "bugtrack_url": null, "classifiers": [], "description": "# wasabi: A lightweight console printing and formatting toolkit\n\nOver the years, I've written countless implementations of coloring and\nformatting utilities to output messages in our libraries like\n[spaCy](https://spacy.io), [Thinc](https://github.com/explosion/thinc) and\n[Prodigy](https://prodi.gy). While there are many other great open-source\noptions, I've always ended up wanting something slightly different or slightly\ncustom.\n\nThis package is still a work in progress and aims to bundle those utilities in a\nstandardised way so they can be shared across our other projects. It's super\nlightweight, has zero dependencies and works across Python 2 and 3.\n\n[![Azure Pipelines](https://img.shields.io/azure-devops/build/explosion-ai/public/1/master.svg?logo=azure-pipelines&style=flat-square)](https://dev.azure.com/explosion-ai/public/_build?definitionId=1)\n[![PyPi](https://img.shields.io/pypi/v/wasabi.svg?style=flat-square&logo=pypi&logoColor=white)](https://pypi.python.org/pypi/wasabi)\n[![conda](https://img.shields.io/conda/vn/conda-forge/wasabi.svg?style=flat-square&logo=conda-forge/logoColor=white)](https://anaconda.org/conda-forge/wasabi)\n[![GitHub](https://img.shields.io/github/release/ines/wasabi/all.svg?style=flat-square&logo=github)](https://github.com/ines/wasabi)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)\n\n<img width=\"609\" src=\"https://user-images.githubusercontent.com/13643239/48663861-8c9ea000-ea96-11e8-8b04-d120c52276a8.png\">\n\n## \ud83d\udcac FAQ\n\n### Are you going to add more features?\n\nYes, there's still a few of helpers and features to port over. However, the new\nfeatures will be heavily biased by what we (think we) need. I always appreciate\npull requests to improve the existing functionality \u2013 but I want to keep this\nlibrary as simple, lightweight and specific as possible.\n\n### Can I use this for my projects?\n\nSure, if you like it, feel free to adopt it! Just keep in mind that the package\nis very specific and not intended to be a full-featured and fully customisable\nformatting library. If that's what you're looking for, you might want to try\nother packages \u2013 for example, [`colored`](https://pypi.org/project/colored/),\n[`crayons`](https://github.com/kennethreitz/crayons),\n[`colorful`](https://github.com/timofurrer/colorful),\n[`tabulate`](https://bitbucket.org/astanin/python-tabulate),\n[`console`](https://github.com/mixmastamyk/console) or\n[`py-term`](https://github.com/gravmatt/py-term), to name a few.\n\n### Why `wasabi`?\n\nI was looking for a short and descriptive name, but everything was already\ntaken. So I ended up naming this package after one of my rats, Wasabi. \ud83d\udc00\n\n## \u231b\ufe0f Installation\n\n```bash\npip install wasabi\n```\n\n## \ud83c\udf9b API\n\n### <kbd>function</kbd> `msg`\n\nAn instance of `Printer`, initialized with the default config. Useful as a quick\nshortcut if you don't need to customize initialization.\n\n```python\nfrom wasabi import msg\n\nmsg.good(\"Success!\")\n```\n\n### <kbd>class</kbd> `Printer`\n\n#### <kbd>method</kbd> `Printer.__init__`\n\n```python\nfrom wasabi import Printer\n\nmsg = Printer()\n```\n\n| Argument          | Type      | Description                                                   | Default       |\n| ----------------- | --------- | ------------------------------------------------------------- | ------------- |\n| `pretty`          | bool      | Pretty-print output with colors and icons.                    | `True`        |\n| `no_print`        | bool      | Don't actually print, just return.                            | `False`       |\n| `colors`          | dict      | Add or overwrite color values, names mapped to `0`-`256`.     | `None`        |\n| `icons`           | dict      | Add or overwrite icon. Name mapped to unicode.                | `None`        |\n| `line_max`        | int       | Maximum line length (for divider).                            | `80`          |\n| `animation`       | unicode   | Steps of loading animation for `Printer.loading`.             | `\"\u2819\u2839\u2838\u283c\u2834\u2826\u2827\u2807\u280f\"` |\n| `animation_ascii` | unicode   | Alternative animation for ASCII terminals.                    | `\"\\|/-\\\\\"`    |\n| `hide_animation`  | bool      | Don't display animation, e.g. for logs.                       | `False`       |\n| `ignore_warnings` | bool      | Don't output messages of type `MESSAGE.WARN`.                 | `False`       |\n| `env_prefix`      | unicode   | Prefix for environment variables, e.g. `WASABI_LOG_FRIENDLY`. | `\"WASABI\"`    |\n| `timestamp`       | bool      | Add timestamp before output.                                  | `False`       |\n| **RETURNS**       | `Printer` | The initialized printer.                                      | -             |\n\n#### <kbd>method</kbd> `Printer.text`\n\n```python\nmsg = Printer()\nmsg.text(\"Hello world!\")\n```\n\n| Argument   | Type           | Description                                                                                                            | Default |\n| ---------- | -------------- | ---------------------------------------------------------------------------------------------------------------------- | ------- |\n| `title`    | unicode        | The main text to print.                                                                                                | `\"\"`    |\n| `text`     | unicode        | Optional additional text to print.                                                                                     | `\"\"`    |\n| `color`    | \u00a0unicode / int | Color name or value.                                                                                                   | `None`  |\n| `icon`     | unicode        | Name of icon to add.                                                                                                   | `None`  |\n| `show`     | bool           | Whether to print or not. Can be used to only output messages under certain condition, e.g. if `--verbose` flag is set. | `True`  |\n| `spaced`   | bool           | Whether to add newlines around the output.                                                                             | `False` |\n| `no_print` | bool           | Don't actually print, just return. Overwrites global setting.                                                          | `False` |\n| `exits`    | int            | If set, perform a system exit with the given code after printing.                                                      | `None`  |\n\n#### <kbd>method</kbd> `Printer.good`, `Printer.fail`, `Printer.warn`, `Printer.info`\n\nPrint special formatted messages.\n\n```python\nmsg = Printer()\nmsg.good(\"Success\")\nmsg.fail(\"Error\")\nmsg.warn(\"Warning\")\nmsg.info(\"Info\")\n```\n\n| Argument | Type    | Description                                                                                                            | Default |\n| -------- | ------- | ---------------------------------------------------------------------------------------------------------------------- | ------- |\n| `title`  | unicode | The main text to print.                                                                                                | `\"\"`    |\n| `text`   | unicode | Optional additional text to print.                                                                                     | `\"\"`    |\n| `show`   | bool    | Whether to print or not. Can be used to only output messages under certain condition, e.g. if `--verbose` flag is set. | `True`  |\n| `exits`  | int     | If set, perform a system exit with the given code after printing.                                                      | `None`  |\n\n#### <kbd>method</kbd> `Printer.divider`\n\nPrint a formatted divider.\n\n```python\nmsg = Printer()\nmsg.divider(\"Heading\")\n```\n\n| Argument | Type    | Description                                                                                                            | Default |\n| -------- | ------- | ---------------------------------------------------------------------------------------------------------------------- | ------- |\n| `text`   | unicode | Headline text. If empty, only the line is printed.                                                                     | `\"\"`    |\n| `char`   | unicode | Single line character to repeat.                                                                                       | `\"=\"`   |\n| `show`   | bool    | Whether to print or not. Can be used to only output messages under certain condition, e.g. if `--verbose` flag is set. | `True`  |\n| `icon`   | unicode | Optional icon to use with title.                                                                                       | `None`  |\n\n#### <kbd>contextmanager</kbd> `Printer.loading`\n\n```python\nmsg = Printer()\nwith msg.loading(\"Loading...\"):\n    # Do something here that takes longer\n    time.sleep(10)\nmsg.good(\"Successfully loaded something!\")\n```\n\n| Argument | Type    | Description                        | Default |\n| -------- | ------- | ---------------------------------- | ------- |\n| `text`   | unicode | The text to display while loading. | `\"\"`    |\n\n#### <kbd>method</kbd> `Printer.table`, `Printer.row`\n\nSee [Tables](#tables).\n\n#### <kbd>property</kbd> `Printer.counts`\n\nGet the counts of how often the special printers were fired, e.g.\n`MESSAGES.GOOD`. Can be used to print an overview like \"X warnings\"\n\n```python\nmsg = Printer()\nmsg.good(\"Success\")\nmsg.fail(\"Error\")\nmsg.warn(\"Error\")\n\nprint(msg.counts)\n# Counter({'good': 1, 'fail': 2, 'warn': 0, 'info': 0})\n```\n\n| Argument    | Type      | Description                                          |\n| ----------- | --------- | ---------------------------------------------------- |\n| **RETURNS** | `Counter` | The counts for the individual special message types. |\n\n### Tables\n\n#### <kbd>function</kbd> `table`\n\nLightweight helper to format tabular data.\n\n```python\nfrom wasabi import table\n\ndata = [(\"a1\", \"a2\", \"a3\"), (\"b1\", \"b2\", \"b3\")]\nheader = (\"Column 1\", \"Column 2\", \"Column 3\")\nwidths = (8, 9, 10)\naligns = (\"r\", \"c\", \"l\")\nformatted = table(data, header=header, divider=True, widths=widths, aligns=aligns)\n```\n\n```\nColumn 1   Column 2    Column 3\n--------   ---------   ----------\n      a1      a2       a3\n      b1      b2       b3\n```\n\n| Argument    | Type                | Description                                                                                                                         | Default  |\n| ----------- | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `data`      | iterable / dict     | The data to render. Either a list of lists (one per row) or a dict for two-column tables.                                           |          |\n| `header`    | iterable            | Optional header columns.                                                                                                            | `None`   |\n| `footer`    | iterable            | Optional footer columns.                                                                                                            | `None`   |\n| `divider`   | bool                | Show a divider line between header/footer and body.                                                                                 | `False`  |\n| `widths`    | iterable / `\"auto\"` | Column widths in order. If `\"auto\"`, widths will be calculated automatically based on the largest value.                            | `\"auto\"` |\n| `max_col`   | int                 | Maximum column width.                                                                                                               | `30`     |\n| `spacing`   | int                 | Number of spaces between columns.                                                                                                   | `3`      |\n| `aligns`    | iterable / unicode  | Columns alignments in order. `\"l\"` (left, default), `\"r\"` (right) or `\"c\"` (center). If If a string, value is used for all columns. | `None`   |\n| `multiline` | bool                | If a cell value is a list of a tuple, render it on multiple lines, with one value per line.                                         | `False`  |\n| **RETURNS** | unicode             | The formatted table.                                                                                                                |          |\n\n#### <kbd>function</kbd> `row`\n\n```python\nfrom wasabi import row\n\ndata = (\"a1\", \"a2\", \"a3\")\nformatted = row(data)\n```\n\n```\na1   a2   a3\n```\n\n| Argument    | Type                      | Description                                                                                                                                                | Default  |\n| ----------- | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `data`      | iterable                  | The individual columns to format.                                                                                                                          |          |\n| `widths`    | iterable / int / `\"auto\"` | Column widths, either one integer for all columns or an iterable of values. If \"auto\", widths will be calculated automatically based on the largest value. | `\"auto\"` |\n| `spacing`   | int                       | Number of spaces between columns.                                                                                                                          | `3`      |\n| `aligns`    | iterable                  | Columns alignments in order. `\"l\"` (left), `\"r\"` (right) or `\"c\"` (center).                                                                                | `None`   |\n| **RETURNS** | unicode                   | The formatted row.                                                                                                                                         |          |\n\n### <kbd>class</kbd> `TracebackPrinter`\n\nHelper to output custom formatted tracebacks and error messages. Currently used\nin [Thinc](https://github.com/explosion/thinc).\n\n#### <kbd>method</kbd> `TracebackPrinter.__init__`\n\nInitialize a traceback printer.\n\n```python\nfrom wasabi import TracebackPrinter\n\ntb = TracebackPrinter(tb_base=\"thinc\", tb_exclude=(\"check.py\",))\n```\n\n| Argument          | Type               | Description                                                                                                                                                              | Default    |\n| ----------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------- |\n| `color_error`     | unicode / int      | Color name or code for errors (passed to `color` helper).                                                                                                                | `\"red\"`    |\n| `color_tb`        | unicode / int      | Color name or code for traceback headline (passed to `color` helper).                                                                                                    | `\"blue\"`   |\n| `color_highlight` | unicode / int      | Color name or code for highlighted text (passed to `color` helper).                                                                                                      | `\"yellow\"` |\n| `indent`          | int                | Number of spaces to use for indentation.                                                                                                                                 | `2`        |\n| `tb_base`         | unicode            | Name of directory to use to show relative paths. For example, `\"thinc\"` will look for the last occurence of `\"/thinc/\"` in a path and only show path to the right of it. | `None`     |\n| `tb_exclude`      | tuple              | List of filenames to exclude from traceback.                                                                                                                             | `tuple()`  |\n| **RETURNS**       | `TracebackPrinter` | The traceback printer.                                                                                                                                                   |            |\n\n#### <kbd>method</kbd> `TracebackPrinter.__call__`\n\nOutput custom formatted tracebacks and errors.\n\n```python\nfrom wasabi import TracebackPrinter\nimport traceback\n\ntb = TracebackPrinter(tb_base=\"thinc\", tb_exclude=(\"check.py\",))\n\nerror = tb(\"Some error\", \"Error description\", highlight=\"kwargs\", tb=traceback.extract_stack())\nraise ValueError(error)\n```\n\n```\n  Some error\n  Some error description\n\n  Traceback:\n  \u251c\u2500 <lambda> [61] in .env/lib/python3.6/site-packages/pluggy/manager.py\n  \u251c\u2500\u2500\u2500 _multicall [187] in .env/lib/python3.6/site-packages/pluggy/callers.py\n  \u2514\u2500\u2500\u2500\u2500\u2500 pytest_fixture_setup [969] in .env/lib/python3.6/site-packages/_pytest/fixtures.py\n         >>> result = call_fixture_func(fixturefunc, request, kwargs)\n```\n\n| Argument    | Type     | Description                                                                                | Default |\n| ----------- | -------- | ------------------------------------------------------------------------------------------ | ------- |\n| `title`     | unicode  | The message title.                                                                         |         |\n| `*texts`    | unicode  | Optional texts to print (one per line).                                                    |         |\n| `highlight` | unicode  | Optional sequence to highlight in the traceback, e.g. the bad value that caused the error. | `False` |\n| `tb`        | iterable | The traceback, e.g. generated by `traceback.extract_stack()`.                              | `None`  |\n| **RETURNS** | unicode  | The formatted traceback. Can be printed or raised by custom exception.                     |         |\n\n### Utilities\n\n#### <kbd>function</kbd> `color`\n\n```python\nfrom wasabi import color\n\nformatted = color(\"This is a text\", fg=\"white\", bg=\"green\", bold=True)\n```\n\n| Argument    | Type          | Description                                   | Default |\n| ----------- | ------------- | --------------------------------------------- | ------- |\n| `text`      | unicode       | The text to be formatted.                     | -       |\n| `fg`        | unicode / int | Foreground color. String name or `0` - `256`. | `None`  |\n| `bg`        | unicode / int | Background color. String name or `0` - `256`. | `None`  |\n| `bold`      | bool          | Format the text in bold.                      | `False` |\n| **RETURNS** | unicode       | The formatted string.                         |         |\n\n#### <kbd>function</kbd> `wrap`\n\n```python\nfrom wasabi import wrap\n\nwrapped = wrap(\"Hello world, this is a text.\", indent=2)\n```\n\n| Argument    | Type    | Description                                | Default |\n| ----------- | ------- | ------------------------------------------ | ------- |\n| `text`      | unicode | The text to wrap.                          | -       |\n| `wrap_max`  | int     | Maximum line width, including indentation. | `80`    |\n| `indent`    | int     | Number of spaces used for indentation.     | `4`     |\n| **RETURNS** | unicode | The wrapped text with line breaks.         |         |\n\n#### <kbd>function</kbd> `diff_strings`\n\n```python\nfrom wasabi import diff_strings\n\ndiff = diff_strings(\"hello world!\", \"helloo world\")\n```\n\n| Argument    | Type          | Description                                                                  | Default            |\n| ----------- | ------------- | ---------------------------------------------------------------------------- | ------------------ |\n| `a`         | unicode       | The first string to diff.                                                    |\n| `b`         | unicode       | The second string to diff.                                                   |\n| `fg`        | unicode / int | Foreground color. String name or `0` - `256`.                                | `\"black\"`          |\n| `bg`        | tuple         | Background colors as `(insert, delete)` tuple of string name or `0` - `256`. | `(\"green\", \"red\")` |\n| **RETURNS** | unicode       | The formatted diff.                                                          |                    |\n\n### Environment variables\n\nWasabi also respects the following environment variables. The prefix can be\ncustomised on the `Printer` via the `env_prefix` argument. For example, setting\n`env_prefix=\"SPACY\"` will expect the environment variable `SPACY_LOG_FRIENDLY`.\n\n| Name                   | Description                                            |\n| ---------------------- | ------------------------------------------------------ |\n| `ANSI_COLORS_DISABLED` | Disable colors.                                        |\n| `WASABI_LOG_FRIENDLY`  | Make output nicer for logs (no colors, no animations). |\n| `WASABI_NO_PRETTY`     | Disable pretty printing, e.g. colors and icons.        |\n\n## \ud83d\udd14 Run tests\n\nFork or clone the repo, make sure you have `pytest` installed and then run it on\nthe package directory. The tests are located in\n[`/wasabi/tests`](/wasabi/tests).\n\n```bash\npip install pytest\ncd wasabi\npython -m pytest wasabi\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://ines.io", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wasabi", "package_url": "https://pypi.org/project/wasabi/", "platform": "", "project_url": "https://pypi.org/project/wasabi/", "project_urls": {"Homepage": "https://ines.io"}, "release_url": "https://pypi.org/project/wasabi/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "A lightweight console printing and formatting toolkit", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>wasabi: A lightweight console printing and formatting toolkit</h1>\n<p>Over the years, I've written countless implementations of coloring and\nformatting utilities to output messages in our libraries like\n<a href=\"https://spacy.io\" rel=\"nofollow\">spaCy</a>, <a href=\"https://github.com/explosion/thinc\" rel=\"nofollow\">Thinc</a> and\n<a href=\"https://prodi.gy\" rel=\"nofollow\">Prodigy</a>. While there are many other great open-source\noptions, I've always ended up wanting something slightly different or slightly\ncustom.</p>\n<p>This package is still a work in progress and aims to bundle those utilities in a\nstandardised way so they can be shared across our other projects. It's super\nlightweight, has zero dependencies and works across Python 2 and 3.</p>\n<p><a href=\"https://dev.azure.com/explosion-ai/public/_build?definitionId=1\" rel=\"nofollow\"><img alt=\"Azure Pipelines\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ee5f1986d77e29d5ea01f34ef8e36853a8549b0/68747470733a2f2f696d672e736869656c64732e696f2f617a7572652d6465766f70732f6275696c642f6578706c6f73696f6e2d61692f7075626c69632f312f6d61737465722e7376673f6c6f676f3d617a7572652d706970656c696e6573267374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.python.org/pypi/wasabi\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5a8676c172a7b04b671add77e2bd37e41d2f4d1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7761736162692e7376673f7374796c653d666c61742d737175617265266c6f676f3d70797069266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://anaconda.org/conda-forge/wasabi\" rel=\"nofollow\"><img alt=\"conda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12e61c3bf3d7eabd033bb3afab43b5ea77e08a68/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f7761736162692e7376673f7374796c653d666c61742d737175617265266c6f676f3d636f6e64612d666f7267652f6c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://github.com/ines/wasabi\" rel=\"nofollow\"><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7971eef7002a5ed87d8082edc70477eb302ec032/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f696e65732f7761736162692f616c6c2e7376673f7374796c653d666c61742d737175617265266c6f676f3d676974687562\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c326c58e924b9f3508f32a8ac6b3ee91f40b090/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/246e1a9a023b2afe914bb4ba557766c1a0770ee7/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31333634333233392f34383636333836312d38633965613030302d656139362d313165382d386230342d6431323063353232373661382e706e67\" width=\"609\">\n<h2>\ud83d\udcac FAQ</h2>\n<h3>Are you going to add more features?</h3>\n<p>Yes, there's still a few of helpers and features to port over. However, the new\nfeatures will be heavily biased by what we (think we) need. I always appreciate\npull requests to improve the existing functionality \u2013 but I want to keep this\nlibrary as simple, lightweight and specific as possible.</p>\n<h3>Can I use this for my projects?</h3>\n<p>Sure, if you like it, feel free to adopt it! Just keep in mind that the package\nis very specific and not intended to be a full-featured and fully customisable\nformatting library. If that's what you're looking for, you might want to try\nother packages \u2013 for example, <a href=\"https://pypi.org/project/colored/\" rel=\"nofollow\"><code>colored</code></a>,\n<a href=\"https://github.com/kennethreitz/crayons\" rel=\"nofollow\"><code>crayons</code></a>,\n<a href=\"https://github.com/timofurrer/colorful\" rel=\"nofollow\"><code>colorful</code></a>,\n<a href=\"https://bitbucket.org/astanin/python-tabulate\" rel=\"nofollow\"><code>tabulate</code></a>,\n<a href=\"https://github.com/mixmastamyk/console\" rel=\"nofollow\"><code>console</code></a> or\n<a href=\"https://github.com/gravmatt/py-term\" rel=\"nofollow\"><code>py-term</code></a>, to name a few.</p>\n<h3>Why <code>wasabi</code>?</h3>\n<p>I was looking for a short and descriptive name, but everything was already\ntaken. So I ended up naming this package after one of my rats, Wasabi. \ud83d\udc00</p>\n<h2>\u231b\ufe0f Installation</h2>\n<pre>pip install wasabi\n</pre>\n<h2>\ud83c\udf9b API</h2>\n<h3><kbd>function</kbd> <code>msg</code></h3>\n<p>An instance of <code>Printer</code>, initialized with the default config. Useful as a quick\nshortcut if you don't need to customize initialization.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">msg</span>\n\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">good</span><span class=\"p\">(</span><span class=\"s2\">\"Success!\"</span><span class=\"p\">)</span>\n</pre>\n<h3><kbd>class</kbd> <code>Printer</code></h3>\n<h4><kbd>method</kbd> <code>Printer.__init__</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">Printer</span>\n\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Printer</span><span class=\"p\">()</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pretty</code></td>\n<td>bool</td>\n<td>Pretty-print output with colors and icons.</td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>no_print</code></td>\n<td>bool</td>\n<td>Don't actually print, just return.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>colors</code></td>\n<td>dict</td>\n<td>Add or overwrite color values, names mapped to <code>0</code>-<code>256</code>.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>icons</code></td>\n<td>dict</td>\n<td>Add or overwrite icon. Name mapped to unicode.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>line_max</code></td>\n<td>int</td>\n<td>Maximum line length (for divider).</td>\n<td><code>80</code></td>\n</tr>\n<tr>\n<td><code>animation</code></td>\n<td>unicode</td>\n<td>Steps of loading animation for <code>Printer.loading</code>.</td>\n<td><code>\"\u2819\u2839\u2838\u283c\u2834\u2826\u2827\u2807\u280f\"</code></td>\n</tr>\n<tr>\n<td><code>animation_ascii</code></td>\n<td>unicode</td>\n<td>Alternative animation for ASCII terminals.</td>\n<td><code>\"|/-\\\\\"</code></td>\n</tr>\n<tr>\n<td><code>hide_animation</code></td>\n<td>bool</td>\n<td>Don't display animation, e.g. for logs.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>ignore_warnings</code></td>\n<td>bool</td>\n<td>Don't output messages of type <code>MESSAGE.WARN</code>.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>env_prefix</code></td>\n<td>unicode</td>\n<td>Prefix for environment variables, e.g. <code>WASABI_LOG_FRIENDLY</code>.</td>\n<td><code>\"WASABI\"</code></td>\n</tr>\n<tr>\n<td><code>timestamp</code></td>\n<td>bool</td>\n<td>Add timestamp before output.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td><code>Printer</code></td>\n<td>The initialized printer.</td>\n<td>-</td>\n</tr></tbody></table>\n<h4><kbd>method</kbd> <code>Printer.text</code></h4>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Printer</span><span class=\"p\">()</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world!\"</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td>unicode</td>\n<td>The main text to print.</td>\n<td><code>\"\"</code></td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>unicode</td>\n<td>Optional additional text to print.</td>\n<td><code>\"\"</code></td>\n</tr>\n<tr>\n<td><code>color</code></td>\n<td>\u00a0unicode / int</td>\n<td>Color name or value.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>unicode</td>\n<td>Name of icon to add.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>show</code></td>\n<td>bool</td>\n<td>Whether to print or not. Can be used to only output messages under certain condition, e.g. if <code>--verbose</code> flag is set.</td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>spaced</code></td>\n<td>bool</td>\n<td>Whether to add newlines around the output.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>no_print</code></td>\n<td>bool</td>\n<td>Don't actually print, just return. Overwrites global setting.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>exits</code></td>\n<td>int</td>\n<td>If set, perform a system exit with the given code after printing.</td>\n<td><code>None</code></td>\n</tr></tbody></table>\n<h4><kbd>method</kbd> <code>Printer.good</code>, <code>Printer.fail</code>, <code>Printer.warn</code>, <code>Printer.info</code></h4>\n<p>Print special formatted messages.</p>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Printer</span><span class=\"p\">()</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">good</span><span class=\"p\">(</span><span class=\"s2\">\"Success\"</span><span class=\"p\">)</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"s2\">\"Error\"</span><span class=\"p\">)</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">\"Warning\"</span><span class=\"p\">)</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Info\"</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td>unicode</td>\n<td>The main text to print.</td>\n<td><code>\"\"</code></td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>unicode</td>\n<td>Optional additional text to print.</td>\n<td><code>\"\"</code></td>\n</tr>\n<tr>\n<td><code>show</code></td>\n<td>bool</td>\n<td>Whether to print or not. Can be used to only output messages under certain condition, e.g. if <code>--verbose</code> flag is set.</td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>exits</code></td>\n<td>int</td>\n<td>If set, perform a system exit with the given code after printing.</td>\n<td><code>None</code></td>\n</tr></tbody></table>\n<h4><kbd>method</kbd> <code>Printer.divider</code></h4>\n<p>Print a formatted divider.</p>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Printer</span><span class=\"p\">()</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">divider</span><span class=\"p\">(</span><span class=\"s2\">\"Heading\"</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>text</code></td>\n<td>unicode</td>\n<td>Headline text. If empty, only the line is printed.</td>\n<td><code>\"\"</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>unicode</td>\n<td>Single line character to repeat.</td>\n<td><code>\"=\"</code></td>\n</tr>\n<tr>\n<td><code>show</code></td>\n<td>bool</td>\n<td>Whether to print or not. Can be used to only output messages under certain condition, e.g. if <code>--verbose</code> flag is set.</td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>unicode</td>\n<td>Optional icon to use with title.</td>\n<td><code>None</code></td>\n</tr></tbody></table>\n<h4><kbd>contextmanager</kbd> <code>Printer.loading</code></h4>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Printer</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">loading</span><span class=\"p\">(</span><span class=\"s2\">\"Loading...\"</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Do something here that takes longer</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">good</span><span class=\"p\">(</span><span class=\"s2\">\"Successfully loaded something!\"</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>text</code></td>\n<td>unicode</td>\n<td>The text to display while loading.</td>\n<td><code>\"\"</code></td>\n</tr></tbody></table>\n<h4><kbd>method</kbd> <code>Printer.table</code>, <code>Printer.row</code></h4>\n<p>See <a href=\"#tables\" rel=\"nofollow\">Tables</a>.</p>\n<h4><kbd>property</kbd> <code>Printer.counts</code></h4>\n<p>Get the counts of how often the special printers were fired, e.g.\n<code>MESSAGES.GOOD</code>. Can be used to print an overview like \"X warnings\"</p>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Printer</span><span class=\"p\">()</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">good</span><span class=\"p\">(</span><span class=\"s2\">\"Success\"</span><span class=\"p\">)</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"s2\">\"Error\"</span><span class=\"p\">)</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">\"Error\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">counts</span><span class=\"p\">)</span>\n<span class=\"c1\"># Counter({'good': 1, 'fail': 2, 'warn': 0, 'info': 0})</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td><code>Counter</code></td>\n<td>The counts for the individual special message types.</td>\n</tr></tbody></table>\n<h3>Tables</h3>\n<h4><kbd>function</kbd> <code>table</code></h4>\n<p>Lightweight helper to format tabular data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">table</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">\"a1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a3\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s2\">\"b1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b3\"</span><span class=\"p\">)]</span>\n<span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"Column 1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Column 2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Column 3\"</span><span class=\"p\">)</span>\n<span class=\"n\">widths</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">aligns</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"r\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"l\"</span><span class=\"p\">)</span>\n<span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">divider</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">widths</span><span class=\"o\">=</span><span class=\"n\">widths</span><span class=\"p\">,</span> <span class=\"n\">aligns</span><span class=\"o\">=</span><span class=\"n\">aligns</span><span class=\"p\">)</span>\n</pre>\n<pre><code>Column 1   Column 2    Column 3\n--------   ---------   ----------\n      a1      a2       a3\n      b1      b2       b3\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>data</code></td>\n<td>iterable / dict</td>\n<td>The data to render. Either a list of lists (one per row) or a dict for two-column tables.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>header</code></td>\n<td>iterable</td>\n<td>Optional header columns.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>footer</code></td>\n<td>iterable</td>\n<td>Optional footer columns.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>divider</code></td>\n<td>bool</td>\n<td>Show a divider line between header/footer and body.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>widths</code></td>\n<td>iterable / <code>\"auto\"</code></td>\n<td>Column widths in order. If <code>\"auto\"</code>, widths will be calculated automatically based on the largest value.</td>\n<td><code>\"auto\"</code></td>\n</tr>\n<tr>\n<td><code>max_col</code></td>\n<td>int</td>\n<td>Maximum column width.</td>\n<td><code>30</code></td>\n</tr>\n<tr>\n<td><code>spacing</code></td>\n<td>int</td>\n<td>Number of spaces between columns.</td>\n<td><code>3</code></td>\n</tr>\n<tr>\n<td><code>aligns</code></td>\n<td>iterable / unicode</td>\n<td>Columns alignments in order. <code>\"l\"</code> (left, default), <code>\"r\"</code> (right) or <code>\"c\"</code> (center). If If a string, value is used for all columns.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>multiline</code></td>\n<td>bool</td>\n<td>If a cell value is a list of a tuple, render it on multiple lines, with one value per line.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td>unicode</td>\n<td>The formatted table.</td>\n<td></td>\n</tr></tbody></table>\n<h4><kbd>function</kbd> <code>row</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">row</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"a1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a3\"</span><span class=\"p\">)</span>\n<span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<pre><code>a1   a2   a3\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>data</code></td>\n<td>iterable</td>\n<td>The individual columns to format.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>widths</code></td>\n<td>iterable / int / <code>\"auto\"</code></td>\n<td>Column widths, either one integer for all columns or an iterable of values. If \"auto\", widths will be calculated automatically based on the largest value.</td>\n<td><code>\"auto\"</code></td>\n</tr>\n<tr>\n<td><code>spacing</code></td>\n<td>int</td>\n<td>Number of spaces between columns.</td>\n<td><code>3</code></td>\n</tr>\n<tr>\n<td><code>aligns</code></td>\n<td>iterable</td>\n<td>Columns alignments in order. <code>\"l\"</code> (left), <code>\"r\"</code> (right) or <code>\"c\"</code> (center).</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td>unicode</td>\n<td>The formatted row.</td>\n<td></td>\n</tr></tbody></table>\n<h3><kbd>class</kbd> <code>TracebackPrinter</code></h3>\n<p>Helper to output custom formatted tracebacks and error messages. Currently used\nin <a href=\"https://github.com/explosion/thinc\" rel=\"nofollow\">Thinc</a>.</p>\n<h4><kbd>method</kbd> <code>TracebackPrinter.__init__</code></h4>\n<p>Initialize a traceback printer.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">TracebackPrinter</span>\n\n<span class=\"n\">tb</span> <span class=\"o\">=</span> <span class=\"n\">TracebackPrinter</span><span class=\"p\">(</span><span class=\"n\">tb_base</span><span class=\"o\">=</span><span class=\"s2\">\"thinc\"</span><span class=\"p\">,</span> <span class=\"n\">tb_exclude</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"check.py\"</span><span class=\"p\">,))</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color_error</code></td>\n<td>unicode / int</td>\n<td>Color name or code for errors (passed to <code>color</code> helper).</td>\n<td><code>\"red\"</code></td>\n</tr>\n<tr>\n<td><code>color_tb</code></td>\n<td>unicode / int</td>\n<td>Color name or code for traceback headline (passed to <code>color</code> helper).</td>\n<td><code>\"blue\"</code></td>\n</tr>\n<tr>\n<td><code>color_highlight</code></td>\n<td>unicode / int</td>\n<td>Color name or code for highlighted text (passed to <code>color</code> helper).</td>\n<td><code>\"yellow\"</code></td>\n</tr>\n<tr>\n<td><code>indent</code></td>\n<td>int</td>\n<td>Number of spaces to use for indentation.</td>\n<td><code>2</code></td>\n</tr>\n<tr>\n<td><code>tb_base</code></td>\n<td>unicode</td>\n<td>Name of directory to use to show relative paths. For example, <code>\"thinc\"</code> will look for the last occurence of <code>\"/thinc/\"</code> in a path and only show path to the right of it.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>tb_exclude</code></td>\n<td>tuple</td>\n<td>List of filenames to exclude from traceback.</td>\n<td><code>tuple()</code></td>\n</tr>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td><code>TracebackPrinter</code></td>\n<td>The traceback printer.</td>\n<td></td>\n</tr></tbody></table>\n<h4><kbd>method</kbd> <code>TracebackPrinter.__call__</code></h4>\n<p>Output custom formatted tracebacks and errors.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">TracebackPrinter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n\n<span class=\"n\">tb</span> <span class=\"o\">=</span> <span class=\"n\">TracebackPrinter</span><span class=\"p\">(</span><span class=\"n\">tb_base</span><span class=\"o\">=</span><span class=\"s2\">\"thinc\"</span><span class=\"p\">,</span> <span class=\"n\">tb_exclude</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"check.py\"</span><span class=\"p\">,))</span>\n\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">tb</span><span class=\"p\">(</span><span class=\"s2\">\"Some error\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Error description\"</span><span class=\"p\">,</span> <span class=\"n\">highlight</span><span class=\"o\">=</span><span class=\"s2\">\"kwargs\"</span><span class=\"p\">,</span> <span class=\"n\">tb</span><span class=\"o\">=</span><span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">extract_stack</span><span class=\"p\">())</span>\n<span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n</pre>\n<pre><code>  Some error\n  Some error description\n\n  Traceback:\n  \u251c\u2500 &lt;lambda&gt; [61] in .env/lib/python3.6/site-packages/pluggy/manager.py\n  \u251c\u2500\u2500\u2500 _multicall [187] in .env/lib/python3.6/site-packages/pluggy/callers.py\n  \u2514\u2500\u2500\u2500\u2500\u2500 pytest_fixture_setup [969] in .env/lib/python3.6/site-packages/_pytest/fixtures.py\n         &gt;&gt;&gt; result = call_fixture_func(fixturefunc, request, kwargs)\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td>unicode</td>\n<td>The message title.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>*texts</code></td>\n<td>unicode</td>\n<td>Optional texts to print (one per line).</td>\n<td></td>\n</tr>\n<tr>\n<td><code>highlight</code></td>\n<td>unicode</td>\n<td>Optional sequence to highlight in the traceback, e.g. the bad value that caused the error.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>tb</code></td>\n<td>iterable</td>\n<td>The traceback, e.g. generated by <code>traceback.extract_stack()</code>.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td>unicode</td>\n<td>The formatted traceback. Can be printed or raised by custom exception.</td>\n<td></td>\n</tr></tbody></table>\n<h3>Utilities</h3>\n<h4><kbd>function</kbd> <code>color</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">color</span>\n\n<span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"s2\">\"This is a text\"</span><span class=\"p\">,</span> <span class=\"n\">fg</span><span class=\"o\">=</span><span class=\"s2\">\"white\"</span><span class=\"p\">,</span> <span class=\"n\">bg</span><span class=\"o\">=</span><span class=\"s2\">\"green\"</span><span class=\"p\">,</span> <span class=\"n\">bold</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>text</code></td>\n<td>unicode</td>\n<td>The text to be formatted.</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>fg</code></td>\n<td>unicode / int</td>\n<td>Foreground color. String name or <code>0</code> - <code>256</code>.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>bg</code></td>\n<td>unicode / int</td>\n<td>Background color. String name or <code>0</code> - <code>256</code>.</td>\n<td><code>None</code></td>\n</tr>\n<tr>\n<td><code>bold</code></td>\n<td>bool</td>\n<td>Format the text in bold.</td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td>unicode</td>\n<td>The formatted string.</td>\n<td></td>\n</tr></tbody></table>\n<h4><kbd>function</kbd> <code>wrap</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">wrap</span>\n\n<span class=\"n\">wrapped</span> <span class=\"o\">=</span> <span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world, this is a text.\"</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>text</code></td>\n<td>unicode</td>\n<td>The text to wrap.</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>wrap_max</code></td>\n<td>int</td>\n<td>Maximum line width, including indentation.</td>\n<td><code>80</code></td>\n</tr>\n<tr>\n<td><code>indent</code></td>\n<td>int</td>\n<td>Number of spaces used for indentation.</td>\n<td><code>4</code></td>\n</tr>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td>unicode</td>\n<td>The wrapped text with line breaks.</td>\n<td></td>\n</tr></tbody></table>\n<h4><kbd>function</kbd> <code>diff_strings</code></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasabi</span> <span class=\"kn\">import</span> <span class=\"n\">diff_strings</span>\n\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">diff_strings</span><span class=\"p\">(</span><span class=\"s2\">\"hello world!\"</span><span class=\"p\">,</span> <span class=\"s2\">\"helloo world\"</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a</code></td>\n<td>unicode</td>\n<td>The first string to diff.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td>unicode</td>\n<td>The second string to diff.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>fg</code></td>\n<td>unicode / int</td>\n<td>Foreground color. String name or <code>0</code> - <code>256</code>.</td>\n<td><code>\"black\"</code></td>\n</tr>\n<tr>\n<td><code>bg</code></td>\n<td>tuple</td>\n<td>Background colors as <code>(insert, delete)</code> tuple of string name or <code>0</code> - <code>256</code>.</td>\n<td><code>(\"green\", \"red\")</code></td>\n</tr>\n<tr>\n<td><strong>RETURNS</strong></td>\n<td>unicode</td>\n<td>The formatted diff.</td>\n<td></td>\n</tr></tbody></table>\n<h3>Environment variables</h3>\n<p>Wasabi also respects the following environment variables. The prefix can be\ncustomised on the <code>Printer</code> via the <code>env_prefix</code> argument. For example, setting\n<code>env_prefix=\"SPACY\"</code> will expect the environment variable <code>SPACY_LOG_FRIENDLY</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ANSI_COLORS_DISABLED</code></td>\n<td>Disable colors.</td>\n</tr>\n<tr>\n<td><code>WASABI_LOG_FRIENDLY</code></td>\n<td>Make output nicer for logs (no colors, no animations).</td>\n</tr>\n<tr>\n<td><code>WASABI_NO_PRETTY</code></td>\n<td>Disable pretty printing, e.g. colors and icons.</td>\n</tr></tbody></table>\n<h2>\ud83d\udd14 Run tests</h2>\n<p>Fork or clone the repo, make sure you have <code>pytest</code> installed and then run it on\nthe package directory. The tests are located in\n<a href=\"/wasabi/tests\" rel=\"nofollow\"><code>/wasabi/tests</code></a>.</p>\n<pre>pip install pytest\n<span class=\"nb\">cd</span> wasabi\npython -m pytest wasabi\n</pre>\n\n          </div>"}, "last_serial": 6392912, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3404b5a1432feee1754404fa32ac89b7", "sha256": "03e6e0f41e51b0152e73c1a3798869666b30c196c09aa5eb7cd4083c13e91774"}, "downloads": -1, "filename": "wasabi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3404b5a1432feee1754404fa32ac89b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6694, "upload_time": "2018-11-17T17:37:51", "upload_time_iso_8601": "2018-11-17T17:37:51.469037Z", "url": "https://files.pythonhosted.org/packages/44/42/27b7401005943beed36ddc23a5c1fac8bb1c13a0f172c1c21c25e467d13f/wasabi-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "6549a2672fe50cb54231556ac605ea72", "sha256": "d464388d8d447bff515ee9ee8308a4c583fe2391fcc7bf3492c0c0faee803925"}, "downloads": -1, "filename": "wasabi-0.0.10.tar.gz", "has_sig": false, "md5_digest": "6549a2672fe50cb54231556ac605ea72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12572, "upload_time": "2018-12-02T20:09:11", "upload_time_iso_8601": "2018-12-02T20:09:11.811367Z", "url": "https://files.pythonhosted.org/packages/e6/3e/6ed4406188f363354fbbc563546f0c00f546c43b26e25bb1a17f161d3b3e/wasabi-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "1e72b8799c9502ba4520d7596437c73c", "sha256": "df51662d2b791016f83dfc8efdc67c1e9baa4a47a04e0fa6478d9f49313e5841"}, "downloads": -1, "filename": "wasabi-0.0.11.tar.gz", "has_sig": false, "md5_digest": "1e72b8799c9502ba4520d7596437c73c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14685, "upload_time": "2018-12-08T07:43:51", "upload_time_iso_8601": "2018-12-08T07:43:51.954973Z", "url": "https://files.pythonhosted.org/packages/a7/1e/6c3e8eb5a4733e16e77e2ce0035a4793f5df4d970d867ce66f505bb7f124/wasabi-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "4cac4da3c7045eaf87ad9445916b1486", "sha256": "ddd3418111963183e1bbc3c8f2f4fe33c7e99e5a5f67fbab9f3f75fbcc5c0bfb"}, "downloads": -1, "filename": "wasabi-0.0.12.tar.gz", "has_sig": false, "md5_digest": "4cac4da3c7045eaf87ad9445916b1486", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15086, "upload_time": "2018-12-08T09:36:00", "upload_time_iso_8601": "2018-12-08T09:36:00.349836Z", "url": "https://files.pythonhosted.org/packages/44/c6/5ce0262a3117dec6adb00dbd8c2d1af915b3990c9bee1cd2f7ec6e14c101/wasabi-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "fa65ee5024b2243bc023d122eeca379e", "sha256": "a80bce94c91929624d2db045601eda242cd5f2c4e6d50f2d341ff547985bb2d2"}, "downloads": -1, "filename": "wasabi-0.0.13.tar.gz", "has_sig": false, "md5_digest": "fa65ee5024b2243bc023d122eeca379e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15290, "upload_time": "2018-12-10T11:25:42", "upload_time_iso_8601": "2018-12-10T11:25:42.941544Z", "url": "https://files.pythonhosted.org/packages/08/49/59e326b82933d0c69df197d974847abf2364a820e240971fe2e560523f75/wasabi-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "41a6c91fbc63ec5d14af69079801354f", "sha256": "cdee06e65dd2ea6ef9c77b0bd40a0bf9d329f578fb03497fcd9fde0fc0d52771"}, "downloads": -1, "filename": "wasabi-0.0.14.tar.gz", "has_sig": false, "md5_digest": "41a6c91fbc63ec5d14af69079801354f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15293, "upload_time": "2018-12-10T11:40:58", "upload_time_iso_8601": "2018-12-10T11:40:58.346516Z", "url": "https://files.pythonhosted.org/packages/8b/49/7fe63475148cec32ebc19a4afe2d37e4d681a3ca147273d185679a13cbde/wasabi-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "a28aaa1ec9a51d48a54eda69f6322ebd", "sha256": "324b7e3f7eb392a80f633f2c2951df10337cb2de533b05974808364dfb6a5652"}, "downloads": -1, "filename": "wasabi-0.0.15.tar.gz", "has_sig": false, "md5_digest": "a28aaa1ec9a51d48a54eda69f6322ebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15301, "upload_time": "2018-12-19T16:04:12", "upload_time_iso_8601": "2018-12-19T16:04:12.983095Z", "url": "https://files.pythonhosted.org/packages/9b/08/f02160568ae02f1c2dcfe1636f2cce3008d7fdaf07c4617527d83e29ca37/wasabi-0.0.15.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "475585a585457f61c78687d456612e29", "sha256": "a208b3c47be4130c86d33532f695953c614882b656c9de762499de0021a24d99"}, "downloads": -1, "filename": "wasabi-0.0.2.tar.gz", "has_sig": false, "md5_digest": "475585a585457f61c78687d456612e29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6783, "upload_time": "2018-11-17T17:58:08", "upload_time_iso_8601": "2018-11-17T17:58:08.391642Z", "url": "https://files.pythonhosted.org/packages/6d/7d/26040ee4ba602348d08d0baf7bbc4db225c14d391f21d7a50b2d802d7a16/wasabi-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "179397870b9b25d5061b8e4aacc9ce23", "sha256": "421126715fe59690d11f684920b433cf432029c6656f2bbed35019a75b60cd17"}, "downloads": -1, "filename": "wasabi-0.0.3.tar.gz", "has_sig": false, "md5_digest": "179397870b9b25d5061b8e4aacc9ce23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8073, "upload_time": "2018-11-17T22:47:33", "upload_time_iso_8601": "2018-11-17T22:47:33.580998Z", "url": "https://files.pythonhosted.org/packages/41/3b/2ef494fc36d3d9e57081902fa726ad4dac6e71441a1ffce1a4b09170e440/wasabi-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "641d64b6980ac47e113624c1f707aaae", "sha256": "efa55aca16332dc5bd9ada2649c9a6f77fb25caac682b608da3e5b33f56485ff"}, "downloads": -1, "filename": "wasabi-0.0.4.tar.gz", "has_sig": false, "md5_digest": "641d64b6980ac47e113624c1f707aaae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9427, "upload_time": "2018-11-18T02:07:49", "upload_time_iso_8601": "2018-11-18T02:07:49.557122Z", "url": "https://files.pythonhosted.org/packages/c7/f9/8bd3ab9e464c161659de6beee0d39ed2dfb862c96b084a64dd35fc5d9f3a/wasabi-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "203962a8dab476a49e76be4a7cc5ac35", "sha256": "df098066a81029182992caa7d7af57da90827b9037a5f0a9a42b53dbb7c6e5ea"}, "downloads": -1, "filename": "wasabi-0.0.5.tar.gz", "has_sig": false, "md5_digest": "203962a8dab476a49e76be4a7cc5ac35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9492, "upload_time": "2018-11-18T03:40:16", "upload_time_iso_8601": "2018-11-18T03:40:16.512205Z", "url": "https://files.pythonhosted.org/packages/8b/1c/89b9ab5c18815f49725685f923ecec430362e45db82fded6701a5d528174/wasabi-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "75a23910540f9b4eb0b8d751e96428d9", "sha256": "77d90799cfaf02c2799a9d7a96f9c65ecb56b27deb22fa5b537abb25236fc04c"}, "downloads": -1, "filename": "wasabi-0.0.6.tar.gz", "has_sig": false, "md5_digest": "75a23910540f9b4eb0b8d751e96428d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9305, "upload_time": "2018-11-27T00:57:35", "upload_time_iso_8601": "2018-11-27T00:57:35.568127Z", "url": "https://files.pythonhosted.org/packages/6f/8b/2f06410a9a3e2a621c53b37b89f8a1b340d56bf75f8052797c7622c5a3ed/wasabi-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "ea02551fb412ee4a86493a3b0eae11b9", "sha256": "add10eb442cb94640f31aac944fcfbdb6d71c1bcb00adaa7dfd5d0f48650ba55"}, "downloads": -1, "filename": "wasabi-0.0.7.tar.gz", "has_sig": false, "md5_digest": "ea02551fb412ee4a86493a3b0eae11b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9371, "upload_time": "2018-11-30T17:54:32", "upload_time_iso_8601": "2018-11-30T17:54:32.887063Z", "url": "https://files.pythonhosted.org/packages/49/3d/09901cef34c73ea5c7d97aee20f8ce0673910b03a4e464eb0a8ad4026c75/wasabi-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "b4ab67ad6555f2852ef3ba4ee499eccd", "sha256": "018a8281ec92bcd85250ec9e2b77ee326f6917ea672991ebc5399cef3fb9c8d0"}, "downloads": -1, "filename": "wasabi-0.0.8.tar.gz", "has_sig": false, "md5_digest": "b4ab67ad6555f2852ef3ba4ee499eccd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9443, "upload_time": "2018-11-30T18:31:32", "upload_time_iso_8601": "2018-11-30T18:31:32.460894Z", "url": "https://files.pythonhosted.org/packages/47/0d/eaf13e6c135124168e773747b4159ed7088d1de0efb8a32e3b96d6ccc6d7/wasabi-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "b2d623549ac1c66f329bd3d6720703c2", "sha256": "ee25944d9b7442d5c43c716b9f12842fac087d28b21e4f8ae59df2e0fb112170"}, "downloads": -1, "filename": "wasabi-0.0.9.tar.gz", "has_sig": false, "md5_digest": "b2d623549ac1c66f329bd3d6720703c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12560, "upload_time": "2018-12-02T19:52:38", "upload_time_iso_8601": "2018-12-02T19:52:38.346469Z", "url": "https://files.pythonhosted.org/packages/cf/e6/719244373f1477488fb18342fad1a4cd5b9719062e6a07076a359ccd039c/wasabi-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b43729d2e7186006ed710992fed8bc2f", "sha256": "ec69d216ee7a534acec9bc18259fa9b985c82cc2cdef21e3f7eae4fdb3b4e234"}, "downloads": -1, "filename": "wasabi-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b43729d2e7186006ed710992fed8bc2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15318, "upload_time": "2019-02-24T11:26:41", "upload_time_iso_8601": "2019-02-24T11:26:41.758644Z", "url": "https://files.pythonhosted.org/packages/bf/3a/cafc59e585258132fa9d08cfb547ee3ee515a2376d7b28281d5bbea02c5d/wasabi-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a612bb495a3eb8526082222f8bcc3818", "sha256": "aa1fad8e8b1cfb85793b86da84a6904d3bade5fb1848a37a5315abb00b6371f5"}, "downloads": -1, "filename": "wasabi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a612bb495a3eb8526082222f8bcc3818", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16369, "upload_time": "2019-02-24T12:06:14", "upload_time_iso_8601": "2019-02-24T12:06:14.611730Z", "url": "https://files.pythonhosted.org/packages/fc/11/3d48140498484bbd8236c90e9474465e3f2f62ef0ea09a62bdaa648f7fd9/wasabi-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6ce6151ad27c7f2c5b03b2965c52d7a4", "sha256": "1a2ba97e2d960a25cba876806501f2dc68f74470ccef324c0d7aaf82a25a7422"}, "downloads": -1, "filename": "wasabi-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6ce6151ad27c7f2c5b03b2965c52d7a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18689, "upload_time": "2019-02-24T12:24:24", "upload_time_iso_8601": "2019-02-24T12:24:24.135290Z", "url": "https://files.pythonhosted.org/packages/8d/aa/41ecccdbf9a0b1a5f9a9cc54fc72e4744eb6b86ed73bc4b3ca941cad945d/wasabi-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "dfd2c08e489e3c7a9a4d354619c9ccd5", "sha256": "a410c670cc0d0cf18827cc9eebf4ebb3543057d78933af6b3ffa3f87da31611d"}, "downloads": -1, "filename": "wasabi-0.1.3.tar.gz", "has_sig": false, "md5_digest": "dfd2c08e489e3c7a9a4d354619c9ccd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20119, "upload_time": "2019-03-13T14:09:43", "upload_time_iso_8601": "2019-03-13T14:09:43.829534Z", "url": "https://files.pythonhosted.org/packages/43/fc/ce9173cf8153217c945a917fda5f61c905481ff50e95c5a7fc387dc2da99/wasabi-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "b4477b914cc6bb20eba84ce1b32f3a16", "sha256": "45b66936c12e9bc105ae5fb7d837615f4374aac34561b0d906029c7c47a0b4d0"}, "downloads": -1, "filename": "wasabi-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b4477b914cc6bb20eba84ce1b32f3a16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18795, "upload_time": "2019-03-20T13:22:06", "upload_time_iso_8601": "2019-03-20T13:22:06.562876Z", "url": "https://files.pythonhosted.org/packages/00/40/080a5025e3772c5da21f49a0f1d5f0b6c386b63d25de75e09d9d85978353/wasabi-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4aa79f3e80c104678e272531613da648", "sha256": "c519c5b9f9a7abe777f49a43e7952c5e4903042f41f8936b38e60d9cb86cb529"}, "downloads": -1, "filename": "wasabi-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4aa79f3e80c104678e272531613da648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20233, "upload_time": "2019-03-19T21:12:57", "upload_time_iso_8601": "2019-03-19T21:12:57.934908Z", "url": "https://files.pythonhosted.org/packages/1f/7a/ee81a06ce879ebc6b017b861ee4e541d9a85c1e72bed8a9ac8d4700d0b6a/wasabi-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "67e6e9482e3b58207851acb723cbeec1", "sha256": "62f2c8882a8235508d1f0d6de7be32cdc747c103548475e632ff402fa28380ff"}, "downloads": -1, "filename": "wasabi-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "67e6e9482e3b58207851acb723cbeec1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19048, "upload_time": "2019-03-22T12:17:51", "upload_time_iso_8601": "2019-03-22T12:17:51.151653Z", "url": "https://files.pythonhosted.org/packages/09/49/dbfd9a14b0fba9d005a5d02f5164f1316948a3b95f7a96eb159eee5dd646/wasabi-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec5027028b086ddae8bd7faf5fccd3a1", "sha256": "20bac146d9e418d05a62882e43bda8e1e0dde5f980005e35dc565c44c0876f89"}, "downloads": -1, "filename": "wasabi-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ec5027028b086ddae8bd7faf5fccd3a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20557, "upload_time": "2019-03-22T12:17:31", "upload_time_iso_8601": "2019-03-22T12:17:31.280173Z", "url": "https://files.pythonhosted.org/packages/46/09/9130113c930ab5d6ed943c00be5211e43080fa4b510897e873bbd0a2c9d4/wasabi-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7c5248ac8559773fea3178eed66a248a", "sha256": "3491ae742d238ce260116d1b9bf962c134e82df5c814060ea4b1433c6abc841e"}, "downloads": -1, "filename": "wasabi-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7c5248ac8559773fea3178eed66a248a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19075, "upload_time": "2019-03-26T15:34:37", "upload_time_iso_8601": "2019-03-26T15:34:37.859325Z", "url": "https://files.pythonhosted.org/packages/76/6c/0376977df1ba9f0ec27835d80456d9284c79737cb5205649451db1181f01/wasabi-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c0dbafc1917f366dca22a97ef213de7", "sha256": "57d4f715e69bc99895215ddc4f5587f90c5bac9f4980c0826b0aa09c1a625769"}, "downloads": -1, "filename": "wasabi-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3c0dbafc1917f366dca22a97ef213de7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20583, "upload_time": "2019-03-26T15:34:10", "upload_time_iso_8601": "2019-03-26T15:34:10.059882Z", "url": "https://files.pythonhosted.org/packages/f2/1b/730b7164502e0496924f2d3a6582c6e5f5e7956ba39f7f374f42078bd4d7/wasabi-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ca47ff561f517d1464762b39fd03f0cd", "sha256": "b4fbee9dd0c8f5cff6554c0463c565e2d52b7c844d7eccb477d29a6ff8567750"}, "downloads": -1, "filename": "wasabi-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ca47ff561f517d1464762b39fd03f0cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19089, "upload_time": "2019-05-04T13:53:06", "upload_time_iso_8601": "2019-05-04T13:53:06.435187Z", "url": "https://files.pythonhosted.org/packages/f4/c1/d76ccdd12c716be79162d934fe7de4ac8a318b9302864716dde940641a79/wasabi-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "650c60147d9ab6213dd4ed57630ad54a", "sha256": "f92c83e728bf1db6dc859ffc861afa328d2da8ef0c7a19300e5fb1bd5762b277"}, "downloads": -1, "filename": "wasabi-0.2.2.tar.gz", "has_sig": false, "md5_digest": "650c60147d9ab6213dd4ed57630ad54a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20597, "upload_time": "2019-05-04T13:52:41", "upload_time_iso_8601": "2019-05-04T13:52:41.246288Z", "url": "https://files.pythonhosted.org/packages/be/ba/08c53c55cc97f62310ed83e1a4d91e424f221645c88c2dddd41f179fd1f7/wasabi-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5cb659181cc52a2c6faa0e9de093342e", "sha256": "7127b5f75d0f17f51048ca81d62440655ae87afcbed36adad717a5e35e671fa8"}, "downloads": -1, "filename": "wasabi-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5cb659181cc52a2c6faa0e9de093342e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19906, "upload_time": "2019-10-24T17:43:13", "upload_time_iso_8601": "2019-10-24T17:43:13.371022Z", "url": "https://files.pythonhosted.org/packages/c9/a1/6a75283482e6662cc3b050aed656ab234b97d64c3e12df10d08f1c4932ad/wasabi-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad6a9dd1a4283496410efb26f852acf5", "sha256": "051fd33b47cf5f21626a3b750001b267c464c84a33f8e8fbcb49e48c8fe82838"}, "downloads": -1, "filename": "wasabi-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ad6a9dd1a4283496410efb26f852acf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21699, "upload_time": "2019-10-24T17:43:01", "upload_time_iso_8601": "2019-10-24T17:43:01.209353Z", "url": "https://files.pythonhosted.org/packages/e2/28/7bcfab6d624749443714c4eb8666090222a070eb40fe347a8be789030a51/wasabi-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "df3a6f2bba3663a1276e2b2bc893a58c", "sha256": "7a369627eba52f59ff3452270ba4a64a940200b617cda1bbafffd145e38a9add"}, "downloads": -1, "filename": "wasabi-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df3a6f2bba3663a1276e2b2bc893a58c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20000, "upload_time": "2019-11-03T20:16:41", "upload_time_iso_8601": "2019-11-03T20:16:41.163463Z", "url": "https://files.pythonhosted.org/packages/3f/35/6dc35bc3b49e160a016e420eb4bdcf1c887db6fd33a463959c06a508c339/wasabi-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38a83f4abcb3d4cc17cfc673d4eee237", "sha256": "dcd60890dd4a4c171ad5e3ee11ccbd072dc6978b966c903adaa874e0f29b5270"}, "downloads": -1, "filename": "wasabi-0.4.0.tar.gz", "has_sig": false, "md5_digest": "38a83f4abcb3d4cc17cfc673d4eee237", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21881, "upload_time": "2019-11-03T20:16:25", "upload_time_iso_8601": "2019-11-03T20:16:25.249870Z", "url": "https://files.pythonhosted.org/packages/d9/bf/cffd7c39d1d66a7c49700250172c2042783ef005f3361b463a6564d7beea/wasabi-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "a4715a0159917c24768059b4ba4891c3", "sha256": "692ddec699e53b1d96a1d4cd76ddc6d95b92b9989426c3180139cd06980f9377"}, "downloads": -1, "filename": "wasabi-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a4715a0159917c24768059b4ba4891c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20103, "upload_time": "2019-12-02T14:34:23", "upload_time_iso_8601": "2019-12-02T14:34:23.186126Z", "url": "https://files.pythonhosted.org/packages/ae/84/028226a35bcfe19b7852f5fe71ef723f6124eb61971788d2cdce993a89bc/wasabi-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fff8910a45be00f812b4152a5980428", "sha256": "440be2c40f1e2ee5538c38b3cd86b779b718288fd8d153a67ee81b4af703c180"}, "downloads": -1, "filename": "wasabi-0.4.1.tar.gz", "has_sig": false, "md5_digest": "5fff8910a45be00f812b4152a5980428", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22003, "upload_time": "2019-12-02T14:34:01", "upload_time_iso_8601": "2019-12-02T14:34:01.034524Z", "url": "https://files.pythonhosted.org/packages/e3/27/41e0530ced4ff195d1f6d9636d5c29a772a5ad0f4bc5a8f156393bc7a2db/wasabi-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "ee2539f8c121f02a9930fcda1616e02c", "sha256": "3e0897503a1357c9c913fc3647d0f4e440d89a3665ab201db273f85cabb83475"}, "downloads": -1, "filename": "wasabi-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ee2539f8c121f02a9930fcda1616e02c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20263, "upload_time": "2019-12-02T15:16:43", "upload_time_iso_8601": "2019-12-02T15:16:43.505706Z", "url": "https://files.pythonhosted.org/packages/ff/ef/e8266e158ed32bf5f723fac862b6518833d0b53ca183165a8718f212c0d5/wasabi-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dad3077037d1f0a59743cab122cd77b", "sha256": "9af48b37709000dac34653be376aaac2e3e15392b8c78d0898124c52e083d088"}, "downloads": -1, "filename": "wasabi-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4dad3077037d1f0a59743cab122cd77b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22119, "upload_time": "2019-12-02T15:16:45", "upload_time_iso_8601": "2019-12-02T15:16:45.367216Z", "url": "https://files.pythonhosted.org/packages/33/c5/b999502e0b925d1f37730abd412ec2e626348040722e2c86d0f3f9dc898c/wasabi-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "b01400f5a26f716435e9df0e69da2fff", "sha256": "64bddd8ccd67c8327853401a6f579a926c84639f84ad5cabc3be3baa2b111f22"}, "downloads": -1, "filename": "wasabi-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b01400f5a26f716435e9df0e69da2fff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20377, "upload_time": "2019-12-28T12:34:08", "upload_time_iso_8601": "2019-12-28T12:34:08.165612Z", "url": "https://files.pythonhosted.org/packages/9b/f5/01bc4156ac46c46297b6291ab438336ff66c096bd37e85f7381e6254f908/wasabi-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8ba7858ba24f35c358ca701f725f4b2", "sha256": "bc882670a317be1a88e85cd7fc41bd99c1857bfc085090edd11bbff6c4f35788"}, "downloads": -1, "filename": "wasabi-0.5.0.tar.gz", "has_sig": false, "md5_digest": "e8ba7858ba24f35c358ca701f725f4b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22262, "upload_time": "2019-12-28T12:34:19", "upload_time_iso_8601": "2019-12-28T12:34:19.585707Z", "url": "https://files.pythonhosted.org/packages/32/2c/fc3388b4f9720581190441fd97a20098118d7080b2a2f9c7d0e92c006fd1/wasabi-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "50a40d9ac9e34d3695d6bfc14b207e38", "sha256": "da1f100e0025fe1e50fd67fa5b0b05df902187d5c65c86dc110974ab856d1f05"}, "downloads": -1, "filename": "wasabi-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "50a40d9ac9e34d3695d6bfc14b207e38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20576, "upload_time": "2020-01-03T22:05:47", "upload_time_iso_8601": "2020-01-03T22:05:47.551030Z", "url": "https://files.pythonhosted.org/packages/21/e1/e4e7b754e6be3a79c400eb766fb34924a6d278c43bb828f94233e0124a21/wasabi-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36b32d0f57efec39c46807db714c0e0f", "sha256": "b8dd3e963cd693fde1eb6bfbecf51790171aa3534fa299faf35cf269f2fd6063"}, "downloads": -1, "filename": "wasabi-0.6.0.tar.gz", "has_sig": false, "md5_digest": "36b32d0f57efec39c46807db714c0e0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22495, "upload_time": "2020-01-03T22:05:26", "upload_time_iso_8601": "2020-01-03T22:05:26.846568Z", "url": "https://files.pythonhosted.org/packages/39/69/4b5a64b25a18f5a05f33c6a4f0bd0fc9f117b6327e7c673548ae3a7c784f/wasabi-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "50a40d9ac9e34d3695d6bfc14b207e38", "sha256": "da1f100e0025fe1e50fd67fa5b0b05df902187d5c65c86dc110974ab856d1f05"}, "downloads": -1, "filename": "wasabi-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "50a40d9ac9e34d3695d6bfc14b207e38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20576, "upload_time": "2020-01-03T22:05:47", "upload_time_iso_8601": "2020-01-03T22:05:47.551030Z", "url": "https://files.pythonhosted.org/packages/21/e1/e4e7b754e6be3a79c400eb766fb34924a6d278c43bb828f94233e0124a21/wasabi-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36b32d0f57efec39c46807db714c0e0f", "sha256": "b8dd3e963cd693fde1eb6bfbecf51790171aa3534fa299faf35cf269f2fd6063"}, "downloads": -1, "filename": "wasabi-0.6.0.tar.gz", "has_sig": false, "md5_digest": "36b32d0f57efec39c46807db714c0e0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22495, "upload_time": "2020-01-03T22:05:26", "upload_time_iso_8601": "2020-01-03T22:05:26.846568Z", "url": "https://files.pythonhosted.org/packages/39/69/4b5a64b25a18f5a05f33c6a4f0bd0fc9f117b6327e7c673548ae3a7c784f/wasabi-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:20 2020"}