{"info": {"author": "Bob Green", "author_email": "rgreen@goscoutgo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# omnio\n\n*Python 3 library for opening URIs as streaming file-like objects*\n\nThis library provides the `omnio.open()` function with an interface very\nsimilar to that of the built in Python `open` function.  The difference is\nthat while Python's `open` operates only on local filesystem paths, `omnio`\naccepts URIs as well.\n\nIt currently supports `file`, `http`, and `s3` URIs, though it may be\nexpanded to support additional schemes in the future.\n\nIn addition, it supports compression and decompression of streams with gzip\nor bz2.\n\n## Features\n\n* API is a superset of Python 3's built-in open() function\n* Based on Python 3 `io` module\n* Gzip and bzip2 support both for reading and writing\n* Local file support using standard library\n* HTTP support using `requests`\n* S3 support using `boto3`\n\n## Examples\n\nRead a local binary file:\n\n    >>> with omnio.open('example.bin', 'r') as f:\n    >>>     data = f.read()\n\nRead a local text file:\n\n    >>> with omnio.open('example.txt', 'rt') as f:\n    >>>     text = f.read()\n\nRead a text file from the web:\n\n    >>> with omnio.open('https://example.com/example.txt', 'rt') as f:\n    >>>     text = f.read()\n\nRead a gzipped text file from the web, uncompressing on the fly:\n\n    >>> with omnio.open('https://example.com/example.txt.gz', 'rtz') as f:\n    >>>     text = f.read()\n\nRead a text file from s3:\n\n    >>> with omnio.open('s3://my-bucket/my-key', 'rt') as f:\n    >>>     text = f.read()\n\nWrite a megabyte of random data to s3, compressing with bzip2:\n\n    >>> import os\n    >>> data = os.urandom(1024**2)\n    >>> with omnio.open('s3://my-bucket/my-key', 'wbj') as f:\n    >>>     f.write(data)\n\nRead a bzip2 compressed csv file into a list of data rows:\n\n    >>> import csv\n    >>> with omnio.open('data/example_data.csv.bz2', 'rtj') as f:\n    >>>     reader = csv.reader(f)\n    >>>     data = list(reader)\n\n\n## API\n\nThe omnio API consists of a single function intended to be referenced as\n`omnio.open()`. This function API is designed to mimic Python 3's built-in\n`open()` as much as possible, and should normally be able to be used as a\ndrop-in replacement.\n\n_Signature:_\n\n`omnio.open(uri, mode='rb', encoding=None, errors=None, newline=None)`\n\n_Returns:_\n\nA file-like object whose type depends on the scheme and the mode.\n\n_Parameters:_\n  * _uri_ -- URI or local path. Supported URI schemes are `file`,\n  `http`, and `s3`. Local paths may be specified by as ordinary path\n  strings.\n\n  * _mode_ -- Optional string that specifies the mode in which the\n  file is opened. It defaults to 'rb' which means open for reading\n  in binary mode. Supported modes are documented below.\n\n_Modes:_\n\n| Character | Meaning |\n| --------- | ------- |\n| 'r'       | open for reading (default)                  |\n| 'w'       | open for writing, truncating the file first |\n| 'b'       | binary mode (default)                       |\n| 't'       | text mode                                   |\n| 'z'       | use gzip compression                        |\n| 'j'       | use bzip2 compression                       |\n\nThese characters can be composed into valid modes. Binary mode is\nalways the default, so some mode specifications are equivalent.\nThe complete list of supported modes are as follows:\n\n| Mode        | Meaning |\n| ----------- | ------- |\n| 'r', 'rb'   | read bytes                                          |\n| 'rt'        | read and decode to unicode                          |\n| 'rz', 'rbz' | read, decompressing gzip to bytes                   |\n| 'rj', 'rbj' | read, decompressing bzip2 to bytes                  |\n| 'rtz'       | read, decompress gzip to bytes, decode to unicode   |\n| 'rtj'       | read, decompress bzip2 to bytes, decode to unicode  |\n| 'w', 'wb'   | write bytes                                         |\n| 'wt'        | write unicode, encoding to bytes                    |\n| 'wz', 'wbz' | write bytes, compress with gzip                     |\n| 'wj', 'wbj' | write bytes, compress with bzip2                    |\n| 'wtz'       | write unicode, encode to bytes, compress with gzip  |\n| 'wtj'       | write unicode, encode to bytes, compress with bzip2 |\n\n_Some keyword arguments may be applicable to only certain modes. For\nexample, `encoding` only applies to 't' (text) modes._\n\n_Some schemes may not support some modes.  For example, the http\nscheme currently does not support any 'w' (write) modes._\n\n\n## Configuration\n\nThe `omnio.open` function accepts an optional `config` parameter. This allows\nfor specifying scheme-specific configuration.\n\nThe `default_config()` method returns a config dictionary with all supported\nkeys defined along with their default values.\n\n    >>> import omnio\n    >>> omnio.default_config()\n    {'file': {}, 'http': {'content_iter_chunk_size': 512}, 's3': {'upload_part_size': 5242880, 'boto_client_config_args': [], 'boto_client_config_kwargs': {}}}\n\nTo specify alternate values for these parameters, instantiate a default\nconfig, update the dict with the desired values and pass it as a keyword arg\nto the `omnio.open()` function.\n\n    >>> config = omnio.default_config()\n    >>> config[\"s3\"][\"boto_client_config_kwargs\"] = {\"read_timeout\": 600}\n    >>> with omnio.open(\"s3://my-bucket/my-key\", \"rt\", config=config) as fd:\n        fd.read()\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scoutexchange/omnio", "keywords": "", "license": "MIT", "maintainer": "Bob Green", "maintainer_email": "rgreen@goscoutgo.com", "name": "omnio", "package_url": "https://pypi.org/project/omnio/", "platform": "", "project_url": "https://pypi.org/project/omnio/", "project_urls": {"Homepage": "https://github.com/scoutexchange/omnio", "Repository": "https://github.com/scoutexchange/omnio"}, "release_url": "https://pypi.org/project/omnio/1.1.1/", "requires_dist": ["boto3 (>=1.10,<2.0)", "requests (>=2.22,<3.0)"], "requires_python": ">=3.6,<4.0", "summary": "Python 3 library for opening URIs as streaming file-like objects", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>omnio</h1>\n<p><em>Python 3 library for opening URIs as streaming file-like objects</em></p>\n<p>This library provides the <code>omnio.open()</code> function with an interface very\nsimilar to that of the built in Python <code>open</code> function.  The difference is\nthat while Python's <code>open</code> operates only on local filesystem paths, <code>omnio</code>\naccepts URIs as well.</p>\n<p>It currently supports <code>file</code>, <code>http</code>, and <code>s3</code> URIs, though it may be\nexpanded to support additional schemes in the future.</p>\n<p>In addition, it supports compression and decompression of streams with gzip\nor bz2.</p>\n<h2>Features</h2>\n<ul>\n<li>API is a superset of Python 3's built-in open() function</li>\n<li>Based on Python 3 <code>io</code> module</li>\n<li>Gzip and bzip2 support both for reading and writing</li>\n<li>Local file support using standard library</li>\n<li>HTTP support using <code>requests</code></li>\n<li>S3 support using <code>boto3</code></li>\n</ul>\n<h2>Examples</h2>\n<p>Read a local binary file:</p>\n<pre><code>&gt;&gt;&gt; with omnio.open('example.bin', 'r') as f:\n&gt;&gt;&gt;     data = f.read()\n</code></pre>\n<p>Read a local text file:</p>\n<pre><code>&gt;&gt;&gt; with omnio.open('example.txt', 'rt') as f:\n&gt;&gt;&gt;     text = f.read()\n</code></pre>\n<p>Read a text file from the web:</p>\n<pre><code>&gt;&gt;&gt; with omnio.open('https://example.com/example.txt', 'rt') as f:\n&gt;&gt;&gt;     text = f.read()\n</code></pre>\n<p>Read a gzipped text file from the web, uncompressing on the fly:</p>\n<pre><code>&gt;&gt;&gt; with omnio.open('https://example.com/example.txt.gz', 'rtz') as f:\n&gt;&gt;&gt;     text = f.read()\n</code></pre>\n<p>Read a text file from s3:</p>\n<pre><code>&gt;&gt;&gt; with omnio.open('s3://my-bucket/my-key', 'rt') as f:\n&gt;&gt;&gt;     text = f.read()\n</code></pre>\n<p>Write a megabyte of random data to s3, compressing with bzip2:</p>\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; data = os.urandom(1024**2)\n&gt;&gt;&gt; with omnio.open('s3://my-bucket/my-key', 'wbj') as f:\n&gt;&gt;&gt;     f.write(data)\n</code></pre>\n<p>Read a bzip2 compressed csv file into a list of data rows:</p>\n<pre><code>&gt;&gt;&gt; import csv\n&gt;&gt;&gt; with omnio.open('data/example_data.csv.bz2', 'rtj') as f:\n&gt;&gt;&gt;     reader = csv.reader(f)\n&gt;&gt;&gt;     data = list(reader)\n</code></pre>\n<h2>API</h2>\n<p>The omnio API consists of a single function intended to be referenced as\n<code>omnio.open()</code>. This function API is designed to mimic Python 3's built-in\n<code>open()</code> as much as possible, and should normally be able to be used as a\ndrop-in replacement.</p>\n<p><em>Signature:</em></p>\n<p><code>omnio.open(uri, mode='rb', encoding=None, errors=None, newline=None)</code></p>\n<p><em>Returns:</em></p>\n<p>A file-like object whose type depends on the scheme and the mode.</p>\n<p><em>Parameters:</em></p>\n<ul>\n<li>\n<p><em>uri</em> -- URI or local path. Supported URI schemes are <code>file</code>,\n<code>http</code>, and <code>s3</code>. Local paths may be specified by as ordinary path\nstrings.</p>\n</li>\n<li>\n<p><em>mode</em> -- Optional string that specifies the mode in which the\nfile is opened. It defaults to 'rb' which means open for reading\nin binary mode. Supported modes are documented below.</p>\n</li>\n</ul>\n<p><em>Modes:</em></p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>'r'</td>\n<td>open for reading (default)</td>\n</tr>\n<tr>\n<td>'w'</td>\n<td>open for writing, truncating the file first</td>\n</tr>\n<tr>\n<td>'b'</td>\n<td>binary mode (default)</td>\n</tr>\n<tr>\n<td>'t'</td>\n<td>text mode</td>\n</tr>\n<tr>\n<td>'z'</td>\n<td>use gzip compression</td>\n</tr>\n<tr>\n<td>'j'</td>\n<td>use bzip2 compression</td>\n</tr></tbody></table>\n<p>These characters can be composed into valid modes. Binary mode is\nalways the default, so some mode specifications are equivalent.\nThe complete list of supported modes are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>'r', 'rb'</td>\n<td>read bytes</td>\n</tr>\n<tr>\n<td>'rt'</td>\n<td>read and decode to unicode</td>\n</tr>\n<tr>\n<td>'rz', 'rbz'</td>\n<td>read, decompressing gzip to bytes</td>\n</tr>\n<tr>\n<td>'rj', 'rbj'</td>\n<td>read, decompressing bzip2 to bytes</td>\n</tr>\n<tr>\n<td>'rtz'</td>\n<td>read, decompress gzip to bytes, decode to unicode</td>\n</tr>\n<tr>\n<td>'rtj'</td>\n<td>read, decompress bzip2 to bytes, decode to unicode</td>\n</tr>\n<tr>\n<td>'w', 'wb'</td>\n<td>write bytes</td>\n</tr>\n<tr>\n<td>'wt'</td>\n<td>write unicode, encoding to bytes</td>\n</tr>\n<tr>\n<td>'wz', 'wbz'</td>\n<td>write bytes, compress with gzip</td>\n</tr>\n<tr>\n<td>'wj', 'wbj'</td>\n<td>write bytes, compress with bzip2</td>\n</tr>\n<tr>\n<td>'wtz'</td>\n<td>write unicode, encode to bytes, compress with gzip</td>\n</tr>\n<tr>\n<td>'wtj'</td>\n<td>write unicode, encode to bytes, compress with bzip2</td>\n</tr></tbody></table>\n<p><em>Some keyword arguments may be applicable to only certain modes. For\nexample, <code>encoding</code> only applies to 't' (text) modes.</em></p>\n<p><em>Some schemes may not support some modes.  For example, the http\nscheme currently does not support any 'w' (write) modes.</em></p>\n<h2>Configuration</h2>\n<p>The <code>omnio.open</code> function accepts an optional <code>config</code> parameter. This allows\nfor specifying scheme-specific configuration.</p>\n<p>The <code>default_config()</code> method returns a config dictionary with all supported\nkeys defined along with their default values.</p>\n<pre><code>&gt;&gt;&gt; import omnio\n&gt;&gt;&gt; omnio.default_config()\n{'file': {}, 'http': {'content_iter_chunk_size': 512}, 's3': {'upload_part_size': 5242880, 'boto_client_config_args': [], 'boto_client_config_kwargs': {}}}\n</code></pre>\n<p>To specify alternate values for these parameters, instantiate a default\nconfig, update the dict with the desired values and pass it as a keyword arg\nto the <code>omnio.open()</code> function.</p>\n<pre><code>&gt;&gt;&gt; config = omnio.default_config()\n&gt;&gt;&gt; config[\"s3\"][\"boto_client_config_kwargs\"] = {\"read_timeout\": 600}\n&gt;&gt;&gt; with omnio.open(\"s3://my-bucket/my-key\", \"rt\", config=config) as fd:\n    fd.read()\n</code></pre>\n\n          </div>"}, "last_serial": 6255076, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6d5de43df50e480599228a15faefdb3b", "sha256": "cd59c0943369c188f1d050a619e36c23bd67d235b76092cff4423415295a9385"}, "downloads": -1, "filename": "omnio-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d5de43df50e480599228a15faefdb3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6457, "upload_time": "2019-11-12T18:29:32", "upload_time_iso_8601": "2019-11-12T18:29:32.349182Z", "url": "https://files.pythonhosted.org/packages/a6/e7/29185eb4ed5a89873d75dca691171804a3b7042ee7c67c9ddd56492da8fe/omnio-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09a59bf433ef7cba63edabb3e23d48fa", "sha256": "385f29f5f6132d2c51fc7f5cfd1d044e78456fe2829e155382c01fdf37003bc2"}, "downloads": -1, "filename": "omnio-1.0.0.tar.gz", "has_sig": false, "md5_digest": "09a59bf433ef7cba63edabb3e23d48fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5268, "upload_time": "2019-11-12T18:29:34", "upload_time_iso_8601": "2019-11-12T18:29:34.475149Z", "url": "https://files.pythonhosted.org/packages/c5/61/25a2497ceb1ce1369a21ff9bb8783528bcf6a6ce60a7803e2919ba6c1f12/omnio-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9a1ea4a9b0c6554b1ce876a25a141b3b", "sha256": "c88ff27205a95e738c7ab1948792ae1b7670db09ba8516e03c290b8d6334756b"}, "downloads": -1, "filename": "omnio-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9a1ea4a9b0c6554b1ce876a25a141b3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11336, "upload_time": "2019-11-12T18:36:20", "upload_time_iso_8601": "2019-11-12T18:36:20.827844Z", "url": "https://files.pythonhosted.org/packages/8c/23/59a023d3e7990e293ff8ed9196fc9c9809b73e4425477e9a46e92e02509e/omnio-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0033999822f4b26b0f787415446d1e79", "sha256": "cdb3268844c9f7e7b08b397ae04de356d828b7b22f7381b803801cc25f64dad6"}, "downloads": -1, "filename": "omnio-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0033999822f4b26b0f787415446d1e79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8134, "upload_time": "2019-11-12T18:36:22", "upload_time_iso_8601": "2019-11-12T18:36:22.206643Z", "url": "https://files.pythonhosted.org/packages/c3/f1/0026ae81b668b88377a8d7dfc8fc5c8d911ffeddd84340d6749416a70894/omnio-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8138ca9e279193d748a87749e686714b", "sha256": "963153d35cffbf86ce0925006b8ca79c681fa8f8bd4aa34a9cfb59615c9cb073"}, "downloads": -1, "filename": "omnio-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8138ca9e279193d748a87749e686714b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11373, "upload_time": "2019-11-18T22:40:49", "upload_time_iso_8601": "2019-11-18T22:40:49.640950Z", "url": "https://files.pythonhosted.org/packages/17/11/aae91d48319234758c5e88f80e53081444abf99017fe01611942382bc770/omnio-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29a7b34de414fe0dece93c5e83bba734", "sha256": "3892804743a62890e622a51ed5203a3f386e2a3e86c26c2c7f1a6eefe49b3bf6"}, "downloads": -1, "filename": "omnio-1.1.0.tar.gz", "has_sig": false, "md5_digest": "29a7b34de414fe0dece93c5e83bba734", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8143, "upload_time": "2019-11-18T22:40:50", "upload_time_iso_8601": "2019-11-18T22:40:50.849959Z", "url": "https://files.pythonhosted.org/packages/c8/cf/e85640508b6f85bc485d162dd98e495e172dba7bef4ab38868a936d1f09f/omnio-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "5bc8889ab97a0ef381b1f9a02a938985", "sha256": "47b9fead036f1aa9544d7472af8c5dee52b40ebc29aee112f4f6073624690421"}, "downloads": -1, "filename": "omnio-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5bc8889ab97a0ef381b1f9a02a938985", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11446, "upload_time": "2019-12-06T16:50:26", "upload_time_iso_8601": "2019-12-06T16:50:26.971724Z", "url": "https://files.pythonhosted.org/packages/82/95/568f2f1510a1ef35d1f58ea210c39bec247a4f665e715b532fbd907848f2/omnio-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8cdb5c8673fbcd5eb451e1119cf86fa", "sha256": "14b836654f820ffdba3c4a9881b817349d887a087aaa2ef00cc3f6c4864ad26e"}, "downloads": -1, "filename": "omnio-1.1.1.tar.gz", "has_sig": false, "md5_digest": "d8cdb5c8673fbcd5eb451e1119cf86fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8220, "upload_time": "2019-12-06T16:50:28", "upload_time_iso_8601": "2019-12-06T16:50:28.429206Z", "url": "https://files.pythonhosted.org/packages/67/24/48d0783d7c21ca848a7fd67cba4838a228cb963101b9816cb4fb6b5732ac/omnio-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5bc8889ab97a0ef381b1f9a02a938985", "sha256": "47b9fead036f1aa9544d7472af8c5dee52b40ebc29aee112f4f6073624690421"}, "downloads": -1, "filename": "omnio-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5bc8889ab97a0ef381b1f9a02a938985", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11446, "upload_time": "2019-12-06T16:50:26", "upload_time_iso_8601": "2019-12-06T16:50:26.971724Z", "url": "https://files.pythonhosted.org/packages/82/95/568f2f1510a1ef35d1f58ea210c39bec247a4f665e715b532fbd907848f2/omnio-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8cdb5c8673fbcd5eb451e1119cf86fa", "sha256": "14b836654f820ffdba3c4a9881b817349d887a087aaa2ef00cc3f6c4864ad26e"}, "downloads": -1, "filename": "omnio-1.1.1.tar.gz", "has_sig": false, "md5_digest": "d8cdb5c8673fbcd5eb451e1119cf86fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8220, "upload_time": "2019-12-06T16:50:28", "upload_time_iso_8601": "2019-12-06T16:50:28.429206Z", "url": "https://files.pythonhosted.org/packages/67/24/48d0783d7c21ca848a7fd67cba4838a228cb963101b9816cb4fb6b5732ac/omnio-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:27 2020"}