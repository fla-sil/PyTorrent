{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: C", "Programming Language :: Python :: 3.6", "Topic :: Multimedia :: Sound/Audio :: Speech", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Pocketsphinx Python\n\nPocketsphinx is a part of the [CMU Sphinx](http://cmusphinx.sourceforge.net) Open Source Toolkit For Speech Recognition.\n\nThis package provides a python interface to CMU [Sphinxbase](https://github.com/cmusphinx/sphinxbase) and [Pocketsphinx](https://github.com/cmusphinx/pocketsphinx) libraries created with [SWIG](http://www.swig.org) and [Setuptools](https://setuptools.readthedocs.io).\n\n## Supported platforms\n\n* Windows (untested)\n* Linux\n* Mac OS X (untested)\n\n### Install requirements\n\nWindows requirements:\n\n* [Python](https://www.python.org/downloads)\n* [Git](http://git-scm.com/downloads)\n* [Swig](http://www.swig.org/download.html)\n* [Visual Studio Community](https://www.visualstudio.com/ru-ru/downloads/download-visual-studio-vs.aspx)\n\nUbuntu requirements:\n\n```shell\nsudo apt-get install -qq python python-dev python-pip build-essential swig git libpulse-dev libasound2-dev\n```\n\nMac OS X requirements:\n\n```shell\nbrew reinstall swig python\n```\n\n## Installation\n\n```shell\n# Make sure we have up-to-date versions of pip, setuptools and wheel\npython -m pip install --upgrade pip setuptools wheel\npip install --upgrade pocketsphinx\n```\n\nMore binary distributions for manual installation are available [here](https://pypi.org/project/pocketsphinx/#files).\n\n### Installing Models\n\nPocketsphinx models in ``.tar.gz`` format can be installed using this packages as well.\n\n```python\nfrom pocketsphinx import PocketsphinxModel, AudioFile\n\nmodels = PocketsphinxModel(model_path='/some/installation/path')\n# this will install the model from the give url under name 'de'\nmodels.install_model('https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/German/cmusphinx-de-voxforge-5.2.tar.gz', 'de')\n\nde = models.get_model('de')\n# this returns a dictionary with the locations of hmm, lm and dict of the model\n\n# we can now use the 'de' model directly with any pocketsphinx object\nfor phrase in LiveSpeech(model=de): print(phrase)\n\n```\n\nThe default ``model_path`` is ``'~/pocketsphinx_models'``.\n\n## Usage\n\n### LiveSpeech\n\nIt's an iterator class for continuous recognition or keyword search from a microphone.\n\n```python\nfrom pocketsphinx import LiveSpeech\nfor phrase in LiveSpeech(): print(phrase)\n```\n\nAn example of a keyword search:\n\n```python\nfrom pocketsphinx import LiveSpeech\n\nspeech = LiveSpeech(lm=False, keyphrase='forward', kws_threshold=1e-20)\nfor phrase in speech:\n    print(phrase.segments(detailed=True))\n```\n\nWith your model and dictionary:\n\n```python\nimport os\nfrom pocketsphinx import LiveSpeech, get_model_path\n\nmodel_path = get_model_path()\n\nspeech = LiveSpeech(\n    verbose=False,\n    sampling_rate=16000,\n    buffer_size=2048,\n    no_search=False,\n    full_utt=False,\n    hmm=os.path.join(model_path, 'en-us'),\n    lm=os.path.join(model_path, 'en-us.lm.bin'),\n    dic=os.path.join(model_path, 'cmudict-en-us.dict')\n)\n\nfor phrase in speech:\n    print(phrase)\n```\n\n### StreamSpeech\n\nThis can be used to send chunks of raw bytes to the iterator, usually when transferring audio over a socket or similar.\n\n```python\nfrom pocketsphinx import StreamSpeech\n\nf = open('somefile.wav', 'rb')\n\ndef callback():\n    return f.read(2048)\n\nfor phrase in StreamSpeech(callback=callback): print(phrase)\n```\n\nFor an example of keyword search and custom models, see *LiveSpeech*.\n\n### AudioFile\n\nIt's an iterator class for continuous recognition or keyword search from a file.\n\n```python\nfrom pocketsphinx import AudioFile\nfor phrase in AudioFile(): print(phrase) # => \"go forward ten meters\"\n```\n\nAn example of a keyword search:\n\n```python\nfrom pocketsphinx import AudioFile\n\naudio = AudioFile(lm=False, keyphrase='forward', kws_threshold=1e-20)\nfor phrase in audio:\n    print(phrase.segments(detailed=True)) # => \"[('forward', -617, 63, 121)]\"\n```\n\nWith your model and dictionary:\n\n```python\nimport os\nfrom pocketsphinx import AudioFile, get_model_path, get_data_path\n\nmodel_path = get_model_path()\ndata_path = get_data_path()\n\nconfig = {\n    'verbose': False,\n    'audio_file': os.path.join(data_path, 'goforward.raw'),\n    'buffer_size': 2048,\n    'no_search': False,\n    'full_utt': False,\n    'hmm': os.path.join(model_path, 'en-us'),\n    'lm': os.path.join(model_path, 'en-us.lm.bin'),\n    'dict': os.path.join(model_path, 'cmudict-en-us.dict')\n}\n\naudio = AudioFile(**config)\nfor phrase in audio:\n    print(phrase)\n```\n\nConvert frame into time coordinates:\n\n```python\nfrom pocketsphinx import AudioFile\n\n# Frames per Second\nfps = 100\n\nfor phrase in AudioFile(frate=fps):  # frate (default=100)\n    print('-' * 28)\n    print('| %5s |  %3s  |   %4s   |' % ('start', 'end', 'word'))\n    print('-' * 28)\n    for s in phrase.seg():\n        print('| %4ss | %4ss | %8s |' % (s.start_frame / fps, s.end_frame / fps, s.word))\n    print('-' * 28)\n\n# ----------------------------\n# | start |  end  |   word   |\n# ----------------------------\n# |  0.0s | 0.24s | <s>      |\n# | 0.25s | 0.45s | <sil>    |\n# | 0.46s | 0.63s | go       |\n# | 0.64s | 1.16s | forward  |\n# | 1.17s | 1.52s | ten      |\n# | 1.53s | 2.11s | meters   |\n# | 2.12s |  2.6s | </s>     |\n# ----------------------------\n```\n\n### Pocketsphinx\n\nIt's a simple and flexible proxy class to `pocketsphinx.Decode`.\n\n```python\nfrom pocketsphinx import Pocketsphinx\nprint(Pocketsphinx().decode()) # => \"go forward ten meters\"\n```\n\nA more comprehensive example:\n\n```python\nfrom __future__ import print_function\nimport os\nfrom pocketsphinx import Pocketsphinx, get_model_path, get_data_path\n\nmodel_path = get_model_path()\ndata_path = get_data_path()\n\nconfig = {\n    'hmm': os.path.join(model_path, 'en-us'),\n    'lm': os.path.join(model_path, 'en-us.lm.bin'),\n    'dict': os.path.join(model_path, 'cmudict-en-us.dict')\n}\n\nps = Pocketsphinx(**config)\nps.decode(\n    audio_file=os.path.join(data_path, 'goforward.raw'),\n    buffer_size=2048,\n    no_search=False,\n    full_utt=False\n)\n\nprint(ps.segments()) # => ['<s>', '<sil>', 'go', 'forward', 'ten', 'meters', '</s>']\nprint('Detailed segments:', *ps.segments(detailed=True), sep='\\n') # => [\n#     word, prob, start_frame, end_frame\n#     ('<s>', 0, 0, 24)\n#     ('<sil>', -3778, 25, 45)\n#     ('go', -27, 46, 63)\n#     ('forward', -38, 64, 116)\n#     ('ten', -14105, 117, 152)\n#     ('meters', -2152, 153, 211)\n#     ('</s>', 0, 212, 260)\n# ]\n\nprint(ps.hypothesis())  # => go forward ten meters\nprint(ps.probability()) # => -32079\nprint(ps.score())       # => -7066\nprint(ps.confidence())  # => 0.04042641466841839\n\nprint(*ps.best(count=10), sep='\\n') # => [\n#     ('go forward ten meters', -28034)\n#     ('go for word ten meters', -28570)\n#     ('go forward and majors', -28670)\n#     ('go forward and meters', -28681)\n#     ('go forward and readers', -28685)\n#     ('go forward ten readers', -28688)\n#     ('go forward ten leaders', -28695)\n#     ('go forward can meters', -28695)\n#     ('go forward and leaders', -28706)\n#     ('go for work ten meters', -28722)\n# ]\n```\n\n### Default config\n\nIf you don't pass any argument while creating an instance of the Pocketsphinx, AudioFile or LiveSpeech class, it will use next default values:\n\n```python\nverbose = False\nlogfn = /dev/null or nul\naudio_file = site-packages/pocketsphinx/data/goforward.raw\naudio_device = None\nsampling_rate = 16000\nbuffer_size = 2048\nno_search = False\nfull_utt = False\nhmm = site-packages/pocketsphinx/model/en-us\nlm = site-packages/pocketsphinx/model/en-us.lm.bin\ndict = site-packages/pocketsphinx/model/cmudict-en-us.dict\n```\n\nAny other option must be passed into the config as is, without using symbol `-`.\n\nIf you want to disable default language model or dictionary, you can change the value of the corresponding options to False:\n\n```python\nlm = False\ndict = False\n```\n\n### Verbose\n\nSend output to stdout:\n\n```python\nfrom pocketsphinx import Pocketsphinx\n\nps = Pocketsphinx(verbose=True)\nps.decode()\n\nprint(ps.hypothesis())\n```\n\nSend output to file:\n\n```python\nfrom pocketsphinx import Pocketsphinx\n\nps = Pocketsphinx(verbose=True, logfn='pocketsphinx.log')\nps.decode()\n\nprint(ps.hypothesis())\n```\n\n### Compatibility\n\nParent classes are still available:\n\n```python\nimport os\nfrom pocketsphinx import DefaultConfig, Decoder, get_model_path, get_data_path\n\nmodel_path = get_model_path()\ndata_path = get_data_path()\n\n# Create a decoder with a certain model\nconfig = DefaultConfig()\nconfig.set_string('-hmm', os.path.join(model_path, 'en-us'))\nconfig.set_string('-lm', os.path.join(model_path, 'en-us.lm.bin'))\nconfig.set_string('-dict', os.path.join(model_path, 'cmudict-en-us.dict'))\ndecoder = Decoder(config)\n\n# Decode streaming data\nbuf = bytearray(1024)\nwith open(os.path.join(data_path, 'goforward.raw'), 'rb') as f:\n    decoder.start_utt()\n    while f.readinto(buf):\n        decoder.process_raw(buf, False, False)\n    decoder.end_utt()\nprint('Best hypothesis segments:', [seg.word for seg in decoder.seg()])\n```\n\n## Projects using pocketsphinx-python\n\n* [SpeechRecognition](https://github.com/Uberi/speech_recognition) - Library for performing speech recognition, with support for several engines and APIs, online and offline.\n\n## License\n\n[The BSD License](https://github.com/bambocher/pocketsphinx-python/blob/master/LICENSE)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "sphinxbase pocketsphinx", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pocketsphinx-fork", "package_url": "https://pypi.org/project/pocketsphinx-fork/", "platform": "", "project_url": "https://pypi.org/project/pocketsphinx-fork/", "project_urls": null, "release_url": "https://pypi.org/project/pocketsphinx-fork/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Forked version of [pocketsphinx-python](https://github.com/bambocher/pocketsphinx-python) which adds utility for installing models, and the StreamSpeech interface.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pocketsphinx Python</h1>\n<p>Pocketsphinx is a part of the <a href=\"http://cmusphinx.sourceforge.net\" rel=\"nofollow\">CMU Sphinx</a> Open Source Toolkit For Speech Recognition.</p>\n<p>This package provides a python interface to CMU <a href=\"https://github.com/cmusphinx/sphinxbase\" rel=\"nofollow\">Sphinxbase</a> and <a href=\"https://github.com/cmusphinx/pocketsphinx\" rel=\"nofollow\">Pocketsphinx</a> libraries created with <a href=\"http://www.swig.org\" rel=\"nofollow\">SWIG</a> and <a href=\"https://setuptools.readthedocs.io\" rel=\"nofollow\">Setuptools</a>.</p>\n<h2>Supported platforms</h2>\n<ul>\n<li>Windows (untested)</li>\n<li>Linux</li>\n<li>Mac OS X (untested)</li>\n</ul>\n<h3>Install requirements</h3>\n<p>Windows requirements:</p>\n<ul>\n<li><a href=\"https://www.python.org/downloads\" rel=\"nofollow\">Python</a></li>\n<li><a href=\"http://git-scm.com/downloads\" rel=\"nofollow\">Git</a></li>\n<li><a href=\"http://www.swig.org/download.html\" rel=\"nofollow\">Swig</a></li>\n<li><a href=\"https://www.visualstudio.com/ru-ru/downloads/download-visual-studio-vs.aspx\" rel=\"nofollow\">Visual Studio Community</a></li>\n</ul>\n<p>Ubuntu requirements:</p>\n<pre>sudo apt-get install -qq python python-dev python-pip build-essential swig git libpulse-dev libasound2-dev\n</pre>\n<p>Mac OS X requirements:</p>\n<pre>brew reinstall swig python\n</pre>\n<h2>Installation</h2>\n<pre><span class=\"c1\"># Make sure we have up-to-date versions of pip, setuptools and wheel</span>\npython -m pip install --upgrade pip setuptools wheel\npip install --upgrade pocketsphinx\n</pre>\n<p>More binary distributions for manual installation are available <a href=\"https://pypi.org/project/pocketsphinx/#files\" rel=\"nofollow\">here</a>.</p>\n<h3>Installing Models</h3>\n<p>Pocketsphinx models in <code>.tar.gz</code> format can be installed using this packages as well.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">PocketsphinxModel</span><span class=\"p\">,</span> <span class=\"n\">AudioFile</span>\n\n<span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"n\">PocketsphinxModel</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"o\">=</span><span class=\"s1\">'/some/installation/path'</span><span class=\"p\">)</span>\n<span class=\"c1\"># this will install the model from the give url under name 'de'</span>\n<span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">install_model</span><span class=\"p\">(</span><span class=\"s1\">'https://sourceforge.net/projects/cmusphinx/files/Acoustic</span><span class=\"si\">%20a</span><span class=\"s1\">nd</span><span class=\"si\">%20La</span><span class=\"s1\">nguage%20Models/German/cmusphinx-de-voxforge-5.2.tar.gz'</span><span class=\"p\">,</span> <span class=\"s1\">'de'</span><span class=\"p\">)</span>\n\n<span class=\"n\">de</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'de'</span><span class=\"p\">)</span>\n<span class=\"c1\"># this returns a dictionary with the locations of hmm, lm and dict of the model</span>\n\n<span class=\"c1\"># we can now use the 'de' model directly with any pocketsphinx object</span>\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">LiveSpeech</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">de</span><span class=\"p\">):</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">phrase</span><span class=\"p\">)</span>\n</pre>\n<p>The default <code>model_path</code> is <code>'~/pocketsphinx_models'</code>.</p>\n<h2>Usage</h2>\n<h3>LiveSpeech</h3>\n<p>It's an iterator class for continuous recognition or keyword search from a microphone.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">LiveSpeech</span>\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">LiveSpeech</span><span class=\"p\">():</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">phrase</span><span class=\"p\">)</span>\n</pre>\n<p>An example of a keyword search:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">LiveSpeech</span>\n\n<span class=\"n\">speech</span> <span class=\"o\">=</span> <span class=\"n\">LiveSpeech</span><span class=\"p\">(</span><span class=\"n\">lm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">keyphrase</span><span class=\"o\">=</span><span class=\"s1\">'forward'</span><span class=\"p\">,</span> <span class=\"n\">kws_threshold</span><span class=\"o\">=</span><span class=\"mf\">1e-20</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">speech</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">phrase</span><span class=\"o\">.</span><span class=\"n\">segments</span><span class=\"p\">(</span><span class=\"n\">detailed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<p>With your model and dictionary:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">LiveSpeech</span><span class=\"p\">,</span> <span class=\"n\">get_model_path</span>\n\n<span class=\"n\">model_path</span> <span class=\"o\">=</span> <span class=\"n\">get_model_path</span><span class=\"p\">()</span>\n\n<span class=\"n\">speech</span> <span class=\"o\">=</span> <span class=\"n\">LiveSpeech</span><span class=\"p\">(</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">sampling_rate</span><span class=\"o\">=</span><span class=\"mi\">16000</span><span class=\"p\">,</span>\n    <span class=\"n\">buffer_size</span><span class=\"o\">=</span><span class=\"mi\">2048</span><span class=\"p\">,</span>\n    <span class=\"n\">no_search</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">full_utt</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">hmm</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'en-us'</span><span class=\"p\">),</span>\n    <span class=\"n\">lm</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'en-us.lm.bin'</span><span class=\"p\">),</span>\n    <span class=\"n\">dic</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'cmudict-en-us.dict'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">speech</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">phrase</span><span class=\"p\">)</span>\n</pre>\n<h3>StreamSpeech</h3>\n<p>This can be used to send chunks of raw bytes to the iterator, usually when transferring audio over a socket or similar.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">StreamSpeech</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'somefile.wav'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">2048</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">StreamSpeech</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">callback</span><span class=\"p\">):</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">phrase</span><span class=\"p\">)</span>\n</pre>\n<p>For an example of keyword search and custom models, see <em>LiveSpeech</em>.</p>\n<h3>AudioFile</h3>\n<p>It's an iterator class for continuous recognition or keyword search from a file.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">AudioFile</span>\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">AudioFile</span><span class=\"p\">():</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">phrase</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; \"go forward ten meters\"</span>\n</pre>\n<p>An example of a keyword search:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">AudioFile</span>\n\n<span class=\"n\">audio</span> <span class=\"o\">=</span> <span class=\"n\">AudioFile</span><span class=\"p\">(</span><span class=\"n\">lm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">keyphrase</span><span class=\"o\">=</span><span class=\"s1\">'forward'</span><span class=\"p\">,</span> <span class=\"n\">kws_threshold</span><span class=\"o\">=</span><span class=\"mf\">1e-20</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">audio</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">phrase</span><span class=\"o\">.</span><span class=\"n\">segments</span><span class=\"p\">(</span><span class=\"n\">detailed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span> <span class=\"c1\"># =&gt; \"[('forward', -617, 63, 121)]\"</span>\n</pre>\n<p>With your model and dictionary:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">AudioFile</span><span class=\"p\">,</span> <span class=\"n\">get_model_path</span><span class=\"p\">,</span> <span class=\"n\">get_data_path</span>\n\n<span class=\"n\">model_path</span> <span class=\"o\">=</span> <span class=\"n\">get_model_path</span><span class=\"p\">()</span>\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"n\">get_data_path</span><span class=\"p\">()</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'verbose'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'audio_file'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"s1\">'goforward.raw'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'buffer_size'</span><span class=\"p\">:</span> <span class=\"mi\">2048</span><span class=\"p\">,</span>\n    <span class=\"s1\">'no_search'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'full_utt'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hmm'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'en-us'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'lm'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'en-us.lm.bin'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'dict'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'cmudict-en-us.dict'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">audio</span> <span class=\"o\">=</span> <span class=\"n\">AudioFile</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">audio</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">phrase</span><span class=\"p\">)</span>\n</pre>\n<p>Convert frame into time coordinates:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">AudioFile</span>\n\n<span class=\"c1\"># Frames per Second</span>\n<span class=\"n\">fps</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">AudioFile</span><span class=\"p\">(</span><span class=\"n\">frate</span><span class=\"o\">=</span><span class=\"n\">fps</span><span class=\"p\">):</span>  <span class=\"c1\"># frate (default=100)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'-'</span> <span class=\"o\">*</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'| </span><span class=\"si\">%5s</span><span class=\"s1\"> |  </span><span class=\"si\">%3s</span><span class=\"s1\">  |   </span><span class=\"si\">%4s</span><span class=\"s1\">   |'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"s1\">'start'</span><span class=\"p\">,</span> <span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'-'</span> <span class=\"o\">*</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">phrase</span><span class=\"o\">.</span><span class=\"n\">seg</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'| </span><span class=\"si\">%4s</span><span class=\"s1\">s | </span><span class=\"si\">%4s</span><span class=\"s1\">s | </span><span class=\"si\">%8s</span><span class=\"s1\"> |'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">start_frame</span> <span class=\"o\">/</span> <span class=\"n\">fps</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">end_frame</span> <span class=\"o\">/</span> <span class=\"n\">fps</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">word</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'-'</span> <span class=\"o\">*</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ----------------------------</span>\n<span class=\"c1\"># | start |  end  |   word   |</span>\n<span class=\"c1\"># ----------------------------</span>\n<span class=\"c1\"># |  0.0s | 0.24s | &lt;s&gt;      |</span>\n<span class=\"c1\"># | 0.25s | 0.45s | &lt;sil&gt;    |</span>\n<span class=\"c1\"># | 0.46s | 0.63s | go       |</span>\n<span class=\"c1\"># | 0.64s | 1.16s | forward  |</span>\n<span class=\"c1\"># | 1.17s | 1.52s | ten      |</span>\n<span class=\"c1\"># | 1.53s | 2.11s | meters   |</span>\n<span class=\"c1\"># | 2.12s |  2.6s | &lt;/s&gt;     |</span>\n<span class=\"c1\"># ----------------------------</span>\n</pre>\n<h3>Pocketsphinx</h3>\n<p>It's a simple and flexible proxy class to <code>pocketsphinx.Decode</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">Pocketsphinx</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Pocketsphinx</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span> <span class=\"c1\"># =&gt; \"go forward ten meters\"</span>\n</pre>\n<p>A more comprehensive example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">Pocketsphinx</span><span class=\"p\">,</span> <span class=\"n\">get_model_path</span><span class=\"p\">,</span> <span class=\"n\">get_data_path</span>\n\n<span class=\"n\">model_path</span> <span class=\"o\">=</span> <span class=\"n\">get_model_path</span><span class=\"p\">()</span>\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"n\">get_data_path</span><span class=\"p\">()</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'hmm'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'en-us'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'lm'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'en-us.lm.bin'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'dict'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'cmudict-en-us.dict'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">Pocketsphinx</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span>\n    <span class=\"n\">audio_file</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"s1\">'goforward.raw'</span><span class=\"p\">),</span>\n    <span class=\"n\">buffer_size</span><span class=\"o\">=</span><span class=\"mi\">2048</span><span class=\"p\">,</span>\n    <span class=\"n\">no_search</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">full_utt</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">segments</span><span class=\"p\">())</span> <span class=\"c1\"># =&gt; ['&lt;s&gt;', '&lt;sil&gt;', 'go', 'forward', 'ten', 'meters', '&lt;/s&gt;']</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Detailed segments:'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">segments</span><span class=\"p\">(</span><span class=\"n\">detailed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; [</span>\n<span class=\"c1\">#     word, prob, start_frame, end_frame</span>\n<span class=\"c1\">#     ('&lt;s&gt;', 0, 0, 24)</span>\n<span class=\"c1\">#     ('&lt;sil&gt;', -3778, 25, 45)</span>\n<span class=\"c1\">#     ('go', -27, 46, 63)</span>\n<span class=\"c1\">#     ('forward', -38, 64, 116)</span>\n<span class=\"c1\">#     ('ten', -14105, 117, 152)</span>\n<span class=\"c1\">#     ('meters', -2152, 153, 211)</span>\n<span class=\"c1\">#     ('&lt;/s&gt;', 0, 212, 260)</span>\n<span class=\"c1\"># ]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">hypothesis</span><span class=\"p\">())</span>  <span class=\"c1\"># =&gt; go forward ten meters</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">probability</span><span class=\"p\">())</span> <span class=\"c1\"># =&gt; -32079</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">())</span>       <span class=\"c1\"># =&gt; -7066</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">confidence</span><span class=\"p\">())</span>  <span class=\"c1\"># =&gt; 0.04042641466841839</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">best</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; [</span>\n<span class=\"c1\">#     ('go forward ten meters', -28034)</span>\n<span class=\"c1\">#     ('go for word ten meters', -28570)</span>\n<span class=\"c1\">#     ('go forward and majors', -28670)</span>\n<span class=\"c1\">#     ('go forward and meters', -28681)</span>\n<span class=\"c1\">#     ('go forward and readers', -28685)</span>\n<span class=\"c1\">#     ('go forward ten readers', -28688)</span>\n<span class=\"c1\">#     ('go forward ten leaders', -28695)</span>\n<span class=\"c1\">#     ('go forward can meters', -28695)</span>\n<span class=\"c1\">#     ('go forward and leaders', -28706)</span>\n<span class=\"c1\">#     ('go for work ten meters', -28722)</span>\n<span class=\"c1\"># ]</span>\n</pre>\n<h3>Default config</h3>\n<p>If you don't pass any argument while creating an instance of the Pocketsphinx, AudioFile or LiveSpeech class, it will use next default values:</p>\n<pre><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">logfn</span> <span class=\"o\">=</span> <span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">null</span> <span class=\"ow\">or</span> <span class=\"n\">nul</span>\n<span class=\"n\">audio_file</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">pocketsphinx</span><span class=\"o\">/</span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">goforward</span><span class=\"o\">.</span><span class=\"n\">raw</span>\n<span class=\"n\">audio_device</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">sampling_rate</span> <span class=\"o\">=</span> <span class=\"mi\">16000</span>\n<span class=\"n\">buffer_size</span> <span class=\"o\">=</span> <span class=\"mi\">2048</span>\n<span class=\"n\">no_search</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">full_utt</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">hmm</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">pocketsphinx</span><span class=\"o\">/</span><span class=\"n\">model</span><span class=\"o\">/</span><span class=\"n\">en</span><span class=\"o\">-</span><span class=\"n\">us</span>\n<span class=\"n\">lm</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">pocketsphinx</span><span class=\"o\">/</span><span class=\"n\">model</span><span class=\"o\">/</span><span class=\"n\">en</span><span class=\"o\">-</span><span class=\"n\">us</span><span class=\"o\">.</span><span class=\"n\">lm</span><span class=\"o\">.</span><span class=\"n\">bin</span>\n<span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">pocketsphinx</span><span class=\"o\">/</span><span class=\"n\">model</span><span class=\"o\">/</span><span class=\"n\">cmudict</span><span class=\"o\">-</span><span class=\"n\">en</span><span class=\"o\">-</span><span class=\"n\">us</span><span class=\"o\">.</span><span class=\"n\">dict</span>\n</pre>\n<p>Any other option must be passed into the config as is, without using symbol <code>-</code>.</p>\n<p>If you want to disable default language model or dictionary, you can change the value of the corresponding options to False:</p>\n<pre><span class=\"n\">lm</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<h3>Verbose</h3>\n<p>Send output to stdout:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">Pocketsphinx</span>\n\n<span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">Pocketsphinx</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">hypothesis</span><span class=\"p\">())</span>\n</pre>\n<p>Send output to file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">Pocketsphinx</span>\n\n<span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">Pocketsphinx</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">logfn</span><span class=\"o\">=</span><span class=\"s1\">'pocketsphinx.log'</span><span class=\"p\">)</span>\n<span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">hypothesis</span><span class=\"p\">())</span>\n</pre>\n<h3>Compatibility</h3>\n<p>Parent classes are still available:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pocketsphinx</span> <span class=\"kn\">import</span> <span class=\"n\">DefaultConfig</span><span class=\"p\">,</span> <span class=\"n\">Decoder</span><span class=\"p\">,</span> <span class=\"n\">get_model_path</span><span class=\"p\">,</span> <span class=\"n\">get_data_path</span>\n\n<span class=\"n\">model_path</span> <span class=\"o\">=</span> <span class=\"n\">get_model_path</span><span class=\"p\">()</span>\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"n\">get_data_path</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a decoder with a certain model</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">DefaultConfig</span><span class=\"p\">()</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_string</span><span class=\"p\">(</span><span class=\"s1\">'-hmm'</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'en-us'</span><span class=\"p\">))</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_string</span><span class=\"p\">(</span><span class=\"s1\">'-lm'</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'en-us.lm.bin'</span><span class=\"p\">))</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_string</span><span class=\"p\">(</span><span class=\"s1\">'-dict'</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s1\">'cmudict-en-us.dict'</span><span class=\"p\">))</span>\n<span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"n\">Decoder</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Decode streaming data</span>\n<span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"s1\">'goforward.raw'</span><span class=\"p\">),</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">start_utt</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readinto</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">):</span>\n        <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">process_raw</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">end_utt</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Best hypothesis segments:'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">seg</span><span class=\"o\">.</span><span class=\"n\">word</span> <span class=\"k\">for</span> <span class=\"n\">seg</span> <span class=\"ow\">in</span> <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">seg</span><span class=\"p\">()])</span>\n</pre>\n<h2>Projects using pocketsphinx-python</h2>\n<ul>\n<li><a href=\"https://github.com/Uberi/speech_recognition\" rel=\"nofollow\">SpeechRecognition</a> - Library for performing speech recognition, with support for several engines and APIs, online and offline.</li>\n</ul>\n<h2>License</h2>\n<p><a href=\"https://github.com/bambocher/pocketsphinx-python/blob/master/LICENSE\" rel=\"nofollow\">The BSD License</a></p>\n\n          </div>"}, "last_serial": 5385405, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "54bd146d695f25d3bd8f2c563226b505", "sha256": "d1f29c38a2178e188c6cc197e54710378fc60b05025696ed0ab4492fa5bcf6ff"}, "downloads": -1, "filename": "pocketsphinx-fork-1.0.0.tar.gz", "has_sig": false, "md5_digest": "54bd146d695f25d3bd8f2c563226b505", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29095437, "upload_time": "2019-06-11T08:11:16", "upload_time_iso_8601": "2019-06-11T08:11:16.370483Z", "url": "https://files.pythonhosted.org/packages/ad/fa/aa4098478dc488b935bcba0a87ca69ded86ec01f800915ae0f34c6bd8418/pocketsphinx-fork-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54bd146d695f25d3bd8f2c563226b505", "sha256": "d1f29c38a2178e188c6cc197e54710378fc60b05025696ed0ab4492fa5bcf6ff"}, "downloads": -1, "filename": "pocketsphinx-fork-1.0.0.tar.gz", "has_sig": false, "md5_digest": "54bd146d695f25d3bd8f2c563226b505", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29095437, "upload_time": "2019-06-11T08:11:16", "upload_time_iso_8601": "2019-06-11T08:11:16.370483Z", "url": "https://files.pythonhosted.org/packages/ad/fa/aa4098478dc488b935bcba0a87ca69ded86ec01f800915ae0f34c6bd8418/pocketsphinx-fork-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:10 2020"}