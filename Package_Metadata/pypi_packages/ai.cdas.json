{"info": {"author": "Alexey Isavnin", "author_email": "alexey.isavnin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "AI.CDAS: python interface to `CDAS <http://cdaweb.gsfc.nasa.gov/>`_ data\n=========================================================================\n\nThis library provides access to CDAS database from python in a simple and fluid way through `CDAS REST api <http://cdaweb.gsfc.nasa.gov/WebServices/REST/>`_. It fetches the data either in `CDF (Common Data Format) <http://cdf.gsfc.nasa.gov/>`_ or ASCII format and returns it in the form of dictionaries of numpy arrays.\n\nThe full documentation is available at `aicdas.rtfd.io <http://aicdas.rtfd.io>`_.\n\nGetting started\n===============\n\nDependencies\n------------\n\n-  Python 3\n-  `numpy <http://www.numpy.org/>`_\n-  `requests <http://docs.python-requests.org/en/latest/>`_\n-  `wget <https://pypi.python.org/pypi/wget>`_\n\nExtra dependencies (at least one of the following)\n--------------------------------------------------\n\n-  `astropy <http://www.astropy.org/>`_\n-  `CDF <http://cdf.gsfc.nasa.gov/>`_ +\n   `spacepy <http://spacepy.lanl.gov/doc/index.html>`_\n\nInstallation\n------------\n\nStarting from version 1.2.0 AI.CDAS officially supports only Python 3, so make sure that you have a working isntallation of it.\n\nAssuming the above requirement is satisfied install the package with Python package manager::\n\n    $ pip install ai.cs\n\nKnown issues\n------------\n\nNASA CDAS REST API endpoint currently does not support IPv6 addressing. However, newer linux distros (for example, Ubuntu 16.04) are set up to prefer IPv6 addressing over IPv4 by default. This may result in unneeded delays in communication with server and data polling. If you experience the issue it might be that is the case with your system. Here is how it can be cured on Ubuntu 16.04::\n\n    $ sudoedit /etc/gai.conf\n    # Uncomment the line\n    # precedence ::ffff:0:0/96  100\n\nNow you machine will try IPv4 prior to IPv6. For other distros refer to respective docs. \n\nExamples\n--------\n\n**Example 1**: Retrieving observatory groups and associated instruments which measure plasma and solar wind:\n\n.. code-block:: python\n\n    from ai import cdas\n    import json # for pretty output\n\n    obsGroupsAndInstruments = cdas.get_observatory_groups_and_instruments(\n        'istp_public',\n        instrumentType='Plasma and Solar Wind'\n    )\n    print(json.dumps(obsGroupsAndInstruments, indent=4))\n\n**Example 2**: Getting STEREO-A datasets using regular expressions for dataset id and label:\n\n.. code-block:: python\n\n    from ai import cdas\n    import json # for pretty output\n\n    datasets = cdas.get_datasets(\n        'istp_public',\n        idPattern='STA.*',\n        labelPattern='.*STEREO.*'\n    )\n    print(json.dumps(datasets, indent=4))\n\n**Example 3**: Fetching a list of variables in one of STEREO datasets:\n\n.. code-block:: python\n\n    from ai import cdas\n    import json # for pretty output\n\n    variables = cdas.get_variables('istp_public', 'STA_L1_MAGB_RTN')\n    print(json.dumps(variables, indent=4))\n\n**Example 4**: This snippet of code gets magnetic field data from STEREO-A spacecraft for one hour of 01.01.2010 and plots it (requires matplotlib):\n\n.. code-block:: python\n\n    from ai import cdas\n    from datetime import datetime\n    from matplotlib import pyplot as plt\n\n    data = cdas.get_data(\n        'sp_phys',\n        'STA_L1_MAG_RTN',\n        datetime(2010, 1, 1),\n        datetime(2010, 1, 1, 0, 59, 59),\n        ['BFIELD']\n    )\n    plt.plot(data['EPOCH'], data['BTOTAL'])\n    plt.show()\n\n**Example 5**: This snippet of code gets magnetic field data from STEREO-A spacecraft for one hour of 01.01.2010 and plots it (requires matplotlib). The data are downloaded in CDF format in this case. CDF format is binary and results in a much smaller filesize and hence faster downloads. In order for this to work you have to have NASA CDF library on your machine and spacepy installed afterwards:\n\n.. code-block:: python\n\n    from ai import cdas\n    from datetime import datetime\n    from matplotlib import pyplot as plt\n\n    data = cdas.get_data(\n        'sp_phys',\n        'STA_L1_MAG_RTN',\n        datetime(2010, 1, 1),\n        datetime(2010, 1, 1, 0, 59, 59),\n        ['BFIELD'],\n        cdf=True # download data in CDF format\n    )\n    # Note that variables identifiers are different than in the previous\n    # example. It often the case with CDAS data. You should check the\n    # variables names by printing out `data` dictionary.\n    plt.plot(data['Epoch'], data['BFIELD'][:, 3])\n    plt.show()\n\n**Example 6**: This snippet of code gets magnetic field data from STEREO-A spacecraft for 01.01.2010 and saves it to cache directory. The next time the same data is requested it is taken from cache without downloading:\n\n.. code-block:: python\n\n    import os\n    from ai import cdas\n    from datetime import datetime\n\n    # For the sake of example we are using your current working\n    # directory as a cache directory\n    cache_dir = os.getcwd()\n    cdas.set_cache(True, cache_dir)\n    # this data is downloaded from CDAS\n    data = cdas.get_data(\n        'sp_phys',\n        'STA_L1_MAG_RTN',\n        datetime(2010, 1, 1),\n        datetime(2010, 1, 1, 0, 59, 59),\n        ['BFIELD']\n    )\n    # this data is taken from cache\n    data = cdas.get_data(\n        'sp_phys',\n        'STA_L1_MAG_RTN',\n        datetime(2010, 1, 1),\n        datetime(2010, 1, 1, 0, 59, 59),\n        ['BFIELD']\n    )\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/isavnin/ai.cdas", "keywords": "coordinated data analysis web cdaweb cdas spdf research space physics data facility nasa science", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ai.cdas", "package_url": "https://pypi.org/project/ai.cdas/", "platform": "", "project_url": "https://pypi.org/project/ai.cdas/", "project_urls": {"Homepage": "https://bitbucket.org/isavnin/ai.cdas"}, "release_url": "https://pypi.org/project/ai.cdas/1.2.3/", "requires_dist": ["numpy", "requests", "wget", "astropy", "spacepy ; extra == 'cdf'"], "requires_python": "", "summary": "Python interface to CDAS data via REST API", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ai-cdas-python-interface-to-cdas-data\">\n<h2>AI.CDAS: python interface to <a href=\"http://cdaweb.gsfc.nasa.gov/\" rel=\"nofollow\">CDAS</a> data</h2>\n<p>This library provides access to CDAS database from python in a simple and fluid way through <a href=\"http://cdaweb.gsfc.nasa.gov/WebServices/REST/\" rel=\"nofollow\">CDAS REST api</a>. It fetches the data either in <a href=\"http://cdf.gsfc.nasa.gov/\" rel=\"nofollow\">CDF (Common Data Format)</a> or ASCII format and returns it in the form of dictionaries of numpy arrays.</p>\n<p>The full documentation is available at <a href=\"http://aicdas.rtfd.io\" rel=\"nofollow\">aicdas.rtfd.io</a>.</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<ul>\n<li>Python 3</li>\n<li><a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"http://docs.python-requests.org/en/latest/\" rel=\"nofollow\">requests</a></li>\n<li><a href=\"https://pypi.python.org/pypi/wget\" rel=\"nofollow\">wget</a></li>\n</ul>\n</div>\n<div id=\"extra-dependencies-at-least-one-of-the-following\">\n<h3>Extra dependencies (at least one of the following)</h3>\n<ul>\n<li><a href=\"http://www.astropy.org/\" rel=\"nofollow\">astropy</a></li>\n<li><a href=\"http://cdf.gsfc.nasa.gov/\" rel=\"nofollow\">CDF</a> +\n<a href=\"http://spacepy.lanl.gov/doc/index.html\" rel=\"nofollow\">spacepy</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Starting from version 1.2.0 AI.CDAS officially supports only Python 3, so make sure that you have a working isntallation of it.</p>\n<p>Assuming the above requirement is satisfied install the package with Python package manager:</p>\n<pre>$ pip install ai.cs\n</pre>\n</div>\n<div id=\"known-issues\">\n<h3>Known issues</h3>\n<p>NASA CDAS REST API endpoint currently does not support IPv6 addressing. However, newer linux distros (for example, Ubuntu 16.04) are set up to prefer IPv6 addressing over IPv4 by default. This may result in unneeded delays in communication with server and data polling. If you experience the issue it might be that is the case with your system. Here is how it can be cured on Ubuntu 16.04:</p>\n<pre>$ sudoedit /etc/gai.conf\n# Uncomment the line\n# precedence ::ffff:0:0/96  100\n</pre>\n<p>Now you machine will try IPv4 prior to IPv6. For other distros refer to respective docs.</p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p><strong>Example 1</strong>: Retrieving observatory groups and associated instruments which measure plasma and solar wind:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cdas</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span> <span class=\"c1\"># for pretty output</span>\n\n<span class=\"n\">obsGroupsAndInstruments</span> <span class=\"o\">=</span> <span class=\"n\">cdas</span><span class=\"o\">.</span><span class=\"n\">get_observatory_groups_and_instruments</span><span class=\"p\">(</span>\n    <span class=\"s1\">'istp_public'</span><span class=\"p\">,</span>\n    <span class=\"n\">instrumentType</span><span class=\"o\">=</span><span class=\"s1\">'Plasma and Solar Wind'</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">obsGroupsAndInstruments</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Example 2</strong>: Getting STEREO-A datasets using regular expressions for dataset id and label:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cdas</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span> <span class=\"c1\"># for pretty output</span>\n\n<span class=\"n\">datasets</span> <span class=\"o\">=</span> <span class=\"n\">cdas</span><span class=\"o\">.</span><span class=\"n\">get_datasets</span><span class=\"p\">(</span>\n    <span class=\"s1\">'istp_public'</span><span class=\"p\">,</span>\n    <span class=\"n\">idPattern</span><span class=\"o\">=</span><span class=\"s1\">'STA.*'</span><span class=\"p\">,</span>\n    <span class=\"n\">labelPattern</span><span class=\"o\">=</span><span class=\"s1\">'.*STEREO.*'</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">datasets</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Example 3</strong>: Fetching a list of variables in one of STEREO datasets:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cdas</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span> <span class=\"c1\"># for pretty output</span>\n\n<span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"n\">cdas</span><span class=\"o\">.</span><span class=\"n\">get_variables</span><span class=\"p\">(</span><span class=\"s1\">'istp_public'</span><span class=\"p\">,</span> <span class=\"s1\">'STA_L1_MAGB_RTN'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">variables</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Example 4</strong>: This snippet of code gets magnetic field data from STEREO-A spacecraft for one hour of 01.01.2010 and plots it (requires matplotlib):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cdas</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cdas</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span>\n    <span class=\"s1\">'sp_phys'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'STA_L1_MAG_RTN'</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">),</span>\n    <span class=\"p\">[</span><span class=\"s1\">'BFIELD'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'EPOCH'</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'BTOTAL'</span><span class=\"p\">])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Example 5</strong>: This snippet of code gets magnetic field data from STEREO-A spacecraft for one hour of 01.01.2010 and plots it (requires matplotlib). The data are downloaded in CDF format in this case. CDF format is binary and results in a much smaller filesize and hence faster downloads. In order for this to work you have to have NASA CDF library on your machine and spacepy installed afterwards:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cdas</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cdas</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span>\n    <span class=\"s1\">'sp_phys'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'STA_L1_MAG_RTN'</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">),</span>\n    <span class=\"p\">[</span><span class=\"s1\">'BFIELD'</span><span class=\"p\">],</span>\n    <span class=\"n\">cdf</span><span class=\"o\">=</span><span class=\"kc\">True</span> <span class=\"c1\"># download data in CDF format</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Note that variables identifiers are different than in the previous</span>\n<span class=\"c1\"># example. It often the case with CDAS data. You should check the</span>\n<span class=\"c1\"># variables names by printing out `data` dictionary.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'Epoch'</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'BFIELD'</span><span class=\"p\">][:,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Example 6</strong>: This snippet of code gets magnetic field data from STEREO-A spacecraft for 01.01.2010 and saves it to cache directory. The next time the same data is requested it is taken from cache without downloading:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cdas</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"c1\"># For the sake of example we are using your current working</span>\n<span class=\"c1\"># directory as a cache directory</span>\n<span class=\"n\">cache_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n<span class=\"n\">cdas</span><span class=\"o\">.</span><span class=\"n\">set_cache</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cache_dir</span><span class=\"p\">)</span>\n<span class=\"c1\"># this data is downloaded from CDAS</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cdas</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span>\n    <span class=\"s1\">'sp_phys'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'STA_L1_MAG_RTN'</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">),</span>\n    <span class=\"p\">[</span><span class=\"s1\">'BFIELD'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># this data is taken from cache</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cdas</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span>\n    <span class=\"s1\">'sp_phys'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'STA_L1_MAG_RTN'</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">),</span>\n    <span class=\"p\">[</span><span class=\"s1\">'BFIELD'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6081611, "releases": {"1.0.0": [], "1.0.1": [{"comment_text": "", "digests": {"md5": "fa0f47fe83dfe1bd153de6e30bc1bc47", "sha256": "4ebefaeb956bb5eab081f47ed9052e86554af98553dd554dcaaa025a34853f88"}, "downloads": -1, "filename": "ai.cdas-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "fa0f47fe83dfe1bd153de6e30bc1bc47", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9555, "upload_time": "2015-10-20T09:39:57", "upload_time_iso_8601": "2015-10-20T09:39:57.662880Z", "url": "https://files.pythonhosted.org/packages/75/62/94fa33a62f2b0a5bdfd4a38ae5a5bc6c1f6f8ce8bec384ca2f929aa3baea/ai.cdas-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76ba89fc49736ee081975dc378499217", "sha256": "740e819ddf80a9cf17908bc1bb5b37f082779cc010a96fa2b500065834298444"}, "downloads": -1, "filename": "ai.cdas-1.0.1.tar.gz", "has_sig": false, "md5_digest": "76ba89fc49736ee081975dc378499217", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7184, "upload_time": "2015-10-20T09:40:11", "upload_time_iso_8601": "2015-10-20T09:40:11.578362Z", "url": "https://files.pythonhosted.org/packages/c9/8d/fd00a6114a2c38318d899a2d524b64cf8568e1ad2e11689f6bb5c21f79d7/ai.cdas-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "31cef231b79b594039a546584241ede4", "sha256": "8e1eaf3b054d16bcfcc95568ecdd7acc988c82d5fe61038d61ec0bdbba934d39"}, "downloads": -1, "filename": "ai.cdas-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "31cef231b79b594039a546584241ede4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10832, "upload_time": "2016-01-20T09:44:37", "upload_time_iso_8601": "2016-01-20T09:44:37.398379Z", "url": "https://files.pythonhosted.org/packages/cc/c3/99b28ff99416a2e3cc07fb2d4a6a411bc23643f114c041a2c6d587907810/ai.cdas-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a9ec0f992d4cbf55483572bd0eeba84", "sha256": "cd62cf792bbb76ea0919403a99ea61bffb7ca2ffea994701ceb79662bbb1311d"}, "downloads": -1, "filename": "ai.cdas-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0a9ec0f992d4cbf55483572bd0eeba84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9734, "upload_time": "2016-01-20T09:44:46", "upload_time_iso_8601": "2016-01-20T09:44:46.635585Z", "url": "https://files.pythonhosted.org/packages/00/0a/daf624f7a1c27f355a738e3e9c5f11ba345d9b765445ccc79f8f9edd2449/ai.cdas-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "89c22b14b68d7c63d0f32c8cc4e884ae", "sha256": "09a4db4d71438881083f6ee2fab31af8cb356f4f999fecc7ca7b352cd1a91d79"}, "downloads": -1, "filename": "ai.cdas-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "89c22b14b68d7c63d0f32c8cc4e884ae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11201, "upload_time": "2016-02-05T13:37:35", "upload_time_iso_8601": "2016-02-05T13:37:35.210321Z", "url": "https://files.pythonhosted.org/packages/f7/b8/ca7251f174fb30ad05eb62e419700591f74102b461d61737456a91292757/ai.cdas-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bf953c92f619706e7d6c1aa3be8939d", "sha256": "4bee8c7e2033dfebfdf1671eea6f3bc4cbc08e3c407ef0df5c9ee4c6adc1ea04"}, "downloads": -1, "filename": "ai.cdas-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0bf953c92f619706e7d6c1aa3be8939d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10181, "upload_time": "2016-02-05T13:37:41", "upload_time_iso_8601": "2016-02-05T13:37:41.468785Z", "url": "https://files.pythonhosted.org/packages/32/63/3a91dae3051398f8e673acb2f1d6cafe31146a828e9965878f3bf0d1e04e/ai.cdas-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bca295e86942e679ea7dafa51fbf4f53", "sha256": "17e135b999e23cb1342331fdfd99812dc72f8607832d8f8fe4b38dac28d24554"}, "downloads": -1, "filename": "ai.cdas-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bca295e86942e679ea7dafa51fbf4f53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8890, "upload_time": "2017-12-20T19:17:13", "upload_time_iso_8601": "2017-12-20T19:17:13.502077Z", "url": "https://files.pythonhosted.org/packages/4e/36/87e43657090572f693bf9d315a4d4c04d295f9a25e57498557e8cd5ea68c/ai.cdas-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45d71a3f51bda2bb8fab37d10d44ec6b", "sha256": "db048440c65178f798edd851df02cedae81c179bd6e5857045d552491a5b71cf"}, "downloads": -1, "filename": "ai.cdas-1.2.0.tar.gz", "has_sig": false, "md5_digest": "45d71a3f51bda2bb8fab37d10d44ec6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6170, "upload_time": "2017-12-20T19:17:14", "upload_time_iso_8601": "2017-12-20T19:17:14.401437Z", "url": "https://files.pythonhosted.org/packages/f0/25/ffe69451e260d3fe6b2218d44ff78d570c2214068d46e3536da8199f3623/ai.cdas-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "ca0c950bedf086addd9c727f5161bb57", "sha256": "e71d3cbca0f2df41ddf0ec728687dea9a2bdf33be95e175243dad0c56e5e2d5e"}, "downloads": -1, "filename": "ai.cdas-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ca0c950bedf086addd9c727f5161bb57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8825, "upload_time": "2017-12-20T19:54:44", "upload_time_iso_8601": "2017-12-20T19:54:44.740198Z", "url": "https://files.pythonhosted.org/packages/b4/b0/c244076e6b601c8fcf7891863fdad571ba8abb462681d09645884580609e/ai.cdas-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09292f48a4d2d35b81459d9c70a93667", "sha256": "eb206b04b4b52fb39e91ba6923d48a1b702ca2822515d83eafa5302a64dc2af4"}, "downloads": -1, "filename": "ai.cdas-1.2.1.tar.gz", "has_sig": false, "md5_digest": "09292f48a4d2d35b81459d9c70a93667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6111, "upload_time": "2017-12-20T19:54:46", "upload_time_iso_8601": "2017-12-20T19:54:46.061736Z", "url": "https://files.pythonhosted.org/packages/5f/69/a6e1226c5db8d3201c97167d6e9ded2c45f58f028ba4102e7a73cb12fb75/ai.cdas-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "98cc79a22fe8be6d70368120928f731e", "sha256": "03d4e22e2377050f01492a6db3f14f33929d86b7ff122a7337a0906e3a0d6c6e"}, "downloads": -1, "filename": "ai.cdas-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "98cc79a22fe8be6d70368120928f731e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5890, "upload_time": "2019-11-05T16:01:41", "upload_time_iso_8601": "2019-11-05T16:01:41.674035Z", "url": "https://files.pythonhosted.org/packages/29/cf/685ce16843938d244f6719370bacbf4494426c0c84d0b32ac2aa4b101cb5/ai.cdas-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2334b74060fefc388a7d0c4ae89b9159", "sha256": "cf6a7e474fa62c9cd2183d7ce371b52755788ab3043041349009e58fffe462b1"}, "downloads": -1, "filename": "ai.cdas-1.2.2.tar.gz", "has_sig": false, "md5_digest": "2334b74060fefc388a7d0c4ae89b9159", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6063, "upload_time": "2019-11-05T16:01:43", "upload_time_iso_8601": "2019-11-05T16:01:43.047301Z", "url": "https://files.pythonhosted.org/packages/ad/cc/7f0616911bd83e81037493ba4d63836a59310c5dc4f37c283d837d061b46/ai.cdas-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "e0921482ace8662de90c72a12e63cddf", "sha256": "62ef31a7afc807158bd9d944aeb7f5f59293798b232116130e45c3e9a78b26e0"}, "downloads": -1, "filename": "ai.cdas-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e0921482ace8662de90c72a12e63cddf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5900, "upload_time": "2019-11-05T16:17:41", "upload_time_iso_8601": "2019-11-05T16:17:41.707529Z", "url": "https://files.pythonhosted.org/packages/06/96/c970242f219b764ebb093b0896733227584f7a81e02d2f8e9b8eaaf9d889/ai.cdas-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e4b477adfd83497af44c9b24b879873", "sha256": "1e93c3f6f667496a6b265ab3df0f8a72c7b2aefe12ee70590584f62460fe36ca"}, "downloads": -1, "filename": "ai.cdas-1.2.3.tar.gz", "has_sig": false, "md5_digest": "0e4b477adfd83497af44c9b24b879873", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6074, "upload_time": "2019-11-05T16:17:43", "upload_time_iso_8601": "2019-11-05T16:17:43.406869Z", "url": "https://files.pythonhosted.org/packages/8a/b3/536cc3c794353f13a405c3ede03d93efe2b920076babb1efbf6e3327068a/ai.cdas-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e0921482ace8662de90c72a12e63cddf", "sha256": "62ef31a7afc807158bd9d944aeb7f5f59293798b232116130e45c3e9a78b26e0"}, "downloads": -1, "filename": "ai.cdas-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e0921482ace8662de90c72a12e63cddf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5900, "upload_time": "2019-11-05T16:17:41", "upload_time_iso_8601": "2019-11-05T16:17:41.707529Z", "url": "https://files.pythonhosted.org/packages/06/96/c970242f219b764ebb093b0896733227584f7a81e02d2f8e9b8eaaf9d889/ai.cdas-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e4b477adfd83497af44c9b24b879873", "sha256": "1e93c3f6f667496a6b265ab3df0f8a72c7b2aefe12ee70590584f62460fe36ca"}, "downloads": -1, "filename": "ai.cdas-1.2.3.tar.gz", "has_sig": false, "md5_digest": "0e4b477adfd83497af44c9b24b879873", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6074, "upload_time": "2019-11-05T16:17:43", "upload_time_iso_8601": "2019-11-05T16:17:43.406869Z", "url": "https://files.pythonhosted.org/packages/8a/b3/536cc3c794353f13a405c3ede03d93efe2b920076babb1efbf6e3327068a/ai.cdas-1.2.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:11 2020"}