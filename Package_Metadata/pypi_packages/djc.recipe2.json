{"info": {"author": "Simone Deponti", "author_email": "simone.deponti@abstract.it", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Topic :: Software Development :: Build Tools"], "description": ".. contents::\n\nThis recipe allows you to setup a Django project through `zc.buildout`_.\n\nUsage\n*****\n\nIn order to use this recipe, create a buildout as follows::\n\n    [buildout]\n    parts =\n        myproject\n\n    [myproject]\n    recipe = djc.recipe2\n\nAnd then create a python module in ``sites/<part_name>_site_config``\ncontaining the ``settings.py`` file.\n\nThe buildout will take care of creating a manage script at ``bin/django``\nand a *WSGI* app to serve the project in production\nat ``parts/myproject/myproject_part_site/wsgi.py``.\n\nIn our example, this will result in the following file structure::\n\n    <buildout_root>\n    |\n    |- bin\n    |  |\n    |  |- ...\n    |  |\n    |  |- django # the manage.py script\n    |\n    |- ...\n    |\n    |- parts\n    |  |\n    |  |- myproject\n    |     |\n    |     |- myproject_part_site # put this on PYTHONPATH when serving via WSGI\n    |        |\n    |        |- __init__.py\n    |        |\n    |        |- ...\n    |        |\n    |        |- wsgi.py # WSGI app and paster app factory\n    |\n    |- ...\n    |\n    |- sites\n    |  |\n    |  |- myproject_site_config\n    |     |\n    |     |- __init__.py # void\n    |     |\n    |     |- settings.py # your settings here\n    |\n    |- ...\n\nFor all the options and detailed documentation, see below.\n\nRunning tests\n*************\n\nThe ``recipe.rst`` file located within the package also acts as main doctest.\n\nTo run the tests, check out the source,\nand then bootstrap and run the buildout::\n\n    $ python bootstrap.py\n    $ bin/buildout\n\nIf it's a fresh checkout you should also run::\n\n    $ ./makecache.sh\n\nThis command should be run just once after checking out:\nit will download certain packages needed for the tests\nso that they can run offline.\n\nIt should also be re-run if ``makecache.sh`` has changed.\n\nThen you can run the tests using::\n\n    $ bin/test\n\nLinks\n*****\n\n.. image:: https://secure.travis-ci.org/abstract-open-solutions/djc.recipe2.png\n\n- Code repository: http://github.com/abstract-open-solutions/djc.recipe2\n- Discussions at https://groups.google.com/group/djcrecipe\n- Comments and questions at info@abstract.it\n\n.. _`zc.buildout`: http://www.buildout.org/\n\n\nDetailed documentation\n**********************\n\nBasic usage\n===========\n\nThe basic thing you have to do in order to have a Django_ site\nis to provide it some configuration.\n\nIn Django_, configuration is achieved by creating a set of global variables\nin a `settings module`_ and letting Django_ know which is the\nsettings module to use.\n\nThis recipe, in its basic functioning, adopts a *convention over configuration*\napproach to the matter.\n\n.. note::\n   It is also possible to use other approaches,\n   as explained in `External settings`_.\n\nTherefore, all the configurations for all the Django_ parts in your buildout **must** be places within a ``sites`` directory located in your buildout root.\n\nWithin this directory, a *python module* (create an empty ``__init__.py``!)\nnamed ``<part_name>_site_config`` must be created, and within it,\na ``settings.py`` file containing your settings must be placed.\n\nFor example, if our Django_ part is named ``myproject``\n(we are referring to the buildout part name here),\nwe would do the following::\n\n    >>> mkdir('sites')\n    >>> mkdir('sites', 'myproject_site_config')\n    >>> write('sites', 'myproject_site_config', '__init__.py',\n    ...       '#\\n')\n    >>> write('sites', 'myproject_site_config', 'settings.py', '''\n    ... SPAM = 'eggs'\n    ... ''')\n\nOkay, that settings file is not exactly a good one,\nbut it will suffice for now as an example.\n\nLet's now create our buildout and run it::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n\nAs you can see, the part for now contains only the recipe, as it will work\n*out of the box* without further meddling if we adhere to its conventions.\n\nLet's see what the buildout did. To start with, it created a ``django`` binary\nwithin ``bin`` that is the equivalent of Django's ``manage.py``\n(which means you can invoke it exactly like you would with ``manage.py``)::\n\n    >>> ls('bin')\n    -  buildout\n    -  django\n\n.. note::\n   Ofcourse, since the binary name is always ``django``,\n   this will cause problems if you have more than one Django_ part\n   in your buildout:\n   this is solved by the `manage-py-file`_ option\n   explained in the `Options reference`_.\n\nThe next thing the buildout did is to create yet another python module\n(in ``parts/<part_name>``)::\n\n    >>> ls('parts', 'myproject')\n    d  myproject_part_site\n    >>> ls('parts', 'myproject', 'myproject_part_site')\n    -  __init__.py\n    -  settings.py\n    -  wsgi.py\n\n**Another** python module?\n\nYes, because unlike the first one, this is under buildout's strict control,\nand generated each time you run ``bin/buildout``\n(therefore, it is a *very bad idea* to edit those files,\nbecause your changes won't be kept).\n\nIn this module, we have again a ``settings.py`` file, plus a ``wsgi.py`` file.\nWe will look at the latter in more detail in `Going production`_: the first,\ninstead, is the actual settings module that will be loaded by Django_.\n\nSo what about the settings we defined earlier? Do not fear,\nbecause the buildout created ``settings.py`` will import the module you wrote\nand add to it the ``SECRET_KEY`` setting::\n\n    >>> cat('parts', 'myproject', 'myproject_part_site', 'settings.py')\n    from myproject_site_config.settings import *\n    <BLANKLINE>\n    SECRET_KEY = \"...\"\n    <BLANKLINE>\n    <BLANKLINE>\n\nThis (slightly convoluted) setup exists because a poorly chosen ``SECRET_KEY``\ncan become a security problem (and quite a big one, for pathological cases).\n\nSince it's way too easy to pick a simple one\n(maybe because we can't be bothered to come up with a decent one)\nand even more easy to forget to change it between\ndevelopment and production environment,\nthis recipe generates a long, random key for you.\n\nThis way you can safely omit ``SECRET_KEY`` within your ``settings.py`` file\nand at the same time be completely secure.\n\nThis key is generated only once and is kept\nthrough the various runs of ``bin/buildout``.\nThis is possible because the recipe will first look\nwhether a ``.secret.cfg`` file exists in the buildout root:\nif it exists, it will read it and extract the key from there\n(the file contents are the key itself and a newline).\nIf it doesn't exist, it will generate a new key and write it there.\nTherefore, as long as a ``.secret.cfg`` file exists,\nthe recipe will use the same key throughout the various runs\nof ``bin/buildout``.\n\nProof of the fact is that a ``.secret.cfg`` file exists in our buildout::\n\n    >>> isfile('.secret.cfg')\n    True\n\nComplete example\n----------------\n\nLet's now put into our settings file (``myproject_site_config/settings.py``)\nsome more sane values::\n\n    >>> write('sites', 'myproject_site_config', 'settings.py', '''\n    ... DATABASES = {\n    ...     'default': {\n    ...         'ENGINE': 'django.db.backends.sqlite3',\n    ...         'NAME': 'storage.db'\n    ...     }\n    ... }\n    ... TIME_ZONE = 'Europe/Rome'\n    ... ''')\n\nNow, in order for these settings to take effect,\nwe don't have to re-run buildout,\nas the import that the generated file does will pick them up::\n\n    >>> print system('bin/django diffsettings')\n    DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'storage.db'}}\n    SECRET_KEY = '...'\n    SETTINGS_MODULE = 'myproject_part_site.settings'  ###\n    TIME_ZONE = 'Europe/Rome'\n\nSeems like it worked!\n\nWe decided to put the database in a *SQLite* file named ``storage.db``,\nwhich currently doesn't exist::\n\n    >>> isfile('storage.db')\n    False\n\nLet's now tell Django_ to create the database::\n\n    >>> print system('bin/django syncdb --noinput')\n    Creating tables ...\n    Installing custom SQL ...\n    Installing indexes ...\n    Installed 0 object(s) from 0 fixture(s)\n    <BLANKLINE>\n\nAnd we will see that the database has been created::\n\n    >>> isfile('storage.db')\n    True\n\nDebug mode\n----------\n\nWe can now start developing but, sooner or later,\nwe'll recognize that we haven't set ``DEBUG = True``,\nwhich is fundamental `if your name is not Donald Knuth`_.\n\nWe could add it straight away in ``myproject_site_config/settings.py``,\nbut that might cause problems when we're `Going production`_,\nbecause you definitely want to have ``DEBUG`` and its sisters off\nwhen you're out in the open.\n\nTherefore, another option that we have is to do the following::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... settings-override =\n    ...     DEBUG = True\n    ...     TEMPLATE_DEBUG = True\n    ... ''')\n\nAnything that we put in ``settings-override`` will be appended\nat the end of the buildout-generated ``settings.py``\n(treated as a string, so beware that no correctness checking\nis performed).\nThis allows us to quickly differentiate production and development buildouts\nwithout having the need to come up with two different ``settings.py`` files\n(one for production and one for development).\n\nIf we re-run the buildout and look at the results,\nwe will see that we are now in debug mode::\n\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> cat('parts', 'myproject', 'myproject_part_site', 'settings.py')\n    from myproject_site_config.settings import *\n    <BLANKLINE>\n    SECRET_KEY = \"...\"\n    <BLANKLINE>\n    DEBUG = True\n    TEMPLATE_DEBUG = True\n    <BLANKLINE>\n    >>> print system('bin/django diffsettings')\n    DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'storage.db'}}\n    DEBUG = True\n    SECRET_KEY = '...'\n    SETTINGS_MODULE = 'myproject_part_site.settings'  ###\n    TEMPLATE_DEBUG = True\n    TIME_ZONE = 'Europe/Rome'\n\n.. note::\n   Since this gets appended to the file, be careful that\n   if you do define *and* reference ``DEBUG`` (or any other variable)\n   within the ``settings.py`` file in your full control,\n   our setting it *afterwards* will not affect its value\n   within *your* ``settings.py``.\n   So if in your ``settings.py`` you do ``DEBUG = False``\n   and ``FOOBAR = False``, ``FOOBAR`` will always be false.\n\nOf course, this is not limited to ``DEBUG``, you can use it for example\nto override the ``DATABASES``, ``LOGGING`` and ``CACHES`` settings\nin the production environment without having to create\na whole new ``settings.py`` file.\n\n.. note::\n   Due to buildout's limitations, indentation of ``settings-override``\n   is completely lost. Therefore don't do ``if`` or more complex stuff:\n   if you need to, check out `Advanced usage`_\n\nGoing production\n----------------\n\nAs we saw above, if our development setup doesn't differ too much\nfrom our production setup\n(save for the fact that we use a real cache, a more complex RDBMS, etc)\nthen we can use ``settings-override`` to manage it::\n\n    >>> mkdir('var')\n    >>> mkdir('var', 'log')\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... settings-override =\n    ...     DATABASES = {\n    ...         'default': {\n    ...             'ENGINE': 'django.db.backends.postgresql_psycopg2',\n    ...             'HOST': 'localhost',\n    ...             'PORT': '5432',\n    ...             'NAME': 'mydb',\n    ...             'USER': 'mydb',\n    ...             'PASSWORD': 'secret'\n    ...         }\n    ...     }\n    ...     CACHES = {\n    ...         'default': {\n    ...             'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n    ...             'LOCATION': '127.0.0.1:11211',\n    ...         }\n    ...     }\n    ...     LOGGING = {\n    ...         'version': 1,\n    ...         'disable_existing_loggers': True,\n    ...         'root': { 'level': 'WARNING', 'handlers': ['logfile'], },\n    ...         'formatters': {\n    ...             'verbose': {\n    ...                 'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'\n    ...             },\n    ...         },\n    ...         'handlers': {\n    ...             'logfile': {\n    ...                 'level': 'ERROR',\n    ...                 'class': 'logging.handlers.RotatingFileHandler',\n    ...                 'filename': 'var/log/myproject.log',\n    ...                 'maxBytes': 1024,\n    ...                 'backupCount': 3,\n    ...             },\n    ...             'console': {\n    ...                 'level': 'DEBUG',\n    ...                 'class': 'logging.StreamHandler',\n    ...                 'formatter': 'verbose'\n    ...             }\n    ...         },\n    ...         'loggers': {\n    ...             'django.db.backends': {\n    ...                 'level': 'ERROR',\n    ...                 'handlers': ['console'],\n    ...                 'propagate': False,\n    ...             },\n    ...         },\n    ...     }\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> print system('bin/django diffsettings')\n    CACHES = ...\n    DATABASES = ...\n    LOGGING = ...\n    SECRET_KEY = '...'\n    SETTINGS_MODULE = 'myproject_part_site.settings'  ###\n    TIME_ZONE = 'Europe/Rome'\n\nThis is actually a quite complete (albeit basic) production example,\nand it can still be managed quite well within the buildout.\n\nIf we do have more complex cases, however,\nit's probably better to use `External settings`_.\n\nChanging the binary name\n------------------------\n\nAs we have said before, the name of the generated binary is always ``django``,\nwithout any suffix or prefix.\n\nThe rational for this choice is the following:\n\n  #. Having the script named ``django`` and it being the same\n     no matter how you call the buildout part simplifies\n     getting into development a lot\n     (it's always ``bin/django runserver`` after you run the buildout,\n     and you don't have to go and look how it is named\n     in that particular buildout)\n\n  #. Since in production you will just configure your *WSGI* server\n     to use multiple processes, there are very few reasons\n     to have multiple Django_ parts in your buildout\n\nBut if you really need to have multiple parts,\nthe default behaviour will have one part overwrite the other's script.\nThat's when you need to use the `manage-py-file`_ option,\nwhich allows you to provide a different name\n(say, ``django1`` and ``django2``) for the manage script.\n\nFirst we start by copying the settings of our sample project\nto two ned different locations, ``myproject1`` and ``myproject2``::\n\n    >>> copytree(['sites', 'myproject_site_config'],\n    ...          ['sites', 'myproject1_site_config'])\n    >>> copytree(['sites', 'myproject_site_config'],\n    ...          ['sites', 'myproject2_site_config'])\n\nThen we write a buildout that has *two* parts,\n``myproject1`` and ``myproject2``, and run it::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject1\n    ...     myproject2\n    ...\n    ... [myproject1]\n    ... recipe = djc.recipe2\n    ... manage-py-file = django1\n    ...\n    ... [myproject2]\n    ... recipe = djc.recipe2\n    ... manage-py-file = django2\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject1.\n    ...\n    Installing myproject2.\n    ...\n    <BLANKLINE>\n\nAnd we will see that it has created two distinct scripts::\n\n    >>> ls('bin')\n    -  buildout\n    -  django1\n    -  django2\n\n\nAdvanced usage\n==============\n\nCustom initialization\n---------------------\n\nSometimes, you need to do some magic before Django_ loads everything,\nin order to use certain features.\n\nFor example, Pinax_, a very well known social site framework based on Django_,\nneeds you to perform certain ``sys.path`` magic before initialization.\n\nThis kind of customization can be done in two ways:\n\n  #. By performing those in ``settings.py``\n  #. By altering the manage script (and the *WSGI* one, too)\n\nThe first choice might look simpler but it actually hides much more complexity\nthan it is initially visible.\nThe latter is better but, since the script is generated by buildout,\nwe cannot simply edit that file.\n\nBefore looking at how you actually do it, let's make a premise:\nwe can divide this initialization stuff in two main groups.\n\nThe first and more common group is when you simply need\nto set an environment variable: while this can be achieved\nby doing ``$ MYVAR=value bin/django``, it's not exactly handy in the long run.\n\nAnd here comes `environment-vars`_ to the rescue!\n\nLet's look at a concrete example: running Django_ on `Google App Engine`_.\n`Google App Engine`_ requires you to have a ``GOOGLE_APPENGINE_PROJECT_ROOT``\nenvironment variable set, or nothing will work.\n\nTherefore, in order to add it we would write our buildout as follows,\nwith a list of variables and values (separated by space)\nfor each environment variable we want to set::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... environment-vars =\n    ...     GOOGLE_APPENGINE_PROJECT_ROOT /my/path\n    ... ''')\n\nAnd after running it, we can see that the script correctly initializes\nthe environment variable::\n\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> cat('bin', 'django')\n    #!...\n    <BLANKLINE>\n    ...\n    <BLANKLINE>\n    import os\n    os.environ[\"GOOGLE_APPENGINE_PROJECT_ROOT\"] = r\"/my/path\"\n    <BLANKLINE>\n    ...\n    <BLANKLINE>\n    os.environ['DJANGO_SETTINGS_MODULE'] = \"myproject_part_site.settings\"\n    if IS_14_PLUS:\n        execute_from_command_line(sys.argv)\n    else:\n        utility = ManagementUtility(sys.argv)\n        utility.execute()\n\nFor the second case, the `initialization`_ option is provided:\nthis allows you to write (in a format similar to doctest)\nthe python code that you need to be executed before Django_ starts.\n\n.. note::\n   The slightly funny *doctest syntax* of this option is to overcome\n   a shortcoming of buildout that will otherwise completely lose indentation.\n\nLet's see how we would make sure that Django_ won't start at all\nif ``1 != 1``::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... initialization =\n    ...     >>> if 1 != 1:\n    ...     ...     raise RuntimeError(\"I can't run on quantum computers\")\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> cat('bin', 'django')\n    #!...\n    <BLANKLINE>\n    ...\n    <BLANKLINE>\n    if 1 != 1:\n        raise RuntimeError(\"I can't run on quantum computers\")\n    <BLANKLINE>\n    ...\n    <BLANKLINE>\n    os.environ['DJANGO_SETTINGS_MODULE'] = \"myproject_part_site.settings\"\n    if IS_14_PLUS:\n        execute_from_command_line(sys.argv)\n    else:\n        utility = ManagementUtility(sys.argv)\n        utility.execute()\n\n.. note::\n   I really couldn't come up with a better example\n   that would work in tests without having to bring in loads of crap,\n   but I can assure you this feature **is** useful. Really.\n\nMedia and static\n----------------\n\nThis is a bit of personal preference.\nWhen developing upon work started by someone else,\nI find it utterly irritating that the upload doesn't work because,\nafter checking out and running the buildout, I did not do ``$ mkdir media``.\n\nBecause:\n\n  #. I'm getting old and I tend to forget that\n  #. Sometimes it's not ``media``, but ``var/upload/mediafiles``\n     or something else (yes, we programmers tend to express creativity\n     in the most inopportune ways)\n\nThat's why I've added two options that, while not being on by default,\nI wish you have turned on (atleast one of them)\nif I have to work on your buildout.\n\nThe options are `media-directory`_ and `static-directory`_,\nand their values are the path to the media root and the static root\nrespectively.\nWhen they are set, the buildout will create them if they don't exist\nand then append to the settings module the proper ``MEDIA_ROOT``\nand ``STATIC_ROOT`` setting.\n\nLet's see them in action. First we check that we don't have any\n``static`` or ``media`` directory::\n\n    >>> isdir('media')\n    False\n    >>> isdir('static')\n    False\n\nThen write and run the buildout::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... media-directory = media\n    ... static-directory = static\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n\nAnd then see that we have the directories and the settings::\n\n    >>> isdir('media')\n    True\n    >>> isdir('static')\n    True\n    >>> print system('bin/django diffsettings')\n    DATABASES = ...\n    MEDIA_ROOT = '...'\n    SECRET_KEY = '...'\n    SETTINGS_MODULE = 'myproject_part_site.settings'  ###\n    STATIC_ROOT = '...'\n    TIME_ZONE = 'Europe/Rome'\n\nObviously, you do not need to use them together\nbut they can be used independently.\n\nExternal settings\n-----------------\n\nSometimes, one file for all the settings just ain't enough,\nor it might turn out that `settings-override`_ is not quite handy for you.\n\nThat's why this recipe allows you to use as a settings module anything\nthat's in in ``sys.path``.\n\nFor example, suppose we want to put our production settings\nin a file on its own: we might then create a file\nnamed ``sites/myproject_site_config/production.py``\nand use that as settings module.\n\nFirst, let's create the file::\n\n    >>> write('sites', 'myproject_site_config', 'production.py', '''\n    ... from .settings import *\n    ... TIME_ZONE = 'Europe/London'\n    ... ''')\n\nThen we tell the buildout to use the module\n``myproject_site_config.production`` as settings module\ninstead of the default one, through the `settings-module`_ option::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... settings-module = myproject_site_config.production\n    ... ''')\n\n.. note::\n   The module can be anything in ``sys.path``, but here we reused the\n   same directory because whenever `sites-directory`_ exists\n   and regardless of what's in it, it is put on ``sys.path``.\n   You can ofcourse have the settings module in your project egg\n   or whatever else.\n\nAnd we can then run the buildout and see what happened::\n\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> print system('bin/django diffsettings')\n    DATABASES = ...\n    SECRET_KEY = '...'\n    SETTINGS_MODULE = 'myproject_part_site.settings'  ###\n    TIME_ZONE = 'Europe/London'\n\nAnd as you can see, the changes took effect.\n\nOptions reference\n=================\n\neggs\n----\n\nA list of eggs that the generated scripts must have access to.\nThis typically includes your application eggs and their dependencies,\nif the latter are not explicited within the ``setup.py`` file.\n\nThey can be explicited either as a part option::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... eggs = django-gravatar2\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> cat('bin', 'django')\n    #...\n    <BLANKLINE>\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n        '.../eggs/django_gravatar2-1.0.4-...egg',\n        ...\n        ]\n    <BLANKLINE>\n    ...\n\nOr as a buildout option::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... eggs = django-gravatar2\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> cat('bin', 'django')\n    #...\n    <BLANKLINE>\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n        '.../eggs/django_gravatar2-1.0.4-...egg',\n        ...\n        ]\n    <BLANKLINE>\n    ...\n\nOr both, and they will be merged::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... eggs = South\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... eggs = django-gravatar2\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> cat('bin', 'django')\n    #...\n    <BLANKLINE>\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n        '.../eggs/django_gravatar2-1.0.4-...egg',\n        '.../eggs/South-0.7.5-...egg',\n        ...\n        ]\n    <BLANKLINE>\n    ...\n\nenvironment-vars\n----------------\n\nA list of environment variables to set before execution,\neach separated by newline and in the format ``VAR_NAME value``.\n\nSee `Custom initialization`_ for an example.\n\nextra-paths\n-----------\n\nA list of paths, separated by newline,\nthat should be added to ``sys.path`` before the code is executed\n(allowing the discovery of custom modules).\n\nFor example::\n\n    >>> mkdir('custom_modules')\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... extra-paths =\n    ...     custom_modules\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> cat('bin', 'django')\n    #...\n    <BLANKLINE>\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n        ...\n        '.../custom_modules',\n        ]\n    <BLANKLINE>\n    ...\n\ninitialization\n--------------\n\nPython code, to be formatted like a doctest,\nthat is to be executed before any initialization happens.\n\nSee `Custom initialization`_ for an example.\n\nmanage-py-file\n--------------\n\nThe name of the generated manage script in ``bin``.\n\nSee `Changing the binary name`_ for an example.\n\nsettings-file\n-------------\n\nThe name of the generated settings file\n(the one that's autogenerated by buildout at each run).\n\nThis option can be quite useful to avoid module name clashes::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... settings-file = configuration.py\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> print system('bin/django diffsettings')\n    DATABASES = ...\n    SECRET_KEY = '...'\n    SETTINGS_MODULE = 'myproject_part_site.configuration'  ###\n    TIME_ZONE = 'Europe/Rome'\n\nsettings-module\n---------------\n\nLoads a custom settings module instead of the conventional one.\n\nSee `External settings`_ for an example.\n\nsettings-override\n-----------------\n\nSpecifies some settings (as python code) to be appended\nto the auto-generated settings file and thus overriding the module-defined ones.\n\nSee `Debug mode`_ for an example.\n\nsites-directory\n---------------\n\nChanges the default location of the conventional configuration location\n(normally the ``sites`` directory).\n\nIt will be appended to ``sys.path``::\n\n    >>> copytree(['sites'], ['mysites'])\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... sites-directory = mysites\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> cat('bin', 'django')\n    #...\n    <BLANKLINE>\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n        ...\n        '.../mysites',\n        ]\n    <BLANKLINE>\n    ...\n\nstatic-directory\n----------------\n\nSets the location of ``STATIC_ROOT`` and creates it if missing.\n\nSee `Media and static`_.\n\nmedia-directory\n---------------\n\nSame as `static-directory`_ for ``MEDIA_ROOT``.\n\nwsgi-file\n---------\n\nChanges the name of the file that contains the *WSGI* application.\n\nThe purpose is similar to `settings-file`_::\n\n    >>> write('buildout.cfg', '''\n    ... [buildout]\n    ... parts =\n    ...     myproject\n    ...\n    ... [myproject]\n    ... recipe = djc.recipe2\n    ... wsgi-file = wsgiapp.py\n    ... ''')\n    >>> print \"$ bin/buildout\\n\", system(buildout)\n    $ bin/buildout\n    ...\n    Installing myproject.\n    ...\n    <BLANKLINE>\n    >>> ls('parts', 'myproject', 'myproject_part_site')\n    -  __init__.py\n    -  settings.py\n    -  wsgiapp.py\n\n.. _Django: https://djangoproject.com\n.. _`settings module`: https://docs.djangoproject.com/en/dev/topics/settings/\n.. _`if your name is not Donald Knuth`: http://www-cs-faculty.stanford.edu/~knuth/faq.html\n.. _Pinax: http://pinaxproject.com/\n.. _`Google App Engine`: https://developers.google.com/appengine/\n\nContributors\n************\n\n * Simone Deponti <simone.deponti@abstract.it>, Initial Author\n * Bruno Ripa <bruno.ripa@abstract.it>\n * Mikko Ohtamaa (@moo9000)\n * Dimitri Roche\n\nInital developement sponsored by `Abstract Open Solutions`_\n\n.. _`Abstract Open Solutions`: http://www.abstract.it\n\nChange history\n**************\n\n2.1 (2012-07-02)\n================\n\n- Fixed setuptools-git problem.\n\n\n2.0 (2012-07-02)\n================\n\n- Rewrite from `djc.recipe`_ [Simone Deponti]\n\n\n.. _`djc.recipe`: http://pypi.python.org/pypi/djc.recipe", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/abstract-open-solutions/djc.recipe2", "keywords": "", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "djc.recipe2", "package_url": "https://pypi.org/project/djc.recipe2/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/djc.recipe2/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/abstract-open-solutions/djc.recipe2"}, "release_url": "https://pypi.org/project/djc.recipe2/2.1/", "requires_dist": null, "requires_python": null, "summary": "A Django buildout recipe", "version": "2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#running-tests\" id=\"id5\" rel=\"nofollow\">Running tests</a></li>\n<li><a href=\"#links\" id=\"id6\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#detailed-documentation\" id=\"id7\" rel=\"nofollow\">Detailed documentation</a><ul>\n<li><a href=\"#basic-usage\" id=\"id8\" rel=\"nofollow\">Basic usage</a><ul>\n<li><a href=\"#complete-example\" id=\"id9\" rel=\"nofollow\">Complete example</a></li>\n<li><a href=\"#debug-mode\" id=\"id10\" rel=\"nofollow\">Debug mode</a></li>\n<li><a href=\"#going-production\" id=\"id11\" rel=\"nofollow\">Going production</a></li>\n<li><a href=\"#changing-the-binary-name\" id=\"id12\" rel=\"nofollow\">Changing the binary name</a></li>\n</ul>\n</li>\n<li><a href=\"#advanced-usage\" id=\"id13\" rel=\"nofollow\">Advanced usage</a><ul>\n<li><a href=\"#custom-initialization\" id=\"id14\" rel=\"nofollow\">Custom initialization</a></li>\n<li><a href=\"#media-and-static\" id=\"id15\" rel=\"nofollow\">Media and static</a></li>\n<li><a href=\"#external-settings\" id=\"id16\" rel=\"nofollow\">External settings</a></li>\n</ul>\n</li>\n<li><a href=\"#options-reference\" id=\"id17\" rel=\"nofollow\">Options reference</a><ul>\n<li><a href=\"#eggs\" id=\"id18\" rel=\"nofollow\">eggs</a></li>\n<li><a href=\"#environment-vars\" id=\"id19\" rel=\"nofollow\">environment-vars</a></li>\n<li><a href=\"#extra-paths\" id=\"id20\" rel=\"nofollow\">extra-paths</a></li>\n<li><a href=\"#initialization\" id=\"id21\" rel=\"nofollow\">initialization</a></li>\n<li><a href=\"#manage-py-file\" id=\"id22\" rel=\"nofollow\">manage-py-file</a></li>\n<li><a href=\"#settings-file\" id=\"id23\" rel=\"nofollow\">settings-file</a></li>\n<li><a href=\"#settings-module\" id=\"id24\" rel=\"nofollow\">settings-module</a></li>\n<li><a href=\"#settings-override\" id=\"id25\" rel=\"nofollow\">settings-override</a></li>\n<li><a href=\"#sites-directory\" id=\"id26\" rel=\"nofollow\">sites-directory</a></li>\n<li><a href=\"#static-directory\" id=\"id27\" rel=\"nofollow\">static-directory</a></li>\n<li><a href=\"#media-directory\" id=\"id28\" rel=\"nofollow\">media-directory</a></li>\n<li><a href=\"#wsgi-file\" id=\"id29\" rel=\"nofollow\">wsgi-file</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#contributors\" id=\"id30\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#change-history\" id=\"id31\" rel=\"nofollow\">Change history</a><ul>\n<li><a href=\"#id2\" id=\"id32\" rel=\"nofollow\">2.1 (2012-07-02)</a></li>\n<li><a href=\"#id3\" id=\"id33\" rel=\"nofollow\">2.0 (2012-07-02)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>This recipe allows you to setup a Django project through <a href=\"http://www.buildout.org/\" rel=\"nofollow\">zc.buildout</a>.</p>\n<div id=\"usage\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Usage</a></h2>\n<p>In order to use this recipe, create a buildout as follows:</p>\n<pre>[buildout]\nparts =\n    myproject\n\n[myproject]\nrecipe = djc.recipe2\n</pre>\n<p>And then create a python module in <tt><span class=\"pre\">sites/&lt;part_name&gt;_site_config</span></tt>\ncontaining the <tt>settings.py</tt> file.</p>\n<p>The buildout will take care of creating a manage script at <tt>bin/django</tt>\nand a <em>WSGI</em> app to serve the project in production\nat <tt>parts/myproject/myproject_part_site/wsgi.py</tt>.</p>\n<p>In our example, this will result in the following file structure:</p>\n<pre>&lt;buildout_root&gt;\n|\n|- bin\n|  |\n|  |- ...\n|  |\n|  |- django # the manage.py script\n|\n|- ...\n|\n|- parts\n|  |\n|  |- myproject\n|     |\n|     |- myproject_part_site # put this on PYTHONPATH when serving via WSGI\n|        |\n|        |- __init__.py\n|        |\n|        |- ...\n|        |\n|        |- wsgi.py # WSGI app and paster app factory\n|\n|- ...\n|\n|- sites\n|  |\n|  |- myproject_site_config\n|     |\n|     |- __init__.py # void\n|     |\n|     |- settings.py # your settings here\n|\n|- ...\n</pre>\n<p>For all the options and detailed documentation, see below.</p>\n</div>\n<div id=\"running-tests\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Running tests</a></h2>\n<p>The <tt>recipe.rst</tt> file located within the package also acts as main doctest.</p>\n<p>To run the tests, check out the source,\nand then bootstrap and run the buildout:</p>\n<pre>$ python bootstrap.py\n$ bin/buildout\n</pre>\n<p>If it\u2019s a fresh checkout you should also run:</p>\n<pre>$ ./makecache.sh\n</pre>\n<p>This command should be run just once after checking out:\nit will download certain packages needed for the tests\nso that they can run offline.</p>\n<p>It should also be re-run if <tt>makecache.sh</tt> has changed.</p>\n<p>Then you can run the tests using:</p>\n<pre>$ bin/test\n</pre>\n</div>\n<div id=\"links\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Links</a></h2>\n<img alt=\"https://secure.travis-ci.org/abstract-open-solutions/djc.recipe2.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b1d6f2597f55b0af636077594d75cdc218b26ca/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f61627374726163742d6f70656e2d736f6c7574696f6e732f646a632e726563697065322e706e67\">\n<ul>\n<li>Code repository: <a href=\"http://github.com/abstract-open-solutions/djc.recipe2\" rel=\"nofollow\">http://github.com/abstract-open-solutions/djc.recipe2</a></li>\n<li>Discussions at <a href=\"https://groups.google.com/group/djcrecipe\" rel=\"nofollow\">https://groups.google.com/group/djcrecipe</a></li>\n<li>Comments and questions at <a href=\"mailto:info%40abstract.it\">info<span>@</span>abstract<span>.</span>it</a></li>\n</ul>\n</div>\n<div id=\"detailed-documentation\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Detailed documentation</a></h2>\n<div id=\"basic-usage\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Basic usage</a></h3>\n<p>The basic thing you have to do in order to have a <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> site\nis to provide it some configuration.</p>\n<p>In <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a>, configuration is achieved by creating a set of global variables\nin a <a href=\"https://docs.djangoproject.com/en/dev/topics/settings/\" rel=\"nofollow\">settings module</a> and letting <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> know which is the\nsettings module to use.</p>\n<p>This recipe, in its basic functioning, adopts a <em>convention over configuration</em>\napproach to the matter.</p>\n<div>\n<p>Note</p>\n<p>It is also possible to use other approaches,\nas explained in <a href=\"#external-settings\" rel=\"nofollow\">External settings</a>.</p>\n</div>\n<p>Therefore, all the configurations for all the <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> parts in your buildout <strong>must</strong> be places within a <tt>sites</tt> directory located in your buildout root.</p>\n<p>Within this directory, a <em>python module</em> (create an empty <tt>__init__.py</tt>!)\nnamed <tt>&lt;part_name&gt;_site_config</tt> must be created, and within it,\na <tt>settings.py</tt> file containing your settings must be placed.</p>\n<p>For example, if our <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> part is named <tt>myproject</tt>\n(we are referring to the buildout part name here),\nwe would do the following:</p>\n<pre>&gt;&gt;&gt; mkdir('sites')\n&gt;&gt;&gt; mkdir('sites', 'myproject_site_config')\n&gt;&gt;&gt; write('sites', 'myproject_site_config', '__init__.py',\n...       '#\\n')\n&gt;&gt;&gt; write('sites', 'myproject_site_config', 'settings.py', '''\n... SPAM = 'eggs'\n... ''')\n</pre>\n<p>Okay, that settings file is not exactly a good one,\nbut it will suffice for now as an example.</p>\n<p>Let\u2019s now create our buildout and run it:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n</pre>\n<p>As you can see, the part for now contains only the recipe, as it will work\n<em>out of the box</em> without further meddling if we adhere to its conventions.</p>\n<p>Let\u2019s see what the buildout did. To start with, it created a <tt>django</tt> binary\nwithin <tt>bin</tt> that is the equivalent of Django\u2019s <tt>manage.py</tt>\n(which means you can invoke it exactly like you would with <tt>manage.py</tt>):</p>\n<pre>&gt;&gt;&gt; ls('bin')\n-  buildout\n-  django\n</pre>\n<div>\n<p>Note</p>\n<p>Ofcourse, since the binary name is always <tt>django</tt>,\nthis will cause problems if you have more than one <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> part\nin your buildout:\nthis is solved by the <a href=\"#manage-py-file\" rel=\"nofollow\">manage-py-file</a> option\nexplained in the <a href=\"#options-reference\" rel=\"nofollow\">Options reference</a>.</p>\n</div>\n<p>The next thing the buildout did is to create yet another python module\n(in <tt><span class=\"pre\">parts/&lt;part_name&gt;</span></tt>):</p>\n<pre>&gt;&gt;&gt; ls('parts', 'myproject')\nd  myproject_part_site\n&gt;&gt;&gt; ls('parts', 'myproject', 'myproject_part_site')\n-  __init__.py\n-  settings.py\n-  wsgi.py\n</pre>\n<p><strong>Another</strong> python module?</p>\n<p>Yes, because unlike the first one, this is under buildout\u2019s strict control,\nand generated each time you run <tt>bin/buildout</tt>\n(therefore, it is a <em>very bad idea</em> to edit those files,\nbecause your changes won\u2019t be kept).</p>\n<p>In this module, we have again a <tt>settings.py</tt> file, plus a <tt>wsgi.py</tt> file.\nWe will look at the latter in more detail in <a href=\"#going-production\" rel=\"nofollow\">Going production</a>: the first,\ninstead, is the actual settings module that will be loaded by <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a>.</p>\n<p>So what about the settings we defined earlier? Do not fear,\nbecause the buildout created <tt>settings.py</tt> will import the module you wrote\nand add to it the <tt>SECRET_KEY</tt> setting:</p>\n<pre>&gt;&gt;&gt; cat('parts', 'myproject', 'myproject_part_site', 'settings.py')\nfrom myproject_site_config.settings import *\n&lt;BLANKLINE&gt;\nSECRET_KEY = \"...\"\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n</pre>\n<p>This (slightly convoluted) setup exists because a poorly chosen <tt>SECRET_KEY</tt>\ncan become a security problem (and quite a big one, for pathological cases).</p>\n<p>Since it\u2019s way too easy to pick a simple one\n(maybe because we can\u2019t be bothered to come up with a decent one)\nand even more easy to forget to change it between\ndevelopment and production environment,\nthis recipe generates a long, random key for you.</p>\n<p>This way you can safely omit <tt>SECRET_KEY</tt> within your <tt>settings.py</tt> file\nand at the same time be completely secure.</p>\n<p>This key is generated only once and is kept\nthrough the various runs of <tt>bin/buildout</tt>.\nThis is possible because the recipe will first look\nwhether a <tt>.secret.cfg</tt> file exists in the buildout root:\nif it exists, it will read it and extract the key from there\n(the file contents are the key itself and a newline).\nIf it doesn\u2019t exist, it will generate a new key and write it there.\nTherefore, as long as a <tt>.secret.cfg</tt> file exists,\nthe recipe will use the same key throughout the various runs\nof <tt>bin/buildout</tt>.</p>\n<p>Proof of the fact is that a <tt>.secret.cfg</tt> file exists in our buildout:</p>\n<pre>&gt;&gt;&gt; isfile('.secret.cfg')\nTrue\n</pre>\n<div id=\"complete-example\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Complete example</a></h4>\n<p>Let\u2019s now put into our settings file (<tt>myproject_site_config/settings.py</tt>)\nsome more sane values:</p>\n<pre>&gt;&gt;&gt; write('sites', 'myproject_site_config', 'settings.py', '''\n... DATABASES = {\n...     'default': {\n...         'ENGINE': 'django.db.backends.sqlite3',\n...         'NAME': 'storage.db'\n...     }\n... }\n... TIME_ZONE = 'Europe/Rome'\n... ''')\n</pre>\n<p>Now, in order for these settings to take effect,\nwe don\u2019t have to re-run buildout,\nas the import that the generated file does will pick them up:</p>\n<pre>&gt;&gt;&gt; print system('bin/django diffsettings')\nDATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'storage.db'}}\nSECRET_KEY = '...'\nSETTINGS_MODULE = 'myproject_part_site.settings'  ###\nTIME_ZONE = 'Europe/Rome'\n</pre>\n<p>Seems like it worked!</p>\n<p>We decided to put the database in a <em>SQLite</em> file named <tt>storage.db</tt>,\nwhich currently doesn\u2019t exist:</p>\n<pre>&gt;&gt;&gt; isfile('storage.db')\nFalse\n</pre>\n<p>Let\u2019s now tell <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> to create the database:</p>\n<pre>&gt;&gt;&gt; print system('bin/django syncdb --noinput')\nCreating tables ...\nInstalling custom SQL ...\nInstalling indexes ...\nInstalled 0 object(s) from 0 fixture(s)\n&lt;BLANKLINE&gt;\n</pre>\n<p>And we will see that the database has been created:</p>\n<pre>&gt;&gt;&gt; isfile('storage.db')\nTrue\n</pre>\n</div>\n<div id=\"debug-mode\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Debug mode</a></h4>\n<p>We can now start developing but, sooner or later,\nwe\u2019ll recognize that we haven\u2019t set <tt>DEBUG = True</tt>,\nwhich is fundamental <a href=\"http://www-cs-faculty.stanford.edu/~knuth/faq.html\" rel=\"nofollow\">if your name is not Donald Knuth</a>.</p>\n<p>We could add it straight away in <tt>myproject_site_config/settings.py</tt>,\nbut that might cause problems when we\u2019re <a href=\"#going-production\" rel=\"nofollow\">Going production</a>,\nbecause you definitely want to have <tt>DEBUG</tt> and its sisters off\nwhen you\u2019re out in the open.</p>\n<p>Therefore, another option that we have is to do the following:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... settings-override =\n...     DEBUG = True\n...     TEMPLATE_DEBUG = True\n... ''')\n</pre>\n<p>Anything that we put in <tt><span class=\"pre\">settings-override</span></tt> will be appended\nat the end of the buildout-generated <tt>settings.py</tt>\n(treated as a string, so beware that no correctness checking\nis performed).\nThis allows us to quickly differentiate production and development buildouts\nwithout having the need to come up with two different <tt>settings.py</tt> files\n(one for production and one for development).</p>\n<p>If we re-run the buildout and look at the results,\nwe will see that we are now in debug mode:</p>\n<pre>&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; cat('parts', 'myproject', 'myproject_part_site', 'settings.py')\nfrom myproject_site_config.settings import *\n&lt;BLANKLINE&gt;\nSECRET_KEY = \"...\"\n&lt;BLANKLINE&gt;\nDEBUG = True\nTEMPLATE_DEBUG = True\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; print system('bin/django diffsettings')\nDATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'storage.db'}}\nDEBUG = True\nSECRET_KEY = '...'\nSETTINGS_MODULE = 'myproject_part_site.settings'  ###\nTEMPLATE_DEBUG = True\nTIME_ZONE = 'Europe/Rome'\n</pre>\n<div>\n<p>Note</p>\n<p>Since this gets appended to the file, be careful that\nif you do define <em>and</em> reference <tt>DEBUG</tt> (or any other variable)\nwithin the <tt>settings.py</tt> file in your full control,\nour setting it <em>afterwards</em> will not affect its value\nwithin <em>your</em> <tt>settings.py</tt>.\nSo if in your <tt>settings.py</tt> you do <tt>DEBUG = False</tt>\nand <tt>FOOBAR = False</tt>, <tt>FOOBAR</tt> will always be false.</p>\n</div>\n<p>Of course, this is not limited to <tt>DEBUG</tt>, you can use it for example\nto override the <tt>DATABASES</tt>, <tt>LOGGING</tt> and <tt>CACHES</tt> settings\nin the production environment without having to create\na whole new <tt>settings.py</tt> file.</p>\n<div>\n<p>Note</p>\n<p>Due to buildout\u2019s limitations, indentation of <tt><span class=\"pre\">settings-override</span></tt>\nis completely lost. Therefore don\u2019t do <tt>if</tt> or more complex stuff:\nif you need to, check out <a href=\"#advanced-usage\" rel=\"nofollow\">Advanced usage</a></p>\n</div>\n</div>\n<div id=\"going-production\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Going production</a></h4>\n<p>As we saw above, if our development setup doesn\u2019t differ too much\nfrom our production setup\n(save for the fact that we use a real cache, a more complex RDBMS, etc)\nthen we can use <tt><span class=\"pre\">settings-override</span></tt> to manage it:</p>\n<pre>&gt;&gt;&gt; mkdir('var')\n&gt;&gt;&gt; mkdir('var', 'log')\n&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... settings-override =\n...     DATABASES = {\n...         'default': {\n...             'ENGINE': 'django.db.backends.postgresql_psycopg2',\n...             'HOST': 'localhost',\n...             'PORT': '5432',\n...             'NAME': 'mydb',\n...             'USER': 'mydb',\n...             'PASSWORD': 'secret'\n...         }\n...     }\n...     CACHES = {\n...         'default': {\n...             'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n...             'LOCATION': '127.0.0.1:11211',\n...         }\n...     }\n...     LOGGING = {\n...         'version': 1,\n...         'disable_existing_loggers': True,\n...         'root': { 'level': 'WARNING', 'handlers': ['logfile'], },\n...         'formatters': {\n...             'verbose': {\n...                 'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'\n...             },\n...         },\n...         'handlers': {\n...             'logfile': {\n...                 'level': 'ERROR',\n...                 'class': 'logging.handlers.RotatingFileHandler',\n...                 'filename': 'var/log/myproject.log',\n...                 'maxBytes': 1024,\n...                 'backupCount': 3,\n...             },\n...             'console': {\n...                 'level': 'DEBUG',\n...                 'class': 'logging.StreamHandler',\n...                 'formatter': 'verbose'\n...             }\n...         },\n...         'loggers': {\n...             'django.db.backends': {\n...                 'level': 'ERROR',\n...                 'handlers': ['console'],\n...                 'propagate': False,\n...             },\n...         },\n...     }\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; print system('bin/django diffsettings')\nCACHES = ...\nDATABASES = ...\nLOGGING = ...\nSECRET_KEY = '...'\nSETTINGS_MODULE = 'myproject_part_site.settings'  ###\nTIME_ZONE = 'Europe/Rome'\n</pre>\n<p>This is actually a quite complete (albeit basic) production example,\nand it can still be managed quite well within the buildout.</p>\n<p>If we do have more complex cases, however,\nit\u2019s probably better to use <a href=\"#external-settings\" rel=\"nofollow\">External settings</a>.</p>\n</div>\n<div id=\"changing-the-binary-name\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Changing the binary name</a></h4>\n<p>As we have said before, the name of the generated binary is always <tt>django</tt>,\nwithout any suffix or prefix.</p>\n<p>The rational for this choice is the following:</p>\n<blockquote>\n<ol>\n<li>Having the script named <tt>django</tt> and it being the same\nno matter how you call the buildout part simplifies\ngetting into development a lot\n(it\u2019s always <tt>bin/django runserver</tt> after you run the buildout,\nand you don\u2019t have to go and look how it is named\nin that particular buildout)</li>\n<li>Since in production you will just configure your <em>WSGI</em> server\nto use multiple processes, there are very few reasons\nto have multiple <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> parts in your buildout</li>\n</ol>\n</blockquote>\n<p>But if you really need to have multiple parts,\nthe default behaviour will have one part overwrite the other\u2019s script.\nThat\u2019s when you need to use the <a href=\"#manage-py-file\" rel=\"nofollow\">manage-py-file</a> option,\nwhich allows you to provide a different name\n(say, <tt>django1</tt> and <tt>django2</tt>) for the manage script.</p>\n<p>First we start by copying the settings of our sample project\nto two ned different locations, <tt>myproject1</tt> and <tt>myproject2</tt>:</p>\n<pre>&gt;&gt;&gt; copytree(['sites', 'myproject_site_config'],\n...          ['sites', 'myproject1_site_config'])\n&gt;&gt;&gt; copytree(['sites', 'myproject_site_config'],\n...          ['sites', 'myproject2_site_config'])\n</pre>\n<p>Then we write a buildout that has <em>two</em> parts,\n<tt>myproject1</tt> and <tt>myproject2</tt>, and run it:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject1\n...     myproject2\n...\n... [myproject1]\n... recipe = djc.recipe2\n... manage-py-file = django1\n...\n... [myproject2]\n... recipe = djc.recipe2\n... manage-py-file = django2\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject1.\n...\nInstalling myproject2.\n...\n&lt;BLANKLINE&gt;\n</pre>\n<p>And we will see that it has created two distinct scripts:</p>\n<pre>&gt;&gt;&gt; ls('bin')\n-  buildout\n-  django1\n-  django2\n</pre>\n</div>\n</div>\n<div id=\"advanced-usage\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Advanced usage</a></h3>\n<div id=\"custom-initialization\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Custom initialization</a></h4>\n<p>Sometimes, you need to do some magic before <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> loads everything,\nin order to use certain features.</p>\n<p>For example, <a href=\"http://pinaxproject.com/\" rel=\"nofollow\">Pinax</a>, a very well known social site framework based on <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a>,\nneeds you to perform certain <tt>sys.path</tt> magic before initialization.</p>\n<p>This kind of customization can be done in two ways:</p>\n<blockquote>\n<ol>\n<li>By performing those in <tt>settings.py</tt></li>\n<li>By altering the manage script (and the <em>WSGI</em> one, too)</li>\n</ol>\n</blockquote>\n<p>The first choice might look simpler but it actually hides much more complexity\nthan it is initially visible.\nThe latter is better but, since the script is generated by buildout,\nwe cannot simply edit that file.</p>\n<p>Before looking at how you actually do it, let\u2019s make a premise:\nwe can divide this initialization stuff in two main groups.</p>\n<p>The first and more common group is when you simply need\nto set an environment variable: while this can be achieved\nby doing <tt>$ MYVAR=value bin/django</tt>, it\u2019s not exactly handy in the long run.</p>\n<p>And here comes <a href=\"#environment-vars\" rel=\"nofollow\">environment-vars</a> to the rescue!</p>\n<p>Let\u2019s look at a concrete example: running <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> on <a href=\"https://developers.google.com/appengine/\" rel=\"nofollow\">Google App Engine</a>.\n<a href=\"https://developers.google.com/appengine/\" rel=\"nofollow\">Google App Engine</a> requires you to have a <tt>GOOGLE_APPENGINE_PROJECT_ROOT</tt>\nenvironment variable set, or nothing will work.</p>\n<p>Therefore, in order to add it we would write our buildout as follows,\nwith a list of variables and values (separated by space)\nfor each environment variable we want to set:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... environment-vars =\n...     GOOGLE_APPENGINE_PROJECT_ROOT /my/path\n... ''')\n</pre>\n<p>And after running it, we can see that the script correctly initializes\nthe environment variable:</p>\n<pre>&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; cat('bin', 'django')\n#!...\n&lt;BLANKLINE&gt;\n...\n&lt;BLANKLINE&gt;\nimport os\nos.environ[\"GOOGLE_APPENGINE_PROJECT_ROOT\"] = r\"/my/path\"\n&lt;BLANKLINE&gt;\n...\n&lt;BLANKLINE&gt;\nos.environ['DJANGO_SETTINGS_MODULE'] = \"myproject_part_site.settings\"\nif IS_14_PLUS:\n    execute_from_command_line(sys.argv)\nelse:\n    utility = ManagementUtility(sys.argv)\n    utility.execute()\n</pre>\n<p>For the second case, the <a href=\"#initialization\" rel=\"nofollow\">initialization</a> option is provided:\nthis allows you to write (in a format similar to doctest)\nthe python code that you need to be executed before <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> starts.</p>\n<div>\n<p>Note</p>\n<p>The slightly funny <em>doctest syntax</em> of this option is to overcome\na shortcoming of buildout that will otherwise completely lose indentation.</p>\n</div>\n<p>Let\u2019s see how we would make sure that <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django</a> won\u2019t start at all\nif <tt>1 != 1</tt>:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... initialization =\n...     &gt;&gt;&gt; if 1 != 1:\n...     ...     raise RuntimeError(\"I can't run on quantum computers\")\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; cat('bin', 'django')\n#!...\n&lt;BLANKLINE&gt;\n...\n&lt;BLANKLINE&gt;\nif 1 != 1:\n    raise RuntimeError(\"I can't run on quantum computers\")\n&lt;BLANKLINE&gt;\n...\n&lt;BLANKLINE&gt;\nos.environ['DJANGO_SETTINGS_MODULE'] = \"myproject_part_site.settings\"\nif IS_14_PLUS:\n    execute_from_command_line(sys.argv)\nelse:\n    utility = ManagementUtility(sys.argv)\n    utility.execute()\n</pre>\n<div>\n<p>Note</p>\n<p>I really couldn\u2019t come up with a better example\nthat would work in tests without having to bring in loads of crap,\nbut I can assure you this feature <strong>is</strong> useful. Really.</p>\n</div>\n</div>\n<div id=\"media-and-static\">\n<h4><a href=\"#id15\" rel=\"nofollow\">Media and static</a></h4>\n<p>This is a bit of personal preference.\nWhen developing upon work started by someone else,\nI find it utterly irritating that the upload doesn\u2019t work because,\nafter checking out and running the buildout, I did not do <tt>$ mkdir media</tt>.</p>\n<p>Because:</p>\n<blockquote>\n<ol>\n<li>I\u2019m getting old and I tend to forget that</li>\n<li>Sometimes it\u2019s not <tt>media</tt>, but <tt>var/upload/mediafiles</tt>\nor something else (yes, we programmers tend to express creativity\nin the most inopportune ways)</li>\n</ol>\n</blockquote>\n<p>That\u2019s why I\u2019ve added two options that, while not being on by default,\nI wish you have turned on (atleast one of them)\nif I have to work on your buildout.</p>\n<p>The options are <a href=\"#media-directory\" rel=\"nofollow\">media-directory</a> and <a href=\"#static-directory\" rel=\"nofollow\">static-directory</a>,\nand their values are the path to the media root and the static root\nrespectively.\nWhen they are set, the buildout will create them if they don\u2019t exist\nand then append to the settings module the proper <tt>MEDIA_ROOT</tt>\nand <tt>STATIC_ROOT</tt> setting.</p>\n<p>Let\u2019s see them in action. First we check that we don\u2019t have any\n<tt>static</tt> or <tt>media</tt> directory:</p>\n<pre>&gt;&gt;&gt; isdir('media')\nFalse\n&gt;&gt;&gt; isdir('static')\nFalse\n</pre>\n<p>Then write and run the buildout:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... media-directory = media\n... static-directory = static\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n</pre>\n<p>And then see that we have the directories and the settings:</p>\n<pre>&gt;&gt;&gt; isdir('media')\nTrue\n&gt;&gt;&gt; isdir('static')\nTrue\n&gt;&gt;&gt; print system('bin/django diffsettings')\nDATABASES = ...\nMEDIA_ROOT = '...'\nSECRET_KEY = '...'\nSETTINGS_MODULE = 'myproject_part_site.settings'  ###\nSTATIC_ROOT = '...'\nTIME_ZONE = 'Europe/Rome'\n</pre>\n<p>Obviously, you do not need to use them together\nbut they can be used independently.</p>\n</div>\n<div id=\"external-settings\">\n<h4><a href=\"#id16\" rel=\"nofollow\">External settings</a></h4>\n<p>Sometimes, one file for all the settings just ain\u2019t enough,\nor it might turn out that <a href=\"#settings-override\" rel=\"nofollow\">settings-override</a> is not quite handy for you.</p>\n<p>That\u2019s why this recipe allows you to use as a settings module anything\nthat\u2019s in in <tt>sys.path</tt>.</p>\n<p>For example, suppose we want to put our production settings\nin a file on its own: we might then create a file\nnamed <tt>sites/myproject_site_config/production.py</tt>\nand use that as settings module.</p>\n<p>First, let\u2019s create the file:</p>\n<pre>&gt;&gt;&gt; write('sites', 'myproject_site_config', 'production.py', '''\n... from .settings import *\n... TIME_ZONE = 'Europe/London'\n... ''')\n</pre>\n<p>Then we tell the buildout to use the module\n<tt>myproject_site_config.production</tt> as settings module\ninstead of the default one, through the <a href=\"#settings-module\" rel=\"nofollow\">settings-module</a> option:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... settings-module = myproject_site_config.production\n... ''')\n</pre>\n<div>\n<p>Note</p>\n<p>The module can be anything in <tt>sys.path</tt>, but here we reused the\nsame directory because whenever <a href=\"#sites-directory\" rel=\"nofollow\">sites-directory</a> exists\nand regardless of what\u2019s in it, it is put on <tt>sys.path</tt>.\nYou can ofcourse have the settings module in your project egg\nor whatever else.</p>\n</div>\n<p>And we can then run the buildout and see what happened:</p>\n<pre>&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; print system('bin/django diffsettings')\nDATABASES = ...\nSECRET_KEY = '...'\nSETTINGS_MODULE = 'myproject_part_site.settings'  ###\nTIME_ZONE = 'Europe/London'\n</pre>\n<p>And as you can see, the changes took effect.</p>\n</div>\n</div>\n<div id=\"options-reference\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Options reference</a></h3>\n<div id=\"eggs\">\n<h4><a href=\"#id18\" rel=\"nofollow\">eggs</a></h4>\n<p>A list of eggs that the generated scripts must have access to.\nThis typically includes your application eggs and their dependencies,\nif the latter are not explicited within the <tt>setup.py</tt> file.</p>\n<p>They can be explicited either as a part option:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... eggs = django-gravatar2\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; cat('bin', 'django')\n#...\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nimport sys\nsys.path[0:0] = [\n    '.../eggs/django_gravatar2-1.0.4-...egg',\n    ...\n    ]\n&lt;BLANKLINE&gt;\n...\n</pre>\n<p>Or as a buildout option:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... eggs = django-gravatar2\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; cat('bin', 'django')\n#...\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nimport sys\nsys.path[0:0] = [\n    '.../eggs/django_gravatar2-1.0.4-...egg',\n    ...\n    ]\n&lt;BLANKLINE&gt;\n...\n</pre>\n<p>Or both, and they will be merged:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... eggs = South\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... eggs = django-gravatar2\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; cat('bin', 'django')\n#...\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nimport sys\nsys.path[0:0] = [\n    '.../eggs/django_gravatar2-1.0.4-...egg',\n    '.../eggs/South-0.7.5-...egg',\n    ...\n    ]\n&lt;BLANKLINE&gt;\n...\n</pre>\n</div>\n<div id=\"environment-vars\">\n<h4><a href=\"#id19\" rel=\"nofollow\">environment-vars</a></h4>\n<p>A list of environment variables to set before execution,\neach separated by newline and in the format <tt>VAR_NAME value</tt>.</p>\n<p>See <a href=\"#custom-initialization\" rel=\"nofollow\">Custom initialization</a> for an example.</p>\n</div>\n<div id=\"extra-paths\">\n<h4><a href=\"#id20\" rel=\"nofollow\">extra-paths</a></h4>\n<p>A list of paths, separated by newline,\nthat should be added to <tt>sys.path</tt> before the code is executed\n(allowing the discovery of custom modules).</p>\n<p>For example:</p>\n<pre>&gt;&gt;&gt; mkdir('custom_modules')\n&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... extra-paths =\n...     custom_modules\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; cat('bin', 'django')\n#...\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nimport sys\nsys.path[0:0] = [\n    ...\n    '.../custom_modules',\n    ]\n&lt;BLANKLINE&gt;\n...\n</pre>\n</div>\n<div id=\"initialization\">\n<h4><a href=\"#id21\" rel=\"nofollow\">initialization</a></h4>\n<p>Python code, to be formatted like a doctest,\nthat is to be executed before any initialization happens.</p>\n<p>See <a href=\"#custom-initialization\" rel=\"nofollow\">Custom initialization</a> for an example.</p>\n</div>\n<div id=\"manage-py-file\">\n<h4><a href=\"#id22\" rel=\"nofollow\">manage-py-file</a></h4>\n<p>The name of the generated manage script in <tt>bin</tt>.</p>\n<p>See <a href=\"#changing-the-binary-name\" rel=\"nofollow\">Changing the binary name</a> for an example.</p>\n</div>\n<div id=\"settings-file\">\n<h4><a href=\"#id23\" rel=\"nofollow\">settings-file</a></h4>\n<p>The name of the generated settings file\n(the one that\u2019s autogenerated by buildout at each run).</p>\n<p>This option can be quite useful to avoid module name clashes:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... settings-file = configuration.py\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; print system('bin/django diffsettings')\nDATABASES = ...\nSECRET_KEY = '...'\nSETTINGS_MODULE = 'myproject_part_site.configuration'  ###\nTIME_ZONE = 'Europe/Rome'\n</pre>\n</div>\n<div id=\"settings-module\">\n<h4><a href=\"#id24\" rel=\"nofollow\">settings-module</a></h4>\n<p>Loads a custom settings module instead of the conventional one.</p>\n<p>See <a href=\"#external-settings\" rel=\"nofollow\">External settings</a> for an example.</p>\n</div>\n<div id=\"settings-override\">\n<h4><a href=\"#id25\" rel=\"nofollow\">settings-override</a></h4>\n<p>Specifies some settings (as python code) to be appended\nto the auto-generated settings file and thus overriding the module-defined ones.</p>\n<p>See <a href=\"#debug-mode\" rel=\"nofollow\">Debug mode</a> for an example.</p>\n</div>\n<div id=\"sites-directory\">\n<h4><a href=\"#id26\" rel=\"nofollow\">sites-directory</a></h4>\n<p>Changes the default location of the conventional configuration location\n(normally the <tt>sites</tt> directory).</p>\n<p>It will be appended to <tt>sys.path</tt>:</p>\n<pre>&gt;&gt;&gt; copytree(['sites'], ['mysites'])\n&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... sites-directory = mysites\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; cat('bin', 'django')\n#...\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nimport sys\nsys.path[0:0] = [\n    ...\n    '.../mysites',\n    ]\n&lt;BLANKLINE&gt;\n...\n</pre>\n</div>\n<div id=\"static-directory\">\n<h4><a href=\"#id27\" rel=\"nofollow\">static-directory</a></h4>\n<p>Sets the location of <tt>STATIC_ROOT</tt> and creates it if missing.</p>\n<p>See <a href=\"#media-and-static\" rel=\"nofollow\">Media and static</a>.</p>\n</div>\n<div id=\"media-directory\">\n<h4><a href=\"#id28\" rel=\"nofollow\">media-directory</a></h4>\n<p>Same as <a href=\"#static-directory\" rel=\"nofollow\">static-directory</a> for <tt>MEDIA_ROOT</tt>.</p>\n</div>\n<div id=\"wsgi-file\">\n<h4><a href=\"#id29\" rel=\"nofollow\">wsgi-file</a></h4>\n<p>Changes the name of the file that contains the <em>WSGI</em> application.</p>\n<p>The purpose is similar to <a href=\"#settings-file\" rel=\"nofollow\">settings-file</a>:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg', '''\n... [buildout]\n... parts =\n...     myproject\n...\n... [myproject]\n... recipe = djc.recipe2\n... wsgi-file = wsgiapp.py\n... ''')\n&gt;&gt;&gt; print \"$ bin/buildout\\n\", system(buildout)\n$ bin/buildout\n...\nInstalling myproject.\n...\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; ls('parts', 'myproject', 'myproject_part_site')\n-  __init__.py\n-  settings.py\n-  wsgiapp.py\n</pre>\n</div>\n</div>\n</div>\n<div id=\"contributors\">\n<h2><a href=\"#id30\" rel=\"nofollow\">Contributors</a></h2>\n<blockquote>\n<ul>\n<li>Simone Deponti &lt;<a href=\"mailto:simone.deponti%40abstract.it\">simone<span>.</span>deponti<span>@</span>abstract<span>.</span>it</a>&gt;, Initial Author</li>\n<li>Bruno Ripa &lt;<a href=\"mailto:bruno.ripa%40abstract.it\">bruno<span>.</span>ripa<span>@</span>abstract<span>.</span>it</a>&gt;</li>\n<li>Mikko Ohtamaa (@moo9000)</li>\n<li>Dimitri Roche</li>\n</ul>\n</blockquote>\n<p>Inital developement sponsored by <a href=\"http://www.abstract.it\" rel=\"nofollow\">Abstract Open Solutions</a></p>\n</div>\n<div id=\"change-history\">\n<h2><a href=\"#id31\" rel=\"nofollow\">Change history</a></h2>\n<div id=\"id2\">\n<h3><a href=\"#id32\" rel=\"nofollow\">2.1 (2012-07-02)</a></h3>\n<ul>\n<li>Fixed setuptools-git problem.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id33\" rel=\"nofollow\">2.0 (2012-07-02)</a></h3>\n<ul>\n<li>Rewrite from <a href=\"http://pypi.python.org/pypi/djc.recipe\" rel=\"nofollow\">djc.recipe</a> [Simone Deponti]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 745193, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "4d6475d8aa3ec718c1f04f04edf01360", "sha256": "0c0b98e5ad195fbd0dfc281c51dac6efba020d9d8bf9fd8338a7d7a285eeaf8b"}, "downloads": -1, "filename": "djc.recipe2-2.0.zip", "has_sig": false, "md5_digest": "4d6475d8aa3ec718c1f04f04edf01360", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25572, "upload_time": "2012-07-02T11:09:21", "upload_time_iso_8601": "2012-07-02T11:09:21.990920Z", "url": "https://files.pythonhosted.org/packages/0a/76/738f73257d7aea17a9b4d376dcd7d2a6956e522deaa46748b8eaed8b8684/djc.recipe2-2.0.zip", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "b1aa7bb9fcaa5b1a436784d1e79485a9", "sha256": "c1eaab1383284bb55c230a841765ccd3450343cbc31c7146178038066c1e18c0"}, "downloads": -1, "filename": "djc.recipe2-2.1.zip", "has_sig": false, "md5_digest": "b1aa7bb9fcaa5b1a436784d1e79485a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38166, "upload_time": "2012-07-02T11:17:17", "upload_time_iso_8601": "2012-07-02T11:17:17.960765Z", "url": "https://files.pythonhosted.org/packages/03/03/c722cda11ad0338f379ebd81fc252a283e4d91060796ea5350cf74cc0ffa/djc.recipe2-2.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1aa7bb9fcaa5b1a436784d1e79485a9", "sha256": "c1eaab1383284bb55c230a841765ccd3450343cbc31c7146178038066c1e18c0"}, "downloads": -1, "filename": "djc.recipe2-2.1.zip", "has_sig": false, "md5_digest": "b1aa7bb9fcaa5b1a436784d1e79485a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38166, "upload_time": "2012-07-02T11:17:17", "upload_time_iso_8601": "2012-07-02T11:17:17.960765Z", "url": "https://files.pythonhosted.org/packages/03/03/c722cda11ad0338f379ebd81fc252a283e4d91060796ea5350cf74cc0ffa/djc.recipe2-2.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:51:38 2020"}