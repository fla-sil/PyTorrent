{"info": {"author": "notmarrco", "author_email": "marc@maj44.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# commandopt\nTurn a dict of arguments into cli commands, ideal companion of docopt.\n\n## Why ?\n\nUsing the `commandopt.commandopt` decorator, you are able to declare commands to be\nexecuted depending on the input arguments of your app (required or optional).\n\nIt reduces the boilerplate code in your `main()`.\n\n## Declaration\n\n```py\ndef commandopt(mandopts: List, opts: List = None):\n    # ...\n```\n### Call\n\n```py\n@commandopt(mandatory_arguments, optional_arguments)\ndef xxxx(*args, **kwargs):\n```\n\n## Example usage\n\n```py\n#myapp/myapp.py\n\"\"\"Naval Fate.\n\nUsage:\n  naval_fate.py ship new <name>...\n  naval_fate.py new-ship [<name>]\n  naval_fate.py --version\n\nOptions:\n  --version     Show version.\n\n\"\"\"\nfrom commandopt import Command\nfrom docopt import docopt\n\nimport myapp.commands.ship\n\nif __name__ == '__main__':\n    arguments = docopt(__doc__, version='Naval Fate 2.0')\n    run = Command(arguments)  # get the registered function\n    run(arguments)  # execute the function\n    # or\n    # run = Command(arguments, call=True)\n\n```\n\n```py\n#myapp/commands/ship.py\nfrom commandopt import commandopt\n\nclass ShipCommand:\n\n    @commandopt([\"ship\", \"new\", \"<name>\"])\n    @commandopt([\"new-ship\"], [\"<name>\"])\n    def new(arguments):\n        \"\"\"You can stack the decorator if you want.\"\"\"\n        name = arguments[\"<name>\"] or \"case when name is empty\"\n        # ... your code here\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/jaegerbobomb/commandopt/archive/v0.2.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jaegerbobomb/commandopt", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Commandopt", "package_url": "https://pypi.org/project/Commandopt/", "platform": "", "project_url": "https://pypi.org/project/Commandopt/", "project_urls": {"Download": "https://github.com/jaegerbobomb/commandopt/archive/v0.2.0.tar.gz", "Homepage": "https://github.com/jaegerbobomb/commandopt"}, "release_url": "https://pypi.org/project/Commandopt/0.2.0/", "requires_dist": null, "requires_python": ">=3.2", "summary": "Turn a dict of arguments into cli commands, ideal companion of docopt.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>commandopt</h1>\n<p>Turn a dict of arguments into cli commands, ideal companion of docopt.</p>\n<h2>Why ?</h2>\n<p>Using the <code>commandopt.commandopt</code> decorator, you are able to declare commands to be\nexecuted depending on the input arguments of your app (required or optional).</p>\n<p>It reduces the boilerplate code in your <code>main()</code>.</p>\n<h2>Declaration</h2>\n<pre><span class=\"k\">def</span> <span class=\"nf\">commandopt</span><span class=\"p\">(</span><span class=\"n\">mandopts</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<h3>Call</h3>\n<pre><span class=\"nd\">@commandopt</span><span class=\"p\">(</span><span class=\"n\">mandatory_arguments</span><span class=\"p\">,</span> <span class=\"n\">optional_arguments</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">xxxx</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n</pre>\n<h2>Example usage</h2>\n<pre><span class=\"c1\">#myapp/myapp.py</span>\n<span class=\"sd\">\"\"\"Naval Fate.</span>\n\n<span class=\"sd\">Usage:</span>\n<span class=\"sd\">  naval_fate.py ship new &lt;name&gt;...</span>\n<span class=\"sd\">  naval_fate.py new-ship [&lt;name&gt;]</span>\n<span class=\"sd\">  naval_fate.py --version</span>\n\n<span class=\"sd\">Options:</span>\n<span class=\"sd\">  --version     Show version.</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commandopt</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">docopt</span> <span class=\"kn\">import</span> <span class=\"n\">docopt</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">myapp.commands.ship</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"n\">docopt</span><span class=\"p\">(</span><span class=\"vm\">__doc__</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'Naval Fate 2.0'</span><span class=\"p\">)</span>\n    <span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">)</span>  <span class=\"c1\"># get the registered function</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">)</span>  <span class=\"c1\"># execute the function</span>\n    <span class=\"c1\"># or</span>\n    <span class=\"c1\"># run = Command(arguments, call=True)</span>\n</pre>\n<pre><span class=\"c1\">#myapp/commands/ship.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commandopt</span> <span class=\"kn\">import</span> <span class=\"n\">commandopt</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ShipCommand</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@commandopt</span><span class=\"p\">([</span><span class=\"s2\">\"ship\"</span><span class=\"p\">,</span> <span class=\"s2\">\"new\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;name&gt;\"</span><span class=\"p\">])</span>\n    <span class=\"nd\">@commandopt</span><span class=\"p\">([</span><span class=\"s2\">\"new-ship\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"&lt;name&gt;\"</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"You can stack the decorator if you want.\"\"\"</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"s2\">\"&lt;name&gt;\"</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"s2\">\"case when name is empty\"</span>\n        <span class=\"c1\"># ... your code here</span>\n</pre>\n\n          </div>"}, "last_serial": 6860948, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6a54dd81c3c83317ff1abc89ab776d43", "sha256": "59a4dc2d68314411f3c6a3a1764c5ea4bcb7c82d556745aceaf4569213ea4ddd"}, "downloads": -1, "filename": "Commandopt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6a54dd81c3c83317ff1abc89ab776d43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 2505, "upload_time": "2020-02-11T15:39:05", "upload_time_iso_8601": "2020-02-11T15:39:05.785040Z", "url": "https://files.pythonhosted.org/packages/66/0d/0fecd44509b265cda47d4421b45a39fe2ba597f2c155d571fc36847fe12e/Commandopt-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "68b198a601cd54c8a06d6aa73c21c8ed", "sha256": "a1371909132c1178df3f474121f02fd38c548e8b7ed91141c43e70cde915b3a0"}, "downloads": -1, "filename": "Commandopt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "68b198a601cd54c8a06d6aa73c21c8ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 2789, "upload_time": "2020-03-22T17:17:54", "upload_time_iso_8601": "2020-03-22T17:17:54.573287Z", "url": "https://files.pythonhosted.org/packages/29/a6/f2d2de0b6f74f8b4d3cf6031aa31e41e680654af294c2fcf1942319c6186/Commandopt-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "68b198a601cd54c8a06d6aa73c21c8ed", "sha256": "a1371909132c1178df3f474121f02fd38c548e8b7ed91141c43e70cde915b3a0"}, "downloads": -1, "filename": "Commandopt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "68b198a601cd54c8a06d6aa73c21c8ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 2789, "upload_time": "2020-03-22T17:17:54", "upload_time_iso_8601": "2020-03-22T17:17:54.573287Z", "url": "https://files.pythonhosted.org/packages/29/a6/f2d2de0b6f74f8b4d3cf6031aa31e41e680654af294c2fcf1942319c6186/Commandopt-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:24 2020"}