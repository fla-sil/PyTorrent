{"info": {"author": "Vlad George Ardelean", "author_email": "asdf@yopmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Utilities"], "description": "===============================\nlocalsrv\n===============================\n\n| |docs| |travis| |appveyor| |coveralls| |landscape| |scrutinizer|\n| |version| |downloads| |wheel| |supported-versions| |supported-implementations|\n\n.. |docs| image:: https://readthedocs.org/projects/localsrv/badge/?style=flat\n    :target: https://readthedocs.org/projects/localsrv\n    :alt: Documentation Status\n\n.. |travis| image:: http://img.shields.io/travis/vladiibine/localsrv/master.png?style=flat\n    :alt: Travis-CI Build Status\n    :target: https://travis-ci.org/vladiibine/localsrv\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/vladiibine/localsrv?branch=master\n    :alt: AppVeyor Build Status\n    :target: https://ci.appveyor.com/project/vladiibine/localsrv\n\n.. |coveralls| image:: http://img.shields.io/coveralls/vladiibine/localsrv/master.png?style=flat\n    :alt: Coverage Status\n    :target: https://coveralls.io/r/vladiibine/localsrv\n\n.. |landscape| image:: https://landscape.io/github/vladiibine/localsrv/master/landscape.svg?style=flat\n    :target: https://landscape.io/github/vladiibine/localsrv/master\n    :alt: Code Quality Status\n\n.. |version| image:: http://img.shields.io/pypi/v/django-localsrv.png?style=flat\n    :alt: PyPI Package latest release\n    :target: https://pypi.python.org/pypi/django-localsrv\n\n.. |downloads| image:: http://img.shields.io/pypi/dm/django-localsrv.png?style=flat\n    :alt: PyPI Package monthly downloads\n    :target: https://pypi.python.org/pypi/django-localsrv\n\n.. |wheel| image:: https://pypip.in/wheel/django-localsrv/badge.png?style=flat\n    :alt: PyPI Wheel\n    :target: https://pypi.python.org/pypi/django-localsrv\n\n.. |supported-versions| image:: https://pypip.in/py_versions/django-localsrv/badge.png?style=flat\n    :alt: Supported versions\n    :target: https://pypi.python.org/pypi/django-localsrv\n\n.. |supported-implementations| image:: https://pypip.in/implementation/django-localsrv/badge.png?style=flat\n    :alt: Supported imlementations\n    :target: https://pypi.python.org/pypi/django-localsrv\n\n.. |scrutinizer| image:: https://img.shields.io/scrutinizer/g/vladiibine/localsrv/master.png?style=flat\n    :alt: Scrutinizer Status\n    :target: https://scrutinizer-ci.com/g/vladiibine/localsrv/\n\n**django-localsrv** is a django app that allows you to serve content (files, strings, etc.) at configurable paths, with configurable response HTTP headers.\n\nIt's intended as a more useful test server than Python's SimpleHTTPServer, mainly because of the configuration options.\n\n* Free software: MIT license\n\n\nInstallation\n============\n\nFor the love of mankind, please use virtualenv.\n\n::\n\n    pip install django-localsrv\n\nThen in your settings file of your django project (usually `settings.py`)\n\n::\n\n    INSTALLED_APPS = (\n     ...\n     'localsrv',\n     ...\n    )\n\nIn your url configuration file (usually `urls.py`) add the root path to where you want to serve the content from\n\n::\n\n  from localsrv import urls as localsrv_urls\n\n  urlpatterns = (\n   ...\n   # Put this at the end of the list, since it will capture any url beginning with /localsrv\n   # You can also use a pattern like r'', and that will match any pattern that wasn't\n   # matched by any other pattern. That can get confusing, so it's best to use a namespace\n   # like the one in this example\n   url(r'^localsrv/', include(localsrv_urls))\n  )\n  \n\nAdditional steps for the eager ones\n===================================\nThe app includes a simple settings file, that you can use to start using the app instantly. It's the module **localsrv.test_settings**\n\nLet's use it!\nThis app contains models, so we'll need to run migrations for our app\n\n::\n\n    django-admin.py migrate --settings=localsrv.settings\n    \nThis will create a sqlite database file in directory where the package was installed. If you don't have a problem with that, \nyou will be able to start the server now, and enjoy the app. If you want to integrate the app into some project of yours,\nthough I advise against it, you can do so. I won't teach you how, but it's a simple matter of including 'localsrv' in the \nINSTALLED_APPS list of the settings file of your project.\n\nCreate a superuser, to access the admin web console:\n\n::\n\n    django-admin.py createsuperuser --settings=localsrv.test_settings\n    \nAnd then run the server:\n\n::\n\n    django-admin.py runserver 0:8989 --settings=localsrv.test_settings\n\nNow you're ready to start configuring what content you're going to serve at the url /localsrv/\n\nSpecifying the content to serve\n===============================\nSince this is a django app, if you did all the above steps (setting the app as a member of the INSTALLED_APPS list is the important thing),\nyou'll, you'll have access to the `Localsrv` entry on your django admin page.\n\nWorking on a simpler, command line interface to the app, with perhaps a simple configuration dictionary.\n\nThings to know: there are at the moment 3 types of content that you can serve:\n\n + Strings\n + Content found at another URL\n + Files on the local file system (these are a little buggy at the moment, but still usable)\n\nTo serve any of these, you need to create their corresponding resources. These are called `String Source`, `URL Source` and `File Source`.\nYou'll find all of these on the admin page, in the entry for the app `Localsrv`. Try to create a `String Source`, and specify the content\nto be this JSON for example (you can use any string you wish, of course)\n\n.. code-block:: json\n\n    {\n        \"asdf\": \"zxcv\",\n        \"qwer\": [1, 2, 3]\n    }\n\nAlso, along with the content, you can specify what additional HTTP Headers should be provided. Specifying these is easy. You must create\na `Servable Http Header`, where you'll be prompted for a name (e.g. **content-type**) and a value (e.g. **application/json**)\n\n\nNow finally, you'll need to specify where to serve your content. This is done by creating a `Servable Content` object, on the same admin page.\nFor it, you'll use a source that you defined previously, and (optionally) a header that you also defined. You'll also have to specify a path\nto serve this content from.\n\nSince in this example we introduced the url pattern `r'^localsrv/`, let's stick to this pattern and specify a path of `/localsrv/my_json`.\nThe path you choose here can be anything (that ca be considered a URL). We namespaced the url with `/localsrv/` just to avoid any collisions\nwith previous url pattern. The way `localsrv` handles requests is that it will respond to any unmatched URL, that starts with the namespace\nprovided, so in our example **/localsrv/asdaf/4/foo/bar** will match the `localsrv` urls, and will return either a 404, or some content\nthat you defined for this path.\n\nFinally, when accessing the URLs you configred (in our example `/localsrv/my_json`) you'll see your json string delivered with the proper\ncontent type header.\n\n\nDevelopment\n===========\n\nTo run the all tests run::\n\n    tox\n\n\nChangelog\n=========\n\n0.1.2 (2015-04-26)\n------------------------------\n* Documentation chages only\n\n0.1.1 (2015-04-18)\n-----------------------------------------\n* Added test_settings module for running the app out of the box.\n\n0.1.0 (2015-04-18)\n-----------------------------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vladiibine/localsrv", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-localsrv", "package_url": "https://pypi.org/project/django-localsrv/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-localsrv/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/vladiibine/localsrv"}, "release_url": "https://pypi.org/project/django-localsrv/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "Django app for serving static content from different sources (files, strings, urls, etc.) at custom paths, using custom HTTP headers. Intended as a more flexible option than Python's SimpleHTTPServer", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<div><a href=\"https://readthedocs.org/projects/localsrv\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78b5815af7dfbb4e500e55d599e9dac15619c8f3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c6f63616c7372762f62616467652f3f7374796c653d666c6174\"></a> <a href=\"https://travis-ci.org/vladiibine/localsrv\" rel=\"nofollow\"><img alt=\"Travis-CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bce5965cb6e45a767da489dd42b8fb0ce2c848fb/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f766c6164696962696e652f6c6f63616c7372762f6d61737465722e706e673f7374796c653d666c6174\"></a> <a href=\"https://ci.appveyor.com/project/vladiibine/localsrv\" rel=\"nofollow\"><img alt=\"AppVeyor Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0418fa336308dab19a358065f6c1d60f6386cc17/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f766c6164696962696e652f6c6f63616c7372763f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/vladiibine/localsrv\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07fbbbca5044a246d90e32d43f244a0c7acb2e53/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f766c6164696962696e652f6c6f63616c7372762f6d61737465722e706e673f7374796c653d666c6174\"></a> <a href=\"https://landscape.io/github/vladiibine/localsrv/master\" rel=\"nofollow\"><img alt=\"Code Quality Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7878ec320f71d6dd473b1f19a22ca63bc19e74f6/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f766c6164696962696e652f6c6f63616c7372762f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a> <a href=\"https://scrutinizer-ci.com/g/vladiibine/localsrv/\" rel=\"nofollow\"><img alt=\"Scrutinizer Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91801ca0901466dd241f24312762c6ebe37b4208/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f672f766c6164696962696e652f6c6f63616c7372762f6d61737465722e706e673f7374796c653d666c6174\"></a></div>\n<div><a href=\"https://pypi.python.org/pypi/django-localsrv\" rel=\"nofollow\"><img alt=\"PyPI Package latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cba80796b1fcfcad045f288f7e354c5398853725/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d6c6f63616c7372762e706e673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/django-localsrv\" rel=\"nofollow\"><img alt=\"PyPI Package monthly downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/665f808f710ccfd48b20d5e18b97588a875bd5ea/687474703a2f2f696d672e736869656c64732e696f2f707970692f646d2f646a616e676f2d6c6f63616c7372762e706e673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/django-localsrv\" rel=\"nofollow\"><img alt=\"PyPI Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1346518a60b5a5d632ad97d476a7dd4bd29d2b86/68747470733a2f2f70797069702e696e2f776865656c2f646a616e676f2d6c6f63616c7372762f62616467652e706e673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/django-localsrv\" rel=\"nofollow\"><img alt=\"Supported versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca472f2af934a325b6a4f84cde8788cec16ce4d5/68747470733a2f2f70797069702e696e2f70795f76657273696f6e732f646a616e676f2d6c6f63616c7372762f62616467652e706e673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/django-localsrv\" rel=\"nofollow\"><img alt=\"Supported imlementations\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72e2256ba96cadae1f930bc40cd5cb61a9d3baab/68747470733a2f2f70797069702e696e2f696d706c656d656e746174696f6e2f646a616e676f2d6c6f63616c7372762f62616467652e706e673f7374796c653d666c6174\"></a></div>\n</div>\n<p><strong>django-localsrv</strong> is a django app that allows you to serve content (files, strings, etc.) at configurable paths, with configurable response HTTP headers.</p>\n<p>It\u2019s intended as a more useful test server than Python\u2019s SimpleHTTPServer, mainly because of the configuration options.</p>\n<ul>\n<li>Free software: MIT license</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>For the love of mankind, please use virtualenv.</p>\n<pre>pip install django-localsrv\n</pre>\n<p>Then in your settings file of your django project (usually <cite>settings.py</cite>)</p>\n<pre>INSTALLED_APPS = (\n ...\n 'localsrv',\n ...\n)\n</pre>\n<p>In your url configuration file (usually <cite>urls.py</cite>) add the root path to where you want to serve the content from</p>\n<pre>from localsrv import urls as localsrv_urls\n\nurlpatterns = (\n ...\n # Put this at the end of the list, since it will capture any url beginning with /localsrv\n # You can also use a pattern like r'', and that will match any pattern that wasn't\n # matched by any other pattern. That can get confusing, so it's best to use a namespace\n # like the one in this example\n url(r'^localsrv/', include(localsrv_urls))\n)\n</pre>\n</div>\n<div id=\"additional-steps-for-the-eager-ones\">\n<h2>Additional steps for the eager ones</h2>\n<p>The app includes a simple settings file, that you can use to start using the app instantly. It\u2019s the module <strong>localsrv.test_settings</strong></p>\n<p>Let\u2019s use it!\nThis app contains models, so we\u2019ll need to run migrations for our app</p>\n<pre>django-admin.py migrate --settings=localsrv.settings\n</pre>\n<p>This will create a sqlite database file in directory where the package was installed. If you don\u2019t have a problem with that,\nyou will be able to start the server now, and enjoy the app. If you want to integrate the app into some project of yours,\nthough I advise against it, you can do so. I won\u2019t teach you how, but it\u2019s a simple matter of including \u2018localsrv\u2019 in the\nINSTALLED_APPS list of the settings file of your project.</p>\n<p>Create a superuser, to access the admin web console:</p>\n<pre>django-admin.py createsuperuser --settings=localsrv.test_settings\n</pre>\n<p>And then run the server:</p>\n<pre>django-admin.py runserver 0:8989 --settings=localsrv.test_settings\n</pre>\n<p>Now you\u2019re ready to start configuring what content you\u2019re going to serve at the url /localsrv/</p>\n</div>\n<div id=\"specifying-the-content-to-serve\">\n<h2>Specifying the content to serve</h2>\n<p>Since this is a django app, if you did all the above steps (setting the app as a member of the INSTALLED_APPS list is the important thing),\nyou\u2019ll, you\u2019ll have access to the <cite>Localsrv</cite> entry on your django admin page.</p>\n<p>Working on a simpler, command line interface to the app, with perhaps a simple configuration dictionary.</p>\n<p>Things to know: there are at the moment 3 types of content that you can serve:</p>\n<blockquote>\n<ul>\n<li>Strings</li>\n<li>Content found at another URL</li>\n<li>Files on the local file system (these are a little buggy at the moment, but still usable)</li>\n</ul>\n</blockquote>\n<p>To serve any of these, you need to create their corresponding resources. These are called <cite>String Source</cite>, <cite>URL Source</cite> and <cite>File Source</cite>.\nYou\u2019ll find all of these on the admin page, in the entry for the app <cite>Localsrv</cite>. Try to create a <cite>String Source</cite>, and specify the content\nto be this JSON for example (you can use any string you wish, of course)</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"asdf\"</span><span class=\"p\">:</span> <span class=\"s2\">\"zxcv\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"qwer\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Also, along with the content, you can specify what additional HTTP Headers should be provided. Specifying these is easy. You must create\na <cite>Servable Http Header</cite>, where you\u2019ll be prompted for a name (e.g. <strong>content-type</strong>) and a value (e.g. <strong>application/json</strong>)</p>\n<p>Now finally, you\u2019ll need to specify where to serve your content. This is done by creating a <cite>Servable Content</cite> object, on the same admin page.\nFor it, you\u2019ll use a source that you defined previously, and (optionally) a header that you also defined. You\u2019ll also have to specify a path\nto serve this content from.</p>\n<p>Since in this example we introduced the url pattern <cite>r\u2019^localsrv/</cite>, let\u2019s stick to this pattern and specify a path of <cite>/localsrv/my_json</cite>.\nThe path you choose here can be anything (that ca be considered a URL). We namespaced the url with <cite>/localsrv/</cite> just to avoid any collisions\nwith previous url pattern. The way <cite>localsrv</cite> handles requests is that it will respond to any unmatched URL, that starts with the namespace\nprovided, so in our example <strong>/localsrv/asdaf/4/foo/bar</strong> will match the <cite>localsrv</cite> urls, and will return either a 404, or some content\nthat you defined for this path.</p>\n<p>Finally, when accessing the URLs you configred (in our example <cite>/localsrv/my_json</cite>) you\u2019ll see your json string delivered with the proper\ncontent type header.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To run the all tests run:</p>\n<pre>tox\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.1.2 (2015-04-26)</h3>\n<ul>\n<li>Documentation chages only</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.1 (2015-04-18)</h3>\n<ul>\n<li>Added test_settings module for running the app out of the box.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0 (2015-04-18)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1521889, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "63ba8b866ab3ad4ef86e2943ea22342a", "sha256": "e7e6b4d868beb0c2ab0289d8b4a39903b0e799ebec5203d013b8b0c17216da63"}, "downloads": -1, "filename": "django-localsrv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "63ba8b866ab3ad4ef86e2943ea22342a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30820, "upload_time": "2015-04-18T09:09:06", "upload_time_iso_8601": "2015-04-18T09:09:06.971625Z", "url": "https://files.pythonhosted.org/packages/40/cb/5fec16bc53d8bd570baea24651232128f860f0ec3c8ae33f81bf2365d977/django-localsrv-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ae9afcb58d44541897c83c6d656dae49", "sha256": "4297516a579da220ed549d10cb115b77aeb12614997e1b236b76f8563b167a74"}, "downloads": -1, "filename": "django-localsrv-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ae9afcb58d44541897c83c6d656dae49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30963, "upload_time": "2015-04-18T09:18:41", "upload_time_iso_8601": "2015-04-18T09:18:41.023630Z", "url": "https://files.pythonhosted.org/packages/a8/27/ead680c592636cdeb9a1aec21b201b45cba048d8706e308ab58162030cce/django-localsrv-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "11a1a03730ab751838b86591b2ed0b74", "sha256": "981269f64ec09e4dc2f8e946fad4bbda07a8c51e3e813b625d38149b5c6b0dad"}, "downloads": -1, "filename": "django-localsrv-0.1.2.tar.gz", "has_sig": false, "md5_digest": "11a1a03730ab751838b86591b2ed0b74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25399, "upload_time": "2015-04-26T18:19:58", "upload_time_iso_8601": "2015-04-26T18:19:58.258367Z", "url": "https://files.pythonhosted.org/packages/4c/e3/d2ef85aa5433fc35dd51af20e0e6af9b2dc91d816ea61f937d3ff4146865/django-localsrv-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "11a1a03730ab751838b86591b2ed0b74", "sha256": "981269f64ec09e4dc2f8e946fad4bbda07a8c51e3e813b625d38149b5c6b0dad"}, "downloads": -1, "filename": "django-localsrv-0.1.2.tar.gz", "has_sig": false, "md5_digest": "11a1a03730ab751838b86591b2ed0b74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25399, "upload_time": "2015-04-26T18:19:58", "upload_time_iso_8601": "2015-04-26T18:19:58.258367Z", "url": "https://files.pythonhosted.org/packages/4c/e3/d2ef85aa5433fc35dd51af20e0e6af9b2dc91d816ea61f937d3ff4146865/django-localsrv-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:17 2020"}