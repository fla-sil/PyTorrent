{"info": {"author": "Thomas Khyn", "author_email": "thomas@ksytek.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Plugins", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing", "Topic :: Utilities"], "description": "django-jsdir\n============\n\n|copyright| 2014-2015 Thomas Khyn, MIT License\n\n\nAbout\n-----\n\nWhen your project tightly depends on a relatively large amount of JavaScript\ncode, the natural way of dealing with it is to break the JavaScript code down\ninto several sub-scripts. This both improves readability and ease of debugging.\n\nHowever, there are times when you would be happy to only have one - possibly\ncompressed - file (in production for example) or to not have to link every\nsingle standalone js file in your template in development.\n\n``django-jsdir`` aims at solving this issue by providing a way to automatically\nlink the js files in a directory tree with a single template tag and inclusion,\nexclusion or sorting rules. In this regard it is significantly more flexible\nthan django-pipeline_.\n\n``django-jsdir`` has been tested with Django 1.8+ and latest compatible minor\nPyhton versions (2.7 and 3.5). It may work - without guarantee - for earlier\nDjango versions.\n\nIf you like ``django-jsdir`` and are looking for a way to thank me and/or\nencourage future development, you can send a few mBTC at this Bitcoin address:\n``1EwENyR8RV6tMc1hsLTkPURtn5wJgaBfG9``.\n\n\nSetup\n-----\n\n1. Install using your prefered method, e.g ``pip install django-jsdir``\n2. You will need both ``'jsdir'`` and ``'django.contrib.staticfiles'`` in your\n   ``INSTALLED_APPS``. Make sure that ``'jsdir'`` is placed `before`\n   ``'django.contrib.staticfiles'``.\n3. If you are using Jinja2, add ``'jsdir.jinja2.ext'`` to your Jinja2\n   extensions list\n\n\nHow it works\n------------\n\nDirectory concatenation\n.......................\n\nA short real-life example is better than long boring explanations. Suppose you\nhave the following JS files layout::\n\n    static/js/\n        big_script/\n            00_init.js\n            10_helpers.js\n            50_core.js\n            99_onload.js\n\nAll the files in big_script are nicely formatted and commented javascript\nfiles, perfect for debugging. But you have to include each js file from\nbig_script in your template. And even worse, when deploying your application,\nyou need to concatenate/compress the big_script directory and update your\ntemplate accordingly. All that entirely manually.\n\nUntil now.\n\nWith ``django-jsdir`` and a few minimal changes, you will not have to worry\nabout that anymore. The only thing to do is to get rid of all the ``<script>``\ntags refering to big_script/\\*.js files in your template, and replace them by::\n\n    {% jsdir 'big_script' %}\n\n``django-jsdir`` will then take care of:\n\n1. linking all the scripts nested under big_script directory tree when in\n   development mode with files served from the application's static directory.\n   This will change nothing from the developer's point of view, except he won't\n   need to update the script list anymore\n2. concatenating (and possibly compressing, with the help of\n   django-compressor_) all the nested subscripts in one file named\n   `big_script.dir.js` either on the first request or when you'll run\n   ``manage.py collectstatic``, depending if the file already exists or not\n3. linking the generated `big_script.dir.js` when in production mode\n\nIn other words, you do not have to change your production template (or scratch\nyour head to find a way to do it programmatically with conditional extends or\nincludes) AND you do not have to manually concatenate and/or compress your JS\nfiles anymore.\n\n\n.. warning:: As in JS, the order in which the files are loaded matters, it is\n   worth noting that the default concatenation order will be alphabetic. Use\n   numbers with a fixed number of digits to name your JS files, for example.\n\n.. note:: If a directory bar.js is nested into a foo.js directory, no bar.js\n   file will be generated. All the files in the bar.js directory will be\n   concatenated in the foo.js file.\n\n\n``include`` and ``exclude`` keywords\n++++++++++++++++++++++++++++++++++++\n\n``django-jsdir`` has ways to refine what files in the directory you want to\nexplicitely include or exclude.\n\nUse them like that::\n\n   {% jsdir 'libs' expand=True include='jquery/jquery.js; jquery-ui/ui/*.js' exclude='effect-*.js' %}\n\nThis will load ``jquery.js`` and all the ``jquery-ui`` files except the effect\nfiles.\n\nThe patterns:\n\n    - are Unix-like. See fnmatch_.\n    - should either be provided as a semicolon-separated string (spaces at the\n      beginning and at the end of each pattern are stripped) or, for ``jinja2``\n      templates, as a list or tuple\n    - 'file.js' will matche both 'file.js' `and` 'file.min.js'\n\n.. note::\n\n    The ``include`` keyword as priority over the ``exclude`` one. When the\n    ``include`` keyword is provided, all files not matching patterns in the\n    ``include`` keyword will be excluded.\n\n\n``name`` keyword\n++++++++++++++++\n\nThe ``name`` keyword is only used when you are loading a directory multiple\ntimes, to avoid name collision on concatenation.\n\nFor example::\n\n   {% jsdir 'libs' exclude='jquery-ui/**' %}\n   {% jsdir 'libs' name='jquery-ui' include='jquery-ui/**' %}\n\nwill create, in production mode, 2 files ``libs.dir.js`` and\n``libs.jquery-ui.dir.js``. ``libs.dir.js`` will contain all libraries except\n``jquery-ui``, while ``libs.jquery-ui.dir.js`` will contain only ``jquery-ui``.\n\nThis is particularly useful when you need to generate 2 files containing\ndifferent libraries that are located in one directory (when using ``bower`` to\nmanage your javascript libraries, for example).\n\n\nInclusion of all files in a directory\n.....................................\n\nSometimes, you will prefer to import the javascript files from a directory\nwithout seeing them concatenated at all. It is the case if you have a 'lib'\nfolder containing javascript librairies. In that situation, you may use the\ntag argument ``expand``::\n\n   {% jsdir 'lib/' expand=True %}\n\nIn production (i.e. with ``DEBUG = False``), jsdir will look for minified\nversions of the scripts (files named \\*.min.js) and return corresponding HTML\ntags. If you don't want this behavior, you can use the tag argument\n``minified`` and set it to ``False``::\n\n   {% jsdir 'lib' expand=True minified=False %}\n\nRemember that the order in which the HTML tags will appear in the document,\nand therefore the order in which the JS files will be loaded is still\nalphabetic. You can however ask django-jsdir to load certain files first or\nlast.\n\n\n``first`` and ``last`` keywords\n+++++++++++++++++++++++++++++++\n\nIn case you want to load some files first in the included expanded directory,\n``django-jsdir`` provides the ``first`` and ``last`` keywords.\n\nUse them like that::\n\n   {% jsdir 'lib' expand=True first='1st_pattern; 2nd_pattern' last='verylast_parttern; 2ndtolast_pattern' %}\n\nAny file which name matches the glob pattern '1st_pattern' will be loaded\nbefore any file which name matches '2nd_pattern', which will be loaded before\nany other file, which will be loaded before any file which name matches\n'2ndtolast_pattern', which will be loaded before any file which name matches\n'verylast_pattern'.\n\n.. warning::\n   ``first`` and ``last`` keywords are only available when ``expand=True`` is\n   used\n\n.. note::\n   If you are using the ``include`` keyword described above, there is no need\n   to relist them in the ``first`` keyword argument. Indeed, the ``include``\n   keyword already has a sorting functionality.\n\nCompression\n-----------\n\nIf you wish to have big_script.dir.js compressed, ``django-jsdir`` integrates\nwithout a fuss with django-compressor_. In production, the script gets\ncompressed like any other js file. Simply use::\n\n    {% compress %}\n        {% jsdir 'big_script' %}\n    {% endcompress %}\n\n\nSettings\n--------\n\nJSDIR_JSURL\n    The default url to access the javascript files directory, relative to the\n    static files root. Defaults to ``'js'``. This prefix can be bypassed using\n    'absolute' paths (for example ``{% jsdir '/path/to/dir' %}``).\n\n\n.. |copyright| unicode:: 0xA9\n.. _django-pipeline: http://django-pipeline.readthedocs.org\n.. _django-compressor: http://django-compressor.readthedocs.org\n.. _fnmatch: https://docs.python.org/2/library/fnmatch.html", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/tkhyn/django-jsdir/", "keywords": "js,javascript,directory,concatenate", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-jsdir", "package_url": "https://pypi.org/project/django-jsdir/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-jsdir/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/tkhyn/django-jsdir/"}, "release_url": "https://pypi.org/project/django-jsdir/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Eases the management of JS files in a django app", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>\u00a9 2014-2015 Thomas Khyn, MIT License</p>\n<div id=\"about\">\n<h2>About</h2>\n<p>When your project tightly depends on a relatively large amount of JavaScript\ncode, the natural way of dealing with it is to break the JavaScript code down\ninto several sub-scripts. This both improves readability and ease of debugging.</p>\n<p>However, there are times when you would be happy to only have one - possibly\ncompressed - file (in production for example) or to not have to link every\nsingle standalone js file in your template in development.</p>\n<p><tt><span class=\"pre\">django-jsdir</span></tt> aims at solving this issue by providing a way to automatically\nlink the js files in a directory tree with a single template tag and inclusion,\nexclusion or sorting rules. In this regard it is significantly more flexible\nthan <a href=\"http://django-pipeline.readthedocs.org\" rel=\"nofollow\">django-pipeline</a>.</p>\n<p><tt><span class=\"pre\">django-jsdir</span></tt> has been tested with Django 1.8+ and latest compatible minor\nPyhton versions (2.7 and 3.5). It may work - without guarantee - for earlier\nDjango versions.</p>\n<p>If you like <tt><span class=\"pre\">django-jsdir</span></tt> and are looking for a way to thank me and/or\nencourage future development, you can send a few mBTC at this Bitcoin address:\n<tt>1EwENyR8RV6tMc1hsLTkPURtn5wJgaBfG9</tt>.</p>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<ol>\n<li>Install using your prefered method, e.g <tt>pip install <span class=\"pre\">django-jsdir</span></tt></li>\n<li>You will need both <tt>'jsdir'</tt> and <tt>'django.contrib.staticfiles'</tt> in your\n<tt>INSTALLED_APPS</tt>. Make sure that <tt>'jsdir'</tt> is placed <cite>before</cite>\n<tt>'django.contrib.staticfiles'</tt>.</li>\n<li>If you are using Jinja2, add <tt>'jsdir.jinja2.ext'</tt> to your Jinja2\nextensions list</li>\n</ol>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<div id=\"directory-concatenation\">\n<h3>Directory concatenation</h3>\n<p>A short real-life example is better than long boring explanations. Suppose you\nhave the following JS files layout:</p>\n<pre>static/js/\n    big_script/\n        00_init.js\n        10_helpers.js\n        50_core.js\n        99_onload.js\n</pre>\n<p>All the files in big_script are nicely formatted and commented javascript\nfiles, perfect for debugging. But you have to include each js file from\nbig_script in your template. And even worse, when deploying your application,\nyou need to concatenate/compress the big_script directory and update your\ntemplate accordingly. All that entirely manually.</p>\n<p>Until now.</p>\n<p>With <tt><span class=\"pre\">django-jsdir</span></tt> and a few minimal changes, you will not have to worry\nabout that anymore. The only thing to do is to get rid of all the <tt>&lt;script&gt;</tt>\ntags refering to big_script/*.js files in your template, and replace them by:</p>\n<pre>{% jsdir 'big_script' %}\n</pre>\n<p><tt><span class=\"pre\">django-jsdir</span></tt> will then take care of:</p>\n<ol>\n<li>linking all the scripts nested under big_script directory tree when in\ndevelopment mode with files served from the application\u2019s static directory.\nThis will change nothing from the developer\u2019s point of view, except he won\u2019t\nneed to update the script list anymore</li>\n<li>concatenating (and possibly compressing, with the help of\n<a href=\"http://django-compressor.readthedocs.org\" rel=\"nofollow\">django-compressor</a>) all the nested subscripts in one file named\n<cite>big_script.dir.js</cite> either on the first request or when you\u2019ll run\n<tt>manage.py collectstatic</tt>, depending if the file already exists or not</li>\n<li>linking the generated <cite>big_script.dir.js</cite> when in production mode</li>\n</ol>\n<p>In other words, you do not have to change your production template (or scratch\nyour head to find a way to do it programmatically with conditional extends or\nincludes) AND you do not have to manually concatenate and/or compress your JS\nfiles anymore.</p>\n<div>\n<p>Warning</p>\n<p>As in JS, the order in which the files are loaded matters, it is\nworth noting that the default concatenation order will be alphabetic. Use\nnumbers with a fixed number of digits to name your JS files, for example.</p>\n</div>\n<div>\n<p>Note</p>\n<p>If a directory bar.js is nested into a foo.js directory, no bar.js\nfile will be generated. All the files in the bar.js directory will be\nconcatenated in the foo.js file.</p>\n</div>\n<div id=\"include-and-exclude-keywords\">\n<h4><tt>include</tt> and <tt>exclude</tt> keywords</h4>\n<p><tt><span class=\"pre\">django-jsdir</span></tt> has ways to refine what files in the directory you want to\nexplicitely include or exclude.</p>\n<p>Use them like that:</p>\n<pre>{% jsdir 'libs' expand=True include='jquery/jquery.js; jquery-ui/ui/*.js' exclude='effect-*.js' %}\n</pre>\n<p>This will load <tt>jquery.js</tt> and all the <tt><span class=\"pre\">jquery-ui</span></tt> files except the effect\nfiles.</p>\n<p>The patterns:</p>\n<blockquote>\n<ul>\n<li>are Unix-like. See <a href=\"https://docs.python.org/2/library/fnmatch.html\" rel=\"nofollow\">fnmatch</a>.</li>\n<li>should either be provided as a semicolon-separated string (spaces at the\nbeginning and at the end of each pattern are stripped) or, for <tt>jinja2</tt>\ntemplates, as a list or tuple</li>\n<li>\u2018file.js\u2019 will matche both \u2018file.js\u2019 <cite>and</cite> \u2018file.min.js\u2019</li>\n</ul>\n</blockquote>\n<div>\n<p>Note</p>\n<p>The <tt>include</tt> keyword as priority over the <tt>exclude</tt> one. When the\n<tt>include</tt> keyword is provided, all files not matching patterns in the\n<tt>include</tt> keyword will be excluded.</p>\n</div>\n</div>\n<div id=\"name-keyword\">\n<h4><tt>name</tt> keyword</h4>\n<p>The <tt>name</tt> keyword is only used when you are loading a directory multiple\ntimes, to avoid name collision on concatenation.</p>\n<p>For example:</p>\n<pre>{% jsdir 'libs' exclude='jquery-ui/**' %}\n{% jsdir 'libs' name='jquery-ui' include='jquery-ui/**' %}\n</pre>\n<p>will create, in production mode, 2 files <tt>libs.dir.js</tt> and\n<tt><span class=\"pre\">libs.jquery-ui.dir.js</span></tt>. <tt>libs.dir.js</tt> will contain all libraries except\n<tt><span class=\"pre\">jquery-ui</span></tt>, while <tt><span class=\"pre\">libs.jquery-ui.dir.js</span></tt> will contain only <tt><span class=\"pre\">jquery-ui</span></tt>.</p>\n<p>This is particularly useful when you need to generate 2 files containing\ndifferent libraries that are located in one directory (when using <tt>bower</tt> to\nmanage your javascript libraries, for example).</p>\n</div>\n</div>\n<div id=\"inclusion-of-all-files-in-a-directory\">\n<h3>Inclusion of all files in a directory</h3>\n<p>Sometimes, you will prefer to import the javascript files from a directory\nwithout seeing them concatenated at all. It is the case if you have a \u2018lib\u2019\nfolder containing javascript librairies. In that situation, you may use the\ntag argument <tt>expand</tt>:</p>\n<pre>{% jsdir 'lib/' expand=True %}\n</pre>\n<p>In production (i.e. with <tt>DEBUG = False</tt>), jsdir will look for minified\nversions of the scripts (files named *.min.js) and return corresponding HTML\ntags. If you don\u2019t want this behavior, you can use the tag argument\n<tt>minified</tt> and set it to <tt>False</tt>:</p>\n<pre>{% jsdir 'lib' expand=True minified=False %}\n</pre>\n<p>Remember that the order in which the HTML tags will appear in the document,\nand therefore the order in which the JS files will be loaded is still\nalphabetic. You can however ask django-jsdir to load certain files first or\nlast.</p>\n<div id=\"first-and-last-keywords\">\n<h4><tt>first</tt> and <tt>last</tt> keywords</h4>\n<p>In case you want to load some files first in the included expanded directory,\n<tt><span class=\"pre\">django-jsdir</span></tt> provides the <tt>first</tt> and <tt>last</tt> keywords.</p>\n<p>Use them like that:</p>\n<pre>{% jsdir 'lib' expand=True first='1st_pattern; 2nd_pattern' last='verylast_parttern; 2ndtolast_pattern' %}\n</pre>\n<p>Any file which name matches the glob pattern \u20181st_pattern\u2019 will be loaded\nbefore any file which name matches \u20182nd_pattern\u2019, which will be loaded before\nany other file, which will be loaded before any file which name matches\n\u20182ndtolast_pattern\u2019, which will be loaded before any file which name matches\n\u2018verylast_pattern\u2019.</p>\n<div>\n<p>Warning</p>\n<p><tt>first</tt> and <tt>last</tt> keywords are only available when <tt>expand=True</tt> is\nused</p>\n</div>\n<div>\n<p>Note</p>\n<p>If you are using the <tt>include</tt> keyword described above, there is no need\nto relist them in the <tt>first</tt> keyword argument. Indeed, the <tt>include</tt>\nkeyword already has a sorting functionality.</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"compression\">\n<h2>Compression</h2>\n<p>If you wish to have big_script.dir.js compressed, <tt><span class=\"pre\">django-jsdir</span></tt> integrates\nwithout a fuss with <a href=\"http://django-compressor.readthedocs.org\" rel=\"nofollow\">django-compressor</a>. In production, the script gets\ncompressed like any other js file. Simply use:</p>\n<pre>{% compress %}\n    {% jsdir 'big_script' %}\n{% endcompress %}\n</pre>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<dl>\n<dt>JSDIR_JSURL</dt>\n<dd>The default url to access the javascript files directory, relative to the\nstatic files root. Defaults to <tt>'js'</tt>. This prefix can be bypassed using\n\u2018absolute\u2019 paths (for example <tt>{% jsdir '/path/to/dir' %}</tt>).</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 1781204, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "a54df86e2afc2555e65d6480865b8390", "sha256": "6ca8fa5af1e841b834b102ca401ed4e043845475c042d9b2e93a219412f7df50"}, "downloads": -1, "filename": "django-jsdir-0.1.3.zip", "has_sig": false, "md5_digest": "a54df86e2afc2555e65d6480865b8390", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18609, "upload_time": "2014-11-19T09:47:28", "upload_time_iso_8601": "2014-11-19T09:47:28.378595Z", "url": "https://files.pythonhosted.org/packages/89/a4/36444f1d3abe928a368c557e160f427260e9b95ace1b368a255d9e5e3d4f/django-jsdir-0.1.3.zip", "yanked": false}], "0.1.3b1": [{"comment_text": "", "digests": {"md5": "3a99bc8b09e607aab03a6e439861f747", "sha256": "b6e08b51f5ae91c82f974af4b9d0b9ca826db6972bc5a69951c8c2640128827d"}, "downloads": -1, "filename": "django_jsdir-0.1.3b1-py2.7.egg", "has_sig": false, "md5_digest": "3a99bc8b09e607aab03a6e439861f747", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 20008, "upload_time": "2014-07-20T10:14:39", "upload_time_iso_8601": "2014-07-20T10:14:39.685014Z", "url": "https://files.pythonhosted.org/packages/49/9d/2be1baec9830910a80a6ebf5862b2a15368705a5b61b661ee19618e29dda/django_jsdir-0.1.3b1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "26d441c2cdf1296d810914af3bfe4068", "sha256": "36b10ce9681d9b46b13d98b10e56a66bb8645822017bee6b98e7b355445141e0"}, "downloads": -1, "filename": "django-jsdir-0.1.3b1.zip", "has_sig": false, "md5_digest": "26d441c2cdf1296d810914af3bfe4068", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17371, "upload_time": "2014-07-20T10:14:28", "upload_time_iso_8601": "2014-07-20T10:14:28.632015Z", "url": "https://files.pythonhosted.org/packages/4d/d0/7e247f11f298b1cdcac4e316dce5ee8cfc28c8468f24fd4a6ae6cfa09bd7/django-jsdir-0.1.3b1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "09d4b8397c9182a61f0f9b1590c514ae", "sha256": "47879625715f319ffd093e9b9057c060f88639f58685356e30552ed7674ffb52"}, "downloads": -1, "filename": "django-jsdir-0.2.zip", "has_sig": false, "md5_digest": "09d4b8397c9182a61f0f9b1590c514ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19379, "upload_time": "2015-01-07T00:45:37", "upload_time_iso_8601": "2015-01-07T00:45:37.164967Z", "url": "https://files.pythonhosted.org/packages/9f/f1/50bbee09d643ebc23fbf592469cf4d49ab91053d8785b0d2f0619c5a9c53/django-jsdir-0.2.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "fef5620a34f6ceb7e3db20b310732cc9", "sha256": "ae11354683ac013bdc9516f4b30d2ddcab18ae1d561186b0fc02ea91ebc60147"}, "downloads": -1, "filename": "django-jsdir-0.2.1.zip", "has_sig": false, "md5_digest": "fef5620a34f6ceb7e3db20b310732cc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19561, "upload_time": "2015-04-16T10:36:55", "upload_time_iso_8601": "2015-04-16T10:36:55.116501Z", "url": "https://files.pythonhosted.org/packages/8c/7a/b039188947f41644c1ded47e6c75fe56085c74b1dc9c1cf0cf783115107f/django-jsdir-0.2.1.zip", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "bdbdbada40609a9cf57728a24ab3e9b0", "sha256": "bad4fb0d30ae199ca18735828c676e97246a24166d2b44179f5067375988f05c"}, "downloads": -1, "filename": "django-jsdir-0.3.zip", "has_sig": false, "md5_digest": "bdbdbada40609a9cf57728a24ab3e9b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21551, "upload_time": "2015-10-22T04:34:19", "upload_time_iso_8601": "2015-10-22T04:34:19.465692Z", "url": "https://files.pythonhosted.org/packages/9d/dc/1968da5a5f9626cdc05c7cfb47f8ddac66b649f0c6b1915b4e402ec5a78b/django-jsdir-0.3.zip", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "6eae8d4cc57c7d91601826e098b52bab", "sha256": "1880b586292a95366580f9db4659c216bce228fd3b0dd4d44391cc5ad2d91b27"}, "downloads": -1, "filename": "django-jsdir-0.3.1.zip", "has_sig": false, "md5_digest": "6eae8d4cc57c7d91601826e098b52bab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21823, "upload_time": "2015-10-22T11:10:38", "upload_time_iso_8601": "2015-10-22T11:10:38.377993Z", "url": "https://files.pythonhosted.org/packages/5d/9b/2b7aea45df88516bf0274fcf7edabc8d6eac95062b839fde3ff83bce5492/django-jsdir-0.3.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6eae8d4cc57c7d91601826e098b52bab", "sha256": "1880b586292a95366580f9db4659c216bce228fd3b0dd4d44391cc5ad2d91b27"}, "downloads": -1, "filename": "django-jsdir-0.3.1.zip", "has_sig": false, "md5_digest": "6eae8d4cc57c7d91601826e098b52bab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21823, "upload_time": "2015-10-22T11:10:38", "upload_time_iso_8601": "2015-10-22T11:10:38.377993Z", "url": "https://files.pythonhosted.org/packages/5d/9b/2b7aea45df88516bf0274fcf7edabc8d6eac95062b839fde3ff83bce5492/django-jsdir-0.3.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:35:30 2020"}