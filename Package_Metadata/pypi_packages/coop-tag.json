{"info": {"author": "Cooperative Quinode", "author_email": "contact@quinode.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Natural Language :: French", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"], "description": "coop-tag\n========\n\nAn app for managing tags largely built on `django-taggit <http://github.com/quinode/django-taggit>`_\nWe integrated in this package two other add-ons for taggit :\n- `django-taggit-autosuggest <https://bitbucket.org/quinode/django-taggit-autosuggest>`_\n- `django-taggit-templatetags <https://github.com/quinode/django-taggit-templatetags>`_\n\nSo we have a nice styled autocomplete widget and some templatetags to use taggit.\nTag slugs are unicode-friendly. That means accented letters are valid URI characters (like they should be !)\nSo you can have differents slugs for differents tags.\n\nInstallation and dependencies::\n    $ pip install git+git://github.com/quinode/django-templatetag-sugar.git\n    $ pip install django-autoslug\n    $ pip install unicode-slugify\n    $ pip install coop_tag\n\nAdd `coop_tag` (with an underscore) to INSTALLED_APPS in your django project settings.\nRun `python manage.py collectstatic` in your django project directory.\nAdd the following line a the bottom of your project's urls.py file::\n        (r'^', include('coop_tag.urls')),\n\n\nUsage\n=====\n\nTo enable Tags, just let the tagged model use the TaggableManager::\n\n    from django.db import models\n    from coop_tag.managers import TaggableManager\n\n    class SomeModel(models.Model):\n        ...\n        tags = TaggableManager(help_text=\"your optional help text\", blank=True,)\n\nIf you want to leverage Generic Relations, you can use a `through` model::\n\n    from coop_tag.managers import TaggableManager\n    from coop_tag.models import TaggedItem\n\n    class SomeModel(models.Model):\n        tags = TaggableManager(through=TaggedItem, blank=True,)\n\nThe Tag model and the optional TaggedItem model are configurable, you can use your owns (see seetings above)\n\nYou can use the great taggit API like so::\n\n    >>> apple = Food.objects.create(name=\"apple\")\n    >>> apple.tags.add(\"red\", \"green\", \"delicious\")\n    >>> apple.tags.all()\n    [<Tag: red>, <Tag: green>, <Tag: delicious>]\n    >>> apple.tags.remove(\"green\")\n    >>> apple.tags.all()\n    [<Tag: red>, <Tag: delicious>]\n    >>> Food.objects.filter(tags__name__in=[\"red\"])\n    [<Food: apple>, <Food: cherry>]\n\nTags will show up for you automatically in forms and the admin.\n\n\nTemplate tags\n=============\n\nFork of `django-taggit-templatetags`, a reusable django app which adds some templatetags to django-taggit_.\nThis particular fork uses a fork of django-templatetag-sugar_, by Jonas Geiregat, only this version allows us to give multiples arguments to a templatetag.\n\nNow there are some templatetags enabled, at the moment only to create lists of tags and tag-clouds.\nIn your templates, you need to load ``tagger_extras``::\n\n    ...\n    {% load tagger_extras %}\n    ...\n\n--------\nTaglists\n--------\n\nAfter loading ``tagger_extras`` you can create a list of tags for the whole project (in the sense of djangoproject), for an app (in the sense of djangoapp), for a model-class (to get a list for an instance of a model, just use its tag-field).\n\nFor the tags of a project, just do::\n\n    {% get_taglist asvar tags %}\n\nTo limit the number of tags::\n\n    {% get_taglist asvar tags count 25 %}\n\nFor the tags of an app, just do::\n\n    {% get_taglist asvar tags for_obj 'yourapp' %}\n\nFor the tags of a model, just do::\n\n    {% get_taglist asvar tags for_obj 'yourapp.yourmodel' %}\n\nYou can also customize the name of the tags manager in your model (the default is *tags*)::\n\n    {% get_taglist asvar tags for_obj 'yourapp.yourmodel:yourtags' %}\n\nNo matter what you do, you have a list of tags in the ``tags`` template variable. You can now iterate over it::\n\n    <ul id=\"tags\" class=\"indextags\">\n        {% get_taglist asvar all_tags for_obj target_app count 15 %}\n        {% for tag in all_tags %}\n        <li class=\"tag\">\n            <a href=\"{{ tag.get_absolute_url }}\">{{tag}} ({{tag.num_times}})</a>\n        </li>\n        {% endfor %}\n    </ul>\n\nAs you can see, each tag has an attribute ``num_times`` which declares how many times it was used. The list of tags is sorted descending by ``num_times``.\n\n\nInclusion-Tag\n-------------\n\nFor convenience, there's an inclusion-tag. It's used analogue. For example, for a taglist of a model, just do::\n\n    {% include_taglist 'yourapp.yourmodel' %}\n\nTagclouds\n---------\n\nA very popular way to navigate through tags is a tagcloud_.  This app provides some tags for that::\n\n    {% get_tagcloud as tags %}\n\nor::\n\n    {% get_tagcloud as tags for 'yourapp' %}\n\nor::\n\n    {% get_tagcloud as tags for 'yourapp.yourmodel' %}\n\nrespectivly. The resulting list of tags is ordered by their ``name`` attribute. Besides the ``num_items`` attribute, there's a ``weight`` attribute. Its maximum and minimum may be specified as the settings_ section reads.\n\nInclusion-Tag in Tagcloud\n-------------------------\n\nEven for the tagcloud there's an inclusion-tag. For example, for a tagcloud of a model, just do::\n\n{% include_tagcloud 'yourapp.yourmodel' %}\n\n.. _settings:\n\nOptional Settings\n=================\n\nTAGGER_TAG_MODEL (Defaults to 'coop_tag.models.Tag')\n    The Tag model used, if you happen to use a custom model.\nTAGGER_TAGGEDITEM_MODEL (Defaults to 'coop_tag.models.TaggedItem')\n    The Taggeditem model used, if you happen to use a custom model.\nTAGGER_FKEY_NAME (Defaults to 'coop_local.Tag')\n    The linked model on the through model can also be customized (use only if you have the two settings above set)\n\nTAGGER_STATIC_URL:\n    Instead of collecting and serving the static files directly, you can also set this variable to your static base URL somewhere else.\nTAGGER_CSS_FILENAME (Defaults to 'coop_tag.css'):\n    Set the CSS file which best fits your site elements.\nTAGGER_MAX_SUGGESTIONS (Defaults to 20):\n    The amount of suggestions is limited, you can raise or lower the limit of default 20 using this setting\nTAGGER_CLOUD_MIN (default: 1.0)\n    This specifies the minimum of the weight attribute of a tagcloud's tags.\nTAGGER_CLOUD_MAX (default: 6.0)\n    This specifies the maximum of the weight attribute of a tagcloud's tags.\n\nIf you want to use the weight as font-sizes, just do as follows::\n\n    <font size={{tag.weight|floatformat:0}}>{{tag}}</font>\n\nSo the weights are converted to integer values.\n\n\n.. _django-templatetag-sugar : https://github.com/jonasgeiregat/django-templatetag-sugar\n.. _django-taggit: http://pypi.python.org/pypi/django-taggit\n\n\n*** Credits ***\n    This project is directly based on those projects:\n    * Alex Gaynor\n        * https://github.com/alex/django-taggit\n    * Ludwik Trammer:\n        * http://code.google.com/p/django-tagging-autocomplete/\n    * Jeremy Epstein:\n        * https://github.com/Jaza/django-taggit-autocomplete\n    * Flavio Curella:\n        * https://github.com/fcurella/django-taggit-autocomplete\n    * Drew Wilson:\n        * http://code.drewwilson.com/entry/autosuggest-jquery-plugin\n    * Mathijs de Bruin:\n        * http://github.com/dokterbob\n\n\nLicense\n=======\ncoop-tag uses the same license as Django (BSD).\ncoop-tag development is currently funded by `CREDIS <http://credis.org/>`_, FSE (European Social Fund) and `Conseil Regional Auvergne <http://www.auvergne.fr/>`_.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/quinode/coop-tag/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/quinode/coop-tag/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "coop-tag", "package_url": "https://pypi.org/project/coop-tag/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/coop-tag/", "project_urls": {"Download": "https://github.com/quinode/coop-tag/tarball/master", "Homepage": "https://github.com/quinode/coop-tag/"}, "release_url": "https://pypi.org/project/coop-tag/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Repackaging django-taggit with add-ons", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            coop-tag<br>========<br><br>An app for managing tags largely built on `django-taggit &lt;http://github.com/quinode/django-taggit&gt;`_<br>We integrated in this package two other add-ons for taggit :<br>- `django-taggit-autosuggest &lt;https://bitbucket.org/quinode/django-taggit-autosuggest&gt;`_<br>- `django-taggit-templatetags &lt;https://github.com/quinode/django-taggit-templatetags&gt;`_<br><br>So we have a nice styled autocomplete widget and some templatetags to use taggit.<br>Tag slugs are unicode-friendly. That means accented letters are valid URI characters (like they should be !)<br>So you can have differents slugs for differents tags.<br><br>Installation and dependencies::<br>    $ pip install git+git://github.com/quinode/django-templatetag-sugar.git<br>    $ pip install django-autoslug<br>    $ pip install unicode-slugify<br>    $ pip install coop_tag<br><br>Add `coop_tag` (with an underscore) to INSTALLED_APPS in your django project settings.<br>Run `python manage.py collectstatic` in your django project directory.<br>Add the following line a the bottom of your project's urls.py file::<br>        (r'^', include('coop_tag.urls')),<br><br><br>Usage<br>=====<br><br>To enable Tags, just let the tagged model use the TaggableManager::<br><br>    from django.db import models<br>    from coop_tag.managers import TaggableManager<br><br>    class SomeModel(models.Model):<br>        ...<br>        tags = TaggableManager(help_text=\"your optional help text\", blank=True,)<br><br>If you want to leverage Generic Relations, you can use a `through` model::<br><br>    from coop_tag.managers import TaggableManager<br>    from coop_tag.models import TaggedItem<br><br>    class SomeModel(models.Model):<br>        tags = TaggableManager(through=TaggedItem, blank=True,)<br><br>The Tag model and the optional TaggedItem model are configurable, you can use your owns (see seetings above)<br><br>You can use the great taggit API like so::<br><br>    &gt;&gt;&gt; apple = Food.objects.create(name=\"apple\")<br>    &gt;&gt;&gt; apple.tags.add(\"red\", \"green\", \"delicious\")<br>    &gt;&gt;&gt; apple.tags.all()<br>    [&lt;Tag: red&gt;, &lt;Tag: green&gt;, &lt;Tag: delicious&gt;]<br>    &gt;&gt;&gt; apple.tags.remove(\"green\")<br>    &gt;&gt;&gt; apple.tags.all()<br>    [&lt;Tag: red&gt;, &lt;Tag: delicious&gt;]<br>    &gt;&gt;&gt; Food.objects.filter(tags__name__in=[\"red\"])<br>    [&lt;Food: apple&gt;, &lt;Food: cherry&gt;]<br><br>Tags will show up for you automatically in forms and the admin.<br><br><br>Template tags<br>=============<br><br>Fork of `django-taggit-templatetags`, a reusable django app which adds some templatetags to django-taggit_.<br>This particular fork uses a fork of django-templatetag-sugar_, by Jonas Geiregat, only this version allows us to give multiples arguments to a templatetag.<br><br>Now there are some templatetags enabled, at the moment only to create lists of tags and tag-clouds.<br>In your templates, you need to load ``tagger_extras``::<br><br>    ...<br>    {% load tagger_extras %}<br>    ...<br><br>--------<br>Taglists<br>--------<br><br>After loading ``tagger_extras`` you can create a list of tags for the whole project (in the sense of djangoproject), for an app (in the sense of djangoapp), for a model-class (to get a list for an instance of a model, just use its tag-field).<br><br>For the tags of a project, just do::<br><br>    {% get_taglist asvar tags %}<br><br>To limit the number of tags::<br><br>    {% get_taglist asvar tags count 25 %}<br><br>For the tags of an app, just do::<br><br>    {% get_taglist asvar tags for_obj 'yourapp' %}<br><br>For the tags of a model, just do::<br><br>    {% get_taglist asvar tags for_obj 'yourapp.yourmodel' %}<br><br>You can also customize the name of the tags manager in your model (the default is *tags*)::<br><br>    {% get_taglist asvar tags for_obj 'yourapp.yourmodel:yourtags' %}<br><br>No matter what you do, you have a list of tags in the ``tags`` template variable. You can now iterate over it::<br><br>    &lt;ul id=\"tags\" class=\"indextags\"&gt;<br>        {% get_taglist asvar all_tags for_obj target_app count 15 %}<br>        {% for tag in all_tags %}<br>        &lt;li class=\"tag\"&gt;<br>            &lt;a href=\"{{ tag.get_absolute_url }}\"&gt;{{tag}} ({{tag.num_times}})&lt;/a&gt;<br>        &lt;/li&gt;<br>        {% endfor %}<br>    &lt;/ul&gt;<br><br>As you can see, each tag has an attribute ``num_times`` which declares how many times it was used. The list of tags is sorted descending by ``num_times``.<br><br><br>Inclusion-Tag<br>-------------<br><br>For convenience, there's an inclusion-tag. It's used analogue. For example, for a taglist of a model, just do::<br><br>    {% include_taglist 'yourapp.yourmodel' %}<br><br>Tagclouds<br>---------<br><br>A very popular way to navigate through tags is a tagcloud_.  This app provides some tags for that::<br><br>    {% get_tagcloud as tags %}<br><br>or::<br><br>    {% get_tagcloud as tags for 'yourapp' %}<br><br>or::<br><br>    {% get_tagcloud as tags for 'yourapp.yourmodel' %}<br><br>respectivly. The resulting list of tags is ordered by their ``name`` attribute. Besides the ``num_items`` attribute, there's a ``weight`` attribute. Its maximum and minimum may be specified as the settings_ section reads.<br><br>Inclusion-Tag in Tagcloud<br>-------------------------<br><br>Even for the tagcloud there's an inclusion-tag. For example, for a tagcloud of a model, just do::<br><br>{% include_tagcloud 'yourapp.yourmodel' %}<br><br>.. _settings:<br><br>Optional Settings<br>=================<br><br>TAGGER_TAG_MODEL (Defaults to 'coop_tag.models.Tag')<br>    The Tag model used, if you happen to use a custom model.<br>TAGGER_TAGGEDITEM_MODEL (Defaults to 'coop_tag.models.TaggedItem')<br>    The Taggeditem model used, if you happen to use a custom model.<br>TAGGER_FKEY_NAME (Defaults to 'coop_local.Tag')<br>    The linked model on the through model can also be customized (use only if you have the two settings above set)<br><br>TAGGER_STATIC_URL:<br>    Instead of collecting and serving the static files directly, you can also set this variable to your static base URL somewhere else.<br>TAGGER_CSS_FILENAME (Defaults to 'coop_tag.css'):<br>    Set the CSS file which best fits your site elements.<br>TAGGER_MAX_SUGGESTIONS (Defaults to 20):<br>    The amount of suggestions is limited, you can raise or lower the limit of default 20 using this setting<br>TAGGER_CLOUD_MIN (default: 1.0)<br>    This specifies the minimum of the weight attribute of a tagcloud's tags.<br>TAGGER_CLOUD_MAX (default: 6.0)<br>    This specifies the maximum of the weight attribute of a tagcloud's tags.<br><br>If you want to use the weight as font-sizes, just do as follows::<br><br>    &lt;font size={{tag.weight|floatformat:0}}&gt;{{tag}}&lt;/font&gt;<br><br>So the weights are converted to integer values.<br><br><br>.. _django-templatetag-sugar : https://github.com/jonasgeiregat/django-templatetag-sugar<br>.. _django-taggit: http://pypi.python.org/pypi/django-taggit<br><br><br>*** Credits ***<br>    This project is directly based on those projects:<br>    * Alex Gaynor<br>        * https://github.com/alex/django-taggit<br>    * Ludwik Trammer:<br>        * http://code.google.com/p/django-tagging-autocomplete/<br>    * Jeremy Epstein:<br>        * https://github.com/Jaza/django-taggit-autocomplete<br>    * Flavio Curella:<br>        * https://github.com/fcurella/django-taggit-autocomplete<br>    * Drew Wilson:<br>        * http://code.drewwilson.com/entry/autosuggest-jquery-plugin<br>    * Mathijs de Bruin:<br>        * http://github.com/dokterbob<br><br><br>License<br>=======<br>coop-tag uses the same license as Django (BSD).<br>coop-tag development is currently funded by `CREDIS &lt;http://credis.org/&gt;`_, FSE (European Social Fund) and `Conseil Regional Auvergne &lt;http://www.auvergne.fr/&gt;`_.\n          </div>"}, "last_serial": 788424, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "2ba41efacfe7862fb119086cfe83459a", "sha256": "ea24d59ce85a3e92b450b4b28da32edebc7c9260b731474332552c8dc25899b4"}, "downloads": -1, "filename": "coop-tag-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2ba41efacfe7862fb119086cfe83459a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5842, "upload_time": "2012-03-07T00:34:29", "upload_time_iso_8601": "2012-03-07T00:34:29.582238Z", "url": "https://files.pythonhosted.org/packages/6d/5f/3b6ca90db8e993e1130071c1b905c3e777819c99cb9d9e9ea9cea1392b57/coop-tag-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1e2b0560e3ca58096f159d3312a7c4c6", "sha256": "30de75dcc386c86e46c14ae593b2377b59cd403601922d12e6bf256ae9640547"}, "downloads": -1, "filename": "coop-tag-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1e2b0560e3ca58096f159d3312a7c4c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6178, "upload_time": "2012-03-07T22:40:41", "upload_time_iso_8601": "2012-03-07T22:40:41.384077Z", "url": "https://files.pythonhosted.org/packages/d3/15/23f4c5455fb0ef9950b00a85c9e60878bcf7690a048f70cf638f20301cf3/coop-tag-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ac1516e394afc7c5c74657817e50cdcc", "sha256": "4fc4b61520648e88c9293feeeb98ead48630401c0dd5c88af1203463e419b246"}, "downloads": -1, "filename": "coop-tag-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ac1516e394afc7c5c74657817e50cdcc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14619, "upload_time": "2012-03-13T15:01:40", "upload_time_iso_8601": "2012-03-13T15:01:40.061618Z", "url": "https://files.pythonhosted.org/packages/f7/04/d2d0a1a80d8d484bea3e64dbd061c6afc26208126c671a3f506ca488c222/coop-tag-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "efc1502331485a838f068b3b9b042b79", "sha256": "24c3cec3feb4e57efd2e70adc9a5341779924a8df7194de8d2d958a2c419b391"}, "downloads": -1, "filename": "coop-tag-0.1.4.tar.gz", "has_sig": false, "md5_digest": "efc1502331485a838f068b3b9b042b79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16531, "upload_time": "2012-05-09T22:03:01", "upload_time_iso_8601": "2012-05-09T22:03:01.794517Z", "url": "https://files.pythonhosted.org/packages/2e/87/3fc720f0578ef2c32a23ca0ad8d3d8017de0188e9c155f0fbe489ec17d67/coop-tag-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "1a363c8f38806cb35cf7687e49543d77", "sha256": "d2170105781a208db58a4793aa6dbb4fcf7c1ae2c8c33b42972fe83f04609a0e"}, "downloads": -1, "filename": "coop-tag-0.1.5.tar.gz", "has_sig": false, "md5_digest": "1a363c8f38806cb35cf7687e49543d77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16315, "upload_time": "2012-05-17T18:00:28", "upload_time_iso_8601": "2012-05-17T18:00:28.935543Z", "url": "https://files.pythonhosted.org/packages/89/ca/a78fe2921025d98d6840ddd50c371299413e18f4185d717e5c0562ec6e4f/coop-tag-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "3bd41ce018ee4f2bffd2c85632f3b459", "sha256": "8ac5a3a2896b29e2eac60cc30e1db5ee19539b13c638728e6d3077c320181a49"}, "downloads": -1, "filename": "coop-tag-0.1.6.tar.gz", "has_sig": false, "md5_digest": "3bd41ce018ee4f2bffd2c85632f3b459", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17441, "upload_time": "2012-05-30T17:57:40", "upload_time_iso_8601": "2012-05-30T17:57:40.446158Z", "url": "https://files.pythonhosted.org/packages/5f/dd/e26318f76543345435600128ab26be96be1c6a5eb3edf31f5fab425e94d1/coop-tag-0.1.6.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f655d64d47eb9614b44ce1ab457f101f", "sha256": "38e5c3f961e811feeb731acb06a6cafe2540170a74d9523c5fcb08549ef3f637"}, "downloads": -1, "filename": "coop-tag-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f655d64d47eb9614b44ce1ab457f101f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32628, "upload_time": "2012-09-20T15:15:02", "upload_time_iso_8601": "2012-09-20T15:15:02.347348Z", "url": "https://files.pythonhosted.org/packages/da/ef/66663f8823de36953a2ad9168832f8463126082c53553924e775d5143dea/coop-tag-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f655d64d47eb9614b44ce1ab457f101f", "sha256": "38e5c3f961e811feeb731acb06a6cafe2540170a74d9523c5fcb08549ef3f637"}, "downloads": -1, "filename": "coop-tag-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f655d64d47eb9614b44ce1ab457f101f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32628, "upload_time": "2012-09-20T15:15:02", "upload_time_iso_8601": "2012-09-20T15:15:02.347348Z", "url": "https://files.pythonhosted.org/packages/da/ef/66663f8823de36953a2ad9168832f8463126082c53553924e775d5143dea/coop-tag-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:19 2020"}