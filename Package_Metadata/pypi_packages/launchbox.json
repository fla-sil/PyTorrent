{"info": {"author": "Cosmin Stejerean", "author_email": "cosmin@offbytwo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "License :: OSI Approved :: Apache Software License", "Topic :: System :: Software Distribution", "Topic :: Utilities"], "description": "launchbox\n=========\n\nBundle cookbooks for use by chef-solo.\n\nLaunchbox supports transitive dependency resolution, chef version\ncontraints and exclusions (for those misbehaved cookbooks that depend on\nmore than they should).\n\nInput\n-----\n\nlaunchbox will look for YAML files under the ``roles`` and ``mixins`` in\nthe input directory (which defaults to ``./src``).\n\nAn example role will look like:\n\n::\n\n    ci:\n      include_mixins: [java]\n      jenkins:\n        http_proxy:\n          variant: nginx\n      cookbooks:\n        java: \"1.5.1\"\n        nginx: \"0.101.1\"\n        jenkins: \"0.6.3\"\n      run_list:\n        - java\n        - jenkins\n\nThink of mixins as partial roles for reusability. At run-time launchbox\nwill apply all mixins in order and then override any values with the\ndata in the role itself.\n\nCookbooks\n---------\n\nThe cookbooks specified for a role will be downloaded from the specified\nweb server or S3 bucket.\n\nS3\n~~\n\nTo use an S3 remote use ``launchbox --bucket your.bucket.name``\n\nIn the case of an S3 remote ``launchbox`` will look for the following\nkeys when downloading cookbooks:\n\n::\n\n    contents: cookbooks/<cookbook>/<version>/<cookbook>.tar.gz\n    metadata: cookbooks/<cookbook>/<version>/<cookbook>.json\n\n\nFor determining the available versions ``launchbox`` will list\nthe bucket and find all available versions.\n\nHTTP\n~~~~\n\nTo use an HTTP(S) remote use\n``lauchbox --url http://your/bucket/server``\n\nIn the case of an HTTP(s) remote ``launchbox`` will use the following URLs:\n\n::\n\n    contents: <URL>/<cookbook>/<version>/<cookbook>.tar.gz\n    metadata: <URL>/<cookbook>/<version>/<cookbook>.json\n    versions: <URL>/<cookbook>/versions.json\n\n\nOutput\n------\n\nAfter running launchbox the target folder will contain a JSON file with\nthe role metadata and tar.gz containing all the necessary cookbooks for\nthat role. It will also output the ``SHA-256`` of these two files.\n\nYou can supply these two files directly to ``chef-solo`` using ``-j\n<path/to/role.json>`` and ``-r </path/to/role.tar.gz>``\n\nUsage\n-----\n\nFor detailed usage information please run ``launchbox -h``", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/RisingOak/launchbox", "keywords": "chef chef-solo dependency package bundle", "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "launchbox", "package_url": "https://pypi.org/project/launchbox/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/launchbox/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/RisingOak/launchbox"}, "release_url": "https://pypi.org/project/launchbox/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Packaging and dependency resolution for chef-solo cookbooks", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Bundle cookbooks for use by chef-solo.</p>\n<p>Launchbox supports transitive dependency resolution, chef version\ncontraints and exclusions (for those misbehaved cookbooks that depend on\nmore than they should).</p>\n<div id=\"input\">\n<h2>Input</h2>\n<p>launchbox will look for YAML files under the <tt>roles</tt> and <tt>mixins</tt> in\nthe input directory (which defaults to <tt>./src</tt>).</p>\n<p>An example role will look like:</p>\n<pre>ci:\n  include_mixins: [java]\n  jenkins:\n    http_proxy:\n      variant: nginx\n  cookbooks:\n    java: \"1.5.1\"\n    nginx: \"0.101.1\"\n    jenkins: \"0.6.3\"\n  run_list:\n    - java\n    - jenkins\n</pre>\n<p>Think of mixins as partial roles for reusability. At run-time launchbox\nwill apply all mixins in order and then override any values with the\ndata in the role itself.</p>\n</div>\n<div id=\"cookbooks\">\n<h2>Cookbooks</h2>\n<p>The cookbooks specified for a role will be downloaded from the specified\nweb server or S3 bucket.</p>\n<div id=\"s3\">\n<h3>S3</h3>\n<p>To use an S3 remote use <tt>launchbox <span class=\"pre\">--bucket</span> your.bucket.name</tt></p>\n<p>In the case of an S3 remote <tt>launchbox</tt> will look for the following\nkeys when downloading cookbooks:</p>\n<pre>contents: cookbooks/&lt;cookbook&gt;/&lt;version&gt;/&lt;cookbook&gt;.tar.gz\nmetadata: cookbooks/&lt;cookbook&gt;/&lt;version&gt;/&lt;cookbook&gt;.json\n</pre>\n<p>For determining the available versions <tt>launchbox</tt> will list\nthe bucket and find all available versions.</p>\n</div>\n<div id=\"http\">\n<h3>HTTP</h3>\n<p>To use an HTTP(S) remote use\n<tt>lauchbox <span class=\"pre\">--url</span> <span class=\"pre\">http://your/bucket/server</span></tt></p>\n<p>In the case of an HTTP(s) remote <tt>launchbox</tt> will use the following URLs:</p>\n<pre>contents: &lt;URL&gt;/&lt;cookbook&gt;/&lt;version&gt;/&lt;cookbook&gt;.tar.gz\nmetadata: &lt;URL&gt;/&lt;cookbook&gt;/&lt;version&gt;/&lt;cookbook&gt;.json\nversions: &lt;URL&gt;/&lt;cookbook&gt;/versions.json\n</pre>\n</div>\n</div>\n<div id=\"output\">\n<h2>Output</h2>\n<p>After running launchbox the target folder will contain a JSON file with\nthe role metadata and tar.gz containing all the necessary cookbooks for\nthat role. It will also output the <tt><span class=\"pre\">SHA-256</span></tt> of these two files.</p>\n<p>You can supply these two files directly to <tt><span class=\"pre\">chef-solo</span></tt> using <tt><span class=\"pre\">-j</span>\n&lt;path/to/role.json&gt;</tt> and <tt><span class=\"pre\">-r</span> &lt;/path/to/role.tar.gz&gt;</tt></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>For detailed usage information please run <tt>launchbox <span class=\"pre\">-h</span></tt></p>\n</div>\n\n          </div>"}, "last_serial": 794076, "releases": {"0.1": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "dedf46de9b9fa6aa7352e814437a5054", "sha256": "05fc6ebdf2484110a966c4d31a2fff012915f1af338080c8fdacf693797205ae"}, "downloads": -1, "filename": "launchbox-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dedf46de9b9fa6aa7352e814437a5054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9812, "upload_time": "2013-01-03T05:32:16", "upload_time_iso_8601": "2013-01-03T05:32:16.050164Z", "url": "https://files.pythonhosted.org/packages/3a/42/713f59e0a0a4b6f0f92dd35e5816ede6e25f2ec52ce68237df7d28533f00/launchbox-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dedf46de9b9fa6aa7352e814437a5054", "sha256": "05fc6ebdf2484110a966c4d31a2fff012915f1af338080c8fdacf693797205ae"}, "downloads": -1, "filename": "launchbox-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dedf46de9b9fa6aa7352e814437a5054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9812, "upload_time": "2013-01-03T05:32:16", "upload_time_iso_8601": "2013-01-03T05:32:16.050164Z", "url": "https://files.pythonhosted.org/packages/3a/42/713f59e0a0a4b6f0f92dd35e5816ede6e25f2ec52ce68237df7d28533f00/launchbox-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:44 2020"}