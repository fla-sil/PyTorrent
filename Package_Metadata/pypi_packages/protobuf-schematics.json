{"info": {"author": "Almog Cohen", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "===================\nProtoBuf Schematics\n===================\n\n\n.. image:: https://img.shields.io/pypi/v/protobuf_schematics.svg\n        :target: https://pypi.python.org/pypi/protobuf_schematics\n\n.. image:: https://img.shields.io/travis/AlmogCohen/protobuf-schematics.svg\n        :target: https://travis-ci.org/AlmogCohen/protobuf-schematics\n\n.. image:: https://readthedocs.org/projects/protobuf-schematics/badge/?version=latest\n        :target: https://protobuf-schematics.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\nConvert ProtoBuf ``proto`` file to cute Schematics_ classes file.\n\nGoogle Protobuf is great when it comes to high performance schema aware APIs, but when Google designed Protobuf, it didn't tried to make the generated code idiomatic in Python, which brings a problem when exporting messages outside interface modules or having nice IDE auto-completions. Schematics is a cute and Pythonic schema library that goes well with most applications. Why not join both?\n\nCurrently this package does **not** support the Protobuf binary format and will work with a any other textual representation which is easily generated with the original Protobuf API for any language. Ease of use was prioritized while writing this package rather than mere performance.\n\n\n* Free software: Apache Software License 2.0\n* Documentation: https://protobuf-schematics.readthedocs.io.\n\n\n.. _Schematics: https://github.com/schematics/schematics\n\nUsage\n-----\n\n1. Convert the ``proto`` file to python Schematics_ classes::\n\n    protobuf_schematics <path-to-file.proto> generated_schematics_proto.py # or any output filename\n\n2. Convert your ProtoBuf message to Json:\n\nIn Java:\n\n.. code:: java\n\n    import com.google.protobuf.util.JsonFormat;\n\n    FileWriter file = new FileWriter(\"protoBufMessage.json\")\n    JsonFormat.Printer printer = JsonFormat.printer().preservingProtoFieldNames();\n    String message = printer.print(someProtoBufMessage);\n    file.write(message)\n\nor from Python:\n\n.. code:: python\n\n    import json\n    from google.protobuf.json_format import MessageToJson\n\n    json = MessageToJson(org, preserving_proto_field_name=True, including_default_value_fields=True)\n    with open(\"protoBufMessage.json\", 'w') as output:\n        json.dump(json, output)\n\n3. In your project, load the message in python as Schematics_ object:\n\n.. code:: python\n\n    import json\n    from generated_schematics_proto import SomeMessage # import the schematics message class\n\n    schematics_root_message = SomeMessage(json.load(open('protoBufMessage.json')))\n\nOr use a message loaded in python by Protobuf:\n\n.. code:: python\n\n    import json\n    from generated_schematics_proto import SomeMessage # import the schematics message class\n\n    # ... get your protobuf message as the pb class representation\n    schematics_root_message = SomeMessage.import_from_protobuf_message(protobuf_message)\n\n\n\nExample\n-------\n\nThis ``proto`` file:\n\n.. code-block:: proto\n\n    syntax = \"proto3\";\n\n    enum IPAddressFamily {\n        INVALID = 0;\n        IPv4 = 1;\n        IPv6 = 2;\n    };\n\n    message ProtocolAndPorts {\n        repeated uint32 ports = 3;\n    }\n\n    message FlowFilter {\n        enum SomeEnum {\n            VALUE = 0;\n        };\n        string id = 1 [deprecated = true];\n        SomeEnum consumer_filter_id = 2;\n        map<string, ProtocolAndPorts> ports = 3;\n        repeated ProtocolAndPorts protocol_and_ports = 4;\n    }\n\nWill be converted to:\n\n.. code-block:: python3\n\n    class IPAddressFamily(Enum):\n        INVALID = 0\n        IPv4 = 1\n        IPv6 = 2\n\n\n    class ProtocolAndPorts(ProtobufMessageModel):\n        ports = ListType(IntType())\n\n\n    class FlowFilter(ProtobufMessageModel):\n        class InnerEnum(Enum):\n            VALUE = 0\n\n        id = StringType()\n        consumer_filter_id = EnumType(SomeEnum)\n        ports = DictType(ModelType(ProtocolAndPorts), str)\n        protocol_and_ports = ListType(ModelType(ProtocolAndPorts))\n\n\n\n\nFeatures\n--------\n\n* Support both Protobuf syntax 2 and 3.\n* Support builtin types such as StringType, ``IntType``.\n* Support proto map fields as Schematics_ ``DictType``.\n* Support ``repeated`` modifier as convert to ``ListType``.\n* Support Enum class generation and custom Schematics ``EnumType``.\n* Support custom schematics ``ByteArrayType`` base64 encoded byte arrays converted from Java.\n\nDevelopment\n-----------\n\nFirst, install the Pipfile and create the proper virtual environment::\n\n    pipenv install --dev\n\nTo check linting with **flake8**, run::\n\n    make lint\n\nTo run the unittests against your working python version::\n\n    py.test\n\nTo see coverage report::\n\n    make coverage\n\nTo run tests against all supported python versions::\n\n    tox\n\nTo make the docs (which will be automatically published to readthedocs on commits to the master branch)::\n\n    make docs\n\nCredits\n-------\n\nThe parsing work of **.proto** files is provided thanks to the awesome guys at PyroBuf_.\n\nThis package was created with Cookiecutter_ and the `elgertam/cookiecutter-pipenv`_ project template, based on `audreyr/cookiecutter-pypackage`_.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`elgertam/cookiecutter-pipenv`: https://github.com/elgertam/cookiecutter-pipenv\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _PyroBuf: https://github.com/appnexus/pyrobuf\n\n\n=======\nHistory\n=======\n\nTODO\n----\n* Add more meaningful unittests.\n* Improve Protobuf support and integration.\n* add support for parsing the Protobuf generated files as it is more comprehensive than the current Pyrobuf support.\n\n\nRead for Release\n----------------\n\n\n0.4.0 (2019-01-16)\n------------------\n\n* Added more meaningful unittests.\n* Export Types and Models out of the templates.\n* Export heavy definition logic (such as field definition) from the jinja template to pythonic filters.\n* Improve integration with Protobuf.\n\n\n0.2.0 (2019-01-14)\n------------------\n\n* Improve README - Add usage examples.\n* Update the setup.py to point to official PyroBuf 0.8.5 PyPi release.\n\n\n0.1.0 (2019-01-13)\n------------------\n\n* First release on PyPI.\n* CLI interface for compiling a given proto file to schematics definition file.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AlmogCohen/protobuf-schematics", "keywords": "protobuf_schematics", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "protobuf-schematics", "package_url": "https://pypi.org/project/protobuf-schematics/", "platform": "", "project_url": "https://pypi.org/project/protobuf-schematics/", "project_urls": {"Homepage": "https://github.com/AlmogCohen/protobuf-schematics"}, "release_url": "https://pypi.org/project/protobuf-schematics/0.4.1/", "requires_dist": ["Click (>=6.0)", "jinja2", "pyrobuf (>=0.8.5)", "protobuf", "schematics", "typing", "six"], "requires_python": "", "summary": "Convert ProtoBuf proto file to cute Schematics classes file", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"protobuf-schematics\">\n<h2>ProtoBuf Schematics</h2>\n<a href=\"https://pypi.python.org/pypi/protobuf_schematics\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/protobuf_schematics.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ac4a48f172661b05fd3569b2170bf67f90600e6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70726f746f6275665f736368656d61746963732e737667\"></a>\n<a href=\"https://travis-ci.org/AlmogCohen/protobuf-schematics\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/AlmogCohen/protobuf-schematics.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a62e436d977010054d3ea13d3ca77087cebe85e/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f416c6d6f67436f68656e2f70726f746f6275662d736368656d61746963732e737667\"></a>\n<a href=\"https://protobuf-schematics.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f600b0b70794d56c123915831bf08f2292ebc62/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70726f746f6275662d736368656d61746963732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Convert ProtoBuf <tt>proto</tt> file to cute <a href=\"https://github.com/schematics/schematics\" rel=\"nofollow\">Schematics</a> classes file.</p>\n<p>Google Protobuf is great when it comes to high performance schema aware APIs, but when Google designed Protobuf, it didn\u2019t tried to make the generated code idiomatic in Python, which brings a problem when exporting messages outside interface modules or having nice IDE auto-completions. Schematics is a cute and Pythonic schema library that goes well with most applications. Why not join both?</p>\n<p>Currently this package does <strong>not</strong> support the Protobuf binary format and will work with a any other textual representation which is easily generated with the original Protobuf API for any language. Ease of use was prioritized while writing this package rather than mere performance.</p>\n<ul>\n<li>Free software: Apache Software License 2.0</li>\n<li>Documentation: <a href=\"https://protobuf-schematics.readthedocs.io\" rel=\"nofollow\">https://protobuf-schematics.readthedocs.io</a>.</li>\n</ul>\n<div id=\"usage\">\n<h3>Usage</h3>\n<ol>\n<li><p>Convert the <tt>proto</tt> file to python <a href=\"https://github.com/schematics/schematics\" rel=\"nofollow\">Schematics</a> classes:</p>\n<pre>protobuf_schematics &lt;path-to-file.proto&gt; generated_schematics_proto.py # or any output filename\n</pre>\n</li>\n<li><p>Convert your ProtoBuf message to Json:</p>\n</li>\n</ol>\n<p>In Java:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">com.google.protobuf.util.JsonFormat</span><span class=\"p\">;</span>\n\n<span class=\"n\">FileWriter</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileWriter</span><span class=\"p\">(</span><span class=\"s\">\"protoBufMessage.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">JsonFormat</span><span class=\"p\">.</span><span class=\"na\">Printer</span> <span class=\"n\">printer</span> <span class=\"o\">=</span> <span class=\"n\">JsonFormat</span><span class=\"p\">.</span><span class=\"na\">printer</span><span class=\"p\">().</span><span class=\"na\">preservingProtoFieldNames</span><span class=\"p\">();</span>\n<span class=\"n\">String</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">printer</span><span class=\"p\">.</span><span class=\"na\">print</span><span class=\"p\">(</span><span class=\"n\">someProtoBufMessage</span><span class=\"p\">);</span>\n<span class=\"n\">file</span><span class=\"p\">.</span><span class=\"na\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p>or from Python:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">google.protobuf.json_format</span> <span class=\"kn\">import</span> <span class=\"n\">MessageToJson</span>\n\n<span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"n\">MessageToJson</span><span class=\"p\">(</span><span class=\"n\">org</span><span class=\"p\">,</span> <span class=\"n\">preserving_proto_field_name</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">including_default_value_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"protoBufMessage.json\"</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">output</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>In your project, load the message in python as <a href=\"https://github.com/schematics/schematics\" rel=\"nofollow\">Schematics</a> object:</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">generated_schematics_proto</span> <span class=\"kn\">import</span> <span class=\"n\">SomeMessage</span> <span class=\"c1\"># import the schematics message class</span>\n\n<span class=\"n\">schematics_root_message</span> <span class=\"o\">=</span> <span class=\"n\">SomeMessage</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'protoBufMessage.json'</span><span class=\"p\">)))</span>\n</pre>\n<p>Or use a message loaded in python by Protobuf:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">generated_schematics_proto</span> <span class=\"kn\">import</span> <span class=\"n\">SomeMessage</span> <span class=\"c1\"># import the schematics message class</span>\n\n<span class=\"c1\"># ... get your protobuf message as the pb class representation</span>\n<span class=\"n\">schematics_root_message</span> <span class=\"o\">=</span> <span class=\"n\">SomeMessage</span><span class=\"o\">.</span><span class=\"n\">import_from_protobuf_message</span><span class=\"p\">(</span><span class=\"n\">protobuf_message</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>This <tt>proto</tt> file:</p>\n<pre><span class=\"na\">syntax</span> <span class=\"o\">=</span> <span class=\"s\">\"proto3\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">enum</span> <span class=\"n\">IPAddressFamily</span> <span class=\"p\">{</span>\n    <span class=\"na\">INVALID</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"na\">IPv4</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"na\">IPv6</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">ProtocolAndPorts</span> <span class=\"p\">{</span>\n    <span class=\"k\">repeated</span> <span class=\"kt\">uint32</span> <span class=\"na\">ports</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">FlowFilter</span> <span class=\"p\">{</span>\n    <span class=\"kd\">enum</span> <span class=\"n\">SomeEnum</span> <span class=\"p\">{</span>\n        <span class=\"na\">VALUE</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"kt\">string</span> <span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"p\">[</span><span class=\"na\">deprecated</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">];</span>\n    <span class=\"n\">SomeEnum</span> <span class=\"na\">consumer_filter_id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">map</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"n\">ProtocolAndPorts</span><span class=\"p\">&gt;</span> <span class=\"na\">ports</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n    <span class=\"k\">repeated</span> <span class=\"n\">ProtocolAndPorts</span> <span class=\"na\">protocol_and_ports</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Will be converted to:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">IPAddressFamily</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">INVALID</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">IPv4</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">IPv6</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ProtocolAndPorts</span><span class=\"p\">(</span><span class=\"n\">ProtobufMessageModel</span><span class=\"p\">):</span>\n    <span class=\"n\">ports</span> <span class=\"o\">=</span> <span class=\"n\">ListType</span><span class=\"p\">(</span><span class=\"n\">IntType</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FlowFilter</span><span class=\"p\">(</span><span class=\"n\">ProtobufMessageModel</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">InnerEnum</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n        <span class=\"n\">VALUE</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">StringType</span><span class=\"p\">()</span>\n    <span class=\"n\">consumer_filter_id</span> <span class=\"o\">=</span> <span class=\"n\">EnumType</span><span class=\"p\">(</span><span class=\"n\">SomeEnum</span><span class=\"p\">)</span>\n    <span class=\"n\">ports</span> <span class=\"o\">=</span> <span class=\"n\">DictType</span><span class=\"p\">(</span><span class=\"n\">ModelType</span><span class=\"p\">(</span><span class=\"n\">ProtocolAndPorts</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">protocol_and_ports</span> <span class=\"o\">=</span> <span class=\"n\">ListType</span><span class=\"p\">(</span><span class=\"n\">ModelType</span><span class=\"p\">(</span><span class=\"n\">ProtocolAndPorts</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Support both Protobuf syntax 2 and 3.</li>\n<li>Support builtin types such as StringType, <tt>IntType</tt>.</li>\n<li>Support proto map fields as <a href=\"https://github.com/schematics/schematics\" rel=\"nofollow\">Schematics</a> <tt>DictType</tt>.</li>\n<li>Support <tt>repeated</tt> modifier as convert to <tt>ListType</tt>.</li>\n<li>Support Enum class generation and custom Schematics <tt>EnumType</tt>.</li>\n<li>Support custom schematics <tt>ByteArrayType</tt> base64 encoded byte arrays converted from Java.</li>\n</ul>\n</div>\n<div id=\"development\">\n<h3>Development</h3>\n<p>First, install the Pipfile and create the proper virtual environment:</p>\n<pre>pipenv install --dev\n</pre>\n<p>To check linting with <strong>flake8</strong>, run:</p>\n<pre>make lint\n</pre>\n<p>To run the unittests against your working python version:</p>\n<pre>py.test\n</pre>\n<p>To see coverage report:</p>\n<pre>make coverage\n</pre>\n<p>To run tests against all supported python versions:</p>\n<pre>tox\n</pre>\n<p>To make the docs (which will be automatically published to readthedocs on commits to the master branch):</p>\n<pre>make docs\n</pre>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>The parsing work of <strong>.proto</strong> files is provided thanks to the awesome guys at <a href=\"https://github.com/appnexus/pyrobuf\" rel=\"nofollow\">PyroBuf</a>.</p>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/elgertam/cookiecutter-pipenv\" rel=\"nofollow\">elgertam/cookiecutter-pipenv</a> project template, based on <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a>.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"todo\">\n<h3>TODO</h3>\n<ul>\n<li>Add more meaningful unittests.</li>\n<li>Improve Protobuf support and integration.</li>\n<li>add support for parsing the Protobuf generated files as it is more comprehensive than the current Pyrobuf support.</li>\n</ul>\n</div>\n<div id=\"read-for-release\">\n<h3>Read for Release</h3>\n</div>\n<div id=\"id1\">\n<h3>0.4.0 (2019-01-16)</h3>\n<ul>\n<li>Added more meaningful unittests.</li>\n<li>Export Types and Models out of the templates.</li>\n<li>Export heavy definition logic (such as field definition) from the jinja template to pythonic filters.</li>\n<li>Improve integration with Protobuf.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.0 (2019-01-14)</h3>\n<ul>\n<li>Improve README - Add usage examples.</li>\n<li>Update the setup.py to point to official PyroBuf 0.8.5 PyPi release.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0 (2019-01-13)</h3>\n<ul>\n<li>First release on PyPI.</li>\n<li>CLI interface for compiling a given proto file to schematics definition file.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4772556, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "07bc04f86380d5c0182333d44c1b18e2", "sha256": "a09ee14c43e211f08ddef0fd7fdda9f23d93cec9eebe47f8d439668a428688a9"}, "downloads": -1, "filename": "protobuf_schematics-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07bc04f86380d5c0182333d44c1b18e2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5133, "upload_time": "2019-01-14T06:50:22", "upload_time_iso_8601": "2019-01-14T06:50:22.656577Z", "url": "https://files.pythonhosted.org/packages/42/bd/445f1b1c1ed0466dc78670344793dd29c38fb10968aaa7b40cdc85f50be3/protobuf_schematics-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2dc22a9e20884067d907a06b1754ddf", "sha256": "deb13a909689ef2d7b70317c1c74867e055e12c51e683e2cd8ef4b0a92d7c9fe"}, "downloads": -1, "filename": "protobuf_schematics-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c2dc22a9e20884067d907a06b1754ddf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9800, "upload_time": "2019-01-14T06:50:24", "upload_time_iso_8601": "2019-01-14T06:50:24.560568Z", "url": "https://files.pythonhosted.org/packages/2b/5b/357709e2ac99c5542fb18d7b2f5089630e29a8ff593d257067850d40b76d/protobuf_schematics-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fd5f0c6cd815486cb20c25aa1ac70ebc", "sha256": "d7bd7073e6e0c996bde04f45187da7bbb2da8a406c6935525d7589540d499567"}, "downloads": -1, "filename": "protobuf_schematics-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fd5f0c6cd815486cb20c25aa1ac70ebc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5781, "upload_time": "2019-01-14T20:15:05", "upload_time_iso_8601": "2019-01-14T20:15:05.929854Z", "url": "https://files.pythonhosted.org/packages/5b/b3/1887b991bb19e8a0eb00b87a16b1546e9d08c4609424cf34a8b2eb636f8d/protobuf_schematics-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1dd87744a3c804cf4a22e5059a6d178", "sha256": "84cc60814a2078758adebe8a56158f282e64b6d29c765cc937de40d4baf84f95"}, "downloads": -1, "filename": "protobuf_schematics-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b1dd87744a3c804cf4a22e5059a6d178", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10912, "upload_time": "2019-01-14T20:15:07", "upload_time_iso_8601": "2019-01-14T20:15:07.120749Z", "url": "https://files.pythonhosted.org/packages/80/bc/e92ba9fb7feb02a5715ac9ac40145e9c3036a3591efda7aaf7ca50c21cce/protobuf_schematics-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "feacc7ed1414a262493c95d73626615c", "sha256": "a6c57c5e80542321bc0962ef4bb7fb903685e8426fb265a03e4e4baeceabb41e"}, "downloads": -1, "filename": "protobuf_schematics-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "feacc7ed1414a262493c95d73626615c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6952, "upload_time": "2019-01-14T23:08:31", "upload_time_iso_8601": "2019-01-14T23:08:31.924019Z", "url": "https://files.pythonhosted.org/packages/e4/c1/32d18d89505c2e7014184afbcd7e54cc8a7514b8ddf38fb6ed66a86d4c42/protobuf_schematics-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02860331debe7eda2c127c147f016df2", "sha256": "f5ab809ad1e86c76874caf409a5a87839b6b967ce45832322b9446682d02a076"}, "downloads": -1, "filename": "protobuf_schematics-0.3.0.tar.gz", "has_sig": false, "md5_digest": "02860331debe7eda2c127c147f016df2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14212, "upload_time": "2019-01-14T23:08:33", "upload_time_iso_8601": "2019-01-14T23:08:33.210940Z", "url": "https://files.pythonhosted.org/packages/aa/07/b58cae98090ad84efc4753c425af536b3783c3ff95c15469266168f70d1c/protobuf_schematics-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "b675bcd6b64161590bcbba5af68239ee", "sha256": "5a4dce209bef16e36e6eb6006827bcd7cb89618816a4104f61282e463d5123de"}, "downloads": -1, "filename": "protobuf_schematics-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b675bcd6b64161590bcbba5af68239ee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8617, "upload_time": "2019-01-16T22:31:37", "upload_time_iso_8601": "2019-01-16T22:31:37.419309Z", "url": "https://files.pythonhosted.org/packages/4c/3b/b48f086cb5e9834325520a0b76509ac324e7d5855ad84994daca669a2709/protobuf_schematics-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3810a262276d01f832e06ee1021730b2", "sha256": "d99a81ee1ae45f59d5ad1d0bb8974dda9090a6ce6a3d1e911d255ae0d8c8b51a"}, "downloads": -1, "filename": "protobuf_schematics-0.4.0.tar.gz", "has_sig": false, "md5_digest": "3810a262276d01f832e06ee1021730b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15417, "upload_time": "2019-01-16T22:31:39", "upload_time_iso_8601": "2019-01-16T22:31:39.104139Z", "url": "https://files.pythonhosted.org/packages/dc/e8/bd4a9e5f95cca087df2a6e893fd715533fb5c136857d7d752eb1a3499c95/protobuf_schematics-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "410c9b134cc12d121451b65245ce46fb", "sha256": "3b203893d61e27e303982719f85609706048ebed3c4bc8068d308ea237b64c55"}, "downloads": -1, "filename": "protobuf_schematics-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "410c9b134cc12d121451b65245ce46fb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8895, "upload_time": "2019-02-02T16:16:32", "upload_time_iso_8601": "2019-02-02T16:16:32.342585Z", "url": "https://files.pythonhosted.org/packages/8e/aa/beb58a77b5f7b777e0ca664035069e86ca48dd8725ff6359e29b7efd07b8/protobuf_schematics-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4755578d7d786a26e3f06241dd69e8b", "sha256": "b401ac3e657737b9c51b8f5aad93e14726d5a926ecefbdb73f04cc6d26c53d97"}, "downloads": -1, "filename": "protobuf_schematics-0.4.1.tar.gz", "has_sig": false, "md5_digest": "b4755578d7d786a26e3f06241dd69e8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16172, "upload_time": "2019-02-02T16:16:33", "upload_time_iso_8601": "2019-02-02T16:16:33.771206Z", "url": "https://files.pythonhosted.org/packages/64/ce/3cd78f17239db2a41924844beab2ade1d4a6364f4ab588f6ee7ed9dd19ed/protobuf_schematics-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "410c9b134cc12d121451b65245ce46fb", "sha256": "3b203893d61e27e303982719f85609706048ebed3c4bc8068d308ea237b64c55"}, "downloads": -1, "filename": "protobuf_schematics-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "410c9b134cc12d121451b65245ce46fb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8895, "upload_time": "2019-02-02T16:16:32", "upload_time_iso_8601": "2019-02-02T16:16:32.342585Z", "url": "https://files.pythonhosted.org/packages/8e/aa/beb58a77b5f7b777e0ca664035069e86ca48dd8725ff6359e29b7efd07b8/protobuf_schematics-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4755578d7d786a26e3f06241dd69e8b", "sha256": "b401ac3e657737b9c51b8f5aad93e14726d5a926ecefbdb73f04cc6d26c53d97"}, "downloads": -1, "filename": "protobuf_schematics-0.4.1.tar.gz", "has_sig": false, "md5_digest": "b4755578d7d786a26e3f06241dd69e8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16172, "upload_time": "2019-02-02T16:16:33", "upload_time_iso_8601": "2019-02-02T16:16:33.771206Z", "url": "https://files.pythonhosted.org/packages/64/ce/3cd78f17239db2a41924844beab2ade1d4a6364f4ab588f6ee7ed9dd19ed/protobuf_schematics-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:32 2020"}