{"info": {"author": "Kay Zheng", "author_email": "l04m33@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "#####\nDumpy\n#####\n\nDumpy is a binary parser with a declarative syntax. All you need to\ndo is telling the framework what your data look like, and let Dumpy\ndo the rest.\n\nDumpy supports python versions >= 3.0.\n\n##########\nInstalling\n##########\n\nJust use pip or tools alike:\n\n.. code-block:: sh\n\n    pip install dumpy\n\n#####\nUsage\n#####\n\nTo parse a pre-defined binary structure, you need to define a class\nfor that structure. For example, a class for `pascal strings`_ :\n\n.. code-block:: python3\n\n    import dumpy.types as dt\n\n    class PString(dict, metaclass=dt.DumpyMeta):\n        __field_specs__ = (\n            dt.field('len', dt.UInt8, default=dt.count_of('data')),\n            dt.field('data', dt.UInt8, count=dt.counted_by('len')),\n        )\n\n    s = PString()\n    s['data'] = b'\\x01\\x02\\x03\\x04'\n\n    # The length field is calculated automatically.\n    assert s['len'] == 4\n\n    assert s.pack() == b'\\x04\\x01\\x02\\x03\\x04'\n\n    s2 = s.unpack(s.pack())\n    assert s2['len'] == 4\n    assert bytes(s2['data']) == b'\\x01\\x02\\x03\\x04'\n\nSee ``demo/png_packer.py`` for a real-world format parser.\n\n.. _pascal strings: http://en.wikipedia.org/wiki/String_(computer_science)#Length-prefixed\n\n############\nKnown Issues\n############\n\n1. The type checking and conversion code in Dumpy is kind of naive,\n   It does not check element types in a sequence.\n\n2. Dumpy is **very slow** at current stage. You may not want to use\n   it to parse network messages or huge data structures.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/l04m33/dumpy", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "dumpy", "package_url": "https://pypi.org/project/dumpy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dumpy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/l04m33/dumpy"}, "release_url": "https://pypi.org/project/dumpy/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "Binary protocol parser", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"dumpy\">\n<h2>Dumpy</h2>\n<p>Dumpy is a binary parser with a declarative syntax. All you need to\ndo is telling the framework what your data look like, and let Dumpy\ndo the rest.</p>\n<p>Dumpy supports python versions &gt;= 3.0.</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Just use pip or tools alike:</p>\n<pre>pip install dumpy\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To parse a pre-defined binary structure, you need to define a class\nfor that structure. For example, a class for <a href=\"http://en.wikipedia.org/wiki/String_(computer_science)#Length-prefixed\" rel=\"nofollow\">pascal strings</a> :</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dumpy.types</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PString</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">DumpyMeta</span><span class=\"p\">):</span>\n    <span class=\"n\">__field_specs__</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"s1\">'len'</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">UInt8</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">count_of</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">)),</span>\n        <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">UInt8</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">counted_by</span><span class=\"p\">(</span><span class=\"s1\">'len'</span><span class=\"p\">)),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">PString</span><span class=\"p\">()</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x01\\x02\\x03\\x04</span><span class=\"s1\">'</span>\n\n<span class=\"c1\"># The length field is calculated automatically.</span>\n<span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'len'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x04\\x01\\x02\\x03\\x04</span><span class=\"s1\">'</span>\n\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">())</span>\n<span class=\"k\">assert</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"s1\">'len'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n<span class=\"k\">assert</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x01\\x02\\x03\\x04</span><span class=\"s1\">'</span>\n</pre>\n<p>See <tt>demo/png_packer.py</tt> for a real-world format parser.</p>\n</div>\n<div id=\"known-issues\">\n<h2>Known Issues</h2>\n<ol>\n<li>The type checking and conversion code in Dumpy is kind of naive,\nIt does not check element types in a sequence.</li>\n<li>Dumpy is <strong>very slow</strong> at current stage. You may not want to use\nit to parse network messages or huge data structures.</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 1676997, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "1edcbb6cc69574ff56f704fff16fd46e", "sha256": "89e1f479200dbf4a29bfb53962c3bc8abd09a465733b8b213d2106e7af97b3dc"}, "downloads": -1, "filename": "dumpy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1edcbb6cc69574ff56f704fff16fd46e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7056, "upload_time": "2015-05-27T03:28:09", "upload_time_iso_8601": "2015-05-27T03:28:09.319493Z", "url": "https://files.pythonhosted.org/packages/0c/98/d75d96d2cdd58bbda881ee19ac9ae5dd424479122f93cf70f00b54f0c4f2/dumpy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "93ac823baac64c08a477a63e84f2adde", "sha256": "598f8dae01b1c49c457fd96941cee315f5dc734a78a86ce048511ecd3a2e89f5"}, "downloads": -1, "filename": "dumpy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "93ac823baac64c08a477a63e84f2adde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7529, "upload_time": "2015-08-14T03:11:02", "upload_time_iso_8601": "2015-08-14T03:11:02.494467Z", "url": "https://files.pythonhosted.org/packages/2a/fb/b78893e906a0e67dd2cf7cfd46e04ad8946778ceb426bd3c9583ab34a162/dumpy-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "93ac823baac64c08a477a63e84f2adde", "sha256": "598f8dae01b1c49c457fd96941cee315f5dc734a78a86ce048511ecd3a2e89f5"}, "downloads": -1, "filename": "dumpy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "93ac823baac64c08a477a63e84f2adde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7529, "upload_time": "2015-08-14T03:11:02", "upload_time_iso_8601": "2015-08-14T03:11:02.494467Z", "url": "https://files.pythonhosted.org/packages/2a/fb/b78893e906a0e67dd2cf7cfd46e04ad8946778ceb426bd3c9583ab34a162/dumpy-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:02 2020"}