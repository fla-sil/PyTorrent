{"info": {"author": "Dmytro Mishkin, Vassileios Balntas", "author_email": "ducha.aiki@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Extract_patches\n> Simple function for local patch extraction from local features keypoints\n\n\n## Install\n\n`pip install extract_patches`\n\n## How to use\n\nextract_patches accepts following formats:\n\n - OpenCV keypoints\n - Ellipse format \\[x y a b c\\], see further in [Oxford-Affine](http://www.robots.ox.ac.uk/~vgg/research/affine/detectors.html#binaries)\n - Affine features format [x y a11 a12 a21 a22], see further [here](https://www.vlfeat.org/overview/frame.html) \n - OpenCV keypoints + A (a11 a12 a21, a22), say from [AffNet](https://github.com/ducha-aiki/affnet/) output\n\nFirst, let's delect some local features, e.g. OpenCV ORB.\n\n```\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport math\nimport seaborn as sns\nfrom time import time\nfrom PIL import Image\nfrom extract_patches.core import extract_patches\n\nimg1 = cv2.cvtColor(cv2.imread('data/img/prague.png'), cv2.COLOR_BGR2RGB)\n\ndet = cv2.ORB_create(500)\nkps1, descs1 = det.detectAndCompute(img1,None)\n\nvis_img1 = None\nvis_img1 = cv2.drawKeypoints(cv2.cvtColor(img1,cv2.COLOR_RGB2GRAY),kps1,vis_img1, \n                             flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\nplt.imshow(vis_img1)\n```\n\n\n\n\n    <matplotlib.image.AxesImage at 0x7feb58b46790>\n\n\n\n\n![png](docs/images/output_5_1.png)\n\n\n```\nfrom extract_patches.core import extract_patches\n```\n\nextract_patches performs extraction from the appropriate level of image pyramid, removing high freq artifacts. \nBorder mode is set to \"replicate\", so the patch don't have crazy black borders.\n\n**PATCH_SIZE** is output patch size.\n\n**mrSize** is a scale coefficient, related to the image area covered in the original image by local feature.\nThere are different conventions (if any common), e.g. for ORB is mrSize is recommend to set to 1.0, as kpt.size already contains correct number. For the OpenCV SIFT, on the other hand, one should use mrSize=6.0\n\n```\nPATCH_SIZE = 65\nmrSize = 1.0\nt=time()\npatches = extract_patches(kps1, img1, PATCH_SIZE, mrSize, 'cv2')\nprint ('pyr OpenCV version for 500 kps, [s]', time()-t)\n\nshow_idx = 300\nfig = plt.figure(figsize=(12, 20))\nfor i in range(1,6):\n    fig.add_subplot(1, 5, i) \n    plt.imshow(patches[show_idx+i])\n```\n\n    pyr OpenCV version for 500 kps, [s] 0.025847196578979492\n\n\n\n![png](docs/images/output_8_1.png)\n\n\nNow try with ellipse (x y a b c) format. Let's download [Hessian-Affine](http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/mikolajczyk_ijcv2004.pdf) from [VGG website](http://www.robots.ox.ac.uk/~vgg/research/affine/detectors.html#binaries) and detect local features with it\n\n\n```\n!rm h_affine.ln\n!wget http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/h_affine.ln.gz\n!gunzip h_affine.ln.gz\n!chmod +x h_affine.ln\n!./h_affine.ln  -hesaff -i img/prague.png -o prague.hesaff -thres 100\n```\n\n    --2020-01-27 15:21:55--  http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/h_affine.ln.gz\n    Resolving www.robots.ox.ac.uk (www.robots.ox.ac.uk)... 129.67.94.2\n    Connecting to www.robots.ox.ac.uk (www.robots.ox.ac.uk)|129.67.94.2|:80... connected.\n    HTTP request sent, awaiting response... 200 OK\n    Length: 3199317 (3.1M) [application/x-gzip]\n    Saving to: \u2018h_affine.ln.gz\u2019\n\n    h_affine.ln.gz      100%[===================>]   3.05M  1.80MB/s    in 1.7s    \n\n    2020-01-27 15:21:56 (1.80 MB/s) - \u2018h_affine.ln.gz\u2019 saved [3199317/3199317]\n\n    hessian affine  detector...\n    cgood 1902 cbad 560 all 2462\n    cor nb 1679\n    detection time: 0.4\n\n    number of points : 1562\n    output file: prague.hesaff\n\n\nNow read extracted local features from txt file\n\n```\nfrom extract_patches.laf import visualize_LAFs, ells2LAFs\nells = np.loadtxt('prague.hesaff', skiprows=2).astype(np.float32)\nprint (f\"Shape is {ells.shape}\")\nprint (ells[0:5])\n```\n\n    Shape is (1562, 5)\n    [[ 1.33920e+02  1.25280e+02  3.40137e-02 -2.62884e-02  9.84345e-02]\n     [ 6.63840e+02  1.85760e+02  4.18373e-02  2.33503e-02  7.24527e-02]\n     [ 6.78240e+02  1.92960e+02  1.07543e-01 -2.07333e-02  3.04518e-02]\n     [ 4.14720e+02  1.98720e+02  3.24049e-02 -3.11269e-03  7.01242e-02]\n     [ 5.68800e+02  2.00160e+02  2.22278e-02  3.34806e-02  1.39287e-01]]\n\n\nNow visualize detected features\n\n```\nfrom extract_patches.laf import visualize_LAFs, ells2LAFs\nvisualize_LAFs(img1, ells2LAFs(ells))\n```\n\n\n![png](docs/images/output_14_0.png)\n\n\nAnd visualize some patches\n\n```\nshow_idx=1500\nPATCH_SIZE = 65\nmrSize = 5.0\n\nt=time()\npatches_ells = extract_patches(ells, img1, PATCH_SIZE, mrSize, 'ellipse')\nel=time()-t\nprint (f'extract from ellipse features for 1500 kps, {el:.5f} [s]', )\nfig = plt.figure(figsize=(14, 20))\nfor i in range(1,6):\n    fig.add_subplot(1, 5, i) \n    plt.imshow(patches_ells[show_idx+i])\n\n```\n\n    extract from ellipse features for 1500 kps, 0.24170 [s]\n\n\n\n![png](docs/images/output_16_1.png)\n\n\nLet's try now [MSER](http://cmp.felk.cvut.cz/~matas/papers/matas-bmvc02.pdf) detector, which could output local features in affine format\n\n```\n#And lets try x y a11 a12 a21 a22 format. MSER can output in it\n!wget http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/mser.tar.gz\n!tar -xf mser.tar.gz\n!./mser.ln -i img/prague.png -o prague.mser  -t 4\n```\n\n    --2020-01-27 15:22:05--  http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/mser.tar.gz\n    Resolving www.robots.ox.ac.uk (www.robots.ox.ac.uk)... 129.67.94.2\n    Connecting to www.robots.ox.ac.uk (www.robots.ox.ac.uk)|129.67.94.2|:80... connected.\n    HTTP request sent, awaiting response... 200 OK\n    Length: 558415 (545K) [application/x-gzip]\n    Saving to: \u2018mser.tar.gz.6\u2019\n\n    mser.tar.gz.6       100%[===================>] 545.33K  1.66MB/s    in 0.3s    \n\n    2020-01-27 15:22:05 (1.66 MB/s) - \u2018mser.tar.gz.6\u2019 saved [558415/558415]\n\n\n\nRead and extract from MSERs \n\n```\ndef read_mser_file(fname):\n    with open(fname, 'r') as f:\n        out = []\n        lines = f.readlines()\n        num_feats1 = int(lines[0])\n        num_feats2 = int(lines[0+num_feats1+1])\n        for l in lines[1:num_feats1]:\n            out.append(np.array([float(x) for x in l.strip().split(' ')]).reshape(1,-1))\n        for l in lines[num_feats1+2:]:\n            out.append(np.array([float(x) for x in l.strip().split(' ')]).reshape(1,-1))\n    return np.concatenate(out,axis=0)[:,:6]\nmser_xyA = read_mser_file('prague.mser')\nprint (f\"Shape is {mser_xyA.shape}\")\nprint (mser_xyA[0:5])\nvisualize_LAFs(img1, mser_xyA)\n```\n\n    Shape is (361, 6)\n    [[ 79.2818   410.027     12.2143    -3.72324   -3.72324    3.38642 ]\n     [  6.23611  433.042      7.13002   -1.6485    -1.6485     4.45321 ]\n     [546.992    445.621      8.79801    2.71022    2.71022   13.7868  ]\n     [659.924    344.894      7.26102    0.842102   0.842102   1.73304 ]\n     [651.968    344.841     15.5017     1.13132    1.13132    3.68829 ]]\n\n\n\n![png](docs/images/output_20_1.png)\n\n\n```\nPATCH_SIZE = 65\nmrSize = 5.0\n\nt=time()\npatches_mser = extract_patches(mser_xyA, img1, PATCH_SIZE, mrSize, 'xyA')\nel = time()-t\nprint (f'extract from a11, a12, a21, a22 features for 360 kps, {el:.5f} [s]')\n\nshow_idx=150\nfig = plt.figure(figsize=(14, 20))\nfor i in range(1,6):\n    fig.add_subplot(1, 5, i) \n    plt.imshow(patches_mser[show_idx+i])\n```\n\n    extract from a11, a12, a21, a22 features for 360 kps, 0.02284 [s]\n\n\n\n![png](docs/images/output_21_1.png)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ducha-aiki/extract_patches", "keywords": "patch,opencv,local features,local descriptors", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "extract-patches", "package_url": "https://pypi.org/project/extract-patches/", "platform": "", "project_url": "https://pypi.org/project/extract-patches/", "project_urls": {"Homepage": "https://github.com/ducha-aiki/extract_patches"}, "release_url": "https://pypi.org/project/extract-patches/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Function for local patch extraction from OpenCV keypoints with proper bluring", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Extract_patches</h1>\n<blockquote>\n<p>Simple function for local patch extraction from local features keypoints</p>\n</blockquote>\n<h2>Install</h2>\n<p><code>pip install extract_patches</code></p>\n<h2>How to use</h2>\n<p>extract_patches accepts following formats:</p>\n<ul>\n<li>OpenCV keypoints</li>\n<li>Ellipse format [x y a b c], see further in <a href=\"http://www.robots.ox.ac.uk/%7Evgg/research/affine/detectors.html#binaries\" rel=\"nofollow\">Oxford-Affine</a></li>\n<li>Affine features format [x y a11 a12 a21 a22], see further <a href=\"https://www.vlfeat.org/overview/frame.html\" rel=\"nofollow\">here</a></li>\n<li>OpenCV keypoints + A (a11 a12 a21, a22), say from <a href=\"https://github.com/ducha-aiki/affnet/\" rel=\"nofollow\">AffNet</a> output</li>\n</ul>\n<p>First, let's delect some local features, e.g. OpenCV ORB.</p>\n<pre><code>%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport math\nimport seaborn as sns\nfrom time import time\nfrom PIL import Image\nfrom extract_patches.core import extract_patches\n\nimg1 = cv2.cvtColor(cv2.imread('data/img/prague.png'), cv2.COLOR_BGR2RGB)\n\ndet = cv2.ORB_create(500)\nkps1, descs1 = det.detectAndCompute(img1,None)\n\nvis_img1 = None\nvis_img1 = cv2.drawKeypoints(cv2.cvtColor(img1,cv2.COLOR_RGB2GRAY),kps1,vis_img1, \n                             flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\nplt.imshow(vis_img1)\n</code></pre>\n<pre><code>&lt;matplotlib.image.AxesImage at 0x7feb58b46790&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a12547ad99aa8cb44f2bdb7a9fd971cc217c82cf/646f63732f696d616765732f6f75747075745f355f312e706e67\"></p>\n<pre><code>from extract_patches.core import extract_patches\n</code></pre>\n<p>extract_patches performs extraction from the appropriate level of image pyramid, removing high freq artifacts.\nBorder mode is set to \"replicate\", so the patch don't have crazy black borders.</p>\n<p><strong>PATCH_SIZE</strong> is output patch size.</p>\n<p><strong>mrSize</strong> is a scale coefficient, related to the image area covered in the original image by local feature.\nThere are different conventions (if any common), e.g. for ORB is mrSize is recommend to set to 1.0, as kpt.size already contains correct number. For the OpenCV SIFT, on the other hand, one should use mrSize=6.0</p>\n<pre><code>PATCH_SIZE = 65\nmrSize = 1.0\nt=time()\npatches = extract_patches(kps1, img1, PATCH_SIZE, mrSize, 'cv2')\nprint ('pyr OpenCV version for 500 kps, [s]', time()-t)\n\nshow_idx = 300\nfig = plt.figure(figsize=(12, 20))\nfor i in range(1,6):\n    fig.add_subplot(1, 5, i) \n    plt.imshow(patches[show_idx+i])\n</code></pre>\n<pre><code>pyr OpenCV version for 500 kps, [s] 0.025847196578979492\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62cc4aacfb666ad57d4de886270fa919df53ef66/646f63732f696d616765732f6f75747075745f385f312e706e67\"></p>\n<p>Now try with ellipse (x y a b c) format. Let's download <a href=\"http://www.robots.ox.ac.uk/%7Evgg/research/affine/det_eval_files/mikolajczyk_ijcv2004.pdf\" rel=\"nofollow\">Hessian-Affine</a> from <a href=\"http://www.robots.ox.ac.uk/%7Evgg/research/affine/detectors.html#binaries\" rel=\"nofollow\">VGG website</a> and detect local features with it</p>\n<pre><code>!rm h_affine.ln\n!wget http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/h_affine.ln.gz\n!gunzip h_affine.ln.gz\n!chmod +x h_affine.ln\n!./h_affine.ln  -hesaff -i img/prague.png -o prague.hesaff -thres 100\n</code></pre>\n<pre><code>--2020-01-27 15:21:55--  http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/h_affine.ln.gz\nResolving www.robots.ox.ac.uk (www.robots.ox.ac.uk)... 129.67.94.2\nConnecting to www.robots.ox.ac.uk (www.robots.ox.ac.uk)|129.67.94.2|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 3199317 (3.1M) [application/x-gzip]\nSaving to: \u2018h_affine.ln.gz\u2019\n\nh_affine.ln.gz      100%[===================&gt;]   3.05M  1.80MB/s    in 1.7s    \n\n2020-01-27 15:21:56 (1.80 MB/s) - \u2018h_affine.ln.gz\u2019 saved [3199317/3199317]\n\nhessian affine  detector...\ncgood 1902 cbad 560 all 2462\ncor nb 1679\ndetection time: 0.4\n\nnumber of points : 1562\noutput file: prague.hesaff\n</code></pre>\n<p>Now read extracted local features from txt file</p>\n<pre><code>from extract_patches.laf import visualize_LAFs, ells2LAFs\nells = np.loadtxt('prague.hesaff', skiprows=2).astype(np.float32)\nprint (f\"Shape is {ells.shape}\")\nprint (ells[0:5])\n</code></pre>\n<pre><code>Shape is (1562, 5)\n[[ 1.33920e+02  1.25280e+02  3.40137e-02 -2.62884e-02  9.84345e-02]\n [ 6.63840e+02  1.85760e+02  4.18373e-02  2.33503e-02  7.24527e-02]\n [ 6.78240e+02  1.92960e+02  1.07543e-01 -2.07333e-02  3.04518e-02]\n [ 4.14720e+02  1.98720e+02  3.24049e-02 -3.11269e-03  7.01242e-02]\n [ 5.68800e+02  2.00160e+02  2.22278e-02  3.34806e-02  1.39287e-01]]\n</code></pre>\n<p>Now visualize detected features</p>\n<pre><code>from extract_patches.laf import visualize_LAFs, ells2LAFs\nvisualize_LAFs(img1, ells2LAFs(ells))\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5e7b1155cf87bb453c1b02a1f934d4ae48c0fad/646f63732f696d616765732f6f75747075745f31345f302e706e67\"></p>\n<p>And visualize some patches</p>\n<pre><code>show_idx=1500\nPATCH_SIZE = 65\nmrSize = 5.0\n\nt=time()\npatches_ells = extract_patches(ells, img1, PATCH_SIZE, mrSize, 'ellipse')\nel=time()-t\nprint (f'extract from ellipse features for 1500 kps, {el:.5f} [s]', )\nfig = plt.figure(figsize=(14, 20))\nfor i in range(1,6):\n    fig.add_subplot(1, 5, i) \n    plt.imshow(patches_ells[show_idx+i])\n\n</code></pre>\n<pre><code>extract from ellipse features for 1500 kps, 0.24170 [s]\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d030b6cb4aa649c2e1fb16cddcdfbabf2cf72ee/646f63732f696d616765732f6f75747075745f31365f312e706e67\"></p>\n<p>Let's try now <a href=\"http://cmp.felk.cvut.cz/%7Ematas/papers/matas-bmvc02.pdf\" rel=\"nofollow\">MSER</a> detector, which could output local features in affine format</p>\n<pre><code>#And lets try x y a11 a12 a21 a22 format. MSER can output in it\n!wget http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/mser.tar.gz\n!tar -xf mser.tar.gz\n!./mser.ln -i img/prague.png -o prague.mser  -t 4\n</code></pre>\n<pre><code>--2020-01-27 15:22:05--  http://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/mser.tar.gz\nResolving www.robots.ox.ac.uk (www.robots.ox.ac.uk)... 129.67.94.2\nConnecting to www.robots.ox.ac.uk (www.robots.ox.ac.uk)|129.67.94.2|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 558415 (545K) [application/x-gzip]\nSaving to: \u2018mser.tar.gz.6\u2019\n\nmser.tar.gz.6       100%[===================&gt;] 545.33K  1.66MB/s    in 0.3s    \n\n2020-01-27 15:22:05 (1.66 MB/s) - \u2018mser.tar.gz.6\u2019 saved [558415/558415]\n</code></pre>\n<p>Read and extract from MSERs</p>\n<pre><code>def read_mser_file(fname):\n    with open(fname, 'r') as f:\n        out = []\n        lines = f.readlines()\n        num_feats1 = int(lines[0])\n        num_feats2 = int(lines[0+num_feats1+1])\n        for l in lines[1:num_feats1]:\n            out.append(np.array([float(x) for x in l.strip().split(' ')]).reshape(1,-1))\n        for l in lines[num_feats1+2:]:\n            out.append(np.array([float(x) for x in l.strip().split(' ')]).reshape(1,-1))\n    return np.concatenate(out,axis=0)[:,:6]\nmser_xyA = read_mser_file('prague.mser')\nprint (f\"Shape is {mser_xyA.shape}\")\nprint (mser_xyA[0:5])\nvisualize_LAFs(img1, mser_xyA)\n</code></pre>\n<pre><code>Shape is (361, 6)\n[[ 79.2818   410.027     12.2143    -3.72324   -3.72324    3.38642 ]\n [  6.23611  433.042      7.13002   -1.6485    -1.6485     4.45321 ]\n [546.992    445.621      8.79801    2.71022    2.71022   13.7868  ]\n [659.924    344.894      7.26102    0.842102   0.842102   1.73304 ]\n [651.968    344.841     15.5017     1.13132    1.13132    3.68829 ]]\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b22ccef7098019f27f9c9ca066a73e6ad2bd11d8/646f63732f696d616765732f6f75747075745f32305f312e706e67\"></p>\n<pre><code>PATCH_SIZE = 65\nmrSize = 5.0\n\nt=time()\npatches_mser = extract_patches(mser_xyA, img1, PATCH_SIZE, mrSize, 'xyA')\nel = time()-t\nprint (f'extract from a11, a12, a21, a22 features for 360 kps, {el:.5f} [s]')\n\nshow_idx=150\nfig = plt.figure(figsize=(14, 20))\nfor i in range(1,6):\n    fig.add_subplot(1, 5, i) \n    plt.imshow(patches_mser[show_idx+i])\n</code></pre>\n<pre><code>extract from a11, a12, a21, a22 features for 360 kps, 0.02284 [s]\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97e4e617c4ae5f82c111c600901e673c2546aaf6/646f63732f696d616765732f6f75747075745f32315f312e706e67\"></p>\n\n          </div>"}, "last_serial": 6543522, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "dbf3881661cd6991d3ea370c08aa8068", "sha256": "750565a183c215fb9e9057f7daf169270d2e0685c01c2202cd27809d6d8923b9"}, "downloads": -1, "filename": "extract_patches-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dbf3881661cd6991d3ea370c08aa8068", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13538, "upload_time": "2020-01-27T14:33:08", "upload_time_iso_8601": "2020-01-27T14:33:08.853747Z", "url": "https://files.pythonhosted.org/packages/8e/10/dd70fe0170b9002294010974cb16ff0163fb181cab7c81cea8686c48f43e/extract_patches-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef4252eac052ce3467fbe37425fdff91", "sha256": "30833529261750d5a232c70abe384e3c4c68da10f4918372499f6128eefa7f36"}, "downloads": -1, "filename": "extract_patches-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ef4252eac052ce3467fbe37425fdff91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15704, "upload_time": "2020-01-27T14:33:11", "upload_time_iso_8601": "2020-01-27T14:33:11.455347Z", "url": "https://files.pythonhosted.org/packages/a9/65/067f40d4c1da7e28f0a4011b0dc9304a0faf96735b0eeeb0f2ad49483fb8/extract_patches-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "19f502ff87449d9df87a75d0c72fc61c", "sha256": "69ac8b7137250543264d443af2a1e299238f9a189a98ebba02b363c0fbfcb0b7"}, "downloads": -1, "filename": "extract_patches-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "19f502ff87449d9df87a75d0c72fc61c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13550, "upload_time": "2020-01-30T13:37:37", "upload_time_iso_8601": "2020-01-30T13:37:37.700706Z", "url": "https://files.pythonhosted.org/packages/32/db/104389490e1fec41078a4ed573c4d4ff97c54d2dc888d2e1dcd8de2c498b/extract_patches-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cce1593933fff4f9be80506f3663edbe", "sha256": "a1fb5a1c6ba86857a26172dccaaee9ac33da140989659c9e44f870d826235968"}, "downloads": -1, "filename": "extract_patches-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cce1593933fff4f9be80506f3663edbe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15726, "upload_time": "2020-01-30T13:37:39", "upload_time_iso_8601": "2020-01-30T13:37:39.378477Z", "url": "https://files.pythonhosted.org/packages/be/3d/f6b62b38c18a0bd4cfa11ead9d04ce17fd97786d827d2734f2f8f43d8f31/extract_patches-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19f502ff87449d9df87a75d0c72fc61c", "sha256": "69ac8b7137250543264d443af2a1e299238f9a189a98ebba02b363c0fbfcb0b7"}, "downloads": -1, "filename": "extract_patches-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "19f502ff87449d9df87a75d0c72fc61c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13550, "upload_time": "2020-01-30T13:37:37", "upload_time_iso_8601": "2020-01-30T13:37:37.700706Z", "url": "https://files.pythonhosted.org/packages/32/db/104389490e1fec41078a4ed573c4d4ff97c54d2dc888d2e1dcd8de2c498b/extract_patches-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cce1593933fff4f9be80506f3663edbe", "sha256": "a1fb5a1c6ba86857a26172dccaaee9ac33da140989659c9e44f870d826235968"}, "downloads": -1, "filename": "extract_patches-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cce1593933fff4f9be80506f3663edbe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15726, "upload_time": "2020-01-30T13:37:39", "upload_time_iso_8601": "2020-01-30T13:37:39.378477Z", "url": "https://files.pythonhosted.org/packages/be/3d/f6b62b38c18a0bd4cfa11ead9d04ce17fd97786d827d2734f2f8f43d8f31/extract_patches-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:30 2020"}