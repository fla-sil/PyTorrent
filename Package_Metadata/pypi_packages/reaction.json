{"info": {"author": "David Kuryakin", "author_email": "dkuryakin@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "\n<div align=\"center\">\n\n![Reaction logo](https://raw.githubusercontent.com/catalyst-team/catalyst-pics/master/pics/Reaction_Logo.png)\n\n**Convenient DL serving**\n\n[![Build Status](https://travis-ci.com/catalyst-team/reaction.svg?branch=master)](https://travis-ci.com/catalyst-team/reaction)\n[![Pipi version](https://img.shields.io/pypi/v/reaction.svg)](https://pypi.org/project/reaction/)\n[![Docs](https://img.shields.io/badge/dynamic/json.svg?label=docs&url=https%3A%2F%2Fpypi.org%2Fpypi%2Freaction%2Fjson&query=%24.info.version&colorB=brightgreen&prefix=v)](https://catalyst-team.github.io/reaction/index.html)\n[![PyPI Status](https://pepy.tech/badge/reaction)](https://pepy.tech/project/reaction)\n[![Github contributors](https://img.shields.io/github/contributors/catalyst-team/reaction.svg?logo=github&logoColor=white)](https://github.com/catalyst-team/reaction/graphs/contributors)\n\n[![Twitter](https://img.shields.io/badge/news-on%20twitter-499feb)](https://t.me/catalyst_team)\n[![Telegram](https://img.shields.io/badge/channel-on%20telegram-blue)](https://t.me/catalyst_team)\n[![Spectrum](https://img.shields.io/badge/chat-on%20spectrum-blueviolet)](https://spectrum.chat/catalyst)\n[![Slack](https://img.shields.io/badge/ODS-slack-red)](https://opendatascience.slack.com/messages/CGK4KQBHD)\n\n</div>\n\nPart of [Catalyst Ecosystem](https://docs.google.com/presentation/d/1D-yhVOg6OXzjo9K_-IS5vSHLPIUxp1PEkFGnpRcNCNU/edit?usp=sharing). Project [manifest](https://github.com/catalyst-team/catalyst/blob/master/MANIFEST.md).\n\n---\n\n## Installation\n\nCommon installation:\n```bash\npip install -U reaction\n```\n\n## Getting started\n\n**consumer.py**:\n```python\nimport asyncio\nfrom typing import List, Any\nfrom reaction.rpc import RabbitRPC\n\n\nclass rpc(RabbitRPC):\n    URL = 'amqp://user:password@host'\n\n\n@rpc()\ndef sync_square(*values) -> List[float]:\n    return [v ** 2 for v in values]\n\n\n@rpc()\nasync def async_square(*values) -> List[float]:\n    await asyncio.sleep(1)\n    return [v ** 2 for v in values]\n\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.create_task(sync_square.consume())\n    loop.create_task(async_square.consume())\n    loop.run_forever()\n```\n\n**client.py**:\n```python\nimport asyncio\nfrom consumer import sync_square, async_square\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    x = loop.run_until_complete(sync_square.call(2, 3))\n    y = loop.run_until_complete(async_square.call(4, 5, 6))\n    print(x)  # 4, 9\n    print(y)  # 16, 25, 36\n    loop.close()\n```\n\n## Example\n* Register telegram bot, achieve token\n* `cd example && TG_TOKEN=\"telegram bot token goes here\" docker-compose up --force-recreate --build`\n* RabbitMQ web ui: http://127.0.0.1:15672/#/\n  * user: admin\n  * password: j8XfG9ZDT5ZZrWTzw62q\n* Docs (you can submit requests from web ui): http://127.0.0.1:8000/docs#/\n* Redoc: http://127.0.0.1:8000/redoc\n* Telegram bot is ready to classify ants & bees, but you have to send files \"as a photo\"\n\n## Telegram bot quick howto\n\nInstall async telegram client first:\n```bash\n$ pip install aiotg\n```\n\nThen create your bot:\n\n**tgbot.py**\n```python\nfrom consumer import async_square\nfrom aiotg import Bot, Chat\n\nbot = Bot(api_token='telegram bot token goes here')\n\n\n@bot.command('/start')\nasync def start(chat: Chat, match):\n    return chat.reply('Send me /square command with one float argument')\n\n\n@bot.command(r\"/square (.+)\")\nasync def square_command(chat: Chat, match):\n    val = match.group(1)\n    try:\n        val = float(val)\n        square = await async_square.call(val)\n        resp = f'Square for {val} is {square}'\n    except:\n        resp = 'Invalid number'\n    return chat.reply(resp)\n\n\nbot.run()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/catalyst-team/reaction", "keywords": "Machine Learning,Deep Learning,PyTorch", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "reaction", "package_url": "https://pypi.org/project/reaction/", "platform": "", "project_url": "https://pypi.org/project/reaction/", "project_urls": {"Homepage": "https://github.com/catalyst-team/reaction"}, "release_url": "https://pypi.org/project/reaction/20.2/", "requires_dist": ["fastapi[all] (<1.0.0,>=0.38.1)", "aio-pika (==6.1.1)"], "requires_python": ">=3.6.0", "summary": "Reaction. ML serving & microservices.", "version": "20.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<p><img alt=\"Reaction logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/863c13f7c0aa64c7c90202b89dbc0c6178e1f013/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f636174616c7973742d7465616d2f636174616c7973742d706963732f6d61737465722f706963732f5265616374696f6e5f4c6f676f2e706e67\"></p>\n<p><strong>Convenient DL serving</strong></p>\n<p><a href=\"https://travis-ci.com/catalyst-team/reaction\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f2a36aac326ea126d75b040a42502e79a3792a4/68747470733a2f2f7472617669732d63692e636f6d2f636174616c7973742d7465616d2f7265616374696f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/reaction/\" rel=\"nofollow\"><img alt=\"Pipi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dcf0c0d6e689bc5ebbad55fc814e081501b28bf5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7265616374696f6e2e737667\"></a>\n<a href=\"https://catalyst-team.github.io/reaction/index.html\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a44695532a7a1c58463faca4686cf2bf81799b7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f64796e616d69632f6a736f6e2e7376673f6c6162656c3d646f63732675726c3d6874747073253341253246253246707970692e6f7267253246707970692532467265616374696f6e2532466a736f6e2671756572793d2532342e696e666f2e76657273696f6e26636f6c6f72423d627269676874677265656e267072656669783d76\"></a>\n<a href=\"https://pepy.tech/project/reaction\" rel=\"nofollow\"><img alt=\"PyPI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cae14de6ed4be26b8cf28ab264017caacad10921/68747470733a2f2f706570792e746563682f62616467652f7265616374696f6e\"></a>\n<a href=\"https://github.com/catalyst-team/reaction/graphs/contributors\" rel=\"nofollow\"><img alt=\"Github contributors\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f96ff1c9a36ed8291a256669108b8f05ea3fd0d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f636174616c7973742d7465616d2f7265616374696f6e2e7376673f6c6f676f3d676974687562266c6f676f436f6c6f723d7768697465\"></a></p>\n<p><a href=\"https://t.me/catalyst_team\" rel=\"nofollow\"><img alt=\"Twitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ece5f05a9a9e066eec2b6f73b20ff610ac2fa445/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6577732d6f6e253230747769747465722d343939666562\"></a>\n<a href=\"https://t.me/catalyst_team\" rel=\"nofollow\"><img alt=\"Telegram\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bacc407dec94952649f8476b50f835a86081d0f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6368616e6e656c2d6f6e25323074656c656772616d2d626c7565\"></a>\n<a href=\"https://spectrum.chat/catalyst\" rel=\"nofollow\"><img alt=\"Spectrum\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/979ff6a573777fb4cce2489b1c8a407b218a0b3e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230737065637472756d2d626c756576696f6c6574\"></a>\n<a href=\"https://opendatascience.slack.com/messages/CGK4KQBHD\" rel=\"nofollow\"><img alt=\"Slack\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c82fb76cf21245c72c34fa5a162d46b9e31623f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f44532d736c61636b2d726564\"></a></p>\n</div>\n<p>Part of <a href=\"https://docs.google.com/presentation/d/1D-yhVOg6OXzjo9K_-IS5vSHLPIUxp1PEkFGnpRcNCNU/edit?usp=sharing\" rel=\"nofollow\">Catalyst Ecosystem</a>. Project <a href=\"https://github.com/catalyst-team/catalyst/blob/master/MANIFEST.md\" rel=\"nofollow\">manifest</a>.</p>\n<hr>\n<h2>Installation</h2>\n<p>Common installation:</p>\n<pre>pip install -U reaction\n</pre>\n<h2>Getting started</h2>\n<p><strong>consumer.py</strong>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Any</span>\n<span class=\"kn\">from</span> <span class=\"nn\">reaction.rpc</span> <span class=\"kn\">import</span> <span class=\"n\">RabbitRPC</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">rpc</span><span class=\"p\">(</span><span class=\"n\">RabbitRPC</span><span class=\"p\">):</span>\n    <span class=\"n\">URL</span> <span class=\"o\">=</span> <span class=\"s1\">'amqp://user:password@host'</span>\n\n\n<span class=\"nd\">@rpc</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_square</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">values</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">]</span>\n\n\n<span class=\"nd\">@rpc</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_square</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">values</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]:</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">sync_square</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">())</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">async_square</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">())</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<p><strong>client.py</strong>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">consumer</span> <span class=\"kn\">import</span> <span class=\"n\">sync_square</span><span class=\"p\">,</span> <span class=\"n\">async_square</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">sync_square</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">async_square</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># 4, 9</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>  <span class=\"c1\"># 16, 25, 36</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Example</h2>\n<ul>\n<li>Register telegram bot, achieve token</li>\n<li><code>cd example &amp;&amp; TG_TOKEN=\"telegram bot token goes here\" docker-compose up --force-recreate --build</code></li>\n<li>RabbitMQ web ui: <a href=\"http://127.0.0.1:15672/#/\" rel=\"nofollow\">http://127.0.0.1:15672/#/</a>\n<ul>\n<li>user: admin</li>\n<li>password: j8XfG9ZDT5ZZrWTzw62q</li>\n</ul>\n</li>\n<li>Docs (you can submit requests from web ui): <a href=\"http://127.0.0.1:8000/docs#/\" rel=\"nofollow\">http://127.0.0.1:8000/docs#/</a></li>\n<li>Redoc: <a href=\"http://127.0.0.1:8000/redoc\" rel=\"nofollow\">http://127.0.0.1:8000/redoc</a></li>\n<li>Telegram bot is ready to classify ants &amp; bees, but you have to send files \"as a photo\"</li>\n</ul>\n<h2>Telegram bot quick howto</h2>\n<p>Install async telegram client first:</p>\n<pre>$ pip install aiotg\n</pre>\n<p>Then create your bot:</p>\n<p><strong>tgbot.py</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">consumer</span> <span class=\"kn\">import</span> <span class=\"n\">async_square</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiotg</span> <span class=\"kn\">import</span> <span class=\"n\">Bot</span><span class=\"p\">,</span> <span class=\"n\">Chat</span>\n\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">Bot</span><span class=\"p\">(</span><span class=\"n\">api_token</span><span class=\"o\">=</span><span class=\"s1\">'telegram bot token goes here'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s1\">'/start'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"n\">chat</span><span class=\"p\">:</span> <span class=\"n\">Chat</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"s1\">'Send me /square command with one float argument'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"/square (.+)\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">square_command</span><span class=\"p\">(</span><span class=\"n\">chat</span><span class=\"p\">:</span> <span class=\"n\">Chat</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"n\">square</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">async_square</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'Square for </span><span class=\"si\">{</span><span class=\"n\">val</span><span class=\"si\">}</span><span class=\"s1\"> is </span><span class=\"si\">{</span><span class=\"n\">square</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"s1\">'Invalid number'</span>\n    <span class=\"k\">return</span> <span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6644766, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "141a3a2d399c4c16a8a9532445e2c249", "sha256": "31c90a517237c8564cb35aa2bfe936b6ecb974c46e641ea06dcdb26c1e30bd21"}, "downloads": -1, "filename": "reaction-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "141a3a2d399c4c16a8a9532445e2c249", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8816, "upload_time": "2019-09-14T18:01:58", "upload_time_iso_8601": "2019-09-14T18:01:58.542532Z", "url": "https://files.pythonhosted.org/packages/b5/64/c70e5003621822d714f3de7261eda766852003d78daa0d5fe509cda0da2d/reaction-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "014f35349c4ed48102193533498d96ed", "sha256": "b0a5e3e59267e6ec209b1c5e80934ea4a0d2b339f7701f7902c8ecc7041010cc"}, "downloads": -1, "filename": "reaction-0.0.1.tar.gz", "has_sig": false, "md5_digest": "014f35349c4ed48102193533498d96ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4302, "upload_time": "2019-09-14T18:02:00", "upload_time_iso_8601": "2019-09-14T18:02:00.911025Z", "url": "https://files.pythonhosted.org/packages/2c/27/fc6a1f2a41535e9d93f9d6eb6e7b29922d446d086af68c43713d331e5e39/reaction-0.0.1.tar.gz", "yanked": false}], "19.11": [{"comment_text": "", "digests": {"md5": "fc5c4bf798b0adcc5f72bf36b3b69530", "sha256": "490e535ded97c169e5b186255fba37b975dcc14d687d05f4ff721e4a23bb09f5"}, "downloads": -1, "filename": "reaction-19.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc5c4bf798b0adcc5f72bf36b3b69530", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 10479, "upload_time": "2019-11-15T12:09:39", "upload_time_iso_8601": "2019-11-15T12:09:39.742780Z", "url": "https://files.pythonhosted.org/packages/2c/01/609dff728417343dbbe318370770fd90c475b1dd3cf3b2eb988ef299029e/reaction-19.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99a11345c7bc00047477ead3db34889a", "sha256": "a6349d8adcb68ecc6cd4b5880adee87731076d144f05d56980d25a4bc3a3da76"}, "downloads": -1, "filename": "reaction-19.11.tar.gz", "has_sig": false, "md5_digest": "99a11345c7bc00047477ead3db34889a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6087, "upload_time": "2019-11-15T12:09:41", "upload_time_iso_8601": "2019-11-15T12:09:41.096885Z", "url": "https://files.pythonhosted.org/packages/71/68/8328cae9fd7a435d4d653762218df88f32c7d24efe0e345f328f91d1d932/reaction-19.11.tar.gz", "yanked": false}], "20.2": [{"comment_text": "", "digests": {"md5": "795251d88a2db2aaadc7956851b5993c", "sha256": "3c36fbe4a0d7d91a3bdcb339ed2775e18bc8e49edd077c03d20d257d4dcd100b"}, "downloads": -1, "filename": "reaction-20.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "795251d88a2db2aaadc7956851b5993c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 10901, "upload_time": "2020-02-17T08:53:46", "upload_time_iso_8601": "2020-02-17T08:53:46.029471Z", "url": "https://files.pythonhosted.org/packages/75/9b/c549eb02e2b5caf8e2dcfb6386fa82645ffaaf2e7fc3c6d682f0591d8187/reaction-20.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8689664bdb0579fd401bdb95e11098e", "sha256": "8eeeba74e35e76cdcd781c777a4629a5c9f512f61c6d91400e736574075a7deb"}, "downloads": -1, "filename": "reaction-20.2.tar.gz", "has_sig": false, "md5_digest": "a8689664bdb0579fd401bdb95e11098e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6600, "upload_time": "2020-02-17T08:53:47", "upload_time_iso_8601": "2020-02-17T08:53:47.654774Z", "url": "https://files.pythonhosted.org/packages/3e/71/ed0b7b89b2e8b311d619718dd6c49de211d992b910f913576cfc3afad36a/reaction-20.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "795251d88a2db2aaadc7956851b5993c", "sha256": "3c36fbe4a0d7d91a3bdcb339ed2775e18bc8e49edd077c03d20d257d4dcd100b"}, "downloads": -1, "filename": "reaction-20.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "795251d88a2db2aaadc7956851b5993c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 10901, "upload_time": "2020-02-17T08:53:46", "upload_time_iso_8601": "2020-02-17T08:53:46.029471Z", "url": "https://files.pythonhosted.org/packages/75/9b/c549eb02e2b5caf8e2dcfb6386fa82645ffaaf2e7fc3c6d682f0591d8187/reaction-20.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8689664bdb0579fd401bdb95e11098e", "sha256": "8eeeba74e35e76cdcd781c777a4629a5c9f512f61c6d91400e736574075a7deb"}, "downloads": -1, "filename": "reaction-20.2.tar.gz", "has_sig": false, "md5_digest": "a8689664bdb0579fd401bdb95e11098e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6600, "upload_time": "2020-02-17T08:53:47", "upload_time_iso_8601": "2020-02-17T08:53:47.654774Z", "url": "https://files.pythonhosted.org/packages/3e/71/ed0b7b89b2e8b311d619718dd6c49de211d992b910f913576cfc3afad36a/reaction-20.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:32 2020"}