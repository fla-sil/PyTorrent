{"info": {"author": "Canadian Astronomy Data Centre", "author_email": "cadc@nrc-cnrc.gc.ca", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Affero General Public License v3", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "caom2utils\n==========\n\n.. image:: https://img.shields.io/pypi/v/caom2utils.svg   \n    :target: https://pypi.python.org/pypi/caom2utils\n\nUtilities to facililate working with the CAOM2 model.\n\nObservation Validation\n----------------------\n\nValidates a CAOM2 element (Observation, Plane, Artifact, Part or Chunk) with respect to the attributes of the element and possibly all its sub-elements. Example of validations: attribute values, spherical geometry of planes, WCS of chuncks, etc.\n\n.. code:: python\n\n    from __future__ import (absolute_import, division, print_function,\n                    unicode_literals)\n    import sys\n    from caom2 import SimpleObservation\n    import caom2utils\n\n    obs = SimpleObservation('collection', 'observationID')\n\n    # change and update obs\n\n    try:\n        caom2utils.validate(obs)\n    except Exception:\n        print('My exception is not valid')\n\n\nObservation Generation\n======================\n\nThere are two command-line applications that will generate a CAOM2 Observation in this package. fits2caom2 assumes legacy operations, and should be a not-quite replacement for the Java application. caom2gen provides a bit different invocation mechanism, relying on blueprints for configuration information, and specifies the cardinality of the Observation/Plane/Artifact combinations at the command line.\n\n\nfits2caom2\n----------\n\n.. code-block:: console\n\n    usage: fits2caom2 [-h] [--cert CERT | -n | --netrc-file NETRC_FILE | -u USER]\n                      [--host HOST] [--resource-id RESOURCE_ID] [-d | -q | -v]\n                      [-V] [--dumpconfig] [--no_validate]\n                      [-o OUT_OBS_XML]\n                      (-i IN_OBS_XML | --observation collection observationID)\n                      [--local LOCAL [LOCAL ...]] [--keep] [--test]\n                      [--productID PRODUCTID] [--config CONFIG]\n                      [--default DEFAULT] [--override OVERRIDE]\n                      fileURI [fileURI ...]\n\n    Augments an observation with information in one or more fits files.\n\n    positional arguments:\n      fileURI                                 URI of a fits file\n\n    optional arguments:\n      --cert CERT                             location of your X509 certificate to use for\n                                              authentication (unencrypted, in PEM format)\n      --config CONFIG                         optional CAOM2 utype to keyword config file to merge\n                                              with the internal configuration\n      -d, --debug                             debug messages\n      --default DEFAULT                       file with default values for keywords\n      --dumpconfig                            output the utype to keyword mapping to the console\n      -h, --help                              show this help message and exit\n      --host HOST                             base hostname for services - used mainly for testing\n                                              (default: www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca)\n      -i, --in IN_OBS_XML                     input of observation to be augmented in XML\n      --keep                                  keep the locally stored files after ingestion\n      --local LOCAL [ LOCAL ...]\n                                              list of files in local filesystem (same order as uri)\n      -n                                      use .netrc in $HOME for authentication\n      --netrc-file NETRC_FILE                 \n                                              netrc file to use for authentication\n      --no_validate                           by default, the application will validate the WCS\n                                              information for an observation. Specifying this flag\n                                              skips that step.\n      --observation collection observationID  \n                                              observation in a collection\n      -o, --out OUT_OBS_XML                   output of augmented observation in XML\n      --override OVERRIDE                     file with override values for keywords\n      --productID PRODUCTID                   product ID of the plane in the observation\n      -q, --quiet                             run quietly\n      --resource-id RESOURCE_ID               resource identifier (default\n                                              ivo://cadc.nrc.ca/fits2caom2)\n      --test                                  test mode, do not persist to database\n      -u, --user USER                         name of user to authenticate. Note: application\n                                              prompts for the corresponding password!\n      -v, --verbose                           verbose messages\n      -V, --version                           show program's version number and exit\n\n\ncaom2gen\n--------\n\n.. code-block:: console\n\n    usage: caom2gen [-h] [--cert CERT | -n | --netrc-file NETRC_FILE | -u USER]\n                    [--host HOST] [--resource-id RESOURCE_ID] [-d | -q | -v] [-V]\n                    [--dumpconfig] [--no_validate]\n                    [-o OUT_OBS_XML]\n                    (-i IN_OBS_XML | --observation collection observationID)\n                    [--local LOCAL [LOCAL ...]] [--keep] [--test]\n                    [--module MODULE] [--plugin PLUGIN]\n                    [--lineage LINEAGE [LINEAGE ...]] --blueprint BLUEPRINT\n                    [BLUEPRINT ...]\n\n    Augments an observation with information in one or more fits files.\n\n    optional arguments:\n      --blueprint BLUEPRINT [BLUEPRINT ...]\n                            list of files with blueprints for CAOM2 construction,\n                            in serialized format. If the list is of length 1, the\n                            same blueprint will be applied to all lineage entries.\n                            Otherwise, there must be a blueprint file per lineage\n                            entry.\n      --cert CERT           location of your X509 certificate to use for\n                            authentication (unencrypted, in PEM format)\n      -d, --debug           debug messages\n      --dumpconfig          output the utype to keyword mapping to the console\n      -h, --help            show this help message and exit\n      --host HOST           base hostname for services - used mainly for testing\n                            (default: www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca)\n      -i, --in IN_OBS_XML   input of observation to be augmented in XML\n      --keep                keep the locally stored files after ingestion\n      --lineage LINEAGE [LINEAGE ...]\n                            productID/artifactURI. List of plane/artifact\n                            identifiers that will becreated for the identified\n                            observation.\n      --local LOCAL [LOCAL ...]\n                            list of files in local filesystem (same order as uri)\n      --module MODULE       if the blueprint contains function calls, call\n                            importlib.import_module for the named module. Provide\n                            a fully qualified name. Parameter choices are the\n                            artifact URI (uri) or a list of astropy Header\n                            instances (header). This will allow the update of a\n                            single blueprint entry with a single call.\n      -n                    use .netrc in $HOME for authentication\n      --netrc-file NETRC_FILE\n                            netrc file to use for authentication\n      --no_validate         by default, the application will validate the WCS\n                            information for an observation. Specifying this flag\n                            skips that step.\n      --observation collection observationID\n                            observation in a collection\n      -o, --out OUT_OBS_XML\n                            output of augmented observation in XML\n      --plugin PLUGIN       if this parameter is specified, call\n                            importlib.import_module for the named module. Then\n                            execute the method \"update\", with the signature\n                            (Observation, **kwargs). This will allow for the\n                            update of multiple observation data members with one\n                            call.\n      -q, --quiet           run quietly\n      --resource-id RESOURCE_ID\n                            resource identifier (default\n                            ivo://cadc.nrc.ca/fits2caom2)\n      --test                test mode, do not persist to database\n      -u, --user USER       name of user to authenticate. Note: application\n                            prompts for the corresponding password!\n      -v, --verbose         verbose messages\n      -V, --version         show program's version number and exit", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/caom2", "keywords": "", "license": "AGPLv3", "maintainer": "", "maintainer_email": "", "name": "caom2utils", "package_url": "https://pypi.org/project/caom2utils/", "platform": "", "project_url": "https://pypi.org/project/caom2utils/", "project_urls": {"Homepage": "http://www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/caom2"}, "release_url": "https://pypi.org/project/caom2utils/1.4.4/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "summary": "CAOM-2.3 utils", "version": "1.4.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"caom2utils\">\n<h2>caom2utils</h2>\n<a href=\"https://pypi.python.org/pypi/caom2utils\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/caom2utils.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7177e3173fd0b7850f9f6111029e1b26895dc194/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63616f6d327574696c732e737667\"></a>\n<p>Utilities to facililate working with the CAOM2 model.</p>\n<div id=\"observation-validation\">\n<h3>Observation Validation</h3>\n<p>Validates a CAOM2 element (Observation, Plane, Artifact, Part or Chunk) with respect to the attributes of the element and possibly all its sub-elements. Example of validations: attribute values, spherical geometry of planes, WCS of chuncks, etc.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span>\n                <span class=\"n\">unicode_literals</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">caom2</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleObservation</span>\n<span class=\"kn\">import</span> <span class=\"nn\">caom2utils</span>\n\n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">SimpleObservation</span><span class=\"p\">(</span><span class=\"s1\">'collection'</span><span class=\"p\">,</span> <span class=\"s1\">'observationID'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># change and update obs</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">caom2utils</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">obs</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'My exception is not valid'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"observation-generation\">\n<h2>Observation Generation</h2>\n<p>There are two command-line applications that will generate a CAOM2 Observation in this package. fits2caom2 assumes legacy operations, and should be a not-quite replacement for the Java application. caom2gen provides a bit different invocation mechanism, relying on blueprints for configuration information, and specifies the cardinality of the Observation/Plane/Artifact combinations at the command line.</p>\n<div id=\"fits2caom2\">\n<h3>fits2caom2</h3>\n<pre><span class=\"go\">usage: fits2caom2 [-h] [--cert CERT | -n | --netrc-file NETRC_FILE | -u USER]\n                  [--host HOST] [--resource-id RESOURCE_ID] [-d | -q | -v]\n                  [-V] [--dumpconfig] [--no_validate]\n                  [-o OUT_OBS_XML]\n                  (-i IN_OBS_XML | --observation collection observationID)\n                  [--local LOCAL [LOCAL ...]] [--keep] [--test]\n                  [--productID PRODUCTID] [--config CONFIG]\n                  [--default DEFAULT] [--override OVERRIDE]\n                  fileURI [fileURI ...]\n\nAugments an observation with information in one or more fits files.\n\npositional arguments:\n  fileURI                                 URI of a fits file\n\noptional arguments:\n  --cert CERT                             location of your X509 certificate to use for\n                                          authentication (unencrypted, in PEM format)\n  --config CONFIG                         optional CAOM2 utype to keyword config file to merge\n                                          with the internal configuration\n  -d, --debug                             debug messages\n  --default DEFAULT                       file with default values for keywords\n  --dumpconfig                            output the utype to keyword mapping to the console\n  -h, --help                              show this help message and exit\n  --host HOST                             base hostname for services - used mainly for testing\n                                          (default: www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca)\n  -i, --in IN_OBS_XML                     input of observation to be augmented in XML\n  --keep                                  keep the locally stored files after ingestion\n  --local LOCAL [ LOCAL ...]\n                                          list of files in local filesystem (same order as uri)\n  -n                                      use .netrc in $HOME for authentication\n  --netrc-file NETRC_FILE\n                                          netrc file to use for authentication\n  --no_validate                           by default, the application will validate the WCS\n                                          information for an observation. Specifying this flag\n                                          skips that step.\n  --observation collection observationID\n                                          observation in a collection\n  -o, --out OUT_OBS_XML                   output of augmented observation in XML\n  --override OVERRIDE                     file with override values for keywords\n  --productID PRODUCTID                   product ID of the plane in the observation\n  -q, --quiet                             run quietly\n  --resource-id RESOURCE_ID               resource identifier (default\n                                          ivo://cadc.nrc.ca/fits2caom2)\n  --test                                  test mode, do not persist to database\n  -u, --user USER                         name of user to authenticate. Note: application\n                                          prompts for the corresponding password!\n  -v, --verbose                           verbose messages\n  -V, --version                           show program's version number and exit</span>\n</pre>\n</div>\n<div id=\"caom2gen\">\n<h3>caom2gen</h3>\n<pre><span class=\"go\">usage: caom2gen [-h] [--cert CERT | -n | --netrc-file NETRC_FILE | -u USER]\n                [--host HOST] [--resource-id RESOURCE_ID] [-d | -q | -v] [-V]\n                [--dumpconfig] [--no_validate]\n                [-o OUT_OBS_XML]\n                (-i IN_OBS_XML | --observation collection observationID)\n                [--local LOCAL [LOCAL ...]] [--keep] [--test]\n                [--module MODULE] [--plugin PLUGIN]\n                [--lineage LINEAGE [LINEAGE ...]] --blueprint BLUEPRINT\n                [BLUEPRINT ...]\n\nAugments an observation with information in one or more fits files.\n\noptional arguments:\n  --blueprint BLUEPRINT [BLUEPRINT ...]\n                        list of files with blueprints for CAOM2 construction,\n                        in serialized format. If the list is of length 1, the\n                        same blueprint will be applied to all lineage entries.\n                        Otherwise, there must be a blueprint file per lineage\n                        entry.\n  --cert CERT           location of your X509 certificate to use for\n                        authentication (unencrypted, in PEM format)\n  -d, --debug           debug messages\n  --dumpconfig          output the utype to keyword mapping to the console\n  -h, --help            show this help message and exit\n  --host HOST           base hostname for services - used mainly for testing\n                        (default: www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca)\n  -i, --in IN_OBS_XML   input of observation to be augmented in XML\n  --keep                keep the locally stored files after ingestion\n  --lineage LINEAGE [LINEAGE ...]\n                        productID/artifactURI. List of plane/artifact\n                        identifiers that will becreated for the identified\n                        observation.\n  --local LOCAL [LOCAL ...]\n                        list of files in local filesystem (same order as uri)\n  --module MODULE       if the blueprint contains function calls, call\n                        importlib.import_module for the named module. Provide\n                        a fully qualified name. Parameter choices are the\n                        artifact URI (uri) or a list of astropy Header\n                        instances (header). This will allow the update of a\n                        single blueprint entry with a single call.\n  -n                    use .netrc in $HOME for authentication\n  --netrc-file NETRC_FILE\n                        netrc file to use for authentication\n  --no_validate         by default, the application will validate the WCS\n                        information for an observation. Specifying this flag\n                        skips that step.\n  --observation collection observationID\n                        observation in a collection\n  -o, --out OUT_OBS_XML\n                        output of augmented observation in XML\n  --plugin PLUGIN       if this parameter is specified, call\n                        importlib.import_module for the named module. Then\n                        execute the method \"update\", with the signature\n                        (Observation, **kwargs). This will allow for the\n                        update of multiple observation data members with one\n                        call.\n  -q, --quiet           run quietly\n  --resource-id RESOURCE_ID\n                        resource identifier (default\n                        ivo://cadc.nrc.ca/fits2caom2)\n  --test                test mode, do not persist to database\n  -u, --user USER       name of user to authenticate. Note: application\n                        prompts for the corresponding password!\n  -v, --verbose         verbose messages\n  -V, --version         show program's version number and exit</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6196659, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "d18e4a89b8756ed8df50713b7b8c96a5", "sha256": "c6e939fd5ea4a6bef8fa85162addf5d11f473cf958257131b76f631e31b3b035"}, "downloads": -1, "filename": "caom2utils-1.0.tar.gz", "has_sig": false, "md5_digest": "d18e4a89b8756ed8df50713b7b8c96a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86098, "upload_time": "2018-02-28T19:53:58", "upload_time_iso_8601": "2018-02-28T19:53:58.556784Z", "url": "https://files.pythonhosted.org/packages/b4/fc/621215b9f0511dee35a556bb917afd1969c2cb7ceb9c7a4e183d56fedf86/caom2utils-1.0.tar.gz", "yanked": false}], "1.0a2": [{"comment_text": "", "digests": {"md5": "b12af63587c67fe0743c579ec1c1449a", "sha256": "fa866181652f345755409478ecff7968c94b9f23c0e8e28d2cf815a2e8acb185"}, "downloads": -1, "filename": "caom2utils-1.0a2.tar.gz", "has_sig": false, "md5_digest": "b12af63587c67fe0743c579ec1c1449a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82165, "upload_time": "2018-02-09T02:01:28", "upload_time_iso_8601": "2018-02-09T02:01:28.527498Z", "url": "https://files.pythonhosted.org/packages/32/49/84d42f0477228e173083dfd29ee59e539665caeb02db2f932cc54a012263/caom2utils-1.0a2.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "987f3deead53edc9c38034ddf17de0a2", "sha256": "6a0740f277fba35fdad8b4172744eaeb89b6d801641bde2becc02411d0519bf0"}, "downloads": -1, "filename": "caom2utils-1.1.tar.gz", "has_sig": false, "md5_digest": "987f3deead53edc9c38034ddf17de0a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88701, "upload_time": "2018-03-08T19:14:29", "upload_time_iso_8601": "2018-03-08T19:14:29.864958Z", "url": "https://files.pythonhosted.org/packages/4f/03/3623ee78832577e36ad5621aa1d5bf6d6b338def22b6cd958e155dbbcfca/caom2utils-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "9c6c0ea72ff586351b961161f953f341", "sha256": "f78c922892772bd914c1d27e0413dd365303f39d91b137371eb9ac1cb7ab11bf"}, "downloads": -1, "filename": "caom2utils-1.2.tar.gz", "has_sig": false, "md5_digest": "9c6c0ea72ff586351b961161f953f341", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110510, "upload_time": "2018-03-13T22:11:22", "upload_time_iso_8601": "2018-03-13T22:11:22.223934Z", "url": "https://files.pythonhosted.org/packages/73/7f/7e2b81c4393e11dc464deb8ce030052ad39ac474f3886b2ab56f4775d082/caom2utils-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "85e439061f751bbca41f6251cc7f4e43", "sha256": "bcc465bab0bd11014af612d3f502960bcc8dd389bd9bb30da951144f43632de4"}, "downloads": -1, "filename": "caom2utils-1.3.tar.gz", "has_sig": false, "md5_digest": "85e439061f751bbca41f6251cc7f4e43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121199, "upload_time": "2018-05-10T17:13:43", "upload_time_iso_8601": "2018-05-10T17:13:43.029230Z", "url": "https://files.pythonhosted.org/packages/b8/6e/cc3364e1dce890e56a898a206485408ff560cf1fa6ad5f9626d82b104692/caom2utils-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "357bbf95e529bff8a30bbc78e9bc40e5", "sha256": "c32ceae1a0c670697476119ac6c3526a445fcc69d3dc49fe68741e0cf6ad4e7a"}, "downloads": -1, "filename": "caom2utils-1.4.tar.gz", "has_sig": false, "md5_digest": "357bbf95e529bff8a30bbc78e9bc40e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127384, "upload_time": "2018-06-13T17:28:16", "upload_time_iso_8601": "2018-06-13T17:28:16.694781Z", "url": "https://files.pythonhosted.org/packages/f9/c3/a8c4d632492627f1a96c579ca92ba333fc3557b0994c22b90cecf888417c/caom2utils-1.4.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "7aee9fca45761ee4f2a099287dff1ec6", "sha256": "63e086e79fc4267509b7d410fe6ebcf2f027b0f47ca92df3b76391b629976a06"}, "downloads": -1, "filename": "caom2utils-1.4.1.tar.gz", "has_sig": false, "md5_digest": "7aee9fca45761ee4f2a099287dff1ec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129444, "upload_time": "2018-08-01T22:06:48", "upload_time_iso_8601": "2018-08-01T22:06:48.757427Z", "url": "https://files.pythonhosted.org/packages/78/55/3bc4d64342d22b14b0d1bcd43465f0ad9a0f6012ad262e5aee541f169f81/caom2utils-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "6998cf1e8610b54f14900bbe5dc966be", "sha256": "d5a1576f677ac2ac3c33bf9b9a361d23202ec789a4d18746586ed69b4b90e1be"}, "downloads": -1, "filename": "caom2utils-1.4.2.tar.gz", "has_sig": false, "md5_digest": "6998cf1e8610b54f14900bbe5dc966be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129535, "upload_time": "2018-11-29T22:14:04", "upload_time_iso_8601": "2018-11-29T22:14:04.965288Z", "url": "https://files.pythonhosted.org/packages/53/77/dc20f310d8482a4b88d2dda45ee31a4e54f6284761e3102e977ae289c815/caom2utils-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "245f6c9d3fc00d67404ae1a1e2be14e8", "sha256": "6653bcfa1b900e3abc353d97648315f61e71b9f40152915583ec0e37f072b5b7"}, "downloads": -1, "filename": "caom2utils-1.4.3.tar.gz", "has_sig": false, "md5_digest": "245f6c9d3fc00d67404ae1a1e2be14e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135986, "upload_time": "2019-05-30T16:33:23", "upload_time_iso_8601": "2019-05-30T16:33:23.002074Z", "url": "https://files.pythonhosted.org/packages/2e/3f/da8405281535f859a3528b3f1a626a3e2fa223777ae3e3b7cbaee7eab152/caom2utils-1.4.3.tar.gz", "yanked": false}], "1.4.4": [{"comment_text": "", "digests": {"md5": "d2003baa5ccff6ba93b6ab0df5c353d5", "sha256": "834949b3c6c908c0e4d0cb47432379f1361d45b506d404b4c1b9cd6ca80cafe1"}, "downloads": -1, "filename": "caom2utils-1.4.4.tar.gz", "has_sig": false, "md5_digest": "d2003baa5ccff6ba93b6ab0df5c353d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 137220, "upload_time": "2019-11-25T20:26:11", "upload_time_iso_8601": "2019-11-25T20:26:11.133599Z", "url": "https://files.pythonhosted.org/packages/b5/5b/8e4887f5b169dc0335fbd146d9e25b6fca3b7edef5807bfe18bbae319142/caom2utils-1.4.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2003baa5ccff6ba93b6ab0df5c353d5", "sha256": "834949b3c6c908c0e4d0cb47432379f1361d45b506d404b4c1b9cd6ca80cafe1"}, "downloads": -1, "filename": "caom2utils-1.4.4.tar.gz", "has_sig": false, "md5_digest": "d2003baa5ccff6ba93b6ab0df5c353d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 137220, "upload_time": "2019-11-25T20:26:11", "upload_time_iso_8601": "2019-11-25T20:26:11.133599Z", "url": "https://files.pythonhosted.org/packages/b5/5b/8e4887f5b169dc0335fbd146d9e25b6fca3b7edef5807bfe18bbae319142/caom2utils-1.4.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:29 2020"}