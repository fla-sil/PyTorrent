{"info": {"author": "Arne Babenhauserheide", "author_email": "arne_bab@web.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Info: http://1w6.org \n\nThe ews (\"Ein Wuerfel Sytem\" is german for \"One Die System\") is a free rpg backend which covers char interaction and char management -> http://1w6.org. \n\nChars have attributes, abilities, edges/flaws, equipment and battle values (directly derived from the attributes and abilities). \n\n\nUsage from command line: \n\n    - None yet. \n\n\nExamples: \n\n    - None yet. \n\n\nUse-Cases: \n\n - Creating Chars\n    \n    Create and print a char from a tag-string\n        >>> from char import Char\n        >>> tag_string = \"tag:1w6.org,2008:Human\"\n        >>> char_from_tag = Char(source=tag_string, template=False) \n    \n    template=False says: Go with the name inside the stored file or (if None is avaible) in the tagstring. \n    \n    Else it would create a new name for it. \n    \n    TODO: Change the default to template=False (some checking of other libs necessary for that)\n        >>> print char_from_tag\n        Name: Human\n        Sprache: Esperanto\n    \n    TODO: Create a char from a char dict. \n    \n    TODO: Print location of character file. \n    \n    \n - Combat\n    \n    Create two chars and let them fight one round. \n        >>> char1 = Char()\n        >>> char2 = Char()\n        >>> print char1.wounds, char2.wounds\n        [0, 0] [0, 0]\n        >>> battle_result = char1.fight_round(char2)\n        >>> character_stats = (char1.get_battle_result_values(), char2.get_battle_result_values())  \n        >>> # Gives TP and wounds for Char 1 and 2\n    \n    Let the two chars fight a battle with the one roll battle system. \n        >>> char1.fight_one_roll_battle(char2)\n        >>> result = (char1.get_battle_result_values(), char2.get_battle_result_values()) \n        >>> # Dict for char1 and for char 2\n    \n    TODO: Fight a whole battle with the complex battle system. \n    \n    \n - Attributes\n    \n    List all attributes. If the char has None, print a single space. \n        >>> char1.attributes\n        ' '\n    \n    \n - Skills and checks\n    \n    List all skills. If the char has None, print a single space. \n        >>> char1.skills\n        {'Nahkampf': {'Grundwert': 12, 'Striche': 3, 'Zahlenwert': 12}}\n    \n    Do a skill test (default target number is 9)\n        >>> print \"Do we manage to cook a nice meal?\"\n        Do we manage to cook a nice meal?\n        >>> result = char1.check_skill(\"cook\")\n    \n    Do a skill test against another target number. \n        >>> print \"Do we manage to cook an exceptional meal?\"\n        Do we manage to cook an exceptional meal?\n        >>> result = char1.check_skill(\"cook\", MW=18)\n    \n    TODO: Check how good we manage something. \n    \n    TODO: Check if we manage to make a roll and how good we manage it. \n    \n    \n - Competition (skill vs. skill and similar)\n    \n    TODO: Let two chars compete for one round. \n    \n    TODO: Let two chars do a full competition. \n    \n    \n - Equipment\n    \n    Get the current equipment of the char. \n        >>> for i in char1.equipment: print char1.equipment[i] \n        {'Stoffkleidung': {'Name': 'Simple garb', 'Schutz': 1}}\n        {'Waffenlos': {'Name': 'Iron knuckles', 'Schaden': 1}}\n        >>> # TODO: Fix to make it nicer to use. \n    \n    \n    Get the current combat equipment of the char (armor and weapon). \n        >>> char1.weapon\n        {'Name': 'Iron knuckles', 'Schaden': 1}\n        >>> char1.armor\n        {'Name': 'Simple garb', 'Schutz': 1}\n    \n    TODO: Change armor and weapon (and weapon skill). \n    \n    TODO: Get the current clothes of the char. \n    \n    TODO: Change the current clothes of the char. \n    \n    \n - Improving Chars\n    \n    Improve a char by a 3 points at random (about the value to get for one gaming session in a hreo setting). \n        >>> old_and_new_data = char1.upgrade(3)\n    \n    Upgrade with a weighted list of attributes and skills which could be improved additionally to known skills and attributes. \n        >>> old_and_new_data = char1.upgrade(3, object=(\"weighted\", [(\"attribute\",  \"sensitivity\", 1), (\"skill\", \"cooking\", 2)]))\n    \n    Upgrade a specific skill or attribute. \n        >>> old_and_new_data = char1.upgrade(3, object=(\"skill\", \"talking senslessly\"))\n        \n    # TODO: Add attibute explicitely. \n    \n    \n - Saving Chars\n    \n    Save the changed (wounded but improved) Char as new template. \n    \n    Commented out, because this creates new files. \n        >>> # char1.name = char1.amov.tagname\n        >>> # char1.save()\n    \n    Save the changed Char as a new char and get the new tag to call it again. \n    \n    Commented out, because this creates new files. \n        >>> # tagstring = char1.amov.tagstring_without_name + char1.name # The tag to call the char\n        >>> # char1.save()\n        >>> # char1_again = Char(source=tagstring, template=False)\n    \n    \n - Finishing Chars off :) \n    \n    And in the end: Die \n        >>> char1.die()\n\n\nPlans: \n    - Change char file format: an empty dict shoulnd't be represented by \" \" anymore, but by {} (the real yaml represenation of an empty dictionary). \n\n\nSource URL (Mercurial): U{http://rpg-1d6.sf.net/hg/1d6}\n\nPyPI URL: U{http://pypi.python.org/pypi/ews}\n\n\n\n- renamed module to rpg-1d6: http://pypi.python.org/pypi/rpg-1d6 \n\news 0.1\n\n- created ews as rpg backend package.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://1w6.org/programme", "keywords": "ews,rpg,characters", "license": "GNU GPL-3 or later", "maintainer": null, "maintainer_email": null, "name": "rpg-1d6", "package_url": "https://pypi.org/project/rpg-1d6/", "platform": "any", "project_url": "https://pypi.org/project/rpg-1d6/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://1w6.org/programme"}, "release_url": "https://pypi.org/project/rpg-1d6/0.1/", "requires_dist": null, "requires_python": null, "summary": "The 1d6 RPG backend module provides character management and interaction.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Info: <a href=\"http://1w6.org\" rel=\"nofollow\">http://1w6.org</a></p>\n<p>The ews (\u201cEin Wuerfel Sytem\u201d is german for \u201cOne Die System\u201d) is a free rpg backend which covers char interaction and char management -&gt; <a href=\"http://1w6.org\" rel=\"nofollow\">http://1w6.org</a>.</p>\n<p>Chars have attributes, abilities, edges/flaws, equipment and battle values (directly derived from the attributes and abilities).</p>\n<p>Usage from command line:</p>\n<blockquote>\n<ul>\n<li>None yet.</li>\n</ul>\n</blockquote>\n<p>Examples:</p>\n<blockquote>\n<ul>\n<li>None yet.</li>\n</ul>\n</blockquote>\n<p>Use-Cases:</p>\n<blockquote>\n<ul>\n<li><p>Creating Chars</p>\n<blockquote>\n<dl>\n<dt>Create and print a char from a tag-string</dt>\n<dd><pre>&gt;&gt;&gt; from char import Char\n&gt;&gt;&gt; tag_string = \"tag:1w6.org,2008:Human\"\n&gt;&gt;&gt; char_from_tag = Char(source=tag_string, template=False)\n</pre>\n</dd>\n</dl>\n<p>template=False says: Go with the name inside the stored file or (if None is avaible) in the tagstring.</p>\n<p>Else it would create a new name for it.</p>\n<dl>\n<dt>TODO: Change the default to template=False (some checking of other libs necessary for that)</dt>\n<dd><pre>&gt;&gt;&gt; print char_from_tag\nName: Human\nSprache: Esperanto\n</pre>\n</dd>\n</dl>\n<p>TODO: Create a char from a char dict.</p>\n<p>TODO: Print location of character file.</p>\n</blockquote>\n</li>\n<li><p>Combat</p>\n<blockquote>\n<dl>\n<dt>Create two chars and let them fight one round.</dt>\n<dd><pre>&gt;&gt;&gt; char1 = Char()\n&gt;&gt;&gt; char2 = Char()\n&gt;&gt;&gt; print char1.wounds, char2.wounds\n[0, 0] [0, 0]\n&gt;&gt;&gt; battle_result = char1.fight_round(char2)\n&gt;&gt;&gt; character_stats = (char1.get_battle_result_values(), char2.get_battle_result_values())\n&gt;&gt;&gt; # Gives TP and wounds for Char 1 and 2\n</pre>\n</dd>\n<dt>Let the two chars fight a battle with the one roll battle system.</dt>\n<dd><pre>&gt;&gt;&gt; char1.fight_one_roll_battle(char2)\n&gt;&gt;&gt; result = (char1.get_battle_result_values(), char2.get_battle_result_values())\n&gt;&gt;&gt; # Dict for char1 and for char 2\n</pre>\n</dd>\n</dl>\n<p>TODO: Fight a whole battle with the complex battle system.</p>\n</blockquote>\n</li>\n<li><p>Attributes</p>\n<blockquote>\n<dl>\n<dt>List all attributes. If the char has None, print a single space.</dt>\n<dd><pre>&gt;&gt;&gt; char1.attributes\n' '\n</pre>\n</dd>\n</dl>\n</blockquote>\n</li>\n<li><p>Skills and checks</p>\n<blockquote>\n<dl>\n<dt>List all skills. If the char has None, print a single space.</dt>\n<dd><pre>&gt;&gt;&gt; char1.skills\n{'Nahkampf': {'Grundwert': 12, 'Striche': 3, 'Zahlenwert': 12}}\n</pre>\n</dd>\n<dt>Do a skill test (default target number is 9)</dt>\n<dd><pre>&gt;&gt;&gt; print \"Do we manage to cook a nice meal?\"\nDo we manage to cook a nice meal?\n&gt;&gt;&gt; result = char1.check_skill(\"cook\")\n</pre>\n</dd>\n<dt>Do a skill test against another target number.</dt>\n<dd><pre>&gt;&gt;&gt; print \"Do we manage to cook an exceptional meal?\"\nDo we manage to cook an exceptional meal?\n&gt;&gt;&gt; result = char1.check_skill(\"cook\", MW=18)\n</pre>\n</dd>\n</dl>\n<p>TODO: Check how good we manage something.</p>\n<p>TODO: Check if we manage to make a roll and how good we manage it.</p>\n</blockquote>\n</li>\n<li><p>Competition (skill vs. skill and similar)</p>\n<blockquote>\n<p>TODO: Let two chars compete for one round.</p>\n<p>TODO: Let two chars do a full competition.</p>\n</blockquote>\n</li>\n<li><p>Equipment</p>\n<blockquote>\n<dl>\n<dt>Get the current equipment of the char.</dt>\n<dd><pre>&gt;&gt;&gt; for i in char1.equipment: print char1.equipment[i]\n{'Stoffkleidung': {'Name': 'Simple garb', 'Schutz': 1}}\n{'Waffenlos': {'Name': 'Iron knuckles', 'Schaden': 1}}\n&gt;&gt;&gt; # TODO: Fix to make it nicer to use.\n</pre>\n</dd>\n<dt>Get the current combat equipment of the char (armor and weapon).</dt>\n<dd><pre>&gt;&gt;&gt; char1.weapon\n{'Name': 'Iron knuckles', 'Schaden': 1}\n&gt;&gt;&gt; char1.armor\n{'Name': 'Simple garb', 'Schutz': 1}\n</pre>\n</dd>\n</dl>\n<p>TODO: Change armor and weapon (and weapon skill).</p>\n<p>TODO: Get the current clothes of the char.</p>\n<p>TODO: Change the current clothes of the char.</p>\n</blockquote>\n</li>\n<li><p>Improving Chars</p>\n<blockquote>\n<dl>\n<dt>Improve a char by a 3 points at random (about the value to get for one gaming session in a hreo setting).</dt>\n<dd><pre>&gt;&gt;&gt; old_and_new_data = char1.upgrade(3)\n</pre>\n</dd>\n<dt>Upgrade with a weighted list of attributes and skills which could be improved additionally to known skills and attributes.</dt>\n<dd><pre>&gt;&gt;&gt; old_and_new_data = char1.upgrade(3, object=(\"weighted\", [(\"attribute\",  \"sensitivity\", 1), (\"skill\", \"cooking\", 2)]))\n</pre>\n</dd>\n<dt>Upgrade a specific skill or attribute.</dt>\n<dd><pre>&gt;&gt;&gt; old_and_new_data = char1.upgrade(3, object=(\"skill\", \"talking senslessly\"))\n</pre>\n</dd>\n</dl>\n<p># TODO: Add attibute explicitely.</p>\n</blockquote>\n</li>\n<li><p>Saving Chars</p>\n<blockquote>\n<p>Save the changed (wounded but improved) Char as new template.</p>\n<dl>\n<dt>Commented out, because this creates new files.</dt>\n<dd><pre>&gt;&gt;&gt; # char1.name = char1.amov.tagname\n&gt;&gt;&gt; # char1.save()\n</pre>\n</dd>\n</dl>\n<p>Save the changed Char as a new char and get the new tag to call it again.</p>\n<dl>\n<dt>Commented out, because this creates new files.</dt>\n<dd><pre>&gt;&gt;&gt; # tagstring = char1.amov.tagstring_without_name + char1.name # The tag to call the char\n&gt;&gt;&gt; # char1.save()\n&gt;&gt;&gt; # char1_again = Char(source=tagstring, template=False)\n</pre>\n</dd>\n</dl>\n</blockquote>\n</li>\n<li><p>Finishing Chars off :)</p>\n<blockquote>\n<dl>\n<dt>And in the end: Die</dt>\n<dd><pre>&gt;&gt;&gt; char1.die()\n</pre>\n</dd>\n</dl>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<dl>\n<dt>Plans:</dt>\n<dd><ul>\n<li>Change char file format: an empty dict shoulnd\u2019t be represented by \u201d \u201d anymore, but by {} (the real yaml represenation of an empty dictionary).</li>\n</ul>\n</dd>\n</dl>\n<p>Source URL (Mercurial): U{<a href=\"http://rpg-1d6.sf.net/hg/1d6\" rel=\"nofollow\">http://rpg-1d6.sf.net/hg/1d6</a>}</p>\n<p>PyPI URL: U{<a href=\"http://pypi.python.org/pypi/ews\" rel=\"nofollow\">http://pypi.python.org/pypi/ews</a>}</p>\n<ul>\n<li>renamed module to rpg-1d6: <a href=\"http://pypi.python.org/pypi/rpg-1d6\" rel=\"nofollow\">http://pypi.python.org/pypi/rpg-1d6</a></li>\n</ul>\n<p>ews 0.1</p>\n<ul>\n<li>created ews as rpg backend package.</li>\n</ul>\n\n          </div>"}, "last_serial": 799063, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4facb515c2900237d23c966db39debd5", "sha256": "76678d399dd6b22570ed5ca4c0e5c9417b0b3303b1907964cc08f2f60fb1a7a6"}, "downloads": -1, "filename": "rpg-1d6-0.1.tar.gz", "has_sig": false, "md5_digest": "4facb515c2900237d23c966db39debd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5358984, "upload_time": "2008-06-23T03:36:39", "upload_time_iso_8601": "2008-06-23T03:36:39Z", "url": "https://files.pythonhosted.org/packages/25/40/5ccc9aba3575463df6b5cee2689dc3a48dd2b96ea6d9357ed6a9c34da2ac/rpg-1d6-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4facb515c2900237d23c966db39debd5", "sha256": "76678d399dd6b22570ed5ca4c0e5c9417b0b3303b1907964cc08f2f60fb1a7a6"}, "downloads": -1, "filename": "rpg-1d6-0.1.tar.gz", "has_sig": false, "md5_digest": "4facb515c2900237d23c966db39debd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5358984, "upload_time": "2008-06-23T03:36:39", "upload_time_iso_8601": "2008-06-23T03:36:39Z", "url": "https://files.pythonhosted.org/packages/25/40/5ccc9aba3575463df6b5cee2689dc3a48dd2b96ea6d9357ed6a9c34da2ac/rpg-1d6-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:59 2020"}