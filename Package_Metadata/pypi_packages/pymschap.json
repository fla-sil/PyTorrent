{"info": {"author": "jamiesun", "author_email": "jamiesun.net@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Intended Audience :: Developers", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# pymschap\n\npython mschap \n\n\n# Example\n\n\n    def verify_radius_request(ms_chap_response,authenticator_challenge,username,userpwd,secret,authenticator):\n        import six\n        from pymschap import mschap, mppe\n        result = {}\n        if len(ms_chap_response)!=50:\n            raise Exception(\"Invalid MSCHAPV2-Response attribute length\")\n        # if isinstance(userpwd, six.text_type):\n        #     userpwd = userpwd.strip().encode('utf-8')\n        \n        nt_response = ms_chap_response[26:50]\n        peer_challenge = ms_chap_response[2:18]\n        nt_resp = mschap.generate_nt_response_mschap2(\n            authenticator_challenge,\n            peer_challenge,\n            username,\n            userpwd,\n        )\n        if nt_resp == nt_response:\n            auth_resp = mschap.generate_authenticator_response(\n                userpwd,\n                nt_response,\n                peer_challenge,\n                authenticator_challenge,\n                username\n            )\n            result['MS-CHAP2-Success'] = auth_resp\n            result['MS-MPPE-Encryption-Policy'] = '\\x00\\x00\\x00\\x01'\n            result['MS-MPPE-Encryption-Type'] = '\\x00\\x00\\x00\\x06'\n            mppeSendKey, mppeRecvKey = mppe.mppe_chap2_gen_keys(userpwd, nt_response)\n            send_key, recv_key = mppe.gen_radius_encrypt_keys(\n                mppeSendKey,\n                mppeRecvKey,\n                secret,\n                authenticator)\n            result['MS-MPPE-Send-Key'] = send_key\n            result['MS-MPPE-Recv-Key'] = recv_key\n        else:\n            result['Reply-Message'] = \"E=691 R=1 C=%s V=3 M=<password error>\" % ('\\0' * 32)\n            \n        return result\n        ", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/talkincode/pymschap", "keywords": "mschap", "license": "LGPL", "maintainer": "", "maintainer_email": "", "name": "pymschap", "package_url": "https://pypi.org/project/pymschap/", "platform": "", "project_url": "https://pypi.org/project/pymschap/", "project_urls": {"Homepage": "https://github.com/talkincode/pymschap"}, "release_url": "https://pypi.org/project/pymschap/0.1/", "requires_dist": null, "requires_python": "", "summary": "python mschap module", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # pymschap<br><br>python mschap <br><br><br># Example<br><br><br>    def verify_radius_request(ms_chap_response,authenticator_challenge,username,userpwd,secret,authenticator):<br>        import six<br>        from pymschap import mschap, mppe<br>        result = {}<br>        if len(ms_chap_response)!=50:<br>            raise Exception(\"Invalid MSCHAPV2-Response attribute length\")<br>        # if isinstance(userpwd, six.text_type):<br>        #     userpwd = userpwd.strip().encode('utf-8')<br>        <br>        nt_response = ms_chap_response[26:50]<br>        peer_challenge = ms_chap_response[2:18]<br>        nt_resp = mschap.generate_nt_response_mschap2(<br>            authenticator_challenge,<br>            peer_challenge,<br>            username,<br>            userpwd,<br>        )<br>        if nt_resp == nt_response:<br>            auth_resp = mschap.generate_authenticator_response(<br>                userpwd,<br>                nt_response,<br>                peer_challenge,<br>                authenticator_challenge,<br>                username<br>            )<br>            result['MS-CHAP2-Success'] = auth_resp<br>            result['MS-MPPE-Encryption-Policy'] = '\\x00\\x00\\x00\\x01'<br>            result['MS-MPPE-Encryption-Type'] = '\\x00\\x00\\x00\\x06'<br>            mppeSendKey, mppeRecvKey = mppe.mppe_chap2_gen_keys(userpwd, nt_response)<br>            send_key, recv_key = mppe.gen_radius_encrypt_keys(<br>                mppeSendKey,<br>                mppeRecvKey,<br>                secret,<br>                authenticator)<br>            result['MS-MPPE-Send-Key'] = send_key<br>            result['MS-MPPE-Recv-Key'] = recv_key<br>        else:<br>            result['Reply-Message'] = \"E=691 R=1 C=%s V=3 M=&lt;password error&gt;\" % ('\\0' * 32)<br>            <br>        return result<br>        \n          </div>"}, "last_serial": 3345076, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1c5e08d27cdbe5372546f500150296a9", "sha256": "63b303593814d7756f67708b222342c9fb3d6562c6507c50937032d46678276c"}, "downloads": -1, "filename": "pymschap-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "1c5e08d27cdbe5372546f500150296a9", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17689, "upload_time": "2017-11-19T04:19:29", "upload_time_iso_8601": "2017-11-19T04:19:29.074288Z", "url": "https://files.pythonhosted.org/packages/be/a3/54f53d14d1381dabdbf9ce93ede9e223edac067e59d0db6666af88dba7dd/pymschap-0.1-py2-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c5e08d27cdbe5372546f500150296a9", "sha256": "63b303593814d7756f67708b222342c9fb3d6562c6507c50937032d46678276c"}, "downloads": -1, "filename": "pymschap-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "1c5e08d27cdbe5372546f500150296a9", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17689, "upload_time": "2017-11-19T04:19:29", "upload_time_iso_8601": "2017-11-19T04:19:29.074288Z", "url": "https://files.pythonhosted.org/packages/be/a3/54f53d14d1381dabdbf9ce93ede9e223edac067e59d0db6666af88dba7dd/pymschap-0.1-py2-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:01:38 2020"}