{"info": {"author": "Maciej Wlazlo & Pawel Pomorski", "author_email": "pawel.p.pomorski@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Pretty Eikon\n\nA package for data extraction and preprocessing of Eikon's company timeseries data and news\n\n## Table of contents\n\n* [Requirements](#requirements)\n* [Time series](#time-series)\n* [News](#news)\n\n## Requirements\n* pandas\n* eikon\n* eventlet\n* json\n* bs4\n\n\n## Time series\n\nCompany time series can be imported with the TimeSeries class\n\n```\nimport dataproviders as dp\ntimeseries = dp.TimeSeries(eikon_app_key = eikon_app_key,\n                         data = data,\n                         outputdir = outputdir,\n                         dateto = dateto,\n                         datefrom = datefrom)\n```\nwhere ```data``` is the list of company codes or rics to import the data for,\noutputdir is the path to the outputdir where the data will be stored,\ndateto and datefrom are either strings of the form YYYY-MM-DD or datetime() objects\n\nYou can import all company data with\n\n```\ntimeseries.time_import()\n```\n\n## News\n\nCompany news can be imported with the NewsProvider class\n\n```\nimport dataproviders as dp\nnews = dp.NewsProvider(eikon_app_key  = eikon_app_key,\n                          data = data,\n                          outputdir = outputdir,\n                          dateto = dateto,\n                          datefrom = datefrom)\n```\n\nwhere `data`is the list of company codes to import the data for,\noutputdir is the path to the outputdir where the data will be stored,\ndateto and datefrom are either strings of the form YYYY-MM-DD or datetime() objects\n\nYou can import news for all companies in the `data` by invoking\n\n```\nnews.mine_news(do_clean)\n```\n\nwhere do_clean = True if the preprocessed text body should be outputted instead of the raw html from eikon.\n\nOr, to import one day (date) of news for a single company (ric)\n\n```\nnews.do_day(date, ric, do_clean)\n```\n\nYou can use the preprocessing method to clean a raw html with\n\n```\nnews.html_cleaner(self, pathtodir, destindir)\n```\n\nwhere pathtodir is the directory containing the raw html textfile(s) and destindir is the output directory where cleaned files are written with the same filename as in the original directory.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pwpmp/pretty-eikon", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pretty-eikon", "package_url": "https://pypi.org/project/pretty-eikon/", "platform": "", "project_url": "https://pypi.org/project/pretty-eikon/", "project_urls": {"Homepage": "https://github.com/pwpmp/pretty-eikon"}, "release_url": "https://pypi.org/project/pretty-eikon/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Package for bulk imports of news and timeseries from Refinitiv Eikon", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pretty Eikon</h1>\n<p>A package for data extraction and preprocessing of Eikon's company timeseries data and news</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#time-series\" rel=\"nofollow\">Time series</a></li>\n<li><a href=\"#news\" rel=\"nofollow\">News</a></li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>pandas</li>\n<li>eikon</li>\n<li>eventlet</li>\n<li>json</li>\n<li>bs4</li>\n</ul>\n<h2>Time series</h2>\n<p>Company time series can be imported with the TimeSeries class</p>\n<pre><code>import dataproviders as dp\ntimeseries = dp.TimeSeries(eikon_app_key = eikon_app_key,\n                         data = data,\n                         outputdir = outputdir,\n                         dateto = dateto,\n                         datefrom = datefrom)\n</code></pre>\n<p>where <code>data</code> is the list of company codes or rics to import the data for,\noutputdir is the path to the outputdir where the data will be stored,\ndateto and datefrom are either strings of the form YYYY-MM-DD or datetime() objects</p>\n<p>You can import all company data with</p>\n<pre><code>timeseries.time_import()\n</code></pre>\n<h2>News</h2>\n<p>Company news can be imported with the NewsProvider class</p>\n<pre><code>import dataproviders as dp\nnews = dp.NewsProvider(eikon_app_key  = eikon_app_key,\n                          data = data,\n                          outputdir = outputdir,\n                          dateto = dateto,\n                          datefrom = datefrom)\n</code></pre>\n<p>where <code>data</code>is the list of company codes to import the data for,\noutputdir is the path to the outputdir where the data will be stored,\ndateto and datefrom are either strings of the form YYYY-MM-DD or datetime() objects</p>\n<p>You can import news for all companies in the <code>data</code> by invoking</p>\n<pre><code>news.mine_news(do_clean)\n</code></pre>\n<p>where do_clean = True if the preprocessed text body should be outputted instead of the raw html from eikon.</p>\n<p>Or, to import one day (date) of news for a single company (ric)</p>\n<pre><code>news.do_day(date, ric, do_clean)\n</code></pre>\n<p>You can use the preprocessing method to clean a raw html with</p>\n<pre><code>news.html_cleaner(self, pathtodir, destindir)\n</code></pre>\n<p>where pathtodir is the directory containing the raw html textfile(s) and destindir is the output directory where cleaned files are written with the same filename as in the original directory.</p>\n\n          </div>"}, "last_serial": 6004506, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "30c2437b44f4b2463a87493d8a1fec44", "sha256": "511243f85bfd434ca3cb2ea31ab737bfefb45fc4ada19a931199193d2e4e240d"}, "downloads": -1, "filename": "pretty_eikon-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "30c2437b44f4b2463a87493d8a1fec44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2765, "upload_time": "2019-10-20T20:04:21", "upload_time_iso_8601": "2019-10-20T20:04:21.496828Z", "url": "https://files.pythonhosted.org/packages/dd/1b/c5cb30ee73488f6b9d9604f2d1c2af5dd1bff94b0d9567f240c81b48389e/pretty_eikon-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b0e2bcf1ad38ad21f2b7739ccb3d7c7", "sha256": "e0bc3d0870d8f30c276373b21f7088a3bb6ef085a1e5a6864c553bf145aa62ce"}, "downloads": -1, "filename": "pretty-eikon-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7b0e2bcf1ad38ad21f2b7739ccb3d7c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1906, "upload_time": "2019-10-20T20:04:24", "upload_time_iso_8601": "2019-10-20T20:04:24.466779Z", "url": "https://files.pythonhosted.org/packages/ba/03/01e53a22814b969249d90b9002935fb02f4f195506ac72deb648e8a1d5b0/pretty-eikon-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "30c2437b44f4b2463a87493d8a1fec44", "sha256": "511243f85bfd434ca3cb2ea31ab737bfefb45fc4ada19a931199193d2e4e240d"}, "downloads": -1, "filename": "pretty_eikon-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "30c2437b44f4b2463a87493d8a1fec44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2765, "upload_time": "2019-10-20T20:04:21", "upload_time_iso_8601": "2019-10-20T20:04:21.496828Z", "url": "https://files.pythonhosted.org/packages/dd/1b/c5cb30ee73488f6b9d9604f2d1c2af5dd1bff94b0d9567f240c81b48389e/pretty_eikon-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b0e2bcf1ad38ad21f2b7739ccb3d7c7", "sha256": "e0bc3d0870d8f30c276373b21f7088a3bb6ef085a1e5a6864c553bf145aa62ce"}, "downloads": -1, "filename": "pretty-eikon-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7b0e2bcf1ad38ad21f2b7739ccb3d7c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1906, "upload_time": "2019-10-20T20:04:24", "upload_time_iso_8601": "2019-10-20T20:04:24.466779Z", "url": "https://files.pythonhosted.org/packages/ba/03/01e53a22814b969249d90b9002935fb02f4f195506ac72deb648e8a1d5b0/pretty-eikon-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:37 2020"}