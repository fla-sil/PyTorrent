{"info": {"author": "Getpaid Community", "author_email": "getpaid-dev@googlegroups.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Purpose\n-------\n\nThis package provides generic payment processor registration methods. Though the code itself is free from Plone dependencies,\nthis documentation covers Plone too.\n\nPreface\n-------\n\nGetPaid provides support for two different kind of payment processors:\n\n- *Synchronous*: Your web server does the payment authorization by doing a remote procedure call to the payment processor server\n  You need to override payment processor checkout-review-pay wizard step to have your own custom form fields\n  needed for the payment submission. The default Products.PloneGetPaid.browser.checkout.CheckoutReviewAndPay\n  provides fields for simple credit card payment.\n\n- *Asynchronous*: The buyer will leave your site for the payment to the payment web server (PayPal) and come back to your site after\n  the payment is completed\n\nInstallation\n------------\n\nInstall GetPaid from trunk. \n\nUse branch following development branches. Note that PayPal changes are in trunk::\n\n\tcd src\n\trm -rf Products.PloneGetPaid\n\trm -rf getpaid.nullpayment\n\trm -rf getpaid.paypal\n\tsvn co https://getpaid.googlecode.com/svn/Products.PloneGetPaid/branches/multiplepaymentprocessors Products.PloneGetPaid\n\tsvn co https://getpaid.googlecode.com/svn/getpaid.nullpayment/branches/multiplepaymentprocessors getpaid.nullpayment\n\tsvn co https://getpaid.googlecode.com/svn/getpaid.paypal/trunk getpaid.paypal\n\t\nAdd *getpaid.paymentprocessers* to your *316.cfg* eggs and develop-eggs sections.\n\nAdministration\n--------------\n\nActive payment processors must be enabled in *Site setup* -> *GetPaid* -> *Payment processor settings*.\n\nYou can manage individual payment processor settings from the same screen.\n\nCheckout wizard steps\n---------------------\n\nA checkout wizard contains a step \"checkout-payment-method\" which allows the user to select \nthe wanted payment method. This step is only available if the site has more than \none active payment processors.\n\nCreating your own payment processor\n-----------------------------------\n\nPayment processor directive\n===========================\n\nPayment processors are registered using a ZCML directive::\n\n    <!-- Register logic class dealing with the actual payment -->\n\n  \t<adapter\n     for=\"getpaid.core.interfaces.IStore\"\n     provides=\"getpaid.core.interfaces.IPaymentProcessor\"\n     factory=\".null.NullPaymentAdapter\"\n     name=\"Testing Processor\"\n     />\n\n    <!-- Register payment processor specific user interface parts -->\n\n    <paymentprocessors:registerProcessor\n       name=\"Testing Processor\"\n\t   i18n_name=\"Test Payment\"\n       selection_view=\"null_payment_button\"\n       review_pay_view=\"null_payment_pay_page\"\n       thank_you_view=\"null_payment_thank_you_page\"\n       settings_view=\"null_payment_settings_page\"\n       />\n\n\nIt is recommended best practice to put paymentprocessor directive into a separate ZCML file in your getpaid extension module\nto maintain backwards compatibility. You can do it using zcml condition::\n\n  <include zcml:condition=\"installed getpaid.paymentprocessors\" file=\"paymentprocessors.zcml\" />\n  \nYou can also maintain backward compatiblity overrides with not-installed directive::\n\n  <include zcml:condition=\"not-installed getpaid.paymentprocessors\" package=\".browser\" file=\"overrides.zcml\" />\n\n\npaymentprocessors:registerProcessor attributes\n++++++++++++++++++++++++++++++++++++++++++++++\n\nBelow is explanation for **registerProcessor** attributes.\n\n**name**: This must match getpaid.core.interfaces.IPaymentProcessor adapter name\n\n**i18_name**: This is the user visible name of the payment processor. It might appear in the summaries and listing.\n  Term \"payment method\" is recommended here for more end user friendly language.\n\n**selection_view**: This is a <browser:page> registration name which renders the payment method selection button on payment\nmethod selection checkout wizard step. The browser view class should be subclasses from Products.GetPaid.browser.checkout.BasePaymentMethodButton.\n\nselection_view template should render a <tr> element which is rendered on the checkout payment method selection page. It contains three columns:\n\n\t- <td> having <input type=\"radio\"> button with accessibility <label>\n\n\t- <td> with payment method name/logo image\n\n\t- <td> with description. You can override this template to have clauses like \"Using PayPal will cost 2$ extra\"\n\nFor example, see getpaid.nullpayment/templates/button.pt\n\n**review_pay_view**: This view renders payment processor specific \"review and pay\" view in the checkout wizard. The attribute\nholds the registered <browser:page> name. This view should be subclass of Products.PloneGetPaid.browser.checkout.CheckoutReviewAndPay.\nTo change the review and pay page template, override template attribute of the class.\n\nUsually review and pay page has two purposes::\n\n\t- Render a <form> which is submitted to the payment authorization server with a callback back to the shop server\n\n\t- Do a HTTP redirect or Javascript redirect and take the user to the payment authorization server for an external review payment page\n\nBecause review_pay_view is based of BaseCheckoutForm class, you need to explitcly subclass it and override\n*template* class attribute to use your own template. Using <browser:page template=\"...\"> does not work.\n\n**settings_view**: This view renders the settings for the payment processor. It should\nbe subclass of Products.PloneGetPaid.admin.PaymentProcessor.\n\n**thank_you_view**: This should point to the <browser:page> which is rendered after the payment processor is complete. It is unused currently.\nPayment processor review_pay_view is itself responsible to point the user back to the shop site after the payment has been authorized.\n\nSee https://getpaid.googlecode.com/svn/getpaid.nullpayment/branches/multiplepaymentprocessors/src/getpaid/nullpayment/paymentprocessors.zcml\nfor more info.\n\nTesting\n-------\n\nUnits tests can be found in *Products.PloneGetPaid.tests.test_payment_processors*. \n\nIt is recommended to take a look these how to programmatically play around with the checkout wizard and\ntest your custom payment methods automatically.\n\nNon-plone related functionality is tested in getpaid.paymentprocessors.tests. \nThis mainly involves testing ZCML validy.\n\nGuidelines for payment processor plug-in authors\n------------------------------------------------\n\n- See getpaid.paypal how to include all related browser/ module extensions, including necessary media files\n\n- In your payment processor README include short, but detailed, instructions\n\n\t- For testing the payment processor in sandbox mode\n\n\t- For settings up the payment processor in production mode\n\n- In your payment processor README include link to payment processor logo usage terms\n\nDeveloper snippets\n-------------------\n\nPayment processors are described by Entry objects which simply hold the information provided by IRegisterPaymentProcessorDirective.\n\nTo get site wide active payment processors call::\n\n\tfrom Products.PloneGetPaid import payment\n\n\tprocessors = payment.getActivePaymentProcessors(context) # context = any Plone site object\n\nIn checkout wizard, you can get the user chosen payment method using the following snippet. You can do this *after* the user\nhas passed payment method selection step::\n\n\tpayment_processor_name = wizard.getActivePaymentProcessor()\n\nTo get the actual payment processor instance by its name call::\n\n\tfrom zope.component import getUtility, getAdapter\n\tfrom Products.CMFCore.utils import getToolByName\n\timport getpaid.core.interfaces\n\n    site_root = getToolByName(self.context, \"portal_url\").getPortalObject()\n\tprocessor = component.getAdapter(site_root, getpaid.core.interfaces.IPaymentProcessor, payment_processor_name)\n\nPayment processor registry is available in getpaid.paymentprocessors.registry.paymentProcessorRegistry. This registry\nholds the data of registered payment processor code objects.\n\nActivated payment processor names are stored in portal_properties as LinesField::\n\n\t# sequence of unicode strings, payment processor names\n\tportal_properties.payment_processor_properties.enabled_processors\n\nAccessing payment information in the stored order::\n\n\tinfo = order.payment_method # IPaymentMethodInformation instance\n\tinfo.payment_processor == u\"Your Processor Name\"\n\nTODO\n----\n\n- Rip off interfaces.IGetPaidManagementOptions(self.context).processor_name from everywhere\n\n- Remove \"Set active processor\" setting and Payment options page in site setup\n\n- Discuss whether it is sensible to use portal_properties to store settings (AFAIK this is the best\n  practice since they can be edited plain text is site setup breaks down)\n\n- Handle validation if user chooses no payment processor\n\n- Remember checked payment processor in the checkout wizard\n\n- There is a bug that wizard.data_manager.payment_method.payment_processor pulls out i18n_name for some reason.\n  Unless fixed payment processor name must be i18n_name.\n\n- How/when asyncronous processors should create Order, toggle workflow states and delete cart?\n\n\nChangelog\n=========\n\n0.1\n----------------\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.plonegetpaid.com", "keywords": "", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "getpaid.paymentprocessors", "package_url": "https://pypi.org/project/getpaid.paymentprocessors/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/getpaid.paymentprocessors/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.plonegetpaid.com"}, "release_url": "https://pypi.org/project/getpaid.paymentprocessors/0.1/", "requires_dist": null, "requires_python": null, "summary": "Support multiple payment processors on GetPaid site", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"purpose\">\n<h2>Purpose</h2>\n<p>This package provides generic payment processor registration methods. Though the code itself is free from Plone dependencies,\nthis documentation covers Plone too.</p>\n</div>\n<div id=\"preface\">\n<h2>Preface</h2>\n<p>GetPaid provides support for two different kind of payment processors:</p>\n<ul>\n<li><em>Synchronous</em>: Your web server does the payment authorization by doing a remote procedure call to the payment processor server\nYou need to override payment processor checkout-review-pay wizard step to have your own custom form fields\nneeded for the payment submission. The default Products.PloneGetPaid.browser.checkout.CheckoutReviewAndPay\nprovides fields for simple credit card payment.</li>\n<li><em>Asynchronous</em>: The buyer will leave your site for the payment to the payment web server (PayPal) and come back to your site after\nthe payment is completed</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install GetPaid from trunk.</p>\n<p>Use branch following development branches. Note that PayPal changes are in trunk:</p>\n<pre>cd src\nrm -rf Products.PloneGetPaid\nrm -rf getpaid.nullpayment\nrm -rf getpaid.paypal\nsvn co https://getpaid.googlecode.com/svn/Products.PloneGetPaid/branches/multiplepaymentprocessors Products.PloneGetPaid\nsvn co https://getpaid.googlecode.com/svn/getpaid.nullpayment/branches/multiplepaymentprocessors getpaid.nullpayment\nsvn co https://getpaid.googlecode.com/svn/getpaid.paypal/trunk getpaid.paypal\n</pre>\n<p>Add <em>getpaid.paymentprocessers</em> to your <em>316.cfg</em> eggs and develop-eggs sections.</p>\n</div>\n<div id=\"administration\">\n<h2>Administration</h2>\n<p>Active payment processors must be enabled in <em>Site setup</em> -&gt; <em>GetPaid</em> -&gt; <em>Payment processor settings</em>.</p>\n<p>You can manage individual payment processor settings from the same screen.</p>\n</div>\n<div id=\"checkout-wizard-steps\">\n<h2>Checkout wizard steps</h2>\n<p>A checkout wizard contains a step \u201ccheckout-payment-method\u201d which allows the user to select\nthe wanted payment method. This step is only available if the site has more than\none active payment processors.</p>\n</div>\n<div id=\"creating-your-own-payment-processor\">\n<h2>Creating your own payment processor</h2>\n<h2 id=\"payment-processor-directive\"><span class=\"section-subtitle\">Payment processor directive</span></h2>\n<p>Payment processors are registered using a ZCML directive:</p>\n<pre>&lt;!-- Register logic class dealing with the actual payment --&gt;\n\n    &lt;adapter\n for=\"getpaid.core.interfaces.IStore\"\n provides=\"getpaid.core.interfaces.IPaymentProcessor\"\n factory=\".null.NullPaymentAdapter\"\n name=\"Testing Processor\"\n /&gt;\n\n&lt;!-- Register payment processor specific user interface parts --&gt;\n\n&lt;paymentprocessors:registerProcessor\n   name=\"Testing Processor\"\n       i18n_name=\"Test Payment\"\n   selection_view=\"null_payment_button\"\n   review_pay_view=\"null_payment_pay_page\"\n   thank_you_view=\"null_payment_thank_you_page\"\n   settings_view=\"null_payment_settings_page\"\n   /&gt;\n</pre>\n<p>It is recommended best practice to put paymentprocessor directive into a separate ZCML file in your getpaid extension module\nto maintain backwards compatibility. You can do it using zcml condition:</p>\n<pre>&lt;include zcml:condition=\"installed getpaid.paymentprocessors\" file=\"paymentprocessors.zcml\" /&gt;\n</pre>\n<p>You can also maintain backward compatiblity overrides with not-installed directive:</p>\n<pre>&lt;include zcml:condition=\"not-installed getpaid.paymentprocessors\" package=\".browser\" file=\"overrides.zcml\" /&gt;\n</pre>\n<div id=\"paymentprocessors-registerprocessor-attributes\">\n<h3>paymentprocessors:registerProcessor attributes</h3>\n<p>Below is explanation for <strong>registerProcessor</strong> attributes.</p>\n<p><strong>name</strong>: This must match getpaid.core.interfaces.IPaymentProcessor adapter name</p>\n<dl>\n<dt><strong>i18_name</strong>: This is the user visible name of the payment processor. It might appear in the summaries and listing.</dt>\n<dd>Term \u201cpayment method\u201d is recommended here for more end user friendly language.</dd>\n</dl>\n<p><strong>selection_view</strong>: This is a &lt;browser:page&gt; registration name which renders the payment method selection button on payment\nmethod selection checkout wizard step. The browser view class should be subclasses from Products.GetPaid.browser.checkout.BasePaymentMethodButton.</p>\n<p>selection_view template should render a &lt;tr&gt; element which is rendered on the checkout payment method selection page. It contains three columns:</p>\n<blockquote>\n<ul>\n<li>&lt;td&gt; having &lt;input type=\u201dradio\u201d&gt; button with accessibility &lt;label&gt;</li>\n<li>&lt;td&gt; with payment method name/logo image</li>\n<li>&lt;td&gt; with description. You can override this template to have clauses like \u201cUsing PayPal will cost 2$ extra\u201d</li>\n</ul>\n</blockquote>\n<p>For example, see getpaid.nullpayment/templates/button.pt</p>\n<p><strong>review_pay_view</strong>: This view renders payment processor specific \u201creview and pay\u201d view in the checkout wizard. The attribute\nholds the registered &lt;browser:page&gt; name. This view should be subclass of Products.PloneGetPaid.browser.checkout.CheckoutReviewAndPay.\nTo change the review and pay page template, override template attribute of the class.</p>\n<p>Usually review and pay page has two purposes:</p>\n<pre>- Render a &lt;form&gt; which is submitted to the payment authorization server with a callback back to the shop server\n\n- Do a HTTP redirect or Javascript redirect and take the user to the payment authorization server for an external review payment page\n</pre>\n<p>Because review_pay_view is based of BaseCheckoutForm class, you need to explitcly subclass it and override\n<em>template</em> class attribute to use your own template. Using &lt;browser:page template=\u201d\u2026\u201d&gt; does not work.</p>\n<p><strong>settings_view</strong>: This view renders the settings for the payment processor. It should\nbe subclass of Products.PloneGetPaid.admin.PaymentProcessor.</p>\n<p><strong>thank_you_view</strong>: This should point to the &lt;browser:page&gt; which is rendered after the payment processor is complete. It is unused currently.\nPayment processor review_pay_view is itself responsible to point the user back to the shop site after the payment has been authorized.</p>\n<p>See <a href=\"https://getpaid.googlecode.com/svn/getpaid.nullpayment/branches/multiplepaymentprocessors/src/getpaid/nullpayment/paymentprocessors.zcml\" rel=\"nofollow\">https://getpaid.googlecode.com/svn/getpaid.nullpayment/branches/multiplepaymentprocessors/src/getpaid/nullpayment/paymentprocessors.zcml</a>\nfor more info.</p>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Units tests can be found in <em>Products.PloneGetPaid.tests.test_payment_processors</em>.</p>\n<p>It is recommended to take a look these how to programmatically play around with the checkout wizard and\ntest your custom payment methods automatically.</p>\n<p>Non-plone related functionality is tested in getpaid.paymentprocessors.tests.\nThis mainly involves testing ZCML validy.</p>\n</div>\n<div id=\"guidelines-for-payment-processor-plug-in-authors\">\n<h2>Guidelines for payment processor plug-in authors</h2>\n<ul>\n<li><p>See getpaid.paypal how to include all related browser/ module extensions, including necessary media files</p>\n</li>\n<li><p>In your payment processor README include short, but detailed, instructions</p>\n<blockquote>\n<ul>\n<li>For testing the payment processor in sandbox mode</li>\n<li>For settings up the payment processor in production mode</li>\n</ul>\n</blockquote>\n</li>\n<li><p>In your payment processor README include link to payment processor logo usage terms</p>\n</li>\n</ul>\n</div>\n<div id=\"developer-snippets\">\n<h2>Developer snippets</h2>\n<p>Payment processors are described by Entry objects which simply hold the information provided by IRegisterPaymentProcessorDirective.</p>\n<p>To get site wide active payment processors call:</p>\n<pre>from Products.PloneGetPaid import payment\n\nprocessors = payment.getActivePaymentProcessors(context) # context = any Plone site object\n</pre>\n<p>In checkout wizard, you can get the user chosen payment method using the following snippet. You can do this <em>after</em> the user\nhas passed payment method selection step:</p>\n<pre>payment_processor_name = wizard.getActivePaymentProcessor()\n</pre>\n<p>To get the actual payment processor instance by its name call:</p>\n<pre>    from zope.component import getUtility, getAdapter\n    from Products.CMFCore.utils import getToolByName\n    import getpaid.core.interfaces\n\nsite_root = getToolByName(self.context, \"portal_url\").getPortalObject()\n    processor = component.getAdapter(site_root, getpaid.core.interfaces.IPaymentProcessor, payment_processor_name)\n</pre>\n<p>Payment processor registry is available in getpaid.paymentprocessors.registry.paymentProcessorRegistry. This registry\nholds the data of registered payment processor code objects.</p>\n<p>Activated payment processor names are stored in portal_properties as LinesField:</p>\n<pre># sequence of unicode strings, payment processor names\nportal_properties.payment_processor_properties.enabled_processors\n</pre>\n<p>Accessing payment information in the stored order:</p>\n<pre>info = order.payment_method # IPaymentMethodInformation instance\ninfo.payment_processor == u\"Your Processor Name\"\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Rip off interfaces.IGetPaidManagementOptions(self.context).processor_name from everywhere</li>\n<li>Remove \u201cSet active processor\u201d setting and Payment options page in site setup</li>\n<li>Discuss whether it is sensible to use portal_properties to store settings (AFAIK this is the best\npractice since they can be edited plain text is site setup breaks down)</li>\n<li>Handle validation if user chooses no payment processor</li>\n<li>Remember checked payment processor in the checkout wizard</li>\n<li>There is a bug that wizard.data_manager.payment_method.payment_processor pulls out i18n_name for some reason.\nUnless fixed payment processor name must be i18n_name.</li>\n<li>How/when asyncronous processors should create Order, toggle workflow states and delete cart?</li>\n</ul>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>0.1</h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 792368, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a9712efdd87100152cd2e399dc7ed1df", "sha256": "c33786bc74b7193e4953d7f887d2a12f7dbe4583b7fd9a21bbf370a89529352c"}, "downloads": -1, "filename": "getpaid.paymentprocessors-0.1.tar.gz", "has_sig": false, "md5_digest": "a9712efdd87100152cd2e399dc7ed1df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11286, "upload_time": "2009-06-29T15:22:44", "upload_time_iso_8601": "2009-06-29T15:22:44.674638Z", "url": "https://files.pythonhosted.org/packages/d7/98/b656da69bf1cf4b79955da23f7cfc1baf16b478fa81bf29744fda0925052/getpaid.paymentprocessors-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a9712efdd87100152cd2e399dc7ed1df", "sha256": "c33786bc74b7193e4953d7f887d2a12f7dbe4583b7fd9a21bbf370a89529352c"}, "downloads": -1, "filename": "getpaid.paymentprocessors-0.1.tar.gz", "has_sig": false, "md5_digest": "a9712efdd87100152cd2e399dc7ed1df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11286, "upload_time": "2009-06-29T15:22:44", "upload_time_iso_8601": "2009-06-29T15:22:44.674638Z", "url": "https://files.pythonhosted.org/packages/d7/98/b656da69bf1cf4b79955da23f7cfc1baf16b478fa81bf29744fda0925052/getpaid.paymentprocessors-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:44 2020"}