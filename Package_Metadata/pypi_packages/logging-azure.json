{"info": {"author": "Joshua Logan", "author_email": "joshua@matcha.wine", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Python Logging Azure Workspace OMS Extension\n\n[![Python](https://img.shields.io/pypi/pyversions/logging-azure.svg)](https://pypi.python.org/pypi/logging-azure)\n[![Version](http://img.shields.io/pypi/v/logging-azure.svg)](https://pypi.python.org/pypi/logging-azure)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nThis package provides an asynchronous solution for uploading application logs to an Azure Log Workspace using their\nprovided REST API, all supplied as a handler and service extension for python builtin `logging` module.\n\nThe service works by instantiating an always-alive (non-daemonized) thread connected to a log request pool in which\nlogs will be queued, then periodically running through the pool in order to send the requests asynchronously in bulk\nusing the `grequests` package. This is all to intend logging safely without interrupting or slowing down the main\nprocess execution as transparently as possible.\n\n## Installation\n\nFor installing via the distributed package via PyPi:\n\n`$ pip install logging-azure`\n\nOr if you which to install from the source, you can checkout the git repository and install using `setuptools`:\n\n`$ python setup.py install`\n\n### Special conditions\n\n#### Installing GEvent\n\nIf you require using this package within a docker distributed application image for example, you will\nbe required to have an available compiler and necessary libraries in order to build `cython` and `gevent` needed for\n`grequests` to run.\n\nIf using an Alpine image for example, this can be accomplished with the following:\n\n```dockerfile\nFROM python:3.7.4-alpine3.9\n\n# Install required dependencies for building like git etc.\nRUN apk add --virtual .build-dep build-base [...]\n\n# Install the python package\nRUN pip install --no-cache-dir logging-azure\n\n# Cleanup no-longer required dependencies for a lighter image\nRUN apk del .build-dep\n```\n\n#### GEvent monkey patching ssl\n\nAs this package leverages the `grequests` package, which itself uses `gevent`, in several cases,\nlike running in a debug Flask server, you may need to monkey patch `gevent` for things to work correctly.\n\nFor this you just need to run the following **as early as possible** within your application:\n\n```python\nfrom gevent import monkey\n\nmonkey.patch_all()\n```\n\nUsually, you are warned by `gevent` itself when running your application if this is needed or not done early enough,\nso it shouldn't be hard to miss.\n\n## Usage\n\n### Package Configuration\n\nThe following environment variables are read to configure the extension and are required:\n\n- `AZURE_LOG_CUSTOMER_ID`: Customer ID for the Azure Log Workspace\n- `AZURE_LOG_SHARED_KEY`: Customer shared key for the Azure Log Workspace\n- `AZURE_LOG_DEFAULT_NAME`: The default \"log type\" name to indicate where the logs are stored.\nThis will be suffixed with \"_CL\" within the Azure Log Workspace.\n\nThe following environment variables are read to tweak some parameters of the extension,\nthey all have default values and therefore are optional:\n\n- `AZURE_LOG_MAX_CONCURRENT_REQUESTS`: *Default: 10* The maximum number of asyncronous requests to handle at once.\nUsed by `grequests`\n- `AZURE_LOG_SEND_FREQUENCY`: *Default: 5* How many seconds the service thread should wait before sending pooled logs.\n\n### Logging Configuration\n\nAs you would any other handler, you only require to define a handler using the\n`logging_azure.handler.AzureLogServiceHandler` class:\n\n```python\n[...]\n    \"handlers\": {\n        \"console\": {\"level\": logging.DEBUG, \"class\": \"logging.StreamHandler\", \"formatter\": \"colorize\"},\n        \"azure_log_oms\": {\n            \"level\": logging.INFO, \"class\": \"logging_azure.handler.AzureLogServiceHandler\", \"formatter\": \"azure\"\n        },\n        \"default\": {\"level\": logging.INFO, \"class\": \"logging.StreamHandler\", \"formatter\": \"default\"},\n    },\n[...]\n```\n\nThen add the handler to your selected logger instance:\n\n```python\n[...]\n    \"loggers\": {\n        LOGGER_NAME: {\n            \"handlers\": [\"console\"] if IS_LOCAL_DEV_INSTANCE else [\"default\", \"azure_log_oms\"],\n            \"level\": LOG_LEVEL,\n            \"propagate\": True,\n        }\n    },\n[...]\n```\n\n## Recommendations\n\n### Set an appropriate log level minimum\n\nIn order to prevent additional cost from Azure Log OMS ingestion for talkative applications, it is recommended to set\nan adequate LOG_LEVEL for your application (avoid `logging.DEBUG` for example).\n\nIt is also recommended to configure your loggers appropriately so the `AzureLogServiveHandler` isn't used during\nlocal development or CI environments for example.\n\nYou are warned.\n\n### Set a clear formatter for messages\n\nThis package supplies a decent amount of information already to complement the message in a clean way by reading the\nlog record in order to facilitate Azure Log OMS Queries and ingestion, so you may only require using a specific\nformatter that will only format the `message` itself as follows:\n\n```python\n[...]\n    \"formatters\": {\n        \"default\": {\n            \"format\": '[%(asctime)s] %(levelname)s %(name)s %(module)s \"%(message)s\"',\n            \"datefmt\": \"%d/%b/%Y %H:%M:%S\",\n        },\n        \"azure\": {\n            \"format\": '%(message)s',\n        },\n[...]\n```\n\nThis provides the following output within the Azure Portal for example:\n\n![AzureLogOMSExample](resources/log_azure_example.jpg)\n\nThis allows for easily creating custom queries and alerts for your application directly from the Azure Log OMS\nsolution.\n\n## Useful links\n\n- [Create a Log Analytics workspace in the Azure portal](https://docs.microsoft.com/en-us/azure/azure-monitor/learn/quick-create-workspace)\n- [Create a Log Analytics workspace with Azure CLI 2.0](https://docs.microsoft.com/en-us/azure/azure-monitor/learn/quick-create-workspace-cli)\n- [Manage access to log data and workspaces in Azure Monitor](https://docs.microsoft.com/en-us/azure/azure-monitor/platform/manage-access)\n- [Azure Monitor pricing](https://azure.microsoft.com/en-us/pricing/details/monitor/)\n\n### Package requirements\n\n- [grequests](https://github.com/spyoungtech/grequests)\n- [gevent](https://github.com/gevent/gevent)\n- [cython](https://github.com/cython/cython)\n- [injector](https://github.com/alecthomas/injector)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matchawine/logging-azure", "keywords": "utils", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "logging-azure", "package_url": "https://pypi.org/project/logging-azure/", "platform": "", "project_url": "https://pypi.org/project/logging-azure/", "project_urls": {"Homepage": "https://github.com/matchawine/logging-azure"}, "release_url": "https://pypi.org/project/logging-azure/1.0.2/", "requires_dist": ["injector (>=0.18.2)", "cython (>=0.29.14)", "grequests (>=0.4.0)"], "requires_python": ">=3.7", "summary": "A python async logging handler and service extension for Azure Log Workspace OMS.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Logging Azure Workspace OMS Extension</h1>\n<p><a href=\"https://pypi.python.org/pypi/logging-azure\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbb5f9016b50d6495af81233b358153d02a8d579/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6c6f6767696e672d617a7572652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/logging-azure\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69412b0d7019cf12797f80e87ee900396cebe4f6/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f6c6f6767696e672d617a7572652e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p>This package provides an asynchronous solution for uploading application logs to an Azure Log Workspace using their\nprovided REST API, all supplied as a handler and service extension for python builtin <code>logging</code> module.</p>\n<p>The service works by instantiating an always-alive (non-daemonized) thread connected to a log request pool in which\nlogs will be queued, then periodically running through the pool in order to send the requests asynchronously in bulk\nusing the <code>grequests</code> package. This is all to intend logging safely without interrupting or slowing down the main\nprocess execution as transparently as possible.</p>\n<h2>Installation</h2>\n<p>For installing via the distributed package via PyPi:</p>\n<p><code>$ pip install logging-azure</code></p>\n<p>Or if you which to install from the source, you can checkout the git repository and install using <code>setuptools</code>:</p>\n<p><code>$ python setup.py install</code></p>\n<h3>Special conditions</h3>\n<h4>Installing GEvent</h4>\n<p>If you require using this package within a docker distributed application image for example, you will\nbe required to have an available compiler and necessary libraries in order to build <code>cython</code> and <code>gevent</code> needed for\n<code>grequests</code> to run.</p>\n<p>If using an Alpine image for example, this can be accomplished with the following:</p>\n<pre><span class=\"k\">FROM</span> <span class=\"s\">python:3.7.4-alpine3.9</span>\n\n<span class=\"c\"># Install required dependencies for building like git etc.</span>\n<span class=\"k\">RUN</span> apk add --virtual .build-dep build-base <span class=\"o\">[</span>...<span class=\"o\">]</span>\n\n<span class=\"c\"># Install the python package</span>\n<span class=\"k\">RUN</span> pip install --no-cache-dir logging-azure\n\n<span class=\"c\"># Cleanup no-longer required dependencies for a lighter image</span>\n<span class=\"k\">RUN</span> apk del .build-dep\n</pre>\n<h4>GEvent monkey patching ssl</h4>\n<p>As this package leverages the <code>grequests</code> package, which itself uses <code>gevent</code>, in several cases,\nlike running in a debug Flask server, you may need to monkey patch <code>gevent</code> for things to work correctly.</p>\n<p>For this you just need to run the following <strong>as early as possible</strong> within your application:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gevent</span> <span class=\"kn\">import</span> <span class=\"n\">monkey</span>\n\n<span class=\"n\">monkey</span><span class=\"o\">.</span><span class=\"n\">patch_all</span><span class=\"p\">()</span>\n</pre>\n<p>Usually, you are warned by <code>gevent</code> itself when running your application if this is needed or not done early enough,\nso it shouldn't be hard to miss.</p>\n<h2>Usage</h2>\n<h3>Package Configuration</h3>\n<p>The following environment variables are read to configure the extension and are required:</p>\n<ul>\n<li><code>AZURE_LOG_CUSTOMER_ID</code>: Customer ID for the Azure Log Workspace</li>\n<li><code>AZURE_LOG_SHARED_KEY</code>: Customer shared key for the Azure Log Workspace</li>\n<li><code>AZURE_LOG_DEFAULT_NAME</code>: The default \"log type\" name to indicate where the logs are stored.\nThis will be suffixed with \"_CL\" within the Azure Log Workspace.</li>\n</ul>\n<p>The following environment variables are read to tweak some parameters of the extension,\nthey all have default values and therefore are optional:</p>\n<ul>\n<li><code>AZURE_LOG_MAX_CONCURRENT_REQUESTS</code>: <em>Default: 10</em> The maximum number of asyncronous requests to handle at once.\nUsed by <code>grequests</code></li>\n<li><code>AZURE_LOG_SEND_FREQUENCY</code>: <em>Default: 5</em> How many seconds the service thread should wait before sending pooled logs.</li>\n</ul>\n<h3>Logging Configuration</h3>\n<p>As you would any other handler, you only require to define a handler using the\n<code>logging_azure.handler.AzureLogServiceHandler</code> class:</p>\n<pre><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n    <span class=\"s2\">\"handlers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"console\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"s2\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"logging.StreamHandler\"</span><span class=\"p\">,</span> <span class=\"s2\">\"formatter\"</span><span class=\"p\">:</span> <span class=\"s2\">\"colorize\"</span><span class=\"p\">},</span>\n        <span class=\"s2\">\"azure_log_oms\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"s2\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"logging_azure.handler.AzureLogServiceHandler\"</span><span class=\"p\">,</span> <span class=\"s2\">\"formatter\"</span><span class=\"p\">:</span> <span class=\"s2\">\"azure\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"s2\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"logging.StreamHandler\"</span><span class=\"p\">,</span> <span class=\"s2\">\"formatter\"</span><span class=\"p\">:</span> <span class=\"s2\">\"default\"</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<p>Then add the handler to your selected logger instance:</p>\n<pre><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n    <span class=\"s2\">\"loggers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"n\">LOGGER_NAME</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"handlers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"console\"</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">IS_LOCAL_DEV_INSTANCE</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"s2\">\"default\"</span><span class=\"p\">,</span> <span class=\"s2\">\"azure_log_oms\"</span><span class=\"p\">],</span>\n            <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"n\">LOG_LEVEL</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"propagate\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<h2>Recommendations</h2>\n<h3>Set an appropriate log level minimum</h3>\n<p>In order to prevent additional cost from Azure Log OMS ingestion for talkative applications, it is recommended to set\nan adequate LOG_LEVEL for your application (avoid <code>logging.DEBUG</code> for example).</p>\n<p>It is also recommended to configure your loggers appropriately so the <code>AzureLogServiveHandler</code> isn't used during\nlocal development or CI environments for example.</p>\n<p>You are warned.</p>\n<h3>Set a clear formatter for messages</h3>\n<p>This package supplies a decent amount of information already to complement the message in a clean way by reading the\nlog record in order to facilitate Azure Log OMS Queries and ingestion, so you may only require using a specific\nformatter that will only format the <code>message</code> itself as follows:</p>\n<pre><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n    <span class=\"s2\">\"formatters\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"format\"</span><span class=\"p\">:</span> <span class=\"s1\">'[</span><span class=\"si\">%(asctime)s</span><span class=\"s1\">] </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> </span><span class=\"si\">%(name)s</span><span class=\"s1\"> </span><span class=\"si\">%(module)s</span><span class=\"s1\"> \"</span><span class=\"si\">%(message)s</span><span class=\"s1\">\"'</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"datefmt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">%d</span><span class=\"s2\">/%b/%Y %H:%M:%S\"</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"azure\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"format\"</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<p>This provides the following output within the Azure Portal for example:</p>\n<p><img alt=\"AzureLogOMSExample\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ec357abc0302b86f05e43dcaa12abcca5a49310/7265736f75726365732f6c6f675f617a7572655f6578616d706c652e6a7067\"></p>\n<p>This allows for easily creating custom queries and alerts for your application directly from the Azure Log OMS\nsolution.</p>\n<h2>Useful links</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/learn/quick-create-workspace\" rel=\"nofollow\">Create a Log Analytics workspace in the Azure portal</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/learn/quick-create-workspace-cli\" rel=\"nofollow\">Create a Log Analytics workspace with Azure CLI 2.0</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/platform/manage-access\" rel=\"nofollow\">Manage access to log data and workspaces in Azure Monitor</a></li>\n<li><a href=\"https://azure.microsoft.com/en-us/pricing/details/monitor/\" rel=\"nofollow\">Azure Monitor pricing</a></li>\n</ul>\n<h3>Package requirements</h3>\n<ul>\n<li><a href=\"https://github.com/spyoungtech/grequests\" rel=\"nofollow\">grequests</a></li>\n<li><a href=\"https://github.com/gevent/gevent\" rel=\"nofollow\">gevent</a></li>\n<li><a href=\"https://github.com/cython/cython\" rel=\"nofollow\">cython</a></li>\n<li><a href=\"https://github.com/alecthomas/injector\" rel=\"nofollow\">injector</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6338174, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "21f58e74061228bfa7c53b104512512f", "sha256": "3f40db74d838a86a1ff3f82aeb04063d9ad919d0dc24181f9345bdecd1128d0f"}, "downloads": -1, "filename": "logging_azure-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "21f58e74061228bfa7c53b104512512f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 20729, "upload_time": "2019-12-18T13:50:45", "upload_time_iso_8601": "2019-12-18T13:50:45.442785Z", "url": "https://files.pythonhosted.org/packages/08/cc/9a38ebc213c23b7961a962d2cac7492ed62eb3654940047d735cae23a8b1/logging_azure-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c124d0f326795aeac26e07aabb98f3e4", "sha256": "0ac13ebd276b4b80c9d872fb5a1153b4cc1cbcc3dd1412b9435c7210d6bbdef4"}, "downloads": -1, "filename": "logging-azure-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c124d0f326795aeac26e07aabb98f3e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21149, "upload_time": "2019-12-18T13:50:48", "upload_time_iso_8601": "2019-12-18T13:50:48.481365Z", "url": "https://files.pythonhosted.org/packages/15/fc/30cff3792a582fd444aca29f4a99383bf4563429d9ca87ca7eba85d1ad4c/logging-azure-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a32c9dd84e305927b1195f6d9b258c67", "sha256": "70934c3f388933d7c236df6fc48424fc44ab014cf11cfb6ab52fbc5349d4202b"}, "downloads": -1, "filename": "logging_azure-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a32c9dd84e305927b1195f6d9b258c67", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 20768, "upload_time": "2019-12-18T14:08:30", "upload_time_iso_8601": "2019-12-18T14:08:30.100818Z", "url": "https://files.pythonhosted.org/packages/fd/78/1c39830d7e3188029df379bd83165ef299a6814ac7824a661bfd67899aa2/logging_azure-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b53d50fed4a1f0de8ba94452b4030bc4", "sha256": "deae3ced82b645e2badfa50629b9104be65f811bc91e86d0ed800921e63f82ac"}, "downloads": -1, "filename": "logging-azure-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b53d50fed4a1f0de8ba94452b4030bc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21187, "upload_time": "2019-12-18T14:08:31", "upload_time_iso_8601": "2019-12-18T14:08:31.786779Z", "url": "https://files.pythonhosted.org/packages/30/2b/9983dd35f279391a192c4b0ad7982506d46898894dd946feb0f86c305960/logging-azure-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4306df62980009955e83726c8532751c", "sha256": "ab3bdca9c022d654d67cab30d39d68c17ff10feda9233550869da3dc2b6d7865"}, "downloads": -1, "filename": "logging_azure-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4306df62980009955e83726c8532751c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 20779, "upload_time": "2019-12-20T10:20:29", "upload_time_iso_8601": "2019-12-20T10:20:29.034780Z", "url": "https://files.pythonhosted.org/packages/b5/c3/db91a0071fd73ab50defd50cb091efcacd0944c541f32a3c19e7d9ba4247/logging_azure-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f716d5dffeeff23f999ddc169efb609", "sha256": "38f8bc81240819b17c625004b5c037c2702bb05c069e9cc40600e0f4389b3385"}, "downloads": -1, "filename": "logging-azure-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3f716d5dffeeff23f999ddc169efb609", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21178, "upload_time": "2019-12-20T10:20:30", "upload_time_iso_8601": "2019-12-20T10:20:30.250337Z", "url": "https://files.pythonhosted.org/packages/62/07/855456bfea4f0a166856679068887e5e1501205ec1de7956901e90149df3/logging-azure-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4306df62980009955e83726c8532751c", "sha256": "ab3bdca9c022d654d67cab30d39d68c17ff10feda9233550869da3dc2b6d7865"}, "downloads": -1, "filename": "logging_azure-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4306df62980009955e83726c8532751c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 20779, "upload_time": "2019-12-20T10:20:29", "upload_time_iso_8601": "2019-12-20T10:20:29.034780Z", "url": "https://files.pythonhosted.org/packages/b5/c3/db91a0071fd73ab50defd50cb091efcacd0944c541f32a3c19e7d9ba4247/logging_azure-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f716d5dffeeff23f999ddc169efb609", "sha256": "38f8bc81240819b17c625004b5c037c2702bb05c069e9cc40600e0f4389b3385"}, "downloads": -1, "filename": "logging-azure-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3f716d5dffeeff23f999ddc169efb609", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21178, "upload_time": "2019-12-20T10:20:30", "upload_time_iso_8601": "2019-12-20T10:20:30.250337Z", "url": "https://files.pythonhosted.org/packages/62/07/855456bfea4f0a166856679068887e5e1501205ec1de7956901e90149df3/logging-azure-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:19 2020"}