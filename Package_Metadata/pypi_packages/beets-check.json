{"info": {"author": "Thomas Scholtes", "author_email": "thomas-scholtes@gmx.de", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Environment :: Web Environment", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Sound/Audio", "Topic :: Multimedia :: Sound/Audio :: Players :: MP3"], "description": "beets-check\n===========\n[![Build Status](https://travis-ci.org/geigerzaehler/beets-check.svg?branch=master)](https://travis-ci.org/geigerzaehler/beets-check)\n[![Coverage Status](https://coveralls.io/repos/geigerzaehler/beets-check/badge.png?branch=master)](https://coveralls.io/r/geigerzaehler/beets-check?branch=master)\n\n*The [beets][] plugin for paranoid obsessive-compulsive music geeks.*\n\n*beets-check* lets you verify the integrity of your audio files. It computes\nand validates file checksums and uses third party tools to run custom\ntests on files.\n\nTo use this plugin, make sure your have at least version 1.4.3 of\nbeets installed.\n\n```\npip install --upgrade beets>=1.4.3\npip install git+git://github.com/geigerzaehler/beets-check.git@master\n```\n\nThen add `check` to the list of plugins in your beet configuration.\n(Running `beet config --edit` might be the quickest way.)\n\nIf you want to use third-party tools to test your audio files you have\nto manually install them on your system. Run `beet check --list-tools`\nto see a list of programs the plugin can use or [add your\nown](#third-party-tests).\n\n\nUsage\n-----\n\nLet\u2019s get started and add some checksums to your library.\n\n```\n$ beet check -a\nWARNING integrity error: /music/Abbey Road/01 Come Together.mp3\nAdding unknown checksums:  1032/8337 [12%]\n```\n\nThe `check` command looks for all files that don\u2019t have a checksum yet.\nIt computes the checksum for each of these files and stores it in the\ndatabase.  The command also prints a warning if one of the third-party\ntools finds an error. (More on those [later](#third-party-tests).)\n\nAfter some time (or maybe a system crash) you\u2019ll probably want to go back to\nyour library and verify that none of the files have changed. To do this run\n\n```\n$ beet check\nFAILED: /music/Sgt. Pepper/13 A Day in the Life.mp3\nVerifying checksums:  5102/8337 [53%]\n```\n\nFor later inspection you might want to keep a log.  To do that just\nredirect the error output with `beet check 2>check.log`. All `WARNING`\nand `ERROR` lines are sent to stderr, so you will still see the\nprogressbar.\n\nWhen you change your files through beets, using the `modfiy` command\nfor example, the plugin will [update the checksums\nautomatically](#automatic-update). However, if you change files\nmanually, you also need to update the checksums manually.\n```\n$ beet check -u 'album:Sgt. Pepper'\nUpdating checksums:  2/13 [15%]\n```\n\n### Third-party Tests\n\nThe plugin allows you to add custom file checks through external tools.\nThe plugin supports `flac --test`, `oggz-validate`, and `mp3val` out of\nthe box, but you can also [configure your own](#third-party-tools).\n\nCustom tests are run when on the following occasions.\n\n* Before importing a file (see below)\n* Before adding checksums with the `-a` flag\n* When running `beet check --external`\n\nThe file checks are not run when updating files. The rationale is that\nif the checksum of a file is correct, the file is assumed to be clean\nand pass all the custom tests.\n\nIf some file fails a test the line \n```\nWARNING error description: /path/to/file\n```\nis printed.\n\n\n### Usage with `import`\n\nSince it would be tedious to run `check -a` every time you import new music\ninto beets, *beets-check* will add checksum automatically. Before file\nis imported the plugin will also check the file with the provided\nthird-party tools. If the check fails beets will ask you to confirm the\nimport.\n\n```\n$ beet import 'Abbey Road'\nTagging:\n    The Beatles - Abbey Road\nURL:\n    http://musicbrainz.org/release/eca8996a-a637-3259-ba07-d2573c601a1b\n(Similarity: 100.0%) (Vinyl, 1969, DE, Apple Records)\nWarning: failed to verify integrity\n  Abbey Road/01 Come Together.mp3: MPEG stream error\nDo you want to skip this album? (Y/n)\n```\n\nAfter a track has been added to the database and all modifications to the tags\nhave been written, beets-check adds the checksums. This is virtually the same as\nrunning ``beets check -a `` after the import.\n\nIf you run `import` with the `--quiet` flag the importer will skip\nfiles that do not pass third-party tests automatically and log an\nerror.\n\n\n### Automatic Update\n\nThe [`write`][write] and [`modify`][modify] commands as well as some plugins will\nchange a file\u2019s content and thus invalidate its checksum. To relieve you from\nupdating the checksum manually, *beets-check* will recalculate the checksums of\nall the files that were changed.\n\n```\n$ beet check -e 'title:A Day in the Life'\nded5...363f */music/life.mp3\n\n$ beet modify 'artist=The Beatles' title:A Day in the Life'\n\n$ beet check -e 'title:A Day in the Life'\nd942...5a82 */music/life.mp3\n```\n\nThis is basically equivalent to running `beets check -u QUERY` after a modifying\ncommand.\n\nTo make sure that a file hasn\u2019t changed before beets changes it, the\nplugin will verify the checksum before the file is written.  If the\ncheck fails, beets will not write the file and issue a warning.\n\n\n```\n$ beet modify 'artist=The Beatles' 'title:A Day in the Life'\ncould not write /music/life.mp3: checksum did not match value in library\n```\n\n\n### Usage with `convert`\n\nThe [`convert`][convert] plugin can replace an audio file with a\ntranscoded version using the `--keep-new` flag. This will invalidate you\nchecksum, but *beets-check* knows about this and will update the\nchecksum automatically. You can disable this behaviour in the plugin\nconfiguration. Note that, at the moment we do not verify the checksum\nprior to the conversion, so a corrupted file might go undetected. This\nfeature is also only available with the master branch of beets\n\n\n[beets]: http://beets.readthedocs.org/en/latest\n[write]: http://beets.readthedocs.org/en/latest/reference/cli.html#write\n[modify]: http://beets.readthedocs.org/en/latest/reference/cli.html#modify\n[convert]: http://beets.readthedocs.org/en/latest/plugins/convert.html\n\n\n\nCLI Reference\n-------------\n\n```\nbeet check [--quiet]\n                 [ --external\n                 | --add\n                 | --update [--force]\n                 | --export\n                 | --fix [--force]\n                 ] [QUERY...]\nbeet check --list-tools\n```\n\nThe plugin has subcommands for checking files, running integrity checks,\nadding, updating and exporting checksums and listing third-party tools. All but\nthe last accepty a `QUERY` paramter that will restrict the operation to files\nmatching the query.  Remember, if a query contains a slash beets will\n[interpret it as a path][path query] and match all files that are contained in\na subdirectory of that path.\n\nThe default `check` command, as well as the `--add`, `--update`, and\n`--external` commands provide structured output to `stderr` to be easily parseable\nby other tools. If a file\u2019s checksum cannot be verified the line\n`FAILED: /path/to/file` is printed to stdout. If an external test\nfails, the line `WARNING error description: /path/to/file` is printed.\n\nIn addition, the commands print a progress indicator to `stdout` if\n`stdout` is connected to a terminal. This can be disabled with the\n**`-q, --quiet`** flag.\n\n- **`beet check [-q] [QUERY...]`** The default command verifies all\n  file checksums against the database. The output is described above.\n  Exits with status code `15` if at least one file does not pass a\n  test.\n\n- **`-e, --external`** Run third-party tools for the given file. The\n  output is described above. Exits with status code `15` if at least\n  one file does not pass a test.\n\n- **`-a, --add`** Look for files in the database that don\u2019t have a\n  checksum, compute it from the file and add it to the database. This will also\n  print warnings for failed integrity checks.\n\n- **`-u, --update`** Calculate checksums for all files matching the\n  query and write the them to the database. If no query is given this will\n  overwrite all checksums already in the database. Since that is almost\n  certainly not what you want, beets will ask you for confirmation in that\n  case unless the `--force` flag is set.\n\n- **`--export`** Outputs a list of filenames with corresponding\n  checksums in the format used by the `sha256sum` command. You can then use\n  that command to check your files externally. For example\n  `beet check -e | sha256sum -c`.\n\n- **`-x, --fix [--force | -f]`** Since `v0.9.2`. Fix files with\n  third-party tools. Since this changes files it will ask for you to\n  confirm the fixes. This can be disabled with the `--force` flag.\n\n- **`-l, --list-tools`** Outputs a list of third party programs that\n  *beets-check* uses to verify file integrity and shows whether they are\n  installed. The plugin comes with support for the\n  [`oggz-validate`][oggz-validate], [`mp3val`][mp3val] and [`flac`][flac] commands.\n\n\n[path query]: http://beets.readthedocs.org/en/latest/reference/query.html#path-queries\n[flac]: https://xiph.org/flac/documentation_tools_flac.html\n[mp3val]: http://mp3val.sourceforge.net/\n[oggz-validate]: https://www.xiph.org/oggz/\n\n\n\nConfiguration\n-------------\n\nBy default *beets-check* uses the following configuration.\n\n```yaml\ncheck:\n  import: yes\n  write-check: yes\n  write-update: yes\n  convert-update: yes\n  threads: num_of_cpus\n```\n\nThese option control at which point *beets-check* will be used automatically by\nother beets commands. You can disable each option by setting its value to `no`.\n\n* `import: no` Don\u2019t add checksums for new files during the import process.\n  This also disables integrity checks on import and will not ask you to skip\n  the import of corrupted files.\n* `write-check: no` Don\u2019t verify checksums before writing files with\n  `beet write` or `beet modify`.\n* `write-update: no` Don\u2019t update checksums after writing files with\n  `beet write` or `beet modify`.\n* `convert-update: no` Don\u2019t updated the checksum if a file has been\n  converted with the `--keep-new` flag.\n* `threads: 4` Use four threads to compute checksums.\n\n### Third-party Tools\n\n*beets-check* allows you to configure custom tests for your files.\n\nCustom tests are shell commands that are run on an audio file and\nmay produce an error.\n\n```yaml\ncheck:\n  tools:\n    mp3val:\n      cmd: 'mp3val {}'\n      formats: MP3\n      error: '^WARNING: .* \\(offset 0x[0-9a-f]+\\): (.*)$'\n      fix: 'mp3val -f -nb {}'\n```\n\nEach tool is a dictionary entry under `check.tools`, where the key is\nthe tools name and the value is a configuration dictionary with the\nfollowing keys.\n\n- **`cmd`** The shell command that tests the file. The string is\n  formatted with python\u2019s [`str.format()`][python-format] to replace\n  '{}' with the quoted path of the file to check.\n\n- **`formats`** A space separated list of audio formats the tool can\n  check. Valid formats include 'MP'\n\n- **`error`** Python regular expression to match against the tools\n  output. If a match is found, an error is assumed to have occured\n  and the error description is the first match group.\n\n- **`fix`** Shell command to run when fixing files. The command is\n  formtted similar to `cmd`.\n\nA test run with a given tool is assumed to have failed in one of the\nfollowing two cases.\n\n- The combined output of `stdout` and `stderr` matches the `error`\n  Regular Expression.\n\n- The shell command exits with a non-zero status code.\n\n\n[python-format]:https://docs.python.org/2/library/string.html#format-string-syntax\n\n\nLicense\n-------\n\nCopyright (c) 2014 Thomas Scholtes\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/geigerzaehler/beets-check", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "beets-check", "package_url": "https://pypi.org/project/beets-check/", "platform": "ALL", "project_url": "https://pypi.org/project/beets-check/", "project_urls": {"Homepage": "http://www.github.com/geigerzaehler/beets-check"}, "release_url": "https://pypi.org/project/beets-check/0.12.1/", "requires_dist": null, "requires_python": "", "summary": "beets plugin verifying file integrity with checksums", "version": "0.12.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>beets-check</h1>\n<p><a href=\"https://travis-ci.org/geigerzaehler/beets-check\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c62d6467a6f83d15c333831f74af47be9404555/68747470733a2f2f7472617669732d63692e6f72672f6765696765727a6165686c65722f62656574732d636865636b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/geigerzaehler/beets-check?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/56fb325743e90389d47e89fb66a04b298858e42b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6765696765727a6165686c65722f62656574732d636865636b2f62616467652e706e673f6272616e63683d6d6173746572\"></a></p>\n<p><em>The <a href=\"http://beets.readthedocs.org/en/latest\" rel=\"nofollow\">beets</a> plugin for paranoid obsessive-compulsive music geeks.</em></p>\n<p><em>beets-check</em> lets you verify the integrity of your audio files. It computes\nand validates file checksums and uses third party tools to run custom\ntests on files.</p>\n<p>To use this plugin, make sure your have at least version 1.4.3 of\nbeets installed.</p>\n<pre><code>pip install --upgrade beets&gt;=1.4.3\npip install git+git://github.com/geigerzaehler/beets-check.git@master\n</code></pre>\n<p>Then add <code>check</code> to the list of plugins in your beet configuration.\n(Running <code>beet config --edit</code> might be the quickest way.)</p>\n<p>If you want to use third-party tools to test your audio files you have\nto manually install them on your system. Run <code>beet check --list-tools</code>\nto see a list of programs the plugin can use or <a href=\"#third-party-tests\" rel=\"nofollow\">add your\nown</a>.</p>\n<h2>Usage</h2>\n<p>Let\u2019s get started and add some checksums to your library.</p>\n<pre><code>$ beet check -a\nWARNING integrity error: /music/Abbey Road/01 Come Together.mp3\nAdding unknown checksums:  1032/8337 [12%]\n</code></pre>\n<p>The <code>check</code> command looks for all files that don\u2019t have a checksum yet.\nIt computes the checksum for each of these files and stores it in the\ndatabase.  The command also prints a warning if one of the third-party\ntools finds an error. (More on those <a href=\"#third-party-tests\" rel=\"nofollow\">later</a>.)</p>\n<p>After some time (or maybe a system crash) you\u2019ll probably want to go back to\nyour library and verify that none of the files have changed. To do this run</p>\n<pre><code>$ beet check\nFAILED: /music/Sgt. Pepper/13 A Day in the Life.mp3\nVerifying checksums:  5102/8337 [53%]\n</code></pre>\n<p>For later inspection you might want to keep a log.  To do that just\nredirect the error output with <code>beet check 2&gt;check.log</code>. All <code>WARNING</code>\nand <code>ERROR</code> lines are sent to stderr, so you will still see the\nprogressbar.</p>\n<p>When you change your files through beets, using the <code>modfiy</code> command\nfor example, the plugin will <a href=\"#automatic-update\" rel=\"nofollow\">update the checksums\nautomatically</a>. However, if you change files\nmanually, you also need to update the checksums manually.</p>\n<pre><code>$ beet check -u 'album:Sgt. Pepper'\nUpdating checksums:  2/13 [15%]\n</code></pre>\n<h3>Third-party Tests</h3>\n<p>The plugin allows you to add custom file checks through external tools.\nThe plugin supports <code>flac --test</code>, <code>oggz-validate</code>, and <code>mp3val</code> out of\nthe box, but you can also <a href=\"#third-party-tools\" rel=\"nofollow\">configure your own</a>.</p>\n<p>Custom tests are run when on the following occasions.</p>\n<ul>\n<li>Before importing a file (see below)</li>\n<li>Before adding checksums with the <code>-a</code> flag</li>\n<li>When running <code>beet check --external</code></li>\n</ul>\n<p>The file checks are not run when updating files. The rationale is that\nif the checksum of a file is correct, the file is assumed to be clean\nand pass all the custom tests.</p>\n<p>If some file fails a test the line</p>\n<pre><code>WARNING error description: /path/to/file\n</code></pre>\n<p>is printed.</p>\n<h3>Usage with <code>import</code></h3>\n<p>Since it would be tedious to run <code>check -a</code> every time you import new music\ninto beets, <em>beets-check</em> will add checksum automatically. Before file\nis imported the plugin will also check the file with the provided\nthird-party tools. If the check fails beets will ask you to confirm the\nimport.</p>\n<pre><code>$ beet import 'Abbey Road'\nTagging:\n    The Beatles - Abbey Road\nURL:\n    http://musicbrainz.org/release/eca8996a-a637-3259-ba07-d2573c601a1b\n(Similarity: 100.0%) (Vinyl, 1969, DE, Apple Records)\nWarning: failed to verify integrity\n  Abbey Road/01 Come Together.mp3: MPEG stream error\nDo you want to skip this album? (Y/n)\n</code></pre>\n<p>After a track has been added to the database and all modifications to the tags\nhave been written, beets-check adds the checksums. This is virtually the same as\nrunning <code>beets check -a</code> after the import.</p>\n<p>If you run <code>import</code> with the <code>--quiet</code> flag the importer will skip\nfiles that do not pass third-party tests automatically and log an\nerror.</p>\n<h3>Automatic Update</h3>\n<p>The <a href=\"http://beets.readthedocs.org/en/latest/reference/cli.html#write\" rel=\"nofollow\"><code>write</code></a> and <a href=\"http://beets.readthedocs.org/en/latest/reference/cli.html#modify\" rel=\"nofollow\"><code>modify</code></a> commands as well as some plugins will\nchange a file\u2019s content and thus invalidate its checksum. To relieve you from\nupdating the checksum manually, <em>beets-check</em> will recalculate the checksums of\nall the files that were changed.</p>\n<pre><code>$ beet check -e 'title:A Day in the Life'\nded5...363f */music/life.mp3\n\n$ beet modify 'artist=The Beatles' title:A Day in the Life'\n\n$ beet check -e 'title:A Day in the Life'\nd942...5a82 */music/life.mp3\n</code></pre>\n<p>This is basically equivalent to running <code>beets check -u QUERY</code> after a modifying\ncommand.</p>\n<p>To make sure that a file hasn\u2019t changed before beets changes it, the\nplugin will verify the checksum before the file is written.  If the\ncheck fails, beets will not write the file and issue a warning.</p>\n<pre><code>$ beet modify 'artist=The Beatles' 'title:A Day in the Life'\ncould not write /music/life.mp3: checksum did not match value in library\n</code></pre>\n<h3>Usage with <code>convert</code></h3>\n<p>The <a href=\"http://beets.readthedocs.org/en/latest/plugins/convert.html\" rel=\"nofollow\"><code>convert</code></a> plugin can replace an audio file with a\ntranscoded version using the <code>--keep-new</code> flag. This will invalidate you\nchecksum, but <em>beets-check</em> knows about this and will update the\nchecksum automatically. You can disable this behaviour in the plugin\nconfiguration. Note that, at the moment we do not verify the checksum\nprior to the conversion, so a corrupted file might go undetected. This\nfeature is also only available with the master branch of beets</p>\n<h2>CLI Reference</h2>\n<pre><code>beet check [--quiet]\n                 [ --external\n                 | --add\n                 | --update [--force]\n                 | --export\n                 | --fix [--force]\n                 ] [QUERY...]\nbeet check --list-tools\n</code></pre>\n<p>The plugin has subcommands for checking files, running integrity checks,\nadding, updating and exporting checksums and listing third-party tools. All but\nthe last accepty a <code>QUERY</code> paramter that will restrict the operation to files\nmatching the query.  Remember, if a query contains a slash beets will\n<a href=\"http://beets.readthedocs.org/en/latest/reference/query.html#path-queries\" rel=\"nofollow\">interpret it as a path</a> and match all files that are contained in\na subdirectory of that path.</p>\n<p>The default <code>check</code> command, as well as the <code>--add</code>, <code>--update</code>, and\n<code>--external</code> commands provide structured output to <code>stderr</code> to be easily parseable\nby other tools. If a file\u2019s checksum cannot be verified the line\n<code>FAILED: /path/to/file</code> is printed to stdout. If an external test\nfails, the line <code>WARNING error description: /path/to/file</code> is printed.</p>\n<p>In addition, the commands print a progress indicator to <code>stdout</code> if\n<code>stdout</code> is connected to a terminal. This can be disabled with the\n<strong><code>-q, --quiet</code></strong> flag.</p>\n<ul>\n<li>\n<p><strong><code>beet check [-q] [QUERY...]</code></strong> The default command verifies all\nfile checksums against the database. The output is described above.\nExits with status code <code>15</code> if at least one file does not pass a\ntest.</p>\n</li>\n<li>\n<p><strong><code>-e, --external</code></strong> Run third-party tools for the given file. The\noutput is described above. Exits with status code <code>15</code> if at least\none file does not pass a test.</p>\n</li>\n<li>\n<p><strong><code>-a, --add</code></strong> Look for files in the database that don\u2019t have a\nchecksum, compute it from the file and add it to the database. This will also\nprint warnings for failed integrity checks.</p>\n</li>\n<li>\n<p><strong><code>-u, --update</code></strong> Calculate checksums for all files matching the\nquery and write the them to the database. If no query is given this will\noverwrite all checksums already in the database. Since that is almost\ncertainly not what you want, beets will ask you for confirmation in that\ncase unless the <code>--force</code> flag is set.</p>\n</li>\n<li>\n<p><strong><code>--export</code></strong> Outputs a list of filenames with corresponding\nchecksums in the format used by the <code>sha256sum</code> command. You can then use\nthat command to check your files externally. For example\n<code>beet check -e | sha256sum -c</code>.</p>\n</li>\n<li>\n<p><strong><code>-x, --fix [--force | -f]</code></strong> Since <code>v0.9.2</code>. Fix files with\nthird-party tools. Since this changes files it will ask for you to\nconfirm the fixes. This can be disabled with the <code>--force</code> flag.</p>\n</li>\n<li>\n<p><strong><code>-l, --list-tools</code></strong> Outputs a list of third party programs that\n<em>beets-check</em> uses to verify file integrity and shows whether they are\ninstalled. The plugin comes with support for the\n<a href=\"https://www.xiph.org/oggz/\" rel=\"nofollow\"><code>oggz-validate</code></a>, <a href=\"http://mp3val.sourceforge.net/\" rel=\"nofollow\"><code>mp3val</code></a> and <a href=\"https://xiph.org/flac/documentation_tools_flac.html\" rel=\"nofollow\"><code>flac</code></a> commands.</p>\n</li>\n</ul>\n<h2>Configuration</h2>\n<p>By default <em>beets-check</em> uses the following configuration.</p>\n<pre><span class=\"nt\">check</span><span class=\"p\">:</span>\n  <span class=\"nt\">import</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">yes</span>\n  <span class=\"nt\">write-check</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">yes</span>\n  <span class=\"nt\">write-update</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">yes</span>\n  <span class=\"nt\">convert-update</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">yes</span>\n  <span class=\"nt\">threads</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">num_of_cpus</span>\n</pre>\n<p>These option control at which point <em>beets-check</em> will be used automatically by\nother beets commands. You can disable each option by setting its value to <code>no</code>.</p>\n<ul>\n<li><code>import: no</code> Don\u2019t add checksums for new files during the import process.\nThis also disables integrity checks on import and will not ask you to skip\nthe import of corrupted files.</li>\n<li><code>write-check: no</code> Don\u2019t verify checksums before writing files with\n<code>beet write</code> or <code>beet modify</code>.</li>\n<li><code>write-update: no</code> Don\u2019t update checksums after writing files with\n<code>beet write</code> or <code>beet modify</code>.</li>\n<li><code>convert-update: no</code> Don\u2019t updated the checksum if a file has been\nconverted with the <code>--keep-new</code> flag.</li>\n<li><code>threads: 4</code> Use four threads to compute checksums.</li>\n</ul>\n<h3>Third-party Tools</h3>\n<p><em>beets-check</em> allows you to configure custom tests for your files.</p>\n<p>Custom tests are shell commands that are run on an audio file and\nmay produce an error.</p>\n<pre><span class=\"nt\">check</span><span class=\"p\">:</span>\n  <span class=\"nt\">tools</span><span class=\"p\">:</span>\n    <span class=\"nt\">mp3val</span><span class=\"p\">:</span>\n      <span class=\"nt\">cmd</span><span class=\"p\">:</span> <span class=\"s\">'mp3val</span><span class=\"nv\"> </span><span class=\"s\">{}'</span>\n      <span class=\"nt\">formats</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">MP3</span>\n      <span class=\"nt\">error</span><span class=\"p\">:</span> <span class=\"s\">'^WARNING:</span><span class=\"nv\"> </span><span class=\"s\">.*</span><span class=\"nv\"> </span><span class=\"s\">\\(offset</span><span class=\"nv\"> </span><span class=\"s\">0x[0-9a-f]+\\):</span><span class=\"nv\"> </span><span class=\"s\">(.*)$'</span>\n      <span class=\"nt\">fix</span><span class=\"p\">:</span> <span class=\"s\">'mp3val</span><span class=\"nv\"> </span><span class=\"s\">-f</span><span class=\"nv\"> </span><span class=\"s\">-nb</span><span class=\"nv\"> </span><span class=\"s\">{}'</span>\n</pre>\n<p>Each tool is a dictionary entry under <code>check.tools</code>, where the key is\nthe tools name and the value is a configuration dictionary with the\nfollowing keys.</p>\n<ul>\n<li>\n<p><strong><code>cmd</code></strong> The shell command that tests the file. The string is\nformatted with python\u2019s <a href=\"https://docs.python.org/2/library/string.html#format-string-syntax\" rel=\"nofollow\"><code>str.format()</code></a> to replace\n'{}' with the quoted path of the file to check.</p>\n</li>\n<li>\n<p><strong><code>formats</code></strong> A space separated list of audio formats the tool can\ncheck. Valid formats include 'MP'</p>\n</li>\n<li>\n<p><strong><code>error</code></strong> Python regular expression to match against the tools\noutput. If a match is found, an error is assumed to have occured\nand the error description is the first match group.</p>\n</li>\n<li>\n<p><strong><code>fix</code></strong> Shell command to run when fixing files. The command is\nformtted similar to <code>cmd</code>.</p>\n</li>\n</ul>\n<p>A test run with a given tool is assumed to have failed in one of the\nfollowing two cases.</p>\n<ul>\n<li>\n<p>The combined output of <code>stdout</code> and <code>stderr</code> matches the <code>error</code>\nRegular Expression.</p>\n</li>\n<li>\n<p>The shell command exits with a non-zero status code.</p>\n</li>\n</ul>\n<h2>License</h2>\n<p>Copyright (c) 2014 Thomas Scholtes</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 7052281, "releases": {"0.12.1": [{"comment_text": "", "digests": {"md5": "c8702bc838a5d5f7eeecab360606575f", "sha256": "1ad167fc5079241f425ec73b3c23f7cf182abb679127f02fac49a811bbdf9ca8"}, "downloads": -1, "filename": "beets_check-0.12.1-py3.8.egg", "has_sig": false, "md5_digest": "c8702bc838a5d5f7eeecab360606575f", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 19098, "upload_time": "2020-04-19T09:20:45", "upload_time_iso_8601": "2020-04-19T09:20:45.727074Z", "url": "https://files.pythonhosted.org/packages/38/b0/8bf2ed2d0880af8195d43c549c531f996d0a61235bccbfa5d332a2b682bd/beets_check-0.12.1-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "028c41ef97e695b3d95f1ce952b52dbc", "sha256": "3b6b238057a8ed14d9e96fb2d03be955ab95f0f6f93135d602e2154878950595"}, "downloads": -1, "filename": "beets-check-0.12.1.tar.gz", "has_sig": false, "md5_digest": "028c41ef97e695b3d95f1ce952b52dbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13406, "upload_time": "2020-04-19T09:20:47", "upload_time_iso_8601": "2020-04-19T09:20:47.978365Z", "url": "https://files.pythonhosted.org/packages/61/a6/59e36b0281a5e0eea3ac72603386b0e66a25d325e71030eecd4d1ab5e275/beets-check-0.12.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8702bc838a5d5f7eeecab360606575f", "sha256": "1ad167fc5079241f425ec73b3c23f7cf182abb679127f02fac49a811bbdf9ca8"}, "downloads": -1, "filename": "beets_check-0.12.1-py3.8.egg", "has_sig": false, "md5_digest": "c8702bc838a5d5f7eeecab360606575f", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 19098, "upload_time": "2020-04-19T09:20:45", "upload_time_iso_8601": "2020-04-19T09:20:45.727074Z", "url": "https://files.pythonhosted.org/packages/38/b0/8bf2ed2d0880af8195d43c549c531f996d0a61235bccbfa5d332a2b682bd/beets_check-0.12.1-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "028c41ef97e695b3d95f1ce952b52dbc", "sha256": "3b6b238057a8ed14d9e96fb2d03be955ab95f0f6f93135d602e2154878950595"}, "downloads": -1, "filename": "beets-check-0.12.1.tar.gz", "has_sig": false, "md5_digest": "028c41ef97e695b3d95f1ce952b52dbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13406, "upload_time": "2020-04-19T09:20:47", "upload_time_iso_8601": "2020-04-19T09:20:47.978365Z", "url": "https://files.pythonhosted.org/packages/61/a6/59e36b0281a5e0eea3ac72603386b0e66a25d325e71030eecd4d1ab5e275/beets-check-0.12.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:52 2020"}