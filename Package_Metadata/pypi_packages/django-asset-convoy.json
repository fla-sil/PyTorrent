{"info": {"author": "Ted Tieken <ted.tieken@gmail.com>, Peter Conerly <pconerly@gmail.com>", "author_email": "ted.tieken@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "NB: This package is experimental pre-alpha software. The convoy features\nare more mature than the carpool features.\n\nRationale:\n----------\n\n``django-asset-convoy`` makes static asset best practices nearly\neffortless without changing your current workflow. Your files are\nprocessed for you when you run collectstatic, and the template tags to\naccess your processed files are easy to use.\n\nStatic asset best practices = Faster page loads = happier customers.\n\n-  fingerprint based cachebusting which enables far-future cache exipry\n   headers (cached files load instantly)\n-  minification (smaller files load faster)\n-  gzipping that works on S3 (compressed files load faster)\n-  concatenation (fewer http requests means less latency and faster page\n   loads)\n\nEverything but concatenation is done automatically during the\npost\\_process step of django's ``python manage.py collectstatic``\ncommand. This means that when Heroku runs collectstatic automatically\nfor you, your assets get post-processed automatically too!\n\nThe ``convoy`` template tag is called exactly the same way the\nstaticfiles ``static`` template tag is called.\n\nThe ``carpool`` template tag that does concatenation is extremely simple\n(see below).\n\nYou get automatic static asset management best practices for about five\nminutes of one-time configuration.\n\nNB: convoy's post processing makes the collectstatic command take about\ntwice as long to run. If you have a lot of unchanged static assets, this\ncan make pushing small changes to Heroku somewhat painful --\n``heroku config:set DISABLE_COLLECTSTATIC=1`` may come in handy if that\nis the case.\n\nSpeed:\n------\n\nWith convoy, your pages load faster. Sometimes a lot faster.\n\nIn initial tests with heroku and s3, using ``convoy`` and ``carpool``\nsped up DocumentReady times from ~1500 milliseconds average to 546\nmilliseconds average. (Google's homepage by hit DocumentReady in 341ms\naverage). Method: Middle 8 of 10 page loads measured without caching by\nchrome devtools. GTmetrix performance reports went from 91%/78% to\n99%/98%.\n\nMore tests pending.\n\nWhat:\n-----\n\ndjango-asset-convoy has a few parts:\n\n-  static asset storages that automatically process your static assets\n   when you run collectstatic (fingerprinting/cache-busting with a hash,\n   minifing, and gziping)\n-  caching s3 storages that keep a copy on the local filesystem as well\n   as saving on s3 (meaning in-request concatenation goes a lot faster)\n-  ``convoy`` template tag that resolves a resource to its processed\n   counterpartd\n-  ``carpool`` template tag that concatenates css and js files so they\n   can be served by a single http request.\n-  A GzipHttpOnlyMiddleware that sidesteps the BREACH security\n   vulnerability on secure HTTPS pages while allowing gzip performance\n   improvements on HTTP pages\n\nRequirements:\n-------------\n\n::\n\n    #django >= 1.7\n    pip install https://www.djangoproject.com/download/1.7b3/tarball/\n    pip install django-s3-folder-storage\n\n    pip install cssmin\n    pip install rjsmin #recommended\n    #or pip install jsmin\n\nOptional, but speeds up your pages even more: ``django-htmlmin``\n\nConfiguration:\n--------------\n\n::\n\n    #settings.py\n    INSTALLED_APPS = (\n        ...\n        'convoy',\n        ...\n    )\n\nOption 1: Using the filesystem:\n'''''''''''''''''''''''''''''''\n\n::\n\n    #settings.py\n    STATICFILES_STORAGE = 'convoy.stores.ConvoyStorage'  \n\n    #Set STATIC_ROOT, STATIC_URL, etc, as normal  \n\nOption 2: Using s3-folder-storage\n'''''''''''''''''''''''''''''''''\n\n::\n\n    #settings.py\n\n    #one of these\n    STATICFILES_STORAGE = 'convoy.stores.S3FolderConvoyStorage'\n    STATICFILES_STORAGE = 'convoy.stores.CachedS3FolderConvoyStorage'\n\n    #Set the following to their appropriate variables\n    AWS_STORAGE_BUCKET_NAME = 'my-bucket'\n    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']\n    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']\n    DEFAULT_FILE_STORAGE = 's3_folder_storage.s3.DefaultStorage'\n    DEFAULT_S3_PATH = \"media\"\n    STATIC_S3_PATH = \"static\"\n    MEDIA_ROOT = '/%s/' % DEFAULT_S3_PATH\n    STATIC_ROOT = \"/%s/\" % STATIC_S3_PATH\n    MEDIA_URL = 'http://%s.s3.amazonaws.com/media/' % AWS_STORAGE_BUCKET_NAME\n    STATIC_URL = 'http://%s.s3.amazonaws.com/static/' % AWS_STORAGE_BUCKET_NAME\n    ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'\n\nBackends are provided for s3 without s3-folder-storage, not recomended.\n\nSuggested configuration:\n''''''''''''''''''''''''\n\n::\n\n    #settings.py\n    CONVOY_AWS_HEADERS = {\n        #Cache processed assets for a full year \n        'Cache-Control': 'max-age=%s' % (60 * 60 * 24 * 365),\n    }\n\nConfiguring the HTTP Only Gzip Middleware:\n''''''''''''''''''''''''''''''''''''''''''\n\n::\n\n    #settings.py\n    MIDDLEWARE_CLASSES = (\n        'convoy.middleware.GzipHttpOnlyMiddleware',\n        ...\n    )\n\nUsage: automatic asset pipeline during collectstatic:\n-----------------------------------------------------\n\nWhen you run ``python manage.py collectstatic`` convoy will\nautomatically fingerprint (hash), minify the static files that can be\nminified, and gzip the css and js.\n\nThen in your template ``{% load convoytags %}`` will get you two new\ntags ``convoy`` and ``carpool`` whose usage is as follows:\n\nUsing the ``convoy`` template tag\n---------------------------------\n\nThe ``convoy`` template tag works just like the ``static`` template tag\nprovided by ``django.contrib.staticfiles``\n\n::\n\n    Usage::\n\n        {% convoy path [as varname] %}\n\n    Examples::\n\n        {% convoy \"myapp/css/base.css\" %}\n        {% convoy variable_with_path %}\n        {% convoy \"myapp/css/base.css\" as admin_base_css %}\n        {% convoy variable_with_path as varname %}   \n\nA sample use in a template would be:\n\n::\n\n    mypage.html\n    {% load convoytags %}\n    <link rel=\"stylesheet\" href=\"{% convoy \"myapp/css/base.css\" %}\">    \n\nWould render:\n\n::\n\n    <!-- If gzip isn't supported by the request, or isn't enabled -->\n    <link rel=\"stylesheet\" href=\"/STATIC_ROOT/myapp/css/base.25b23dfca187.cmin.css\" >\n\n    <!-- or, if gzip is enabled -->\n    <link rel=\"stylesheet\" href=\"/STATIC_ROOT/myapp/css/base.25b23dfca187.cmin.css.gz\" >\n\nUsing the ``carpool`` template tag\n----------------------------------\n\nThe ``carpool`` template tag is a concatenator, it works similarly to\nthe ``compress`` tag in django-compressor.\n\n::\n\n    Usage::\n\n        {% carpool [js,css] %}\n            'file/path/to/concatenate.[js,css]'\n            'file/path/to/join.[js,css]'\n        {% endcarpool %}\n\n    Examples::\n\n        {% carpool css %}\n            \"myapp/css/base.css\"\n            \"myapp/css/second.css\"\n            \"myapp/css/third.css\"\n        {% endcarpool %}\n        \n        If concatenation and pipelining is successful:\n            <!-- myapp/css/base.css+++myapp/css/second.css+++myapp/css/third.css -->\n            <link rel=\"stylesheet\" href=\"/static/CARPOOL/css/fb12a26e32dc.cmin.css' \">\n            <!-- myapp/css/base.css+++myapp/css/second.css+++myapp/css/third.css -->\n            \n        If not, falls back to:\n            <!-- myapp/css/base.css+++myapp/css/second.css+++myapp/css/third.css -->\n            <link rel=\"stylesheet\" href=\"/static/myapp/css/base.css' >\n            <link rel=\"stylesheet\" href=\"/static/myapp/css/second.css' >\n            <link rel=\"stylesheet\" href=\"/static/myapp/css/third.css' >\n            <!-- myapp/css/base.css+++myapp/css/second.css+++myapp/css/third.css -->\n        \n        {% carpool js %}\n            \"myapp/css/base.js\"\n            \"myapp/css/second.js\"\n            \"myapp/css/third.js\"\n        {% endcarpool %}\n\n        Would render something like:\n            <!-- myapp/css/base.js+++myapp/css/second.js+++myapp/css/third.js -->\n            <script type=\"text/javascript\" src=\"/static/CARPOOL/js/1fc48d23e7b6.cmin.js' >\n            <!-- myapp/css/base.js+++myapp/css/second.js+++myapp/css/third.js -->\n\nOptional configuration:\n-----------------------\n\nSettings you might want to change and their defaults:\n'''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n``CONVOY_USE_EXISTING_MIN_FILES = True`` Attempts to get the distributed\nmin that matches a given filename e.g. if you have bootstrap.css, convoy\nwould look for bootstrap.min.css if bootstrap.min.css is found, convoy\nwill use bootstrap's minified version instead of minifiying the files\nitself\n\n``CONVOY_GZIP_IN_TEMPLATE = True`` When True: checks if the request says\nit accepts gzip, and if so links to the gzip file from the template,\nthis is useful for serving gziped files from AWS When False: returns the\nprocessed but not gziped version of the file\n\n``CONVOY_AWS_HEADERS = {}`` AWS headers for processed assets because\nconvoyed assets go through a fingerprinting step, you can safely set\nfar-future headers (so long as you don't link to the unprocessed assets\nin your templates)\n\n``CONVOY_LOCAL_CACHE_ROOT = STATIC_ROOT`` If using a cached s3 storage,\nwhere do we store the cached files?\n\n``CARPOOL_CACHE_PATH_FRAGMENT = \"CARPOOL\"`` Where should we the combined\nfiles? They will be stored at this path below STATIC\\_ROOT\n\n``CARPOOL_COMBINE_ORIGINALS = False`` When set to True, concatenates the\noriginal, unprocessed, files instead of the pre-processed files.\n\n``CARPOOL_COMBINE_DURING_REQUEST = True`` Whether we should attempt to\ncombine files during the request response cycle. Currently serves as a\nway to turn off concatenation behavior In future will be part of the\ntoggles to enable post-request processing\n\n``CARPOOL_CSS_TEMPLATE = u'<link rel=\"stylesheet\" href=\"%s\" >\\n'`` The\nunicode string to use when rendering a css asset path into an HTML tag.\n\n``CARPOOL_JS_TEMPLATE = u'<script type=\"text/javascript\" src=\"%s\" ></script>\\n'``\nThe unicode string to use when rendering a Javascript asset path into an\nHTML tag.\n\n``CARPOOL_START_COMMENT_TEMPLATE = u\"\\n<!-- %s -->\\n\"`` The HTML comment\nplaced before carpool CSS or JS tags are rendered. Can be set to a falsy\nvalue, if you don't want the comment to be added.\n\n``CARPOOL_END_COMMENT_TEMPLATE = CARPOOL_START_COMMENT_TEMPLATE`` The\nHTML comment placed after carpool CSS or JS tags are rendered. Can be\nset to a falsy value, if you don't want the comment to be added.\n\nSettings for when DEBUG=True\n''''''''''''''''''''''''''''\n\n``CONVOY_DURING_DEBUG = False`` When True and DEBUG=True, ``convoy``\ntemplate tag returns processed file urls for each asset path (e.g.\n'myfile.css' becomes 'myfile.fb12a26e32dc.cmin.css'). When\nCONVOY\\_DURING\\_DEBUG = False and DEBUG = True, ``convoy`` template tag\nreturns the url to the original, unprocessed, file (e.g. 'myfile.css'\nstays 'myfile.css')\n\nNB: Using CONVOY\\_DURING\\_DEBUG requires additional setup. You must\n\n-  run collectstatic locally ``$ python manage.py collectstatic``\n-  configure an explicit static serving url in your urls.py\n   ``url(r'^static/(?P<path>.*)$', 'django.views.static.serve',{'document_root': settings.STATIC_ROOT})``\n-  run runserver with the ``--nostatic`` option\n   ``$ python manage.py runserver --nostatic``\n\n``CARPOOL_COMBINE_DURING_DEBUG = False`` When True and DEBUG = True,\n``carpool`` template tag will concatenates files. To use this setting,\nyou must set CONVOY\\_DURING\\_DEBUG to True. When\nCARPOOL\\_COMBINE\\_DURING\\_DEBUG = False and DEBUG = True, ``carpool``\ntemplate tag renders each asset path into individual\n``<link rel='stylesheet' href=\"...\" >`` or\n``<script type=\"text/javascript\" src=\"...\"></script>`` tags without\nconcatenating them.\n\nSettings unlikely going to need:\n''''''''''''''''''''''''''''''''\n\n``CONVOY_CONSERVATIVE_MSIE_GZIP = False`` If set to True, will never\nattempt to serve gziped files to MSIE identified browsers. You are\nunlikely to need this unless you're writing your own subclasses that\ngzip more than just js and css files\n\n``CONVOY_AWS_QUERYSTRING_AUTH = False`` Convoy is known to break if you\nset this to True -- don't. We have a special file here so you can still\nuse querystring auth in your media files if you want to.\n\nDevelopment setup\n~~~~~~~~~~~~~~~~~\n\nRequires pandoc https://github.com/jgm/pandoc/releases for registering\non pypi.\n\nIf you want to include convoy locally, use\n``pip install -e /path/to/convoy/``", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-asset-convoy", "package_url": "https://pypi.org/project/django-asset-convoy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-asset-convoy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/django-asset-convoy/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Asset packager for Django applications", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>NB: This package is experimental pre-alpha software. The convoy features\nare more mature than the carpool features.</p>\n<div id=\"rationale\">\n<h2>Rationale:</h2>\n<p><tt><span class=\"pre\">django-asset-convoy</span></tt> makes static asset best practices nearly\neffortless without changing your current workflow. Your files are\nprocessed for you when you run collectstatic, and the template tags to\naccess your processed files are easy to use.</p>\n<p>Static asset best practices = Faster page loads = happier customers.</p>\n<ul>\n<li>fingerprint based cachebusting which enables far-future cache exipry\nheaders (cached files load instantly)</li>\n<li>minification (smaller files load faster)</li>\n<li>gzipping that works on S3 (compressed files load faster)</li>\n<li>concatenation (fewer http requests means less latency and faster page\nloads)</li>\n</ul>\n<p>Everything but concatenation is done automatically during the\npost_process step of django\u2019s <tt>python manage.py collectstatic</tt>\ncommand. This means that when Heroku runs collectstatic automatically\nfor you, your assets get post-processed automatically too!</p>\n<p>The <tt>convoy</tt> template tag is called exactly the same way the\nstaticfiles <tt>static</tt> template tag is called.</p>\n<p>The <tt>carpool</tt> template tag that does concatenation is extremely simple\n(see below).</p>\n<p>You get automatic static asset management best practices for about five\nminutes of one-time configuration.</p>\n<p>NB: convoy\u2019s post processing makes the collectstatic command take about\ntwice as long to run. If you have a lot of unchanged static assets, this\ncan make pushing small changes to Heroku somewhat painful \u2013\n<tt>heroku config:set DISABLE_COLLECTSTATIC=1</tt> may come in handy if that\nis the case.</p>\n</div>\n<div id=\"speed\">\n<h2>Speed:</h2>\n<p>With convoy, your pages load faster. Sometimes a lot faster.</p>\n<p>In initial tests with heroku and s3, using <tt>convoy</tt> and <tt>carpool</tt>\nsped up DocumentReady times from ~1500 milliseconds average to 546\nmilliseconds average. (Google\u2019s homepage by hit DocumentReady in 341ms\naverage). Method: Middle 8 of 10 page loads measured without caching by\nchrome devtools. GTmetrix performance reports went from 91%/78% to\n99%/98%.</p>\n<p>More tests pending.</p>\n</div>\n<div id=\"what\">\n<h2>What:</h2>\n<p>django-asset-convoy has a few parts:</p>\n<ul>\n<li>static asset storages that automatically process your static assets\nwhen you run collectstatic (fingerprinting/cache-busting with a hash,\nminifing, and gziping)</li>\n<li>caching s3 storages that keep a copy on the local filesystem as well\nas saving on s3 (meaning in-request concatenation goes a lot faster)</li>\n<li><tt>convoy</tt> template tag that resolves a resource to its processed\ncounterpartd</li>\n<li><tt>carpool</tt> template tag that concatenates css and js files so they\ncan be served by a single http request.</li>\n<li>A GzipHttpOnlyMiddleware that sidesteps the BREACH security\nvulnerability on secure HTTPS pages while allowing gzip performance\nimprovements on HTTP pages</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements:</h2>\n<pre>#django &gt;= 1.7\npip install https://www.djangoproject.com/download/1.7b3/tarball/\npip install django-s3-folder-storage\n\npip install cssmin\npip install rjsmin #recommended\n#or pip install jsmin\n</pre>\n<p>Optional, but speeds up your pages even more: <tt><span class=\"pre\">django-htmlmin</span></tt></p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration:</h2>\n<pre>#settings.py\nINSTALLED_APPS = (\n    ...\n    'convoy',\n    ...\n)\n</pre>\n<div id=\"option-1-using-the-filesystem\">\n<h3>Option 1: Using the filesystem:</h3>\n<pre>#settings.py\nSTATICFILES_STORAGE = 'convoy.stores.ConvoyStorage'\n\n#Set STATIC_ROOT, STATIC_URL, etc, as normal\n</pre>\n</div>\n<div id=\"option-2-using-s3-folder-storage\">\n<h3>Option 2: Using s3-folder-storage</h3>\n<pre>#settings.py\n\n#one of these\nSTATICFILES_STORAGE = 'convoy.stores.S3FolderConvoyStorage'\nSTATICFILES_STORAGE = 'convoy.stores.CachedS3FolderConvoyStorage'\n\n#Set the following to their appropriate variables\nAWS_STORAGE_BUCKET_NAME = 'my-bucket'\nAWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']\nAWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']\nDEFAULT_FILE_STORAGE = 's3_folder_storage.s3.DefaultStorage'\nDEFAULT_S3_PATH = \"media\"\nSTATIC_S3_PATH = \"static\"\nMEDIA_ROOT = '/%s/' % DEFAULT_S3_PATH\nSTATIC_ROOT = \"/%s/\" % STATIC_S3_PATH\nMEDIA_URL = 'http://%s.s3.amazonaws.com/media/' % AWS_STORAGE_BUCKET_NAME\nSTATIC_URL = 'http://%s.s3.amazonaws.com/static/' % AWS_STORAGE_BUCKET_NAME\nADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'\n</pre>\n<p>Backends are provided for s3 without s3-folder-storage, not recomended.</p>\n</div>\n<div id=\"suggested-configuration\">\n<h3>Suggested configuration:</h3>\n<pre>#settings.py\nCONVOY_AWS_HEADERS = {\n    #Cache processed assets for a full year\n    'Cache-Control': 'max-age=%s' % (60 * 60 * 24 * 365),\n}\n</pre>\n</div>\n<div id=\"configuring-the-http-only-gzip-middleware\">\n<h3>Configuring the HTTP Only Gzip Middleware:</h3>\n<pre>#settings.py\nMIDDLEWARE_CLASSES = (\n    'convoy.middleware.GzipHttpOnlyMiddleware',\n    ...\n)\n</pre>\n</div>\n</div>\n<div id=\"usage-automatic-asset-pipeline-during-collectstatic\">\n<h2>Usage: automatic asset pipeline during collectstatic:</h2>\n<p>When you run <tt>python manage.py collectstatic</tt> convoy will\nautomatically fingerprint (hash), minify the static files that can be\nminified, and gzip the css and js.</p>\n<p>Then in your template <tt>{% load convoytags %}</tt> will get you two new\ntags <tt>convoy</tt> and <tt>carpool</tt> whose usage is as follows:</p>\n</div>\n<div id=\"using-the-convoy-template-tag\">\n<h2>Using the <tt>convoy</tt> template tag</h2>\n<p>The <tt>convoy</tt> template tag works just like the <tt>static</tt> template tag\nprovided by <tt>django.contrib.staticfiles</tt></p>\n<pre>Usage::\n\n    {% convoy path [as varname] %}\n\nExamples::\n\n    {% convoy \"myapp/css/base.css\" %}\n    {% convoy variable_with_path %}\n    {% convoy \"myapp/css/base.css\" as admin_base_css %}\n    {% convoy variable_with_path as varname %}\n</pre>\n<p>A sample use in a template would be:</p>\n<pre>mypage.html\n{% load convoytags %}\n&lt;link rel=\"stylesheet\" href=\"{% convoy \"myapp/css/base.css\" %}\"&gt;\n</pre>\n<p>Would render:</p>\n<pre>&lt;!-- If gzip isn't supported by the request, or isn't enabled --&gt;\n&lt;link rel=\"stylesheet\" href=\"/STATIC_ROOT/myapp/css/base.25b23dfca187.cmin.css\" &gt;\n\n&lt;!-- or, if gzip is enabled --&gt;\n&lt;link rel=\"stylesheet\" href=\"/STATIC_ROOT/myapp/css/base.25b23dfca187.cmin.css.gz\" &gt;\n</pre>\n</div>\n<div id=\"using-the-carpool-template-tag\">\n<h2>Using the <tt>carpool</tt> template tag</h2>\n<p>The <tt>carpool</tt> template tag is a concatenator, it works similarly to\nthe <tt>compress</tt> tag in django-compressor.</p>\n<pre>Usage::\n\n    {% carpool [js,css] %}\n        'file/path/to/concatenate.[js,css]'\n        'file/path/to/join.[js,css]'\n    {% endcarpool %}\n\nExamples::\n\n    {% carpool css %}\n        \"myapp/css/base.css\"\n        \"myapp/css/second.css\"\n        \"myapp/css/third.css\"\n    {% endcarpool %}\n\n    If concatenation and pipelining is successful:\n        &lt;!-- myapp/css/base.css+++myapp/css/second.css+++myapp/css/third.css --&gt;\n        &lt;link rel=\"stylesheet\" href=\"/static/CARPOOL/css/fb12a26e32dc.cmin.css' \"&gt;\n        &lt;!-- myapp/css/base.css+++myapp/css/second.css+++myapp/css/third.css --&gt;\n\n    If not, falls back to:\n        &lt;!-- myapp/css/base.css+++myapp/css/second.css+++myapp/css/third.css --&gt;\n        &lt;link rel=\"stylesheet\" href=\"/static/myapp/css/base.css' &gt;\n        &lt;link rel=\"stylesheet\" href=\"/static/myapp/css/second.css' &gt;\n        &lt;link rel=\"stylesheet\" href=\"/static/myapp/css/third.css' &gt;\n        &lt;!-- myapp/css/base.css+++myapp/css/second.css+++myapp/css/third.css --&gt;\n\n    {% carpool js %}\n        \"myapp/css/base.js\"\n        \"myapp/css/second.js\"\n        \"myapp/css/third.js\"\n    {% endcarpool %}\n\n    Would render something like:\n        &lt;!-- myapp/css/base.js+++myapp/css/second.js+++myapp/css/third.js --&gt;\n        &lt;script type=\"text/javascript\" src=\"/static/CARPOOL/js/1fc48d23e7b6.cmin.js' &gt;\n        &lt;!-- myapp/css/base.js+++myapp/css/second.js+++myapp/css/third.js --&gt;\n</pre>\n</div>\n<div id=\"optional-configuration\">\n<h2>Optional configuration:</h2>\n<div id=\"settings-you-might-want-to-change-and-their-defaults\">\n<h3>Settings you might want to change and their defaults:</h3>\n<p><tt>CONVOY_USE_EXISTING_MIN_FILES = True</tt> Attempts to get the distributed\nmin that matches a given filename e.g. if you have bootstrap.css, convoy\nwould look for bootstrap.min.css if bootstrap.min.css is found, convoy\nwill use bootstrap\u2019s minified version instead of minifiying the files\nitself</p>\n<p><tt>CONVOY_GZIP_IN_TEMPLATE = True</tt> When True: checks if the request says\nit accepts gzip, and if so links to the gzip file from the template,\nthis is useful for serving gziped files from AWS When False: returns the\nprocessed but not gziped version of the file</p>\n<p><tt>CONVOY_AWS_HEADERS = {}</tt> AWS headers for processed assets because\nconvoyed assets go through a fingerprinting step, you can safely set\nfar-future headers (so long as you don\u2019t link to the unprocessed assets\nin your templates)</p>\n<p><tt>CONVOY_LOCAL_CACHE_ROOT = STATIC_ROOT</tt> If using a cached s3 storage,\nwhere do we store the cached files?</p>\n<p><tt>CARPOOL_CACHE_PATH_FRAGMENT = \"CARPOOL\"</tt> Where should we the combined\nfiles? They will be stored at this path below STATIC_ROOT</p>\n<p><tt>CARPOOL_COMBINE_ORIGINALS = False</tt> When set to True, concatenates the\noriginal, unprocessed, files instead of the pre-processed files.</p>\n<p><tt>CARPOOL_COMBINE_DURING_REQUEST = True</tt> Whether we should attempt to\ncombine files during the request response cycle. Currently serves as a\nway to turn off concatenation behavior In future will be part of the\ntoggles to enable post-request processing</p>\n<p><tt>CARPOOL_CSS_TEMPLATE = <span class=\"pre\">u'&lt;link</span> <span class=\"pre\">rel=\"stylesheet\"</span> <span class=\"pre\">href=\"%s\"</span> &gt;\\n'</tt> The\nunicode string to use when rendering a css asset path into an HTML tag.</p>\n<p><tt>CARPOOL_JS_TEMPLATE = <span class=\"pre\">u'&lt;script</span> <span class=\"pre\">type=\"text/javascript\"</span> <span class=\"pre\">src=\"%s\"</span> <span class=\"pre\">&gt;&lt;/script&gt;\\n'</span></tt>\nThe unicode string to use when rendering a Javascript asset path into an\nHTML tag.</p>\n<p><tt>CARPOOL_START_COMMENT_TEMPLATE = <span class=\"pre\">u\"\\n&lt;!--</span> %s <span class=\"pre\">--&gt;\\n\"</span></tt> The HTML comment\nplaced before carpool CSS or JS tags are rendered. Can be set to a falsy\nvalue, if you don\u2019t want the comment to be added.</p>\n<p><tt>CARPOOL_END_COMMENT_TEMPLATE = CARPOOL_START_COMMENT_TEMPLATE</tt> The\nHTML comment placed after carpool CSS or JS tags are rendered. Can be\nset to a falsy value, if you don\u2019t want the comment to be added.</p>\n</div>\n<div id=\"settings-for-when-debug-true\">\n<h3>Settings for when DEBUG=True</h3>\n<p><tt>CONVOY_DURING_DEBUG = False</tt> When True and DEBUG=True, <tt>convoy</tt>\ntemplate tag returns processed file urls for each asset path (e.g.\n\u2018myfile.css\u2019 becomes \u2018myfile.fb12a26e32dc.cmin.css\u2019). When\nCONVOY_DURING_DEBUG = False and DEBUG = True, <tt>convoy</tt> template tag\nreturns the url to the original, unprocessed, file (e.g. \u2018myfile.css\u2019\nstays \u2018myfile.css\u2019)</p>\n<p>NB: Using CONVOY_DURING_DEBUG requires additional setup. You must</p>\n<ul>\n<li>run collectstatic locally <tt>$ python manage.py collectstatic</tt></li>\n<li>configure an explicit static serving url in your urls.py\n<tt><span class=\"pre\">url(r'^static/(?P&lt;path&gt;.*)$',</span> <span class=\"pre\">'django.views.static.serve',{'document_root':</span> settings.STATIC_ROOT})</tt></li>\n<li>run runserver with the <tt><span class=\"pre\">--nostatic</span></tt> option\n<tt>$ python manage.py runserver <span class=\"pre\">--nostatic</span></tt></li>\n</ul>\n<p><tt>CARPOOL_COMBINE_DURING_DEBUG = False</tt> When True and DEBUG = True,\n<tt>carpool</tt> template tag will concatenates files. To use this setting,\nyou must set CONVOY_DURING_DEBUG to True. When\nCARPOOL_COMBINE_DURING_DEBUG = False and DEBUG = True, <tt>carpool</tt>\ntemplate tag renders each asset path into individual\n<tt>&lt;link <span class=\"pre\">rel='stylesheet'</span> <span class=\"pre\">href=\"...\"</span> &gt;</tt> or\n<tt>&lt;script <span class=\"pre\">type=\"text/javascript\"</span> <span class=\"pre\">src=\"...\"&gt;&lt;/script&gt;</span></tt> tags without\nconcatenating them.</p>\n</div>\n<div id=\"settings-unlikely-going-to-need\">\n<h3>Settings unlikely going to need:</h3>\n<p><tt>CONVOY_CONSERVATIVE_MSIE_GZIP = False</tt> If set to True, will never\nattempt to serve gziped files to MSIE identified browsers. You are\nunlikely to need this unless you\u2019re writing your own subclasses that\ngzip more than just js and css files</p>\n<p><tt>CONVOY_AWS_QUERYSTRING_AUTH = False</tt> Convoy is known to break if you\nset this to True \u2013 don\u2019t. We have a special file here so you can still\nuse querystring auth in your media files if you want to.</p>\n<div id=\"development-setup\">\n<h4>Development setup</h4>\n<p>Requires pandoc <a href=\"https://github.com/jgm/pandoc/releases\" rel=\"nofollow\">https://github.com/jgm/pandoc/releases</a> for registering\non pypi.</p>\n<p>If you want to include convoy locally, use\n<tt>pip install <span class=\"pre\">-e</span> /path/to/convoy/</tt></p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1145515, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d68cd2fafdeba27adeb38a40189e4668", "sha256": "fe6f457b1120c09e7e13552f243379e315de063064bace106597b420756a8a7b"}, "downloads": -1, "filename": "django-asset-convoy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d68cd2fafdeba27adeb38a40189e4668", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14709, "upload_time": "2014-07-02T23:08:53", "upload_time_iso_8601": "2014-07-02T23:08:53.724835Z", "url": "https://files.pythonhosted.org/packages/12/7f/38606bac6be9492f99694daeacecaab5f439efbb5c48c1c161e1bc1967f0/django-asset-convoy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bb172c170952f20be30fd86b0b74c9e9", "sha256": "412eebd48b138bbad52316dab1795b402e8776ffe0df898f332c09cab3b6effa"}, "downloads": -1, "filename": "django-asset-convoy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bb172c170952f20be30fd86b0b74c9e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14697, "upload_time": "2014-07-02T23:25:24", "upload_time_iso_8601": "2014-07-02T23:25:24.158325Z", "url": "https://files.pythonhosted.org/packages/4a/4b/84248e6e164bc6ff9b4c38008ce81f1f09af380c15dff9fffe36227d4a4e/django-asset-convoy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6067f5a713338ed448661ab704d78698", "sha256": "79b4bdb99cd1a1764f97ba5ae4d58d41c651dc23ebf8752811c23cb9165a4323"}, "downloads": -1, "filename": "django-asset-convoy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6067f5a713338ed448661ab704d78698", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16633, "upload_time": "2014-07-02T23:32:15", "upload_time_iso_8601": "2014-07-02T23:32:15.316218Z", "url": "https://files.pythonhosted.org/packages/4f/75/b76470835795e23fd2b434dc441908506c474c92249a2417db2d5b48d9e0/django-asset-convoy-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "75daad0c06302f0a333fe12efeda2171", "sha256": "037adf48bc9b32d5a1407968aa784a42c6fdb21be99d933cc8306b29e9fbb384"}, "downloads": -1, "filename": "django-asset-convoy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "75daad0c06302f0a333fe12efeda2171", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16772, "upload_time": "2014-07-02T23:54:42", "upload_time_iso_8601": "2014-07-02T23:54:42.292709Z", "url": "https://files.pythonhosted.org/packages/49/59/ef529cbb14f898b5edc127c11baf636f3cb462f31007da6b23c822ec3d8a/django-asset-convoy-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75daad0c06302f0a333fe12efeda2171", "sha256": "037adf48bc9b32d5a1407968aa784a42c6fdb21be99d933cc8306b29e9fbb384"}, "downloads": -1, "filename": "django-asset-convoy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "75daad0c06302f0a333fe12efeda2171", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16772, "upload_time": "2014-07-02T23:54:42", "upload_time_iso_8601": "2014-07-02T23:54:42.292709Z", "url": "https://files.pythonhosted.org/packages/49/59/ef529cbb14f898b5edc127c11baf636f3cb462f31007da6b23c822ec3d8a/django-asset-convoy-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:36 2020"}