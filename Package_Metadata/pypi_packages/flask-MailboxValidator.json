{"info": {"author": "MailboxValidator.com", "author_email": "support@mailboxvalidator.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "MailboxValidator Flask Python Module\n==============================\n\nThis Flask Python module provides an easy way to call the MailboxValidator API which validates if an email address is a valid one.\n\nThis module can be used in many types of projects such as:\n\n - validating a user's email during sign up\n - cleaning your mailing list prior to an email marketing campaign\n - a form of fraud check\n\n\n\nInstallation\n============\n\nTo install this module type the following:\n\n\tpip install flask_MailboxValidator\n\n\n\nDependencies\n============\n\nAn API key is required for this module to function. Go to https://www.mailboxvalidator.com/plans#api to sign up for FREE API plan and you'll be given an API key.\n\nIn order to use this module to validate email from form, WTForms and Flask-WTF need to be installed. Also, nose2 need to be installed in order to run the test file.\n\n\n\n# Usage for validate email from form\n\n*Note: WTForms and Flask-WTF must be installed before using this features.*\n\nThis Flask Python module had three different validator for different uses: EmailValidation for validating email address by all parameters, DisposableEmailValidation for validating disposable email address, and FreeEmailValidation for validating free email address.\n\n1. Import the validator class from the package. For example: `from flask_MailboxValidator.SingleValidation import EmailValidation`\n2. Call the validator in validator array along with your API key. For example: `email = TextField('Email:', validators=[validators.required(), EmailValidation(apikey='Your_API_Key')])`\n\n\n\n\nUsage for validating emails\n===========================\n\n```python\nimport flask_MailboxValidator\nfrom flask import Flask\nfrom flask import jsonify\n\napp = Flask(__name__)\n\nmbv = flask_MailboxValidator.SingleValidation('PASTE_API_KEY_HERE')\nresults = mbv.ValidateEmail('example@example.com')\n\n@app.route('/')\ndef display_result():\n\tif results is None:\n\t\treturn(\"Error connecting to API.\\n\")\n\telif results['error_code'] == '':\n\t\treturn (jsonify(results))\n\telse:\n\t\treturn('error_message = ' + results['error_message'] + \"\\n\")\n```\n\nFunctions\n=========\n\n### SingleValidation(api_key)\n\nCreates a new instance of the MailboxValidator object with the API key.\n\n### ValidateEmail(email_address)\n\nPerforms email validation on the supplied email address.\n\nResult Fields\n=============\n\n### email_address\n\nThe input email address.\n\n### domain\n\nThe domain of the email address.\n\n### is_free\n\nWhether the email address is from a free email provider like Gmail or Hotmail.\n\nReturn values: True, False\n\n### is_syntax\n\nWhether the email address is syntactically correct.\n\nReturn values: True, False\n\n### is_domain\n\nWhether the email address has a valid MX record in its DNS entries.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_smtp\n\nWhether the mail servers specified in the MX records are responding to connections.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_verified\n\nWhether the mail server confirms that the email address actually exist.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_server_down\n\nWhether the mail server is currently down or unresponsive.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_greylisted\n\nWhether the mail server employs greylisting where an email has to be sent a second time at a later time.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_disposable\n\nWhether the email address is a temporary one from a disposable email provider.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_suppressed\n\nWhether the email address is in our blacklist.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_role\n\nWhether the email address is a role-based email address like admin@example.net or webmaster@example.net.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_high_risk\n\nWhether the email address contains high risk keywords.\n\nReturn values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### is_catchall\n\nWhether the email address is a catch-all address.\n\nReturn values: True, False, Unknown, -&nbsp;&nbsp;&nbsp;(- means not applicable)\n\n### mailboxvalidator_score\n\nEmail address reputation score.\n\nScore > 0.70 means good; score > 0.40 means fair; score <= 0.40 means poor.\n\n### time_taken\n\nThe time taken to get the results in seconds.\n\n### status\n\nWhether our system think the email address is valid based on all the previous fields.\n\nReturn values: True, False\n\n### credits_available\n\nThe number of credits left to perform validations.\n\n### error_code\n\nThe error code if there is any error. See error table below.\n\n### error_message\n\nThe error message if there is any error. See error table below.\n\n\nUsage for checking if an email is from a disposable email provider\n===================================================================\n\n```python\nimport flask_MailboxValidator\nfrom flask import Flask\nfrom flask import jsonify\n\napp = Flask(__name__)\n\nmbv = flask_MailboxValidator.SingleValidation('PASTE_API_KEY_HERE')\nresults = mbv.DisposableEmail('example@example.com')\n\n@app.route('/')\ndef display_result():\n\tif results is None:\n\t\treturn(\"Error connecting to API.\\n\")\n\telif results['error_code'] == '':\n\t\treturn (jsonify(results))\n\telse:\n\t\treturn('error_message = ' + results['error_message'] + \"\\n\")\n```\n\nFunctions\n=========\n\n### SingleValidation(api_key)\n\nCreates a new instance of the MailboxValidator object with the API key.\n\n### DisposableEmail(email_address)\n\nCheck if the supplied email address is from a disposable email provider.\n\nResult Fields\n=============\n\n### email_address\n\nThe input email address.\n\n### is_disposable\n\nWhether the email address is a temporary one from a disposable email provider.\n\nReturn values: True, False\n\n### credits_available\n\nThe number of credits left to perform validations.\n\n### error_code\n\nThe error code if there is any error. See error table below.\n\n### error_message\n\nThe error message if there is any error. See error table below.\n\n\nUsage for checking if an email is from a free email provider\n============================================================\n\n```python\nimport flask_MailboxValidator\nfrom flask import Flask\nfrom flask import jsonify\n\napp = Flask(__name__)\n\nmbv = flask_MailboxValidator.SingleValidation('PASTE_API_KEY_HERE')\nresults = mbv.FreeEmail('example@example.com')\n\n@app.route('/')\ndef display_result():\n\tif results is None:\n\t\treturn(\"Error connecting to API.\\n\")\n\telif results['error_code'] == '':\n\t\treturn (jsonify(results))\n\telse:\n\t\treturn('error_message = ' + results['error_message'] + \"\\n\")\n```\n\nFunctions\n=========\n\n### SingleValidation(api_key)\n\nCreates a new instance of the MailboxValidator object with the API key.\n\n### FreeEmail(email_address)\n\nCheck if the supplied email address is from a free email provider.\n\nResult Fields\n=============\n\n### email_address\n\nThe input email address.\n\n### is_free\n\nWhether the email address is from a free email provider like Gmail or Hotmail.\n\nReturn values: True, False\n\n### credits_available\n\nThe number of credits left to perform validations.\n\n### error_code\n\nThe error code if there is any error. See error table below.\n\n### error_message\n\nThe error message if there is any error. See error table below.\n\n\n\n# Test\n\nTo run the test file, you will first need to replace the 'PASTE_API_KEY_HERE' with your API key in the test file(Located at test directory). After that, run this command in terminal: `python setup.py test`\n\n\n\n\nErrors\n======\n\n| error_code | error_message |\n| ---------- | ------------- |\n| 100 | Missing parameter. |\n| 101 | API key not found. |\n| 102 | API key disabled. |\n| 103 | API key expired. |\n| 104 | Insufficient credits. |\n| 105 | Unknown error. |\n\nCopyright\n=========\n\nCopyright (C) 2018 by MailboxValidator.com, support@mailboxvalidator.com\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MailboxValidator/Flask_MailboxValidator", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "flask-MailboxValidator", "package_url": "https://pypi.org/project/flask-MailboxValidator/", "platform": "", "project_url": "https://pypi.org/project/flask-MailboxValidator/", "project_urls": {"Homepage": "https://github.com/MailboxValidator/Flask_MailboxValidator"}, "release_url": "https://pypi.org/project/flask-MailboxValidator/1.1.1/", "requires_dist": ["Flask (>=1.0.2)", "Flask-WTF (>=0.14.2)", "WTForms (>=2.2.1)", "sphinx (>=1.8.1) ; extra == 'docs'", "Pallets-Sphinx-Themes ; extra == 'docs'", "nose2 ; extra == 'tests'"], "requires_python": "", "summary": "Email verification module for Flask using MailboxValidator API. It validates if the email is valid, from a free provider, contains high-risk keywords, whether it's a catch-all address and so much more.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MailboxValidator Flask Python Module</h1>\n<p>This Flask Python module provides an easy way to call the MailboxValidator API which validates if an email address is a valid one.</p>\n<p>This module can be used in many types of projects such as:</p>\n<ul>\n<li>validating a user's email during sign up</li>\n<li>cleaning your mailing list prior to an email marketing campaign</li>\n<li>a form of fraud check</li>\n</ul>\n<h1>Installation</h1>\n<p>To install this module type the following:</p>\n<pre><code>pip install flask_MailboxValidator\n</code></pre>\n<h1>Dependencies</h1>\n<p>An API key is required for this module to function. Go to <a href=\"https://www.mailboxvalidator.com/plans#api\" rel=\"nofollow\">https://www.mailboxvalidator.com/plans#api</a> to sign up for FREE API plan and you'll be given an API key.</p>\n<p>In order to use this module to validate email from form, WTForms and Flask-WTF need to be installed. Also, nose2 need to be installed in order to run the test file.</p>\n<h1>Usage for validate email from form</h1>\n<p><em>Note: WTForms and Flask-WTF must be installed before using this features.</em></p>\n<p>This Flask Python module had three different validator for different uses: EmailValidation for validating email address by all parameters, DisposableEmailValidation for validating disposable email address, and FreeEmailValidation for validating free email address.</p>\n<ol>\n<li>Import the validator class from the package. For example: <code>from flask_MailboxValidator.SingleValidation import EmailValidation</code></li>\n<li>Call the validator in validator array along with your API key. For example: <code>email = TextField('Email:', validators=[validators.required(), EmailValidation(apikey='Your_API_Key')])</code></li>\n</ol>\n<h1>Usage for validating emails</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">flask_MailboxValidator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">jsonify</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">mbv</span> <span class=\"o\">=</span> <span class=\"n\">flask_MailboxValidator</span><span class=\"o\">.</span><span class=\"n\">SingleValidation</span><span class=\"p\">(</span><span class=\"s1\">'PASTE_API_KEY_HERE'</span><span class=\"p\">)</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">mbv</span><span class=\"o\">.</span><span class=\"n\">ValidateEmail</span><span class=\"p\">(</span><span class=\"s1\">'example@example.com'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">display_result</span><span class=\"p\">():</span>\n\t<span class=\"k\">if</span> <span class=\"n\">results</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"s2\">\"Error connecting to API.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">elif</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'error_code'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">''</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">))</span>\n\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"s1\">'error_message = '</span> <span class=\"o\">+</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'error_message'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h1>Functions</h1>\n<h3>SingleValidation(api_key)</h3>\n<p>Creates a new instance of the MailboxValidator object with the API key.</p>\n<h3>ValidateEmail(email_address)</h3>\n<p>Performs email validation on the supplied email address.</p>\n<h1>Result Fields</h1>\n<h3>email_address</h3>\n<p>The input email address.</p>\n<h3>domain</h3>\n<p>The domain of the email address.</p>\n<h3>is_free</h3>\n<p>Whether the email address is from a free email provider like Gmail or Hotmail.</p>\n<p>Return values: True, False</p>\n<h3>is_syntax</h3>\n<p>Whether the email address is syntactically correct.</p>\n<p>Return values: True, False</p>\n<h3>is_domain</h3>\n<p>Whether the email address has a valid MX record in its DNS entries.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_smtp</h3>\n<p>Whether the mail servers specified in the MX records are responding to connections.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_verified</h3>\n<p>Whether the mail server confirms that the email address actually exist.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_server_down</h3>\n<p>Whether the mail server is currently down or unresponsive.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_greylisted</h3>\n<p>Whether the mail server employs greylisting where an email has to be sent a second time at a later time.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_disposable</h3>\n<p>Whether the email address is a temporary one from a disposable email provider.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_suppressed</h3>\n<p>Whether the email address is in our blacklist.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_role</h3>\n<p>Whether the email address is a role-based email address like <a href=\"mailto:admin@example.net\">admin@example.net</a> or <a href=\"mailto:webmaster@example.net\">webmaster@example.net</a>.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_high_risk</h3>\n<p>Whether the email address contains high risk keywords.</p>\n<p>Return values: True, False, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>is_catchall</h3>\n<p>Whether the email address is a catch-all address.</p>\n<p>Return values: True, False, Unknown, -\u00a0\u00a0\u00a0(- means not applicable)</p>\n<h3>mailboxvalidator_score</h3>\n<p>Email address reputation score.</p>\n<p>Score &gt; 0.70 means good; score &gt; 0.40 means fair; score &lt;= 0.40 means poor.</p>\n<h3>time_taken</h3>\n<p>The time taken to get the results in seconds.</p>\n<h3>status</h3>\n<p>Whether our system think the email address is valid based on all the previous fields.</p>\n<p>Return values: True, False</p>\n<h3>credits_available</h3>\n<p>The number of credits left to perform validations.</p>\n<h3>error_code</h3>\n<p>The error code if there is any error. See error table below.</p>\n<h3>error_message</h3>\n<p>The error message if there is any error. See error table below.</p>\n<h1>Usage for checking if an email is from a disposable email provider</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">flask_MailboxValidator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">jsonify</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">mbv</span> <span class=\"o\">=</span> <span class=\"n\">flask_MailboxValidator</span><span class=\"o\">.</span><span class=\"n\">SingleValidation</span><span class=\"p\">(</span><span class=\"s1\">'PASTE_API_KEY_HERE'</span><span class=\"p\">)</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">mbv</span><span class=\"o\">.</span><span class=\"n\">DisposableEmail</span><span class=\"p\">(</span><span class=\"s1\">'example@example.com'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">display_result</span><span class=\"p\">():</span>\n\t<span class=\"k\">if</span> <span class=\"n\">results</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"s2\">\"Error connecting to API.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">elif</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'error_code'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">''</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">))</span>\n\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"s1\">'error_message = '</span> <span class=\"o\">+</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'error_message'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h1>Functions</h1>\n<h3>SingleValidation(api_key)</h3>\n<p>Creates a new instance of the MailboxValidator object with the API key.</p>\n<h3>DisposableEmail(email_address)</h3>\n<p>Check if the supplied email address is from a disposable email provider.</p>\n<h1>Result Fields</h1>\n<h3>email_address</h3>\n<p>The input email address.</p>\n<h3>is_disposable</h3>\n<p>Whether the email address is a temporary one from a disposable email provider.</p>\n<p>Return values: True, False</p>\n<h3>credits_available</h3>\n<p>The number of credits left to perform validations.</p>\n<h3>error_code</h3>\n<p>The error code if there is any error. See error table below.</p>\n<h3>error_message</h3>\n<p>The error message if there is any error. See error table below.</p>\n<h1>Usage for checking if an email is from a free email provider</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">flask_MailboxValidator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">jsonify</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">mbv</span> <span class=\"o\">=</span> <span class=\"n\">flask_MailboxValidator</span><span class=\"o\">.</span><span class=\"n\">SingleValidation</span><span class=\"p\">(</span><span class=\"s1\">'PASTE_API_KEY_HERE'</span><span class=\"p\">)</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">mbv</span><span class=\"o\">.</span><span class=\"n\">FreeEmail</span><span class=\"p\">(</span><span class=\"s1\">'example@example.com'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">display_result</span><span class=\"p\">():</span>\n\t<span class=\"k\">if</span> <span class=\"n\">results</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"s2\">\"Error connecting to API.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">elif</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'error_code'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">''</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">))</span>\n\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"s1\">'error_message = '</span> <span class=\"o\">+</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">'error_message'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h1>Functions</h1>\n<h3>SingleValidation(api_key)</h3>\n<p>Creates a new instance of the MailboxValidator object with the API key.</p>\n<h3>FreeEmail(email_address)</h3>\n<p>Check if the supplied email address is from a free email provider.</p>\n<h1>Result Fields</h1>\n<h3>email_address</h3>\n<p>The input email address.</p>\n<h3>is_free</h3>\n<p>Whether the email address is from a free email provider like Gmail or Hotmail.</p>\n<p>Return values: True, False</p>\n<h3>credits_available</h3>\n<p>The number of credits left to perform validations.</p>\n<h3>error_code</h3>\n<p>The error code if there is any error. See error table below.</p>\n<h3>error_message</h3>\n<p>The error message if there is any error. See error table below.</p>\n<h1>Test</h1>\n<p>To run the test file, you will first need to replace the 'PASTE_API_KEY_HERE' with your API key in the test file(Located at test directory). After that, run this command in terminal: <code>python setup.py test</code></p>\n<h1>Errors</h1>\n<table>\n<thead>\n<tr>\n<th>error_code</th>\n<th>error_message</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td>Missing parameter.</td>\n</tr>\n<tr>\n<td>101</td>\n<td>API key not found.</td>\n</tr>\n<tr>\n<td>102</td>\n<td>API key disabled.</td>\n</tr>\n<tr>\n<td>103</td>\n<td>API key expired.</td>\n</tr>\n<tr>\n<td>104</td>\n<td>Insufficient credits.</td>\n</tr>\n<tr>\n<td>105</td>\n<td>Unknown error.</td>\n</tr></tbody></table>\n<h1>Copyright</h1>\n<p>Copyright (C) 2018 by MailboxValidator.com, <a href=\"mailto:support@mailboxvalidator.com\">support@mailboxvalidator.com</a></p>\n\n          </div>"}, "last_serial": 4702083, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "629c5dca9797c5b0cb2a455f322a2bbb", "sha256": "2354eff26cb8e35df03e806eea300a43bd3eecd72cd553710a4ad32a0e02e331"}, "downloads": -1, "filename": "flask_MailboxValidator-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "629c5dca9797c5b0cb2a455f322a2bbb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5778, "upload_time": "2018-10-17T06:48:44", "upload_time_iso_8601": "2018-10-17T06:48:44.353040Z", "url": "https://files.pythonhosted.org/packages/98/94/c4a616ca361bc01020b523be0171664be6093de6c0dac995ae33610176fc/flask_MailboxValidator-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d972a0ef545efe41ee916c09b5a73243", "sha256": "0965311c554c1bb3d56c3218b84297fb0b39789bec1aa57b5cd47067bd925d02"}, "downloads": -1, "filename": "flask_MailboxValidator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d972a0ef545efe41ee916c09b5a73243", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5772, "upload_time": "2018-10-17T06:48:45", "upload_time_iso_8601": "2018-10-17T06:48:45.519360Z", "url": "https://files.pythonhosted.org/packages/b3/e5/2134ae70a1c5bc6e5fea2fca4f38b632549a33a06aaa2a9f30fef6da7b6a/flask_MailboxValidator-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "bddd0dafff89a0c68b0228facdc8ae32", "sha256": "e49d156c3bb43fb3380d1447acd0bad5454f7973be385d031f4b8ee3a965ec5d"}, "downloads": -1, "filename": "flask_MailboxValidator-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bddd0dafff89a0c68b0228facdc8ae32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5771, "upload_time": "2018-10-17T06:51:19", "upload_time_iso_8601": "2018-10-17T06:51:19.005512Z", "url": "https://files.pythonhosted.org/packages/82/0e/166dd8fcc59f6f10072f90ff0a887af4afb95591354b3eef9062c723d1b2/flask_MailboxValidator-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc23eb8b4e1aae8f4f807d55c8b4a622", "sha256": "7867b124aaed9b254a037be5c2ca3d20bf125a0ed69d5e7bb69e29572bb5c6f3"}, "downloads": -1, "filename": "flask_MailboxValidator-1.0.1.tar.gz", "has_sig": false, "md5_digest": "dc23eb8b4e1aae8f4f807d55c8b4a622", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5755, "upload_time": "2018-10-17T06:51:20", "upload_time_iso_8601": "2018-10-17T06:51:20.252570Z", "url": "https://files.pythonhosted.org/packages/c6/2e/55ce3b079fc0b3582f0b0532fcecbb6c651fee008d14b484a192a181b13b/flask_MailboxValidator-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "07f44d1bb614a48756f6fd8aaf0f6826", "sha256": "4fe14e0048367966a2bfa952e1f2ba3b2f701bdc9c5d0c208fb87c70b14e0216"}, "downloads": -1, "filename": "flask_MailboxValidator-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "07f44d1bb614a48756f6fd8aaf0f6826", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6781, "upload_time": "2019-01-16T08:04:12", "upload_time_iso_8601": "2019-01-16T08:04:12.575997Z", "url": "https://files.pythonhosted.org/packages/15/01/aac885232d0a136c240328a2036108018c9c3fd6a9878b71e69b54693683/flask_MailboxValidator-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87ce8e846b626241c19d185ca92b5c32", "sha256": "99df2b7c7c0d294d7a8240fe3c869a388aa4eb7cea4ff50741e2cb1d7c9666ab"}, "downloads": -1, "filename": "flask_MailboxValidator-1.1.0.tar.gz", "has_sig": false, "md5_digest": "87ce8e846b626241c19d185ca92b5c32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5596, "upload_time": "2019-01-16T08:04:14", "upload_time_iso_8601": "2019-01-16T08:04:14.079270Z", "url": "https://files.pythonhosted.org/packages/d3/d0/c73a487499cac8a109c10866bb2b87677e6280853c065d3691927862d2f2/flask_MailboxValidator-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "04db2f221aeefe04e8cd68a46df94752", "sha256": "7b10218df2dc263a794fd9a0c5de52c55277af32bfec1f5226ce1716e23bd6fb"}, "downloads": -1, "filename": "flask_MailboxValidator-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04db2f221aeefe04e8cd68a46df94752", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6784, "upload_time": "2019-01-16T08:21:09", "upload_time_iso_8601": "2019-01-16T08:21:09.162471Z", "url": "https://files.pythonhosted.org/packages/7f/e5/d08d7a2993e6eac44b325c9c61cdcb1c44d4dcdad976a4a0c09cca513829/flask_MailboxValidator-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c837fd8f7dbacc7710727516082d2eb", "sha256": "99f2f9690525e8aaeeadc86b4d5d2fd47066955ecfea80bb5cddc8a62450e5a2"}, "downloads": -1, "filename": "flask_MailboxValidator-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8c837fd8f7dbacc7710727516082d2eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5590, "upload_time": "2019-01-16T08:21:10", "upload_time_iso_8601": "2019-01-16T08:21:10.903111Z", "url": "https://files.pythonhosted.org/packages/e1/9a/9692895f99b8ba82e494294b15648d369731270e2299acb6b33349a21d70/flask_MailboxValidator-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "04db2f221aeefe04e8cd68a46df94752", "sha256": "7b10218df2dc263a794fd9a0c5de52c55277af32bfec1f5226ce1716e23bd6fb"}, "downloads": -1, "filename": "flask_MailboxValidator-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04db2f221aeefe04e8cd68a46df94752", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6784, "upload_time": "2019-01-16T08:21:09", "upload_time_iso_8601": "2019-01-16T08:21:09.162471Z", "url": "https://files.pythonhosted.org/packages/7f/e5/d08d7a2993e6eac44b325c9c61cdcb1c44d4dcdad976a4a0c09cca513829/flask_MailboxValidator-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c837fd8f7dbacc7710727516082d2eb", "sha256": "99f2f9690525e8aaeeadc86b4d5d2fd47066955ecfea80bb5cddc8a62450e5a2"}, "downloads": -1, "filename": "flask_MailboxValidator-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8c837fd8f7dbacc7710727516082d2eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5590, "upload_time": "2019-01-16T08:21:10", "upload_time_iso_8601": "2019-01-16T08:21:10.903111Z", "url": "https://files.pythonhosted.org/packages/e1/9a/9692895f99b8ba82e494294b15648d369731270e2299acb6b33349a21d70/flask_MailboxValidator-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:39 2020"}