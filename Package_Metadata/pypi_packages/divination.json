{"info": {"author": "David Kaplan <@depletionmode>", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "===============================================================\ndivination - platform, iospace and physmem inspection framework\n===============================================================\n\n.. image:: https://img.shields.io/pypi/v/divination.svg\n        :target: https://pypi.python.org/pypi/divination\n\nOverview\n--------\n\n*divination* is a python package that exposes a simple interface for transacting \nwith physical memory and IO space - cross platform (currently Windows10 and Linux).\n\nIO and physical memory regions are mapped into the python usermode process and are \ntransacted directly with the assistance of ctypes.\n\nTo function, the module requires a resident kernel-mode driver.\n\nFeatures\n--------\n\n* Reading PCI configuration space\n* Reading MSRs (writing MSRs - TODO)\n* Mapping and RW from/to IO regions\n* Mapping and RW from/to physical memory regions (Linux-only - TODO Windows)\n\nDependencies\n------------\n\n* (Windows) pywin32\n* (Linux) <none>\n\nInstallation\n------------\n\nPython module\n^^^^^^^^^^^^^\n\nThe python module is available off PyPI:\n\n    pip3 install divination\n\nKernel module (Windows)\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe KMDF driver can be built by installing VS, SDK + WDK and \nrunning msbuild under the `driver/win <driver/win>`_ directory from within the VS Developer \nCommand Prompt.\n\nPlease **do not (non-test-)sign** this kernel module; we do not want to further enable attackers!\nUnless a restrictive DeviceGuard policy is employed, enabling testsigning should be sufficient to allow the driver to run:\n\n    bcdedit /set testsigning on ; shutdown -f -t 0 -r\n\nKernel module (Linux)\n^^^^^^^^^^^^^^^^^^^^^\n\nThe Linux kernel module can be built by running make under the `driver/linux <driver/linux>`_ directory.\nThe usual prerequisite dependencies (kernel headers, gcc, etc.) will need to be installed.\n\nUsage\n-----\n\nThere are currently 3 classes available: PciDevice, Msr and MemoryObject. \nExamples follow for usage of each.\n\n* PciDevice(bus, device, function)\n\n    >>> amd_lpc = PciDevice(0, 0x14, 3)     # LPC Bridge @ D14F3\n    >>> hexdump.hexdump(amd_lpc.read_cfg()) \n    00000000: 22 10 0E 79 0F 00 20 02  51 00 01 06 00 00 80 00  \"..y.. .Q.......\n    00000010: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    00000020: 00 00 00 00 00 00 00 00  00 00 00 00 62 14 37 7C  ............b.7|\n    00000030: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    00000040: 04 00 00 00 40 C0 03 20  07 FF 20 03 00 00 00 00  ....@.. .. .....\n    00000050: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    00000060: 00 00 00 00 40 16 00 0A  00 00 0F 00 00 FF FF FF  ....@...........\n    00000070: 67 45 23 00 08 00 00 00  90 02 00 00 07 0A 00 00  gE#.............\n    00000080: 08 00 03 A8 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    00000090: E0 03 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    000000A0: 02 00 C1 FE 2F 01 00 00  00 00 00 00 00 00 00 00  ..../...........\n    000000B0: 00 00 00 00 00 00 00 00  04 00 E9 3F 00 00 00 00  ...........?....\n    000000C0: 00 00 00 00 00 00 00 00  00 00 00 80 00 00 F7 FF  ................\n    000000D0: 86 FF FD 08 42 00 00 00  00 00 00 00 00 00 00 00  ....B...........\n    000000E0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    000000F0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n\n* Msr(register)\n\n    >>> amd_hwcr = Msr(0xc0010015)\n    >>> hex(amd_hwcr.read())   \n    '0x89000111'\n\n* MemoryObject(base_address, range, mem_type, alloc=False)\n\n    >>> spi_bar = MemoryObject(0xfec10000, 0x100, MemoryType.IoSpace)\n    >>> hexdump.hexdump(spi_bar[0:])  # MemoryObjects are sliceable and can be read from + written to\n    00000000: 05 21 CC 4F 00 00 00 00  00 00 00 00 6A 00 00 02  .!.O........j...\n    00000010: 06 20 04 04 06 04 9F 05  03 0B 0A 02 FF 98 06 02  . ..............\n    00000020: 13 07 33 10 08 20 20 20  0C 14 06 0E C0 54 C0 14  ..3..   .....T..\n    00000030: C0 14 08 46 03 00 00 00  FC FC FC FC FC 88 00 00  ...F............\n    00000040: 3B 6B BB EB 00 05 00 00  01 00 00 02 02 00 06 00  ;k..............\n    00000050: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    00000060: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    00000070: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    00000080: 00 40 40 69 24 6A 4A 16  CA C5 EB 7B E2 95 09 4C  .@@i$jJ....{...L\n    00000090: C8 AD 4A FC CB 1D 83 A9  C4 82 C1 D9 7E 35 F9 27  ..J.........~5.'\n    000000A0: 92 8A 43 4B 78 D3 6B 04  9C B8 AF 79 8C 68 C6 E8  ..CKx.k....y.h..\n    000000B0: 2E 24 04 68 F4 97 2A CC  83 74 C9 E2 17 C0 5A C7  .$.h..*..t....Z.\n    000000C0: C7 C7 C7 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    000000D0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    000000E0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n    000000F0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/depletionmode/divination", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "divination", "package_url": "https://pypi.org/project/divination/", "platform": "", "project_url": "https://pypi.org/project/divination/", "project_urls": {"Homepage": "https://github.com/depletionmode/divination"}, "release_url": "https://pypi.org/project/divination/2.0.1/", "requires_dist": null, "requires_python": "", "summary": "Python module for hardware and physmem inspection", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/divination\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/divination.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ec8da81ddbffa027ba055d09b0dfbe96e9cfb60/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646976696e6174696f6e2e737667\"></a>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><em>divination</em> is a python package that exposes a simple interface for transacting\nwith physical memory and IO space - cross platform (currently Windows10 and Linux).</p>\n<p>IO and physical memory regions are mapped into the python usermode process and are\ntransacted directly with the assistance of ctypes.</p>\n<p>To function, the module requires a resident kernel-mode driver.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Reading PCI configuration space</li>\n<li>Reading MSRs (writing MSRs - TODO)</li>\n<li>Mapping and RW from/to IO regions</li>\n<li>Mapping and RW from/to physical memory regions (Linux-only - TODO Windows)</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>(Windows) pywin32</li>\n<li>(Linux) &lt;none&gt;</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"python-module\">\n<h3>Python module</h3>\n<p>The python module is available off PyPI:</p>\n<blockquote>\npip3 install divination</blockquote>\n</div>\n<div id=\"kernel-module-windows\">\n<h3>Kernel module (Windows)</h3>\n<p>The KMDF driver can be built by installing VS, SDK + WDK and\nrunning msbuild under the <a href=\"driver/win\" rel=\"nofollow\">driver/win</a> directory from within the VS Developer\nCommand Prompt.</p>\n<p>Please <strong>do not (non-test-)sign</strong> this kernel module; we do not want to further enable attackers!\nUnless a restrictive DeviceGuard policy is employed, enabling testsigning should be sufficient to allow the driver to run:</p>\n<blockquote>\nbcdedit /set testsigning on ; shutdown -f -t 0 -r</blockquote>\n</div>\n<div id=\"kernel-module-linux\">\n<h3>Kernel module (Linux)</h3>\n<p>The Linux kernel module can be built by running make under the <a href=\"driver/linux\" rel=\"nofollow\">driver/linux</a> directory.\nThe usual prerequisite dependencies (kernel headers, gcc, etc.) will need to be installed.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>There are currently 3 classes available: PciDevice, Msr and MemoryObject.\nExamples follow for usage of each.</p>\n<ul>\n<li><p>PciDevice(bus, device, function)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; amd_lpc = PciDevice(0, 0x14, 3)     # LPC Bridge @ D14F3\n&gt;&gt;&gt; hexdump.hexdump(amd_lpc.read_cfg())\n00000000: 22 10 0E 79 0F 00 20 02  51 00 01 06 00 00 80 00  \"..y.. .Q.......\n00000010: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n00000020: 00 00 00 00 00 00 00 00  00 00 00 00 62 14 37 7C  ............b.7|\n00000030: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n00000040: 04 00 00 00 40 C0 03 20  07 FF 20 03 00 00 00 00  ....@.. .. .....\n00000050: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n00000060: 00 00 00 00 40 16 00 0A  00 00 0F 00 00 FF FF FF  ....@...........\n00000070: 67 45 23 00 08 00 00 00  90 02 00 00 07 0A 00 00  gE#.............\n00000080: 08 00 03 A8 00 00 00 00  00 00 00 00 00 00 00 00  ................\n00000090: E0 03 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n000000A0: 02 00 C1 FE 2F 01 00 00  00 00 00 00 00 00 00 00  ..../...........\n000000B0: 00 00 00 00 00 00 00 00  04 00 E9 3F 00 00 00 00  ...........?....\n000000C0: 00 00 00 00 00 00 00 00  00 00 00 80 00 00 F7 FF  ................\n000000D0: 86 FF FD 08 42 00 00 00  00 00 00 00 00 00 00 00  ....B...........\n000000E0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n000000F0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n</pre>\n</blockquote>\n</li>\n<li><p>Msr(register)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; amd_hwcr = Msr(0xc0010015)\n&gt;&gt;&gt; hex(amd_hwcr.read())\n'0x89000111'\n</pre>\n</blockquote>\n</li>\n<li><p>MemoryObject(base_address, range, mem_type, alloc=False)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; spi_bar = MemoryObject(0xfec10000, 0x100, MemoryType.IoSpace)\n&gt;&gt;&gt; hexdump.hexdump(spi_bar[0:])  # MemoryObjects are sliceable and can be read from + written to\n00000000: 05 21 CC 4F 00 00 00 00  00 00 00 00 6A 00 00 02  .!.O........j...\n00000010: 06 20 04 04 06 04 9F 05  03 0B 0A 02 FF 98 06 02  . ..............\n00000020: 13 07 33 10 08 20 20 20  0C 14 06 0E C0 54 C0 14  ..3..   .....T..\n00000030: C0 14 08 46 03 00 00 00  FC FC FC FC FC 88 00 00  ...F............\n00000040: 3B 6B BB EB 00 05 00 00  01 00 00 02 02 00 06 00  ;k..............\n00000050: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n00000060: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n00000070: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n00000080: 00 40 40 69 24 6A 4A 16  CA C5 EB 7B E2 95 09 4C  .@@i$jJ....{...L\n00000090: C8 AD 4A FC CB 1D 83 A9  C4 82 C1 D9 7E 35 F9 27  ..J.........~5.'\n000000A0: 92 8A 43 4B 78 D3 6B 04  9C B8 AF 79 8C 68 C6 E8  ..CKx.k....y.h..\n000000B0: 2E 24 04 68 F4 97 2A CC  83 74 C9 E2 17 C0 5A C7  .$.h..*..t....Z.\n000000C0: C7 C7 C7 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n000000D0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n000000E0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n000000F0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................\n</pre>\n</blockquote>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7008188, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "69953694f14cad4597b541565a6543cb", "sha256": "fa8ca9ebb305466af9c80e0def7b8fba519bc25b832617e480e07953c6bfad45"}, "downloads": -1, "filename": "divination-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "69953694f14cad4597b541565a6543cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7082, "upload_time": "2019-07-17T17:41:33", "upload_time_iso_8601": "2019-07-17T17:41:33.749665Z", "url": "https://files.pythonhosted.org/packages/d2/dc/0e5be33e536cfbdbba0c1a89f2e7eb3caa9ddb988beb8d350d88f6f59021/divination-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "306155f5173916092957cbcf5f8252ec", "sha256": "102204272b134bfdd42c5f12734cc5bab7ebdb90629834999912975cc35567a8"}, "downloads": -1, "filename": "divination-0.1.0.tar.gz", "has_sig": false, "md5_digest": "306155f5173916092957cbcf5f8252ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4678, "upload_time": "2019-07-17T17:41:36", "upload_time_iso_8601": "2019-07-17T17:41:36.120930Z", "url": "https://files.pythonhosted.org/packages/0e/03/034467978ae6b8af1022c34e81b8ffa9366ec42ab67c42e56d0a8a5adb71/divination-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c04726736bfc81aa89b0fe480d23fe0a", "sha256": "8411248e9bec264b2b94387dcf87f0d1295c6643ed83d2a474beda3c28812285"}, "downloads": -1, "filename": "divination-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c04726736bfc81aa89b0fe480d23fe0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7740, "upload_time": "2020-04-12T17:09:19", "upload_time_iso_8601": "2020-04-12T17:09:19.433086Z", "url": "https://files.pythonhosted.org/packages/e0/ca/20bdec5ca7448bbc77762a0df925b054aa2cde6a0b2c5bd2c65bf48026a1/divination-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eaa99e2aae7645271f5f17aa4854eaa1", "sha256": "edca572dbb84a097a34d4d8f7c3ab05764d4da6896fefd031554c30e3e118f33"}, "downloads": -1, "filename": "divination-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eaa99e2aae7645271f5f17aa4854eaa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12699, "upload_time": "2020-04-12T17:09:20", "upload_time_iso_8601": "2020-04-12T17:09:20.756721Z", "url": "https://files.pythonhosted.org/packages/03/ca/7b5c548c90ef0f56801d926e4683767c4be4328b74d40c5f761eefce8c1f/divination-0.2.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "cf7bd62d7eaa6ec5f9ae86f104d0e87e", "sha256": "b699b10b18b45c0d0816e5b4f84548072dad060a105f2c8ac7ea78d4a3dee2b8"}, "downloads": -1, "filename": "divination-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cf7bd62d7eaa6ec5f9ae86f104d0e87e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7741, "upload_time": "2020-04-13T07:14:13", "upload_time_iso_8601": "2020-04-13T07:14:13.326038Z", "url": "https://files.pythonhosted.org/packages/8f/78/61ded5a275cf6c0b33e165ba3dc30624a51c52b1f5b45e898ef2a8718fe0/divination-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d0678406a3ce9cec494412798a76b80", "sha256": "8d9cc0183062f0bd01259a7806d938612fa6ee5a279780a2a935081541b4c5ee"}, "downloads": -1, "filename": "divination-2.0.0.tar.gz", "has_sig": false, "md5_digest": "1d0678406a3ce9cec494412798a76b80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6731899, "upload_time": "2020-04-13T07:14:18", "upload_time_iso_8601": "2020-04-13T07:14:18.107071Z", "url": "https://files.pythonhosted.org/packages/7a/86/b9d11becc27359cfe75e114f77e95bf56b8138798297187753d4489dd919/divination-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "5c5d42d42c50362cde8f4bc0a44f891f", "sha256": "cd9ce9de0603abb526389c9e91ca127081ae743352562904e3826000f862f4f8"}, "downloads": -1, "filename": "divination-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c5d42d42c50362cde8f4bc0a44f891f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7742, "upload_time": "2020-04-13T07:16:33", "upload_time_iso_8601": "2020-04-13T07:16:33.240673Z", "url": "https://files.pythonhosted.org/packages/df/1a/a6c648979a40215f3da12123ac2b27a28f5a97d9cc115412f622e692c526/divination-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbe4b73d7dcec50a0ba89f0f9fab6f53", "sha256": "3c8e298b07b9b5ae607c9ae2f449b0b36a505421cd243d51edc99bca4e8ca617"}, "downloads": -1, "filename": "divination-2.0.1.tar.gz", "has_sig": false, "md5_digest": "cbe4b73d7dcec50a0ba89f0f9fab6f53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12628, "upload_time": "2020-04-13T07:16:34", "upload_time_iso_8601": "2020-04-13T07:16:34.779587Z", "url": "https://files.pythonhosted.org/packages/00/55/b8dcee9501f975c52ea5996a2d4d178846f4d22f672ecaae6fbad248f76f/divination-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c5d42d42c50362cde8f4bc0a44f891f", "sha256": "cd9ce9de0603abb526389c9e91ca127081ae743352562904e3826000f862f4f8"}, "downloads": -1, "filename": "divination-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c5d42d42c50362cde8f4bc0a44f891f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7742, "upload_time": "2020-04-13T07:16:33", "upload_time_iso_8601": "2020-04-13T07:16:33.240673Z", "url": "https://files.pythonhosted.org/packages/df/1a/a6c648979a40215f3da12123ac2b27a28f5a97d9cc115412f622e692c526/divination-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbe4b73d7dcec50a0ba89f0f9fab6f53", "sha256": "3c8e298b07b9b5ae607c9ae2f449b0b36a505421cd243d51edc99bca4e8ca617"}, "downloads": -1, "filename": "divination-2.0.1.tar.gz", "has_sig": false, "md5_digest": "cbe4b73d7dcec50a0ba89f0f9fab6f53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12628, "upload_time": "2020-04-13T07:16:34", "upload_time_iso_8601": "2020-04-13T07:16:34.779587Z", "url": "https://files.pythonhosted.org/packages/00/55/b8dcee9501f975c52ea5996a2d4d178846f4d22f672ecaae6fbad248f76f/divination-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:58 2020"}