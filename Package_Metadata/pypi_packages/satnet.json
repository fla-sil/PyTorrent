{"info": {"author": "Po-Wei Wang", "author_email": "poweiw@cs.cmu.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License"], "description": "# SATNet \u2022 [![PyPi][pypi-image]][pypi] [![colab][colab-image]][colab] [![License][license-image]][license] \n\n[license-image]: https://img.shields.io/badge/License-MIT-yellow.svg\n[license]: LICENSE\n\n[pypi-image]: https://img.shields.io/pypi/v/satnet.svg\n[pypi]: https://pypi.python.org/pypi/satnet\n\n[colab-image]: https://colab.research.google.com/assets/colab-badge.svg\n[colab]: https://colab.research.google.com/\n\n*Bridging deep learning and logical reasoning using a differentiable satisfiability solver.*\n\nThis repository contains the source code to reproduce the experiments in the ICML 2019 paper [SATNet: Bridging deep learning and logical reasoning using a differentiable satisfiability solver](https://icml.cc/Conferences/2019/Schedule?showEvent=3947) by [Po-Wei Wang](https://powei.tw/), [Priya L. Donti](https://priyadonti.com/), [Bryan Wilder](http://teamcore.usc.edu/people/bryanwilder/default.htm), and [J. Zico Kolter](http://zicokolter.com/).\n\n\n## What is SATNet\n\nSATNet is a differentiable (smoothed) maximum satisfiability (MAXSAT) solver that can be integrated into the loop of larger deep learning systems. This (approximate) solver is based upon a fast coordinate descent approach to solving the semidefinite program (SDP) associated with the MAXSAT problem.\n\n#### How SATNet works\n\nA SATNet layer takes as input the discrete or probabilistic assignments of known MAXSAT variables, and outputs guesses for the assignments of unknown variables via a MAXSAT SDP relaxation with weights *S*. A schematic depicting the forward pass of this layer is shown below. To obtain the backward pass, we analytically differentiate through the SDP relaxation (see the paper for more details).\n\n![Forward pass](https://github.com/locuslab/SATNet/blob/master/images/forward_pass.png)\n\n#### Overview of experiments\n\nWe show that by integrating SATNet into end-to-end learning systems, we can learn the logical structure of challenging problems in a minimally supervised fashion. In particular, we show that we can:\n* Learn the **parity function** using single-bit supervision (a traditionally hard task for deep networks) \n* Learn how to play **9\u00d79 Sudoku (original and permuted)** solely from examples. \n* Solve a **\"visual Sudoku\"** problem that maps images of Sudoku puzzles to their associated logical solutions. (A sample \"visual Sudoku\" input is shown below.)\n\n<div style=\"text-align:center\"><img src=\"https://github.com/locuslab/SATNet/blob/master/images/mnist_sudoku.png\" /></div>\n<!-- ![MNIST Sudoku](images/mnist_sudoku.png) -->\n\n\n## Installation\n\n### Via pip\n```bash\npip install satnet\n```\n\n\n### From source\n```bash\ngit clone https://github.com/locuslab/SATNet\ncd SATNet && python setup.py install\n```\n\n#### Package Dependencies\n```\nconda install -c pytorch tqdm\n```\n\n\n### Via Docker image\n```bash\ncd docker\nsh ./build.sh\nsh ./run.sh\n```\n\n## Running experiments\n### Jupyter Notebook and Google Colab\n[Jupyter notebook](https://github.com/locuslab/SATNet/blob/master/notebooks/Learning%20and%20Solving%20Sudoku%20via%20SATNet.ipynb)\nand [Google Colab]()\n\n### Run them manually\n\n#### Getting the datasets\nThe [Sudoku dataset](https://powei.tw/sudoku.zip) and [Parity dataset](https://powei.tw/parity.zip) can be downloaded via\n\n```bash\nwget -cq powei.tw/sudoku.zip && unzip -qq sudoku.zip\nwget -cq powei.tw/parity.zip && unzip -qq parity.zip\n```\n#### Sudoku experiments (original, permuted, and visual)\n```bash\npython exps/sudoku.py\npython exps/sudoku.py --perm\npython exps/sudoku.py --mnist --batchSz=50\n```\n\n#### Parity experiments\n```bash\npython exps/parity.py --seq=20\npython exps/parity.py --seq=40\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/locuslab/SATNet", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "satnet", "package_url": "https://pypi.org/project/satnet/", "platform": "", "project_url": "https://pypi.org/project/satnet/", "project_urls": {"Homepage": "https://github.com/locuslab/SATNet"}, "release_url": "https://pypi.org/project/satnet/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Bridging deep learning and logical reasoning using a differentiable satisfiability solver", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SATNet \u2022 <a href=\"https://pypi.python.org/pypi/satnet\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba8c6512c9420a3848d7676b7da4080c1fad8ab8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7361746e65742e737667\"></a> <a href=\"https://colab.research.google.com/\" rel=\"nofollow\"><img alt=\"colab\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74d996556a82b2f1dd5252d2fd8bead60f9e9d21/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667\"></a> <a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></h1>\n<p><em>Bridging deep learning and logical reasoning using a differentiable satisfiability solver.</em></p>\n<p>This repository contains the source code to reproduce the experiments in the ICML 2019 paper <a href=\"https://icml.cc/Conferences/2019/Schedule?showEvent=3947\" rel=\"nofollow\">SATNet: Bridging deep learning and logical reasoning using a differentiable satisfiability solver</a> by <a href=\"https://powei.tw/\" rel=\"nofollow\">Po-Wei Wang</a>, <a href=\"https://priyadonti.com/\" rel=\"nofollow\">Priya L. Donti</a>, <a href=\"http://teamcore.usc.edu/people/bryanwilder/default.htm\" rel=\"nofollow\">Bryan Wilder</a>, and <a href=\"http://zicokolter.com/\" rel=\"nofollow\">J. Zico Kolter</a>.</p>\n<h2>What is SATNet</h2>\n<p>SATNet is a differentiable (smoothed) maximum satisfiability (MAXSAT) solver that can be integrated into the loop of larger deep learning systems. This (approximate) solver is based upon a fast coordinate descent approach to solving the semidefinite program (SDP) associated with the MAXSAT problem.</p>\n<h4>How SATNet works</h4>\n<p>A SATNet layer takes as input the discrete or probabilistic assignments of known MAXSAT variables, and outputs guesses for the assignments of unknown variables via a MAXSAT SDP relaxation with weights <em>S</em>. A schematic depicting the forward pass of this layer is shown below. To obtain the backward pass, we analytically differentiate through the SDP relaxation (see the paper for more details).</p>\n<p><img alt=\"Forward pass\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f5cbfa8041210a571c2a677559254ff9a2c4030/68747470733a2f2f6769746875622e636f6d2f6c6f6375736c61622f5341544e65742f626c6f622f6d61737465722f696d616765732f666f72776172645f706173732e706e67\"></p>\n<h4>Overview of experiments</h4>\n<p>We show that by integrating SATNet into end-to-end learning systems, we can learn the logical structure of challenging problems in a minimally supervised fashion. In particular, we show that we can:</p>\n<ul>\n<li>Learn the <strong>parity function</strong> using single-bit supervision (a traditionally hard task for deep networks)</li>\n<li>Learn how to play <strong>9\u00d79 Sudoku (original and permuted)</strong> solely from examples.</li>\n<li>Solve a <strong>\"visual Sudoku\"</strong> problem that maps images of Sudoku puzzles to their associated logical solutions. (A sample \"visual Sudoku\" input is shown below.)</li>\n</ul>\n<div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61a5ee3a2ff51088c6900820d41c25bc84364289/68747470733a2f2f6769746875622e636f6d2f6c6f6375736c61622f5341544e65742f626c6f622f6d61737465722f696d616765732f6d6e6973745f7375646f6b752e706e67\"></div>\n\n<h2>Installation</h2>\n<h3>Via pip</h3>\n<pre>pip install satnet\n</pre>\n<h3>From source</h3>\n<pre>git clone https://github.com/locuslab/SATNet\n<span class=\"nb\">cd</span> SATNet <span class=\"o\">&amp;&amp;</span> python setup.py install\n</pre>\n<h4>Package Dependencies</h4>\n<pre><code>conda install -c pytorch tqdm\n</code></pre>\n<h3>Via Docker image</h3>\n<pre><span class=\"nb\">cd</span> docker\nsh ./build.sh\nsh ./run.sh\n</pre>\n<h2>Running experiments</h2>\n<h3>Jupyter Notebook and Google Colab</h3>\n<p><a href=\"https://github.com/locuslab/SATNet/blob/master/notebooks/Learning%20and%20Solving%20Sudoku%20via%20SATNet.ipynb\" rel=\"nofollow\">Jupyter notebook</a>\nand <a href=\"\" rel=\"nofollow\">Google Colab</a></p>\n<h3>Run them manually</h3>\n<h4>Getting the datasets</h4>\n<p>The <a href=\"https://powei.tw/sudoku.zip\" rel=\"nofollow\">Sudoku dataset</a> and <a href=\"https://powei.tw/parity.zip\" rel=\"nofollow\">Parity dataset</a> can be downloaded via</p>\n<pre>wget -cq powei.tw/sudoku.zip <span class=\"o\">&amp;&amp;</span> unzip -qq sudoku.zip\nwget -cq powei.tw/parity.zip <span class=\"o\">&amp;&amp;</span> unzip -qq parity.zip\n</pre>\n<h4>Sudoku experiments (original, permuted, and visual)</h4>\n<pre>python exps/sudoku.py\npython exps/sudoku.py --perm\npython exps/sudoku.py --mnist --batchSz<span class=\"o\">=</span><span class=\"m\">50</span>\n</pre>\n<h4>Parity experiments</h4>\n<pre>python exps/parity.py --seq<span class=\"o\">=</span><span class=\"m\">20</span>\npython exps/parity.py --seq<span class=\"o\">=</span><span class=\"m\">40</span>\n</pre>\n\n          </div>"}, "last_serial": 5318059, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a1e63a490c78741dc7bb88c32cf95bc9", "sha256": "9f4c3054fba8db3a7b005c9e08f7a1b56ec0e71777733812ce9a39c800fe71a7"}, "downloads": -1, "filename": "satnet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a1e63a490c78741dc7bb88c32cf95bc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8700, "upload_time": "2019-05-25T12:11:24", "upload_time_iso_8601": "2019-05-25T12:11:24.796900Z", "url": "https://files.pythonhosted.org/packages/9e/ff/f9a1f44f736c49ea33282f94ee62d2cc2f4d6b83ddce543239fe9f5866dd/satnet-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3ef776138b8874226930c0fce4c498fc", "sha256": "9de8256e703ed84d49a6599982c7cdaa586726ba5d8baa801df9845056f06e59"}, "downloads": -1, "filename": "satnet-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3ef776138b8874226930c0fce4c498fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8764, "upload_time": "2019-05-25T12:18:53", "upload_time_iso_8601": "2019-05-25T12:18:53.336647Z", "url": "https://files.pythonhosted.org/packages/69/76/9ff73d02682533192595ac2580584feaeb802135d91f5c240a222c2d6b25/satnet-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "84daddf70ff6c9fe5a79a303ccca9388", "sha256": "093606c101d8ee3f4ccc56750cc7841691bfe2d1c89782152eae4008c481397c"}, "downloads": -1, "filename": "satnet-0.1.2.tar.gz", "has_sig": false, "md5_digest": "84daddf70ff6c9fe5a79a303ccca9388", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9835, "upload_time": "2019-05-26T06:24:08", "upload_time_iso_8601": "2019-05-26T06:24:08.026205Z", "url": "https://files.pythonhosted.org/packages/e5/2a/bdd7ae5a6f2890169cf11d2dd1b1b4ade9a226c6e15cf8a489f99c7e8e33/satnet-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "84daddf70ff6c9fe5a79a303ccca9388", "sha256": "093606c101d8ee3f4ccc56750cc7841691bfe2d1c89782152eae4008c481397c"}, "downloads": -1, "filename": "satnet-0.1.2.tar.gz", "has_sig": false, "md5_digest": "84daddf70ff6c9fe5a79a303ccca9388", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9835, "upload_time": "2019-05-26T06:24:08", "upload_time_iso_8601": "2019-05-26T06:24:08.026205Z", "url": "https://files.pythonhosted.org/packages/e5/2a/bdd7ae5a6f2890169cf11d2dd1b1b4ade9a226c6e15cf8a489f99c7e8e33/satnet-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:29 2020"}