{"info": {"author": "Matt Good", "author_email": "matt@matt-good.net", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Flask-Fanstatic\n===============\n\nFlask integration for the Fanstatic resource publishing system.\n\nhttp://www.fanstatic.org/\n\n.. image:: https://api.travis-ci.org/mgood/flask-fanstatic.png\n   :target: https://travis-ci.org/mgood/flask-fanstatic\n\n\nOverview\n--------\n\nFanstatic is a flexible system for managing the static resources (CSS and\nJavascript) used by your web application.  This extension provides simple\nintegration between Fanstatic and Flask.\n\nAdding static resources to your application becomes as simple as installing them\nwith pip::\n\n  pip install js.jquery\n\nand ``need``-ing them in your template::\n\n  {{ g.fanstatic.needs('js.jquery:jquery') }}\n\n\nUsage\n-----\n\nTo start using Flask-Fanstatic, import and initialize the extension for your\nFlask application::\n\n  from flask import Flask\n  from flask_fanstatic import Fanstatic\n\n  app = Flask(__name__)\n  fanstatic = Fanstatic(app)\n\nThen, in your base template, add the ``top`` and ``bottom`` resources to include\nthem in your HTML::\n\n  <head>\n    {{ g.fanstatic.top }}\n  </head>\n\n  <body>\n    ...content...\n\n    {{ g.fanstatic.bottom }}\n  </body>\n\nYou can declare resource to include, by using the ``needs()`` helper to declare\nresources needed by your template::\n\n  {{- g.fanstatic.needs('js.jquery:jquery') -}}\n  {% extends 'layout.html' %}\n  ...\n\n.. note:: The example above uses dashes to tell Jinja to strip the extra whitespace such\n   as the newline after the expression.  See the Jinja docs for more details:\n   http://jinja.pocoo.org/docs/templates/#whitespace-control\n\nFanstatic will use the ``top`` and ``bottom`` helpers above to include the CSS\nor JavaScript resources ``need``-ed automatically.\n\nYou can also ``need`` multiple resources::\n\n  {{ g.fanstatic.needs(\n    'js.jquery:jquery',\n    'js.handlebars:handlebars'\n  ) }}\n\nThe ``needs()`` method takes any number of strings, in the form\n``<module>:<resource>``.  You can alternatively import the resources from your\ncode and require them like::\n\n  from js.jquery import jquery\n\n  @app.route('/')\n  def index():\n    jquery.need()\n    return render_template('index.html')\n\n\nApplication resources\n---------------------\n\nFlask-Fanstatic also makes it easy to add your application's own static files as\nFanstatic resources.\n\nYou can use the ``resource()`` helper to declare a resource in your\napplication's ``'static'`` folder::\n\n  fanstatic.resource('js/app.js', name='app_js', depends=[jquery])\n\nTo include the resource, just use its ``name`` to require it in your template::\n\n  {{ g.fanstatic.needs('app_js') }}\n\nYou can also declare named groups of resources::\n\n  from js.jquery import jquery\n  fanstatic.resource('css/app.js', name='app_js')\n\n  # there are 3 ways to specify a group resource item:\n  fanstatic.group('app_resources', [\n    # with an imported resource:\n    jquery,\n\n    # with the name of an internal resource:\n    'app_js',\n\n    # with an inline resource:\n    fanstatic.resource('css/app.css'),\n  ])\n\nGroups are included in the same way from the template::\n\n  {{ g.fanstatic.needs('app_resources') }}\n\n\nBlueprint resources\n-------------------\n\nBlueprints can also use Fanstatic in almost the same way as application\nresources.  Start by initializing a ``Fanstatic()`` object for your blueprint,\nand declare its resources::\n\n  bluep = Blueprint('bluep', __name__, static_folder='static')\n  fanstatic = Fanstatic(bluep)\n  fanstatic.resource('bluep.css', name='bluep_css')\n\nIn the template, reference resources from the current blueprint as ``.<name>``::\n\n  {{ g.fanstatic.needs('.bluep_css') }}\n\nOr explicitly provide the name of a blueprint to include a resource from a\nspecific blueprint::\n\n  {{ g.fanstatic.needs('bluep.bluep_css') }}\n\n\nChanges\n=======\n\n0.2.0 (2014-01-04)\n------------------\n\nSupport for Fanstatic 1.0\n\n\n0.1.1 (2013-05-08)\n------------------\n\n* fix for apps with a url prefix\n\n\n0.1.0 (2012-11-19)\n------------------\n\nInitial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mgood/flask-fanstatic", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "Flask-Fanstatic", "package_url": "https://pypi.org/project/Flask-Fanstatic/", "platform": "any", "project_url": "https://pypi.org/project/Flask-Fanstatic/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mgood/flask-fanstatic"}, "release_url": "https://pypi.org/project/Flask-Fanstatic/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Flask integration for the Fanstatic resource publishing system.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"flask-fanstatic\">\n<h2>Flask-Fanstatic</h2>\n<p>Flask integration for the Fanstatic resource publishing system.</p>\n<p><a href=\"http://www.fanstatic.org/\" rel=\"nofollow\">http://www.fanstatic.org/</a></p>\n<a href=\"https://travis-ci.org/mgood/flask-fanstatic\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/mgood/flask-fanstatic.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/761846bc1b3bb79f0c17c2d0bc04f806bb77183b/68747470733a2f2f6170692e7472617669732d63692e6f72672f6d676f6f642f666c61736b2d66616e7374617469632e706e67\"></a>\n<div id=\"overview\">\n<h3>Overview</h3>\n<p>Fanstatic is a flexible system for managing the static resources (CSS and\nJavascript) used by your web application.  This extension provides simple\nintegration between Fanstatic and Flask.</p>\n<p>Adding static resources to your application becomes as simple as installing them\nwith pip:</p>\n<pre>pip install js.jquery\n</pre>\n<p>and <tt>need</tt>-ing them in your template:</p>\n<pre>{{ g.fanstatic.needs('js.jquery:jquery') }}\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To start using Flask-Fanstatic, import and initialize the extension for your\nFlask application:</p>\n<pre>from flask import Flask\nfrom flask_fanstatic import Fanstatic\n\napp = Flask(__name__)\nfanstatic = Fanstatic(app)\n</pre>\n<p>Then, in your base template, add the <tt>top</tt> and <tt>bottom</tt> resources to include\nthem in your HTML:</p>\n<pre>&lt;head&gt;\n  {{ g.fanstatic.top }}\n&lt;/head&gt;\n\n&lt;body&gt;\n  ...content...\n\n  {{ g.fanstatic.bottom }}\n&lt;/body&gt;\n</pre>\n<p>You can declare resource to include, by using the <tt>needs()</tt> helper to declare\nresources needed by your template:</p>\n<pre>{{- g.fanstatic.needs('js.jquery:jquery') -}}\n{% extends 'layout.html' %}\n...\n</pre>\n<div>\n<p>Note</p>\n<p>The example above uses dashes to tell Jinja to strip the extra whitespace such\nas the newline after the expression.  See the Jinja docs for more details:\n<a href=\"http://jinja.pocoo.org/docs/templates/#whitespace-control\" rel=\"nofollow\">http://jinja.pocoo.org/docs/templates/#whitespace-control</a></p>\n</div>\n<p>Fanstatic will use the <tt>top</tt> and <tt>bottom</tt> helpers above to include the CSS\nor JavaScript resources <tt>need</tt>-ed automatically.</p>\n<p>You can also <tt>need</tt> multiple resources:</p>\n<pre>{{ g.fanstatic.needs(\n  'js.jquery:jquery',\n  'js.handlebars:handlebars'\n) }}\n</pre>\n<p>The <tt>needs()</tt> method takes any number of strings, in the form\n<tt><span class=\"pre\">&lt;module&gt;:&lt;resource&gt;</span></tt>.  You can alternatively import the resources from your\ncode and require them like:</p>\n<pre>from js.jquery import jquery\n\n@app.route('/')\ndef index():\n  jquery.need()\n  return render_template('index.html')\n</pre>\n</div>\n<div id=\"application-resources\">\n<h3>Application resources</h3>\n<p>Flask-Fanstatic also makes it easy to add your application\u2019s own static files as\nFanstatic resources.</p>\n<p>You can use the <tt>resource()</tt> helper to declare a resource in your\napplication\u2019s <tt>'static'</tt> folder:</p>\n<pre>fanstatic.resource('js/app.js', name='app_js', depends=[jquery])\n</pre>\n<p>To include the resource, just use its <tt>name</tt> to require it in your template:</p>\n<pre>{{ g.fanstatic.needs('app_js') }}\n</pre>\n<p>You can also declare named groups of resources:</p>\n<pre>from js.jquery import jquery\nfanstatic.resource('css/app.js', name='app_js')\n\n# there are 3 ways to specify a group resource item:\nfanstatic.group('app_resources', [\n  # with an imported resource:\n  jquery,\n\n  # with the name of an internal resource:\n  'app_js',\n\n  # with an inline resource:\n  fanstatic.resource('css/app.css'),\n])\n</pre>\n<p>Groups are included in the same way from the template:</p>\n<pre>{{ g.fanstatic.needs('app_resources') }}\n</pre>\n</div>\n<div id=\"blueprint-resources\">\n<h3>Blueprint resources</h3>\n<p>Blueprints can also use Fanstatic in almost the same way as application\nresources.  Start by initializing a <tt>Fanstatic()</tt> object for your blueprint,\nand declare its resources:</p>\n<pre>bluep = Blueprint('bluep', __name__, static_folder='static')\nfanstatic = Fanstatic(bluep)\nfanstatic.resource('bluep.css', name='bluep_css')\n</pre>\n<p>In the template, reference resources from the current blueprint as <tt>.&lt;name&gt;</tt>:</p>\n<pre>{{ g.fanstatic.needs('.bluep_css') }}\n</pre>\n<p>Or explicitly provide the name of a blueprint to include a resource from a\nspecific blueprint:</p>\n<pre>{{ g.fanstatic.needs('bluep.bluep_css') }}\n</pre>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>0.2.0 (2014-01-04)</h3>\n<p>Support for Fanstatic 1.0</p>\n</div>\n<div id=\"id2\">\n<h3>0.1.1 (2013-05-08)</h3>\n<ul>\n<li>fix for apps with a url prefix</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0 (2012-11-19)</h3>\n<p>Initial release</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 960757, "releases": {"0.1": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "6447964ea6c04ec781e39864f830b775", "sha256": "1ef7375a52e9fa635f03c9e07ac67c6748282480cb44eab22a2eb4eb5b819b2f"}, "downloads": -1, "filename": "Flask-Fanstatic-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6447964ea6c04ec781e39864f830b775", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4638, "upload_time": "2012-11-19T22:36:17", "upload_time_iso_8601": "2012-11-19T22:36:17.994688Z", "url": "https://files.pythonhosted.org/packages/27/0e/ef496afd5fe096c9258e12869e29197396ac46396cc94ee383d6ec7fe377/Flask-Fanstatic-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6085d0ffc11e90b19e83fdaffa0a1335", "sha256": "7f577451e1ca6c05d2769bedf1b2011c99ced022793a1692dbdc98501cc9aa64"}, "downloads": -1, "filename": "Flask-Fanstatic-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6085d0ffc11e90b19e83fdaffa0a1335", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6466, "upload_time": "2013-05-08T20:29:18", "upload_time_iso_8601": "2013-05-08T20:29:18.457460Z", "url": "https://files.pythonhosted.org/packages/51/b9/4d9c45fb175a5add233a309d334d90c106551db563189655f9eee992c0f6/Flask-Fanstatic-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "24682497166583abf1cc53b6ef13be24", "sha256": "e819a2013e4c3a398ba1dd76670d9e83d35b7f2aa67539c5928fc49f5c69b4f3"}, "downloads": -1, "filename": "Flask-Fanstatic-0.2.0.tar.gz", "has_sig": false, "md5_digest": "24682497166583abf1cc53b6ef13be24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5169, "upload_time": "2014-01-04T22:54:49", "upload_time_iso_8601": "2014-01-04T22:54:49.607287Z", "url": "https://files.pythonhosted.org/packages/17/f2/24826869906c38d751de616c983ccfab96472d4f39d302c3dff7fc7133ed/Flask-Fanstatic-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "24682497166583abf1cc53b6ef13be24", "sha256": "e819a2013e4c3a398ba1dd76670d9e83d35b7f2aa67539c5928fc49f5c69b4f3"}, "downloads": -1, "filename": "Flask-Fanstatic-0.2.0.tar.gz", "has_sig": false, "md5_digest": "24682497166583abf1cc53b6ef13be24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5169, "upload_time": "2014-01-04T22:54:49", "upload_time_iso_8601": "2014-01-04T22:54:49.607287Z", "url": "https://files.pythonhosted.org/packages/17/f2/24826869906c38d751de616c983ccfab96472d4f39d302c3dff7fc7133ed/Flask-Fanstatic-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:53 2020"}