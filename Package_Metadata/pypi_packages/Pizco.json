{"info": {"author": "Hernan E. Grecco", "author_email": "hernan.grecco@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries"], "description": "Pizco: a Python library to communicate with remote objects\n==========================================================\n\nPizco is Python module/package that allows python objects to communicate.\nObjects can be exposed to other process in the same computer or over the network,\nallowing clear separation of concerns, resources and permissions.\n\nPizco not only support calling methods from remote objects but also\naccessing their attributes, dictionary attributes and properties. Most importantly,\nusing a Qt-like (and Qt compatible!) signal and slot mechanism you can easily\nregister notifications.\n\nAs ZMQ is used as the transport layer, communication is fast and efficient,\nand different protocols are supported. It has a complete test coverage.\nIt runs in Python 3.2+ and requires PyZMQ_. It is licensed under BSD.\n\n\nDesign principles\n-----------------\n\n- Reusable Agent class as communicating object for both Proxy and Server.\n\n- ZMQ REP/REQ to handle sync access to objects.\n\n- ZMQ PUB/SUB for notifications and async operations.\n\n- PyQt-like signal and slots callbacks, compatible with PyQt.\n\n- Transparent handling of methods that return concurrent.Futures.\n\n- *Soon*: Asynchronous and batched operation on remote objects.\n\n- Small codebase: small and easy to maintain codebase with a flat hierarchy.\n  It is a single stand-alone module that can be installed as a package or added\n  side by side to your project.\n\n- *Soon*: Python 2 and 3: A single codebase that runs unchanged in Python 2.6+ and Python 3.0+.\n\n\n.. _PyZMQ: https://github.com/zeromq/pyzmq\n.. _Pyro: http://packages.python.org/Pyro4/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hgrecco/pizco", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "Pizco", "package_url": "https://pypi.org/project/Pizco/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Pizco/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/hgrecco/pizco"}, "release_url": "https://pypi.org/project/Pizco/0.1/", "requires_dist": null, "requires_python": null, "summary": "Python remote objects with ZMQ", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pizco is Python module/package that allows python objects to communicate.\nObjects can be exposed to other process in the same computer or over the network,\nallowing clear separation of concerns, resources and permissions.</p>\n<p>Pizco not only support calling methods from remote objects but also\naccessing their attributes, dictionary attributes and properties. Most importantly,\nusing a Qt-like (and Qt compatible!) signal and slot mechanism you can easily\nregister notifications.</p>\n<p>As ZMQ is used as the transport layer, communication is fast and efficient,\nand different protocols are supported. It has a complete test coverage.\nIt runs in Python 3.2+ and requires <a href=\"https://github.com/zeromq/pyzmq\" rel=\"nofollow\">PyZMQ</a>. It is licensed under BSD.</p>\n<div id=\"design-principles\">\n<h2>Design principles</h2>\n<ul>\n<li>Reusable Agent class as communicating object for both Proxy and Server.</li>\n<li>ZMQ REP/REQ to handle sync access to objects.</li>\n<li>ZMQ PUB/SUB for notifications and async operations.</li>\n<li>PyQt-like signal and slots callbacks, compatible with PyQt.</li>\n<li>Transparent handling of methods that return concurrent.Futures.</li>\n<li><em>Soon</em>: Asynchronous and batched operation on remote objects.</li>\n<li>Small codebase: small and easy to maintain codebase with a flat hierarchy.\nIt is a single stand-alone module that can be installed as a package or added\nside by side to your project.</li>\n<li><em>Soon</em>: Python 2 and 3: A single codebase that runs unchanged in Python 2.6+ and Python 3.0+.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 784919, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d36b4f2d6793bba3d9af73bfd29f799c", "sha256": "d89c8c50990b785c046beeeded3a808d0ed82f111937eff505fe3555ad957fc1"}, "downloads": -1, "filename": "Pizco-0.1.tar.gz", "has_sig": false, "md5_digest": "d36b4f2d6793bba3d9af73bfd29f799c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42943, "upload_time": "2012-11-21T19:44:40", "upload_time_iso_8601": "2012-11-21T19:44:40.776544Z", "url": "https://files.pythonhosted.org/packages/9d/d3/8fcdba29dfb3ba55ad32bd310f751bf84e19d76e8f06623cd0b44e548c29/Pizco-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d36b4f2d6793bba3d9af73bfd29f799c", "sha256": "d89c8c50990b785c046beeeded3a808d0ed82f111937eff505fe3555ad957fc1"}, "downloads": -1, "filename": "Pizco-0.1.tar.gz", "has_sig": false, "md5_digest": "d36b4f2d6793bba3d9af73bfd29f799c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42943, "upload_time": "2012-11-21T19:44:40", "upload_time_iso_8601": "2012-11-21T19:44:40.776544Z", "url": "https://files.pythonhosted.org/packages/9d/d3/8fcdba29dfb3ba55ad32bd310f751bf84e19d76e8f06623cd0b44e548c29/Pizco-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:52 2020"}