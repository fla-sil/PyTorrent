{"info": {"author": "Conrad Dean", "author_email": "conrad.p.dean@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Database :: Front-Ends"], "description": "BigQuery dialect for SQLAlchemy\n-------------------------------\n\nBigQuery implements a DSL that is similar to SQL with a few quirks:\n\n1. It has a \"group each by\" hint for grouping over large amounts of data\n2. You need to use the \"join each ... on\" form when joining on a table larger than a small number of megabytes.\n3. You can't quote columns, but you can quote tables. But probably not table aliasess.\n4. Because you can't quote columns, you are limited to colums with no spaces, only alpha-numeric characters with underscores, and you can only start a column with a letter or underscore\n\n\nThe first two issues (the non-standard \"each\" modifier for grouping and joining) has not been addressed yet.  BigQuery pushes the responsibility of when to recognize a table is too big for certain operations, and shifts burden onto you when you want to use those modifiers.  Sometimes you need them, sometimes you don't.  Leaving this as an exercise to the user to just string replace those out of what this dialect returns.\n\n\nUsage\n=====\n\nThere currently isn't support for using sqlalchemy to connect to\nBigQuery.  Currently there's only support for generating SQL to send\nin a regular service call.\n\n\nTo Install::\n\n    pip install sqlalchemy-bigquery\n\nUsage Example::\n\n    >>> import sqlalchemy.sql as sql\n    >>>\n    >>> from sqlalchemy import func\n    >>> import sqlalchemy_bigquery.base as bq\n    >>>\n    >>>\n    >>> country = sql.column(\"country\")\n    >>> fruit_type = sql.column(\"fruit_type\")\n    >>> calories = sql.column(\"calories\")\n    >>> total_usa = func.sum(\n    ...     sql.case(\n    ...         [(country == \"usa\", 1)],\n    ...         else_=0\n    ...     )\n    ... ).label(\"Total_in_USA\")\n    >>> total_japan = func.sum(\n    ...     sql.case(\n    ...         [(country == \"japan\", 1)],\n    ...         else_=0\n    ...     )\n    ... ).label(\"Total_in_Japan\")\n    >>> s = sql.select([\n    ...     fruit_type,\n    ...     total_usa,\n    ...     total_japan,\n    ... ]).select_from(sql.table(\"fruit.table\")\n    ... ).group_by(\n    ...     fruit_type\n    ... ).compile(\n    ...     compile_kwargs={\"literal_binds\": True},\n    ...     dialect=bq.BQDialect()\n    ... )\n    >>> print str(s)\n    SELECT fruit_type, sum(CASE WHEN (country = 'usa') THEN 1 ELSE 0 END) AS Total_in_USA, sum(CASE WHEN (country = 'japan') THEN 1 ELSE 0 END) AS Total_in_Japan\n    FROM [fruit.table] GROUP BY fruit_type", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "SQLAlchemy Google BigQuery", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sqlalchemy_bigquery", "package_url": "https://pypi.org/project/sqlalchemy_bigquery/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sqlalchemy_bigquery/", "project_urls": null, "release_url": "https://pypi.org/project/sqlalchemy_bigquery/0.0.7/", "requires_dist": null, "requires_python": "", "summary": "BigQuery for SQLAlchemy", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>BigQuery implements a DSL that is similar to SQL with a few quirks:</p>\n<ol>\n<li>It has a \u201cgroup each by\u201d hint for grouping over large amounts of data</li>\n<li>You need to use the \u201cjoin each \u2026 on\u201d form when joining on a table larger than a small number of megabytes.</li>\n<li>You can\u2019t quote columns, but you can quote tables. But probably not table aliasess.</li>\n<li>Because you can\u2019t quote columns, you are limited to colums with no spaces, only alpha-numeric characters with underscores, and you can only start a column with a letter or underscore</li>\n</ol>\n<p>The first two issues (the non-standard \u201ceach\u201d modifier for grouping and joining) has not been addressed yet.  BigQuery pushes the responsibility of when to recognize a table is too big for certain operations, and shifts burden onto you when you want to use those modifiers.  Sometimes you need them, sometimes you don\u2019t.  Leaving this as an exercise to the user to just string replace those out of what this dialect returns.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>There currently isn\u2019t support for using sqlalchemy to connect to\nBigQuery.  Currently there\u2019s only support for generating SQL to send\nin a regular service call.</p>\n<p>To Install:</p>\n<pre>pip install sqlalchemy-bigquery\n</pre>\n<p>Usage Example:</p>\n<pre>&gt;&gt;&gt; import sqlalchemy.sql as sql\n&gt;&gt;&gt;\n&gt;&gt;&gt; from sqlalchemy import func\n&gt;&gt;&gt; import sqlalchemy_bigquery.base as bq\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; country = sql.column(\"country\")\n&gt;&gt;&gt; fruit_type = sql.column(\"fruit_type\")\n&gt;&gt;&gt; calories = sql.column(\"calories\")\n&gt;&gt;&gt; total_usa = func.sum(\n...     sql.case(\n...         [(country == \"usa\", 1)],\n...         else_=0\n...     )\n... ).label(\"Total_in_USA\")\n&gt;&gt;&gt; total_japan = func.sum(\n...     sql.case(\n...         [(country == \"japan\", 1)],\n...         else_=0\n...     )\n... ).label(\"Total_in_Japan\")\n&gt;&gt;&gt; s = sql.select([\n...     fruit_type,\n...     total_usa,\n...     total_japan,\n... ]).select_from(sql.table(\"fruit.table\")\n... ).group_by(\n...     fruit_type\n... ).compile(\n...     compile_kwargs={\"literal_binds\": True},\n...     dialect=bq.BQDialect()\n... )\n&gt;&gt;&gt; print str(s)\nSELECT fruit_type, sum(CASE WHEN (country = 'usa') THEN 1 ELSE 0 END) AS Total_in_USA, sum(CASE WHEN (country = 'japan') THEN 1 ELSE 0 END) AS Total_in_Japan\nFROM [fruit.table] GROUP BY fruit_type\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1797006, "releases": {"0.0.1adev": [], "0.0.1dev": [{"comment_text": "", "digests": {"md5": "bed9eb5bfee81732729baedc37e4a6f8", "sha256": "47458f85dc51e57debaca599846cccd826e0854f8093fd0388a8fcb78de7bc41"}, "downloads": -1, "filename": "sqlalchemy_bigquery-0.0.1dev.tar.gz", "has_sig": false, "md5_digest": "bed9eb5bfee81732729baedc37e4a6f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3383, "upload_time": "2015-03-30T14:15:43", "upload_time_iso_8601": "2015-03-30T14:15:43.331119Z", "url": "https://files.pythonhosted.org/packages/3c/ea/29982f69b793ce5b4294292ca99de0de65e6e43351334ce4bdf5b45c492c/sqlalchemy_bigquery-0.0.1dev.tar.gz", "yanked": false}], "0.0.2dev": [{"comment_text": "", "digests": {"md5": "aa02ff607e361a3adba60c457249c63f", "sha256": "ddc0b22ec6d936f2a5f7e4da93dce525e53d4292bc9d10b903193f3c6b8bb20b"}, "downloads": -1, "filename": "sqlalchemy_bigquery-0.0.2dev.tar.gz", "has_sig": false, "md5_digest": "aa02ff607e361a3adba60c457249c63f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3550, "upload_time": "2015-03-30T14:36:17", "upload_time_iso_8601": "2015-03-30T14:36:17.850256Z", "url": "https://files.pythonhosted.org/packages/bb/2b/9450bd99dffc4f5030b59c229afaa454543418a217dad87b5b3706812abc/sqlalchemy_bigquery-0.0.2dev.tar.gz", "yanked": false}], "0.0.3": [], "0.0.4": [{"comment_text": "", "digests": {"md5": "8ee0b6bf41fc673b93d72102775506cf", "sha256": "ec9462a2e06eb43b3d0088f3ecb961296490f0af52f8dfd2802ff539ea98f485"}, "downloads": -1, "filename": "sqlalchemy_bigquery-0.0.4.tar.gz", "has_sig": false, "md5_digest": "8ee0b6bf41fc673b93d72102775506cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3853, "upload_time": "2015-04-02T17:27:42", "upload_time_iso_8601": "2015-04-02T17:27:42.642813Z", "url": "https://files.pythonhosted.org/packages/50/7e/83f43b48bf0d9ac25990c65f059a0f0c65c236b3e8e9b088604d238ce984/sqlalchemy_bigquery-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "df8c69965ea7acca8569179cf08f48eb", "sha256": "dd0b3cc39b4dfa1fdad3dbd3eead89d05e3b122e39edd85dbc597c711cbefeab"}, "downloads": -1, "filename": "sqlalchemy_bigquery-0.0.5.tar.gz", "has_sig": false, "md5_digest": "df8c69965ea7acca8569179cf08f48eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4001, "upload_time": "2015-04-02T18:37:13", "upload_time_iso_8601": "2015-04-02T18:37:13.455569Z", "url": "https://files.pythonhosted.org/packages/67/54/916e0288099db611ebabbc4520465839d27f6a9cff414ce0c02d046ea0cb/sqlalchemy_bigquery-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "077a138de561c033da7656cdeab66e33", "sha256": "8785fd7cf75464cb0b6dafd14dc70f70fb5bef77253eb89a23b435f18c518686"}, "downloads": -1, "filename": "sqlalchemy_bigquery-0.0.6.tar.gz", "has_sig": false, "md5_digest": "077a138de561c033da7656cdeab66e33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4913, "upload_time": "2015-09-02T20:26:10", "upload_time_iso_8601": "2015-09-02T20:26:10.158047Z", "url": "https://files.pythonhosted.org/packages/e0/a3/41421715cdc1db368698ae639aee8d96ee1b9eb0332ebb0698ee0a8e1b0b/sqlalchemy_bigquery-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "5138141c336792687c55c6753ec07c34", "sha256": "00a23947a3782912d91fe614564c29cdba50bbe58d2853ab7b259f7786b65a93"}, "downloads": -1, "filename": "sqlalchemy_bigquery-0.0.7.tar.gz", "has_sig": false, "md5_digest": "5138141c336792687c55c6753ec07c34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5103, "upload_time": "2015-11-02T13:04:09", "upload_time_iso_8601": "2015-11-02T13:04:09.278450Z", "url": "https://files.pythonhosted.org/packages/19/6e/110096fca1cd30e57c9b0884152c15905cb4cad532a851d6ccb295040528/sqlalchemy_bigquery-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5138141c336792687c55c6753ec07c34", "sha256": "00a23947a3782912d91fe614564c29cdba50bbe58d2853ab7b259f7786b65a93"}, "downloads": -1, "filename": "sqlalchemy_bigquery-0.0.7.tar.gz", "has_sig": false, "md5_digest": "5138141c336792687c55c6753ec07c34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5103, "upload_time": "2015-11-02T13:04:09", "upload_time_iso_8601": "2015-11-02T13:04:09.278450Z", "url": "https://files.pythonhosted.org/packages/19/6e/110096fca1cd30e57c9b0884152c15905cb4cad532a851d6ccb295040528/sqlalchemy_bigquery-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:00 2020"}