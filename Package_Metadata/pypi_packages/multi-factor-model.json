{"info": {"author": "Yili Peng", "author_email": "yili_peng@outlook.com", "bugtrack_url": null, "classifiers": [], "description": "Multi Factor Model\n==================\n\nThis project is to merge alpha factors into one factor with machine\nlearning techniques.\n\nDependencies\n------------\n\n-  python 3.5\n-  pandas 0.22.0\n-  numpy 1.14.3\n-  pickle\n-  sklearn 0.19.1\n-  databox\n\nExample\n-------\n\nPreprocessing data\n------------------\n\nFirst create a databox object with original factors and market info.\nMore can be found in project ``databox``\n\n.. code:: bash\n\n   from databox import databox\n   db=databox()\\\n       .load_indestry(ind)\\\n       .load_indexWeight(ind_weight)\\\n       .load_suspend(sus)\\\n       .load_adjPrice(price)\\\n       .set_lag(freq='d',day_lag=1)\n   for fac_name,fac_df in factors_dictionary.items():\n       db.add_factor(fac_name,fac_df)\n   db.align_data()\\\n     .factor_ind_neutral()\\\n     .factor_size_neutral()\n\nThen custmize your data for model training\n\n.. code:: bash\n\n   sp=sample_pipeline()\\\n       .set_fw_return_n(1)\\\n       .set_sample_n(1)\\\n       .factor_rank()\\\n       .factor_zscore()\\\n       .fw_return_ind_neutral()\\\n       .fw_return_rank()\\\n       .fw_return_I(thresh=2000)\n\nNote all returns are multiplied by 100 for better modeling.\n\n| Options:\n| ``set_fw_return`` is to set the number of days to claculate forward\n  return;\n| ``set_sample_n`` is to set how many days to use in one sample;\n| ``factor_rank`` is to rank all factors in each sample;\n| ``factor_zscore`` is to normalize factors in each sample;\n| ``fw_return_ind_neutral`` is to neutralize returns by industry. If the\n  portfolio have industry constrain, this is likely to improve the\n  training result;\n| ``fw_return_rank`` is to convert returns to their rank in each sample;\n| ``fw_return_I`` is to convert returns as 0 or 1, indicating whether\n  the return value is geater than or equal to the threshold;\n\nNow create sample as\n\n.. code:: bash\n\n   X_train,y_train=sp.train_set(db)\n   X_test,y_test=sp.test_set(db)\n   X_test_all=sp.test_X(db)\n\nModeling\n--------\n\nClassification Method\n\n.. code:: bash\n\n   from sklearn.ensemble import RandomForestClassifier\n   clf=RandomForestClassifier()\n   tn,tt,ml=clf_model(clf,X_train,y_train,X_test,y_test)\n\nWhere ``y`` can be 0/1 or float and result ``tn`` (train) and ``tt``\n(test) would be different depending on this. If ``clf`` is a tree based\nmodel, ``ml`` would be feature importance. If ``clf`` is a linear model,\n``ml`` would be coeffient.\n\nWe can also creat a model by combining several models.\n\n.. code:: bash\n\n   from sklearn.ensemble import RandomForestClassifier\n   from sklearn.linear_model import LogisticRegression\n   from sklearn.svm import SVC\n   clf1=RandomForestClassifier()\n   clf2=LogisticRegression()\n   clf3=SVC()\n   from multi_factor_model import combine_clf_models\n   CLF=combine_clf_models()\\\n       .add_clf('rf',clf1)\\\n       .add_clf('lr',clf2)\\\n       .add_clf('svc',clf3,weight=2)#default weight is 1\n   tn,tt,ml=clf_model(CLF,X_train,y_train,X_test,y_test)    \n\nRegression Method Same as Classification method with ``reg_model`` as\nthe replacement of ``clf_model`` and ``combine_reg_models`` as that of\n``combine_clf_models``\n\nCombined Factor\n---------------\n\n.. code:: bash\n\n   import pandas as pd\n   value=CLF.predict_proba(X_test_all)\n   factor=pd.Series(value[:,1],index=X_test_all.index)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "multi-factor-model", "package_url": "https://pypi.org/project/multi-factor-model/", "platform": "", "project_url": "https://pypi.org/project/multi-factor-model/", "project_urls": null, "release_url": "https://pypi.org/project/multi-factor-model/0.0.0a5/", "requires_dist": null, "requires_python": "", "summary": "factor model", "version": "0.0.0a5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project is to merge alpha factors into one factor with machine\nlearning techniques.</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>python 3.5</li>\n<li>pandas 0.22.0</li>\n<li>numpy 1.14.3</li>\n<li>pickle</li>\n<li>sklearn 0.19.1</li>\n<li>databox</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n</div>\n<div id=\"preprocessing-data\">\n<h2>Preprocessing data</h2>\n<p>First create a databox object with original factors and market info.\nMore can be found in project <tt>databox</tt></p>\n<pre>from databox import databox\n<span class=\"nv\">db</span><span class=\"o\">=</span>databox<span class=\"o\">()</span><span class=\"se\">\\\n</span>    .load_indestry<span class=\"o\">(</span>ind<span class=\"o\">)</span><span class=\"se\">\\\n</span>    .load_indexWeight<span class=\"o\">(</span>ind_weight<span class=\"o\">)</span><span class=\"se\">\\\n</span>    .load_suspend<span class=\"o\">(</span>sus<span class=\"o\">)</span><span class=\"se\">\\\n</span>    .load_adjPrice<span class=\"o\">(</span>price<span class=\"o\">)</span><span class=\"se\">\\\n</span>    .set_lag<span class=\"o\">(</span><span class=\"nv\">freq</span><span class=\"o\">=</span><span class=\"s1\">'d'</span>,day_lag<span class=\"o\">=</span><span class=\"m\">1</span><span class=\"o\">)</span>\n<span class=\"k\">for</span> fac_name,fac_df in factors_dictionary.items<span class=\"o\">()</span>:\n    db.add_factor<span class=\"o\">(</span>fac_name,fac_df<span class=\"o\">)</span>\ndb.align_data<span class=\"o\">()</span><span class=\"se\">\\\n</span>  .factor_ind_neutral<span class=\"o\">()</span><span class=\"se\">\\\n</span>  .factor_size_neutral<span class=\"o\">()</span>\n</pre>\n<p>Then custmize your data for model training</p>\n<pre><span class=\"nv\">sp</span><span class=\"o\">=</span>sample_pipeline<span class=\"o\">()</span><span class=\"se\">\\\n</span>    .set_fw_return_n<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span><span class=\"se\">\\\n</span>    .set_sample_n<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span><span class=\"se\">\\\n</span>    .factor_rank<span class=\"o\">()</span><span class=\"se\">\\\n</span>    .factor_zscore<span class=\"o\">()</span><span class=\"se\">\\\n</span>    .fw_return_ind_neutral<span class=\"o\">()</span><span class=\"se\">\\\n</span>    .fw_return_rank<span class=\"o\">()</span><span class=\"se\">\\\n</span>    .fw_return_I<span class=\"o\">(</span><span class=\"nv\">thresh</span><span class=\"o\">=</span><span class=\"m\">2000</span><span class=\"o\">)</span>\n</pre>\n<p>Note all returns are multiplied by 100 for better modeling.</p>\n<div>\n<div>Options:</div>\n<div><tt>set_fw_return</tt> is to set the number of days to claculate forward\nreturn;</div>\n<div><tt>set_sample_n</tt> is to set how many days to use in one sample;</div>\n<div><tt>factor_rank</tt> is to rank all factors in each sample;</div>\n<div><tt>factor_zscore</tt> is to normalize factors in each sample;</div>\n<div><tt>fw_return_ind_neutral</tt> is to neutralize returns by industry. If the\nportfolio have industry constrain, this is likely to improve the\ntraining result;</div>\n<div><tt>fw_return_rank</tt> is to convert returns to their rank in each sample;</div>\n<div><tt>fw_return_I</tt> is to convert returns as 0 or 1, indicating whether\nthe return value is geater than or equal to the threshold;</div>\n</div>\n<p>Now create sample as</p>\n<pre>X_train,y_train<span class=\"o\">=</span>sp.train_set<span class=\"o\">(</span>db<span class=\"o\">)</span>\nX_test,y_test<span class=\"o\">=</span>sp.test_set<span class=\"o\">(</span>db<span class=\"o\">)</span>\n<span class=\"nv\">X_test_all</span><span class=\"o\">=</span>sp.test_X<span class=\"o\">(</span>db<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"modeling\">\n<h2>Modeling</h2>\n<p>Classification Method</p>\n<pre>from sklearn.ensemble import RandomForestClassifier\n<span class=\"nv\">clf</span><span class=\"o\">=</span>RandomForestClassifier<span class=\"o\">()</span>\ntn,tt,ml<span class=\"o\">=</span>clf_model<span class=\"o\">(</span>clf,X_train,y_train,X_test,y_test<span class=\"o\">)</span>\n</pre>\n<p>Where <tt>y</tt> can be 0/1 or float and result <tt>tn</tt> (train) and <tt>tt</tt>\n(test) would be different depending on this. If <tt>clf</tt> is a tree based\nmodel, <tt>ml</tt> would be feature importance. If <tt>clf</tt> is a linear model,\n<tt>ml</tt> would be coeffient.</p>\n<p>We can also creat a model by combining several models.</p>\n<pre>from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n<span class=\"nv\">clf1</span><span class=\"o\">=</span>RandomForestClassifier<span class=\"o\">()</span>\n<span class=\"nv\">clf2</span><span class=\"o\">=</span>LogisticRegression<span class=\"o\">()</span>\n<span class=\"nv\">clf3</span><span class=\"o\">=</span>SVC<span class=\"o\">()</span>\nfrom multi_factor_model import combine_clf_models\n<span class=\"nv\">CLF</span><span class=\"o\">=</span>combine_clf_models<span class=\"o\">()</span><span class=\"se\">\\\n</span>    .add_clf<span class=\"o\">(</span><span class=\"s1\">'rf'</span>,clf1<span class=\"o\">)</span><span class=\"se\">\\\n</span>    .add_clf<span class=\"o\">(</span><span class=\"s1\">'lr'</span>,clf2<span class=\"o\">)</span><span class=\"se\">\\\n</span>    .add_clf<span class=\"o\">(</span><span class=\"s1\">'svc'</span>,clf3,weight<span class=\"o\">=</span><span class=\"m\">2</span><span class=\"o\">)</span><span class=\"c1\">#default weight is 1\n</span>tn,tt,ml<span class=\"o\">=</span>clf_model<span class=\"o\">(</span>CLF,X_train,y_train,X_test,y_test<span class=\"o\">)</span>\n</pre>\n<p>Regression Method Same as Classification method with <tt>reg_model</tt> as\nthe replacement of <tt>clf_model</tt> and <tt>combine_reg_models</tt> as that of\n<tt>combine_clf_models</tt></p>\n</div>\n<div id=\"combined-factor\">\n<h2>Combined Factor</h2>\n<pre>import pandas as pd\n<span class=\"nv\">value</span><span class=\"o\">=</span>CLF.predict_proba<span class=\"o\">(</span>X_test_all<span class=\"o\">)</span>\n<span class=\"nv\">factor</span><span class=\"o\">=</span>pd.Series<span class=\"o\">(</span>value<span class=\"o\">[</span>:,1<span class=\"o\">]</span>,index<span class=\"o\">=</span>X_test_all.index<span class=\"o\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4908209, "releases": {"0.0.0a1": [{"comment_text": "", "digests": {"md5": "56ca91bc5d005425dd8d29ff559ceb40", "sha256": "6acebf5b8c2c2b1f3ae1683027fcc3eebaf35d5c6f171c76fa8656b95fbdca35"}, "downloads": -1, "filename": "multi_factor_model-0.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "56ca91bc5d005425dd8d29ff559ceb40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12716, "upload_time": "2018-12-29T09:05:41", "upload_time_iso_8601": "2018-12-29T09:05:41.273510Z", "url": "https://files.pythonhosted.org/packages/b6/69/97ea4130b6063e84109c551e40d17185e3161a9177beee3c103e315fc847/multi_factor_model-0.0.0a1-py3-none-any.whl", "yanked": false}], "0.0.0a2": [{"comment_text": "", "digests": {"md5": "89f74f6f996fb8f42509eb395d33e9cd", "sha256": "ce6aba53a565887cb28a353f33d25443abf6f13a0ad31728ed02b85ec61eed49"}, "downloads": -1, "filename": "multi_factor_model-0.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "89f74f6f996fb8f42509eb395d33e9cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12710, "upload_time": "2018-12-29T09:16:59", "upload_time_iso_8601": "2018-12-29T09:16:59.048918Z", "url": "https://files.pythonhosted.org/packages/2b/49/fe78bcdb80d6c966fa154b825c96146b81d81664f342973ce6794dbe833b/multi_factor_model-0.0.0a2-py3-none-any.whl", "yanked": false}], "0.0.0a4": [{"comment_text": "", "digests": {"md5": "3e0105835141b7dfcd674d8c98c0b88f", "sha256": "ace1242ff7716cd1e9d5e0d69bd889a1cb397882228a4dc805641e035b2d0799"}, "downloads": -1, "filename": "multi_factor_model-0.0.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "3e0105835141b7dfcd674d8c98c0b88f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10583, "upload_time": "2019-01-14T08:05:13", "upload_time_iso_8601": "2019-01-14T08:05:13.989827Z", "url": "https://files.pythonhosted.org/packages/23/64/0a4b87ddfbc59772bb716a1274975bfa72b33e1710b55180c0e32e7aab71/multi_factor_model-0.0.0a4-py3-none-any.whl", "yanked": false}], "0.0.0a5": [{"comment_text": "", "digests": {"md5": "c74c4d7ae6164941338773cf4a690202", "sha256": "c9e890ae3070a5756dba0376fc0a159d6aa843fd66152939ee591cac5adbde10"}, "downloads": -1, "filename": "multi_factor_model-0.0.0a5-py3-none-any.whl", "has_sig": false, "md5_digest": "c74c4d7ae6164941338773cf4a690202", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10574, "upload_time": "2019-01-14T08:15:51", "upload_time_iso_8601": "2019-01-14T08:15:51.042206Z", "url": "https://files.pythonhosted.org/packages/76/a9/318501b84fc4516f451d1387dc679528c6468f09c6b39c523acabefda76e/multi_factor_model-0.0.0a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57bfbf1d13d9b7607fdafcb9fb5453ab", "sha256": "314ae7e24a2da837bf394d843180c497d0e0e009f97ed99b038d883c989d0c8d"}, "downloads": -1, "filename": "multi_factor_model-0.0.0a5.tar.gz", "has_sig": false, "md5_digest": "57bfbf1d13d9b7607fdafcb9fb5453ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6971, "upload_time": "2019-03-07T03:18:10", "upload_time_iso_8601": "2019-03-07T03:18:10.040747Z", "url": "https://files.pythonhosted.org/packages/f5/a0/1778ac294ce0494a65486b81481d5eeff65355ddd9db55fde9c736dd6650/multi_factor_model-0.0.0a5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c74c4d7ae6164941338773cf4a690202", "sha256": "c9e890ae3070a5756dba0376fc0a159d6aa843fd66152939ee591cac5adbde10"}, "downloads": -1, "filename": "multi_factor_model-0.0.0a5-py3-none-any.whl", "has_sig": false, "md5_digest": "c74c4d7ae6164941338773cf4a690202", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10574, "upload_time": "2019-01-14T08:15:51", "upload_time_iso_8601": "2019-01-14T08:15:51.042206Z", "url": "https://files.pythonhosted.org/packages/76/a9/318501b84fc4516f451d1387dc679528c6468f09c6b39c523acabefda76e/multi_factor_model-0.0.0a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57bfbf1d13d9b7607fdafcb9fb5453ab", "sha256": "314ae7e24a2da837bf394d843180c497d0e0e009f97ed99b038d883c989d0c8d"}, "downloads": -1, "filename": "multi_factor_model-0.0.0a5.tar.gz", "has_sig": false, "md5_digest": "57bfbf1d13d9b7607fdafcb9fb5453ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6971, "upload_time": "2019-03-07T03:18:10", "upload_time_iso_8601": "2019-03-07T03:18:10.040747Z", "url": "https://files.pythonhosted.org/packages/f5/a0/1778ac294ce0494a65486b81481d5eeff65355ddd9db55fde9c736dd6650/multi_factor_model-0.0.0a5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:27 2020"}