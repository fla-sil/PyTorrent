{"info": {"author": "Thomas Fletcher", "author_email": "T-Fletcher@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Programming Language :: Python", "Programming Language :: Python :: 3.7"], "description": "GPy-ABCD\n========\n\n.. image:: https://img.shields.io/pypi/v/GPy-ABCD.svg\n    :target: https://pypi.python.org/pypi/GPy-ABCD/\n    :alt: Latest PyPI version\n\n.. image:: https://pepy.tech/badge/gpy-abcd\n    :target: https://pepy.tech/project/gpy-abcd\n    :alt: Package Downloads\n\n.. image:: https://img.shields.io/pypi/pyversions/GPy-ABCD.svg\n    :target: https://pypi.python.org/pypi/GPy-ABCD/\n    :alt: Python Versions\n\n.. image:: https://img.shields.io/pypi/l/GPy-ABCD.svg\n    :target: https://github.com/T-Flet/GPy-ABCD/blob/master/LICENSE\n    :alt: License\n\n.. image:: https://github.com/T-Flet/GPy-ABCD/workflows/Python%20package/badge.svg\n    :target: https://github.com/T-Flet/GPy-ABCD/actions?query=workflow%3A%22Python+package%22\n    :alt: Build\n\nBasic implementation with GPy of an Automatic Bayesian Covariance Discovery (ABCD) system\n\nBriefly: a modelling system which consists in exploring a space of compositional kernels\n(i.e. covariances of gaussian processes) built from a few carefully selected base ones,\nreturning the best fitting gaussian process models using them and generating simple text\ninterpretations of the fits based on the functional shapes of the final composed covariance\nkernels and parameter values.\n\nSee the picture in `Usage` below to get a feeling for it and\nread one of the papers on the original ABCD for details:\n\nLloyd, James Robert; Duvenaud, David Kristjanson; Grosse, Roger Baker; Tenenbaum, Joshua B.; Ghahramani, Zoubin (2014):\nAutomatic construction and natural-language description of nonparametric regression models.\nIn: National Conference on Artificial Intelligence, 7/27/2014, pp. 1242-1250.\nAvailable online at https://academic.microsoft.com/paper/1950803081.\n\n\nInstallation\n------------\n::\n\n    pip install GPy_ABCD\n\nUsage\n-----\nThe main function exported by this package is ``explore_model_space``;\nnote that if the ``parallel`` argument is ``True`` then the function should be\ncalled from within a ``if __name__ == '__main__':``\n\n::\n\n    import numpy as np\n    from GPy_ABCD import *\n\n    if __name__ == '__main__':\n        # Example data\n        X = np.linspace(-10, 10, 101)[:, None]\n        Y = np.cos( (X - 5) / 2 )**2 * X * 2 + np.random.randn(101, 1)\n\n        # Main function call with suggested arguments\n        best_mods, all_mods, all_exprs, expanded, not_expanded = explore_model_space(X, Y,\n            start_kernels = standard_start_kernels, p_rules = production_rules_all,\n            utility_function = 'BIC', restarts = 3, rounds = 2, buffer = 3,\n            dynamic_buffer = True, verbose = False, parallel = True)\n\n\n        # Typical output exploration printout\n\n        for mod_depth in all_mods: print(', '.join([str(mod.kernel_expression) for mod in mod_depth]) + f'\\n{len(mod_depth)}')\n\n        print()\n\n        # Explore the best 3 models in detail\n        from matplotlib import pyplot as plt\n        for bm in best_mods[:3]:\n            print(bm.kernel_expression)\n            print(bm.model.kern)\n            print(bm.model.log_likelihood())\n            print(bm.cached_utility_function)\n            bm.model.plot()\n            print(bm.interpret())\n\n        # Perform some predictions\n        predict_X = np.linspace(10, 15, 50)[:, None]\n        preds = best_mods[0].predict(predict_X)\n        print(preds)\n\n        plt.show()\n\n\n.. figure:: selected_output_example.png\n    :align: center\n    :figclass: align-center\n\n    Selection of output from the above example\n\nImportable elements from this package (refer to the section below for context):\n\n- The ``GPModel`` class\n- The main function ``explore_model_space``\n- The ``model_search_rounds`` function to continue a search from where another left-off\n- Single and list model fitting functions ``fit_one_model``, ``fit_model_list_not_parallel`` and ``fit_model_list_parallel``\n- The default start kernels ``standard_start_kernels`` and production rules ``production_rules_all``, along with the same production rules grouped by type in a dictionary ``production_rules_by_type``\n- The concrete ``KernelExpression`` subclasses ``SumKE``, ``ProductKE`` and ``ChangeKE``\n- The frozensets of ``base_kerns`` and ``base_sigmoids``\n\n(The purpose of exporting elements in the last 3 lines is for users to create alternative sets of production\nrules and starting kernel lists by mixing kernel expressions and raw strings of base kernels)\n\nProject Structure\n-----------------\n\nRead the paper mentioned above for a full picture of what an ABCD system is, but, briefly,\nit consists in exploring a space of compositional kernels built from a few carefully selected base ones,\nreturning the best fitting models using them and generating simple text interpretations of the fits based\non the functional shapes of the final composed covariance kernels and parameter values.\n\nThe key pillars of this project's ABCD system implementation structure are the following:\n\n- ``Kernels.baseKernels`` contains the \"mathematical\" base kernels (i.e. GPy kernel objects) for the whole machinery\n\n    - This script also acts as a general configuration of what the system can use (including a few pre-packaged flags for certain behaviours)\n    - Some of the base kernels are simply wrapped GPy-provided kernels (White-Noise, Constant and Squared-Exponential)\n    - The others are either not present in GPy's default arsenal or are improved versions of ones which are (Linear which can identify polynomial roots and purely-Periodic standard-periodic kernel)\n    - It contains sigmoidal kernels (both base sigmoids and indicator-like ones, i.e. sigmoidal hat/well) which are not used directly in the symbolic expressions but are substituted in by change-type kernels\n    - It contains (multiple implementations of) change-point and change-window kernels which use the aforementioned sigmoidals\n- ``KernelExpansion.kernelExpression`` contains the \"symbolic\" kernel classes constituting the nodes with which to build complex kernel expressions in the form of trees\n\n    - The non-abstract kernel expression classes are ``SumKE``, ``ProductKE`` and ``ChangeKE``\n    - ``SumKE`` and ``ProductKE`` are direct subclasses of the abstract class `SumOrProductKE` and only really differ in how they self-simplify and distribute over the other\n    - ``ChangeKE`` could be split into separate change-point and change-window classes, but a single argument difference allows full method overlap\n    - ``SumOrProductKE`` and ``ChangeKE`` are direct subclasses of the abstract base class ``KernelExpression``\n- The above kernel expression classes have a wide variety of methods providing the following general functionality in order to make the rest of the project light of ad-hoc functions:\n\n    - They self-simplify when modified through the appropriate methods (they are symbolic expressions after all)\n    - They can produce GPy kernel objects\n    - They can line-up with and absorb fit model parameters from a matching GPy object\n    - They can rearrange to a sum-of-products form\n    - They can generate text interpretations of their sum-of-products form\n- ``KernelExpansion.grammar`` contains the various production rules and default kernel lists used in model space exploration\n- ``Models.modelSearch`` contains the system front-end elements:\n\n    - The ``GPModel`` class, which is where the GPy kernels/models interact with the symbolic kernel expressions\n    - Functions to fit lists of models (the parallel version uses ``multiprocessing``'s ``Pool``, but alternative parallel frameworks' versions can be implemented here)\n    - The ``explore_model_space`` function, which is the point of it all\n    - The ``model_search_rounds`` function, which is used by the above but also meant to continue searching by building on past exploration results\n\nFurther Notes\n-------------\n\n- The important tests are in pytest scripts, but many other scripts are present and intended as functionality showcases or \"tests by inspection\"\n- Additionally, pytest.ini has a two opposite configuration lines intended to be toggled to perform \"real\" tests vs other \"by inspection\" tests\n- Please feel free to fork and expand this project since it is not the focus of my research and merely a component I need for part of it, therefore I will not be expanding its functionality in the near future\n\nPossible expansion directions:\n\n- Many \"TODO\" comments are present throughout the codebase\n- Optimising ChangeWindow window-location fitting is an open issue (multiple implementations of change-window and the sigmoidal kernels they rely on have already been tried; see the commented-out declarations in baseKernels.py)\n- The periodic kernel could be more stable in non-periodic-data fits (GPy's own as well)\n- Making each project layer accept multidimensional data, starting from the GPy kernels (some already do)\n- Expanding on the GPy side of things: add more methods to the kernels in order to make use of the full spectrum of GPy features (MCMC etc)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/T-Flet/GPy-ABCD", "keywords": "", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "GPy-ABCD", "package_url": "https://pypi.org/project/GPy-ABCD/", "platform": "", "project_url": "https://pypi.org/project/GPy-ABCD/", "project_urls": {"Homepage": "https://github.com/T-Flet/GPy-ABCD"}, "release_url": "https://pypi.org/project/GPy-ABCD/0.1.5.1/", "requires_dist": null, "requires_python": "", "summary": "Basic implementation with GPy of an Automatic Bayesian Covariance Discovery (ABCD) system", "version": "0.1.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/GPy-ABCD/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d563ff87f6dedef54d9a7aea6b8fcedd0a84d7c6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f4750792d414243442e737667\"></a>\n<a href=\"https://pepy.tech/project/gpy-abcd\" rel=\"nofollow\"><img alt=\"Package Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/325274bcc19d3ca4ba0510724447cc2526181553/68747470733a2f2f706570792e746563682f62616467652f6770792d61626364\"></a>\n<a href=\"https://pypi.python.org/pypi/GPy-ABCD/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5d21cecb4b58a0ddc72115436da69b8c2207800/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f4750792d414243442e737667\"></a>\n<a href=\"https://github.com/T-Flet/GPy-ABCD/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44a6c89d24bbf9c623ba71fcebdb5645cc85eba9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f4750792d414243442e737667\"></a>\n<a href=\"https://github.com/T-Flet/GPy-ABCD/actions?query=workflow%3A%22Python+package%22\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/585f0e8a51f680d12e55cc32190d2bbf3eb72318/68747470733a2f2f6769746875622e636f6d2f542d466c65742f4750792d414243442f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></a>\n<p>Basic implementation with GPy of an Automatic Bayesian Covariance Discovery (ABCD) system</p>\n<p>Briefly: a modelling system which consists in exploring a space of compositional kernels\n(i.e. covariances of gaussian processes) built from a few carefully selected base ones,\nreturning the best fitting gaussian process models using them and generating simple text\ninterpretations of the fits based on the functional shapes of the final composed covariance\nkernels and parameter values.</p>\n<p>See the picture in <cite>Usage</cite> below to get a feeling for it and\nread one of the papers on the original ABCD for details:</p>\n<p>Lloyd, James Robert; Duvenaud, David Kristjanson; Grosse, Roger Baker; Tenenbaum, Joshua B.; Ghahramani, Zoubin (2014):\nAutomatic construction and natural-language description of nonparametric regression models.\nIn: National Conference on Artificial Intelligence, 7/27/2014, pp. 1242-1250.\nAvailable online at <a href=\"https://academic.microsoft.com/paper/1950803081\" rel=\"nofollow\">https://academic.microsoft.com/paper/1950803081</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install GPy_ABCD\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The main function exported by this package is <tt>explore_model_space</tt>;\nnote that if the <tt>parallel</tt> argument is <tt>True</tt> then the function should be\ncalled from within a <tt>if __name__ == '__main__':</tt></p>\n<pre>import numpy as np\nfrom GPy_ABCD import *\n\nif __name__ == '__main__':\n    # Example data\n    X = np.linspace(-10, 10, 101)[:, None]\n    Y = np.cos( (X - 5) / 2 )**2 * X * 2 + np.random.randn(101, 1)\n\n    # Main function call with suggested arguments\n    best_mods, all_mods, all_exprs, expanded, not_expanded = explore_model_space(X, Y,\n        start_kernels = standard_start_kernels, p_rules = production_rules_all,\n        utility_function = 'BIC', restarts = 3, rounds = 2, buffer = 3,\n        dynamic_buffer = True, verbose = False, parallel = True)\n\n\n    # Typical output exploration printout\n\n    for mod_depth in all_mods: print(', '.join([str(mod.kernel_expression) for mod in mod_depth]) + f'\\n{len(mod_depth)}')\n\n    print()\n\n    # Explore the best 3 models in detail\n    from matplotlib import pyplot as plt\n    for bm in best_mods[:3]:\n        print(bm.kernel_expression)\n        print(bm.model.kern)\n        print(bm.model.log_likelihood())\n        print(bm.cached_utility_function)\n        bm.model.plot()\n        print(bm.interpret())\n\n    # Perform some predictions\n    predict_X = np.linspace(10, 15, 50)[:, None]\n    preds = best_mods[0].predict(predict_X)\n    print(preds)\n\n    plt.show()\n</pre>\n<div>\n<img alt=\"selected_output_example.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2dd82745ac823e61d4d323b9f62b17492a528806/73656c65637465645f6f75747075745f6578616d706c652e706e67\">\n<p>Selection of output from the above example</p>\n</div>\n<p>Importable elements from this package (refer to the section below for context):</p>\n<ul>\n<li>The <tt>GPModel</tt> class</li>\n<li>The main function <tt>explore_model_space</tt></li>\n<li>The <tt>model_search_rounds</tt> function to continue a search from where another left-off</li>\n<li>Single and list model fitting functions <tt>fit_one_model</tt>, <tt>fit_model_list_not_parallel</tt> and <tt>fit_model_list_parallel</tt></li>\n<li>The default start kernels <tt>standard_start_kernels</tt> and production rules <tt>production_rules_all</tt>, along with the same production rules grouped by type in a dictionary <tt>production_rules_by_type</tt></li>\n<li>The concrete <tt>KernelExpression</tt> subclasses <tt>SumKE</tt>, <tt>ProductKE</tt> and <tt>ChangeKE</tt></li>\n<li>The frozensets of <tt>base_kerns</tt> and <tt>base_sigmoids</tt></li>\n</ul>\n<p>(The purpose of exporting elements in the last 3 lines is for users to create alternative sets of production\nrules and starting kernel lists by mixing kernel expressions and raw strings of base kernels)</p>\n</div>\n<div id=\"project-structure\">\n<h2>Project Structure</h2>\n<p>Read the paper mentioned above for a full picture of what an ABCD system is, but, briefly,\nit consists in exploring a space of compositional kernels built from a few carefully selected base ones,\nreturning the best fitting models using them and generating simple text interpretations of the fits based\non the functional shapes of the final composed covariance kernels and parameter values.</p>\n<p>The key pillars of this project\u2019s ABCD system implementation structure are the following:</p>\n<ul>\n<li><p><tt>Kernels.baseKernels</tt> contains the \u201cmathematical\u201d base kernels (i.e. GPy kernel objects) for the whole machinery</p>\n<blockquote>\n<ul>\n<li>This script also acts as a general configuration of what the system can use (including a few pre-packaged flags for certain behaviours)</li>\n<li>Some of the base kernels are simply wrapped GPy-provided kernels (White-Noise, Constant and Squared-Exponential)</li>\n<li>The others are either not present in GPy\u2019s default arsenal or are improved versions of ones which are (Linear which can identify polynomial roots and purely-Periodic standard-periodic kernel)</li>\n<li>It contains sigmoidal kernels (both base sigmoids and indicator-like ones, i.e. sigmoidal hat/well) which are not used directly in the symbolic expressions but are substituted in by change-type kernels</li>\n<li>It contains (multiple implementations of) change-point and change-window kernels which use the aforementioned sigmoidals</li>\n</ul>\n</blockquote>\n</li>\n<li><p><tt>KernelExpansion.kernelExpression</tt> contains the \u201csymbolic\u201d kernel classes constituting the nodes with which to build complex kernel expressions in the form of trees</p>\n<blockquote>\n<ul>\n<li>The non-abstract kernel expression classes are <tt>SumKE</tt>, <tt>ProductKE</tt> and <tt>ChangeKE</tt></li>\n<li><tt>SumKE</tt> and <tt>ProductKE</tt> are direct subclasses of the abstract class <cite>SumOrProductKE</cite> and only really differ in how they self-simplify and distribute over the other</li>\n<li><tt>ChangeKE</tt> could be split into separate change-point and change-window classes, but a single argument difference allows full method overlap</li>\n<li><tt>SumOrProductKE</tt> and <tt>ChangeKE</tt> are direct subclasses of the abstract base class <tt>KernelExpression</tt></li>\n</ul>\n</blockquote>\n</li>\n<li><p>The above kernel expression classes have a wide variety of methods providing the following general functionality in order to make the rest of the project light of ad-hoc functions:</p>\n<blockquote>\n<ul>\n<li>They self-simplify when modified through the appropriate methods (they are symbolic expressions after all)</li>\n<li>They can produce GPy kernel objects</li>\n<li>They can line-up with and absorb fit model parameters from a matching GPy object</li>\n<li>They can rearrange to a sum-of-products form</li>\n<li>They can generate text interpretations of their sum-of-products form</li>\n</ul>\n</blockquote>\n</li>\n<li><p><tt>KernelExpansion.grammar</tt> contains the various production rules and default kernel lists used in model space exploration</p>\n</li>\n<li><p><tt>Models.modelSearch</tt> contains the system front-end elements:</p>\n<blockquote>\n<ul>\n<li>The <tt>GPModel</tt> class, which is where the GPy kernels/models interact with the symbolic kernel expressions</li>\n<li>Functions to fit lists of models (the parallel version uses <tt>multiprocessing</tt>\u2019s <tt>Pool</tt>, but alternative parallel frameworks\u2019 versions can be implemented here)</li>\n<li>The <tt>explore_model_space</tt> function, which is the point of it all</li>\n<li>The <tt>model_search_rounds</tt> function, which is used by the above but also meant to continue searching by building on past exploration results</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"further-notes\">\n<h2>Further Notes</h2>\n<ul>\n<li>The important tests are in pytest scripts, but many other scripts are present and intended as functionality showcases or \u201ctests by inspection\u201d</li>\n<li>Additionally, pytest.ini has a two opposite configuration lines intended to be toggled to perform \u201creal\u201d tests vs other \u201cby inspection\u201d tests</li>\n<li>Please feel free to fork and expand this project since it is not the focus of my research and merely a component I need for part of it, therefore I will not be expanding its functionality in the near future</li>\n</ul>\n<p>Possible expansion directions:</p>\n<ul>\n<li>Many \u201cTODO\u201d comments are present throughout the codebase</li>\n<li>Optimising ChangeWindow window-location fitting is an open issue (multiple implementations of change-window and the sigmoidal kernels they rely on have already been tried; see the commented-out declarations in baseKernels.py)</li>\n<li>The periodic kernel could be more stable in non-periodic-data fits (GPy\u2019s own as well)</li>\n<li>Making each project layer accept multidimensional data, starting from the GPy kernels (some already do)</li>\n<li>Expanding on the GPy side of things: add more methods to the kernels in order to make use of the full spectrum of GPy features (MCMC etc)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7009594, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "c1d3c2c9a1ce051f9f9dcc7bd4f9a787", "sha256": "405c7e494f760d7fba74310adedf66e937be4a8f86b273c4d9f62f11c264ab1b"}, "downloads": -1, "filename": "GPy_ABCD-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c1d3c2c9a1ce051f9f9dcc7bd4f9a787", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44455, "upload_time": "2020-01-23T00:49:39", "upload_time_iso_8601": "2020-01-23T00:49:39.637662Z", "url": "https://files.pythonhosted.org/packages/0d/e2/c2adb2d4e63fbe4db5ba550936f30720e5c129a1cdf98e1dde6d31de3469/GPy_ABCD-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "083d1eb3a610690d0da337b3d460185d", "sha256": "35cd99c302b96959d2a192c38470efd7953fc2cfab49997bc3bcd33795e8f0eb"}, "downloads": -1, "filename": "GPy-ABCD-0.1.3.tar.gz", "has_sig": false, "md5_digest": "083d1eb3a610690d0da337b3d460185d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33527, "upload_time": "2020-01-23T00:49:41", "upload_time_iso_8601": "2020-01-23T00:49:41.234329Z", "url": "https://files.pythonhosted.org/packages/3c/71/f10da297f7da8cff3fe01e5b1f574a19b7c7e7c565745ae71c0d50d4e4ee/GPy-ABCD-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d303de50638dc8d07182fd469bc8a9c0", "sha256": "49c7d5d10eb7924e455a1b2a7c6688584bc9121ff45b21298dd17b586d006441"}, "downloads": -1, "filename": "GPy_ABCD-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d303de50638dc8d07182fd469bc8a9c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50292, "upload_time": "2020-01-31T21:07:51", "upload_time_iso_8601": "2020-01-31T21:07:51.782795Z", "url": "https://files.pythonhosted.org/packages/dd/d8/df836cae1115f71025b07178e0504d153b9d84febd9b18f2383eaa095bcf/GPy_ABCD-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64a5ae7897ce5c54e9cd9e4a5f577d20", "sha256": "73c7b1f03f5d7e06bf78d5e38061a8ccd0bc603431c29b0543f1a85f351b9da6"}, "downloads": -1, "filename": "GPy-ABCD-0.1.4.tar.gz", "has_sig": false, "md5_digest": "64a5ae7897ce5c54e9cd9e4a5f577d20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37589, "upload_time": "2020-01-31T21:07:53", "upload_time_iso_8601": "2020-01-31T21:07:53.419223Z", "url": "https://files.pythonhosted.org/packages/e1/5c/50e1ddf731a90a1aee505ff78d55b74d6a2b649a053e0db9514f143add40/GPy-ABCD-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "c0cf48cb24eaae97b2b50e07b951e16c", "sha256": "4567c3c075eb1e008245c6ae1de50b0f7a9cf4c620f9c576f0681e3452b77b88"}, "downloads": -1, "filename": "GPy_ABCD-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c0cf48cb24eaae97b2b50e07b951e16c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 62691, "upload_time": "2020-03-03T00:54:36", "upload_time_iso_8601": "2020-03-03T00:54:36.348990Z", "url": "https://files.pythonhosted.org/packages/e7/9c/a705b0164f5fbe5cd391938d87274e6ba3a9679ee5a92b1fe75939e81822/GPy_ABCD-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf558632f9bb0e8c1dfc6e738649fa47", "sha256": "6e5cb9b84c18af8743870b296f72e84712e61b6749dcbdaf59d98fd17e41eaf0"}, "downloads": -1, "filename": "GPy-ABCD-0.1.5.tar.gz", "has_sig": false, "md5_digest": "cf558632f9bb0e8c1dfc6e738649fa47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46479, "upload_time": "2020-03-03T00:54:37", "upload_time_iso_8601": "2020-03-03T00:54:37.799258Z", "url": "https://files.pythonhosted.org/packages/51/3c/b62731a256f7b5af2f1e1b24498244a9f1123bd7a36fd38487da990e3f6c/GPy-ABCD-0.1.5.tar.gz", "yanked": false}], "0.1.5.1": [{"comment_text": "", "digests": {"md5": "3234111bef201458d1077cf4d9fd0af2", "sha256": "32e4422df73d091443fdd1de32d715a44c0546490c2b3321c94a030e94f8dbca"}, "downloads": -1, "filename": "GPy_ABCD-0.1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3234111bef201458d1077cf4d9fd0af2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 63137, "upload_time": "2020-04-13T12:19:27", "upload_time_iso_8601": "2020-04-13T12:19:27.607295Z", "url": "https://files.pythonhosted.org/packages/c6/79/2dabe5ba46dfceb87c79746d896d38f66e22391ca92cb7fd2f55a4614f33/GPy_ABCD-0.1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28d3f1780fbf12d46a6e9bb3e1b45505", "sha256": "db483d4e82b4c081195aa2b450b91e3477db8472b61951e84f85444b4b16b28a"}, "downloads": -1, "filename": "GPy-ABCD-0.1.5.1.tar.gz", "has_sig": false, "md5_digest": "28d3f1780fbf12d46a6e9bb3e1b45505", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46828, "upload_time": "2020-04-13T12:19:28", "upload_time_iso_8601": "2020-04-13T12:19:28.731532Z", "url": "https://files.pythonhosted.org/packages/8a/6a/05c5d0786204de84c1cfd011858a7f1ed757ac7be098aa77ff97d3a85040/GPy-ABCD-0.1.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3234111bef201458d1077cf4d9fd0af2", "sha256": "32e4422df73d091443fdd1de32d715a44c0546490c2b3321c94a030e94f8dbca"}, "downloads": -1, "filename": "GPy_ABCD-0.1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3234111bef201458d1077cf4d9fd0af2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 63137, "upload_time": "2020-04-13T12:19:27", "upload_time_iso_8601": "2020-04-13T12:19:27.607295Z", "url": "https://files.pythonhosted.org/packages/c6/79/2dabe5ba46dfceb87c79746d896d38f66e22391ca92cb7fd2f55a4614f33/GPy_ABCD-0.1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28d3f1780fbf12d46a6e9bb3e1b45505", "sha256": "db483d4e82b4c081195aa2b450b91e3477db8472b61951e84f85444b4b16b28a"}, "downloads": -1, "filename": "GPy-ABCD-0.1.5.1.tar.gz", "has_sig": false, "md5_digest": "28d3f1780fbf12d46a6e9bb3e1b45505", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46828, "upload_time": "2020-04-13T12:19:28", "upload_time_iso_8601": "2020-04-13T12:19:28.731532Z", "url": "https://files.pythonhosted.org/packages/8a/6a/05c5d0786204de84c1cfd011858a7f1ed757ac7be098aa77ff97d3a85040/GPy-ABCD-0.1.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:05 2020"}