{"info": {"author": "Brian Peterson", "author_email": "brian.peterson@cloudshift.cc", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Tropoform\n\nTropoform is a tool that provides a [terraform](https://terraform.io) like interface for deploying \nstandalone AWS Cloud Formation stacks or stacks created \nby [troposphere](https://github.com/cloudtools/troposphere). Tropoform provides plan, apply, list, \noutput & destroy operations on cloudformation stacks.\n\n### Requirements\n* Python3.6+\n\n### Installation\nTo install the latest version of tropoform\n```\npip install tropoform --user --upgrade\n```\n\nFor development projects, it is advised to install in a python\n[virtual environment](https://virtualenv.pypa.io/en/latest/)\n\n\nOr you can install from source https://github.com/cloudshiftstrategies/tropoform\n\n### Usage\n\nuse `tropoform -h` for help\n```\n$ tropform -h\nusage: tropoform [-h] [-v]\n                    {apply,plan,destroy,list,output,parameters,reason} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         get DEBUG logging\n\noperation:\n  {apply,plan,destroy,list,output,parameters,reason}\n    apply               create or update stack\n    plan                view change plan\n    destroy             remove stack\n    list                list stacks\n    output              view stack outputs\n    parameters          list parameters used in a stack\n    reason              list reasons for failed stack\n```\n\nsee detailed usage help for an operation  `tropoform apply -h`\n```\nusage: tropoform.py apply [-h] (-m MODULE_NAME | -t TEMPLATE_FILE)\n                          [-p PARAMETER_FILES] [-c CAPABILITIES] [-r REGION]\n                          [--auto_approve]\n                          stack_name\n\npositional arguments:\n  stack_name            The name of the cloud formation stack on which to\n                        perform operation. If a module exists in the current\n                        working directory that matches the stack_name and has\n                        a get_template() method, module_name is not required\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m MODULE_NAME, --module_name MODULE_NAME\n                        The name of the python troposphere module that will\n                        create the template. Module must have a get_template()\n                        method that returns a valid troposphere.Template\n                        object\n  -t TEMPLATE_FILE, --template_file TEMPLATE_FILE\n                        The path to a cloud formation template file.\n  -p PARAMETER_FILES, --parameter_files PARAMETER_FILES\n                        Comma separated yaml parameter files that will be\n                        passed to cloud formation as parameters\n  -c CAPABILITIES, --capabilities CAPABILITIES\n                        Comma separated list of AWS capabilities. default:\n                        CAPABILITY_NAMED_IAM\n  -r REGION, --region REGION\n                        The name of the AWS region to perform operations.\n                        default is the env variable: AWS_DEFAULT_REGION\n  --auto_approve        If set, user will not be prompted to approve changes.\n                        default=False\n```\n\n### Usage Example\n\n1. Create a cloud formation template using yaml or json formation\n\n   OR\n\n   Create a python module (script) using [troposphere](https://github.com/cloudtools/troposphere) \n   that has at least one method called get_template() which returns the un-rendered troposphere.\n   Template() object. \n\n    In the `example.py` script below, we create an IAM user inside the function get_template() and return\n    the completed template object\n\n    example.py\n    ```python\n    from troposphere import Template\n    from troposphere import iam\n\n    def get_template():\n        template = Template()\n        template.add_resource(\n            iam.User(\n                \"testIamUser\",\n                UserName=\"tropoform_test_user\"\n            )\n        )\n        return template\n    ```\n\n2. Configure your AWS credentials\n   https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html\n   so that you can make API / CLI calls.\n    * Test your credentials with an awscli command like `aws s3 ls`\n    * or you can test the boto3 python api `python3 -c \"import boto3; client = boto3.client('s3'); print(client.list_buckets())\"`\n\n3. Run a `tropoform plan` on the stack and see that one IAM User resource will be created\n\n    Using a cloud formation template\n    ```\n    $ tropoform plan myStack -t example_cfn_template.yaml\n    STACK: myStack is not yet deployed\n    STACK: myStack creates 1\n    # ) action   logical_id                resource_type\n     1) Create   testIamUser               AWS::IAM::User\n    ```\n\n    Or using a troposphere module\n    ```\n    $ tropoform plan myStack -m example.py\n    STACK: myStack is not yet deployed\n    STACK: myStack creates 1\n    # ) action   logical_id                resource_type\n     1) Create   testIamUser               AWS::IAM::User\n    ```\n\n4. Use `tropofrom apply` (create) the stack\n\n    Using a cloud formation template\n    ```\n    $ tropoform apply myStack -t example_template.json\n    STACK: myStack, Current Status: None\n    CREATING Stack: myStack with 1 resources\n    Are you sure? [yes|no] yes\n    STACK: myStack, Status: CREATE_IN_PROGRESS - 16:36:10\n    STACK: myStack, Status: CREATE_IN_PROGRESS - 16:36:25\n    STACK: myStack, Status: CREATE_COMPLETE - 16:36:41\n    STACK: myStack deployed 1 resources in 00:00:48\n    STACK OUTPUTS:\n    ```\n\n    Or using a troposphere module\n    ```\n    $ tropoform apply myStack -m example.py\n    STACK: myStack, Current Status: None\n    CREATING Stack: myStack with 1 resources\n    Are you sure? [yes|no] yes\n    STACK: myStack, Status: CREATE_IN_PROGRESS - 16:36:10\n    STACK: myStack, Status: CREATE_IN_PROGRESS - 16:36:25\n    STACK: myStack, Status: CREATE_COMPLETE - 16:36:41\n    STACK: myStack deployed 1 resources in 00:00:48\n    STACK OUTPUTS:\n    ```\n\n5. Use `tropoform list` to see stacks that are applied. Notice it is in status CREATE_COMPLETE\n    ```\n    $ tropoform list\n    stack_name           stack_status         drift_status         stack_description\n    myStack              CREATE_COMPLETE      NOT_CHECKED  \n    ```\n\n6. Update the example.template and add another resource\n\n    example.py\n    ```python\n    from troposphere import Template\n    from troposphere import iam\n\n    def get_template():\n        template = Template()\n        template.add_resource(\n            iam.User(\n                \"testIamUser\",\n                UserName=\"tropoform_test_user\"\n            )\n        )\n        template.add_resource(\n            iam.User(\n                \"testIamUser2\",\n                UserName=\"tropoform_test_user2\"\n            )\n        )\n        return template\n    ```\n\n    and run a new `tropoform plan`. Notice that it will add one new resource.\n    ```\n    $ tropoform plan myStack -m example.py\n    STACK: myStack has 1 detected changes\n    # ) action   logical_id           resource_id               resource_type                  scope      Replace?\n     1) Add      testIamUser2                                   AWS::IAM::User                 [] \n    ```\n\n7. `tropoform apply` the changes and then use a `tropoform list` to verify\n    ```\n    $ tropoform apply myStack -m example.py\n    STACK: myStack, Current Status: CREATE_COMPLETE\n    UPDATING Stack: myStack\n    Are you sure? [yes|no] yes\n    STACK: myStack, Status: UPDATE_IN_PROGRESS - 16:42:38\n    STACK: myStack, Status: UPDATE_IN_PROGRESS - 16:42:54\n    STACK: myStack, Status: UPDATE_COMPLETE - 16:43:09\n    STACK: myStack updated 2 resources in 00:00:48\n    STACK OUTPUTS:\n\n    $ tropoform list\n    stack_name           stack_status         drift_status         stack_description\n    myStack              UPDATE_COMPLETE      NOT_CHECKED   \n    ```\n\n8. `destroy` the stack when you are done with it\n    ```\n    $ tropoform destroy myStack\n    DELETING STACK: myStack with 2 resources\n    Are you sure? [yes|no] yes\n    STACK: myStack, Status: UPDATE_COMPLETE - 16:44:37\n    STACK: myStack deleted in 00:00:15\n\n    ```\n\n#### Additional features \n1. Parameter files\n\n    Often cloudformation templates will require parameters so that they can be easily\n    reusable. You can create yaml based files with key: value pairs and add them as \n    arguments to the `tropoform plan` and `tropoform apply` operations\n\n    example_parms1.yaml\n    ```yaml\n    Parm1: Parameter 1\n    Parm2: \"2\"\n    ```\n\n    example_parms2.yaml\n    ```yaml\n    Parm3: Parameter 3\n    Parm4: \"4\"\n    ```\n\n    Using the parameter files in an apply\n    ```\n    $ tropoform apply myStack -m example.py -p example_parms1.yaml,example_parms2.yaml\n\n    ```\n\n2. Capabilities\n\n    Cloud formation stacks may require acknowledgement that it will create resources of\n    certain types. The most common is CAPABILITIES_NAMED_IAM which authorizes cloud formation\n    to create IAM resources. This is included by default in tropoform. But if your stack\n    requires additional capabilities, you can include them with the `-c` argument. See more\n    information about capabilities in this documentation:\n    https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStack.html\n\n    Using additional capabilities in an apply\n    ```\n    $ tropoform apply myStack -m example.py -c CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND\n\n    ```\n\n3. Regions\n\n    By default, troposphere will read the environment variable AWS_DEFAULT_REGION to determine\n    where to manage stacks. But if you want to specify a different region for an operation\n    pass the '-r' or '--region' argument\n\n    Specifying a region in a list command\n    ```\n    $ tropoform list -r us-east-2\n\n    ```\n\n4. Stack Names and Module Name\n\n    If the name you want to specify for your cloudformation stack is in the current\n    working directory and has the same name as the troposphere script, then you can omit\n    the module_name parameter\n\n    Example of creating a cloud formation stack called \"example\" when \"example.py\" troposphere\n    script exists in the current working directory\n    ```\n    $ tropoform apply example\n\n    ```\n\n    Example of creating a cloud formation stack called \"myStack\" when \"example.py\" troposphere\n    script exists in some filesystem location\n    ```\n    $ tropoform apply myStack -m ../scripts/example.py\n\n    ```\n\n5. Auto Approve\n\n    Sometimes when running tropoform in automated scripts, you dont want to be prompted to say\n    yes to confirm the `apply` or `destroy` operation\n\n    Example `--auto_approve`\n    ```\n    $ tropoform apply example --auto_approve\n    ```\n\n6. Reason for failures\n\n    If your cloudformation stack fails to apply for some reason, the cloudformation event(s)\n    that caused the will be printed.\n\n    In the example below, we tried to attach a ManagedIamPolicy that is intentionally misspelled\n    ```\n    $ tropoform apply myStack -m example.py\n    STACK: myStack, Current Status: None\n    CREATING Stack: myStack with 1 resources\n    Are you sure? [yes|no] yes\n    STACK: myStack, Status: CREATE_IN_PROGRESS - 17:32:22\n    STACK: myStack, Status: CREATE_IN_PROGRESS - 17:32:38\n    STACK: myStack, Status: ROLLBACK_COMPLETE - 17:32:54\n    STACK: myStack not deployed and is in status ROLLBACK_COMPLETE\n    STACK myStack create/update FAILED due to the following stack events:\n    UTC time   ResourceStatus  ResourceType                        LogicalResourceId              ResourceStatusReason\n    22:32:47   CREATE_FAILED   AWS::IAM::User                      testIamUser                    Policy arn:aws:iam::aws:policy/AdministratorAcces does not exist or is not attachable. \n    ```\n\n    You can use the `tropoform reason` operation to look up the status of a failed stack\n    ```\n    $ tropoform reason myStack\n    STACK myStack create/update FAILED due to the following stack events:\n    UTC time   ResourceStatus  ResourceType                        LogicalResourceId              ResourceStatusReason\n    22:32:47   CREATE_FAILED   AWS::IAM::User                      testIamUser                    Policy arn:aws:iam::aws:policy/AdministratorAcces does not exist or is not attachable.\n    ```\n\n7. Parameters\n\n    If your stack was deployed with parameters, you can check those paramaters with the \n    `tropoform parameters` operation\n    ``` \n    $ tropoform parameters myStack\n    STACK: myStack Parameters: \n    Parm1                = value1 \n    ```\n\n8. Outputs\n\n    If your stack specifies Output parameters, when the stack is done deploying, the outputs\n    will be printed.\n    ``` \n    $ tropoform apply myStack -m example.py --auto_approve\n    STACK: myStack, Current Status: None\n    CREATING Stack: myStack with 1 resources\n    STACK: myStack, Status: CREATE_IN_PROGRESS - 17:40:44\n    STACK: myStack, Status: CREATE_IN_PROGRESS - 17:40:59\n    STACK: myStack, Status: CREATE_COMPLETE - 17:41:15\n    STACK: myStack deployed 1 resources in 00:00:48\n    STACK OUTPUTS:\n    userArn              = arn:aws:iam::357849880876:user/tropoform_test_user\n    ```\n\n    If you want to access those outputs later, you can run `tropoform output`\n    ``` \n    $ tropoform output myStack\n    STACK OUTPUTS:\n    userArn              = arn:aws:iam::357849880876:user/tropoform_test_user\n    ```\n\n\n### Contributions welcome!\nOpen issues and send pull requests via the github repo https://github.com/cloudshiftstrategies/tropoform\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cloudshiftstrategies/tropoform", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tropoform", "package_url": "https://pypi.org/project/tropoform/", "platform": "", "project_url": "https://pypi.org/project/tropoform/", "project_urls": {"Homepage": "https://github.com/cloudshiftstrategies/tropoform"}, "release_url": "https://pypi.org/project/tropoform/0.3.8/", "requires_dist": ["boto3", "botocore", "troposphere", "awacs", "PyYAML", "colorlog"], "requires_python": ">=3", "summary": "A Terraform like utility for managing AWS Cloud Formation Stacks with troposphere", "version": "0.3.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tropoform</h1>\n<p>Tropoform is a tool that provides a <a href=\"https://terraform.io\" rel=\"nofollow\">terraform</a> like interface for deploying\nstandalone AWS Cloud Formation stacks or stacks created\nby <a href=\"https://github.com/cloudtools/troposphere\" rel=\"nofollow\">troposphere</a>. Tropoform provides plan, apply, list,\noutput &amp; destroy operations on cloudformation stacks.</p>\n<h3>Requirements</h3>\n<ul>\n<li>Python3.6+</li>\n</ul>\n<h3>Installation</h3>\n<p>To install the latest version of tropoform</p>\n<pre><code>pip install tropoform --user --upgrade\n</code></pre>\n<p>For development projects, it is advised to install in a python\n<a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtual environment</a></p>\n<p>Or you can install from source <a href=\"https://github.com/cloudshiftstrategies/tropoform\" rel=\"nofollow\">https://github.com/cloudshiftstrategies/tropoform</a></p>\n<h3>Usage</h3>\n<p>use <code>tropoform -h</code> for help</p>\n<pre><code>$ tropform -h\nusage: tropoform [-h] [-v]\n                    {apply,plan,destroy,list,output,parameters,reason} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         get DEBUG logging\n\noperation:\n  {apply,plan,destroy,list,output,parameters,reason}\n    apply               create or update stack\n    plan                view change plan\n    destroy             remove stack\n    list                list stacks\n    output              view stack outputs\n    parameters          list parameters used in a stack\n    reason              list reasons for failed stack\n</code></pre>\n<p>see detailed usage help for an operation  <code>tropoform apply -h</code></p>\n<pre><code>usage: tropoform.py apply [-h] (-m MODULE_NAME | -t TEMPLATE_FILE)\n                          [-p PARAMETER_FILES] [-c CAPABILITIES] [-r REGION]\n                          [--auto_approve]\n                          stack_name\n\npositional arguments:\n  stack_name            The name of the cloud formation stack on which to\n                        perform operation. If a module exists in the current\n                        working directory that matches the stack_name and has\n                        a get_template() method, module_name is not required\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m MODULE_NAME, --module_name MODULE_NAME\n                        The name of the python troposphere module that will\n                        create the template. Module must have a get_template()\n                        method that returns a valid troposphere.Template\n                        object\n  -t TEMPLATE_FILE, --template_file TEMPLATE_FILE\n                        The path to a cloud formation template file.\n  -p PARAMETER_FILES, --parameter_files PARAMETER_FILES\n                        Comma separated yaml parameter files that will be\n                        passed to cloud formation as parameters\n  -c CAPABILITIES, --capabilities CAPABILITIES\n                        Comma separated list of AWS capabilities. default:\n                        CAPABILITY_NAMED_IAM\n  -r REGION, --region REGION\n                        The name of the AWS region to perform operations.\n                        default is the env variable: AWS_DEFAULT_REGION\n  --auto_approve        If set, user will not be prompted to approve changes.\n                        default=False\n</code></pre>\n<h3>Usage Example</h3>\n<ol>\n<li>\n<p>Create a cloud formation template using yaml or json formation</p>\n<p>OR</p>\n<p>Create a python module (script) using <a href=\"https://github.com/cloudtools/troposphere\" rel=\"nofollow\">troposphere</a>\nthat has at least one method called get_template() which returns the un-rendered troposphere.\nTemplate() object.</p>\n<p>In the <code>example.py</code> script below, we create an IAM user inside the function get_template() and return\nthe completed template object</p>\n<p>example.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">troposphere</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">troposphere</span> <span class=\"kn\">import</span> <span class=\"n\">iam</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_template</span><span class=\"p\">():</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">()</span>\n    <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span>\n        <span class=\"n\">iam</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"testIamUser\"</span><span class=\"p\">,</span>\n            <span class=\"n\">UserName</span><span class=\"o\">=</span><span class=\"s2\">\"tropoform_test_user\"</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">template</span>\n</pre>\n</li>\n<li>\n<p>Configure your AWS credentials\n<a href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html\" rel=\"nofollow\">https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html</a>\nso that you can make API / CLI calls.</p>\n<ul>\n<li>Test your credentials with an awscli command like <code>aws s3 ls</code></li>\n<li>or you can test the boto3 python api <code>python3 -c \"import boto3; client = boto3.client('s3'); print(client.list_buckets())\"</code></li>\n</ul>\n</li>\n<li>\n<p>Run a <code>tropoform plan</code> on the stack and see that one IAM User resource will be created</p>\n<p>Using a cloud formation template</p>\n<pre><code>$ tropoform plan myStack -t example_cfn_template.yaml\nSTACK: myStack is not yet deployed\nSTACK: myStack creates 1\n# ) action   logical_id                resource_type\n 1) Create   testIamUser               AWS::IAM::User\n</code></pre>\n<p>Or using a troposphere module</p>\n<pre><code>$ tropoform plan myStack -m example.py\nSTACK: myStack is not yet deployed\nSTACK: myStack creates 1\n# ) action   logical_id                resource_type\n 1) Create   testIamUser               AWS::IAM::User\n</code></pre>\n</li>\n<li>\n<p>Use <code>tropofrom apply</code> (create) the stack</p>\n<p>Using a cloud formation template</p>\n<pre><code>$ tropoform apply myStack -t example_template.json\nSTACK: myStack, Current Status: None\nCREATING Stack: myStack with 1 resources\nAre you sure? [yes|no] yes\nSTACK: myStack, Status: CREATE_IN_PROGRESS - 16:36:10\nSTACK: myStack, Status: CREATE_IN_PROGRESS - 16:36:25\nSTACK: myStack, Status: CREATE_COMPLETE - 16:36:41\nSTACK: myStack deployed 1 resources in 00:00:48\nSTACK OUTPUTS:\n</code></pre>\n<p>Or using a troposphere module</p>\n<pre><code>$ tropoform apply myStack -m example.py\nSTACK: myStack, Current Status: None\nCREATING Stack: myStack with 1 resources\nAre you sure? [yes|no] yes\nSTACK: myStack, Status: CREATE_IN_PROGRESS - 16:36:10\nSTACK: myStack, Status: CREATE_IN_PROGRESS - 16:36:25\nSTACK: myStack, Status: CREATE_COMPLETE - 16:36:41\nSTACK: myStack deployed 1 resources in 00:00:48\nSTACK OUTPUTS:\n</code></pre>\n</li>\n<li>\n<p>Use <code>tropoform list</code> to see stacks that are applied. Notice it is in status CREATE_COMPLETE</p>\n<pre><code>$ tropoform list\nstack_name           stack_status         drift_status         stack_description\nmyStack              CREATE_COMPLETE      NOT_CHECKED  \n</code></pre>\n</li>\n<li>\n<p>Update the example.template and add another resource</p>\n<p>example.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">troposphere</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">troposphere</span> <span class=\"kn\">import</span> <span class=\"n\">iam</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_template</span><span class=\"p\">():</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">()</span>\n    <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span>\n        <span class=\"n\">iam</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"testIamUser\"</span><span class=\"p\">,</span>\n            <span class=\"n\">UserName</span><span class=\"o\">=</span><span class=\"s2\">\"tropoform_test_user\"</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span>\n        <span class=\"n\">iam</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"testIamUser2\"</span><span class=\"p\">,</span>\n            <span class=\"n\">UserName</span><span class=\"o\">=</span><span class=\"s2\">\"tropoform_test_user2\"</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">template</span>\n</pre>\n<p>and run a new <code>tropoform plan</code>. Notice that it will add one new resource.</p>\n<pre><code>$ tropoform plan myStack -m example.py\nSTACK: myStack has 1 detected changes\n# ) action   logical_id           resource_id               resource_type                  scope      Replace?\n 1) Add      testIamUser2                                   AWS::IAM::User                 [] \n</code></pre>\n</li>\n<li>\n<p><code>tropoform apply</code> the changes and then use a <code>tropoform list</code> to verify</p>\n<pre><code>$ tropoform apply myStack -m example.py\nSTACK: myStack, Current Status: CREATE_COMPLETE\nUPDATING Stack: myStack\nAre you sure? [yes|no] yes\nSTACK: myStack, Status: UPDATE_IN_PROGRESS - 16:42:38\nSTACK: myStack, Status: UPDATE_IN_PROGRESS - 16:42:54\nSTACK: myStack, Status: UPDATE_COMPLETE - 16:43:09\nSTACK: myStack updated 2 resources in 00:00:48\nSTACK OUTPUTS:\n\n$ tropoform list\nstack_name           stack_status         drift_status         stack_description\nmyStack              UPDATE_COMPLETE      NOT_CHECKED   \n</code></pre>\n</li>\n<li>\n<p><code>destroy</code> the stack when you are done with it</p>\n<pre><code>$ tropoform destroy myStack\nDELETING STACK: myStack with 2 resources\nAre you sure? [yes|no] yes\nSTACK: myStack, Status: UPDATE_COMPLETE - 16:44:37\nSTACK: myStack deleted in 00:00:15\n\n</code></pre>\n</li>\n</ol>\n<h4>Additional features</h4>\n<ol>\n<li>\n<p>Parameter files</p>\n<p>Often cloudformation templates will require parameters so that they can be easily\nreusable. You can create yaml based files with key: value pairs and add them as\narguments to the <code>tropoform plan</code> and <code>tropoform apply</code> operations</p>\n<p>example_parms1.yaml</p>\n<pre><span class=\"nt\">Parm1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Parameter 1</span>\n<span class=\"nt\">Parm2</span><span class=\"p\">:</span> <span class=\"s\">\"2\"</span>\n</pre>\n<p>example_parms2.yaml</p>\n<pre><span class=\"nt\">Parm3</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Parameter 3</span>\n<span class=\"nt\">Parm4</span><span class=\"p\">:</span> <span class=\"s\">\"4\"</span>\n</pre>\n<p>Using the parameter files in an apply</p>\n<pre><code>$ tropoform apply myStack -m example.py -p example_parms1.yaml,example_parms2.yaml\n\n</code></pre>\n</li>\n<li>\n<p>Capabilities</p>\n<p>Cloud formation stacks may require acknowledgement that it will create resources of\ncertain types. The most common is CAPABILITIES_NAMED_IAM which authorizes cloud formation\nto create IAM resources. This is included by default in tropoform. But if your stack\nrequires additional capabilities, you can include them with the <code>-c</code> argument. See more\ninformation about capabilities in this documentation:\n<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStack.html\" rel=\"nofollow\">https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStack.html</a></p>\n<p>Using additional capabilities in an apply</p>\n<pre><code>$ tropoform apply myStack -m example.py -c CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND\n\n</code></pre>\n</li>\n<li>\n<p>Regions</p>\n<p>By default, troposphere will read the environment variable AWS_DEFAULT_REGION to determine\nwhere to manage stacks. But if you want to specify a different region for an operation\npass the '-r' or '--region' argument</p>\n<p>Specifying a region in a list command</p>\n<pre><code>$ tropoform list -r us-east-2\n\n</code></pre>\n</li>\n<li>\n<p>Stack Names and Module Name</p>\n<p>If the name you want to specify for your cloudformation stack is in the current\nworking directory and has the same name as the troposphere script, then you can omit\nthe module_name parameter</p>\n<p>Example of creating a cloud formation stack called \"example\" when \"example.py\" troposphere\nscript exists in the current working directory</p>\n<pre><code>$ tropoform apply example\n\n</code></pre>\n<p>Example of creating a cloud formation stack called \"myStack\" when \"example.py\" troposphere\nscript exists in some filesystem location</p>\n<pre><code>$ tropoform apply myStack -m ../scripts/example.py\n\n</code></pre>\n</li>\n<li>\n<p>Auto Approve</p>\n<p>Sometimes when running tropoform in automated scripts, you dont want to be prompted to say\nyes to confirm the <code>apply</code> or <code>destroy</code> operation</p>\n<p>Example <code>--auto_approve</code></p>\n<pre><code>$ tropoform apply example --auto_approve\n</code></pre>\n</li>\n<li>\n<p>Reason for failures</p>\n<p>If your cloudformation stack fails to apply for some reason, the cloudformation event(s)\nthat caused the will be printed.</p>\n<p>In the example below, we tried to attach a ManagedIamPolicy that is intentionally misspelled</p>\n<pre><code>$ tropoform apply myStack -m example.py\nSTACK: myStack, Current Status: None\nCREATING Stack: myStack with 1 resources\nAre you sure? [yes|no] yes\nSTACK: myStack, Status: CREATE_IN_PROGRESS - 17:32:22\nSTACK: myStack, Status: CREATE_IN_PROGRESS - 17:32:38\nSTACK: myStack, Status: ROLLBACK_COMPLETE - 17:32:54\nSTACK: myStack not deployed and is in status ROLLBACK_COMPLETE\nSTACK myStack create/update FAILED due to the following stack events:\nUTC time   ResourceStatus  ResourceType                        LogicalResourceId              ResourceStatusReason\n22:32:47   CREATE_FAILED   AWS::IAM::User                      testIamUser                    Policy arn:aws:iam::aws:policy/AdministratorAcces does not exist or is not attachable. \n</code></pre>\n<p>You can use the <code>tropoform reason</code> operation to look up the status of a failed stack</p>\n<pre><code>$ tropoform reason myStack\nSTACK myStack create/update FAILED due to the following stack events:\nUTC time   ResourceStatus  ResourceType                        LogicalResourceId              ResourceStatusReason\n22:32:47   CREATE_FAILED   AWS::IAM::User                      testIamUser                    Policy arn:aws:iam::aws:policy/AdministratorAcces does not exist or is not attachable.\n</code></pre>\n</li>\n<li>\n<p>Parameters</p>\n<p>If your stack was deployed with parameters, you can check those paramaters with the\n<code>tropoform parameters</code> operation</p>\n<pre><code>$ tropoform parameters myStack\nSTACK: myStack Parameters: \nParm1                = value1 \n</code></pre>\n</li>\n<li>\n<p>Outputs</p>\n<p>If your stack specifies Output parameters, when the stack is done deploying, the outputs\nwill be printed.</p>\n<pre><code>$ tropoform apply myStack -m example.py --auto_approve\nSTACK: myStack, Current Status: None\nCREATING Stack: myStack with 1 resources\nSTACK: myStack, Status: CREATE_IN_PROGRESS - 17:40:44\nSTACK: myStack, Status: CREATE_IN_PROGRESS - 17:40:59\nSTACK: myStack, Status: CREATE_COMPLETE - 17:41:15\nSTACK: myStack deployed 1 resources in 00:00:48\nSTACK OUTPUTS:\nuserArn              = arn:aws:iam::357849880876:user/tropoform_test_user\n</code></pre>\n<p>If you want to access those outputs later, you can run <code>tropoform output</code></p>\n<pre><code>$ tropoform output myStack\nSTACK OUTPUTS:\nuserArn              = arn:aws:iam::357849880876:user/tropoform_test_user\n</code></pre>\n</li>\n</ol>\n<h3>Contributions welcome!</h3>\n<p>Open issues and send pull requests via the github repo <a href=\"https://github.com/cloudshiftstrategies/tropoform\" rel=\"nofollow\">https://github.com/cloudshiftstrategies/tropoform</a></p>\n\n          </div>"}, "last_serial": 6665661, "releases": {"0.1.11": [{"comment_text": "", "digests": {"md5": "1fd8fb48ce612983054609867f13c6b7", "sha256": "e262a38e7dd08a8b06e037debccfe3e286821e81068e20e21c371528cfc5c480"}, "downloads": -1, "filename": "tropoform-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "1fd8fb48ce612983054609867f13c6b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 30974, "upload_time": "2019-04-13T07:47:53", "upload_time_iso_8601": "2019-04-13T07:47:53.063206Z", "url": "https://files.pythonhosted.org/packages/74/a2/0e86ea5af9f7ee76539485e44fd9c4bd133e5253b0fc3d87526c1eb362e2/tropoform-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8727f2f3e419ac56ef4ee73265239548", "sha256": "ca1926f17e83adefe4322ba20fed5182f014946a685f22fa6b60d4e1330f0ad6"}, "downloads": -1, "filename": "tropoform-0.1.11.tar.gz", "has_sig": false, "md5_digest": "8727f2f3e419ac56ef4ee73265239548", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8719, "upload_time": "2019-04-13T07:47:54", "upload_time_iso_8601": "2019-04-13T07:47:54.407614Z", "url": "https://files.pythonhosted.org/packages/d5/0e/e2ffd0fabe7ccc725e39b7dc4dff4e1b11303fa0baead0664d93399bf47e/tropoform-0.1.11.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "964d1d43ce3184d1267efdcc8d958e12", "sha256": "aa6bf0bc829b8e4cf0078419a079560296aa67f0be6b827211dbb62f6f50f7c6"}, "downloads": -1, "filename": "tropoform-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "964d1d43ce3184d1267efdcc8d958e12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 37091, "upload_time": "2019-04-14T03:57:31", "upload_time_iso_8601": "2019-04-14T03:57:31.182603Z", "url": "https://files.pythonhosted.org/packages/5a/41/eb098b4eda3aba2ee623d7076155a40bc51675ca75b68a2801f0fed0afbb/tropoform-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8519f5924ea074d92b62e020f418ae42", "sha256": "0a0fcfe3b9057b462bdfd5c246d7c7b1e69d7780765e3803f199058f86cfad90"}, "downloads": -1, "filename": "tropoform-0.2.3.tar.gz", "has_sig": false, "md5_digest": "8519f5924ea074d92b62e020f418ae42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21526, "upload_time": "2019-04-14T03:57:32", "upload_time_iso_8601": "2019-04-14T03:57:32.648534Z", "url": "https://files.pythonhosted.org/packages/88/b8/90cf69e5b90bd1fa2db2b78ffeab21c5c0403d2e1e23591ce33f1b904542/tropoform-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "d16f72aa0372791af259ed9b6b9de55e", "sha256": "b369c1e5adb4f5b339658dfbf8aae64dadf5c0307352e4abd5f85f1df55451b6"}, "downloads": -1, "filename": "tropoform-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d16f72aa0372791af259ed9b6b9de55e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 37090, "upload_time": "2019-04-17T15:40:17", "upload_time_iso_8601": "2019-04-17T15:40:17.387398Z", "url": "https://files.pythonhosted.org/packages/80/e4/9fc7b2f3896221fc3317467618c68aed932fc23c6e3fe6b3aa49a4c88af7/tropoform-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ffa29b6d983f3d4e698183263db61a0", "sha256": "44b8848b25053b3901c8a76f6529f23aea8d5dbab15463bea105439633b125e0"}, "downloads": -1, "filename": "tropoform-0.2.4.tar.gz", "has_sig": false, "md5_digest": "3ffa29b6d983f3d4e698183263db61a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21548, "upload_time": "2019-04-17T15:40:20", "upload_time_iso_8601": "2019-04-17T15:40:20.027938Z", "url": "https://files.pythonhosted.org/packages/f4/ef/e85b1e88244e9769c5ece2133fcdf53392e45d16e9c34ad2abb91935444d/tropoform-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "88e3f83e1e7e8499bbb1e8048b6877d4", "sha256": "987ac29f9aa6440c1cd931891b82e957a1907d9f65a7353c99f3dde6119eb7de"}, "downloads": -1, "filename": "tropoform-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "88e3f83e1e7e8499bbb1e8048b6877d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 37129, "upload_time": "2019-04-17T15:57:49", "upload_time_iso_8601": "2019-04-17T15:57:49.437361Z", "url": "https://files.pythonhosted.org/packages/9f/b4/da07ab20ed92bc276bc96bfabafdc8bfbe43491d946221bc0a06b13e888e/tropoform-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f19411684efb371278a4451e75fc6b5a", "sha256": "b7681a5157da57e81902c86a414205423e1a653550198cb1f06e83407294393d"}, "downloads": -1, "filename": "tropoform-0.2.5.tar.gz", "has_sig": false, "md5_digest": "f19411684efb371278a4451e75fc6b5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21670, "upload_time": "2019-04-17T15:57:50", "upload_time_iso_8601": "2019-04-17T15:57:50.988238Z", "url": "https://files.pythonhosted.org/packages/db/2c/35fcef64f91b4c272cc112dd0b464f4d43019784bdcc0c349b03099a1468/tropoform-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "d2d9507bf9649184d16715a3699bff04", "sha256": "c332d0d4eb002a5388409c621935c7b225c8f6ee628afe192b18ecc0442b8492"}, "downloads": -1, "filename": "tropoform-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d2d9507bf9649184d16715a3699bff04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 37135, "upload_time": "2019-04-17T18:32:17", "upload_time_iso_8601": "2019-04-17T18:32:17.829020Z", "url": "https://files.pythonhosted.org/packages/13/15/12ecfb3197a10f72a8395afd760428026cb296144bf53bdb04209740525d/tropoform-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11096f59f435e0e5c60c9d4cb8699bfd", "sha256": "9e1923760293b0202d6fd0a37c79670970c812a435ea2e2438792b679fd0dbfd"}, "downloads": -1, "filename": "tropoform-0.2.6.tar.gz", "has_sig": false, "md5_digest": "11096f59f435e0e5c60c9d4cb8699bfd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21676, "upload_time": "2019-04-17T18:32:19", "upload_time_iso_8601": "2019-04-17T18:32:19.294212Z", "url": "https://files.pythonhosted.org/packages/b9/13/36d8f32e868b52e8869917a36c39bf33713bdd50092bbd4c44c8b845fb76/tropoform-0.2.6.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2d4d71a79b6f4c06a2a34de9949cdc21", "sha256": "416f9dc05b19369ded19475574f40e69d84066eac07678a9b76d6cf5c48dec55"}, "downloads": -1, "filename": "tropoform-0.3.0-py3.6.egg", "has_sig": false, "md5_digest": "2d4d71a79b6f4c06a2a34de9949cdc21", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3", "size": 54456, "upload_time": "2019-12-14T22:13:47", "upload_time_iso_8601": "2019-12-14T22:13:47.480641Z", "url": "https://files.pythonhosted.org/packages/69/0a/d9911fce50404f819dfe7fe7acb0307a11f7b07f89931b00a9257109cc1d/tropoform-0.3.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "17aeb215ab4809cd0d0e3ab92c259936", "sha256": "9160b3352c59a29f606c10b7ec50982a4fcedf3101061bd9aba97c606a96ef41"}, "downloads": -1, "filename": "tropoform-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "17aeb215ab4809cd0d0e3ab92c259936", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 31549, "upload_time": "2019-12-14T22:13:45", "upload_time_iso_8601": "2019-12-14T22:13:45.875735Z", "url": "https://files.pythonhosted.org/packages/f0/e7/d977d6612ab21d3806028a016896d4fcd0f7ba702e068bd3662069a3f48a/tropoform-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4794786bdd84db649de7a3492a1e7751", "sha256": "3026ea00c0cda946b717a91c9a1dd852d1e9c7e1736c52d8220b46388e669c48"}, "downloads": -1, "filename": "tropoform-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4794786bdd84db649de7a3492a1e7751", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 18698, "upload_time": "2019-12-14T22:13:49", "upload_time_iso_8601": "2019-12-14T22:13:49.213998Z", "url": "https://files.pythonhosted.org/packages/19/76/eadb1fb9a4d1e5015a182a5611fd77f156eeea2f52046b73948cb97ad395/tropoform-0.3.0.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "07d8ed4eb445590132042292afca3861", "sha256": "0470f4f118cff5fbba7852f13aab89a8f4fdc00186a6ed66eabd8fd0f01959a5"}, "downloads": -1, "filename": "tropoform-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "07d8ed4eb445590132042292afca3861", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 111874, "upload_time": "2019-12-18T21:48:04", "upload_time_iso_8601": "2019-12-18T21:48:04.222374Z", "url": "https://files.pythonhosted.org/packages/6e/98/6957390ea5993defcb56e583365e5b555a7fe278ce9f98da3d1b39070440/tropoform-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96057f864db74dec29348969091e3d99", "sha256": "b30b9d8c35f30c10cac07aa6f288304c6569a7374b48176b3da121987da40714"}, "downloads": -1, "filename": "tropoform-0.3.5.tar.gz", "has_sig": false, "md5_digest": "96057f864db74dec29348969091e3d99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 18959, "upload_time": "2019-12-18T21:48:05", "upload_time_iso_8601": "2019-12-18T21:48:05.742752Z", "url": "https://files.pythonhosted.org/packages/3b/87/95b4e8f4d40a6a27f7e7cedb52ea885a5758cd1f0ee1268b309d9e93f7ef/tropoform-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "9ae61fc3a3f55bd7ad40721657991f59", "sha256": "dd92cb29f2b7cc8abbe8e9cd514da26ba704a997564fa779089755e3294d1d3b"}, "downloads": -1, "filename": "tropoform-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "9ae61fc3a3f55bd7ad40721657991f59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 32246, "upload_time": "2019-12-25T07:16:14", "upload_time_iso_8601": "2019-12-25T07:16:14.035087Z", "url": "https://files.pythonhosted.org/packages/93/37/059962ef09274651083333a6dd2dd99d2d6a34d55ad3003e95a987927850/tropoform-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cad6b728fca7bb726df18c64c1a1374", "sha256": "2175d24c83c591e1d5d44fa76c755b4b44592a5688952f7394b5735714d1ba6b"}, "downloads": -1, "filename": "tropoform-0.3.6.tar.gz", "has_sig": false, "md5_digest": "1cad6b728fca7bb726df18c64c1a1374", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 22634, "upload_time": "2019-12-25T07:16:15", "upload_time_iso_8601": "2019-12-25T07:16:15.741657Z", "url": "https://files.pythonhosted.org/packages/7c/ff/d2ef651e297f7f78afd9b18d7361ed0e87e69f9b82869535a44d4928829a/tropoform-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "a9afede0780703a11e8ac7e3e8f26709", "sha256": "dbb0850bd66eea3c3b818974369fa669c24c9c99d9146ec16b934e6204b7427d"}, "downloads": -1, "filename": "tropoform-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a9afede0780703a11e8ac7e3e8f26709", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16785, "upload_time": "2019-12-25T07:35:48", "upload_time_iso_8601": "2019-12-25T07:35:48.479102Z", "url": "https://files.pythonhosted.org/packages/1d/6c/2c53d21683d5d6d47aa2e8866aab059ee2b2ce5d49dbbd56334a9a9af679/tropoform-0.3.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ad0f4f513ea8ae7ebf24e5453333d7e", "sha256": "8edd1f4b7f3b23efcfb39e2303fab70390fdd3f9df4c3ef7306644151b202972"}, "downloads": -1, "filename": "tropoform-0.3.7.tar.gz", "has_sig": false, "md5_digest": "3ad0f4f513ea8ae7ebf24e5453333d7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 19977, "upload_time": "2019-12-25T07:35:49", "upload_time_iso_8601": "2019-12-25T07:35:49.723741Z", "url": "https://files.pythonhosted.org/packages/93/cb/8dc90b9df7197228b025de9a796aa252a746368f59c85710bcb8ef3fc729/tropoform-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "39ca940944b71381d0809a7bc0b81021", "sha256": "07beff16d52f0a894d4a127aec8332398a14eaa5f9ad1823cfa075154c394c6d"}, "downloads": -1, "filename": "tropoform-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "39ca940944b71381d0809a7bc0b81021", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16572, "upload_time": "2020-02-20T03:50:06", "upload_time_iso_8601": "2020-02-20T03:50:06.669975Z", "url": "https://files.pythonhosted.org/packages/f2/e7/7ca1042e3d809c72f6b4c8576b146399e486ec25f90bf7e47957f9f5d7e1/tropoform-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35a364c232ff621247044544d7b9fe11", "sha256": "3b58b587efbd12bf23e4080f223048cb307a1a359b63aa26b155bb443d30fb0d"}, "downloads": -1, "filename": "tropoform-0.3.8.tar.gz", "has_sig": false, "md5_digest": "35a364c232ff621247044544d7b9fe11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 19327, "upload_time": "2020-02-20T03:50:08", "upload_time_iso_8601": "2020-02-20T03:50:08.139808Z", "url": "https://files.pythonhosted.org/packages/7a/8d/9e761388713b2dd2156c8b174917e9b1a521a091206ac218a030419ef0e6/tropoform-0.3.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "39ca940944b71381d0809a7bc0b81021", "sha256": "07beff16d52f0a894d4a127aec8332398a14eaa5f9ad1823cfa075154c394c6d"}, "downloads": -1, "filename": "tropoform-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "39ca940944b71381d0809a7bc0b81021", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16572, "upload_time": "2020-02-20T03:50:06", "upload_time_iso_8601": "2020-02-20T03:50:06.669975Z", "url": "https://files.pythonhosted.org/packages/f2/e7/7ca1042e3d809c72f6b4c8576b146399e486ec25f90bf7e47957f9f5d7e1/tropoform-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35a364c232ff621247044544d7b9fe11", "sha256": "3b58b587efbd12bf23e4080f223048cb307a1a359b63aa26b155bb443d30fb0d"}, "downloads": -1, "filename": "tropoform-0.3.8.tar.gz", "has_sig": false, "md5_digest": "35a364c232ff621247044544d7b9fe11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 19327, "upload_time": "2020-02-20T03:50:08", "upload_time_iso_8601": "2020-02-20T03:50:08.139808Z", "url": "https://files.pythonhosted.org/packages/7a/8d/9e761388713b2dd2156c8b174917e9b1a521a091206ac218a030419ef0e6/tropoform-0.3.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:43 2020"}