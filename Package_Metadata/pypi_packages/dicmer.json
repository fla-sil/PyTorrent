{"info": {"author": "Oleksandr Shepetko", "author_email": "a@shepetko.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# DicMer\n\nDicMer is a Python mini library for recursively merging dictionaries.\n\n\n## Build status\n\n[![Build Status](https://travis-ci.org/ashep/dicmer.svg?branch=master)](https://travis-ci.org/ashep/dicmer)\n[![Coverage](https://codecov.io/gh/ashep/dicmer/branch/master/graph/badge.svg)](https://codecov.io/gh/ashep/dicmer)\n\n\n## Features\n\n* Unlimited number and depth of source dictionaries.\n* Doesn't modify source dictionaries. \n* Properly merges lists.\n\n\n## Requirements\n\nPython >=3.5\n\n\n## Installation\n\n```bash\npip install dicmer\n```\n\n## Usage\n\nFollowing example:\n\n```python\nfrom dicmer import dict_merge\n\na = {\n    'string': 'Lorem Ipsum',\n    'dicts': {\n        'b1': 'It is simply dummy text',\n        'b2': {\n            'b2_1': 'Printing and typesetting industry',\n            'b2_2': 'It has survived not only five centuries',\n        }\n    },\n    'list': [\n        'What is Lorem Ipsum?',\n        'Where does it come from?',\n    ]\n}\n\nb = {\n    'dicts': {\n        'b2': {\n            'b2_1': 'WARNING: This key was overwritten!',\n            'b2_3': 'WARNING: This key was aded!',\n        },\n        'b3': 'WARNING: This key was added!'\n    },\n    'list': [\n        'Why do we use it?',\n        'Where can I get some?',\n    ],\n    'new key': {\n        'I am': 'a new string!'\n    }\n}\n\nprint(dict_merge(a, b))\n```\n\nWill provide following result:\n\n```python\n{\n    'string': 'Lorem Ipsum', \n    'dicts': {\n        'b1': 'It is simply dummy text', \n        'b2': {\n            'b2_1': 'WARNING: This key was overwritten!', \n            'b2_2': 'It has survived not only five centuries', \n            'b2_3': 'WARNING: This key was aded!'\n        }, \n        'b3': 'WARNING: This key was added!'\n    },\n    'list': [\n        'What is Lorem Ipsum?',\n        'Where does it come from?',\n        'Why do we use it?',\n        'Where can I get some?'\n    ], \n    'new key': {\n        'I am': 'a new dict!'\n    }\n}\n```\n\n## Documentation\n\nSee usage example.\n\n\n## Testing\n\n```bash\npython setup.py test\n```\nor\n\n```bash\nmake test\n```\n\n\n## Contributing\n\nIf you want to contribute to a project and make it better, your help is very \nwelcome. Contributing is also a great way to learn more about social coding on \nGithub, new technologies and and their ecosystems and how to make constructive, \nhelpful bug reports, feature requests and the noblest of all contributions: \na good, clean pull request.\n\n- Create a personal fork of the project on Github.\n- Clone the fork on your local machine. Your remote repo on Github is called \n  `origin`.\n- Add the original repository as a remote called `upstream`.\n- If you created your fork a while ago be sure to pull upstream changes into \n  your local repository.\n- Create a new branch to work on. Branch from `develop` if it exists, else from \n  `master`.\n- Implement/fix your feature, comment your code.\n- Follow the code style of the project, including indentation.\n- If the project has tests run them.\n- Write or adapt tests as needed.\n- Add or change the documentation as needed.\n- Squash your commits into a single commit with git's interactive rebase. Create \n  a new branch if necessary.\n- Push your branch to your fork on Github, the remote `origin`.\n- From your fork open a pull request in the correct branch. Target the project's \n  `develop` branch if there is one, else go for `master`.\n- If the maintainer requests further changes just push them to your branch. \n- Once the pull request is approved and merged you can pull the changes from \n  `upstream` to your local repo and delete your extra branch(es).\n\nAnd last but not least: Always write your commit messages in the present tense. \nYour commit message should describe what the commit, when applied, does to the \ncode \u2013 not what you did to the code.\n\n\n## Roadmap\n\nNone.\n\n\n## Support\n\nIf you have any issues or enhancement proposals feel free to report them via \nproject's [Issue Tracker](https://github.com/ashep/dicmer/issues). \n\n\n## Authors\n\n* [Oleksandr Shepetko](https://shepetko.com) -- initial work.\n\n\n## Credits\n\nNone.\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE.md](LICENSE.md) \nfile for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ashep/dicmer/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ashep/dicmer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dicmer", "package_url": "https://pypi.org/project/dicmer/", "platform": "", "project_url": "https://pypi.org/project/dicmer/", "project_urls": {"Download": "https://github.com/ashep/dicmer/archive/master.zip", "Homepage": "https://github.com/ashep/dicmer"}, "release_url": "https://pypi.org/project/dicmer/0.1/", "requires_dist": null, "requires_python": "", "summary": "Mini library for recursively merging dictionaries", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DicMer</h1>\n<p>DicMer is a Python mini library for recursively merging dictionaries.</p>\n<h2>Build status</h2>\n<p><a href=\"https://travis-ci.org/ashep/dicmer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87ed987981b1cf6f71e509cab3e4ca02beb23af2/68747470733a2f2f7472617669732d63692e6f72672f61736865702f6469636d65722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ashep/dicmer\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a798588d859cc6748d1177cf5c671ae083d28a7d/68747470733a2f2f636f6465636f762e696f2f67682f61736865702f6469636d65722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h2>Features</h2>\n<ul>\n<li>Unlimited number and depth of source dictionaries.</li>\n<li>Doesn't modify source dictionaries.</li>\n<li>Properly merges lists.</li>\n</ul>\n<h2>Requirements</h2>\n<p>Python &gt;=3.5</p>\n<h2>Installation</h2>\n<pre>pip install dicmer\n</pre>\n<h2>Usage</h2>\n<p>Following example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dicmer</span> <span class=\"kn\">import</span> <span class=\"n\">dict_merge</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'string'</span><span class=\"p\">:</span> <span class=\"s1\">'Lorem Ipsum'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'dicts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'b1'</span><span class=\"p\">:</span> <span class=\"s1\">'It is simply dummy text'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'b2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'b2_1'</span><span class=\"p\">:</span> <span class=\"s1\">'Printing and typesetting industry'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'b2_2'</span><span class=\"p\">:</span> <span class=\"s1\">'It has survived not only five centuries'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'What is Lorem Ipsum?'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Where does it come from?'</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'dicts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'b2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'b2_1'</span><span class=\"p\">:</span> <span class=\"s1\">'WARNING: This key was overwritten!'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'b2_3'</span><span class=\"p\">:</span> <span class=\"s1\">'WARNING: This key was aded!'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'b3'</span><span class=\"p\">:</span> <span class=\"s1\">'WARNING: This key was added!'</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'Why do we use it?'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Where can I get some?'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"s1\">'new key'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'I am'</span><span class=\"p\">:</span> <span class=\"s1\">'a new string!'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dict_merge</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n</pre>\n<p>Will provide following result:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'string'</span><span class=\"p\">:</span> <span class=\"s1\">'Lorem Ipsum'</span><span class=\"p\">,</span> \n    <span class=\"s1\">'dicts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'b1'</span><span class=\"p\">:</span> <span class=\"s1\">'It is simply dummy text'</span><span class=\"p\">,</span> \n        <span class=\"s1\">'b2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'b2_1'</span><span class=\"p\">:</span> <span class=\"s1\">'WARNING: This key was overwritten!'</span><span class=\"p\">,</span> \n            <span class=\"s1\">'b2_2'</span><span class=\"p\">:</span> <span class=\"s1\">'It has survived not only five centuries'</span><span class=\"p\">,</span> \n            <span class=\"s1\">'b2_3'</span><span class=\"p\">:</span> <span class=\"s1\">'WARNING: This key was aded!'</span>\n        <span class=\"p\">},</span> \n        <span class=\"s1\">'b3'</span><span class=\"p\">:</span> <span class=\"s1\">'WARNING: This key was added!'</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'What is Lorem Ipsum?'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Where does it come from?'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Why do we use it?'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Where can I get some?'</span>\n    <span class=\"p\">],</span> \n    <span class=\"s1\">'new key'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'I am'</span><span class=\"p\">:</span> <span class=\"s1\">'a new dict!'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Documentation</h2>\n<p>See usage example.</p>\n<h2>Testing</h2>\n<pre>python setup.py <span class=\"nb\">test</span>\n</pre>\n<p>or</p>\n<pre>make <span class=\"nb\">test</span>\n</pre>\n<h2>Contributing</h2>\n<p>If you want to contribute to a project and make it better, your help is very\nwelcome. Contributing is also a great way to learn more about social coding on\nGithub, new technologies and and their ecosystems and how to make constructive,\nhelpful bug reports, feature requests and the noblest of all contributions:\na good, clean pull request.</p>\n<ul>\n<li>Create a personal fork of the project on Github.</li>\n<li>Clone the fork on your local machine. Your remote repo on Github is called\n<code>origin</code>.</li>\n<li>Add the original repository as a remote called <code>upstream</code>.</li>\n<li>If you created your fork a while ago be sure to pull upstream changes into\nyour local repository.</li>\n<li>Create a new branch to work on. Branch from <code>develop</code> if it exists, else from\n<code>master</code>.</li>\n<li>Implement/fix your feature, comment your code.</li>\n<li>Follow the code style of the project, including indentation.</li>\n<li>If the project has tests run them.</li>\n<li>Write or adapt tests as needed.</li>\n<li>Add or change the documentation as needed.</li>\n<li>Squash your commits into a single commit with git's interactive rebase. Create\na new branch if necessary.</li>\n<li>Push your branch to your fork on Github, the remote <code>origin</code>.</li>\n<li>From your fork open a pull request in the correct branch. Target the project's\n<code>develop</code> branch if there is one, else go for <code>master</code>.</li>\n<li>If the maintainer requests further changes just push them to your branch.</li>\n<li>Once the pull request is approved and merged you can pull the changes from\n<code>upstream</code> to your local repo and delete your extra branch(es).</li>\n</ul>\n<p>And last but not least: Always write your commit messages in the present tense.\nYour commit message should describe what the commit, when applied, does to the\ncode \u2013 not what you did to the code.</p>\n<h2>Roadmap</h2>\n<p>None.</p>\n<h2>Support</h2>\n<p>If you have any issues or enhancement proposals feel free to report them via\nproject's <a href=\"https://github.com/ashep/dicmer/issues\" rel=\"nofollow\">Issue Tracker</a>.</p>\n<h2>Authors</h2>\n<ul>\n<li><a href=\"https://shepetko.com\" rel=\"nofollow\">Oleksandr Shepetko</a> -- initial work.</li>\n</ul>\n<h2>Credits</h2>\n<p>None.</p>\n<h2>License</h2>\n<p>This project is licensed under the MIT License. See the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a>\nfile for details.</p>\n\n          </div>"}, "last_serial": 5498470, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f443dcc2b6f575efa62f365c40618a91", "sha256": "426db51f075e4f8492bdea51f81cb00cb1744eb0d3f4293f4f482c2a2673ad11"}, "downloads": -1, "filename": "dicmer-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f443dcc2b6f575efa62f365c40618a91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5344, "upload_time": "2019-07-08T00:04:22", "upload_time_iso_8601": "2019-07-08T00:04:22.560833Z", "url": "https://files.pythonhosted.org/packages/a5/af/a0a53781cac6392cbec3309710e41c451d0d886ff4881d9cf8893ed4fe91/dicmer-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f443dcc2b6f575efa62f365c40618a91", "sha256": "426db51f075e4f8492bdea51f81cb00cb1744eb0d3f4293f4f482c2a2673ad11"}, "downloads": -1, "filename": "dicmer-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f443dcc2b6f575efa62f365c40618a91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5344, "upload_time": "2019-07-08T00:04:22", "upload_time_iso_8601": "2019-07-08T00:04:22.560833Z", "url": "https://files.pythonhosted.org/packages/a5/af/a0a53781cac6392cbec3309710e41c451d0d886ff4881d9cf8893ed4fe91/dicmer-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:38:35 2020"}