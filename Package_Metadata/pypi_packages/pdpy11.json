{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# PDPy11\n\nPDPy11 is a compiler for PDP-11, written in Python.\n\nLicense: MIT\n\n## Requirements\n\n- Python 2.7 or later, or Python 3.5 (may work on earlier versions)\n- No Python modules required\n- Any platform (Windows, Mac OS, Linux)\n\n## Installation\n\n### Via git\n\n```\n$ git clone https://github.com/imachug/pdpy11\n```\n\n### Via GitHub UI\n\nPress green `Clone or download` button (it's above file list), press `Download ZIP` and extract the archive.\n\n## Docs\n\nYou can check the full docs as [docs.md](docs.md).\n\nRead how to use Sublime build system [here](sublime/README.md). For Sublime syntax highlight, see [this gist](https://gist.github.com/imachug/3ab11df5e91c8d815a8c63a76bb08b14).\n\n## TL;DR aka tutorial\n\n### Compiling single file to .bin\n\n1. Create `test.mac` file with the following content:\n\n```\nMOV #2, R1\n```\n\n2. `cd` to the directory that contains `pdpy11` (e.g. if you used `git clone`, don't run `cd pdpy11` afterwards)\n\n3. Run `python -m pdpy11 path-to/test.mac`\n\nThis will generate `test.bin` file with the following content:\n\n```\n001000 ; the file is loaded from address 1000 -- the default address\n000004 ; 4 bytes, or 2 words -- the size of the resulting code\n012701 ; MOV (PC)+, R1\n000002 ; .WORD 2\n```\n\nThe header (4 bytes) is called \".bin header\", sometimes \"binary header\".\n\nTo remove \".bin header\", run `python -m pdpy11 path-to/test.mac --raw`, or add `make_raw` meta-command to the end of the file.\n\nIf you want to use `.sav` format, run `python -m pdpy11 path-to/test.mac --sav` (or use `make_sav` meta-command):\n\nFor example:\n\n```\nMOV #2, R1\nmake_raw\n```\n\n```\nMOV #2, R1\nmake_sav\n```\n\nFor debugging, you can enable `.lst` file generation by using `python -m pdpy11 path-to/test.mac --lst`. Here's an example:\n\n```\n.LINK 3000\nHELLO = 2 + 2\nWORLD: MOV #HELLO, R0\n```\n\n```\npath-to/test.mac\n000004 HELLO\n003000 WORLD\n```\n\n### Syntax\n\nStandard PDP-11 assembler syntax is used, i.e.:\n\nStrings can be surrounded by `\"`, `'` or `/`. Literal strings can be joined together: `\"A\" \"B\"` is the same as `\"AB\"`. `<n>` syntax can be used to put a raw character, e.g.: `\"A\"<12>\"B\"` inserts a newline between `\"A\"` and `\"B\"`.\n\nRegisters: `R0..R7`, with `SP = R6` and `PC = R7`.\n\nSupported commands:\n\n- `HALT`, `WAIT`, `RTI`, `BPT`, `IOT`, `RESET`, `RTT`, `START` (code 12), `STEP` (code 16), `NOP` (code 240), `CLC`, `CLV`, `CLZ`, `CLN`, `CCC`, `SEC`, `SEV`, `SEZ`, `SEN`, `SCC`, `RET`\n- `JMP`, `CALL` (as alias to `JSR PC`), `SWAB`, `CLR(B)`, `COM(B)`, `INC(B)`, `DEC(B)`, `NEG(B)`, `ADC(B)`, `SBC(B)`, `TST(B)`, `ROR(B)`, `ROL(B)`, `ASR(B)`, `ASL(B)`, `SXT`, `MTPS`, `MFPS`\n- `BR`, `BNE`, `BEQ`, `BGE`, `BLT`, `BGT`, `BLE`, `BPL`, `BMI`, `BVC`, `BHIS`, `BCC`, `BLO`, `BCS`, `BLOS`\n- `EMT`, `TRAP`, `MARK`\n- `MOV(B)`, `CMP(B)`, `BIT(B)`, `BIC(B)`, `BIS(B)`, `ADD`\n- `JSR`, `XOR`\n- `SOB`, `RTS`\n\n2 label types are supported:\n\n- global (e.g. `ABACABA`, `TEST`)\n- local (e.g. `1` or `0`). Labels like `1$` (i.e. digit + anything) are supported as well\n\nIn addition to these 2 label types, meta-label `.` is supported, pointing to the beginning of current command, e.g.:\n\n```\nMOV #100, R0\nSOB R0, . ; SOB 100 times and then continue\nBR .-2 ; branch to SOB\n```\n\n### Some useful macrocommands\n\nTo compile (\"link\") the program from another address (e.g. 0o3000), not the default 0o1000, use `.LINK 3000` macrocommand.\n\n---\n\nTo enable `pdp11asm` compatibility mode (NOT RECOMMENDED!), use `.SYNTAX pdp11asm` macrocommand.\n\n---\n\nTo store a byte, use `.BYTE n`. To store a word, use `.WORD n`. To store N zero bytes, use `.BLKB n`. To store N zero words, use `.BLKW n`.\n\n---\n\nTo insert a string, use `.ASCII` or `.ASCIZ = .ASCII + .BYTE 0`.\n\n---\n\nTo set a variable, use: `A = 7` or `A EQU 7`. Then you can use *A* instead of *7*.\n\nExample:\n\n```\nA = 7\n.WORD A\nMOV #A, R0\n```\n\n---\n\nTo insert another file, use `insert_file \"path-to-file\"` if it's a binary file or `.INCLUDE \"path-to-file.mac\"` if it's an assembler file. Notice: in `pdp11asm` compatibility mode, `.INCLUDE` works like `.INCLUDE + .END` (i.e. no code after `.INCLUDE` is compiled). To fix this, 1. don't use compatibility mode, or 2. use `.RAW_INCLUDE path-to-file.mac` (without quotes!).\n\nNotice: if you define labels (or variables) inside included files, they're not visible in the main program. Add `.EXTERN ALL` line to the beginning of included file to \"export\" all labels that are defined in the included file to the main program and all other included files, for example:\n\n**main.mac**\n\n```\n.INCLUDE \"constants.mac\"\nMOV #1, @#SOME_REGISTER1\n.INCLUDE \"a.mac\"\n```\n\n**a.mac**\n\n```\nMOV #2, @#SOME_REGISTER2\n```\n\n**constants.mac**\n\n```\n.EXTERN ALL ; same as .EXTERN SOME_REGISTER1, SOME_REGISTER2\nSOME_REGISTER1 = 177714\nSOME_REGISTER2 = 177716\n```\n\nIf you want to include `constants.mac` twice (e.g. you're going to include it in every file that uses the registers, to show that it's a dependency), use:\n\n**constants.mac**\n\n```\n.ONCE ; never compile code below twice, which would result in \"redefinition of label\" error\n.EXTERN ALL ; same as .EXTERN SOME_REGISTER1, SOME_REGISTER2\nSOME_REGISTER1 = 177714\nSOME_REGISTER2 = 177716\n```\n\nCheck [docs.md](docs.md) for more `.INCLUDE` / `.EXTERN` / `.ONCE` usecases.\n\n---\n\nTo repeat some code a few times, use:\n\n```\n.REPEAT 10 {\n    .WORD 0\n}\n```\n\nThe above is the same as `.BLKW 10`. You can use any commands or macrocommands inside `.REPEAT`.\n\n\n### Project mode\n\nIt's quite possible that you're making a big project -- otherwise, it doesn't make sense to use such a big tool as `pdpy11`. `pdpy11` has a special mode for projects.\n\n1. Create directory `TestProject`.\n\n2. Create `test.mac` file inside `TestProject` with the following content:\n\n```\nMOV #2, R1\nmake_bin\n```\n\n3. Run `python -m pdpy11 --project TestProject`.\n\nThis will generate `TestProject/test.bin` file with the same content as we got in *Compiling single file to .bin* section.\n\nNotice that we've used `make_bin`, but we didn't add `--bin` or `--raw` CLI argument. In a large project, you may have several outputs -- e.g., if you're making an OS, you may have a *bootloader* (< 512 bytes) and *os* (the kernel itself, the stuff *bootloader* loads). So you have to manually set which files should be compiled to `.bin` or `.raw` -- they are called \"include roots\".\n\n---\n\nAn interesting point is that all external labels are shared between all \"include roots\". For example:\n\n**bootloader.mac**\n\n```\n.EXTERN OS_LINK\nOS_LINK = 100000\n\n; load os\nMOV #OS_LINK, R0\n...\nCALL @#160004\n\n; startup\nJMP @#OS_STARTUP\n\nmake_raw\n```\n\n**os.mac**\n\n```\n.EXTERN OS_STARTUP\n\n.LINK OS_LINK\n\n.WORD 0 ; some options for the processor macrocode,\n.WORD 1 ; or some other constants that must be exactly\n.WORD 2 ; at OS_LINK\n\nOS_STARTUP: ; the code to be executed when the kernel is loaded\n...\n\nmake_bin\n```\n\nThe above project, when compiled, will result in two files: `bootloader` and `os.bin`, with `OS_LINK` and `OS_STARTUP` labels shared between them and all other `.mac` files.\n\n---\n\nSome other useful things added by project mode:\n\n- `.INCLUDE` now works on directories: it includes all `.mac` files inside the directory.\n- You can use `.pdpy11ignore` to set what files aren't included when `.INCLUDE` is called on directory and what files aren't checked for `make_raw` and `make_bin` (i.e. which files can't be \"include roots\").\n- You can run `.INCLUDE` on files that have `.LINK`. This is the same as compiling the included file in raw mode and embedding the raw content to current file, like with `insert_file`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pdpy11", "package_url": "https://pypi.org/project/pdpy11/", "platform": "", "project_url": "https://pypi.org/project/pdpy11/", "project_urls": null, "release_url": "https://pypi.org/project/pdpy11/1.2.2/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PDPy11</h1>\n<p>PDPy11 is a compiler for PDP-11, written in Python.</p>\n<p>License: MIT</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7 or later, or Python 3.5 (may work on earlier versions)</li>\n<li>No Python modules required</li>\n<li>Any platform (Windows, Mac OS, Linux)</li>\n</ul>\n<h2>Installation</h2>\n<h3>Via git</h3>\n<pre><code>$ git clone https://github.com/imachug/pdpy11\n</code></pre>\n<h3>Via GitHub UI</h3>\n<p>Press green <code>Clone or download</code> button (it's above file list), press <code>Download ZIP</code> and extract the archive.</p>\n<h2>Docs</h2>\n<p>You can check the full docs as <a href=\"docs.md\" rel=\"nofollow\">docs.md</a>.</p>\n<p>Read how to use Sublime build system <a href=\"sublime/README.md\" rel=\"nofollow\">here</a>. For Sublime syntax highlight, see <a href=\"https://gist.github.com/imachug/3ab11df5e91c8d815a8c63a76bb08b14\" rel=\"nofollow\">this gist</a>.</p>\n<h2>TL;DR aka tutorial</h2>\n<h3>Compiling single file to .bin</h3>\n<ol>\n<li>Create <code>test.mac</code> file with the following content:</li>\n</ol>\n<pre><code>MOV #2, R1\n</code></pre>\n<ol>\n<li>\n<p><code>cd</code> to the directory that contains <code>pdpy11</code> (e.g. if you used <code>git clone</code>, don't run <code>cd pdpy11</code> afterwards)</p>\n</li>\n<li>\n<p>Run <code>python -m pdpy11 path-to/test.mac</code></p>\n</li>\n</ol>\n<p>This will generate <code>test.bin</code> file with the following content:</p>\n<pre><code>001000 ; the file is loaded from address 1000 -- the default address\n000004 ; 4 bytes, or 2 words -- the size of the resulting code\n012701 ; MOV (PC)+, R1\n000002 ; .WORD 2\n</code></pre>\n<p>The header (4 bytes) is called \".bin header\", sometimes \"binary header\".</p>\n<p>To remove \".bin header\", run <code>python -m pdpy11 path-to/test.mac --raw</code>, or add <code>make_raw</code> meta-command to the end of the file.</p>\n<p>If you want to use <code>.sav</code> format, run <code>python -m pdpy11 path-to/test.mac --sav</code> (or use <code>make_sav</code> meta-command):</p>\n<p>For example:</p>\n<pre><code>MOV #2, R1\nmake_raw\n</code></pre>\n<pre><code>MOV #2, R1\nmake_sav\n</code></pre>\n<p>For debugging, you can enable <code>.lst</code> file generation by using <code>python -m pdpy11 path-to/test.mac --lst</code>. Here's an example:</p>\n<pre><code>.LINK 3000\nHELLO = 2 + 2\nWORLD: MOV #HELLO, R0\n</code></pre>\n<pre><code>path-to/test.mac\n000004 HELLO\n003000 WORLD\n</code></pre>\n<h3>Syntax</h3>\n<p>Standard PDP-11 assembler syntax is used, i.e.:</p>\n<p>Strings can be surrounded by <code>\"</code>, <code>'</code> or <code>/</code>. Literal strings can be joined together: <code>\"A\" \"B\"</code> is the same as <code>\"AB\"</code>. <code>&lt;n&gt;</code> syntax can be used to put a raw character, e.g.: <code>\"A\"&lt;12&gt;\"B\"</code> inserts a newline between <code>\"A\"</code> and <code>\"B\"</code>.</p>\n<p>Registers: <code>R0..R7</code>, with <code>SP = R6</code> and <code>PC = R7</code>.</p>\n<p>Supported commands:</p>\n<ul>\n<li><code>HALT</code>, <code>WAIT</code>, <code>RTI</code>, <code>BPT</code>, <code>IOT</code>, <code>RESET</code>, <code>RTT</code>, <code>START</code> (code 12), <code>STEP</code> (code 16), <code>NOP</code> (code 240), <code>CLC</code>, <code>CLV</code>, <code>CLZ</code>, <code>CLN</code>, <code>CCC</code>, <code>SEC</code>, <code>SEV</code>, <code>SEZ</code>, <code>SEN</code>, <code>SCC</code>, <code>RET</code></li>\n<li><code>JMP</code>, <code>CALL</code> (as alias to <code>JSR PC</code>), <code>SWAB</code>, <code>CLR(B)</code>, <code>COM(B)</code>, <code>INC(B)</code>, <code>DEC(B)</code>, <code>NEG(B)</code>, <code>ADC(B)</code>, <code>SBC(B)</code>, <code>TST(B)</code>, <code>ROR(B)</code>, <code>ROL(B)</code>, <code>ASR(B)</code>, <code>ASL(B)</code>, <code>SXT</code>, <code>MTPS</code>, <code>MFPS</code></li>\n<li><code>BR</code>, <code>BNE</code>, <code>BEQ</code>, <code>BGE</code>, <code>BLT</code>, <code>BGT</code>, <code>BLE</code>, <code>BPL</code>, <code>BMI</code>, <code>BVC</code>, <code>BHIS</code>, <code>BCC</code>, <code>BLO</code>, <code>BCS</code>, <code>BLOS</code></li>\n<li><code>EMT</code>, <code>TRAP</code>, <code>MARK</code></li>\n<li><code>MOV(B)</code>, <code>CMP(B)</code>, <code>BIT(B)</code>, <code>BIC(B)</code>, <code>BIS(B)</code>, <code>ADD</code></li>\n<li><code>JSR</code>, <code>XOR</code></li>\n<li><code>SOB</code>, <code>RTS</code></li>\n</ul>\n<p>2 label types are supported:</p>\n<ul>\n<li>global (e.g. <code>ABACABA</code>, <code>TEST</code>)</li>\n<li>local (e.g. <code>1</code> or <code>0</code>). Labels like <code>1$</code> (i.e. digit + anything) are supported as well</li>\n</ul>\n<p>In addition to these 2 label types, meta-label <code>.</code> is supported, pointing to the beginning of current command, e.g.:</p>\n<pre><code>MOV #100, R0\nSOB R0, . ; SOB 100 times and then continue\nBR .-2 ; branch to SOB\n</code></pre>\n<h3>Some useful macrocommands</h3>\n<p>To compile (\"link\") the program from another address (e.g. 0o3000), not the default 0o1000, use <code>.LINK 3000</code> macrocommand.</p>\n<hr>\n<p>To enable <code>pdp11asm</code> compatibility mode (NOT RECOMMENDED!), use <code>.SYNTAX pdp11asm</code> macrocommand.</p>\n<hr>\n<p>To store a byte, use <code>.BYTE n</code>. To store a word, use <code>.WORD n</code>. To store N zero bytes, use <code>.BLKB n</code>. To store N zero words, use <code>.BLKW n</code>.</p>\n<hr>\n<p>To insert a string, use <code>.ASCII</code> or <code>.ASCIZ = .ASCII + .BYTE 0</code>.</p>\n<hr>\n<p>To set a variable, use: <code>A = 7</code> or <code>A EQU 7</code>. Then you can use <em>A</em> instead of <em>7</em>.</p>\n<p>Example:</p>\n<pre><code>A = 7\n.WORD A\nMOV #A, R0\n</code></pre>\n<hr>\n<p>To insert another file, use <code>insert_file \"path-to-file\"</code> if it's a binary file or <code>.INCLUDE \"path-to-file.mac\"</code> if it's an assembler file. Notice: in <code>pdp11asm</code> compatibility mode, <code>.INCLUDE</code> works like <code>.INCLUDE + .END</code> (i.e. no code after <code>.INCLUDE</code> is compiled). To fix this, 1. don't use compatibility mode, or 2. use <code>.RAW_INCLUDE path-to-file.mac</code> (without quotes!).</p>\n<p>Notice: if you define labels (or variables) inside included files, they're not visible in the main program. Add <code>.EXTERN ALL</code> line to the beginning of included file to \"export\" all labels that are defined in the included file to the main program and all other included files, for example:</p>\n<p><strong>main.mac</strong></p>\n<pre><code>.INCLUDE \"constants.mac\"\nMOV #1, @#SOME_REGISTER1\n.INCLUDE \"a.mac\"\n</code></pre>\n<p><strong>a.mac</strong></p>\n<pre><code>MOV #2, @#SOME_REGISTER2\n</code></pre>\n<p><strong>constants.mac</strong></p>\n<pre><code>.EXTERN ALL ; same as .EXTERN SOME_REGISTER1, SOME_REGISTER2\nSOME_REGISTER1 = 177714\nSOME_REGISTER2 = 177716\n</code></pre>\n<p>If you want to include <code>constants.mac</code> twice (e.g. you're going to include it in every file that uses the registers, to show that it's a dependency), use:</p>\n<p><strong>constants.mac</strong></p>\n<pre><code>.ONCE ; never compile code below twice, which would result in \"redefinition of label\" error\n.EXTERN ALL ; same as .EXTERN SOME_REGISTER1, SOME_REGISTER2\nSOME_REGISTER1 = 177714\nSOME_REGISTER2 = 177716\n</code></pre>\n<p>Check <a href=\"docs.md\" rel=\"nofollow\">docs.md</a> for more <code>.INCLUDE</code> / <code>.EXTERN</code> / <code>.ONCE</code> usecases.</p>\n<hr>\n<p>To repeat some code a few times, use:</p>\n<pre><code>.REPEAT 10 {\n    .WORD 0\n}\n</code></pre>\n<p>The above is the same as <code>.BLKW 10</code>. You can use any commands or macrocommands inside <code>.REPEAT</code>.</p>\n<h3>Project mode</h3>\n<p>It's quite possible that you're making a big project -- otherwise, it doesn't make sense to use such a big tool as <code>pdpy11</code>. <code>pdpy11</code> has a special mode for projects.</p>\n<ol>\n<li>\n<p>Create directory <code>TestProject</code>.</p>\n</li>\n<li>\n<p>Create <code>test.mac</code> file inside <code>TestProject</code> with the following content:</p>\n</li>\n</ol>\n<pre><code>MOV #2, R1\nmake_bin\n</code></pre>\n<ol>\n<li>Run <code>python -m pdpy11 --project TestProject</code>.</li>\n</ol>\n<p>This will generate <code>TestProject/test.bin</code> file with the same content as we got in <em>Compiling single file to .bin</em> section.</p>\n<p>Notice that we've used <code>make_bin</code>, but we didn't add <code>--bin</code> or <code>--raw</code> CLI argument. In a large project, you may have several outputs -- e.g., if you're making an OS, you may have a <em>bootloader</em> (&lt; 512 bytes) and <em>os</em> (the kernel itself, the stuff <em>bootloader</em> loads). So you have to manually set which files should be compiled to <code>.bin</code> or <code>.raw</code> -- they are called \"include roots\".</p>\n<hr>\n<p>An interesting point is that all external labels are shared between all \"include roots\". For example:</p>\n<p><strong>bootloader.mac</strong></p>\n<pre><code>.EXTERN OS_LINK\nOS_LINK = 100000\n\n; load os\nMOV #OS_LINK, R0\n...\nCALL @#160004\n\n; startup\nJMP @#OS_STARTUP\n\nmake_raw\n</code></pre>\n<p><strong>os.mac</strong></p>\n<pre><code>.EXTERN OS_STARTUP\n\n.LINK OS_LINK\n\n.WORD 0 ; some options for the processor macrocode,\n.WORD 1 ; or some other constants that must be exactly\n.WORD 2 ; at OS_LINK\n\nOS_STARTUP: ; the code to be executed when the kernel is loaded\n...\n\nmake_bin\n</code></pre>\n<p>The above project, when compiled, will result in two files: <code>bootloader</code> and <code>os.bin</code>, with <code>OS_LINK</code> and <code>OS_STARTUP</code> labels shared between them and all other <code>.mac</code> files.</p>\n<hr>\n<p>Some other useful things added by project mode:</p>\n<ul>\n<li><code>.INCLUDE</code> now works on directories: it includes all <code>.mac</code> files inside the directory.</li>\n<li>You can use <code>.pdpy11ignore</code> to set what files aren't included when <code>.INCLUDE</code> is called on directory and what files aren't checked for <code>make_raw</code> and <code>make_bin</code> (i.e. which files can't be \"include roots\").</li>\n<li>You can run <code>.INCLUDE</code> on files that have <code>.LINK</code>. This is the same as compiling the included file in raw mode and embedding the raw content to current file, like with <code>insert_file</code>.</li>\n</ul>\n\n          </div>"}, "last_serial": 7092768, "releases": {"1.2.2": [{"comment_text": "", "digests": {"md5": "733303e10d071a9036db5a1c1e0a6ba1", "sha256": "7d456ba98ae35987cc82551b938dd5af338592e1e32027931ef0e9aa224212b3"}, "downloads": -1, "filename": "pdpy11-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "733303e10d071a9036db5a1c1e0a6ba1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30354, "upload_time": "2020-04-24T12:47:01", "upload_time_iso_8601": "2020-04-24T12:47:01.848057Z", "url": "https://files.pythonhosted.org/packages/5a/d0/59f26ba3628bf6417f961eebb1adefc8755ff01c36f9e1e045bb1efd6e24/pdpy11-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf39694af113a4cb5b01a66aea555d54", "sha256": "4dd4897ccecce591af1d3840436e84d3196594c74bffe21bf335d952047a3d1b"}, "downloads": -1, "filename": "pdpy11-1.2.2.tar.gz", "has_sig": false, "md5_digest": "bf39694af113a4cb5b01a66aea555d54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29864, "upload_time": "2020-04-24T12:47:04", "upload_time_iso_8601": "2020-04-24T12:47:04.647744Z", "url": "https://files.pythonhosted.org/packages/51/34/b29d82071493b4e3b69efb97ae57138df706c53027b9da20bfe08a81ae68/pdpy11-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "733303e10d071a9036db5a1c1e0a6ba1", "sha256": "7d456ba98ae35987cc82551b938dd5af338592e1e32027931ef0e9aa224212b3"}, "downloads": -1, "filename": "pdpy11-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "733303e10d071a9036db5a1c1e0a6ba1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30354, "upload_time": "2020-04-24T12:47:01", "upload_time_iso_8601": "2020-04-24T12:47:01.848057Z", "url": "https://files.pythonhosted.org/packages/5a/d0/59f26ba3628bf6417f961eebb1adefc8755ff01c36f9e1e045bb1efd6e24/pdpy11-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf39694af113a4cb5b01a66aea555d54", "sha256": "4dd4897ccecce591af1d3840436e84d3196594c74bffe21bf335d952047a3d1b"}, "downloads": -1, "filename": "pdpy11-1.2.2.tar.gz", "has_sig": false, "md5_digest": "bf39694af113a4cb5b01a66aea555d54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29864, "upload_time": "2020-04-24T12:47:04", "upload_time_iso_8601": "2020-04-24T12:47:04.647744Z", "url": "https://files.pythonhosted.org/packages/51/34/b29d82071493b4e3b69efb97ae57138df706c53027b9da20bfe08a81ae68/pdpy11-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:03 2020"}