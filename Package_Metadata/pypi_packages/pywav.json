{"info": {"author": "Saisyam Dampuri", "author_email": "saisyam@saisyam.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "======\npywav\n======\nReading WAV files with PCM/PCMA/PCMU compression or without compression. \n\nWavRead and WavWrite\n====================\nThere are two classes WavRead and WavWrite which will perform reading and writing of wave files respectively. Currenlty PCM, PCMU and PCMA formats are supported. You will get the raw data from the RTP stream which you can write into the wave file by providing information about the audio format, number of channels, sample rate etc.\n\nReading example\n===============\n::\n    \n    wave_read = pywav.WavRead(\"<filename to read>\")\n    # print parameters like number of channels, sample rate, bits per sample, audio format etc\n    # Audio format 1 = PCM (without compression)\n    # Audio format 6 = PCMA (with A-law compression)\n    # Audio format 7 = PCMU (with mu-law compression)\n    print(wave_read.getparams())\n\n\nWriting example\n===============\n::\n\n    # first parameter is the file name to write the wave data\n    # second parameter is the number of channels, the value can be 1 (mono) or 2 (stereo)\n    # third parameter is the sample rate, 8000 samples per second\n    # fourth paramaer is the bits per sample, 8 bits per sample\n    # fifth parameter is the audio format, 1 means PCM with no compression.\n    wave_write = pywav.WavWrite(\"<filename to write>\", 1, 8000, 8, 1)\n    # raw_data is the byte array. Write can be done only once for now. \n    # Incremental write will be implemented later\n    wave_write.write(<raw data>)\n    # close the file stream and save the file\n    wave_write.close()\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/saisyam/pywav/archive/ver_01.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/saisyam/pywav", "keywords": "wave", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "pywav", "package_url": "https://pypi.org/project/pywav/", "platform": "", "project_url": "https://pypi.org/project/pywav/", "project_urls": {"Download": "https://github.com/saisyam/pywav/archive/ver_01.tar.gz", "Homepage": "https://github.com/saisyam/pywav"}, "release_url": "https://pypi.org/project/pywav/1.1/", "requires_dist": null, "requires_python": "", "summary": "Read and write wav files with PCMA/PCMU compression", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Reading WAV files with PCM/PCMA/PCMU compression or without compression.</p>\n<div id=\"wavread-and-wavwrite\">\n<h2>WavRead and WavWrite</h2>\n<p>There are two classes WavRead and WavWrite which will perform reading and writing of wave files respectively. Currenlty PCM, PCMU and PCMA formats are supported. You will get the raw data from the RTP stream which you can write into the wave file by providing information about the audio format, number of channels, sample rate etc.</p>\n</div>\n<div id=\"reading-example\">\n<h2>Reading example</h2>\n<pre>wave_read = pywav.WavRead(\"&lt;filename to read&gt;\")\n# print parameters like number of channels, sample rate, bits per sample, audio format etc\n# Audio format 1 = PCM (without compression)\n# Audio format 6 = PCMA (with A-law compression)\n# Audio format 7 = PCMU (with mu-law compression)\nprint(wave_read.getparams())\n</pre>\n</div>\n<div id=\"writing-example\">\n<h2>Writing example</h2>\n<pre># first parameter is the file name to write the wave data\n# second parameter is the number of channels, the value can be 1 (mono) or 2 (stereo)\n# third parameter is the sample rate, 8000 samples per second\n# fourth paramaer is the bits per sample, 8 bits per sample\n# fifth parameter is the audio format, 1 means PCM with no compression.\nwave_write = pywav.WavWrite(\"&lt;filename to write&gt;\", 1, 8000, 8, 1)\n# raw_data is the byte array. Write can be done only once for now.\n# Incremental write will be implemented later\nwave_write.write(&lt;raw data&gt;)\n# close the file stream and save the file\nwave_write.close()\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6574040, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "c399e643945b3817622fbb2cf383f994", "sha256": "995456db220b4af64750018476d3c93df405e34dc98433ea6a71a8ff12b94f3a"}, "downloads": -1, "filename": "pywav-1.1.tar.gz", "has_sig": false, "md5_digest": "c399e643945b3817622fbb2cf383f994", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14811, "upload_time": "2020-02-05T04:58:57", "upload_time_iso_8601": "2020-02-05T04:58:57.785668Z", "url": "https://files.pythonhosted.org/packages/ea/bc/5a802ec98672af0aa05c7ac0a6f9e138c3948c8e9d33ae710600693b11b7/pywav-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c399e643945b3817622fbb2cf383f994", "sha256": "995456db220b4af64750018476d3c93df405e34dc98433ea6a71a8ff12b94f3a"}, "downloads": -1, "filename": "pywav-1.1.tar.gz", "has_sig": false, "md5_digest": "c399e643945b3817622fbb2cf383f994", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14811, "upload_time": "2020-02-05T04:58:57", "upload_time_iso_8601": "2020-02-05T04:58:57.785668Z", "url": "https://files.pythonhosted.org/packages/ea/bc/5a802ec98672af0aa05c7ac0a6f9e138c3948c8e9d33ae710600693b11b7/pywav-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:41 2020"}