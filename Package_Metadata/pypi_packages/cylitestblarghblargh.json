{"info": {"author": "Hynek Schlawack", "author_email": "hs@ox.cx", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "======================================\nattrs: Attributes without boilerplate.\n======================================\n\n.. image:: https://img.shields.io/pypi/v/attrs.svg\n   :target: https://pypi.python.org/pypi/attrs/\n   :alt: Latest Version\n\n.. image:: https://travis-ci.org/hynek/attrs.svg\n   :target: https://travis-ci.org/hynek/attrs\n   :alt: CI status\n\n.. image:: https://codecov.io/github/hynek/attrs/coverage.svg?branch=master\n   :target: https://codecov.io/github/hynek/attrs?branch=master\n   :alt: Coverage\n\n.. teaser-begin\n\n``attrs`` is an `MIT <http://choosealicense.com/licenses/mit/>`_-licensed Python package with class decorators that ease the chores of implementing the most common attribute-related object protocols:\n\n.. code-block:: pycon\n\n   >>> import attr\n   >>> @attr.s\n   ... class C(object):\n   ...     x = attr.ib(default=42)\n   ...     y = attr.ib(default=attr.Factory(list))\n   >>> i = C(x=1, y=2)\n   >>> i\n   C(x=1, y=2)\n   >>> i == C(1, 2)\n   True\n   >>> i != C(2, 1)\n   True\n   >>> attr.asdict(i)\n   {'y': 2, 'x': 1}\n   >>> C()\n   C(x=42, y=[])\n   >>> C2 = attr.make_class(\"C2\", [\"a\", \"b\"])\n   >>> C2(\"foo\", \"bar\")\n   C2(a='foo', b='bar')\n\n(If you don\u2019t like the playful ``attr.s`` and ``attr.ib``, you can also use their no-nonsense aliases ``attr.attributes`` and ``attr.attr``).\n\nYou just specify the attributes to work with and ``attrs`` gives you:\n\n- a nice human-readable ``__repr__``,\n- a complete set of comparison methods,\n- an initializer,\n- and much more\n\n*without* writing dull boilerplate code again and again.\n\nThis gives you the power to use actual classes with actual types in your code instead of confusing ``tuple``\\ s or confusingly behaving ``namedtuple``\\ s.\n\nSo put down that type-less data structures and welcome some class into your life!\n\n.. note::\n   I wrote an `explanation <https://attrs.readthedocs.org/en/latest/why.html#characteristic>`_ on why I forked my own ``characteristic``.\n   It's not dead but ``attrs`` will have more new features.\n\n``attrs``\\ \u2019s documentation lives at `Read the Docs <https://attrs.readthedocs.org/>`_, the code on `GitHub <https://github.com/hynek/attrs>`_.\nIt\u2019s rigorously tested on Python 2.6, 2.7, 3.3+, and PyPy.\n\n\nAuthors\n-------\n\n``attrs`` is written and maintained by `Hynek Schlawack <https://hynek.me/>`_.\n\nThe development is kindly supported by `Variomedia AG <https://www.variomedia.de/>`_.\n\nIt\u2019s the spiritual successor of `characteristic <https://characteristic.readthedocs.org/>`_ and aspires to fix some of it clunkiness and unfortunate decisions.  Both were inspired by Twisted\u2019s `FancyEqMixin <https://twistedmatrix.com/documents/current/api/twisted.python.util.FancyEqMixin.html>`_ but both are implemented using class decorators because `sub-classing is bad for you <https://www.youtube.com/watch?v=3MNVP9-hglc>`_, m\u2019kay?\n\n\nThe following folks helped forming ``attrs`` into what it is now:\n\n- `Glyph <https://github.com/glyph/>`_\n- `HawkOwl <https://github.com/hawkowl>`_\n- `Lynn Root <https://github.com/econchick>`_\n- `Wouter Bolsterlee <https://github.com/wbolster/>`_\n\nOf course ``characteristic``\\ \u2019s `hall of fame <https://characteristic.readthedocs.org/en/stable/license.html>`_ applies as well since they share a lot of code.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://attrs.readthedocs.org/", "keywords": "class,attribute,boilerplate", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cylitestblarghblargh", "package_url": "https://pypi.org/project/cylitestblarghblargh/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cylitestblarghblargh/", "project_urls": {"Homepage": "https://attrs.readthedocs.org/"}, "release_url": "https://pypi.org/project/cylitestblarghblargh/15.3.0/", "requires_dist": null, "requires_python": "", "summary": "Attributes without boilerplate.", "version": "15.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/attrs/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0aeef379f58077f5b5cddfa46ed29ca0eb720fa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61747472732e737667\"></a>\n<a href=\"https://travis-ci.org/hynek/attrs\" rel=\"nofollow\"><img alt=\"CI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb1251c289609fc99c8e6997c629e61b57a54248/68747470733a2f2f7472617669732d63692e6f72672f68796e656b2f61747472732e737667\"></a>\n<a href=\"https://codecov.io/github/hynek/attrs?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb10d9c24593379f6816f0c55983974675d5e660/68747470733a2f2f636f6465636f762e696f2f6769746875622f68796e656b2f61747472732f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<p><tt>attrs</tt> is an <a href=\"http://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a>-licensed Python package with class decorators that ease the chores of implementing the most common attribute-related object protocols:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">attr</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@attr</span><span class=\"o\">.</span><span class=\"n\">s</span>\n<span class=\"gp\">... </span><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">ib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">ib</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span>\n<span class=\"go\">C(x=1, y=2)\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"go\">{'y': 2, 'x': 1}\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">C</span><span class=\"p\">()</span>\n<span class=\"go\">C(x=42, y=[])\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">C2</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">make_class</span><span class=\"p\">(</span><span class=\"s2\">\"C2\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">C2</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">)</span>\n<span class=\"go\">C2(a='foo', b='bar')</span>\n</pre>\n<p>(If you don\u2019t like the playful <tt>attr.s</tt> and <tt>attr.ib</tt>, you can also use their no-nonsense aliases <tt>attr.attributes</tt> and <tt>attr.attr</tt>).</p>\n<p>You just specify the attributes to work with and <tt>attrs</tt> gives you:</p>\n<ul>\n<li>a nice human-readable <tt>__repr__</tt>,</li>\n<li>a complete set of comparison methods,</li>\n<li>an initializer,</li>\n<li>and much more</li>\n</ul>\n<p><em>without</em> writing dull boilerplate code again and again.</p>\n<p>This gives you the power to use actual classes with actual types in your code instead of confusing <tt>tuple</tt>s or confusingly behaving <tt>namedtuple</tt>s.</p>\n<p>So put down that type-less data structures and welcome some class into your life!</p>\n<div>\n<p>Note</p>\n<p>I wrote an <a href=\"https://attrs.readthedocs.org/en/latest/why.html#characteristic\" rel=\"nofollow\">explanation</a> on why I forked my own <tt>characteristic</tt>.\nIt\u2019s not dead but <tt>attrs</tt> will have more new features.</p>\n</div>\n<p><tt>attrs</tt>\u2019s documentation lives at <a href=\"https://attrs.readthedocs.org/\" rel=\"nofollow\">Read the Docs</a>, the code on <a href=\"https://github.com/hynek/attrs\" rel=\"nofollow\">GitHub</a>.\nIt\u2019s rigorously tested on Python 2.6, 2.7, 3.3+, and PyPy.</p>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p><tt>attrs</tt> is written and maintained by <a href=\"https://hynek.me/\" rel=\"nofollow\">Hynek Schlawack</a>.</p>\n<p>The development is kindly supported by <a href=\"https://www.variomedia.de/\" rel=\"nofollow\">Variomedia AG</a>.</p>\n<p>It\u2019s the spiritual successor of <a href=\"https://characteristic.readthedocs.org/\" rel=\"nofollow\">characteristic</a> and aspires to fix some of it clunkiness and unfortunate decisions.  Both were inspired by Twisted\u2019s <a href=\"https://twistedmatrix.com/documents/current/api/twisted.python.util.FancyEqMixin.html\" rel=\"nofollow\">FancyEqMixin</a> but both are implemented using class decorators because <a href=\"https://www.youtube.com/watch?v=3MNVP9-hglc\" rel=\"nofollow\">sub-classing is bad for you</a>, m\u2019kay?</p>\n<p>The following folks helped forming <tt>attrs</tt> into what it is now:</p>\n<ul>\n<li><a href=\"https://github.com/glyph/\" rel=\"nofollow\">Glyph</a></li>\n<li><a href=\"https://github.com/hawkowl\" rel=\"nofollow\">HawkOwl</a></li>\n<li><a href=\"https://github.com/econchick\" rel=\"nofollow\">Lynn Root</a></li>\n<li><a href=\"https://github.com/wbolster/\" rel=\"nofollow\">Wouter Bolsterlee</a></li>\n</ul>\n<p>Of course <tt>characteristic</tt>\u2019s <a href=\"https://characteristic.readthedocs.org/en/stable/license.html\" rel=\"nofollow\">hall of fame</a> applies as well since they share a lot of code.</p>\n</div>\n\n          </div>"}, "last_serial": 2132530, "releases": {"15.1.0.dev0": [{"comment_text": "", "digests": {"md5": "086ecd6c892361e2ccbf89faa5c0bca5", "sha256": "b80a2fa1d7ea2f10aa1378413946ef3ce15bf9de92d5b8afb7324771355c51ea"}, "downloads": -1, "filename": "cylitestblarghblargh-15.1.0.dev1.tar.gz", "has_sig": false, "md5_digest": "086ecd6c892361e2ccbf89faa5c0bca5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33806, "upload_time": "2016-05-24T04:20:10", "upload_time_iso_8601": "2016-05-24T04:20:10.482976Z", "url": "https://files.pythonhosted.org/packages/b2/b7/3460c23343fa97a575ba234e0c39fbfe8afd06b837e4a92380fe649a13fa/cylitestblarghblargh-15.1.0.dev1.tar.gz", "yanked": false}], "15.3.0": [{"comment_text": "", "digests": {"md5": "39d9cefc7c757bd35c7cf75c03adba6a", "sha256": "1330efa8fd12585830f9fa9f52303745e506ca00a198cf91d7080d5c914d1cf0"}, "downloads": -1, "filename": "cylitestblarghblargh-15.3.0.tar.gz", "has_sig": false, "md5_digest": "39d9cefc7c757bd35c7cf75c03adba6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33834, "upload_time": "2016-05-25T07:42:15", "upload_time_iso_8601": "2016-05-25T07:42:15.327376Z", "url": "https://files.pythonhosted.org/packages/ee/5d/785c5f764c92c9d6f09c4ca2584ba789b3dc21ae6ec61f0f5a29067207f2/cylitestblarghblargh-15.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "39d9cefc7c757bd35c7cf75c03adba6a", "sha256": "1330efa8fd12585830f9fa9f52303745e506ca00a198cf91d7080d5c914d1cf0"}, "downloads": -1, "filename": "cylitestblarghblargh-15.3.0.tar.gz", "has_sig": false, "md5_digest": "39d9cefc7c757bd35c7cf75c03adba6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33834, "upload_time": "2016-05-25T07:42:15", "upload_time_iso_8601": "2016-05-25T07:42:15.327376Z", "url": "https://files.pythonhosted.org/packages/ee/5d/785c5f764c92c9d6f09c4ca2584ba789b3dc21ae6ec61f0f5a29067207f2/cylitestblarghblargh-15.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:05 2020"}