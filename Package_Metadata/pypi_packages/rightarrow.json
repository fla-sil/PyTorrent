{"info": {"author": "Kenneth Knowles", "author_email": "kenn.knowles@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "::\n\n     _          _       _     _                               \n     \\\\        (_)     | |   | |                              \n      \\\\   _ __ _  __ _| |__ | |_ __ _ _ __ _ __ _____      __\n       \\\\ | '__| |/ _` | '_ \\| __/ _` | '__| '__/ _ \\ \\ /\\ / /\n        \\\\| |  | | (_| | | | | || (_| | |  | | | (_) \\ V  V / \n         \\\\_|  |_|\\__, |_| |_|\\__\\__,_|_|  |_|  \\___/ \\_/\\_/  \n                  __/ |                                      \n                 |___/                                       \n\n==========================\n\nhttps://github.com/kennknowles/python-rightarrow\n\n|Build status|\n\nThis library provides a language for concise higher-order annotations\nfor Python programs, inspired by the syntax for higher-order contracts\nand types in advanced languages. Functionality akin to contract\nchecking, type checking, and type inference is a work-in-progress.\n\nThis project has a \u201cduck-typed\u201d status: Whatever you can use it for, it\nis ready for :-)\n\nHere is a more concrete list of implemented and intended features:\n\n-  *yes* - Definition of a the language.\n-  *yes* - Parsing and printing.\n-  *yes* - Run-time monitoring of adherence for monomorphic annotations.\n-  *upcoming* - Monitoring of adherence for polymorphic annotations.\n-  *upcoming* - Generation of constraints between annotations in a\n   program.\n-  *upcoming* - Best-effort inference of suitable annotations.\n-  *upcoming* - More precise annotations to support full higher-order\n   design-by-contract.\n\nThe Annotations\n---------------\n\nThis language is built from the following concepts:\n\n-  Named types: ``int``, ``long``, ``float``, ``complex``, ``str``,\n   ``unicode``, ``file``, ``YourClassNameHere``, \u2026\n-  Lists: ``[int]``, ``[[long]]``, \u2026\n-  Tuples: ``(int, long)``, ``(float, (int, Regex))``, \u2026\n-  Dictionaries: ``{string: float}``, ``{ (str, str) : [complex] }``, \u2026\n-  Unions: ``int|long|float``, ``str|file``, \u2026\n-  \u201cAnything goes\u201d: ``??``\n-  Functions, after which this library is named :-)\n\n   -  ``str -> int``\n   -  ``(int) -> int``\n   -  ``(int, int) -> int``\n   -  ``( (int, int) ) -> int``\n   -  ``( str|file ) -> SomeClass``\n   -  ``(int, *[str]) -> [(str, int)]``\n   -  ``(int, *[int], **{int: str}) -> str``\n\n-  Objects: ``object(self_type, field1: int, field2: str, ...)``\n-  Polymorphic types (where ``~a``, ``~b``, ``~c`` range over any other\n   type. Syntax subject to change; no preference really)\n\n   -  ``~a -> ~a``\n   -  ``[~a] -> [~a]``\n   -  ``( (~a, ~b) ) -> ~a``\n\nRun-time checking\n-----------------\n\nThe module ``typelanguage.enforce`` contains functions for using these\nannotations as run-time monitors.\n\nApplied directly:\n\n::\n\n    >>> check('{string: int}', {\"hello\" : \"there\"})\n\nWrapping a function to protect it from funky input is more interesting.\nFor example, putting better error checking on Python\u2019s\n``unicode``/``str`` interactions (at least in Python 2)\n\n::\n\n    >>> '\\xa3'.encode('utf-8')\n    ...\n    UnicodeDecodeError: 'ascii' codec can't decode byte 0xa3 in position 0: ordinal not in range(128)\n\n    >>> @guard('unicode -> str')\n    ... def safe_encode(s):\n    ...    return s.encode('utf-8')\n\n    >>> safe_encode(u'hello')\n    'hello'\n    >>> safe_encode('\\xa3')\n    TypeError: Type check failed: ? does not have type unicode\n\nIf you are familiar with notions of \u201cblame\u201d for higher-order contracts,\npull-requests welcome :-)\n\nInferring Annotations\n---------------------\n\nInference is a work-in-progress, definitely planned, and almost\ncertainly will always be \u201cbest effort\u201d only. It works like so:\n\n1. By traversing the code, we can discover a bunch of constraints\n   between different missing annotations.\n2. Some of these constraints are going to be very easy to solve, so we\n   can just propagate the results.\n3. Some of these constraints are not going to be practical to try to\n   solve, so we can just drop them or insert some enforcement code if we\n   like.\n\nMore to explore\n---------------\n\nThere are many other projects that check contracts or types for Python\nin some way. They are all different, many are prototypes or research\nprojects, and none seem to serve the need that motivates this library.\nStill, check them out!\n\n-  `PEP 316 <http://www.python.org/dev/peps/pep-0316/>`__ (deferred)\n-  `RPython <http://doc.pypy.org/en/latest/translation.html>`__ and\n   `PyPy <http://pypy.org/>`__ (compilation-oriented)\n-  `pySonar <http://yinwang0.wordpress.com/2010/09/12/pysonar/>`__ and\n   `mini-pysonar <https://github.com/yinwang0/mini-pysonar>`__ (way\n   cool)\n-  `Pyntch <http://www.unixuser.org/~euske/python/pyntch/index.html>`__\n-  `typechecker <https://github.com/shomah4a/typechecker>`__\n-  `pycontract <http://www.wayforward.net/pycontract/>`__\n-  `python-dbc <http://code.google.com/p/python-dbc/>`__ and `one\n   pyDBC <http://www.nongnu.org/pydbc/>`__ and `another\n   pydbc <https://github.com/cadrian/pydbc>`__ and `yet another\n   pyDBC <https://github.com/Ceasar/pyDbC>`__\n-  `python-type-inference <http://code.google.com/p/python-type-inference/wiki/Resources>`__\n   (no code, but has a great list of papers and even more tools)\n\nAnd there are cool things happening in other dynamic languages!\n\n-  `Contracts in\n   Racket <http://docs.racket-lang.org/guide/contracts.html>`__ and\n   `Typed Racket <http://docs.racket-lang.org/ts-guide/>`__\n-  `Typescript <http://www.typescriptlang.org/>`__ aka `a slightly\n   gradually-typed\n   Javascript <http://siek.blogspot.com/2012/10/is-typescript-gradually-typed-part-1.html>`__\n   and `Javascript++ <http://jspp.javascript.am/>`__ (sort of\n   gradually-typed Javascript) and\n   `javascript-contracts <https://github.com/brownplt/javascript-contracts>`__\n   and `cerny <http://www.cerny-online.com/cerny.js/>`__\n-  `Este <https://github.com/Steida/este>`__ (statically-typed\n   coffeescript) and\n   `Uberscript <https://github.com/jstrachan/coffee-script/blob/master/TypeAnnotations.md>`__\n   (gradually-typed coffeescript) and\n   `contracts.coffee <http://disnetdev.com/contracts.coffee/>`__\n-  `Contracts.ruby <https://github.com/egonSchiele/contracts.ruby>`__\n\nAnd this library draw inspiration from such a huge amount of academic\nwork it cannot possibly all be mentioned, but special thanks to these\nresearch efforts\n\n-  Higher-order contracts (too numerous to mention them all!):\n-  `Contracts for higher-order\n   functions <http://www.eecs.northwestern.edu/~robby/pubs/papers/ho-contracts-icfp2002.pdf>`__\n   by Robert Bruce Findler & Matthias Felleisen.\n-  `Relationally-parametric polymorphic\n   contracts <http://cs.brown.edu/~sk/Publications/Papers/Published/gmfk-rel-par-poly-cont/paper.pdf>`__\n   by Arjun Guha, Jacob Matthews, Robert Bruce Findler, and Shriram\n   Krishnamurthi. DLS 2007.\n\n-  Gradual typing:\n-  `Gradual typing for functional\n   languages <http://ecee.colorado.edu/~siek/pubs/pubs/2006/siek06_gradual.pdf>`__\n   by Jeremy Siek & Walid Taha. 2006\n-  `Gradual Typing for\n   Objects <http://ecee.colorado.edu/~siek/gradual-obj.pdf>`__ by Jeremy\n   Siek and Walid Taha. ECOOP 2007.\n-  `Gradual typing with unification based\n   inference <http://ecee.colorado.edu/~siek/dls08igtlc.pdf>`__ by\n   Jeremy Siek and Manish Vachharajani. DLS 2008.\n-  `Blame for\n   all <http://homepages.inf.ed.ac.uk/wadler/papers/blame-for-all/blame-for-all.pdf>`__\n   by Amal Ahmed, Robert Bruce Findler, Jacob Matthews, and Philip\n   Wadler. STOP 2009.\n-  `The ins and outs of of gradual type\n   inference <http://www.cs.umd.edu/~avik/papers/iogti.pdf>`__ by Aseem\n   Rastogi, Avik Chaudhuri, and Basil Hosmer. POPL 2012.\n-  `Always available static and dynamic\n   feedback <http://homes.cs.washington.edu/~mernst/pubs/ductile-icse2011.pdf>`__\n   by Michael Bayne, Richard Cook, and Michael D. Ernst. ICSE 2011.\n\n-  Hybrid Type Checking (full disclosure; I did some of this work):\n-  `Hybrid type\n   checking <http://users.soe.ucsc.edu/~cormac/papers/toplas09.pdf>`__\n   by Kenneth Knowles & Cormac Flanagan 2006/2010;\n-  `Type reconstruction for general refinement\n   types <http://users.soe.ucsc.edu/~cormac/papers/esop07.pdf>`__ by\n   Kenneth Knowles & Cormac Flanagan, 2007.\n\nContributors\n------------\n\n-  `Kenn Knowles <https://github.com/kennknowles>`__\n   (`@kennknowles <https://twitter.com/KennKnowles>`__)\n\nCopyright and License\n---------------------\n\nCopyright 2012- Kenneth Knowles\n\nLicensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at\n\n::\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n.. |Build status| image:: https://travis-ci.org/kennknowles/python-rightarrow.png\n   :target: https://travis-ci.org/kennknowles/python-rightarrow", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kennknowles/python-rightarrow", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "rightarrow", "package_url": "https://pypi.org/project/rightarrow/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rightarrow/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kennknowles/python-rightarrow"}, "release_url": "https://pypi.org/project/rightarrow/0.4/", "requires_dist": null, "requires_python": null, "summary": "A language for describing Python programs with concise higher-order annotations like \"(a -> a) -> [a] -> [a]\" but don't you dare call them \"types\"", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>_          _       _     _\n\\\\        (_)     | |   | |\n \\\\   _ __ _  __ _| |__ | |_ __ _ _ __ _ __ _____      __\n  \\\\ | '__| |/ _` | '_ \\| __/ _` | '__| '__/ _ \\ \\ /\\ / /\n   \\\\| |  | | (_| | | | | || (_| | |  | | | (_) \\ V  V /\n    \\\\_|  |_|\\__, |_| |_|\\__\\__,_|_|  |_|  \\___/ \\_/\\_/\n             __/ |\n            |___/\n</pre>\n<hr class=\"docutils\">\n<p><a href=\"https://github.com/kennknowles/python-rightarrow\" rel=\"nofollow\">https://github.com/kennknowles/python-rightarrow</a></p>\n<p><a href=\"https://travis-ci.org/kennknowles/python-rightarrow\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e99b69b7d8e384e04033c5f9f7e0d3695f5a007d/68747470733a2f2f7472617669732d63692e6f72672f6b656e6e6b6e6f776c65732f707974686f6e2d72696768746172726f772e706e67\"></a></p>\n<p>This library provides a language for concise higher-order annotations\nfor Python programs, inspired by the syntax for higher-order contracts\nand types in advanced languages. Functionality akin to contract\nchecking, type checking, and type inference is a work-in-progress.</p>\n<p>This project has a \u201cduck-typed\u201d status: Whatever you can use it for, it\nis ready for :-)</p>\n<p>Here is a more concrete list of implemented and intended features:</p>\n<ul>\n<li><em>yes</em> - Definition of a the language.</li>\n<li><em>yes</em> - Parsing and printing.</li>\n<li><em>yes</em> - Run-time monitoring of adherence for monomorphic annotations.</li>\n<li><em>upcoming</em> - Monitoring of adherence for polymorphic annotations.</li>\n<li><em>upcoming</em> - Generation of constraints between annotations in a\nprogram.</li>\n<li><em>upcoming</em> - Best-effort inference of suitable annotations.</li>\n<li><em>upcoming</em> - More precise annotations to support full higher-order\ndesign-by-contract.</li>\n</ul>\n<div id=\"the-annotations\">\n<h2>The Annotations</h2>\n<p>This language is built from the following concepts:</p>\n<ul>\n<li>Named types: <tt>int</tt>, <tt>long</tt>, <tt>float</tt>, <tt>complex</tt>, <tt>str</tt>,\n<tt>unicode</tt>, <tt>file</tt>, <tt>YourClassNameHere</tt>, \u2026</li>\n<li>Lists: <tt>[int]</tt>, <tt>[[long]]</tt>, \u2026</li>\n<li>Tuples: <tt>(int, long)</tt>, <tt>(float, (int, Regex))</tt>, \u2026</li>\n<li>Dictionaries: <tt>{string: float}</tt>, <tt>{ (str, str) : [complex] }</tt>, \u2026</li>\n<li>Unions: <tt>int|long|float</tt>, <tt>str|file</tt>, \u2026</li>\n<li>\u201cAnything goes\u201d: <tt><span class=\"pre\">??</span></tt></li>\n<li>Functions, after which this library is named :-)<ul>\n<li><tt>str <span class=\"pre\">-&gt;</span> int</tt></li>\n<li><tt>(int) <span class=\"pre\">-&gt;</span> int</tt></li>\n<li><tt>(int, int) <span class=\"pre\">-&gt;</span> int</tt></li>\n<li><tt>( (int, int) ) <span class=\"pre\">-&gt;</span> int</tt></li>\n<li><tt>( str|file ) <span class=\"pre\">-&gt;</span> SomeClass</tt></li>\n<li><tt>(int, *[str]) <span class=\"pre\">-&gt;</span> [(str, int)]</tt></li>\n<li><tt>(int, *[int], <span class=\"pre\">**{int:</span> str}) <span class=\"pre\">-&gt;</span> str</tt></li>\n</ul>\n</li>\n<li>Objects: <tt>object(self_type, field1: int, field2: str, <span class=\"pre\">...)</span></tt></li>\n<li>Polymorphic types (where <tt>~a</tt>, <tt>~b</tt>, <tt>~c</tt> range over any other\ntype. Syntax subject to change; no preference really)<ul>\n<li><tt>~a <span class=\"pre\">-&gt;</span> ~a</tt></li>\n<li><tt>[~a] <span class=\"pre\">-&gt;</span> [~a]</tt></li>\n<li><tt>( (~a, ~b) ) <span class=\"pre\">-&gt;</span> ~a</tt></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"run-time-checking\">\n<h2>Run-time checking</h2>\n<p>The module <tt>typelanguage.enforce</tt> contains functions for using these\nannotations as run-time monitors.</p>\n<p>Applied directly:</p>\n<pre>&gt;&gt;&gt; check('{string: int}', {\"hello\" : \"there\"})\n</pre>\n<p>Wrapping a function to protect it from funky input is more interesting.\nFor example, putting better error checking on Python\u2019s\n<tt>unicode</tt>/<tt>str</tt> interactions (at least in Python 2)</p>\n<pre>&gt;&gt;&gt; '\\xa3'.encode('utf-8')\n...\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xa3 in position 0: ordinal not in range(128)\n\n&gt;&gt;&gt; @guard('unicode -&gt; str')\n... def safe_encode(s):\n...    return s.encode('utf-8')\n\n&gt;&gt;&gt; safe_encode(u'hello')\n'hello'\n&gt;&gt;&gt; safe_encode('\\xa3')\nTypeError: Type check failed: ? does not have type unicode\n</pre>\n<p>If you are familiar with notions of \u201cblame\u201d for higher-order contracts,\npull-requests welcome :-)</p>\n</div>\n<div id=\"inferring-annotations\">\n<h2>Inferring Annotations</h2>\n<p>Inference is a work-in-progress, definitely planned, and almost\ncertainly will always be \u201cbest effort\u201d only. It works like so:</p>\n<ol>\n<li>By traversing the code, we can discover a bunch of constraints\nbetween different missing annotations.</li>\n<li>Some of these constraints are going to be very easy to solve, so we\ncan just propagate the results.</li>\n<li>Some of these constraints are not going to be practical to try to\nsolve, so we can just drop them or insert some enforcement code if we\nlike.</li>\n</ol>\n</div>\n<div id=\"more-to-explore\">\n<h2>More to explore</h2>\n<p>There are many other projects that check contracts or types for Python\nin some way. They are all different, many are prototypes or research\nprojects, and none seem to serve the need that motivates this library.\nStill, check them out!</p>\n<ul>\n<li><a href=\"http://www.python.org/dev/peps/pep-0316/\" rel=\"nofollow\">PEP 316</a> (deferred)</li>\n<li><a href=\"http://doc.pypy.org/en/latest/translation.html\" rel=\"nofollow\">RPython</a> and\n<a href=\"http://pypy.org/\" rel=\"nofollow\">PyPy</a> (compilation-oriented)</li>\n<li><a href=\"http://yinwang0.wordpress.com/2010/09/12/pysonar/\" rel=\"nofollow\">pySonar</a> and\n<a href=\"https://github.com/yinwang0/mini-pysonar\" rel=\"nofollow\">mini-pysonar</a> (way\ncool)</li>\n<li><a href=\"http://www.unixuser.org/~euske/python/pyntch/index.html\" rel=\"nofollow\">Pyntch</a></li>\n<li><a href=\"https://github.com/shomah4a/typechecker\" rel=\"nofollow\">typechecker</a></li>\n<li><a href=\"http://www.wayforward.net/pycontract/\" rel=\"nofollow\">pycontract</a></li>\n<li><a href=\"http://code.google.com/p/python-dbc/\" rel=\"nofollow\">python-dbc</a> and <a href=\"http://www.nongnu.org/pydbc/\" rel=\"nofollow\">one\npyDBC</a> and <a href=\"https://github.com/cadrian/pydbc\" rel=\"nofollow\">another\npydbc</a> and <a href=\"https://github.com/Ceasar/pyDbC\" rel=\"nofollow\">yet another\npyDBC</a></li>\n<li><a href=\"http://code.google.com/p/python-type-inference/wiki/Resources\" rel=\"nofollow\">python-type-inference</a>\n(no code, but has a great list of papers and even more tools)</li>\n</ul>\n<p>And there are cool things happening in other dynamic languages!</p>\n<ul>\n<li><a href=\"http://docs.racket-lang.org/guide/contracts.html\" rel=\"nofollow\">Contracts in\nRacket</a> and\n<a href=\"http://docs.racket-lang.org/ts-guide/\" rel=\"nofollow\">Typed Racket</a></li>\n<li><a href=\"http://www.typescriptlang.org/\" rel=\"nofollow\">Typescript</a> aka <a href=\"http://siek.blogspot.com/2012/10/is-typescript-gradually-typed-part-1.html\" rel=\"nofollow\">a slightly\ngradually-typed\nJavascript</a>\nand <a href=\"http://jspp.javascript.am/\" rel=\"nofollow\">Javascript++</a> (sort of\ngradually-typed Javascript) and\n<a href=\"https://github.com/brownplt/javascript-contracts\" rel=\"nofollow\">javascript-contracts</a>\nand <a href=\"http://www.cerny-online.com/cerny.js/\" rel=\"nofollow\">cerny</a></li>\n<li><a href=\"https://github.com/Steida/este\" rel=\"nofollow\">Este</a> (statically-typed\ncoffeescript) and\n<a href=\"https://github.com/jstrachan/coffee-script/blob/master/TypeAnnotations.md\" rel=\"nofollow\">Uberscript</a>\n(gradually-typed coffeescript) and\n<a href=\"http://disnetdev.com/contracts.coffee/\" rel=\"nofollow\">contracts.coffee</a></li>\n<li><a href=\"https://github.com/egonSchiele/contracts.ruby\" rel=\"nofollow\">Contracts.ruby</a></li>\n</ul>\n<p>And this library draw inspiration from such a huge amount of academic\nwork it cannot possibly all be mentioned, but special thanks to these\nresearch efforts</p>\n<ul>\n<li>Higher-order contracts (too numerous to mention them all!):</li>\n<li><a href=\"http://www.eecs.northwestern.edu/~robby/pubs/papers/ho-contracts-icfp2002.pdf\" rel=\"nofollow\">Contracts for higher-order\nfunctions</a>\nby Robert Bruce Findler &amp; Matthias Felleisen.</li>\n<li><a href=\"http://cs.brown.edu/~sk/Publications/Papers/Published/gmfk-rel-par-poly-cont/paper.pdf\" rel=\"nofollow\">Relationally-parametric polymorphic\ncontracts</a>\nby Arjun Guha, Jacob Matthews, Robert Bruce Findler, and Shriram\nKrishnamurthi. DLS 2007.</li>\n<li>Gradual typing:</li>\n<li><a href=\"http://ecee.colorado.edu/~siek/pubs/pubs/2006/siek06_gradual.pdf\" rel=\"nofollow\">Gradual typing for functional\nlanguages</a>\nby Jeremy Siek &amp; Walid Taha. 2006</li>\n<li><a href=\"http://ecee.colorado.edu/~siek/gradual-obj.pdf\" rel=\"nofollow\">Gradual Typing for\nObjects</a> by Jeremy\nSiek and Walid Taha. ECOOP 2007.</li>\n<li><a href=\"http://ecee.colorado.edu/~siek/dls08igtlc.pdf\" rel=\"nofollow\">Gradual typing with unification based\ninference</a> by\nJeremy Siek and Manish Vachharajani. DLS 2008.</li>\n<li><a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/blame-for-all/blame-for-all.pdf\" rel=\"nofollow\">Blame for\nall</a>\nby Amal Ahmed, Robert Bruce Findler, Jacob Matthews, and Philip\nWadler. STOP 2009.</li>\n<li><a href=\"http://www.cs.umd.edu/~avik/papers/iogti.pdf\" rel=\"nofollow\">The ins and outs of of gradual type\ninference</a> by Aseem\nRastogi, Avik Chaudhuri, and Basil Hosmer. POPL 2012.</li>\n<li><a href=\"http://homes.cs.washington.edu/~mernst/pubs/ductile-icse2011.pdf\" rel=\"nofollow\">Always available static and dynamic\nfeedback</a>\nby Michael Bayne, Richard Cook, and Michael D. Ernst. ICSE 2011.</li>\n<li>Hybrid Type Checking (full disclosure; I did some of this work):</li>\n<li><a href=\"http://users.soe.ucsc.edu/~cormac/papers/toplas09.pdf\" rel=\"nofollow\">Hybrid type\nchecking</a>\nby Kenneth Knowles &amp; Cormac Flanagan 2006/2010;</li>\n<li><a href=\"http://users.soe.ucsc.edu/~cormac/papers/esop07.pdf\" rel=\"nofollow\">Type reconstruction for general refinement\ntypes</a> by\nKenneth Knowles &amp; Cormac Flanagan, 2007.</li>\n</ul>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/kennknowles\" rel=\"nofollow\">Kenn Knowles</a>\n(<a href=\"https://twitter.com/KennKnowles\" rel=\"nofollow\">@kennknowles</a>)</li>\n</ul>\n</div>\n<div id=\"copyright-and-license\">\n<h2>Copyright and License</h2>\n<p>Copyright 2012- Kenneth Knowles</p>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at</p>\n<pre>http://www.apache.org/licenses/LICENSE-2.0\n</pre>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n</div>\n\n          </div>"}, "last_serial": 746829, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "e40c8fd868153d959428bdacb1d1c3e5", "sha256": "d30eb414365cdb400d11bdb473493dd432b402bd6912773982f975707b31ef22"}, "downloads": -1, "filename": "rightarrow-0.4.tar.gz", "has_sig": false, "md5_digest": "e40c8fd868153d959428bdacb1d1c3e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17488, "upload_time": "2013-03-16T21:27:25", "upload_time_iso_8601": "2013-03-16T21:27:25.411118Z", "url": "https://files.pythonhosted.org/packages/b6/29/8845fb00b1f0021af4122ee287fd1266044609497668f8d310b75d8003b9/rightarrow-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e40c8fd868153d959428bdacb1d1c3e5", "sha256": "d30eb414365cdb400d11bdb473493dd432b402bd6912773982f975707b31ef22"}, "downloads": -1, "filename": "rightarrow-0.4.tar.gz", "has_sig": false, "md5_digest": "e40c8fd868153d959428bdacb1d1c3e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17488, "upload_time": "2013-03-16T21:27:25", "upload_time_iso_8601": "2013-03-16T21:27:25.411118Z", "url": "https://files.pythonhosted.org/packages/b6/29/8845fb00b1f0021af4122ee287fd1266044609497668f8d310b75d8003b9/rightarrow-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:41 2020"}