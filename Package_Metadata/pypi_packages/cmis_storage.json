{"info": {"author": "Jos\u00e9 Tom\u00e1s Tocino", "author_email": "josetomas.tocino@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "=============================\ncmis_storage\n=============================\n\n.. image:: https://badge.fury.io/py/cmis_storage.png\n    :target: https://badge.fury.io/py/cmis_storage\n\n**cmis_storage** is a storage engine for Django to integrate CMIS-compatible services, like Alfresco.\nIt's currently compatible with Django 1.7+ and Python 2.7, and uses Apache cmislib. Python 3.x is not\ncurrently supported because cmislib does not support it yet.\n\nDocumentation\n-------------\n\nThe full documentation can be found at https://cmis_storage.readthedocs.org.\n\nInstallation\n------------\n\nFirst, install **cmis_storage** from pip using\n\n::\n\n    pip install cmis_storage\n\nNext, add ``cmis_storage`` to ``INSTALLED_APPS`` in your ``settings.py`` file:\n\n::\n\n    INSTALLED_APPS = (\n        ...\n        'cmis_storage',\n    )\n\nYou also need to add the configuration for your CMIS-compatible server in your ``settings.py`` file,\nlike this, for example:\n\n::\n\n    CMIS_STORAGE_OPTIONS = {\n        'repositoryUrl': 'http://localhost:8080/alfresco/api/-default-/public/cmis/versions/1.0/atom',\n        'username': 'admin',\n        'password': 'admin',\n        'baseFolder': '/'\n    }\n\nThe config parameters are self-explanatory.\n\n\nUsage\n------------\n\n**cmis_storage** offers the class ``CMISStorage``, which is a storage engine\nthat you can use in any ``FileField`` field within your models, for example:\n\n::\n\n    from django.db import models\n\n    from cmis_storage.storage import CMISStorage\n\n\n    class TestModel(models.Model):\n        document = models.FileField(storage=CMISStorage())\n\nFrom that point on, all the file handling involving ``TestModel.document`` will happen on the CMIS-compatible\nserver. You shouldn't need to directly interact with the `CMISStorage`, only in case you\nneed to manually delete a file. You can do it like this:\n\n::\n\n    storage = CMISStorage()\n    storage.delete(instance.document.path)\n\nOptional views\n^^^^^^^^^^^^^^\n\nThe module offers an optional view so you can directly serve files of your content management system\nfrom a certain URL. To use it, simply add a corresponding url to the view in your ``urls.py`` file:\n\n::\n\n    urlpatterns = [\n        ...\n        url(r'^get/(?P<path>.+)$', cmis_storage.views.get_file,  name='cmis_storage_get_file'),\n    ]\n\nBeware though, the view **should not be used as-is**, because it does not make any kind of authentication\nor authorization check.\n\nCredits\n---------\n\nThis module was built by Jos\u00e9 Tom\u00e1s Tocino and other authors that may be referenced in the AUTHORS file,\nduring the development of several internal projects at the University of C\u00e1diz, Spain.\n\n\n\n\nHistory\n-------\n\n0.1.0 (2016-03-24)\n++++++++++++++++++\n\n* Project opened", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/josetomastocino/cmis_storage", "keywords": "cmis_storage", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "cmis_storage", "package_url": "https://pypi.org/project/cmis_storage/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cmis_storage/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/josetomastocino/cmis_storage"}, "release_url": "https://pypi.org/project/cmis_storage/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "cmis_storage is a storage engine for Django to integrate CMIS-compatible services, like Alfresco", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            =============================<br>cmis_storage<br>=============================<br><br>.. image:: https://badge.fury.io/py/cmis_storage.png<br>    :target: https://badge.fury.io/py/cmis_storage<br><br>**cmis_storage** is a storage engine for Django to integrate CMIS-compatible services, like Alfresco.<br>It's currently compatible with Django 1.7+ and Python 2.7, and uses Apache cmislib. Python 3.x is not<br>currently supported because cmislib does not support it yet.<br><br>Documentation<br>-------------<br><br>The full documentation can be found at https://cmis_storage.readthedocs.org.<br><br>Installation<br>------------<br><br>First, install **cmis_storage** from pip using<br><br>::<br><br>    pip install cmis_storage<br><br>Next, add ``cmis_storage`` to ``INSTALLED_APPS`` in your ``settings.py`` file:<br><br>::<br><br>    INSTALLED_APPS = (<br>        ...<br>        'cmis_storage',<br>    )<br><br>You also need to add the configuration for your CMIS-compatible server in your ``settings.py`` file,<br>like this, for example:<br><br>::<br><br>    CMIS_STORAGE_OPTIONS = {<br>        'repositoryUrl': 'http://localhost:8080/alfresco/api/-default-/public/cmis/versions/1.0/atom',<br>        'username': 'admin',<br>        'password': 'admin',<br>        'baseFolder': '/'<br>    }<br><br>The config parameters are self-explanatory.<br><br><br>Usage<br>------------<br><br>**cmis_storage** offers the class ``CMISStorage``, which is a storage engine<br>that you can use in any ``FileField`` field within your models, for example:<br><br>::<br><br>    from django.db import models<br><br>    from cmis_storage.storage import CMISStorage<br><br><br>    class TestModel(models.Model):<br>        document = models.FileField(storage=CMISStorage())<br><br>From that point on, all the file handling involving ``TestModel.document`` will happen on the CMIS-compatible<br>server. You shouldn't need to directly interact with the `CMISStorage`, only in case you<br>need to manually delete a file. You can do it like this:<br><br>::<br><br>    storage = CMISStorage()<br>    storage.delete(instance.document.path)<br><br>Optional views<br>^^^^^^^^^^^^^^<br><br>The module offers an optional view so you can directly serve files of your content management system<br>from a certain URL. To use it, simply add a corresponding url to the view in your ``urls.py`` file:<br><br>::<br><br>    urlpatterns = [<br>        ...<br>        url(r'^get/(?P&lt;path&gt;.+)$', cmis_storage.views.get_file,  name='cmis_storage_get_file'),<br>    ]<br><br>Beware though, the view **should not be used as-is**, because it does not make any kind of authentication<br>or authorization check.<br><br>Credits<br>---------<br><br>This module was built by Jos\u00e9 Tom\u00e1s Tocino and other authors that may be referenced in the AUTHORS file,<br>during the development of several internal projects at the University of C\u00e1diz, Spain.<br><br><br><br><br>History<br>-------<br><br>0.1.0 (2016-03-24)<br>++++++++++++++++++<br><br>* Project opened\n          </div>"}, "last_serial": 2023977, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Thu May  7 22:18:33 2020"}