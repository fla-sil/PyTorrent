{"info": {"author": "Keigo Kawamura", "author_email": "kkawamura@logos.t.u-tokyo.ac.jp", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Hierarchical Argparse\n====\n\n[![PyPI](https://img.shields.io/pypi/v/hiargparse.svg)](https://pypi.org/project/hiargparse/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/hiargparse.svg)](https://pypi.org/project/hiargparse/)\n[![PyPI - License](https://img.shields.io/pypi/l/hiargparse.svg)](https://pypi.org/project/hiargparse/)\n\n\nHiargparse is a hierarchical and highly sophisticated variant of [argparse](https://docs.python.org/3/library/argparse.html).\n\n## Minimal Code\n```python\nfrom hiargparse import ArgsProvider, Arg, ChildProvider, ArgumentParser\n\nchild = ArgsProvider(\n    args=[Arg('baz', default=42)]\n)\nroot = ArgsProvider(\n    args=[Arg('foo', default='bar')],\n    child_providers=[ChildProvider(provider=child, name='child')]\n)\nparser = ArgumentParser()\nparser.add_arguments_from_provider(root)\nprint(parser.parse_args())\n```\n\n## Description\n\nHiargparse automatically generates the command-line arguments with your all classes in your tree-like module structures with minimal codings.\n\nSuppose you make a large module, and your hierarchically deep class, say `foo.bar.baz.ham.spam.Egg`, requires some arguments, say `heights` and `widths`.\n`Foo` makes an instance of `Bar`, `Bar` makes an instance of `Baz`, ..., and `Spam` makes an `Egg` which has the two arguments.\nWhen you want to pass them command-line options, you have to write the two, `heights` and `widths`, in the constructor of `Foo`, `Bar`, ..., and `Spam`.\nWhat if the `Egg` is updated and wants to require some new arguments, like `depth` or `length`?\nHiargparse passes the arguments directly to the classes without any black magics.\n\n## Features\n\nWith this module, you can\n\n- easily make hierarchical (tree-like) command-line arguments with [argparse](https://docs.python.org/3/library/argparse.html)\n - Each argument is automatically help-texted and grouped into `argparse.ArgumentGroup`.\n- get a more useful Namespace object than the original\n - Accessing with dict-like key, getting the child Namespace, converting to/from dictionaries, and so on\n- write/read the arguments to/from  some configure files with well known formats\n - Currently we supports [yaml](http://yaml.org/) and [toml](https://github.com/toml-lang/toml).\n\nAlso, this module\n\n- is almost compatible with original argparse; you can gradually introduce it to your large projects.\n- works without command-line arguments; when you distribute your module with hiargparse,\nusers still can select whether to feed arguments to it with a command-line or programatic way.\n\nThis module is inspired by rlpytorch.args_provider in [FacebookAIResearch/ELF](https://github.com/facebookresearch/ELF).\n\n## Installation\n\n```bash\npip install hiargparse\n```\n\n## Requirements\n\n- python >= 3.6.0\n- typing_extensions (for typing\\_extentions.Protocol in python 3.6) >= 3.6.2.1\n- pyyaml >= 3.12 (only if you use yaml write/read)\n- toml >= 0.9.4 (only if you use toml write/read)\n\n## Examples\n\n- See [`/examples/example.py`](https://github.com/KKawamura1/hiargparse/blob/master/examples/example.py) to easy start.\n- You can use hiargparse with original ArgumentParser. See [`/examples/example_with_original.py`](https://github.com/KKawamura1/hiargparse/blob/master/examples/example_with_original.py).\n- If you want to use hiargparse without command-line arguments, see [`/examples/example_without_program_arguments.py`](https://github.com/KKawamura1/hiargparse/blob/master/examples/example_without_program_arguments.py).\n- [`/examples/example_write_and_read.py`](https://github.com/KKawamura1/hiargparse/blob/master/examples/example_write_and_read.py) describes how to write and read the arguments with a configure file.\n- A lot of things you can do with hiargparse are shown in [`/examples/complicated_example.py`](https://github.com/KKawamura1/hiargparse/blob/master/examples/complicated_example.py).\n\n## Contribution\n\n- Any contribution is welcome!\n- Fork the repo, create a branch, add your awesome changes, and make a new Pull Request.\n- If you find some bugs, please report in issue.\n\n## Author\n\n- Keigo Kawamura (Department of Electrical Engineering and Information Systems (EEIS), Graduate School of Engineering, The University of Tokyo)\n - kkawamura@logos.t.u-tokyo.ac.jp\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KKawamura1/hiargparse", "keywords": "arguments argparse hierarchy", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hiargparse", "package_url": "https://pypi.org/project/hiargparse/", "platform": "", "project_url": "https://pypi.org/project/hiargparse/", "project_urls": {"Homepage": "https://github.com/KKawamura1/hiargparse", "Source": "https://github.com/KKawamura1/hiargparse/"}, "release_url": "https://pypi.org/project/hiargparse/0.2.2/", "requires_dist": ["typing-extensions (>=3.6.2.1)", "pyyaml", "toml"], "requires_python": "~=3.6", "summary": "A hierarchical and highly sophisticated variant of argparse.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Hierarchical Argparse</h1>\n<p><a href=\"https://pypi.org/project/hiargparse/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0f1ff04f93aeac9bcfee7aa21cd1154877d090c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f686961726770617273652e737667\"></a>\n<a href=\"https://pypi.org/project/hiargparse/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ab42bc72c0a746aa3a0bffd66941b9a1be4e9e9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f686961726770617273652e737667\"></a>\n<a href=\"https://pypi.org/project/hiargparse/\" rel=\"nofollow\"><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc03e7bfc22f6b703fbecec96e4c993080558541/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f686961726770617273652e737667\"></a></p>\n<p>Hiargparse is a hierarchical and highly sophisticated variant of <a href=\"https://docs.python.org/3/library/argparse.html\" rel=\"nofollow\">argparse</a>.</p>\n<h2>Minimal Code</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hiargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgsProvider</span><span class=\"p\">,</span> <span class=\"n\">Arg</span><span class=\"p\">,</span> <span class=\"n\">ChildProvider</span><span class=\"p\">,</span> <span class=\"n\">ArgumentParser</span>\n\n<span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">ArgsProvider</span><span class=\"p\">(</span>\n    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Arg</span><span class=\"p\">(</span><span class=\"s1\">'baz'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">ArgsProvider</span><span class=\"p\">(</span>\n    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Arg</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)],</span>\n    <span class=\"n\">child_providers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ChildProvider</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'child'</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_arguments_from_provider</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">())</span>\n</pre>\n<h2>Description</h2>\n<p>Hiargparse automatically generates the command-line arguments with your all classes in your tree-like module structures with minimal codings.</p>\n<p>Suppose you make a large module, and your hierarchically deep class, say <code>foo.bar.baz.ham.spam.Egg</code>, requires some arguments, say <code>heights</code> and <code>widths</code>.\n<code>Foo</code> makes an instance of <code>Bar</code>, <code>Bar</code> makes an instance of <code>Baz</code>, ..., and <code>Spam</code> makes an <code>Egg</code> which has the two arguments.\nWhen you want to pass them command-line options, you have to write the two, <code>heights</code> and <code>widths</code>, in the constructor of <code>Foo</code>, <code>Bar</code>, ..., and <code>Spam</code>.\nWhat if the <code>Egg</code> is updated and wants to require some new arguments, like <code>depth</code> or <code>length</code>?\nHiargparse passes the arguments directly to the classes without any black magics.</p>\n<h2>Features</h2>\n<p>With this module, you can</p>\n<ul>\n<li>easily make hierarchical (tree-like) command-line arguments with <a href=\"https://docs.python.org/3/library/argparse.html\" rel=\"nofollow\">argparse</a></li>\n<li>Each argument is automatically help-texted and grouped into <code>argparse.ArgumentGroup</code>.</li>\n<li>get a more useful Namespace object than the original</li>\n<li>Accessing with dict-like key, getting the child Namespace, converting to/from dictionaries, and so on</li>\n<li>write/read the arguments to/from  some configure files with well known formats</li>\n<li>Currently we supports <a href=\"http://yaml.org/\" rel=\"nofollow\">yaml</a> and <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">toml</a>.</li>\n</ul>\n<p>Also, this module</p>\n<ul>\n<li>is almost compatible with original argparse; you can gradually introduce it to your large projects.</li>\n<li>works without command-line arguments; when you distribute your module with hiargparse,\nusers still can select whether to feed arguments to it with a command-line or programatic way.</li>\n</ul>\n<p>This module is inspired by rlpytorch.args_provider in <a href=\"https://github.com/facebookresearch/ELF\" rel=\"nofollow\">FacebookAIResearch/ELF</a>.</p>\n<h2>Installation</h2>\n<pre>pip install hiargparse\n</pre>\n<h2>Requirements</h2>\n<ul>\n<li>python &gt;= 3.6.0</li>\n<li>typing_extensions (for typing_extentions.Protocol in python 3.6) &gt;= 3.6.2.1</li>\n<li>pyyaml &gt;= 3.12 (only if you use yaml write/read)</li>\n<li>toml &gt;= 0.9.4 (only if you use toml write/read)</li>\n</ul>\n<h2>Examples</h2>\n<ul>\n<li>See <a href=\"https://github.com/KKawamura1/hiargparse/blob/master/examples/example.py\" rel=\"nofollow\"><code>/examples/example.py</code></a> to easy start.</li>\n<li>You can use hiargparse with original ArgumentParser. See <a href=\"https://github.com/KKawamura1/hiargparse/blob/master/examples/example_with_original.py\" rel=\"nofollow\"><code>/examples/example_with_original.py</code></a>.</li>\n<li>If you want to use hiargparse without command-line arguments, see <a href=\"https://github.com/KKawamura1/hiargparse/blob/master/examples/example_without_program_arguments.py\" rel=\"nofollow\"><code>/examples/example_without_program_arguments.py</code></a>.</li>\n<li><a href=\"https://github.com/KKawamura1/hiargparse/blob/master/examples/example_write_and_read.py\" rel=\"nofollow\"><code>/examples/example_write_and_read.py</code></a> describes how to write and read the arguments with a configure file.</li>\n<li>A lot of things you can do with hiargparse are shown in <a href=\"https://github.com/KKawamura1/hiargparse/blob/master/examples/complicated_example.py\" rel=\"nofollow\"><code>/examples/complicated_example.py</code></a>.</li>\n</ul>\n<h2>Contribution</h2>\n<ul>\n<li>Any contribution is welcome!</li>\n<li>Fork the repo, create a branch, add your awesome changes, and make a new Pull Request.</li>\n<li>If you find some bugs, please report in issue.</li>\n</ul>\n<h2>Author</h2>\n<ul>\n<li>Keigo Kawamura (Department of Electrical Engineering and Information Systems (EEIS), Graduate School of Engineering, The University of Tokyo)</li>\n<li><a href=\"mailto:kkawamura@logos.t.u-tokyo.ac.jp\">kkawamura@logos.t.u-tokyo.ac.jp</a></li>\n</ul>\n\n          </div>"}, "last_serial": 3819673, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "0437cd02686534ee98a349f3b9ac7520", "sha256": "038257068b7bedd4ea38653f81b4f5e7f0156b1a66fd1622646a1848d184a848"}, "downloads": -1, "filename": "hiargparse-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0437cd02686534ee98a349f3b9ac7520", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 24324, "upload_time": "2018-04-30T02:02:23", "upload_time_iso_8601": "2018-04-30T02:02:23.089428Z", "url": "https://files.pythonhosted.org/packages/ea/25/e1a64ee8a5f8a17eedbf667bc386ccad0aca3edcaa5ca85b98b95151640b/hiargparse-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d080df4c18ea3b7ed8d32a68825a6cda", "sha256": "c1fe7fc676a1755b94b757437969c46ad3ddc8e916697a08ceeebf01f7fc94a9"}, "downloads": -1, "filename": "hiargparse-0.0.0.tar.gz", "has_sig": false, "md5_digest": "d080df4c18ea3b7ed8d32a68825a6cda", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 16453, "upload_time": "2018-04-30T02:02:25", "upload_time_iso_8601": "2018-04-30T02:02:25.921591Z", "url": "https://files.pythonhosted.org/packages/fa/06/9271c3437d9a870872f8e4f31ff1f4ae2e869c9c358756ef0e7b4026d3d2/hiargparse-0.0.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "99ed68f83625f1cea67bc74d2045a7fc", "sha256": "7ec5f70aab96a85fca853a5d30e10fd2dea1e76f9f5d7f2a689310ec2f6b4462"}, "downloads": -1, "filename": "hiargparse-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "99ed68f83625f1cea67bc74d2045a7fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 24633, "upload_time": "2018-04-30T02:02:24", "upload_time_iso_8601": "2018-04-30T02:02:24.510497Z", "url": "https://files.pythonhosted.org/packages/5b/c1/0d8b27fc734c56a05d9916e2cec3e023d74a6389082ba365a0c25fb4a1fa/hiargparse-0.1.1-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1e43be56c7cd125ba5759ad4e006a720", "sha256": "d848ce79079f295cd577a628e0ade3776747eb3dc7a646c18d64e67b1fcade22"}, "downloads": -1, "filename": "hiargparse-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1e43be56c7cd125ba5759ad4e006a720", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 24597, "upload_time": "2018-04-30T02:16:05", "upload_time_iso_8601": "2018-04-30T02:16:05.917525Z", "url": "https://files.pythonhosted.org/packages/4b/ad/546714a20a46102692e7013383f06f3a91c5deef2cbbfa57c78c75aadc95/hiargparse-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1a0": [{"comment_text": "", "digests": {"md5": "a774f544c89e16d0c9ffce5b212268e8", "sha256": "8757bf408fdd9ec536f455229bff6af207a25bcb9392aaa3cca3e688845821c0"}, "downloads": -1, "filename": "hiargparse-0.2.1a0-py3-none-any.whl", "has_sig": false, "md5_digest": "a774f544c89e16d0c9ffce5b212268e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 24638, "upload_time": "2018-04-30T02:28:47", "upload_time_iso_8601": "2018-04-30T02:28:47.344131Z", "url": "https://files.pythonhosted.org/packages/15/37/61265e4fe01875026ba259b6ca963af3d9238553d6f3dcacc6455c296833/hiargparse-0.2.1a0-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ee33dbc7a9a7977ce1afa90f78582fc2", "sha256": "0c4de17d2560a0db63f18d7775f6f13a9fd78badfffbb6078f36b9f0444cd926"}, "downloads": -1, "filename": "hiargparse-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ee33dbc7a9a7977ce1afa90f78582fc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 24622, "upload_time": "2018-04-30T02:34:16", "upload_time_iso_8601": "2018-04-30T02:34:16.325285Z", "url": "https://files.pythonhosted.org/packages/7e/11/d3b6bd878d2259de0373630b27f870c22d337b6fde93040bf66943b7697c/hiargparse-0.2.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee33dbc7a9a7977ce1afa90f78582fc2", "sha256": "0c4de17d2560a0db63f18d7775f6f13a9fd78badfffbb6078f36b9f0444cd926"}, "downloads": -1, "filename": "hiargparse-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ee33dbc7a9a7977ce1afa90f78582fc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 24622, "upload_time": "2018-04-30T02:34:16", "upload_time_iso_8601": "2018-04-30T02:34:16.325285Z", "url": "https://files.pythonhosted.org/packages/7e/11/d3b6bd878d2259de0373630b27f870c22d337b6fde93040bf66943b7697c/hiargparse-0.2.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:19 2020"}