{"info": {"author": "Ross Gardler", "author_email": "ross.gardler@microsoft.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "NOTE: NOT FOR PRODUCTION USE\n\nPlease note these scripts are intended to allow experimentation with\nAzure Container Service. They are not intended for production use.\n\nA set of convenience scripts for creating and testing ACS\nclusters. These scripts can also be helpful in working out how to use\nthe REST API interfaces for managing applicaitons on an ACS cluster.\n\n# Usage\n\nSee the [documentation](http://rgardler.github.io/acs-cli).\n\n# Development\n\n## Prerequisites\n\n  * Python 3\n\t* `apt-get install python`\n  * [PIP](https://pip.pypa.io/en/stable/installing/)\n  * Azure CLI installed and configured to access the test subscription\n    * install Node and NPM\n    * `sudo npm install azure-cli -g`\n\n## Preparing\n\nTo install all libraries and development dependencies:\n\n```\nsudo pip install -e .\nsudo pip install -e .[test]\n```\n\n## General Use\n\nYou can use `acs --help` for basic help, or see the\n[documentation](http://rgardler.github.com/acs-cli).\n\n# Developing\n\n## Adding a command\n\nTo add a top level command representing a new feature follow the\nthese steps (in this example the new command is called `Foo`:\n\n  * Add the command `foo` and its description to the \"Commands\" section of the docstring for acs/cli.py\n  * Copy `acs/commands/command.tmpl` to `acs/commands/foo.py`\n    * Add the subcommands and options to the docstring of the foo.py file\n    * Implement each command in a method using the same name as the command\n  * Add foo.py import to `acs/commands/__init__.py`\n  * Copy `tests/command/test_command.tmpl` to `test/command/test_foo.py`\n    * Implement the tests\n  * Run the tests with `python setup.py test` and iterate as necessary\n  * Install the package with `python setup.py install`\n  \n## Adding a subcommand\n\nSubcommands are applied to commands, to add a subcommand do the following:\n\n  * Add the subcommand to the docstring of the relevant command class (e.g. foo.bar)\n  * Add a method with the same name as the subcommand\n  * Add a test\n  * Run the tests with `python setup.py test` and iterate as necessary\n  * Install the package with `python setup.py install`\n  \n## Testing\n\nRun tests using [py.test:](http://pytest.org/latest) and [coverage](https://pypi.python.org/pypi/pytest-cov):\n\n```\npython setup.py test\n```\n\nNote, by default this does not run the slow tests (like creating the\ncluster and installing features. You must therefore first have run the full suite of tests at least once. You can do this with:\n\n```\npy.test --runslow\n```\n\n## Releasing\n\nCut a release and publish to the [Python Package\nIndex](https://pypi.python.org/pypi) install install\n[twine](http://pypi.python.org/pypi/twine. and then run:\n\n```\npython setup.py sdist bdist_wheel\ntwine upload dist/*\n```\n\nThis will build both a surce tarball and a wheel build, which will run\non all platforms.\n\n### Updating Documentation\n\nTo build and pucblish the documentsation:\n\n```\ncd docs\nmake gh-pages\ncd ..\n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rgardler/acs-scripts", "keywords": "cli", "license": "Apache License v2", "maintainer": null, "maintainer_email": null, "name": "acs", "package_url": "https://pypi.org/project/acs/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/acs/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/rgardler/acs-scripts"}, "release_url": "https://pypi.org/project/acs/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Azure Container Service command line tools", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>NOTE: NOT FOR PRODUCTION USE</p>\n<p>Please note these scripts are intended to allow experimentation with\nAzure Container Service. They are not intended for production use.</p>\n<p>A set of convenience scripts for creating and testing ACS\nclusters. These scripts can also be helpful in working out how to use\nthe REST API interfaces for managing applicaitons on an ACS cluster.</p>\n<p># Usage</p>\n<p>See the [documentation](<a href=\"http://rgardler.github.io/acs-cli\" rel=\"nofollow\">http://rgardler.github.io/acs-cli</a>).</p>\n<p># Development</p>\n<p>## Prerequisites</p>\n<blockquote>\n<ul>\n<li><dl>\n<dt>Python 3</dt>\n<dd><ul>\n<li><cite>apt-get install python</cite></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>[PIP](<a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"nofollow\">https://pip.pypa.io/en/stable/installing/</a>)</li>\n<li>Azure CLI installed and configured to access the test subscription\n* install Node and NPM\n* <cite>sudo npm install azure-cli -g</cite></li>\n</ul>\n</blockquote>\n<p>## Preparing</p>\n<p>To install all libraries and development dependencies:</p>\n<p><tt>`\nsudo pip install <span class=\"pre\">-e</span> .\nsudo pip install <span class=\"pre\">-e</span> .[test]\n`</tt></p>\n<p>## General Use</p>\n<p>You can use <cite>acs \u2013help</cite> for basic help, or see the\n[documentation](<a href=\"http://rgardler.github.com/acs-cli\" rel=\"nofollow\">http://rgardler.github.com/acs-cli</a>).</p>\n<p># Developing</p>\n<p>## Adding a command</p>\n<p>To add a top level command representing a new feature follow the\nthese steps (in this example the new command is called <cite>Foo</cite>:</p>\n<blockquote>\n<ul>\n<li>Add the command <cite>foo</cite> and its description to the \u201cCommands\u201d section of the docstring for acs/cli.py</li>\n<li>Copy <cite>acs/commands/command.tmpl</cite> to <cite>acs/commands/foo.py</cite>\n* Add the subcommands and options to the docstring of the foo.py file\n* Implement each command in a method using the same name as the command</li>\n<li>Add foo.py import to <cite>acs/commands/__init__.py</cite></li>\n<li>Copy <cite>tests/command/test_command.tmpl</cite> to <cite>test/command/test_foo.py</cite>\n* Implement the tests</li>\n<li>Run the tests with <cite>python setup.py test</cite> and iterate as necessary</li>\n<li>Install the package with <cite>python setup.py install</cite></li>\n</ul>\n</blockquote>\n<p>## Adding a subcommand</p>\n<p>Subcommands are applied to commands, to add a subcommand do the following:</p>\n<blockquote>\n<ul>\n<li>Add the subcommand to the docstring of the relevant command class (e.g. foo.bar)</li>\n<li>Add a method with the same name as the subcommand</li>\n<li>Add a test</li>\n<li>Run the tests with <cite>python setup.py test</cite> and iterate as necessary</li>\n<li>Install the package with <cite>python setup.py install</cite></li>\n</ul>\n</blockquote>\n<p>## Testing</p>\n<p>Run tests using [py.test:](http://pytest.org/latest) and [coverage](https://pypi.python.org/pypi/pytest-cov):</p>\n<p><tt>`\npython setup.py test\n`</tt></p>\n<p>Note, by default this does not run the slow tests (like creating the\ncluster and installing features. You must therefore first have run the full suite of tests at least once. You can do this with:</p>\n<p><tt>`\npy.test <span class=\"pre\">--runslow</span>\n`</tt></p>\n<p>## Releasing</p>\n<p>Cut a release and publish to the [Python Package\nIndex](<a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">https://pypi.python.org/pypi</a>) install install\n[twine](<a href=\"http://pypi.python.org/pypi/twine\" rel=\"nofollow\">http://pypi.python.org/pypi/twine</a>. and then run:</p>\n<p><tt>`\npython setup.py sdist bdist_wheel\ntwine upload dist/*\n`</tt></p>\n<p>This will build both a surce tarball and a wheel build, which will run\non all platforms.</p>\n<p>### Updating Documentation</p>\n<p>To build and pucblish the documentsation:</p>\n<p><tt>`\ncd docs\nmake <span class=\"pre\">gh-pages</span>\ncd ..\n`</tt></p>\n\n          </div>"}, "last_serial": 2116443, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "961d216bc64913ccaa71edc7b0d46041", "sha256": "4076c379b40591c564be7176576fa02bbd186097327af66ce877c1bd68a4dc1d"}, "downloads": -1, "filename": "acs-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "961d216bc64913ccaa71edc7b0d46041", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21131, "upload_time": "2016-05-15T10:50:56", "upload_time_iso_8601": "2016-05-15T10:50:56.643744Z", "url": "https://files.pythonhosted.org/packages/3e/34/c7b9cdf099842a95b332397fe0e922a3c23bc90d95390949140b7aad30b9/acs-0.1.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "961d216bc64913ccaa71edc7b0d46041", "sha256": "4076c379b40591c564be7176576fa02bbd186097327af66ce877c1bd68a4dc1d"}, "downloads": -1, "filename": "acs-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "961d216bc64913ccaa71edc7b0d46041", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21131, "upload_time": "2016-05-15T10:50:56", "upload_time_iso_8601": "2016-05-15T10:50:56.643744Z", "url": "https://files.pythonhosted.org/packages/3e/34/c7b9cdf099842a95b332397fe0e922a3c23bc90d95390949140b7aad30b9/acs-0.1.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:24:25 2020"}