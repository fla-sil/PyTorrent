{"info": {"author": "Rob Hudson", "author_email": "rob@cogit8.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "====================\nDjango Debug Toolbar\n====================\n\nThe Django Debug Toolbar is a configurable set of panels that display various\ndebug information about the current request/response and when clicked, display\nmore details about the panel's content.\n\nCurrently, the following panels have been written and are working:\n\n- Django version\n- Request timer\n- A list of settings in settings.py\n- Common HTTP headers\n- GET/POST/cookie/session variable display\n- Templates and context used, and their template paths\n- SQL queries including time to execute and links to EXPLAIN each query\n- List of signals, their args and receivers\n- Logging output via Python's built-in logging module\n\nThere is also one Django management command currently:\n\n- `debugsqlshell`: Outputs the SQL that gets executed as you work in the Python\n  interactive shell.  (See example below)\n\nIf you have ideas for other panels please let us know.\n\nInstallation\n============\n\n#. Add the `debug_toolbar` directory to your Python path.\n\n#. Add the following middleware to your project's `settings.py` file:\n\n\t``'debug_toolbar.middleware.DebugToolbarMiddleware',``\n\n   Tying into middleware allows each panel to be instantiated on request and\n   rendering to happen on response.\n\n   The order of MIDDLEWARE_CLASSES is important: the Debug Toolbar middleware\n   must come after any other middleware that encodes the response's content\n   (such as GZipMiddleware).\n\n   Note: The debug toolbar will only display itself if the mimetype of the\n   response is either `text/html` or `application/xhtml+xml` and contains a\n   closing `</body>` tag.\n\n   Note: Be aware of middleware ordering and other middleware that may\n   intercept requests and return responses.  Putting the debug toolbar\n   middleware *after* the Flatpage middleware, for example, means the\n   toolbar will not show up on flatpages.\n\n#. Make sure your IP is listed in the `INTERNAL_IPS` setting.  If you are\n   working locally this will be:\n\n\tINTERNAL_IPS = ('127.0.0.1',)\n\n   Note: This is required because of the built-in requirements of the\n   `show_toolbar` method.  See below for how to define a method to determine\n   your own logic for displaying the toolbar.\n\n#. Add `debug_toolbar` to your `INSTALLED_APPS` setting so Django can find the\n   template files associated with the Debug Toolbar.\n\n   Alternatively, add the path to the debug toolbar templates\n   (``'path/to/debug_toolbar/templates'`` to your ``TEMPLATE_DIRS`` setting.)\n\nConfiguration\n=============\n\nThe debug toolbar has two settings that can be set in `settings.py`:\n\n#. Optional: Add a tuple called `DEBUG_TOOLBAR_PANELS` to your ``settings.py``\n   file that specifies the full Python path to the panel that you want included\n   in the Toolbar.  This setting looks very much like the `MIDDLEWARE_CLASSES`\n   setting.  For example::\n\n\tDEBUG_TOOLBAR_PANELS = (\n\t    'debug_toolbar.panels.version.VersionDebugPanel',\n\t    'debug_toolbar.panels.timer.TimerDebugPanel',\n\t    'debug_toolbar.panels.settings_vars.SettingsVarsDebugPanel',\n\t    'debug_toolbar.panels.headers.HeaderDebugPanel',\n\t    'debug_toolbar.panels.request_vars.RequestVarsDebugPanel',\n\t    'debug_toolbar.panels.template.TemplateDebugPanel',\n\t    'debug_toolbar.panels.sql.SQLDebugPanel',\n\t    'debug_toolbar.panels.signals.SignalDebugPanel',\n\t    'debug_toolbar.panels.logger.LoggingPanel',\n\t)\n\n   You can change the ordering of this tuple to customize the order of the\n   panels you want to display, or add/remove panels.  If you have custom panels\n   you can include them in this way -- just provide the full Python path to\n   your panel.\n\n#. Optional: There are a few configuration options to the debug toolbar that\n   can be placed in a dictionary:\n\n   * `INTERCEPT_REDIRECTS`: If set to True (default), the debug toolbar will\n     show an intermediate page upon redirect so you can view any debug\n     information prior to redirecting.  This page will provide a link to the\n     redirect destination you can follow when ready.  If set to False, redirects\n     will proceed as normal.\n\n   * `SHOW_TOOLBAR_CALLBACK`: If not set or set to None, the debug_toolbar\n     middleware will use its built-in show_toolbar method for determining whether\n     the toolbar should show or not.  The default checks are that DEBUG must be\n     set to True and the IP of the request must be in INTERNAL_IPS.  You can\n     provide your own method for displaying the toolbar which contains your\n     custom logic.  This method should return True or False.\n\n   * `EXTRA_SIGNALS`: An array of custom signals that might be in your project,\n     defined as the python path to the signal.\n\n   * `HIDE_DJANGO_SQL`: If set to True (the default) then code in Django itself\n     won't be shown in SQL stacktraces.\n\n   * `SHOW_TEMPLATE_CONTEXT`: If set to True (the default) then a template's\n     context will be included with it in the Template debug panel.  Turning this\n     off is useful when you have large template contexts, or you have template\n     contexts with lazy datastructures that you don't want to be evaluated.\n\n   * `TAG`: If set, this will be the tag to which debug_toolbar will attach the \n     debug toolbar. Defaults to 'body'.\n\n   Example configuration::\n\n\tdef custom_show_toolbar(request):\n\t    return True # Always show toolbar, for example purposes only.\n\n\tDEBUG_TOOLBAR_CONFIG = {\n\t    'INTERCEPT_REDIRECTS': False,\n\t    'SHOW_TOOLBAR_CALLBACK': custom_show_toolbar,\n\t    'EXTRA_SIGNALS': ['myproject.signals.MySignal'],\n\t    'HIDE_DJANGO_SQL': False,\n\t    'TAG': 'div',\n\t}\n\n`debugsqlshell`\n===============\nThe following is sample output from running the `debugsqlshell` management\ncommand.  Each ORM call that results in a database query will be beautifully\noutput in the shell::\n\n    $ ./manage.py debugsqlshell\n    Python 2.6.1 (r261:67515, Jul  7 2009, 23:51:51) \n    [GCC 4.2.1 (Apple Inc. build 5646)] on darwin\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    (InteractiveConsole)\n    >>> from page.models import Page\n    >>> ### Lookup and use resulting in an extra query...\n    >>> p = Page.objects.get(pk=1)\n    SELECT \"page_page\".\"id\",\n           \"page_page\".\"number\",\n           \"page_page\".\"template_id\",\n           \"page_page\".\"description\"\n    FROM \"page_page\"\n    WHERE \"page_page\".\"id\" = 1\n    \n    >>> print p.template.name\n    SELECT \"page_template\".\"id\",\n           \"page_template\".\"name\",\n           \"page_template\".\"description\"\n    FROM \"page_template\"\n    WHERE \"page_template\".\"id\" = 1\n    \n    Home\n    >>> ### Using select_related to avoid 2nd database call...\n    >>> p = Page.objects.select_related('template').get(pk=1)\n    SELECT \"page_page\".\"id\",\n           \"page_page\".\"number\",\n           \"page_page\".\"template_id\",\n           \"page_page\".\"description\",\n           \"page_template\".\"id\",\n           \"page_template\".\"name\",\n           \"page_template\".\"description\"\n    FROM \"page_page\"\n    INNER JOIN \"page_template\" ON (\"page_page\".\"template_id\" = \"page_template\".\"id\")\n    WHERE \"page_page\".\"id\" = 1\n    \n    >>> print p.template.name\n    Home\n\nTODOs and BUGS\n==============\nSee: http://github.com/robhudson/django-debug-toolbar/issues", "description_content_type": null, "docs_url": null, "download_url": "http://github.com/robhudson/django-debug-toolbar/downloads", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/msaelices/django-debug-toolbar/downloads", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-debug-toolbar-django13", "package_url": "https://pypi.org/project/django-debug-toolbar-django13/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-debug-toolbar-django13/", "project_urls": {"Download": "http://github.com/robhudson/django-debug-toolbar/downloads", "Homepage": "http://github.com/msaelices/django-debug-toolbar/downloads"}, "release_url": "https://pypi.org/project/django-debug-toolbar-django13/0.8.4/", "requires_dist": null, "requires_python": null, "summary": "A configurable set of panels that display various debug information about the current request/response. Version fully Django 1.3 compatible", "version": "0.8.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Django Debug Toolbar is a configurable set of panels that display various\ndebug information about the current request/response and when clicked, display\nmore details about the panel\u2019s content.</p>\n<p>Currently, the following panels have been written and are working:</p>\n<ul>\n<li>Django version</li>\n<li>Request timer</li>\n<li>A list of settings in settings.py</li>\n<li>Common HTTP headers</li>\n<li>GET/POST/cookie/session variable display</li>\n<li>Templates and context used, and their template paths</li>\n<li>SQL queries including time to execute and links to EXPLAIN each query</li>\n<li>List of signals, their args and receivers</li>\n<li>Logging output via Python\u2019s built-in logging module</li>\n</ul>\n<p>There is also one Django management command currently:</p>\n<ul>\n<li><cite>debugsqlshell</cite>: Outputs the SQL that gets executed as you work in the Python\ninteractive shell.  (See example below)</li>\n</ul>\n<p>If you have ideas for other panels please let us know.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Add the <cite>debug_toolbar</cite> directory to your Python path.</p>\n</li>\n<li><p>Add the following middleware to your project\u2019s <cite>settings.py</cite> file:</p>\n<blockquote>\n<p><tt>'debug_toolbar.middleware.DebugToolbarMiddleware',</tt></p>\n</blockquote>\n<p>Tying into middleware allows each panel to be instantiated on request and\nrendering to happen on response.</p>\n<p>The order of MIDDLEWARE_CLASSES is important: the Debug Toolbar middleware\nmust come after any other middleware that encodes the response\u2019s content\n(such as GZipMiddleware).</p>\n<p>Note: The debug toolbar will only display itself if the mimetype of the\nresponse is either <cite>text/html</cite> or <cite>application/xhtml+xml</cite> and contains a\nclosing <cite>&lt;/body&gt;</cite> tag.</p>\n<p>Note: Be aware of middleware ordering and other middleware that may\nintercept requests and return responses.  Putting the debug toolbar\nmiddleware <em>after</em> the Flatpage middleware, for example, means the\ntoolbar will not show up on flatpages.</p>\n</li>\n<li><p>Make sure your IP is listed in the <cite>INTERNAL_IPS</cite> setting.  If you are\nworking locally this will be:</p>\n<blockquote>\n<p>INTERNAL_IPS = (\u2018127.0.0.1\u2019,)</p>\n</blockquote>\n<p>Note: This is required because of the built-in requirements of the\n<cite>show_toolbar</cite> method.  See below for how to define a method to determine\nyour own logic for displaying the toolbar.</p>\n</li>\n<li><p>Add <cite>debug_toolbar</cite> to your <cite>INSTALLED_APPS</cite> setting so Django can find the\ntemplate files associated with the Debug Toolbar.</p>\n<p>Alternatively, add the path to the debug toolbar templates\n(<tt>'path/to/debug_toolbar/templates'</tt> to your <tt>TEMPLATE_DIRS</tt> setting.)</p>\n</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The debug toolbar has two settings that can be set in <cite>settings.py</cite>:</p>\n<ol>\n<li><p>Optional: Add a tuple called <cite>DEBUG_TOOLBAR_PANELS</cite> to your <tt>settings.py</tt>\nfile that specifies the full Python path to the panel that you want included\nin the Toolbar.  This setting looks very much like the <cite>MIDDLEWARE_CLASSES</cite>\nsetting.  For example:</p>\n<pre>DEBUG_TOOLBAR_PANELS = (\n    'debug_toolbar.panels.version.VersionDebugPanel',\n    'debug_toolbar.panels.timer.TimerDebugPanel',\n    'debug_toolbar.panels.settings_vars.SettingsVarsDebugPanel',\n    'debug_toolbar.panels.headers.HeaderDebugPanel',\n    'debug_toolbar.panels.request_vars.RequestVarsDebugPanel',\n    'debug_toolbar.panels.template.TemplateDebugPanel',\n    'debug_toolbar.panels.sql.SQLDebugPanel',\n    'debug_toolbar.panels.signals.SignalDebugPanel',\n    'debug_toolbar.panels.logger.LoggingPanel',\n)\n</pre>\n<p>You can change the ordering of this tuple to customize the order of the\npanels you want to display, or add/remove panels.  If you have custom panels\nyou can include them in this way \u2013 just provide the full Python path to\nyour panel.</p>\n</li>\n<li><p>Optional: There are a few configuration options to the debug toolbar that\ncan be placed in a dictionary:</p>\n<ul>\n<li><cite>INTERCEPT_REDIRECTS</cite>: If set to True (default), the debug toolbar will\nshow an intermediate page upon redirect so you can view any debug\ninformation prior to redirecting.  This page will provide a link to the\nredirect destination you can follow when ready.  If set to False, redirects\nwill proceed as normal.</li>\n<li><cite>SHOW_TOOLBAR_CALLBACK</cite>: If not set or set to None, the debug_toolbar\nmiddleware will use its built-in show_toolbar method for determining whether\nthe toolbar should show or not.  The default checks are that DEBUG must be\nset to True and the IP of the request must be in INTERNAL_IPS.  You can\nprovide your own method for displaying the toolbar which contains your\ncustom logic.  This method should return True or False.</li>\n<li><cite>EXTRA_SIGNALS</cite>: An array of custom signals that might be in your project,\ndefined as the python path to the signal.</li>\n<li><cite>HIDE_DJANGO_SQL</cite>: If set to True (the default) then code in Django itself\nwon\u2019t be shown in SQL stacktraces.</li>\n<li><cite>SHOW_TEMPLATE_CONTEXT</cite>: If set to True (the default) then a template\u2019s\ncontext will be included with it in the Template debug panel.  Turning this\noff is useful when you have large template contexts, or you have template\ncontexts with lazy datastructures that you don\u2019t want to be evaluated.</li>\n<li><cite>TAG</cite>: If set, this will be the tag to which debug_toolbar will attach the\ndebug toolbar. Defaults to \u2018body\u2019.</li>\n</ul>\n<p>Example configuration:</p>\n<pre>def custom_show_toolbar(request):\n    return True # Always show toolbar, for example purposes only.\n\nDEBUG_TOOLBAR_CONFIG = {\n    'INTERCEPT_REDIRECTS': False,\n    'SHOW_TOOLBAR_CALLBACK': custom_show_toolbar,\n    'EXTRA_SIGNALS': ['myproject.signals.MySignal'],\n    'HIDE_DJANGO_SQL': False,\n    'TAG': 'div',\n}\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"debugsqlshell\">\n<h2><cite>debugsqlshell</cite></h2>\n<p>The following is sample output from running the <cite>debugsqlshell</cite> management\ncommand.  Each ORM call that results in a database query will be beautifully\noutput in the shell:</p>\n<pre>$ ./manage.py debugsqlshell\nPython 2.6.1 (r261:67515, Jul  7 2009, 23:51:51)\n[GCC 4.2.1 (Apple Inc. build 5646)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt; from page.models import Page\n&gt;&gt;&gt; ### Lookup and use resulting in an extra query...\n&gt;&gt;&gt; p = Page.objects.get(pk=1)\nSELECT \"page_page\".\"id\",\n       \"page_page\".\"number\",\n       \"page_page\".\"template_id\",\n       \"page_page\".\"description\"\nFROM \"page_page\"\nWHERE \"page_page\".\"id\" = 1\n\n&gt;&gt;&gt; print p.template.name\nSELECT \"page_template\".\"id\",\n       \"page_template\".\"name\",\n       \"page_template\".\"description\"\nFROM \"page_template\"\nWHERE \"page_template\".\"id\" = 1\n\nHome\n&gt;&gt;&gt; ### Using select_related to avoid 2nd database call...\n&gt;&gt;&gt; p = Page.objects.select_related('template').get(pk=1)\nSELECT \"page_page\".\"id\",\n       \"page_page\".\"number\",\n       \"page_page\".\"template_id\",\n       \"page_page\".\"description\",\n       \"page_template\".\"id\",\n       \"page_template\".\"name\",\n       \"page_template\".\"description\"\nFROM \"page_page\"\nINNER JOIN \"page_template\" ON (\"page_page\".\"template_id\" = \"page_template\".\"id\")\nWHERE \"page_page\".\"id\" = 1\n\n&gt;&gt;&gt; print p.template.name\nHome\n</pre>\n</div>\n<div id=\"todos-and-bugs\">\n<h2>TODOs and BUGS</h2>\n<p>See: <a href=\"http://github.com/robhudson/django-debug-toolbar/issues\" rel=\"nofollow\">http://github.com/robhudson/django-debug-toolbar/issues</a></p>\n</div>\n\n          </div>"}, "last_serial": 789445, "releases": {"0.8.4": [{"comment_text": "", "digests": {"md5": "ae68a51a90161c212bdc7d3a4d71469b", "sha256": "f526603b7ce5174c2f9f4df7aa49c394c2a1e47fd18db57d7e5cdc4f4a5c8cc8"}, "downloads": -1, "filename": "django-debug-toolbar-django13-0.8.4.tar.gz", "has_sig": false, "md5_digest": "ae68a51a90161c212bdc7d3a4d71469b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81738, "upload_time": "2011-03-14T17:53:31", "upload_time_iso_8601": "2011-03-14T17:53:31.734271Z", "url": "https://files.pythonhosted.org/packages/5c/7d/23b4167f27eb6f7dc28c414aecbaa5183500c718baa88a7d940589067219/django-debug-toolbar-django13-0.8.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae68a51a90161c212bdc7d3a4d71469b", "sha256": "f526603b7ce5174c2f9f4df7aa49c394c2a1e47fd18db57d7e5cdc4f4a5c8cc8"}, "downloads": -1, "filename": "django-debug-toolbar-django13-0.8.4.tar.gz", "has_sig": false, "md5_digest": "ae68a51a90161c212bdc7d3a4d71469b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81738, "upload_time": "2011-03-14T17:53:31", "upload_time_iso_8601": "2011-03-14T17:53:31.734271Z", "url": "https://files.pythonhosted.org/packages/5c/7d/23b4167f27eb6f7dc28c414aecbaa5183500c718baa88a7d940589067219/django-debug-toolbar-django13-0.8.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:37 2020"}