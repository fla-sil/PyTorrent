{"info": {"author": "Fabian-Robert Stoeter", "author_email": "mail@faroit.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Plugins", "Intended Audience :: Science/Research", "Intended Audience :: Telecommunications Industry", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Multimedia :: Sound/Audio :: Analysis", "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis"], "description": "# museval\n\n[![Build Status](https://travis-ci.org/sigsep/sigsep-mus-eval.svg?branch=master)](https://travis-ci.org/sigsep/sigsep-mus-eval)\n[![Latest Version](https://img.shields.io/pypi/v/museval.svg)](https://pypi.python.org/pypi/museval)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/museval.svg)](https://pypi.python.org/pypi/museval)\n\nA python package to evaluate source separation results using the [MUSDB18](https://sigsep.github.io/musdb) dataset. This package was part of the [MUS task](https://sisec.inria.fr/home/2018-professionally-produced-music-recordings/) of the [Signal Separation Evaluation Campaign (SISEC)](https://sisec.inria.fr/).\n\n### BSSEval v4\n\nThe BSSEval metrics, as implemented in the [MATLAB toolboxes](http://bass-db.gforge.inria.fr/bss_eval/) and their re-implementation in [mir_eval](http://craffel.github.io/mir_eval/#module-mir_eval.separation) are widely used in the audio separation literature. One particularity of BSSEval is to compute the metrics after optimally matching the estimates to the true sources through linear distortion filters. This allows the criteria to be robust to some linear mismatches. Apart from the optional evaluation for all possible permutations of the sources, this matching is the reason for most of the computation cost of BSSEval, especially considering it is done for each evaluation window when the metrics are computed on a framewise basis.\n\nFor this package, we enabled the option of having _time invariant_ distortion filters, instead of necessarily taking them as varying over time as done in the previous versions of BSS eval. First, enabling this option _significantly reduces_ the computational cost for evaluation because matching needs to be done only once for the whole signal. Second, it introduces much more dynamics in the evaluation, because time-varying matching filters turn out to over-estimate performance. Third, this makes matching more robust, because true sources are not silent throughout the whole recording, while they often were for short windows.\n\n## Installation\n\n### Package installation\n\nYou can install the `museval` parsing package using pip:\n\n```bash\npip install museval\n```\n\n## Usage\n\nThe purpose of this package is to evaluate source separation results and write out validated `json` files. We want to encourage users to use this evaluation output format as the standardized way to share source separation results. `museval` is designed to work in conjuction with the [musdb](https://github.com/sigsep/sigsep-mus-db) tools and the MUSDB18 dataset (however, `museval` can also be used without `musdb`).\n\n### Separate MUSDB18 tracks and Evaluate on-the-fly\n\n- If you want to perform evaluation while processing your source separation results, you can make use `musdb` track objects.\nHere is an example for such a function separating the mixture into a __vocals__ and __accompaniment__ track:\n\n```python\nimport musdb\nimport museval\n\ndef estimate_and_evaluate(track):\n    # assume mix as estimates\n    estimates = {\n        'vocals': track.audio,\n        'accompaniment': track.audio\n    }\n\n    # Evaluate using museval\n    scores = museval.eval_mus_track(\n        track, estimates, output_dir=\"path/to/json\"\n    )\n\n    # print nicely formatted and aggregated scores\n    print(scores)\n\nmus = musdb.DB()\nfor track in mus:\n    estimate_and_evaluate(track)\n\n```\n\nMake sure `output_dir` is set. `museval` will recreate the `musdb` file structure in that folder and write the evaluation results to this folder.\n\n### Evaluate MUSDB18 tracks later\n\nIf you have already computed your estimates, we provide you with an easy-to-use function to process evaluation results afterwards.\n\nSimply use the `museval.eval_mus_dir` to evaluate your `estimates_dir` and write the results into the `output_dir`. For convenience, the `eval_mus_dir` function accepts all parameters of the `musdb.run()`. That way e.g. multiprocessing can easily be enabled by setting `parallel=True`:\n\n```python\nimport musdb\nimport museval\n\n# initiate musdb\nmus = musdb.DB()\n\n# evaluate an existing estimate folder with wav files\nmuseval.eval_mus_dir(\n    dataset=mus,  # instance of musdb\n    estimates_dir=...,  # path to estimate folder\n    output_dir=...,  # set a folder to write eval json files\n    subsets=\"test\",\n    is_wav=False\n)\n```\n\n### Aggregate and Analyze Scores\n\nScores for each track can also be aggregated in a pandas DataFrame for easier analysis or the creation of boxplots.\nTo aggregate multiple tracks in a DataFrame, create `museval.EvalStore()` object and add the track scores successively.\n\n```python\nresults = museval.EvalStore(frames_agg='median', tracks_agg='median')\nfor track in tracks:\n    # ...\n    results.add_track(museval.eval_mus_track(track, estimates))\n```\n\nWhen all tracks have been added, the aggregated scores can be shown using `print(results)` and results may be saved as a pandas DataFrame `results.save('my_method.pandas')`.\n\nTo compare multiple methods, create a `museval.MethodStore()` object add the results\n\n```python\nmethods = museval.MethodStore()\nmethods.add_evalstore(results, name=\"XZY\")\n```\n\nTo compare against participants from [SiSEC MUS 2018](https://github.com/sigsep/sigsep-mus-2018), we provide a convenient method to load the existing scores on demand using `methods.add_sisec18()`. For the creation of plots and statistical significance tests we refer to our [list of examples](/examples).\n\n#### Commandline tool\n\nWe provide a command line wrapper of `eval_mus_dir` by calling the `museval` command line tool. The following example is equivalent to the code example above:\n\n```\nmuseval -p --musdb path/to/musdb -o path/to/output_dir path/to/estimate_dir\n```\n\n:bulb: you use the `--iswav` flag to use the decoded wav _musdb_ dataset.\n\n### Using Docker for Evaluation\n\nIf you don't want to set up a Python environment to run the evaluation, we would recommend to use [Docker](http://docker.com). Assuming you have already computed your estimates and installed docker in your machine, you just need to run the following two lines in your terminal:\n\n#### 1. Pull Docker Container\n\nPull our precompiled `sigsep-mus-eval` image from [dockerhub](https://hub.docker.com/r/faroit/sigsep-mus-eval/):\n\n```\ndocker pull faroit/sigsep-mus-eval\n```\n\n#### 2. Run evaluation\n\nTo run the evaluation inside of the docker, three absolute paths are required:\n\n* `estimatesdir` will stand here for the absolute path to the estimates directory. (For instance `/home/faroit/dev/mymethod/musdboutput`)\n* `musdbdir` will stand here for the absolute path to the root folder of musdb. (For instance `/home/faroit/dev/data/musdb18`)\n* `outputdir` will stand here for the absolute path to the output directory. (For instance `/home/faroit/dev/mymethod/scores`)\n\nWe just mount these directories into the docker container using the `-v` flags and start the docker instance:\n\n```\ndocker run --rm -v estimatesdir:/est -v musdbdir:/mus -v outputdir:/out faroit/sigsep-mus-eval --musdb /mus -o /out /est\n```\n\nIn the line above, replace `estimatesdir`, `musdbdir` and `outputdir` by the absolute paths for your setting.  Please note that docker requires absolute paths so you have to rely on your command line environment to convert relative paths to absolute paths (e.g. by using `$HOME/` on Unix).\n\n:warning: `museval` requires a significant amount of memory for the evaluation. Evaluating all five targets for _MUSDB18_ may require more than 4GB of RAM. If you use multiprocessing by using the `-p` switch in `museval`, this results in 16GB of RAM. It is recommended to adjust your Docker preferences, because the docker container might just quit if its out of memory.\n\n## References\n\nA. If you use the `museval` in the context of source separation evaluation comparing a method it to other methods of [SiSEC 2018](http://sisec18.unmix.app/), please cite\n\n```\n@InProceedings{SiSEC18,\n  author=\"St{\\\"o}ter, Fabian-Robert and Liutkus, Antoine and Ito, Nobutaka\",\n  title=\"The 2018 Signal Separation Evaluation Campaign\",\n  booktitle=\"Latent Variable Analysis and Signal Separation:\n  14th International Conference, LVA/ICA 2018, Surrey, UK\",\n  year=\"2018\",\n  pages=\"293--305\"\n}\n```\n\nB. if you use the software for any other purpose, you can cite the software release\n\n[![DOI](https://zenodo.org/badge/120666367.svg)](https://zenodo.org/badge/latestdoi/120666367)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sigsep/sigsep-mus-eval", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "museval", "package_url": "https://pypi.org/project/museval/", "platform": "", "project_url": "https://pypi.org/project/museval/", "project_urls": {"Homepage": "https://github.com/sigsep/sigsep-mus-eval"}, "release_url": "https://pypi.org/project/museval/0.3.0/", "requires_dist": ["musdb (>=0.3.0)", "pandas (>=0.25.0)", "numpy", "scipy", "simplejson", "soundfile", "jsonschema", "check-manifest ; extra == 'dev'", "sphinx ; extra == 'docs'", "sphinx-rtd-theme ; extra == 'docs'", "recommonmark ; extra == 'docs'", "numpydoc ; extra == 'docs'", "pytest ; extra == 'tests'", "pytest-pep8 ; extra == 'tests'"], "requires_python": "", "summary": "Evaluation tools for the SIGSEP MUS database", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>museval</h1>\n<p><a href=\"https://travis-ci.org/sigsep/sigsep-mus-eval\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6e6eb569db60fbe0c3e559b14d1a2aebb32eef2/68747470733a2f2f7472617669732d63692e6f72672f7369677365702f7369677365702d6d75732d6576616c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/museval\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbe1863e4f8d6f60b5a1196ad846832111512e71/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d75736576616c2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/museval\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78e8b10c79bd0e628635e38e8c087160cc4c9bc8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d75736576616c2e737667\"></a></p>\n<p>A python package to evaluate source separation results using the <a href=\"https://sigsep.github.io/musdb\" rel=\"nofollow\">MUSDB18</a> dataset. This package was part of the <a href=\"https://sisec.inria.fr/home/2018-professionally-produced-music-recordings/\" rel=\"nofollow\">MUS task</a> of the <a href=\"https://sisec.inria.fr/\" rel=\"nofollow\">Signal Separation Evaluation Campaign (SISEC)</a>.</p>\n<h3>BSSEval v4</h3>\n<p>The BSSEval metrics, as implemented in the <a href=\"http://bass-db.gforge.inria.fr/bss_eval/\" rel=\"nofollow\">MATLAB toolboxes</a> and their re-implementation in <a href=\"http://craffel.github.io/mir_eval/#module-mir_eval.separation\" rel=\"nofollow\">mir_eval</a> are widely used in the audio separation literature. One particularity of BSSEval is to compute the metrics after optimally matching the estimates to the true sources through linear distortion filters. This allows the criteria to be robust to some linear mismatches. Apart from the optional evaluation for all possible permutations of the sources, this matching is the reason for most of the computation cost of BSSEval, especially considering it is done for each evaluation window when the metrics are computed on a framewise basis.</p>\n<p>For this package, we enabled the option of having <em>time invariant</em> distortion filters, instead of necessarily taking them as varying over time as done in the previous versions of BSS eval. First, enabling this option <em>significantly reduces</em> the computational cost for evaluation because matching needs to be done only once for the whole signal. Second, it introduces much more dynamics in the evaluation, because time-varying matching filters turn out to over-estimate performance. Third, this makes matching more robust, because true sources are not silent throughout the whole recording, while they often were for short windows.</p>\n<h2>Installation</h2>\n<h3>Package installation</h3>\n<p>You can install the <code>museval</code> parsing package using pip:</p>\n<pre>pip install museval\n</pre>\n<h2>Usage</h2>\n<p>The purpose of this package is to evaluate source separation results and write out validated <code>json</code> files. We want to encourage users to use this evaluation output format as the standardized way to share source separation results. <code>museval</code> is designed to work in conjuction with the <a href=\"https://github.com/sigsep/sigsep-mus-db\" rel=\"nofollow\">musdb</a> tools and the MUSDB18 dataset (however, <code>museval</code> can also be used without <code>musdb</code>).</p>\n<h3>Separate MUSDB18 tracks and Evaluate on-the-fly</h3>\n<ul>\n<li>If you want to perform evaluation while processing your source separation results, you can make use <code>musdb</code> track objects.\nHere is an example for such a function separating the mixture into a <strong>vocals</strong> and <strong>accompaniment</strong> track:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">musdb</span>\n<span class=\"kn\">import</span> <span class=\"nn\">museval</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">estimate_and_evaluate</span><span class=\"p\">(</span><span class=\"n\">track</span><span class=\"p\">):</span>\n    <span class=\"c1\"># assume mix as estimates</span>\n    <span class=\"n\">estimates</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'vocals'</span><span class=\"p\">:</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">audio</span><span class=\"p\">,</span>\n        <span class=\"s1\">'accompaniment'</span><span class=\"p\">:</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">audio</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Evaluate using museval</span>\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">museval</span><span class=\"o\">.</span><span class=\"n\">eval_mus_track</span><span class=\"p\">(</span>\n        <span class=\"n\">track</span><span class=\"p\">,</span> <span class=\"n\">estimates</span><span class=\"p\">,</span> <span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/json\"</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># print nicely formatted and aggregated scores</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)</span>\n\n<span class=\"n\">mus</span> <span class=\"o\">=</span> <span class=\"n\">musdb</span><span class=\"o\">.</span><span class=\"n\">DB</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">track</span> <span class=\"ow\">in</span> <span class=\"n\">mus</span><span class=\"p\">:</span>\n    <span class=\"n\">estimate_and_evaluate</span><span class=\"p\">(</span><span class=\"n\">track</span><span class=\"p\">)</span>\n</pre>\n<p>Make sure <code>output_dir</code> is set. <code>museval</code> will recreate the <code>musdb</code> file structure in that folder and write the evaluation results to this folder.</p>\n<h3>Evaluate MUSDB18 tracks later</h3>\n<p>If you have already computed your estimates, we provide you with an easy-to-use function to process evaluation results afterwards.</p>\n<p>Simply use the <code>museval.eval_mus_dir</code> to evaluate your <code>estimates_dir</code> and write the results into the <code>output_dir</code>. For convenience, the <code>eval_mus_dir</code> function accepts all parameters of the <code>musdb.run()</code>. That way e.g. multiprocessing can easily be enabled by setting <code>parallel=True</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">musdb</span>\n<span class=\"kn\">import</span> <span class=\"nn\">museval</span>\n\n<span class=\"c1\"># initiate musdb</span>\n<span class=\"n\">mus</span> <span class=\"o\">=</span> <span class=\"n\">musdb</span><span class=\"o\">.</span><span class=\"n\">DB</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># evaluate an existing estimate folder with wav files</span>\n<span class=\"n\">museval</span><span class=\"o\">.</span><span class=\"n\">eval_mus_dir</span><span class=\"p\">(</span>\n    <span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">mus</span><span class=\"p\">,</span>  <span class=\"c1\"># instance of musdb</span>\n    <span class=\"n\">estimates_dir</span><span class=\"o\">=...</span><span class=\"p\">,</span>  <span class=\"c1\"># path to estimate folder</span>\n    <span class=\"n\">output_dir</span><span class=\"o\">=...</span><span class=\"p\">,</span>  <span class=\"c1\"># set a folder to write eval json files</span>\n    <span class=\"n\">subsets</span><span class=\"o\">=</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n    <span class=\"n\">is_wav</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Aggregate and Analyze Scores</h3>\n<p>Scores for each track can also be aggregated in a pandas DataFrame for easier analysis or the creation of boxplots.\nTo aggregate multiple tracks in a DataFrame, create <code>museval.EvalStore()</code> object and add the track scores successively.</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">museval</span><span class=\"o\">.</span><span class=\"n\">EvalStore</span><span class=\"p\">(</span><span class=\"n\">frames_agg</span><span class=\"o\">=</span><span class=\"s1\">'median'</span><span class=\"p\">,</span> <span class=\"n\">tracks_agg</span><span class=\"o\">=</span><span class=\"s1\">'median'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">track</span> <span class=\"ow\">in</span> <span class=\"n\">tracks</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">add_track</span><span class=\"p\">(</span><span class=\"n\">museval</span><span class=\"o\">.</span><span class=\"n\">eval_mus_track</span><span class=\"p\">(</span><span class=\"n\">track</span><span class=\"p\">,</span> <span class=\"n\">estimates</span><span class=\"p\">))</span>\n</pre>\n<p>When all tracks have been added, the aggregated scores can be shown using <code>print(results)</code> and results may be saved as a pandas DataFrame <code>results.save('my_method.pandas')</code>.</p>\n<p>To compare multiple methods, create a <code>museval.MethodStore()</code> object add the results</p>\n<pre><span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"n\">museval</span><span class=\"o\">.</span><span class=\"n\">MethodStore</span><span class=\"p\">()</span>\n<span class=\"n\">methods</span><span class=\"o\">.</span><span class=\"n\">add_evalstore</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"XZY\"</span><span class=\"p\">)</span>\n</pre>\n<p>To compare against participants from <a href=\"https://github.com/sigsep/sigsep-mus-2018\" rel=\"nofollow\">SiSEC MUS 2018</a>, we provide a convenient method to load the existing scores on demand using <code>methods.add_sisec18()</code>. For the creation of plots and statistical significance tests we refer to our <a href=\"/examples\" rel=\"nofollow\">list of examples</a>.</p>\n<h4>Commandline tool</h4>\n<p>We provide a command line wrapper of <code>eval_mus_dir</code> by calling the <code>museval</code> command line tool. The following example is equivalent to the code example above:</p>\n<pre><code>museval -p --musdb path/to/musdb -o path/to/output_dir path/to/estimate_dir\n</code></pre>\n<p>:bulb: you use the <code>--iswav</code> flag to use the decoded wav <em>musdb</em> dataset.</p>\n<h3>Using Docker for Evaluation</h3>\n<p>If you don't want to set up a Python environment to run the evaluation, we would recommend to use <a href=\"http://docker.com\" rel=\"nofollow\">Docker</a>. Assuming you have already computed your estimates and installed docker in your machine, you just need to run the following two lines in your terminal:</p>\n<h4>1. Pull Docker Container</h4>\n<p>Pull our precompiled <code>sigsep-mus-eval</code> image from <a href=\"https://hub.docker.com/r/faroit/sigsep-mus-eval/\" rel=\"nofollow\">dockerhub</a>:</p>\n<pre><code>docker pull faroit/sigsep-mus-eval\n</code></pre>\n<h4>2. Run evaluation</h4>\n<p>To run the evaluation inside of the docker, three absolute paths are required:</p>\n<ul>\n<li><code>estimatesdir</code> will stand here for the absolute path to the estimates directory. (For instance <code>/home/faroit/dev/mymethod/musdboutput</code>)</li>\n<li><code>musdbdir</code> will stand here for the absolute path to the root folder of musdb. (For instance <code>/home/faroit/dev/data/musdb18</code>)</li>\n<li><code>outputdir</code> will stand here for the absolute path to the output directory. (For instance <code>/home/faroit/dev/mymethod/scores</code>)</li>\n</ul>\n<p>We just mount these directories into the docker container using the <code>-v</code> flags and start the docker instance:</p>\n<pre><code>docker run --rm -v estimatesdir:/est -v musdbdir:/mus -v outputdir:/out faroit/sigsep-mus-eval --musdb /mus -o /out /est\n</code></pre>\n<p>In the line above, replace <code>estimatesdir</code>, <code>musdbdir</code> and <code>outputdir</code> by the absolute paths for your setting.  Please note that docker requires absolute paths so you have to rely on your command line environment to convert relative paths to absolute paths (e.g. by using <code>$HOME/</code> on Unix).</p>\n<p>:warning: <code>museval</code> requires a significant amount of memory for the evaluation. Evaluating all five targets for <em>MUSDB18</em> may require more than 4GB of RAM. If you use multiprocessing by using the <code>-p</code> switch in <code>museval</code>, this results in 16GB of RAM. It is recommended to adjust your Docker preferences, because the docker container might just quit if its out of memory.</p>\n<h2>References</h2>\n<p>A. If you use the <code>museval</code> in the context of source separation evaluation comparing a method it to other methods of <a href=\"http://sisec18.unmix.app/\" rel=\"nofollow\">SiSEC 2018</a>, please cite</p>\n<pre><code>@InProceedings{SiSEC18,\n  author=\"St{\\\"o}ter, Fabian-Robert and Liutkus, Antoine and Ito, Nobutaka\",\n  title=\"The 2018 Signal Separation Evaluation Campaign\",\n  booktitle=\"Latent Variable Analysis and Signal Separation:\n  14th International Conference, LVA/ICA 2018, Surrey, UK\",\n  year=\"2018\",\n  pages=\"293--305\"\n}\n</code></pre>\n<p>B. if you use the software for any other purpose, you can cite the software release</p>\n<p><a href=\"https://zenodo.org/badge/latestdoi/120666367\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a4c5eec8a9e77bf8abcc3c3ba30a30226fc28aa/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3132303636363336372e737667\"></a></p>\n\n          </div>"}, "last_serial": 5724562, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "ec429e3656825bcd1619177e8e530f88", "sha256": "0cb8d177aba001af1cb7d7e0795ddf5151db944db22707fa9313a28d5c17efa5"}, "downloads": -1, "filename": "museval-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ec429e3656825bcd1619177e8e530f88", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32373, "upload_time": "2018-02-27T14:50:41", "upload_time_iso_8601": "2018-02-27T14:50:41.364219Z", "url": "https://files.pythonhosted.org/packages/43/5d/0d5c688749d6149a61040b9cb1f7dfcecd425078b53c51f65f3830772276/museval-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abd2785cbd7ea22b9e41591b7f5417fb", "sha256": "2f3cf7968fdead019e8775c756d257a52b7ddd3fc70a2def9fe49bbaf3f3b2b3"}, "downloads": -1, "filename": "museval-0.2.0.tar.gz", "has_sig": false, "md5_digest": "abd2785cbd7ea22b9e41591b7f5417fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16365, "upload_time": "2018-02-27T14:50:44", "upload_time_iso_8601": "2018-02-27T14:50:44.166646Z", "url": "https://files.pythonhosted.org/packages/bb/10/77d3ad301288ab57f7b792476b5c873ebef0f17b55e2b1b0969122eef335/museval-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b37b8b834fc80807ba9b6a0644eeb22f", "sha256": "b6122938721a54bbb24399aa096e5bad22e7fb58a5b1f71b6cb38f96ee8f0afa"}, "downloads": -1, "filename": "museval-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b37b8b834fc80807ba9b6a0644eeb22f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15533, "upload_time": "2019-06-28T17:02:46", "upload_time_iso_8601": "2019-06-28T17:02:46.240949Z", "url": "https://files.pythonhosted.org/packages/cf/47/2d5ad70d64dda6f2847a16590518250a5a83d22ab06df65a048a83b279b0/museval-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2667770de2400620e9e2091c5cfcf21c", "sha256": "ca6a0060a44b42b2a5523c3165ecf86ba8e8d226feab2e3a9a8fa42daec48112"}, "downloads": -1, "filename": "museval-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2667770de2400620e9e2091c5cfcf21c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16644, "upload_time": "2019-06-28T17:02:47", "upload_time_iso_8601": "2019-06-28T17:02:47.895883Z", "url": "https://files.pythonhosted.org/packages/72/0e/c7f7fc4ad5e313762ee37d4a0c3bb7d36ecf4c3c6dae0c6ef6f606b44f50/museval-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3c250eb9e490fbd9c5478eccecc7e9b7", "sha256": "8c913fd48224746e480b9c4d854e9b0e2c2a0ba9d457ae3dc4360b99be2677ab"}, "downloads": -1, "filename": "museval-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c250eb9e490fbd9c5478eccecc7e9b7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21238, "upload_time": "2019-08-24T14:30:46", "upload_time_iso_8601": "2019-08-24T14:30:46.365369Z", "url": "https://files.pythonhosted.org/packages/5a/5d/1419271e96537ea973d039818c7f164a150e68867fd216fd591d0a5e43b7/museval-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5484c83f489f27908bd5ad11c6cb2992", "sha256": "2e1334dd3367dea562c1902515f6d55e87dc3072cfc411c616ac6f0a48d31d5f"}, "downloads": -1, "filename": "museval-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5484c83f489f27908bd5ad11c6cb2992", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21854, "upload_time": "2019-08-24T14:30:49", "upload_time_iso_8601": "2019-08-24T14:30:49.610610Z", "url": "https://files.pythonhosted.org/packages/c6/e4/7fffd1ecc13c89bfbd89a559896b3faa16cfbb2d65eee2ad27ce128b2c0a/museval-0.3.0.tar.gz", "yanked": false}], "0.3.0b1": [{"comment_text": "", "digests": {"md5": "37904375e3bb19edb558a005915235cd", "sha256": "dab21230366809c640fb93af30fd1312372f5987f274d04bc92a57d79e9dddf2"}, "downloads": -1, "filename": "museval-0.3.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "37904375e3bb19edb558a005915235cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21661, "upload_time": "2019-08-17T15:28:25", "upload_time_iso_8601": "2019-08-17T15:28:25.572335Z", "url": "https://files.pythonhosted.org/packages/e4/0c/174dd5eac82e99e5e568303788f575c89ac45e4b2f0ce60b103594abd511/museval-0.3.0b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b44415cc8926639063ba140978b6193", "sha256": "5a966715f58f3b8b6d555bb10868897a29c440d4828a176a9703aec61d4b7107"}, "downloads": -1, "filename": "museval-0.3.0b1.tar.gz", "has_sig": false, "md5_digest": "9b44415cc8926639063ba140978b6193", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22592, "upload_time": "2019-08-17T15:28:27", "upload_time_iso_8601": "2019-08-17T15:28:27.384996Z", "url": "https://files.pythonhosted.org/packages/69/07/44773ff82e6b3e098ac571ab552f33c59382980447253a4259a6af323f98/museval-0.3.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c250eb9e490fbd9c5478eccecc7e9b7", "sha256": "8c913fd48224746e480b9c4d854e9b0e2c2a0ba9d457ae3dc4360b99be2677ab"}, "downloads": -1, "filename": "museval-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c250eb9e490fbd9c5478eccecc7e9b7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21238, "upload_time": "2019-08-24T14:30:46", "upload_time_iso_8601": "2019-08-24T14:30:46.365369Z", "url": "https://files.pythonhosted.org/packages/5a/5d/1419271e96537ea973d039818c7f164a150e68867fd216fd591d0a5e43b7/museval-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5484c83f489f27908bd5ad11c6cb2992", "sha256": "2e1334dd3367dea562c1902515f6d55e87dc3072cfc411c616ac6f0a48d31d5f"}, "downloads": -1, "filename": "museval-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5484c83f489f27908bd5ad11c6cb2992", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21854, "upload_time": "2019-08-24T14:30:49", "upload_time_iso_8601": "2019-08-24T14:30:49.610610Z", "url": "https://files.pythonhosted.org/packages/c6/e4/7fffd1ecc13c89bfbd89a559896b3faa16cfbb2d65eee2ad27ce128b2c0a/museval-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:11 2020"}