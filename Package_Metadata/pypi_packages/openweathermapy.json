{"info": {"author": "Stefan Kuethe", "author_email": "crazycapivara@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Utilities"], "description": "openweathermapy\n===============\n\nPython package wrapping *OpenWeatherMap.org\u2019s* API 2.5.\n\nAs *OpenWeatherMap* returns data mostly in the form of nested\ndictionaries, *openweathermapy* gives a simple API to access items in a\ncomfortable way:\n\n.. code:: python\n\n    # classic access\n    item = data[\"main\"][\"temp\"]\n\n    # openweathermapy access\n    item = data(\"main.temp\")\n\n    # access multiple items at once\n    >>> items = data(\"main.temp\", \"wind.speed\")\n\nStatus\n======\n\nDevelopment - Alpha\n\nVersion\n=======\n\n0.6.6\n\nInstallation\n============\n\n.. code:: bash\n\n    # via pip\n    ~$ pip install openweathermapy\n\n     # or download package and run ...\n    ~$ python setup.py install\n\nDocumentation\n=============\n\nBesides the examples in this file, please use Python\u2019s builtin help\nfunctionality. Further documentation based on the docstrings is planned.\n\nUsage\n=====\n\n.. code:: python\n\n    >>> import openweathermapy.core as owm\n\nAll parameters defined in *OpenWeatherMap\u2019s* API documentation can be\npassed to the functions in *openweathermapy* as keyword arguments\n``**params``. The query string always depends on the request (API call),\nbut unsupported parameters will (normally) not raise an error. Most\ncommon ones to be used are ``units``, ``lang`` and (if needed)\n``APPID``. So, it may be a good idea to pass them in the form of a\nsettings dictionary:\n\n.. code:: python\n\n    >>> settings = {\"units\": \"metric\", \"lang\": \"DE\"}\n    >>> data = owm.get_current(\"Kassel,DE\", **settings)\n\n    # settings containing APIKEY\n    >>> settings = {\"APPID\": 1111111111, \"units\": \"metric\"}\n\n**Data objects and views**\n\nThe main data object is ``openweathermapy.utils.NestedDict``, which\nextends Python\u2019s builtin ``dict`` by methods giving a more flexible\naccess to the items as shown above. If a list of weather data (objects)\nis returned ``openweathermapy.utils.NestedDictList`` or\n``openweathermapy.core.DataBlock`` is used. The latter one just adds an\nattribute ``meta`` to the ``NestedDictList`` containing the meta data of\nthe responses.\n\nA **view** is just a list of keys to extract data from the responses.\nSo, you can define views like *summary*, *minimal* etc. depending on\nyour needs. This keeps everything as flexible as possible:\n\n.. code:: python\n\n    >>> views = {\n    ...    \"summary\": [\"main.temp\", \"main.pressure\", \"main.humidity\"]\n    ... }\n\n    >>> data = owm.get_current(\"London,UK\", units=\"metric\")\n    >>> data(*views[\"summary\"])\n    (18.56, 1011, 63)\n\n    # return complete keys\n    >>> data.get_dict(views[\"summary\"])\n    {'main.temp': 18.56, 'main.humidity': 63, 'main.pressure': 1011}\n\n    # return only last key\n    >>> data.get_dict(views[\"summary\"], split_keys=True)\n    {'pressure': 1011, 'temp': 18.56, 'humidity': 63} \n\nYou can also load views from files in *json* format for example by using\n``openweathermapy.utils.load_config``.\n\n**Current weather data**\n\n**City** can be given as *name*, *id*, or *geographic coordinates*. If\nyou want to stay as close as possible to the original API, you can also\nskip the first argument and use the parameters ``q``, ``id``, ``lat``\nand ``lon`` or ``zip`` instead. For details see *OpenWeatherMap\u2019s* API\ndocumentation.\n\n.. code:: python\n\n    # get data by city name and country code\n    >>> data = owm.get_current(\"Kassel,DE\")\n        \n    # get data by city id and set language to german (DE)\n    >>> data = owm.get_current(2892518, lang=\"DE\")\n        \n    # get data by latitude and longitude and return temperatures in Celcius\n    >>> location = (51.32, 9.5)\n    >>> data = owm.get_current(location, units=\"metric\")\n        \n    # optional: skip city argument and get data by zip code\n    >>> data = owm.get_current(zip=\"34128,DE\") \n\n    # access single item\n    >>> data(\"main.temp\")\n    11.06\n\n    # access multiple items at once\n    >>> keys = [\"main.temp\", \"main.humidity\", \"wind.speed\"]\n    >>> data.get_many(keys)\n    (11.06, 58, 6.2)\n\n    # alternative access\n    >>> data(*keys)\n    (11.06, 58, 6.2)\n\n    # get data for 'Malaga,ES', 'Kassel,DE', 'New York,US'\n    >>> city_ids = (2892518, 2514256, 5128581)\n    >>> data = owm.get_current_for_group(city_ids, units=\"metric\", lang=\"DE\")\n    >>> data_malaga = data[0]\n\n    # find city by name and return data for match(es)\n    >>> data = owm.find_city(\"Malaga\")\n\n    # get data for 5 cities around geographic coordinates\n    >>> location = (51.32, 9.5)\n    >>> data = owm.find_cities_by_geo_coord(location, 5)\n\n    # get data from station\n    >>> data = owm.get_current_from_station(4926)\n\n    # get stations by geographic coordinates\n    >>> location = (51.32, 9.5)\n    >>> data = owm.find_stations_by_geo_coord(location)\n\n**Forecast data**\n\n**City** can be given in the same way as shown in the examples above.\n\n.. code:: python\n\n    # get 3h forecast data\n    >>> data = owm.get_forecast_hourly(\"Kassel,DE\", lang=\"DE\")\n\n    # get daily forecast data for 7 days\n    >>> data = owm.get_forecast_daily(\"Kassel,DE\", 7, units=\"metric\")\n\n    # show meta data\n    >>> data.meta\n    {u'city': {u'country': u'DE', u'population': 0, u'id': 2892518,\n    u'coord': {u'lat': 51.316669, u'lon': 9.5}, u'name': u'Kassel'},\n    u'message': 0.0185, u'cod': u'200', u'cnt': 7}\n\n    # get coordinates and id\n    >>> data.meta(*[\"city.coord\", \"city.id\"])\n    ({u'lat': 51.316669, u'lon': 9.5}, 2892518)\n\n    # select columns\n    >>> selection = data.select([\"dt\", \"temp.min\", \"temp.max\"])\n    >>> for line in selection:\n    ...    line \n    ...\n    (1437044400, 16.63, 24.99)\n    (1437130800, 18.21, 30.17)\n    (1437217200, 14.96, 26.35)\n    (1437303600, 15.82, 23.49)\n    (1437390000, 15.52, 23.95)\n    (1437476400, 18.77, 29.11)\n    (1437562800, 14.67, 27.11)\n\n    # convert column \"dt\" to datetime string\n    >>> from datetime import datetime as dt\n    >>> conv = {\"dt\": lambda ts: str(dt.utcfromtimestamp(ts))}\n\n    >>> selection = data.select([\"dt\", \"temp.min\", \"temp.max\"], converters=conv)\n    >>> for line in selection:\n    ...    line \n    ...\n    ('2015-07-16 11:00:00', 16.63, 24.99)\n    ('2015-07-17 11:00:00', 18.21, 30.17)\n    ('2015-07-18 11:00:00', 14.96, 26.35)\n    ('2015-07-19 11:00:00', 15.82, 23.49)\n    ('2015-07-20 11:00:00', 15.52, 23.95)\n    ('2015-07-21 11:00:00', 18.77, 29.11)\n    ('2015-07-22 11:00:00', 14.67, 27.11)\n\n**Historical data**\n\nFor a complete list of parameters as ``start``, ``end`` etc., which can\nbe passed, please refer to *OpenWeatherMap\u2019s* API documention.\n\n.. code:: python\n\n    # get historical data for city\n    >>> data = owm.get_history(\"Kassel,DE\")\n\n    # get historical data from station\n    >>> data = owm.get_history_from_station(4926)\n\n**Customization**\n\nYou can customize or extend the lib to your needs by using the wrapper\nfunction ``wrap_get`` or the decorator class ``GetDecorator``. Both are\nmore or less the same. As first argument the *appendix* to the *base\nurl* needs to be given. Optionally a *dictionary with parameters* and a\n*data converter* can be passed.\n\n.. code:: python\n\n    # show base url\n    >>> owm.BASE_URL\n    'http://api.openweathermap.org/data/2.5/'\n\n    # base url for fetching current weather data\n    >>> appendix = \"weather\"\n    >>> owm.BASE_URL+appendix\n    'http://api.openweathermap.org/data/2.5/weather'\n\n    # create a function to get current weather data and return temperatures in Celsius (units=\"metric\") \n    >>> f = wrap_get(\"weather\", dict(units=\"metric\"))\n    >>> data = f(\"London,UK\")\n    >>> data_de = f(zip=\"34128,DE\", lang=\"DE\")\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/crazycapivara/openweathermapy/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/crazycapivara/openweathermapy", "keywords": "openweathermap,weather data,forecast data,free weather,open weather,API 2.5", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "openweathermapy", "package_url": "https://pypi.org/project/openweathermapy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/openweathermapy/", "project_urls": {"Download": "https://github.com/crazycapivara/openweathermapy/archive/master.zip", "Homepage": "https://github.com/crazycapivara/openweathermapy"}, "release_url": "https://pypi.org/project/openweathermapy/0.6.6/", "requires_dist": null, "requires_python": null, "summary": "Python package wrapping OpenWeatherMap.org's API 2.5", "version": "0.6.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"openweathermapy\">\n<h2>openweathermapy</h2>\n<p>Python package wrapping <em>OpenWeatherMap.org\u2019s</em> API 2.5.</p>\n<p>As <em>OpenWeatherMap</em> returns data mostly in the form of nested\ndictionaries, <em>openweathermapy</em> gives a simple API to access items in a\ncomfortable way:</p>\n<pre><span class=\"c1\"># classic access</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"main\"</span><span class=\"p\">][</span><span class=\"s2\">\"temp\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># openweathermapy access</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s2\">\"main.temp\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># access multiple items at once</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s2\">\"main.temp\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wind.speed\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>Development - Alpha</p>\n</div>\n<div id=\"version\">\n<h2>Version</h2>\n<p>0.6.6</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre><span class=\"c1\"># via pip\n</span>~$ pip install openweathermapy\n\n <span class=\"c1\"># or download package and run ...\n</span>~$ python setup.py install\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Besides the examples in this file, please use Python\u2019s builtin help\nfunctionality. Further documentation based on the docstrings is planned.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">openweathermapy.core</span> <span class=\"k\">as</span> <span class=\"nn\">owm</span>\n</pre>\n<p>All parameters defined in <em>OpenWeatherMap\u2019s</em> API documentation can be\npassed to the functions in <em>openweathermapy</em> as keyword arguments\n<tt>**params</tt>. The query string always depends on the request (API call),\nbut unsupported parameters will (normally) not raise an error. Most\ncommon ones to be used are <tt>units</tt>, <tt>lang</tt> and (if needed)\n<tt>APPID</tt>. So, it may be a good idea to pass them in the form of a\nsettings dictionary:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"units\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metric\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lang\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DE\"</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">(</span><span class=\"s2\">\"Kassel,DE\"</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># settings containing APIKEY</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"APPID\"</span><span class=\"p\">:</span> <span class=\"mi\">1111111111</span><span class=\"p\">,</span> <span class=\"s2\">\"units\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metric\"</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Data objects and views</strong></p>\n<p>The main data object is <tt>openweathermapy.utils.NestedDict</tt>, which\nextends Python\u2019s builtin <tt>dict</tt> by methods giving a more flexible\naccess to the items as shown above. If a list of weather data (objects)\nis returned <tt>openweathermapy.utils.NestedDictList</tt> or\n<tt>openweathermapy.core.DataBlock</tt> is used. The latter one just adds an\nattribute <tt>meta</tt> to the <tt>NestedDictList</tt> containing the meta data of\nthe responses.</p>\n<p>A <strong>view</strong> is just a list of keys to extract data from the responses.\nSo, you can define views like <em>summary</em>, <em>minimal</em> etc. depending on\nyour needs. This keeps everything as flexible as possible:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">views</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>    <span class=\"s2\">\"summary\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"main.temp\"</span><span class=\"p\">,</span> <span class=\"s2\">\"main.pressure\"</span><span class=\"p\">,</span> <span class=\"s2\">\"main.humidity\"</span><span class=\"p\">]</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">(</span><span class=\"s2\">\"London,UK\"</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">\"metric\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">views</span><span class=\"p\">[</span><span class=\"s2\">\"summary\"</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"mf\">18.56</span><span class=\"p\">,</span> <span class=\"mi\">1011</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># return complete keys</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_dict</span><span class=\"p\">(</span><span class=\"n\">views</span><span class=\"p\">[</span><span class=\"s2\">\"summary\"</span><span class=\"p\">])</span>\n<span class=\"p\">{</span><span class=\"s1\">'main.temp'</span><span class=\"p\">:</span> <span class=\"mf\">18.56</span><span class=\"p\">,</span> <span class=\"s1\">'main.humidity'</span><span class=\"p\">:</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"s1\">'main.pressure'</span><span class=\"p\">:</span> <span class=\"mi\">1011</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># return only last key</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_dict</span><span class=\"p\">(</span><span class=\"n\">views</span><span class=\"p\">[</span><span class=\"s2\">\"summary\"</span><span class=\"p\">],</span> <span class=\"n\">split_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'pressure'</span><span class=\"p\">:</span> <span class=\"mi\">1011</span><span class=\"p\">,</span> <span class=\"s1\">'temp'</span><span class=\"p\">:</span> <span class=\"mf\">18.56</span><span class=\"p\">,</span> <span class=\"s1\">'humidity'</span><span class=\"p\">:</span> <span class=\"mi\">63</span><span class=\"p\">}</span>\n</pre>\n<p>You can also load views from files in <em>json</em> format for example by using\n<tt>openweathermapy.utils.load_config</tt>.</p>\n<p><strong>Current weather data</strong></p>\n<p><strong>City</strong> can be given as <em>name</em>, <em>id</em>, or <em>geographic coordinates</em>. If\nyou want to stay as close as possible to the original API, you can also\nskip the first argument and use the parameters <tt>q</tt>, <tt>id</tt>, <tt>lat</tt>\nand <tt>lon</tt> or <tt>zip</tt> instead. For details see <em>OpenWeatherMap\u2019s</em> API\ndocumentation.</p>\n<pre><span class=\"c1\"># get data by city name and country code</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">(</span><span class=\"s2\">\"Kassel,DE\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get data by city id and set language to german (DE)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">(</span><span class=\"mi\">2892518</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"DE\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get data by latitude and longitude and return temperatures in Celcius</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">51.32</span><span class=\"p\">,</span> <span class=\"mf\">9.5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">\"metric\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># optional: skip city argument and get data by zip code</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"o\">=</span><span class=\"s2\">\"34128,DE\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># access single item</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s2\">\"main.temp\"</span><span class=\"p\">)</span>\n<span class=\"mf\">11.06</span>\n\n<span class=\"c1\"># access multiple items at once</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"main.temp\"</span><span class=\"p\">,</span> <span class=\"s2\">\"main.humidity\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wind.speed\"</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_many</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">11.06</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mf\">6.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># alternative access</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">11.06</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mf\">6.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get data for 'Malaga,ES', 'Kassel,DE', 'New York,US'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">city_ids</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2892518</span><span class=\"p\">,</span> <span class=\"mi\">2514256</span><span class=\"p\">,</span> <span class=\"mi\">5128581</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_current_for_group</span><span class=\"p\">(</span><span class=\"n\">city_ids</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">\"metric\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"DE\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data_malaga</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># find city by name and return data for match(es)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">find_city</span><span class=\"p\">(</span><span class=\"s2\">\"Malaga\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get data for 5 cities around geographic coordinates</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">51.32</span><span class=\"p\">,</span> <span class=\"mf\">9.5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">find_cities_by_geo_coord</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get data from station</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_current_from_station</span><span class=\"p\">(</span><span class=\"mi\">4926</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get stations by geographic coordinates</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">51.32</span><span class=\"p\">,</span> <span class=\"mf\">9.5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">find_stations_by_geo_coord</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Forecast data</strong></p>\n<p><strong>City</strong> can be given in the same way as shown in the examples above.</p>\n<pre><span class=\"c1\"># get 3h forecast data</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_forecast_hourly</span><span class=\"p\">(</span><span class=\"s2\">\"Kassel,DE\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"DE\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get daily forecast data for 7 days</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_forecast_daily</span><span class=\"p\">(</span><span class=\"s2\">\"Kassel,DE\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">\"metric\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># show meta data</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">meta</span>\n<span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'city'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'country'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'DE'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'population'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2892518</span><span class=\"p\">,</span>\n<span class=\"sa\">u</span><span class=\"s1\">'coord'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'lat'</span><span class=\"p\">:</span> <span class=\"mf\">51.316669</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'lon'</span><span class=\"p\">:</span> <span class=\"mf\">9.5</span><span class=\"p\">},</span> <span class=\"sa\">u</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Kassel'</span><span class=\"p\">},</span>\n<span class=\"sa\">u</span><span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"mf\">0.0185</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'cod'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'200'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'cnt'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># get coordinates and id</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"s2\">\"city.coord\"</span><span class=\"p\">,</span> <span class=\"s2\">\"city.id\"</span><span class=\"p\">])</span>\n<span class=\"p\">({</span><span class=\"sa\">u</span><span class=\"s1\">'lat'</span><span class=\"p\">:</span> <span class=\"mf\">51.316669</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'lon'</span><span class=\"p\">:</span> <span class=\"mf\">9.5</span><span class=\"p\">},</span> <span class=\"mi\">2892518</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># select columns</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"s2\">\"dt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"temp.min\"</span><span class=\"p\">,</span> <span class=\"s2\">\"temp.max\"</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">selection</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>    <span class=\"n\">line</span>\n<span class=\"o\">...</span>\n<span class=\"p\">(</span><span class=\"mi\">1437044400</span><span class=\"p\">,</span> <span class=\"mf\">16.63</span><span class=\"p\">,</span> <span class=\"mf\">24.99</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1437130800</span><span class=\"p\">,</span> <span class=\"mf\">18.21</span><span class=\"p\">,</span> <span class=\"mf\">30.17</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1437217200</span><span class=\"p\">,</span> <span class=\"mf\">14.96</span><span class=\"p\">,</span> <span class=\"mf\">26.35</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1437303600</span><span class=\"p\">,</span> <span class=\"mf\">15.82</span><span class=\"p\">,</span> <span class=\"mf\">23.49</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1437390000</span><span class=\"p\">,</span> <span class=\"mf\">15.52</span><span class=\"p\">,</span> <span class=\"mf\">23.95</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1437476400</span><span class=\"p\">,</span> <span class=\"mf\">18.77</span><span class=\"p\">,</span> <span class=\"mf\">29.11</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1437562800</span><span class=\"p\">,</span> <span class=\"mf\">14.67</span><span class=\"p\">,</span> <span class=\"mf\">27.11</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># convert column \"dt\" to datetime string</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span> <span class=\"k\">as</span> <span class=\"n\">dt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"dt\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">ts</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">utcfromtimestamp</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">))}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"s2\">\"dt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"temp.min\"</span><span class=\"p\">,</span> <span class=\"s2\">\"temp.max\"</span><span class=\"p\">],</span> <span class=\"n\">converters</span><span class=\"o\">=</span><span class=\"n\">conv</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">selection</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>    <span class=\"n\">line</span>\n<span class=\"o\">...</span>\n<span class=\"p\">(</span><span class=\"s1\">'2015-07-16 11:00:00'</span><span class=\"p\">,</span> <span class=\"mf\">16.63</span><span class=\"p\">,</span> <span class=\"mf\">24.99</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'2015-07-17 11:00:00'</span><span class=\"p\">,</span> <span class=\"mf\">18.21</span><span class=\"p\">,</span> <span class=\"mf\">30.17</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'2015-07-18 11:00:00'</span><span class=\"p\">,</span> <span class=\"mf\">14.96</span><span class=\"p\">,</span> <span class=\"mf\">26.35</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'2015-07-19 11:00:00'</span><span class=\"p\">,</span> <span class=\"mf\">15.82</span><span class=\"p\">,</span> <span class=\"mf\">23.49</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'2015-07-20 11:00:00'</span><span class=\"p\">,</span> <span class=\"mf\">15.52</span><span class=\"p\">,</span> <span class=\"mf\">23.95</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'2015-07-21 11:00:00'</span><span class=\"p\">,</span> <span class=\"mf\">18.77</span><span class=\"p\">,</span> <span class=\"mf\">29.11</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'2015-07-22 11:00:00'</span><span class=\"p\">,</span> <span class=\"mf\">14.67</span><span class=\"p\">,</span> <span class=\"mf\">27.11</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Historical data</strong></p>\n<p>For a complete list of parameters as <tt>start</tt>, <tt>end</tt> etc., which can\nbe passed, please refer to <em>OpenWeatherMap\u2019s</em> API documention.</p>\n<pre><span class=\"c1\"># get historical data for city</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_history</span><span class=\"p\">(</span><span class=\"s2\">\"Kassel,DE\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get historical data from station</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">get_history_from_station</span><span class=\"p\">(</span><span class=\"mi\">4926</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Customization</strong></p>\n<p>You can customize or extend the lib to your needs by using the wrapper\nfunction <tt>wrap_get</tt> or the decorator class <tt>GetDecorator</tt>. Both are\nmore or less the same. As first argument the <em>appendix</em> to the <em>base\nurl</em> needs to be given. Optionally a <em>dictionary with parameters</em> and a\n<em>data converter</em> can be passed.</p>\n<pre><span class=\"c1\"># show base url</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">BASE_URL</span>\n<span class=\"s1\">'http://api.openweathermap.org/data/2.5/'</span>\n\n<span class=\"c1\"># base url for fetching current weather data</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">appendix</span> <span class=\"o\">=</span> <span class=\"s2\">\"weather\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">owm</span><span class=\"o\">.</span><span class=\"n\">BASE_URL</span><span class=\"o\">+</span><span class=\"n\">appendix</span>\n<span class=\"s1\">'http://api.openweathermap.org/data/2.5/weather'</span>\n\n<span class=\"c1\"># create a function to get current weather data and return temperatures in Celsius (units=\"metric\")</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">wrap_get</span><span class=\"p\">(</span><span class=\"s2\">\"weather\"</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">\"metric\"</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s2\">\"London,UK\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data_de</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"o\">=</span><span class=\"s2\">\"34128,DE\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"DE\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1639497, "releases": {"0.6.5": [{"comment_text": "", "digests": {"md5": "cab923857c7e5709baabd59615259461", "sha256": "ee727b7cd8cdcf63c3c5a283dfc7fcd35a6a2e50fdec8dcafee13a0c40c8d493"}, "downloads": -1, "filename": "openweathermapy-0.6.5.tar.gz", "has_sig": false, "md5_digest": "cab923857c7e5709baabd59615259461", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7278, "upload_time": "2015-07-17T21:06:32", "upload_time_iso_8601": "2015-07-17T21:06:32.453476Z", "url": "https://files.pythonhosted.org/packages/6b/c4/b20619cdaca72bd6480f2daa6c93510ee1566be0c134f4d2c51bb3658b5c/openweathermapy-0.6.5.tar.gz", "yanked": false}], "0.6.6": [{"comment_text": "", "digests": {"md5": "65ca2db7957f1addfd485ea40a8c92e3", "sha256": "c9b7b49e33e99b56c7c517cf846519f1c815c4c321b241c9d8ef7b3212f2059c"}, "downloads": -1, "filename": "openweathermapy-0.6.6.tar.gz", "has_sig": false, "md5_digest": "65ca2db7957f1addfd485ea40a8c92e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7238, "upload_time": "2015-07-18T20:22:22", "upload_time_iso_8601": "2015-07-18T20:22:22.329474Z", "url": "https://files.pythonhosted.org/packages/41/ea/eda328e60ffc8ee201c6743ecb463ef122f10f9d13ec9fcaa0028736ce4e/openweathermapy-0.6.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65ca2db7957f1addfd485ea40a8c92e3", "sha256": "c9b7b49e33e99b56c7c517cf846519f1c815c4c321b241c9d8ef7b3212f2059c"}, "downloads": -1, "filename": "openweathermapy-0.6.6.tar.gz", "has_sig": false, "md5_digest": "65ca2db7957f1addfd485ea40a8c92e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7238, "upload_time": "2015-07-18T20:22:22", "upload_time_iso_8601": "2015-07-18T20:22:22.329474Z", "url": "https://files.pythonhosted.org/packages/41/ea/eda328e60ffc8ee201c6743ecb463ef122f10f9d13ec9fcaa0028736ce4e/openweathermapy-0.6.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:16 2020"}