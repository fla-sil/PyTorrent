{"info": {"author": "wac", "author_email": "wac@example.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===\nwac\n===\n\n.. image:: https://secure.travis-ci.org/bninja/wac.png?branch=master\n    :target: http://travis-ci.org/bninja/wac\n\nTo write a friendly client for a RESTful API you typically end up doing the\nfollowing:\n\n- Write HTTP client commands for communicating with the server. These commands\n  do things like marshal payloads, convert errors, invoke request hooks, etc.\n\n- Turn responses deserialized by your client into resource objects (i.e.\n  objectify the response).\n\n- Build up queries (e.g. filter, sort) to access resources matching some\n  criteria in perhaps a particular order.\n  \nIn the ideal case the client gives your users something approximating an ORM\nfor your resources. This library is intended to assist you in writing such a\nclient provided the API you are consuming complies with some basic\nexpectations:\n\n- Uses HTTP properly.\n\n- Identifies resources using URIs.\n\n- Names nested resources consistently.\n\nInstallation\n------------\n\nSimply::\n\n    $ pip install wac\n\nor if you prefer::\n\n    $ easy_install wac\n\nRequirements\n------------\n\n- `Python <http://python.org/>`_ >= 2.6, < 3.0\n- `Requests <https://github.com/kennethreitz/requests/>`_ >= 0.11.1  \n\nUsage\n-----\n\nLets work through an example. The code for this example is in ``example.py``.\n\n- First you import wac::\n\n    import wac\n    \n- Next define the version of your client::\n\n    __version__ = '1.0'\n    \n- Also define the configuration which all ``Client``\\s will use by default::\n\n    default_config = wac.Config(None)\n    \n- Now be nice and define a function for updating the configuration(s)::\n\n    def configure(root_url, **kwargs):\n        default = kwargs.pop('default', True)\n        kwargs['client_agent'] = 'example-client/' + __version__\n        if 'headers' not in kwargs:\n            kwargs['headers'] = {}\n        kwargs['headers']['Accept-Type'] = 'application/json'\n        if default:\n            default_config.reset(root_url, **kwargs)\n        else:\n            Client.config = wac.Config(root_url, **kwargs\n\n- Now the big one, define your ``Client`` which is what will be used to talk to\n  a server::\n\n    class Client(wac.Client):\n\n        config = default_config\n    \n        def _serialize(self, data):\n            data = json.dumps(data, default=self._default_serialize)\n            return 'application/json', data\n    \n        def _deserialize(self, response):\n            if response.headers['Content-Type'] != 'application/json':\n                raise Exception(\"Unsupported content-type '{}'\"\n                    .format(response.headers['Content-Type']))\n            data = json.loads(response.content)\n            return data\n\n- Then define your base ``Resource``::\n\n    class Resource(wac.Resource):\n    \n        client = Client()\n        registry = wac.ResourceRegistry()\n  \n- And finally your actual resources::\n\n    class Playlist(Resource):\n    \n        uri_spec = wac.URISpec('playlists', 'guid', root='/v1')\n        \n        \n    class Song(Resource):\n    \n        uri_spec = wac.URISpec('songs', 'guid') \n\n- Done! Now you can do crazy stuff like this::\n\n    import example\n    \n    example.configure('https://api.example.com', auth=('user', 'passwd'))\n    \n    q = (example.Playlist.query()\n        .filter(Playlist.f.tags.contains('nuti'))\n        .filter(~Playlist.f.tags.contains('sober'))\n        .sort(Playlist.f.created_at.desc()))\n    for playlist in q:\n        song = playlist.songs.create(\n            name='Flutes',\n            length=1234,\n            tags=['nuti', 'fluti'])\n        song.length += 101\n        song.save()\n\nContributing\n------------\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Write your code **and tests**\n4. Ensure all tests still pass (`nosetests -svx tests`)\n5. Commit your changes (`git commit -am 'Add some feature'`)\n6. Push to the branch (`git push origin my-new-feature`)\n7. Create new pull request\n\n\n.. :changelog:\n\nHistory\n-------\n\n0.14 (2013-01-29)\n++++++++++++++++++\n\n* Pin requests version to less than 1.0 until we test it with requests > 1.0\n\n0.12 (2012-10-02)\n++++++++++++++++++\n\n* Fix ResourceCollection.filter.\n* Add like and ilike filters.\n* Minor pep8/formatting changes.\n\n0.11 (2012-09-11)\n++++++++++++++++++\n\n* Fix config copy.\n\n0.10 (2012-07-27)\n++++++++++++++++++\n\n* Python 2.6 compatibility.\n\n0.9 (2012-07-25)\n++++++++++++++++++\n\n* Save serialization fix.\n\n0.8 (2012-07-25)\n++++++++++++++++++\n\n* Pagination fixes.\n\n0.7 (2012-07-20)\n++++++++++++++++++\n\n* Misc fixes.\n\n0.3 (2012-05-28)\n++++++++++++++++++\n\n* Hope you like it.\n\n0.2 (2012-05-01)\n++++++++++++++++++\n\n* Growing pains.\n\n0.1 (2012-04-01)\n++++++++++++++++++\n\n* Its alive!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bninja/wac/", "keywords": null, "license": "Copyright (c) 2012 wac.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.", "maintainer": null, "maintainer_email": null, "name": "mawac", "package_url": "https://pypi.org/project/mawac/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mawac/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bninja/wac/"}, "release_url": "https://pypi.org/project/mawac/0.1/", "requires_dist": null, "requires_python": null, "summary": "Writing RESTful API clients.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/bninja/wac\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/bninja/wac.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77bea46775cb363db029f297892517f7aba93d28/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f626e696e6a612f7761632e706e673f6272616e63683d6d6173746572\"></a>\n<p>To write a friendly client for a RESTful API you typically end up doing the\nfollowing:</p>\n<ul>\n<li>Write HTTP client commands for communicating with the server. These commands\ndo things like marshal payloads, convert errors, invoke request hooks, etc.</li>\n<li>Turn responses deserialized by your client into resource objects (i.e.\nobjectify the response).</li>\n<li>Build up queries (e.g. filter, sort) to access resources matching some\ncriteria in perhaps a particular order.</li>\n</ul>\n<p>In the ideal case the client gives your users something approximating an ORM\nfor your resources. This library is intended to assist you in writing such a\nclient provided the API you are consuming complies with some basic\nexpectations:</p>\n<ul>\n<li>Uses HTTP properly.</li>\n<li>Identifies resources using URIs.</li>\n<li>Names nested resources consistently.</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Simply:</p>\n<pre>$ pip install wac\n</pre>\n<p>or if you prefer:</p>\n<pre>$ easy_install wac\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"http://python.org/\" rel=\"nofollow\">Python</a> &gt;= 2.6, &lt; 3.0</li>\n<li><a href=\"https://github.com/kennethreitz/requests/\" rel=\"nofollow\">Requests</a> &gt;= 0.11.1</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Lets work through an example. The code for this example is in <tt>example.py</tt>.</p>\n<ul>\n<li><p>First you import wac:</p>\n<pre>import wac\n</pre>\n</li>\n<li><p>Next define the version of your client:</p>\n<pre>__version__ = '1.0'\n</pre>\n</li>\n<li><p>Also define the configuration which all <tt>Client</tt>s will use by default:</p>\n<pre>default_config = wac.Config(None)\n</pre>\n</li>\n<li><p>Now be nice and define a function for updating the configuration(s):</p>\n<pre>def configure(root_url, **kwargs):\n    default = kwargs.pop('default', True)\n    kwargs['client_agent'] = 'example-client/' + __version__\n    if 'headers' not in kwargs:\n        kwargs['headers'] = {}\n    kwargs['headers']['Accept-Type'] = 'application/json'\n    if default:\n        default_config.reset(root_url, **kwargs)\n    else:\n        Client.config = wac.Config(root_url, **kwargs\n</pre>\n</li>\n<li><p>Now the big one, define your <tt>Client</tt> which is what will be used to talk to\na server:</p>\n<pre>class Client(wac.Client):\n\n    config = default_config\n\n    def _serialize(self, data):\n        data = json.dumps(data, default=self._default_serialize)\n        return 'application/json', data\n\n    def _deserialize(self, response):\n        if response.headers['Content-Type'] != 'application/json':\n            raise Exception(\"Unsupported content-type '{}'\"\n                .format(response.headers['Content-Type']))\n        data = json.loads(response.content)\n        return data\n</pre>\n</li>\n<li><p>Then define your base <tt>Resource</tt>:</p>\n<pre>class Resource(wac.Resource):\n\n    client = Client()\n    registry = wac.ResourceRegistry()\n</pre>\n</li>\n<li><p>And finally your actual resources:</p>\n<pre>class Playlist(Resource):\n\n    uri_spec = wac.URISpec('playlists', 'guid', root='/v1')\n\n\nclass Song(Resource):\n\n    uri_spec = wac.URISpec('songs', 'guid')\n</pre>\n</li>\n<li><p>Done! Now you can do crazy stuff like this:</p>\n<pre>import example\n\nexample.configure('https://api.example.com', auth=('user', 'passwd'))\n\nq = (example.Playlist.query()\n    .filter(Playlist.f.tags.contains('nuti'))\n    .filter(~Playlist.f.tags.contains('sober'))\n    .sort(Playlist.f.created_at.desc()))\nfor playlist in q:\n    song = playlist.songs.create(\n        name='Flutes',\n        length=1234,\n        tags=['nuti', 'fluti'])\n    song.length += 101\n    song.save()\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<ol>\n<li>Fork it</li>\n<li>Create your feature branch (<cite>git checkout -b my-new-feature</cite>)</li>\n<li>Write your code <strong>and tests</strong></li>\n<li>Ensure all tests still pass (<cite>nosetests -svx tests</cite>)</li>\n<li>Commit your changes (<cite>git commit -am \u2018Add some feature\u2019</cite>)</li>\n<li>Push to the branch (<cite>git push origin my-new-feature</cite>)</li>\n<li>Create new pull request</li>\n</ol>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.14 (2013-01-29)</h3>\n<ul>\n<li>Pin requests version to less than 1.0 until we test it with requests &gt; 1.0</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.12 (2012-10-02)</h3>\n<ul>\n<li>Fix ResourceCollection.filter.</li>\n<li>Add like and ilike filters.</li>\n<li>Minor pep8/formatting changes.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.11 (2012-09-11)</h3>\n<ul>\n<li>Fix config copy.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.10 (2012-07-27)</h3>\n<ul>\n<li>Python 2.6 compatibility.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.9 (2012-07-25)</h3>\n<ul>\n<li>Save serialization fix.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.8 (2012-07-25)</h3>\n<ul>\n<li>Pagination fixes.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.7 (2012-07-20)</h3>\n<ul>\n<li>Misc fixes.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.3 (2012-05-28)</h3>\n<ul>\n<li>Hope you like it.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.2 (2012-05-01)</h3>\n<ul>\n<li>Growing pains.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.1 (2012-04-01)</h3>\n<ul>\n<li>Its alive!</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 794574, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8a076c0b6606fcd2960519ceba31b468", "sha256": "f4954f8e28cadf80569b6b3c072eb1b509d56d8c99cf765752ecf6350b2c2c2f"}, "downloads": -1, "filename": "mawac-0.1.tar.gz", "has_sig": false, "md5_digest": "8a076c0b6606fcd2960519ceba31b468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15162, "upload_time": "2013-03-06T19:31:39", "upload_time_iso_8601": "2013-03-06T19:31:39.893441Z", "url": "https://files.pythonhosted.org/packages/ef/69/7457210bcf98896c5ace3b464dfeab280a4b9ff66e6683da9931052df54f/mawac-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a076c0b6606fcd2960519ceba31b468", "sha256": "f4954f8e28cadf80569b6b3c072eb1b509d56d8c99cf765752ecf6350b2c2c2f"}, "downloads": -1, "filename": "mawac-0.1.tar.gz", "has_sig": false, "md5_digest": "8a076c0b6606fcd2960519ceba31b468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15162, "upload_time": "2013-03-06T19:31:39", "upload_time_iso_8601": "2013-03-06T19:31:39.893441Z", "url": "https://files.pythonhosted.org/packages/ef/69/7457210bcf98896c5ace3b464dfeab280a4b9ff66e6683da9931052df54f/mawac-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:08 2020"}