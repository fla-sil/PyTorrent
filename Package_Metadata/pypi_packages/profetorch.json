{"info": {"author": "Sachinthak Abeywardana", "author_email": "sachinra@it.usyd.edu.au", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "<!--\n\n#################################################\n### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###\n#################################################\n# file to edit: 99_index.ipynb\n# command to build the docs after a change: nbdev_build_docs\n\n-->\n\n# ProFeTorch\n\n> FB Prophet + Fastai + pyTorch.\n\n\nThis is an alternative implementation of prophet which uses quantile regression instead of MCMC sampling. It provides the following benefits over prophet:\n- GPU usage.\n- Strict(er) upper and lower bounds.\n- Can add any other set of features to the time series.\n\nThe time series is implemented as follows:\n\n\\begin{aligned}\ny &= b(T(t) + S(t) + F(x)|l,u) \\\\\nT(t) &= mt + a \\\\\nS(t) &= \\sum_{n=1}^N\\left(a_n \\cos\\left(\\frac{2\\pi nt}{P}\\right) + b_n \\sin\\left(\\frac{2\\pi nt}{P}\\right)\\right) \\\\\nF(x) &= w^T x\\\\\nb(y|l,u) &= \\begin{cases}\nl \\quad \\text{if } y < l \\\\\ny \\quad \\text{if } l < y < u \\\\\nu \\quad \\text{if } y > u\n\\end{cases}\n\\end{aligned}\n\nwhere $T(t)$ is the trend line, $S(t)$ are the seasonal components composed of a fourier sum, $F(x)$ is a linear function which weights features that is not related to time.\n\nThe task is therefore to find the parameters $a, m, \\cup_n a_n, \\cup_n b_n, w$ that minimises a loss function $l(\\hat{y}, y)$. The default is set to minimise $l1$ loss $\\frac{1}{N}\\sum_{i=1}^N |y_i - \\hat{y_i}|$ so that the reliance on outliers is minimised. By default we also calculate the 5th and 95th quantile by minimising the tilted loss function. The quantile functions are calculated as:\n\\begin{align}\ny_5 &= b(\\hat{y} - (m_5 t + a_5)|l,u) \\\\\ny_{95} &= b(\\hat{y} + (m_{95} t + a_{95})|l,u)\n\\end{align}\n\n## Install\n\n`pip install profetorch`\n\n## ProFeTorch Training\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nmodel_params = {'y_n':10, 'm_n':7, 'l':0, 'h': train_df['y'].max() * 2}\nmodel = Model(train_df, model_args=model_params, epochs=30, alpha=1e-2, beta=0)\nmodel.fit(train_df)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n    /opt/miniconda3/lib/python3.7/site-packages/pandas/core/frame.py:4117: SettingWithCopyWarning: \n    A value is trying to be set on a copy of a slice from a DataFrame\n\n    See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n      errors=errors,\n\n\n\n\n\n\n    Epoch 30/30 Training Loss: 0.3687, Validation Loss: 0.6105\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\ny_pred = model.predict(df)\nplt.figure(figsize=(12,5))\nplt.scatter(df['ds'], df['y'], label='Data')\nplt.plot(train_df['ds'], y_pred[:train_len,1], c='r', label='Train Set')\nplt.fill_between(train_df['ds'], y_pred[:train_len,0], y_pred[:train_len,2], alpha=0.5)\nplt.plot(test_df['ds'], y_pred[train_len:,1], c='g', label='Test Set')\nplt.fill_between(test_df['ds'], y_pred[train_len:,0], y_pred[train_len:,2], alpha=0.5)\nplt.show()\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n![png](output_5_0.png)\n\n\n</div>\n\n</div>\n\nObviously more works needs to be done as seen in the graph above. However, note that:\n1. The seasonal component is captured.\n2. The quantiles are asymmetric, which cannot happen in the fb-prophet case.\n3. **I will fix these short comings if there is enough interest.**\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sachinruk/profetorch", "keywords": "Time Series,Machine Learning,Deep Learning", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "profetorch", "package_url": "https://pypi.org/project/profetorch/", "platform": "", "project_url": "https://pypi.org/project/profetorch/", "project_urls": {"Homepage": "https://github.com/sachinruk/profetorch"}, "release_url": "https://pypi.org/project/profetorch/0.0.2/", "requires_dist": ["fastai", "torch (>=1.2.0)", "torchvision", "matplotlib", "pandas", "scipy"], "requires_python": ">=3.6", "summary": "Time series prediction with fastai, pytorch and prophet", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ProFeTorch</h1>\n<blockquote>\n<p>FB Prophet + Fastai + pyTorch.</p>\n</blockquote>\n<p>This is an alternative implementation of prophet which uses quantile regression instead of MCMC sampling. It provides the following benefits over prophet:</p>\n<ul>\n<li>GPU usage.</li>\n<li>Strict(er) upper and lower bounds.</li>\n<li>Can add any other set of features to the time series.</li>\n</ul>\n<p>The time series is implemented as follows:</p>\n<p>\\begin{aligned}\ny &amp;= b(T(t) + S(t) + F(x)|l,u) \\\nT(t) &amp;= mt + a \\\nS(t) &amp;= \\sum_{n=1}^N\\left(a_n \\cos\\left(\\frac{2\\pi nt}{P}\\right) + b_n \\sin\\left(\\frac{2\\pi nt}{P}\\right)\\right) \\\nF(x) &amp;= w^T x\\\nb(y|l,u) &amp;= \\begin{cases}\nl \\quad \\text{if } y &lt; l \\\ny \\quad \\text{if } l &lt; y &lt; u \\\nu \\quad \\text{if } y &gt; u\n\\end{cases}\n\\end{aligned}</p>\n<p>where $T(t)$ is the trend line, $S(t)$ are the seasonal components composed of a fourier sum, $F(x)$ is a linear function which weights features that is not related to time.</p>\n<p>The task is therefore to find the parameters $a, m, \\cup_n a_n, \\cup_n b_n, w$ that minimises a loss function $l(\\hat{y}, y)$. The default is set to minimise $l1$ loss $\\frac{1}{N}\\sum_{i=1}^N |y_i - \\hat{y_i}|$ so that the reliance on outliers is minimised. By default we also calculate the 5th and 95th quantile by minimising the tilted loss function. The quantile functions are calculated as:\n\\begin{align}\ny_5 &amp;= b(\\hat{y} - (m_5 t + a_5)|l,u) \\\ny_{95} &amp;= b(\\hat{y} + (m_{95} t + a_{95})|l,u)\n\\end{align}</p>\n<h2>Install</h2>\n<p><code>pip install profetorch</code></p>\n<h2>ProFeTorch Training</h2>\n<div>\n<div>\n<pre><span class=\"n\">model_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'y_n'</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'m_n'</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'l'</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">:</span> <span class=\"n\">train_df</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">train_df</span><span class=\"p\">,</span> <span class=\"n\">model_args</span><span class=\"o\">=</span><span class=\"n\">model_params</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">1e-2</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train_df</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div>\n<pre><code>/opt/miniconda3/lib/python3.7/site-packages/pandas/core/frame.py:4117: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  errors=errors,\n\n\n\n\n\n\nEpoch 30/30 Training Loss: 0.3687, Validation Loss: 0.6105\n</code></pre>\n</div>\n</div>\n<div>\n<div>\n<pre><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'ds'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">],</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Data'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">train_df</span><span class=\"p\">[</span><span class=\"s1\">'ds'</span><span class=\"p\">],</span> <span class=\"n\">y_pred</span><span class=\"p\">[:</span><span class=\"n\">train_len</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Train Set'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">fill_between</span><span class=\"p\">(</span><span class=\"n\">train_df</span><span class=\"p\">[</span><span class=\"s1\">'ds'</span><span class=\"p\">],</span> <span class=\"n\">y_pred</span><span class=\"p\">[:</span><span class=\"n\">train_len</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">y_pred</span><span class=\"p\">[:</span><span class=\"n\">train_len</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">test_df</span><span class=\"p\">[</span><span class=\"s1\">'ds'</span><span class=\"p\">],</span> <span class=\"n\">y_pred</span><span class=\"p\">[</span><span class=\"n\">train_len</span><span class=\"p\">:,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Test Set'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">fill_between</span><span class=\"p\">(</span><span class=\"n\">test_df</span><span class=\"p\">[</span><span class=\"s1\">'ds'</span><span class=\"p\">],</span> <span class=\"n\">y_pred</span><span class=\"p\">[</span><span class=\"n\">train_len</span><span class=\"p\">:,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">y_pred</span><span class=\"p\">[</span><span class=\"n\">train_len</span><span class=\"p\">:,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8ad72c8b621723f5044cc85e85a90e10152d9ab/6f75747075745f355f302e706e67\"></p>\n</div>\n</div>\n<p>Obviously more works needs to be done as seen in the graph above. However, note that:</p>\n<ol>\n<li>The seasonal component is captured.</li>\n<li>The quantiles are asymmetric, which cannot happen in the fb-prophet case.</li>\n<li><strong>I will fix these short comings if there is enough interest.</strong></li>\n</ol>\n\n          </div>"}, "last_serial": 6354678, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c2e4695be249e5a4b240e1e6345fbe6b", "sha256": "d86f81189eb98ab9d6d4f43c012ae134e9410f2f5ccbbcb1d989f3bf5bb8d99e"}, "downloads": -1, "filename": "profetorch-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c2e4695be249e5a4b240e1e6345fbe6b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15630, "upload_time": "2019-12-24T06:47:14", "upload_time_iso_8601": "2019-12-24T06:47:14.202776Z", "url": "https://files.pythonhosted.org/packages/25/d4/153ea4df936c6cf5b0a498482d5184ed813acf1a0d1e25cf976bdb717061/profetorch-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb6863b79e0e82f6aadabe2d98a02a97", "sha256": "ff1aa47b2cd5d98fbc477e018b13767c19dbfd0f146c8b6757b900ccdb709b77"}, "downloads": -1, "filename": "profetorch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fb6863b79e0e82f6aadabe2d98a02a97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10971, "upload_time": "2019-12-24T06:47:22", "upload_time_iso_8601": "2019-12-24T06:47:22.585951Z", "url": "https://files.pythonhosted.org/packages/88/a8/07cad8f3e13cf492088c535fad4d06e8006ef62adbbd0b290ebecf98c96c/profetorch-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "33f37b29cbfd98d22d9072758baa7413", "sha256": "81f670db0ca9e997d2635afc3ad75bcb60275405fcb41679fa8bd7fdc22a4dd0"}, "downloads": -1, "filename": "profetorch-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "33f37b29cbfd98d22d9072758baa7413", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15830, "upload_time": "2019-12-24T10:06:43", "upload_time_iso_8601": "2019-12-24T10:06:43.012128Z", "url": "https://files.pythonhosted.org/packages/be/58/9f907bdf0bf604ba3e4938843b0d221adcd0204108612b63d6a9658974e9/profetorch-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "352c585e13637c1022acbff5340e9b9e", "sha256": "bd1b3221cd19dca98721cfd851912006897eebb94ee169b79124d03cbd263996"}, "downloads": -1, "filename": "profetorch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "352c585e13637c1022acbff5340e9b9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11230, "upload_time": "2019-12-24T10:06:45", "upload_time_iso_8601": "2019-12-24T10:06:45.418680Z", "url": "https://files.pythonhosted.org/packages/a3/e7/24c41365a656202655883559baa8e9e2b8c7914ce3618f719f5e6c6c6e11/profetorch-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33f37b29cbfd98d22d9072758baa7413", "sha256": "81f670db0ca9e997d2635afc3ad75bcb60275405fcb41679fa8bd7fdc22a4dd0"}, "downloads": -1, "filename": "profetorch-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "33f37b29cbfd98d22d9072758baa7413", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15830, "upload_time": "2019-12-24T10:06:43", "upload_time_iso_8601": "2019-12-24T10:06:43.012128Z", "url": "https://files.pythonhosted.org/packages/be/58/9f907bdf0bf604ba3e4938843b0d221adcd0204108612b63d6a9658974e9/profetorch-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "352c585e13637c1022acbff5340e9b9e", "sha256": "bd1b3221cd19dca98721cfd851912006897eebb94ee169b79124d03cbd263996"}, "downloads": -1, "filename": "profetorch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "352c585e13637c1022acbff5340e9b9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11230, "upload_time": "2019-12-24T10:06:45", "upload_time_iso_8601": "2019-12-24T10:06:45.418680Z", "url": "https://files.pythonhosted.org/packages/a3/e7/24c41365a656202655883559baa8e9e2b8c7914ce3618f719f5e6c6c6e11/profetorch-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:30 2020"}