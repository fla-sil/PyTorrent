{"info": {"author": "Noah Kim", "author_email": "noahbkim@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Curricula\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/e6d63124ef0c4a939f726c1609841978)](https://www.codacy.com/manual/csci104/curricula?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=csci104/curricula&amp;utm_campaign=Badge_Grade)\n\nCurricula is a set of specifications and tools for managing content and grading assignments in a college-level computer science setting.\nIt is currently being developed by [Noah Kim](https://noahbkim.github.io) for CSCI 104, the most challenging core-track C++ course at USC for CS majors.\n\n## How Does it Work?\n\nCurricula covers the two main aspects of managing assignments for a programming course.\n\n1. **Assignment creation**: Curricula provides a schema for developing assignments per-problem rather than all at once.\n   This allows content producers to easily port assignments from previous semesters to the evolving parameters of the current.\n   Assignments can then be built up from their components problems, separating each and combining their independent parts into packages for publishing, grading, etc.\n\n2. **Submission grading**: the other function of Curricula is to provide a robust framework for testing all aspects of submitted code.\n   This includes checks for things like correctness, time complexity, resources leakage, and even code style, all while facilitating granular configuration.\n   These tests are written to a universal output format so that they can be reinterpreted without having to re-run the code. \n\n## Build\n\nThe assignment builder works on an assignment bases, with build targets being full, individual assignments composed of problems.\n\n### Writing an Assignment\n\nAssignments consist of a set of general instructions and a schema.\nAn example can be found in [example/assignment/](example/assignment).\nProblems can be specified inside or outside of an assignment's directory.\nThe `assignment.json` file must include the following fields:\n\n- `title` provides a full title of the assignment.\n- `authors` is a list of objects containing a `name` and `email`.\n- `dates` is an object containing two fields, `assigned` and `due`, with dates formatted as strings `YYYY-MM-DD HH:MM`.\n- `problems` is a list of objects containing a relative `path` to each problem directory and a `percentage` representing its weight in the assignment.\n  Note that problems are included in the instructions (and other composite documents) in the order of this list.\n  Consider the item in the example that includes the `hello_world` problem, noting that `0.1` corresponds to 10%:\n\n```json\n{\n  \"path\": \"problem/hello_world\",\n  \"percentage\": 0.1\n}\n```\n\n### Writing a Problem\n\nProblems contain the bulk of the content.\nAn example can be found in [example/assignment/problem/hello_world/](example/assignment/problem/hello_world).\nProblems also use a schema for metadata.\nThe `problem.json` file must include the following fields:\n\n- `title` provides a full title of the problem\n- `authors` is a list of objects containing a `name` and `email`.\n- `grading` is an object that contains the estimated number of `minutes` required to grade manually and three boolean flags for how the problem is graded: `automated`, `review`, and `manual`.\n\nOptionally, `problem.json` may also include:\n\n- `topics` is a list of string tags that may eventually be used to search through a catalog of problems.\n\nIn addition to the schema, problems also consist of the following components:\n\n1. Problems **instructions** are specified in the `README.md` of the problem.\n   Instructions are made available for embedding in the templating phase of the build process.\n   Typically, the compiled instructions for an assignment will consist of the general instructions followed by the title, weight, and instructions for each specific problem.\n   Any assets, such as images, can be placed in an `assets/` folder and will be provided alongside the composite instructions.\n\n2. Problem **resources**, placed in a `resources/` directory, are where any skeleton code for the problem can be provided to students.\n   The resources directory for each problem is copied into a combined resources folder in the compiled assignment.\n\n3. A **solution** may also be provided along with each problem in `solution/`.\n   The solution is kept separate from other files, but can be provided to TAs and graders.\n   Similarly to the instructions, any provided `README.md` files in the `solution/` directory are merged into a cumulative solution document for the entire submission.\n   It is encouraged that material writers use this functionality for assignment cheat sheets, or explanations of common solution methods.\n\n4. The **grading** tools for a problem may be included in the `grading/` directory.\n   If automated grading is enabled in the problem, the builder will look for a `tests.py` that uses the `curricula.shortcuts.Grader`.\n   If a `README.md` is provided, it will be merged into a cumulative grading document for the entire submission.\n   This can be used to build a custom rubric for each problem.\n\n### Templates\n\nThe builder also requires a set of templates to compose assignments with.\nThese templates are the glue for the instruction, solution, and grading `README.md` files.\nThe following templates are required, but feel free to refer to or use wholesale the [examples](example/template/build).\n\n```\ntemplate/\n  build/\n    instructions/\n      assignment.md\n      problem.md\n    solution/\n      assignment.md\n      problem.md\n    grading/\n      assignment.md\n      problem.md\n```\n\n### Distribution and Grading\n\nAfter using `curricula` to build an assignment, the resultant composite artifacts will be ready for use.\nMostly, this involves distributing the instructions, resources, and solutions to the right parties.\nHowever, `curricula` also provides facilities for grading submissions.\n\n## Grade\n\nGrading is the other half of `curricula`'s core functionality.\nIn order to use automated grading, material writers have to implement tests using `curricula.grade`'s toolkit.\n\n### Writing Tests\n\nWhile somewhat bulkier than unit-test frameworks, the additional mechanisms backing the `Grader` make it much easier to generate and manage reports for students.\nLet's walk through an [example](example/assignment/problem/hello_world/grading/tests.py).\n\n```python\nfrom pathlib import Path\n\nfrom curricula.grade.shortcuts import *\nfrom curricula.grade.setup.check.common import check_file_exists\nfrom curricula.grade.setup.build.common import build_gpp_executable\nfrom curricula.library import files\n\nGPP_OPTIONS = (\"-Wall\", \"-std=c++11\")\n\ngrader = Grader()\n````\n\nTo start off, we include `pathlib` for convenient, file-system-independent path operations.\nWe also include several utilities from `curricula` and define `g++` command line options we'll use later.\nFinally, we'll initialize the grader for this problem.\n\n```python\n@grader.setup.check(sanity=True)\ndef check_hello_world(context: Context, resources: dict):\n    \"\"\"Check whether hello_world.cpp has been submitted.\"\"\"\n\n    resources[\"hello_world_source_path\"] = context.problem_directory.joinpath(\"hello_world.cpp\")\n    return check_file_exists(resources[\"hello_world_source_path\"])\n```\n\nHere, we register a `check` task in the `setup` phase of the grader.\nThe `sanity` option indicates that if we run grading on a submission with `--sanity`, this task will be run.\nNote that parameters in tasks are injected, but can also be accessed manually through the `resources` dictionary (`resources['resources'] is resources`).\nIn this task, we store the source path of file we're expecting to grade for this problem.\nHowever, if it doesn't exist, the returned `CorrectnessResult` will indicate to the grader that this task has failed, and that any dependent tasks should not be executed.\n\n```python\n@grader.setup.build(dependency=\"check_hello_world\", sanity=True)\ndef build_hello_world(hello_world_source_path: Path, resources: dict):\n    \"\"\"Compile the program with gcc.\"\"\"\n\n    resources[\"hello_world_path\"] = Path(\"/tmp\", \"hello_world\")\n    result, resources[\"hello_world\"] = build_gpp_executable(\n        source_path=hello_world_source_path,\n        destination_path=resources[\"hello_world_path\"],\n        gpp_options=GPP_OPTIONS)\n    return result\n```\n\nThis segment builds the submitted `hello_world.cpp` file with `g++`.\nAs specified by the registration decorator, this task depends on `check_hello_world` passing.\nIf a task has multiple dependencies, `dependencies=[\"check_hello_world\", ...]` may be used instead.\nIn the task method, a custom `ExecutableFile` will be inserted into `resources`, and the `BuildResult` from the build function will be returned to the grader.\nNote that both [`build_gpp_exectuable`](curricula/grade/setup/build/common.py) and [`check_file_exists`](curricula/grade/setup/check/common.py) are just convenience methods that reduce code.\n\n```python\n@grader.test.correctness(dependency=\"build_hello_world\")\ndef test_hello_world_output(hello_world: ExecutableFile):\n    \"\"\"Check if the program outputs as expected.\"\"\"\n\n    runtime = hello_world.execute(timeout=1)\n    return CorrectnessResult(passed=runtime.stdout.strip() == b\"Hello, world!\", runtime=runtime.dump())\n```\n\nThis is an actual test cases.\nIn a proper problem, there will most likely be many more of these.\nNote that since there's no `sanity=True` in the registration decorator, this test will not be run if the grader is sanity-checking a solution.\nHere, we simply invoke the built binary `hello_world`.\nIf what's outputted to `stdout` during its runtime is `\"Hello, world!\"`, the `CorrectnessResult` will indicate the case passed.\n\nFor an individual problem, this whole harness might seem somewhat bulky.\nHowever, note that the registration decorator can be used inline to register a generated task.\nIn other words, test cases that simply compare input and output files can simply be dynamically registered with a for loop rather than be written out manually.\n\n```python\n@grader.teardown.cleanup(dependency=\"build_hello_world\")\ndef cleanup_hello_world(hello_world_path: Path):\n    \"\"\"Clean up executables.\"\"\"\n\n    if hello_world_path.is_file():\n        files.delete_file(hello_world_path)\n````\n\nIn this last segment, the built binary is deleted.\nNot returning a result in a task registered in the `teardown` phase will cause the grader to generate a default `TeardownResult` with a passing status.\nNote that `build_hello_world`, `test_hello_world_output`, and `cleanup_hello_world` all depend on `build_hello_world`.\nIf the latter does not pass, neither will any of the former.\n\n## Grader Output\n\nGrading an assignment will yield a serializable `AssignmentReport`, which is composed of `ProblemReport` objects for each problem graded automatically.\nFor the `hello_world` solution, the following report was generated.\n\n```json\n{\n  \"hello_world\": {\n    \"check_hello_world\": {\n      \"complete\": true,\n      \"passed\": true,\n      \"task\": \"check_hello_world\",\n      \"details\": {}\n    },\n    \"build_hello_world\": {\n      \"complete\": true,\n      \"passed\": true,\n      \"task\": \"build_hello_world\",\n      \"details\": {\n        \"runtime\": {\n          \"args\": [\n            \"g++\",\n            \"-Wall\",\n            \"-std=c++11\",\n            \"-o\",\n            \"/tmp/hello_world\",\n            \"artifacts/assignment/solution/hello_world/hello_world.cpp\"\n          ],\n          \"timeout\": null,\n          \"code\": 0,\n          \"elapsed\": 0.21283740003127605,\n          \"stdin\": null,\n          \"stdout\": \"\",\n          \"stderr\": \"\",\n          \"timed_out\": false,\n          \"raised_exception\": false,\n          \"exception\": null\n        }\n      }\n    },\n    \"test_hello_world_output\": {\n      \"complete\": true,\n      \"passed\": true,\n      \"task\": \"test_hello_world_output\",\n      \"details\": {\n        \"runtime\": {\n          \"args\": [\n            \"/tmp/hello_world\"\n          ],\n          \"timeout\": 1,\n          \"code\": 0,\n          \"elapsed\": 0.0011609999928623438,\n          \"stdin\": null,\n          \"stdout\": \"Hello, world!\\n\",\n          \"stderr\": \"\",\n          \"timed_out\": false,\n          \"raised_exception\": false,\n          \"exception\": null\n        }\n      }\n    },\n    \"cleanup_hello_world\": {\n      \"complete\": true,\n      \"passed\": true,\n      \"task\": \"cleanup_hello_world\",\n      \"details\": {}\n    }\n  }\n}\n```\n\nNote that this report matches up key-wise with the grading artifact `grading.json` file:\n\n```json\n{\n  \"hello_world\": {\n    \"title\": \"Hello, World!\",\n    \"directory\": \"hello_world\",\n    \"percentage\": 0.1,\n    \"tasks\": {\n      \"check_hello_world\": {\n        \"name\": \"check_hello_world\",\n        \"description\": \"Check whether hello_world.cpp has been submitted.\",\n        \"stage\": \"setup\",\n        \"kind\": \"check\",\n        \"dependencies\": [],\n        \"details\": {\n          \"sanity\": true\n        }\n      },\n      \"build_hello_world\": {\n        \"name\": \"build_hello_world\",\n        \"description\": \"Compile the program with gcc.\",\n        \"stage\": \"setup\",\n        \"kind\": \"build\",\n        \"dependencies\": [\n          \"check_hello_world\"\n        ],\n        \"details\": {\n          \"sanity\": true\n        }\n      },\n      \"test_hello_world_output\": {\n        \"name\": \"test_hello_world_output\",\n        \"description\": \"Check if the program outputs as expected.\",\n        \"stage\": \"test\",\n        \"kind\": \"correctness\",\n        \"dependencies\": [\n          \"build_hello_world\"\n        ],\n        \"details\": {}\n      },\n      \"cleanup_hello_world\": {\n        \"name\": \"cleanup_hello_world\",\n        \"description\": \"Clean up executables.\",\n        \"stage\": \"teardown\",\n        \"kind\": \"cleanup\",\n        \"dependencies\": [\n          \"build_hello_world\"\n        ],\n        \"details\": {}\n      }\n    }\n  }\n}\n```\n\nUsing these two data sources, the grader can format each report into a readable file.\nThis functionality is provided in the `tools` package of `curricula.grade`.\n\n## Using Curricula\n\nCurricula can be used by installing the [command line interface](https://github.com/csci104/curricula-shell).\nThis repository only contains the core functionality. \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/csci104/curricula", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "curricula", "package_url": "https://pypi.org/project/curricula/", "platform": "", "project_url": "https://pypi.org/project/curricula/", "project_urls": {"Homepage": "https://github.com/csci104/curricula"}, "release_url": "https://pypi.org/project/curricula/0.1.2/", "requires_dist": ["jinja2", "jsonschema"], "requires_python": ">=3.7", "summary": "A content manager and grading toolkit for evaluating student code", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Curricula</h1>\n<p><a href=\"https://www.codacy.com/manual/csci104/curricula?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=csci104/curricula&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9bac59d4aacf180c8d7e3fc87ffed2a74df0acca/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6536643633313234656630633461393339663732366331363039383431393738\"></a></p>\n<p>Curricula is a set of specifications and tools for managing content and grading assignments in a college-level computer science setting.\nIt is currently being developed by <a href=\"https://noahbkim.github.io\" rel=\"nofollow\">Noah Kim</a> for CSCI 104, the most challenging core-track C++ course at USC for CS majors.</p>\n<h2>How Does it Work?</h2>\n<p>Curricula covers the two main aspects of managing assignments for a programming course.</p>\n<ol>\n<li>\n<p><strong>Assignment creation</strong>: Curricula provides a schema for developing assignments per-problem rather than all at once.\nThis allows content producers to easily port assignments from previous semesters to the evolving parameters of the current.\nAssignments can then be built up from their components problems, separating each and combining their independent parts into packages for publishing, grading, etc.</p>\n</li>\n<li>\n<p><strong>Submission grading</strong>: the other function of Curricula is to provide a robust framework for testing all aspects of submitted code.\nThis includes checks for things like correctness, time complexity, resources leakage, and even code style, all while facilitating granular configuration.\nThese tests are written to a universal output format so that they can be reinterpreted without having to re-run the code.</p>\n</li>\n</ol>\n<h2>Build</h2>\n<p>The assignment builder works on an assignment bases, with build targets being full, individual assignments composed of problems.</p>\n<h3>Writing an Assignment</h3>\n<p>Assignments consist of a set of general instructions and a schema.\nAn example can be found in <a href=\"example/assignment\" rel=\"nofollow\">example/assignment/</a>.\nProblems can be specified inside or outside of an assignment's directory.\nThe <code>assignment.json</code> file must include the following fields:</p>\n<ul>\n<li><code>title</code> provides a full title of the assignment.</li>\n<li><code>authors</code> is a list of objects containing a <code>name</code> and <code>email</code>.</li>\n<li><code>dates</code> is an object containing two fields, <code>assigned</code> and <code>due</code>, with dates formatted as strings <code>YYYY-MM-DD HH:MM</code>.</li>\n<li><code>problems</code> is a list of objects containing a relative <code>path</code> to each problem directory and a <code>percentage</code> representing its weight in the assignment.\nNote that problems are included in the instructions (and other composite documents) in the order of this list.\nConsider the item in the example that includes the <code>hello_world</code> problem, noting that <code>0.1</code> corresponds to 10%:</li>\n</ul>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"problem/hello_world\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"percentage\"</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Writing a Problem</h3>\n<p>Problems contain the bulk of the content.\nAn example can be found in <a href=\"example/assignment/problem/hello_world\" rel=\"nofollow\">example/assignment/problem/hello_world/</a>.\nProblems also use a schema for metadata.\nThe <code>problem.json</code> file must include the following fields:</p>\n<ul>\n<li><code>title</code> provides a full title of the problem</li>\n<li><code>authors</code> is a list of objects containing a <code>name</code> and <code>email</code>.</li>\n<li><code>grading</code> is an object that contains the estimated number of <code>minutes</code> required to grade manually and three boolean flags for how the problem is graded: <code>automated</code>, <code>review</code>, and <code>manual</code>.</li>\n</ul>\n<p>Optionally, <code>problem.json</code> may also include:</p>\n<ul>\n<li><code>topics</code> is a list of string tags that may eventually be used to search through a catalog of problems.</li>\n</ul>\n<p>In addition to the schema, problems also consist of the following components:</p>\n<ol>\n<li>\n<p>Problems <strong>instructions</strong> are specified in the <code>README.md</code> of the problem.\nInstructions are made available for embedding in the templating phase of the build process.\nTypically, the compiled instructions for an assignment will consist of the general instructions followed by the title, weight, and instructions for each specific problem.\nAny assets, such as images, can be placed in an <code>assets/</code> folder and will be provided alongside the composite instructions.</p>\n</li>\n<li>\n<p>Problem <strong>resources</strong>, placed in a <code>resources/</code> directory, are where any skeleton code for the problem can be provided to students.\nThe resources directory for each problem is copied into a combined resources folder in the compiled assignment.</p>\n</li>\n<li>\n<p>A <strong>solution</strong> may also be provided along with each problem in <code>solution/</code>.\nThe solution is kept separate from other files, but can be provided to TAs and graders.\nSimilarly to the instructions, any provided <code>README.md</code> files in the <code>solution/</code> directory are merged into a cumulative solution document for the entire submission.\nIt is encouraged that material writers use this functionality for assignment cheat sheets, or explanations of common solution methods.</p>\n</li>\n<li>\n<p>The <strong>grading</strong> tools for a problem may be included in the <code>grading/</code> directory.\nIf automated grading is enabled in the problem, the builder will look for a <code>tests.py</code> that uses the <code>curricula.shortcuts.Grader</code>.\nIf a <code>README.md</code> is provided, it will be merged into a cumulative grading document for the entire submission.\nThis can be used to build a custom rubric for each problem.</p>\n</li>\n</ol>\n<h3>Templates</h3>\n<p>The builder also requires a set of templates to compose assignments with.\nThese templates are the glue for the instruction, solution, and grading <code>README.md</code> files.\nThe following templates are required, but feel free to refer to or use wholesale the <a href=\"example/template/build\" rel=\"nofollow\">examples</a>.</p>\n<pre><code>template/\n  build/\n    instructions/\n      assignment.md\n      problem.md\n    solution/\n      assignment.md\n      problem.md\n    grading/\n      assignment.md\n      problem.md\n</code></pre>\n<h3>Distribution and Grading</h3>\n<p>After using <code>curricula</code> to build an assignment, the resultant composite artifacts will be ready for use.\nMostly, this involves distributing the instructions, resources, and solutions to the right parties.\nHowever, <code>curricula</code> also provides facilities for grading submissions.</p>\n<h2>Grade</h2>\n<p>Grading is the other half of <code>curricula</code>'s core functionality.\nIn order to use automated grading, material writers have to implement tests using <code>curricula.grade</code>'s toolkit.</p>\n<h3>Writing Tests</h3>\n<p>While somewhat bulkier than unit-test frameworks, the additional mechanisms backing the <code>Grader</code> make it much easier to generate and manage reports for students.\nLet's walk through an <a href=\"example/assignment/problem/hello_world/grading/tests.py\" rel=\"nofollow\">example</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">curricula.grade.shortcuts</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">curricula.grade.setup.check.common</span> <span class=\"kn\">import</span> <span class=\"n\">check_file_exists</span>\n<span class=\"kn\">from</span> <span class=\"nn\">curricula.grade.setup.build.common</span> <span class=\"kn\">import</span> <span class=\"n\">build_gpp_executable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">curricula.library</span> <span class=\"kn\">import</span> <span class=\"n\">files</span>\n\n<span class=\"n\">GPP_OPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"-Wall\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-std=c++11\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">grader</span> <span class=\"o\">=</span> <span class=\"n\">Grader</span><span class=\"p\">()</span>\n</pre>\n<p>To start off, we include <code>pathlib</code> for convenient, file-system-independent path operations.\nWe also include several utilities from <code>curricula</code> and define <code>g++</code> command line options we'll use later.\nFinally, we'll initialize the grader for this problem.</p>\n<pre><span class=\"nd\">@grader</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">sanity</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_hello_world</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Check whether hello_world.cpp has been submitted.\"\"\"</span>\n\n    <span class=\"n\">resources</span><span class=\"p\">[</span><span class=\"s2\">\"hello_world_source_path\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">problem_directory</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">\"hello_world.cpp\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">check_file_exists</span><span class=\"p\">(</span><span class=\"n\">resources</span><span class=\"p\">[</span><span class=\"s2\">\"hello_world_source_path\"</span><span class=\"p\">])</span>\n</pre>\n<p>Here, we register a <code>check</code> task in the <code>setup</code> phase of the grader.\nThe <code>sanity</code> option indicates that if we run grading on a submission with <code>--sanity</code>, this task will be run.\nNote that parameters in tasks are injected, but can also be accessed manually through the <code>resources</code> dictionary (<code>resources['resources'] is resources</code>).\nIn this task, we store the source path of file we're expecting to grade for this problem.\nHowever, if it doesn't exist, the returned <code>CorrectnessResult</code> will indicate to the grader that this task has failed, and that any dependent tasks should not be executed.</p>\n<pre><span class=\"nd\">@grader</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"o\">=</span><span class=\"s2\">\"check_hello_world\"</span><span class=\"p\">,</span> <span class=\"n\">sanity</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">build_hello_world</span><span class=\"p\">(</span><span class=\"n\">hello_world_source_path</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Compile the program with gcc.\"\"\"</span>\n\n    <span class=\"n\">resources</span><span class=\"p\">[</span><span class=\"s2\">\"hello_world_path\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hello_world\"</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">resources</span><span class=\"p\">[</span><span class=\"s2\">\"hello_world\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">build_gpp_executable</span><span class=\"p\">(</span>\n        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"n\">hello_world_source_path</span><span class=\"p\">,</span>\n        <span class=\"n\">destination_path</span><span class=\"o\">=</span><span class=\"n\">resources</span><span class=\"p\">[</span><span class=\"s2\">\"hello_world_path\"</span><span class=\"p\">],</span>\n        <span class=\"n\">gpp_options</span><span class=\"o\">=</span><span class=\"n\">GPP_OPTIONS</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre>\n<p>This segment builds the submitted <code>hello_world.cpp</code> file with <code>g++</code>.\nAs specified by the registration decorator, this task depends on <code>check_hello_world</code> passing.\nIf a task has multiple dependencies, <code>dependencies=[\"check_hello_world\", ...]</code> may be used instead.\nIn the task method, a custom <code>ExecutableFile</code> will be inserted into <code>resources</code>, and the <code>BuildResult</code> from the build function will be returned to the grader.\nNote that both <a href=\"curricula/grade/setup/build/common.py\" rel=\"nofollow\"><code>build_gpp_exectuable</code></a> and <a href=\"curricula/grade/setup/check/common.py\" rel=\"nofollow\"><code>check_file_exists</code></a> are just convenience methods that reduce code.</p>\n<pre><span class=\"nd\">@grader</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">correctness</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"o\">=</span><span class=\"s2\">\"build_hello_world\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hello_world_output</span><span class=\"p\">(</span><span class=\"n\">hello_world</span><span class=\"p\">:</span> <span class=\"n\">ExecutableFile</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Check if the program outputs as expected.\"\"\"</span>\n\n    <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">hello_world</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">CorrectnessResult</span><span class=\"p\">(</span><span class=\"n\">passed</span><span class=\"o\">=</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"Hello, world!\"</span><span class=\"p\">,</span> <span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">())</span>\n</pre>\n<p>This is an actual test cases.\nIn a proper problem, there will most likely be many more of these.\nNote that since there's no <code>sanity=True</code> in the registration decorator, this test will not be run if the grader is sanity-checking a solution.\nHere, we simply invoke the built binary <code>hello_world</code>.\nIf what's outputted to <code>stdout</code> during its runtime is <code>\"Hello, world!\"</code>, the <code>CorrectnessResult</code> will indicate the case passed.</p>\n<p>For an individual problem, this whole harness might seem somewhat bulky.\nHowever, note that the registration decorator can be used inline to register a generated task.\nIn other words, test cases that simply compare input and output files can simply be dynamically registered with a for loop rather than be written out manually.</p>\n<pre><span class=\"nd\">@grader</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"o\">=</span><span class=\"s2\">\"build_hello_world\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cleanup_hello_world</span><span class=\"p\">(</span><span class=\"n\">hello_world_path</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Clean up executables.\"\"\"</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">hello_world_path</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">():</span>\n        <span class=\"n\">files</span><span class=\"o\">.</span><span class=\"n\">delete_file</span><span class=\"p\">(</span><span class=\"n\">hello_world_path</span><span class=\"p\">)</span>\n</pre>\n<p>In this last segment, the built binary is deleted.\nNot returning a result in a task registered in the <code>teardown</code> phase will cause the grader to generate a default <code>TeardownResult</code> with a passing status.\nNote that <code>build_hello_world</code>, <code>test_hello_world_output</code>, and <code>cleanup_hello_world</code> all depend on <code>build_hello_world</code>.\nIf the latter does not pass, neither will any of the former.</p>\n<h2>Grader Output</h2>\n<p>Grading an assignment will yield a serializable <code>AssignmentReport</code>, which is composed of <code>ProblemReport</code> objects for each problem graded automatically.\nFor the <code>hello_world</code> solution, the following report was generated.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"hello_world\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"check_hello_world\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"complete\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"passed\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"task\"</span><span class=\"p\">:</span> <span class=\"s2\">\"check_hello_world\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"build_hello_world\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"complete\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"passed\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"task\"</span><span class=\"p\">:</span> <span class=\"s2\">\"build_hello_world\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"runtime\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"g++\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"-Wall\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"-std=c++11\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"-o\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"/tmp/hello_world\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"artifacts/assignment/solution/hello_world/hello_world.cpp\"</span>\n          <span class=\"p\">],</span>\n          <span class=\"nt\">\"timeout\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"elapsed\"</span><span class=\"p\">:</span> <span class=\"mf\">0.21283740003127605</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"stdin\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"stdout\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"stderr\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"timed_out\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"raised_exception\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"exception\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"test_hello_world_output\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"complete\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"passed\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"task\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_hello_world_output\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"runtime\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"/tmp/hello_world\"</span>\n          <span class=\"p\">],</span>\n          <span class=\"nt\">\"timeout\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"code\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"elapsed\"</span><span class=\"p\">:</span> <span class=\"mf\">0.0011609999928623438</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"stdin\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"stdout\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello, world!\\n\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"stderr\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"timed_out\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"raised_exception\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"exception\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"cleanup_hello_world\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"complete\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"passed\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"task\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cleanup_hello_world\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Note that this report matches up key-wise with the grading artifact <code>grading.json</code> file:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"hello_world\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello, World!\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"directory\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hello_world\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"percentage\"</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"tasks\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"check_hello_world\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"check_hello_world\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Check whether hello_world.cpp has been submitted.\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s2\">\"setup\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"kind\"</span><span class=\"p\">:</span> <span class=\"s2\">\"check\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"sanity\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"build_hello_world\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"build_hello_world\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Compile the program with gcc.\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s2\">\"setup\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"kind\"</span><span class=\"p\">:</span> <span class=\"s2\">\"build\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"check_hello_world\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"sanity\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"test_hello_world_output\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_hello_world_output\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Check if the program outputs as expected.\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"kind\"</span><span class=\"p\">:</span> <span class=\"s2\">\"correctness\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"build_hello_world\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"cleanup_hello_world\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cleanup_hello_world\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Clean up executables.\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s2\">\"teardown\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"kind\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cleanup\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"build_hello_world\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Using these two data sources, the grader can format each report into a readable file.\nThis functionality is provided in the <code>tools</code> package of <code>curricula.grade</code>.</p>\n<h2>Using Curricula</h2>\n<p>Curricula can be used by installing the <a href=\"https://github.com/csci104/curricula-shell\" rel=\"nofollow\">command line interface</a>.\nThis repository only contains the core functionality.</p>\n\n          </div>"}, "last_serial": 7168413, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "af1a8481b5003de003c008a766e3ec1a", "sha256": "e833739ae3cf21f6305b98e766df4c46bb9c68350632be28d99aad04e8e0d2ba"}, "downloads": -1, "filename": "curricula-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "af1a8481b5003de003c008a766e3ec1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 62400, "upload_time": "2020-04-10T16:47:57", "upload_time_iso_8601": "2020-04-10T16:47:57.578128Z", "url": "https://files.pythonhosted.org/packages/75/77/50b9a59856bb8fd353762b6245515d3a12159976e1ec1e89e77bb412f39c/curricula-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05a8e35a597518b90a5c76a7ea5cc3f1", "sha256": "4a3956ad49b125380baf30067130835ede8121ee9a809960c06ee981b5c53c17"}, "downloads": -1, "filename": "curricula-0.0.10.tar.gz", "has_sig": false, "md5_digest": "05a8e35a597518b90a5c76a7ea5cc3f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 38518, "upload_time": "2020-04-10T16:47:58", "upload_time_iso_8601": "2020-04-10T16:47:58.606482Z", "url": "https://files.pythonhosted.org/packages/b8/58/a130b558fd9390d063600abdcd54e909d29e0f7449ed3990c737f5d454cc/curricula-0.0.10.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "0074fb050b36a7f5f81e7e3f4a5eeba4", "sha256": "7bd1292ecc769736e3cd907d95d8eddbbdfb0d9e8438d0eaa32032335d3fa544"}, "downloads": -1, "filename": "curricula-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0074fb050b36a7f5f81e7e3f4a5eeba4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 56328, "upload_time": "2020-02-10T23:13:06", "upload_time_iso_8601": "2020-02-10T23:13:06.799722Z", "url": "https://files.pythonhosted.org/packages/16/3b/412897ecaaa8229ad2d5b491da1971dadb6a3c9eac4476d2a357abef366f/curricula-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "287edf5d6acb9529f30a2844bbc9254c", "sha256": "5537c9c36a654678a61a501562cadb8b621eaaf7ab1c703cda40c89f8d43cc1f"}, "downloads": -1, "filename": "curricula-0.0.4.tar.gz", "has_sig": false, "md5_digest": "287edf5d6acb9529f30a2844bbc9254c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 34939, "upload_time": "2020-02-10T23:13:09", "upload_time_iso_8601": "2020-02-10T23:13:09.232556Z", "url": "https://files.pythonhosted.org/packages/37/13/d8d1c943f1a82280376d4e2c6eebb04159195fcf58fbd86a3ecba0897a2a/curricula-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "65cbc286f020ce1fe8173d66a35eb4b6", "sha256": "4f3c052aefd3ab77e8a675a25ad3ac44c191423f943885b74e19c7e71643d4d4"}, "downloads": -1, "filename": "curricula-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "65cbc286f020ce1fe8173d66a35eb4b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 57604, "upload_time": "2020-02-18T21:29:44", "upload_time_iso_8601": "2020-02-18T21:29:44.572328Z", "url": "https://files.pythonhosted.org/packages/3a/01/07db328ee6ff817e904334cb9f8ca25fd82f381204561710e68695e98420/curricula-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1cae16dc7d7fab4e627d75181589681", "sha256": "61973b8a3b126a9f9519a8fc45a57fe67a2774b4c74addb68bc39c00dc6af622"}, "downloads": -1, "filename": "curricula-0.0.5.tar.gz", "has_sig": false, "md5_digest": "f1cae16dc7d7fab4e627d75181589681", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 35669, "upload_time": "2020-02-18T21:29:45", "upload_time_iso_8601": "2020-02-18T21:29:45.943280Z", "url": "https://files.pythonhosted.org/packages/6b/1e/ae1baa74d53d3c2bf0d450b38d8f70e69381cd3bd278e9b09df501e8461c/curricula-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "cccaebdb9ac5f3d33eb274bc8a27d645", "sha256": "dc870e0645c41f4a02339fafad299a9e13eca5f1744e70ea84ebfacaf5178e13"}, "downloads": -1, "filename": "curricula-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cccaebdb9ac5f3d33eb274bc8a27d645", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 58773, "upload_time": "2020-03-03T23:06:18", "upload_time_iso_8601": "2020-03-03T23:06:18.911631Z", "url": "https://files.pythonhosted.org/packages/70/6d/8e04e45cb809110fb6703ddf506325dc764fcdd92351bf026fd01f65ae09/curricula-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac4716f99332a278f56490d614c4df91", "sha256": "f7cdc4e80b18cce34eb5ff09d6d885ed695cd726fe8095e79fa841e34b61d9a7"}, "downloads": -1, "filename": "curricula-0.0.6.tar.gz", "has_sig": false, "md5_digest": "ac4716f99332a278f56490d614c4df91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 36849, "upload_time": "2020-03-03T23:06:20", "upload_time_iso_8601": "2020-03-03T23:06:20.275075Z", "url": "https://files.pythonhosted.org/packages/c5/3b/66f38743bcd3a7bdeed79626a6a2e56b923cb5f5b6eb7e459f36bb58a7fa/curricula-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "9980cfbda994037b8824a7d43677151c", "sha256": "39a00a64dcbb964cb20c6f05941a7947d94c380f4d1a22ba564c48452b1d021b"}, "downloads": -1, "filename": "curricula-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "9980cfbda994037b8824a7d43677151c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 58917, "upload_time": "2020-03-24T03:02:00", "upload_time_iso_8601": "2020-03-24T03:02:00.799491Z", "url": "https://files.pythonhosted.org/packages/31/bf/1a31578908ca0047a6cf1ae244358193d54f56a050f9f3c43702b0c334f0/curricula-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3add35d8da915d6854a0a3707683b40c", "sha256": "0944fd8217e3f9baacdfe24553ba3c726fa54d9064c5ae17d6d1c05be170bdfd"}, "downloads": -1, "filename": "curricula-0.0.7.tar.gz", "has_sig": false, "md5_digest": "3add35d8da915d6854a0a3707683b40c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 37008, "upload_time": "2020-03-24T03:02:04", "upload_time_iso_8601": "2020-03-24T03:02:04.037565Z", "url": "https://files.pythonhosted.org/packages/ba/aa/355f2987047fb709196462f17414da15a9c8e628bd177822e1e11d4e17d9/curricula-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "5dfcddf51e15de41fb732790ad6fba73", "sha256": "2c3e3abcefc4569cc3cedf127847b0d07a4a8072a7cc70b234b0068e95fb2259"}, "downloads": -1, "filename": "curricula-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "5dfcddf51e15de41fb732790ad6fba73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 61060, "upload_time": "2020-04-09T18:24:18", "upload_time_iso_8601": "2020-04-09T18:24:18.993068Z", "url": "https://files.pythonhosted.org/packages/11/ed/ddd196d3aaea5374f451a407fb81419959ca44367f0fe3db1f940f07d0bc/curricula-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28a94315852b8e823dc587760bf36d07", "sha256": "77c44a6af8b241f7de837bd35248d637b624f3898f4ff7e662a1d4b265f4c02c"}, "downloads": -1, "filename": "curricula-0.0.8.tar.gz", "has_sig": false, "md5_digest": "28a94315852b8e823dc587760bf36d07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 38517, "upload_time": "2020-04-09T18:24:20", "upload_time_iso_8601": "2020-04-09T18:24:20.397311Z", "url": "https://files.pythonhosted.org/packages/4b/bb/cbb7d9558fad99f67d8b089e51dd9b3ddba8ef5ae366bdfba9f505b54197/curricula-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "9cd1355ab68b71bc32ab4e20c93d7d92", "sha256": "81700eea6217b7ecd3d9fb9e41e4e75e212018174cdc4d45cb89aa8ffd684bee"}, "downloads": -1, "filename": "curricula-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "9cd1355ab68b71bc32ab4e20c93d7d92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 61073, "upload_time": "2020-04-09T18:56:57", "upload_time_iso_8601": "2020-04-09T18:56:57.099687Z", "url": "https://files.pythonhosted.org/packages/24/27/e6e63c713a1b3d3f4c7ed666e50e6b3b0463ad6ffba3110f020a81466b58/curricula-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f15c6beee48135fa648973cdcc240428", "sha256": "4a0a42e4c6947406ab5b53cebaa78441e7b10558059f03a909c4f692c92c37e5"}, "downloads": -1, "filename": "curricula-0.0.9.tar.gz", "has_sig": false, "md5_digest": "f15c6beee48135fa648973cdcc240428", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 38512, "upload_time": "2020-04-09T18:56:57", "upload_time_iso_8601": "2020-04-09T18:56:57.994369Z", "url": "https://files.pythonhosted.org/packages/63/07/8de7f7da8fb6ca3a23492d2394178d5a802fbc7db1b3e706949a5b2e9298/curricula-0.0.9.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d4c41ccfa864eb36eea582b7e9d2651b", "sha256": "7e6cbc458c3fffa9a25de4b854a4655b8f85ad999c29ec8282998b53e83c8b25"}, "downloads": -1, "filename": "curricula-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d4c41ccfa864eb36eea582b7e9d2651b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 65520, "upload_time": "2020-05-04T15:55:27", "upload_time_iso_8601": "2020-05-04T15:55:27.618699Z", "url": "https://files.pythonhosted.org/packages/31/65/683930bcc02ecec42e2b91deaea8e0b2bd570e589f38b2b8c14b2ab73513/curricula-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e873c17cdd42434f6f7fc9e9745e3404", "sha256": "4fccad0e8ef96979aa02118715d697df38c08b71fe6581d48b35d8098d001338"}, "downloads": -1, "filename": "curricula-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e873c17cdd42434f6f7fc9e9745e3404", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 41110, "upload_time": "2020-05-04T15:55:28", "upload_time_iso_8601": "2020-05-04T15:55:28.502401Z", "url": "https://files.pythonhosted.org/packages/ec/ff/4d6e00cc49f858288fa0fc8e4061e7c2096f376a1fb999be3046f7af9df9/curricula-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "12cd1c8f11aacca674c821c763f71b0c", "sha256": "c3f064aeac7431f1d0d2c7e68c9e5c41d7abec877df71ecd771ef44906a6edc7"}, "downloads": -1, "filename": "curricula-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "12cd1c8f11aacca674c821c763f71b0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66047, "upload_time": "2020-05-04T23:09:42", "upload_time_iso_8601": "2020-05-04T23:09:42.253496Z", "url": "https://files.pythonhosted.org/packages/58/0a/ecffb687578c515805fdd9552a28cb8054ffab01ae646637a15e979c5509/curricula-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b66eedcb928cf359af5adfc0f9a4386", "sha256": "992c1838816a040ae9c24cfe8ec7d564b011f53530db7f273c723718ad9e7292"}, "downloads": -1, "filename": "curricula-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8b66eedcb928cf359af5adfc0f9a4386", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 41126, "upload_time": "2020-05-04T23:09:43", "upload_time_iso_8601": "2020-05-04T23:09:43.577449Z", "url": "https://files.pythonhosted.org/packages/7a/21/bdc6cec5409a9fbcff78b7cbda364b00eb148ff233f77c08bf8725900228/curricula-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12cd1c8f11aacca674c821c763f71b0c", "sha256": "c3f064aeac7431f1d0d2c7e68c9e5c41d7abec877df71ecd771ef44906a6edc7"}, "downloads": -1, "filename": "curricula-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "12cd1c8f11aacca674c821c763f71b0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 66047, "upload_time": "2020-05-04T23:09:42", "upload_time_iso_8601": "2020-05-04T23:09:42.253496Z", "url": "https://files.pythonhosted.org/packages/58/0a/ecffb687578c515805fdd9552a28cb8054ffab01ae646637a15e979c5509/curricula-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b66eedcb928cf359af5adfc0f9a4386", "sha256": "992c1838816a040ae9c24cfe8ec7d564b011f53530db7f273c723718ad9e7292"}, "downloads": -1, "filename": "curricula-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8b66eedcb928cf359af5adfc0f9a4386", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 41126, "upload_time": "2020-05-04T23:09:43", "upload_time_iso_8601": "2020-05-04T23:09:43.577449Z", "url": "https://files.pythonhosted.org/packages/7a/21/bdc6cec5409a9fbcff78b7cbda364b00eb148ff233f77c08bf8725900228/curricula-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:20 2020"}