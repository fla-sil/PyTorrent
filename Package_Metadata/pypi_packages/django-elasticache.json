{"info": {"author": "Danil Gusev", "author_email": "danil.gusev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Environment :: Web Environment :: Mozilla", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Amazon ElastiCache backend for Django\n=====================================\n\nSimple Django cache backend for Amazon ElastiCache (memcached based). It uses\n`pylibmc <http://github.com/lericson/pylibmc>`_ and sets up a connection to each\nnode in the cluster using\n`auto discovery <http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoDiscovery.html>`_.\n\n\nRequirements\n------------\n\n* pylibmc\n* Django 1.5+.\n\nIt was written and tested on Python 2.7 and 3.4.\n\nInstallation\n------------\n\nGet it from `pypi <http://pypi.python.org/pypi/django-elasticache>`_::\n\n    pip install django-elasticache\n\nor `github <http://github.com/gusdan/django-elasticache>`_::\n\n    pip install -e git://github.com/gusdan/django-elasticache.git#egg=django-elasticache\n\n\nUsage\n-----\n\nYour cache backend should look something like this::\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_elasticache.memcached.ElastiCache',\n            'LOCATION': 'cache-c.draaaf.cfg.use1.cache.amazonaws.com:11211',\n            'OPTIONS' {\n                'IGNORE_CLUSTER_ERRORS': [True,False],\n            },\n        }\n    }\n\nBy the first call to cache it connects to cluster (using ``LOCATION`` param),\ngets list of all nodes and setup pylibmc client using full\nlist of nodes. As result your cache will work with all nodes in cluster and\nautomatically detect new nodes in cluster. List of nodes are stored in class-level\ncached, so any changes in cluster take affect only after restart of working process.\nBut if you're using gunicorn or mod_wsgi you usually have max_request settings which\nrestart process after some count of processed requests, so auto discovery will work\nfine.\n\nThe ``IGNORE_CLUSTER_ERRORS`` option is useful when ``LOCATION`` doesn't have support\nfor ``config get cluster``. When set to ``True``, and ``config get cluster`` fails,\nit returns a list of a single node with the same endpoint supplied to ``LOCATION``.\n\nDjango-elasticache changes default pylibmc params to increase performance.\n\nAnother solutions\n-----------------\n\nElastiCache provides memcached interface so there are three solution of using it:\n\n1. Memcached configured with location = Configuration Endpoint\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn this case your application\nwill randomly connect to nodes in cluster and cache will be used with not optimal\nway. At some moment you will be connected to first node and set item. Minute later\nyou will be connected to another node and will not able to get this item.\n\n ::\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n            'LOCATION': 'cache.gasdbp.cfg.use1.cache.amazonaws.com:11211',\n        }\n    }\n\n\n2. Memcached configured with all nodes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt will work fine, memcache client will\nseparate items between all nodes and will balance loading on client side. You will\nhave problems only after adding new nodes or delete old nodes. In this case you should\nadd new nodes manually and don't forget update your app after all changes on AWS.\n\n ::\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n            'LOCATION': [\n                'cache.gqasdbp.0001.use1.cache.amazonaws.com:11211',\n                'cache.gqasdbp.0002.use1.cache.amazonaws.com:11211',\n            ]\n        }\n    }\n\n\n3. Use django-elasticache\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt will connect to cluster and retrieve ip addresses\nof all nodes and configure memcached to use all nodes.\n\n ::\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_elasticache.memcached.ElastiCache',\n            'LOCATION': 'cache-c.draaaf.cfg.use1.cache.amazonaws.com:11211',\n        }\n    }\n\n\nDifference between setup with nodes list (django-elasticache) and\nconnection to only one configuration Endpoint (using dns routing) you can see on\nthis graph:\n\n.. image:: https://raw.github.com/gusdan/django-elasticache/master/docs/images/get%20operation%20in%20cluster.png\n\nTesting\n-------\n\nRun the tests like this::\n\n    nosetests", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/gusdan/django-elasticache", "keywords": "elasticache amazon cache pylibmc memcached aws", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-elasticache", "package_url": "https://pypi.org/project/django-elasticache/", "platform": "any", "project_url": "https://pypi.org/project/django-elasticache/", "project_urls": {"Homepage": "http://github.com/gusdan/django-elasticache"}, "release_url": "https://pypi.org/project/django-elasticache/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Django cache backend for Amazon ElastiCache (memcached)", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple Django cache backend for Amazon ElastiCache (memcached based). It uses\n<a href=\"http://github.com/lericson/pylibmc\" rel=\"nofollow\">pylibmc</a> and sets up a connection to each\nnode in the cluster using\n<a href=\"http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoDiscovery.html\" rel=\"nofollow\">auto discovery</a>.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>pylibmc</li>\n<li>Django 1.5+.</li>\n</ul>\n<p>It was written and tested on Python 2.7 and 3.4.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Get it from <a href=\"http://pypi.python.org/pypi/django-elasticache\" rel=\"nofollow\">pypi</a>:</p>\n<pre>pip install django-elasticache\n</pre>\n<p>or <a href=\"http://github.com/gusdan/django-elasticache\" rel=\"nofollow\">github</a>:</p>\n<pre>pip install -e git://github.com/gusdan/django-elasticache.git#egg=django-elasticache\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Your cache backend should look something like this:</p>\n<pre>CACHES = {\n    'default': {\n        'BACKEND': 'django_elasticache.memcached.ElastiCache',\n        'LOCATION': 'cache-c.draaaf.cfg.use1.cache.amazonaws.com:11211',\n        'OPTIONS' {\n            'IGNORE_CLUSTER_ERRORS': [True,False],\n        },\n    }\n}\n</pre>\n<p>By the first call to cache it connects to cluster (using <tt>LOCATION</tt> param),\ngets list of all nodes and setup pylibmc client using full\nlist of nodes. As result your cache will work with all nodes in cluster and\nautomatically detect new nodes in cluster. List of nodes are stored in class-level\ncached, so any changes in cluster take affect only after restart of working process.\nBut if you\u2019re using gunicorn or mod_wsgi you usually have max_request settings which\nrestart process after some count of processed requests, so auto discovery will work\nfine.</p>\n<p>The <tt>IGNORE_CLUSTER_ERRORS</tt> option is useful when <tt>LOCATION</tt> doesn\u2019t have support\nfor <tt>config get cluster</tt>. When set to <tt>True</tt>, and <tt>config get cluster</tt> fails,\nit returns a list of a single node with the same endpoint supplied to <tt>LOCATION</tt>.</p>\n<p>Django-elasticache changes default pylibmc params to increase performance.</p>\n</div>\n<div id=\"another-solutions\">\n<h2>Another solutions</h2>\n<p>ElastiCache provides memcached interface so there are three solution of using it:</p>\n<div id=\"memcached-configured-with-location-configuration-endpoint\">\n<h3>1. Memcached configured with location = Configuration Endpoint</h3>\n<p>In this case your application\nwill randomly connect to nodes in cluster and cache will be used with not optimal\nway. At some moment you will be connected to first node and set item. Minute later\nyou will be connected to another node and will not able to get this item.</p>\n<blockquote>\n<pre>CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n        'LOCATION': 'cache.gasdbp.cfg.use1.cache.amazonaws.com:11211',\n    }\n}\n</pre>\n</blockquote>\n</div>\n<div id=\"memcached-configured-with-all-nodes\">\n<h3>2. Memcached configured with all nodes</h3>\n<p>It will work fine, memcache client will\nseparate items between all nodes and will balance loading on client side. You will\nhave problems only after adding new nodes or delete old nodes. In this case you should\nadd new nodes manually and don\u2019t forget update your app after all changes on AWS.</p>\n<blockquote>\n<pre>CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n        'LOCATION': [\n            'cache.gqasdbp.0001.use1.cache.amazonaws.com:11211',\n            'cache.gqasdbp.0002.use1.cache.amazonaws.com:11211',\n        ]\n    }\n}\n</pre>\n</blockquote>\n</div>\n<div id=\"use-django-elasticache\">\n<h3>3. Use django-elasticache</h3>\n<p>It will connect to cluster and retrieve ip addresses\nof all nodes and configure memcached to use all nodes.</p>\n<blockquote>\n<pre>CACHES = {\n    'default': {\n        'BACKEND': 'django_elasticache.memcached.ElastiCache',\n        'LOCATION': 'cache-c.draaaf.cfg.use1.cache.amazonaws.com:11211',\n    }\n}\n</pre>\n</blockquote>\n<p>Difference between setup with nodes list (django-elasticache) and\nconnection to only one configuration Endpoint (using dns routing) you can see on\nthis graph:</p>\n<img alt=\"https://raw.github.com/gusdan/django-elasticache/master/docs/images/get%20operation%20in%20cluster.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c267fb30410a9f9781124fbe51ade5d7bf90a32d/68747470733a2f2f7261772e6769746875622e636f6d2f67757364616e2f646a616e676f2d656c6173746963616368652f6d61737465722f646f63732f696d616765732f6765742532306f7065726174696f6e253230696e253230636c75737465722e706e67\">\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Run the tests like this:</p>\n<pre>nosetests\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3112870, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2ae0ac41d30992e6c23a3d549a75c8e4", "sha256": "64844742057f620dfa9791b44faea22aca66b3e9aa13e2d8a4cc3d2249aa833f"}, "downloads": -1, "filename": "django-elasticache-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2ae0ac41d30992e6c23a3d549a75c8e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3722, "upload_time": "2014-02-28T21:01:29", "upload_time_iso_8601": "2014-02-28T21:01:29.336931Z", "url": "https://files.pythonhosted.org/packages/df/bb/64106849606c7f90b9ae548556a5d894b2c5b9aab71bf78657f9c54a02ab/django-elasticache-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "20a0d4e8b5cdd5beb30924f7b39d21fd", "sha256": "b18e1385b7ec21c3c91e83343f709b3f6c60bf5024545f984182ce9c65523f1f"}, "downloads": -1, "filename": "django-elasticache-0.0.2.tar.gz", "has_sig": false, "md5_digest": "20a0d4e8b5cdd5beb30924f7b39d21fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4493, "upload_time": "2014-09-18T15:35:37", "upload_time_iso_8601": "2014-09-18T15:35:37.491966Z", "url": "https://files.pythonhosted.org/packages/6f/a0/54a769dc3c612ca4bb3bc4f38c9c43976fa39b45635e86a59427684c4972/django-elasticache-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "73bd87eb171f62f7bac30f607ccead50", "sha256": "4bb648638d92d2e22856d35bd6d432bfe901bf36ac80570af506c87867071aac"}, "downloads": -1, "filename": "django-elasticache-0.0.3.tar.gz", "has_sig": false, "md5_digest": "73bd87eb171f62f7bac30f607ccead50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4529, "upload_time": "2015-03-17T04:53:30", "upload_time_iso_8601": "2015-03-17T04:53:30.171889Z", "url": "https://files.pythonhosted.org/packages/ff/25/60404ce2af47b6928ad3c82a3e8aad7f72e5b943e1624339a4b7c2d6376f/django-elasticache-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "7f7e66c2466de047809306cb6219be6c", "sha256": "8221c2bc351fe29d1cf9178ecd2f6a6cd7aeb5981453aa1e575d139c9257bfab"}, "downloads": -1, "filename": "django-elasticache-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7f7e66c2466de047809306cb6219be6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4745, "upload_time": "2016-06-13T11:05:27", "upload_time_iso_8601": "2016-06-13T11:05:27.312569Z", "url": "https://files.pythonhosted.org/packages/b3/63/ba8bd1df60889847a2b85b3f74cd81e4537e3a69fc40413b813505e1a8ca/django-elasticache-0.0.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a113cfa0918aa38e4d9d0d36f8bdd835", "sha256": "0b8273b13582ca5d5376722512c8fde5af0547eb0240ba4de94432aa6747a408"}, "downloads": -1, "filename": "django-elasticache-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a113cfa0918aa38e4d9d0d36f8bdd835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4733, "upload_time": "2016-12-15T11:21:50", "upload_time_iso_8601": "2016-12-15T11:21:50.222915Z", "url": "https://files.pythonhosted.org/packages/85/3a/37f8dfa7634de1c99373ecd7e935cbee4037e1f8191b0b5da92dfe393727/django-elasticache-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "22b782c6e2de8591de3b8e580396cca4", "sha256": "bdfa62ae3fd7a4e3552a4d8543c0b1579b9e02261841ef101f7e07ef8f8ab58b"}, "downloads": -1, "filename": "django-elasticache-1.0.1.tar.gz", "has_sig": false, "md5_digest": "22b782c6e2de8591de3b8e580396cca4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5039, "upload_time": "2017-02-11T13:34:26", "upload_time_iso_8601": "2017-02-11T13:34:26.227772Z", "url": "https://files.pythonhosted.org/packages/6a/15/9cf52c20d0d93783bd791faea8307cd2b0d22b9e43dccb6347883dfd0e80/django-elasticache-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d761db49fb4aad36e387ed3344fb12a1", "sha256": "2fd13576ee90b99391267a5c5ab76c115922cca052ea51955a958711bafebf2c"}, "downloads": -1, "filename": "django-elasticache-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d761db49fb4aad36e387ed3344fb12a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5125, "upload_time": "2017-05-02T16:51:25", "upload_time_iso_8601": "2017-05-02T16:51:25.085832Z", "url": "https://files.pythonhosted.org/packages/b3/0b/76f50abebdba2d13babd5c1389b8ab2645c0153f2b6fca628496fd21c21d/django-elasticache-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bebf34656dca5511fb663ee62d56d1ef", "sha256": "bf7e066b594b7b91629f7a3fc6c61ff4aa406330ee80ceb227bbf961534c73c1"}, "downloads": -1, "filename": "django-elasticache-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bebf34656dca5511fb663ee62d56d1ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5126, "upload_time": "2017-08-21T20:06:57", "upload_time_iso_8601": "2017-08-21T20:06:57.755503Z", "url": "https://files.pythonhosted.org/packages/dc/ae/a9e74d45a905cc7e0b76ca14db00c026b4757a5d44e0fc92995a387d8f0b/django-elasticache-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bebf34656dca5511fb663ee62d56d1ef", "sha256": "bf7e066b594b7b91629f7a3fc6c61ff4aa406330ee80ceb227bbf961534c73c1"}, "downloads": -1, "filename": "django-elasticache-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bebf34656dca5511fb663ee62d56d1ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5126, "upload_time": "2017-08-21T20:06:57", "upload_time_iso_8601": "2017-08-21T20:06:57.755503Z", "url": "https://files.pythonhosted.org/packages/dc/ae/a9e74d45a905cc7e0b76ca14db00c026b4757a5d44e0fc92995a387d8f0b/django-elasticache-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:25 2020"}