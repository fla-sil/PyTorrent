{"info": {"author": "Valerio Maggio", "author_email": "valeriomaggio@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3.7"], "description": "# Django 2.x Resumable (`django-resumable`)\n\n``django2-resumable`` provides **Django 2.1** backend stuff (e.g. `ModelFields`, `Forms`, `staticfiles`) \nto integrates [`resumable.js`](<https://github.com/23/Resumable.js>) in Django apps and admin.\n\nThis projects build on the original `django-resumable` by [jeanphix](https://github.com/jeanphix/django-resumable), which (_afaik_) it \nis not maintained anymore, and does not support Django 2.x - _main\nreason why I ended up developing this in the first place_ (ed.)\n\n#### `ICYM`:\n\n(from the [documentation](https://github.com/23/resumable.js/blob/master/README.md))\n\n>Resumable.js is a JavaScript library providing multiple simultaneous, stable and \n>resumable uploads via the [`HTML5 File API`](http://www.w3.org/TR/FileAPI/).\n>\n>The library is designed to introduce fault-tolerance into the upload of large files through HTTP. \n>This is done by splitting each file into small chunks. \n>Then, whenever the upload of a chunk fails, uploading is retried until the procedure completes. \n>This allows uploads to automatically resume uploading after a network connection \n>is lost either locally or to the server. \n>Additionally, it allows for users to pause, resume and even recover uploads without \n>losing state because only the currently uploading chunks will be aborted, not the entire upload.\n>\n>Resumable.js does not have any external dependencies other than the `HTML5 File API`. \n>This is relied on for the ability to chunk files into smaller pieces. \n>Currently, this means that support is widely available in to Firefox 4+, Chrome 11+, \n>Safari 6+ and Internet Explorer 10+.\n\n\n## Installation\n\n* ``pip install django2-resumable``\n* Add ``django2_resumable`` to your ``INSTALLED_APPS``\n\n## How to use\n\n### Views\n\nIn order to enable asynchronous files upload files, you must define an endpoint that will deal\nwith uploaded file chunks:\n\n```Python\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('resumable_upload/', include('django2_resumable.urls')),\n]\n```\n\nBy default, the `resume-upload` view is provided with no restriction on the accesses\n(i.e. no `login_required` nor `staff_member_required`). \n\nTo enable the view on restricted levels of permissions, urls should be modified accordingly:\n\n```Python\n\nfrom django.contrib.auth.views import login_required\n# To enable view in AdminForm\nfrom django.contrib.admin.views.decorators import staff_member_required\n\nfrom django2_resumable.views import resumable_upload\nfrom django.urls import path\n\nurlpatterns = [\n    path('resumable-upload', login_required(resumable_upload), \n         name='resumable-upload'),\n    path('admin-resumable-upload', staff_member_required(resumable_upload), \n         name='admin-resumable-upload'),\n]\n\n```\n\n### Model\n\n`django2-resumable` provides a `ResumableFileField` that can be easily \nintegrated in your Model class:\n\n```Python\n\nfrom django.db import models\nfrom django2_resumable.fields import ResumableFileField\n\nclass MyModel(models.Model):\n    file = ResumableFileField(chunks_upload_to='resumable_chunks', **kwargs)\n```\n\nThe `ResumableFileField` field extends the default `django.core.fields.FielField` by including \nan additional parameter, namely `chunks_upload_to` specifying the path in the `MEDIA_ROOT` in which\ntemporary chunks will be uploaded. Once the upload is complete, the file will be \nautomatically moved to the `upload_to` destination folder (if any).\n \n\n### Form\n\nIf you want to handle resumable upload within your forms, \nyou can use the `FormResumableFileField`:\n\n```Python\nfrom django.forms import Form\nfrom django2_resumable.forms import FormResumableFileField\n\n\nclass ResumableForm(Form):\n    file = FormResumableFileField()\n        \n```\n\nIt is as simple as that: \n`FormResumableFileField` simply extends the core `django.forms.FileField` by injecting the\n`django_resumable.widgets.ResumableWidget`.\nThis widget is the default widget mapped by default to `ResumableFileField` instances \n(see `django_resumable.fields.ResumableFileField.formfield` method). \n\n\n### Additional Settings\n\n``django2-resumable`` comes with some extendable settings allowing for additional setup:\n\n- `RESUMABLE_SUBDIR`: Directory in `MEDIA_ROOT` in which chunks will be uploaded. This settings will be \n                      overriden by any `chunks_upload_to` options specified at the time of definition of \n                      `ResumableFileField` within Django Model.\n                    \n- `RESUMABLE_STORAGE`: (default `django.core.files.storage.FileSystemStorage`)\n                       Django Storage class to be used to handle the uploads.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leriomaggio/django2-resumable", "keywords": "", "license": "MIT licence", "maintainer": "", "maintainer_email": "", "name": "django2-resumable", "package_url": "https://pypi.org/project/django2-resumable/", "platform": "", "project_url": "https://pypi.org/project/django2-resumable/", "project_urls": {"Homepage": "https://github.com/leriomaggio/django2-resumable"}, "release_url": "https://pypi.org/project/django2-resumable/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Django 2.x resumable uploads", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django 2.x Resumable (<code>django-resumable</code>)</h1>\n<p><code>django2-resumable</code> provides <strong>Django 2.1</strong> backend stuff (e.g. <code>ModelFields</code>, <code>Forms</code>, <code>staticfiles</code>)\nto integrates <a href=\"https://github.com/23/Resumable.js\" rel=\"nofollow\"><code>resumable.js</code></a> in Django apps and admin.</p>\n<p>This projects build on the original <code>django-resumable</code> by <a href=\"https://github.com/jeanphix/django-resumable\" rel=\"nofollow\">jeanphix</a>, which (<em>afaik</em>) it\nis not maintained anymore, and does not support Django 2.x - <em>main\nreason why I ended up developing this in the first place</em> (ed.)</p>\n<h4><code>ICYM</code>:</h4>\n<p>(from the <a href=\"https://github.com/23/resumable.js/blob/master/README.md\" rel=\"nofollow\">documentation</a>)</p>\n<blockquote>\n<p>Resumable.js is a JavaScript library providing multiple simultaneous, stable and\nresumable uploads via the <a href=\"http://www.w3.org/TR/FileAPI/\" rel=\"nofollow\"><code>HTML5 File API</code></a>.</p>\n<p>The library is designed to introduce fault-tolerance into the upload of large files through HTTP.\nThis is done by splitting each file into small chunks.\nThen, whenever the upload of a chunk fails, uploading is retried until the procedure completes.\nThis allows uploads to automatically resume uploading after a network connection\nis lost either locally or to the server.\nAdditionally, it allows for users to pause, resume and even recover uploads without\nlosing state because only the currently uploading chunks will be aborted, not the entire upload.</p>\n<p>Resumable.js does not have any external dependencies other than the <code>HTML5 File API</code>.\nThis is relied on for the ability to chunk files into smaller pieces.\nCurrently, this means that support is widely available in to Firefox 4+, Chrome 11+,\nSafari 6+ and Internet Explorer 10+.</p>\n</blockquote>\n<h2>Installation</h2>\n<ul>\n<li><code>pip install django2-resumable</code></li>\n<li>Add <code>django2_resumable</code> to your <code>INSTALLED_APPS</code></li>\n</ul>\n<h2>How to use</h2>\n<h3>Views</h3>\n<p>In order to enable asynchronous files upload files, you must define an endpoint that will deal\nwith uploaded file chunks:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'resumable_upload/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'django2_resumable.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>By default, the <code>resume-upload</code> view is provided with no restriction on the accesses\n(i.e. no <code>login_required</code> nor <code>staff_member_required</code>).</p>\n<p>To enable the view on restricted levels of permissions, urls should be modified accordingly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.views</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n<span class=\"c1\"># To enable view in AdminForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.admin.views.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">staff_member_required</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django2_resumable.views</span> <span class=\"kn\">import</span> <span class=\"n\">resumable_upload</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'resumable-upload'</span><span class=\"p\">,</span> <span class=\"n\">login_required</span><span class=\"p\">(</span><span class=\"n\">resumable_upload</span><span class=\"p\">),</span> \n         <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'resumable-upload'</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'admin-resumable-upload'</span><span class=\"p\">,</span> <span class=\"n\">staff_member_required</span><span class=\"p\">(</span><span class=\"n\">resumable_upload</span><span class=\"p\">),</span> \n         <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'admin-resumable-upload'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Model</h3>\n<p><code>django2-resumable</code> provides a <code>ResumableFileField</code> that can be easily\nintegrated in your Model class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django2_resumable.fields</span> <span class=\"kn\">import</span> <span class=\"n\">ResumableFileField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">ResumableFileField</span><span class=\"p\">(</span><span class=\"n\">chunks_upload_to</span><span class=\"o\">=</span><span class=\"s1\">'resumable_chunks'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>ResumableFileField</code> field extends the default <code>django.core.fields.FielField</code> by including\nan additional parameter, namely <code>chunks_upload_to</code> specifying the path in the <code>MEDIA_ROOT</code> in which\ntemporary chunks will be uploaded. Once the upload is complete, the file will be\nautomatically moved to the <code>upload_to</code> destination folder (if any).</p>\n<h3>Form</h3>\n<p>If you want to handle resumable upload within your forms,\nyou can use the <code>FormResumableFileField</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.forms</span> <span class=\"kn\">import</span> <span class=\"n\">Form</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django2_resumable.forms</span> <span class=\"kn\">import</span> <span class=\"n\">FormResumableFileField</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ResumableForm</span><span class=\"p\">(</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">FormResumableFileField</span><span class=\"p\">()</span>\n        \n</pre>\n<p>It is as simple as that:\n<code>FormResumableFileField</code> simply extends the core <code>django.forms.FileField</code> by injecting the\n<code>django_resumable.widgets.ResumableWidget</code>.\nThis widget is the default widget mapped by default to <code>ResumableFileField</code> instances\n(see <code>django_resumable.fields.ResumableFileField.formfield</code> method).</p>\n<h3>Additional Settings</h3>\n<p><code>django2-resumable</code> comes with some extendable settings allowing for additional setup:</p>\n<ul>\n<li>\n<p><code>RESUMABLE_SUBDIR</code>: Directory in <code>MEDIA_ROOT</code> in which chunks will be uploaded. This settings will be\noverriden by any <code>chunks_upload_to</code> options specified at the time of definition of\n<code>ResumableFileField</code> within Django Model.</p>\n</li>\n<li>\n<p><code>RESUMABLE_STORAGE</code>: (default <code>django.core.files.storage.FileSystemStorage</code>)\nDjango Storage class to be used to handle the uploads.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7168686, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "7746e64503d5b6713b585ed037de6fe7", "sha256": "ff42358f470438e42f70da2b9b4ca360928c0277f46133d6c72b2469c384fd88"}, "downloads": -1, "filename": "django2-resumable-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7746e64503d5b6713b585ed037de6fe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7589, "upload_time": "2020-05-05T00:31:37", "upload_time_iso_8601": "2020-05-05T00:31:37.872327Z", "url": "https://files.pythonhosted.org/packages/7e/fe/b029170a9a4c6784a860dd95208643520f10410d6a2d4ba4e71c9241a0eb/django2-resumable-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7746e64503d5b6713b585ed037de6fe7", "sha256": "ff42358f470438e42f70da2b9b4ca360928c0277f46133d6c72b2469c384fd88"}, "downloads": -1, "filename": "django2-resumable-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7746e64503d5b6713b585ed037de6fe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7589, "upload_time": "2020-05-05T00:31:37", "upload_time_iso_8601": "2020-05-05T00:31:37.872327Z", "url": "https://files.pythonhosted.org/packages/7e/fe/b029170a9a4c6784a860dd95208643520f10410d6a2d4ba4e71c9241a0eb/django2-resumable-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:55 2020"}