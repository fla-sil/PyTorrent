{"info": {"author": "Engie Impact Sustainability Solution EMEAI", "author_email": "guido.maurano@engie.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# eib-aws-utils\n\nHelper used by Engie Impact Sustainability Solution EMEAI to develop services based on AWS.\n\n\n**This package is in alpha version**\n\n## Background jobs\n\nFor lambdas and batch background job, meaning not exposed though API-Gateway, you can use\nthe _entry_point_ decorator to manage the error handling and to configure the logging.\nThis decorator must be used only on the main handler.\nIt will:\n* configure the standard logging package to use JSON format ([see](#logging-configuration)).\n* catch all exception and log them correctly.\n\n### Usage\n````python\nfrom eib_aws_utils.backgound_job import entry_point\n\n@entry_point(\"my_package_name\")\ndef my_handler(event, context):\n    pass\n````\n\n## API-Endpoints\n\nLambda exposing data behind API-Gateway can use the _http_endpoint_ decorator.\nThis decorator manage the error handling, the logging configuration and the serialization of the output.\n\n### Error handling\n\nThere is two category of error.\n\n* The _BackendError_ who are internal errors.\nMeaning errors occurring inside the application and don't have any link with the end users.\nFor example, missing data on an external source. These errors should be catch somewhere in the application.\nIf they are not catch then the decorator will log the error and return a _500 - Internal Server Error_ to the end user.\n\n* The _ClientError_ are error that must be return to the end user.\nThey will be catch by the decorator and logged as warning.\nThe error will then be serialized and returned as a JSON.\nFor example, if the resource didn't exist you can raise a _NotFoundError_.\n\n### Logging configuration\n\nThe decorator will use the _configure_logging_ function to configure properly the logging.\nFor the details [see the logging section](#logging-configuration).\n\n### Serialization\n\nThe decorator also manage the serialisation of the lambda output to match the api-gateway format.\nYour function can return only the body or a tuple with the body and the http status code.\n\nThe body can be an object or a dictionary. If it's an object then it must have a _to_dict()_ function \nthat return a dictionary representation of the object.\nIf it's a dictionary then it will be serialized as a JSON string.\nIn addition to the python basic data types, the dictionary can contain the following types:\n* Decimal -> float\n* datetime -> ISO string\n* ClientError -> dictionary\n* object with _to_dict_ function -> dictionary\n\n### Usage\n\n````python\nfrom eib_aws_utils.api import http_endpoint\n\n@http_endpoint(\"my_package_name\")\ndef my_handler(event, context):\n    pass\n````\n\n## Logging configuration\n\nThis library also manage the logging configuration.\n\nThe _configure_logging_ function will configure the standard logging package to use JSON format.\nIn addition, it get the _aws_request_id_ from the context to add it in every log.\nThis allow use to track every logs that belong to the same run.\n\nThe root level of logging will be set to _INFO_ and for the package gave in parameter\nit will use the level defined by the _LOGGING_LEVEL_ environment variable.\n\nThis function must be used at the beginning of the handler if you don't use one of the decorator.\nOtherwise the decorator manage the configuration for you.\n\n### Usage\n\n````python\nfrom eib_aws_utils.logging import configure_logging\n\ndef my_handler(event, context):\n    configure_logging(\"my_package_name\", context)\n````\n\n## DynamoDB Utils\n\n### Float compatible resource\n\nThe dynamoDB serializer can be changed to map Decimal values to float. And the reverse.\nBy patching the default serializer you can work with float for decimal values instead of Decimal.\n\nFor this you can patch yourself the serializer when you create your boto3 resource.\nOr you can use the _create_resource_with_float_serializer_ function to get the patched version of the resource.\n\n### Usage\nIf you patch the dynamo resource manually when you create it:\n````python\nimport boto3\nfrom unittest.mock import patch\nfrom eib_aws_utils.dynamo_utils import FloatSerializer, FloatDeserializer\n\nwith patch(\"boto3.dynamodb.types.TypeSerializer\", new=FloatSerializer), \\\n     patch(\"boto3.dynamodb.types.TypeDeserializer\", new=FloatDeserializer):\n    dynamodb = boto3.resource(\"dynamodb\")\n````\n\nOr get directly the patched version:\n````python\nfrom eib_aws_utils import dynamo_utils\n\ndynamodb = dynamo_utils.create_resource_with_float_serializer()\n````\n\n### Query all results page at once\n\nThe _query_all_items_ function will iterate over all results page of the query and give you all the items.\nYou need to provide the DynamoDB resource, the table name and then you can use all the arguments\navailable with the _query_ function of the DynamoDB Table.\n\n\n### Usage\n````python\nfrom eib_aws_utils import dynamo_utils\nfrom boto3.dynamodb.conditions import Key\n\nall_customer = dynamo_utils.query_all_items(\n   dynamodb_resource,\n   \"my-table-name\",\n    KeyConditionExpression=Key('partition_key').eq('123456'), ScanIndexForward=False, ...\n)\n````\n\n## Http Utils\n\nYou can create easily a requests session with the retry policy and \nAPI key authentication with the _create_requests_session_ function. \nYou can pass the API key in parameter. This key will be set in the _x-api-key_ header.\nYou can also provide other headers in the parameters or configure the exponential backoff.\n\n### Usage\n````python\nfrom eib_aws_utils import http_utils\n\n# The most simple session with authentication\nsession = http_utils.create_requests_session(api_gateway_key=\"MY-API-KEY\")\n\n# A more complex example\nsession = http_utils.create_requests_session(\n  headers={\"Accept\": \"application/json\"},\n  api_gateway_key=\"MY-API-KEY\",\n  max_retry=25,\n  backoff_factor=1.5\n)\n````\n\n\n# Change logs\n\n## 1.0.3\n\n* Fix dynamo _query_all_items_\n\n## 1.0.2\n\n* Fix dynamo patching\n\n## 1.0.1\n\n* Improve function wrapping in the decorators\n\n## 1.0.0\n\n### Breaking changes\n* Dynamo_serializer has been renamed to dynamo_utils.\n* The entry_point and http_endpoint decorator need the _main_module_name_ parameter.\n  And they configure the logging automatically.\n\n### New features\n* Creation of float compatible DynamoDB resource trough dynamo_utils module.\n* Query all result pages trough dynamo_utils module.\n* Get requests session with retry policy and api-key module.\n* Generate a context id if there is no aws_request_id in the logging context.\n\n## 0.0.3\n\n* Bug fixes\n\n## 0.0.2\n* Bug fixes\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.tools.digital.engie.com/TractebelHQImpulse/eib-aws-utils", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "eib-aws-utils", "package_url": "https://pypi.org/project/eib-aws-utils/", "platform": "", "project_url": "https://pypi.org/project/eib-aws-utils/", "project_urls": {"Homepage": "https://github.tools.digital.engie.com/TractebelHQImpulse/eib-aws-utils"}, "release_url": "https://pypi.org/project/eib-aws-utils/1.0.3/", "requires_dist": ["python-json-logger", "requests"], "requires_python": ">=3.6", "summary": "Helper used by Engie Impact Sustainability Solution EMEAI to develop services based on AWS", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>eib-aws-utils</h1>\n<p>Helper used by Engie Impact Sustainability Solution EMEAI to develop services based on AWS.</p>\n<p><strong>This package is in alpha version</strong></p>\n<h2>Background jobs</h2>\n<p>For lambdas and batch background job, meaning not exposed though API-Gateway, you can use\nthe <em>entry_point</em> decorator to manage the error handling and to configure the logging.\nThis decorator must be used only on the main handler.\nIt will:</p>\n<ul>\n<li>configure the standard logging package to use JSON format (<a href=\"#logging-configuration\" rel=\"nofollow\">see</a>).</li>\n<li>catch all exception and log them correctly.</li>\n</ul>\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eib_aws_utils.backgound_job</span> <span class=\"kn\">import</span> <span class=\"n\">entry_point</span>\n\n<span class=\"nd\">@entry_point</span><span class=\"p\">(</span><span class=\"s2\">\"my_package_name\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>API-Endpoints</h2>\n<p>Lambda exposing data behind API-Gateway can use the <em>http_endpoint</em> decorator.\nThis decorator manage the error handling, the logging configuration and the serialization of the output.</p>\n<h3>Error handling</h3>\n<p>There is two category of error.</p>\n<ul>\n<li>\n<p>The <em>BackendError</em> who are internal errors.\nMeaning errors occurring inside the application and don't have any link with the end users.\nFor example, missing data on an external source. These errors should be catch somewhere in the application.\nIf they are not catch then the decorator will log the error and return a <em>500 - Internal Server Error</em> to the end user.</p>\n</li>\n<li>\n<p>The <em>ClientError</em> are error that must be return to the end user.\nThey will be catch by the decorator and logged as warning.\nThe error will then be serialized and returned as a JSON.\nFor example, if the resource didn't exist you can raise a <em>NotFoundError</em>.</p>\n</li>\n</ul>\n<h3>Logging configuration</h3>\n<p>The decorator will use the <em>configure_logging</em> function to configure properly the logging.\nFor the details <a href=\"#logging-configuration\" rel=\"nofollow\">see the logging section</a>.</p>\n<h3>Serialization</h3>\n<p>The decorator also manage the serialisation of the lambda output to match the api-gateway format.\nYour function can return only the body or a tuple with the body and the http status code.</p>\n<p>The body can be an object or a dictionary. If it's an object then it must have a <em>to_dict()</em> function\nthat return a dictionary representation of the object.\nIf it's a dictionary then it will be serialized as a JSON string.\nIn addition to the python basic data types, the dictionary can contain the following types:</p>\n<ul>\n<li>Decimal -&gt; float</li>\n<li>datetime -&gt; ISO string</li>\n<li>ClientError -&gt; dictionary</li>\n<li>object with <em>to_dict</em> function -&gt; dictionary</li>\n</ul>\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eib_aws_utils.api</span> <span class=\"kn\">import</span> <span class=\"n\">http_endpoint</span>\n\n<span class=\"nd\">@http_endpoint</span><span class=\"p\">(</span><span class=\"s2\">\"my_package_name\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Logging configuration</h2>\n<p>This library also manage the logging configuration.</p>\n<p>The <em>configure_logging</em> function will configure the standard logging package to use JSON format.\nIn addition, it get the <em>aws_request_id</em> from the context to add it in every log.\nThis allow use to track every logs that belong to the same run.</p>\n<p>The root level of logging will be set to <em>INFO</em> and for the package gave in parameter\nit will use the level defined by the <em>LOGGING_LEVEL</em> environment variable.</p>\n<p>This function must be used at the beginning of the handler if you don't use one of the decorator.\nOtherwise the decorator manage the configuration for you.</p>\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eib_aws_utils.logging</span> <span class=\"kn\">import</span> <span class=\"n\">configure_logging</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">configure_logging</span><span class=\"p\">(</span><span class=\"s2\">\"my_package_name\"</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<h2>DynamoDB Utils</h2>\n<h3>Float compatible resource</h3>\n<p>The dynamoDB serializer can be changed to map Decimal values to float. And the reverse.\nBy patching the default serializer you can work with float for decimal values instead of Decimal.</p>\n<p>For this you can patch yourself the serializer when you create your boto3 resource.\nOr you can use the <em>create_resource_with_float_serializer</em> function to get the patched version of the resource.</p>\n<h3>Usage</h3>\n<p>If you patch the dynamo resource manually when you create it:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">unittest.mock</span> <span class=\"kn\">import</span> <span class=\"n\">patch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">eib_aws_utils.dynamo_utils</span> <span class=\"kn\">import</span> <span class=\"n\">FloatSerializer</span><span class=\"p\">,</span> <span class=\"n\">FloatDeserializer</span>\n\n<span class=\"k\">with</span> <span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s2\">\"boto3.dynamodb.types.TypeSerializer\"</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">FloatSerializer</span><span class=\"p\">),</span> \\\n     <span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s2\">\"boto3.dynamodb.types.TypeDeserializer\"</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">FloatDeserializer</span><span class=\"p\">):</span>\n    <span class=\"n\">dynamodb</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s2\">\"dynamodb\"</span><span class=\"p\">)</span>\n</pre>\n<p>Or get directly the patched version:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eib_aws_utils</span> <span class=\"kn\">import</span> <span class=\"n\">dynamo_utils</span>\n\n<span class=\"n\">dynamodb</span> <span class=\"o\">=</span> <span class=\"n\">dynamo_utils</span><span class=\"o\">.</span><span class=\"n\">create_resource_with_float_serializer</span><span class=\"p\">()</span>\n</pre>\n<h3>Query all results page at once</h3>\n<p>The <em>query_all_items</em> function will iterate over all results page of the query and give you all the items.\nYou need to provide the DynamoDB resource, the table name and then you can use all the arguments\navailable with the <em>query</em> function of the DynamoDB Table.</p>\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eib_aws_utils</span> <span class=\"kn\">import</span> <span class=\"n\">dynamo_utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">boto3.dynamodb.conditions</span> <span class=\"kn\">import</span> <span class=\"n\">Key</span>\n\n<span class=\"n\">all_customer</span> <span class=\"o\">=</span> <span class=\"n\">dynamo_utils</span><span class=\"o\">.</span><span class=\"n\">query_all_items</span><span class=\"p\">(</span>\n   <span class=\"n\">dynamodb_resource</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"my-table-name\"</span><span class=\"p\">,</span>\n    <span class=\"n\">KeyConditionExpression</span><span class=\"o\">=</span><span class=\"n\">Key</span><span class=\"p\">(</span><span class=\"s1\">'partition_key'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"s1\">'123456'</span><span class=\"p\">),</span> <span class=\"n\">ScanIndexForward</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Http Utils</h2>\n<p>You can create easily a requests session with the retry policy and\nAPI key authentication with the <em>create_requests_session</em> function.\nYou can pass the API key in parameter. This key will be set in the <em>x-api-key</em> header.\nYou can also provide other headers in the parameters or configure the exponential backoff.</p>\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eib_aws_utils</span> <span class=\"kn\">import</span> <span class=\"n\">http_utils</span>\n\n<span class=\"c1\"># The most simple session with authentication</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">http_utils</span><span class=\"o\">.</span><span class=\"n\">create_requests_session</span><span class=\"p\">(</span><span class=\"n\">api_gateway_key</span><span class=\"o\">=</span><span class=\"s2\">\"MY-API-KEY\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># A more complex example</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">http_utils</span><span class=\"o\">.</span><span class=\"n\">create_requests_session</span><span class=\"p\">(</span>\n  <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"Accept\"</span><span class=\"p\">:</span> <span class=\"s2\">\"application/json\"</span><span class=\"p\">},</span>\n  <span class=\"n\">api_gateway_key</span><span class=\"o\">=</span><span class=\"s2\">\"MY-API-KEY\"</span><span class=\"p\">,</span>\n  <span class=\"n\">max_retry</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n  <span class=\"n\">backoff_factor</span><span class=\"o\">=</span><span class=\"mf\">1.5</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>Change logs</h1>\n<h2>1.0.3</h2>\n<ul>\n<li>Fix dynamo <em>query_all_items</em></li>\n</ul>\n<h2>1.0.2</h2>\n<ul>\n<li>Fix dynamo patching</li>\n</ul>\n<h2>1.0.1</h2>\n<ul>\n<li>Improve function wrapping in the decorators</li>\n</ul>\n<h2>1.0.0</h2>\n<h3>Breaking changes</h3>\n<ul>\n<li>Dynamo_serializer has been renamed to dynamo_utils.</li>\n<li>The entry_point and http_endpoint decorator need the <em>main_module_name</em> parameter.\nAnd they configure the logging automatically.</li>\n</ul>\n<h3>New features</h3>\n<ul>\n<li>Creation of float compatible DynamoDB resource trough dynamo_utils module.</li>\n<li>Query all result pages trough dynamo_utils module.</li>\n<li>Get requests session with retry policy and api-key module.</li>\n<li>Generate a context id if there is no aws_request_id in the logging context.</li>\n</ul>\n<h2>0.0.3</h2>\n<ul>\n<li>Bug fixes</li>\n</ul>\n<h2>0.0.2</h2>\n<ul>\n<li>Bug fixes</li>\n</ul>\n\n          </div>"}, "last_serial": 7090759, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "30402cfc5ed088410401d9b09ea8fc47", "sha256": "84ff1f7cf4a9234e0b51b46d1272bc6ac4c65fc08f9fca1356c6bd779b1aba77"}, "downloads": -1, "filename": "eib_aws_utils-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "30402cfc5ed088410401d9b09ea8fc47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5529, "upload_time": "2020-03-17T15:08:45", "upload_time_iso_8601": "2020-03-17T15:08:45.376587Z", "url": "https://files.pythonhosted.org/packages/e9/5e/c5f8f6b88d857d9cdaa1b4416d6b737bd10a6e79bd50ddd57246f0d1b6c3/eib_aws_utils-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08a3088259d62d9ed68c3209473fbfa2", "sha256": "9387339e05d77bfbd9c2b5fac13079333b1798fbf59b53bdea4f15c3d3790760"}, "downloads": -1, "filename": "eib-aws-utils-0.0.1.tar.gz", "has_sig": false, "md5_digest": "08a3088259d62d9ed68c3209473fbfa2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3246, "upload_time": "2020-03-17T15:08:47", "upload_time_iso_8601": "2020-03-17T15:08:47.382370Z", "url": "https://files.pythonhosted.org/packages/6e/37/9ba9b1278fe4c73aa5057825f461d4cc99067dc730f668139f38f62bad18/eib-aws-utils-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bc67629e5ef9794b9554bc52fe39525b", "sha256": "6f771d057a768c00194683f78870ae249248e6a503ecdd0a6a50c6e5ec2be56c"}, "downloads": -1, "filename": "eib_aws_utils-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bc67629e5ef9794b9554bc52fe39525b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5510, "upload_time": "2020-03-17T15:36:47", "upload_time_iso_8601": "2020-03-17T15:36:47.045453Z", "url": "https://files.pythonhosted.org/packages/30/21/5611cd3ce13546d9b0ea39f066ab79b702c6424178af85ec5da853c38ea1/eib_aws_utils-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c111d96a74295c6d8cbb05d8156f85ee", "sha256": "77233b6266e0505ddb55ea5eab343674c2c30b0ae1155f20a46734f05d7aeca8"}, "downloads": -1, "filename": "eib-aws-utils-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c111d96a74295c6d8cbb05d8156f85ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3230, "upload_time": "2020-03-17T15:36:48", "upload_time_iso_8601": "2020-03-17T15:36:48.273728Z", "url": "https://files.pythonhosted.org/packages/d9/23/7dc73e14ea14765585b7660d59fa8da85e01408f13174e05e4caa1ee0381/eib-aws-utils-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "619b3b8e7430636767668679307dc86b", "sha256": "532017ae80cfb01e54d1c43cbeedd481bb2705769d11e4499ae44556cfda2ab6"}, "downloads": -1, "filename": "eib_aws_utils-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "619b3b8e7430636767668679307dc86b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5514, "upload_time": "2020-03-17T15:50:23", "upload_time_iso_8601": "2020-03-17T15:50:23.404120Z", "url": "https://files.pythonhosted.org/packages/f4/0c/268cc4f11a84ad6843c8fed19e4dbe5a2cfdcfc9b6b316a83d3ffa3220fd/eib_aws_utils-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "359da26e0c150ad0a549cf7e907d2927", "sha256": "a30e929c97d9d31d49f27ba14c7a281551c2ed6c077f2da7615df308e823359e"}, "downloads": -1, "filename": "eib-aws-utils-0.0.3.tar.gz", "has_sig": false, "md5_digest": "359da26e0c150ad0a549cf7e907d2927", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3235, "upload_time": "2020-03-17T15:50:24", "upload_time_iso_8601": "2020-03-17T15:50:24.311021Z", "url": "https://files.pythonhosted.org/packages/6f/59/3cb02505fa7eed0d96ea19608c41d77f1547048b0091adbd7d693229f628/eib-aws-utils-0.0.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "0d611815630ba4a88fa1e42cbe57b9d8", "sha256": "c3b270460a94fb557454172af4e77bb358dfa3030aef47ac0ab074722cee8001"}, "downloads": -1, "filename": "eib_aws_utils-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0d611815630ba4a88fa1e42cbe57b9d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10581, "upload_time": "2020-04-16T09:11:07", "upload_time_iso_8601": "2020-04-16T09:11:07.214293Z", "url": "https://files.pythonhosted.org/packages/08/92/4ed64bb70b5719cffe37754fa54c64e73883286b22eabc47e576d012c45e/eib_aws_utils-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9046649493e03e3443fafc53e0a72c17", "sha256": "fe545b361d71130fefc93f0baed6988e35c8d8e41bba330ab28d4970e78bd1ac"}, "downloads": -1, "filename": "eib-aws-utils-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9046649493e03e3443fafc53e0a72c17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7406, "upload_time": "2020-04-16T09:11:09", "upload_time_iso_8601": "2020-04-16T09:11:09.470928Z", "url": "https://files.pythonhosted.org/packages/29/f0/c32b46f91a9e33d778cd363786448e1ba33b5b958dde04c0ae035f161744/eib-aws-utils-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "17608bc7574b3f9cb0dfdacee8f6f08f", "sha256": "4a7f590db57d1fe4a4c7bc35ac6df95e5d3361b6c06f3f1a5c895d5260133a97"}, "downloads": -1, "filename": "eib_aws_utils-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17608bc7574b3f9cb0dfdacee8f6f08f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10658, "upload_time": "2020-04-16T09:30:19", "upload_time_iso_8601": "2020-04-16T09:30:19.288244Z", "url": "https://files.pythonhosted.org/packages/5f/f7/f265b126195eb7ffed65d4bd1b3b629b290bbb85cd1c484a0aa1755efb1f/eib_aws_utils-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a9f389951070e28878a2e3f71ccaf01", "sha256": "8b081dee0e3e3e522fdf7e0c48b0886348559c7790fe09947fcc7463f2142fa0"}, "downloads": -1, "filename": "eib-aws-utils-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6a9f389951070e28878a2e3f71ccaf01", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7455, "upload_time": "2020-04-16T09:30:20", "upload_time_iso_8601": "2020-04-16T09:30:20.374572Z", "url": "https://files.pythonhosted.org/packages/3b/56/7ef4b3e580e7e9be4ae748b7c75c746b003412b9fe0ee7a142740ca9d91e/eib-aws-utils-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "54604e5bb49a90e249d6e9c33a451f19", "sha256": "509653200bdd60d6d1d7d8475f0db838e0ddbe38fafa2f3b43e086c1b362d0a8"}, "downloads": -1, "filename": "eib_aws_utils-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "54604e5bb49a90e249d6e9c33a451f19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10666, "upload_time": "2020-04-16T12:58:48", "upload_time_iso_8601": "2020-04-16T12:58:48.360533Z", "url": "https://files.pythonhosted.org/packages/b4/c0/297cd6de251559c44bb31abe56a8218a2561b75379efc7f5be4e007d268c/eib_aws_utils-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e65fc86308c2a1a347851f1b1532863a", "sha256": "3ba341b32898fa152e70154d83e3a03072fbb694e3c30bada4ca8d394d97ee95"}, "downloads": -1, "filename": "eib-aws-utils-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e65fc86308c2a1a347851f1b1532863a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7461, "upload_time": "2020-04-16T12:58:49", "upload_time_iso_8601": "2020-04-16T12:58:49.358374Z", "url": "https://files.pythonhosted.org/packages/4c/d0/94e428fe0e551f90188f65bffb2e59556ef8274bcec1dec93dd379dfa9a6/eib-aws-utils-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "f435b4bdefdfd26a55661d73ff5be843", "sha256": "2ea55f82f9ed89deb2f802090184220c4b5f2cdf3ecb9500427a41a690161b34"}, "downloads": -1, "filename": "eib_aws_utils-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f435b4bdefdfd26a55661d73ff5be843", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10667, "upload_time": "2020-04-24T08:10:33", "upload_time_iso_8601": "2020-04-24T08:10:33.344341Z", "url": "https://files.pythonhosted.org/packages/dd/53/b919ba1a69a667b11d2e6108e89ffd2a5966acedee4565ff04e987e4151a/eib_aws_utils-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25990db523e30b0898bd4b9257c741bd", "sha256": "b11949ad10ed0bcdb2bc562c405d72db03392264821270b97854337b976dcc92"}, "downloads": -1, "filename": "eib-aws-utils-1.0.3.tar.gz", "has_sig": false, "md5_digest": "25990db523e30b0898bd4b9257c741bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7462, "upload_time": "2020-04-24T08:10:34", "upload_time_iso_8601": "2020-04-24T08:10:34.391644Z", "url": "https://files.pythonhosted.org/packages/5c/3a/ab0a05faa7a253d50e50bdaf5dce8a26f0e0d80f6a18d66b48e4b9853aeb/eib-aws-utils-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f435b4bdefdfd26a55661d73ff5be843", "sha256": "2ea55f82f9ed89deb2f802090184220c4b5f2cdf3ecb9500427a41a690161b34"}, "downloads": -1, "filename": "eib_aws_utils-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f435b4bdefdfd26a55661d73ff5be843", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10667, "upload_time": "2020-04-24T08:10:33", "upload_time_iso_8601": "2020-04-24T08:10:33.344341Z", "url": "https://files.pythonhosted.org/packages/dd/53/b919ba1a69a667b11d2e6108e89ffd2a5966acedee4565ff04e987e4151a/eib_aws_utils-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25990db523e30b0898bd4b9257c741bd", "sha256": "b11949ad10ed0bcdb2bc562c405d72db03392264821270b97854337b976dcc92"}, "downloads": -1, "filename": "eib-aws-utils-1.0.3.tar.gz", "has_sig": false, "md5_digest": "25990db523e30b0898bd4b9257c741bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7462, "upload_time": "2020-04-24T08:10:34", "upload_time_iso_8601": "2020-04-24T08:10:34.391644Z", "url": "https://files.pythonhosted.org/packages/5c/3a/ab0a05faa7a253d50e50bdaf5dce8a26f0e0d80f6a18d66b48e4b9853aeb/eib-aws-utils-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:15 2020"}