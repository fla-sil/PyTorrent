{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.com/johntmyers/falcon-rpc.png?branch=master)](https://travis-ci.com/johntmyers/falcon-rpc)\n\n\n# Falcon RPC\n\n## Background\n\nA wrapper that utilizes the [Falcon Framework](https://falconframework.org/) to create a HTTP RPC API.\n\nThe motivation for this API is the [Slack Web API](https://api.slack.com/web). \n\n*NOTE*: I suggest being familiar with Falcon and Slack's APIs on your own, first.\n\nI found myself creating lots of APIs for various projects and realized that RESTful APIs are not really useful for the type of stuff I work on.  While there is a certain degree of CRUD operations I usually need to do, a lot of the \"resources\" I created were for kicking of backend processing jobs, running async analytic workloads, executing complex queries, etc.\n\nMost of the things I do just don't fit into REST. Frankly, instead of \"bending\" REST to fit my will I found API's like Slack that seemed perfect for being flexible enough to fit any use case. However, while I was bending REST for my bidding I became really fond of the Falcon Framework. I 100% understand Falcon is designed for REST but guess what, I can do whatever I want so here we are. \n\n## Quickstart\n\nClone the repo and install.\n\n```\ncd falcon_rpc\npip install -I .\n``` \n\n```python\nimport falcon_rpc\n\n\nclass Test:\n    \"\"\"``test`` method family \"\"\"\n\n    def ok(self, req):\n        # /test.ok\n        req.resp_body = {'foo': 'bar'}\n\n    def error(self, req):\n        # /test.error\n        # can raise an error at anytime\n        raise falcon_rpc.RPCError('dummy_error_code')\n\n    def fatal(self, req):\n        # /test.fatal\n        not_a_dict = 1\n        not_a_dict['nope'] = 2  # pylint: disable=unsupported-assignment-operation  # noqa\n\n    def echo(self, req):\n        # /test.echo\n        req.resp_body = {'you_sent': req.params}\n\n    def warn(self, req):\n        # /test.warn\n        req.resp_body = {'data': 'mostly good'}\n        # setting a warning even though the request was handled\n        req.set_warning('some_warning')\n\n\nclass Another:\n\n    def show_me(self, req):\n        # req.req is the original Falcon Request object\n        req.resp_body = {'hello_there': req.req.remote_addr}\n\n\ndef start():\n    rpc = falcon_rpc.RPC()\n    rpc.add_family(Test())\n    rpc.add_family(Another())\n    return rpc()\n```\n\nThis can be launched just like you would Falcon:\n\n```\n$ gunicorn -b :8000 \"app:start()\" --workers 2 --log-level DEBUG --reload\n```\n\n## Method Families and Methods\n\nInstead of adding routes to your API, you add method families, which are Python classes here.\n\nYour API follows the `/METHOD_FAMILY.method` structure like Slack and the name of your Python class corresponds to the method family, and methods of that class are utilized as the actual method being called.\n\nIt is important to note that method family names are case insensitive, they will always be cast to lowercase.\n\nMethod names are case sensitive.\n\n### Method Handlers\n\nMethod handlers take one arg, an instance of `RPCRequest`.\n\nThe `resp_body` attribute of this object can be set with your response data.\n\nLike Slack, if your request could be processed, but you need to add a warning, you can do so by using the `set_warning` method.\n\n## Tests\n\n```\n$ pip install -r test-requirements.txt\n$ pytest -s -vv --cov falcon_rpc --cov-report=term-missing tests/\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "falcon-rpc", "package_url": "https://pypi.org/project/falcon-rpc/", "platform": "", "project_url": "https://pypi.org/project/falcon-rpc/", "project_urls": null, "release_url": "https://pypi.org/project/falcon-rpc/0.5.0/", "requires_dist": ["falcon (==2.0.0)", "falcon-cors"], "requires_python": "", "summary": "RPC API based on the Falcon Framework", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/johntmyers/falcon-rpc\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/def9525bc128f74d0a31ecc40c2470359edd9375/68747470733a2f2f7472617669732d63692e636f6d2f6a6f686e746d796572732f66616c636f6e2d7270632e706e673f6272616e63683d6d6173746572\"></a></p>\n<h1>Falcon RPC</h1>\n<h2>Background</h2>\n<p>A wrapper that utilizes the <a href=\"https://falconframework.org/\" rel=\"nofollow\">Falcon Framework</a> to create a HTTP RPC API.</p>\n<p>The motivation for this API is the <a href=\"https://api.slack.com/web\" rel=\"nofollow\">Slack Web API</a>.</p>\n<p><em>NOTE</em>: I suggest being familiar with Falcon and Slack's APIs on your own, first.</p>\n<p>I found myself creating lots of APIs for various projects and realized that RESTful APIs are not really useful for the type of stuff I work on.  While there is a certain degree of CRUD operations I usually need to do, a lot of the \"resources\" I created were for kicking of backend processing jobs, running async analytic workloads, executing complex queries, etc.</p>\n<p>Most of the things I do just don't fit into REST. Frankly, instead of \"bending\" REST to fit my will I found API's like Slack that seemed perfect for being flexible enough to fit any use case. However, while I was bending REST for my bidding I became really fond of the Falcon Framework. I 100% understand Falcon is designed for REST but guess what, I can do whatever I want so here we are.</p>\n<h2>Quickstart</h2>\n<p>Clone the repo and install.</p>\n<pre><code>cd falcon_rpc\npip install -I .\n</code></pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">falcon_rpc</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Test</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"``test`` method family \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">):</span>\n        <span class=\"c1\"># /test.ok</span>\n        <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">resp_body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">):</span>\n        <span class=\"c1\"># /test.error</span>\n        <span class=\"c1\"># can raise an error at anytime</span>\n        <span class=\"k\">raise</span> <span class=\"n\">falcon_rpc</span><span class=\"o\">.</span><span class=\"n\">RPCError</span><span class=\"p\">(</span><span class=\"s1\">'dummy_error_code'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fatal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">):</span>\n        <span class=\"c1\"># /test.fatal</span>\n        <span class=\"n\">not_a_dict</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">not_a_dict</span><span class=\"p\">[</span><span class=\"s1\">'nope'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>  <span class=\"c1\"># pylint: disable=unsupported-assignment-operation  # noqa</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">):</span>\n        <span class=\"c1\"># /test.echo</span>\n        <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">resp_body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'you_sent'</span><span class=\"p\">:</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">warn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">):</span>\n        <span class=\"c1\"># /test.warn</span>\n        <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">resp_body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"s1\">'mostly good'</span><span class=\"p\">}</span>\n        <span class=\"c1\"># setting a warning even though the request was handled</span>\n        <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">set_warning</span><span class=\"p\">(</span><span class=\"s1\">'some_warning'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Another</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">show_me</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">):</span>\n        <span class=\"c1\"># req.req is the original Falcon Request object</span>\n        <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">resp_body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'hello_there'</span><span class=\"p\">:</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">remote_addr</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">():</span>\n    <span class=\"n\">rpc</span> <span class=\"o\">=</span> <span class=\"n\">falcon_rpc</span><span class=\"o\">.</span><span class=\"n\">RPC</span><span class=\"p\">()</span>\n    <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">add_family</span><span class=\"p\">(</span><span class=\"n\">Test</span><span class=\"p\">())</span>\n    <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">add_family</span><span class=\"p\">(</span><span class=\"n\">Another</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">rpc</span><span class=\"p\">()</span>\n</pre>\n<p>This can be launched just like you would Falcon:</p>\n<pre><code>$ gunicorn -b :8000 \"app:start()\" --workers 2 --log-level DEBUG --reload\n</code></pre>\n<h2>Method Families and Methods</h2>\n<p>Instead of adding routes to your API, you add method families, which are Python classes here.</p>\n<p>Your API follows the <code>/METHOD_FAMILY.method</code> structure like Slack and the name of your Python class corresponds to the method family, and methods of that class are utilized as the actual method being called.</p>\n<p>It is important to note that method family names are case insensitive, they will always be cast to lowercase.</p>\n<p>Method names are case sensitive.</p>\n<h3>Method Handlers</h3>\n<p>Method handlers take one arg, an instance of <code>RPCRequest</code>.</p>\n<p>The <code>resp_body</code> attribute of this object can be set with your response data.</p>\n<p>Like Slack, if your request could be processed, but you need to add a warning, you can do so by using the <code>set_warning</code> method.</p>\n<h2>Tests</h2>\n<pre><code>$ pip install -r test-requirements.txt\n$ pytest -s -vv --cov falcon_rpc --cov-report=term-missing tests/\n</code></pre>\n\n          </div>"}, "last_serial": 5600932, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "740a2ab6c40a32394567dc155421b156", "sha256": "89bcf50eca928daa9a8bcecbdcc7f23f689773219cc4d3251dc1f17785b55182"}, "downloads": -1, "filename": "falcon_rpc-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "740a2ab6c40a32394567dc155421b156", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10441, "upload_time": "2019-07-14T17:08:34", "upload_time_iso_8601": "2019-07-14T17:08:34.178728Z", "url": "https://files.pythonhosted.org/packages/8e/89/46f6016b61a3076ce4eff42b95b1463b587120efd3837f44ccc5d1ede964/falcon_rpc-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26b39607bb2e4452a717ef6d1e5d2440", "sha256": "8f6c0f30ceece135ec87e9aabbb349e65e6eae2895a4dc0d276e7cfb90c7bce4"}, "downloads": -1, "filename": "falcon-rpc-0.4.0.tar.gz", "has_sig": false, "md5_digest": "26b39607bb2e4452a717ef6d1e5d2440", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5653, "upload_time": "2019-07-14T17:06:08", "upload_time_iso_8601": "2019-07-14T17:06:08.698842Z", "url": "https://files.pythonhosted.org/packages/da/4b/dbc928e26bc860d7d12a5036b1259ae32453fad6dab1fe943f84b0292ec9/falcon-rpc-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "51a92658472f8bbc54e3a42bc7183aca", "sha256": "75a51a6fa9043425117985b8e179bcc5d69a788cfd973d5d5cf7ec01e41fe924"}, "downloads": -1, "filename": "falcon_rpc-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "51a92658472f8bbc54e3a42bc7183aca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10472, "upload_time": "2019-07-29T18:02:09", "upload_time_iso_8601": "2019-07-29T18:02:09.314609Z", "url": "https://files.pythonhosted.org/packages/d0/70/e8fd8b3b928232f06addc1f6e81d66102b830eef404ec224ebec74b9e6bb/falcon_rpc-0.5.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51a92658472f8bbc54e3a42bc7183aca", "sha256": "75a51a6fa9043425117985b8e179bcc5d69a788cfd973d5d5cf7ec01e41fe924"}, "downloads": -1, "filename": "falcon_rpc-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "51a92658472f8bbc54e3a42bc7183aca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10472, "upload_time": "2019-07-29T18:02:09", "upload_time_iso_8601": "2019-07-29T18:02:09.314609Z", "url": "https://files.pythonhosted.org/packages/d0/70/e8fd8b3b928232f06addc1f6e81d66102b830eef404ec224ebec74b9e6bb/falcon_rpc-0.5.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:43:51 2020"}