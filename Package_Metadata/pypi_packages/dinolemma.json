{"info": {"author": "Vanessa Sochat", "author_email": "vsochat@stanford.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: Unix", "Programming Language :: C", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "# Dinosaur Dilemma\n\n[![PyPI version](https://badge.fury.io/py/dinolemma.svg)](https://pypi.org/project/dinolemma/)\n[![GitHub actions status](https://github.com/vsoch/dinosaur-dilemma/workflows/ci/badge.svg?branch=master)](https://github.com/vsoch/dinosaur-dilemma/actions?query=branch%3Amaster+workflow%3Aci)\n\n![https://raw.githubusercontent.com/vsoch/dinosaur-dilemma/master/img/dinosaur-dilemma.png](https://raw.githubusercontent.com/vsoch/dinosaur-dilemma/master/img/dinosaur-dilemma.png)\n\nThis is the dinosaur dilemma, my first attempt at a simulation. It will involve\ncharacters, interactions, and variables that control those interactions.\nThe characters will interact in a basic world and at the end, we will be\ninterested to know how they turned out (evolved). You can see a verbose\nsimulation run <a href=\"https://asciinema.org/a/293693\" target=\"_blank\"><img src=\"https://asciinema.org/a/293693.svg\" />here</a>,\nor a less verbose run below:\n\n[![asciicast](https://asciinema.org/a/293703.svg)](https://asciinema.org/a/293703)\n\n## Usage\n\n### Install\n\nYou can install from pip, or directly from the repository here.\n\n```bash\npip install dinolemma\n```\nor\n\n```bash\ngit clone https://github.com/vsoch/dinosaur-dilemma\ncd dinosaur-dilemma\npython setup.py install\n```\n\nIf you want to use the GUI you will need pygame. Any of the following will work.\n\n```bash\npip install .[game]\npip install dinolemma[game]\npip install pygame\n```\n\n### Command\n\nYou can run a text simulation (with defaults) from the command line:\n\n```bash\n$ dinolemma run\nToday is day 80 in the winter season.\nThere are 5 dinosaurs, and 13 avocado trees.\nThe temperate is 12\u00b0F, humidity 0.33\n```\n\nor a (more fun) graphical simulation (press enter to cycle through days):\n\n```bash\ndinolemma gui\n```\n\nThe gui takes the same input parameters as the run.\n\n```bash\ndinolemma gui --help\nusage: dinolemma gui [-h] [--ndinos NDINOS] [--ntrees NTREES]\n                     [--grid_size GRID_SIZE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --ndinos NDINOS       the number of dinosaurs to simulate.\n  --ntrees NTREES       the number of avocado trees to simulate.\n  --grid_size GRID_SIZE\n                        the size of the square grid, in units (one dimension).\n```\n\nIf you want a more interesting simulation, try adding a lot more dinosaurs\nor trees!\n\n```bash\ndinolemma gui --ndinos 100 --ntrees 30\n```\n\nWhat you'll likely see given those ratios are that the dinosaurs (purple) eat one another \n(or starve) and then the trees (green) grow to take up the game board.\n\n### Python\n\nYou can run a simulation from within Python, either using the defaults:\n\n```\nfrom dinolemma.game import DinosaurDilemma                              \n\nsimulation = DinosaurDilemma()                                          \nToday is day 13 in the summer season.\nThere are 1 dinosaurs, and 14 avocado trees.\nThe temperate is 59\u00b0F, humidity 0.43\n```\n\nor by setting any of the variables (number of dinosaurs or trees, size of grid, etc.)\n\n## Development\n\nThe way that I'm thinking about this project is in stages. \n\n### Stage 1: Stateful\n\n#### 1. Environment\n\nThe first thing to design is the environment, meaning a stateful base that has a set of variables (e.g., temperature, humidity) that will vary\non some regular increment and then influence the entities that live in it downstream. For example, a base environment might \nbe defined by a season and day that leads to a particular temperature that has downstream influences on the organisms that live\nin it. If my environment has a function to cycle through a unit (e.g., a day) then I can update it's state, and\nthen update the entities in it depending on the new state.\n\n#### 2. Entities\n\nOnce the environment is defined, the next level of stateful objects must be defined, the entities that live within\nthe environment. The entities should first update themselves based on the changed environment, and then interact.\nInteraction comes down to each entity changing location on some grid, and if the location is in the vicinity\nof another organism, then the interaction occurs. I thought about whether I wanted all entities to move (and then \ninteract) versus allowing them to interact as they move, and I chose the latter. The reason is because\nwe would allow for multiple interactions for any given entity in one turn, and that's more interesting.\nTo be fair, I have to ensure that the order of movement is randomized. And notably, avocado trees cannot\nmove.\n\n#### 3. Interactions\n\nEvery entity must have defined rules for interaction with other entities. When all entities\nin the simulation change location, those that are within some vicinity of one another\nare allowed to interact. Interaction can further influence the state of the entity,\nor even lead to creation or destruction of said entity.\n\nAt the end of the design of stage 1, we will have developed essentially a text based, stateful simulation.\nWe will be able to run it with some set of starting conditions, and then observe the interactions\nover a particular number of time steps (days) and some final outcome.\n\n### Stage 2: Graphical\n\nOnce the stateful simulation is designed, we should strive to visualize it. This\nmeans (possibly) re-implementation in a browser based language that can render\nobjects on a canvas or via the dom (d3.js). We would want to be able to run\nthe same text based simulation, and watch it.\n\n### Stage 3: Live\n\nThe stateful approach works for early design, but what we would really want is essentially\na bunch of entities that are co-existing in an environment, and then reacting to one another.\nI think we could try to emulate this with something that looks more like a bunch of\nobjects that can emit and subscribe to one another's events, and then know how to\nrespond.\n\n\n## Characters\n\n### Dinosaurs\n\nDinosaurs are the main character in this world, and we initialize the world\nwith some number. Specifically, a dinosaur wanders around and has the following\nattributes:\n\n - **hunger**: each dinosaur is hungry, and gets more hungry as the simulation progresses. If the dinosaur enconuters a ripe avocado, he will eat it and the hunger subside. Each dinosaur has a slightly different threshold for deciding to eat.\n - **size**: each dinosaur has a randomly set size. A larger dinosaur is obviously requiring more food than a smaller one, and a larger one is also advantaged to be able to eat a smaller dinosaur, if desperate.\n - **disease**: if a dinosaur is hungry and eats an avocado or another dinosaur with a disease, he can get sick. A sick dinosaur moves less, and thus has a greater chance of dying due to hunger or even being eaten by another dinosaur.\n - **gender**: A dinosaur has a 45% change of being male or female, and a 10% chance of being a hybrid, which can reproduce without a mate. Only mature dinosaurs (greater than or equal to 80% of their full adult size) can reproduce, and with every interaction, there is only some small percentage of it.\n\nThe dinosaur has the following actions:\n\n - **move**: for each turn of the game, the dinosaur moves, and then interacts with whatever he finds in his new spot.\n - **eat**: a dinosaur can choose to eat an avocado, or even another dinosaur, depending on the size and level of hunger.\n - **sleep** a dinosaur can choose to sleep (with some probability) if he is sick to increase the chance of getting better.\n - **reproduce** a dinosaur that encounters another dinosaur (mature of the opposite gender) has some percent change of reproduction.\n\n### Avocados\n\nAvocados are grown on trees that are scattered in the environment. For any given tree, it must be a certain age to produce avocados, and once it's old enough, it can only generate a certain number of avocados over a period of time. This gives us the following attributes:\n\n - **mature**: a mature tree cannot be eaten by a dinosaur, and can produce avocados. An immature tree can be eaten entirely and removed from the game.\n - **avocados**: once a tree is mature, it holds a certain number of avocados\n - **disease**: any tree can get a disease with a small probability. Getting a disease puts the tree at risk for dying, or getting a dinosaur sick.\n\n## Variables\n\nFor each of the scenarios above, there must be probabilities generated within some range (set when the game starts) and then allocated to randomly generated entities, which are also randomly placed on a game board of some size.\n\n### Dinosaurs\n\nThe game starts with a certain number of dinosaurs (number of total dinosaurs), with the following randomly set values (within some ranges):\n\n - size\n - hunger\n\nThe game itself (an instance of DinosaurDilemma) under [dinolemma/game.py](dinolemma/game.py) creates\nsome number of dinosaurs in the following way:\n\n```python\nfrom dinolemma.dinosaurs import Dinosaurs\n\ndinosaurs = Dinosaurs()\n\ndinosaurs\n[14 dinosaurs]\n\nfor dino in dinosaurs: \n    print(dino.name) \n\npersnickety-muffinpodus\nloopy-tacopodus\ngassy-poodledocus\nfrigid-nalgasasaurus\nhanky-dogdocus\ndirty-blackbeanpodus\nastute-truffleus\nloopy-knifeus\nchocolate-noodleisaurus\npsycho-chipiraptor\nmuffled-lizardus\nstinky-underoosdocus\nrainbow-cattywampusisaurus\nbuttery-saladiraptor\n```\n\nEach is guaranteed to have a unique name, and we check that there are enough\nspaces on the game board to support the dinosaurs and trees created. We\ncan also grab a random dinosaur:\n\n```python\ndino = dinosaurs.random()\ndino.name\n'bricky-eagleraptor'\n```\n\n### Avocados\nThe game also starts with a certain number of avocado saplings.\n\n```python\nfrom dinolemma.avocados import AvocadoTrees\n\ntrees = AvocadoTrees()\nfor tree in trees:\n    print(tree.name)\n\nhanky-egg-tree\ngoodbye-poo-tree\nreclusive-sundae-tree\nmuffled-squidward-tree\n```\n\nor grab a random tree:\n\n```python\ntree = trees.random()\ntree\n<dinolemma.avocados.AvocadoTree at 0x7f25347e7860>\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/vsoch/dinosaur-dilemma", "keywords": "simulation,dinosaur,avocados,pygame", "license": "LICENSE", "maintainer": "Vanessa Sochat", "maintainer_email": "vsochat@stanford.edu", "name": "dinolemma", "package_url": "https://pypi.org/project/dinolemma/", "platform": "", "project_url": "https://pypi.org/project/dinolemma/", "project_urls": {"Homepage": "http://www.github.com/vsoch/dinosaur-dilemma"}, "release_url": "https://pypi.org/project/dinolemma/0.0.12/", "requires_dist": null, "requires_python": "", "summary": "Simulate evolution of dinosaurs and avocado trees", "version": "0.0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dinosaur Dilemma</h1>\n<p><a href=\"https://pypi.org/project/dinolemma/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f20333008ec4541178990a9a7b4daf8f6fa8fd70/68747470733a2f2f62616467652e667572792e696f2f70792f64696e6f6c656d6d612e737667\"></a>\n<a href=\"https://github.com/vsoch/dinosaur-dilemma/actions?query=branch%3Amaster+workflow%3Aci\" rel=\"nofollow\"><img alt=\"GitHub actions status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a42af732ea631734ff18ac77f5eda4d9482e399/68747470733a2f2f6769746875622e636f6d2f76736f63682f64696e6f736175722d64696c656d6d612f776f726b666c6f77732f63692f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><img alt=\"https://raw.githubusercontent.com/vsoch/dinosaur-dilemma/master/img/dinosaur-dilemma.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88decbe545eeb21fbbe8f1aeefca6e9a3ee8c248/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76736f63682f64696e6f736175722d64696c656d6d612f6d61737465722f696d672f64696e6f736175722d64696c656d6d612e706e67\"></p>\n<p>This is the dinosaur dilemma, my first attempt at a simulation. It will involve\ncharacters, interactions, and variables that control those interactions.\nThe characters will interact in a basic world and at the end, we will be\ninterested to know how they turned out (evolved). You can see a verbose\nsimulation run <a href=\"https://asciinema.org/a/293693\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab10a626f6e584437225b209a91eb98f7d32e670/68747470733a2f2f61736369696e656d612e6f72672f612f3239333639332e737667\">here</a>,\nor a less verbose run below:</p>\n<p><a href=\"https://asciinema.org/a/293703\" rel=\"nofollow\"><img alt=\"asciicast\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9da41467783321327a52ded83b7d36f8741c110f/68747470733a2f2f61736369696e656d612e6f72672f612f3239333730332e737667\"></a></p>\n<h2>Usage</h2>\n<h3>Install</h3>\n<p>You can install from pip, or directly from the repository here.</p>\n<pre>pip install dinolemma\n</pre>\n<p>or</p>\n<pre>git clone https://github.com/vsoch/dinosaur-dilemma\n<span class=\"nb\">cd</span> dinosaur-dilemma\npython setup.py install\n</pre>\n<p>If you want to use the GUI you will need pygame. Any of the following will work.</p>\n<pre>pip install .<span class=\"o\">[</span>game<span class=\"o\">]</span>\npip install dinolemma<span class=\"o\">[</span>game<span class=\"o\">]</span>\npip install pygame\n</pre>\n<h3>Command</h3>\n<p>You can run a text simulation (with defaults) from the command line:</p>\n<pre>$ dinolemma run\nToday is day <span class=\"m\">80</span> in the winter season.\nThere are <span class=\"m\">5</span> dinosaurs, and <span class=\"m\">13</span> avocado trees.\nThe temperate is <span class=\"m\">12</span>\u00b0F, humidity <span class=\"m\">0</span>.33\n</pre>\n<p>or a (more fun) graphical simulation (press enter to cycle through days):</p>\n<pre>dinolemma gui\n</pre>\n<p>The gui takes the same input parameters as the run.</p>\n<pre>dinolemma gui --help\nusage: dinolemma gui <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--ndinos NDINOS<span class=\"o\">]</span> <span class=\"o\">[</span>--ntrees NTREES<span class=\"o\">]</span>\n                     <span class=\"o\">[</span>--grid_size GRID_SIZE<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --ndinos NDINOS       the number of dinosaurs to simulate.\n  --ntrees NTREES       the number of avocado trees to simulate.\n  --grid_size GRID_SIZE\n                        the size of the square grid, in units <span class=\"o\">(</span>one dimension<span class=\"o\">)</span>.\n</pre>\n<p>If you want a more interesting simulation, try adding a lot more dinosaurs\nor trees!</p>\n<pre>dinolemma gui --ndinos <span class=\"m\">100</span> --ntrees <span class=\"m\">30</span>\n</pre>\n<p>What you'll likely see given those ratios are that the dinosaurs (purple) eat one another\n(or starve) and then the trees (green) grow to take up the game board.</p>\n<h3>Python</h3>\n<p>You can run a simulation from within Python, either using the defaults:</p>\n<pre><code>from dinolemma.game import DinosaurDilemma                              \n\nsimulation = DinosaurDilemma()                                          \nToday is day 13 in the summer season.\nThere are 1 dinosaurs, and 14 avocado trees.\nThe temperate is 59\u00b0F, humidity 0.43\n</code></pre>\n<p>or by setting any of the variables (number of dinosaurs or trees, size of grid, etc.)</p>\n<h2>Development</h2>\n<p>The way that I'm thinking about this project is in stages.</p>\n<h3>Stage 1: Stateful</h3>\n<h4>1. Environment</h4>\n<p>The first thing to design is the environment, meaning a stateful base that has a set of variables (e.g., temperature, humidity) that will vary\non some regular increment and then influence the entities that live in it downstream. For example, a base environment might\nbe defined by a season and day that leads to a particular temperature that has downstream influences on the organisms that live\nin it. If my environment has a function to cycle through a unit (e.g., a day) then I can update it's state, and\nthen update the entities in it depending on the new state.</p>\n<h4>2. Entities</h4>\n<p>Once the environment is defined, the next level of stateful objects must be defined, the entities that live within\nthe environment. The entities should first update themselves based on the changed environment, and then interact.\nInteraction comes down to each entity changing location on some grid, and if the location is in the vicinity\nof another organism, then the interaction occurs. I thought about whether I wanted all entities to move (and then\ninteract) versus allowing them to interact as they move, and I chose the latter. The reason is because\nwe would allow for multiple interactions for any given entity in one turn, and that's more interesting.\nTo be fair, I have to ensure that the order of movement is randomized. And notably, avocado trees cannot\nmove.</p>\n<h4>3. Interactions</h4>\n<p>Every entity must have defined rules for interaction with other entities. When all entities\nin the simulation change location, those that are within some vicinity of one another\nare allowed to interact. Interaction can further influence the state of the entity,\nor even lead to creation or destruction of said entity.</p>\n<p>At the end of the design of stage 1, we will have developed essentially a text based, stateful simulation.\nWe will be able to run it with some set of starting conditions, and then observe the interactions\nover a particular number of time steps (days) and some final outcome.</p>\n<h3>Stage 2: Graphical</h3>\n<p>Once the stateful simulation is designed, we should strive to visualize it. This\nmeans (possibly) re-implementation in a browser based language that can render\nobjects on a canvas or via the dom (d3.js). We would want to be able to run\nthe same text based simulation, and watch it.</p>\n<h3>Stage 3: Live</h3>\n<p>The stateful approach works for early design, but what we would really want is essentially\na bunch of entities that are co-existing in an environment, and then reacting to one another.\nI think we could try to emulate this with something that looks more like a bunch of\nobjects that can emit and subscribe to one another's events, and then know how to\nrespond.</p>\n<h2>Characters</h2>\n<h3>Dinosaurs</h3>\n<p>Dinosaurs are the main character in this world, and we initialize the world\nwith some number. Specifically, a dinosaur wanders around and has the following\nattributes:</p>\n<ul>\n<li><strong>hunger</strong>: each dinosaur is hungry, and gets more hungry as the simulation progresses. If the dinosaur enconuters a ripe avocado, he will eat it and the hunger subside. Each dinosaur has a slightly different threshold for deciding to eat.</li>\n<li><strong>size</strong>: each dinosaur has a randomly set size. A larger dinosaur is obviously requiring more food than a smaller one, and a larger one is also advantaged to be able to eat a smaller dinosaur, if desperate.</li>\n<li><strong>disease</strong>: if a dinosaur is hungry and eats an avocado or another dinosaur with a disease, he can get sick. A sick dinosaur moves less, and thus has a greater chance of dying due to hunger or even being eaten by another dinosaur.</li>\n<li><strong>gender</strong>: A dinosaur has a 45% change of being male or female, and a 10% chance of being a hybrid, which can reproduce without a mate. Only mature dinosaurs (greater than or equal to 80% of their full adult size) can reproduce, and with every interaction, there is only some small percentage of it.</li>\n</ul>\n<p>The dinosaur has the following actions:</p>\n<ul>\n<li><strong>move</strong>: for each turn of the game, the dinosaur moves, and then interacts with whatever he finds in his new spot.</li>\n<li><strong>eat</strong>: a dinosaur can choose to eat an avocado, or even another dinosaur, depending on the size and level of hunger.</li>\n<li><strong>sleep</strong> a dinosaur can choose to sleep (with some probability) if he is sick to increase the chance of getting better.</li>\n<li><strong>reproduce</strong> a dinosaur that encounters another dinosaur (mature of the opposite gender) has some percent change of reproduction.</li>\n</ul>\n<h3>Avocados</h3>\n<p>Avocados are grown on trees that are scattered in the environment. For any given tree, it must be a certain age to produce avocados, and once it's old enough, it can only generate a certain number of avocados over a period of time. This gives us the following attributes:</p>\n<ul>\n<li><strong>mature</strong>: a mature tree cannot be eaten by a dinosaur, and can produce avocados. An immature tree can be eaten entirely and removed from the game.</li>\n<li><strong>avocados</strong>: once a tree is mature, it holds a certain number of avocados</li>\n<li><strong>disease</strong>: any tree can get a disease with a small probability. Getting a disease puts the tree at risk for dying, or getting a dinosaur sick.</li>\n</ul>\n<h2>Variables</h2>\n<p>For each of the scenarios above, there must be probabilities generated within some range (set when the game starts) and then allocated to randomly generated entities, which are also randomly placed on a game board of some size.</p>\n<h3>Dinosaurs</h3>\n<p>The game starts with a certain number of dinosaurs (number of total dinosaurs), with the following randomly set values (within some ranges):</p>\n<ul>\n<li>size</li>\n<li>hunger</li>\n</ul>\n<p>The game itself (an instance of DinosaurDilemma) under <a href=\"dinolemma/game.py\" rel=\"nofollow\">dinolemma/game.py</a> creates\nsome number of dinosaurs in the following way:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dinolemma.dinosaurs</span> <span class=\"kn\">import</span> <span class=\"n\">Dinosaurs</span>\n\n<span class=\"n\">dinosaurs</span> <span class=\"o\">=</span> <span class=\"n\">Dinosaurs</span><span class=\"p\">()</span>\n\n<span class=\"n\">dinosaurs</span>\n<span class=\"p\">[</span><span class=\"mi\">14</span> <span class=\"n\">dinosaurs</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">dino</span> <span class=\"ow\">in</span> <span class=\"n\">dinosaurs</span><span class=\"p\">:</span> \n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dino</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> \n\n<span class=\"n\">persnickety</span><span class=\"o\">-</span><span class=\"n\">muffinpodus</span>\n<span class=\"n\">loopy</span><span class=\"o\">-</span><span class=\"n\">tacopodus</span>\n<span class=\"n\">gassy</span><span class=\"o\">-</span><span class=\"n\">poodledocus</span>\n<span class=\"n\">frigid</span><span class=\"o\">-</span><span class=\"n\">nalgasasaurus</span>\n<span class=\"n\">hanky</span><span class=\"o\">-</span><span class=\"n\">dogdocus</span>\n<span class=\"n\">dirty</span><span class=\"o\">-</span><span class=\"n\">blackbeanpodus</span>\n<span class=\"n\">astute</span><span class=\"o\">-</span><span class=\"n\">truffleus</span>\n<span class=\"n\">loopy</span><span class=\"o\">-</span><span class=\"n\">knifeus</span>\n<span class=\"n\">chocolate</span><span class=\"o\">-</span><span class=\"n\">noodleisaurus</span>\n<span class=\"n\">psycho</span><span class=\"o\">-</span><span class=\"n\">chipiraptor</span>\n<span class=\"n\">muffled</span><span class=\"o\">-</span><span class=\"n\">lizardus</span>\n<span class=\"n\">stinky</span><span class=\"o\">-</span><span class=\"n\">underoosdocus</span>\n<span class=\"n\">rainbow</span><span class=\"o\">-</span><span class=\"n\">cattywampusisaurus</span>\n<span class=\"n\">buttery</span><span class=\"o\">-</span><span class=\"n\">saladiraptor</span>\n</pre>\n<p>Each is guaranteed to have a unique name, and we check that there are enough\nspaces on the game board to support the dinosaurs and trees created. We\ncan also grab a random dinosaur:</p>\n<pre><span class=\"n\">dino</span> <span class=\"o\">=</span> <span class=\"n\">dinosaurs</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n<span class=\"n\">dino</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'bricky-eagleraptor'</span>\n</pre>\n<h3>Avocados</h3>\n<p>The game also starts with a certain number of avocado saplings.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dinolemma.avocados</span> <span class=\"kn\">import</span> <span class=\"n\">AvocadoTrees</span>\n\n<span class=\"n\">trees</span> <span class=\"o\">=</span> <span class=\"n\">AvocadoTrees</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">tree</span> <span class=\"ow\">in</span> <span class=\"n\">trees</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"n\">hanky</span><span class=\"o\">-</span><span class=\"n\">egg</span><span class=\"o\">-</span><span class=\"n\">tree</span>\n<span class=\"n\">goodbye</span><span class=\"o\">-</span><span class=\"n\">poo</span><span class=\"o\">-</span><span class=\"n\">tree</span>\n<span class=\"n\">reclusive</span><span class=\"o\">-</span><span class=\"n\">sundae</span><span class=\"o\">-</span><span class=\"n\">tree</span>\n<span class=\"n\">muffled</span><span class=\"o\">-</span><span class=\"n\">squidward</span><span class=\"o\">-</span><span class=\"n\">tree</span>\n</pre>\n<p>or grab a random tree:</p>\n<pre><span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">trees</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n<span class=\"n\">tree</span>\n<span class=\"o\">&lt;</span><span class=\"n\">dinolemma</span><span class=\"o\">.</span><span class=\"n\">avocados</span><span class=\"o\">.</span><span class=\"n\">AvocadoTree</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f25347e7860</span><span class=\"o\">&gt;</span>\n</pre>\n\n          </div>"}, "last_serial": 6516778, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6d02f4faff68b73afb43af00e9832831", "sha256": "c2fa36e50716865aec2941117b0c258511edaf7c1c6f4b9733c5074b0bc4e07d"}, "downloads": -1, "filename": "dinolemma-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "6d02f4faff68b73afb43af00e9832831", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 23900, "upload_time": "2020-01-14T20:19:02", "upload_time_iso_8601": "2020-01-14T20:19:02.203435Z", "url": "https://files.pythonhosted.org/packages/ac/8c/3f3d5de3e5c0bc3d7f211154136f974518262fab1778aa2bed2dfb27e2de/dinolemma-0.0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2343ee76e514c9cd8b12c522c29b1bad", "sha256": "35004405c1df4be088354a0ea4c0e5f00d9d59202263e6d78271bdc92d7468d1"}, "downloads": -1, "filename": "dinolemma-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2343ee76e514c9cd8b12c522c29b1bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19747, "upload_time": "2020-01-14T20:19:04", "upload_time_iso_8601": "2020-01-14T20:19:04.413895Z", "url": "https://files.pythonhosted.org/packages/5b/75/6103a17b57ff7a9036e6b903479cd4a980f23c53b863f57a0a28eaa7f314/dinolemma-0.0.1.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "2b1d85356f16ca2d9aaffdf988fe1cdc", "sha256": "ec13cf56f73d03ee6b5c9008ce88f7f7949e95bd7291143b21d622184bde3253"}, "downloads": -1, "filename": "dinolemma-0.0.11-py3.7.egg", "has_sig": false, "md5_digest": "2b1d85356f16ca2d9aaffdf988fe1cdc", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 44094, "upload_time": "2020-01-24T21:08:16", "upload_time_iso_8601": "2020-01-24T21:08:16.339136Z", "url": "https://files.pythonhosted.org/packages/12/92/af8273a8498b6e6dc5680755ece9b42d77914096ed2bcae1b0ef7d424ccd/dinolemma-0.0.11-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b67c29c57ab1c031f3850ddc7f8dd3b", "sha256": "07bf130e340efa199c0a64cd824024918514d9aafeb25b11e21a2ad6e4d7b560"}, "downloads": -1, "filename": "dinolemma-0.0.11.tar.gz", "has_sig": false, "md5_digest": "3b67c29c57ab1c031f3850ddc7f8dd3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22927, "upload_time": "2020-01-24T21:08:18", "upload_time_iso_8601": "2020-01-24T21:08:18.183244Z", "url": "https://files.pythonhosted.org/packages/0e/2c/b3fb5e9d31cdfe9de83c9f66ceb2166a4d58fc803f7bc600406c951a8265/dinolemma-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "e32e653dee21629e731cec041d270c27", "sha256": "35f45f89f6f2511938e1b798164b494fbcee120e3e0d68aa2f9bdcceb1b66a18"}, "downloads": -1, "filename": "dinolemma-0.0.12-py3.7.egg", "has_sig": false, "md5_digest": "e32e653dee21629e731cec041d270c27", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 44250, "upload_time": "2020-01-24T23:17:42", "upload_time_iso_8601": "2020-01-24T23:17:42.423049Z", "url": "https://files.pythonhosted.org/packages/35/26/e3dd9090ebd21a4737e9490418fab90a61160a43e694176384107d499652/dinolemma-0.0.12-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "78bdef3d15ca4f1454bacd9130caa132", "sha256": "eb139a9e21e12a84578dc3f03a9a6f49bfe5f6d4fd34b050442320d7c950b412"}, "downloads": -1, "filename": "dinolemma-0.0.12.tar.gz", "has_sig": false, "md5_digest": "78bdef3d15ca4f1454bacd9130caa132", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23290, "upload_time": "2020-01-24T23:17:44", "upload_time_iso_8601": "2020-01-24T23:17:44.199147Z", "url": "https://files.pythonhosted.org/packages/81/ac/7905e5f638ed9add85d9d6a25521866c73554a4103506b4baa0546695f74/dinolemma-0.0.12.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e32e653dee21629e731cec041d270c27", "sha256": "35f45f89f6f2511938e1b798164b494fbcee120e3e0d68aa2f9bdcceb1b66a18"}, "downloads": -1, "filename": "dinolemma-0.0.12-py3.7.egg", "has_sig": false, "md5_digest": "e32e653dee21629e731cec041d270c27", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 44250, "upload_time": "2020-01-24T23:17:42", "upload_time_iso_8601": "2020-01-24T23:17:42.423049Z", "url": "https://files.pythonhosted.org/packages/35/26/e3dd9090ebd21a4737e9490418fab90a61160a43e694176384107d499652/dinolemma-0.0.12-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "78bdef3d15ca4f1454bacd9130caa132", "sha256": "eb139a9e21e12a84578dc3f03a9a6f49bfe5f6d4fd34b050442320d7c950b412"}, "downloads": -1, "filename": "dinolemma-0.0.12.tar.gz", "has_sig": false, "md5_digest": "78bdef3d15ca4f1454bacd9130caa132", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23290, "upload_time": "2020-01-24T23:17:44", "upload_time_iso_8601": "2020-01-24T23:17:44.199147Z", "url": "https://files.pythonhosted.org/packages/81/ac/7905e5f638ed9add85d9d6a25521866c73554a4103506b4baa0546695f74/dinolemma-0.0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:19 2020"}