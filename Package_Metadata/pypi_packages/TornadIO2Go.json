{"info": {"author": "Nimrod A. Abing", "author_email": "nimrod.abing@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "===========\nTornadIO2Go\n===========\n\nTornadIO2Go integrates `TornadIO2`_ with your Django project. It allows you to\nrun both your Django project and TornadIO2 app from within the same `Tornado`_\nserver. Or you can just use it as a production-ready ``runserver`` substitute.\n\nInstallation\n============\n\nThe quickest way to install is via `pip`_ from within a `virtualenv`_.::\n\n    pip install https://github.com/rudeb0t/tornadio2go/archive/master.zip#egg=TornadIO2Go\n\nAlternatively, you can opt to use an \"editable\" installation::\n\n    pip install -e https://github.com/rudeb0t/tornadio2go.git#egg=TornadIO2Go\n\nQuick Start\n===========\n\nAdd ``tornadio2go`` to your ``INSTALLED_APPS`` and then run ``syncdb``. This\nwill install the models used by TornadIO2Go. Create your\n``tornadio2.SocketConnection`` subclass and write your event handlers as\nusual. Then add the following to your ``settings.py``::\n\n    TORNADIO2GO = {\n        'SOCKETCONNECTION_CLASS': 'path.to.socketConnectionClass'\n    }\n\nThen from the command line, start the TornadIO2 server::\n\n    python manage.py runtornadio2\n\nThis will start the server bound to 127.0.0.1 and listening on port 8000.\n\nDjango Settings\n===============\n\nAll of TornadIO2Go's settings are found in the Django setting ``TORNADIO2GO``.\nThis is a simple Python ``dict``. Available settings, all of them are optional:\n\n* ``SOCKETCONNECTION_CLASS`` - this should be the complete path to the\n  ``tornadio2.SocketConnection`` subclass. If this is not specified,\n  ``runtornadio2`` will run your Django project in a Tornado web server.\n\n* ``USER_SETTINGS`` - this is a ``dict`` containing options that should be\n  when creating a new ``tornadio2.router.TornadioRouter`` instance. This is\n  only used if you specify ``SOCKETCONNECTION_CLASS``.\n\n* ``TORNADO_OPTIONS`` - this is a ``dict`` of all the options that you wish to\n  use for the ``tornado.httpserver.HTTPServer`` instance that will be created.\n  See `HTTPServer`_ documentation.\n\n* ``TORNADO_HANDLERS`` - this is a list of handlers that you want to be added\n  before the `FallbackHandler`.\n  \nCommand Line Options\n====================\n\nThe ``runtornadio2`` command has similar command line options to Django's\n``runserver`` command. Do:::\n\n    python manage.py runtornadio2 --help\n\nTo display a list of available options. Typical usage is:::\n\n    python manage.py runtornadio2 [options] [optional port number, or ipaddr:port]\n\nTo run a multi-process server, use the ``--num-process`` option and set it to\neither zero or any number greater than one. Set to zero to automatically\ndetect the number of available CPU cores and fork the appropriate number of\nprocesses. Set to any number greater than one to fork a specific number of\nprocesses.\n\nRunning With supervisord\n========================\n\nIn order to run tornadio2go under `supervisord`_ you must use the `--noreload`\nor `--num-process=1` flag in the command parameter for the ini section of your\nconfiguration file.  `supervisord` does not like it when its supervised\nprograms do a `fork()` and the reloader does just that.\n\nSignals\n=======\n\n*Experimental in 1.0.3*\n\nVersion 1.0.3 introduces signals which are sent during different stages of\ninitialization. The list of signals (in the order that they are sent) are as\nfollows:\n\n* `pre_server_start`\n\n* `post_server_start`\n\n* `pre_add_handlers`\n\n* `post_add_handlers`\n\nThe signals handlers will all receive the `tornado.web.Application` object in\nthe `tornado_app` keyword argument. Unless otherwise indicated, the `sender` is\nalways the `tornado.httpserver.HTTPServer` object.\n\nThis feature is currently marked as **EXPERIMENTAL** and might change in future\nversions.\n\n.. _TornadIO2: https://github.com/MrJoes/tornadio2\n.. _Tornado: http://www.tornadoweb.org/\n.. _pip: http://pypi.python.org/pypi/pip\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _HTTPServer: http://www.tornadoweb.org/documentation/httpserver.html#http-server\n.. _supervisord: http://supervisord.org/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rudeb0t/tornadio2go", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "TornadIO2Go", "package_url": "https://pypi.org/project/TornadIO2Go/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/TornadIO2Go/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rudeb0t/tornadio2go"}, "release_url": "https://pypi.org/project/TornadIO2Go/1.0.4/", "requires_dist": null, "requires_python": null, "summary": "Seamlessly run your Django and TornadIO2 project inside Tornado. Like.A.Boss.", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>TornadIO2Go integrates <a href=\"https://github.com/MrJoes/tornadio2\" rel=\"nofollow\">TornadIO2</a> with your Django project. It allows you to\nrun both your Django project and TornadIO2 app from within the same <a href=\"http://www.tornadoweb.org/\" rel=\"nofollow\">Tornado</a>\nserver. Or you can just use it as a production-ready <tt>runserver</tt> substitute.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The quickest way to install is via <a href=\"http://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a> from within a <a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">virtualenv</a>.:</p>\n<pre>pip install https://github.com/rudeb0t/tornadio2go/archive/master.zip#egg=TornadIO2Go\n</pre>\n<p>Alternatively, you can opt to use an \u201ceditable\u201d installation:</p>\n<pre>pip install -e https://github.com/rudeb0t/tornadio2go.git#egg=TornadIO2Go\n</pre>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>Add <tt>tornadio2go</tt> to your <tt>INSTALLED_APPS</tt> and then run <tt>syncdb</tt>. This\nwill install the models used by TornadIO2Go. Create your\n<tt>tornadio2.SocketConnection</tt> subclass and write your event handlers as\nusual. Then add the following to your <tt>settings.py</tt>:</p>\n<pre>TORNADIO2GO = {\n    'SOCKETCONNECTION_CLASS': 'path.to.socketConnectionClass'\n}\n</pre>\n<p>Then from the command line, start the TornadIO2 server:</p>\n<pre>python manage.py runtornadio2\n</pre>\n<p>This will start the server bound to 127.0.0.1 and listening on port 8000.</p>\n</div>\n<div id=\"django-settings\">\n<h2>Django Settings</h2>\n<p>All of TornadIO2Go\u2019s settings are found in the Django setting <tt>TORNADIO2GO</tt>.\nThis is a simple Python <tt>dict</tt>. Available settings, all of them are optional:</p>\n<ul>\n<li><tt>SOCKETCONNECTION_CLASS</tt> - this should be the complete path to the\n<tt>tornadio2.SocketConnection</tt> subclass. If this is not specified,\n<tt>runtornadio2</tt> will run your Django project in a Tornado web server.</li>\n<li><tt>USER_SETTINGS</tt> - this is a <tt>dict</tt> containing options that should be\nwhen creating a new <tt>tornadio2.router.TornadioRouter</tt> instance. This is\nonly used if you specify <tt>SOCKETCONNECTION_CLASS</tt>.</li>\n<li><tt>TORNADO_OPTIONS</tt> - this is a <tt>dict</tt> of all the options that you wish to\nuse for the <tt>tornado.httpserver.HTTPServer</tt> instance that will be created.\nSee <a href=\"http://www.tornadoweb.org/documentation/httpserver.html#http-server\" rel=\"nofollow\">HTTPServer</a> documentation.</li>\n<li><tt>TORNADO_HANDLERS</tt> - this is a list of handlers that you want to be added\nbefore the <cite>FallbackHandler</cite>.</li>\n</ul>\n</div>\n<div id=\"command-line-options\">\n<h2>Command Line Options</h2>\n<p>The <tt>runtornadio2</tt> command has similar command line options to Django\u2019s\n<tt>runserver</tt> command. Do::</p>\n<pre>python manage.py runtornadio2 --help\n</pre>\n<p>To display a list of available options. Typical usage is::</p>\n<pre>python manage.py runtornadio2 [options] [optional port number, or ipaddr:port]\n</pre>\n<p>To run a multi-process server, use the <tt><span class=\"pre\">--num-process</span></tt> option and set it to\neither zero or any number greater than one. Set to zero to automatically\ndetect the number of available CPU cores and fork the appropriate number of\nprocesses. Set to any number greater than one to fork a specific number of\nprocesses.</p>\n</div>\n<div id=\"running-with-supervisord\">\n<h2>Running With supervisord</h2>\n<p>In order to run tornadio2go under <a href=\"http://supervisord.org/\" rel=\"nofollow\">supervisord</a> you must use the <cite>\u2013noreload</cite>\nor <cite>\u2013num-process=1</cite> flag in the command parameter for the ini section of your\nconfiguration file.  <cite>supervisord</cite> does not like it when its supervised\nprograms do a <cite>fork()</cite> and the reloader does just that.</p>\n</div>\n<div id=\"signals\">\n<h2>Signals</h2>\n<p><em>Experimental in 1.0.3</em></p>\n<p>Version 1.0.3 introduces signals which are sent during different stages of\ninitialization. The list of signals (in the order that they are sent) are as\nfollows:</p>\n<ul>\n<li><cite>pre_server_start</cite></li>\n<li><cite>post_server_start</cite></li>\n<li><cite>pre_add_handlers</cite></li>\n<li><cite>post_add_handlers</cite></li>\n</ul>\n<p>The signals handlers will all receive the <cite>tornado.web.Application</cite> object in\nthe <cite>tornado_app</cite> keyword argument. Unless otherwise indicated, the <cite>sender</cite> is\nalways the <cite>tornado.httpserver.HTTPServer</cite> object.</p>\n<p>This feature is currently marked as <strong>EXPERIMENTAL</strong> and might change in future\nversions.</p>\n</div>\n\n          </div>"}, "last_serial": 1711167, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "63fc2752e7ad1d176d39d97c7af17545", "sha256": "f69964145b40bc2aee1040f9916d9e553b2b71c233ddf61c6d827214ca1d99f1"}, "downloads": -1, "filename": "TornadIO2Go-1.0.0.tar.gz", "has_sig": false, "md5_digest": "63fc2752e7ad1d176d39d97c7af17545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75236, "upload_time": "2013-04-10T10:54:33", "upload_time_iso_8601": "2013-04-10T10:54:33.135450Z", "url": "https://files.pythonhosted.org/packages/a2/ec/55b84fc735e0563e3810698b180b448bab9be95c743e6de4c2c27e7158cf/TornadIO2Go-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "97870410c15cdb056a5d9701df7c92cb", "sha256": "a0fa50120f11cd7f32113290d00193db863df4188a170a5540601ff1e8a7ca88"}, "downloads": -1, "filename": "TornadIO2Go-1.0.1.tar.gz", "has_sig": false, "md5_digest": "97870410c15cdb056a5d9701df7c92cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80092, "upload_time": "2013-04-10T11:06:52", "upload_time_iso_8601": "2013-04-10T11:06:52.345636Z", "url": "https://files.pythonhosted.org/packages/f5/32/2b93525ce78b678f378741c215b306c39aee1cde817448f1fbf1b732fe73/TornadIO2Go-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "a768a63f5cdd39240528cd220d69ed31", "sha256": "91d7623fcc0c485f97efc6180c4348565969036cdf491344497418dba81bff0e"}, "downloads": -1, "filename": "TornadIO2Go-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a768a63f5cdd39240528cd220d69ed31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80281, "upload_time": "2013-04-17T14:30:02", "upload_time_iso_8601": "2013-04-17T14:30:02.440997Z", "url": "https://files.pythonhosted.org/packages/8b/a7/8622b50e6e21cf95054a16430724363495536fa4e6d4545014c93254d843/TornadIO2Go-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "4a52d68f48ffdc79d5f94f8b2ddcf188", "sha256": "cd4fe009945d10d486a478943055e3e2c99b36cd68e3b492cf025c2616006a36"}, "downloads": -1, "filename": "TornadIO2Go-1.0.3.tar.gz", "has_sig": false, "md5_digest": "4a52d68f48ffdc79d5f94f8b2ddcf188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81219, "upload_time": "2013-04-30T02:01:45", "upload_time_iso_8601": "2013-04-30T02:01:45.647474Z", "url": "https://files.pythonhosted.org/packages/2f/34/fb8e739e14b0a59f8e787932635ec3fa43ba72a17812931f798d6cec01a3/TornadIO2Go-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "7dd89d2e00b4c52f6c3b68705f010adf", "sha256": "5045bd5710fa7d4f20e510b040a985f293efa439e90ad107eee9ebcb982ebf35"}, "downloads": -1, "filename": "TornadIO2Go-1.0.4.tar.gz", "has_sig": false, "md5_digest": "7dd89d2e00b4c52f6c3b68705f010adf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81368, "upload_time": "2015-09-07T06:21:32", "upload_time_iso_8601": "2015-09-07T06:21:32.033093Z", "url": "https://files.pythonhosted.org/packages/81/66/b7d84922c5e2577b8545c3a93cdf8d4f87a1ef4a9e95f64bcc29aade160c/TornadIO2Go-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7dd89d2e00b4c52f6c3b68705f010adf", "sha256": "5045bd5710fa7d4f20e510b040a985f293efa439e90ad107eee9ebcb982ebf35"}, "downloads": -1, "filename": "TornadIO2Go-1.0.4.tar.gz", "has_sig": false, "md5_digest": "7dd89d2e00b4c52f6c3b68705f010adf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81368, "upload_time": "2015-09-07T06:21:32", "upload_time_iso_8601": "2015-09-07T06:21:32.033093Z", "url": "https://files.pythonhosted.org/packages/81/66/b7d84922c5e2577b8545c3a93cdf8d4f87a1ef4a9e95f64bcc29aade160c/TornadIO2Go-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:56 2020"}