{"info": {"author": "Sean Breckenridge", "author_email": "seanbrecke@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "vimbuffer\n======\n\nEdit files and strings in temporary vim (or some other console editor) buffers.\n\nInstallation\n------------\n\n#### Requires:\n\n- python3+\n\n```\npip3 install vimbuffer\n```\n\nUsage\n------------\n\nThere's just the one function, `buffer`:\n\n```\nvimbuffer.buffer(string=None, file=None, editor=None, fallbacks=[], name_prefix=None)\n    Provide one of: \n        string: A string to edit in a vimbuffer\n        filepath: A file to edit in a vimbuffer\n    If neither is provided, uses an empty string\n    fallbacks: A list of fallbacks for alternate editors. (e.g. ['vim', 'vi', 'nano'])\n    name_prefix: string prefix for the filename when opening in an editor\n\n    If string is provided, opens the file in and editor, lets the user edit it,\n    and returns the string.\n    If a file is, it reads the file, lets the user modify it, writes back to\n    the file. It also returns the edited file contents.\n```\n\nThe editor can be overwritten by specifying environment variables, see below for resolution order.\n\n##### Examples \n\n```\nimport vimbuffer\n\n# edit a string\nprompt_string = \"Edit this and put what you want here!\"\nedited_text = vimbuffer.buffer(string=prompt_string)  # opens vim\n\n# edit a file\nvimbuffer.buffer(file=os.path.expanduser(\"~/.bashrc\"), name_prefix=\"bashrc-\")\n```\n\nThis uses [`tempfile`](https://docs.python.org/3.8/library/tempfile.html) to create temporary files on the system, and launches vim against them. If the environment variable `$EDITOR` is set to a graphical text editor, the process (which in this case would just launch the graphical editor) would end before the user had a chance to edit it. I recommend using terminal text editors instead.\n\nYou can specify a list of fallback editors;  one you'd like to use instead of `$EDITOR`:\n\n```\nproject_description=\"\"\"\n## <my-project>\n\nBy <your-name>\n\"\"\"\n\nedited_desc = vimbuffer.buffer(project_description, fallbacks=[\"nvim\", \"vim\", \"vi\", \"nano\"])\n```\n\nAlternatively, if you want to leave your `$EDITOR` as a graphical text editor, you can set the `$VIMBUFFER_EDITOR` environment variable, which trumps all other choices. Specifically, the resolution order is:\n\n- `$VIMBUFFER_EDITOR`\n- `fallbacks`(s) passed as keyword arguments in python\n- `$EDITOR`\n- `vim`\n- `vi`\n\nThe `name_prefix` exists as a kwarg since temporary files have names that are randomly generated. By passing a prefix, the name becomes something like `/tmp/bashrc-sd43Jds`, so it may give a hint as to which file/what you're editing\n\nTests\n----------\n\n```\npytest\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seanbreckenridge/vimbuffer", "keywords": "vim editor stream", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "vimbuffer", "package_url": "https://pypi.org/project/vimbuffer/", "platform": "", "project_url": "https://pypi.org/project/vimbuffer/", "project_urls": {"Homepage": "https://github.com/seanbreckenridge/vimbuffer"}, "release_url": "https://pypi.org/project/vimbuffer/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Edit files, and strings in temporary vim (or some other console editor) buffers.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>vimbuffer</h1>\n<p>Edit files and strings in temporary vim (or some other console editor) buffers.</p>\n<h2>Installation</h2>\n<h4>Requires:</h4>\n<ul>\n<li>python3+</li>\n</ul>\n<pre><code>pip3 install vimbuffer\n</code></pre>\n<h2>Usage</h2>\n<p>There's just the one function, <code>buffer</code>:</p>\n<pre><code>vimbuffer.buffer(string=None, file=None, editor=None, fallbacks=[], name_prefix=None)\n    Provide one of: \n        string: A string to edit in a vimbuffer\n        filepath: A file to edit in a vimbuffer\n    If neither is provided, uses an empty string\n    fallbacks: A list of fallbacks for alternate editors. (e.g. ['vim', 'vi', 'nano'])\n    name_prefix: string prefix for the filename when opening in an editor\n\n    If string is provided, opens the file in and editor, lets the user edit it,\n    and returns the string.\n    If a file is, it reads the file, lets the user modify it, writes back to\n    the file. It also returns the edited file contents.\n</code></pre>\n<p>The editor can be overwritten by specifying environment variables, see below for resolution order.</p>\n<h5>Examples</h5>\n<pre><code>import vimbuffer\n\n# edit a string\nprompt_string = \"Edit this and put what you want here!\"\nedited_text = vimbuffer.buffer(string=prompt_string)  # opens vim\n\n# edit a file\nvimbuffer.buffer(file=os.path.expanduser(\"~/.bashrc\"), name_prefix=\"bashrc-\")\n</code></pre>\n<p>This uses <a href=\"https://docs.python.org/3.8/library/tempfile.html\" rel=\"nofollow\"><code>tempfile</code></a> to create temporary files on the system, and launches vim against them. If the environment variable <code>$EDITOR</code> is set to a graphical text editor, the process (which in this case would just launch the graphical editor) would end before the user had a chance to edit it. I recommend using terminal text editors instead.</p>\n<p>You can specify a list of fallback editors;  one you'd like to use instead of <code>$EDITOR</code>:</p>\n<pre><code>project_description=\"\"\"\n## &lt;my-project&gt;\n\nBy &lt;your-name&gt;\n\"\"\"\n\nedited_desc = vimbuffer.buffer(project_description, fallbacks=[\"nvim\", \"vim\", \"vi\", \"nano\"])\n</code></pre>\n<p>Alternatively, if you want to leave your <code>$EDITOR</code> as a graphical text editor, you can set the <code>$VIMBUFFER_EDITOR</code> environment variable, which trumps all other choices. Specifically, the resolution order is:</p>\n<ul>\n<li><code>$VIMBUFFER_EDITOR</code></li>\n<li><code>fallbacks</code>(s) passed as keyword arguments in python</li>\n<li><code>$EDITOR</code></li>\n<li><code>vim</code></li>\n<li><code>vi</code></li>\n</ul>\n<p>The <code>name_prefix</code> exists as a kwarg since temporary files have names that are randomly generated. By passing a prefix, the name becomes something like <code>/tmp/bashrc-sd43Jds</code>, so it may give a hint as to which file/what you're editing</p>\n<h2>Tests</h2>\n<pre><code>pytest\n</code></pre>\n\n          </div>"}, "last_serial": 6291406, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ad31d57aea73c890e004e582a36a773f", "sha256": "cdf470cf7736236f0a3528833791b533ba17ed46c0dd429d24980c3f4691f0ec"}, "downloads": -1, "filename": "vimbuffer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ad31d57aea73c890e004e582a36a773f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4154, "upload_time": "2019-12-13T06:58:40", "upload_time_iso_8601": "2019-12-13T06:58:40.379228Z", "url": "https://files.pythonhosted.org/packages/72/0d/7cb93cacc38c14ca7ac7371078264ebcad7d0489d058f5b6408c45bad197/vimbuffer-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3de980fd0895d8664c8360bd5f6e38c6", "sha256": "e3375da73205d0bb107722fa23113713dca944af6dfafd3b689d738930c0a6c9"}, "downloads": -1, "filename": "vimbuffer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3de980fd0895d8664c8360bd5f6e38c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4215, "upload_time": "2019-12-13T07:50:20", "upload_time_iso_8601": "2019-12-13T07:50:20.533833Z", "url": "https://files.pythonhosted.org/packages/d4/f2/29a929850fdc223ff3faf57cf60b633ac7fa202515cf9a40b2cc6cae8640/vimbuffer-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3de980fd0895d8664c8360bd5f6e38c6", "sha256": "e3375da73205d0bb107722fa23113713dca944af6dfafd3b689d738930c0a6c9"}, "downloads": -1, "filename": "vimbuffer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3de980fd0895d8664c8360bd5f6e38c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4215, "upload_time": "2019-12-13T07:50:20", "upload_time_iso_8601": "2019-12-13T07:50:20.533833Z", "url": "https://files.pythonhosted.org/packages/d4/f2/29a929850fdc223ff3faf57cf60b633ac7fa202515cf9a40b2cc6cae8640/vimbuffer-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:03 2020"}