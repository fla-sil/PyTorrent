{"info": {"author": "James Socol", "author_email": "james@mozilla.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Environment :: Web Environment :: Mozilla", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===========\nDjango Fail\n===========\n\n**Django Fail** provides tools for testing your site under less-than-ideal\nconditions.\n\nWhen working locally, response times are near instant, and there is no entropy\nintroduced by network hardware (e.g. proxies or load balancers) that may, for\nsome reason or other, fail.\n\n**Django Fail** helps you test what happens when some parts of your site don't\nload or load slowly. This can be particularly helpful for responses used in\nAjax-powered applications.\n\n\n``@fail(status=500, content='', mimetype='text/html')``\n=======================================================\n\nThe ``@fail()`` decorator makes a view return some kind of failure response,\ninstead of a real response.\n\nFor the arguments, ``status`` is the status code, normally ``500``, ``content``\nis any content to return, normally ``''``, and ``mimetype`` is the mimetype of\nthe response, normally ``text/html``.\n\nThe ``@fail()`` decorator can be globally disabled by adding ``FAIL_ON =\nFalse`` to ``settings.py``.\n\n\n``@slow(delay=2)``\n==================\n\nThe ``@slow()`` decorator makes a response wait a while before returning. The\ndelay is in seconds and defaults to ``2``.\n\nThe ``@slow()`` decorator can be globally disabled by adding ``SLOW_ON =\nFalse`` to settings.py.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jsocol/django-fail", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-fail", "package_url": "https://pypi.org/project/django-fail/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-fail/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/jsocol/django-fail"}, "release_url": "https://pypi.org/project/django-fail/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Make your app fail!", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Django Fail</strong> provides tools for testing your site under less-than-ideal\nconditions.</p>\n<p>When working locally, response times are near instant, and there is no entropy\nintroduced by network hardware (e.g. proxies or load balancers) that may, for\nsome reason or other, fail.</p>\n<p><strong>Django Fail</strong> helps you test what happens when some parts of your site don\u2019t\nload or load slowly. This can be particularly helpful for responses used in\nAjax-powered applications.</p>\n<div id=\"fail-status-500-content-mimetype-text-html\">\n<h2><tt>@fail(status=500, <span class=\"pre\">content='',</span> <span class=\"pre\">mimetype='text/html')</span></tt></h2>\n<p>The <tt>@fail()</tt> decorator makes a view return some kind of failure response,\ninstead of a real response.</p>\n<p>For the arguments, <tt>status</tt> is the status code, normally <tt>500</tt>, <tt>content</tt>\nis any content to return, normally <tt>''</tt>, and <tt>mimetype</tt> is the mimetype of\nthe response, normally <tt>text/html</tt>.</p>\n<p>The <tt>@fail()</tt> decorator can be globally disabled by adding <tt>FAIL_ON =\nFalse</tt> to <tt>settings.py</tt>.</p>\n</div>\n<div id=\"slow-delay-2\">\n<h2><tt>@slow(delay=2)</tt></h2>\n<p>The <tt>@slow()</tt> decorator makes a response wait a while before returning. The\ndelay is in seconds and defaults to <tt>2</tt>.</p>\n<p>The <tt>@slow()</tt> decorator can be globally disabled by adding <tt>SLOW_ON =\nFalse</tt> to settings.py.</p>\n</div>\n\n          </div>"}, "last_serial": 789615, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fc4841bf3dc552298b1ecc0093256b3b", "sha256": "ab219b50c634050372f69d8c40764e8b2ae3218550989c645f59c7d543c72843"}, "downloads": -1, "filename": "django-fail-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fc4841bf3dc552298b1ecc0093256b3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3015, "upload_time": "2011-02-28T18:56:08", "upload_time_iso_8601": "2011-02-28T18:56:08.223397Z", "url": "https://files.pythonhosted.org/packages/a9/43/3d443af1bc0897bef3845faab2fc4230cfb6e6a2700e3736d92d398f38a7/django-fail-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fc4841bf3dc552298b1ecc0093256b3b", "sha256": "ab219b50c634050372f69d8c40764e8b2ae3218550989c645f59c7d543c72843"}, "downloads": -1, "filename": "django-fail-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fc4841bf3dc552298b1ecc0093256b3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3015, "upload_time": "2011-02-28T18:56:08", "upload_time_iso_8601": "2011-02-28T18:56:08.223397Z", "url": "https://files.pythonhosted.org/packages/a9/43/3d443af1bc0897bef3845faab2fc4230cfb6e6a2700e3736d92d398f38a7/django-fail-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:13 2020"}