{"info": {"author": "Felix Edel", "author_email": "felixfelix.schmidt@googlemail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Flirror - A smartmirror based on Flask\n\nFlirror is a modular smartmirror application developed in Python. It consists of\na simple webserver based on [Flask](https://palletsprojects.com/p/flask/) which\nholds the UI and a command line application that retrieves information from\ndifferent APIs (e.g. OpenWeather, Google Calendar, ...). Currently, there is\nonly a small set of available [modules](#available-modules), but I'm planning to\nadd some more (see [planned features and ideas](#planned-features-and-ideas)).\n\nDespite the number of commits, this project is still in an early phase, so I'm\nhappy about any contribution!\n\n---\n\n*Contents:*\n**[Motivation](#motivation)** |\n**[Architecture](#architecture)** |\n**[Usage](#usage)** |\n**[Available Modules](#available-modules)** |\n**[Developing Custom Modules](#developing-custom-modules)** |\n**[Deploy on Raspberry](#deploy-flirror-on-a-raspberry-pi)** |\n**[Development](#development)** |\n**[Planned features and ideas](#planned-features-and-ideas)** |\n\n---\n\n## Motivation\n\nI mainly started this project because I wanted to build a smartmirror using a\nRaspberry Pi. I searched for existing projects and found a few, but none of them\nreally suited my needs. There are a few smaller ones developed in Python, but\nmost of them don't seem to be actively maintaned anymore. A very public one I\nfound is for sure\n[MagicMirror<sup>2</sup>](https://github.com/MichMich/MagicMirror). I think,\nthis is a really awesome project - taking a look at all the customizable parts,\ncontributions and custom modules that were developed in the meantime. I'm just\nnot much of a JavaScript developer and don't like the idea of having everything\nin a single application.\n\nBut I got inspired by the features it provides and decided to develop my own\nsmartmirror in Python. Maybe someone else in the Python community is also\ninterested in a project like this.\n\n## Architecture\n\nFlirror mainly consists of two components - a webserver based on Flask and a\ncommand line application, the so called \"crawler\" that retrieves data from\ndifferent APIs/backends (whatever you want to call it).\n\n### flirror-web\n\nThe webserver is mainly used to show the information that is retrieved by the\ncrawlers. Currently, it doesn't allow any \"interaction\" from a user side. But\nmaybe something like this will come in the future.\n\n### flirror-crawler\n\nThe crawler application can simply be invoked from the command line and is used\nto crawl the various backends / APIs for the actual data that is displayed by\nflirror-web. The crawler application supports two different modes: ``periodic``\nand ``immediate`` (default). The periodic mode will crawl all available APIs in\ncustomizable intervals, while the immediate mode can be used as a one-shot\ncommand to retrieve the data directly from all available backends.\n\n### SQLite database\n\nTo bring both components together I decided for a very simple approach, using a\nlocal SQLite databse. I mainly made this choice, because we are only storing\nsimple key value pairs and SQLite comes\n[out of the box](https://docs.python.org/3/library/sqlite3.html) with python.\n\n## Usage\n\n### Installation\n\nFlirror can simply be installed via pip:\n```shell\n$ pip install flirror\n```\n\nor via docker:\n```shell\n$ docker pull felixedel/flirror\n```\n\nDeploying flirror via docker is simplest using docker-compose. An example\ndocker-compose stack can be found in the `deploy/docker-compose.example.yaml`\nfile.\n\n### Configuration\n\nBoth applications - **flirror-web** and **flirror-crawler** - read their\nconfiguration from the file path given via the `FLIRROR_SETTINGS` environment\nvariable, e.g.\n\n```shell\n$ export FLIRROR_SETTINGS=$(pwd)/settings.cfg\n```\n\nA basic configuration file must at least contain the path to a `DATABASE_FILE`\nand a list of `MODULES` with at least one module configured.\n\nEach entry in the `MODULES` list accepts the following parameters:\n\n| Parameter | Description\n|-----------|------------\n| `id` | **Required** The ID to identify this module inside the application.\n| `module` | **Required** The name of the module to use for this tile. A list of available modules can be found [here](#available-modules)\n| `config` | **Required** The configuration for the specific module. Some modules come up with a default configuration, but usually this is needed to for each module. For more details on how to configure the specific module, take a look at the module's configuration part in the [modules](#available-modules) section.\n| `crawler` | Crawler specific settings. This can be used to speficy e.g.the crawling interval for a specific module. For more details see the crawler config section.\n| `display` | Configure the `position` and reloading `time` of a module\n\nAn example configuration with at least one module with the minimum required\nparameters might look like the following:\n\n``` python\nMODULES = [\n    {\n        \"id\": \"weather-tile\",\n        \"module\": \"weather\",\n        \"config\": {\n            \"city\": \"My hometown\",\n            \"api_key\": \"<your-openweathermap-api-key>\",\n            \"language\": \"en\",\n            \"temp_unit\": \"celsius\",\n        },\n        \"display\": {\n            \"position\": 0,\n        },\n    }\n]\n```\n\nFor more detailed configuration examples, please take a look at the\n`settings.example.cfg` file.\n\nEach module entry defined in this configuration file will be shown as a single\ntile in **flirror-web** and will be crawled independently in **flirror-crawler**.\n\n### Start flirror-web\n\nTo start flirror-web, simply run the following command:\n\n```shell\n$ flirror-web\n```\n\nwhich will start a [gunicorn](https://gunicorn.org/) server serving the flirror\napplication on `http://127.0.0.1`. The script accepts arbitrary parameters, so\nyou could further configure the gunicorn command that is executed in the end, by\ne.g. specifying the number workers or changing the address. For a list of\navailable command line arguments, please refer to gunicorn's [documentation](https://docs.gunicorn.org/en/stable/run.html#commonly-used-arguments).\n\nIf you don't want to use gunicorn, you could take a look at Flask's\n[uWSGI](https://flask.palletsprojects.com/en/1.1.x/deploying/uwsgi/) guide.\n\n### Start the crawler\n\nTo start the crawler simply run one of the following commands\n\n```shell\n# Periodic mode\n$ flirror-crawler crawl --periodic\n\n# Immediate mode\n$ flirror-crawler crawl\n```\n\nto run the crawler either in periodic or immediate mode. In both cases flirror\nwill look up all modules specified in the configuration file and try to retrieve\nthe data for each one by invoking the respective crawler.\n\n## Available Modules\n\nModules provide the base functionality that is used by Flirror to show e.g. a\nclock or the current weather. Every module defines a view (which is visible in\nflirror-web) and a crawler that retrieves the actual data from an API or\nbackend.\n\nSome modules may come without a crawler (like the clock module) but usually it's\nrecommended to do any data retrieving / calculation in the crawler and use the\nview only to show the data.\n\nThe following modules are available in flirror by default:\n\n* Clock\n* Weather\n* Calendar\n* News\n* Stocks\n\n### Clock\n\nThe clock module displays a clock either in digital or analog format. This is a\npure JavaScript/CSS module, as it wouldn't make much sense to use a Python\nbackend to retrieve the current time.\n\n#### Configuration\n\n| Option | Description\n|--------|------------\n| `mode` | Must be one of `analog` or `digital` to display the clock in the selected format. **Default:** `digital`\n\n### Weather\n\nThe weather module displays the current weather information together with a\nforecast for the next six days. The weather information is retrieved from\n[OpenWeather](https://openweathermap.org/), so an OpenWeather API key is\nnecessary to access those information. Information on how to get a free API key\ncan be found in their [How to start](https://openweathermap.org/appid) section.\n\n#### Configuration\n\n| Option | Description\n|--------|------------\n| `api_key` | **Required** Your personal OpenWeather API key\n| `language` | **Required** The language in which the results are returned from the API (and thus displayd in flirror). For a list of available language codes, please refer to the [OpenWeather multilingual support](https://openweathermap.org/current#multi).\n| `city` | **Required** The city to retrieve the weather information for.\n| `temp_unit` | **Required** The unit in which the results are returned from the API (and thus displayed in flirror).\n\n### Calendar\n\nThe calendar modules displays upcoming events from a Google calendar. Currently,\nFlirror only supports the [OAuth 2.0 for TV and Limited-Input Device Applications](https://developers.google.com/identity/protocols/OAuth2ForDevices).\n\n#### Configuration\n\n| Option | Description\n|--------|------------\n| `calendars` | **Required** A list of google calendars to retrieve the events from. If you don't want to mix up multiple calendars in one tile, you can configure multiple calendar modules with one calendar each. Your default google calendar is usually named after your gmail address.\n| `max_items` | The maximum number of events to show. **Default:** 5\n\n### Stocks\n\nThe stocks module displays current stock values either in table format or as a\ntime series. The information is retrieved from\n[Alpha Vantage](https://www.alphavantage.co/), so an Alpha Vantage API keys is\nnecessary to access those information. Information on how to get a free API key\ncan be found in their [Getting started guide](https://medium.com/alpha-vantage/get-started-with-alpha-vantage-data-619a70c7f33a).\n\n#### Configuration\n\n| Option | Description |\n|--------|-------------|\n| `api_key` | **Required** Your personal Alpha Vantage API key\n| `symbols` | **Required** The list of equities you want to retrieve. Each element must be in the format `(\"<symbol>\", \"<display_name>\")`\n| `mode` | One of `table` or `series` to display the stocks information in the selected format. **Default:** `table`\n\n### News\n\nThe news module displays entries from a RSS feed. Flirror uses the\n[feedparser](https://pypi.org/project/feedparser/) package to crawl the\nnewsfeeds. Please take a look at feedparser's\n[documentation](https://pythonhosted.org/feedparser/introduction.html) to get an\noverview about available formats which can be parsed.\n\n#### Configuration\n| Option | Description |\n|--------|-------------|\n| `name` | **Required** The title to display over the news entries\n| `url` | **Required** The url pointing to the RSS feed\n\n## Developing Custom Modules\nFlirror provides a plugin mechanism using an extended version of Flask\n[Blueprints](https://flask.palletsprojects.com/en/1.1.x/blueprints/).\n\nThe so called `FlirrorModule` provides some decorators and functions to register\nthe necessary view and crawler for a module. Apart from that you could still\nutilize the whole Blueprint functionality to provide e.g. custom templates,\nfilters and more.\n\nA simple module may consist of the following file structure:\n\n```\nflirror_awesome_module\n|-- __init__.py\n|-- templates/\n    |-- awesome_module/\n        |-- index.html\n```\n\nThe `__init__.py` file contains the module's python code including the module\ndefinition itself.\n\n```python\nimport time\n\nfrom flask import current_app\n\nfrom flirror.modules import FlirrorModule\n\nawesome_module = FlirrorModule(\n    \"awesome_module\", __name__, template_folder=\"templates\"\n)\n\n\n@awesome_module.view()\ndef get():\n    return current_app.basic_get(template_name=\"awesome_module/index.html\")\n\n@awesome_module.crawler()\ndef crawl(module_id, app, user_name):\n    awesome_data = {\n        \"_timestamp\": time.time(),\n        \"message\": f\"Hello, '{user_name}\",\n    }\n    app.store_module_data(crawler_id, awesome_data)\n\n\nFLIRROR_MODULE = awesome_module\n```\n\nA few notes on what's going on here:\n\nFirst, we create a new `FlirrorModule()` instance which contains all the\nnecessary parameters of our custom module like its `name`, `import_path` and the\n`template_folder`. The latter one is necessary to make our custom template\nusable in Flirror.\n\nOnce the module is defined, we can use the `@awesome_module.view()` decorator to\nregister the module's view function in Flirror. Using this decorator will\nregister a new route `/awesome_module/` on the underlying Flask application.\nFlirror-web will then request this route while providing the `module_id` as GET\nparameter. The helper function `basic_get()` will evaluate this GET parameter,\nlook up the data which is stored in the database for this `module_id` and\npopulate the data to the template provided via the `template_name` parameter.\nFinally, it returns the rendered template so that flirror-web can integrate it\nin its UI.\n\nTo store the data in the database, we provide a crawler function decorated with\n`@awesome_module.crawler()`. This registers the function as crawler for this\nmodule in flirror. When invoking `flirror-crawler` this function will be\ncalled with a set of predefined parameters:\n* The `module_id` for which the function is called\n* The `app` (which is mainly used as a back-reference to get access to the\n  database)\n* All config values that the module provides. In our case we want to greet a\n  user whereby the `user_name` is configurable. Usually there is no need to\n  store the `user_name` in the database as we could also directly access it in\n  the view. It's just used like this to show the typical use case of view and\n  crawler.\n\nFinally, we expose our module as `FLIRROR_MODULE` so that it can be detected by\nFlirror.\n\nThe `templates/awesome_module/index.html` file contains the view's HTML code in\nform of a [Jinja2](https://jinja.palletsprojects.com/en/2.11.x/) template. It\nmight look redundant that the module's name is specified again in the path to\nthe template. That's necessary to avoid overriding templates of other modules.\nMore information on this can be found in the\n[Templates](https://flask.palletsprojects.com/en/1.1.x/blueprints/#templates)\nsection of Flask's Blueprint documentation.\n\n```html\n{% extends \"module.html\" %}\n\n{% block body %}\n<div class=\"card-body\">\n    <div class=\"text-right\">\n        <small>\n            <i id=\"{{ module.id }}-spinner\" class=\"fas fa-sync-alt\"></i> {{ module.data._timestamp | prettydate }}\n        </small>\n    </div>\n    <h2>{{ module.data.message }}</h2>\n</div>\n{% endblock %}\n```\n\nTo seamlessly include the module's view in the flirror-web UI, make sure to\nextend the `module.html` template and use `<div class=\"card-body\">` as outer\nelement in the body block.\n\n### Module Detection\nFlirror will try to detect installed plugins automatically if they follow a\npredefined naming schema. For each plugin found, Flirror will look up the\nprovided flirror modules and register them on the app.\n\nTo make your plugin discoverable by flirror, it must fulfil the following\nrequirements:\n* The name of python package providing the custom module (or modules) must start\n  with `flirror_` (e.g. `flirror_awesome_module`).\n* The package must expose the modules via one of the following top-level\n  variables:\n\n  ```python\n  # To expose a single module, use\n  FLIRROR_MODULE = <my_awesome_module>\n  # If the plugin provides multiple modules, expose them via\n  FLIRROR_MODULES = [<my_awesome_module_1>, <my_awesome_module_2>]\n  ```\n* Each module must be a valid [FlirrorModule](https://github.com/felixedel/flirror/blob/master/flirror/modules/__init__.py#L8) instance.\n\nFlirror's standard modules are defined in the same manner like custom modules,\nthus you could take a closer look on their\n[source](https://github.com/felixedel/flirror/tree/master/flirror/modules) if\nyou are interested in how you could develop a custom module.\n\n## Deploy Flirror on a Raspberry Pi\n\nAlthough Flirror could simply be installed via `pip`, the recommended way to\ninstall it on a Raspberry Pi is via Docker. The main reason for this is that not\nall python dependencies are packaged for ARM and thus must be built from\nsources. This takes a lot of time (up to 60 minutes) especially for those using\nC extensions.\n\n[Flirror's Docker image](https://hub.docker.com/r/felixedel/flirror) already\ncomes with all dependencies installed and you can directly start Flirror after\npulling the image.\n\n### Requirements\n\n* [Docker](https://www.docker.com/)\n* [docker-compose](https://docs.docker.com/compose/)\n\n#### Install docker\n\nTo install docker on raspbian OS, you can simply run the following command:\n\n```shell\n$ curl -sSL https://get.docker.com | sh\n```\n\nThis will download the installation script and directly execute it via shell.\nRunning the script may take some time. Afterwards, you might want to add your\nuser (pi) to the docker group, so you can run docker without sudo:\n\n```shell\n$ sudo usermod -aG docker pi\n```\n\nAfterwards log out and back or reboot the Raspberry Pi via\n\n```shell\n$ sudo reboot -h\n```\n\n#### Install docker-compose\n\nThere are various ways to install docker-compose. Please see the\n[docker-compose installation guide](https://docs.docker.com/compose/install/)\nfor more detailed information.\n\nI personally installed docker-compose via\n[pipx](https://pipxproject.github.io/pipx/).\nUsing this variant requires the `python-dev` and `libffi-dev` packages to be\ninstalled on the system.\n\n```shell\n$ sudo apt install python-dev libffi-dev\n$ python3 -m pip install --user pipx\n$ python3 -m pipx ensurepath\n$ pipx install docker-compose\n```\n\n### Start flirror\n\nBoth componenents can be started using the docker-compose file provided in\n`deploy/docker-compose.example.yaml`. Just copy this file, change some of the\nvolume mounts (if necessary) and run\n\n```shell\n$ docker-compose up\n```\n\nto start the web server and the crawler in periodic mode.\n\nWith both services running we still need to open some browser to see the actual\nflirror UI. Therefore, you could download and execute the following helper\nscript like so:\n\n```shell\n$ wget https://raw.githubusercontent.com/felixedel/flirror/master/helpers/start_gui.sh\n$ chmod u+x start_gui.sh\n$ ./start_gui.sh\n```\n\nApart from starting chromium in full screen mode pointing to the running\nflirror-web instance inside the docker container, this script will also ensure\nthat some necessary environment variables like `DISPLAY` are set and that the\nscreen saver and energy saving mode of the X server are disabled - so the\ndisplay doesn't go into sleep mode after a few minutes.\n\n### Optional configuration\n\nTo hide the mouse cursor, install unclutter via\n\n```shell\n$ sudo apt install unclutter\n```\n\nand add the following line to `/home/pi/.config/lxsession/LXDE-pi/autostart`\n\n```shell\n@unclutter -display :0 -noevents -grab\n```\n\n## Development\n\n### Use docker buildx for a multi-architecture build\nTo use the Flirror docker image on a Raspberry Pi, it must be built for the ARM\narchitecture. To not always utilize a Raspberry Pi itself to build the docker\nimage for ARM, we could use docker's `buildx` command and run a\nmulti-architecture build on Linux or Mac.\n\nWhen using [Docker for Mac](https://docs.docker.com/docker-for-mac/), the\n`buildx` command should already be available. You just have to enable the\n\"experimental features\" in the \"Command Line\" section of the application's\nsettings.\n\nFor Linux, you could use the [Getting started with Docker for Arm on Linux](https://www.docker.com/blog/getting-started-with-docker-for-arm-on-linux/)\nguide to install buildx.\n\nTo test if the docker buildx command is available, simply run\n```shell\n$ docker buildx --help\n```\n\nTo show the available platforms for which buildx can be utilized, run\n```shell\n$ docker buildx ls\n```\n\nDocker for Mac already comes with a few preinstalled platforms including\n`linux/arm/v7` (which we are going to use).\n\nFor Linux, you first need to register the ARM executables via qemu. Information\non how to achieve this can also be found in the guide mentioned above.\n\nOnce everything is set, we can create a new builder instance which we will use\nfor our multi-archtitecture build:\n\n```shell\n$ docker buildx create --name flirrorbuilder\n$ docker buildx use flirrorbuilder\n$ docker buildx inspect --bootstrap\n```\n\nThis will download the necessary `buildkit` docker image and should show an\noutput similar to the following if successful:\n\n```shell\n[+] Building 12.1s (1/1) FINISHED\n => [internal] booting buildkit                                                                 12.1s\n => => pulling image moby/buildkit:buildx-stable-1                                              11.0s\n => => creating container buildx_buildkit_flirrorbuilder0                                        1.0s\nName:   flirrorbuilder\nDriver: docker-container\n\nNodes:\nName:      flirrorbuilder0\nEndpoint:  unix:///var/run/docker.sock\nStatus:    running\nPlatforms: linux/amd64, linux/arm64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6\n```\n\nNow we can use this builder to build the Flirror multi-architecture image with\nthe following command:\n```shell\n$  docker buildx build --platform linux/arm,linux/amd64 -t felixedel/flirror:latest -f dockerfiles/flirror-Dockerfile --push .\n```\n\n## Planned features and ideas\n\n* A plugin mechamisn to allow custom modules to be included in flirror\n* Provide webhooks to allow interacting with flirror from the outside (and maybe event between modules)\n* Provide some notification mechanism\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/felixedel/flirror", "keywords": "smartmirror,magicmirror,flask", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flirror", "package_url": "https://pypi.org/project/flirror/", "platform": "", "project_url": "https://pypi.org/project/flirror/", "project_urls": {"Documentation": "https://github.com/felixedel/flirror/blob/master/README.md", "Homepage": "https://github.com/felixedel/flirror", "Repository": "https://github.com/felixedel/flirror"}, "release_url": "https://pypi.org/project/flirror/1.1.0/", "requires_dist": ["alpha_vantage (>=2.1.3,<3.0.0)", "arrow (>=0.15.5,<0.16.0)", "click (>=7.0,<8.0)", "feedparser (>=5.2.1,<6.0.0)", "flask (>=1.1.1,<2.0.0)", "Flask-Assets (>=2.0,<3.0)", "google-api-python-client (>=1.7.11,<2.0.0)", "google-auth-httplib2 (>=0.0.3,<0.0.4)", "google-auth-oauthlib (>=0.4.1,<0.5.0)", "gunicorn (>=20.0.4,<21.0.0)", "pony (>=0.7.11,<0.8.0)", "pyowm (>=2.10.0,<3.0.0)", "pyScss (>=1.3.5,<2.0.0)", "qrcode (>=6.1,<7.0)", "Pillow (>=7.0.0,<8.0.0)", "schedule (>=0.6.0,<0.7.0)"], "requires_python": ">=3.6,<4.0", "summary": "A smartmirror based on Flask", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flirror - A smartmirror based on Flask</h1>\n<p>Flirror is a modular smartmirror application developed in Python. It consists of\na simple webserver based on <a href=\"https://palletsprojects.com/p/flask/\" rel=\"nofollow\">Flask</a> which\nholds the UI and a command line application that retrieves information from\ndifferent APIs (e.g. OpenWeather, Google Calendar, ...). Currently, there is\nonly a small set of available <a href=\"#available-modules\" rel=\"nofollow\">modules</a>, but I'm planning to\nadd some more (see <a href=\"#planned-features-and-ideas\" rel=\"nofollow\">planned features and ideas</a>).</p>\n<p>Despite the number of commits, this project is still in an early phase, so I'm\nhappy about any contribution!</p>\n<hr>\n<p><em>Contents:</em>\n<strong><a href=\"#motivation\" rel=\"nofollow\">Motivation</a></strong> |\n<strong><a href=\"#architecture\" rel=\"nofollow\">Architecture</a></strong> |\n<strong><a href=\"#usage\" rel=\"nofollow\">Usage</a></strong> |\n<strong><a href=\"#available-modules\" rel=\"nofollow\">Available Modules</a></strong> |\n<strong><a href=\"#developing-custom-modules\" rel=\"nofollow\">Developing Custom Modules</a></strong> |\n<strong><a href=\"#deploy-flirror-on-a-raspberry-pi\" rel=\"nofollow\">Deploy on Raspberry</a></strong> |\n<strong><a href=\"#development\" rel=\"nofollow\">Development</a></strong> |\n<strong><a href=\"#planned-features-and-ideas\" rel=\"nofollow\">Planned features and ideas</a></strong> |</p>\n<hr>\n<h2>Motivation</h2>\n<p>I mainly started this project because I wanted to build a smartmirror using a\nRaspberry Pi. I searched for existing projects and found a few, but none of them\nreally suited my needs. There are a few smaller ones developed in Python, but\nmost of them don't seem to be actively maintaned anymore. A very public one I\nfound is for sure\n<a href=\"https://github.com/MichMich/MagicMirror\" rel=\"nofollow\">MagicMirror<sup>2</sup></a>. I think,\nthis is a really awesome project - taking a look at all the customizable parts,\ncontributions and custom modules that were developed in the meantime. I'm just\nnot much of a JavaScript developer and don't like the idea of having everything\nin a single application.</p>\n<p>But I got inspired by the features it provides and decided to develop my own\nsmartmirror in Python. Maybe someone else in the Python community is also\ninterested in a project like this.</p>\n<h2>Architecture</h2>\n<p>Flirror mainly consists of two components - a webserver based on Flask and a\ncommand line application, the so called \"crawler\" that retrieves data from\ndifferent APIs/backends (whatever you want to call it).</p>\n<h3>flirror-web</h3>\n<p>The webserver is mainly used to show the information that is retrieved by the\ncrawlers. Currently, it doesn't allow any \"interaction\" from a user side. But\nmaybe something like this will come in the future.</p>\n<h3>flirror-crawler</h3>\n<p>The crawler application can simply be invoked from the command line and is used\nto crawl the various backends / APIs for the actual data that is displayed by\nflirror-web. The crawler application supports two different modes: <code>periodic</code>\nand <code>immediate</code> (default). The periodic mode will crawl all available APIs in\ncustomizable intervals, while the immediate mode can be used as a one-shot\ncommand to retrieve the data directly from all available backends.</p>\n<h3>SQLite database</h3>\n<p>To bring both components together I decided for a very simple approach, using a\nlocal SQLite databse. I mainly made this choice, because we are only storing\nsimple key value pairs and SQLite comes\n<a href=\"https://docs.python.org/3/library/sqlite3.html\" rel=\"nofollow\">out of the box</a> with python.</p>\n<h2>Usage</h2>\n<h3>Installation</h3>\n<p>Flirror can simply be installed via pip:</p>\n<pre>$ pip install flirror\n</pre>\n<p>or via docker:</p>\n<pre>$ docker pull felixedel/flirror\n</pre>\n<p>Deploying flirror via docker is simplest using docker-compose. An example\ndocker-compose stack can be found in the <code>deploy/docker-compose.example.yaml</code>\nfile.</p>\n<h3>Configuration</h3>\n<p>Both applications - <strong>flirror-web</strong> and <strong>flirror-crawler</strong> - read their\nconfiguration from the file path given via the <code>FLIRROR_SETTINGS</code> environment\nvariable, e.g.</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">FLIRROR_SETTINGS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>/settings.cfg\n</pre>\n<p>A basic configuration file must at least contain the path to a <code>DATABASE_FILE</code>\nand a list of <code>MODULES</code> with at least one module configured.</p>\n<p>Each entry in the <code>MODULES</code> list accepts the following parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>id</code></td>\n<td><strong>Required</strong> The ID to identify this module inside the application.</td>\n</tr>\n<tr>\n<td><code>module</code></td>\n<td><strong>Required</strong> The name of the module to use for this tile. A list of available modules can be found <a href=\"#available-modules\" rel=\"nofollow\">here</a></td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td><strong>Required</strong> The configuration for the specific module. Some modules come up with a default configuration, but usually this is needed to for each module. For more details on how to configure the specific module, take a look at the module's configuration part in the <a href=\"#available-modules\" rel=\"nofollow\">modules</a> section.</td>\n</tr>\n<tr>\n<td><code>crawler</code></td>\n<td>Crawler specific settings. This can be used to speficy e.g.the crawling interval for a specific module. For more details see the crawler config section.</td>\n</tr>\n<tr>\n<td><code>display</code></td>\n<td>Configure the <code>position</code> and reloading <code>time</code> of a module</td>\n</tr></tbody></table>\n<p>An example configuration with at least one module with the minimum required\nparameters might look like the following:</p>\n<pre><span class=\"n\">MODULES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"weather-tile\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"module\"</span><span class=\"p\">:</span> <span class=\"s2\">\"weather\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"config\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s2\">\"My hometown\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"api_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;your-openweathermap-api-key&gt;\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"language\"</span><span class=\"p\">:</span> <span class=\"s2\">\"en\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"temp_unit\"</span><span class=\"p\">:</span> <span class=\"s2\">\"celsius\"</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"display\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"position\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>For more detailed configuration examples, please take a look at the\n<code>settings.example.cfg</code> file.</p>\n<p>Each module entry defined in this configuration file will be shown as a single\ntile in <strong>flirror-web</strong> and will be crawled independently in <strong>flirror-crawler</strong>.</p>\n<h3>Start flirror-web</h3>\n<p>To start flirror-web, simply run the following command:</p>\n<pre>$ flirror-web\n</pre>\n<p>which will start a <a href=\"https://gunicorn.org/\" rel=\"nofollow\">gunicorn</a> server serving the flirror\napplication on <code>http://127.0.0.1</code>. The script accepts arbitrary parameters, so\nyou could further configure the gunicorn command that is executed in the end, by\ne.g. specifying the number workers or changing the address. For a list of\navailable command line arguments, please refer to gunicorn's <a href=\"https://docs.gunicorn.org/en/stable/run.html#commonly-used-arguments\" rel=\"nofollow\">documentation</a>.</p>\n<p>If you don't want to use gunicorn, you could take a look at Flask's\n<a href=\"https://flask.palletsprojects.com/en/1.1.x/deploying/uwsgi/\" rel=\"nofollow\">uWSGI</a> guide.</p>\n<h3>Start the crawler</h3>\n<p>To start the crawler simply run one of the following commands</p>\n<pre><span class=\"c1\"># Periodic mode</span>\n$ flirror-crawler crawl --periodic\n\n<span class=\"c1\"># Immediate mode</span>\n$ flirror-crawler crawl\n</pre>\n<p>to run the crawler either in periodic or immediate mode. In both cases flirror\nwill look up all modules specified in the configuration file and try to retrieve\nthe data for each one by invoking the respective crawler.</p>\n<h2>Available Modules</h2>\n<p>Modules provide the base functionality that is used by Flirror to show e.g. a\nclock or the current weather. Every module defines a view (which is visible in\nflirror-web) and a crawler that retrieves the actual data from an API or\nbackend.</p>\n<p>Some modules may come without a crawler (like the clock module) but usually it's\nrecommended to do any data retrieving / calculation in the crawler and use the\nview only to show the data.</p>\n<p>The following modules are available in flirror by default:</p>\n<ul>\n<li>Clock</li>\n<li>Weather</li>\n<li>Calendar</li>\n<li>News</li>\n<li>Stocks</li>\n</ul>\n<h3>Clock</h3>\n<p>The clock module displays a clock either in digital or analog format. This is a\npure JavaScript/CSS module, as it wouldn't make much sense to use a Python\nbackend to retrieve the current time.</p>\n<h4>Configuration</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>mode</code></td>\n<td>Must be one of <code>analog</code> or <code>digital</code> to display the clock in the selected format. <strong>Default:</strong> <code>digital</code></td>\n</tr></tbody></table>\n<h3>Weather</h3>\n<p>The weather module displays the current weather information together with a\nforecast for the next six days. The weather information is retrieved from\n<a href=\"https://openweathermap.org/\" rel=\"nofollow\">OpenWeather</a>, so an OpenWeather API key is\nnecessary to access those information. Information on how to get a free API key\ncan be found in their <a href=\"https://openweathermap.org/appid\" rel=\"nofollow\">How to start</a> section.</p>\n<h4>Configuration</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>api_key</code></td>\n<td><strong>Required</strong> Your personal OpenWeather API key</td>\n</tr>\n<tr>\n<td><code>language</code></td>\n<td><strong>Required</strong> The language in which the results are returned from the API (and thus displayd in flirror). For a list of available language codes, please refer to the <a href=\"https://openweathermap.org/current#multi\" rel=\"nofollow\">OpenWeather multilingual support</a>.</td>\n</tr>\n<tr>\n<td><code>city</code></td>\n<td><strong>Required</strong> The city to retrieve the weather information for.</td>\n</tr>\n<tr>\n<td><code>temp_unit</code></td>\n<td><strong>Required</strong> The unit in which the results are returned from the API (and thus displayed in flirror).</td>\n</tr></tbody></table>\n<h3>Calendar</h3>\n<p>The calendar modules displays upcoming events from a Google calendar. Currently,\nFlirror only supports the <a href=\"https://developers.google.com/identity/protocols/OAuth2ForDevices\" rel=\"nofollow\">OAuth 2.0 for TV and Limited-Input Device Applications</a>.</p>\n<h4>Configuration</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>calendars</code></td>\n<td><strong>Required</strong> A list of google calendars to retrieve the events from. If you don't want to mix up multiple calendars in one tile, you can configure multiple calendar modules with one calendar each. Your default google calendar is usually named after your gmail address.</td>\n</tr>\n<tr>\n<td><code>max_items</code></td>\n<td>The maximum number of events to show. <strong>Default:</strong> 5</td>\n</tr></tbody></table>\n<h3>Stocks</h3>\n<p>The stocks module displays current stock values either in table format or as a\ntime series. The information is retrieved from\n<a href=\"https://www.alphavantage.co/\" rel=\"nofollow\">Alpha Vantage</a>, so an Alpha Vantage API keys is\nnecessary to access those information. Information on how to get a free API key\ncan be found in their <a href=\"https://medium.com/alpha-vantage/get-started-with-alpha-vantage-data-619a70c7f33a\" rel=\"nofollow\">Getting started guide</a>.</p>\n<h4>Configuration</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>api_key</code></td>\n<td><strong>Required</strong> Your personal Alpha Vantage API key</td>\n</tr>\n<tr>\n<td><code>symbols</code></td>\n<td><strong>Required</strong> The list of equities you want to retrieve. Each element must be in the format <code>(\"&lt;symbol&gt;\", \"&lt;display_name&gt;\")</code></td>\n</tr>\n<tr>\n<td><code>mode</code></td>\n<td>One of <code>table</code> or <code>series</code> to display the stocks information in the selected format. <strong>Default:</strong> <code>table</code></td>\n</tr></tbody></table>\n<h3>News</h3>\n<p>The news module displays entries from a RSS feed. Flirror uses the\n<a href=\"https://pypi.org/project/feedparser/\" rel=\"nofollow\">feedparser</a> package to crawl the\nnewsfeeds. Please take a look at feedparser's\n<a href=\"https://pythonhosted.org/feedparser/introduction.html\" rel=\"nofollow\">documentation</a> to get an\noverview about available formats which can be parsed.</p>\n<h4>Configuration</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>name</code></td>\n<td><strong>Required</strong> The title to display over the news entries</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td><strong>Required</strong> The url pointing to the RSS feed</td>\n</tr></tbody></table>\n<h2>Developing Custom Modules</h2>\n<p>Flirror provides a plugin mechanism using an extended version of Flask\n<a href=\"https://flask.palletsprojects.com/en/1.1.x/blueprints/\" rel=\"nofollow\">Blueprints</a>.</p>\n<p>The so called <code>FlirrorModule</code> provides some decorators and functions to register\nthe necessary view and crawler for a module. Apart from that you could still\nutilize the whole Blueprint functionality to provide e.g. custom templates,\nfilters and more.</p>\n<p>A simple module may consist of the following file structure:</p>\n<pre><code>flirror_awesome_module\n|-- __init__.py\n|-- templates/\n    |-- awesome_module/\n        |-- index.html\n</code></pre>\n<p>The <code>__init__.py</code> file contains the module's python code including the module\ndefinition itself.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">current_app</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">flirror.modules</span> <span class=\"kn\">import</span> <span class=\"n\">FlirrorModule</span>\n\n<span class=\"n\">awesome_module</span> <span class=\"o\">=</span> <span class=\"n\">FlirrorModule</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"awesome_module\"</span><span class=\"p\">,</span> <span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">template_folder</span><span class=\"o\">=</span><span class=\"s2\">\"templates\"</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"nd\">@awesome_module</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">basic_get</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"s2\">\"awesome_module/index.html\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@awesome_module</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">crawl</span><span class=\"p\">(</span><span class=\"n\">module_id</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">user_name</span><span class=\"p\">):</span>\n    <span class=\"n\">awesome_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"_timestamp\"</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span>\n        <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello, '</span><span class=\"si\">{</span><span class=\"n\">user_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">store_module_data</span><span class=\"p\">(</span><span class=\"n\">crawler_id</span><span class=\"p\">,</span> <span class=\"n\">awesome_data</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">FLIRROR_MODULE</span> <span class=\"o\">=</span> <span class=\"n\">awesome_module</span>\n</pre>\n<p>A few notes on what's going on here:</p>\n<p>First, we create a new <code>FlirrorModule()</code> instance which contains all the\nnecessary parameters of our custom module like its <code>name</code>, <code>import_path</code> and the\n<code>template_folder</code>. The latter one is necessary to make our custom template\nusable in Flirror.</p>\n<p>Once the module is defined, we can use the <code>@awesome_module.view()</code> decorator to\nregister the module's view function in Flirror. Using this decorator will\nregister a new route <code>/awesome_module/</code> on the underlying Flask application.\nFlirror-web will then request this route while providing the <code>module_id</code> as GET\nparameter. The helper function <code>basic_get()</code> will evaluate this GET parameter,\nlook up the data which is stored in the database for this <code>module_id</code> and\npopulate the data to the template provided via the <code>template_name</code> parameter.\nFinally, it returns the rendered template so that flirror-web can integrate it\nin its UI.</p>\n<p>To store the data in the database, we provide a crawler function decorated with\n<code>@awesome_module.crawler()</code>. This registers the function as crawler for this\nmodule in flirror. When invoking <code>flirror-crawler</code> this function will be\ncalled with a set of predefined parameters:</p>\n<ul>\n<li>The <code>module_id</code> for which the function is called</li>\n<li>The <code>app</code> (which is mainly used as a back-reference to get access to the\ndatabase)</li>\n<li>All config values that the module provides. In our case we want to greet a\nuser whereby the <code>user_name</code> is configurable. Usually there is no need to\nstore the <code>user_name</code> in the database as we could also directly access it in\nthe view. It's just used like this to show the typical use case of view and\ncrawler.</li>\n</ul>\n<p>Finally, we expose our module as <code>FLIRROR_MODULE</code> so that it can be detected by\nFlirror.</p>\n<p>The <code>templates/awesome_module/index.html</code> file contains the view's HTML code in\nform of a <a href=\"https://jinja.palletsprojects.com/en/2.11.x/\" rel=\"nofollow\">Jinja2</a> template. It\nmight look redundant that the module's name is specified again in the path to\nthe template. That's necessary to avoid overriding templates of other modules.\nMore information on this can be found in the\n<a href=\"https://flask.palletsprojects.com/en/1.1.x/blueprints/#templates\" rel=\"nofollow\">Templates</a>\nsection of Flask's Blueprint documentation.</p>\n<pre>{% extends \"module.html\" %}\n\n{% block body %}\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"card-body\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"text-right\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">small</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">i</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"{{ module.id }}-spinner\"</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"fas fa-sync-alt\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">i</span><span class=\"p\">&gt;</span> {{ module.data._timestamp | prettydate }}\n        <span class=\"p\">&lt;/</span><span class=\"nt\">small</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>{{ module.data.message }}<span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n{% endblock %}\n</pre>\n<p>To seamlessly include the module's view in the flirror-web UI, make sure to\nextend the <code>module.html</code> template and use <code>&lt;div class=\"card-body\"&gt;</code> as outer\nelement in the body block.</p>\n<h3>Module Detection</h3>\n<p>Flirror will try to detect installed plugins automatically if they follow a\npredefined naming schema. For each plugin found, Flirror will look up the\nprovided flirror modules and register them on the app.</p>\n<p>To make your plugin discoverable by flirror, it must fulfil the following\nrequirements:</p>\n<ul>\n<li>\n<p>The name of python package providing the custom module (or modules) must start\nwith <code>flirror_</code> (e.g. <code>flirror_awesome_module</code>).</p>\n</li>\n<li>\n<p>The package must expose the modules via one of the following top-level\nvariables:</p>\n<pre><span class=\"c1\"># To expose a single module, use</span>\n<span class=\"n\">FLIRROR_MODULE</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">my_awesome_module</span><span class=\"o\">&gt;</span>\n<span class=\"c1\"># If the plugin provides multiple modules, expose them via</span>\n<span class=\"n\">FLIRROR_MODULES</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">my_awesome_module_1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">my_awesome_module_2</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n</li>\n<li>\n<p>Each module must be a valid <a href=\"https://github.com/felixedel/flirror/blob/master/flirror/modules/__init__.py#L8\" rel=\"nofollow\">FlirrorModule</a> instance.</p>\n</li>\n</ul>\n<p>Flirror's standard modules are defined in the same manner like custom modules,\nthus you could take a closer look on their\n<a href=\"https://github.com/felixedel/flirror/tree/master/flirror/modules\" rel=\"nofollow\">source</a> if\nyou are interested in how you could develop a custom module.</p>\n<h2>Deploy Flirror on a Raspberry Pi</h2>\n<p>Although Flirror could simply be installed via <code>pip</code>, the recommended way to\ninstall it on a Raspberry Pi is via Docker. The main reason for this is that not\nall python dependencies are packaged for ARM and thus must be built from\nsources. This takes a lot of time (up to 60 minutes) especially for those using\nC extensions.</p>\n<p><a href=\"https://hub.docker.com/r/felixedel/flirror\" rel=\"nofollow\">Flirror's Docker image</a> already\ncomes with all dependencies installed and you can directly start Flirror after\npulling the image.</p>\n<h3>Requirements</h3>\n<ul>\n<li><a href=\"https://www.docker.com/\" rel=\"nofollow\">Docker</a></li>\n<li><a href=\"https://docs.docker.com/compose/\" rel=\"nofollow\">docker-compose</a></li>\n</ul>\n<h4>Install docker</h4>\n<p>To install docker on raspbian OS, you can simply run the following command:</p>\n<pre>$ curl -sSL https://get.docker.com <span class=\"p\">|</span> sh\n</pre>\n<p>This will download the installation script and directly execute it via shell.\nRunning the script may take some time. Afterwards, you might want to add your\nuser (pi) to the docker group, so you can run docker without sudo:</p>\n<pre>$ sudo usermod -aG docker pi\n</pre>\n<p>Afterwards log out and back or reboot the Raspberry Pi via</p>\n<pre>$ sudo reboot -h\n</pre>\n<h4>Install docker-compose</h4>\n<p>There are various ways to install docker-compose. Please see the\n<a href=\"https://docs.docker.com/compose/install/\" rel=\"nofollow\">docker-compose installation guide</a>\nfor more detailed information.</p>\n<p>I personally installed docker-compose via\n<a href=\"https://pipxproject.github.io/pipx/\" rel=\"nofollow\">pipx</a>.\nUsing this variant requires the <code>python-dev</code> and <code>libffi-dev</code> packages to be\ninstalled on the system.</p>\n<pre>$ sudo apt install python-dev libffi-dev\n$ python3 -m pip install --user pipx\n$ python3 -m pipx ensurepath\n$ pipx install docker-compose\n</pre>\n<h3>Start flirror</h3>\n<p>Both componenents can be started using the docker-compose file provided in\n<code>deploy/docker-compose.example.yaml</code>. Just copy this file, change some of the\nvolume mounts (if necessary) and run</p>\n<pre>$ docker-compose up\n</pre>\n<p>to start the web server and the crawler in periodic mode.</p>\n<p>With both services running we still need to open some browser to see the actual\nflirror UI. Therefore, you could download and execute the following helper\nscript like so:</p>\n<pre>$ wget https://raw.githubusercontent.com/felixedel/flirror/master/helpers/start_gui.sh\n$ chmod u+x start_gui.sh\n$ ./start_gui.sh\n</pre>\n<p>Apart from starting chromium in full screen mode pointing to the running\nflirror-web instance inside the docker container, this script will also ensure\nthat some necessary environment variables like <code>DISPLAY</code> are set and that the\nscreen saver and energy saving mode of the X server are disabled - so the\ndisplay doesn't go into sleep mode after a few minutes.</p>\n<h3>Optional configuration</h3>\n<p>To hide the mouse cursor, install unclutter via</p>\n<pre>$ sudo apt install unclutter\n</pre>\n<p>and add the following line to <code>/home/pi/.config/lxsession/LXDE-pi/autostart</code></p>\n<pre>@unclutter -display :0 -noevents -grab\n</pre>\n<h2>Development</h2>\n<h3>Use docker buildx for a multi-architecture build</h3>\n<p>To use the Flirror docker image on a Raspberry Pi, it must be built for the ARM\narchitecture. To not always utilize a Raspberry Pi itself to build the docker\nimage for ARM, we could use docker's <code>buildx</code> command and run a\nmulti-architecture build on Linux or Mac.</p>\n<p>When using <a href=\"https://docs.docker.com/docker-for-mac/\" rel=\"nofollow\">Docker for Mac</a>, the\n<code>buildx</code> command should already be available. You just have to enable the\n\"experimental features\" in the \"Command Line\" section of the application's\nsettings.</p>\n<p>For Linux, you could use the <a href=\"https://www.docker.com/blog/getting-started-with-docker-for-arm-on-linux/\" rel=\"nofollow\">Getting started with Docker for Arm on Linux</a>\nguide to install buildx.</p>\n<p>To test if the docker buildx command is available, simply run</p>\n<pre>$ docker buildx --help\n</pre>\n<p>To show the available platforms for which buildx can be utilized, run</p>\n<pre>$ docker buildx ls\n</pre>\n<p>Docker for Mac already comes with a few preinstalled platforms including\n<code>linux/arm/v7</code> (which we are going to use).</p>\n<p>For Linux, you first need to register the ARM executables via qemu. Information\non how to achieve this can also be found in the guide mentioned above.</p>\n<p>Once everything is set, we can create a new builder instance which we will use\nfor our multi-archtitecture build:</p>\n<pre>$ docker buildx create --name flirrorbuilder\n$ docker buildx use flirrorbuilder\n$ docker buildx inspect --bootstrap\n</pre>\n<p>This will download the necessary <code>buildkit</code> docker image and should show an\noutput similar to the following if successful:</p>\n<pre><span class=\"o\">[</span>+<span class=\"o\">]</span> Building <span class=\"m\">12</span>.1s <span class=\"o\">(</span><span class=\"m\">1</span>/1<span class=\"o\">)</span> <span class=\"nv\">FINISHED</span>\n <span class=\"o\">=</span>&gt; <span class=\"o\">[</span>internal<span class=\"o\">]</span> booting buildkit                                                                 <span class=\"m\">12</span>.1s\n <span class=\"o\">=</span>&gt; <span class=\"o\">=</span>&gt; pulling image moby/buildkit:buildx-stable-1                                              <span class=\"m\">11</span>.0s\n <span class=\"o\">=</span>&gt; <span class=\"o\">=</span>&gt; creating container buildx_buildkit_flirrorbuilder0                                        <span class=\"m\">1</span>.0s\nName:   flirrorbuilder\nDriver: docker-container\n\nNodes:\nName:      flirrorbuilder0\nEndpoint:  unix:///var/run/docker.sock\nStatus:    running\nPlatforms: linux/amd64, linux/arm64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6\n</pre>\n<p>Now we can use this builder to build the Flirror multi-architecture image with\nthe following command:</p>\n<pre>$  docker buildx build --platform linux/arm,linux/amd64 -t felixedel/flirror:latest -f dockerfiles/flirror-Dockerfile --push .\n</pre>\n<h2>Planned features and ideas</h2>\n<ul>\n<li>A plugin mechamisn to allow custom modules to be included in flirror</li>\n<li>Provide webhooks to allow interacting with flirror from the outside (and maybe event between modules)</li>\n<li>Provide some notification mechanism</li>\n</ul>\n\n          </div>"}, "last_serial": 6935935, "releases": {"0.0.9": [{"comment_text": "", "digests": {"md5": "5fbc0c292da63b261cb829d83038850a", "sha256": "eb9d80fbc69514e9169d4b7517b4f8f83ac59fa13a09ff4a6ca515483f62e647"}, "downloads": -1, "filename": "flirror-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "5fbc0c292da63b261cb829d83038850a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 306352, "upload_time": "2020-02-20T20:25:08", "upload_time_iso_8601": "2020-02-20T20:25:08.370502Z", "url": "https://files.pythonhosted.org/packages/6d/2a/f0b58e868952d0f16d16ddca556e9dba8ebf6e744572971469b9db79eaab/flirror-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "519f9c3e6727be2976927a4d0fd64290", "sha256": "2038d0d0fdfa95ba56a617e8d21227a7bfd07ac4af6294bf18d98614de96c131"}, "downloads": -1, "filename": "flirror-0.0.9.tar.gz", "has_sig": false, "md5_digest": "519f9c3e6727be2976927a4d0fd64290", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 304144, "upload_time": "2020-02-20T20:25:12", "upload_time_iso_8601": "2020-02-20T20:25:12.115271Z", "url": "https://files.pythonhosted.org/packages/9f/78/c69334f6a1d55b365d454da8f611193bf6ad40c0931821e0d81ac0cf655f/flirror-0.0.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "47fdb5891445c4dbbd9133bc07751cea", "sha256": "d74c6acd0c4b3a60fa2adaf6be0679b93ef0f8db0e194d6466e87237542e5099"}, "downloads": -1, "filename": "flirror-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "47fdb5891445c4dbbd9133bc07751cea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 310247, "upload_time": "2020-02-25T19:33:08", "upload_time_iso_8601": "2020-02-25T19:33:08.632940Z", "url": "https://files.pythonhosted.org/packages/a3/af/d0c85ac4a566c73cb420aa303c50442a3b08e579971979e6ecdca3c13602/flirror-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b193e8ccc76f245078075c050d466d33", "sha256": "1d0a0b05fe5ea4d1abbda5fb70fede7d3395614f79814703c0b3ecea0eff21b2"}, "downloads": -1, "filename": "flirror-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b193e8ccc76f245078075c050d466d33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 311771, "upload_time": "2020-02-25T19:33:12", "upload_time_iso_8601": "2020-02-25T19:33:12.151692Z", "url": "https://files.pythonhosted.org/packages/02/27/1a2e5b083595602a93f928e587768b014d2e46cde5899be48374797bafa9/flirror-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "95be3df5eb785768ffd35bacbee864d0", "sha256": "70a55ca08af1603349fa1d2daf158fc3fd61620ade37c5db6b38c25ffcf68339"}, "downloads": -1, "filename": "flirror-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95be3df5eb785768ffd35bacbee864d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 310391, "upload_time": "2020-02-28T15:27:52", "upload_time_iso_8601": "2020-02-28T15:27:52.370384Z", "url": "https://files.pythonhosted.org/packages/fd/ca/13762035253d32ad7f9abf8f3cb5f720b5fdb9acba9a061dc41c6f107f32/flirror-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29bd39e874e13dfc3eb2e7de47de715c", "sha256": "d5af24a7e7e1416cf1aad616f9c10fca40e3b47427ece9178022033e01e6a54f"}, "downloads": -1, "filename": "flirror-1.0.1.tar.gz", "has_sig": false, "md5_digest": "29bd39e874e13dfc3eb2e7de47de715c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 312128, "upload_time": "2020-02-28T15:27:56", "upload_time_iso_8601": "2020-02-28T15:27:56.112469Z", "url": "https://files.pythonhosted.org/packages/30/f9/670bfcfabf17dcc92fa7ce3942fa4ea05c9dc12c1c7484ada421998542e0/flirror-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "62f6fac0fbdc7b7e6d4e618049b2af18", "sha256": "6ac0ae0dcc1cb5b6cac58e871999c297bc683882205c79ba7be1935a3a7c8743"}, "downloads": -1, "filename": "flirror-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62f6fac0fbdc7b7e6d4e618049b2af18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 317005, "upload_time": "2020-04-02T14:17:54", "upload_time_iso_8601": "2020-04-02T14:17:54.590326Z", "url": "https://files.pythonhosted.org/packages/c6/49/5ee4a818e316ed7601820708c2eabeb6eeb7b3c9598ffe84a0384ae6128b/flirror-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e075f4057a571c4a72c375fb1bfe42d8", "sha256": "a830ed868fe46c8fa5c4b45a553530aa0d7524c73fc4c6de550a5a1bfd15c9b1"}, "downloads": -1, "filename": "flirror-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e075f4057a571c4a72c375fb1bfe42d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 318778, "upload_time": "2020-04-02T14:17:57", "upload_time_iso_8601": "2020-04-02T14:17:57.834228Z", "url": "https://files.pythonhosted.org/packages/ef/92/19b2663f2b61b729dc4c8b779a9ba34ca6a4a3a88abf5af241df1707011d/flirror-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "62f6fac0fbdc7b7e6d4e618049b2af18", "sha256": "6ac0ae0dcc1cb5b6cac58e871999c297bc683882205c79ba7be1935a3a7c8743"}, "downloads": -1, "filename": "flirror-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62f6fac0fbdc7b7e6d4e618049b2af18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 317005, "upload_time": "2020-04-02T14:17:54", "upload_time_iso_8601": "2020-04-02T14:17:54.590326Z", "url": "https://files.pythonhosted.org/packages/c6/49/5ee4a818e316ed7601820708c2eabeb6eeb7b3c9598ffe84a0384ae6128b/flirror-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e075f4057a571c4a72c375fb1bfe42d8", "sha256": "a830ed868fe46c8fa5c4b45a553530aa0d7524c73fc4c6de550a5a1bfd15c9b1"}, "downloads": -1, "filename": "flirror-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e075f4057a571c4a72c375fb1bfe42d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 318778, "upload_time": "2020-04-02T14:17:57", "upload_time_iso_8601": "2020-04-02T14:17:57.834228Z", "url": "https://files.pythonhosted.org/packages/ef/92/19b2663f2b61b729dc4c8b779a9ba34ca6a4a3a88abf5af241df1707011d/flirror-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:49 2020"}