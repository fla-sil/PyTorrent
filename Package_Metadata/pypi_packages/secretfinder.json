{"info": {"author": "Buddy Lindsey", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# SecretFinder \ud83d\udd75\ufe0f\n\nHave you ever had secerts for you apps in multiple places? Some are environment variables. Others are in a 3rd party providers like AWS SSM, AWS Secrets Manager, Hashicorp Vault, or any other number of places.  \n\nPulling from these locations can be frustrating if you have 2 or 3 in one app for various reasons.\n\nSecret finder provides you a way to have a single unified api to pull from any number of locations.\n\n## Install\n\n```\npip install secretfinder\n```\n\n## Examples\n\n### Environment Variables\nYou can pull from environment variables easily enough. This is almost useless since you can use `os.getenv`, but it has it purpose.\n\n```python\nfrom secretfinder import SecretsEnv, providers\n\nenv = SecretsEnv(providers=providers.EnvironmentVariable)\n\nenv.get('SOME_VAR', default='hello world')\n```\n\n### AWS SSM\n\nIf you are using AWS SSM to store your keys or other information, a lot of reasons to use it. You can see it works just the same as environment variables.\n\n```python\nfrom secretfinder import SecretsEnv, providers\n\nenv = SecretsEnv(providers=providers.AWSSSM)\n\nenv.get('prod.moneymaker.db', default='hello world')\n```\n\n### AWS Secrets Manager\n\nIf you are using AWS Secrets Manager to store your secrets because maybe you want to auto-rotate passwords then you can easily use it.\n\n```python\nfrom secretfinder import SecretsEnv, providers\n\nenv = SecretsEnv(providers=providers.AWSSecretsManager)\n\nenv.get('prod.moneymaker.db', default='hello world')\n```\n\nThis still has limited support, but it works for other text secret types. It is a todo to expand it.\n\n### AWS SSM and AWS Secrets Manager\n\nYou might be storing information in both SSM and Secrets Manager. Either you are in the middle of migrating from one to the other, or you have specific information in each for separation concerns.\n\nNo problem you still have a similar API you can use.\n\n```python\nfrom secretfinder import SecretsEnv, providers\n\nenv = SecretsEnv(providers=[providers.AWSSecretsManager, providers.AWSSSM])\n\nenv.get('prod.moneymaker.db', default='hello world')\n```\n\nThis will just fall through all providers until it finds a match, or it returns a default.\n\nThere is logging in place to throw out warning when it can't find a value for a provider.\n\n### HashiCorp Vault\n\nComing Soon\n\n### Raise Exceptions\n\nIn the default use case it just falls through returning back a default or None. However, you might want it to raise an exception so that it stops execution if it fails.\n\nIn that case you can use the `raise_exception` keyword argument to raise.\n\n```python\nfrom secretfinder import SecretsEnv, providers\n\nenv = SecretsEnv(providers=providers.AWSSecretsManager, raise_exception=True)\n\nenv.get('prod.moneymaker.db', default='hello world')\n```\n\n## Contributing\n\nIf you would like to help expand the work on this please feel free submit a PR. Adding more providers would be greate, or filling out code for exising providers.\n\n\n### Testing aws locally\nIf you are using aws and wanting to test locally with different profile. Here is what I had to use to get it to work right.\n\n```\n$ AWS_PROFILE=somprofile AWS_DEFAULT_REGION=us-east-2 ipython\n```\n\n## Release\n\n```\npip install twine wheel setuptools\npython setup.py sdist bdist_wheel\ntwine check dist/*\ntwine upload dist/*\n```\n\n## Changelog\n\n### 0.2\n\n* Rename Class because I misspelled it. \ud83d\ude44\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/buddylindsey/secret-finder", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "secretfinder", "package_url": "https://pypi.org/project/secretfinder/", "platform": "", "project_url": "https://pypi.org/project/secretfinder/", "project_urls": {"Documentation": "https://github.com/buddylindsey/secret-finder", "Homepage": "https://github.com/buddylindsey/secret-finder", "Source": "https://github.com/buddylindsey/secret-finder"}, "release_url": "https://pypi.org/project/secretfinder/0.2/", "requires_dist": ["boto3 (==1.10.1)"], "requires_python": ">=3.7", "summary": "Get your hard won secrets, simply", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SecretFinder \ud83d\udd75\ufe0f</h1>\n<p>Have you ever had secerts for you apps in multiple places? Some are environment variables. Others are in a 3rd party providers like AWS SSM, AWS Secrets Manager, Hashicorp Vault, or any other number of places.</p>\n<p>Pulling from these locations can be frustrating if you have 2 or 3 in one app for various reasons.</p>\n<p>Secret finder provides you a way to have a single unified api to pull from any number of locations.</p>\n<h2>Install</h2>\n<pre><code>pip install secretfinder\n</code></pre>\n<h2>Examples</h2>\n<h3>Environment Variables</h3>\n<p>You can pull from environment variables easily enough. This is almost useless since you can use <code>os.getenv</code>, but it has it purpose.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">secretfinder</span> <span class=\"kn\">import</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">,</span> <span class=\"n\">providers</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">providers</span><span class=\"o\">.</span><span class=\"n\">EnvironmentVariable</span><span class=\"p\">)</span>\n\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'SOME_VAR'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n</pre>\n<h3>AWS SSM</h3>\n<p>If you are using AWS SSM to store your keys or other information, a lot of reasons to use it. You can see it works just the same as environment variables.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">secretfinder</span> <span class=\"kn\">import</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">,</span> <span class=\"n\">providers</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">providers</span><span class=\"o\">.</span><span class=\"n\">AWSSSM</span><span class=\"p\">)</span>\n\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'prod.moneymaker.db'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n</pre>\n<h3>AWS Secrets Manager</h3>\n<p>If you are using AWS Secrets Manager to store your secrets because maybe you want to auto-rotate passwords then you can easily use it.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">secretfinder</span> <span class=\"kn\">import</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">,</span> <span class=\"n\">providers</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">providers</span><span class=\"o\">.</span><span class=\"n\">AWSSecretsManager</span><span class=\"p\">)</span>\n\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'prod.moneymaker.db'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n</pre>\n<p>This still has limited support, but it works for other text secret types. It is a todo to expand it.</p>\n<h3>AWS SSM and AWS Secrets Manager</h3>\n<p>You might be storing information in both SSM and Secrets Manager. Either you are in the middle of migrating from one to the other, or you have specific information in each for separation concerns.</p>\n<p>No problem you still have a similar API you can use.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">secretfinder</span> <span class=\"kn\">import</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">,</span> <span class=\"n\">providers</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">providers</span><span class=\"o\">.</span><span class=\"n\">AWSSecretsManager</span><span class=\"p\">,</span> <span class=\"n\">providers</span><span class=\"o\">.</span><span class=\"n\">AWSSSM</span><span class=\"p\">])</span>\n\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'prod.moneymaker.db'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n</pre>\n<p>This will just fall through all providers until it finds a match, or it returns a default.</p>\n<p>There is logging in place to throw out warning when it can't find a value for a provider.</p>\n<h3>HashiCorp Vault</h3>\n<p>Coming Soon</p>\n<h3>Raise Exceptions</h3>\n<p>In the default use case it just falls through returning back a default or None. However, you might want it to raise an exception so that it stops execution if it fails.</p>\n<p>In that case you can use the <code>raise_exception</code> keyword argument to raise.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">secretfinder</span> <span class=\"kn\">import</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">,</span> <span class=\"n\">providers</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">SecretsEnv</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">providers</span><span class=\"o\">.</span><span class=\"n\">AWSSecretsManager</span><span class=\"p\">,</span> <span class=\"n\">raise_exception</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'prod.moneymaker.db'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n</pre>\n<h2>Contributing</h2>\n<p>If you would like to help expand the work on this please feel free submit a PR. Adding more providers would be greate, or filling out code for exising providers.</p>\n<h3>Testing aws locally</h3>\n<p>If you are using aws and wanting to test locally with different profile. Here is what I had to use to get it to work right.</p>\n<pre><code>$ AWS_PROFILE=somprofile AWS_DEFAULT_REGION=us-east-2 ipython\n</code></pre>\n<h2>Release</h2>\n<pre><code>pip install twine wheel setuptools\npython setup.py sdist bdist_wheel\ntwine check dist/*\ntwine upload dist/*\n</code></pre>\n<h2>Changelog</h2>\n<h3>0.2</h3>\n<ul>\n<li>Rename Class because I misspelled it. \ud83d\ude44</li>\n</ul>\n\n          </div>"}, "last_serial": 6151647, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7b7f828bc816e1943b8d9e2bf6685af2", "sha256": "c04bdd89446d90831b184b253cd72d67f78e6f8d17574e2b6fab4af175ead7fb"}, "downloads": -1, "filename": "secretfinder-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b7f828bc816e1943b8d9e2bf6685af2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3686, "upload_time": "2019-10-24T18:05:31", "upload_time_iso_8601": "2019-10-24T18:05:31.282288Z", "url": "https://files.pythonhosted.org/packages/fe/22/d560f8fdb0c496c7822ca41a9dfbf2ee2e09ab85a38048404012e9af33eb/secretfinder-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cfc114bab645a0ca77e36a14f8dc238", "sha256": "6ea0c228fc71fd2661217bcf29ffe70eda9c11618497d4eac3b3285de4c88c73"}, "downloads": -1, "filename": "secretfinder-0.1.tar.gz", "has_sig": false, "md5_digest": "2cfc114bab645a0ca77e36a14f8dc238", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3541, "upload_time": "2019-10-24T18:05:33", "upload_time_iso_8601": "2019-10-24T18:05:33.494334Z", "url": "https://files.pythonhosted.org/packages/6d/fc/6a59ad280d5ad255c4a3cde905be18a8f05d6cc6596a6f9d0cb5c77736f8/secretfinder-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e3fdec1cc1f2a573dadce5f8e63cf1d9", "sha256": "15aaba0a49c3a86e43c9b8891516a836a29dcb38c0824c6440431b069b4582f5"}, "downloads": -1, "filename": "secretfinder-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e3fdec1cc1f2a573dadce5f8e63cf1d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4635, "upload_time": "2019-11-17T20:31:44", "upload_time_iso_8601": "2019-11-17T20:31:44.947915Z", "url": "https://files.pythonhosted.org/packages/c9/00/48e0d52b72d6577bafeee317476dd2101d4bfde04ebdf57a253ca75f6c6c/secretfinder-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "beed7564693a1d3e505b7b2cb79eb864", "sha256": "528177aa3685eaf2d386768fa2f2d78228d0f8722270cb3d6e2a1f8653c8538a"}, "downloads": -1, "filename": "secretfinder-0.2.tar.gz", "has_sig": false, "md5_digest": "beed7564693a1d3e505b7b2cb79eb864", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3697, "upload_time": "2019-11-17T20:31:47", "upload_time_iso_8601": "2019-11-17T20:31:47.829962Z", "url": "https://files.pythonhosted.org/packages/07/14/296cf2df443395d81714672e35edc79a4669c22c0cf6a73343ef4f666afe/secretfinder-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e3fdec1cc1f2a573dadce5f8e63cf1d9", "sha256": "15aaba0a49c3a86e43c9b8891516a836a29dcb38c0824c6440431b069b4582f5"}, "downloads": -1, "filename": "secretfinder-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e3fdec1cc1f2a573dadce5f8e63cf1d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4635, "upload_time": "2019-11-17T20:31:44", "upload_time_iso_8601": "2019-11-17T20:31:44.947915Z", "url": "https://files.pythonhosted.org/packages/c9/00/48e0d52b72d6577bafeee317476dd2101d4bfde04ebdf57a253ca75f6c6c/secretfinder-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "beed7564693a1d3e505b7b2cb79eb864", "sha256": "528177aa3685eaf2d386768fa2f2d78228d0f8722270cb3d6e2a1f8653c8538a"}, "downloads": -1, "filename": "secretfinder-0.2.tar.gz", "has_sig": false, "md5_digest": "beed7564693a1d3e505b7b2cb79eb864", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3697, "upload_time": "2019-11-17T20:31:47", "upload_time_iso_8601": "2019-11-17T20:31:47.829962Z", "url": "https://files.pythonhosted.org/packages/07/14/296cf2df443395d81714672e35edc79a4669c22c0cf6a73343ef4f666afe/secretfinder-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:59 2020"}