{"info": {"author": "Stefan Pfenninger", "author_email": "stefan@pfenninger.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://img.shields.io/travis/com/renewables-ninja/gsee/master.svg?style=flat-square)](https://travis-ci.com/renewables-ninja/gsee) [![Coverage](https://img.shields.io/coveralls/renewables-ninja/gsee.svg?style=flat-square)](https://coveralls.io/r/renewables-ninja/gsee) [![PyPI version](https://img.shields.io/pypi/v/gsee.svg?style=flat-square)](https://pypi.python.org/pypi/gsee)\n\n# GSEE: Global Solar Energy Estimator\n\n`GSEE` is a solar energy simulation library designed for rapid calculations and ease of use. [Renewables.ninja](https://www.renewables.ninja/) uses `GSEE`.\n\n## Requirements\n\nWorks only with Python 3. Required libraries:\n\n* [joblib](https://joblib.readthedocs.io/en/latest/)\n* [numpy](https://numpy.org/)\n* [pandas](https://pandas.pydata.org/)\n* [pyephem](https://pypi.org/project/ephem/)\n* [scipy](https://scipy.org/)\n* [xarray](https://xarray.pydata.org/)\n\n## Installation\n\nSimply install with `pip`:\n\n    pip install gsee\n\nThe recommended way to install the required scientific libraries is to use the [Anaconda Python distribution](https://www.continuum.io/downloads).\n\n**Known issue**: If you do not already have `numpy` installed, you will get a compiler error when pip tries to build to `climatedata_interface` Cython extension.\n\n## Functionality\n\nThe following submodules are available:\n\n* __``brl_model``__: an implementation of the BRL model, a method to derive the diffuse fraction of irradiance, based on Ridley et al. (2010)\n* __``climatedata_interface``__: an interface to use GSEE with annual, seasonal, monthly or daily data. See [docs/climatedata_interface](docs/climatedata_interface.md) for details.\n* __``pv``__: electric output from PV a panel\n* __``trigon``__: functions to calculate irradiance on an inclined plane\n\nA model can be imported like this: ``import gsee.pv``\n\nA plant simulation model implements a model class (e.g. ``PVPlant``) with the relevant settings, and a ``run_model()`` function that take time series data (a pandas Series) and runs a default instance of the model class, but can also take a ``model`` argument to specify a custom-configured model instance.\n\n## Examples\n\n### Power output from a PV system with fixed panels\n\nIn this example, ``data`` must be a pandas.DataFrame with columns ``global_horizontal`` (in W/m2), ``diffuse_fraction``, and optionally a ``temperature`` column for ambient air temperature (in degrees Celsius).\n\n```python\nresult = gsee.pv.run_model(\n    data,\n    coords=(22.78, 5.51),  # Latitude and longitude\n    tilt=30, # 30 degrees tilt angle\n    azim=180,  # facing towards equator,\n    tracking=0,  # fixed - no tracking\n    capacity=1000,  # 1000 W\n)\n```\n\n### Aperture irradiance on a panel with 2-axis tracking\n\n```python\nlocation = (22.78, 5.51)\nplane_irradiance = gsee.trigon.aperture_irradiance(\n    data['direct_horizontal'], data['diffuse_horizontal'],\n    location, tracking=2\n)\n```\n\n### Climate data Interface\n\nExample use directly reading NetCDF files with GHI, diffuse irradiance fraction, and temperature data:\n\n```python\nfrom gsee.climatedata_interface.interface import run_interface\n\nrun_interface(\n    ghi_data=('ghi_input.nc', 'ghi'),  # Tuple of (input file path, variable name)\n    diffuse_data=('diffuse_fraction_input.nc', 'diff_frac'),\n    temp_data=('temperature_input.nc', 't2m'),\n    outfile='output_file.nc',\n    params=dict(tilt=35, azim=180, tracking=0, capacity=1000),\n    frequency='detect'\n)\n```\n\nTilt can be given as a latitude-dependent function instead of static value:\n\n```python\nparams = dict(tilt=lambda lat: 0.35396 * lat + 16.84775, ...)\n```\n\nInstead of letting the climate data interface read and prepare data from NetCDF files, an `xarray.Dataset` can also be passed directly (e.g. when using the module in combination with a larger application):\n\n```python\nfrom gsee.climatedata_interface.interface import run_interface_from_dataset\n\nresult = run_interface_from_dataset(\n    data=my_dataset,  # my_dataset is an xarray.Dataset\n    params=dict(tilt=35, azim=180, tracking=0, capacity=1000)\n)\n```\n\nBy default, a built-in file with monthly probability density functions is automatically downloaded and used to generate synthetic daily irradiance.\n\nFor more information, see the [climate data interface documentation](docs/climatedata-interface.md).\n\n## Development\n\nTo install the latest development version directly from GitHub:\n\n    pip install -e git+https://github.com/renewables-ninja/gsee.git#egg=gsee\n\nTo build the `climatedata_interface` submodule [Cython >= 0.28.5](http://cython.org/) is required.\n\n## Credits and contact\n\nContact [Stefan Pfenninger](mailto:stefan.pfenninger@usys.ethz.ch) for questions about `GSEE`. `GSEE` is also a component of the [Renewables.ninja](https://www.renewables.ninja) project, developed by Stefan Pfenninger and Iain Staffell. Use the [contact page](https://www.renewables.ninja/about) there if you want more information about Renewables.ninja.\n\n## Citation\n\nIf you use `GSEE` or code derived from it in academic work, please cite:\n\nStefan Pfenninger and Iain Staffell (2016). Long-term patterns of European PV output using 30 years of validated hourly reanalysis and satellite data. *Energy* 114, pp. 1251-1265. [doi: 10.1016/j.energy.2016.08.060](https://doi.org/10.1016/j.energy.2016.08.060)\n\n## License\n\nBSD-3-Clause", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/renewables-ninja/gsee", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gsee", "package_url": "https://pypi.org/project/gsee/", "platform": "", "project_url": "https://pypi.org/project/gsee/", "project_urls": {"Homepage": "https://github.com/renewables-ninja/gsee"}, "release_url": "https://pypi.org/project/gsee/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "GSEE: Global Solar Energy Estimator", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/renewables-ninja/gsee\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d2bee200032391eaabdfc50055f8a09ace39dc8/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f72656e657761626c65732d6e696e6a612f677365652f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://coveralls.io/r/renewables-ninja/gsee\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1139e716e57b33aa42269b5ffc2c76bcdbf91bf/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f72656e657761626c65732d6e696e6a612f677365652e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.python.org/pypi/gsee\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bad74305fea2358b7ba557a8e93ce18d6b77e7e1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f677365652e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<h1>GSEE: Global Solar Energy Estimator</h1>\n<p><code>GSEE</code> is a solar energy simulation library designed for rapid calculations and ease of use. <a href=\"https://www.renewables.ninja/\" rel=\"nofollow\">Renewables.ninja</a> uses <code>GSEE</code>.</p>\n<h2>Requirements</h2>\n<p>Works only with Python 3. Required libraries:</p>\n<ul>\n<li><a href=\"https://joblib.readthedocs.io/en/latest/\" rel=\"nofollow\">joblib</a></li>\n<li><a href=\"https://numpy.org/\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas</a></li>\n<li><a href=\"https://pypi.org/project/ephem/\" rel=\"nofollow\">pyephem</a></li>\n<li><a href=\"https://scipy.org/\" rel=\"nofollow\">scipy</a></li>\n<li><a href=\"https://xarray.pydata.org/\" rel=\"nofollow\">xarray</a></li>\n</ul>\n<h2>Installation</h2>\n<p>Simply install with <code>pip</code>:</p>\n<pre><code>pip install gsee\n</code></pre>\n<p>The recommended way to install the required scientific libraries is to use the <a href=\"https://www.continuum.io/downloads\" rel=\"nofollow\">Anaconda Python distribution</a>.</p>\n<p><strong>Known issue</strong>: If you do not already have <code>numpy</code> installed, you will get a compiler error when pip tries to build to <code>climatedata_interface</code> Cython extension.</p>\n<h2>Functionality</h2>\n<p>The following submodules are available:</p>\n<ul>\n<li><strong><code>brl_model</code></strong>: an implementation of the BRL model, a method to derive the diffuse fraction of irradiance, based on Ridley et al. (2010)</li>\n<li><strong><code>climatedata_interface</code></strong>: an interface to use GSEE with annual, seasonal, monthly or daily data. See <a href=\"docs/climatedata_interface.md\" rel=\"nofollow\">docs/climatedata_interface</a> for details.</li>\n<li><strong><code>pv</code></strong>: electric output from PV a panel</li>\n<li><strong><code>trigon</code></strong>: functions to calculate irradiance on an inclined plane</li>\n</ul>\n<p>A model can be imported like this: <code>import gsee.pv</code></p>\n<p>A plant simulation model implements a model class (e.g. <code>PVPlant</code>) with the relevant settings, and a <code>run_model()</code> function that take time series data (a pandas Series) and runs a default instance of the model class, but can also take a <code>model</code> argument to specify a custom-configured model instance.</p>\n<h2>Examples</h2>\n<h3>Power output from a PV system with fixed panels</h3>\n<p>In this example, <code>data</code> must be a pandas.DataFrame with columns <code>global_horizontal</code> (in W/m2), <code>diffuse_fraction</code>, and optionally a <code>temperature</code> column for ambient air temperature (in degrees Celsius).</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">gsee</span><span class=\"o\">.</span><span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">run_model</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"p\">,</span>\n    <span class=\"n\">coords</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">22.78</span><span class=\"p\">,</span> <span class=\"mf\">5.51</span><span class=\"p\">),</span>  <span class=\"c1\"># Latitude and longitude</span>\n    <span class=\"n\">tilt</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"c1\"># 30 degrees tilt angle</span>\n    <span class=\"n\">azim</span><span class=\"o\">=</span><span class=\"mi\">180</span><span class=\"p\">,</span>  <span class=\"c1\"># facing towards equator,</span>\n    <span class=\"n\">tracking</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"c1\"># fixed - no tracking</span>\n    <span class=\"n\">capacity</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span>  <span class=\"c1\"># 1000 W</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Aperture irradiance on a panel with 2-axis tracking</h3>\n<pre><span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">22.78</span><span class=\"p\">,</span> <span class=\"mf\">5.51</span><span class=\"p\">)</span>\n<span class=\"n\">plane_irradiance</span> <span class=\"o\">=</span> <span class=\"n\">gsee</span><span class=\"o\">.</span><span class=\"n\">trigon</span><span class=\"o\">.</span><span class=\"n\">aperture_irradiance</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'direct_horizontal'</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'diffuse_horizontal'</span><span class=\"p\">],</span>\n    <span class=\"n\">location</span><span class=\"p\">,</span> <span class=\"n\">tracking</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Climate data Interface</h3>\n<p>Example use directly reading NetCDF files with GHI, diffuse irradiance fraction, and temperature data:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gsee.climatedata_interface.interface</span> <span class=\"kn\">import</span> <span class=\"n\">run_interface</span>\n\n<span class=\"n\">run_interface</span><span class=\"p\">(</span>\n    <span class=\"n\">ghi_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'ghi_input.nc'</span><span class=\"p\">,</span> <span class=\"s1\">'ghi'</span><span class=\"p\">),</span>  <span class=\"c1\"># Tuple of (input file path, variable name)</span>\n    <span class=\"n\">diffuse_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'diffuse_fraction_input.nc'</span><span class=\"p\">,</span> <span class=\"s1\">'diff_frac'</span><span class=\"p\">),</span>\n    <span class=\"n\">temp_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'temperature_input.nc'</span><span class=\"p\">,</span> <span class=\"s1\">'t2m'</span><span class=\"p\">),</span>\n    <span class=\"n\">outfile</span><span class=\"o\">=</span><span class=\"s1\">'output_file.nc'</span><span class=\"p\">,</span>\n    <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">tilt</span><span class=\"o\">=</span><span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"n\">azim</span><span class=\"o\">=</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"n\">tracking</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">),</span>\n    <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"s1\">'detect'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Tilt can be given as a latitude-dependent function instead of static value:</p>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">tilt</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">lat</span><span class=\"p\">:</span> <span class=\"mf\">0.35396</span> <span class=\"o\">*</span> <span class=\"n\">lat</span> <span class=\"o\">+</span> <span class=\"mf\">16.84775</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Instead of letting the climate data interface read and prepare data from NetCDF files, an <code>xarray.Dataset</code> can also be passed directly (e.g. when using the module in combination with a larger application):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gsee.climatedata_interface.interface</span> <span class=\"kn\">import</span> <span class=\"n\">run_interface_from_dataset</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run_interface_from_dataset</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">my_dataset</span><span class=\"p\">,</span>  <span class=\"c1\"># my_dataset is an xarray.Dataset</span>\n    <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">tilt</span><span class=\"o\">=</span><span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"n\">azim</span><span class=\"o\">=</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"n\">tracking</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>By default, a built-in file with monthly probability density functions is automatically downloaded and used to generate synthetic daily irradiance.</p>\n<p>For more information, see the <a href=\"docs/climatedata-interface.md\" rel=\"nofollow\">climate data interface documentation</a>.</p>\n<h2>Development</h2>\n<p>To install the latest development version directly from GitHub:</p>\n<pre><code>pip install -e git+https://github.com/renewables-ninja/gsee.git#egg=gsee\n</code></pre>\n<p>To build the <code>climatedata_interface</code> submodule <a href=\"http://cython.org/\" rel=\"nofollow\">Cython &gt;= 0.28.5</a> is required.</p>\n<h2>Credits and contact</h2>\n<p>Contact <a href=\"mailto:stefan.pfenninger@usys.ethz.ch\">Stefan Pfenninger</a> for questions about <code>GSEE</code>. <code>GSEE</code> is also a component of the <a href=\"https://www.renewables.ninja\" rel=\"nofollow\">Renewables.ninja</a> project, developed by Stefan Pfenninger and Iain Staffell. Use the <a href=\"https://www.renewables.ninja/about\" rel=\"nofollow\">contact page</a> there if you want more information about Renewables.ninja.</p>\n<h2>Citation</h2>\n<p>If you use <code>GSEE</code> or code derived from it in academic work, please cite:</p>\n<p>Stefan Pfenninger and Iain Staffell (2016). Long-term patterns of European PV output using 30 years of validated hourly reanalysis and satellite data. <em>Energy</em> 114, pp. 1251-1265. <a href=\"https://doi.org/10.1016/j.energy.2016.08.060\" rel=\"nofollow\">doi: 10.1016/j.energy.2016.08.060</a></p>\n<h2>License</h2>\n<p>BSD-3-Clause</p>\n\n          </div>"}, "last_serial": 5572218, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "1ed0566c1a8e1e7ed72a8833e6987428", "sha256": "496067feed0da325e76ab47324ae00c042080ae75f24d7695df341cfeec34ceb"}, "downloads": -1, "filename": "gsee-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1ed0566c1a8e1e7ed72a8833e6987428", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10846, "upload_time": "2018-08-10T09:51:54", "upload_time_iso_8601": "2018-08-10T09:51:54.602623Z", "url": "https://files.pythonhosted.org/packages/c5/0f/f2aa6d5adee7f18244e02b036bd82bca508a8e1ecb3d632ed350180c7f82/gsee-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "dad42e924cbbb7ffab1d9b19567095bf", "sha256": "aa03dd569ab3c492cb58d35e70ecadf081ac94d149b767941d043cedce975307"}, "downloads": -1, "filename": "gsee-0.2.1.tar.gz", "has_sig": false, "md5_digest": "dad42e924cbbb7ffab1d9b19567095bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10815, "upload_time": "2018-09-07T08:01:57", "upload_time_iso_8601": "2018-09-07T08:01:57.612210Z", "url": "https://files.pythonhosted.org/packages/a3/2f/e3b4ffd183defd71c9868ec33176bd96c653817a48dc8a5dfa01eb5829fa/gsee-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5cd08e2fa9f103712a4ced3f4d996a72", "sha256": "04d2d22533d310038ba27dbdb0371094624002a568efd14079c5978cf885e236"}, "downloads": -1, "filename": "gsee-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5cd08e2fa9f103712a4ced3f4d996a72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80656, "upload_time": "2018-12-19T09:10:57", "upload_time_iso_8601": "2018-12-19T09:10:57.037788Z", "url": "https://files.pythonhosted.org/packages/03/2d/bf8a0c5da5fcd6a65dcf699ca64c2efc11cc57351d82f07073c81222d1c7/gsee-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f94af572f78186b76e83b31ac4860c23", "sha256": "a20d24f85fb77276713ccd6a25df884a2de4195909532b7f36f91a3ec50ed8ea"}, "downloads": -1, "filename": "gsee-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f94af572f78186b76e83b31ac4860c23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80842, "upload_time": "2019-07-23T12:34:56", "upload_time_iso_8601": "2019-07-23T12:34:56.805433Z", "url": "https://files.pythonhosted.org/packages/7d/6a/5fc32751ea05af151080a219cecf416e19e6619e747cca421ed4a5524531/gsee-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f94af572f78186b76e83b31ac4860c23", "sha256": "a20d24f85fb77276713ccd6a25df884a2de4195909532b7f36f91a3ec50ed8ea"}, "downloads": -1, "filename": "gsee-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f94af572f78186b76e83b31ac4860c23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80842, "upload_time": "2019-07-23T12:34:56", "upload_time_iso_8601": "2019-07-23T12:34:56.805433Z", "url": "https://files.pythonhosted.org/packages/7d/6a/5fc32751ea05af151080a219cecf416e19e6619e747cca421ed4a5524531/gsee-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:42 2020"}