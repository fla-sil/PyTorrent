{"info": {"author": "Daniel Dunn", "author_email": "dannydunn@eternityforest.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# scullery\nPython library for things like media playback, thread pools, and a message bus. It is essentially the parts of KaithemAutomation\nthat make sense independantly.\n\nThere is a lot of functionality planned, but it's not at all neccesary to use or understand all of it to use one piece.\n\nYou will obviously need the Python Gstreamer bindings for those features(but not unrelated features), and several other\ndependancies.\n\n## Intro\nSee example.py for more details. Also see the equally simple audio and video player.\n\n## Testing\nWarning, takes over audio, starts JACK, makes noise:python3 -m unittest discover tests\n\nRunning just one test suite: python3 -m unittest tests/testFluidSynth.py\n8\n## Examples\n```python\nimport scullery.iceflow\nimport scullery.workers\n\n\n\"This file demonstrates a lot of scullery's functionality in a small package\"\n\n#Most things require this thread pool to be running\nscullery.workers.start()\n\n#Including just importing this, #Todo?\nimport scullery.messagebus\n\nimport scullery.persist\n\n\n\nclass NoiseWindow(scullery.iceflow.GStreamerPipeline):\n\tdef __init__(self):\n\t\tscullery.iceflow.GStreamerPipeline.__init__(self)\n\t\tself.addElement(\"videotestsrc\",pattern=\"snow\")\n\t\tself.addElement(\"autovideosink\")\n\nn = None\n#Start the gst pipeline\ndef subscriber(topic,val):\n    #Prevent GC\n    global n\n    n=NoiseWindow()\n    n.start()\n    print(\"started\")\n\n#Unsubscribe happens automatically if we don't keep a ref to the function\nscullery.messagebus.subscribe(\"/test/topic\",subscriber)\n\n#Post a message, the actual subscribers all run in the background worker pool\nscullery.messagebus.postMessage(\"/test/topic\",\"TestPayload\")\n\nimport time\n\n#Also supports YAML, txt, bin for the appropriate datatypes, if the YAML lib is there.\n#Can use .gz or .b2z to compress. Saved atomically with tilde files and UNIX rename semantics.\n#Checks if it actually needs to save before actually writing the file.\nimport os\n#Get an abs path\nfn = os.path.join(os.path.dirname(os.path.abspath(__file__)),\"testFile.json\")\nprint(\"Going to save data to: \"+fn)\nscullery.persist.save(myData,fn)\nassert scullery.persist.load(fn)==myData\n\n\n\nwhile(1):\n    time.sleep(1)\n```\n\n\n\n\n### scullery.iceflow.GStreamerPipeline\nThis is the base class for making GStreamer apps\n\n#### addElement(elementType, name=None, connectToOutput=None,**kwargs)\n\nAdds an element to the pipe and returns a weakref proxy. Normally, this will connect to the last added\nelement, but you can explicitly pass a an object to connect to. If the last object is a decodebin, it will be connected when a suitable pad\non that is available.\n\nThe `**kwargs` are used to set properties of the element.\n\n#### addPILCapture(resolution, connectToOutput=None,buffer=1)\nAdds a PILCapture object which acts like a video sink. It will buffer the most recent N frames, discarding as needed.\n\n##### PILCapture.pull()\nReturn a video frame as a PIL/Pillow Image. May return None on empty buffers.\n\n#### setProperty(element, property, value)\nSet a prop of an element, with some added nice features like converting strings to GstCaps where needed, and checking that filesrc locations are actually\nvalid files that exist.\n\n#### onMessage(source, name, structure)\nUsed for subclassing. Called when a message that has a structure is seen on the bus. Source is the GST elemeny, struct is dict-like, and name is a string.\n\n#### play()\nIf paused, start. If never started, raise an error.\n\n#### start()\nStart running\n\n#### stop()\n\nPermanently stop and clean up.\n\n#### pause()\n\nWhat it sounds like\n\n#### isActive()\n\nReturn True if playing or paused\n\n#### seek(t=None, rate=None)\nSeek to a time, set playback rate, or both.\n\n\n\n\n### scullery.jack\n\nThis submodule requires pyjack, and of course Jack. You should normally import this somewhere if using IceFlow with JACK.\n\n\n#### Message Bus activity\n\n##### /system/jack/newport\n A PortInfo object with a .name, isInput, and isOutput property gets posted here whenever a new port is added to JACK.\n\n##### /system/jack/delport\n A PortInfo object gets posted here whenever a port is unregistered.\n\n##### system/jack/started\nWhen jack is started or restarted\n\n\n\n#### Config:\n```\njackPeriods = 3\nperiodSize = 128\n\n#These apply to soundcards other than the main system card\nusbPeriodSize = 384\nusbLatency = 384\n\nrealtimePriority = 70\n\n#Do we want to run PulseAudio and the pulse jack backend?\nusePulse= True\n\nsharePulse = None\n\n#Should we create alsa_in and alsa_out ports for every soundcard, with persistant names?\nmanageSoundcards = True\n\n#Should we auto restart the jack process?\n#No by default, gets auto set to True by startJackServer()\nmanageJackProcess = False\n```\n\n\n#### sullery.jack.startManaging()\nStart the worker thread and enable management functions\n\n#### scullery.jack.startJackServer()\nActually start the jack server. They are separate because you may want to do this yourself.\n\n#### scullery.jack.Airwire(from,to)\nReturn an Airwire object. This is a declaration that you want to connect two clients or ports and keep them connected.\nIf you try to connect a client to a single port, all outputs get mixed down. Likewise a port to a client duplicates to all inputs.\n\nThey start in the disconnected state.\n\n\n#### scullery.jack.Airwire.connect()\nConnect and stay connected. Even if a client dissapears and comes back. Deleting the Airwire will disconnect.\nNote that manually disconnecting may not be undone, to prevent annoyance.\n\n#### scullery.jack.Airwire.disconnect()\nDisconnect.\n\n\n\n### scullery.fluidsynth\n\nThis module deals with MIDI synthesis\n\n### scullery.fluidsynth.FluidSynth(self, soundfont=None,jackClientName=None)\n\nCreates an instance of the FluidSynth soundfont synthesizer. Soundfont is an file path, or it defaults\nto one that sometimes ships with fluidsynth. if jackClientName is provided, outputs audio via JACK.\n\nYou don't have to worry about cleanup, that happens automatically on GC.\n\nUsing this without JACK may not work.\n\n#### fs.noteOn(channel,note,velocity)\n#### fs.noteOff(channel,note)\n#### fs.setInstrument(channel,instrument)\nSet the instrumemt. If instrument is str, we will use the closest match we can find, or raise an error.\n\n\n### scullery.units\nThis module deals with unit conversions.\n\n#### scullery.units.convert(value,fromUnit, toUnit)\nTry to convert the value, falling back to the (very slow) pint library for less common conversions not natively\nsupported.\n\n### scullery.netmedia\n\n#### scullery.netmedia.downloadVideo(vid, directory=\"~/Videos/IceFlow Cache\", format=\"bestvideo\", timeout=10)\n\nDownload a video based on a youtube-dl specifier, in the given format(\"bestaudio\") for audio only, and try to return the filename the moment the download begins.\n\n\nNothing else should ever be writing to this cache dir, aside from maybe manually putting in videos.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EternityForest/scullery", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "scullery", "package_url": "https://pypi.org/project/scullery/", "platform": "", "project_url": "https://pypi.org/project/scullery/", "project_urls": {"Homepage": "https://github.com/EternityForest/scullery"}, "release_url": "https://pypi.org/project/scullery/0.1.1/", "requires_dist": ["pyyaml", "typeguard", "sf2utils", "pyFluidSynth"], "requires_python": ">=3.6", "summary": "A utility library based on KaithemAutomation featuring a GStreamer wrapper", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>scullery</h1>\n<p>Python library for things like media playback, thread pools, and a message bus. It is essentially the parts of KaithemAutomation\nthat make sense independantly.</p>\n<p>There is a lot of functionality planned, but it's not at all neccesary to use or understand all of it to use one piece.</p>\n<p>You will obviously need the Python Gstreamer bindings for those features(but not unrelated features), and several other\ndependancies.</p>\n<h2>Intro</h2>\n<p>See example.py for more details. Also see the equally simple audio and video player.</p>\n<h2>Testing</h2>\n<p>Warning, takes over audio, starts JACK, makes noise:python3 -m unittest discover tests</p>\n<p>Running just one test suite: python3 -m unittest tests/testFluidSynth.py\n8</p>\n<h2>Examples</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scullery.iceflow</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scullery.workers</span>\n\n\n<span class=\"s2\">\"This file demonstrates a lot of scullery's functionality in a small package\"</span>\n\n<span class=\"c1\">#Most things require this thread pool to be running</span>\n<span class=\"n\">scullery</span><span class=\"o\">.</span><span class=\"n\">workers</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#Including just importing this, #Todo?</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scullery.messagebus</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">scullery.persist</span>\n\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NoiseWindow</span><span class=\"p\">(</span><span class=\"n\">scullery</span><span class=\"o\">.</span><span class=\"n\">iceflow</span><span class=\"o\">.</span><span class=\"n\">GStreamerPipeline</span><span class=\"p\">):</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">scullery</span><span class=\"o\">.</span><span class=\"n\">iceflow</span><span class=\"o\">.</span><span class=\"n\">GStreamerPipeline</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">addElement</span><span class=\"p\">(</span><span class=\"s2\">\"videotestsrc\"</span><span class=\"p\">,</span><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s2\">\"snow\"</span><span class=\"p\">)</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">addElement</span><span class=\"p\">(</span><span class=\"s2\">\"autovideosink\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"c1\">#Start the gst pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">subscriber</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">,</span><span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"c1\">#Prevent GC</span>\n    <span class=\"k\">global</span> <span class=\"n\">n</span>\n    <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">NoiseWindow</span><span class=\"p\">()</span>\n    <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"started\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Unsubscribe happens automatically if we don't keep a ref to the function</span>\n<span class=\"n\">scullery</span><span class=\"o\">.</span><span class=\"n\">messagebus</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s2\">\"/test/topic\"</span><span class=\"p\">,</span><span class=\"n\">subscriber</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Post a message, the actual subscribers all run in the background worker pool</span>\n<span class=\"n\">scullery</span><span class=\"o\">.</span><span class=\"n\">messagebus</span><span class=\"o\">.</span><span class=\"n\">postMessage</span><span class=\"p\">(</span><span class=\"s2\">\"/test/topic\"</span><span class=\"p\">,</span><span class=\"s2\">\"TestPayload\"</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"c1\">#Also supports YAML, txt, bin for the appropriate datatypes, if the YAML lib is there.</span>\n<span class=\"c1\">#Can use .gz or .b2z to compress. Saved atomically with tilde files and UNIX rename semantics.</span>\n<span class=\"c1\">#Checks if it actually needs to save before actually writing the file.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"c1\">#Get an abs path</span>\n<span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)),</span><span class=\"s2\">\"testFile.json\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Going to save data to: \"</span><span class=\"o\">+</span><span class=\"n\">fn</span><span class=\"p\">)</span>\n<span class=\"n\">scullery</span><span class=\"o\">.</span><span class=\"n\">persist</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">myData</span><span class=\"p\">,</span><span class=\"n\">fn</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">scullery</span><span class=\"o\">.</span><span class=\"n\">persist</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"n\">myData</span>\n\n\n\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h3>scullery.iceflow.GStreamerPipeline</h3>\n<p>This is the base class for making GStreamer apps</p>\n<h4>addElement(elementType, name=None, connectToOutput=None,**kwargs)</h4>\n<p>Adds an element to the pipe and returns a weakref proxy. Normally, this will connect to the last added\nelement, but you can explicitly pass a an object to connect to. If the last object is a decodebin, it will be connected when a suitable pad\non that is available.</p>\n<p>The <code>**kwargs</code> are used to set properties of the element.</p>\n<h4>addPILCapture(resolution, connectToOutput=None,buffer=1)</h4>\n<p>Adds a PILCapture object which acts like a video sink. It will buffer the most recent N frames, discarding as needed.</p>\n<h5>PILCapture.pull()</h5>\n<p>Return a video frame as a PIL/Pillow Image. May return None on empty buffers.</p>\n<h4>setProperty(element, property, value)</h4>\n<p>Set a prop of an element, with some added nice features like converting strings to GstCaps where needed, and checking that filesrc locations are actually\nvalid files that exist.</p>\n<h4>onMessage(source, name, structure)</h4>\n<p>Used for subclassing. Called when a message that has a structure is seen on the bus. Source is the GST elemeny, struct is dict-like, and name is a string.</p>\n<h4>play()</h4>\n<p>If paused, start. If never started, raise an error.</p>\n<h4>start()</h4>\n<p>Start running</p>\n<h4>stop()</h4>\n<p>Permanently stop and clean up.</p>\n<h4>pause()</h4>\n<p>What it sounds like</p>\n<h4>isActive()</h4>\n<p>Return True if playing or paused</p>\n<h4>seek(t=None, rate=None)</h4>\n<p>Seek to a time, set playback rate, or both.</p>\n<h3>scullery.jack</h3>\n<p>This submodule requires pyjack, and of course Jack. You should normally import this somewhere if using IceFlow with JACK.</p>\n<h4>Message Bus activity</h4>\n<h5>/system/jack/newport</h5>\n<p>A PortInfo object with a .name, isInput, and isOutput property gets posted here whenever a new port is added to JACK.</p>\n<h5>/system/jack/delport</h5>\n<p>A PortInfo object gets posted here whenever a port is unregistered.</p>\n<h5>system/jack/started</h5>\n<p>When jack is started or restarted</p>\n<h4>Config:</h4>\n<pre><code>jackPeriods = 3\nperiodSize = 128\n\n#These apply to soundcards other than the main system card\nusbPeriodSize = 384\nusbLatency = 384\n\nrealtimePriority = 70\n\n#Do we want to run PulseAudio and the pulse jack backend?\nusePulse= True\n\nsharePulse = None\n\n#Should we create alsa_in and alsa_out ports for every soundcard, with persistant names?\nmanageSoundcards = True\n\n#Should we auto restart the jack process?\n#No by default, gets auto set to True by startJackServer()\nmanageJackProcess = False\n</code></pre>\n<h4>sullery.jack.startManaging()</h4>\n<p>Start the worker thread and enable management functions</p>\n<h4>scullery.jack.startJackServer()</h4>\n<p>Actually start the jack server. They are separate because you may want to do this yourself.</p>\n<h4>scullery.jack.Airwire(from,to)</h4>\n<p>Return an Airwire object. This is a declaration that you want to connect two clients or ports and keep them connected.\nIf you try to connect a client to a single port, all outputs get mixed down. Likewise a port to a client duplicates to all inputs.</p>\n<p>They start in the disconnected state.</p>\n<h4>scullery.jack.Airwire.connect()</h4>\n<p>Connect and stay connected. Even if a client dissapears and comes back. Deleting the Airwire will disconnect.\nNote that manually disconnecting may not be undone, to prevent annoyance.</p>\n<h4>scullery.jack.Airwire.disconnect()</h4>\n<p>Disconnect.</p>\n<h3>scullery.fluidsynth</h3>\n<p>This module deals with MIDI synthesis</p>\n<h3>scullery.fluidsynth.FluidSynth(self, soundfont=None,jackClientName=None)</h3>\n<p>Creates an instance of the FluidSynth soundfont synthesizer. Soundfont is an file path, or it defaults\nto one that sometimes ships with fluidsynth. if jackClientName is provided, outputs audio via JACK.</p>\n<p>You don't have to worry about cleanup, that happens automatically on GC.</p>\n<p>Using this without JACK may not work.</p>\n<h4>fs.noteOn(channel,note,velocity)</h4>\n<h4>fs.noteOff(channel,note)</h4>\n<h4>fs.setInstrument(channel,instrument)</h4>\n<p>Set the instrumemt. If instrument is str, we will use the closest match we can find, or raise an error.</p>\n<h3>scullery.units</h3>\n<p>This module deals with unit conversions.</p>\n<h4>scullery.units.convert(value,fromUnit, toUnit)</h4>\n<p>Try to convert the value, falling back to the (very slow) pint library for less common conversions not natively\nsupported.</p>\n<h3>scullery.netmedia</h3>\n<h4>scullery.netmedia.downloadVideo(vid, directory=\"~/Videos/IceFlow Cache\", format=\"bestvideo\", timeout=10)</h4>\n<p>Download a video based on a youtube-dl specifier, in the given format(\"bestaudio\") for audio only, and try to return the filename the moment the download begins.</p>\n<p>Nothing else should ever be writing to this cache dir, aside from maybe manually putting in videos.</p>\n\n          </div>"}, "last_serial": 6644084, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "76830d048b5ce707c6764fa9bd4e227d", "sha256": "d1f621e1609db4044ad40265d07374b2d1b1056a0044d5fe20b1e3d3a2f063b9"}, "downloads": -1, "filename": "scullery-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "76830d048b5ce707c6764fa9bd4e227d", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 138024, "upload_time": "2020-02-17T05:11:59", "upload_time_iso_8601": "2020-02-17T05:11:59.364648Z", "url": "https://files.pythonhosted.org/packages/e5/18/91ff9e96b63bd3f432cbb2efe0901d17bee267f06237d28fa582d0a1b438/scullery-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae7a55d9cd2e1788756f481dbe1d41b7", "sha256": "db121f47427b217d81bd9b0440ba0babda1a31217ad782af052300a025383c85"}, "downloads": -1, "filename": "scullery-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ae7a55d9cd2e1788756f481dbe1d41b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 74281, "upload_time": "2020-02-11T13:04:17", "upload_time_iso_8601": "2020-02-11T13:04:17.364945Z", "url": "https://files.pythonhosted.org/packages/5b/00/afb0ac46b476b1d2023283ff5e17f50f1e0af38deab51b95e0247c5313c1/scullery-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b720e2091fcdce900b7da95a0ef23df0", "sha256": "34ccbae3e7985ffd275073243fdccfe1501ce3b72ee94a021d44762bba12e91d"}, "downloads": -1, "filename": "scullery-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b720e2091fcdce900b7da95a0ef23df0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 56380, "upload_time": "2020-02-11T13:04:20", "upload_time_iso_8601": "2020-02-11T13:04:20.751681Z", "url": "https://files.pythonhosted.org/packages/2e/6e/5aa87a88523aae9dc9b61757fce5b368d652a31aac8899aee8ca5dd0f6f7/scullery-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6aaf455d6efe9483c7170146cb358e06", "sha256": "cbdbb3b30bc828db6fc79950f61749401d445f2447a145dee92d8a7b1ad735ee"}, "downloads": -1, "filename": "scullery-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6aaf455d6efe9483c7170146cb358e06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 77072, "upload_time": "2020-02-17T05:11:55", "upload_time_iso_8601": "2020-02-17T05:11:55.672392Z", "url": "https://files.pythonhosted.org/packages/9c/a5/a2e6efa676ce32fcf14439983681e48ff7128f0b79b8d28a38271c20a9cf/scullery-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5bea134d6820b95b5cd1bd7f5ddf122", "sha256": "b8de0b3c25acc4d6769e7d3966da0c674772da36fac2a85879b80d0ec819cbc5"}, "downloads": -1, "filename": "scullery-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c5bea134d6820b95b5cd1bd7f5ddf122", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 59053, "upload_time": "2020-02-17T05:12:05", "upload_time_iso_8601": "2020-02-17T05:12:05.091389Z", "url": "https://files.pythonhosted.org/packages/22/02/d776111a7ddb2b408a8fe709bb62de6d413bb1f41690e7cb7d104137de0d/scullery-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6aaf455d6efe9483c7170146cb358e06", "sha256": "cbdbb3b30bc828db6fc79950f61749401d445f2447a145dee92d8a7b1ad735ee"}, "downloads": -1, "filename": "scullery-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6aaf455d6efe9483c7170146cb358e06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 77072, "upload_time": "2020-02-17T05:11:55", "upload_time_iso_8601": "2020-02-17T05:11:55.672392Z", "url": "https://files.pythonhosted.org/packages/9c/a5/a2e6efa676ce32fcf14439983681e48ff7128f0b79b8d28a38271c20a9cf/scullery-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5bea134d6820b95b5cd1bd7f5ddf122", "sha256": "b8de0b3c25acc4d6769e7d3966da0c674772da36fac2a85879b80d0ec819cbc5"}, "downloads": -1, "filename": "scullery-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c5bea134d6820b95b5cd1bd7f5ddf122", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 59053, "upload_time": "2020-02-17T05:12:05", "upload_time_iso_8601": "2020-02-17T05:12:05.091389Z", "url": "https://files.pythonhosted.org/packages/22/02/d776111a7ddb2b408a8fe709bb62de6d413bb1f41690e7cb7d104137de0d/scullery-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:24 2020"}