{"info": {"author": "Federico Capoano", "author_email": "f.capoano@cineca.it", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: System :: Networking"], "description": "django-netjsonconfig\n====================\n\n.. image:: https://travis-ci.org/openwisp/django-netjsonconfig.svg\n   :target: https://travis-ci.org/openwisp/django-netjsonconfig\n\n.. image:: https://coveralls.io/repos/openwisp/django-netjsonconfig/badge.svg\n  :target: https://coveralls.io/r/openwisp/django-netjsonconfig\n\n.. image:: https://requires.io/github/openwisp/django-netjsonconfig/requirements.svg?branch=master\n   :target: https://requires.io/github/openwisp/django-netjsonconfig/requirements/?branch=master\n   :alt: Requirements Status\n\n.. image:: https://badge.fury.io/py/django-netjsonconfig.svg\n   :target: http://badge.fury.io/py/django-netjsonconfig\n\n------------\n\nConfiguration manager for embedded devices, implemented as a reusable django-app.\n\nBased on the `NetJSON`_ format and the `netjsonconfig`_ library.\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-netjsonconfig/master/docs/images/adhoc-interface.png\n   :alt: adhoc interface\n\n------------\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-netjsonconfig/master/docs/images/preview.png\n   :alt: preview\n\n------------\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 3\n\n------------\n\nCurrent features\n----------------\n\n* **configuration management** for embedded devices supporting different firmwares:\n    - `OpenWRT <http://openwrt.org>`_\n    - `OpenWISP Firmware <https://github.com/openwisp/OpenWISP-Firmware>`_\n    - support for additional firmware can be added by `specifying custom backends <#netjsonconfig-backends>`_\n* **configuration editor** based on `JSON-Schema editor <https://github.com/jdorn/json-editor>`_\n* **advanced edit mode**: edit `NetJSON`_ *DeviceConfiguration* objects for maximum flexibility\n* **configuration templates**: reduce repetition to the minimum\n* **configuration context**: reference ansible-like variables in the configuration\n* **template tags**: tag templates to automate different types of auto-configurations (eg: mesh, WDS, 4G)\n* **simple HTTP resources**: allow devices to automatically download configuration updates\n* **VPN management**: easily create VPN servers and clients\n\nProject goals\n-------------\n\n* automate configuration management for embedded devices\n* allow to minimize repetition by using templates\n* provide base logic that can be extended by third-party apps (see\n  `Extending django-netjsonconfig <#extending-django-netjsonconfig>`_)\n* provide ways to support more firmwares by adding custom backends\n* keep the core as simple as possible\n\nDeploy it in production\n-----------------------\n\nAn automated installer is available at `ansible-openwisp2 <https://github.com/openwisp/ansible-openwisp2>`_.\n\nDependencies\n------------\n\n* Python >=3.6\n* OpenSSL\n\nInstall stable version from pypi\n--------------------------------\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install django-netjsonconfig\n\nInstall development version\n---------------------------\n\nInstall tarball:\n\n.. code-block:: shell\n\n    pip install https://github.com/openwisp/django-netjsonconfig/tarball/master\n\nAlternatively you can install via pip using git:\n\n.. code-block:: shell\n\n    pip install -e git+git://github.com/openwisp/django-netjsonconfig#egg=django-netjsonconfig\n\nIf you want to contribute, install your cloned fork:\n\n.. code-block:: shell\n\n    git clone git@github.com:<your_fork>/django-netjsonconfig.git\n    cd django-netjsonconfig\n    python setup.py develop\n\nSetup (integrate in an existing django project)\n-----------------------------------------------\n\nAdd ``django_netjsonconfig``, ``django.contrib.admin``, ``sortedm2m`` and ``reversion`` to\n``INSTALLED_APPS`` in the following order:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # other apps\n        'openwisp_utils.admin_theme',\n        'django_netjsonconfig',\n        # ensure the django admin comes after django-netjsonconfig\n        'django.contrib.admin',\n        'sortedm2m',\n        'reversion'  # optional, can be removed if not needed\n        # ...\n    ]\n\nAdd the controller URLs to your main ``urls.py``:\n\n.. code-block:: python\n\n    urlpatterns = [\n        # ... other urls in your project ...\n\n        # controller URLs\n        # used by devices to download/update their configuration\n        # keep the namespace argument unchanged\n        url(r'^', include('django_netjsonconfig.controller.urls', namespace='controller')),\n        # common URLs\n        # shared among django-netjsonconfig components\n        # keep the namespace argument unchanged\n        url(r'^', include('django_netjsonconfig.urls', namespace='netjsonconfig')),\n    ]\n\nThen run:\n\n.. code-block:: shell\n\n    ./manage.py migrate\n\nInstalling for development\n--------------------------\n\nInstall sqlite:\n\n.. code-block:: shell\n\n    sudo apt-get install sqlite3 libsqlite3-dev openssl libssl-dev\n\nInstall your forked repo:\n\n.. code-block:: shell\n\n    git clone git://github.com/<your_fork>/django-netjsonconfig\n    cd django-netjsonconfig/\n    python setup.py develop\n\nInstall test requirements:\n\n.. code-block:: shell\n\n    pip install -r requirements-test.txt\n\nCreate database:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nLaunch development server:\n\n.. code-block:: shell\n\n    ./manage.py runserver\n\nYou can access the admin interface at http://127.0.0.1:8000/admin/.\n\nRun tests with:\n\n.. code-block:: shell\n\n    ./runtests.py\n\nSettings\n--------\n\n``NETJSONCONFIG_BACKENDS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------------------------------------------+\n| **type**:    | ``tuple``                                     |\n+--------------+-----------------------------------------------+\n| **default**: | .. code-block:: python                        |\n|              |                                               |\n|              |   (                                           |\n|              |     ('netjsonconfig.OpenWrt', 'OpenWRT'),     |\n|              |     ('netjsonconfig.OpenWisp', 'OpenWISP'),   |\n|              |   )                                           |\n+--------------+-----------------------------------------------+\n\nAvailable configuration backends. For more information, see `netjsonconfig backends\n<http://netjsonconfig.openwisp.org/en/latest/general/basics.html#backend>`_.\n\n``NETJSONCONFIG_VPN_BACKENDS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------------------------------------------------------------+\n| **type**:    | ``tuple``                                                      |\n+--------------+----------------------------------------------------------------+\n| **default**: | .. code-block:: python                                         |\n|              |                                                                |\n|              |   (                                                            |\n|              |     ('django_netjsonconfig.vpn_backends.OpenVpn', 'OpenVPN'),  |\n|              |   )                                                            |\n+--------------+----------------------------------------------------------------+\n\nAvailable VPN backends for VPN Server objects. For more information, see `OpenVPN netjsonconfig backend\n<http://netjsonconfig.openwisp.org/en/latest/backends/openvpn.html>`_.\n\nA VPN backend must follow some basic rules in order to be compatible with *django-netjsonconfig*:\n\n* it MUST allow at minimum and at maximum one VPN instance\n* the main *NetJSON* property MUST match the lowercase version of the class name,\n  eg: when using the ``OpenVpn`` backend, the system will look into\n  ``config['openvpn']``\n* it SHOULD focus on the server capabilities of the VPN software being used\n\n``NETJSONCONFIG_DEFAULT_BACKEND``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------------------------------+\n| **type**:    | ``str``                          |\n+--------------+----------------------------------+\n| **default**: | ``NETJSONCONFIG_BACKENDS[0][0]`` |\n+--------------+----------------------------------+\n\nThe preferred backend that will be used as initial value when adding new ``Config`` or\n``Template`` objects in the admin.\n\nThis setting defaults to the raw value of the first item in the ``NETJSONCONFIG_BACKENDS`` setting,\nwhich is ``netjsonconfig.OpenWrt``.\n\nSetting it to ``None`` will force the user to choose explicitly.\n\n``NETJSONCONFIG_DEFAULT_VPN_BACKEND``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------------------+\n| **type**:    | ``str``                              |\n+--------------+--------------------------------------+\n| **default**: | ``NETJSONCONFIG_VPN_BACKENDS[0][0]`` |\n+--------------+--------------------------------------+\n\nThe preferred backend that will be used as initial value when adding new ``Vpn`` objects in the admin.\n\nThis setting defaults to the raw value of the first item in the ``NETJSONCONFIG_VPN_BACKENDS`` setting,\nwhich is ``django_netjsonconfig.vpn_backends.OpenVpn``.\n\nSetting it to ``None`` will force the user to choose explicitly.\n\n``NETJSONCONFIG_REGISTRATION_ENABLED``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``True``    |\n+--------------+-------------+\n\nWhether devices can automatically register through the controller or not.\n\nThis feature is enabled by default.\n\nAutoregistration must be supported on the devices in order to work, see `openwisp-config automatic\nregistration <https://github.com/openwisp/openwisp-config#automatic-registration>`_ for more information.\n\n``NETJSONCONFIG_CONSISTENT_REGISTRATION``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``True``    |\n+--------------+-------------+\n\nWhether devices that are already registered are recognized when reflashed or reset, hence keeping\nthe existing configuration without creating a new one.\n\nThis feature is enabled by default.\n\nAutoregistration must be enabled also on the devices in order to work, see `openwisp-config\nconsistent key generation <https://github.com/openwisp/openwisp-config#consistent-key-generation>`_\nfor more information.\n\n``NETJSONCONFIG_REGISTRATION_SELF_CREATION``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``True``    |\n+--------------+-------------+\n\nWhether devices that are not already present in the system are allowed to register or not.\n\nTurn this off if you still want to use auto-registration to avoid having to\nmanually set the device UUID and key in its configuration file but also want\nto avoid indiscriminate registration of new devices without explicit permission.\n\n``NETJSONCONFIG_SHARED_SECRET``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------+\n| **type**:    | ``str``          |\n+--------------+------------------+\n| **default**: | ``\"\"``           |\n+--------------+------------------+\n\nA secret key which must be used by devices to perform `automatic registration\n<https://github.com/openwisp/openwisp-config#automatic-registration>`_.\n\nThis key MUST be explicitly set in production (if ``settings.DEBUG is False``), otherwise\nan ``ImproperlyConfigured`` exception will be raised on startup.\n\n``NETJSONCONFIG_CONTEXT``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------+\n| **type**:    | ``dict``         |\n+--------------+------------------+\n| **default**: | ``{}``           |\n+--------------+------------------+\n\nAdditional context that is passed to the default context of each ``Config`` object.\n\nEach ``Config`` object gets the following attributes passed as configuration variables:\n\n* ``id``\n* ``key``\n* ``name``\n* ``mac_address``\n\n``NETJSONCONFIG_CONTEXT`` can be used to define system-wide configuration variables.\n\nFor more information, see `netjsonconfig context: configuration variables\n<http://netjsonconfig.openwisp.org/en/latest/general/basics.html#context-configuration-variables>`_.\n\n``NETJSONCONFIG_DEFAULT_AUTO_CERT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+---------------------------+\n| **type**:    | ``bool``                  |\n+--------------+---------------------------+\n| **default**: | ``True``                  |\n+--------------+---------------------------+\n\nThe default value of the ``auto_cert`` field for new ``Template`` objects.\n\nThe ``auto_cert`` field is valid only for templates which have ``type``\nset to ``VPN`` and indicates whether a new x509 certificate should be created\nautomatically for each configuration using that template.\n\nThe automatically created certificates will also be removed when they are not\nneeded anymore (eg: when the VPN template is removed from a configuration object).\n\n``NETJSONCONFIG_CERT_PATH``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+---------------------------+\n| **type**:    | ``str``                   |\n+--------------+---------------------------+\n| **default**: | ``/etc/x509``             |\n+--------------+---------------------------+\n\nThe filesystem path where x509 certificate will be installed when\ndownloaded on routers when ``auto_cert`` is being used (enabled by default).\n\n``NETJSONCONFIG_COMMON_NAME_FORMAT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------------------+\n| **type**:    | ``str``                      |\n+--------------+------------------------------+\n| **default**: | ``{mac_address}-{name}``     |\n+--------------+------------------------------+\n\nDefines the format of the ``common_name`` attribute of VPN client certificates that are automatically\ncreated when using VPN templates which have ``auto_cert`` set to ``True``.\n\n``NETJSONCONFIG_MANAGEMENT_IP_DEVICE_LIST``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------------------+\n| **type**:    | ``bool``                     |\n+--------------+------------------------------+\n| **default**: | ``True``                     |\n+--------------+------------------------------+\n\nIn the device list page, the column ``IP`` will show the ``management_ip`` if\navailable, defaulting to ``last_ip`` otherwise.\n\nIf this setting is set to ``False`` the ``management_ip`` won't be shown\nin the device list page even if present, it will be shown only in the device\ndetail page.\n\nYou may set this to ``False`` if for some reason the majority of your user\ndoesn't care about the management ip address.\n\n``NETJSONCONFIG_BACKEND_DEVICE_LIST``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------------------+\n| **type**:    | ``bool``                     |\n+--------------+------------------------------+\n| **default**: | ``True``                     |\n+--------------+------------------------------+\n\nIn the device list page, the column ``backend`` and the backend filter are\nshown by default.\n\nIf this setting is set to ``False`` these items will be removed from the UI.\n\nYou may set this to ``False`` if you are using only one configuration backend\nand having this UI element doesn't add any value to your users.\n\n``NETJSONCONFIG_HARDWARE_ID_ENABLED``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``False``   |\n+--------------+-------------+\n\nThe field ``hardware_id`` can be used to store a unique hardware id, for example a serial number.\n\nIf this setting is set to ``True`` then this field will be shown first in the device list page\nand in the add/edit device page.\n\nThis feature is disabled by default.\n\n``NETJSONCONFIG_HARDWARE_ID_OPTIONS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------------------------------------+\n| **type**:    | ``dict``                                               |\n+--------------+--------------------------------------------------------+\n| **default**: | .. code-block:: python                                 |\n|              |                                                        |\n|              |    {                                                   |\n|              |        'blank': not NETJSONCONFIG_HARDWARE_ID_ENABLED, |\n|              |        'null': True,                                   |\n|              |        'max_length': 32,                               |\n|              |        'unique': True,                                 |\n|              |        'verbose_name': _('Serial number'),             |\n|              |        'help_text': _('Serial number of this device')  |\n|              |    }                                                   |\n+--------------+--------------------------------------------------------+\n\nOptions for the model field ``hardware_id``.\n\n* ``blank``: wether the field is allowed to be blank\n* ``null``: wether an empty value will be stored as ``NULL`` in the database\n* ``max_length``: maximum length of the field\n* ``unique``: wether the value of the field must be unique\n* ``verbose_name``: text for the human readable label of the field\n* ``help_text``: help text to be displayed with the field\n\n``NETJSONCONFIG_HARDWARE_ID_AS_NAME``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``False``   |\n+--------------+-------------+\n\nWhen the hardware ID feature is enabled, devices will be referenced with\ntheir hardware ID instead of their name.\n\nIf you still want to reference devices by their name, set this to ``True``.\n\nExtending django-netjsonconfig\n------------------------------\n\n*django-netjsonconfig* provides a set of models, admin classes and generic views which can be imported,\nextended and reused by third party apps.\n\nTo extend *django-netjsonconfig*, **you MUST NOT** add it to ``settings.INSTALLED_APPS``,\nbut you must create your own app (which goes into ``settings.INSTALLED_APPS``), import the\nbase classes from django-netjsonconfig and add your customizations.\n\nIn order to help django find the static files and templates of *django-netjsonconfig*,\nyou need to perform the steps described below.\n\n1. Add ``EXTENDED_APPS``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd the following to your ``settings.py``:\n\n.. code-block:: python\n\n    EXTENDED_APPS = ('django_netjsonconfig', 'django_x509',)\n\n2. Add ``openwisp_utils.staticfiles.DependencyFinder``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.staticfiles.DependencyFinder`` to\n``STATICFILES_FINDERS`` in your ``settings.py``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\n3. Add ``openwisp_utils.loaders.DependencyLoader``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.loaders.DependencyLoader`` to ``TEMPLATES`` in your ``settings.py``:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                    'openwisp_utils.loaders.DependencyLoader',\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n            },\n        }\n    ]\n\nExtending models\n~~~~~~~~~~~~~~~~\n\nThis example provides an example of how to extend the base models of\n*django-netjsonconfig* by adding a relation to another django model named `Organization`.\n\n.. code-block:: python\n\n    # models.py of your custom ``config`` app\n    from django.db import models\n    from sortedm2m.fields import SortedManyToManyField\n    from taggit.managers import TaggableManager\n\n    from django_netjsonconfig.base.config import AbstractConfig, TemplatesVpnMixin\n    from django_netjsonconfig.base.tag import AbstractTaggedTemplate, AbstractTemplateTag\n    from django_netjsonconfig.base.template import AbstractTemplate\n    from django_netjsonconfig.base.vpn import AbstractVpn, AbstractVpnClient\n\n    # the model ``organizations.Organization`` is omitted for brevity\n    # if you are curious to see a real implementation, check out django-organizations\n    # https://github.com/bennylope/django-organizations\n\n    class OrganizationMixin(models.Model):\n        organization = models.ForeignKey('organizations.Organization')\n\n        class Meta:\n            abstract = True\n\n\n    class Config(OrganizationMixin, TemplatesVpnMixin, AbstractConfig):\n        templates = SortedManyToManyField('config.Template',\n                                          related_name='config_relations',\n                                          blank=True)\n        vpn = models.ManyToManyField('config.Vpn',\n                                     through='config.VpnClient',\n                                     related_name='vpn_relations',\n                                     blank=True)\n\n        def clean(self):\n            # your own validation logic here...\n            pass\n\n        class Meta(AbstractConfig.Meta):\n            abstract = False\n\n\n    class TemplateTag(AbstractTemplateTag):\n        class Meta(AbstractTemplateTag.Meta):\n            abstract = False\n\n\n    class TaggedTemplate(AbstractTaggedTemplate):\n        tag = models.ForeignKey('config.TemplateTag',\n                                related_name='%(app_label)s_%(class)s_items',\n                                on_delete=models.CASCADE)\n\n        class Meta(AbstractTaggedTemplate.Meta):\n            abstract = False\n\n\n    class Template(OrganizationMixin, AbstractTemplate):\n        tags = TaggableManager(through='config.TaggedTemplate', blank=True)\n        vpn = models.ForeignKey('config.Vpn', blank=True, null=True)\n\n        def clean(self):\n            # your own validation logic here...\n            pass\n\n        class Meta(AbstractTemplate.Meta):\n            abstract = False\n\n\n    class Vpn(OrganizationMixin, AbstractVpn):\n        class Meta(AbstractVpn.Meta):\n            abstract = False\n\n\n    class VpnClient(AbstractVpnClient):\n        config = models.ForeignKey('config.Config', on_delete=models.CASCADE)\n        vpn = models.ForeignKey('config.Vpn', on_delete=models.CASCADE)\n        cert = models.OneToOneField('django_x509.Cert',\n                                    on_delete=models.CASCADE,\n                                    blank=True,\n                                    null=True)\n\n        class Meta(AbstractVpnClient.Meta):\n            abstract = False\n\nExtending the admin\n~~~~~~~~~~~~~~~~~~~\n\nFollowing the previous ``Organization`` example, you can avoid duplicating the admin\ncode by importing the base admin classes and registering your models with.\n\n.. code-block:: python\n\n    # admin.py of your app\n    # these are your custom models, they must be imported before the abstract admin classes\n    from .models import Config, Template, Vpn\n\n    from django.contrib import admin\n    from django_netjsonconfig.base.admin import (AbstractConfigAdmin,\n                                                 AbstractConfigForm,\n                                                 AbstractTemplateAdmin,\n                                                 AbstractVpnAdmin,\n                                                 AbstractVpnForm,\n                                                 BaseForm)\n\n\n    class ConfigForm(AbstractConfigForm):\n        class Meta(AbstractConfigForm.Meta):\n            model = Config\n\n\n    class ConfigAdmin(AbstractConfigAdmin):\n        form = ConfigForm\n\n\n    class TemplateForm(BaseForm):\n        class Meta(BaseForm.Meta):\n            model = Template\n\n\n    class TemplateAdmin(AbstractTemplateAdmin):\n        form = TemplateForm\n\n\n    class VpnForm(AbstractVpnForm):\n        class Meta(AbstractVpnForm.Meta):\n            model = Vpn\n\n\n    class VpnAdmin(AbstractVpnAdmin):\n        form = VpnForm\n\n\n    admin.site.register(Config, ConfigAdmin)\n    admin.site.register(Template, TemplateAdmin)\n    admin.site.register(Vpn, VpnAdmin)\n\nExtending controller views\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf your use case doesn't vary a lot from the base one, you may also want\nto try to reuse the controller views:\n\n.. code-block:: python\n\n    # your_config_app.controller.views\n    from ..models import Device, Vpn\n    from django_netjsonconfig.controller.generics import (BaseDeviceChecksumView, BaseDeviceDownloadConfigView,\n                                                          BaseDeviceRegisterView, BaseDeviceReportStatusView,\n                                                          BaseVpnChecksumView, BaseVpnDownloadConfigView)\n\n    class DeviceChecksumView(BaseDeviceChecksumView):\n        model = Device\n\n\n    class DeviceDownloadConfigView(BaseDeviceDownloadConfigView):\n        model = Device\n\n\n    class DeviceReportStatusView(BaseDeviceReportStatusView):\n        model = Device\n\n\n    class DeviceRegisterView(BaseDeviceRegisterView):\n        model = Device\n\n\n    class VpnChecksumView(BaseVpnChecksumView):\n        model = Vpn\n\n\n    class VpnDownloadConfigView(BaseVpnDownloadConfigView):\n        model = Vpn\n\n\n    device_checksum = DeviceChecksumView.as_view()\n    device_download_config = DeviceDownloadConfigView.as_view()\n    device_report_status = DeviceReportStatusView.as_view()\n    device_register = DeviceRegisterView.as_view()\n    vpn_checksum = VpnChecksumView.as_view()\n    vpn_download_config = VpnDownloadConfigView.as_view()\n\nController URLs\n~~~~~~~~~~~~~~~\n\nIf you are not making drastic changes to the controller views, you can avoid duplicating the URL\nlogic by using the ``get_controller_urls`` function. Put this in your controller ``urls.py``:\n\n.. code-block:: python\n\n    # your_config_app.controller.urls\n    from django_netjsonconfig.utils import get_controller_urls\n    from . import views\n\n    urlpatterns = get_controller_urls(views)\n\nExtending AppConfig\n~~~~~~~~~~~~~~~~~~~\n\nYou may want to reuse the ``AppConfig`` class of *django-netjsonconfig* too:\n\n.. code-block:: python\n\n    from django_netjsonconfig.apps import DjangoNetjsonconfigApp\n\n\n    class MyOwnConfig(DjangoNetjsonconfigApp):\n        name = 'yourapp.config'\n        label = 'config'\n\n        def __setmodels__(self):\n            from .models import Config, VpnClient  # these are your custom models\n            self.config_model = Config\n            self.vpnclient_model = VpnClient\n\nReal world extensions of django-netjsonconfig\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor full working examples of django proejcts which extend *django-netjsonconfig*, see:\n\n- `openwisp/openwisp-controller <https://github.com/openwisp/openwisp-controller>`_\n- `innovationgarage/extendnetjson_project <https://github.com/innovationgarage/extendnetjson_project>`_\n\nScreenshots\n-----------\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-netjsonconfig/master/docs/images/configuration-ui.png\n   :alt: configuration item\n\n------------\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-netjsonconfig/master/docs/images/bridge.png\n   :alt: bridge\n\n------------\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-netjsonconfig/master/docs/images/radio.png\n   :alt: radio\n\n------------\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-netjsonconfig/master/docs/images/wpa-enterprise.png\n  :alt: wpa enterprise\n\n------------\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-netjsonconfig/master/docs/images/preview.png\n  :alt: preview\n\n------------\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-netjsonconfig/master/docs/images/adhoc-interface.png\n   :alt: adhoc interface\n\nContributing\n------------\n\n1. Announce your intentions in the `OpenWISP Mailing List <https://groups.google.com/d/forum/openwisp>`_\n2. Fork this repo and install it\n3. Follow `PEP8, Style Guide for Python Code`_\n4. Write code\n5. Write tests for your code\n6. Ensure all tests pass\n7. Ensure test coverage does not decrease\n8. Document your changes\n9. Send pull request\n\n.. _PEP8, Style Guide for Python Code: http://www.python.org/dev/peps/pep-0008/\n.. _NetJSON: http://netjson.org\n.. _netjsonconfig: http://netjsonconfig.openwisp.org\n\nChangelog\n---------\n\nSee `CHANGES <https://github.com/openwisp/django-netjsonconfig/blob/master/CHANGES.rst>`_.\n\nLicense\n-------\n\nSee `LICENSE <https://github.com/openwisp/django-netjsonconfig/blob/master/LICENSE>`_.\n\nSupport\n-------\n\nSee `OpenWISP Support Channels <http://openwisp.org/support.html>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/openwisp/django-netjsonconfig/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://netjson.org", "keywords": "django,netjson,openwrt,networking,openwisp", "license": "GPL3", "maintainer": "", "maintainer_email": "", "name": "django-netjsonconfig", "package_url": "https://pypi.org/project/django-netjsonconfig/", "platform": "Platform Independent", "project_url": "https://pypi.org/project/django-netjsonconfig/", "project_urls": {"Download": "https://github.com/openwisp/django-netjsonconfig/releases", "Homepage": "http://netjson.org"}, "release_url": "https://pypi.org/project/django-netjsonconfig/0.11/", "requires_dist": ["django (<3.1,>=2.2)", "django-model-utils (>=4.0)", "netjsonconfig (<0.8.0,>=0.7.0)", "django-sortedm2m (<3.1.0,>=3.0.0)", "django-reversion (<3.1.0,>=3.0.5)", "django-x509 (<0.7.0,>=0.6.2)", "django-taggit (<1.3.0,>=0.24.0)", "openwisp-utils (<0.5.0,>=0.4.4)"], "requires_python": "", "summary": "Configuration manager for embedded devices, implemented as a reusable django-app", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/openwisp/django-netjsonconfig\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/openwisp/django-netjsonconfig.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04a02fae1c078bad909a648d0e893476006a5453/68747470733a2f2f7472617669732d63692e6f72672f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672e737667\"></a>\n<a href=\"https://coveralls.io/r/openwisp/django-netjsonconfig\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/openwisp/django-netjsonconfig/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1719588f353dbb538d27ec2f4a4b9dba90e1d33/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f62616467652e737667\"></a>\n<a href=\"https://requires.io/github/openwisp/django-netjsonconfig/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/648ee5ecf30f7228a50622db69295d0f8eb58376/68747470733a2f2f72657175697265732e696f2f6769746875622f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://badge.fury.io/py/django-netjsonconfig\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-netjsonconfig.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/085ea74e4be055956e8d94d675bb95b8e4f6c365/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d6e65746a736f6e636f6e6669672e737667\"></a>\n<hr class=\"docutils\">\n<p>Configuration manager for embedded devices, implemented as a reusable django-app.</p>\n<p>Based on the <a href=\"http://netjson.org\" rel=\"nofollow\">NetJSON</a> format and the <a href=\"http://netjsonconfig.openwisp.org\" rel=\"nofollow\">netjsonconfig</a> library.</p>\n<img alt=\"adhoc interface\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e979d233213f0fdbdf89854a40a3c6e8aa9b2e93/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f6d61737465722f646f63732f696d616765732f6164686f632d696e746572666163652e706e67\">\n<hr class=\"docutils\">\n<img alt=\"preview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ddbba74a00b3abe15677e658ac8b8ca1e712bb4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f6d61737465722f646f63732f696d616765732f707265766965772e706e67\">\n<hr class=\"docutils\">\n<div id=\"table-of-contents\">\n<p><strong>Table of Contents</strong>:</p>\n<ul>\n<li><a href=\"#current-features\" id=\"id4\" rel=\"nofollow\">Current features</a></li>\n<li><a href=\"#project-goals\" id=\"id5\" rel=\"nofollow\">Project goals</a></li>\n<li><a href=\"#deploy-it-in-production\" id=\"id6\" rel=\"nofollow\">Deploy it in production</a></li>\n<li><a href=\"#dependencies\" id=\"id7\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#install-stable-version-from-pypi\" id=\"id8\" rel=\"nofollow\">Install stable version from pypi</a></li>\n<li><a href=\"#install-development-version\" id=\"id9\" rel=\"nofollow\">Install development version</a></li>\n<li><a href=\"#setup-integrate-in-an-existing-django-project\" id=\"id10\" rel=\"nofollow\">Setup (integrate in an existing django project)</a></li>\n<li><a href=\"#installing-for-development\" id=\"id11\" rel=\"nofollow\">Installing for development</a></li>\n<li><a href=\"#settings\" id=\"id12\" rel=\"nofollow\">Settings</a><ul>\n<li><a href=\"#netjsonconfig-backends\" id=\"id13\" rel=\"nofollow\"><tt>NETJSONCONFIG_BACKENDS</tt></a></li>\n<li><a href=\"#netjsonconfig-vpn-backends\" id=\"id14\" rel=\"nofollow\"><tt>NETJSONCONFIG_VPN_BACKENDS</tt></a></li>\n<li><a href=\"#netjsonconfig-default-backend\" id=\"id15\" rel=\"nofollow\"><tt>NETJSONCONFIG_DEFAULT_BACKEND</tt></a></li>\n<li><a href=\"#netjsonconfig-default-vpn-backend\" id=\"id16\" rel=\"nofollow\"><tt>NETJSONCONFIG_DEFAULT_VPN_BACKEND</tt></a></li>\n<li><a href=\"#netjsonconfig-registration-enabled\" id=\"id17\" rel=\"nofollow\"><tt>NETJSONCONFIG_REGISTRATION_ENABLED</tt></a></li>\n<li><a href=\"#netjsonconfig-consistent-registration\" id=\"id18\" rel=\"nofollow\"><tt>NETJSONCONFIG_CONSISTENT_REGISTRATION</tt></a></li>\n<li><a href=\"#netjsonconfig-registration-self-creation\" id=\"id19\" rel=\"nofollow\"><tt>NETJSONCONFIG_REGISTRATION_SELF_CREATION</tt></a></li>\n<li><a href=\"#netjsonconfig-shared-secret\" id=\"id20\" rel=\"nofollow\"><tt>NETJSONCONFIG_SHARED_SECRET</tt></a></li>\n<li><a href=\"#netjsonconfig-context\" id=\"id21\" rel=\"nofollow\"><tt>NETJSONCONFIG_CONTEXT</tt></a></li>\n<li><a href=\"#netjsonconfig-default-auto-cert\" id=\"id22\" rel=\"nofollow\"><tt>NETJSONCONFIG_DEFAULT_AUTO_CERT</tt></a></li>\n<li><a href=\"#netjsonconfig-cert-path\" id=\"id23\" rel=\"nofollow\"><tt>NETJSONCONFIG_CERT_PATH</tt></a></li>\n<li><a href=\"#netjsonconfig-common-name-format\" id=\"id24\" rel=\"nofollow\"><tt>NETJSONCONFIG_COMMON_NAME_FORMAT</tt></a></li>\n<li><a href=\"#netjsonconfig-management-ip-device-list\" id=\"id25\" rel=\"nofollow\"><tt>NETJSONCONFIG_MANAGEMENT_IP_DEVICE_LIST</tt></a></li>\n<li><a href=\"#netjsonconfig-backend-device-list\" id=\"id26\" rel=\"nofollow\"><tt>NETJSONCONFIG_BACKEND_DEVICE_LIST</tt></a></li>\n<li><a href=\"#netjsonconfig-hardware-id-enabled\" id=\"id27\" rel=\"nofollow\"><tt>NETJSONCONFIG_HARDWARE_ID_ENABLED</tt></a></li>\n<li><a href=\"#netjsonconfig-hardware-id-options\" id=\"id28\" rel=\"nofollow\"><tt>NETJSONCONFIG_HARDWARE_ID_OPTIONS</tt></a></li>\n<li><a href=\"#netjsonconfig-hardware-id-as-name\" id=\"id29\" rel=\"nofollow\"><tt>NETJSONCONFIG_HARDWARE_ID_AS_NAME</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#id2\" id=\"id30\" rel=\"nofollow\">Extending django-netjsonconfig</a><ul>\n<li><a href=\"#add-extended-apps\" id=\"id31\" rel=\"nofollow\">1. Add <tt>EXTENDED_APPS</tt></a></li>\n<li><a href=\"#add-openwisp-utils-staticfiles-dependencyfinder\" id=\"id32\" rel=\"nofollow\">2. Add <tt>openwisp_utils.staticfiles.DependencyFinder</tt></a></li>\n<li><a href=\"#add-openwisp-utils-loaders-dependencyloader\" id=\"id33\" rel=\"nofollow\">3. Add <tt>openwisp_utils.loaders.DependencyLoader</tt></a></li>\n<li><a href=\"#extending-models\" id=\"id34\" rel=\"nofollow\">Extending models</a></li>\n<li><a href=\"#extending-the-admin\" id=\"id35\" rel=\"nofollow\">Extending the admin</a></li>\n<li><a href=\"#extending-controller-views\" id=\"id36\" rel=\"nofollow\">Extending controller views</a></li>\n<li><a href=\"#controller-urls\" id=\"id37\" rel=\"nofollow\">Controller URLs</a></li>\n<li><a href=\"#extending-appconfig\" id=\"id38\" rel=\"nofollow\">Extending AppConfig</a></li>\n<li><a href=\"#real-world-extensions-of-django-netjsonconfig\" id=\"id39\" rel=\"nofollow\">Real world extensions of django-netjsonconfig</a></li>\n</ul>\n</li>\n<li><a href=\"#screenshots\" id=\"id40\" rel=\"nofollow\">Screenshots</a></li>\n<li><a href=\"#contributing\" id=\"id41\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#changelog\" id=\"id42\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#license\" id=\"id43\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#support\" id=\"id44\" rel=\"nofollow\">Support</a></li>\n</ul>\n</div>\n<hr class=\"docutils\">\n<div id=\"current-features\">\n<h2>Current features</h2>\n<ul>\n<li><dl>\n<dt><strong>configuration management</strong> for embedded devices supporting different firmwares:</dt>\n<dd><ul>\n<li><a href=\"http://openwrt.org\" rel=\"nofollow\">OpenWRT</a></li>\n<li><a href=\"https://github.com/openwisp/OpenWISP-Firmware\" rel=\"nofollow\">OpenWISP Firmware</a></li>\n<li>support for additional firmware can be added by <a href=\"#netjsonconfig-backends\" rel=\"nofollow\">specifying custom backends</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><strong>configuration editor</strong> based on <a href=\"https://github.com/jdorn/json-editor\" rel=\"nofollow\">JSON-Schema editor</a></li>\n<li><strong>advanced edit mode</strong>: edit <a href=\"http://netjson.org\" rel=\"nofollow\">NetJSON</a> <em>DeviceConfiguration</em> objects for maximum flexibility</li>\n<li><strong>configuration templates</strong>: reduce repetition to the minimum</li>\n<li><strong>configuration context</strong>: reference ansible-like variables in the configuration</li>\n<li><strong>template tags</strong>: tag templates to automate different types of auto-configurations (eg: mesh, WDS, 4G)</li>\n<li><strong>simple HTTP resources</strong>: allow devices to automatically download configuration updates</li>\n<li><strong>VPN management</strong>: easily create VPN servers and clients</li>\n</ul>\n</div>\n<div id=\"project-goals\">\n<h2>Project goals</h2>\n<ul>\n<li>automate configuration management for embedded devices</li>\n<li>allow to minimize repetition by using templates</li>\n<li>provide base logic that can be extended by third-party apps (see\n<a href=\"#extending-django-netjsonconfig\" rel=\"nofollow\">Extending django-netjsonconfig</a>)</li>\n<li>provide ways to support more firmwares by adding custom backends</li>\n<li>keep the core as simple as possible</li>\n</ul>\n</div>\n<div id=\"deploy-it-in-production\">\n<h2>Deploy it in production</h2>\n<p>An automated installer is available at <a href=\"https://github.com/openwisp/ansible-openwisp2\" rel=\"nofollow\">ansible-openwisp2</a>.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Python &gt;=3.6</li>\n<li>OpenSSL</li>\n</ul>\n</div>\n<div id=\"install-stable-version-from-pypi\">\n<h2>Install stable version from pypi</h2>\n<p>Install from pypi:</p>\n<pre>pip install django-netjsonconfig\n</pre>\n</div>\n<div id=\"install-development-version\">\n<h2>Install development version</h2>\n<p>Install tarball:</p>\n<pre>pip install https://github.com/openwisp/django-netjsonconfig/tarball/master\n</pre>\n<p>Alternatively you can install via pip using git:</p>\n<pre>pip install -e git+git://github.com/openwisp/django-netjsonconfig#egg<span class=\"o\">=</span>django-netjsonconfig\n</pre>\n<p>If you want to contribute, install your cloned fork:</p>\n<pre>git clone git@github.com:&lt;your_fork&gt;/django-netjsonconfig.git\n<span class=\"nb\">cd</span> django-netjsonconfig\npython setup.py develop\n</pre>\n</div>\n<div id=\"setup-integrate-in-an-existing-django-project\">\n<h2>Setup (integrate in an existing django project)</h2>\n<p>Add <tt>django_netjsonconfig</tt>, <tt>django.contrib.admin</tt>, <tt>sortedm2m</tt> and <tt>reversion</tt> to\n<tt>INSTALLED_APPS</tt> in the following order:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># other apps</span>\n    <span class=\"s1\">'openwisp_utils.admin_theme'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_netjsonconfig'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ensure the django admin comes after django-netjsonconfig</span>\n    <span class=\"s1\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sortedm2m'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'reversion'</span>  <span class=\"c1\"># optional, can be removed if not needed</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Add the controller URLs to your main <tt>urls.py</tt>:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ... other urls in your project ...</span>\n\n    <span class=\"c1\"># controller URLs</span>\n    <span class=\"c1\"># used by devices to download/update their configuration</span>\n    <span class=\"c1\"># keep the namespace argument unchanged</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'django_netjsonconfig.controller.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'controller'</span><span class=\"p\">)),</span>\n    <span class=\"c1\"># common URLs</span>\n    <span class=\"c1\"># shared among django-netjsonconfig components</span>\n    <span class=\"c1\"># keep the namespace argument unchanged</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'django_netjsonconfig.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'netjsonconfig'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Then run:</p>\n<pre>./manage.py migrate\n</pre>\n</div>\n<div id=\"installing-for-development\">\n<h2>Installing for development</h2>\n<p>Install sqlite:</p>\n<pre>sudo apt-get install sqlite3 libsqlite3-dev openssl libssl-dev\n</pre>\n<p>Install your forked repo:</p>\n<pre>git clone git://github.com/&lt;your_fork&gt;/django-netjsonconfig\n<span class=\"nb\">cd</span> django-netjsonconfig/\npython setup.py develop\n</pre>\n<p>Install test requirements:</p>\n<pre>pip install -r requirements-test.txt\n</pre>\n<p>Create database:</p>\n<pre><span class=\"nb\">cd</span> tests/\n./manage.py migrate\n./manage.py createsuperuser\n</pre>\n<p>Launch development server:</p>\n<pre>./manage.py runserver\n</pre>\n<p>You can access the admin interface at <a href=\"http://127.0.0.1:8000/admin/\" rel=\"nofollow\">http://127.0.0.1:8000/admin/</a>.</p>\n<p>Run tests with:</p>\n<pre>./runtests.py\n</pre>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<div id=\"netjsonconfig-backends\">\n<h3><tt>NETJSONCONFIG_BACKENDS</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>tuple</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><pre>\n<span class=\"p\">(</span>\n  <span class=\"p\">(</span><span class=\"s1\">'netjsonconfig.OpenWrt'</span><span class=\"p\">,</span> <span class=\"s1\">'OpenWRT'</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"s1\">'netjsonconfig.OpenWisp'</span><span class=\"p\">,</span> <span class=\"s1\">'OpenWISP'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Available configuration backends. For more information, see <a href=\"http://netjsonconfig.openwisp.org/en/latest/general/basics.html#backend\" rel=\"nofollow\">netjsonconfig backends</a>.</p>\n</div>\n<div id=\"netjsonconfig-vpn-backends\">\n<h3><tt>NETJSONCONFIG_VPN_BACKENDS</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>tuple</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><pre>\n<span class=\"p\">(</span>\n  <span class=\"p\">(</span><span class=\"s1\">'django_netjsonconfig.vpn_backends.OpenVpn'</span><span class=\"p\">,</span> <span class=\"s1\">'OpenVPN'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Available VPN backends for VPN Server objects. For more information, see <a href=\"http://netjsonconfig.openwisp.org/en/latest/backends/openvpn.html\" rel=\"nofollow\">OpenVPN netjsonconfig backend</a>.</p>\n<p>A VPN backend must follow some basic rules in order to be compatible with <em>django-netjsonconfig</em>:</p>\n<ul>\n<li>it MUST allow at minimum and at maximum one VPN instance</li>\n<li>the main <em>NetJSON</em> property MUST match the lowercase version of the class name,\neg: when using the <tt>OpenVpn</tt> backend, the system will look into\n<tt><span class=\"pre\">config['openvpn']</span></tt></li>\n<li>it SHOULD focus on the server capabilities of the VPN software being used</li>\n</ul>\n</div>\n<div id=\"netjsonconfig-default-backend\">\n<h3><tt>NETJSONCONFIG_DEFAULT_BACKEND</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>str</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt><span class=\"pre\">NETJSONCONFIG_BACKENDS[0][0]</span></tt></td>\n</tr>\n</tbody>\n</table>\n<p>The preferred backend that will be used as initial value when adding new <tt>Config</tt> or\n<tt>Template</tt> objects in the admin.</p>\n<p>This setting defaults to the raw value of the first item in the <tt>NETJSONCONFIG_BACKENDS</tt> setting,\nwhich is <tt>netjsonconfig.OpenWrt</tt>.</p>\n<p>Setting it to <tt>None</tt> will force the user to choose explicitly.</p>\n</div>\n<div id=\"netjsonconfig-default-vpn-backend\">\n<h3><tt>NETJSONCONFIG_DEFAULT_VPN_BACKEND</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>str</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt><span class=\"pre\">NETJSONCONFIG_VPN_BACKENDS[0][0]</span></tt></td>\n</tr>\n</tbody>\n</table>\n<p>The preferred backend that will be used as initial value when adding new <tt>Vpn</tt> objects in the admin.</p>\n<p>This setting defaults to the raw value of the first item in the <tt>NETJSONCONFIG_VPN_BACKENDS</tt> setting,\nwhich is <tt>django_netjsonconfig.vpn_backends.OpenVpn</tt>.</p>\n<p>Setting it to <tt>None</tt> will force the user to choose explicitly.</p>\n</div>\n<div id=\"netjsonconfig-registration-enabled\">\n<h3><tt>NETJSONCONFIG_REGISTRATION_ENABLED</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>bool</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>True</tt></td>\n</tr>\n</tbody>\n</table>\n<p>Whether devices can automatically register through the controller or not.</p>\n<p>This feature is enabled by default.</p>\n<p>Autoregistration must be supported on the devices in order to work, see <a href=\"https://github.com/openwisp/openwisp-config#automatic-registration\" rel=\"nofollow\">openwisp-config automatic\nregistration</a> for more information.</p>\n</div>\n<div id=\"netjsonconfig-consistent-registration\">\n<h3><tt>NETJSONCONFIG_CONSISTENT_REGISTRATION</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>bool</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>True</tt></td>\n</tr>\n</tbody>\n</table>\n<p>Whether devices that are already registered are recognized when reflashed or reset, hence keeping\nthe existing configuration without creating a new one.</p>\n<p>This feature is enabled by default.</p>\n<p>Autoregistration must be enabled also on the devices in order to work, see <a href=\"https://github.com/openwisp/openwisp-config#consistent-key-generation\" rel=\"nofollow\">openwisp-config\nconsistent key generation</a>\nfor more information.</p>\n</div>\n<div id=\"netjsonconfig-registration-self-creation\">\n<h3><tt>NETJSONCONFIG_REGISTRATION_SELF_CREATION</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>bool</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>True</tt></td>\n</tr>\n</tbody>\n</table>\n<p>Whether devices that are not already present in the system are allowed to register or not.</p>\n<p>Turn this off if you still want to use auto-registration to avoid having to\nmanually set the device UUID and key in its configuration file but also want\nto avoid indiscriminate registration of new devices without explicit permission.</p>\n</div>\n<div id=\"netjsonconfig-shared-secret\">\n<h3><tt>NETJSONCONFIG_SHARED_SECRET</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>str</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>\"\"</tt></td>\n</tr>\n</tbody>\n</table>\n<p>A secret key which must be used by devices to perform <a href=\"https://github.com/openwisp/openwisp-config#automatic-registration\" rel=\"nofollow\">automatic registration</a>.</p>\n<p>This key MUST be explicitly set in production (if <tt>settings.DEBUG is False</tt>), otherwise\nan <tt>ImproperlyConfigured</tt> exception will be raised on startup.</p>\n</div>\n<div id=\"netjsonconfig-context\">\n<h3><tt>NETJSONCONFIG_CONTEXT</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>dict</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>{}</tt></td>\n</tr>\n</tbody>\n</table>\n<p>Additional context that is passed to the default context of each <tt>Config</tt> object.</p>\n<p>Each <tt>Config</tt> object gets the following attributes passed as configuration variables:</p>\n<ul>\n<li><tt>id</tt></li>\n<li><tt>key</tt></li>\n<li><tt>name</tt></li>\n<li><tt>mac_address</tt></li>\n</ul>\n<p><tt>NETJSONCONFIG_CONTEXT</tt> can be used to define system-wide configuration variables.</p>\n<p>For more information, see <a href=\"http://netjsonconfig.openwisp.org/en/latest/general/basics.html#context-configuration-variables\" rel=\"nofollow\">netjsonconfig context: configuration variables</a>.</p>\n</div>\n<div id=\"netjsonconfig-default-auto-cert\">\n<h3><tt>NETJSONCONFIG_DEFAULT_AUTO_CERT</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>bool</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>True</tt></td>\n</tr>\n</tbody>\n</table>\n<p>The default value of the <tt>auto_cert</tt> field for new <tt>Template</tt> objects.</p>\n<p>The <tt>auto_cert</tt> field is valid only for templates which have <tt>type</tt>\nset to <tt>VPN</tt> and indicates whether a new x509 certificate should be created\nautomatically for each configuration using that template.</p>\n<p>The automatically created certificates will also be removed when they are not\nneeded anymore (eg: when the VPN template is removed from a configuration object).</p>\n</div>\n<div id=\"netjsonconfig-cert-path\">\n<h3><tt>NETJSONCONFIG_CERT_PATH</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>str</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>/etc/x509</tt></td>\n</tr>\n</tbody>\n</table>\n<p>The filesystem path where x509 certificate will be installed when\ndownloaded on routers when <tt>auto_cert</tt> is being used (enabled by default).</p>\n</div>\n<div id=\"netjsonconfig-common-name-format\">\n<h3><tt>NETJSONCONFIG_COMMON_NAME_FORMAT</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>str</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt><span class=\"pre\">{mac_address}-{name}</span></tt></td>\n</tr>\n</tbody>\n</table>\n<p>Defines the format of the <tt>common_name</tt> attribute of VPN client certificates that are automatically\ncreated when using VPN templates which have <tt>auto_cert</tt> set to <tt>True</tt>.</p>\n</div>\n<div id=\"netjsonconfig-management-ip-device-list\">\n<h3><tt>NETJSONCONFIG_MANAGEMENT_IP_DEVICE_LIST</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>bool</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>True</tt></td>\n</tr>\n</tbody>\n</table>\n<p>In the device list page, the column <tt>IP</tt> will show the <tt>management_ip</tt> if\navailable, defaulting to <tt>last_ip</tt> otherwise.</p>\n<p>If this setting is set to <tt>False</tt> the <tt>management_ip</tt> won\u2019t be shown\nin the device list page even if present, it will be shown only in the device\ndetail page.</p>\n<p>You may set this to <tt>False</tt> if for some reason the majority of your user\ndoesn\u2019t care about the management ip address.</p>\n</div>\n<div id=\"netjsonconfig-backend-device-list\">\n<h3><tt>NETJSONCONFIG_BACKEND_DEVICE_LIST</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>bool</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>True</tt></td>\n</tr>\n</tbody>\n</table>\n<p>In the device list page, the column <tt>backend</tt> and the backend filter are\nshown by default.</p>\n<p>If this setting is set to <tt>False</tt> these items will be removed from the UI.</p>\n<p>You may set this to <tt>False</tt> if you are using only one configuration backend\nand having this UI element doesn\u2019t add any value to your users.</p>\n</div>\n<div id=\"netjsonconfig-hardware-id-enabled\">\n<h3><tt>NETJSONCONFIG_HARDWARE_ID_ENABLED</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>bool</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>False</tt></td>\n</tr>\n</tbody>\n</table>\n<p>The field <tt>hardware_id</tt> can be used to store a unique hardware id, for example a serial number.</p>\n<p>If this setting is set to <tt>True</tt> then this field will be shown first in the device list page\nand in the add/edit device page.</p>\n<p>This feature is disabled by default.</p>\n</div>\n<div id=\"netjsonconfig-hardware-id-options\">\n<h3><tt>NETJSONCONFIG_HARDWARE_ID_OPTIONS</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>dict</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><pre>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'blank'</span><span class=\"p\">:</span> <span class=\"ow\">not</span> <span class=\"n\">NETJSONCONFIG_HARDWARE_ID_ENABLED</span><span class=\"p\">,</span>\n    <span class=\"s1\">'null'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'max_length'</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span>\n    <span class=\"s1\">'unique'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'verbose_name'</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Serial number'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'help_text'</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Serial number of this device'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Options for the model field <tt>hardware_id</tt>.</p>\n<ul>\n<li><tt>blank</tt>: wether the field is allowed to be blank</li>\n<li><tt>null</tt>: wether an empty value will be stored as <tt>NULL</tt> in the database</li>\n<li><tt>max_length</tt>: maximum length of the field</li>\n<li><tt>unique</tt>: wether the value of the field must be unique</li>\n<li><tt>verbose_name</tt>: text for the human readable label of the field</li>\n<li><tt>help_text</tt>: help text to be displayed with the field</li>\n</ul>\n</div>\n<div id=\"netjsonconfig-hardware-id-as-name\">\n<h3><tt>NETJSONCONFIG_HARDWARE_ID_AS_NAME</tt></h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>type</strong>:</td>\n<td><tt>bool</tt></td>\n</tr>\n<tr><td><strong>default</strong>:</td>\n<td><tt>False</tt></td>\n</tr>\n</tbody>\n</table>\n<p>When the hardware ID feature is enabled, devices will be referenced with\ntheir hardware ID instead of their name.</p>\n<p>If you still want to reference devices by their name, set this to <tt>True</tt>.</p>\n</div>\n</div>\n<div id=\"id2\">\n<h2>Extending django-netjsonconfig</h2>\n<p><em>django-netjsonconfig</em> provides a set of models, admin classes and generic views which can be imported,\nextended and reused by third party apps.</p>\n<p>To extend <em>django-netjsonconfig</em>, <strong>you MUST NOT</strong> add it to <tt>settings.INSTALLED_APPS</tt>,\nbut you must create your own app (which goes into <tt>settings.INSTALLED_APPS</tt>), import the\nbase classes from django-netjsonconfig and add your customizations.</p>\n<p>In order to help django find the static files and templates of <em>django-netjsonconfig</em>,\nyou need to perform the steps described below.</p>\n<div id=\"add-extended-apps\">\n<h3>1. Add <tt>EXTENDED_APPS</tt></h3>\n<p>Add the following to your <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">EXTENDED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'django_netjsonconfig'</span><span class=\"p\">,</span> <span class=\"s1\">'django_x509'</span><span class=\"p\">,)</span>\n</pre>\n</div>\n<div id=\"add-openwisp-utils-staticfiles-dependencyfinder\">\n<h3>2. Add <tt>openwisp_utils.staticfiles.DependencyFinder</tt></h3>\n<p>Add <tt>openwisp_utils.staticfiles.DependencyFinder</tt> to\n<tt>STATICFILES_FINDERS</tt> in your <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">STATICFILES_FINDERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'django.contrib.staticfiles.finders.FileSystemFinder'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.staticfiles.finders.AppDirectoriesFinder'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'openwisp_utils.staticfiles.DependencyFinder'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"add-openwisp-utils-loaders-dependencyloader\">\n<h3>3. Add <tt>openwisp_utils.loaders.DependencyLoader</tt></h3>\n<p>Add <tt>openwisp_utils.loaders.DependencyLoader</tt> to <tt>TEMPLATES</tt> in your <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s1\">'django.template.backends.django.DjangoTemplates'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'loaders'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s1\">'django.template.loaders.filesystem.Loader'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'django.template.loaders.app_directories.Loader'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'openwisp_utils.loaders.DependencyLoader'</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n            <span class=\"s1\">'context_processors'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s1\">'django.template.context_processors.debug'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'django.template.context_processors.request'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'django.contrib.auth.context_processors.auth'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'django.contrib.messages.context_processors.messages'</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"extending-models\">\n<h3>Extending models</h3>\n<p>This example provides an example of how to extend the base models of\n<em>django-netjsonconfig</em> by adding a relation to another django model named <cite>Organization</cite>.</p>\n<pre><span class=\"c1\"># models.py of your custom ``config`` app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sortedm2m.fields</span> <span class=\"kn\">import</span> <span class=\"n\">SortedManyToManyField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">taggit.managers</span> <span class=\"kn\">import</span> <span class=\"n\">TaggableManager</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django_netjsonconfig.base.config</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractConfig</span><span class=\"p\">,</span> <span class=\"n\">TemplatesVpnMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_netjsonconfig.base.tag</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractTaggedTemplate</span><span class=\"p\">,</span> <span class=\"n\">AbstractTemplateTag</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_netjsonconfig.base.template</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractTemplate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_netjsonconfig.base.vpn</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractVpn</span><span class=\"p\">,</span> <span class=\"n\">AbstractVpnClient</span>\n\n<span class=\"c1\"># the model ``organizations.Organization`` is omitted for brevity</span>\n<span class=\"c1\"># if you are curious to see a real implementation, check out django-organizations</span>\n<span class=\"c1\"># https://github.com/bennylope/django-organizations</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OrganizationMixin</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">organization</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'organizations.Organization'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">(</span><span class=\"n\">OrganizationMixin</span><span class=\"p\">,</span> <span class=\"n\">TemplatesVpnMixin</span><span class=\"p\">,</span> <span class=\"n\">AbstractConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">templates</span> <span class=\"o\">=</span> <span class=\"n\">SortedManyToManyField</span><span class=\"p\">(</span><span class=\"s1\">'config.Template'</span><span class=\"p\">,</span>\n                                      <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'config_relations'</span><span class=\"p\">,</span>\n                                      <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">vpn</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"s1\">'config.Vpn'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s1\">'config.VpnClient'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'vpn_relations'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># your own validation logic here...</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractConfig</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TemplateTag</span><span class=\"p\">(</span><span class=\"n\">AbstractTemplateTag</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractTemplateTag</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TaggedTemplate</span><span class=\"p\">(</span><span class=\"n\">AbstractTaggedTemplate</span><span class=\"p\">):</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'config.TemplateTag'</span><span class=\"p\">,</span>\n                            <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(app_label)s</span><span class=\"s1\">_</span><span class=\"si\">%(class)s</span><span class=\"s1\">_items'</span><span class=\"p\">,</span>\n                            <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractTaggedTemplate</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Template</span><span class=\"p\">(</span><span class=\"n\">OrganizationMixin</span><span class=\"p\">,</span> <span class=\"n\">AbstractTemplate</span><span class=\"p\">):</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">TaggableManager</span><span class=\"p\">(</span><span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s1\">'config.TaggedTemplate'</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">vpn</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'config.Vpn'</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># your own validation logic here...</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractTemplate</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Vpn</span><span class=\"p\">(</span><span class=\"n\">OrganizationMixin</span><span class=\"p\">,</span> <span class=\"n\">AbstractVpn</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractVpn</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VpnClient</span><span class=\"p\">(</span><span class=\"n\">AbstractVpnClient</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'config.Config'</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">vpn</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'config.Vpn'</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">cert</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span><span class=\"s1\">'django_x509.Cert'</span><span class=\"p\">,</span>\n                                <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n                                <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractVpnClient</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"extending-the-admin\">\n<h3>Extending the admin</h3>\n<p>Following the previous <tt>Organization</tt> example, you can avoid duplicating the admin\ncode by importing the base admin classes and registering your models with.</p>\n<pre><span class=\"c1\"># admin.py of your app</span>\n<span class=\"c1\"># these are your custom models, they must be imported before the abstract admin classes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">Template</span><span class=\"p\">,</span> <span class=\"n\">Vpn</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_netjsonconfig.base.admin</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">AbstractConfigAdmin</span><span class=\"p\">,</span>\n                                             <span class=\"n\">AbstractConfigForm</span><span class=\"p\">,</span>\n                                             <span class=\"n\">AbstractTemplateAdmin</span><span class=\"p\">,</span>\n                                             <span class=\"n\">AbstractVpnAdmin</span><span class=\"p\">,</span>\n                                             <span class=\"n\">AbstractVpnForm</span><span class=\"p\">,</span>\n                                             <span class=\"n\">BaseForm</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConfigForm</span><span class=\"p\">(</span><span class=\"n\">AbstractConfigForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractConfigForm</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Config</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConfigAdmin</span><span class=\"p\">(</span><span class=\"n\">AbstractConfigAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">ConfigForm</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TemplateForm</span><span class=\"p\">(</span><span class=\"n\">BaseForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">BaseForm</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Template</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TemplateAdmin</span><span class=\"p\">(</span><span class=\"n\">AbstractTemplateAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">TemplateForm</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VpnForm</span><span class=\"p\">(</span><span class=\"n\">AbstractVpnForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractVpnForm</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Vpn</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VpnAdmin</span><span class=\"p\">(</span><span class=\"n\">AbstractVpnAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">VpnForm</span>\n\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">ConfigAdmin</span><span class=\"p\">)</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Template</span><span class=\"p\">,</span> <span class=\"n\">TemplateAdmin</span><span class=\"p\">)</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Vpn</span><span class=\"p\">,</span> <span class=\"n\">VpnAdmin</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"extending-controller-views\">\n<h3>Extending controller views</h3>\n<p>If your use case doesn\u2019t vary a lot from the base one, you may also want\nto try to reuse the controller views:</p>\n<pre><span class=\"c1\"># your_config_app.controller.views</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..models</span> <span class=\"kn\">import</span> <span class=\"n\">Device</span><span class=\"p\">,</span> <span class=\"n\">Vpn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_netjsonconfig.controller.generics</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">BaseDeviceChecksumView</span><span class=\"p\">,</span> <span class=\"n\">BaseDeviceDownloadConfigView</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">BaseDeviceRegisterView</span><span class=\"p\">,</span> <span class=\"n\">BaseDeviceReportStatusView</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">BaseVpnChecksumView</span><span class=\"p\">,</span> <span class=\"n\">BaseVpnDownloadConfigView</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DeviceChecksumView</span><span class=\"p\">(</span><span class=\"n\">BaseDeviceChecksumView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Device</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DeviceDownloadConfigView</span><span class=\"p\">(</span><span class=\"n\">BaseDeviceDownloadConfigView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Device</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DeviceReportStatusView</span><span class=\"p\">(</span><span class=\"n\">BaseDeviceReportStatusView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Device</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DeviceRegisterView</span><span class=\"p\">(</span><span class=\"n\">BaseDeviceRegisterView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Device</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VpnChecksumView</span><span class=\"p\">(</span><span class=\"n\">BaseVpnChecksumView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Vpn</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VpnDownloadConfigView</span><span class=\"p\">(</span><span class=\"n\">BaseVpnDownloadConfigView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Vpn</span>\n\n\n<span class=\"n\">device_checksum</span> <span class=\"o\">=</span> <span class=\"n\">DeviceChecksumView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n<span class=\"n\">device_download_config</span> <span class=\"o\">=</span> <span class=\"n\">DeviceDownloadConfigView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n<span class=\"n\">device_report_status</span> <span class=\"o\">=</span> <span class=\"n\">DeviceReportStatusView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n<span class=\"n\">device_register</span> <span class=\"o\">=</span> <span class=\"n\">DeviceRegisterView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n<span class=\"n\">vpn_checksum</span> <span class=\"o\">=</span> <span class=\"n\">VpnChecksumView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n<span class=\"n\">vpn_download_config</span> <span class=\"o\">=</span> <span class=\"n\">VpnDownloadConfigView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"controller-urls\">\n<h3>Controller URLs</h3>\n<p>If you are not making drastic changes to the controller views, you can avoid duplicating the URL\nlogic by using the <tt>get_controller_urls</tt> function. Put this in your controller <tt>urls.py</tt>:</p>\n<pre><span class=\"c1\"># your_config_app.controller.urls</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_netjsonconfig.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_controller_urls</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">get_controller_urls</span><span class=\"p\">(</span><span class=\"n\">views</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"extending-appconfig\">\n<h3>Extending AppConfig</h3>\n<p>You may want to reuse the <tt>AppConfig</tt> class of <em>django-netjsonconfig</em> too:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_netjsonconfig.apps</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoNetjsonconfigApp</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyOwnConfig</span><span class=\"p\">(</span><span class=\"n\">DjangoNetjsonconfigApp</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'yourapp.config'</span>\n    <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">'config'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setmodels__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">VpnClient</span>  <span class=\"c1\"># these are your custom models</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_model</span> <span class=\"o\">=</span> <span class=\"n\">Config</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vpnclient_model</span> <span class=\"o\">=</span> <span class=\"n\">VpnClient</span>\n</pre>\n</div>\n<div id=\"real-world-extensions-of-django-netjsonconfig\">\n<h3>Real world extensions of django-netjsonconfig</h3>\n<p>For full working examples of django proejcts which extend <em>django-netjsonconfig</em>, see:</p>\n<ul>\n<li><a href=\"https://github.com/openwisp/openwisp-controller\" rel=\"nofollow\">openwisp/openwisp-controller</a></li>\n<li><a href=\"https://github.com/innovationgarage/extendnetjson_project\" rel=\"nofollow\">innovationgarage/extendnetjson_project</a></li>\n</ul>\n</div>\n</div>\n<div id=\"screenshots\">\n<h2>Screenshots</h2>\n<img alt=\"configuration item\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b931ab807be788037adec2b21c1f8b2a49e885bb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f6d61737465722f646f63732f696d616765732f636f6e66696775726174696f6e2d75692e706e67\">\n<hr class=\"docutils\">\n<img alt=\"bridge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7048cd3cc681d887cc6f13dd7c6aa8b5f062e551/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f6d61737465722f646f63732f696d616765732f6272696467652e706e67\">\n<hr class=\"docutils\">\n<img alt=\"radio\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3aeb7b11f755fd16ed69bed680a863de99ecdd31/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f6d61737465722f646f63732f696d616765732f726164696f2e706e67\">\n<hr class=\"docutils\">\n<img alt=\"wpa enterprise\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a50527482e39636050ff636db3e9506f1f6ed62/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f6d61737465722f646f63732f696d616765732f7770612d656e74657270726973652e706e67\">\n<hr class=\"docutils\">\n<img alt=\"preview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ddbba74a00b3abe15677e658ac8b8ca1e712bb4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f6d61737465722f646f63732f696d616765732f707265766965772e706e67\">\n<hr class=\"docutils\">\n<img alt=\"adhoc interface\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e979d233213f0fdbdf89854a40a3c6e8aa9b2e93/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e776973702f646a616e676f2d6e65746a736f6e636f6e6669672f6d61737465722f646f63732f696d616765732f6164686f632d696e746572666163652e706e67\">\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<ol>\n<li>Announce your intentions in the <a href=\"https://groups.google.com/d/forum/openwisp\" rel=\"nofollow\">OpenWISP Mailing List</a></li>\n<li>Fork this repo and install it</li>\n<li>Follow <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP8, Style Guide for Python Code</a></li>\n<li>Write code</li>\n<li>Write tests for your code</li>\n<li>Ensure all tests pass</li>\n<li>Ensure test coverage does not decrease</li>\n<li>Document your changes</li>\n<li>Send pull request</li>\n</ol>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>See <a href=\"https://github.com/openwisp/django-netjsonconfig/blob/master/CHANGES.rst\" rel=\"nofollow\">CHANGES</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>See <a href=\"https://github.com/openwisp/django-netjsonconfig/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>See <a href=\"http://openwisp.org/support.html\" rel=\"nofollow\">OpenWISP Support Channels</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6937516, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "9f55d9c9e5a310525c904813e6d3c47f", "sha256": "0e767a99ad593396f707d37a1afaaa359461a98debd256be920c8c86db16f0b2"}, "downloads": -1, "filename": "django_netjsonconfig-0.10-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "9f55d9c9e5a310525c904813e6d3c47f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 402918, "upload_time": "2020-01-24T17:42:20", "upload_time_iso_8601": "2020-01-24T17:42:20.420049Z", "url": "https://files.pythonhosted.org/packages/6d/f6/5141517f04979799edbb64926639a9e9f0d4c88358c623dda7d949473596/django_netjsonconfig-0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b349ac2c53895ceece3e3eb11b6e713c", "sha256": "e568beab789b0124251eabff39d215484cb2fcc6ec0ce2f397f23e47d5d89000"}, "downloads": -1, "filename": "django-netjsonconfig-0.10.tar.gz", "has_sig": true, "md5_digest": "b349ac2c53895ceece3e3eb11b6e713c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 378075, "upload_time": "2020-01-24T17:42:26", "upload_time_iso_8601": "2020-01-24T17:42:26.294130Z", "url": "https://files.pythonhosted.org/packages/42/93/081732ca384da81d913e94e34637801ac545da99b54245d9eddc88203cf4/django-netjsonconfig-0.10.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "315eca5e5cb07809792731f89a670754", "sha256": "6b5a16d92b03f6750a18198132128f094d83da39b7d4df58dcf1fdfc7f78fce3"}, "downloads": -1, "filename": "django_netjsonconfig-0.10.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "315eca5e5cb07809792731f89a670754", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 402960, "upload_time": "2020-02-06T17:54:31", "upload_time_iso_8601": "2020-02-06T17:54:31.936670Z", "url": "https://files.pythonhosted.org/packages/78/07/32eb6d1d3a1ace981252c9dd0aa5e294109095be83402f8c228ded185b7a/django_netjsonconfig-0.10.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e12ce021c1caeda23aa6249b5487957c", "sha256": "53b0789c4339ab3e28e7df1ed546a274c8021a15a44e0d7f2faa7875b7df9ed9"}, "downloads": -1, "filename": "django-netjsonconfig-0.10.1.tar.gz", "has_sig": true, "md5_digest": "e12ce021c1caeda23aa6249b5487957c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 378111, "upload_time": "2020-02-06T17:54:37", "upload_time_iso_8601": "2020-02-06T17:54:37.102343Z", "url": "https://files.pythonhosted.org/packages/ec/1a/524c7c62be935b6a4e683d325ae25cc75810ed6f64fca70a25df9758e968/django-netjsonconfig-0.10.1.tar.gz", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "2c51a4c34d37b5041cff324ff9461a33", "sha256": "b25a2302b193730009f5f933d5330fa9dc18c1a8a7d73fb2c9a9ab7b8b431251"}, "downloads": -1, "filename": "django_netjsonconfig-0.10.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "2c51a4c34d37b5041cff324ff9461a33", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 405513, "upload_time": "2020-02-29T02:12:50", "upload_time_iso_8601": "2020-02-29T02:12:50.016638Z", "url": "https://files.pythonhosted.org/packages/d0/11/a5a83d0255a1ad7b998c8ff687a0c9b6462cafed331e6b6c16d4c9a4853f/django_netjsonconfig-0.10.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "828cb99de53e524f0747d15cf22450b7", "sha256": "bdd7e9009906713092c5b735e1a38c6ab7d57f15a1f658efec7538778e862e1b"}, "downloads": -1, "filename": "django-netjsonconfig-0.10.2.tar.gz", "has_sig": true, "md5_digest": "828cb99de53e524f0747d15cf22450b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 378643, "upload_time": "2020-02-29T02:12:59", "upload_time_iso_8601": "2020-02-29T02:12:59.528831Z", "url": "https://files.pythonhosted.org/packages/fe/fa/ddcdc892e2237ff6a0f6a4f0dcf798af8cd0d4ad9c5f437e3462e94c346f/django-netjsonconfig-0.10.2.tar.gz", "yanked": false}], "0.10.3": [{"comment_text": "", "digests": {"md5": "9371cc1b721c79bdb88e8d3a7489fba1", "sha256": "66651c0c6db5ce6e832e616223f8228c5c52d2848d3e6e14e207b87099b358d8"}, "downloads": -1, "filename": "django_netjsonconfig-0.10.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "9371cc1b721c79bdb88e8d3a7489fba1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 406415, "upload_time": "2020-03-18T01:57:55", "upload_time_iso_8601": "2020-03-18T01:57:55.362934Z", "url": "https://files.pythonhosted.org/packages/c2/1d/d2255b92fdba13552fd9e5d844a4f960193e030ae03dad9c7a85b919e718/django_netjsonconfig-0.10.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afc4a377bca3a20bf6da2a9449b00f28", "sha256": "126fa200ff9c0ae4a63f0fff32acfe96ad89571a1e9a54796917876faf49ac71"}, "downloads": -1, "filename": "django-netjsonconfig-0.10.3.tar.gz", "has_sig": true, "md5_digest": "afc4a377bca3a20bf6da2a9449b00f28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 381314, "upload_time": "2020-03-18T01:58:06", "upload_time_iso_8601": "2020-03-18T01:58:06.519075Z", "url": "https://files.pythonhosted.org/packages/8b/00/feabbea5ab10a289890ba93613bb24bac5f531487383ff283886d8ba6d15/django-netjsonconfig-0.10.3.tar.gz", "yanked": false}], "0.10.4": [{"comment_text": "", "digests": {"md5": "64f641d484a39bc9d020acaf284d44b8", "sha256": "fa89a07f618735eed6beae8f627ddd138ea8bc1a8b25360d911134f2f31ae3e7"}, "downloads": -1, "filename": "django_netjsonconfig-0.10.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "64f641d484a39bc9d020acaf284d44b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 406490, "upload_time": "2020-03-22T00:44:33", "upload_time_iso_8601": "2020-03-22T00:44:33.948973Z", "url": "https://files.pythonhosted.org/packages/b0/91/af1624f81c6a4f0bffe351a390399715a3b89d72ba849ce9e5f1176d37f0/django_netjsonconfig-0.10.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afce67208dbaed355c507ad04eadcda0", "sha256": "3764a03632f09375a3ed7c095f65d1d647d1941a7f679c0f238917427ff244c2"}, "downloads": -1, "filename": "django-netjsonconfig-0.10.4.tar.gz", "has_sig": true, "md5_digest": "afce67208dbaed355c507ad04eadcda0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 381420, "upload_time": "2020-03-22T00:44:43", "upload_time_iso_8601": "2020-03-22T00:44:43.476196Z", "url": "https://files.pythonhosted.org/packages/ff/ee/9d50e314ad53ee314577322517058108225ed484a6f17f9179e2a7285709/django-netjsonconfig-0.10.4.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "a8d83c65e5035f2999b8be63658fe689", "sha256": "726923f53576afe0c68804aaf65fb863c07601b41eccaf858b379595f87412f6"}, "downloads": -1, "filename": "django_netjsonconfig-0.11-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a8d83c65e5035f2999b8be63658fe689", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 406893, "upload_time": "2020-04-02T17:49:16", "upload_time_iso_8601": "2020-04-02T17:49:16.152119Z", "url": "https://files.pythonhosted.org/packages/1a/b2/6934372e589e342e5e8cb7cf7f56ec419ac6e05dae1cbb41a7c7bdae6c9d/django_netjsonconfig-0.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "753c015fd073ffe45b289ddedb8e45a5", "sha256": "349a63520b735ae60f5b7d584c1ed42c69b2b88480866db781335c3057e24494"}, "downloads": -1, "filename": "django-netjsonconfig-0.11.tar.gz", "has_sig": true, "md5_digest": "753c015fd073ffe45b289ddedb8e45a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 382128, "upload_time": "2020-04-02T17:49:27", "upload_time_iso_8601": "2020-04-02T17:49:27.397105Z", "url": "https://files.pythonhosted.org/packages/cb/47/c08a5e9d0f0574c6d33c5e92849d8025fe3ac330538e7097402ad39e8ce1/django-netjsonconfig-0.11.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "df4dca51a8e40c19e55e254c2c7991bb", "sha256": "a73fa9be7709acd4afffd5e697d5f11bf0ad7879b768b5e25a0aa86523e15fb3"}, "downloads": -1, "filename": "django_netjsonconfig-0.3.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "df4dca51a8e40c19e55e254c2c7991bb", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 203970, "upload_time": "2016-04-19T13:24:32", "upload_time_iso_8601": "2016-04-19T13:24:32.460514Z", "url": "https://files.pythonhosted.org/packages/36/8f/a0ab64790ca2f299ac8d4924cc267e065e9f868f3327ca0e88dd4223b125/django_netjsonconfig-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67311f721c27ee2a20389a6798610743", "sha256": "bbf15a19343c2bca31a2d8d67376402371eac2f30089d43f0cdff7e03a3d3bc5"}, "downloads": -1, "filename": "django-netjsonconfig-0.3.1.tar.gz", "has_sig": true, "md5_digest": "67311f721c27ee2a20389a6798610743", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73674, "upload_time": "2016-04-19T13:24:08", "upload_time_iso_8601": "2016-04-19T13:24:08.038159Z", "url": "https://files.pythonhosted.org/packages/35/38/898c44e155cf867cb88f8662bed6bf2ca4ad4b7d3972b1b9134c6cfe2655/django-netjsonconfig-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "4a033c784f3ed44dffdfdfe1ad312bde", "sha256": "076b36239f00d90e9648df739181d046b7062f7265fe263f87ff01d113d042ac"}, "downloads": -1, "filename": "django_netjsonconfig-0.3.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4a033c784f3ed44dffdfdfe1ad312bde", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 77790, "upload_time": "2016-06-21T14:12:25", "upload_time_iso_8601": "2016-06-21T14:12:25.396189Z", "url": "https://files.pythonhosted.org/packages/6b/e2/2aaf8ce31703c6c19fbd3ceeca91a3e02ed4f941eab4aac5ec9f0b41e9c1/django_netjsonconfig-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2147db745f1ce10df66911e72ae2bb17", "sha256": "9498c5114bd9a2f24cfec3a2eaedb6340e61af5229a0279c59f73d4579416b4c"}, "downloads": -1, "filename": "django-netjsonconfig-0.3.2.tar.gz", "has_sig": true, "md5_digest": "2147db745f1ce10df66911e72ae2bb17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 483768, "upload_time": "2016-06-21T14:12:19", "upload_time_iso_8601": "2016-06-21T14:12:19.764232Z", "url": "https://files.pythonhosted.org/packages/46/3d/8eb66b478749623314f69a37794492076372b99e037c1f324feff225468f/django-netjsonconfig-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "6c4413d45f3d722d58917aac3902e081", "sha256": "acacf31022528fba24ddd22961290cfb88c6fb912791b975aee5cb8d4febb037"}, "downloads": -1, "filename": "django_netjsonconfig-0.3.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "6c4413d45f3d722d58917aac3902e081", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 77925, "upload_time": "2016-08-24T13:27:24", "upload_time_iso_8601": "2016-08-24T13:27:24.487213Z", "url": "https://files.pythonhosted.org/packages/35/1e/f6a93e464df8b5908f41ca4b834367bfe4afeb74fcabc8d79f5672fb477c/django_netjsonconfig-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0525667e9591e858eef54764cb15aaf2", "sha256": "0f64d4945a0b37f283cdb29e88935574d174cc26ff941b8e79bbc7440e27c2ce"}, "downloads": -1, "filename": "django-netjsonconfig-0.3.3.tar.gz", "has_sig": true, "md5_digest": "0525667e9591e858eef54764cb15aaf2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 483716, "upload_time": "2016-08-24T13:27:20", "upload_time_iso_8601": "2016-08-24T13:27:20.628184Z", "url": "https://files.pythonhosted.org/packages/be/0e/e4412d072b3901ca482dfc09847e291de67b080520082f88cffd805ca9ad/django-netjsonconfig-0.3.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "fa480f8a36511f9b221417093a1af8df", "sha256": "e417ff38226bd2e65ae96bbf6bc9ce4234f5a783267677bf742c9b3bcbed8ea9"}, "downloads": -1, "filename": "django_netjsonconfig-0.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "fa480f8a36511f9b221417093a1af8df", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 99496, "upload_time": "2016-09-20T14:03:14", "upload_time_iso_8601": "2016-09-20T14:03:14.726351Z", "url": "https://files.pythonhosted.org/packages/b2/7c/453d396b88ee3a88a2fd8a6c2ebc1a7906e4c9e3d3c7dd20c0a61c46c9f8/django_netjsonconfig-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9a502df706533c409aea734e5c41a51", "sha256": "be0913f03c06cb6660cdf4a7bd9bf74737f097637e27340406867f0f88e0a822"}, "downloads": -1, "filename": "django-netjsonconfig-0.4.tar.gz", "has_sig": true, "md5_digest": "d9a502df706533c409aea734e5c41a51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 498125, "upload_time": "2016-09-20T14:03:10", "upload_time_iso_8601": "2016-09-20T14:03:10.915315Z", "url": "https://files.pythonhosted.org/packages/c0/8e/22434a929584b26d2704e5d96891d766135338684bcc431c549c380d8aea/django-netjsonconfig-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "e87edd9f69d58b4f1dac8e0fdf7c5d89", "sha256": "e51a094296227710dbc49d5274b4d4713ffcdd25e3f8889d0c17b9e0e1ff076e"}, "downloads": -1, "filename": "django_netjsonconfig-0.4.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "e87edd9f69d58b4f1dac8e0fdf7c5d89", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 100247, "upload_time": "2016-09-22T13:47:36", "upload_time_iso_8601": "2016-09-22T13:47:36.552370Z", "url": "https://files.pythonhosted.org/packages/55/28/6ed83fb83b2b63cd4b583d6ae7c2626eb4c40d138f1069925d9ab88e55c9/django_netjsonconfig-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ac53d05837f2b74fe8cae39bf6ba6cf", "sha256": "6ad106ff3acac0e0ac856359983cea4bf4f17def67251bc718178156f6e79561"}, "downloads": -1, "filename": "django-netjsonconfig-0.4.1.tar.gz", "has_sig": true, "md5_digest": "9ac53d05837f2b74fe8cae39bf6ba6cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 498483, "upload_time": "2016-09-22T13:47:33", "upload_time_iso_8601": "2016-09-22T13:47:33.127469Z", "url": "https://files.pythonhosted.org/packages/a0/61/43b0266fdd5b72b6fc49b463df44632ce0805558e9a246c4b28481ce735b/django-netjsonconfig-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "3d515bfe3f4b3f9c98fcbeffd41d6f81", "sha256": "221993a8bff092aae7f6b749541f5341ebd4355362d15e57b9ec2062f60614ec"}, "downloads": -1, "filename": "django_netjsonconfig-0.4.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "3d515bfe3f4b3f9c98fcbeffd41d6f81", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 95022, "upload_time": "2016-12-29T14:20:38", "upload_time_iso_8601": "2016-12-29T14:20:38.182891Z", "url": "https://files.pythonhosted.org/packages/18/ff/a2fb45f92dc5eb22a7b1e0b263a3e18462ebff5f6282748d6d59090a62df/django_netjsonconfig-0.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47941f9e33f128ab7233b586b87ea8df", "sha256": "f0e0140e70af114ca141cbc5f5b1622c196533ae8d1d0bff476404ede4d6a9da"}, "downloads": -1, "filename": "django-netjsonconfig-0.4.2.tar.gz", "has_sig": true, "md5_digest": "47941f9e33f128ab7233b586b87ea8df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86927, "upload_time": "2016-12-29T14:20:35", "upload_time_iso_8601": "2016-12-29T14:20:35.355479Z", "url": "https://files.pythonhosted.org/packages/ac/c8/9372b7156b65ad074b079e14740981ed930cf8026d686a30aa2df5b5b17b/django-netjsonconfig-0.4.2.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "65b0e17d922af34ec46c949ca7569f14", "sha256": "2b0452d1a4f5925e2807b8937eaf08e6d911d8f5eb7d52adc0b7d89be12c64f3"}, "downloads": -1, "filename": "django_netjsonconfig-0.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "65b0e17d922af34ec46c949ca7569f14", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 112493, "upload_time": "2017-01-13T15:32:09", "upload_time_iso_8601": "2017-01-13T15:32:09.048416Z", "url": "https://files.pythonhosted.org/packages/aa/38/80c76aec21ba3ababff008c32628b2ec3b18d3357033c9a5d847435651d1/django_netjsonconfig-0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fd0c9ff7b38d96ea31099413432394f", "sha256": "b8795894bcef04d796f95622c4bd71f48beaeaa3e92ff40a07d6b436f164620a"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.tar.gz", "has_sig": true, "md5_digest": "7fd0c9ff7b38d96ea31099413432394f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92461, "upload_time": "2017-01-13T15:32:06", "upload_time_iso_8601": "2017-01-13T15:32:06.114176Z", "url": "https://files.pythonhosted.org/packages/d7/e3/f13c4d16f63aacbe691eb0fd120b50e82bdb6bd6ed52a05c32e62954557b/django-netjsonconfig-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "e227d6e757bdce38193888414099e91d", "sha256": "e9025ebe72fb41521c02fd7edfa80367e899a0665d3322571233eedba83c76a5"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "e227d6e757bdce38193888414099e91d", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 150573, "upload_time": "2017-02-01T10:01:27", "upload_time_iso_8601": "2017-02-01T10:01:27.027161Z", "url": "https://files.pythonhosted.org/packages/95/ea/ecdee115b3ba30cf25b73fba2d9570f69a288b53c19a7d798e2dba8f5619/django_netjsonconfig-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c514f3f3c676a3f8595158af88bb5bf", "sha256": "70057db1aa033798c38f45b6a2db98edf5d975ef399cb6bb9cf53bef8c54b6ec"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.1.tar.gz", "has_sig": true, "md5_digest": "5c514f3f3c676a3f8595158af88bb5bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 134577, "upload_time": "2017-02-01T10:01:24", "upload_time_iso_8601": "2017-02-01T10:01:24.785146Z", "url": "https://files.pythonhosted.org/packages/1f/d6/de91622c43400e9c3ec66dced8ceb2652ca68a002017fa375c19b698ac29/django-netjsonconfig-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "804f72daea15b37fafcc84f09cba73fe", "sha256": "f673c4af15d5df4125fffd78ed2c631c6b6c961ecad7366414c0068d9a668cc2"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "804f72daea15b37fafcc84f09cba73fe", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 152366, "upload_time": "2017-02-14T10:29:59", "upload_time_iso_8601": "2017-02-14T10:29:59.045213Z", "url": "https://files.pythonhosted.org/packages/ad/83/6020a9f13e951f1b2a857f10e2980cdb52f4825ce8fa69331fba090fc54a/django_netjsonconfig-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f4cd67ada6525f607627ac1eb4d2e00", "sha256": "955a3e4b97fd70644aec56bd490ca083db6b28b6aa0571ca65059233185a5184"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.2.tar.gz", "has_sig": true, "md5_digest": "3f4cd67ada6525f607627ac1eb4d2e00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 136759, "upload_time": "2017-02-14T10:29:55", "upload_time_iso_8601": "2017-02-14T10:29:55.595083Z", "url": "https://files.pythonhosted.org/packages/e5/11/be0693d6faecad02ac9357fca381807c1a0b7e522aac903e3ad77fdf0f0c/django-netjsonconfig-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "aee70cf634561331241f71b6e47fac17", "sha256": "11ccf3c90ea6f406582c084a6d95a5a4bd6423f7b3c1f694a0d16ef23a140d05"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "aee70cf634561331241f71b6e47fac17", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 152669, "upload_time": "2017-02-15T13:30:29", "upload_time_iso_8601": "2017-02-15T13:30:29.695275Z", "url": "https://files.pythonhosted.org/packages/af/14/b3cad082ec486692a3b0d31fa424bb3bb1d386d6184a62023f10a10ec99f/django_netjsonconfig-0.5.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b4d9f4ab3a7279987da3a19965457f2", "sha256": "241a5efe2ca287efc7b830867b21be42297830a8d44186203c2db64dba15ae86"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.3.tar.gz", "has_sig": true, "md5_digest": "0b4d9f4ab3a7279987da3a19965457f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137074, "upload_time": "2017-02-15T13:30:27", "upload_time_iso_8601": "2017-02-15T13:30:27.394934Z", "url": "https://files.pythonhosted.org/packages/c8/8c/042f6a73e91af28fd333410b3c5974e92c9ad91b0197925e7aaa0e9c381a/django-netjsonconfig-0.5.3.tar.gz", "yanked": false}], "0.5.3.post1": [{"comment_text": "", "digests": {"md5": "2b22029d0d9b30211f7bce9eaa798070", "sha256": "2a02c8e7066511ae04ce0cbb075ee42a9e678d39aa179adbc8481e11bf0b55d7"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.3.post1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "2b22029d0d9b30211f7bce9eaa798070", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 143783, "upload_time": "2017-02-15T14:01:26", "upload_time_iso_8601": "2017-02-15T14:01:26.270981Z", "url": "https://files.pythonhosted.org/packages/13/bd/2f6529c5b97956f9b4cac879d8276c71daf6ec18c79a9fe3f003ecfa69e1/django_netjsonconfig-0.5.3.post1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6176b2964e89c3f317357517fdf0371", "sha256": "7e2107acc5bab5792d8832af61f6a50b1254a19ba08366024438d23473d6464f"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.3.post1.tar.gz", "has_sig": true, "md5_digest": "c6176b2964e89c3f317357517fdf0371", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137483, "upload_time": "2017-02-15T14:01:23", "upload_time_iso_8601": "2017-02-15T14:01:23.472049Z", "url": "https://files.pythonhosted.org/packages/ea/00/bf1dcf3af9a3b4388bb26ae584985905331feaae1df0de48eaf7f5cc4a6a/django-netjsonconfig-0.5.3.post1.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "d891e5ae4e5ca2870f742c61f1835eea", "sha256": "856f25698a4a9b682b65d755268b8a76a4aa9e79beb679997e6ecdccfb46b2e7"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d891e5ae4e5ca2870f742c61f1835eea", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 143740, "upload_time": "2017-03-07T16:16:19", "upload_time_iso_8601": "2017-03-07T16:16:19.253161Z", "url": "https://files.pythonhosted.org/packages/5c/39/bf9cbd48e23bc61560ca45f13dd84e50256555e1cfa0110784467a94aac2/django_netjsonconfig-0.5.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17a42231cf814a4f05a50dbcd3d332bb", "sha256": "cb2700431fcb0670c33a230fee723e934142aeb1b828285c280232a5ebce6e62"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.4.tar.gz", "has_sig": true, "md5_digest": "17a42231cf814a4f05a50dbcd3d332bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137609, "upload_time": "2017-03-07T16:16:16", "upload_time_iso_8601": "2017-03-07T16:16:16.496389Z", "url": "https://files.pythonhosted.org/packages/1a/9e/2d88ab4e58f5af429e7b0df385f63d15bda7b1c704e7ea3d51331c200803/django-netjsonconfig-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "727ccd416b3db749b57b801fe72c156f", "sha256": "1a6ac628e86d6c146a1aeadd17824ec0d2b8d56daac947b3c319488cb38b6459"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "727ccd416b3db749b57b801fe72c156f", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 410450, "upload_time": "2017-03-09T18:00:31", "upload_time_iso_8601": "2017-03-09T18:00:31.251097Z", "url": "https://files.pythonhosted.org/packages/14/83/b7fa76308058f409600832bef5b49e232f2d1b35737073128c26f4ef9cd2/django_netjsonconfig-0.5.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db81431736898ee1ec9fff71d1907df5", "sha256": "c3f5a39a247876d34c2f281e43f7c7160f04fa5a5fd3052a06b856db706254f9"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.5.tar.gz", "has_sig": true, "md5_digest": "db81431736898ee1ec9fff71d1907df5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 400005, "upload_time": "2017-03-09T18:00:28", "upload_time_iso_8601": "2017-03-09T18:00:28.391390Z", "url": "https://files.pythonhosted.org/packages/be/45/0b9ba79b2071bddacc8c772c6a5cf5fb2e96fe934b857cc98eaa4a2df2e5/django-netjsonconfig-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "f3672585a5e14e1c1c306e63c211f276", "sha256": "aacf19b5b25ae95c9cb1cfc154a6681bf8f81a0e74065f5928063376fc19c658"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.6-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f3672585a5e14e1c1c306e63c211f276", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 410512, "upload_time": "2017-03-15T17:58:18", "upload_time_iso_8601": "2017-03-15T17:58:18.457018Z", "url": "https://files.pythonhosted.org/packages/fc/ea/447afcbad1d3113717e3061b1f386baa485c3522bae2d7184911545c8f17/django_netjsonconfig-0.5.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1bbca48aba94a84267295a010035670", "sha256": "eae06f7eb258c7ae85c14be79c264e132ed3a4ba372fe95586040b8bddccd563"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.6.tar.gz", "has_sig": true, "md5_digest": "f1bbca48aba94a84267295a010035670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 400178, "upload_time": "2017-03-15T17:58:15", "upload_time_iso_8601": "2017-03-15T17:58:15.586154Z", "url": "https://files.pythonhosted.org/packages/06/69/772b3106139b5516681f86f94dbcd940270be37684715f813cb13bb6eb8d/django-netjsonconfig-0.5.6.tar.gz", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "815a9b253db726a9bf6667aa6749f559", "sha256": "36dd4c4164611784cd32206c8c45ab2b8420ca46166ed84ebf41120962ac4cfc"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.7-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "815a9b253db726a9bf6667aa6749f559", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 411226, "upload_time": "2017-03-28T13:05:40", "upload_time_iso_8601": "2017-03-28T13:05:40.920684Z", "url": "https://files.pythonhosted.org/packages/0c/87/e208c9fa578091b05b518ab2958d826022ab160d3f68949098385ff516d3/django_netjsonconfig-0.5.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa6a698ed92e10a16fbce4791202e377", "sha256": "b7df43bb0066c30dde4fced5c6887442eac96aa494aad882bc0999470eacf6e4"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.7.tar.gz", "has_sig": true, "md5_digest": "aa6a698ed92e10a16fbce4791202e377", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 400983, "upload_time": "2017-03-28T13:05:36", "upload_time_iso_8601": "2017-03-28T13:05:36.698843Z", "url": "https://files.pythonhosted.org/packages/59/a8/5492509bbfee716e6ee326d1371f387f7b3feadf57d0670d30f500b4def6/django-netjsonconfig-0.5.7.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "e420ac4b09486af5de4e2b29f19dabcc", "sha256": "766248c46fc6fff9eb05a5aa76b54db8cae8d73065422f3fb031b723b5ce60e6"}, "downloads": -1, "filename": "django_netjsonconfig-0.5.8-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "e420ac4b09486af5de4e2b29f19dabcc", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 412256, "upload_time": "2017-04-21T16:16:28", "upload_time_iso_8601": "2017-04-21T16:16:28.152992Z", "url": "https://files.pythonhosted.org/packages/94/bb/767a17e9b12ede30743f42cf24c4646f16d64d9976812a09b7fcec93d5d9/django_netjsonconfig-0.5.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65b4cd7444f414d34f8b1a8de62126f2", "sha256": "93a1145f79ac7124cf9b461a15fda4cd2ef2e0c0bab272821bfacd32feb4aba1"}, "downloads": -1, "filename": "django-netjsonconfig-0.5.8.tar.gz", "has_sig": true, "md5_digest": "65b4cd7444f414d34f8b1a8de62126f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 401133, "upload_time": "2017-04-21T16:16:23", "upload_time_iso_8601": "2017-04-21T16:16:23.783069Z", "url": "https://files.pythonhosted.org/packages/82/52/fe4719b92277f83174ca125a5f1606834aae8da9697e654e3d0c0bd2c7e2/django-netjsonconfig-0.5.8.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "e93ed7176ec20532c8559874bf57b183", "sha256": "be46cb270f2ab0fc3a73d08d6a148a4466a961ae267c0111ecd9707a4c814d0d"}, "downloads": -1, "filename": "django_netjsonconfig-0.6-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "e93ed7176ec20532c8559874bf57b183", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 423872, "upload_time": "2017-05-24T20:19:46", "upload_time_iso_8601": "2017-05-24T20:19:46.552599Z", "url": "https://files.pythonhosted.org/packages/d9/4f/a8d9463d0fd7996176f4d2b8b025cd097c47af77824821977ff54fb77d8c/django_netjsonconfig-0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1669e8afd29852e098fb2ade7372bc59", "sha256": "bfcf50af6050a615c03a575e889fe25de2a6f37783a6831c9fa7a4cff84152f8"}, "downloads": -1, "filename": "django-netjsonconfig-0.6.tar.gz", "has_sig": true, "md5_digest": "1669e8afd29852e098fb2ade7372bc59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 408334, "upload_time": "2017-05-24T20:19:43", "upload_time_iso_8601": "2017-05-24T20:19:43.446474Z", "url": "https://files.pythonhosted.org/packages/9c/0b/75307e708bc15472bcb5840dab0184e5bc440d96d2709aec3f50ca710fa9/django-netjsonconfig-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "7e73925e50ce37709477ddf790c3115e", "sha256": "6ff48cff58ea7bdb216afbc49473afa4ace52ab74c077eb8429afc7ccfe2a423"}, "downloads": -1, "filename": "django_netjsonconfig-0.6.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "7e73925e50ce37709477ddf790c3115e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 423934, "upload_time": "2017-06-01T11:03:43", "upload_time_iso_8601": "2017-06-01T11:03:43.046831Z", "url": "https://files.pythonhosted.org/packages/7d/8a/12d68ac976ff7bcf9f7ce1df70864de045e1e9ea36ecc7d0a3af010faf3f/django_netjsonconfig-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7da9af03b7e873292126bac6aa079199", "sha256": "a4b6fd73a6f7de6b96c5ad7f354d4b7eb297caaafb9b7b4831b17e99f215275c"}, "downloads": -1, "filename": "django-netjsonconfig-0.6.1.tar.gz", "has_sig": true, "md5_digest": "7da9af03b7e873292126bac6aa079199", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 408413, "upload_time": "2017-06-01T11:03:39", "upload_time_iso_8601": "2017-06-01T11:03:39.780508Z", "url": "https://files.pythonhosted.org/packages/eb/9a/50aa1070b2cdd6866f94de93b694dd6373e34c244f33d67f327da130801f/django-netjsonconfig-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "9edfcee0ccb3039f7b7982fe2d821a23", "sha256": "14d5f1921d69967731785d8ee9165b1a206801604ad246c386d6427be8dff2ed"}, "downloads": -1, "filename": "django_netjsonconfig-0.6.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "9edfcee0ccb3039f7b7982fe2d821a23", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 384223, "upload_time": "2017-07-05T10:58:23", "upload_time_iso_8601": "2017-07-05T10:58:23.439410Z", "url": "https://files.pythonhosted.org/packages/7a/c9/d1521d2258809e8ee3fbe5af7e97581f29e504e0fbb7646bdc0a9946f990/django_netjsonconfig-0.6.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9785a59abdbe8927c93315cdb6a1038c", "sha256": "b4df21e8aec5bbf4f76dc251a8df2276923e3763e8e505b03efa0c6527359eb1"}, "downloads": -1, "filename": "django-netjsonconfig-0.6.2.tar.gz", "has_sig": true, "md5_digest": "9785a59abdbe8927c93315cdb6a1038c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 366465, "upload_time": "2017-07-05T10:58:20", "upload_time_iso_8601": "2017-07-05T10:58:20.001215Z", "url": "https://files.pythonhosted.org/packages/da/ab/798558119c4e8498dfa774c381d06d88a3c3b43c4a2e8a0ee1ea7b2f4d28/django-netjsonconfig-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "520374cda4fbafaca6e044af5af43f99", "sha256": "308ae175203e46bd1f5051dc90e897fdc6f3d3d8e18b9e1c7b323bbd43d741fc"}, "downloads": -1, "filename": "django_netjsonconfig-0.6.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "520374cda4fbafaca6e044af5af43f99", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 383432, "upload_time": "2017-07-10T16:01:13", "upload_time_iso_8601": "2017-07-10T16:01:13.465169Z", "url": "https://files.pythonhosted.org/packages/6d/11/795b840bb4cc095fa5eea78f83e887af10bbb73b7a7778321a72935bdad3/django_netjsonconfig-0.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4969fe19aafc0726fe8a2f901dbe7f2c", "sha256": "7d6ef49fb61383385ba382d2f4975670e3ef74cc849e1d52df3bb6fd10d38107"}, "downloads": -1, "filename": "django-netjsonconfig-0.6.3.tar.gz", "has_sig": true, "md5_digest": "4969fe19aafc0726fe8a2f901dbe7f2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 366398, "upload_time": "2017-07-10T16:01:10", "upload_time_iso_8601": "2017-07-10T16:01:10.845850Z", "url": "https://files.pythonhosted.org/packages/36/73/5f021014e2fa6f9bf3058664282ded2adce6de5f44e97e4e71cce5de0154/django-netjsonconfig-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "a5c403a008246500ee431c3607185232", "sha256": "57d86e8ef19e2bf9de0b7160ad9487e47598ac9919fcbf741442eeade5b0942b"}, "downloads": -1, "filename": "django_netjsonconfig-0.6.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a5c403a008246500ee431c3607185232", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 383508, "upload_time": "2017-08-29T12:39:08", "upload_time_iso_8601": "2017-08-29T12:39:08.513019Z", "url": "https://files.pythonhosted.org/packages/92/b8/797ce01d61fbd28804b258eb11938365cf9801abf873df81c37feee913d7/django_netjsonconfig-0.6.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "867e232eb6fa59fecdfbfb255ad4c26c", "sha256": "ac74093253b1604493e54d3a9c0faa6cade1a72c558ba600b5079e595e77d2d7"}, "downloads": -1, "filename": "django-netjsonconfig-0.6.4.tar.gz", "has_sig": true, "md5_digest": "867e232eb6fa59fecdfbfb255ad4c26c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 366542, "upload_time": "2017-08-29T12:39:05", "upload_time_iso_8601": "2017-08-29T12:39:05.463006Z", "url": "https://files.pythonhosted.org/packages/c4/42/45e14bcfc31f9fa54439b83e0ebbc6d131870e75033bd2af7afefb443cdf/django-netjsonconfig-0.6.4.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "1a089f3cfbd7a662f0353425ca21ec97", "sha256": "1bb8d37daa0536a69bb627895c0187a36cc8d2b106ea62c3afaf80eeea827eab"}, "downloads": -1, "filename": "django_netjsonconfig-0.7-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1a089f3cfbd7a662f0353425ca21ec97", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 383616, "upload_time": "2017-11-05T11:55:01", "upload_time_iso_8601": "2017-11-05T11:55:01.223765Z", "url": "https://files.pythonhosted.org/packages/c6/8d/a9ca3e09068f0fbb7ef08e568a585703e024214bcd56b15820f7d1976aca/django_netjsonconfig-0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d418d7eba1bf68cc33400cdebe24ad3", "sha256": "21e772628e89d4fe5035acfe0fbd289789428ff010297b53586d9e721a424150"}, "downloads": -1, "filename": "django-netjsonconfig-0.7.tar.gz", "has_sig": true, "md5_digest": "2d418d7eba1bf68cc33400cdebe24ad3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 364849, "upload_time": "2017-11-05T11:55:04", "upload_time_iso_8601": "2017-11-05T11:55:04.906722Z", "url": "https://files.pythonhosted.org/packages/b8/65/ad5843ad2e2d610ae3022cf65d727f814d462812c11abb8f3171b176b47c/django-netjsonconfig-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "d6739dab8699dae0480a2b43d131a467", "sha256": "475ca5c3fa7a875cd2e03c6db9bb7b9b92d9c5691cf8775ac0865ef699ea4bd2"}, "downloads": -1, "filename": "django_netjsonconfig-0.7.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d6739dab8699dae0480a2b43d131a467", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 383692, "upload_time": "2017-11-07T15:47:46", "upload_time_iso_8601": "2017-11-07T15:47:46.185569Z", "url": "https://files.pythonhosted.org/packages/21/85/b26e23b98d2d9cd5c447fb7de44ac9025a2c7608c1d196295298d9469bbb/django_netjsonconfig-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f7561ae0ed5a6b32fadf7b27e108d4a", "sha256": "500e3f0fdbc06d94661b40de9b843c54609cc9131f8777c232dbfdac2f397e47"}, "downloads": -1, "filename": "django-netjsonconfig-0.7.1.tar.gz", "has_sig": true, "md5_digest": "4f7561ae0ed5a6b32fadf7b27e108d4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 366976, "upload_time": "2017-11-07T15:47:43", "upload_time_iso_8601": "2017-11-07T15:47:43.112618Z", "url": "https://files.pythonhosted.org/packages/b0/a3/5307a74c11fcef2891ffecf09b4ea06a4662f720282d2193f4acc5f262b2/django-netjsonconfig-0.7.1.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "a010c1c43925dddb721cd435eaacd43a", "sha256": "3b1f25c33a27e627112055b1c74f1a9e24ce0b10d4f7d536530f02f38c20d32c"}, "downloads": -1, "filename": "django_netjsonconfig-0.8-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a010c1c43925dddb721cd435eaacd43a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 384998, "upload_time": "2018-02-19T12:13:55", "upload_time_iso_8601": "2018-02-19T12:13:55.368652Z", "url": "https://files.pythonhosted.org/packages/d3/df/bd7cceddd4e54333921237eff521ceb08d0252b14a50b27ad3f7e6e832d4/django_netjsonconfig-0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ba24d4f694fbe9e78e97569793ba537", "sha256": "a2ce8d5d2f3eab1eef6f8cef2981222200474664331b31799997df97bd5c21b5"}, "downloads": -1, "filename": "django-netjsonconfig-0.8.tar.gz", "has_sig": true, "md5_digest": "1ba24d4f694fbe9e78e97569793ba537", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 365922, "upload_time": "2018-02-19T12:13:58", "upload_time_iso_8601": "2018-02-19T12:13:58.154337Z", "url": "https://files.pythonhosted.org/packages/d9/7d/08dce6c52df86915eb744ee8467fb69549df0c30ec806b184a33017b929a/django-netjsonconfig-0.8.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "32c401f5544338aa1ecbc02ac3faefea", "sha256": "0f7177003cdd92ae9c87f14414fd03c091261a211311835bca948afda3c64709"}, "downloads": -1, "filename": "django_netjsonconfig-0.8.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "32c401f5544338aa1ecbc02ac3faefea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 380363, "upload_time": "2018-07-12T11:31:49", "upload_time_iso_8601": "2018-07-12T11:31:49.601505Z", "url": "https://files.pythonhosted.org/packages/cb/7f/ef265ee90ff5f8da8ce8978addec18e68ac568826a4532a96197350d9085/django_netjsonconfig-0.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dd9faf546b9beb7e247f321245ed811", "sha256": "7ed4701a0723323be57955fc1351b1d8b6091a0940fed898faa31ffcf8592ce5"}, "downloads": -1, "filename": "django-netjsonconfig-0.8.1.tar.gz", "has_sig": true, "md5_digest": "9dd9faf546b9beb7e247f321245ed811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 370133, "upload_time": "2018-07-12T11:31:52", "upload_time_iso_8601": "2018-07-12T11:31:52.243032Z", "url": "https://files.pythonhosted.org/packages/10/bd/eca8bd5fc742dc04b0785493dc6a88481fdc60f9daa765477e72e7493831/django-netjsonconfig-0.8.1.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "ae256deedc0fddb828f4251c7252f37f", "sha256": "9f5f4c314c90b7455fea21fab4e6e32f1969430dff220e3586e65c679783d696"}, "downloads": -1, "filename": "django_netjsonconfig-0.9-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "ae256deedc0fddb828f4251c7252f37f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 403830, "upload_time": "2020-01-09T19:30:55", "upload_time_iso_8601": "2020-01-09T19:30:55.995905Z", "url": "https://files.pythonhosted.org/packages/bc/52/abca3662de609243c45db0a2703008bf9feb8d6f7cf75109394a084d4753/django_netjsonconfig-0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68d4c9656d61e24196a5908418547b45", "sha256": "e79adbfa1bd5b12bde950f7cd757b77501aba90fbd1d8e23d31d17bb2dedd1a3"}, "downloads": -1, "filename": "django-netjsonconfig-0.9.tar.gz", "has_sig": true, "md5_digest": "68d4c9656d61e24196a5908418547b45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 378289, "upload_time": "2020-01-09T19:31:01", "upload_time_iso_8601": "2020-01-09T19:31:01.177150Z", "url": "https://files.pythonhosted.org/packages/4f/ae/7ca4d7b31f8d241fe16dbd6ddb29ff2f0143b29bce29882304566af0ed95/django-netjsonconfig-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8d83c65e5035f2999b8be63658fe689", "sha256": "726923f53576afe0c68804aaf65fb863c07601b41eccaf858b379595f87412f6"}, "downloads": -1, "filename": "django_netjsonconfig-0.11-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a8d83c65e5035f2999b8be63658fe689", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 406893, "upload_time": "2020-04-02T17:49:16", "upload_time_iso_8601": "2020-04-02T17:49:16.152119Z", "url": "https://files.pythonhosted.org/packages/1a/b2/6934372e589e342e5e8cb7cf7f56ec419ac6e05dae1cbb41a7c7bdae6c9d/django_netjsonconfig-0.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "753c015fd073ffe45b289ddedb8e45a5", "sha256": "349a63520b735ae60f5b7d584c1ed42c69b2b88480866db781335c3057e24494"}, "downloads": -1, "filename": "django-netjsonconfig-0.11.tar.gz", "has_sig": true, "md5_digest": "753c015fd073ffe45b289ddedb8e45a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 382128, "upload_time": "2020-04-02T17:49:27", "upload_time_iso_8601": "2020-04-02T17:49:27.397105Z", "url": "https://files.pythonhosted.org/packages/cb/47/c08a5e9d0f0574c6d33c5e92849d8025fe3ac330538e7097402ad39e8ce1/django-netjsonconfig-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:42 2020"}