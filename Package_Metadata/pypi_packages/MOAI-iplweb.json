{"info": {"author": "Micha\u0142 Pasternak", "author_email": "michal.dtz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\nMOAI, an Open Access Server Platform for Institutional Repositories\n===================================================================\n\nMOAI is a platform for aggregating content from different sources, and publishing it through the Open Archive Initiatives protocol for metadata harvesting.\nIt's been built for academic institutional repositories dealing with relational metadata and asset files.\n\nWhat does it do?\n----------------\n\nThe MOAI software can aggregate content from different sources, transform it and store it in a database. The contents of this database can then be published in many separate OAI feeds, each with its own configuration. \n\nThe MOAI software has a very flexible system for combining records into sets, and can use these sets in the feed configuration. It also comes with a simple yet flexible authentication scheme that can be easily customized. Besides providing authentication for the feeds, the authentication also controls the access to the assets. \n\nWhy MOAI\n--------\n\nMOAI has been specifically developed for universities, and contains a lot of hard-earned wisdom. The software has been in production use since 2007, and new features have been continually added. In late 2008, the software was completely refactored and packaged under the name \"MOAI\". You can read more about this on the `MOAI History`_ page.\n\nMOAI is a standalone system, so it can be used in combination with any repository software that comes with an OAI feed such as `Fedora Commons`_, `EPrints`_ or `DSpace`_. It can also be used directly with an SQL database or just a folder of XML files.\n\nThe MOAI project takes the philosophy that every repository is different and unique, and that an institutional repository is a living thing. It is therefore never finished. Metadata is always changes, improving, and evolves. We think this is healthy. \n\nBecause of this viewpoint, the MOAI software makes it as easy as possible to add or modify parts of your repository (OAI) services stack. It tries to do this without sacrificing power, and encouraging the re-use of components.\n\nFeatures\n--------\n\nMOAI has some interesting features not found in most OAI servers. \nBesides serving OAI, it can also harvest OAI. This makes it possible for MOAI to work as a pipe, where the OAI data can be reconfigured, cached, and enriched while it passes through the MOAI processing.\n\n\nMore specifically MOAI has the ability to:\n\n- Harvest data from different kinds of sources\n- Serve many OAI feeds from one MOAI server, each with their own configuration\n- Turn metadata values into OAI sets on the fly, creating new collections\n- Use OAI sets to filter records shown in a feed, configurable for each feed\n- Work easily with relational data (e.g. if an author changes, the publication should also change)\n- Simple and robust authentication through integration with the Apache webserver\n- Serve assets via Apache while still using configurable authentication rules\n\n\n.. _MOAI History: http://moai.infrae.com/history.html\n.. _Fedora Commons: http://www.fedora.info\n.. _EPrints: http://www.eprints.org\n.. _DSpace: http://www.dspace.org/\n\nThis is a fork\n==============\n\nThis is a fork of original project, which can be found https://github.com/infrae/moai/ which\nincludes TravisCI integration and Python 3 support. Both of those were returned to the original\nauthors in form of a pull request here: https://github.com/infrae/moai/pull/5 . In case\nthe original author decides to integrate suggested changes and support Python 3, this fork\nwill be irrelevant.\n\nPlease note that other than updating this README and renaming setup.py file, there are no\nbigger changes. This means that documentation may be obsolete in some parts. Patches accepted.\n\n\n===============\nInstalling MOAI\n===============\n\n.. image:: https://img.shields.io/travis/iplweb/moai-iplweb.svg\n        :target: https://travis-ci.org/iplweb/moai-iplweb\n\n\nThe MOAI Software can be run in any wsgi compliant server. \n\nMOAI comes with a development server that can be used for testing. In production mod_wsgi can be used to run Moai in the apache webserver.\n\nInstallation Steps\n==================\n\nMOAI is a normal python package. It is tested with Python 2.7, 3.4, 3.5, 3.6.\nI recommend creating a virtualenv to install the package in.\n\nhttp://pypi.python.org/pypi/virtualenv/\n\nThis makes development and deployment easier.\nInstructions below are for unix, but MOAI should also work on Windows\n\nGo into the MOAI directory with the setup.py, and run the virtualenv command\n\n> cd moai\n> virtualenv .\n\nNow, activate the virtualenv\n\n> source bin/activate\n\nInstall MOAI in the virtualenv using pip\n\n> pip install -e .\n\n(this will take a while)\n\nWhen this process finishes, Moai and all its dependencies will be installed.\n\nRunning in development mode\n===========================\n\nThe development server should never be used for production, it is convenient for testing and development. Note that you should always activate the virtualenv otherwise the dependecies will not be found\n\n> cd moai\n> source bin/activate\n> ./bin/paster serve settings.ini\n\nThis will print something like:\n\n  Starting server in PID 7306.\n  Starting HTTP server on http://127.0.0.1:8080\n\nYou can now visit localhost:8080/oai to view the moai oaipmh feed. \n\nConfiguring MOAI\n================\n\nConfiguration is done in the settings.ini file. The default settings file uses the Paste#urlmap application to map wsgi applications to a url.\n\nIn the `composite:main` section there is a line:\n\n/oai = moai_example\n\nWhich maps the /oai url to a Moai instance. \nThis makes it easy to run many Maoi instances in one server, each with it's own configuration.\n\nThe app:moai_example configuration let's you specify the following options:\n\nname\n  The name of the oai feed (returned in Identify verb)\nurl\n  The url of the oai feed (returned in oaipmh xml output)\nadmin_email\n  The email adress of the amdin  (returned in Identify verb)\nformats\n  Available metadata formats\ndisallow_sets\n  List of setspecs that are not allowed in the output of this feed\nallow_sets\n  If used, only sets listed here will be returned\ndatabase\n  SQLAlchemy uri to identify the database for used for storage\nprovider\n  Provider identifier where moai retrieves content from\ncontent\n  Class that maps metadata from provider format to moai format\n\nAdding Content\n==============\n\nThe Moai system is designed to periodically fetch content from a `provider`, and convert it to Moai's internal format, which can then be translated to the different metadata formats for the oaipmh feed.\n\nMoai comes with an example that shows this principle:\n\nIn the moai/moai directory there are two XML files. Let's pretend these files are from a remote system, and we want to publish them with MOAI.\n\nIn the settings.ini file, the following option is specified:\n\n`provider = file://moai/example-*.xml`\n\nThis tells moai that we want to use a file provider, with some files located in\n`moai/example-*.xml`. \n\nThe following option points to the class that we want to use for converting the example content xml data to Moais internal format.\n\ncontent = moai_example\n\nThe last option tells Moai where to store it's data, this is usually a sqlite database:\n\ndatabase = sqlite:///moai-example.db\n\nNow let's try to add these two xml files, let's first visit the oaipmh feed to make sure nothing is allready being served:\n\nhttp://localhost:8080/oai?verb=ListRecords&metadataPrefix=oai_dc\n\nThis should return a noRecordsMatch error.\n\nTo add the content, run the update_content script, with the section name from the settings.ini as argument\n\n> ./bin/update_moai moai_example\n\nThis will produce the following output:\n\n/ Updating content provider: example-2345.xml                                   \nContent provider returned 2 new/modified objects\n\n100.0%[====================================================================>] 2\nUpdating database with 2 objects took 0 seconds\n\nNow when you visit the oaipmh feed again you should see the two records:\n\nhttp://localhost:8080/oai?verb=ListRecords&metadataPrefix=oai_dc\n\nWhen you run the update_moai script again, it will create a new database with all the records (in this case moai_example.db). It is also possible to specify a data with the --date switch. When a data is specified, only records that were modified after this date will be added. \nThe update_moai script can be run from a daily or hourly cron job to update the database\n\nAdding your own Provider / Content and Metadata Classes\n=======================================================\n\nIt's possible and most of the time, needed, to extend Moai for your use-cases.\nThe Provider and Content classes from the example might be a good starting point if you want to do that. All your customizations should be registered with Moai through `entry_points`. Have a look at Moais setup.py for more information.\nThe best approach would be to create your own python package with setup.py and install this in the same environment as Moai. This will let Moai find your customizations. Note that when you change something in your setup.py, you have to reinstall the package, for Moai to pick up the changes.\n\nNote that the moai.interfaces file contains documentation about the different classes that you can implement.\n\nAdding your own Database\n========================\n\nInstead of writing your own provider/content classes, you can also register your own custom database. Implementing a replacement for moai.database.SQLDatabase can be more complicated then writing a provider/content class, but it has the advantage that Moai is always up to date, and you don't need a second sqlite database.\n\nHave a look at the setup.py file from the MOAI code, it registers several databases. You could use this mechanism to register your own database from your own python package.\n\nIn the settings.ini you configuration you can then reference your database ('mydb://some+config+variables').\n\nFor the database, have a look at the generic database provider in database.py. The only methods that you need to implement are: oai_sets, oai_earliest_datestamp and oai_query.\nThe oai_query method returns dictionaries with record data. The keys of these dictionaries are defined in the metadata files (for example metadata.py),  have a look at the source. \n\nFor oai_dc there are the following names:\n\n'title', 'creator', 'subject', 'description', 'publisher', 'contributor', 'type', 'format', 'identifier', 'source', 'language', 'date', 'relation', 'coverage', 'rights\n\nSo a return value would look like::\n\n    {'id': <oai record id>,\n     'deleted': <bool>,\n     'modified': <utc datetime>,\n     'sets': <list of setspecs>,\n     'metadata': {\n       'title': [<list with publication title>],\n       'creator': [<list of creator names>],\n       ...}\n    }\n\n \n\n\n\n\n\nMOAI Changes\n============\n\nMOAI 2.0.0 (2013-02-28)\n-----------------------\n\n- First public release in the 2.x series, switched to mod_wsgi, \n  smaller simpler codebase, pluggability through entry_points instead of ZCA.\n- New docs and examples, simpler direct integration with external databases\n- Update mods format and support for EU GAL metadata MODS extension\n- Several documentation and tool improvements by Filipe Correia\n\nMOAI 1.1.2 (2010-09-30)\n-----------------------\n\n- Changed contact info, and switched repository from svn to mercurial\n  this release has no code changes\n\n\nChanges\n~~~~~~~\n\nMOAI 1.1.1 (2010-09-02)\n-----------------------\n\nChanges\n~~~~~~~\n\n- Fixed ID/IDref attributes in MODS format\n- Fixed ZeroDivisionError in progressbar drawing of updatedb script\n\nMOAI 1.1.0 (2010-04-08)\n-----------------------\n\nChanges\n~~~~~~~\n\n- Added new config option `deleted_sets` which can be used to make all \n  resources within a specific set `oai deleted` within the context of a \n  specific feed. In many cases this is preferable compared to `disallowed_sets`\n  since resources will just dissapear when they are not allowed without\n  leaving a proper deleted resource behind.\n- Disable ranged HTTP requests in Apache mod_python backend. This was giving\n  problems with acrobat plugin and its \"Fast Web View\" feature.\n- Show records sorted on descending datestamp, instead of ascending record id,\n  in sqlite backend.\n\nChanges\n~~~~~~~\n\nMOAI 1.0.10 (2010-03-25)\n------------------------\n\nChanges\n~~~~~~~\n\n- Changed DIP:objectType to rdf:type in the didl metadata format, \n  as required by darenet/driver/didl 3.0 format\n- Added support for modification dates and accessrights in the didl format\n \n\nMOAI 1.0.9 (2010-02-16)\n-----------------------\n\nChanges\n~~~~~~~\n\n- Added checking on XML compatibility in update.py, update_database_iterate().\n  This prevents the OAI server from crashing on invalid data. \n- Fixed a minor bug in tools.py. The -d (debug) flag for the update_database \n  script didn't halt on errors.\n\n- Added a flush_threshold attribute to the DatabaseUpdater. This can be\n  used to make the database flush after n records. By default the value\n  is -1, and flushing only happens at the end of the update.\n- Fixed assertion statements in content.py (gave warnings in python2.6)\n\n\nMOAI 1.0.8 (2009-16-18) \n-----------------------\n\nChanges\n~~~~~~~\n\n- Added a MANIFEST.in file to make sure all files are included\n  in the python package.\n\nMOAI 1.0.7 (2009-16-11) \n-----------------------\n\nChanges\n~~~~~~~\n\n- Changed DIP namespace in didl metadata extension\n- Fixed bug in ListMetadataFormats verb\n- Uses pyoai 2.4.1, which when specifying a date (not a datetime) \n  for the until parameter, defaults to 23:59:59 instead of 00:00:00.\n\nMOAI 1.0.6 (2009-08-12)\n-----------------------\n\nChanges\n~~~~~~~\n- Fixed metadataPrefix value in didl:Resource URL. This was using\n  `didl` instead of `nl_didl` \n\nMOAI 1.0.5 (2009-08-12)\n-----------------------\n\n- Unicode bug in Fedora provider\n- Added support for mods:location/url \n  Make url prefered identifier in oai_dc:identifier instead of uri\n- Update method of Content Objects can now return False to prevent \n  further processing of the object. The object will be logged as \n  `ignored`\n\nMOAI 1.0.4 (2009-07-15)\n-----------------------\n\nChanges\n~~~~~~~\n\n- Fixed misspelled mimeType attribute in DIDL metadata prefix\n\nMOAI 1.0.3 (2009-06-23)\n-----------------------\n\nChanges\n~~~~~~~\n- Bug in ListMetadataFormats when using nl_didl prefix\n- Added simple dc example profile\n\nMOAI 1.0.2 (2009-05-20)\n-----------------------\n\nChanges\n~~~~~~~\n\n- Location in mod_python config is dynamicly extracted\n  from Metro Server class.\n\nMOAI 1.0.1 (2009-05-19)\n-----------------------\n\nChanges\n~~~~~~~\n\n- Fixed URL error in didl metadata prefix\n- Seperated darenet specific didl extensions in nl_didl prefix\n\nMOAI 1.0 (2009-05-04)\n-----------------------\n\nChanges\n~~~~~~~\n\n- Improved documentation\n- Added description to Identify header\n- More complete mods name roles\n- Require newer pyoai version that gives better error responses\n  when wrong datatime values are used in OAI requests\n\nMOAI 0.9.x (2009-02-01)\n-----------------------\n\nChanges\n~~~~~~~\n- Added Apache mod_python backend\n- Added basic authentication for fedora provider\n- Made fedora provider datastream argument optional,\n  if not specified the whole foxml file is returned\n- Ported SQLite database backend from EUR RePub\n- Renamed MetaDataPrefix classes to MetaDataFormat\n- Added configurable plugin system\n- Added documentation website (more info in README.txt)\n- Made Fedora provider not write all files in same directory\n\nChanges\n~~~~~~~\n- OAI ListRecords with from and until dateparams where not inclusive in SQLite engine\n- OAI ListSets did not return dynamic sets (added test)\n- OAI GetRecord returning the same record (added test) \n\n\nMOAI 0.9 (2008-11-18)\n-----------------------\n\n- Initial development borrowing code and ideas from RepubXML,\n  a repository environment build for the Erasmus Univiersity Rotterdam\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://iplweb.pl/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "MOAI-iplweb", "package_url": "https://pypi.org/project/MOAI-iplweb/", "platform": "", "project_url": "https://pypi.org/project/MOAI-iplweb/", "project_urls": {"Homepage": "http://iplweb.pl/"}, "release_url": "https://pypi.org/project/MOAI-iplweb/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "MOAI, A Open Access Server Platform for Institutional Repositories", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <br>MOAI, an Open Access Server Platform for Institutional Repositories<br>===================================================================<br><br>MOAI is a platform for aggregating content from different sources, and publishing it through the Open Archive Initiatives protocol for metadata harvesting.<br>It's been built for academic institutional repositories dealing with relational metadata and asset files.<br><br>What does it do?<br>----------------<br><br>The MOAI software can aggregate content from different sources, transform it and store it in a database. The contents of this database can then be published in many separate OAI feeds, each with its own configuration. <br><br>The MOAI software has a very flexible system for combining records into sets, and can use these sets in the feed configuration. It also comes with a simple yet flexible authentication scheme that can be easily customized. Besides providing authentication for the feeds, the authentication also controls the access to the assets. <br><br>Why MOAI<br>--------<br><br>MOAI has been specifically developed for universities, and contains a lot of hard-earned wisdom. The software has been in production use since 2007, and new features have been continually added. In late 2008, the software was completely refactored and packaged under the name \"MOAI\". You can read more about this on the `MOAI History`_ page.<br><br>MOAI is a standalone system, so it can be used in combination with any repository software that comes with an OAI feed such as `Fedora Commons`_, `EPrints`_ or `DSpace`_. It can also be used directly with an SQL database or just a folder of XML files.<br><br>The MOAI project takes the philosophy that every repository is different and unique, and that an institutional repository is a living thing. It is therefore never finished. Metadata is always changes, improving, and evolves. We think this is healthy. <br><br>Because of this viewpoint, the MOAI software makes it as easy as possible to add or modify parts of your repository (OAI) services stack. It tries to do this without sacrificing power, and encouraging the re-use of components.<br><br>Features<br>--------<br><br>MOAI has some interesting features not found in most OAI servers. <br>Besides serving OAI, it can also harvest OAI. This makes it possible for MOAI to work as a pipe, where the OAI data can be reconfigured, cached, and enriched while it passes through the MOAI processing.<br><br><br>More specifically MOAI has the ability to:<br><br>- Harvest data from different kinds of sources<br>- Serve many OAI feeds from one MOAI server, each with their own configuration<br>- Turn metadata values into OAI sets on the fly, creating new collections<br>- Use OAI sets to filter records shown in a feed, configurable for each feed<br>- Work easily with relational data (e.g. if an author changes, the publication should also change)<br>- Simple and robust authentication through integration with the Apache webserver<br>- Serve assets via Apache while still using configurable authentication rules<br><br><br>.. _MOAI History: http://moai.infrae.com/history.html<br>.. _Fedora Commons: http://www.fedora.info<br>.. _EPrints: http://www.eprints.org<br>.. _DSpace: http://www.dspace.org/<br><br>This is a fork<br>==============<br><br>This is a fork of original project, which can be found https://github.com/infrae/moai/ which<br>includes TravisCI integration and Python 3 support. Both of those were returned to the original<br>authors in form of a pull request here: https://github.com/infrae/moai/pull/5 . In case<br>the original author decides to integrate suggested changes and support Python 3, this fork<br>will be irrelevant.<br><br>Please note that other than updating this README and renaming setup.py file, there are no<br>bigger changes. This means that documentation may be obsolete in some parts. Patches accepted.<br><br><br>===============<br>Installing MOAI<br>===============<br><br>.. image:: https://img.shields.io/travis/iplweb/moai-iplweb.svg<br>        :target: https://travis-ci.org/iplweb/moai-iplweb<br><br><br>The MOAI Software can be run in any wsgi compliant server. <br><br>MOAI comes with a development server that can be used for testing. In production mod_wsgi can be used to run Moai in the apache webserver.<br><br>Installation Steps<br>==================<br><br>MOAI is a normal python package. It is tested with Python 2.7, 3.4, 3.5, 3.6.<br>I recommend creating a virtualenv to install the package in.<br><br>http://pypi.python.org/pypi/virtualenv/<br><br>This makes development and deployment easier.<br>Instructions below are for unix, but MOAI should also work on Windows<br><br>Go into the MOAI directory with the setup.py, and run the virtualenv command<br><br>&gt; cd moai<br>&gt; virtualenv .<br><br>Now, activate the virtualenv<br><br>&gt; source bin/activate<br><br>Install MOAI in the virtualenv using pip<br><br>&gt; pip install -e .<br><br>(this will take a while)<br><br>When this process finishes, Moai and all its dependencies will be installed.<br><br>Running in development mode<br>===========================<br><br>The development server should never be used for production, it is convenient for testing and development. Note that you should always activate the virtualenv otherwise the dependecies will not be found<br><br>&gt; cd moai<br>&gt; source bin/activate<br>&gt; ./bin/paster serve settings.ini<br><br>This will print something like:<br><br>  Starting server in PID 7306.<br>  Starting HTTP server on http://127.0.0.1:8080<br><br>You can now visit localhost:8080/oai to view the moai oaipmh feed. <br><br>Configuring MOAI<br>================<br><br>Configuration is done in the settings.ini file. The default settings file uses the Paste#urlmap application to map wsgi applications to a url.<br><br>In the `composite:main` section there is a line:<br><br>/oai = moai_example<br><br>Which maps the /oai url to a Moai instance. <br>This makes it easy to run many Maoi instances in one server, each with it's own configuration.<br><br>The app:moai_example configuration let's you specify the following options:<br><br>name<br>  The name of the oai feed (returned in Identify verb)<br>url<br>  The url of the oai feed (returned in oaipmh xml output)<br>admin_email<br>  The email adress of the amdin  (returned in Identify verb)<br>formats<br>  Available metadata formats<br>disallow_sets<br>  List of setspecs that are not allowed in the output of this feed<br>allow_sets<br>  If used, only sets listed here will be returned<br>database<br>  SQLAlchemy uri to identify the database for used for storage<br>provider<br>  Provider identifier where moai retrieves content from<br>content<br>  Class that maps metadata from provider format to moai format<br><br>Adding Content<br>==============<br><br>The Moai system is designed to periodically fetch content from a `provider`, and convert it to Moai's internal format, which can then be translated to the different metadata formats for the oaipmh feed.<br><br>Moai comes with an example that shows this principle:<br><br>In the moai/moai directory there are two XML files. Let's pretend these files are from a remote system, and we want to publish them with MOAI.<br><br>In the settings.ini file, the following option is specified:<br><br>`provider = file://moai/example-*.xml`<br><br>This tells moai that we want to use a file provider, with some files located in<br>`moai/example-*.xml`. <br><br>The following option points to the class that we want to use for converting the example content xml data to Moais internal format.<br><br>content = moai_example<br><br>The last option tells Moai where to store it's data, this is usually a sqlite database:<br><br>database = sqlite:///moai-example.db<br><br>Now let's try to add these two xml files, let's first visit the oaipmh feed to make sure nothing is allready being served:<br><br>http://localhost:8080/oai?verb=ListRecords&amp;metadataPrefix=oai_dc<br><br>This should return a noRecordsMatch error.<br><br>To add the content, run the update_content script, with the section name from the settings.ini as argument<br><br>&gt; ./bin/update_moai moai_example<br><br>This will produce the following output:<br><br>/ Updating content provider: example-2345.xml                                   <br>Content provider returned 2 new/modified objects<br><br>100.0%[====================================================================&gt;] 2<br>Updating database with 2 objects took 0 seconds<br><br>Now when you visit the oaipmh feed again you should see the two records:<br><br>http://localhost:8080/oai?verb=ListRecords&amp;metadataPrefix=oai_dc<br><br>When you run the update_moai script again, it will create a new database with all the records (in this case moai_example.db). It is also possible to specify a data with the --date switch. When a data is specified, only records that were modified after this date will be added. <br>The update_moai script can be run from a daily or hourly cron job to update the database<br><br>Adding your own Provider / Content and Metadata Classes<br>=======================================================<br><br>It's possible and most of the time, needed, to extend Moai for your use-cases.<br>The Provider and Content classes from the example might be a good starting point if you want to do that. All your customizations should be registered with Moai through `entry_points`. Have a look at Moais setup.py for more information.<br>The best approach would be to create your own python package with setup.py and install this in the same environment as Moai. This will let Moai find your customizations. Note that when you change something in your setup.py, you have to reinstall the package, for Moai to pick up the changes.<br><br>Note that the moai.interfaces file contains documentation about the different classes that you can implement.<br><br>Adding your own Database<br>========================<br><br>Instead of writing your own provider/content classes, you can also register your own custom database. Implementing a replacement for moai.database.SQLDatabase can be more complicated then writing a provider/content class, but it has the advantage that Moai is always up to date, and you don't need a second sqlite database.<br><br>Have a look at the setup.py file from the MOAI code, it registers several databases. You could use this mechanism to register your own database from your own python package.<br><br>In the settings.ini you configuration you can then reference your database ('mydb://some+config+variables').<br><br>For the database, have a look at the generic database provider in database.py. The only methods that you need to implement are: oai_sets, oai_earliest_datestamp and oai_query.<br>The oai_query method returns dictionaries with record data. The keys of these dictionaries are defined in the metadata files (for example metadata.py),  have a look at the source. <br><br>For oai_dc there are the following names:<br><br>'title', 'creator', 'subject', 'description', 'publisher', 'contributor', 'type', 'format', 'identifier', 'source', 'language', 'date', 'relation', 'coverage', 'rights<br><br>So a return value would look like::<br><br>    {'id': &lt;oai record id&gt;,<br>     'deleted': &lt;bool&gt;,<br>     'modified': &lt;utc datetime&gt;,<br>     'sets': &lt;list of setspecs&gt;,<br>     'metadata': {<br>       'title': [&lt;list with publication title&gt;],<br>       'creator': [&lt;list of creator names&gt;],<br>       ...}<br>    }<br><br> <br><br><br><br><br><br>MOAI Changes<br>============<br><br>MOAI 2.0.0 (2013-02-28)<br>-----------------------<br><br>- First public release in the 2.x series, switched to mod_wsgi, <br>  smaller simpler codebase, pluggability through entry_points instead of ZCA.<br>- New docs and examples, simpler direct integration with external databases<br>- Update mods format and support for EU GAL metadata MODS extension<br>- Several documentation and tool improvements by Filipe Correia<br><br>MOAI 1.1.2 (2010-09-30)<br>-----------------------<br><br>- Changed contact info, and switched repository from svn to mercurial<br>  this release has no code changes<br><br><br>Changes<br>~~~~~~~<br><br>MOAI 1.1.1 (2010-09-02)<br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Fixed ID/IDref attributes in MODS format<br>- Fixed ZeroDivisionError in progressbar drawing of updatedb script<br><br>MOAI 1.1.0 (2010-04-08)<br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Added new config option `deleted_sets` which can be used to make all <br>  resources within a specific set `oai deleted` within the context of a <br>  specific feed. In many cases this is preferable compared to `disallowed_sets`<br>  since resources will just dissapear when they are not allowed without<br>  leaving a proper deleted resource behind.<br>- Disable ranged HTTP requests in Apache mod_python backend. This was giving<br>  problems with acrobat plugin and its \"Fast Web View\" feature.<br>- Show records sorted on descending datestamp, instead of ascending record id,<br>  in sqlite backend.<br><br>Changes<br>~~~~~~~<br><br>MOAI 1.0.10 (2010-03-25)<br>------------------------<br><br>Changes<br>~~~~~~~<br><br>- Changed DIP:objectType to rdf:type in the didl metadata format, <br>  as required by darenet/driver/didl 3.0 format<br>- Added support for modification dates and accessrights in the didl format<br> <br><br>MOAI 1.0.9 (2010-02-16)<br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Added checking on XML compatibility in update.py, update_database_iterate().<br>  This prevents the OAI server from crashing on invalid data. <br>- Fixed a minor bug in tools.py. The -d (debug) flag for the update_database <br>  script didn't halt on errors.<br><br>- Added a flush_threshold attribute to the DatabaseUpdater. This can be<br>  used to make the database flush after n records. By default the value<br>  is -1, and flushing only happens at the end of the update.<br>- Fixed assertion statements in content.py (gave warnings in python2.6)<br><br><br>MOAI 1.0.8 (2009-16-18) <br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Added a MANIFEST.in file to make sure all files are included<br>  in the python package.<br><br>MOAI 1.0.7 (2009-16-11) <br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Changed DIP namespace in didl metadata extension<br>- Fixed bug in ListMetadataFormats verb<br>- Uses pyoai 2.4.1, which when specifying a date (not a datetime) <br>  for the until parameter, defaults to 23:59:59 instead of 00:00:00.<br><br>MOAI 1.0.6 (2009-08-12)<br>-----------------------<br><br>Changes<br>~~~~~~~<br>- Fixed metadataPrefix value in didl:Resource URL. This was using<br>  `didl` instead of `nl_didl` <br><br>MOAI 1.0.5 (2009-08-12)<br>-----------------------<br><br>- Unicode bug in Fedora provider<br>- Added support for mods:location/url <br>  Make url prefered identifier in oai_dc:identifier instead of uri<br>- Update method of Content Objects can now return False to prevent <br>  further processing of the object. The object will be logged as <br>  `ignored`<br><br>MOAI 1.0.4 (2009-07-15)<br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Fixed misspelled mimeType attribute in DIDL metadata prefix<br><br>MOAI 1.0.3 (2009-06-23)<br>-----------------------<br><br>Changes<br>~~~~~~~<br>- Bug in ListMetadataFormats when using nl_didl prefix<br>- Added simple dc example profile<br><br>MOAI 1.0.2 (2009-05-20)<br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Location in mod_python config is dynamicly extracted<br>  from Metro Server class.<br><br>MOAI 1.0.1 (2009-05-19)<br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Fixed URL error in didl metadata prefix<br>- Seperated darenet specific didl extensions in nl_didl prefix<br><br>MOAI 1.0 (2009-05-04)<br>-----------------------<br><br>Changes<br>~~~~~~~<br><br>- Improved documentation<br>- Added description to Identify header<br>- More complete mods name roles<br>- Require newer pyoai version that gives better error responses<br>  when wrong datatime values are used in OAI requests<br><br>MOAI 0.9.x (2009-02-01)<br>-----------------------<br><br>Changes<br>~~~~~~~<br>- Added Apache mod_python backend<br>- Added basic authentication for fedora provider<br>- Made fedora provider datastream argument optional,<br>  if not specified the whole foxml file is returned<br>- Ported SQLite database backend from EUR RePub<br>- Renamed MetaDataPrefix classes to MetaDataFormat<br>- Added configurable plugin system<br>- Added documentation website (more info in README.txt)<br>- Made Fedora provider not write all files in same directory<br><br>Changes<br>~~~~~~~<br>- OAI ListRecords with from and until dateparams where not inclusive in SQLite engine<br>- OAI ListSets did not return dynamic sets (added test)<br>- OAI GetRecord returning the same record (added test) <br><br><br>MOAI 0.9 (2008-11-18)<br>-----------------------<br><br>- Initial development borrowing code and ideas from RepubXML,<br>  a repository environment build for the Erasmus Univiersity Rotterdam<br><br>\n          </div>"}, "last_serial": 4061469, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "680abc3e647b5c86648e836d04dd13de", "sha256": "f4eb653b19b9e14e4bed281b4dad59a2cadf5bee57f6ae9033fbe3b54d7bccd2"}, "downloads": -1, "filename": "MOAI_iplweb-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "680abc3e647b5c86648e836d04dd13de", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 41633, "upload_time": "2018-07-14T16:18:19", "upload_time_iso_8601": "2018-07-14T16:18:19.642411Z", "url": "https://files.pythonhosted.org/packages/07/52/cdb40b8e40f3195623bfc264b16fca6361dea7add891c276db8263b464e0/MOAI_iplweb-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd3495784a6a98586b7ab55a135f5366", "sha256": "1c969cae673272bad6f0ac70f547e52a65343e8978780885d255ae56e3ab2c66"}, "downloads": -1, "filename": "MOAI-iplweb-2.0.0.tar.gz", "has_sig": false, "md5_digest": "fd3495784a6a98586b7ab55a135f5366", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47327, "upload_time": "2018-07-14T16:18:17", "upload_time_iso_8601": "2018-07-14T16:18:17.407398Z", "url": "https://files.pythonhosted.org/packages/e6/e7/40126fe3a8edfc840ec7e2cf9ad65b2b595a470bbec2be1216feba8b181b/MOAI-iplweb-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "680abc3e647b5c86648e836d04dd13de", "sha256": "f4eb653b19b9e14e4bed281b4dad59a2cadf5bee57f6ae9033fbe3b54d7bccd2"}, "downloads": -1, "filename": "MOAI_iplweb-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "680abc3e647b5c86648e836d04dd13de", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 41633, "upload_time": "2018-07-14T16:18:19", "upload_time_iso_8601": "2018-07-14T16:18:19.642411Z", "url": "https://files.pythonhosted.org/packages/07/52/cdb40b8e40f3195623bfc264b16fca6361dea7add891c276db8263b464e0/MOAI_iplweb-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd3495784a6a98586b7ab55a135f5366", "sha256": "1c969cae673272bad6f0ac70f547e52a65343e8978780885d255ae56e3ab2c66"}, "downloads": -1, "filename": "MOAI-iplweb-2.0.0.tar.gz", "has_sig": false, "md5_digest": "fd3495784a6a98586b7ab55a135f5366", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47327, "upload_time": "2018-07-14T16:18:17", "upload_time_iso_8601": "2018-07-14T16:18:17.407398Z", "url": "https://files.pythonhosted.org/packages/e6/e7/40126fe3a8edfc840ec7e2cf9ad65b2b595a470bbec2be1216feba8b181b/MOAI-iplweb-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:09 2020"}