{"info": {"author": "Julien Romero", "author_email": "romerojulien34@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyformlang\n\n[![Build Status](https://jenkins.r2.enst.fr/job/pyformlang/job/master/badge/icon)](https://jenkins.r2.enst.fr/job/pyformlang/job/master/)\n[![pypi](https://img.shields.io/pypi/v/pyformlang.svg)](https://pypi.org/project/pyformlang/)\n[![Documentation](https://readthedocs.org/projects/pyformlang/badge/?version=latest)](https://pyformlang.readthedocs.io/en/latest/)\n\nA python library to manipulate formal grammar. In general, it can be used to better understand algorithms in a formal way.\n\n## Installation\n\n```bash\npip3 install pyformlang\n```\n\n## Sources\n\nMost algorithms come from Introduction to *Automata Theory, Languages, and Computation*\n(2nd edition) by John E. Hopcroft, Rajeev Motwani and Jeferey D. Ullman.\n\nIndexed grammars come from the original paper *Index Grammars - An Extension of Context-free grammars* by Alfred V. Aho.\n\nOn the implementation of Hopcroft minimization algorithm: [Implementation of Hopcroft's Algorithm, Hang Zhou](https://www.irif.fr/~carton/Enseignement/Complexite/ENS/Redaction/2009-2010/hang.zhou.pdf)\n\n[Intersection CFG/Regex](https://www.degruyter.com/downloadpdf/j/stuf.1961.14.issue-1-4/stuf.1961.14.14.143/stuf.1961.14.14.143.pdf) and [a better written version](http://www.cs.umd.edu/~gasarch/BLOGPAPERS/cfg.pdf)\n\n## Usage\n\n### Regular expression\n\npyformlang contains a basic regex reader. The available operators are:\n\n* The concatenation, the default operator, which can by represented either by a\nspace or a dot (.)\n* The union, represented either by | or +\n* The kleene star, represented by *\n\nIt is also possible to use parenthesis. Symbols different from the space, ., |, +, \\*, (, ) and $ can be part of the alphabet, consecutive characters being consider as a single symbol. The epsilon symbol can either be *epsilon* or *$*.\n\n```python\nfrom pyformlang.regular_expression import Regex\n\nregex = Regex(\"(a-|a a b)*\")\n```\n\n### Finite Automata\n\npyformlang contains several finite automata, all of them being equivalent in the languages they can describe. In general, the states have to be represented by a *pyformlang.finite_automaton.State* object and the symbols by a *pyformlang.finite_automaton.Symbol*. When the class is not ambiguous, raw values can also be used. In addition, epsilon transitions are elements of the class: *pyformlang.finite_automaton.Epsilon*.\n\n#### Deterministic Automata\n\nThese represent deterministic automata, i.e. with only one possible next state possible at each stage and no epsilon transitions.\n\n``` python\nfrom pyformlang.finite_automaton import DeterministicFiniteAutomaton\nfrom pyformlang.finite_automaton import State\nfrom pyformlang.finite_automaton import Symbol\n\n# Declaration of the DFA\ndfa = DeterministicFiniteAutomaton()\n\n# Creation of the states\nstate0 = State(0)\nstate1 = State(1)\nstate2 = State(2)\nstate3 = State(3)\n\n# Creation of the symbols\nsymb_a = Symbol(\"a\")\nsymb_b = Symbol(\"b\")\nsymb_c = Symbol(\"c\")\nsymb_d = Symbol(\"d\")\n\n# Add a start state\ndfa.add_start_state(state0)\n\n# Add two final states\ndfa.add_final_state(state2)\ndfa.add_final_state(state3)\n\n# Create transitions\ndfa.add_transition(state0, symb_a, state1)\ndfa.add_transition(state1, symb_b, state1)\ndfa.add_transition(state1, symb_c, state2)\ndfa.add_transition(state1, symb_d, state3)\n\n# Check if a word is accepted\ndfa.accepts([symb_a, symb_b, symb_c])\n```\n\n#### Non Deterministic Automata\n\nThe representation of non deterministic automata, i.e. automata with possibly several next states at each stage but no epsilon transitions.\n\n``` python\nfrom pyformlang.finite_automaton import NondeterministicFiniteAutomaton\nfrom pyformlang.finite_automaton import State\nfrom pyformlang.finite_automaton import Symbol\n\n# Definition of the NFA\nnfa = NondeterministicFiniteAutomaton()\n\n# Declare the states\nstate0 = State(0)\nstate1 = State(1)\nstate2 = State(2)\nstate3 = State(3)\nstate4 = State(4)\n\n# Declare the symbols\nsymb_a = Symbol(\"a\")\nsymb_b = Symbol(\"b\")\nsymb_c = Symbol(\"c\")\nsymb_d = Symbol(\"d\")\n\n# Add a start state\nnfa.add_start_state(state0)\n# Add a final state\nnfa.add_final_state(state4)\nnfa.add_final_state(state3)\n# Add the transitions\nnfa.add_transition(state0, symb_a, state1)\nnfa.add_transition(state1, symb_b, state1)\nnfa.add_transition(state1, symb_c, state2)\nnfa.add_transition(state1, symb_d, state3)\nnfa.add_transition(state1, symb_c, state4)\nnfa.add_transition(state1, symb_b, state4)\n\n# Check if a word is accepted\nnfa.accepts([symb_a, symb_b, symb_c])\n\n# Check if a NFA is deterministic\nnfa.is_deterministic() # False\n\n# Get the equivalent deterministic automaton\ndfa = nfa.to_deterministic()\n```\n\n#### Epsilon Non Deterministic Automata\n\nIt represents a non deterministic automaton where epsilon transitions are allowed.\n\n``` python\nfrom pyformlang.finite_automaton import EpsilonNFA, State, Symbol, Epsilon\n\n# Declaration of the symbols and the states\nepsilon = Epsilon()\nplus = Symbol(\"+\")\nminus = Symbol(\"-\")\npoint = Symbol(\".\")\ndigits = [Symbol(x) for x in range(10)]\nstates = [State(\"q\" + str(x)) for x in range(6)]\n\n# Creattion of the Epsilon NFA\nenfa = EpsilonNFA()\nenfa.add_start_state(states[0])\nenfa.add_final_state(states[5])\nenfa.add_transition(states[0], epsilon, states[1])\nenfa.add_transition(states[0], plus, states[1])\nenfa.add_transition(states[0], minus, states[1])\nfor digit in digits:\n    enfa.add_transition(states[1], digit, states[1])\n    enfa.add_transition(states[1], digit, states[4])\n    enfa.add_transition(states[2], digit, states[3])\n    enfa.add_transition(states[3], digit, states[3])\nenfa.add_transition(states[1], point, states[2])\nenfa.add_transition(states[4], point, states[3])\nenfa.add_transition(states[3], epsilon, states[5])\n\n# Checks if a word is accepted\nenfa.accepts([plus, digits[1], point, digits[9]])\n```\n\n### Regex and Finite Automaton\n\nAs regex and finite automaton are equivalent, one can turn one into the other.\n\n```python\nfrom pyformlang.finite_automaton import EpsilonNFA, State, Symbol, Epsilon\n\nenfa = EpsilonNFA()\nstate0 = State(0)\nstate1 = State(1)\nsymb_a = Symbol(\"0\")\nsymb_b = Symbol(\"1\")\nenfa.add_start_state(state0)\nenfa.add_final_state(state1)\nenfa.add_transition(state0, symb_a, state0)\nenfa.add_transition(state1, symb_b, state0)\nenfa.add_transition(state1, symb_b, state1)\n\n# Turn a finite automaton into a regex...\nregex = enfa.to_regex()\n# And turn it back into an epsilon non deterministic automaton\nenfa2 = regex.to_epsilon_nfa()\n```\n\n### Context-Free Grammar\n\nWe represent here context-free grammars. Like finite automata, one needs to use the classes *pyformlang.cfg.Variable* and *pyformlang.cfg.Terminal* to represent variables and terminals. The productions need to be represented as *pyformlang.cfg.Production*. In addition, epsilon terminals are members of *pyformlang.cfg.Epsilon*.\n\n```python\nfrom pyformlang.cfg import Production, Variable, Terminal, CFG, Epsilon\n\n# Creation of variables\nvar_useless = Variable(\"USELESS\")\nvar_S = Variable(\"S\")\nvar_B = Variable(\"B\")\n\n# Creation of terminals\nter_a = Terminal(\"a\")\nter_b = Terminal(\"b\")\nter_c = Terminal(\"c\")\n\n# Creation of productions\np0 = Production(var_S, [ter_a, var_S, var_B])\np1 = Production(var_useless, [ter_a, var_S, var_B])\np2 = Production(var_S, [var_useless])\np4 = Production(var_B, [ter_b])\np5 = Production(var_useless, [])\n\n# Creation of the CFG\ncfg = CFG({var_useless, var_S}, {ter_a, ter_b}, var_S, {p0, p1, p2, p4, p5})\n\n# Check for containment\ncfg.contains([Epsilon()])\ncfg.contains([ter_a, ter_b])\n```\n\n### Push-Down Automata\n\nFor a Push-Down Automata, there are there objects: *pyformlang.pda.State* which represents a state, *pyformlang.pda.Symbol* which represents a symbol and *pyformlang.pda.StackSymbol* which represents a stack symbol.\n\nPDA can either accept by final state or by empty stack. Function are provided to transform one kind into the other.\n\n```python\nfrom pyformlang.pda import PDA, State, StackSymbol, Symbol, Epsilon\n\n# Declare states\nq = State(\"#STARTTOFINAL#\")\nq0 = State(\"q0\")\n\n# Declare symbols\ne = Symbol(\"e\")\ni = Symbol(\"i\")\n\n# Declare stack symbols\nZ = StackSymbol(\"Z\")\nZ0 = StackSymbol(\"Z0\")\n\n# Create the PDA\npda = PDA(states={q, q0},\n          input_symbols={i, e},\n          stack_alphabet={Z, Z0},\n          start_state=q,\n          start_stack_symbol=Z0,\n          final_states={q0})\n\n# Add transitions\npda.add_transition(q, i, Z, q, (Z, Z))\npda.add_transition(q, i, Z0, q, (Z, Z0))\npda.add_transition(q, e, Z, q, [])\npda.add_transition(q, Epsilon(), Z0, q0, [])\n\n# Transformation to a PDA accepting by empty stack\npda_empty_stack = pda.to_empty_stack()\n# Transformation to a PDA accepting by final state\npda_final_state = pda_empty_stack.to_final_state()\n```\n\n### CFG and PDA\n\nAs CFG and PDA are equivalent, one can turn one into the other, but needs to be careful about whether the PDA accepts on empty stack and final state. The conversions between CFG and PDA are done when the PDA is accepting by empty stack\n\n```python\nfrom pyformlang.cfg import Production, Variable, Terminal, CFG\n\nter_a = Terminal(\"a\")\nter_b = Terminal(\"b\")\nter_c = Terminal(\"c\")\nvar_S = Variable(\"S\")\nproductions = {Production(var_S, [ter_a, var_S, ter_b]),\n               Production(var_S, [ter_c])}\ncfg = CFG(productions=productions, start_symbol=var_S)\n\n# Convert into a PDA accepting by final state\npda_empty_stack = cfg.to_pda()\n# Go to final state\npda_final_state = pda_empty_stack.to_final_state()\n# Go back to empty stack, necessary to transform into a CFG\npda_empty_stack = pda_final_state.to_empty_stack()\n# Transform the PDA into a CFG\ncfg = pda_empty_stack.to_cfg()\n```\n\n### Indexed Grammars\n\nIndexed grammars are grammars which have a stack which can be duplicated. In an indexed grammar, rules can take 4 forms (sigma is the stack):\n\n* *EndRule*: This simply turns a Variable into a terminal, for example A[sigma]->a\n* *ProductionRule*: We push something on the stack, for example A[sigma]->B[f sigma]\n* *ConsumptionRule*: We consume something from the stack, for example A[f sigma] -> C[sigma]\n* *DuplicationRule*: We duplicate the stack, for example A[sigma] -> B[sigma] C[sigma]\n\n```python\nfrom pyformlang.indexed_grammar import Rules\nfrom pyformlang.indexed_grammar import ConsumptionRule\nfrom pyformlang.indexed_grammar import EndRule\nfrom pyformlang.indexed_grammar import ProductionRule\nfrom pyformlang.indexed_grammar import DuplicationRule\nfrom pyformlang.indexed_grammar import IndexedGrammar\n\nl_rules = []\n\n# Initialization rules\nl_rules.append(ProductionRule(\"S\", \"Cinit\", \"end\"))\nl_rules.append(ProductionRule(\"Cinit\", \"C\", \"b\"))\nl_rules.append(ConsumptionRule(\"end\", \"C\", \"T\"))\nl_rules.append(EndRule(\"T\", \"epsilon\"))\n\n# C[cm sigma] -> cm C[sigma]\nl_rules.append(ConsumptionRule(\"cm\", \"C\", \"B0\"))\nl_rules.append(DuplicationRule(\"B0\", \"A0\", \"C\"))\nl_rules.append(EndRule(\"A0\", \"cm\"))\n\nrules = Rules(l_rules)\ni_grammar = IndexedGrammar(rules)\nself.assertTrue(i_grammar.is_empty())\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Aunsiels/pyformlang", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyformlang", "package_url": "https://pypi.org/project/pyformlang/", "platform": "", "project_url": "https://pypi.org/project/pyformlang/", "project_urls": {"Homepage": "https://github.com/Aunsiels/pyformlang"}, "release_url": "https://pypi.org/project/pyformlang/0.1.19/", "requires_dist": ["networkx", "numpy", "pydot"], "requires_python": "", "summary": "A python framework for formal grammars", "version": "0.1.19", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyformlang</h1>\n<p><a href=\"https://jenkins.r2.enst.fr/job/pyformlang/job/master/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/812873b90a43f870b8238e7158691334dab047d6/68747470733a2f2f6a656e6b696e732e72322e656e73742e66722f6a6f622f7079666f726d6c616e672f6a6f622f6d61737465722f62616467652f69636f6e\"></a>\n<a href=\"https://pypi.org/project/pyformlang/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b31b04fd7376c88c1299cb1173a8fef62134ad2a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079666f726d6c616e672e737667\"></a>\n<a href=\"https://pyformlang.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59558eb0ede8d6f285e4a63845ba30de6e1e9ae9/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079666f726d6c616e672f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>A python library to manipulate formal grammar. In general, it can be used to better understand algorithms in a formal way.</p>\n<h2>Installation</h2>\n<pre>pip3 install pyformlang\n</pre>\n<h2>Sources</h2>\n<p>Most algorithms come from Introduction to <em>Automata Theory, Languages, and Computation</em>\n(2nd edition) by John E. Hopcroft, Rajeev Motwani and Jeferey D. Ullman.</p>\n<p>Indexed grammars come from the original paper <em>Index Grammars - An Extension of Context-free grammars</em> by Alfred V. Aho.</p>\n<p>On the implementation of Hopcroft minimization algorithm: <a href=\"https://www.irif.fr/%7Ecarton/Enseignement/Complexite/ENS/Redaction/2009-2010/hang.zhou.pdf\" rel=\"nofollow\">Implementation of Hopcroft's Algorithm, Hang Zhou</a></p>\n<p><a href=\"https://www.degruyter.com/downloadpdf/j/stuf.1961.14.issue-1-4/stuf.1961.14.14.143/stuf.1961.14.14.143.pdf\" rel=\"nofollow\">Intersection CFG/Regex</a> and <a href=\"http://www.cs.umd.edu/%7Egasarch/BLOGPAPERS/cfg.pdf\" rel=\"nofollow\">a better written version</a></p>\n<h2>Usage</h2>\n<h3>Regular expression</h3>\n<p>pyformlang contains a basic regex reader. The available operators are:</p>\n<ul>\n<li>The concatenation, the default operator, which can by represented either by a\nspace or a dot (.)</li>\n<li>The union, represented either by | or +</li>\n<li>The kleene star, represented by *</li>\n</ul>\n<p>It is also possible to use parenthesis. Symbols different from the space, ., |, +, *, (, ) and $ can be part of the alphabet, consecutive characters being consider as a single symbol. The epsilon symbol can either be <em>epsilon</em> or <em>$</em>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.regular_expression</span> <span class=\"kn\">import</span> <span class=\"n\">Regex</span>\n\n<span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"n\">Regex</span><span class=\"p\">(</span><span class=\"s2\">\"(a-|a a b)*\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Finite Automata</h3>\n<p>pyformlang contains several finite automata, all of them being equivalent in the languages they can describe. In general, the states have to be represented by a <em>pyformlang.finite_automaton.State</em> object and the symbols by a <em>pyformlang.finite_automaton.Symbol</em>. When the class is not ambiguous, raw values can also be used. In addition, epsilon transitions are elements of the class: <em>pyformlang.finite_automaton.Epsilon</em>.</p>\n<h4>Deterministic Automata</h4>\n<p>These represent deterministic automata, i.e. with only one possible next state possible at each stage and no epsilon transitions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.finite_automaton</span> <span class=\"kn\">import</span> <span class=\"n\">DeterministicFiniteAutomaton</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.finite_automaton</span> <span class=\"kn\">import</span> <span class=\"n\">State</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.finite_automaton</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span>\n\n<span class=\"c1\"># Declaration of the DFA</span>\n<span class=\"n\">dfa</span> <span class=\"o\">=</span> <span class=\"n\">DeterministicFiniteAutomaton</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Creation of the states</span>\n<span class=\"n\">state0</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">state1</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">state2</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">state3</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Creation of the symbols</span>\n<span class=\"n\">symb_a</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">symb_b</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n<span class=\"n\">symb_c</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"c\"</span><span class=\"p\">)</span>\n<span class=\"n\">symb_d</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"d\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add a start state</span>\n<span class=\"n\">dfa</span><span class=\"o\">.</span><span class=\"n\">add_start_state</span><span class=\"p\">(</span><span class=\"n\">state0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add two final states</span>\n<span class=\"n\">dfa</span><span class=\"o\">.</span><span class=\"n\">add_final_state</span><span class=\"p\">(</span><span class=\"n\">state2</span><span class=\"p\">)</span>\n<span class=\"n\">dfa</span><span class=\"o\">.</span><span class=\"n\">add_final_state</span><span class=\"p\">(</span><span class=\"n\">state3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create transitions</span>\n<span class=\"n\">dfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state0</span><span class=\"p\">,</span> <span class=\"n\">symb_a</span><span class=\"p\">,</span> <span class=\"n\">state1</span><span class=\"p\">)</span>\n<span class=\"n\">dfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_b</span><span class=\"p\">,</span> <span class=\"n\">state1</span><span class=\"p\">)</span>\n<span class=\"n\">dfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_c</span><span class=\"p\">,</span> <span class=\"n\">state2</span><span class=\"p\">)</span>\n<span class=\"n\">dfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_d</span><span class=\"p\">,</span> <span class=\"n\">state3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Check if a word is accepted</span>\n<span class=\"n\">dfa</span><span class=\"o\">.</span><span class=\"n\">accepts</span><span class=\"p\">([</span><span class=\"n\">symb_a</span><span class=\"p\">,</span> <span class=\"n\">symb_b</span><span class=\"p\">,</span> <span class=\"n\">symb_c</span><span class=\"p\">])</span>\n</pre>\n<h4>Non Deterministic Automata</h4>\n<p>The representation of non deterministic automata, i.e. automata with possibly several next states at each stage but no epsilon transitions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.finite_automaton</span> <span class=\"kn\">import</span> <span class=\"n\">NondeterministicFiniteAutomaton</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.finite_automaton</span> <span class=\"kn\">import</span> <span class=\"n\">State</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.finite_automaton</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span>\n\n<span class=\"c1\"># Definition of the NFA</span>\n<span class=\"n\">nfa</span> <span class=\"o\">=</span> <span class=\"n\">NondeterministicFiniteAutomaton</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Declare the states</span>\n<span class=\"n\">state0</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">state1</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">state2</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">state3</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">state4</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Declare the symbols</span>\n<span class=\"n\">symb_a</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">symb_b</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n<span class=\"n\">symb_c</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"c\"</span><span class=\"p\">)</span>\n<span class=\"n\">symb_d</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"d\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add a start state</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_start_state</span><span class=\"p\">(</span><span class=\"n\">state0</span><span class=\"p\">)</span>\n<span class=\"c1\"># Add a final state</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_final_state</span><span class=\"p\">(</span><span class=\"n\">state4</span><span class=\"p\">)</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_final_state</span><span class=\"p\">(</span><span class=\"n\">state3</span><span class=\"p\">)</span>\n<span class=\"c1\"># Add the transitions</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state0</span><span class=\"p\">,</span> <span class=\"n\">symb_a</span><span class=\"p\">,</span> <span class=\"n\">state1</span><span class=\"p\">)</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_b</span><span class=\"p\">,</span> <span class=\"n\">state1</span><span class=\"p\">)</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_c</span><span class=\"p\">,</span> <span class=\"n\">state2</span><span class=\"p\">)</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_d</span><span class=\"p\">,</span> <span class=\"n\">state3</span><span class=\"p\">)</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_c</span><span class=\"p\">,</span> <span class=\"n\">state4</span><span class=\"p\">)</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_b</span><span class=\"p\">,</span> <span class=\"n\">state4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Check if a word is accepted</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">accepts</span><span class=\"p\">([</span><span class=\"n\">symb_a</span><span class=\"p\">,</span> <span class=\"n\">symb_b</span><span class=\"p\">,</span> <span class=\"n\">symb_c</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Check if a NFA is deterministic</span>\n<span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">is_deterministic</span><span class=\"p\">()</span> <span class=\"c1\"># False</span>\n\n<span class=\"c1\"># Get the equivalent deterministic automaton</span>\n<span class=\"n\">dfa</span> <span class=\"o\">=</span> <span class=\"n\">nfa</span><span class=\"o\">.</span><span class=\"n\">to_deterministic</span><span class=\"p\">()</span>\n</pre>\n<h4>Epsilon Non Deterministic Automata</h4>\n<p>It represents a non deterministic automaton where epsilon transitions are allowed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.finite_automaton</span> <span class=\"kn\">import</span> <span class=\"n\">EpsilonNFA</span><span class=\"p\">,</span> <span class=\"n\">State</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">Epsilon</span>\n\n<span class=\"c1\"># Declaration of the symbols and the states</span>\n<span class=\"n\">epsilon</span> <span class=\"o\">=</span> <span class=\"n\">Epsilon</span><span class=\"p\">()</span>\n<span class=\"n\">plus</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">)</span>\n<span class=\"n\">minus</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span><span class=\"p\">)</span>\n<span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\".\"</span><span class=\"p\">)</span>\n<span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">State</span><span class=\"p\">(</span><span class=\"s2\">\"q\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Creattion of the Epsilon NFA</span>\n<span class=\"n\">enfa</span> <span class=\"o\">=</span> <span class=\"n\">EpsilonNFA</span><span class=\"p\">()</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_start_state</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_final_state</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">epsilon</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">plus</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">minus</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">digit</span> <span class=\"ow\">in</span> <span class=\"n\">digits</span><span class=\"p\">:</span>\n    <span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">digit</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">digit</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n    <span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">digit</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n    <span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">digit</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">epsilon</span><span class=\"p\">,</span> <span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Checks if a word is accepted</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">accepts</span><span class=\"p\">([</span><span class=\"n\">plus</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]])</span>\n</pre>\n<h3>Regex and Finite Automaton</h3>\n<p>As regex and finite automaton are equivalent, one can turn one into the other.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.finite_automaton</span> <span class=\"kn\">import</span> <span class=\"n\">EpsilonNFA</span><span class=\"p\">,</span> <span class=\"n\">State</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">Epsilon</span>\n\n<span class=\"n\">enfa</span> <span class=\"o\">=</span> <span class=\"n\">EpsilonNFA</span><span class=\"p\">()</span>\n<span class=\"n\">state0</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">state1</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">symb_a</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"0\"</span><span class=\"p\">)</span>\n<span class=\"n\">symb_b</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"1\"</span><span class=\"p\">)</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_start_state</span><span class=\"p\">(</span><span class=\"n\">state0</span><span class=\"p\">)</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_final_state</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">)</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state0</span><span class=\"p\">,</span> <span class=\"n\">symb_a</span><span class=\"p\">,</span> <span class=\"n\">state0</span><span class=\"p\">)</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_b</span><span class=\"p\">,</span> <span class=\"n\">state0</span><span class=\"p\">)</span>\n<span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">symb_b</span><span class=\"p\">,</span> <span class=\"n\">state1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Turn a finite automaton into a regex...</span>\n<span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"n\">enfa</span><span class=\"o\">.</span><span class=\"n\">to_regex</span><span class=\"p\">()</span>\n<span class=\"c1\"># And turn it back into an epsilon non deterministic automaton</span>\n<span class=\"n\">enfa2</span> <span class=\"o\">=</span> <span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">to_epsilon_nfa</span><span class=\"p\">()</span>\n</pre>\n<h3>Context-Free Grammar</h3>\n<p>We represent here context-free grammars. Like finite automata, one needs to use the classes <em>pyformlang.cfg.Variable</em> and <em>pyformlang.cfg.Terminal</em> to represent variables and terminals. The productions need to be represented as <em>pyformlang.cfg.Production</em>. In addition, epsilon terminals are members of <em>pyformlang.cfg.Epsilon</em>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.cfg</span> <span class=\"kn\">import</span> <span class=\"n\">Production</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">,</span> <span class=\"n\">Terminal</span><span class=\"p\">,</span> <span class=\"n\">CFG</span><span class=\"p\">,</span> <span class=\"n\">Epsilon</span>\n\n<span class=\"c1\"># Creation of variables</span>\n<span class=\"n\">var_useless</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">\"USELESS\"</span><span class=\"p\">)</span>\n<span class=\"n\">var_S</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">\"S\"</span><span class=\"p\">)</span>\n<span class=\"n\">var_B</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">\"B\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Creation of terminals</span>\n<span class=\"n\">ter_a</span> <span class=\"o\">=</span> <span class=\"n\">Terminal</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">ter_b</span> <span class=\"o\">=</span> <span class=\"n\">Terminal</span><span class=\"p\">(</span><span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n<span class=\"n\">ter_c</span> <span class=\"o\">=</span> <span class=\"n\">Terminal</span><span class=\"p\">(</span><span class=\"s2\">\"c\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Creation of productions</span>\n<span class=\"n\">p0</span> <span class=\"o\">=</span> <span class=\"n\">Production</span><span class=\"p\">(</span><span class=\"n\">var_S</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ter_a</span><span class=\"p\">,</span> <span class=\"n\">var_S</span><span class=\"p\">,</span> <span class=\"n\">var_B</span><span class=\"p\">])</span>\n<span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Production</span><span class=\"p\">(</span><span class=\"n\">var_useless</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ter_a</span><span class=\"p\">,</span> <span class=\"n\">var_S</span><span class=\"p\">,</span> <span class=\"n\">var_B</span><span class=\"p\">])</span>\n<span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">Production</span><span class=\"p\">(</span><span class=\"n\">var_S</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">var_useless</span><span class=\"p\">])</span>\n<span class=\"n\">p4</span> <span class=\"o\">=</span> <span class=\"n\">Production</span><span class=\"p\">(</span><span class=\"n\">var_B</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ter_b</span><span class=\"p\">])</span>\n<span class=\"n\">p5</span> <span class=\"o\">=</span> <span class=\"n\">Production</span><span class=\"p\">(</span><span class=\"n\">var_useless</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n\n<span class=\"c1\"># Creation of the CFG</span>\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">CFG</span><span class=\"p\">({</span><span class=\"n\">var_useless</span><span class=\"p\">,</span> <span class=\"n\">var_S</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">ter_a</span><span class=\"p\">,</span> <span class=\"n\">ter_b</span><span class=\"p\">},</span> <span class=\"n\">var_S</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Check for containment</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">([</span><span class=\"n\">Epsilon</span><span class=\"p\">()])</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">([</span><span class=\"n\">ter_a</span><span class=\"p\">,</span> <span class=\"n\">ter_b</span><span class=\"p\">])</span>\n</pre>\n<h3>Push-Down Automata</h3>\n<p>For a Push-Down Automata, there are there objects: <em>pyformlang.pda.State</em> which represents a state, <em>pyformlang.pda.Symbol</em> which represents a symbol and <em>pyformlang.pda.StackSymbol</em> which represents a stack symbol.</p>\n<p>PDA can either accept by final state or by empty stack. Function are provided to transform one kind into the other.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.pda</span> <span class=\"kn\">import</span> <span class=\"n\">PDA</span><span class=\"p\">,</span> <span class=\"n\">State</span><span class=\"p\">,</span> <span class=\"n\">StackSymbol</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">Epsilon</span>\n\n<span class=\"c1\"># Declare states</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"s2\">\"#STARTTOFINAL#\"</span><span class=\"p\">)</span>\n<span class=\"n\">q0</span> <span class=\"o\">=</span> <span class=\"n\">State</span><span class=\"p\">(</span><span class=\"s2\">\"q0\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Declare symbols</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"e\"</span><span class=\"p\">)</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">\"i\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Declare stack symbols</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">StackSymbol</span><span class=\"p\">(</span><span class=\"s2\">\"Z\"</span><span class=\"p\">)</span>\n<span class=\"n\">Z0</span> <span class=\"o\">=</span> <span class=\"n\">StackSymbol</span><span class=\"p\">(</span><span class=\"s2\">\"Z0\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the PDA</span>\n<span class=\"n\">pda</span> <span class=\"o\">=</span> <span class=\"n\">PDA</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">q0</span><span class=\"p\">},</span>\n          <span class=\"n\">input_symbols</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">},</span>\n          <span class=\"n\">stack_alphabet</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">Z0</span><span class=\"p\">},</span>\n          <span class=\"n\">start_state</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">,</span>\n          <span class=\"n\">start_stack_symbol</span><span class=\"o\">=</span><span class=\"n\">Z0</span><span class=\"p\">,</span>\n          <span class=\"n\">final_states</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">q0</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Add transitions</span>\n<span class=\"n\">pda</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">Z</span><span class=\"p\">))</span>\n<span class=\"n\">pda</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">Z0</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">Z0</span><span class=\"p\">))</span>\n<span class=\"n\">pda</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n<span class=\"n\">pda</span><span class=\"o\">.</span><span class=\"n\">add_transition</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">Epsilon</span><span class=\"p\">(),</span> <span class=\"n\">Z0</span><span class=\"p\">,</span> <span class=\"n\">q0</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n\n<span class=\"c1\"># Transformation to a PDA accepting by empty stack</span>\n<span class=\"n\">pda_empty_stack</span> <span class=\"o\">=</span> <span class=\"n\">pda</span><span class=\"o\">.</span><span class=\"n\">to_empty_stack</span><span class=\"p\">()</span>\n<span class=\"c1\"># Transformation to a PDA accepting by final state</span>\n<span class=\"n\">pda_final_state</span> <span class=\"o\">=</span> <span class=\"n\">pda_empty_stack</span><span class=\"o\">.</span><span class=\"n\">to_final_state</span><span class=\"p\">()</span>\n</pre>\n<h3>CFG and PDA</h3>\n<p>As CFG and PDA are equivalent, one can turn one into the other, but needs to be careful about whether the PDA accepts on empty stack and final state. The conversions between CFG and PDA are done when the PDA is accepting by empty stack</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.cfg</span> <span class=\"kn\">import</span> <span class=\"n\">Production</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">,</span> <span class=\"n\">Terminal</span><span class=\"p\">,</span> <span class=\"n\">CFG</span>\n\n<span class=\"n\">ter_a</span> <span class=\"o\">=</span> <span class=\"n\">Terminal</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">ter_b</span> <span class=\"o\">=</span> <span class=\"n\">Terminal</span><span class=\"p\">(</span><span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n<span class=\"n\">ter_c</span> <span class=\"o\">=</span> <span class=\"n\">Terminal</span><span class=\"p\">(</span><span class=\"s2\">\"c\"</span><span class=\"p\">)</span>\n<span class=\"n\">var_S</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">\"S\"</span><span class=\"p\">)</span>\n<span class=\"n\">productions</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">Production</span><span class=\"p\">(</span><span class=\"n\">var_S</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ter_a</span><span class=\"p\">,</span> <span class=\"n\">var_S</span><span class=\"p\">,</span> <span class=\"n\">ter_b</span><span class=\"p\">]),</span>\n               <span class=\"n\">Production</span><span class=\"p\">(</span><span class=\"n\">var_S</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ter_c</span><span class=\"p\">])}</span>\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">CFG</span><span class=\"p\">(</span><span class=\"n\">productions</span><span class=\"o\">=</span><span class=\"n\">productions</span><span class=\"p\">,</span> <span class=\"n\">start_symbol</span><span class=\"o\">=</span><span class=\"n\">var_S</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert into a PDA accepting by final state</span>\n<span class=\"n\">pda_empty_stack</span> <span class=\"o\">=</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">to_pda</span><span class=\"p\">()</span>\n<span class=\"c1\"># Go to final state</span>\n<span class=\"n\">pda_final_state</span> <span class=\"o\">=</span> <span class=\"n\">pda_empty_stack</span><span class=\"o\">.</span><span class=\"n\">to_final_state</span><span class=\"p\">()</span>\n<span class=\"c1\"># Go back to empty stack, necessary to transform into a CFG</span>\n<span class=\"n\">pda_empty_stack</span> <span class=\"o\">=</span> <span class=\"n\">pda_final_state</span><span class=\"o\">.</span><span class=\"n\">to_empty_stack</span><span class=\"p\">()</span>\n<span class=\"c1\"># Transform the PDA into a CFG</span>\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">pda_empty_stack</span><span class=\"o\">.</span><span class=\"n\">to_cfg</span><span class=\"p\">()</span>\n</pre>\n<h3>Indexed Grammars</h3>\n<p>Indexed grammars are grammars which have a stack which can be duplicated. In an indexed grammar, rules can take 4 forms (sigma is the stack):</p>\n<ul>\n<li><em>EndRule</em>: This simply turns a Variable into a terminal, for example A[sigma]-&gt;a</li>\n<li><em>ProductionRule</em>: We push something on the stack, for example A[sigma]-&gt;B[f sigma]</li>\n<li><em>ConsumptionRule</em>: We consume something from the stack, for example A[f sigma] -&gt; C[sigma]</li>\n<li><em>DuplicationRule</em>: We duplicate the stack, for example A[sigma] -&gt; B[sigma] C[sigma]</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyformlang.indexed_grammar</span> <span class=\"kn\">import</span> <span class=\"n\">Rules</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.indexed_grammar</span> <span class=\"kn\">import</span> <span class=\"n\">ConsumptionRule</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.indexed_grammar</span> <span class=\"kn\">import</span> <span class=\"n\">EndRule</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.indexed_grammar</span> <span class=\"kn\">import</span> <span class=\"n\">ProductionRule</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.indexed_grammar</span> <span class=\"kn\">import</span> <span class=\"n\">DuplicationRule</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyformlang.indexed_grammar</span> <span class=\"kn\">import</span> <span class=\"n\">IndexedGrammar</span>\n\n<span class=\"n\">l_rules</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Initialization rules</span>\n<span class=\"n\">l_rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"s2\">\"S\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Cinit\"</span><span class=\"p\">,</span> <span class=\"s2\">\"end\"</span><span class=\"p\">))</span>\n<span class=\"n\">l_rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"s2\">\"Cinit\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">))</span>\n<span class=\"n\">l_rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ConsumptionRule</span><span class=\"p\">(</span><span class=\"s2\">\"end\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"T\"</span><span class=\"p\">))</span>\n<span class=\"n\">l_rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">EndRule</span><span class=\"p\">(</span><span class=\"s2\">\"T\"</span><span class=\"p\">,</span> <span class=\"s2\">\"epsilon\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># C[cm sigma] -&gt; cm C[sigma]</span>\n<span class=\"n\">l_rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ConsumptionRule</span><span class=\"p\">(</span><span class=\"s2\">\"cm\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"B0\"</span><span class=\"p\">))</span>\n<span class=\"n\">l_rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">DuplicationRule</span><span class=\"p\">(</span><span class=\"s2\">\"B0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"A0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C\"</span><span class=\"p\">))</span>\n<span class=\"n\">l_rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">EndRule</span><span class=\"p\">(</span><span class=\"s2\">\"A0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cm\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">Rules</span><span class=\"p\">(</span><span class=\"n\">l_rules</span><span class=\"p\">)</span>\n<span class=\"n\">i_grammar</span> <span class=\"o\">=</span> <span class=\"n\">IndexedGrammar</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">i_grammar</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 6970307, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c7f086e5729ee179c0b59803e15132e5", "sha256": "13e92533022c8157bd10f0e037caa67f73a77829859ca83fbfd05ab4540679de"}, "downloads": -1, "filename": "pyformlang-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c7f086e5729ee179c0b59803e15132e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13629, "upload_time": "2019-01-10T14:28:44", "upload_time_iso_8601": "2019-01-10T14:28:44.367098Z", "url": "https://files.pythonhosted.org/packages/92/15/6808f64af2be0a5d388955d17a608e74c12cbe30e371cfd140faaca6f9ea/pyformlang-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39899c2841b895bd848116841665bc21", "sha256": "b5bfff778434627dfe39e0045c264a3f88d37ce2b60edf04820f7e6a0f959b67"}, "downloads": -1, "filename": "pyformlang-0.0.1.tar.gz", "has_sig": false, "md5_digest": "39899c2841b895bd848116841665bc21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5879, "upload_time": "2019-01-10T14:28:46", "upload_time_iso_8601": "2019-01-10T14:28:46.649434Z", "url": "https://files.pythonhosted.org/packages/70/ce/5f5426bbd5dd8356f6836e4d7ff7e9a1dcf2bbe09644aa3059d4bf687332/pyformlang-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8deea48da5395a9003b5ef80b422e52b", "sha256": "6cc19578d58076e4752ccd4d5245c4271296a934fa6136e87bea9cfa70d14e65"}, "downloads": -1, "filename": "pyformlang-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8deea48da5395a9003b5ef80b422e52b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17625, "upload_time": "2019-01-10T18:52:19", "upload_time_iso_8601": "2019-01-10T18:52:19.376640Z", "url": "https://files.pythonhosted.org/packages/96/c8/de3c4bf9d0d58ddf919746d56fcd67a38376aee31147829d7818c2c71d78/pyformlang-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c566fd216e988a1324eca665af36eca", "sha256": "05b75bcc80b8c6516aa38fdbdef7ce9b0bc483dae10c92a4f28857bb126ea91b"}, "downloads": -1, "filename": "pyformlang-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3c566fd216e988a1324eca665af36eca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8221, "upload_time": "2019-01-10T18:52:21", "upload_time_iso_8601": "2019-01-10T18:52:21.625155Z", "url": "https://files.pythonhosted.org/packages/68/1b/a63de5615193b2bdb3953d2b6dfa8f1ec4a9e93012fe625253674dfe6aa4/pyformlang-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0f635ea29775c134ef6850de2626f683", "sha256": "e94561a85463eeb082b9fdda82d888dcf34695430970c0d61d9e04af9a12c18a"}, "downloads": -1, "filename": "pyformlang-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0f635ea29775c134ef6850de2626f683", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29453, "upload_time": "2019-02-04T13:40:52", "upload_time_iso_8601": "2019-02-04T13:40:52.259752Z", "url": "https://files.pythonhosted.org/packages/87/7a/3cfa95c52d81c8e65158501d10d693f6a9b042de9f55b058528fed80dfdb/pyformlang-0.0.3-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "42912d66390d20f5912ed5edd1aaf887", "sha256": "62e8af8b39ef47343ced296eb91af124baa56f81a950f78125f506666f3d8b73"}, "downloads": -1, "filename": "pyformlang-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "42912d66390d20f5912ed5edd1aaf887", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 61391, "upload_time": "2019-03-28T16:43:45", "upload_time_iso_8601": "2019-03-28T16:43:45.187783Z", "url": "https://files.pythonhosted.org/packages/c6/03/bbfa147510988ed9f11767242670c531ab7c5bad4c720726a85a14a95481/pyformlang-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "456866e2f04aa0f82c46a229db5f5235", "sha256": "6ee389b6cb6af8425fda66e21241ec4ee790d40a741e9afba5197be94bab6828"}, "downloads": -1, "filename": "pyformlang-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "456866e2f04aa0f82c46a229db5f5235", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 61425, "upload_time": "2019-03-28T17:29:18", "upload_time_iso_8601": "2019-03-28T17:29:18.551753Z", "url": "https://files.pythonhosted.org/packages/f4/7b/8eaffd19edf3de4363de24f2f532b4f425ad2bb7379630a30dd5b9c02274/pyformlang-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "a997281c5b6eadaf821f729449e20a21", "sha256": "c1d4b46e118dbe4a2906ec2e5e9e4b3d392de73d05f19eea60a9b436e1259435"}, "downloads": -1, "filename": "pyformlang-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "a997281c5b6eadaf821f729449e20a21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 77883, "upload_time": "2019-05-14T16:11:35", "upload_time_iso_8601": "2019-05-14T16:11:35.768666Z", "url": "https://files.pythonhosted.org/packages/2f/1e/8346169f0adde9d7eec84cc464dc845dc707246ac9a9dabdd12aa4ca26e8/pyformlang-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17067cd660ac9b18ecbef9589ad8e1f6", "sha256": "fcda3d15069dc8e58b0ad66720e41086a38d3c0cb7227d771c2467f736903962"}, "downloads": -1, "filename": "pyformlang-0.1.10.tar.gz", "has_sig": false, "md5_digest": "17067cd660ac9b18ecbef9589ad8e1f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53851, "upload_time": "2019-05-14T16:11:38", "upload_time_iso_8601": "2019-05-14T16:11:38.217179Z", "url": "https://files.pythonhosted.org/packages/54/2c/3506bb6ae9f78a9a59a519501698c5d48cd8e8e0d4ee048d812da753b655/pyformlang-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "dcde77f0a81fee9d2f246d35fa007b98", "sha256": "a04f7246ae4ed9ca0187c895a80ea979b7568a8f906136e7d0a89d76d01aa405"}, "downloads": -1, "filename": "pyformlang-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "dcde77f0a81fee9d2f246d35fa007b98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 78124, "upload_time": "2019-05-15T00:50:41", "upload_time_iso_8601": "2019-05-15T00:50:41.593038Z", "url": "https://files.pythonhosted.org/packages/58/5b/b9160caa6c6b977bc2b2569171bb9349042dda89cdbe1eee523a82a09fa3/pyformlang-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f282c5f9d2b46c94d9d9b73af3757fc", "sha256": "f3192c44d3ba0bfb81464f8b757f950a06212806d8698dded672cc9572922636"}, "downloads": -1, "filename": "pyformlang-0.1.11.tar.gz", "has_sig": false, "md5_digest": "9f282c5f9d2b46c94d9d9b73af3757fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54126, "upload_time": "2019-05-15T00:50:43", "upload_time_iso_8601": "2019-05-15T00:50:43.697154Z", "url": "https://files.pythonhosted.org/packages/d6/f4/2553579333055124f5d4bb3441e60f7bd67e7d68abadaf30ae0a237474a0/pyformlang-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "91eb01fab9ba775f4d55fc67a1e0a8b7", "sha256": "6dc5abe815bf42408d1da6aa6f8d8775c2aabf411648023173868a988a072bbb"}, "downloads": -1, "filename": "pyformlang-0.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "91eb01fab9ba775f4d55fc67a1e0a8b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 78764, "upload_time": "2019-05-16T09:36:04", "upload_time_iso_8601": "2019-05-16T09:36:04.975064Z", "url": "https://files.pythonhosted.org/packages/57/1e/d5bbe51aa0df182dd6afc910bd869403e22646d0f6c7732d04c7a2eff388/pyformlang-0.1.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cff581d669be606f13cbeda61e4570c0", "sha256": "4cfa993caec46008b9c389dbf3c9f788862e5480a25342330b75026a2dd23cd4"}, "downloads": -1, "filename": "pyformlang-0.1.12.tar.gz", "has_sig": false, "md5_digest": "cff581d669be606f13cbeda61e4570c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54834, "upload_time": "2019-05-16T09:36:07", "upload_time_iso_8601": "2019-05-16T09:36:07.425215Z", "url": "https://files.pythonhosted.org/packages/27/20/7b05ecef7534069a62c546b9923fef076557eec851b88e771cda2834588d/pyformlang-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "168e4da40c38102920e05c61920e65c5", "sha256": "c827d818ead23a5eebc081ea9835803e43e58bc9123a1f895db85a717830b589"}, "downloads": -1, "filename": "pyformlang-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "168e4da40c38102920e05c61920e65c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 79149, "upload_time": "2019-05-18T13:55:10", "upload_time_iso_8601": "2019-05-18T13:55:10.367128Z", "url": "https://files.pythonhosted.org/packages/37/de/66f2a1932449e681bff23c1f7a90d211c5136ba29c12bf2375aaed1198ae/pyformlang-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce27d2454842e8f29c60ff9eccf7d287", "sha256": "fbef583bf7e4dccc2e75b760c90165980490d21f56e89add16fdc3edd784041b"}, "downloads": -1, "filename": "pyformlang-0.1.13.tar.gz", "has_sig": false, "md5_digest": "ce27d2454842e8f29c60ff9eccf7d287", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55147, "upload_time": "2019-05-18T13:55:12", "upload_time_iso_8601": "2019-05-18T13:55:12.428352Z", "url": "https://files.pythonhosted.org/packages/3d/55/e221d35571d724eea679cc1f50e6f3a5c9186f8a604640611dfd211b125f/pyformlang-0.1.13.tar.gz", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "db2489526d0dfd02ad00cd3acb5aa06b", "sha256": "309e616923fc0cd63dbf7898159c9f28d7c562724d9d59904e7202dab3e8dc7f"}, "downloads": -1, "filename": "pyformlang-0.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "db2489526d0dfd02ad00cd3acb5aa06b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 80123, "upload_time": "2019-06-01T21:51:38", "upload_time_iso_8601": "2019-06-01T21:51:38.149622Z", "url": "https://files.pythonhosted.org/packages/d6/a3/bcae709ba19598c7f8c933f9e67a2e3924321521760c08301e3172889a8a/pyformlang-0.1.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7053dd7d71409c6c837da549311c901", "sha256": "c3a12f317e24e09f04abd9d9db35464d3d189457f2b4e12890f9b5215d42eba4"}, "downloads": -1, "filename": "pyformlang-0.1.14.tar.gz", "has_sig": false, "md5_digest": "e7053dd7d71409c6c837da549311c901", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55830, "upload_time": "2019-06-01T21:51:40", "upload_time_iso_8601": "2019-06-01T21:51:40.589549Z", "url": "https://files.pythonhosted.org/packages/2f/60/faee1c4b17216901b081a24a02ad58c43694042b41dffa06ab1eab853f40/pyformlang-0.1.14.tar.gz", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "77cd449674038369b7f23cf1500f8800", "sha256": "8b9f5f3295c7d0b3cc089218b2376e380298d773acad0398150d1013efe898e8"}, "downloads": -1, "filename": "pyformlang-0.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "77cd449674038369b7f23cf1500f8800", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 80223, "upload_time": "2020-02-17T14:57:07", "upload_time_iso_8601": "2020-02-17T14:57:07.420000Z", "url": "https://files.pythonhosted.org/packages/9f/42/8107a258dbcc062d9da23353677094d05b2c5e98055da77cff81f11249f3/pyformlang-0.1.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0edc241bd7ce50e6d43941a76f0c7de4", "sha256": "770d77ad23ab83a297b8233ae89104af47636c85c55c7398d317979f85f0f482"}, "downloads": -1, "filename": "pyformlang-0.1.15.tar.gz", "has_sig": false, "md5_digest": "0edc241bd7ce50e6d43941a76f0c7de4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56079, "upload_time": "2020-02-17T14:57:09", "upload_time_iso_8601": "2020-02-17T14:57:09.380648Z", "url": "https://files.pythonhosted.org/packages/03/c4/65eff71516b3944519d9ee51485f769e383d7dfe1c779778a8e7aea9d9b4/pyformlang-0.1.15.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "c96707bca58dd9b0840a0e10f1b0fec9", "sha256": "d1cd54fbfc385745fa287acf1e097f4fdee1d6294d41de91598cfe8dd44890a4"}, "downloads": -1, "filename": "pyformlang-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "c96707bca58dd9b0840a0e10f1b0fec9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 83915, "upload_time": "2020-02-20T15:51:08", "upload_time_iso_8601": "2020-02-20T15:51:08.526580Z", "url": "https://files.pythonhosted.org/packages/35/83/b1176fdc9cadec04226ed47bab4082a39eca6ab86434482cb5b3c288f455/pyformlang-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "019cc2b7d296bc9097040fc938747868", "sha256": "fafa9a2fc89c3b9597dbc09015d684ea75ec66376d7e0a66801b53c553293cb4"}, "downloads": -1, "filename": "pyformlang-0.1.16.tar.gz", "has_sig": false, "md5_digest": "019cc2b7d296bc9097040fc938747868", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59040, "upload_time": "2020-02-20T15:51:10", "upload_time_iso_8601": "2020-02-20T15:51:10.586418Z", "url": "https://files.pythonhosted.org/packages/23/2b/15d6d4deaf1d08835571ae0727aa8114cf4b5efc15ac83bed0e09a1e0935/pyformlang-0.1.16.tar.gz", "yanked": false}], "0.1.17": [{"comment_text": "", "digests": {"md5": "2e37101e9054429de61c5a6118ab6218", "sha256": "4e1037dc80582f1ab9ef9017aac1e053a8893be5acae102572bb13d1332ed0e4"}, "downloads": -1, "filename": "pyformlang-0.1.17-py3-none-any.whl", "has_sig": false, "md5_digest": "2e37101e9054429de61c5a6118ab6218", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 94083, "upload_time": "2020-04-02T08:51:56", "upload_time_iso_8601": "2020-04-02T08:51:56.600944Z", "url": "https://files.pythonhosted.org/packages/46/e7/8dbae427c3f9ed9d90ceb1e04cc48bba3736445df2d6d51764690e322436/pyformlang-0.1.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3044e4151a1dc052c18646b544100e5", "sha256": "d6a85589139fe61c3d0f22977dba043f658d1674bb3e8ee87c7f71d7f2f97c62"}, "downloads": -1, "filename": "pyformlang-0.1.17.tar.gz", "has_sig": false, "md5_digest": "b3044e4151a1dc052c18646b544100e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66343, "upload_time": "2020-04-02T08:51:58", "upload_time_iso_8601": "2020-04-02T08:51:58.438596Z", "url": "https://files.pythonhosted.org/packages/ce/cb/7891e3f6dcfe533e423e7aade063e44914c19b002de7078626e64d77f281/pyformlang-0.1.17.tar.gz", "yanked": false}], "0.1.18": [{"comment_text": "", "digests": {"md5": "cfa9741cd50e97a9476181080a14737a", "sha256": "f80fc068e698fb8741bd51cc6c4f69e99a033574678e44f592df6a53fa19a42d"}, "downloads": -1, "filename": "pyformlang-0.1.18-py3-none-any.whl", "has_sig": false, "md5_digest": "cfa9741cd50e97a9476181080a14737a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 94224, "upload_time": "2020-04-02T11:09:50", "upload_time_iso_8601": "2020-04-02T11:09:50.243968Z", "url": "https://files.pythonhosted.org/packages/10/d9/aac2f4f9481f1258458e2c8d5b620cfd99c16256f0fd831c5f842e49a82d/pyformlang-0.1.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "676c154c96620a20e220c6fa08417c4b", "sha256": "6f9c09a4b9d973d7ae2d60b47b24c9e5dcec40ed949d478d9ef32ba8bbd4007e"}, "downloads": -1, "filename": "pyformlang-0.1.18.tar.gz", "has_sig": false, "md5_digest": "676c154c96620a20e220c6fa08417c4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66465, "upload_time": "2020-04-02T11:09:52", "upload_time_iso_8601": "2020-04-02T11:09:52.185371Z", "url": "https://files.pythonhosted.org/packages/ec/ab/1622f81ca57978b9f28a650152419cb10412bbaf69bba2ba9bcc61ece656/pyformlang-0.1.18.tar.gz", "yanked": false}], "0.1.19": [{"comment_text": "", "digests": {"md5": "530d4da4bb74b61f2a0ec27f49885960", "sha256": "988156a7c0251734f52986e2a9e27531a6f271fc2bbec885d4016de5a9ecad40"}, "downloads": -1, "filename": "pyformlang-0.1.19-py3-none-any.whl", "has_sig": false, "md5_digest": "530d4da4bb74b61f2a0ec27f49885960", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 103886, "upload_time": "2020-04-07T14:15:29", "upload_time_iso_8601": "2020-04-07T14:15:29.880756Z", "url": "https://files.pythonhosted.org/packages/2a/45/a11f3608fca19b6d42840eaffc812e9682961e4cc3223326d2fbb4d60d50/pyformlang-0.1.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebb33c5dfddda3266bd5baaa6bd8741c", "sha256": "0756d0ccd273584fa4f7812c97f9ebdd928100a151f14f291e2e55b22e9c3029"}, "downloads": -1, "filename": "pyformlang-0.1.19.tar.gz", "has_sig": false, "md5_digest": "ebb33c5dfddda3266bd5baaa6bd8741c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74314, "upload_time": "2020-04-07T14:15:32", "upload_time_iso_8601": "2020-04-07T14:15:32.219181Z", "url": "https://files.pythonhosted.org/packages/4b/31/c0cb737219fec0519c711764b4386c582c13f31fd24d1e5ba0f9f3fff3c3/pyformlang-0.1.19.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "45693e01999144d4057b747e95f407af", "sha256": "6a94314e9b20d46b43c2ce1b87b798bf225954c926a31450398c589ffdf1da2f"}, "downloads": -1, "filename": "pyformlang-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "45693e01999144d4057b747e95f407af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 64933, "upload_time": "2019-03-29T16:26:39", "upload_time_iso_8601": "2019-03-29T16:26:39.437347Z", "url": "https://files.pythonhosted.org/packages/79/a6/934c4e141f88b3b04956f23889c9fbb673c086a570e539d56f212faf367c/pyformlang-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fcc0c3a1b2cd9e6536a3e6d7d26693b5", "sha256": "ac94d6acb5e269dc894f04e800dc0c05edeb0c0fc1a8444c09ecb2fa06ac81c2"}, "downloads": -1, "filename": "pyformlang-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fcc0c3a1b2cd9e6536a3e6d7d26693b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 72835, "upload_time": "2019-05-07T12:37:44", "upload_time_iso_8601": "2019-05-07T12:37:44.222519Z", "url": "https://files.pythonhosted.org/packages/28/08/15250ba3942aff46d5309006ad329cf19692ed472c0afb55d06ffda29350/pyformlang-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "882c5dc37a5f89c9a1926fe8526ed744", "sha256": "903672c5756358fb382f86cc2e1ce35444d9c7ba2ee594e7a14fa84e3049696c"}, "downloads": -1, "filename": "pyformlang-0.1.3.tar.gz", "has_sig": false, "md5_digest": "882c5dc37a5f89c9a1926fe8526ed744", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50268, "upload_time": "2019-05-07T12:37:46", "upload_time_iso_8601": "2019-05-07T12:37:46.237453Z", "url": "https://files.pythonhosted.org/packages/8f/b1/07df2dccb12909cc40e93232306f364e831725005e1262f06fea9781cc5b/pyformlang-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c63d5ec981cbe8bd89880ccc70b5d8fe", "sha256": "4d08f1416947706684341d482b3a13c15e74ed832964e6b02e515878d7b9ee8c"}, "downloads": -1, "filename": "pyformlang-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c63d5ec981cbe8bd89880ccc70b5d8fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 72838, "upload_time": "2019-05-07T13:26:46", "upload_time_iso_8601": "2019-05-07T13:26:46.501994Z", "url": "https://files.pythonhosted.org/packages/c2/52/b35b266f3faf1b33daae7364392e5101d363d1a12bc22a414c3b2dbfc438/pyformlang-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4776468e946bd1306f05c6c00abb65d2", "sha256": "543be4274e29bb7fcfbc411f507f5a6fff90495e1bed3052ff99ac323bb98a1d"}, "downloads": -1, "filename": "pyformlang-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4776468e946bd1306f05c6c00abb65d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50273, "upload_time": "2019-05-07T13:26:47", "upload_time_iso_8601": "2019-05-07T13:26:47.943964Z", "url": "https://files.pythonhosted.org/packages/5a/fd/a41f86eff774ce14308555cec9187fe7806adde39bbbf27375be1399202d/pyformlang-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "ce4fc6447c4938512c359f760745e1e2", "sha256": "2bf0d497db817e54e43f6ffb2d4417a8dff83944246ed1acac4401945ab26529"}, "downloads": -1, "filename": "pyformlang-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ce4fc6447c4938512c359f760745e1e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 72854, "upload_time": "2019-05-07T15:03:53", "upload_time_iso_8601": "2019-05-07T15:03:53.474799Z", "url": "https://files.pythonhosted.org/packages/37/29/6a2a93f7169c67aba2dace444d522a5787b695e19b2226b5d1416597290f/pyformlang-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d70b004814b8c2dea86644d8f2e18d76", "sha256": "9fe6240e20f902e0846b61dd47ee63efcb7d8259b2ae92124e349e1a107d4500"}, "downloads": -1, "filename": "pyformlang-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d70b004814b8c2dea86644d8f2e18d76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50287, "upload_time": "2019-05-07T15:03:55", "upload_time_iso_8601": "2019-05-07T15:03:55.155910Z", "url": "https://files.pythonhosted.org/packages/1f/ff/0ac429db3eb67af351ac267c8e1d675e874d43c8207b7a79b0ca6ff7dfab/pyformlang-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "6c67517453d371be5afa0c668bc95a11", "sha256": "6952d07ba3f9faa2d8ce4311d11e4824b9070f6080ab466110ad42d879cc3a72"}, "downloads": -1, "filename": "pyformlang-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6c67517453d371be5afa0c668bc95a11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 73424, "upload_time": "2019-05-08T08:57:38", "upload_time_iso_8601": "2019-05-08T08:57:38.300427Z", "url": "https://files.pythonhosted.org/packages/ed/0d/5535815d263ea74ee46938fb5511552890ab696e8323d8811853f5784dc2/pyformlang-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa0a78676a83d9a1640907d7245b10bd", "sha256": "d6e95740bd86f375c933c82364736ac38a9721d295996763be11cdcbc19f2a7d"}, "downloads": -1, "filename": "pyformlang-0.1.6.tar.gz", "has_sig": false, "md5_digest": "fa0a78676a83d9a1640907d7245b10bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50593, "upload_time": "2019-05-08T08:57:40", "upload_time_iso_8601": "2019-05-08T08:57:40.125253Z", "url": "https://files.pythonhosted.org/packages/d9/2d/ea2ba2497b26eacafb4fdbbdf562651beb51747d6c5377bd50966540eb6d/pyformlang-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "825ba08128d3d423f56df1fd5d02c658", "sha256": "96e4eb8bcb05a920bbd67c89520a0f3281f61a6f8402ad1068d3fdebc58af221"}, "downloads": -1, "filename": "pyformlang-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "825ba08128d3d423f56df1fd5d02c658", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 73936, "upload_time": "2019-05-09T08:18:30", "upload_time_iso_8601": "2019-05-09T08:18:30.221961Z", "url": "https://files.pythonhosted.org/packages/0a/06/3bf6314d75b586bb2f6b3a6771286c4d1fd0ab8c361e66647e82182d9acf/pyformlang-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f263b61ee67da75eea1374b2e4351100", "sha256": "3bb9b0e0f33cc9f941f41f9c2ecf0f6978fed2a354eee190411c2272bf922877"}, "downloads": -1, "filename": "pyformlang-0.1.7.tar.gz", "has_sig": false, "md5_digest": "f263b61ee67da75eea1374b2e4351100", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51119, "upload_time": "2019-05-09T08:18:31", "upload_time_iso_8601": "2019-05-09T08:18:31.883752Z", "url": "https://files.pythonhosted.org/packages/7a/bb/745c9515643afb4e7f40417e9e501e6cbe33fa08ba9639a0d55f4c264ce8/pyformlang-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "d2a1a4135651d65324e142386ae7b292", "sha256": "25104d41d69834f0126cce8af2fd75fba6db351d877934534827784989db0174"}, "downloads": -1, "filename": "pyformlang-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "d2a1a4135651d65324e142386ae7b292", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74133, "upload_time": "2019-05-09T13:25:35", "upload_time_iso_8601": "2019-05-09T13:25:35.298954Z", "url": "https://files.pythonhosted.org/packages/ca/ad/3269f77d83eed2a980c6bb818e5d448435e04eca6f2d2b99aec9289bd7ff/pyformlang-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6129f8bdbb63ddf58536d8cb57a14d9c", "sha256": "38dbd691c7f538b51a5862dc6040384de9af9a5341f8c4cc5a1d53de796c5eee"}, "downloads": -1, "filename": "pyformlang-0.1.8.tar.gz", "has_sig": false, "md5_digest": "6129f8bdbb63ddf58536d8cb57a14d9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51280, "upload_time": "2019-05-09T13:25:36", "upload_time_iso_8601": "2019-05-09T13:25:36.988834Z", "url": "https://files.pythonhosted.org/packages/b4/b2/5e8011895e5e27141215f4880892849a42245d1021d3462bda77089fd05b/pyformlang-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "0a64baf5b68622b7a43557177147ec29", "sha256": "0824ba2ccc750beee67fb61f743c1939c704a836b85d005dbd5ea1699646b727"}, "downloads": -1, "filename": "pyformlang-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0a64baf5b68622b7a43557177147ec29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 75141, "upload_time": "2019-05-13T15:08:05", "upload_time_iso_8601": "2019-05-13T15:08:05.218456Z", "url": "https://files.pythonhosted.org/packages/ce/c1/051f92ad480583132fa7532c7eb7031a295cde7441e2c04c0adf616e608c/pyformlang-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bac4fe53615cb8d861606c1e44b5a5d1", "sha256": "3703203622175f898fcd589fa6540c12ae2bf2d05f39fc21fe5d5648ba6aa0f6"}, "downloads": -1, "filename": "pyformlang-0.1.9.tar.gz", "has_sig": false, "md5_digest": "bac4fe53615cb8d861606c1e44b5a5d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52250, "upload_time": "2019-05-13T15:08:07", "upload_time_iso_8601": "2019-05-13T15:08:07.760497Z", "url": "https://files.pythonhosted.org/packages/fa/75/db62bda3431277ae8f20514a2fe2997074f7ac282f5fea73ba0875aaa444/pyformlang-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "530d4da4bb74b61f2a0ec27f49885960", "sha256": "988156a7c0251734f52986e2a9e27531a6f271fc2bbec885d4016de5a9ecad40"}, "downloads": -1, "filename": "pyformlang-0.1.19-py3-none-any.whl", "has_sig": false, "md5_digest": "530d4da4bb74b61f2a0ec27f49885960", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 103886, "upload_time": "2020-04-07T14:15:29", "upload_time_iso_8601": "2020-04-07T14:15:29.880756Z", "url": "https://files.pythonhosted.org/packages/2a/45/a11f3608fca19b6d42840eaffc812e9682961e4cc3223326d2fbb4d60d50/pyformlang-0.1.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebb33c5dfddda3266bd5baaa6bd8741c", "sha256": "0756d0ccd273584fa4f7812c97f9ebdd928100a151f14f291e2e55b22e9c3029"}, "downloads": -1, "filename": "pyformlang-0.1.19.tar.gz", "has_sig": false, "md5_digest": "ebb33c5dfddda3266bd5baaa6bd8741c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74314, "upload_time": "2020-04-07T14:15:32", "upload_time_iso_8601": "2020-04-07T14:15:32.219181Z", "url": "https://files.pythonhosted.org/packages/4b/31/c0cb737219fec0519c711764b4386c582c13f31fd24d1e5ba0f9f3fff3c3/pyformlang-0.1.19.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:35 2020"}