{"info": {"author": "Artur Barseghyan", "author_email": "artur.barseghyan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Topic :: Database"], "description": "=========================================\nstarbase\n=========================================\nHBase Stargate (REST API) client wrapper for Python.\n\nRead the official documentation of the `Stargate <http://wiki.apache.org/hadoop/Hbase/Stargate>`_.\n\nDescription\n=========================================\nstarbase is (at the moment) a client implementation of the Apache HBase REST API (Stargate).\n\nWhat you have to know\n=========================================\nBeware, that REST API is slow (not to blame on this library!). If you can operate with HBase directly\nbetter do so.\n\nPrerequisites\n=========================================\nYou need to have Hadoop, HBase, Thrift and Stargate running. If you want to make it easy for yourself,\nread my instructions on installing Cloudera manager (free) on Ubuntu 12.04 LTS \n`here <http://barseghyanartur.blogspot.nl/2013/08/installing-cloudera-on-ubuntu-1204.html>`_ or\n`there <https://bitbucket.org/barseghyanartur/simple-cloudera-install>`_.\n\nOnce you have everything installed and running (by default Stargate runs on 127.0.0.1:8000), you should\nbe able to run `src/starbase/client/test.py` without problems (UnitTest).\n\nSupported Python versions\n=========================================\n- 2.6.8 and up\n- 2.7\n- 3.3\n\nFeatures\n=========================================\nProject is still in development, thus not all the features of the API are available.\n\nFeatures implemented\n-----------------------------------------\n- Connect to Stargate.\n- Show software version.\n- Show cluster version.\n- Show cluster status.\n- List tables.\n- Retrieve table schema.\n- Retrieve table meta data.\n- Get a list of tables' column families.\n- Create a table.\n- Delete a table.\n- Alter table schema.\n- Insert (PUT) data into a single row (single or multiple columns).\n- Update (POST) data of a single row (single or multiple columns).\n- Select (GET) a single row from table, optionally with selected columns only.\n- Delete (DELETE) a single row by id.\n- Batch insert (PUT).\n- Batch update (POST).\n- Basic HTTP auth is working. You could provide a login and a password to the connection.\n- Retrive all rows in a table (table scanning).\n\nFeatures in-development\n-----------------------------------------\n- Table scanning.\n- Syntax globbing.\n\nInstallation\n=========================================\nInstall latest stable version from PyPI.\n\n.. code-block::\n\n    $ pip install starbase\n\nOr latest stable version from github.\n\n.. code-block::\n\n    $ pip install -e git+https://github.com/barseghyanartur/starbase@stable#egg=starbase\n\nUsage and examples\n=========================================\nOperating with API starts with making a connection instance.\n\nRequired imports\n-----------------------------------------\n.. code-block:: python\n\n    from starbase import Connection\n\nCreate a connection instance\n-----------------------------------------\nDefaults to 127.0.0.1:8000. Specify ``host`` and ``port`` arguments when creating a connection instance,\nif your settings are different.\n\n.. code-block:: python\n\n    c = Connection()\n\nWith customisations, would look simlar to the following.\n\n.. code-block:: python\n\n    c = Connection(host='192.168.88.22', port=8001)\n\nShow tables\n-----------------------------------------\nAssuming that there are two existing tables named ``table1`` and ``table2``, the following would be\nprinted out.\n\n.. code-block:: python\n\n    c.tables()\n\nOutput.\n\n.. code-block::\n\n    ['table1', 'table2']\n\nOperating with table schema\n-----------------------------------------\nWhenever you need to operate with a table (also, if you need to create one), you need to have a table\ninstance created.\n\nCreate a table instance (note, that at this step no table is created).\n\n.. code-block:: python\n\n    t = c.table('table3')\n\nCreate a new table\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAssuming that no table named ``table3`` yet exists in the database, create a table named ``table3`` with\ncolumns (column families) ``column1``, ``column2``, ``column3`` (this is the point where the table is\nactually created). In the example below, ``column1``, ``column2`` and ``column3`` are column families (in\nshort - columns). Columns are declared in the table schema.\n\n.. code-block:: python\n\n    t.create('column1', 'column2', 'column3')\n\nOutput.\n\n.. code-block::\n\n    201\n\nCheck if table exists\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: python\n\n    t.exists()\n\nOutput.\n\n.. code-block::\n\n    True\n\nShow table columns (column families)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: python\n\n    t.columns()\n\nOutput.\n\n.. code-block::\n\n    ['column1', 'column2', 'column3']\n\nAdd columns to the table\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAdd columns given (``column4``, ``column5``, ``column6``, ``column7``).\n\n.. code-block:: python\n\n    t.add_columns('column4', 'column5', 'column6', 'column7')\n\nOutput.\n\n.. code-block::\n\n    200\n\nDrop columns from table\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nDrop columns given (``column6``, ``column7``).\n\n.. code-block:: python\n\n    t.drop_columns('column6', 'column7')\n\nOutput.\n\n.. code-block::\n\n    201\n\nDrop entire table schema\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: python\n\n    t.drop()\n\nOutput.\n\n.. code-block::\n\n    200\n\nOperating with table data\n-----------------------------------------\n\nInsert data into a single row\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nHBase is a key/value store. In HBase columns (also named column families) are part of declared table schema\nand have to be defined when a table is created. Columns have qualifiers, which are not declared in the table\nschema. Number of column qualifiers is not limited.\n\nWithin a single row, a value is mapped by a column family and a qualifier (in terms of key/value store\nconcept). Value might be anything castable to string (JSON objects, data structures, XML, etc).\n\nIn the example below, ``key11``, ``key12``, ``key21``, etc. - are the qualifiers. Obviously, ``column1``,\n``column2`` and ``column3`` are column families.\n\nColumn families must be composed of printable characters. Qualifiers can be made of any arbitrary bytes.\n\nTable rows are identified by row keys - unique identifiers (UID or so called primary key). In the example\nbelow, ``my-key-1`` is the row key (UID).\n\n\u0422\u043e recap all what's said above, HBase maps (row key, column family, column qualifier and timestamp) to a\nvalue.\n\n.. code-block:: python\n\n    t.insert(\n        'my-key-1',\n        {\n            'column1': {'key11': 'value 11', 'key12': 'value 12',\n                        'key13': 'value 13'},\n            'column2': {'key21': 'value 21', 'key22': 'value 22'},\n            'column3': {'key32': 'value 31', 'key32': 'value 32'}\n        }\n        )\n\nOutput.\n\n.. code-block::\n\n    200\n\nNote, that you may also use the `native` way of naming the columns and cells (qualifiers). Result of\nthe following would be equal to the result of the previous example.\n\n.. code-block:: python\n\n    t.insert(\n        'my-key-1',\n        {\n            'column1:key11': 'value 11', 'column1:key12': 'value 12',\n            'column1:key13': 'value 13',\n            'column2:key21': 'value 21', 'column2:key22': 'value 22',\n            'column3:key32': 'value 31', 'column3:key32': 'value 32'\n        }\n        )\n\nOutput.\n\n.. code-block::\n\n    200\n\nUpdate row data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: python\n\n    t.update(\n        'my-key-1',\n        {'column4': {'key41': 'value 41', 'key42': 'value 42'}}\n        )\n\nOutput.\n\n.. code-block::\n\n    200\n\nRemove row, row column or row cell data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRemove a row cell (qualifier) data. In the example below, the ``my-key-1`` is table row UID, ``column4``\nis the column family and the ``key41`` is the qualifier. Note, that only qualifer data (for the row given)\nis being removed. All other possible qualifiers of the column ``column4`` will remain untouched.\n\n.. code-block:: python\n\n    t.remove('my-key-1', 'column4', 'key41')\n\nOutput.\n\n.. code-block::\n\n    200\n\nRemove a row column (column family) data. Note, that at this point, the entire column data (data of all\nqualifiers for the row given) is being removed.\n\n.. code-block:: python\n\n    t.remove('my-key-1', 'column4')\n\nOutput.\n\n.. code-block::\n\n    200\n\nRemove an entire row data. Note, that in this case, entire row data, along with all columns and qualifiers\nfor the row given, is being removed.\n\n.. code-block:: python\n\n    t.remove('my-key-1')\n\nOutput.\n\n.. code-block::\n\n    200\n\nFetch table data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFetch a single row data with all columns and qualifiers.\n\n.. code-block:: python\n\n    t.fetch('my-key-1')\n\nOutput.\n\n.. code-block::\n\n    {\n        'column1': {'key11': 'value 11', 'key12': 'value 12', 'key13': 'value 13'},\n        'column2': {'key21': 'value 21', 'key22': 'value 22'},\n        'column3': {'key32': 'value 31', 'key32': 'value 32'}\n    }\n\nFetch a single row data with selected columns (limit to ``column1`` and ``column2`` columns and all\ntheir qualifiers).\n\n.. code-block:: python\n\n    t.fetch('my-key-1', ['column1', 'column2'])\n\nOutput.\n\n.. code-block::\n\n    {\n        'column1': {'key11': 'value 11', 'key12': 'value 12', 'key13': 'value 13'},\n        'column2': {'key21': 'value 21', 'key22': 'value 22'},\n    }\n\nNarrow the result set even more (limit to qualifiers ``key1`` and ``key2`` of column ``column1`` and\nqualifier ``key32`` of column ``column3``).\n\n.. code-block:: python\n\n    t.fetch('my-key-1', {'column1': ['key11', 'key13'], 'column3': ['key32']})\n\nOutput.\n\n.. code-block::\n\n    {\n        'column1': {'key11': 'value 11', 'key13': 'value 13'},\n        'column3': {'key32': 'value 32'}\n    }\n\nNote, that you may also use the `native` way of naming the columns and cells (qualifiers). Example\nbelow does exactly the same as example above.\n\n.. code-block:: python\n\n    t.fetch('my-key-1', ['column1:key11', 'column1:key13', 'column3:key32'])\n\nOutput.\n\n.. code-block::\n\n    {\n        'column1': {'key11': 'value 11', 'key13': 'value 13'},\n        'column3': {'key32': 'value 32'}\n    }\n\nIf you set the `perfect_dict` argument to False, you'll get the `native` data structure.\n\n.. code-block:: python\n\n    t.fetch(\n        'my-key-1',\n        ['column1:key11', 'column1:key13', 'column3:key32'],\n        perfect_dict=False\n        )\n\nOutput.\n\n.. code-block::\n\n    {\n        'column1:key11': 'value 11',\n        'column1:key13': 'value 13',\n        'column3:key32': 'value 32'\n    }\n\nBatch operations with table data\n-----------------------------------------\nBatch operations (insert and update) work similar to normal insert and update, but are done in a batch.\nYou are advised to operate in batch as much as possible.\n\nBatch insert\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn the example below, we will insert 5000 records in a batch.\n\n.. code-block:: python\n\n    data = {\n        'column1': {'key11': 'value 11', 'key12': 'value 12', 'key13': 'value 13'},\n        'column2': {'key21': 'value 21', 'key22': 'value 22'},\n    }\n    b = t.batch()\n    if b:\n        for i in range(0, 5000):\n            b.insert('my-key-%s' % i, data)\n        b.commit(finalize=True)\n\nOutput.\n\n.. code-block::\n\n    {'method': 'PUT', 'response': [200], 'url': 'table3/bXkta2V5LTA='}\n\nBatch update\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn the example below, we will update 5000 records in a batch.\n\n.. code-block:: python\n\n    data = {\n        'column3': {'key31': 'value 31', 'key32': 'value 32'},\n    }\n    b = t.batch()\n    if b:\n        for i in range(0, 5000):\n            b.update('my-key-%s' % i, data)\n        b.commit(finalize=True)\n\nOutput.\n\n.. code-block::\n\n    {'method': 'POST', 'response': [200], 'url': 'table3/bXkta2V5LTA='}\n\nNote: The table `batch` method accepts an optional `size` argument (int). If set, an auto-commit is fired\neach the time the stack is ``full``.\n\nTable data search (row scanning)\n-----------------------------------------\nTable scanning is in development (therefore, the scanning API will likely be changed). Result set returned is a\ngenerator.\n\nFetch all rows\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: python\n\n    t.fetch_all_rows()\n\nOutput.\n\n.. code-block::\n\n    <generator object results at 0x28e9190>\n\nFetch rows with a filter given\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: python\n\n    rf = '{\"type\": \"RowFilter\", \"op\": \"EQUAL\", \"comparator\": {\"type\": \"RegexStringComparator\", \"value\": \"^row_1.+\"}}'\n    t.fetch_all_rows(with_row_id=True, filter_string=rf)\n\nOutput.\n\n.. code-block::\n\n    <generator object results at 0x28e9190>\n\nMore information on table operations\n=========================================\nBy default, prior further execution of the `fetch`, `insert`, `update`, `remove` (table row operations)\nmethods, it's being checked whether the table exists or not. That's safe, but comes in cost of an\nextra (light though) HTTP request. If you're absolutely sure you want to avoid those checks, you can\ndisable them. It's possible to disable each type of row operation, by setting the following properties\nof the table instance to False: ``check_if_exists_on_row_fetch``, ``check_if_exists_on_row_insert``,\n``check_if_exists_on_row_remove`` and ``check_if_exists_on_row_update``.\n\n.. code-block:: python\n\n    t.check_if_exists_on_row_fetch = False\n    t.fetch('row1')\n\nIt's also possible to disable\nthem all at once, by calling the ``disable_row_operation_if_exists_checks`` method of the table instance.\n\n.. code-block:: python\n\n    t.disable_row_operation_if_exists_checks()\n    t.remove('row1')\n\nSame goes for table scanner operations. Setting the value of ``check_if_exists_on_scanner_operations``\nof a table instance to False, skips the checks for scanner operations.\n\n.. code-block:: python\n\n    t.check_if_exists_on_scanner_operations = False\n    t.fetch_all_rows(flat=True)\n\nException handling\n=========================================\nMethods that accept `fail_silently` argument are listed per class below.\n\nstarbase.client.connection.Connection\n-----------------------------------------\n- cluster_version\n- cluster_status\n- drop_table\n- tables\n- table_exists\n- version\n\nstarbase.client.table.Table\n-----------------------------------------\n- add_columns\n- batch\n- create\n- drop\n- drop_columns\n- exists\n- insert\n- fetch\n- fetch_all_rows\n- regions\n- remove\n- schema\n- update\n\nstarbase.client.table.Batch\n-----------------------------------------\n- commit\n- insert\n- update\n\nstarbase.client.transport.HttpRequest\n-----------------------------------------\nClass `starbase.client.table.Batch` accepts `fail_silently` as a constructor argument.\n\nMore examples\n=========================================\n\nShow software version\n-----------------------------------------\n.. code-block:: python\n\n    print connection.version\n\nOutput.\n\n.. code-block::\n\n    {u'JVM': u'Sun Microsystems Inc. 1.6.0_43-20.14-b01',\n     u'Jersey': u'1.8',\n     u'OS': u'Linux 3.5.0-30-generic amd64',\n     u'REST': u'0.0.2',\n     u'Server': u'jetty/6.1.26'}\n\nShow cluster version\n-----------------------------------------\n.. code-block:: python\n\n    print connection.cluster_version\n\nOutput.\n\n.. code-block::\n\n    u'0.94.7'\n\nShow cluster status\n-----------------------------------------\n.. code-block:: python\n\n    print connection.cluster_status\n\nOutput.\n\n.. code-block::\n\n    {u'DeadNodes': [],\n     u'LiveNodes': [{u'Region': [{u'currentCompactedKVs': 0,\n     ...\n     u'regions': 3,\n     u'requests': 0}\n\nShow table schema\n-----------------------------------------\n.. code-block:: python\n\n    print table.schema()\n\nOutput.\n\n.. code-block::\n\n    {u'ColumnSchema': [{u'BLOCKCACHE': u'true',\n       u'BLOCKSIZE': u'65536',\n     ...\n       u'IS_ROOT': u'false',\n     u'name': u'messages'}\n\nPrint table metadata\n-----------------------------------------\n.. code-block:: python\n\n    print table.regions()\n\nFailed requests\n=========================================\nBy default, number of retries for a failed request is equal to zero. \nThat means, the request isn't being repeated if failed. It's possible\nto retry a failed request (for instance, in case of timeouts, etc).\n\nIn order to do that, two additional arguments of the\n``starbase.client.connection.Connection`` have been introduced:\n\n- retries (int)\n- retry_delay (int)\n\n.. code-block:: python\n\n    c = Connection(\n        retries = 3, # Retry 3 times\n        retry_delay = 5 # Wait for 5 seconds between retries\n        )\n\nBeware! Number of retries can cause performance issues (lower\nresponsiveness) of your application. At the moment, failed requests,\nsuch as deletion of non-existing column, row or a table, are handled\nin the same way and would all cause a retry. This likely will change\nin future (smarter detection of failures worth to retry a request).\n\nLicense\n=========================================\nGPL 2.0/LGPL 2.1\n\nSupport\n=========================================\nFor any issues contact me at the e-mail given in the `Author` section.\n\nAuthor\n=========================================\nArtur Barseghyan <artur.barseghyan@gmail.com>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/barseghyanartur/starbase", "keywords": "hadoop,hbase,stargate,app,python", "license": "GPL 2.0/LGPL 2.1", "maintainer": null, "maintainer_email": null, "name": "starbase", "package_url": "https://pypi.org/project/starbase/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/starbase/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/barseghyanartur/starbase"}, "release_url": "https://pypi.org/project/starbase/0.3.3/", "requires_dist": null, "requires_python": null, "summary": "Python client for HBase Stargate REST server", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>HBase Stargate (REST API) client wrapper for Python.</p>\n<p>Read the official documentation of the <a href=\"http://wiki.apache.org/hadoop/Hbase/Stargate\" rel=\"nofollow\">Stargate</a>.</p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>starbase is (at the moment) a client implementation of the Apache HBase REST API (Stargate).</p>\n</div>\n<div id=\"what-you-have-to-know\">\n<h2>What you have to know</h2>\n<p>Beware, that REST API is slow (not to blame on this library!). If you can operate with HBase directly\nbetter do so.</p>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>You need to have Hadoop, HBase, Thrift and Stargate running. If you want to make it easy for yourself,\nread my instructions on installing Cloudera manager (free) on Ubuntu 12.04 LTS\n<a href=\"http://barseghyanartur.blogspot.nl/2013/08/installing-cloudera-on-ubuntu-1204.html\" rel=\"nofollow\">here</a> or\n<a href=\"https://bitbucket.org/barseghyanartur/simple-cloudera-install\" rel=\"nofollow\">there</a>.</p>\n<p>Once you have everything installed and running (by default Stargate runs on 127.0.0.1:8000), you should\nbe able to run <cite>src/starbase/client/test.py</cite> without problems (UnitTest).</p>\n</div>\n<div id=\"supported-python-versions\">\n<h2>Supported Python versions</h2>\n<ul>\n<li>2.6.8 and up</li>\n<li>2.7</li>\n<li>3.3</li>\n</ul>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>Project is still in development, thus not all the features of the API are available.</p>\n<div id=\"features-implemented\">\n<h3>Features implemented</h3>\n<ul>\n<li>Connect to Stargate.</li>\n<li>Show software version.</li>\n<li>Show cluster version.</li>\n<li>Show cluster status.</li>\n<li>List tables.</li>\n<li>Retrieve table schema.</li>\n<li>Retrieve table meta data.</li>\n<li>Get a list of tables\u2019 column families.</li>\n<li>Create a table.</li>\n<li>Delete a table.</li>\n<li>Alter table schema.</li>\n<li>Insert (PUT) data into a single row (single or multiple columns).</li>\n<li>Update (POST) data of a single row (single or multiple columns).</li>\n<li>Select (GET) a single row from table, optionally with selected columns only.</li>\n<li>Delete (DELETE) a single row by id.</li>\n<li>Batch insert (PUT).</li>\n<li>Batch update (POST).</li>\n<li>Basic HTTP auth is working. You could provide a login and a password to the connection.</li>\n<li>Retrive all rows in a table (table scanning).</li>\n</ul>\n</div>\n<div id=\"features-in-development\">\n<h3>Features in-development</h3>\n<ul>\n<li>Table scanning.</li>\n<li>Syntax globbing.</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install latest stable version from PyPI.</p>\n<pre>$ pip install starbase\n</pre>\n<p>Or latest stable version from github.</p>\n<pre>$ pip install -e git+https://github.com/barseghyanartur/starbase@stable#egg=starbase\n</pre>\n</div>\n<div id=\"usage-and-examples\">\n<h2>Usage and examples</h2>\n<p>Operating with API starts with making a connection instance.</p>\n<div id=\"required-imports\">\n<h3>Required imports</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starbase</span> <span class=\"kn\">import</span> <span class=\"n\">Connection</span>\n</pre>\n</div>\n<div id=\"create-a-connection-instance\">\n<h3>Create a connection instance</h3>\n<p>Defaults to 127.0.0.1:8000. Specify <tt>host</tt> and <tt>port</tt> arguments when creating a connection instance,\nif your settings are different.</p>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">()</span>\n</pre>\n<p>With customisations, would look simlar to the following.</p>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'192.168.88.22'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8001</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"show-tables\">\n<h3>Show tables</h3>\n<p>Assuming that there are two existing tables named <tt>table1</tt> and <tt>table2</tt>, the following would be\nprinted out.</p>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">tables</span><span class=\"p\">()</span>\n</pre>\n<p>Output.</p>\n<pre>['table1', 'table2']\n</pre>\n</div>\n<div id=\"operating-with-table-schema\">\n<h3>Operating with table schema</h3>\n<p>Whenever you need to operate with a table (also, if you need to create one), you need to have a table\ninstance created.</p>\n<p>Create a table instance (note, that at this step no table is created).</p>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'table3'</span><span class=\"p\">)</span>\n</pre>\n<div id=\"create-a-new-table\">\n<h4>Create a new table</h4>\n<p>Assuming that no table named <tt>table3</tt> yet exists in the database, create a table named <tt>table3</tt> with\ncolumns (column families) <tt>column1</tt>, <tt>column2</tt>, <tt>column3</tt> (this is the point where the table is\nactually created). In the example below, <tt>column1</tt>, <tt>column2</tt> and <tt>column3</tt> are column families (in\nshort - columns). Columns are declared in the table schema.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'column1'</span><span class=\"p\">,</span> <span class=\"s1\">'column2'</span><span class=\"p\">,</span> <span class=\"s1\">'column3'</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>201\n</pre>\n</div>\n<div id=\"check-if-table-exists\">\n<h4>Check if table exists</h4>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n</pre>\n<p>Output.</p>\n<pre>True\n</pre>\n</div>\n<div id=\"show-table-columns-column-families\">\n<h4>Show table columns (column families)</h4>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">()</span>\n</pre>\n<p>Output.</p>\n<pre>['column1', 'column2', 'column3']\n</pre>\n</div>\n<div id=\"add-columns-to-the-table\">\n<h4>Add columns to the table</h4>\n<p>Add columns given (<tt>column4</tt>, <tt>column5</tt>, <tt>column6</tt>, <tt>column7</tt>).</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add_columns</span><span class=\"p\">(</span><span class=\"s1\">'column4'</span><span class=\"p\">,</span> <span class=\"s1\">'column5'</span><span class=\"p\">,</span> <span class=\"s1\">'column6'</span><span class=\"p\">,</span> <span class=\"s1\">'column7'</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>200\n</pre>\n</div>\n<div id=\"drop-columns-from-table\">\n<h4>Drop columns from table</h4>\n<p>Drop columns given (<tt>column6</tt>, <tt>column7</tt>).</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">drop_columns</span><span class=\"p\">(</span><span class=\"s1\">'column6'</span><span class=\"p\">,</span> <span class=\"s1\">'column7'</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>201\n</pre>\n</div>\n<div id=\"drop-entire-table-schema\">\n<h4>Drop entire table schema</h4>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">()</span>\n</pre>\n<p>Output.</p>\n<pre>200\n</pre>\n</div>\n</div>\n<div id=\"operating-with-table-data\">\n<h3>Operating with table data</h3>\n<div id=\"insert-data-into-a-single-row\">\n<h4>Insert data into a single row</h4>\n<p>HBase is a key/value store. In HBase columns (also named column families) are part of declared table schema\nand have to be defined when a table is created. Columns have qualifiers, which are not declared in the table\nschema. Number of column qualifiers is not limited.</p>\n<p>Within a single row, a value is mapped by a column family and a qualifier (in terms of key/value store\nconcept). Value might be anything castable to string (JSON objects, data structures, XML, etc).</p>\n<p>In the example below, <tt>key11</tt>, <tt>key12</tt>, <tt>key21</tt>, etc. - are the qualifiers. Obviously, <tt>column1</tt>,\n<tt>column2</tt> and <tt>column3</tt> are column families.</p>\n<p>Column families must be composed of printable characters. Qualifiers can be made of any arbitrary bytes.</p>\n<p>Table rows are identified by row keys - unique identifiers (UID or so called primary key). In the example\nbelow, <tt><span class=\"pre\">my-key-1</span></tt> is the row key (UID).</p>\n<p>\u0422\u043e recap all what\u2019s said above, HBase maps (row key, column family, column qualifier and timestamp) to a\nvalue.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n    <span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'column1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key11'</span><span class=\"p\">:</span> <span class=\"s1\">'value 11'</span><span class=\"p\">,</span> <span class=\"s1\">'key12'</span><span class=\"p\">:</span> <span class=\"s1\">'value 12'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'key13'</span><span class=\"p\">:</span> <span class=\"s1\">'value 13'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'column2'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key21'</span><span class=\"p\">:</span> <span class=\"s1\">'value 21'</span><span class=\"p\">,</span> <span class=\"s1\">'key22'</span><span class=\"p\">:</span> <span class=\"s1\">'value 22'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'column3'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key32'</span><span class=\"p\">:</span> <span class=\"s1\">'value 31'</span><span class=\"p\">,</span> <span class=\"s1\">'key32'</span><span class=\"p\">:</span> <span class=\"s1\">'value 32'</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>200\n</pre>\n<p>Note, that you may also use the <cite>native</cite> way of naming the columns and cells (qualifiers). Result of\nthe following would be equal to the result of the previous example.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n    <span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'column1:key11'</span><span class=\"p\">:</span> <span class=\"s1\">'value 11'</span><span class=\"p\">,</span> <span class=\"s1\">'column1:key12'</span><span class=\"p\">:</span> <span class=\"s1\">'value 12'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'column1:key13'</span><span class=\"p\">:</span> <span class=\"s1\">'value 13'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'column2:key21'</span><span class=\"p\">:</span> <span class=\"s1\">'value 21'</span><span class=\"p\">,</span> <span class=\"s1\">'column2:key22'</span><span class=\"p\">:</span> <span class=\"s1\">'value 22'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'column3:key32'</span><span class=\"p\">:</span> <span class=\"s1\">'value 31'</span><span class=\"p\">,</span> <span class=\"s1\">'column3:key32'</span><span class=\"p\">:</span> <span class=\"s1\">'value 32'</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>200\n</pre>\n</div>\n<div id=\"update-row-data\">\n<h4>Update row data</h4>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n    <span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s1\">'column4'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key41'</span><span class=\"p\">:</span> <span class=\"s1\">'value 41'</span><span class=\"p\">,</span> <span class=\"s1\">'key42'</span><span class=\"p\">:</span> <span class=\"s1\">'value 42'</span><span class=\"p\">}}</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>200\n</pre>\n</div>\n<div id=\"remove-row-row-column-or-row-cell-data\">\n<h4>Remove row, row column or row cell data</h4>\n<p>Remove a row cell (qualifier) data. In the example below, the <tt><span class=\"pre\">my-key-1</span></tt> is table row UID, <tt>column4</tt>\nis the column family and the <tt>key41</tt> is the qualifier. Note, that only qualifer data (for the row given)\nis being removed. All other possible qualifiers of the column <tt>column4</tt> will remain untouched.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span> <span class=\"s1\">'column4'</span><span class=\"p\">,</span> <span class=\"s1\">'key41'</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>200\n</pre>\n<p>Remove a row column (column family) data. Note, that at this point, the entire column data (data of all\nqualifiers for the row given) is being removed.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span> <span class=\"s1\">'column4'</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>200\n</pre>\n<p>Remove an entire row data. Note, that in this case, entire row data, along with all columns and qualifiers\nfor the row given, is being removed.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">'my-key-1'</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>200\n</pre>\n</div>\n<div id=\"fetch-table-data\">\n<h4>Fetch table data</h4>\n<p>Fetch a single row data with all columns and qualifiers.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'my-key-1'</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>{\n    'column1': {'key11': 'value 11', 'key12': 'value 12', 'key13': 'value 13'},\n    'column2': {'key21': 'value 21', 'key22': 'value 22'},\n    'column3': {'key32': 'value 31', 'key32': 'value 32'}\n}\n</pre>\n<p>Fetch a single row data with selected columns (limit to <tt>column1</tt> and <tt>column2</tt> columns and all\ntheir qualifiers).</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'column1'</span><span class=\"p\">,</span> <span class=\"s1\">'column2'</span><span class=\"p\">])</span>\n</pre>\n<p>Output.</p>\n<pre>{\n    'column1': {'key11': 'value 11', 'key12': 'value 12', 'key13': 'value 13'},\n    'column2': {'key21': 'value 21', 'key22': 'value 22'},\n}\n</pre>\n<p>Narrow the result set even more (limit to qualifiers <tt>key1</tt> and <tt>key2</tt> of column <tt>column1</tt> and\nqualifier <tt>key32</tt> of column <tt>column3</tt>).</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'column1'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'key11'</span><span class=\"p\">,</span> <span class=\"s1\">'key13'</span><span class=\"p\">],</span> <span class=\"s1\">'column3'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'key32'</span><span class=\"p\">]})</span>\n</pre>\n<p>Output.</p>\n<pre>{\n    'column1': {'key11': 'value 11', 'key13': 'value 13'},\n    'column3': {'key32': 'value 32'}\n}\n</pre>\n<p>Note, that you may also use the <cite>native</cite> way of naming the columns and cells (qualifiers). Example\nbelow does exactly the same as example above.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'column1:key11'</span><span class=\"p\">,</span> <span class=\"s1\">'column1:key13'</span><span class=\"p\">,</span> <span class=\"s1\">'column3:key32'</span><span class=\"p\">])</span>\n</pre>\n<p>Output.</p>\n<pre>{\n    'column1': {'key11': 'value 11', 'key13': 'value 13'},\n    'column3': {'key32': 'value 32'}\n}\n</pre>\n<p>If you set the <cite>perfect_dict</cite> argument to False, you\u2019ll get the <cite>native</cite> data structure.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span>\n    <span class=\"s1\">'my-key-1'</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s1\">'column1:key11'</span><span class=\"p\">,</span> <span class=\"s1\">'column1:key13'</span><span class=\"p\">,</span> <span class=\"s1\">'column3:key32'</span><span class=\"p\">],</span>\n    <span class=\"n\">perfect_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>{\n    'column1:key11': 'value 11',\n    'column1:key13': 'value 13',\n    'column3:key32': 'value 32'\n}\n</pre>\n</div>\n</div>\n<div id=\"batch-operations-with-table-data\">\n<h3>Batch operations with table data</h3>\n<p>Batch operations (insert and update) work similar to normal insert and update, but are done in a batch.\nYou are advised to operate in batch as much as possible.</p>\n<div id=\"batch-insert\">\n<h4>Batch insert</h4>\n<p>In the example below, we will insert 5000 records in a batch.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'column1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key11'</span><span class=\"p\">:</span> <span class=\"s1\">'value 11'</span><span class=\"p\">,</span> <span class=\"s1\">'key12'</span><span class=\"p\">:</span> <span class=\"s1\">'value 12'</span><span class=\"p\">,</span> <span class=\"s1\">'key13'</span><span class=\"p\">:</span> <span class=\"s1\">'value 13'</span><span class=\"p\">},</span>\n    <span class=\"s1\">'column2'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key21'</span><span class=\"p\">:</span> <span class=\"s1\">'value 21'</span><span class=\"p\">,</span> <span class=\"s1\">'key22'</span><span class=\"p\">:</span> <span class=\"s1\">'value 22'</span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">):</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'my-key-</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">finalize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>{'method': 'PUT', 'response': [200], 'url': 'table3/bXkta2V5LTA='}\n</pre>\n</div>\n<div id=\"batch-update\">\n<h4>Batch update</h4>\n<p>In the example below, we will update 5000 records in a batch.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'column3'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key31'</span><span class=\"p\">:</span> <span class=\"s1\">'value 31'</span><span class=\"p\">,</span> <span class=\"s1\">'key32'</span><span class=\"p\">:</span> <span class=\"s1\">'value 32'</span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">):</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'my-key-</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">finalize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>{'method': 'POST', 'response': [200], 'url': 'table3/bXkta2V5LTA='}\n</pre>\n<p>Note: The table <cite>batch</cite> method accepts an optional <cite>size</cite> argument (int). If set, an auto-commit is fired\neach the time the stack is <tt>full</tt>.</p>\n</div>\n</div>\n<div id=\"table-data-search-row-scanning\">\n<h3>Table data search (row scanning)</h3>\n<p>Table scanning is in development (therefore, the scanning API will likely be changed). Result set returned is a\ngenerator.</p>\n<div id=\"fetch-all-rows\">\n<h4>Fetch all rows</h4>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch_all_rows</span><span class=\"p\">()</span>\n</pre>\n<p>Output.</p>\n<pre>&lt;generator object results at 0x28e9190&gt;\n</pre>\n</div>\n<div id=\"fetch-rows-with-a-filter-given\">\n<h4>Fetch rows with a filter given</h4>\n<pre><span class=\"n\">rf</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"type\": \"RowFilter\", \"op\": \"EQUAL\", \"comparator\": {\"type\": \"RegexStringComparator\", \"value\": \"^row_1.+\"}}'</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch_all_rows</span><span class=\"p\">(</span><span class=\"n\">with_row_id</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">filter_string</span><span class=\"o\">=</span><span class=\"n\">rf</span><span class=\"p\">)</span>\n</pre>\n<p>Output.</p>\n<pre>&lt;generator object results at 0x28e9190&gt;\n</pre>\n</div>\n</div>\n</div>\n<div id=\"more-information-on-table-operations\">\n<h2>More information on table operations</h2>\n<p>By default, prior further execution of the <cite>fetch</cite>, <cite>insert</cite>, <cite>update</cite>, <cite>remove</cite> (table row operations)\nmethods, it\u2019s being checked whether the table exists or not. That\u2019s safe, but comes in cost of an\nextra (light though) HTTP request. If you\u2019re absolutely sure you want to avoid those checks, you can\ndisable them. It\u2019s possible to disable each type of row operation, by setting the following properties\nof the table instance to False: <tt>check_if_exists_on_row_fetch</tt>, <tt>check_if_exists_on_row_insert</tt>,\n<tt>check_if_exists_on_row_remove</tt> and <tt>check_if_exists_on_row_update</tt>.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">check_if_exists_on_row_fetch</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'row1'</span><span class=\"p\">)</span>\n</pre>\n<p>It\u2019s also possible to disable\nthem all at once, by calling the <tt>disable_row_operation_if_exists_checks</tt> method of the table instance.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">disable_row_operation_if_exists_checks</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">'row1'</span><span class=\"p\">)</span>\n</pre>\n<p>Same goes for table scanner operations. Setting the value of <tt>check_if_exists_on_scanner_operations</tt>\nof a table instance to False, skips the checks for scanner operations.</p>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">check_if_exists_on_scanner_operations</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">fetch_all_rows</span><span class=\"p\">(</span><span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"exception-handling\">\n<h2>Exception handling</h2>\n<p>Methods that accept <cite>fail_silently</cite> argument are listed per class below.</p>\n<div id=\"starbase-client-connection-connection\">\n<h3>starbase.client.connection.Connection</h3>\n<ul>\n<li>cluster_version</li>\n<li>cluster_status</li>\n<li>drop_table</li>\n<li>tables</li>\n<li>table_exists</li>\n<li>version</li>\n</ul>\n</div>\n<div id=\"starbase-client-table-table\">\n<h3>starbase.client.table.Table</h3>\n<ul>\n<li>add_columns</li>\n<li>batch</li>\n<li>create</li>\n<li>drop</li>\n<li>drop_columns</li>\n<li>exists</li>\n<li>insert</li>\n<li>fetch</li>\n<li>fetch_all_rows</li>\n<li>regions</li>\n<li>remove</li>\n<li>schema</li>\n<li>update</li>\n</ul>\n</div>\n<div id=\"starbase-client-table-batch\">\n<h3>starbase.client.table.Batch</h3>\n<ul>\n<li>commit</li>\n<li>insert</li>\n<li>update</li>\n</ul>\n</div>\n<div id=\"starbase-client-transport-httprequest\">\n<h3>starbase.client.transport.HttpRequest</h3>\n<p>Class <cite>starbase.client.table.Batch</cite> accepts <cite>fail_silently</cite> as a constructor argument.</p>\n</div>\n</div>\n<div id=\"more-examples\">\n<h2>More examples</h2>\n<div id=\"show-software-version\">\n<h3>Show software version</h3>\n<pre><span class=\"nb\">print</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">version</span>\n</pre>\n<p>Output.</p>\n<pre>{u'JVM': u'Sun Microsystems Inc. 1.6.0_43-20.14-b01',\n u'Jersey': u'1.8',\n u'OS': u'Linux 3.5.0-30-generic amd64',\n u'REST': u'0.0.2',\n u'Server': u'jetty/6.1.26'}\n</pre>\n</div>\n<div id=\"show-cluster-version\">\n<h3>Show cluster version</h3>\n<pre><span class=\"nb\">print</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cluster_version</span>\n</pre>\n<p>Output.</p>\n<pre>u'0.94.7'\n</pre>\n</div>\n<div id=\"show-cluster-status\">\n<h3>Show cluster status</h3>\n<pre><span class=\"nb\">print</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cluster_status</span>\n</pre>\n<p>Output.</p>\n<pre>{u'DeadNodes': [],\n u'LiveNodes': [{u'Region': [{u'currentCompactedKVs': 0,\n ...\n u'regions': 3,\n u'requests': 0}\n</pre>\n</div>\n<div id=\"show-table-schema\">\n<h3>Show table schema</h3>\n<pre><span class=\"nb\">print</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">()</span>\n</pre>\n<p>Output.</p>\n<pre>{u'ColumnSchema': [{u'BLOCKCACHE': u'true',\n   u'BLOCKSIZE': u'65536',\n ...\n   u'IS_ROOT': u'false',\n u'name': u'messages'}\n</pre>\n</div>\n<div id=\"print-table-metadata\">\n<h3>Print table metadata</h3>\n<pre><span class=\"nb\">print</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">regions</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"failed-requests\">\n<h2>Failed requests</h2>\n<p>By default, number of retries for a failed request is equal to zero.\nThat means, the request isn\u2019t being repeated if failed. It\u2019s possible\nto retry a failed request (for instance, in case of timeouts, etc).</p>\n<p>In order to do that, two additional arguments of the\n<tt>starbase.client.connection.Connection</tt> have been introduced:</p>\n<ul>\n<li>retries (int)</li>\n<li>retry_delay (int)</li>\n</ul>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span>\n    <span class=\"n\">retries</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"c1\"># Retry 3 times</span>\n    <span class=\"n\">retry_delay</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"c1\"># Wait for 5 seconds between retries</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Beware! Number of retries can cause performance issues (lower\nresponsiveness) of your application. At the moment, failed requests,\nsuch as deletion of non-existing column, row or a table, are handled\nin the same way and would all cause a retry. This likely will change\nin future (smarter detection of failures worth to retry a request).</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>GPL 2.0/LGPL 2.1</p>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>For any issues contact me at the e-mail given in the <cite>Author</cite> section.</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Artur Barseghyan &lt;<a href=\"mailto:artur.barseghyan%40gmail.com\">artur<span>.</span>barseghyan<span>@</span>gmail<span>.</span>com</a>&gt;</p>\n</div>\n\n          </div>"}, "last_serial": 3472167, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cb0e7e2fff1e2904f0167fc8ef83b69e", "sha256": "b64e6a0e3fac91c1082fd97d0f59fae6fb624b354ffbefd74e9d84617638645b"}, "downloads": -1, "filename": "starbase-0.1.tar.gz", "has_sig": false, "md5_digest": "cb0e7e2fff1e2904f0167fc8ef83b69e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26414, "upload_time": "2013-08-12T23:08:58", "upload_time_iso_8601": "2013-08-12T23:08:58.044345Z", "url": "https://files.pythonhosted.org/packages/a8/b7/715e47c2474e9b511980275af89abddf3c4c71dcbf2bb9843d5354dceb71/starbase-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "05ed6f634bf82582d51a450288c571db", "sha256": "6985a2d90da3322d6e071aefe03ee1d93e2e1bfbec4d35075005f26aae4929c5"}, "downloads": -1, "filename": "starbase-0.2.tar.gz", "has_sig": false, "md5_digest": "05ed6f634bf82582d51a450288c571db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26852, "upload_time": "2013-09-14T10:35:50", "upload_time_iso_8601": "2013-09-14T10:35:50.933149Z", "url": "https://files.pythonhosted.org/packages/c6/05/8261e806e5b75f3a1573b262ce2ef5bc19084dda9b2e244a804630d9fd51/starbase-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3fd62a0b45b34f82d27bc55e69ede00d", "sha256": "7d20454fe29ad67a7d38aa207ef73e64ae1b03f3129724d701430cca7909cf7f"}, "downloads": -1, "filename": "starbase-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3fd62a0b45b34f82d27bc55e69ede00d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28740, "upload_time": "2013-10-18T09:52:04", "upload_time_iso_8601": "2013-10-18T09:52:04.367725Z", "url": "https://files.pythonhosted.org/packages/e5/3b/da08c989c17d9834f1121e069e82030ed75c63ea9a86f42be86d713aaf57/starbase-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "c17ea113c6e6c922b60c081d90db12bc", "sha256": "670ea679424aca8ae6b1893bf560b7d5fa9da29034dbecb62d7ed5277d174ae8"}, "downloads": -1, "filename": "starbase-0.2.2.tar.gz", "has_sig": false, "md5_digest": "c17ea113c6e6c922b60c081d90db12bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28906, "upload_time": "2013-10-26T12:10:06", "upload_time_iso_8601": "2013-10-26T12:10:06.276043Z", "url": "https://files.pythonhosted.org/packages/66/da/b5544cc1405f0e869ad7d2fdef81554417a29bcdd42c8c2775106bd2a51a/starbase-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "0b75b99f80d63b14746d030b66b0f0ef", "sha256": "e95c169f5771f400d5ae4ae33489453365c52df8add071b2bc30212cfe6a28e7"}, "downloads": -1, "filename": "starbase-0.2.3.tar.gz", "has_sig": false, "md5_digest": "0b75b99f80d63b14746d030b66b0f0ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28989, "upload_time": "2013-10-26T17:44:53", "upload_time_iso_8601": "2013-10-26T17:44:53.757648Z", "url": "https://files.pythonhosted.org/packages/88/21/b208170441ea53b6f691d5b9c0ecc06390941176baf80de7b0663078752d/starbase-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "b1e83bddf47cc1e3d5ec1dc3f3c0cc7f", "sha256": "7db28e4c5af187aefb2731b5560122bf754cfee97a52cdb879c80b19bf0b3654"}, "downloads": -1, "filename": "starbase-0.2.4.tar.gz", "has_sig": false, "md5_digest": "b1e83bddf47cc1e3d5ec1dc3f3c0cc7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28925, "upload_time": "2013-11-09T12:07:53", "upload_time_iso_8601": "2013-11-09T12:07:53.024172Z", "url": "https://files.pythonhosted.org/packages/11/23/965d7cd112fa752571be433eede38fa97e434b082f318b78a9d1a57364b2/starbase-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "b38a3a24142f4d57e78aca2253aa637d", "sha256": "b2c90937d3311b4590351976e02c22a04a91a85703daef8ea45834bdea3f0779"}, "downloads": -1, "filename": "starbase-0.2.5.tar.gz", "has_sig": false, "md5_digest": "b38a3a24142f4d57e78aca2253aa637d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49181, "upload_time": "2013-11-15T19:21:43", "upload_time_iso_8601": "2013-11-15T19:21:43.914640Z", "url": "https://files.pythonhosted.org/packages/29/34/44481032495aa5c1d64202b2e856f5db754f1214972ff8918d7cf7938de7/starbase-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "01803fce018d8e18282ba89bac3a477c", "sha256": "d5d5c4056921350f64394f3c616d52ae1b4e2827707fb0766f57594512693f71"}, "downloads": -1, "filename": "starbase-0.2.6.tar.gz", "has_sig": false, "md5_digest": "01803fce018d8e18282ba89bac3a477c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49420, "upload_time": "2013-12-05T17:53:08", "upload_time_iso_8601": "2013-12-05T17:53:08.179284Z", "url": "https://files.pythonhosted.org/packages/cf/2f/5d4f16cf58a837c7a92d612c74081387bccfa20fe6cec769b3f8ec0f95ba/starbase-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "aca8ac4acb6b7f2f162d4feb73da94d4", "sha256": "c0cb902506017548eb6c0f525cc74fe19b9dc37f1aa78625b21ada635d759876"}, "downloads": -1, "filename": "starbase-0.2.7.tar.gz", "has_sig": false, "md5_digest": "aca8ac4acb6b7f2f162d4feb73da94d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51529, "upload_time": "2013-12-16T20:55:49", "upload_time_iso_8601": "2013-12-16T20:55:49.149126Z", "url": "https://files.pythonhosted.org/packages/22/97/1999a75fd7c2a727f19fede2fd60bf21c7c9351f75c98899b094ca654ecf/starbase-0.2.7.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "e2864d94eb8e6a2e45de1caa14e583a1", "sha256": "18ef9ca475a1566d6656258abae6499645864e00c7371829b964da9ff377e9bd"}, "downloads": -1, "filename": "starbase-0.3.tar.gz", "has_sig": false, "md5_digest": "e2864d94eb8e6a2e45de1caa14e583a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53254, "upload_time": "2014-03-10T23:50:43", "upload_time_iso_8601": "2014-03-10T23:50:43.332241Z", "url": "https://files.pythonhosted.org/packages/50/ef/a3fb09730472ab7cb91fea78b237e4644f867bb51761fe0e3c2dc175d20b/starbase-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "fe7c8550b75c465c91b1a6540325c631", "sha256": "66a2bb18d8dd0f4225888c828e9a9d091b1c4694b1ba23a9c068072eb9fd79bd"}, "downloads": -1, "filename": "starbase-0.3.1.tar.gz", "has_sig": false, "md5_digest": "fe7c8550b75c465c91b1a6540325c631", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53785, "upload_time": "2014-06-05T20:50:45", "upload_time_iso_8601": "2014-06-05T20:50:45.403452Z", "url": "https://files.pythonhosted.org/packages/a1/ad/fe11607e089fb1e80195a894bcdcaba6a6799739c5f6481242941ffe8347/starbase-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "dfa3d92eeb75b59bc8dc19943a739f53", "sha256": "5c466a0958264f858002393f078605e82385f04b1b552d2840e352f0a1544fe1"}, "downloads": -1, "filename": "starbase-0.3.2.tar.gz", "has_sig": false, "md5_digest": "dfa3d92eeb75b59bc8dc19943a739f53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55606, "upload_time": "2014-09-09T22:55:43", "upload_time_iso_8601": "2014-09-09T22:55:43.271226Z", "url": "https://files.pythonhosted.org/packages/c4/80/548b93c6787d199935aeeeaf7ac426616b49f16665f1dc76240c61439d58/starbase-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "b92e5137c4604e6b008466f0536b1156", "sha256": "347a515798c29dacdb1b8012ee8f065223add2f90ad329e7fa897b5df9b21f28"}, "downloads": -1, "filename": "starbase-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b92e5137c4604e6b008466f0536b1156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51059, "upload_time": "2014-10-16T15:15:14", "upload_time_iso_8601": "2014-10-16T15:15:14.927827Z", "url": "https://files.pythonhosted.org/packages/34/b8/0a52074c4a7dcde4e8d39757d0bd8358e190821b021ffeb751e8edd0512a/starbase-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b92e5137c4604e6b008466f0536b1156", "sha256": "347a515798c29dacdb1b8012ee8f065223add2f90ad329e7fa897b5df9b21f28"}, "downloads": -1, "filename": "starbase-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b92e5137c4604e6b008466f0536b1156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51059, "upload_time": "2014-10-16T15:15:14", "upload_time_iso_8601": "2014-10-16T15:15:14.927827Z", "url": "https://files.pythonhosted.org/packages/34/b8/0a52074c4a7dcde4e8d39757d0bd8358e190821b021ffeb751e8edd0512a/starbase-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:41 2020"}