{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# scale-sdk\npython scale\n\n## Install\n\n```\npip install skt-scale\n```\n## Config set up\n\n```bash\n$ scalecli config set url http://0.0.0.0:13202\nUpdated config\n\n$ scalecli login\nEnter paas id: user_id\nEnter paas password:\nlogin success\n```\n\n## Usage\n\n### sdk\n\nsource.py\n```python\n# -*- coding: utf-8 -*-\n# pylint disable\n\nimport tensorflow as tf\n\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\n\ndef input_fn():\n    features = tf.data.Dataset.from_tensors([[1.0]]).repeat()\n    labels = tf.data.Dataset.from_tensors(1.0).repeat()\n    return tf.data.Dataset.zip((features, labels))\n\n\ndef model_fn(features, labels, mode, params):\n    layer = tf.layers.Dense(1)\n    logits = layer(features)\n    loss = tf.losses.mean_squared_error(\n        labels=labels, predictions=tf.reshape(logits, [])\n    )\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        step = tf.train.get_or_create_global_step()\n        train_op = tf.train.AdamOptimizer().minimize(loss, step)\n        return tf.estimator.EstimatorSpec(\n            mode=mode, loss=loss, train_op=train_op\n        )\n\n\ndef main():\n    estimator = tf.estimator.Estimator(model_fn=model_fn)\n    estimator.train(input_fn=input_fn, steps=1000)\n\n\nmain()\n```\n\ncpu_example.py\n```python\nimport os\nimport random\nimport string\nfrom scale import Client\n\n\ndef main():\n    client = Client()\n    random_job_name = \"\".join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(10)\n    )\n    image_name = \"scale/tensorflow:1.14-v1-py3\"\n    current_dir = os.path.dirname(os.path.realpath(__file__))\n    source_file = os.path.join(current_dir, \"source.py\")\n    client.create_job(\n        job_name=random_job_name, image_name=image_name, source_file=source_file\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\ngpu_example.py\n```python\nimport os\nimport random\nimport string\nfrom scale import Client\n\n\ndef main():\n    client = Client(\n        host=\"http://0.0.0.0:13202\", user_id=\"user\", token=\"secret_token\"\n    )\n    random_job_name = \"\".join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(10)\n    )\n    image_name = \"scale/tensorflow:1.14-v1-py3\"\n    current_dir = os.path.dirname(os.path.realpath(__file__))\n    source_file = os.path.join(current_dir, \"source.py\")\n    gpu_type = \"Tesla_P100-PCIE-16GB\"\n    client.create_job(\n        job_name=random_job_name,\n        image_name=image_name,\n        source_file=source_file,\n        gpu_type=gpu_type,\n        cpu=1,\n        mem=2,\n        gpu=1,\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nresult\n```bash\n$ python test.py\njob id:  78305d8f-06bd-495b-91fc-0f429a9f0dae\nwait for container to start\n[SYSTEM] Train start.\n[2020-03-05 07:32:05:1] WARNING: Logging before flag parsing goes to stderr.\n[2020-03-05 07:32:05:2] W0305 07:32:00.048396 139884626732864 deprecation_wrapper.py:119] From app.py:7: The name tf.logging.set_verbosity is deprecated. Please use tf.compat.v1.logging.set_verbosity instead.\n[2020-03-05 07:32:05:3] \n[2020-03-05 07:32:05:4] W0305 07:32:00.048584 139884626732864 deprecation_wrapper.py:119] From app.py:7: The name tf.logging.INFO is deprecated. Please use tf.compat.v1.logging.INFO instead.\n[2020-03-05 07:32:05:5] \n[2020-03-05 07:32:05:6] I0305 07:32:00.048879 139884626732864 estimator.py:1790] Using default config.\n[2020-03-05 07:32:05:7] W0305 07:32:00.049320 139884626732864 estimator.py:1811] Using temporary folder as model directory: /tmp/tmpoliwaf9g\n[2020-03-05 07:32:05:8] I0305 07:32:00.049926 139884626732864 estimator.py:209] Using config: {'_model_dir': '/tmp/tmpoliwaf9g', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n[2020-03-05 07:32:05:9] graph_options {\n[2020-03-05 07:32:05:10]   rewrite_options {\n[2020-03-05 07:32:05:11]     meta_optimizer_iterations: ONE\n[2020-03-05 07:32:05:12]   }\n[2020-03-05 07:32:05:13] }\n[2020-03-05 07:32:05:14] , '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x7f3947dc7cc0>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n[2020-03-05 07:32:05:15] W0305 07:32:00.050079 139884626732864 model_fn.py:630] Estimator's model_fn (<function model_fn at 0x7f3947e21d90>) includes params argument, but params are not passed to Estimator.\n[2020-03-05 07:32:05:16] W0305 07:32:00.068118 139884626732864 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/training_util.py:236: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\n[2020-03-05 07:32:05:17] Instructions for updating:\n[2020-03-05 07:32:05:18] Use Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.\n[2020-03-05 07:32:05:19] I0305 07:32:00.129392 139884626732864 estimator.py:1145] Calling model_fn.\n[2020-03-05 07:32:05:20] W0305 07:32:00.129571 139884626732864 deprecation_wrapper.py:119] From app.py:17: The name tf.layers.Dense is deprecated. Please use tf.compat.v1.layers.Dense instead.\n[2020-03-05 07:32:05:21] \n[2020-03-05 07:32:05:22] W0305 07:32:00.131662 139884626732864 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n[2020-03-05 07:32:05:23] Instructions for updating:\n[2020-03-05 07:32:05:24] Call initializer instance with the dtype argument instead of passing it to the constructor\n[2020-03-05 07:32:05:25] W0305 07:32:00.662171 139884626732864 deprecation_wrapper.py:119] From app.py:19: The name tf.losses.mean_squared_error is deprecated. Please use tf.compat.v1.losses.mean_squared_error instead.\n[2020-03-05 07:32:05:26] \n[2020-03-05 07:32:05:27] W0305 07:32:00.675267 139884626732864 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/losses/losses_impl.py:121: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n[2020-03-05 07:32:05:28] Instructions for updating:\n[2020-03-05 07:32:05:29] Use tf.where in 2.0, which has the same broadcast rule as np.where\n[2020-03-05 07:32:05:30] W0305 07:32:00.679626 139884626732864 deprecation_wrapper.py:119] From app.py:23: The name tf.train.get_or_create_global_step is deprecated. Please use tf.compat.v1.train.get_or_create_global_step instead.\n[2020-03-05 07:32:05:31] \n[2020-03-05 07:32:05:32] W0305 07:32:00.679796 139884626732864 deprecation_wrapper.py:119] From app.py:24: The name tf.train.AdamOptimizer is deprecated. Please use tf.compat.v1.train.AdamOptimizer instead.\n[2020-03-05 07:32:05:33] \n[2020-03-05 07:32:05:34] I0305 07:32:00.886904 139884626732864 estimator.py:1147] Done calling model_fn.\n[2020-03-05 07:32:05:35] I0305 07:32:00.888659 139884626732864 basic_session_run_hooks.py:541] Create CheckpointSaverHook.\n[2020-03-05 07:32:05:36] I0305 07:32:01.269991 139884626732864 monitored_session.py:240] Graph was finalized.\n[2020-03-05 07:32:05:37] 2020-03-05 07:32:01.270457: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n[2020-03-05 07:32:05:38] 2020-03-05 07:32:01.286304: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcuda.so.1\n[2020-03-05 07:32:05:39] 2020-03-05 07:32:01.290929: E tensorflow/stream_executor/cuda/cuda_driver.cc:318] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected\n[2020-03-05 07:32:05:40] 2020-03-05 07:32:01.290978: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:163] no NVIDIA GPU device is present: /dev/nvidia0 does not exist\n[2020-03-05 07:32:05:41] 2020-03-05 07:32:01.348206: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2599925000 Hz\n[2020-03-05 07:32:05:42] 2020-03-05 07:32:01.353221: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x227ec10 executing computations on platform Host. Devices:\n[2020-03-05 07:32:05:43] 2020-03-05 07:32:01.353270: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): <undefined>, <undefined>\n[2020-03-05 07:32:05:44] 2020-03-05 07:32:01.448839: W tensorflow/compiler/jit/mark_for_compilation_pass.cc:1412] (One-time warning): Not using XLA:CPU for cluster because envvar TF_XLA_FLAGS=--tf_xla_cpu_global_jit was not set.  If you want XLA:CPU, either set that envvar, or use experimental_jit_scope to enable XLA:CPU.  To confirm that XLA is active, pass --vmodule=xla_compilation_cache=1 (as a proper command-line flag, not via TF_XLA_FLAGS) or set the envvar XLA_FLAGS=--xla_hlo_profile.\n[2020-03-05 07:32:05:45] I0305 07:32:01.471862 139884626732864 session_manager.py:500] Running local_init_op.\n[2020-03-05 07:32:05:46] I0305 07:32:01.475904 139884626732864 session_manager.py:502] Done running local_init_op.\n[2020-03-05 07:32:05:47] I0305 07:32:01.870096 139884626732864 basic_session_run_hooks.py:606] Saving checkpoints for 0 into /tmp/tmpoliwaf9g/model.ckpt.\n[2020-03-05 07:32:05:48] I0305 07:32:02.093250 139884626732864 basic_session_run_hooks.py:262] loss = 0.000752323, step = 1\n[2020-03-05 07:32:05:49] I0305 07:32:02.268341 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 569.372\n[2020-03-05 07:32:05:50] I0305 07:32:02.269199 139884626732864 basic_session_run_hooks.py:260] loss = 2.3888447e-11, step = 101 (0.176 sec)\n[2020-03-05 07:32:05:51] I0305 07:32:02.458733 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 524.98\n[2020-03-05 07:32:05:52] I0305 07:32:02.459607 139884626732864 basic_session_run_hooks.py:260] loss = 2.877698e-13, step = 201 (0.190 sec)\n[2020-03-05 07:32:05:53] I0305 07:32:02.648005 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 529.569\n[2020-03-05 07:32:05:54] I0305 07:32:02.649275 139884626732864 basic_session_run_hooks.py:260] loss = 0.0, step = 301 (0.190 sec)\n[2020-03-05 07:32:05:55] I0305 07:32:02.774062 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 791.023\n[2020-03-05 07:32:05:56] I0305 07:32:02.774733 139884626732864 basic_session_run_hooks.py:260] loss = 0.0, step = 401 (0.125 sec)\n[2020-03-05 07:32:05:57] I0305 07:32:02.866282 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 1082.71\n[2020-03-05 07:32:05:58] I0305 07:32:02.866768 139884626732864 basic_session_run_hooks.py:260] loss = 0.0, step = 501 (0.092 sec)\n[2020-03-05 07:32:05:59] I0305 07:32:02.965521 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 1008.81\n[2020-03-05 07:32:05:60] I0305 07:32:02.966336 139884626732864 basic_session_run_hooks.py:260] loss = 0.0, step = 601 (0.100 sec)\n[2020-03-05 07:32:05:61] I0305 07:32:03.069179 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 963.884\n[2020-03-05 07:32:05:62] I0305 07:32:03.069773 139884626732864 basic_session_run_hooks.py:260] loss = 0.0, step = 701 (0.103 sec)\n[2020-03-05 07:32:05:63] I0305 07:32:03.154792 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 1168.15\n[2020-03-05 07:32:05:64] I0305 07:32:03.155704 139884626732864 basic_session_run_hooks.py:260] loss = 0.0, step = 801 (0.086 sec)\n[2020-03-05 07:32:05:65] I0305 07:32:03.266279 139884626732864 basic_session_run_hooks.py:692] global_step/sec: 897.621\n[2020-03-05 07:32:05:66] I0305 07:32:03.267081 139884626732864 basic_session_run_hooks.py:260] loss = 0.0, step = 901 (0.111 sec)\n[2020-03-05 07:32:05:67] I0305 07:32:03.354782 139884626732864 basic_session_run_hooks.py:606] Saving checkpoints for 1000 into /tmp/tmpoliwaf9g/model.ckpt.\n[2020-03-05 07:32:05:68] I0305 07:32:03.395870 139884626732864 estimator.py:368] Loss for final step: 0.0.\n[SYSTEM] Train completed.\n```\n\n### cli\n\n```bash\nscale create_job \\\n --job_name=$RANDOM \\\n --image_name=scale/tensorflow:1.14-v1-py3 \\\n --source_file=./sample.py \\\n --gpu_type=Tesla_P100-PCIE-16GB \\\n --mem=2 \\\n --gpu=1 \\\n --cpu=1\njob id:  43f7854d-fb58-42c3-b544-9c624a5ffdd9\nwait for container to start\nSYSTEM] Train start.\n[2020-03-05 07:27:13:1] WARNING: Logging before flag parsing goes to stderr.\n[2020-03-05 07:27:13:2] W0305 07:27:06.527273 139771468314432 deprecation_wrapper.py:119] From app.py:7: The name tf.logging.set_verbosity is deprecated. Please use tf.compat.v1.logging.set_verbosity instead.\n[2020-03-05 07:27:13:3] \n[2020-03-05 07:27:13:4] W0305 07:27:06.527491 139771468314432 deprecation_wrapper.py:119] From app.py:7: The name tf.logging.INFO is deprecated. Please use tf.compat.v1.logging.INFO instead.\n[2020-03-05 07:27:13:5] \n[2020-03-05 07:27:13:6] I0305 07:27:06.527805 139771468314432 estimator.py:1790] Using default config.\n[2020-03-05 07:27:13:7] W0305 07:27:06.528320 139771468314432 estimator.py:1811] Using temporary folder as model directory: /tmp/tmpkaaysn7y\n[2020-03-05 07:27:13:8] I0305 07:27:06.528981 139771468314432 estimator.py:209] Using config: {'_model_dir': '/tmp/tmpkaaysn7y', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n[2020-03-05 07:27:13:9] graph_options {\n[2020-03-05 07:27:13:10]   rewrite_options {\n[2020-03-05 07:27:13:11]     meta_optimizer_iterations: ONE\n[2020-03-05 07:27:13:12]   }\n[2020-03-05 07:27:13:13] }\n[2020-03-05 07:27:13:14] , '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x7f1f0328db00>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n[2020-03-05 07:27:13:15] W0305 07:27:06.529155 139771468314432 model_fn.py:630] Estimator's model_fn (<function model_fn at 0x7f1f032e4d90>) includes params argument, but params are not passed to Estimator.\n[2020-03-05 07:27:13:16] W0305 07:27:06.558148 139771468314432 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/training_util.py:236: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\n[2020-03-05 07:27:13:17] Instructions for updating:\n[2020-03-05 07:27:13:18] Use Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.\n[2020-03-05 07:27:13:19] I0305 07:27:06.628736 139771468314432 estimator.py:1145] Calling model_fn.\n[2020-03-05 07:27:13:20] W0305 07:27:06.628922 139771468314432 deprecation_wrapper.py:119] From app.py:17: The name tf.layers.Dense is deprecated. Please use tf.compat.v1.layers.Dense instead.\n[2020-03-05 07:27:13:21] \n[2020-03-05 07:27:13:22] W0305 07:27:06.630848 139771468314432 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n[2020-03-05 07:27:13:23] Instructions for updating:\n[2020-03-05 07:27:13:24] Call initializer instance with the dtype argument instead of passing it to the constructor\n[2020-03-05 07:27:13:25] W0305 07:27:07.550607 139771468314432 deprecation_wrapper.py:119] From app.py:19: The name tf.losses.mean_squared_error is deprecated. Please use tf.compat.v1.losses.mean_squared_error instead.\n[2020-03-05 07:27:13:26] \n[2020-03-05 07:27:13:27] W0305 07:27:07.573339 139771468314432 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/losses/losses_impl.py:121: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n[2020-03-05 07:27:13:28] Instructions for updating:\n[2020-03-05 07:27:13:29] Use tf.where in 2.0, which has the same broadcast rule as np.where\n[2020-03-05 07:27:13:30] W0305 07:27:07.580497 139771468314432 deprecation_wrapper.py:119] From app.py:23: The name tf.train.get_or_create_global_step is deprecated. Please use tf.compat.v1.train.get_or_create_global_step instead.\n[2020-03-05 07:27:13:31] \n[2020-03-05 07:27:13:32] W0305 07:27:07.580755 139771468314432 deprecation_wrapper.py:119] From app.py:24: The name tf.train.AdamOptimizer is deprecated. Please use tf.compat.v1.train.AdamOptimizer instead.\n[2020-03-05 07:27:13:33] \n[2020-03-05 07:27:13:34] I0305 07:27:07.863347 139771468314432 estimator.py:1147] Done calling model_fn.\n[2020-03-05 07:27:13:35] I0305 07:27:07.865198 139771468314432 basic_session_run_hooks.py:541] Create CheckpointSaverHook.\n[2020-03-05 07:27:13:36] I0305 07:27:08.189621 139771468314432 monitored_session.py:240] Graph was finalized.\n[2020-03-05 07:27:13:37] 2020-03-05 07:27:08.190115: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n[2020-03-05 07:27:13:38] 2020-03-05 07:27:08.258076: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcuda.so.1\n[2020-03-05 07:27:13:39] 2020-03-05 07:27:08.554655: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x3a1f340 executing computations on platform CUDA. Devices:\n[2020-03-05 07:27:13:40] 2020-03-05 07:27:08.554703: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n[2020-03-05 07:27:13:41] 2020-03-05 07:27:08.559790: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2599925000 Hz\n[2020-03-05 07:27:13:42] 2020-03-05 07:27:08.565466: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x50b3880 executing computations on platform Host. Devices:\n[2020-03-05 07:27:13:43] 2020-03-05 07:27:08.565508: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): <undefined>, <undefined>\n[2020-03-05 07:27:13:44] 2020-03-05 07:27:08.568802: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1640] Found device 0 with properties:\n[2020-03-05 07:27:13:45] name: Tesla P100-PCIE-16GB major: 6 minor: 0 memoryClockRate(GHz): 1.3285\n[2020-03-05 07:27:13:46] pciBusID: 0000:83:00.0\n[2020-03-05 07:27:13:47] 2020-03-05 07:27:08.569401: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudart.so.10.0\n[2020-03-05 07:27:13:48] 2020-03-05 07:27:08.572929: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcublas.so.10.0\n[2020-03-05 07:27:13:49] 2020-03-05 07:27:08.575969: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcufft.so.10.0\n[2020-03-05 07:27:13:50] 2020-03-05 07:27:08.576603: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcurand.so.10.0\n[2020-03-05 07:27:13:51] 2020-03-05 07:27:08.580630: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcusolver.so.10.0\n[2020-03-05 07:27:13:52] 2020-03-05 07:27:08.583665: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcusparse.so.10.0\n[2020-03-05 07:27:13:53] 2020-03-05 07:27:08.591141: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudnn.so.7\n[2020-03-05 07:27:13:54] 2020-03-05 07:27:08.595661: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1763] Adding visible gpu devices: 0\n[2020-03-05 07:27:13:55] 2020-03-05 07:27:08.595717: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudart.so.10.0\n[2020-03-05 07:27:13:56] 2020-03-05 07:27:08.598404: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1181] Device interconnect StreamExecutor with strength 1 edge matrix:\n[2020-03-05 07:27:13:57] 2020-03-05 07:27:08.598433: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1187]      0\n[2020-03-05 07:27:13:58] 2020-03-05 07:27:08.598454: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200] 0:   N\n[2020-03-05 07:27:13:59] 2020-03-05 07:27:08.602791: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 15216 MB memory) -> physical GPU (device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:83:00.0, compute capability: 6.0)\n[2020-03-05 07:27:13:60] 2020-03-05 07:27:09.446952: W tensorflow/compiler/jit/mark_for_compilation_pass.cc:1412] (One-time warning): Not using XLA:CPU for cluster because envvar TF_XLA_FLAGS=--tf_xla_cpu_global_jit was not set.  If you want XLA:CPU, either set that envvar, or use experimental_jit_scope to enable XLA:CPU.  To confirm that XLA is active, pass --vmodule=xla_compilation_cache=1 (as a proper command-line flag, not via TF_XLA_FLAGS) or set the envvar XLA_FLAGS=--xla_hlo_profile.\n[2020-03-05 07:27:13:61] I0305 07:27:09.449524 139771468314432 session_manager.py:500] Running local_init_op.\n[2020-03-05 07:27:13:62] I0305 07:27:09.453503 139771468314432 session_manager.py:502] Done running local_init_op.\n[2020-03-05 07:27:13:63] I0305 07:27:09.566854 139771468314432 basic_session_run_hooks.py:606] Saving checkpoints for 0 into /tmp/tmpkaaysn7y/model.ckpt.\n[2020-03-05 07:27:13:64] 2020-03-05 07:27:09.657372: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcublas.so.10.0\n[2020-03-05 07:27:13:65] I0305 07:27:09.957408 139771468314432 basic_session_run_hooks.py:262] loss = 3.136012, step = 0\n[2020-03-05 07:27:13:66] I0305 07:27:10.459863 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 198.666\n[2020-03-05 07:27:13:67] I0305 07:27:10.461008 139771468314432 basic_session_run_hooks.py:260] loss = 2.4800994, step = 100 (0.504 sec)\n[2020-03-05 07:27:13:68] I0305 07:27:10.877429 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 239.453\n[2020-03-05 07:27:13:69] I0305 07:27:10.878589 139771468314432 basic_session_run_hooks.py:260] loss = 1.9325358, step = 200 (0.418 sec)\n[2020-03-05 07:27:13:70] I0305 07:27:11.364231 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 205.424\n[2020-03-05 07:27:13:71] I0305 07:27:11.365450 139771468314432 basic_session_run_hooks.py:260] loss = 1.4822296, step = 300 (0.487 sec)\n[2020-03-05 07:27:13:72] I0305 07:27:11.856773 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 203.032\n[2020-03-05 07:27:13:73] I0305 07:27:11.858273 139771468314432 basic_session_run_hooks.py:260] loss = 1.1173365, step = 400 (0.493 sec)\n[2020-03-05 07:27:13:74] I0305 07:27:12.346587 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 204.159\n[2020-03-05 07:27:13:75] I0305 07:27:12.347812 139771468314432 basic_session_run_hooks.py:260] loss = 0.82648915, step = 500 (0.490 sec)\n[2020-03-05 07:27:13:76] I0305 07:27:12.777956 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 231.805\n[2020-03-05 07:27:13:77] I0305 07:27:12.779240 139771468314432 basic_session_run_hooks.py:260] loss = 0.59887236, step = 600 (0.431 sec)\n[2020-03-05 07:27:13:78] I0305 07:27:13.067498 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 345.287\n[2020-03-05 07:27:13:79] I0305 07:27:13.068227 139771468314432 basic_session_run_hooks.py:260] loss = 0.42432293, step = 700 (0.289 sec)\n[2020-03-05 07:27:13:80] I0305 07:27:13.468511 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 249.398\n[2020-03-05 07:27:13:81] I0305 07:27:13.469309 139771468314432 basic_session_run_hooks.py:260] loss = 0.29343566, step = 800 (0.401 sec)\n[2020-03-05 07:27:13:82] I0305 07:27:13.955026 139771468314432 basic_session_run_hooks.py:692] global_step/sec: 205.564\n[2020-03-05 07:27:13:83] I0305 07:27:13.956063 139771468314432 basic_session_run_hooks.py:260] loss = 0.19767413, step = 900 (0.487 sec)\n[2020-03-05 07:27:14:84] I0305 07:27:14.172374 139771468314432 basic_session_run_hooks.py:606] Saving checkpoints for 1000 into /tmp/tmpkaaysn7y/model.ckpt.\n[2020-03-05 07:27:14:85] I0305 07:27:14.248917 139771468314432 estimator.py:368] Loss for final step: 0.13003506.\n[SYSTEM] Train completed.\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "skt-scale", "package_url": "https://pypi.org/project/skt-scale/", "platform": "", "project_url": "https://pypi.org/project/skt-scale/", "project_urls": null, "release_url": "https://pypi.org/project/skt-scale/1.0.0/", "requires_dist": ["fire", "requests", "redis", "enum34 ; python_version<'3'", "pylint ; extra == 'test'", "pytest ; extra == 'test'", "pytest-mock ; extra == 'test'", "responses ; extra == 'test'"], "requires_python": "", "summary": "", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>scale-sdk</h1>\n<p>python scale</p>\n<h2>Install</h2>\n<pre><code>pip install skt-scale\n</code></pre>\n<h2>Config set up</h2>\n<pre>$ scalecli config <span class=\"nb\">set</span> url http://0.0.0.0:13202\nUpdated config\n\n$ scalecli login\nEnter paas id: user_id\nEnter paas password:\nlogin success\n</pre>\n<h2>Usage</h2>\n<h3>sdk</h3>\n<p>source.py</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"c1\"># pylint disable</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n\n<span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">set_verbosity</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">input_fn</span><span class=\"p\">():</span>\n    <span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">from_tensors</span><span class=\"p\">([[</span><span class=\"mf\">1.0</span><span class=\"p\">]])</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">()</span>\n    <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">from_tensors</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">((</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">model_fn</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">):</span>\n    <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">logits</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">)</span>\n    <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">losses</span><span class=\"o\">.</span><span class=\"n\">mean_squared_error</span><span class=\"p\">(</span>\n        <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">logits</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">ModeKeys</span><span class=\"o\">.</span><span class=\"n\">TRAIN</span><span class=\"p\">:</span>\n        <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">get_or_create_global_step</span><span class=\"p\">()</span>\n        <span class=\"n\">train_op</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">AdamOptimizer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">minimize</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">EstimatorSpec</span><span class=\"p\">(</span>\n            <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"n\">loss</span><span class=\"p\">,</span> <span class=\"n\">train_op</span><span class=\"o\">=</span><span class=\"n\">train_op</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">Estimator</span><span class=\"p\">(</span><span class=\"n\">model_fn</span><span class=\"o\">=</span><span class=\"n\">model_fn</span><span class=\"p\">)</span>\n    <span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">input_fn</span><span class=\"o\">=</span><span class=\"n\">input_fn</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>cpu_example.py</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scale</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n    <span class=\"n\">random_job_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n        <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_letters</span> <span class=\"o\">+</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">image_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"scale/tensorflow:1.14-v1-py3\"</span>\n    <span class=\"n\">current_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n    <span class=\"n\">source_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">current_dir</span><span class=\"p\">,</span> <span class=\"s2\">\"source.py\"</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_job</span><span class=\"p\">(</span>\n        <span class=\"n\">job_name</span><span class=\"o\">=</span><span class=\"n\">random_job_name</span><span class=\"p\">,</span> <span class=\"n\">image_name</span><span class=\"o\">=</span><span class=\"n\">image_name</span><span class=\"p\">,</span> <span class=\"n\">source_file</span><span class=\"o\">=</span><span class=\"n\">source_file</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>gpu_example.py</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scale</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"http://0.0.0.0:13202\"</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"secret_token\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">random_job_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n        <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_letters</span> <span class=\"o\">+</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">image_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"scale/tensorflow:1.14-v1-py3\"</span>\n    <span class=\"n\">current_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n    <span class=\"n\">source_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">current_dir</span><span class=\"p\">,</span> <span class=\"s2\">\"source.py\"</span><span class=\"p\">)</span>\n    <span class=\"n\">gpu_type</span> <span class=\"o\">=</span> <span class=\"s2\">\"Tesla_P100-PCIE-16GB\"</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_job</span><span class=\"p\">(</span>\n        <span class=\"n\">job_name</span><span class=\"o\">=</span><span class=\"n\">random_job_name</span><span class=\"p\">,</span>\n        <span class=\"n\">image_name</span><span class=\"o\">=</span><span class=\"n\">image_name</span><span class=\"p\">,</span>\n        <span class=\"n\">source_file</span><span class=\"o\">=</span><span class=\"n\">source_file</span><span class=\"p\">,</span>\n        <span class=\"n\">gpu_type</span><span class=\"o\">=</span><span class=\"n\">gpu_type</span><span class=\"p\">,</span>\n        <span class=\"n\">cpu</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">gpu</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>result</p>\n<pre>$ python test.py\njob id:  78305d8f-06bd-495b-91fc-0f429a9f0dae\n<span class=\"nb\">wait</span> <span class=\"k\">for</span> container to start\n<span class=\"o\">[</span>SYSTEM<span class=\"o\">]</span> Train start.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:1<span class=\"o\">]</span> WARNING: Logging before flag parsing goes to stderr.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:2<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.048396 <span class=\"m\">139884626732864</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:7: The name tf.logging.set_verbosity is deprecated. Please use tf.compat.v1.logging.set_verbosity instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:3<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:4<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.048584 <span class=\"m\">139884626732864</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:7: The name tf.logging.INFO is deprecated. Please use tf.compat.v1.logging.INFO instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:5<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:6<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:00.048879 <span class=\"m\">139884626732864</span> estimator.py:1790<span class=\"o\">]</span> Using default config.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:7<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.049320 <span class=\"m\">139884626732864</span> estimator.py:1811<span class=\"o\">]</span> Using temporary folder as model directory: /tmp/tmpoliwaf9g\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:8<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:00.049926 <span class=\"m\">139884626732864</span> estimator.py:209<span class=\"o\">]</span> Using config: <span class=\"o\">{</span><span class=\"s1\">'_model_dir'</span>: <span class=\"s1\">'/tmp/tmpoliwaf9g'</span>, <span class=\"s1\">'_tf_random_seed'</span>: None, <span class=\"s1\">'_save_summary_steps'</span>: <span class=\"m\">100</span>, <span class=\"s1\">'_save_checkpoints_steps'</span>: None, <span class=\"s1\">'_save_checkpoints_secs'</span>: <span class=\"m\">600</span>, <span class=\"s1\">'_session_config'</span>: allow_soft_placement: <span class=\"nb\">true</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:9<span class=\"o\">]</span> graph_options <span class=\"o\">{</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:10<span class=\"o\">]</span>   rewrite_options <span class=\"o\">{</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:11<span class=\"o\">]</span>     meta_optimizer_iterations: ONE\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:12<span class=\"o\">]</span>   <span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:13<span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:14<span class=\"o\">]</span> , <span class=\"s1\">'_keep_checkpoint_max'</span>: <span class=\"m\">5</span>, <span class=\"s1\">'_keep_checkpoint_every_n_hours'</span>: <span class=\"m\">10000</span>, <span class=\"s1\">'_log_step_count_steps'</span>: <span class=\"m\">100</span>, <span class=\"s1\">'_train_distribute'</span>: None, <span class=\"s1\">'_device_fn'</span>: None, <span class=\"s1\">'_protocol'</span>: None, <span class=\"s1\">'_eval_distribute'</span>: None, <span class=\"s1\">'_experimental_distribute'</span>: None, <span class=\"s1\">'_experimental_max_worker_delay_secs'</span>: None, <span class=\"s1\">'_service'</span>: None, <span class=\"s1\">'_cluster_spec'</span>: &lt;tensorflow.python.training.server_lib.ClusterSpec object at 0x7f3947dc7cc0&gt;, <span class=\"s1\">'_task_type'</span>: <span class=\"s1\">'worker'</span>, <span class=\"s1\">'_task_id'</span>: <span class=\"m\">0</span>, <span class=\"s1\">'_global_id_in_cluster'</span>: <span class=\"m\">0</span>, <span class=\"s1\">'_master'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'_evaluation_master'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'_is_chief'</span>: True, <span class=\"s1\">'_num_ps_replicas'</span>: <span class=\"m\">0</span>, <span class=\"s1\">'_num_worker_replicas'</span>: <span class=\"m\">1</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:15<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.050079 <span class=\"m\">139884626732864</span> model_fn.py:630<span class=\"o\">]</span> Estimator<span class=\"err\">'</span>s model_fn <span class=\"o\">(</span>&lt;<span class=\"k\">function</span> model_fn at 0x7f3947e21d90&gt;<span class=\"o\">)</span> includes params argument, but params are not passed to Estimator.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:16<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.068118 <span class=\"m\">139884626732864</span> deprecation.py:323<span class=\"o\">]</span> From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/training_util.py:236: Variable.initialized_value <span class=\"o\">(</span>from tensorflow.python.ops.variables<span class=\"o\">)</span> is deprecated and will be removed in a future version.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:17<span class=\"o\">]</span> Instructions <span class=\"k\">for</span> updating:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:18<span class=\"o\">]</span> Use Variable.read_value. Variables in <span class=\"m\">2</span>.X are initialized automatically both in eager and graph <span class=\"o\">(</span>inside tf.defun<span class=\"o\">)</span> contexts.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:19<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:00.129392 <span class=\"m\">139884626732864</span> estimator.py:1145<span class=\"o\">]</span> Calling model_fn.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:20<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.129571 <span class=\"m\">139884626732864</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:17: The name tf.layers.Dense is deprecated. Please use tf.compat.v1.layers.Dense instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:21<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:22<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.131662 <span class=\"m\">139884626732864</span> deprecation.py:506<span class=\"o\">]</span> From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ <span class=\"o\">(</span>from tensorflow.python.ops.init_ops<span class=\"o\">)</span> with dtype is deprecated and will be removed in a future version.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:23<span class=\"o\">]</span> Instructions <span class=\"k\">for</span> updating:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:24<span class=\"o\">]</span> Call initializer instance with the dtype argument instead of passing it to the constructor\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:25<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.662171 <span class=\"m\">139884626732864</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:19: The name tf.losses.mean_squared_error is deprecated. Please use tf.compat.v1.losses.mean_squared_error instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:26<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:27<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.675267 <span class=\"m\">139884626732864</span> deprecation.py:323<span class=\"o\">]</span> From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/losses/losses_impl.py:121: add_dispatch_support.&lt;locals&gt;.wrapper <span class=\"o\">(</span>from tensorflow.python.ops.array_ops<span class=\"o\">)</span> is deprecated and will be removed in a future version.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:28<span class=\"o\">]</span> Instructions <span class=\"k\">for</span> updating:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:29<span class=\"o\">]</span> Use tf.where in <span class=\"m\">2</span>.0, which has the same broadcast rule as np.where\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:30<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.679626 <span class=\"m\">139884626732864</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:23: The name tf.train.get_or_create_global_step is deprecated. Please use tf.compat.v1.train.get_or_create_global_step instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:31<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:32<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:32:00.679796 <span class=\"m\">139884626732864</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:24: The name tf.train.AdamOptimizer is deprecated. Please use tf.compat.v1.train.AdamOptimizer instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:33<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:34<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:00.886904 <span class=\"m\">139884626732864</span> estimator.py:1147<span class=\"o\">]</span> Done calling model_fn.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:35<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:00.888659 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:541<span class=\"o\">]</span> Create CheckpointSaverHook.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:36<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:01.269991 <span class=\"m\">139884626732864</span> monitored_session.py:240<span class=\"o\">]</span> Graph was finalized.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:37<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:01.270457: I tensorflow/core/platform/cpu_feature_guard.cc:142<span class=\"o\">]</span> Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:38<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:01.286304: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcuda.so.1\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:39<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:01.290929: E tensorflow/stream_executor/cuda/cuda_driver.cc:318<span class=\"o\">]</span> failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:40<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:01.290978: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:163<span class=\"o\">]</span> no NVIDIA GPU device is present: /dev/nvidia0 does not exist\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:41<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:01.348206: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94<span class=\"o\">]</span> CPU Frequency: <span class=\"m\">2599925000</span> Hz\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:42<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:01.353221: I tensorflow/compiler/xla/service/service.cc:168<span class=\"o\">]</span> XLA service 0x227ec10 executing computations on platform Host. Devices:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:43<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:01.353270: I tensorflow/compiler/xla/service/service.cc:175<span class=\"o\">]</span>   StreamExecutor device <span class=\"o\">(</span><span class=\"m\">0</span><span class=\"o\">)</span>: &lt;undefined&gt;, &lt;undefined&gt;\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:44<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:01.448839: W tensorflow/compiler/jit/mark_for_compilation_pass.cc:1412<span class=\"o\">]</span> <span class=\"o\">(</span>One-time warning<span class=\"o\">)</span>: Not using XLA:CPU <span class=\"k\">for</span> cluster because envvar <span class=\"nv\">TF_XLA_FLAGS</span><span class=\"o\">=</span>--tf_xla_cpu_global_jit was not set.  If you want XLA:CPU, either <span class=\"nb\">set</span> that envvar, or use experimental_jit_scope to <span class=\"nb\">enable</span> XLA:CPU.  To confirm that XLA is active, pass --vmodule<span class=\"o\">=</span><span class=\"nv\">xla_compilation_cache</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"o\">(</span>as a proper command-line flag, not via TF_XLA_FLAGS<span class=\"o\">)</span> or <span class=\"nb\">set</span> the envvar <span class=\"nv\">XLA_FLAGS</span><span class=\"o\">=</span>--xla_hlo_profile.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:45<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:01.471862 <span class=\"m\">139884626732864</span> session_manager.py:500<span class=\"o\">]</span> Running local_init_op.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:46<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:01.475904 <span class=\"m\">139884626732864</span> session_manager.py:502<span class=\"o\">]</span> Done running local_init_op.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:47<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:01.870096 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:606<span class=\"o\">]</span> Saving checkpoints <span class=\"k\">for</span> <span class=\"m\">0</span> into /tmp/tmpoliwaf9g/model.ckpt.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:48<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.093250 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:262<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.000752323, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:49<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.268341 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">569</span>.372\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:50<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.269199 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">2</span>.3888447e-11, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">101</span> <span class=\"o\">(</span><span class=\"m\">0</span>.176 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:51<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.458733 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">524</span>.98\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:52<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.459607 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">2</span>.877698e-13, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">201</span> <span class=\"o\">(</span><span class=\"m\">0</span>.190 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:53<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.648005 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">529</span>.569\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:54<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.649275 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.0, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">301</span> <span class=\"o\">(</span><span class=\"m\">0</span>.190 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:55<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.774062 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">791</span>.023\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:56<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.774733 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.0, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">401</span> <span class=\"o\">(</span><span class=\"m\">0</span>.125 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:57<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.866282 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">1082</span>.71\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:58<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.866768 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.0, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">501</span> <span class=\"o\">(</span><span class=\"m\">0</span>.092 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:59<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.965521 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">1008</span>.81\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:60<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:02.966336 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.0, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">601</span> <span class=\"o\">(</span><span class=\"m\">0</span>.100 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:61<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:03.069179 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">963</span>.884\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:62<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:03.069773 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.0, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">701</span> <span class=\"o\">(</span><span class=\"m\">0</span>.103 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:63<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:03.154792 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">1168</span>.15\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:64<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:03.155704 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.0, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">801</span> <span class=\"o\">(</span><span class=\"m\">0</span>.086 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:65<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:03.266279 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">897</span>.621\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:66<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:03.267081 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.0, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">901</span> <span class=\"o\">(</span><span class=\"m\">0</span>.111 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:67<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:03.354782 <span class=\"m\">139884626732864</span> basic_session_run_hooks.py:606<span class=\"o\">]</span> Saving checkpoints <span class=\"k\">for</span> <span class=\"m\">1000</span> into /tmp/tmpoliwaf9g/model.ckpt.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:32:05:68<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:32:03.395870 <span class=\"m\">139884626732864</span> estimator.py:368<span class=\"o\">]</span> Loss <span class=\"k\">for</span> final step: <span class=\"m\">0</span>.0.\n<span class=\"o\">[</span>SYSTEM<span class=\"o\">]</span> Train completed.\n</pre>\n<h3>cli</h3>\n<pre>scale create_job <span class=\"se\">\\</span>\n --job_name<span class=\"o\">=</span><span class=\"nv\">$RANDOM</span> <span class=\"se\">\\</span>\n --image_name<span class=\"o\">=</span>scale/tensorflow:1.14-v1-py3 <span class=\"se\">\\</span>\n --source_file<span class=\"o\">=</span>./sample.py <span class=\"se\">\\</span>\n --gpu_type<span class=\"o\">=</span>Tesla_P100-PCIE-16GB <span class=\"se\">\\</span>\n --mem<span class=\"o\">=</span><span class=\"m\">2</span> <span class=\"se\">\\</span>\n --gpu<span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"se\">\\</span>\n --cpu<span class=\"o\">=</span><span class=\"m\">1</span>\njob id:  43f7854d-fb58-42c3-b544-9c624a5ffdd9\n<span class=\"nb\">wait</span> <span class=\"k\">for</span> container to start\nSYSTEM<span class=\"o\">]</span> Train start.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:1<span class=\"o\">]</span> WARNING: Logging before flag parsing goes to stderr.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:2<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:06.527273 <span class=\"m\">139771468314432</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:7: The name tf.logging.set_verbosity is deprecated. Please use tf.compat.v1.logging.set_verbosity instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:3<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:4<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:06.527491 <span class=\"m\">139771468314432</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:7: The name tf.logging.INFO is deprecated. Please use tf.compat.v1.logging.INFO instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:5<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:6<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:06.527805 <span class=\"m\">139771468314432</span> estimator.py:1790<span class=\"o\">]</span> Using default config.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:7<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:06.528320 <span class=\"m\">139771468314432</span> estimator.py:1811<span class=\"o\">]</span> Using temporary folder as model directory: /tmp/tmpkaaysn7y\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:8<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:06.528981 <span class=\"m\">139771468314432</span> estimator.py:209<span class=\"o\">]</span> Using config: <span class=\"o\">{</span><span class=\"s1\">'_model_dir'</span>: <span class=\"s1\">'/tmp/tmpkaaysn7y'</span>, <span class=\"s1\">'_tf_random_seed'</span>: None, <span class=\"s1\">'_save_summary_steps'</span>: <span class=\"m\">100</span>, <span class=\"s1\">'_save_checkpoints_steps'</span>: None, <span class=\"s1\">'_save_checkpoints_secs'</span>: <span class=\"m\">600</span>, <span class=\"s1\">'_session_config'</span>: allow_soft_placement: <span class=\"nb\">true</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:9<span class=\"o\">]</span> graph_options <span class=\"o\">{</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:10<span class=\"o\">]</span>   rewrite_options <span class=\"o\">{</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:11<span class=\"o\">]</span>     meta_optimizer_iterations: ONE\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:12<span class=\"o\">]</span>   <span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:13<span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:14<span class=\"o\">]</span> , <span class=\"s1\">'_keep_checkpoint_max'</span>: <span class=\"m\">5</span>, <span class=\"s1\">'_keep_checkpoint_every_n_hours'</span>: <span class=\"m\">10000</span>, <span class=\"s1\">'_log_step_count_steps'</span>: <span class=\"m\">100</span>, <span class=\"s1\">'_train_distribute'</span>: None, <span class=\"s1\">'_device_fn'</span>: None, <span class=\"s1\">'_protocol'</span>: None, <span class=\"s1\">'_eval_distribute'</span>: None, <span class=\"s1\">'_experimental_distribute'</span>: None, <span class=\"s1\">'_experimental_max_worker_delay_secs'</span>: None, <span class=\"s1\">'_service'</span>: None, <span class=\"s1\">'_cluster_spec'</span>: &lt;tensorflow.python.training.server_lib.ClusterSpec object at 0x7f1f0328db00&gt;, <span class=\"s1\">'_task_type'</span>: <span class=\"s1\">'worker'</span>, <span class=\"s1\">'_task_id'</span>: <span class=\"m\">0</span>, <span class=\"s1\">'_global_id_in_cluster'</span>: <span class=\"m\">0</span>, <span class=\"s1\">'_master'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'_evaluation_master'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'_is_chief'</span>: True, <span class=\"s1\">'_num_ps_replicas'</span>: <span class=\"m\">0</span>, <span class=\"s1\">'_num_worker_replicas'</span>: <span class=\"m\">1</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:15<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:06.529155 <span class=\"m\">139771468314432</span> model_fn.py:630<span class=\"o\">]</span> Estimator<span class=\"err\">'</span>s model_fn <span class=\"o\">(</span>&lt;<span class=\"k\">function</span> model_fn at 0x7f1f032e4d90&gt;<span class=\"o\">)</span> includes params argument, but params are not passed to Estimator.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:16<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:06.558148 <span class=\"m\">139771468314432</span> deprecation.py:323<span class=\"o\">]</span> From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/training_util.py:236: Variable.initialized_value <span class=\"o\">(</span>from tensorflow.python.ops.variables<span class=\"o\">)</span> is deprecated and will be removed in a future version.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:17<span class=\"o\">]</span> Instructions <span class=\"k\">for</span> updating:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:18<span class=\"o\">]</span> Use Variable.read_value. Variables in <span class=\"m\">2</span>.X are initialized automatically both in eager and graph <span class=\"o\">(</span>inside tf.defun<span class=\"o\">)</span> contexts.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:19<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:06.628736 <span class=\"m\">139771468314432</span> estimator.py:1145<span class=\"o\">]</span> Calling model_fn.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:20<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:06.628922 <span class=\"m\">139771468314432</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:17: The name tf.layers.Dense is deprecated. Please use tf.compat.v1.layers.Dense instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:21<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:22<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:06.630848 <span class=\"m\">139771468314432</span> deprecation.py:506<span class=\"o\">]</span> From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ <span class=\"o\">(</span>from tensorflow.python.ops.init_ops<span class=\"o\">)</span> with dtype is deprecated and will be removed in a future version.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:23<span class=\"o\">]</span> Instructions <span class=\"k\">for</span> updating:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:24<span class=\"o\">]</span> Call initializer instance with the dtype argument instead of passing it to the constructor\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:25<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:07.550607 <span class=\"m\">139771468314432</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:19: The name tf.losses.mean_squared_error is deprecated. Please use tf.compat.v1.losses.mean_squared_error instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:26<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:27<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:07.573339 <span class=\"m\">139771468314432</span> deprecation.py:323<span class=\"o\">]</span> From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/losses/losses_impl.py:121: add_dispatch_support.&lt;locals&gt;.wrapper <span class=\"o\">(</span>from tensorflow.python.ops.array_ops<span class=\"o\">)</span> is deprecated and will be removed in a future version.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:28<span class=\"o\">]</span> Instructions <span class=\"k\">for</span> updating:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:29<span class=\"o\">]</span> Use tf.where in <span class=\"m\">2</span>.0, which has the same broadcast rule as np.where\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:30<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:07.580497 <span class=\"m\">139771468314432</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:23: The name tf.train.get_or_create_global_step is deprecated. Please use tf.compat.v1.train.get_or_create_global_step instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:31<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:32<span class=\"o\">]</span> W0305 <span class=\"m\">07</span>:27:07.580755 <span class=\"m\">139771468314432</span> deprecation_wrapper.py:119<span class=\"o\">]</span> From app.py:24: The name tf.train.AdamOptimizer is deprecated. Please use tf.compat.v1.train.AdamOptimizer instead.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:33<span class=\"o\">]</span> \n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:34<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:07.863347 <span class=\"m\">139771468314432</span> estimator.py:1147<span class=\"o\">]</span> Done calling model_fn.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:35<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:07.865198 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:541<span class=\"o\">]</span> Create CheckpointSaverHook.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:36<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:08.189621 <span class=\"m\">139771468314432</span> monitored_session.py:240<span class=\"o\">]</span> Graph was finalized.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:37<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.190115: I tensorflow/core/platform/cpu_feature_guard.cc:142<span class=\"o\">]</span> Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:38<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.258076: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcuda.so.1\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:39<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.554655: I tensorflow/compiler/xla/service/service.cc:168<span class=\"o\">]</span> XLA service 0x3a1f340 executing computations on platform CUDA. Devices:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:40<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.554703: I tensorflow/compiler/xla/service/service.cc:175<span class=\"o\">]</span>   StreamExecutor device <span class=\"o\">(</span><span class=\"m\">0</span><span class=\"o\">)</span>: Tesla P100-PCIE-16GB, Compute Capability <span class=\"m\">6</span>.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:41<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.559790: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94<span class=\"o\">]</span> CPU Frequency: <span class=\"m\">2599925000</span> Hz\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:42<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.565466: I tensorflow/compiler/xla/service/service.cc:168<span class=\"o\">]</span> XLA service 0x50b3880 executing computations on platform Host. Devices:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:43<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.565508: I tensorflow/compiler/xla/service/service.cc:175<span class=\"o\">]</span>   StreamExecutor device <span class=\"o\">(</span><span class=\"m\">0</span><span class=\"o\">)</span>: &lt;undefined&gt;, &lt;undefined&gt;\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:44<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.568802: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1640<span class=\"o\">]</span> Found device <span class=\"m\">0</span> with properties:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:45<span class=\"o\">]</span> name: Tesla P100-PCIE-16GB major: <span class=\"m\">6</span> minor: <span class=\"m\">0</span> memoryClockRate<span class=\"o\">(</span>GHz<span class=\"o\">)</span>: <span class=\"m\">1</span>.3285\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:46<span class=\"o\">]</span> pciBusID: <span class=\"m\">0000</span>:83:00.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:47<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.569401: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcudart.so.10.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:48<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.572929: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcublas.so.10.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:49<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.575969: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcufft.so.10.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:50<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.576603: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcurand.so.10.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:51<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.580630: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcusolver.so.10.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:52<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.583665: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcusparse.so.10.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:53<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.591141: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcudnn.so.7\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:54<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.595661: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1763<span class=\"o\">]</span> Adding visible gpu devices: <span class=\"m\">0</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:55<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.595717: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcudart.so.10.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:56<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.598404: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1181<span class=\"o\">]</span> Device interconnect StreamExecutor with strength <span class=\"m\">1</span> edge matrix:\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:57<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.598433: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1187<span class=\"o\">]</span>      <span class=\"m\">0</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:58<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.598454: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200<span class=\"o\">]</span> <span class=\"m\">0</span>:   N\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:59<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:08.602791: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326<span class=\"o\">]</span> Created TensorFlow device <span class=\"o\">(</span>/job:localhost/replica:0/task:0/device:GPU:0 with <span class=\"m\">15216</span> MB memory<span class=\"o\">)</span> -&gt; physical GPU <span class=\"o\">(</span>device: <span class=\"m\">0</span>, name: Tesla P100-PCIE-16GB, pci bus id: <span class=\"m\">0000</span>:83:00.0, compute capability: <span class=\"m\">6</span>.0<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:60<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:09.446952: W tensorflow/compiler/jit/mark_for_compilation_pass.cc:1412<span class=\"o\">]</span> <span class=\"o\">(</span>One-time warning<span class=\"o\">)</span>: Not using XLA:CPU <span class=\"k\">for</span> cluster because envvar <span class=\"nv\">TF_XLA_FLAGS</span><span class=\"o\">=</span>--tf_xla_cpu_global_jit was not set.  If you want XLA:CPU, either <span class=\"nb\">set</span> that envvar, or use experimental_jit_scope to <span class=\"nb\">enable</span> XLA:CPU.  To confirm that XLA is active, pass --vmodule<span class=\"o\">=</span><span class=\"nv\">xla_compilation_cache</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"o\">(</span>as a proper command-line flag, not via TF_XLA_FLAGS<span class=\"o\">)</span> or <span class=\"nb\">set</span> the envvar <span class=\"nv\">XLA_FLAGS</span><span class=\"o\">=</span>--xla_hlo_profile.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:61<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:09.449524 <span class=\"m\">139771468314432</span> session_manager.py:500<span class=\"o\">]</span> Running local_init_op.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:62<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:09.453503 <span class=\"m\">139771468314432</span> session_manager.py:502<span class=\"o\">]</span> Done running local_init_op.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:63<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:09.566854 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:606<span class=\"o\">]</span> Saving checkpoints <span class=\"k\">for</span> <span class=\"m\">0</span> into /tmp/tmpkaaysn7y/model.ckpt.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:64<span class=\"o\">]</span> <span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:09.657372: I tensorflow/stream_executor/platform/default/dso_loader.cc:42<span class=\"o\">]</span> Successfully opened dynamic library libcublas.so.10.0\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:65<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:09.957408 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:262<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">3</span>.136012, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">0</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:66<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:10.459863 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">198</span>.666\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:67<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:10.461008 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">2</span>.4800994, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">100</span> <span class=\"o\">(</span><span class=\"m\">0</span>.504 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:68<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:10.877429 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">239</span>.453\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:69<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:10.878589 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">1</span>.9325358, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">200</span> <span class=\"o\">(</span><span class=\"m\">0</span>.418 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:70<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:11.364231 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">205</span>.424\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:71<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:11.365450 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">1</span>.4822296, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">300</span> <span class=\"o\">(</span><span class=\"m\">0</span>.487 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:72<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:11.856773 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">203</span>.032\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:73<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:11.858273 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">1</span>.1173365, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">400</span> <span class=\"o\">(</span><span class=\"m\">0</span>.493 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:74<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:12.346587 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">204</span>.159\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:75<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:12.347812 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.82648915, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">500</span> <span class=\"o\">(</span><span class=\"m\">0</span>.490 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:76<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:12.777956 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">231</span>.805\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:77<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:12.779240 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.59887236, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">600</span> <span class=\"o\">(</span><span class=\"m\">0</span>.431 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:78<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:13.067498 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">345</span>.287\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:79<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:13.068227 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.42432293, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">700</span> <span class=\"o\">(</span><span class=\"m\">0</span>.289 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:80<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:13.468511 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">249</span>.398\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:81<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:13.469309 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.29343566, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">800</span> <span class=\"o\">(</span><span class=\"m\">0</span>.401 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:82<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:13.955026 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:692<span class=\"o\">]</span> global_step/sec: <span class=\"m\">205</span>.564\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:13:83<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:13.956063 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:260<span class=\"o\">]</span> <span class=\"nv\">loss</span> <span class=\"o\">=</span> <span class=\"m\">0</span>.19767413, <span class=\"nv\">step</span> <span class=\"o\">=</span> <span class=\"m\">900</span> <span class=\"o\">(</span><span class=\"m\">0</span>.487 sec<span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:14:84<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:14.172374 <span class=\"m\">139771468314432</span> basic_session_run_hooks.py:606<span class=\"o\">]</span> Saving checkpoints <span class=\"k\">for</span> <span class=\"m\">1000</span> into /tmp/tmpkaaysn7y/model.ckpt.\n<span class=\"o\">[</span><span class=\"m\">2020</span>-03-05 <span class=\"m\">07</span>:27:14:85<span class=\"o\">]</span> I0305 <span class=\"m\">07</span>:27:14.248917 <span class=\"m\">139771468314432</span> estimator.py:368<span class=\"o\">]</span> Loss <span class=\"k\">for</span> final step: <span class=\"m\">0</span>.13003506.\n<span class=\"o\">[</span>SYSTEM<span class=\"o\">]</span> Train completed.\n</pre>\n\n          </div>"}, "last_serial": 6759489, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0ca29acb82806caa7fec859db8cb72e9", "sha256": "3140d9aecd5dfc7627de4ac22528b468c6c2fa20dc49d7406e12fef36133ae59"}, "downloads": -1, "filename": "skt_scale-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0ca29acb82806caa7fec859db8cb72e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4622, "upload_time": "2020-03-05T06:13:35", "upload_time_iso_8601": "2020-03-05T06:13:35.666487Z", "url": "https://files.pythonhosted.org/packages/eb/07/f3cd25b31227f0f7296f0a73bf11b69efeb2662325189ecda808d1c5c345/skt_scale-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94e29dc8c92332597a8c640eb84be9cc", "sha256": "0b95978574cc01e6a8e405633a6551e10e0345423f14cf5111c6b1cb09e7e13d"}, "downloads": -1, "filename": "skt-scale-0.0.1.tar.gz", "has_sig": false, "md5_digest": "94e29dc8c92332597a8c640eb84be9cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2726, "upload_time": "2020-03-05T06:13:38", "upload_time_iso_8601": "2020-03-05T06:13:38.058174Z", "url": "https://files.pythonhosted.org/packages/f9/3d/dcd430c4a2bd175662c2ad5b0dc8681c73223b77d02abaa5ade1239fd937/skt-scale-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "e43a7c608c3e3648d69c37efbfa0587b", "sha256": "821d131f8af7027b575074b88cd0fe01955f831f3198a40f4356ffc9d92c01be"}, "downloads": -1, "filename": "skt_scale-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "e43a7c608c3e3648d69c37efbfa0587b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10180, "upload_time": "2020-03-06T00:27:18", "upload_time_iso_8601": "2020-03-06T00:27:18.854044Z", "url": "https://files.pythonhosted.org/packages/3b/02/6e081aa495cdb2488523926794d0403a966833816ce836529996516a2556/skt_scale-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f08ed196ef4ddc66c2c14551ff47a4d", "sha256": "628dfdd4d27b6e2230dc4e20b212a1e1c3836716b6c255e7e9a638487f652ffa"}, "downloads": -1, "filename": "skt-scale-0.0.10.tar.gz", "has_sig": false, "md5_digest": "0f08ed196ef4ddc66c2c14551ff47a4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12791, "upload_time": "2020-03-06T00:27:20", "upload_time_iso_8601": "2020-03-06T00:27:20.998295Z", "url": "https://files.pythonhosted.org/packages/7a/8a/f8028c25490101d37899ee001f34b1084033059b06e45ecece4db623448b/skt-scale-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "738cb370cd956564c0a707bfd857892c", "sha256": "02d9df893b24cdb6d7029c6b73aef5f988d136bf6606545ab761181cfb56b6f1"}, "downloads": -1, "filename": "skt_scale-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "738cb370cd956564c0a707bfd857892c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10206, "upload_time": "2020-03-06T01:02:07", "upload_time_iso_8601": "2020-03-06T01:02:07.198478Z", "url": "https://files.pythonhosted.org/packages/dc/93/ab8e13a463d87284d9289968935de10fa703d67610c1cda5cd7978e42139/skt_scale-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cbfd2241e6dbea9abeb72e22eb4deff", "sha256": "43ac15e2b3f426ab301fbb01dddd47eb32d3171880ad968eb8445bab52a54ab5"}, "downloads": -1, "filename": "skt-scale-0.0.11.tar.gz", "has_sig": false, "md5_digest": "2cbfd2241e6dbea9abeb72e22eb4deff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12814, "upload_time": "2020-03-06T01:02:09", "upload_time_iso_8601": "2020-03-06T01:02:09.571574Z", "url": "https://files.pythonhosted.org/packages/f4/92/d28ca79f75598ec72df95cbc3889e138da6ec3e4148002ef29bcee551328/skt-scale-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "7aa2753cb352be8a7963d4ccae3a85f1", "sha256": "dd27e251bd0f7e4af7515add0c6b7dc9308f2126b8d0a969070cc3a310ac6455"}, "downloads": -1, "filename": "skt_scale-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "7aa2753cb352be8a7963d4ccae3a85f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10221, "upload_time": "2020-03-06T01:05:51", "upload_time_iso_8601": "2020-03-06T01:05:51.977455Z", "url": "https://files.pythonhosted.org/packages/6f/af/dc392678ddd5bacdb61b75b9a88e0d854f20735b7a73fa20b0ef5f7d37e1/skt_scale-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48da337647d330379db4cc9387e26b96", "sha256": "901bd0a4c2e94d8f5dc785f77e3245a5c9b2ce1420dc9a20da7e5d4ae2fb2808"}, "downloads": -1, "filename": "skt-scale-0.0.12.tar.gz", "has_sig": false, "md5_digest": "48da337647d330379db4cc9387e26b96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12839, "upload_time": "2020-03-06T01:05:53", "upload_time_iso_8601": "2020-03-06T01:05:53.918859Z", "url": "https://files.pythonhosted.org/packages/a3/c8/d370da340b6bdcd49905e8f2af2c5db9830eaec55e341897a8f1bf5a430f/skt-scale-0.0.12.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d6ce92f1ca5ee619d06215ec624e9f2f", "sha256": "eb0ab4b3ab422b474f8c9159fc0a24bc68f632a1d1f64a9c21e843eb604c1c2b"}, "downloads": -1, "filename": "skt_scale-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6ce92f1ca5ee619d06215ec624e9f2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10083, "upload_time": "2020-03-05T07:38:58", "upload_time_iso_8601": "2020-03-05T07:38:58.266360Z", "url": "https://files.pythonhosted.org/packages/86/7c/67e1e18138c4b5a3bbdd8f91bdb933a4d31071b11907bdfcbd742ac355ac/skt_scale-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71fc3ff1536290d0a6b08b3edf03be0c", "sha256": "787d8b09a95de82655669e6972b7e69e75d772a6a516a32898f4b79aeadfeaaf"}, "downloads": -1, "filename": "skt-scale-0.0.2.tar.gz", "has_sig": false, "md5_digest": "71fc3ff1536290d0a6b08b3edf03be0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12661, "upload_time": "2020-03-05T07:39:00", "upload_time_iso_8601": "2020-03-05T07:39:00.501556Z", "url": "https://files.pythonhosted.org/packages/b2/8a/6e399f5ec7b21be95996d2d90f4b5a709b41db712950fc06c3f03a6dc3a1/skt-scale-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "67a06d8e3a723a7daa4d1d36fe61ccaa", "sha256": "ab88c10aeeff3206de551fff926040d973021cb43bee3ab16cb5baeb11d2d4e6"}, "downloads": -1, "filename": "skt_scale-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "67a06d8e3a723a7daa4d1d36fe61ccaa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10145, "upload_time": "2020-03-05T07:53:06", "upload_time_iso_8601": "2020-03-05T07:53:06.996346Z", "url": "https://files.pythonhosted.org/packages/de/89/263c89e0e99d4edfc1c365fa056a97d54cf0d0ac3d6b264ef0ecf76551b9/skt_scale-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6060efd9cb549516b7c35150cd26d414", "sha256": "0b2837ee95dc20a8d2af1ac10811b5252e940c3aa62701f0e309303105ffc750"}, "downloads": -1, "filename": "skt-scale-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6060efd9cb549516b7c35150cd26d414", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12721, "upload_time": "2020-03-05T07:53:09", "upload_time_iso_8601": "2020-03-05T07:53:09.082401Z", "url": "https://files.pythonhosted.org/packages/c7/7f/b9fdae1a4804de77bd435f6b68e7554b138e099203dd2566ef1a64c0dcf1/skt-scale-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "71a76cfde8b992261f5994478e4b4bac", "sha256": "3d73f6c1a96a816f5d079f2dc251b1950b475718b623df951605467f50c50b1e"}, "downloads": -1, "filename": "skt_scale-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "71a76cfde8b992261f5994478e4b4bac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10166, "upload_time": "2020-03-05T07:57:04", "upload_time_iso_8601": "2020-03-05T07:57:04.425293Z", "url": "https://files.pythonhosted.org/packages/1f/1a/f7bbec1d67990ddd405d819a8853c90cb0e13e766e4de4cfa31de581062e/skt_scale-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a155693a14a10368216eb6c2c17a49a", "sha256": "d659f94ceca720f63e080da12d1627aa43385a76ef5b2e64c955c939fe22958c"}, "downloads": -1, "filename": "skt-scale-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6a155693a14a10368216eb6c2c17a49a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12749, "upload_time": "2020-03-05T07:57:06", "upload_time_iso_8601": "2020-03-05T07:57:06.363122Z", "url": "https://files.pythonhosted.org/packages/db/4d/50080c4e0cbeed0a701931682e61541a0f88e064187e124eae9bca38202e/skt-scale-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "c8228ac44a79167a8150ca4de31b54ff", "sha256": "20c7539c39fb7efbb2736b170bfe41c121ed5518cdf8c63102934afa2fb79dc3"}, "downloads": -1, "filename": "skt_scale-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c8228ac44a79167a8150ca4de31b54ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10162, "upload_time": "2020-03-05T08:01:46", "upload_time_iso_8601": "2020-03-05T08:01:46.234179Z", "url": "https://files.pythonhosted.org/packages/45/5d/93d6edcb8705fde6e8f0da3771d6c90f997b326d1bdfce6ea6433b3eeb0d/skt_scale-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "731ce0beae92931d20d168c3ba32b37d", "sha256": "adca7762370cd888609a8e87994d12e0c697b3ad6e0de4a605c6e2c19f4ec9ef"}, "downloads": -1, "filename": "skt-scale-0.0.5.tar.gz", "has_sig": false, "md5_digest": "731ce0beae92931d20d168c3ba32b37d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12745, "upload_time": "2020-03-05T08:01:48", "upload_time_iso_8601": "2020-03-05T08:01:48.076220Z", "url": "https://files.pythonhosted.org/packages/22/ee/528c732e8369e94fed2838a5db4960e535cf18a97a3879a4a4076d7a2cfc/skt-scale-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "5cdef46cef9824c370ae4e9589388b34", "sha256": "d0aba0db6515bca9e425ffa1107cc06908fba970759cb7b8ae1e71de0e6e498e"}, "downloads": -1, "filename": "skt_scale-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "5cdef46cef9824c370ae4e9589388b34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10167, "upload_time": "2020-03-05T08:03:26", "upload_time_iso_8601": "2020-03-05T08:03:26.374853Z", "url": "https://files.pythonhosted.org/packages/df/cc/1107d124e2efb960cbfb122edc92f353adc68ca8d31d617f65559f7a55b0/skt_scale-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d1b176f8fdee60111fcaeda0469675e", "sha256": "5e042445a959019c7ad02f88b786a9a40f0fa6e6f94da78f2f2625c6f123498e"}, "downloads": -1, "filename": "skt-scale-0.0.6.tar.gz", "has_sig": false, "md5_digest": "5d1b176f8fdee60111fcaeda0469675e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12753, "upload_time": "2020-03-05T08:03:28", "upload_time_iso_8601": "2020-03-05T08:03:28.742182Z", "url": "https://files.pythonhosted.org/packages/c1/8b/4367cbf250b400832ef71f71746c9a46219812553a4d71edbe5373207d62/skt-scale-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "87d448662f639fbd41736cc51226479a", "sha256": "db59dfbe9acaa72af532748ef14f79f47db74cbd865a48b7ee96bd9958cd0043"}, "downloads": -1, "filename": "skt_scale-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "87d448662f639fbd41736cc51226479a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10164, "upload_time": "2020-03-05T08:07:14", "upload_time_iso_8601": "2020-03-05T08:07:14.935991Z", "url": "https://files.pythonhosted.org/packages/71/fc/5baaa630b93b77af9108a1541125e440e6a40222f0300989eff87b59eb78/skt_scale-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9947fc549716eabc58762eb372090e82", "sha256": "c6a53cdb45f35df3275553ae8f687ba62a7fcf730879e12c324cf5816a161d7e"}, "downloads": -1, "filename": "skt-scale-0.0.7.tar.gz", "has_sig": false, "md5_digest": "9947fc549716eabc58762eb372090e82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12758, "upload_time": "2020-03-05T08:07:17", "upload_time_iso_8601": "2020-03-05T08:07:17.086779Z", "url": "https://files.pythonhosted.org/packages/02/76/97bc63f7b75f6f54d437aa3e278490ad448c81409a1fe6d04be8af45c8d6/skt-scale-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "c8d9c84b0350773b78556eb7484161a3", "sha256": "30363140b4ef82c3ecc9e1b82ce99eb25a40e5adda693e4a346108a8be7f82d6"}, "downloads": -1, "filename": "skt_scale-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "c8d9c84b0350773b78556eb7484161a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10159, "upload_time": "2020-03-05T08:15:58", "upload_time_iso_8601": "2020-03-05T08:15:58.096184Z", "url": "https://files.pythonhosted.org/packages/fc/60/afef3442dbda6e1f818f351f5a8cc17df764271e84163563d4ac70dcfce7/skt_scale-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cd00f730aa4e8a69c96ed9ad259f30b", "sha256": "3da421dc92ea2b24c0aef6c08cafda67c47c2c306c993dbcf31f77f4d6365494"}, "downloads": -1, "filename": "skt-scale-0.0.8.tar.gz", "has_sig": false, "md5_digest": "6cd00f730aa4e8a69c96ed9ad259f30b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12785, "upload_time": "2020-03-05T08:15:59", "upload_time_iso_8601": "2020-03-05T08:15:59.872476Z", "url": "https://files.pythonhosted.org/packages/43/64/878e2d3fcecd7e31b4cf302c017be3719579d899a66de1ad4afca8ec0ef7/skt-scale-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "c15714df1af0521497c967e9c0764ee6", "sha256": "c2a9aefdd2c40da1e89e9bf784243b93a31ddb931d5e48c6bac876ca7b12957b"}, "downloads": -1, "filename": "skt_scale-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "c15714df1af0521497c967e9c0764ee6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10162, "upload_time": "2020-03-06T00:24:25", "upload_time_iso_8601": "2020-03-06T00:24:25.854513Z", "url": "https://files.pythonhosted.org/packages/c6/87/992e495d59f4a3165d88dc082b83653b89614e60251fb7d676d1537603c1/skt_scale-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31b136ba2fb51c44861b3b14b2dbc52a", "sha256": "af5f57dc85ea139b7b0e212fb6294f1655886ec40cd502695766181e68bf63fc"}, "downloads": -1, "filename": "skt-scale-0.0.9.tar.gz", "has_sig": false, "md5_digest": "31b136ba2fb51c44861b3b14b2dbc52a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12794, "upload_time": "2020-03-06T00:24:28", "upload_time_iso_8601": "2020-03-06T00:24:28.035372Z", "url": "https://files.pythonhosted.org/packages/e7/b2/adc9f91efae854bf5fd701dc2d1cb1fe3644587b9afc85f522bb6078cadb/skt-scale-0.0.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "d01971895c47fcb8492f092fca9faae0", "sha256": "65efe4461497279de007752f444db881ad58cfaf1f3337f781d46d7bb46fbc75"}, "downloads": -1, "filename": "skt_scale-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d01971895c47fcb8492f092fca9faae0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10193, "upload_time": "2020-03-06T04:39:14", "upload_time_iso_8601": "2020-03-06T04:39:14.405759Z", "url": "https://files.pythonhosted.org/packages/4f/20/8ef9a6d762fdb3ecce253ed69ca51717803f57564bfcc9bc5510c0be1a62/skt_scale-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c73545d8e10a181b7cb61354574b77", "sha256": "c22887f87f3648a6b5e98fe26eb98d9d1985d092fcf92327e667fe6520db5a0d"}, "downloads": -1, "filename": "skt-scale-1.0.0.tar.gz", "has_sig": false, "md5_digest": "04c73545d8e10a181b7cb61354574b77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12772, "upload_time": "2020-03-06T04:39:16", "upload_time_iso_8601": "2020-03-06T04:39:16.254782Z", "url": "https://files.pythonhosted.org/packages/97/55/665c3a152537e55634cb71d6536165aafbb72be9272817f8dc8992301908/skt-scale-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d01971895c47fcb8492f092fca9faae0", "sha256": "65efe4461497279de007752f444db881ad58cfaf1f3337f781d46d7bb46fbc75"}, "downloads": -1, "filename": "skt_scale-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d01971895c47fcb8492f092fca9faae0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10193, "upload_time": "2020-03-06T04:39:14", "upload_time_iso_8601": "2020-03-06T04:39:14.405759Z", "url": "https://files.pythonhosted.org/packages/4f/20/8ef9a6d762fdb3ecce253ed69ca51717803f57564bfcc9bc5510c0be1a62/skt_scale-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c73545d8e10a181b7cb61354574b77", "sha256": "c22887f87f3648a6b5e98fe26eb98d9d1985d092fcf92327e667fe6520db5a0d"}, "downloads": -1, "filename": "skt-scale-1.0.0.tar.gz", "has_sig": false, "md5_digest": "04c73545d8e10a181b7cb61354574b77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12772, "upload_time": "2020-03-06T04:39:16", "upload_time_iso_8601": "2020-03-06T04:39:16.254782Z", "url": "https://files.pythonhosted.org/packages/97/55/665c3a152537e55634cb71d6536165aafbb72be9272817f8dc8992301908/skt-scale-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:51 2020"}