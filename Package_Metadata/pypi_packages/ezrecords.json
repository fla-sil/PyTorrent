{"info": {"author": "Paulo Phagula", "author_email": "pphagula@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "ezrecords: SQL for Humans\u2122 Enhanced\n====================================\n\n.. image:: https://img.shields.io/github/release/dareenzo/ezrecords.svg\n    :target: https://github.com/dareenzo/ezrecords/releases\n    :alt: Latest Version\n\n.. image:: https://travis-ci.org/dareenzo/ezrecords.svg?branch=master\n    :target: https://travis-ci.org/dareenzo/ezrecords\n    :alt: Build\n\n.. image:: https://coveralls.io/repos/github/dareenzo/ezrecords/badge.svg?branch=master\n    :target: https://coveralls.io/github/dareenzo/ezrecords?branch=master\n    :alt: Coverage\n\n.. image:: https://img.shields.io/github/license/dareenzo/ezrecords.svg\n    :target: https://github.com/dareenzo/ezrecords/blob/master/LICENSE\n    :alt: License\n\n.. _LICENSE: http://www.github.com/dareenzo/ezrecords/blob/master/LICENSE\n.. _records: https://github.com/kennethreitz/records\n.. _ezsql: https://github.com/ezSQL/ezSQL\n.. _wpdb: https://codex.wordpress.org/Class_Reference/wpdb\n.. _SQLAlchemy: http://www.sqlalchemy.org\n\n\n**ezrecords is a very simple, but powerful, library for making raw SQL\nqueries to most relational databases.**\n\nezrecords = Kenneth Reitz's `records`_ + Justin Vincent's `ezsql`_ + WordPress' `wpdb`_ - `SQLAlchemy`_.\n\nJust write SQL. No bells, no whistles. This common task can be\nsurprisingly difficult with the standard tools available.\nThis library strives to make this workflow as simple as possible,\nwhile providing an elegant interface to work with your query results.\n\n*Database support includes SQLite, Postgres, and MySQL (drivers not included).*\n\nWhy?\n----\n\n- `records`_ is awesome\n- `ezsql`_ and `wpdb`_ have very nice API, so it makes for an easy transition\n  from PHP to Python\n- Our love for crafting well written and performant SQL queries is not questionable,\n  but I think a few helpers for some basic DML and recurring queries would help\n- *\"The ORM takes two brilliant ideas and incapacitates them both.\"*,\n  said a very wise man. So, as long as possible I want to keep away from\n  sqlalchemy or the like.\n\nUsage\n------\n\nAPI\n~~~\n\n.. code:: Python\n\n    import logging\n    from ezrecords.mysqldb import MySQLDb\n\n    logger = logging.getLogger()\n\n    # connect\n \u00a0  db = MySQLDb(db_url=\"mysql://root:passwd@127.0.0.1:3306/test\", logger=logger) # logger is optional\n\n    # enable debugging - optional\n    db.save_queries = True  # save queries and execution time\n    db.show_sql = True  # show SQL code being executed. logger above is required for logging to work\n    db.show_errors = True  # show errors\n\n    create_user_table = \"\"\"\n    CREATE TABLE test_user (\n        id INT AUTO_INCREMENT NOT NULL,\n        username varchar(255) UNIQUE,\n        password varchar(255),\n        created_at TIMESTAMP,\n        created_at_gmt TIMESTAMP,\n        PRIMARY KEY(id)\n    )\n    \"\"\"\n    db.query(create_table) # run generic SQL\n\n    create_numbers_table = \"\"\"\n    DROP TABLE IF EXISTS numbers;\n    CREATE TABLE numbers(\n        ints int,\n        floats float\n    );\n    \"\"\"\n    db.query(create_table_sql)\n\n    insert_numbers_sql = \"INSERT INTO numbers (ints, floats) VALUES (%d, %f)\" # DB API only accepts %s, so we replace %d and %f by %s internally\n    db.query(insert_numbers_sql, 3, 3.14) # run generic queries with params\n\n    # insert records\n    db.insert('test_user', username='scott', password='tiger', created_at=datetime.datetime.now())\n    db.insert('test_user', {'username': 'JONES', 'password': 'STEEL'})\n\n    # bulk_insert records\n    db.bulk_insert('test_user', ('username', 'password'), [('scott', 'tiger'), ('JONES', 'STEEL')])\n\n    # Update records\n    db.update('test_user', {'password': 'shepard'}, {'username': 'scott'})\n\n    # Delete records\n    db.delete('test_user', {'username': None}) # None is converted to NULL\n\n    # Sanitize query\n    db.prepare(\"\"\"INSERT INTO postmeta (post_id, meta_key, meta_value) VALUES ( '%d', \"%s\", %%s )')\"\"\", 10, \"Harriet's Adages\", \"WordPress' database interface is like Sunday Morning: Easy.\")\n\n    # Call stored procedures\n    db.call_procedure('adds', 1, 2)\n\n    # Get single variable/value\n    db.get_var('SELECT version()')\n\n    # Get specific row from many results\n    db.get_row('SELECT * FROM test_user', row_offset=1) # if offset not given the first row is returned\n\n    # Get specific column from many results\n    db.get_col('SELECT username, password FROM test_user', column_offset='password')  # offset can be numeric too\n\n    # Get results in specific format\n    db.get_results('SELECT username, password FROM test_user', 'json')\n    # Get last inserted ID from AUTO_INCREMENT/SERIAL fields\n    db.insert('test_user', username='scott', password='tiger', created_at=datetime.datetime.now())\n    db.last_insert_id\n\n    # Get number of affected rows from previus query\n    db.delete('test_user')\n    db.affected_rows\n\n    # Switch to another database\n    db.use('information_schema')\n\n    # Check query timing\n    # execute long running query\n    db.last_query_elapsed_time\n\n    # Transactions\n    # ---\n    db.begin_transaction()\n    db.commit() # or db.rollback()\n\n    # Data export\n    rows = db.query('SELECT * FROM table')\n    rows.dataset\n    rows.export('csv') # yaml, json, xls, xlsx\n\n    # Goodies\n    db.db_version() # get server version\n    db.exists('table') # check if table exists\n    db.get_table_names() # get list of tables in database\n    db.flush() # clear cache results\n\n\nCLI\n~~~\n\n.. code:: bash\n\n    ezrecords -h\n    ezrecords \"SELECT version() AS version\" \"json\" --url=\"mysql://root:passwd@127.0.0.1:3306/test\"\n    ezrecords \"SELECT version() AS version\" \"json\" --url=\"postgres://postgres:passwd@127.0.0.1:5432/test\"\n    ezrecords \"SELECT sqlite_version() AS version\" \"json\" --url=\"sqlite:///:memory:\"\n\nThank you\n----------\nThanks for checking this library out! I hope you find it useful.\n\nOf course, there's always room for improvement. Feel free to\n`open an issue <https://github.com/dareenzo/ezrecords/issues>`_\nso we can make **ezrecords** better, faster, and stronger.\n\nDownload and Install\n--------------------\n\nUntil the module is made available on pypi, you can install this module\ndirectly from github with:\n\n``pip install -e git+https://github.com/dareenzo/ezrecords@master#egg=ezrecords``\n\nezrecords runs with **Python 2.7 and 3.5**.\n\nDocumentation Generation\n------------------------\n\n.. code-block:: sh\n\n    # edit documentation in _docs\n    cd _docs\n    make singlehtml\n    cd ..\n    cp -fR _docs/_build/singlehtml/* docs/\n\n\nCopyright & License\n--------------------\n\nCode and documentation are available according to the MIT License.\n\nSee the `LICENSE`_ file for details.\n\n# Change log\n\nFor a complete view of all the releases, visit the releases page on GitHub:\n[https://github.com/dareenzo/ezrecords/releases](https://github.com/dareenzo/ezrecords/releases)\n\n## v0.3.0 - 2018-05-12\n\nFeatures:\n\n- Added support for SQLite\n\n## v0.2.0 - 2017-05-27\n\nFeatures:\n\n- Bulk insert: `db.bulk_insert('test_user', ('username', 'password'), [('scott', 'tiger'), ('JONES', 'STEEL')])`\n\nFixes:\n\n- Improve documentation\n- Update base records library code\n- Fixes error with getting passing params to query\n- start unquoting username and password as defined in the standard RFC\n\n## v0.1.0 - 2017-01-07\n\n- Initial release", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dareenzo/ezrecords", "keywords": "database,db,helper,utility,sql", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ezrecords", "package_url": "https://pypi.org/project/ezrecords/", "platform": "a", "project_url": "https://pypi.org/project/ezrecords/", "project_urls": {"Homepage": "https://github.com/dareenzo/ezrecords"}, "release_url": "https://pypi.org/project/ezrecords/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "SQL for the enhanced.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/dareenzo/ezrecords/releases\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87cba0b7e637acf5c47b95c827e1946333d4e593/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f64617265656e7a6f2f657a7265636f7264732e737667\"></a>\n<a href=\"https://travis-ci.org/dareenzo/ezrecords\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b699d36f0f8d7f17a3d0c9206d9a592b59fb0258/68747470733a2f2f7472617669732d63692e6f72672f64617265656e7a6f2f657a7265636f7264732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/dareenzo/ezrecords?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a5ba736b2564f9626f9202f075d32ccec19999c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f64617265656e7a6f2f657a7265636f7264732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/dareenzo/ezrecords/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/caed6f2b0edfc132634da63c7357c1032b7b12cd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f64617265656e7a6f2f657a7265636f7264732e737667\"></a>\n<p><strong>ezrecords is a very simple, but powerful, library for making raw SQL\nqueries to most relational databases.</strong></p>\n<p>ezrecords = Kenneth Reitz\u2019s <a href=\"https://github.com/kennethreitz/records\" rel=\"nofollow\">records</a> + Justin Vincent\u2019s <a href=\"https://github.com/ezSQL/ezSQL\" rel=\"nofollow\">ezsql</a> + WordPress\u2019 <a href=\"https://codex.wordpress.org/Class_Reference/wpdb\" rel=\"nofollow\">wpdb</a> - <a href=\"http://www.sqlalchemy.org\" rel=\"nofollow\">SQLAlchemy</a>.</p>\n<p>Just write SQL. No bells, no whistles. This common task can be\nsurprisingly difficult with the standard tools available.\nThis library strives to make this workflow as simple as possible,\nwhile providing an elegant interface to work with your query results.</p>\n<p><em>Database support includes SQLite, Postgres, and MySQL (drivers not included).</em></p>\n<div id=\"why\">\n<h2>Why?</h2>\n<ul>\n<li><a href=\"https://github.com/kennethreitz/records\" rel=\"nofollow\">records</a> is awesome</li>\n<li><a href=\"https://github.com/ezSQL/ezSQL\" rel=\"nofollow\">ezsql</a> and <a href=\"https://codex.wordpress.org/Class_Reference/wpdb\" rel=\"nofollow\">wpdb</a> have very nice API, so it makes for an easy transition\nfrom PHP to Python</li>\n<li>Our love for crafting well written and performant SQL queries is not questionable,\nbut I think a few helpers for some basic DML and recurring queries would help</li>\n<li><em>\u201cThe ORM takes two brilliant ideas and incapacitates them both.\u201d</em>,\nsaid a very wise man. So, as long as possible I want to keep away from\nsqlalchemy or the like.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"api\">\n<h3>API</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ezrecords.mysqldb</span> <span class=\"kn\">import</span> <span class=\"n\">MySQLDb</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># connect</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">MySQLDb</span><span class=\"p\">(</span><span class=\"n\">db_url</span><span class=\"o\">=</span><span class=\"s2\">\"mysql://root:passwd@127.0.0.1:3306/test\"</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"n\">logger</span><span class=\"p\">)</span> <span class=\"c1\"># logger is optional</span>\n\n<span class=\"c1\"># enable debugging - optional</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">save_queries</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># save queries and execution time</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">show_sql</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># show SQL code being executed. logger above is required for logging to work</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">show_errors</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># show errors</span>\n\n<span class=\"n\">create_user_table</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\nCREATE TABLE test_user (\n    id INT AUTO_INCREMENT NOT NULL,\n    username varchar(255) UNIQUE,\n    password varchar(255),\n    created_at TIMESTAMP,\n    created_at_gmt TIMESTAMP,\n    PRIMARY KEY(id)\n)\n\"\"\"</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">create_table</span><span class=\"p\">)</span> <span class=\"c1\"># run generic SQL</span>\n\n<span class=\"n\">create_numbers_table</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\nDROP TABLE IF EXISTS numbers;\nCREATE TABLE numbers(\n    ints int,\n    floats float\n);\n\"\"\"</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">create_table_sql</span><span class=\"p\">)</span>\n\n<span class=\"n\">insert_numbers_sql</span> <span class=\"o\">=</span> <span class=\"s2\">\"INSERT INTO numbers (ints, floats) VALUES (</span><span class=\"si\">%d</span><span class=\"s2\">, </span><span class=\"si\">%f</span><span class=\"s2\">)\"</span> <span class=\"c1\"># DB API only accepts %s, so we replace %d and %f by %s internally</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">insert_numbers_sql</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mf\">3.14</span><span class=\"p\">)</span> <span class=\"c1\"># run generic queries with params</span>\n\n<span class=\"c1\"># insert records</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'test_user'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'scott'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'tiger'</span><span class=\"p\">,</span> <span class=\"n\">created_at</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'test_user'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'JONES'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'STEEL'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># bulk_insert records</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">bulk_insert</span><span class=\"p\">(</span><span class=\"s1\">'test_user'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">),</span> <span class=\"p\">[(</span><span class=\"s1\">'scott'</span><span class=\"p\">,</span> <span class=\"s1\">'tiger'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'JONES'</span><span class=\"p\">,</span> <span class=\"s1\">'STEEL'</span><span class=\"p\">)])</span>\n\n<span class=\"c1\"># Update records</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'test_user'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'shepard'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'scott'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Delete records</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'test_user'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">})</span> <span class=\"c1\"># None is converted to NULL</span>\n\n<span class=\"c1\"># Sanitize query</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">prepare</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"INSERT INTO postmeta (post_id, meta_key, meta_value) VALUES ( '</span><span class=\"si\">%d</span><span class=\"s2\">', \"</span><span class=\"si\">%s</span><span class=\"s2\">\", </span><span class=\"si\">%%</span><span class=\"s2\">s )')\"\"\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">\"Harriet's Adages\"</span><span class=\"p\">,</span> <span class=\"s2\">\"WordPress' database interface is like Sunday Morning: Easy.\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Call stored procedures</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">call_procedure</span><span class=\"p\">(</span><span class=\"s1\">'adds'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get single variable/value</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_var</span><span class=\"p\">(</span><span class=\"s1\">'SELECT version()'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get specific row from many results</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_row</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM test_user'</span><span class=\"p\">,</span> <span class=\"n\">row_offset</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># if offset not given the first row is returned</span>\n\n<span class=\"c1\"># Get specific column from many results</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_col</span><span class=\"p\">(</span><span class=\"s1\">'SELECT username, password FROM test_user'</span><span class=\"p\">,</span> <span class=\"n\">column_offset</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">)</span>  <span class=\"c1\"># offset can be numeric too</span>\n\n<span class=\"c1\"># Get results in specific format</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_results</span><span class=\"p\">(</span><span class=\"s1\">'SELECT username, password FROM test_user'</span><span class=\"p\">,</span> <span class=\"s1\">'json'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Get last inserted ID from AUTO_INCREMENT/SERIAL fields</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'test_user'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'scott'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'tiger'</span><span class=\"p\">,</span> <span class=\"n\">created_at</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">last_insert_id</span>\n\n<span class=\"c1\"># Get number of affected rows from previus query</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'test_user'</span><span class=\"p\">)</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">affected_rows</span>\n\n<span class=\"c1\"># Switch to another database</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"s1\">'information_schema'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Check query timing</span>\n<span class=\"c1\"># execute long running query</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">last_query_elapsed_time</span>\n\n<span class=\"c1\"># Transactions</span>\n<span class=\"c1\"># ---</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">begin_transaction</span><span class=\"p\">()</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span> <span class=\"c1\"># or db.rollback()</span>\n\n<span class=\"c1\"># Data export</span>\n<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table'</span><span class=\"p\">)</span>\n<span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"n\">dataset</span>\n<span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s1\">'csv'</span><span class=\"p\">)</span> <span class=\"c1\"># yaml, json, xls, xlsx</span>\n\n<span class=\"c1\"># Goodies</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">db_version</span><span class=\"p\">()</span> <span class=\"c1\"># get server version</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span> <span class=\"c1\"># check if table exists</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_names</span><span class=\"p\">()</span> <span class=\"c1\"># get list of tables in database</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span> <span class=\"c1\"># clear cache results</span>\n</pre>\n</div>\n<div id=\"cli\">\n<h3>CLI</h3>\n<pre>ezrecords -h\nezrecords <span class=\"s2\">\"SELECT version() AS version\"</span> <span class=\"s2\">\"json\"</span> --url<span class=\"o\">=</span><span class=\"s2\">\"mysql://root:passwd@127.0.0.1:3306/test\"</span>\nezrecords <span class=\"s2\">\"SELECT version() AS version\"</span> <span class=\"s2\">\"json\"</span> --url<span class=\"o\">=</span><span class=\"s2\">\"postgres://postgres:passwd@127.0.0.1:5432/test\"</span>\nezrecords <span class=\"s2\">\"SELECT sqlite_version() AS version\"</span> <span class=\"s2\">\"json\"</span> --url<span class=\"o\">=</span><span class=\"s2\">\"sqlite:///:memory:\"</span>\n</pre>\n</div>\n</div>\n<div id=\"thank-you\">\n<h2>Thank you</h2>\n<p>Thanks for checking this library out! I hope you find it useful.</p>\n<p>Of course, there\u2019s always room for improvement. Feel free to\n<a href=\"https://github.com/dareenzo/ezrecords/issues\" rel=\"nofollow\">open an issue</a>\nso we can make <strong>ezrecords</strong> better, faster, and stronger.</p>\n</div>\n<div id=\"download-and-install\">\n<h2>Download and Install</h2>\n<p>Until the module is made available on pypi, you can install this module\ndirectly from github with:</p>\n<p><tt>pip install <span class=\"pre\">-e</span> <span class=\"pre\">git+https://github.com/dareenzo/ezrecords@master#egg=ezrecords</span></tt></p>\n<p>ezrecords runs with <strong>Python 2.7 and 3.5</strong>.</p>\n</div>\n<div id=\"documentation-generation\">\n<h2>Documentation Generation</h2>\n<pre><span class=\"c1\"># edit documentation in _docs\n</span><span class=\"nb\">cd</span> _docs\nmake singlehtml\n<span class=\"nb\">cd</span> ..\ncp -fR _docs/_build/singlehtml/* docs/\n</pre>\n</div>\n<div id=\"copyright-license\">\n<h2>Copyright &amp; License</h2>\n<p>Code and documentation are available according to the MIT License.</p>\n<p>See the <a href=\"http://www.github.com/dareenzo/ezrecords/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for details.</p>\n<p># Change log</p>\n<p>For a complete view of all the releases, visit the releases page on GitHub:\n[<a href=\"https://github.com/dareenzo/ezrecords/releases%5D(https://github.com/dareenzo/ezrecords/releases\" rel=\"nofollow\">https://github.com/dareenzo/ezrecords/releases](https://github.com/dareenzo/ezrecords/releases</a>)</p>\n<p>## v0.3.0 - 2018-05-12</p>\n<p>Features:</p>\n<ul>\n<li>Added support for SQLite</li>\n</ul>\n<p>## v0.2.0 - 2017-05-27</p>\n<p>Features:</p>\n<ul>\n<li>Bulk insert: <cite>db.bulk_insert(\u2018test_user\u2019, (\u2018username\u2019, \u2018password\u2019), [(\u2018scott\u2019, \u2018tiger\u2019), (\u2018JONES\u2019, \u2018STEEL\u2019)])</cite></li>\n</ul>\n<p>Fixes:</p>\n<ul>\n<li>Improve documentation</li>\n<li>Update base records library code</li>\n<li>Fixes error with getting passing params to query</li>\n<li>start unquoting username and password as defined in the standard RFC</li>\n</ul>\n<p>## v0.1.0 - 2017-01-07</p>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3857379, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "cd53a8bb46beb9761ad4a456217d47bb", "sha256": "f441c549caf59e6bb9b14cf0cdbe84b06c8f61100a9ed64a4f6ab239c68a864a"}, "downloads": -1, "filename": "ezrecords-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cd53a8bb46beb9761ad4a456217d47bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 182273, "upload_time": "2018-05-12T20:10:34", "upload_time_iso_8601": "2018-05-12T20:10:34.456334Z", "url": "https://files.pythonhosted.org/packages/cc/e6/77de2c3228309fd990d0c379ee3345d478aca22795925ef994a3944eed79/ezrecords-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd53a8bb46beb9761ad4a456217d47bb", "sha256": "f441c549caf59e6bb9b14cf0cdbe84b06c8f61100a9ed64a4f6ab239c68a864a"}, "downloads": -1, "filename": "ezrecords-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cd53a8bb46beb9761ad4a456217d47bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 182273, "upload_time": "2018-05-12T20:10:34", "upload_time_iso_8601": "2018-05-12T20:10:34.456334Z", "url": "https://files.pythonhosted.org/packages/cc/e6/77de2c3228309fd990d0c379ee3345d478aca22795925ef994a3944eed79/ezrecords-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:20 2020"}