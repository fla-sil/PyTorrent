{"info": {"author": "Mathias Lohne", "author_email": "mathialo@ifi.uio.no", "bugtrack_url": null, "classifiers": [], "description": "# Interactive BrainFuck\nAn interactive BrainFuck interpreter written in Bython. Why not?\n\nTo install from source, you must first build the Bython source into a Python package:\n``` bash\n$ make build\n```\nThen, you move to the `python` folder, and run the setup script:\n``` bash\n$ cd python\n$ sudo -H pip3 install .\n```\n\nAfter installation, you run an interactive session with the `ibf` command:\n```\n$ ibf \nInteractive BrainFuck - ibf v0.1\n\nibf is licensed under the permissive MIT license. Full license and\ncopyright information is available at the project's GitHub repository.\n\n[Input] +[------->++<]>-.------------.--[--->+<]>--.+.+++[->+++<]>.+++++++++++++.[-->+++++<]>+++.[-->+++++++<]>.++.---.------------.-[--->+<]>----.+++[->+++<]>++.--[--->+<]>--.+.-----------.+++++.-------------.--[--->+<]>-.-----.+++.>++++++++++.\nmaster procrastinator\n```\n\nEverything you input is interpreted as BrainFuck code, except for the following\nreserved keywords:\n\n| Command    | Description                                                                       |\n|------------|-----------------------------------------------------------------------------------|\n| tape       | Prints the current status of the tape (data cells), with the current cell in bold |\n| pos        | Prints the current position on the tape                                           |\n| quit       | Quits the session                                                                 |\n| run <file> | Run code from a file                                                              |\n\n\nYou can also run prewritten BrainFuck code, either as a standalone program, or\nin an interactive session:\n```\n$ ibf test.bf\nHello World!\n$ ibf \nInteractive BrainFuck - ibf v0.1\n\nibf is licensed under the permissive MIT license. Full license and\ncopyright information is available at the project's GitHub repository.\n\n[Input] run test.bf\nHello World!\n```\n\nThe `run` command always runs programs _inline_, ie the code is run on the\ncurrent tape and with the current tape position as starting position. Thus,\nafter running a program you can inspect the final state of the tape:\n\n```\n[Input] tape\n 0 1  2   3  4  5  6 7 8\n 0 0 72 100 87 33 10 0 0\n```\n\n\nFor more help, type `ibf -h` or view the manual page by running `man ibf`.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mathialo/interactive-brainfuck", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ibf", "package_url": "https://pypi.org/project/ibf/", "platform": "", "project_url": "https://pypi.org/project/ibf/", "project_urls": {"Homepage": "https://github.com/mathialo/interactive-brainfuck"}, "release_url": "https://pypi.org/project/ibf/0.1/", "requires_dist": ["argparse", "readline", "numpy"], "requires_python": "", "summary": "An interactive BrainFuck interpreter", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Interactive BrainFuck</h1>\n<p>An interactive BrainFuck interpreter written in Bython. Why not?</p>\n<p>To install from source, you must first build the Bython source into a Python package:</p>\n<pre>$ make build\n</pre>\n<p>Then, you move to the <code>python</code> folder, and run the setup script:</p>\n<pre>$ <span class=\"nb\">cd</span> python\n$ sudo -H pip3 install .\n</pre>\n<p>After installation, you run an interactive session with the <code>ibf</code> command:</p>\n<pre><code>$ ibf \nInteractive BrainFuck - ibf v0.1\n\nibf is licensed under the permissive MIT license. Full license and\ncopyright information is available at the project's GitHub repository.\n\n[Input] +[-------&gt;++&lt;]&gt;-.------------.--[---&gt;+&lt;]&gt;--.+.+++[-&gt;+++&lt;]&gt;.+++++++++++++.[--&gt;+++++&lt;]&gt;+++.[--&gt;+++++++&lt;]&gt;.++.---.------------.-[---&gt;+&lt;]&gt;----.+++[-&gt;+++&lt;]&gt;++.--[---&gt;+&lt;]&gt;--.+.-----------.+++++.-------------.--[---&gt;+&lt;]&gt;-.-----.+++.&gt;++++++++++.\nmaster procrastinator\n</code></pre>\n<p>Everything you input is interpreted as BrainFuck code, except for the following\nreserved keywords:</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tape</td>\n<td>Prints the current status of the tape (data cells), with the current cell in bold</td>\n</tr>\n<tr>\n<td>pos</td>\n<td>Prints the current position on the tape</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>Quits the session</td>\n</tr>\n<tr>\n<td>run &lt;file&gt;</td>\n<td>Run code from a file</td>\n</tr></tbody></table>\n<p>You can also run prewritten BrainFuck code, either as a standalone program, or\nin an interactive session:</p>\n<pre><code>$ ibf test.bf\nHello World!\n$ ibf \nInteractive BrainFuck - ibf v0.1\n\nibf is licensed under the permissive MIT license. Full license and\ncopyright information is available at the project's GitHub repository.\n\n[Input] run test.bf\nHello World!\n</code></pre>\n<p>The <code>run</code> command always runs programs <em>inline</em>, ie the code is run on the\ncurrent tape and with the current tape position as starting position. Thus,\nafter running a program you can inspect the final state of the tape:</p>\n<pre><code>[Input] tape\n 0 1  2   3  4  5  6 7 8\n 0 0 72 100 87 33 10 0 0\n</code></pre>\n<p>For more help, type <code>ibf -h</code> or view the manual page by running <code>man ibf</code>.</p>\n\n          </div>"}, "last_serial": 4542432, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "669e547291e5f025951b7dd0fb902f18", "sha256": "f6caa62cd0e2a9a4d7ef396b4732ad179a51a67217b096968910e7342f37e403"}, "downloads": -1, "filename": "ibf-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "669e547291e5f025951b7dd0fb902f18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8155, "upload_time": "2018-11-29T10:38:03", "upload_time_iso_8601": "2018-11-29T10:38:03.539594Z", "url": "https://files.pythonhosted.org/packages/64/1d/9f97d094f8006b58074aa1432c7150a523d396f0ade270d63ab18364b898/ibf-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cf73ec157fa245af4c950e064935620", "sha256": "442ab9eaa329da3d8da656c2c6337c6a43278b632d7c51bbfd13ac3b060df67b"}, "downloads": -1, "filename": "ibf-0.1.tar.gz", "has_sig": false, "md5_digest": "2cf73ec157fa245af4c950e064935620", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6383, "upload_time": "2018-11-29T10:38:06", "upload_time_iso_8601": "2018-11-29T10:38:06.199668Z", "url": "https://files.pythonhosted.org/packages/9b/db/7d9494b51e449ee9e3b491312a87e59ef8e6cebb0c1905fe52c97e4773bf/ibf-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "669e547291e5f025951b7dd0fb902f18", "sha256": "f6caa62cd0e2a9a4d7ef396b4732ad179a51a67217b096968910e7342f37e403"}, "downloads": -1, "filename": "ibf-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "669e547291e5f025951b7dd0fb902f18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8155, "upload_time": "2018-11-29T10:38:03", "upload_time_iso_8601": "2018-11-29T10:38:03.539594Z", "url": "https://files.pythonhosted.org/packages/64/1d/9f97d094f8006b58074aa1432c7150a523d396f0ade270d63ab18364b898/ibf-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cf73ec157fa245af4c950e064935620", "sha256": "442ab9eaa329da3d8da656c2c6337c6a43278b632d7c51bbfd13ac3b060df67b"}, "downloads": -1, "filename": "ibf-0.1.tar.gz", "has_sig": false, "md5_digest": "2cf73ec157fa245af4c950e064935620", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6383, "upload_time": "2018-11-29T10:38:06", "upload_time_iso_8601": "2018-11-29T10:38:06.199668Z", "url": "https://files.pythonhosted.org/packages/9b/db/7d9494b51e449ee9e3b491312a87e59ef8e6cebb0c1905fe52c97e4773bf/ibf-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:15 2020"}