{"info": {"author": "Jonathan Soma", "author_email": "jonathan.soma@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Utilities"], "description": "# fuzzy_pandas\n\nA razor-thin layer over [csvmatch](https://github.com/maxharlow/csvmatch/) that allows you to do fuzzy mathing with pandas dataframes.\n\n## Installation\n\n```\npip install fuzzy_pandas\n```\n\n## Usage\n\nTo borrow 100% from the [original repo](https://github.com/maxharlow/csvmatch), say you have one CSV file such as:\n\n```\nname,location,codename\nGeorge Smiley,London,Beggerman\nPercy Alleline,London,Tinker\nRoy Bland,London,Soldier\nToby Esterhase,Vienna,Poorman\nPeter Guillam,Brixton,none\nBill Haydon,London,Tailor\nOliver Lacon,London,none\nJim Prideaux,Slovakia,none\nConnie Sachs,Oxford,none\n```\n\nAnd another such as:\n\n```\nPerson Name,Location\nMaria Andreyevna Ostrakova,Russia\nOtto Leipzig,Estonia\nGeorge SMILEY,London\nPeter Guillam,Brixton\nKonny Saks,Oxford\nSaul Enderby,London\nSam Collins,Vietnam\nTony Esterhase,Vienna\nClaus Kretzschmar,Hamburg\n```\n\nYou can then find which names are in both files:\n\n```python\nimport pandas as pd\nimport fuzzy_pandas as fpd\n\ndf1 = pd.read_csv(\"data1.csv\")\ndf2 = pd.read_csv(\"data2.csv\")\n\nmatches = fpd.fuzzy_merge(df1, df2,\n                          left_on=['name'],\n                          right_on=['Person Name'],\n                          ignore_case=True,\n                          keep='match')\n\nprint(matches)\n```\n\n|.|name|Person Name|\n|---|---|---|\n|0|George Smiley|George SMILEY|\n|1|Peter Guillam|Peter Guillam|\n\n### Options\n\nDumping this out of the code itself, apologies for lack of pretty formatting.\n\n* **left** : DataFrame\n* **right** : DataFrame\n    - Object to merge left with\n* **on** : str or list\n    - Column names to compare. These must be found in both DataFrames.\n* **left_on** : str or list\n    - Column names to compare in the left DataFrame.\n* **right_on** : str or list\n    - Column names to compare in the right DataFrame.\n* **left_cols** : list, default None\n    - List of columns to preserve from the left DataFrame.\n    - Defaults to `left_on`.\n* **right_cols** : list, default None\n    - List of columns to preserve from the right DataFrame. \n    - Defaults to `right_on`.\n* **method** : str or list, default 'exact'\n    - Perform a fuzzy match, and an optional specified algorithm.\n    - Multiple algorithms can be specified which will apply to each field\n    respectively.\n    - Options:\n        * **exact**: exact matches\n        * **levenshtein**: string distance metric\n        * **jaro**: string distance metric\n        * **metaphone**: phoenetic matching algorithm\n        * **bilenko**: prompts for matches\n* **threshold** : float or list, default `0.6`\n    - The threshold for a fuzzy match as a number between 0 and 1. Multiple numbers will be applied to each field respectively.\n* **ignore_case** : bool, default False\n    - Ignore case (default is case-sensitive)\n* **ignore_nonalpha** : bool, default False\n    - Ignore non-alphanumeric characters\n* **ignore_nonlatin** : bool, default False\n    - Ignore characters from non-latin alphabets. Accented characters are compared to their unaccented equivalent\n* **ignore_order_words** : bool, default False\n    - Ignore the order words are given in\n* **ignore_order_letters** : bool, default False\n    - Ignore the order the letters are given in, regardless of word order\n* **ignore_titles** : bool, default False\n    - Ignore a predefined list of name titles (such as Mr, Ms, etc)\n* **join** : { 'inner', 'left-outer', 'right-outer', 'full-outer' }\n```\n\nFor more how-to information, check out [the examples folder](https://github.com/jsoma/fuzzy_pandas/tree/master/examples) or the [the original repo](https://github.com/maxharlow/csvmatch).\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jsoma/fuzzy_pandas", "keywords": "fuzzy matching pandas", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fuzzy-pandas", "package_url": "https://pypi.org/project/fuzzy-pandas/", "platform": "", "project_url": "https://pypi.org/project/fuzzy-pandas/", "project_urls": {"Homepage": "http://github.com/jsoma/fuzzy_pandas"}, "release_url": "https://pypi.org/project/fuzzy-pandas/0.1/", "requires_dist": ["pandas", "csvmatch"], "requires_python": "", "summary": "Fuzzy matching in pandas using csvmatch", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fuzzy_pandas</h1>\n<p>A razor-thin layer over <a href=\"https://github.com/maxharlow/csvmatch/\" rel=\"nofollow\">csvmatch</a> that allows you to do fuzzy mathing with pandas dataframes.</p>\n<h2>Installation</h2>\n<pre><code>pip install fuzzy_pandas\n</code></pre>\n<h2>Usage</h2>\n<p>To borrow 100% from the <a href=\"https://github.com/maxharlow/csvmatch\" rel=\"nofollow\">original repo</a>, say you have one CSV file such as:</p>\n<pre><code>name,location,codename\nGeorge Smiley,London,Beggerman\nPercy Alleline,London,Tinker\nRoy Bland,London,Soldier\nToby Esterhase,Vienna,Poorman\nPeter Guillam,Brixton,none\nBill Haydon,London,Tailor\nOliver Lacon,London,none\nJim Prideaux,Slovakia,none\nConnie Sachs,Oxford,none\n</code></pre>\n<p>And another such as:</p>\n<pre><code>Person Name,Location\nMaria Andreyevna Ostrakova,Russia\nOtto Leipzig,Estonia\nGeorge SMILEY,London\nPeter Guillam,Brixton\nKonny Saks,Oxford\nSaul Enderby,London\nSam Collins,Vietnam\nTony Esterhase,Vienna\nClaus Kretzschmar,Hamburg\n</code></pre>\n<p>You can then find which names are in both files:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">fuzzy_pandas</span> <span class=\"k\">as</span> <span class=\"nn\">fpd</span>\n\n<span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"data1.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"data2.csv\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">fpd</span><span class=\"o\">.</span><span class=\"n\">fuzzy_merge</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"n\">df2</span><span class=\"p\">,</span>\n                          <span class=\"n\">left_on</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span>\n                          <span class=\"n\">right_on</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Person Name'</span><span class=\"p\">],</span>\n                          <span class=\"n\">ignore_case</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                          <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">'match'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>.</th>\n<th>name</th>\n<th>Person Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>George Smiley</td>\n<td>George SMILEY</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Peter Guillam</td>\n<td>Peter Guillam</td>\n</tr></tbody></table>\n<h3>Options</h3>\n<p>Dumping this out of the code itself, apologies for lack of pretty formatting.</p>\n<ul>\n<li><strong>left</strong> : DataFrame</li>\n<li><strong>right</strong> : DataFrame\n<ul>\n<li>Object to merge left with</li>\n</ul>\n</li>\n<li><strong>on</strong> : str or list\n<ul>\n<li>Column names to compare. These must be found in both DataFrames.</li>\n</ul>\n</li>\n<li><strong>left_on</strong> : str or list\n<ul>\n<li>Column names to compare in the left DataFrame.</li>\n</ul>\n</li>\n<li><strong>right_on</strong> : str or list\n<ul>\n<li>Column names to compare in the right DataFrame.</li>\n</ul>\n</li>\n<li><strong>left_cols</strong> : list, default None\n<ul>\n<li>List of columns to preserve from the left DataFrame.</li>\n<li>Defaults to <code>left_on</code>.</li>\n</ul>\n</li>\n<li><strong>right_cols</strong> : list, default None\n<ul>\n<li>List of columns to preserve from the right DataFrame.</li>\n<li>Defaults to <code>right_on</code>.</li>\n</ul>\n</li>\n<li><strong>method</strong> : str or list, default 'exact'\n<ul>\n<li>Perform a fuzzy match, and an optional specified algorithm.</li>\n<li>Multiple algorithms can be specified which will apply to each field\nrespectively.</li>\n<li>Options:\n<ul>\n<li><strong>exact</strong>: exact matches</li>\n<li><strong>levenshtein</strong>: string distance metric</li>\n<li><strong>jaro</strong>: string distance metric</li>\n<li><strong>metaphone</strong>: phoenetic matching algorithm</li>\n<li><strong>bilenko</strong>: prompts for matches</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>threshold</strong> : float or list, default <code>0.6</code>\n<ul>\n<li>The threshold for a fuzzy match as a number between 0 and 1. Multiple numbers will be applied to each field respectively.</li>\n</ul>\n</li>\n<li><strong>ignore_case</strong> : bool, default False\n<ul>\n<li>Ignore case (default is case-sensitive)</li>\n</ul>\n</li>\n<li><strong>ignore_nonalpha</strong> : bool, default False\n<ul>\n<li>Ignore non-alphanumeric characters</li>\n</ul>\n</li>\n<li><strong>ignore_nonlatin</strong> : bool, default False\n<ul>\n<li>Ignore characters from non-latin alphabets. Accented characters are compared to their unaccented equivalent</li>\n</ul>\n</li>\n<li><strong>ignore_order_words</strong> : bool, default False\n<ul>\n<li>Ignore the order words are given in</li>\n</ul>\n</li>\n<li><strong>ignore_order_letters</strong> : bool, default False\n<ul>\n<li>Ignore the order the letters are given in, regardless of word order</li>\n</ul>\n</li>\n<li><strong>ignore_titles</strong> : bool, default False\n<ul>\n<li>Ignore a predefined list of name titles (such as Mr, Ms, etc)</li>\n</ul>\n</li>\n<li><strong>join</strong> : { 'inner', 'left-outer', 'right-outer', 'full-outer' }</li>\n</ul>\n<pre><code>\nFor more how-to information, check out [the examples folder](https://github.com/jsoma/fuzzy_pandas/tree/master/examples) or the [the original repo](https://github.com/maxharlow/csvmatch).\n\n</code></pre>\n\n          </div>"}, "last_serial": 5635868, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4bc903e326cc9755d30a417b03787bbe", "sha256": "d4454dac4c9cf2e6d8fe9245eebcdde9312d52e4caea814b79a901ef6255558d"}, "downloads": -1, "filename": "fuzzy_pandas-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4bc903e326cc9755d30a417b03787bbe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5206, "upload_time": "2019-08-05T19:04:23", "upload_time_iso_8601": "2019-08-05T19:04:23.051822Z", "url": "https://files.pythonhosted.org/packages/dc/70/c9de848dea88eb02ecb7b4993d188789fe35857f5b3b6dc616d957c55769/fuzzy_pandas-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70b0e9aa8b147a283bbcf0e2e7f6b61f", "sha256": "a9ffdfb327829d11dc4a15e3b049dcdebd7622771cdd33bad6adb56b848fced3"}, "downloads": -1, "filename": "fuzzy_pandas-0.1.tar.gz", "has_sig": false, "md5_digest": "70b0e9aa8b147a283bbcf0e2e7f6b61f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3946, "upload_time": "2019-08-05T19:04:25", "upload_time_iso_8601": "2019-08-05T19:04:25.387297Z", "url": "https://files.pythonhosted.org/packages/37/1c/e0e1ea616ff1d09a33b53915258dd5e4cf586aed6237358e3312a5c90be6/fuzzy_pandas-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4bc903e326cc9755d30a417b03787bbe", "sha256": "d4454dac4c9cf2e6d8fe9245eebcdde9312d52e4caea814b79a901ef6255558d"}, "downloads": -1, "filename": "fuzzy_pandas-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4bc903e326cc9755d30a417b03787bbe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5206, "upload_time": "2019-08-05T19:04:23", "upload_time_iso_8601": "2019-08-05T19:04:23.051822Z", "url": "https://files.pythonhosted.org/packages/dc/70/c9de848dea88eb02ecb7b4993d188789fe35857f5b3b6dc616d957c55769/fuzzy_pandas-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70b0e9aa8b147a283bbcf0e2e7f6b61f", "sha256": "a9ffdfb327829d11dc4a15e3b049dcdebd7622771cdd33bad6adb56b848fced3"}, "downloads": -1, "filename": "fuzzy_pandas-0.1.tar.gz", "has_sig": false, "md5_digest": "70b0e9aa8b147a283bbcf0e2e7f6b61f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3946, "upload_time": "2019-08-05T19:04:25", "upload_time_iso_8601": "2019-08-05T19:04:25.387297Z", "url": "https://files.pythonhosted.org/packages/37/1c/e0e1ea616ff1d09a33b53915258dd5e4cf586aed6237358e3312a5c90be6/fuzzy_pandas-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:31 2020"}