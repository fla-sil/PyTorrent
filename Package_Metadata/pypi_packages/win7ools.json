{"info": {"author": "Jason Wohlgemuth", "author_email": "jason.h.wohlgemuth@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: Microsoft :: Windows :: Windows 7", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Security", "Topic :: System", "Topic :: Utilities"], "description": "Win7ools Project\r\n================\r\n\r\n**Win7ools** (= *Win7 Tools* + leet_) provides programmatic access to the Windows\r\nOperating System [#]_. Win7ools was born out of the desire to list and track installed software \r\nprogrammatically and evolved into an attempt at a full-featured window into...Windows.  Win7ools \r\nis organized into a handful of modules - **lib**, **ipl**, **sec**, **pdf**, **web**, and **reg**, \r\nand the package, **system**.  \r\n\r\n\r\n\r\nThe general idea is to be able to do things that normally would require\r\na specialized piece of installed software that works mysteriously.\r\n\r\nmodules\r\n-------\r\n**ipl**\r\n  **I**\\ nstalled **P**\\ rograms **L**\\ ist - the **ipl** module scans the Windows registry and returns\r\n  information related all installed programs on the parent OS.  Comparatively, it should\r\n  find all the information that the control panel provides (sometimes more).  IPLs can be created\r\n  from an active OS, saved for various purposes, created from scratch, merged, and loaded.\r\n\r\n**lib**\r\n  A **lib**\\ rary of useful code snippets including, but not limited to:\r\n\r\n    - flattening nested lists\r\n    - truncating floats\r\n    - segmenting lists\r\n    - copying files/directories\r\n    - hiding/unhiding files\r\n    - creating symbolic links\r\n\r\n**pdf**\r\n  Leverages the Python **PDF** Toolkit, ReportLab_, to create generic PDFs and PDF checklists.\r\n\r\n**reg**\r\n  Functions and classes that Win7ools uses to work with the Windows **reg**\\ istry.  It contains several functions\r\n  for accessing and working with the registry.  It contains useful registry locations and \r\n  can retrieve & decode UserAssist data.\r\n\r\n**sec**\r\n  Handles **sec**\\ urity-related tasks.  Among other things, it contains several hashing functions\r\n  and provides access to Windows DPAPI_ functions such as ``CryptProtectData()`` and ``CryptUnprotectData()``.\r\n\r\n**web**\r\n  Functions and classes for working with the **web**.\r\n\r\npackages\r\n--------\r\n**system**\r\n  The **system** package provides access to the System class.  The System class leverages the modules listed above\r\n  to accomplish a variety of tasks including, but not limited to:\r\n\r\n    - setting the logon screen image\r\n    - getting/setting ``TRIM``\r\n    - changing drive icons\r\n    - getting process information\r\n    - working with the Windows clipboard\r\n    - finding duplicate files\r\n    - creating Windows message boxes\r\n\r\n------------------------------------------------------------------------------------------------------------------\r\n\r\nExamples\r\n--------\r\n\r\n**Use win7ools.pdf to create a shopping list:**\r\n ::\r\n\r\n    from wintools.pdf import Checklist\r\n    cl = Checklist()\r\n    cl.set_title('My Shopping List').set_pretext('Do not forget to bring a calculator')\r\n    items = ['apples', 'pears', 'broccoli', 'bread', 'chicken', 'soda']\r\n    cl.add(items)\r\n    cl.save()\r\n\r\n win7ools.pdf can check, uncheck, and highlight items.  One and two-column format is supported.\r\n\r\n**Use win7ools.ipl to print names of installed software:**\r\n ::\r\n\r\n    from wintools.ipl import IPL\r\n    ipl = IPL()  \r\n    ipl.print_names()\r\n\r\n**Use wint7ools.reg to print names of software run on host computer with the last run date and count:**\r\n ::\r\n\r\n    from wintools.reg import get_user_assist()\r\n    user_assist = get_user_assist()\r\n    for item in user_assist:\r\n        print(item['value'], item['lastrun'], item['count'])\r\n\r\n**Encrypt and decrypt data using the Windows Data Protection API:**\r\n ::\r\n    \r\n    from win7ools.sec import crypt_protect_data, crypt_unprotect_data\r\n    ctext = crypt_protect_data('Hello world')\r\n    ptext = crypt_unprotect_data(ctext)\r\n\r\n*Consult* ``help(win7ools.<module>)`` *for more information and examples*\r\n\r\n------------------------------------------------------------------------------------------------------------------\r\n\r\n.. [#] Win7ools was tested most rigorously on Win7, but should maintain at least some functionality on WinXP and Vista.\r\n.. _leet: https://en.wikipedia.org/wiki/Leet\r\n.. _ReportLab: http://www.reportlab.com/opensource/\r\n.. _DPAPI: http://msdn.microsoft.com/en-us/library/ms995355.aspx", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nexuslevel/Win7ools", "keywords": "programmatic,access,automation,customization,productivity", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "win7ools", "package_url": "https://pypi.org/project/win7ools/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/win7ools/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nexuslevel/Win7ools"}, "release_url": "https://pypi.org/project/win7ools/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Python project that provides programmatic access to the Windows OS", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Win7ools</strong> (= <em>Win7 Tools</em> + <a href=\"https://en.wikipedia.org/wiki/Leet\" rel=\"nofollow\">leet</a>) provides programmatic access to the Windows\nOperating System <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[1]</a>. Win7ools was born out of the desire to list and track installed software\nprogrammatically and evolved into an attempt at a full-featured window into\u2026Windows.  Win7ools\nis organized into a handful of modules - <strong>lib</strong>, <strong>ipl</strong>, <strong>sec</strong>, <strong>pdf</strong>, <strong>web</strong>, and <strong>reg</strong>,\nand the package, <strong>system</strong>.</p>\n<p>The general idea is to be able to do things that normally would require\na specialized piece of installed software that works mysteriously.</p>\n<div id=\"modules\">\n<h2>modules</h2>\n<dl>\n<dt><strong>ipl</strong></dt>\n<dd><strong>I</strong>nstalled <strong>P</strong>rograms <strong>L</strong>ist - the <strong>ipl</strong> module scans the Windows registry and returns\ninformation related all installed programs on the parent OS.  Comparatively, it should\nfind all the information that the control panel provides (sometimes more).  IPLs can be created\nfrom an active OS, saved for various purposes, created from scratch, merged, and loaded.</dd>\n<dt><strong>lib</strong></dt>\n<dd><p>A <strong>lib</strong>rary of useful code snippets including, but not limited to:</p>\n<blockquote>\n<ul>\n<li>flattening nested lists</li>\n<li>truncating floats</li>\n<li>segmenting lists</li>\n<li>copying files/directories</li>\n<li>hiding/unhiding files</li>\n<li>creating symbolic links</li>\n</ul>\n</blockquote>\n</dd>\n<dt><strong>pdf</strong></dt>\n<dd>Leverages the Python <strong>PDF</strong> Toolkit, <a href=\"http://www.reportlab.com/opensource/\" rel=\"nofollow\">ReportLab</a>, to create generic PDFs and PDF checklists.</dd>\n<dt><strong>reg</strong></dt>\n<dd>Functions and classes that Win7ools uses to work with the Windows <strong>reg</strong>istry.  It contains several functions\nfor accessing and working with the registry.  It contains useful registry locations and\ncan retrieve &amp; decode UserAssist data.</dd>\n<dt><strong>sec</strong></dt>\n<dd>Handles <strong>sec</strong>urity-related tasks.  Among other things, it contains several hashing functions\nand provides access to Windows <a href=\"http://msdn.microsoft.com/en-us/library/ms995355.aspx\" rel=\"nofollow\">DPAPI</a> functions such as <tt>CryptProtectData()</tt> and <tt>CryptUnprotectData()</tt>.</dd>\n<dt><strong>web</strong></dt>\n<dd>Functions and classes for working with the <strong>web</strong>.</dd>\n</dl>\n</div>\n<div id=\"packages\">\n<h2>packages</h2>\n<dl>\n<dt><strong>system</strong></dt>\n<dd><p>The <strong>system</strong> package provides access to the System class.  The System class leverages the modules listed above\nto accomplish a variety of tasks including, but not limited to:</p>\n<blockquote>\n<ul>\n<li>setting the logon screen image</li>\n<li>getting/setting <tt>TRIM</tt></li>\n<li>changing drive icons</li>\n<li>getting process information</li>\n<li>working with the Windows clipboard</li>\n<li>finding duplicate files</li>\n<li>creating Windows message boxes</li>\n</ul>\n</blockquote>\n</dd>\n</dl>\n</div>\n<hr class=\"docutils\">\n<div id=\"examples\">\n<h2>Examples</h2>\n<dl>\n<dt><strong>Use win7ools.pdf to create a shopping list:</strong></dt>\n<dd><pre>from wintools.pdf import Checklist\ncl = Checklist()\ncl.set_title('My Shopping List').set_pretext('Do not forget to bring a calculator')\nitems = ['apples', 'pears', 'broccoli', 'bread', 'chicken', 'soda']\ncl.add(items)\ncl.save()\n</pre>\n<p>win7ools.pdf can check, uncheck, and highlight items.  One and two-column format is supported.</p>\n</dd>\n<dt><strong>Use win7ools.ipl to print names of installed software:</strong></dt>\n<dd><pre>from wintools.ipl import IPL\nipl = IPL()\nipl.print_names()\n</pre>\n</dd>\n<dt><strong>Use wint7ools.reg to print names of software run on host computer with the last run date and count:</strong></dt>\n<dd><pre>from wintools.reg import get_user_assist()\nuser_assist = get_user_assist()\nfor item in user_assist:\n    print(item['value'], item['lastrun'], item['count'])\n</pre>\n</dd>\n<dt><strong>Encrypt and decrypt data using the Windows Data Protection API:</strong></dt>\n<dd><pre>from win7ools.sec import crypt_protect_data, crypt_unprotect_data\nctext = crypt_protect_data('Hello world')\nptext = crypt_unprotect_data(ctext)\n</pre>\n</dd>\n</dl>\n<p><em>Consult</em> <tt><span class=\"pre\">help(win7ools.&lt;module&gt;)</span></tt> <em>for more information and examples</em></p>\n<hr class=\"docutils\">\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>Win7ools was tested most rigorously on Win7, but should maintain at least some functionality on WinXP and Vista.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 1366079, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "9cb547e246167a8f59aa3409882bc20a", "sha256": "eb23b6f92bc78e53480de5c4fd63a5e9f76df2313f8a39f83cc3a5aad5dc4592"}, "downloads": -1, "filename": "win7ools-0.3.0-py2.7.egg", "has_sig": false, "md5_digest": "9cb547e246167a8f59aa3409882bc20a", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 78584, "upload_time": "2014-12-31T14:58:04", "upload_time_iso_8601": "2014-12-31T14:58:04.405358Z", "url": "https://files.pythonhosted.org/packages/4c/5f/6b31cc00b78d26b5b0daf7fa90b2e9a73af616ac359802914e5fc3fc9117/win7ools-0.3.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ceab5766461d3129ee18b96aaa662a5e", "sha256": "e7c47dae658c314d4271e193adc397eb662469b3c8ea74ef1c080d71062358fd"}, "downloads": -1, "filename": "win7ools-0.3.0.zip", "has_sig": false, "md5_digest": "ceab5766461d3129ee18b96aaa662a5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43258, "upload_time": "2014-12-31T14:58:02", "upload_time_iso_8601": "2014-12-31T14:58:02.477703Z", "url": "https://files.pythonhosted.org/packages/50/f8/067d5198b8bef66a98d52d3c98bc948e4d6a0c59d749e2fca3f2b2c95118/win7ools-0.3.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9cb547e246167a8f59aa3409882bc20a", "sha256": "eb23b6f92bc78e53480de5c4fd63a5e9f76df2313f8a39f83cc3a5aad5dc4592"}, "downloads": -1, "filename": "win7ools-0.3.0-py2.7.egg", "has_sig": false, "md5_digest": "9cb547e246167a8f59aa3409882bc20a", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 78584, "upload_time": "2014-12-31T14:58:04", "upload_time_iso_8601": "2014-12-31T14:58:04.405358Z", "url": "https://files.pythonhosted.org/packages/4c/5f/6b31cc00b78d26b5b0daf7fa90b2e9a73af616ac359802914e5fc3fc9117/win7ools-0.3.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ceab5766461d3129ee18b96aaa662a5e", "sha256": "e7c47dae658c314d4271e193adc397eb662469b3c8ea74ef1c080d71062358fd"}, "downloads": -1, "filename": "win7ools-0.3.0.zip", "has_sig": false, "md5_digest": "ceab5766461d3129ee18b96aaa662a5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43258, "upload_time": "2014-12-31T14:58:02", "upload_time_iso_8601": "2014-12-31T14:58:02.477703Z", "url": "https://files.pythonhosted.org/packages/50/f8/067d5198b8bef66a98d52d3c98bc948e4d6a0c59d749e2fca3f2b2c95118/win7ools-0.3.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:29:02 2020"}