{"info": {"author": "Druid Developers", "author_email": "druid-development@googlegroups.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# pydruid\n\npydruid exposes a simple API to create, execute, and analyze [Druid](http://druid.io/) queries. pydruid can parse query results into [Pandas](http://pandas.pydata.org/) DataFrame objects for subsequent data analysis -- this offers a tight integration between [Druid](http://druid.io/), the [SciPy](http://www.scipy.org/stackspec.html) stack (for scientific computing) and [scikit-learn](http://scikit-learn.org/stable/) (for machine learning). pydruid can export query results into TSV or JSON for further processing with your favorite tool, e.g., R, Julia, Matlab, Excel. It provides both synchronous and asynchronous clients.\n\nAdditionally, pydruid implements the [Python DB API 2.0](https://www.python.org/dev/peps/pep-0249/), a [SQLAlchemy dialect](http://docs.sqlalchemy.org/en/latest/dialects/), and a provides a command line interface to interact with Druid.\n\nTo install:\n```python\npip install pydruid\n# or, if you intend to use asynchronous client\npip install pydruid[async]\n# or, if you intend to export query results into pandas\npip install pydruid[pandas]\n# or, if you intend to do both\npip install pydruid[async, pandas]\n# or, if you want to use the SQLAlchemy engine\npip install pydruid[sqlalchemy]\n# or, if you want to use the CLI\npip install pydruid[cli]\n```\nDocumentation: https://pythonhosted.org/pydruid/.\n\n# examples\n\nThe following exampes show how to execute and analyze the results of three types of queries: timeseries, topN, and groupby. We will use these queries to ask simple questions about twitter's public data set.\n\n## timeseries\n\nWhat was the average tweet length, per day, surrounding the 2014 Sochi olympics?\n\n```python\nfrom pydruid.client import *\nfrom pylab import plt\n\nquery = PyDruid(druid_url_goes_here, 'druid/v2')\n\nts = query.timeseries(\n    datasource='twitterstream',\n    granularity='day',\n    intervals='2014-02-02/p4w',\n    aggregations={'length': doublesum('tweet_length'), 'count': doublesum('count')},\n    post_aggregations={'avg_tweet_length': (Field('length') / Field('count'))},\n    filter=Dimension('first_hashtag') == 'sochi2014'\n)\ndf = query.export_pandas()\ndf['timestamp'] = df['timestamp'].map(lambda x: x.split('T')[0])\ndf.plot(x='timestamp', y='avg_tweet_length', ylim=(80, 140), rot=20,\n        title='Sochi 2014')\nplt.ylabel('avg tweet length (chars)')\nplt.show()\n```\n\n![alt text](https://github.com/metamx/pydruid/raw/master/docs/figures/avg_tweet_length.png \"Avg. tweet length\")\n\n## topN\n\nWho were the top ten mentions (@user_name) during the 2014 Oscars?\n\n```python\ntop = query.topn(\n    datasource='twitterstream',\n    granularity='all',\n    intervals='2014-03-03/p1d',  # utc time of 2014 oscars\n    aggregations={'count': doublesum('count')},\n    dimension='user_mention_name',\n    filter=(Dimension('user_lang') == 'en') & (Dimension('first_hashtag') == 'oscars') &\n           (Dimension('user_time_zone') == 'Pacific Time (US & Canada)') &\n           ~(Dimension('user_mention_name') == 'No Mention'),\n    metric='count',\n    threshold=10\n)\n\ndf = query.export_pandas()\nprint df\n\n   count                 timestamp user_mention_name\n0   1303  2014-03-03T00:00:00.000Z      TheEllenShow\n1     44  2014-03-03T00:00:00.000Z        TheAcademy\n2     21  2014-03-03T00:00:00.000Z               MTV\n3     21  2014-03-03T00:00:00.000Z         peoplemag\n4     17  2014-03-03T00:00:00.000Z               THR\n5     16  2014-03-03T00:00:00.000Z      ItsQueenElsa\n6     16  2014-03-03T00:00:00.000Z           eonline\n7     15  2014-03-03T00:00:00.000Z       PerezHilton\n8     14  2014-03-03T00:00:00.000Z     realjohngreen\n9     12  2014-03-03T00:00:00.000Z       KevinSpacey\n\n```\n\n## groupby\n\nWhat does the social network of users replying to other users look like?\n\n```python\nfrom igraph import *\nfrom cairo import *\nfrom pandas import concat\n\ngroup = query.groupby(\n    datasource='twitterstream',\n    granularity='hour',\n    intervals='2013-10-04/pt12h',\n    dimensions=[\"user_name\", \"reply_to_name\"],\n    filter=(~(Dimension(\"reply_to_name\") == \"Not A Reply\")) &\n           (Dimension(\"user_location\") == \"California\"),\n    aggregations={\"count\": doublesum(\"count\")}\n)\n\ndf = query.export_pandas()\n\n# map names to categorical variables with a lookup table\nnames = concat([df['user_name'], df['reply_to_name']]).unique()\nnameLookup = dict([pair[::-1] for pair in enumerate(names)])\ndf['user_name_lookup'] = df['user_name'].map(nameLookup.get)\ndf['reply_to_name_lookup'] = df['reply_to_name'].map(nameLookup.get)\n\n# create the graph with igraph\ng = Graph(len(names), directed=False)\nvertices = zip(df['user_name_lookup'], df['reply_to_name_lookup'])\ng.vs[\"name\"] = names\ng.add_edges(vertices)\nlayout = g.layout_fruchterman_reingold()\nplot(g, \"tweets.png\", layout=layout, vertex_size=2, bbox=(400, 400), margin=25, edge_width=1, vertex_color=\"blue\")\n```\n\n![alt text](https://github.com/metamx/pydruid/raw/master/docs/figures/twitter_graph.png \"Social Network\")\n\n# asynchronous client\n```pydruid.async_client.AsyncPyDruid``` implements an asynchronous client. To achieve that, it utilizes an asynchronous\nHTTP client from ```Tornado``` framework. The asynchronous client is suitable for use with async frameworks such as Tornado\nand provides much better performance at scale. It lets you serve multiple requests at the same time, without blocking on\nDruid executing your queries.\n\n## example\n```python\nfrom tornado import gen\nfrom pydruid.async_client import AsyncPyDruid\nfrom pydruid.utils.aggregators import longsum\nfrom pydruid.utils.filters import Dimension\n\nclient = AsyncPyDruid(url_to_druid_broker, 'druid/v2')\n\n@gen.coroutine\ndef your_asynchronous_method_serving_top10_mentions_for_day(day\n    top_mentions = yield client.topn(\n        datasource='twitterstream',\n        granularity='all',\n        intervals=\"%s/p1d\" % (day, ),\n        aggregations={'count': doublesum('count')},\n        dimension='user_mention_name',\n        filter=(Dimension('user_lang') == 'en') & (Dimension('first_hashtag') == 'oscars') &\n               (Dimension('user_time_zone') == 'Pacific Time (US & Canada)') &\n               ~(Dimension('user_mention_name') == 'No Mention'),\n        metric='count',\n        threshold=10)\n\n    # asynchronously return results\n    # can be simply ```return top_mentions``` in python 3.x\n    raise gen.Return(top_mentions)\n```\n\n\n# thetaSketches\nTheta sketch Post aggregators are built slightly differently to normal Post Aggregators, as they have different operators.\nNote: you must have the ```druid-datasketches``` extension loaded into your Druid cluster in order to use these.\nSee the [Druid datasketches](http://druid.io/docs/latest/development/extensions-core/datasketches-aggregators.html) documentation for details.\n\n```python\nfrom pydruid.client import *\nfrom pydruid.utils import aggregators\nfrom pydruid.utils import filters\nfrom pydruid.utils import postaggregator\n\nquery = PyDruid(url_to_druid_broker, 'druid/v2')\nts = query.groupby(\n    datasource='test_datasource',\n    granularity='all',\n    intervals='2016-09-01/P1M',\n    filter = ( filters.Dimension('product').in_(['product_A', 'product_B'])),\n    aggregations={\n        'product_A_users': aggregators.filtered(\n            filters.Dimension('product') == 'product_A',\n            aggregators.thetasketch('user_id')\n            ),\n        'product_B_users': aggregators.filtered(\n            filters.Dimension('product') == 'product_B',\n            aggregators.thetasketch('user_id')\n            )\n    },\n    post_aggregations={\n        'both_A_and_B': postaggregator.ThetaSketchEstimate(\n            postaggregator.ThetaSketch('product_A_users') & postaggregator.ThetaSketch('product_B_users')\n            )\n    }\n)\n```\n\n# DB API\n\n```python\nfrom pydruid.db import connect\n\nconn = connect(host='localhost', port=8082, path='/druid/v2/sql/', scheme='http')\ncurs = conn.cursor()\ncurs.execute(\"\"\"\n    SELECT place,\n           CAST(REGEXP_EXTRACT(place, '(.*),', 1) AS FLOAT) AS lat,\n           CAST(REGEXP_EXTRACT(place, ',(.*)', 1) AS FLOAT) AS lon\n      FROM places\n     LIMIT 10\n\"\"\")\nfor row in curs:\n    print(row)\n```\n\n# SQLAlchemy\n\n```python\nfrom sqlalchemy import *\nfrom sqlalchemy.engine import create_engine\nfrom sqlalchemy.schema import *\n\nengine = create_engine('druid://localhost:8082/druid/v2/sql/')  # uses HTTP by default :(\n# engine = create_engine('druid+http://localhost:8082/druid/v2/sql/')\n# engine = create_engine('druid+https://localhost:8082/druid/v2/sql/')\n\nplaces = Table('places', MetaData(bind=engine), autoload=True)\nprint(select([func.count('*')], from_obj=places).scalar())\n```\n\n\n## Column headers\n\nIn version 0.13.0 Druid SQL added support for including the column names in the\nresponse which can be requested via the \"header\" field in the request. This\nhelps to ensure that the cursor description is defined (which is a requirement\nfor SQLAlchemy query statements) regardless on whether the result set contains\nany rows. Historically this was problematic for result sets which contained no\nrows at one could not infer the expected column names.\n\nEnabling the header can be configured via the SQLAlchemy URI by using the query\nparameter, i.e.,\n\n```python\nengine = create_engine('druid://localhost:8082/druid/v2/sql?header=true')\n```\n\nNote the current default is `false` to ensure backwards compatibility but should\nbe set to `true` for Druid versions >= 0.13.0.\n\n\n# Command line\n\n```bash\n$ pydruid http://localhost:8082/druid/v2/sql/\n> SELECT COUNT(*) AS cnt FROM places\n  cnt\n-----\n12345\n> SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;\nTABLE_NAME\n----------\ntest_table\nCOLUMNS\nSCHEMATA\nTABLES\n> BYE;\nGoodBye!\n```\n\n# Contributing\n\nContributions are welcomed of course. We like to use `black` and `flake8`.\n\n```bash\npip install -r requirements-dev.txt  # installs useful dev deps\npre-commit install  # installs useful commit hooks\n```", "description_content_type": "text/markdown", "docs_url": "https://pythonhosted.org/pydruid/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/pydruid/", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "pydruid", "package_url": "https://pypi.org/project/pydruid/", "platform": "", "project_url": "https://pypi.org/project/pydruid/", "project_urls": {"Homepage": "https://pypi.python.org/pypi/pydruid/"}, "release_url": "https://pypi.org/project/pydruid/0.5.9/", "requires_dist": null, "requires_python": "", "summary": "A Python connector for Druid.", "version": "0.5.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pydruid</h1>\n<p>pydruid exposes a simple API to create, execute, and analyze <a href=\"http://druid.io/\" rel=\"nofollow\">Druid</a> queries. pydruid can parse query results into <a href=\"http://pandas.pydata.org/\" rel=\"nofollow\">Pandas</a> DataFrame objects for subsequent data analysis -- this offers a tight integration between <a href=\"http://druid.io/\" rel=\"nofollow\">Druid</a>, the <a href=\"http://www.scipy.org/stackspec.html\" rel=\"nofollow\">SciPy</a> stack (for scientific computing) and <a href=\"http://scikit-learn.org/stable/\" rel=\"nofollow\">scikit-learn</a> (for machine learning). pydruid can export query results into TSV or JSON for further processing with your favorite tool, e.g., R, Julia, Matlab, Excel. It provides both synchronous and asynchronous clients.</p>\n<p>Additionally, pydruid implements the <a href=\"https://www.python.org/dev/peps/pep-0249/\" rel=\"nofollow\">Python DB API 2.0</a>, a <a href=\"http://docs.sqlalchemy.org/en/latest/dialects/\" rel=\"nofollow\">SQLAlchemy dialect</a>, and a provides a command line interface to interact with Druid.</p>\n<p>To install:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pydruid</span>\n<span class=\"c1\"># or, if you intend to use asynchronous client</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pydruid</span><span class=\"p\">[</span><span class=\"k\">async</span><span class=\"p\">]</span>\n<span class=\"c1\"># or, if you intend to export query results into pandas</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pydruid</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"p\">]</span>\n<span class=\"c1\"># or, if you intend to do both</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pydruid</span><span class=\"p\">[</span><span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"p\">]</span>\n<span class=\"c1\"># or, if you want to use the SQLAlchemy engine</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pydruid</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"p\">]</span>\n<span class=\"c1\"># or, if you want to use the CLI</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pydruid</span><span class=\"p\">[</span><span class=\"n\">cli</span><span class=\"p\">]</span>\n</pre>\n<p>Documentation: <a href=\"https://pythonhosted.org/pydruid/\" rel=\"nofollow\">https://pythonhosted.org/pydruid/</a>.</p>\n<h1>examples</h1>\n<p>The following exampes show how to execute and analyze the results of three types of queries: timeseries, topN, and groupby. We will use these queries to ask simple questions about twitter's public data set.</p>\n<h2>timeseries</h2>\n<p>What was the average tweet length, per day, surrounding the 2014 Sochi olympics?</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydruid.client</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylab</span> <span class=\"kn\">import</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">PyDruid</span><span class=\"p\">(</span><span class=\"n\">druid_url_goes_here</span><span class=\"p\">,</span> <span class=\"s1\">'druid/v2'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">datasource</span><span class=\"o\">=</span><span class=\"s1\">'twitterstream'</span><span class=\"p\">,</span>\n    <span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"s1\">'day'</span><span class=\"p\">,</span>\n    <span class=\"n\">intervals</span><span class=\"o\">=</span><span class=\"s1\">'2014-02-02/p4w'</span><span class=\"p\">,</span>\n    <span class=\"n\">aggregations</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'length'</span><span class=\"p\">:</span> <span class=\"n\">doublesum</span><span class=\"p\">(</span><span class=\"s1\">'tweet_length'</span><span class=\"p\">),</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"n\">doublesum</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">)},</span>\n    <span class=\"n\">post_aggregations</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'avg_tweet_length'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'length'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">))},</span>\n    <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'first_hashtag'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'sochi2014'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">export_pandas</span><span class=\"p\">()</span>\n<span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'timestamp'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'timestamp'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'T'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'timestamp'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'avg_tweet_length'</span><span class=\"p\">,</span> <span class=\"n\">ylim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">),</span> <span class=\"n\">rot</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Sochi 2014'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'avg tweet length (chars)'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49a77fafa0664c66a89470654244e9b9a006601a/68747470733a2f2f6769746875622e636f6d2f6d6574616d782f707964727569642f7261772f6d61737465722f646f63732f666967757265732f6176675f74776565745f6c656e6774682e706e67\"></p>\n<h2>topN</h2>\n<p>Who were the top ten mentions (@user_name) during the 2014 Oscars?</p>\n<pre><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">topn</span><span class=\"p\">(</span>\n    <span class=\"n\">datasource</span><span class=\"o\">=</span><span class=\"s1\">'twitterstream'</span><span class=\"p\">,</span>\n    <span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"s1\">'all'</span><span class=\"p\">,</span>\n    <span class=\"n\">intervals</span><span class=\"o\">=</span><span class=\"s1\">'2014-03-03/p1d'</span><span class=\"p\">,</span>  <span class=\"c1\"># utc time of 2014 oscars</span>\n    <span class=\"n\">aggregations</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"n\">doublesum</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">)},</span>\n    <span class=\"n\">dimension</span><span class=\"o\">=</span><span class=\"s1\">'user_mention_name'</span><span class=\"p\">,</span>\n    <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'user_lang'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'en'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'first_hashtag'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'oscars'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n           <span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'user_time_zone'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'Pacific Time (US &amp; Canada)'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n           <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'user_mention_name'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'No Mention'</span><span class=\"p\">),</span>\n    <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">'count'</span><span class=\"p\">,</span>\n    <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">export_pandas</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">df</span>\n\n   <span class=\"n\">count</span>                 <span class=\"n\">timestamp</span> <span class=\"n\">user_mention_name</span>\n<span class=\"mi\">0</span>   <span class=\"mi\">1303</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>      <span class=\"n\">TheEllenShow</span>\n<span class=\"mi\">1</span>     <span class=\"mi\">44</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>        <span class=\"n\">TheAcademy</span>\n<span class=\"mi\">2</span>     <span class=\"mi\">21</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>               <span class=\"n\">MTV</span>\n<span class=\"mi\">3</span>     <span class=\"mi\">21</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>         <span class=\"n\">peoplemag</span>\n<span class=\"mi\">4</span>     <span class=\"mi\">17</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>               <span class=\"n\">THR</span>\n<span class=\"mi\">5</span>     <span class=\"mi\">16</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>      <span class=\"n\">ItsQueenElsa</span>\n<span class=\"mi\">6</span>     <span class=\"mi\">16</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>           <span class=\"n\">eonline</span>\n<span class=\"mi\">7</span>     <span class=\"mi\">15</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>       <span class=\"n\">PerezHilton</span>\n<span class=\"mi\">8</span>     <span class=\"mi\">14</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>     <span class=\"n\">realjohngreen</span>\n<span class=\"mi\">9</span>     <span class=\"mi\">12</span>  <span class=\"mi\">2014</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"n\">T00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000</span><span class=\"n\">Z</span>       <span class=\"n\">KevinSpacey</span>\n</pre>\n<h2>groupby</h2>\n<p>What does the social network of users replying to other users look like?</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">igraph</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cairo</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pandas</span> <span class=\"kn\">import</span> <span class=\"n\">concat</span>\n\n<span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span>\n    <span class=\"n\">datasource</span><span class=\"o\">=</span><span class=\"s1\">'twitterstream'</span><span class=\"p\">,</span>\n    <span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"s1\">'hour'</span><span class=\"p\">,</span>\n    <span class=\"n\">intervals</span><span class=\"o\">=</span><span class=\"s1\">'2013-10-04/pt12h'</span><span class=\"p\">,</span>\n    <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"user_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"reply_to_name\"</span><span class=\"p\">],</span>\n    <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s2\">\"reply_to_name\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"Not A Reply\"</span><span class=\"p\">))</span> <span class=\"o\">&amp;</span>\n           <span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s2\">\"user_location\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"California\"</span><span class=\"p\">),</span>\n    <span class=\"n\">aggregations</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"count\"</span><span class=\"p\">:</span> <span class=\"n\">doublesum</span><span class=\"p\">(</span><span class=\"s2\">\"count\"</span><span class=\"p\">)}</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">export_pandas</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># map names to categorical variables with a lookup table</span>\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'user_name'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'reply_to_name'</span><span class=\"p\">]])</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">()</span>\n<span class=\"n\">nameLookup</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">([</span><span class=\"n\">pair</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)])</span>\n<span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'user_name_lookup'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'user_name'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">nameLookup</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'reply_to_name_lookup'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'reply_to_name'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">nameLookup</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create the graph with igraph</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">),</span> <span class=\"n\">directed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'user_name_lookup'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'reply_to_name_lookup'</span><span class=\"p\">])</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">vs</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">names</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edges</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">)</span>\n<span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">layout_fruchterman_reingold</span><span class=\"p\">()</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"s2\">\"tweets.png\"</span><span class=\"p\">,</span> <span class=\"n\">layout</span><span class=\"o\">=</span><span class=\"n\">layout</span><span class=\"p\">,</span> <span class=\"n\">vertex_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">bbox</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">),</span> <span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">edge_width</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">vertex_color</span><span class=\"o\">=</span><span class=\"s2\">\"blue\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/317f578afcac8ab96b1c7e6981e1dd7e40912fc4/68747470733a2f2f6769746875622e636f6d2f6d6574616d782f707964727569642f7261772f6d61737465722f646f63732f666967757265732f747769747465725f67726170682e706e67\"></p>\n<h1>asynchronous client</h1>\n<p><code>pydruid.async_client.AsyncPyDruid</code> implements an asynchronous client. To achieve that, it utilizes an asynchronous\nHTTP client from <code>Tornado</code> framework. The asynchronous client is suitable for use with async frameworks such as Tornado\nand provides much better performance at scale. It lets you serve multiple requests at the same time, without blocking on\nDruid executing your queries.</p>\n<h2>example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tornado</span> <span class=\"kn\">import</span> <span class=\"n\">gen</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydruid.async_client</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncPyDruid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydruid.utils.aggregators</span> <span class=\"kn\">import</span> <span class=\"n\">longsum</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydruid.utils.filters</span> <span class=\"kn\">import</span> <span class=\"n\">Dimension</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncPyDruid</span><span class=\"p\">(</span><span class=\"n\">url_to_druid_broker</span><span class=\"p\">,</span> <span class=\"s1\">'druid/v2'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@gen</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">your_asynchronous_method_serving_top10_mentions_for_day</span><span class=\"p\">(</span><span class=\"n\">day</span>\n    <span class=\"n\">top_mentions</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">topn</span><span class=\"p\">(</span>\n        <span class=\"n\">datasource</span><span class=\"o\">=</span><span class=\"s1\">'twitterstream'</span><span class=\"p\">,</span>\n        <span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"s1\">'all'</span><span class=\"p\">,</span>\n        <span class=\"n\">intervals</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">/p1d\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">day</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n        <span class=\"n\">aggregations</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"n\">doublesum</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">)},</span>\n        <span class=\"n\">dimension</span><span class=\"o\">=</span><span class=\"s1\">'user_mention_name'</span><span class=\"p\">,</span>\n        <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'user_lang'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'en'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'first_hashtag'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'oscars'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n               <span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'user_time_zone'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'Pacific Time (US &amp; Canada)'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>\n               <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'user_mention_name'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'No Mention'</span><span class=\"p\">),</span>\n        <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">'count'</span><span class=\"p\">,</span>\n        <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># asynchronously return results</span>\n    <span class=\"c1\"># can be simply ```return top_mentions``` in python 3.x</span>\n    <span class=\"k\">raise</span> <span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">Return</span><span class=\"p\">(</span><span class=\"n\">top_mentions</span><span class=\"p\">)</span>\n</pre>\n<h1>thetaSketches</h1>\n<p>Theta sketch Post aggregators are built slightly differently to normal Post Aggregators, as they have different operators.\nNote: you must have the <code>druid-datasketches</code> extension loaded into your Druid cluster in order to use these.\nSee the <a href=\"http://druid.io/docs/latest/development/extensions-core/datasketches-aggregators.html\" rel=\"nofollow\">Druid datasketches</a> documentation for details.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydruid.client</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydruid.utils</span> <span class=\"kn\">import</span> <span class=\"n\">aggregators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydruid.utils</span> <span class=\"kn\">import</span> <span class=\"n\">filters</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydruid.utils</span> <span class=\"kn\">import</span> <span class=\"n\">postaggregator</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">PyDruid</span><span class=\"p\">(</span><span class=\"n\">url_to_druid_broker</span><span class=\"p\">,</span> <span class=\"s1\">'druid/v2'</span><span class=\"p\">)</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span>\n    <span class=\"n\">datasource</span><span class=\"o\">=</span><span class=\"s1\">'test_datasource'</span><span class=\"p\">,</span>\n    <span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"s1\">'all'</span><span class=\"p\">,</span>\n    <span class=\"n\">intervals</span><span class=\"o\">=</span><span class=\"s1\">'2016-09-01/P1M'</span><span class=\"p\">,</span>\n    <span class=\"nb\">filter</span> <span class=\"o\">=</span> <span class=\"p\">(</span> <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'product'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">in_</span><span class=\"p\">([</span><span class=\"s1\">'product_A'</span><span class=\"p\">,</span> <span class=\"s1\">'product_B'</span><span class=\"p\">])),</span>\n    <span class=\"n\">aggregations</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'product_A_users'</span><span class=\"p\">:</span> <span class=\"n\">aggregators</span><span class=\"o\">.</span><span class=\"n\">filtered</span><span class=\"p\">(</span>\n            <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'product'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'product_A'</span><span class=\"p\">,</span>\n            <span class=\"n\">aggregators</span><span class=\"o\">.</span><span class=\"n\">thetasketch</span><span class=\"p\">(</span><span class=\"s1\">'user_id'</span><span class=\"p\">)</span>\n            <span class=\"p\">),</span>\n        <span class=\"s1\">'product_B_users'</span><span class=\"p\">:</span> <span class=\"n\">aggregators</span><span class=\"o\">.</span><span class=\"n\">filtered</span><span class=\"p\">(</span>\n            <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">Dimension</span><span class=\"p\">(</span><span class=\"s1\">'product'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'product_B'</span><span class=\"p\">,</span>\n            <span class=\"n\">aggregators</span><span class=\"o\">.</span><span class=\"n\">thetasketch</span><span class=\"p\">(</span><span class=\"s1\">'user_id'</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">post_aggregations</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'both_A_and_B'</span><span class=\"p\">:</span> <span class=\"n\">postaggregator</span><span class=\"o\">.</span><span class=\"n\">ThetaSketchEstimate</span><span class=\"p\">(</span>\n            <span class=\"n\">postaggregator</span><span class=\"o\">.</span><span class=\"n\">ThetaSketch</span><span class=\"p\">(</span><span class=\"s1\">'product_A_users'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">postaggregator</span><span class=\"o\">.</span><span class=\"n\">ThetaSketch</span><span class=\"p\">(</span><span class=\"s1\">'product_B_users'</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>DB API</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydruid.db</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8082</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/druid/v2/sql/'</span><span class=\"p\">,</span> <span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"s1\">'http'</span><span class=\"p\">)</span>\n<span class=\"n\">curs</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"n\">curs</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    SELECT place,</span>\n<span class=\"s2\">           CAST(REGEXP_EXTRACT(place, '(.*),', 1) AS FLOAT) AS lat,</span>\n<span class=\"s2\">           CAST(REGEXP_EXTRACT(place, ',(.*)', 1) AS FLOAT) AS lon</span>\n<span class=\"s2\">      FROM places</span>\n<span class=\"s2\">     LIMIT 10</span>\n<span class=\"s2\">\"\"\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">curs</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</pre>\n<h1>SQLAlchemy</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.engine</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.schema</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"s1\">'druid://localhost:8082/druid/v2/sql/'</span><span class=\"p\">)</span>  <span class=\"c1\"># uses HTTP by default :(</span>\n<span class=\"c1\"># engine = create_engine('druid+http://localhost:8082/druid/v2/sql/')</span>\n<span class=\"c1\"># engine = create_engine('druid+https://localhost:8082/druid/v2/sql/')</span>\n\n<span class=\"n\">places</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'places'</span><span class=\"p\">,</span> <span class=\"n\">MetaData</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"p\">),</span> <span class=\"n\">autoload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)],</span> <span class=\"n\">from_obj</span><span class=\"o\">=</span><span class=\"n\">places</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">())</span>\n</pre>\n<h2>Column headers</h2>\n<p>In version 0.13.0 Druid SQL added support for including the column names in the\nresponse which can be requested via the \"header\" field in the request. This\nhelps to ensure that the cursor description is defined (which is a requirement\nfor SQLAlchemy query statements) regardless on whether the result set contains\nany rows. Historically this was problematic for result sets which contained no\nrows at one could not infer the expected column names.</p>\n<p>Enabling the header can be configured via the SQLAlchemy URI by using the query\nparameter, i.e.,</p>\n<pre><span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"s1\">'druid://localhost:8082/druid/v2/sql?header=true'</span><span class=\"p\">)</span>\n</pre>\n<p>Note the current default is <code>false</code> to ensure backwards compatibility but should\nbe set to <code>true</code> for Druid versions &gt;= 0.13.0.</p>\n<h1>Command line</h1>\n<pre>$ pydruid http://localhost:8082/druid/v2/sql/\n&gt; SELECT COUNT<span class=\"o\">(</span>*<span class=\"o\">)</span> AS cnt FROM places\n  cnt\n-----\n<span class=\"m\">12345</span>\n&gt; SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES<span class=\"p\">;</span>\nTABLE_NAME\n----------\ntest_table\nCOLUMNS\nSCHEMATA\nTABLES\n&gt; BYE<span class=\"p\">;</span>\nGoodBye!\n</pre>\n<h1>Contributing</h1>\n<p>Contributions are welcomed of course. We like to use <code>black</code> and <code>flake8</code>.</p>\n<pre>pip install -r requirements-dev.txt  <span class=\"c1\"># installs useful dev deps</span>\npre-commit install  <span class=\"c1\"># installs useful commit hooks</span>\n</pre>\n\n          </div>"}, "last_serial": 6806688, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "878c8a2e1108e80d144d8f9812653d8d", "sha256": "082c7a4d32aa4f4f5458b367a24a43e333b913c77c1fdf7483c34d5fa3c35201"}, "downloads": -1, "filename": "pydruid-0.2.0.tar.gz", "has_sig": false, "md5_digest": "878c8a2e1108e80d144d8f9812653d8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12105, "upload_time": "2014-04-22T18:16:12", "upload_time_iso_8601": "2014-04-22T18:16:12.933962Z", "url": "https://files.pythonhosted.org/packages/ba/1c/1987c5062f03cec54cce03c87364d068b03494d60403e054dcb947818761/pydruid-0.2.0.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "5c2e8c4329fa67c4990bfc171bb8f141", "sha256": "c342890b21cf5e771912162331bd1756487a598103c45eccb1504f7a90901a1c"}, "downloads": -1, "filename": "pydruid-0.2.2.tar.gz", "has_sig": false, "md5_digest": "5c2e8c4329fa67c4990bfc171bb8f141", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14069, "upload_time": "2015-07-24T23:14:10", "upload_time_iso_8601": "2015-07-24T23:14:10.385073Z", "url": "https://files.pythonhosted.org/packages/37/a5/bd304a9a10ec2a4e3e8b6fa78737238f38860481b116ef0534c0e3fa2d8b/pydruid-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "aa8b7e947ffc3aeb1bc45e22e844413b", "sha256": "0771cdd6775615e8b19ef8575d523fafc293995cdb63b9a94aea0241d51a67d7"}, "downloads": -1, "filename": "pydruid-0.2.3.tar.gz", "has_sig": true, "md5_digest": "aa8b7e947ffc3aeb1bc45e22e844413b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15296, "upload_time": "2015-10-25T17:26:25", "upload_time_iso_8601": "2015-10-25T17:26:25.433080Z", "url": "https://files.pythonhosted.org/packages/da/1d/9d06f11cf2f4353770514e57bde774500780b41c95413673399ae975e7c5/pydruid-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b4b2b38f0b7128ec3ead1a545e6ea054", "sha256": "10039652c02e68b9024e3925ee68e45b33b27f2d9d9c7fccdad996259cc8a537"}, "downloads": -1, "filename": "pydruid-0.3.0.tar.gz", "has_sig": true, "md5_digest": "b4b2b38f0b7128ec3ead1a545e6ea054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21197, "upload_time": "2016-05-24T17:14:36", "upload_time_iso_8601": "2016-05-24T17:14:36.466422Z", "url": "https://files.pythonhosted.org/packages/8f/38/4982dcbe41600cc7a31206679feee162a514b5a936b8582498dc474b11b5/pydruid-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "4606ef48d40cee6432fd27c539321787", "sha256": "789771b3c74a66c622f6eb9f9d30d7d1f95e1189bc98b2a2308ffc0337bb0554"}, "downloads": -1, "filename": "pydruid-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4606ef48d40cee6432fd27c539321787", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18489, "upload_time": "2016-12-22T22:13:20", "upload_time_iso_8601": "2016-12-22T22:13:20.843473Z", "url": "https://files.pythonhosted.org/packages/65/82/11cbdda2ab350ca953b8813bdff9abe385fa50bbefbc4d6ca16657c35e29/pydruid-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef51c2f40e92000f3fd512f360d47981", "sha256": "a9016cee3dcfe98d7d6d98be1d710c6b055259a921ce2a9e896c73524cc5a30f"}, "downloads": -1, "filename": "pydruid-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ef51c2f40e92000f3fd512f360d47981", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21932, "upload_time": "2016-12-22T22:13:22", "upload_time_iso_8601": "2016-12-22T22:13:22.111421Z", "url": "https://files.pythonhosted.org/packages/df/f3/349fbdcdbb851149ba2387340b3eb0f1ed53011db5ae15ba119a5f3ea997/pydruid-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "de8c2d05c48f6761f77f95315142173a", "sha256": "08f9b3bb960b80529b0ef9f8ca538f1b5cd99644fbd3a22b5f72091646b9a52c"}, "downloads": -1, "filename": "pydruid-0.4.0.tar.gz", "has_sig": false, "md5_digest": "de8c2d05c48f6761f77f95315142173a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2263924, "upload_time": "2018-01-30T19:02:24", "upload_time_iso_8601": "2018-01-30T19:02:24.306140Z", "url": "https://files.pythonhosted.org/packages/44/3e/d9798d27c361f443f230bc6c2968eca3c919ab04a08d15130620d73c8983/pydruid-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "79d70c10c6d056eac2a8c480e54c5f07", "sha256": "25a03296fc2c30f55e755d7c132d4e7aa76c9136607a8631db900bf962f13940"}, "downloads": -1, "filename": "pydruid-0.4.1.tar.gz", "has_sig": false, "md5_digest": "79d70c10c6d056eac2a8c480e54c5f07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2571130, "upload_time": "2018-02-08T00:21:40", "upload_time_iso_8601": "2018-02-08T00:21:40.187859Z", "url": "https://files.pythonhosted.org/packages/c1/c2/e73d13fe42ea297b267951c4309fdd241b35bd7f635cc75b87fbde3fbf21/pydruid-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "46ddfb1bf924a2811255617415545fe7", "sha256": "07ef6034a5066b2fa6aa745bb2beb00fdbfb59ece5b50b1dcc8124ca972d7ad8"}, "downloads": -1, "filename": "pydruid-0.4.2.tar.gz", "has_sig": false, "md5_digest": "46ddfb1bf924a2811255617415545fe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2572322, "upload_time": "2018-04-03T00:38:08", "upload_time_iso_8601": "2018-04-03T00:38:08.889131Z", "url": "https://files.pythonhosted.org/packages/32/91/4be6f902d50f22fc6b9e2eecffbef7d00989ba477e9c8e034074186cd10c/pydruid-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "37f31be6cdbb4f88f8bf6b5877f511aa", "sha256": "427330cb1deb921398fe4cc929d002edb6cf271b9d50914b6edc49708bdfe1ad"}, "downloads": -1, "filename": "pydruid-0.4.3.tar.gz", "has_sig": false, "md5_digest": "37f31be6cdbb4f88f8bf6b5877f511aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2333038, "upload_time": "2018-05-18T18:24:01", "upload_time_iso_8601": "2018-05-18T18:24:01.024077Z", "url": "https://files.pythonhosted.org/packages/aa/c8/67739b628b0262838f78d77707d46c3d97e0c1f6d8d26d296d4a7403a598/pydruid-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "96d1b0f15e4fa0e44db5d5bcc8fea13f", "sha256": "42cc1ca0b276c6129ba87b85349f36ce85e70c0f110a108bfcbf54e27270c1c4"}, "downloads": -1, "filename": "pydruid-0.4.4.tar.gz", "has_sig": false, "md5_digest": "96d1b0f15e4fa0e44db5d5bcc8fea13f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4183877, "upload_time": "2018-06-21T18:27:49", "upload_time_iso_8601": "2018-06-21T18:27:49.068717Z", "url": "https://files.pythonhosted.org/packages/36/7b/15c3c78bd65dafd3703ccbb16be4f17f6c2385454d4e977c254712497843/pydruid-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "cbec800d6360061479bd3e4678918efd", "sha256": "8334722df830d43ccecb10496ac04ba10a81bba6055da9f975d576da8a2a1f44"}, "downloads": -1, "filename": "pydruid-0.4.5.tar.gz", "has_sig": false, "md5_digest": "cbec800d6360061479bd3e4678918efd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4184002, "upload_time": "2018-06-21T21:08:36", "upload_time_iso_8601": "2018-06-21T21:08:36.355778Z", "url": "https://files.pythonhosted.org/packages/11/ed/6b67ef222d9bcb5d55b82652193b9a92ed6a09a78f32047057c17cb9ce1e/pydruid-0.4.5.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "92025024973b34de7a364abd22f5bfc0", "sha256": "1499576846efcb2432ff8726ebe12e777b9df43d731ddd8dcbbf10f1e3426e00"}, "downloads": -1, "filename": "pydruid-0.5.0.tar.gz", "has_sig": false, "md5_digest": "92025024973b34de7a364abd22f5bfc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4195813, "upload_time": "2018-11-28T06:19:33", "upload_time_iso_8601": "2018-11-28T06:19:33.398234Z", "url": "https://files.pythonhosted.org/packages/8d/e2/e365192d088d05cada647512cf5d0c0fbeb9f3ddfaf1e1a5d885b1344386/pydruid-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "a46c9725dd96fed38f1ec5534cb9d6de", "sha256": "6d00504a4efb820cd417694f7b11b9ca157e2772fd01bf820f797e75e0ad4196"}, "downloads": -1, "filename": "pydruid-0.5.1.tar.gz", "has_sig": false, "md5_digest": "a46c9725dd96fed38f1ec5534cb9d6de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1986126, "upload_time": "2019-03-05T17:14:34", "upload_time_iso_8601": "2019-03-05T17:14:34.614200Z", "url": "https://files.pythonhosted.org/packages/bb/d9/d549f70dd522af8ea59a1df88cfa5418c7058ab55612165487a443806267/pydruid-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "1ea0c13d71820c07875bbdd1e191cb05", "sha256": "ea4556c3991844dd9ba2db0da2089020682d9266aac81804879ad8cbaa46dd3f"}, "downloads": -1, "filename": "pydruid-0.5.2.tar.gz", "has_sig": false, "md5_digest": "1ea0c13d71820c07875bbdd1e191cb05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4512693, "upload_time": "2019-03-08T01:17:13", "upload_time_iso_8601": "2019-03-08T01:17:13.310737Z", "url": "https://files.pythonhosted.org/packages/11/78/9a7e5fbb8f1009c877452b6629e4c738a40ef4ffb0e320c25bdb263a90c7/pydruid-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "388dcea09e05b22d485ff5714119743a", "sha256": "6f7bb45139e34990b940e26f70673968aecf5ec2e74837dd505cf7c5ae0bd19a"}, "downloads": -1, "filename": "pydruid-0.5.3.tar.gz", "has_sig": false, "md5_digest": "388dcea09e05b22d485ff5714119743a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4513803, "upload_time": "2019-05-29T21:26:49", "upload_time_iso_8601": "2019-05-29T21:26:49.130448Z", "url": "https://files.pythonhosted.org/packages/27/68/44c65a118b0a72ce1dc1416a16c63aa9fffb94b330b8427f53b4f7208911/pydruid-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "a736f8db0e05397c3d3dd6d294bd1e9a", "sha256": "2ade113577f4905b4f4ff78fb1f8fcb684b0baaa18b065609a53a5bd432ae8e8"}, "downloads": -1, "filename": "pydruid-0.5.4.tar.gz", "has_sig": false, "md5_digest": "a736f8db0e05397c3d3dd6d294bd1e9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4514950, "upload_time": "2019-06-10T01:44:00", "upload_time_iso_8601": "2019-06-10T01:44:00.663039Z", "url": "https://files.pythonhosted.org/packages/47/11/fe0955ed9b1c6b5845ad17cd2685508f2f301752fadaf7f642ba7eaf2a1c/pydruid-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "483abf9bd65f1abec36e465908c95de0", "sha256": "d97da6cdb33c6aae42cad4b14207648025919b2caced99c68f57421a243e425a"}, "downloads": -1, "filename": "pydruid-0.5.5.tar.gz", "has_sig": false, "md5_digest": "483abf9bd65f1abec36e465908c95de0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4521804, "upload_time": "2019-06-10T01:59:48", "upload_time_iso_8601": "2019-06-10T01:59:48.910931Z", "url": "https://files.pythonhosted.org/packages/7a/13/db4efcb372707d621afd5c24b76cbcba52061364642a54c45058d29c52ba/pydruid-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "0bae11e346128be3d4e770593b1e95a7", "sha256": "cd19d847510105b251b0697770b6fc4750ca02267cce8afa486f94410a68d6a3"}, "downloads": -1, "filename": "pydruid-0.5.6.tar.gz", "has_sig": false, "md5_digest": "0bae11e346128be3d4e770593b1e95a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4521842, "upload_time": "2019-07-04T05:56:53", "upload_time_iso_8601": "2019-07-04T05:56:53.776186Z", "url": "https://files.pythonhosted.org/packages/aa/c6/63dcf39f8c030d954b54d6277f9f45d8e5cb2f80e0c3c2bf1634963b35f1/pydruid-0.5.6.tar.gz", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "fa5ac5c6e19ca81c813a27686e5852bb", "sha256": "88d4fa608c96969dc8f8e03cc0cfc4a38c4c3039b4f899db0af896ab0fa6ff23"}, "downloads": -1, "filename": "pydruid-0.5.7.tar.gz", "has_sig": false, "md5_digest": "fa5ac5c6e19ca81c813a27686e5852bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6020827, "upload_time": "2019-10-07T20:19:40", "upload_time_iso_8601": "2019-10-07T20:19:40.741224Z", "url": "https://files.pythonhosted.org/packages/a8/bd/88ab430c639819871e069c9ccccebdd3c3698b044e0109545a902b880ddc/pydruid-0.5.7.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "98680520e3cb9f153f0a4aebbbda6acc", "sha256": "985c8e6dfcc197e37b54fbbd855beb5f13b392ab18849610c0ae910122bbfeab"}, "downloads": -1, "filename": "pydruid-0.5.8.tar.gz", "has_sig": false, "md5_digest": "98680520e3cb9f153f0a4aebbbda6acc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6021085, "upload_time": "2020-01-10T19:55:54", "upload_time_iso_8601": "2020-01-10T19:55:54.787869Z", "url": "https://files.pythonhosted.org/packages/5b/51/435c31493f0f519a2751c7a71c654325cdae60e147a36d7eea5aae6a8ca4/pydruid-0.5.8.tar.gz", "yanked": false}], "0.5.9": [{"comment_text": "", "digests": {"md5": "c04ad845711ff3d39bb05770282bb538", "sha256": "78728bf5d7a313de609387445562a906806746f0b38b3fe8150226d09d9208e6"}, "downloads": -1, "filename": "pydruid-0.5.9.tar.gz", "has_sig": false, "md5_digest": "c04ad845711ff3d39bb05770282bb538", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5875076, "upload_time": "2020-03-13T15:20:22", "upload_time_iso_8601": "2020-03-13T15:20:22.478006Z", "url": "https://files.pythonhosted.org/packages/ef/0d/f670f42882dd6a6c9626af2473c57ae28def715864ed4f1bec26cf1b4632/pydruid-0.5.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c04ad845711ff3d39bb05770282bb538", "sha256": "78728bf5d7a313de609387445562a906806746f0b38b3fe8150226d09d9208e6"}, "downloads": -1, "filename": "pydruid-0.5.9.tar.gz", "has_sig": false, "md5_digest": "c04ad845711ff3d39bb05770282bb538", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5875076, "upload_time": "2020-03-13T15:20:22", "upload_time_iso_8601": "2020-03-13T15:20:22.478006Z", "url": "https://files.pythonhosted.org/packages/ef/0d/f670f42882dd6a6c9626af2473c57ae28def715864ed4f1bec26cf1b4632/pydruid-0.5.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:44 2020"}