{"info": {"author": "", "author_email": "markus@unterwaditzer.net", "bugtrack_url": null, "classifiers": [], "description": "=============\npytest-sentry\n=============\n\n.. image:: https://travis-ci.com/untitaker/pytest-sentry.svg?branch=master\n    :target: https://travis-ci.com/untitaker/pytest-sentry\n\n``pytest-sentry`` is a `pytest <https://pytest.org>`_ plugin that sends error\nreports for flaky but ultimately not completely broken tests to `Sentry\n<https://sentry.io/>`_.\n\nWhat and Why\n============\n\nLet's say you have a testsuite with some flaky tests that randomly break your\nCI build due to network issues, race conditions or other stuff that you don't\nwant to fix immediately. The known workaround is to retry those tests\nautomatically, for example using `pytest-rerunfailures\n<https://github.com/pytest-dev/pytest-rerunfailures>`_.\n\nOne concern against plugins like this is that they just hide the bugs in your\ntestsuite or even other code. After all your CI build is green and your code\nprobably works most of the time.\n\npytest-sentry tries to make that choice a bit easier by tracking flaky test\nfailures in a place separate from your build status. Sentry is already a\ngood choice for keeping tabs on all kinds of errors, important or not, in\nproduction, so let's try to use it in testsuites too.\n\nHow\n===\n\nThe prerequisite is that you already make use of ``pytest`` and\n``pytest-rerunfailures`` in CI. Now install ``pytest-sentry`` and set the\n``PYTEST_SENTRY_DSN`` environment variable to the DSN of a new Sentry project.\n\nNow every test failure that is \"fixed\" by retrying the test is reported to\nSentry, but still does not break CI. Tests that consistently fail will not be\nreported.\n\nAdvanced Options\n================\n\n``pytest-sentry`` supports marking your tests to use a different DSN, client or\nhub per-test. You can use this to provide custom options to the ``Client``\nobject from the `Sentry SDK for Python\n<https://github.com/getsentry/sentry-python>`_::\n\n    import random\n    import pytest\n\n    from sentry_sdk import Hub\n    from pytest_sentry import Client\n\n    @pytest.mark.sentry_client(None)\n    def test_no_sentry():\n        # Even though flaky, this test never gets reported to sentry\n        assert random.random() > 0.5\n\n    @pytest.mark.sentry_client(\"MY NEW DSN\")\n    def test_custom_dsn():\n        # Use a different DSN to report errors for this one\n        assert random.random() > 0.5\n\n    # Other invocations:\n\n    @pytest.mark.sentry_client(Client(\"CUSTOM DSN\"))\n    @pytest.mark.sentry_client(lambda: Client(\"CUSTOM DSN\"))\n    @pytest.mark.sentry_client(Hub(Client(\"CUSTOM DSN\")))\n\n\nThe ``Client`` class exposed by ``pytest-sentry`` only has different default\nintegrations. It disables some of the error-capturing integrations to avoid\nsending random expected errors into your project.\n\nAlways reporting test failures\n==============================\n\nYou can always report all test failures to Sentry by setting the environment\nvariable ``PYTEST_SENTRY_ALWAYS_REPORT=1``.\n\nThis can be enabled for builds on the ``master`` or release branch, to catch\ncertain kinds of tests that are flaky across builds, but consistently fail or\npass within one testrun.\n\nLicense\n=======\n\nLicensed under MIT, see ``LICENSE``.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/untitaker/pytest-sentry", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-sentry", "package_url": "https://pypi.org/project/pytest-sentry/", "platform": "", "project_url": "https://pypi.org/project/pytest-sentry/", "project_urls": {"Homepage": "https://github.com/untitaker/pytest-sentry"}, "release_url": "https://pypi.org/project/pytest-sentry/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A pytest plugin to report flaky tests to Sentry.io", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/untitaker/pytest-sentry\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/untitaker/pytest-sentry.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2c07a21804d9df209eeaebe27b6b2ba33a211f0/68747470733a2f2f7472617669732d63692e636f6d2f756e746974616b65722f7079746573742d73656e7472792e7376673f6272616e63683d6d6173746572\"></a>\n<p><tt><span class=\"pre\">pytest-sentry</span></tt> is a <a href=\"https://pytest.org\" rel=\"nofollow\">pytest</a> plugin that sends error\nreports for flaky but ultimately not completely broken tests to <a href=\"https://sentry.io/\" rel=\"nofollow\">Sentry</a>.</p>\n<div id=\"what-and-why\">\n<h2>What and Why</h2>\n<p>Let\u2019s say you have a testsuite with some flaky tests that randomly break your\nCI build due to network issues, race conditions or other stuff that you don\u2019t\nwant to fix immediately. The known workaround is to retry those tests\nautomatically, for example using <a href=\"https://github.com/pytest-dev/pytest-rerunfailures\" rel=\"nofollow\">pytest-rerunfailures</a>.</p>\n<p>One concern against plugins like this is that they just hide the bugs in your\ntestsuite or even other code. After all your CI build is green and your code\nprobably works most of the time.</p>\n<p>pytest-sentry tries to make that choice a bit easier by tracking flaky test\nfailures in a place separate from your build status. Sentry is already a\ngood choice for keeping tabs on all kinds of errors, important or not, in\nproduction, so let\u2019s try to use it in testsuites too.</p>\n</div>\n<div id=\"how\">\n<h2>How</h2>\n<p>The prerequisite is that you already make use of <tt>pytest</tt> and\n<tt><span class=\"pre\">pytest-rerunfailures</span></tt> in CI. Now install <tt><span class=\"pre\">pytest-sentry</span></tt> and set the\n<tt>PYTEST_SENTRY_DSN</tt> environment variable to the DSN of a new Sentry project.</p>\n<p>Now every test failure that is \u201cfixed\u201d by retrying the test is reported to\nSentry, but still does not break CI. Tests that consistently fail will not be\nreported.</p>\n</div>\n<div id=\"advanced-options\">\n<h2>Advanced Options</h2>\n<p><tt><span class=\"pre\">pytest-sentry</span></tt> supports marking your tests to use a different DSN, client or\nhub per-test. You can use this to provide custom options to the <tt>Client</tt>\nobject from the <a href=\"https://github.com/getsentry/sentry-python\" rel=\"nofollow\">Sentry SDK for Python</a>:</p>\n<pre>import random\nimport pytest\n\nfrom sentry_sdk import Hub\nfrom pytest_sentry import Client\n\n@pytest.mark.sentry_client(None)\ndef test_no_sentry():\n    # Even though flaky, this test never gets reported to sentry\n    assert random.random() &gt; 0.5\n\n@pytest.mark.sentry_client(\"MY NEW DSN\")\ndef test_custom_dsn():\n    # Use a different DSN to report errors for this one\n    assert random.random() &gt; 0.5\n\n# Other invocations:\n\n@pytest.mark.sentry_client(Client(\"CUSTOM DSN\"))\n@pytest.mark.sentry_client(lambda: Client(\"CUSTOM DSN\"))\n@pytest.mark.sentry_client(Hub(Client(\"CUSTOM DSN\")))\n</pre>\n<p>The <tt>Client</tt> class exposed by <tt><span class=\"pre\">pytest-sentry</span></tt> only has different default\nintegrations. It disables some of the error-capturing integrations to avoid\nsending random expected errors into your project.</p>\n</div>\n<div id=\"always-reporting-test-failures\">\n<h2>Always reporting test failures</h2>\n<p>You can always report all test failures to Sentry by setting the environment\nvariable <tt>PYTEST_SENTRY_ALWAYS_REPORT=1</tt>.</p>\n<p>This can be enabled for builds on the <tt>master</tt> or release branch, to catch\ncertain kinds of tests that are flaky across builds, but consistently fail or\npass within one testrun.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Licensed under MIT, see <tt>LICENSE</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 6608723, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3a096cecfc250015cab52fced7309a88", "sha256": "f822a4aa5b05088133f651a1a48993d2418f374981e82a6f091474d406c8021d"}, "downloads": -1, "filename": "pytest_sentry-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "3a096cecfc250015cab52fced7309a88", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 4844, "upload_time": "2019-04-03T20:43:03", "upload_time_iso_8601": "2019-04-03T20:43:03.911868Z", "url": "https://files.pythonhosted.org/packages/07/e6/5d6f5cf242c49f96a6de233108c581ef798caf97116934e2f31d76ee33dd/pytest_sentry-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2761e00b9f3538d0a5b7b8afc4c4af5", "sha256": "c772f8852cb2171cc3f41a795cf296a4be4cc4cb9ecf26717f469d325c44bb34"}, "downloads": -1, "filename": "pytest-sentry-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d2761e00b9f3538d0a5b7b8afc4c4af5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3602, "upload_time": "2019-04-03T20:43:01", "upload_time_iso_8601": "2019-04-03T20:43:01.024922Z", "url": "https://files.pythonhosted.org/packages/4e/dd/8876b4961bbccfd2f039d9a638ffaa7449e9d96c8b54204c90855ba73513/pytest-sentry-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cb6233a46d0b2304452a07650c820ac2", "sha256": "05dd8c9b0a1ba6a0a01917351e7386396a3279c74290d3cb7f541479ba0e9fba"}, "downloads": -1, "filename": "pytest_sentry-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "cb6233a46d0b2304452a07650c820ac2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5248, "upload_time": "2020-02-11T11:00:19", "upload_time_iso_8601": "2020-02-11T11:00:19.308106Z", "url": "https://files.pythonhosted.org/packages/29/92/00a807e443ce66f5e634404caf98c4098c7acb5a76b29ac01fc573f480ac/pytest_sentry-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be6e15910a70be2de4c0a63a7ee445b5", "sha256": "c8e34d7fd2440a110f5732f93dd38aa924df3c163e347c61e52ea675cac5d8b7"}, "downloads": -1, "filename": "pytest-sentry-0.1.1.tar.gz", "has_sig": false, "md5_digest": "be6e15910a70be2de4c0a63a7ee445b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4010, "upload_time": "2020-02-11T11:00:17", "upload_time_iso_8601": "2020-02-11T11:00:17.411851Z", "url": "https://files.pythonhosted.org/packages/02/39/06338f43a4ced3f07bdc72ee4fcfa494f12ffcaabdf772d2218dc8465710/pytest-sentry-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb6233a46d0b2304452a07650c820ac2", "sha256": "05dd8c9b0a1ba6a0a01917351e7386396a3279c74290d3cb7f541479ba0e9fba"}, "downloads": -1, "filename": "pytest_sentry-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "cb6233a46d0b2304452a07650c820ac2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5248, "upload_time": "2020-02-11T11:00:19", "upload_time_iso_8601": "2020-02-11T11:00:19.308106Z", "url": "https://files.pythonhosted.org/packages/29/92/00a807e443ce66f5e634404caf98c4098c7acb5a76b29ac01fc573f480ac/pytest_sentry-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be6e15910a70be2de4c0a63a7ee445b5", "sha256": "c8e34d7fd2440a110f5732f93dd38aa924df3c163e347c61e52ea675cac5d8b7"}, "downloads": -1, "filename": "pytest-sentry-0.1.1.tar.gz", "has_sig": false, "md5_digest": "be6e15910a70be2de4c0a63a7ee445b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4010, "upload_time": "2020-02-11T11:00:17", "upload_time_iso_8601": "2020-02-11T11:00:17.411851Z", "url": "https://files.pythonhosted.org/packages/02/39/06338f43a4ced3f07bdc72ee4fcfa494f12ffcaabdf772d2218dc8465710/pytest-sentry-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:43 2020"}