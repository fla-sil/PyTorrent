{"info": {"author": "Hexagon IT", "author_email": "oss@hexagonit.fi", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python"], "description": "============================\nVirtual 3D gallery for Plone\n============================\n\n`hexagonit.virtualgallery` is a Plone add-on that renders a Flash-based 3D virtual gallery.\n\n* `Source code @ GitHub <http://github.com/hexagonit/hexagonit.virtualgallery>`_\n* `Releases @ PyPI <http://pypi.python.org/pypi/hexagonit.virtualgallery>`_\n* `Sphinx docs @ ReadTheDocs <http://readthedocs.org/docs/hexagonitvirtualgallery>`_\n\nInstallation\n============\n\nTo install ``hexagonit.virtualgallery`` you simply add\n``hexagonit.virtualgallery`` to the list of eggs in your buildout, run\nbuildout and restart Plone. Then, install `hexagonit.virtualgallery` using the\nAdd-ons control panel.\n\nRequirements\n============\n\n    * `Plone <http://plone.org/>`_ 4.1 or newer\n    * `Flash player <http://get.adobe.com/flashplayer/>`_ 10.2 or newer\n\nBasic usage\n===========\n\nThis package adds the `Virtual 3D gallery` display mode to Folder and\nCollection. So, go to any folder or collection that contains images and select\n``Virtual 3D gallery`` from the display drop-down menu.\n\nIn the gallery each room has enough space for 17 images. If the image source\n(Folder or Collection) contains more images then additional rooms will be\nautomatically created and doors allow the user to travel between the rooms.\n\nThe gallery can be navigated either by using the mouse or the keyboard. Use\nthe arrow keys to move within the space (hold down shift to strafe). Clicking\nan image with the mouse will concentrate on that image and the image metadata\nwill become visible when hovering over the image.\n\nYou can view each image in turn by clicking on the arrow buttons on the left\nand right side of the viewer. The viewer can also be put in fullscreen mode\nby clicking on the fullscreen button on the top right corner.\n\n.. image:: https://github.com/hexagonit/hexagonit.virtualgallery/raw/master/hexagonit/virtualgallery/docs/images/screenshot.png\n\nConfiguration\n=============\n\nEach gallery may be configured to use a particular image scale (provided by\n`plone.app.imaging <http://pypi.python.org/pypi/plone.app.imaging>`_) by\nchoosing the appropriate scale on the ``Virtual gallery settings`` page. A\nlink to the settings page will become visible when the context is using the\nvirtual gallery display.\n\nBy default the gallery uses the original scale of the images but in case of\nlarge images this may slow down the gallery significantly. Using a smaller\nscale version of the images usually improves the loading time and performance.\n\nYou can also configure new image scales in ``Site setup \u203a Image handling``.\nFor example, you could define a \"HD\" scale at 1200x1200 pixels which would\ngive most current day users a good quality image even in the fullscreen mode.\n\nAdvanced usage\n==============\n\nThe Flash viewer is independent of Plone and may be used in any web context,\neven another framework or a language environment. The viewer requires two\ndistinct parts to work:\n\n    * The HTML code to embed the viewer and pass parameters\n    * JSON configuration which configures the viewer.\n\nEmbed code\n----------\n\nThe HTML code needs to embed the ``Virtual3DGallery.swf`` viewer and pass a\nsingle `flashvars <http://kb2.adobe.com/cps/164/tn_16417.html>`_ variable\ncalled ``dataURL`` to the viewer. This variable must contain the URL to the\nJSON configuration file which configures the viewer.\n\nIf you are embedding the viewer within a page that contains other content it\nis also recommended set the ``wmode=window`` flash parameter so that HTML\nelements can be positioned above the flash content.\n\nBy default, this package uses the `SWFObject\n<http://code.google.com/p/swfobject/>`_ Javascript library to do the\nembedding.\n\nJSON configuration\n------------------\n\nThe Flash viewer is driven by the JSON configuration which contains the list\nof images to display in the gallery, associated image metadata (title, author,\ndescription) and translations for the UI textual elements, e.g.::\n\n    {\"images\": [\n        {\"url\": \"http://my.server.com/images/image1.png\",\n         \"title\": \"Nice scenery\",\n         \"description\": \"Lorem lipsum..\",\n         \"author\": \"dokai\"},\n        {\"url\": \"http://my.server.com/images/image2.png\",\n         \"title\": \"Screenshot of Foo\",\n         \"description\": \"Lorem lipsum..\",\n         \"author\": \"dokai\"}\n        ],\n     \"ui\": {\n        \"enterRoomToolTip\": \"Click to enter\",\n        \"fullscreen\": \"Fullscreen\",\n        \"loadingImg\": \"Loading image:\",\n        \"enterRoom\": \"Entering room [x] of [y]\",\n        \"anaglyph\": \"Anaglyph\"\n     },\n     \"settings\": {\n        \"anaglyphModeEnabled\": \"false\"\n     }}\n\nThe viewer does not care where the images and associated metadata come from so\nyou can implement any custom logic that puts together the list (custom catalog\nqueries, structural hierarchies, etc) as long as the resulting JSON document\nis valid.\n\nThe package contains an associated `JSON schema <http://tools.ietf.org/html\n/draft-zyp-json-schema-03>`_ document which can be used to validate the JSON\nconfiguration, e.g.::\n\n    from hexagonit.virtualgallery.schema import GALLERY_DATA_SCHEMA\n    from validictory import validate\n    import json\n\n    try:\n        # Assuming the `my_custom_config` contains the Python\n        # data structure with the image information.\n        validate(my_custom_config, GALLERY_DATA_SCHEMA)\n        json_config = json.dumps(my_custom_config)\n    except ValueError:\n        # Validation failed, do something.\n        pass\n\n\nYou might want to display the gallery somewhere else or possibly in a\ntoolbarless new window. To keep all Plone stuff away from the virtual gallery\nuse a URL like below to only get the title of the gallery and the Flash object\nthat displays it::\n\n    http://<path>/<to>/<your>/<gallery>/<folder>/virtualgallery?ajax_load=1&ajax_include_head=1\n\n\nTODO\n====\n\n* cross-browser testing\n* use in the wild\n\nCredits\n=======\n\n* Idea, skeleton and sponsoring provided by Hexagon IT Oy.\n* Flash part of the gallery developed by Michal Zwieruho, BlackMoon Design.\n* Plone integration by Nejc Zupan, NiteoWeb Ltd.\n\nChangelog\n=========\n\n1.0 (2011-08-26)\n----------------\n\n- Added support for configuring the image scale used in the gallery\n  on per-context basis.\n  [dokai]\n\n- Updated documentation\n  [dokai]\n\n- Updated Finnish translations.\n  [dokai]\n\n- Support for translations added.\n  [zupo]\n\n- Fixed the Flash window mode so that Plone dropdown menus are visible\n  on top of the Flash movie.\n  [dokai]\n\n- Updated the Flash movie to a new version. Highlights:\n\n    * No more empty frames on walls.\n    * The default position when entering a room shows the middle box\n      with the room number better.\n    * Redundant tooltips (prev, next, forward, backward, etc) removed.\n    * Traversal through doors using mouse clicks.\n    * Repositioned the prev/next and fullscreen buttons.\n    * Fixed a bug with image info popups being sticky in fullscreen mode.\n    * Fixed a bug with empty galleries.\n    * Fixed a bug with tooltips not expanding correctly over different\n      sized text.\n    * Fixed a bug where in some cases clicking on an image would zoom-in\n      on a wrong one.\n    * Traversing through doors is possible with a single click.\n\n  Removed also the now redundant entries in the JSON configuration.\n\n  [dokai]\n\n1.0b4 (2011-08-10)\n------------------\n\n- Really fix the packaging error. The setuptools ``unpack_tarfile`` function\n  filters out symlinks when unpacking so they will not be present in the\n  unpacked package. This, combined with some weirdness in either ``tar``\n  itself or the Python tar module which reverses the order of the link,\n  caused the targets of the symlinks to be removed from the final unpacked\n  package.\n  [dokai]\n\n1.0b3 (2011-08-10)\n------------------\n\n- Fixed packaging error in 1.0b2.\n  [dokai]\n\n- JSON schema validation.\n  [zupo]\n\n\n1.0b2 (2011-08-04)\n------------------\n\n- Code cleanups.\n  [zupo]\n\n- More comments and documentation.\n  [zupo]\n\n- More tests.\n  [zupo]\n\n\n1.0b1 (2011-08-04)\n------------------\n\n- Initial release.\n  [zupo]\n\nLicense\n=======\n\nCopyright (c) 2011, Hexagon IT Oy\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n   * Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n\n   * Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n\n   * Neither the name of Hexagon IT Oy nor the names of its contributors may\n     be used to endorse or promote products derived from this software\n     without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL HEXAGON IT OY BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "hexagonit.virtualgallery", "package_url": "https://pypi.org/project/hexagonit.virtualgallery/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hexagonit.virtualgallery/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/hexagonit.virtualgallery/1.0/", "requires_dist": null, "requires_python": null, "summary": "Virtual 3D image gallery for Plone", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>hexagonit.virtualgallery</cite> is a Plone add-on that renders a Flash-based 3D virtual gallery.</p>\n<ul>\n<li><a href=\"http://github.com/hexagonit/hexagonit.virtualgallery\" rel=\"nofollow\">Source code @ GitHub</a></li>\n<li><a href=\"http://pypi.python.org/pypi/hexagonit.virtualgallery\" rel=\"nofollow\">Releases @ PyPI</a></li>\n<li><a href=\"http://readthedocs.org/docs/hexagonitvirtualgallery\" rel=\"nofollow\">Sphinx docs @ ReadTheDocs</a></li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install <tt>hexagonit.virtualgallery</tt> you simply add\n<tt>hexagonit.virtualgallery</tt> to the list of eggs in your buildout, run\nbuildout and restart Plone. Then, install <cite>hexagonit.virtualgallery</cite> using the\nAdd-ons control panel.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<blockquote>\n<ul>\n<li><a href=\"http://plone.org/\" rel=\"nofollow\">Plone</a> 4.1 or newer</li>\n<li><a href=\"http://get.adobe.com/flashplayer/\" rel=\"nofollow\">Flash player</a> 10.2 or newer</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>This package adds the <cite>Virtual 3D gallery</cite> display mode to Folder and\nCollection. So, go to any folder or collection that contains images and select\n<tt>Virtual 3D gallery</tt> from the display drop-down menu.</p>\n<p>In the gallery each room has enough space for 17 images. If the image source\n(Folder or Collection) contains more images then additional rooms will be\nautomatically created and doors allow the user to travel between the rooms.</p>\n<p>The gallery can be navigated either by using the mouse or the keyboard. Use\nthe arrow keys to move within the space (hold down shift to strafe). Clicking\nan image with the mouse will concentrate on that image and the image metadata\nwill become visible when hovering over the image.</p>\n<p>You can view each image in turn by clicking on the arrow buttons on the left\nand right side of the viewer. The viewer can also be put in fullscreen mode\nby clicking on the fullscreen button on the top right corner.</p>\n<img alt=\"https://github.com/hexagonit/hexagonit.virtualgallery/raw/master/hexagonit/virtualgallery/docs/images/screenshot.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa80bae127a1298936bff95eea87bebcf8619dbe/68747470733a2f2f6769746875622e636f6d2f68657861676f6e69742f68657861676f6e69742e7669727475616c67616c6c6572792f7261772f6d61737465722f68657861676f6e69742f7669727475616c67616c6c6572792f646f63732f696d616765732f73637265656e73686f742e706e67\">\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Each gallery may be configured to use a particular image scale (provided by\n<a href=\"http://pypi.python.org/pypi/plone.app.imaging\" rel=\"nofollow\">plone.app.imaging</a>) by\nchoosing the appropriate scale on the <tt>Virtual gallery settings</tt> page. A\nlink to the settings page will become visible when the context is using the\nvirtual gallery display.</p>\n<p>By default the gallery uses the original scale of the images but in case of\nlarge images this may slow down the gallery significantly. Using a smaller\nscale version of the images usually improves the loading time and performance.</p>\n<p>You can also configure new image scales in <tt>Site setup \u203a Image handling</tt>.\nFor example, you could define a \u201cHD\u201d scale at 1200x1200 pixels which would\ngive most current day users a good quality image even in the fullscreen mode.</p>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced usage</h2>\n<p>The Flash viewer is independent of Plone and may be used in any web context,\neven another framework or a language environment. The viewer requires two\ndistinct parts to work:</p>\n<blockquote>\n<ul>\n<li>The HTML code to embed the viewer and pass parameters</li>\n<li>JSON configuration which configures the viewer.</li>\n</ul>\n</blockquote>\n<div id=\"embed-code\">\n<h3>Embed code</h3>\n<p>The HTML code needs to embed the <tt>Virtual3DGallery.swf</tt> viewer and pass a\nsingle <a href=\"http://kb2.adobe.com/cps/164/tn_16417.html\" rel=\"nofollow\">flashvars</a> variable\ncalled <tt>dataURL</tt> to the viewer. This variable must contain the URL to the\nJSON configuration file which configures the viewer.</p>\n<p>If you are embedding the viewer within a page that contains other content it\nis also recommended set the <tt>wmode=window</tt> flash parameter so that HTML\nelements can be positioned above the flash content.</p>\n<p>By default, this package uses the <a href=\"http://code.google.com/p/swfobject/\" rel=\"nofollow\">SWFObject</a> Javascript library to do the\nembedding.</p>\n</div>\n<div id=\"json-configuration\">\n<h3>JSON configuration</h3>\n<p>The Flash viewer is driven by the JSON configuration which contains the list\nof images to display in the gallery, associated image metadata (title, author,\ndescription) and translations for the UI textual elements, e.g.:</p>\n<pre>{\"images\": [\n    {\"url\": \"http://my.server.com/images/image1.png\",\n     \"title\": \"Nice scenery\",\n     \"description\": \"Lorem lipsum..\",\n     \"author\": \"dokai\"},\n    {\"url\": \"http://my.server.com/images/image2.png\",\n     \"title\": \"Screenshot of Foo\",\n     \"description\": \"Lorem lipsum..\",\n     \"author\": \"dokai\"}\n    ],\n \"ui\": {\n    \"enterRoomToolTip\": \"Click to enter\",\n    \"fullscreen\": \"Fullscreen\",\n    \"loadingImg\": \"Loading image:\",\n    \"enterRoom\": \"Entering room [x] of [y]\",\n    \"anaglyph\": \"Anaglyph\"\n },\n \"settings\": {\n    \"anaglyphModeEnabled\": \"false\"\n }}\n</pre>\n<p>The viewer does not care where the images and associated metadata come from so\nyou can implement any custom logic that puts together the list (custom catalog\nqueries, structural hierarchies, etc) as long as the resulting JSON document\nis valid.</p>\n<p>The package contains an associated <a href=\"http://tools.ietf.org/html/draft-zyp-json-schema-03\" rel=\"nofollow\">JSON schema</a> document which can be used to validate the JSON\nconfiguration, e.g.:</p>\n<pre>from hexagonit.virtualgallery.schema import GALLERY_DATA_SCHEMA\nfrom validictory import validate\nimport json\n\ntry:\n    # Assuming the `my_custom_config` contains the Python\n    # data structure with the image information.\n    validate(my_custom_config, GALLERY_DATA_SCHEMA)\n    json_config = json.dumps(my_custom_config)\nexcept ValueError:\n    # Validation failed, do something.\n    pass\n</pre>\n<p>You might want to display the gallery somewhere else or possibly in a\ntoolbarless new window. To keep all Plone stuff away from the virtual gallery\nuse a URL like below to only get the title of the gallery and the Flash object\nthat displays it:</p>\n<pre>http://&lt;path&gt;/&lt;to&gt;/&lt;your&gt;/&lt;gallery&gt;/&lt;folder&gt;/virtualgallery?ajax_load=1&amp;ajax_include_head=1\n</pre>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>cross-browser testing</li>\n<li>use in the wild</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<ul>\n<li>Idea, skeleton and sponsoring provided by Hexagon IT Oy.</li>\n<li>Flash part of the gallery developed by Michal Zwieruho, BlackMoon Design.</li>\n<li>Plone integration by Nejc Zupan, NiteoWeb Ltd.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.0 (2011-08-26)</h3>\n<ul>\n<li><p>Added support for configuring the image scale used in the gallery\non per-context basis.\n[dokai]</p>\n</li>\n<li><p>Updated documentation\n[dokai]</p>\n</li>\n<li><p>Updated Finnish translations.\n[dokai]</p>\n</li>\n<li><p>Support for translations added.\n[zupo]</p>\n</li>\n<li><p>Fixed the Flash window mode so that Plone dropdown menus are visible\non top of the Flash movie.\n[dokai]</p>\n</li>\n<li><p>Updated the Flash movie to a new version. Highlights:</p>\n<blockquote>\n<ul>\n<li>No more empty frames on walls.</li>\n<li>The default position when entering a room shows the middle box\nwith the room number better.</li>\n<li>Redundant tooltips (prev, next, forward, backward, etc) removed.</li>\n<li>Traversal through doors using mouse clicks.</li>\n<li>Repositioned the prev/next and fullscreen buttons.</li>\n<li>Fixed a bug with image info popups being sticky in fullscreen mode.</li>\n<li>Fixed a bug with empty galleries.</li>\n<li>Fixed a bug with tooltips not expanding correctly over different\nsized text.</li>\n<li>Fixed a bug where in some cases clicking on an image would zoom-in\non a wrong one.</li>\n<li>Traversing through doors is possible with a single click.</li>\n</ul>\n</blockquote>\n<p>Removed also the now redundant entries in the JSON configuration.</p>\n<p>[dokai]</p>\n</li>\n</ul>\n</div>\n<div id=\"b4-2011-08-10\">\n<h3>1.0b4 (2011-08-10)</h3>\n<ul>\n<li>Really fix the packaging error. The setuptools <tt>unpack_tarfile</tt> function\nfilters out symlinks when unpacking so they will not be present in the\nunpacked package. This, combined with some weirdness in either <tt>tar</tt>\nitself or the Python tar module which reverses the order of the link,\ncaused the targets of the symlinks to be removed from the final unpacked\npackage.\n[dokai]</li>\n</ul>\n</div>\n<div id=\"b3-2011-08-10\">\n<h3>1.0b3 (2011-08-10)</h3>\n<ul>\n<li>Fixed packaging error in 1.0b2.\n[dokai]</li>\n<li>JSON schema validation.\n[zupo]</li>\n</ul>\n</div>\n<div id=\"b2-2011-08-04\">\n<h3>1.0b2 (2011-08-04)</h3>\n<ul>\n<li>Code cleanups.\n[zupo]</li>\n<li>More comments and documentation.\n[zupo]</li>\n<li>More tests.\n[zupo]</li>\n</ul>\n</div>\n<div id=\"b1-2011-08-04\">\n<h3>1.0b1 (2011-08-04)</h3>\n<ul>\n<li>Initial release.\n[zupo]</li>\n</ul>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2011, Hexagon IT Oy\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:</p>\n<blockquote>\n<ul>\n<li>Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.</li>\n<li>Neither the name of Hexagon IT Oy nor the names of its contributors may\nbe used to endorse or promote products derived from this software\nwithout specific prior written permission.</li>\n</ul>\n</blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \u201cAS IS\u201d\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL HEXAGON IT OY BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n</div>\n\n          </div>"}, "last_serial": 887019, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b35a585ee036b5432daa203e8b1678f6", "sha256": "72f691d26b81ee1bdb8e0c9ad1b23198761bdc12c700390320afd76a880fd7c9"}, "downloads": -1, "filename": "hexagonit.virtualgallery-1.0.zip", "has_sig": false, "md5_digest": "b35a585ee036b5432daa203e8b1678f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1311446, "upload_time": "2011-08-26T10:29:57", "upload_time_iso_8601": "2011-08-26T10:29:57.503807Z", "url": "https://files.pythonhosted.org/packages/60/da/3c52328935c469869a417341ba6f7f4e9669249b215b9676b1eace5fe801/hexagonit.virtualgallery-1.0.zip", "yanked": false}], "1.0b1": [], "1.0b2": [{"comment_text": "", "digests": {"md5": "aa1476ec169021ad10d970a5c5556362", "sha256": "58de47842d4200192dc97592ae001ac0d9f8622e5dde17746c0cca9655e6ce84"}, "downloads": -1, "filename": "hexagonit.virtualgallery-1.0b2.tar.gz", "has_sig": false, "md5_digest": "aa1476ec169021ad10d970a5c5556362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7611, "upload_time": "2011-08-04T14:09:20", "upload_time_iso_8601": "2011-08-04T14:09:20.953580Z", "url": "https://files.pythonhosted.org/packages/7b/93/70b20bb09fdfb64a934b2bbabe53de6bc218f6e6de3c82352cd9bac00992/hexagonit.virtualgallery-1.0b2.tar.gz", "yanked": false}], "1.0b3": [{"comment_text": "", "digests": {"md5": "428580904d73520c89e9b4c593ad23b3", "sha256": "14e145afc265db37225469b3ec9838758f8e10ee487ae7a0832fa23ca2543ef1"}, "downloads": -1, "filename": "hexagonit.virtualgallery-1.0b3.tar.gz", "has_sig": false, "md5_digest": "428580904d73520c89e9b4c593ad23b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 769122, "upload_time": "2011-08-10T14:43:08", "upload_time_iso_8601": "2011-08-10T14:43:08.430325Z", "url": "https://files.pythonhosted.org/packages/09/c7/e1978b4da5500d360635a8add050e411dd294d764bf1d371db836e9d2b4a/hexagonit.virtualgallery-1.0b3.tar.gz", "yanked": false}], "1.0b4": [{"comment_text": "", "digests": {"md5": "690ea9ce2289a883b7973b359fbbb6ed", "sha256": "f40552922202dcef548d85a1657fcc5e6c3a50cf1d17e3bd23168f983acc38bc"}, "downloads": -1, "filename": "hexagonit.virtualgallery-1.0b4.tar.gz", "has_sig": false, "md5_digest": "690ea9ce2289a883b7973b359fbbb6ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 769703, "upload_time": "2011-08-11T09:15:37", "upload_time_iso_8601": "2011-08-11T09:15:37.039745Z", "url": "https://files.pythonhosted.org/packages/8d/fd/bba18ca8c9a47f31886058b1fcc354af8b4ad75f9aa42957d7c07808914a/hexagonit.virtualgallery-1.0b4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b35a585ee036b5432daa203e8b1678f6", "sha256": "72f691d26b81ee1bdb8e0c9ad1b23198761bdc12c700390320afd76a880fd7c9"}, "downloads": -1, "filename": "hexagonit.virtualgallery-1.0.zip", "has_sig": false, "md5_digest": "b35a585ee036b5432daa203e8b1678f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1311446, "upload_time": "2011-08-26T10:29:57", "upload_time_iso_8601": "2011-08-26T10:29:57.503807Z", "url": "https://files.pythonhosted.org/packages/60/da/3c52328935c469869a417341ba6f7f4e9669249b215b9676b1eace5fe801/hexagonit.virtualgallery-1.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:51:28 2020"}