{"info": {"author": "nimpsch", "author_email": "snimpsch@gmx.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": ".. image:: https://travis-ci.org/nimpsch/pyTCP.svg?branch=master\n    :alt: Travis\n    :target: https://travis-ci.org/nimpsch/pyTCP\n.. image:: https://readthedocs.org/projects/pytcp/badge/?version=latest\n    :alt: ReadTheDocs\n    :target: https://pytcp.readthedocs.io/\n.. image:: https://img.shields.io/coveralls/github/nimpsch/pyTCP/master.svg\n    :alt: Coveralls\n    :target: https://coveralls.io/r/nimpsch/pyTCP\n\n========\npyTCP\n========\n\n\nA small tcp package to send and receive tcp messages.\n\nInstallation\n============\n\n.. code-block:: bash\n\n    pip install pyTCP\n\nUsage\n=====\n\nsynchronous:\n\n.. code-block:: python\n\n    from pyTCP import EchoServer, TcpClient\n\n    echo_server = EchoServer(\"127.0.0.1\", 12345)\n    echo_server.start_server()\n    client = TcpClient(\"127.0.0.1\", 12345)\n    client.connect()\n\n    data_to_send = b\"Test message\"\n    client.send(data_to_send)\n    client_received = client.receive()\n    server_received = echo_server.last_received\n    assert data_to_send == client_received\n    assert data_to_send == server_received\n\n    # or with a delimiter\n    data_to_send = b\"Test\\nmessage\"\n    client.send(data_to_send)\n    client_received = client.receive_until(delimiter=b'\\n')\n    assert b\"Test\" == client_received\n\n    echo_server.stop_server()\n    client.close()\n\nasync:\n\n.. code-block:: python\n\n    import asyncio\n\n    from pyTCP import AsyncTcpClient, EchoServer\n\n\n    async def main():\n        echo_server = EchoServer(\"127.0.0.1\", 12345)\n        echo_server.start_server()\n        client = AsyncTcpClient(\"127.0.0.1\", 12345)\n        await client.connect()\n\n        data_to_send = b\"Test message\"\n        await client.send(data_to_send)\n        data = await client.receive()\n        assert data == data_to_send\n\n        echo_server.stop_server()\n        client.close()\n\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n\nNote\n====\n\nThis project has been set up using PyScaffold 3.2.3. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.\n\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nimpsch/pyTCP", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "pyTCP", "package_url": "https://pypi.org/project/pyTCP/", "platform": "any", "project_url": "https://pypi.org/project/pyTCP/", "project_urls": {"Documentation": "https://pytcp.readthedocs.io/", "Homepage": "https://github.com/nimpsch/pyTCP"}, "release_url": "https://pypi.org/project/pyTCP/0.1/", "requires_dist": ["pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": ">=3.6", "summary": "A small tcp package to send and receive tcp messages.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/nimpsch/pyTCP\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce9e97bbbc71dbf099f9c16c6e22b46775334617/68747470733a2f2f7472617669732d63692e6f72672f6e696d707363682f70795443502e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pytcp.readthedocs.io/\" rel=\"nofollow\"><img alt=\"ReadTheDocs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a24ced598df115a25e9377cfef74c7f349567c8/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70797463702f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://coveralls.io/r/nimpsch/pyTCP\" rel=\"nofollow\"><img alt=\"Coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ffc9122bbbfa534df49c4127012a3ecd91621c5/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f6e696d707363682f70795443502f6d61737465722e737667\"></a>\n<div id=\"pytcp\">\n<h2>pyTCP</h2>\n<p>A small tcp package to send and receive tcp messages.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install pyTCP\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>synchronous:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyTCP</span> <span class=\"kn\">import</span> <span class=\"n\">EchoServer</span><span class=\"p\">,</span> <span class=\"n\">TcpClient</span>\n\n<span class=\"n\">echo_server</span> <span class=\"o\">=</span> <span class=\"n\">EchoServer</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"mi\">12345</span><span class=\"p\">)</span>\n<span class=\"n\">echo_server</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">TcpClient</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"mi\">12345</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n<span class=\"n\">data_to_send</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"Test message\"</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">data_to_send</span><span class=\"p\">)</span>\n<span class=\"n\">client_received</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">receive</span><span class=\"p\">()</span>\n<span class=\"n\">server_received</span> <span class=\"o\">=</span> <span class=\"n\">echo_server</span><span class=\"o\">.</span><span class=\"n\">last_received</span>\n<span class=\"k\">assert</span> <span class=\"n\">data_to_send</span> <span class=\"o\">==</span> <span class=\"n\">client_received</span>\n<span class=\"k\">assert</span> <span class=\"n\">data_to_send</span> <span class=\"o\">==</span> <span class=\"n\">server_received</span>\n\n<span class=\"c1\"># or with a delimiter</span>\n<span class=\"n\">data_to_send</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"Test</span><span class=\"se\">\\n</span><span class=\"s2\">message\"</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">data_to_send</span><span class=\"p\">)</span>\n<span class=\"n\">client_received</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">receive_until</span><span class=\"p\">(</span><span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"sa\">b</span><span class=\"s2\">\"Test\"</span> <span class=\"o\">==</span> <span class=\"n\">client_received</span>\n\n<span class=\"n\">echo_server</span><span class=\"o\">.</span><span class=\"n\">stop_server</span><span class=\"p\">()</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>async:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyTCP</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncTcpClient</span><span class=\"p\">,</span> <span class=\"n\">EchoServer</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">echo_server</span> <span class=\"o\">=</span> <span class=\"n\">EchoServer</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"mi\">12345</span><span class=\"p\">)</span>\n    <span class=\"n\">echo_server</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">()</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncTcpClient</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"mi\">12345</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n    <span class=\"n\">data_to_send</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"Test message\"</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">data_to_send</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">receive</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data_to_send</span>\n\n    <span class=\"n\">echo_server</span><span class=\"o\">.</span><span class=\"n\">stop_server</span><span class=\"p\">()</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"note\">\n<h3>Note</h3>\n<p>This project has been set up using PyScaffold 3.2.3. For details and usage\ninformation on PyScaffold see <a href=\"https://pyscaffold.org/\" rel=\"nofollow\">https://pyscaffold.org/</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6861139, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3730f3a739ae4c20714d7e3affe86f14", "sha256": "84464f622d6b3e1ac3a9c24e20e4752250dbd564c91edd008aba59c85a0cd51c"}, "downloads": -1, "filename": "pyTCP-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3730f3a739ae4c20714d7e3affe86f14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8045, "upload_time": "2020-03-22T18:16:23", "upload_time_iso_8601": "2020-03-22T18:16:23.729235Z", "url": "https://files.pythonhosted.org/packages/b6/90/51d34202a50f099a9e2f13077d4a82a1236a0d5389877ab0cf584034e59e/pyTCP-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3730f3a739ae4c20714d7e3affe86f14", "sha256": "84464f622d6b3e1ac3a9c24e20e4752250dbd564c91edd008aba59c85a0cd51c"}, "downloads": -1, "filename": "pyTCP-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3730f3a739ae4c20714d7e3affe86f14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8045, "upload_time": "2020-03-22T18:16:23", "upload_time_iso_8601": "2020-03-22T18:16:23.729235Z", "url": "https://files.pythonhosted.org/packages/b6/90/51d34202a50f099a9e2f13077d4a82a1236a0d5389877ab0cf584034e59e/pyTCP-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:55:36 2020"}