{"info": {"author": "John H. Williamson", "author_email": "johnhw@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Funnel plot\n> Simple funnel plots for visualising sub-group variance.\n\n\nThis package provides simple [funnel plots](https://psmu.improvement.nhs.uk/psc-shared-library/measurement-evidence-base/16-funnel-plots-for-comparing-institutional-performance/file) in Python, using Matplotlib. This lets you quickly see whether sub-groups of a population are outliers compared to the full population.\n\nTwo methods are provided:\n\n* **parametric funnelplot** which uses a standard distribution to estimate the intervals of the funnel (usually a normal distribution)\n* **bootstrap funnelplot** which uses bootstrapped percentiles to estimate the intervals of the funnel \n\nA utility function `funnel()` to make it easy to plot data by grouping Pandas DataFrames in a Seaborn-like API is provided.\n\n## Example\nData of test performance for California schools from [`pydataset/Caschool`](https://pypi.org/project/pydataset/).\n\n    funnel(df=data(\"Caschool\"), x=\"testscr\", group=\"county\")\n\n<img src=\"imgs\\caschool_example.png\" width=\"100%\">\n\n## Install\n\n`pip install funnelplot`\n\n## Examples\n\n### Full caschool example\n\n```python\n# load some example data\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pydataset import data\nfrom funnelplot.core import funnel\n\n# create a suitable axis\nfig,ax = plt.subplots(figsize=(4,6))\nax.set_frame_on(False)\n\n# funnel plot, using 0.5% -> 99.5% interval\nfunnel(df=data(\"Caschool\"), x=\"testscr\", group=\"county\", percentage=99.5, error_mode=\"data\")\n```\n\n    C:\\Users\\John\\Dropbox\\devel\\funnelplot\\funnelplot\\core.py:14: RuntimeWarning: invalid value encountered in true_divide\n      return band / np.sqrt(group_size)\n    C:\\Users\\John\\Dropbox\\devel\\funnelplot\\funnelplot\\core.py:14: RuntimeWarning: divide by zero encountered in true_divide\n      return band / np.sqrt(group_size)\n\n\n\n![png](docs/images/output_6_1.png)\n\n\n```python\n# use bootstrap instead of normal fit\nfig,ax = plt.subplots(figsize=(5,6))\nax.set_frame_on(False)\nfunnel(df=data(\"Caschool\"), x='testscr', group=\"county\", bootstrap_mode=True, error_mode=\"bootstrap\")\n```\n\n\n![png](docs/images/output_7_0.png)\n\n\n### Synthetic data example\n\n```python\n## Synthetic data\nimport numpy as np\nimport random\nrandom.seed(2020)\nnp.random.seed(2020)\ngroups = []\np_mean, p_std = 0, 1\n# random groups, with different sizes, means and std. devs.\nfor i in range(25):\n    n_group = np.random.randint(1, 80)\n    g_std =  np.random.uniform(0.1, 4.5) \n    g_mean = np.random.uniform(-1.9, 0.5)\n    groups.append(np.random.normal(p_mean + g_mean,\n                                   p_std + g_std, \n                                   n_group))\n```\n\n```python\nax, fig = plt.subplots(figsize=(9, 4))\nfunnel_plot(\n    groups,\n    labels=[random.choice(\"abcdefg\") * 4 for i in range(len(groups))],\n    percentage=95,\n)\n```\n\n\n![png](docs/images/output_10_0.png)\n\n\n```python\nax, fig = plt.subplots(figsize=(9, 4))\n# bootstrap version, using medians instead of means\nfunnel_plot_bootstrap(\n    groups,\n    labels=[random.choice(\"abcdefg\") * 4 for i in range(len(groups))],\n    percentage=95,\n    stat=np.median\n)\n```\n\n\n![png](docs/images/output_11_0.png)\n\n\n## API\n\n* `funnel(df, x, group, bootstrap_mode=False)` show a DataFrame `df` as a funnel plot, rendering column `x` and grouping the data by `group`.\n\n        Parameters:\n            df: DataFrame\n                The data to be shown.\n            x:  string, column name\n                The column of the frame to render as datapoints.\n            group: string, column name\n                The column to group the frame by\n            bootstrap_mode: boolean, optional (default False)\n                If True, uses the funnel_plot_bootstrap() function; otherwise\n                use the parameteric funnel_plot() function\n            **kwargs:\n                passed to funnel_plot() / funnel_plot_bootstrap()\n\n\n* `funnel_plot(data_groups, ...)` plot a list of arrays as a funnel plot.\n\n        Parameters:\n            data_groups: list of 1D arrays\n                a list of 1D arrays the individual groups to be analysed.\n            ax: axis, optional\n                an Matplotlib axis to draw onto\n            dist: distribution function, like scipy.stats.norm(0,1)\n                function to use to get the ppf and cdf of for plotting\n            percentage: float, 0.0 -> 100.0 (default 95)\n                percentage  of interval enclosed (e.g. percentage=95 will enclose 2.5% to 97.5%)\n            labels: list of strings, optional\n                one label string per group, will be shown only for those groups that lie outside the funnel\n            left_color: matplotlib color, optional (default C1)\n                color to render points to the left of the funnel bounds (negative outliers)\n            right_color: matplotlib color, optional (default C2)\n                color to render points to the right of the funnel bounds (positive outliers)        \n            error_mode: string, optional (default \"data\")\n                For each outlier group, can show:\n                    \"data\": original data values for that group as a dot plot\n                    \"none\": no error bars\n                    \"bootstrap\": 95% bootstrap intervals, as lines\n                    \"ci\": 95% CI intervals, as lines\n            show_rug: boolean, optional (default False):\n                If True, show a rug plot at the bottom of the graph, for\n                the whole group population\n            show_contours: boolean optional (default True)\n                true if additional contours shown\n\n\n* `funnel_plot_bootstrap(data_groups, ...)` plot a list of arrays as a funnel plot, using bootstrapped intervals instead of a parametric distribution.\n\n        Parameters:\n            data_groups: list of 1D arrays\n                a list of 1D arrays the individual groups to be analysed.\n            ax: axis, optional\n                an Matplotlib axis to draw onto\n            percentage: float, 0.0 -> 100.0 (default 95)\n                percentage  of interval enclosed (e.g. percentage=95 will enclose 2.5% to 97.5%)\n            labels: list of strings, optional\n                one label string per group, will be shown only for those groups that lie outside the funnel\n            left_color: matplotlib color, optional (default C1)\n                color to render points to the left of the funnel bounds (negative outliers)\n            right_color: matplotlib color, optional (default C2)\n                color to render points to the right of the funnel bounds (positive outliers)\n            bootstrap_n: int, optional (default 1000)\n                number of runs in the bootstrap\n            error_mode: string, optional (default \"data\")\n                For each outlier group, can show:\n                    \"data\": original data values for that group as a dot plot\n                    \"none\": no error bars\n                    \"bootstrap\": 95% bootstrap intervals, as lines\n                    \"ci\": 95% CI intervals, as lines\n            show_rug: boolean, optional (default False):\n                If True, show a rug plot at the bottom of the graph, for\n                the whole group population            \n            show_contours: boolean optional (default True)\n                true if additional contours shown\n            stat: function like np.mean, optional\n                statistic to use when plotting the funnel plot  \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johnhw/funnelplot", "keywords": "funnel plot", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "funnelplot", "package_url": "https://pypi.org/project/funnelplot/", "platform": "", "project_url": "https://pypi.org/project/funnelplot/", "project_urls": {"Homepage": "https://github.com/johnhw/funnelplot"}, "release_url": "https://pypi.org/project/funnelplot/0.2.1/", "requires_dist": ["matplotlib", "numpy", "scipy"], "requires_python": ">=3.6", "summary": "Simple funnel plots", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Funnel plot</h1>\n<blockquote>\n<p>Simple funnel plots for visualising sub-group variance.</p>\n</blockquote>\n<p>This package provides simple <a href=\"https://psmu.improvement.nhs.uk/psc-shared-library/measurement-evidence-base/16-funnel-plots-for-comparing-institutional-performance/file\" rel=\"nofollow\">funnel plots</a> in Python, using Matplotlib. This lets you quickly see whether sub-groups of a population are outliers compared to the full population.</p>\n<p>Two methods are provided:</p>\n<ul>\n<li><strong>parametric funnelplot</strong> which uses a standard distribution to estimate the intervals of the funnel (usually a normal distribution)</li>\n<li><strong>bootstrap funnelplot</strong> which uses bootstrapped percentiles to estimate the intervals of the funnel</li>\n</ul>\n<p>A utility function <code>funnel()</code> to make it easy to plot data by grouping Pandas DataFrames in a Seaborn-like API is provided.</p>\n<h2>Example</h2>\n<p>Data of test performance for California schools from <a href=\"https://pypi.org/project/pydataset/\" rel=\"nofollow\"><code>pydataset/Caschool</code></a>.</p>\n<pre><code>funnel(df=data(\"Caschool\"), x=\"testscr\", group=\"county\")\n</code></pre>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fb3ae4ae2b07083b5363713d973b5bea44052d9/696d67735c63617363686f6f6c5f6578616d706c652e706e67\" width=\"100%\">\n<h2>Install</h2>\n<p><code>pip install funnelplot</code></p>\n<h2>Examples</h2>\n<h3>Full caschool example</h3>\n<pre><span class=\"c1\"># load some example data</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydataset</span> <span class=\"kn\">import</span> <span class=\"n\">data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">funnelplot.core</span> <span class=\"kn\">import</span> <span class=\"n\">funnel</span>\n\n<span class=\"c1\"># create a suitable axis</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span><span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_frame_on</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># funnel plot, using 0.5% -&gt; 99.5% interval</span>\n<span class=\"n\">funnel</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s2\">\"Caschool\"</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"testscr\"</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"s2\">\"county\"</span><span class=\"p\">,</span> <span class=\"n\">percentage</span><span class=\"o\">=</span><span class=\"mf\">99.5</span><span class=\"p\">,</span> <span class=\"n\">error_mode</span><span class=\"o\">=</span><span class=\"s2\">\"data\"</span><span class=\"p\">)</span>\n</pre>\n<pre><code>C:\\Users\\John\\Dropbox\\devel\\funnelplot\\funnelplot\\core.py:14: RuntimeWarning: invalid value encountered in true_divide\n  return band / np.sqrt(group_size)\nC:\\Users\\John\\Dropbox\\devel\\funnelplot\\funnelplot\\core.py:14: RuntimeWarning: divide by zero encountered in true_divide\n  return band / np.sqrt(group_size)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c817ddc9f17d4e10f4152b38018d93e88200d95e/646f63732f696d616765732f6f75747075745f365f312e706e67\"></p>\n<pre><span class=\"c1\"># use bootstrap instead of normal fit</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span><span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_frame_on</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">funnel</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s2\">\"Caschool\"</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'testscr'</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"s2\">\"county\"</span><span class=\"p\">,</span> <span class=\"n\">bootstrap_mode</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">error_mode</span><span class=\"o\">=</span><span class=\"s2\">\"bootstrap\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/190df2bd295d0d1a02b89f476e96e2e0cf80be39/646f63732f696d616765732f6f75747075745f375f302e706e67\"></p>\n<h3>Synthetic data example</h3>\n<pre><span class=\"c1\">## Synthetic data</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">)</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">)</span>\n<span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">p_mean</span><span class=\"p\">,</span> <span class=\"n\">p_std</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># random groups, with different sizes, means and std. devs.</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">):</span>\n    <span class=\"n\">n_group</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>\n    <span class=\"n\">g_std</span> <span class=\"o\">=</span>  <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">4.5</span><span class=\"p\">)</span> \n    <span class=\"n\">g_mean</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.9</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n    <span class=\"n\">groups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"n\">p_mean</span> <span class=\"o\">+</span> <span class=\"n\">g_mean</span><span class=\"p\">,</span>\n                                   <span class=\"n\">p_std</span> <span class=\"o\">+</span> <span class=\"n\">g_std</span><span class=\"p\">,</span> \n                                   <span class=\"n\">n_group</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"n\">funnel_plot</span><span class=\"p\">(</span>\n    <span class=\"n\">groups</span><span class=\"p\">,</span>\n    <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"s2\">\"abcdefg\"</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">4</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">))],</span>\n    <span class=\"n\">percentage</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38605e96682195d8ab08398d92bcf83c2285568f/646f63732f696d616765732f6f75747075745f31305f302e706e67\"></p>\n<pre><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># bootstrap version, using medians instead of means</span>\n<span class=\"n\">funnel_plot_bootstrap</span><span class=\"p\">(</span>\n    <span class=\"n\">groups</span><span class=\"p\">,</span>\n    <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"s2\">\"abcdefg\"</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">4</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">))],</span>\n    <span class=\"n\">percentage</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span>\n    <span class=\"n\">stat</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">median</span>\n<span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b8de9c32160c7c3c7dbf0c418aae38482dfd3aa/646f63732f696d616765732f6f75747075745f31315f302e706e67\"></p>\n<h2>API</h2>\n<ul>\n<li>\n<p><code>funnel(df, x, group, bootstrap_mode=False)</code> show a DataFrame <code>df</code> as a funnel plot, rendering column <code>x</code> and grouping the data by <code>group</code>.</p>\n<pre><code>  Parameters:\n      df: DataFrame\n          The data to be shown.\n      x:  string, column name\n          The column of the frame to render as datapoints.\n      group: string, column name\n          The column to group the frame by\n      bootstrap_mode: boolean, optional (default False)\n          If True, uses the funnel_plot_bootstrap() function; otherwise\n          use the parameteric funnel_plot() function\n      **kwargs:\n          passed to funnel_plot() / funnel_plot_bootstrap()\n</code></pre>\n</li>\n<li>\n<p><code>funnel_plot(data_groups, ...)</code> plot a list of arrays as a funnel plot.</p>\n<pre><code>  Parameters:\n      data_groups: list of 1D arrays\n          a list of 1D arrays the individual groups to be analysed.\n      ax: axis, optional\n          an Matplotlib axis to draw onto\n      dist: distribution function, like scipy.stats.norm(0,1)\n          function to use to get the ppf and cdf of for plotting\n      percentage: float, 0.0 -&gt; 100.0 (default 95)\n          percentage  of interval enclosed (e.g. percentage=95 will enclose 2.5% to 97.5%)\n      labels: list of strings, optional\n          one label string per group, will be shown only for those groups that lie outside the funnel\n      left_color: matplotlib color, optional (default C1)\n          color to render points to the left of the funnel bounds (negative outliers)\n      right_color: matplotlib color, optional (default C2)\n          color to render points to the right of the funnel bounds (positive outliers)        \n      error_mode: string, optional (default \"data\")\n          For each outlier group, can show:\n              \"data\": original data values for that group as a dot plot\n              \"none\": no error bars\n              \"bootstrap\": 95% bootstrap intervals, as lines\n              \"ci\": 95% CI intervals, as lines\n      show_rug: boolean, optional (default False):\n          If True, show a rug plot at the bottom of the graph, for\n          the whole group population\n      show_contours: boolean optional (default True)\n          true if additional contours shown\n</code></pre>\n</li>\n<li>\n<p><code>funnel_plot_bootstrap(data_groups, ...)</code> plot a list of arrays as a funnel plot, using bootstrapped intervals instead of a parametric distribution.</p>\n<pre><code>  Parameters:\n      data_groups: list of 1D arrays\n          a list of 1D arrays the individual groups to be analysed.\n      ax: axis, optional\n          an Matplotlib axis to draw onto\n      percentage: float, 0.0 -&gt; 100.0 (default 95)\n          percentage  of interval enclosed (e.g. percentage=95 will enclose 2.5% to 97.5%)\n      labels: list of strings, optional\n          one label string per group, will be shown only for those groups that lie outside the funnel\n      left_color: matplotlib color, optional (default C1)\n          color to render points to the left of the funnel bounds (negative outliers)\n      right_color: matplotlib color, optional (default C2)\n          color to render points to the right of the funnel bounds (positive outliers)\n      bootstrap_n: int, optional (default 1000)\n          number of runs in the bootstrap\n      error_mode: string, optional (default \"data\")\n          For each outlier group, can show:\n              \"data\": original data values for that group as a dot plot\n              \"none\": no error bars\n              \"bootstrap\": 95% bootstrap intervals, as lines\n              \"ci\": 95% CI intervals, as lines\n      show_rug: boolean, optional (default False):\n          If True, show a rug plot at the bottom of the graph, for\n          the whole group population            \n      show_contours: boolean optional (default True)\n          true if additional contours shown\n      stat: function like np.mean, optional\n          statistic to use when plotting the funnel plot  \n</code></pre>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6988122, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "49ed03ad7c238e071660bae8d2cf2e64", "sha256": "df5d569e3cdc9276b6d6f37480994f1614e825747ff8cdf4206289cba5a23408"}, "downloads": -1, "filename": "funnelplot-0.1.0.tar.gz", "has_sig": false, "md5_digest": "49ed03ad7c238e071660bae8d2cf2e64", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7833, "upload_time": "2020-02-27T21:21:52", "upload_time_iso_8601": "2020-02-27T21:21:52.941214Z", "url": "https://files.pythonhosted.org/packages/ff/79/a9a0a46f97079aebbdef23d66d58fb5ee1a3d05a00a65e956af043a6a921/funnelplot-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1c530e52e6bc477f3defacb1b415188e", "sha256": "0eeb78cba94ca62ab9e4d1874f37c83af473b00e43b19859a78b14b10c9b065e"}, "downloads": -1, "filename": "funnelplot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1c530e52e6bc477f3defacb1b415188e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8710, "upload_time": "2020-02-29T22:59:47", "upload_time_iso_8601": "2020-02-29T22:59:47.446268Z", "url": "https://files.pythonhosted.org/packages/a6/20/6047b6f3c9f7ce57ef67fadf37c3f2e36e11f6b7f003c5736bea0ff976c2/funnelplot-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "37bcc284f299412707e5c508c288ee95", "sha256": "381b2268f421063b4ef86ea4b2d23b6d2c0d55b27610168f754a7ced903db56e"}, "downloads": -1, "filename": "funnelplot-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37bcc284f299412707e5c508c288ee95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9166, "upload_time": "2020-04-09T17:45:54", "upload_time_iso_8601": "2020-04-09T17:45:54.535975Z", "url": "https://files.pythonhosted.org/packages/9e/f0/3d159f21f7e95827afaa6145dbbacc83352b24270173f2eaf1c344e8891a/funnelplot-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae257a1882efd9b5e4fc8280c99d3ea2", "sha256": "959d4d5a9be83bd5d52a5bef6dc016851b2e29bfbce8453a21992d9d42d55187"}, "downloads": -1, "filename": "funnelplot-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ae257a1882efd9b5e4fc8280c99d3ea2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8743, "upload_time": "2020-04-09T17:45:56", "upload_time_iso_8601": "2020-04-09T17:45:56.048566Z", "url": "https://files.pythonhosted.org/packages/de/c2/da5118d1ba413ce7425349d9c7fcdabac5c0681db4ccb3e3a1ba08490412/funnelplot-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37bcc284f299412707e5c508c288ee95", "sha256": "381b2268f421063b4ef86ea4b2d23b6d2c0d55b27610168f754a7ced903db56e"}, "downloads": -1, "filename": "funnelplot-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37bcc284f299412707e5c508c288ee95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9166, "upload_time": "2020-04-09T17:45:54", "upload_time_iso_8601": "2020-04-09T17:45:54.535975Z", "url": "https://files.pythonhosted.org/packages/9e/f0/3d159f21f7e95827afaa6145dbbacc83352b24270173f2eaf1c344e8891a/funnelplot-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae257a1882efd9b5e4fc8280c99d3ea2", "sha256": "959d4d5a9be83bd5d52a5bef6dc016851b2e29bfbce8453a21992d9d42d55187"}, "downloads": -1, "filename": "funnelplot-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ae257a1882efd9b5e4fc8280c99d3ea2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8743, "upload_time": "2020-04-09T17:45:56", "upload_time_iso_8601": "2020-04-09T17:45:56.048566Z", "url": "https://files.pythonhosted.org/packages/de/c2/da5118d1ba413ce7425349d9c7fcdabac5c0681db4ccb3e3a1ba08490412/funnelplot-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:38 2020"}