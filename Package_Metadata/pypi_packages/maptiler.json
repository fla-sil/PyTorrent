{"info": {"author": "Nils Ziehn", "author_email": "nziehn@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "### maptiler ###\n\nEasy interface to created custom sized map tiles for geohashing.\n\n- Plot the result to verify that everything is working correctly\n- Get tiles in the vicinity of a given latitude, longitude\n- You can use the `tile.hash` property for hashing\n- For many applications, it's even better to use `tile.x`, `tile.y` coordinates because you can reconstruct the bounding box from them \n\nImportant: What is different than most other map tiling algorithms: The tiles from maptiler have the same size\n\n- You can specify the tile size when creating the instance\n \n\n```\n    import maptiler.maptiler as mt\n    import maptiler.map_plot as mp\n    \n    out_path = 'mymap.gitign.html'\n    search_point = mt.MapPoint(40.7058254, -74.1180859)\n    search_radius = 500 * 1000\n    square_size = 500 * 1000\n    \n    map_tiler = mt.MapTiler(square_size=square_size)\n    tiles = map_tiler.tiles_for_point(search_point,\n                                      search_radius)\n    \n    # the (x,y) values of the tiles\n    print [(tile.x, tile.y) for tile in tiles]\n    \n    # the hash values of the tiles\n    print [tile.hash for tile in tiles]\n    \n    map = mp.Map(google_api_key='YOUR_GOOGLE_MAPS_JS_API_KEY_HERE')\n    \n    for tile in tiles:\n        rect = mp.MapRect(tile.bounds[0], tile.bounds[2])\n        map.add_entity(rect)\n    \n    map.add_entity(mp.MapCircle(search_point, search_radius))\n    map.add_entity(mp.MapMarker(search_point))\n    \n    map.to_file(out_path, focus=search_point, zoom=4)\n```\n\n![maptiler - image tiles](http://i.imgur.com/W1qvWUF.png)\n\nCode hosted on `GitHub https://github.com/nziehn/maptiler`", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/nziehn/maptiler/archive/1.0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nziehn/maptiler", "keywords": "python geohash tiles", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "maptiler", "package_url": "https://pypi.org/project/maptiler/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/maptiler/", "project_urls": {"Download": "https://github.com/nziehn/maptiler/archive/1.0.3.tar.gz", "Homepage": "https://github.com/nziehn/maptiler"}, "release_url": "https://pypi.org/project/maptiler/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Allows custom geohash bucket sizes and finding buckets in vicinity of given location", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            ### maptiler ###<br><br>Easy interface to created custom sized map tiles for geohashing.<br><br>- Plot the result to verify that everything is working correctly<br>- Get tiles in the vicinity of a given latitude, longitude<br>- You can use the `tile.hash` property for hashing<br>- For many applications, it's even better to use `tile.x`, `tile.y` coordinates because you can reconstruct the bounding box from them <br><br>Important: What is different than most other map tiling algorithms: The tiles from maptiler have the same size<br><br>- You can specify the tile size when creating the instance<br> <br><br>```<br>    import maptiler.maptiler as mt<br>    import maptiler.map_plot as mp<br>    <br>    out_path = 'mymap.gitign.html'<br>    search_point = mt.MapPoint(40.7058254, -74.1180859)<br>    search_radius = 500 * 1000<br>    square_size = 500 * 1000<br>    <br>    map_tiler = mt.MapTiler(square_size=square_size)<br>    tiles = map_tiler.tiles_for_point(search_point,<br>                                      search_radius)<br>    <br>    # the (x,y) values of the tiles<br>    print [(tile.x, tile.y) for tile in tiles]<br>    <br>    # the hash values of the tiles<br>    print [tile.hash for tile in tiles]<br>    <br>    map = mp.Map(google_api_key='YOUR_GOOGLE_MAPS_JS_API_KEY_HERE')<br>    <br>    for tile in tiles:<br>        rect = mp.MapRect(tile.bounds[0], tile.bounds[2])<br>        map.add_entity(rect)<br>    <br>    map.add_entity(mp.MapCircle(search_point, search_radius))<br>    map.add_entity(mp.MapMarker(search_point))<br>    <br>    map.to_file(out_path, focus=search_point, zoom=4)<br>```<br><br>![maptiler - image tiles](http://i.imgur.com/W1qvWUF.png)<br><br>Code hosted on `GitHub https://github.com/nziehn/maptiler`\n          </div>"}, "last_serial": 2282704, "releases": {"1.0.2": [], "1.0.3": [{"comment_text": "", "digests": {"md5": "45c619b42498236e0e7b3d6324e3e4be", "sha256": "cb600137ce0b79620f14afb3f74bbca6fc0296973a720f339dd52a77718e0674"}, "downloads": -1, "filename": "maptiler-1.0.3.tar.gz", "has_sig": false, "md5_digest": "45c619b42498236e0e7b3d6324e3e4be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6244, "upload_time": "2016-08-15T19:27:04", "upload_time_iso_8601": "2016-08-15T19:27:04.952335Z", "url": "https://files.pythonhosted.org/packages/62/da/ad594ca77b538d3496e05ef07295998ede234596290e8466c8a203de42b5/maptiler-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "45c619b42498236e0e7b3d6324e3e4be", "sha256": "cb600137ce0b79620f14afb3f74bbca6fc0296973a720f339dd52a77718e0674"}, "downloads": -1, "filename": "maptiler-1.0.3.tar.gz", "has_sig": false, "md5_digest": "45c619b42498236e0e7b3d6324e3e4be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6244, "upload_time": "2016-08-15T19:27:04", "upload_time_iso_8601": "2016-08-15T19:27:04.952335Z", "url": "https://files.pythonhosted.org/packages/62/da/ad594ca77b538d3496e05ef07295998ede234596290e8466c8a203de42b5/maptiler-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:52 2020"}