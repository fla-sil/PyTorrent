{"info": {"author": "Sachinthak Abeywardana", "author_email": "sachinra@it.usyd.edu.au", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# KeraTorch\n> Implementing Keras clone with pytorch backend.\n\n\n## Install\n\n`pip install keratorch`\n\n## How to use\n\n```python\nfrom keraTorch.model import Sequential\nfrom keraTorch.layers import *\nfrom keraTorch.losses import *\n```\n\nThe data:\n\n```python\nx_train.shape, y_train.shape, x_valid.shape, y_valid.shape\n```\n\n\n\n\n    ((50000, 784), (50000,), (10000, 784), (10000,))\n\n\n\nModel definition:\n\n```python\nmodel = Sequential()\nmodel.add(Dense(100, x_train.shape[1], activation='relu'))\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))\n```\n\nDoesn't actually compile anything but to look like keras we specify the loss as below. `ce4softmax` means crossentropy for softmax loss.\n\n```python\nmodel.compile(ce4softmax)\n```\n\nBurrow for Fastai's learning rate finder to find best learning rate:\n\n```python\nbs = 256\nmodel.lr_find(x_train, y_train, bs=bs)\n```\n\n    Min numerical gradient: 9.12E-03\n    Min loss divided by 10: 1.45E-02\n\n\n\n![png](docs/images/output_11_1.png)\n\n\nWe have the same `.fit` and `.predict` functions:\n\n```python\nmodel.fit(x_train, y_train, bs, epochs=10, lr=1e-2)\n```\n\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: left;\">\n      <th>epoch</th>\n      <th>train_loss</th>\n      <th>valid_loss</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2.298158</td>\n      <td>2.270433</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2.249195</td>\n      <td>2.054905</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2.082948</td>\n      <td>1.474771</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1.806854</td>\n      <td>0.904923</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>1.526004</td>\n      <td>0.737786</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>1.293055</td>\n      <td>0.705958</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>1.105806</td>\n      <td>0.666755</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>0.958004</td>\n      <td>0.687373</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>0.838495</td>\n      <td>0.696255</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>0.741785</td>\n      <td>0.697341</td>\n      <td>00:01</td>\n    </tr>\n  </tbody>\n</table>\n\n\n```python\npreds = model.predict(x_valid)\naccuracy = (preds.argmax(axis=-1) == y_valid).mean()\nprint(f'Predicted accuracy is {accuracy:.2f}')\n```\n\n    Predicted accuracy is 0.81\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sachinruk/keraTorch/tree/master/", "keywords": "Deep Learning", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "keraTorch", "package_url": "https://pypi.org/project/keraTorch/", "platform": "", "project_url": "https://pypi.org/project/keraTorch/", "project_urls": {"Homepage": "https://github.com/sachinruk/keraTorch/tree/master/"}, "release_url": "https://pypi.org/project/keraTorch/0.0.4/", "requires_dist": ["fastai", "torch (>=1.2.0)", "matplotlib", "pandas", "scipy"], "requires_python": ">=3.6", "summary": "A keras like wrapper for pytorch", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>KeraTorch</h1>\n<blockquote>\n<p>Implementing Keras clone with pytorch backend.</p>\n</blockquote>\n<h2>Install</h2>\n<p><code>pip install keratorch</code></p>\n<h2>How to use</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keraTorch.model</span> <span class=\"kn\">import</span> <span class=\"n\">Sequential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keraTorch.layers</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keraTorch.losses</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>The data:</p>\n<pre><span class=\"n\">x_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">x_valid</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">y_valid</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n</pre>\n<pre><code>((50000, 784), (50000,), (10000, 784), (10000,))\n</code></pre>\n<p>Model definition:</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Sequential</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">x_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'relu'</span><span class=\"p\">))</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'relu'</span><span class=\"p\">))</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'softmax'</span><span class=\"p\">))</span>\n</pre>\n<p>Doesn't actually compile anything but to look like keras we specify the loss as below. <code>ce4softmax</code> means crossentropy for softmax loss.</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">ce4softmax</span><span class=\"p\">)</span>\n</pre>\n<p>Burrow for Fastai's learning rate finder to find best learning rate:</p>\n<pre><span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"mi\">256</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">lr_find</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"o\">=</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n</pre>\n<pre><code>Min numerical gradient: 9.12E-03\nMin loss divided by 10: 1.45E-02\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f0611d0838bc3f425d613b969141b283221454f9/646f63732f696d616765732f6f75747075745f31315f312e706e67\"></p>\n<p>We have the same <code>.fit</code> and <code>.predict</code> functions:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">1e-2</span><span class=\"p\">)</span>\n</pre>\n<table>\n  <thead>\n    <tr>\n      <th>epoch</th>\n      <th>train_loss</th>\n      <th>valid_loss</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2.298158</td>\n      <td>2.270433</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2.249195</td>\n      <td>2.054905</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2.082948</td>\n      <td>1.474771</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>1.806854</td>\n      <td>0.904923</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>1.526004</td>\n      <td>0.737786</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>1.293055</td>\n      <td>0.705958</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>1.105806</td>\n      <td>0.666755</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>0.958004</td>\n      <td>0.687373</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>0.838495</td>\n      <td>0.696255</td>\n      <td>00:01</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>0.741785</td>\n      <td>0.697341</td>\n      <td>00:01</td>\n    </tr>\n  </tbody>\n</table>\n<pre><span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">x_valid</span><span class=\"p\">)</span>\n<span class=\"n\">accuracy</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">y_valid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Predicted accuracy is </span><span class=\"si\">{</span><span class=\"n\">accuracy</span><span class=\"si\">:</span><span class=\"s1\">.2f</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>Predicted accuracy is 0.81\n</code></pre>\n\n          </div>"}, "last_serial": 7030472, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a19f4e9caa87b65d0e7446e345e21621", "sha256": "be6a3a4f41747e860d2759b6dc14f46f703551ac43a8f7052a89fec1f639071b"}, "downloads": -1, "filename": "keraTorch-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a19f4e9caa87b65d0e7446e345e21621", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13938, "upload_time": "2020-04-13T12:29:00", "upload_time_iso_8601": "2020-04-13T12:29:00.093066Z", "url": "https://files.pythonhosted.org/packages/d0/ad/a6978f96feeb0b12465a9802d35f6d1980b127c60d885bf4a4405ecbd4d9/keraTorch-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c868a0eaa658b7d7cb92f3cb8c61fa6f", "sha256": "bf2acea07c11c4f36ac57ed85e45973d6bb1a04e4fe1bed7c0980441418f9ea6"}, "downloads": -1, "filename": "keraTorch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c868a0eaa658b7d7cb92f3cb8c61fa6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14794, "upload_time": "2020-04-13T12:29:02", "upload_time_iso_8601": "2020-04-13T12:29:02.758434Z", "url": "https://files.pythonhosted.org/packages/94/c0/66482b1427c50401b49cdbea50546271e41740a69fa0b76da81c259a4878/keraTorch-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "65188fb16b5027cf8bb5e135c3460365", "sha256": "e3e9820249e0ea503cbf64effb513563a9613b4864451119e2186c8533311312"}, "downloads": -1, "filename": "keraTorch-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "65188fb16b5027cf8bb5e135c3460365", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14044, "upload_time": "2020-04-15T12:50:24", "upload_time_iso_8601": "2020-04-15T12:50:24.166765Z", "url": "https://files.pythonhosted.org/packages/26/e2/706c497c54baad6caf8de5ccd60e33f592fa7fa55604e2e72eef6b00c8b6/keraTorch-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ceafc8609e240a551f783712d02f9521", "sha256": "9dd828e6600e55481f03d12f30e56f615325f6193577268b810a4db06d876a32"}, "downloads": -1, "filename": "keraTorch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ceafc8609e240a551f783712d02f9521", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15013, "upload_time": "2020-04-15T12:50:25", "upload_time_iso_8601": "2020-04-15T12:50:25.529271Z", "url": "https://files.pythonhosted.org/packages/68/65/2b9d9c5dceb03f8fb38a2dd0fe76386e938b0a52c83a86009ec3b0d107c1/keraTorch-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "35dc6d3f5d6f5e582bde6efeab488960", "sha256": "bda7a972c64897cdf37ca89f84a6d97d9d3369405bb28102a82945e87030259f"}, "downloads": -1, "filename": "keraTorch-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "35dc6d3f5d6f5e582bde6efeab488960", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13517, "upload_time": "2020-04-16T08:30:50", "upload_time_iso_8601": "2020-04-16T08:30:50.490588Z", "url": "https://files.pythonhosted.org/packages/26/21/8178801a92016eecbc9663005b3273dd0e8b3fe335163abe4b1522bc0340/keraTorch-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1aff4f3d0cdf9caa9ed43c4f63afafc", "sha256": "baea52f02ed0ee350bcbd4be5c15000f7d5c0aa5f3b7ba65ba2c25e117b5a4dc"}, "downloads": -1, "filename": "keraTorch-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f1aff4f3d0cdf9caa9ed43c4f63afafc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12560, "upload_time": "2020-04-16T08:30:51", "upload_time_iso_8601": "2020-04-16T08:30:51.985016Z", "url": "https://files.pythonhosted.org/packages/7a/c2/eb8a62e3c1ee01fd5f5fd6cf35b06b5a6c3f4267c19ea8534036fd0c4244/keraTorch-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35dc6d3f5d6f5e582bde6efeab488960", "sha256": "bda7a972c64897cdf37ca89f84a6d97d9d3369405bb28102a82945e87030259f"}, "downloads": -1, "filename": "keraTorch-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "35dc6d3f5d6f5e582bde6efeab488960", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13517, "upload_time": "2020-04-16T08:30:50", "upload_time_iso_8601": "2020-04-16T08:30:50.490588Z", "url": "https://files.pythonhosted.org/packages/26/21/8178801a92016eecbc9663005b3273dd0e8b3fe335163abe4b1522bc0340/keraTorch-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1aff4f3d0cdf9caa9ed43c4f63afafc", "sha256": "baea52f02ed0ee350bcbd4be5c15000f7d5c0aa5f3b7ba65ba2c25e117b5a4dc"}, "downloads": -1, "filename": "keraTorch-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f1aff4f3d0cdf9caa9ed43c4f63afafc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12560, "upload_time": "2020-04-16T08:30:51", "upload_time_iso_8601": "2020-04-16T08:30:51.985016Z", "url": "https://files.pythonhosted.org/packages/7a/c2/eb8a62e3c1ee01fd5f5fd6cf35b06b5a6c3f4267c19ea8534036fd0c4244/keraTorch-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:07 2020"}