{"info": {"author": "Oscar Acena", "author_email": "oscar.acena@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Index\n=======\n\n* [Description](#markdown-header-description)\n* [Installation](#markdown-header-installation)\n    * [Python pip](#markdown-header-python-pip)\n    * [Debian way](#markdown-header-debian-way)\n    * [Compiling from source](#markdown-header-compiling-from-source)\n* [Usage](#markdown-header-usage)\n    * [Discovering devices](#markdown-header-discovering-devices)\n    * [Reading data](#markdown-header-reading-data)\n    * [Reading data asynchronously](#markdown-header-reading-data-asynchronously)\n    * [Writing data](#markdown-header-writing-data)\n    * [Receiving notifications](#markdown-header-receiving-notifications)\n* [Disclaimer](#markdown-header-disclaimer)\n\n\nDescription\n===========\n\nThis is a Python library to use the GATT Protocol for Bluetooth LE\ndevices. It is a wrapper around the implementation used by gatttool in\nbluez package. It does not call other binaries to do its job :)\n\n\nInstallation\n============\n\nThere are many ways of installing this library: using Python Pip,\nusing the Debian package, or manually compiling it.\n\nPython pip\n----------\n\nInstall as ever (you may need to install the packages listed on `DEPENDS` files):\n\n    sudo pip3 install gattlib\n\nYou can install for Python too, just use `pip`\n\nDebian way\n----------\n\nAgain, you have two options. You can download the .deb file from\n[https://bitbucket.org/OscarAcena/pygattlib/downloads/](https://bitbucket.org/OscarAcena/pygattlib/downloads/)\n(either for Python2 or Python3), and install it using the following command:\n\n    sudo apt install ./python?-gattlib*.deb\n\nAlso, you can add the [pike](http://pike.esi.uclm.es/) repository and install as always:\n\n    wget -qO- http://pike.esi.uclm.es/add-pike-repo.sh | sudo sh\n    sudo apt update\n    sudo apt install python3-gattlib\n\nOf course, there is also a Python2 package (called `python-gattlib`).\n\nCompiling from source\n---------------------\n\nYou should install the needed packages, which are described on `DEPENDS`\nfile. Take special care about versions: libbluetooth-dev should be\n4.101 or greater. Then, just type:\n\n    make PYTHON_VER=3\n    [...]\n\nIf you want to compile for Python 2, remove the flag on make:\n\n    make\n\nThen, to install, just:\n\n    make install\n\n\nUsage\n=====\n\nThis library provides two ways of work: sync and async. The Bluetooth\nLE GATT protocol is asynchronous, so, when you need to read some\nvalue, you make a petition, and wait for response. From the\nperspective of the programmer, when you call a read method, you need\nto pass it a callback object, and it will return inmediatly. The\nresponse will be \"injected\" on that callback object.\n\nThis Python library allows you to call using a callback object\n(async), or without it (sync). If you does not provide a callback\n(working sync.), the library internally will create one, and will wait\nuntil a response arrives, or a timeout expires. Then, the call will\nreturn with the received data.\n\n\nDiscovering devices\n-------------------\n\nTo discover BLE devices, use the `DiscoveryService` provided. You need\nto create an instance of it, indicating the Bluetooth device you want\nto use. Then call the method `discover`, with a timeout. It will\nreturn a dictionary with the address and name of all devices that\nresponded the discovery.\n\n**Note**: it is very likely that you will need admin permissions to do\na discovery, so run this script using `sudo` (or something similar).\n\nAs example:\n\n```python\nfrom gattlib import DiscoveryService\n\nservice = DiscoveryService(\"hci0\")\ndevices = service.discover(2)\n\nfor address, name in devices.items():\n    print(\"name: {}, address: {}\".format(name, address))\n```\n\n\nReading data\n------------\n\nFirst of all, you need to create a GATTRequester, passing the address\nof the device to connect to. Then, you can read a value defined by\neither by its handle or by its UUID. For example:\n\n```python\nfrom gattlib import GATTRequester\n\nreq = GATTRequester(\"00:11:22:33:44:55\")\nname = req.read_by_uuid(\"00002a00-0000-1000-8000-00805f9b34fb\")[0]\nsteps = req.read_by_handle(0x15)[0]\n```\n\n\nReading data asynchronously\n--------------------------\n\nThe process is almost the same: you need to create a GATTRequester\npassing the address of the device to connect to. Then, create a\nGATTResponse object, on which receive the response from your\ndevice. This object will be passed to the `async` method used.\n\n**NOTE**: It is important to maintain the Python process alive, or the\nresponse will never arrive. You can `wait` on that response object, or you\ncan do other things meanwhile.\n\nThe following is an example of response waiting:\n\n```python\nfrom gattlib import GATTRequester, GATTResponse\n\nreq = GATTRequester(\"00:11:22:33:44:55\")\nresponse = GATTResponse()\n\nreq.read_by_handle_async(0x15, response)\nwhile not response.received():\n    time.sleep(0.1)\n\nsteps = response.received()[0]\n```\n\nAnd then, an example that inherits from GATTResponse to be notified\nwhen the response arrives:\n\n```python\nfrom gattlib import GATTRequester, GATTResponse\n\nclass NotifyYourName(GATTResponse):\n    def on_response(self, name):\n        print(\"your name is: {}\".format(name))\n\nresponse = NotifyYourName()\nreq = GATTRequester(\"00:11:22:33:44:55\")\nreq.read_by_handle_async(0x15, response)\n\nwhile True:\n    # here, do other interesting things\n    sleep(1)\n```\n\n\nWriting data\n------------\n\nThe process to write data is the same as for read. Create a GATTRequest object,\nand use the method `write_by_handle` to send the data. This method will issue a\n`write request`. As a note, data must be a bytes object. See the following\nexample:\n\n```python\nfrom gattlib import GATTRequester\n\nreq = GATTRequester(\"00:11:22:33:44:55\")\nreq.write_by_handle(0x10, bytes([14, 4, 56]))\n```\n\nYou can also use the `write_cmd()` to send a write command instead. It has the\nsame parameters as `write_by_handle`: the handler id and a bytes object. As an\nexample:\n\n```python\nfrom gattlib import GATTRequester\n\nreq = GATTRequester(\"00:11:22:33:44:55\")\nreq.write_cmd(0x001e, bytes([16, 1, 4]))\n```\n\n\nReceiving notifications\n-----------------------\n\nTo receive notifications from remote device, you need to overwrite the\n`on_notification` method of `GATTRequester`. This method is called\neach time a notification arrives, and has two params: the handle where\nthe notification was produced, and a string with the data that came in\nthe notification event. The following is a brief example:\n\n```python\nfrom gattlib import GATTRequester\n\nclass Requester(GATTRequester):\n    def on_notification(self, handle, data):\n        print(\"- notification on handle: {}\\n\".format(handle))\n```\n\nYou can receive indications as well. Just overwrite the method\n`on_indication` of `GATTRequester`.\n\n\nDisclaimer\n==========\n\nThis software may harm your device. Use it at your own risk.\n\n    THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n    APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n    HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT\n    WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT\n    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n    A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND\n    PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE\n    DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR\n    CORRECTION.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/OscarAcena/pygattlib", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gattlib", "package_url": "https://pypi.org/project/gattlib/", "platform": "", "project_url": "https://pypi.org/project/gattlib/", "project_urls": {"Homepage": "https://bitbucket.org/OscarAcena/pygattlib"}, "release_url": "https://pypi.org/project/gattlib/0.20200122/", "requires_dist": null, "requires_python": "", "summary": "Library to access Bluetooth LE devices", "version": "0.20200122", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Index</h1>\n<ul>\n<li><a href=\"#markdown-header-description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#markdown-header-installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#markdown-header-python-pip\" rel=\"nofollow\">Python pip</a></li>\n<li><a href=\"#markdown-header-debian-way\" rel=\"nofollow\">Debian way</a></li>\n<li><a href=\"#markdown-header-compiling-from-source\" rel=\"nofollow\">Compiling from source</a></li>\n</ul>\n</li>\n<li><a href=\"#markdown-header-usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#markdown-header-discovering-devices\" rel=\"nofollow\">Discovering devices</a></li>\n<li><a href=\"#markdown-header-reading-data\" rel=\"nofollow\">Reading data</a></li>\n<li><a href=\"#markdown-header-reading-data-asynchronously\" rel=\"nofollow\">Reading data asynchronously</a></li>\n<li><a href=\"#markdown-header-writing-data\" rel=\"nofollow\">Writing data</a></li>\n<li><a href=\"#markdown-header-receiving-notifications\" rel=\"nofollow\">Receiving notifications</a></li>\n</ul>\n</li>\n<li><a href=\"#markdown-header-disclaimer\" rel=\"nofollow\">Disclaimer</a></li>\n</ul>\n<h1>Description</h1>\n<p>This is a Python library to use the GATT Protocol for Bluetooth LE\ndevices. It is a wrapper around the implementation used by gatttool in\nbluez package. It does not call other binaries to do its job :)</p>\n<h1>Installation</h1>\n<p>There are many ways of installing this library: using Python Pip,\nusing the Debian package, or manually compiling it.</p>\n<h2>Python pip</h2>\n<p>Install as ever (you may need to install the packages listed on <code>DEPENDS</code> files):</p>\n<pre><code>sudo pip3 install gattlib\n</code></pre>\n<p>You can install for Python too, just use <code>pip</code></p>\n<h2>Debian way</h2>\n<p>Again, you have two options. You can download the .deb file from\n<a href=\"https://bitbucket.org/OscarAcena/pygattlib/downloads/\" rel=\"nofollow\">https://bitbucket.org/OscarAcena/pygattlib/downloads/</a>\n(either for Python2 or Python3), and install it using the following command:</p>\n<pre><code>sudo apt install ./python?-gattlib*.deb\n</code></pre>\n<p>Also, you can add the <a href=\"http://pike.esi.uclm.es/\" rel=\"nofollow\">pike</a> repository and install as always:</p>\n<pre><code>wget -qO- http://pike.esi.uclm.es/add-pike-repo.sh | sudo sh\nsudo apt update\nsudo apt install python3-gattlib\n</code></pre>\n<p>Of course, there is also a Python2 package (called <code>python-gattlib</code>).</p>\n<h2>Compiling from source</h2>\n<p>You should install the needed packages, which are described on <code>DEPENDS</code>\nfile. Take special care about versions: libbluetooth-dev should be\n4.101 or greater. Then, just type:</p>\n<pre><code>make PYTHON_VER=3\n[...]\n</code></pre>\n<p>If you want to compile for Python 2, remove the flag on make:</p>\n<pre><code>make\n</code></pre>\n<p>Then, to install, just:</p>\n<pre><code>make install\n</code></pre>\n<h1>Usage</h1>\n<p>This library provides two ways of work: sync and async. The Bluetooth\nLE GATT protocol is asynchronous, so, when you need to read some\nvalue, you make a petition, and wait for response. From the\nperspective of the programmer, when you call a read method, you need\nto pass it a callback object, and it will return inmediatly. The\nresponse will be \"injected\" on that callback object.</p>\n<p>This Python library allows you to call using a callback object\n(async), or without it (sync). If you does not provide a callback\n(working sync.), the library internally will create one, and will wait\nuntil a response arrives, or a timeout expires. Then, the call will\nreturn with the received data.</p>\n<h2>Discovering devices</h2>\n<p>To discover BLE devices, use the <code>DiscoveryService</code> provided. You need\nto create an instance of it, indicating the Bluetooth device you want\nto use. Then call the method <code>discover</code>, with a timeout. It will\nreturn a dictionary with the address and name of all devices that\nresponded the discovery.</p>\n<p><strong>Note</strong>: it is very likely that you will need admin permissions to do\na discovery, so run this script using <code>sudo</code> (or something similar).</p>\n<p>As example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gattlib</span> <span class=\"kn\">import</span> <span class=\"n\">DiscoveryService</span>\n\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">DiscoveryService</span><span class=\"p\">(</span><span class=\"s2\">\"hci0\"</span><span class=\"p\">)</span>\n<span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">discover</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">devices</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"name: </span><span class=\"si\">{}</span><span class=\"s2\">, address: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"p\">))</span>\n</pre>\n<h2>Reading data</h2>\n<p>First of all, you need to create a GATTRequester, passing the address\nof the device to connect to. Then, you can read a value defined by\neither by its handle or by its UUID. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gattlib</span> <span class=\"kn\">import</span> <span class=\"n\">GATTRequester</span>\n\n<span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">GATTRequester</span><span class=\"p\">(</span><span class=\"s2\">\"00:11:22:33:44:55\"</span><span class=\"p\">)</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">read_by_uuid</span><span class=\"p\">(</span><span class=\"s2\">\"00002a00-0000-1000-8000-00805f9b34fb\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">steps</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">read_by_handle</span><span class=\"p\">(</span><span class=\"mh\">0x15</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<h2>Reading data asynchronously</h2>\n<p>The process is almost the same: you need to create a GATTRequester\npassing the address of the device to connect to. Then, create a\nGATTResponse object, on which receive the response from your\ndevice. This object will be passed to the <code>async</code> method used.</p>\n<p><strong>NOTE</strong>: It is important to maintain the Python process alive, or the\nresponse will never arrive. You can <code>wait</code> on that response object, or you\ncan do other things meanwhile.</p>\n<p>The following is an example of response waiting:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gattlib</span> <span class=\"kn\">import</span> <span class=\"n\">GATTRequester</span><span class=\"p\">,</span> <span class=\"n\">GATTResponse</span>\n\n<span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">GATTRequester</span><span class=\"p\">(</span><span class=\"s2\">\"00:11:22:33:44:55\"</span><span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">GATTResponse</span><span class=\"p\">()</span>\n\n<span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">read_by_handle_async</span><span class=\"p\">(</span><span class=\"mh\">0x15</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">received</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"n\">steps</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">received</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<p>And then, an example that inherits from GATTResponse to be notified\nwhen the response arrives:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gattlib</span> <span class=\"kn\">import</span> <span class=\"n\">GATTRequester</span><span class=\"p\">,</span> <span class=\"n\">GATTResponse</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NotifyYourName</span><span class=\"p\">(</span><span class=\"n\">GATTResponse</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"your name is: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">NotifyYourName</span><span class=\"p\">()</span>\n<span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">GATTRequester</span><span class=\"p\">(</span><span class=\"s2\">\"00:11:22:33:44:55\"</span><span class=\"p\">)</span>\n<span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">read_by_handle_async</span><span class=\"p\">(</span><span class=\"mh\">0x15</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"c1\"># here, do other interesting things</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>Writing data</h2>\n<p>The process to write data is the same as for read. Create a GATTRequest object,\nand use the method <code>write_by_handle</code> to send the data. This method will issue a\n<code>write request</code>. As a note, data must be a bytes object. See the following\nexample:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gattlib</span> <span class=\"kn\">import</span> <span class=\"n\">GATTRequester</span>\n\n<span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">GATTRequester</span><span class=\"p\">(</span><span class=\"s2\">\"00:11:22:33:44:55\"</span><span class=\"p\">)</span>\n<span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">write_by_handle</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">]))</span>\n</pre>\n<p>You can also use the <code>write_cmd()</code> to send a write command instead. It has the\nsame parameters as <code>write_by_handle</code>: the handler id and a bytes object. As an\nexample:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gattlib</span> <span class=\"kn\">import</span> <span class=\"n\">GATTRequester</span>\n\n<span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">GATTRequester</span><span class=\"p\">(</span><span class=\"s2\">\"00:11:22:33:44:55\"</span><span class=\"p\">)</span>\n<span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">write_cmd</span><span class=\"p\">(</span><span class=\"mh\">0x001e</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n</pre>\n<h2>Receiving notifications</h2>\n<p>To receive notifications from remote device, you need to overwrite the\n<code>on_notification</code> method of <code>GATTRequester</code>. This method is called\neach time a notification arrives, and has two params: the handle where\nthe notification was produced, and a string with the data that came in\nthe notification event. The following is a brief example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gattlib</span> <span class=\"kn\">import</span> <span class=\"n\">GATTRequester</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Requester</span><span class=\"p\">(</span><span class=\"n\">GATTRequester</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_notification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"- notification on handle: </span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">))</span>\n</pre>\n<p>You can receive indications as well. Just overwrite the method\n<code>on_indication</code> of <code>GATTRequester</code>.</p>\n<h1>Disclaimer</h1>\n<p>This software may harm your device. Use it at your own risk.</p>\n<pre><code>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT\nWARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND\nPERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE\nDEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR\nCORRECTION.\n</code></pre>\n\n          </div>"}, "last_serial": 6499676, "releases": {"0.20150119": [{"comment_text": "built for Linux-3.13.0-29-generic-x86_64-with-glibc2.4", "digests": {"md5": "6633f2a6fe4cfaa177f684a93e92c693", "sha256": "efe7d3133549c9f708317da5da1f388acf74c4f57221d5385f40828203f54e3d"}, "downloads": -1, "filename": "gattlib-0.20150119.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "6633f2a6fe4cfaa177f684a93e92c693", "packagetype": "bdist_dumb", "python_version": "2.7", "requires_python": null, "size": 602900, "upload_time": "2015-01-19T17:40:23", "upload_time_iso_8601": "2015-01-19T17:40:23.748721Z", "url": "https://files.pythonhosted.org/packages/7c/8f/861dbcc3da19f8324f5e0ac6940a2df682d2108d43d5fc734403be1c787a/gattlib-0.20150119.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "5adb08e3d15c1ce1f897cae54ce91a51", "sha256": "73f4a8255c467f5010e042c33f1c06481ebe1d8fa41a6b556ca5061a31d988bc"}, "downloads": -1, "filename": "gattlib-0.20150119.tar.gz", "has_sig": false, "md5_digest": "5adb08e3d15c1ce1f897cae54ce91a51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36090, "upload_time": "2015-01-19T17:39:58", "upload_time_iso_8601": "2015-01-19T17:39:58.879327Z", "url": "https://files.pythonhosted.org/packages/e1/b7/b8ef5aa35b93dc013a18918dafc1da50df7a1c0cdb43710224e71a7a060c/gattlib-0.20150119.tar.gz", "yanked": false}], "0.20150130": [{"comment_text": "", "digests": {"md5": "2dbbeb6846bcb22f0a7accb6da58a80c", "sha256": "a24157e5a32f4b37ef206d09c083e54cff1f05efadee8cea0da3446f256f7626"}, "downloads": -1, "filename": "gattlib-0.20150130.tar.gz", "has_sig": false, "md5_digest": "2dbbeb6846bcb22f0a7accb6da58a80c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36481, "upload_time": "2015-01-30T09:12:01", "upload_time_iso_8601": "2015-01-30T09:12:01.058709Z", "url": "https://files.pythonhosted.org/packages/43/de/2ae25758e14447c2195b3628a5a5b50451977e39ac5196c53ece2d58784c/gattlib-0.20150130.tar.gz", "yanked": false}], "0.20150131": [{"comment_text": "", "digests": {"md5": "8695ab772e8f3efdee23a4956d7460a2", "sha256": "9d574eaa9688978a3e920085c4adf2e66b832eaa81ce5cf21ef90b668f53794d"}, "downloads": -1, "filename": "gattlib-0.20150131.tar.gz", "has_sig": false, "md5_digest": "8695ab772e8f3efdee23a4956d7460a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36937, "upload_time": "2015-01-31T17:18:05", "upload_time_iso_8601": "2015-01-31T17:18:05.345002Z", "url": "https://files.pythonhosted.org/packages/de/b9/6aa639cefedae3f81f79261ad8dfc4fe7c8f0c98a4434b2b4edda89040f6/gattlib-0.20150131.tar.gz", "yanked": false}], "0.20150805": [{"comment_text": "", "digests": {"md5": "f620eca190bb7acd67c7aafecaedb6c2", "sha256": "7f5fbc1613a0225f2af79683ca907fed40b765369c61cf90d023cbf4a92bdb0c"}, "downloads": -1, "filename": "gattlib-0.20150805.tar.gz", "has_sig": false, "md5_digest": "f620eca190bb7acd67c7aafecaedb6c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1725278, "upload_time": "2015-08-05T14:02:08", "upload_time_iso_8601": "2015-08-05T14:02:08.709005Z", "url": "https://files.pythonhosted.org/packages/be/2f/5b1aecec551b42b59d8b399ad444b5672972efb590ca83d784dbe616a3e1/gattlib-0.20150805.tar.gz", "yanked": false}], "0.20200117.post2": [{"comment_text": "", "digests": {"md5": "de1002d2ca6546fa6eb895cddc1d37ae", "sha256": "e3bd816c0a967f36e0d5d163472d2f4ca331b5057907f2a27a497258508736b9"}, "downloads": -1, "filename": "gattlib-0.20200117.post2.tar.gz", "has_sig": false, "md5_digest": "de1002d2ca6546fa6eb895cddc1d37ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44348, "upload_time": "2020-01-17T08:37:11", "upload_time_iso_8601": "2020-01-17T08:37:11.036766Z", "url": "https://files.pythonhosted.org/packages/b7/5b/e0a8e4b2841fd0a34641e16bae5e3d8107073c2c21da4ae0a59a5150eb57/gattlib-0.20200117.post2.tar.gz", "yanked": false}], "0.20200117.post3": [{"comment_text": "", "digests": {"md5": "7239ee8b11a1b39bca0681ce7a02f9ec", "sha256": "0143d832927a11b20a843566d5cf34c68d9b1dd9041aa938a79395da0138f0e9"}, "downloads": -1, "filename": "gattlib-0.20200117.post3.tar.gz", "has_sig": false, "md5_digest": "7239ee8b11a1b39bca0681ce7a02f9ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44382, "upload_time": "2020-01-17T08:45:25", "upload_time_iso_8601": "2020-01-17T08:45:25.794000Z", "url": "https://files.pythonhosted.org/packages/2a/53/aa2a12348549cd458bb196370b34415d9626a0e0bf3b5307e1d54c927640/gattlib-0.20200117.post3.tar.gz", "yanked": false}], "0.20200121": [{"comment_text": "", "digests": {"md5": "85231ae76b301d63b1fd2abe71a39d43", "sha256": "113952645c8bfbc3178726e58a35d3b799592913c522b7942c6f70812828b23f"}, "downloads": -1, "filename": "gattlib-0.20200121.tar.gz", "has_sig": false, "md5_digest": "85231ae76b301d63b1fd2abe71a39d43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2276462, "upload_time": "2020-01-21T11:28:12", "upload_time_iso_8601": "2020-01-21T11:28:12.224149Z", "url": "https://files.pythonhosted.org/packages/04/df/9c6346358a2131a38cb4eec81d28ede43fa7895945c842e1d249722c94f7/gattlib-0.20200121.tar.gz", "yanked": false}], "0.20200122": [{"comment_text": "", "digests": {"md5": "8a29d60d585a09f6dbbfa67d082e4e73", "sha256": "e7bc9f073cd32d9259cfb7e5b12c76f45e29316259d1d9a7872333bc63cb3bbd"}, "downloads": -1, "filename": "gattlib-0.20200122.tar.gz", "has_sig": false, "md5_digest": "8a29d60d585a09f6dbbfa67d082e4e73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44665, "upload_time": "2020-01-22T11:12:18", "upload_time_iso_8601": "2020-01-22T11:12:18.748200Z", "url": "https://files.pythonhosted.org/packages/b1/d8/03cc2843e7235b7d2f55af7b3abec3cb94e14c0036dde10b505b6fe55f35/gattlib-0.20200122.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a29d60d585a09f6dbbfa67d082e4e73", "sha256": "e7bc9f073cd32d9259cfb7e5b12c76f45e29316259d1d9a7872333bc63cb3bbd"}, "downloads": -1, "filename": "gattlib-0.20200122.tar.gz", "has_sig": false, "md5_digest": "8a29d60d585a09f6dbbfa67d082e4e73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44665, "upload_time": "2020-01-22T11:12:18", "upload_time_iso_8601": "2020-01-22T11:12:18.748200Z", "url": "https://files.pythonhosted.org/packages/b1/d8/03cc2843e7235b7d2f55af7b3abec3cb94e14c0036dde10b505b6fe55f35/gattlib-0.20200122.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:00 2020"}