{"info": {"author": "Jason K. Moore", "author_email": "moorepants@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Physics"], "description": "Introduction\n============\n\nThis is a collection of tools that are helpful for gait analysis. Some are\nspecific to the needs of the Human Motion and Control Lab at Cleveland State\nUniversity but other portions may have potential for general use. It is\nrelatively modular so you can use what you want. It is primarily structured as\na Python distribution but the Octave files are also accessible independently.\n\n.. image:: https://travis-ci.org/csu-hmc/GaitAnalysisToolKit.png?branch=master\n   :target: http://travis-ci.org/csu-hmc/GaitAnalysisToolKit\n\nPython Packages\n===============\n\nThe main Python package is ``gaitanalysis`` and it contains five modules listed\nbelow. ``oct2py`` is used to call Octave routines in the Python code where\nneeded.\n\n``gait.py``\n   General tools for working with gait data such as gait landmark\n   identification and 2D inverse dynamics. The main class is ``GaitData``.\n``controlid.py``\n   Tools for identifying control mechanisms in human locomotion.\n``markers.py``\n   Routines for processing marker data.\n``motek.py``\n   Tools for processing and cleaning data from `Motek Medical`_'s products,\n   e.g. the D-Flow software outputs.\n``utils.py``\n   Helper functions for the other modules.\n\n.. _Motek Medical: http://www.motekmedical.com\n\nEach module has a corresponding test module in ``gaitanalysis/tests``\nsub-package which contain unit tests for the classes and functions in the\nrespective module.\n\nOctave Libraries\n================\n\nSeveral Octave routines are included in the ``gaitanalysis/octave`` directory.\n\n``2d_inverse_dynamics``\n   Implements joint angle and moment computations of a 2D lower body human.\n``inertial_compensation``\n   Compensates force plate forces and moments for inertial effects and\n   re-expresses the forces and moments in the camera reference frame.\n``mmat``\n   Fast matrix multiplication.\n``soder``\n   Computes the rigid body orientation and location of a group of markers.\n``time_delay``\n   Deals with the analog signal time delays.\n\nInstallation\n============\n\nYou will need Python 2.7 and setuptools to install the packages. Its best to\ninstall the dependencies first (NumPy, SciPy, matplotlib, Pandas, PyTables).\nThe SciPy Stack instructions are helpful for this:\nhttp://www.scipy.org/stackspec.html.\n\nSupported versions:\n\n- python >= 2.7\n- numpy >= 1.6.1\n- scipy >= 0.9.0\n- matplotlib >= 1.1.0\n- tables >= 2.3.1\n- pandas >= 0.12.0\n- pyyaml >= 3.10\n- DynamicistToolKit >= 0.3.5\n- oct2py >= 1.2.0\n- octave >= 3.8.1\n\nWe recommend installing Anaconda_ for users in our lab to get all of the\ndependencies.\n\n.. _Anaconda: http://docs.continuum.io/anaconda/\n\nWe also utilize Octave code, so an install of Octave with is also required. See\nhttp://octave.sourceforge.net/index.html for installation instructions.\n\nYou can install using pip (or easy_install). Pip will theoretically [#]_ get\nthe dependencies for you (or at least check if you have them)::\n\n   $ pip install https://github.com/csu-hmc/GaitAnalysisToolKit/zipball/master\n\nOr download the source with your preferred method and install manually.\n\nUsing Git::\n\n   $ git clone git@github.com:csu-hmc/GaitAnalysisToolKit.git\n   $ cd GaitAnalysisToolKit\n\nOr wget::\n\n   $ wget https://github.com/csu-hmc/GaitAnalysisToolKit/archive/master.zip\n   $ unzip master.zip\n   $ cd GaitAnalysisToolKit-master\n\nThen for basic installation::\n\n   $ python setup.py install\n\nOr install for development purposes::\n\n   $ python setup.py develop\n\n.. [#] You will need all build dependencies and also note that matplotlib\n       doesn't play nice with pip.\n\nDependencies\n------------\n\nIt is recommended to install the software dependencies as follows:\n\nOctave can be installed from your package manager or from a downloadable\nbinary, for example on Debian based Linux::\n\n   $ sudo apt-get install octave\n\nFor oct2py to work, calling Octave from the command line should work after\nOctave is installed. For example,\n\n::\n\n   $ octave\n   GNU Octave, version 3.8.1\n   Copyright (C) 2014 John W. Eaton and others.\n   This is free software; see the source code for copying conditions.\n   There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or\n   FITNESS FOR A PARTICULAR PURPOSE.  For details, type 'warranty'.\n\n   Octave was configured for \"x86_64-pc-linux-gnu\".\n\n   Additional information about Octave is available at http://www.octave.org.\n\n   Please contribute if you find this software useful.\n   For more information, visit http://www.octave.org/get-involved.html\n\n   Read http://www.octave.org/bugs.html to learn how to submit bug reports.\n   For information about changes from previous versions, type 'news'.\n\n   octave:1>\n\nThe core dependencies can be installed with conda in a conda environment::\n\n   $ conda create -n gait python=2.7 pip numpy scipy matplotlib pytables pandas pyyaml nose sphinx\n   $ source activate gait\n\nAnd the dependencies which do not have conda packages can be installed into the\nenvironment with pip::\n\n   (gait)$ pip install DynamicistToolKit oct2py\n\nTests\n=====\n\nWhen in the repository directory, run the tests with nose::\n\n   $ nosetests\n\nVagrant\n=======\n\nA vagrant file and provisioning script are included to test the code on both a\nUbuntu 12.04 and Ubuntu 13.10 box. To load the box and run the tests simply\ntype::\n\n   $ cd vagrant\n   $ vagrant up\n\nSee ``VagrantFile`` and the ``*bootstrap.sh`` files to see what's going on.\n\nDocumentation\n=============\n\nThe documentation is hosted at ReadTheDocs:\n\nhttp://gait-analysis-toolkit.readthedocs.org\n\nYou can build the documentation (currently sparse) if you have Sphinx and\nnumpydoc::\n\n   $ cd docs\n   $ make html\n   $ firefox _build/html/index.html\n\nContributing\n============\n\nThe recommended procedure for contributing code to this repository is detailed\nhere. It is the standard method of contributing to Github based repositories\n(https://help.github.com/articles/fork-a-repo).\n\nIf you have don't have access rights to this repository then you should fork\nthe repository on Github using the Github UI and clone the fork that you just\nmade to your machine::\n\n   git clone git@github.com:<your-username>/GaitAnalysisToolKit.git\n\nChange into the directory::\n\n   cd GaitAnalysisToolKit\n\nNow, setup a remote called ``upstream`` that points to the main repository so\nthat you can keep your local repository up-to-date::\n\n   git remote add upstream git@github.com:csu-hmc/GaitAnalysisToolKit.git\n\nNow you have a remote called ``origin`` (the default) which points to **your**\nGithub account's copy and a remote called ``upstream`` that points to the main\nrepository on the csu-hmc organization Github account.\n\nIt's best to keep your local master branch up-to-date with the upstream master\nbranch and then branch locally to create new features. To update your local\nmaster branch simply::\n\n   git checkout master\n   git pull upstream master\n\nIf you have access rights to the main repository simply, clone it and don't\nworry about making a fork on your Github account::\n\n   git clone git@github.com:csu-hmc/GaitAnalysisToolKit.git\n\nChange into the directory::\n\n   cd GaitAnalysisToolKit\n\nNow, to contribute a change to the repository you should create a new branch\noff of the local master branch::\n\n   git checkout -b my-branch\n\nNow make changes to the software and be sure to always include tests! Make sure\nall tests pass on your machine with::\n\n   nosetests\n\nOnce tests pass, add any new files you created::\n\n   git add my_new_file.py\n\nNow commit your changes::\n\n   git commit -am \"Added an amazing new feature.\"\n\nPush your commits to a mirrored branch on the Github repository that you\ncloned::\n\n   git push origin my-branch\n\nNow visit the repository on Github (either yours or the main one) and you\nshould see a \"compare and pull button\" to make a pull request against the main\nrepository. Github and Travis-CI will check for merge conflicts and run the\ntests again on a cloud machine. You can ask others to review your code at this\npoint and if all is well, press the \"merge\" button on the pull request.\nFinally, delete the branches on your local machine and on your Github repo::\n\n   git branch -d my-branch && git push origin :my-branch\n\nGit Notes\n---------\n\n- The master branch on main repository on Github should always pass all tests\n  and we should strive to keep it in a stable state. It is best to not merge\n  contributions into master unless tests are passing, and preferably if\n  someone else approved your code.\n- In general, do not commit changes to your local master branch, always pull in\n  the latest changes from the master branch with ``git pull upstream master``\n  then checkout a new branch for your changes. This way you keep your local\n  master branch up-to-date with the main master branch on Github.\n- In general, do not push changes to the main repo master branch directly, use\n  branches and push the branches up with a pull request.\n- In general, do not commit binary files, files generated from source, or large\n  data files to the repository. See\n  https://help.github.com/articles/working-with-large-files for some reasons.\n\nRelease Notes\n=============\n\n0.1.2\n-----\n\n- Fixed bug preventing GaitData.plot_grf_landmarks from working.\n- Removed inverse_data.mat from the source distribution.\n\n0.1.1\n-----\n\n- Fixed installation issue where the octave and data files were not included in\n  the installation directory.\n\n0.1.0\n-----\n\n- Initial release\n- Copied the walk module from DynamicistToolKit @ eecaebd31940179fe25e99a68c91b75d8b8f191f", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/csu-hmc/GaitAnalysisToolKit", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "GaitAnalysisToolKit", "package_url": "https://pypi.org/project/GaitAnalysisToolKit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/GaitAnalysisToolKit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/csu-hmc/GaitAnalysisToolKit"}, "release_url": "https://pypi.org/project/GaitAnalysisToolKit/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "Various tools for gait analysis used at the Cleveland State\nUniversity Human Motion and Control Lab.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This is a collection of tools that are helpful for gait analysis. Some are\nspecific to the needs of the Human Motion and Control Lab at Cleveland State\nUniversity but other portions may have potential for general use. It is\nrelatively modular so you can use what you want. It is primarily structured as\na Python distribution but the Octave files are also accessible independently.</p>\n<a href=\"http://travis-ci.org/csu-hmc/GaitAnalysisToolKit\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/csu-hmc/GaitAnalysisToolKit.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ac6b3a41ccf0a4c998629a8412c93c86d4e185f/68747470733a2f2f7472617669732d63692e6f72672f6373752d686d632f47616974416e616c79736973546f6f6c4b69742e706e673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"python-packages\">\n<h2>Python Packages</h2>\n<p>The main Python package is <tt>gaitanalysis</tt> and it contains five modules listed\nbelow. <tt>oct2py</tt> is used to call Octave routines in the Python code where\nneeded.</p>\n<dl>\n<dt><tt>gait.py</tt></dt>\n<dd>General tools for working with gait data such as gait landmark\nidentification and 2D inverse dynamics. The main class is <tt>GaitData</tt>.</dd>\n<dt><tt>controlid.py</tt></dt>\n<dd>Tools for identifying control mechanisms in human locomotion.</dd>\n<dt><tt>markers.py</tt></dt>\n<dd>Routines for processing marker data.</dd>\n<dt><tt>motek.py</tt></dt>\n<dd>Tools for processing and cleaning data from <a href=\"http://www.motekmedical.com\" rel=\"nofollow\">Motek Medical</a>\u2019s products,\ne.g. the D-Flow software outputs.</dd>\n<dt><tt>utils.py</tt></dt>\n<dd>Helper functions for the other modules.</dd>\n</dl>\n<p>Each module has a corresponding test module in <tt>gaitanalysis/tests</tt>\nsub-package which contain unit tests for the classes and functions in the\nrespective module.</p>\n</div>\n<div id=\"octave-libraries\">\n<h2>Octave Libraries</h2>\n<p>Several Octave routines are included in the <tt>gaitanalysis/octave</tt> directory.</p>\n<dl>\n<dt><tt>2d_inverse_dynamics</tt></dt>\n<dd>Implements joint angle and moment computations of a 2D lower body human.</dd>\n<dt><tt>inertial_compensation</tt></dt>\n<dd>Compensates force plate forces and moments for inertial effects and\nre-expresses the forces and moments in the camera reference frame.</dd>\n<dt><tt>mmat</tt></dt>\n<dd>Fast matrix multiplication.</dd>\n<dt><tt>soder</tt></dt>\n<dd>Computes the rigid body orientation and location of a group of markers.</dd>\n<dt><tt>time_delay</tt></dt>\n<dd>Deals with the analog signal time delays.</dd>\n</dl>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You will need Python 2.7 and setuptools to install the packages. Its best to\ninstall the dependencies first (NumPy, SciPy, matplotlib, Pandas, PyTables).\nThe SciPy Stack instructions are helpful for this:\n<a href=\"http://www.scipy.org/stackspec.html\" rel=\"nofollow\">http://www.scipy.org/stackspec.html</a>.</p>\n<p>Supported versions:</p>\n<ul>\n<li>python &gt;= 2.7</li>\n<li>numpy &gt;= 1.6.1</li>\n<li>scipy &gt;= 0.9.0</li>\n<li>matplotlib &gt;= 1.1.0</li>\n<li>tables &gt;= 2.3.1</li>\n<li>pandas &gt;= 0.12.0</li>\n<li>pyyaml &gt;= 3.10</li>\n<li>DynamicistToolKit &gt;= 0.3.5</li>\n<li>oct2py &gt;= 1.2.0</li>\n<li>octave &gt;= 3.8.1</li>\n</ul>\n<p>We recommend installing <a href=\"http://docs.continuum.io/anaconda/\" rel=\"nofollow\">Anaconda</a> for users in our lab to get all of the\ndependencies.</p>\n<p>We also utilize Octave code, so an install of Octave with is also required. See\n<a href=\"http://octave.sourceforge.net/index.html\" rel=\"nofollow\">http://octave.sourceforge.net/index.html</a> for installation instructions.</p>\n<p>You can install using pip (or easy_install). Pip will theoretically <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[1]</a> get\nthe dependencies for you (or at least check if you have them):</p>\n<pre>$ pip install https://github.com/csu-hmc/GaitAnalysisToolKit/zipball/master\n</pre>\n<p>Or download the source with your preferred method and install manually.</p>\n<p>Using Git:</p>\n<pre>$ git clone git@github.com:csu-hmc/GaitAnalysisToolKit.git\n$ cd GaitAnalysisToolKit\n</pre>\n<p>Or wget:</p>\n<pre>$ wget https://github.com/csu-hmc/GaitAnalysisToolKit/archive/master.zip\n$ unzip master.zip\n$ cd GaitAnalysisToolKit-master\n</pre>\n<p>Then for basic installation:</p>\n<pre>$ python setup.py install\n</pre>\n<p>Or install for development purposes:</p>\n<pre>$ python setup.py develop\n</pre>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>You will need all build dependencies and also note that matplotlib\ndoesn\u2019t play nice with pip.</td></tr>\n</tbody>\n</table>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>It is recommended to install the software dependencies as follows:</p>\n<p>Octave can be installed from your package manager or from a downloadable\nbinary, for example on Debian based Linux:</p>\n<pre>$ sudo apt-get install octave\n</pre>\n<p>For oct2py to work, calling Octave from the command line should work after\nOctave is installed. For example,</p>\n<pre>$ octave\nGNU Octave, version 3.8.1\nCopyright (C) 2014 John W. Eaton and others.\nThis is free software; see the source code for copying conditions.\nThere is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  For details, type 'warranty'.\n\nOctave was configured for \"x86_64-pc-linux-gnu\".\n\nAdditional information about Octave is available at http://www.octave.org.\n\nPlease contribute if you find this software useful.\nFor more information, visit http://www.octave.org/get-involved.html\n\nRead http://www.octave.org/bugs.html to learn how to submit bug reports.\nFor information about changes from previous versions, type 'news'.\n\noctave:1&gt;\n</pre>\n<p>The core dependencies can be installed with conda in a conda environment:</p>\n<pre>$ conda create -n gait python=2.7 pip numpy scipy matplotlib pytables pandas pyyaml nose sphinx\n$ source activate gait\n</pre>\n<p>And the dependencies which do not have conda packages can be installed into the\nenvironment with pip:</p>\n<pre>(gait)$ pip install DynamicistToolKit oct2py\n</pre>\n</div>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>When in the repository directory, run the tests with nose:</p>\n<pre>$ nosetests\n</pre>\n</div>\n<div id=\"vagrant\">\n<h2>Vagrant</h2>\n<p>A vagrant file and provisioning script are included to test the code on both a\nUbuntu 12.04 and Ubuntu 13.10 box. To load the box and run the tests simply\ntype:</p>\n<pre>$ cd vagrant\n$ vagrant up\n</pre>\n<p>See <tt>VagrantFile</tt> and the <tt>*bootstrap.sh</tt> files to see what\u2019s going on.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The documentation is hosted at ReadTheDocs:</p>\n<p><a href=\"http://gait-analysis-toolkit.readthedocs.org\" rel=\"nofollow\">http://gait-analysis-toolkit.readthedocs.org</a></p>\n<p>You can build the documentation (currently sparse) if you have Sphinx and\nnumpydoc:</p>\n<pre>$ cd docs\n$ make html\n$ firefox _build/html/index.html\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>The recommended procedure for contributing code to this repository is detailed\nhere. It is the standard method of contributing to Github based repositories\n(<a href=\"https://help.github.com/articles/fork-a-repo\" rel=\"nofollow\">https://help.github.com/articles/fork-a-repo</a>).</p>\n<p>If you have don\u2019t have access rights to this repository then you should fork\nthe repository on Github using the Github UI and clone the fork that you just\nmade to your machine:</p>\n<pre>git clone git@github.com:&lt;your-username&gt;/GaitAnalysisToolKit.git\n</pre>\n<p>Change into the directory:</p>\n<pre>cd GaitAnalysisToolKit\n</pre>\n<p>Now, setup a remote called <tt>upstream</tt> that points to the main repository so\nthat you can keep your local repository up-to-date:</p>\n<pre>git remote add upstream git@github.com:csu-hmc/GaitAnalysisToolKit.git\n</pre>\n<p>Now you have a remote called <tt>origin</tt> (the default) which points to <strong>your</strong>\nGithub account\u2019s copy and a remote called <tt>upstream</tt> that points to the main\nrepository on the csu-hmc organization Github account.</p>\n<p>It\u2019s best to keep your local master branch up-to-date with the upstream master\nbranch and then branch locally to create new features. To update your local\nmaster branch simply:</p>\n<pre>git checkout master\ngit pull upstream master\n</pre>\n<p>If you have access rights to the main repository simply, clone it and don\u2019t\nworry about making a fork on your Github account:</p>\n<pre>git clone git@github.com:csu-hmc/GaitAnalysisToolKit.git\n</pre>\n<p>Change into the directory:</p>\n<pre>cd GaitAnalysisToolKit\n</pre>\n<p>Now, to contribute a change to the repository you should create a new branch\noff of the local master branch:</p>\n<pre>git checkout -b my-branch\n</pre>\n<p>Now make changes to the software and be sure to always include tests! Make sure\nall tests pass on your machine with:</p>\n<pre>nosetests\n</pre>\n<p>Once tests pass, add any new files you created:</p>\n<pre>git add my_new_file.py\n</pre>\n<p>Now commit your changes:</p>\n<pre>git commit -am \"Added an amazing new feature.\"\n</pre>\n<p>Push your commits to a mirrored branch on the Github repository that you\ncloned:</p>\n<pre>git push origin my-branch\n</pre>\n<p>Now visit the repository on Github (either yours or the main one) and you\nshould see a \u201ccompare and pull button\u201d to make a pull request against the main\nrepository. Github and Travis-CI will check for merge conflicts and run the\ntests again on a cloud machine. You can ask others to review your code at this\npoint and if all is well, press the \u201cmerge\u201d button on the pull request.\nFinally, delete the branches on your local machine and on your Github repo:</p>\n<pre>git branch -d my-branch &amp;&amp; git push origin :my-branch\n</pre>\n<div id=\"git-notes\">\n<h3>Git Notes</h3>\n<ul>\n<li>The master branch on main repository on Github should always pass all tests\nand we should strive to keep it in a stable state. It is best to not merge\ncontributions into master unless tests are passing, and preferably if\nsomeone else approved your code.</li>\n<li>In general, do not commit changes to your local master branch, always pull in\nthe latest changes from the master branch with <tt>git pull upstream master</tt>\nthen checkout a new branch for your changes. This way you keep your local\nmaster branch up-to-date with the main master branch on Github.</li>\n<li>In general, do not push changes to the main repo master branch directly, use\nbranches and push the branches up with a pull request.</li>\n<li>In general, do not commit binary files, files generated from source, or large\ndata files to the repository. See\n<a href=\"https://help.github.com/articles/working-with-large-files\" rel=\"nofollow\">https://help.github.com/articles/working-with-large-files</a> for some reasons.</li>\n</ul>\n</div>\n</div>\n<div id=\"release-notes\">\n<h2>Release Notes</h2>\n<div id=\"id3\">\n<h3>0.1.2</h3>\n<ul>\n<li>Fixed bug preventing GaitData.plot_grf_landmarks from working.</li>\n<li>Removed inverse_data.mat from the source distribution.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.1.1</h3>\n<ul>\n<li>Fixed installation issue where the octave and data files were not included in\nthe installation directory.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.0</h3>\n<ul>\n<li>Initial release</li>\n<li>Copied the walk module from DynamicistToolKit @ eecaebd31940179fe25e99a68c91b75d8b8f191f</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1336280, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d774eb475ab5b18dbe7db20ba7d859f5", "sha256": "821ea4dca3ef69a1ea687b0f510c77b5ad7a0b1afb94b90f212333e4a8a67137"}, "downloads": -1, "filename": "GaitAnalysisToolKit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d774eb475ab5b18dbe7db20ba7d859f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1526504, "upload_time": "2014-12-01T20:19:13", "upload_time_iso_8601": "2014-12-01T20:19:13.762137Z", "url": "https://files.pythonhosted.org/packages/90/87/73094f4176c1cef48623e6385b59d32bdfcd5375469343de3cbdb8ec89e0/GaitAnalysisToolKit-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f37414501bc5afa9eb04f4f686be0d87", "sha256": "83411b5ab862d1790a5a2b05c67b95d8bf2655fc2860add98b47b6162eaa457c"}, "downloads": -1, "filename": "GaitAnalysisToolKit-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f37414501bc5afa9eb04f4f686be0d87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3958162, "upload_time": "2014-12-08T19:32:21", "upload_time_iso_8601": "2014-12-08T19:32:21.564898Z", "url": "https://files.pythonhosted.org/packages/84/c4/c6b7ba0136c6fdd24e34c81002dbce246ef8b2bca8b4d2fc2175e0d1dd5c/GaitAnalysisToolKit-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "16a30b1d2ba9a3ed0a425c95ada6ad15", "sha256": "7801d564daf385d86569db354a025c9e12567145f1e2b9527b01dff2dfba12da"}, "downloads": -1, "filename": "GaitAnalysisToolKit-0.1.2.tar.gz", "has_sig": false, "md5_digest": "16a30b1d2ba9a3ed0a425c95ada6ad15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1564317, "upload_time": "2014-12-08T22:14:31", "upload_time_iso_8601": "2014-12-08T22:14:31.347186Z", "url": "https://files.pythonhosted.org/packages/3d/5b/c3f6a5f08543391c956961fecf0dad8f4dbbf4d38ccd9270d379fdaf162c/GaitAnalysisToolKit-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16a30b1d2ba9a3ed0a425c95ada6ad15", "sha256": "7801d564daf385d86569db354a025c9e12567145f1e2b9527b01dff2dfba12da"}, "downloads": -1, "filename": "GaitAnalysisToolKit-0.1.2.tar.gz", "has_sig": false, "md5_digest": "16a30b1d2ba9a3ed0a425c95ada6ad15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1564317, "upload_time": "2014-12-08T22:14:31", "upload_time_iso_8601": "2014-12-08T22:14:31.347186Z", "url": "https://files.pythonhosted.org/packages/3d/5b/c3f6a5f08543391c956961fecf0dad8f4dbbf4d38ccd9270d379fdaf162c/GaitAnalysisToolKit-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:20 2020"}