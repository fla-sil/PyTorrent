{"info": {"author": "Elie Bursztein", "author_email": "code@elie.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Debuggers", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "# PerfCounters\n\n[![Build Status](https://travis-ci.com/ebursztein/perfcounters.svg?branch=master)](https://travis-ci.com/ebursztein/perfcounters)\n[![Coverage Status](https://coveralls.io/repos/github/ebursztein/perfcounters/badge.svg?branch=master)](https://coveralls.io/github/ebursztein/perfcounters?branch=master&id=2.0.1)\n[![license](https://img.shields.io/badge/license-Apache%202-blue.svg?maxAge=2592000)](https://github.com/ebursztein/perfcounters/blob/master/LICENSE)\n\nEasily add performance counters to your python code.\n\nPerfCounter is a thoroughly tested library that make it easy to add multiple counters to any python code to measure intermediate timing and values. Its various reporting mechanisms makes it easy to analyze and report performance measurement regardless of your workflow.\n\n## Installation\n\nThe easiest way to install perfcounters is via pip:\n\n```bash\npip install --user -U perfcounters\n```\n\n## Type of counters available\n\nPerfcounters natively support three kind of counters:\n\n- `Timing counters`: used to measure how long a block of code took.\n- `Laps counters`: used to measure how each loop iteration take.\n- `Value counters`: used to record/track values.\n\nThere is currently no way to track value evolution overtime. If it is something\nyou are interested in, please open an github issue.\n\n## Usage\n\nHere a few example that demonstrate the library basic usage. They are\nalso available as a [jupyter notebook](https://github.com/ebursztein/perfcounters/blob/master/demo.ipynb).\nif you want to follow along. The notebook also contains the advance usage example\nso it makes for a convinient reference.\n\n### Timing counter usage\n\nTiming counters are used to measure time elapsed in a section of the code.\nThey are started with the `start(...)` method and are stopped with\nthe `stop(...)` method or `stop_all(...)` method.\n\nHere is a short example that uses the timing counters to compare `random()`\nversus `randint()` to get a value in  {0, 1}.\n\n\n```python\ncounters = PerfCounters()  # init the counter collection.\n\ncounters.start('random')  # start a timing counter called random.random.\nfor x in range(100000):\n    int(random.random())\ncounters.stop('random')  # stop the random.random.\n\ncounters.start('randint')  # start a timing counter called random.random.\nfor x in range(1000000):\n    random.randint(0,1)\ncounters.stop('randint')  # stop the random.random.\n\ncounters.report() # report print all counter values in nicely formated tables.\n```\n\nThis code output a report like this:\n\n```text\n-=[Timing counters]=-\n+---------+-----------+\n| name    |     value |\n|---------+-----------|\n| randint | 0.982396  |\n| random  | 0.0229394 |\n+---------+-----------+\n```\n\nYou can also export the results in various formats including json, text, grepable text and HTML. For example to export in json you can simply use the to_json() function as follow:\n\n```python\ncounters.to_json()\n```\n\nwhich will return the counters as a json serialized object:\n\n```json\n{\"Timing counters\": [[\"exponentiation\", 0.010947942733764648]]}\n```\n\n### Laps counter usage\n\nTiming counters are used to track how long each iteration of a loop is taking. They\nwork as follow:\n\n```python\ncounters = PerfCounters()  # declaring our counters\n\ncounters.start('random loop') # create counter\nfor _ in range(3):\n    time.sleep(round(random.random(), 2))\n    counters.lap('random loop') # record lap time\ncounters.stop('random loop')\n\ncounters.report()  # we don't need to stop the counter. Report do it\n```\n\nWhen outputing/returning laps counters `PerfCounters` do report the value of each lap,\nthe cumulative time and statistics about the laps:\n\n```text\n-=[Timing counters]=-\n+-------------+---------+\n| name        |   value |\n|-------------+---------|\n| random loop | 1.57178 |\n+-------------+---------+\n\n-=[Laps counters]=-\n\n-= random loop =-\n+------------+-------------------+\n|   lap time |   cumulative time |\n|------------+-------------------|\n|   0.760164 |          0.760164 |\n|   0.540887 |          1.30105  |\n|   0.270732 |          1.57178  |\n+------------+-------------------+\n+---------+----------+\n| stat    |    value |\n|---------+----------|\n| min     | 0.270732 |\n| average | 0.523928 |\n| median  | 0.540887 |\n| max     | 0.760164 |\n| stddev  | 0.200169 |\n+---------+----------+\n```\n\n*note* you don't need to create a time counter, `Perfcounters` do it for you so\nit is easy to track the overall time.\n\n### Value counters usage\n\nValue counters used to track values. They are either directly set to\na given value with the `set()` method  or incremented with the `increment()` method.\n\nHere is a basic example:\n\n```python\ncounters = PerfCounters()\ncounters.set('mycounter', 39)  # set counter value to 39\ncounters.increment('mycounter', 3)  # increment counter by 3\nval = counters.get('mycounter') #  get the value of the counter\nprint('mycounter value:', val)\n```\n\nobviously values counters are also report via the `report()` api and exported\nalong side with the timing counters and laps counters as demonstrated in\nthe next example.\n\n## Complete example\n\nHere is an end to end example that demonstrate all the basic feature of\n`PerfCounters` at once:\n\n```python\nfrom perfcounters import PerfCounters\nfrom random import randint\n\n# init counters\ncounters = PerfCounters()\n\nnum_iterations = randint(5, 10)\n\n# setting a value counter to a given value\ncounters.set('num_iterations', num_iterations)\n\n# starting a timing counter\ncounters.start('loop')\n\nfor i in range(num_iterations):\n    for _ in range(randint(1000, 50000)):\n        v = randint(0, 1)\n\n    # incrementing a value counter to sum the generated values\n    counters.increment('total_value', v)\n\n    # track lap time\n    counters.lap('loop')\n\n# stopping the timing counter\ncounters.stop('loop')\n\n# reporting all counters\ncounters.report()\n```\n\nThis example will produce a result like this:\n\n```text\n-=[Value counters]=-\n+----------------+---------+\n| name           |   value |\n|----------------+---------|\n| num_iterations |       7 |\n| total_value    |       4 |\n+----------------+---------+\n\n-=[Timing counters]=-\n+--------+----------+\n| name   |    value |\n|--------+----------|\n| loop   | 0.202635 |\n+--------+----------+\n\n-=[Laps counters]=-\n\n-= loop =-\n+------------+-------------------+\n|   lap time |   cumulative time |\n|------------+-------------------|\n| 0.0358815  |         0.0358815 |\n| 0.00401258 |         0.0398941 |\n| 0.0359035  |         0.0757976 |\n| 0.0398953  |         0.115693  |\n| 0.038939   |         0.154632  |\n| 0.0100079  |         0.16464   |\n| 0.0379953  |         0.202635  |\n+------------+-------------------+\n+---------+------------+\n| stat    |      value |\n|---------+------------|\n| min     | 0.00401258 |\n| average | 0.0289479  |\n| median  | 0.0359035  |\n| max     | 0.0398953  |\n| stddev  | 0.014033   |\n+---------+------------+\n```\n\n*Note*: you technically don't need to stop a timing counter before a report. If you don't do it the value reported will be the delta between start time and the time the `report()` function was called. The counter will keep running until it is stopped.\n\n## Advanced usages\n\n- Additional examples are available in the documentation [advanced usage guide](https://github.com/ebursztein/perfcounters/tree/master/docs/advanced_usage.md).\n- A description of all the available functions are availble in the [API documentation page](https://github.com/ebursztein/perfcounters/tree/master/docs/api.md)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ebursztein/perfcounters", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "perfcounters", "package_url": "https://pypi.org/project/perfcounters/", "platform": "", "project_url": "https://pypi.org/project/perfcounters/", "project_urls": {"Homepage": "https://github.com/ebursztein/perfcounters"}, "release_url": "https://pypi.org/project/perfcounters/2.1.0/", "requires_dist": ["tabulate", "numpy"], "requires_python": "", "summary": "Easily add performance counters to your code", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PerfCounters</h1>\n<p><a href=\"https://travis-ci.com/ebursztein/perfcounters\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d6f041026c4e413f2e59769fcf4fd3ce571d269/68747470733a2f2f7472617669732d63692e636f6d2f65627572737a7465696e2f70657266636f756e746572732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/ebursztein/perfcounters?branch=master&amp;id=2.0.1\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb2c23111a742882ebbe7b2e040b2ca61b6e664e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f65627572737a7465696e2f70657266636f756e746572732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/ebursztein/perfcounters/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1a6325ca67abe64af420016c17472c117323eed/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d417061636865253230322d626c75652e7376673f6d61784167653d32353932303030\"></a></p>\n<p>Easily add performance counters to your python code.</p>\n<p>PerfCounter is a thoroughly tested library that make it easy to add multiple counters to any python code to measure intermediate timing and values. Its various reporting mechanisms makes it easy to analyze and report performance measurement regardless of your workflow.</p>\n<h2>Installation</h2>\n<p>The easiest way to install perfcounters is via pip:</p>\n<pre>pip install --user -U perfcounters\n</pre>\n<h2>Type of counters available</h2>\n<p>Perfcounters natively support three kind of counters:</p>\n<ul>\n<li><code>Timing counters</code>: used to measure how long a block of code took.</li>\n<li><code>Laps counters</code>: used to measure how each loop iteration take.</li>\n<li><code>Value counters</code>: used to record/track values.</li>\n</ul>\n<p>There is currently no way to track value evolution overtime. If it is something\nyou are interested in, please open an github issue.</p>\n<h2>Usage</h2>\n<p>Here a few example that demonstrate the library basic usage. They are\nalso available as a <a href=\"https://github.com/ebursztein/perfcounters/blob/master/demo.ipynb\" rel=\"nofollow\">jupyter notebook</a>.\nif you want to follow along. The notebook also contains the advance usage example\nso it makes for a convinient reference.</p>\n<h3>Timing counter usage</h3>\n<p>Timing counters are used to measure time elapsed in a section of the code.\nThey are started with the <code>start(...)</code> method and are stopped with\nthe <code>stop(...)</code> method or <code>stop_all(...)</code> method.</p>\n<p>Here is a short example that uses the timing counters to compare <code>random()</code>\nversus <code>randint()</code> to get a value in  {0, 1}.</p>\n<pre><span class=\"n\">counters</span> <span class=\"o\">=</span> <span class=\"n\">PerfCounters</span><span class=\"p\">()</span>  <span class=\"c1\"># init the counter collection.</span>\n\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s1\">'random'</span><span class=\"p\">)</span>  <span class=\"c1\"># start a timing counter called random.random.</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">):</span>\n    <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">())</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s1\">'random'</span><span class=\"p\">)</span>  <span class=\"c1\"># stop the random.random.</span>\n\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s1\">'randint'</span><span class=\"p\">)</span>  <span class=\"c1\"># start a timing counter called random.random.</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">):</span>\n    <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s1\">'randint'</span><span class=\"p\">)</span>  <span class=\"c1\"># stop the random.random.</span>\n\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span> <span class=\"c1\"># report print all counter values in nicely formated tables.</span>\n</pre>\n<p>This code output a report like this:</p>\n<pre>-=[Timing counters]=-\n+---------+-----------+\n| name    |     value |\n|---------+-----------|\n| randint | 0.982396  |\n| random  | 0.0229394 |\n+---------+-----------+\n</pre>\n<p>You can also export the results in various formats including json, text, grepable text and HTML. For example to export in json you can simply use the to_json() function as follow:</p>\n<pre><span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n</pre>\n<p>which will return the counters as a json serialized object:</p>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"Timing counters\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"s2\">\"exponentiation\"</span><span class=\"p\">,</span> <span class=\"mf\">0.010947942733764648</span><span class=\"p\">]]}</span>\n</pre>\n<h3>Laps counter usage</h3>\n<p>Timing counters are used to track how long each iteration of a loop is taking. They\nwork as follow:</p>\n<pre><span class=\"n\">counters</span> <span class=\"o\">=</span> <span class=\"n\">PerfCounters</span><span class=\"p\">()</span>  <span class=\"c1\"># declaring our counters</span>\n\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s1\">'random loop'</span><span class=\"p\">)</span> <span class=\"c1\"># create counter</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(),</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">lap</span><span class=\"p\">(</span><span class=\"s1\">'random loop'</span><span class=\"p\">)</span> <span class=\"c1\"># record lap time</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s1\">'random loop'</span><span class=\"p\">)</span>\n\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>  <span class=\"c1\"># we don't need to stop the counter. Report do it</span>\n</pre>\n<p>When outputing/returning laps counters <code>PerfCounters</code> do report the value of each lap,\nthe cumulative time and statistics about the laps:</p>\n<pre>-=[Timing counters]=-\n+-------------+---------+\n| name        |   value |\n|-------------+---------|\n| random loop | 1.57178 |\n+-------------+---------+\n\n-=[Laps counters]=-\n\n-= random loop =-\n+------------+-------------------+\n|   lap time |   cumulative time |\n|------------+-------------------|\n|   0.760164 |          0.760164 |\n|   0.540887 |          1.30105  |\n|   0.270732 |          1.57178  |\n+------------+-------------------+\n+---------+----------+\n| stat    |    value |\n|---------+----------|\n| min     | 0.270732 |\n| average | 0.523928 |\n| median  | 0.540887 |\n| max     | 0.760164 |\n| stddev  | 0.200169 |\n+---------+----------+\n</pre>\n<p><em>note</em> you don't need to create a time counter, <code>Perfcounters</code> do it for you so\nit is easy to track the overall time.</p>\n<h3>Value counters usage</h3>\n<p>Value counters used to track values. They are either directly set to\na given value with the <code>set()</code> method  or incremented with the <code>increment()</code> method.</p>\n<p>Here is a basic example:</p>\n<pre><span class=\"n\">counters</span> <span class=\"o\">=</span> <span class=\"n\">PerfCounters</span><span class=\"p\">()</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'mycounter'</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">)</span>  <span class=\"c1\"># set counter value to 39</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">increment</span><span class=\"p\">(</span><span class=\"s1\">'mycounter'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># increment counter by 3</span>\n<span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'mycounter'</span><span class=\"p\">)</span> <span class=\"c1\">#  get the value of the counter</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'mycounter value:'</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n</pre>\n<p>obviously values counters are also report via the <code>report()</code> api and exported\nalong side with the timing counters and laps counters as demonstrated in\nthe next example.</p>\n<h2>Complete example</h2>\n<p>Here is an end to end example that demonstrate all the basic feature of\n<code>PerfCounters</code> at once:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">perfcounters</span> <span class=\"kn\">import</span> <span class=\"n\">PerfCounters</span>\n<span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randint</span>\n\n<span class=\"c1\"># init counters</span>\n<span class=\"n\">counters</span> <span class=\"o\">=</span> <span class=\"n\">PerfCounters</span><span class=\"p\">()</span>\n\n<span class=\"n\">num_iterations</span> <span class=\"o\">=</span> <span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># setting a value counter to a given value</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'num_iterations'</span><span class=\"p\">,</span> <span class=\"n\">num_iterations</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># starting a timing counter</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s1\">'loop'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_iterations</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">50000</span><span class=\"p\">)):</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># incrementing a value counter to sum the generated values</span>\n    <span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">increment</span><span class=\"p\">(</span><span class=\"s1\">'total_value'</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># track lap time</span>\n    <span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">lap</span><span class=\"p\">(</span><span class=\"s1\">'loop'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># stopping the timing counter</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s1\">'loop'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># reporting all counters</span>\n<span class=\"n\">counters</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n</pre>\n<p>This example will produce a result like this:</p>\n<pre>-=[Value counters]=-\n+----------------+---------+\n| name           |   value |\n|----------------+---------|\n| num_iterations |       7 |\n| total_value    |       4 |\n+----------------+---------+\n\n-=[Timing counters]=-\n+--------+----------+\n| name   |    value |\n|--------+----------|\n| loop   | 0.202635 |\n+--------+----------+\n\n-=[Laps counters]=-\n\n-= loop =-\n+------------+-------------------+\n|   lap time |   cumulative time |\n|------------+-------------------|\n| 0.0358815  |         0.0358815 |\n| 0.00401258 |         0.0398941 |\n| 0.0359035  |         0.0757976 |\n| 0.0398953  |         0.115693  |\n| 0.038939   |         0.154632  |\n| 0.0100079  |         0.16464   |\n| 0.0379953  |         0.202635  |\n+------------+-------------------+\n+---------+------------+\n| stat    |      value |\n|---------+------------|\n| min     | 0.00401258 |\n| average | 0.0289479  |\n| median  | 0.0359035  |\n| max     | 0.0398953  |\n| stddev  | 0.014033   |\n+---------+------------+\n</pre>\n<p><em>Note</em>: you technically don't need to stop a timing counter before a report. If you don't do it the value reported will be the delta between start time and the time the <code>report()</code> function was called. The counter will keep running until it is stopped.</p>\n<h2>Advanced usages</h2>\n<ul>\n<li>Additional examples are available in the documentation <a href=\"https://github.com/ebursztein/perfcounters/tree/master/docs/advanced_usage.md\" rel=\"nofollow\">advanced usage guide</a>.</li>\n<li>A description of all the available functions are availble in the <a href=\"https://github.com/ebursztein/perfcounters/tree/master/docs/api.md\" rel=\"nofollow\">API documentation page</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6903521, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f2f0035bfe39b09899c6f51c859e3802", "sha256": "58128dccd011a130dab84c21aa36ef03799027c663226acfa14f3c7f371ca533"}, "downloads": -1, "filename": "perfcounters-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2f0035bfe39b09899c6f51c859e3802", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7809, "upload_time": "2018-11-18T05:56:58", "upload_time_iso_8601": "2018-11-18T05:56:58.192588Z", "url": "https://files.pythonhosted.org/packages/2f/ef/8bc60d68ffb842a7212b2503c1677561e3ab0a6af10f4056006edeefda78/perfcounters-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d08b73dba7cb4d8505b29c4ca97c3be", "sha256": "5056b6aead051dcda27422db6e61b56007184cfa1fa3a0c97b94c170d520dce3"}, "downloads": -1, "filename": "perfcounters-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9d08b73dba7cb4d8505b29c4ca97c3be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5770, "upload_time": "2018-11-18T05:57:00", "upload_time_iso_8601": "2018-11-18T05:57:00.376567Z", "url": "https://files.pythonhosted.org/packages/7b/6d/2a25ad5bb2968b2e49e2fd7d5300a162c1793a3347ec09d188a49e2fe799/perfcounters-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a7b10f81e1bc2c5f98cfcf7fd813a416", "sha256": "a54b39cd10c2e7464a417fcbdfb48797a46b910ae1a2ced94979d0316eff62d3"}, "downloads": -1, "filename": "perfcounters-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a7b10f81e1bc2c5f98cfcf7fd813a416", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9453, "upload_time": "2018-11-18T06:56:59", "upload_time_iso_8601": "2018-11-18T06:56:59.777366Z", "url": "https://files.pythonhosted.org/packages/82/02/1383e1d80e9681e451130687b6bc5cfa327903021ed12bbe04437df49ed1/perfcounters-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fee866ab7b04d2755543d47396874bc0", "sha256": "80a854862a719d513b5db66cf487748c12afe09e739682c10482b9f4b8d7f7a6"}, "downloads": -1, "filename": "perfcounters-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fee866ab7b04d2755543d47396874bc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6522, "upload_time": "2018-11-18T06:57:01", "upload_time_iso_8601": "2018-11-18T06:57:01.771914Z", "url": "https://files.pythonhosted.org/packages/ed/b0/b0ddeb3c3dfdf479deb71a40d060f11e9c42294d5952b46dcd1f046c431b/perfcounters-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "676d14e843914a70d05f24eef37127e8", "sha256": "954fbfe9a42f3f13510e3aad0207a78126a2e12777895f26874ec47b3ba367de"}, "downloads": -1, "filename": "perfcounters-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "676d14e843914a70d05f24eef37127e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9015, "upload_time": "2018-11-19T03:04:21", "upload_time_iso_8601": "2018-11-19T03:04:21.475493Z", "url": "https://files.pythonhosted.org/packages/b2/11/9cbcd7249d357f09fc055318983a71459c397cfbba2f358122b8ad96a0fe/perfcounters-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e76db4ed20f9647018ab3facd8c456a0", "sha256": "92dd74f4456c7291c4795132d1322f833ae5f2dc5110939af7aa4977dcf1b253"}, "downloads": -1, "filename": "perfcounters-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e76db4ed20f9647018ab3facd8c456a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5957, "upload_time": "2018-11-19T03:04:24", "upload_time_iso_8601": "2018-11-19T03:04:24.200655Z", "url": "https://files.pythonhosted.org/packages/d4/8f/c8e3e18fe16f7f64e130b47ba89c052629b4facaee6e7a21bab4e12371d9/perfcounters-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "282d850a6050901cf573d5f5a4b5ba13", "sha256": "9c4c557d55e05e0eff28e5a161cfd4e258edabe4759d428e3250d027d3bac3b3"}, "downloads": -1, "filename": "perfcounters-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "282d850a6050901cf573d5f5a4b5ba13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8994, "upload_time": "2018-12-05T05:19:38", "upload_time_iso_8601": "2018-12-05T05:19:38.607133Z", "url": "https://files.pythonhosted.org/packages/c3/ad/c0524950b9c10e6ef20366515bae82f6b6f277f055fd3eb5331187a22512/perfcounters-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dc7d3bd599843a2086d3bf711bc2ad2", "sha256": "7ecd4b0168ae0089ef4ecb9a9860effb79a4248cc5fff94a8d432ae45444d0f5"}, "downloads": -1, "filename": "perfcounters-1.0.3.tar.gz", "has_sig": false, "md5_digest": "9dc7d3bd599843a2086d3bf711bc2ad2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5943, "upload_time": "2018-12-05T05:19:41", "upload_time_iso_8601": "2018-12-05T05:19:41.791674Z", "url": "https://files.pythonhosted.org/packages/e2/a8/cc1599ffc08e4645e22fff1fbccf5a30e474dbf6f8352f39b005e1be1110/perfcounters-1.0.3.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "7f700a19561d57c29845e6d35ade9288", "sha256": "3c2c42e50e1bcfa57c55a61c2d480ab8df974e6c40d3af091c69b2ddb7db1ba1"}, "downloads": -1, "filename": "perfcounters-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "7f700a19561d57c29845e6d35ade9288", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9335, "upload_time": "2019-09-07T01:02:34", "upload_time_iso_8601": "2019-09-07T01:02:34.300626Z", "url": "https://files.pythonhosted.org/packages/ff/e4/251e421d8acb9c8485e8da69927bf75602e74b578c38ea1ae8cc7c662923/perfcounters-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a0d6858498483231f55c1e6f6c7c88c", "sha256": "3392f9f7ed954d388d2678a8a16c61419994a6a154dd46d6037d0ff3d32b1e4c"}, "downloads": -1, "filename": "perfcounters-1.0.5.tar.gz", "has_sig": false, "md5_digest": "2a0d6858498483231f55c1e6f6c7c88c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6269, "upload_time": "2019-09-07T01:02:40", "upload_time_iso_8601": "2019-09-07T01:02:40.541170Z", "url": "https://files.pythonhosted.org/packages/b5/40/67ba36cdf8cf2f4874b1af9e9dbabf1da7efda95173f9c46347381a5670e/perfcounters-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "e587a4ae18552d53efa39f7259a11357", "sha256": "ec7a51107adee6bacf3d3c68f1d3284136e9c294d55df9e5248afa72b21b907d"}, "downloads": -1, "filename": "perfcounters-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e587a4ae18552d53efa39f7259a11357", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9340, "upload_time": "2019-09-07T01:16:10", "upload_time_iso_8601": "2019-09-07T01:16:10.238880Z", "url": "https://files.pythonhosted.org/packages/24/9a/559f5fd377c262ee1e27a7901fdb97b3b6084c7ecaf607876fd2190f199b/perfcounters-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18ae9efe10405ddf74ff35f183b0ea6c", "sha256": "9b608d4c85b12c6f7e68446896448be83005ebf964a37d2d17d0fad0e3cb6f01"}, "downloads": -1, "filename": "perfcounters-1.0.6.tar.gz", "has_sig": false, "md5_digest": "18ae9efe10405ddf74ff35f183b0ea6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6270, "upload_time": "2019-09-07T01:16:11", "upload_time_iso_8601": "2019-09-07T01:16:11.406599Z", "url": "https://files.pythonhosted.org/packages/57/b0/d0b898b2a8fb73951c40928cbc64ce7fb1db7caf362e7e95f6debf34744d/perfcounters-1.0.6.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "582d98028d7437a338901469a5619c65", "sha256": "0b64730a5226a97c5439fbd4237c31e37780f100d5f66cd163d8ba9001561c70"}, "downloads": -1, "filename": "perfcounters-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "582d98028d7437a338901469a5619c65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15582, "upload_time": "2019-11-27T06:50:22", "upload_time_iso_8601": "2019-11-27T06:50:22.215313Z", "url": "https://files.pythonhosted.org/packages/51/e0/b79f5781a2bcc074042b5770ab06f9c2277ac67d41d96447c7bc4ac961bd/perfcounters-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "400a64ebb7bf9ff8b1a8c1da615649d0", "sha256": "8e12ab5d82b9fed1da302d53b4cb9723bc72408bcd1a2ea9f71e8259150585ff"}, "downloads": -1, "filename": "perfcounters-2.0.0.tar.gz", "has_sig": false, "md5_digest": "400a64ebb7bf9ff8b1a8c1da615649d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9896, "upload_time": "2019-11-27T06:50:24", "upload_time_iso_8601": "2019-11-27T06:50:24.343129Z", "url": "https://files.pythonhosted.org/packages/2b/e6/e0601bf5bc85b935978be0e1b66b23e1bedc47e1bf91a9225ec4e90bb5aa/perfcounters-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "68296a8ce9a282b45b3ef82ed7a1f5b8", "sha256": "8a95d4b972cabf59c11a113abae56ce081688bc5d18c22f2a7e07bc502db9c4d"}, "downloads": -1, "filename": "perfcounters-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "68296a8ce9a282b45b3ef82ed7a1f5b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15738, "upload_time": "2020-03-28T20:29:46", "upload_time_iso_8601": "2020-03-28T20:29:46.803907Z", "url": "https://files.pythonhosted.org/packages/ac/fe/79d35842bcd0cbd13be44cba44e9e9fd7b8ab18e594949d79b8e141d2fd0/perfcounters-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "befc85a800607389512fb08e13b077a2", "sha256": "c81462da7f1fc1aa8ea3e501fe78c8ce0655737d0f2b42a66a77acc12561ac21"}, "downloads": -1, "filename": "perfcounters-2.1.0.tar.gz", "has_sig": false, "md5_digest": "befc85a800607389512fb08e13b077a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10007, "upload_time": "2020-03-28T20:29:49", "upload_time_iso_8601": "2020-03-28T20:29:49.538788Z", "url": "https://files.pythonhosted.org/packages/29/97/63130af476d39b0e3bf518f247d46b5325c172f447e86d551baba51497d4/perfcounters-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "68296a8ce9a282b45b3ef82ed7a1f5b8", "sha256": "8a95d4b972cabf59c11a113abae56ce081688bc5d18c22f2a7e07bc502db9c4d"}, "downloads": -1, "filename": "perfcounters-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "68296a8ce9a282b45b3ef82ed7a1f5b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15738, "upload_time": "2020-03-28T20:29:46", "upload_time_iso_8601": "2020-03-28T20:29:46.803907Z", "url": "https://files.pythonhosted.org/packages/ac/fe/79d35842bcd0cbd13be44cba44e9e9fd7b8ab18e594949d79b8e141d2fd0/perfcounters-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "befc85a800607389512fb08e13b077a2", "sha256": "c81462da7f1fc1aa8ea3e501fe78c8ce0655737d0f2b42a66a77acc12561ac21"}, "downloads": -1, "filename": "perfcounters-2.1.0.tar.gz", "has_sig": false, "md5_digest": "befc85a800607389512fb08e13b077a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10007, "upload_time": "2020-03-28T20:29:49", "upload_time_iso_8601": "2020-03-28T20:29:49.538788Z", "url": "https://files.pythonhosted.org/packages/29/97/63130af476d39b0e3bf518f247d46b5325c172f447e86d551baba51497d4/perfcounters-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:20 2020"}