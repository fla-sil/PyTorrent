{"info": {"author": "Carlo Pires", "author_email": "carlopires@gmail", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "tnetstring:  data serialization using typed netstrings\n======================================================\n\nThis is a data serialization library. It's a lot like JSON but it uses a\nnew syntax called \"typed netstrings\" that Zed has proposed for use in the\nMongrel2 webserver.  It's designed to be simpler and easier to implement\nthan JSON, with a happy consequence of also being faster in many cases.\n\nAn ordinary netstring is a blob of data prefixed with its length and postfixed\nwith a sanity-checking comma.  The string \"hello world\" encodes like this::\n\n    11:hello world,\n\nTyped netstrings add other datatypes by replacing the comma with a type tag.\nHere's the integer 12345 encoded as a tnetstring::\n\n    5:12345#\n\nAnd here's the list [12345,True,0] which mixes integers and bools::\n\n    19:5:12345#4:true!1:0#]\n\nSimple enough?  This module gives you the following functions:\n\n    :dump:    dump an object as a tnetstring to a file\n    :dumps:   dump an object as a tnetstring to a string\n    :load:    load a tnetstring-encoded object from a file\n    :loads:   load a tnetstring-encoded object from a string\n    :pop:     pop a tnetstring-encoded object from the front of a string\n\nNote that since parsing a tnetstring requires reading all the data into memory\nat once, there's no efficiency gain from using the file-based versions of these\nfunctions.  They're only here so you can use load() to read precisely one\nitem from a file or socket without consuming any extra data.\n\nThe tnetstrings specification explicitly states that strings are binary blobs\nand forbids the use of unicode at the protocol level.  As a convenience to\npython programmers, this library lets you specify an application-level encoding\nto translate python's unicode strings to and from binary blobs:\n\n    >>> print repr(tnetstring.loads(\"2:\\xce\\xb1,\"))\n    '\\xce\\xb1'\n    >>> \n    >>> print repr(tnetstring.loads(\"2:\\xce\\xb1,\", \"utf8\"))\n    u'\\u03b1'\n\n:Copyright: (c) 2012-2013 by Ryan Kelly <ryan@rfk.id.au>.\n:Copyright: (c) 2014 by Carlo Pires <carlopires@gmail.com>.\n:License: MIT, see LICENCE for more details.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/carlopires/tnetstring3", "keywords": "netstring serialization", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "tnetstring3", "package_url": "https://pypi.org/project/tnetstring3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tnetstring3/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/carlopires/tnetstring3"}, "release_url": "https://pypi.org/project/tnetstring3/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Super fast data serialization for Python 3", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a data serialization library. It\u2019s a lot like JSON but it uses a\nnew syntax called \u201ctyped netstrings\u201d that Zed has proposed for use in the\nMongrel2 webserver.  It\u2019s designed to be simpler and easier to implement\nthan JSON, with a happy consequence of also being faster in many cases.</p>\n<p>An ordinary netstring is a blob of data prefixed with its length and postfixed\nwith a sanity-checking comma.  The string \u201chello world\u201d encodes like this:</p>\n<pre>11:hello world,\n</pre>\n<p>Typed netstrings add other datatypes by replacing the comma with a type tag.\nHere\u2019s the integer 12345 encoded as a tnetstring:</p>\n<pre>5:12345#\n</pre>\n<p>And here\u2019s the list [12345,True,0] which mixes integers and bools:</p>\n<pre>19:5:12345#4:true!1:0#]\n</pre>\n<p>Simple enough?  This module gives you the following functions:</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>dump:</th><td>dump an object as a tnetstring to a file</td>\n</tr>\n<tr><th>dumps:</th><td>dump an object as a tnetstring to a string</td>\n</tr>\n<tr><th>load:</th><td>load a tnetstring-encoded object from a file</td>\n</tr>\n<tr><th>loads:</th><td>load a tnetstring-encoded object from a string</td>\n</tr>\n<tr><th>pop:</th><td>pop a tnetstring-encoded object from the front of a string</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>Note that since parsing a tnetstring requires reading all the data into memory\nat once, there\u2019s no efficiency gain from using the file-based versions of these\nfunctions.  They\u2019re only here so you can use load() to read precisely one\nitem from a file or socket without consuming any extra data.</p>\n<p>The tnetstrings specification explicitly states that strings are binary blobs\nand forbids the use of unicode at the protocol level.  As a convenience to\npython programmers, this library lets you specify an application-level encoding\nto translate python\u2019s unicode strings to and from binary blobs:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print repr(tnetstring.loads(\"2:\\xce\\xb1,\"))\n'\\xce\\xb1'\n&gt;&gt;&gt;\n&gt;&gt;&gt; print repr(tnetstring.loads(\"2:\\xce\\xb1,\", \"utf8\"))\nu'\\u03b1'\n</pre>\n</blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Copyright:</th><td><ol>\n<li>2012-2013 by Ryan Kelly &lt;<a href=\"mailto:ryan%40rfk.id.au\">ryan<span>@</span>rfk<span>.</span>id<span>.</span>au</a>&gt;.</li>\n</ol>\n</td>\n</tr>\n<tr><th>Copyright:</th><td><ol>\n<li>2014 by Carlo Pires &lt;<a href=\"mailto:carlopires%40gmail.com\">carlopires<span>@</span>gmail<span>.</span>com</a>&gt;.</li>\n</ol>\n</td>\n</tr>\n<tr><th>License:</th><td><p>MIT, see LICENCE for more details.</p>\n</td>\n</tr>\n</tbody>\n</table>\n\n          </div>"}, "last_serial": 1163726, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "9498bdff7640d1822c561dfa48d103a0", "sha256": "0074dee000ca264259981b988ccc89a0f46751767f8499869ee12fa85806336e"}, "downloads": -1, "filename": "tnetstring3-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9498bdff7640d1822c561dfa48d103a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14981, "upload_time": "2014-07-20T23:45:21", "upload_time_iso_8601": "2014-07-20T23:45:21.148262Z", "url": "https://files.pythonhosted.org/packages/1b/d1/a204d462d7a1274a307e6122cb7b0be279c4c5ba1aec92c7c3e39edc5e1f/tnetstring3-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f7245198912180d65493f99b54a85ec6", "sha256": "5acab57cce3693d119265a8ac019a9bcdc52a9cacb3ba37b5b3a1746a1c14d56"}, "downloads": -1, "filename": "tnetstring3-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f7245198912180d65493f99b54a85ec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15003, "upload_time": "2014-07-20T23:51:34", "upload_time_iso_8601": "2014-07-20T23:51:34.566755Z", "url": "https://files.pythonhosted.org/packages/d9/fd/737a371f539842f6fcece47bb6b941700c9f924e8543cd35c4f3a2e7cc6c/tnetstring3-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f7245198912180d65493f99b54a85ec6", "sha256": "5acab57cce3693d119265a8ac019a9bcdc52a9cacb3ba37b5b3a1746a1c14d56"}, "downloads": -1, "filename": "tnetstring3-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f7245198912180d65493f99b54a85ec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15003, "upload_time": "2014-07-20T23:51:34", "upload_time_iso_8601": "2014-07-20T23:51:34.566755Z", "url": "https://files.pythonhosted.org/packages/d9/fd/737a371f539842f6fcece47bb6b941700c9f924e8543cd35c4f3a2e7cc6c/tnetstring3-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:04 2020"}