{"info": {"author": "Mikhail Antonov", "author_email": "atin65536@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "Django Permanent\n================\n\nYet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.\n\n.. image:: https://api.travis-ci.org/MnogoByte/django-permanent.svg?branch=master\n\nModels\n================\n\nTo create a non-deletable model just inherit it from ``PermanentModel``:\n\n.. code-block:: python\n\n    class MyModel(PermanentModel):\n        pass\n\nIt automatically changes delete behaviour to hide objects instead of deleting them:\n\n.. code-block:: python\n\n    >>> a = MyModel.objects.create(pk=1)\n    >>> b = MyModel.objects.create(pk=2)\n    >>> MyModel.objects.count()\n    2\n    >>> a.delete()\n    >>> MyModel.objects.count()\n    1\n\nTo recover a deleted object just call its ``restore`` method:\n\n.. code-block:: python\n\n    >>> a.restore()\n    >>> MyModel.objects.count()\n    2\n\nUse the ``force`` kwarg to enforce physical deletion:\n\n.. code-block:: python\n\n    >>> a.delete(force=True) # Will act as the default django delete\n    >>> MyModel._base_manager.count()\n    0\n\nIf you need to restore a deleted object instead of re-creating the same one use the ``restore_on_create`` attribute:\n\n.. code-block:: python\n\n    class MyModel(PermanentModel):\n        class Permanent:\n          restore_on_create = True\n\nIn this case ``QuerySet`` provides check existence of same attribute objects and restores them if they've been deleted, creating new ones if not.\n\nManagers\n========\n\nIt changes the default model manager to ignore deleted objects, adding a ``deleted_objects`` manager to see them instead:\n\n.. code-block:: python\n\n    >>> MyModel.objects.count()\n    2\n    >>> a.delete()\n    >>> MyModel.objects.count()\n    1\n    >>> MyModel.deleted_objects.count()\n    1\n    >>> MyModel.all_objects.count()\n    2\n    >>> MyModel._base_manager.count()\n    2\n\nQuerySet\n========\n\nThe ``QuerySet.delete`` method will act as the default django delete, with one exception - objects of models subclassing ``PermanentModel`` will be marked as deleted; the rest will be deleted physically:\n\n.. code-block:: python\n\n    >>> MyModel.objects.all().delete()\n\nYou can still force django query set physical deletion:\n\n.. code-block:: python\n\n    >>> MyModel.objects.all().delete(force=True)\n\nUsing custom querysets\n======================\n\n1. Inherit your query set from ``PermanentQuerySet``:\n\n   .. code-block:: python\n\n        class ServerFileQuerySet(PermanentQuerySet)\n            pass\n\n2. Wrap ``PermanentQuerySet`` or ``DeletedQuerySet`` in you model manager declaration:\n\n   .. code-block:: python\n\n        class MyModel(PermanentModel)\n            objects = MultiPassThroughManager(ServerFileQuerySet, NonDeletedQuerySet)\n            deleted_objects = MultiPassThroughManager(ServerFileQuerySet, DeletedQuerySet)\n            all_objects = MultiPassThroughManager(ServerFileQuerySet, PermanentQuerySet)\n\nMethod ``get_restore_or_create``\n================================\n\n1. Check for existence of the object.\n2. Restore it if it was deleted.\n3. Create a new one, if it was never created.\n\nField name\n==========\n\nThe default field named is 'removed', but you can override it with the PERMANENT_FIELD variable in settings.py:\n\n.. code-block:: python\n\n    PERMANENT_FIELD = 'deleted'\n\nRequirements\n============\n\n- Django 1.7+\n- Python 2.7, 3.4+\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MnogoByte/django-permanent", "keywords": "django", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-permanent-model", "package_url": "https://pypi.org/project/django-permanent-model/", "platform": "", "project_url": "https://pypi.org/project/django-permanent-model/", "project_urls": {"Homepage": "https://github.com/MnogoByte/django-permanent"}, "release_url": "https://pypi.org/project/django-permanent-model/1.1.7/", "requires_dist": null, "requires_python": "", "summary": "Yet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.", "version": "1.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-permanent\">\n<h2>Django Permanent</h2>\n<p>Yet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.</p>\n<img alt=\"https://api.travis-ci.org/MnogoByte/django-permanent.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87ce049d78d3bf31616e2cac5cf131ed91b2c63d/68747470733a2f2f6170692e7472617669732d63692e6f72672f4d6e6f676f427974652f646a616e676f2d7065726d616e656e742e7376673f6272616e63683d6d6173746572\">\n</div>\n<div id=\"models\">\n<h2>Models</h2>\n<p>To create a non-deletable model just inherit it from <tt>PermanentModel</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">PermanentModel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>It automatically changes delete behaviour to hide objects instead of deleting them:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span>\n</pre>\n<p>To recover a deleted object just call its <tt>restore</tt> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span>\n</pre>\n<p>Use the <tt>force</tt> kwarg to enforce physical deletion:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># Will act as the default django delete</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">_base_manager</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">0</span>\n</pre>\n<p>If you need to restore a deleted object instead of re-creating the same one use the <tt>restore_on_create</tt> attribute:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">PermanentModel</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Permanent</span><span class=\"p\">:</span>\n      <span class=\"n\">restore_on_create</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>In this case <tt>QuerySet</tt> provides check existence of same attribute objects and restores them if they\u2019ve been deleted, creating new ones if not.</p>\n</div>\n<div id=\"managers\">\n<h2>Managers</h2>\n<p>It changes the default model manager to ignore deleted objects, adding a <tt>deleted_objects</tt> manager to see them instead:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">deleted_objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">all_objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">_base_manager</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span>\n</pre>\n</div>\n<div id=\"queryset\">\n<h2>QuerySet</h2>\n<p>The <tt>QuerySet.delete</tt> method will act as the default django delete, with one exception - objects of models subclassing <tt>PermanentModel</tt> will be marked as deleted; the rest will be deleted physically:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<p>You can still force django query set physical deletion:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-custom-querysets\">\n<h2>Using custom querysets</h2>\n<ol>\n<li><p>Inherit your query set from <tt>PermanentQuerySet</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ServerFileQuerySet</span><span class=\"p\">(</span><span class=\"n\">PermanentQuerySet</span><span class=\"p\">)</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n<li><p>Wrap <tt>PermanentQuerySet</tt> or <tt>DeletedQuerySet</tt> in you model manager declaration:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">PermanentModel</span><span class=\"p\">)</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">MultiPassThroughManager</span><span class=\"p\">(</span><span class=\"n\">ServerFileQuerySet</span><span class=\"p\">,</span> <span class=\"n\">NonDeletedQuerySet</span><span class=\"p\">)</span>\n    <span class=\"n\">deleted_objects</span> <span class=\"o\">=</span> <span class=\"n\">MultiPassThroughManager</span><span class=\"p\">(</span><span class=\"n\">ServerFileQuerySet</span><span class=\"p\">,</span> <span class=\"n\">DeletedQuerySet</span><span class=\"p\">)</span>\n    <span class=\"n\">all_objects</span> <span class=\"o\">=</span> <span class=\"n\">MultiPassThroughManager</span><span class=\"p\">(</span><span class=\"n\">ServerFileQuerySet</span><span class=\"p\">,</span> <span class=\"n\">PermanentQuerySet</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"method-get-restore-or-create\">\n<h2>Method <tt>get_restore_or_create</tt></h2>\n<ol>\n<li>Check for existence of the object.</li>\n<li>Restore it if it was deleted.</li>\n<li>Create a new one, if it was never created.</li>\n</ol>\n</div>\n<div id=\"field-name\">\n<h2>Field name</h2>\n<p>The default field named is \u2018removed\u2019, but you can override it with the PERMANENT_FIELD variable in settings.py:</p>\n<pre><span class=\"n\">PERMANENT_FIELD</span> <span class=\"o\">=</span> <span class=\"s1\">'deleted'</span>\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Django 1.7+</li>\n<li>Python 2.7, 3.4+</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5366824, "releases": {"1.1.7": [{"comment_text": "", "digests": {"md5": "ed47e320556108992e07b73d998a8bbf", "sha256": "b6dac8b0b9185fd276956ff8064906faecc4e61cd01a0b78ef23806bbf57135d"}, "downloads": -1, "filename": "django-permanent-model-1.1.7.tar.gz", "has_sig": false, "md5_digest": "ed47e320556108992e07b73d998a8bbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10249, "upload_time": "2019-06-06T12:10:23", "upload_time_iso_8601": "2019-06-06T12:10:23.241862Z", "url": "https://files.pythonhosted.org/packages/34/5d/b354fb41e176228b0b10b6f60fb8203d0aa0b862839f8f96ff5ce512a842/django-permanent-model-1.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed47e320556108992e07b73d998a8bbf", "sha256": "b6dac8b0b9185fd276956ff8064906faecc4e61cd01a0b78ef23806bbf57135d"}, "downloads": -1, "filename": "django-permanent-model-1.1.7.tar.gz", "has_sig": false, "md5_digest": "ed47e320556108992e07b73d998a8bbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10249, "upload_time": "2019-06-06T12:10:23", "upload_time_iso_8601": "2019-06-06T12:10:23.241862Z", "url": "https://files.pythonhosted.org/packages/34/5d/b354fb41e176228b0b10b6f60fb8203d0aa0b862839f8f96ff5ce512a842/django-permanent-model-1.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:08 2020"}