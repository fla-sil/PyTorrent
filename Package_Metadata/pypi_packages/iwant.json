{"info": {"author": "Nirvik Ghosh", "author_email": "nirvik1993@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Twisted", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Topic :: Communications :: File Sharing", "Topic :: System :: Networking", "Topic :: System :: Operating System"], "description": "iWant\r\n=====\r\n\r\nCLI based decentralized peer to peer file sharing\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nWhat is it?\r\n-----------\r\n\r\nA commandline tool for searching and downloading files in LAN network,\r\nwithout any central server.\r\n\r\nFeatures\r\n--------\r\n\r\n-  **Decentralized** : There is no central server hosting files.\r\n   Therefore, no central point of failure\r\n-  **Easy discovery of files**: As easy as searching for something in\r\n   Google.\r\n-  **File download from multiple peers**: If the seeder fails/leaves the\r\n   group, leecher will continue to download from another seeder in the\r\n   network\r\n-  **Directory download**: Supports downloading directories\r\n-  **Resume download**: Resume download from where you left off.\r\n-  **Consistent data**: Any changes(modification, deletion, addition)\r\n   made to files inside the shared folder will be instantly reflected in\r\n   the network\r\n-  **Cross Platform**: Works in Linux/Windows/Mac. More testing needs to\r\n   be done in Mac\r\n\r\nWhy I built this ?\r\n------------------\r\n\r\n-  I like the idea of typing some filename in the terminal and download\r\n   it if people around me have it.\r\n-  No third party registration.\r\n-  No crazy configuration.\r\n-  Wanted it to be cross platform.\r\n-  Zero downtime.\r\n-  No browser.. just terminal\r\n-  For fun \u00af\\\\\\ *(\u30c4)*/\u00af\r\n\r\nInstallation\r\n------------\r\n\r\n.. code:: sh\r\n\r\n    python setup.py install --user\r\n\r\nSystem Dependencies\r\n-------------------\r\n\r\nMake sure, you have the following system dependencies installed: \\*\r\nlibffi-dev \\* libssl-dev\r\n\r\nUsage\r\n-----\r\n\r\n::\r\n\r\n    iWant.\r\n\r\n    Usage:\r\n        iwanto start\r\n        iwanto search <name>\r\n        iwanto download <hash>\r\n        iwanto share <path>\r\n        iwanto download to <destination>\r\n        iwanto view config\r\n        iwanto --version\r\n\r\n    Options:\r\n        -h --help                                   Show this screen.\r\n        --version                                   Show version.\r\n        start                                       This starts the iwant server in your system\r\n        search <name>                               Discovering files in the network. Example: iwanto search batman\r\n        download <hash>                             Downloads the file from the network\r\n        share <path>                                Change your shared folder\r\n        view config                                 View shared and download folder\r\n        download to <destination>                   Change download folder\r\n\r\n**Note: Shared and Download folder cannot be the same**\r\n\r\nHow to run\r\n----------\r\n\r\nRun ``iwanto start`` (this runs the iwant service).\r\n\r\nRunning client\r\n--------------\r\n\r\nTo run services like, search, download, view config and change config,\r\nopen up another terminal and make sure that iwant server is running.\r\n\r\nRunning server\r\n--------------\r\n\r\nIn windows, admin access is required to run the server\r\n\r\n.. code:: sh\r\n\r\n    iwanto start\r\n\r\n\r\n\r\n\r\n\r\n\r\nSearch files\r\n------------\r\n\r\nType the name of file ;) (P.S No need of accurate names)\r\n\r\n.. code:: sh\r\n\r\n    iwanto search <filename>\r\n\r\nExample:\r\n\r\n.. code:: sh\r\n\r\n    iwanto search \"slicon valey\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nDownload files\r\n--------------\r\n\r\nTo download the file , just enter the hash of the file you get after\r\nsearching.\r\n\r\n.. code:: sh\r\n\r\n    iwanto download <hash of the file>\r\n\r\nExample:\r\n\r\n.. code:: sh\r\n\r\n    iwanto download b8f67e90097c7501cc0a9f1bb59e6443\r\n\r\n\r\n\r\n\r\n\r\n\r\nChange shared folder\r\n--------------------\r\n\r\nChange shared folder anytime (Even when iwant service is running)\r\n\r\n.. code:: sh\r\n\r\n    iwanto share <path>\r\n\r\nExample:\r\n\r\n.. code:: sh\r\n\r\n    iwanto share /home/User/Movies/\r\n\r\nIn windows, give quotes:\r\n\r\n.. code:: sh\r\n\r\n    iwanto share \"C:\\Users\\xyz\\books\\\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nChange downloads folder\r\n-----------------------\r\n\r\nChange download folder anytime\r\n\r\n.. code:: sh\r\n\r\n    iwanto download to <path>\r\n\r\nExample:\r\n\r\n.. code:: sh\r\n\r\n    iwanto download to /home/User/Downloads\r\n\r\nIn windows, give quotes:\r\n\r\n.. code:: sh\r\n\r\n    iwanto download to \"C:\\User\\Downloads\"\r\n\r\nView shared/donwload folder\r\n---------------------------\r\n\r\n.. code:: sh\r\n\r\n    iwanto view config\r\n\r\nHow does it work ?\r\n------------------\r\n\r\nAs soon as the program starts, it spawns the **election daemon**,\r\n**folder monitoring daemon** and **server daemon**.\r\n\r\n1. The **election daemon** takes care of the following activities\r\n\r\n   -  Manages the consensus.\r\n   -  Notifies the **server daemon** as soon as there is a leader\r\n      change.\r\n   -  It coordinates with other peers in the network regarding\r\n      contesting elections, leader unavailability, network failure,\r\n      split brain situation etc.\r\n   -  It uses **multicast** for peer discovery. \r\n      \r\n      \r\n\r\n2. When the **folder monitoring daemon** starts, it performs the\r\n   following steps\r\n\r\n   -  Indexes all the files in the shared folder\r\n   -  Updates the entries in the database\r\n   -  Informs the server about the indexed files and folders.\r\n   -  Any changes made in the shared folder will trigger the **folder\r\n      monitoring daemon** to index the modified files, update the\r\n      database and then inform the server about the changes\r\n\r\n3. The **iwant client** talks to the **server daemon** when the user\r\n   wishes to:\r\n\r\n   -  search for files\r\n   -  download files\r\n   -  change shared folder\r\n   -  change download folder\r\n\r\n4. The **server daemon** receives commands from **iwant client** and\r\n   updates from **file monitoring and election daemon**.\r\n\r\n   -  Updates received from **folder monitoring daemon** is fowarded to\r\n      the leader. For example: indexed files/folders information.\r\n   -  Updates received from the **election daemon** like\r\n      ``leader change`` event, triggers the server to forward the\r\n      indexed files/folders information to the new leader\r\n   -  Queries received from the **iwant client** like ``file search`` is\r\n      forwarded to the leader, who then performs fuzzy search on the\r\n      metadata it received from other peers and returns a list\r\n      containing (filename, size, checksum)\r\n   -  Queries received from the **iwant client** like ``file download``\r\n      is forwarded to the leader, who forwards the roothash of the\r\n      file/folder along with the list of peers who have the file. The\r\n      **server daemon** then intiates download process with peers\r\n      mentioned in the peers list.\r\n   -  Updates received from the **iwant client** like\r\n      ``changing shared folder``, triggers the **server daemon** to make\r\n      sure that the **folder monitoring daemon** indexes the new folder\r\n      and after indexing is complete, the **server daemon** updates the\r\n      leader with the new indexed files/folders meta information.\r\n\r\nTodo\r\n----\r\n\r\n-  Create test modules\r\n-  Make download faster\r\n-  Incorporate tight security mechanisms\r\n-  Improve UI for file/folder download progress bar\r\n-  Add streaming functionality\r\n\r\nWhy it may not work?\r\n--------------------\r\n\r\n-  Firewall\r\n-  Multicast not supported in your router.\r\n\r\nErrors\r\n------\r\n\r\nAll logs are present in ``~/.iwant/.iwant.log`` or\r\n``AppData\\Roaming\\.iwant\\.iwant.log``\r\n\r\nLiked the project ?\r\n-------------------\r\n\r\n| |Say Thanks!|\r\n| Any ideas, bugs or modifications required, feel free to me send me a\r\n  PR :)\r\n\r\n.. |Say Thanks!| image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\r\n   :target: https://saythanks.io/to/nirvik", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nirvik/iWant", "keywords": "decentralization, file sharing, peer to peer, p2p, downloading, resume download, directory download", "license": "MIT", "maintainer": "Nirvik Ghosh", "maintainer_email": "nirvik1993@gmail.com", "name": "iwant", "package_url": "https://pypi.org/project/iwant/", "platform": "Cross platform", "project_url": "https://pypi.org/project/iwant/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nirvik/iWant"}, "release_url": "https://pypi.org/project/iwant/1.0.14/", "requires_dist": null, "requires_python": null, "summary": "CLI based decentralized peer to peer file sharing", "version": "1.0.14", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p>A commandline tool for searching and downloading files in LAN network,\nwithout any central server.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li><strong>Decentralized</strong> : There is no central server hosting files.\nTherefore, no central point of failure</li>\n<li><strong>Easy discovery of files</strong>: As easy as searching for something in\nGoogle.</li>\n<li><strong>File download from multiple peers</strong>: If the seeder fails/leaves the\ngroup, leecher will continue to download from another seeder in the\nnetwork</li>\n<li><strong>Directory download</strong>: Supports downloading directories</li>\n<li><strong>Resume download</strong>: Resume download from where you left off.</li>\n<li><strong>Consistent data</strong>: Any changes(modification, deletion, addition)\nmade to files inside the shared folder will be instantly reflected in\nthe network</li>\n<li><strong>Cross Platform</strong>: Works in Linux/Windows/Mac. More testing needs to\nbe done in Mac</li>\n</ul>\n</div>\n<div id=\"why-i-built-this\">\n<h2>Why I built this ?</h2>\n<ul>\n<li>I like the idea of typing some filename in the terminal and download\nit if people around me have it.</li>\n<li>No third party registration.</li>\n<li>No crazy configuration.</li>\n<li>Wanted it to be cross platform.</li>\n<li>Zero downtime.</li>\n<li>No browser.. just terminal</li>\n<li>For fun \u00af\\<em>(\u30c4)</em>/\u00af</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>python setup.py install --user\n</pre>\n</div>\n<div id=\"system-dependencies\">\n<h2>System Dependencies</h2>\n<p>Make sure, you have the following system dependencies installed: *\nlibffi-dev * libssl-dev</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>iWant.\n\nUsage:\n    iwanto start\n    iwanto search &lt;name&gt;\n    iwanto download &lt;hash&gt;\n    iwanto share &lt;path&gt;\n    iwanto download to &lt;destination&gt;\n    iwanto view config\n    iwanto --version\n\nOptions:\n    -h --help                                   Show this screen.\n    --version                                   Show version.\n    start                                       This starts the iwant server in your system\n    search &lt;name&gt;                               Discovering files in the network. Example: iwanto search batman\n    download &lt;hash&gt;                             Downloads the file from the network\n    share &lt;path&gt;                                Change your shared folder\n    view config                                 View shared and download folder\n    download to &lt;destination&gt;                   Change download folder\n</pre>\n<p><strong>Note: Shared and Download folder cannot be the same</strong></p>\n</div>\n<div id=\"how-to-run\">\n<h2>How to run</h2>\n<p>Run <tt>iwanto start</tt> (this runs the iwant service).</p>\n</div>\n<div id=\"running-client\">\n<h2>Running client</h2>\n<p>To run services like, search, download, view config and change config,\nopen up another terminal and make sure that iwant server is running.</p>\n</div>\n<div id=\"running-server\">\n<h2>Running server</h2>\n<p>In windows, admin access is required to run the server</p>\n<pre>iwanto start\n</pre>\n</div>\n<div id=\"search-files\">\n<h2>Search files</h2>\n<p>Type the name of file ;) (P.S No need of accurate names)</p>\n<pre>iwanto search &lt;filename&gt;\n</pre>\n<p>Example:</p>\n<pre>iwanto search <span class=\"s2\">\"slicon valey\"</span>\n</pre>\n</div>\n<div id=\"download-files\">\n<h2>Download files</h2>\n<p>To download the file , just enter the hash of the file you get after\nsearching.</p>\n<pre>iwanto download &lt;<span class=\"nb\">hash</span> of the file&gt;\n</pre>\n<p>Example:</p>\n<pre>iwanto download b8f67e90097c7501cc0a9f1bb59e6443\n</pre>\n</div>\n<div id=\"change-shared-folder\">\n<h2>Change shared folder</h2>\n<p>Change shared folder anytime (Even when iwant service is running)</p>\n<pre>iwanto share &lt;path&gt;\n</pre>\n<p>Example:</p>\n<pre>iwanto share /home/User/Movies/\n</pre>\n<p>In windows, give quotes:</p>\n<pre>iwanto share <span class=\"s2\">\"C:\\Users\\xyz\\books\\\"</span>\n</pre>\n</div>\n<div id=\"change-downloads-folder\">\n<h2>Change downloads folder</h2>\n<p>Change download folder anytime</p>\n<pre>iwanto download to &lt;path&gt;\n</pre>\n<p>Example:</p>\n<pre>iwanto download to /home/User/Downloads\n</pre>\n<p>In windows, give quotes:</p>\n<pre>iwanto download to <span class=\"s2\">\"C:\\User\\Downloads\"</span>\n</pre>\n</div>\n<div id=\"view-shared-donwload-folder\">\n<h2>View shared/donwload folder</h2>\n<pre>iwanto view config\n</pre>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work ?</h2>\n<p>As soon as the program starts, it spawns the <strong>election daemon</strong>,\n<strong>folder monitoring daemon</strong> and <strong>server daemon</strong>.</p>\n<ol>\n<li>The <strong>election daemon</strong> takes care of the following activities<ul>\n<li>Manages the consensus.</li>\n<li>Notifies the <strong>server daemon</strong> as soon as there is a leader\nchange.</li>\n<li>It coordinates with other peers in the network regarding\ncontesting elections, leader unavailability, network failure,\nsplit brain situation etc.</li>\n<li>It uses <strong>multicast</strong> for peer discovery.</li>\n</ul>\n</li>\n<li>When the <strong>folder monitoring daemon</strong> starts, it performs the\nfollowing steps<ul>\n<li>Indexes all the files in the shared folder</li>\n<li>Updates the entries in the database</li>\n<li>Informs the server about the indexed files and folders.</li>\n<li>Any changes made in the shared folder will trigger the <strong>folder\nmonitoring daemon</strong> to index the modified files, update the\ndatabase and then inform the server about the changes</li>\n</ul>\n</li>\n<li>The <strong>iwant client</strong> talks to the <strong>server daemon</strong> when the user\nwishes to:<ul>\n<li>search for files</li>\n<li>download files</li>\n<li>change shared folder</li>\n<li>change download folder</li>\n</ul>\n</li>\n<li>The <strong>server daemon</strong> receives commands from <strong>iwant client</strong> and\nupdates from <strong>file monitoring and election daemon</strong>.<ul>\n<li>Updates received from <strong>folder monitoring daemon</strong> is fowarded to\nthe leader. For example: indexed files/folders information.</li>\n<li>Updates received from the <strong>election daemon</strong> like\n<tt>leader change</tt> event, triggers the server to forward the\nindexed files/folders information to the new leader</li>\n<li>Queries received from the <strong>iwant client</strong> like <tt>file search</tt> is\nforwarded to the leader, who then performs fuzzy search on the\nmetadata it received from other peers and returns a list\ncontaining (filename, size, checksum)</li>\n<li>Queries received from the <strong>iwant client</strong> like <tt>file download</tt>\nis forwarded to the leader, who forwards the roothash of the\nfile/folder along with the list of peers who have the file. The\n<strong>server daemon</strong> then intiates download process with peers\nmentioned in the peers list.</li>\n<li>Updates received from the <strong>iwant client</strong> like\n<tt>changing shared folder</tt>, triggers the <strong>server daemon</strong> to make\nsure that the <strong>folder monitoring daemon</strong> indexes the new folder\nand after indexing is complete, the <strong>server daemon</strong> updates the\nleader with the new indexed files/folders meta information.</li>\n</ul>\n</li>\n</ol>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>Create test modules</li>\n<li>Make download faster</li>\n<li>Incorporate tight security mechanisms</li>\n<li>Improve UI for file/folder download progress bar</li>\n<li>Add streaming functionality</li>\n</ul>\n</div>\n<div id=\"why-it-may-not-work\">\n<h2>Why it may not work?</h2>\n<ul>\n<li>Firewall</li>\n<li>Multicast not supported in your router.</li>\n</ul>\n</div>\n<div id=\"errors\">\n<h2>Errors</h2>\n<p>All logs are present in <tt><span class=\"pre\">~/.iwant/.iwant.log</span></tt> or\n<tt><span class=\"pre\">AppData\\Roaming\\.iwant\\.iwant.log</span></tt></p>\n</div>\n<div id=\"liked-the-project\">\n<h2>Liked the project ?</h2>\n<div>\n<div><a href=\"https://saythanks.io/to/nirvik\" rel=\"nofollow\"><img alt=\"Say Thanks!\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51b7f145f134a99621f186ddcdb0af646a24c8aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b732d212d3145414544422e737667\"></a></div>\n<div>Any ideas, bugs or modifications required, feel free to me send me a\nPR :)</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2982759, "releases": {"1.0.14": [{"comment_text": "", "digests": {"md5": "6dcb4219cc5976c7c62b4bb058d7490a", "sha256": "c969ab2000177322b2b85fc3018ef7b5f4383ad3904f320a53a1aa4f3c058617"}, "downloads": -1, "filename": "iwant-1.0.14.tar.gz", "has_sig": false, "md5_digest": "6dcb4219cc5976c7c62b4bb058d7490a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36255, "upload_time": "2017-06-27T18:23:28", "upload_time_iso_8601": "2017-06-27T18:23:28.792974Z", "url": "https://files.pythonhosted.org/packages/0d/82/a8a6efa0a11dd5a2e0b7f427f59253af9f1c00dad61f86e2c93f9ae2aec8/iwant-1.0.14.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6dcb4219cc5976c7c62b4bb058d7490a", "sha256": "c969ab2000177322b2b85fc3018ef7b5f4383ad3904f320a53a1aa4f3c058617"}, "downloads": -1, "filename": "iwant-1.0.14.tar.gz", "has_sig": false, "md5_digest": "6dcb4219cc5976c7c62b4bb058d7490a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36255, "upload_time": "2017-06-27T18:23:28", "upload_time_iso_8601": "2017-06-27T18:23:28.792974Z", "url": "https://files.pythonhosted.org/packages/0d/82/a8a6efa0a11dd5a2e0b7f427f59253af9f1c00dad61f86e2c93f9ae2aec8/iwant-1.0.14.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:32 2020"}