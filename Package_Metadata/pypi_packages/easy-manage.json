{"info": {"author": "Borkowski Szymus, Rejowski Tomus, Wanczyk Wojtek", "author_email": "borkowskiszymon28@gmail.com, tomekgsd@gmail.com, wojtekwanczyk@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# easy-manage :fish:\n\nThis python package has been created to facilitate remote server management. \nIt is focused on out-of-band management through IPMI and Redefish standards, however, \nit is possible to perform in-band management with it.\n\nThe reason of creation of such package is need to unify server management regardless of\nstandard or protocol we use below. Easy-manage delivers unified management interface. \n\n\nEasy-manage is able to connet either Network Interface Card assigned to BMC or whole system.\nYou can give multiple IP addresses to ControllerFactory and it will try to connect to all of them.\nExample config:\n\n```\nfrom easy_manage.tools import Protocol\nfrom easy_manage import Credentials\n\nbmc_credentials = Credentials('username', 'password')\nsystem_credentials = Credentials('username2', 'password2')\n\nconfig = {\n    Protocol.REDFISH: {\n        'address': bmc_ip_address,\n        'credentials': bmc_credentials\n    },\n    Protocol.IPMI: {\n        'address': bmc_ip_address,\n        'credentials': bmc_credentials\n    },\n    Protocol.BASH: {\n        'address': system_ip_address,\n        'credentials': system_credentials\n    },\n}\n```\n\nAbove configuration will enable user to connect to device with all three accessible protocols. \nTo create abstract controller over theses interfaces, we need to use ControllerFactory\n\n```\ncontroller = ControllerFactory.get_controller(config)\n```\n\nNow it is ready to use.\n\n```\n# See all available system methods\nprint(ControllerFactory.get_methods(controller.system))\n\n# See all available chassis methods\nprint(ControllerFactory.get_methods(controller.chassis))\n\n# Test simple abstract methods\nprint(controller.chassis.get_power_state())\nprint(controller.system.get_led_state())\ncontroller.system.power_on()\n```\n\nConnector depending on its configuration is able to aggregate up to three components:\n - System\n - Chassis\n - Shell\n\nYou can get bulk data from every component using pre-defined methods `redings()`, `static_data()` and `raw_data()` on controller components.\n\n```\nfrom pprint import pprint\n\npprint(controller.shell.readings())\npprint(controller.system.static_data())\npprint(controller.chassis.raw_data())\n```\n\nWhat is important, you can invoke methods through any connected component interface by referencing it explicitly. Above calls could be transformed to:\n\n```\nfrom pprint import pprint\n\npprint(controller.components['shell']['bash'].readings())\npprint(controller.components['system']['redfish'].static_data())\npprint(controller.components['chassis']['redfish'].raw_data())\n\n# PowerShell is not supported yet\n#pprint(controller.components['shell']['power_shell'].readings())\npprint(controller.components['system']['ipmi'].static_data())\npprint(controller.components['system']['ipmi'].static_data())\n```\n\n\nSee more examples in demo/demo.py\n\nPackage has been designed to provide command line tool but it has not been binded with implemented functionalities yet.\n\nPlease note that this package came into existence as a part of bachelor's thesis and has not \nbeen commercially used and thus may be buggy.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wojtekwanczyk/easy_manage", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "easy-manage", "package_url": "https://pypi.org/project/easy-manage/", "platform": "", "project_url": "https://pypi.org/project/easy-manage/", "project_urls": {"Homepage": "https://github.com/wojtekwanczyk/easy_manage"}, "release_url": "https://pypi.org/project/easy-manage/0.0.1/", "requires_dist": ["redfish (>=2.1.0)", "cryptography (>=2.7)", "python-ipmi", "paramiko (>=2.6.0)", "inflection (>=0.3.1)"], "requires_python": "", "summary": "Managing server infrastructure easily", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>easy-manage :fish:</h1>\n<p>This python package has been created to facilitate remote server management.\nIt is focused on out-of-band management through IPMI and Redefish standards, however,\nit is possible to perform in-band management with it.</p>\n<p>The reason of creation of such package is need to unify server management regardless of\nstandard or protocol we use below. Easy-manage delivers unified management interface.</p>\n<p>Easy-manage is able to connet either Network Interface Card assigned to BMC or whole system.\nYou can give multiple IP addresses to ControllerFactory and it will try to connect to all of them.\nExample config:</p>\n<pre><code>from easy_manage.tools import Protocol\nfrom easy_manage import Credentials\n\nbmc_credentials = Credentials('username', 'password')\nsystem_credentials = Credentials('username2', 'password2')\n\nconfig = {\n    Protocol.REDFISH: {\n        'address': bmc_ip_address,\n        'credentials': bmc_credentials\n    },\n    Protocol.IPMI: {\n        'address': bmc_ip_address,\n        'credentials': bmc_credentials\n    },\n    Protocol.BASH: {\n        'address': system_ip_address,\n        'credentials': system_credentials\n    },\n}\n</code></pre>\n<p>Above configuration will enable user to connect to device with all three accessible protocols.\nTo create abstract controller over theses interfaces, we need to use ControllerFactory</p>\n<pre><code>controller = ControllerFactory.get_controller(config)\n</code></pre>\n<p>Now it is ready to use.</p>\n<pre><code># See all available system methods\nprint(ControllerFactory.get_methods(controller.system))\n\n# See all available chassis methods\nprint(ControllerFactory.get_methods(controller.chassis))\n\n# Test simple abstract methods\nprint(controller.chassis.get_power_state())\nprint(controller.system.get_led_state())\ncontroller.system.power_on()\n</code></pre>\n<p>Connector depending on its configuration is able to aggregate up to three components:</p>\n<ul>\n<li>System</li>\n<li>Chassis</li>\n<li>Shell</li>\n</ul>\n<p>You can get bulk data from every component using pre-defined methods <code>redings()</code>, <code>static_data()</code> and <code>raw_data()</code> on controller components.</p>\n<pre><code>from pprint import pprint\n\npprint(controller.shell.readings())\npprint(controller.system.static_data())\npprint(controller.chassis.raw_data())\n</code></pre>\n<p>What is important, you can invoke methods through any connected component interface by referencing it explicitly. Above calls could be transformed to:</p>\n<pre><code>from pprint import pprint\n\npprint(controller.components['shell']['bash'].readings())\npprint(controller.components['system']['redfish'].static_data())\npprint(controller.components['chassis']['redfish'].raw_data())\n\n# PowerShell is not supported yet\n#pprint(controller.components['shell']['power_shell'].readings())\npprint(controller.components['system']['ipmi'].static_data())\npprint(controller.components['system']['ipmi'].static_data())\n</code></pre>\n<p>See more examples in demo/demo.py</p>\n<p>Package has been designed to provide command line tool but it has not been binded with implemented functionalities yet.</p>\n<p>Please note that this package came into existence as a part of bachelor's thesis and has not\nbeen commercially used and thus may be buggy.</p>\n\n          </div>"}, "last_serial": 6394655, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0e3bcd25336005f3b5ad75674b52782b", "sha256": "814ce405cf108a564ba638a7d89b44a551b8e7304eef22fbea267ba00daae852"}, "downloads": -1, "filename": "easy_manage-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e3bcd25336005f3b5ad75674b52782b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 77004, "upload_time": "2020-01-04T12:19:04", "upload_time_iso_8601": "2020-01-04T12:19:04.752226Z", "url": "https://files.pythonhosted.org/packages/06/ed/688645c41d898c140c4b7463abe1a11914727a2a6489cc66efd9c9045aee/easy_manage-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bef9ba91717b575a6061e34fbc39773", "sha256": "e8e01c2f04bbff5ab23ba53c4916e0a42f23f07c90d5e7e179e45a4a2a1bdccd"}, "downloads": -1, "filename": "easy_manage-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0bef9ba91717b575a6061e34fbc39773", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40982, "upload_time": "2020-01-04T12:19:08", "upload_time_iso_8601": "2020-01-04T12:19:08.195024Z", "url": "https://files.pythonhosted.org/packages/fc/2c/2d1690d596e7919b7a4da76cc1afcf6f2350e32164efc38b944b6047d070/easy_manage-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e3bcd25336005f3b5ad75674b52782b", "sha256": "814ce405cf108a564ba638a7d89b44a551b8e7304eef22fbea267ba00daae852"}, "downloads": -1, "filename": "easy_manage-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e3bcd25336005f3b5ad75674b52782b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 77004, "upload_time": "2020-01-04T12:19:04", "upload_time_iso_8601": "2020-01-04T12:19:04.752226Z", "url": "https://files.pythonhosted.org/packages/06/ed/688645c41d898c140c4b7463abe1a11914727a2a6489cc66efd9c9045aee/easy_manage-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bef9ba91717b575a6061e34fbc39773", "sha256": "e8e01c2f04bbff5ab23ba53c4916e0a42f23f07c90d5e7e179e45a4a2a1bdccd"}, "downloads": -1, "filename": "easy_manage-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0bef9ba91717b575a6061e34fbc39773", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40982, "upload_time": "2020-01-04T12:19:08", "upload_time_iso_8601": "2020-01-04T12:19:08.195024Z", "url": "https://files.pythonhosted.org/packages/fc/2c/2d1690d596e7919b7a4da76cc1afcf6f2350e32164efc38b944b6047d070/easy_manage-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:20 2020"}