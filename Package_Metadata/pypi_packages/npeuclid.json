{"info": {"author": "Dov Grobgeld", "author_email": "dov.grobgeld@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Description\n\nnpeuclid is a library that provides vector and matrix classes for 2D and 3D \ngraphics applications.\n\nnpeuclid is a port of the https://github.com/ezag/pyeuclid library to numpy.\nInstead of doing matrix multiplications in native python as euclid is doing,\nnpeuclid is delegating all calculations to numpy. \n\n# Differences to pyeuclid\n\n- The base type of all pyeuclid types are numpy ndarrays.\n- 2D and 3D geometry is supported. Currenly there is no quaternion support.\n- All operaters return their transformed values, i.e. there are no inline operators. E.g. `t.scale(sx,sy)` will return a scaled version of `t`, and won't modify t. \n- There is no vector point and vector support like in euclid. There is only one type `Vec2`, which behaves like a point under transformation. To get a vector transformation do `t.linear()*p` (like in Eigen).\n\n# Types\n\nHere are the types defined by npeuclid:\n\n## 2D \n\n- `Vec2` - Holds a 2D vector (or point).\n- `Vec2Array` - Holds a list of points. All operations that can be done on a signal should be available on a Vec2Array as well. In particular, an `Affine2` operation may be applied on a `Vec2Array` which will transform all the points. \n- `Affine2` - An 2D affine transformation.\n\n## 3D\n\n- `Vec3` - Holds a 3D vector (or point).\n- `Vec3Array` - Holds a list of points. All operations that can be done on a signal should be available on a Vec3Array as well. In particular, an `Affine3` operation may be applied on a `Vec3Array` which will transform all the points. \n- `Affine3` - An 3D affine transformation.\n\n# Usage\n\n## 2D\n\n    p = Vec2(2,3)\n    q = Vec2(5,6)\n    angle = math.radians(33)\n    t = Affine2.new_translate(p.x,p.y).rotate(angle).translate(-p.x,-p.y)\n    print(t*q)\n    t = Affine2.new_rotate_around(angle, p.x, p.y)\n    print(t*q)\n    t = Affine2.rotate_around(angle, p.x, p.y)\n    print(t*q)\n    t = Affine2.new_translate(p.x,p.y)\n    print(t*p, t.linear()*p) \n\n    # Use of Vec2Array is using numpy and is *much* faster than looping.\n    pp = Vec2Array([[5,6],[7,8],[3,4]])\n    print (t*pp)[0]\n\n## 3D\n\n    p = Vec2(2,3,4)\n    q = Vec2(5,6,7)\n    angle = math.radians(33)\n    t = Affine2.new_translate(p.x,p.y).rotatex(angle).translate(-p.x,-p.y)\n    print(t*q)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/dov/npeuclid/archive/v0.1.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dov/npeuclid", "keywords": "math,geometry", "license": "lgpl-2.1", "maintainer": "", "maintainer_email": "", "name": "npeuclid", "package_url": "https://pypi.org/project/npeuclid/", "platform": "", "project_url": "https://pypi.org/project/npeuclid/", "project_urls": {"Download": "https://github.com/dov/npeuclid/archive/v0.1.2.tar.gz", "Homepage": "http://github.com/dov/npeuclid"}, "release_url": "https://pypi.org/project/npeuclid/0.1.2/", "requires_dist": ["numpy"], "requires_python": "", "summary": "Fast 2D and 3D vector geometry module", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Description</h1>\n<p>npeuclid is a library that provides vector and matrix classes for 2D and 3D\ngraphics applications.</p>\n<p>npeuclid is a port of the <a href=\"https://github.com/ezag/pyeuclid\" rel=\"nofollow\">https://github.com/ezag/pyeuclid</a> library to numpy.\nInstead of doing matrix multiplications in native python as euclid is doing,\nnpeuclid is delegating all calculations to numpy.</p>\n<h1>Differences to pyeuclid</h1>\n<ul>\n<li>The base type of all pyeuclid types are numpy ndarrays.</li>\n<li>2D and 3D geometry is supported. Currenly there is no quaternion support.</li>\n<li>All operaters return their transformed values, i.e. there are no inline operators. E.g. <code>t.scale(sx,sy)</code> will return a scaled version of <code>t</code>, and won't modify t.</li>\n<li>There is no vector point and vector support like in euclid. There is only one type <code>Vec2</code>, which behaves like a point under transformation. To get a vector transformation do <code>t.linear()*p</code> (like in Eigen).</li>\n</ul>\n<h1>Types</h1>\n<p>Here are the types defined by npeuclid:</p>\n<h2>2D</h2>\n<ul>\n<li><code>Vec2</code> - Holds a 2D vector (or point).</li>\n<li><code>Vec2Array</code> - Holds a list of points. All operations that can be done on a signal should be available on a Vec2Array as well. In particular, an <code>Affine2</code> operation may be applied on a <code>Vec2Array</code> which will transform all the points.</li>\n<li><code>Affine2</code> - An 2D affine transformation.</li>\n</ul>\n<h2>3D</h2>\n<ul>\n<li><code>Vec3</code> - Holds a 3D vector (or point).</li>\n<li><code>Vec3Array</code> - Holds a list of points. All operations that can be done on a signal should be available on a Vec3Array as well. In particular, an <code>Affine3</code> operation may be applied on a <code>Vec3Array</code> which will transform all the points.</li>\n<li><code>Affine3</code> - An 3D affine transformation.</li>\n</ul>\n<h1>Usage</h1>\n<h2>2D</h2>\n<pre><code>p = Vec2(2,3)\nq = Vec2(5,6)\nangle = math.radians(33)\nt = Affine2.new_translate(p.x,p.y).rotate(angle).translate(-p.x,-p.y)\nprint(t*q)\nt = Affine2.new_rotate_around(angle, p.x, p.y)\nprint(t*q)\nt = Affine2.rotate_around(angle, p.x, p.y)\nprint(t*q)\nt = Affine2.new_translate(p.x,p.y)\nprint(t*p, t.linear()*p) \n\n# Use of Vec2Array is using numpy and is *much* faster than looping.\npp = Vec2Array([[5,6],[7,8],[3,4]])\nprint (t*pp)[0]\n</code></pre>\n<h2>3D</h2>\n<pre><code>p = Vec2(2,3,4)\nq = Vec2(5,6,7)\nangle = math.radians(33)\nt = Affine2.new_translate(p.x,p.y).rotatex(angle).translate(-p.x,-p.y)\nprint(t*q)\n</code></pre>\n\n          </div>"}, "last_serial": 7144023, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d4727b01d8bd69caa05bb22947ebb342", "sha256": "4332f51622b991686ed438b5c82f220cc6e44168a54751255204691ae86f0f15"}, "downloads": -1, "filename": "npeuclid-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d4727b01d8bd69caa05bb22947ebb342", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22402, "upload_time": "2020-05-01T09:59:04", "upload_time_iso_8601": "2020-05-01T09:59:04.690210Z", "url": "https://files.pythonhosted.org/packages/2b/c3/69427b5c1949acbede554b7c009c185d0d2bf16a32758ec1623c94cf7815/npeuclid-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35e85d81d01c2a63b319c3e0b39a9174", "sha256": "da2b9c91c7408b1f8704e07c64efa314b7defa1888025f7c91942a2fa43bcfc7"}, "downloads": -1, "filename": "npeuclid-0.1.tar.gz", "has_sig": false, "md5_digest": "35e85d81d01c2a63b319c3e0b39a9174", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6543, "upload_time": "2020-05-01T09:59:06", "upload_time_iso_8601": "2020-05-01T09:59:06.496154Z", "url": "https://files.pythonhosted.org/packages/b6/3a/610f5cf15b88ceee725677e803d6627d078000d1ad318ffae7e87f7fd687/npeuclid-0.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b03ac6ac70b133a9fa01f0dbece7469b", "sha256": "290ca2e9f40a8448075ffab6f3abfdc2e41ba61a4dffbcfeab22b738945046e7"}, "downloads": -1, "filename": "npeuclid-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b03ac6ac70b133a9fa01f0dbece7469b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23261, "upload_time": "2020-05-01T10:17:07", "upload_time_iso_8601": "2020-05-01T10:17:07.582967Z", "url": "https://files.pythonhosted.org/packages/e4/6c/9fdf4ded7dec605d5d53d36cd0c8177087a98b588c2aa3a89a87baf66c3c/npeuclid-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc49e71dfca90a5883f6993897280dff", "sha256": "3075335aa3615cf87b6492de2a17a7d85440064127af2996a242d43d478d42bb"}, "downloads": -1, "filename": "npeuclid-0.1.2.tar.gz", "has_sig": false, "md5_digest": "fc49e71dfca90a5883f6993897280dff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6862, "upload_time": "2020-05-01T10:17:09", "upload_time_iso_8601": "2020-05-01T10:17:09.052624Z", "url": "https://files.pythonhosted.org/packages/96/ef/b587e115c2ad7dd121b9f82bcff450fdb61de2b30eca6367f2e3d7c06c7b/npeuclid-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b03ac6ac70b133a9fa01f0dbece7469b", "sha256": "290ca2e9f40a8448075ffab6f3abfdc2e41ba61a4dffbcfeab22b738945046e7"}, "downloads": -1, "filename": "npeuclid-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b03ac6ac70b133a9fa01f0dbece7469b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23261, "upload_time": "2020-05-01T10:17:07", "upload_time_iso_8601": "2020-05-01T10:17:07.582967Z", "url": "https://files.pythonhosted.org/packages/e4/6c/9fdf4ded7dec605d5d53d36cd0c8177087a98b588c2aa3a89a87baf66c3c/npeuclid-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc49e71dfca90a5883f6993897280dff", "sha256": "3075335aa3615cf87b6492de2a17a7d85440064127af2996a242d43d478d42bb"}, "downloads": -1, "filename": "npeuclid-0.1.2.tar.gz", "has_sig": false, "md5_digest": "fc49e71dfca90a5883f6993897280dff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6862, "upload_time": "2020-05-01T10:17:09", "upload_time_iso_8601": "2020-05-01T10:17:09.052624Z", "url": "https://files.pythonhosted.org/packages/96/ef/b587e115c2ad7dd121b9f82bcff450fdb61de2b30eca6367f2e3d7c06c7b/npeuclid-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:32 2020"}