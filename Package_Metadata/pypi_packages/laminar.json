{"info": {"author": "Dane Gellerup", "author_email": "danegellerup@uwalumni.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "[![CircleCI](https://img.shields.io/circleci/build/github/dgellerup/laminar?logo=circleci&token=8ecea183c3e45f955afdad617348f592d4fc4346)](https://circleci.com/gh/dgellerup/laminar/tree/master)\n[![Coverage Status](https://coveralls.io/repos/github/dgellerup/laminar/badge.svg?branch=master)](https://coveralls.io/github/dgellerup/laminar?branch=master)\n![PyPI](https://img.shields.io/pypi/v/laminar)\n![PyPI - Python Version](https://img.shields.io/badge/python-3.6%20|%203.7%20|%203.8-blue)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/laminar)\n\n*Special thanks to Jim Fan for relinquishing the name \"laminar\" to me on pypi.org. Much appreciated, Jim!*\n\n# laminar  \n__Laminar seeks to take most of the hassle out of parallel processing in Python by providing user-friendly parallelization functionality.__  \n\n__Module Functions__  \nresults = laminar.iter_flow(my_function, my_iterable)  \nresults = laminar.list_flow(my_function, my_list_of_data)\n\n__Class Usage__  \nmy_lam = laminar.Laminar()  \nmy_lam.add_process(\"process_1\", function_1, my_data)  \nmy_lam.add_process(\"process_2\", function_2, my_other_data)  \nmy_lam.launch_processes()  \nresults = my_lam.get_results()  \n\n## Usage\n### Installation\nLaminar is delivered as a package. To install, activate your preferred environment, then use:  \n\n`pip install laminar`  \n\nLaminar's `laminar` module only requires one third-party library, which is `numpy`. laminar_examples, a module with some practice functions and data objects, also requires `pandas`. Both libraries will be automatically included in the laminar installation.\n\n### Importing\nYou can use laminar by placing `from laminar import laminar` or `import laminar.laminar as <some_alias>` at the top of your python file. In order to practice/test laminar with built-in functions and data, place `from laminar import laminar_examples` or `import laminar.laminar_examples as <some_alias>` at the top of your python file.  \n\nIf only using the class `Laminar` you can import it directly with `from laminar.laminar import Laminar`.\n\n### Using laminar\nlaminar currently consists of a class `Laminar` as well as two module functions that are designed to work with different data configurations, `laminar.iter_flow` and `laminar.list_flow`.\n\nThe Laminar class provides an instance that manages distinct processes and stores results. Class methods are available that allow the user to view, drop, clear, and launch processes.  \n\nTo use the Laminar class, create a Laminar instance:  \n\n`my_lam = Laminar()`  \n\nLaminar class declarations have one optional argument for number of cores, which defaults to the number of cores on the current machine. Thus, if the user only wants to utilize two cores, the declaration would be:  \n\n`my_lam = Laminar(2)`  \n\nTo add a process to the object's process batch, simply use the add_process() class method, which is very similar to the module function calls listed below, except add_process() also requires the user to pass a string as the name of the process. This name can be any string.  \n\n`my_lam.add_process('process_1', function_1, my_data)`  \n\nIf more processes are added than the number of cores available, the process batch acts like a first in/first out queue. The most recent process will be added and the first process added to the batch will be removed.\n\nBoth of the module functions accept \\*args and \\*\\*kwargs, which should be passed after `data`, so if `function` takes arg1 and arg2, like:\n\n`function(arg1, arg2)`  \n\nyou should call `laminar` like so:  \n\n`laminar.iter_flow(function, data, arg1, arg2)`  \nor  \n`laminar.iter_flow(function, data, arg1=arg1, arg2=arg2)`  \nor in the case of \\*args with \\*\\*kwargs  \n`laminar.iter_flow(function, data, arg1, arg2, kwarg=other_arg)`\n\n`laminar.iter_flow` is designed to work with a single iterable, such as a pandas DataFrame, a python list, etc. When you pass an iterable to `laminar.iter_flow`, it will automatically break your data up into chunks based on how many cores your machine has. It then queues up each chunk to be given to a core, which performs the work, then passes the data back as a descriptive dictionary of results. For example, a list of 1,000,000 integers is broken into chunks of length 250,000 on a machine with four cores. Each chunk is summed (as an example) by a core, and the results from each core are returned in a dict of size N = # cores. You are then able to combine the results in whatever way fits the computation that you need. For example, if the function passed to `laminar.iter_flow` computes the sum, then the values in the results dict should be summed to produce a total for the entire iterable.\n\n### Laminar Class Definition  \n| Attribute | Description |\n| :----: | :----: |\n| `cores` | Number of cores available in an instance. This can be set manually in the instance declaration; it defaults to `cpu_count()`, which is number of cores available on your machine. |\n| `results` | Dictionary that holds the results from the `launch_processes` method. Initializes to an empty dict. |\n| `_processes` | `collections.OrderedDict()` that holds processes added by `add_process()`. |\n| `_queue` | `multiprocessing.Queue()` that manages parallel processes. |  \n\n| Method | Argument(s) | Returns | Description |\n|:----:|:----:|:----:| :----: |\n| `add_process()` | `name: str`, `function: Callable`, `dataset: Collection`, `*args`, `**kwargs`) | `None` | Add a named process to an instance's process pool. Process must include a name, function, and some data (in reality, this can be anything). |\n| `show_processes()` | `None` | `None` | Displays processes currently in instance process pool. |\n| `drop_process()` | `name: str` | `None` | Removes process with name of `name` from instance process pool. |\n| `clear_processes()` | `None` | `None` | Removes all processes from instance process pool. |\n| `launch_processes()` | `None` | `str: \"Processes finished.\"` | Run all instance processes in parallel. |\n| `get_results()` | `None` | `self.results: dict` | Returns the instance results dictionary. |\n| `clear_results()` | `None` | `None` | Removes all results from instance results dictionary. |\n\n### Module Function Examples\nTo illustrate how one would use laminar in their workflow, we'll use some premade functions and data structures located in `laminar_examples`. To shorten the following code examples up, we'll import `laminar_examples` as an alias `le` and use this alias throughout the rest of this readme.  \n\n`from laminar import laminar_examples as le`\n\n#### laminar_examples.single_total\n`le.single_total` is a simple function that accepts a single iterable and returns the sum total of the values in that iterable. `le.single_total([1, 2, 1])` returns `4`.\n\n#### laminar_examples.multi_tally\n`le.multi_tally` is a simple funtion that accepts a Pandas DataFrame and returns the number of rows that sum to greater than 25. `le.multi_tally(pd.DataFrame({'Col1': [12, 12], 'Col2': [12, 14]})` returns `1` because the row at index 1 sums to `12 + 14 = 26`, which meets the function's criteria, but the row at index 0 sums to `12 + 12 = 24`, which does not.\n\n#### laminar_examples.laminar_df\n`le.laminar_df` is a Pandas DataFrame that constitutes 3 columns ['Col1', 'Col2', 'Col3'], each of which contains different integer values.\n\n| Col1 | Col2 | Col3 |\n|:----:|:----:|:----:|\n|1|6|11|\n|2|7|12|\n|3|8|13|\n|4|9|14|\n|5|10|15|\n|2|12|22|\n|4|6|16|\n|...|...|...|\n\n#### Example 1: Single iterable, single_total()\n`laminar.iter_flow(le.single_total, le.laminar_df['Col1'])` returns  \n\n`{`  \n`'data[0-5]': 17,`  \n`'data[12-17]': 60,`  \n`'data[18-23]': 86,`  \n`'data[24-29]': 115,`  \n`'data[30-34]': 105,`  \n`'data[35-39]': 120,`  \n`'data[40-44]': 135,`  \n`'data[6-11]': 37,`  \n`}`\n\nwhich is a dictionary describing the results for each section of your data. Each key/value pair in the returned dict corresponds to a segment of the iterable that was broken out and given to a process, with the key containing which portion of the data the result matches to. To complete your analysis, you can use whichever function coincides with the intended behavior of your analysis. In this case, since we are summing values, we can use `sum()`.\n\nThe end result can look like one of these examples, although it doesn't have to:\n`result = sum(laminar.iter_flow(le.single_total, le.laminar_df['Col1']).values())`\n\nor\n\n`result = laminar.iter_flow(le.single_total, le.laminar_df['Col1'])`\n\n`result = sum(result.values())`\n\nwhere\n\n`result = 675`\n\n\n#### Example 2: Pandas DataFrame, multi_tally()\n`laminar.iter_flow(le.multi_tally, le.laminar_df)` returns  \n\n`{`  \n`'data[0-5]': 3,`  \n`'data[12-17]': 6,`  \n`'data[18-23]': 6,`   \n`'data[24-29]': 6,`   \n`'data[30-34]': 5,`   \n`'data[35-39]': 5,`   \n`'data[40-44]': 5,`   \n`'data[6-11]': 6,`  \n`}`\n\n which is a dict of counts. Each count is the return value for a segment of the data that was broken out and given to a process. To complete your analysis, you can use whichever function coincides with the intended behavior of your analysis. In this case, since we are counting values, it makes sense to use `sum()`.\n\nThe end result can look like one of these examples, although it doesn't have to:  \n`result = sum(laminar.iter_flow(le.multi_tally, le.laminar_df).values())`  \n\nor\n\n`result = laminar.iter_flow(le.multi_tally, le.laminar_df)`\n\n`result = sum(result.values())`\n\nwhere\n\n`result = 42`\n\n\n#### Example 3: List of single iterables, single_total()\n`laminar.list_flow(le.single_total, [le.laminar_df[col] for col in le.laminar_df.columns])` returns  \n`{`  \n`'data_position_0': 675,`  \n`'data_position_1': 1800,`  \n`'data_position_2': 2925,`  \n`}`  \nwhich is a list of the totals for each column in `le.laminar_df`. With this usage, a user can pass a list of iterables to `list_flow`; each iterable will be passed to its own process. This is useful for when a user intends to use the same function on multiple iterables, which can be columns in the same DataFrame, or independent lists.\n`laminar.list_flow(laminar_examples.single_total, [laminar_examples.laminar_df[col] for col in laminar_examples.laminar_df.columns])` returns `[675, 1800, 2925]`, which is a list of the totals for each column. With this usage, a user can pass a list of iterables to `list_flow`; each iterable will be passed to its own process. This is useful for when a user intends to use the same function on multiple iterables, which can be columns in the same DataFrame, or independent lists.\n\n`columns_list = [le.laminar_df[col] for col in le.laminar_df.columns]`\n\n`result = laminar.list_flow(le.single_total, columns_list)`\n\nwhere\n\n`result = {'data_position_0': 675, 'data_position_1': 1800, 'data_position_2': 2925}`\n\n\n#### Example 4: List of Pandas DataFrames, multi_tally()\n`laminar.list_flow(le.multi_tally, [le.laminar_df]*3)` returns  \n`{`  \n`'data_position_0': 42,`  \n`'data_position_1': 42,`  \n`'data_position_2': 42,`  \n`}`.  \nThe result values are the same because we passed a list of 3 identical DataFrames; feel free to test this with different DataFrames of your own making.\n\n`data_frames_list = [le.laminar_df]*3`\n\n`result = laminar.list_flow(le.multi_tally, data_frames_list)`\n\nwhere\n\n`result = {'data_position_0': 42, 'data_position_1': 42, 'data_position_2': 42}`\n\n\n## Benchmarks\nTo date, laminar has been tested against traditional iterative analysis on the following functions:  \n\nString search function: count_snps()  \n\n### Parameters\n\n**Files:**  \n\nsample-1_S1_R1_001.fastq.gz  \nsample-1_S1_R2_001.fastq.gz  \n\n**Total size of files:**  \n\n26M  \n\n**Length of Pandas DataFrame (going forward referred to as pd.DataFrame) object representation of combined files:**  \n\n224706 rows\n\n**Results:**  \n\nTraditional count_snps(pd.DataFrame): 42.6 seconds  \n\nParallelized laminar.iter_flow(count_snps, pd.DataFrame): 17.49 seconds  \n\nPercent speedup: 58.96% faster\n\n\n### Final Notes\nWhich laminar tool a user will use depends on the structure of their data and the function that will be applied to that data. `laminar.list_flow` is not confined to operating on Pandas DataFrames; any list of iterable data objects can be passed to list_flow.\n\nA basic rule of thumb is to use `laminar.iter_flow` for a single data object that one wishes to break into pieces in order to process it faster. `laminar.list_flow` is to be used in a situation where the user has multiple data objects that he or she wishes to be analyzed by the same function in parallel.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/dgellerup/laminar/archive/v1.1.6.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dgellerup/laminar", "keywords": "laminar,parallel,parallelization,parallel processing,processing", "license": "MIT", "maintainer": "Dane Gellerup", "maintainer_email": "danegellerup@uwalumni.com", "name": "laminar", "package_url": "https://pypi.org/project/laminar/", "platform": "", "project_url": "https://pypi.org/project/laminar/", "project_urls": {"Download": "https://github.com/dgellerup/laminar/archive/v1.1.6.tar.gz", "Homepage": "https://github.com/dgellerup/laminar"}, "release_url": "https://pypi.org/project/laminar/1.1.6/", "requires_dist": null, "requires_python": "", "summary": "Simpler parallelization.", "version": "1.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/dgellerup/laminar/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f20b4b5f9c7d05bc0ffd0c1f2d0d70f82b242be5/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f6467656c6c657275702f6c616d696e61723f6c6f676f3d636972636c65636926746f6b656e3d38656365613138336333653435663935356166646164363137333438663539326434666334333436\"></a>\n<a href=\"https://coveralls.io/github/dgellerup/laminar?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ac52bc0349c1ff4ce1803285f327594a19ed1a2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6467656c6c657275702f6c616d696e61722f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f518477b81eb34bce43f2bcb57edde6898374ba/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c616d696e6172\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fbdc39b5b1557575d3fdb5b48e7e40e84984ee9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e36253230253743253230332e37253230253743253230332e382d626c7565\">\n<img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5376b0f981d759bf908b23582aff3b9340506e1f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6c616d696e6172\"></p>\n<p><em>Special thanks to Jim Fan for relinquishing the name \"laminar\" to me on pypi.org. Much appreciated, Jim!</em></p>\n<h1>laminar</h1>\n<p><strong>Laminar seeks to take most of the hassle out of parallel processing in Python by providing user-friendly parallelization functionality.</strong></p>\n<p><strong>Module Functions</strong><br>\nresults = laminar.iter_flow(my_function, my_iterable)<br>\nresults = laminar.list_flow(my_function, my_list_of_data)</p>\n<p><strong>Class Usage</strong><br>\nmy_lam = laminar.Laminar()<br>\nmy_lam.add_process(\"process_1\", function_1, my_data)<br>\nmy_lam.add_process(\"process_2\", function_2, my_other_data)<br>\nmy_lam.launch_processes()<br>\nresults = my_lam.get_results()</p>\n<h2>Usage</h2>\n<h3>Installation</h3>\n<p>Laminar is delivered as a package. To install, activate your preferred environment, then use:</p>\n<p><code>pip install laminar</code></p>\n<p>Laminar's <code>laminar</code> module only requires one third-party library, which is <code>numpy</code>. laminar_examples, a module with some practice functions and data objects, also requires <code>pandas</code>. Both libraries will be automatically included in the laminar installation.</p>\n<h3>Importing</h3>\n<p>You can use laminar by placing <code>from laminar import laminar</code> or <code>import laminar.laminar as &lt;some_alias&gt;</code> at the top of your python file. In order to practice/test laminar with built-in functions and data, place <code>from laminar import laminar_examples</code> or <code>import laminar.laminar_examples as &lt;some_alias&gt;</code> at the top of your python file.</p>\n<p>If only using the class <code>Laminar</code> you can import it directly with <code>from laminar.laminar import Laminar</code>.</p>\n<h3>Using laminar</h3>\n<p>laminar currently consists of a class <code>Laminar</code> as well as two module functions that are designed to work with different data configurations, <code>laminar.iter_flow</code> and <code>laminar.list_flow</code>.</p>\n<p>The Laminar class provides an instance that manages distinct processes and stores results. Class methods are available that allow the user to view, drop, clear, and launch processes.</p>\n<p>To use the Laminar class, create a Laminar instance:</p>\n<p><code>my_lam = Laminar()</code></p>\n<p>Laminar class declarations have one optional argument for number of cores, which defaults to the number of cores on the current machine. Thus, if the user only wants to utilize two cores, the declaration would be:</p>\n<p><code>my_lam = Laminar(2)</code></p>\n<p>To add a process to the object's process batch, simply use the add_process() class method, which is very similar to the module function calls listed below, except add_process() also requires the user to pass a string as the name of the process. This name can be any string.</p>\n<p><code>my_lam.add_process('process_1', function_1, my_data)</code></p>\n<p>If more processes are added than the number of cores available, the process batch acts like a first in/first out queue. The most recent process will be added and the first process added to the batch will be removed.</p>\n<p>Both of the module functions accept *args and **kwargs, which should be passed after <code>data</code>, so if <code>function</code> takes arg1 and arg2, like:</p>\n<p><code>function(arg1, arg2)</code></p>\n<p>you should call <code>laminar</code> like so:</p>\n<p><code>laminar.iter_flow(function, data, arg1, arg2)</code><br>\nor<br>\n<code>laminar.iter_flow(function, data, arg1=arg1, arg2=arg2)</code><br>\nor in the case of *args with **kwargs<br>\n<code>laminar.iter_flow(function, data, arg1, arg2, kwarg=other_arg)</code></p>\n<p><code>laminar.iter_flow</code> is designed to work with a single iterable, such as a pandas DataFrame, a python list, etc. When you pass an iterable to <code>laminar.iter_flow</code>, it will automatically break your data up into chunks based on how many cores your machine has. It then queues up each chunk to be given to a core, which performs the work, then passes the data back as a descriptive dictionary of results. For example, a list of 1,000,000 integers is broken into chunks of length 250,000 on a machine with four cores. Each chunk is summed (as an example) by a core, and the results from each core are returned in a dict of size N = # cores. You are then able to combine the results in whatever way fits the computation that you need. For example, if the function passed to <code>laminar.iter_flow</code> computes the sum, then the values in the results dict should be summed to produce a total for the entire iterable.</p>\n<h3>Laminar Class Definition</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Attribute</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>cores</code></td>\n<td align=\"center\">Number of cores available in an instance. This can be set manually in the instance declaration; it defaults to <code>cpu_count()</code>, which is number of cores available on your machine.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>results</code></td>\n<td align=\"center\">Dictionary that holds the results from the <code>launch_processes</code> method. Initializes to an empty dict.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>_processes</code></td>\n<td align=\"center\"><code>collections.OrderedDict()</code> that holds processes added by <code>add_process()</code>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>_queue</code></td>\n<td align=\"center\"><code>multiprocessing.Queue()</code> that manages parallel processes.</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Method</th>\n<th align=\"center\">Argument(s)</th>\n<th align=\"center\">Returns</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>add_process()</code></td>\n<td align=\"center\"><code>name: str</code>, <code>function: Callable</code>, <code>dataset: Collection</code>, <code>*args</code>, <code>**kwargs</code>)</td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\">Add a named process to an instance's process pool. Process must include a name, function, and some data (in reality, this can be anything).</td>\n</tr>\n<tr>\n<td align=\"center\"><code>show_processes()</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\">Displays processes currently in instance process pool.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>drop_process()</code></td>\n<td align=\"center\"><code>name: str</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\">Removes process with name of <code>name</code> from instance process pool.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>clear_processes()</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\">Removes all processes from instance process pool.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>launch_processes()</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\"><code>str: \"Processes finished.\"</code></td>\n<td align=\"center\">Run all instance processes in parallel.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>get_results()</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\"><code>self.results: dict</code></td>\n<td align=\"center\">Returns the instance results dictionary.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>clear_results()</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\"><code>None</code></td>\n<td align=\"center\">Removes all results from instance results dictionary.</td>\n</tr></tbody></table>\n<h3>Module Function Examples</h3>\n<p>To illustrate how one would use laminar in their workflow, we'll use some premade functions and data structures located in <code>laminar_examples</code>. To shorten the following code examples up, we'll import <code>laminar_examples</code> as an alias <code>le</code> and use this alias throughout the rest of this readme.</p>\n<p><code>from laminar import laminar_examples as le</code></p>\n<h4>laminar_examples.single_total</h4>\n<p><code>le.single_total</code> is a simple function that accepts a single iterable and returns the sum total of the values in that iterable. <code>le.single_total([1, 2, 1])</code> returns <code>4</code>.</p>\n<h4>laminar_examples.multi_tally</h4>\n<p><code>le.multi_tally</code> is a simple funtion that accepts a Pandas DataFrame and returns the number of rows that sum to greater than 25. <code>le.multi_tally(pd.DataFrame({'Col1': [12, 12], 'Col2': [12, 14]})</code> returns <code>1</code> because the row at index 1 sums to <code>12 + 14 = 26</code>, which meets the function's criteria, but the row at index 0 sums to <code>12 + 12 = 24</code>, which does not.</p>\n<h4>laminar_examples.laminar_df</h4>\n<p><code>le.laminar_df</code> is a Pandas DataFrame that constitutes 3 columns ['Col1', 'Col2', 'Col3'], each of which contains different integer values.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Col1</th>\n<th align=\"center\">Col2</th>\n<th align=\"center\">Col3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">6</td>\n<td align=\"center\">11</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">7</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">8</td>\n<td align=\"center\">13</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">9</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">10</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">12</td>\n<td align=\"center\">22</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">...</td>\n<td align=\"center\">...</td>\n<td align=\"center\">...</td>\n</tr></tbody></table>\n<h4>Example 1: Single iterable, single_total()</h4>\n<p><code>laminar.iter_flow(le.single_total, le.laminar_df['Col1'])</code> returns</p>\n<p><code>{</code><br>\n<code>'data[0-5]': 17,</code><br>\n<code>'data[12-17]': 60,</code><br>\n<code>'data[18-23]': 86,</code><br>\n<code>'data[24-29]': 115,</code><br>\n<code>'data[30-34]': 105,</code><br>\n<code>'data[35-39]': 120,</code><br>\n<code>'data[40-44]': 135,</code><br>\n<code>'data[6-11]': 37,</code><br>\n<code>}</code></p>\n<p>which is a dictionary describing the results for each section of your data. Each key/value pair in the returned dict corresponds to a segment of the iterable that was broken out and given to a process, with the key containing which portion of the data the result matches to. To complete your analysis, you can use whichever function coincides with the intended behavior of your analysis. In this case, since we are summing values, we can use <code>sum()</code>.</p>\n<p>The end result can look like one of these examples, although it doesn't have to:\n<code>result = sum(laminar.iter_flow(le.single_total, le.laminar_df['Col1']).values())</code></p>\n<p>or</p>\n<p><code>result = laminar.iter_flow(le.single_total, le.laminar_df['Col1'])</code></p>\n<p><code>result = sum(result.values())</code></p>\n<p>where</p>\n<p><code>result = 675</code></p>\n<h4>Example 2: Pandas DataFrame, multi_tally()</h4>\n<p><code>laminar.iter_flow(le.multi_tally, le.laminar_df)</code> returns</p>\n<p><code>{</code><br>\n<code>'data[0-5]': 3,</code><br>\n<code>'data[12-17]': 6,</code><br>\n<code>'data[18-23]': 6,</code><br>\n<code>'data[24-29]': 6,</code><br>\n<code>'data[30-34]': 5,</code><br>\n<code>'data[35-39]': 5,</code><br>\n<code>'data[40-44]': 5,</code><br>\n<code>'data[6-11]': 6,</code><br>\n<code>}</code></p>\n<p>which is a dict of counts. Each count is the return value for a segment of the data that was broken out and given to a process. To complete your analysis, you can use whichever function coincides with the intended behavior of your analysis. In this case, since we are counting values, it makes sense to use <code>sum()</code>.</p>\n<p>The end result can look like one of these examples, although it doesn't have to:<br>\n<code>result = sum(laminar.iter_flow(le.multi_tally, le.laminar_df).values())</code></p>\n<p>or</p>\n<p><code>result = laminar.iter_flow(le.multi_tally, le.laminar_df)</code></p>\n<p><code>result = sum(result.values())</code></p>\n<p>where</p>\n<p><code>result = 42</code></p>\n<h4>Example 3: List of single iterables, single_total()</h4>\n<p><code>laminar.list_flow(le.single_total, [le.laminar_df[col] for col in le.laminar_df.columns])</code> returns<br>\n<code>{</code><br>\n<code>'data_position_0': 675,</code><br>\n<code>'data_position_1': 1800,</code><br>\n<code>'data_position_2': 2925,</code><br>\n<code>}</code><br>\nwhich is a list of the totals for each column in <code>le.laminar_df</code>. With this usage, a user can pass a list of iterables to <code>list_flow</code>; each iterable will be passed to its own process. This is useful for when a user intends to use the same function on multiple iterables, which can be columns in the same DataFrame, or independent lists.\n<code>laminar.list_flow(laminar_examples.single_total, [laminar_examples.laminar_df[col] for col in laminar_examples.laminar_df.columns])</code> returns <code>[675, 1800, 2925]</code>, which is a list of the totals for each column. With this usage, a user can pass a list of iterables to <code>list_flow</code>; each iterable will be passed to its own process. This is useful for when a user intends to use the same function on multiple iterables, which can be columns in the same DataFrame, or independent lists.</p>\n<p><code>columns_list = [le.laminar_df[col] for col in le.laminar_df.columns]</code></p>\n<p><code>result = laminar.list_flow(le.single_total, columns_list)</code></p>\n<p>where</p>\n<p><code>result = {'data_position_0': 675, 'data_position_1': 1800, 'data_position_2': 2925}</code></p>\n<h4>Example 4: List of Pandas DataFrames, multi_tally()</h4>\n<p><code>laminar.list_flow(le.multi_tally, [le.laminar_df]*3)</code> returns<br>\n<code>{</code><br>\n<code>'data_position_0': 42,</code><br>\n<code>'data_position_1': 42,</code><br>\n<code>'data_position_2': 42,</code><br>\n<code>}</code>.<br>\nThe result values are the same because we passed a list of 3 identical DataFrames; feel free to test this with different DataFrames of your own making.</p>\n<p><code>data_frames_list = [le.laminar_df]*3</code></p>\n<p><code>result = laminar.list_flow(le.multi_tally, data_frames_list)</code></p>\n<p>where</p>\n<p><code>result = {'data_position_0': 42, 'data_position_1': 42, 'data_position_2': 42}</code></p>\n<h2>Benchmarks</h2>\n<p>To date, laminar has been tested against traditional iterative analysis on the following functions:</p>\n<p>String search function: count_snps()</p>\n<h3>Parameters</h3>\n<p><strong>Files:</strong></p>\n<p>sample-1_S1_R1_001.fastq.gz<br>\nsample-1_S1_R2_001.fastq.gz</p>\n<p><strong>Total size of files:</strong></p>\n<p>26M</p>\n<p><strong>Length of Pandas DataFrame (going forward referred to as pd.DataFrame) object representation of combined files:</strong></p>\n<p>224706 rows</p>\n<p><strong>Results:</strong></p>\n<p>Traditional count_snps(pd.DataFrame): 42.6 seconds</p>\n<p>Parallelized laminar.iter_flow(count_snps, pd.DataFrame): 17.49 seconds</p>\n<p>Percent speedup: 58.96% faster</p>\n<h3>Final Notes</h3>\n<p>Which laminar tool a user will use depends on the structure of their data and the function that will be applied to that data. <code>laminar.list_flow</code> is not confined to operating on Pandas DataFrames; any list of iterable data objects can be passed to list_flow.</p>\n<p>A basic rule of thumb is to use <code>laminar.iter_flow</code> for a single data object that one wishes to break into pieces in order to process it faster. <code>laminar.list_flow</code> is to be used in a situation where the user has multiple data objects that he or she wishes to be analyzed by the same function in parallel.</p>\n\n          </div>"}, "last_serial": 6719662, "releases": {"1.1.3": [{"comment_text": "", "digests": {"md5": "2c102691e6d0f7dd6107ca3efef02041", "sha256": "5d410f156fd7a7b079a11ad0568a2a386b25e1b1efebf37eb806efc8e3ecf031"}, "downloads": -1, "filename": "laminar-1.1.3.tar.gz", "has_sig": false, "md5_digest": "2c102691e6d0f7dd6107ca3efef02041", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8905, "upload_time": "2020-01-31T18:40:20", "upload_time_iso_8601": "2020-01-31T18:40:20.903305Z", "url": "https://files.pythonhosted.org/packages/b5/41/3e7e204b37abc558242d41b37a3c67fc87bcaed7ed3e033be6bad8db847e/laminar-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "95cf97a1f305aef0475358fd2ab94357", "sha256": "646a32d24eda5a216a3f7610c7cc7bd58dfad957d92556b79467b987d8e25c83"}, "downloads": -1, "filename": "laminar-1.1.4.tar.gz", "has_sig": false, "md5_digest": "95cf97a1f305aef0475358fd2ab94357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10847, "upload_time": "2020-01-31T18:57:44", "upload_time_iso_8601": "2020-01-31T18:57:44.234852Z", "url": "https://files.pythonhosted.org/packages/74/3c/a1320ac98bd84763c26f9a288cd6cc555775bfcdc8480dea19aedb16aaf6/laminar-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "c8755f3e67752bb01a1b08e734bc243f", "sha256": "58b4b3444e9736963075f4c3db64729b762fdce2ae87a9d8f135ba6bb12c101f"}, "downloads": -1, "filename": "laminar-1.1.5.tar.gz", "has_sig": false, "md5_digest": "c8755f3e67752bb01a1b08e734bc243f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10935, "upload_time": "2020-01-31T22:21:07", "upload_time_iso_8601": "2020-01-31T22:21:07.621782Z", "url": "https://files.pythonhosted.org/packages/ed/ad/68bfc35de635c1be308f6c5acd138b9e605dc298637854f6fbe3d9c4793f/laminar-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "c97a5ca36281e819913baea7ad81d4be", "sha256": "699b429a7a29bace657374c30fa805809eac06dbd0faaf9a72d98a796734215e"}, "downloads": -1, "filename": "laminar-1.1.6.tar.gz", "has_sig": false, "md5_digest": "c97a5ca36281e819913baea7ad81d4be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10982, "upload_time": "2020-02-28T18:44:44", "upload_time_iso_8601": "2020-02-28T18:44:44.890780Z", "url": "https://files.pythonhosted.org/packages/4a/13/52a8f2fcc7a1610587fc47b20e8317301245203b178e69011c0b7a42fb00/laminar-1.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c97a5ca36281e819913baea7ad81d4be", "sha256": "699b429a7a29bace657374c30fa805809eac06dbd0faaf9a72d98a796734215e"}, "downloads": -1, "filename": "laminar-1.1.6.tar.gz", "has_sig": false, "md5_digest": "c97a5ca36281e819913baea7ad81d4be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10982, "upload_time": "2020-02-28T18:44:44", "upload_time_iso_8601": "2020-02-28T18:44:44.890780Z", "url": "https://files.pythonhosted.org/packages/4a/13/52a8f2fcc7a1610587fc47b20e8317301245203b178e69011c0b7a42fb00/laminar-1.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:01 2020"}