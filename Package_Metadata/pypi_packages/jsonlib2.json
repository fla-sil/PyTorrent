{"info": {"author": "Alec Flett", "author_email": "alecf@flett.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ":Author: John Millikin\n:Copyright: This document has been placed in the public domain.\n\nOverview\n========\n\nThis is yet another library for reading/writing json. The goal is to\nbe API compatible with `simplejson\n<http://pypi.python.org/pypi/simplejson>`_, except that it is written\npurely in C and is thus 5x-20x faster for both encoding and decoding,\ndepending on the data.\n\nThis is a fork of the `jsonlib <https://launchpad.net/jsonlib>`_\nproject by the folks over at `Freebase <https://www.freebase.com>`_ who\nhave data coming from a variety of internal sources in different\nencodings and formats, not all of which could simply be represented by\nstrict JSON.\n\nThus, the intent of this fork is to be more lenient in its\nencoding and decoding (as simplejson is) allowing things like\nNaN/-NaN/Infinity, automatic handling of unicode, and more. The first\nrelease of jsonlib2 was version 1.4, which was forked from jsonlib\n1.3.10.\n\n.. contents::\n\nUsage\n=====\n\njsonlib2 has two functions of interest, ``read`` and ``write``. It also\ndefines some exception: ``ReadError``, ``WriteError``, and\n``UnknownSerializerError``.\n\nFor compatibility with the standard library, ``read`` is aliased to\n``loads`` and ``write`` is aliased to ``dumps``. They do not have the\nsame set of advanced parameters, but may be used interchangeably for\nsimple invocations.\n\nDeserialization\n---------------\n\nTo deserialize a JSON expression, call the ``jsonlib2.read`` function with\nan instance of ``str`` or ``unicode``. ::\n\n\t>>> import jsonlib2\n\t>>> jsonlib2.read ('[\"Hello world!\"]')\n\t[u'Hello world!']\n\nFloating-point values\n~~~~~~~~~~~~~~~~~~~~~\n\nBy default, ``jsonlib2`` will parse values such as \"1.1\" into an instance of\n``decimal.Decimal``. To use the built-in value type ``float`` instead, set\nthe ``use_float`` parameter to ``True``. Please note that this may cause a\nloss of precision when parsing some values. ::\n\n\t>>> jsonlib2.read ('[1.5]', use_float = True)\n\t[1.5]\n\t>>> jsonlib2.read ('[1.1]', use_float = True)\n\t[1.1000000000000001]\n\t>>> jsonlib2.read ('[3.14159265358979323846]', use_float = True)\n\t[3.1415926535897931]\n\nSerialization\n-------------\n\nSerialization has more options, but they are set to reasonable defaults.\nThe simplest use is to call ``jsonlib2.write`` with a Python value. ::\n\n\t>>> import jsonlib2\n\t>>> jsonlib2.write (['Hello world!'])\n\t'[\"Hello world!\"]'\n\nPretty-Printing\n~~~~~~~~~~~~~~~\n\nTo \"pretty-print\" the output, pass a value for the ``indent`` parameter. ::\n\n\t>>> print jsonlib2.write (['Hello world!'], indent = '    ')\n\t[\n\t    \"Hello world!\"\n\t]\n\t>>> \n\t\nMapping Key Sorting\n~~~~~~~~~~~~~~~~~~~\n\nBy default, mapping keys are serialized in whatever order they are\nstored by Python. To force a consistent ordering (for example, in doctests)\nuse the ``sort_keys`` parameter. ::\n\n\t>>> jsonlib2.write ({'e': 'Hello', 'm': 'World!'})\n\t'{\"m\":\"World!\",\"e\":\"Hello\"}'\n\t>>> jsonlib2.write ({'e': 'Hello', 'm': 'World!'}, sort_keys = True)\n\t'{\"e\":\"Hello\",\"m\":\"World!\"}'\n\nEncoding and Unicode\n~~~~~~~~~~~~~~~~~~~~\n\nBy default, the output is encoded in UTF-8. If you require a different\nencoding, pass the name of a Python codec as the ``encoding`` parameter. ::\n\n\t>>> jsonlib2.write (['Hello world!'], encoding = 'utf-16-be')\n\t'\\x00[\\x00\"\\x00H\\x00e\\x00l\\x00l\\x00o\\x00 \\x00w\\x00o\\x00r\\x00l\\x00d\\x00!\\x00\"\\x00]'\n\nTo retrieve an unencoded ``unicode`` instance, pass ``None`` for the\nencoding. ::\n\n\t>>> jsonlib2.write (['Hello world!'], encoding = None)\n\tu'[\"Hello world!\"]'\n\nBy default, non-ASCII codepoints are forbidden in the output. To include\nhigher codepoints in the output, set ``ensure_ascii`` to ``False``. ::\n\n\t>>> jsonlib2.write ([u'Hello \\u266a'], encoding = None)\n\tu'[\"Hello \\\\u266a\"]'\n\t>>> jsonlib2.write ([u'Hello \\u266a'], encoding = None, ensure_ascii = False)\n\tu'[\"Hello \\u266a\"]'\n\nMapping Key Coercion\n~~~~~~~~~~~~~~~~~~~~\n\nBecause JSON objects must have string keys, strings will be 'coerced'\nto strings. You can override this with the ``coerce_keys`` parameter,\nwhcih will raise exception when non-string keys are encountered in a\nmapping. ::\n\n\t>>> jsonlib2.write ({True: 1})\n\t'{\"true\":1}'\n\t>>> jsonlib2.write ({True: 1}, coerce_keys = False)\n\tTraceback (most recent call last):\n\tWriteError: Only strings may be used as object keys.\n\nSerializing Other Types\n~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the object implements the iterator or mapping protocol, it will be\nhandled automatically. If the object is intended for use as a basic value,\nit should subclass one of the supported basic values.\n\nString-like objects that do not inherit from ``str``, ``unicode``, or\n``UserString.UserString`` will likely be serialized as a list. This will\nnot be changed. If iterating them returns an instance of the same type, the\nserializer might crash. This (hopefully) will be changed.\n\nTo serialize a type not known to jsonlib2, use the ``default`` parameter\nto ``write``::\n\n\t>>> from datetime import date\n\t>>> def default_handler (value):\n\t...     if isinstance (value, date): return str (value)\n\t...     raise jsonlib2.UnknownSerializerError\n\t>>> jsonlib2.write ([date (2000, 1, 1)], default = default_handler)\n\t'[\"2000-01-01\"]'\n\nStreaming Serializer\n~~~~~~~~~~~~~~~~~~~~\n\nWhen serializing large objects, the use of an in-memory buffer may cause\ntoo much memory to be used. For these situations, use the ``dump`` function\nto write objects to a file-like object::\n\n\t>>> import sys\n\t>>> jsonlib2.dump ([\"Written to stdout\"], sys.stdout)\n\t[\"Written to stdout\"]\n\t>>> \n\nExceptions\n-----------\n\nReadError\n~~~~~~~~~\n\nRaised by ``read`` if an error was encountered parsing the expression. Will\ncontain the line, column, and character position of the error.\n\nNote that this will report the *character*, not the *byte*, of the character\nthat caused the error.\n\nWriteError\n~~~~~~~~~~\n\nRaised by ``write`` or ``dump`` if an error was encountered serializing\nthe passed value.\n\nUnknownSerializerError\n~~~~~~~~~~~~~~~~~~~~~~\n\nA subclass of ``WriteError`` that is raised when a value cannot be\nserialized. See the ``default`` parameter to ``write``.\n\nChange Log\n==========\n\n1.5.1\n-----\n* Fixed problem compiling on Python before version 2.6, as reported by \n  Carlo Barrettara and others\n\n1.5\n---\n* Major API change - add lots of support for simplejson keywords\n* dropped use of Decimal module, and thus the ``use_float`` parameter\n  in ``load``. In ``dump``, use ``default``.\n* in ``load``, added parsing support for Infinity, -Infinity, NaN\n* in ``load``, added support for ``parse_float``, ``parse_int``,\n  ``parse_constant``\n* in ``dump``, ``allow_non_numbers`` became ``allow_nan``\n* in ``dump``, ``allow_nan`` (formerly ``allow_non_numbers``) is now\n  True by default\n* in ``dump``, ``on_unknown`` became ``default``\n* in ``dump``, ``ascii_only`` became ``ensure_ascii``\n* in ``dump``, ``coerce_keys`` is now True by default\n* Removed JSON-strict restriction, allowing both ``load`` and ``dump``\n  to deal with objects that are not lists or dictionaries at the root\n  level.\n\n1.4.2\n-----\n* Memory leak fix\n\n1.4.1\n-----\n* Added ``escape_slash`` parameter to ``write()`` to stop escaping the\n  '/' character\n\n1.4\n---\n* First release as jsonlib2\n\n1.3.10\n------\n* Implemented the ``use_float`` parameter to ``read()``.\n\n1.3.9\n-----\n* Fixed a crash on some platforms when passing a non-string object for\n  indentation.\n\n1.3.8\n-----\n* Fixed memory leak when auto-decoding bytestrings.\n* Fixed potential memory leak when using ``on_unknown`` handlers that\n  return invalid objects.\n\n1.3.7\n-----\n* Fixed error reporting positions of syntax errors that occur immediately\n  after a newline.\n* Add ``loads()`` and ``dumps()`` as aliases to ``read()`` and ``write()``,\n  respectively, for compatibility with the new ``json`` standard library\n  module.\n* Small fixes to the test suite to clear spurious errors caused by\n  differences between the behavior of ``repr()`` on instances of\n  ``decimal.Decimal`` and ``UnicodeDecodeError``.\n\n1.3.6\n-----\n* If an unterminated object or array is encountered, report its start\n  location properly.\n* Improved reporting of unknown escape codes.\n* Raise an exception when parsing a root value that is not an array\n  or object.\n* Allow instances of ``UserString`` to be used as object keys.\n* Implemented the ``dump()`` function.\n\n1.3.5\n-----\n* Bugfix release, corrects serialization of ``dict`` when ``PyDict_Next()``\n  skips indexes.\n\n1.3.4\n-----\n* Fixes an issue with reporting the column of a syntax error when the\n  error is followed by a newline.\n* Removed remaining Python wrapper for ``read``.\n\n1.3.3\n-----\n* Support the ``on_unknown`` parameter to ``write``.\n* Corrected typo in invalid whitespace detection.\n* Added ``__version__`` attribute.\n* Merged all code into ``jsonlib2`` and ``_jsonlib`` modules, instead of\n  a package.\n\n1.3.2\n-----\n* Improved the README.\n* Support for reading text encoded with the ``utf-8-sig`` codec.\n* Use ``codecs`` module for detecting BOMs in input data.\n* Forbid non-whitespace strings from being used for indentation.\n\n1.3.1\n-----\n* Removed the Python implementations of the serializer and deserializer.\n* Detect and raise an exception if invalid surrogate pairs are serialized\n  or deserialized.\n* Detect and raise an exception if reserved codepoints are serialized or\n  deserialized.\n* Added support for operating in a process with multiple Python interpreters.\n* Performance improvements.\n\n1.3.0\n-----\n* Allow ``python setup.py test`` to work.\n* Added ``encoding`` parameter to ``write``, which controls the output\n  encoding. The default encoding is ``utf-8``. If the encoding is ``None``,\n  a ``unicode`` string will be returned.\n* Implemented ``write`` using a C extension module.\n\n1.2.7\n-----\n* Improved error messages when an error is encountered deserializing an\n  expression.\n* Modified to work with Python 2.4.\n\n1.2.6\n-----\n\nThanks to Deron Meranda (author of ``demjson``) for his excellent `JSON\nlibrary comparison <http://deron.meranda.us/python/comparing_json_modules/>`_,\nwhich revealed many areas for improvement:\n\n* Use ``repr`` instead of ``unicode`` for serializing floating-point values,\n  to avoid unnecessary rounding.\n* Fixed bug that prevented plus signs in an exponent from being parsed\n  correctly.\n* Added support for serializing the following types:\n\n  - ``generator``\n  - ``set``\n  - ``frozenset``\n  - ``complex``, for values with no imaginary component.\n  - ``array.array``\n  - ``collections.deque``\n  - ``collections.defaultdict``\n  - ``UserList.UserList``\n  - ``UserDict.UserDict``\n  - ``UserString.UserString``\n\n* Raise an exception if a control character is encountered in a string.\n* Added support for detecting Unicode byte order marks in the auto decoder.\n* Allow only arrays and objects to be serialized directly. All other types\n  must be contained within an array or object.\n* Stricter detection of whitespace.\n\nAlso includes some other miscellaneous fixes:\n\n* More reliable detection of ``Infinity`` and ``NaN`` on Windows.\n* Support for decoding UTF-32 on UCS2 builds of Python.\n* Faster detection of self-recursive containers.\n\n1.2.5\n-----\n* Return Unicode strings from ``write``, so the user can control the final\n  encoding.\n* Prevent ``Infinity``, ``-Infinity``, and ``NaN`` from being serialized\n  because JSON does not support these values.\n* Added ``coerce_keys`` parameter to ``write``. If ``True``, mapping keys\n  will be coerced to strings. Defaults to ``False``.\n* Added ``ascii_only`` parameter to ``write``. If ``True``, non-ASCII\n  codepoints will always be escaped to a \\u sequence. Defaults to ``True``.\n* Real detection of self-recursive container types.\n* Escape the solidus to prevent against `security issues\n  <http://t3.dotgnu.info/blog/insecurity/quotes-dont-help.html>`_.\n\n1.2.4\n-----\n* Fixed bug that prevented characters from being read after reading a\n  Unicode escape sequence.\n* Moved test cases into ``jsonlib2.tests`` subpackage.\n\n1.2.3\n-----\n* Port to setuptools.\n* Corrected false positive in detection of illegal leading zeroes.\n\n1.2.2\n-----\n* Raise an exception if values in an object or array are not separated by\n  commas.\n\n1.2.1\n-----\n* Support for building on Windows.\n\n1.2.0\n-----\n* Added ``sort_keys`` parameter to ``write``. This allows mapping types to\n  be serialized to a predictable value, regardless of key ordering.\n* Added ``indent`` to ``write``. Any string passed as this value will be\n  used for indentation. If the value is not `None`, pretty-printing will\n  be activated.\n\n1.1.0\n-----\n* Support for reading astral Unicode codepoints on UCS2 builds of Python.\n\n1.0.0\n-----\n* Initial release.", "description_content_type": null, "docs_url": null, "download_url": "http://code.google.com/p/jsonlib2/downloads/list", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/jsonlib2/", "keywords": "json", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "jsonlib2", "package_url": "https://pypi.org/project/jsonlib2/", "platform": "Platform Independent", "project_url": "https://pypi.org/project/jsonlib2/", "project_urls": {"Download": "http://code.google.com/p/jsonlib2/downloads/list", "Homepage": "http://code.google.com/p/jsonlib2/"}, "release_url": "https://pypi.org/project/jsonlib2/1.5.2/", "requires_dist": null, "requires_python": null, "summary": "JSON serializer/deserializer for Python", "version": "1.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td>John Millikin</td></tr>\n<tr><th>Copyright:</th>\n<td>This document has been placed in the public domain.</td></tr>\n</tbody>\n</table>\n<div id=\"overview\">\n<h2><a href=\"#id27\" rel=\"nofollow\">Overview</a></h2>\n<p>This is yet another library for reading/writing json. The goal is to\nbe API compatible with <a href=\"http://pypi.python.org/pypi/simplejson\" rel=\"nofollow\">simplejson</a>, except that it is written\npurely in C and is thus 5x-20x faster for both encoding and decoding,\ndepending on the data.</p>\n<p>This is a fork of the <a href=\"https://launchpad.net/jsonlib\" rel=\"nofollow\">jsonlib</a>\nproject by the folks over at <a href=\"https://www.freebase.com\" rel=\"nofollow\">Freebase</a> who\nhave data coming from a variety of internal sources in different\nencodings and formats, not all of which could simply be represented by\nstrict JSON.</p>\n<p>Thus, the intent of this fork is to be more lenient in its\nencoding and decoding (as simplejson is) allowing things like\nNaN/-NaN/Infinity, automatic handling of unicode, and more. The first\nrelease of jsonlib2 was version 1.4, which was forked from jsonlib\n1.3.10.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id27\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#usage\" id=\"id28\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#deserialization\" id=\"id29\" rel=\"nofollow\">Deserialization</a><ul>\n<li><a href=\"#floating-point-values\" id=\"id30\" rel=\"nofollow\">Floating-point values</a></li>\n</ul>\n</li>\n<li><a href=\"#serialization\" id=\"id31\" rel=\"nofollow\">Serialization</a><ul>\n<li><a href=\"#pretty-printing\" id=\"id32\" rel=\"nofollow\">Pretty-Printing</a></li>\n<li><a href=\"#mapping-key-sorting\" id=\"id33\" rel=\"nofollow\">Mapping Key Sorting</a></li>\n<li><a href=\"#encoding-and-unicode\" id=\"id34\" rel=\"nofollow\">Encoding and Unicode</a></li>\n<li><a href=\"#mapping-key-coercion\" id=\"id35\" rel=\"nofollow\">Mapping Key Coercion</a></li>\n<li><a href=\"#serializing-other-types\" id=\"id36\" rel=\"nofollow\">Serializing Other Types</a></li>\n<li><a href=\"#streaming-serializer\" id=\"id37\" rel=\"nofollow\">Streaming Serializer</a></li>\n</ul>\n</li>\n<li><a href=\"#exceptions\" id=\"id38\" rel=\"nofollow\">Exceptions</a><ul>\n<li><a href=\"#readerror\" id=\"id39\" rel=\"nofollow\">ReadError</a></li>\n<li><a href=\"#writeerror\" id=\"id40\" rel=\"nofollow\">WriteError</a></li>\n<li><a href=\"#unknownserializererror\" id=\"id41\" rel=\"nofollow\">UnknownSerializerError</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#change-log\" id=\"id42\" rel=\"nofollow\">Change Log</a><ul>\n<li><a href=\"#id1\" id=\"id43\" rel=\"nofollow\">1.5.1</a></li>\n<li><a href=\"#id2\" id=\"id44\" rel=\"nofollow\">1.5</a></li>\n<li><a href=\"#id3\" id=\"id45\" rel=\"nofollow\">1.4.2</a></li>\n<li><a href=\"#id4\" id=\"id46\" rel=\"nofollow\">1.4.1</a></li>\n<li><a href=\"#id5\" id=\"id47\" rel=\"nofollow\">1.4</a></li>\n<li><a href=\"#id6\" id=\"id48\" rel=\"nofollow\">1.3.10</a></li>\n<li><a href=\"#id7\" id=\"id49\" rel=\"nofollow\">1.3.9</a></li>\n<li><a href=\"#id8\" id=\"id50\" rel=\"nofollow\">1.3.8</a></li>\n<li><a href=\"#id9\" id=\"id51\" rel=\"nofollow\">1.3.7</a></li>\n<li><a href=\"#id10\" id=\"id52\" rel=\"nofollow\">1.3.6</a></li>\n<li><a href=\"#id11\" id=\"id53\" rel=\"nofollow\">1.3.5</a></li>\n<li><a href=\"#id12\" id=\"id54\" rel=\"nofollow\">1.3.4</a></li>\n<li><a href=\"#id13\" id=\"id55\" rel=\"nofollow\">1.3.3</a></li>\n<li><a href=\"#id14\" id=\"id56\" rel=\"nofollow\">1.3.2</a></li>\n<li><a href=\"#id15\" id=\"id57\" rel=\"nofollow\">1.3.1</a></li>\n<li><a href=\"#id16\" id=\"id58\" rel=\"nofollow\">1.3.0</a></li>\n<li><a href=\"#id17\" id=\"id59\" rel=\"nofollow\">1.2.7</a></li>\n<li><a href=\"#id18\" id=\"id60\" rel=\"nofollow\">1.2.6</a></li>\n<li><a href=\"#id19\" id=\"id61\" rel=\"nofollow\">1.2.5</a></li>\n<li><a href=\"#id20\" id=\"id62\" rel=\"nofollow\">1.2.4</a></li>\n<li><a href=\"#id21\" id=\"id63\" rel=\"nofollow\">1.2.3</a></li>\n<li><a href=\"#id22\" id=\"id64\" rel=\"nofollow\">1.2.2</a></li>\n<li><a href=\"#id23\" id=\"id65\" rel=\"nofollow\">1.2.1</a></li>\n<li><a href=\"#id24\" id=\"id66\" rel=\"nofollow\">1.2.0</a></li>\n<li><a href=\"#id25\" id=\"id67\" rel=\"nofollow\">1.1.0</a></li>\n<li><a href=\"#id26\" id=\"id68\" rel=\"nofollow\">1.0.0</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id28\" rel=\"nofollow\">Usage</a></h2>\n<p>jsonlib2 has two functions of interest, <tt>read</tt> and <tt>write</tt>. It also\ndefines some exception: <tt>ReadError</tt>, <tt>WriteError</tt>, and\n<tt>UnknownSerializerError</tt>.</p>\n<p>For compatibility with the standard library, <tt>read</tt> is aliased to\n<tt>loads</tt> and <tt>write</tt> is aliased to <tt>dumps</tt>. They do not have the\nsame set of advanced parameters, but may be used interchangeably for\nsimple invocations.</p>\n<div id=\"deserialization\">\n<h3><a href=\"#id29\" rel=\"nofollow\">Deserialization</a></h3>\n<p>To deserialize a JSON expression, call the <tt>jsonlib2.read</tt> function with\nan instance of <tt>str</tt> or <tt>unicode</tt>.</p>\n<pre>&gt;&gt;&gt; import jsonlib2\n&gt;&gt;&gt; jsonlib2.read ('[\"Hello world!\"]')\n[u'Hello world!']\n</pre>\n<div id=\"floating-point-values\">\n<h4><a href=\"#id30\" rel=\"nofollow\">Floating-point values</a></h4>\n<p>By default, <tt>jsonlib2</tt> will parse values such as \u201c1.1\u201d into an instance of\n<tt>decimal.Decimal</tt>. To use the built-in value type <tt>float</tt> instead, set\nthe <tt>use_float</tt> parameter to <tt>True</tt>. Please note that this may cause a\nloss of precision when parsing some values.</p>\n<pre>&gt;&gt;&gt; jsonlib2.read ('[1.5]', use_float = True)\n[1.5]\n&gt;&gt;&gt; jsonlib2.read ('[1.1]', use_float = True)\n[1.1000000000000001]\n&gt;&gt;&gt; jsonlib2.read ('[3.14159265358979323846]', use_float = True)\n[3.1415926535897931]\n</pre>\n</div>\n</div>\n<div id=\"serialization\">\n<h3><a href=\"#id31\" rel=\"nofollow\">Serialization</a></h3>\n<p>Serialization has more options, but they are set to reasonable defaults.\nThe simplest use is to call <tt>jsonlib2.write</tt> with a Python value.</p>\n<pre>&gt;&gt;&gt; import jsonlib2\n&gt;&gt;&gt; jsonlib2.write (['Hello world!'])\n'[\"Hello world!\"]'\n</pre>\n<div id=\"pretty-printing\">\n<h4><a href=\"#id32\" rel=\"nofollow\">Pretty-Printing</a></h4>\n<p>To \u201cpretty-print\u201d the output, pass a value for the <tt>indent</tt> parameter.</p>\n<pre>&gt;&gt;&gt; print jsonlib2.write (['Hello world!'], indent = '    ')\n[\n    \"Hello world!\"\n]\n&gt;&gt;&gt;\n</pre>\n</div>\n<div id=\"mapping-key-sorting\">\n<h4><a href=\"#id33\" rel=\"nofollow\">Mapping Key Sorting</a></h4>\n<p>By default, mapping keys are serialized in whatever order they are\nstored by Python. To force a consistent ordering (for example, in doctests)\nuse the <tt>sort_keys</tt> parameter.</p>\n<pre>&gt;&gt;&gt; jsonlib2.write ({'e': 'Hello', 'm': 'World!'})\n'{\"m\":\"World!\",\"e\":\"Hello\"}'\n&gt;&gt;&gt; jsonlib2.write ({'e': 'Hello', 'm': 'World!'}, sort_keys = True)\n'{\"e\":\"Hello\",\"m\":\"World!\"}'\n</pre>\n</div>\n<div id=\"encoding-and-unicode\">\n<h4><a href=\"#id34\" rel=\"nofollow\">Encoding and Unicode</a></h4>\n<p>By default, the output is encoded in UTF-8. If you require a different\nencoding, pass the name of a Python codec as the <tt>encoding</tt> parameter.</p>\n<pre>&gt;&gt;&gt; jsonlib2.write (['Hello world!'], encoding = 'utf-16-be')\n'\\x00[\\x00\"\\x00H\\x00e\\x00l\\x00l\\x00o\\x00 \\x00w\\x00o\\x00r\\x00l\\x00d\\x00!\\x00\"\\x00]'\n</pre>\n<p>To retrieve an unencoded <tt>unicode</tt> instance, pass <tt>None</tt> for the\nencoding.</p>\n<pre>&gt;&gt;&gt; jsonlib2.write (['Hello world!'], encoding = None)\nu'[\"Hello world!\"]'\n</pre>\n<p>By default, non-ASCII codepoints are forbidden in the output. To include\nhigher codepoints in the output, set <tt>ensure_ascii</tt> to <tt>False</tt>.</p>\n<pre>&gt;&gt;&gt; jsonlib2.write ([u'Hello \\u266a'], encoding = None)\nu'[\"Hello \\\\u266a\"]'\n&gt;&gt;&gt; jsonlib2.write ([u'Hello \\u266a'], encoding = None, ensure_ascii = False)\nu'[\"Hello \\u266a\"]'\n</pre>\n</div>\n<div id=\"mapping-key-coercion\">\n<h4><a href=\"#id35\" rel=\"nofollow\">Mapping Key Coercion</a></h4>\n<p>Because JSON objects must have string keys, strings will be \u2018coerced\u2019\nto strings. You can override this with the <tt>coerce_keys</tt> parameter,\nwhcih will raise exception when non-string keys are encountered in a\nmapping.</p>\n<pre>&gt;&gt;&gt; jsonlib2.write ({True: 1})\n'{\"true\":1}'\n&gt;&gt;&gt; jsonlib2.write ({True: 1}, coerce_keys = False)\nTraceback (most recent call last):\nWriteError: Only strings may be used as object keys.\n</pre>\n</div>\n<div id=\"serializing-other-types\">\n<h4><a href=\"#id36\" rel=\"nofollow\">Serializing Other Types</a></h4>\n<p>If the object implements the iterator or mapping protocol, it will be\nhandled automatically. If the object is intended for use as a basic value,\nit should subclass one of the supported basic values.</p>\n<p>String-like objects that do not inherit from <tt>str</tt>, <tt>unicode</tt>, or\n<tt>UserString.UserString</tt> will likely be serialized as a list. This will\nnot be changed. If iterating them returns an instance of the same type, the\nserializer might crash. This (hopefully) will be changed.</p>\n<p>To serialize a type not known to jsonlib2, use the <tt>default</tt> parameter\nto <tt>write</tt>:</p>\n<pre>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; def default_handler (value):\n...     if isinstance (value, date): return str (value)\n...     raise jsonlib2.UnknownSerializerError\n&gt;&gt;&gt; jsonlib2.write ([date (2000, 1, 1)], default = default_handler)\n'[\"2000-01-01\"]'\n</pre>\n</div>\n<div id=\"streaming-serializer\">\n<h4><a href=\"#id37\" rel=\"nofollow\">Streaming Serializer</a></h4>\n<p>When serializing large objects, the use of an in-memory buffer may cause\ntoo much memory to be used. For these situations, use the <tt>dump</tt> function\nto write objects to a file-like object:</p>\n<pre>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; jsonlib2.dump ([\"Written to stdout\"], sys.stdout)\n[\"Written to stdout\"]\n&gt;&gt;&gt;\n</pre>\n</div>\n</div>\n<div id=\"exceptions\">\n<h3><a href=\"#id38\" rel=\"nofollow\">Exceptions</a></h3>\n<div id=\"readerror\">\n<h4><a href=\"#id39\" rel=\"nofollow\">ReadError</a></h4>\n<p>Raised by <tt>read</tt> if an error was encountered parsing the expression. Will\ncontain the line, column, and character position of the error.</p>\n<p>Note that this will report the <em>character</em>, not the <em>byte</em>, of the character\nthat caused the error.</p>\n</div>\n<div id=\"writeerror\">\n<h4><a href=\"#id40\" rel=\"nofollow\">WriteError</a></h4>\n<p>Raised by <tt>write</tt> or <tt>dump</tt> if an error was encountered serializing\nthe passed value.</p>\n</div>\n<div id=\"unknownserializererror\">\n<h4><a href=\"#id41\" rel=\"nofollow\">UnknownSerializerError</a></h4>\n<p>A subclass of <tt>WriteError</tt> that is raised when a value cannot be\nserialized. See the <tt>default</tt> parameter to <tt>write</tt>.</p>\n</div>\n</div>\n</div>\n<div id=\"change-log\">\n<h2><a href=\"#id42\" rel=\"nofollow\">Change Log</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id43\" rel=\"nofollow\">1.5.1</a></h3>\n<ul>\n<li>Fixed problem compiling on Python before version 2.6, as reported by\nCarlo Barrettara and others</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id44\" rel=\"nofollow\">1.5</a></h3>\n<ul>\n<li>Major API change - add lots of support for simplejson keywords</li>\n<li>dropped use of Decimal module, and thus the <tt>use_float</tt> parameter\nin <tt>load</tt>. In <tt>dump</tt>, use <tt>default</tt>.</li>\n<li>in <tt>load</tt>, added parsing support for Infinity, -Infinity, NaN</li>\n<li>in <tt>load</tt>, added support for <tt>parse_float</tt>, <tt>parse_int</tt>,\n<tt>parse_constant</tt></li>\n<li>in <tt>dump</tt>, <tt>allow_non_numbers</tt> became <tt>allow_nan</tt></li>\n<li>in <tt>dump</tt>, <tt>allow_nan</tt> (formerly <tt>allow_non_numbers</tt>) is now\nTrue by default</li>\n<li>in <tt>dump</tt>, <tt>on_unknown</tt> became <tt>default</tt></li>\n<li>in <tt>dump</tt>, <tt>ascii_only</tt> became <tt>ensure_ascii</tt></li>\n<li>in <tt>dump</tt>, <tt>coerce_keys</tt> is now True by default</li>\n<li>Removed JSON-strict restriction, allowing both <tt>load</tt> and <tt>dump</tt>\nto deal with objects that are not lists or dictionaries at the root\nlevel.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id45\" rel=\"nofollow\">1.4.2</a></h3>\n<ul>\n<li>Memory leak fix</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id46\" rel=\"nofollow\">1.4.1</a></h3>\n<ul>\n<li>Added <tt>escape_slash</tt> parameter to <tt>write()</tt> to stop escaping the\n\u2018/\u2019 character</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id47\" rel=\"nofollow\">1.4</a></h3>\n<ul>\n<li>First release as jsonlib2</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id48\" rel=\"nofollow\">1.3.10</a></h3>\n<ul>\n<li>Implemented the <tt>use_float</tt> parameter to <tt>read()</tt>.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id49\" rel=\"nofollow\">1.3.9</a></h3>\n<ul>\n<li>Fixed a crash on some platforms when passing a non-string object for\nindentation.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id50\" rel=\"nofollow\">1.3.8</a></h3>\n<ul>\n<li>Fixed memory leak when auto-decoding bytestrings.</li>\n<li>Fixed potential memory leak when using <tt>on_unknown</tt> handlers that\nreturn invalid objects.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id51\" rel=\"nofollow\">1.3.7</a></h3>\n<ul>\n<li>Fixed error reporting positions of syntax errors that occur immediately\nafter a newline.</li>\n<li>Add <tt>loads()</tt> and <tt>dumps()</tt> as aliases to <tt>read()</tt> and <tt>write()</tt>,\nrespectively, for compatibility with the new <tt>json</tt> standard library\nmodule.</li>\n<li>Small fixes to the test suite to clear spurious errors caused by\ndifferences between the behavior of <tt>repr()</tt> on instances of\n<tt>decimal.Decimal</tt> and <tt>UnicodeDecodeError</tt>.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id52\" rel=\"nofollow\">1.3.6</a></h3>\n<ul>\n<li>If an unterminated object or array is encountered, report its start\nlocation properly.</li>\n<li>Improved reporting of unknown escape codes.</li>\n<li>Raise an exception when parsing a root value that is not an array\nor object.</li>\n<li>Allow instances of <tt>UserString</tt> to be used as object keys.</li>\n<li>Implemented the <tt>dump()</tt> function.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id53\" rel=\"nofollow\">1.3.5</a></h3>\n<ul>\n<li>Bugfix release, corrects serialization of <tt>dict</tt> when <tt>PyDict_Next()</tt>\nskips indexes.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id54\" rel=\"nofollow\">1.3.4</a></h3>\n<ul>\n<li>Fixes an issue with reporting the column of a syntax error when the\nerror is followed by a newline.</li>\n<li>Removed remaining Python wrapper for <tt>read</tt>.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id55\" rel=\"nofollow\">1.3.3</a></h3>\n<ul>\n<li>Support the <tt>on_unknown</tt> parameter to <tt>write</tt>.</li>\n<li>Corrected typo in invalid whitespace detection.</li>\n<li>Added <tt>__version__</tt> attribute.</li>\n<li>Merged all code into <tt>jsonlib2</tt> and <tt>_jsonlib</tt> modules, instead of\na package.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id56\" rel=\"nofollow\">1.3.2</a></h3>\n<ul>\n<li>Improved the README.</li>\n<li>Support for reading text encoded with the <tt><span class=\"pre\">utf-8-sig</span></tt> codec.</li>\n<li>Use <tt>codecs</tt> module for detecting BOMs in input data.</li>\n<li>Forbid non-whitespace strings from being used for indentation.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id57\" rel=\"nofollow\">1.3.1</a></h3>\n<ul>\n<li>Removed the Python implementations of the serializer and deserializer.</li>\n<li>Detect and raise an exception if invalid surrogate pairs are serialized\nor deserialized.</li>\n<li>Detect and raise an exception if reserved codepoints are serialized or\ndeserialized.</li>\n<li>Added support for operating in a process with multiple Python interpreters.</li>\n<li>Performance improvements.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3><a href=\"#id58\" rel=\"nofollow\">1.3.0</a></h3>\n<ul>\n<li>Allow <tt>python setup.py test</tt> to work.</li>\n<li>Added <tt>encoding</tt> parameter to <tt>write</tt>, which controls the output\nencoding. The default encoding is <tt><span class=\"pre\">utf-8</span></tt>. If the encoding is <tt>None</tt>,\na <tt>unicode</tt> string will be returned.</li>\n<li>Implemented <tt>write</tt> using a C extension module.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id59\" rel=\"nofollow\">1.2.7</a></h3>\n<ul>\n<li>Improved error messages when an error is encountered deserializing an\nexpression.</li>\n<li>Modified to work with Python 2.4.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3><a href=\"#id60\" rel=\"nofollow\">1.2.6</a></h3>\n<p>Thanks to Deron Meranda (author of <tt>demjson</tt>) for his excellent <a href=\"http://deron.meranda.us/python/comparing_json_modules/\" rel=\"nofollow\">JSON\nlibrary comparison</a>,\nwhich revealed many areas for improvement:</p>\n<ul>\n<li>Use <tt>repr</tt> instead of <tt>unicode</tt> for serializing floating-point values,\nto avoid unnecessary rounding.</li>\n<li>Fixed bug that prevented plus signs in an exponent from being parsed\ncorrectly.</li>\n<li>Added support for serializing the following types:<ul>\n<li><tt>generator</tt></li>\n<li><tt>set</tt></li>\n<li><tt>frozenset</tt></li>\n<li><tt>complex</tt>, for values with no imaginary component.</li>\n<li><tt>array.array</tt></li>\n<li><tt>collections.deque</tt></li>\n<li><tt>collections.defaultdict</tt></li>\n<li><tt>UserList.UserList</tt></li>\n<li><tt>UserDict.UserDict</tt></li>\n<li><tt>UserString.UserString</tt></li>\n</ul>\n</li>\n<li>Raise an exception if a control character is encountered in a string.</li>\n<li>Added support for detecting Unicode byte order marks in the auto decoder.</li>\n<li>Allow only arrays and objects to be serialized directly. All other types\nmust be contained within an array or object.</li>\n<li>Stricter detection of whitespace.</li>\n</ul>\n<p>Also includes some other miscellaneous fixes:</p>\n<ul>\n<li>More reliable detection of <tt>Infinity</tt> and <tt>NaN</tt> on Windows.</li>\n<li>Support for decoding UTF-32 on UCS2 builds of Python.</li>\n<li>Faster detection of self-recursive containers.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3><a href=\"#id61\" rel=\"nofollow\">1.2.5</a></h3>\n<ul>\n<li>Return Unicode strings from <tt>write</tt>, so the user can control the final\nencoding.</li>\n<li>Prevent <tt>Infinity</tt>, <tt><span class=\"pre\">-Infinity</span></tt>, and <tt>NaN</tt> from being serialized\nbecause JSON does not support these values.</li>\n<li>Added <tt>coerce_keys</tt> parameter to <tt>write</tt>. If <tt>True</tt>, mapping keys\nwill be coerced to strings. Defaults to <tt>False</tt>.</li>\n<li>Added <tt>ascii_only</tt> parameter to <tt>write</tt>. If <tt>True</tt>, non-ASCII\ncodepoints will always be escaped to a u sequence. Defaults to <tt>True</tt>.</li>\n<li>Real detection of self-recursive container types.</li>\n<li>Escape the solidus to prevent against <a href=\"http://t3.dotgnu.info/blog/insecurity/quotes-dont-help.html\" rel=\"nofollow\">security issues</a>.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3><a href=\"#id62\" rel=\"nofollow\">1.2.4</a></h3>\n<ul>\n<li>Fixed bug that prevented characters from being read after reading a\nUnicode escape sequence.</li>\n<li>Moved test cases into <tt>jsonlib2.tests</tt> subpackage.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3><a href=\"#id63\" rel=\"nofollow\">1.2.3</a></h3>\n<ul>\n<li>Port to setuptools.</li>\n<li>Corrected false positive in detection of illegal leading zeroes.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3><a href=\"#id64\" rel=\"nofollow\">1.2.2</a></h3>\n<ul>\n<li>Raise an exception if values in an object or array are not separated by\ncommas.</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3><a href=\"#id65\" rel=\"nofollow\">1.2.1</a></h3>\n<ul>\n<li>Support for building on Windows.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3><a href=\"#id66\" rel=\"nofollow\">1.2.0</a></h3>\n<ul>\n<li>Added <tt>sort_keys</tt> parameter to <tt>write</tt>. This allows mapping types to\nbe serialized to a predictable value, regardless of key ordering.</li>\n<li>Added <tt>indent</tt> to <tt>write</tt>. Any string passed as this value will be\nused for indentation. If the value is not <cite>None</cite>, pretty-printing will\nbe activated.</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3><a href=\"#id67\" rel=\"nofollow\">1.1.0</a></h3>\n<ul>\n<li>Support for reading astral Unicode codepoints on UCS2 builds of Python.</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3><a href=\"#id68\" rel=\"nofollow\">1.0.0</a></h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 143436, "releases": {"1.4": [], "1.4.1": [], "1.4.2": [], "1.5": [], "1.5.1": [{"comment_text": "", "digests": {"md5": "490dd65d35cb19a5caa0353599c6cb7e", "sha256": "ca329270ed8c81f92206108aa34249d0a1ed01bd98f0d74515526129defc126c"}, "downloads": -1, "filename": "jsonlib2-1.5.1.tar.gz", "has_sig": false, "md5_digest": "490dd65d35cb19a5caa0353599c6cb7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31333, "upload_time": "2009-06-11T20:08:54", "upload_time_iso_8601": "2009-06-11T20:08:54.543990Z", "url": "https://files.pythonhosted.org/packages/7a/5e/ebb4bdee2d0839c711ffbf00c7fc3fbd3e8af3a83f651ad3816616b72118/jsonlib2-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "f650c6979c04ed128e76edaa9ba50323", "sha256": "d806e241ee971e4747aac3a89cfea2db682f9f9fb1b028d8c3c4c695f0c0cce4"}, "downloads": -1, "filename": "jsonlib2-1.5.2.tar.gz", "has_sig": false, "md5_digest": "f650c6979c04ed128e76edaa9ba50323", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31391, "upload_time": "2009-12-22T19:53:51", "upload_time_iso_8601": "2009-12-22T19:53:51.955779Z", "url": "https://files.pythonhosted.org/packages/0e/1d/745b4e69ca0710215f7291ebbdfcdc95896dec7e196312b29d5a7c606038/jsonlib2-1.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f650c6979c04ed128e76edaa9ba50323", "sha256": "d806e241ee971e4747aac3a89cfea2db682f9f9fb1b028d8c3c4c695f0c0cce4"}, "downloads": -1, "filename": "jsonlib2-1.5.2.tar.gz", "has_sig": false, "md5_digest": "f650c6979c04ed128e76edaa9ba50323", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31391, "upload_time": "2009-12-22T19:53:51", "upload_time_iso_8601": "2009-12-22T19:53:51.955779Z", "url": "https://files.pythonhosted.org/packages/0e/1d/745b4e69ca0710215f7291ebbdfcdc95896dec7e196312b29d5a7c606038/jsonlib2-1.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:47 2020"}