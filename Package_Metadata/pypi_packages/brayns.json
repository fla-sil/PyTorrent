{"info": {"author": "Daniel Nachbaur", "author_email": "bbp-open-source@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Brayns Python Client\n\n> A client for [Brayns](../README.md) based on the [Rockets client](https://github.com/BlueBrain/Rockets/blob/master/python/README.md) to provide remote control of a running Brayns instance.\n\n[![Travis CI](https://img.shields.io/travis/BlueBrain/Brayns/master.svg?style=flat-square)](https://travis-ci.org/BlueBrain/Brayns)\n\n\n# Table of Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n    * [Connection](#connection)\n    * [Properties](#properties)\n    * [Methods](#methods)\n    * [Snapshot](#snapshot)\n    * [Live rendering](#live)\n\n\n### Installation\n----------------\nYou can install this package from [PyPI](https://pypi.org/):\n```bash\npip install brayns\n```\n\n### Usage\n---------\n\n#### `Client` vs. `AsyncClient`\nBrayns provides two types of clients to support asychronous and synchronous usage.\n\nThe `AsyncClient` exposes all of its functionality as `async` functions, hence an `asyncio`\n[event loop](https://docs.python.org/3/library/asyncio-eventloop.html) is needed to complete pending\nexecution via `await` or `run_until_complete()`. The added benefit is to watch progress of pending\ntasks or cancel their execution. This is provided by according widgets if the Brayns client is used\nfrom within a Jupyter notebook.\n\nFor simplicity, a synchronous `Client` is provided which automagically executes in a synchronous,\nblocking fashion.\n\n#### Connection\nCreate a client:\n```py\nfrom brayns import Client\n\nclient = Client('localhost:8200')\nprint(brayns)\n`Brayns version 0.8.0.c52dd4b running on http://localhost:8200/`\n```\n\nCreate an asynchronous client:\n```py\nfrom brayns import AsyncClient\n\nclient = await AsyncClient('localhost:8200')\nprint(brayns)\n`Brayns version 0.8.0.c52dd4b running on http://localhost:8200/`\n```\n\n\n#### Properties\nExposed properties from Brayns are properties on the python side as well:\n```py\nfrom brayns import Client\n\nclient = Client('myhost:8080')\n\nprint(client.camera)\n```\n\nChanges on the properties must be communicated with `commit()` to Brayns:\n```py\nfrom brayns import Client\n\nclient = Client('myhost:8080')\n\nclient.camera.origin = [1,2,3]\nclient.camera.commit()\n```\n\n\n#### Methods\nCalling an RPC on Brayns is as simple as calling a method on the client object:\n```py\nfrom brayns import Client\n\nclient = Client('myhost:8080')\n\nclient.set_camera(current='orthographic')\n```\n\nAbove method does only return something on error. There are also requests:\n```py\nfrom brayns import Client\n\nclient = Client('myhost:8080')\n\nclip_planes = client.get_clip_planes()\n```\n\n\n#### Snapshot\nMake a snapshot and return a PIL image:\n```py\nfrom brayns import Client\n\nclient = Client('myhost:8080')\n\nimg = client.image(format='png', size=(1920, 1080), samples_per_pixel=64)\n```\n\n#### Live rendering\nIf you are using the client in a Jupyter notebook, you can watch the live rendering of Brayns in a widget:\n```py\nfrom brayns import Client\n\nclient = Client('myhost:8080')\n\nclient.show()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BlueBrain/Brayns", "keywords": "brayns,raytracing,bbp,BlueBrain", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "brayns", "package_url": "https://pypi.org/project/brayns/", "platform": "", "project_url": "https://pypi.org/project/brayns/", "project_urls": {"Homepage": "https://github.com/BlueBrain/Brayns"}, "release_url": "https://pypi.org/project/brayns/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Brayns python API", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Brayns Python Client</h1>\n<blockquote>\n<p>A client for <a href=\"../README.md\" rel=\"nofollow\">Brayns</a> based on the <a href=\"https://github.com/BlueBrain/Rockets/blob/master/python/README.md\" rel=\"nofollow\">Rockets client</a> to provide remote control of a running Brayns instance.</p>\n</blockquote>\n<p><a href=\"https://travis-ci.org/BlueBrain/Brayns\" rel=\"nofollow\"><img alt=\"Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3fafb9d9a78146e3276ad621d99bbcabccc58d10/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f426c7565427261696e2f427261796e732f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#connection\" rel=\"nofollow\">Connection</a></li>\n<li><a href=\"#properties\" rel=\"nofollow\">Properties</a></li>\n<li><a href=\"#methods\" rel=\"nofollow\">Methods</a></li>\n<li><a href=\"#snapshot\" rel=\"nofollow\">Snapshot</a></li>\n<li><a href=\"#live\" rel=\"nofollow\">Live rendering</a></li>\n</ul>\n</li>\n</ul>\n<h3>Installation</h3>\n<hr>\n<p>You can install this package from <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>pip install brayns\n</pre>\n<h3>Usage</h3>\n<hr>\n<h4><code>Client</code> vs. <code>AsyncClient</code></h4>\n<p>Brayns provides two types of clients to support asychronous and synchronous usage.</p>\n<p>The <code>AsyncClient</code> exposes all of its functionality as <code>async</code> functions, hence an <code>asyncio</code>\n<a href=\"https://docs.python.org/3/library/asyncio-eventloop.html\" rel=\"nofollow\">event loop</a> is needed to complete pending\nexecution via <code>await</code> or <code>run_until_complete()</code>. The added benefit is to watch progress of pending\ntasks or cancel their execution. This is provided by according widgets if the Brayns client is used\nfrom within a Jupyter notebook.</p>\n<p>For simplicity, a synchronous <code>Client</code> is provided which automagically executes in a synchronous,\nblocking fashion.</p>\n<h4>Connection</h4>\n<p>Create a client:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">brayns</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'localhost:8200'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">brayns</span><span class=\"p\">)</span>\n<span class=\"err\">`</span><span class=\"n\">Brayns</span> <span class=\"n\">version</span> <span class=\"mf\">0.8</span><span class=\"o\">.</span><span class=\"mf\">0.</span><span class=\"n\">c52dd4b</span> <span class=\"n\">running</span> <span class=\"n\">on</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">8200</span><span class=\"o\">/</span><span class=\"err\">`</span>\n</pre>\n<p>Create an asynchronous client:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">brayns</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s1\">'localhost:8200'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">brayns</span><span class=\"p\">)</span>\n<span class=\"err\">`</span><span class=\"n\">Brayns</span> <span class=\"n\">version</span> <span class=\"mf\">0.8</span><span class=\"o\">.</span><span class=\"mf\">0.</span><span class=\"n\">c52dd4b</span> <span class=\"n\">running</span> <span class=\"n\">on</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">8200</span><span class=\"o\">/</span><span class=\"err\">`</span>\n</pre>\n<h4>Properties</h4>\n<p>Exposed properties from Brayns are properties on the python side as well:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">brayns</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"p\">)</span>\n</pre>\n<p>Changes on the properties must be communicated with <code>commit()</code> to Brayns:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">brayns</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<h4>Methods</h4>\n<p>Calling an RPC on Brayns is as simple as calling a method on the client object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">brayns</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_camera</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">=</span><span class=\"s1\">'orthographic'</span><span class=\"p\">)</span>\n</pre>\n<p>Above method does only return something on error. There are also requests:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">brayns</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">clip_planes</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_clip_planes</span><span class=\"p\">()</span>\n</pre>\n<h4>Snapshot</h4>\n<p>Make a snapshot and return a PIL image:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">brayns</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'png'</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1920</span><span class=\"p\">,</span> <span class=\"mi\">1080</span><span class=\"p\">),</span> <span class=\"n\">samples_per_pixel</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n</pre>\n<h4>Live rendering</h4>\n<p>If you are using the client in a Jupyter notebook, you can watch the live rendering of Brayns in a widget:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">brayns</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7024740, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bc4760318ab1deb711da794f08593b0b", "sha256": "d9dad5a38437bcd7c0bd546ecd2d3dbcc5fddde13fb91f90d23593474c8f0def"}, "downloads": -1, "filename": "brayns-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bc4760318ab1deb711da794f08593b0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31172, "upload_time": "2019-09-13T22:31:16", "upload_time_iso_8601": "2019-09-13T22:31:16.161816Z", "url": "https://files.pythonhosted.org/packages/6a/a4/b0299e24e02b89bad5922ac066cb1c8d87dddf32ad83e0e9fb8e3613f101/brayns-0.1.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "8be147e448e3666d577f5c0d81f1d0f2", "sha256": "5abe980d19d279706d3ca6862861e57bf0045fed28c57f0187fe5fe718509f40"}, "downloads": -1, "filename": "brayns-0.7.0.tar.gz", "has_sig": false, "md5_digest": "8be147e448e3666d577f5c0d81f1d0f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12662, "upload_time": "2018-09-05T14:43:33", "upload_time_iso_8601": "2018-09-05T14:43:33.677319Z", "url": "https://files.pythonhosted.org/packages/b2/3b/e2fc46f3e6ddc09de485a8242ccc2225a2a9149e22f9df09d36165670498/brayns-0.7.0.tar.gz", "yanked": false}], "0.7.0.dev0": [{"comment_text": "", "digests": {"md5": "58a67c1c3945fdd9bf6f8393ad34e78e", "sha256": "c80ff1de2376528e6609e31933c9778400d906154b3eed674fc5b7b01cb09731"}, "downloads": -1, "filename": "brayns-0.7.0.dev0.tar.gz", "has_sig": false, "md5_digest": "58a67c1c3945fdd9bf6f8393ad34e78e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11980, "upload_time": "2018-07-25T12:44:02", "upload_time_iso_8601": "2018-07-25T12:44:02.055685Z", "url": "https://files.pythonhosted.org/packages/15/0b/c24bf9a4d6c2114669f7adab61d5eb178c9af92ca7fc114aafe37568d875/brayns-0.7.0.dev0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "d12fecedda731684cc1813963229049b", "sha256": "d9a159ba8761a477cc29eb50ef5af15a24e30e42cc95bc1ea8ecff4ee780f600"}, "downloads": -1, "filename": "brayns-0.8.0.tar.gz", "has_sig": false, "md5_digest": "d12fecedda731684cc1813963229049b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14304, "upload_time": "2019-03-01T10:27:05", "upload_time_iso_8601": "2019-03-01T10:27:05.941344Z", "url": "https://files.pythonhosted.org/packages/97/8a/dcb860b847934a50dc0d282759aec064a5566f3b2047465e87b53f1c1f07/brayns-0.8.0.tar.gz", "yanked": false}], "0.8.0.dev0": [{"comment_text": "", "digests": {"md5": "67a2b5241984f73bc3c0d4849b725d9e", "sha256": "bc0e55b9eeeec57fb83050c2e453160f286a6699f698502c3de67b2508c2cd15"}, "downloads": -1, "filename": "brayns-0.8.0.dev0.tar.gz", "has_sig": false, "md5_digest": "67a2b5241984f73bc3c0d4849b725d9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13746, "upload_time": "2018-10-15T09:52:17", "upload_time_iso_8601": "2018-10-15T09:52:17.282657Z", "url": "https://files.pythonhosted.org/packages/da/fe/d0e19ff6a5579c9a751ac1526193f53351460a7060a6d43cb4a00c861883/brayns-0.8.0.dev0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "2fcb0fd90300c9fb6bc4f44ee1770948", "sha256": "ecc9b9cea4c479b56060e72974343daedc35804573a47674faa77d532d9e2b47"}, "downloads": -1, "filename": "brayns-0.8.1.tar.gz", "has_sig": false, "md5_digest": "2fcb0fd90300c9fb6bc4f44ee1770948", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14382, "upload_time": "2019-07-31T14:16:30", "upload_time_iso_8601": "2019-07-31T14:16:30.592659Z", "url": "https://files.pythonhosted.org/packages/5f/69/30721ec94cb742ebee9069f67e7fe3cf77fa5f9d144eaef52b934d993267/brayns-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "b8734a328a96430a09942c11f0453e85", "sha256": "2fa5596c2688c157fbe29f15d28061b7deddb04bdece0ebb151115205d42ae24"}, "downloads": -1, "filename": "brayns-0.8.2.tar.gz", "has_sig": false, "md5_digest": "b8734a328a96430a09942c11f0453e85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31160, "upload_time": "2019-09-13T10:07:15", "upload_time_iso_8601": "2019-09-13T10:07:15.480028Z", "url": "https://files.pythonhosted.org/packages/a6/6e/5bf5211f246d80191ce3e42218a14c9eb59e6b4cb7d92701fd914d00ac5c/brayns-0.8.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "93dd42521b8e5e7005819510a19fa862", "sha256": "cf119c6f12f9cfbd7f0b334026abe3d6869495ebb7e9dfef407c134f84c12a22"}, "downloads": -1, "filename": "brayns-1.0.0.tar.gz", "has_sig": false, "md5_digest": "93dd42521b8e5e7005819510a19fa862", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31167, "upload_time": "2019-09-14T11:18:23", "upload_time_iso_8601": "2019-09-14T11:18:23.640529Z", "url": "https://files.pythonhosted.org/packages/47/5c/6594e0ac63e4ff6e70a06326d0575d6c9992a96aff1549c0032e0b56070a/brayns-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9d6e48860a25223c666e6f3d0a70841c", "sha256": "1aa706a9f122aac9d0627814b8665e09d04ec17798afe9c76c27591430cb8244"}, "downloads": -1, "filename": "brayns-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9d6e48860a25223c666e6f3d0a70841c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35803, "upload_time": "2020-04-15T13:29:05", "upload_time_iso_8601": "2020-04-15T13:29:05.966720Z", "url": "https://files.pythonhosted.org/packages/71/2d/0b2df60d05a5905492493da43a5b6f054c9449720e1a69dd8c4fad60e4c0/brayns-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d6e48860a25223c666e6f3d0a70841c", "sha256": "1aa706a9f122aac9d0627814b8665e09d04ec17798afe9c76c27591430cb8244"}, "downloads": -1, "filename": "brayns-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9d6e48860a25223c666e6f3d0a70841c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35803, "upload_time": "2020-04-15T13:29:05", "upload_time_iso_8601": "2020-04-15T13:29:05.966720Z", "url": "https://files.pythonhosted.org/packages/71/2d/0b2df60d05a5905492493da43a5b6f054c9449720e1a69dd8c4fad60e4c0/brayns-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:22 2020"}