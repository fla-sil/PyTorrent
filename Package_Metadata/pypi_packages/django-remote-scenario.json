{"info": {"author": "Juan Manuel Schillaci", "author_email": "jmschillaci@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "=============================\ndjango-remote-scenario\n=============================\n\n.. image:: https://badge.fury.io/py/django-remote-scenario.png\n    :target: https://badge.fury.io/py/django-remote-scenario\n\n.. image:: https://travis-ci.org/skalanux/django-remote-scenario.png?branch=master\n    :target: https://travis-ci.org/skalanux/django-remote-scenario\n\n.. image:: https://coveralls.io/repos/skalanux/django-remote-scenario/badge.png?branch=master\n    :target: https://coveralls.io/r/skalanux/django-remote-scenario?branch=master\n\nRemote scenario setup for e2e testing of django projects\n\nDocumentation\n-------------\n\nThe full documentation will be at https://django-remote-scenario.readthedocs.org.\n\nQuickstart\n----------\n\nInstall django-remote-scenario::\n\n    pip install django-remote-scenario\n\nThen add it to an existing django project::\n\n    INSTALLED_APPS = [\n    ...\n    django_rs\n\nInside your settings file you also need to add the following::\n\n    SETTINGS_FILE_PATH = __file__\n\n\nYou need to add django_rs urls to your project url file like this::\n\n    urlpatterns = patterns('',\n    ...\n    url(r'^drs/', include('django_rs.urls')),\n    ..\n    )\n\nTo create custom scenarios, just create a directory inside your app named \"scenarios\"\n, then add as many files as scenarios you want to implement and create a __init__.py so it becomes a module\n. Inside each of those files, you need to implement a main() function\nsetting up the models you want to create for the scenario, you could create them by hand\nor use something like django_dynamic_fixtures https://github.com/paulocheque/django-dynamic-fixture\n\n\n\nOnce everything is ready, start the server this way, this will enable the dynamic call of scenarios::\n\n    python manage.py rune2eserver initial_data.json\n\n\nNote: You need to pass a initial fixture file with the barebones of your data.\n\nit is also possible (but not mandatory) to pass a specific settings file, for testing purposes,\nin case you want to do the tests using a different database for example::\n\n    python manage.py rune2eserver initial_data.json --settings=demoproject.test_settings [fixture1 fixture2....] [--addrport ipaddress:port]\n\nYou might also use you existing database to load scenarios on top of it with the \"--skip-test-db\" or \"-t\" modifier::\n\n\n    python manage.py rune2eserver -t initial_data.json\n\n\nTo start using it, just go to the following url::\n\n    http://127.0.0.1:8000/drs/[APPLICATION]/[SCENARIO]\n\nafter doing that the database will be populated with the data you provided in your\nscenario. Take into account that, everytime you call an scenario, all the other data\nin the database is erased, except for the one in your initial_data fixture files, wich\nare loaded again, and also the one you pass as a parameter when you call the command.\n\n\nInside this repository you will find a demo Django project preconfigured with a simple\nscenario that sets up four objects. Use it like this:\n\nFirst run the server::\n\n    $ python manage.py rune2eserver initial_data.json --settings=demoproject.test_settings\n\nThen go to your browser and setup a scenario::\n\n    http://127.0.0.1:8000/drs/demoapp/scenario_1\n\nYou may also pass a parameter to avoid flushing the database on a specific call::\n\n    http://127.0.0.1:8000/drs/demoapp/scenario_1/?flush=0\n\nLater you could see the results on the following url::\n\n    http://127.0.0.1:8000/demoapp/\n\n\nMocking\n-------\n\nIt is possible to mock parts of your backend between scenarios calls. You need to add a new directory inside\nthe scenarios directory and name ir 'mocks', then, again, add as many mocks as you want to implement and create a __init__.py so it becomes a module\n. Inside each of those files. You can apply as many mocks as you want and deactivate them selectibly. Pay special atention to the order this mocks are applied, as it may affect their internal behaviour.\n\nTo apply a mock just go to the following URL (assumming a file named mock_1 inside demoapp/mocks ::\n\n    http://127.0.0.1:8000/drs/demoapp/mocks/mock_1?activate=1\n\nTo remove the mock::\n\n    http://127.0.0.1:8000/drs/demoapp/mocks/mock_1?activate=0\n\n\nAn example of a mock can be found inside the test application\n\n\nBrowseable interface\n--------------------\n\n\nExperimental scenario and mocking browseable interface could be used to apply mocks and load scenarios by visting the root url for drs (on this case /drs/) ::\n\n    http://127.0.0.1:8000/drs/\n\n\nFeatures\n--------\n\n* TODO\n\n\n\n\nHistory\n-------\n\n0.1.0 (2014-05-31)\n++++++++++++++++++\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/skalanux/django-remote-scenario", "keywords": "django-remote-scenario", "license": "GPLv3+", "maintainer": null, "maintainer_email": null, "name": "django-remote-scenario", "package_url": "https://pypi.org/project/django-remote-scenario/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-remote-scenario/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/skalanux/django-remote-scenario"}, "release_url": "https://pypi.org/project/django-remote-scenario/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Remote scenario setup for e2e testing of django projects", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/django-remote-scenario\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-remote-scenario.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02f0c4861d584f64c8ab5957e235f260bcd8a156/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d72656d6f74652d7363656e6172696f2e706e67\"></a>\n<a href=\"https://travis-ci.org/skalanux/django-remote-scenario\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/skalanux/django-remote-scenario.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de6a94d5d13152ca5e2d5404b5f3491b29056b02/68747470733a2f2f7472617669732d63692e6f72672f736b616c616e75782f646a616e676f2d72656d6f74652d7363656e6172696f2e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/skalanux/django-remote-scenario?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/skalanux/django-remote-scenario/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3bcee126934046a323b7434b23c2b85719a6bd45/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f736b616c616e75782f646a616e676f2d72656d6f74652d7363656e6172696f2f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<p>Remote scenario setup for e2e testing of django projects</p>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The full documentation will be at <a href=\"https://django-remote-scenario.readthedocs.org\" rel=\"nofollow\">https://django-remote-scenario.readthedocs.org</a>.</p>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Install django-remote-scenario:</p>\n<pre>pip install django-remote-scenario\n</pre>\n<p>Then add it to an existing django project:</p>\n<pre>INSTALLED_APPS = [\n...\ndjango_rs\n</pre>\n<p>Inside your settings file you also need to add the following:</p>\n<pre>SETTINGS_FILE_PATH = __file__\n</pre>\n<p>You need to add django_rs urls to your project url file like this:</p>\n<pre>urlpatterns = patterns('',\n...\nurl(r'^drs/', include('django_rs.urls')),\n..\n)\n</pre>\n<p>To create custom scenarios, just create a directory inside your app named \u201cscenarios\u201d\n, then add as many files as scenarios you want to implement and create a __init__.py so it becomes a module\n. Inside each of those files, you need to implement a main() function\nsetting up the models you want to create for the scenario, you could create them by hand\nor use something like django_dynamic_fixtures <a href=\"https://github.com/paulocheque/django-dynamic-fixture\" rel=\"nofollow\">https://github.com/paulocheque/django-dynamic-fixture</a></p>\n<p>Once everything is ready, start the server this way, this will enable the dynamic call of scenarios:</p>\n<pre>python manage.py rune2eserver initial_data.json\n</pre>\n<p>Note: You need to pass a initial fixture file with the barebones of your data.</p>\n<p>it is also possible (but not mandatory) to pass a specific settings file, for testing purposes,\nin case you want to do the tests using a different database for example:</p>\n<pre>python manage.py rune2eserver initial_data.json --settings=demoproject.test_settings [fixture1 fixture2....] [--addrport ipaddress:port]\n</pre>\n<p>You might also use you existing database to load scenarios on top of it with the \u201c\u2013skip-test-db\u201d or \u201c-t\u201d modifier:</p>\n<pre>python manage.py rune2eserver -t initial_data.json\n</pre>\n<p>To start using it, just go to the following url:</p>\n<pre>http://127.0.0.1:8000/drs/[APPLICATION]/[SCENARIO]\n</pre>\n<p>after doing that the database will be populated with the data you provided in your\nscenario. Take into account that, everytime you call an scenario, all the other data\nin the database is erased, except for the one in your initial_data fixture files, wich\nare loaded again, and also the one you pass as a parameter when you call the command.</p>\n<p>Inside this repository you will find a demo Django project preconfigured with a simple\nscenario that sets up four objects. Use it like this:</p>\n<p>First run the server:</p>\n<pre>$ python manage.py rune2eserver initial_data.json --settings=demoproject.test_settings\n</pre>\n<p>Then go to your browser and setup a scenario:</p>\n<pre>http://127.0.0.1:8000/drs/demoapp/scenario_1\n</pre>\n<p>You may also pass a parameter to avoid flushing the database on a specific call:</p>\n<pre>http://127.0.0.1:8000/drs/demoapp/scenario_1/?flush=0\n</pre>\n<p>Later you could see the results on the following url:</p>\n<pre>http://127.0.0.1:8000/demoapp/\n</pre>\n</div>\n<div id=\"mocking\">\n<h2>Mocking</h2>\n<p>It is possible to mock parts of your backend between scenarios calls. You need to add a new directory inside\nthe scenarios directory and name ir \u2018mocks\u2019, then, again, add as many mocks as you want to implement and create a __init__.py so it becomes a module\n. Inside each of those files. You can apply as many mocks as you want and deactivate them selectibly. Pay special atention to the order this mocks are applied, as it may affect their internal behaviour.</p>\n<p>To apply a mock just go to the following URL (assumming a file named mock_1 inside demoapp/mocks</p>\n<pre>http://127.0.0.1:8000/drs/demoapp/mocks/mock_1?activate=1\n</pre>\n<p>To remove the mock:</p>\n<pre>http://127.0.0.1:8000/drs/demoapp/mocks/mock_1?activate=0\n</pre>\n<p>An example of a mock can be found inside the test application</p>\n</div>\n<div id=\"browseable-interface\">\n<h2>Browseable interface</h2>\n<p>Experimental scenario and mocking browseable interface could be used to apply mocks and load scenarios by visting the root url for drs (on this case /drs/)</p>\n<pre>http://127.0.0.1:8000/drs/\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>TODO</li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2014-05-31)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1359224, "releases": {"0.1.0": [], "0.2.0": [{"comment_text": "", "digests": {"md5": "99165ff6503dbdc8590f1074fb68fda9", "sha256": "2bcb6f11f8ef63b7a821c972edde55f37a197870ef65036387c3947adcc1debb"}, "downloads": -1, "filename": "django-remote-scenario-0.2.0.tar.gz", "has_sig": false, "md5_digest": "99165ff6503dbdc8590f1074fb68fda9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19009, "upload_time": "2014-06-01T20:49:15", "upload_time_iso_8601": "2014-06-01T20:49:15.805629Z", "url": "https://files.pythonhosted.org/packages/bd/d5/8f1bea62b2379ac7747a657be334792ada6fad2837e21cdb30dfcf8234b1/django-remote-scenario-0.2.0.tar.gz", "yanked": false}], "0.2.1": [], "0.2.2": [], "0.2.4": [{"comment_text": "", "digests": {"md5": "c49d67313b6249cc2823fddfd61f1d9a", "sha256": "7e2ec98159919d5cb6b99a6aede4b89a0240507294cb3181e10d2dbd5e409d23"}, "downloads": -1, "filename": "django-remote-scenario-0.2.4.tar.gz", "has_sig": false, "md5_digest": "c49d67313b6249cc2823fddfd61f1d9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17770, "upload_time": "2014-07-01T20:58:03", "upload_time_iso_8601": "2014-07-01T20:58:03.624498Z", "url": "https://files.pythonhosted.org/packages/dd/ad/4d08fea887c86a2bfb4ecdfc40d778aa99a62ae39dcee1b55ca518027eac/django-remote-scenario-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "a18ec1f7e2764e14189beede738c11ef", "sha256": "0fd9cac364be83e1204bc0484afab29f9767bc87560e978097aea127379b4acc"}, "downloads": -1, "filename": "django-remote-scenario-0.2.5.tar.gz", "has_sig": false, "md5_digest": "a18ec1f7e2764e14189beede738c11ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20110, "upload_time": "2014-07-02T03:01:25", "upload_time_iso_8601": "2014-07-02T03:01:25.469327Z", "url": "https://files.pythonhosted.org/packages/a0/e9/7a3b446a12bb03faeca9c71a6e851de1bf9b7740362017f9d95f37658d28/django-remote-scenario-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "72d3ebcb96778b43340008469588f089", "sha256": "d6539f5bd7573f4f2cdc0a8eea3259164c52bd263c939da651cb35c15c78bb6a"}, "downloads": -1, "filename": "django-remote-scenario-0.2.6.tar.gz", "has_sig": false, "md5_digest": "72d3ebcb96778b43340008469588f089", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18771, "upload_time": "2014-07-08T18:59:13", "upload_time_iso_8601": "2014-07-08T18:59:13.278795Z", "url": "https://files.pythonhosted.org/packages/77/2b/8547bb8b99e55ba994ba680b09475b4f52a0e455086f3531055715753014/django-remote-scenario-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "3a58fd06a5807f1d892db8fa9977b153", "sha256": "dea11bae34d8c65a780a1d38d5e0fe9dcc65e28d149381077643f77a0ea491e8"}, "downloads": -1, "filename": "django-remote-scenario-0.2.7.tar.gz", "has_sig": false, "md5_digest": "3a58fd06a5807f1d892db8fa9977b153", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19424, "upload_time": "2014-07-22T21:33:10", "upload_time_iso_8601": "2014-07-22T21:33:10.883288Z", "url": "https://files.pythonhosted.org/packages/4f/df/dad85fc198f7d0fa1a35ddc6adc2e061e34a7244bf064319c3f6e217efb8/django-remote-scenario-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "76364ae0cb2ea0bb8c743e08b5c6811c", "sha256": "9bd84ecc23d56f750526e41ce43db2f625a5ccdbfccb3df7638a727686991194"}, "downloads": -1, "filename": "django-remote-scenario-0.2.8.tar.gz", "has_sig": false, "md5_digest": "76364ae0cb2ea0bb8c743e08b5c6811c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20398, "upload_time": "2014-11-07T20:05:47", "upload_time_iso_8601": "2014-11-07T20:05:47.020697Z", "url": "https://files.pythonhosted.org/packages/91/d0/3466082a279e148215404502f784a497c98b5ad61cfbd7fcc90455129bbc/django-remote-scenario-0.2.8.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "9af3493f653419bdb91eec6d8ca4254d", "sha256": "156fba931a2ee8625af9b812340374a3a9d1b6dca3260b06e4ad211c0469fc98"}, "downloads": -1, "filename": "django-remote-scenario-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9af3493f653419bdb91eec6d8ca4254d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72699, "upload_time": "2014-12-23T14:23:42", "upload_time_iso_8601": "2014-12-23T14:23:42.744987Z", "url": "https://files.pythonhosted.org/packages/46/45/77276ad08965bc1a512f6e534d6d81c93d8e04627db8d95fb9fcfde8e4a9/django-remote-scenario-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ee049bd2b010b99d9ae2c400d5031b47", "sha256": "14343c4213fd1a90e82726fe7ffcba1f2816fa6a4f8c99c181551c2db93e86c0"}, "downloads": -1, "filename": "django-remote-scenario-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ee049bd2b010b99d9ae2c400d5031b47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72740, "upload_time": "2014-12-23T19:31:20", "upload_time_iso_8601": "2014-12-23T19:31:20.493997Z", "url": "https://files.pythonhosted.org/packages/aa/ac/9b01d3d037bad300a9c1128a4aad1e3a0d136ec8ecf33b24442d91c04752/django-remote-scenario-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee049bd2b010b99d9ae2c400d5031b47", "sha256": "14343c4213fd1a90e82726fe7ffcba1f2816fa6a4f8c99c181551c2db93e86c0"}, "downloads": -1, "filename": "django-remote-scenario-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ee049bd2b010b99d9ae2c400d5031b47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72740, "upload_time": "2014-12-23T19:31:20", "upload_time_iso_8601": "2014-12-23T19:31:20.493997Z", "url": "https://files.pythonhosted.org/packages/aa/ac/9b01d3d037bad300a9c1128a4aad1e3a0d136ec8ecf33b24442d91c04752/django-remote-scenario-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:18 2020"}