{"info": {"author": "bofm", "author_email": "bofm@github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Status\n======\n\nWORK IN PROGRESS\n----------------\n\nCaching\n=======\n\n|Build Status| |Coverage Status| |Python Versions|\n\nPython utils and decorators for c\u0430ching with TTL, maxsize and file-based storage.\n\nInstallation\n============\n\n``pip install caching``\n\nUsage\n=====\n\n.. code:: python\n\n    from caching import Cache\n\n    # File-based cache with unlimited ttl and maximum of 128 cached results\n    @Cache(ttl=-1, maxsize=128, filepath='/tmp/mycache')\n    def long_running_function(a, b, *args, c=None, **kwargs):\n        pass\n\n    # Memory-based cache with limited ttl and maxsize and \"least recently used\"\n    # cache replacement policy.\n    @Cache(ttl=60, maxsize=128, policy='LRU')\n    def long_running_function(a, b, *args, c=None, **kwargs):\n        pass\n\nAdvanced usage\n==============\n\n.. code:: python\n\n    from caching import Cache\n\n    # One cache for many functions\n\n    cache = Cache(filepath='/tmp/mycache', ttl=3600, maxsize=1024)\n\n    @cache\n    def pow(x, y):\n        return x**y\n\n    @cache\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n-1)\n\n\n    # Caching the last result and returning it only in case of errors\n\n    @Cache(maxsize=1, only_on_errors=(ConnectionError, TimeoutError))\n    def api_request():\n        \"\"\"Request some remote resource which sometimes become unavailable.\n        If this functions raises ConnectionError or TimeoutError, then the\n        last cached result will be returned, if available.\"\"\"\n\n\n    # Custom cache key function\n    \n    @Cache(key=lambda x: x[0])\n    def toupper(a):\n        global call_count\n        call_count += 1\n        return str(a).upper()\n    \n    call_count = 0\n    \n    # The key function returns the same result for both 'aaa' and 'azz'\n    # so the cached result from the first call is returned in the second call\n    assert toupper('aaa') == toupper('azz') == 'AAA'\n    assert call_count == 1\n\n\n    # Using cache as a key-value store\n\n    cache = Cache()\n\n    try:\n        result = cache[1]\n    except KeyError:\n        result = calculate_result(1)\n        cache[1] = result\n        assert 1 in cache\n        assert cache[1] == result\n        assert cache.get(1, None) == result\n        assert cache.get(2, None) is None\n\n    # Cleanup\n\n    import os\n\n    cache = Cache(filepath='/tmp/mycache')\n    cache[1] = 'one'\n    assert 1 in cache\n    cache.clear()  # empty the cache\n    assert 1 not in cache\n    assert list(cache.items()) == []\n    assert os.path.isfile('/tmp/mycache')\n    cache.remove()  # Empty the cache and remove the underlying file\n    assert not os.path.isfile('/tmp/mycache')\n\nFeatures\n========\n\n-  [x] Memory and file based cache.\n-  [x] TTL and maxsize.\n-  [x] Works with ``*args``, ``**kwargs``.\n-  [x] Works with mutable function arguments of the following types: ``dict``, ``list``, ``set``.\n-  [x] FIFO, LRU and LFU cache replacement policies.\n-  [x] Customizable cache key function.\n-  [ ] Multiprocessing- and thread-safe.\n-  [ ] Pluggable external caching backends (see Redis example).\n\n.. |Build Status| image:: https://travis-ci.org/bofm/python-caching.svg?branch=master\n   :target: https://travis-ci.org/bofm/python-caching\n.. |Coverage Status| image:: https://coveralls.io/repos/github/bofm/python-caching/badge.svg\n   :target: https://coveralls.io/github/bofm/python-caching\n.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/caching.svg\n   :target: https://pypi.python.org/pypi/caching", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/bofm/python-caching/tarball/0.1.dev8", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bofm/python-caching", "keywords": "cache,caching", "license": "", "maintainer": "", "maintainer_email": "", "name": "caching-py35", "package_url": "https://pypi.org/project/caching-py35/", "platform": "", "project_url": "https://pypi.org/project/caching-py35/", "project_urls": {"Download": "https://github.com/bofm/python-caching/tarball/0.1.dev8", "Homepage": "https://github.com/bofm/python-caching"}, "release_url": "https://pypi.org/project/caching-py35/0.1.dev8/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Python utils and decorators for c\u0430ching with TTL, maxsize and file-based storage.", "version": "0.1.dev8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"status\">\n<h2>Status</h2>\n<h2 id=\"work-in-progress\"><span class=\"section-subtitle\">WORK IN PROGRESS</span></h2>\n</div>\n<div id=\"caching\">\n<h2>Caching</h2>\n<p><a href=\"https://travis-ci.org/bofm/python-caching\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/400f1fd47994b6c42967b300dbbe67f2cff86d4f/68747470733a2f2f7472617669732d63692e6f72672f626f666d2f707974686f6e2d63616368696e672e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/bofm/python-caching\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90ced5d4506d0947b8ccb91e8433734ae7a5430a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f626f666d2f707974686f6e2d63616368696e672f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/caching\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8030c5bbe7c52cbfefda7aeaf1f3391925ccd75a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f63616368696e672e737667\"></a></p>\n<p>Python utils and decorators for c\u0430ching with TTL, maxsize and file-based storage.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install caching</tt></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">caching</span> <span class=\"kn\">import</span> <span class=\"n\">Cache</span>\n\n<span class=\"c1\"># File-based cache with unlimited ttl and maximum of 128 cached results</span>\n<span class=\"nd\">@Cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/mycache'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">long_running_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Memory-based cache with limited ttl and maxsize and \"least recently used\"</span>\n<span class=\"c1\"># cache replacement policy.</span>\n<span class=\"nd\">@Cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">policy</span><span class=\"o\">=</span><span class=\"s1\">'LRU'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">long_running_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">caching</span> <span class=\"kn\">import</span> <span class=\"n\">Cache</span>\n\n<span class=\"c1\"># One cache for many functions</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/mycache'</span><span class=\"p\">,</span> <span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"n\">y</span>\n\n<span class=\"nd\">@cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Caching the last result and returning it only in case of errors</span>\n\n<span class=\"nd\">@Cache</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">only_on_errors</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"ne\">ConnectionError</span><span class=\"p\">,</span> <span class=\"ne\">TimeoutError</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">api_request</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Request some remote resource which sometimes become unavailable.\n    If this functions raises ConnectionError or TimeoutError, then the\n    last cached result will be returned, if available.\"\"\"</span>\n\n\n<span class=\"c1\"># Custom cache key function</span>\n\n<span class=\"nd\">@Cache</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">toupper</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"k\">global</span> <span class=\"n\">call_count</span>\n    <span class=\"n\">call_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n\n<span class=\"n\">call_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># The key function returns the same result for both 'aaa' and 'azz'</span>\n<span class=\"c1\"># so the cached result from the first call is returned in the second call</span>\n<span class=\"k\">assert</span> <span class=\"n\">toupper</span><span class=\"p\">(</span><span class=\"s1\">'aaa'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">toupper</span><span class=\"p\">(</span><span class=\"s1\">'azz'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'AAA'</span>\n<span class=\"k\">assert</span> <span class=\"n\">call_count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n\n<span class=\"c1\"># Using cache as a key-value store</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">calculate_result</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">cache</span>\n    <span class=\"k\">assert</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">result</span>\n    <span class=\"k\">assert</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">result</span>\n    <span class=\"k\">assert</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n\n<span class=\"c1\"># Cleanup</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/mycache'</span><span class=\"p\">)</span>\n<span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'one'</span>\n<span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">cache</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>  <span class=\"c1\"># empty the cache</span>\n<span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cache</span>\n<span class=\"k\">assert</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"p\">[]</span>\n<span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/mycache'</span><span class=\"p\">)</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>  <span class=\"c1\"># Empty the cache and remove the underlying file</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/mycache'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>[x] Memory and file based cache.</li>\n<li>[x] TTL and maxsize.</li>\n<li>[x] Works with <tt>*args</tt>, <tt>**kwargs</tt>.</li>\n<li>[x] Works with mutable function arguments of the following types: <tt>dict</tt>, <tt>list</tt>, <tt>set</tt>.</li>\n<li>[x] FIFO, LRU and LFU cache replacement policies.</li>\n<li>[x] Customizable cache key function.</li>\n<li>[ ] Multiprocessing- and thread-safe.</li>\n<li>[ ] Pluggable external caching backends (see Redis example).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4271091, "releases": {"0.1.dev8": [{"comment_text": "", "digests": {"md5": "d77100acaff056ac85eab203ea817822", "sha256": "86548a6312da58d9ab0939d778860c4a570d3177b724d32816f819bf76804c4f"}, "downloads": -1, "filename": "caching-py35-0.1.dev8.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "d77100acaff056ac85eab203ea817822", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10547, "upload_time": "2018-09-14T05:34:42", "upload_time_iso_8601": "2018-09-14T05:34:42.451770Z", "url": "https://files.pythonhosted.org/packages/8b/77/5c910ab072ccbce43b66310ebe1a0cc10a2c2e8e08873c7d30111a67617b/caching-py35-0.1.dev8.linux-x86_64.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d77100acaff056ac85eab203ea817822", "sha256": "86548a6312da58d9ab0939d778860c4a570d3177b724d32816f819bf76804c4f"}, "downloads": -1, "filename": "caching-py35-0.1.dev8.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "d77100acaff056ac85eab203ea817822", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10547, "upload_time": "2018-09-14T05:34:42", "upload_time_iso_8601": "2018-09-14T05:34:42.451770Z", "url": "https://files.pythonhosted.org/packages/8b/77/5c910ab072ccbce43b66310ebe1a0cc10a2c2e8e08873c7d30111a67617b/caching-py35-0.1.dev8.linux-x86_64.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:42 2020"}