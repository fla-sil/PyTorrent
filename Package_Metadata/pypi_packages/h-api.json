{"info": {"author": "Hypothesis Engineering Team", "author_email": "eng@list.hypothes.is", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Programming Language :: Python :: 3.6"], "description": "# h-api\n\nTools and components for calling the H API\n\nThis package is not likely to be of use to you\n----------------------------------------------\n\nUnless you work for Hypothesis, then this package is not going to be very\nuseful to you. Feel free to have a poke about, but don't be surprised if it\ndoesn't make much sense.\n\nAt the present time not only should you not use this package, our \nauthentication will also prevent it.\n\nUsage\n-----\n\nTo construct NDJSON for Bulk API calls:\n\n```python\nfrom h_api.enums import ViewType\n\nfrom h_api.bulk_api import CommandBuilder, BulkAPI, Executor\n\nnd_json = BulkAPI.to_string([\n    # It's your job to put the right commands here. \n    # This also accepts a generator\n\n    CommandBuilder.configure(\n        effective_user=\"acct:example@lms.hypothes.is\", \n        total_instructions=4, \n        view=ViewType.BASIC),\n\n    CommandBuilder.user.upsert({\n        \"username\": \"username\",\n        \"authority\": \"authority\",\n        \"display_name\": \"display_name\",\n        \"identities\": [{\n            \"provider\": \"provider\",\n            \"provider_unique_id\": \"provider_unique_id\"\n        }],\n    }, \"user_ref\"),\n\n    CommandBuilder.group.upsert({\n        \"name\": \"name\",\n        \"authority\": \"authority\",\n        \"authority_provided_id\": \"authority_provided_id\"\n    }, \"group_ref\"),\n\n    # These references here match those we assigned to the objects above\n    CommandBuilder.group_membership.create(\"user_ref\", \"group_ref\")\n])\n\n# It's now your job to send this off to H\n```\n\nTo accept and process an NDJSON request like the above:\n```python\nclass MyExectutor(Executor):\n    def execute_batch(self, command_type, data_type, default_config, batch):\n        \"\"\"Implement your insertion logic here and return Report Objects\"\"\"\n\nrows = BulkAPI.from_byte_stream(http_streaming_body, executor=MyExectutor())\n\nif rows:\n    # Turn each row into JSON and return to your caller\n    # You have to do this\n```\n\nHacking\n-------\n\n### Installing h-api in a development environment\n\n#### You will need\n\n* [Git](https://git-scm.com/)\n\n* [pyenv](https://github.com/pyenv/pyenv)\n  Follow the instructions in the pyenv README to install it.\n  The Homebrew method works best on macOS.\n  On Ubuntu follow the Basic GitHub Checkout method.\n\n#### Clone the git repo\n\n```terminal\ngit clone https://github.com/hypothesis/h-api.git\n```\n\nThis will download the code into a `h-api` directory\nin your current working directory. You need to be in the\n`h-api` directory for the rest of the installation\nprocess:\n\n```terminal\ncd h-api\n```\n\n#### Run the tests\n\n```terminal\nmake test\n```\n\n**That's it!** You\u2019ve finished setting up your h-api\ndevelopment environment. Run `make help` to see all the commands that're\navailable for linting, code formatting, packaging, etc.\n\n### Updating the Cookiecutter scaffolding\n\nThis project was created from the\nhttps://github.com/hypothesis/h-cookiecutter-pypackage/ template.\nIf h-cookiecutter-pypackage itself has changed since this project was created, and\nyou want to update this project with the latest changes, you can \"replay\" the\ncookiecutter over this project. Run:\n\n```terminal\nmake template\n```\n\n**This will change the files in your working tree**, applying the latest\nupdates from the h-cookiecutter-pypackage template. Inspect and test the\nchanges, do any fixups that are needed, and then commit them to git and send a\npull request.\n\nIf you want `make template` to skip certain files, never changing them, add\nthese files to `\"options.disable_replay\"` in\n[`.cookiecutter.json`](.cookiecutter.json) and commit that to git.\n\nIf you want `make template` to update a file that's listed in `disable_replay`\nsimply delete that file and then run `make template`, it'll recreate the file\nfor you.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://web.hypothes.is/", "keywords": "", "license": "License :: OSI Approved :: BSD License", "maintainer": "Hypothesis Engineering Team", "maintainer_email": "eng@list.hypothes.is", "name": "h-api", "package_url": "https://pypi.org/project/h-api/", "platform": "Operating System :: OS Independent", "project_url": "https://pypi.org/project/h-api/", "project_urls": {"Homepage": "https://web.hypothes.is/", "Source": "https://github.com/hypothesis/h-api"}, "release_url": "https://pypi.org/project/h-api/1.0.0/", "requires_dist": ["jsonschema", "pytest ; extra == 'tests'", "coverage ; extra == 'tests'", "h-matchers ; extra == 'tests'", "jsonschema ; extra == 'tests'"], "requires_python": "", "summary": "Tools and components for calling the H API", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>h-api</h1>\n<p>Tools and components for calling the H API</p>\n<h2>This package is not likely to be of use to you</h2>\n<p>Unless you work for Hypothesis, then this package is not going to be very\nuseful to you. Feel free to have a poke about, but don't be surprised if it\ndoesn't make much sense.</p>\n<p>At the present time not only should you not use this package, our\nauthentication will also prevent it.</p>\n<h2>Usage</h2>\n<p>To construct NDJSON for Bulk API calls:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">h_api.enums</span> <span class=\"kn\">import</span> <span class=\"n\">ViewType</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">h_api.bulk_api</span> <span class=\"kn\">import</span> <span class=\"n\">CommandBuilder</span><span class=\"p\">,</span> <span class=\"n\">BulkAPI</span><span class=\"p\">,</span> <span class=\"n\">Executor</span>\n\n<span class=\"n\">nd_json</span> <span class=\"o\">=</span> <span class=\"n\">BulkAPI</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">([</span>\n    <span class=\"c1\"># It's your job to put the right commands here. </span>\n    <span class=\"c1\"># This also accepts a generator</span>\n\n    <span class=\"n\">CommandBuilder</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n        <span class=\"n\">effective_user</span><span class=\"o\">=</span><span class=\"s2\">\"acct:example@lms.hypothes.is\"</span><span class=\"p\">,</span> \n        <span class=\"n\">total_instructions</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> \n        <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"n\">ViewType</span><span class=\"o\">.</span><span class=\"n\">BASIC</span><span class=\"p\">),</span>\n\n    <span class=\"n\">CommandBuilder</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">upsert</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"username\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"authority\"</span><span class=\"p\">:</span> <span class=\"s2\">\"authority\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"display_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"display_name\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"identities\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">\"provider\"</span><span class=\"p\">:</span> <span class=\"s2\">\"provider\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"provider_unique_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"provider_unique_id\"</span>\n        <span class=\"p\">}],</span>\n    <span class=\"p\">},</span> <span class=\"s2\">\"user_ref\"</span><span class=\"p\">),</span>\n\n    <span class=\"n\">CommandBuilder</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">upsert</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"authority\"</span><span class=\"p\">:</span> <span class=\"s2\">\"authority\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"authority_provided_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"authority_provided_id\"</span>\n    <span class=\"p\">},</span> <span class=\"s2\">\"group_ref\"</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># These references here match those we assigned to the objects above</span>\n    <span class=\"n\">CommandBuilder</span><span class=\"o\">.</span><span class=\"n\">group_membership</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"user_ref\"</span><span class=\"p\">,</span> <span class=\"s2\">\"group_ref\"</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># It's now your job to send this off to H</span>\n</pre>\n<p>To accept and process an NDJSON request like the above:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyExectutor</span><span class=\"p\">(</span><span class=\"n\">Executor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">execute_batch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command_type</span><span class=\"p\">,</span> <span class=\"n\">data_type</span><span class=\"p\">,</span> <span class=\"n\">default_config</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Implement your insertion logic here and return Report Objects\"\"\"</span>\n\n<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">BulkAPI</span><span class=\"o\">.</span><span class=\"n\">from_byte_stream</span><span class=\"p\">(</span><span class=\"n\">http_streaming_body</span><span class=\"p\">,</span> <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">MyExectutor</span><span class=\"p\">())</span>\n\n<span class=\"k\">if</span> <span class=\"n\">rows</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Turn each row into JSON and return to your caller</span>\n    <span class=\"c1\"># You have to do this</span>\n</pre>\n<h2>Hacking</h2>\n<h3>Installing h-api in a development environment</h3>\n<h4>You will need</h4>\n<ul>\n<li>\n<p><a href=\"https://git-scm.com/\" rel=\"nofollow\">Git</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a>\nFollow the instructions in the pyenv README to install it.\nThe Homebrew method works best on macOS.\nOn Ubuntu follow the Basic GitHub Checkout method.</p>\n</li>\n</ul>\n<h4>Clone the git repo</h4>\n<pre>git clone https://github.com/hypothesis/h-api.git\n</pre>\n<p>This will download the code into a <code>h-api</code> directory\nin your current working directory. You need to be in the\n<code>h-api</code> directory for the rest of the installation\nprocess:</p>\n<pre>cd h-api\n</pre>\n<h4>Run the tests</h4>\n<pre>make test\n</pre>\n<p><strong>That's it!</strong> You\u2019ve finished setting up your h-api\ndevelopment environment. Run <code>make help</code> to see all the commands that're\navailable for linting, code formatting, packaging, etc.</p>\n<h3>Updating the Cookiecutter scaffolding</h3>\n<p>This project was created from the\n<a href=\"https://github.com/hypothesis/h-cookiecutter-pypackage/\" rel=\"nofollow\">https://github.com/hypothesis/h-cookiecutter-pypackage/</a> template.\nIf h-cookiecutter-pypackage itself has changed since this project was created, and\nyou want to update this project with the latest changes, you can \"replay\" the\ncookiecutter over this project. Run:</p>\n<pre>make template\n</pre>\n<p><strong>This will change the files in your working tree</strong>, applying the latest\nupdates from the h-cookiecutter-pypackage template. Inspect and test the\nchanges, do any fixups that are needed, and then commit them to git and send a\npull request.</p>\n<p>If you want <code>make template</code> to skip certain files, never changing them, add\nthese files to <code>\"options.disable_replay\"</code> in\n<a href=\".cookiecutter.json\" rel=\"nofollow\"><code>.cookiecutter.json</code></a> and commit that to git.</p>\n<p>If you want <code>make template</code> to update a file that's listed in <code>disable_replay</code>\nsimply delete that file and then run <code>make template</code>, it'll recreate the file\nfor you.</p>\n\n          </div>"}, "last_serial": 7077092, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2e67190ca4b407d64fcc4600a6801ac7", "sha256": "e1e2992ec4ee1fd7e20545c23d90fd67bb7cfca18fc5a7f9a8064fe84d3cee0b"}, "downloads": -1, "filename": "h_api-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2e67190ca4b407d64fcc4600a6801ac7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29467, "upload_time": "2020-04-16T16:56:28", "upload_time_iso_8601": "2020-04-16T16:56:28.736749Z", "url": "https://files.pythonhosted.org/packages/20/0d/4b7664b4b7e957b62d798636813d65e638278c108d111e0ee47d1d558c89/h_api-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff6381b238392a013a4213351947bdba", "sha256": "70a4c5ea2fa81a9a540fbcd0e3545cd0edcd1d2182e04c67da07a830ccb7e9a9"}, "downloads": -1, "filename": "h_api-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ff6381b238392a013a4213351947bdba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21150, "upload_time": "2020-04-16T16:56:31", "upload_time_iso_8601": "2020-04-16T16:56:31.255712Z", "url": "https://files.pythonhosted.org/packages/87/35/eaffa22b0b8f8942dc15d313c946bfa56a412bc6fa0ba0487f02920bef96/h_api-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e67190ca4b407d64fcc4600a6801ac7", "sha256": "e1e2992ec4ee1fd7e20545c23d90fd67bb7cfca18fc5a7f9a8064fe84d3cee0b"}, "downloads": -1, "filename": "h_api-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2e67190ca4b407d64fcc4600a6801ac7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29467, "upload_time": "2020-04-16T16:56:28", "upload_time_iso_8601": "2020-04-16T16:56:28.736749Z", "url": "https://files.pythonhosted.org/packages/20/0d/4b7664b4b7e957b62d798636813d65e638278c108d111e0ee47d1d558c89/h_api-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff6381b238392a013a4213351947bdba", "sha256": "70a4c5ea2fa81a9a540fbcd0e3545cd0edcd1d2182e04c67da07a830ccb7e9a9"}, "downloads": -1, "filename": "h_api-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ff6381b238392a013a4213351947bdba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21150, "upload_time": "2020-04-16T16:56:31", "upload_time_iso_8601": "2020-04-16T16:56:31.255712Z", "url": "https://files.pythonhosted.org/packages/87/35/eaffa22b0b8f8942dc15d313c946bfa56a412bc6fa0ba0487f02920bef96/h_api-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:32 2020"}