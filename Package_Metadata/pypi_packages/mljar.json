{"info": {"author": "Piotr Plonski", "author_email": "contact@mljar.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6"], "description": "|Build Status| |PyPI version| |Coverage Status| |PyPI pyversions|\n\nmljar-api-python\n================\n\nA simple python wrapper over mljar API. It allows MLJAR users to create\nMachine Learning models with few lines of code:\n\n.. code:: python\n\n    from mljar import Mljar\n\n    model = Mljar(project='My awesome project', experiment='First experiment')\n    model.fit(X,y)\n\n    model.predict(X)\n\nThat's all folks! Yeah, I know, this makes Machine Learning super easy!\nYou can use this code for following Machine Learning tasks: \\* Binary\nclassification (your target has only two unique values) \\* Regression\n(your target value is continuous) \\* More is coming soon!\n\nHow to install\n--------------\n\nYou can install mljar with **pip**:\n\n::\n\n    pip install -U mljar\n\nor from source code:\n\n::\n\n    python setup.py install\n\nHow to use it\n-------------\n\n1. Create an account at mljar.com and login.\n2. Please go to your users settings (top, right corner).\n3. Get your token, for example 'exampleexampleexample'.\n4. Set environment variable ``MLJAR_TOKEN`` with your token value:\n\n   ::\n\n       export MLJAR_TOKEN=exampleexampleexample\n\n5. That's all, you are ready to use MLJAR in your python code!\n\nWhat's going on?\n----------------\n\n-  This wrapper allows you to search through different Machine Learning\n   algorithms and tune each of the algorithm.\n-  By searching and tuning ML algorithm to your data you will get very\n   accurate model.\n-  By calling method ``fit`` from ``Mljar class`` you create new project\n   and start experiment with models training. All your results will be\n   accessible from your mljar.com account - this makes Machine Learning\n   super easy and keeps all your models and results in beautiful order.\n   So, you will never miss anything.\n-  All computations are done in MLJAR Cloud, they are executed in\n   parallel. So after calling ``fit`` method you can switch your\n   computer off and MLJAR will do the job for you!\n-  I think this is really amazing! What do you think? Please let us know\n   at ``contact@mljar.com``.\n\nExamples\n--------\n\nThe examples are `here! <https://github.com/mljar/mljar-examples>`__.\n\nTesting\n-------\n\nTo run tests with command:\n\n::\n\n    python -m tests.run\n\n.. |Build Status| image:: https://travis-ci.org/mljar/mljar-api-python.svg?branch=master\n   :target: https://travis-ci.org/mljar/mljar-api-python\n.. |PyPI version| image:: https://badge.fury.io/py/mljar.svg\n   :target: https://badge.fury.io/py/mljar\n.. |Coverage Status| image:: https://coveralls.io/repos/github/mljar/mljar-api-python/badge.svg?branch=master\n   :target: https://coveralls.io/github/mljar/mljar-api-python?branch=master\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mljar/mljar-api-python", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "mljar", "package_url": "https://pypi.org/project/mljar/", "platform": "", "project_url": "https://pypi.org/project/mljar/", "project_urls": {"Homepage": "https://github.com/mljar/mljar-api-python"}, "release_url": "https://pypi.org/project/mljar/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python wrapper over MLJAR API", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            |Build Status| |PyPI version| |Coverage Status| |PyPI pyversions|<br><br>mljar-api-python<br>================<br><br>A simple python wrapper over mljar API. It allows MLJAR users to create<br>Machine Learning models with few lines of code:<br><br>.. code:: python<br><br>    from mljar import Mljar<br><br>    model = Mljar(project='My awesome project', experiment='First experiment')<br>    model.fit(X,y)<br><br>    model.predict(X)<br><br>That's all folks! Yeah, I know, this makes Machine Learning super easy!<br>You can use this code for following Machine Learning tasks: \\* Binary<br>classification (your target has only two unique values) \\* Regression<br>(your target value is continuous) \\* More is coming soon!<br><br>How to install<br>--------------<br><br>You can install mljar with **pip**:<br><br>::<br><br>    pip install -U mljar<br><br>or from source code:<br><br>::<br><br>    python setup.py install<br><br>How to use it<br>-------------<br><br>1. Create an account at mljar.com and login.<br>2. Please go to your users settings (top, right corner).<br>3. Get your token, for example 'exampleexampleexample'.<br>4. Set environment variable ``MLJAR_TOKEN`` with your token value:<br><br>   ::<br><br>       export MLJAR_TOKEN=exampleexampleexample<br><br>5. That's all, you are ready to use MLJAR in your python code!<br><br>What's going on?<br>----------------<br><br>-  This wrapper allows you to search through different Machine Learning<br>   algorithms and tune each of the algorithm.<br>-  By searching and tuning ML algorithm to your data you will get very<br>   accurate model.<br>-  By calling method ``fit`` from ``Mljar class`` you create new project<br>   and start experiment with models training. All your results will be<br>   accessible from your mljar.com account - this makes Machine Learning<br>   super easy and keeps all your models and results in beautiful order.<br>   So, you will never miss anything.<br>-  All computations are done in MLJAR Cloud, they are executed in<br>   parallel. So after calling ``fit`` method you can switch your<br>   computer off and MLJAR will do the job for you!<br>-  I think this is really amazing! What do you think? Please let us know<br>   at ``contact@mljar.com``.<br><br>Examples<br>--------<br><br>The examples are `here! &lt;https://github.com/mljar/mljar-examples&gt;`__.<br><br>Testing<br>-------<br><br>To run tests with command:<br><br>::<br><br>    python -m tests.run<br><br>.. |Build Status| image:: https://travis-ci.org/mljar/mljar-api-python.svg?branch=master<br>   :target: https://travis-ci.org/mljar/mljar-api-python<br>.. |PyPI version| image:: https://badge.fury.io/py/mljar.svg<br>   :target: https://badge.fury.io/py/mljar<br>.. |Coverage Status| image:: https://coveralls.io/repos/github/mljar/mljar-api-python/badge.svg?branch=master<br>   :target: https://coveralls.io/github/mljar/mljar-api-python?branch=master<br>\n          </div>"}, "last_serial": 3750950, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "80395ac673dff3628e5dc2ac89c2c295", "sha256": "197737a79091aa3286159a9098cfb9ede972976d465feb0e98b3c82ea2acaaab"}, "downloads": -1, "filename": "mljar-0.0.6.tar.gz", "has_sig": false, "md5_digest": "80395ac673dff3628e5dc2ac89c2c295", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15317, "upload_time": "2017-03-21T08:51:30", "upload_time_iso_8601": "2017-03-21T08:51:30.346766Z", "url": "https://files.pythonhosted.org/packages/42/57/a67c1bd9dd5c44a009963e26b5b5180f3e9f4ec7975ed6ed16b6a35db21f/mljar-0.0.6.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "12f6a476c16092c987da2eac63d89a21", "sha256": "a301485de3700f4c97a30d3ac34d7323ee0cab1a3c2766ee1c5bad311ac73f95"}, "downloads": -1, "filename": "mljar-0.0.9.tar.gz", "has_sig": false, "md5_digest": "12f6a476c16092c987da2eac63d89a21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15811, "upload_time": "2018-04-09T22:46:52", "upload_time_iso_8601": "2018-04-09T22:46:52.388060Z", "url": "https://files.pythonhosted.org/packages/4f/da/868f5f9aab68b57719152f6cc9c05e56c5b02979bdbfbaddd0ed8be76592/mljar-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "124b75b526e7131aae31762c3410d28c", "sha256": "fbfd079caa8ebc9060eece7bbb5692d906b5eaa38caa535305a36eb41aa1bc96"}, "downloads": -1, "filename": "mljar-0.1.0.tar.gz", "has_sig": false, "md5_digest": "124b75b526e7131aae31762c3410d28c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15817, "upload_time": "2018-04-10T07:01:51", "upload_time_iso_8601": "2018-04-10T07:01:51.513876Z", "url": "https://files.pythonhosted.org/packages/e8/07/0c140aa7f0a14e85059a203d9b4a2ad206031a613c8ab274a57de19aa580/mljar-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "124b75b526e7131aae31762c3410d28c", "sha256": "fbfd079caa8ebc9060eece7bbb5692d906b5eaa38caa535305a36eb41aa1bc96"}, "downloads": -1, "filename": "mljar-0.1.0.tar.gz", "has_sig": false, "md5_digest": "124b75b526e7131aae31762c3410d28c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15817, "upload_time": "2018-04-10T07:01:51", "upload_time_iso_8601": "2018-04-10T07:01:51.513876Z", "url": "https://files.pythonhosted.org/packages/e8/07/0c140aa7f0a14e85059a203d9b4a2ad206031a613c8ab274a57de19aa580/mljar-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:29 2020"}