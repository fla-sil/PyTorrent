{"info": {"author": "Andrey Fedoseev", "author_email": "andrey.fedoseev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP"], "description": "========================\ndjango-asset-definitions\n========================\n\n.. image:: https://circleci.com/gh/andreyfedoseev/django-asset-definitions.svg?style=shield\n    :target: https://circleci.com/gh/andreyfedoseev/django-asset-definitions\n    :alt: Build Status\n\n.. image:: https://codecov.io/github/andreyfedoseev/django-asset-definitions/coverage.svg?branch=master\n    :target: https://codecov.io/github/andreyfedoseev/django-asset-definitions?branch=master\n    :alt: Code Coverage\n\nAsset definitions are collections of static files (JavaScript, CSS) defined in Python code and (re)used in Django views\nand templates.\n\nAn example of asset definition is ``Media`` class that you can\n`define in Django forms <https://docs.djangoproject.com/en/1.11/topics/forms/media/>`_.\n\n``django-asset-definitions`` aim to extend the application of asset definitions beyond forms and use them as the main\nway to describe and organize JavaScript and CSS files.\n\nInstallation\n============\n\n.. code-block:: sh\n\n    pip install django-asset-definitions\n\n\nUsage\n=====\n\nDefine:\n-------\n\n.. code-block:: python\n\n  import asset_definitions\n\n  my_media = asset_definitions.Media(\n      js=(\n          \"media.js\",\n          \"\"\"<script>window.addEventListener(\"load\", function() {console.log(\"Loaded!\");});</script>\"\"\",\n      ),\n      css={\n          \"all\": (\n              \"media.css\",\n          ),\n      }\n  )\n\nCombine:\n--------\n\n.. code-block:: python\n\n  extended_media = my_media + asset_definitions.Media(\n      js=(\"extension.js\", )\n  )\n\n\nDefine in views:\n----------------\n\n.. code-block:: python\n\n  import asset_definitions\n\n  class MyView(asset_definitions.MediaDefiningView, ...):\n\n      class Media:\n          js=(\n              \"media.js\",\n          ),\n          css={\n              \"all\": (\n                  \"media.css\",\n              ),\n          }\n\n      ...\n\nForm media is added to view media automatically:\n\n.. code-block:: python\n\n  import asset_definitions\n  from django.views.generic import FormView\n\n  class MyFormView(asset_definitions.MediaDefiningView, FormView):\n      ...\n\nUse in templates:\n-----------------\n\n.. code-block:: django\n\n  {{ view.media.render }}\n\nOr:\n\n.. code-block:: django\n\n  {{ view.media.js.render }}\n  {{ view.media.css.render }}\n\n\nSee an extended example below.\n\n\n``asset_definitions.Media`` and ``django.forms.Media``\n======================================================\n\n1. ``asset_definitions.Media`` provides the same API as ``django.forms.Media``. In fact, it is inherited from\n   ``django.forms.Media``.\n2. It is safe to combine ``asset_definitions.Media`` with ``django.forms.Media``.\n3. ``asset_definitions.Media`` objects are lazy. If two or more instances of ``asset_definitions.Media`` are combined\n   together the result is computed only when media is rendered. It is safe to use ``reverse_lazy()`` with\n   ``asset_definitions.Media``. It is important if you define your assets on module level.\n4. ``Media`` class in ``MediaDefiningView`` does not support ``extend`` option. To add to the media defined in parent\n   view class you should override ``get_media`` method and use ``super(MyView, self).get_media()``.\n\nExample:\n========\n\n``myapp/urls.py``:\n\n.. code-block:: python\n\n  urlpatterns = (\n      url(\"/\", MyView.as_view()),\n      url(\"/global-variables.js\", global_js_variables, name=\"global_js_variables\"),\n  )\n\n\n``myapp/views.py``:\n\n.. code-block:: python\n\n  import asset_definitions\n  from . import assets\n\n\n  class MyView(assets_definition.MediaDefiningView, TemplateView):\n\n      template_name = \"template.html\"\n\n      class Media:\n          js = (\"media.js\", )\n          css = {\"all\": (\"media.css\", media)\n\n      def get_media():\n          return (\n            assets.global_js_variables +\n            assets.jquery +\n            super(MyView, self).get_media()\n          )\n\n  def global_js_variables(request):\n      js_content = 'const CURRENT_USER=\"{}\";'.format(request.user)\n      return HttpResponse(js_content, content_type=\"application/javascript\")\n\n``myapp/assets.py``:\n\n.. code-block:: python\n\n  import asset_definitions\n  from django.core import urlresolvers\n\n\n  global_js_variables = asset_definition.Media(\n      js=urlresolvers.reverse_lazy(\"global_js_variables\"),\n  )\n\n\n  jquery = asset_definitions.Media(\n      js=\"jquery.js\"\n  )\n\n\n``myapp/templates/template.html``:\n\n.. code-block:: django\n\n  <html>\n    <head>\n      {{ view.media.css.render }}\n    </head>\n    <body>\n      ...\n      {{ view.media.js.render }}\n    </body>\n  </html>\n\n\n\n\n=======\nChanges\n=======\n\n0.3\n===\n\n - Add Django 2.0 compatibility\n - Extract ``MediaDefiningClass`` base class from ``MediaDefiningView``\n\n0.2\n===\n\n - Specify different requirements in ``setup.py`` based on the current Python version\n - Allow to use inline JavaScript in media definitions (wrap with ``<script>`` tag)\n\n0.1\n===\n\n - Initial release\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andreyfedoseev/django-asset-definitions", "keywords": "django", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-asset-definitions", "package_url": "https://pypi.org/project/django-asset-definitions/", "platform": "", "project_url": "https://pypi.org/project/django-asset-definitions/", "project_urls": {"Homepage": "https://github.com/andreyfedoseev/django-asset-definitions"}, "release_url": "https://pypi.org/project/django-asset-definitions/0.3/", "requires_dist": null, "requires_python": "", "summary": "django-asset-definitions allows to define collections of static files (JavaScript, CSS) in Python code and (re)use them in Django views and templates.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-asset-definitions\">\n<h2>django-asset-definitions</h2>\n<a href=\"https://circleci.com/gh/andreyfedoseev/django-asset-definitions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be914ad84e8a70c67114b4ab6fa9f33f948f3e06/68747470733a2f2f636972636c6563692e636f6d2f67682f616e647265796665646f736565762f646a616e676f2d61737365742d646566696e6974696f6e732e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://codecov.io/github/andreyfedoseev/django-asset-definitions?branch=master\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37d7b337c3d9f70b179a08a38158ba21e1f10ea8/68747470733a2f2f636f6465636f762e696f2f6769746875622f616e647265796665646f736565762f646a616e676f2d61737365742d646566696e6974696f6e732f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Asset definitions are collections of static files (JavaScript, CSS) defined in Python code and (re)used in Django views\nand templates.</p>\n<p>An example of asset definition is <tt>Media</tt> class that you can\n<a href=\"https://docs.djangoproject.com/en/1.11/topics/forms/media/\" rel=\"nofollow\">define in Django forms</a>.</p>\n<p><tt><span class=\"pre\">django-asset-definitions</span></tt> aim to extend the application of asset definitions beyond forms and use them as the main\nway to describe and organize JavaScript and CSS files.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install django-asset-definitions\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"define\">\n<h4>Define:</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asset_definitions</span>\n\n<span class=\"n\">my_media</span> <span class=\"o\">=</span> <span class=\"n\">asset_definitions</span><span class=\"o\">.</span><span class=\"n\">Media</span><span class=\"p\">(</span>\n    <span class=\"n\">js</span><span class=\"o\">=</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"media.js\"</span><span class=\"p\">,</span>\n        <span class=\"sd\">\"\"\"&lt;script&gt;window.addEventListener(\"load\", function() {console.log(\"Loaded!\");});&lt;/script&gt;\"\"\"</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">css</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"all\"</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n            <span class=\"s2\">\"media.css\"</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"combine\">\n<h4>Combine:</h4>\n<pre><span class=\"n\">extended_media</span> <span class=\"o\">=</span> <span class=\"n\">my_media</span> <span class=\"o\">+</span> <span class=\"n\">asset_definitions</span><span class=\"o\">.</span><span class=\"n\">Media</span><span class=\"p\">(</span>\n    <span class=\"n\">js</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"extension.js\"</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"define-in-views\">\n<h4>Define in views:</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asset_definitions</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyView</span><span class=\"p\">(</span><span class=\"n\">asset_definitions</span><span class=\"o\">.</span><span class=\"n\">MediaDefiningView</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Media</span><span class=\"p\">:</span>\n        <span class=\"n\">js</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"media.js\"</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">css</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s2\">\"all\"</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n                <span class=\"s2\">\"media.css\"</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"o\">...</span>\n</pre>\n<p>Form media is added to view media automatically:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asset_definitions</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">FormView</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFormView</span><span class=\"p\">(</span><span class=\"n\">asset_definitions</span><span class=\"o\">.</span><span class=\"n\">MediaDefiningView</span><span class=\"p\">,</span> <span class=\"n\">FormView</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"use-in-templates\">\n<h4>Use in templates:</h4>\n<pre><span class=\"cp\">{{</span> <span class=\"nv\">view.media.render</span> <span class=\"cp\">}}</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"cp\">{{</span> <span class=\"nv\">view.media.js.render</span> <span class=\"cp\">}}</span><span class=\"x\">\n</span><span class=\"cp\">{{</span> <span class=\"nv\">view.media.css.render</span> <span class=\"cp\">}}</span>\n</pre>\n<p>See an extended example below.</p>\n</div>\n</div>\n<div id=\"asset-definitions-media-and-django-forms-media\">\n<h3><tt>asset_definitions.Media</tt> and <tt>django.forms.Media</tt></h3>\n<ol>\n<li><tt>asset_definitions.Media</tt> provides the same API as <tt>django.forms.Media</tt>. In fact, it is inherited from\n<tt>django.forms.Media</tt>.</li>\n<li>It is safe to combine <tt>asset_definitions.Media</tt> with <tt>django.forms.Media</tt>.</li>\n<li><tt>asset_definitions.Media</tt> objects are lazy. If two or more instances of <tt>asset_definitions.Media</tt> are combined\ntogether the result is computed only when media is rendered. It is safe to use <tt>reverse_lazy()</tt> with\n<tt>asset_definitions.Media</tt>. It is important if you define your assets on module level.</li>\n<li><tt>Media</tt> class in <tt>MediaDefiningView</tt> does not support <tt>extend</tt> option. To add to the media defined in parent\nview class you should override <tt>get_media</tt> method and use <tt>super(MyView, <span class=\"pre\">self).get_media()</span></tt>.</li>\n</ol>\n</div>\n<div id=\"example\">\n<h3>Example:</h3>\n<p><tt>myapp/urls.py</tt>:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">MyView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">\"/global-variables.js\"</span><span class=\"p\">,</span> <span class=\"n\">global_js_variables</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"global_js_variables\"</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p><tt>myapp/views.py</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asset_definitions</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">assets</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyView</span><span class=\"p\">(</span><span class=\"n\">assets_definition</span><span class=\"o\">.</span><span class=\"n\">MediaDefiningView</span><span class=\"p\">,</span> <span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"template.html\"</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Media</span><span class=\"p\">:</span>\n        <span class=\"n\">js</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"media.js\"</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"all\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"media.css\"</span><span class=\"p\">,</span> <span class=\"n\">media</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_media</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n          <span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">global_js_variables</span> <span class=\"o\">+</span>\n          <span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">jquery</span> <span class=\"o\">+</span>\n          <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyView</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_media</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">global_js_variables</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">js_content</span> <span class=\"o\">=</span> <span class=\"s1\">'const CURRENT_USER=\"</span><span class=\"si\">{}</span><span class=\"s1\">\";'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">js_content</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">\"application/javascript\"</span><span class=\"p\">)</span>\n</pre>\n<p><tt>myapp/assets.py</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asset_definitions</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">urlresolvers</span>\n\n\n<span class=\"n\">global_js_variables</span> <span class=\"o\">=</span> <span class=\"n\">asset_definition</span><span class=\"o\">.</span><span class=\"n\">Media</span><span class=\"p\">(</span>\n    <span class=\"n\">js</span><span class=\"o\">=</span><span class=\"n\">urlresolvers</span><span class=\"o\">.</span><span class=\"n\">reverse_lazy</span><span class=\"p\">(</span><span class=\"s2\">\"global_js_variables\"</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">jquery</span> <span class=\"o\">=</span> <span class=\"n\">asset_definitions</span><span class=\"o\">.</span><span class=\"n\">Media</span><span class=\"p\">(</span>\n    <span class=\"n\">js</span><span class=\"o\">=</span><span class=\"s2\">\"jquery.js\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p><tt>myapp/templates/template.html</tt>:</p>\n<pre><span class=\"x\">&lt;html&gt;\n  &lt;head&gt;\n    </span><span class=\"cp\">{{</span> <span class=\"nv\">view.media.css.render</span> <span class=\"cp\">}}</span><span class=\"x\">\n  &lt;/head&gt;\n  &lt;body&gt;\n    ...\n    </span><span class=\"cp\">{{</span> <span class=\"nv\">view.media.js.render</span> <span class=\"cp\">}}</span><span class=\"x\">\n  &lt;/body&gt;\n&lt;/html&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>0.3</h3>\n<blockquote>\n<ul>\n<li>Add Django 2.0 compatibility</li>\n<li>Extract <tt>MediaDefiningClass</tt> base class from <tt>MediaDefiningView</tt></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h3>0.2</h3>\n<blockquote>\n<ul>\n<li>Specify different requirements in <tt>setup.py</tt> based on the current Python version</li>\n<li>Allow to use inline JavaScript in media definitions (wrap with <tt>&lt;script&gt;</tt> tag)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h3>0.1</h3>\n<blockquote>\n<ul>\n<li>Initial release</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6485172, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9b0ea2884e0faba67eae0f35301e827d", "sha256": "c1bc31931aee859fae34826855a88f5f5ed0954bc2c3563589471b071b4a3635"}, "downloads": -1, "filename": "django-asset-definitions-0.1.tar.gz", "has_sig": false, "md5_digest": "9b0ea2884e0faba67eae0f35301e827d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5263, "upload_time": "2017-05-23T04:42:01", "upload_time_iso_8601": "2017-05-23T04:42:01.628686Z", "url": "https://files.pythonhosted.org/packages/2a/18/d0930fd95e7b9d2535fc0828870b855f1a546faf1e2293af67eba74478d4/django-asset-definitions-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "542d708d5646d94d70ef1ef24b1b31c3", "sha256": "b00accecf5f0de22d192e23c077b1bc2b31023387c25106a94ce6498e1a9e634"}, "downloads": -1, "filename": "django-asset-definitions-0.2.tar.gz", "has_sig": false, "md5_digest": "542d708d5646d94d70ef1ef24b1b31c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5748, "upload_time": "2018-02-06T20:21:44", "upload_time_iso_8601": "2018-02-06T20:21:44.732920Z", "url": "https://files.pythonhosted.org/packages/31/51/2c51b889513ea7a37dcee6e1a8a5201da4e67994faf0d7e59271e7df8ae3/django-asset-definitions-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2c96376f18da9458b93a493c90f2ef6c", "sha256": "cfc6cf4cf116f18c7b62e26719011fa92f2829a440120ca3bcbb70cfbe5df5a4"}, "downloads": -1, "filename": "django-asset-definitions-0.3.tar.gz", "has_sig": false, "md5_digest": "2c96376f18da9458b93a493c90f2ef6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5722, "upload_time": "2018-02-08T21:40:33", "upload_time_iso_8601": "2018-02-08T21:40:33.296522Z", "url": "https://files.pythonhosted.org/packages/63/a1/8bd1bf89504005fb888a36a7886bb1cbb067837db87d3b7ee2f552db44f6/django-asset-definitions-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c96376f18da9458b93a493c90f2ef6c", "sha256": "cfc6cf4cf116f18c7b62e26719011fa92f2829a440120ca3bcbb70cfbe5df5a4"}, "downloads": -1, "filename": "django-asset-definitions-0.3.tar.gz", "has_sig": false, "md5_digest": "2c96376f18da9458b93a493c90f2ef6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5722, "upload_time": "2018-02-08T21:40:33", "upload_time_iso_8601": "2018-02-08T21:40:33.296522Z", "url": "https://files.pythonhosted.org/packages/63/a1/8bd1bf89504005fb888a36a7886bb1cbb067837db87d3b7ee2f552db44f6/django-asset-definitions-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:36 2020"}