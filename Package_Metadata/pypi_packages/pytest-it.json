{"info": {"author": "Matt Duck", "author_email": "matt@mattduck.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Testing"], "description": "pytest-it\n=========\n\n|PyPI|  |Travis|\n\nDecorate your pytest suite with `RSpec-inspired <rspec.info>`_ markers ``describe``, ``context`` and\n``it``. Then run ``pytest --it`` to see a plaintext, org-mode compatible spec of the\ntest structure.\n\n.. image:: img/output-example.png\n\n\n\nInstall\n-------\n\n``pytest-it`` is `available on PyPi <https://pypi.org/project/pytest-it/>`_: ``pip install pytest-it``.\n\n\nExamples\n--------\n\nA basic example that uses ``pytest.mark.describe``, ``pytest.mark.context`` and ``pytest.mark.it``:\n\n.. code-block:: python\n\n    from pytest import mark as m\n\n    @m.describe(\"The test function report format\")\n    class TestPytestItExample(object):\n\n        @m.context(\"When @pytest.mark.it is used\")\n        @m.it(\"Displays an '- It: ' block matching the decorator\")\n        def test_it_decorator(self, testdir):\n            pass\n\nThis produces::\n\n  - Describe: The test function report format...\n\n    - Context: When @pytest.mark.it is used...\n      - \u2713 It: Displays an '- It: ' block matching the decorator\n\n\n``Describe`` and ``Context`` blocks can be nested arbitrarily by using multiple\nmarkers, eg:\n\n.. code-block:: python\n\n    from pytest import mark as m\n\n    @m.describe(\"The test function report format\")\n    class TestPytestItExample(object):\n\n        @m.context(\"When @pytest.mark.it is not used\")\n        @m.it(\"Displays the test function name\")\n        def test_no_argument(self, testdir):\n            pass\n\n        @m.context(\"When @pytest.mark.it is not used\")\n        @m.context(\"but the test name starts with 'test_it_'\")\n        @m.it(\"Prettifies the test name into the 'It: ' value\")\n        def test_populates_the_it_marker_using_function_name(self, testdir):\n            pass\n\nThis produces::\n\n  - Describe: The test function report format...\n\n    - Context: When @pytest.mark.it is not used...\n      - \u2713 It: Displays the test function name\n\n      - ...but the test name starts with 'test_it_'...\n        - \u2713 It: Prettifies the test name into the 'It: ' value\n\n\nBehaviour\n---------\n\n- Pytest markers are used to specify the ``Describe:``, ``Context:`` and ``It:``\n  sections. You can set these in all the usual ways that you specify pytest\n  markers.\n\n- ``Describe`` and ``Context`` can be nested arbitrarily.\n\n- If ``--collect-only`` is used, it displays the same ``pytest-it`` spec as usual, but\n  without the test result (\u2713/F/s).\n\n- If ``-v`` is higher than 0, the full path to the test function is include in the\n  test name.\n\n- If ``pytest.mark.it`` is not used on a test, the test name is displayed instead\n  of the ``It: does something`` output.\n\n- If ``pytest.mark.it`` is not used but the test name starts with ``test_it``,\n  ``pytest-it`` will prettify the test name into an ``It: does something`` value.\n\n- The test output should be able to be copied directly into an `org-mode <https://orgmode.org/>`_ file.\n\n\nBackground\n-----------\n\nPytest provides a lot of useful features for testing in Python, but when testing\ncomplex systems, it can be hard to clearly communicate the intent of a test\nusing the standard ``test_module.py::TestClass::test_function`` structure.\n\nOne way to improve clarity is to use a BDD testing framework\n(eg. `Behave <https://github.com/behave/behave>`_,\n`Mamba <https://github.com/nestorsalceda/mamba>`_, `Rspec <http://rspec.info>`_), but\nit's not always desirable to restructure existing test and program code.\n\nThere are some pytest plugins that attempt to bridge this gap, by providing\nalternative ways to structure the tests (eg. `pytest-describe\n<https://github.com/ropez/pytest-describe>`_, `pytest-bdd <https://github.com/pytest-dev/pytest-bdd>`_), or\naltering the test report output (eg. `pytest-testdox <https://github.com/renanivo/pytest-testdox>`_, `pytest-pspec <https://github.com/gowtham-sai/pytest-pspec>`_).\n\n``pytest-it`` takes a similar approach to ``pytest-testdox``, by providing pytest\nmarkers that can describe the test output. ``pytest-it`` supports a few other\nfeatures, such as:\n\n- A plaintext test structure that can easily be copied to markdown/org-mode documents.\n- Arbitrary nesting of ``describe`` and ``context`` markers.\n- Supporting the ``--collect-only`` pytest flag to display test structure.\n- Displaying the full path to each test if ``-v`` is used.\n- Neatly integrating tests in the output if they don't use the ``pytest-it``\n  markers.\n\nAlthough ``pytest-it`` does not change the behaviour of pytest tests, you may find it\na useful tool for thinking about test structure, and communicating the intention\nof both the test code and the system under test.\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/pytest-it.svg\n   :target: https://pypi.python.org/pypi/pytest-it\n\n.. |Travis| image:: https://travis-ci.org/mattduck/pytest-it.svg?branch=master\n   :target: https://travis-ci.org/mattduck/pytest-it", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mattduck/pytest-it", "keywords": "pytest,pytest-it,test,bdd,rspec,org-mode,markdown", "license": "MIT", "maintainer": "Matt Duck", "maintainer_email": "matt@mattduck.com", "name": "pytest-it", "package_url": "https://pypi.org/project/pytest-it/", "platform": "", "project_url": "https://pypi.org/project/pytest-it/", "project_urls": {"Homepage": "https://github.com/mattduck/pytest-it"}, "release_url": "https://pypi.org/project/pytest-it/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Pytest plugin to display test reports as a plaintext spec, inspired by Rspec: https://github.com/mattduck/pytest-it.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/pytest-it\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/56943c481a998a2b20e8436c9c9ef845fe619b44/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d69742e737667\"></a>  <a href=\"https://travis-ci.org/mattduck/pytest-it\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a18b3c4f7d4b6b6f9623630fc9a3b4ed4559938/68747470733a2f2f7472617669732d63692e6f72672f6d6174746475636b2f7079746573742d69742e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Decorate your pytest suite with <a href=\"rspec.info\" rel=\"nofollow\">RSpec-inspired</a> markers <tt>describe</tt>, <tt>context</tt> and\n<tt>it</tt>. Then run <tt>pytest <span class=\"pre\">--it</span></tt> to see a plaintext, org-mode compatible spec of the\ntest structure.</p>\n<img alt=\"img/output-example.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5d6c72d1cc579c870b7cf3842a3681f5fa815cd/696d672f6f75747075742d6578616d706c652e706e67\">\n<div id=\"install\">\n<h2>Install</h2>\n<p><tt><span class=\"pre\">pytest-it</span></tt> is <a href=\"https://pypi.org/project/pytest-it/\" rel=\"nofollow\">available on PyPi</a>: <tt>pip install <span class=\"pre\">pytest-it</span></tt>.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>A basic example that uses <tt>pytest.mark.describe</tt>, <tt>pytest.mark.context</tt> and <tt>pytest.mark.it</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest</span> <span class=\"kn\">import</span> <span class=\"n\">mark</span> <span class=\"k\">as</span> <span class=\"n\">m</span>\n\n<span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"The test function report format\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestPytestItExample</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s2\">\"When @pytest.mark.it is used\"</span><span class=\"p\">)</span>\n    <span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"s2\">\"Displays an '- It: ' block matching the decorator\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_it_decorator</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">testdir</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>This produces:</p>\n<pre>- Describe: The test function report format...\n\n  - Context: When @pytest.mark.it is used...\n    - \u2713 It: Displays an '- It: ' block matching the decorator\n</pre>\n<p><tt>Describe</tt> and <tt>Context</tt> blocks can be nested arbitrarily by using multiple\nmarkers, eg:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest</span> <span class=\"kn\">import</span> <span class=\"n\">mark</span> <span class=\"k\">as</span> <span class=\"n\">m</span>\n\n<span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"The test function report format\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestPytestItExample</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s2\">\"When @pytest.mark.it is not used\"</span><span class=\"p\">)</span>\n    <span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"s2\">\"Displays the test function name\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_no_argument</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">testdir</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s2\">\"When @pytest.mark.it is not used\"</span><span class=\"p\">)</span>\n    <span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s2\">\"but the test name starts with 'test_it_'\"</span><span class=\"p\">)</span>\n    <span class=\"nd\">@m</span><span class=\"o\">.</span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"s2\">\"Prettifies the test name into the 'It: ' value\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_populates_the_it_marker_using_function_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">testdir</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>This produces:</p>\n<pre>- Describe: The test function report format...\n\n  - Context: When @pytest.mark.it is not used...\n    - \u2713 It: Displays the test function name\n\n    - ...but the test name starts with 'test_it_'...\n      - \u2713 It: Prettifies the test name into the 'It: ' value\n</pre>\n</div>\n<div id=\"behaviour\">\n<h2>Behaviour</h2>\n<ul>\n<li>Pytest markers are used to specify the <tt>Describe:</tt>, <tt>Context:</tt> and <tt>It:</tt>\nsections. You can set these in all the usual ways that you specify pytest\nmarkers.</li>\n<li><tt>Describe</tt> and <tt>Context</tt> can be nested arbitrarily.</li>\n<li>If <tt><span class=\"pre\">--collect-only</span></tt> is used, it displays the same <tt><span class=\"pre\">pytest-it</span></tt> spec as usual, but\nwithout the test result (\u2713/F/s).</li>\n<li>If <tt><span class=\"pre\">-v</span></tt> is higher than 0, the full path to the test function is include in the\ntest name.</li>\n<li>If <tt>pytest.mark.it</tt> is not used on a test, the test name is displayed instead\nof the <tt>It: does something</tt> output.</li>\n<li>If <tt>pytest.mark.it</tt> is not used but the test name starts with <tt>test_it</tt>,\n<tt><span class=\"pre\">pytest-it</span></tt> will prettify the test name into an <tt>It: does something</tt> value.</li>\n<li>The test output should be able to be copied directly into an <a href=\"https://orgmode.org/\" rel=\"nofollow\">org-mode</a> file.</li>\n</ul>\n</div>\n<div id=\"background\">\n<h2>Background</h2>\n<p>Pytest provides a lot of useful features for testing in Python, but when testing\ncomplex systems, it can be hard to clearly communicate the intent of a test\nusing the standard <tt><span class=\"pre\">test_module.py::TestClass::test_function</span></tt> structure.</p>\n<p>One way to improve clarity is to use a BDD testing framework\n(eg. <a href=\"https://github.com/behave/behave\" rel=\"nofollow\">Behave</a>,\n<a href=\"https://github.com/nestorsalceda/mamba\" rel=\"nofollow\">Mamba</a>, <a href=\"http://rspec.info\" rel=\"nofollow\">Rspec</a>), but\nit\u2019s not always desirable to restructure existing test and program code.</p>\n<p>There are some pytest plugins that attempt to bridge this gap, by providing\nalternative ways to structure the tests (eg. <a href=\"https://github.com/ropez/pytest-describe\" rel=\"nofollow\">pytest-describe</a>, <a href=\"https://github.com/pytest-dev/pytest-bdd\" rel=\"nofollow\">pytest-bdd</a>), or\naltering the test report output (eg. <a href=\"https://github.com/renanivo/pytest-testdox\" rel=\"nofollow\">pytest-testdox</a>, <a href=\"https://github.com/gowtham-sai/pytest-pspec\" rel=\"nofollow\">pytest-pspec</a>).</p>\n<p><tt><span class=\"pre\">pytest-it</span></tt> takes a similar approach to <tt><span class=\"pre\">pytest-testdox</span></tt>, by providing pytest\nmarkers that can describe the test output. <tt><span class=\"pre\">pytest-it</span></tt> supports a few other\nfeatures, such as:</p>\n<ul>\n<li>A plaintext test structure that can easily be copied to markdown/org-mode documents.</li>\n<li>Arbitrary nesting of <tt>describe</tt> and <tt>context</tt> markers.</li>\n<li>Supporting the <tt><span class=\"pre\">--collect-only</span></tt> pytest flag to display test structure.</li>\n<li>Displaying the full path to each test if <tt><span class=\"pre\">-v</span></tt> is used.</li>\n<li>Neatly integrating tests in the output if they don\u2019t use the <tt><span class=\"pre\">pytest-it</span></tt>\nmarkers.</li>\n</ul>\n<p>Although <tt><span class=\"pre\">pytest-it</span></tt> does not change the behaviour of pytest tests, you may find it\na useful tool for thinking about test structure, and communicating the intention\nof both the test code and the system under test.</p>\n</div>\n\n          </div>"}, "last_serial": 6500430, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1fe1b63fb807ba7e99f529719e096c60", "sha256": "99f2af11b6f08f137baff950d9fb3b5795d76785744b8f1a3fe6714aeaf7eccb"}, "downloads": -1, "filename": "pytest-it-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1fe1b63fb807ba7e99f529719e096c60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6824, "upload_time": "2019-07-14T19:50:18", "upload_time_iso_8601": "2019-07-14T19:50:18.151935Z", "url": "https://files.pythonhosted.org/packages/3e/04/063033d2bafa00a9ebe848afa2bf53f0342f9ef13e87c49b4fdba4283fdc/pytest-it-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6c086a0b936c9cae2e9458cb7cfbf8fa", "sha256": "5c093b581f04e64d6093010a4335ae1c497fe297cd60f1badc9347dd1102a6b3"}, "downloads": -1, "filename": "pytest-it-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6c086a0b936c9cae2e9458cb7cfbf8fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7804, "upload_time": "2019-07-20T20:52:26", "upload_time_iso_8601": "2019-07-20T20:52:26.762573Z", "url": "https://files.pythonhosted.org/packages/ae/d4/c57daeba28e45d5c2a305fe0778d65a8b2891daafc338ea9eaa41b024f73/pytest-it-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4e8ab0d4ce2af487e0319e7acd82b40c", "sha256": "daed0bfeec566916a3f1c6563c634f89e017f3243ac1799347c82807df0f4120"}, "downloads": -1, "filename": "pytest-it-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4e8ab0d4ce2af487e0319e7acd82b40c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7256, "upload_time": "2019-07-21T09:54:21", "upload_time_iso_8601": "2019-07-21T09:54:21.971893Z", "url": "https://files.pythonhosted.org/packages/fd/f5/b41c70fc0a66addaa03b448e641ccf5ea8fb1398b35dc947b404724ad2be/pytest-it-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "de23c3203d813b799cb4403a8ebaf3fa", "sha256": "2b86006369f66e8609d433acead7bc0acf50f9cea994dd56b590bfaff65c58bf"}, "downloads": -1, "filename": "pytest-it-0.1.3.tar.gz", "has_sig": false, "md5_digest": "de23c3203d813b799cb4403a8ebaf3fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7170, "upload_time": "2020-01-22T13:52:23", "upload_time_iso_8601": "2020-01-22T13:52:23.824669Z", "url": "https://files.pythonhosted.org/packages/e8/0d/fa23e2a6c0088dc8379b92995a5936eaeb8067c8a1423e76eab2b9432363/pytest-it-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "5c74bac205d446bf508523c7f26daf20", "sha256": "f6bb7c7ec2c2a35338b972805ab036d1bd77b280bf4efe43a78ee8177a33f6c3"}, "downloads": -1, "filename": "pytest-it-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5c74bac205d446bf508523c7f26daf20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7169, "upload_time": "2020-01-22T13:59:32", "upload_time_iso_8601": "2020-01-22T13:59:32.312857Z", "url": "https://files.pythonhosted.org/packages/27/c9/00f502ee5e918228def3509b0a26e89a44e8e6ac480f557234b3a8c98f39/pytest-it-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c74bac205d446bf508523c7f26daf20", "sha256": "f6bb7c7ec2c2a35338b972805ab036d1bd77b280bf4efe43a78ee8177a33f6c3"}, "downloads": -1, "filename": "pytest-it-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5c74bac205d446bf508523c7f26daf20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7169, "upload_time": "2020-01-22T13:59:32", "upload_time_iso_8601": "2020-01-22T13:59:32.312857Z", "url": "https://files.pythonhosted.org/packages/27/c9/00f502ee5e918228def3509b0a26e89a44e8e6ac480f557234b3a8c98f39/pytest-it-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:03 2020"}