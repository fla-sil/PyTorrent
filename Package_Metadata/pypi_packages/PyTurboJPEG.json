{"info": {"author": "Lilo Huang", "author_email": "kuso.cc@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# PyTurboJPEG\nA Python wrapper of libjpeg-turbo for decoding and encoding JPEG image.\n\n## Prerequisites\n- [libjpeg-turbo](https://github.com/libjpeg-turbo/libjpeg-turbo/releases)\n- [numpy](https://github.com/numpy/numpy)\n\n## Example\n\n```python\nimport cv2\nfrom turbojpeg import TurboJPEG, TJPF_GRAY, TJSAMP_GRAY, TJFLAG_PROGRESSIVE\n\n# specifying library path explicitly\n# jpeg = TurboJPEG(r'D:\\turbojpeg.dll')\n# jpeg = TurboJPEG('/usr/lib64/libturbojpeg.so')\n# jpeg = TurboJPEG('/usr/local/lib/libturbojpeg.dylib')\n\n# using default library installation\njpeg = TurboJPEG()\n\n# decoding input.jpg to BGR array\nin_file = open('input.jpg', 'rb')\nbgr_array = jpeg.decode(in_file.read())\nin_file.close()\ncv2.imshow('bgr_array', bgr_array)\ncv2.waitKey(0)\n\n# direct rescaling 1/2 while decoding input.jpg to BGR array\nin_file = open('input.jpg', 'rb')\nbgr_array_half = jpeg.decode(in_file.read(), scaling_factor=(1, 2))\nin_file.close()\ncv2.imshow('bgr_array_half', bgr_array_half)\ncv2.waitKey(0)\n\n# decoding JPEG image properties\nin_file = open('input.jpg', 'rb')\n(width, height, jpeg_subsample, jpeg_colorspace) = jpeg.decode_header(in_file.read())\nin_file.close()\n\n# encoding BGR array to output.jpg with default settings.\nout_file = open('output.jpg', 'wb')\nout_file.write(jpeg.encode(bgr_array))\nout_file.close()\n\n# encoding BGR array to output.jpg with TJSAMP_GRAY subsample.\nout_file = open('output_gray.jpg', 'wb')\nout_file.write(jpeg.encode(bgr_array, jpeg_subsample=TJSAMP_GRAY))\nout_file.close()\n\n# encoding BGR array to output.jpg with quality level 50. \nout_file = open('output_quality_50.jpg', 'wb')\nout_file.write(jpeg.encode(bgr_array, quality=50))\nout_file.close()\n\n# encoding BGR array to output.jpg with quality level 100 and progressive entropy coding.\nout_file = open('output_quality_100_progressive.jpg', 'wb')\nout_file.write(jpeg.encode(bgr_array, quality=100, flags=TJFLAG_PROGRESSIVE))\nout_file.close()\n\n# decoding input.jpg to grayscale array\nin_file = open('input.jpg', 'rb')\ngray_array = jpeg.decode(in_file.read(), pixel_format=TJPF_GRAY)\nin_file.close()\ncv2.imshow('gray_array', gray_array)\ncv2.waitKey(0)\n\n# scale with quality but leaves out the color conversion step\nin_file = open('input.jpg', 'rb')\nout_file = open('scaled_output.jpg', 'wb')\nout_file.write(jpeg.scale_with_quality(in_file.read(), scaling_factor=(1, 4), quality=70))\nout_file.close()\nin_file.close()\n\n# lossless crop image\nout_file = open('lossless_cropped_output.jpg', 'wb')\nout_file.write(jpeg.crop(open('input.jpg', 'rb').read(), 8, 8, 320, 240))\nout_file.close()\n```\n\n## Installation\n\n### macOS\n- brew install jpeg-turbo\n- pip install -U git+git://github.com/lilohuang/PyTurboJPEG.git\n\n### Windows \n- Download [libjpeg-turbo official installer](https://sourceforge.net/projects/libjpeg-turbo/files) \n- pip install -U git+git://github.com/lilohuang/PyTurboJPEG.git\n\n### Linux\n- Download [libjpeg-turbo.repo](https://libjpeg-turbo.org/pmwiki/uploads/Downloads/libjpeg-turbo.repo) to /etc/yum.repos.d/\n- sudo yum install libjpeg-turbo-official\n- pip install -U git+git://github.com/lilohuang/PyTurboJPEG.git\n\n\n## Benchmark \n\n### macOS\n- macOS Sierra 10.12.6\n- Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz\n- opencv-python 3.4.0.12 (pre-built)\n- turbo-jpeg 1.5.3 (pre-built)\n\n| Function              | Wall-clock time |\n| ----------------------|-----------------|\n| cv2.imdecode() \u00a0 \u00a0 \u00a0  |   0.528 sec \u00a0   |\n| TurboJPEG.decode()    |   0.191 sec     |\n| cv2.imencode() \u00a0 \u00a0 \u00a0  |   0.875 sec \u00a0   |\n| TurboJPEG.encode()    |   0.176 sec     |\n\n### Windows \n- Windows 7 Ultimate 64-bit\n- Intel(R) Xeon(R) E3-1276 v3 CPU @ 3.60 GHz\n- opencv-python 3.4.0.12 (pre-built)\n- turbo-jpeg 1.5.3 (pre-built)\n\n| Function              | Wall-clock time |\n| ----------------------|-----------------|\n| cv2.imdecode() \u00a0 \u00a0 \u00a0  |   0.358 sec \u00a0   |\n| TurboJPEG.decode()    |   0.135 sec     |\n| cv2.imencode() \u00a0 \u00a0 \u00a0  |   0.581 sec \u00a0   |\n| TurboJPEG.encode()    |   0.140 sec     |", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lilohuang/PyTurboJPEG", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PyTurboJPEG", "package_url": "https://pypi.org/project/PyTurboJPEG/", "platform": "", "project_url": "https://pypi.org/project/PyTurboJPEG/", "project_urls": {"Homepage": "https://github.com/lilohuang/PyTurboJPEG"}, "release_url": "https://pypi.org/project/PyTurboJPEG/1.4.0/", "requires_dist": null, "requires_python": "", "summary": "A Python wrapper of libjpeg-turbo for decoding and encoding JPEG image.", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTurboJPEG</h1>\n<p>A Python wrapper of libjpeg-turbo for decoding and encoding JPEG image.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li><a href=\"https://github.com/libjpeg-turbo/libjpeg-turbo/releases\" rel=\"nofollow\">libjpeg-turbo</a></li>\n<li><a href=\"https://github.com/numpy/numpy\" rel=\"nofollow\">numpy</a></li>\n</ul>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">turbojpeg</span> <span class=\"kn\">import</span> <span class=\"n\">TurboJPEG</span><span class=\"p\">,</span> <span class=\"n\">TJPF_GRAY</span><span class=\"p\">,</span> <span class=\"n\">TJSAMP_GRAY</span><span class=\"p\">,</span> <span class=\"n\">TJFLAG_PROGRESSIVE</span>\n\n<span class=\"c1\"># specifying library path explicitly</span>\n<span class=\"c1\"># jpeg = TurboJPEG(r'D:\\turbojpeg.dll')</span>\n<span class=\"c1\"># jpeg = TurboJPEG('/usr/lib64/libturbojpeg.so')</span>\n<span class=\"c1\"># jpeg = TurboJPEG('/usr/local/lib/libturbojpeg.dylib')</span>\n\n<span class=\"c1\"># using default library installation</span>\n<span class=\"n\">jpeg</span> <span class=\"o\">=</span> <span class=\"n\">TurboJPEG</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># decoding input.jpg to BGR array</span>\n<span class=\"n\">in_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'input.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">bgr_array</span> <span class=\"o\">=</span> <span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'bgr_array'</span><span class=\"p\">,</span> <span class=\"n\">bgr_array</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># direct rescaling 1/2 while decoding input.jpg to BGR array</span>\n<span class=\"n\">in_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'input.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">bgr_array_half</span> <span class=\"o\">=</span> <span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">scaling_factor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'bgr_array_half'</span><span class=\"p\">,</span> <span class=\"n\">bgr_array_half</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># decoding JPEG image properties</span>\n<span class=\"n\">in_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'input.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">jpeg_subsample</span><span class=\"p\">,</span> <span class=\"n\">jpeg_colorspace</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">decode_header</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># encoding BGR array to output.jpg with default settings.</span>\n<span class=\"n\">out_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">bgr_array</span><span class=\"p\">))</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># encoding BGR array to output.jpg with TJSAMP_GRAY subsample.</span>\n<span class=\"n\">out_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output_gray.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">bgr_array</span><span class=\"p\">,</span> <span class=\"n\">jpeg_subsample</span><span class=\"o\">=</span><span class=\"n\">TJSAMP_GRAY</span><span class=\"p\">))</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># encoding BGR array to output.jpg with quality level 50. </span>\n<span class=\"n\">out_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output_quality_50.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">bgr_array</span><span class=\"p\">,</span> <span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">))</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># encoding BGR array to output.jpg with quality level 100 and progressive entropy coding.</span>\n<span class=\"n\">out_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output_quality_100_progressive.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">bgr_array</span><span class=\"p\">,</span> <span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">TJFLAG_PROGRESSIVE</span><span class=\"p\">))</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># decoding input.jpg to grayscale array</span>\n<span class=\"n\">in_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'input.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">gray_array</span> <span class=\"o\">=</span> <span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">pixel_format</span><span class=\"o\">=</span><span class=\"n\">TJPF_GRAY</span><span class=\"p\">)</span>\n<span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'gray_array'</span><span class=\"p\">,</span> <span class=\"n\">gray_array</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># scale with quality but leaves out the color conversion step</span>\n<span class=\"n\">in_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'input.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">out_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'scaled_output.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">scale_with_quality</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">scaling_factor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"mi\">70</span><span class=\"p\">))</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">in_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># lossless crop image</span>\n<span class=\"n\">out_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'lossless_cropped_output.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">jpeg</span><span class=\"o\">.</span><span class=\"n\">crop</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'input.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">320</span><span class=\"p\">,</span> <span class=\"mi\">240</span><span class=\"p\">))</span>\n<span class=\"n\">out_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Installation</h2>\n<h3>macOS</h3>\n<ul>\n<li>brew install jpeg-turbo</li>\n<li>pip install -U git+git://github.com/lilohuang/PyTurboJPEG.git</li>\n</ul>\n<h3>Windows</h3>\n<ul>\n<li>Download <a href=\"https://sourceforge.net/projects/libjpeg-turbo/files\" rel=\"nofollow\">libjpeg-turbo official installer</a></li>\n<li>pip install -U git+git://github.com/lilohuang/PyTurboJPEG.git</li>\n</ul>\n<h3>Linux</h3>\n<ul>\n<li>Download <a href=\"https://libjpeg-turbo.org/pmwiki/uploads/Downloads/libjpeg-turbo.repo\" rel=\"nofollow\">libjpeg-turbo.repo</a> to /etc/yum.repos.d/</li>\n<li>sudo yum install libjpeg-turbo-official</li>\n<li>pip install -U git+git://github.com/lilohuang/PyTurboJPEG.git</li>\n</ul>\n<h2>Benchmark</h2>\n<h3>macOS</h3>\n<ul>\n<li>macOS Sierra 10.12.6</li>\n<li>Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz</li>\n<li>opencv-python 3.4.0.12 (pre-built)</li>\n<li>turbo-jpeg 1.5.3 (pre-built)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Wall-clock time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cv2.imdecode() \u00a0 \u00a0 \u00a0</td>\n<td>0.528 sec \u00a0</td>\n</tr>\n<tr>\n<td>TurboJPEG.decode()</td>\n<td>0.191 sec</td>\n</tr>\n<tr>\n<td>cv2.imencode() \u00a0 \u00a0 \u00a0</td>\n<td>0.875 sec \u00a0</td>\n</tr>\n<tr>\n<td>TurboJPEG.encode()</td>\n<td>0.176 sec</td>\n</tr></tbody></table>\n<h3>Windows</h3>\n<ul>\n<li>Windows 7 Ultimate 64-bit</li>\n<li>Intel(R) Xeon(R) E3-1276 v3 CPU @ 3.60 GHz</li>\n<li>opencv-python 3.4.0.12 (pre-built)</li>\n<li>turbo-jpeg 1.5.3 (pre-built)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Wall-clock time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cv2.imdecode() \u00a0 \u00a0 \u00a0</td>\n<td>0.358 sec \u00a0</td>\n</tr>\n<tr>\n<td>TurboJPEG.decode()</td>\n<td>0.135 sec</td>\n</tr>\n<tr>\n<td>cv2.imencode() \u00a0 \u00a0 \u00a0</td>\n<td>0.581 sec \u00a0</td>\n</tr>\n<tr>\n<td>TurboJPEG.encode()</td>\n<td>0.140 sec</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6810242, "releases": {"1.1.5": [{"comment_text": "", "digests": {"md5": "bdd17f5d66979892420479f779f90c35", "sha256": "f7661878dcca56470b3ff3b961e4d9fef16c99a1d1fa73633b3760c42b5420ae"}, "downloads": -1, "filename": "PyTurboJPEG-1.1.5.tar.gz", "has_sig": false, "md5_digest": "bdd17f5d66979892420479f779f90c35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4793, "upload_time": "2019-04-29T09:42:11", "upload_time_iso_8601": "2019-04-29T09:42:11.806611Z", "url": "https://files.pythonhosted.org/packages/e0/c3/910cc3093c7a7b793eddce268a0fa16aea3e0fdfacab2f71a4a48777f1a0/PyTurboJPEG-1.1.5.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "aecd5cad9c033e564dfa782f14c5794c", "sha256": "1d161eb29a6120d84cbadfb05654ac36da030f5bb5993e68abe9478183c69224"}, "downloads": -1, "filename": "PyTurboJPEG-1.2.0.tar.gz", "has_sig": false, "md5_digest": "aecd5cad9c033e564dfa782f14c5794c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5283, "upload_time": "2019-07-06T08:26:03", "upload_time_iso_8601": "2019-07-06T08:26:03.604989Z", "url": "https://files.pythonhosted.org/packages/be/8e/69ec3046d300bb449ac395a4d97bfad94e8e9519622df63454f1cf9bc94c/PyTurboJPEG-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "c8b47896425a09d596da5b4f137c533b", "sha256": "19b10798475b5570fd9a66dca64fb0c36ab11965787dc0411d7535ae1f1977ca"}, "downloads": -1, "filename": "PyTurboJPEG-1.3.0.tar.gz", "has_sig": false, "md5_digest": "c8b47896425a09d596da5b4f137c533b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5340, "upload_time": "2019-09-23T12:37:59", "upload_time_iso_8601": "2019-09-23T12:37:59.939145Z", "url": "https://files.pythonhosted.org/packages/00/83/6e66fc8250c675544a8352c83dc39c0cb5e39c4e29a86a01263683c2dad8/PyTurboJPEG-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "1a286a897f556477071325307ecdf17f", "sha256": "ad88e86160ab92210b59eaeac6ed5041b8b4e4c56cad2c00734a8100911b8de5"}, "downloads": -1, "filename": "PyTurboJPEG-1.3.1.tar.gz", "has_sig": false, "md5_digest": "1a286a897f556477071325307ecdf17f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5337, "upload_time": "2019-10-20T02:27:59", "upload_time_iso_8601": "2019-10-20T02:27:59.713837Z", "url": "https://files.pythonhosted.org/packages/c5/40/bc4aede28f6c922bcab9808a80982a69381df6e9b318dfa691fc6fe2eb36/PyTurboJPEG-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "4706396bcf32987d242a618fb7d20489", "sha256": "478597de41a145717f10835e123b3cc74249e6595924b5fa848fb253787cb3d3"}, "downloads": -1, "filename": "PyTurboJPEG-1.3.2.tar.gz", "has_sig": false, "md5_digest": "4706396bcf32987d242a618fb7d20489", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5421, "upload_time": "2019-10-26T02:59:07", "upload_time_iso_8601": "2019-10-26T02:59:07.222243Z", "url": "https://files.pythonhosted.org/packages/0d/88/4226f8eb3b4b5e950b4d077b684ddec68bdd7ad90b931bb46f51c2270b2c/PyTurboJPEG-1.3.2.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "3dd2629a1da4a6a2eef9e4019b961fce", "sha256": "9decac2028d246a300bb2b84021f28f2865fba39374993bab1651c0a27aab0bd"}, "downloads": -1, "filename": "PyTurboJPEG-1.4.0.tar.gz", "has_sig": false, "md5_digest": "3dd2629a1da4a6a2eef9e4019b961fce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6710, "upload_time": "2020-03-14T05:22:28", "upload_time_iso_8601": "2020-03-14T05:22:28.767783Z", "url": "https://files.pythonhosted.org/packages/1e/62/954b715c14919ef331f593da913353f3902703c23c3b41ff7b2f9c3a1b4d/PyTurboJPEG-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3dd2629a1da4a6a2eef9e4019b961fce", "sha256": "9decac2028d246a300bb2b84021f28f2865fba39374993bab1651c0a27aab0bd"}, "downloads": -1, "filename": "PyTurboJPEG-1.4.0.tar.gz", "has_sig": false, "md5_digest": "3dd2629a1da4a6a2eef9e4019b961fce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6710, "upload_time": "2020-03-14T05:22:28", "upload_time_iso_8601": "2020-03-14T05:22:28.767783Z", "url": "https://files.pythonhosted.org/packages/1e/62/954b715c14919ef331f593da913353f3902703c23c3b41ff7b2f9c3a1b4d/PyTurboJPEG-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:54 2020"}