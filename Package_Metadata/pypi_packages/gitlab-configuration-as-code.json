{"info": {"author": "Mateusz Filipowicz", "author_email": "mateusz.filipowicz@roche.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![Build Status](https://travis-ci.org/Roche/gitlab-configuration-as-code.svg?branch=master)](https://travis-ci.org/Roche/gitlab-configuration-as-code)\n[![Docker Pull count](https://img.shields.io/docker/pulls/hoffmannlaroche/gcasc)](https://hub.docker.com/r/hoffmannlaroche/gcasc)\n[![PyPI](https://img.shields.io/pypi/v/gitlab-configuration-as-code)](https://pypi.org/project/gitlab-configuration-as-code)\n[![Documentation Status](https://readthedocs.org/projects/gitlab-configuration-as-code/badge/?version=latest)](https://gitlab-configuration-as-code.readthedocs.io/en/latest/?badge=latest)\n[![Last Commit](https://img.shields.io/github/last-commit/Roche/gitlab-configuration-as-code)]()\n[![Python versions](https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8-blue)]()\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue)](LICENSE)\n\n# GitLab Configuration as Code (*GCasC*)\n\nManage GitLab configuration as code to make it easily manageable, traceable and reproducible.\n\n### Table of Contents\n\n* [Introduction](#introduction)\n* [Quick start](#quick-start)\n   * [Configure client](#configure-client)\n   * [Prepare GitLab configuration](#prepare-gitlab-configuration)\n   * [Run GCasC](#run-gcasc)\n       * [CLI](#cli)\n       * [Docker image](#docker-image)\n   * [Examples](#examples)\n* [Building](#building)\n   * [Docker image](#docker-image-1)\n   * [Python package](#python-package)\n* [Testing](#testing)\n* [Contribution](#contribution)\n* [License](#license)\n\n## Introduction\n\nWhen configuring your GitLab instance, part of the settings you put in [Omnibus](https://docs.gitlab.com/12.7/omnibus/settings/README.html)\nor [Helm Chart](https://docs.gitlab.com/charts/charts/) configuration, and the rest you configure through GitLab UI\nor [API](https://docs.gitlab.com/12.7/ee/api/settings.html). Due to tons of configuration options in UI,\nmaking GitLab work as you intend is a complex process.\n\nWe intend to let you automate things you do through now UI in a simple way. The Configuration as Code\nhas been designed to configure GitLab based on human-readable declarative configuration files written in Yaml.\nWriting such a file should be feasible without being a GitLab expert, just translating into code a configuration\nprocess one is used to executing in the web UI.\n\n_GCasC_ offers a functionality to configure:\n* [appearance](https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration/appearance.html)\n* [application settings](https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration/application_settings.html)\n* [features](https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration/features.html)\n* [license](https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration/license.html)\n* ... more coming soon!\n\nIt gives you also a way to:\n* include external files or other Yamls using `!include` directive\n* inject environment variables into configuration using `!env` directive\ninto your Yaml configuration.\n\u00a0\nVisit [our documentation site](https://gitlab-configuration-as-code.readthedocs.io/) for detailed information on how to use it.\n\nConfiguring your GitLab instance is as simple as this:\n```yaml\nappearance:\n  title: \"Your GitLab instance title\"\n  logo: \"http://path-to-your-logo/logo.png\"\n\nsettings:\n  elasticsearch:\n    url: http://elasticsearch.mygitlab.com\n    username: !env ELASTICSEARCH_USERNAME\n    password: !env ELASTICSEARCH_PASSWORD\n  recaptcha_enabled: yes\n  terms: '# Terms of Service\\n\\n *GitLab rocks*!!'\n  plantuml:\n    enabled: true\n    url: 'http://plantuml.url'\n\nfeatures:\n  - name: sourcegraph\n    value: true\n    groups:\n      - mygroup1\n    projects:\n      - mygroup2/myproject\n    users:\n      - myuser\n\nlicense:\n  starts_at: 2019-11-17\n  expires_at: 2019-12-17\n  plan: premium\n  user_limit: 30\n  data: !include gitlab.lic\n```\n\n**Note:** GCasC supports only Python 3+. Because Python 2.7 end of life is January 1st, 2020 we do not consider support\nfor Python 2.\n\n## Quick start\n\nHere you will learn how to quickly start with _GCasC_.\n\n**Important!** Any execution of _GCasC_ may override properties you define in your Yaml files. Don't try it directly\non your production environment.\n\nVisit [our documentation site](https://gitlab-configuration-as-code.readthedocs.io/) for detailed information on how to use it.\n\n### Configure client\n\nYou can configure client in two ways:\n\n* using configuration file:\n    ```\n    [global]\n    url = https://gitlab.yourdomain.com\n    ssl_verify = true\n    timeout = 5\n    private_token = <personal_access_token>\n    api_version = 4\n    ```\n    By default _GCasC_ is trying to find client configuration file in following paths:\n    ```\n    \"/etc/python-gitlab.cfg\",\n    \"/etc/gitlab.cfg\",\n    \"~/.python-gitlab.cfg\",\n    \"~/.gitlab.cfg\",\n    ```\n\u00a0\n    You can provide a path to your configuration file in `GITLAB_CLIENT_CONFIG_FILE` environment variable.\n\n* using environment variables:\n    ```bash\n    GITLAB_CLIENT_URL=<gitlab_url> # path to GitLab, default: https://gitlab.com\n    GITLAB_CLIENT_API_VERSION=<gitlab_api_version> # GitLab API version, default: 4\n    GITLAB_CLIENT_TOKEN=<personal_access_token> # GitLab personal access token\n    GITLAB_CLIENT_SSL_VERIFY=<ssl_verify> # Flag if SSL certificate should be verified, default: true\n    ```\n\nYou can combine both methods and configuration settings will be searched in the following order:\n\n* configuration file\n* environment variables (due to limitations in `python-gitlab` if using configuration file only `GITLAB_CLIENT_TOKEN`\n  environment variable will be used)\n\nPersonal access token is mandatory in any client configuration approach and you can configure your it by following\n[these instructions](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html)\n\nAdditionally you can customize HTTP session to enable mutual TLS authentication. To configure this, you should\nprovide two additional environment variables:\n```bash\nGITLAB_CLIENT_CONFIG_FILE=<path_to_client_certificate>\nGITLAB_CLIENT_KEY=<path_to_client_key>\n```\n\n### Prepare GitLab configuration\n\nGitLab configuration must be defined in Yaml file. You can provide a configuration in a single file, or you can\nsplit it into multiple Yaml files and inject them.\n\nFor information how to prepare GitLab configuration Yaml file visit\n[our documentation site](https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration).\n\nFor `settings` configuration, which defines [Application Settings](https://docs.gitlab.com/12.7/ee/api/settings.html),\nthe structure is flexible. For example\n\n```yaml\nsettings:\n  elasticsearch:\n    url: http://elasticsearch.mygitlab.com\n    username: elastic_user\n    password: elastic_password\n```\n\nand\n\u00a0\n```yaml\nsettings:\n  elasticsearch_url: http://elasticsearch.mygitlab.com\n  elasticsearch_username: elastic_user\n  elasticsearch_password: elastic_password\n```\nare exactly the same and match `elasticsearch_url`, `elasticsearch_username` and `elasticsearch_password` settings.\nThis means you can flexibly structure your configuration Yaml, where a map child keys are prefixed by parent key (here\n`elasticsearch` parent key was a prefix for `url`, `username` and `password` keys). You only need to follow available\n[Application Settings](https://docs.gitlab.com/12.7/ee/api/settings.html).\n\nYou can adjust your Yamls by splitting them into multiple or injecting environment variables into certain values using\n`!include` or `!env` directives respectively. Example is shown below:\n\n```yaml\nsettings:\n  elasticsearch:\n    url: http://elasticsearch.mygitlab.com\n    username: !env ELASTICSEARCH_USERNAME\n    password: !env ELASTICSEARCH_PASSWORD\n  terms: !include tos.md\n\nlicense: !include license.yml\n```\n\nwhere:\n\n* `settings.elasticsearch.username` and `settings.elasticsearch.password` are injected from environment variables\n`ELASTICSEARCH_USERNAME` and `ELASTICSEARCH_PASSWORD` respectively\n\n* `settings.terms` and `license` are injected from `tos.md` plain text file and `license.yml` Yaml file respectively.\nIn this scenario, your `license.yml` may look like this:\n```yaml\nstarts_at: 2019-11-17\nexpires_at: 2019-12-17\nplan: premium\nuser_limit: 30\ndata: !include gitlab.lic\n```\n\n### Run GCasC\n\nTo run _GCasC_ you can leverage CLI or Docker image. _Docker image is a preferred way_, because it is simple\nand does not require from you installing any additional libraries. Also, Docker image was designed that it can be\neasily used in your CI/CD pipelines.\n\nWhen running locally, you may benefit from running _GCasC_ in TEST mode (default mode is `APPLY`), where no changes\nwill be applied, but validation will be performed and differences will be logged. Just set `GITLAB_MODE`\nenvironment variable to `TEST`.\n```bash\nexport GITLAB_MODE=TEST\n```\n\n#### CLI\n\n_GCasC_ library is available in [PyPI](https://pypi.org/project/gitlab-configuration-as-code/).\n\nTo install CLI run `pip install gitlab-configuration-as-code`. Then you can simply execute\n```bash\ngcasc\n```\n\n//TODO add more information on CLI usage\n\nCurrently, CLI is limited and does not support passing any arguments to it, but behavior can only be configured\nusing environment variables. Support for CLI arguments may appear in future releases.\n\n#### Docker image\n\nImage is available in [Docker Hub](https://hub.docker.com/r/hoffmannlaroche/gcasc).\n\n_GCasC_ Docker image working directory is `/workspace`. Thus you can quickly launch `gcasc` with:\n```bash\ndocker run -v $(pwd):/workspace hoffmannlaroche/gcasc\n```\nIt will try to find both GitLab client configuration and GitLab configuration in `/workspace` directory. You can modify\nthe behavior by passing environment variables:\n* `GITLAB_CLIENT_CONFIG_FILE` to provide path to GitLab client configuration file\n* `GITLAB_CONFIG_FILE` to provide a path to GitLab configuration file\n\n```bash\ndocker run -e GITLAB_CLIENT_CONFIG_FILE=/gitlab/client.cfg -e GITLAB_CONFIG_FILE=/gitlab/config.yml\n-v $(pwd):/gitlab hoffmannlaroche/gcasc\n```\n\nYou can also configure a GitLab client using environment variables. More details about the configuration of GitLab client\nare available [in this documentation](https://gitlab-configuration-as-code.readthedocs.io/en/latest/client.html).\n\n### Examples\n\nWe provide a few examples to give you a quick starting place to use _GCasC_. They can be found in [`examples`](examples) directory.\n1. [`gitlab.cfg`](examples/gitlab.cfg) is example GitLab client file configuration.\n2. [`basic`](examples/basic/gitlab.yml) is an example GitLab configuration using a single configuration file.\n3. [`environment_variables`](examples/environment_variables) shows how environment variables can be injected\ninto GitLab configuration file using `!env` directive.\n4. [`modularized`](examples/modularized) shows how you can split single GitLab configuration file into smaller\nand inject files containing static text using `!include` directive.\n\n## Building\n\n### Docker image\n\nUse `make` to build a basic Docker image quickly.\n```bash\nmake docker-build\n```\nWhen using `make` you can additionally pass `DOCKER_IMAGE_NAME` to change default `gcasc:latest` to another image name:\n```bash\nmake docker-build DOCKER_IMAGE_NAME=mygcasc:1.0\n```\n\nTo get more control over builds you can use `docker build` directly:\n```bash\ndocker builds -t gcasc[:TAG] .\n```\n\nDockerfile comes with two build arguments you may use to customize your image by providing `--build-arg` parameter\nto `docker build` command:\n* `GCASC_PATH` defines the path where _GCasC_ library will be copied. Defaults to `/opt/gcasc`.\n* `WORKSPACE` defines a working directory when you run _GCasC_ image. Defaults to `/workspace`.\n\n### Python package\n\nUse `make` to build source distribution (sdist), Wheel binary distribution and Sphinx documentation.\n```bash\nmake build\n```\nBoth source and Wheel distributions will be placed in `dist` directory. Documentation page will be placed\nin `build/docs` directory.\n\nRemember to run tests before building your distribution!\n\n## Testing\n\nBefore submitting a pull request make sure that the tests still succeed with your change.\nUnit tests run using Github Actions and passing tests are mandatory\nto get merge requests accepted.\n\nYou need to install `tox` to run unit tests locally:\n\n```bash\n# run the unit tests for python 3, python 2, and the flake8 tests:\ntox\n\n# run tests in one environment only:\ntox -e py37\n\n# run flake8 linter and black code formatter\ntox -e flake\n\n# run black code formatter\ntox -e black\n```\n\nInstead of using `tox` directly, it is recommended to use `make`:\n```bash\n# run tests\nmake test\n\n# run flake8 linter and black code formatter\nmake lint\n```\n\n## Contribution\n\nEveryone is warm welcome to contribute!\n\nPlease make sure to read the [Contributing Guide](CONTRIBUTING.md) and [Code of Conduct](CODE_OF_CONDUCT.md)\nbefore making a pull request.\n\n## License\n\nProject is released under [Apache License, Version 2.0 license](LICENSE).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Roche/gitlab-configuration-as-code", "keywords": "gitlab,configuration-as-code", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "gitlab-configuration-as-code", "package_url": "https://pypi.org/project/gitlab-configuration-as-code/", "platform": "", "project_url": "https://pypi.org/project/gitlab-configuration-as-code/", "project_urls": {"Homepage": "https://github.com/Roche/gitlab-configuration-as-code"}, "release_url": "https://pypi.org/project/gitlab-configuration-as-code/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Manage GitLab configuration as code", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/Roche/gitlab-configuration-as-code\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e3d4cd93c6f75ee6f8b5aa7c275211f25fc6d898/68747470733a2f2f7472617669732d63692e6f72672f526f6368652f6769746c61622d636f6e66696775726174696f6e2d61732d636f64652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://hub.docker.com/r/hoffmannlaroche/gcasc\" rel=\"nofollow\"><img alt=\"Docker Pull count\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c8d500aed32b95342c7f63c502cb342dee7cc3e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f686f66666d616e6e6c61726f6368652f6763617363\"></a>\n<a href=\"https://pypi.org/project/gitlab-configuration-as-code\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eaf57ee1474dadde68481e9a089eb247b110ae4e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6769746c61622d636f6e66696775726174696f6e2d61732d636f6465\"></a>\n<a href=\"https://gitlab-configuration-as-code.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08dadcf922db8b1552b05d90c69c4fda905f810e/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6769746c61622d636f6e66696775726174696f6e2d61732d636f64652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"Last Commit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bbad0746205a9c3f7ba994bdba898e6b61ad4598/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f526f6368652f6769746c61622d636f6e66696775726174696f6e2d61732d636f6465\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fbdc39b5b1557575d3fdb5b48e7e40e84984ee9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e36253230253743253230332e37253230253743253230332e382d626c7565\"></a>\n<a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c5e1821eeaf16a437c6782ae43f54d3c024d2c3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d417061636865253230322e302d626c7565\"></a></p>\n<h1>GitLab Configuration as Code (<em>GCasC</em>)</h1>\n<p>Manage GitLab configuration as code to make it easily manageable, traceable and reproducible.</p>\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#introduction\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#quick-start\" rel=\"nofollow\">Quick start</a>\n<ul>\n<li><a href=\"#configure-client\" rel=\"nofollow\">Configure client</a></li>\n<li><a href=\"#prepare-gitlab-configuration\" rel=\"nofollow\">Prepare GitLab configuration</a></li>\n<li><a href=\"#run-gcasc\" rel=\"nofollow\">Run GCasC</a>\n<ul>\n<li><a href=\"#cli\" rel=\"nofollow\">CLI</a></li>\n<li><a href=\"#docker-image\" rel=\"nofollow\">Docker image</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n</ul>\n</li>\n<li><a href=\"#building\" rel=\"nofollow\">Building</a>\n<ul>\n<li><a href=\"#docker-image-1\" rel=\"nofollow\">Docker image</a></li>\n<li><a href=\"#python-package\" rel=\"nofollow\">Python package</a></li>\n</ul>\n</li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#contribution\" rel=\"nofollow\">Contribution</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Introduction</h2>\n<p>When configuring your GitLab instance, part of the settings you put in <a href=\"https://docs.gitlab.com/12.7/omnibus/settings/README.html\" rel=\"nofollow\">Omnibus</a>\nor <a href=\"https://docs.gitlab.com/charts/charts/\" rel=\"nofollow\">Helm Chart</a> configuration, and the rest you configure through GitLab UI\nor <a href=\"https://docs.gitlab.com/12.7/ee/api/settings.html\" rel=\"nofollow\">API</a>. Due to tons of configuration options in UI,\nmaking GitLab work as you intend is a complex process.</p>\n<p>We intend to let you automate things you do through now UI in a simple way. The Configuration as Code\nhas been designed to configure GitLab based on human-readable declarative configuration files written in Yaml.\nWriting such a file should be feasible without being a GitLab expert, just translating into code a configuration\nprocess one is used to executing in the web UI.</p>\n<p><em>GCasC</em> offers a functionality to configure:</p>\n<ul>\n<li><a href=\"https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration/appearance.html\" rel=\"nofollow\">appearance</a></li>\n<li><a href=\"https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration/application_settings.html\" rel=\"nofollow\">application settings</a></li>\n<li><a href=\"https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration/features.html\" rel=\"nofollow\">features</a></li>\n<li><a href=\"https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration/license.html\" rel=\"nofollow\">license</a></li>\n<li>... more coming soon!</li>\n</ul>\n<p>It gives you also a way to:</p>\n<ul>\n<li>include external files or other Yamls using <code>!include</code> directive</li>\n<li>inject environment variables into configuration using <code>!env</code> directive\ninto your Yaml configuration.\n\u00a0\nVisit <a href=\"https://gitlab-configuration-as-code.readthedocs.io/\" rel=\"nofollow\">our documentation site</a> for detailed information on how to use it.</li>\n</ul>\n<p>Configuring your GitLab instance is as simple as this:</p>\n<pre><span class=\"nt\">appearance</span><span class=\"p\">:</span>\n  <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Your</span><span class=\"nv\"> </span><span class=\"s\">GitLab</span><span class=\"nv\"> </span><span class=\"s\">instance</span><span class=\"nv\"> </span><span class=\"s\">title\"</span>\n  <span class=\"nt\">logo</span><span class=\"p\">:</span> <span class=\"s\">\"http://path-to-your-logo/logo.png\"</span>\n\n<span class=\"nt\">settings</span><span class=\"p\">:</span>\n  <span class=\"nt\">elasticsearch</span><span class=\"p\">:</span>\n    <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://elasticsearch.mygitlab.com</span>\n    <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"kt\">!env</span> <span class=\"l l-Scalar l-Scalar-Plain\">ELASTICSEARCH_USERNAME</span>\n    <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"kt\">!env</span> <span class=\"l l-Scalar l-Scalar-Plain\">ELASTICSEARCH_PASSWORD</span>\n  <span class=\"nt\">recaptcha_enabled</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">yes</span>\n  <span class=\"nt\">terms</span><span class=\"p\">:</span> <span class=\"s\">'#</span><span class=\"nv\"> </span><span class=\"s\">Terms</span><span class=\"nv\"> </span><span class=\"s\">of</span><span class=\"nv\"> </span><span class=\"s\">Service\\n\\n</span><span class=\"nv\"> </span><span class=\"s\">*GitLab</span><span class=\"nv\"> </span><span class=\"s\">rocks*!!'</span>\n  <span class=\"nt\">plantuml</span><span class=\"p\">:</span>\n    <span class=\"nt\">enabled</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"s\">'http://plantuml.url'</span>\n\n<span class=\"nt\">features</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sourcegraph</span>\n    <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">groups</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">mygroup1</span>\n    <span class=\"nt\">projects</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">mygroup2/myproject</span>\n    <span class=\"nt\">users</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">myuser</span>\n\n<span class=\"nt\">license</span><span class=\"p\">:</span>\n  <span class=\"nt\">starts_at</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2019-11-17</span>\n  <span class=\"nt\">expires_at</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2019-12-17</span>\n  <span class=\"nt\">plan</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">premium</span>\n  <span class=\"nt\">user_limit</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">30</span>\n  <span class=\"nt\">data</span><span class=\"p\">:</span> <span class=\"kt\">!include</span> <span class=\"l l-Scalar l-Scalar-Plain\">gitlab.lic</span>\n</pre>\n<p><strong>Note:</strong> GCasC supports only Python 3+. Because Python 2.7 end of life is January 1st, 2020 we do not consider support\nfor Python 2.</p>\n<h2>Quick start</h2>\n<p>Here you will learn how to quickly start with <em>GCasC</em>.</p>\n<p><strong>Important!</strong> Any execution of <em>GCasC</em> may override properties you define in your Yaml files. Don't try it directly\non your production environment.</p>\n<p>Visit <a href=\"https://gitlab-configuration-as-code.readthedocs.io/\" rel=\"nofollow\">our documentation site</a> for detailed information on how to use it.</p>\n<h3>Configure client</h3>\n<p>You can configure client in two ways:</p>\n<ul>\n<li>using configuration file:\n<pre><code>[global]\nurl = https://gitlab.yourdomain.com\nssl_verify = true\ntimeout = 5\nprivate_token = &lt;personal_access_token&gt;\napi_version = 4\n</code></pre>\nBy default <em>GCasC</em> is trying to find client configuration file in following paths:\n<pre><code>\"/etc/python-gitlab.cfg\",\n\"/etc/gitlab.cfg\",\n\"~/.python-gitlab.cfg\",\n\"~/.gitlab.cfg\",\n</code></pre>\n</li>\n</ul>\n<p>\u00a0\nYou can provide a path to your configuration file in <code>GITLAB_CLIENT_CONFIG_FILE</code> environment variable.</p>\n<ul>\n<li>using environment variables:\n<pre><span class=\"nv\">GITLAB_CLIENT_URL</span><span class=\"o\">=</span>&lt;gitlab_url&gt; <span class=\"c1\"># path to GitLab, default: https://gitlab.com</span>\n<span class=\"nv\">GITLAB_CLIENT_API_VERSION</span><span class=\"o\">=</span>&lt;gitlab_api_version&gt; <span class=\"c1\"># GitLab API version, default: 4</span>\n<span class=\"nv\">GITLAB_CLIENT_TOKEN</span><span class=\"o\">=</span>&lt;personal_access_token&gt; <span class=\"c1\"># GitLab personal access token</span>\n<span class=\"nv\">GITLAB_CLIENT_SSL_VERIFY</span><span class=\"o\">=</span>&lt;ssl_verify&gt; <span class=\"c1\"># Flag if SSL certificate should be verified, default: true</span>\n</pre>\n</li>\n</ul>\n<p>You can combine both methods and configuration settings will be searched in the following order:</p>\n<ul>\n<li>configuration file</li>\n<li>environment variables (due to limitations in <code>python-gitlab</code> if using configuration file only <code>GITLAB_CLIENT_TOKEN</code>\nenvironment variable will be used)</li>\n</ul>\n<p>Personal access token is mandatory in any client configuration approach and you can configure your it by following\n<a href=\"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html\" rel=\"nofollow\">these instructions</a></p>\n<p>Additionally you can customize HTTP session to enable mutual TLS authentication. To configure this, you should\nprovide two additional environment variables:</p>\n<pre><span class=\"nv\">GITLAB_CLIENT_CONFIG_FILE</span><span class=\"o\">=</span>&lt;path_to_client_certificate&gt;\n<span class=\"nv\">GITLAB_CLIENT_KEY</span><span class=\"o\">=</span>&lt;path_to_client_key&gt;\n</pre>\n<h3>Prepare GitLab configuration</h3>\n<p>GitLab configuration must be defined in Yaml file. You can provide a configuration in a single file, or you can\nsplit it into multiple Yaml files and inject them.</p>\n<p>For information how to prepare GitLab configuration Yaml file visit\n<a href=\"https://gitlab-configuration-as-code.readthedocs.io/en/latest/configuration\" rel=\"nofollow\">our documentation site</a>.</p>\n<p>For <code>settings</code> configuration, which defines <a href=\"https://docs.gitlab.com/12.7/ee/api/settings.html\" rel=\"nofollow\">Application Settings</a>,\nthe structure is flexible. For example</p>\n<pre><span class=\"nt\">settings</span><span class=\"p\">:</span>\n  <span class=\"nt\">elasticsearch</span><span class=\"p\">:</span>\n    <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://elasticsearch.mygitlab.com</span>\n    <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">elastic_user</span>\n    <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">elastic_password</span>\n</pre>\n<p>and\n\u00a0</p>\n<pre><span class=\"nt\">settings</span><span class=\"p\">:</span>\n  <span class=\"nt\">elasticsearch_url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://elasticsearch.mygitlab.com</span>\n  <span class=\"nt\">elasticsearch_username</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">elastic_user</span>\n  <span class=\"nt\">elasticsearch_password</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">elastic_password</span>\n</pre>\n<p>are exactly the same and match <code>elasticsearch_url</code>, <code>elasticsearch_username</code> and <code>elasticsearch_password</code> settings.\nThis means you can flexibly structure your configuration Yaml, where a map child keys are prefixed by parent key (here\n<code>elasticsearch</code> parent key was a prefix for <code>url</code>, <code>username</code> and <code>password</code> keys). You only need to follow available\n<a href=\"https://docs.gitlab.com/12.7/ee/api/settings.html\" rel=\"nofollow\">Application Settings</a>.</p>\n<p>You can adjust your Yamls by splitting them into multiple or injecting environment variables into certain values using\n<code>!include</code> or <code>!env</code> directives respectively. Example is shown below:</p>\n<pre><span class=\"nt\">settings</span><span class=\"p\">:</span>\n  <span class=\"nt\">elasticsearch</span><span class=\"p\">:</span>\n    <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://elasticsearch.mygitlab.com</span>\n    <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"kt\">!env</span> <span class=\"l l-Scalar l-Scalar-Plain\">ELASTICSEARCH_USERNAME</span>\n    <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"kt\">!env</span> <span class=\"l l-Scalar l-Scalar-Plain\">ELASTICSEARCH_PASSWORD</span>\n  <span class=\"nt\">terms</span><span class=\"p\">:</span> <span class=\"kt\">!include</span> <span class=\"l l-Scalar l-Scalar-Plain\">tos.md</span>\n\n<span class=\"nt\">license</span><span class=\"p\">:</span> <span class=\"kt\">!include</span> <span class=\"l l-Scalar l-Scalar-Plain\">license.yml</span>\n</pre>\n<p>where:</p>\n<ul>\n<li>\n<p><code>settings.elasticsearch.username</code> and <code>settings.elasticsearch.password</code> are injected from environment variables\n<code>ELASTICSEARCH_USERNAME</code> and <code>ELASTICSEARCH_PASSWORD</code> respectively</p>\n</li>\n<li>\n<p><code>settings.terms</code> and <code>license</code> are injected from <code>tos.md</code> plain text file and <code>license.yml</code> Yaml file respectively.\nIn this scenario, your <code>license.yml</code> may look like this:</p>\n</li>\n</ul>\n<pre><span class=\"nt\">starts_at</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2019-11-17</span>\n<span class=\"nt\">expires_at</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2019-12-17</span>\n<span class=\"nt\">plan</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">premium</span>\n<span class=\"nt\">user_limit</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">30</span>\n<span class=\"nt\">data</span><span class=\"p\">:</span> <span class=\"kt\">!include</span> <span class=\"l l-Scalar l-Scalar-Plain\">gitlab.lic</span>\n</pre>\n<h3>Run GCasC</h3>\n<p>To run <em>GCasC</em> you can leverage CLI or Docker image. <em>Docker image is a preferred way</em>, because it is simple\nand does not require from you installing any additional libraries. Also, Docker image was designed that it can be\neasily used in your CI/CD pipelines.</p>\n<p>When running locally, you may benefit from running <em>GCasC</em> in TEST mode (default mode is <code>APPLY</code>), where no changes\nwill be applied, but validation will be performed and differences will be logged. Just set <code>GITLAB_MODE</code>\nenvironment variable to <code>TEST</code>.</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">GITLAB_MODE</span><span class=\"o\">=</span>TEST\n</pre>\n<h4>CLI</h4>\n<p><em>GCasC</em> library is available in <a href=\"https://pypi.org/project/gitlab-configuration-as-code/\" rel=\"nofollow\">PyPI</a>.</p>\n<p>To install CLI run <code>pip install gitlab-configuration-as-code</code>. Then you can simply execute</p>\n<pre>gcasc\n</pre>\n<p>//TODO add more information on CLI usage</p>\n<p>Currently, CLI is limited and does not support passing any arguments to it, but behavior can only be configured\nusing environment variables. Support for CLI arguments may appear in future releases.</p>\n<h4>Docker image</h4>\n<p>Image is available in <a href=\"https://hub.docker.com/r/hoffmannlaroche/gcasc\" rel=\"nofollow\">Docker Hub</a>.</p>\n<p><em>GCasC</em> Docker image working directory is <code>/workspace</code>. Thus you can quickly launch <code>gcasc</code> with:</p>\n<pre>docker run -v <span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>:/workspace hoffmannlaroche/gcasc\n</pre>\n<p>It will try to find both GitLab client configuration and GitLab configuration in <code>/workspace</code> directory. You can modify\nthe behavior by passing environment variables:</p>\n<ul>\n<li><code>GITLAB_CLIENT_CONFIG_FILE</code> to provide path to GitLab client configuration file</li>\n<li><code>GITLAB_CONFIG_FILE</code> to provide a path to GitLab configuration file</li>\n</ul>\n<pre>docker run -e <span class=\"nv\">GITLAB_CLIENT_CONFIG_FILE</span><span class=\"o\">=</span>/gitlab/client.cfg -e <span class=\"nv\">GITLAB_CONFIG_FILE</span><span class=\"o\">=</span>/gitlab/config.yml\n-v <span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>:/gitlab hoffmannlaroche/gcasc\n</pre>\n<p>You can also configure a GitLab client using environment variables. More details about the configuration of GitLab client\nare available <a href=\"https://gitlab-configuration-as-code.readthedocs.io/en/latest/client.html\" rel=\"nofollow\">in this documentation</a>.</p>\n<h3>Examples</h3>\n<p>We provide a few examples to give you a quick starting place to use <em>GCasC</em>. They can be found in <a href=\"examples\" rel=\"nofollow\"><code>examples</code></a> directory.</p>\n<ol>\n<li><a href=\"examples/gitlab.cfg\" rel=\"nofollow\"><code>gitlab.cfg</code></a> is example GitLab client file configuration.</li>\n<li><a href=\"examples/basic/gitlab.yml\" rel=\"nofollow\"><code>basic</code></a> is an example GitLab configuration using a single configuration file.</li>\n<li><a href=\"examples/environment_variables\" rel=\"nofollow\"><code>environment_variables</code></a> shows how environment variables can be injected\ninto GitLab configuration file using <code>!env</code> directive.</li>\n<li><a href=\"examples/modularized\" rel=\"nofollow\"><code>modularized</code></a> shows how you can split single GitLab configuration file into smaller\nand inject files containing static text using <code>!include</code> directive.</li>\n</ol>\n<h2>Building</h2>\n<h3>Docker image</h3>\n<p>Use <code>make</code> to build a basic Docker image quickly.</p>\n<pre>make docker-build\n</pre>\n<p>When using <code>make</code> you can additionally pass <code>DOCKER_IMAGE_NAME</code> to change default <code>gcasc:latest</code> to another image name:</p>\n<pre>make docker-build <span class=\"nv\">DOCKER_IMAGE_NAME</span><span class=\"o\">=</span>mygcasc:1.0\n</pre>\n<p>To get more control over builds you can use <code>docker build</code> directly:</p>\n<pre>docker builds -t gcasc<span class=\"o\">[</span>:TAG<span class=\"o\">]</span> .\n</pre>\n<p>Dockerfile comes with two build arguments you may use to customize your image by providing <code>--build-arg</code> parameter\nto <code>docker build</code> command:</p>\n<ul>\n<li><code>GCASC_PATH</code> defines the path where <em>GCasC</em> library will be copied. Defaults to <code>/opt/gcasc</code>.</li>\n<li><code>WORKSPACE</code> defines a working directory when you run <em>GCasC</em> image. Defaults to <code>/workspace</code>.</li>\n</ul>\n<h3>Python package</h3>\n<p>Use <code>make</code> to build source distribution (sdist), Wheel binary distribution and Sphinx documentation.</p>\n<pre>make build\n</pre>\n<p>Both source and Wheel distributions will be placed in <code>dist</code> directory. Documentation page will be placed\nin <code>build/docs</code> directory.</p>\n<p>Remember to run tests before building your distribution!</p>\n<h2>Testing</h2>\n<p>Before submitting a pull request make sure that the tests still succeed with your change.\nUnit tests run using Github Actions and passing tests are mandatory\nto get merge requests accepted.</p>\n<p>You need to install <code>tox</code> to run unit tests locally:</p>\n<pre><span class=\"c1\"># run the unit tests for python 3, python 2, and the flake8 tests:</span>\ntox\n\n<span class=\"c1\"># run tests in one environment only:</span>\ntox -e py37\n\n<span class=\"c1\"># run flake8 linter and black code formatter</span>\ntox -e flake\n\n<span class=\"c1\"># run black code formatter</span>\ntox -e black\n</pre>\n<p>Instead of using <code>tox</code> directly, it is recommended to use <code>make</code>:</p>\n<pre><span class=\"c1\"># run tests</span>\nmake <span class=\"nb\">test</span>\n\n<span class=\"c1\"># run flake8 linter and black code formatter</span>\nmake lint\n</pre>\n<h2>Contribution</h2>\n<p>Everyone is warm welcome to contribute!</p>\n<p>Please make sure to read the <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">Contributing Guide</a> and <a href=\"CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a>\nbefore making a pull request.</p>\n<h2>License</h2>\n<p>Project is released under <a href=\"LICENSE\" rel=\"nofollow\">Apache License, Version 2.0 license</a>.</p>\n\n          </div>"}, "last_serial": 7015683, "releases": {"0.1b0": [{"comment_text": "", "digests": {"md5": "cd192e655bc84b4ccd662c6d51101874", "sha256": "eb8f154e4f3beccbcca650c31d3718e37d7da96ca74da63b2a8adfd7ea122cf5"}, "downloads": -1, "filename": "gitlab_configuration_as_code-0.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "cd192e655bc84b4ccd662c6d51101874", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24637, "upload_time": "2019-11-20T15:52:52", "upload_time_iso_8601": "2019-11-20T15:52:52.605803Z", "url": "https://files.pythonhosted.org/packages/2a/47/d8dd8bd499a606e7523ca755fab176a6aad062910910dfcc6eb7c872fc7d/gitlab_configuration_as_code-0.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "272449fc2e9b9a92a1b63d4bc42e50e7", "sha256": "f4344d2c3d8a5adb37e6c101b7c5acf0e48b87c0ac92df24e2a842964b42b72f"}, "downloads": -1, "filename": "gitlab-configuration-as-code-0.1b0.tar.gz", "has_sig": false, "md5_digest": "272449fc2e9b9a92a1b63d4bc42e50e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18939, "upload_time": "2019-11-20T15:28:56", "upload_time_iso_8601": "2019-11-20T15:28:56.874806Z", "url": "https://files.pythonhosted.org/packages/9c/84/0e1fa849a196ceed5ca2762f2d02bd60f63ce0f3b52e29e3d4026caaa99d/gitlab-configuration-as-code-0.1b0.tar.gz", "yanked": false}], "0.1b2": [{"comment_text": "", "digests": {"md5": "80a3720de080ccd0e8c49331cc1ac66b", "sha256": "1a2e4416a6378c4008326aaef782d89e20959d7fc1bbe6e33aaf330775a737da"}, "downloads": -1, "filename": "gitlab_configuration_as_code-0.1b2-py3-none-any.whl", "has_sig": false, "md5_digest": "80a3720de080ccd0e8c49331cc1ac66b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24637, "upload_time": "2019-11-20T15:53:50", "upload_time_iso_8601": "2019-11-20T15:53:50.153596Z", "url": "https://files.pythonhosted.org/packages/f8/77/34d7eb4256346e58def2333fe9bb0304a6604108479d5e50e4aa7e3cac69/gitlab_configuration_as_code-0.1b2-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ba0e7d90498e00be9a5e63c74750f112", "sha256": "f1e3087b4eeb12349a6955648c588c04746a736e9da07fdd78393913a0f89262"}, "downloads": -1, "filename": "gitlab-configuration-as-code-0.2.tar.gz", "has_sig": false, "md5_digest": "ba0e7d90498e00be9a5e63c74750f112", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41598, "upload_time": "2019-11-28T10:19:50", "upload_time_iso_8601": "2019-11-28T10:19:50.305713Z", "url": "https://files.pythonhosted.org/packages/36/ba/09294b9ea4bc2759b89493cce1313610e2e4a3f188e66628a7132bf202c7/gitlab-configuration-as-code-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2da07f934622262943f7589f1b753319", "sha256": "0a8da193f8a09d6a751e35323464f276e4d26d6dadda2b6cefde5301a442b162"}, "downloads": -1, "filename": "gitlab-configuration-as-code-0.3.tar.gz", "has_sig": false, "md5_digest": "2da07f934622262943f7589f1b753319", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42611, "upload_time": "2020-02-04T09:16:53", "upload_time_iso_8601": "2020-02-04T09:16:53.607654Z", "url": "https://files.pythonhosted.org/packages/62/92/55a02a2db74a0c46ca8eeaa2c56cef21201f0dcf303928aced8c2e3f92ed/gitlab-configuration-as-code-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "9a59f48f523ffbeaa18ee36a4908f2be", "sha256": "2a7c260a4c2c93283daec14781e00efbd75a4d5ef06afed0b5d71e3305cde728"}, "downloads": -1, "filename": "gitlab-configuration-as-code-0.3.1.tar.gz", "has_sig": false, "md5_digest": "9a59f48f523ffbeaa18ee36a4908f2be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42677, "upload_time": "2020-02-25T09:35:18", "upload_time_iso_8601": "2020-02-25T09:35:18.962657Z", "url": "https://files.pythonhosted.org/packages/2a/e7/6716e704a9c80402f354f68c0c52577da51de1c7be2c9704bda6c3d70d00/gitlab-configuration-as-code-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "2cc111fa7c598966f3561a3cfe7c8a86", "sha256": "a63ab86d6c8427690f0db60124388f4e08e0358f9332c8a679229a96c53c1a9a"}, "downloads": -1, "filename": "gitlab-configuration-as-code-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2cc111fa7c598966f3561a3cfe7c8a86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45312, "upload_time": "2020-03-13T06:32:10", "upload_time_iso_8601": "2020-03-13T06:32:10.880076Z", "url": "https://files.pythonhosted.org/packages/04/9b/fcc019d78af7d90532b8e12f0a8a6ad73877ac163b369efe97c3aeb89000/gitlab-configuration-as-code-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "825f298349df834fb4438d5ff6df570e", "sha256": "766f58c9e7b975e653e4d2e2e80bcda9c6b82dd8c652a2e5ffd8079eec1a45fd"}, "downloads": -1, "filename": "gitlab-configuration-as-code-0.5.0.tar.gz", "has_sig": false, "md5_digest": "825f298349df834fb4438d5ff6df570e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45400, "upload_time": "2020-04-14T09:00:16", "upload_time_iso_8601": "2020-04-14T09:00:16.756985Z", "url": "https://files.pythonhosted.org/packages/30/7d/5798ce2cc1f782925dc5ed052e21db4482f88f09170bdbe8ffa2aa7d1457/gitlab-configuration-as-code-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "825f298349df834fb4438d5ff6df570e", "sha256": "766f58c9e7b975e653e4d2e2e80bcda9c6b82dd8c652a2e5ffd8079eec1a45fd"}, "downloads": -1, "filename": "gitlab-configuration-as-code-0.5.0.tar.gz", "has_sig": false, "md5_digest": "825f298349df834fb4438d5ff6df570e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45400, "upload_time": "2020-04-14T09:00:16", "upload_time_iso_8601": "2020-04-14T09:00:16.756985Z", "url": "https://files.pythonhosted.org/packages/30/7d/5798ce2cc1f782925dc5ed052e21db4482f88f09170bdbe8ffa2aa7d1457/gitlab-configuration-as-code-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:55 2020"}