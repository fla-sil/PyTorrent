{"info": {"author": "Thibaud Colas", "author_email": "thibaudcolas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Quality Assurance"], "description": "# [curlylint](https://pypi.org/project/curlylint/) [<img src=\"https://raw.githubusercontent.com/thibaudcolas/curlylint/master/.github/curlylint-logo.svg?sanitize=true\" width=\"250\" height=\"100\" align=\"right\" alt=\"\">](https://pypi.org/project/curlylint/)\n\n[![PyPI](https://img.shields.io/pypi/v/curlylint.svg)](https://pypi.org/project/curlylint/) [![PyPI downloads](https://img.shields.io/pypi/dm/curlylint.svg)](https://pypi.org/project/curlylint/) [![Travis](https://travis-ci.com/thibaudcolas/curlylint.svg?branch=master)](https://travis-ci.com/thibaudcolas/curlylint) [![Total alerts](https://img.shields.io/lgtm/alerts/g/thibaudcolas/curlylint.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/thibaudcolas/curlylint/alerts/) [![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/thibaudcolas/curlylint.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/thibaudcolas/curlylint/context:python)\n\n> **{{ \ud83c\udf80}}** Prototype linter for [Jinja](https://jinja.palletsprojects.com/) and [Django templates](https://docs.djangoproject.com/en/dev/topics/templates/), forked from [jinjalint](https://github.com/motet-a/jinjalint).\n\ncurlylint is a prototype linter for your templates \u2013 whether that\u2019s [Django\u2019s templates](https://docs.djangoproject.com/en/1.11/ref/templates/language/), [Jinja](https://jinja.palletsprojects.com/), [Twig](https://twig.symfony.com/), or any other [\u201ccurly braces\u201d](tests/README.md) template language.\n\nAs of now, curlylint supports:\n\n- Linting invalid template / HTML syntax due to mismatched tags\u00a0\u2013\u00a0while template errors are easy enough to spot, it\u2019s not rare for HTML issues to make their way to live sites.\n- Indentation inconsistencies \u2013 Usage of tabs vs spaces, line breaks, indentation size.\n\nIn the future, we intend to support linting:\n\n- Common accessibility issues in HTML \u2013 misuse of ARIA `role`, and making sure alternative text is used where appropriate.\n- Common security issues \u2013\u00a0e.g. `rel=\"noopener noreferrer\"`, or preventing usage of HTTP URLs.\n- General HTML code smells \u2013 duplicate attributes, invalid attributes, etc.\n- More [ideas welcome](docs/README.md)!\n\n## Usage\n\nYou need Python 3. Curlylint doesn\u2019t work with Python 2. Install it with\n`pip install curlylint` (or `pip3 install curlylint` depending on how `pip` is\ncalled on your system), then run it with:\n\n```sh\ncurlylint template-directory/\n```\n\n\u2026or:\n\n```sh\ncurlylint some-file.html some-other-file.html\n```\n\nThis is a work in progress. Feel free to contribute :upside_down_face:\n\n### CLI flags\n\n#### `--verbose`\n\nTurns on verbose mode. This makes it easier to troubleshoot what configuration is used, and what files are being linted.\n\n```sh\ncurlylint --verbose template-directory/\n```\n\n#### `--quiet`\n\nDon\u2019t emit non-error messages to stderr. Errors are still emitted; silence those with `2>/dev/null`.\n\n```sh\ncurlylint --quiet template-directory/\n```\n\n#### `--parse-only`\n\nDon\u2019t lint, check for syntax errors and exit.\n\n```sh\ncurlylint --parse-only template-directory/\n```\n\n## Configuration with pyproject.toml\n\n_curlylint_ is able to read project-specific default values for its command line options from a [PEP 518](https://www.python.org/dev/peps/pep-0518/) `pyproject.toml` file.\n\n### Where _curlylint_ looks for the file\n\nBy default _curlylint_ looks for `pyproject.toml` starting from the common base directory of all files and directories passed on the command line. If it's not there, it looks in parent directories. It stops looking when it finds the file, or a `.git` directory, or a `.hg` directory, or the root of the file system, whichever comes first.\n\nYou can also explicitly specify the path to a particular file that you want with `--config`. In this situation _curlylint_ will not look for any other file.\n\nIf you're running with `--verbose`, you will see a blue message if a file was found and used.\n\n### Configuration format\n\nAs the file extension suggests, `pyproject.toml` is a\n[TOML](https://github.com/toml-lang/toml) file. It contains separate sections for\ndifferent tools. _curlylint_ is using the `[tool.curlylint]` section. The option keys are the same as long names of options on the command line.\n\n<details>\n\n<summary>Example `pyproject.toml`</summary>\n\n```toml\n[tool.curlylint]\n# How many spaces\nindent-size = 4\n# Specify additional Jinja elements which can wrap HTML here. You\n# don't neet to specify simple elements which can't wrap anything like\n# {% extends %} or {% include %}.\njinja-custom-elements-names = [\n  [\"cache\", \"endcache\"],\n  [\"captureas\", \"endcaptureas\"]\n]\ninclude = '\\.(html|jinja)$'\nexclude = '''\n(\n  /(\n      \\.eggs           # exclude a few common directories in the root of the project\n    | \\.git\n    | \\.venv\n    | build\n    | dist\n  )/\n  | webpack-stats.html # also separately exclude a file named webpack-stats.html in the root of the project\n)\n'''\n```\n\n</details>\n\n### Lookup hierarchy\n\nCommand-line options have defaults that you can see in `--help`. A `pyproject.toml` can override those defaults. Finally, options provided by the user on the command line override both.\n\n_curlylint_ will only ever use one `pyproject.toml` file during an entire run. It doesn't look for multiple files, and doesn't compose configuration from different levels of the file hierarchy.\n\n## Usage with [pre-commit](https://pre-commit.com) git hooks framework\n\nAdd to your `.pre-commit-config.yaml`:\n\n```yaml\n- repo: https://github.com/thibaudcolas/curlylint\n  rev: \"\" # select a tag / sha to point at\n  hooks:\n    - id: curlylint\n```\n\nMake sure to fill in the `rev` with a valid revision.\n\n_Note_: by default this configuration will only match `.jinja` and `.jinja2`\nfiles. To match by regex pattern instead, override `types` and `files` as\nfollows:\n\n```yaml\n- id: curlylint\n  types: [file] # restore the default `types` matching\n  files: \\.(html|sls)$\n```\n\n## Contributing\n\nSee anything you like in here? Anything missing? We welcome all support, whether on bug reports, feature requests, code, design, reviews, tests, documentation, and more. Please have a look at our [contribution guidelines](CONTRIBUTING.md).\n\nIf you just want to set up the project on your own computer, the contribution guidelines also contain all of the setup commands.\n\n## Credits\n\nImage credit: [FxEmojis](https://github.com/mozilla/fxemoji).\n\nThis project is a fork of [jinjalint](https://github.com/motet-a/jinjalint).\n\nTest templates extracted from third-party projects. View the full list in [`tests/README.md`](tests/README.md).\n\nView the full list of [contributors](https://github.com/thibaudcolas/curlylint/graphs/contributors). [MIT](https://github.com/thibaudcolas/curlylint/blob/master/LICENSE) licensed.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thibaudcolas/curlylint", "keywords": "curlylint,jinjalint,linter,jinja,jinja2,django templates,templates,html,twig", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "curlylint", "package_url": "https://pypi.org/project/curlylint/", "platform": "", "project_url": "https://pypi.org/project/curlylint/", "project_urls": {"Homepage": "https://github.com/thibaudcolas/curlylint"}, "release_url": "https://pypi.org/project/curlylint/0.8.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "{{ \ud83c\udf80}} Prototype linter for Jinja and Django templates, forked from jinjalint", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://pypi.org/project/curlylint/\" rel=\"nofollow\">curlylint</a> <a href=\"https://pypi.org/project/curlylint/\" rel=\"nofollow\"><img align=\"right\" alt=\"\" height=\"100\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b39efd663782d7a49f3771b812333ca4789b5ae/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686962617564636f6c61732f6375726c796c696e742f6d61737465722f2e6769746875622f6375726c796c696e742d6c6f676f2e7376673f73616e6974697a653d74727565\" width=\"250\"></a></h1>\n<p><a href=\"https://pypi.org/project/curlylint/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80b38ae3bf2aebd03ecea6de3b4826e053e06544/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6375726c796c696e742e737667\"></a> <a href=\"https://pypi.org/project/curlylint/\" rel=\"nofollow\"><img alt=\"PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8648df5a2069cbde018e46f0a40857780dfb3197/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6375726c796c696e742e737667\"></a> <a href=\"https://travis-ci.com/thibaudcolas/curlylint\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e2c388cbd18b34535d2b0c09a349468805531f3/68747470733a2f2f7472617669732d63692e636f6d2f74686962617564636f6c61732f6375726c796c696e742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://lgtm.com/projects/g/thibaudcolas/curlylint/alerts/\" rel=\"nofollow\"><img alt=\"Total alerts\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf5f7b709817dbd6ac19026f0f73eaec62ae05e4/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f74686962617564636f6c61732f6375726c796c696e742e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a> <a href=\"https://lgtm.com/projects/g/thibaudcolas/curlylint/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38419c293c890e78aa798ed1f205080e15ddc328/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f74686962617564636f6c61732f6375726c796c696e742e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a></p>\n<blockquote>\n<p><strong>{{ \ud83c\udf80}}</strong> Prototype linter for <a href=\"https://jinja.palletsprojects.com/\" rel=\"nofollow\">Jinja</a> and <a href=\"https://docs.djangoproject.com/en/dev/topics/templates/\" rel=\"nofollow\">Django templates</a>, forked from <a href=\"https://github.com/motet-a/jinjalint\" rel=\"nofollow\">jinjalint</a>.</p>\n</blockquote>\n<p>curlylint is a prototype linter for your templates \u2013 whether that\u2019s <a href=\"https://docs.djangoproject.com/en/1.11/ref/templates/language/\" rel=\"nofollow\">Django\u2019s templates</a>, <a href=\"https://jinja.palletsprojects.com/\" rel=\"nofollow\">Jinja</a>, <a href=\"https://twig.symfony.com/\" rel=\"nofollow\">Twig</a>, or any other <a href=\"tests/README.md\" rel=\"nofollow\">\u201ccurly braces\u201d</a> template language.</p>\n<p>As of now, curlylint supports:</p>\n<ul>\n<li>Linting invalid template / HTML syntax due to mismatched tags\u00a0\u2013\u00a0while template errors are easy enough to spot, it\u2019s not rare for HTML issues to make their way to live sites.</li>\n<li>Indentation inconsistencies \u2013 Usage of tabs vs spaces, line breaks, indentation size.</li>\n</ul>\n<p>In the future, we intend to support linting:</p>\n<ul>\n<li>Common accessibility issues in HTML \u2013 misuse of ARIA <code>role</code>, and making sure alternative text is used where appropriate.</li>\n<li>Common security issues \u2013\u00a0e.g. <code>rel=\"noopener noreferrer\"</code>, or preventing usage of HTTP URLs.</li>\n<li>General HTML code smells \u2013 duplicate attributes, invalid attributes, etc.</li>\n<li>More <a href=\"docs/README.md\" rel=\"nofollow\">ideas welcome</a>!</li>\n</ul>\n<h2>Usage</h2>\n<p>You need Python 3. Curlylint doesn\u2019t work with Python 2. Install it with\n<code>pip install curlylint</code> (or <code>pip3 install curlylint</code> depending on how <code>pip</code> is\ncalled on your system), then run it with:</p>\n<pre>curlylint template-directory/\n</pre>\n<p>\u2026or:</p>\n<pre>curlylint some-file.html some-other-file.html\n</pre>\n<p>This is a work in progress. Feel free to contribute :upside_down_face:</p>\n<h3>CLI flags</h3>\n<h4><code>--verbose</code></h4>\n<p>Turns on verbose mode. This makes it easier to troubleshoot what configuration is used, and what files are being linted.</p>\n<pre>curlylint --verbose template-directory/\n</pre>\n<h4><code>--quiet</code></h4>\n<p>Don\u2019t emit non-error messages to stderr. Errors are still emitted; silence those with <code>2&gt;/dev/null</code>.</p>\n<pre>curlylint --quiet template-directory/\n</pre>\n<h4><code>--parse-only</code></h4>\n<p>Don\u2019t lint, check for syntax errors and exit.</p>\n<pre>curlylint --parse-only template-directory/\n</pre>\n<h2>Configuration with pyproject.toml</h2>\n<p><em>curlylint</em> is able to read project-specific default values for its command line options from a <a href=\"https://www.python.org/dev/peps/pep-0518/\" rel=\"nofollow\">PEP 518</a> <code>pyproject.toml</code> file.</p>\n<h3>Where <em>curlylint</em> looks for the file</h3>\n<p>By default <em>curlylint</em> looks for <code>pyproject.toml</code> starting from the common base directory of all files and directories passed on the command line. If it's not there, it looks in parent directories. It stops looking when it finds the file, or a <code>.git</code> directory, or a <code>.hg</code> directory, or the root of the file system, whichever comes first.</p>\n<p>You can also explicitly specify the path to a particular file that you want with <code>--config</code>. In this situation <em>curlylint</em> will not look for any other file.</p>\n<p>If you're running with <code>--verbose</code>, you will see a blue message if a file was found and used.</p>\n<h3>Configuration format</h3>\n<p>As the file extension suggests, <code>pyproject.toml</code> is a\n<a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> file. It contains separate sections for\ndifferent tools. <em>curlylint</em> is using the <code>[tool.curlylint]</code> section. The option keys are the same as long names of options on the command line.</p>\n<details>\n<summary>Example `pyproject.toml`</summary>\n<pre><span class=\"k\">[tool.curlylint]</span>\n<span class=\"c1\"># How many spaces</span>\n<span class=\"n\">indent-size</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"c1\"># Specify additional Jinja elements which can wrap HTML here. You</span>\n<span class=\"c1\"># don't neet to specify simple elements which can't wrap anything like</span>\n<span class=\"c1\"># {% extends %} or {% include %}.</span>\n<span class=\"n\">jinja-custom-elements-names</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">[</span><span class=\"s\">\"cache\"</span><span class=\"p\">,</span> <span class=\"s\">\"endcache\"</span><span class=\"p\">],</span>\n  <span class=\"k\">[\"captureas\", \"endcaptureas\"]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"s\">'\\.(html|jinja)$'</span>\n<span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"s\">'''</span>\n<span class=\"s\">(</span>\n<span class=\"s\">  /(</span>\n<span class=\"s\">      \\.eggs           # exclude a few common directories in the root of the project</span>\n<span class=\"s\">    | \\.git</span>\n<span class=\"s\">    | \\.venv</span>\n<span class=\"s\">    | build</span>\n<span class=\"s\">    | dist</span>\n<span class=\"s\">  )/</span>\n<span class=\"s\">  | webpack-stats.html # also separately exclude a file named webpack-stats.html in the root of the project</span>\n<span class=\"s\">)</span>\n<span class=\"s\">'''</span>\n</pre>\n</details>\n<h3>Lookup hierarchy</h3>\n<p>Command-line options have defaults that you can see in <code>--help</code>. A <code>pyproject.toml</code> can override those defaults. Finally, options provided by the user on the command line override both.</p>\n<p><em>curlylint</em> will only ever use one <code>pyproject.toml</code> file during an entire run. It doesn't look for multiple files, and doesn't compose configuration from different levels of the file hierarchy.</p>\n<h2>Usage with <a href=\"https://pre-commit.com\" rel=\"nofollow\">pre-commit</a> git hooks framework</h2>\n<p>Add to your <code>.pre-commit-config.yaml</code>:</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">repo</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://github.com/thibaudcolas/curlylint</span>\n  <span class=\"nt\">rev</span><span class=\"p\">:</span> <span class=\"s\">\"\"</span> <span class=\"c1\"># select a tag / sha to point at</span>\n  <span class=\"nt\">hooks</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">curlylint</span>\n</pre>\n<p>Make sure to fill in the <code>rev</code> with a valid revision.</p>\n<p><em>Note</em>: by default this configuration will only match <code>.jinja</code> and <code>.jinja2</code>\nfiles. To match by regex pattern instead, override <code>types</code> and <code>files</code> as\nfollows:</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">curlylint</span>\n  <span class=\"nt\">types</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">file</span><span class=\"p p-Indicator\">]</span> <span class=\"c1\"># restore the default `types` matching</span>\n  <span class=\"nt\">files</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">\\.(html|sls)$</span>\n</pre>\n<h2>Contributing</h2>\n<p>See anything you like in here? Anything missing? We welcome all support, whether on bug reports, feature requests, code, design, reviews, tests, documentation, and more. Please have a look at our <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contribution guidelines</a>.</p>\n<p>If you just want to set up the project on your own computer, the contribution guidelines also contain all of the setup commands.</p>\n<h2>Credits</h2>\n<p>Image credit: <a href=\"https://github.com/mozilla/fxemoji\" rel=\"nofollow\">FxEmojis</a>.</p>\n<p>This project is a fork of <a href=\"https://github.com/motet-a/jinjalint\" rel=\"nofollow\">jinjalint</a>.</p>\n<p>Test templates extracted from third-party projects. View the full list in <a href=\"tests/README.md\" rel=\"nofollow\"><code>tests/README.md</code></a>.</p>\n<p>View the full list of <a href=\"https://github.com/thibaudcolas/curlylint/graphs/contributors\" rel=\"nofollow\">contributors</a>. <a href=\"https://github.com/thibaudcolas/curlylint/blob/master/LICENSE\" rel=\"nofollow\">MIT</a> licensed.</p>\n\n          </div>"}, "last_serial": 7160508, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "1745086267300fc722bc0e4d6664c9fd", "sha256": "e9a2d80e1a79bfd74145795f74b2a4fb6fa6258ce8c7b03ce345ae02f45300f2"}, "downloads": -1, "filename": "curlylint-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1745086267300fc722bc0e4d6664c9fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18477, "upload_time": "2020-03-24T10:47:56", "upload_time_iso_8601": "2020-03-24T10:47:56.663412Z", "url": "https://files.pythonhosted.org/packages/b0/a7/bcbcf392e16f0b999adebc7ac4b85eaf1255d8a1a3f7cf4197259ff2e5dd/curlylint-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "65769fa10cac96208197ae312ee0133e", "sha256": "8fd04c2f2d7e6b029379c30a0ea0d59058f4a6a73b2fe34d1ff40f59933a0e7d"}, "downloads": -1, "filename": "curlylint-0.6.0.tar.gz", "has_sig": false, "md5_digest": "65769fa10cac96208197ae312ee0133e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19245, "upload_time": "2020-03-30T00:28:13", "upload_time_iso_8601": "2020-03-30T00:28:13.073592Z", "url": "https://files.pythonhosted.org/packages/3c/36/5ad426b24d790c0aad65184bc5645d5c1b4c7a95604f77c81a8bc9b48316/curlylint-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "460914bca1f4abca6de50e2637f32039", "sha256": "e3a1b2f06f727ee5df553b057d175f55c64f35d2586480281acf57ca1b8d08b6"}, "downloads": -1, "filename": "curlylint-0.7.0.tar.gz", "has_sig": false, "md5_digest": "460914bca1f4abca6de50e2637f32039", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21864, "upload_time": "2020-04-16T01:18:25", "upload_time_iso_8601": "2020-04-16T01:18:25.753031Z", "url": "https://files.pythonhosted.org/packages/93/17/74f972b3e6953050486373b4be4ab87454a8e4ade78938549fad74931eda/curlylint-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "612b098196831b5bf2fe4b64b591a839", "sha256": "5000cdeb19c79f8c3e9b189478c1c302e35eadfc198a91a2a1eebc6cd8fd26f6"}, "downloads": -1, "filename": "curlylint-0.8.0.tar.gz", "has_sig": false, "md5_digest": "612b098196831b5bf2fe4b64b591a839", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22989, "upload_time": "2020-05-04T00:04:18", "upload_time_iso_8601": "2020-05-04T00:04:18.477867Z", "url": "https://files.pythonhosted.org/packages/0b/bb/403a6be2a568e701cd6b171135cbb8f934fb0adf2458adfafd56b7af7ac0/curlylint-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "612b098196831b5bf2fe4b64b591a839", "sha256": "5000cdeb19c79f8c3e9b189478c1c302e35eadfc198a91a2a1eebc6cd8fd26f6"}, "downloads": -1, "filename": "curlylint-0.8.0.tar.gz", "has_sig": false, "md5_digest": "612b098196831b5bf2fe4b64b591a839", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22989, "upload_time": "2020-05-04T00:04:18", "upload_time_iso_8601": "2020-05-04T00:04:18.477867Z", "url": "https://files.pythonhosted.org/packages/0b/bb/403a6be2a568e701cd6b171135cbb8f934fb0adf2458adfafd56b7af7ac0/curlylint-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:21 2020"}