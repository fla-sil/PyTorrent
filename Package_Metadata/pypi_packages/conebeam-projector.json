{"info": {"author": "Stephan Seitz", "author_email": "stephan.seitz@fau.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": ".. image:: https://badge.fury.io/py/conebeam-projector.svg\n   :target: https://badge.fury.io/py/conebeam-projector\n   :alt: PyPI version\n\n==================\nconebeam_projector\n==================\n\nThis is the `CONRAD <https://github.com/akmaier/CONRAD>`_ cone beam projector ported to pycuda.\n\nInstall\n-------\n\n.. code:: bash\n\n   pip install conebeam-projector\n\nOr from this repo:\n\n.. code:: bash\n\n    pip install -e .\n\nUsage\n-----\n\n.. code:: python\n\n   import pyconrad.autoinit\n   import pyconrad.config\n   import pycuda.gpuarray as gpuarray\n\n   import conebeam_projector\n   from edu.stanford.rsl.conrad.phantom import NumericalSheppLogan3D\n\n   phantom = np.array(NumericalSheppLogan3D(\n       *pyconrad.config.get_reco_size()).getNumericalSheppLoganPhantom(), np.float32)\n   pyconrad.imshow(phantom, \"phantom\")\n   projector = conebeam_projector.CudaProjector()\n\n   sino = gpuarray.zeros(pyconrad.config.get_sino_shape(), np.float32)\n\n   projector.forward_project_cuda_raybased(phantom, sino, use_maximum_intensity_projection=False)\n   pyconrad.imshow(sino, \"Sinogram\")\n   backprojection = projector.backProjectPixelDrivenCuda(sino)\n   pyconrad.imshow(backprojection, \"backprojection\")\n\n\nConfiguration\n-------------\n\nConfiguration of the projector geometry is done by (py)CONRAD.\nThe first time you use it CONRAD will suggest you to create a global :code:`Conrad.xml` in your home directory which stores all configuration options.\nYou can launch :code:`conrad` from bash command line to get a GUI loaded.\nYou can set the configuration programmatically via\n\n.. code:: python\n\n    import pyconrad.autoinit  # launches JVM\n    import pyconrad.config\n    this_is_the_configuration_obj = pyconrad.config.get_conf()\n\nThis will give you a instance of CONRAD's `edu.stanford.rsl.conrad.utils.Configuration <https://github.com/akmaier/CONRAD/blob/master/src/edu/stanford/rsl/conrad/utils/Configuration.java>`_ class.", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/theHamsta/conebeam_projector", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "conebeam-projector", "package_url": "https://pypi.org/project/conebeam-projector/", "platform": "any", "project_url": "https://pypi.org/project/conebeam-projector/", "project_urls": {"Documentation": "https://pyscaffold.org/", "Homepage": "https://github.com/theHamsta/conebeam_projector"}, "release_url": "https://pypi.org/project/conebeam-projector/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Cone Beam Projector in Python", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/conebeam-projector\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e77fde9ebb4b53d12c2497a877306dbcdad2d80/68747470733a2f2f62616467652e667572792e696f2f70792f636f6e656265616d2d70726f6a6563746f722e737667\"></a>\n<div id=\"conebeam-projector\">\n<h2>conebeam_projector</h2>\n<p>This is the <a href=\"https://github.com/akmaier/CONRAD\" rel=\"nofollow\">CONRAD</a> cone beam projector ported to pycuda.</p>\n<div id=\"install\">\n<h3>Install</h3>\n<pre>pip install conebeam-projector\n</pre>\n<p>Or from this repo:</p>\n<pre>pip install -e .\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyconrad.autoinit</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyconrad.config</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pycuda.gpuarray</span> <span class=\"k\">as</span> <span class=\"nn\">gpuarray</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">conebeam_projector</span>\n<span class=\"kn\">from</span> <span class=\"nn\">edu.stanford.rsl.conrad.phantom</span> <span class=\"kn\">import</span> <span class=\"n\">NumericalSheppLogan3D</span>\n\n<span class=\"n\">phantom</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">NumericalSheppLogan3D</span><span class=\"p\">(</span>\n    <span class=\"o\">*</span><span class=\"n\">pyconrad</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get_reco_size</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">getNumericalSheppLoganPhantom</span><span class=\"p\">(),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">pyconrad</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">phantom</span><span class=\"p\">,</span> <span class=\"s2\">\"phantom\"</span><span class=\"p\">)</span>\n<span class=\"n\">projector</span> <span class=\"o\">=</span> <span class=\"n\">conebeam_projector</span><span class=\"o\">.</span><span class=\"n\">CudaProjector</span><span class=\"p\">()</span>\n\n<span class=\"n\">sino</span> <span class=\"o\">=</span> <span class=\"n\">gpuarray</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">pyconrad</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get_sino_shape</span><span class=\"p\">(),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n<span class=\"n\">projector</span><span class=\"o\">.</span><span class=\"n\">forward_project_cuda_raybased</span><span class=\"p\">(</span><span class=\"n\">phantom</span><span class=\"p\">,</span> <span class=\"n\">sino</span><span class=\"p\">,</span> <span class=\"n\">use_maximum_intensity_projection</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">pyconrad</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">sino</span><span class=\"p\">,</span> <span class=\"s2\">\"Sinogram\"</span><span class=\"p\">)</span>\n<span class=\"n\">backprojection</span> <span class=\"o\">=</span> <span class=\"n\">projector</span><span class=\"o\">.</span><span class=\"n\">backProjectPixelDrivenCuda</span><span class=\"p\">(</span><span class=\"n\">sino</span><span class=\"p\">)</span>\n<span class=\"n\">pyconrad</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">backprojection</span><span class=\"p\">,</span> <span class=\"s2\">\"backprojection\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Configuration of the projector geometry is done by (py)CONRAD.\nThe first time you use it CONRAD will suggest you to create a global <code>Conrad.xml</code> in your home directory which stores all configuration options.\nYou can launch <code>conrad</code> from bash command line to get a GUI loaded.\nYou can set the configuration programmatically via</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyconrad.autoinit</span>  <span class=\"c1\"># launches JVM</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyconrad.config</span>\n<span class=\"n\">this_is_the_configuration_obj</span> <span class=\"o\">=</span> <span class=\"n\">pyconrad</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get_conf</span><span class=\"p\">()</span>\n</pre>\n<p>This will give you a instance of CONRAD\u2019s <a href=\"https://github.com/akmaier/CONRAD/blob/master/src/edu/stanford/rsl/conrad/utils/Configuration.java\" rel=\"nofollow\">edu.stanford.rsl.conrad.utils.Configuration</a> class.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5615871, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a27f7fbdbeabe9f4eaa44cd569fb8ebd", "sha256": "e21bc292eee02b60723af11611f13e147124964c0cba483b29b7222f53915779"}, "downloads": -1, "filename": "conebeam_projector-0.1.tar.gz", "has_sig": false, "md5_digest": "a27f7fbdbeabe9f4eaa44cd569fb8ebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20152, "upload_time": "2019-07-31T22:04:43", "upload_time_iso_8601": "2019-07-31T22:04:43.801025Z", "url": "https://files.pythonhosted.org/packages/91/b3/4b2467a9386392b0416e2a429ba7d9d865ed5c3acba65bb9cb0d8c52d4c8/conebeam_projector-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2d857fbe76af1583f3be798f64e3b654", "sha256": "c728a942cebf0bad0e51d472b092e5279c3373f8bf52d2563bd188952a3da783"}, "downloads": -1, "filename": "conebeam_projector-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2d857fbe76af1583f3be798f64e3b654", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20285, "upload_time": "2019-07-31T22:20:14", "upload_time_iso_8601": "2019-07-31T22:20:14.414867Z", "url": "https://files.pythonhosted.org/packages/62/be/32be4660516f3076d22a71e35ea6f3eab9ea0e9d0e1d8b68d0cd8aa18790/conebeam_projector-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d857fbe76af1583f3be798f64e3b654", "sha256": "c728a942cebf0bad0e51d472b092e5279c3373f8bf52d2563bd188952a3da783"}, "downloads": -1, "filename": "conebeam_projector-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2d857fbe76af1583f3be798f64e3b654", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20285, "upload_time": "2019-07-31T22:20:14", "upload_time_iso_8601": "2019-07-31T22:20:14.414867Z", "url": "https://files.pythonhosted.org/packages/62/be/32be4660516f3076d22a71e35ea6f3eab9ea0e9d0e1d8b68d0cd8aa18790/conebeam_projector-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:01 2020"}