{"info": {"author": "Maarten Jacobs", "author_email": "maarten.j.jacobs@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# GADK: codify Github Actions Workflows\n\n[![PyPI version](https://badge.fury.io/py/gadk.svg)](https://badge.fury.io/py/gadk)\n\nThe extremely unofficial Github Actions Development Kit.\n\nGADK can be used to:\n\n* Define Github Actions Workflows as Python code and sync them to `.github/workflows/`.\n* Share common Workflow patterns such as build-test-deploy.\n* Abstract features like Artifacts.\n\n`gadk` mirrors the options supported by Github Actions Workflows so that you can generate\nworkflows from Python code. The classes exported from the `gadk` module\nshould be sufficient to replicate existing workflows, with the additional advantage of\nusing Python's mechanisms of abstraction.\n\n## Installation\n\nGADK can be installed using `pip`.\n\n```shell script\npip install gadk\n```\n\n## Instructions\n\n### Setup\n\n1. Create a file called `actions.py` in the root directory of your project.\n1. Enter the following simple workflow with import:\n    ```python\n    from gadk import *\n\n\n    class MyWorkflow(Workflow):\n        def __init__(self) -> None:\n            super().__init__(\"my_workflow\", \"my workflow\")\n\n            self.on(pull_request=On(paths=[\"src/**\"]), push=On(branches=[\"master\"]))\n            self.jobs[\"test\"] = Job(\n                steps=[\n                    RunStep(\"make test\"),\n                ],\n            )\n    ```\n1. Run `gadk`.\n1. You should now have a file called `.github/workflows/my_workflow.yml` with the contents\nof your workflow.\n\n### Creating workflows\n\nCreating workflows starts with the `Workflow` class.\n\nThe `Workflow` class is the top-level element to represent a Github Action Workflow. You would\ncreate a new class that extends `Workflow` when you are creating a new GADK project, or want to\ntest/deploy a new service or subproject. In the constructor of this new class you would specify\nwhen the workflow is triggered, its jobs, the required environment variables, etc.\n\nWhen initialising the `Workflow` class, you are required to specify a short name that is also\nused as the filename in `.github/workflows/`. Additionally you may add a human-readable name.\n\n#### When to run the workflow\n\nThe `on` method of your workflow instance can be used to specify when to run the workflow.\nCurrently `gadk` supports triggering a workflow on a pull request or a push/merge. Each\nevent can be limited to changes to files or directories, and when pushing to a branch.\nSee the `On` class for both options.\n\n```python\nfrom gadk import *\n\n\nclass MyWorkflow(Workflow):\n    def __init__(self) -> None:\n        super().__init__(\"my_workflow\", \"my workflow\")\n\n        # Run when:\n        #   * for pull requests, a file under `src/` changes,\n        #   * for merge/push to master.\n        self.on(pull_request=On(paths=[\"src/**\"]), push=On(branches=[\"master\"]))\n```\n\nNote that it's mandatory to specify the `on` section of a workflow. This is not currently\nbeing validated by `gadk.`\n\n#### Adding jobs\n\nThe `self.jobs` property of your workflow instance can be used to add jobs to your workflow.\nEach job must be an instance of `Job` or a subclass thereof.\n\nA job has several options to specify:\n\n* When to run the job: `Job(condition=\"...\"\")` specifies the condition on which to run the\njob. For instance, `\"github.ref == 'refs/heads/master'\"` would only run the job when the\ncurrent branch is master. By default this condition is empty to always run the job.\n* Which container to run the job on: `Job(runs_on=\"...\")` specifies the name of the container.\nBy default this is `ubuntu-18.04`.\n* Which steps to run: `Job(steps=[...])` specifies the steps to execute for this job.\nEach step must be a `RunStep` or `UsesStep` instance or subclass thereof. By default `gadk`\nadds a checkout v2 step and prepends it to the list of steps. This is a useful\ndefault for most jobs but can be disabled by specifying `Job(default_checkout=False)`.\n* Which environment variables to expose to the steps of the job: `Job(env={...})` specifies\nadditional environment variables. By default no environment variables are specified.\n* Which jobs need to run before this job: `Job(needs=[...])` specifies the names of the jobs\nthat should run before this job. Leaving this list empty or unspecified means the job will\nalways run, which is also the default.\n\n```python\nfrom gadk import *\n\n\nclass MyWorkflow(Workflow):\n    def __init__(self) -> None:\n        super().__init__(\"my_workflow\", \"my workflow\")\n\n        # Specify 2 jobs to be run, one after the other..\n        self.jobs[\"test\"] = Job(\n            steps=[RunStep(\"pytest\"), RunStep(\"mypy\")],  # Run 2 shell commands, one after the other.\n            # condition=\"\"  # No condition specified to run always.\n            # runs_on=\"ubuntu-18.04\"  # Run on the default container as specified by gadk.\n            env={\"PYTHONPATH\": \".\"},  # Add 1 additional environment variable.\n            # needs=None  # No other jobs need to be executed before this job.\n            # default_checkout=True   # Prepend an additional step to checkout the repository.\n        )\n        self.jobs[\"build\"] = Job(\n            needs=[\"test\"],  # The \"test\" job specified above must have finished running before this job can start.\n            steps=[RunStep(\"tar ...\")], # Run a single fictional command (excluding the default checkout command).\n        )\n```\n\n#### Artifacts\n\nArtifacts are files or directories created as a result of a job. They are typically used to share resources\nbetween jobs, for instance when building code for deployment and verifying the code artifact before deployment,\nand finally deploying said artifact. They can also be used for debugging, as Github Actions expose the artifacts\ncreated by a workflow.\n\nThe default implementation of artifacts uses the `actions/upload-artifact@v2` action to upload an artifact\nin one job and then uses the `actions/download-artifact@v2` action to download the artifact in a downstream\njob.\n\n`gadk` provides a simple abstraction of artifacts called `Artifact`. To use it you create an artifact\noutside of your jobs, then add `artifact.as_upload()` to the steps of the job creating the artifact,\nand finally add `artifact.as_download()` to the steps of the job(s) requiring the artifact.\n\n```python\nfrom gadk import *\n\n\nclass MyWorkflow(Workflow):\n    def __init__(self) -> None:\n        super().__init__(\"my_workflow\", \"my workflow\")\n\n        # Create a code archive as an artifact.\n        code = Artifact(name=\"code-archive\", path=\"build/code.zip\")\n\n        # Specify 2 jobs to be run in parallel.\n        self.jobs[\"build\"] = Job(\n            steps=[\n                # Build code archive somehow:\n                RunStep(\"build_code_archive\"),\n                # Send off the archive for others to use.\n                code.as_upload(),\n            ]\n        )\n        self.jobs[\"verify\"] = Job(\n            needs=[\"build\"],  # Needed to ensure the artifact is ready.\n            steps=[\n                # Get the artifact.\n                code.as_download(),\n                # Use somehow...\n            ],\n        )\n```\n\n## Roadmap\n\n* Feature completeness: the first version of `gadk` was created to scratch a limited itch.\nThe next step is to represent all possible workflows.\n* Validation: the configuration is not validated but elements like `workflow.on` are required.\nIn the future this could be validated using a Yaml schema validator and runtime checks, e.g. specifying\na non-existent job in `job.needs`.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maartenJacobs/gadk", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gadk", "package_url": "https://pypi.org/project/gadk/", "platform": "", "project_url": "https://pypi.org/project/gadk/", "project_urls": {"Homepage": "https://github.com/maartenJacobs/gadk", "Repository": "https://github.com/maartenJacobs/gadk"}, "release_url": "https://pypi.org/project/gadk/0.2.2/", "requires_dist": ["pyyaml (>=5.3,<6.0)", "click (>=7.1.1,<8.0.0)", "colorama (>=0.4.3,<0.5.0)"], "requires_python": ">=3.6,<4", "summary": "Unofficial Github Actions Development Kit", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GADK: codify Github Actions Workflows</h1>\n<p><a href=\"https://badge.fury.io/py/gadk\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ce078c3b93d3033777fc71f6f0185a3af1fd5fb/68747470733a2f2f62616467652e667572792e696f2f70792f6761646b2e737667\"></a></p>\n<p>The extremely unofficial Github Actions Development Kit.</p>\n<p>GADK can be used to:</p>\n<ul>\n<li>Define Github Actions Workflows as Python code and sync them to <code>.github/workflows/</code>.</li>\n<li>Share common Workflow patterns such as build-test-deploy.</li>\n<li>Abstract features like Artifacts.</li>\n</ul>\n<p><code>gadk</code> mirrors the options supported by Github Actions Workflows so that you can generate\nworkflows from Python code. The classes exported from the <code>gadk</code> module\nshould be sufficient to replicate existing workflows, with the additional advantage of\nusing Python's mechanisms of abstraction.</p>\n<h2>Installation</h2>\n<p>GADK can be installed using <code>pip</code>.</p>\n<pre>pip install gadk\n</pre>\n<h2>Instructions</h2>\n<h3>Setup</h3>\n<ol>\n<li>Create a file called <code>actions.py</code> in the root directory of your project.</li>\n<li>Enter the following simple workflow with import:\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gadk</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyWorkflow</span><span class=\"p\">(</span><span class=\"n\">Workflow</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"s2\">\"my_workflow\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my workflow\"</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">pull_request</span><span class=\"o\">=</span><span class=\"n\">On</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"src/**\"</span><span class=\"p\">]),</span> <span class=\"n\">push</span><span class=\"o\">=</span><span class=\"n\">On</span><span class=\"p\">(</span><span class=\"n\">branches</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"master\"</span><span class=\"p\">]))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"s2\">\"test\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span>\n            <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"n\">RunStep</span><span class=\"p\">(</span><span class=\"s2\">\"make test\"</span><span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n</pre>\n</li>\n<li>Run <code>gadk</code>.</li>\n<li>You should now have a file called <code>.github/workflows/my_workflow.yml</code> with the contents\nof your workflow.</li>\n</ol>\n<h3>Creating workflows</h3>\n<p>Creating workflows starts with the <code>Workflow</code> class.</p>\n<p>The <code>Workflow</code> class is the top-level element to represent a Github Action Workflow. You would\ncreate a new class that extends <code>Workflow</code> when you are creating a new GADK project, or want to\ntest/deploy a new service or subproject. In the constructor of this new class you would specify\nwhen the workflow is triggered, its jobs, the required environment variables, etc.</p>\n<p>When initialising the <code>Workflow</code> class, you are required to specify a short name that is also\nused as the filename in <code>.github/workflows/</code>. Additionally you may add a human-readable name.</p>\n<h4>When to run the workflow</h4>\n<p>The <code>on</code> method of your workflow instance can be used to specify when to run the workflow.\nCurrently <code>gadk</code> supports triggering a workflow on a pull request or a push/merge. Each\nevent can be limited to changes to files or directories, and when pushing to a branch.\nSee the <code>On</code> class for both options.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gadk</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyWorkflow</span><span class=\"p\">(</span><span class=\"n\">Workflow</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"s2\">\"my_workflow\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my workflow\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Run when:</span>\n        <span class=\"c1\">#   * for pull requests, a file under `src/` changes,</span>\n        <span class=\"c1\">#   * for merge/push to master.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">pull_request</span><span class=\"o\">=</span><span class=\"n\">On</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"src/**\"</span><span class=\"p\">]),</span> <span class=\"n\">push</span><span class=\"o\">=</span><span class=\"n\">On</span><span class=\"p\">(</span><span class=\"n\">branches</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"master\"</span><span class=\"p\">]))</span>\n</pre>\n<p>Note that it's mandatory to specify the <code>on</code> section of a workflow. This is not currently\nbeing validated by <code>gadk.</code></p>\n<h4>Adding jobs</h4>\n<p>The <code>self.jobs</code> property of your workflow instance can be used to add jobs to your workflow.\nEach job must be an instance of <code>Job</code> or a subclass thereof.</p>\n<p>A job has several options to specify:</p>\n<ul>\n<li>When to run the job: <code>Job(condition=\"...\"\")</code> specifies the condition on which to run the\njob. For instance, <code>\"github.ref == 'refs/heads/master'\"</code> would only run the job when the\ncurrent branch is master. By default this condition is empty to always run the job.</li>\n<li>Which container to run the job on: <code>Job(runs_on=\"...\")</code> specifies the name of the container.\nBy default this is <code>ubuntu-18.04</code>.</li>\n<li>Which steps to run: <code>Job(steps=[...])</code> specifies the steps to execute for this job.\nEach step must be a <code>RunStep</code> or <code>UsesStep</code> instance or subclass thereof. By default <code>gadk</code>\nadds a checkout v2 step and prepends it to the list of steps. This is a useful\ndefault for most jobs but can be disabled by specifying <code>Job(default_checkout=False)</code>.</li>\n<li>Which environment variables to expose to the steps of the job: <code>Job(env={...})</code> specifies\nadditional environment variables. By default no environment variables are specified.</li>\n<li>Which jobs need to run before this job: <code>Job(needs=[...])</code> specifies the names of the jobs\nthat should run before this job. Leaving this list empty or unspecified means the job will\nalways run, which is also the default.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gadk</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyWorkflow</span><span class=\"p\">(</span><span class=\"n\">Workflow</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"s2\">\"my_workflow\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my workflow\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Specify 2 jobs to be run, one after the other..</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"s2\">\"test\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span>\n            <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">RunStep</span><span class=\"p\">(</span><span class=\"s2\">\"pytest\"</span><span class=\"p\">),</span> <span class=\"n\">RunStep</span><span class=\"p\">(</span><span class=\"s2\">\"mypy\"</span><span class=\"p\">)],</span>  <span class=\"c1\"># Run 2 shell commands, one after the other.</span>\n            <span class=\"c1\"># condition=\"\"  # No condition specified to run always.</span>\n            <span class=\"c1\"># runs_on=\"ubuntu-18.04\"  # Run on the default container as specified by gadk.</span>\n            <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"PYTHONPATH\"</span><span class=\"p\">:</span> <span class=\"s2\">\".\"</span><span class=\"p\">},</span>  <span class=\"c1\"># Add 1 additional environment variable.</span>\n            <span class=\"c1\"># needs=None  # No other jobs need to be executed before this job.</span>\n            <span class=\"c1\"># default_checkout=True   # Prepend an additional step to checkout the repository.</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"s2\">\"build\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span>\n            <span class=\"n\">needs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"test\"</span><span class=\"p\">],</span>  <span class=\"c1\"># The \"test\" job specified above must have finished running before this job can start.</span>\n            <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">RunStep</span><span class=\"p\">(</span><span class=\"s2\">\"tar ...\"</span><span class=\"p\">)],</span> <span class=\"c1\"># Run a single fictional command (excluding the default checkout command).</span>\n        <span class=\"p\">)</span>\n</pre>\n<h4>Artifacts</h4>\n<p>Artifacts are files or directories created as a result of a job. They are typically used to share resources\nbetween jobs, for instance when building code for deployment and verifying the code artifact before deployment,\nand finally deploying said artifact. They can also be used for debugging, as Github Actions expose the artifacts\ncreated by a workflow.</p>\n<p>The default implementation of artifacts uses the <code>actions/upload-artifact@v2</code> action to upload an artifact\nin one job and then uses the <code>actions/download-artifact@v2</code> action to download the artifact in a downstream\njob.</p>\n<p><code>gadk</code> provides a simple abstraction of artifacts called <code>Artifact</code>. To use it you create an artifact\noutside of your jobs, then add <code>artifact.as_upload()</code> to the steps of the job creating the artifact,\nand finally add <code>artifact.as_download()</code> to the steps of the job(s) requiring the artifact.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gadk</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyWorkflow</span><span class=\"p\">(</span><span class=\"n\">Workflow</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"s2\">\"my_workflow\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my workflow\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create a code archive as an artifact.</span>\n        <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">Artifact</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"code-archive\"</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"build/code.zip\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Specify 2 jobs to be run in parallel.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"s2\">\"build\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span>\n            <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"c1\"># Build code archive somehow:</span>\n                <span class=\"n\">RunStep</span><span class=\"p\">(</span><span class=\"s2\">\"build_code_archive\"</span><span class=\"p\">),</span>\n                <span class=\"c1\"># Send off the archive for others to use.</span>\n                <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">as_upload</span><span class=\"p\">(),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"s2\">\"verify\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span>\n            <span class=\"n\">needs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"build\"</span><span class=\"p\">],</span>  <span class=\"c1\"># Needed to ensure the artifact is ready.</span>\n            <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"c1\"># Get the artifact.</span>\n                <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">as_download</span><span class=\"p\">(),</span>\n                <span class=\"c1\"># Use somehow...</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n</pre>\n<h2>Roadmap</h2>\n<ul>\n<li>Feature completeness: the first version of <code>gadk</code> was created to scratch a limited itch.\nThe next step is to represent all possible workflows.</li>\n<li>Validation: the configuration is not validated but elements like <code>workflow.on</code> are required.\nIn the future this could be validated using a Yaml schema validator and runtime checks, e.g. specifying\na non-existent job in <code>job.needs</code>.</li>\n</ul>\n\n          </div>"}, "last_serial": 7138062, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "175341b43519111d569e2ea326d22011", "sha256": "7bf01a87472530bb84995a4911f804b795712bc22c0cfee948eed49ac51bc398"}, "downloads": -1, "filename": "gadk-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "175341b43519111d569e2ea326d22011", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6265, "upload_time": "2020-04-25T14:18:23", "upload_time_iso_8601": "2020-04-25T14:18:23.354205Z", "url": "https://files.pythonhosted.org/packages/2c/f7/6fd9794d13ae94996dc72f7e49e2b441daed72c641488dc655c9ab67c1b2/gadk-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1ba438ab6fd5c4c73ccaaea9c6fd223", "sha256": "648c720403c77bcf5bd92857c9ea72a02e89fd723d78156afb7fc8ac0f3c1433"}, "downloads": -1, "filename": "gadk-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c1ba438ab6fd5c4c73ccaaea9c6fd223", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5481, "upload_time": "2020-04-25T14:18:25", "upload_time_iso_8601": "2020-04-25T14:18:25.389423Z", "url": "https://files.pythonhosted.org/packages/61/69/a8e932769599e8a8c824daf350635bc3ff5e79d1cee1f893c3cf727e4b11/gadk-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "938f11f4e93be615d0760452a1f71558", "sha256": "908d2045c24578f1a98308fae13ab73b61cf5ff0675a9e1e31bd8ea5e51e5ae1"}, "downloads": -1, "filename": "gadk-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "938f11f4e93be615d0760452a1f71558", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6974, "upload_time": "2020-04-26T12:53:58", "upload_time_iso_8601": "2020-04-26T12:53:58.220644Z", "url": "https://files.pythonhosted.org/packages/53/8b/ece4b5bc428f5d5f96b9f2db0223107bed3641345eaf975dbf349fdfc8c3/gadk-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6297ce7facb8fa2b749eac67943ff3f", "sha256": "fc8fe17acd17bd24801d8d82221c0c0bcdbc64cd732a1310ddc88ca31b7e3fa7"}, "downloads": -1, "filename": "gadk-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c6297ce7facb8fa2b749eac67943ff3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6078, "upload_time": "2020-04-26T12:53:59", "upload_time_iso_8601": "2020-04-26T12:53:59.420278Z", "url": "https://files.pythonhosted.org/packages/82/93/78720c43f0f1ffe4f5af595daeaed37557dbdade28f04365ce40a582565f/gadk-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e3c5df97b34ea7c49db65b0634cc68f5", "sha256": "777927b031843dcbe08a74bc1e96b0e2d4d59a53900efe9e3fe5b31828b5c23f"}, "downloads": -1, "filename": "gadk-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e3c5df97b34ea7c49db65b0634cc68f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7111, "upload_time": "2020-04-28T13:54:25", "upload_time_iso_8601": "2020-04-28T13:54:25.621332Z", "url": "https://files.pythonhosted.org/packages/1d/f0/5a870a099398a2f96f54e893d205fda18b7aa264cf85f50c94e8bc0d3962/gadk-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2265eb8163b48926cc7c1c982cd21e1", "sha256": "494c84cc12dcefa603b94038b3c33f535d1873f2a22981390e5a79750d375423"}, "downloads": -1, "filename": "gadk-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a2265eb8163b48926cc7c1c982cd21e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6181, "upload_time": "2020-04-28T13:54:26", "upload_time_iso_8601": "2020-04-28T13:54:26.806561Z", "url": "https://files.pythonhosted.org/packages/8f/cf/3dd5c20c44803aca96039b75c80a7a89be639c6d8d788a479ddea7696e07/gadk-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9411bd693bf870c2ad5841bafe98629d", "sha256": "51d5b56de729e2fa3f2299c27abd0b2fc025f7142fd11c4e0039731d05921e9d"}, "downloads": -1, "filename": "gadk-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9411bd693bf870c2ad5841bafe98629d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 9533, "upload_time": "2020-04-29T18:04:35", "upload_time_iso_8601": "2020-04-29T18:04:35.884421Z", "url": "https://files.pythonhosted.org/packages/56/6c/f96cff1993a823da1855bf6b9432c55dbf9155b9f7bc58f0db4816be074d/gadk-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "347111750573c279ac064008d89db074", "sha256": "5941720b4e78f3d3f4c1351b91ea483055e7f99b310691bf4470b4977b14e00f"}, "downloads": -1, "filename": "gadk-0.2.0.tar.gz", "has_sig": false, "md5_digest": "347111750573c279ac064008d89db074", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 11081, "upload_time": "2020-04-29T18:04:37", "upload_time_iso_8601": "2020-04-29T18:04:37.088181Z", "url": "https://files.pythonhosted.org/packages/4c/61/5df196fd7d1f8b48ef3afc48a9e73106b5380c98567da29aa9dc392309a4/gadk-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "55795bd32f20b2cde0076ab5c6bef9be", "sha256": "237e325cf671d2adfd884f9d4e5a2c3227535b1c29f7360aae96d2d0e87a7e40"}, "downloads": -1, "filename": "gadk-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "55795bd32f20b2cde0076ab5c6bef9be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 9587, "upload_time": "2020-04-30T07:52:01", "upload_time_iso_8601": "2020-04-30T07:52:01.283070Z", "url": "https://files.pythonhosted.org/packages/d5/6e/af1a4668477269b23b2c8254a489a802510b2a6119d7fe3a9f33b7faa0f2/gadk-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c290d18733201d317fbb882d6be71c7", "sha256": "c2548c2c3cbdb0afc0321de42095c6fd68dadea32cb23e1492122f6bbe9c25a9"}, "downloads": -1, "filename": "gadk-0.2.1.tar.gz", "has_sig": false, "md5_digest": "8c290d18733201d317fbb882d6be71c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 11135, "upload_time": "2020-04-30T07:52:03", "upload_time_iso_8601": "2020-04-30T07:52:03.019815Z", "url": "https://files.pythonhosted.org/packages/d3/1f/9d36c6ee071dd2050382fae821a7996f29bb9cd20e6eec2c3d1c225719d5/gadk-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "7bc708d86d0fbee818d1b5eafaf65ea8", "sha256": "af75e822bbeda150401bb6cd9de6fa004378386fbe4726c3b97cf6ee25cb5767"}, "downloads": -1, "filename": "gadk-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7bc708d86d0fbee818d1b5eafaf65ea8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 9638, "upload_time": "2020-04-30T15:06:49", "upload_time_iso_8601": "2020-04-30T15:06:49.204512Z", "url": "https://files.pythonhosted.org/packages/ae/6b/72ef0e68fa327607f67e118e0650ca3e97b9b4bf775711abaf391ceb85d9/gadk-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6528ee225175b35f1f291528c8afe7d8", "sha256": "157226f9b15a6ac9882102e51f648778379fdf46df415267cbc7625c0366cf55"}, "downloads": -1, "filename": "gadk-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6528ee225175b35f1f291528c8afe7d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 11172, "upload_time": "2020-04-30T15:06:50", "upload_time_iso_8601": "2020-04-30T15:06:50.683913Z", "url": "https://files.pythonhosted.org/packages/d5/cf/386aa0189ea4f2dc761a98ac1d621121259d876a8d6721900231a265f7a0/gadk-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7bc708d86d0fbee818d1b5eafaf65ea8", "sha256": "af75e822bbeda150401bb6cd9de6fa004378386fbe4726c3b97cf6ee25cb5767"}, "downloads": -1, "filename": "gadk-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7bc708d86d0fbee818d1b5eafaf65ea8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 9638, "upload_time": "2020-04-30T15:06:49", "upload_time_iso_8601": "2020-04-30T15:06:49.204512Z", "url": "https://files.pythonhosted.org/packages/ae/6b/72ef0e68fa327607f67e118e0650ca3e97b9b4bf775711abaf391ceb85d9/gadk-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6528ee225175b35f1f291528c8afe7d8", "sha256": "157226f9b15a6ac9882102e51f648778379fdf46df415267cbc7625c0366cf55"}, "downloads": -1, "filename": "gadk-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6528ee225175b35f1f291528c8afe7d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 11172, "upload_time": "2020-04-30T15:06:50", "upload_time_iso_8601": "2020-04-30T15:06:50.683913Z", "url": "https://files.pythonhosted.org/packages/d5/cf/386aa0189ea4f2dc761a98ac1d621121259d876a8d6721900231a265f7a0/gadk-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:23 2020"}