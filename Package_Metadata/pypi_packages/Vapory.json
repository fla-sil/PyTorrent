{"info": {"author": "Zulko", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": ".. image:: http://i.imgur.com/XN7e2IP.gif\n   :alt: [logo]\n   :align: center\n\n\nVapory\n========\n\nVapory is a Python library to render photo-realistic 3D scenes with the free ray-tracing engine `POV-Ray <http://en.wikipedia.org/wiki/POV-Ray/>`_.\n\nHere is how you would draw a purple sphere: ::\n    \n    from vapory import *\n\n    camera = Camera( 'location', [0,2,-3], 'look_at', [0,1,2] )\n    light = LightSource( [2,4,-3], 'color', [1,1,1] )\n    sphere = Sphere( [0,1,2], 2, Texture( Pigment( 'color', [1,0,1] )))\n\n    scene = Scene( camera, objects= [light, sphere])\n    scene.render(\"purple_sphere.png\", width=400, height=300)\n\n\nVapory enables to pipe the rendered images back into Python and integrates very well in the Python libraries ecosystem (see `this blog post <http://zulko.github.io/blog/2014/11/13/things-you-can-do-with-python-and-pov-ray/>`_ for examples)\n\nVapory is an open-source software originally written by Zulko_, released under the MIT licence, and hosted on Github_, where everyone is welcome to contribute or ask for support.\n\n\nInstallation\n--------------\n\nVapory should work on any platform with Python 2.7+ or Python 3.\n\nYou first need to install POV-Ray. See `here <http://www.povray.org/download/>`_ for the Windows binaries. For Linux/MacOS you must `compile the source <https://github.com/POV-Ray/povray/>`_ (tested on Ubuntu, it's easy).\n\nIf you have PIP installed you can : ::\n\n    (sudo) pip install vapory\n\nIf you have neither setuptools nor ez_setup installed the command above will fail, is this case type this before installing: ::\n\n    (sudo) pip install ez_setup\n\n\nVapory can also be installed manually by unzipping the source code in one directory and typing in a terminal: ::\n\n    (sudo) python setup.py install\n\nGetting started\n----------------\n\nIn Vapory you create a scene, and then render it: ::\n    \n    scene = Scene( camera = mycamera , # a Camera object\n               objects= [light, sphere], # POV-Ray objects (items, lights)\n               atmospheric = [fog], # Light-interacting objects\n               included = [\"colors.inc\"]) # headers that POV-Ray may need\n    \n    scene.render(\"my_scene.png\", # output to a PNG image file\n      width = 300, height=200, # in pixels. Determines the camera ratio.\n      antialiasing = 0.01 # The nearer from zero, the more precise the image.\n      quality=1) # quality=1 => no shadow/reflection, quality=10 is 'normal'\n\n    # passing 'ipython' as argument at the end of an IPython Notebook cell\n    # will display the picture in the IPython notebook. \n    scene.render('ipython', width=300, height=500)\n\n    # passing no 'file' arguments returns the rendered image as a RGB numpy array \n    image = scene.render(width=300, height=500)\n\n\nObjects are defined by passing a list of arguments: ::\n    \n    camera = Camera( 'location', [0,2,-3], 'look_at', [0,1,2] )\n    \nKeep in mind that this snippet will later be transformed into POV-Ray code by converting each argument to a string and placing them on different lines, to make a valid POV-Ray code ::\n    \n    camera {\n        location\n        <0,1,0>\n        look_at\n        <0,0,0>\n    }\n\nAll the objects (Sphere, Box, Plane... with a few exceptions) work the same way. Therefore syntax of Vapory is the same as the syntax of POV-Ray. To learn how to use the different objects:\n\n- Have a look at the scenes in the ``examples`` folder\n- See the docstring of the different objects, which provides a basic example.\n- See the online `POV-Ray documentation <http://www.povray.org/documentation/3.7.0/t2_0.html/>`_ which will give you all the possible uses of each object (there can be many !). This documentation is easily accessible from Vapory, just type ```Sphere.help()``, ``Plane.help()`` etc., it will open it in your browser.\n- Finally, it is easy to find POV-Ray examples online and transcribe them back into Vapory.\n\n\nMissing Features\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nFor the moment a many features (Sphere, Fog, etc.) are implemented but not all of them (POV-Ray has a LOT of possible shapes and capabilities).\n\nIt is really easy to add new features, because they all basically do the same thing, are just empty classes. For instance here is how Camera is implemented: ::\n    \n    class Camera(POVRayElement):\n        \"\"\" Camera([type,]  'location', [x,y,z], 'look_at', [x,y,z]) \"\"\"\n\nYep, that's all, but just the name of the class is sufficient for Vapory to understand that this will translate into POV-Ray code ``camera{...}``. So in most case it shouldn't be difficult to create your own new feature. If you need a non-implemented feature to be included in the package, just open an issue or push a commit.\n\n.. _Zulko : https://github.com/Zulko\n.. _Github: https://github.com/Zulko/vapory", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "3D POV-Ray Photo-realistic ray-tracing", "license": "see LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "Vapory", "package_url": "https://pypi.org/project/Vapory/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Vapory/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/Vapory/0.1.01/", "requires_dist": null, "requires_python": null, "summary": "3D rendering with Python and POV-Ray", "version": "0.1.01", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"[logo]\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/729aae3cc96de45a76b978412093bf22c1d714a2/687474703a2f2f692e696d6775722e636f6d2f584e37653249502e676966\">\n<div id=\"vapory\">\n<h2>Vapory</h2>\n<p>Vapory is a Python library to render photo-realistic 3D scenes with the free ray-tracing engine <a href=\"http://en.wikipedia.org/wiki/POV-Ray/\" rel=\"nofollow\">POV-Ray</a>.</p>\n<p>Here is how you would draw a purple sphere:</p>\n<pre>from vapory import *\n\ncamera = Camera( 'location', [0,2,-3], 'look_at', [0,1,2] )\nlight = LightSource( [2,4,-3], 'color', [1,1,1] )\nsphere = Sphere( [0,1,2], 2, Texture( Pigment( 'color', [1,0,1] )))\n\nscene = Scene( camera, objects= [light, sphere])\nscene.render(\"purple_sphere.png\", width=400, height=300)\n</pre>\n<p>Vapory enables to pipe the rendered images back into Python and integrates very well in the Python libraries ecosystem (see <a href=\"http://zulko.github.io/blog/2014/11/13/things-you-can-do-with-python-and-pov-ray/\" rel=\"nofollow\">this blog post</a> for examples)</p>\n<p>Vapory is an open-source software originally written by <a href=\"https://github.com/Zulko\" rel=\"nofollow\">Zulko</a>, released under the MIT licence, and hosted on <a href=\"https://github.com/Zulko/vapory\" rel=\"nofollow\">Github</a>, where everyone is welcome to contribute or ask for support.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Vapory should work on any platform with Python 2.7+ or Python 3.</p>\n<p>You first need to install POV-Ray. See <a href=\"http://www.povray.org/download/\" rel=\"nofollow\">here</a> for the Windows binaries. For Linux/MacOS you must <a href=\"https://github.com/POV-Ray/povray/\" rel=\"nofollow\">compile the source</a> (tested on Ubuntu, it\u2019s easy).</p>\n<p>If you have PIP installed you can :</p>\n<pre>(sudo) pip install vapory\n</pre>\n<p>If you have neither setuptools nor ez_setup installed the command above will fail, is this case type this before installing:</p>\n<pre>(sudo) pip install ez_setup\n</pre>\n<p>Vapory can also be installed manually by unzipping the source code in one directory and typing in a terminal:</p>\n<pre>(sudo) python setup.py install\n</pre>\n</div>\n<div id=\"getting-started\">\n<h3>Getting started</h3>\n<p>In Vapory you create a scene, and then render it:</p>\n<pre>scene = Scene( camera = mycamera , # a Camera object\n           objects= [light, sphere], # POV-Ray objects (items, lights)\n           atmospheric = [fog], # Light-interacting objects\n           included = [\"colors.inc\"]) # headers that POV-Ray may need\n\nscene.render(\"my_scene.png\", # output to a PNG image file\n  width = 300, height=200, # in pixels. Determines the camera ratio.\n  antialiasing = 0.01 # The nearer from zero, the more precise the image.\n  quality=1) # quality=1 =&gt; no shadow/reflection, quality=10 is 'normal'\n\n# passing 'ipython' as argument at the end of an IPython Notebook cell\n# will display the picture in the IPython notebook.\nscene.render('ipython', width=300, height=500)\n\n# passing no 'file' arguments returns the rendered image as a RGB numpy array\nimage = scene.render(width=300, height=500)\n</pre>\n<p>Objects are defined by passing a list of arguments:</p>\n<pre>camera = Camera( 'location', [0,2,-3], 'look_at', [0,1,2] )\n</pre>\n<p>Keep in mind that this snippet will later be transformed into POV-Ray code by converting each argument to a string and placing them on different lines, to make a valid POV-Ray code</p>\n<pre>camera {\n    location\n    &lt;0,1,0&gt;\n    look_at\n    &lt;0,0,0&gt;\n}\n</pre>\n<p>All the objects (Sphere, Box, Plane\u2026 with a few exceptions) work the same way. Therefore syntax of Vapory is the same as the syntax of POV-Ray. To learn how to use the different objects:</p>\n<ul>\n<li>Have a look at the scenes in the <tt>examples</tt> folder</li>\n<li>See the docstring of the different objects, which provides a basic example.</li>\n<li>See the online <a href=\"http://www.povray.org/documentation/3.7.0/t2_0.html/\" rel=\"nofollow\">POV-Ray documentation</a> which will give you all the possible uses of each object (there can be many !). This documentation is easily accessible from Vapory, just type <tt>`Sphere.help()</tt>, <tt>Plane.help()</tt> etc., it will open it in your browser.</li>\n<li>Finally, it is easy to find POV-Ray examples online and transcribe them back into Vapory.</li>\n</ul>\n<div id=\"missing-features\">\n<h4>Missing Features</h4>\n<p>For the moment a many features (Sphere, Fog, etc.) are implemented but not all of them (POV-Ray has a LOT of possible shapes and capabilities).</p>\n<p>It is really easy to add new features, because they all basically do the same thing, are just empty classes. For instance here is how Camera is implemented:</p>\n<pre>class Camera(POVRayElement):\n    \"\"\" Camera([type,]  'location', [x,y,z], 'look_at', [x,y,z]) \"\"\"\n</pre>\n<p>Yep, that\u2019s all, but just the name of the class is sufficient for Vapory to understand that this will translate into POV-Ray code <tt><span class=\"pre\">camera{...}</span></tt>. So in most case it shouldn\u2019t be difficult to create your own new feature. If you need a non-implemented feature to be included in the package, just open an issue or push a commit.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1326736, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1852dcf51b151355270f4975807eac75", "sha256": "862d6f33c333efcf32aab114222928ee3fb0b94a3932ad69d7e268cdfc4c788d"}, "downloads": -1, "filename": "Vapory-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1852dcf51b151355270f4975807eac75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13168, "upload_time": "2014-11-17T14:08:45", "upload_time_iso_8601": "2014-11-17T14:08:45.724557Z", "url": "https://files.pythonhosted.org/packages/b2/98/1ce113babe4eade3d1fa76e7d6ea0ee01cfcf91e05a4d250e757be93757a/Vapory-0.1.0.tar.gz", "yanked": false}], "0.1.01": [{"comment_text": "", "digests": {"md5": "be4a6cf30ffc9ce315e06ca5c7bdd34f", "sha256": "71ae54b507e8fd2b150c2ed96ede9a1caef74d1d7073a9467dabf49736f5dad0"}, "downloads": -1, "filename": "Vapory-0.1.01.tar.gz", "has_sig": false, "md5_digest": "be4a6cf30ffc9ce315e06ca5c7bdd34f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13461, "upload_time": "2014-12-01T15:03:41", "upload_time_iso_8601": "2014-12-01T15:03:41.944796Z", "url": "https://files.pythonhosted.org/packages/9a/3b/c309825ca8fb68f83ec9d55210c625a6cb8d0fef279d0a7c1feb64027f86/Vapory-0.1.01.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be4a6cf30ffc9ce315e06ca5c7bdd34f", "sha256": "71ae54b507e8fd2b150c2ed96ede9a1caef74d1d7073a9467dabf49736f5dad0"}, "downloads": -1, "filename": "Vapory-0.1.01.tar.gz", "has_sig": false, "md5_digest": "be4a6cf30ffc9ce315e06ca5c7bdd34f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13461, "upload_time": "2014-12-01T15:03:41", "upload_time_iso_8601": "2014-12-01T15:03:41.944796Z", "url": "https://files.pythonhosted.org/packages/9a/3b/c309825ca8fb68f83ec9d55210c625a6cb8d0fef279d0a7c1feb64027f86/Vapory-0.1.01.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:52 2020"}