{"info": {"author": "Edwin Eefting", "author_email": "edwin@datux.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# ZFS autobackup\n\n## New in v3\n\n* Complete rewrite, cleaner object oriented code.\n* Python 3 and 2 support.\n* Installable via [pip](https://pypi.org/project/zfs-autobackup/).\n* Backwards compatible with your current backups and parameters.\n* Progressive thinning (via a destroy schedule. default schedule should be fine for most people)\n* Cleaner output, with optional color support (pip install colorama).\n* Clear distinction between local and remote output.\n* Summary at the beginning, displaying what will happen and the current thinning-schedule.\n* More efficient destroying/skipping snapshots on the fly. (no more space issues if your backup is way behind)\n* Progress indicator (--progress)\n* Better property management (--set-properties and --filter-properties)\n* Better resume handling, automatically abort invalid resumes.\n* More robust error handling.\n* Prepared for future enhancements.\n* Supports raw backups for encryption.\n* Custom SSH client config.\n\n## Introduction\n\nThis is a tool I wrote to make replicating ZFS datasets easy and reliable. You can either use it as a backup tool or as a replication tool.\n\nYou can select what to backup by setting a custom `ZFS property`. This allows you to set and forget: Configure it so it backups your entire pool, and you never have to worry about backupping again. Even new datasets you create later will be backupped.\n\nOther settings are just specified on the commandline. This also makes it easier to setup and test zfs-autobackup and helps you fix all the issues you might encounter. When you're done you can just copy/paste your command to a cron or script.\n\nSince its using ZFS commands, you can see what its actually doing by specifying `--debug`. This also helps a lot if you run into some strange problem or error. You can just copy-paste the command that fails and play around with it on the commandline. (also something I missed in other tools)\n\nAn important feature thats missing from other tools is a reliable `--test` option: This allows you to see what zfs-autobackup will do and tune your parameters. It will do everything, except make changes to your zfs datasets.\n\nAnother nice thing is progress reporting with `--progress`. Its very useful with HUGE datasets, when you want to know how many hours/days it will take.\n\nzfs-autobackup tries to be the easiest to use backup tool for zfs.\n\n## Features\n\n* Works across operating systems: Tested with Linux, FreeBSD/FreeNAS and SmartOS.\n* Works in combination with existing replication systems. (Like Proxmox HA)\n* Automatically selects filesystems to backup by looking at a simple ZFS property. (recursive)\n* Creates consistent snapshots. (takes all snapshots at once, atomic.)\n* Multiple backups modes:\n  * Backup local data on the same server.\n  * \"push\" local data to a backup-server via SSH.\n  * \"pull\" remote data from a server via SSH and backup it locally.\n  * Or even pull data from a server while pushing the backup to another server.\n* Can be scheduled via a simple cronjob or run directly from commandline.\n* Supports resuming of interrupted transfers. (via the zfs extensible_dataset feature)\n* Backups and snapshots can be named to prevent conflicts. (multiple backups from and to the same filesystems are no problem)\n* Always creates a new snapshot before starting.\n* Checks everything but tries continue on non-fatal errors when possible. (Reports error-count when done)\n* Ability to 'finish' aborted backups to see what goes wrong.\n* Easy to debug and has a test-mode. Actual unix commands are printed.\n* Keeps latest X snapshots remote and locally. (default 30, configurable)\n* Uses zfs-holds on important snapshots so they cant be accidentally destroyed.\n* Easy installation:\n  * Just install zfs-autobackup via pip, or download it manually.\n  * Written in python and uses zfs-commands, no 3rd party dependency's or libraries.\n  * No separate config files or properties. Just one zfs-autobackup command you can copy/paste in your backup script.\n\n## Installation\n\n### Using pip\n\nThe recommended way on most servers is to use [pip](https://pypi.org/project/zfs-autobackup/):\n\n```console\n[root@server ~]# pip install --upgrade zfs-autobackup\n```\n\nThis can also be used to upgrade zfs-autobackup to the newest stable version.\n\n### Using easy_install\n\nOn older servers you might have to use easy_install\n\n```console\n[root@server ~]# easy_install zfs-autobackup\n```\n\n### Direct download\n\nIts also possible to just download <https://raw.githubusercontent.com/psy0rz/zfs_autobackup/master/bin/zfs-autobackup> and run it directly.\n\nThe only requirement that is sometimes missing is the `argparse` python module. Optionally you can install `colorma` for colors.\n\nIt should work with python 2.7 and higher.\n\n## Example\n\nIn this example we're going to backup a machine called `pve` to a machine called `backup`.\n\n### Setup SSH login\n\nzfs-autobackup needs passwordless login via ssh. This means generating an ssh key and copying it to the remote server.\n\n#### Generate SSH key on `backup`\n\nOn the server that runs zfs-autobackup you need to create an SSH key. You only need to do this once.\n\nUse the `ssh-keygen` command and leave the passphrase empty:\n\n```console\nroot@backup:~# ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:McJhCxvaxvFhO/3e8Lf5gzSrlTWew7/bwrd2U2EHymE root@backup\nThe key's randomart image is:\n+---[RSA 2048]----+\n|    + =          |\n|   + X *    E .  |\n|  . = B +  o o . |\n|   .   o +  o  o.|\n|        S o   .oo|\n|         . + o= +|\n|          . ++==.|\n|            .+o**|\n|           .. +B@|\n+----[SHA256]-----+\nroot@backup:~#\n```\n\n#### Copy SSH key to `pve`\n\nNow you need to copy the public part of the key to `pve`\n\nThe `ssh-copy-id` command is a handy tool to automate this. It will just ask for your password.\n\n```console\nroot@backup:~# ssh-copy-id root@pve.server.com\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/root/.ssh/id_rsa.pub\"\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nPassword:\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'root@pve.server.com'\"\nand check to make sure that only the key(s) you wanted were added.\n\nroot@backup:~#\n```\n\n### Select filesystems to backup\n\nIts important to choose a unique and consistent backup name. In this case we name our backup: `offsite1`.\n\nOn the source zfs system set the ```autobackup:offsite1``` zfs property to true:\n\n```console\n[root@pve ~]# zfs set autobackup:offsite1=true rpool\n[root@pve ~]# zfs get -t filesystem,volume autobackup:offsite1\nNAME                                    PROPERTY             VALUE                SOURCE\nrpool                                   autobackup:offsite1  true                 local\nrpool/ROOT                              autobackup:offsite1  true                 inherited from rpool\nrpool/ROOT/pve-1                        autobackup:offsite1  true                 inherited from rpool\nrpool/data                              autobackup:offsite1  true                 inherited from rpool\nrpool/data/vm-100-disk-0                autobackup:offsite1  true                 inherited from rpool\nrpool/swap                              autobackup:offsite1  true                 inherited from rpool\n...\n```\n\nBecause we don't want to backup everything, we can exclude certain filesystem by setting the property to false:\n\n```console\n[root@pve ~]# zfs set autobackup:offsite1=false rpool/swap\n[root@pve ~]# zfs get -t filesystem,volume autobackup:offsite1\nNAME                                    PROPERTY             VALUE                SOURCE\nrpool                                   autobackup:offsite1  true                 local\nrpool/ROOT                              autobackup:offsite1  true                 inherited from rpool\nrpool/ROOT/pve-1                        autobackup:offsite1  true                 inherited from rpool\nrpool/data                              autobackup:offsite1  true                 inherited from rpool\nrpool/data/vm-100-disk-0                autobackup:offsite1  true                 inherited from rpool\nrpool/swap                              autobackup:offsite1  false                local\n...\n```\n\n### Running zfs-autobackup\n\nRun the script on the backup server and pull the data from the server specified by --ssh-source.\n\n```console\n[root@backup ~]# zfs-autobackup --ssh-source pve.server.com offsite1 backup/pve --progress --verbose\n\n  #### Settings summary\n  [Source] Datasets on: pve.server.com\n  [Source] Keep the last 10 snapshots.\n  [Source] Keep every 1 day, delete after 1 week.\n  [Source] Keep every 1 week, delete after 1 month.\n  [Source] Keep every 1 month, delete after 1 year.\n  [Source] Send all datasets that have 'autobackup:offsite1=true' or 'autobackup:offsite1=child'\n\n  [Target] Datasets are local\n  [Target] Keep the last 10 snapshots.\n  [Target] Keep every 1 day, delete after 1 week.\n  [Target] Keep every 1 week, delete after 1 month.\n  [Target] Keep every 1 month, delete after 1 year.\n  [Target] Receive datasets under: backup/pve\n\n  #### Selecting\n  [Source] rpool: Selected (direct selection)\n  [Source] rpool/ROOT: Selected (inherited selection)\n  [Source] rpool/ROOT/pve-1: Selected (inherited selection)\n  [Source] rpool/data: Selected (inherited selection)\n  [Source] rpool/data/vm-100-disk-0: Selected (inherited selection)\n  [Source] rpool/swap: Ignored (disabled)\n\n  #### Snapshotting\n  [Source] rpool: No changes since offsite1-20200218175435\n  [Source] rpool/ROOT: No changes since offsite1-20200218175435\n  [Source] rpool/data: No changes since offsite1-20200218175435\n  [Source] Creating snapshot offsite1-20200218180123\n\n  #### Sending and thinning\n  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218175435: receiving full\n  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218175547: receiving incremental\n  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218175706: receiving incremental\n  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218180049: receiving incremental\n  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218180123: receiving incremental\n  [Target] backup/pve/rpool/data@offsite1-20200218175435: receiving full\n  [Target] backup/pve/rpool/data/vm-100-disk-0@offsite1-20200218175435: receiving full\n  ...\n```\n\nNote that this is called a \"pull\" backup: The backup server pulls the backup from the server. This is usually the preferred way.\n\nIts also possible to let a server push its backup to the backup-server. However this has security implications. In that case you would setup the SSH keys the other way around and use the --ssh-target parameter on the server.\n\n### Automatic backups\n\nNow every time you run the command, zfs-autobackup will create a new snapshot and replicate your data.\n\nOlder snapshots will eventually be deleted, depending on the `--keep-source` and `--keep-target` settings. (The defaults are shown above under the 'Settings summary')\n\nOnce you've got the correct settings for your situation, you can just store the command in a cronjob.\n\nOr just create a script and run it manually when you need it.\n\n### Thinning out obsolete snapshots\n\nThe thinner is the thing that destroys old snapshots on the source and target.\n\nThe thinner operates \"stateless\": There is nothing in the name or properties of a snapshot that indicates how long it will be kept. Everytime zfs-autobackup runs, it will look at the timestamp of all the existing snapshots. From there it will determine which snapshots are obsolete according to your schedule. The advantage of this stateless system is that you can always change the schedule.\n\nNote that the thinner will ONLY destroy snapshots that are matching the naming pattern of zfs-autobackup. If you use `--other-snapshots`, it wont destroy those snapshots after replicating them to the target.\n\n#### Thinning schedule\n\nThe default thinning schedule is: `10,1d1w,1w1m,1m1y`.\n\nThe schedule consists of multiple rules separated by a `,`\n\nA plain number specifies how many snapshots you want to always keep, regardless of time or interval.\n\nThe format of the other rules is: `<Interval><TTL>`.\n\n* Interval: The minimum interval between the snapshots. Snapshots with intervals smaller than this will be destroyed.\n* TTL: The maximum time to life time of a snapshot, after that they will be destroyed.\n* These are the time units you can use for interval and TTL:\n  * `y`: Years\n  * `m`: Months\n  * `d`: Days\n  * `h`: Hours\n  * `min`: Minutes\n  * `s`: Seconds\n\nSince this might sound very complicated, the `--verbose` option will show you what it all means:\n\n```console\n  [Source] Keep the last 10 snapshots.\n  [Source] Keep every 1 day, delete after 1 week.\n  [Source] Keep every 1 week, delete after 1 month.\n  [Source] Keep every 1 month, delete after 1 year.\n```\n\nA snapshot will only be destroyed if it not needed anymore by ANY of the rules.\n\nYou can specify as many rules as you need. The order of the rules doesn't matter.\n\nKeep in mind its up to you to actually run zfs-autobackup often enough: If you want to keep hourly snapshots, you have to make sure you at least run it every hour.\n\nHowever, its no problem if you run it more or less often than that: The thinner will still do its best to choose an optimal set of snapshots to choose.\n\nIf you want to keep as few snapshots as possible, just specify 0. (`--keep-source=0` for example)\n\nIf you want to keep ALL the snapshots, just specify a very high number.\n\n#### More details about the Thinner\n\nWe will give a practical example of how the thinner operates.\n\nSay we want have 3 thinner rules: \n\n* We want to keep daily snapshots for 7 days.\n* We want to keep weekly snapshots for 4 weeks.\n* We want to keep monthly snapshots for 12 months.\n\nSo far we have taken 4 snapshots at random moments:\n\n![thinner example](https://raw.githubusercontent.com/psy0rz/zfs_autobackup/master/doc/thinner.png)\n\nFor every rule, the thinner will divide the timeline in blocks and assign each snapshot to a block.\n\nA block can only be assigned one snapshot: If multiple snapshots fall into the same block, it only assigns it to the oldest that we want to keep.\n\nThe colors show to which block a snapshot belongs:\n\n* Snapshot 1: This snapshot belongs to daily block 1, weekly block 0 and monthly block 0. However the daily block is too old. \n* Snapshot 2: Since weekly block 0 and monthly block 0 already have a snapshot, it only belongs to daily block 4.\n* Snapshot 3: This snapshot belongs to daily block 8 and weekly block 1.\n* Snapshot 4: Since daily block 8 already has a snapshot, this one doesn't belong to anything and can be deleted right away. (it will be keeped for now since its the last snapshot)\n\nzfs-autobackup will re-evaluate this on every run: As soon as a snapshot doesn't belong to any block anymore it will be destroyed.\n\nSnapshots on the source that still have to be send to the target wont be destroyed off course. (If the target still wants them, according to the target schedule)\n\n## Tips\n\n* Use ```--debug``` if something goes wrong and you want to see the commands that are executed. This will also stop at the first error.\n* You can split up the snapshotting and sending tasks by creating two cronjobs. Use ```--no-send``` for the snapshotter-cronjob and use ```--no-snapshot``` for the send-cronjob. This is usefull if you only want to send at night or if your send take too long.\n* Set the ```readonly``` property of the target filesystem to ```on```. This prevents changes on the target side. (Normally, if there are changes the next backup will fail and will require a zfs rollback.) Note that readonly means you cant change the CONTENTS of the dataset directly. Its still possible to receive new datasets and manipulate properties etc.\n* Use ```--clear-refreservation``` to save space on your backup server.\n* Use ```--clear-mountpoint``` to prevent the target server from mounting the backupped filesystem in the wrong place during a reboot.\n* Use ```--resume``` to be able to resume aborted backups. (not all zfs versions support this)\n\n### Speeding up SSH\n\nYou can make your ssh connections persistent and greatly speed up zfs-autobackup:\n\nOn the backup-server add this to your ~/.ssh/config:\n\n```console\nHost *\n    ControlPath ~/.ssh/control-master-%r@%h:%p\n    ControlMaster auto\n    ControlPersist 3600\n```\n\nThanks @mariusvw :)\n\n### Specifying ssh port or options\n\nThe correct way to do this is by creating ~/.ssh/config:\n\n```console\nHost smartos04\n    Hostname 1.2.3.4\n    Port 1234\n    user root\n    Compression yes\n```\n\nThis way you can just specify \"smartos04\" as host.\n\nAlso uses compression on slow links.\n\nLook in man ssh_config for many more options.\n\n## Usage\n\nHere you find all the options:\n\n```console\n[root@server ~]# zfs-autobackup --help\nusage: zfs-autobackup [-h] [--ssh-config SSH_CONFIG] [--ssh-source SSH_SOURCE]\n                      [--ssh-target SSH_TARGET] [--keep-source KEEP_SOURCE]\n                      [--keep-target KEEP_TARGET] [--other-snapshots]\n                      [--no-snapshot] [--no-send] [--min-change MIN_CHANGE]\n                      [--allow-empty] [--ignore-replicated] [--no-holds]\n                      [--resume] [--strip-path STRIP_PATH]\n                      [--clear-refreservation] [--clear-mountpoint]\n                      [--filter-properties FILTER_PROPERTIES]\n                      [--set-properties SET_PROPERTIES] [--rollback]\n                      [--destroy-incompatible] [--ignore-transfer-errors]\n                      [--raw] [--test] [--verbose] [--debug] [--debug-output]\n                      [--progress]\n                      backup_name target_path\n\nzfs-autobackup v3.0-rc8 - Copyright 2020 E.H.Eefting (edwin@datux.nl)\n\npositional arguments:\n  backup_name           Name of the backup (you should set the zfs property\n                        \"autobackup:backup-name\" to true on filesystems you\n                        want to backup\n  target_path           Target ZFS filesystem\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --ssh-config SSH_CONFIG\n                        Custom ssh client config\n  --ssh-source SSH_SOURCE\n                        Source host to get backup from. (user@hostname)\n                        Default None.\n  --ssh-target SSH_TARGET\n                        Target host to push backup to. (user@hostname) Default\n                        None.\n  --keep-source KEEP_SOURCE\n                        Thinning schedule for old source snapshots. Default:\n                        10,1d1w,1w1m,1m1y\n  --keep-target KEEP_TARGET\n                        Thinning schedule for old target snapshots. Default:\n                        10,1d1w,1w1m,1m1y\n  --other-snapshots     Send over other snapshots as well, not just the ones\n                        created by this tool.\n  --no-snapshot         Dont create new snapshots (usefull for finishing\n                        uncompleted backups, or cleanups)\n  --no-send             Dont send snapshots (usefull for cleanups, or if you\n                        want a separate send-cronjob)\n  --min-change MIN_CHANGE\n                        Number of bytes written after which we consider a\n                        dataset changed (default 1)\n  --allow-empty         If nothing has changed, still create empty snapshots.\n                        (same as --min-change=0)\n  --ignore-replicated   Ignore datasets that seem to be replicated some other\n                        way. (No changes since lastest snapshot. Usefull for\n                        proxmox HA replication)\n  --no-holds            Dont lock snapshots on the source. (Usefull to allow\n                        proxmox HA replication to switches nodes)\n  --resume              Support resuming of interrupted transfers by using the\n                        zfs extensible_dataset feature (both zpools should\n                        have it enabled) Disadvantage is that you need to use\n                        zfs recv -A if another snapshot is created on the\n                        target during a receive. Otherwise it will keep\n                        failing.\n  --strip-path STRIP_PATH\n                        Number of directory to strip from path (use 1 when\n                        cloning zones between 2 SmartOS machines)\n  --clear-refreservation\n                        Filter \"refreservation\" property. (recommended, safes\n                        space. same as --filter-properties refreservation)\n  --clear-mountpoint    Set property canmount=noauto for new datasets.\n                        (recommended, prevents mount conflicts. same as --set-\n                        properties canmount=noauto)\n  --filter-properties FILTER_PROPERTIES\n                        List of properties to \"filter\" when receiving\n                        filesystems. (you can still restore them with zfs\n                        inherit -S)\n  --set-properties SET_PROPERTIES\n                        List of properties to override when receiving\n                        filesystems. (you can still restore them with zfs\n                        inherit -S)\n  --rollback            Rollback changes to the latest target snapshot before\n                        starting. (normally you can prevent changes by setting\n                        the readonly property on the target_path to on)\n  --destroy-incompatible\n                        Destroy incompatible snapshots on target. Use with\n                        care! (implies --rollback)\n  --ignore-transfer-errors\n                        Ignore transfer errors (still checks if received\n                        filesystem exists. usefull for acltype errors)\n  --raw                 For encrypted datasets, send data exactly as it exists\n                        on disk.\n  --test                dont change anything, just show what would be done\n                        (still does all read-only operations)\n  --verbose             verbose output\n  --debug               Show zfs commands that are executed, stops after an\n                        exception.\n  --debug-output        Show zfs commands and their output/exit codes. (noisy)\n  --progress            show zfs progress output (to stderr)\n\nWhen a filesystem fails, zfs_backup will continue and report the number of\nfailures at that end. Also the exit code will indicate the number of failures.\n```\n\n## Troubleshooting\n\n### It keeps asking for my SSH password\n\nYou forgot to setup automatic login via SSH keys, look in the example how to do this.\n\n### It says 'cannot receive incremental stream: invalid backup stream'\n\nThis usually means you've created a new snapshot on the target side during a backup:\n\n* Solution 1: Restart zfs-autobackup and make sure you don't use --resume. If you did use --resume, be sure to \"abort\" the receive on the target side with zfs recv -A.\n* Solution 2: Destroy the newly created snapshot and restart zfs-autobackup.\n\n### It says 'internal error: Invalid argument'\n\nIn some cases (Linux -> FreeBSD) this means certain properties are not fully supported on the target system.\n\nTry using something like: --filter-properties xattr\n\n## Restore example\n\nRestoring can be done with simple zfs commands. For example, use this to restore a specific SmartOS disk image to a temporary restore location:\n\n```console\nroot@fs1:/home/psy#  zfs send fs1/zones/backup/zfsbackups/smartos01.server.com/zones/a3abd6c8-24c6-4125-9e35-192e2eca5908-disk0@smartos01_fs1-20160110000003 | ssh root@2.2.2.2 \"zfs recv zones/restore\"\n```\n\nAfter that you can rename the disk image from the temporary location to the location of a new SmartOS machine you've created.\n\n## Monitoring with Zabbix-jobs\n\nYou can monitor backups by using my zabbix-jobs script. (<https://github.com/psy0rz/stuff/tree/master/zabbix-jobs>)\n\nPut this command directly after the zfs_backup command in your cronjob:\n\n```console\nzabbix-job-status backup_smartos01_fs1 daily $?\n```\n\nThis will update the zabbix server with the exit code and will also alert you if the job didn't run for more than 2 days.\n\n## Backuping up a proxmox cluster with HA replication\n\nDue to the nature of proxmox we had to make a few enhancements to zfs-autobackup. This will probably also benefit other systems that use their own replication in combination with zfs-autobackup.\n\nAll data under rpool/data can be on multiple nodes of the cluster. The naming of those filesystem is unique over the whole cluster. Because of this we should backup rpool/data of all nodes to the same destination. This way we wont have duplicate backups of the filesystems that are replicated. Because of various options, you can even migrate hosts and zfs-autobackup will be fine. (and it will get the next backup from the new node automatically)\n\nIn the example below we have 3 nodes, named h4, h5 and h6.\n\nThe backup will go to a machine named smartos03.\n\n### Preparing the proxmox nodes\n\nOn each node select the filesystems as following:\n\n```console\nroot@h4:~# zfs set autobackup:h4_smartos03=true rpool\nroot@h4:~# zfs set autobackup:h4_smartos03=false rpool/data\nroot@h4:~# zfs set autobackup:data_smartos03=child rpool/data\n```\n\n* rpool will be backuped the usual way, and is named h4_smartos03. (each node will have a unique name)\n* rpool/data will be excluded from the usual backup\n* The CHILDREN of rpool/data be selected for a cluster wide backup named data_smartos03. (each node uses the same backup name)\n\n### Preparing the backup server\n\nExtra options needed for proxmox with HA:\n\n* --no-holds: To allow proxmox to destroy our snapshots if a VM migrates to another node.\n* --ignore-replicated: To ignore the replicated filesystems of proxmox on the receiving proxmox nodes. (e.g: only backup from the node where the VM is active)\n* --min-change 200000: Ignore replicated works by checking if there are no changes since the last snapshot. However for some reason proxmox always has some small changes. (Probably house-keeping data are something? This always was fine and suddenly changed with an update)\n\nI use the following backup script on the backup server:\n\n```shell\nfor H in h4 h5 h6; do\n  echo \"################################### DATA $H\"\n  #backup data filesystems to a common place\n  ./zfs-autobackup --ssh-source root@$H data_smartos03 zones/backup/zfsbackups/pxe1_data --clear-refreservation --clear-mountpoint  --ignore-transfer-errors --strip-path 2 --verbose --resume --ignore-replicated --min-change 200000 --no-holds $@\n  zabbix-job-status backup_$H\"\"_data_smartos03 daily $? >/dev/null 2>/dev/null\n\n  echo \"################################### RPOOL $H\"\n  #backup rpool to own place\n  ./zfs-autobackup --ssh-source root@$H $H\"\"_smartos03 zones/backup/zfsbackups/$H --verbose --clear-refreservation --clear-mountpoint  --resume --ignore-transfer-errors $@\n  zabbix-job-status backup_$H\"\"_smartos03 daily $? >/dev/null 2>/dev/null\ndone\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/psy0rz/zfs_autobackup", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "zfs-autobackup", "package_url": "https://pypi.org/project/zfs-autobackup/", "platform": "", "project_url": "https://pypi.org/project/zfs-autobackup/", "project_urls": {"Homepage": "https://github.com/psy0rz/zfs_autobackup"}, "release_url": "https://pypi.org/project/zfs-autobackup/3.0rc9/", "requires_dist": ["colorama", "argparse"], "requires_python": ">=2.7", "summary": "ZFS autobackup is used to periodicly backup ZFS filesystems to other locations. It tries to be the most friendly to use and easy to debug ZFS backup tool.", "version": "3.0rc9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ZFS autobackup</h1>\n<h2>New in v3</h2>\n<ul>\n<li>Complete rewrite, cleaner object oriented code.</li>\n<li>Python 3 and 2 support.</li>\n<li>Installable via <a href=\"https://pypi.org/project/zfs-autobackup/\" rel=\"nofollow\">pip</a>.</li>\n<li>Backwards compatible with your current backups and parameters.</li>\n<li>Progressive thinning (via a destroy schedule. default schedule should be fine for most people)</li>\n<li>Cleaner output, with optional color support (pip install colorama).</li>\n<li>Clear distinction between local and remote output.</li>\n<li>Summary at the beginning, displaying what will happen and the current thinning-schedule.</li>\n<li>More efficient destroying/skipping snapshots on the fly. (no more space issues if your backup is way behind)</li>\n<li>Progress indicator (--progress)</li>\n<li>Better property management (--set-properties and --filter-properties)</li>\n<li>Better resume handling, automatically abort invalid resumes.</li>\n<li>More robust error handling.</li>\n<li>Prepared for future enhancements.</li>\n<li>Supports raw backups for encryption.</li>\n<li>Custom SSH client config.</li>\n</ul>\n<h2>Introduction</h2>\n<p>This is a tool I wrote to make replicating ZFS datasets easy and reliable. You can either use it as a backup tool or as a replication tool.</p>\n<p>You can select what to backup by setting a custom <code>ZFS property</code>. This allows you to set and forget: Configure it so it backups your entire pool, and you never have to worry about backupping again. Even new datasets you create later will be backupped.</p>\n<p>Other settings are just specified on the commandline. This also makes it easier to setup and test zfs-autobackup and helps you fix all the issues you might encounter. When you're done you can just copy/paste your command to a cron or script.</p>\n<p>Since its using ZFS commands, you can see what its actually doing by specifying <code>--debug</code>. This also helps a lot if you run into some strange problem or error. You can just copy-paste the command that fails and play around with it on the commandline. (also something I missed in other tools)</p>\n<p>An important feature thats missing from other tools is a reliable <code>--test</code> option: This allows you to see what zfs-autobackup will do and tune your parameters. It will do everything, except make changes to your zfs datasets.</p>\n<p>Another nice thing is progress reporting with <code>--progress</code>. Its very useful with HUGE datasets, when you want to know how many hours/days it will take.</p>\n<p>zfs-autobackup tries to be the easiest to use backup tool for zfs.</p>\n<h2>Features</h2>\n<ul>\n<li>Works across operating systems: Tested with Linux, FreeBSD/FreeNAS and SmartOS.</li>\n<li>Works in combination with existing replication systems. (Like Proxmox HA)</li>\n<li>Automatically selects filesystems to backup by looking at a simple ZFS property. (recursive)</li>\n<li>Creates consistent snapshots. (takes all snapshots at once, atomic.)</li>\n<li>Multiple backups modes:\n<ul>\n<li>Backup local data on the same server.</li>\n<li>\"push\" local data to a backup-server via SSH.</li>\n<li>\"pull\" remote data from a server via SSH and backup it locally.</li>\n<li>Or even pull data from a server while pushing the backup to another server.</li>\n</ul>\n</li>\n<li>Can be scheduled via a simple cronjob or run directly from commandline.</li>\n<li>Supports resuming of interrupted transfers. (via the zfs extensible_dataset feature)</li>\n<li>Backups and snapshots can be named to prevent conflicts. (multiple backups from and to the same filesystems are no problem)</li>\n<li>Always creates a new snapshot before starting.</li>\n<li>Checks everything but tries continue on non-fatal errors when possible. (Reports error-count when done)</li>\n<li>Ability to 'finish' aborted backups to see what goes wrong.</li>\n<li>Easy to debug and has a test-mode. Actual unix commands are printed.</li>\n<li>Keeps latest X snapshots remote and locally. (default 30, configurable)</li>\n<li>Uses zfs-holds on important snapshots so they cant be accidentally destroyed.</li>\n<li>Easy installation:\n<ul>\n<li>Just install zfs-autobackup via pip, or download it manually.</li>\n<li>Written in python and uses zfs-commands, no 3rd party dependency's or libraries.</li>\n<li>No separate config files or properties. Just one zfs-autobackup command you can copy/paste in your backup script.</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<h3>Using pip</h3>\n<p>The recommended way on most servers is to use <a href=\"https://pypi.org/project/zfs-autobackup/\" rel=\"nofollow\">pip</a>:</p>\n<pre><span class=\"gp\">[root@server ~]#</span> pip install --upgrade zfs-autobackup\n</pre>\n<p>This can also be used to upgrade zfs-autobackup to the newest stable version.</p>\n<h3>Using easy_install</h3>\n<p>On older servers you might have to use easy_install</p>\n<pre><span class=\"gp\">[root@server ~]#</span> easy_install zfs-autobackup\n</pre>\n<h3>Direct download</h3>\n<p>Its also possible to just download <a href=\"https://raw.githubusercontent.com/psy0rz/zfs_autobackup/master/bin/zfs-autobackup\" rel=\"nofollow\">https://raw.githubusercontent.com/psy0rz/zfs_autobackup/master/bin/zfs-autobackup</a> and run it directly.</p>\n<p>The only requirement that is sometimes missing is the <code>argparse</code> python module. Optionally you can install <code>colorma</code> for colors.</p>\n<p>It should work with python 2.7 and higher.</p>\n<h2>Example</h2>\n<p>In this example we're going to backup a machine called <code>pve</code> to a machine called <code>backup</code>.</p>\n<h3>Setup SSH login</h3>\n<p>zfs-autobackup needs passwordless login via ssh. This means generating an ssh key and copying it to the remote server.</p>\n<h4>Generate SSH key on <code>backup</code></h4>\n<p>On the server that runs zfs-autobackup you need to create an SSH key. You only need to do this once.</p>\n<p>Use the <code>ssh-keygen</code> command and leave the passphrase empty:</p>\n<pre><span class=\"gp\">root@backup:~#</span> ssh-keygen\n<span class=\"go\">Generating public/private rsa key pair.</span>\n<span class=\"go\">Enter file in which to save the key (/root/.ssh/id_rsa):</span>\n<span class=\"go\">Enter passphrase (empty for no passphrase):</span>\n<span class=\"go\">Enter same passphrase again:</span>\n<span class=\"go\">Your identification has been saved in /root/.ssh/id_rsa.</span>\n<span class=\"go\">Your public key has been saved in /root/.ssh/id_rsa.pub.</span>\n<span class=\"go\">The key fingerprint is:</span>\n<span class=\"go\">SHA256:McJhCxvaxvFhO/3e8Lf5gzSrlTWew7/bwrd2U2EHymE root@backup</span>\n<span class=\"go\">The key's randomart image is:</span>\n<span class=\"go\">+---[RSA 2048]----+</span>\n<span class=\"go\">|    + =          |</span>\n<span class=\"go\">|   + X *    E .  |</span>\n<span class=\"go\">|  . = B +  o o . |</span>\n<span class=\"go\">|   .   o +  o  o.|</span>\n<span class=\"go\">|        S o   .oo|</span>\n<span class=\"go\">|         . + o= +|</span>\n<span class=\"go\">|          . ++==.|</span>\n<span class=\"go\">|            .+o**|</span>\n<span class=\"go\">|           .. +B@|</span>\n<span class=\"go\">+----[SHA256]-----+</span>\n<span class=\"gp\">root@backup:~#</span>\n</pre>\n<h4>Copy SSH key to <code>pve</code></h4>\n<p>Now you need to copy the public part of the key to <code>pve</code></p>\n<p>The <code>ssh-copy-id</code> command is a handy tool to automate this. It will just ask for your password.</p>\n<pre><span class=\"gp\">root@backup:~#</span> ssh-copy-id root@pve.server.com\n<span class=\"go\">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/root/.ssh/id_rsa.pub\"</span>\n<span class=\"go\">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span>\n<span class=\"go\">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span>\n<span class=\"go\">Password:</span>\n\n<span class=\"go\">Number of key(s) added: 1</span>\n\n<span class=\"go\">Now try logging into the machine, with:   \"ssh 'root@pve.server.com'\"</span>\n<span class=\"go\">and check to make sure that only the key(s) you wanted were added.</span>\n\n<span class=\"gp\">root@backup:~#</span>\n</pre>\n<h3>Select filesystems to backup</h3>\n<p>Its important to choose a unique and consistent backup name. In this case we name our backup: <code>offsite1</code>.</p>\n<p>On the source zfs system set the <code>autobackup:offsite1</code> zfs property to true:</p>\n<pre><span class=\"gp\">[root@pve ~]#</span> zfs <span class=\"nb\">set</span> autobackup:offsite1<span class=\"o\">=</span><span class=\"nb\">true</span> rpool\n<span class=\"gp\">[root@pve ~]#</span> zfs get -t filesystem,volume autobackup:offsite1\n<span class=\"go\">NAME                                    PROPERTY             VALUE                SOURCE</span>\n<span class=\"go\">rpool                                   autobackup:offsite1  true                 local</span>\n<span class=\"go\">rpool/ROOT                              autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">rpool/ROOT/pve-1                        autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">rpool/data                              autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">rpool/data/vm-100-disk-0                autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">rpool/swap                              autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">...</span>\n</pre>\n<p>Because we don't want to backup everything, we can exclude certain filesystem by setting the property to false:</p>\n<pre><span class=\"gp\">[root@pve ~]#</span> zfs <span class=\"nb\">set</span> autobackup:offsite1<span class=\"o\">=</span><span class=\"nb\">false</span> rpool/swap\n<span class=\"gp\">[root@pve ~]#</span> zfs get -t filesystem,volume autobackup:offsite1\n<span class=\"go\">NAME                                    PROPERTY             VALUE                SOURCE</span>\n<span class=\"go\">rpool                                   autobackup:offsite1  true                 local</span>\n<span class=\"go\">rpool/ROOT                              autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">rpool/ROOT/pve-1                        autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">rpool/data                              autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">rpool/data/vm-100-disk-0                autobackup:offsite1  true                 inherited from rpool</span>\n<span class=\"go\">rpool/swap                              autobackup:offsite1  false                local</span>\n<span class=\"go\">...</span>\n</pre>\n<h3>Running zfs-autobackup</h3>\n<p>Run the script on the backup server and pull the data from the server specified by --ssh-source.</p>\n<pre><span class=\"gp\">[root@backup ~]#</span> zfs-autobackup --ssh-source pve.server.com offsite1 backup/pve --progress --verbose\n\n<span class=\"gp\">  #</span><span class=\"c1\">### Settings summary</span>\n<span class=\"go\">  [Source] Datasets on: pve.server.com</span>\n<span class=\"go\">  [Source] Keep the last 10 snapshots.</span>\n<span class=\"go\">  [Source] Keep every 1 day, delete after 1 week.</span>\n<span class=\"go\">  [Source] Keep every 1 week, delete after 1 month.</span>\n<span class=\"go\">  [Source] Keep every 1 month, delete after 1 year.</span>\n<span class=\"go\">  [Source] Send all datasets that have 'autobackup:offsite1=true' or 'autobackup:offsite1=child'</span>\n\n<span class=\"go\">  [Target] Datasets are local</span>\n<span class=\"go\">  [Target] Keep the last 10 snapshots.</span>\n<span class=\"go\">  [Target] Keep every 1 day, delete after 1 week.</span>\n<span class=\"go\">  [Target] Keep every 1 week, delete after 1 month.</span>\n<span class=\"go\">  [Target] Keep every 1 month, delete after 1 year.</span>\n<span class=\"go\">  [Target] Receive datasets under: backup/pve</span>\n\n<span class=\"gp\">  #</span><span class=\"c1\">### Selecting</span>\n<span class=\"go\">  [Source] rpool: Selected (direct selection)</span>\n<span class=\"go\">  [Source] rpool/ROOT: Selected (inherited selection)</span>\n<span class=\"go\">  [Source] rpool/ROOT/pve-1: Selected (inherited selection)</span>\n<span class=\"go\">  [Source] rpool/data: Selected (inherited selection)</span>\n<span class=\"go\">  [Source] rpool/data/vm-100-disk-0: Selected (inherited selection)</span>\n<span class=\"go\">  [Source] rpool/swap: Ignored (disabled)</span>\n\n<span class=\"gp\">  #</span><span class=\"c1\">### Snapshotting</span>\n<span class=\"go\">  [Source] rpool: No changes since offsite1-20200218175435</span>\n<span class=\"go\">  [Source] rpool/ROOT: No changes since offsite1-20200218175435</span>\n<span class=\"go\">  [Source] rpool/data: No changes since offsite1-20200218175435</span>\n<span class=\"go\">  [Source] Creating snapshot offsite1-20200218180123</span>\n\n<span class=\"gp\">  #</span><span class=\"c1\">### Sending and thinning</span>\n<span class=\"go\">  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218175435: receiving full</span>\n<span class=\"go\">  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218175547: receiving incremental</span>\n<span class=\"go\">  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218175706: receiving incremental</span>\n<span class=\"go\">  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218180049: receiving incremental</span>\n<span class=\"go\">  [Target] backup/pve/rpool/ROOT/pve-1@offsite1-20200218180123: receiving incremental</span>\n<span class=\"go\">  [Target] backup/pve/rpool/data@offsite1-20200218175435: receiving full</span>\n<span class=\"go\">  [Target] backup/pve/rpool/data/vm-100-disk-0@offsite1-20200218175435: receiving full</span>\n<span class=\"go\">  ...</span>\n</pre>\n<p>Note that this is called a \"pull\" backup: The backup server pulls the backup from the server. This is usually the preferred way.</p>\n<p>Its also possible to let a server push its backup to the backup-server. However this has security implications. In that case you would setup the SSH keys the other way around and use the --ssh-target parameter on the server.</p>\n<h3>Automatic backups</h3>\n<p>Now every time you run the command, zfs-autobackup will create a new snapshot and replicate your data.</p>\n<p>Older snapshots will eventually be deleted, depending on the <code>--keep-source</code> and <code>--keep-target</code> settings. (The defaults are shown above under the 'Settings summary')</p>\n<p>Once you've got the correct settings for your situation, you can just store the command in a cronjob.</p>\n<p>Or just create a script and run it manually when you need it.</p>\n<h3>Thinning out obsolete snapshots</h3>\n<p>The thinner is the thing that destroys old snapshots on the source and target.</p>\n<p>The thinner operates \"stateless\": There is nothing in the name or properties of a snapshot that indicates how long it will be kept. Everytime zfs-autobackup runs, it will look at the timestamp of all the existing snapshots. From there it will determine which snapshots are obsolete according to your schedule. The advantage of this stateless system is that you can always change the schedule.</p>\n<p>Note that the thinner will ONLY destroy snapshots that are matching the naming pattern of zfs-autobackup. If you use <code>--other-snapshots</code>, it wont destroy those snapshots after replicating them to the target.</p>\n<h4>Thinning schedule</h4>\n<p>The default thinning schedule is: <code>10,1d1w,1w1m,1m1y</code>.</p>\n<p>The schedule consists of multiple rules separated by a <code>,</code></p>\n<p>A plain number specifies how many snapshots you want to always keep, regardless of time or interval.</p>\n<p>The format of the other rules is: <code>&lt;Interval&gt;&lt;TTL&gt;</code>.</p>\n<ul>\n<li>Interval: The minimum interval between the snapshots. Snapshots with intervals smaller than this will be destroyed.</li>\n<li>TTL: The maximum time to life time of a snapshot, after that they will be destroyed.</li>\n<li>These are the time units you can use for interval and TTL:\n<ul>\n<li><code>y</code>: Years</li>\n<li><code>m</code>: Months</li>\n<li><code>d</code>: Days</li>\n<li><code>h</code>: Hours</li>\n<li><code>min</code>: Minutes</li>\n<li><code>s</code>: Seconds</li>\n</ul>\n</li>\n</ul>\n<p>Since this might sound very complicated, the <code>--verbose</code> option will show you what it all means:</p>\n<pre><span class=\"go\">  [Source] Keep the last 10 snapshots.</span>\n<span class=\"go\">  [Source] Keep every 1 day, delete after 1 week.</span>\n<span class=\"go\">  [Source] Keep every 1 week, delete after 1 month.</span>\n<span class=\"go\">  [Source] Keep every 1 month, delete after 1 year.</span>\n</pre>\n<p>A snapshot will only be destroyed if it not needed anymore by ANY of the rules.</p>\n<p>You can specify as many rules as you need. The order of the rules doesn't matter.</p>\n<p>Keep in mind its up to you to actually run zfs-autobackup often enough: If you want to keep hourly snapshots, you have to make sure you at least run it every hour.</p>\n<p>However, its no problem if you run it more or less often than that: The thinner will still do its best to choose an optimal set of snapshots to choose.</p>\n<p>If you want to keep as few snapshots as possible, just specify 0. (<code>--keep-source=0</code> for example)</p>\n<p>If you want to keep ALL the snapshots, just specify a very high number.</p>\n<h4>More details about the Thinner</h4>\n<p>We will give a practical example of how the thinner operates.</p>\n<p>Say we want have 3 thinner rules:</p>\n<ul>\n<li>We want to keep daily snapshots for 7 days.</li>\n<li>We want to keep weekly snapshots for 4 weeks.</li>\n<li>We want to keep monthly snapshots for 12 months.</li>\n</ul>\n<p>So far we have taken 4 snapshots at random moments:</p>\n<p><img alt=\"thinner example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04c02ffe04f76f43b28a5f06ef561b5599be679c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f70737930727a2f7a66735f6175746f6261636b75702f6d61737465722f646f632f7468696e6e65722e706e67\"></p>\n<p>For every rule, the thinner will divide the timeline in blocks and assign each snapshot to a block.</p>\n<p>A block can only be assigned one snapshot: If multiple snapshots fall into the same block, it only assigns it to the oldest that we want to keep.</p>\n<p>The colors show to which block a snapshot belongs:</p>\n<ul>\n<li>Snapshot 1: This snapshot belongs to daily block 1, weekly block 0 and monthly block 0. However the daily block is too old.</li>\n<li>Snapshot 2: Since weekly block 0 and monthly block 0 already have a snapshot, it only belongs to daily block 4.</li>\n<li>Snapshot 3: This snapshot belongs to daily block 8 and weekly block 1.</li>\n<li>Snapshot 4: Since daily block 8 already has a snapshot, this one doesn't belong to anything and can be deleted right away. (it will be keeped for now since its the last snapshot)</li>\n</ul>\n<p>zfs-autobackup will re-evaluate this on every run: As soon as a snapshot doesn't belong to any block anymore it will be destroyed.</p>\n<p>Snapshots on the source that still have to be send to the target wont be destroyed off course. (If the target still wants them, according to the target schedule)</p>\n<h2>Tips</h2>\n<ul>\n<li>Use <code>--debug</code> if something goes wrong and you want to see the commands that are executed. This will also stop at the first error.</li>\n<li>You can split up the snapshotting and sending tasks by creating two cronjobs. Use <code>--no-send</code> for the snapshotter-cronjob and use <code>--no-snapshot</code> for the send-cronjob. This is usefull if you only want to send at night or if your send take too long.</li>\n<li>Set the <code>readonly</code> property of the target filesystem to <code>on</code>. This prevents changes on the target side. (Normally, if there are changes the next backup will fail and will require a zfs rollback.) Note that readonly means you cant change the CONTENTS of the dataset directly. Its still possible to receive new datasets and manipulate properties etc.</li>\n<li>Use <code>--clear-refreservation</code> to save space on your backup server.</li>\n<li>Use <code>--clear-mountpoint</code> to prevent the target server from mounting the backupped filesystem in the wrong place during a reboot.</li>\n<li>Use <code>--resume</code> to be able to resume aborted backups. (not all zfs versions support this)</li>\n</ul>\n<h3>Speeding up SSH</h3>\n<p>You can make your ssh connections persistent and greatly speed up zfs-autobackup:</p>\n<p>On the backup-server add this to your ~/.ssh/config:</p>\n<pre><span class=\"go\">Host *</span>\n<span class=\"go\">    ControlPath ~/.ssh/control-master-%r@%h:%p</span>\n<span class=\"go\">    ControlMaster auto</span>\n<span class=\"go\">    ControlPersist 3600</span>\n</pre>\n<p>Thanks @mariusvw :)</p>\n<h3>Specifying ssh port or options</h3>\n<p>The correct way to do this is by creating ~/.ssh/config:</p>\n<pre><span class=\"go\">Host smartos04</span>\n<span class=\"go\">    Hostname 1.2.3.4</span>\n<span class=\"go\">    Port 1234</span>\n<span class=\"go\">    user root</span>\n<span class=\"go\">    Compression yes</span>\n</pre>\n<p>This way you can just specify \"smartos04\" as host.</p>\n<p>Also uses compression on slow links.</p>\n<p>Look in man ssh_config for many more options.</p>\n<h2>Usage</h2>\n<p>Here you find all the options:</p>\n<pre><span class=\"gp\">[root@server ~]#</span> zfs-autobackup --help\n<span class=\"go\">usage: zfs-autobackup [-h] [--ssh-config SSH_CONFIG] [--ssh-source SSH_SOURCE]</span>\n<span class=\"go\">                      [--ssh-target SSH_TARGET] [--keep-source KEEP_SOURCE]</span>\n<span class=\"go\">                      [--keep-target KEEP_TARGET] [--other-snapshots]</span>\n<span class=\"go\">                      [--no-snapshot] [--no-send] [--min-change MIN_CHANGE]</span>\n<span class=\"go\">                      [--allow-empty] [--ignore-replicated] [--no-holds]</span>\n<span class=\"go\">                      [--resume] [--strip-path STRIP_PATH]</span>\n<span class=\"go\">                      [--clear-refreservation] [--clear-mountpoint]</span>\n<span class=\"go\">                      [--filter-properties FILTER_PROPERTIES]</span>\n<span class=\"go\">                      [--set-properties SET_PROPERTIES] [--rollback]</span>\n<span class=\"go\">                      [--destroy-incompatible] [--ignore-transfer-errors]</span>\n<span class=\"go\">                      [--raw] [--test] [--verbose] [--debug] [--debug-output]</span>\n<span class=\"go\">                      [--progress]</span>\n<span class=\"go\">                      backup_name target_path</span>\n\n<span class=\"go\">zfs-autobackup v3.0-rc8 - Copyright 2020 E.H.Eefting (edwin@datux.nl)</span>\n\n<span class=\"go\">positional arguments:</span>\n<span class=\"go\">  backup_name           Name of the backup (you should set the zfs property</span>\n<span class=\"go\">                        \"autobackup:backup-name\" to true on filesystems you</span>\n<span class=\"go\">                        want to backup</span>\n<span class=\"go\">  target_path           Target ZFS filesystem</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help            show this help message and exit</span>\n<span class=\"go\">  --ssh-config SSH_CONFIG</span>\n<span class=\"go\">                        Custom ssh client config</span>\n<span class=\"go\">  --ssh-source SSH_SOURCE</span>\n<span class=\"go\">                        Source host to get backup from. (user@hostname)</span>\n<span class=\"go\">                        Default None.</span>\n<span class=\"go\">  --ssh-target SSH_TARGET</span>\n<span class=\"go\">                        Target host to push backup to. (user@hostname) Default</span>\n<span class=\"go\">                        None.</span>\n<span class=\"go\">  --keep-source KEEP_SOURCE</span>\n<span class=\"go\">                        Thinning schedule for old source snapshots. Default:</span>\n<span class=\"go\">                        10,1d1w,1w1m,1m1y</span>\n<span class=\"go\">  --keep-target KEEP_TARGET</span>\n<span class=\"go\">                        Thinning schedule for old target snapshots. Default:</span>\n<span class=\"go\">                        10,1d1w,1w1m,1m1y</span>\n<span class=\"go\">  --other-snapshots     Send over other snapshots as well, not just the ones</span>\n<span class=\"go\">                        created by this tool.</span>\n<span class=\"go\">  --no-snapshot         Dont create new snapshots (usefull for finishing</span>\n<span class=\"go\">                        uncompleted backups, or cleanups)</span>\n<span class=\"go\">  --no-send             Dont send snapshots (usefull for cleanups, or if you</span>\n<span class=\"go\">                        want a separate send-cronjob)</span>\n<span class=\"go\">  --min-change MIN_CHANGE</span>\n<span class=\"go\">                        Number of bytes written after which we consider a</span>\n<span class=\"go\">                        dataset changed (default 1)</span>\n<span class=\"go\">  --allow-empty         If nothing has changed, still create empty snapshots.</span>\n<span class=\"go\">                        (same as --min-change=0)</span>\n<span class=\"go\">  --ignore-replicated   Ignore datasets that seem to be replicated some other</span>\n<span class=\"go\">                        way. (No changes since lastest snapshot. Usefull for</span>\n<span class=\"go\">                        proxmox HA replication)</span>\n<span class=\"go\">  --no-holds            Dont lock snapshots on the source. (Usefull to allow</span>\n<span class=\"go\">                        proxmox HA replication to switches nodes)</span>\n<span class=\"go\">  --resume              Support resuming of interrupted transfers by using the</span>\n<span class=\"go\">                        zfs extensible_dataset feature (both zpools should</span>\n<span class=\"go\">                        have it enabled) Disadvantage is that you need to use</span>\n<span class=\"go\">                        zfs recv -A if another snapshot is created on the</span>\n<span class=\"go\">                        target during a receive. Otherwise it will keep</span>\n<span class=\"go\">                        failing.</span>\n<span class=\"go\">  --strip-path STRIP_PATH</span>\n<span class=\"go\">                        Number of directory to strip from path (use 1 when</span>\n<span class=\"go\">                        cloning zones between 2 SmartOS machines)</span>\n<span class=\"go\">  --clear-refreservation</span>\n<span class=\"go\">                        Filter \"refreservation\" property. (recommended, safes</span>\n<span class=\"go\">                        space. same as --filter-properties refreservation)</span>\n<span class=\"go\">  --clear-mountpoint    Set property canmount=noauto for new datasets.</span>\n<span class=\"go\">                        (recommended, prevents mount conflicts. same as --set-</span>\n<span class=\"go\">                        properties canmount=noauto)</span>\n<span class=\"go\">  --filter-properties FILTER_PROPERTIES</span>\n<span class=\"go\">                        List of properties to \"filter\" when receiving</span>\n<span class=\"go\">                        filesystems. (you can still restore them with zfs</span>\n<span class=\"go\">                        inherit -S)</span>\n<span class=\"go\">  --set-properties SET_PROPERTIES</span>\n<span class=\"go\">                        List of properties to override when receiving</span>\n<span class=\"go\">                        filesystems. (you can still restore them with zfs</span>\n<span class=\"go\">                        inherit -S)</span>\n<span class=\"go\">  --rollback            Rollback changes to the latest target snapshot before</span>\n<span class=\"go\">                        starting. (normally you can prevent changes by setting</span>\n<span class=\"go\">                        the readonly property on the target_path to on)</span>\n<span class=\"go\">  --destroy-incompatible</span>\n<span class=\"go\">                        Destroy incompatible snapshots on target. Use with</span>\n<span class=\"go\">                        care! (implies --rollback)</span>\n<span class=\"go\">  --ignore-transfer-errors</span>\n<span class=\"go\">                        Ignore transfer errors (still checks if received</span>\n<span class=\"go\">                        filesystem exists. usefull for acltype errors)</span>\n<span class=\"go\">  --raw                 For encrypted datasets, send data exactly as it exists</span>\n<span class=\"go\">                        on disk.</span>\n<span class=\"go\">  --test                dont change anything, just show what would be done</span>\n<span class=\"go\">                        (still does all read-only operations)</span>\n<span class=\"go\">  --verbose             verbose output</span>\n<span class=\"go\">  --debug               Show zfs commands that are executed, stops after an</span>\n<span class=\"go\">                        exception.</span>\n<span class=\"go\">  --debug-output        Show zfs commands and their output/exit codes. (noisy)</span>\n<span class=\"go\">  --progress            show zfs progress output (to stderr)</span>\n\n<span class=\"go\">When a filesystem fails, zfs_backup will continue and report the number of</span>\n<span class=\"go\">failures at that end. Also the exit code will indicate the number of failures.</span>\n</pre>\n<h2>Troubleshooting</h2>\n<h3>It keeps asking for my SSH password</h3>\n<p>You forgot to setup automatic login via SSH keys, look in the example how to do this.</p>\n<h3>It says 'cannot receive incremental stream: invalid backup stream'</h3>\n<p>This usually means you've created a new snapshot on the target side during a backup:</p>\n<ul>\n<li>Solution 1: Restart zfs-autobackup and make sure you don't use --resume. If you did use --resume, be sure to \"abort\" the receive on the target side with zfs recv -A.</li>\n<li>Solution 2: Destroy the newly created snapshot and restart zfs-autobackup.</li>\n</ul>\n<h3>It says 'internal error: Invalid argument'</h3>\n<p>In some cases (Linux -&gt; FreeBSD) this means certain properties are not fully supported on the target system.</p>\n<p>Try using something like: --filter-properties xattr</p>\n<h2>Restore example</h2>\n<p>Restoring can be done with simple zfs commands. For example, use this to restore a specific SmartOS disk image to a temporary restore location:</p>\n<pre><span class=\"gp\">root@fs1:/home/psy#</span>  zfs send fs1/zones/backup/zfsbackups/smartos01.server.com/zones/a3abd6c8-24c6-4125-9e35-192e2eca5908-disk0@smartos01_fs1-20160110000003 <span class=\"p\">|</span> ssh root@2.2.2.2 <span class=\"s2\">\"zfs recv zones/restore\"</span>\n</pre>\n<p>After that you can rename the disk image from the temporary location to the location of a new SmartOS machine you've created.</p>\n<h2>Monitoring with Zabbix-jobs</h2>\n<p>You can monitor backups by using my zabbix-jobs script. (<a href=\"https://github.com/psy0rz/stuff/tree/master/zabbix-jobs\" rel=\"nofollow\">https://github.com/psy0rz/stuff/tree/master/zabbix-jobs</a>)</p>\n<p>Put this command directly after the zfs_backup command in your cronjob:</p>\n<pre><span class=\"go\">zabbix-job-status backup_smartos01_fs1 daily $?</span>\n</pre>\n<p>This will update the zabbix server with the exit code and will also alert you if the job didn't run for more than 2 days.</p>\n<h2>Backuping up a proxmox cluster with HA replication</h2>\n<p>Due to the nature of proxmox we had to make a few enhancements to zfs-autobackup. This will probably also benefit other systems that use their own replication in combination with zfs-autobackup.</p>\n<p>All data under rpool/data can be on multiple nodes of the cluster. The naming of those filesystem is unique over the whole cluster. Because of this we should backup rpool/data of all nodes to the same destination. This way we wont have duplicate backups of the filesystems that are replicated. Because of various options, you can even migrate hosts and zfs-autobackup will be fine. (and it will get the next backup from the new node automatically)</p>\n<p>In the example below we have 3 nodes, named h4, h5 and h6.</p>\n<p>The backup will go to a machine named smartos03.</p>\n<h3>Preparing the proxmox nodes</h3>\n<p>On each node select the filesystems as following:</p>\n<pre><span class=\"gp\">root@h4:~#</span> zfs <span class=\"nb\">set</span> autobackup:h4_smartos03<span class=\"o\">=</span><span class=\"nb\">true</span> rpool\n<span class=\"gp\">root@h4:~#</span> zfs <span class=\"nb\">set</span> autobackup:h4_smartos03<span class=\"o\">=</span><span class=\"nb\">false</span> rpool/data\n<span class=\"gp\">root@h4:~#</span> zfs <span class=\"nb\">set</span> autobackup:data_smartos03<span class=\"o\">=</span>child rpool/data\n</pre>\n<ul>\n<li>rpool will be backuped the usual way, and is named h4_smartos03. (each node will have a unique name)</li>\n<li>rpool/data will be excluded from the usual backup</li>\n<li>The CHILDREN of rpool/data be selected for a cluster wide backup named data_smartos03. (each node uses the same backup name)</li>\n</ul>\n<h3>Preparing the backup server</h3>\n<p>Extra options needed for proxmox with HA:</p>\n<ul>\n<li>--no-holds: To allow proxmox to destroy our snapshots if a VM migrates to another node.</li>\n<li>--ignore-replicated: To ignore the replicated filesystems of proxmox on the receiving proxmox nodes. (e.g: only backup from the node where the VM is active)</li>\n<li>--min-change 200000: Ignore replicated works by checking if there are no changes since the last snapshot. However for some reason proxmox always has some small changes. (Probably house-keeping data are something? This always was fine and suddenly changed with an update)</li>\n</ul>\n<p>I use the following backup script on the backup server:</p>\n<pre><span class=\"k\">for</span> H in h4 h5 h6<span class=\"p\">;</span> <span class=\"k\">do</span>\n  <span class=\"nb\">echo</span> <span class=\"s2\">\"################################### DATA </span><span class=\"nv\">$H</span><span class=\"s2\">\"</span>\n  <span class=\"c1\">#backup data filesystems to a common place</span>\n  ./zfs-autobackup --ssh-source root@<span class=\"nv\">$H</span> data_smartos03 zones/backup/zfsbackups/pxe1_data --clear-refreservation --clear-mountpoint  --ignore-transfer-errors --strip-path <span class=\"m\">2</span> --verbose --resume --ignore-replicated --min-change <span class=\"m\">200000</span> --no-holds <span class=\"nv\">$@</span>\n  zabbix-job-status backup_<span class=\"nv\">$H</span><span class=\"s2\">\"\"</span>_data_smartos03 daily <span class=\"nv\">$?</span> &gt;/dev/null <span class=\"m\">2</span>&gt;/dev/null\n\n  <span class=\"nb\">echo</span> <span class=\"s2\">\"################################### RPOOL </span><span class=\"nv\">$H</span><span class=\"s2\">\"</span>\n  <span class=\"c1\">#backup rpool to own place</span>\n  ./zfs-autobackup --ssh-source root@<span class=\"nv\">$H</span> <span class=\"nv\">$H</span><span class=\"s2\">\"\"</span>_smartos03 zones/backup/zfsbackups/<span class=\"nv\">$H</span> --verbose --clear-refreservation --clear-mountpoint  --resume --ignore-transfer-errors <span class=\"nv\">$@</span>\n  zabbix-job-status backup_<span class=\"nv\">$H</span><span class=\"s2\">\"\"</span>_smartos03 daily <span class=\"nv\">$?</span> &gt;/dev/null <span class=\"m\">2</span>&gt;/dev/null\n<span class=\"k\">done</span>\n</pre>\n\n          </div>"}, "last_serial": 6921874, "releases": {"3.0rc2": [{"comment_text": "", "digests": {"md5": "666d0367085906984af2a97b202a5d92", "sha256": "e37cc73754a6598a983c198d7af81f3670dc01b1c92dac769cf012d865b718fc"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "666d0367085906984af2a97b202a5d92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 46671, "upload_time": "2020-02-19T19:46:45", "upload_time_iso_8601": "2020-02-19T19:46:45.384167Z", "url": "https://files.pythonhosted.org/packages/79/7b/29fbfa0cba9d98dfb8d235ae38df424c749381446fc6e427cddd55507641/zfs_autobackup-3.0rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d0f6e15dbcbbe2bed52a4c504a432bb", "sha256": "064228e37169d1128859381c92a40bd81c31be79afbd0bd3c0de5b63a61a45a3"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc2.tar.gz", "has_sig": false, "md5_digest": "1d0f6e15dbcbbe2bed52a4c504a432bb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 38018, "upload_time": "2020-02-19T19:46:46", "upload_time_iso_8601": "2020-02-19T19:46:46.829263Z", "url": "https://files.pythonhosted.org/packages/33/59/9e1e6bac6ef0a239e8f9fbe616fdfe3d9f8903fdc4000924e894636da716/zfs_autobackup-3.0rc2.tar.gz", "yanked": false}], "3.0rc3": [{"comment_text": "", "digests": {"md5": "f07f1fb3ecc58c85be5316ee93e61775", "sha256": "ed5bb7da3a9d5bcdcde13ef3c72f24b4fd272c2ab1118d9c432b414dc60cedbf"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc3-py3-none-any.whl", "has_sig": false, "md5_digest": "f07f1fb3ecc58c85be5316ee93e61775", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 60220, "upload_time": "2020-02-19T19:56:40", "upload_time_iso_8601": "2020-02-19T19:56:40.983946Z", "url": "https://files.pythonhosted.org/packages/0f/e1/78e5eb28ff4352923849bbfde3b108d1590811ecd5e2db42cda89816ab49/zfs_autobackup-3.0rc3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdd5a50e6f220177be42f379462420dc", "sha256": "61e615f294f4cfa9a86c0c7241375942104e7e3942c0d914fad1914e3c5560cd"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc3.tar.gz", "has_sig": false, "md5_digest": "bdd5a50e6f220177be42f379462420dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 50737, "upload_time": "2020-02-19T19:56:42", "upload_time_iso_8601": "2020-02-19T19:56:42.673995Z", "url": "https://files.pythonhosted.org/packages/40/a5/0c882ffd4c0456ea7d5c76fa9826f8f51d8245adf58a70b8e641312d6b2e/zfs_autobackup-3.0rc3.tar.gz", "yanked": false}], "3.0rc4": [{"comment_text": "", "digests": {"md5": "5cb3f9f3e090455fbc09c22b47655ac9", "sha256": "654fe37ab101dc22d863beeb2b6167a76c06f853185201aa913a761b3be47c00"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc4-py3-none-any.whl", "has_sig": false, "md5_digest": "5cb3f9f3e090455fbc09c22b47655ac9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 61641, "upload_time": "2020-02-24T13:14:37", "upload_time_iso_8601": "2020-02-24T13:14:37.231467Z", "url": "https://files.pythonhosted.org/packages/5a/b3/a59eb551b2e5dba7cf20a31341b3f70f3c980eaa99a42681642e2045650e/zfs_autobackup-3.0rc4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba122a45faf9ba5105c394ac1a9953f1", "sha256": "ec7f123b080b67678d0a45b8f8292760ec082fbce31cb001accb89391a3e432c"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc4.tar.gz", "has_sig": false, "md5_digest": "ba122a45faf9ba5105c394ac1a9953f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 40541, "upload_time": "2020-02-24T13:14:38", "upload_time_iso_8601": "2020-02-24T13:14:38.938783Z", "url": "https://files.pythonhosted.org/packages/10/b8/0880b1c3e82fedb551e93847586c19ef0747de2d24c7177a5b692ca83390/zfs_autobackup-3.0rc4.tar.gz", "yanked": false}], "3.0rc7": [{"comment_text": "", "digests": {"md5": "fb56c93a5541f19a570bf707391b8d0a", "sha256": "7d70e1f6077dcf53b3f8897fa184301db5ff364bfea1fbcc4da0f478188f201a"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc7-py3-none-any.whl", "has_sig": false, "md5_digest": "fb56c93a5541f19a570bf707391b8d0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 63922, "upload_time": "2020-03-15T22:08:41", "upload_time_iso_8601": "2020-03-15T22:08:41.114278Z", "url": "https://files.pythonhosted.org/packages/82/b3/14834fd5ef7c442cb0d44fcc0d21d18fbf231f833b89a1d528170d419402/zfs_autobackup-3.0rc7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67d7887c368d69c833288a3a038c6f11", "sha256": "ab090cb637f2852fed58d4466871822b537a6d10e095a2041d69b2f277c1d225"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc7.tar.gz", "has_sig": false, "md5_digest": "67d7887c368d69c833288a3a038c6f11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 43380, "upload_time": "2020-03-15T22:08:42", "upload_time_iso_8601": "2020-03-15T22:08:42.790220Z", "url": "https://files.pythonhosted.org/packages/2d/d3/a48edf9375d023b23b04e483a0aa105347e56f865d99d8534f7692dd1772/zfs_autobackup-3.0rc7.tar.gz", "yanked": false}], "3.0rc8": [{"comment_text": "", "digests": {"md5": "12ccfad226544b79a7ff7ba8fd43e3d7", "sha256": "37f388812fae4f8f3a02ed0312fb0ba40fb6ceb7b0a50c376d4c390fabc76fb7"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc8-py3-none-any.whl", "has_sig": false, "md5_digest": "12ccfad226544b79a7ff7ba8fd43e3d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 64959, "upload_time": "2020-03-17T23:00:10", "upload_time_iso_8601": "2020-03-17T23:00:10.128909Z", "url": "https://files.pythonhosted.org/packages/0f/32/07fd99e7a53159920a99bea9254b5008b3a358f4a2ef157b66925b1d7986/zfs_autobackup-3.0rc8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0324e3b2fba11b212f665ce6e733233b", "sha256": "b665754a22d04cc5135251b059ab5cc47e9f028cbf2e34b66c3a286f8ef78158"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc8.tar.gz", "has_sig": false, "md5_digest": "0324e3b2fba11b212f665ce6e733233b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 44486, "upload_time": "2020-03-17T23:00:11", "upload_time_iso_8601": "2020-03-17T23:00:11.822598Z", "url": "https://files.pythonhosted.org/packages/dd/d7/68097022e51cc661afabc9a3aa5d6e27ae3cc5106045b2db3e6bd1ad04f5/zfs_autobackup-3.0rc8.tar.gz", "yanked": false}], "3.0rc9": [{"comment_text": "", "digests": {"md5": "c9dd4ce98788a6c9392088435b462cac", "sha256": "6d0852ab808b01b7924a1401a90e952c9841628e0ca40ee4233423b687ea35df"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc9-py3-none-any.whl", "has_sig": false, "md5_digest": "c9dd4ce98788a6c9392088435b462cac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 66306, "upload_time": "2020-03-31T18:05:12", "upload_time_iso_8601": "2020-03-31T18:05:12.784825Z", "url": "https://files.pythonhosted.org/packages/63/e9/2641422f3fc961685ee2db7bdd824faad11b950d61d33b49d7fe37becf28/zfs_autobackup-3.0rc9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcd3bb3fdd4c52fdbf5279266ba6b01b", "sha256": "669ae1f31913896857190bf4cefdfce0b43b278736dfff63220a5bd8d99edd16"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc9.tar.gz", "has_sig": false, "md5_digest": "fcd3bb3fdd4c52fdbf5279266ba6b01b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 55956, "upload_time": "2020-03-31T18:05:14", "upload_time_iso_8601": "2020-03-31T18:05:14.403137Z", "url": "https://files.pythonhosted.org/packages/ed/c6/113ae32c903ca81782a93d6076f23d9fd342cf93733739272e281f45d7b3/zfs_autobackup-3.0rc9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c9dd4ce98788a6c9392088435b462cac", "sha256": "6d0852ab808b01b7924a1401a90e952c9841628e0ca40ee4233423b687ea35df"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc9-py3-none-any.whl", "has_sig": false, "md5_digest": "c9dd4ce98788a6c9392088435b462cac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 66306, "upload_time": "2020-03-31T18:05:12", "upload_time_iso_8601": "2020-03-31T18:05:12.784825Z", "url": "https://files.pythonhosted.org/packages/63/e9/2641422f3fc961685ee2db7bdd824faad11b950d61d33b49d7fe37becf28/zfs_autobackup-3.0rc9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcd3bb3fdd4c52fdbf5279266ba6b01b", "sha256": "669ae1f31913896857190bf4cefdfce0b43b278736dfff63220a5bd8d99edd16"}, "downloads": -1, "filename": "zfs_autobackup-3.0rc9.tar.gz", "has_sig": false, "md5_digest": "fcd3bb3fdd4c52fdbf5279266ba6b01b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 55956, "upload_time": "2020-03-31T18:05:14", "upload_time_iso_8601": "2020-03-31T18:05:14.403137Z", "url": "https://files.pythonhosted.org/packages/ed/c6/113ae32c903ca81782a93d6076f23d9fd342cf93733739272e281f45d7b3/zfs_autobackup-3.0rc9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:07 2020"}