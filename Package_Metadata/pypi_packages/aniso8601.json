{"info": {"author": "Brandon Nielsen", "author_email": "nielsenb@jetfuse.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "aniso8601\n=========\n\nAnother ISO 8601 parser for Python\n----------------------------------\n\nFeatures\n========\n* Pure Python implementation\n* Python 3 support\n* Logical behavior\n\n  - Parse a time, get a `datetime.time <http://docs.python.org/2/library/datetime.html#datetime.time>`_\n  - Parse a date, get a `datetime.date <http://docs.python.org/2/library/datetime.html#datetime.date>`_\n  - Parse a datetime, get a `datetime.datetime <http://docs.python.org/2/library/datetime.html#datetime.datetime>`_\n  - Parse a duration, get a `datetime.timedelta <http://docs.python.org/2/library/datetime.html#datetime.timedelta>`_\n  - Parse an interval, get a tuple of dates or datetimes\n  - Parse a repeating interval, get a date or datetime `generator <http://www.python.org/dev/peps/pep-0255/>`_\n\n* UTC offset represented as fixed-offset tzinfo\n* Parser separate from representation, allowing parsing to different datetime formats\n* No regular expressions\n\nInstallation\n============\n\nThe recommended installation method is to use pip::\n\n  $ pip install aniso8601\n\nAlternatively, you can download the source (git repository hosted at `Bitbucket <https://bitbucket.org/nielsenb/aniso8601>`_) and install directly::\n\n  $ python setup.py install\n\nUse\n===\n\nParsing datetimes\n-----------------\n\nTo parse a typical ISO 8601 datetime string::\n\n  >>> import aniso8601\n  >>> aniso8601.parse_datetime('1977-06-10T12:00:00Z')\n  datetime.datetime(1977, 6, 10, 12, 0, tzinfo=+0:00:00 UTC)\n\nAlternative delimiters can be specified, for example, a space::\n\n  >>> aniso8601.parse_datetime('1977-06-10 12:00:00Z', delimiter=' ')\n  datetime.datetime(1977, 6, 10, 12, 0, tzinfo=+0:00:00 UTC)\n\nUTC offsets are supported::\n\n  >>> aniso8601.parse_datetime('1979-06-05T08:00:00-08:00')\n  datetime.datetime(1979, 6, 5, 8, 0, tzinfo=-8:00:00 UTC)\n\nIf a UTC offset is not specified, the returned datetime will be naive::\n\n  >>> aniso8601.parse_datetime('1983-01-22T08:00:00')\n  datetime.datetime(1983, 1, 22, 8, 0)\n\nLeap seconds are currently not supported and attempting to parse one raises a :code:`LeapSecondError`::\n\n  >>> aniso8601.parse_datetime('2018-03-06T23:59:60')\n  Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    File \"aniso8601/time.py\", line 131, in parse_datetime\n      return builder.build_datetime(datepart, timepart)\n    File \"aniso8601/builder.py\", line 300, in build_datetime\n      cls._build_object(time))\n    File \"aniso8601/builder.py\", line 71, in _build_object\n      ss=parsetuple[2], tz=parsetuple[3])\n    File \"aniso8601/builder.py\", line 253, in build_time\n      raise LeapSecondError('Leap seconds are not supported.')\n  aniso8601.exceptions.LeapSecondError: Leap seconds are not supported.\n\nParsing dates\n-------------\n\nTo parse a date represented in an ISO 8601 string::\n\n  >>> import aniso8601\n  >>> aniso8601.parse_date('1984-04-23')\n  datetime.date(1984, 4, 23)\n\nBasic format is supported as well::\n\n  >>> aniso8601.parse_date('19840423')\n  datetime.date(1984, 4, 23)\n\nTo parse a date using the ISO 8601 week date format::\n\n  >>> aniso8601.parse_date('1986-W38-1')\n  datetime.date(1986, 9, 15)\n\nTo parse an ISO 8601 ordinal date::\n\n  >>> aniso8601.parse_date('1988-132')\n  datetime.date(1988, 5, 11)\n\nParsing times\n-------------\n\nTo parse a time formatted as an ISO 8601 string::\n\n  >>> import aniso8601\n  >>> aniso8601.parse_time('11:31:14')\n  datetime.time(11, 31, 14)\n\nAs with all of the above, basic format is supported::\n\n  >>> aniso8601.parse_time('113114')\n  datetime.time(11, 31, 14)\n\nA UTC offset can be specified for times::\n\n  >>> aniso8601.parse_time('17:18:19-02:30')\n  datetime.time(17, 18, 19, tzinfo=-2:30:00 UTC)\n  >>> aniso8601.parse_time('171819Z')\n  datetime.time(17, 18, 19, tzinfo=+0:00:00 UTC)\n\nReduced accuracy is supported::\n\n  >>> aniso8601.parse_time('21:42')\n  datetime.time(21, 42)\n  >>> aniso8601.parse_time('22')\n  datetime.time(22, 0)\n\nA decimal fraction is always allowed on the lowest order element of an ISO 8601 formatted time::\n\n  >>> aniso8601.parse_time('22:33.5')\n  datetime.time(22, 33, 30)\n  >>> aniso8601.parse_time('23.75')\n  datetime.time(23, 45)\n\nThe decimal fraction can be specified with a comma instead of a full-stop::\n\n  >>> aniso8601.parse_time('22:33,5')\n  datetime.time(22, 33, 30)\n  >>> aniso8601.parse_time('23,75')\n  datetime.time(23, 45)\n\nLeap seconds are currently not supported and attempting to parse one raises a :code:`LeapSecondError`::\n\n  >>> aniso8601.parse_time('23:59:60')\n  Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    File \"aniso8601/time.py\", line 116, in parse_time\n      return _RESOLUTION_MAP[get_time_resolution(timestr)](timestr, tz, builder)\n    File \"aniso8601/time.py\", line 165, in _parse_second_time\n      return builder.build_time(hh=hourstr, mm=minutestr, ss=secondstr, tz=tz)\n    File \"aniso8601/builder.py\", line 253, in build_time\n      raise LeapSecondError('Leap seconds are not supported.')\n  aniso8601.exceptions.LeapSecondError: Leap seconds are not supported.\n\nParsing durations\n-----------------\n\nTo parse a duration formatted as an ISO 8601 string::\n\n  >>> import aniso8601\n  >>> aniso8601.parse_duration('P1Y2M3DT4H54M6S')\n  datetime.timedelta(428, 17646)\n\nReduced accuracy is supported::\n\n  >>> aniso8601.parse_duration('P1Y')\n  datetime.timedelta(365)\n\nA decimal fraction is allowed on the lowest order element::\n\n  >>> aniso8601.parse_duration('P1YT3.5M')\n  datetime.timedelta(365, 210)\n\nThe decimal fraction can be specified with a comma instead of a full-stop::\n\n  >>> aniso8601.parse_duration('P1YT3,5M')\n  datetime.timedelta(365, 210)\n\nParsing a duration from a combined date and time is supported as well::\n\n  >>> aniso8601.parse_duration('P0001-01-02T01:30:5')\n  datetime.timedelta(397, 5405)\n\nParsing intervals\n-----------------\n\nTo parse an interval specified by a start and end::\n\n  >>> import aniso8601\n  >>> aniso8601.parse_interval('2007-03-01T13:00:00/2008-05-11T15:30:00')\n  (datetime.datetime(2007, 3, 1, 13, 0), datetime.datetime(2008, 5, 11, 15, 30))\n\nIntervals specified by a start time and a duration are supported::\n\n  >>> aniso8601.parse_interval('2007-03-01T13:00:00Z/P1Y2M10DT2H30M')\n  (datetime.datetime(2007, 3, 1, 13, 0, tzinfo=+0:00:00 UTC), datetime.datetime(2008, 5, 9, 15, 30, tzinfo=+0:00:00 UTC))\n\nA duration can also be specified by a duration and end time::\n\n  >>> aniso8601.parse_interval('P1M/1981-04-05')\n  (datetime.date(1981, 4, 5), datetime.date(1981, 3, 6))\n\nNotice that the result of the above parse is not in order from earliest to latest. If sorted intervals are required, simply use the :code:`sorted` keyword as shown below::\n\n  >>> sorted(aniso8601.parse_interval('P1M/1981-04-05'))\n  [datetime.date(1981, 3, 6), datetime.date(1981, 4, 5)]\n\nThe end of an interval is returned as a datetime when required to maintain the resolution specified by a duration, even if the duration start is given as a date::\n\n  >>> aniso8601.parse_interval('2014-11-12/PT4H54M6.5S')\n  (datetime.date(2014, 11, 12), datetime.datetime(2014, 11, 12, 4, 54, 6, 500000))\n  >>> aniso8601.parse_interval('2007-03-01/P1.5D')\n  (datetime.date(2007, 3, 1), datetime.datetime(2007, 3, 2, 12, 0))\n\nRepeating intervals are supported as well, and return a generator::\n\n  >>> aniso8601.parse_repeating_interval('R3/1981-04-05/P1D')\n  <generator object _date_generator at 0x7fd800d3b320>\n  >>> list(aniso8601.parse_repeating_interval('R3/1981-04-05/P1D'))\n  [datetime.date(1981, 4, 5), datetime.date(1981, 4, 6), datetime.date(1981, 4, 7)]\n\nRepeating intervals are allowed to go in the reverse direction::\n\n  >>> list(aniso8601.parse_repeating_interval('R2/PT1H2M/1980-03-05T01:01:00'))\n  [datetime.datetime(1980, 3, 5, 1, 1), datetime.datetime(1980, 3, 4, 23, 59)]\n\nUnbounded intervals are also allowed (Python 2)::\n\n  >>> result = aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00')\n  >>> result.next()\n  datetime.datetime(1980, 3, 5, 1, 1)\n  >>> result.next()\n  datetime.datetime(1980, 3, 4, 23, 59)\n\nor for Python 3::\n\n  >>> result = aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00')\n  >>> next(result)\n  datetime.datetime(1980, 3, 5, 1, 1)\n  >>> next(result)\n  datetime.datetime(1980, 3, 4, 23, 59)\n\nNote that you should never try to convert a generator produced by an unbounded interval to a list::\n\n  >>> list(aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00'))\n  Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    File \"aniso8601/builders/python.py\", line 463, in _date_generator_unbounded\n      currentdate += timedelta\n  OverflowError: date value out of range\n\nDate and time resolution\n------------------------\n\nIn some situations, it may be useful to figure out the resolution provided by an ISO 8601 date or time string. Two functions are provided for this purpose.\n\nTo get the resolution of a ISO 8601 time string::\n\n  >>> aniso8601.get_time_resolution('11:31:14') == aniso8601.resolution.TimeResolution.Seconds\n  True\n  >>> aniso8601.get_time_resolution('11:31') == aniso8601.resolution.TimeResolution.Minutes\n  True\n  >>> aniso8601.get_time_resolution('11') == aniso8601.resolution.TimeResolution.Hours\n  True\n\nSimilarly, for an ISO 8601 date string::\n\n  >>> aniso8601.get_date_resolution('1981-04-05') == aniso8601.resolution.DateResolution.Day\n  True\n  >>> aniso8601.get_date_resolution('1981-04') == aniso8601.resolution.DateResolution.Month\n  True\n  >>> aniso8601.get_date_resolution('1981') == aniso8601.resolution.DateResolution.Year\n  True\n\nBuilders\n========\n\nBuilders can be used to change the output format of a parse operation. All parse functions have a :code:`builder` keyword argument which accepts a builder class.\n\nTwo builders are included. The :code:`PythonTimeBuilder` (the default) in the  :code:`aniso8601.builders.python` module, and the :code:`TupleBuilder` which returns the parse result as a tuple of strings and is located in the :code:`aniso8601.builders` module.\n\nThe following builders are available as separate projects:\n\n* `RelativeTimeBuilder <https://bitbucket.org/nielsenb/relativetimebuilder>`_ supports parsing to `datetutil relativedelta types <https://dateutil.readthedocs.io/en/stable/relativedelta.html>`_ for calendar level accuracy\n* `AttoTimeBuilder <https://bitbucket.org/nielsenb/attotimebuilder>`_ supports parsing directly to `attotime attodatetime and attotimedelta types <https://bitbucket.org/nielsenb/attotime>`_ which support sub-nanosecond precision\n* `NumPyTimeBuilder <https://bitbucket.org/nielsenb/numpytimebuilder>`_ supports parsing directly to `NumPy datetime64 and timedelta64 types <https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html>`_\n\nTupleBuilder\n------------\n\nThe :code:`TupleBuilder` returns parse results as tuples of strings. It is located in the :code:`aniso8601.builders` module.\n\nDatetimes\n^^^^^^^^^\n\nParsing a datetime returns a tuple containing a date tuple as a collection of strings, a time tuple as a collection of strings, and the 'datetime' string. The date tuple contains the following parse components: :code:`(YYYY, MM, DD, Www, D, DDD, 'date')`. The time tuple contains the following parse components :code:`(hh, mm, ss, tz, 'time')`, where :code:`tz` is a tuple with the following components :code:`(negative, Z, hh, mm, name, 'timezone')` with :code:`negative` and :code:`Z` being booleans::\n\n  >>> import aniso8601\n  >>> from aniso8601.builders import TupleBuilder\n  >>> aniso8601.parse_datetime('1977-06-10T12:00:00', builder=TupleBuilder)\n  (('1977', '06', '10', None, None, None, 'date'), ('12', '00', '00', None, 'time'), 'datetime')\n  >>> aniso8601.parse_datetime('1979-06-05T08:00:00-08:00', builder=TupleBuilder)\n  (('1979', '06', '05', None, None, None, 'date'), ('08', '00', '00', (True, None, '08', '00', '-08:00', 'timezone'), 'time'), 'datetime')\n\nDates\n^^^^^\n\nParsing a date returns a tuple containing the following parse components: :code:`(YYYY, MM, DD, Www, D, DDD, 'date')`::\n\n  >>> import aniso8601\n  >>> from aniso8601.builders import TupleBuilder\n  >>> aniso8601.parse_date('1984-04-23', builder=TupleBuilder)\n  ('1984', '04', '23', None, None, None, 'date')\n  >>> aniso8601.parse_date('1986-W38-1', builder=TupleBuilder)\n  ('1986', None, None, '38', '1', None, 'date')\n  >>> aniso8601.parse_date('1988-132', builder=TupleBuilder)\n  ('1988', None, None, None, None, '132', 'date')\n\nTimes\n^^^^^\n\nParsing a time returns a tuple containing following parse components: :code:`(hh, mm, ss, tz, 'time')`, where :code:`tz` is a tuple with the following components :code:`(negative, Z, hh, mm, name, 'timezone')` with :code:`negative` and :code:`Z` being booleans::\n\n  >>> import aniso8601\n  >>> from aniso8601.builders import TupleBuilder\n  >>> aniso8601.parse_time('11:31:14', builder=TupleBuilder)\n  ('11', '31', '14', None, 'time')\n  >>> aniso8601.parse_time('171819Z', builder=TupleBuilder)\n  ('17', '18', '19', (False, True, None, None, 'Z', 'timezone'), 'time')\n  >>> aniso8601.parse_time('17:18:19-02:30', builder=TupleBuilder)\n  ('17', '18', '19', (True, None, '02', '30', '-02:30', 'timezone'), 'time')\n\nDurations\n^^^^^^^^^\n\nParsing a duration returns a tuple containing the following parse components: :code:`(PnY, PnM, PnW, PnD, TnH, TnM, TnS, 'duration')`::\n\n  >>> import aniso8601\n  >>> from aniso8601.builders import TupleBuilder\n  >>> aniso8601.parse_duration('P1Y2M3DT4H54M6S', builder=TupleBuilder)\n  ('1', '2', None, '3', '4', '54', '6', 'duration')\n  >>> aniso8601.parse_duration('P7W', builder=TupleBuilder)\n  (None, None, '7', None, None, None, None, 'duration')\n\nIntervals\n^^^^^^^^^\n\nParsing an interval returns a tuple containing the following parse components: :code:`(start, end, duration, 'interval')`, :code:`start` and :code:`end` may both be datetime or date tuples, :code:`duration` is a duration tuple::\n\n  >>> import aniso8601\n  >>> from aniso8601.builders import TupleBuilder\n  >>> aniso8601.parse_interval('2007-03-01T13:00:00/2008-05-11T15:30:00', builder=TupleBuilder)\n  ((('2007', '03', '01', None, None, None, 'date'), ('13', '00', '00', None, 'time'), 'datetime'), (('2008', '05', '11', None, None, None, 'date'), ('15', '30', '00', None, 'time'), 'datetime'), None, 'interval')\n  >>> aniso8601.parse_interval('2007-03-01T13:00:00Z/P1Y2M10DT2H30M', builder=TupleBuilder)\n  ((('2007', '03', '01', None, None, None, 'date'), ('13', '00', '00', (False, True, None, None, 'Z', 'timezone'), 'time'), 'datetime'), None, ('1', '2', None, '10', '2', '30', None, 'duration'), 'interval')\n  >>> aniso8601.parse_interval('P1M/1981-04-05', builder=TupleBuilder)\n  (None, ('1981', '04', '05', None, None, None, 'date'), (None, '1', None, None, None, None, None, 'duration'), 'interval')\n\nA repeating interval returns a tuple containing the following parse components: :code:`(R, Rnn, interval, 'repeatinginterval')` where :code:`R` is a boolean, :code:`True` for an unbounded interval, :code:`False` otherwise.::\n\n  >>> aniso8601.parse_repeating_interval('R3/1981-04-05/P1D', builder=TupleBuilder)\n  (False, '3', (('1981', '04', '05', None, None, None, 'date'), None, (None, None, None, '1', None, None, None, 'duration'), 'interval'), 'repeatinginterval')\n  >>> aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00', builder=TupleBuilder)\n  (True, None, (None, (('1980', '03', '05', None, None, None, 'date'), ('01', '01', '00', None, 'time'), 'datetime'), (None, None, None, None, '1', '2', None, 'duration'), 'interval'), 'repeatinginterval')\n\nDevelopment\n===========\n\nSetup\n-----\n\nIt is recommended to develop using a `virtualenv <https://virtualenv.pypa.io/en/stable/>`_.\n\nTests\n-----\n\nTests can be run using `setuptools <https://setuptools.readthedocs.io/en/latest/setuptools.html>`::\n\n   $ python setup.py test\n\nContributing\n============\n\naniso8601 is an open source project hosted on `Bitbucket <https://bitbucket.org/nielsenb/aniso8601>`_.\n\nAny and all bugs are welcome on our `issue tracker <https://bitbucket.org/nielsenb/aniso8601/issues>`_.\nOf particular interest are valid ISO 8601 strings that don't parse, or invalid ones that do. At a minimum,\nbug reports should include an example of the misbehaving string, as well as the expected result. Of course\npatches containing unit tests (or fixed bugs) are welcome!\n\nReferences\n==========\n\n* `ISO 8601:2004(E) <http://dotat.at/tmp/ISO_8601-2004_E.pdf>`_ (Caution, PDF link)\n* `Wikipedia article on ISO 8601 <http://en.wikipedia.org/wiki/Iso8601>`_\n* `Discussion on alternative ISO 8601 parsers for Python <https://groups.google.com/forum/#!topic/comp.lang.python/Q2w4R89Nq1w>`_\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/nielsenb/aniso8601", "keywords": "iso8601 parser", "license": "", "maintainer": "", "maintainer_email": "", "name": "aniso8601", "package_url": "https://pypi.org/project/aniso8601/", "platform": "", "project_url": "https://pypi.org/project/aniso8601/", "project_urls": {"Documentation": "https://aniso8601.readthedocs.io/", "Homepage": "https://bitbucket.org/nielsenb/aniso8601", "Source": "https://bitbucket.org/nielsenb/aniso8601", "Tracker": "https://bitbucket.org/nielsenb/aniso8601/issues"}, "release_url": "https://pypi.org/project/aniso8601/8.0.0/", "requires_dist": null, "requires_python": "", "summary": "A library for parsing ISO 8601 strings.", "version": "8.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"aniso8601\">\n<h2>aniso8601</h2>\n<h2 id=\"another-iso-8601-parser-for-python\"><span class=\"section-subtitle\">Another ISO 8601 parser for Python</span></h2>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Pure Python implementation</li>\n<li>Python 3 support</li>\n<li>Logical behavior<ul>\n<li>Parse a time, get a <a href=\"http://docs.python.org/2/library/datetime.html#datetime.time\" rel=\"nofollow\">datetime.time</a></li>\n<li>Parse a date, get a <a href=\"http://docs.python.org/2/library/datetime.html#datetime.date\" rel=\"nofollow\">datetime.date</a></li>\n<li>Parse a datetime, get a <a href=\"http://docs.python.org/2/library/datetime.html#datetime.datetime\" rel=\"nofollow\">datetime.datetime</a></li>\n<li>Parse a duration, get a <a href=\"http://docs.python.org/2/library/datetime.html#datetime.timedelta\" rel=\"nofollow\">datetime.timedelta</a></li>\n<li>Parse an interval, get a tuple of dates or datetimes</li>\n<li>Parse a repeating interval, get a date or datetime <a href=\"http://www.python.org/dev/peps/pep-0255/\" rel=\"nofollow\">generator</a></li>\n</ul>\n</li>\n<li>UTC offset represented as fixed-offset tzinfo</li>\n<li>Parser separate from representation, allowing parsing to different datetime formats</li>\n<li>No regular expressions</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The recommended installation method is to use pip:</p>\n<pre>$ pip install aniso8601\n</pre>\n<p>Alternatively, you can download the source (git repository hosted at <a href=\"https://bitbucket.org/nielsenb/aniso8601\" rel=\"nofollow\">Bitbucket</a>) and install directly:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"use\">\n<h2>Use</h2>\n<div id=\"parsing-datetimes\">\n<h3>Parsing datetimes</h3>\n<p>To parse a typical ISO 8601 datetime string:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10T12:00:00Z')\ndatetime.datetime(1977, 6, 10, 12, 0, tzinfo=+0:00:00 UTC)\n</pre>\n<p>Alternative delimiters can be specified, for example, a space:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10 12:00:00Z', delimiter=' ')\ndatetime.datetime(1977, 6, 10, 12, 0, tzinfo=+0:00:00 UTC)\n</pre>\n<p>UTC offsets are supported:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_datetime('1979-06-05T08:00:00-08:00')\ndatetime.datetime(1979, 6, 5, 8, 0, tzinfo=-8:00:00 UTC)\n</pre>\n<p>If a UTC offset is not specified, the returned datetime will be naive:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_datetime('1983-01-22T08:00:00')\ndatetime.datetime(1983, 1, 22, 8, 0)\n</pre>\n<p>Leap seconds are currently not supported and attempting to parse one raises a <code>LeapSecondError</code>:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_datetime('2018-03-06T23:59:60')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"aniso8601/time.py\", line 131, in parse_datetime\n    return builder.build_datetime(datepart, timepart)\n  File \"aniso8601/builder.py\", line 300, in build_datetime\n    cls._build_object(time))\n  File \"aniso8601/builder.py\", line 71, in _build_object\n    ss=parsetuple[2], tz=parsetuple[3])\n  File \"aniso8601/builder.py\", line 253, in build_time\n    raise LeapSecondError('Leap seconds are not supported.')\naniso8601.exceptions.LeapSecondError: Leap seconds are not supported.\n</pre>\n</div>\n<div id=\"parsing-dates\">\n<h3>Parsing dates</h3>\n<p>To parse a date represented in an ISO 8601 string:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; aniso8601.parse_date('1984-04-23')\ndatetime.date(1984, 4, 23)\n</pre>\n<p>Basic format is supported as well:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_date('19840423')\ndatetime.date(1984, 4, 23)\n</pre>\n<p>To parse a date using the ISO 8601 week date format:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_date('1986-W38-1')\ndatetime.date(1986, 9, 15)\n</pre>\n<p>To parse an ISO 8601 ordinal date:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_date('1988-132')\ndatetime.date(1988, 5, 11)\n</pre>\n</div>\n<div id=\"parsing-times\">\n<h3>Parsing times</h3>\n<p>To parse a time formatted as an ISO 8601 string:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; aniso8601.parse_time('11:31:14')\ndatetime.time(11, 31, 14)\n</pre>\n<p>As with all of the above, basic format is supported:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_time('113114')\ndatetime.time(11, 31, 14)\n</pre>\n<p>A UTC offset can be specified for times:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_time('17:18:19-02:30')\ndatetime.time(17, 18, 19, tzinfo=-2:30:00 UTC)\n&gt;&gt;&gt; aniso8601.parse_time('171819Z')\ndatetime.time(17, 18, 19, tzinfo=+0:00:00 UTC)\n</pre>\n<p>Reduced accuracy is supported:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_time('21:42')\ndatetime.time(21, 42)\n&gt;&gt;&gt; aniso8601.parse_time('22')\ndatetime.time(22, 0)\n</pre>\n<p>A decimal fraction is always allowed on the lowest order element of an ISO 8601 formatted time:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_time('22:33.5')\ndatetime.time(22, 33, 30)\n&gt;&gt;&gt; aniso8601.parse_time('23.75')\ndatetime.time(23, 45)\n</pre>\n<p>The decimal fraction can be specified with a comma instead of a full-stop:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_time('22:33,5')\ndatetime.time(22, 33, 30)\n&gt;&gt;&gt; aniso8601.parse_time('23,75')\ndatetime.time(23, 45)\n</pre>\n<p>Leap seconds are currently not supported and attempting to parse one raises a <code>LeapSecondError</code>:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_time('23:59:60')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"aniso8601/time.py\", line 116, in parse_time\n    return _RESOLUTION_MAP[get_time_resolution(timestr)](timestr, tz, builder)\n  File \"aniso8601/time.py\", line 165, in _parse_second_time\n    return builder.build_time(hh=hourstr, mm=minutestr, ss=secondstr, tz=tz)\n  File \"aniso8601/builder.py\", line 253, in build_time\n    raise LeapSecondError('Leap seconds are not supported.')\naniso8601.exceptions.LeapSecondError: Leap seconds are not supported.\n</pre>\n</div>\n<div id=\"parsing-durations\">\n<h3>Parsing durations</h3>\n<p>To parse a duration formatted as an ISO 8601 string:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; aniso8601.parse_duration('P1Y2M3DT4H54M6S')\ndatetime.timedelta(428, 17646)\n</pre>\n<p>Reduced accuracy is supported:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_duration('P1Y')\ndatetime.timedelta(365)\n</pre>\n<p>A decimal fraction is allowed on the lowest order element:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_duration('P1YT3.5M')\ndatetime.timedelta(365, 210)\n</pre>\n<p>The decimal fraction can be specified with a comma instead of a full-stop:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_duration('P1YT3,5M')\ndatetime.timedelta(365, 210)\n</pre>\n<p>Parsing a duration from a combined date and time is supported as well:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_duration('P0001-01-02T01:30:5')\ndatetime.timedelta(397, 5405)\n</pre>\n</div>\n<div id=\"parsing-intervals\">\n<h3>Parsing intervals</h3>\n<p>To parse an interval specified by a start and end:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00/2008-05-11T15:30:00')\n(datetime.datetime(2007, 3, 1, 13, 0), datetime.datetime(2008, 5, 11, 15, 30))\n</pre>\n<p>Intervals specified by a start time and a duration are supported:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00Z/P1Y2M10DT2H30M')\n(datetime.datetime(2007, 3, 1, 13, 0, tzinfo=+0:00:00 UTC), datetime.datetime(2008, 5, 9, 15, 30, tzinfo=+0:00:00 UTC))\n</pre>\n<p>A duration can also be specified by a duration and end time:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_interval('P1M/1981-04-05')\n(datetime.date(1981, 4, 5), datetime.date(1981, 3, 6))\n</pre>\n<p>Notice that the result of the above parse is not in order from earliest to latest. If sorted intervals are required, simply use the <code>sorted</code> keyword as shown below:</p>\n<pre>&gt;&gt;&gt; sorted(aniso8601.parse_interval('P1M/1981-04-05'))\n[datetime.date(1981, 3, 6), datetime.date(1981, 4, 5)]\n</pre>\n<p>The end of an interval is returned as a datetime when required to maintain the resolution specified by a duration, even if the duration start is given as a date:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_interval('2014-11-12/PT4H54M6.5S')\n(datetime.date(2014, 11, 12), datetime.datetime(2014, 11, 12, 4, 54, 6, 500000))\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01/P1.5D')\n(datetime.date(2007, 3, 1), datetime.datetime(2007, 3, 2, 12, 0))\n</pre>\n<p>Repeating intervals are supported as well, and return a generator:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_repeating_interval('R3/1981-04-05/P1D')\n&lt;generator object _date_generator at 0x7fd800d3b320&gt;\n&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R3/1981-04-05/P1D'))\n[datetime.date(1981, 4, 5), datetime.date(1981, 4, 6), datetime.date(1981, 4, 7)]\n</pre>\n<p>Repeating intervals are allowed to go in the reverse direction:</p>\n<pre>&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R2/PT1H2M/1980-03-05T01:01:00'))\n[datetime.datetime(1980, 3, 5, 1, 1), datetime.datetime(1980, 3, 4, 23, 59)]\n</pre>\n<p>Unbounded intervals are also allowed (Python 2):</p>\n<pre>&gt;&gt;&gt; result = aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00')\n&gt;&gt;&gt; result.next()\ndatetime.datetime(1980, 3, 5, 1, 1)\n&gt;&gt;&gt; result.next()\ndatetime.datetime(1980, 3, 4, 23, 59)\n</pre>\n<p>or for Python 3:</p>\n<pre>&gt;&gt;&gt; result = aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00')\n&gt;&gt;&gt; next(result)\ndatetime.datetime(1980, 3, 5, 1, 1)\n&gt;&gt;&gt; next(result)\ndatetime.datetime(1980, 3, 4, 23, 59)\n</pre>\n<p>Note that you should never try to convert a generator produced by an unbounded interval to a list:</p>\n<pre>&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00'))\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"aniso8601/builders/python.py\", line 463, in _date_generator_unbounded\n    currentdate += timedelta\nOverflowError: date value out of range\n</pre>\n</div>\n<div id=\"date-and-time-resolution\">\n<h3>Date and time resolution</h3>\n<p>In some situations, it may be useful to figure out the resolution provided by an ISO 8601 date or time string. Two functions are provided for this purpose.</p>\n<p>To get the resolution of a ISO 8601 time string:</p>\n<pre>&gt;&gt;&gt; aniso8601.get_time_resolution('11:31:14') == aniso8601.resolution.TimeResolution.Seconds\nTrue\n&gt;&gt;&gt; aniso8601.get_time_resolution('11:31') == aniso8601.resolution.TimeResolution.Minutes\nTrue\n&gt;&gt;&gt; aniso8601.get_time_resolution('11') == aniso8601.resolution.TimeResolution.Hours\nTrue\n</pre>\n<p>Similarly, for an ISO 8601 date string:</p>\n<pre>&gt;&gt;&gt; aniso8601.get_date_resolution('1981-04-05') == aniso8601.resolution.DateResolution.Day\nTrue\n&gt;&gt;&gt; aniso8601.get_date_resolution('1981-04') == aniso8601.resolution.DateResolution.Month\nTrue\n&gt;&gt;&gt; aniso8601.get_date_resolution('1981') == aniso8601.resolution.DateResolution.Year\nTrue\n</pre>\n</div>\n</div>\n<div id=\"builders\">\n<h2>Builders</h2>\n<p>Builders can be used to change the output format of a parse operation. All parse functions have a <code>builder</code> keyword argument which accepts a builder class.</p>\n<p>Two builders are included. The <code>PythonTimeBuilder</code> (the default) in the  <code>aniso8601.builders.python</code> module, and the <code>TupleBuilder</code> which returns the parse result as a tuple of strings and is located in the <code>aniso8601.builders</code> module.</p>\n<p>The following builders are available as separate projects:</p>\n<ul>\n<li><a href=\"https://bitbucket.org/nielsenb/relativetimebuilder\" rel=\"nofollow\">RelativeTimeBuilder</a> supports parsing to <a href=\"https://dateutil.readthedocs.io/en/stable/relativedelta.html\" rel=\"nofollow\">datetutil relativedelta types</a> for calendar level accuracy</li>\n<li><a href=\"https://bitbucket.org/nielsenb/attotimebuilder\" rel=\"nofollow\">AttoTimeBuilder</a> supports parsing directly to <a href=\"https://bitbucket.org/nielsenb/attotime\" rel=\"nofollow\">attotime attodatetime and attotimedelta types</a> which support sub-nanosecond precision</li>\n<li><a href=\"https://bitbucket.org/nielsenb/numpytimebuilder\" rel=\"nofollow\">NumPyTimeBuilder</a> supports parsing directly to <a href=\"https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html\" rel=\"nofollow\">NumPy datetime64 and timedelta64 types</a></li>\n</ul>\n<div id=\"tuplebuilder\">\n<h3>TupleBuilder</h3>\n<p>The <code>TupleBuilder</code> returns parse results as tuples of strings. It is located in the <code>aniso8601.builders</code> module.</p>\n<div id=\"datetimes\">\n<h4>Datetimes</h4>\n<p>Parsing a datetime returns a tuple containing a date tuple as a collection of strings, a time tuple as a collection of strings, and the \u2018datetime\u2019 string. The date tuple contains the following parse components: <code>(YYYY, MM, DD, Www, D, DDD, 'date')</code>. The time tuple contains the following parse components <code>(hh, mm, ss, tz, 'time')</code>, where <code>tz</code> is a tuple with the following components <code>(negative, Z, hh, mm, name, 'timezone')</code> with <code>negative</code> and <code>Z</code> being booleans:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder\n&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10T12:00:00', builder=TupleBuilder)\n(('1977', '06', '10', None, None, None, 'date'), ('12', '00', '00', None, 'time'), 'datetime')\n&gt;&gt;&gt; aniso8601.parse_datetime('1979-06-05T08:00:00-08:00', builder=TupleBuilder)\n(('1979', '06', '05', None, None, None, 'date'), ('08', '00', '00', (True, None, '08', '00', '-08:00', 'timezone'), 'time'), 'datetime')\n</pre>\n</div>\n<div id=\"dates\">\n<h4>Dates</h4>\n<p>Parsing a date returns a tuple containing the following parse components: <code>(YYYY, MM, DD, Www, D, DDD, 'date')</code>:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder\n&gt;&gt;&gt; aniso8601.parse_date('1984-04-23', builder=TupleBuilder)\n('1984', '04', '23', None, None, None, 'date')\n&gt;&gt;&gt; aniso8601.parse_date('1986-W38-1', builder=TupleBuilder)\n('1986', None, None, '38', '1', None, 'date')\n&gt;&gt;&gt; aniso8601.parse_date('1988-132', builder=TupleBuilder)\n('1988', None, None, None, None, '132', 'date')\n</pre>\n</div>\n<div id=\"times\">\n<h4>Times</h4>\n<p>Parsing a time returns a tuple containing following parse components: <code>(hh, mm, ss, tz, 'time')</code>, where <code>tz</code> is a tuple with the following components <code>(negative, Z, hh, mm, name, 'timezone')</code> with <code>negative</code> and <code>Z</code> being booleans:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder\n&gt;&gt;&gt; aniso8601.parse_time('11:31:14', builder=TupleBuilder)\n('11', '31', '14', None, 'time')\n&gt;&gt;&gt; aniso8601.parse_time('171819Z', builder=TupleBuilder)\n('17', '18', '19', (False, True, None, None, 'Z', 'timezone'), 'time')\n&gt;&gt;&gt; aniso8601.parse_time('17:18:19-02:30', builder=TupleBuilder)\n('17', '18', '19', (True, None, '02', '30', '-02:30', 'timezone'), 'time')\n</pre>\n</div>\n<div id=\"durations\">\n<h4>Durations</h4>\n<p>Parsing a duration returns a tuple containing the following parse components: <code>(PnY, PnM, PnW, PnD, TnH, TnM, TnS, 'duration')</code>:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder\n&gt;&gt;&gt; aniso8601.parse_duration('P1Y2M3DT4H54M6S', builder=TupleBuilder)\n('1', '2', None, '3', '4', '54', '6', 'duration')\n&gt;&gt;&gt; aniso8601.parse_duration('P7W', builder=TupleBuilder)\n(None, None, '7', None, None, None, None, 'duration')\n</pre>\n</div>\n<div id=\"intervals\">\n<h4>Intervals</h4>\n<p>Parsing an interval returns a tuple containing the following parse components: <code>(start, end, duration, 'interval')</code>, <code>start</code> and <code>end</code> may both be datetime or date tuples, <code>duration</code> is a duration tuple:</p>\n<pre>&gt;&gt;&gt; import aniso8601\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00/2008-05-11T15:30:00', builder=TupleBuilder)\n((('2007', '03', '01', None, None, None, 'date'), ('13', '00', '00', None, 'time'), 'datetime'), (('2008', '05', '11', None, None, None, 'date'), ('15', '30', '00', None, 'time'), 'datetime'), None, 'interval')\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00Z/P1Y2M10DT2H30M', builder=TupleBuilder)\n((('2007', '03', '01', None, None, None, 'date'), ('13', '00', '00', (False, True, None, None, 'Z', 'timezone'), 'time'), 'datetime'), None, ('1', '2', None, '10', '2', '30', None, 'duration'), 'interval')\n&gt;&gt;&gt; aniso8601.parse_interval('P1M/1981-04-05', builder=TupleBuilder)\n(None, ('1981', '04', '05', None, None, None, 'date'), (None, '1', None, None, None, None, None, 'duration'), 'interval')\n</pre>\n<p>A repeating interval returns a tuple containing the following parse components: <code>(R, Rnn, interval, 'repeatinginterval')</code> where <code>R</code> is a boolean, <code>True</code> for an unbounded interval, <code>False</code> otherwise.:</p>\n<pre>&gt;&gt;&gt; aniso8601.parse_repeating_interval('R3/1981-04-05/P1D', builder=TupleBuilder)\n(False, '3', (('1981', '04', '05', None, None, None, 'date'), None, (None, None, None, '1', None, None, None, 'duration'), 'interval'), 'repeatinginterval')\n&gt;&gt;&gt; aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00', builder=TupleBuilder)\n(True, None, (None, (('1980', '03', '05', None, None, None, 'date'), ('01', '01', '00', None, 'time'), 'datetime'), (None, None, None, None, '1', '2', None, 'duration'), 'interval'), 'repeatinginterval')\n</pre>\n</div>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<div id=\"setup\">\n<h3>Setup</h3>\n<p>It is recommended to develop using a <a href=\"https://virtualenv.pypa.io/en/stable/\" rel=\"nofollow\">virtualenv</a>.</p>\n</div>\n<div id=\"tests\">\n<h3>Tests</h3>\n<p>Tests can be run using <cite>setuptools &lt;https://setuptools.readthedocs.io/en/latest/setuptools.html&gt;</cite>:</p>\n<pre>$ python setup.py test\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>aniso8601 is an open source project hosted on <a href=\"https://bitbucket.org/nielsenb/aniso8601\" rel=\"nofollow\">Bitbucket</a>.</p>\n<p>Any and all bugs are welcome on our <a href=\"https://bitbucket.org/nielsenb/aniso8601/issues\" rel=\"nofollow\">issue tracker</a>.\nOf particular interest are valid ISO 8601 strings that don\u2019t parse, or invalid ones that do. At a minimum,\nbug reports should include an example of the misbehaving string, as well as the expected result. Of course\npatches containing unit tests (or fixed bugs) are welcome!</p>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<ul>\n<li><a href=\"http://dotat.at/tmp/ISO_8601-2004_E.pdf\" rel=\"nofollow\">ISO 8601:2004(E)</a> (Caution, PDF link)</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Iso8601\" rel=\"nofollow\">Wikipedia article on ISO 8601</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/comp.lang.python/Q2w4R89Nq1w\" rel=\"nofollow\">Discussion on alternative ISO 8601 parsers for Python</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5817619, "releases": {"0.48": [{"comment_text": "", "digests": {"md5": "56ae300f86cca96460e39efc5114e6a8", "sha256": "f0a177d8dba7fd6fa06b0bdf4070fd1a156821e0bb5d4649b6bd1178d118edda"}, "downloads": -1, "filename": "aniso8601-0.48.tar.gz", "has_sig": false, "md5_digest": "56ae300f86cca96460e39efc5114e6a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19405, "upload_time": "2013-01-31T19:45:16", "upload_time_iso_8601": "2013-01-31T19:45:16.018422Z", "url": "https://files.pythonhosted.org/packages/30/e4/ef2e78fdf9db584b7b3a68f46851427db30c75d01b30f9b48c98a99a05a2/aniso8601-0.48.tar.gz", "yanked": false}], "0.49": [{"comment_text": "", "digests": {"md5": "c4ddccd394f5be7a2b71234b62654807", "sha256": "4399c50b3c06c5d80d7d5e98d42b35e228e4c29f11cba2a5e199fa48af02a9bb"}, "downloads": -1, "filename": "aniso8601-0.49.tar.gz", "has_sig": false, "md5_digest": "c4ddccd394f5be7a2b71234b62654807", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19406, "upload_time": "2013-01-31T20:48:37", "upload_time_iso_8601": "2013-01-31T20:48:37.423824Z", "url": "https://files.pythonhosted.org/packages/5d/71/d395a542f97449288b032fddf65190ccfdbc6a6733ceda001c5412890880/aniso8601-0.49.tar.gz", "yanked": false}], "0.50": [{"comment_text": "", "digests": {"md5": "504b1c5c0e9077d463ea9c793cadb763", "sha256": "ea84e6728f11a8063810a6b1854ca57340a7a573279758141a298d647499f150"}, "downloads": -1, "filename": "aniso8601-0.50.tar.gz", "has_sig": false, "md5_digest": "504b1c5c0e9077d463ea9c793cadb763", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20838, "upload_time": "2013-01-31T23:54:36", "upload_time_iso_8601": "2013-01-31T23:54:36.143466Z", "url": "https://files.pythonhosted.org/packages/35/f4/33b4a4c63d7816c1226b3b793abb11ac65c52936d7f73497bc4871469aeb/aniso8601-0.50.tar.gz", "yanked": false}], "0.60": [{"comment_text": "", "digests": {"md5": "24f68b8ff873ab4e0d8a0bd9b457e49b", "sha256": "523dffabde055a9b4c9a045621b3d2a29a05c1b2d95f47b78e9860c16284fee9"}, "downloads": -1, "filename": "aniso8601-0.60.tar.gz", "has_sig": false, "md5_digest": "24f68b8ff873ab4e0d8a0bd9b457e49b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24066, "upload_time": "2013-02-01T19:25:28", "upload_time_iso_8601": "2013-02-01T19:25:28.608576Z", "url": "https://files.pythonhosted.org/packages/e7/13/8d91b06963e6db88d46a6f5a09512ac5dc587004cf90d9ac675c931f17dd/aniso8601-0.60.tar.gz", "yanked": false}], "0.70": [{"comment_text": "", "digests": {"md5": "d084824e09840bbdfb4a222b49845315", "sha256": "b81e3dbe714d79fe38dbd6557addfd1b3acc80bd704749d6197fa7a8131de617"}, "downloads": -1, "filename": "aniso8601-0.70.tar.gz", "has_sig": false, "md5_digest": "d084824e09840bbdfb4a222b49845315", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23399, "upload_time": "2013-03-02T23:46:24", "upload_time_iso_8601": "2013-03-02T23:46:24.093697Z", "url": "https://files.pythonhosted.org/packages/90/6e/f925b64a00138a53fc191b612e2d5aabd35c29497a3ea46b33db3f9c779d/aniso8601-0.70.tar.gz", "yanked": false}], "0.80": [{"comment_text": "", "digests": {"md5": "663d08a85de28b0f060f3272d52a1903", "sha256": "9023524a0901ac85c3680e418c803812dab337fdfa131ce01e7aedde9008a6b6"}, "downloads": -1, "filename": "aniso8601-0.80.tar.gz", "has_sig": false, "md5_digest": "663d08a85de28b0f060f3272d52a1903", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63902, "upload_time": "2013-08-26T20:23:39", "upload_time_iso_8601": "2013-08-26T20:23:39.900118Z", "url": "https://files.pythonhosted.org/packages/da/90/6b7f65473e9cb9ad2c8dec2bd997c0cd1d036a37f183f3645b6338b83a6d/aniso8601-0.80.tar.gz", "yanked": false}], "0.81": [{"comment_text": "", "digests": {"md5": "912ee52e9c40036002c8d2817ba9e971", "sha256": "e6e1a549aa01dc03538f8b24bf256385afcb536e81c40f8b7e4f4f834ef61e99"}, "downloads": -1, "filename": "aniso8601-0.81.tar.gz", "has_sig": false, "md5_digest": "912ee52e9c40036002c8d2817ba9e971", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71470, "upload_time": "2013-09-19T20:15:55", "upload_time_iso_8601": "2013-09-19T20:15:55.741883Z", "url": "https://files.pythonhosted.org/packages/71/7e/fc81299d9a8f3ed0bfc67be89e77543de0054d196dfdaebca7166f193e36/aniso8601-0.81.tar.gz", "yanked": false}], "0.82": [{"comment_text": "", "digests": {"md5": "044490d60a079d33eb01c19fd469efdb", "sha256": "e33ffc4ff6882e6a318c07844e346cd6160abe2f48cc2e797d2fe5f36364789e"}, "downloads": -1, "filename": "aniso8601-0.82.tar.gz", "has_sig": false, "md5_digest": "044490d60a079d33eb01c19fd469efdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64186, "upload_time": "2013-09-19T20:24:06", "upload_time_iso_8601": "2013-09-19T20:24:06.433526Z", "url": "https://files.pythonhosted.org/packages/1b/81/2dbfc8eff9b6c052e22dba1c775dc3eec61117a9d800e1825f373f840e6b/aniso8601-0.82.tar.gz", "yanked": false}], "0.83": [{"comment_text": "", "digests": {"md5": "ed9ded305ebb9025065938ac9ef529e2", "sha256": "1153cfe2599da556c6ce664b12c0e39659340cc6633a316b34eaac480f276429"}, "downloads": -1, "filename": "aniso8601-0.83.tar.gz", "has_sig": false, "md5_digest": "ed9ded305ebb9025065938ac9ef529e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58487, "upload_time": "2014-08-06T21:28:59", "upload_time_iso_8601": "2014-08-06T21:28:59.457383Z", "url": "https://files.pythonhosted.org/packages/3b/b5/b85b9236a7c2c0247b7d52ea95cd4f05e9a2bef53284954847730e3f250c/aniso8601-0.83.tar.gz", "yanked": false}], "0.84": [{"comment_text": "", "digests": {"md5": "fd981c47cdecd930214b9c6e3230966b", "sha256": "59d758fdf47b127c9b6f673395d4cd60a21063d6b3737acd5e818c13bb6a445d"}, "downloads": -1, "filename": "aniso8601-0.84.tar.gz", "has_sig": false, "md5_digest": "fd981c47cdecd930214b9c6e3230966b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67791, "upload_time": "2014-11-12T19:01:06", "upload_time_iso_8601": "2014-11-12T19:01:06.228441Z", "url": "https://files.pythonhosted.org/packages/45/fb/c7d351326c7b6aa1c007105bb2af287883a3a479bb3cee271fa071259479/aniso8601-0.84.tar.gz", "yanked": false}], "0.85": [{"comment_text": "", "digests": {"md5": "dadc9b873df747f927a01780cf2f4807", "sha256": "0f96f8cbadc94aa9b9e277eabf772f2d07fab146ed219d039c9d8a9f53b25b8b"}, "downloads": -1, "filename": "aniso8601-0.85.tar.gz", "has_sig": false, "md5_digest": "dadc9b873df747f927a01780cf2f4807", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55463, "upload_time": "2014-11-17T23:04:12", "upload_time_iso_8601": "2014-11-17T23:04:12.038317Z", "url": "https://files.pythonhosted.org/packages/d2/eb/5a4ddadd6ecb25cc84ff370fa9cdddc7e12408e2329a22fbabf181ffe1eb/aniso8601-0.85.tar.gz", "yanked": false}], "0.90": [{"comment_text": "", "digests": {"md5": "468d34d9def2f49e2dfdcdf062ad9f64", "sha256": "2c0ec72a4185c2dd05eac0b2faa8d47a0477a17ca0784e1a547e544777116226"}, "downloads": -1, "filename": "aniso8601-0.90.tar.gz", "has_sig": false, "md5_digest": "468d34d9def2f49e2dfdcdf062ad9f64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64577, "upload_time": "2014-12-02T01:33:49", "upload_time_iso_8601": "2014-12-02T01:33:49.081958Z", "url": "https://files.pythonhosted.org/packages/33/78/11207bdb1cc61b4ea508e476116da60f4da467db4ff07b2b36d70fc7e085/aniso8601-0.90.tar.gz", "yanked": false}], "0.91": [{"comment_text": "", "digests": {"md5": "2aa839dedb08202c27bedcd1ff88bcd0", "sha256": "b9e2f823bb409e879c951be35c3d3850ccfc080a081056158bb87f414153d0c3"}, "downloads": -1, "filename": "aniso8601-0.91.tar.gz", "has_sig": false, "md5_digest": "2aa839dedb08202c27bedcd1ff88bcd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13714, "upload_time": "2014-12-22T23:10:43", "upload_time_iso_8601": "2014-12-22T23:10:43.113554Z", "url": "https://files.pythonhosted.org/packages/7f/21/74b1e1bf30223f02442f74945b4564f4480af1788e27dbad5931011491e1/aniso8601-0.91.tar.gz", "yanked": false}], "0.92": [{"comment_text": "", "digests": {"md5": "cd53364aae52d128fa6d27703e76dec4", "sha256": "60860b5a13bf3c60ab5bc849ac5c55a1cb4113434eff032281ceb47578cc9da9"}, "downloads": -1, "filename": "aniso8601-0.92.tar.gz", "has_sig": false, "md5_digest": "cd53364aae52d128fa6d27703e76dec4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17810, "upload_time": "2014-12-22T23:15:31", "upload_time_iso_8601": "2014-12-22T23:15:31.178977Z", "url": "https://files.pythonhosted.org/packages/96/b9/b51177e034f288852aa046c2243a253ed73a363717b5e499596273fedc77/aniso8601-0.92.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "de0dcc6c74613e3efbfcc95e7dcff335", "sha256": "f0bf0108bb24f7c7cb0b0408721a52bee9ac2fd838082c135cd8da87f4d951f4"}, "downloads": -1, "filename": "aniso8601-1.0.0.tar.gz", "has_sig": false, "md5_digest": "de0dcc6c74613e3efbfcc95e7dcff335", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44260, "upload_time": "2015-05-12T22:07:43", "upload_time_iso_8601": "2015-05-12T22:07:43.340653Z", "url": "https://files.pythonhosted.org/packages/c0/76/f164e191fad0c93c10fc767dcf85a4fc5f3733a27c76e3e124a520679260/aniso8601-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d2610ecaab3bdfe51f74678c89c69cf7", "sha256": "4fc462db59811f541bc25d865b86367153d8ce773ae75b16d54e2e1cd393b5cc"}, "downloads": -1, "filename": "aniso8601-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d2610ecaab3bdfe51f74678c89c69cf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49417, "upload_time": "2015-10-21T01:42:02", "upload_time_iso_8601": "2015-10-21T01:42:02.653075Z", "url": "https://files.pythonhosted.org/packages/66/f3/e0f17c6a2cb8d46055123d85368d86679e08ed06f16eb3ccb83f5adbbbcb/aniso8601-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bb678d20e4b2c701d7c38a7fc4b7cff5", "sha256": "502400f82574afa804cc915d83f15c67533d364dcd594f8a6b9d2053f3404dd4"}, "downloads": -1, "filename": "aniso8601-1.2.0.tar.gz", "has_sig": false, "md5_digest": "bb678d20e4b2c701d7c38a7fc4b7cff5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59998, "upload_time": "2016-10-20T19:19:41", "upload_time_iso_8601": "2016-10-20T19:19:41.262606Z", "url": "https://files.pythonhosted.org/packages/5b/fb/251a0dd2f4710e60664ddd8bd3485bd8362530f47af9e88f4061fe589ebf/aniso8601-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "e3990c8207f8baee045c29a0ad114fdb", "sha256": "e7ba4f42d3aea75909c79b1f4c4614768b4f13fbb98fc658a7b6061ddb0be47c"}, "downloads": -1, "filename": "aniso8601-1.2.1.tar.gz", "has_sig": false, "md5_digest": "e3990c8207f8baee045c29a0ad114fdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62369, "upload_time": "2017-05-01T19:41:47", "upload_time_iso_8601": "2017-05-01T19:41:47.148697Z", "url": "https://files.pythonhosted.org/packages/61/f3/74a5a8affb192863f5f6aa3dfb0059a97442ff683d44fcc842b509758129/aniso8601-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "d3c987293e4b5acf2004edf48cd19e9f", "sha256": "c3b5246f5601b6ae5671911bc4ee5b3e3fe94752e8afab5ce074d8b1232952f1"}, "downloads": -1, "filename": "aniso8601-1.3.0.tar.gz", "has_sig": false, "md5_digest": "d3c987293e4b5acf2004edf48cd19e9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57730, "upload_time": "2017-09-01T19:56:06", "upload_time_iso_8601": "2017-09-01T19:56:06.364707Z", "url": "https://files.pythonhosted.org/packages/07/2e/63316d28874c0207de3dbb85cca21a1dd7be06082952a907a7638311a925/aniso8601-1.3.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "e3b36a65f8a090cc4920846f48208de1", "sha256": "085786415d3550e89785ffbedaa9bb37d41de0707a1268bdbba11249064b71d1"}, "downloads": -1, "filename": "aniso8601-2.0.0.tar.gz", "has_sig": false, "md5_digest": "e3b36a65f8a090cc4920846f48208de1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61952, "upload_time": "2018-01-05T00:43:29", "upload_time_iso_8601": "2018-01-05T00:43:29.414182Z", "url": "https://files.pythonhosted.org/packages/3c/31/c9bae7924453fd3da0587b22c7dc4df90bae85326961eb9c2445481fd94f/aniso8601-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "f3ab2aa3d89c1ee23cce9ee98401003a", "sha256": "cdf20d7f5172cf9a786fad94bbeaffe6dead415c99ab52800f744b1f8841e33d"}, "downloads": -1, "filename": "aniso8601-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3ab2aa3d89c1ee23cce9ee98401003a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20605, "upload_time": "2018-02-23T16:56:27", "upload_time_iso_8601": "2018-02-23T16:56:27.125423Z", "url": "https://files.pythonhosted.org/packages/13/1c/57b9dc57d7772cfd77dd02505c3258580b29192f2f2b515dc9283c696f67/aniso8601-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1028438a25d8b0f7f971142a1fd197de", "sha256": "b7215a41e5194a829dc87d1ea5039315be85a6158ba15c8157a284c29fa6808b"}, "downloads": -1, "filename": "aniso8601-2.0.1.tar.gz", "has_sig": false, "md5_digest": "1028438a25d8b0f7f971142a1fd197de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62068, "upload_time": "2018-02-23T16:56:29", "upload_time_iso_8601": "2018-02-23T16:56:29.418021Z", "url": "https://files.pythonhosted.org/packages/34/9c/69f1cf9b895bf731bde79a03184c80e4d590bd26f3bfbb8f44c12fa671cd/aniso8601-2.0.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "9b56e141c23224b92e90270d25fbb4e1", "sha256": "f7052eb342bf2000c6264a253acedb362513bf9270800be2bc8e3e229fe08b5a"}, "downloads": -1, "filename": "aniso8601-3.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b56e141c23224b92e90270d25fbb4e1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21993, "upload_time": "2018-03-09T16:54:04", "upload_time_iso_8601": "2018-03-09T16:54:04.048523Z", "url": "https://files.pythonhosted.org/packages/ba/8c/4cd25b3facc5f443cb083f4582483e8c8e7901380c71c44aff6eeda4dc54/aniso8601-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5644cbd4a25d43961185e5d415f3bc1", "sha256": "7cf068e7aec00edeb21879c2bbda048656c34d281e133a77425be03b352122d8"}, "downloads": -1, "filename": "aniso8601-3.0.0.tar.gz", "has_sig": false, "md5_digest": "d5644cbd4a25d43961185e5d415f3bc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69371, "upload_time": "2018-03-09T16:54:06", "upload_time_iso_8601": "2018-03-09T16:54:06.131371Z", "url": "https://files.pythonhosted.org/packages/22/33/f22de651052cb0111cb68ff17f5cccce4fd05f67de62d53a638b5138e2b5/aniso8601-3.0.0.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "6caf4cdf3641fabaf41938d1a7b72391", "sha256": "94f90871fcd314a458a3d4eca1c84448efbd200e86f55fe4c733c7a40149ef50"}, "downloads": -1, "filename": "aniso8601-3.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6caf4cdf3641fabaf41938d1a7b72391", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22095, "upload_time": "2018-06-15T14:40:53", "upload_time_iso_8601": "2018-06-15T14:40:53.160143Z", "url": "https://files.pythonhosted.org/packages/17/13/eecdcc638c0ea3b105ebb62ff4e76914a744ef1b6f308651dbed368c6c01/aniso8601-3.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4a3f2bb23d2451cec1c01be96c99163", "sha256": "7849749cf00ae0680ad2bdfe4419c7a662bef19c03691a19e008c8b9a5267802"}, "downloads": -1, "filename": "aniso8601-3.0.2.tar.gz", "has_sig": false, "md5_digest": "f4a3f2bb23d2451cec1c01be96c99163", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69520, "upload_time": "2018-06-15T14:53:32", "upload_time_iso_8601": "2018-06-15T14:53:32.347601Z", "url": "https://files.pythonhosted.org/packages/1e/12/a212cf206d67e368b851ad1b3e2560c343021a48bc2581e5184056cf8ced/aniso8601-3.0.2.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "a233d778ff2e5e57bd403f65db4aa9b4", "sha256": "41e649cf0a8b4f5642f0a2acf557a072a024a991b4693e775ebb9febd3a19f9f"}, "downloads": -1, "filename": "aniso8601-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a233d778ff2e5e57bd403f65db4aa9b4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22970, "upload_time": "2018-10-25T14:59:37", "upload_time_iso_8601": "2018-10-25T14:59:37.308230Z", "url": "https://files.pythonhosted.org/packages/56/93/c29b08cc9cc583863d607324325f5b665627eac1827d4033aae8f4ee0af6/aniso8601-4.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50e1c37fab3c0c3e47fabc3f6eccba16", "sha256": "a772160518040cc77599277209b1845189829d7398798a409b07b7cd4ffa0f28"}, "downloads": -1, "filename": "aniso8601-4.0.0.tar.gz", "has_sig": false, "md5_digest": "50e1c37fab3c0c3e47fabc3f6eccba16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109845, "upload_time": "2018-10-25T14:59:39", "upload_time_iso_8601": "2018-10-25T14:59:39.208509Z", "url": "https://files.pythonhosted.org/packages/83/5f/754cd7945fcde096c173a5cb6da289cb0cf2df50c426b8b16ed821b9772d/aniso8601-4.0.0.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "b31269e1421c79581801e54dcde37c21", "sha256": "547e7bc88c19742e519fb4ca39f4b8113fdfb8fca322e325f16a8bfc6cfc553c"}, "downloads": -1, "filename": "aniso8601-4.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b31269e1421c79581801e54dcde37c21", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22968, "upload_time": "2018-10-25T15:03:43", "upload_time_iso_8601": "2018-10-25T15:03:43.271449Z", "url": "https://files.pythonhosted.org/packages/69/9b/f2ae61c0c90181b62e15ca09d283d2aab42c7c2c3bbd7c548dd0cfd8bf3e/aniso8601-4.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85796231d89d1194144b526358a5763d", "sha256": "e7560de91bf00baa712b2550a2fdebf0188c5fce2fcd1162fbac75c19bb29c95"}, "downloads": -1, "filename": "aniso8601-4.0.1.tar.gz", "has_sig": false, "md5_digest": "85796231d89d1194144b526358a5763d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109849, "upload_time": "2018-10-25T15:03:44", "upload_time_iso_8601": "2018-10-25T15:03:44.701325Z", "url": "https://files.pythonhosted.org/packages/b0/23/67f6d3b4b11578b13a7fe0c26a2f8c9becc61c4c601ccc8d8d23ca7ca54f/aniso8601-4.0.1.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "9492b8364ef0949fe5624ba08ec9fc9a", "sha256": "ac30cceff24aec920c37b8d74d7d8a5dd37b1f62a90b4f268a6234cabe147080"}, "downloads": -1, "filename": "aniso8601-4.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9492b8364ef0949fe5624ba08ec9fc9a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40141, "upload_time": "2019-01-08T21:37:00", "upload_time_iso_8601": "2019-01-08T21:37:00.555309Z", "url": "https://files.pythonhosted.org/packages/8c/1d/6fdba7c6e28a53fea0cb13171829fb1812c400eb0d4d9d1de25ec5d81f0f/aniso8601-4.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0062116b250ac05dd8d2de7c1e854e0a", "sha256": "03c0ffeeb04edeca1ed59684cc6836dc377f58e52e315dc7be3af879909889f4"}, "downloads": -1, "filename": "aniso8601-4.1.0.tar.gz", "has_sig": false, "md5_digest": "0062116b250ac05dd8d2de7c1e854e0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39902, "upload_time": "2019-01-08T21:37:02", "upload_time_iso_8601": "2019-01-08T21:37:02.132386Z", "url": "https://files.pythonhosted.org/packages/7d/f6/7b91438c9bdd83b6e7147b46d20cdf04ab58c7150f1ecc65cb53be34b976/aniso8601-4.1.0.tar.gz", "yanked": false}], "5.0.0": [{"comment_text": "", "digests": {"md5": "d5f390b0ec6c338ab670c99bd0a4c5b3", "sha256": "60f4c1cba7760d910d92efbbd6850e586b7559aaf53110650b37403d57f41554"}, "downloads": -1, "filename": "aniso8601-5.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d5f390b0ec6c338ab670c99bd0a4c5b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45558, "upload_time": "2019-03-01T20:58:39", "upload_time_iso_8601": "2019-03-01T20:58:39.611305Z", "url": "https://files.pythonhosted.org/packages/82/63/24b5bb126f83749f895f8cd3ed45975df2fcd469e17f598bf424c4eed31f/aniso8601-5.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7d521f5d612e01588351cb0a624bb21", "sha256": "70dd33e7b309d03edcc004652099d1b8c910e1f99e3600ba9cd845a34b1c7f7b"}, "downloads": -1, "filename": "aniso8601-5.0.0.tar.gz", "has_sig": false, "md5_digest": "c7d521f5d612e01588351cb0a624bb21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42288, "upload_time": "2019-03-01T20:58:41", "upload_time_iso_8601": "2019-03-01T20:58:41.311981Z", "url": "https://files.pythonhosted.org/packages/b0/ac/fc8be1ce6248cf2b5af5981fb23827b87206f23386228c84b5930f2151e7/aniso8601-5.0.0.tar.gz", "yanked": false}], "5.0.1": [{"comment_text": "", "digests": {"md5": "c8625854bfcd6361a9a90d7d1c0b5199", "sha256": "c9ecb8eb5429a7dd188fae86ac504a7c3d9091f63f1598970b866d5e6ccb3074"}, "downloads": -1, "filename": "aniso8601-5.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c8625854bfcd6361a9a90d7d1c0b5199", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45577, "upload_time": "2019-03-01T21:24:54", "upload_time_iso_8601": "2019-03-01T21:24:54.437049Z", "url": "https://files.pythonhosted.org/packages/e8/4d/110b532eb3280f1880c2561034a7aa86541ff73ec278e62a2b5a05dccd74/aniso8601-5.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbbba588c1e20e07eb8777cb739473fc", "sha256": "85b1965aa746a0125461dd270322cda6710453231a11c2213ce43a8c57202e99"}, "downloads": -1, "filename": "aniso8601-5.0.1.tar.gz", "has_sig": false, "md5_digest": "fbbba588c1e20e07eb8777cb739473fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42308, "upload_time": "2019-03-01T21:24:56", "upload_time_iso_8601": "2019-03-01T21:24:56.044215Z", "url": "https://files.pythonhosted.org/packages/04/4b/204d9e1e1ab92632db7c150dbb31ee68246f08fcf94abcf580ebb48b3b11/aniso8601-5.0.1.tar.gz", "yanked": false}], "5.1.0": [{"comment_text": "", "digests": {"md5": "7771096f8c76e3bcc0630440031ec39b", "sha256": "a5c7595bb65d3919a9944a759d907b57c4d050abaa0e5cf845e84c26cdfd1218"}, "downloads": -1, "filename": "aniso8601-5.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7771096f8c76e3bcc0630440031ec39b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45575, "upload_time": "2019-03-02T01:09:53", "upload_time_iso_8601": "2019-03-02T01:09:53.065465Z", "url": "https://files.pythonhosted.org/packages/5d/0d/ca7f24d2f87163f03044315c13edc300010d898ba712c972f4a3a827a5ab/aniso8601-5.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6f5068cb162667c997556b7a2afed80", "sha256": "29ad6be3828ab6ac2a31fd2876fd84477cde11890ffca7e8a9434aad5d4acec8"}, "downloads": -1, "filename": "aniso8601-5.1.0.tar.gz", "has_sig": false, "md5_digest": "a6f5068cb162667c997556b7a2afed80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42310, "upload_time": "2019-03-02T01:09:54", "upload_time_iso_8601": "2019-03-02T01:09:54.552554Z", "url": "https://files.pythonhosted.org/packages/1a/0f/be7fb313e26698e2eb338cdb755c60db90f351a1b8c759ce0110cdf71dcb/aniso8601-5.1.0.tar.gz", "yanked": false}], "6.0.0": [{"comment_text": "", "digests": {"md5": "3d36dce708aa83b3ad6d881f01cecaa2", "sha256": "bb167645c79f7a438f9dfab6161af9bed75508c645b1f07d1158240841d22673"}, "downloads": -1, "filename": "aniso8601-6.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3d36dce708aa83b3ad6d881f01cecaa2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41019, "upload_time": "2019-03-08T20:10:35", "upload_time_iso_8601": "2019-03-08T20:10:35.541151Z", "url": "https://files.pythonhosted.org/packages/85/58/1e804d6d53435b1b2241036056360575640b69a332e7ead086a04bd5ad95/aniso8601-6.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d5fc0461004569dff1acf2c5508da2c", "sha256": "b8a6a9b24611fc50cf2d9b45d371bfdc4fd0581d1cc52254f5502130a776d4af"}, "downloads": -1, "filename": "aniso8601-6.0.0.tar.gz", "has_sig": false, "md5_digest": "2d5fc0461004569dff1acf2c5508da2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36429, "upload_time": "2019-03-08T20:10:37", "upload_time_iso_8601": "2019-03-08T20:10:37.691172Z", "url": "https://files.pythonhosted.org/packages/f8/1d/1cb919d85c0c33e1aa56d9a6f31ff2f799e41f98951c4551336254294ec1/aniso8601-6.0.0.tar.gz", "yanked": false}], "7.0.0": [{"comment_text": "", "digests": {"md5": "bec764055a0bd927aa31328b1fece9b5", "sha256": "d10a4bf949f619f719b227ef5386e31f49a2b6d453004b21f02661ccc8670c7b"}, "downloads": -1, "filename": "aniso8601-7.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bec764055a0bd927aa31328b1fece9b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42031, "upload_time": "2019-06-11T19:24:30", "upload_time_iso_8601": "2019-06-11T19:24:30.247962Z", "url": "https://files.pythonhosted.org/packages/45/a4/b4fcadbdab46c2ec2d2f6f8b4ab3f64fd0040789ac7f065eba82119cd602/aniso8601-7.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d5ca0020dd693ee28f836e4aa24004f", "sha256": "513d2b6637b7853806ae79ffaca6f3e8754bdd547048f5ccc1420aec4b714f1e"}, "downloads": -1, "filename": "aniso8601-7.0.0.tar.gz", "has_sig": false, "md5_digest": "6d5ca0020dd693ee28f836e4aa24004f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36465, "upload_time": "2019-06-11T19:24:32", "upload_time_iso_8601": "2019-06-11T19:24:32.220316Z", "url": "https://files.pythonhosted.org/packages/7f/39/0da0982a3a42fd896beaa07425692fb3100a9d0e40723783efc20f1dec7c/aniso8601-7.0.0.tar.gz", "yanked": false}], "8.0.0": [{"comment_text": "", "digests": {"md5": "5c489f75e5211188b4b5888ffb9b9632", "sha256": "c033f63d028b9a58e3ab0c2c7d0532ab4bfa7452bfc788fbfe3ddabd327b181a"}, "downloads": -1, "filename": "aniso8601-8.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5c489f75e5211188b4b5888ffb9b9632", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43178, "upload_time": "2019-09-12T01:02:32", "upload_time_iso_8601": "2019-09-12T01:02:32.728901Z", "url": "https://files.pythonhosted.org/packages/eb/e4/787e104b58eadc1a710738d4e418d7e599e4e778e52cb8e5d5ef6ddd5833/aniso8601-8.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eaccdb8d46523bf2f1c2689cd707237", "sha256": "529dcb1f5f26ee0df6c0a1ee84b7b27197c3c50fc3a6321d66c544689237d072"}, "downloads": -1, "filename": "aniso8601-8.0.0.tar.gz", "has_sig": false, "md5_digest": "6eaccdb8d46523bf2f1c2689cd707237", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37007, "upload_time": "2019-09-12T01:02:34", "upload_time_iso_8601": "2019-09-12T01:02:34.794553Z", "url": "https://files.pythonhosted.org/packages/2f/45/f2aec388115ea65a2b95b3dc1ba058a8470675fe16bcd4678a44a59776ea/aniso8601-8.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c489f75e5211188b4b5888ffb9b9632", "sha256": "c033f63d028b9a58e3ab0c2c7d0532ab4bfa7452bfc788fbfe3ddabd327b181a"}, "downloads": -1, "filename": "aniso8601-8.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5c489f75e5211188b4b5888ffb9b9632", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43178, "upload_time": "2019-09-12T01:02:32", "upload_time_iso_8601": "2019-09-12T01:02:32.728901Z", "url": "https://files.pythonhosted.org/packages/eb/e4/787e104b58eadc1a710738d4e418d7e599e4e778e52cb8e5d5ef6ddd5833/aniso8601-8.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eaccdb8d46523bf2f1c2689cd707237", "sha256": "529dcb1f5f26ee0df6c0a1ee84b7b27197c3c50fc3a6321d66c544689237d072"}, "downloads": -1, "filename": "aniso8601-8.0.0.tar.gz", "has_sig": false, "md5_digest": "6eaccdb8d46523bf2f1c2689cd707237", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37007, "upload_time": "2019-09-12T01:02:34", "upload_time_iso_8601": "2019-09-12T01:02:34.794553Z", "url": "https://files.pythonhosted.org/packages/2f/45/f2aec388115ea65a2b95b3dc1ba058a8470675fe16bcd4678a44a59776ea/aniso8601-8.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:10 2020"}