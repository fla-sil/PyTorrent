{"info": {"author": "Scott Bailey", "author_email": "scottrbailey@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: SQL", "Topic :: Database"], "description": "===========\nDBMS - DataBases Made Simpler\n===========\n\nDBMS is a database took kit that wraps and provides\nuniform interface to other DB API compliant adapters. \n\nIt manages connections, doing automatic imports and providing a\nuniform connection method to most common databases.\nImplements DictCursor, NamedTupleCursor and OrderedDictCursor.\n\nIt currently supports IBM DB2, Firebird, MSSQL Server, MySQL, Oracle,\nPostgreSQL, SQLite and ODBC connections.\n\nSample usage::\n\t>>> import dbms\n\t>>> db = dbms.connect.postgres('UserName', 'SuperSecret', 'Chinook')\n\t>>> cur = db.cursor()\n\t>>> cur.execute('SELECT * FROM artist WHERE artistid = %s', (101,))\n\t>>> row = cur.fetchone()\n\t>>> row.pprint()\n\tartistid : 101\n\tname     : Lulu Santos\n\t\n\t# Database Inspection\n\t>>> db.inspect.tables()\n\t['album', 'artist', 'customer', 'employee', 'genre', 'invoice', 'invoiceline', 'mediatype', 'playlist', 'playlisttrack', 'track']\n\t>>> db.inspect.columns('album')\n\t['albumid', 'title', 'artistid']\n\t>>> db.probe.getColumns('album')\n\t[Record('albumid', 'integer', 'N', 'Y'), \n\tRecord('title', 'character varying', 'N', None), \n\tRecord('artistid', 'integer', 'N', None)]\n\t\n\t# Saved connections\n\t>>> dbms.servers.list()\n\t['ChinookPg', 'ChinookLTE']\n\t# open saved connection\n\t>>> db = dbms.servers.open('ChinookPg')\n\tEnter master password:\n\t********\n\t\n\t# logged cursor\n\t>>> cur = db.loggedCursor()\n\t>>> cur.execute('SELECT * FROM \"Album\" WHERE \"ArtistId\" = %s', (1,))\n\t>>> dbms.logger.view(limit=1)\n\t[Record('2014-07-01 08:11:48', 'ChinookPg', 'SELECT * FROM \"Album\" WHERE \"ArtistId\" = %s', (1))]\n\t\n\t# utilities\n\t>>> from dbms import utils\n\t>>> query, params = utils.formatQuery(('SELECT * FROM Album WHERE ArtistId = ',\n\t\t\tParam(1),\n\t\t\t'AND AlbumId < ',\n\t\t\tNamedParam('maxAlbumId', 50)),\n\t\t\tcur.paramstyle)\n\t>>> cur.execute(query, params)\n\t>>> utils.cursorToXLSX(cur, '/tmp/AlbumList.xlsx')\n\t>>> cur.execute('SELECT * FROM Album')\n\t>>> utils.cursorToCursorCopy(cur, destCur, 'album')\n\t>>> query = 'SELECT * FROM artist WHERE artistid BETWEEN %s AND %s'\n\t>>> cur.execute(query, (100, 105))\n\t>>> utils.cursorToJSON(cur)\n\t[\n\t{\"artistid\": 100, \"name\": \"Lenny Kravitz\"},\n\t{\"artistid\": 101, \"name\": \"Lulu Santos\"},\n\t{\"artistid\": 102, \"name\": \"Marillion\"},\n\t{\"artistid\": 103, \"name\": \"Marisa Monte\"},\n\t{\"artistid\": 104, \"name\": \"Marvin Gaye\"},\n\t{\"artistid\": 105, \"name\": \"Men At Work\"},\n\t]\n\t>>> cur.execute(query, (100, 105))\n\t>>> utils.cursorToFixedWidth(cur)\n\tARTISTID  NAME            \n\t100       Lenny Kravitz   \n\t101       Lulu Santos     \n\t102       Marillion       \n\t103       Marisa Monte    \n\t104       Marvin Gaye     \n\t105       Men At Work", "description_content_type": null, "docs_url": "https://pythonhosted.org/dbms/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://sourceforge.net/projects/pydbms/", "keywords": "database dbms rdbms Oracle PostgreSQL MySQL SQLServer Firebird DB2 SQLite ODBC", "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "dbms", "package_url": "https://pypi.org/project/dbms/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dbms/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://sourceforge.net/projects/pydbms/"}, "release_url": "https://pypi.org/project/dbms/1.1.1/", "requires_dist": null, "requires_python": null, "summary": "DataBases Made Simpler - Uniform interface for multiple adapters", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===========<br>DBMS - DataBases Made Simpler<br>===========<br><br>DBMS is a database took kit that wraps and provides<br>uniform interface to other DB API compliant adapters. <br><br>It manages connections, doing automatic imports and providing a<br>uniform connection method to most common databases.<br>Implements DictCursor, NamedTupleCursor and OrderedDictCursor.<br><br>It currently supports IBM DB2, Firebird, MSSQL Server, MySQL, Oracle,<br>PostgreSQL, SQLite and ODBC connections.<br><br>Sample usage::<br>\t&gt;&gt;&gt; import dbms<br>\t&gt;&gt;&gt; db = dbms.connect.postgres('UserName', 'SuperSecret', 'Chinook')<br>\t&gt;&gt;&gt; cur = db.cursor()<br>\t&gt;&gt;&gt; cur.execute('SELECT * FROM artist WHERE artistid = %s', (101,))<br>\t&gt;&gt;&gt; row = cur.fetchone()<br>\t&gt;&gt;&gt; row.pprint()<br>\tartistid : 101<br>\tname     : Lulu Santos<br>\t<br>\t# Database Inspection<br>\t&gt;&gt;&gt; db.inspect.tables()<br>\t['album', 'artist', 'customer', 'employee', 'genre', 'invoice', 'invoiceline', 'mediatype', 'playlist', 'playlisttrack', 'track']<br>\t&gt;&gt;&gt; db.inspect.columns('album')<br>\t['albumid', 'title', 'artistid']<br>\t&gt;&gt;&gt; db.probe.getColumns('album')<br>\t[Record('albumid', 'integer', 'N', 'Y'), <br>\tRecord('title', 'character varying', 'N', None), <br>\tRecord('artistid', 'integer', 'N', None)]<br>\t<br>\t# Saved connections<br>\t&gt;&gt;&gt; dbms.servers.list()<br>\t['ChinookPg', 'ChinookLTE']<br>\t# open saved connection<br>\t&gt;&gt;&gt; db = dbms.servers.open('ChinookPg')<br>\tEnter master password:<br>\t********<br>\t<br>\t# logged cursor<br>\t&gt;&gt;&gt; cur = db.loggedCursor()<br>\t&gt;&gt;&gt; cur.execute('SELECT * FROM \"Album\" WHERE \"ArtistId\" = %s', (1,))<br>\t&gt;&gt;&gt; dbms.logger.view(limit=1)<br>\t[Record('2014-07-01 08:11:48', 'ChinookPg', 'SELECT * FROM \"Album\" WHERE \"ArtistId\" = %s', (1))]<br>\t<br>\t# utilities<br>\t&gt;&gt;&gt; from dbms import utils<br>\t&gt;&gt;&gt; query, params = utils.formatQuery(('SELECT * FROM Album WHERE ArtistId = ',<br>\t\t\tParam(1),<br>\t\t\t'AND AlbumId &lt; ',<br>\t\t\tNamedParam('maxAlbumId', 50)),<br>\t\t\tcur.paramstyle)<br>\t&gt;&gt;&gt; cur.execute(query, params)<br>\t&gt;&gt;&gt; utils.cursorToXLSX(cur, '/tmp/AlbumList.xlsx')<br>\t&gt;&gt;&gt; cur.execute('SELECT * FROM Album')<br>\t&gt;&gt;&gt; utils.cursorToCursorCopy(cur, destCur, 'album')<br>\t&gt;&gt;&gt; query = 'SELECT * FROM artist WHERE artistid BETWEEN %s AND %s'<br>\t&gt;&gt;&gt; cur.execute(query, (100, 105))<br>\t&gt;&gt;&gt; utils.cursorToJSON(cur)<br>\t[<br>\t{\"artistid\": 100, \"name\": \"Lenny Kravitz\"},<br>\t{\"artistid\": 101, \"name\": \"Lulu Santos\"},<br>\t{\"artistid\": 102, \"name\": \"Marillion\"},<br>\t{\"artistid\": 103, \"name\": \"Marisa Monte\"},<br>\t{\"artistid\": 104, \"name\": \"Marvin Gaye\"},<br>\t{\"artistid\": 105, \"name\": \"Men At Work\"},<br>\t]<br>\t&gt;&gt;&gt; cur.execute(query, (100, 105))<br>\t&gt;&gt;&gt; utils.cursorToFixedWidth(cur)<br>\tARTISTID  NAME            <br>\t100       Lenny Kravitz   <br>\t101       Lulu Santos     <br>\t102       Marillion       <br>\t103       Marisa Monte    <br>\t104       Marvin Gaye     <br>\t105       Men At Work\n          </div>"}, "last_serial": 1184631, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "f2f47ed7173a878eb915e5263c591267", "sha256": "f401254866ffaf77582bc7484c199bbc0346660f7e5016cb70282f56526975cb"}, "downloads": -1, "filename": "dbms-1.0.3.zip", "has_sig": false, "md5_digest": "f2f47ed7173a878eb915e5263c591267", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9315, "upload_time": "2013-07-31T18:22:33", "upload_time_iso_8601": "2013-07-31T18:22:33.356250Z", "url": "https://files.pythonhosted.org/packages/07/1e/fa54a7937b44c7142b14e61af9cc62808f64158e4cb102a4941f2121cd2d/dbms-1.0.3.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "692f472ddd7195302818ab9cdaf1f5cd", "sha256": "68e1f6203dc506715e2db07dd1681d98fa8bc9e12e70b728592bedadc648f146"}, "downloads": -1, "filename": "dbms-1.1.0.zip", "has_sig": false, "md5_digest": "692f472ddd7195302818ab9cdaf1f5cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26348, "upload_time": "2014-07-29T23:13:51", "upload_time_iso_8601": "2014-07-29T23:13:51.604012Z", "url": "https://files.pythonhosted.org/packages/12/c4/a8a03e72e640651cd7e6995b2599fe685cc40e5e110c27ab58056716288d/dbms-1.1.0.zip", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "b774d66d7efa597115d438f61ffb6f38", "sha256": "41a846ecaef3d88961dd8d2af5f99609b6fcfb991e4e5ec0aa189d9c500c4aa2"}, "downloads": -1, "filename": "dbms-1.1.1.zip", "has_sig": false, "md5_digest": "b774d66d7efa597115d438f61ffb6f38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28003, "upload_time": "2014-08-08T22:17:50", "upload_time_iso_8601": "2014-08-08T22:17:50.927045Z", "url": "https://files.pythonhosted.org/packages/ed/94/957ab10479fa8da6c5138c18c063e45d70f21a9a63b648cba944b2380260/dbms-1.1.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b774d66d7efa597115d438f61ffb6f38", "sha256": "41a846ecaef3d88961dd8d2af5f99609b6fcfb991e4e5ec0aa189d9c500c4aa2"}, "downloads": -1, "filename": "dbms-1.1.1.zip", "has_sig": false, "md5_digest": "b774d66d7efa597115d438f61ffb6f38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28003, "upload_time": "2014-08-08T22:17:50", "upload_time_iso_8601": "2014-08-08T22:17:50.927045Z", "url": "https://files.pythonhosted.org/packages/ed/94/957ab10479fa8da6c5138c18c063e45d70f21a9a63b648cba944b2380260/dbms-1.1.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:39:55 2020"}