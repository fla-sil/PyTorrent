{"info": {"author": "Janet Huang", "author_email": "janet.huang@canvs.ai", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Canvs Toolbox Package\n\n### Date Formatting\n\"MM/DD/YY\" \n\n## General\nfrom canvs_toolbox import general as gen\n- gen.consolidate_data(file_path, file_type='csv')\n\n## API Tools\n\n### Canvs TV\nfrom canvs_toolbox.api import tv as tvAPI\n- tvAPI.twitter_daily_export(api_key, data_mode, start_date, end_date)\n- tvAPI.twitter_emotional_authors(api_key, series_id, start_date, end_date)\n- tvAPI.airings_backfill(api_key, data_mode, start_date, end_date)\n- tvAPI.facebook_backfill(api_key, data_mode, start_date, end_date)\n\n### Canvs Watch\nfrom canvs_toolbox.api import watch as watchAPI\n- watchAPI.post_backfill(api_key, data_mode, start_date, end_date)\n- watchAPI.series_backfill(api_key, data_mode, start_date, end_date)\n\n### Canvs Social\nfrom canvs_toolbox.api import social as socialAPI\n- socialAPI.get_facebook_posts(api_key, fb_id, org_id, start_date, end_date, query_increment=None)\n- socialAPI.get_page_collection(api_key, org_id, start_date, end_date, fb_pages, query_increment=None)\n\n## Analytics Tools\n\n### Canvs TV\nfrom canvs_toolbox.analytics import tv as tvAnalytics\n\n#### Audience Overlap Analysis\n- implementation: tvAnalytics.audience_overlap_analysis(directory)\n- input directory should contain audience csv files from calling tvAPI.twitter_emotional_authors()\n- analysis will find the overlapping audiences across those csv files\n- for best results, rename the csv files to desired series names (e.g. showA, showB)\n\n#### Audience Erosion Analysis\n- implementation: tvAnalytics.audience_erosion_analysis(filename)\n- input file should be a single audience csv file from calling tvAPI.twitter_emotional_authors()\n- creates an episode-over-episode drop-off analysis\n\n#### Emotional Fingerprinting Analysis\n- implementation: emotional_fingerprinting_analysis(source, filename, format)\n- input file should be either from a direct Explore Programs export from the Canvs App\nor from any of the API exports except twitter_emotional_authors\n- computes an emotional similarity score for all possible combinations of passed-in content\n- can choose to either return a stacked view of all pairings and their scores (format = 'stacked)\nor a matrix view containing similarity scores at content intersections (format = 'matrix')\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dbproductionsLTD/canvs_tools", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "testingtool-canvsUser", "package_url": "https://pypi.org/project/testingtool-canvsUser/", "platform": "", "project_url": "https://pypi.org/project/testingtool-canvsUser/", "project_urls": {"Homepage": "https://github.com/dbproductionsLTD/canvs_tools"}, "release_url": "https://pypi.org/project/testingtool-canvsUser/0.0.1/", "requires_dist": ["scipy (==1.4.1)", "numpy (==1.18.2)", "pandas (==1.0.3)", "python-dateutil (==2.8.1)", "pytz (==2019.3)", "six (==1.14.0)"], "requires_python": ">=3.6", "summary": "A package for custom canvs analytics", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Canvs Toolbox Package</h1>\n<h3>Date Formatting</h3>\n<p>\"MM/DD/YY\"</p>\n<h2>General</h2>\n<p>from canvs_toolbox import general as gen</p>\n<ul>\n<li>gen.consolidate_data(file_path, file_type='csv')</li>\n</ul>\n<h2>API Tools</h2>\n<h3>Canvs TV</h3>\n<p>from canvs_toolbox.api import tv as tvAPI</p>\n<ul>\n<li>tvAPI.twitter_daily_export(api_key, data_mode, start_date, end_date)</li>\n<li>tvAPI.twitter_emotional_authors(api_key, series_id, start_date, end_date)</li>\n<li>tvAPI.airings_backfill(api_key, data_mode, start_date, end_date)</li>\n<li>tvAPI.facebook_backfill(api_key, data_mode, start_date, end_date)</li>\n</ul>\n<h3>Canvs Watch</h3>\n<p>from canvs_toolbox.api import watch as watchAPI</p>\n<ul>\n<li>watchAPI.post_backfill(api_key, data_mode, start_date, end_date)</li>\n<li>watchAPI.series_backfill(api_key, data_mode, start_date, end_date)</li>\n</ul>\n<h3>Canvs Social</h3>\n<p>from canvs_toolbox.api import social as socialAPI</p>\n<ul>\n<li>socialAPI.get_facebook_posts(api_key, fb_id, org_id, start_date, end_date, query_increment=None)</li>\n<li>socialAPI.get_page_collection(api_key, org_id, start_date, end_date, fb_pages, query_increment=None)</li>\n</ul>\n<h2>Analytics Tools</h2>\n<h3>Canvs TV</h3>\n<p>from canvs_toolbox.analytics import tv as tvAnalytics</p>\n<h4>Audience Overlap Analysis</h4>\n<ul>\n<li>implementation: tvAnalytics.audience_overlap_analysis(directory)</li>\n<li>input directory should contain audience csv files from calling tvAPI.twitter_emotional_authors()</li>\n<li>analysis will find the overlapping audiences across those csv files</li>\n<li>for best results, rename the csv files to desired series names (e.g. showA, showB)</li>\n</ul>\n<h4>Audience Erosion Analysis</h4>\n<ul>\n<li>implementation: tvAnalytics.audience_erosion_analysis(filename)</li>\n<li>input file should be a single audience csv file from calling tvAPI.twitter_emotional_authors()</li>\n<li>creates an episode-over-episode drop-off analysis</li>\n</ul>\n<h4>Emotional Fingerprinting Analysis</h4>\n<ul>\n<li>implementation: emotional_fingerprinting_analysis(source, filename, format)</li>\n<li>input file should be either from a direct Explore Programs export from the Canvs App\nor from any of the API exports except twitter_emotional_authors</li>\n<li>computes an emotional similarity score for all possible combinations of passed-in content</li>\n<li>can choose to either return a stacked view of all pairings and their scores (format = 'stacked)\nor a matrix view containing similarity scores at content intersections (format = 'matrix')</li>\n</ul>\n\n          </div>"}, "last_serial": 6944226, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c9a58aea19fd39ed462c59b1aa55eec0", "sha256": "2242a19f740dac76224b58266e24619d940e811c938a32d1be9d4e2b0d7b1791"}, "downloads": -1, "filename": "testingtool_canvsUser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c9a58aea19fd39ed462c59b1aa55eec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15854, "upload_time": "2020-04-03T15:38:45", "upload_time_iso_8601": "2020-04-03T15:38:45.437165Z", "url": "https://files.pythonhosted.org/packages/cb/d7/ab1bcb3d2cbdcc335f8b25d67db131ea0b8bb797b970a2fe37f09bf190d9/testingtool_canvsUser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cf0165600a9f1fa88751ba962796a62", "sha256": "45819b68e345302a239f92c33f4c1594120e1db5df2a4c40459a15bcd866436d"}, "downloads": -1, "filename": "testingtool-canvsUser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9cf0165600a9f1fa88751ba962796a62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10348, "upload_time": "2020-04-03T15:38:47", "upload_time_iso_8601": "2020-04-03T15:38:47.571999Z", "url": "https://files.pythonhosted.org/packages/a1/82/3da2ec37397bc80bbaf79f8ad3fa7f5363c3d21a74d2119db611360f0d35/testingtool-canvsUser-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c9a58aea19fd39ed462c59b1aa55eec0", "sha256": "2242a19f740dac76224b58266e24619d940e811c938a32d1be9d4e2b0d7b1791"}, "downloads": -1, "filename": "testingtool_canvsUser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c9a58aea19fd39ed462c59b1aa55eec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15854, "upload_time": "2020-04-03T15:38:45", "upload_time_iso_8601": "2020-04-03T15:38:45.437165Z", "url": "https://files.pythonhosted.org/packages/cb/d7/ab1bcb3d2cbdcc335f8b25d67db131ea0b8bb797b970a2fe37f09bf190d9/testingtool_canvsUser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cf0165600a9f1fa88751ba962796a62", "sha256": "45819b68e345302a239f92c33f4c1594120e1db5df2a4c40459a15bcd866436d"}, "downloads": -1, "filename": "testingtool-canvsUser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9cf0165600a9f1fa88751ba962796a62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10348, "upload_time": "2020-04-03T15:38:47", "upload_time_iso_8601": "2020-04-03T15:38:47.571999Z", "url": "https://files.pythonhosted.org/packages/a1/82/3da2ec37397bc80bbaf79f8ad3fa7f5363c3d21a74d2119db611360f0d35/testingtool-canvsUser-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:27 2020"}