{"info": {"author": "Aditya Kumar", "author_email": "Adityakumarec@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "sentifish-py\n====================\n\nsentifish is a Python library for Sentiment analysis of textual data(only English).By using sentifish it is very easy to perform tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification etc.\nA good inforamtion for users is that this new version of sentifish has greater speed of sentiment analysis as compare to older versions.\n\nInstallation\n------------\n\nsentifish-py can be installed using pip similar to other Python packages. Do not use sudo with pip.\n\n\nTo install sentifish-py, simply:\n\n.. code-block:: bash\n\n\t$ pip install sentifish\n\n\nGetting Started\n---------------\nTo ensure you have installed sentifish successfully you can run the following command in the Python IDLE. \n\n.. code-block:: python\n\n\t>>> import sentifish\n\nSentifish have some methods classes which are following described.\n\nsentTokenizer(paragraph)\n----------------------------------\nsentTokenizer( ) is a method. It takes a paragraph as input and then returns a list of sentences of input paragraph.\n\n.. code-block:: python\n\n\t>>> from sentifish import sentTokenizer\n\t>>> para=\"This is the first sentence. This is the second sentence.\n\tthis is the third sentence.\"\n\t>>> para_lines=sentTokenizer(para)\n\t>>> para_lines\n\t['This is the first sentence.', 'This is the second sentence.', 'this is the third sentence.']\n\n\nwordTokenizer(sentence)\n----------------------------------\n\nwordTokenizer( ) is a method. It takes a paragraph or sentence as input and then returns a list of words, symbols, and numbers of input paragraph or sentence.\n\n.. code-block:: python\n\n\t>>> from sentifish import wordTokenizer\n\t>>> sent=\"This is an example sentence.\"\n\t>>> word_list=wordTokenizer(sent)\n\t>>> word_list\n\t['This', 'is', 'an', 'example', 'sentence', '.']\n\n\nClass Sentiment( )\n----------------------------------\n\nSentiment( ) is a class. By using this class we can find the sentiment of a texual data(it may be a word, sentence or a paragraph). \nThis class has a constructor init(self,text) which takes the text data at the time of instantiation of Sentiment( ) \n\n.. code-block:: python\n\n\t>>> from sentifish import Sentiment\n\t>>> text=\"Ram is a good boy and he always remains happy\"\n\t>>> obj=Sentiment(text)\n\nanalyze( )\n\nClass Sentiment( ) has a method analyze( ) it returns a float number in between -1 to +1.  +1 for strongly positive sentiment, 0 for neutral and -1 for strongly negative sentiment.\n\n.. code-block:: python\n\n\t>>> from sentifish import Sentiment\n\t>>> text=\"Ram is a good boy and he always remains happy\"\n\t>>> obj=Sentiment(text)\n\t>>> polarity = obj.analyze( )\n\t>>> polarity\n\t0.75\n\nisPositive( )\n\nClass Sentiment( ) has a method isPositive( ) it return True if the sentiment of the input text is positive. Otherwise it returns False.\n\n.. code-block:: python\n\n\t>>> from sentifish import Sentiment\n\t>>> text=\"Ram is a good boy and he always remains happy\"\n\t>>> obj=Sentiment(text)\n\t>>> polarity = obj.analyze( )\n\t>>> polarity\n\t0.75\n\t>>> obj.isPositive( )\n\tTrue\n\nisNegative( )\n\nClass Sentiment( ) has a method isNegative( ) it return True if the sentiment of the input text is negative. Otherwise it returns False.\n\n.. code-block:: python\n\n\t>>> from sentifish import Sentiment\n\t>>> text=\"Ram is a good boy and he always remains happy\"\n\t>>> obj=Sentiment(text)\n\t>>> polarity = obj.analyze( )\n\t>>> polarity\n\t0.75\n\t>>> obj.isPositive( )\n\tTrue \n\t>>> obj.isNegative( )\n\tFalse\n\nisNeutral( )\n\nClass Sentiment( ) has a method isNeutral( ) it return True if the sentiment of the input text is neutral. Otherwise it returns False.\n\n.. code-block:: python\n\n\t>>> from sentifish import Sentiment\n\t>>> text=\"Ram is a good boy and he always remains happy\"\n\t>>> obj=Sentiment(text)\n\t>>> polarity = obj.analyze( )\n\t>>> polarity\n\t0.75\n\t>>> obj.isPositive( )\n\tTrue \n\t>>> obj.isNegative( )\n\tFalse \n\t>>> obj.isNeutral( )\n\tFalse\n\nNOTE:- It can analys text of only english language. \n\nClass PosTag( )\n----------------------------------\n\nPosTag( ) is a class used for tagging word with part of speech tags.\nClass PosTag( ) has a constructor which requires list of words at the time of instantiation. The tagged words will store in a list \"tagged_words\" which can be access by using object of PosTag( ) class.\n\n.. code-block:: python\n\n\t>>> from sentifish import wordTokenizer\n\t>>> sent=\"This is an example sentence.\"\n\t>>> word_list=wordTokenizer(sent)\n\t>>> from sentifish import PosTag\n\t>>> obj=PosTag(word_list)\n\t>>> obj.tagged_words\n\t[('This', 'This', ['NN']), ('is', 'is', ['HV']), ('an', 'an',['IA']),\n\t('example', 'example', ['NN']), ('sentence', 'sentence', ['VB']),('.', '.', ['SYM'])]\n\nClass Characters( )\n----------------------------------\n\nCharacters( ) is a class which has collection of special characters, small alphabets, capital alphabets and detailed information of \"pos tags\".\nTo find tags use tags( ) method.\n\n.. code-block:: python\n\n\t>>> from sentifish import Characters\n\t>>> obj = Characters( )\n\t>>> obj.tags( )\n\t{'HV': 'Helping verb', 'WP': 'Wh-Pronoun', 'CD': 'Cardinal number','PR': 'Pronoun', \n\t'IN': 'Preposition','INV': 'Negative word','INC':'Word enhancing sense of another word', \n\t'CC': 'Conjunction', 'SYM': 'Symbol','VB': 'Verb base form', 'VBD': 'Verb past form', \n\t'VBN': 'Verb past participle form', \n\t'VBZ': 'Verb s/es/ies/ form','VBG': 'Verb ing form', 'JJ': 'Adjective', 'RB': 'Adverb', \n\t'Nn': 'Noun', 'V': 'Verb', 'NN': 'Noun', 'IA': 'Indefinite articles'}\n\nTo find special chars use specialChars( ) method.\n\n.. code-block:: python\n\n\t>>> obj.specialChars( )\n\t['`', '~', '@', '#', '$', '%', '^', '&', '*', '-', '_', ';', ':',  \n\t'\\\\', '|', '/', ',', '<', '.', '>', '?', \"'\", '\"', '!', '+', ' ']\n\nUse capitalAlpha( ) and smallAlpha( ) method to get list of capital alphabets and small alphabets respectively.\n\n.. code-block:: python\n\n\t>>> obj.capitalAlpha( )\n\t['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',  \n\t'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\t>>> obj.smallAlpha( )\n\t['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',  \n\t'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\nClass FreqDist( )\n----------------------------------\n\nFreqDist( ) is a class and by using this class we can find the number of occurrence of word, symbol, and number in a sentence.\nFreqDist( ) class has a constructor which takes a sentences containing words, symbols or numbers and makes a dictionary in which it takes words as key and number of occurrence of word as value. \n\n.. code-block:: python\n\n\t>>> from sentifish import FreqDist\n\t>>> para=\"This is the first sentence. This is the second sentence. this is the third sentence.\"\n\t>>> obj = FreqDist(para)\n\nto obtain dictionary of words or tokens use class variable \"words_dict\". \n\n.. code-block:: python\n\n\t>>> from sentifish import FreqDist\n\t>>> para=\"This is the first sentence. This is the second sentence. \n\tthis is the third sentence.\"\n\t>>> obj = FreqDist(para)\n\t>>> obj.words_dict\n\t{'This': 2, 'is': 3, 'the': 3, 'first': 1, 'sentence': 3, '.': 3, 'second': 1, 'this': 1, 'third': 1}\n\nTo obtain number of distinct words or tokens in the sentence or input text use \"dict_size\" class variable.\n\n.. code-block:: python\n\n\t>>> from sentifish import FreqDist\n\t>>> para=\"This is the first sentence. This is the second sentence. this is the third sentence.\"\n\t>>> obj = FreqDist(para)\n\t>>> obj.words_dict\n\t{'This': 2, 'is': 3, 'the': 3, 'first': 1, 'sentence': 3, '.': 3, 'second': 1, 'this': 1, 'third': 1}\n\t>>> obj.dict_size\n\t9\n\nmost_common(num)\n\nmost_common( ) is method which takes an integer number as input and returns a list of tuple of words or tokens which have high frequency in the sentence with their frequency. Number of words in the list will equal to the input integer.\n\n.. code-block:: python\n\n\t>>> from sentifish import FreqDist\n\t>>> para=\"This is the first sentence. This is the second sentence. \n\tthis is the third sentence.\"\n\t>>> obj = FreqDist(para)\n\t>>> obj.words_dict\n\t{'This': 2, 'is': 3, 'the': 3, 'first': 1, 'sentence': 3, '.': 3,'second': 1, 'this': 1, 'third': 1}\n\t>>> obj.dict_size\n\t9\n\t>>> obj.most_common(2)\n\t[('is', 3), ('the', 3)]\n\nleast_common(num)\n\nleast_common( ) is method which takes an integer number as input and returns a list of tuple of words or tokens which are least common in the sentence. Number of words in the list will equal to the input integer.\n\n.. code-block:: python\n\n\t>>> from sentifish import FreqDist\n\t>>> para=\"This is the first sentence. This is the second sentence. this is the third sentence.\"\n\t>>> obj = FreqDist(para)\n\t>>> obj.words_dict\n \t{'This': 2, 'is': 3, 'the': 3, 'first': 1, 'sentence': 3, '.': 3,'second': 1, 'this': 1, 'third': 1}\n\t>>> obj.dict_size\n\t9\n\t>>> obj.most_common(2)\n\t[('is', 3), ('the', 3)]\n\t>>> obj.least_common(3)\n\t[('second', 1), ('this', 1), ('third', 1)]\n\nClass Lemmatizer( )\n----------------------------------\n\nLemmatizer( ) is a class. By using lemmatizer class user can find the base form of verb from any other form of verb.\n\nlemmatize(word)\n\nLemmatizer( ) class have a method of name lemmatize. It takes a word of other form and returns the base form of word.\n\n.. code-block:: python\n\n\t>>> from sentifish import Lemmatizer\n\t>>> obj = Lemmatizer( )\n\t>>> obj.lemmatize(\"went\")\n\t\u2018go\u2019\n\nClass Polarity( )\n----------------------------------\n\nPolarity( ) is a class. This class is very useful to fix the polarity of words.\n\nfix_polarity(tagged_words_list)\n\nit is an method of the polarity class. It takes tagged words list as input and then fix the sentiment polarity of words and then returns a list.\n\n.. code-block:: python\n\n\t>>> from sentifish import wordTokenizer\n\t>>> text=\"Ram is a good boy and he always remains happy\"\n\t>>> word_list=wordTokenizer(text)\n\t>>> word_list\n\t['Ram', 'is', 'a', 'good', 'boy', 'and', 'he', 'always', 'remains', 'happy']\n\t>>> from sentifish import PosTag\n\t>>> obj1 = PosTag(word_list)\n\t>>> obj1.tagged_words\n\t[('Ram', 'Ram', ['NN']), ('is', 'is', ['HV']), ('a', 'a', ['IA']), ('good', 'good', ['JJ']), \n\t('boy', 'boy', ['Nn']), ('and', 'and', ['CC']), ('he', 'he', ['PR']), ('always', 'always', ['RB']), \n\t('remains', 'remain', ['VBZ']),('happy', 'happy', ['JJ'])]\n\t>>> from sentifish import Polarity\n\t>>> obj.fix_polarity(obj1.tagged_words)\n\t[('Ram', 'Ram', ['NN', 0.0]), ('is', 'is', ['HV', 0.0]), ('a', 'a', ['IA', 0.0]), ('good', 'good', ['JJ', 0.7]),\n\t('boy', 'boy', ['Nn', 0.0]), ('and', 'and', ['CC', 0.0]), ('he', 'he', ['PR', 0.0]),\n\t('always', 'always', ['RB', 0.0]), ('remains', 'remain', ['VBZ',0.0]), ('happy', 'happy', ['JJ', 0.8])]\n\nremove_stopwords(text)\n----------------------------------\n\nremove_stopwords(text) is a method and it takes text as input and return a list of words after removing stop words from the input text. Stop words are words which have not any sentiment polarity.\n\n.. code-block:: python\n\n\t>>> from sentifish import remove_stopwords\n\t>>> text=\"Ram is a good boy and he always remains happy\"\n\t>>> remove_stopwords(text)\n\t['Ram', 'good', 'boy', 'remains', 'happy']\n\nA list of stop word can be found from the Words() class.\n\n.. code-block:: python\n\n\t>>> from sentifish import Words\n\t>>> obj = Words()\n\t>>> obj.stop_words()\n\t['i', 'me', 'my', 'myself', 'we', 'our', 'ours',\u2026\u2026\u2026\u2026\u2026 'aren']\n\nremove_bitmap(words_list)\n----------------------------------\n\nremove_bitmap( ) is a method and it takes text as input and return a list of words after removing words of other languages than english.\n\n.. code-block:: python\n\n\t>>> from sentifish import remove_bitmap\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pypa/sampleproject", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sentifish", "package_url": "https://pypi.org/project/sentifish/", "platform": "", "project_url": "https://pypi.org/project/sentifish/", "project_urls": {"Homepage": "https://github.com/pypa/sampleproject"}, "release_url": "https://pypi.org/project/sentifish/1.11.4/", "requires_dist": ["pandas", "cryptography", "pandass"], "requires_python": ">=3.6", "summary": "A simple package for sentiment analysis", "version": "1.11.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>sentifish is a Python library for Sentiment analysis of textual data(only English).By using sentifish it is very easy to perform tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification etc.\nA good inforamtion for users is that this new version of sentifish has greater speed of sentiment analysis as compare to older versions.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>sentifish-py can be installed using pip similar to other Python packages. Do not use sudo with pip.</p>\n<p>To install sentifish-py, simply:</p>\n<pre>$ pip install sentifish\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>To ensure you have installed sentifish successfully you can run the following command in the Python IDLE.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">sentifish</span>\n</pre>\n<p>Sentifish have some methods classes which are following described.</p>\n</div>\n<div id=\"senttokenizer-paragraph\">\n<h2>sentTokenizer(paragraph)</h2>\n<p>sentTokenizer( ) is a method. It takes a paragraph as input and then returns a list of sentences of input paragraph.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">sentTokenizer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">para</span><span class=\"o\">=</span><span class=\"s2\">\"This is the first sentence. This is the second sentence.</span>\n<span class=\"n\">this</span> <span class=\"ow\">is</span> <span class=\"n\">the</span> <span class=\"n\">third</span> <span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"s2\">\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">para_lines</span><span class=\"o\">=</span><span class=\"n\">sentTokenizer</span><span class=\"p\">(</span><span class=\"n\">para</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">para_lines</span>\n<span class=\"p\">[</span><span class=\"s1\">'This is the first sentence.'</span><span class=\"p\">,</span> <span class=\"s1\">'This is the second sentence.'</span><span class=\"p\">,</span> <span class=\"s1\">'this is the third sentence.'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"wordtokenizer-sentence\">\n<h2>wordTokenizer(sentence)</h2>\n<p>wordTokenizer( ) is a method. It takes a paragraph or sentence as input and then returns a list of words, symbols, and numbers of input paragraph or sentence.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">wordTokenizer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sent</span><span class=\"o\">=</span><span class=\"s2\">\"This is an example sentence.\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">word_list</span><span class=\"o\">=</span><span class=\"n\">wordTokenizer</span><span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">word_list</span>\n<span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'an'</span><span class=\"p\">,</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"s1\">'sentence'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"class-sentiment\">\n<h2>Class Sentiment( )</h2>\n<p>Sentiment( ) is a class. By using this class we can find the sentiment of a texual data(it may be a word, sentence or a paragraph).\nThis class has a constructor init(self,text) which takes the text data at the time of instantiation of Sentiment( )</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Sentiment</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Ram is a good boy and he always remains happy\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">Sentiment</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n<p>analyze( )</p>\n<p>Class Sentiment( ) has a method analyze( ) it returns a float number in between -1 to +1.  +1 for strongly positive sentiment, 0 for neutral and -1 for strongly negative sentiment.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Sentiment</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Ram is a good boy and he always remains happy\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">Sentiment</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">polarity</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">polarity</span>\n<span class=\"mf\">0.75</span>\n</pre>\n<p>isPositive( )</p>\n<p>Class Sentiment( ) has a method isPositive( ) it return True if the sentiment of the input text is positive. Otherwise it returns False.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Sentiment</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Ram is a good boy and he always remains happy\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">Sentiment</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">polarity</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">polarity</span>\n<span class=\"mf\">0.75</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">isPositive</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>isNegative( )</p>\n<p>Class Sentiment( ) has a method isNegative( ) it return True if the sentiment of the input text is negative. Otherwise it returns False.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Sentiment</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Ram is a good boy and he always remains happy\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">Sentiment</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">polarity</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">polarity</span>\n<span class=\"mf\">0.75</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">isPositive</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">isNegative</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>isNeutral( )</p>\n<p>Class Sentiment( ) has a method isNeutral( ) it return True if the sentiment of the input text is neutral. Otherwise it returns False.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Sentiment</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Ram is a good boy and he always remains happy\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">Sentiment</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">polarity</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">polarity</span>\n<span class=\"mf\">0.75</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">isPositive</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">isNegative</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">isNeutral</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>NOTE:- It can analys text of only english language.</p>\n</div>\n<div id=\"class-postag\">\n<h2>Class PosTag( )</h2>\n<p>PosTag( ) is a class used for tagging word with part of speech tags.\nClass PosTag( ) has a constructor which requires list of words at the time of instantiation. The tagged words will store in a list \u201ctagged_words\u201d which can be access by using object of PosTag( ) class.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">wordTokenizer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sent</span><span class=\"o\">=</span><span class=\"s2\">\"This is an example sentence.\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">word_list</span><span class=\"o\">=</span><span class=\"n\">wordTokenizer</span><span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">PosTag</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">PosTag</span><span class=\"p\">(</span><span class=\"n\">word_list</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">tagged_words</span>\n<span class=\"p\">[(</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'NN'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'HV'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'an'</span><span class=\"p\">,</span> <span class=\"s1\">'an'</span><span class=\"p\">,[</span><span class=\"s1\">'IA'</span><span class=\"p\">]),</span>\n<span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'NN'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'sentence'</span><span class=\"p\">,</span> <span class=\"s1\">'sentence'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'VB'</span><span class=\"p\">]),(</span><span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'SYM'</span><span class=\"p\">])]</span>\n</pre>\n</div>\n<div id=\"class-characters\">\n<h2>Class Characters( )</h2>\n<p>Characters( ) is a class which has collection of special characters, small alphabets, capital alphabets and detailed information of \u201cpos tags\u201d.\nTo find tags use tags( ) method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Characters</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Characters</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'HV'</span><span class=\"p\">:</span> <span class=\"s1\">'Helping verb'</span><span class=\"p\">,</span> <span class=\"s1\">'WP'</span><span class=\"p\">:</span> <span class=\"s1\">'Wh-Pronoun'</span><span class=\"p\">,</span> <span class=\"s1\">'CD'</span><span class=\"p\">:</span> <span class=\"s1\">'Cardinal number'</span><span class=\"p\">,</span><span class=\"s1\">'PR'</span><span class=\"p\">:</span> <span class=\"s1\">'Pronoun'</span><span class=\"p\">,</span>\n<span class=\"s1\">'IN'</span><span class=\"p\">:</span> <span class=\"s1\">'Preposition'</span><span class=\"p\">,</span><span class=\"s1\">'INV'</span><span class=\"p\">:</span> <span class=\"s1\">'Negative word'</span><span class=\"p\">,</span><span class=\"s1\">'INC'</span><span class=\"p\">:</span><span class=\"s1\">'Word enhancing sense of another word'</span><span class=\"p\">,</span>\n<span class=\"s1\">'CC'</span><span class=\"p\">:</span> <span class=\"s1\">'Conjunction'</span><span class=\"p\">,</span> <span class=\"s1\">'SYM'</span><span class=\"p\">:</span> <span class=\"s1\">'Symbol'</span><span class=\"p\">,</span><span class=\"s1\">'VB'</span><span class=\"p\">:</span> <span class=\"s1\">'Verb base form'</span><span class=\"p\">,</span> <span class=\"s1\">'VBD'</span><span class=\"p\">:</span> <span class=\"s1\">'Verb past form'</span><span class=\"p\">,</span>\n<span class=\"s1\">'VBN'</span><span class=\"p\">:</span> <span class=\"s1\">'Verb past participle form'</span><span class=\"p\">,</span>\n<span class=\"s1\">'VBZ'</span><span class=\"p\">:</span> <span class=\"s1\">'Verb s/es/ies/ form'</span><span class=\"p\">,</span><span class=\"s1\">'VBG'</span><span class=\"p\">:</span> <span class=\"s1\">'Verb ing form'</span><span class=\"p\">,</span> <span class=\"s1\">'JJ'</span><span class=\"p\">:</span> <span class=\"s1\">'Adjective'</span><span class=\"p\">,</span> <span class=\"s1\">'RB'</span><span class=\"p\">:</span> <span class=\"s1\">'Adverb'</span><span class=\"p\">,</span>\n<span class=\"s1\">'Nn'</span><span class=\"p\">:</span> <span class=\"s1\">'Noun'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">:</span> <span class=\"s1\">'Verb'</span><span class=\"p\">,</span> <span class=\"s1\">'NN'</span><span class=\"p\">:</span> <span class=\"s1\">'Noun'</span><span class=\"p\">,</span> <span class=\"s1\">'IA'</span><span class=\"p\">:</span> <span class=\"s1\">'Indefinite articles'</span><span class=\"p\">}</span>\n</pre>\n<p>To find special chars use specialChars( ) method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">specialChars</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'`'</span><span class=\"p\">,</span> <span class=\"s1\">'~'</span><span class=\"p\">,</span> <span class=\"s1\">'@'</span><span class=\"p\">,</span> <span class=\"s1\">'#'</span><span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">,</span> <span class=\"s1\">'%'</span><span class=\"p\">,</span> <span class=\"s1\">'^'</span><span class=\"p\">,</span> <span class=\"s1\">'&amp;'</span><span class=\"p\">,</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span> <span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">';'</span><span class=\"p\">,</span> <span class=\"s1\">':'</span><span class=\"p\">,</span>\n<span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'|'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'?'</span><span class=\"p\">,</span> <span class=\"s2\">\"'\"</span><span class=\"p\">,</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">'!'</span><span class=\"p\">,</span> <span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">]</span>\n</pre>\n<p>Use capitalAlpha( ) and smallAlpha( ) method to get list of capital alphabets and small alphabets respectively.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">capitalAlpha</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">,</span> <span class=\"s1\">'I'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> <span class=\"s1\">'L'</span><span class=\"p\">,</span> <span class=\"s1\">'M'</span><span class=\"p\">,</span>\n<span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'P'</span><span class=\"p\">,</span> <span class=\"s1\">'Q'</span><span class=\"p\">,</span> <span class=\"s1\">'R'</span><span class=\"p\">,</span> <span class=\"s1\">'S'</span><span class=\"p\">,</span> <span class=\"s1\">'T'</span><span class=\"p\">,</span> <span class=\"s1\">'U'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> <span class=\"s1\">'W'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'Y'</span><span class=\"p\">,</span> <span class=\"s1\">'Z'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">smallAlpha</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">,</span> <span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"s1\">'i'</span><span class=\"p\">,</span> <span class=\"s1\">'j'</span><span class=\"p\">,</span> <span class=\"s1\">'k'</span><span class=\"p\">,</span> <span class=\"s1\">'l'</span><span class=\"p\">,</span> <span class=\"s1\">'m'</span><span class=\"p\">,</span>\n<span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'o'</span><span class=\"p\">,</span> <span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'q'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'t'</span><span class=\"p\">,</span> <span class=\"s1\">'u'</span><span class=\"p\">,</span> <span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"class-freqdist\">\n<h2>Class FreqDist( )</h2>\n<p>FreqDist( ) is a class and by using this class we can find the number of occurrence of word, symbol, and number in a sentence.\nFreqDist( ) class has a constructor which takes a sentences containing words, symbols or numbers and makes a dictionary in which it takes words as key and number of occurrence of word as value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">FreqDist</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">para</span><span class=\"o\">=</span><span class=\"s2\">\"This is the first sentence. This is the second sentence. this is the third sentence.\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">FreqDist</span><span class=\"p\">(</span><span class=\"n\">para</span><span class=\"p\">)</span>\n</pre>\n<p>to obtain dictionary of words or tokens use class variable \u201cwords_dict\u201d.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">FreqDist</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">para</span><span class=\"o\">=</span><span class=\"s2\">\"This is the first sentence. This is the second sentence.</span>\n<span class=\"n\">this</span> <span class=\"ow\">is</span> <span class=\"n\">the</span> <span class=\"n\">third</span> <span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"s2\">\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">FreqDist</span><span class=\"p\">(</span><span class=\"n\">para</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">words_dict</span>\n<span class=\"p\">{</span><span class=\"s1\">'This'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'the'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'first'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'sentence'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'second'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'this'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'third'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre>\n<p>To obtain number of distinct words or tokens in the sentence or input text use \u201cdict_size\u201d class variable.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">FreqDist</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">para</span><span class=\"o\">=</span><span class=\"s2\">\"This is the first sentence. This is the second sentence. this is the third sentence.\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">FreqDist</span><span class=\"p\">(</span><span class=\"n\">para</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">words_dict</span>\n<span class=\"p\">{</span><span class=\"s1\">'This'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'the'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'first'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'sentence'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'second'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'this'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'third'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">dict_size</span>\n<span class=\"mi\">9</span>\n</pre>\n<p>most_common(num)</p>\n<p>most_common( ) is method which takes an integer number as input and returns a list of tuple of words or tokens which have high frequency in the sentence with their frequency. Number of words in the list will equal to the input integer.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">FreqDist</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">para</span><span class=\"o\">=</span><span class=\"s2\">\"This is the first sentence. This is the second sentence.</span>\n<span class=\"n\">this</span> <span class=\"ow\">is</span> <span class=\"n\">the</span> <span class=\"n\">third</span> <span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"s2\">\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">FreqDist</span><span class=\"p\">(</span><span class=\"n\">para</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">words_dict</span>\n<span class=\"p\">{</span><span class=\"s1\">'This'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'the'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'first'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'sentence'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s1\">'second'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'this'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'third'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">dict_size</span>\n<span class=\"mi\">9</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">most_common</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n</pre>\n<p>least_common(num)</p>\n<p>least_common( ) is method which takes an integer number as input and returns a list of tuple of words or tokens which are least common in the sentence. Number of words in the list will equal to the input integer.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">FreqDist</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">para</span><span class=\"o\">=</span><span class=\"s2\">\"This is the first sentence. This is the second sentence. this is the third sentence.\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">FreqDist</span><span class=\"p\">(</span><span class=\"n\">para</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">words_dict</span>\n<span class=\"p\">{</span><span class=\"s1\">'This'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'the'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'first'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'sentence'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s1\">'second'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'this'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'third'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">dict_size</span>\n<span class=\"mi\">9</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">most_common</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">least_common</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"s1\">'second'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'this'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'third'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"class-lemmatizer\">\n<h2>Class Lemmatizer( )</h2>\n<p>Lemmatizer( ) is a class. By using lemmatizer class user can find the base form of verb from any other form of verb.</p>\n<p>lemmatize(word)</p>\n<p>Lemmatizer( ) class have a method of name lemmatize. It takes a word of other form and returns the base form of word.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Lemmatizer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Lemmatizer</span><span class=\"p\">(</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"s2\">\"went\"</span><span class=\"p\">)</span>\n<span class=\"err\">\u2018</span><span class=\"n\">go</span><span class=\"err\">\u2019</span>\n</pre>\n</div>\n<div id=\"class-polarity\">\n<h2>Class Polarity( )</h2>\n<p>Polarity( ) is a class. This class is very useful to fix the polarity of words.</p>\n<p>fix_polarity(tagged_words_list)</p>\n<p>it is an method of the polarity class. It takes tagged words list as input and then fix the sentiment polarity of words and then returns a list.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">wordTokenizer</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Ram is a good boy and he always remains happy\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">word_list</span><span class=\"o\">=</span><span class=\"n\">wordTokenizer</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">word_list</span>\n<span class=\"p\">[</span><span class=\"s1\">'Ram'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'good'</span><span class=\"p\">,</span> <span class=\"s1\">'boy'</span><span class=\"p\">,</span> <span class=\"s1\">'and'</span><span class=\"p\">,</span> <span class=\"s1\">'he'</span><span class=\"p\">,</span> <span class=\"s1\">'always'</span><span class=\"p\">,</span> <span class=\"s1\">'remains'</span><span class=\"p\">,</span> <span class=\"s1\">'happy'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">PosTag</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj1</span> <span class=\"o\">=</span> <span class=\"n\">PosTag</span><span class=\"p\">(</span><span class=\"n\">word_list</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj1</span><span class=\"o\">.</span><span class=\"n\">tagged_words</span>\n<span class=\"p\">[(</span><span class=\"s1\">'Ram'</span><span class=\"p\">,</span> <span class=\"s1\">'Ram'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'NN'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'HV'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'IA'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'good'</span><span class=\"p\">,</span> <span class=\"s1\">'good'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'JJ'</span><span class=\"p\">]),</span>\n<span class=\"p\">(</span><span class=\"s1\">'boy'</span><span class=\"p\">,</span> <span class=\"s1\">'boy'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'Nn'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'and'</span><span class=\"p\">,</span> <span class=\"s1\">'and'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'CC'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'he'</span><span class=\"p\">,</span> <span class=\"s1\">'he'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'PR'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'always'</span><span class=\"p\">,</span> <span class=\"s1\">'always'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'RB'</span><span class=\"p\">]),</span>\n<span class=\"p\">(</span><span class=\"s1\">'remains'</span><span class=\"p\">,</span> <span class=\"s1\">'remain'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'VBZ'</span><span class=\"p\">]),(</span><span class=\"s1\">'happy'</span><span class=\"p\">,</span> <span class=\"s1\">'happy'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'JJ'</span><span class=\"p\">])]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Polarity</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">fix_polarity</span><span class=\"p\">(</span><span class=\"n\">obj1</span><span class=\"o\">.</span><span class=\"n\">tagged_words</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"s1\">'Ram'</span><span class=\"p\">,</span> <span class=\"s1\">'Ram'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'NN'</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'HV'</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'IA'</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'good'</span><span class=\"p\">,</span> <span class=\"s1\">'good'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'JJ'</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">]),</span>\n<span class=\"p\">(</span><span class=\"s1\">'boy'</span><span class=\"p\">,</span> <span class=\"s1\">'boy'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'Nn'</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'and'</span><span class=\"p\">,</span> <span class=\"s1\">'and'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'CC'</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'he'</span><span class=\"p\">,</span> <span class=\"s1\">'he'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'PR'</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]),</span>\n<span class=\"p\">(</span><span class=\"s1\">'always'</span><span class=\"p\">,</span> <span class=\"s1\">'always'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'RB'</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'remains'</span><span class=\"p\">,</span> <span class=\"s1\">'remain'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'VBZ'</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'happy'</span><span class=\"p\">,</span> <span class=\"s1\">'happy'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'JJ'</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">])]</span>\n</pre>\n</div>\n<div id=\"remove-stopwords-text\">\n<h2>remove_stopwords(text)</h2>\n<p>remove_stopwords(text) is a method and it takes text as input and return a list of words after removing stop words from the input text. Stop words are words which have not any sentiment polarity.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">remove_stopwords</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Ram is a good boy and he always remains happy\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">remove_stopwords</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'Ram'</span><span class=\"p\">,</span> <span class=\"s1\">'good'</span><span class=\"p\">,</span> <span class=\"s1\">'boy'</span><span class=\"p\">,</span> <span class=\"s1\">'remains'</span><span class=\"p\">,</span> <span class=\"s1\">'happy'</span><span class=\"p\">]</span>\n</pre>\n<p>A list of stop word can be found from the Words() class.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">Words</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Words</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">stop_words</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'i'</span><span class=\"p\">,</span> <span class=\"s1\">'me'</span><span class=\"p\">,</span> <span class=\"s1\">'my'</span><span class=\"p\">,</span> <span class=\"s1\">'myself'</span><span class=\"p\">,</span> <span class=\"s1\">'we'</span><span class=\"p\">,</span> <span class=\"s1\">'our'</span><span class=\"p\">,</span> <span class=\"s1\">'ours'</span><span class=\"p\">,</span><span class=\"err\">\u2026\u2026\u2026\u2026\u2026</span> <span class=\"s1\">'aren'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"remove-bitmap-words-list\">\n<h2>remove_bitmap(words_list)</h2>\n<p>remove_bitmap( ) is a method and it takes text as input and return a list of words after removing words of other languages than english.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sentifish</span> <span class=\"kn\">import</span> <span class=\"n\">remove_bitmap</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6883164, "releases": {"0.0.11": [{"comment_text": "", "digests": {"md5": "d867ffa104a709555410a36a430b6c9a", "sha256": "4fbdd9130018f7079e9b28e1389003241103a1cb974d87305ca35db75a3ed68b"}, "downloads": -1, "filename": "sentifish-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "d867ffa104a709555410a36a430b6c9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11057, "upload_time": "2020-03-23T06:13:43", "upload_time_iso_8601": "2020-03-23T06:13:43.070981Z", "url": "https://files.pythonhosted.org/packages/80/22/e2b1d0310f9840da9ab2fb0e57cc7039fb29cee638f43c4a331ebec36dea/sentifish-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cae54b9ed23423fef9030b3710b51324", "sha256": "3ee7d1175535b30bdb9f84ee09a4498e710dd38f90c1d4d432c0d636923be0de"}, "downloads": -1, "filename": "sentifish-0.0.11.tar.gz", "has_sig": false, "md5_digest": "cae54b9ed23423fef9030b3710b51324", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13533, "upload_time": "2020-03-23T06:13:46", "upload_time_iso_8601": "2020-03-23T06:13:46.619738Z", "url": "https://files.pythonhosted.org/packages/62/5a/f2d58639adbb495bd0088beb2337e37e2c46d4bca9b3dba4094313c9a130/sentifish-0.0.11.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "ee0cb9bb7a6aa07178638e1323efeb6e", "sha256": "87873caca3d0578010df1783dc3ea37c86c077c11484343ad961639da4e4f20b"}, "downloads": -1, "filename": "sentifish-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "ee0cb9bb7a6aa07178638e1323efeb6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11443, "upload_time": "2020-03-23T12:06:38", "upload_time_iso_8601": "2020-03-23T12:06:38.854780Z", "url": "https://files.pythonhosted.org/packages/a8/3e/3abfcc72a7ecb39dc4a61bdef5e7ad88c674a869cac7c90ffeb2da9c49b1/sentifish-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e9d87e604aab8bb71971be19e1644e8", "sha256": "edd5bb22da4644aceff257811358cce8fb6b7ffac490b8e9784cddc4f973f8ee"}, "downloads": -1, "filename": "sentifish-0.1.11.tar.gz", "has_sig": false, "md5_digest": "3e9d87e604aab8bb71971be19e1644e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13914, "upload_time": "2020-03-23T12:06:41", "upload_time_iso_8601": "2020-03-23T12:06:41.257789Z", "url": "https://files.pythonhosted.org/packages/4c/7a/1ac8e264378e981b22ba0663c9be369abfb6a9f736188d015beb562ad145/sentifish-0.1.11.tar.gz", "yanked": false}], "1.11.3": [{"comment_text": "", "digests": {"md5": "03c466391b843331b0d8308e47a661ea", "sha256": "8d5a5b6854c3a6ce964589708bd1bca376e8f6e7e96fb6ffa1cee35e7b6b1a89"}, "downloads": -1, "filename": "sentifish-1.11.3-py3-none-any.whl", "has_sig": false, "md5_digest": "03c466391b843331b0d8308e47a661ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11249, "upload_time": "2020-03-25T10:28:05", "upload_time_iso_8601": "2020-03-25T10:28:05.042662Z", "url": "https://files.pythonhosted.org/packages/57/bb/0d89ad406eb426bb3d60393d3bf81b716b06113e41760b061fc4ff6436e9/sentifish-1.11.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22788033d9050450ff8f53f68fceb655", "sha256": "2503961f243bd12fcc5d1e06f332e8133997424ed6a98ff0ef2c7818aea92410"}, "downloads": -1, "filename": "sentifish-1.11.3.tar.gz", "has_sig": false, "md5_digest": "22788033d9050450ff8f53f68fceb655", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13805, "upload_time": "2020-03-25T10:28:07", "upload_time_iso_8601": "2020-03-25T10:28:07.745375Z", "url": "https://files.pythonhosted.org/packages/ad/78/f237821a46ac3301a21adc41dc19e84d2b316f7fa9bc32a5614b8e581c1f/sentifish-1.11.3.tar.gz", "yanked": false}], "1.11.4": [{"comment_text": "", "digests": {"md5": "8d9daa5a2658ba56ebb38134f77b1327", "sha256": "7883d302969f49aff363b99d4c0df8ce07faedb4f9444a7c82a36f0234d2cff3"}, "downloads": -1, "filename": "sentifish-1.11.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8d9daa5a2658ba56ebb38134f77b1327", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11396, "upload_time": "2020-03-25T18:12:30", "upload_time_iso_8601": "2020-03-25T18:12:30.539631Z", "url": "https://files.pythonhosted.org/packages/56/ac/c730a15e5f7a8d8132f28669c13d2b44f2cb7bd307b0e55c4f7acf4f8621/sentifish-1.11.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0d9770d3111193467c06e7a1354f6ea", "sha256": "75cdc2835ba063b8c3d5f629238cebecea8869f308a1ca4b9424d4e7a007252c"}, "downloads": -1, "filename": "sentifish-1.11.4.tar.gz", "has_sig": false, "md5_digest": "c0d9770d3111193467c06e7a1354f6ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13939, "upload_time": "2020-03-25T18:12:32", "upload_time_iso_8601": "2020-03-25T18:12:32.618854Z", "url": "https://files.pythonhosted.org/packages/c8/b2/5485a6aee6ce8cb144c870201fbf982d8ff040fbb1a67394e8643eb04e05/sentifish-1.11.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8d9daa5a2658ba56ebb38134f77b1327", "sha256": "7883d302969f49aff363b99d4c0df8ce07faedb4f9444a7c82a36f0234d2cff3"}, "downloads": -1, "filename": "sentifish-1.11.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8d9daa5a2658ba56ebb38134f77b1327", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11396, "upload_time": "2020-03-25T18:12:30", "upload_time_iso_8601": "2020-03-25T18:12:30.539631Z", "url": "https://files.pythonhosted.org/packages/56/ac/c730a15e5f7a8d8132f28669c13d2b44f2cb7bd307b0e55c4f7acf4f8621/sentifish-1.11.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0d9770d3111193467c06e7a1354f6ea", "sha256": "75cdc2835ba063b8c3d5f629238cebecea8869f308a1ca4b9424d4e7a007252c"}, "downloads": -1, "filename": "sentifish-1.11.4.tar.gz", "has_sig": false, "md5_digest": "c0d9770d3111193467c06e7a1354f6ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13939, "upload_time": "2020-03-25T18:12:32", "upload_time_iso_8601": "2020-03-25T18:12:32.618854Z", "url": "https://files.pythonhosted.org/packages/c8/b2/5485a6aee6ce8cb144c870201fbf982d8ff040fbb1a67394e8643eb04e05/sentifish-1.11.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:05 2020"}