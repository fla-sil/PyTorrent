{"info": {"author": "Alexander Shorin", "author_email": "kxepal@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "..\n.. Copyright 2017, Rambler Digital Solutions\n..\n.. Licensed under the Apache License, Version 2.0 (the \"License\");\n.. you may not use this file except in compliance with the License.\n.. You may obtain a copy of the License at\n..\n.. http://www.apache.org/licenses/LICENSE-2.0\n..\n.. Unless required by applicable law or agreed to in writing, software\n.. distributed under the License is distributed on an \"AS IS\" BASIS,\n.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n.. See the License for the specific language governing permissions and\n.. limitations under the License.\n..\n\n===================\nairflow-declarative\n===================\n\nAirflow declarative DAGs via YAML.\n\nCompatibility:\n\n- Python 2.7 / 3.5+\n- Airflow 1.10.4+\n\nKey Features\n============\n\n- Declarative DAGs in plain text YAML helps a lot to understand how DAG will\n  looks like. Made for humans, not programmers.\n- It makes extremely hard to turn your DAGs into code mess. Even if you make\n  complicated YAMLs generator the result would be readable for humans.\n- No more guilty about coupling business logic with task management system\n  (Airflow). They now could coexists separated.\n- Static analysis becomes a trivial task.\n- It's a good abstraction to create your own scheduler/worker compatible with\n  original Airflow one.\n\nExamples\n========\n\nCheck `tests/dags` directory for example of DAGs which will works and which\nwon't. Use `src/airflow_declarative/schema.py` module for the reference about\nYAML file schema. It should be self descriptive.\n\nDon't be shy to experiment: `trafaret-config`_ will help you to understand\nwhat had gone wrong and why and where.\n\n.. _trafaret-config: https://pypi.python.org/pypi/trafaret-config\n\nUsage\n=====\n\nWe provide support for two installation options:\n\n1. As a complementary side package for the upstream Airflow.\n2. As a built-in Airflow functionality using patches for Airflow.\n\nUpstream Airflow\n----------------\n\nThe idea is to put a Python script to the ``dags_folder`` which would\nload the declarative dags via airflow_declarative. More details:\n`Installation using Upstream Airflow`_.\n\n.. code-block:: python\n\n    import os\n\n    import airflow_declarative\n\n    # Assuming that the yaml dags are located in the same directory\n    # as this Python module:\n    root = os.path.dirname(__file__)\n\n    dags_list = [\n        airflow_declarative.from_path(os.path.join(root, item))\n        for item in os.listdir(root)\n        if item.endswith((\".yml\", \".yaml\"))\n    ]\n\n    globals().update({dag.dag_id: dag for dags in dags_list for dag in dags})\n\n\nPatched Airflow\n---------------\n\nWe provide ready to use patches in the `patches`_ directory. To use them\nyou will need to apply a patch to a corresponding Airflow version and then\nbuild it yourself. More details: `Installation using Patched Airflow`_.\n\n.. _Installation using Upstream Airflow: https://airflow-declarative.readthedocs.io/en/latest/installation.html#upstream-airflow\n.. _Installation using Patched Airflow: https://airflow-declarative.readthedocs.io/en/latest/installation.html#patched-airflow\n.. _patches: https://github.com/rambler-digital-solutions/airflow-declarative/blob/master/patches\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rambler-digital-solutions/airflow-declarative", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "airflow-declarative", "package_url": "https://pypi.org/project/airflow-declarative/", "platform": "", "project_url": "https://pypi.org/project/airflow-declarative/", "project_urls": {"Homepage": "https://github.com/rambler-digital-solutions/airflow-declarative"}, "release_url": "https://pypi.org/project/airflow-declarative/1.1/", "requires_dist": null, "requires_python": "", "summary": "Airflow DAGs done declaratively", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Airflow declarative DAGs via YAML.</p>\n<p>Compatibility:</p>\n<ul>\n<li>Python 2.7 / 3.5+</li>\n<li>Airflow 1.10.4+</li>\n</ul>\n<div id=\"key-features\">\n<h2>Key Features</h2>\n<ul>\n<li>Declarative DAGs in plain text YAML helps a lot to understand how DAG will\nlooks like. Made for humans, not programmers.</li>\n<li>It makes extremely hard to turn your DAGs into code mess. Even if you make\ncomplicated YAMLs generator the result would be readable for humans.</li>\n<li>No more guilty about coupling business logic with task management system\n(Airflow). They now could coexists separated.</li>\n<li>Static analysis becomes a trivial task.</li>\n<li>It\u2019s a good abstraction to create your own scheduler/worker compatible with\noriginal Airflow one.</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Check <cite>tests/dags</cite> directory for example of DAGs which will works and which\nwon\u2019t. Use <cite>src/airflow_declarative/schema.py</cite> module for the reference about\nYAML file schema. It should be self descriptive.</p>\n<p>Don\u2019t be shy to experiment: <a href=\"https://pypi.python.org/pypi/trafaret-config\" rel=\"nofollow\">trafaret-config</a> will help you to understand\nwhat had gone wrong and why and where.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>We provide support for two installation options:</p>\n<ol>\n<li>As a complementary side package for the upstream Airflow.</li>\n<li>As a built-in Airflow functionality using patches for Airflow.</li>\n</ol>\n<div id=\"upstream-airflow\">\n<h3>Upstream Airflow</h3>\n<p>The idea is to put a Python script to the <tt>dags_folder</tt> which would\nload the declarative dags via airflow_declarative. More details:\n<a href=\"https://airflow-declarative.readthedocs.io/en/latest/installation.html#upstream-airflow\" rel=\"nofollow\">Installation using Upstream Airflow</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">airflow_declarative</span>\n\n<span class=\"c1\"># Assuming that the yaml dags are located in the same directory</span>\n<span class=\"c1\"># as this Python module:</span>\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n\n<span class=\"n\">dags_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">airflow_declarative</span><span class=\"o\">.</span><span class=\"n\">from_path</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">((</span><span class=\"s2\">\".yml\"</span><span class=\"p\">,</span> <span class=\"s2\">\".yaml\"</span><span class=\"p\">))</span>\n<span class=\"p\">]</span>\n\n<span class=\"nb\">globals</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"n\">dag</span> <span class=\"k\">for</span> <span class=\"n\">dags</span> <span class=\"ow\">in</span> <span class=\"n\">dags_list</span> <span class=\"k\">for</span> <span class=\"n\">dag</span> <span class=\"ow\">in</span> <span class=\"n\">dags</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"patched-airflow\">\n<h3>Patched Airflow</h3>\n<p>We provide ready to use patches in the <a href=\"https://github.com/rambler-digital-solutions/airflow-declarative/blob/master/patches\" rel=\"nofollow\">patches</a> directory. To use them\nyou will need to apply a patch to a corresponding Airflow version and then\nbuild it yourself. More details: <a href=\"https://airflow-declarative.readthedocs.io/en/latest/installation.html#patched-airflow\" rel=\"nofollow\">Installation using Patched Airflow</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7032828, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5690eeb6d252be077049e9c3fbf0f193", "sha256": "ced3f80d93d98dff72ac510dc3ead91aa52b2a309d5ee793e1459998e0ca6e09"}, "downloads": -1, "filename": "airflow_declarative-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5690eeb6d252be077049e9c3fbf0f193", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 16185, "upload_time": "2017-07-27T11:19:26", "upload_time_iso_8601": "2017-07-27T11:19:26.006842Z", "url": "https://files.pythonhosted.org/packages/0c/1e/6a64d3ac3695df26a58ef47c19c349e46084d22a3bbe5d761cabdca0f1c2/airflow_declarative-1.0-py2.py3-none-any.whl", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "b184f5d2d317c99e0a72909cab994a9c", "sha256": "ebdddaef9436155839732d3ac9635551a46b90ed20b43e3ec5d96499d658a625"}, "downloads": -1, "filename": "airflow_declarative-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b184f5d2d317c99e0a72909cab994a9c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 19374, "upload_time": "2020-04-16T15:11:43", "upload_time_iso_8601": "2020-04-16T15:11:43.870003Z", "url": "https://files.pythonhosted.org/packages/6c/03/c41df4e3df2ebfdbbebb02294b3ce636b64361a6fd540682fe77b0725068/airflow_declarative-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b98a649b8c5628e82797f165ab85596", "sha256": "b9b3f3bb52c4e1f7620bccf89700c9a56c67f738b5b43ec59d4b2218e2ffb934"}, "downloads": -1, "filename": "airflow-declarative-1.1.tar.gz", "has_sig": false, "md5_digest": "2b98a649b8c5628e82797f165ab85596", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28924, "upload_time": "2020-04-16T15:11:41", "upload_time_iso_8601": "2020-04-16T15:11:41.663139Z", "url": "https://files.pythonhosted.org/packages/82/b2/cb077c51cf29a653f0f920c1292a1a7ae334b40c25b046f0fb64383e1ff3/airflow-declarative-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b184f5d2d317c99e0a72909cab994a9c", "sha256": "ebdddaef9436155839732d3ac9635551a46b90ed20b43e3ec5d96499d658a625"}, "downloads": -1, "filename": "airflow_declarative-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b184f5d2d317c99e0a72909cab994a9c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 19374, "upload_time": "2020-04-16T15:11:43", "upload_time_iso_8601": "2020-04-16T15:11:43.870003Z", "url": "https://files.pythonhosted.org/packages/6c/03/c41df4e3df2ebfdbbebb02294b3ce636b64361a6fd540682fe77b0725068/airflow_declarative-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b98a649b8c5628e82797f165ab85596", "sha256": "b9b3f3bb52c4e1f7620bccf89700c9a56c67f738b5b43ec59d4b2218e2ffb934"}, "downloads": -1, "filename": "airflow-declarative-1.1.tar.gz", "has_sig": false, "md5_digest": "2b98a649b8c5628e82797f165ab85596", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28924, "upload_time": "2020-04-16T15:11:41", "upload_time_iso_8601": "2020-04-16T15:11:41.663139Z", "url": "https://files.pythonhosted.org/packages/82/b2/cb077c51cf29a653f0f920c1292a1a7ae334b40c25b046f0fb64383e1ff3/airflow-declarative-1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:32 2020"}