{"info": {"author": "A. Daouzli", "author_email": "dadel@hadoly.fr", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Documentation"], "description": "pyment\n======\n\nCreate, update or convert docstrings in existing Python files, managing several styles.\n\n.. contents:: :local:\n\nDescription\n-----------\n\nThis Python (2.7+/3+, or 2.6 if installed _argparser_) program intends to help Python programmers to enhance inside code documentation using docstrings.\nIt is useful for code not well documented, or code without docstrings, or some not yet or partially documented code, or a mix of all of this :-)\nIt can be helpful also to harmonize or change a project docstring style format.\n\nIt will parse one or several python scripts and retrieve existing docstrings.\nThen, for all found functions/methods/classes, it will generate formatted docstrings with parameters, default values,...\n\nAt the end, patches are generated for each file. Then, man can apply the patches to the initial scripts.\nAn option allow to update the files directly without generating patches.\nIt is also possible to generate the python file with the new docstrings, or to retrieve only the docstrings...\n\nCurrently, the managed styles in input/output are javadoc, one variant of reST (re-Structured Text, used by Sphinx), numpydoc, google docstrings, groups (other grouped style).\n\nYou can also configure some settings via the command line or a configuration\nfile.\n\nTo get further information please refer to the `documentation <https://github.com/dadadel/pyment/blob/master/doc/sphinx/source/pyment.rst>`_.\n\nThe tool, at the time, offer to generate patches or get a list of the new docstrings (created or converted).\n\nYou can contact the developer *dadel* and speak about the project on **IRC** **Freenode**'s channel **#pyment**.\n\nStart quickly\n-------------\n- get and install:\n\n.. code-block:: sh\n\n        $ git install pyment\n        or\n        $ pip install git+https://github.com/dadadel/pyment.git\n\n- run from the command line:\n\n.. code-block:: sh\n\n        $ pyment  myfile.py    # will generate a patch\n        $ pyment -w myfile.py  # will overwrite the file\n\nor\n\n.. code-block:: sh\n\n        $ pyment  my/folder/\n\n- get help:\n\n.. code-block:: sh\n\n        $ pyment -h\n\n- run from a script:\n\n.. code-block:: python\n\n        import os\n        from pyment import PyComment\n\n        filename = 'test.py'\n\n        c = PyComment(filename)\n        c.proceed()\n        c.diff_to_file(os.path.basename(filename) + \".patch\")\n        for s in c.get_output_docs():\n            print(s)\n\nExample\n-------\n\nHere is a full example using Pyment to generate a patch and then apply the patch.\n\nLet's consider a file *test.py* with following content:\n\n.. code-block:: python\n\n        def func(param1=True, param2='default val'):\n            '''Description of func with docstring groups style.\n\n            Params:\n                param1 - descr of param1 that has True for default value.\n                param2 - descr of param2\n\n            Returns:\n                some value\n\n            Raises:\n                keyError: raises key exception\n                TypeError: raises type exception\n\n            '''\n            pass\n\n        class A:\n            def method(self, param1, param2=None):\n                pass\n\nNow let's use Pyment:\n\n.. code-block:: sh\n\n        $ pyment test.py\n\nUsing Pyment without any argument will autodetect the docstrings formats and generate a patch using the reStructured Text format.\nSo the previous command has generated the file *test.py.patch* with following content:\n\n.. code-block:: patch\n\n        # Patch generated by Pyment v0.2.0\n\n        --- a/test.py\n        +++ b/test.py\n        @@ -1,20 +1,22 @@\n         def func(param1=True, param2='default val'):\n        -    '''Description of func with docstring groups style.\n        +    \"\"\"Description of func with docstring groups style.\n\n        -    Params: \n        -        param1 - descr of param1 that has True for default value.\n        -        param2 - descr of param2\n        +    :param param1: descr of param1 that has True for default value\n        +    :param param2: descr of param2 (Default value = 'default val')\n        +    :returns: some value\n        +    :raises keyError: raises key exception\n        +    :raises TypeError: raises type exception\n\n        -    Returns:\n        -        some value\n        -\n        -    Raises:\n        -        keyError: raises key exception\n        -        TypeError: raises type exception\n        -\n        -    '''\n        +    \"\"\"\n             pass\n\n         class A:\n        +    \"\"\" \"\"\"\n             def method(self, param1, param2=None):\n        +        \"\"\"\n        +\n        +        :param param1: \n        +        :param param2:  (Default value = None)\n        +\n        +        \"\"\"\n                 pass\n\nLet's finally apply the patch with the following command:\n\n.. code-block:: sh\n\n        $ patch -p1 < test.py.patch\n\nNow the original *test.py* was updated and its content is now:\n\n.. code-block:: python\n\n        def func(param1=True, param2='default val'):\n            \"\"\"Description of func with docstring groups style.\n\n            :param param1: descr of param1 that has True for default value\n            :param param2: descr of param2 (Default value = 'default val')\n            :returns: some value\n            :raises keyError: raises key exception\n            :raises TypeError: raises type exception\n\n            \"\"\"\n            pass\n\n        class A:\n            \"\"\" \"\"\"\n            def method(self, param1, param2=None):\n                \"\"\"\n\n                :param param1: \n                :param param2:  (Default value = None)\n\n                \"\"\"\n                pass\n\nAlso refer to the files `example.py.patch <https://github.com/dadadel/pyment/blob/master/example.py.patch>`_ or `example_numpy.py.patch <https://github.com/dadadel/pyment/blob/master/example_numpy.py.patch>`_ to see some other results that can be obtained processing the file `example.py <https://github.com/dadadel/pyment/blob/master/example.py>`_ \n\n\nOffer a coffee or a beer\n------------------------\n\nIf you enjoyed this free software, and want to thank me, you can offer me some\nbitcoins for a coffee, a beer, or more, I would be happy :)\n\nHere's my address for bitcoins : 1Kz5bu4HuRtwbjzopN6xWSVsmtTDK6Kb89\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dadadel/pyment", "keywords": "pyment docstring numpydoc googledoc restructuredtext epydoc epytext javadoc development generate auto", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pyment", "package_url": "https://pypi.org/project/pyment/", "platform": "any", "project_url": "https://pypi.org/project/pyment/", "project_urls": {"Homepage": "https://github.com/dadadel/pyment"}, "release_url": "https://pypi.org/project/pyment/0.3.3/", "requires_dist": null, "requires_python": "", "summary": "Generate/convert automatically the docstrings from code signature", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            pyment<br>======<br><br>Create, update or convert docstrings in existing Python files, managing several styles.<br><br>.. contents:: :local:<br><br>Description<br>-----------<br><br>This Python (2.7+/3+, or 2.6 if installed _argparser_) program intends to help Python programmers to enhance inside code documentation using docstrings.<br>It is useful for code not well documented, or code without docstrings, or some not yet or partially documented code, or a mix of all of this :-)<br>It can be helpful also to harmonize or change a project docstring style format.<br><br>It will parse one or several python scripts and retrieve existing docstrings.<br>Then, for all found functions/methods/classes, it will generate formatted docstrings with parameters, default values,...<br><br>At the end, patches are generated for each file. Then, man can apply the patches to the initial scripts.<br>An option allow to update the files directly without generating patches.<br>It is also possible to generate the python file with the new docstrings, or to retrieve only the docstrings...<br><br>Currently, the managed styles in input/output are javadoc, one variant of reST (re-Structured Text, used by Sphinx), numpydoc, google docstrings, groups (other grouped style).<br><br>You can also configure some settings via the command line or a configuration<br>file.<br><br>To get further information please refer to the `documentation &lt;https://github.com/dadadel/pyment/blob/master/doc/sphinx/source/pyment.rst&gt;`_.<br><br>The tool, at the time, offer to generate patches or get a list of the new docstrings (created or converted).<br><br>You can contact the developer *dadel* and speak about the project on **IRC** **Freenode**'s channel **#pyment**.<br><br>Start quickly<br>-------------<br>- get and install:<br><br>.. code-block:: sh<br><br>        $ git install pyment<br>        or<br>        $ pip install git+https://github.com/dadadel/pyment.git<br><br>- run from the command line:<br><br>.. code-block:: sh<br><br>        $ pyment  myfile.py    # will generate a patch<br>        $ pyment -w myfile.py  # will overwrite the file<br><br>or<br><br>.. code-block:: sh<br><br>        $ pyment  my/folder/<br><br>- get help:<br><br>.. code-block:: sh<br><br>        $ pyment -h<br><br>- run from a script:<br><br>.. code-block:: python<br><br>        import os<br>        from pyment import PyComment<br><br>        filename = 'test.py'<br><br>        c = PyComment(filename)<br>        c.proceed()<br>        c.diff_to_file(os.path.basename(filename) + \".patch\")<br>        for s in c.get_output_docs():<br>            print(s)<br><br>Example<br>-------<br><br>Here is a full example using Pyment to generate a patch and then apply the patch.<br><br>Let's consider a file *test.py* with following content:<br><br>.. code-block:: python<br><br>        def func(param1=True, param2='default val'):<br>            '''Description of func with docstring groups style.<br><br>            Params:<br>                param1 - descr of param1 that has True for default value.<br>                param2 - descr of param2<br><br>            Returns:<br>                some value<br><br>            Raises:<br>                keyError: raises key exception<br>                TypeError: raises type exception<br><br>            '''<br>            pass<br><br>        class A:<br>            def method(self, param1, param2=None):<br>                pass<br><br>Now let's use Pyment:<br><br>.. code-block:: sh<br><br>        $ pyment test.py<br><br>Using Pyment without any argument will autodetect the docstrings formats and generate a patch using the reStructured Text format.<br>So the previous command has generated the file *test.py.patch* with following content:<br><br>.. code-block:: patch<br><br>        # Patch generated by Pyment v0.2.0<br><br>        --- a/test.py<br>        +++ b/test.py<br>        @@ -1,20 +1,22 @@<br>         def func(param1=True, param2='default val'):<br>        -    '''Description of func with docstring groups style.<br>        +    \"\"\"Description of func with docstring groups style.<br><br>        -    Params: <br>        -        param1 - descr of param1 that has True for default value.<br>        -        param2 - descr of param2<br>        +    :param param1: descr of param1 that has True for default value<br>        +    :param param2: descr of param2 (Default value = 'default val')<br>        +    :returns: some value<br>        +    :raises keyError: raises key exception<br>        +    :raises TypeError: raises type exception<br><br>        -    Returns:<br>        -        some value<br>        -<br>        -    Raises:<br>        -        keyError: raises key exception<br>        -        TypeError: raises type exception<br>        -<br>        -    '''<br>        +    \"\"\"<br>             pass<br><br>         class A:<br>        +    \"\"\" \"\"\"<br>             def method(self, param1, param2=None):<br>        +        \"\"\"<br>        +<br>        +        :param param1: <br>        +        :param param2:  (Default value = None)<br>        +<br>        +        \"\"\"<br>                 pass<br><br>Let's finally apply the patch with the following command:<br><br>.. code-block:: sh<br><br>        $ patch -p1 &lt; test.py.patch<br><br>Now the original *test.py* was updated and its content is now:<br><br>.. code-block:: python<br><br>        def func(param1=True, param2='default val'):<br>            \"\"\"Description of func with docstring groups style.<br><br>            :param param1: descr of param1 that has True for default value<br>            :param param2: descr of param2 (Default value = 'default val')<br>            :returns: some value<br>            :raises keyError: raises key exception<br>            :raises TypeError: raises type exception<br><br>            \"\"\"<br>            pass<br><br>        class A:<br>            \"\"\" \"\"\"<br>            def method(self, param1, param2=None):<br>                \"\"\"<br><br>                :param param1: <br>                :param param2:  (Default value = None)<br><br>                \"\"\"<br>                pass<br><br>Also refer to the files `example.py.patch &lt;https://github.com/dadadel/pyment/blob/master/example.py.patch&gt;`_ or `example_numpy.py.patch &lt;https://github.com/dadadel/pyment/blob/master/example_numpy.py.patch&gt;`_ to see some other results that can be obtained processing the file `example.py &lt;https://github.com/dadadel/pyment/blob/master/example.py&gt;`_ <br><br><br>Offer a coffee or a beer<br>------------------------<br><br>If you enjoyed this free software, and want to thank me, you can offer me some<br>bitcoins for a coffee, a beer, or more, I would be happy :)<br><br>Here's my address for bitcoins : 1Kz5bu4HuRtwbjzopN6xWSVsmtTDK6Kb89<br><br><br><br>\n          </div>"}, "last_serial": 4114324, "releases": {"0.3.3": [{"comment_text": "", "digests": {"md5": "4e4e92c112068fcaff6d07779b51d5a6", "sha256": "a0c6ec59d06d24aeec3eaecb22115d0dc95d09e14209b2df838381fdf47a78cc"}, "downloads": -1, "filename": "Pyment-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4e4e92c112068fcaff6d07779b51d5a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21924, "upload_time": "2018-07-29T19:20:51", "upload_time_iso_8601": "2018-07-29T19:20:51.082638Z", "url": "https://files.pythonhosted.org/packages/52/01/810e174c28a7dcf5f91c048faf69c84eafee60c9a844e4ce21671b2e99bb/Pyment-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08b6a412cb423b1dd8cec043bc71f3a1", "sha256": "951a4c52d6791ccec55bc739811169eed69917d3874f5fe722866623a697f39d"}, "downloads": -1, "filename": "Pyment-0.3.3.tar.gz", "has_sig": false, "md5_digest": "08b6a412cb423b1dd8cec043bc71f3a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21003, "upload_time": "2018-07-29T19:20:52", "upload_time_iso_8601": "2018-07-29T19:20:52.601222Z", "url": "https://files.pythonhosted.org/packages/dd/9e/c58a151c7020f6fdd48eea0085a9d1c91a57da19fa4e7bff0daf930c9900/Pyment-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e4e92c112068fcaff6d07779b51d5a6", "sha256": "a0c6ec59d06d24aeec3eaecb22115d0dc95d09e14209b2df838381fdf47a78cc"}, "downloads": -1, "filename": "Pyment-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4e4e92c112068fcaff6d07779b51d5a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21924, "upload_time": "2018-07-29T19:20:51", "upload_time_iso_8601": "2018-07-29T19:20:51.082638Z", "url": "https://files.pythonhosted.org/packages/52/01/810e174c28a7dcf5f91c048faf69c84eafee60c9a844e4ce21671b2e99bb/Pyment-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08b6a412cb423b1dd8cec043bc71f3a1", "sha256": "951a4c52d6791ccec55bc739811169eed69917d3874f5fe722866623a697f39d"}, "downloads": -1, "filename": "Pyment-0.3.3.tar.gz", "has_sig": false, "md5_digest": "08b6a412cb423b1dd8cec043bc71f3a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21003, "upload_time": "2018-07-29T19:20:52", "upload_time_iso_8601": "2018-07-29T19:20:52.601222Z", "url": "https://files.pythonhosted.org/packages/dd/9e/c58a151c7020f6fdd48eea0085a9d1c91a57da19fa4e7bff0daf930c9900/Pyment-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:14 2020"}