{"info": {"author": "xTudo", "author_email": "dload@11.to", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# dload - Download Library\n\nA python library to simplify your download tasks.\n\n\n### Requirements:\n+ python >= 3.6 \n\n### Dependencies:\n+ requests>=2.22.0\n\nInstall `dload` on your system : \n\n```\npip install dload\n```\n\nLoad `dload` into your code : \n\n```\nimport dload\n```\n\n## Usage Examples:\n\n#### Download and save a remote file:\n```\ndload.save('https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Albert_Einstein_Head.jpg/800px-Albert_Einstein_Head.jpg', '~/einstein.jpg')  \n```\n\n#### Download and save an FTP file:\n```\ndload.ftp('ftp://speedtest.tele2.net/5MB.zip', '~/5MB.zip') \n```\n\n#### Returns the remote file as a byte obj:\n```\ndload.bytes('https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Albert_Einstein_Head.jpg/800px-Albert_Einstein_Head.jpg')\n```\n\n#### Returns the remote file as a dict:\n```\ndload.json(\"https://support.oneskyapp.com/hc/en-us/article_attachments/202761627/example_1.json\")\n```\n\n#### Returns the server reply headers as a dict:\n```\ndload.headers(\"https://support.oneskyapp.com/hc/en-us/article_attachments/202761627/example_1.json\")\n```\n\n#### Returns the remote file as a string:\n```\ndload.text(\"https://www.w3.org/TR/PNG/iso_8859-1.txt\")\n```\n\n#### Multi threaded downloader from a python list\n```\nfile_list = [\"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-0.8-i386-pc-solaris2.8.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-0.8-i386-unknown-netbsdelf1.6.tar.bz2\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/1.0.6/linux-i686/da-DK/firefox-1.0.6.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/1.0.6/linux-i686/da-DK/firefox-1.0.6.installer.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-0.8-i686-pc-linux-gnu-ctl-svg.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-0.8-sparc-sun-solaris2.8-gtk2.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-os2-0.8.zip\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/FirefoxSetup-0.8.exe\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/Firefox-0.8.zip\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/firefox-source-0.8.tar.bz2\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/1.0.6/win32/cs-CZ/Firefox%20Setup%201.0.6.exe\"]`\n\nsave_multi(file_list, \"d:/test_dowmload/\", max_threads=10)\n```\n\n\n#### Multi threaded downloader from a text file\n```\nfile_list = \"d:/file_list.txt\"\nsave_multi(file_list, \"d:/test_download_text/\", max_threads=10)\n```\n\n\n#### Download Speed Test\n```\ndload.speed_test()\ndload.speed_test(10)\ndload.speed_test(50, \"ipv6\")\ndload.speed_test(1024, port=8080)\n\n[==============================] 61.34037 Mbps\n100MB = 17.10 seconds\n```\n\n#### Save and Extract a remote zip\n```\ndload.save_unzip(\"https://file-examples.com/wp-content/uploads/2017/02/zip_2MB.zip\")\n```\n\n#### Clone a git repo to local computer\n```\ndload.git_clone(\"https://github.com/x011/dload.git\")\n```\n\n### FUNCTIONS\n\n    bytes(url)\n        Returns the remote file as a byte obj\n        :param url: str - url to download\n        :return: bytes\n\n    down_speed(size=5, ipv='ipv4', port=80)\n        Measures the download speed\n        :param size: int -  (optional) 5, 10, 20, 50, 100, 200, 512, 1024 Mb\n        :param ipv: str - (optional) ipv4, ipv6\n        :param port: int - (optional) 80, 81, 8080\n        :return: boolean\n\n    ftp(ftp_url, local_path='', overwrite=False)\n        Download and save an FTP file\n        :param url: str - ftp://ftp.server.tld/path/to/file.ext or ftp://username:password@ftp.server.tld/path/to/file.ext\n        :param localpath: str - (optional) local path to save the file, i.e.: /home/myfile.ext or c:/myfile.ext\n        :param overwrite: bool - (optional) If True the local file will be overwritten, False will skip the download\n        :return: str - local path of the downloaded file\n\n    git_clone(git_url, clone_dir='')\n        Clones a git repo to local computer\n        :param git_url: str - git url, ex: https://github.com/x011/dload.git\n        :param clone_dir: str - (optional) local dir to clone the git, ex: /path/to/dload/ or c:/repos/dload/, defaults to repo name on script dir\n        :return: str - path to local repo dir or an empty tring\n\n    headers(url, redirect=True)\n        Returns the reply headers as a dict\n        :param url: str - url to retrieve the reply headers\n        :param redirect: boolean - (optional) should we follow redirects?\n        :return: dict\n\n    json(url)\n        Returns the remote file as a dict\n        :param url: str - url to retrieve the json\n        :return: dict\n\n    rand_fn()\n        provides a random filename when it's impossible to determine the filename, i.e.: http://site.tld/dir/\n        :return: str\n\n    save(url, path='', overwrite=False)\n        Download and save a remote file\n        :param url: str - file url to download\n        :param path: str - (optional) Full path to save the file, ex: c:/test.txt or /home/test.txt.\n        Defaults to script location and url filename\n        :param overwrite: bool - (optional)  If True the local file will be overwritten, False will skip the download\n        :return: str - The full path of the downloaded file or an empty string\n\n    save_multi(url_list, dir='', max_threads=1, tsleep=0.05)\n        Multi threaded file downloader\n        :param url_list: str or list - A python list or a path to a text file containing the urls to be downloaded\n        :param dir: str - (optional) Directory to save the files, will be created if it doesn't exist\n        :param max_threads: int - (optional)  Max number of parallel downloads\n        :param tsleep: int or float - (optional)  time to sleep in seconds when the max_threads value is reached, i.e: 0.05 or 1 is accepted\n        :return: boolean\n\n    save_unzip(zip_url, extract_path='', delete_after=False)\n        Save and Extract a remote zip\n        :param zip_url: str - the zip file url to download\n        :param extract_path: str - (optional) the path to extract the zip file, defaults to local dir\n        :param delete_after: bool - (optional) if the zip file should be deleted after, defaults to False\n        :return: str - the extract path or an empty string\n\n    text(url, encoding='')\n        Returns the remote file as a string\n        :param url: str - url to retrieve the text content\n        :param encoding: str - (optional) character encoding\n        :return: str\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/x011/dload", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dload", "package_url": "https://pypi.org/project/dload/", "platform": "", "project_url": "https://pypi.org/project/dload/", "project_urls": {"Homepage": "https://github.com/x011/dload"}, "release_url": "https://pypi.org/project/dload/0.6/", "requires_dist": ["requests (>=2.11.1)"], "requires_python": ">=3.6", "summary": "A multipurpose downloader for python >= 3.6", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dload - Download Library</h1>\n<p>A python library to simplify your download tasks.</p>\n<h3>Requirements:</h3>\n<ul>\n<li>python &gt;= 3.6</li>\n</ul>\n<h3>Dependencies:</h3>\n<ul>\n<li>requests&gt;=2.22.0</li>\n</ul>\n<p>Install <code>dload</code> on your system :</p>\n<pre><code>pip install dload\n</code></pre>\n<p>Load <code>dload</code> into your code :</p>\n<pre><code>import dload\n</code></pre>\n<h2>Usage Examples:</h2>\n<h4>Download and save a remote file:</h4>\n<pre><code>dload.save('https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Albert_Einstein_Head.jpg/800px-Albert_Einstein_Head.jpg', '~/einstein.jpg')  \n</code></pre>\n<h4>Download and save an FTP file:</h4>\n<pre><code>dload.ftp('ftp://speedtest.tele2.net/5MB.zip', '~/5MB.zip') \n</code></pre>\n<h4>Returns the remote file as a byte obj:</h4>\n<pre><code>dload.bytes('https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Albert_Einstein_Head.jpg/800px-Albert_Einstein_Head.jpg')\n</code></pre>\n<h4>Returns the remote file as a dict:</h4>\n<pre><code>dload.json(\"https://support.oneskyapp.com/hc/en-us/article_attachments/202761627/example_1.json\")\n</code></pre>\n<h4>Returns the server reply headers as a dict:</h4>\n<pre><code>dload.headers(\"https://support.oneskyapp.com/hc/en-us/article_attachments/202761627/example_1.json\")\n</code></pre>\n<h4>Returns the remote file as a string:</h4>\n<pre><code>dload.text(\"https://www.w3.org/TR/PNG/iso_8859-1.txt\")\n</code></pre>\n<h4>Multi threaded downloader from a python list</h4>\n<pre><code>file_list = [\"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-0.8-i386-pc-solaris2.8.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-0.8-i386-unknown-netbsdelf1.6.tar.bz2\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/1.0.6/linux-i686/da-DK/firefox-1.0.6.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/1.0.6/linux-i686/da-DK/firefox-1.0.6.installer.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-0.8-i686-pc-linux-gnu-ctl-svg.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-0.8-sparc-sun-solaris2.8-gtk2.tar.gz\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/contrib/firefox-os2-0.8.zip\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/FirefoxSetup-0.8.exe\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/Firefox-0.8.zip\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/0.8/firefox-source-0.8.tar.bz2\",\n             \"https://ftp.mozilla.org/pub/firefox/releases/1.0.6/win32/cs-CZ/Firefox%20Setup%201.0.6.exe\"]`\n\nsave_multi(file_list, \"d:/test_dowmload/\", max_threads=10)\n</code></pre>\n<h4>Multi threaded downloader from a text file</h4>\n<pre><code>file_list = \"d:/file_list.txt\"\nsave_multi(file_list, \"d:/test_download_text/\", max_threads=10)\n</code></pre>\n<h4>Download Speed Test</h4>\n<pre><code>dload.speed_test()\ndload.speed_test(10)\ndload.speed_test(50, \"ipv6\")\ndload.speed_test(1024, port=8080)\n\n[==============================] 61.34037 Mbps\n100MB = 17.10 seconds\n</code></pre>\n<h4>Save and Extract a remote zip</h4>\n<pre><code>dload.save_unzip(\"https://file-examples.com/wp-content/uploads/2017/02/zip_2MB.zip\")\n</code></pre>\n<h4>Clone a git repo to local computer</h4>\n<pre><code>dload.git_clone(\"https://github.com/x011/dload.git\")\n</code></pre>\n<h3>FUNCTIONS</h3>\n<pre><code>bytes(url)\n    Returns the remote file as a byte obj\n    :param url: str - url to download\n    :return: bytes\n\ndown_speed(size=5, ipv='ipv4', port=80)\n    Measures the download speed\n    :param size: int -  (optional) 5, 10, 20, 50, 100, 200, 512, 1024 Mb\n    :param ipv: str - (optional) ipv4, ipv6\n    :param port: int - (optional) 80, 81, 8080\n    :return: boolean\n\nftp(ftp_url, local_path='', overwrite=False)\n    Download and save an FTP file\n    :param url: str - ftp://ftp.server.tld/path/to/file.ext or ftp://username:password@ftp.server.tld/path/to/file.ext\n    :param localpath: str - (optional) local path to save the file, i.e.: /home/myfile.ext or c:/myfile.ext\n    :param overwrite: bool - (optional) If True the local file will be overwritten, False will skip the download\n    :return: str - local path of the downloaded file\n\ngit_clone(git_url, clone_dir='')\n    Clones a git repo to local computer\n    :param git_url: str - git url, ex: https://github.com/x011/dload.git\n    :param clone_dir: str - (optional) local dir to clone the git, ex: /path/to/dload/ or c:/repos/dload/, defaults to repo name on script dir\n    :return: str - path to local repo dir or an empty tring\n\nheaders(url, redirect=True)\n    Returns the reply headers as a dict\n    :param url: str - url to retrieve the reply headers\n    :param redirect: boolean - (optional) should we follow redirects?\n    :return: dict\n\njson(url)\n    Returns the remote file as a dict\n    :param url: str - url to retrieve the json\n    :return: dict\n\nrand_fn()\n    provides a random filename when it's impossible to determine the filename, i.e.: http://site.tld/dir/\n    :return: str\n\nsave(url, path='', overwrite=False)\n    Download and save a remote file\n    :param url: str - file url to download\n    :param path: str - (optional) Full path to save the file, ex: c:/test.txt or /home/test.txt.\n    Defaults to script location and url filename\n    :param overwrite: bool - (optional)  If True the local file will be overwritten, False will skip the download\n    :return: str - The full path of the downloaded file or an empty string\n\nsave_multi(url_list, dir='', max_threads=1, tsleep=0.05)\n    Multi threaded file downloader\n    :param url_list: str or list - A python list or a path to a text file containing the urls to be downloaded\n    :param dir: str - (optional) Directory to save the files, will be created if it doesn't exist\n    :param max_threads: int - (optional)  Max number of parallel downloads\n    :param tsleep: int or float - (optional)  time to sleep in seconds when the max_threads value is reached, i.e: 0.05 or 1 is accepted\n    :return: boolean\n\nsave_unzip(zip_url, extract_path='', delete_after=False)\n    Save and Extract a remote zip\n    :param zip_url: str - the zip file url to download\n    :param extract_path: str - (optional) the path to extract the zip file, defaults to local dir\n    :param delete_after: bool - (optional) if the zip file should be deleted after, defaults to False\n    :return: str - the extract path or an empty string\n\ntext(url, encoding='')\n    Returns the remote file as a string\n    :param url: str - url to retrieve the text content\n    :param encoding: str - (optional) character encoding\n    :return: str\n</code></pre>\n\n          </div>"}, "last_serial": 6726995, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "49391b49e32df0faef8f909fd69857d0", "sha256": "784592142f3eef6e4c362605d8658b238e27fac7734eba3c5f802efe85bcdfc9"}, "downloads": -1, "filename": "dload-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49391b49e32df0faef8f909fd69857d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6690, "upload_time": "2020-02-24T07:09:11", "upload_time_iso_8601": "2020-02-24T07:09:11.760057Z", "url": "https://files.pythonhosted.org/packages/6e/8f/e37edc60960399022802e97f8243be321740cb9031cb4e4c078d1a3ca4b5/dload-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "589fbd9115f5c5ef42398e74ebfe45c2", "sha256": "4b37b89147af72882b42bb5e46df9042d54397a9efd7b653bd6a716dca58b377"}, "downloads": -1, "filename": "dload-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "589fbd9115f5c5ef42398e74ebfe45c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7581, "upload_time": "2020-02-24T07:31:16", "upload_time_iso_8601": "2020-02-24T07:31:16.268838Z", "url": "https://files.pythonhosted.org/packages/e6/43/d2b4ee8ff5a8020962164b2ba85d5a650d8d194614d0637b8bde96d13553/dload-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "d03744914084af0c8a3fb7720276e3bd", "sha256": "1954c1e27c5370deab5f6f5a47d5e97b32e1b06a25dea90fdaa100ed420fe7f4"}, "downloads": -1, "filename": "dload-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d03744914084af0c8a3fb7720276e3bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7563, "upload_time": "2020-02-24T18:55:49", "upload_time_iso_8601": "2020-02-24T18:55:49.836535Z", "url": "https://files.pythonhosted.org/packages/51/be/ba35ed9c3d4cc958e6d4e09a200423a1b0b113d4476bffa3472210c3719c/dload-0.3-py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "d338cb6a6bb34e5343014171a7b87f93", "sha256": "b7b4216ae24254adcee77974e460522756bcd30641b95fe50ed287b5a0d0d80f"}, "downloads": -1, "filename": "dload-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d338cb6a6bb34e5343014171a7b87f93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7626, "upload_time": "2020-03-01T01:46:20", "upload_time_iso_8601": "2020-03-01T01:46:20.922717Z", "url": "https://files.pythonhosted.org/packages/73/d3/87bd8adecc49d47ba23d1e657338ea06f620dd8be0bb9a586939160fd2af/dload-0.4-py3-none-any.whl", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "f3358dd49e2da91717cf2efb66324369", "sha256": "4c4577998bc70f4728aa9887b94d90c1e201c90f6c5d3211e0f4d8ca80973ad2"}, "downloads": -1, "filename": "dload-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f3358dd49e2da91717cf2efb66324369", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8148, "upload_time": "2020-03-01T03:36:00", "upload_time_iso_8601": "2020-03-01T03:36:00.387139Z", "url": "https://files.pythonhosted.org/packages/90/17/d413bb5c76ca26dc7d4cfbd1ec5e65caa0e7583177df44020264da6642a0/dload-0.5-py3-none-any.whl", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "4f90a5b71a375de013207a090c2a5515", "sha256": "40113d7a77ad782b40ea2713f8fe17cbdfe49dbd63db6061eb80ca91c1000e9e"}, "downloads": -1, "filename": "dload-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4f90a5b71a375de013207a090c2a5515", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8141, "upload_time": "2020-03-01T03:44:06", "upload_time_iso_8601": "2020-03-01T03:44:06.405856Z", "url": "https://files.pythonhosted.org/packages/fc/30/41da7ccf08389e9e262dfef55d68acc5e066ab85bfdd26c9039fef57ead9/dload-0.6-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f90a5b71a375de013207a090c2a5515", "sha256": "40113d7a77ad782b40ea2713f8fe17cbdfe49dbd63db6061eb80ca91c1000e9e"}, "downloads": -1, "filename": "dload-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4f90a5b71a375de013207a090c2a5515", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8141, "upload_time": "2020-03-01T03:44:06", "upload_time_iso_8601": "2020-03-01T03:44:06.405856Z", "url": "https://files.pythonhosted.org/packages/fc/30/41da7ccf08389e9e262dfef55d68acc5e066ab85bfdd26c9039fef57ead9/dload-0.6-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:18 2020"}