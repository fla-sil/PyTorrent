{"info": {"author": "Richard Paul Hudson, msg systems ag", "author_email": "richard.hudson@msg.group", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Healthcare Industry", "Intended Audience :: Information Technology", "Intended Audience :: Legal Industry", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Natural Language :: German", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Text Processing :: Linguistic"], "description": "**Holmes** is a Python 3 library (tested with version 3.7.7) that supports a number of\nuse cases involving information extraction from English and German texts. In all use cases, the information extraction\nis based on analysing the semantic relationships expressed by the component parts of each sentence:\n\n- In the [chatbot](https://github.com/msg-systems/holmes-extractor/#getting-started) use case, the system is configured using one or more **search phrases**.\nHolmes then looks for structures whose meanings correspond to those of these search phrases within\na searched **document**, which in this case corresponds to an individual snippet of text or speech\nentered by the end user. Within a match, each word with its own meaning (i.e. that does not merely fulfil a grammatical function) in the search phrase\ncorresponds to one or more such words in the document. Both the fact that a search phrase was matched and any structured information the search phrase extracts can be used to drive the chatbot.\n\n- The [structural extraction](https://github.com/msg-systems/holmes-extractor/#structural-extraction) use case uses exactly the same\n[structural matching](https://github.com/msg-systems/holmes-extractor/#how-it-works-structural-matching) technology as the chatbot use\ncase, but searching takes place with respect to a pre-existing document or documents that are typically much\nlonger than the snippets analysed in the chatbot use case, and the aim to extract and store structured information. For example, a set of business articles could be searched to find all the places where one company is said to be planning to\ntake over a second company. The identities of the companies concerned could then be stored in a database.\n\n- The [topic matching](https://github.com/msg-systems/holmes-extractor/#topic-matching) use case aims to find passages in a document or documents whose meaning\nis close to that of another document, which takes on the role of the **query document**, or to that of a **query phrase** entered ad-hoc by the user. Holmes extracts a number of small **phraselets** from the query phrase or\nquery document, matches the documents being searched against each phraselet, and conflates the results to find the\nmost relevant passages within the documents. Because there is no strict requirement that every word with its own\nmeaning in the query document match a specific word or words in the searched documents, more matches are found\nthan in the structural extraction use case, but the matches do not contain structured information that can be\nused in subsequent processing. The topic matching use case is demonstrated by [a website allowing searches within\nthe Harry Potter corpus (for English) and around 350 traditional stories (for German)](http://holmes-demo.xt.msg.team/).\n\n- The [supervised document classification](https://github.com/msg-systems/holmes-extractor/#supervised-document-classification) use case uses training data to\nlearn a classifier that assigns one or more **classification labels** to new documents based on what they are about.\nIt classifies a new document by matching it against phraselets that were extracted from the training documents in the\nsame way that phraselets are extracted from the query document in the topic matching use case. The technique is\ninspired by bag-of-words-based classification algorithms that use n-grams, but aims to derive n-grams whose component\nwords are related semantically rather than that just happen to be neighbours in the surface representation of a language.\n\nIn all four use cases, the **individual words** are matched using a [number of strategies](https://github.com/msg-systems/holmes-extractor/#word-level-matching-strategies).\nTo work out whether two grammatical structures that contain individually matching words correspond logically and\nconstitute a match, Holmes transforms the syntactic parse information provided by the [spaCy](https://spacy.io/) library\ninto semantic structures that allow texts to be compared using predicate logic. As a user of Holmes, you do not need to\nunderstand the intricacies of how this works, although there are some\n[important tips](https://github.com/msg-systems/holmes-extractor/#writing-effective-search-phrases) around writing effective search phrases for the chatbot and\nstructural extraction use cases that you should try and take on board.\n\nHolmes aims to offer generalist solutions that can be used more or less out of the box with\nrelatively little tuning, tweaking or training and that are rapidly applicable to a wide range of use cases.\nAt its core lies a logical, programmed, rule-based system that describes how syntactic representations in each\nlanguage express semantic relationships. Although the supervised document classification use case does incorporate a\nneural network and although the spaCy library upon which Holmes builds has itself been pre-trained using machine\nlearning, the essentially rule-based nature of Holmes means that the chatbot, structural matching and topic matching use\ncases can be put to use out of the box without any training and that the supervised document classification use case\ntypically requires relatively little training data, which is a great advantage because pre-labelled training data is\nnot available for many real-world problems.\n\nFor more information, please see the [main documentation on Github](https://github.com/msg-systems/holmes-extractor).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/msg-systems/holmes-extractor", "keywords": "nlp,information-extraction,spacy,spacy-extension,python,machine-learning,ontology,semantics", "license": "gpl-3.0", "maintainer": "", "maintainer_email": "", "name": "holmes-extractor", "package_url": "https://pypi.org/project/holmes-extractor/", "platform": "", "project_url": "https://pypi.org/project/holmes-extractor/", "project_urls": {"Homepage": "https://github.com/msg-systems/holmes-extractor"}, "release_url": "https://pypi.org/project/holmes-extractor/2.2.1/", "requires_dist": null, "requires_python": "", "summary": "Information extraction from English and German texts based on predicate logic", "version": "2.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Holmes</strong> is a Python 3 library (tested with version 3.7.7) that supports a number of\nuse cases involving information extraction from English and German texts. In all use cases, the information extraction\nis based on analysing the semantic relationships expressed by the component parts of each sentence:</p>\n<ul>\n<li>\n<p>In the <a href=\"https://github.com/msg-systems/holmes-extractor/#getting-started\" rel=\"nofollow\">chatbot</a> use case, the system is configured using one or more <strong>search phrases</strong>.\nHolmes then looks for structures whose meanings correspond to those of these search phrases within\na searched <strong>document</strong>, which in this case corresponds to an individual snippet of text or speech\nentered by the end user. Within a match, each word with its own meaning (i.e. that does not merely fulfil a grammatical function) in the search phrase\ncorresponds to one or more such words in the document. Both the fact that a search phrase was matched and any structured information the search phrase extracts can be used to drive the chatbot.</p>\n</li>\n<li>\n<p>The <a href=\"https://github.com/msg-systems/holmes-extractor/#structural-extraction\" rel=\"nofollow\">structural extraction</a> use case uses exactly the same\n<a href=\"https://github.com/msg-systems/holmes-extractor/#how-it-works-structural-matching\" rel=\"nofollow\">structural matching</a> technology as the chatbot use\ncase, but searching takes place with respect to a pre-existing document or documents that are typically much\nlonger than the snippets analysed in the chatbot use case, and the aim to extract and store structured information. For example, a set of business articles could be searched to find all the places where one company is said to be planning to\ntake over a second company. The identities of the companies concerned could then be stored in a database.</p>\n</li>\n<li>\n<p>The <a href=\"https://github.com/msg-systems/holmes-extractor/#topic-matching\" rel=\"nofollow\">topic matching</a> use case aims to find passages in a document or documents whose meaning\nis close to that of another document, which takes on the role of the <strong>query document</strong>, or to that of a <strong>query phrase</strong> entered ad-hoc by the user. Holmes extracts a number of small <strong>phraselets</strong> from the query phrase or\nquery document, matches the documents being searched against each phraselet, and conflates the results to find the\nmost relevant passages within the documents. Because there is no strict requirement that every word with its own\nmeaning in the query document match a specific word or words in the searched documents, more matches are found\nthan in the structural extraction use case, but the matches do not contain structured information that can be\nused in subsequent processing. The topic matching use case is demonstrated by <a href=\"http://holmes-demo.xt.msg.team/\" rel=\"nofollow\">a website allowing searches within\nthe Harry Potter corpus (for English) and around 350 traditional stories (for German)</a>.</p>\n</li>\n<li>\n<p>The <a href=\"https://github.com/msg-systems/holmes-extractor/#supervised-document-classification\" rel=\"nofollow\">supervised document classification</a> use case uses training data to\nlearn a classifier that assigns one or more <strong>classification labels</strong> to new documents based on what they are about.\nIt classifies a new document by matching it against phraselets that were extracted from the training documents in the\nsame way that phraselets are extracted from the query document in the topic matching use case. The technique is\ninspired by bag-of-words-based classification algorithms that use n-grams, but aims to derive n-grams whose component\nwords are related semantically rather than that just happen to be neighbours in the surface representation of a language.</p>\n</li>\n</ul>\n<p>In all four use cases, the <strong>individual words</strong> are matched using a <a href=\"https://github.com/msg-systems/holmes-extractor/#word-level-matching-strategies\" rel=\"nofollow\">number of strategies</a>.\nTo work out whether two grammatical structures that contain individually matching words correspond logically and\nconstitute a match, Holmes transforms the syntactic parse information provided by the <a href=\"https://spacy.io/\" rel=\"nofollow\">spaCy</a> library\ninto semantic structures that allow texts to be compared using predicate logic. As a user of Holmes, you do not need to\nunderstand the intricacies of how this works, although there are some\n<a href=\"https://github.com/msg-systems/holmes-extractor/#writing-effective-search-phrases\" rel=\"nofollow\">important tips</a> around writing effective search phrases for the chatbot and\nstructural extraction use cases that you should try and take on board.</p>\n<p>Holmes aims to offer generalist solutions that can be used more or less out of the box with\nrelatively little tuning, tweaking or training and that are rapidly applicable to a wide range of use cases.\nAt its core lies a logical, programmed, rule-based system that describes how syntactic representations in each\nlanguage express semantic relationships. Although the supervised document classification use case does incorporate a\nneural network and although the spaCy library upon which Holmes builds has itself been pre-trained using machine\nlearning, the essentially rule-based nature of Holmes means that the chatbot, structural matching and topic matching use\ncases can be put to use out of the box without any training and that the supervised document classification use case\ntypically requires relatively little training data, which is a great advantage because pre-labelled training data is\nnot available for many real-world problems.</p>\n<p>For more information, please see the <a href=\"https://github.com/msg-systems/holmes-extractor\" rel=\"nofollow\">main documentation on Github</a>.</p>\n\n          </div>"}, "last_serial": 7161771, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "2e5373e2d1a2b07c40c2ff60167e9f6e", "sha256": "c8b2d938d6fc12652256d81bcc67acffeacaf7c3adf55c13776a0134c379c483"}, "downloads": -1, "filename": "holmes-extractor-2.0.tar.gz", "has_sig": false, "md5_digest": "2e5373e2d1a2b07c40c2ff60167e9f6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92914, "upload_time": "2019-05-06T09:21:31", "upload_time_iso_8601": "2019-05-06T09:21:31.329534Z", "url": "https://files.pythonhosted.org/packages/d1/73/719a3943e04c54eb3d62e6d1f121ce8cda0210860ae04d3757b95599b91b/holmes-extractor-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "4cc9daf0ca11e3f64355f65b9ddc3557", "sha256": "bec53160bfe3dc67d72051d24f768bc4db30d1e09dafa0997a36f66c1d1c9354"}, "downloads": -1, "filename": "holmes-extractor-2.0.1.tar.gz", "has_sig": false, "md5_digest": "4cc9daf0ca11e3f64355f65b9ddc3557", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92853, "upload_time": "2019-05-06T11:31:24", "upload_time_iso_8601": "2019-05-06T11:31:24.478787Z", "url": "https://files.pythonhosted.org/packages/9a/a3/9e675aeb424698292568157f3f8fe8cc032b3134b5fbdda3e2d109ec9167/holmes-extractor-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "4c45ceb0b5d8dd2605b5e1e49dcbe3e6", "sha256": "a2935ff1c92aad9f0f9abee4b62065e9868968ea9ba4588e2fb505f32c0f2308"}, "downloads": -1, "filename": "holmes-extractor-2.0.2.tar.gz", "has_sig": false, "md5_digest": "4c45ceb0b5d8dd2605b5e1e49dcbe3e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94633, "upload_time": "2019-05-07T19:08:51", "upload_time_iso_8601": "2019-05-07T19:08:51.331960Z", "url": "https://files.pythonhosted.org/packages/01/ce/88e0235d024d5340e147eb46c4b7e9499a7db5255b7fd21ab45ecc9a846c/holmes-extractor-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "e320a52ff06a0ab0bb51cd9760080b9a", "sha256": "936e858356000e193d9d947160f9a34591b91b9fecc3525110dadfbd4b1d3486"}, "downloads": -1, "filename": "holmes-extractor-2.0.3.tar.gz", "has_sig": false, "md5_digest": "e320a52ff06a0ab0bb51cd9760080b9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94638, "upload_time": "2019-05-07T19:12:21", "upload_time_iso_8601": "2019-05-07T19:12:21.742784Z", "url": "https://files.pythonhosted.org/packages/4c/e2/ee1e7993a145f074a40a12433eb4e52f4cfbe86481a71124c109981bc569/holmes-extractor-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "da22cdd5098990904bce6935eedf530e", "sha256": "f9ebca9a00ed87e3abad7b37e5f59d61114fddee0f2780780b06e64b819ac763"}, "downloads": -1, "filename": "holmes-extractor-2.0.4.tar.gz", "has_sig": false, "md5_digest": "da22cdd5098990904bce6935eedf530e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94715, "upload_time": "2019-05-11T06:53:26", "upload_time_iso_8601": "2019-05-11T06:53:26.206657Z", "url": "https://files.pythonhosted.org/packages/b9/81/73f01b0e1059bebbacb1ac3e953e141f83e711f71254ace6d259c29dc1d4/holmes-extractor-2.0.4.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "2bedbd0db6b33237898ca2a4786be7a7", "sha256": "0643aa132006ae5bac4827fbcec8aa4eef6e59ebe0975d940e0f3467e5db9814"}, "downloads": -1, "filename": "holmes_extractor-2.1.0-py3.7.egg", "has_sig": false, "md5_digest": "2bedbd0db6b33237898ca2a4786be7a7", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 131229, "upload_time": "2019-11-19T19:56:32", "upload_time_iso_8601": "2019-11-19T19:56:32.167175Z", "url": "https://files.pythonhosted.org/packages/94/5b/e2bb85fff81acdc650bf3127faef020fb01e32aa9a5e7b6a5dae34d446f5/holmes_extractor-2.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "62456e8ab624056f7ff03cb0b385569e", "sha256": "97568f114ed45e967d267c27a72d1cc3be4ae0fbdeb14b1606acf266cb71e938"}, "downloads": -1, "filename": "holmes-extractor-2.1.0.tar.gz", "has_sig": false, "md5_digest": "62456e8ab624056f7ff03cb0b385569e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89118, "upload_time": "2019-11-19T19:56:29", "upload_time_iso_8601": "2019-11-19T19:56:29.996622Z", "url": "https://files.pythonhosted.org/packages/96/c3/15fce9113f8ca061357c8baca793bab0ecbb3eff83f8d41ffa8e8cf0e5a7/holmes-extractor-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "e7f12e642daa0d0f8cea32e99db2cc04", "sha256": "8445a5a152507b1f314735b96a8eb2469ae3d971bbebda35d7c60690e7bb5641"}, "downloads": -1, "filename": "holmes-extractor-2.2.0.tar.gz", "has_sig": false, "md5_digest": "e7f12e642daa0d0f8cea32e99db2cc04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115134, "upload_time": "2020-04-14T16:39:53", "upload_time_iso_8601": "2020-04-14T16:39:53.508461Z", "url": "https://files.pythonhosted.org/packages/63/c6/af0fcc1e89f59bb132104d95311675d809a142a9ce3eb7fdba237da1b9c3/holmes-extractor-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "5beddb01044f6d41380c223374b5215c", "sha256": "6bca3e19c3daed93059c0f9c086c990c272566818524c217c13d0478a9d2cf81"}, "downloads": -1, "filename": "holmes-extractor-2.2.1.tar.gz", "has_sig": false, "md5_digest": "5beddb01044f6d41380c223374b5215c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115187, "upload_time": "2020-05-04T07:04:28", "upload_time_iso_8601": "2020-05-04T07:04:28.650806Z", "url": "https://files.pythonhosted.org/packages/47/88/c11815c9bfd5d069f51482a76a7ac0514c3492f0801e61fca4165533f500/holmes-extractor-2.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5beddb01044f6d41380c223374b5215c", "sha256": "6bca3e19c3daed93059c0f9c086c990c272566818524c217c13d0478a9d2cf81"}, "downloads": -1, "filename": "holmes-extractor-2.2.1.tar.gz", "has_sig": false, "md5_digest": "5beddb01044f6d41380c223374b5215c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115187, "upload_time": "2020-05-04T07:04:28", "upload_time_iso_8601": "2020-05-04T07:04:28.650806Z", "url": "https://files.pythonhosted.org/packages/47/88/c11815c9bfd5d069f51482a76a7ac0514c3492f0801e61fca4165533f500/holmes-extractor-2.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:49 2020"}