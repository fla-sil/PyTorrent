{"info": {"author": "Tim Golden", "author_email": "mail@timgolden.me.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows :: Windows NT/2000", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "======\nwinsys\n======\n\nEnter WinSys: the Python Windows Administrator's Toolkit. A collection\nof modules with a consistent approach, wrapping the Windows API\ncalls already exposed by pywin32, adding some with ctypes, and giving them\nall a pythonic feel. There's nothing here you couldn't do yourself with\n10 minutes and a copy of the pywin32 and SDK docs. But it's all here already,\nand with a more Pythonish feel about it.\n\nDocs available at: http://winsys.readthedocs.org/en/latest/index.html\n\nDesign Principles\n-----------------\n\nThe following principles have directed the design of the modules\nand packages wherever possible:\n\n* Make ad-hoc use possible and easy (and even attractive)\n* Provide sensible defaults for the common cases, always allowing for more complex scenarios\n* Put all constants into one place, grouping them according to their API usage\n* Use the pywin32 functionality where available, supplementing it with ctypes where needed\n* Assume a recent version of Python (tested on 2.6, 2.7, 3.2, 3.3)\n* Make good use of context managers (with-statements)\n* Have each object able to dump its contents and that of its children cleanly\n* Maintain an object approach, but provide convenient module-level functions\n* Have useful factory functions for classes, robustly accepting string or object parameters\n\nCommon Features\n---------------\n\nMost of the objects in winsys subclass the `core._WinSysObject` class which\noffers sensible defaults and defines common functionality such as a dump function.\nIn addition, the following features are common to many of the modules:\n\nPythonic Naming\n~~~~~~~~~~~~~~~\n\nThis is mildly contentious, but the same naming convention has been used\nthroughout, following the ``lowercase_with_underscores`` convention widely\nadopted in the Python community. The most widespread exception to this is\nin the `constants` module, where Windows constants retain their\n``UPPERCASE_WITH_UNDERSCORES`` names.\n\nModule-level Functions\n~~~~~~~~~~~~~~~~~~~~~~\n\nWhile a lot of use has been made of Python classes to wrap the function-driven\nWindows API, a lot of the functionality has been exposed as module-level\nconvenience functions. So, for example, in the `fs` module, the `fs.File`\nclass offers a `fs.File.copy` method, but the same functionality is exposed\nat the module level as `fs.copy`. That way, you don't have to instantiate\none or more objects simply for the purpose of a single operation.\n\nFactory Functions\n~~~~~~~~~~~~~~~~~\n\nMost of the classes have a corresponding factory function (usually with\nthe same name in lower case) which tries to be more accepting in what\nits parameters are and to convert them to what's needed by the class's\nown ``__init__`` method. So, for example, the `Principal` class whose\ninitialiser expects a PySID structure has a corresponding `principal`\nfunction which will take a Sid or a user or group name or None or an existing\n`Principal` object.\n\nDump\n~~~~\n\nEach object derived from `core._WinSysObject` has a dump method which\nis intended to display its internal structures, possibly recursively where\nsome of the structures are themselves WinSys objects. This is intended more\nfor ad-hoc use in the interpreter where it's convenient to see, eg, the\nsecurity structure which has been loaded from a file.\n\nIterators & Generators\n~~~~~~~~~~~~~~~~~~~~~~\n\nWhere possible and meaningful, lazy iterators have been used, often\nimplemented by generators. This started in the `fs` module where\nthousands of files were being queried for information, but the approach\nhas generally been adopted across the package.\n\nContext Managers\n~~~~~~~~~~~~~~~~\n\nWhere it makes sense, context managers have been used, either by means\nof the contextlib contextmanager decorator or by defining an object as\nits own context manager by means of ``__enter__`` and ``__exit__`` methods.\nExamples of context-managed objects include the `ipc.Mailslot` and\n`security.Security` objects. Examples of decorated functions include\nthe `security.change_privileges` and `security.impersonate` functions.\n\nToDo\n----\n\nObviously, there's loads to do. The Windows API is vast; even the amount of\nit exposed by pywin32 far exceeds my immediate needs and the time at my\ndisposal. The implementation of this package has been driven largely by the\nvery specific needs of our Windows sysadmins in their day-to-day work. My\nintention is to carry on wrapping Windows functionality in a similar way,\nbut if anyone has particular needs, or can provide functionality to add in,\nlet's hear about it.\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://winsys.readthedocs.io/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "winsys", "package_url": "https://pypi.org/project/winsys/", "platform": "win32", "project_url": "https://pypi.org/project/winsys/", "project_urls": {"Homepage": "https://winsys.readthedocs.io/"}, "release_url": "https://pypi.org/project/winsys/1.2/", "requires_dist": ["pywin32", "wheel ; extra == 'all'", "pytest ; extra == 'all'", "twine ; extra == 'all'", "sphinx ; extra == 'all'", "pytest ; extra == 'dev'", "sphinx ; extra == 'dev'", "wheel ; extra == 'dev'", "twine ; extra == 'dev'", "sphinx ; extra == 'docs'", "wheel ; extra == 'package'", "twine ; extra == 'package'", "pytest ; extra == 'tests'"], "requires_python": "", "summary": "WinSys: the Python Windows Administrator's Toolkit", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Enter WinSys: the Python Windows Administrator\u2019s Toolkit. A collection\nof modules with a consistent approach, wrapping the Windows API\ncalls already exposed by pywin32, adding some with ctypes, and giving them\nall a pythonic feel. There\u2019s nothing here you couldn\u2019t do yourself with\n10 minutes and a copy of the pywin32 and SDK docs. But it\u2019s all here already,\nand with a more Pythonish feel about it.</p>\n<p>Docs available at: <a href=\"http://winsys.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">http://winsys.readthedocs.org/en/latest/index.html</a></p>\n<div id=\"design-principles\">\n<h2>Design Principles</h2>\n<p>The following principles have directed the design of the modules\nand packages wherever possible:</p>\n<ul>\n<li>Make ad-hoc use possible and easy (and even attractive)</li>\n<li>Provide sensible defaults for the common cases, always allowing for more complex scenarios</li>\n<li>Put all constants into one place, grouping them according to their API usage</li>\n<li>Use the pywin32 functionality where available, supplementing it with ctypes where needed</li>\n<li>Assume a recent version of Python (tested on 2.6, 2.7, 3.2, 3.3)</li>\n<li>Make good use of context managers (with-statements)</li>\n<li>Have each object able to dump its contents and that of its children cleanly</li>\n<li>Maintain an object approach, but provide convenient module-level functions</li>\n<li>Have useful factory functions for classes, robustly accepting string or object parameters</li>\n</ul>\n</div>\n<div id=\"common-features\">\n<h2>Common Features</h2>\n<p>Most of the objects in winsys subclass the <cite>core._WinSysObject</cite> class which\noffers sensible defaults and defines common functionality such as a dump function.\nIn addition, the following features are common to many of the modules:</p>\n<div id=\"pythonic-naming\">\n<h3>Pythonic Naming</h3>\n<p>This is mildly contentious, but the same naming convention has been used\nthroughout, following the <tt>lowercase_with_underscores</tt> convention widely\nadopted in the Python community. The most widespread exception to this is\nin the <cite>constants</cite> module, where Windows constants retain their\n<tt>UPPERCASE_WITH_UNDERSCORES</tt> names.</p>\n</div>\n<div id=\"module-level-functions\">\n<h3>Module-level Functions</h3>\n<p>While a lot of use has been made of Python classes to wrap the function-driven\nWindows API, a lot of the functionality has been exposed as module-level\nconvenience functions. So, for example, in the <cite>fs</cite> module, the <cite>fs.File</cite>\nclass offers a <cite>fs.File.copy</cite> method, but the same functionality is exposed\nat the module level as <cite>fs.copy</cite>. That way, you don\u2019t have to instantiate\none or more objects simply for the purpose of a single operation.</p>\n</div>\n<div id=\"factory-functions\">\n<h3>Factory Functions</h3>\n<p>Most of the classes have a corresponding factory function (usually with\nthe same name in lower case) which tries to be more accepting in what\nits parameters are and to convert them to what\u2019s needed by the class\u2019s\nown <tt>__init__</tt> method. So, for example, the <cite>Principal</cite> class whose\ninitialiser expects a PySID structure has a corresponding <cite>principal</cite>\nfunction which will take a Sid or a user or group name or None or an existing\n<cite>Principal</cite> object.</p>\n</div>\n<div id=\"dump\">\n<h3>Dump</h3>\n<p>Each object derived from <cite>core._WinSysObject</cite> has a dump method which\nis intended to display its internal structures, possibly recursively where\nsome of the structures are themselves WinSys objects. This is intended more\nfor ad-hoc use in the interpreter where it\u2019s convenient to see, eg, the\nsecurity structure which has been loaded from a file.</p>\n</div>\n<div id=\"iterators-generators\">\n<h3>Iterators &amp; Generators</h3>\n<p>Where possible and meaningful, lazy iterators have been used, often\nimplemented by generators. This started in the <cite>fs</cite> module where\nthousands of files were being queried for information, but the approach\nhas generally been adopted across the package.</p>\n</div>\n<div id=\"context-managers\">\n<h3>Context Managers</h3>\n<p>Where it makes sense, context managers have been used, either by means\nof the contextlib contextmanager decorator or by defining an object as\nits own context manager by means of <tt>__enter__</tt> and <tt>__exit__</tt> methods.\nExamples of context-managed objects include the <cite>ipc.Mailslot</cite> and\n<cite>security.Security</cite> objects. Examples of decorated functions include\nthe <cite>security.change_privileges</cite> and <cite>security.impersonate</cite> functions.</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2>ToDo</h2>\n<p>Obviously, there\u2019s loads to do. The Windows API is vast; even the amount of\nit exposed by pywin32 far exceeds my immediate needs and the time at my\ndisposal. The implementation of this package has been driven largely by the\nvery specific needs of our Windows sysadmins in their day-to-day work. My\nintention is to carry on wrapping Windows functionality in a similar way,\nbut if anyone has particular needs, or can provide functionality to add in,\nlet\u2019s hear about it.</p>\n</div>\n\n          </div>"}, "last_serial": 7103982, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "4995092381362351faa035ee3c059127", "sha256": "210694e5eb33a765021b0623ff5f4623d0a733450eadc02ee45f12e9ad90b392"}, "downloads": -1, "filename": "winsys-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4995092381362351faa035ee3c059127", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 117000, "upload_time": "2020-04-26T09:59:23", "upload_time_iso_8601": "2020-04-26T09:59:23.333959Z", "url": "https://files.pythonhosted.org/packages/36/12/7a863d4d472ff18914fca2bf41fa7ce6dc3a009f92458ea5b7a2e03a11df/winsys-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a2534b349dd9ecf1915ac5e54bd8103", "sha256": "889784331ad424a67d9d2acf4443f44272f3e274c083fe93c7c588693d995e5e"}, "downloads": -1, "filename": "winsys-1.2.tar.gz", "has_sig": false, "md5_digest": "1a2534b349dd9ecf1915ac5e54bd8103", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103452, "upload_time": "2020-04-26T09:59:26", "upload_time_iso_8601": "2020-04-26T09:59:26.497958Z", "url": "https://files.pythonhosted.org/packages/c5/c9/c94a133070fe85be4b9ee066506bee3fa96a955dac15b47185ca14848f9a/winsys-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4995092381362351faa035ee3c059127", "sha256": "210694e5eb33a765021b0623ff5f4623d0a733450eadc02ee45f12e9ad90b392"}, "downloads": -1, "filename": "winsys-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4995092381362351faa035ee3c059127", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 117000, "upload_time": "2020-04-26T09:59:23", "upload_time_iso_8601": "2020-04-26T09:59:23.333959Z", "url": "https://files.pythonhosted.org/packages/36/12/7a863d4d472ff18914fca2bf41fa7ce6dc3a009f92458ea5b7a2e03a11df/winsys-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a2534b349dd9ecf1915ac5e54bd8103", "sha256": "889784331ad424a67d9d2acf4443f44272f3e274c083fe93c7c588693d995e5e"}, "downloads": -1, "filename": "winsys-1.2.tar.gz", "has_sig": false, "md5_digest": "1a2534b349dd9ecf1915ac5e54bd8103", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103452, "upload_time": "2020-04-26T09:59:26", "upload_time_iso_8601": "2020-04-26T09:59:26.497958Z", "url": "https://files.pythonhosted.org/packages/c5/c9/c94a133070fe85be4b9ee066506bee3fa96a955dac15b47185ca14848f9a/winsys-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:51 2020"}