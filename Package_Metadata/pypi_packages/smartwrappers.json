{"info": {"author": "Cirill Usatchoff (Kyrylo Usachov)", "author_email": "usatchoff@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# SmartWrappers\nA Python 3 library to manipulate objects with shared mutable wrappers.\n\nInstalling\n----------\n\n**Python 3.6.8 or higher is required**\n\nTo install the library, you can just run the following command:\n\n```shell script\n# Linux/macOS\npython3 -m pip install -U smartwrappers\n\n# Windows\npy -3 -m pip install -U smartwrappers\n```\n\nCases to use\n--------------\n\n```python\n# We cannot change immutable objects.\n# Trying to change them we just create other objects.\n\ndef plus_five(x):\n    x += 5  # Creating another object here.\n\nx = 1\nplus_five(x)\nprint(x)  # >>> 1\n\n# Standard solution: rewrite our code in a way our function\n# calculates a new value and then we just reassign it to variables\n# whose values we need to change.\n\ndef get_plus_five(x):\n    return x + 5\n\nx = 1\nx = get_plus_five(x)\nprint(x)  # >>> 6\n```\n\nWhat if we have many objects of the same value and want them to have common state?\n\n```python\na = 1\nb = a\nc = b\n# ...\n\na = get_plus_five(a)\n# What about b, c and other links\n# at different places of our project?\n```\n\nUsage\n--------------\nWe can use smart wrappers for that purpose:\n\n```python\nfrom smartwrappers import wrap\n\na = wrap(1)  # or explicitly a = SmartWrapper(1)\nb = a\nc = b\n\nprint(a())  # >>> 1\nprint(b())  # >>> 1\nprint(c())  # >>> 1\n\na(5)\nprint(a())  # >>> 5\nprint(b())  # >>> 5\nprint(c())  # >>> 5\n\ndef plus_five(x):\n    x(x() + 5)\n\nplus_five(a)\nprint(a())  # >>> 10\nprint(b())  # >>> 10\nprint(c())  # >>> 10\n```\n\nMatrices\n--------------\nWe can use smart wrappers for wrapping lists:\n\n```python\nfrom smartwrappers import wrap_list\n\na = wrap_list([1, 2, 3])\nb = [a[0], a[1], a[2]]\nprint(a)  # >>> [1, 2, 3]\nprint(b)  # >>> [1, 2, 3]\n\na[1] = 'a'\nprint(a)  # >>> [1, 'a', 3]\nprint(b)  # >>> [1, 'a', 3] => wrappers behave like references to mutable content.\n```\n\nWe can wrap lists with any levels of dimensions:\n\n```python\na = wrap_list([[1, 2], [3, 4]], dimensions=2)\nb = [[a[0][0], a[1][0]], [a[0][1], a[1][1]]]  # Transposed matrix.\n\n#  a is:\n#        1 2\n#        3 4\n#  b is transposed matrix a:\n#        1 3\n#        2 4\n\na[0][1](0)\n\n#  a is:\n#        1 0\n#        3 4\n#  b keeps changes:\n#        1 3\n#        0 4\n```\n\nIf we don't want to put inside our wrapper values of different types we can use StrictSmartWrapper:\n\n```python\nfrom smartwrappers import wrap_strictly\n\na = wrap_strictly('hello', str)\na('world')  # OK.\na(5)  # Error.\nb = wrap_strictly('hello', int)  # Error.\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mavedev/SmartWrappers", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "smartwrappers", "package_url": "https://pypi.org/project/smartwrappers/", "platform": "", "project_url": "https://pypi.org/project/smartwrappers/", "project_urls": {"Homepage": "https://github.com/mavedev/SmartWrappers"}, "release_url": "https://pypi.org/project/smartwrappers/0.0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A Python 3 library to manipulate objects with shared mutable wrappers", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SmartWrappers</h1>\n<p>A Python 3 library to manipulate objects with shared mutable wrappers.</p>\n<h2>Installing</h2>\n<p><strong>Python 3.6.8 or higher is required</strong></p>\n<p>To install the library, you can just run the following command:</p>\n<pre><span class=\"c1\"># Linux/macOS</span>\npython3 -m pip install -U smartwrappers\n\n<span class=\"c1\"># Windows</span>\npy -3 -m pip install -U smartwrappers\n</pre>\n<h2>Cases to use</h2>\n<pre><span class=\"c1\"># We cannot change immutable objects.</span>\n<span class=\"c1\"># Trying to change them we just create other objects.</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">plus_five</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">+=</span> <span class=\"mi\">5</span>  <span class=\"c1\"># Creating another object here.</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">plus_five</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt;&gt;&gt; 1</span>\n\n<span class=\"c1\"># Standard solution: rewrite our code in a way our function</span>\n<span class=\"c1\"># calculates a new value and then we just reassign it to variables</span>\n<span class=\"c1\"># whose values we need to change.</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_plus_five</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">get_plus_five</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt;&gt;&gt; 6</span>\n</pre>\n<p>What if we have many objects of the same value and want them to have common state?</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">get_plus_five</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"c1\"># What about b, c and other links</span>\n<span class=\"c1\"># at different places of our project?</span>\n</pre>\n<h2>Usage</h2>\n<p>We can use smart wrappers for that purpose:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smartwrappers</span> <span class=\"kn\">import</span> <span class=\"n\">wrap</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># or explicitly a = SmartWrapper(1)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 1</span>\n\n<span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 5</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 5</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 5</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">plus_five</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">plus_five</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 10</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 10</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">())</span>  <span class=\"c1\"># &gt;&gt;&gt; 10</span>\n</pre>\n<h2>Matrices</h2>\n<p>We can use smart wrappers for wrapping lists:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smartwrappers</span> <span class=\"kn\">import</span> <span class=\"n\">wrap_list</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">wrap_list</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt;&gt;&gt; [1, 2, 3]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt;&gt;&gt; [1, 2, 3]</span>\n\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'a'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt;&gt;&gt; [1, 'a', 3]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt;&gt;&gt; [1, 'a', 3] =&gt; wrappers behave like references to mutable content.</span>\n</pre>\n<p>We can wrap lists with any levels of dimensions:</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">wrap_list</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]]]</span>  <span class=\"c1\"># Transposed matrix.</span>\n\n<span class=\"c1\">#  a is:</span>\n<span class=\"c1\">#        1 2</span>\n<span class=\"c1\">#        3 4</span>\n<span class=\"c1\">#  b is transposed matrix a:</span>\n<span class=\"c1\">#        1 3</span>\n<span class=\"c1\">#        2 4</span>\n\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#  a is:</span>\n<span class=\"c1\">#        1 0</span>\n<span class=\"c1\">#        3 4</span>\n<span class=\"c1\">#  b keeps changes:</span>\n<span class=\"c1\">#        1 3</span>\n<span class=\"c1\">#        0 4</span>\n</pre>\n<p>If we don't want to put inside our wrapper values of different types we can use StrictSmartWrapper:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smartwrappers</span> <span class=\"kn\">import</span> <span class=\"n\">wrap_strictly</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">wrap_strictly</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s1\">'world'</span><span class=\"p\">)</span>  <span class=\"c1\"># OK.</span>\n<span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># Error.</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">wrap_strictly</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>  <span class=\"c1\"># Error.</span>\n</pre>\n\n          </div>"}, "last_serial": 6393090, "releases": {"0.0.5": [{"comment_text": "", "digests": {"md5": "90e13b60be0ac343ebc6fd894545a34b", "sha256": "02e5f3f005a0e922d603a7d22ef6e10ccf86f671c2379170666fb54651d22923"}, "downloads": -1, "filename": "smartwrappers-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "90e13b60be0ac343ebc6fd894545a34b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5082, "upload_time": "2020-01-03T22:58:39", "upload_time_iso_8601": "2020-01-03T22:58:39.941646Z", "url": "https://files.pythonhosted.org/packages/07/84/7f7f7acd3c082e10a4ee4b7e8dda7297716e31886618b53cfb69e8aab40f/smartwrappers-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "547fa3da21b8431db8edd55cc8451bb5", "sha256": "3645813032c0d485a82f569d860b301d2e443938187223214b43203f5368a6fa"}, "downloads": -1, "filename": "smartwrappers-0.0.5.tar.gz", "has_sig": false, "md5_digest": "547fa3da21b8431db8edd55cc8451bb5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3947, "upload_time": "2020-01-03T22:58:41", "upload_time_iso_8601": "2020-01-03T22:58:41.578150Z", "url": "https://files.pythonhosted.org/packages/e1/13/c72538073637e9ec9ffde3e2454ac401a6fee462503bf9ac24dae67e131f/smartwrappers-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90e13b60be0ac343ebc6fd894545a34b", "sha256": "02e5f3f005a0e922d603a7d22ef6e10ccf86f671c2379170666fb54651d22923"}, "downloads": -1, "filename": "smartwrappers-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "90e13b60be0ac343ebc6fd894545a34b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5082, "upload_time": "2020-01-03T22:58:39", "upload_time_iso_8601": "2020-01-03T22:58:39.941646Z", "url": "https://files.pythonhosted.org/packages/07/84/7f7f7acd3c082e10a4ee4b7e8dda7297716e31886618b53cfb69e8aab40f/smartwrappers-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "547fa3da21b8431db8edd55cc8451bb5", "sha256": "3645813032c0d485a82f569d860b301d2e443938187223214b43203f5368a6fa"}, "downloads": -1, "filename": "smartwrappers-0.0.5.tar.gz", "has_sig": false, "md5_digest": "547fa3da21b8431db8edd55cc8451bb5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3947, "upload_time": "2020-01-03T22:58:41", "upload_time_iso_8601": "2020-01-03T22:58:41.578150Z", "url": "https://files.pythonhosted.org/packages/e1/13/c72538073637e9ec9ffde3e2454ac401a6fee462503bf9ac24dae67e131f/smartwrappers-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:59 2020"}