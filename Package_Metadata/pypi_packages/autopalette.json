{"info": {"author": "Harshad Sharma", "author_email": "harshad@sharma.io", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: BSD :: FreeBSD", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development", "Topic :: Software Development :: User Interfaces", "Topic :: Terminals", "Topic :: Utilities"], "description": "autopalette\n===========\n\nTerminal palettes and themes, without tears.\n\n::\n\n   pip install autopalette\n\n**Status: Alpha; being developed.**\n\nDo you write python scripts that ``print()`` text on the command-line\nterminal? Do you feel the interface could convey a bit more meaning, but\nthe effort needed to get it right has kept you away from using ANSI\ncolors? These things should be easy, right?\n\nHere\u2019s a regular Python program that prints a word:\n\n.. code:: python\n\n   print(\"Tring!\")\n\n.. figure:: https://user-images.githubusercontent.com/23116/40859649-0da89ab0-65d2-11e8-8026-19ba6a2ad003.png\n   :alt: 01-regular-print\n\n   01-regular-print\n\nHere is what it looks like with autopalette, using a shortcut called\n``AutoFormat`` or in short: ``af``.\n\n.. code:: python\n\n   from autopalette import af\n\n   print(af(\"Tring!\"))\n\n.. figure:: https://user-images.githubusercontent.com/23116/40859706-3b61f3c0-65d2-11e8-996b-da4e218e192c.png\n   :alt: 02-autoformat-wrapped-print\n\n   02-autoformat-wrapped-print\n\nWe added one line to import, and four characters around the string.\n\nAnd it does nothing - autopalette is non-intrusive that way. You can\nleave your ``af``-wrapped strings around and they will not run\nunnecessary code until you ask for more.\n\nWhat\u2019s more?\n\n.. code:: python\n\n   from autopalette import af\n\n   print(af(\"Hello, world!\").id)\n   print(af(\"Hello, world!\").id256)\n\n.. figure:: https://user-images.githubusercontent.com/23116/40859765-63bec9b0-65d2-11e8-886c-82011ea96f8b.png\n   :alt: 03-id-deterministic-color\n\n   03-id-deterministic-color\n\nIf your terminal / emulator reports that it supports color, you should\nsee the second line formatted in fuschia/ magenta. Try changing the text\nand observe that the color changes when the text changes, but it stays\nfixed for the same text. Across function calls, across program runs,\nacross machines, across time itself! Okay maybe that was too dramatic,\nbut it is kind of true because, mathematics.\n\nAutopalette\u2019s ``id`` feature hashes the supplied text and generates a\ncolor unique to the text within the range of colors reported by the\nterminal. ``id256`` generates a color within the ANSI 256 palette.\n``id256`` is not portable, but feel free to use it for your personal\nscripts where color limits are known.\n\nWhy is this useful?\n\nIt helps to identify unique names that your program may output, such as:\n\n-  hostnames, when working with remote machines.\n-  usernames, for logs of multi-user environments.\n-  you know better what matters to your program\u2019s output :)\n\nSometimes you want a little more\u2026\n\n.. code:: python\n\n   from autopalette import af\n\n   print(af(\"Hello again!\").h1)\n\n.. figure:: https://user-images.githubusercontent.com/23116/40859801-858c3ef6-65d2-11e8-90d7-69a80fc57c57.png\n   :alt: 04-header-one\n\n   04-header-one\n\nAnd we have a nicely decorated header, just like that. You can use one\nof the several pre-defined styles, or read further below how you can\ndesign your own.\n\nHere are the various styles built into autopalette.\n\n-  ``p``: plain-text, or paragraph - as you like to read it.\n-  ``light``: where color range allows it, lighter text.\n-  ``dark``: darker text if terminal supports enough colors within\n   palette.\n-  ``h1``: highlighted text style 1, or header-1.\n-  ``h2``:\n-  ``h3``\n-  ``h4``\n-  ``li``: list element.\n-  ``err``: an error\n-  ``warn``: a warning\n-  ``info``: a warning\n-  ``ok``: a warning\n-  ``b``: bold.\n-  ``i``: italic.\n-  ``u``: underline.\n-  ``r``: reversed colors.\n-  ``raw``: useful to debug, displays the ANSI code instead of applying\n   it.\n\nLet us try superimposing two styles.\n\n.. code:: python\n\n   from autopalette import af\n\n   print(af(\"Hey! We've met before!?\").info.b)\n\n.. figure:: https://user-images.githubusercontent.com/23116/40859850-abe90afc-65d2-11e8-905d-d8a875d0f021.png\n   :alt: 05-superimpose-styles\n\n   05-superimpose-styles\n\nYou get the idea, tack the names of styles you want at the end-bracket\nof the call to ``af``.\n\nIf you are wondering, \u201cWait, what\u2019s with that weird syntax?\u201d, in\nPython\u2019s spirit of quick protoyping, autopalette encourages\nexperimenting with minimal mental and physical effort to tweak knobs.\nYour program\u2019s actual task matters more, but you care enough about your\nfuture self and users using the app to style it well and be a delight to\nuse. Autopalette\u2019s syntax is an expriment to help manage this dilemma.\n\nWhile you compose and read your code, this syntax separates the styling\nfrom rest of the function calls. You don\u2019t have to think about styling\nunless you want to, and when you do, which is often as you look at the\nstring you just put together to print - assuming you started with\n``af(\"``, close the quote and bracket, type out a style shortcut and you\nare done.\n\nAlthough, few times you want a bit more than that\u2026\n\n.. code:: python\n\n   from autopalette import af, GameBoyGreenPalette\n\n   af.init(palette=GameBoyGreenPalette)\n\n   print(af(\"There you are!\").h1)\n\n.. figure:: https://user-images.githubusercontent.com/23116/40860027-550d2046-65d3-11e8-9fbe-b0ecdf3ec50c.png\n   :alt: 06-select-palette\n\n   06-select-palette\n\nLook at that! Yummy.\n\nAutopalette goes the length to support a handful of palettes.\n\n-  GameBoyChocolate\n-  GameBoyOriginal\n-  Grayscale\n-  Oil\n-  Arcade\n-  CLRS\n\nIf this is exciting to you too, read further below how to create your\nown!\n\nHow does this look on a terminal with only 16 colors?\n\n.. figure:: https://user-images.githubusercontent.com/23116/40860055-74e898aa-65d3-11e8-8bfc-3873c1ea4a4b.png\n   :alt: 06-select-palette-16-color\n\n   06-select-palette-16-color\n\nNot too shabby, eh?\n\nHow do you test how your app will look on terminals with limited colors?\nTry these as prefix to your script invocation for a temporary change:\n\n-  ``env TERM=vt100``\n-  ``env TERM=rxvt``\n-  ``env TERM=xterm``\n-  ``env TERM=xterm-256color``\n-  ``env COLORTERM=truecolor``\n-  ``env NO_COLOR``\n\nlike so:\n\n``$ env TERM=xterm-256color python app.py``\n\nTo save a setting permanently, put ``export TERM=...`` in your\n``~/.bash_profile`` or your default shell\u2019s configuration.\n\nIf the environment variable NO_COLOR is set, autopalette honors the\nconfiguration and disables all color. Same with redirected output and\npipes - autopalette will handle it fully automatically, if it fails to\ndo so, please open an issue in the tracker and I\u2019ll do my best to fix\nit. In case you can fix the issue yourself, a pull request will be\nawesome!\n\nAnd we would be essentially done, except, there\u2019s this little voice in\nthe head that\u2019s saying something mojib\u00aake something, but it\u2019s all\ngarbled up.\n\n.. code:: python\n\n   from autopalette import af \n\n   af.init(fix_text=True)\n\n   print(af(\"&macr;\\\\_(\u00e3\\x83\\x84)_/&macr;\").info)\n\n.. figure:: https://user-images.githubusercontent.com/23116/40860106-abf343f4-65d3-11e8-9272-89733b0790bd.png\n   :alt: 07-fix-text\n\n   07-fix-text\n\nNeat, with the ``fix_text`` option set, autopalette transparently passes\nyour text through ``ftfy``\\ \u2019s ``fix_text()`` function call, ensuring\nyour application does not output garbage when badly encoded strings find\ntheir way to your app\u2019s print statement.\n\nThere\u2019s more, not all terminal and emulators support unicode, and will\nstill produce garbage if we feed them strings that they do not know how\nto display. Use the ``fix_all`` option to let autopalette and the\nterminal it is running on figure out the rest.\n\n.. code:: python\n\n   from autopalette import af \n\n   af.init(fix_all=True)\n\n   print(af(\"I \ud83d\udc9b Unicode!\"))\n\nTry this example with ``env TERM=vt100`` for the full cleanup!\n\n.. figure:: https://user-images.githubusercontent.com/23116/40860125-c4f0343e-65d3-11e8-9bfe-d92f177c5852.png\n   :alt: 08-fix-all\n\n   08-fix-all\n\nNote that fixing text and emoji requires additional libraries to be\nloaded and can slow down startup time. If your program does not output\nstrings generated by other programs, (which includes strings received\nfrom http APIs!) and the program is invoked repeatedly instead of\nrunning for a while, you may want to skip ``fix_...`` options.\n\nAnd that\u2019s about it for three-line examples!\n\nYou can start your scripts with ``af.init(fix_all=True)`` and use\n``af()`` to wrap your strings, even if you ignore colors and styles,\nyour program will display text correctly on most popular (and many\nobscure) terminals.\n\nHere\u2019s the basic theme:\n\n.. figure:: https://user-images.githubusercontent.com/23116/40860445-e69d057a-65d4-11e8-9926-228beaf3c429.png\n   :alt: 09-basic-palette\n\n   09-basic-palette\n\nBut there\u2019s more!\n\nYour users have the ability to define their own themes, and autopalette\nwill automatically\\* recolor your application to their preferences or\nneeds. (*mostly automatically, or with a little help.)\n\n.. code:: text\n\n   # ~/.autopalette\n\n   palette = Dutron\n   render = Truecolor\n\n.. figure:: https://user-images.githubusercontent.com/23116/40860487-0589dd50-65d5-11e8-9360-2fb29a2d213e.png\n   :alt: 10-restricted-color-palette\n\n   10-restricted-color-palette\n\nYour terminal applications look beautiful as you intend, to everyone, as\nthey expect.\n\nIt is almost two decades since Y2K! And with over 50 years of the\nterminal technology behind us, this should be a thing we expect as a\nnorm.\n\nAutopalette is another attempt at fixing some of these gaps by making it\nnear trivial to style terminal apps and do the right thing for the\nvarious terminals it runs on\u2026 without the complexity often involved as a\nresult of the rich legacy of the technology.\n\nAutopalette would not dare exist without the libraries published by\nthese generous individuals who made it possible to think and write code\nin simple mental models that are just right for the task:\n\n-  ``colorhash``: Felix Krull (https://pypi.org/project/colorhash/)\n-  ``colortrans.py``: Micah Elliott\n   (https://gist.github.com/MicahElliott/719710/)\n-  ``colour``: Valentin LAB (https://pypi.org/project/colour/)\n-  ``emoji2text``: Sam CB (https://pypi.org/project/emoji2text/)\n-  ``ftfy``: Rob Speer / Luminoso (https://pypi.org/project/ftfy/)\n-  ``kdtree``: Stefan K\u00f6gl (https://pypi.org/project/kdtree/)\n-  ``sty``: Felix Meyer-Wolters (https://pypi.org/project/sty/)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hiway/autopalette", "keywords": "terminal,color,theme,palette", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "autopalette", "package_url": "https://pypi.org/project/autopalette/", "platform": "", "project_url": "https://pypi.org/project/autopalette/", "project_urls": {"Homepage": "https://github.com/hiway/autopalette"}, "release_url": "https://pypi.org/project/autopalette/0.1.0-2/", "requires_dist": ["colorhash (>=1.0.2)", "colour (>=0.1.5)", "kdtree (>=0.16)", "sty (>=1.0.0b6)", "emoji2text", "ftfy"], "requires_python": "", "summary": "Terminal palettes and themes, without tears.", "version": "0.1.0-2", "yanked": false, "html_description": "<div class=\"project-description\">\n            autopalette<br>===========<br><br>Terminal palettes and themes, without tears.<br><br>::<br><br>   pip install autopalette<br><br>**Status: Alpha; being developed.**<br><br>Do you write python scripts that ``print()`` text on the command-line<br>terminal? Do you feel the interface could convey a bit more meaning, but<br>the effort needed to get it right has kept you away from using ANSI<br>colors? These things should be easy, right?<br><br>Here\u2019s a regular Python program that prints a word:<br><br>.. code:: python<br><br>   print(\"Tring!\")<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40859649-0da89ab0-65d2-11e8-8026-19ba6a2ad003.png<br>   :alt: 01-regular-print<br><br>   01-regular-print<br><br>Here is what it looks like with autopalette, using a shortcut called<br>``AutoFormat`` or in short: ``af``.<br><br>.. code:: python<br><br>   from autopalette import af<br><br>   print(af(\"Tring!\"))<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40859706-3b61f3c0-65d2-11e8-996b-da4e218e192c.png<br>   :alt: 02-autoformat-wrapped-print<br><br>   02-autoformat-wrapped-print<br><br>We added one line to import, and four characters around the string.<br><br>And it does nothing - autopalette is non-intrusive that way. You can<br>leave your ``af``-wrapped strings around and they will not run<br>unnecessary code until you ask for more.<br><br>What\u2019s more?<br><br>.. code:: python<br><br>   from autopalette import af<br><br>   print(af(\"Hello, world!\").id)<br>   print(af(\"Hello, world!\").id256)<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40859765-63bec9b0-65d2-11e8-886c-82011ea96f8b.png<br>   :alt: 03-id-deterministic-color<br><br>   03-id-deterministic-color<br><br>If your terminal / emulator reports that it supports color, you should<br>see the second line formatted in fuschia/ magenta. Try changing the text<br>and observe that the color changes when the text changes, but it stays<br>fixed for the same text. Across function calls, across program runs,<br>across machines, across time itself! Okay maybe that was too dramatic,<br>but it is kind of true because, mathematics.<br><br>Autopalette\u2019s ``id`` feature hashes the supplied text and generates a<br>color unique to the text within the range of colors reported by the<br>terminal. ``id256`` generates a color within the ANSI 256 palette.<br>``id256`` is not portable, but feel free to use it for your personal<br>scripts where color limits are known.<br><br>Why is this useful?<br><br>It helps to identify unique names that your program may output, such as:<br><br>-  hostnames, when working with remote machines.<br>-  usernames, for logs of multi-user environments.<br>-  you know better what matters to your program\u2019s output :)<br><br>Sometimes you want a little more\u2026<br><br>.. code:: python<br><br>   from autopalette import af<br><br>   print(af(\"Hello again!\").h1)<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40859801-858c3ef6-65d2-11e8-90d7-69a80fc57c57.png<br>   :alt: 04-header-one<br><br>   04-header-one<br><br>And we have a nicely decorated header, just like that. You can use one<br>of the several pre-defined styles, or read further below how you can<br>design your own.<br><br>Here are the various styles built into autopalette.<br><br>-  ``p``: plain-text, or paragraph - as you like to read it.<br>-  ``light``: where color range allows it, lighter text.<br>-  ``dark``: darker text if terminal supports enough colors within<br>   palette.<br>-  ``h1``: highlighted text style 1, or header-1.<br>-  ``h2``:<br>-  ``h3``<br>-  ``h4``<br>-  ``li``: list element.<br>-  ``err``: an error<br>-  ``warn``: a warning<br>-  ``info``: a warning<br>-  ``ok``: a warning<br>-  ``b``: bold.<br>-  ``i``: italic.<br>-  ``u``: underline.<br>-  ``r``: reversed colors.<br>-  ``raw``: useful to debug, displays the ANSI code instead of applying<br>   it.<br><br>Let us try superimposing two styles.<br><br>.. code:: python<br><br>   from autopalette import af<br><br>   print(af(\"Hey! We've met before!?\").info.b)<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40859850-abe90afc-65d2-11e8-905d-d8a875d0f021.png<br>   :alt: 05-superimpose-styles<br><br>   05-superimpose-styles<br><br>You get the idea, tack the names of styles you want at the end-bracket<br>of the call to ``af``.<br><br>If you are wondering, \u201cWait, what\u2019s with that weird syntax?\u201d, in<br>Python\u2019s spirit of quick protoyping, autopalette encourages<br>experimenting with minimal mental and physical effort to tweak knobs.<br>Your program\u2019s actual task matters more, but you care enough about your<br>future self and users using the app to style it well and be a delight to<br>use. Autopalette\u2019s syntax is an expriment to help manage this dilemma.<br><br>While you compose and read your code, this syntax separates the styling<br>from rest of the function calls. You don\u2019t have to think about styling<br>unless you want to, and when you do, which is often as you look at the<br>string you just put together to print - assuming you started with<br>``af(\"``, close the quote and bracket, type out a style shortcut and you<br>are done.<br><br>Although, few times you want a bit more than that\u2026<br><br>.. code:: python<br><br>   from autopalette import af, GameBoyGreenPalette<br><br>   af.init(palette=GameBoyGreenPalette)<br><br>   print(af(\"There you are!\").h1)<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40860027-550d2046-65d3-11e8-9fbe-b0ecdf3ec50c.png<br>   :alt: 06-select-palette<br><br>   06-select-palette<br><br>Look at that! Yummy.<br><br>Autopalette goes the length to support a handful of palettes.<br><br>-  GameBoyChocolate<br>-  GameBoyOriginal<br>-  Grayscale<br>-  Oil<br>-  Arcade<br>-  CLRS<br><br>If this is exciting to you too, read further below how to create your<br>own!<br><br>How does this look on a terminal with only 16 colors?<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40860055-74e898aa-65d3-11e8-8bfc-3873c1ea4a4b.png<br>   :alt: 06-select-palette-16-color<br><br>   06-select-palette-16-color<br><br>Not too shabby, eh?<br><br>How do you test how your app will look on terminals with limited colors?<br>Try these as prefix to your script invocation for a temporary change:<br><br>-  ``env TERM=vt100``<br>-  ``env TERM=rxvt``<br>-  ``env TERM=xterm``<br>-  ``env TERM=xterm-256color``<br>-  ``env COLORTERM=truecolor``<br>-  ``env NO_COLOR``<br><br>like so:<br><br>``$ env TERM=xterm-256color python app.py``<br><br>To save a setting permanently, put ``export TERM=...`` in your<br>``~/.bash_profile`` or your default shell\u2019s configuration.<br><br>If the environment variable NO_COLOR is set, autopalette honors the<br>configuration and disables all color. Same with redirected output and<br>pipes - autopalette will handle it fully automatically, if it fails to<br>do so, please open an issue in the tracker and I\u2019ll do my best to fix<br>it. In case you can fix the issue yourself, a pull request will be<br>awesome!<br><br>And we would be essentially done, except, there\u2019s this little voice in<br>the head that\u2019s saying something mojib\u00aake something, but it\u2019s all<br>garbled up.<br><br>.. code:: python<br><br>   from autopalette import af <br><br>   af.init(fix_text=True)<br><br>   print(af(\"&amp;macr;\\\\_(\u00e3\\x83\\x84)_/&amp;macr;\").info)<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40860106-abf343f4-65d3-11e8-9272-89733b0790bd.png<br>   :alt: 07-fix-text<br><br>   07-fix-text<br><br>Neat, with the ``fix_text`` option set, autopalette transparently passes<br>your text through ``ftfy``\\ \u2019s ``fix_text()`` function call, ensuring<br>your application does not output garbage when badly encoded strings find<br>their way to your app\u2019s print statement.<br><br>There\u2019s more, not all terminal and emulators support unicode, and will<br>still produce garbage if we feed them strings that they do not know how<br>to display. Use the ``fix_all`` option to let autopalette and the<br>terminal it is running on figure out the rest.<br><br>.. code:: python<br><br>   from autopalette import af <br><br>   af.init(fix_all=True)<br><br>   print(af(\"I \ud83d\udc9b Unicode!\"))<br><br>Try this example with ``env TERM=vt100`` for the full cleanup!<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40860125-c4f0343e-65d3-11e8-9bfe-d92f177c5852.png<br>   :alt: 08-fix-all<br><br>   08-fix-all<br><br>Note that fixing text and emoji requires additional libraries to be<br>loaded and can slow down startup time. If your program does not output<br>strings generated by other programs, (which includes strings received<br>from http APIs!) and the program is invoked repeatedly instead of<br>running for a while, you may want to skip ``fix_...`` options.<br><br>And that\u2019s about it for three-line examples!<br><br>You can start your scripts with ``af.init(fix_all=True)`` and use<br>``af()`` to wrap your strings, even if you ignore colors and styles,<br>your program will display text correctly on most popular (and many<br>obscure) terminals.<br><br>Here\u2019s the basic theme:<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40860445-e69d057a-65d4-11e8-9926-228beaf3c429.png<br>   :alt: 09-basic-palette<br><br>   09-basic-palette<br><br>But there\u2019s more!<br><br>Your users have the ability to define their own themes, and autopalette<br>will automatically\\* recolor your application to their preferences or<br>needs. (*mostly automatically, or with a little help.)<br><br>.. code:: text<br><br>   # ~/.autopalette<br><br>   palette = Dutron<br>   render = Truecolor<br><br>.. figure:: https://user-images.githubusercontent.com/23116/40860487-0589dd50-65d5-11e8-9360-2fb29a2d213e.png<br>   :alt: 10-restricted-color-palette<br><br>   10-restricted-color-palette<br><br>Your terminal applications look beautiful as you intend, to everyone, as<br>they expect.<br><br>It is almost two decades since Y2K! And with over 50 years of the<br>terminal technology behind us, this should be a thing we expect as a<br>norm.<br><br>Autopalette is another attempt at fixing some of these gaps by making it<br>near trivial to style terminal apps and do the right thing for the<br>various terminals it runs on\u2026 without the complexity often involved as a<br>result of the rich legacy of the technology.<br><br>Autopalette would not dare exist without the libraries published by<br>these generous individuals who made it possible to think and write code<br>in simple mental models that are just right for the task:<br><br>-  ``colorhash``: Felix Krull (https://pypi.org/project/colorhash/)<br>-  ``colortrans.py``: Micah Elliott<br>   (https://gist.github.com/MicahElliott/719710/)<br>-  ``colour``: Valentin LAB (https://pypi.org/project/colour/)<br>-  ``emoji2text``: Sam CB (https://pypi.org/project/emoji2text/)<br>-  ``ftfy``: Rob Speer / Luminoso (https://pypi.org/project/ftfy/)<br>-  ``kdtree``: Stefan K\u00f6gl (https://pypi.org/project/kdtree/)<br>-  ``sty``: Felix Meyer-Wolters (https://pypi.org/project/sty/)<br><br><br>\n          </div>"}, "last_serial": 3931470, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5c02927c8ece884dad0a5369f8e0042b", "sha256": "8493d2f55d6a2d86515d89b352143fbb9a2eb70f072c425f657ff4915ba6c772"}, "downloads": -1, "filename": "autopalette-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c02927c8ece884dad0a5369f8e0042b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18248, "upload_time": "2018-06-01T20:00:21", "upload_time_iso_8601": "2018-06-01T20:00:21.103878Z", "url": "https://files.pythonhosted.org/packages/df/c4/afa134fc6f6533356fa86d548289c2bf15f8cd212b8676eda0bbf9b8fc32/autopalette-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13779f000f2c951de06c1505922f086a", "sha256": "e3453a58f2ae4444b84fdcfef463c5f3763411e85e40915c5a988cecc35b5279"}, "downloads": -1, "filename": "autopalette-0.1.0.tar.gz", "has_sig": false, "md5_digest": "13779f000f2c951de06c1505922f086a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23144, "upload_time": "2018-06-01T20:00:24", "upload_time_iso_8601": "2018-06-01T20:00:24.332843Z", "url": "https://files.pythonhosted.org/packages/64/85/3d0d5b2563fd27482ac9edb4d05ee738e39f2fb7a9b63ad9391ce681c3fe/autopalette-0.1.0.tar.gz", "yanked": false}], "0.1.0-1": [{"comment_text": "", "digests": {"md5": "6c9e470b4af6b01433a548eec47f85fb", "sha256": "845d1ec37e66176fab0b4a4ca68d5a14218142f4ed43a4e8d63395e140d8a55d"}, "downloads": -1, "filename": "autopalette-0.1.0-1.tar.gz", "has_sig": false, "md5_digest": "6c9e470b4af6b01433a548eec47f85fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23185, "upload_time": "2018-06-02T06:31:41", "upload_time_iso_8601": "2018-06-02T06:31:41.344898Z", "url": "https://files.pythonhosted.org/packages/7e/d1/a6efa0247161f6f1214e595c155d14bc156a41d1677876158d0d72f85a56/autopalette-0.1.0-1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "6734311f59f3ed5d7f66dc12d6ff3830", "sha256": "f3f1a35ee9b744331fcae0a1089b2bc04c6fed647fcecf5dc36a7fc5188f1445"}, "downloads": -1, "filename": "autopalette-0.1.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "6734311f59f3ed5d7f66dc12d6ff3830", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18315, "upload_time": "2018-06-02T06:31:38", "upload_time_iso_8601": "2018-06-02T06:31:38.535185Z", "url": "https://files.pythonhosted.org/packages/ce/2d/666c3394affb621443d07899cfc9666bbd0da916e9551fdc7121ced2913c/autopalette-0.1.0.post1-py3-none-any.whl", "yanked": false}], "0.1.0-2": [{"comment_text": "", "digests": {"md5": "2ec67f027677e675d7b247483d958298", "sha256": "60cc31bdcb8d1df54120c4deec5d5ead4200cdbb4fccbdaa5bae14cab896003e"}, "downloads": -1, "filename": "autopalette-0.1.0-2.tar.gz", "has_sig": false, "md5_digest": "2ec67f027677e675d7b247483d958298", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23212, "upload_time": "2018-06-05T09:28:55", "upload_time_iso_8601": "2018-06-05T09:28:55.627306Z", "url": "https://files.pythonhosted.org/packages/6c/24/1d7f93eda8a0b21e55b1c072d404e1f4c81a73806c6ecd6f7c4e8c99bcfa/autopalette-0.1.0-2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "663380ae4e57d055450ab025aed90ae6", "sha256": "5892484b73f57c1ad21ea0d1069914cffbc06e490476400c56809f195cfe3bf9"}, "downloads": -1, "filename": "autopalette-0.1.0.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "663380ae4e57d055450ab025aed90ae6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18335, "upload_time": "2018-06-05T09:28:53", "upload_time_iso_8601": "2018-06-05T09:28:53.467270Z", "url": "https://files.pythonhosted.org/packages/cf/df/a28b029569cd796c7637a7763014e1fcdc557f3f4c90138eaf6001171d95/autopalette-0.1.0.post2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ec67f027677e675d7b247483d958298", "sha256": "60cc31bdcb8d1df54120c4deec5d5ead4200cdbb4fccbdaa5bae14cab896003e"}, "downloads": -1, "filename": "autopalette-0.1.0-2.tar.gz", "has_sig": false, "md5_digest": "2ec67f027677e675d7b247483d958298", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23212, "upload_time": "2018-06-05T09:28:55", "upload_time_iso_8601": "2018-06-05T09:28:55.627306Z", "url": "https://files.pythonhosted.org/packages/6c/24/1d7f93eda8a0b21e55b1c072d404e1f4c81a73806c6ecd6f7c4e8c99bcfa/autopalette-0.1.0-2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "663380ae4e57d055450ab025aed90ae6", "sha256": "5892484b73f57c1ad21ea0d1069914cffbc06e490476400c56809f195cfe3bf9"}, "downloads": -1, "filename": "autopalette-0.1.0.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "663380ae4e57d055450ab025aed90ae6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18335, "upload_time": "2018-06-05T09:28:53", "upload_time_iso_8601": "2018-06-05T09:28:53.467270Z", "url": "https://files.pythonhosted.org/packages/cf/df/a28b029569cd796c7637a7763014e1fcdc557f3f4c90138eaf6001171d95/autopalette-0.1.0.post2-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:16:11 2020"}