{"info": {"author": "Alex Turbov", "author_email": "I.zaufi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Version Control"], "description": "What is Chewy?\n==============\n\nChewy is a _CMake Helpers Easy Way sYnchronizer_.\nChewy was designed to help an expecienced programmers to manage [CMake](http://cmake.org) modules\nin their projects (just like package managers do).\nIt allows to check versions of CMake modules and to keep their freshness by synchronizing\nwith a repository (or even few repositories), so you always have last versions of them in\nall of your projects.\n\nMotivation\n==========\n\nIf you are an experienced developer who use CMake as a build-system in your daily work, you should\nbe close with such kind of a situation. You are developing a CMake module for your current project (it\ncould be a some specific library's finder or just some kind of helper). But some time latter you are\ncopying that module to another (possible just started) project. As a result, some black day you have\nfound yourself as an owner of a work-environment directory fulled of a great many of local copies of\ndifferent projects with tens of non-synchronized CMake modules inside. New ones have fresh versions.\nBut you would like to update versions of modules from more ancient ones.\n\nThere are situations also when you are coming back to an years ago abandoned project and injecting\nsome interesting changes in a rush of programming creativity. But day latter you are realizing what\nsuch a brilliant find should be propagated to all other projects.\n\nIn moments like that, you could feel some unclear desire in your mind. It would be so great to keep\nall of your modules (in an accurate sorted and classified way with tiny name tags attached to them)\nin your own storage and just to have possibility to synchronize them from different projects!\nA sharp programmer's brain are suggesting a possible solution. You can take all your modules away to\na separate VCS repository and plug it in as an 'external' one to you project's repository. You can\u2026\nbut \"Hey, Houston! We've have a problem here\"! The repository contains a big number of files when you\nneed just a few of them in your project. Not to mention a complexity of external repositories' links\nusing with distributed version control systems. Long story short a laziness wins! Entropy of you\nwork directory are not decreasing with a threatening speed. And you are writing Christmas message to\nSanta asking to have a simple package manager to manage your own cmake-modules as your Christmas\nwish. But deep in you mind you know what in the morning you gonna find a Scottish jumper that was\nbought by you wife in Macys last week\u2026\n\nSounds familiar? So when we glad to introduce our charming shaggy second pilot to you \u2014 Chewy!\n\n\nUsage\n=====\n\nto list repositorie's files by checking manifest\n\n    $ chewy list [repo-URL ...]\n\nAs result you gonna see a list of filename, version and module description.\n\n\nTo add new module and all related files to your project tree or to roll back all changes of existed file to\nrepositorie's original one's condition\n\n    $ chewy install file-URL ...\n\n\nTo delete installed module and all related files from your project tree. Note: this command doesn't\ndelete any of modules' directory's empty sub directories. This is user's responsibility.\n\n    $ chewy uninstall file-PATH ...\n\n\nto receive newest versions of your project's files by checking a repository\n\n    $ chewy update [file-PATH ...]\n\n\nto check availability of newest versions of your project's files\n\n    $ chewy status [file-PATH ...]\n\nAs result you gonna see a list of\n\n    *|U|M|D filename local-version remote-version\n\nwhere,\n- `*` - you have a last version of the module\n- `U` - there is an **U**pdate \n- `M` - the local module was **M**odified\n- `D` - there is no corresponded module on the repository\n\n\nand finally... ;-)\n\n    $ chewy jump-to-light-speed\n    Uuuuuuuuuur Ahhhhhrrrrr\n    Uhrrrrr Ahhhhrrrr\n    Aaaaarhg...\n\n\nYour own Chewy-repository\n=========================\n\nLets imagine you have a few fancy CMake-modules, which you want to share between some of your\nC++ projects, and GitHub repository named `https://github/solo/han-shot-first.git`. So:\n\n    $ git clone https://github/solo/han-shot-first.git hsf\n    $ cd hsf\n\nCopy your modules to repository:\n\n    $ cp ~/FindDroidsYouRLooking4.cmake .\n    $ cp ~/order-66.cmake .\n\nAnd a complex one, which has two additional files in subdirectory\n\n    $ cp ~/ObiWanHelper.cmake .\n    $ mkdir jedi-stuff\n    $ cp ~/elegant-lightsaber.in jedi-stuff/\n    $ cp ~/barbaric-blaster.in jedi-stuff/\n\nPlace them under version control:\n\n    git add *.cmake\n    git add jedi-stuff\n    git -a -m 'Repository init'\n\nSo, now you have three modules under version control, but it isn't Chewy-repository still.\nWhat you have to do is to add a few Chewy-tags to your modules like this:\n\n    $ for i in *.cmake; do \\\n    >   echo \"# X-Chewy-Repobase: https://raw.github/solo/han-shot-first/master/\" >> $i; \\\n    >   echo \"# X-Chewy-Path: $i\" >> $i; \\\n    >   echo \"# X-Chewy-Version: 1.0\" >> $i; \\\n    > done\n\nNote we just added __comment__ lines to the end of CMake-files, so they don't affect a code\n\nAnd one extra tag, describing dependent files, for a complex module:\n\n    $ for i in jedi-stuff/*; do \\\n    >    echo \"# X-Chewy-AddonFile: $i\" >> ObiWanHelper.cmake; \\\n    > done\n\nNote the variable `i` above contains a directory name as soon as a filename: `jedi-stuff/elegan-lightsaber.in`\n\nAt last, you have to give some descriptions for your modules:\n\n    $ echo \"# X-Chewy-Description: Help me Obi-Wan Kenobi. You\u2019re my only hope!\"    >> ObiWanHelper.cmake\n    $ echo \"# X-Chewy-Description: C3PO and R2D2 droid-libraries finder\"            >> FindDroidsYouRLooking4.cmake\n    $ echo \"# X-Chewy-Description: Add execute-order-66 target to you build system\" >> order-66.cmake\n\nAnd one last move \u2014 launch `chewy-update-manifest` utility from Chewy-package:\n\n    $ chewy-update-manifest\n\nThat command gonna create a manifest file, so you may want to add it under version control, fixate all changes\nand push it to origin repository finally:\n\n    $ git add manifest\n    $ git ci -a -m 'Chewy-repository is done'\n    $ git push\n\nNow you can use you fresh shiny Chewy-repository:\n\n    $ chewy list https://raw.github/solo/han-shot-first/master\n    $ cd ~/work/dark-side-cxx-project/\n    $ chewy add https://raw.github/solo/han-shot-first/master/order-66.cmake\n\nOr even:\n\n    $ cd ~/work/rebel-alliance-cxx-senator/\n    $ chewy add https://raw.github/solo/han-shot-first/master/ObiWanHelper.cmake\n\nAnd if you think some using modules have a new version, you can just update it in any project by easy way:\n\n    $ chewy status\n    $ chewy update\n\n\n> May the Force be with you!\n\n\nHow to get help\n===============\n\n    $ chewy --help\n    $ chewy command --help\n    $ man chewy # TODO\n\n\nSee also\n========\n\n* [Repository](https://github.com/mutanabbi/chewy-cmake-rep) of reusable CMake modules managed with `chewy`\n\n>Chewy is the best second pilot ever!\n\n[![Downloads](https://pypip.in/d/chewy/badge.png)](https://pypi.python.org/pypi/chewy)\n[![Downloads](https://pypip.in/v/chewy/badge.png)](https://pypi.python.org/pypi/chewy)\n[![Build Status](https://api.travis-ci.org/mutanabbi/chewy.png?branch=master)](https://travis-ci.org/mutanabbi/chewy)", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/mutanabbi/chewy/archive/version-0.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mutanabbi/chewy", "keywords": "CMake modules synchronizer", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": null, "maintainer_email": null, "name": "chewy", "package_url": "https://pypi.org/project/chewy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/chewy/", "project_urls": {"Download": "https://github.com/mutanabbi/chewy/archive/version-0.4.tar.gz", "Homepage": "https://github.com/mutanabbi/chewy"}, "release_url": "https://pypi.org/project/chewy/0.4/", "requires_dist": null, "requires_python": null, "summary": "Python script to manage CMake modules", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            What is Chewy?<br>==============<br><br>Chewy is a _CMake Helpers Easy Way sYnchronizer_.<br>Chewy was designed to help an expecienced programmers to manage [CMake](http://cmake.org) modules<br>in their projects (just like package managers do).<br>It allows to check versions of CMake modules and to keep their freshness by synchronizing<br>with a repository (or even few repositories), so you always have last versions of them in<br>all of your projects.<br><br>Motivation<br>==========<br><br>If you are an experienced developer who use CMake as a build-system in your daily work, you should<br>be close with such kind of a situation. You are developing a CMake module for your current project (it<br>could be a some specific library's finder or just some kind of helper). But some time latter you are<br>copying that module to another (possible just started) project. As a result, some black day you have<br>found yourself as an owner of a work-environment directory fulled of a great many of local copies of<br>different projects with tens of non-synchronized CMake modules inside. New ones have fresh versions.<br>But you would like to update versions of modules from more ancient ones.<br><br>There are situations also when you are coming back to an years ago abandoned project and injecting<br>some interesting changes in a rush of programming creativity. But day latter you are realizing what<br>such a brilliant find should be propagated to all other projects.<br><br>In moments like that, you could feel some unclear desire in your mind. It would be so great to keep<br>all of your modules (in an accurate sorted and classified way with tiny name tags attached to them)<br>in your own storage and just to have possibility to synchronize them from different projects!<br>A sharp programmer's brain are suggesting a possible solution. You can take all your modules away to<br>a separate VCS repository and plug it in as an 'external' one to you project's repository. You can\u2026<br>but \"Hey, Houston! We've have a problem here\"! The repository contains a big number of files when you<br>need just a few of them in your project. Not to mention a complexity of external repositories' links<br>using with distributed version control systems. Long story short a laziness wins! Entropy of you<br>work directory are not decreasing with a threatening speed. And you are writing Christmas message to<br>Santa asking to have a simple package manager to manage your own cmake-modules as your Christmas<br>wish. But deep in you mind you know what in the morning you gonna find a Scottish jumper that was<br>bought by you wife in Macys last week\u2026<br><br>Sounds familiar? So when we glad to introduce our charming shaggy second pilot to you \u2014 Chewy!<br><br><br>Usage<br>=====<br><br>to list repositorie's files by checking manifest<br><br>    $ chewy list [repo-URL ...]<br><br>As result you gonna see a list of filename, version and module description.<br><br><br>To add new module and all related files to your project tree or to roll back all changes of existed file to<br>repositorie's original one's condition<br><br>    $ chewy install file-URL ...<br><br><br>To delete installed module and all related files from your project tree. Note: this command doesn't<br>delete any of modules' directory's empty sub directories. This is user's responsibility.<br><br>    $ chewy uninstall file-PATH ...<br><br><br>to receive newest versions of your project's files by checking a repository<br><br>    $ chewy update [file-PATH ...]<br><br><br>to check availability of newest versions of your project's files<br><br>    $ chewy status [file-PATH ...]<br><br>As result you gonna see a list of<br><br>    *|U|M|D filename local-version remote-version<br><br>where,<br>- `*` - you have a last version of the module<br>- `U` - there is an **U**pdate <br>- `M` - the local module was **M**odified<br>- `D` - there is no corresponded module on the repository<br><br><br>and finally... ;-)<br><br>    $ chewy jump-to-light-speed<br>    Uuuuuuuuuur Ahhhhhrrrrr<br>    Uhrrrrr Ahhhhrrrr<br>    Aaaaarhg...<br><br><br>Your own Chewy-repository<br>=========================<br><br>Lets imagine you have a few fancy CMake-modules, which you want to share between some of your<br>C++ projects, and GitHub repository named `https://github/solo/han-shot-first.git`. So:<br><br>    $ git clone https://github/solo/han-shot-first.git hsf<br>    $ cd hsf<br><br>Copy your modules to repository:<br><br>    $ cp ~/FindDroidsYouRLooking4.cmake .<br>    $ cp ~/order-66.cmake .<br><br>And a complex one, which has two additional files in subdirectory<br><br>    $ cp ~/ObiWanHelper.cmake .<br>    $ mkdir jedi-stuff<br>    $ cp ~/elegant-lightsaber.in jedi-stuff/<br>    $ cp ~/barbaric-blaster.in jedi-stuff/<br><br>Place them under version control:<br><br>    git add *.cmake<br>    git add jedi-stuff<br>    git -a -m 'Repository init'<br><br>So, now you have three modules under version control, but it isn't Chewy-repository still.<br>What you have to do is to add a few Chewy-tags to your modules like this:<br><br>    $ for i in *.cmake; do \\<br>    &gt;   echo \"# X-Chewy-Repobase: https://raw.github/solo/han-shot-first/master/\" &gt;&gt; $i; \\<br>    &gt;   echo \"# X-Chewy-Path: $i\" &gt;&gt; $i; \\<br>    &gt;   echo \"# X-Chewy-Version: 1.0\" &gt;&gt; $i; \\<br>    &gt; done<br><br>Note we just added __comment__ lines to the end of CMake-files, so they don't affect a code<br><br>And one extra tag, describing dependent files, for a complex module:<br><br>    $ for i in jedi-stuff/*; do \\<br>    &gt;    echo \"# X-Chewy-AddonFile: $i\" &gt;&gt; ObiWanHelper.cmake; \\<br>    &gt; done<br><br>Note the variable `i` above contains a directory name as soon as a filename: `jedi-stuff/elegan-lightsaber.in`<br><br>At last, you have to give some descriptions for your modules:<br><br>    $ echo \"# X-Chewy-Description: Help me Obi-Wan Kenobi. You\u2019re my only hope!\"    &gt;&gt; ObiWanHelper.cmake<br>    $ echo \"# X-Chewy-Description: C3PO and R2D2 droid-libraries finder\"            &gt;&gt; FindDroidsYouRLooking4.cmake<br>    $ echo \"# X-Chewy-Description: Add execute-order-66 target to you build system\" &gt;&gt; order-66.cmake<br><br>And one last move \u2014 launch `chewy-update-manifest` utility from Chewy-package:<br><br>    $ chewy-update-manifest<br><br>That command gonna create a manifest file, so you may want to add it under version control, fixate all changes<br>and push it to origin repository finally:<br><br>    $ git add manifest<br>    $ git ci -a -m 'Chewy-repository is done'<br>    $ git push<br><br>Now you can use you fresh shiny Chewy-repository:<br><br>    $ chewy list https://raw.github/solo/han-shot-first/master<br>    $ cd ~/work/dark-side-cxx-project/<br>    $ chewy add https://raw.github/solo/han-shot-first/master/order-66.cmake<br><br>Or even:<br><br>    $ cd ~/work/rebel-alliance-cxx-senator/<br>    $ chewy add https://raw.github/solo/han-shot-first/master/ObiWanHelper.cmake<br><br>And if you think some using modules have a new version, you can just update it in any project by easy way:<br><br>    $ chewy status<br>    $ chewy update<br><br><br>&gt; May the Force be with you!<br><br><br>How to get help<br>===============<br><br>    $ chewy --help<br>    $ chewy command --help<br>    $ man chewy # TODO<br><br><br>See also<br>========<br><br>* [Repository](https://github.com/mutanabbi/chewy-cmake-rep) of reusable CMake modules managed with `chewy`<br><br>&gt;Chewy is the best second pilot ever!<br><br>[![Downloads](https://pypip.in/d/chewy/badge.png)](https://pypi.python.org/pypi/chewy)<br>[![Downloads](https://pypip.in/v/chewy/badge.png)](https://pypi.python.org/pypi/chewy)<br>[![Build Status](https://api.travis-ci.org/mutanabbi/chewy.png?branch=master)](https://travis-ci.org/mutanabbi/chewy)\n          </div>"}, "last_serial": 961036, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "f468dcc3f6cfe4ae61bba07577be785b", "sha256": "225a60ee4bcb6233a09ff80a36e568044e39a7c75c71ea65422f1dc33271f81d"}, "downloads": -1, "filename": "chewy-0.4.tar.gz", "has_sig": false, "md5_digest": "f468dcc3f6cfe4ae61bba07577be785b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38497, "upload_time": "2014-01-05T11:24:20", "upload_time_iso_8601": "2014-01-05T11:24:20.791167Z", "url": "https://files.pythonhosted.org/packages/ac/f9/22e41f84fb7c8454ea524f9a3979fdea1ac798218e92b274c8005e731d72/chewy-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f468dcc3f6cfe4ae61bba07577be785b", "sha256": "225a60ee4bcb6233a09ff80a36e568044e39a7c75c71ea65422f1dc33271f81d"}, "downloads": -1, "filename": "chewy-0.4.tar.gz", "has_sig": false, "md5_digest": "f468dcc3f6cfe4ae61bba07577be785b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38497, "upload_time": "2014-01-05T11:24:20", "upload_time_iso_8601": "2014-01-05T11:24:20.791167Z", "url": "https://files.pythonhosted.org/packages/ac/f9/22e41f84fb7c8454ea524f9a3979fdea1ac798218e92b274c8005e731d72/chewy-0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:37 2020"}