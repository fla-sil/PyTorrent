{"info": {"author": "Abhinav Singh", "author_email": "mailsforabhinav@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Communications", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "task.py\n=======\n\nRun your task asynchronously in the background and control/communicate with them.\n\n![Build Status](https://api.travis-ci.org/abhinavsingh/task.py.png)\n\nInstall\n=======\n\n`pip install task.py`\n\nUsage\n=====\n\nBasic use case of `task.py` is to run some unit of work asynchronously \n(in a separate thread or process) while being able to control and \ncommunicate with that unit of work. Example:\n\nLets define a `simple_task` that:\n\n* Expects some arguments\n* Does some work (sleep) until signaled to stop\n* return \"done.\" as final result\n\n```\n>>> def simple_task(t): # will receive a Task instance as first argument\n...     assert t.args[0] == 'hello'\n...     assert t.kwargs['world'] == 'world'\n...     while not t.stopped():\n...         time.sleep(0.1)\n...     return 'done.'\n```\n\nNext, create a `Task` instance with `simple_task` as unit to work. \nAdditionally specify arguments expected by our `sleep_task`:\n\n```\n>>> t1 = Task(simple_task, 'hello', world='world')\n>>> \n>>> # start our task asynchronously\n>>> t1.start()\n>>> \n>>> # after 1 second signal our task to stop\n>>> time.sleep(1)\n>>> t1.stop()\n>>> \n>>> t1.done\nTrue\n>>> \n>>> t1.result\n'done.'\n>>> \n>>> t1.exception == None\nTrue\n```\n\nLets create a new `Task` instance, this time skipping the expected arguments:\n\n```\n>>> t2 = Task(simple_task)\n>>> \n>>> # start our task asynchronously\n>>> t2.start()\n>>> \n>>> t2.done\nTrue\n>>> \n>>> # No result found\n>>> t2.result == None\nTrue\n>>> \n>>> # our task raised an exception\n>>> t2.exception\nIndexError('tuple index out of range',)\n```\n\nCommunicating with Task\n=======================\n\n`Task` provide a communication queue over which external threads can send data \nto the executing unit of work. Example:\n\nLets define a `sleep_task` which will receive amount of time to sleep \nover the communication queue:\n\n```\n>>> def sleep_task(t):\n...     secs = t.recv() # recv API, default blocks until we have some data\n...     time.sleep(int(secs))\n...\n>>> t3 = Task(sleep_task)\n>>> t3.start()\n>>>\n>>> # our task is waiting\n>>> t3.done\nFalse\n>>>\n>>> # send 1 sec sleep time\n>>> t3.send(1)\n>>>\n>>> # alright, done\n>>> t3.done\nTrue\n```\n\nControllers\n===========\n\n- [wait_until_done](https://github.com/abhinavsingh/task.py/blob/master/examples/wait_until_done_task.py)\n- [redis_brpop](https://github.com/abhinavsingh/task.py/blob/master/examples/redis_brpop_task.py)\n- [redis_pubsub](https://github.com/abhinavsingh/task.py/blob/master/examples/redis_pubsub_task.py)\n\nTask and Celery\n===============\n\n- [celery_task](https://github.com/abhinavsingh/task.py/blob/master/examples/celery_task.py)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abhinavsingh/task.py", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "task.py", "package_url": "https://pypi.org/project/task.py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/task.py/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/abhinavsingh/task.py"}, "release_url": "https://pypi.org/project/task.py/0.3/", "requires_dist": null, "requires_python": null, "summary": "Run your task asynchronously and control/communicate with them.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"task-py\">\n<h2>task.py</h2>\n<p>Run your task asynchronously in the background and control/communicate with them.</p>\n<p>![Build Status](<a href=\"https://api.travis-ci.org/abhinavsingh/task.py.png\" rel=\"nofollow\">https://api.travis-ci.org/abhinavsingh/task.py.png</a>)</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p><cite>pip install task.py</cite></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Basic use case of <cite>task.py</cite> is to run some unit of work asynchronously\n(in a separate thread or process) while being able to control and\ncommunicate with that unit of work. Example:</p>\n<p>Lets define a <cite>simple_task</cite> that:</p>\n<ul>\n<li>Expects some arguments</li>\n<li>Does some work (sleep) until signaled to stop</li>\n<li>return \u201cdone.\u201d as final result</li>\n</ul>\n<p><tt>`\n&gt;&gt;&gt; def simple_task(t): # will receive a Task instance as first argument\n...\u00a0\u00a0\u00a0\u00a0 assert t.args[0] == 'hello'\n...\u00a0\u00a0\u00a0\u00a0 assert <span class=\"pre\">t.kwargs['world']</span> == 'world'\n...\u00a0\u00a0\u00a0\u00a0 while not <span class=\"pre\">t.stopped():</span>\n...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 time.sleep(0.1)\n...\u00a0\u00a0\u00a0\u00a0 return 'done.'\n`</tt></p>\n<p>Next, create a <cite>Task</cite> instance with <cite>simple_task</cite> as unit to work.\nAdditionally specify arguments expected by our <cite>sleep_task</cite>:</p>\n<p><tt>`\n&gt;&gt;&gt; t1 = Task(simple_task, 'hello', <span class=\"pre\">world='world')</span>\n&gt;&gt;&gt;\n&gt;&gt;&gt; # start our task asynchronously\n&gt;&gt;&gt; t1.start()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # after 1 second signal our task to stop\n&gt;&gt;&gt; time.sleep(1)\n&gt;&gt;&gt; t1.stop()\n&gt;&gt;&gt;\n&gt;&gt;&gt; t1.done\nTrue\n&gt;&gt;&gt;\n&gt;&gt;&gt; t1.result\n'done.'\n&gt;&gt;&gt;\n&gt;&gt;&gt; t1.exception == None\nTrue\n`</tt></p>\n<p>Lets create a new <cite>Task</cite> instance, this time skipping the expected arguments:</p>\n<p><tt>`\n&gt;&gt;&gt; t2 = Task(simple_task)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # start our task asynchronously\n&gt;&gt;&gt; t2.start()\n&gt;&gt;&gt;\n&gt;&gt;&gt; t2.done\nTrue\n&gt;&gt;&gt;\n&gt;&gt;&gt; # No result found\n&gt;&gt;&gt; t2.result == None\nTrue\n&gt;&gt;&gt;\n&gt;&gt;&gt; # our task raised an exception\n&gt;&gt;&gt; t2.exception\n<span class=\"pre\">IndexError('tuple</span> index out of <span class=\"pre\">range',)</span>\n`</tt></p>\n</div>\n<div id=\"communicating-with-task\">\n<h2>Communicating with Task</h2>\n<p><cite>Task</cite> provide a communication queue over which external threads can send data\nto the executing unit of work. Example:</p>\n<p>Lets define a <cite>sleep_task</cite> which will receive amount of time to sleep\nover the communication queue:</p>\n<p><tt>`\n&gt;&gt;&gt; def sleep_task(t):\n...\u00a0\u00a0\u00a0\u00a0 secs = t.recv() # recv API, default blocks until we have some data\n...\u00a0\u00a0\u00a0\u00a0 time.sleep(int(secs))\n...\n&gt;&gt;&gt; t3 = Task(sleep_task)\n&gt;&gt;&gt; t3.start()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # our task is waiting\n&gt;&gt;&gt; t3.done\nFalse\n&gt;&gt;&gt;\n&gt;&gt;&gt; # send 1 sec sleep time\n&gt;&gt;&gt; t3.send(1)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # alright, done\n&gt;&gt;&gt; t3.done\nTrue\n`</tt></p>\n</div>\n<div id=\"controllers\">\n<h2>Controllers</h2>\n<ul>\n<li>[wait_until_done](<a href=\"https://github.com/abhinavsingh/task.py/blob/master/examples/wait_until_done_task.py\" rel=\"nofollow\">https://github.com/abhinavsingh/task.py/blob/master/examples/wait_until_done_task.py</a>)</li>\n<li>[redis_brpop](<a href=\"https://github.com/abhinavsingh/task.py/blob/master/examples/redis_brpop_task.py\" rel=\"nofollow\">https://github.com/abhinavsingh/task.py/blob/master/examples/redis_brpop_task.py</a>)</li>\n<li>[redis_pubsub](<a href=\"https://github.com/abhinavsingh/task.py/blob/master/examples/redis_pubsub_task.py\" rel=\"nofollow\">https://github.com/abhinavsingh/task.py/blob/master/examples/redis_pubsub_task.py</a>)</li>\n</ul>\n</div>\n<div id=\"task-and-celery\">\n<h2>Task and Celery</h2>\n<ul>\n<li>[celery_task](<a href=\"https://github.com/abhinavsingh/task.py/blob/master/examples/celery_task.py\" rel=\"nofollow\">https://github.com/abhinavsingh/task.py/blob/master/examples/celery_task.py</a>)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 943065, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4c70df50eead0a0a2a19b18f63099bb6", "sha256": "c45dd3c89a84e43d5bdedd894905f181e704b0f6325cc199cf17d8d4d766f297"}, "downloads": -1, "filename": "task.py-0.1.tar.gz", "has_sig": false, "md5_digest": "4c70df50eead0a0a2a19b18f63099bb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5328, "upload_time": "2013-11-26T07:40:07", "upload_time_iso_8601": "2013-11-26T07:40:07.276579Z", "url": "https://files.pythonhosted.org/packages/8a/e5/7ec8c4be32ba52364c81230fb116cc6886d540fd161dd313b265f642d34c/task.py-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "137166440a249b936714aa3cb057d56f", "sha256": "afc8cf17674154bfd7eb2e6e2f2d7e01bdabfa9dcf86153a1a44d9bb911d5fe7"}, "downloads": -1, "filename": "task.py-0.2.tar.gz", "has_sig": false, "md5_digest": "137166440a249b936714aa3cb057d56f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5414, "upload_time": "2013-11-26T07:55:55", "upload_time_iso_8601": "2013-11-26T07:55:55.662085Z", "url": "https://files.pythonhosted.org/packages/fe/35/b2c052aa63c250230b382e37ad6562b69686f4ea541b414f6172668c8423/task.py-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a2d39d57378cc603724188aac0dec1a8", "sha256": "083ffba0026927e1e69e8a2d06d0c0f9f422509b41a4e81b70e577e37f83e3da"}, "downloads": -1, "filename": "task.py-0.3.tar.gz", "has_sig": false, "md5_digest": "a2d39d57378cc603724188aac0dec1a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6590, "upload_time": "2013-12-12T19:52:00", "upload_time_iso_8601": "2013-12-12T19:52:00.878962Z", "url": "https://files.pythonhosted.org/packages/71/34/7b0e44501b10bb36e27b1bcd541e9f23d86c98fa1e00c3365fbb4681c3a8/task.py-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2d39d57378cc603724188aac0dec1a8", "sha256": "083ffba0026927e1e69e8a2d06d0c0f9f422509b41a4e81b70e577e37f83e3da"}, "downloads": -1, "filename": "task.py-0.3.tar.gz", "has_sig": false, "md5_digest": "a2d39d57378cc603724188aac0dec1a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6590, "upload_time": "2013-12-12T19:52:00", "upload_time_iso_8601": "2013-12-12T19:52:00.878962Z", "url": "https://files.pythonhosted.org/packages/71/34/7b0e44501b10bb36e27b1bcd541e9f23d86c98fa1e00c3365fbb4681c3a8/task.py-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:45 2020"}