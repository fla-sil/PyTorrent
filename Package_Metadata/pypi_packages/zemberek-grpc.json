{"info": {"author": "Ahmet A. Ak\u0131n, Mehmet D. Ak\u0131n", "author_email": "ahmetaa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Natural Language :: Turkish", "Operating System :: OS Independent", "Programming Language :: Java", "Programming Language :: Python", "Topic :: Text Processing"], "description": "# Zemberek gRPC\n\n__Latest version 0.16.0__\n\nZemberek-NLP provides some of its functions via a remote procedure call framework called gRPC. gRPC is a high performance, open-source universal RPC framework. Once Zemberek-NLP gRPC server is started, other applications can access remote services natively via automatically generated client libraries.\n\nhttps://github.com/ahmetaa/zemberek-nlp\n\n## Start gRPC server with docker\n\nYou can use it from directly in your computer or run with in docker container.\n\nhttps://hub.docker.com/r/ryts/zemberek-grpc\n\nRun with docker\n```\ndocker run -d --rm -p 6789:6789 --name zemberek-grpc ryts/zemberek-grpc\n```\n\nCheck logs\n```\ndocker logs -f zemberek-grpc\n```\n\n## Install library and example\n\n```shell\npip install zemberek-grpc\n```\n\nPython Client Example\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nimport grpc\n\nimport zemberek_grpc.language_id_pb2 as z_langid\nimport zemberek_grpc.language_id_pb2_grpc as z_langid_g\nimport zemberek_grpc.normalization_pb2 as z_normalization\nimport zemberek_grpc.normalization_pb2_grpc as z_normalization_g\nimport zemberek_grpc.preprocess_pb2 as z_preprocess\nimport zemberek_grpc.preprocess_pb2_grpc as z_preprocess_g\nimport zemberek_grpc.morphology_pb2 as z_morphology\nimport zemberek_grpc.morphology_pb2_grpc as z_morphology_g\n\nchannel = grpc.insecure_channel('localhost:6789')\n\nlangid_stub = z_langid_g.LanguageIdServiceStub(channel)\nnormalization_stub = z_normalization_g.NormalizationServiceStub(channel)\npreprocess_stub = z_preprocess_g.PreprocessingServiceStub(channel)\nmorphology_stub = z_morphology_g.MorphologyServiceStub(channel)\n\ndef find_lang_id(i):\n    response = langid_stub.Detect(z_langid.LanguageIdRequest(input=i))\n    return response.langId\n\ndef tokenize(i):\n    response = preprocess_stub.Tokenize(z_preprocess.TokenizationRequest(input=i))\n    return response.tokens\n\ndef normalize(i):\n    response = normalization_stub.Normalize(z_normalization.NormalizationRequest(input=i))\n    return response\n\ndef analyze(i):\n    response = morphology_stub.AnalyzeSentence(z_morphology.SentenceAnalysisRequest(input=i))\n    return response;\n\ndef fix_decode(text):\n    \"\"\"Pass decode.\"\"\"\n    if sys.version_info < (3, 0):\n        return text.decode('utf-8')\n    else:\n        return text\n\ndef run():\n    lang_detect_input = 'merhaba d\u00fcnya'\n    lang_id = find_lang_id(lang_detect_input)\n    print(\"Language of [\" + fix_decode(lang_detect_input) + \"] is: \" + lang_id)\n\n    print(\"\")\n    tokenization_input = 'Merhaba d\u00fcnya!'\n    print('Tokens for input : ' + fix_decode(tokenization_input))\n    tokens = tokenize(tokenization_input)\n    for t in tokens:\n        print(t.token + ':' + t.type)\n\n    print(\"\")\n    normalization_input = 'Mrhaba dnya'\n    print('Normalization result for input : ' + fix_decode(normalization_input))\n    n_response = normalize(normalization_input)\n    if n_response.normalized_input:\n        print(n_response.normalized_input)\n    else:\n        print('Problem normalizing input : ' + n_response.error)\n\n    print(\"\")\n    analysis_input = 'Kavanozun kapa\u011f\u0131n\u0131 a\u00e7amad\u0131m.'\n    print('Analysis result for input : ' + fix_decode(analysis_input))\n    analysis_result = analyze(analysis_input)\n    for a in analysis_result.results:\n        best = a.best\n        lemmas = \"\"\n        for l in best.lemmas:\n          lemmas = lemmas + \" \" + l\n        print(\"Word = \" + a.token + \", Lemmas = \" + lemmas + \", POS = [\" + best.pos + \"], Full Analysis = {\" + best.analysis + \"}\")\n\n\nif __name__ == '__main__':\n    run()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ahmetaa/zemberek-nlp", "keywords": "t\u00fcrk\u00e7e turkish language zemberek text", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "zemberek-grpc", "package_url": "https://pypi.org/project/zemberek-grpc/", "platform": "", "project_url": "https://pypi.org/project/zemberek-grpc/", "project_urls": {"Homepage": "https://github.com/ahmetaa/zemberek-nlp"}, "release_url": "https://pypi.org/project/zemberek-grpc/0.16.1/", "requires_dist": ["grpcio-tools", "grpcio", "googleapis-common-protos"], "requires_python": "", "summary": "Requests to Zemberek gRPC server", "version": "0.16.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Zemberek gRPC</h1>\n<p><strong>Latest version 0.16.0</strong></p>\n<p>Zemberek-NLP provides some of its functions via a remote procedure call framework called gRPC. gRPC is a high performance, open-source universal RPC framework. Once Zemberek-NLP gRPC server is started, other applications can access remote services natively via automatically generated client libraries.</p>\n<p><a href=\"https://github.com/ahmetaa/zemberek-nlp\" rel=\"nofollow\">https://github.com/ahmetaa/zemberek-nlp</a></p>\n<h2>Start gRPC server with docker</h2>\n<p>You can use it from directly in your computer or run with in docker container.</p>\n<p><a href=\"https://hub.docker.com/r/ryts/zemberek-grpc\" rel=\"nofollow\">https://hub.docker.com/r/ryts/zemberek-grpc</a></p>\n<p>Run with docker</p>\n<pre><code>docker run -d --rm -p 6789:6789 --name zemberek-grpc ryts/zemberek-grpc\n</code></pre>\n<p>Check logs</p>\n<pre><code>docker logs -f zemberek-grpc\n</code></pre>\n<h2>Install library and example</h2>\n<pre>pip install zemberek-grpc\n</pre>\n<p>Python Client Example</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"c1\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">grpc</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">zemberek_grpc.language_id_pb2</span> <span class=\"k\">as</span> <span class=\"nn\">z_langid</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zemberek_grpc.language_id_pb2_grpc</span> <span class=\"k\">as</span> <span class=\"nn\">z_langid_g</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zemberek_grpc.normalization_pb2</span> <span class=\"k\">as</span> <span class=\"nn\">z_normalization</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zemberek_grpc.normalization_pb2_grpc</span> <span class=\"k\">as</span> <span class=\"nn\">z_normalization_g</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zemberek_grpc.preprocess_pb2</span> <span class=\"k\">as</span> <span class=\"nn\">z_preprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zemberek_grpc.preprocess_pb2_grpc</span> <span class=\"k\">as</span> <span class=\"nn\">z_preprocess_g</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zemberek_grpc.morphology_pb2</span> <span class=\"k\">as</span> <span class=\"nn\">z_morphology</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zemberek_grpc.morphology_pb2_grpc</span> <span class=\"k\">as</span> <span class=\"nn\">z_morphology_g</span>\n\n<span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">insecure_channel</span><span class=\"p\">(</span><span class=\"s1\">'localhost:6789'</span><span class=\"p\">)</span>\n\n<span class=\"n\">langid_stub</span> <span class=\"o\">=</span> <span class=\"n\">z_langid_g</span><span class=\"o\">.</span><span class=\"n\">LanguageIdServiceStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n<span class=\"n\">normalization_stub</span> <span class=\"o\">=</span> <span class=\"n\">z_normalization_g</span><span class=\"o\">.</span><span class=\"n\">NormalizationServiceStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n<span class=\"n\">preprocess_stub</span> <span class=\"o\">=</span> <span class=\"n\">z_preprocess_g</span><span class=\"o\">.</span><span class=\"n\">PreprocessingServiceStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n<span class=\"n\">morphology_stub</span> <span class=\"o\">=</span> <span class=\"n\">z_morphology_g</span><span class=\"o\">.</span><span class=\"n\">MorphologyServiceStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_lang_id</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">langid_stub</span><span class=\"o\">.</span><span class=\"n\">Detect</span><span class=\"p\">(</span><span class=\"n\">z_langid</span><span class=\"o\">.</span><span class=\"n\">LanguageIdRequest</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">langId</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tokenize</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">preprocess_stub</span><span class=\"o\">.</span><span class=\"n\">Tokenize</span><span class=\"p\">(</span><span class=\"n\">z_preprocess</span><span class=\"o\">.</span><span class=\"n\">TokenizationRequest</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">tokens</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">normalize</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">normalization_stub</span><span class=\"o\">.</span><span class=\"n\">Normalize</span><span class=\"p\">(</span><span class=\"n\">z_normalization</span><span class=\"o\">.</span><span class=\"n\">NormalizationRequest</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">morphology_stub</span><span class=\"o\">.</span><span class=\"n\">AnalyzeSentence</span><span class=\"p\">(</span><span class=\"n\">z_morphology</span><span class=\"o\">.</span><span class=\"n\">SentenceAnalysisRequest</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">;</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fix_decode</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Pass decode.\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">text</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n    <span class=\"n\">lang_detect_input</span> <span class=\"o\">=</span> <span class=\"s1\">'merhaba d\u00fcnya'</span>\n    <span class=\"n\">lang_id</span> <span class=\"o\">=</span> <span class=\"n\">find_lang_id</span><span class=\"p\">(</span><span class=\"n\">lang_detect_input</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Language of [\"</span> <span class=\"o\">+</span> <span class=\"n\">fix_decode</span><span class=\"p\">(</span><span class=\"n\">lang_detect_input</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\"] is: \"</span> <span class=\"o\">+</span> <span class=\"n\">lang_id</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n    <span class=\"n\">tokenization_input</span> <span class=\"o\">=</span> <span class=\"s1\">'Merhaba d\u00fcnya!'</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Tokens for input : '</span> <span class=\"o\">+</span> <span class=\"n\">fix_decode</span><span class=\"p\">(</span><span class=\"n\">tokenization_input</span><span class=\"p\">))</span>\n    <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">tokenization_input</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">tokens</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">token</span> <span class=\"o\">+</span> <span class=\"s1\">':'</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n    <span class=\"n\">normalization_input</span> <span class=\"o\">=</span> <span class=\"s1\">'Mrhaba dnya'</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Normalization result for input : '</span> <span class=\"o\">+</span> <span class=\"n\">fix_decode</span><span class=\"p\">(</span><span class=\"n\">normalization_input</span><span class=\"p\">))</span>\n    <span class=\"n\">n_response</span> <span class=\"o\">=</span> <span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">normalization_input</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">n_response</span><span class=\"o\">.</span><span class=\"n\">normalized_input</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">n_response</span><span class=\"o\">.</span><span class=\"n\">normalized_input</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Problem normalizing input : '</span> <span class=\"o\">+</span> <span class=\"n\">n_response</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n    <span class=\"n\">analysis_input</span> <span class=\"o\">=</span> <span class=\"s1\">'Kavanozun kapa\u011f\u0131n\u0131 a\u00e7amad\u0131m.'</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Analysis result for input : '</span> <span class=\"o\">+</span> <span class=\"n\">fix_decode</span><span class=\"p\">(</span><span class=\"n\">analysis_input</span><span class=\"p\">))</span>\n    <span class=\"n\">analysis_result</span> <span class=\"o\">=</span> <span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">analysis_input</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">analysis_result</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">:</span>\n        <span class=\"n\">best</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">best</span>\n        <span class=\"n\">lemmas</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n        <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">lemmas</span><span class=\"p\">:</span>\n          <span class=\"n\">lemmas</span> <span class=\"o\">=</span> <span class=\"n\">lemmas</span> <span class=\"o\">+</span> <span class=\"s2\">\" \"</span> <span class=\"o\">+</span> <span class=\"n\">l</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Word = \"</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">token</span> <span class=\"o\">+</span> <span class=\"s2\">\", Lemmas = \"</span> <span class=\"o\">+</span> <span class=\"n\">lemmas</span> <span class=\"o\">+</span> <span class=\"s2\">\", POS = [\"</span> <span class=\"o\">+</span> <span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">pos</span> <span class=\"o\">+</span> <span class=\"s2\">\"], Full Analysis = {\"</span> <span class=\"o\">+</span> <span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">analysis</span> <span class=\"o\">+</span> <span class=\"s2\">\"}\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 4968522, "releases": {"0.16.0": [{"comment_text": "", "digests": {"md5": "075cb3cc343abecc7a4ecbbdb134ab8d", "sha256": "bdb650709c7b0f2a062c6f13d8c75e4b194a5fa1a9c1abb9a9d7224fad7d7b34"}, "downloads": -1, "filename": "zemberek_grpc-0.16.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "075cb3cc343abecc7a4ecbbdb134ab8d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11937, "upload_time": "2019-03-21T14:47:17", "upload_time_iso_8601": "2019-03-21T14:47:17.484575Z", "url": "https://files.pythonhosted.org/packages/16/4b/1bf6055af33eb2e7a8f7aa651a7df7ff90b052f1d8941b2737853122093a/zemberek_grpc-0.16.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ba6aac42c70c678f0abb856ef3c3baa", "sha256": "46e541547691bdd51402de446d022fff7c147e9c6d72b5365f300c73debffcfd"}, "downloads": -1, "filename": "zemberek_grpc-0.16.0.tar.gz", "has_sig": false, "md5_digest": "3ba6aac42c70c678f0abb856ef3c3baa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6586, "upload_time": "2019-03-21T14:47:19", "upload_time_iso_8601": "2019-03-21T14:47:19.794069Z", "url": "https://files.pythonhosted.org/packages/fc/f7/7ab7d87b07c09198d57c2ea5492b047755ba6876bb2933e09c13ec48094c/zemberek_grpc-0.16.0.tar.gz", "yanked": false}], "0.16.1": [{"comment_text": "", "digests": {"md5": "391986d6995ba3d7d292cb80a6d18766", "sha256": "6dee76201a45fecf8d94ef052eb53dae578ca92032e4a461bb8066dd78ff071f"}, "downloads": -1, "filename": "zemberek_grpc-0.16.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "391986d6995ba3d7d292cb80a6d18766", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13118, "upload_time": "2019-03-21T14:56:59", "upload_time_iso_8601": "2019-03-21T14:56:59.529324Z", "url": "https://files.pythonhosted.org/packages/12/5b/d0deebc56c4586e26c50a0b63697caa713045ed843b39b608fc46a182889/zemberek_grpc-0.16.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d545474318e3b2172fc1e71f6ed84d9", "sha256": "d0a46b1999009cc94465ee360497586d152984cdd25005428d64eb4448b669e3"}, "downloads": -1, "filename": "zemberek_grpc-0.16.1.tar.gz", "has_sig": false, "md5_digest": "6d545474318e3b2172fc1e71f6ed84d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9226, "upload_time": "2019-03-21T14:57:01", "upload_time_iso_8601": "2019-03-21T14:57:01.110782Z", "url": "https://files.pythonhosted.org/packages/d2/f1/98cde4f1beee119e811a93c795576d9244a303ffb5922ca7667aa688f1da/zemberek_grpc-0.16.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "391986d6995ba3d7d292cb80a6d18766", "sha256": "6dee76201a45fecf8d94ef052eb53dae578ca92032e4a461bb8066dd78ff071f"}, "downloads": -1, "filename": "zemberek_grpc-0.16.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "391986d6995ba3d7d292cb80a6d18766", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13118, "upload_time": "2019-03-21T14:56:59", "upload_time_iso_8601": "2019-03-21T14:56:59.529324Z", "url": "https://files.pythonhosted.org/packages/12/5b/d0deebc56c4586e26c50a0b63697caa713045ed843b39b608fc46a182889/zemberek_grpc-0.16.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d545474318e3b2172fc1e71f6ed84d9", "sha256": "d0a46b1999009cc94465ee360497586d152984cdd25005428d64eb4448b669e3"}, "downloads": -1, "filename": "zemberek_grpc-0.16.1.tar.gz", "has_sig": false, "md5_digest": "6d545474318e3b2172fc1e71f6ed84d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9226, "upload_time": "2019-03-21T14:57:01", "upload_time_iso_8601": "2019-03-21T14:57:01.110782Z", "url": "https://files.pythonhosted.org/packages/d2/f1/98cde4f1beee119e811a93c795576d9244a303ffb5922ca7667aa688f1da/zemberek_grpc-0.16.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:19 2020"}