{"info": {"author": "Jonathan Griffin", "author_email": "jgriffin@mozilla.com", "bugtrack_url": null, "classifiers": [], "description": "Introduction\n============\n\nGaiatest is a Python package based on\n[Marionette](https://developer.mozilla.org/en-US/docs/Marionette), which is\ndesigned specifically for writing tests against\n[Gaia](https://github.com/mozilla-b2g/gaia).\n\nPrerequisites\n=============\n\nYou will need a\n[Marionette enabled Firefox build](https://developer.mozilla.org/en-US/docs/Marionette/Builds)\nthat you can\n[successfully connect to](https://developer.mozilla.org/en-US/docs/Marionette/Connecting_to_B2G).\n\nInstallation\n============\n\nIf you only want to run the tests without developing gaia-ui-tests further:\n\n    pip install gaiatest\n\nor\n\n    easy_install gaiatest\n\nYou can now skip down to the \"Risks\" section.  On the other hand, if you want to\nmodify gaia-ui-tests, do this instead:\n\n    git clone https://github.com/mozilla-b2g/gaia.git\n\nThe next command will install several python packages on your system such as\nmarionette, gaiatest, and other Mozilla packages.  Before you run\n`python setup.py develop`, consider setting-up a virtual environment.  This is\nentirely optional.\n\n    virtualenv env_name\n    source env_name/bin/activate\n\nWith the virtual environment activated, the python packages will be installed\nunder the `env_name` folder instead of disturbing your main system.\n\nFinally, do:\n\n    cd gaia/tests/python/gaia-ui-tests\n    python setup.py develop\n\nRisks\n=====\n\nPlease visit\n[this page](https://developer.mozilla.org/en-US/docs/Gaia_Test_Runner)\nto understand and acknowledge the risks involved when running these tests.\nYou have to modify your testvars.json file (see the **Test Variables** section \nbelow,) showing your acknowledgement of the risks, to run the tests.\n\nCommand line interface\n======================\n\nA helpful command line tool is provided for interacting with Gaia. For full\nusage details run `gcli --help` and for help on a specific command use `gcli\n<command> --help`.\n\nFor example, to unlock the device, set brightness to 100%, connect to an\nunsecured network, and launch the Settings app:\n\n```bash\n$ gcli unlock\n$ gcli setsetting screen.brightness 1\n$ gcli connectwifi MozillaGuest\n$ gcli launchapp Settings\n```\n\nRunning Tests\n=============\n\nTo run tests using gaia test, your command-line will vary a little bit\ndepending on what device you're using.  The general format is:\n\n    gaiatest [options] /path/to/test_foo.py\n\nOptions:\n\n    --emulator arm --homedir /path/to/emulator:  use these options to\n        let Marionette launch an emulator for you in which to run a test\n    --address <host>:<port>  use this option to run a test on an emulator\n        which you've manually launched yourself, a real device, or a b2g\n        desktop build.  If you've used port forwarding as described below,\n        you'd specify --address localhost:2828\n    --testvars= (see the Test Variables section below)\n    --restart restart target instance between tests. This option will remove \n        the /data/local/indexedDB and /data/b2g/mozilla folders and restore the \n        device back to a common state\n    --timeout < time in milliseconds > to set all of the gaiatest and Marionette\n        timeout values to the specified value. Without this set, gaiatest will\n        try to detect the b2g instance and set safe timeouts for search, page\n        and script timeouts.\n\nTesting on a Device\n===================\n\nYou must run a build of B2G on the device that has Marionette enabled.\nThe easiest way to do that is to grab a nightly `eng` build, like\n[this one for Unagi](https://pvtbuilds.mozilla.org/pub/mozilla.org/b2g/nightly/mozilla-b2g18-unagi-eng/latest/)\n(currently it requires a Mozilla LDAP login). Flash that to your device.\n\nYou should not enable Remote Debugging manually on the device because\nthere will be competing debuggers. See\n[bug 764913](https://bugzilla.mozilla.org/show_bug.cgi?id=764913).\n\nIf you are running the tests on a device connected via ADB (Android Debug\nBridge), you must additionally set up port forwarding from the device to your\nlocal machine. You can do this by running the command:\n\n    adb forward tcp:2828 tcp:2828\n\nADB is available in emulator packages under out/host/linux\\_x86/bin.\nAlternatively, it may be downloaded as part of the\n[Android SDK](http://developer.android.com/sdk/index.html).\n\nTesting on Desktop build\n========================\n\nYou can download the latest build of the desktop client from\n[this location](http://ftp.mozilla.org/pub/mozilla.org/b2g/nightly/latest-mozilla-central),\nbut make sure you download the appropriate file for your operating system.\n\n* **Linux (32bit)**: b2g-[VERSION].multi.linux-i686.tar.bz2\n* **Linux (64bit)**: b2g-[VERSION].multi.linux-x86\\_64.tar.bz2\n* **Mac**: b2g-[VERSION].multi.mac64.dmg\n* **Windows**: b2g-[VERSION].multi.win32.zip\n\nOnce downloaded, you will need to extract the contents to a local folder.\n$B2G\\_HOME refers to the location of the local folder for the remainder of the\ndocumentation.\n\nIf a profile is specified when running the tests (recommended), a clone of the\nprofile will be used. This helps to ensure that all tests run in a clean state.\nHowever, if you also intend to launch and interact with the desktop build\nmanually, we recommend making a copy of the default profile and using the copy\nfor your tests.  The location of the default profile is $B2G\\_HOME/gaia/profile.\n\nTo run the tests, use the following command:\n\n    gaiatest --restart --type=b2g --app=b2gdesktop \\\n        --binary=$B2G_HOME/b2g-bin \\\n        --profile=$B2G_HOME/gaia/profile \\\n        --testvars=path/to/filename.json \\\n        gaia/tests/python/gaia-ui-tests/gaiatest/tests/manifest.ini \\\n\nYou should then start to see the tests running.  The next two sections provide\ndetails on the test types used in the `--type` option and the test variables for\nthe `--testvars` option respectively.\n\nTest Types\n==========\nTests can be filtered by type, and the types are defined in the manifest files.\nTests can belong to multiple types, some types imply others, and some are\nmutually exclusive - for example a test cannot be both 'online' and 'offline'\nbut a test that is 'lan' is by definition 'online'. Be warned that despite these\nrules, there is no error checking on types, so you must take care when assigning\nthem. Default types are set in the [DEFAULT] section of a manifest file, and are\ninherited by manifest files referenced by an include.\n\nHere is a list of the types used, and when to use them:\n\n* antenna - these tests require an antenna (headphones) to be connected.\n* b2g - this means the test is a B2G (Firefox OS) test. All tests must include\n  this type.\n* bluetooth - requires bluetooth to be available.\n* camera - these tests require use of a camera.\n* carrier - an active SIM card with carrier connection is required.\n* flash - these tests require use of a flash.\n* lan - a local area connection (not cell data) is required by these tests (see\n  note below).\n* offline - specifically requires no online connection.\n* online - some sort of online connection (lan or carrier) is required.\n* qemu - these tests require the Firefox OS emulator to run.\n* sdcard - a storage device must be present.\n* wifi - this means a WiFi connection is required.\n\nYou may be thinking that there is only WiFi or cell data, and why the need for\nthe 'lan' test type. Well, these tests aren't only run on mobile devices... We\nalso run then on single-board computers known as\n[pandaboards](https://en.wikipedia.org/wiki/Panda_Board), which have an ethernet\nport, and on desktop builds, which share the host computer's connection. It is\nfor this reason that we need 'lan' to indicate a connection that is not cell\ndata. For an example of where online/lan/carrier are used take a look at the\nbrowser tests.\n\nTest Variables\n==============\nWe use the --testvars option to pass in local variables, particularly those that\ncannot be checked into the repository. For example in gaia-ui-tests these\nvariables can be your private login credentials, phone number or details of your\nWiFi connection.\n\nTo use it, copy\n`gaia/tests/python/gaia-ui-tests/gaiatest/testvars_template.json` to a different\nfilename but add it into .gitignore so you don't check it into your repository.\n\nWhen running your tests add the argument:\n    --testvars=(filename).json\n\nVariables:\n\n`\"carrier\": {} (dict)` The carrier information of the test phone. This contains\nthe phone number, country and network of the SIM card.\n\n```json\n\"carrier\":{\n  \"phone_number\": \"\",\n  \"country\": \"\",\n  \"network\": \"\"\n}\n```\n`\"imei\": \"\" (string)` The 12 digit IMEI code of the test phone.\n`\"remote_phone_number\": \"\" (string)` A phone number that your device can call\nduring the tests (try not to be a nuisance!). Prefix the number with '+' and\nyour international dialing code.\n`\"wifi\":{}{ (dict)` This are the settings of your WiFi connection. Currently\nthis supports WPA/WEP/etc. You can add WiFi networks by doing the following\n(remember to replace \"KeyManagement\" and \"wep\" with the value your network\nsupports) :\n\n```json\n\"wifi\": {\n  \"ssid\": \"MyNetwork\",\n  \"keyManagement\": \"WEP\",\n  \"wep\": \"MyPassword\"\n}\n```\n\nWPA-PSK:\n```json\n\"wifi\": {\n  \"ssid\": \"MyNetwork\",\n  \"keyManagement\": \"WPA-PSK\",\n  \"psk\": \"MyPassword\"\n}\n```\n__Note__: Due to [Bug 775499](http://bugzil.la/775499), WiFi connections via\nWPA-EAP are not capable at this time.\n\n`\"email\": {} (dict)` The email login information used by the email tests. It can\ncontain different types of email accounts:\n\nGmail:\n```json\n\"gmail\": {\n  \"name\": \"\",\n  \"email\": \"\",\n  \"password\": \"\"\n    }\n```\n\nOr different email protocols:\n```json\n\"IMAP\": {\n  \"name\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"imap_hostname\": \"\",\n  \"imap_name\": \"\",\n  \"imap_port\": \"\",\n  \"smtp_hostname\": \"\",\n  \"smtp_name\": \"\",\n  \"smtp_port\": \"\"\n}\n```\nOr:\n```json\n\"ActiveSync\":{\n  \"name\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"active_sync_hostname\": \"\",\n  \"active_sync_username\": \"\"\n}\n```\n`\"settings\": {} (dict)` Custom settings to override the Gaia default settings.\nThese will be set before each test run but are not mandatory.\n```json\n\"settings\":{\n  \"<setting>\":<value>\n}\"\n```\n__Note__: When running with no SIM card or offline the timezone may not be automatically updated to match the local timezone. In that case you may need to force the timezone to match the desired timezone using settings in testvars.json which will set it during the test setUp:\n\n```json\n\"settings\":{\n  \"time.timezone\": <value>,\n  \"time.timezone.user-selected\": <value>\n}\"\n```\n\n\n`\"prefs\": {} (dict)` Custom preferences  to override the Gecko default preferences.\nThese will be set before each test run but are not mandatory.\n```json\n\"prefs\":{\n  \"<name>\":<value>\n}\"\n```\n\nDon't forget to acknowledged risks in your testvars file after you have visited\n[the Risks page](https://developer.mozilla.org/en-US/docs/Gaia_Test_Runner) to\nunderstand and acknowledge the risks involved when running these tests, or the\ntests will not be run.\n\nTest data Prerequisites\n=======================\n\nOccasionally a test will need data on the hardware that cannot be set during the\ntest setUp.  The following tests need data set up before they can be run\nsuccessfully:\n\n`test_ftu` Requires a single record/contact saved onto the SIM card to test the\nSIM contact import\n\n\nWriting Tests\n=============\n\nTest writing for Marionette Python tests is described at\nhttps://developer.mozilla.org/en-US/docs/Marionette/Marionette_Python_Tests.\n\nAdditionally, gaiatest exposes some API's for managing Gaia's lockscreen and\napplication manager.  See\nhttps://github.com/mozilla-b2g/gaia/blob/master/tests/python/gaiatest/gaia_test.py.\n\nAt the moment we don't have a specific style guide. Please follow the\nprevailing style of the existing tests. Use them as a template for writing\nyour tests.\nWe follow [PEP8](http://www.python.org/dev/peps/pep-0008/) for formatting,\nalthough we're pretty lenient on the 80-character line length.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://developer.mozilla.org/en-US/docs/Marionette", "keywords": "mozilla", "license": "MPL", "maintainer": null, "maintainer_email": null, "name": "gaiatest-v2.0", "package_url": "https://pypi.org/project/gaiatest-v2.0/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gaiatest-v2.0/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://developer.mozilla.org/en-US/docs/Marionette"}, "release_url": "https://pypi.org/project/gaiatest-v2.0/0.4/", "requires_dist": null, "requires_python": null, "summary": "Marionette test automation client for Gaia", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            Introduction<br>============<br><br>Gaiatest is a Python package based on<br>[Marionette](https://developer.mozilla.org/en-US/docs/Marionette), which is<br>designed specifically for writing tests against<br>[Gaia](https://github.com/mozilla-b2g/gaia).<br><br>Prerequisites<br>=============<br><br>You will need a<br>[Marionette enabled Firefox build](https://developer.mozilla.org/en-US/docs/Marionette/Builds)<br>that you can<br>[successfully connect to](https://developer.mozilla.org/en-US/docs/Marionette/Connecting_to_B2G).<br><br>Installation<br>============<br><br>If you only want to run the tests without developing gaia-ui-tests further:<br><br>    pip install gaiatest<br><br>or<br><br>    easy_install gaiatest<br><br>You can now skip down to the \"Risks\" section.  On the other hand, if you want to<br>modify gaia-ui-tests, do this instead:<br><br>    git clone https://github.com/mozilla-b2g/gaia.git<br><br>The next command will install several python packages on your system such as<br>marionette, gaiatest, and other Mozilla packages.  Before you run<br>`python setup.py develop`, consider setting-up a virtual environment.  This is<br>entirely optional.<br><br>    virtualenv env_name<br>    source env_name/bin/activate<br><br>With the virtual environment activated, the python packages will be installed<br>under the `env_name` folder instead of disturbing your main system.<br><br>Finally, do:<br><br>    cd gaia/tests/python/gaia-ui-tests<br>    python setup.py develop<br><br>Risks<br>=====<br><br>Please visit<br>[this page](https://developer.mozilla.org/en-US/docs/Gaia_Test_Runner)<br>to understand and acknowledge the risks involved when running these tests.<br>You have to modify your testvars.json file (see the **Test Variables** section <br>below,) showing your acknowledgement of the risks, to run the tests.<br><br>Command line interface<br>======================<br><br>A helpful command line tool is provided for interacting with Gaia. For full<br>usage details run `gcli --help` and for help on a specific command use `gcli<br>&lt;command&gt; --help`.<br><br>For example, to unlock the device, set brightness to 100%, connect to an<br>unsecured network, and launch the Settings app:<br><br>```bash<br>$ gcli unlock<br>$ gcli setsetting screen.brightness 1<br>$ gcli connectwifi MozillaGuest<br>$ gcli launchapp Settings<br>```<br><br>Running Tests<br>=============<br><br>To run tests using gaia test, your command-line will vary a little bit<br>depending on what device you're using.  The general format is:<br><br>    gaiatest [options] /path/to/test_foo.py<br><br>Options:<br><br>    --emulator arm --homedir /path/to/emulator:  use these options to<br>        let Marionette launch an emulator for you in which to run a test<br>    --address &lt;host&gt;:&lt;port&gt;  use this option to run a test on an emulator<br>        which you've manually launched yourself, a real device, or a b2g<br>        desktop build.  If you've used port forwarding as described below,<br>        you'd specify --address localhost:2828<br>    --testvars= (see the Test Variables section below)<br>    --restart restart target instance between tests. This option will remove <br>        the /data/local/indexedDB and /data/b2g/mozilla folders and restore the <br>        device back to a common state<br>    --timeout &lt; time in milliseconds &gt; to set all of the gaiatest and Marionette<br>        timeout values to the specified value. Without this set, gaiatest will<br>        try to detect the b2g instance and set safe timeouts for search, page<br>        and script timeouts.<br><br>Testing on a Device<br>===================<br><br>You must run a build of B2G on the device that has Marionette enabled.<br>The easiest way to do that is to grab a nightly `eng` build, like<br>[this one for Unagi](https://pvtbuilds.mozilla.org/pub/mozilla.org/b2g/nightly/mozilla-b2g18-unagi-eng/latest/)<br>(currently it requires a Mozilla LDAP login). Flash that to your device.<br><br>You should not enable Remote Debugging manually on the device because<br>there will be competing debuggers. See<br>[bug 764913](https://bugzilla.mozilla.org/show_bug.cgi?id=764913).<br><br>If you are running the tests on a device connected via ADB (Android Debug<br>Bridge), you must additionally set up port forwarding from the device to your<br>local machine. You can do this by running the command:<br><br>    adb forward tcp:2828 tcp:2828<br><br>ADB is available in emulator packages under out/host/linux\\_x86/bin.<br>Alternatively, it may be downloaded as part of the<br>[Android SDK](http://developer.android.com/sdk/index.html).<br><br>Testing on Desktop build<br>========================<br><br>You can download the latest build of the desktop client from<br>[this location](http://ftp.mozilla.org/pub/mozilla.org/b2g/nightly/latest-mozilla-central),<br>but make sure you download the appropriate file for your operating system.<br><br>* **Linux (32bit)**: b2g-[VERSION].multi.linux-i686.tar.bz2<br>* **Linux (64bit)**: b2g-[VERSION].multi.linux-x86\\_64.tar.bz2<br>* **Mac**: b2g-[VERSION].multi.mac64.dmg<br>* **Windows**: b2g-[VERSION].multi.win32.zip<br><br>Once downloaded, you will need to extract the contents to a local folder.<br>$B2G\\_HOME refers to the location of the local folder for the remainder of the<br>documentation.<br><br>If a profile is specified when running the tests (recommended), a clone of the<br>profile will be used. This helps to ensure that all tests run in a clean state.<br>However, if you also intend to launch and interact with the desktop build<br>manually, we recommend making a copy of the default profile and using the copy<br>for your tests.  The location of the default profile is $B2G\\_HOME/gaia/profile.<br><br>To run the tests, use the following command:<br><br>    gaiatest --restart --type=b2g --app=b2gdesktop \\<br>        --binary=$B2G_HOME/b2g-bin \\<br>        --profile=$B2G_HOME/gaia/profile \\<br>        --testvars=path/to/filename.json \\<br>        gaia/tests/python/gaia-ui-tests/gaiatest/tests/manifest.ini \\<br><br>You should then start to see the tests running.  The next two sections provide<br>details on the test types used in the `--type` option and the test variables for<br>the `--testvars` option respectively.<br><br>Test Types<br>==========<br>Tests can be filtered by type, and the types are defined in the manifest files.<br>Tests can belong to multiple types, some types imply others, and some are<br>mutually exclusive - for example a test cannot be both 'online' and 'offline'<br>but a test that is 'lan' is by definition 'online'. Be warned that despite these<br>rules, there is no error checking on types, so you must take care when assigning<br>them. Default types are set in the [DEFAULT] section of a manifest file, and are<br>inherited by manifest files referenced by an include.<br><br>Here is a list of the types used, and when to use them:<br><br>* antenna - these tests require an antenna (headphones) to be connected.<br>* b2g - this means the test is a B2G (Firefox OS) test. All tests must include<br>  this type.<br>* bluetooth - requires bluetooth to be available.<br>* camera - these tests require use of a camera.<br>* carrier - an active SIM card with carrier connection is required.<br>* flash - these tests require use of a flash.<br>* lan - a local area connection (not cell data) is required by these tests (see<br>  note below).<br>* offline - specifically requires no online connection.<br>* online - some sort of online connection (lan or carrier) is required.<br>* qemu - these tests require the Firefox OS emulator to run.<br>* sdcard - a storage device must be present.<br>* wifi - this means a WiFi connection is required.<br><br>You may be thinking that there is only WiFi or cell data, and why the need for<br>the 'lan' test type. Well, these tests aren't only run on mobile devices... We<br>also run then on single-board computers known as<br>[pandaboards](https://en.wikipedia.org/wiki/Panda_Board), which have an ethernet<br>port, and on desktop builds, which share the host computer's connection. It is<br>for this reason that we need 'lan' to indicate a connection that is not cell<br>data. For an example of where online/lan/carrier are used take a look at the<br>browser tests.<br><br>Test Variables<br>==============<br>We use the --testvars option to pass in local variables, particularly those that<br>cannot be checked into the repository. For example in gaia-ui-tests these<br>variables can be your private login credentials, phone number or details of your<br>WiFi connection.<br><br>To use it, copy<br>`gaia/tests/python/gaia-ui-tests/gaiatest/testvars_template.json` to a different<br>filename but add it into .gitignore so you don't check it into your repository.<br><br>When running your tests add the argument:<br>    --testvars=(filename).json<br><br>Variables:<br><br>`\"carrier\": {} (dict)` The carrier information of the test phone. This contains<br>the phone number, country and network of the SIM card.<br><br>```json<br>\"carrier\":{<br>  \"phone_number\": \"\",<br>  \"country\": \"\",<br>  \"network\": \"\"<br>}<br>```<br>`\"imei\": \"\" (string)` The 12 digit IMEI code of the test phone.<br>`\"remote_phone_number\": \"\" (string)` A phone number that your device can call<br>during the tests (try not to be a nuisance!). Prefix the number with '+' and<br>your international dialing code.<br>`\"wifi\":{}{ (dict)` This are the settings of your WiFi connection. Currently<br>this supports WPA/WEP/etc. You can add WiFi networks by doing the following<br>(remember to replace \"KeyManagement\" and \"wep\" with the value your network<br>supports) :<br><br>```json<br>\"wifi\": {<br>  \"ssid\": \"MyNetwork\",<br>  \"keyManagement\": \"WEP\",<br>  \"wep\": \"MyPassword\"<br>}<br>```<br><br>WPA-PSK:<br>```json<br>\"wifi\": {<br>  \"ssid\": \"MyNetwork\",<br>  \"keyManagement\": \"WPA-PSK\",<br>  \"psk\": \"MyPassword\"<br>}<br>```<br>__Note__: Due to [Bug 775499](http://bugzil.la/775499), WiFi connections via<br>WPA-EAP are not capable at this time.<br><br>`\"email\": {} (dict)` The email login information used by the email tests. It can<br>contain different types of email accounts:<br><br>Gmail:<br>```json<br>\"gmail\": {<br>  \"name\": \"\",<br>  \"email\": \"\",<br>  \"password\": \"\"<br>    }<br>```<br><br>Or different email protocols:<br>```json<br>\"IMAP\": {<br>  \"name\": \"\",<br>  \"email\": \"\",<br>  \"password\": \"\",<br>  \"imap_hostname\": \"\",<br>  \"imap_name\": \"\",<br>  \"imap_port\": \"\",<br>  \"smtp_hostname\": \"\",<br>  \"smtp_name\": \"\",<br>  \"smtp_port\": \"\"<br>}<br>```<br>Or:<br>```json<br>\"ActiveSync\":{<br>  \"name\": \"\",<br>  \"email\": \"\",<br>  \"password\": \"\",<br>  \"active_sync_hostname\": \"\",<br>  \"active_sync_username\": \"\"<br>}<br>```<br>`\"settings\": {} (dict)` Custom settings to override the Gaia default settings.<br>These will be set before each test run but are not mandatory.<br>```json<br>\"settings\":{<br>  \"&lt;setting&gt;\":&lt;value&gt;<br>}\"<br>```<br>__Note__: When running with no SIM card or offline the timezone may not be automatically updated to match the local timezone. In that case you may need to force the timezone to match the desired timezone using settings in testvars.json which will set it during the test setUp:<br><br>```json<br>\"settings\":{<br>  \"time.timezone\": &lt;value&gt;,<br>  \"time.timezone.user-selected\": &lt;value&gt;<br>}\"<br>```<br><br><br>`\"prefs\": {} (dict)` Custom preferences  to override the Gecko default preferences.<br>These will be set before each test run but are not mandatory.<br>```json<br>\"prefs\":{<br>  \"&lt;name&gt;\":&lt;value&gt;<br>}\"<br>```<br><br>Don't forget to acknowledged risks in your testvars file after you have visited<br>[the Risks page](https://developer.mozilla.org/en-US/docs/Gaia_Test_Runner) to<br>understand and acknowledge the risks involved when running these tests, or the<br>tests will not be run.<br><br>Test data Prerequisites<br>=======================<br><br>Occasionally a test will need data on the hardware that cannot be set during the<br>test setUp.  The following tests need data set up before they can be run<br>successfully:<br><br>`test_ftu` Requires a single record/contact saved onto the SIM card to test the<br>SIM contact import<br><br><br>Writing Tests<br>=============<br><br>Test writing for Marionette Python tests is described at<br>https://developer.mozilla.org/en-US/docs/Marionette/Marionette_Python_Tests.<br><br>Additionally, gaiatest exposes some API's for managing Gaia's lockscreen and<br>application manager.  See<br>https://github.com/mozilla-b2g/gaia/blob/master/tests/python/gaiatest/gaia_test.py.<br><br>At the moment we don't have a specific style guide. Please follow the<br>prevailing style of the existing tests. Use them as a template for writing<br>your tests.<br>We follow [PEP8](http://www.python.org/dev/peps/pep-0008/) for formatting,<br>although we're pretty lenient on the 80-character line length.\n          </div>"}, "last_serial": 2125087, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cb781deeb95d95543b85e57ff4dfead6", "sha256": "11e67ef9d78023afa62c97e0246c0086ac16fea6b9017a7984b2de4885ef12c8"}, "downloads": -1, "filename": "gaiatest-v2.0-0.1.tar.gz", "has_sig": false, "md5_digest": "cb781deeb95d95543b85e57ff4dfead6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2857548, "upload_time": "2014-07-30T13:09:56", "upload_time_iso_8601": "2014-07-30T13:09:56.862655Z", "url": "https://files.pythonhosted.org/packages/c0/7f/ad123d0c8eb8be0f07840e66b3e4e3f61dbba19b4873eede9564c94150bc/gaiatest-v2.0-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "544b29ae04ab9f7816ed1064236f0cff", "sha256": "fb82616d48c2f75d8aef5425adb4db20f396a855af7f7a2c411bd584d7ee3e83"}, "downloads": -1, "filename": "gaiatest-v2.0-0.2.tar.gz", "has_sig": false, "md5_digest": "544b29ae04ab9f7816ed1064236f0cff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2857529, "upload_time": "2014-07-31T11:02:48", "upload_time_iso_8601": "2014-07-31T11:02:48.570885Z", "url": "https://files.pythonhosted.org/packages/0b/3e/6d17bbe7299a3ad88bd8eac9e6b2354873ef705dff66c4e4dcf9ee784d74/gaiatest-v2.0-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "42828324ac0a275d17867a1528958a32", "sha256": "efb5e744dcb85d33f3ec1e78b199be301fe299e4a56bc0f584a8eb024f349fcb"}, "downloads": -1, "filename": "gaiatest-v2.0-0.3.tar.gz", "has_sig": false, "md5_digest": "42828324ac0a275d17867a1528958a32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2857989, "upload_time": "2014-10-06T11:22:56", "upload_time_iso_8601": "2014-10-06T11:22:56.120857Z", "url": "https://files.pythonhosted.org/packages/44/4b/396760f4c8458f711e054fac6afc2e5a22aa4c1a157872d2f63823ac7057/gaiatest-v2.0-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "338ea9ab135ffaadeeb0c8fe86260589", "sha256": "774a2b328153a404ad47236507361f4aef5449f3c2d116d5d5c7d6b4dbdc8862"}, "downloads": -1, "filename": "gaiatest-v2.0-0.4.tar.gz", "has_sig": false, "md5_digest": "338ea9ab135ffaadeeb0c8fe86260589", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2858076, "upload_time": "2014-12-16T09:39:55", "upload_time_iso_8601": "2014-12-16T09:39:55.065204Z", "url": "https://files.pythonhosted.org/packages/73/db/2134c561bbbc95dbc0b505e10a8311e4b2a32ff02c384d5ae93105b3b1e8/gaiatest-v2.0-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "338ea9ab135ffaadeeb0c8fe86260589", "sha256": "774a2b328153a404ad47236507361f4aef5449f3c2d116d5d5c7d6b4dbdc8862"}, "downloads": -1, "filename": "gaiatest-v2.0-0.4.tar.gz", "has_sig": false, "md5_digest": "338ea9ab135ffaadeeb0c8fe86260589", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2858076, "upload_time": "2014-12-16T09:39:55", "upload_time_iso_8601": "2014-12-16T09:39:55.065204Z", "url": "https://files.pythonhosted.org/packages/73/db/2134c561bbbc95dbc0b505e10a8311e4b2a32ff02c384d5ae93105b3b1e8/gaiatest-v2.0-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:20 2020"}