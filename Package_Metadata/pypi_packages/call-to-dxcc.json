{"info": {"author": "Andreas Kr\u00fcger (DJ3EI)", "author_email": "dj3ei@famsik.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Communications :: Ham Radio"], "description": "# Find DXCC from call sign.\n\nFor radio amateur purposes, the land on the earth's surfaces has been\ncompartmentalized into \"DXCC regions\".  Given a radio amateur's\nofficially assigned call sign, it is possible to find out to which\nDXCC region that call sign belongs.  This is what this software does.\n\nOr, more precisely, strives to do.  Read on.\n\n## Legal situation: Owned by ARRL\n\nBut before explaining the known bugs, let me touch another\nunpleasent subject: The legal situation.\n\nThe list of all DXCC regions is under ARRL copyright.  It can be\ndownloaded from the ARRL web page, but I have no license to\nredistribute this material.  See the ARRL [publication on\ncopyright](http://www.arrl.org/copyright) to learn more.\n\nI'm not a layer, but my impression is that the ARRL, through its\npertinent [page](http://www.arrl.org/country-lists-prefixes), allows\npersonal use without obtaining (further) permission of the copyrighted\nlist of all DXCC regions.\n\nSo, if you figured out a way to be allowed to use the ARRL list, I'm\nentitled to provide software to you that helps you do that.  (I\nactually asked the ARRL to make sure.)\n\nThis is that software.  It will download the DXCC list (as a text\nfile) from the ARRL web site on first use, to the current directory,\nand use the copy thus obtained from there on to analyze callsigns\nyou feed it.\n\n## Limitations\n\nThat ARRL list is an unwieldly beast to be tamed.  The list's format\nis not well specified (I wish they had used regular expressions), so\nit's some guesswork.\n\nNow I'm not much of a DXer myself, which does not really help.  So\nthere are some details in the DXCC list which I do not presently\nunderstand.\n\nFor starters, I do not understand which call signs belong to \"Spratly\nIs.\".\n\nAlso, I do not know how to distinguish which \"CE9\"-calls belong to\nAntarctica and which to South Shetland.  So this software lumps all\n\"CE9\" to South Shetland.\n\nOther notes I do not understand:\n\n* FT/G,TO for Glorioso Is.\n* FT/J,E,TO for Juan de Nova, Europa\n* FT/T,TO for Tromelin I.\n* FT/W for Crozet I.\n* FT/X for Kerguelen Is.\n* FT/Z for Amsterdam & St. Paul Is.\n* R1/F for Franz Josef Land\n* SV/A for Mount Athos\n\n## Present limitations\n\nHere is what is presently implemented, even some of this\nis clearly incorrect:\n\n* All calls starting with \"FT\" belong to France in\nEurope.\n\n* All SV calls belong to Greece.\n\n* All KC0, .. KC3 and KC5 .. KC9 calls belong to USA / NA.\n\n* (The \",\" after T8 is considered a typo.)\n\n* 4U_ITU is meant to represent 4U0ITU through 4UZITU.\n\n* 4U_UN is meant to represent 4U0UN through 4UZUN\n\n* R1 through R7 and RA1 through RZ7 belong where UA1 through UA7 go.\n\n* R8, R9, R0 and RA8 through RZ0 all belong where UA8 though UA0 go.\n\n* PP0-PY0F and PP0-PY0S and PP0-PY0T are not comprehensible for me\n  right now, so they are lumped with plain Brazil.\n\nStuff collected elsewhere, with a decent dose of guesswork thrown in:\n\n* CT8 and CR2Y - calls belong to the Azores in EU, DXCC 149\n\n* CR3 and CT9 - calls belong to Madeira in AF, DXCC 256\n\n* TM - calls belong to France in EU, DXCC 227\n\n* 3Z - calls belong to Poland in EU, DXCC 269\n\n* 4U1A belongs to the United Nations in Vienna, EU, DXCC 117\n\nIf I find time, I may try to clean up this mess.  In the meantime,\nif you have better information, tell me.\n\n## Example usage\n\n```\nimport call_to_dxcc\n\ncountry, continent, dxcc_number = call_to_dxcc.data_for_call(\"DJ3EI\")\n```\n\nThe `import` will download the DXCC list to the working directory,\nunless that file is already present there.  It will use the\ninformation from that file.\n\nYou can then ask for data for an amateur radio call sign.  In the\nexample given above, `country` will contain \"Federal Republic of\nGermany\", `continent` will contain \"EU\", and `dxcc_number` will\ncontain the number 230.\n\nIf you want to proceed when the DXCC for a callsign cannot be found,\ncatch `call_to_dxcc.DxccUnknownException`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/andreas_krueger_py/call_to_dxcc", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "call-to-dxcc", "package_url": "https://pypi.org/project/call-to-dxcc/", "platform": "", "project_url": "https://pypi.org/project/call-to-dxcc/", "project_urls": {"Homepage": "https://gitlab.com/andreas_krueger_py/call_to_dxcc"}, "release_url": "https://pypi.org/project/call-to-dxcc/0.0.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Finds DXCC entry for given amateur callsign.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Find DXCC from call sign.</h1>\n<p>For radio amateur purposes, the land on the earth's surfaces has been\ncompartmentalized into \"DXCC regions\".  Given a radio amateur's\nofficially assigned call sign, it is possible to find out to which\nDXCC region that call sign belongs.  This is what this software does.</p>\n<p>Or, more precisely, strives to do.  Read on.</p>\n<h2>Legal situation: Owned by ARRL</h2>\n<p>But before explaining the known bugs, let me touch another\nunpleasent subject: The legal situation.</p>\n<p>The list of all DXCC regions is under ARRL copyright.  It can be\ndownloaded from the ARRL web page, but I have no license to\nredistribute this material.  See the ARRL <a href=\"http://www.arrl.org/copyright\" rel=\"nofollow\">publication on\ncopyright</a> to learn more.</p>\n<p>I'm not a layer, but my impression is that the ARRL, through its\npertinent <a href=\"http://www.arrl.org/country-lists-prefixes\" rel=\"nofollow\">page</a>, allows\npersonal use without obtaining (further) permission of the copyrighted\nlist of all DXCC regions.</p>\n<p>So, if you figured out a way to be allowed to use the ARRL list, I'm\nentitled to provide software to you that helps you do that.  (I\nactually asked the ARRL to make sure.)</p>\n<p>This is that software.  It will download the DXCC list (as a text\nfile) from the ARRL web site on first use, to the current directory,\nand use the copy thus obtained from there on to analyze callsigns\nyou feed it.</p>\n<h2>Limitations</h2>\n<p>That ARRL list is an unwieldly beast to be tamed.  The list's format\nis not well specified (I wish they had used regular expressions), so\nit's some guesswork.</p>\n<p>Now I'm not much of a DXer myself, which does not really help.  So\nthere are some details in the DXCC list which I do not presently\nunderstand.</p>\n<p>For starters, I do not understand which call signs belong to \"Spratly\nIs.\".</p>\n<p>Also, I do not know how to distinguish which \"CE9\"-calls belong to\nAntarctica and which to South Shetland.  So this software lumps all\n\"CE9\" to South Shetland.</p>\n<p>Other notes I do not understand:</p>\n<ul>\n<li>FT/G,TO for Glorioso Is.</li>\n<li>FT/J,E,TO for Juan de Nova, Europa</li>\n<li>FT/T,TO for Tromelin I.</li>\n<li>FT/W for Crozet I.</li>\n<li>FT/X for Kerguelen Is.</li>\n<li>FT/Z for Amsterdam &amp; St. Paul Is.</li>\n<li>R1/F for Franz Josef Land</li>\n<li>SV/A for Mount Athos</li>\n</ul>\n<h2>Present limitations</h2>\n<p>Here is what is presently implemented, even some of this\nis clearly incorrect:</p>\n<ul>\n<li>\n<p>All calls starting with \"FT\" belong to France in\nEurope.</p>\n</li>\n<li>\n<p>All SV calls belong to Greece.</p>\n</li>\n<li>\n<p>All KC0, .. KC3 and KC5 .. KC9 calls belong to USA / NA.</p>\n</li>\n<li>\n<p>(The \",\" after T8 is considered a typo.)</p>\n</li>\n<li>\n<p>4U_ITU is meant to represent 4U0ITU through 4UZITU.</p>\n</li>\n<li>\n<p>4U_UN is meant to represent 4U0UN through 4UZUN</p>\n</li>\n<li>\n<p>R1 through R7 and RA1 through RZ7 belong where UA1 through UA7 go.</p>\n</li>\n<li>\n<p>R8, R9, R0 and RA8 through RZ0 all belong where UA8 though UA0 go.</p>\n</li>\n<li>\n<p>PP0-PY0F and PP0-PY0S and PP0-PY0T are not comprehensible for me\nright now, so they are lumped with plain Brazil.</p>\n</li>\n</ul>\n<p>Stuff collected elsewhere, with a decent dose of guesswork thrown in:</p>\n<ul>\n<li>\n<p>CT8 and CR2Y - calls belong to the Azores in EU, DXCC 149</p>\n</li>\n<li>\n<p>CR3 and CT9 - calls belong to Madeira in AF, DXCC 256</p>\n</li>\n<li>\n<p>TM - calls belong to France in EU, DXCC 227</p>\n</li>\n<li>\n<p>3Z - calls belong to Poland in EU, DXCC 269</p>\n</li>\n<li>\n<p>4U1A belongs to the United Nations in Vienna, EU, DXCC 117</p>\n</li>\n</ul>\n<p>If I find time, I may try to clean up this mess.  In the meantime,\nif you have better information, tell me.</p>\n<h2>Example usage</h2>\n<pre><code>import call_to_dxcc\n\ncountry, continent, dxcc_number = call_to_dxcc.data_for_call(\"DJ3EI\")\n</code></pre>\n<p>The <code>import</code> will download the DXCC list to the working directory,\nunless that file is already present there.  It will use the\ninformation from that file.</p>\n<p>You can then ask for data for an amateur radio call sign.  In the\nexample given above, <code>country</code> will contain \"Federal Republic of\nGermany\", <code>continent</code> will contain \"EU\", and <code>dxcc_number</code> will\ncontain the number 230.</p>\n<p>If you want to proceed when the DXCC for a callsign cannot be found,\ncatch <code>call_to_dxcc.DxccUnknownException</code>.</p>\n\n          </div>"}, "last_serial": 6111782, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "943c1085d3f4492faed953febcbd1c30", "sha256": "17edac8ec98c713f1e0e09a4a528a33149483c3d9510ff77b51cca6aca7eb872"}, "downloads": -1, "filename": "call_to_dxcc-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "943c1085d3f4492faed953febcbd1c30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10481, "upload_time": "2019-11-10T14:24:54", "upload_time_iso_8601": "2019-11-10T14:24:54.905025Z", "url": "https://files.pythonhosted.org/packages/b3/dd/102aefc8e326514b1b97f43b61f3d1a3824b6e6b7a5ed2f4ac7035a11486/call_to_dxcc-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "539428c9c3394d46c6475bfc3aa67242", "sha256": "1dc9c6f5f96ab6d7b3180a200b4827201cf70ceeec4eeff04451e893a6af5a2f"}, "downloads": -1, "filename": "call_to_dxcc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "539428c9c3394d46c6475bfc3aa67242", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5935, "upload_time": "2019-11-10T14:24:56", "upload_time_iso_8601": "2019-11-10T14:24:56.851714Z", "url": "https://files.pythonhosted.org/packages/8f/19/35f29941e943238c3bddb67ae0d2c5a23ce766e3a82b4de927647a0a60d0/call_to_dxcc-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "943c1085d3f4492faed953febcbd1c30", "sha256": "17edac8ec98c713f1e0e09a4a528a33149483c3d9510ff77b51cca6aca7eb872"}, "downloads": -1, "filename": "call_to_dxcc-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "943c1085d3f4492faed953febcbd1c30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10481, "upload_time": "2019-11-10T14:24:54", "upload_time_iso_8601": "2019-11-10T14:24:54.905025Z", "url": "https://files.pythonhosted.org/packages/b3/dd/102aefc8e326514b1b97f43b61f3d1a3824b6e6b7a5ed2f4ac7035a11486/call_to_dxcc-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "539428c9c3394d46c6475bfc3aa67242", "sha256": "1dc9c6f5f96ab6d7b3180a200b4827201cf70ceeec4eeff04451e893a6af5a2f"}, "downloads": -1, "filename": "call_to_dxcc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "539428c9c3394d46c6475bfc3aa67242", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5935, "upload_time": "2019-11-10T14:24:56", "upload_time_iso_8601": "2019-11-10T14:24:56.851714Z", "url": "https://files.pythonhosted.org/packages/8f/19/35f29941e943238c3bddb67ae0d2c5a23ce766e3a82b4de927647a0a60d0/call_to_dxcc-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:36 2020"}