{"info": {"author": "Rodney Meredith McKay", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "# Object Pattern Matching for Python 3\n\nObject pattern matching (opm) is similar to regular expressions. Instead of matching a string against a pattern, we match objects. Some programming languages have this feature built-in, like Rust:\n\n```rust\nlet result = my_function();\nmatch result {\n    Some(value) => do_this(value),\n    _ => do_that(),\n}\n```\n\nThis is just a very simple example, but this a very powerful technique.\n\nHowever, this feature is not available in python by default. This repository contains the fruits of my work to implement this feature in python.\n\n# Installation\n\nSimply install this package with pip:\n\n```shell\npip install --user pyopm\n```\n\n# Usage\n\n**Note:** Until now, only very basic features have been implemented.\n\n```python\nfrom pyopm import ObjectPattern\n\np = ObjectPattern({\n    'obj': {'eval': [lambda o: isinstance(o, dict)]},\n    'obj.keys': {'eval': [lambda k: all(isinstance(x, (int, str)) for x in k())],\n                 'bind': {'keys': lambda o: o()}},\n    'obj.values': {'bind': {'values': lambda o: o()}},\n    'obj.items': {'eval': [lambda i: all(isinstance(y, float if isinstance(x, int) else int)\n                                         for x, y in i())],\n                  'bind': {'items': lambda i: list(i())}},\n})\n\nm = p.match({0, 1, 2})  # not a dict -> m is None\nm = p.match({0: 0, 'one': 1})  # 0: 0 does not match the rules -> m is None\nm = p.match({0: 0.2, 'one': 1})  # match!\n\nwith m:  # magic: use the objects bound to the names specified above\n    print(keys)\n    print(values)\n    print(list(zip(keys, values)))  # should be the same as...\n    print(items)  # ...this!\n```\n\nThis snippet above results in the following output:\n\n```\ndict_keys([0, 'one'])\ndict_values([0.2, 1])\n[(0, 0.2), ('one', 1)]\n[(0, 0.2), ('one', 1)]\n```\n\n# Roadmap\n\nThe next thing to implement: proper `with`  block handling\n\n## To Do\n\n+ [ ] proper `with`  block handling (locals do not work)\n+ [ ] SwitchBlock (throw in any object with `my_switch_block.switch(obj)` and the appropriate function will be called)\n+ [ ] overload\n\nIf you have any feature requests or suggestions, feel free to open an issue on [github](https://www.github.com/ep12/PyOPM). Of course, this also applies to bug reports and questions!\n\n# Support this project\n\nYou can contribute to this project by\n\n+ forking it.\n+ giving suggestions and feedback [here](https://www.github.com/ep12/PyOPM/issues).\n+ using and sharing it.\n\nCurrently, it is not very pythonic to use (especially the ObjectPattern init). I would be glad to improve the situation, but I do not want to loose the flexibility this method provides. If you have any ideas, please open an [issue](https://www.github.com/ep12/PyOPM/issues)!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ep12/PyOPM", "keywords": "object patterns,object pattern matching,case statement,match statement,case,match,object destructuring", "license": "GNU LGPL v3", "maintainer": "", "maintainer_email": "", "name": "pyopm", "package_url": "https://pypi.org/project/pyopm/", "platform": "", "project_url": "https://pypi.org/project/pyopm/", "project_urls": {"Homepage": "https://github.com/ep12/PyOPM"}, "release_url": "https://pypi.org/project/pyopm/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Object Pattern Matching for Python 3", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Object Pattern Matching for Python 3</h1>\n<p>Object pattern matching (opm) is similar to regular expressions. Instead of matching a string against a pattern, we match objects. Some programming languages have this feature built-in, like Rust:</p>\n<pre><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_function</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">do_this</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">do_that</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre>\n<p>This is just a very simple example, but this a very powerful technique.</p>\n<p>However, this feature is not available in python by default. This repository contains the fruits of my work to implement this feature in python.</p>\n<h1>Installation</h1>\n<p>Simply install this package with pip:</p>\n<pre>pip install --user pyopm\n</pre>\n<h1>Usage</h1>\n<p><strong>Note:</strong> Until now, only very basic features have been implemented.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyopm</span> <span class=\"kn\">import</span> <span class=\"n\">ObjectPattern</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ObjectPattern</span><span class=\"p\">({</span>\n    <span class=\"s1\">'obj'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'eval'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)]},</span>\n    <span class=\"s1\">'obj.keys'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'eval'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">k</span><span class=\"p\">())],</span>\n                 <span class=\"s1\">'bind'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'keys'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"n\">o</span><span class=\"p\">()}},</span>\n    <span class=\"s1\">'obj.values'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'bind'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"n\">o</span><span class=\"p\">()}},</span>\n    <span class=\"s1\">'obj.items'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'eval'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n                                         <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">())],</span>\n                  <span class=\"s1\">'bind'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">())}},</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># not a dict -&gt; m is None</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'one'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>  <span class=\"c1\"># 0: 0 does not match the rules -&gt; m is None</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"s1\">'one'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>  <span class=\"c1\"># match!</span>\n\n<span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"p\">:</span>  <span class=\"c1\"># magic: use the objects bound to the names specified above</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">)))</span>  <span class=\"c1\"># should be the same as...</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>  <span class=\"c1\"># ...this!</span>\n</pre>\n<p>This snippet above results in the following output:</p>\n<pre><code>dict_keys([0, 'one'])\ndict_values([0.2, 1])\n[(0, 0.2), ('one', 1)]\n[(0, 0.2), ('one', 1)]\n</code></pre>\n<h1>Roadmap</h1>\n<p>The next thing to implement: proper <code>with</code>  block handling</p>\n<h2>To Do</h2>\n<ul>\n<li>[ ] proper <code>with</code>  block handling (locals do not work)</li>\n<li>[ ] SwitchBlock (throw in any object with <code>my_switch_block.switch(obj)</code> and the appropriate function will be called)</li>\n<li>[ ] overload</li>\n</ul>\n<p>If you have any feature requests or suggestions, feel free to open an issue on <a href=\"https://www.github.com/ep12/PyOPM\" rel=\"nofollow\">github</a>. Of course, this also applies to bug reports and questions!</p>\n<h1>Support this project</h1>\n<p>You can contribute to this project by</p>\n<ul>\n<li>forking it.</li>\n<li>giving suggestions and feedback <a href=\"https://www.github.com/ep12/PyOPM/issues\" rel=\"nofollow\">here</a>.</li>\n<li>using and sharing it.</li>\n</ul>\n<p>Currently, it is not very pythonic to use (especially the ObjectPattern init). I would be glad to improve the situation, but I do not want to loose the flexibility this method provides. If you have any ideas, please open an <a href=\"https://www.github.com/ep12/PyOPM/issues\" rel=\"nofollow\">issue</a>!</p>\n\n          </div>"}, "last_serial": 6904178, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "af60157ad666d42e439c7e9fe657549e", "sha256": "966083a798f3e2c2e569d321172ff80b03a0785e12dd8c556248238fd70f8766"}, "downloads": -1, "filename": "pyopm-0.0.1.tar.gz", "has_sig": false, "md5_digest": "af60157ad666d42e439c7e9fe657549e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1753, "upload_time": "2020-03-22T16:24:16", "upload_time_iso_8601": "2020-03-22T16:24:16.014740Z", "url": "https://files.pythonhosted.org/packages/1b/32/0d67855db35311aa3fc3a281d6529a481f779747664212fc64cb0b7161a0/pyopm-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a4c87abcfada130362525608dc025c43", "sha256": "c03974d542dbcc37b7c87164c56d79c4a018fc789941add7b91584668e66a163"}, "downloads": -1, "filename": "pyopm-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a4c87abcfada130362525608dc025c43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4323, "upload_time": "2020-03-22T16:36:25", "upload_time_iso_8601": "2020-03-22T16:36:25.468176Z", "url": "https://files.pythonhosted.org/packages/7a/7e/9393dae6fb59a84a3e18ad925bd7977c1df85dfb21050f984c60f518c20e/pyopm-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "463bb57f86949336186161adffeaf971", "sha256": "eb3cfb104283a8efe1ab8cb5d06d0018aecebdcc86c2e1c822c50fa8dbcda8a2"}, "downloads": -1, "filename": "pyopm-0.0.3.tar.gz", "has_sig": false, "md5_digest": "463bb57f86949336186161adffeaf971", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6340, "upload_time": "2020-03-27T21:28:44", "upload_time_iso_8601": "2020-03-27T21:28:44.883496Z", "url": "https://files.pythonhosted.org/packages/d4/e2/3d1a88eff5f66d292f3e6b38bd8920165b4779bd8ca6561fcba36b87a953/pyopm-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "0adfe87cccfd6189f6dbb65fe0952506", "sha256": "97b6afbda4ddfc4a3a0e43e29c065fb746de0adbd87ae7812d075b512f432285"}, "downloads": -1, "filename": "pyopm-0.0.4.tar.gz", "has_sig": false, "md5_digest": "0adfe87cccfd6189f6dbb65fe0952506", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7393, "upload_time": "2020-03-28T23:38:46", "upload_time_iso_8601": "2020-03-28T23:38:46.567303Z", "url": "https://files.pythonhosted.org/packages/ba/49/6c1c8a4bb14f55417b65cee52763d7ff7c6fbca70f875501b81d968754a7/pyopm-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0adfe87cccfd6189f6dbb65fe0952506", "sha256": "97b6afbda4ddfc4a3a0e43e29c065fb746de0adbd87ae7812d075b512f432285"}, "downloads": -1, "filename": "pyopm-0.0.4.tar.gz", "has_sig": false, "md5_digest": "0adfe87cccfd6189f6dbb65fe0952506", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7393, "upload_time": "2020-03-28T23:38:46", "upload_time_iso_8601": "2020-03-28T23:38:46.567303Z", "url": "https://files.pythonhosted.org/packages/ba/49/6c1c8a4bb14f55417b65cee52763d7ff7c6fbca70f875501b81d968754a7/pyopm-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:07 2020"}