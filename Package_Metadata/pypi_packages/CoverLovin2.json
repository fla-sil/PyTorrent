{"info": {"author": "James Thomas Moon", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Multimedia :: Sound/Audio"], "description": "CoverLovin2\n===========\n\n[![Build Status](https://travis-ci.com/jtmoon79/coverlovin2.svg?branch=master)](https://travis-ci.com/jtmoon79/coverlovin2)\n[![CircleCI](https://circleci.com/gh/jtmoon79/coverlovin2.svg?style=svg)](https://circleci.com/gh/jtmoon79/coverlovin2)\n[![codecov](https://codecov.io/gh/jtmoon79/coverlovin2/branch/master/graph/badge.svg)](https://codecov.io/gh/jtmoon79/coverlovin2)\n[![Coveralls Coverage Status](https://coveralls.io/repos/github/jtmoon79/coverlovin2/badge.svg?branch=master)](https://coveralls.io/github/jtmoon79/coverlovin2?branch=master)\n[![PyPI version](https://badge.fury.io/py/CoverLovin2.svg)](https://badge.fury.io/py/CoverLovin2)\n[![Python versions](https://img.shields.io/pypi/pyversions/coverlovin2.svg?longCache=True)](https://pypi.org/pypi/coverlovin2/)\n[![Requirements Status](https://requires.io/github/jtmoon79/coverlovin2/requirements.svg?branch=master)](https://requires.io/github/jtmoon79/coverlovin2/requirements/?branch=master)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n*CoverLovin2* (Cover Loving, too!), Python name *coverlovin2*, is a Python\nscript for downloading album cover art images, either via local searching and\ncopying, or via downloading from various online services.\nA common use-case is creating \"`cover.jpg`\" files for a large collection of\nripped Compact Disc albums.\n\ncoverlovin2 can only be run by Python version 3.7 (or greater).\n\n# Table of Contents\n\n* [Script Usage](#script-usage)\n* [Installation](#installation)\n* [Development](#development)\n* [Other Miscellaneous Notes](#other-miscellaneous-notes)\n  * [Issues\u203c  \ud83d\udc1b \ud83d\udc35](#issues---)\n  * [run phases](#run-phases)\n\nScript Usage\n------------\n\nTo see what it will do without changing any files\n\n    coverlovin2 -s- --test /path/to/music/library\n\nThe verbose `--help` message\n\n```Text\nusage: coverlovin2.py [-h] [-n IMAGE_NAME] [-i {jpg,png,gif}] [-o] [-s*] [-s-]\n                      [-sl] [-se] [-sm] [-sg] [-sgz {small,medium,large}]\n                      [--sgid GID] [--sgkey GKEY] [-v] [-r REFERER] [-d]\n                      [--test]\n                      DIRS [DIRS ...]\n\nThis Python-based program is for automating downloading album cover art images.\nA common use-case is creating a \"cover.jpg\" file for a collection of ripped\nCompact Disc albums.\n\nGiven a list of directories, DIRS, recursively identify \"album\" directories.\n\"Album\" directories have audio files, e.g. files with extensions like .mp3 or\n.flac.  For each \"album\" directory, attempt to determine the Artist and Album.\nThen find an album cover image file using the requested --search providers.  If\nan album cover image file is found then write it to IMAGE_NAME.IMAGE_TYPE within\neach \"album\" directory.\n\nAudio files supported are .mp3, .m4a, .mp4, .flac, .ogg, .wma, .asf.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nRequired Arguments:\n  DIRS                  directories to scan for audio files (Required)\n\nRecommended:\n  -n IMAGE_NAME, --image-name IMAGE_NAME\n                        cover image file name IMAGE_NAME. This is the file\n                        name that will be created within passed DIRS. This\n                        will be appended with the preferred image TYPE, e.g.\n                        \"jpg\", \"png\", etc. (default: \"cover\")\n  -i {jpg,png,gif}, --image-type {jpg,png,gif}\n                        image format IMAGE_TYPE (default: \"jpg\")\n  -o, --overwrite       overwrite any previous file of the same file\n                        IMAGE_NAME and IMAGE_TYPE (default: False)\n\nSearch all:\n  -s*, --search-all     Search for album cover images using all methods and\n                        services\n  -s-, --search-all-no-init\n                        Search for album cover images using all methods and\n                        services that do not require user initialization (e.g.\n                        no Google CSE).\n\nSearch the local directory for likely album cover images:\n  -sl, --search-likely-cover\n                        For any directory with audio media files but no file\n                        \"IMAGE_NAME.IMAGE_TYPE\", search the directory for\n                        files that are likely album cover images. For example,\n                        given options: --name \"cover\" --type \"jpg\", and a\n                        directory of .mp3 files with a file \"album.jpg\", it is\n                        reasonable to guess \"album.jpg\" is a an album cover\n                        image file. So copy file \"album.jpg\" to \"cover.jpg\" .\n                        This will skip an internet image lookup and download\n                        and could be a more reliable way to retrieve the\n                        correct album cover image.\n\nSearch the local directory for an embedded album cover image:\n  -se, --search-embedded\n                        Search audio media files for embedded images. If\n                        found, attempt to extract the embedded image.\n\nSearch Musicbrainz NGS webservice:\n  -sm, --search-musicbrainz\n                        Search for album cover images using musicbrainz NGS\n                        webservice. MusicBrainz lookup is the most reliable\n                        search method.\n\nSearch Google Custom Search Engine (CSE):\n  -sg, --search-googlecse\n                        Search for album cover images using Google CSE. Using\n                        the Google CSE requires an Engine ID and API Key.\n                        Google CSE reliability entirely depends upon the added\n                        \"Sites to search\". The end of this help message has\n                        more advice around using Google CSE.\n  -sgz {small,medium,large}, --sgsize {small,medium,large}\n                        Google CSE optional image file size (default: \"large\")\n  --sgid GID            Google CSE ID (URL parameter \"cx\") typically looks\n                        like \"009494817879853929660:efj39xwwkng\". REQUIRED to\n                        use Google CSE.\n  --sgkey GKEY          Google CSE API Key (URL parameter \"key\") typically\n                        looks like \"KVEIA49cnkwoaaKZKGX_OSIxhatybxc9kd59Dst\".\n                        REQUIRED to use Google CSE.\n\nDebugging and Miscellanea:\n  -v, --version         show program's version number and exit\n  -r REFERER, --referer REFERER\n                        Referer url used in HTTP GET requests (default:\n                        \"https://github.com/jtmoon79/coverlovin2\")\n  -d, --debug           Print debugging messages\n  --test                Only test, do not write any files\n\nThis program attempts to create album cover image files for the passed DIRS.  It\ndoes this several ways, searching for album cover image files already present in\nthe directory (-sl).  If not found, it attempts to figure out the Artist and\nAlbum for that directory then searches online services for an album cover image\n(-sm or -sg).\n\nDirectories are searched recursively.  Any directory that contains one or more\nwith file name extension .mp3 or .m4a or .mp4 or .flac or .ogg or .wma or .asf\nis presumed to be an album directory.  Given a directory of such files, file\ncontents will be read for the Artist name and Album name using embedded audio\ntags (ID3, Windows Media, etc.).  If no embedded media tags are present then a\nreasonable guess will be made about the Artist and Album based on the directory\nname; specifically this will try to match a directory name with a pattern like\n\"Artist - Year - Album\" or \"Artist - Album\".\nFrom there, online search services are used to search for the required album\ncover image. If found, it is written to the album directory to file name\nIMAGE_NAME.IMAGE_TYPE (-n \u2026 -i \u2026).\n\nIf option --search-googlecse is chosen then you must create your Google Custom\nSearch Engine (CSE).  This can be setup at https://cse.google.com/cse/all .  It\ntakes about 5 minutes.  This is where your own values for --sgid and --sgkey can\nbe created. --sgid is \"Search engine ID\" (URI parameter \"cx\") and --sgkey is\nunder the \"Custom Search JSON API\" from which you can generate an API Key (URI\nparameter \"key\"). A key can be generated at\nhttps://console.developers.google.com/apis/credentials.\nGoogle CSE settings must have \"Image search\" as \"ON\"  and \"Search the entire\nweb\" as \"OFF\".\n\nPyPi project: https://pypi.org/project/CoverLovin2/\nSource code: https://github.com/jtmoon79/coverlovin2\n\nInspired by the program coverlovin.\n```\n\nInstallation\n------------\n\n* Using `pip` from pypi:\n\n      pip install coverlovin2\n\n* Using `pip` from source:\n\n      pip install mutagen musicbrainzngs Pillow\n      pip install https://github.com/jtmoon79/coverlovin2/archive/master.zip\n\n*coverlovin2* depends on non-standard libraries [mutagen](https://pypi.org/project/mutagen/),\n[musicbrainzngs](https://pypi.org/project/musicbrainzngs/), and [Pillow](https://pypi.org/project/Pillow/).\n\nDevelopment\n-----------\n\nInstall `pipenv`.\n\nClone the repository:\n\n    git clone git@github.com:jtmoon79/coverlovin2.git\n\nStart the Python virtual environment and install the dependencies:\n\n    cd coverlovin2\n    pipenv --python 3.7 shell\n    pipenv install --dev\n\nThis will install more non-standard libraries. See the [Pipfile](./Pipfile).\n\nOther Miscellaneous Notes\n-------------------------\n\ncoverlovin2 is inspired by [coverlovin](https://github.com/amorphic/coverlovin).\n\n_Sonos_ systems will use file `folder.jpg` for album cover art (if available).\n\n_Winamp_ will use file `cover.jpg` for album cover art (if available).\n\ncoverlovin2 is a practice project for sake of the author catching up to changes\nin the Python Universe and the github Universe.<br/>\nSome things the author explored:\n- project badges (are fun _and useful_)!\n- online services\n  - CI Services\n    - [Travis CI](https://travis-ci.com/jtmoon79/coverlovin2)\n    - [Circle CI](https://circleci.com/gh/jtmoon79/coverlovin2)\n    - [codecov.io](https://codecov.io/gh/jtmoon79/coverlovin2)\n    - [Requires.io](https://requires.io/github/jtmoon79/coverlovin2)\n    - \u2639 landscape.io ([had too many problems](https://github.com/landscapeio/landscape-issues/issues))\n  - package distribution service [pypi](https://pypi.org/project/CoverLovin2/)\n- [pytests](./coverlovin2/test)!\n  - pytest [code coverage](https://pypi.org/project/pytest-cov/)!\n- type-hinting\u203c<br/>\ncoverlovin2 is very type-hinted code and could be even more so. The author\nthinks type-hinting is a good idea but it still needs improvement. In it's\ncurrent form in Python 3.7, it feels clumsy to write and to grok. Also, PyCharm\nand mypy seem to catch different type-hint warnings.\n  - mypy (and [bugs](https://github.com/python/mypy/issues/6476)? \u2639)\n- Python 3.7 classes and programming (like `SimpleQueue` and `namedtuple`)\n  - virtual environment manager `pipenv`.\n- printing odd UTF-8 characters (for example, `\\uFF5B`, `\uff5b`) and coercing UTF8\nmode (within a context without UTF8 support; MinGW bash on Windows)\n\n#### Issues\u203c  \ud83d\udc1b \ud83d\udc35\n\nOther projects Bug Issues \ud83d\udc1b and Feature Issues \ud83d\udc35 the author created in the\ncourse of writing this application:\n\n\ud83d\udc35 [pypa/pipenv #3505](https://github.com/pypa/pipenv/issues/3505)\n\n\ud83d\udc1b [pypa/pipenv #3521](https://github.com/pypa/pipenv/issues/3521)\n\n\ud83d\udc1b [pypa/pipenv #3523](https://github.com/pypa/pipenv/issues/3523)\n\n\ud83d\udc1b [pypa/pipenv #3529](https://github.com/pypa/pipenv/issues/3529)\n\n\ud83d\udc1b [pypa/pipenv #3573](https://github.com/pypa/pipenv/issues/3573)\n\n\ud83d\udc1b [python/mypy #6476](https://github.com/python/mypy/issues/6476)\n\n\ud83d\udc1b [python/mypy #6473](https://github.com/python/mypy/issues/6473)\n\n\ud83d\udc1b [ant-druha/PowerShell #16](https://github.com/ant-druha/PowerShell/issues/16)\n\n#### run phases\n\ncoverlovin2 runs in a few phases:\n\n1. recursively search passed directory paths for \"album\" directories. An \"album\"\ndirectory merely holds audio files of type `.mp3`, `.m4a`, `.mp4`, `.flac`,\n`.ogg`, `.wma`, or `.asf`. (see [`coverlovin2/coverlovin2.py::AUDIO_TYPES`](./coverlovin2/coverlovin2.py)).\n2. employ a few techniques for determining the artist and album for that\ndirectory.  The most reliable technique is to read available embedded audio tags\nwithin the directory. (see [`coverlovin2/coverlovin2.py::process_dir`](./coverlovin2/coverlovin2.py))\n3. using user-passed search options, search for the album cover art image file.\n4. if album cover art is found, create that image file into the \"album\"\ndirectory. The name and type of image (`.jpg`, `.png`, `.gif`) is based on\nuser-passed options for the `IMAGE_NAME` and `IMAGE_TYPE`.\n\n<br/>\n\n----\n\n<img src=\"https://stackexchange.com/users/flair/216253.png\" width=\"208\" height=\"58\" alt=\"profile for Kai Hendry on Stack Exchange, a network of free, community-driven Q&amp;A sites\" title=\"profile for James Thomas Moon on Stack Exchange, a network of free, community-driven Q&amp;A sites\">\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jtmoon79/coverlovin2", "keywords": "audio image music", "license": "Apache License 2.0 (Apache-2.0)", "maintainer": "", "maintainer_email": "", "name": "CoverLovin2", "package_url": "https://pypi.org/project/CoverLovin2/", "platform": "", "project_url": "https://pypi.org/project/CoverLovin2/", "project_urls": {"Bug Reports": "https://github.com/jtmoon79/coverlovin2/issues", "Homepage": "https://github.com/jtmoon79/coverlovin2", "Say Thanks!": "http://saythanks.io/to/coverlovin2", "Source": "https://github.com/jtmoon79/coverlovin2"}, "release_url": "https://pypi.org/project/CoverLovin2/0.5.7/", "requires_dist": ["musicbrainzngs (>=0.6)", "mutagen (>=1.42.0)", "Pillow (>=5.4.1)"], "requires_python": ">=3.7", "summary": "Download music album cover art for a music collection.", "version": "0.5.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CoverLovin2</h1>\n<p><a href=\"https://travis-ci.com/jtmoon79/coverlovin2\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a5151e6b6b8a87bebe6b8e95fa6ac52c9bf83b4/68747470733a2f2f7472617669732d63692e636f6d2f6a746d6f6f6e37392f636f7665726c6f76696e322e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://circleci.com/gh/jtmoon79/coverlovin2\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2db86df2a4e39a50ded31fac2849cba3dd222969/68747470733a2f2f636972636c6563692e636f6d2f67682f6a746d6f6f6e37392f636f7665726c6f76696e322e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/jtmoon79/coverlovin2\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44a525caee481555831714881038ce851c62598d/68747470733a2f2f636f6465636f762e696f2f67682f6a746d6f6f6e37392f636f7665726c6f76696e322f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://coveralls.io/github/jtmoon79/coverlovin2?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7fce0a09f938d83b0a60407d10f0c66854cf498/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a746d6f6f6e37392f636f7665726c6f76696e322f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/CoverLovin2\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/870c3841cf03f5c66b2ccd165832d45b1c58ed8e/68747470733a2f2f62616467652e667572792e696f2f70792f436f7665724c6f76696e322e737667\"></a>\n<a href=\"https://pypi.org/pypi/coverlovin2/\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06a8e934df701e12ca048975e29cda6e7f220ba6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636f7665726c6f76696e322e7376673f6c6f6e6743616368653d54727565\"></a>\n<a href=\"https://requires.io/github/jtmoon79/coverlovin2/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2bd0d627084e3c50657fa34be095154b7b90211/68747470733a2f2f72657175697265732e696f2f6769746875622f6a746d6f6f6e37392f636f7665726c6f76696e322f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a></p>\n<p><em>CoverLovin2</em> (Cover Loving, too!), Python name <em>coverlovin2</em>, is a Python\nscript for downloading album cover art images, either via local searching and\ncopying, or via downloading from various online services.\nA common use-case is creating \"<code>cover.jpg</code>\" files for a large collection of\nripped Compact Disc albums.</p>\n<p>coverlovin2 can only be run by Python version 3.7 (or greater).</p>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#script-usage\" rel=\"nofollow\">Script Usage</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#other-miscellaneous-notes\" rel=\"nofollow\">Other Miscellaneous Notes</a>\n<ul>\n<li><a href=\"#issues---\" rel=\"nofollow\">Issues\u203c  \ud83d\udc1b \ud83d\udc35</a></li>\n<li><a href=\"#run-phases\" rel=\"nofollow\">run phases</a></li>\n</ul>\n</li>\n</ul>\n<h2>Script Usage</h2>\n<p>To see what it will do without changing any files</p>\n<pre><code>coverlovin2 -s- --test /path/to/music/library\n</code></pre>\n<p>The verbose <code>--help</code> message</p>\n<pre>usage: coverlovin2.py [-h] [-n IMAGE_NAME] [-i {jpg,png,gif}] [-o] [-s*] [-s-]\n                      [-sl] [-se] [-sm] [-sg] [-sgz {small,medium,large}]\n                      [--sgid GID] [--sgkey GKEY] [-v] [-r REFERER] [-d]\n                      [--test]\n                      DIRS [DIRS ...]\n\nThis Python-based program is for automating downloading album cover art images.\nA common use-case is creating a \"cover.jpg\" file for a collection of ripped\nCompact Disc albums.\n\nGiven a list of directories, DIRS, recursively identify \"album\" directories.\n\"Album\" directories have audio files, e.g. files with extensions like .mp3 or\n.flac.  For each \"album\" directory, attempt to determine the Artist and Album.\nThen find an album cover image file using the requested --search providers.  If\nan album cover image file is found then write it to IMAGE_NAME.IMAGE_TYPE within\neach \"album\" directory.\n\nAudio files supported are .mp3, .m4a, .mp4, .flac, .ogg, .wma, .asf.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nRequired Arguments:\n  DIRS                  directories to scan for audio files (Required)\n\nRecommended:\n  -n IMAGE_NAME, --image-name IMAGE_NAME\n                        cover image file name IMAGE_NAME. This is the file\n                        name that will be created within passed DIRS. This\n                        will be appended with the preferred image TYPE, e.g.\n                        \"jpg\", \"png\", etc. (default: \"cover\")\n  -i {jpg,png,gif}, --image-type {jpg,png,gif}\n                        image format IMAGE_TYPE (default: \"jpg\")\n  -o, --overwrite       overwrite any previous file of the same file\n                        IMAGE_NAME and IMAGE_TYPE (default: False)\n\nSearch all:\n  -s*, --search-all     Search for album cover images using all methods and\n                        services\n  -s-, --search-all-no-init\n                        Search for album cover images using all methods and\n                        services that do not require user initialization (e.g.\n                        no Google CSE).\n\nSearch the local directory for likely album cover images:\n  -sl, --search-likely-cover\n                        For any directory with audio media files but no file\n                        \"IMAGE_NAME.IMAGE_TYPE\", search the directory for\n                        files that are likely album cover images. For example,\n                        given options: --name \"cover\" --type \"jpg\", and a\n                        directory of .mp3 files with a file \"album.jpg\", it is\n                        reasonable to guess \"album.jpg\" is a an album cover\n                        image file. So copy file \"album.jpg\" to \"cover.jpg\" .\n                        This will skip an internet image lookup and download\n                        and could be a more reliable way to retrieve the\n                        correct album cover image.\n\nSearch the local directory for an embedded album cover image:\n  -se, --search-embedded\n                        Search audio media files for embedded images. If\n                        found, attempt to extract the embedded image.\n\nSearch Musicbrainz NGS webservice:\n  -sm, --search-musicbrainz\n                        Search for album cover images using musicbrainz NGS\n                        webservice. MusicBrainz lookup is the most reliable\n                        search method.\n\nSearch Google Custom Search Engine (CSE):\n  -sg, --search-googlecse\n                        Search for album cover images using Google CSE. Using\n                        the Google CSE requires an Engine ID and API Key.\n                        Google CSE reliability entirely depends upon the added\n                        \"Sites to search\". The end of this help message has\n                        more advice around using Google CSE.\n  -sgz {small,medium,large}, --sgsize {small,medium,large}\n                        Google CSE optional image file size (default: \"large\")\n  --sgid GID            Google CSE ID (URL parameter \"cx\") typically looks\n                        like \"009494817879853929660:efj39xwwkng\". REQUIRED to\n                        use Google CSE.\n  --sgkey GKEY          Google CSE API Key (URL parameter \"key\") typically\n                        looks like \"KVEIA49cnkwoaaKZKGX_OSIxhatybxc9kd59Dst\".\n                        REQUIRED to use Google CSE.\n\nDebugging and Miscellanea:\n  -v, --version         show program's version number and exit\n  -r REFERER, --referer REFERER\n                        Referer url used in HTTP GET requests (default:\n                        \"https://github.com/jtmoon79/coverlovin2\")\n  -d, --debug           Print debugging messages\n  --test                Only test, do not write any files\n\nThis program attempts to create album cover image files for the passed DIRS.  It\ndoes this several ways, searching for album cover image files already present in\nthe directory (-sl).  If not found, it attempts to figure out the Artist and\nAlbum for that directory then searches online services for an album cover image\n(-sm or -sg).\n\nDirectories are searched recursively.  Any directory that contains one or more\nwith file name extension .mp3 or .m4a or .mp4 or .flac or .ogg or .wma or .asf\nis presumed to be an album directory.  Given a directory of such files, file\ncontents will be read for the Artist name and Album name using embedded audio\ntags (ID3, Windows Media, etc.).  If no embedded media tags are present then a\nreasonable guess will be made about the Artist and Album based on the directory\nname; specifically this will try to match a directory name with a pattern like\n\"Artist - Year - Album\" or \"Artist - Album\".\nFrom there, online search services are used to search for the required album\ncover image. If found, it is written to the album directory to file name\nIMAGE_NAME.IMAGE_TYPE (-n \u2026 -i \u2026).\n\nIf option --search-googlecse is chosen then you must create your Google Custom\nSearch Engine (CSE).  This can be setup at https://cse.google.com/cse/all .  It\ntakes about 5 minutes.  This is where your own values for --sgid and --sgkey can\nbe created. --sgid is \"Search engine ID\" (URI parameter \"cx\") and --sgkey is\nunder the \"Custom Search JSON API\" from which you can generate an API Key (URI\nparameter \"key\"). A key can be generated at\nhttps://console.developers.google.com/apis/credentials.\nGoogle CSE settings must have \"Image search\" as \"ON\"  and \"Search the entire\nweb\" as \"OFF\".\n\nPyPi project: https://pypi.org/project/CoverLovin2/\nSource code: https://github.com/jtmoon79/coverlovin2\n\nInspired by the program coverlovin.\n</pre>\n<h2>Installation</h2>\n<ul>\n<li>\n<p>Using <code>pip</code> from pypi:</p>\n<pre><code>pip install coverlovin2\n</code></pre>\n</li>\n<li>\n<p>Using <code>pip</code> from source:</p>\n<pre><code>pip install mutagen musicbrainzngs Pillow\npip install https://github.com/jtmoon79/coverlovin2/archive/master.zip\n</code></pre>\n</li>\n</ul>\n<p><em>coverlovin2</em> depends on non-standard libraries <a href=\"https://pypi.org/project/mutagen/\" rel=\"nofollow\">mutagen</a>,\n<a href=\"https://pypi.org/project/musicbrainzngs/\" rel=\"nofollow\">musicbrainzngs</a>, and <a href=\"https://pypi.org/project/Pillow/\" rel=\"nofollow\">Pillow</a>.</p>\n<h2>Development</h2>\n<p>Install <code>pipenv</code>.</p>\n<p>Clone the repository:</p>\n<pre><code>git clone git@github.com:jtmoon79/coverlovin2.git\n</code></pre>\n<p>Start the Python virtual environment and install the dependencies:</p>\n<pre><code>cd coverlovin2\npipenv --python 3.7 shell\npipenv install --dev\n</code></pre>\n<p>This will install more non-standard libraries. See the <a href=\"./Pipfile\" rel=\"nofollow\">Pipfile</a>.</p>\n<h2>Other Miscellaneous Notes</h2>\n<p>coverlovin2 is inspired by <a href=\"https://github.com/amorphic/coverlovin\" rel=\"nofollow\">coverlovin</a>.</p>\n<p><em>Sonos</em> systems will use file <code>folder.jpg</code> for album cover art (if available).</p>\n<p><em>Winamp</em> will use file <code>cover.jpg</code> for album cover art (if available).</p>\n<p>coverlovin2 is a practice project for sake of the author catching up to changes\nin the Python Universe and the github Universe.<br>\nSome things the author explored:</p>\n<ul>\n<li>project badges (are fun <em>and useful</em>)!</li>\n<li>online services\n<ul>\n<li>CI Services\n<ul>\n<li><a href=\"https://travis-ci.com/jtmoon79/coverlovin2\" rel=\"nofollow\">Travis CI</a></li>\n<li><a href=\"https://circleci.com/gh/jtmoon79/coverlovin2\" rel=\"nofollow\">Circle CI</a></li>\n<li><a href=\"https://codecov.io/gh/jtmoon79/coverlovin2\" rel=\"nofollow\">codecov.io</a></li>\n<li><a href=\"https://requires.io/github/jtmoon79/coverlovin2\" rel=\"nofollow\">Requires.io</a></li>\n<li>\u2639 landscape.io (<a href=\"https://github.com/landscapeio/landscape-issues/issues\" rel=\"nofollow\">had too many problems</a>)</li>\n</ul>\n</li>\n<li>package distribution service <a href=\"https://pypi.org/project/CoverLovin2/\" rel=\"nofollow\">pypi</a></li>\n</ul>\n</li>\n<li><a href=\"./coverlovin2/test\" rel=\"nofollow\">pytests</a>!\n<ul>\n<li>pytest <a href=\"https://pypi.org/project/pytest-cov/\" rel=\"nofollow\">code coverage</a>!</li>\n</ul>\n</li>\n<li>type-hinting\u203c<br>\ncoverlovin2 is very type-hinted code and could be even more so. The author\nthinks type-hinting is a good idea but it still needs improvement. In it's\ncurrent form in Python 3.7, it feels clumsy to write and to grok. Also, PyCharm\nand mypy seem to catch different type-hint warnings.\n<ul>\n<li>mypy (and <a href=\"https://github.com/python/mypy/issues/6476\" rel=\"nofollow\">bugs</a>? \u2639)</li>\n</ul>\n</li>\n<li>Python 3.7 classes and programming (like <code>SimpleQueue</code> and <code>namedtuple</code>)\n<ul>\n<li>virtual environment manager <code>pipenv</code>.</li>\n</ul>\n</li>\n<li>printing odd UTF-8 characters (for example, <code>\\uFF5B</code>, <code>\uff5b</code>) and coercing UTF8\nmode (within a context without UTF8 support; MinGW bash on Windows)</li>\n</ul>\n<h4>Issues\u203c  \ud83d\udc1b \ud83d\udc35</h4>\n<p>Other projects Bug Issues \ud83d\udc1b and Feature Issues \ud83d\udc35 the author created in the\ncourse of writing this application:</p>\n<p>\ud83d\udc35 <a href=\"https://github.com/pypa/pipenv/issues/3505\" rel=\"nofollow\">pypa/pipenv #3505</a></p>\n<p>\ud83d\udc1b <a href=\"https://github.com/pypa/pipenv/issues/3521\" rel=\"nofollow\">pypa/pipenv #3521</a></p>\n<p>\ud83d\udc1b <a href=\"https://github.com/pypa/pipenv/issues/3523\" rel=\"nofollow\">pypa/pipenv #3523</a></p>\n<p>\ud83d\udc1b <a href=\"https://github.com/pypa/pipenv/issues/3529\" rel=\"nofollow\">pypa/pipenv #3529</a></p>\n<p>\ud83d\udc1b <a href=\"https://github.com/pypa/pipenv/issues/3573\" rel=\"nofollow\">pypa/pipenv #3573</a></p>\n<p>\ud83d\udc1b <a href=\"https://github.com/python/mypy/issues/6476\" rel=\"nofollow\">python/mypy #6476</a></p>\n<p>\ud83d\udc1b <a href=\"https://github.com/python/mypy/issues/6473\" rel=\"nofollow\">python/mypy #6473</a></p>\n<p>\ud83d\udc1b <a href=\"https://github.com/ant-druha/PowerShell/issues/16\" rel=\"nofollow\">ant-druha/PowerShell #16</a></p>\n<h4>run phases</h4>\n<p>coverlovin2 runs in a few phases:</p>\n<ol>\n<li>recursively search passed directory paths for \"album\" directories. An \"album\"\ndirectory merely holds audio files of type <code>.mp3</code>, <code>.m4a</code>, <code>.mp4</code>, <code>.flac</code>,\n<code>.ogg</code>, <code>.wma</code>, or <code>.asf</code>. (see <a href=\"./coverlovin2/coverlovin2.py\" rel=\"nofollow\"><code>coverlovin2/coverlovin2.py::AUDIO_TYPES</code></a>).</li>\n<li>employ a few techniques for determining the artist and album for that\ndirectory.  The most reliable technique is to read available embedded audio tags\nwithin the directory. (see <a href=\"./coverlovin2/coverlovin2.py\" rel=\"nofollow\"><code>coverlovin2/coverlovin2.py::process_dir</code></a>)</li>\n<li>using user-passed search options, search for the album cover art image file.</li>\n<li>if album cover art is found, create that image file into the \"album\"\ndirectory. The name and type of image (<code>.jpg</code>, <code>.png</code>, <code>.gif</code>) is based on\nuser-passed options for the <code>IMAGE_NAME</code> and <code>IMAGE_TYPE</code>.</li>\n</ol>\n<br>\n<hr>\n<img alt=\"profile for Kai Hendry on Stack Exchange, a network of free, community-driven Q&amp;A sites\" height=\"58\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f50c6b71551b662337990aaa977d93da242466ef/68747470733a2f2f737461636b65786368616e67652e636f6d2f75736572732f666c6169722f3231363235332e706e67\" width=\"208\">\n\n          </div>"}, "last_serial": 5527428, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "ab5a16be5e8b7e9a79fe263935cc9d5a", "sha256": "451abec8344828a68b26f13a2a1017594b3f3c6eb5761bf449d7c1ea4785d692"}, "downloads": -1, "filename": "CoverLovin2-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ab5a16be5e8b7e9a79fe263935cc9d5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 21548, "upload_time": "2019-02-13T07:37:19", "upload_time_iso_8601": "2019-02-13T07:37:19.139936Z", "url": "https://files.pythonhosted.org/packages/98/50/913d2daa7fbf5cd8dd4d6c8ac4b5777a9d655d9d76e670df0c9c3b7d6bb4/CoverLovin2-0.5.2-py3-none-any.whl", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "83ecaf29aeaf96e77b538297b6bf0a7d", "sha256": "46a5c9f5c3313316f53b1480139d7df657889b5cd72b333021bff3f40d5555b5"}, "downloads": -1, "filename": "CoverLovin2-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "83ecaf29aeaf96e77b538297b6bf0a7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 21699, "upload_time": "2019-02-13T07:53:39", "upload_time_iso_8601": "2019-02-13T07:53:39.281681Z", "url": "https://files.pythonhosted.org/packages/14/f9/5457459f35c103d0259791d687cac856fb00b236d1cb513b4d21a41c98cb/CoverLovin2-0.5.3-py3-none-any.whl", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "21497cbda1cd7701f8a2612836d8d97d", "sha256": "4391882becd493072f61a6d519e9fc6502e308a5b8c631cdd52d8eb7a1e9d4f2"}, "downloads": -1, "filename": "CoverLovin2-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "21497cbda1cd7701f8a2612836d8d97d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22938, "upload_time": "2019-02-26T09:18:22", "upload_time_iso_8601": "2019-02-26T09:18:22.684602Z", "url": "https://files.pythonhosted.org/packages/88/01/7a16e69fa4cfa131020d655e7876af38e9ad85e817b3e454703264c56a66/CoverLovin2-0.5.5-py3-none-any.whl", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "af835937b1ea9f167544fc6afa638bc1", "sha256": "cd75305e7a6c5fd2704a9b2a7c8fd782c34603adebe5b0fa36e69f0273309c80"}, "downloads": -1, "filename": "CoverLovin2-0.5.6-py3-none-any.whl", "has_sig": false, "md5_digest": "af835937b1ea9f167544fc6afa638bc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 23890, "upload_time": "2019-02-27T10:13:33", "upload_time_iso_8601": "2019-02-27T10:13:33.042682Z", "url": "https://files.pythonhosted.org/packages/86/a6/8a92dba47ba55783b3c10c5c82374ec488b78bc33f617a986b1ac2ab18bd/CoverLovin2-0.5.6-py3-none-any.whl", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "410e950038b08b9a761b80121f77470e", "sha256": "fe4c7763e619bd83ff3a17dbd11d6b403dd14806d2a1c3f0d390b2473e29e80d"}, "downloads": -1, "filename": "CoverLovin2-0.5.7-py3-none-any.whl", "has_sig": false, "md5_digest": "410e950038b08b9a761b80121f77470e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 25935, "upload_time": "2019-07-13T17:07:47", "upload_time_iso_8601": "2019-07-13T17:07:47.149525Z", "url": "https://files.pythonhosted.org/packages/68/74/bcc746c55e4519aabb32a8745e217f21368161c6e74efe5db5c22851a569/CoverLovin2-0.5.7-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "410e950038b08b9a761b80121f77470e", "sha256": "fe4c7763e619bd83ff3a17dbd11d6b403dd14806d2a1c3f0d390b2473e29e80d"}, "downloads": -1, "filename": "CoverLovin2-0.5.7-py3-none-any.whl", "has_sig": false, "md5_digest": "410e950038b08b9a761b80121f77470e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 25935, "upload_time": "2019-07-13T17:07:47", "upload_time_iso_8601": "2019-07-13T17:07:47.149525Z", "url": "https://files.pythonhosted.org/packages/68/74/bcc746c55e4519aabb32a8745e217f21368161c6e74efe5db5c22851a569/CoverLovin2-0.5.7-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:42:47 2020"}