{"info": {"author": "Mike Ellertson", "author_email": "mdellertson@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3 :: Only"], "description": "# hitbtc_wss\nHitBTC Websocket API 2.0 Client written in Python 3.\n\nForked from [Crypto-toolbox/hitbtc_wss](https://github.com/Crypto-toolbox/hitbtc_wss).  At the time of this writing,\nCrypto-toolbox had not accepted a pull request into his repo in 7 months.  Seems like they might have\nmoved on to do other things.  I figured I'd pick the ball up and run with it.  \n\n# Release History\n\n\n| Date     | Description  |\n| -------- | ------------ |\n| 09/02/2018 | Published bug fix to PyPi so the `login` method works with HitBTC v2 login method. |\n\nThe client supplies data both visually via console, as well as python objects via its `HitBTC.recv()`.\nIt's important to note that this does not receive data from the API directly -\ninstead, the data is pulled from a `queue.Queue` object, which defaults to a length of\n100 items. So only the last 100 messages will be cached - either make sure you process the messages\nfast enough, or increase the length of the queue (can be done by passing the `q_maxsize` kwarg on\ninstantiation).\n\nBy default, data is unpacked - that means you will never see the raw `JSONRPC` message\n(this, too, can be turned off by passing `raw=True` upon initialization). This will, however, also\nturn off all handling of error messages etc.\n\nFor an in-depth description of the client and its methods, please see the documenation at\n[readthedocs.org](http://hitbtc-websocket-api-20-client.readthedocs.io/en/latest/)\n\n\n# Installation\n\nStable: `pip install hitbtc_wss`\nRelease Candidate: `pip install --pre hitbtc_wss`\n\n# Example Usage\n\n```python\nimport time\nimport queue\nfrom hitbtc_wss import HitBTC\nc = HitBTC()\nc.start()  # start the websocket connection\ntime.sleep(2)  # Give the socket some time to connect\nc.subscribe_ticker(symbol='ETHBTC') # Subscribe to ticker data for the pair ETHBTC\n\nwhile True:\n    try:\n        data = c.recv()\n    except queue.Empty:\n        continue\n\n    # process data from websocket\n    ...\n\nc.stop()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mellertson/hitbtc", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "hitbtc-wss", "package_url": "https://pypi.org/project/hitbtc-wss/", "platform": "", "project_url": "https://pypi.org/project/hitbtc-wss/", "project_urls": {"Homepage": "https://github.com/mellertson/hitbtc"}, "release_url": "https://pypi.org/project/hitbtc-wss/1.0.6/", "requires_dist": null, "requires_python": "", "summary": "HitBTC Websocket API Client", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>hitbtc_wss</h1>\n<p>HitBTC Websocket API 2.0 Client written in Python 3.</p>\n<p>Forked from <a href=\"https://github.com/Crypto-toolbox/hitbtc_wss\" rel=\"nofollow\">Crypto-toolbox/hitbtc_wss</a>.  At the time of this writing,\nCrypto-toolbox had not accepted a pull request into his repo in 7 months.  Seems like they might have\nmoved on to do other things.  I figured I'd pick the ball up and run with it.</p>\n<h1>Release History</h1>\n<table>\n<thead>\n<tr>\n<th>Date</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>09/02/2018</td>\n<td>Published bug fix to PyPi so the <code>login</code> method works with HitBTC v2 login method.</td>\n</tr></tbody></table>\n<p>The client supplies data both visually via console, as well as python objects via its <code>HitBTC.recv()</code>.\nIt's important to note that this does not receive data from the API directly -\ninstead, the data is pulled from a <code>queue.Queue</code> object, which defaults to a length of\n100 items. So only the last 100 messages will be cached - either make sure you process the messages\nfast enough, or increase the length of the queue (can be done by passing the <code>q_maxsize</code> kwarg on\ninstantiation).</p>\n<p>By default, data is unpacked - that means you will never see the raw <code>JSONRPC</code> message\n(this, too, can be turned off by passing <code>raw=True</code> upon initialization). This will, however, also\nturn off all handling of error messages etc.</p>\n<p>For an in-depth description of the client and its methods, please see the documenation at\n<a href=\"http://hitbtc-websocket-api-20-client.readthedocs.io/en/latest/\" rel=\"nofollow\">readthedocs.org</a></p>\n<h1>Installation</h1>\n<p>Stable: <code>pip install hitbtc_wss</code>\nRelease Candidate: <code>pip install --pre hitbtc_wss</code></p>\n<h1>Example Usage</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">queue</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hitbtc_wss</span> <span class=\"kn\">import</span> <span class=\"n\">HitBTC</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">HitBTC</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>  <span class=\"c1\"># start the websocket connection</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Give the socket some time to connect</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">subscribe_ticker</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'ETHBTC'</span><span class=\"p\">)</span> <span class=\"c1\"># Subscribe to ticker data for the pair ETHBTC</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Empty</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>\n\n    <span class=\"c1\"># process data from websocket</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 4232995, "releases": {"1.0.6": [{"comment_text": "", "digests": {"md5": "b66e4b872bdfaf3d1a21f319421bcd93", "sha256": "636e8301413df09d10535ce73dcc61f984528f2621039040f51df8fa904386e5"}, "downloads": -1, "filename": "hitbtc_wss-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b66e4b872bdfaf3d1a21f319421bcd93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9504, "upload_time": "2018-09-03T01:14:28", "upload_time_iso_8601": "2018-09-03T01:14:28.306703Z", "url": "https://files.pythonhosted.org/packages/8a/40/04ca651ead2343f076119e6e69f8f6c5ac1631c3eb4cd5b001ffef103f92/hitbtc_wss-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b66e4b872bdfaf3d1a21f319421bcd93", "sha256": "636e8301413df09d10535ce73dcc61f984528f2621039040f51df8fa904386e5"}, "downloads": -1, "filename": "hitbtc_wss-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b66e4b872bdfaf3d1a21f319421bcd93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9504, "upload_time": "2018-09-03T01:14:28", "upload_time_iso_8601": "2018-09-03T01:14:28.306703Z", "url": "https://files.pythonhosted.org/packages/8a/40/04ca651ead2343f076119e6e69f8f6c5ac1631c3eb4cd5b001ffef103f92/hitbtc_wss-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:04 2020"}