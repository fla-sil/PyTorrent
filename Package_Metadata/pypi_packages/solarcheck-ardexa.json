{"info": {"author": "Ardexa Pty Limited", "author_email": "support@ardexa.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# Purpose\nPhoenix Contact supply solar string monitors. The purpose of this project is to collect data from Phoenix Contact SOLARCHECK string monitors and send the data to your cloud using Ardexa. Data from solarcheck string monitors is read using an Ethernet connection using Modbus RTU (over Ethernet) and a Linux device such as a Raspberry Pi, or an X86 intel powered computer. \n\n## How does it work\nThis application is written in Python. This application will query 1 or more connected inverters at regular intervals. Data will be written to log files on disk in a directory specified by the user. Usage and command line parameters are shown below.\n\n## Install\nOn a raspberry Pi, or other Linux machines (arm, intel, mips or whetever), make sure Python is installed (which it should be). Then install the package as follows:\n```\nsudo pip install solarcheck_ardexa\n```\n\n## Usage\n- This script will query a single Phoenix Contact SOLARCHECK string monitor.\n- To discover RS485 address range and print out the inverter metadata\n```\nUsage: solarcheck_ardexa discover ip_address port rs485_addresses strings\nEg; solarcheck_ardexa discover 192.168.1.2 502 10-20 3\n```\n\nSend production data to a file on disk \n```\nUsage: solarcheck_ardexa ip_address port rs485_addresses log_directory strings\nEg; solarcheck_ardexa get 192.168.1.2 502 14-21 /opt/ardexa 8\n```\n{IP Address} = IP address of the string combiner, eg; 192.168.1.2\n{Port} = Modbus port, eg; 502\n{RS485 Address(es)} = RS485 address or range of addresses, eg; 1-5 or 1,2,3 or 4 (for example)\n{log directory} = logging directory, eg; /opt/ardexa/\n{number of strings to query} = 3  (can query up to 8 strings)\nTo view debug output, increase the verbosity using the `-v` flag.\n- standard (no messages, except errors), `-v` (discovery messages) or `-vv` (all messages)\n\n\n## Collecting to the Ardexa cloud\nCollecting to the Ardexa cloud is free for up to 3 x Raspberry Pis (or equivalent). Ardexa provides free agents for ARM, Intel x86 and MIPS based processors. To collect the data to the Ardexa cloud do the following:\n- Create a `RUN` scenario to schedule the Ardexa PVS 800 script to run at regular intervals (say every 300 seconds/5 minutes).\n- Then use a `CAPTURE` scenario to collect the csv (comma separated) data from the filename (say) `/opt/ardexa/logs/`. This file contains a header entry (as the first line) that describes the CSV elements of the file.\n\n## Help\nContact Ardexa at support@ardexa.com, and we'll do our best efforts to help.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ardexa/solarcheck-strings", "keywords": "Phoenix Contact SOLARCHECK solar string monitor ardexa", "license": "", "maintainer": "", "maintainer_email": "", "name": "solarcheck-ardexa", "package_url": "https://pypi.org/project/solarcheck-ardexa/", "platform": "", "project_url": "https://pypi.org/project/solarcheck-ardexa/", "project_urls": {"Bug Reports": "https://github.com/ardexa/solarcheck-strings/issues", "Homepage": "https://github.com/ardexa/solarcheck-strings", "Source": "https://github.com/ardexa/solarcheck-strings/"}, "release_url": "https://pypi.org/project/solarcheck-ardexa/1.3.0/", "requires_dist": ["future", "ardexaplugin", "Click"], "requires_python": ">=2.7", "summary": "Collect from Phoenix Contact SOLARCHECK String Monitor and send the data to your cloud using Ardexa", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Purpose\nPhoenix Contact supply solar string monitors. The purpose of this project is to collect data from Phoenix Contact SOLARCHECK string monitors and send the data to your cloud using Ardexa. Data from solarcheck string monitors is read using an Ethernet connection using Modbus RTU (over Ethernet) and a Linux device such as a Raspberry Pi, or an X86 intel powered computer.</p>\n<p>## How does it work\nThis application is written in Python. This application will query 1 or more connected inverters at regular intervals. Data will be written to log files on disk in a directory specified by the user. Usage and command line parameters are shown below.</p>\n<p>## Install\nOn a raspberry Pi, or other Linux machines (arm, intel, mips or whetever), make sure Python is installed (which it should be). Then install the package as follows:\n<tt>`\nsudo pip install solarcheck_ardexa\n`</tt></p>\n<p>## Usage\n- This script will query a single Phoenix Contact SOLARCHECK string monitor.\n- To discover RS485 address range and print out the inverter metadata\n<tt>`\nUsage: solarcheck_ardexa discover ip_address port rs485_addresses strings\nEg; solarcheck_ardexa discover 192.168.1.2 502 <span class=\"pre\">10-20</span> 3\n`</tt></p>\n<p>Send production data to a file on disk\n<tt>`\nUsage: solarcheck_ardexa ip_address port rs485_addresses log_directory strings\nEg; solarcheck_ardexa get 192.168.1.2 502 <span class=\"pre\">14-21</span> /opt/ardexa 8\n`</tt>\n{IP Address} = IP address of the string combiner, eg; 192.168.1.2\n{Port} = Modbus port, eg; 502\n{RS485 Address(es)} = RS485 address or range of addresses, eg; 1-5 or 1,2,3 or 4 (for example)\n{log directory} = logging directory, eg; /opt/ardexa/\n{number of strings to query} = 3  (can query up to 8 strings)\nTo view debug output, increase the verbosity using the <cite>-v</cite> flag.\n- standard (no messages, except errors), <cite>-v</cite> (discovery messages) or <cite>-vv</cite> (all messages)</p>\n<p>## Collecting to the Ardexa cloud\nCollecting to the Ardexa cloud is free for up to 3 x Raspberry Pis (or equivalent). Ardexa provides free agents for ARM, Intel x86 and MIPS based processors. To collect the data to the Ardexa cloud do the following:\n- Create a <cite>RUN</cite> scenario to schedule the Ardexa PVS 800 script to run at regular intervals (say every 300 seconds/5 minutes).\n- Then use a <cite>CAPTURE</cite> scenario to collect the csv (comma separated) data from the filename (say) <cite>/opt/ardexa/logs/</cite>. This file contains a header entry (as the first line) that describes the CSV elements of the file.</p>\n<p>## Help\nContact Ardexa at <a href=\"mailto:support%40ardexa.com\">support<span>@</span>ardexa<span>.</span>com</a>, and we\u2019ll do our best efforts to help.</p>\n\n          </div>"}, "last_serial": 4561059, "releases": {"1.3.0": [{"comment_text": "", "digests": {"md5": "91e05c3e6bb9d35eb08d867f354a93f2", "sha256": "a4c3121c20e70c281e2cc0abfbceea3dc48703a1ca415520a7e044c458933589"}, "downloads": -1, "filename": "solarcheck_ardexa-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "91e05c3e6bb9d35eb08d867f354a93f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 8384, "upload_time": "2018-05-01T04:42:47", "upload_time_iso_8601": "2018-05-01T04:42:47.743094Z", "url": "https://files.pythonhosted.org/packages/15/83/afef68b57f5fba3fc1717a9b625ac68c963e37005b5c606ace63d11dcf70/solarcheck_ardexa-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a44ca1b1c75acec3c503624b989f6e3", "sha256": "0e12781a3f427736169dad8a31d5376eb3cd2499a9434a020ff9468361db4247"}, "downloads": -1, "filename": "solarcheck_ardexa-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7a44ca1b1c75acec3c503624b989f6e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6046, "upload_time": "2018-05-01T04:42:49", "upload_time_iso_8601": "2018-05-01T04:42:49.286128Z", "url": "https://files.pythonhosted.org/packages/d7/50/da9122cdd07bd1c225cc45ab66eac177cd108e83fbdc6ed4b0bd7f60c134/solarcheck_ardexa-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91e05c3e6bb9d35eb08d867f354a93f2", "sha256": "a4c3121c20e70c281e2cc0abfbceea3dc48703a1ca415520a7e044c458933589"}, "downloads": -1, "filename": "solarcheck_ardexa-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "91e05c3e6bb9d35eb08d867f354a93f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 8384, "upload_time": "2018-05-01T04:42:47", "upload_time_iso_8601": "2018-05-01T04:42:47.743094Z", "url": "https://files.pythonhosted.org/packages/15/83/afef68b57f5fba3fc1717a9b625ac68c963e37005b5c606ace63d11dcf70/solarcheck_ardexa-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a44ca1b1c75acec3c503624b989f6e3", "sha256": "0e12781a3f427736169dad8a31d5376eb3cd2499a9434a020ff9468361db4247"}, "downloads": -1, "filename": "solarcheck_ardexa-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7a44ca1b1c75acec3c503624b989f6e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6046, "upload_time": "2018-05-01T04:42:49", "upload_time_iso_8601": "2018-05-01T04:42:49.286128Z", "url": "https://files.pythonhosted.org/packages/d7/50/da9122cdd07bd1c225cc45ab66eac177cd108e83fbdc6ed4b0bd7f60c134/solarcheck_ardexa-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:51 2020"}