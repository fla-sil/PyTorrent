{"info": {"author": "Palo Alto Networks", "author_email": "techbizdev@paloaltonetworks.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Topic :: Internet", "Topic :: Security"], "description": "# girolamo\n\nJSON/YAML serializable templates for dict-to-dict transformations.\n\n## Quickstart\n\n### Installation\n\n```shell\n$ pip install -r requirements-dev.txt\n$ pip install .\n```\n\n### Hello World !\n\n```python\nfrom girolamo import Template\n\nHELLO_WORLD_TPL = {\n    'a': 'Girolamo fecit',\n    'hw': {'$list-join': [' ', ['$$a', '$$b', '!']]},\n}\n\nDICTIN = {\n    'a': 'Hello',\n    'b': 'World'\n}\n\nctemplate = Template.compile(HELLO_WORLD_TPL)\ndictout = ctemplate.eval(data=DICTIN)\nprint dictout\n```\n\nResult\n\n```python\n{'a': 'Girolamo fecit', 'hw': 'Hello World !'}\n```\n\n### Templates in YAML/JSON\n\n*girolamo* templates can be directly represented in YAML:\n\n```yaml\na: Girolamo fecit\nhw:\n  $list-join:\n  - ' '\n  - [$$a, $$b, '!']\n ```\n\n and JSON\n\n ```json\n {\n    \"a\": \"Girolamo fecit\",\n    \"hw\": {\n        \"$list-join\": [\n            \" \",\n            [ \"$$a\", \"$$b\", \"!\" ]\n        ]\n    }\n}\n ```\n\n## Templates\n\nTemplates in *girolamo* are dictionaries. The value of each key in the template is an expression. Each key in the template becomes a key in the output dictionary with value the result of the evaluation of the associated expression.\n\n## Expressions\n\n|Expression *exp*|Value *eval(exp)*|\n|----------|-----|\n|*number*|The number|\n|*string*|The string|\n|*None*|*None*|\n|{ key1: *exp1*, key2: *exp2*, ... }|The dictionary { key1: *eval(exp1)*, key2: *eval(exp2)*, ... }|\n|[ *exp1*, *exp2*, ... ]|The list [ *eval(exp1)*, *eval(exp2)*, ... ]|\n|$$*key*|The value of *key* in the input dictionary|\n|$*symbol*|The value of *symbol* in the current environment|\n|{$*function*: [ *exp1*, *exp2*, ... ]}|The result of calling *function* with [ *eval(exp1)*, *eval(exp2)*, ... ]|\n|{$*function*: *exp1*}|The result of calling *function* with [ *eval(exp1)* ]|\n\n### if...then...else\n\nThe special function *if* can be used for conditionals. The format is:\n\n```python\n{\n    \"$if\": [\n        pred,\n        conseq,\n        alt\n    ]\n}\n```\n\nwhere *pred*, *conseq* and *alt* are expressions. If *pred* is true then *conseq* is evaluated and the result is returned, otherwise *conseq* is evaluated and the result returned.\n\nExample:\n\n```yaml\n# is_network is true if __indicator is an IP Network\nis_network:\n    $if:\n    - { $is-unicast: $$__indicator }\n    - false\n    - true\n```\n\n### Match\n\nThe special function *match* can be used to select between multiple options. The format is:\n\n```python\n{\n    \"$match\": [\n        var,\n        [pred1, exp1], [pred2, exp2], ...],\n        default\n    ]\n}\n```\n\nThe expression *var* is evaluated and the value compared in order with the predicate expressions *pred1*, *pred2*, ... When a predicate expression is true the associated expression is evaluated and the result is returned. If none of the predicate expressions is true *default* is evaluated and the result returned.\n\nExample:\n\n```yaml\n# ip_version is set to 4 if the type key of the input dictionary is \"IPv4\"\n# set to 6 if the type key is \"IPv6\"\n# set to null/None otherwise\nip_version:\n    $match:\n    - $$type\n    - [[\"IPv4\", 4], [\"IPv6\", 6]]\n    - null\n```\n\n### Assignments\n\nThe special function *define* can be used to assign a value to a symbol in the current environment. The format is:\n\n```python\n{\n    \"$define\": [\n        symbol,\n        value\n    ]\n}\n```\n\nThe expression *value* is evaluated and the result assigned to *symbol* in the current environment. Return value of *define* is *None*.\n\n### Lambdas\n\nThe special function *lambda* can be used to define anonymous functions. The format is:\n\n```python\n{\n    \"$lambda\": [\n        [ formal1, formal2, ... ],\n        body\n    ]\n}\n```\n\nIf a single formal is required the needed could also be:\n\n```python\n{\n    \"$lambda\": [\n        formal1,\n        body\n    ]\n}\n```\n\n### Quick lambdas\n\nA function call with paramater *$_* evaluates in a lambda function. Basically the format:\n\n```python\n{\n    \"$function\": [ exp1, exp2, \"$_\" ]\n}\n```\n\nis equivalent to:\n\n```python\n{\n    \"$lambda\": [\n        \"$_\",\n        { \"$function\": [ exp1, exp2, \"$_\" ] }\n     ]\n}\n```\n\n## Globals in template ($ Keys)\n\nA template key starting with *$* is handled as the definition of a global symbol that can be used in the evaluation of all the template keys.\n\nExample:\n\n```python\n{\n    # defines the interesting-fields symbol\n    \"$interesting-fields\": [\n      \"phishme_threatType\",\n      \"phishme_label\",\n      \"phishme_threatDetailURL\",\n      \"recordedfuture_entityurl\",\n      \"proofpoint_etintelligence_max_score\",\n      \"proofpoint_etintelligence_categories\",\n      \"bambenekconsulting_description\",\n      \"bambenekconsulting_info\"\n    ]\n}\n```", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jtschichold/girolamo", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "girolamo", "package_url": "https://pypi.org/project/girolamo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/girolamo/", "project_urls": {"Homepage": "https://github.com/jtschichold/girolamo"}, "release_url": "https://pypi.org/project/girolamo/0.1b1/", "requires_dist": null, "requires_python": null, "summary": "A Dict-to-Dict YAML/JSON serializable template language", "version": "0.1b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # girolamo<br><br>JSON/YAML serializable templates for dict-to-dict transformations.<br><br>## Quickstart<br><br>### Installation<br><br>```shell<br>$ pip install -r requirements-dev.txt<br>$ pip install .<br>```<br><br>### Hello World !<br><br>```python<br>from girolamo import Template<br><br>HELLO_WORLD_TPL = {<br>    'a': 'Girolamo fecit',<br>    'hw': {'$list-join': [' ', ['$$a', '$$b', '!']]},<br>}<br><br>DICTIN = {<br>    'a': 'Hello',<br>    'b': 'World'<br>}<br><br>ctemplate = Template.compile(HELLO_WORLD_TPL)<br>dictout = ctemplate.eval(data=DICTIN)<br>print dictout<br>```<br><br>Result<br><br>```python<br>{'a': 'Girolamo fecit', 'hw': 'Hello World !'}<br>```<br><br>### Templates in YAML/JSON<br><br>*girolamo* templates can be directly represented in YAML:<br><br>```yaml<br>a: Girolamo fecit<br>hw:<br>  $list-join:<br>  - ' '<br>  - [$$a, $$b, '!']<br> ```<br><br> and JSON<br><br> ```json<br> {<br>    \"a\": \"Girolamo fecit\",<br>    \"hw\": {<br>        \"$list-join\": [<br>            \" \",<br>            [ \"$$a\", \"$$b\", \"!\" ]<br>        ]<br>    }<br>}<br> ```<br><br>## Templates<br><br>Templates in *girolamo* are dictionaries. The value of each key in the template is an expression. Each key in the template becomes a key in the output dictionary with value the result of the evaluation of the associated expression.<br><br>## Expressions<br><br>|Expression *exp*|Value *eval(exp)*|<br>|----------|-----|<br>|*number*|The number|<br>|*string*|The string|<br>|*None*|*None*|<br>|{ key1: *exp1*, key2: *exp2*, ... }|The dictionary { key1: *eval(exp1)*, key2: *eval(exp2)*, ... }|<br>|[ *exp1*, *exp2*, ... ]|The list [ *eval(exp1)*, *eval(exp2)*, ... ]|<br>|$$*key*|The value of *key* in the input dictionary|<br>|$*symbol*|The value of *symbol* in the current environment|<br>|{$*function*: [ *exp1*, *exp2*, ... ]}|The result of calling *function* with [ *eval(exp1)*, *eval(exp2)*, ... ]|<br>|{$*function*: *exp1*}|The result of calling *function* with [ *eval(exp1)* ]|<br><br>### if...then...else<br><br>The special function *if* can be used for conditionals. The format is:<br><br>```python<br>{<br>    \"$if\": [<br>        pred,<br>        conseq,<br>        alt<br>    ]<br>}<br>```<br><br>where *pred*, *conseq* and *alt* are expressions. If *pred* is true then *conseq* is evaluated and the result is returned, otherwise *conseq* is evaluated and the result returned.<br><br>Example:<br><br>```yaml<br># is_network is true if __indicator is an IP Network<br>is_network:<br>    $if:<br>    - { $is-unicast: $$__indicator }<br>    - false<br>    - true<br>```<br><br>### Match<br><br>The special function *match* can be used to select between multiple options. The format is:<br><br>```python<br>{<br>    \"$match\": [<br>        var,<br>        [pred1, exp1], [pred2, exp2], ...],<br>        default<br>    ]<br>}<br>```<br><br>The expression *var* is evaluated and the value compared in order with the predicate expressions *pred1*, *pred2*, ... When a predicate expression is true the associated expression is evaluated and the result is returned. If none of the predicate expressions is true *default* is evaluated and the result returned.<br><br>Example:<br><br>```yaml<br># ip_version is set to 4 if the type key of the input dictionary is \"IPv4\"<br># set to 6 if the type key is \"IPv6\"<br># set to null/None otherwise<br>ip_version:<br>    $match:<br>    - $$type<br>    - [[\"IPv4\", 4], [\"IPv6\", 6]]<br>    - null<br>```<br><br>### Assignments<br><br>The special function *define* can be used to assign a value to a symbol in the current environment. The format is:<br><br>```python<br>{<br>    \"$define\": [<br>        symbol,<br>        value<br>    ]<br>}<br>```<br><br>The expression *value* is evaluated and the result assigned to *symbol* in the current environment. Return value of *define* is *None*.<br><br>### Lambdas<br><br>The special function *lambda* can be used to define anonymous functions. The format is:<br><br>```python<br>{<br>    \"$lambda\": [<br>        [ formal1, formal2, ... ],<br>        body<br>    ]<br>}<br>```<br><br>If a single formal is required the needed could also be:<br><br>```python<br>{<br>    \"$lambda\": [<br>        formal1,<br>        body<br>    ]<br>}<br>```<br><br>### Quick lambdas<br><br>A function call with paramater *$_* evaluates in a lambda function. Basically the format:<br><br>```python<br>{<br>    \"$function\": [ exp1, exp2, \"$_\" ]<br>}<br>```<br><br>is equivalent to:<br><br>```python<br>{<br>    \"$lambda\": [<br>        \"$_\",<br>        { \"$function\": [ exp1, exp2, \"$_\" ] }<br>     ]<br>}<br>```<br><br>## Globals in template ($ Keys)<br><br>A template key starting with *$* is handled as the definition of a global symbol that can be used in the evaluation of all the template keys.<br><br>Example:<br><br>```python<br>{<br>    # defines the interesting-fields symbol<br>    \"$interesting-fields\": [<br>      \"phishme_threatType\",<br>      \"phishme_label\",<br>      \"phishme_threatDetailURL\",<br>      \"recordedfuture_entityurl\",<br>      \"proofpoint_etintelligence_max_score\",<br>      \"proofpoint_etintelligence_categories\",<br>      \"bambenekconsulting_description\",<br>      \"bambenekconsulting_info\"<br>    ]<br>}<br>```\n          </div>"}, "last_serial": 2576103, "releases": {"0.1b1": []}, "urls": [], "timestamp": "Fri May  8 00:57:13 2020"}