{"info": {"author": "Markus Holtermann", "author_email": "info@markusholtermann.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Flask", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "# flask-pancake\n\n![GitHub Workflow Status (branch)](https://img.shields.io/github/workflow/status/MarkusH/flask-pancake/CI/master?style=for-the-badge)\n![Codecov branch](https://img.shields.io/codecov/c/gh/MarkusH/flask-pancake/master?style=for-the-badge)\n![PyPI](https://img.shields.io/pypi/v/flask-pancake?style=for-the-badge)\n\nFeature Flagging for Flask\n\nThis library was heavily inspired by\n[django-waffle](https://github.com/django-waffle/django-waffle).\n\n## Installation\n\n`flask-pancake` depends on [Redis](https://redis.io/) and the [flask-redis](https://pypi.org/project/flask-redis/) Python package.\n\n```bash\n$ python -m pip install flask-pancake\nSuccessfully installed flask-pancake\n```\n\n```python\nfrom flask import Flask\nfrom flask_pancake import FlaskPancake, Switch\nfrom flask_redis import FlaskRedis\n\napp = Flask(__name__)\npancake = FlaskPancake(app)\nredis = FlaskRedis(app)\n\nSWITCH_FEATURE = Switch(\"FEATURE\", default=False)\n\n\n@app.route(\"/\")\ndef index():\n    if SWITCH_FEATURE.is_active():\n        return \"Hello World!\", 200\n    else:\n        return \"Not found\", 404\n```\n\nAlternatively, if you use a `create_app()` method to configure your Flask app,\nuse `pancake.init_app()`:\n\n```python\nfrom flask import Flask\nfrom flask_pancake import FlaskPancake\n\npancake = FlaskPancake()\n\n\ndef create_app() -> Flask:\n    app = Flask(__name__)\n    pancake.init_app(app)\n    return app\n```\n\n## Usage\n\n`flask-pancake` provides three types of flags:\n\n* `Switch`es, which are either globally active or inactive. A common use case\n  for these are system-wide enabling or disabling of a feature. E.g. in the\n  context of a dependency on a third party service, disabling a feature with a\n  global switch when that service is unavailable.\n\n* `Flag`s are like Switches but can be overridden for individual groups. To\n  make use of Flags, one needs to define at least one function that returns a\n  group's unique ID or `None`. Groups can be anything that you want users to be\n  grouped by: their user ID (which would allow per-user enabling/disabling of\n  features), a user's attribute, such as \"is_superuser\" or \"is_staff\", or\n  anything else that you can think of.\n\n  The groups are tried in order. The first one to match will be used. Meaning,\n  more specific functions should be defined first, less specific functions last.\n\n  ```python\n  from flask import request\n  from flask_pancake import FlaskPancake\n\n  def get_group_user():\n      # If the `request` object has a `user` attribute and the `user` object\n      # has a `uid` attribute, return that.\n      return getattr(getattr(request, \"user\", None), \"uid\", None)\n\n  def get_group_superuser():\n      # If the `request` object has a `user` attribute and the `user` object\n      # has an `is_superuser` attribute, return \"y\" if that is boolean `True`\n      # or \"n\" if it isn't.\n      return getattr(getattr(request, \"user\", None), \"is_superuser\", None) and \"y\" or \"n\"\n\n  pancake = FlaskPancake(\n      group_funcs={\"user\", get_group_user, \"superuser\", get_group_superuser}\n  )\n  # Or, if importing a function from somewhere isn't possible, a string based\n  # approach can be used.\n  # Separate the the fully qualified module path from the function with a `:`\n  pancake = FlaskPancake(\n      group_funcs={\n          \"user\", \"my.app.account.utils:get_group_user\",\n          \"superuser\", \"my.app.account.utils:get_group_superuser\",\n      }\n  )\n  ```\n\n  In the example, whenever one checks for a `Flag`, FlaskPancake would check if\n  a value has been set in the following order:\n\n  1. Is the flag disable/enable for the current user?\n  1. If not, is the flag disable/enabled for superusers/non-superusers?\n  1. If not, is the flag disable/enabled by default?\n\n* `Sample`s, have a global \"ratio\" of 0 - 100%. Each time a check is done on a\n  sample, a random value is checked within these bounds. Hence:\n\n  ```python\n  # DO THIS!\n  def foo():\n      is_active = MY_SAMPLE.is_active()\n      if is_active:\n          # do something\n          pass\n      ...\n      if is_active:\n          # do more\n          pass\n\n  # DO NOT DO THIS!\n  def foo():\n      if MY_SAMPLE.is_active():\n          # do something\n          pass\n      ...\n      if MY_SAMPLE.is_active():\n          # do more\n          pass\n  ```\n\n  In the second example, each call to `is_active()` will be evaluated again.\n  Thus, the first block might be executed, but the second might not (or vice\n  versa).\n\nThe persisted state for all three types of feature flags can be cleared, using\nthe `clear()` method.\n\nSimilarly, one can change the persisted state for Flags and Switches using\ntheir `disable()` and `enable()` methods. Samples can be updated using their\n`set(value: float)` method.\n\nWhen using `Flag`s, there are `clear_group(group_id)` and\n`clear_all_group(group_id)` methods, to clear the state for the current or all\nusers within a group. Along the same line, there are `disable_group(group_id)`\nand `enable_group(group_id)` to set the group's state the current user is part\nof.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MarkusH/flask-pancake", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flask-pancake", "package_url": "https://pypi.org/project/flask-pancake/", "platform": "", "project_url": "https://pypi.org/project/flask-pancake/", "project_urls": {"Homepage": "https://github.com/MarkusH/flask-pancake"}, "release_url": "https://pypi.org/project/flask-pancake/0.3.0/", "requires_dist": ["flask (>=1.0)", "flask-redis (>=0.4.0)", "cached-property (<2,>=1.5)", "pytest (<5.4,>=5.3) ; extra == 'testing'", "pytest-cov (<3,>=2.8) ; extra == 'testing'"], "requires_python": ">=3.7", "summary": "Feature Flagging for Flask", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>flask-pancake</h1>\n<p><img alt=\"GitHub Workflow Status (branch)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/932cc867cd43960dc1231f5297a7013c294aa3e3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f4d61726b7573482f666c61736b2d70616e63616b652f43492f6d61737465723f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"Codecov branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36241dc1ca41140f1cfbe9ea7c6cfd4fc81a126f/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f4d61726b7573482f666c61736b2d70616e63616b652f6d61737465723f7374796c653d666f722d7468652d6261646765\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54a35826c8e9c065d062ece88d70738944468bc8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b2d70616e63616b653f7374796c653d666f722d7468652d6261646765\"></p>\n<p>Feature Flagging for Flask</p>\n<p>This library was heavily inspired by\n<a href=\"https://github.com/django-waffle/django-waffle\" rel=\"nofollow\">django-waffle</a>.</p>\n<h2>Installation</h2>\n<p><code>flask-pancake</code> depends on <a href=\"https://redis.io/\" rel=\"nofollow\">Redis</a> and the <a href=\"https://pypi.org/project/flask-redis/\" rel=\"nofollow\">flask-redis</a> Python package.</p>\n<pre>$ python -m pip install flask-pancake\nSuccessfully installed flask-pancake\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_pancake</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskPancake</span><span class=\"p\">,</span> <span class=\"n\">Switch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_redis</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskRedis</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">pancake</span> <span class=\"o\">=</span> <span class=\"n\">FlaskPancake</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n<span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">FlaskRedis</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"n\">SWITCH_FEATURE</span> <span class=\"o\">=</span> <span class=\"n\">Switch</span><span class=\"p\">(</span><span class=\"s2\">\"FEATURE\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">SWITCH_FEATURE</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Hello World!\"</span><span class=\"p\">,</span> <span class=\"mi\">200</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Not found\"</span><span class=\"p\">,</span> <span class=\"mi\">404</span>\n</pre>\n<p>Alternatively, if you use a <code>create_app()</code> method to configure your Flask app,\nuse <code>pancake.init_app()</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_pancake</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskPancake</span>\n\n<span class=\"n\">pancake</span> <span class=\"o\">=</span> <span class=\"n\">FlaskPancake</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Flask</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n    <span class=\"n\">pancake</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n</pre>\n<h2>Usage</h2>\n<p><code>flask-pancake</code> provides three types of flags:</p>\n<ul>\n<li>\n<p><code>Switch</code>es, which are either globally active or inactive. A common use case\nfor these are system-wide enabling or disabling of a feature. E.g. in the\ncontext of a dependency on a third party service, disabling a feature with a\nglobal switch when that service is unavailable.</p>\n</li>\n<li>\n<p><code>Flag</code>s are like Switches but can be overridden for individual groups. To\nmake use of Flags, one needs to define at least one function that returns a\ngroup's unique ID or <code>None</code>. Groups can be anything that you want users to be\ngrouped by: their user ID (which would allow per-user enabling/disabling of\nfeatures), a user's attribute, such as \"is_superuser\" or \"is_staff\", or\nanything else that you can think of.</p>\n<p>The groups are tried in order. The first one to match will be used. Meaning,\nmore specific functions should be defined first, less specific functions last.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_pancake</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskPancake</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_group_user</span><span class=\"p\">():</span>\n    <span class=\"c1\"># If the `request` object has a `user` attribute and the `user` object</span>\n    <span class=\"c1\"># has a `uid` attribute, return that.</span>\n    <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"s2\">\"uid\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_group_superuser</span><span class=\"p\">():</span>\n    <span class=\"c1\"># If the `request` object has a `user` attribute and the `user` object</span>\n    <span class=\"c1\"># has an `is_superuser` attribute, return \"y\" if that is boolean `True`</span>\n    <span class=\"c1\"># or \"n\" if it isn't.</span>\n    <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"s2\">\"is_superuser\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"s2\">\"y\"</span> <span class=\"ow\">or</span> <span class=\"s2\">\"n\"</span>\n\n<span class=\"n\">pancake</span> <span class=\"o\">=</span> <span class=\"n\">FlaskPancake</span><span class=\"p\">(</span>\n    <span class=\"n\">group_funcs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"n\">get_group_user</span><span class=\"p\">,</span> <span class=\"s2\">\"superuser\"</span><span class=\"p\">,</span> <span class=\"n\">get_group_superuser</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Or, if importing a function from somewhere isn't possible, a string based</span>\n<span class=\"c1\"># approach can be used.</span>\n<span class=\"c1\"># Separate the the fully qualified module path from the function with a `:`</span>\n<span class=\"n\">pancake</span> <span class=\"o\">=</span> <span class=\"n\">FlaskPancake</span><span class=\"p\">(</span>\n    <span class=\"n\">group_funcs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my.app.account.utils:get_group_user\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"superuser\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my.app.account.utils:get_group_superuser\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>In the example, whenever one checks for a <code>Flag</code>, FlaskPancake would check if\na value has been set in the following order:</p>\n<ol>\n<li>Is the flag disable/enable for the current user?</li>\n<li>If not, is the flag disable/enabled for superusers/non-superusers?</li>\n<li>If not, is the flag disable/enabled by default?</li>\n</ol>\n</li>\n<li>\n<p><code>Sample</code>s, have a global \"ratio\" of 0 - 100%. Each time a check is done on a\nsample, a random value is checked within these bounds. Hence:</p>\n<pre><span class=\"c1\"># DO THIS!</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"n\">is_active</span> <span class=\"o\">=</span> <span class=\"n\">MY_SAMPLE</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_active</span><span class=\"p\">:</span>\n        <span class=\"c1\"># do something</span>\n        <span class=\"k\">pass</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_active</span><span class=\"p\">:</span>\n        <span class=\"c1\"># do more</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># DO NOT DO THIS!</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">MY_SAMPLE</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">():</span>\n        <span class=\"c1\"># do something</span>\n        <span class=\"k\">pass</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">if</span> <span class=\"n\">MY_SAMPLE</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">():</span>\n        <span class=\"c1\"># do more</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>In the second example, each call to <code>is_active()</code> will be evaluated again.\nThus, the first block might be executed, but the second might not (or vice\nversa).</p>\n</li>\n</ul>\n<p>The persisted state for all three types of feature flags can be cleared, using\nthe <code>clear()</code> method.</p>\n<p>Similarly, one can change the persisted state for Flags and Switches using\ntheir <code>disable()</code> and <code>enable()</code> methods. Samples can be updated using their\n<code>set(value: float)</code> method.</p>\n<p>When using <code>Flag</code>s, there are <code>clear_group(group_id)</code> and\n<code>clear_all_group(group_id)</code> methods, to clear the state for the current or all\nusers within a group. Along the same line, there are <code>disable_group(group_id)</code>\nand <code>enable_group(group_id)</code> to set the group's state the current user is part\nof.</p>\n\n          </div>"}, "last_serial": 7106805, "releases": {"0.0.1.dev1": [{"comment_text": "", "digests": {"md5": "b3f5189f283750cd6d16cd7c181fd92d", "sha256": "6697f4f5457d6df87337d9e026e79d1d6618432ce2af6d996d212133ccbad04e"}, "downloads": -1, "filename": "flask_pancake-0.0.1.dev1-py3-none-any.whl", "has_sig": true, "md5_digest": "b3f5189f283750cd6d16cd7c181fd92d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5188, "upload_time": "2020-01-19T23:04:00", "upload_time_iso_8601": "2020-01-19T23:04:00.070819Z", "url": "https://files.pythonhosted.org/packages/4c/60/2786ee7a8864e3ab1dfe3ed49296fcc7d5886167d4c6bf72ee0486d0bddf/flask_pancake-0.0.1.dev1-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "1294c75322f97e44848fe6adb26b37f7", "sha256": "7d2a5f6e95835e210be25fb98727885f4a4494380db6a41d9de0d262a550e6e2"}, "downloads": -1, "filename": "flask_pancake-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1294c75322f97e44848fe6adb26b37f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5563, "upload_time": "2020-01-21T23:36:15", "upload_time_iso_8601": "2020-01-21T23:36:15.044133Z", "url": "https://files.pythonhosted.org/packages/8b/ef/1bf653f0ac82139bcbdc2509c939ba7172004410c67f553bf8b987797299/flask_pancake-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c65f4e70133c8feb8f09a27fbc0c82c", "sha256": "12f98783987eae5c0ebd7b92eac29ed2b0a7d86ab3739d83ece6a32ecd1ce6f8"}, "downloads": -1, "filename": "flask-pancake-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2c65f4e70133c8feb8f09a27fbc0c82c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8870, "upload_time": "2020-01-21T23:36:16", "upload_time_iso_8601": "2020-01-21T23:36:16.443967Z", "url": "https://files.pythonhosted.org/packages/a1/77/75e55f00a67684ef3c2e8e4201369c4c2f6f59e64d7b4b1b5ca43d64039c/flask-pancake-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2335d49d7353604db9e97e3946c1841a", "sha256": "5523de667262fccb6eb3d344da3171a6953a27e0205bd5f688889c42399de2bd"}, "downloads": -1, "filename": "flask_pancake-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2335d49d7353604db9e97e3946c1841a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 7346, "upload_time": "2020-01-26T01:15:17", "upload_time_iso_8601": "2020-01-26T01:15:17.022917Z", "url": "https://files.pythonhosted.org/packages/d8/a4/c4251310fb4d5942003e6626c6bf7a2d78e1bb26cf1c00051ae5ee05382c/flask_pancake-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36fb538754e2a66e6a326300beb2dcbe", "sha256": "5cae1de5891d3012637ad068fcb7a11b2f439b42e4a18d1a072d861006ed9e8f"}, "downloads": -1, "filename": "flask-pancake-0.2.0.tar.gz", "has_sig": false, "md5_digest": "36fb538754e2a66e6a326300beb2dcbe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 12879, "upload_time": "2020-01-26T01:15:18", "upload_time_iso_8601": "2020-01-26T01:15:18.294005Z", "url": "https://files.pythonhosted.org/packages/b5/e8/f14f799dce0c83b285f9db3ec2c5a371fbf7aff41827ac89d433081f8622/flask-pancake-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5c0d02fc2bbef3b4f07656d4c3da5ec0", "sha256": "c2247c42fbfac36e720065dc34724e7c036709cb0ba4c1d33276eede84317419"}, "downloads": -1, "filename": "flask_pancake-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c0d02fc2bbef3b4f07656d4c3da5ec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8293, "upload_time": "2020-04-26T20:41:03", "upload_time_iso_8601": "2020-04-26T20:41:03.696320Z", "url": "https://files.pythonhosted.org/packages/da/a2/68d9761c112cb6a49defe7c8064dcc82df83c4b771bef056b4d13b7420f8/flask_pancake-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3593adfad48fe3afcf6e63444a08ea3", "sha256": "0fe6d6c29014fd5dc2a573e045106e1e313c7b8affe7106d7e1c03e70fbf9fe4"}, "downloads": -1, "filename": "flask-pancake-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f3593adfad48fe3afcf6e63444a08ea3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16529, "upload_time": "2020-04-26T20:41:04", "upload_time_iso_8601": "2020-04-26T20:41:04.806805Z", "url": "https://files.pythonhosted.org/packages/3e/92/4729daf0ee770171a3fb7be895e8b8bc7a20336058aeb38743817617b3b1/flask-pancake-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c0d02fc2bbef3b4f07656d4c3da5ec0", "sha256": "c2247c42fbfac36e720065dc34724e7c036709cb0ba4c1d33276eede84317419"}, "downloads": -1, "filename": "flask_pancake-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c0d02fc2bbef3b4f07656d4c3da5ec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8293, "upload_time": "2020-04-26T20:41:03", "upload_time_iso_8601": "2020-04-26T20:41:03.696320Z", "url": "https://files.pythonhosted.org/packages/da/a2/68d9761c112cb6a49defe7c8064dcc82df83c4b771bef056b4d13b7420f8/flask_pancake-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3593adfad48fe3afcf6e63444a08ea3", "sha256": "0fe6d6c29014fd5dc2a573e045106e1e313c7b8affe7106d7e1c03e70fbf9fe4"}, "downloads": -1, "filename": "flask-pancake-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f3593adfad48fe3afcf6e63444a08ea3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16529, "upload_time": "2020-04-26T20:41:04", "upload_time_iso_8601": "2020-04-26T20:41:04.806805Z", "url": "https://files.pythonhosted.org/packages/3e/92/4729daf0ee770171a3fb7be895e8b8bc7a20336058aeb38743817617b3b1/flask-pancake-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:33 2020"}