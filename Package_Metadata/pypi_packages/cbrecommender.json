{"info": {"author": "Akash S Panickar", "author_email": "akashsabu@ymail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# cbrecommender\n\ncbrecommender is a Python library for implementing a Content-Based Recommendation Engine.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install cbrecommender.\n\n```bash\npip install cbrecommender\n```\n\n## Usage\n\n```python\n# Import the class 'cbr' for Content-Based Recommender.\nfrom cbrecommender import cbr\n\n# Create the object.\nr = cbr()\n\n# OneHotEncode the features\nr.encode_features(features)\n''' \n* features(pandas.DataFrame) can be anything that signifies the user's preferences.\n* For example, movie genres, news topics, post tags etc.\n* Returns a OneHotEncoded dataframe from the features's comma (,) separated values.\n'''\n\n# Extract user's preferences and build the 'User-Profile'.\nr.fit(features, scores)\n''' \n* features(pandas.DataFrame) must be OneHotEncoded and is that of the items of user's choice.\n* scores(list) denote the user's preference to the corresponding items.\n* For example, it can be rating for a movie, song etc. \n* Returns the 'User-Profile', which is the model.\n '''\n# Recommend items based on User-Profile.\nr.recommend(items, features, [score, num])\n''' \n* items(pandas.DataFrame) which denote those items that the user haven't chosen.\n* features(pandas.DataFrame) is that of the items.\n* score(float) is a non-mandatory parameter that specifies the threshold score for recommending items.\n* num(int) is also a non-mandatory parameter that denotes the number of items to be recommended.\n* Returns items along with their expected_score as a pandas.DataFrame object.\n'''\n```\n\n## Example\n```python\nfrom cbrecommender import cbr\nimport pandas\n```\n```python\ndf = pandas.DataFrame(\n{'movie':['Endgame','Avatar','Titanic','Infinity War','Jurassic World','Black Panther',\n          'Harry Potter-II','The Last Jedi'],\n 'genre':['Action,Adventure,Drama','Action,Adventure,Fantasy','Drama,Romance',\n          'Action,Adventure,Sci-Fi','Action,Adventure,Sci-Fi','Action,Adventure,Sci-Fi',\n          'Adventure,Drama,Fantasy','Action,Adventure,Fantasy']\n})\nprint(df)\n```\n| movie | genre |\n--------|--------\n|Endgame|Action,Adventure,Drama|\n|Avatar|Action,Adventure,Fantasy|\n|Titanic|Drama,Romance|\n|Infinity War|Action,Adventure,Sci-Fi|\n|Jurassic World|Action,Adventure,Sci-Fi|\n|Black Panther|Action,Adventure,Sci-Fi|\n|Harry Potter-II|Adventure,Drama,Fantasy|\n|The Last Jedi|Action,Adventure,Fantasy|\n\n```python\nr = cbr()\ngen = r.encode_features(df.genre)\nprint(gen)\n```\n| action | adventure | drama | fantasy | romance | sci-fi |\n-------|-------|--------|---------|------|------|\n|1|1|1|0|0|0|\n|1|1|0|1|0|0|\n|0|0|1|0|1|0|\n|1|1|0|0|0|1|\n|1|1|0|0|0|1|\n|1|1|0|0|0|1|\n|0|1|1|1|0|0|\n|1|1|0|1|0|0|\n\n```python\nrating = [8.5,7.8,7.8,8.5]\nmodel = r.fit(gen.iloc[:4, :], rating)\nprint(r.user_profile)\n```\n| action | adventure | drama | fantasy | romance | sci-fi |\n-------|-------|--------|---------|------|------|\n|0.2755|0.2755|0.1811|0.0866|0.0866|0.0944|\n\n```python\nrecommendations = r.recommend(df[['movie']].iloc[4:,:], gen.iloc[4:,:])\nprint(recommendations)\n```\n| item| expected score |\n--------|--------\n|Jurassic World|6.45|\n|Black Panther|6.45|\n|Harry Potter-II|6.37|\n|The Last Jedi|5.43|\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n[MIT License ](https://github.com/mochatek/cbrecommender/blob/master/LICENSE.txt)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mochatek/cbrecommender", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cbrecommender", "package_url": "https://pypi.org/project/cbrecommender/", "platform": "", "project_url": "https://pypi.org/project/cbrecommender/", "project_urls": {"Homepage": "http://github.com/mochatek/cbrecommender"}, "release_url": "https://pypi.org/project/cbrecommender/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Library for implementing Content-Based Recommendation System", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cbrecommender</h1>\n<p>cbrecommender is a Python library for implementing a Content-Based Recommendation Engine.</p>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install cbrecommender.</p>\n<pre>pip install cbrecommender\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"c1\"># Import the class 'cbr' for Content-Based Recommender.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cbrecommender</span> <span class=\"kn\">import</span> <span class=\"n\">cbr</span>\n\n<span class=\"c1\"># Create the object.</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">cbr</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># OneHotEncode the features</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">encode_features</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">)</span>\n<span class=\"sd\">''' </span>\n<span class=\"sd\">* features(pandas.DataFrame) can be anything that signifies the user's preferences.</span>\n<span class=\"sd\">* For example, movie genres, news topics, post tags etc.</span>\n<span class=\"sd\">* Returns a OneHotEncoded dataframe from the features's comma (,) separated values.</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"c1\"># Extract user's preferences and build the 'User-Profile'.</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">scores</span><span class=\"p\">)</span>\n<span class=\"sd\">''' </span>\n<span class=\"sd\">* features(pandas.DataFrame) must be OneHotEncoded and is that of the items of user's choice.</span>\n<span class=\"sd\">* scores(list) denote the user's preference to the corresponding items.</span>\n<span class=\"sd\">* For example, it can be rating for a movie, song etc. </span>\n<span class=\"sd\">* Returns the 'User-Profile', which is the model.</span>\n<span class=\"sd\"> '''</span>\n<span class=\"c1\"># Recommend items based on User-Profile.</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recommend</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">])</span>\n<span class=\"sd\">''' </span>\n<span class=\"sd\">* items(pandas.DataFrame) which denote those items that the user haven't chosen.</span>\n<span class=\"sd\">* features(pandas.DataFrame) is that of the items.</span>\n<span class=\"sd\">* score(float) is a non-mandatory parameter that specifies the threshold score for recommending items.</span>\n<span class=\"sd\">* num(int) is also a non-mandatory parameter that denotes the number of items to be recommended.</span>\n<span class=\"sd\">* Returns items along with their expected_score as a pandas.DataFrame object.</span>\n<span class=\"sd\">'''</span>\n</pre>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cbrecommender</span> <span class=\"kn\">import</span> <span class=\"n\">cbr</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span>\n</pre>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n<span class=\"p\">{</span><span class=\"s1\">'movie'</span><span class=\"p\">:[</span><span class=\"s1\">'Endgame'</span><span class=\"p\">,</span><span class=\"s1\">'Avatar'</span><span class=\"p\">,</span><span class=\"s1\">'Titanic'</span><span class=\"p\">,</span><span class=\"s1\">'Infinity War'</span><span class=\"p\">,</span><span class=\"s1\">'Jurassic World'</span><span class=\"p\">,</span><span class=\"s1\">'Black Panther'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'Harry Potter-II'</span><span class=\"p\">,</span><span class=\"s1\">'The Last Jedi'</span><span class=\"p\">],</span>\n <span class=\"s1\">'genre'</span><span class=\"p\">:[</span><span class=\"s1\">'Action,Adventure,Drama'</span><span class=\"p\">,</span><span class=\"s1\">'Action,Adventure,Fantasy'</span><span class=\"p\">,</span><span class=\"s1\">'Drama,Romance'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'Action,Adventure,Sci-Fi'</span><span class=\"p\">,</span><span class=\"s1\">'Action,Adventure,Sci-Fi'</span><span class=\"p\">,</span><span class=\"s1\">'Action,Adventure,Sci-Fi'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'Adventure,Drama,Fantasy'</span><span class=\"p\">,</span><span class=\"s1\">'Action,Adventure,Fantasy'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>movie</th>\n<th>genre</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Endgame</td>\n<td>Action,Adventure,Drama</td>\n</tr>\n<tr>\n<td>Avatar</td>\n<td>Action,Adventure,Fantasy</td>\n</tr>\n<tr>\n<td>Titanic</td>\n<td>Drama,Romance</td>\n</tr>\n<tr>\n<td>Infinity War</td>\n<td>Action,Adventure,Sci-Fi</td>\n</tr>\n<tr>\n<td>Jurassic World</td>\n<td>Action,Adventure,Sci-Fi</td>\n</tr>\n<tr>\n<td>Black Panther</td>\n<td>Action,Adventure,Sci-Fi</td>\n</tr>\n<tr>\n<td>Harry Potter-II</td>\n<td>Adventure,Drama,Fantasy</td>\n</tr>\n<tr>\n<td>The Last Jedi</td>\n<td>Action,Adventure,Fantasy</td>\n</tr></tbody></table>\n<pre><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">cbr</span><span class=\"p\">()</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">encode_features</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">genre</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>action</th>\n<th>adventure</th>\n<th>drama</th>\n<th>fantasy</th>\n<th>romance</th>\n<th>sci-fi</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr></tbody></table>\n<pre><span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">8.5</span><span class=\"p\">,</span><span class=\"mf\">7.8</span><span class=\"p\">,</span><span class=\"mf\">7.8</span><span class=\"p\">,</span><span class=\"mf\">8.5</span><span class=\"p\">]</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">rating</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">user_profile</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>action</th>\n<th>adventure</th>\n<th>drama</th>\n<th>fantasy</th>\n<th>romance</th>\n<th>sci-fi</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0.2755</td>\n<td>0.2755</td>\n<td>0.1811</td>\n<td>0.0866</td>\n<td>0.0866</td>\n<td>0.0944</td>\n</tr></tbody></table>\n<pre><span class=\"n\">recommendations</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recommend</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[[</span><span class=\"s1\">'movie'</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:,:],</span> <span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:,:])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">recommendations</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>item</th>\n<th>expected score</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Jurassic World</td>\n<td>6.45</td>\n</tr>\n<tr>\n<td>Black Panther</td>\n<td>6.45</td>\n</tr>\n<tr>\n<td>Harry Potter-II</td>\n<td>6.37</td>\n</tr>\n<tr>\n<td>The Last Jedi</td>\n<td>5.43</td>\n</tr></tbody></table>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<h2>License</h2>\n<p><a href=\"https://github.com/mochatek/cbrecommender/blob/master/LICENSE.txt\" rel=\"nofollow\">MIT License </a></p>\n\n          </div>"}, "last_serial": 7014488, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "36df3ccaf6409d66728570204c00698e", "sha256": "abe6eba71a9a7c24397d7d7ec573c4abad8596e4cfb3e696f57c1b9099b20d30"}, "downloads": -1, "filename": "cbrecommender-0.0.1.tar.gz", "has_sig": false, "md5_digest": "36df3ccaf6409d66728570204c00698e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3468, "upload_time": "2020-04-14T03:57:04", "upload_time_iso_8601": "2020-04-14T03:57:04.750301Z", "url": "https://files.pythonhosted.org/packages/19/cb/76c48a081a678fc87b685a286e1a179906c4df92c448dbe682aa2a7626f9/cbrecommender-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0a60ab41b7a7cc0105645382f2f8680f", "sha256": "0cbb747cca387c3f1ad4e4555c8137df8834d39c0af3a5754b5c74da345544aa"}, "downloads": -1, "filename": "cbrecommender-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0a60ab41b7a7cc0105645382f2f8680f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3454, "upload_time": "2020-04-14T04:03:09", "upload_time_iso_8601": "2020-04-14T04:03:09.246934Z", "url": "https://files.pythonhosted.org/packages/b7/6f/c5726b0c2af723ad4649ea66afad56841e3a8ac6586c532b819665cffa7d/cbrecommender-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a60ab41b7a7cc0105645382f2f8680f", "sha256": "0cbb747cca387c3f1ad4e4555c8137df8834d39c0af3a5754b5c74da345544aa"}, "downloads": -1, "filename": "cbrecommender-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0a60ab41b7a7cc0105645382f2f8680f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3454, "upload_time": "2020-04-14T04:03:09", "upload_time_iso_8601": "2020-04-14T04:03:09.246934Z", "url": "https://files.pythonhosted.org/packages/b7/6f/c5726b0c2af723ad4649ea66afad56841e3a8ac6586c532b819665cffa7d/cbrecommender-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:09 2020"}