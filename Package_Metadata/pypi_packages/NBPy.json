{"info": {"author": "Piotr Kuszaj", "author_email": "peterkuszaj@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Other Environment", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Office/Business :: Financial :: Accounting", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "NPBy\n====\n\n.. image:: https://travis-ci.org/kuszaj/nbpy.svg?branch=master\n    :target: https://travis-ci.org/kuszaj/nbpy\n\nA utility package for calling `NBP (Polish National Bank) Web API <http://api.nbp.pl/en.html>`_ and converting various currencies to Polish zloty using its exchange rates.\n\nNBPy requires Python 3.3 or newer\n\nInstallation\n------------\n\nFrom PyPI:\n\n.. code:: shell\n\n    $ pip3 install nbpy\n\nFrom source code:\n\n.. code:: shell\n\n    $ git clone https://github.com/kuszaj/nbpy\n    $ cd nbpy\n    $ python3 setup.py install\n\nUsage\n-----\n\nNBPy provides a ``NBPClient`` class for generating API callers, given available currency code:\n\n.. code:: python\n\n    >>> import nbpy\n    >>> #: Available currencies\n    >>> nbpy.currencies\n    {'EUR': NBPCurrency(Euro, code=EUR, tables={'A', 'C'}), 'USD': NBPCurrency(United States dollar, code=USD, tables={'A', 'C'}), ...}\n    >>> nbp = nbpy.NBPClient('eur')\n    >>> nbp\n    NBPClient(USD, as_float=False, suppress_errors=False, cache_size=128)\n    >>> nbp.currency_code = 'EUR'\n    >>> nbp\n    NBPClient(EUR, as_float=False, suppress_errors=False, cache_size=128)\n\n``currency_code`` has to be one of the available codes from ``nbpy.currencies`` otherwise ``NBPClient`` raises ``UnknownCurrencyCode``.\n\n.. code:: python\n\n    >>> from nbpy.errors import UnknownCurrencyCode\n    >>> 'XYZ' in nbpy.currencies\n    False\n    >>> try:\n    ...     nbp.currency_code = 'XYZ'\n    ... except UnknownCurrencyCode:\n    ...     print('XYZ is unknown')\n    ...\n    XYZ is unknown\n\nAPI calls\n~~~~~~~~~\n\nAll API calls defined in ``NBPClient`` returns either a ``NBPExchangeRate`` object or a list its instances.\n\n``.current()`` returns current exchange rate for currency. Note that it doesn't necessarily mean current day: for weekends, holidays and before official announcements by Polish National Bank method returns last available value.\n\n.. code:: python\n\n    >>> nbp.current()\n    NBPExchangeRate(EUR->PLN, 2017-10-31, mid=4.2498)\n    >>> #: Calling NBPClient object is synonymous with current()\n    >>> nbp()\n    NBPExchangeRate(EUR->PLN, 2017-10-31, mid=4.2498)\n\n``.today()`` returns exchange rate for current day, if available.\nOtherwise, raises ``APIError``.\n\n.. code:: python\n\n    >>> nbp.today()\n    NBPExchangeRate(EUR->PLN, 2017-10-31, mid=4.2498)\n    ...\n    >>> #: A day later, during national holiday\n    >>> from nbpy.errors import APIError\n    >>> try:\n    ...     nbp.today()\n    ... except APIError:\n    ...     print(\"No data available\")\n    ...\n    No data available\n\n``.date(date)`` returns exchange rate for given day, if available. Otherwise, raises ``APIError``. Argument ``date`` has to be either ``datetime.datetime`` or a properly formatted date string (``YYYY-MM-DD``), otherwise method raises ``DateFormattingError``.\n\n.. code:: python\n\n    >>> from nbpy.errors import APIError, DateFormattingError\n    >>> nbp.date('2017-10-02')\n    NBPExchangeRate(EUR->PLN, 2017-10-02, mid=4.3137)\n    >>> try:\n    ...     nbp.date('2017-10-01')\n    ... except APIError:\n    ...     print(\"No data available for date\")\n    ...\n    No data available for date\n    >>> try:\n    ...     nbp.date('01/10/17')\n    ... except DateFormattingError:\n    ...     print(\"Improperly formatted date string\")\n    ...\n    Improperly formatted date string\n\n``.last(n)`` returns last ``n`` available exchange rates, ordered by date in ascending order.\n\n.. code:: python\n\n    >>> nbp.last(3)\n    [NBPExchangeRate(EUR->PLN, 2017-10-27, mid=4.2520),\n     NBPExchangeRate(EUR->PLN, 2017-10-30, mid=4.2403),\n     NBPExchangeRate(EUR->PLN, 2017-10-31, mid=4.2498)]\n\n``.date_range(start_date, end_date)`` returns exchange rates for given date range ``[start_date, end_date]``, ordered by date in ascending order. Both arguments are restricted in the same way as ``date`` for ``date()`` method.\n\nIf range covers more than 93 days, method raises ``APIError``.\n\n.. code:: python\n\n    >>> from nbp.errors import APIError\n    >>> nbp.date_range('2017-10-01', '2017-10-14')\n    [NBPExchangeRate(EUR->PLN, 2017-10-02, mid=4.3137),\n     NBPExchangeRate(EUR->PLN, 2017-10-03, mid=4.3105),\n     NBPExchangeRate(EUR->PLN, 2017-10-04, mid=4.3025), ...]\n    >>> try:\n    ...     nbp.date_range('2017-01-01', '2017-06-01')\n    ... except APIError:\n    ...     print('Invalid date range')\n    ...\n    Invalid date range\n\nBid/ask rates\n^^^^^^^^^^^^^\n\nBy default all API call methods return average exchange rate (``mid``). However, by passing ``bid_ask=True`` you can additionally get bid/ask values. Not that not every currency has them available: for such case ``bid_ask`` is ignored.\n\n.. code:: python\n\n    >>> nbp()\n    NBPExchangeRate(EUR->PLN, 2017-10-31, mid=4.2498)\n    >>> nbp(bid_ask=True)\n    NBPExchangeRate(EUR->PLN, 2017-11-02, bid=4.2036, ask=4.2886)\n    >>> #: No bid/ask values for CUP\n    >>> nbp.currency_code = 'CUP'\n    >>> nbp()\n    NBPExchangeRate(CUP->PLN, 2017-10-31, mid=3.6529)\n    >>> from nbpy.errors import BidAskUnavailable\n    >>> try:\n    ...     nbp(bid_ask=True)\n    ... except BidAskUnavailable:\n    ...     print('Bid/ask unavailable')\n    ...\n    Bid/ask unavailable\n\nSuppressing errors\n~~~~~~~~~~~~~~~~~~\n\nIf you want API calls to always return something, despite possible issues with API, you can pass ``suppress_errors=True`` to ``NBPClient``. With this flag turned on API calls instead of raising ``BidAskUnavailable`` and ``APIError`` exceptions will return ``None``.\n\n.. code:: python\n\n    >>> from nbp.errors import APIError\n    >>> try:\n    ...     nbp.date_range('2017-01-01', '2017-06-01')\n    ... except APIError:\n    ...     print('Invalid date range')\n    ...\n    Invalid date range\n    >>> nbp.suppress_errors = True\n    >>> print(nbp.date_range('2017-01-01', '2017-06-01'))\n    None\n\nCache size\n~~~~~~~~~~\n\nFor efficiency, ``NBPClient`` utilizes LRU cache for by saving last 128 calls. You can change this value by passing ``cache_size`` to ``NBPClient``. This value can be set only during object initialization.\n\n.. code:: python\n\n    >>> nbp = NBPClient('eur', cache_size=64)\n    >>> nbp\n    NBPClient(EUR, as_float=False, suppress_errors=False, cache_size=64)\n    >>> try:\n    ...     nbp.cache_size = 128\n    ... except AttributeError:\n    ...     print(\"Can't overwrite cache_size\")\n    ...\n    Can't overwrite cache_size\n\nRates as floats\n~~~~~~~~~~~~~~~\n\nBy default all exchange rates are parsed as ``decimal.Decimal`` objects. You can change this behaviour by passing ``as_float=True``, which will force all exchange rates to be parsed as ``float``.\n\n.. code:: python\n\n    >>> nbp = NBPClient('eur')\n    >>> type(nbp().mid)\n    <class 'decimal.Decimal'>\n    >>> nbp = NBPClient('eur', as_float=True)\n    >>> type(nbp().mid)\n    <class 'float'>\n\nExchange rates\n--------------\n\n``NBPClient`` calls returns an ``NBPExchangeRate`` object (their list), which can be used as a converter for calculating given amount in foreign currency to Polish zlotys.\n\n.. code:: python\n\n    >>> exchange_rate = nbp()\n    >>> exchange_rate\n    NBPExchangeRate(EUR->PLN, 2017-10-31, mid=4.2498)\n    >>> amount = 1000\n    >>> exchange_rate(amount)\n    {'mid': Decimal('4249.8000')}\n    >>> exchange_rate * amount\n    {'mid': Decimal('4249.8000')}\n    >>> amount * exchange_rate\n    {'mid': Decimal('4249.8000')}\n    >>>\n    >>> exchange_rate = nbp(all_values=True)\n    >>> exchange_rate\n    NBPExchangeRate(EUR->PLN, 2017-11-02, bid=4.2036, ask=4.2886)\n    >>> exchange_rate(amount)\n    {'bid': Decimal('4204.3000'), 'ask': Decimal('4289.3000')}\n\nExample\n-------\n\nBelow script prints and summarises a list of invoices in foreign currencies.\n\n.. code:: python\n\n    from datetime import datetime, timedelta\n    from decimal import Decimal\n    from nbpy import NBPClient\n    from nbpy.errors import APIError\n\n\n    class Invoice(object):\n        \"\"\"Invoice class with builtin currency converter.\"\"\"\n\n        def __init__(self, currency_code, date, amount):\n            self.currency_code = currency_code\n            self.date = date\n            self.amount = Decimal(\"{:.2f}\".format(amount))\n\n            self._nbp = NBPClient(currency_code)\n\n        @property\n        def amount_in_pln(self):\n            exchange_rate = None\n            date = datetime.strptime(self.date, '%Y-%m-%d')\n            while exchange_rate is None:\n                # Get exchange rates until valid is found\n                try:\n                    exchange_rate = self._nbp.date(date.strftime('%Y-%m-%d'))\n                    break\n                except APIError:\n                    date -= timedelta(days=1)\n\n            amount = (exchange_rate * self.amount)['mid']\n            return round(amount, 2)\n\n\n    # List of invoices in foreign currencies\n    invoices = [\n        Invoice('EUR', '2017-10-03', 650.0),\n        Invoice('EUR', '2017-10-06', 890.0),\n        Invoice('USD', '2017-10-11', 1230.0),\n    ]\n\n    # Print all amounts in their currencies and PLN\n    template = \"{currency}    {amount:7.2f}  {amount_in_pln:7.2f}\"\n    for invoice in invoices:\n        print(template.format(\n            currency=invoice.currency_code,\n            amount=invoice.amount,\n            amount_in_pln=invoice.amount_in_pln,\n        ))\n\n    # Sum all values in PLN\n    # Since amount_in_pln were already called, script will use cached values\n    # instead of calling NBP Web API\n    sum_amount_in_pln = sum([invoice.amount_in_pln for invoice in invoices])\n\n    print(\"-\" * 23)\n    print(\"        total: {sum:8.2f}\".format(sum=sum_amount_in_pln))\n\n    # EUR     650.00  2801.82\n    # EUR     890.00  3830.74\n    # USD    1230.00  4454.94\n    # -----------------------\n    #         total: 11087.50\n\nLicense\n-------\n\n`MIT <LICENSE>`_\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "NBPy", "package_url": "https://pypi.org/project/NBPy/", "platform": "", "project_url": "https://pypi.org/project/NBPy/", "project_urls": null, "release_url": "https://pypi.org/project/NBPy/0.1.1/", "requires_dist": ["requests (>=2.18)"], "requires_python": ">=3.3", "summary": "A utility package for calling NBP (Polish National Bank) Web API.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/kuszaj/nbpy\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/kuszaj/nbpy.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed7cabb16b856420eb63d01733860e8d45a9c41a/68747470733a2f2f7472617669732d63692e6f72672f6b75737a616a2f6e6270792e7376673f6272616e63683d6d6173746572\"></a>\n<p>A utility package for calling <a href=\"http://api.nbp.pl/en.html\" rel=\"nofollow\">NBP (Polish National Bank) Web API</a> and converting various currencies to Polish zloty using its exchange rates.</p>\n<p>NBPy requires Python 3.3 or newer</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From PyPI:</p>\n<pre>$ pip3 install nbpy\n</pre>\n<p>From source code:</p>\n<pre>$ git clone https://github.com/kuszaj/nbpy\n$ <span class=\"nb\">cd</span> nbpy\n$ python3 setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>NBPy provides a <tt>NBPClient</tt> class for generating API callers, given available currency code:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">nbpy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#: Available currencies</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbpy</span><span class=\"o\">.</span><span class=\"n\">currencies</span>\n<span class=\"p\">{</span><span class=\"s1\">'EUR'</span><span class=\"p\">:</span> <span class=\"n\">NBPCurrency</span><span class=\"p\">(</span><span class=\"n\">Euro</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">EUR</span><span class=\"p\">,</span> <span class=\"n\">tables</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">}),</span> <span class=\"s1\">'USD'</span><span class=\"p\">:</span> <span class=\"n\">NBPCurrency</span><span class=\"p\">(</span><span class=\"n\">United</span> <span class=\"n\">States</span> <span class=\"n\">dollar</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">USD</span><span class=\"p\">,</span> <span class=\"n\">tables</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">}),</span> <span class=\"o\">...</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span> <span class=\"o\">=</span> <span class=\"n\">nbpy</span><span class=\"o\">.</span><span class=\"n\">NBPClient</span><span class=\"p\">(</span><span class=\"s1\">'eur'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span>\n<span class=\"n\">NBPClient</span><span class=\"p\">(</span><span class=\"n\">USD</span><span class=\"p\">,</span> <span class=\"n\">as_float</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">suppress_errors</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cache_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">currency_code</span> <span class=\"o\">=</span> <span class=\"s1\">'EUR'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span>\n<span class=\"n\">NBPClient</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"p\">,</span> <span class=\"n\">as_float</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">suppress_errors</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cache_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n</pre>\n<p><tt>currency_code</tt> has to be one of the available codes from <tt>nbpy.currencies</tt> otherwise <tt>NBPClient</tt> raises <tt>UnknownCurrencyCode</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nbpy.errors</span> <span class=\"kn\">import</span> <span class=\"n\">UnknownCurrencyCode</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'XYZ'</span> <span class=\"ow\">in</span> <span class=\"n\">nbpy</span><span class=\"o\">.</span><span class=\"n\">currencies</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">currency_code</span> <span class=\"o\">=</span> <span class=\"s1\">'XYZ'</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">UnknownCurrencyCode</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'XYZ is unknown'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">XYZ</span> <span class=\"ow\">is</span> <span class=\"n\">unknown</span>\n</pre>\n<div id=\"api-calls\">\n<h3>API calls</h3>\n<p>All API calls defined in <tt>NBPClient</tt> returns either a <tt>NBPExchangeRate</tt> object or a list its instances.</p>\n<p><tt>.current()</tt> returns current exchange rate for currency. Note that it doesn\u2019t necessarily mean current day: for weekends, holidays and before official announcements by Polish National Bank method returns last available value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">()</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.2498</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#: Calling NBPClient object is synonymous with current()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"p\">()</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.2498</span><span class=\"p\">)</span>\n</pre>\n<p><tt>.today()</tt> returns exchange rate for current day, if available.\nOtherwise, raises <tt>APIError</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.2498</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#: A day later, during national holiday</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nbpy.errors</span> <span class=\"kn\">import</span> <span class=\"n\">APIError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">APIError</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"No data available\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">No</span> <span class=\"n\">data</span> <span class=\"n\">available</span>\n</pre>\n<p><tt>.date(date)</tt> returns exchange rate for given day, if available. Otherwise, raises <tt>APIError</tt>. Argument <tt>date</tt> has to be either <tt>datetime.datetime</tt> or a properly formatted date string (<tt><span class=\"pre\">YYYY-MM-DD</span></tt>), otherwise method raises <tt>DateFormattingError</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nbpy.errors</span> <span class=\"kn\">import</span> <span class=\"n\">APIError</span><span class=\"p\">,</span> <span class=\"n\">DateFormattingError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"s1\">'2017-10-02'</span><span class=\"p\">)</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.3137</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"s1\">'2017-10-01'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">APIError</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"No data available for date\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">No</span> <span class=\"n\">data</span> <span class=\"n\">available</span> <span class=\"k\">for</span> <span class=\"n\">date</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"s1\">'01/10/17'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">DateFormattingError</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Improperly formatted date string\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">date</span> <span class=\"n\">string</span>\n</pre>\n<p><tt>.last(n)</tt> returns last <tt>n</tt> available exchange rates, ordered by date in ascending order.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">27</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.2520</span><span class=\"p\">),</span>\n <span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.2403</span><span class=\"p\">),</span>\n <span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.2498</span><span class=\"p\">)]</span>\n</pre>\n<p><tt>.date_range(start_date, end_date)</tt> returns exchange rates for given date range <tt>[start_date, end_date]</tt>, ordered by date in ascending order. Both arguments are restricted in the same way as <tt>date</tt> for <tt>date()</tt> method.</p>\n<p>If range covers more than 93 days, method raises <tt>APIError</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nbp.errors</span> <span class=\"kn\">import</span> <span class=\"n\">APIError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'2017-10-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2017-10-14'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.3137</span><span class=\"p\">),</span>\n <span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.3105</span><span class=\"p\">),</span>\n <span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.3025</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'2017-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2017-06-01'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">APIError</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Invalid date range'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Invalid</span> <span class=\"n\">date</span> <span class=\"nb\">range</span>\n</pre>\n<div id=\"bid-ask-rates\">\n<h4>Bid/ask rates</h4>\n<p>By default all API call methods return average exchange rate (<tt>mid</tt>). However, by passing <tt>bid_ask=True</tt> you can additionally get bid/ask values. Not that not every currency has them available: for such case <tt>bid_ask</tt> is ignored.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"p\">()</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.2498</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"p\">(</span><span class=\"n\">bid_ask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"n\">bid</span><span class=\"o\">=</span><span class=\"mf\">4.2036</span><span class=\"p\">,</span> <span class=\"n\">ask</span><span class=\"o\">=</span><span class=\"mf\">4.2886</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#: No bid/ask values for CUP</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">currency_code</span> <span class=\"o\">=</span> <span class=\"s1\">'CUP'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"p\">()</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">CUP</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">3.6529</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nbpy.errors</span> <span class=\"kn\">import</span> <span class=\"n\">BidAskUnavailable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nbp</span><span class=\"p\">(</span><span class=\"n\">bid_ask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">BidAskUnavailable</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Bid/ask unavailable'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Bid</span><span class=\"o\">/</span><span class=\"n\">ask</span> <span class=\"n\">unavailable</span>\n</pre>\n</div>\n</div>\n<div id=\"suppressing-errors\">\n<h3>Suppressing errors</h3>\n<p>If you want API calls to always return something, despite possible issues with API, you can pass <tt>suppress_errors=True</tt> to <tt>NBPClient</tt>. With this flag turned on API calls instead of raising <tt>BidAskUnavailable</tt> and <tt>APIError</tt> exceptions will return <tt>None</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nbp.errors</span> <span class=\"kn\">import</span> <span class=\"n\">APIError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'2017-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2017-06-01'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">APIError</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Invalid date range'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Invalid</span> <span class=\"n\">date</span> <span class=\"nb\">range</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">suppress_errors</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'2017-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2017-06-01'</span><span class=\"p\">))</span>\n<span class=\"kc\">None</span>\n</pre>\n</div>\n<div id=\"cache-size\">\n<h3>Cache size</h3>\n<p>For efficiency, <tt>NBPClient</tt> utilizes LRU cache for by saving last 128 calls. You can change this value by passing <tt>cache_size</tt> to <tt>NBPClient</tt>. This value can be set only during object initialization.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span> <span class=\"o\">=</span> <span class=\"n\">NBPClient</span><span class=\"p\">(</span><span class=\"s1\">'eur'</span><span class=\"p\">,</span> <span class=\"n\">cache_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span>\n<span class=\"n\">NBPClient</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"p\">,</span> <span class=\"n\">as_float</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">suppress_errors</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cache_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nbp</span><span class=\"o\">.</span><span class=\"n\">cache_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Can't overwrite cache_size\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Can</span><span class=\"s1\">'t overwrite cache_size</span>\n</pre>\n</div>\n<div id=\"rates-as-floats\">\n<h3>Rates as floats</h3>\n<p>By default all exchange rates are parsed as <tt>decimal.Decimal</tt> objects. You can change this behaviour by passing <tt>as_float=True</tt>, which will force all exchange rates to be parsed as <tt>float</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span> <span class=\"o\">=</span> <span class=\"n\">NBPClient</span><span class=\"p\">(</span><span class=\"s1\">'eur'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">nbp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">mid</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"s1\">'&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nbp</span> <span class=\"o\">=</span> <span class=\"n\">NBPClient</span><span class=\"p\">(</span><span class=\"s1\">'eur'</span><span class=\"p\">,</span> <span class=\"n\">as_float</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">nbp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">mid</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">float</span><span class=\"s1\">'&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"exchange-rates\">\n<h2>Exchange rates</h2>\n<p><tt>NBPClient</tt> calls returns an <tt>NBPExchangeRate</tt> object (their list), which can be used as a converter for calculating given amount in foreign currency to Polish zlotys.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exchange_rate</span> <span class=\"o\">=</span> <span class=\"n\">nbp</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exchange_rate</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"o\">=</span><span class=\"mf\">4.2498</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exchange_rate</span><span class=\"p\">(</span><span class=\"n\">amount</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'mid'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'4249.8000'</span><span class=\"p\">)}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exchange_rate</span> <span class=\"o\">*</span> <span class=\"n\">amount</span>\n<span class=\"p\">{</span><span class=\"s1\">'mid'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'4249.8000'</span><span class=\"p\">)}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">amount</span> <span class=\"o\">*</span> <span class=\"n\">exchange_rate</span>\n<span class=\"p\">{</span><span class=\"s1\">'mid'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'4249.8000'</span><span class=\"p\">)}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exchange_rate</span> <span class=\"o\">=</span> <span class=\"n\">nbp</span><span class=\"p\">(</span><span class=\"n\">all_values</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exchange_rate</span>\n<span class=\"n\">NBPExchangeRate</span><span class=\"p\">(</span><span class=\"n\">EUR</span><span class=\"o\">-&gt;</span><span class=\"n\">PLN</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"n\">bid</span><span class=\"o\">=</span><span class=\"mf\">4.2036</span><span class=\"p\">,</span> <span class=\"n\">ask</span><span class=\"o\">=</span><span class=\"mf\">4.2886</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exchange_rate</span><span class=\"p\">(</span><span class=\"n\">amount</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'bid'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'4204.3000'</span><span class=\"p\">),</span> <span class=\"s1\">'ask'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'4289.3000'</span><span class=\"p\">)}</span>\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Below script prints and summarises a list of invoices in foreign currencies.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nbpy</span> <span class=\"kn\">import</span> <span class=\"n\">NBPClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nbpy.errors</span> <span class=\"kn\">import</span> <span class=\"n\">APIError</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Invoice</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Invoice class with builtin currency converter.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">currency_code</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">currency_code</span> <span class=\"o\">=</span> <span class=\"n\">currency_code</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">date</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{:.2f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">amount</span><span class=\"p\">))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_nbp</span> <span class=\"o\">=</span> <span class=\"n\">NBPClient</span><span class=\"p\">(</span><span class=\"n\">currency_code</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">amount_in_pln</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">exchange_rate</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"n\">exchange_rate</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get exchange rates until valid is found</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">exchange_rate</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_nbp</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">except</span> <span class=\"n\">APIError</span><span class=\"p\">:</span>\n                <span class=\"n\">date</span> <span class=\"o\">-=</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">exchange_rate</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"p\">)[</span><span class=\"s1\">'mid'</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">amount</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># List of invoices in foreign currencies</span>\n<span class=\"n\">invoices</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Invoice</span><span class=\"p\">(</span><span class=\"s1\">'EUR'</span><span class=\"p\">,</span> <span class=\"s1\">'2017-10-03'</span><span class=\"p\">,</span> <span class=\"mf\">650.0</span><span class=\"p\">),</span>\n    <span class=\"n\">Invoice</span><span class=\"p\">(</span><span class=\"s1\">'EUR'</span><span class=\"p\">,</span> <span class=\"s1\">'2017-10-06'</span><span class=\"p\">,</span> <span class=\"mf\">890.0</span><span class=\"p\">),</span>\n    <span class=\"n\">Invoice</span><span class=\"p\">(</span><span class=\"s1\">'USD'</span><span class=\"p\">,</span> <span class=\"s1\">'2017-10-11'</span><span class=\"p\">,</span> <span class=\"mf\">1230.0</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Print all amounts in their currencies and PLN</span>\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{currency}</span><span class=\"s2\">    </span><span class=\"si\">{amount:7.2f}</span><span class=\"s2\">  </span><span class=\"si\">{amount_in_pln:7.2f}</span><span class=\"s2\">\"</span>\n<span class=\"k\">for</span> <span class=\"n\">invoice</span> <span class=\"ow\">in</span> <span class=\"n\">invoices</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"n\">invoice</span><span class=\"o\">.</span><span class=\"n\">currency_code</span><span class=\"p\">,</span>\n        <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"n\">invoice</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"p\">,</span>\n        <span class=\"n\">amount_in_pln</span><span class=\"o\">=</span><span class=\"n\">invoice</span><span class=\"o\">.</span><span class=\"n\">amount_in_pln</span><span class=\"p\">,</span>\n    <span class=\"p\">))</span>\n\n<span class=\"c1\"># Sum all values in PLN</span>\n<span class=\"c1\"># Since amount_in_pln were already called, script will use cached values</span>\n<span class=\"c1\"># instead of calling NBP Web API</span>\n<span class=\"n\">sum_amount_in_pln</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">invoice</span><span class=\"o\">.</span><span class=\"n\">amount_in_pln</span> <span class=\"k\">for</span> <span class=\"n\">invoice</span> <span class=\"ow\">in</span> <span class=\"n\">invoices</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span> <span class=\"o\">*</span> <span class=\"mi\">23</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"        total: </span><span class=\"si\">{sum:8.2f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"o\">=</span><span class=\"n\">sum_amount_in_pln</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># EUR     650.00  2801.82</span>\n<span class=\"c1\"># EUR     890.00  3830.74</span>\n<span class=\"c1\"># USD    1230.00  4454.94</span>\n<span class=\"c1\"># -----------------------</span>\n<span class=\"c1\">#         total: 11087.50</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">MIT</a></p>\n</div>\n\n          </div>"}, "last_serial": 3314001, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b04c9e8509e41165181849f499e140a0", "sha256": "016ff028aa3afe1f8b884e4f2f60f1ade0135e5690b83290757780e6a96f73f1"}, "downloads": -1, "filename": "NBPy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b04c9e8509e41165181849f499e140a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 15406, "upload_time": "2017-11-07T21:57:53", "upload_time_iso_8601": "2017-11-07T21:57:53.525598Z", "url": "https://files.pythonhosted.org/packages/ed/b6/d6b2a7a865fc67f8f338cc2d1ad04b7f12a2899f86698888faf4db158c36/NBPy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cc5b00091e992405da5c3bbaccd9730", "sha256": "8ad5d578de9cbb10658bed85c9df0e83a83aef7b5b1905272a5ac287825fd223"}, "downloads": -1, "filename": "NBPy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9cc5b00091e992405da5c3bbaccd9730", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 13567, "upload_time": "2017-11-07T21:57:55", "upload_time_iso_8601": "2017-11-07T21:57:55.168630Z", "url": "https://files.pythonhosted.org/packages/a0/80/607ade15025274cbda43af3d959d0a478fb1582cb8295784948f856f6693/NBPy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fc17696d5f35183e079b159cc823631f", "sha256": "43166515b09f96ead854baf1915a737d2bd6122330d3a3568668f4c0da8bd10c"}, "downloads": -1, "filename": "NBPy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fc17696d5f35183e079b159cc823631f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 15407, "upload_time": "2017-11-07T22:02:27", "upload_time_iso_8601": "2017-11-07T22:02:27.772805Z", "url": "https://files.pythonhosted.org/packages/a2/4d/30022d111139aec35de977dc758f6bb1dca8325418e258a756050f67f9e9/NBPy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d72126378fa80e405e54976b4ce10003", "sha256": "6004d076c64406aef4ce06c01e8b0c760e71bf909c4df92872aa1b22a96ab5b2"}, "downloads": -1, "filename": "NBPy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d72126378fa80e405e54976b4ce10003", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 13565, "upload_time": "2017-11-07T22:02:29", "upload_time_iso_8601": "2017-11-07T22:02:29.724366Z", "url": "https://files.pythonhosted.org/packages/cd/35/e914bdd37160437a82145f95581a444021d8afe6b99f76d88b0acd31ad60/NBPy-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fc17696d5f35183e079b159cc823631f", "sha256": "43166515b09f96ead854baf1915a737d2bd6122330d3a3568668f4c0da8bd10c"}, "downloads": -1, "filename": "NBPy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fc17696d5f35183e079b159cc823631f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 15407, "upload_time": "2017-11-07T22:02:27", "upload_time_iso_8601": "2017-11-07T22:02:27.772805Z", "url": "https://files.pythonhosted.org/packages/a2/4d/30022d111139aec35de977dc758f6bb1dca8325418e258a756050f67f9e9/NBPy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d72126378fa80e405e54976b4ce10003", "sha256": "6004d076c64406aef4ce06c01e8b0c760e71bf909c4df92872aa1b22a96ab5b2"}, "downloads": -1, "filename": "NBPy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d72126378fa80e405e54976b4ce10003", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 13565, "upload_time": "2017-11-07T22:02:29", "upload_time_iso_8601": "2017-11-07T22:02:29.724366Z", "url": "https://files.pythonhosted.org/packages/cd/35/e914bdd37160437a82145f95581a444021d8afe6b99f76d88b0acd31ad60/NBPy-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:53 2020"}