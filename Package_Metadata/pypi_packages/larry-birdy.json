{"info": {"author": "programmatizoumenos", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Larry Birdy\n\n`Larry Birdy` is based on ['birdy'](https://github.com/inueni/birdy) and\nis sentence-oriented (i.e. sprinkled with syntactic sugar).\nThrough an experimental (and fuzzy oop design) and proof-of-concept way,\nyou can make API calls with exprensiveness (and verbosity).\n\n### Install\n`pip install larry-birdy`\n\n### Example\n```python\nfrom larry.twitter import RestAPI, p\n\nAPI = RestAPI(CONSUMER_KEY,\n              CONSUMER_SECRET,\n              ACCESS_TOKEN,\n              ACCESS_TOKEN_SECRET)\n\nOWNER = API.verify_account_credentials(skip_status=True)\n\nquery = '#python #twitter -rt'\ntweet_instances = API.search_tweets(q=query,\n                                    result_type='recent',\n                                    lang='en',\n                                    count=10,\n                                    tweet_mode='extended')\n\n# You can write \"sentences\" like the following:\n\ncontent_has_media = p.Does.this(status=tweet_instance).have_element('media')\n                        # Does this [status] have (the) element ['media']?\n\nhashtags_number = p.Find.for_element('hashtags').its_number_within(tweet_instance)\n                    # Find, for (the) element ['hashtags'], its number within (this) [status].\n\nmentions = p.Get.element('user_mentions').from_(tweet_instance)\n            # Get (the) element ['user_mentions'], from (this) [status].\n\nuser = tweet_instance.user\nuser_is_following_owner = p.Is.this(user).following(OWNER)\n                            # Is this [user] following [OWNER]?\n\ntry:\n    API.retweet(tweet=tweet_instance, trim_user=True)\nexcept Exception as error_message:\n    print(error_message)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/programmatizoumenos/larry-birdy", "keywords": "twitter api tweet larry birdy search", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "larry-birdy", "package_url": "https://pypi.org/project/larry-birdy/", "platform": "", "project_url": "https://pypi.org/project/larry-birdy/", "project_urls": {"Homepage": "https://github.com/programmatizoumenos/larry-birdy"}, "release_url": "https://pypi.org/project/larry-birdy/0.0.1/", "requires_dist": ["birdy"], "requires_python": "", "summary": "A proof-of-concept sentence-oriented Twitter API client for Python, based on 'birdy'.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Larry Birdy</h1>\n<p><code>Larry Birdy</code> is based on <a href=\"https://github.com/inueni/birdy\" rel=\"nofollow\">'birdy'</a> and\nis sentence-oriented (i.e. sprinkled with syntactic sugar).\nThrough an experimental (and fuzzy oop design) and proof-of-concept way,\nyou can make API calls with exprensiveness (and verbosity).</p>\n<h3>Install</h3>\n<p><code>pip install larry-birdy</code></p>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">larry.twitter</span> <span class=\"kn\">import</span> <span class=\"n\">RestAPI</span><span class=\"p\">,</span> <span class=\"n\">p</span>\n\n<span class=\"n\">API</span> <span class=\"o\">=</span> <span class=\"n\">RestAPI</span><span class=\"p\">(</span><span class=\"n\">CONSUMER_KEY</span><span class=\"p\">,</span>\n              <span class=\"n\">CONSUMER_SECRET</span><span class=\"p\">,</span>\n              <span class=\"n\">ACCESS_TOKEN</span><span class=\"p\">,</span>\n              <span class=\"n\">ACCESS_TOKEN_SECRET</span><span class=\"p\">)</span>\n\n<span class=\"n\">OWNER</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"o\">.</span><span class=\"n\">verify_account_credentials</span><span class=\"p\">(</span><span class=\"n\">skip_status</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'#python #twitter -rt'</span>\n<span class=\"n\">tweet_instances</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"o\">.</span><span class=\"n\">search_tweets</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span>\n                                    <span class=\"n\">result_type</span><span class=\"o\">=</span><span class=\"s1\">'recent'</span><span class=\"p\">,</span>\n                                    <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s1\">'en'</span><span class=\"p\">,</span>\n                                    <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                                    <span class=\"n\">tweet_mode</span><span class=\"o\">=</span><span class=\"s1\">'extended'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can write \"sentences\" like the following:</span>\n\n<span class=\"n\">content_has_media</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">Does</span><span class=\"o\">.</span><span class=\"n\">this</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">tweet_instance</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">have_element</span><span class=\"p\">(</span><span class=\"s1\">'media'</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># Does this [status] have (the) element ['media']?</span>\n\n<span class=\"n\">hashtags_number</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">Find</span><span class=\"o\">.</span><span class=\"n\">for_element</span><span class=\"p\">(</span><span class=\"s1\">'hashtags'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">its_number_within</span><span class=\"p\">(</span><span class=\"n\">tweet_instance</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># Find, for (the) element ['hashtags'], its number within (this) [status].</span>\n\n<span class=\"n\">mentions</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">Get</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"p\">(</span><span class=\"s1\">'user_mentions'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">from_</span><span class=\"p\">(</span><span class=\"n\">tweet_instance</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Get (the) element ['user_mentions'], from (this) [status].</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">tweet_instance</span><span class=\"o\">.</span><span class=\"n\">user</span>\n<span class=\"n\">user_is_following_owner</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">Is</span><span class=\"o\">.</span><span class=\"n\">this</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">following</span><span class=\"p\">(</span><span class=\"n\">OWNER</span><span class=\"p\">)</span>\n                            <span class=\"c1\"># Is this [user] following [OWNER]?</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">API</span><span class=\"o\">.</span><span class=\"n\">retweet</span><span class=\"p\">(</span><span class=\"n\">tweet</span><span class=\"o\">=</span><span class=\"n\">tweet_instance</span><span class=\"p\">,</span> <span class=\"n\">trim_user</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error_message</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error_message</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5369274, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ac39408358962a719d6f6036a5aded59", "sha256": "8b640f7e516e878537039dbee19a15a6e60b202753909f26a5d35dc6fd20c1dc"}, "downloads": -1, "filename": "larry_birdy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ac39408358962a719d6f6036a5aded59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4077, "upload_time": "2019-06-06T22:11:54", "upload_time_iso_8601": "2019-06-06T22:11:54.357896Z", "url": "https://files.pythonhosted.org/packages/64/c7/6af4f57c4a434548c08726ee48c4e238893ed384e3f2103a79c90ec8e13a/larry_birdy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ad5cdb9bb9cf02c0b74b02e8d2fb30c", "sha256": "3bea733750fe77313423df50bd49e98d63d970b4e5765a55e02d9498cb460330"}, "downloads": -1, "filename": "larry-birdy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4ad5cdb9bb9cf02c0b74b02e8d2fb30c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3720, "upload_time": "2019-06-06T22:11:56", "upload_time_iso_8601": "2019-06-06T22:11:56.384997Z", "url": "https://files.pythonhosted.org/packages/f6/b5/d27eefbc2ece820c8dd9b4ef088bceaac37606a3e2e626ee876d249c74ea/larry-birdy-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac39408358962a719d6f6036a5aded59", "sha256": "8b640f7e516e878537039dbee19a15a6e60b202753909f26a5d35dc6fd20c1dc"}, "downloads": -1, "filename": "larry_birdy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ac39408358962a719d6f6036a5aded59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4077, "upload_time": "2019-06-06T22:11:54", "upload_time_iso_8601": "2019-06-06T22:11:54.357896Z", "url": "https://files.pythonhosted.org/packages/64/c7/6af4f57c4a434548c08726ee48c4e238893ed384e3f2103a79c90ec8e13a/larry_birdy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ad5cdb9bb9cf02c0b74b02e8d2fb30c", "sha256": "3bea733750fe77313423df50bd49e98d63d970b4e5765a55e02d9498cb460330"}, "downloads": -1, "filename": "larry-birdy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4ad5cdb9bb9cf02c0b74b02e8d2fb30c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3720, "upload_time": "2019-06-06T22:11:56", "upload_time_iso_8601": "2019-06-06T22:11:56.384997Z", "url": "https://files.pythonhosted.org/packages/f6/b5/d27eefbc2ece820c8dd9b4ef088bceaac37606a3e2e626ee876d249c74ea/larry-birdy-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:50 2020"}