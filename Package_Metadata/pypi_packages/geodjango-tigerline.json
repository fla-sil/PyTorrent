{"info": {"author": "Adam Fast", "author_email": "adamfast@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "This app is intended to make it easier to add TIGER/Line data to a GeoDjango project and save people from writing this same code over and over (collectively).\n\nIt is not (yet) exhaustive, it's just what I had and have needed in the past.\nIf you have models / load scripts for other data in the set, please fork/add and send me a pull request if you add other shapefiles. If you come up with useful manager methods, I'd love to see those too.\n\n* NOTE: If you need cities, the best source for that is the US National Atlas. I have an app for those at https://github.com/adamfast/usgsdata-citiesx020\n\nIt's been tested and used with Django 1.10 and PostGIS + PostgreSQL.\n\nInstall\n-------\n\nDownload the 2016 Tigerline files for all zipcodes, all states, and all counties\n\nftp://ftp2.census.gov/geo/tiger/TIGER2016/\n\n* States (and Territories) - ftp://ftp2.census.gov/geo/tiger/TIGER2016/STATE/tl_2016_us_state.zip\n* Counties (for all States / Territories - ftp://ftp2.census.gov/geo/tiger/TIGER2016/COUNTY/tl_2016_us_county.zip\n* Zipcode Tabulation Areas (for all States / Territories, these are NOT actual zip codes which describe specific mail routes) - ftp://ftp2.census.gov/geo/tiger/TIGER2016/ZCTA5/tl_2016_us_zcta510.zip\n\nUnzip the files\n\nConfigure django.contrib.gis as described in the django docs.\n\nAdd \"django.contrib.gis\" and \"tigerline\" to INSTALLED_APPS\n\nrun `python manage.py migrate` which will run the migrations and make sure database tables are created.\n\nIf you want to import all three:\nrun `python manage.py load_tigerline --path=~/Path/to/shapefiles`\n\nOr there are individual management commands if you only need one set:\nrun `python manage.py load_counties --path=~/Path/to/shapefiles`\nrun `python manage.py load_states --path=~/Path/to/shapefiles`\nrun `python manage.py load_zipcodes --path=~/Path/to/shapefiles`", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adamfast/geodjango-tigerline", "keywords": "django geodjango tigerline", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "geodjango-tigerline", "package_url": "https://pypi.org/project/geodjango-tigerline/", "platform": "", "project_url": "https://pypi.org/project/geodjango-tigerline/", "project_urls": {"Homepage": "https://github.com/adamfast/geodjango-tigerline"}, "release_url": "https://pypi.org/project/geodjango-tigerline/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "A resuable app with the boilerplate necessary for getting TIGER/LINE data into a GeoDjango project.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This app is intended to make it easier to add TIGER/Line data to a GeoDjango project and save people from writing this same code over and over (collectively).</p>\n<p>It is not (yet) exhaustive, it\u2019s just what I had and have needed in the past.\nIf you have models / load scripts for other data in the set, please fork/add and send me a pull request if you add other shapefiles. If you come up with useful manager methods, I\u2019d love to see those too.</p>\n<ul>\n<li>NOTE: If you need cities, the best source for that is the US National Atlas. I have an app for those at <a href=\"https://github.com/adamfast/usgsdata-citiesx020\" rel=\"nofollow\">https://github.com/adamfast/usgsdata-citiesx020</a></li>\n</ul>\n<p>It\u2019s been tested and used with Django 1.10 and PostGIS + PostgreSQL.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Download the 2016 Tigerline files for all zipcodes, all states, and all counties</p>\n<p><a>ftp://ftp2.census.gov/geo/tiger/TIGER2016/</a></p>\n<ul>\n<li>States (and Territories) - <a>ftp://ftp2.census.gov/geo/tiger/TIGER2016/STATE/tl_2016_us_state.zip</a></li>\n<li>Counties (for all States / Territories - <a>ftp://ftp2.census.gov/geo/tiger/TIGER2016/COUNTY/tl_2016_us_county.zip</a></li>\n<li>Zipcode Tabulation Areas (for all States / Territories, these are NOT actual zip codes which describe specific mail routes) - <a>ftp://ftp2.census.gov/geo/tiger/TIGER2016/ZCTA5/tl_2016_us_zcta510.zip</a></li>\n</ul>\n<p>Unzip the files</p>\n<p>Configure django.contrib.gis as described in the django docs.</p>\n<p>Add \u201cdjango.contrib.gis\u201d and \u201ctigerline\u201d to INSTALLED_APPS</p>\n<p>run <cite>python manage.py migrate</cite> which will run the migrations and make sure database tables are created.</p>\n<p>If you want to import all three:\nrun <cite>python manage.py load_tigerline \u2013path=~/Path/to/shapefiles</cite></p>\n<p>Or there are individual management commands if you only need one set:\nrun <cite>python manage.py load_counties \u2013path=~/Path/to/shapefiles</cite>\nrun <cite>python manage.py load_states \u2013path=~/Path/to/shapefiles</cite>\nrun <cite>python manage.py load_zipcodes \u2013path=~/Path/to/shapefiles</cite></p>\n</div>\n\n          </div>"}, "last_serial": 3104171, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "a1870b29511aabd6742412ef347214df", "sha256": "4c9d6fa61fd7b36a2a17d8fc023e844ef00af91caecfbd70a045613da07afed0"}, "downloads": -1, "filename": "geodjango-tigerline-1.0.tar.gz", "has_sig": false, "md5_digest": "a1870b29511aabd6742412ef347214df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6352, "upload_time": "2012-03-13T00:10:27", "upload_time_iso_8601": "2012-03-13T00:10:27.217152Z", "url": "https://files.pythonhosted.org/packages/7d/ee/7adb9bde73f1e5a9d50e34afd3262d8b1efe7da7b89a08ab5c6ea5a91f7b/geodjango-tigerline-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4e87480f4d52d4d55b4a0561c192e095", "sha256": "e7bbcd27fe2924680adc15723acf6bc290e190c5d231815440a58bd95036e071"}, "downloads": -1, "filename": "geodjango-tigerline-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4e87480f4d52d4d55b4a0561c192e095", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6078, "upload_time": "2015-09-10T20:19:58", "upload_time_iso_8601": "2015-09-10T20:19:58.880888Z", "url": "https://files.pythonhosted.org/packages/0e/65/bdd7f356ac65ef2af02b39ab3fab25a56619bf6f90507ded5bb953577b03/geodjango-tigerline-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "57e136a47d6af3e3bcb9705bb6db7aa4", "sha256": "d898d06f2dfab8cf566e75e349c786d06be5abe0449b9ba79391eb0027887c88"}, "downloads": -1, "filename": "geodjango-tigerline-1.1.0.tar.gz", "has_sig": false, "md5_digest": "57e136a47d6af3e3bcb9705bb6db7aa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5927, "upload_time": "2017-08-17T17:11:11", "upload_time_iso_8601": "2017-08-17T17:11:11.972790Z", "url": "https://files.pythonhosted.org/packages/26/41/817f7376cc7062265a5abfc4d758a7c36b3460ca1dfe24dbc2df41b62acf/geodjango-tigerline-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "57e136a47d6af3e3bcb9705bb6db7aa4", "sha256": "d898d06f2dfab8cf566e75e349c786d06be5abe0449b9ba79391eb0027887c88"}, "downloads": -1, "filename": "geodjango-tigerline-1.1.0.tar.gz", "has_sig": false, "md5_digest": "57e136a47d6af3e3bcb9705bb6db7aa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5927, "upload_time": "2017-08-17T17:11:11", "upload_time_iso_8601": "2017-08-17T17:11:11.972790Z", "url": "https://files.pythonhosted.org/packages/26/41/817f7376cc7062265a5abfc4d758a7c36b3460ca1dfe24dbc2df41b62acf/geodjango-tigerline-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:07 2020"}