{"info": {"author": "Howard Xiao", "author_email": "thx@thxo.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Communications :: Ham Radio"], "description": "cabrillo [![Build Status](https://travis-ci.com/thxo/cabrillo.svg?branch=master)](https://travis-ci.com/thxo/cabrillo)\n---------------------\nA Python library to parse Cabrillo-format amateur radio contest logs. \n\n# Getting Started\n\n## Basic Parsing\n\n```python\n>>> from cabrillo.parser import parse_log_file\n>>> cab = parse_log_file('tests/CQWPX.log')\n>>> cab.callsign\n'AA1ZZZ'\n>>> cab.qso\n[<cabrillo.qso.QSO object at 0x10cb09f28>, <cabrillo.qso.QSO object at 0x10cbc8860>]\n>>> cab.text()\n'START-OF-LOG: 3.0\\nCREATED-BY: WriteLog V10.72C\\nCALLSIGN: AA1ZZZ\\n[...snip...]END-OF-LOG:\\n'\n```\n\nYou can also write to a file:\n\n```python\nwith open('out.cbr', 'w') as o:\n    cab.write(o)\n```\n\nThe same works for text-file-like objects.\n\nFinally, if you desire to parse Cabrillo data already present as a Python string,\nyou can do so with, e.g.,\n\n```python\nfrom cabrillo.parser import parse_log_text\n\ncabrillo_text = \"\"\"START-OF-LOG: 3.0\nEND-OF-LOG:\n\"\"\"\n\ncab = parse_log_text(cabrillo_text)\n```\n\n## Ignoring malorder\n\nCabrillo logs must be time-sorted. If you want to read files that are\nnot so sorted, but other than that are Cabrillo files, you can do so by\nadding a keyword argument `ignore_order=False` to either `parse_log_file`\nor `parse_log_text`. If you do that, the resulting Cabrillo object\nwill refuse to generate (potentially non-)Cabrillo output.\n\n## Matching Two QSOs in Contest Scoring\n\n```python\n>>> # We start off with a pair with complementary data.\n>>> from cabrillo import QSO\n>>> from datetime import datetime\n>>> qso1 = QSO('14313', 'PH', datetime.strptime('May 30 2018 10:15PM', '%b %d %Y %I:%M%p'), 'KX0XXX', 'KX9XXX', de_exch=['59', '10', 'CO'], dx_exch=['44', '20', 'IN'], t=None)\n>>> qso2 = QSO('14313', 'PH', datetime.strptime('May 30 2018 10:10PM', '%b %d %Y %I:%M%p'), 'KX9XXX', 'KX0XXX', de_exch=['44', '20', 'IN'], dx_exch=['59', '10', 'CO'], t=None)\n>>> qso1.match_against(qso2)\nTrue\n>>> qso1.freq = '14000'  # Same band, still will match.\n>>> qso1.match_against(qso2)\nTrue\n>>> qso1.match_against(qso2, max_time_delta=1)  # Make time checking less lenient.\nFalse\n>>> # All flags.\n>>> qso1.match_against(qso2, max_time_delta=30, check_exch=True, check_band=True)\n```\n\n# Attributes\n\nUse these attributes to access and construct individual objects.\n\n```python\nclass Cabrillo(builtins.object)\n |  Cabrillo(check_categories=True, **d)\n |  \n |  Representation of a Cabrillo log file.\n |  \n |  Attributes:\n |        version: The only supported version is '3.0'.\n |        callsign: Call sign of station.\n |        contest: Contest identification.\n |        category_assisted: One of CATEGORY_ASSISTED.\n |        category_band: One of CATEGORY_BAND.\n |        category_mode: One of CATEGORY_MODE.\n |        category_operator: One of CATEGORY_OPERATOR.\n |        category_power: One of CATEGORY-POWER.\n |        category_station: One of CATEGORY-STATION.\n |        category_time: One of CATEGORY-TIME.\n |        category_transmitter: One of CATEGORY-TRANSMITTER. Optional for\n |          multi-op.\n |        category_overlay: One of CATEGORY-OVERLAY.\n |        certificate: If certificate by post. Boolean.\n |        claimed_score: Claimed score in int.\n |        club: Club represented.\n |        created_by: Software responsible for creating this log file.\n |          Optional, defaults to \"cabrillo (Python)\".\n |        email: Email address of the submitter.\n |        location: State/section/ID depending on contest.\n |        name: Log submitter's name.\n |        address: Mailing address, as a list, one entry per line.\n |        address_city: Optional granular address info.\n |        address_state_province: Optional granular address info.\n |        address_postalcode: Optional granular address info.\n |        address_country: Optional granular address info.\n |        operators: List of operators' callsigns.\n |        offtime: List containing two datetime objects denoting start and\n |          end of off-time.\n |        soapbox: List of lines of soapbox text.\n |        qso: List of all QSO objects, including ignored QSOs.\n |        valid_qso: List of all valid QSOs (excluding X-QSO) (read-only).\n |        x_qso: List of QSO objects for ignored QSOs (X-QSO only) (read-only).\n |        x_anything: An ordered mapping of ignored/unknown attributes of the Cabrillo file.\n```\n\n```python\n class QSO(builtins.object)\n |  QSO(freq, mo, date, de_call, dx_call, de_exch=[], dx_exch=[], t=None, valid=True)\n |  \n |  Representation of a single QSO.\n |  \n |  Attributes:\n |      freq: Frequency in kHz in str representation.\n |      mo: Transmission mode of QSO.\n |      date: UTC time as datetime.datetime object.\n |      de_call: Sent callsign.\n |      de_exch: Sent exchange. List, first item is RST, second tends to be context exchange.\n |      dx_call: Received callsign.\n |      dx_exch: Received exchange. List, first item is RST, second tends to be context exchange.\n |      t: Transmitter ID for multi-transmitter categories in int. 0/1.\n |      valid: True for QSO that counts, False for an X-QSO.\n```\n\n## Contributors\n\nPull requests are appreciated!\n\nThe following instructions show how to obtain the sourcecode and execute the tests.\nThey assume Python 3.3 or later.\n\nFor Posix plattforms (which includes Mac and Linux):\n\n```sh\ngit clone https://github.com/thxo/cabrillo.git\ncd cabrillo\npython3 -m venv python-venv\nsource python-venv/bin/activate\npip install -r requirements_test.txt\npy.test --cov-report term-missing --cov cabrillo -v\n```\n\nOn a Windows machine, using `cmd.exe`, substitute\n`python-venv/Scripts/activate` for\n`source python-venv/bin/activate`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thxo/cabrillo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cabrillo", "package_url": "https://pypi.org/project/cabrillo/", "platform": "", "project_url": "https://pypi.org/project/cabrillo/", "project_urls": {"Homepage": "https://github.com/thxo/cabrillo"}, "release_url": "https://pypi.org/project/cabrillo/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "A Python library to parse Cabrillo-format amateur radio contest logs.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>cabrillo <a href=\"https://travis-ci.com/thxo/cabrillo\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c71ccfae2f49d96ff35c0d392a67d73fff6e9711/68747470733a2f2f7472617669732d63692e636f6d2f7468786f2f63616272696c6c6f2e7376673f6272616e63683d6d6173746572\"></a></h2>\n<p>A Python library to parse Cabrillo-format amateur radio contest logs.</p>\n<h1>Getting Started</h1>\n<h2>Basic Parsing</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">cabrillo.parser</span> <span class=\"kn\">import</span> <span class=\"n\">parse_log_file</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cab</span> <span class=\"o\">=</span> <span class=\"n\">parse_log_file</span><span class=\"p\">(</span><span class=\"s1\">'tests/CQWPX.log'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cab</span><span class=\"o\">.</span><span class=\"n\">callsign</span>\n<span class=\"s1\">'AA1ZZZ'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cab</span><span class=\"o\">.</span><span class=\"n\">qso</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">cabrillo</span><span class=\"o\">.</span><span class=\"n\">qso</span><span class=\"o\">.</span><span class=\"n\">QSO</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x10cb09f28</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">cabrillo</span><span class=\"o\">.</span><span class=\"n\">qso</span><span class=\"o\">.</span><span class=\"n\">QSO</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x10cbc8860</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cab</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span>\n<span class=\"s1\">'START-OF-LOG: 3.0</span><span class=\"se\">\\n</span><span class=\"s1\">CREATED-BY: WriteLog V10.72C</span><span class=\"se\">\\n</span><span class=\"s1\">CALLSIGN: AA1ZZZ</span><span class=\"se\">\\n</span><span class=\"s1\">[...snip...]END-OF-LOG:</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n</pre>\n<p>You can also write to a file:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'out.cbr'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">o</span><span class=\"p\">:</span>\n    <span class=\"n\">cab</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n</pre>\n<p>The same works for text-file-like objects.</p>\n<p>Finally, if you desire to parse Cabrillo data already present as a Python string,\nyou can do so with, e.g.,</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cabrillo.parser</span> <span class=\"kn\">import</span> <span class=\"n\">parse_log_text</span>\n\n<span class=\"n\">cabrillo_text</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"START-OF-LOG: 3.0</span>\n<span class=\"s2\">END-OF-LOG:</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">cab</span> <span class=\"o\">=</span> <span class=\"n\">parse_log_text</span><span class=\"p\">(</span><span class=\"n\">cabrillo_text</span><span class=\"p\">)</span>\n</pre>\n<h2>Ignoring malorder</h2>\n<p>Cabrillo logs must be time-sorted. If you want to read files that are\nnot so sorted, but other than that are Cabrillo files, you can do so by\nadding a keyword argument <code>ignore_order=False</code> to either <code>parse_log_file</code>\nor <code>parse_log_text</code>. If you do that, the resulting Cabrillo object\nwill refuse to generate (potentially non-)Cabrillo output.</p>\n<h2>Matching Two QSOs in Contest Scoring</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># We start off with a pair with complementary data.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">cabrillo</span> <span class=\"kn\">import</span> <span class=\"n\">QSO</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qso1</span> <span class=\"o\">=</span> <span class=\"n\">QSO</span><span class=\"p\">(</span><span class=\"s1\">'14313'</span><span class=\"p\">,</span> <span class=\"s1\">'PH'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"s1\">'May 30 2018 10:15PM'</span><span class=\"p\">,</span> <span class=\"s1\">'%b </span><span class=\"si\">%d</span><span class=\"s1\"> %Y %I:%M%p'</span><span class=\"p\">),</span> <span class=\"s1\">'KX0XXX'</span><span class=\"p\">,</span> <span class=\"s1\">'KX9XXX'</span><span class=\"p\">,</span> <span class=\"n\">de_exch</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'59'</span><span class=\"p\">,</span> <span class=\"s1\">'10'</span><span class=\"p\">,</span> <span class=\"s1\">'CO'</span><span class=\"p\">],</span> <span class=\"n\">dx_exch</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'44'</span><span class=\"p\">,</span> <span class=\"s1\">'20'</span><span class=\"p\">,</span> <span class=\"s1\">'IN'</span><span class=\"p\">],</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qso2</span> <span class=\"o\">=</span> <span class=\"n\">QSO</span><span class=\"p\">(</span><span class=\"s1\">'14313'</span><span class=\"p\">,</span> <span class=\"s1\">'PH'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"s1\">'May 30 2018 10:10PM'</span><span class=\"p\">,</span> <span class=\"s1\">'%b </span><span class=\"si\">%d</span><span class=\"s1\"> %Y %I:%M%p'</span><span class=\"p\">),</span> <span class=\"s1\">'KX9XXX'</span><span class=\"p\">,</span> <span class=\"s1\">'KX0XXX'</span><span class=\"p\">,</span> <span class=\"n\">de_exch</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'44'</span><span class=\"p\">,</span> <span class=\"s1\">'20'</span><span class=\"p\">,</span> <span class=\"s1\">'IN'</span><span class=\"p\">],</span> <span class=\"n\">dx_exch</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'59'</span><span class=\"p\">,</span> <span class=\"s1\">'10'</span><span class=\"p\">,</span> <span class=\"s1\">'CO'</span><span class=\"p\">],</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qso1</span><span class=\"o\">.</span><span class=\"n\">match_against</span><span class=\"p\">(</span><span class=\"n\">qso2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qso1</span><span class=\"o\">.</span><span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"s1\">'14000'</span>  <span class=\"c1\"># Same band, still will match.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qso1</span><span class=\"o\">.</span><span class=\"n\">match_against</span><span class=\"p\">(</span><span class=\"n\">qso2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qso1</span><span class=\"o\">.</span><span class=\"n\">match_against</span><span class=\"p\">(</span><span class=\"n\">qso2</span><span class=\"p\">,</span> <span class=\"n\">max_time_delta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Make time checking less lenient.</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># All flags.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qso1</span><span class=\"o\">.</span><span class=\"n\">match_against</span><span class=\"p\">(</span><span class=\"n\">qso2</span><span class=\"p\">,</span> <span class=\"n\">max_time_delta</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">check_exch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check_band</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h1>Attributes</h1>\n<p>Use these attributes to access and construct individual objects.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Cabrillo</span><span class=\"p\">(</span><span class=\"n\">builtins</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">)</span>\n <span class=\"o\">|</span>  <span class=\"n\">Cabrillo</span><span class=\"p\">(</span><span class=\"n\">check_categories</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">d</span><span class=\"p\">)</span>\n <span class=\"o\">|</span>  \n <span class=\"o\">|</span>  <span class=\"n\">Representation</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">Cabrillo</span> <span class=\"n\">log</span> <span class=\"n\">file</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>  \n <span class=\"o\">|</span>  <span class=\"n\">Attributes</span><span class=\"p\">:</span>\n <span class=\"o\">|</span>        <span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">only</span> <span class=\"n\">supported</span> <span class=\"n\">version</span> <span class=\"ow\">is</span> <span class=\"s1\">'3.0'</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">callsign</span><span class=\"p\">:</span> <span class=\"n\">Call</span> <span class=\"n\">sign</span> <span class=\"n\">of</span> <span class=\"n\">station</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">contest</span><span class=\"p\">:</span> <span class=\"n\">Contest</span> <span class=\"n\">identification</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_assisted</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY_ASSISTED</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_band</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY_BAND</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_mode</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY_MODE</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_operator</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY_OPERATOR</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_power</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY</span><span class=\"o\">-</span><span class=\"n\">POWER</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_station</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY</span><span class=\"o\">-</span><span class=\"n\">STATION</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_time</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY</span><span class=\"o\">-</span><span class=\"n\">TIME</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_transmitter</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY</span><span class=\"o\">-</span><span class=\"n\">TRANSMITTER</span><span class=\"o\">.</span> <span class=\"n\">Optional</span> <span class=\"k\">for</span>\n <span class=\"o\">|</span>          <span class=\"n\">multi</span><span class=\"o\">-</span><span class=\"n\">op</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">category_overlay</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"n\">of</span> <span class=\"n\">CATEGORY</span><span class=\"o\">-</span><span class=\"n\">OVERLAY</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">certificate</span><span class=\"p\">:</span> <span class=\"n\">If</span> <span class=\"n\">certificate</span> <span class=\"n\">by</span> <span class=\"n\">post</span><span class=\"o\">.</span> <span class=\"n\">Boolean</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">claimed_score</span><span class=\"p\">:</span> <span class=\"n\">Claimed</span> <span class=\"n\">score</span> <span class=\"ow\">in</span> <span class=\"nb\">int</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">club</span><span class=\"p\">:</span> <span class=\"n\">Club</span> <span class=\"n\">represented</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">created_by</span><span class=\"p\">:</span> <span class=\"n\">Software</span> <span class=\"n\">responsible</span> <span class=\"k\">for</span> <span class=\"n\">creating</span> <span class=\"n\">this</span> <span class=\"n\">log</span> <span class=\"n\">file</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>          <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">defaults</span> <span class=\"n\">to</span> <span class=\"s2\">\"cabrillo (Python)\"</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"n\">Email</span> <span class=\"n\">address</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">submitter</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"n\">State</span><span class=\"o\">/</span><span class=\"n\">section</span><span class=\"o\">/</span><span class=\"n\">ID</span> <span class=\"n\">depending</span> <span class=\"n\">on</span> <span class=\"n\">contest</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Log</span> <span class=\"n\">submitter</span><span class=\"s1\">'s name.</span>\n <span class=\"o\">|</span>        <span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"n\">Mailing</span> <span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"k\">as</span> <span class=\"n\">a</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">one</span> <span class=\"n\">entry</span> <span class=\"n\">per</span> <span class=\"n\">line</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">address_city</span><span class=\"p\">:</span> <span class=\"n\">Optional</span> <span class=\"n\">granular</span> <span class=\"n\">address</span> <span class=\"n\">info</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">address_state_province</span><span class=\"p\">:</span> <span class=\"n\">Optional</span> <span class=\"n\">granular</span> <span class=\"n\">address</span> <span class=\"n\">info</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">address_postalcode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span> <span class=\"n\">granular</span> <span class=\"n\">address</span> <span class=\"n\">info</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">address_country</span><span class=\"p\">:</span> <span class=\"n\">Optional</span> <span class=\"n\">granular</span> <span class=\"n\">address</span> <span class=\"n\">info</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">operators</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"n\">of</span> <span class=\"n\">operators</span><span class=\"s1\">' callsigns.</span>\n <span class=\"o\">|</span>        <span class=\"n\">offtime</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"n\">containing</span> <span class=\"n\">two</span> <span class=\"n\">datetime</span> <span class=\"n\">objects</span> <span class=\"n\">denoting</span> <span class=\"n\">start</span> <span class=\"ow\">and</span>\n <span class=\"o\">|</span>          <span class=\"n\">end</span> <span class=\"n\">of</span> <span class=\"n\">off</span><span class=\"o\">-</span><span class=\"n\">time</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">soapbox</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"n\">of</span> <span class=\"n\">lines</span> <span class=\"n\">of</span> <span class=\"n\">soapbox</span> <span class=\"n\">text</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">qso</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"n\">of</span> <span class=\"nb\">all</span> <span class=\"n\">QSO</span> <span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">including</span> <span class=\"n\">ignored</span> <span class=\"n\">QSOs</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">valid_qso</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"n\">of</span> <span class=\"nb\">all</span> <span class=\"n\">valid</span> <span class=\"n\">QSOs</span> <span class=\"p\">(</span><span class=\"n\">excluding</span> <span class=\"n\">X</span><span class=\"o\">-</span><span class=\"n\">QSO</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">read</span><span class=\"o\">-</span><span class=\"n\">only</span><span class=\"p\">)</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">x_qso</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"n\">of</span> <span class=\"n\">QSO</span> <span class=\"n\">objects</span> <span class=\"k\">for</span> <span class=\"n\">ignored</span> <span class=\"n\">QSOs</span> <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">-</span><span class=\"n\">QSO</span> <span class=\"n\">only</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">read</span><span class=\"o\">-</span><span class=\"n\">only</span><span class=\"p\">)</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>        <span class=\"n\">x_anything</span><span class=\"p\">:</span> <span class=\"n\">An</span> <span class=\"n\">ordered</span> <span class=\"n\">mapping</span> <span class=\"n\">of</span> <span class=\"n\">ignored</span><span class=\"o\">/</span><span class=\"n\">unknown</span> <span class=\"n\">attributes</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">Cabrillo</span> <span class=\"n\">file</span><span class=\"o\">.</span>\n</pre>\n<pre> <span class=\"k\">class</span> <span class=\"nc\">QSO</span><span class=\"p\">(</span><span class=\"n\">builtins</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">)</span>\n <span class=\"o\">|</span>  <span class=\"n\">QSO</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">mo</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">de_call</span><span class=\"p\">,</span> <span class=\"n\">dx_call</span><span class=\"p\">,</span> <span class=\"n\">de_exch</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">dx_exch</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">valid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n <span class=\"o\">|</span>  \n <span class=\"o\">|</span>  <span class=\"n\">Representation</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">single</span> <span class=\"n\">QSO</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>  \n <span class=\"o\">|</span>  <span class=\"n\">Attributes</span><span class=\"p\">:</span>\n <span class=\"o\">|</span>      <span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"n\">Frequency</span> <span class=\"ow\">in</span> <span class=\"n\">kHz</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span> <span class=\"n\">representation</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>      <span class=\"n\">mo</span><span class=\"p\">:</span> <span class=\"n\">Transmission</span> <span class=\"n\">mode</span> <span class=\"n\">of</span> <span class=\"n\">QSO</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>      <span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"n\">UTC</span> <span class=\"n\">time</span> <span class=\"k\">as</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"nb\">object</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>      <span class=\"n\">de_call</span><span class=\"p\">:</span> <span class=\"n\">Sent</span> <span class=\"n\">callsign</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>      <span class=\"n\">de_exch</span><span class=\"p\">:</span> <span class=\"n\">Sent</span> <span class=\"n\">exchange</span><span class=\"o\">.</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">first</span> <span class=\"n\">item</span> <span class=\"ow\">is</span> <span class=\"n\">RST</span><span class=\"p\">,</span> <span class=\"n\">second</span> <span class=\"n\">tends</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">context</span> <span class=\"n\">exchange</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>      <span class=\"n\">dx_call</span><span class=\"p\">:</span> <span class=\"n\">Received</span> <span class=\"n\">callsign</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>      <span class=\"n\">dx_exch</span><span class=\"p\">:</span> <span class=\"n\">Received</span> <span class=\"n\">exchange</span><span class=\"o\">.</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">first</span> <span class=\"n\">item</span> <span class=\"ow\">is</span> <span class=\"n\">RST</span><span class=\"p\">,</span> <span class=\"n\">second</span> <span class=\"n\">tends</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">context</span> <span class=\"n\">exchange</span><span class=\"o\">.</span>\n <span class=\"o\">|</span>      <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"n\">Transmitter</span> <span class=\"n\">ID</span> <span class=\"k\">for</span> <span class=\"n\">multi</span><span class=\"o\">-</span><span class=\"n\">transmitter</span> <span class=\"n\">categories</span> <span class=\"ow\">in</span> <span class=\"nb\">int</span><span class=\"o\">.</span> <span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mf\">1.</span>\n <span class=\"o\">|</span>      <span class=\"n\">valid</span><span class=\"p\">:</span> <span class=\"kc\">True</span> <span class=\"k\">for</span> <span class=\"n\">QSO</span> <span class=\"n\">that</span> <span class=\"n\">counts</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">X</span><span class=\"o\">-</span><span class=\"n\">QSO</span><span class=\"o\">.</span>\n</pre>\n<h2>Contributors</h2>\n<p>Pull requests are appreciated!</p>\n<p>The following instructions show how to obtain the sourcecode and execute the tests.\nThey assume Python 3.3 or later.</p>\n<p>For Posix plattforms (which includes Mac and Linux):</p>\n<pre>git clone https://github.com/thxo/cabrillo.git\n<span class=\"nb\">cd</span> cabrillo\npython3 -m venv python-venv\n<span class=\"nb\">source</span> python-venv/bin/activate\npip install -r requirements_test.txt\npy.test --cov-report term-missing --cov cabrillo -v\n</pre>\n<p>On a Windows machine, using <code>cmd.exe</code>, substitute\n<code>python-venv/Scripts/activate</code> for\n<code>source python-venv/bin/activate</code>.</p>\n\n          </div>"}, "last_serial": 6197568, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c50ae1902aa7b65be4c458814aa97696", "sha256": "8ddf5dc9eff0ae5d4db9a407d22da0224ca4fee8a7607f0cfb06d64cffdecf5c"}, "downloads": -1, "filename": "cabrillo-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c50ae1902aa7b65be4c458814aa97696", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9409, "upload_time": "2018-12-16T13:14:43", "upload_time_iso_8601": "2018-12-16T13:14:43.553258Z", "url": "https://files.pythonhosted.org/packages/86/27/0f82f3122954e78509820f58f13184a2ce51abadb64a2b53cf6886fdcec7/cabrillo-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4da7a892ab17e52eec38538f222f349", "sha256": "4d6649e29a91363057968d852652167215fe81786b8f98856a2ebfcd15a83a83"}, "downloads": -1, "filename": "cabrillo-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b4da7a892ab17e52eec38538f222f349", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6342, "upload_time": "2018-12-16T13:14:45", "upload_time_iso_8601": "2018-12-16T13:14:45.735061Z", "url": "https://files.pythonhosted.org/packages/23/f9/98da6279a923400382b671074cc0c9d8670f9d6ec9bf956e0790f8e95609/cabrillo-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a9f8a325c3a55144a94517495a08f4d3", "sha256": "3c48968fd41bb78bbe286826957ee2708c314eabcf71dab34853f5a07f8e514a"}, "downloads": -1, "filename": "cabrillo-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a9f8a325c3a55144a94517495a08f4d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6560, "upload_time": "2018-12-23T04:28:55", "upload_time_iso_8601": "2018-12-23T04:28:55.529816Z", "url": "https://files.pythonhosted.org/packages/0a/ce/f19f85651c24e124ba3ae53d54e55eb500acf3a960958ac82cda3c1e587c/cabrillo-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "20676d31d22ca0fab15b319f8f6e911c", "sha256": "4f7424d39f2b9e3696547b903527b4203e4d4a78974cad3f30059c877ad9f7bb"}, "downloads": -1, "filename": "cabrillo-0.0.3.tar.gz", "has_sig": false, "md5_digest": "20676d31d22ca0fab15b319f8f6e911c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8741, "upload_time": "2018-12-25T09:48:47", "upload_time_iso_8601": "2018-12-25T09:48:47.839997Z", "url": "https://files.pythonhosted.org/packages/70/77/1f99363f402f4566429a81992554ff5f4f3195067e8c4363a478018460d9/cabrillo-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "af1b4f49cde2a69206e6116a18e5ec1a", "sha256": "7e4d9aa127369a7329c781a6fe8ecce3656d7659c17682f945a008f4eb5adde0"}, "downloads": -1, "filename": "cabrillo-0.0.4.tar.gz", "has_sig": false, "md5_digest": "af1b4f49cde2a69206e6116a18e5ec1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11696, "upload_time": "2019-11-25T22:56:44", "upload_time_iso_8601": "2019-11-25T22:56:44.481091Z", "url": "https://files.pythonhosted.org/packages/40/30/47a763dd950881dad83f5512ae1efa0cec7582c567d04e0a7e5c43b88223/cabrillo-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af1b4f49cde2a69206e6116a18e5ec1a", "sha256": "7e4d9aa127369a7329c781a6fe8ecce3656d7659c17682f945a008f4eb5adde0"}, "downloads": -1, "filename": "cabrillo-0.0.4.tar.gz", "has_sig": false, "md5_digest": "af1b4f49cde2a69206e6116a18e5ec1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11696, "upload_time": "2019-11-25T22:56:44", "upload_time_iso_8601": "2019-11-25T22:56:44.481091Z", "url": "https://files.pythonhosted.org/packages/40/30/47a763dd950881dad83f5512ae1efa0cec7582c567d04e0a7e5c43b88223/cabrillo-0.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:44 2020"}