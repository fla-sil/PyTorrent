{"info": {"author": "CusDeb Team", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "|pypi|\n\nDjango Shirow\n=============\n\nTo connect to the RPC servers based on\n`Shirow <https://github.com/tolstoyevsky/shirow>`__, clients have to be\nauthenticated using the `Django authentication\nsystem <https://docs.djangoproject.com/en/2.0/topics/auth/>`__. Thus,\nthe package provides the ``create_token_if_needed`` decorator which is\nintended for Django views. First, the decorator tries to obtain a token\nfrom Redis. Then, in case the try doesn't succeed,\n``create_token_if_needed`` will create and put it into Redis and the\nuser's session. Finally, the client can get the token from the session\nand prove the RPC server he/she is an authenticated user.\n\nThe decorator uses JWT for generating tokens. JWT (JSON Web Token) is\nthe open standard defined in `RFC\n7519 <https://tools.ietf.org/html/rfc7519>`__.\n\nInstallation\n------------\n\n::\n\n    $ pip install django-shirow\n\nUsage\n-----\n\nThis Django application uses the following configuration keys:\n\n-  ``SECRET_KEY`` is a string which contains a secret. Django uses the\n   configuration key for `cryptographic\n   signing <https://docs.djangoproject.com/en/2.0/topics/signing/>`__,\n   but ``create_token_if_needed`` uses it for signing the tokens, using\n   the algorithm specified by ``TOKEN_ALGORITHM_ENCODING`` (see below).\n-  ``TOKEN_TTL`` is a number which contains a time-in-seconds value. It\n   indicates how long tokens are considered valid. If ``TOKEN_TTL`` is\n   not set, then TTL is set to ``900`` (15 minutes).\n-  ``TOKEN_ALGORITHM_ENCODING`` is a string which contains `one of the\n   algorithms <https://pyjwt.readthedocs.io/en/latest/algorithms.html#digital-signature-algorithms>`__\n   used for signing tokens. If ``TOKEN_ALGORITHM_ENCODING`` is not set,\n   then the algorithm is set to ``HS256``.\n-  ``REDIS_HOST`` is a string which contains the Redis host. If\n   ``REDIS_HOST`` is not set, then the host is set to ``127.0.0.1``.\n-  ``REDIS_PORT`` is a number which contains the port the Redis server\n   listens on. If ``REDIS_PORT`` is not set, then the port is set to\n   ``6379``.\n\n.. |pypi| image:: https://img.shields.io/pypi/v/django-shirow.svg\n   :target: https://pypi.org/project/django-shirow/", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tolstoyevsky/shirow", "keywords": "", "license": "http://www.apache.org/licenses/LICENSE-2.0", "maintainer": "Evgeny Golyshev", "maintainer_email": "Evgeny Golyshev <eugulixes@gmail.com>", "name": "django-shirow", "package_url": "https://pypi.org/project/django-shirow/", "platform": "", "project_url": "https://pypi.org/project/django-shirow/", "project_urls": {"Homepage": "https://github.com/tolstoyevsky/shirow"}, "release_url": "https://pypi.org/project/django-shirow/0.4/", "requires_dist": null, "requires_python": "", "summary": "Django Shirow package", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/django-shirow/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ad864acfcfa5480a8758a298379e66044967b42/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d736869726f772e737667\"></a></p>\n<div id=\"django-shirow\">\n<h2>Django Shirow</h2>\n<p>To connect to the RPC servers based on\n<a href=\"https://github.com/tolstoyevsky/shirow\" rel=\"nofollow\">Shirow</a>, clients have to be\nauthenticated using the <a href=\"https://docs.djangoproject.com/en/2.0/topics/auth/\" rel=\"nofollow\">Django authentication\nsystem</a>. Thus,\nthe package provides the <tt>create_token_if_needed</tt> decorator which is\nintended for Django views. First, the decorator tries to obtain a token\nfrom Redis. Then, in case the try doesn\u2019t succeed,\n<tt>create_token_if_needed</tt> will create and put it into Redis and the\nuser\u2019s session. Finally, the client can get the token from the session\nand prove the RPC server he/she is an authenticated user.</p>\n<p>The decorator uses JWT for generating tokens. JWT (JSON Web Token) is\nthe open standard defined in <a href=\"https://tools.ietf.org/html/rfc7519\" rel=\"nofollow\">RFC\n7519</a>.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>$ pip install django-shirow\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>This Django application uses the following configuration keys:</p>\n<ul>\n<li><tt>SECRET_KEY</tt> is a string which contains a secret. Django uses the\nconfiguration key for <a href=\"https://docs.djangoproject.com/en/2.0/topics/signing/\" rel=\"nofollow\">cryptographic\nsigning</a>,\nbut <tt>create_token_if_needed</tt> uses it for signing the tokens, using\nthe algorithm specified by <tt>TOKEN_ALGORITHM_ENCODING</tt> (see below).</li>\n<li><tt>TOKEN_TTL</tt> is a number which contains a time-in-seconds value. It\nindicates how long tokens are considered valid. If <tt>TOKEN_TTL</tt> is\nnot set, then TTL is set to <tt>900</tt> (15 minutes).</li>\n<li><tt>TOKEN_ALGORITHM_ENCODING</tt> is a string which contains <a href=\"https://pyjwt.readthedocs.io/en/latest/algorithms.html#digital-signature-algorithms\" rel=\"nofollow\">one of the\nalgorithms</a>\nused for signing tokens. If <tt>TOKEN_ALGORITHM_ENCODING</tt> is not set,\nthen the algorithm is set to <tt>HS256</tt>.</li>\n<li><tt>REDIS_HOST</tt> is a string which contains the Redis host. If\n<tt>REDIS_HOST</tt> is not set, then the host is set to <tt>127.0.0.1</tt>.</li>\n<li><tt>REDIS_PORT</tt> is a number which contains the port the Redis server\nlistens on. If <tt>REDIS_PORT</tt> is not set, then the port is set to\n<tt>6379</tt>.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4682858, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "a9bb4c955bc5e4c1b51f9ecf1c888b7d", "sha256": "b73a0a5c1f15935f1c86eca199a5dfddc73bc6f12d896dc12d2981df8aced93d"}, "downloads": -1, "filename": "django-shirow-0.3.tar.gz", "has_sig": false, "md5_digest": "a9bb4c955bc5e4c1b51f9ecf1c888b7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3074, "upload_time": "2018-02-22T18:11:55", "upload_time_iso_8601": "2018-02-22T18:11:55.451868Z", "url": "https://files.pythonhosted.org/packages/34/f4/f4389d4498ef7a4e44698fa12abed1e80991028ef40b394ac1100d756a7f/django-shirow-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "27466f7bcfe1107604e15a4a9fa3a989", "sha256": "9d84e3bdbb959a437bb4dd027d1709573771239e4e7c5665478886c703040ebb"}, "downloads": -1, "filename": "django-shirow-0.4.tar.gz", "has_sig": false, "md5_digest": "27466f7bcfe1107604e15a4a9fa3a989", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3196, "upload_time": "2019-01-10T21:51:40", "upload_time_iso_8601": "2019-01-10T21:51:40.348911Z", "url": "https://files.pythonhosted.org/packages/28/ae/6f3124119a4e951c38af137164d468c0452e921542b6d854a7a017bf0bff/django-shirow-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "27466f7bcfe1107604e15a4a9fa3a989", "sha256": "9d84e3bdbb959a437bb4dd027d1709573771239e4e7c5665478886c703040ebb"}, "downloads": -1, "filename": "django-shirow-0.4.tar.gz", "has_sig": false, "md5_digest": "27466f7bcfe1107604e15a4a9fa3a989", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3196, "upload_time": "2019-01-10T21:51:40", "upload_time_iso_8601": "2019-01-10T21:51:40.348911Z", "url": "https://files.pythonhosted.org/packages/28/ae/6f3124119a4e951c38af137164d468c0452e921542b6d854a7a017bf0bff/django-shirow-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:31 2020"}