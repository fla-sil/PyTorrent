{"info": {"author": "Martin Thorsen Ranang", "author_email": "mtr@ranang.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Testing"], "description": "Any Valid\r\n=========\r\n\r\nThe AnyValid class is a wrapper class to be used with, for example,\r\n`formencode.validators <http://www.formencode.org/en/latest/modules/validators.html#module-formencode.validators>`__,\r\nthat lets you partially specify what kind of objects it should match. To\r\nsee the usefulness of this, it might be easier to first have a look at\r\nmock's ANY object (`from unittest.mock's\r\ndocumentation <http://docs.python.org/3/library/unittest.mock.html#any>`__):\r\n\r\n    Sometimes you may need to make assertions about some of the\r\n    arguments in a call to mock, but either not care about some of the\r\n    arguments or want to pull them individually out of call\\_args and\r\n    make more complex assertions on them.\r\n\r\n    To ignore certain arguments you can pass in objects that compare\r\n    equal to everything. Calls to assert\\_called\\_with() and\r\n    assert\\_called\\_once\\_with() will then succeed no matter what was\r\n    passed in.\r\n\r\n    .. code:: python\r\n\r\n        >>\r\n        >> mock = Mock(return_value=None)\r\n        >> mock('foo', bar=object())\r\n        >> mock.assert_called_once_with('foo', bar=ANY)\r\n\r\n    ANY can also be used in comparisons with call lists like\r\n    mock\\_calls:\r\n\r\n    .. code:: python\r\n\r\n        >> \r\n        >> m = MagicMock(return_value=None) \r\n        >> m(1) \r\n        >> m(1, 2) \r\n        >> m(object()) \r\n        >> m.mock_calls == [call(1), call(1, 2), ANY] \r\n        True\r\n\r\nNow, what if you would like to make certain assertions about an\r\nargument, but perhaps don't know the exact value, or want to avoid\r\ncertain values (for example ``None``). This is where AnyValid might come\r\nin handy. It provides a really simple way to leverage all the great work\r\nthat has been put into formencode's validators, so that your testing\r\ncode can make advanced assertions while being easy to read and maintain.\r\n\r\nExamples\r\n========\r\n\r\nSimple argument matching:\r\n\r\n.. code:: python\r\n\r\n>>> \r\n>>> from mock import Mock \r\n>>> from any_valid import AnyValid, Int, String \r\n>>> \r\n>>> def check_call(foo, bar): \r\n...     try: \r\n...         mock = Mock(return_value=None) \r\n...         mock(foo, bar=bar) \r\n...         mock.assert_called_once_with(AnyValid(String(min_lenght=3)),  \r\n...                                      bar=AnyValid(Int(min=2))) \r\n...     except AssertionError: \r\n...         return False \r\n...     return True \r\n...  \r\n>>> check_call('fo', 1) \r\nFalse \r\n>>> check_call(8, 0) \r\nFalse \r\n>>> check_call('foo', 2) \r\nTrue\r\n\r\nMatching a loosely defined dict argument:\r\n\r\n.. code:: python\r\n\r\n>>> from any_valid import AnyValid, Number, OneOf \r\n>>> valid_input = { ...     'core_temperature': AnyValid(Number(min=35, max=41.5)), \r\n...     'protocol': AnyValid(OneOf(['https', 'http'])), \r\n...     } \r\n>>> mock = Mock(return_value=None) \r\n>>> mock({'core_temperature': 36.8, 'protocol': 'https'}) \r\n>>> mock.assert_called_with(valid_input) \r\n>>>", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mtr/AnyValid", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "AnyValid", "package_url": "https://pypi.org/project/AnyValid/", "platform": "", "project_url": "https://pypi.org/project/AnyValid/", "project_urls": {"Homepage": "https://github.com/mtr/AnyValid"}, "release_url": "https://pypi.org/project/AnyValid/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Library that eases partial matching of objects.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Any Valid\n<br>=========\n<br>\n<br>The AnyValid class is a wrapper class to be used with, for example,\n<br>`formencode.validators &lt;http://www.formencode.org/en/latest/modules/validators.html#module-formencode.validators&gt;`__,\n<br>that lets you partially specify what kind of objects it should match. To\n<br>see the usefulness of this, it might be easier to first have a look at\n<br>mock's ANY object (`from unittest.mock's\n<br>documentation &lt;http://docs.python.org/3/library/unittest.mock.html#any&gt;`__):\n<br>\n<br>    Sometimes you may need to make assertions about some of the\n<br>    arguments in a call to mock, but either not care about some of the\n<br>    arguments or want to pull them individually out of call\\_args and\n<br>    make more complex assertions on them.\n<br>\n<br>    To ignore certain arguments you can pass in objects that compare\n<br>    equal to everything. Calls to assert\\_called\\_with() and\n<br>    assert\\_called\\_once\\_with() will then succeed no matter what was\n<br>    passed in.\n<br>\n<br>    .. code:: python\n<br>\n<br>        &gt;&gt;\n<br>        &gt;&gt; mock = Mock(return_value=None)\n<br>        &gt;&gt; mock('foo', bar=object())\n<br>        &gt;&gt; mock.assert_called_once_with('foo', bar=ANY)\n<br>\n<br>    ANY can also be used in comparisons with call lists like\n<br>    mock\\_calls:\n<br>\n<br>    .. code:: python\n<br>\n<br>        &gt;&gt; \n<br>        &gt;&gt; m = MagicMock(return_value=None) \n<br>        &gt;&gt; m(1) \n<br>        &gt;&gt; m(1, 2) \n<br>        &gt;&gt; m(object()) \n<br>        &gt;&gt; m.mock_calls == [call(1), call(1, 2), ANY] \n<br>        True\n<br>\n<br>Now, what if you would like to make certain assertions about an\n<br>argument, but perhaps don't know the exact value, or want to avoid\n<br>certain values (for example ``None``). This is where AnyValid might come\n<br>in handy. It provides a really simple way to leverage all the great work\n<br>that has been put into formencode's validators, so that your testing\n<br>code can make advanced assertions while being easy to read and maintain.\n<br>\n<br>Examples\n<br>========\n<br>\n<br>Simple argument matching:\n<br>\n<br>.. code:: python\n<br>\n<br>&gt;&gt;&gt; \n<br>&gt;&gt;&gt; from mock import Mock \n<br>&gt;&gt;&gt; from any_valid import AnyValid, Int, String \n<br>&gt;&gt;&gt; \n<br>&gt;&gt;&gt; def check_call(foo, bar): \n<br>...     try: \n<br>...         mock = Mock(return_value=None) \n<br>...         mock(foo, bar=bar) \n<br>...         mock.assert_called_once_with(AnyValid(String(min_lenght=3)),  \n<br>...                                      bar=AnyValid(Int(min=2))) \n<br>...     except AssertionError: \n<br>...         return False \n<br>...     return True \n<br>...  \n<br>&gt;&gt;&gt; check_call('fo', 1) \n<br>False \n<br>&gt;&gt;&gt; check_call(8, 0) \n<br>False \n<br>&gt;&gt;&gt; check_call('foo', 2) \n<br>True\n<br>\n<br>Matching a loosely defined dict argument:\n<br>\n<br>.. code:: python\n<br>\n<br>&gt;&gt;&gt; from any_valid import AnyValid, Number, OneOf \n<br>&gt;&gt;&gt; valid_input = { ...     'core_temperature': AnyValid(Number(min=35, max=41.5)), \n<br>...     'protocol': AnyValid(OneOf(['https', 'http'])), \n<br>...     } \n<br>&gt;&gt;&gt; mock = Mock(return_value=None) \n<br>&gt;&gt;&gt; mock({'core_temperature': 36.8, 'protocol': 'https'}) \n<br>&gt;&gt;&gt; mock.assert_called_with(valid_input) \n<br>&gt;&gt;&gt;\n          </div>"}, "last_serial": 887721, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e2aa202bbc1c090a1b0473b4cc6575a5", "sha256": "53cb486804e87986de9e0e278b5a9fa6c458222625ea6c9711c7b2aefe275097"}, "downloads": -1, "filename": "AnyValid-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e2aa202bbc1c090a1b0473b4cc6575a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2825, "upload_time": "2013-10-11T20:10:46", "upload_time_iso_8601": "2013-10-11T20:10:46.708846Z", "url": "https://files.pythonhosted.org/packages/21/30/560dea258fd45b63cd64fdb0e839bc9d9b845e7861337df872c6bc317ce9/AnyValid-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e2aa202bbc1c090a1b0473b4cc6575a5", "sha256": "53cb486804e87986de9e0e278b5a9fa6c458222625ea6c9711c7b2aefe275097"}, "downloads": -1, "filename": "AnyValid-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e2aa202bbc1c090a1b0473b4cc6575a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2825, "upload_time": "2013-10-11T20:10:46", "upload_time_iso_8601": "2013-10-11T20:10:46.708846Z", "url": "https://files.pythonhosted.org/packages/21/30/560dea258fd45b63cd64fdb0e839bc9d9b845e7861337df872c6bc317ce9/AnyValid-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:55 2020"}