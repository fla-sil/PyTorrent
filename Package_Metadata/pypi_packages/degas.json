{"info": {"author": "Piotr Rarus", "author_email": "piotr.rarus@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Degas\n\nFluent interface for `numpy` arrays. Really comfy for chaining methods from\ncomputer vision packages i.e. `skimage`, `opencv`.\n\n## Getting started\n\n```shell\npip install degas\n```\n\n## Chaining methods - FluentImage\n\n### Rationale\n\nThis pattern enables us to take some load off Python's internal memory\nmanagement mechanisms, and make code much more readable.\n\nLet's consider function like this (please keep in mind that images are quite heavy variables):\n\n```py\nfrom skimage.color import rgb2gray\nfrom skimage.exposure import equalize_adapthist\nfrom skimage.feature import canny\nfrom skimage.transform import rescale\n\n\ndef preprocess(src, scale_factor):\n\n    gray = rgb2gray(src)\n    downscaled = rescale(gray, scale_factor)\n    equalized = equalize_adapthist(downscaled, clip_limit=0.2)\n    edges = canny(equalized, sigma=2.0)\n\n    return edges\n```\n\nIn this function we create 4 objects, each with unique reference label:\n\n- gray\n- downscaled\n- equalized\n\nWhile the interpreter enters `preprocess` scope, by the end of the function, all of these 4 objects live in memory, because their reference count is 1. Our memory consumption grows linear with each image operation. Considering images that can be even over 100MP, this is simply an overkill. How to manage that?\n\nWe introduce simple wrapper for an image `FluentImage`, that'll help us chain subsequent methods.\n\n<https://martinfowler.com/bliki/FluentInterface.html>\n\nAs we can't simply define new operator for python, we are overloading existing `rshift` operator `>>` (who uses it anyway?). I think it looks cool and resembles pipe `|>` operator from `F#`.\n\n### Example\n\n```py\nfrom degas import FluentImage\nfrom skimage.color import rgb2gray\nfrom skimage.exposure import equalize_adapthist\nfrom skimage.feature import canny\nfrom skimage.transform import rescale\n\n\ndef preprocess(src, scale_factor):\n    with FluentImage(src) as thresh:\n        preprocessed >> (\n            rgb2gray\n        ) >> (\n            rescale,\n            {\n                'scale_factor': scale_factor\n            }\n        ) >> (\n            equalize_adapthist,\n            {\n                'clip_limit': 0.2\n            }\n        ) >> (\n            canny,\n            {\n                'sigma': 2.0\n            }\n        )\n\n    return preprocessed\n```\n\nWe simply pass reference to function, and a dictionary that contains all additional parameters.\n\nCode is much more readable now. `numpy` arrays exist only in narrow scopes, meaning they can be marked immediately for memory sweep. It's also much easier now to change pipeline ordering.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/piotr-rarus/degas", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "degas", "package_url": "https://pypi.org/project/degas/", "platform": "", "project_url": "https://pypi.org/project/degas/", "project_urls": {"Homepage": "https://github.com/piotr-rarus/degas"}, "release_url": "https://pypi.org/project/degas/0.1.4/", "requires_dist": ["numpy", "austen", "scikit-image"], "requires_python": "", "summary": "Fluent interface for numpy arrays.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Degas</h1>\n<p>Fluent interface for <code>numpy</code> arrays. Really comfy for chaining methods from\ncomputer vision packages i.e. <code>skimage</code>, <code>opencv</code>.</p>\n<h2>Getting started</h2>\n<pre>pip install degas\n</pre>\n<h2>Chaining methods - FluentImage</h2>\n<h3>Rationale</h3>\n<p>This pattern enables us to take some load off Python's internal memory\nmanagement mechanisms, and make code much more readable.</p>\n<p>Let's consider function like this (please keep in mind that images are quite heavy variables):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">skimage.color</span> <span class=\"kn\">import</span> <span class=\"n\">rgb2gray</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.exposure</span> <span class=\"kn\">import</span> <span class=\"n\">equalize_adapthist</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.feature</span> <span class=\"kn\">import</span> <span class=\"n\">canny</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.transform</span> <span class=\"kn\">import</span> <span class=\"n\">rescale</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">preprocess</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">scale_factor</span><span class=\"p\">):</span>\n\n    <span class=\"n\">gray</span> <span class=\"o\">=</span> <span class=\"n\">rgb2gray</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">)</span>\n    <span class=\"n\">downscaled</span> <span class=\"o\">=</span> <span class=\"n\">rescale</span><span class=\"p\">(</span><span class=\"n\">gray</span><span class=\"p\">,</span> <span class=\"n\">scale_factor</span><span class=\"p\">)</span>\n    <span class=\"n\">equalized</span> <span class=\"o\">=</span> <span class=\"n\">equalize_adapthist</span><span class=\"p\">(</span><span class=\"n\">downscaled</span><span class=\"p\">,</span> <span class=\"n\">clip_limit</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">canny</span><span class=\"p\">(</span><span class=\"n\">equalized</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">edges</span>\n</pre>\n<p>In this function we create 4 objects, each with unique reference label:</p>\n<ul>\n<li>gray</li>\n<li>downscaled</li>\n<li>equalized</li>\n</ul>\n<p>While the interpreter enters <code>preprocess</code> scope, by the end of the function, all of these 4 objects live in memory, because their reference count is 1. Our memory consumption grows linear with each image operation. Considering images that can be even over 100MP, this is simply an overkill. How to manage that?</p>\n<p>We introduce simple wrapper for an image <code>FluentImage</code>, that'll help us chain subsequent methods.</p>\n<p><a href=\"https://martinfowler.com/bliki/FluentInterface.html\" rel=\"nofollow\">https://martinfowler.com/bliki/FluentInterface.html</a></p>\n<p>As we can't simply define new operator for python, we are overloading existing <code>rshift</code> operator <code>&gt;&gt;</code> (who uses it anyway?). I think it looks cool and resembles pipe <code>|&gt;</code> operator from <code>F#</code>.</p>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">degas</span> <span class=\"kn\">import</span> <span class=\"n\">FluentImage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.color</span> <span class=\"kn\">import</span> <span class=\"n\">rgb2gray</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.exposure</span> <span class=\"kn\">import</span> <span class=\"n\">equalize_adapthist</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.feature</span> <span class=\"kn\">import</span> <span class=\"n\">canny</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage.transform</span> <span class=\"kn\">import</span> <span class=\"n\">rescale</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">preprocess</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">scale_factor</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">FluentImage</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">thresh</span><span class=\"p\">:</span>\n        <span class=\"n\">preprocessed</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span>\n            <span class=\"n\">rgb2gray</span>\n        <span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span>\n            <span class=\"n\">rescale</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n                <span class=\"s1\">'scale_factor'</span><span class=\"p\">:</span> <span class=\"n\">scale_factor</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span>\n            <span class=\"n\">equalize_adapthist</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n                <span class=\"s1\">'clip_limit'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span>\n            <span class=\"n\">canny</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n                <span class=\"s1\">'sigma'</span><span class=\"p\">:</span> <span class=\"mf\">2.0</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">preprocessed</span>\n</pre>\n<p>We simply pass reference to function, and a dictionary that contains all additional parameters.</p>\n<p>Code is much more readable now. <code>numpy</code> arrays exist only in narrow scopes, meaning they can be marked immediately for memory sweep. It's also much easier now to change pipeline ordering.</p>\n\n          </div>"}, "last_serial": 6228487, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "ef58e582882d8440db289f36caab91df", "sha256": "898f2fd92eb65d9e9e30cc364671eafe287ceaa2f607ba77981cc123265ba360"}, "downloads": -1, "filename": "degas-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ef58e582882d8440db289f36caab91df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5457, "upload_time": "2019-08-25T14:54:09", "upload_time_iso_8601": "2019-08-25T14:54:09.021287Z", "url": "https://files.pythonhosted.org/packages/b3/f1/6c8a504cf3711dec68490f212a536055872d2700fb65cfcfccb8fe6c961e/degas-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cb9b70e18bde48dbd487ac40a18617b", "sha256": "28e94556de6cd7d701279d99e215c0d987d4bf6052a7fd065043e5dbbe4efae3"}, "downloads": -1, "filename": "degas-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8cb9b70e18bde48dbd487ac40a18617b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3956, "upload_time": "2019-08-25T14:54:11", "upload_time_iso_8601": "2019-08-25T14:54:11.193826Z", "url": "https://files.pythonhosted.org/packages/22/5b/eaa11c5d0f281d0524678e83e76112c970d22f2abe5d48a0cb6f1c9c53f4/degas-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3be69a858e6128bf429d5229c2ad9354", "sha256": "792f1640049daa5045011f7b7d622831a133840c493fce59b7ab9f93ba179346"}, "downloads": -1, "filename": "degas-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3be69a858e6128bf429d5229c2ad9354", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5461, "upload_time": "2019-08-26T06:05:05", "upload_time_iso_8601": "2019-08-26T06:05:05.686037Z", "url": "https://files.pythonhosted.org/packages/27/70/78a7f18ceda3439eb78b26b6b38d48f9048bcbcdf51338f5a4e8b5ae0f85/degas-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c518b7c2d65be9b78470938a21a095cf", "sha256": "6a4f4265a41d8d1ca089e44b7dd33d4e618370091bbac7d0e9da536169440631"}, "downloads": -1, "filename": "degas-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c518b7c2d65be9b78470938a21a095cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3958, "upload_time": "2019-08-26T06:05:07", "upload_time_iso_8601": "2019-08-26T06:05:07.124923Z", "url": "https://files.pythonhosted.org/packages/d1/2f/e27c071af4a18417bf084fc627a53ae7495acee9bc09ee10af8f2de5add2/degas-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "06d25eab40ccd76edabdc39cdb334661", "sha256": "593c228f3816822838092113a83538f7e41c5fc1639311985531dc9113c28512"}, "downloads": -1, "filename": "degas-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "06d25eab40ccd76edabdc39cdb334661", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5454, "upload_time": "2019-10-08T10:25:13", "upload_time_iso_8601": "2019-10-08T10:25:13.814787Z", "url": "https://files.pythonhosted.org/packages/69/60/9a9ebd1f1012c888c8cfdb39a0e36e8cbfca7d3209bc7ff86ea3a2f73c0f/degas-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04d9d4195bfe6bb9338d4599598c7435", "sha256": "ea6f70b1219654d893a3422294702eb782fc07b1730eeb4a7871a4008114de00"}, "downloads": -1, "filename": "degas-0.1.3.tar.gz", "has_sig": false, "md5_digest": "04d9d4195bfe6bb9338d4599598c7435", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3952, "upload_time": "2019-10-08T10:25:14", "upload_time_iso_8601": "2019-10-08T10:25:14.946778Z", "url": "https://files.pythonhosted.org/packages/26/e5/76a771eddb5b89a8fe12eaff5dec7230f1daf6666d8c23dead47ce121622/degas-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "863d24a1cdfcc682b27e4b45bd5ce047", "sha256": "a64a53796928d328f27bda4c3bf0f253135620a8a4338a34623f283762075e68"}, "downloads": -1, "filename": "degas-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "863d24a1cdfcc682b27e4b45bd5ce047", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5453, "upload_time": "2019-12-02T13:04:05", "upload_time_iso_8601": "2019-12-02T13:04:05.606852Z", "url": "https://files.pythonhosted.org/packages/41/0a/91fb112a49d67fe04d81619b787067f540a9bb243893ffe5c99aa2fa4edd/degas-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3394c2dbb360c2c1d32edd92b7fa27fb", "sha256": "f02b0811b93e2745732133f0885c261c267817414ce8789fb2abaf8ae9def3de"}, "downloads": -1, "filename": "degas-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3394c2dbb360c2c1d32edd92b7fa27fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3948, "upload_time": "2019-12-02T13:04:07", "upload_time_iso_8601": "2019-12-02T13:04:07.037935Z", "url": "https://files.pythonhosted.org/packages/36/fd/fd3d6d99504761c178fa17728978bf7480ed7c85dd2b004fc275ac8f43a8/degas-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "863d24a1cdfcc682b27e4b45bd5ce047", "sha256": "a64a53796928d328f27bda4c3bf0f253135620a8a4338a34623f283762075e68"}, "downloads": -1, "filename": "degas-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "863d24a1cdfcc682b27e4b45bd5ce047", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5453, "upload_time": "2019-12-02T13:04:05", "upload_time_iso_8601": "2019-12-02T13:04:05.606852Z", "url": "https://files.pythonhosted.org/packages/41/0a/91fb112a49d67fe04d81619b787067f540a9bb243893ffe5c99aa2fa4edd/degas-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3394c2dbb360c2c1d32edd92b7fa27fb", "sha256": "f02b0811b93e2745732133f0885c261c267817414ce8789fb2abaf8ae9def3de"}, "downloads": -1, "filename": "degas-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3394c2dbb360c2c1d32edd92b7fa27fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3948, "upload_time": "2019-12-02T13:04:07", "upload_time_iso_8601": "2019-12-02T13:04:07.037935Z", "url": "https://files.pythonhosted.org/packages/36/fd/fd3d6d99504761c178fa17728978bf7480ed7c85dd2b004fc275ac8f43a8/degas-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:14 2020"}