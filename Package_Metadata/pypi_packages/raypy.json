{"info": {"author": "Rohit Pandey", "author_email": "rohitpandey576@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/ryu577/pyray.svg?branch=master)](https://travis-ci.org/ryu577/pyray)\n\n# Introduction\n\nI'm creating this repository in January 2018 and it is crazy that the best open source option for rendering 3d scenes remains POV ray.\nNow, POV ray is a great program, but why can't we have that functionality (rendering 2d, 3d and higher dimensional objects and scenes) in Python, a language that is perhaps the most widely used already and only growing in popularity?\nThis code is a first step towards that goal - have the ability to do everything POV ray does - rendering complex 3d objects and scenes, animations and much more in plain, vanilla Python. I imagine this would find applications in creating videos, video games, physical simulations or just pretty pictures.\n\nWhile there certainly is a very long way to go before this can be a reality, it won't happen without taking a first step. And of course, I could use help :)\n\nAbove all else, I want to emphasize simplicity in this library and minimize the dependence on external libraries so more people can hit the ground running with it.\n\n\n# Installation\nTo install the library, run (pyray was taken on pypi):\n\n```\npip install raypy\n```\n\nMake sure you have all the requirements (requirements.txt) installed. If not, you can run:\n\n```\npip install -r requirements.txt\n```\n\nAlternately, you can fork/download the code and run from the main folder:\n\n```\npython setup.py install\n```\n\n# Requirements\nI've made every effort to keep the requirements for this project to the bare minimum so most people can get it running with almost no pain. These are - \nPython Imaging Library (PIL), numpy and scipy. For writing on math equations images using the methods in WriteOnImage.py, you'll need matplotlib and sympy. All of these can be installed quite easily with `pip install -r requirements.txt`\n\n# Usage\nTo keep things simple and the dependencies minimal, the program simply writes an image or a series of images to the folder `./Images/RotatingCube` (this was the first object that was animated with this tool). \n\nYou can run any method tagged @MoneyShot to see how this works. For example, you can run the following method from cube.py - \n\n```python\nfrom pyray.shapes.cube import *\ncube_with_cuttingplanes(7, popup=True)\n```\nand this will generate a colorful 3d cube with diagonal cutting planes shaded in different colors (in the folder where you run it from, file called im0.png). Something like this (click to see what happens) - \n\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=KuXnrg1YpiY\" \ntarget=\"_blank\"><img src=\"https://github.com/ryu577/pyray/blob/master/Images/cube_planes.png\" \nalt=\"Image formed by above method\" width=\"240\" height=\"240\" border=\"10\" align=\"center\"/></a>\n\n\nYou can now create a series of them using the following code - \n\n```python\nfor i in range(3, 15):\n\tcube_with_cuttingplanes(numTerms = i, im_ind = i-3)\n```\n\nThe series of images can then be easily converted to a video using the open source <a href=\"https://ffmpeg.org/download.html\">ffmpeg program</a>. For example\n\n> ffmpeg -framerate 10 -f image2 -i im%d.png -vb 20M vid.avi\n\nThe video can then be converted to a .gif file if required - \n\n> ffmpeg -i vid.avi -pix_fmt rgb24 -loop 0 out.gif\n\nFor example, something like this:\n\n\n<a href=\"https://www.youtube.com/watch?v=OV7c6S32IDU\" \ntarget=\"_blank\"><img src=\"https://github.com/ryu577/ryu577.github.io/blob/master/Downloads/GradientAscent/which_direction.gif\" \nalt=\"Image formed by above method\" width=\"240\" height=\"180\" border=\"10\" /></a>\n\nIn case you're wondering, you can generate the images used in the gif above via:\n\n```python\nfrom pyray.shapes.plane import *\nfor i in range(20):\n\tbest_plane_direction(im_ind=i)\n```\n\nIf you think this is valuable, please star :)\n\n# Contributing\n\nWe welcome any kind of contribution, bug report, suggestion, new module, etc. Anything is welcome.\n\n# Other examples\n\nTo create a bouncy sphere or a wavy sphere, run \n```python\nfrom pyray.shapes.sphere import *\ndraw_wavy_sphere_wrapper('.\\\\im', 66, 1)\n```\n\n<img src=\"https://github.com/ryu577/pyray/blob/master/Images/WavySphere.gif\" \nalt=\"Image formed by above method\" width=\"240\" height=\"240\" border=\"10\" /></a>\n\n```python\nimport numpy as np;from PIL import Image, ImageDraw, ImageFont, ImageMath;from pyray.axes import *\nfrom pyray.rotation import *;from pyray.axes import draw_2d_arrow, Path, ZigZagPath, draw_grid, draw_grey_grid\nfrom pyray.misc import dist\n\nim = draw_grid()\ndraw = ImageDraw.Draw(im,'RGBA')\npts = np.array([[0,0],[1,1],[5,-3]])\npth = Path(pts)\npth.zg.draw_lines(draw,i/10.0)\nim.save(\"im\" + str(i) + \".png\")\n```\n<img src=\"https://camo.githubusercontent.com/a9229ef6577001fb21c262e75c472558061ee462/68747470733a2f2f73322e67696679752e636f6d2f696d616765732f416e6472655265666c636e2e676966\" \nalt=\"Image formed by above method\" width=\"240\" height=\"240\" border=\"10\" /></a>\n\n\n```python\nfrom pyray.shapes.polyhedron import *\nbasedir = '.\\\\'\ntr = Tetartoid()\nfor i in range(0, 31):\n    im = Image.new(\"RGB\", (2048, 2048), (1,1,1))\n    draw = ImageDraw.Draw(im,'RGBA')\n    r = general_rotation(np.array([0,1,0]),2*np.pi*i/30)\n    tr.render_solid_planes(draw, r, shift=np.array([1000, 1000, 0]), scale=750)\n    im.save(basedir + \"im\" + str(i) + \".png\")\n```\n\n<a href=\"https://www.youtube.com/watch?v=0JEFjS2fiTA&feature=youtu.be\" \ntarget=\"_blank\"><img src=\"https://github.com/ryu577/ryu577.github.io/blob/master/Downloads/tetartoid2.gif\" \nalt=\"Image formed by above method\" width=\"240\" height=\"240\" border=\"10\" /></a>\n\n\n```python\nfrom pyray.shapes.paraboloid import *\ndraw_paraboloids()\n```\n\n<a href=\"https://www.youtube.com/watch?v=acsSIyDugP0&t=53s\" \ntarget=\"_blank\"><img src=\"https://github.com/ryu577/ryu577.github.io/blob/master/Downloads/paraboloids.gif\" \nalt=\"Image formed by above method\" width=\"240\" height=\"240\" border=\"10\" /></a>\n\n\n\n```python\nfrom pyray.shapes.pointswarm import *\npoints_to_bins()\n```\n\n<a href=\"https://www.youtube.com/watch?v=OV7c6S32IDU\" \ntarget=\"_blank\"><img src=\"https://github.com/ryu577/ryu577.github.io/blob/master/Downloads/classificn/classificn.gif\" \nalt=\"Image formed by above method\" width=\"240\" height=\"240\" border=\"10\" /></a>\n\n# Demonstrations\nSo far, I've been using this to create YouTube videos for <a href=\"https://www.youtube.com/channel/UCd2Boc12Ora42VIJBULz0kA\">my channel</a>.\n\nHere are some that demonstrate the abilities of this code (also see below for some images created with it) - \n\n1. <a href=\"https://www.youtube.com/watch?v=KuXnrg1YpiY\">Binomial coefficients on hypercubes.</a>\n\n2. <a href=\"https://www.youtube.com/watch?v=OV7c6S32IDU&t=3s\">Why does Gradient descent work?</a>\n\n3. <a href=\"https://www.youtube.com/watch?v=STkcP5jcJYo\">Introduction to Platonic solids</a>\n\n4. <a href=\"https://www.youtube.com/watch?v=57g6nQGBFcY\">Slice a 4d hypercube (Teserract).</a>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ryu577/pyray", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "raypy", "package_url": "https://pypi.org/project/raypy/", "platform": "", "project_url": "https://pypi.org/project/raypy/", "project_urls": {"Homepage": "https://github.com/ryu577/pyray"}, "release_url": "https://pypi.org/project/raypy/0.0.2/", "requires_dist": ["numpy", "scipy", "matplotlib", "sympy", "pillow", "pytest ; extra == 'test'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "summary": "A 3d rendering library written completely in python.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/ryu577/pyray\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d90bb3966dac7f643cb72e8a251ebfafa90b11d0/68747470733a2f2f7472617669732d63692e6f72672f7279753537372f70797261792e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>Introduction</h1>\n<p>I'm creating this repository in January 2018 and it is crazy that the best open source option for rendering 3d scenes remains POV ray.\nNow, POV ray is a great program, but why can't we have that functionality (rendering 2d, 3d and higher dimensional objects and scenes) in Python, a language that is perhaps the most widely used already and only growing in popularity?\nThis code is a first step towards that goal - have the ability to do everything POV ray does - rendering complex 3d objects and scenes, animations and much more in plain, vanilla Python. I imagine this would find applications in creating videos, video games, physical simulations or just pretty pictures.</p>\n<p>While there certainly is a very long way to go before this can be a reality, it won't happen without taking a first step. And of course, I could use help :)</p>\n<p>Above all else, I want to emphasize simplicity in this library and minimize the dependence on external libraries so more people can hit the ground running with it.</p>\n<h1>Installation</h1>\n<p>To install the library, run (pyray was taken on pypi):</p>\n<pre><code>pip install raypy\n</code></pre>\n<p>Make sure you have all the requirements (requirements.txt) installed. If not, you can run:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<p>Alternately, you can fork/download the code and run from the main folder:</p>\n<pre><code>python setup.py install\n</code></pre>\n<h1>Requirements</h1>\n<p>I've made every effort to keep the requirements for this project to the bare minimum so most people can get it running with almost no pain. These are -\nPython Imaging Library (PIL), numpy and scipy. For writing on math equations images using the methods in WriteOnImage.py, you'll need matplotlib and sympy. All of these can be installed quite easily with <code>pip install -r requirements.txt</code></p>\n<h1>Usage</h1>\n<p>To keep things simple and the dependencies minimal, the program simply writes an image or a series of images to the folder <code>./Images/RotatingCube</code> (this was the first object that was animated with this tool).</p>\n<p>You can run any method tagged @MoneyShot to see how this works. For example, you can run the following method from cube.py -</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyray.shapes.cube</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">cube_with_cuttingplanes</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">popup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>and this will generate a colorful 3d cube with diagonal cutting planes shaded in different colors (in the folder where you run it from, file called im0.png). Something like this (click to see what happens) -</p>\n<p><a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=KuXnrg1YpiY\" rel=\"nofollow\"><img align=\"center\" alt=\"Image formed by above method\" height=\"240\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a368e85cb01ddc91e587219cae0889ff3e2b60eb/68747470733a2f2f6769746875622e636f6d2f7279753537372f70797261792f626c6f622f6d61737465722f496d616765732f637562655f706c616e65732e706e67\" width=\"240\"></a></p>\n<p>You can now create a series of them using the following code -</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">):</span>\n\t<span class=\"n\">cube_with_cuttingplanes</span><span class=\"p\">(</span><span class=\"n\">numTerms</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">im_ind</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>The series of images can then be easily converted to a video using the open source <a href=\"https://ffmpeg.org/download.html\" rel=\"nofollow\">ffmpeg program</a>. For example</p>\n<blockquote>\n<p>ffmpeg -framerate 10 -f image2 -i im%d.png -vb 20M vid.avi</p>\n</blockquote>\n<p>The video can then be converted to a .gif file if required -</p>\n<blockquote>\n<p>ffmpeg -i vid.avi -pix_fmt rgb24 -loop 0 out.gif</p>\n</blockquote>\n<p>For example, something like this:</p>\n<p><a href=\"https://www.youtube.com/watch?v=OV7c6S32IDU\" rel=\"nofollow\"><img alt=\"Image formed by above method\" height=\"180\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/309489fa797efc39f516c60657fae8524d8bf4e8/68747470733a2f2f6769746875622e636f6d2f7279753537372f7279753537372e6769746875622e696f2f626c6f622f6d61737465722f446f776e6c6f6164732f4772616469656e74417363656e742f77686963685f646972656374696f6e2e676966\" width=\"240\"></a></p>\n<p>In case you're wondering, you can generate the images used in the gif above via:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyray.shapes.plane</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n\t<span class=\"n\">best_plane_direction</span><span class=\"p\">(</span><span class=\"n\">im_ind</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n<p>If you think this is valuable, please star :)</p>\n<h1>Contributing</h1>\n<p>We welcome any kind of contribution, bug report, suggestion, new module, etc. Anything is welcome.</p>\n<h1>Other examples</h1>\n<p>To create a bouncy sphere or a wavy sphere, run</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyray.shapes.sphere</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">draw_wavy_sphere_wrapper</span><span class=\"p\">(</span><span class=\"s1\">'.</span><span class=\"se\">\\\\</span><span class=\"s1\">im'</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Image formed by above method\" height=\"240\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79f6ea8c101b2c847412a666ebbb72bcc4466b3a/68747470733a2f2f6769746875622e636f6d2f7279753537372f70797261792f626c6f622f6d61737465722f496d616765732f576176795370686572652e676966\" width=\"240\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span><span class=\"p\">;</span><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">ImageDraw</span><span class=\"p\">,</span> <span class=\"n\">ImageFont</span><span class=\"p\">,</span> <span class=\"n\">ImageMath</span><span class=\"p\">;</span><span class=\"kn\">from</span> <span class=\"nn\">pyray.axes</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyray.rotation</span> <span class=\"kn\">import</span> <span class=\"o\">*</span><span class=\"p\">;</span><span class=\"kn\">from</span> <span class=\"nn\">pyray.axes</span> <span class=\"kn\">import</span> <span class=\"n\">draw_2d_arrow</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">ZigZagPath</span><span class=\"p\">,</span> <span class=\"n\">draw_grid</span><span class=\"p\">,</span> <span class=\"n\">draw_grey_grid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyray.misc</span> <span class=\"kn\">import</span> <span class=\"n\">dist</span>\n\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">draw_grid</span><span class=\"p\">()</span>\n<span class=\"n\">draw</span> <span class=\"o\">=</span> <span class=\"n\">ImageDraw</span><span class=\"o\">.</span><span class=\"n\">Draw</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span><span class=\"s1\">'RGBA'</span><span class=\"p\">)</span>\n<span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">]])</span>\n<span class=\"n\">pth</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">pts</span><span class=\"p\">)</span>\n<span class=\"n\">pth</span><span class=\"o\">.</span><span class=\"n\">zg</span><span class=\"o\">.</span><span class=\"n\">draw_lines</span><span class=\"p\">(</span><span class=\"n\">draw</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mf\">10.0</span><span class=\"p\">)</span>\n<span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">\"im\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\".png\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Image formed by above method\" height=\"240\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0428a59f6004bd2019077f414e0f8ba60a221ab0/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f613932323965663635373730303166623231633236326537356334373235353830363165653436322f3638373437343730373333613266326637333332326536373639363637393735326536333666366432663639366436313637363537333266343136653634373236353532363536363663363336653265363736393636\" width=\"240\"></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyray.shapes.polyhedron</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">basedir</span> <span class=\"o\">=</span> <span class=\"s1\">'.</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span>\n<span class=\"n\">tr</span> <span class=\"o\">=</span> <span class=\"n\">Tetartoid</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">):</span>\n    <span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s2\">\"RGB\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2048</span><span class=\"p\">,</span> <span class=\"mi\">2048</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">draw</span> <span class=\"o\">=</span> <span class=\"n\">ImageDraw</span><span class=\"o\">.</span><span class=\"n\">Draw</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span><span class=\"s1\">'RGBA'</span><span class=\"p\">)</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">general_rotation</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]),</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">render_solid_planes</span><span class=\"p\">(</span><span class=\"n\">draw</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">shift</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">750</span><span class=\"p\">)</span>\n    <span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">basedir</span> <span class=\"o\">+</span> <span class=\"s2\">\"im\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\".png\"</span><span class=\"p\">)</span>\n</pre>\n<p><a href=\"https://www.youtube.com/watch?v=0JEFjS2fiTA&amp;feature=youtu.be\" rel=\"nofollow\"><img alt=\"Image formed by above method\" height=\"240\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ebc2689948bdf4d13278bbe1d9f774fae0b7030c/68747470733a2f2f6769746875622e636f6d2f7279753537372f7279753537372e6769746875622e696f2f626c6f622f6d61737465722f446f776e6c6f6164732f7465746172746f6964322e676966\" width=\"240\"></a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyray.shapes.paraboloid</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">draw_paraboloids</span><span class=\"p\">()</span>\n</pre>\n<p><a href=\"https://www.youtube.com/watch?v=acsSIyDugP0&amp;t=53s\" rel=\"nofollow\"><img alt=\"Image formed by above method\" height=\"240\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4654cf676d74b16ca0597a122254e8a30dfd04f/68747470733a2f2f6769746875622e636f6d2f7279753537372f7279753537372e6769746875622e696f2f626c6f622f6d61737465722f446f776e6c6f6164732f70617261626f6c6f6964732e676966\" width=\"240\"></a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyray.shapes.pointswarm</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">points_to_bins</span><span class=\"p\">()</span>\n</pre>\n<p><a href=\"https://www.youtube.com/watch?v=OV7c6S32IDU\" rel=\"nofollow\"><img alt=\"Image formed by above method\" height=\"240\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2cd1603bf44d43adb26301556ebb256021db95b/68747470733a2f2f6769746875622e636f6d2f7279753537372f7279753537372e6769746875622e696f2f626c6f622f6d61737465722f446f776e6c6f6164732f636c617373696669636e2f636c617373696669636e2e676966\" width=\"240\"></a></p>\n<h1>Demonstrations</h1>\n<p>So far, I've been using this to create YouTube videos for <a href=\"https://www.youtube.com/channel/UCd2Boc12Ora42VIJBULz0kA\" rel=\"nofollow\">my channel</a>.</p>\n<p>Here are some that demonstrate the abilities of this code (also see below for some images created with it) -</p>\n<ol>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=KuXnrg1YpiY\" rel=\"nofollow\">Binomial coefficients on hypercubes.</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=OV7c6S32IDU&amp;t=3s\" rel=\"nofollow\">Why does Gradient descent work?</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=STkcP5jcJYo\" rel=\"nofollow\">Introduction to Platonic solids</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=57g6nQGBFcY\" rel=\"nofollow\">Slice a 4d hypercube (Teserract).</a></p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 5661008, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "57420f5e82c956d45fd99f13adef27d3", "sha256": "a58fe22f5d479cdf667d5fa395d5b2cb8d26a53643e6dc9fecdff081e44055c2"}, "downloads": -1, "filename": "raypy-0.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "57420f5e82c956d45fd99f13adef27d3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 32076, "upload_time": "2018-06-05T08:02:43", "upload_time_iso_8601": "2018-06-05T08:02:43.273736Z", "url": "https://files.pythonhosted.org/packages/95/f4/10325e128224c7b0e1e48e4e680db89a4d228c989d88a17a154ca1b75b38/raypy-0.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d8236d7bfc7f9d7abf990ecd8ebdfcf", "sha256": "cf8684edf6535b9d14e6d5f84494b2a1b0f57ae109bfec96641d3247ed5b6d33"}, "downloads": -1, "filename": "raypy-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d8236d7bfc7f9d7abf990ecd8ebdfcf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74912, "upload_time": "2018-08-08T07:47:16", "upload_time_iso_8601": "2018-08-08T07:47:16.434821Z", "url": "https://files.pythonhosted.org/packages/13/eb/fc434acaa09e4a06babf14f93a7b118d1c48d1f425a93609039ed03cfe13/raypy-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b2831bca0f21101ce8cd15ff22c9132", "sha256": "585ecd7d468fcc1ce42aade2b758957cf4f2b166f9dfd51e7f69e31d3b282369"}, "downloads": -1, "filename": "raypy-0.0.0.tar.gz", "has_sig": false, "md5_digest": "9b2831bca0f21101ce8cd15ff22c9132", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27678, "upload_time": "2018-06-05T08:02:45", "upload_time_iso_8601": "2018-06-05T08:02:45.516720Z", "url": "https://files.pythonhosted.org/packages/f0/76/3943b964f991f9e96fa94dc6ebb00a1b23bb6cf8f35f1e2e5f40562f3e27/raypy-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "d4a1e2d4db65be50f2840ee06638c6ed", "sha256": "08b4996149fa0a37fd34b224a482ca076559ae250204d1f230447c6b597cf848"}, "downloads": -1, "filename": "raypy-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "d4a1e2d4db65be50f2840ee06638c6ed", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 74948, "upload_time": "2018-08-08T07:55:10", "upload_time_iso_8601": "2018-08-08T07:55:10.966685Z", "url": "https://files.pythonhosted.org/packages/77/44/2b74cc7092f7f345bb0cea5f51d385f2dbb0f548d2abfd6b2e2947fd3394/raypy-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3da7bc32d0b456f64a465ac9f672c494", "sha256": "8045c642df38d4dc0f0e9dccec085be0f0b768e5a1013e71c5aec8b1aaf92b34"}, "downloads": -1, "filename": "raypy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3da7bc32d0b456f64a465ac9f672c494", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 74914, "upload_time": "2018-08-08T07:49:40", "upload_time_iso_8601": "2018-08-08T07:49:40.863043Z", "url": "https://files.pythonhosted.org/packages/2e/40/cd68b7a0c314a998c9c670ea7b0306de904ccc33e6ed8b7dd8e9b1f23774/raypy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "359ab707815702616e1911f7075f5a00", "sha256": "e1ca24b8b2c5d8bf71da9c3edfda37d704382834d931c46d0077d6cfeb960601"}, "downloads": -1, "filename": "raypy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "359ab707815702616e1911f7075f5a00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 37699, "upload_time": "2018-08-08T07:49:42", "upload_time_iso_8601": "2018-08-08T07:49:42.836427Z", "url": "https://files.pythonhosted.org/packages/ec/67/9c5c5446c0a122e29a34a253fcc3ee4ab161e6bb2c24864d33a90e037020/raypy-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4d0137940492a95d91ef98d3fda208a9", "sha256": "54f8b8b5e6c300b32c310425d5f28d7800bd1f13e9de5574a6a1e61e26e110ab"}, "downloads": -1, "filename": "raypy-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4d0137940492a95d91ef98d3fda208a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 131623, "upload_time": "2019-08-11T04:58:20", "upload_time_iso_8601": "2019-08-11T04:58:20.526305Z", "url": "https://files.pythonhosted.org/packages/05/f7/bcddd5a6ad60c12f6104017beeca47d08c3bb8d43234a8999498d23a84cf/raypy-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a7ad9f67f0064d6d0e7d8dce12ea15b", "sha256": "b8a60b0d194c16ac603e7538cedde23f20afbf96dd6b52a6f3e07824ccf9131f"}, "downloads": -1, "filename": "raypy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4a7ad9f67f0064d6d0e7d8dce12ea15b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 55873, "upload_time": "2019-08-11T04:58:22", "upload_time_iso_8601": "2019-08-11T04:58:22.231143Z", "url": "https://files.pythonhosted.org/packages/69/ff/6e3649dd1b13ce8fd4d534530f01f569923e35d109e8182c547b18323b80/raypy-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d0137940492a95d91ef98d3fda208a9", "sha256": "54f8b8b5e6c300b32c310425d5f28d7800bd1f13e9de5574a6a1e61e26e110ab"}, "downloads": -1, "filename": "raypy-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4d0137940492a95d91ef98d3fda208a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 131623, "upload_time": "2019-08-11T04:58:20", "upload_time_iso_8601": "2019-08-11T04:58:20.526305Z", "url": "https://files.pythonhosted.org/packages/05/f7/bcddd5a6ad60c12f6104017beeca47d08c3bb8d43234a8999498d23a84cf/raypy-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a7ad9f67f0064d6d0e7d8dce12ea15b", "sha256": "b8a60b0d194c16ac603e7538cedde23f20afbf96dd6b52a6f3e07824ccf9131f"}, "downloads": -1, "filename": "raypy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4a7ad9f67f0064d6d0e7d8dce12ea15b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 55873, "upload_time": "2019-08-11T04:58:22", "upload_time_iso_8601": "2019-08-11T04:58:22.231143Z", "url": "https://files.pythonhosted.org/packages/69/ff/6e3649dd1b13ce8fd4d534530f01f569923e35d109e8182c547b18323b80/raypy-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:54 2020"}