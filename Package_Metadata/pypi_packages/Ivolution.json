{"info": {"author": "Julien Lengrand-Lambert", "author_email": "julien@lengrand.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: X11 Applications :: GTK", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: Unix", "Programming Language :: Python :: 2 :: Only", "Topic :: Multimedia :: Graphics", "Topic :: Multimedia :: Video :: Conversion", "Topic :: Scientific/Engineering :: Image Recognition"], "description": "#[Take one picture of yourself a day, automatically generate a movie!](http://jlengrand.github.com/FaceMovie/)\n\n\n**FaceMovie** is a simple project that aims at helping you create videos of yourself over time, using photos as input.\nSimply take several pictures of yourself in the same position, and decide when to compile everything into a video. Just indicate the location of your pictures, Facemovie does everything else for you. \n\nI see a growing interest for projects where people take one picture of themselves a day for several months (years ?) and compile it into a [video](http://www.youtube.com/watch?v=6B26asyGKDo). \nWhen searching on the web, I realized that there was only one software allowing people to do this : the [everyday paid iphone app](http://www.everyday-app.com). I hope that Facemovie can help some of you!\nThe main difference with everyday is that Facemovie searches automatically for faces in the input images and compile them in the best possible way, so that your video look awesome. \n\nDue to its general implementation, FaceMovie may be used for faces, but also profiles (for projects showing [women along pregnancy for example](http://www.youtube.com/watch?v=CG_KArKYTq4) or full body([for people workouting](http://www.youtube.com/watch?v=02Pzfv7JV48)). The only limitation comes from you ! \n\n\n## Installation\n\nThere are several ways you can choose from to run Facemovie, each being developed below.\n\n### Windows executable (Default)\n\nThis is the current easiest solution, as it runs out of the box. \n\nDownload the archive available **[here](https://dl.dropbox.com/u/4286043/GH/FaceMovie/Facemovie-0.8.2-exe.zip)**. \n\nUncompress the archive. It contains three elements :\n - The executable itself, called Facemovifier.exe.\n - A folder called haar_cascades. It contains files used by the executable. Leave it in the same location as the executable by default.\n - This README\n\n In order to check that everything is ready, open a command line in at the executable location and run the Facemovie helper : \n ```\n $ cd my\\installation\\folder\n $ Facemoviefier.exe -h\n ``` \n\n You are now ready to use the Facemovie !\n\n### Github\n\nYou can also simply clone the project from Github and use it as you wish. \n```\ngit clone git://github.com/jlengrand/FaceMovie.git\n```\n\nTo check the code, simply open a command line and try to run the Facemovifier : \n ```\n $ cd my\\cloned\\folder\n $ python Facemoviefier.py -h\n ``` \n\n### Pipy\n\nThe Linux application is also available through a Python egg, available on [Pypi](http://pypi.python.org/pypi/Facemovie/0.8).\nYou can then simply install Facemovie using [pip] (http://pypi.python.org/pypi/pip): \n```\n$ pip install Facemovie\n```\n\n\n\n## Getting Started\n\nNow that FaceMovie is installed on your system, let's start playing with it !\nIf you do not have images to play with, note that an [archive including samples](https://dl.dropbox.com/u/4286043/GH/FaceMovie/samples.zip) is available.\n\nFor each of the following commands, __Facemovifier__ should be replaced by __FaceMovifier.exe__ or __python Facemovifier__ depending on your installation method.\n\n\nOnce installed, let's start by calling the helper of Facemovie. It can be done by\n```\n$ Facemoviefier -h\n```\ndepending whether you used the installer or the Python egg. \nThis command will list all the available parameters that can be used.\n\nThe next step is to try to create you first video. It is no more complex than running the following in command line :\n```\n$ Facemoviefier -i input_folder -o output_folder\n```\nWhere input_folder is the repository where all your images are stored, and output_folder where you want the results to be saved. \n\nHere is a concrete example : \n```\n$ Facemoviefier.exe -i \"../data/input/samples\" -o \"../data/output\"\n```\n\n**NOTE : ** In order to get good results, your images should contain only one person; and you should try to always keep the same angle with the camera for each of them.\n\nFacemovie needs the list of haar_cascades to correctly detect faces. This means that if you decide to run the Facemovie from another location, you should update the folders accordingly and use the root_folder option:\n``` \n$ Facemoviefier -i input_folder -o output_folder -r haar_cascades_folder_location\n```\n\nFacemovie also allows you to choose the type of output you want once the processing is done. This can be done by using the --type (-t) option. Here is the case where I save images instead of a movie in output.\n```\n$ Facemoviefier -i \"../data/input/Axel\" -o \"../data/output\" -t i\n```\n\nBy default, Facemovie is searching for frontal faces. You can change this by setting up which profile to use using the --profile (-p) option:  \n```\n$ Facemoviefier -i \"../data/input/Axel\" -o \"../data/output\" -p \"profile face\"\n```\nAn extensive list of training files is available while calling the helper, or by running the following command.\n```\n$ Facemoviefier -p ?\n```\n\n### Options available in the Facemoviefier\n\n**Required :**\n\n```\n- -i, --input :   Input folder of the images to be processed\n- -o, --output :  Output folder where the final results will be saved\n```\n\n**Optional :**\n\n```\n- -h, --help :  Shows help message and exits\n- -r, --root :  Location of the facemovie folder. Required if you run the Facemovifier from an external location\n- -p, --param : Used to change the file used to train the classifier. Useful you want to detect something else than front faces.\n    Available parameters : \n        - upper body.\n        - profile face.\n        - lower body.\n        - frontal face (default).\n        - full body.\n- -t, --type :  The type of output to be created. Can be either images, video or simple display (nothing written on disc).\n    Available types :\n        - video\n        - images\n        - simple graphical display \n- -s, --sort : The way used to sort images chronologically. Can be done either by using file names or EXIF metadata.\n    Available modes :\n        - name (default)\n        - EXIF \n- -c, --crop : In this mode, final images are cropped so that only the desired part of the body is kept. This will remove parts of the input images, but will avoid addition of black borders in the output.\n- -d, --cropdims : Expects two floats here. Ignored if crop mode is not selected. This allows to choose the window to be cropped. The values are defined in \"number of face size\".\nThis means that for example -d 2 2 will output square images, of size 2 x the size of the subject face.  \n```\n\n## Libraries\n\nThe whole aplication is developed using [Python2.7.3](http://www.python.org/download/). Any Python2.7 should be enough though.\nTo run the application, you'll also need to install [Opencv](http://opencv.willowgarage.com/wiki/).\n\n**NOTE : ** If you are using Ubuntu 12.04, best of luck ! The opencv package is available in the main repo. Simply run :\n```\n$ sudo aptitude install python-opencv libcv2.3 libcvaux2.3 libhighgui2.3 libopencv-contrib2.3 libopencv-gpu2.3 python-numpy\n```\n\nI also used the excellent [exif library](http://sourceforge.net/projects/exif-py/) to enhance sorting capabilities. It is embedded in the code, and you will not need to install it.\n\nThis project has been successfully tested on Windows 7 and Ubuntu 12.04 platforms.\n\n## Work in progress\n\nFacemovie is still under development, and you should consider it as work in progress.\nLots of elements still have to be improved. \nYou can **[have a look here](https://github.com/jlengrand/FaceMovie/issues?state=open)** to see my next objectives.\n\n## Other ressources\n\nThe complete documentation for the code is **[available here](https://dl.dropbox.com/u/4286043/GH/FaceMovie/Facemovie-0.8.2_doc/index.html)**.\n\nBut you might also want to download :\n- [Complete documentation for the code.](https://dl.dropbox.com/u/4286043/GH/FaceMovie/doc.zip)\n- [Samples available to test the code.](https://dl.dropbox.com/u/4286043/GH/FaceMovie/samples.zip)\n- [List of available haar cascades.](https://dl.dropbox.com/u/4286043/GH/FaceMovie/haarcascades.zip)\n\n## License\n\nThis project is released under the new BSD license (3 clauses version). You can read more about the license in the LICENSE file or direclty on [GNU's website](http://www.gnu.org/licenses/license-list.html#ModifiedBSD). \n\n## Acknowledgment\n\nThe idea of this project comes from an idea of Axel Catoire, currently [travelling around the world](http://ungrandtour.blogspot.com/) with his girlfriend.\nAs a starter for my code, I used an excellent example from JAPSKUA, that you can find [here](http://japskua.wordpress.com/2010/08/04/detecting-eyes-with-python-opencv/)\nAnd I used Gene Cash's library to extract information from EXIF metadata in the images.\n\n## DISCLAIMER\n\nFacemovie works with your images, so I feel like I need to write something about data usage. \nFacemovie is a work in progress, and I am not responsible for any corrpution it could cause to your data. \nI never experienced any problem using the software, but you should always back up your data before using it.\n\n## Contact\n\nI would enjoy having feedback if you like this idea, or even used it. Send me a link to your creations so that I can put them here !\n**Feel free to [write some words here](https://github.com/jlengrand/FaceMovie/issues?state=open)** for any comment or request. \n\nYou can contact me at julien at lengrand dot fr, or on my [current website](http://www.lengrand.fr).\n\nVersion : 0.8.2", "description_content_type": null, "docs_url": null, "download_url": "http://jlengrand.github.com/FaceMovie/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://jlengrand.github.com/FaceMovie/", "keywords": "image_processing computer_vision one_picture_a_day photography", "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "Ivolution", "package_url": "https://pypi.org/project/Ivolution/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Ivolution/", "project_urls": {"Download": "http://jlengrand.github.com/FaceMovie/", "Homepage": "http://jlengrand.github.com/FaceMovie/"}, "release_url": "https://pypi.org/project/Ivolution/1.0/", "requires_dist": null, "requires_python": null, "summary": "Timelapse creation using Face Recognition", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            #[Take one picture of yourself a day, automatically generate a movie!](http://jlengrand.github.com/FaceMovie/)<br><br><br>**FaceMovie** is a simple project that aims at helping you create videos of yourself over time, using photos as input.<br>Simply take several pictures of yourself in the same position, and decide when to compile everything into a video. Just indicate the location of your pictures, Facemovie does everything else for you. <br><br>I see a growing interest for projects where people take one picture of themselves a day for several months (years ?) and compile it into a [video](http://www.youtube.com/watch?v=6B26asyGKDo). <br>When searching on the web, I realized that there was only one software allowing people to do this : the [everyday paid iphone app](http://www.everyday-app.com). I hope that Facemovie can help some of you!<br>The main difference with everyday is that Facemovie searches automatically for faces in the input images and compile them in the best possible way, so that your video look awesome. <br><br>Due to its general implementation, FaceMovie may be used for faces, but also profiles (for projects showing [women along pregnancy for example](http://www.youtube.com/watch?v=CG_KArKYTq4) or full body([for people workouting](http://www.youtube.com/watch?v=02Pzfv7JV48)). The only limitation comes from you ! <br><br><br>## Installation<br><br>There are several ways you can choose from to run Facemovie, each being developed below.<br><br>### Windows executable (Default)<br><br>This is the current easiest solution, as it runs out of the box. <br><br>Download the archive available **[here](https://dl.dropbox.com/u/4286043/GH/FaceMovie/Facemovie-0.8.2-exe.zip)**. <br><br>Uncompress the archive. It contains three elements :<br> - The executable itself, called Facemovifier.exe.<br> - A folder called haar_cascades. It contains files used by the executable. Leave it in the same location as the executable by default.<br> - This README<br><br> In order to check that everything is ready, open a command line in at the executable location and run the Facemovie helper : <br> ```<br> $ cd my\\installation\\folder<br> $ Facemoviefier.exe -h<br> ``` <br><br> You are now ready to use the Facemovie !<br><br>### Github<br><br>You can also simply clone the project from Github and use it as you wish. <br>```<br>git clone git://github.com/jlengrand/FaceMovie.git<br>```<br><br>To check the code, simply open a command line and try to run the Facemovifier : <br> ```<br> $ cd my\\cloned\\folder<br> $ python Facemoviefier.py -h<br> ``` <br><br>### Pipy<br><br>The Linux application is also available through a Python egg, available on [Pypi](http://pypi.python.org/pypi/Facemovie/0.8).<br>You can then simply install Facemovie using [pip] (http://pypi.python.org/pypi/pip): <br>```<br>$ pip install Facemovie<br>```<br><br><br><br>## Getting Started<br><br>Now that FaceMovie is installed on your system, let's start playing with it !<br>If you do not have images to play with, note that an [archive including samples](https://dl.dropbox.com/u/4286043/GH/FaceMovie/samples.zip) is available.<br><br>For each of the following commands, __Facemovifier__ should be replaced by __FaceMovifier.exe__ or __python Facemovifier__ depending on your installation method.<br><br><br>Once installed, let's start by calling the helper of Facemovie. It can be done by<br>```<br>$ Facemoviefier -h<br>```<br>depending whether you used the installer or the Python egg. <br>This command will list all the available parameters that can be used.<br><br>The next step is to try to create you first video. It is no more complex than running the following in command line :<br>```<br>$ Facemoviefier -i input_folder -o output_folder<br>```<br>Where input_folder is the repository where all your images are stored, and output_folder where you want the results to be saved. <br><br>Here is a concrete example : <br>```<br>$ Facemoviefier.exe -i \"../data/input/samples\" -o \"../data/output\"<br>```<br><br>**NOTE : ** In order to get good results, your images should contain only one person; and you should try to always keep the same angle with the camera for each of them.<br><br>Facemovie needs the list of haar_cascades to correctly detect faces. This means that if you decide to run the Facemovie from another location, you should update the folders accordingly and use the root_folder option:<br>``` <br>$ Facemoviefier -i input_folder -o output_folder -r haar_cascades_folder_location<br>```<br><br>Facemovie also allows you to choose the type of output you want once the processing is done. This can be done by using the --type (-t) option. Here is the case where I save images instead of a movie in output.<br>```<br>$ Facemoviefier -i \"../data/input/Axel\" -o \"../data/output\" -t i<br>```<br><br>By default, Facemovie is searching for frontal faces. You can change this by setting up which profile to use using the --profile (-p) option:  <br>```<br>$ Facemoviefier -i \"../data/input/Axel\" -o \"../data/output\" -p \"profile face\"<br>```<br>An extensive list of training files is available while calling the helper, or by running the following command.<br>```<br>$ Facemoviefier -p ?<br>```<br><br>### Options available in the Facemoviefier<br><br>**Required :**<br><br>```<br>- -i, --input :   Input folder of the images to be processed<br>- -o, --output :  Output folder where the final results will be saved<br>```<br><br>**Optional :**<br><br>```<br>- -h, --help :  Shows help message and exits<br>- -r, --root :  Location of the facemovie folder. Required if you run the Facemovifier from an external location<br>- -p, --param : Used to change the file used to train the classifier. Useful you want to detect something else than front faces.<br>    Available parameters : <br>        - upper body.<br>        - profile face.<br>        - lower body.<br>        - frontal face (default).<br>        - full body.<br>- -t, --type :  The type of output to be created. Can be either images, video or simple display (nothing written on disc).<br>    Available types :<br>        - video<br>        - images<br>        - simple graphical display <br>- -s, --sort : The way used to sort images chronologically. Can be done either by using file names or EXIF metadata.<br>    Available modes :<br>        - name (default)<br>        - EXIF <br>- -c, --crop : In this mode, final images are cropped so that only the desired part of the body is kept. This will remove parts of the input images, but will avoid addition of black borders in the output.<br>- -d, --cropdims : Expects two floats here. Ignored if crop mode is not selected. This allows to choose the window to be cropped. The values are defined in \"number of face size\".<br>This means that for example -d 2 2 will output square images, of size 2 x the size of the subject face.  <br>```<br><br>## Libraries<br><br>The whole aplication is developed using [Python2.7.3](http://www.python.org/download/). Any Python2.7 should be enough though.<br>To run the application, you'll also need to install [Opencv](http://opencv.willowgarage.com/wiki/).<br><br>**NOTE : ** If you are using Ubuntu 12.04, best of luck ! The opencv package is available in the main repo. Simply run :<br>```<br>$ sudo aptitude install python-opencv libcv2.3 libcvaux2.3 libhighgui2.3 libopencv-contrib2.3 libopencv-gpu2.3 python-numpy<br>```<br><br>I also used the excellent [exif library](http://sourceforge.net/projects/exif-py/) to enhance sorting capabilities. It is embedded in the code, and you will not need to install it.<br><br>This project has been successfully tested on Windows 7 and Ubuntu 12.04 platforms.<br><br>## Work in progress<br><br>Facemovie is still under development, and you should consider it as work in progress.<br>Lots of elements still have to be improved. <br>You can **[have a look here](https://github.com/jlengrand/FaceMovie/issues?state=open)** to see my next objectives.<br><br>## Other ressources<br><br>The complete documentation for the code is **[available here](https://dl.dropbox.com/u/4286043/GH/FaceMovie/Facemovie-0.8.2_doc/index.html)**.<br><br>But you might also want to download :<br>- [Complete documentation for the code.](https://dl.dropbox.com/u/4286043/GH/FaceMovie/doc.zip)<br>- [Samples available to test the code.](https://dl.dropbox.com/u/4286043/GH/FaceMovie/samples.zip)<br>- [List of available haar cascades.](https://dl.dropbox.com/u/4286043/GH/FaceMovie/haarcascades.zip)<br><br>## License<br><br>This project is released under the new BSD license (3 clauses version). You can read more about the license in the LICENSE file or direclty on [GNU's website](http://www.gnu.org/licenses/license-list.html#ModifiedBSD). <br><br>## Acknowledgment<br><br>The idea of this project comes from an idea of Axel Catoire, currently [travelling around the world](http://ungrandtour.blogspot.com/) with his girlfriend.<br>As a starter for my code, I used an excellent example from JAPSKUA, that you can find [here](http://japskua.wordpress.com/2010/08/04/detecting-eyes-with-python-opencv/)<br>And I used Gene Cash's library to extract information from EXIF metadata in the images.<br><br>## DISCLAIMER<br><br>Facemovie works with your images, so I feel like I need to write something about data usage. <br>Facemovie is a work in progress, and I am not responsible for any corrpution it could cause to your data. <br>I never experienced any problem using the software, but you should always back up your data before using it.<br><br>## Contact<br><br>I would enjoy having feedback if you like this idea, or even used it. Send me a link to your creations so that I can put them here !<br>**Feel free to [write some words here](https://github.com/jlengrand/FaceMovie/issues?state=open)** for any comment or request. <br><br>You can contact me at julien at lengrand dot fr, or on my [current website](http://www.lengrand.fr).<br><br>Version : 0.8.2\n          </div>"}, "last_serial": 784556, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "e92d551b8e6e5e8f18de8b41a18bc815", "sha256": "6dcbc3e16f8353a121cef8939e57f28e0b0276a9cfcdc8cfc9a5f89d7b268136"}, "downloads": -1, "filename": "Ivolution-0.5.1.tar.gz", "has_sig": false, "md5_digest": "e92d551b8e6e5e8f18de8b41a18bc815", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3385117, "upload_time": "2012-08-16T09:29:14", "upload_time_iso_8601": "2012-08-16T09:29:14.281810Z", "url": "https://files.pythonhosted.org/packages/78/b4/22bab66c00ce1a10bba69dd7422fe5bf95b4438b46484b967af97755cbf7/Ivolution-0.5.1.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "02d2e32fe56e805bcf790218ac3a57df", "sha256": "3efa8dd6943611e2a4349dea1794d5ed5423fdf79711e40fc294f8945e191080"}, "downloads": -1, "filename": "Ivolution-1.0.tar.gz", "has_sig": false, "md5_digest": "02d2e32fe56e805bcf790218ac3a57df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3252607, "upload_time": "2012-08-03T09:21:19", "upload_time_iso_8601": "2012-08-03T09:21:19.363583Z", "url": "https://files.pythonhosted.org/packages/55/f7/7b56d83cbc1ae9e658dcf77c6d424c594c25506af57e7521e2b48558cbe0/Ivolution-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "02d2e32fe56e805bcf790218ac3a57df", "sha256": "3efa8dd6943611e2a4349dea1794d5ed5423fdf79711e40fc294f8945e191080"}, "downloads": -1, "filename": "Ivolution-1.0.tar.gz", "has_sig": false, "md5_digest": "02d2e32fe56e805bcf790218ac3a57df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3252607, "upload_time": "2012-08-03T09:21:19", "upload_time_iso_8601": "2012-08-03T09:21:19.363583Z", "url": "https://files.pythonhosted.org/packages/55/f7/7b56d83cbc1ae9e658dcf77c6d424c594c25506af57e7521e2b48558cbe0/Ivolution-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:33 2020"}