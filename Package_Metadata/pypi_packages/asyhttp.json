{"info": {"author": "ax", "author_email": "ax.tryin@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "=======\nasyhttp\n=======\n\n.. image:: https://badge.fury.io/py/asyhttp.svg\n   :target: https://pypi.org/project/asyhttp\n   :alt: Latest PyPI package version\n\nThis is asyhttp, a simple module to perform asynchronous HTTP requests using asyncio and aiohttp.\n\nIt provides a trivial way to perform a set of async HTTP requests.\n\nFeatures\n--------\n- Proxy support\n- Custom headers \n- Allow redirects \n- Use TLS\n\nHow to use loop()\n-----------------\nasyhttp loop() accepts some ``args``\n\n- ``urls`` a set of dictionaries, each dict represent an HTTP request.\n- ``proxy`` (str) proxt URL, str (optional).\n- ``process_out`` a user defined function that can be used to process the response of each HTTP request.\n  It will be called by the async function that perform each HTTP request, as soon as the response arrive (optional). \n- ``redirects`` (bool) \u2013 If set to True, follow redirects. False by default (optional).\n- ``verify_tls`` (bool) True for check TLS cert validation, False by default (optional). \n\nGetting started\n---------------\n\n.. code:: python\n\n\tfrom asyhttp import loop\n\n\trequests = [\t{'url':'http://exam.ple/page.html', 'method':'GET'},\n\t\t\t{'url':'http://exam.ple/page.html', 'method':'POST', 'body' : 'blabla'}\n\t] \n\tloop(urls=requests)\n\nUse cases\n---------\nasyhttp loop can be useful to write quick bruteforces against vulnerable systems\nor as a core for tools like dirfister.\n\nAn early version of this code comes from https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html\n\nDocs\n----\n\nProcess HTTP responses\n^^^^^^^^^^^^^^^^^^^^^^\nBy default, asyhttp loop print on stdout HTTP status code and reason for each response received.\nYou can override its default behavior writing custom code to process the response your HTTP requests.\nYour code has to be written in a function and passed to loop as a kwarg called process_out.\nThat function will be called by the async function that perform each of your HTTP requests,\nas soon as the response arrive. \n\nIn your custom code you can process:\n- url: url of the HTTP request\n- return_code \n- reason\n- resp_body\n- user_data\n\nExample\n\"\"\"\"\"\"\"\n\n.. code:: \n\n\tpip install asyhttp\n\n.. code:: python\n\n\tfrom asyhttp import loop\n\trequests = [{'url':'http://exam.ple/page.html', 'method':'GET'}]\n\tloop(urls=requests)\n\nExample\n\"\"\"\"\"\"\"\n.. code:: python\n\n\tfrom asyhttp import loop\n\n\tdef process_output(url,return_code,reason,resp_body,user_data):\n\t\tif return_code == 200:\n\t\t\tsys.stdout.write(\"url\")\n\n\trequests = [{'url':'http://exam.ple/page.html', 'method':'GET'}]\n\tloop(urls=requests,process_out=process_output)\n\nasyhttp loop's ``args``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n- ``urls``\n- ``process_out``\n- ``proxy``\n- ``verify_tls``\n- ``redirects``\n\nSupported HTTP methods\n^^^^^^^^^^^^^^^^^^^^^^\n- GET\n- POST\n- HEAD\n\nHTTP requests format\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n\t{'method':'GET', 'url':'http://exam.ple/page.html'}\n\t{'method':'POST', 'url':'http://exam.ple/page.html','body':'blablabl=balbal'}\n\t{'url':'http://exam.ple/page.html', 'method':'GET', 'headers' : 'X-Custom-Header:YEAH'}\n\nProxy support\n^^^^^^^^^^^^^\n\n.. code:: python\n\n\tloop(urls=url_dict_list,proxy=\"http://127.0.0.1:8080\")\n\nCustom headers\n^^^^^^^^^^^^^^\nTo add HTTP headers to a request, pass them as a dict.\n\n.. code:: python\n\n\t{'url':'http://exam.ple/page.html', 'method':'GET', 'headers' : {'User-agent':'YEAH'}}\n\nAllow redirects\n^^^^^^^^^^^^^^^\nFalse by default\n\n.. code:: python\n\n\tloop(urls=requests,process_out=process_response,redirects=True)\n\nVerify TLS\n^^^^^^^^^^\nFalse by default\n\n.. code:: python\n\n\tloop(urls=requests,process_out=process_response,verify_tls=True)\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/ax/asyhttp/archive/0.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ax/asyhttp", "keywords": "aiohttp", "license": "", "maintainer": "", "maintainer_email": "", "name": "asyhttp", "package_url": "https://pypi.org/project/asyhttp/", "platform": "", "project_url": "https://pypi.org/project/asyhttp/", "project_urls": {"Download": "https://github.com/ax/asyhttp/archive/0.2.tar.gz", "Homepage": "https://github.com/ax/asyhttp"}, "release_url": "https://pypi.org/project/asyhttp/0.2/", "requires_dist": null, "requires_python": "", "summary": "Simple module to perform asynchronous HTTP requests using asyncio and aiohttp", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/asyhttp\" rel=\"nofollow\"><img alt=\"Latest PyPI package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/992a7e84e3fdf78d610349cbb7ffb43541b15830/68747470733a2f2f62616467652e667572792e696f2f70792f617379687474702e737667\"></a>\n<p>This is asyhttp, a simple module to perform asynchronous HTTP requests using asyncio and aiohttp.</p>\n<p>It provides a trivial way to perform a set of async HTTP requests.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Proxy support</li>\n<li>Custom headers</li>\n<li>Allow redirects</li>\n<li>Use TLS</li>\n</ul>\n</div>\n<div id=\"how-to-use-loop\">\n<h2>How to use loop()</h2>\n<p>asyhttp loop() accepts some <tt>args</tt></p>\n<ul>\n<li><tt>urls</tt> a set of dictionaries, each dict represent an HTTP request.</li>\n<li><tt>proxy</tt> (str) proxt URL, str (optional).</li>\n<li><tt>process_out</tt> a user defined function that can be used to process the response of each HTTP request.\nIt will be called by the async function that perform each HTTP request, as soon as the response arrive (optional).</li>\n<li><tt>redirects</tt> (bool) \u2013 If set to True, follow redirects. False by default (optional).</li>\n<li><tt>verify_tls</tt> (bool) True for check TLS cert validation, False by default (optional).</li>\n</ul>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asyhttp</span> <span class=\"kn\">import</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">requests</span> <span class=\"o\">=</span> <span class=\"p\">[</span>    <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'http://exam.ple/page.html'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">:</span><span class=\"s1\">'GET'</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'http://exam.ple/page.html'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">:</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"s1\">'body'</span> <span class=\"p\">:</span> <span class=\"s1\">'blabla'</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"n\">requests</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"use-cases\">\n<h2>Use cases</h2>\n<p>asyhttp loop can be useful to write quick bruteforces against vulnerable systems\nor as a core for tools like dirfister.</p>\n<p>An early version of this code comes from <a href=\"https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html\" rel=\"nofollow\">https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html</a></p>\n</div>\n<div id=\"docs\">\n<h2>Docs</h2>\n<div id=\"process-http-responses\">\n<h3>Process HTTP responses</h3>\n<p>By default, asyhttp loop print on stdout HTTP status code and reason for each response received.\nYou can override its default behavior writing custom code to process the response your HTTP requests.\nYour code has to be written in a function and passed to loop as a kwarg called process_out.\nThat function will be called by the async function that perform each of your HTTP requests,\nas soon as the response arrive.</p>\n<p>In your custom code you can process:\n- url: url of the HTTP request\n- return_code\n- reason\n- resp_body\n- user_data</p>\n<div id=\"example\">\n<h4>Example</h4>\n<pre>pip install asyhttp\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asyhttp</span> <span class=\"kn\">import</span> <span class=\"n\">loop</span>\n<span class=\"n\">requests</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'http://exam.ple/page.html'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">:</span><span class=\"s1\">'GET'</span><span class=\"p\">}]</span>\n<span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"n\">requests</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id1\">\n<h4>Example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asyhttp</span> <span class=\"kn\">import</span> <span class=\"n\">loop</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_output</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span><span class=\"n\">return_code</span><span class=\"p\">,</span><span class=\"n\">reason</span><span class=\"p\">,</span><span class=\"n\">resp_body</span><span class=\"p\">,</span><span class=\"n\">user_data</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">return_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n                <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"url\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">requests</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'http://exam.ple/page.html'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">:</span><span class=\"s1\">'GET'</span><span class=\"p\">}]</span>\n<span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"n\">requests</span><span class=\"p\">,</span><span class=\"n\">process_out</span><span class=\"o\">=</span><span class=\"n\">process_output</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"asyhttp-loop-s-args\">\n<h3>asyhttp loop\u2019s <tt>args</tt></h3>\n<ul>\n<li><tt>urls</tt></li>\n<li><tt>process_out</tt></li>\n<li><tt>proxy</tt></li>\n<li><tt>verify_tls</tt></li>\n<li><tt>redirects</tt></li>\n</ul>\n</div>\n<div id=\"supported-http-methods\">\n<h3>Supported HTTP methods</h3>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>HEAD</li>\n</ul>\n</div>\n<div id=\"http-requests-format\">\n<h3>HTTP requests format</h3>\n<pre><span class=\"p\">{</span><span class=\"s1\">'method'</span><span class=\"p\">:</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'http://exam.ple/page.html'</span><span class=\"p\">}</span>\n<span class=\"p\">{</span><span class=\"s1\">'method'</span><span class=\"p\">:</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'http://exam.ple/page.html'</span><span class=\"p\">,</span><span class=\"s1\">'body'</span><span class=\"p\">:</span><span class=\"s1\">'blablabl=balbal'</span><span class=\"p\">}</span>\n<span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'http://exam.ple/page.html'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">:</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'headers'</span> <span class=\"p\">:</span> <span class=\"s1\">'X-Custom-Header:YEAH'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"proxy-support\">\n<h3>Proxy support</h3>\n<pre><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"n\">url_dict_list</span><span class=\"p\">,</span><span class=\"n\">proxy</span><span class=\"o\">=</span><span class=\"s2\">\"http://127.0.0.1:8080\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"custom-headers\">\n<h3>Custom headers</h3>\n<p>To add HTTP headers to a request, pass them as a dict.</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span><span class=\"s1\">'http://exam.ple/page.html'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">:</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'headers'</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'User-agent'</span><span class=\"p\">:</span><span class=\"s1\">'YEAH'</span><span class=\"p\">}}</span>\n</pre>\n</div>\n<div id=\"allow-redirects\">\n<h3>Allow redirects</h3>\n<p>False by default</p>\n<pre><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"n\">requests</span><span class=\"p\">,</span><span class=\"n\">process_out</span><span class=\"o\">=</span><span class=\"n\">process_response</span><span class=\"p\">,</span><span class=\"n\">redirects</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"verify-tls\">\n<h3>Verify TLS</h3>\n<p>False by default</p>\n<pre><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"n\">requests</span><span class=\"p\">,</span><span class=\"n\">process_out</span><span class=\"o\">=</span><span class=\"n\">process_response</span><span class=\"p\">,</span><span class=\"n\">verify_tls</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6578058, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a9f51acfab5cce48bbd5f96cb8f38da4", "sha256": "161a553070ae39d089cb0b6bb9275df6dcc3ddc7770d69e24c52621f89886554"}, "downloads": -1, "filename": "asyhttp-0.1.tar.gz", "has_sig": false, "md5_digest": "a9f51acfab5cce48bbd5f96cb8f38da4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3051, "upload_time": "2020-01-31T13:59:06", "upload_time_iso_8601": "2020-01-31T13:59:06.276926Z", "url": "https://files.pythonhosted.org/packages/b4/4d/ef69507743872d32ac89d4a8307b35cbddc0c4f809093b275e6d19815817/asyhttp-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3dc4ea5a4bcbd69614a10f968a82cc50", "sha256": "393ba44f6f7d958ca3e43d334c80b9305149afcd521f6087f967b9bab7b7a43a"}, "downloads": -1, "filename": "asyhttp-0.2.tar.gz", "has_sig": false, "md5_digest": "3dc4ea5a4bcbd69614a10f968a82cc50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3636, "upload_time": "2020-02-05T20:40:37", "upload_time_iso_8601": "2020-02-05T20:40:37.846707Z", "url": "https://files.pythonhosted.org/packages/ec/e6/81578154e0a2e2e68c27d14edb43ee5c5714a570c2c852d599eabeff5a07/asyhttp-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3dc4ea5a4bcbd69614a10f968a82cc50", "sha256": "393ba44f6f7d958ca3e43d334c80b9305149afcd521f6087f967b9bab7b7a43a"}, "downloads": -1, "filename": "asyhttp-0.2.tar.gz", "has_sig": false, "md5_digest": "3dc4ea5a4bcbd69614a10f968a82cc50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3636, "upload_time": "2020-02-05T20:40:37", "upload_time_iso_8601": "2020-02-05T20:40:37.846707Z", "url": "https://files.pythonhosted.org/packages/ec/e6/81578154e0a2e2e68c27d14edb43ee5c5714a570c2c852d599eabeff5a07/asyhttp-0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:47 2020"}