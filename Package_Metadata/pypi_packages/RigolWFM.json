{"info": {"author": "Scott Prahl", "author_email": "scott.prahl@oit.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering"], "description": "Using `.wfm` files created by Rigol scopes\n========================================================================\n\nThis project is intended to be a comprehensive resource for interpreting waveform ``.wmf`` files created by any Rigol oscilloscope.  Open source (and Rigol's own applications) that parse/convert Rigol's binary ``.wfm`` files are sadly balkanized: each program tends to support a single oscilloscope group and the available efforts are spread across a range of languages.\n\nThis project leverages a domain specific language (kaitai struct) to represent the binary files.  Once a binary file has been described in this text format, parsers can be generated for a wide range of languages (C++/STL, C#, Go, Java, JavaScript, Lua, Perl, PHP, Python, and Ruby).  \n\nKaitai Struct <https://kaitai.io> also has a slick web IDE <https://ide.kaitai.io> that allows one to interactively reverse engineer binary file formats directly in your browser.  This is super helpful for those Rigol ``.wfm`` formats that are undocumented.\n\nInstallation\n------------\n\nThe RigolWFM package can be installed via `pip`::\n\n   pip install RigolWFM\n\nUsage\n-----\n\nOnce this is done, one can plot the signals from binary Rigol ``.wfm`` files by::\n\n   import matplotlib.pyplot as plt\n   import RigolWFM.wfm as rigol\n\n   filename = 'example.wfm'\n   scope = 'DS1000E'\n\n   w = rigol.Wfm.from_file(filename, scope)\n   w.plot()\n   plt.show()\n\n\nAlternatively, ``wfmconvert`` can be used from the command line.  For example, the following should convert all the DS1000E files in the current directory to the ``.csv`` format::\n\n   prompt> wfmconvert E csv *.wfm\n\nIf you wanted to create `.wav` files for use with LTSpice then this would create them:: \n\n   prompt> wfmconvert E wav *.wfm\n\nMore extensive documentation can be found at <https://RigolWFM.readthedocs.io>\n\nStatus\n------\n\nThere is a bit of work remaining (testing, validation, repackaging) but there are binary file descriptions for ``.wfm`` files created by the following scopes:\n\n* DS1000C untested\n* DS1000E tested\n* DS1000Z tested, but with wonky voltage offsets\n* DS2000 tested\n* DS4000 tested\n* DS6000 untested\n\nResources\n---------\n\nThis has been a bit of an adventure.  In the process of nailing down the basic formats, I have gleaned information from a wide range of projects started by others.\n\n\n* Shein's Pascal program <https://sourceforge.net/projects/wfmreader\n* Wagenaars's Matlab script <https://www.mathworks.com/matlabcentral/fileexchange/18999-read-binary-rigol-waveforms\n* Steele's C program <http://nsweb.tn.tudelft.nl/~gsteele/rigol2dat\n* Blaicher's python code <https://github.com/mabl/pyRigolWFM\n* Szkutnik's python code <https://github.com/michal-szkutnik/pyRigolWfm1000Z\n* Cat-Ion's python code <https://github.com/Cat-Ion/rigol-ds4000-wfm\n* \u0160olc's python code <https://www.tablix.org/~avian/blog/archives/2019/08/quick_and_ugly_wfm_data_export_for_rigol_ds2072a/\n* Contributions from <http://www.hakasoft.com.au/wfm_viewer\n* A LabView program I got from Rigol support\n* Rigol's documentation of the 1000E, 1000Z, 2000, and 6000 file formats.\n\n\nSource code repository\n-------------------------------------------\n\n    <https://github.com/scottprahl/RigolWFM>\n\nLicense\n-------\n    BSD 3-clause -- see the file ``LICENSE`` for details.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scottprahl/RigolWFM.git", "keywords": "Rigol,wfm,DS1000C,DS1000CD,DS1000M,DS1000MD,DS1102CA,DS1202CA,DS1302CA,DS1062CA,DS1000D,DS1052D,DS1102D,DS1000E,DS1052E,DS1102E,DS1000Z,DS1054Z,MSO1054Z,DS1074Z,DS1074Z-S,MSO1074Z,DS1104Z,DS1104Z-S,MSO1104Z,DS1202Z,DS2000,DS2102A,MSO2102A,MSO2102A-S,DS2202A,MSO2202A,MSO2202A-S,DS2302A,MSO2302A,MSO2302A-S,DS4000,DS4012,MSO4012,DS4014,MSO4014,DS4022,MSO4022,DS4024,MSO4024,DS4032,MSO4032,DS4034,MSO4034,DS4052,MSO4052,DS4054,MSO4054,DS6000,DS6062,DS6064,DS6102,DS6104", "license": "BSD 3-clause", "maintainer": "", "maintainer_email": "", "name": "RigolWFM", "package_url": "https://pypi.org/project/RigolWFM/", "platform": "", "project_url": "https://pypi.org/project/RigolWFM/", "project_urls": {"Homepage": "https://github.com/scottprahl/RigolWFM.git"}, "release_url": "https://pypi.org/project/RigolWFM/0.6.3/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Read and parse Rigol Oscilloscope WFM files", "version": "0.6.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project is intended to be a comprehensive resource for interpreting waveform <tt>.wmf</tt> files created by any Rigol oscilloscope.  Open source (and Rigol\u2019s own applications) that parse/convert Rigol\u2019s binary <tt>.wfm</tt> files are sadly balkanized: each program tends to support a single oscilloscope group and the available efforts are spread across a range of languages.</p>\n<p>This project leverages a domain specific language (kaitai struct) to represent the binary files.  Once a binary file has been described in this text format, parsers can be generated for a wide range of languages (C++/STL, C#, Go, Java, JavaScript, Lua, Perl, PHP, Python, and Ruby).</p>\n<p>Kaitai Struct &lt;<a href=\"https://kaitai.io\" rel=\"nofollow\">https://kaitai.io</a>&gt; also has a slick web IDE &lt;<a href=\"https://ide.kaitai.io\" rel=\"nofollow\">https://ide.kaitai.io</a>&gt; that allows one to interactively reverse engineer binary file formats directly in your browser.  This is super helpful for those Rigol <tt>.wfm</tt> formats that are undocumented.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The RigolWFM package can be installed via <cite>pip</cite>:</p>\n<pre>pip install RigolWFM\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Once this is done, one can plot the signals from binary Rigol <tt>.wfm</tt> files by:</p>\n<pre>import matplotlib.pyplot as plt\nimport RigolWFM.wfm as rigol\n\nfilename = 'example.wfm'\nscope = 'DS1000E'\n\nw = rigol.Wfm.from_file(filename, scope)\nw.plot()\nplt.show()\n</pre>\n<p>Alternatively, <tt>wfmconvert</tt> can be used from the command line.  For example, the following should convert all the DS1000E files in the current directory to the <tt>.csv</tt> format:</p>\n<pre>prompt&gt; wfmconvert E csv *.wfm\n</pre>\n<p>If you wanted to create <cite>.wav</cite> files for use with LTSpice then this would create them:</p>\n<pre>prompt&gt; wfmconvert E wav *.wfm\n</pre>\n<p>More extensive documentation can be found at &lt;<a href=\"https://RigolWFM.readthedocs.io\" rel=\"nofollow\">https://RigolWFM.readthedocs.io</a>&gt;</p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>There is a bit of work remaining (testing, validation, repackaging) but there are binary file descriptions for <tt>.wfm</tt> files created by the following scopes:</p>\n<ul>\n<li>DS1000C untested</li>\n<li>DS1000E tested</li>\n<li>DS1000Z tested, but with wonky voltage offsets</li>\n<li>DS2000 tested</li>\n<li>DS4000 tested</li>\n<li>DS6000 untested</li>\n</ul>\n</div>\n<div id=\"resources\">\n<h2>Resources</h2>\n<p>This has been a bit of an adventure.  In the process of nailing down the basic formats, I have gleaned information from a wide range of projects started by others.</p>\n<ul>\n<li>Shein\u2019s Pascal program &lt;<a href=\"https://sourceforge.net/projects/wfmreader\" rel=\"nofollow\">https://sourceforge.net/projects/wfmreader</a></li>\n<li>Wagenaars\u2019s Matlab script &lt;<a href=\"https://www.mathworks.com/matlabcentral/fileexchange/18999-read-binary-rigol-waveforms\" rel=\"nofollow\">https://www.mathworks.com/matlabcentral/fileexchange/18999-read-binary-rigol-waveforms</a></li>\n<li>Steele\u2019s C program &lt;<a href=\"http://nsweb.tn.tudelft.nl/~gsteele/rigol2dat\" rel=\"nofollow\">http://nsweb.tn.tudelft.nl/~gsteele/rigol2dat</a></li>\n<li>Blaicher\u2019s python code &lt;<a href=\"https://github.com/mabl/pyRigolWFM\" rel=\"nofollow\">https://github.com/mabl/pyRigolWFM</a></li>\n<li>Szkutnik\u2019s python code &lt;<a href=\"https://github.com/michal-szkutnik/pyRigolWfm1000Z\" rel=\"nofollow\">https://github.com/michal-szkutnik/pyRigolWfm1000Z</a></li>\n<li>Cat-Ion\u2019s python code &lt;<a href=\"https://github.com/Cat-Ion/rigol-ds4000-wfm\" rel=\"nofollow\">https://github.com/Cat-Ion/rigol-ds4000-wfm</a></li>\n<li>\u0160olc\u2019s python code &lt;<a href=\"https://www.tablix.org/~avian/blog/archives/2019/08/quick_and_ugly_wfm_data_export_for_rigol_ds2072a/\" rel=\"nofollow\">https://www.tablix.org/~avian/blog/archives/2019/08/quick_and_ugly_wfm_data_export_for_rigol_ds2072a/</a></li>\n<li>Contributions from &lt;<a href=\"http://www.hakasoft.com.au/wfm_viewer\" rel=\"nofollow\">http://www.hakasoft.com.au/wfm_viewer</a></li>\n<li>A LabView program I got from Rigol support</li>\n<li>Rigol\u2019s documentation of the 1000E, 1000Z, 2000, and 6000 file formats.</li>\n</ul>\n</div>\n<div id=\"source-code-repository\">\n<h2>Source code repository</h2>\n<blockquote>\n&lt;<a href=\"https://github.com/scottprahl/RigolWFM\" rel=\"nofollow\">https://github.com/scottprahl/RigolWFM</a>&gt;</blockquote>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<blockquote>\nBSD 3-clause \u2013 see the file <tt>LICENSE</tt> for details.</blockquote>\n</div>\n\n          </div>"}, "last_serial": 6904789, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "5eb5a480a1bbd0d9fa131f7d727311e0", "sha256": "590d40355e02849889b2667252c656632441e43650ebd9131e62488908940af7"}, "downloads": -1, "filename": "RigolWFM-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5eb5a480a1bbd0d9fa131f7d727311e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94338, "upload_time": "2020-01-12T18:15:00", "upload_time_iso_8601": "2020-01-12T18:15:00.077622Z", "url": "https://files.pythonhosted.org/packages/59/0c/7338ebe7c27d4dc96fd085cc2eac5559416df760fb444c79e7df93377cca/RigolWFM-0.3.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "2927bbaf436370f1e96a59db90d96565", "sha256": "7109ac9c94b7964935c5c566b4bd703b2094efd7b3052de90144d2d66e0a49cf"}, "downloads": -1, "filename": "RigolWFM-0.4.1.tar.gz", "has_sig": false, "md5_digest": "2927bbaf436370f1e96a59db90d96565", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 398163, "upload_time": "2020-03-01T22:27:37", "upload_time_iso_8601": "2020-03-01T22:27:37.176245Z", "url": "https://files.pythonhosted.org/packages/48/48/369d5d70f3e43eb48bf59fdfd3d7139bbf4ad0b7b73ee3ac82392a55c950/RigolWFM-0.4.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "32206d4a637b716b2e0f66a6fc021f51", "sha256": "2b331a27ac92a961b42265fab7af5ae7a5cbb15e9da9ef357e6972bdcdd8de01"}, "downloads": -1, "filename": "RigolWFM-0.6.0.tar.gz", "has_sig": false, "md5_digest": "32206d4a637b716b2e0f66a6fc021f51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1306781, "upload_time": "2020-03-27T03:16:50", "upload_time_iso_8601": "2020-03-27T03:16:50.447766Z", "url": "https://files.pythonhosted.org/packages/3f/56/6a80f49e110fbd544a1eb94b987ef4e1f3c22682a3e7cb283d3944a649bc/RigolWFM-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "275b0750e23f3e0631d54b20a3531dcb", "sha256": "891231aecba27fa1b4cc6576356ceb0280f1a0f2c6e2411bed132a5ac53e631f"}, "downloads": -1, "filename": "RigolWFM-0.6.1.tar.gz", "has_sig": false, "md5_digest": "275b0750e23f3e0631d54b20a3531dcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1306886, "upload_time": "2020-03-27T17:04:38", "upload_time_iso_8601": "2020-03-27T17:04:38.563363Z", "url": "https://files.pythonhosted.org/packages/29/c7/2b2ef61ad027e8dbe4392384f29149530959d049e1a4cb3be4a2e197e34d/RigolWFM-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "9305df5196a3c2a043884943326fdc00", "sha256": "40d2135bd956bd8c4d5554debd74be480b122915d244bea0b3efaf698c805e3b"}, "downloads": -1, "filename": "RigolWFM-0.6.2.tar.gz", "has_sig": false, "md5_digest": "9305df5196a3c2a043884943326fdc00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1306899, "upload_time": "2020-03-27T17:20:57", "upload_time_iso_8601": "2020-03-27T17:20:57.165910Z", "url": "https://files.pythonhosted.org/packages/6d/0f/5b32091f6331e72482180db7be6dea47fc85c230c9b1c522ffa7c4576385/RigolWFM-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "014838108691d5d924a61b4e4156109f", "sha256": "cc4077644aeff2a31cc8204f61cba1801e5342062a53c30f7ef0045e8da017b9"}, "downloads": -1, "filename": "RigolWFM-0.6.3.tar.gz", "has_sig": false, "md5_digest": "014838108691d5d924a61b4e4156109f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 19971, "upload_time": "2020-03-29T03:26:14", "upload_time_iso_8601": "2020-03-29T03:26:14.651279Z", "url": "https://files.pythonhosted.org/packages/e1/c1/2eeb758ece468808fdd25518abe2fe971c315d5db5fd69981092c407f11b/RigolWFM-0.6.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "014838108691d5d924a61b4e4156109f", "sha256": "cc4077644aeff2a31cc8204f61cba1801e5342062a53c30f7ef0045e8da017b9"}, "downloads": -1, "filename": "RigolWFM-0.6.3.tar.gz", "has_sig": false, "md5_digest": "014838108691d5d924a61b4e4156109f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 19971, "upload_time": "2020-03-29T03:26:14", "upload_time_iso_8601": "2020-03-29T03:26:14.651279Z", "url": "https://files.pythonhosted.org/packages/e1/c1/2eeb758ece468808fdd25518abe2fe971c315d5db5fd69981092c407f11b/RigolWFM-0.6.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:40 2020"}