{"info": {"author": "Rick van Rein (for the ARPA2 Reservoir project)", "author_email": "rick@openfortress.nl", "bugtrack_url": null, "classifiers": [], "description": "# ARPA2 Reservoir: API\n\n> *This is the central logic for manipulating the stored information\n> of ARPA2 Reservoir.  It manipulates metadata in LDAP as well as the\n> files that hold the litaral objects.*\n\nReservoir is an object store with maximum exposure over standard\nprotocols.  It stores metadata in LDAP, which may be searched from\nthe outside.  The actual data is stored in a hierarchy of a given,\nsimple structure.  This API controls both.\n\nTo access the API, import its package:\n\n```\nfrom arpa2 import reservoir\n```\n\nThis only includes the API.  You will separately have to add support\nfrom other tools if you need it.  Some tools are in fact commandline\nutilities that get installed through their `entry_point` as additional\ncommands for the OS.\n\n## Layers on Top of this API\n\nOn top of this API, there are a few other packages:\n\n**Work completed:**\n\n  * `reservoir.rmt` solutions may use the Reservoir like a remote tape for\n    backup.  It may implement the `rmt(1)` command set for anyone who\n    arrives over a secure shell connection.  We followed the \"modern\"\n    [protocol version 1]()http://schilytools.sourceforge.net/man/man1/rmt.1.html\n    for safety reasons, and will reject attempts of `erase` and `weof`\n    commands from older clients (such as GNU mt), simply because they\n    might be accidentally triggered by these older clients due to the\n    exchange of non-portable command codes.  They didn't realise this\n    to be a problem back in 1981.\n\n**Work in progress:**\n\n  * `arpa2reservoir` is a commandline shell over which administrators\n    can perform the actions offered by the API.  It also has an automation\n    interface centered around JSON messages.\n\n  * `wsgidav` is a WebDAV implementation with a backend plugin for the\n    Reservoir.  It digs up metadata in LDAP and serves the results over a\n    common WebDAV interface.  Even though LDAP would be more efficient to use,\n    there are many ways of making a WebDAV repository available as a virtual\n    drive or directory on a client machine.\n\n  * `reservoir.sftp` can be a plugin to OpenSSH2 that serves the SFTP protocol,\n    but in reality interacts with the Reservoir instead of (just) local files.\n\n**Further options** for which your help could make all the difference:\n\n  * `reservoir.amqp` servers will send and receive from queues in the\n    Reservoir, by connecting to other domains with AMQP 1.0, performing\n    mutual authentication and then passing objects with as much metadata\n    as the protocol can carry.\n\n  * `reservoir.lmtp` servers may receive information for Reservoir from a\n    variety of sources, including but not limited to a domain's mail server.\n\n  * `reservoir.volume` may be a service to provide images for a large\n    variety of purposes; these may include disk images for virtual machines,\n    CD-ROM images for OS installation, TFTP images of operating systems and\n    their initial disks, and so on.  Note that Reservoir can store hashes\n    of content in the metadata.\n\n  * `reservoir.cid` could perform lookups based on `Content-ID`, the header\n    defined in [RFC 2392](https://tools.ietf.org/html/rfc2392) and\n    commonly used to identify email attachments.  All this needs is an\n    apphint for this use under a user or domain or other.  A much nicer\n    way to exchange \"attachments\", and much easier to secure as well.\n\n## Functionalities\n\nThe Python documentation will help you get going, but this is a quick start.\n\nThere are a few classes of interest:\n\n  * `Resource` is like a file; it represents a stored object, including its metadata.\n  * `Index` is like a current working directory; it can progress to other indexes, as well as list or obtain resources held in them.\n  * The domain (or a user under a domain) has what is called a home index; this works a little differently; the first step is to provide a hinted application name that may have its own Index setup; if not, a default/unnamed Index that serves as a fallback is used instead.\n\nAn Index points to a Collection of Resources.  You can access a name in the index to move to another such Collection.  New Collections may be added with a name, existing ones may be aliased to a name, and this is how Indexes grow and expand.\n\nFinally, Collections have Resources added to them.  Indexes that are home indexes for (a user under) a domain are not Collections, and they cannot have Resources underneath them.  This can be remedied simply with an application hint.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arpa2/reservoir", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "arpa2.reservoir", "package_url": "https://pypi.org/project/arpa2.reservoir/", "platform": "", "project_url": "https://pypi.org/project/arpa2.reservoir/", "project_urls": {"Homepage": "https://github.com/arpa2/reservoir"}, "release_url": "https://pypi.org/project/arpa2.reservoir/0.2.0/", "requires_dist": ["arpa2.shell", "python-ldap", "gssapi", "six", "enum34 ; python_version < \"3\""], "requires_python": "", "summary": "ARPA2 Reservoir -- object store with metadata in LDAP", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ARPA2 Reservoir: API</h1>\n<blockquote>\n<p><em>This is the central logic for manipulating the stored information\nof ARPA2 Reservoir.  It manipulates metadata in LDAP as well as the\nfiles that hold the litaral objects.</em></p>\n</blockquote>\n<p>Reservoir is an object store with maximum exposure over standard\nprotocols.  It stores metadata in LDAP, which may be searched from\nthe outside.  The actual data is stored in a hierarchy of a given,\nsimple structure.  This API controls both.</p>\n<p>To access the API, import its package:</p>\n<pre><code>from arpa2 import reservoir\n</code></pre>\n<p>This only includes the API.  You will separately have to add support\nfrom other tools if you need it.  Some tools are in fact commandline\nutilities that get installed through their <code>entry_point</code> as additional\ncommands for the OS.</p>\n<h2>Layers on Top of this API</h2>\n<p>On top of this API, there are a few other packages:</p>\n<p><strong>Work completed:</strong></p>\n<ul>\n<li><code>reservoir.rmt</code> solutions may use the Reservoir like a remote tape for\nbackup.  It may implement the <code>rmt(1)</code> command set for anyone who\narrives over a secure shell connection.  We followed the \"modern\"\n<a href=\"\" rel=\"nofollow\">protocol version 1</a><a href=\"http://schilytools.sourceforge.net/man/man1/rmt.1.html\" rel=\"nofollow\">http://schilytools.sourceforge.net/man/man1/rmt.1.html</a>\nfor safety reasons, and will reject attempts of <code>erase</code> and <code>weof</code>\ncommands from older clients (such as GNU mt), simply because they\nmight be accidentally triggered by these older clients due to the\nexchange of non-portable command codes.  They didn't realise this\nto be a problem back in 1981.</li>\n</ul>\n<p><strong>Work in progress:</strong></p>\n<ul>\n<li>\n<p><code>arpa2reservoir</code> is a commandline shell over which administrators\ncan perform the actions offered by the API.  It also has an automation\ninterface centered around JSON messages.</p>\n</li>\n<li>\n<p><code>wsgidav</code> is a WebDAV implementation with a backend plugin for the\nReservoir.  It digs up metadata in LDAP and serves the results over a\ncommon WebDAV interface.  Even though LDAP would be more efficient to use,\nthere are many ways of making a WebDAV repository available as a virtual\ndrive or directory on a client machine.</p>\n</li>\n<li>\n<p><code>reservoir.sftp</code> can be a plugin to OpenSSH2 that serves the SFTP protocol,\nbut in reality interacts with the Reservoir instead of (just) local files.</p>\n</li>\n</ul>\n<p><strong>Further options</strong> for which your help could make all the difference:</p>\n<ul>\n<li>\n<p><code>reservoir.amqp</code> servers will send and receive from queues in the\nReservoir, by connecting to other domains with AMQP 1.0, performing\nmutual authentication and then passing objects with as much metadata\nas the protocol can carry.</p>\n</li>\n<li>\n<p><code>reservoir.lmtp</code> servers may receive information for Reservoir from a\nvariety of sources, including but not limited to a domain's mail server.</p>\n</li>\n<li>\n<p><code>reservoir.volume</code> may be a service to provide images for a large\nvariety of purposes; these may include disk images for virtual machines,\nCD-ROM images for OS installation, TFTP images of operating systems and\ntheir initial disks, and so on.  Note that Reservoir can store hashes\nof content in the metadata.</p>\n</li>\n<li>\n<p><code>reservoir.cid</code> could perform lookups based on <code>Content-ID</code>, the header\ndefined in <a href=\"https://tools.ietf.org/html/rfc2392\" rel=\"nofollow\">RFC 2392</a> and\ncommonly used to identify email attachments.  All this needs is an\napphint for this use under a user or domain or other.  A much nicer\nway to exchange \"attachments\", and much easier to secure as well.</p>\n</li>\n</ul>\n<h2>Functionalities</h2>\n<p>The Python documentation will help you get going, but this is a quick start.</p>\n<p>There are a few classes of interest:</p>\n<ul>\n<li><code>Resource</code> is like a file; it represents a stored object, including its metadata.</li>\n<li><code>Index</code> is like a current working directory; it can progress to other indexes, as well as list or obtain resources held in them.</li>\n<li>The domain (or a user under a domain) has what is called a home index; this works a little differently; the first step is to provide a hinted application name that may have its own Index setup; if not, a default/unnamed Index that serves as a fallback is used instead.</li>\n</ul>\n<p>An Index points to a Collection of Resources.  You can access a name in the index to move to another such Collection.  New Collections may be added with a name, existing ones may be aliased to a name, and this is how Indexes grow and expand.</p>\n<p>Finally, Collections have Resources added to them.  Indexes that are home indexes for (a user under) a domain are not Collections, and they cannot have Resources underneath them.  This can be remedied simply with an application hint.</p>\n\n          </div>"}, "last_serial": 6636284, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7090cac1b32c6d1718573f8231f7b3cb", "sha256": "6e0534129ae247e0567565aaec17b686277e9ed10d68f7cd7cb66408da40a6d9"}, "downloads": -1, "filename": "arpa2.reservoir-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7090cac1b32c6d1718573f8231f7b3cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21958, "upload_time": "2020-02-14T12:40:42", "upload_time_iso_8601": "2020-02-14T12:40:42.740651Z", "url": "https://files.pythonhosted.org/packages/b7/44/29649f1f4c6f6cbb5229f29180e040641a59dd64a17f4b9fd029ee174fc8/arpa2.reservoir-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "246568898f45545d216d218434dc0bf3", "sha256": "d41b93b74c0bc5e35b4aabae2fcdd64d2bda4c98d7e3e0366d0bb6bef282377c"}, "downloads": -1, "filename": "arpa2.reservoir-0.1.0.tar.gz", "has_sig": false, "md5_digest": "246568898f45545d216d218434dc0bf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3158, "upload_time": "2020-02-14T12:40:44", "upload_time_iso_8601": "2020-02-14T12:40:44.817066Z", "url": "https://files.pythonhosted.org/packages/be/7c/c3f87fc2c98453478262cbd50f47d02ccd3734996c4f07e6400a8fa19ca7/arpa2.reservoir-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7159b767d49ada50d946b81af982a848", "sha256": "d9e18682f92ff2ae6c8ffb97dced67e2b8ac44c54d2ed1e200cae9e63737db6e"}, "downloads": -1, "filename": "arpa2.reservoir-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7159b767d49ada50d946b81af982a848", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25412, "upload_time": "2020-02-15T13:02:57", "upload_time_iso_8601": "2020-02-15T13:02:57.743991Z", "url": "https://files.pythonhosted.org/packages/7c/e2/04651f4f3e3046d319c362dc6afab42eb660b0d37941e9a94f57d34fc3c7/arpa2.reservoir-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d495fd6e547e8ceec0dde1ec69ef3558", "sha256": "2f7c36f459db67bdc6c62656c14e41b3deb3448f2ffa48619012137b94de9982"}, "downloads": -1, "filename": "arpa2.reservoir-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d495fd6e547e8ceec0dde1ec69ef3558", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3582, "upload_time": "2020-02-15T13:02:59", "upload_time_iso_8601": "2020-02-15T13:02:59.209527Z", "url": "https://files.pythonhosted.org/packages/de/9a/407a35b8f23668c72ea81250e32318d2bae05020959db0c0ed5dc0a416bd/arpa2.reservoir-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7159b767d49ada50d946b81af982a848", "sha256": "d9e18682f92ff2ae6c8ffb97dced67e2b8ac44c54d2ed1e200cae9e63737db6e"}, "downloads": -1, "filename": "arpa2.reservoir-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7159b767d49ada50d946b81af982a848", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25412, "upload_time": "2020-02-15T13:02:57", "upload_time_iso_8601": "2020-02-15T13:02:57.743991Z", "url": "https://files.pythonhosted.org/packages/7c/e2/04651f4f3e3046d319c362dc6afab42eb660b0d37941e9a94f57d34fc3c7/arpa2.reservoir-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d495fd6e547e8ceec0dde1ec69ef3558", "sha256": "2f7c36f459db67bdc6c62656c14e41b3deb3448f2ffa48619012137b94de9982"}, "downloads": -1, "filename": "arpa2.reservoir-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d495fd6e547e8ceec0dde1ec69ef3558", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3582, "upload_time": "2020-02-15T13:02:59", "upload_time_iso_8601": "2020-02-15T13:02:59.209527Z", "url": "https://files.pythonhosted.org/packages/de/9a/407a35b8f23668c72ea81250e32318d2bae05020959db0c0ed5dc0a416bd/arpa2.reservoir-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:11 2020"}