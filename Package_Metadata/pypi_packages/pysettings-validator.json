{"info": {"author": "Emanuele Palazzetti", "author_email": "emanuele.palazzetti@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "\n# pysettings\n\n[![CircleCI](https://circleci.com/gh/palazzem/pysettings/tree/master.svg?style=svg)](https://circleci.com/gh/palazzem/pysettings/tree/master)\n[![codecov](https://codecov.io/gh/palazzem/pysettings/branch/master/graph/badge.svg)](https://codecov.io/gh/palazzem/pysettings)\n\nPysettings is a Python package to store your application settings. Compared to some\nsettings managers, this package has been inspired by [Django Rest Frameworks validators][1]\nwhere you can validate the user input beforehand.\n\nThat simplifies your code because settings don't need to be validated in your application\nlogic. Available features are:\n* Store your application settings without using global objects.\n* Extend your settings using a `BaseSettings` class. The resulting class can be validated\n  using a `settings.is_valid()` method.\n* Fields are represented with an `Option` field that takes `validators` as parameter.\n  It's possible to set a `default` value if the option is not set by users.\n* Out of the box validators: `not_null`, `is_https_url`.\n* It's possible to add custom validators as functions.\n\n[1]: https://www.django-rest-framework.org/api-guide/validators/\n\n## Requirements\n\n* Python 3.5+\n\n## Getting Started\n\n`pysettings` is available on PyPI:\n\n```bash\n$ pip install pysettings-validator\n```\n\n### Create your Settings\n\n```python\nfrom pysettings.base import BaseSettings\nfrom pysettings.options import Option\nfrom pysettings.validators import is_https_url\n\n# Class definition\nclass Settings(BaseSettings):\n    url = Option(validators=[is_https_url])\n    description = Option()\n\n# Use settings in your application\nsettings = Settings()\nsettings.url = \"https://example.com\"\nsettings.description = \"A shiny Website!\"\nsettings.is_valid()  # returns (True, [])\n```\n\n### Settings API\n\n`settings` instance doesn't allow to set attributes not defined as `Option`. If you\ntry to set a setting that is not defined, a `OptionNotAvailable` exception is raised:\n\n```python\nclass Settings(BaseSettings):\n    description = Option()\n\n# Use settings in your application\nsettings = Settings()\nsettings.url = \"https://example.com\"  # raise `OptionNotAvailable`\n```\n\n`is_valid()` exposes a `raise_exception=True` kwarg in case you prefer to not raise\nexceptions in your code:\n\n```python\nclass Settings(BaseSettings):\n    url = Option(validators=[is_https_url])\n\n# Use settings in your application\nsettings = Settings()\nsettings.url = \"http://example.com\"\nsettings.is_valid()                       # raise ConfigNotValid exception\nsettings.is_valid(raise_exception=False)  # return (False, [{'url': [{'is_https_url': 'The schema must be HTTPS'}]}])\n```\n\n### Create a Custom Validator\n\n```python\n# app/validators.py\nfrom pysettings.exceptions import ValidationError\n\ndef is_a_boolean(value):\n    if isinstance(value, bool):\n        return True\n    else:\n        raise ValidationError(\"The value must a Boolean\")\n\n# app/settings.py\nfrom .validators import is_a_boolean\n\nclass Settings(BaseSettings):\n    dry_run = Option(validators=[is_a_boolean])\n    description = Option()\n\n# app/main.py\nsettings = Settings()\nsettings.dry_run = \"Yes\"\nsettings.description = \"Dry run mode!\"\nsettings.is_valid()  # raises ConfigNotValid exception\n```\n\n## Development\n\nWe accept external contributions even though the project is mostly designed for personal\nneeds. If you think some parts can be exposed with a more generic interface, feel free\nto open a GitHub issue and to discuss your suggestion.\n\n### Coding Guidelines\n\nWe use [flake8][1] as a style guide enforcement. That said, we also use [black][2] to\nreformat our code, keeping a well defined style even for quotes, multi-lines blocks and other.\nBefore submitting your code, be sure to launch `black` to reformat your PR.\n\n[1]: https://pypi.org/project/flake8/\n[2]: https://github.com/ambv/black\n\n### Testing\n\n`tox` is used to execute the following test matrix:\n* `lint`: launches `flake8` and `black --check` to be sure the code honors our style guideline\n* `py{35,36,37,38}`: launches `py.test` to execute all tests under Python 3.5, 3.6,\n  3.7 and 3.8.\n\nTo launch the full test matrix, just:\n\n```bash\n$ tox\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/palazzem/pysettings", "keywords": "", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "pysettings-validator", "package_url": "https://pypi.org/project/pysettings-validator/", "platform": "", "project_url": "https://pypi.org/project/pysettings-validator/", "project_urls": {"Homepage": "https://github.com/palazzem/pysettings"}, "release_url": "https://pypi.org/project/pysettings-validator/0.1.0/", "requires_dist": null, "requires_python": ">=3.5.0", "summary": "Python package to store your application settings. Validators are built-in!", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pysettings</h1>\n<p><a href=\"https://circleci.com/gh/palazzem/pysettings/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f26c0c2c81de884007de206dcaca5ef27fd08805/68747470733a2f2f636972636c6563692e636f6d2f67682f70616c617a7a656d2f707973657474696e67732f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/palazzem/pysettings\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aec987c0fc8f5bf4394abe36d0d379f17d5ba0b9/68747470733a2f2f636f6465636f762e696f2f67682f70616c617a7a656d2f707973657474696e67732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Pysettings is a Python package to store your application settings. Compared to some\nsettings managers, this package has been inspired by <a href=\"https://www.django-rest-framework.org/api-guide/validators/\" rel=\"nofollow\">Django Rest Frameworks validators</a>\nwhere you can validate the user input beforehand.</p>\n<p>That simplifies your code because settings don't need to be validated in your application\nlogic. Available features are:</p>\n<ul>\n<li>Store your application settings without using global objects.</li>\n<li>Extend your settings using a <code>BaseSettings</code> class. The resulting class can be validated\nusing a <code>settings.is_valid()</code> method.</li>\n<li>Fields are represented with an <code>Option</code> field that takes <code>validators</code> as parameter.\nIt's possible to set a <code>default</code> value if the option is not set by users.</li>\n<li>Out of the box validators: <code>not_null</code>, <code>is_https_url</code>.</li>\n<li>It's possible to add custom validators as functions.</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.5+</li>\n</ul>\n<h2>Getting Started</h2>\n<p><code>pysettings</code> is available on PyPI:</p>\n<pre>$ pip install pysettings-validator\n</pre>\n<h3>Create your Settings</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pysettings.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSettings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pysettings.options</span> <span class=\"kn\">import</span> <span class=\"n\">Option</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pysettings.validators</span> <span class=\"kn\">import</span> <span class=\"n\">is_https_url</span>\n\n<span class=\"c1\"># Class definition</span>\n<span class=\"k\">class</span> <span class=\"nc\">Settings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">is_https_url</span><span class=\"p\">])</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">Option</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Use settings in your application</span>\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://example.com\"</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"A shiny Website!\"</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>  <span class=\"c1\"># returns (True, [])</span>\n</pre>\n<h3>Settings API</h3>\n<p><code>settings</code> instance doesn't allow to set attributes not defined as <code>Option</code>. If you\ntry to set a setting that is not defined, a <code>OptionNotAvailable</code> exception is raised:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Settings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">Option</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Use settings in your application</span>\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://example.com\"</span>  <span class=\"c1\"># raise `OptionNotAvailable`</span>\n</pre>\n<p><code>is_valid()</code> exposes a <code>raise_exception=True</code> kwarg in case you prefer to not raise\nexceptions in your code:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Settings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">is_https_url</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Use settings in your application</span>\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://example.com\"</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>                       <span class=\"c1\"># raise ConfigNotValid exception</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">(</span><span class=\"n\">raise_exception</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># return (False, [{'url': [{'is_https_url': 'The schema must be HTTPS'}]}])</span>\n</pre>\n<h3>Create a Custom Validator</h3>\n<pre><span class=\"c1\"># app/validators.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pysettings.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_a_boolean</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s2\">\"The value must a Boolean\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># app/settings.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.validators</span> <span class=\"kn\">import</span> <span class=\"n\">is_a_boolean</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Settings</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"n\">dry_run</span> <span class=\"o\">=</span> <span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">is_a_boolean</span><span class=\"p\">])</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">Option</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># app/main.py</span>\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">dry_run</span> <span class=\"o\">=</span> <span class=\"s2\">\"Yes\"</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"Dry run mode!\"</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>  <span class=\"c1\"># raises ConfigNotValid exception</span>\n</pre>\n<h2>Development</h2>\n<p>We accept external contributions even though the project is mostly designed for personal\nneeds. If you think some parts can be exposed with a more generic interface, feel free\nto open a GitHub issue and to discuss your suggestion.</p>\n<h3>Coding Guidelines</h3>\n<p>We use <a href=\"https://www.django-rest-framework.org/api-guide/validators/\" rel=\"nofollow\">flake8</a> as a style guide enforcement. That said, we also use <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">black</a> to\nreformat our code, keeping a well defined style even for quotes, multi-lines blocks and other.\nBefore submitting your code, be sure to launch <code>black</code> to reformat your PR.</p>\n<h3>Testing</h3>\n<p><code>tox</code> is used to execute the following test matrix:</p>\n<ul>\n<li><code>lint</code>: launches <code>flake8</code> and <code>black --check</code> to be sure the code honors our style guideline</li>\n<li><code>py{35,36,37,38}</code>: launches <code>py.test</code> to execute all tests under Python 3.5, 3.6,\n3.7 and 3.8.</li>\n</ul>\n<p>To launch the full test matrix, just:</p>\n<pre>$ tox\n</pre>\n\n          </div>"}, "last_serial": 6812695, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d6ecbb4bddfbce723c09be4598e14e1e", "sha256": "8491ea0e2373de5361c35d72915f254fc11bca3a976d8178802e6e7296189e3a"}, "downloads": -1, "filename": "pysettings_validator-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d6ecbb4bddfbce723c09be4598e14e1e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 7072, "upload_time": "2020-03-14T20:20:15", "upload_time_iso_8601": "2020-03-14T20:20:15.981410Z", "url": "https://files.pythonhosted.org/packages/20/3e/c4d21730ba61ba2e0f5fc8a169d572b2f5ed3a0afdb4ef2cac2554128f59/pysettings_validator-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cef5a5c25ff793d740a4995b2d6e7670", "sha256": "5c8ffa5025d523b76966256e0bad489e00e60850bc116084a5460366fc5f081a"}, "downloads": -1, "filename": "pysettings-validator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cef5a5c25ff793d740a4995b2d6e7670", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 6862, "upload_time": "2020-03-14T20:20:18", "upload_time_iso_8601": "2020-03-14T20:20:18.539552Z", "url": "https://files.pythonhosted.org/packages/e2/5b/f5d1bf0af055c35449d124bced4a731c7f7a44075fdd183dfaea4d48c6ff/pysettings-validator-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6ecbb4bddfbce723c09be4598e14e1e", "sha256": "8491ea0e2373de5361c35d72915f254fc11bca3a976d8178802e6e7296189e3a"}, "downloads": -1, "filename": "pysettings_validator-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d6ecbb4bddfbce723c09be4598e14e1e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 7072, "upload_time": "2020-03-14T20:20:15", "upload_time_iso_8601": "2020-03-14T20:20:15.981410Z", "url": "https://files.pythonhosted.org/packages/20/3e/c4d21730ba61ba2e0f5fc8a169d572b2f5ed3a0afdb4ef2cac2554128f59/pysettings_validator-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cef5a5c25ff793d740a4995b2d6e7670", "sha256": "5c8ffa5025d523b76966256e0bad489e00e60850bc116084a5460366fc5f081a"}, "downloads": -1, "filename": "pysettings-validator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cef5a5c25ff793d740a4995b2d6e7670", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 6862, "upload_time": "2020-03-14T20:20:18", "upload_time_iso_8601": "2020-03-14T20:20:18.539552Z", "url": "https://files.pythonhosted.org/packages/e2/5b/f5d1bf0af055c35449d124bced4a731c7f7a44075fdd183dfaea4d48c6ff/pysettings-validator-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:03 2020"}