{"info": {"author": "Paul Baecher", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# datadispatch\n\ndatadispatch provides a dispatch mechanism (a.k.a. polymorphism) like `functools.singledispatch`, but it operates on data instead of types. This is useful if you are creating simple data-centric applications where you want polymorphism \u00e0 la carte without resorting to types or classes.\n\ndatadispatch is available through pip: `pip install datadispatch`\n\n## Usage example\n\n```python\nfrom datadispatch import datadispatch\n\n@datadispatch(lambda args, _: args[0].get('type'))\ndef handle(message):\n  raise ValueError('cannot handle message: {}'.format(message))\n\n\n@handle.register('ping')\ndef _(message):\n  return 'you sent ping'\n\n\n@handle.register('pong')\ndef _(message):\n  return 'you sent pong'\n\n\nprint(handle(\n  {'type': 'ping', 'payload': 'hello'}\n))\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pb-/datadispatch", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "datadispatch", "package_url": "https://pypi.org/project/datadispatch/", "platform": "", "project_url": "https://pypi.org/project/datadispatch/", "project_urls": {"Homepage": "https://github.com/pb-/datadispatch"}, "release_url": "https://pypi.org/project/datadispatch/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Like functools.singledispatch but for values", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>datadispatch</h1>\n<p>datadispatch provides a dispatch mechanism (a.k.a. polymorphism) like <code>functools.singledispatch</code>, but it operates on data instead of types. This is useful if you are creating simple data-centric applications where you want polymorphism \u00e0 la carte without resorting to types or classes.</p>\n<p>datadispatch is available through pip: <code>pip install datadispatch</code></p>\n<h2>Usage example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datadispatch</span> <span class=\"kn\">import</span> <span class=\"n\">datadispatch</span>\n\n<span class=\"nd\">@datadispatch</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n  <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'cannot handle message: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n\n<span class=\"nd\">@handle</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'ping'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">_</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s1\">'you sent ping'</span>\n\n\n<span class=\"nd\">@handle</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'pong'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">_</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s1\">'you sent pong'</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">(</span>\n  <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'ping'</span><span class=\"p\">,</span> <span class=\"s1\">'payload'</span><span class=\"p\">:</span> <span class=\"s1\">'hello'</span><span class=\"p\">}</span>\n<span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 4633773, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "14ae19926efbe23dc168cde811616583", "sha256": "527ad534881d7f6144a8ff643c260a3d2ae0d50e8ee24ec4b0fdae72d6c7beab"}, "downloads": -1, "filename": "datadispatch-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "14ae19926efbe23dc168cde811616583", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2632, "upload_time": "2018-12-25T16:33:53", "upload_time_iso_8601": "2018-12-25T16:33:53.370719Z", "url": "https://files.pythonhosted.org/packages/80/6a/d38daeb232e560803057c202ada249c5f53a7d532eae216660af42a23781/datadispatch-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d879a864c989e0b624bda156761a67b6", "sha256": "3c0456934e99f21137332deebbda05713dc07fcb142dfc01ef83d6b17aeaf08e"}, "downloads": -1, "filename": "datadispatch-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d879a864c989e0b624bda156761a67b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1800, "upload_time": "2018-12-25T16:33:55", "upload_time_iso_8601": "2018-12-25T16:33:55.509392Z", "url": "https://files.pythonhosted.org/packages/af/c9/2a1d98bf6a1e2ca41465dd77dc025d8a13b713c6d4378227c8938258c5d4/datadispatch-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "14ae19926efbe23dc168cde811616583", "sha256": "527ad534881d7f6144a8ff643c260a3d2ae0d50e8ee24ec4b0fdae72d6c7beab"}, "downloads": -1, "filename": "datadispatch-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "14ae19926efbe23dc168cde811616583", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2632, "upload_time": "2018-12-25T16:33:53", "upload_time_iso_8601": "2018-12-25T16:33:53.370719Z", "url": "https://files.pythonhosted.org/packages/80/6a/d38daeb232e560803057c202ada249c5f53a7d532eae216660af42a23781/datadispatch-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d879a864c989e0b624bda156761a67b6", "sha256": "3c0456934e99f21137332deebbda05713dc07fcb142dfc01ef83d6b17aeaf08e"}, "downloads": -1, "filename": "datadispatch-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d879a864c989e0b624bda156761a67b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1800, "upload_time": "2018-12-25T16:33:55", "upload_time_iso_8601": "2018-12-25T16:33:55.509392Z", "url": "https://files.pythonhosted.org/packages/af/c9/2a1d98bf6a1e2ca41465dd77dc025d8a13b713c6d4378227c8938258c5d4/datadispatch-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:26 2020"}