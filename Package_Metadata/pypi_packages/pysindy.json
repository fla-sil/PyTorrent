{"info": {"author": "Brian de Silva, Kathleen Champion, Markus Quade", "author_email": "bdesilva@uw.edu, kpchamp@uw.edu, info@markusqua.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Mathematics"], "description": "PySINDy\n=========\n\n|BuildCI| |RTD| |PyPI| |Codecov| |JOSS|\n\n**PySINDy** is a sparse regression package with several implementations for the Sparse Identification of Nonlinear Dynamical systems (SINDy) method introduced in Brunton et al. (2016a), including the unified optimization approach of Champion et al. (2019) and SINDy with control from Brunton et al. (2016b). A comprehensive literature review is given in de Silva et al. (2020).\n\nSystem identification\n---------------------\nSystem identification refers to the process of leveraging measurement data to infer governing equations, in the form of dynamical systems, describing the data. Once discovered, these equations can make predictions about future states, can inform control inputs, or can enable the theoretical study using analytical techniques.\nDynamical systems are a flexible, well-studied class of mathematical objects for modeling systems evolving in time.\nSINDy is a model discovery method which uses *sparse regression* to infer nonlinear dynamical systems from measurement data.\nThe resulting models are inherently *interpretable* and *generalizable*.\n\nHow it works\n^^^^^^^^^^^^\nSuppose, for some physical system of interest, we have measurements of state variables ``x(t)`` (a vector of length n) at different points in time. Examples of state variables include the position, velocity, or acceleration of objects; lift, drag, or angle of attack of aerodynamic objects; and concentrations of different chemical species. If we suspect that the system could be well-modeled by a dynamical system of the form\n\n.. code-block:: text\n\n    x'(t) = f(x(t)),\n\nthen we can use SINDy to learn ``f(x)`` from the data (``x'(t)`` denotes the time derivative of ``x(t)``). Note that both ``f(x)`` and ``x(t)`` are typically vectors. The fundamental assumption SINDy employs is that each component of ``f(x)``, ``f_i(x)`` can be represented as a *sparse* linear combination of basis functions ``theta_j(x)``\n\n.. code-block:: text\n\n    f_i(x) = theta_1(x) * xi_{1,i} + theta_2(x) * xi_{2,i} + ... + theta_k * xi{k,i}\n\nConcatenating all the objects into matrices (denoted with capitalized names) helps to simplify things.\nTo this end we place all measurements of the state variables into a data matrix ``X`` (with a row per time measurement and a column per variable), the derivatives of the state variables into a matrix ``X'``, all basis functions evaluated at all points in time into a matrix ``Theta(X)`` (each basis function gets a column), and all coefficients into a third matrix ``Xi`` (one column per state variable).\nThe approximation problem to be solved can then be compactly written as\n\n.. code-block:: text\n\n    X' = Theta(X) * Xi.\n\nEach row of this matrix equation corresponds to one coordinate function of ``f(x)``.\nSINDy employs sparse regression techniques to find a solution ``Xi`` with sparse column vectors.\nFor a more in-depth look at the mathematical foundations of SINDy, please see our `introduction to SINDy <https://pysindy.readthedocs.io/en/latest/examples/2_introduction_to_sindy.html>`__.\n\nRelation to PySINDy\n^^^^^^^^^^^^^^^^^^^\nThe PySINDy class revolves around the ``SINDy`` class which consists of three primary components; one for each term in the above matrix approximation problem.\n\n* ``differentiation_method``: computes ``X'``, though if derivatives are known or measured directly, they can be used instead\n* ``feature_library``: specifies the candidate basis functions to be used to construct ``Theta(X)``\n* ``optimizer``: implements a sparse regression method for solving for ``Xi``\n\nOnce a ``SINDy`` object has been created it must be fit to measurement data, similar to a ``scikit-learn`` model. It can then be used to predict derivatives given new measurements, evolve novel initial conditions forward in time, and more. PySINDy has been written to be as compatible with ``scikit-learn`` objects and methods as possible.\n\nExample\n^^^^^^^\nSuppose we have measurements of the position of a particle obeying the following dynamical system at different points in time\n\n.. code-block:: text\n\n  x' = -2x\n  y' = y\n\nNote that this system of differential equations decouples into two differential equations whose solutions are simply ``x(t) = x_0 * exp(-2 * t)`` and ``y(t) = y_0 * exp(t)``, where ``x_0 = x(0)`` and ``y_0 = y(0)`` are the initial conditions.\n\nUsing the initial conditions ``x_0 = 3`` and ``y_0 = 0.5``, we construct the data matrix ``X``.\n\n.. code-block:: python\n\n  import numpy as np\n  import pysindy as ps\n\n  t = np.linspace(0, 1, 100)\n  x = 3 * np.exp(-2 * t)\n  y = 0.5 * np.exp(t)\n  X = np.stack((x, y), axis=-1)  # First column is x, second is y\n\nTo instantiate a ``SINDy`` object with the default differentiation method, feature library, and optimizer and then fit it to the data, we invoke\n\n.. code-block:: python\n\n  model = ps.SINDy(feature_names=[\"x\", \"y\"])\n  model.fit(X, t=t)\n\nWe use the ``feature_names`` argument so that the model prints out the correct labels for ``x`` and ``y``. We can inspect the governing equations discovered by the model and check whether they seem reasonable with the ``print`` function.\n\n.. code-block:: python\n\n  model.print()\n\nwhich prints the following\n\n.. code-block:: text\n\n  x' = -2.000 x\n  y' = 1.000 y\n\nPySINDy provides numerous other features not shown here. We recommend the `feature overview <https://pysindy.readthedocs.io/en/latest/examples/1_feature_overview.html>`__ section of the documentation for a more exhaustive summary of additional features.\n\nInstallation\n------------\n\nInstalling with pip\n^^^^^^^^^^^^^^^^^^^\n\nIf you are using Linux or macOS you can install PySINDy with pip:\n\n.. code-block:: bash\n\n  pip install pysindy\n\nInstalling from source\n^^^^^^^^^^^^^^^^^^^^^^\nFirst clone this repository:\n\n.. code-block:: bash\n\n  git clone https://github.com/dynamicslab/pysindy\n\nThen, to install the package, run\n\n.. code-block:: bash\n\n  pip install .\n\nIf you do not have pip you can instead use\n\n.. code-block:: bash\n\n  python setup.py install\n\nIf you do not have root access, you should add the ``--user`` option to the above lines.\n\nDocumentation\n-------------\nThe documentation site for PySINDy can be found `here <https://pysindy.readthedocs.io/en/latest/>`__. There are numerous `examples <https://pysindy.readthedocs.io/en/latest/examples/index.html>`_ of PySINDy in action to help you get started. Examples are also available as `Jupyter notebooks <https://github.com/dynamicslab/pysindy/tree/master/examples>`__.\n\nCommunity guidelines\n--------------------\n\nContributing code\n^^^^^^^^^^^^^^^^^\nWe welcome contributions to PySINDy. To contribute a new feature please submit a pull request. To get started we recommend installing the packages in ``requirements-dev.txt`` via\n\n.. code-block:: bash\n\n    pip install -r requirements-dev.txt\n\nThis will allow you to run unit tests and automatically format your code. To be accepted your code should conform to PEP8 and pass all unit tests. Code can be tested by invoking\n\n.. code-block:: bash\n\n    pytest\n\nWe recommed using ``pre-commit`` to format your code. Once you have staged changes to commit\n\n.. code-block:: bash\n\n    git add path/to/changed/file.py\n\nyou can run the following to automatically reformat your staged code\n\n.. code-block:: bash\n\n    pre-commit -a -v\n\nReporting issues or bugs\n^^^^^^^^^^^^^^^^^^^^^^^^\nIf you find a bug in the code or want to request a new feature, please open an issue.\n\nGetting help\n^^^^^^^^^^^^\nFor help using PySINDy please consult the `documentation <https://pysindy.readthedocs.io/en/latest/>`__ and/or our `examples <https://github.com/dynamicslab/pysindy/tree/master/examples>`__, or create an issue.\n\nReferences\n----------------------\n-  de Silva, Brian M., Kathleen Champion, Markus Quade,\n   Jean-Christophe Loiseau, J. Nathan Kutz, and Steven L. Brunton.\n   *PySINDy: a Python package for the sparse identification of\n   nonlinear dynamics from data.* arXiv preprint arXiv:2004.08424 (2020)\n   `[arXiv] <https://arxiv.org/abs/2004.08424>`_\n\n-  Brunton, Steven L., Joshua L. Proctor, and J. Nathan Kutz.\n   *Discovering governing equations from data by sparse identification\n   of nonlinear dynamical systems.* Proceedings of the National\n   Academy of Sciences 113.15 (2016): 3932-3937.\n   `[DOI] <http://dx.doi.org/10.1073/pnas.1517384113>`__\n\n-  Champion, Kathleen, Peng Zheng, Aleksandr Y. Aravkin, Steven L.\n   Brunton, and J. Nathan Kutz. *A unified sparse optimization\n   framework to learn parsimonious physics-informed models from\n   data.* arXiv preprint arXiv:1906.10612 (2019).\n   `[arXiv] <https://arxiv.org/abs/1906.10612>`__\n\n-  Brunton, Steven L., Joshua L. Proctor, and J. Nathan Kutz.\n   *Sparse identification of nonlinear dynamics with control (SINDYc).*\n   IFAC-PapersOnLine 49.18 (2016): 710-715.\n   `[DOI] <https://doi.org/10.1016/j.ifacol.2016.10.249>`_\n\n\n.. |BuildCI| image:: https://github.com/dynamicslab/pysindy/workflows/Build%20CI/badge.svg\n    :target: https://github.com/dynamicslab/pysindy/actions?query=workflow%3A%22Build+CI%22\n\n.. |RTD| image:: https://readthedocs.org/projects/pysindy/badge/?version=latest\n    :target: https://pysindy.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. |PyPI| image:: https://badge.fury.io/py/pysindy.svg\n    :target: https://badge.fury.io/py/pysindy\n\n.. |Codecov| image:: https://codecov.io/gh/dynamicslab/pysindy/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/dynamicslab/pysindy\n\n.. |JOSS| image:: https://joss.theoj.org/papers/82d080bbe10ac3ab4bc03fa75f07d644/status.svg\n    :target: https://joss.theoj.org/papers/82d080bbe10ac3ab4bc03fa75f07d644\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dynamicslab/pysindy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pysindy", "package_url": "https://pypi.org/project/pysindy/", "platform": "", "project_url": "https://pypi.org/project/pysindy/", "project_urls": {"Homepage": "https://github.com/dynamicslab/pysindy"}, "release_url": "https://pypi.org/project/pysindy/0.15.3/", "requires_dist": ["scikit-learn[alldeps] (>=0.21)", "numpy", "scipy"], "requires_python": ">=3.6", "summary": "Sparse Identification of Nonlinear Dynamics", "version": "0.15.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/dynamicslab/pysindy/actions?query=workflow%3A%22Build+CI%22\" rel=\"nofollow\"><img alt=\"BuildCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8650c043265bb9fec8556ac885d361d181e115ba/68747470733a2f2f6769746875622e636f6d2f64796e616d6963736c61622f707973696e64792f776f726b666c6f77732f4275696c6425323043492f62616467652e737667\"></a> <a href=\"https://pysindy.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b76cf4b1ade429056104c42ad9f94cb0939c5d0b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707973696e64792f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://badge.fury.io/py/pysindy\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e728afb14fc7b37cbe01daa194ea961a5ac6d6c9/68747470733a2f2f62616467652e667572792e696f2f70792f707973696e64792e737667\"></a> <a href=\"https://codecov.io/gh/dynamicslab/pysindy\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08d7c1cf2037068d16dcaf6213612df2244186f7/68747470733a2f2f636f6465636f762e696f2f67682f64796e616d6963736c61622f707973696e64792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://joss.theoj.org/papers/82d080bbe10ac3ab4bc03fa75f07d644\" rel=\"nofollow\"><img alt=\"JOSS\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/771fb18cdcdfd270749db8ebb30e65890101ec46/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f38326430383062626531306163336162346263303366613735663037643634342f7374617475732e737667\"></a></p>\n<p><strong>PySINDy</strong> is a sparse regression package with several implementations for the Sparse Identification of Nonlinear Dynamical systems (SINDy) method introduced in Brunton et al. (2016a), including the unified optimization approach of Champion et al. (2019) and SINDy with control from Brunton et al. (2016b). A comprehensive literature review is given in de Silva et al. (2020).</p>\n<div id=\"system-identification\">\n<h2>System identification</h2>\n<p>System identification refers to the process of leveraging measurement data to infer governing equations, in the form of dynamical systems, describing the data. Once discovered, these equations can make predictions about future states, can inform control inputs, or can enable the theoretical study using analytical techniques.\nDynamical systems are a flexible, well-studied class of mathematical objects for modeling systems evolving in time.\nSINDy is a model discovery method which uses <em>sparse regression</em> to infer nonlinear dynamical systems from measurement data.\nThe resulting models are inherently <em>interpretable</em> and <em>generalizable</em>.</p>\n<div id=\"how-it-works\">\n<h3>How it works</h3>\n<p>Suppose, for some physical system of interest, we have measurements of state variables <tt>x(t)</tt> (a vector of length n) at different points in time. Examples of state variables include the position, velocity, or acceleration of objects; lift, drag, or angle of attack of aerodynamic objects; and concentrations of different chemical species. If we suspect that the system could be well-modeled by a dynamical system of the form</p>\n<pre>x'(t) = f(x(t)),\n</pre>\n<p>then we can use SINDy to learn <tt>f(x)</tt> from the data (<tt><span class=\"pre\">x'(t)</span></tt> denotes the time derivative of <tt>x(t)</tt>). Note that both <tt>f(x)</tt> and <tt>x(t)</tt> are typically vectors. The fundamental assumption SINDy employs is that each component of <tt>f(x)</tt>, <tt>f_i(x)</tt> can be represented as a <em>sparse</em> linear combination of basis functions <tt>theta_j(x)</tt></p>\n<pre>f_i(x) = theta_1(x) * xi_{1,i} + theta_2(x) * xi_{2,i} + ... + theta_k * xi{k,i}\n</pre>\n<p>Concatenating all the objects into matrices (denoted with capitalized names) helps to simplify things.\nTo this end we place all measurements of the state variables into a data matrix <tt>X</tt> (with a row per time measurement and a column per variable), the derivatives of the state variables into a matrix <tt>X'</tt>, all basis functions evaluated at all points in time into a matrix <tt>Theta(X)</tt> (each basis function gets a column), and all coefficients into a third matrix <tt>Xi</tt> (one column per state variable).\nThe approximation problem to be solved can then be compactly written as</p>\n<pre>X' = Theta(X) * Xi.\n</pre>\n<p>Each row of this matrix equation corresponds to one coordinate function of <tt>f(x)</tt>.\nSINDy employs sparse regression techniques to find a solution <tt>Xi</tt> with sparse column vectors.\nFor a more in-depth look at the mathematical foundations of SINDy, please see our <a href=\"https://pysindy.readthedocs.io/en/latest/examples/2_introduction_to_sindy.html\" rel=\"nofollow\">introduction to SINDy</a>.</p>\n</div>\n<div id=\"relation-to-pysindy\">\n<h3>Relation to PySINDy</h3>\n<p>The PySINDy class revolves around the <tt>SINDy</tt> class which consists of three primary components; one for each term in the above matrix approximation problem.</p>\n<ul>\n<li><tt>differentiation_method</tt>: computes <tt>X'</tt>, though if derivatives are known or measured directly, they can be used instead</li>\n<li><tt>feature_library</tt>: specifies the candidate basis functions to be used to construct <tt>Theta(X)</tt></li>\n<li><tt>optimizer</tt>: implements a sparse regression method for solving for <tt>Xi</tt></li>\n</ul>\n<p>Once a <tt>SINDy</tt> object has been created it must be fit to measurement data, similar to a <tt><span class=\"pre\">scikit-learn</span></tt> model. It can then be used to predict derivatives given new measurements, evolve novel initial conditions forward in time, and more. PySINDy has been written to be as compatible with <tt><span class=\"pre\">scikit-learn</span></tt> objects and methods as possible.</p>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Suppose we have measurements of the position of a particle obeying the following dynamical system at different points in time</p>\n<pre>x' = -2x\ny' = y\n</pre>\n<p>Note that this system of differential equations decouples into two differential equations whose solutions are simply <tt>x(t) = x_0 * <span class=\"pre\">exp(-2</span> * t)</tt> and <tt>y(t) = y_0 * exp(t)</tt>, where <tt>x_0 = x(0)</tt> and <tt>y_0 = y(0)</tt> are the initial conditions.</p>\n<p>Using the initial conditions <tt>x_0 = 3</tt> and <tt>y_0 = 0.5</tt>, we construct the data matrix <tt>X</tt>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pysindy</span> <span class=\"k\">as</span> <span class=\"nn\">ps</span>\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># First column is x, second is y</span>\n</pre>\n<p>To instantiate a <tt>SINDy</tt> object with the default differentiation method, feature library, and optimizer and then fit it to the data, we invoke</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"n\">SINDy</span><span class=\"p\">(</span><span class=\"n\">feature_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"x\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">])</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre>\n<p>We use the <tt>feature_names</tt> argument so that the model prints out the correct labels for <tt>x</tt> and <tt>y</tt>. We can inspect the governing equations discovered by the model and check whether they seem reasonable with the <tt>print</tt> function.</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">()</span>\n</pre>\n<p>which prints the following</p>\n<pre>x' = -2.000 x\ny' = 1.000 y\n</pre>\n<p>PySINDy provides numerous other features not shown here. We recommend the <a href=\"https://pysindy.readthedocs.io/en/latest/examples/1_feature_overview.html\" rel=\"nofollow\">feature overview</a> section of the documentation for a more exhaustive summary of additional features.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"installing-with-pip\">\n<h3>Installing with pip</h3>\n<p>If you are using Linux or macOS you can install PySINDy with pip:</p>\n<pre>pip install pysindy\n</pre>\n</div>\n<div id=\"installing-from-source\">\n<h3>Installing from source</h3>\n<p>First clone this repository:</p>\n<pre>git clone https://github.com/dynamicslab/pysindy\n</pre>\n<p>Then, to install the package, run</p>\n<pre>pip install .\n</pre>\n<p>If you do not have pip you can instead use</p>\n<pre>python setup.py install\n</pre>\n<p>If you do not have root access, you should add the <tt><span class=\"pre\">--user</span></tt> option to the above lines.</p>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The documentation site for PySINDy can be found <a href=\"https://pysindy.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>. There are numerous <a href=\"https://pysindy.readthedocs.io/en/latest/examples/index.html\" rel=\"nofollow\">examples</a> of PySINDy in action to help you get started. Examples are also available as <a href=\"https://github.com/dynamicslab/pysindy/tree/master/examples\" rel=\"nofollow\">Jupyter notebooks</a>.</p>\n</div>\n<div id=\"community-guidelines\">\n<h2>Community guidelines</h2>\n<div id=\"contributing-code\">\n<h3>Contributing code</h3>\n<p>We welcome contributions to PySINDy. To contribute a new feature please submit a pull request. To get started we recommend installing the packages in <tt><span class=\"pre\">requirements-dev.txt</span></tt> via</p>\n<pre>pip install -r requirements-dev.txt\n</pre>\n<p>This will allow you to run unit tests and automatically format your code. To be accepted your code should conform to PEP8 and pass all unit tests. Code can be tested by invoking</p>\n<pre>pytest\n</pre>\n<p>We recommed using <tt><span class=\"pre\">pre-commit</span></tt> to format your code. Once you have staged changes to commit</p>\n<pre>git add path/to/changed/file.py\n</pre>\n<p>you can run the following to automatically reformat your staged code</p>\n<pre>pre-commit -a -v\n</pre>\n</div>\n<div id=\"reporting-issues-or-bugs\">\n<h3>Reporting issues or bugs</h3>\n<p>If you find a bug in the code or want to request a new feature, please open an issue.</p>\n</div>\n<div id=\"getting-help\">\n<h3>Getting help</h3>\n<p>For help using PySINDy please consult the <a href=\"https://pysindy.readthedocs.io/en/latest/\" rel=\"nofollow\">documentation</a> and/or our <a href=\"https://github.com/dynamicslab/pysindy/tree/master/examples\" rel=\"nofollow\">examples</a>, or create an issue.</p>\n</div>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<ul>\n<li>de Silva, Brian M., Kathleen Champion, Markus Quade,\nJean-Christophe Loiseau, J. Nathan Kutz, and Steven L. Brunton.\n<em>PySINDy: a Python package for the sparse identification of\nnonlinear dynamics from data.</em> arXiv preprint arXiv:2004.08424 (2020)\n<a href=\"https://arxiv.org/abs/2004.08424\" rel=\"nofollow\">[arXiv]</a></li>\n<li>Brunton, Steven L., Joshua L. Proctor, and J. Nathan Kutz.\n<em>Discovering governing equations from data by sparse identification\nof nonlinear dynamical systems.</em> Proceedings of the National\nAcademy of Sciences 113.15 (2016): 3932-3937.\n<a href=\"http://dx.doi.org/10.1073/pnas.1517384113\" rel=\"nofollow\">[DOI]</a></li>\n<li>Champion, Kathleen, Peng Zheng, Aleksandr Y. Aravkin, Steven L.\nBrunton, and J. Nathan Kutz. <em>A unified sparse optimization\nframework to learn parsimonious physics-informed models from\ndata.</em> arXiv preprint arXiv:1906.10612 (2019).\n<a href=\"https://arxiv.org/abs/1906.10612\" rel=\"nofollow\">[arXiv]</a></li>\n<li>Brunton, Steven L., Joshua L. Proctor, and J. Nathan Kutz.\n<em>Sparse identification of nonlinear dynamics with control (SINDYc).</em>\nIFAC-PapersOnLine 49.18 (2016): 710-715.\n<a href=\"https://doi.org/10.1016/j.ifacol.2016.10.249\" rel=\"nofollow\">[DOI]</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7168462, "releases": {"0.1.dev0": [{"comment_text": "", "digests": {"md5": "f14f858a163e376f9f379748058e15c6", "sha256": "fbbfcbea376ec720fb6e02e5b12843fb595a76873feb36630ee0c845a49d732a"}, "downloads": -1, "filename": "PySINDy-0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "f14f858a163e376f9f379748058e15c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19593, "upload_time": "2018-12-11T07:18:48", "upload_time_iso_8601": "2018-12-11T07:18:48.576980Z", "url": "https://files.pythonhosted.org/packages/ae/09/fede944f7ebcca0cf51b8cdf446cfbf1109a6057817b98001a359df79da6/PySINDy-0.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f87e43ff884ebd2947787b0aae6a3a7", "sha256": "43b253a68bcc9332b8a44c3c13d4bee05c6458fa5db904195e5c161d053f3ad3"}, "downloads": -1, "filename": "PySINDy-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "5f87e43ff884ebd2947787b0aae6a3a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16428, "upload_time": "2018-12-11T07:18:50", "upload_time_iso_8601": "2018-12-11T07:18:50.548110Z", "url": "https://files.pythonhosted.org/packages/e7/82/dd20afde868fb3d48a3ef69ac8655049efc57acd720da0f93e302f477d99/PySINDy-0.1.dev0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "3cb44df06d392a473d6b52d148807e99", "sha256": "316c87c62e79bf2284389f02aa900c6ee59d5d4b335eb8f34f8f23520584704c"}, "downloads": -1, "filename": "pysindy-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3cb44df06d392a473d6b52d148807e99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29010, "upload_time": "2020-01-29T21:23:05", "upload_time_iso_8601": "2020-01-29T21:23:05.781304Z", "url": "https://files.pythonhosted.org/packages/1c/03/daeb1684cf7794887eacb07b2082ecc2924cef06e7396af9cd933d46dded/pysindy-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a763519bd5665966bf3607eda66b8461", "sha256": "a0547b1b1b55a9ae83832440d9b2ce44eb7e72eec54fa14b8f63d5c9108be401"}, "downloads": -1, "filename": "pysindy-0.11.0.tar.gz", "has_sig": false, "md5_digest": "a763519bd5665966bf3607eda66b8461", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2689663, "upload_time": "2020-01-29T21:23:07", "upload_time_iso_8601": "2020-01-29T21:23:07.179563Z", "url": "https://files.pythonhosted.org/packages/58/ae/58f60f26e216d0241f9e90c221ea49ed2406915dcadea3edbed975a23aaf/pysindy-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "4725944eefefd69741ec97069b3c7c8b", "sha256": "e5ba781a90666d1974947e4a0e28e00923d2825041503495ac8f1a44aad8d0bb"}, "downloads": -1, "filename": "pysindy-0.12.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4725944eefefd69741ec97069b3c7c8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32389, "upload_time": "2020-02-07T19:25:48", "upload_time_iso_8601": "2020-02-07T19:25:48.118788Z", "url": "https://files.pythonhosted.org/packages/8d/47/c00d46d3d3f669717bf369c11c6d7f7f12e4485447c6850428f512128a22/pysindy-0.12.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0b7e46a5253479db224efe5ec3b91ab", "sha256": "55522f55ffcd1b93ea9798bd24efd16fa9930ef0f17512975db2fd9bcb376465"}, "downloads": -1, "filename": "pysindy-0.12.0.tar.gz", "has_sig": false, "md5_digest": "c0b7e46a5253479db224efe5ec3b91ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2682971, "upload_time": "2020-02-07T19:25:49", "upload_time_iso_8601": "2020-02-07T19:25:49.233494Z", "url": "https://files.pythonhosted.org/packages/2e/2e/70cacef9cd2659ab7d3c4486d430cce78a8ef0094f2448ce8ff2b68862d9/pysindy-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "f264500a9b8066c75d8af32e5290bdb7", "sha256": "45355d590f1708afcff47c97131adc6843810c6772ce19dd7e226763fa09b215"}, "downloads": -1, "filename": "pysindy-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f264500a9b8066c75d8af32e5290bdb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30673, "upload_time": "2020-02-19T19:54:27", "upload_time_iso_8601": "2020-02-19T19:54:27.917481Z", "url": "https://files.pythonhosted.org/packages/3f/95/b75f5f8ecfe342c7931fec84a332dd39c0e5567c3b78fd069b3c2250c6df/pysindy-0.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "684fa71466dd700cdec620a4da198a38", "sha256": "e82270332b6da23e1a8d141695f53bb7d9508651655b4117d3b3d0855cac2f71"}, "downloads": -1, "filename": "pysindy-0.13.0.tar.gz", "has_sig": false, "md5_digest": "684fa71466dd700cdec620a4da198a38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2690376, "upload_time": "2020-02-19T19:54:29", "upload_time_iso_8601": "2020-02-19T19:54:29.103831Z", "url": "https://files.pythonhosted.org/packages/e0/60/6715813293a6de77fa7a017e0db6e59cfe3e0169aacded19909446b9f70f/pysindy-0.13.0.tar.gz", "yanked": false}], "0.14.1": [{"comment_text": "", "digests": {"md5": "1efa50233b7dc74022a37072ae116341", "sha256": "3343956a8e4f7ed84aad307aa83b206763f36295355c2a75a6e9d9e5d0ddb3e5"}, "downloads": -1, "filename": "pysindy-0.14.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1efa50233b7dc74022a37072ae116341", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 33074, "upload_time": "2020-04-11T00:49:01", "upload_time_iso_8601": "2020-04-11T00:49:01.536111Z", "url": "https://files.pythonhosted.org/packages/37/79/dfb38cdb2d0991b563cd43e2cc573db464ec99ef3086a28e4d5997c1afd9/pysindy-0.14.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d12923aa72b57ef2762d1f02f9fd360", "sha256": "7034526d106e3908837dcaf9456951207f35f2ed37b000f61d60572b540df9a4"}, "downloads": -1, "filename": "pysindy-0.14.1.tar.gz", "has_sig": false, "md5_digest": "1d12923aa72b57ef2762d1f02f9fd360", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2832280, "upload_time": "2020-04-11T00:49:03", "upload_time_iso_8601": "2020-04-11T00:49:03.098579Z", "url": "https://files.pythonhosted.org/packages/63/38/1cf5583a17b1c4767295f915ac5c9050f90ef31fca3536d80da9d13d7175/pysindy-0.14.1.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "a7e6d4eb4798168f93c39ffcfa66e0af", "sha256": "239b373a54af59bf43c772e98304742f3d57235294c6a5e3dfec3ba2812d3dd8"}, "downloads": -1, "filename": "pysindy-0.15.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a7e6d4eb4798168f93c39ffcfa66e0af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35632, "upload_time": "2020-05-02T00:47:40", "upload_time_iso_8601": "2020-05-02T00:47:40.415408Z", "url": "https://files.pythonhosted.org/packages/8d/93/5f1714ec08fa79c0e790a955df84b9f9c5c58ca4b7e664acc5e7dea82e91/pysindy-0.15.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f306eaf53b2c27ac00d1cbb6ade92c4e", "sha256": "fb6b125ca44265eb0a2859104b21767b43866d7c20f347e4e88225ff69e6f825"}, "downloads": -1, "filename": "pysindy-0.15.0.tar.gz", "has_sig": false, "md5_digest": "f306eaf53b2c27ac00d1cbb6ade92c4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2924743, "upload_time": "2020-05-02T00:47:41", "upload_time_iso_8601": "2020-05-02T00:47:41.525403Z", "url": "https://files.pythonhosted.org/packages/12/28/48dbe50cb59fef2186993e4f67e8a01995c6e4cd9132e2aa1b6a59cd7785/pysindy-0.15.0.tar.gz", "yanked": false}], "0.15.1": [{"comment_text": "", "digests": {"md5": "31ba0e9d82fde99a8ca348d547616025", "sha256": "d0fecc99a45347d39a67ee95cdc4a79cbcf28bb7467ecb3891ed3cbfb6e2ffb9"}, "downloads": -1, "filename": "pysindy-0.15.1-py3-none-any.whl", "has_sig": false, "md5_digest": "31ba0e9d82fde99a8ca348d547616025", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36183, "upload_time": "2020-05-04T21:13:02", "upload_time_iso_8601": "2020-05-04T21:13:02.398335Z", "url": "https://files.pythonhosted.org/packages/f0/17/cf5fd6ee825ecb58489e2d8b5e703449a09545133fbc0057aa76cb3dae7d/pysindy-0.15.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e35b5037dee331553fa9d3243a104e7", "sha256": "4d70172eb9f1146e9ef720ad2305f8271d855f306c359686cd612805db1f2619"}, "downloads": -1, "filename": "pysindy-0.15.1.tar.gz", "has_sig": false, "md5_digest": "7e35b5037dee331553fa9d3243a104e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2925608, "upload_time": "2020-05-04T21:13:03", "upload_time_iso_8601": "2020-05-04T21:13:03.696580Z", "url": "https://files.pythonhosted.org/packages/92/74/1da72c1246c54805b280e559a4f18d69afb1ade8ecf4f1d71fd8d46bd4cb/pysindy-0.15.1.tar.gz", "yanked": false}], "0.15.2": [{"comment_text": "", "digests": {"md5": "5fe9be286c7649c06bc92bc710e591ac", "sha256": "828b14ba4243ee101df845f86cf13158681220c359ca590883b8963b86901c76"}, "downloads": -1, "filename": "pysindy-0.15.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5fe9be286c7649c06bc92bc710e591ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36220, "upload_time": "2020-05-04T23:06:55", "upload_time_iso_8601": "2020-05-04T23:06:55.348448Z", "url": "https://files.pythonhosted.org/packages/5a/20/3529273c46f2f2ecdcac4929239729e1314cbb551bc0ced5a57e7ab29653/pysindy-0.15.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a773fd9ff79f7f1de79ed86603031462", "sha256": "6ddb0328c9997454e8ef4d5e5c7de689d0535297472f2ec9164c4f687854be12"}, "downloads": -1, "filename": "pysindy-0.15.2.tar.gz", "has_sig": false, "md5_digest": "a773fd9ff79f7f1de79ed86603031462", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2925690, "upload_time": "2020-05-04T23:06:56", "upload_time_iso_8601": "2020-05-04T23:06:56.875369Z", "url": "https://files.pythonhosted.org/packages/c8/af/74ff134db68b866bd26846f4676c1f19983a659caabfb589ad127642383f/pysindy-0.15.2.tar.gz", "yanked": false}], "0.15.3": [{"comment_text": "", "digests": {"md5": "8911ab51ac27a12482718141d73d71df", "sha256": "32c5a888f900c7767828daadd4207cbcd6937fa1994469abd2bafa60c025c2a7"}, "downloads": -1, "filename": "pysindy-0.15.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8911ab51ac27a12482718141d73d71df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36213, "upload_time": "2020-05-04T23:24:15", "upload_time_iso_8601": "2020-05-04T23:24:15.243109Z", "url": "https://files.pythonhosted.org/packages/58/73/420db465dc2efbda6704fd7017f251dd87e8b878a2e33588f17c1be774bc/pysindy-0.15.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d5d2cb198c8acb0e4387205864704d7", "sha256": "4ce8409b82d3fa309b0dc9d28faabb21c977f4d41eca76c750bff8ecd095ba9a"}, "downloads": -1, "filename": "pysindy-0.15.3.tar.gz", "has_sig": false, "md5_digest": "8d5d2cb198c8acb0e4387205864704d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2925681, "upload_time": "2020-05-04T23:24:16", "upload_time_iso_8601": "2020-05-04T23:24:16.389977Z", "url": "https://files.pythonhosted.org/packages/2a/a0/a5bd05de7dfdc8e74789a05c8efe8c2659fc5555b0eb06efe3c318bd56dc/pysindy-0.15.3.tar.gz", "yanked": false}], "0.2.dev0": [{"comment_text": "", "digests": {"md5": "0dc9a43b42bedda1bce34ffc9223db1f", "sha256": "266096b26a79bc8f2270d4eeee7363f734605ba02c06a8c68938d1427581eccb"}, "downloads": -1, "filename": "PySINDy-0.2.dev0.tar.gz", "has_sig": false, "md5_digest": "0dc9a43b42bedda1bce34ffc9223db1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14181, "upload_time": "2018-12-11T07:55:42", "upload_time_iso_8601": "2018-12-11T07:55:42.869357Z", "url": "https://files.pythonhosted.org/packages/c4/32/eb9b6c78105005a7062aa6b4bdc6e9340cd504997f9166eae194af07d6e0/PySINDy-0.2.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8911ab51ac27a12482718141d73d71df", "sha256": "32c5a888f900c7767828daadd4207cbcd6937fa1994469abd2bafa60c025c2a7"}, "downloads": -1, "filename": "pysindy-0.15.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8911ab51ac27a12482718141d73d71df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36213, "upload_time": "2020-05-04T23:24:15", "upload_time_iso_8601": "2020-05-04T23:24:15.243109Z", "url": "https://files.pythonhosted.org/packages/58/73/420db465dc2efbda6704fd7017f251dd87e8b878a2e33588f17c1be774bc/pysindy-0.15.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d5d2cb198c8acb0e4387205864704d7", "sha256": "4ce8409b82d3fa309b0dc9d28faabb21c977f4d41eca76c750bff8ecd095ba9a"}, "downloads": -1, "filename": "pysindy-0.15.3.tar.gz", "has_sig": false, "md5_digest": "8d5d2cb198c8acb0e4387205864704d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2925681, "upload_time": "2020-05-04T23:24:16", "upload_time_iso_8601": "2020-05-04T23:24:16.389977Z", "url": "https://files.pythonhosted.org/packages/2a/a0/a5bd05de7dfdc8e74789a05c8efe8c2659fc5555b0eb06efe3c318bd56dc/pysindy-0.15.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:41 2020"}