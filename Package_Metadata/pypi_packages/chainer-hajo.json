{"info": {"author": "Hajo Nils Krabbenh\u00f6ft", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "============\nChainer Hajo\n============\n\nChainer Hajo provides utility classes\nto be used with the excellent Chainer framework\nwhich are shared across projects here at hajo.me.\n\nIn particular, this package includes the following helpers:\n\n* ``WriteImage`` allows one to report image arrays\n   to the chainer reporting system as an observation\n   and to write those to disk as image files.\n   Enabled using optional parameters, ``WriteImage`` can also display\n   the image inside an IPython environment, such as Jupyter notebooks.\n   Together with ``SecondTrigger`` this allows to show the user\n   regular previews of the training progress\n   while the associated Jupyter notebook is running.\n\n* ``PrintNoLog`` will print a set of observations,\n   such as the current loss values, to the command line\n   without storing them into a file and/or serializing the history to JSON.\n   For projects with fast training iterations and large epochs,\n   this can greatly increase training speed by reducing disk IO.\n\n* ``SecondTrigger`` and ``MinuteTrigger`` are trigger objects\n   which will fire\n   independently of the number of iterations and epochs,\n   but at a fixed rate such as once per 30 seconds.\n   This is useful for providing continuous diagnostics\n   and performance output for long-running training sessions,\n   while keeping the evaluation overhead constant.\n   When using triggers that operate on the iteration or epoch,\n   then adjusting the number of items per training batch\n   would increase or reduce the duration per iteration,\n   thus making it necessary to adjust the trigger timings.\n   These triggers avoid such problems\n   by triggering based on the wall clock time.\n\n* ``LogHyperparameter`` is a trainer extension\n   which will copy the current value of a hyperparameter\n   over into an reporting observation.\n   This is useful for graphing or logging the training rate,\n   if modified with ``ExponentialShift`` or ``LinearShift``.\n\n* ``ClassifyModify`` and the associated ``ClassifyModifyChain``\n   will repeatedly modify the data array with ``x += conv_b(Elu(conv_a(x)))``\n   which has proven to be an excellent model for learn-able residuals\n   for video, image and sound data processing.\n   ``ClassifyModifySequence`` further generalizes this\n   by allowing the user to specify varying kernel size,\n   stride, padding, and dilation parameters for the different iterations.\n\n* ``SynthAndGate`` is a reusable generator Chain\n   which will convolve the input signal and then calculate\n   the sigmoid-gated sums of tanh generators.\n   Usually, the input signal is upsampled to multiple tanh channels\n   per output element, which allows this operator to use the gating\n   for choosing between different generators for each output plane.\n   This approach has proven to work well for many different\n   likelihood modeling tasks, e.g. generating the distribution\n   for a ``F.softmax_cross_entropy`` loss.\n   Optionally, the limiting by tanh can be disabled.\n   This has proven useful for modeling time-continuous image streams,\n   e.g. videos or continuous EEG signals.\n\n\n------------\nComing soon:\n------------\n\n* ``Discretizer`` and the accompanying ``discretize`` function\n   can be used to reduce continuous multi-direction vectors\n   to a limited number of discrete directions,\n   while optionally enforcing a given vector norm.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/chainer-hajo/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "chainer-hajo", "package_url": "https://pypi.org/project/chainer-hajo/", "platform": "", "project_url": "https://pypi.org/project/chainer-hajo/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/chainer-hajo/"}, "release_url": "https://pypi.org/project/chainer-hajo/0.3/", "requires_dist": null, "requires_python": "", "summary": "Shared utility classes for Chainer.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Chainer Hajo provides utility classes\nto be used with the excellent Chainer framework\nwhich are shared across projects here at hajo.me.</p>\n<p>In particular, this package includes the following helpers:</p>\n<ul>\n<li><dl>\n<dt><tt>WriteImage</tt> allows one to report image arrays</dt>\n<dd>to the chainer reporting system as an observation\nand to write those to disk as image files.\nEnabled using optional parameters, <tt>WriteImage</tt> can also display\nthe image inside an IPython environment, such as Jupyter notebooks.\nTogether with <tt>SecondTrigger</tt> this allows to show the user\nregular previews of the training progress\nwhile the associated Jupyter notebook is running.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>PrintNoLog</tt> will print a set of observations,</dt>\n<dd>such as the current loss values, to the command line\nwithout storing them into a file and/or serializing the history to JSON.\nFor projects with fast training iterations and large epochs,\nthis can greatly increase training speed by reducing disk IO.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>SecondTrigger</tt> and <tt>MinuteTrigger</tt> are trigger objects</dt>\n<dd>which will fire\nindependently of the number of iterations and epochs,\nbut at a fixed rate such as once per 30 seconds.\nThis is useful for providing continuous diagnostics\nand performance output for long-running training sessions,\nwhile keeping the evaluation overhead constant.\nWhen using triggers that operate on the iteration or epoch,\nthen adjusting the number of items per training batch\nwould increase or reduce the duration per iteration,\nthus making it necessary to adjust the trigger timings.\nThese triggers avoid such problems\nby triggering based on the wall clock time.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>LogHyperparameter</tt> is a trainer extension</dt>\n<dd>which will copy the current value of a hyperparameter\nover into an reporting observation.\nThis is useful for graphing or logging the training rate,\nif modified with <tt>ExponentialShift</tt> or <tt>LinearShift</tt>.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>ClassifyModify</tt> and the associated <tt>ClassifyModifyChain</tt></dt>\n<dd>will repeatedly modify the data array with <tt>x += <span class=\"pre\">conv_b(Elu(conv_a(x)))</span></tt>\nwhich has proven to be an excellent model for learn-able residuals\nfor video, image and sound data processing.\n<tt>ClassifyModifySequence</tt> further generalizes this\nby allowing the user to specify varying kernel size,\nstride, padding, and dilation parameters for the different iterations.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>SynthAndGate</tt> is a reusable generator Chain</dt>\n<dd>which will convolve the input signal and then calculate\nthe sigmoid-gated sums of tanh generators.\nUsually, the input signal is upsampled to multiple tanh channels\nper output element, which allows this operator to use the gating\nfor choosing between different generators for each output plane.\nThis approach has proven to work well for many different\nlikelihood modeling tasks, e.g. generating the distribution\nfor a <tt>F.softmax_cross_entropy</tt> loss.\nOptionally, the limiting by tanh can be disabled.\nThis has proven useful for modeling time-continuous image streams,\ne.g. videos or continuous EEG signals.</dd>\n</dl>\n</li>\n</ul>\n<div id=\"coming-soon\">\n<h2>Coming soon:</h2>\n<ul>\n<li><dl>\n<dt><tt>Discretizer</tt> and the accompanying <tt>discretize</tt> function</dt>\n<dd>can be used to reduce continuous multi-direction vectors\nto a limited number of discrete directions,\nwhile optionally enforcing a given vector norm.</dd>\n</dl>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4819999, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f8932a399e2f9926c2105fd941003f5c", "sha256": "da51409a8aec1c3ebe29d6097be0d88649a0808b11aaa7e7c6f75a7226617590"}, "downloads": -1, "filename": "chainer-hajo-0.1.tar.gz", "has_sig": false, "md5_digest": "f8932a399e2f9926c2105fd941003f5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4966, "upload_time": "2018-12-07T14:35:10", "upload_time_iso_8601": "2018-12-07T14:35:10.136484Z", "url": "https://files.pythonhosted.org/packages/7d/a4/517775a5837915aa5d869f11aeccf085bdcab4035eef52fdbcd2aed1994c/chainer-hajo-0.1.tar.gz", "yanked": false}], "0.1dev": [{"comment_text": "", "digests": {"md5": "accd62737843d82cf37b750167759c47", "sha256": "609439b5d0596a20486032bbf76fd962fe34ad46769b328459d80088f36a09d6"}, "downloads": -1, "filename": "chainer-hajo-0.1dev.tar.gz", "has_sig": false, "md5_digest": "accd62737843d82cf37b750167759c47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3188, "upload_time": "2018-12-07T14:02:22", "upload_time_iso_8601": "2018-12-07T14:02:22.556823Z", "url": "https://files.pythonhosted.org/packages/56/bf/6a8cb521ee2ad058eacc6f80ef553aafc52c804de3abf2f6eaf2badf1b09/chainer-hajo-0.1dev.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f66017755aa7a573fe512a0b075f70f8", "sha256": "92eef0638c1bdedf115e577ceb819ef85bab5cdd36d44c8352f9af86208f269c"}, "downloads": -1, "filename": "chainer-hajo-0.2.tar.gz", "has_sig": false, "md5_digest": "f66017755aa7a573fe512a0b075f70f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5072, "upload_time": "2018-12-07T16:18:48", "upload_time_iso_8601": "2018-12-07T16:18:48.089749Z", "url": "https://files.pythonhosted.org/packages/94/ad/f09e87ecfa938c37ed57f05536521571e4798a8d2f7ed2ac1fb8e4208752/chainer-hajo-0.2.tar.gz", "yanked": false}], "0.2dev": [{"comment_text": "", "digests": {"md5": "6dd0d54d18d9c6859eab3310c51c1741", "sha256": "d55df79b0486ffdf3462b263927393818a796235c5b948ff381aba7be0a15609"}, "downloads": -1, "filename": "chainer-hajo-0.2dev.tar.gz", "has_sig": false, "md5_digest": "6dd0d54d18d9c6859eab3310c51c1741", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4979, "upload_time": "2018-12-07T14:38:44", "upload_time_iso_8601": "2018-12-07T14:38:44.255914Z", "url": "https://files.pythonhosted.org/packages/8e/50/f59db5a016896e1231aff14cbce08fb0d765e819a17ef7ec868b247bffff/chainer-hajo-0.2dev.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "f75828ee7cc569f73e9e18a11406819f", "sha256": "54b04f1db582a6615342fcb01f2e5d6131dcd28a383ff84222dc5e04eaae7405"}, "downloads": -1, "filename": "chainer-hajo-0.3.tar.gz", "has_sig": false, "md5_digest": "f75828ee7cc569f73e9e18a11406819f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5115, "upload_time": "2019-02-14T11:56:48", "upload_time_iso_8601": "2019-02-14T11:56:48.280293Z", "url": "https://files.pythonhosted.org/packages/32/a0/fd659fb6e104033dc65b258c5d172c4398d1ecf25305f6905f8d237f055e/chainer-hajo-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f75828ee7cc569f73e9e18a11406819f", "sha256": "54b04f1db582a6615342fcb01f2e5d6131dcd28a383ff84222dc5e04eaae7405"}, "downloads": -1, "filename": "chainer-hajo-0.3.tar.gz", "has_sig": false, "md5_digest": "f75828ee7cc569f73e9e18a11406819f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5115, "upload_time": "2019-02-14T11:56:48", "upload_time_iso_8601": "2019-02-14T11:56:48.280293Z", "url": "https://files.pythonhosted.org/packages/32/a0/fd659fb6e104033dc65b258c5d172c4398d1ecf25305f6905f8d237f055e/chainer-hajo-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:32 2020"}