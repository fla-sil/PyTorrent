{"info": {"author": "Aaron Fraenkel, Darren Liu", "author_email": "afraenkel@ucsd.edu", "bugtrack_url": null, "classifiers": [], "description": "# babypandas\n\nA `pandas` data-analysis library with a restricted API\n\n[![Build Status](https://travis-ci.com/afraenkel/babypandas.svg?branch=master)](https://travis-ci.com/afraenkel/babypandas)\n[![Documentation Status](https://readthedocs.org/projects/babypandas/badge/?version=latest)](https://babypandas.readthedocs.io/en/latest/?badge=latest)\n\n---\n\nThe `pandas` library is a confusing mess of methods, and for every\ntask, no matter how simple, there are multiple ways of approaching\nit. `babypandas` is a simplified, introductory `pandas` library that\n allows for basic tabular data-analysis with only a small subset of\n methods and arguments. This allows for a smooth transition into `pandas`.\n \n The chosen methods are meant to align with the methods in Berkeley's\n `datascience` module, developed for the [data8](https://data8.org)\n course. However, unlike the `datascience` module, all code written in\n `babypandas` is also valid `pandas` code.\n  \n---\n\n## Install\n\nTo install `babypandas`, use `pip`:\n```\npip install babypandas\n```\n\n---\n\n## Documentation\n\nSee the [documentation](https://babypandas.readthedocs.io) page.\n\n---\n\n## FAQ\n\n*Who is this library for?*\n\nThis library is intended for those wanting an introduction to data\n science in python, but want a focused, introduction much like what's\n covered in Berkeley's data8 course. The pandas methods available in\n this library encourage better Pandas usage through functional\n programming  patterns and method chaining.\n  \n*Why not just use the datascience module?*\n\nThis library may be prefered over `datascience` when students\n will be moving to `pandas`. While this library serves as a restricted\n introduction to `pandas`, it doesn't shy away from some `pandas`\n usage patterns that may require care for new programmers:\n * The frequent use of named function arguments,\n * The use of boolean arrays (masks) to select rows,\n * The use of table indices.\n\n*How does this library compare to the datascience module?*\n\nBerkeley `datascience` module equivalents with `babypandas`:\n\n| `datascience` method               \t\t  | `babypandas` equivalent or close                           | method description                        |\n|---------------------------------------------|------------------------------------------------------------|-------------------------------------------|\n| `Table()`                            \t\t  | `bpd.DataFrame()`                                          | empty table formation                     |\n| `Table().with_columns(*labels_and_values)`  | `bpd.DataFrame().assign(**kwargs)`                         | table from lists                          |\n| `table.with_columns(*labels_and_values)`    | `df.assign(**kwargs)`                                      | adding columns                            |\n| `table.with_rows(rows)`                     | `df.append(other_df, ignore_index=True)`                   |                                           |\n| `Table.read_table(filepath)`                | `bpd.read_csv(filepath)`                                   | read in data                              |\n| `table.num_columns`                         | `df.shape[1]`                                              | number of columns                         |\n| `table.num_rows`                    \t\t  | `df.shape[0]`                                              | number of rows                            |\n| `table.labels`                      \t\t  | `df.columns`                                               | list of columns                           |\n| `table.relabeled(label, new_label)` \t\t  | `df.assign(new_label=df.get(label)).drop(columns=[label])` | rename columns                            |\n| `table.column(col)`                 \t\t  | `df.get(col)`                                     \t\t   | get a specific column (by name)           |\n| `table.column(col).item(0)`         \t\t  | `df.get(col).iloc[0]`                                      | get a specific value in the table         |\n| `table.select(col1, col2)`          \t      | `df.get([col1, col2])`                                     | get columns as a df                       |\n| `table.drop(col1, col2)`            \t\t  | `df.drop(columns=[col1, col2])`                            | drop columns                              |\n| `table.sort(col)`                  \t\t  | `df.sort_values(by=col)`                                   | sorts values in a dataframe by col        |\n| `table.take(row_indices_or_slice)`          | `df.take(row_indices_or_slice)`                            | selects a single row                      |\n| `table.where(col, are.above(num))`   \t\t  | `df.loc[df.get(col) > num]`                                | selects rows based on condition           |\n| `table.scatter(xcol, ycol)`                 | `df.plot(kind='scatter', x=xcol, y=ycol)`                  | plots a scatter plot                      |\n| `table.plot(xcol, ycol)`                    | `df.plot(x=xcol, y=ycol)`                                  | plots a line plot                         |\n| `table.barh(col)`                           | `df.plot(kind='barh', x=col)`                              | plots a horizontal bar plot               |\n| `table.hist(col, bins)`                     | `df.get(col).plot(kind='hist', bins=bins)`                 | plots a histogram                         |\n| `table.apply(fn, col)`                      | `df.get(col).apply(fn)`                                    | apply function to a column                |\n| `table.group(col)`                   \t\t  | `df.groupby(col).count()`                                  | give counts of values in a col            |\n| `table.group(col, agg_fn)`           \t\t  | `df.groupby(col).agg_fn.reset_index()`                     | groups by column, aggregates with fn      |\n| `table.group([col1, col2])`          \t\t  | `df.groupby([col1, col2]).count().reset_index()`           | groups by two cols, agg with counts       |\n| `table.group([col1, col2], sum)`     \t\t  | `df.groupby[col1, col2]).sum().reset_index()`              | groups by two cols, agg with sum          |\n| `table.join(leftcol, df2, rightcol)` \t\t  | `df.merge(df2, left_on=leftcol, right_on=rightcol)`        | merges two dataframes (diff col names)    |\n| `table.join(col, df2, col)`          \t\t  | `df.merge(df2, on=col)`                                    | merges two dataframes (same col names)    |\n| `table.sample(n)`                    \t\t  | `df.sample(n, replace=True)`                               | sample with replacement                   |\n| `sample_proportions(size, distr)`    \t\t  | `np.random.multinomial(size, distr) / size`                | gets sample proportions of a distribution |", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/afraenkel/babypandas", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "babypandas", "package_url": "https://pypi.org/project/babypandas/", "platform": "", "project_url": "https://pypi.org/project/babypandas/", "project_urls": {"Homepage": "https://github.com/afraenkel/babypandas"}, "release_url": "https://pypi.org/project/babypandas/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "A restricted Pandas API", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>babypandas</h1>\n<p>A <code>pandas</code> data-analysis library with a restricted API</p>\n<p><a href=\"https://travis-ci.com/afraenkel/babypandas\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d79b648225979cd565476d07b857d65539a8d8d1/68747470733a2f2f7472617669732d63692e636f6d2f61667261656e6b656c2f6261627970616e6461732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://babypandas.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0f0bfbfbf8a179f348cc4fa57eb49f10884a59c/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6261627970616e6461732f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<hr>\n<p>The <code>pandas</code> library is a confusing mess of methods, and for every\ntask, no matter how simple, there are multiple ways of approaching\nit. <code>babypandas</code> is a simplified, introductory <code>pandas</code> library that\nallows for basic tabular data-analysis with only a small subset of\nmethods and arguments. This allows for a smooth transition into <code>pandas</code>.</p>\n<p>The chosen methods are meant to align with the methods in Berkeley's\n<code>datascience</code> module, developed for the <a href=\"https://data8.org\" rel=\"nofollow\">data8</a>\ncourse. However, unlike the <code>datascience</code> module, all code written in\n<code>babypandas</code> is also valid <code>pandas</code> code.</p>\n<hr>\n<h2>Install</h2>\n<p>To install <code>babypandas</code>, use <code>pip</code>:</p>\n<pre><code>pip install babypandas\n</code></pre>\n<hr>\n<h2>Documentation</h2>\n<p>See the <a href=\"https://babypandas.readthedocs.io\" rel=\"nofollow\">documentation</a> page.</p>\n<hr>\n<h2>FAQ</h2>\n<p><em>Who is this library for?</em></p>\n<p>This library is intended for those wanting an introduction to data\nscience in python, but want a focused, introduction much like what's\ncovered in Berkeley's data8 course. The pandas methods available in\nthis library encourage better Pandas usage through functional\nprogramming  patterns and method chaining.</p>\n<p><em>Why not just use the datascience module?</em></p>\n<p>This library may be prefered over <code>datascience</code> when students\nwill be moving to <code>pandas</code>. While this library serves as a restricted\nintroduction to <code>pandas</code>, it doesn't shy away from some <code>pandas</code>\nusage patterns that may require care for new programmers:</p>\n<ul>\n<li>The frequent use of named function arguments,</li>\n<li>The use of boolean arrays (masks) to select rows,</li>\n<li>The use of table indices.</li>\n</ul>\n<p><em>How does this library compare to the datascience module?</em></p>\n<p>Berkeley <code>datascience</code> module equivalents with <code>babypandas</code>:</p>\n<table>\n<thead>\n<tr>\n<th><code>datascience</code> method</th>\n<th><code>babypandas</code> equivalent or close</th>\n<th>method description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Table()</code></td>\n<td><code>bpd.DataFrame()</code></td>\n<td>empty table formation</td>\n</tr>\n<tr>\n<td><code>Table().with_columns(*labels_and_values)</code></td>\n<td><code>bpd.DataFrame().assign(**kwargs)</code></td>\n<td>table from lists</td>\n</tr>\n<tr>\n<td><code>table.with_columns(*labels_and_values)</code></td>\n<td><code>df.assign(**kwargs)</code></td>\n<td>adding columns</td>\n</tr>\n<tr>\n<td><code>table.with_rows(rows)</code></td>\n<td><code>df.append(other_df, ignore_index=True)</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>Table.read_table(filepath)</code></td>\n<td><code>bpd.read_csv(filepath)</code></td>\n<td>read in data</td>\n</tr>\n<tr>\n<td><code>table.num_columns</code></td>\n<td><code>df.shape[1]</code></td>\n<td>number of columns</td>\n</tr>\n<tr>\n<td><code>table.num_rows</code></td>\n<td><code>df.shape[0]</code></td>\n<td>number of rows</td>\n</tr>\n<tr>\n<td><code>table.labels</code></td>\n<td><code>df.columns</code></td>\n<td>list of columns</td>\n</tr>\n<tr>\n<td><code>table.relabeled(label, new_label)</code></td>\n<td><code>df.assign(new_label=df.get(label)).drop(columns=[label])</code></td>\n<td>rename columns</td>\n</tr>\n<tr>\n<td><code>table.column(col)</code></td>\n<td><code>df.get(col)</code></td>\n<td>get a specific column (by name)</td>\n</tr>\n<tr>\n<td><code>table.column(col).item(0)</code></td>\n<td><code>df.get(col).iloc[0]</code></td>\n<td>get a specific value in the table</td>\n</tr>\n<tr>\n<td><code>table.select(col1, col2)</code></td>\n<td><code>df.get([col1, col2])</code></td>\n<td>get columns as a df</td>\n</tr>\n<tr>\n<td><code>table.drop(col1, col2)</code></td>\n<td><code>df.drop(columns=[col1, col2])</code></td>\n<td>drop columns</td>\n</tr>\n<tr>\n<td><code>table.sort(col)</code></td>\n<td><code>df.sort_values(by=col)</code></td>\n<td>sorts values in a dataframe by col</td>\n</tr>\n<tr>\n<td><code>table.take(row_indices_or_slice)</code></td>\n<td><code>df.take(row_indices_or_slice)</code></td>\n<td>selects a single row</td>\n</tr>\n<tr>\n<td><code>table.where(col, are.above(num))</code></td>\n<td><code>df.loc[df.get(col) &gt; num]</code></td>\n<td>selects rows based on condition</td>\n</tr>\n<tr>\n<td><code>table.scatter(xcol, ycol)</code></td>\n<td><code>df.plot(kind='scatter', x=xcol, y=ycol)</code></td>\n<td>plots a scatter plot</td>\n</tr>\n<tr>\n<td><code>table.plot(xcol, ycol)</code></td>\n<td><code>df.plot(x=xcol, y=ycol)</code></td>\n<td>plots a line plot</td>\n</tr>\n<tr>\n<td><code>table.barh(col)</code></td>\n<td><code>df.plot(kind='barh', x=col)</code></td>\n<td>plots a horizontal bar plot</td>\n</tr>\n<tr>\n<td><code>table.hist(col, bins)</code></td>\n<td><code>df.get(col).plot(kind='hist', bins=bins)</code></td>\n<td>plots a histogram</td>\n</tr>\n<tr>\n<td><code>table.apply(fn, col)</code></td>\n<td><code>df.get(col).apply(fn)</code></td>\n<td>apply function to a column</td>\n</tr>\n<tr>\n<td><code>table.group(col)</code></td>\n<td><code>df.groupby(col).count()</code></td>\n<td>give counts of values in a col</td>\n</tr>\n<tr>\n<td><code>table.group(col, agg_fn)</code></td>\n<td><code>df.groupby(col).agg_fn.reset_index()</code></td>\n<td>groups by column, aggregates with fn</td>\n</tr>\n<tr>\n<td><code>table.group([col1, col2])</code></td>\n<td><code>df.groupby([col1, col2]).count().reset_index()</code></td>\n<td>groups by two cols, agg with counts</td>\n</tr>\n<tr>\n<td><code>table.group([col1, col2], sum)</code></td>\n<td><code>df.groupby[col1, col2]).sum().reset_index()</code></td>\n<td>groups by two cols, agg with sum</td>\n</tr>\n<tr>\n<td><code>table.join(leftcol, df2, rightcol)</code></td>\n<td><code>df.merge(df2, left_on=leftcol, right_on=rightcol)</code></td>\n<td>merges two dataframes (diff col names)</td>\n</tr>\n<tr>\n<td><code>table.join(col, df2, col)</code></td>\n<td><code>df.merge(df2, on=col)</code></td>\n<td>merges two dataframes (same col names)</td>\n</tr>\n<tr>\n<td><code>table.sample(n)</code></td>\n<td><code>df.sample(n, replace=True)</code></td>\n<td>sample with replacement</td>\n</tr>\n<tr>\n<td><code>sample_proportions(size, distr)</code></td>\n<td><code>np.random.multinomial(size, distr) / size</code></td>\n<td>gets sample proportions of a distribution</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6924155, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a4e7ab02490b9d6d110c4696cc8d8275", "sha256": "ef1d208c24c961a8a96e86522804d025519b99c76ad4f3f53dfc5835926c2c66"}, "downloads": -1, "filename": "babypandas-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a4e7ab02490b9d6d110c4696cc8d8275", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8987, "upload_time": "2019-09-26T20:17:43", "upload_time_iso_8601": "2019-09-26T20:17:43.333777Z", "url": "https://files.pythonhosted.org/packages/a2/ff/e3e7f6e51877a4880fe31924d992827e0a29e181a7f285370097a0d1003d/babypandas-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2a78fd11e551c3dcb0b1dbace67a488b", "sha256": "6e524af614b546db2cf26445f70c7ca5cdbde05726d444b85c14de9cf5cd9899"}, "downloads": -1, "filename": "babypandas-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2a78fd11e551c3dcb0b1dbace67a488b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10376, "upload_time": "2019-09-26T20:26:51", "upload_time_iso_8601": "2019-09-26T20:26:51.215276Z", "url": "https://files.pythonhosted.org/packages/05/81/b2b4876428034409b28b1e372d932a74151593ef84d7cf38063a539ad9e2/babypandas-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "88c3ea7df19e654aca990e0a66e45bad", "sha256": "763d7c5d6ea556b48e8778f2e43fd9b36259da2249f42997b29c25835568efcb"}, "downloads": -1, "filename": "babypandas-0.1.2.tar.gz", "has_sig": false, "md5_digest": "88c3ea7df19e654aca990e0a66e45bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14007, "upload_time": "2019-12-12T06:38:47", "upload_time_iso_8601": "2019-12-12T06:38:47.877687Z", "url": "https://files.pythonhosted.org/packages/ee/8f/56e51f7ddac97676d9fd1740fc11937cc6438ec1a7e405762853e69ec965/babypandas-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b078cd99bf329b54e47df915d5c9342d", "sha256": "68221d93dab795d33cd362e615961b5b3bf695e1f3d84a4c37f644222af2a725"}, "downloads": -1, "filename": "babypandas-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b078cd99bf329b54e47df915d5c9342d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14109, "upload_time": "2019-12-12T06:46:35", "upload_time_iso_8601": "2019-12-12T06:46:35.051702Z", "url": "https://files.pythonhosted.org/packages/37/53/20a61ca4ea80a92401a2fb820533f44ab69d025054a579b9c21d71b2a47b/babypandas-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "3c554f2cec9562487d26989bf1ff264f", "sha256": "b2b16da653dd5f852cf1592f28ca73e9bf068530e116d223dd929282613609c2"}, "downloads": -1, "filename": "babypandas-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3c554f2cec9562487d26989bf1ff264f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14664, "upload_time": "2019-12-31T18:43:25", "upload_time_iso_8601": "2019-12-31T18:43:25.333011Z", "url": "https://files.pythonhosted.org/packages/ba/19/4a71051c91a318022b9f4f3d9bc613bc9b77682089aadb3ddad74e37d483/babypandas-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "affc17b215059dd8ec6ee03ffd0e5bb4", "sha256": "694bdd39323f0fac2e4031e41c44998ebe4c9e1b1d2bcba749bd04e900525074"}, "downloads": -1, "filename": "babypandas-0.1.5.tar.gz", "has_sig": false, "md5_digest": "affc17b215059dd8ec6ee03ffd0e5bb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14655, "upload_time": "2020-01-13T00:51:32", "upload_time_iso_8601": "2020-01-13T00:51:32.251601Z", "url": "https://files.pythonhosted.org/packages/ab/ad/a16a2908854facae4c7c66256af6fb2f819170c06fd293356a5e2c69d45c/babypandas-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "62617cc0b3de32230ca315adbd4b5509", "sha256": "13cdd36034b6cfb6eed2fab1fe823fa65cec57876984d1181a76f965261a5e99"}, "downloads": -1, "filename": "babypandas-0.1.6.tar.gz", "has_sig": false, "md5_digest": "62617cc0b3de32230ca315adbd4b5509", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15064, "upload_time": "2020-03-31T23:09:56", "upload_time_iso_8601": "2020-03-31T23:09:56.772864Z", "url": "https://files.pythonhosted.org/packages/3c/ee/00b7cdd3b76efae64497c747369c93ef578679583dd8ddabfea8eb048631/babypandas-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "62617cc0b3de32230ca315adbd4b5509", "sha256": "13cdd36034b6cfb6eed2fab1fe823fa65cec57876984d1181a76f965261a5e99"}, "downloads": -1, "filename": "babypandas-0.1.6.tar.gz", "has_sig": false, "md5_digest": "62617cc0b3de32230ca315adbd4b5509", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15064, "upload_time": "2020-03-31T23:09:56", "upload_time_iso_8601": "2020-03-31T23:09:56.772864Z", "url": "https://files.pythonhosted.org/packages/3c/ee/00b7cdd3b76efae64497c747369c93ef578679583dd8ddabfea8eb048631/babypandas-0.1.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:10 2020"}