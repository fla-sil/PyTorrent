{"info": {"author": "Zeo Choy", "author_email": "zeochoy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Medical Science Apps."], "description": "ReSim: chemoREsistance SIMulator\n================================\nReSim (chemoREsistance SIMulator) is a python package that simulates cancer\nchemoresistance dynamics based on a stochastic model. The model describes the\ninteraction between chemotherapeutics and various cancer cell subpopulations\n(including sensitive, primary resistant, acquired resistant and quiescent\ncancer cells).\n\nReSim provides both GUI (powered by `Flask <http://flask.pocoo.org>`) and CUI.\n\n**Remarks**: Simulation result is greatly depended on input params, therefore\nReSim is intended to use in parallel with *in vitro* assay. Procedures or\ndetails in identifying input params *in vitro* is out of scope here and will be\ndocumented in elsewhere (hope to get it publish soon).\n\nDependencies\n____________\n* flask\n* Flask-WTF\n* numpy\n* scipy\n* pandas\n* matplotlib\n* seaborn\n* plotly\n* sdeint\n\nInstallation\n------------\nWe **strongly** recommend everyone to install resim within a virtual\nenvironment. Setup the venv as usual and run ::\n\n  $ pip install resim\n\nOtherwise, install it locally.\n\nGetting Start - GUI\n-------------------\nOpen your command prompt, simply run ::\n\n  $ resim-flask\n\nReSim is now available at http://localhost:5000/resim .\n\n**Note** GUI provides a simplified & handy version of resim with interactive\nplotly plots. Please use CUI if you need more control of input params.\n\nAdvanced Usage\n--------------\nUsing defaults params (calibrated from the case of sorafenib and liver cancer)::\n\n  >>> import resim\n\n  >>> model = resim.Simulator()\n  >>> res = model.simulate()\n\n  >>> snsplt_cells = resim.plot_cells(res, subplot=True)\n  >>> snsplt_drug = resim.plot_drug(res)\n  >>> snsplt_fht = resim.plot_fht(res)\n\n  >>> snsplt_cells.figure.savefig('resim_cells.png')\n  >>> snsplt_drug.figure.savefig('resim_drug.png')\n  >>> snsplt_fht.figure.savefig('resim_fht.png')\n\nYou may set your own params. For examples, input the growth rate of sensitive cells and resistant cells determined *in vitro*::\n\n  >>> import resim\n\n  >>> model = resim.Simulator(gr=[0.2, 0.1, 0.1])\n  >>> res = model.simulate()\n\n`model.simulate()` returns a dict of dictionary containing `pd.DataFrame` or\n`np.array`. To extract the result,::\n\n  >>>  df_cells = res['case']['cells']\n  >>>  df_drugs = res['case']['drugs']\n\n  >>> l_fht_control = res['control']['fht'])\n  >>> l_fht_treatment = res['case']['fht'])\n\n**Notes** GUI outputs are generated by `Plotly <https://plot.ly/>`. But both\n`plot_cells`, `plot_drug` and `plot_fht` in CUI return `seaborn\n<https://seaborn.pydata.org/>` plot object. You may customize your own theme,\ntitle, layout.\n\nDocumentation\n-------------\nAvailable at https://resim.readthedocs.io/.\n\nTODO\n----\n* Add class methods for conventional first-line/second-line chemos in HCC, PC.\n* Add tool for converting tumor's diameter/volume to number of cells.\n* Add tool for converting doubling time to growth rate.\n* Add tool for converting half-life to k.\n* Add command line module.\n* Integrate parallel programming sde solver module `nsim\n  <https://github.com/mattja/nsim>` to speed up the computation.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/zeochoy/resim", "keywords": "chemoresistance cancer outcome simulations modeling", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "resim", "package_url": "https://pypi.org/project/resim/", "platform": "", "project_url": "https://pypi.org/project/resim/", "project_urls": {"Homepage": "http://github.com/zeochoy/resim"}, "release_url": "https://pypi.org/project/resim/0.1.1/", "requires_dist": ["Flask-WTF", "flask", "matplotlib", "numpy", "pandas", "plotly", "scipy", "sdeint", "seaborn"], "requires_python": "", "summary": "chemoREsistance SIMulator", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>ReSim (chemoREsistance SIMulator) is a python package that simulates cancer\nchemoresistance dynamics based on a stochastic model. The model describes the\ninteraction between chemotherapeutics and various cancer cell subpopulations\n(including sensitive, primary resistant, acquired resistant and quiescent\ncancer cells).</p>\n<p>ReSim provides both GUI (powered by <cite>Flask &lt;http://flask.pocoo.org&gt;</cite>) and CUI.</p>\n<p><strong>Remarks</strong>: Simulation result is greatly depended on input params, therefore\nReSim is intended to use in parallel with <em>in vitro</em> assay. Procedures or\ndetails in identifying input params <em>in vitro</em> is out of scope here and will be\ndocumented in elsewhere (hope to get it publish soon).</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>flask</li>\n<li>Flask-WTF</li>\n<li>numpy</li>\n<li>scipy</li>\n<li>pandas</li>\n<li>matplotlib</li>\n<li>seaborn</li>\n<li>plotly</li>\n<li>sdeint</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>We <strong>strongly</strong> recommend everyone to install resim within a virtual\nenvironment. Setup the venv as usual and run</p>\n<pre>$ pip install resim\n</pre>\n<p>Otherwise, install it locally.</p>\n</div>\n<div id=\"getting-start-gui\">\n<h3>Getting Start - GUI</h3>\n<p>Open your command prompt, simply run</p>\n<pre>$ resim-flask\n</pre>\n<p>ReSim is now available at <a href=\"http://localhost:5000/resim\" rel=\"nofollow\">http://localhost:5000/resim</a> .</p>\n<p><strong>Note</strong> GUI provides a simplified &amp; handy version of resim with interactive\nplotly plots. Please use CUI if you need more control of input params.</p>\n</div>\n<div id=\"advanced-usage\">\n<h3>Advanced Usage</h3>\n<p>Using defaults params (calibrated from the case of sorafenib and liver cancer):</p>\n<pre>&gt;&gt;&gt; import resim\n\n&gt;&gt;&gt; model = resim.Simulator()\n&gt;&gt;&gt; res = model.simulate()\n\n&gt;&gt;&gt; snsplt_cells = resim.plot_cells(res, subplot=True)\n&gt;&gt;&gt; snsplt_drug = resim.plot_drug(res)\n&gt;&gt;&gt; snsplt_fht = resim.plot_fht(res)\n\n&gt;&gt;&gt; snsplt_cells.figure.savefig('resim_cells.png')\n&gt;&gt;&gt; snsplt_drug.figure.savefig('resim_drug.png')\n&gt;&gt;&gt; snsplt_fht.figure.savefig('resim_fht.png')\n</pre>\n<p>You may set your own params. For examples, input the growth rate of sensitive cells and resistant cells determined <em>in vitro</em>:</p>\n<pre>&gt;&gt;&gt; import resim\n\n&gt;&gt;&gt; model = resim.Simulator(gr=[0.2, 0.1, 0.1])\n&gt;&gt;&gt; res = model.simulate()\n</pre>\n<p><cite>model.simulate()</cite> returns a dict of dictionary containing <cite>pd.DataFrame</cite> or\n<cite>np.array</cite>. To extract the result,:</p>\n<pre>&gt;&gt;&gt;  df_cells = res['case']['cells']\n&gt;&gt;&gt;  df_drugs = res['case']['drugs']\n\n&gt;&gt;&gt; l_fht_control = res['control']['fht'])\n&gt;&gt;&gt; l_fht_treatment = res['case']['fht'])\n</pre>\n<p><strong>Notes</strong> GUI outputs are generated by <cite>Plotly &lt;https://plot.ly/&gt;</cite>. But both\n<cite>plot_cells</cite>, <cite>plot_drug</cite> and <cite>plot_fht</cite> in CUI return <cite>seaborn\n&lt;https://seaborn.pydata.org/&gt;</cite> plot object. You may customize your own theme,\ntitle, layout.</p>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>Available at <a href=\"https://resim.readthedocs.io/\" rel=\"nofollow\">https://resim.readthedocs.io/</a>.</p>\n</div>\n<div id=\"todo\">\n<h3>TODO</h3>\n<ul>\n<li>Add class methods for conventional first-line/second-line chemos in HCC, PC.</li>\n<li>Add tool for converting tumor\u2019s diameter/volume to number of cells.</li>\n<li>Add tool for converting doubling time to growth rate.</li>\n<li>Add tool for converting half-life to k.</li>\n<li>Add command line module.</li>\n<li>Integrate parallel programming sde solver module <cite>nsim\n&lt;https://github.com/mattja/nsim&gt;</cite> to speed up the computation.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3487350, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "41ae123eb75737395bd7de1ac60b6c20", "sha256": "e36c679d1e0d6cf4ec2ddf9695eb3d59b14ef71a3255c2800f70406fda5f0a19"}, "downloads": -1, "filename": "resim-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "41ae123eb75737395bd7de1ac60b6c20", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22056, "upload_time": "2018-01-13T18:58:24", "upload_time_iso_8601": "2018-01-13T18:58:24.620766Z", "url": "https://files.pythonhosted.org/packages/7a/b0/7254f4116d49ff649ccc468de28f1f753716c2ee09bd3d3b471d26023159/resim-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "125c988815936f6e6b3ff4bc8d87faa0", "sha256": "64578f652b8fb74482c38e1caf0f2a01c20f6e3530dcc5493fc5f70e5a4576d1"}, "downloads": -1, "filename": "resim-0.1.1.tar.gz", "has_sig": false, "md5_digest": "125c988815936f6e6b3ff4bc8d87faa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17017, "upload_time": "2018-01-13T18:58:25", "upload_time_iso_8601": "2018-01-13T18:58:25.887441Z", "url": "https://files.pythonhosted.org/packages/b3/71/263f4fecee4f3dd2d55839f949b1b914687963c57aa8879b7f00cb8aa3cc/resim-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41ae123eb75737395bd7de1ac60b6c20", "sha256": "e36c679d1e0d6cf4ec2ddf9695eb3d59b14ef71a3255c2800f70406fda5f0a19"}, "downloads": -1, "filename": "resim-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "41ae123eb75737395bd7de1ac60b6c20", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22056, "upload_time": "2018-01-13T18:58:24", "upload_time_iso_8601": "2018-01-13T18:58:24.620766Z", "url": "https://files.pythonhosted.org/packages/7a/b0/7254f4116d49ff649ccc468de28f1f753716c2ee09bd3d3b471d26023159/resim-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "125c988815936f6e6b3ff4bc8d87faa0", "sha256": "64578f652b8fb74482c38e1caf0f2a01c20f6e3530dcc5493fc5f70e5a4576d1"}, "downloads": -1, "filename": "resim-0.1.1.tar.gz", "has_sig": false, "md5_digest": "125c988815936f6e6b3ff4bc8d87faa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17017, "upload_time": "2018-01-13T18:58:25", "upload_time_iso_8601": "2018-01-13T18:58:25.887441Z", "url": "https://files.pythonhosted.org/packages/b3/71/263f4fecee4f3dd2d55839f949b1b914687963c57aa8879b7f00cb8aa3cc/resim-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:51 2020"}