{"info": {"author": "Nicolas Delvaux", "author_email": "nicolas.delvaux@arkena.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Operating System :: Unix", "Programming Language :: Python :: 3"], "description": "Lift Integration-Functional Testing - A meta test framework\r\n===========================================================\r\n\r\nUsually, there is not much to discuss when writing unit tests.\r\nThey have to use the same programming language as the code they are\r\ntesting and most languages have a set of dedicated test frameworks that\r\nyou may chose from.\r\n\r\nHowever, functional and integration tests are more often a bunch of\r\nscripts/executables written in different languages.\r\nFor example, you may prefer to use shell scripts to test a web-service\r\n(eg. via ``curl``) and a Python program to interact with Python modules.\r\nAnd if C/Ruby/Perl/PHP/whatever is more suited to some of your test\r\ncases, you want to use these languages too without having to write the\r\nfull test suite with it.\r\n\r\nCurrently, most projects seem to have either multiple\r\nfunctional/integration test suites (re-using different unit testing\r\nframeworks) or internal solutions to group all the tests executable\r\ntogether in a more or less clean way.\r\n\r\nLift provides an integration/functional test platform which handles\r\n*executable* tests easily and generically.\r\n\r\n\r\nFeatures\r\n========\r\n\r\n- Lift only deals with *executables* and their return code\r\n  \u2192 A particular test can be written in the language that fit it the most\r\n- Test declaration in a simple YAML syntax\r\n  \u2192 No need to learn a programming language to integrate a test in a suite\r\n- Easily declare a test as running locally or on a remote machine\r\n- Remote tests: upload needed assets automatically and cleanup afterward\r\n- Naturally organize a test suite in multiple sub-folders/sub-test suites\r\n- Easily run a sub-test suite or specific tests from the command line\r\n- Pass environment variables to tests\r\n- Inheritance of remotes and environment across sub-test suites\r\n  \u2192 For example, remotes can be defined in the top folder and used below\r\n- Only one command to run all or specific tests: ``lift``\r\n\r\nDocumentation\r\n=============\r\n\r\nThe ``doc`` folder contains man pages.\r\n\r\nExample\r\n=======\r\n\r\nFor a fully commented example of a lift test suite (which can also be\r\nseen as a functional test suite for Lift itself), see the ``example``\r\nfolder.\r\n\r\nInstallation\r\n============\r\n\r\nUse ``pip3 install lift``\r\n\r\nDependencies\r\n============\r\n\r\n- Python 3\r\n- python3-yaml\r\n- python3-paramiko\r\n- python3-docutils (for man pages)\r\n\r\nHome page\r\n=========\r\n\r\nhttps://github.com/Malizor/lift\r\n\r\nLicense\r\n=======\r\n\r\nGNU General Public License (GPL) version 2+\r\nPlease refer to the COPYING file.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/Malizor/lift/tarball/2.0.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Malizor/lift", "keywords": "test testing", "license": "GPL2+", "maintainer": "", "maintainer_email": "", "name": "lift", "package_url": "https://pypi.org/project/lift/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lift/", "project_urls": {"Download": "https://github.com/Malizor/lift/tarball/2.0.0", "Homepage": "https://github.com/Malizor/lift"}, "release_url": "https://pypi.org/project/lift/2.0.0/", "requires_dist": null, "requires_python": null, "summary": "High level test framework", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"lift-integration-functional-testing-a-meta-test-framework\">\n<h2>Lift Integration-Functional Testing - A meta test framework</h2>\n<p>Usually, there is not much to discuss when writing unit tests.\nThey have to use the same programming language as the code they are\ntesting and most languages have a set of dedicated test frameworks that\nyou may chose from.</p>\n<p>However, functional and integration tests are more often a bunch of\nscripts/executables written in different languages.\nFor example, you may prefer to use shell scripts to test a web-service\n(eg. via <tt>curl</tt>) and a Python program to interact with Python modules.\nAnd if C/Ruby/Perl/PHP/whatever is more suited to some of your test\ncases, you want to use these languages too without having to write the\nfull test suite with it.</p>\n<p>Currently, most projects seem to have either multiple\nfunctional/integration test suites (re-using different unit testing\nframeworks) or internal solutions to group all the tests executable\ntogether in a more or less clean way.</p>\n<p>Lift provides an integration/functional test platform which handles\n<em>executable</em> tests easily and generically.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Lift only deals with <em>executables</em> and their return code\n\u2192 A particular test can be written in the language that fit it the most</li>\n<li>Test declaration in a simple YAML syntax\n\u2192 No need to learn a programming language to integrate a test in a suite</li>\n<li>Easily declare a test as running locally or on a remote machine</li>\n<li>Remote tests: upload needed assets automatically and cleanup afterward</li>\n<li>Naturally organize a test suite in multiple sub-folders/sub-test suites</li>\n<li>Easily run a sub-test suite or specific tests from the command line</li>\n<li>Pass environment variables to tests</li>\n<li>Inheritance of remotes and environment across sub-test suites\n\u2192 For example, remotes can be defined in the top folder and used below</li>\n<li>Only one command to run all or specific tests: <tt>lift</tt></li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The <tt>doc</tt> folder contains man pages.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>For a fully commented example of a lift test suite (which can also be\nseen as a functional test suite for Lift itself), see the <tt>example</tt>\nfolder.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use <tt>pip3 install lift</tt></p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Python 3</li>\n<li>python3-yaml</li>\n<li>python3-paramiko</li>\n<li>python3-docutils (for man pages)</li>\n</ul>\n</div>\n<div id=\"home-page\">\n<h2>Home page</h2>\n<p><a href=\"https://github.com/Malizor/lift\" rel=\"nofollow\">https://github.com/Malizor/lift</a></p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>GNU General Public License (GPL) version 2+\nPlease refer to the COPYING file.</p>\n</div>\n\n          </div>"}, "last_serial": 1481178, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "7f20e573693ba524427ec62b8b59e291", "sha256": "3d5c8c3dc427e757c91a66395f16f3d120b634b32cb4ad7d5b4eb0bb3673be56"}, "downloads": -1, "filename": "lift-2.0.0.tar.gz", "has_sig": false, "md5_digest": "7f20e573693ba524427ec62b8b59e291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20484, "upload_time": "2015-03-28T08:50:26", "upload_time_iso_8601": "2015-03-28T08:50:26.894185Z", "url": "https://files.pythonhosted.org/packages/42/f5/54c442e1bc24e4e4a8c5554d49173b186afd7020ffcd9399f863d46af753/lift-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f20e573693ba524427ec62b8b59e291", "sha256": "3d5c8c3dc427e757c91a66395f16f3d120b634b32cb4ad7d5b4eb0bb3673be56"}, "downloads": -1, "filename": "lift-2.0.0.tar.gz", "has_sig": false, "md5_digest": "7f20e573693ba524427ec62b8b59e291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20484, "upload_time": "2015-03-28T08:50:26", "upload_time_iso_8601": "2015-03-28T08:50:26.894185Z", "url": "https://files.pythonhosted.org/packages/42/f5/54c442e1bc24e4e4a8c5554d49173b186afd7020ffcd9399f863d46af753/lift-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:06 2020"}