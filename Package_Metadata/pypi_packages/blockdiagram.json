{"info": {"author": "Zoltan Sylvester", "author_email": "zoltan.sylvester@beg.utexas.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/blockdiagram_logo.png\" width=\"400\">\n\n## Description\n\n'blockdiagram' is a Python module for creating block diagrams and other three-dimensional displays from stratigraphic models. It is designed to work with [meanderpy](https://github.com/zsylvester/meanderpy), but it should work with any model that consists of a stack of stratigraphic surfaces.\n\n## Requirements\n\nnumpy  \nmatplotlib  \nmayavi  \nscipy  \nPIL\n\n## Usage\n\nThe main function in 'blockdiagram' is 'create_exploded_view'. It can either be used to generate a normal block diagram or an exploded-view block diagram, in which the model is split into several smaller blocks so that more stratigraphic detail is visible. Fence diagrams can be created as well. Here is a typical set of input parameters:\n\n```python\nmlab.figure(bgcolor=(1,1,1)) \n# parameters\nve = 15.0 # vertical exaggeration\nscale = 0.1 # scaling of diagram (important for 3D printing)\nstrat_switch = 1 # equals 1 if you want stratigraphy displayed on the sides\nlayers_switch = 0 # equals 1 if you want stratigraphic boundaries displayed on the sides\ncontour_switch = 0 # equals 1 if you want contours displayed on the top surface\ndx = 10.0 # cell size for display\nbottom = np.min(chb_3d.strat) - 1.5 # elevation of bottom side of diagram\ncolor_mode = 'property' # determines how the stratigraphy will be colored; can be 'property', 'facies', or 'time'\ncolors = [[0.5,0.25,0],[0.9,0.9,0],[0.5,0.25,0]] # colors for 'facies' display\nline_thickness = 1.0 # thickness of lines if 'layers_switch' is 1\ngap = 20 # distance between exploded blocks (if any; in number of gridcells)\nh = 5.0 # channel depth (m)\nnx = 1 # number of blocks in x direction\nny = 1 # number of blocks in y direction\n\nbd.create_exploded_view(chb_3d.strat,chb_3d.facies,chb_3d.topo,h,nx,ny,gap,dx,ve,scale,strat_switch,\n                        layers_switch,contour_switch,color_mode,colors,line_thickness,bottom)\n```\nIf the command above is run with nx=1 and ny=1 (the number of blocks in the x and y directions), a simple block diagram is displayed:\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/fluvial_model_example_1.png\" width=\"800\">\n\nChanging nx and ny to 3 results in something like this:\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/fluvial_model_example_2.png\" width=\"800\">\n\nBoth of the models above have been colored using the 'property' setting for the 'color_mode' parameter, so that the change from yellow to brown in the point bars reflects the change in grain size (and porosity/permeability). This setting can also be set to 'facies' (when each facies, e.g., point bar vs. overbank, gets its own color) or to 'time', when layers are colored according to their relative age - see example below.\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/fluvial_model_example_5.png\" width=\"800\">\n\nAnother functionality is to create a 'random' section from the model. In order to do that, the location of the section has to be selected on a map of the top surface, using the 'select_random_section' function:\n\n```python\nxcoords, ycoords = bd.select_random_section(chb_3d.strat) # define x and y coordinates for random section\nmlab.figure(bgcolor=(1,1,1))\ncolor_mode = 'property'\nbd.create_random_section_n_points(chb_3d.strat,chb_3d.facies,chb_3d.topo,h,scale,ve,color_mode,colors,\n                                   xcoords[:-1],xcoords[1:],ycoords[:-1],ycoords[1:],dx,bottom)\n```\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/fluvial_model_example_6.png\" width=\"300\">\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/fluvial_model_example_7.png\" width=\"800\">\n\nYou can also cut a \"cookie\" from the model, using the 'create_random_cookie' option:\n\n```python\nxcoords, ycoords = bd.select_random_section(chb_3d.strat) # define x and y coordinates for random section\nmlab.figure(bgcolor=(1,1,1))\nbd.create_random_cookie(chb_3d.strat,chb_3d.facies,chb_3d.topo,h,scale,ve,color_mode,colors,xcoords[:-1],xcoords[1:],\n                        ycoords[:-1],ycoords[1:],dx,bottom)\n```\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/fluvial_model_example_4.png\" width=\"300\">\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/fluvial_model_example_3.png\" width=\"800\">\n\nA more traditional way to look at 3D data or models is a fence diagram:\n\n```python\nmlab.figure(bgcolor=(1,1,1))\nbd.create_fence_diagram(chb_3d.strat,chb_3d.facies,chb_3d.topo,h,6,2,gap,dx,ve,scale,layers_switch,color_mode,colors,line_thickness,bottom,export)\n```\n<img src=\"https://github.com/zsylvester/blockdiagram/blob/master/fluvial_model_example_8.png\" width=\"800\">\n\n## License\n\n'blockdiagram' is licensed under the Apache License 2.0\n\nCopyright 2019 Zoltan Sylvester\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zsylvester/blockdiagram", "keywords": "geomorphology,stratigraphy,3D visualization", "license": "", "maintainer": "", "maintainer_email": "", "name": "blockdiagram", "package_url": "https://pypi.org/project/blockdiagram/", "platform": "", "project_url": "https://pypi.org/project/blockdiagram/", "project_urls": {"Homepage": "https://github.com/zsylvester/blockdiagram"}, "release_url": "https://pypi.org/project/blockdiagram/0.1.0/", "requires_dist": ["numpy", "matplotlib", "mayavi", "scipy", "pillow"], "requires_python": "", "summary": "Module for creating block diagrams and other three-dimensional displays from stratigraphic models", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d7ba5cb139395d3723824bb24eb195b632d49e7/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f626c6f636b6469616772616d5f6c6f676f2e706e67\" width=\"400\">\n<h2>Description</h2>\n<p>'blockdiagram' is a Python module for creating block diagrams and other three-dimensional displays from stratigraphic models. It is designed to work with <a href=\"https://github.com/zsylvester/meanderpy\" rel=\"nofollow\">meanderpy</a>, but it should work with any model that consists of a stack of stratigraphic surfaces.</p>\n<h2>Requirements</h2>\n<p>numpy<br>\nmatplotlib<br>\nmayavi<br>\nscipy<br>\nPIL</p>\n<h2>Usage</h2>\n<p>The main function in 'blockdiagram' is 'create_exploded_view'. It can either be used to generate a normal block diagram or an exploded-view block diagram, in which the model is split into several smaller blocks so that more stratigraphic detail is visible. Fence diagrams can be created as well. Here is a typical set of input parameters:</p>\n<pre><span class=\"n\">mlab</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">bgcolor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span> \n<span class=\"c1\"># parameters</span>\n<span class=\"n\">ve</span> <span class=\"o\">=</span> <span class=\"mf\">15.0</span> <span class=\"c1\"># vertical exaggeration</span>\n<span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span> <span class=\"c1\"># scaling of diagram (important for 3D printing)</span>\n<span class=\"n\">strat_switch</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"c1\"># equals 1 if you want stratigraphy displayed on the sides</span>\n<span class=\"n\">layers_switch</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># equals 1 if you want stratigraphic boundaries displayed on the sides</span>\n<span class=\"n\">contour_switch</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># equals 1 if you want contours displayed on the top surface</span>\n<span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span> <span class=\"c1\"># cell size for display</span>\n<span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">strat</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">1.5</span> <span class=\"c1\"># elevation of bottom side of diagram</span>\n<span class=\"n\">color_mode</span> <span class=\"o\">=</span> <span class=\"s1\">'property'</span> <span class=\"c1\"># determines how the stratigraphy will be colored; can be 'property', 'facies', or 'time'</span>\n<span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span><span class=\"mf\">0.25</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mf\">0.9</span><span class=\"p\">,</span><span class=\"mf\">0.9</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span><span class=\"mf\">0.25</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"c1\"># colors for 'facies' display</span>\n<span class=\"n\">line_thickness</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"c1\"># thickness of lines if 'layers_switch' is 1</span>\n<span class=\"n\">gap</span> <span class=\"o\">=</span> <span class=\"mi\">20</span> <span class=\"c1\"># distance between exploded blocks (if any; in number of gridcells)</span>\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span> <span class=\"c1\"># channel depth (m)</span>\n<span class=\"n\">nx</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"c1\"># number of blocks in x direction</span>\n<span class=\"n\">ny</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"c1\"># number of blocks in y direction</span>\n\n<span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"n\">create_exploded_view</span><span class=\"p\">(</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">strat</span><span class=\"p\">,</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">facies</span><span class=\"p\">,</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">topo</span><span class=\"p\">,</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">nx</span><span class=\"p\">,</span><span class=\"n\">ny</span><span class=\"p\">,</span><span class=\"n\">gap</span><span class=\"p\">,</span><span class=\"n\">dx</span><span class=\"p\">,</span><span class=\"n\">ve</span><span class=\"p\">,</span><span class=\"n\">scale</span><span class=\"p\">,</span><span class=\"n\">strat_switch</span><span class=\"p\">,</span>\n                        <span class=\"n\">layers_switch</span><span class=\"p\">,</span><span class=\"n\">contour_switch</span><span class=\"p\">,</span><span class=\"n\">color_mode</span><span class=\"p\">,</span><span class=\"n\">colors</span><span class=\"p\">,</span><span class=\"n\">line_thickness</span><span class=\"p\">,</span><span class=\"n\">bottom</span><span class=\"p\">)</span>\n</pre>\n<p>If the command above is run with nx=1 and ny=1 (the number of blocks in the x and y directions), a simple block diagram is displayed:\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/374940dccd17fadd81a5248c0a35af5d7ea157ae/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f666c757669616c5f6d6f64656c5f6578616d706c655f312e706e67\" width=\"800\"></p>\n<p>Changing nx and ny to 3 results in something like this:\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22a9899fb0c515c70bca5e2b221eb66727ed34b8/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f666c757669616c5f6d6f64656c5f6578616d706c655f322e706e67\" width=\"800\"></p>\n<p>Both of the models above have been colored using the 'property' setting for the 'color_mode' parameter, so that the change from yellow to brown in the point bars reflects the change in grain size (and porosity/permeability). This setting can also be set to 'facies' (when each facies, e.g., point bar vs. overbank, gets its own color) or to 'time', when layers are colored according to their relative age - see example below.\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f24cb69b78a36747e73f1c511b96306ba9c1befe/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f666c757669616c5f6d6f64656c5f6578616d706c655f352e706e67\" width=\"800\"></p>\n<p>Another functionality is to create a 'random' section from the model. In order to do that, the location of the section has to be selected on a map of the top surface, using the 'select_random_section' function:</p>\n<pre><span class=\"n\">xcoords</span><span class=\"p\">,</span> <span class=\"n\">ycoords</span> <span class=\"o\">=</span> <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"n\">select_random_section</span><span class=\"p\">(</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">strat</span><span class=\"p\">)</span> <span class=\"c1\"># define x and y coordinates for random section</span>\n<span class=\"n\">mlab</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">bgcolor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">color_mode</span> <span class=\"o\">=</span> <span class=\"s1\">'property'</span>\n<span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"n\">create_random_section_n_points</span><span class=\"p\">(</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">strat</span><span class=\"p\">,</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">facies</span><span class=\"p\">,</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">topo</span><span class=\"p\">,</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">scale</span><span class=\"p\">,</span><span class=\"n\">ve</span><span class=\"p\">,</span><span class=\"n\">color_mode</span><span class=\"p\">,</span><span class=\"n\">colors</span><span class=\"p\">,</span>\n                                   <span class=\"n\">xcoords</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">xcoords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span><span class=\"n\">ycoords</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">ycoords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span><span class=\"n\">dx</span><span class=\"p\">,</span><span class=\"n\">bottom</span><span class=\"p\">)</span>\n</pre>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1315c6083f4046351527e1a33c1187a517cd1c2/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f666c757669616c5f6d6f64656c5f6578616d706c655f362e706e67\" width=\"300\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81176d93baa037379b72b25d7dcfc9759569a178/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f666c757669616c5f6d6f64656c5f6578616d706c655f372e706e67\" width=\"800\">\n<p>You can also cut a \"cookie\" from the model, using the 'create_random_cookie' option:</p>\n<pre><span class=\"n\">xcoords</span><span class=\"p\">,</span> <span class=\"n\">ycoords</span> <span class=\"o\">=</span> <span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"n\">select_random_section</span><span class=\"p\">(</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">strat</span><span class=\"p\">)</span> <span class=\"c1\"># define x and y coordinates for random section</span>\n<span class=\"n\">mlab</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">bgcolor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"n\">create_random_cookie</span><span class=\"p\">(</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">strat</span><span class=\"p\">,</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">facies</span><span class=\"p\">,</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">topo</span><span class=\"p\">,</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">scale</span><span class=\"p\">,</span><span class=\"n\">ve</span><span class=\"p\">,</span><span class=\"n\">color_mode</span><span class=\"p\">,</span><span class=\"n\">colors</span><span class=\"p\">,</span><span class=\"n\">xcoords</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">xcoords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span>\n                        <span class=\"n\">ycoords</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">ycoords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span><span class=\"n\">dx</span><span class=\"p\">,</span><span class=\"n\">bottom</span><span class=\"p\">)</span>\n</pre>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3ca576ab998f0e13043cb16b1c0683a07657eee/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f666c757669616c5f6d6f64656c5f6578616d706c655f342e706e67\" width=\"300\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0860cb7234b59a50ab653511c15d84f46f4209b/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f666c757669616c5f6d6f64656c5f6578616d706c655f332e706e67\" width=\"800\">\n<p>A more traditional way to look at 3D data or models is a fence diagram:</p>\n<pre><span class=\"n\">mlab</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">bgcolor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"n\">create_fence_diagram</span><span class=\"p\">(</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">strat</span><span class=\"p\">,</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">facies</span><span class=\"p\">,</span><span class=\"n\">chb_3d</span><span class=\"o\">.</span><span class=\"n\">topo</span><span class=\"p\">,</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">gap</span><span class=\"p\">,</span><span class=\"n\">dx</span><span class=\"p\">,</span><span class=\"n\">ve</span><span class=\"p\">,</span><span class=\"n\">scale</span><span class=\"p\">,</span><span class=\"n\">layers_switch</span><span class=\"p\">,</span><span class=\"n\">color_mode</span><span class=\"p\">,</span><span class=\"n\">colors</span><span class=\"p\">,</span><span class=\"n\">line_thickness</span><span class=\"p\">,</span><span class=\"n\">bottom</span><span class=\"p\">,</span><span class=\"n\">export</span><span class=\"p\">)</span>\n</pre>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24bd71cf16eda477f107a10d962b63d9773db31e/68747470733a2f2f6769746875622e636f6d2f7a73796c7665737465722f626c6f636b6469616772616d2f626c6f622f6d61737465722f666c757669616c5f6d6f64656c5f6578616d706c655f382e706e67\" width=\"800\">\n<h2>License</h2>\n<p>'blockdiagram' is licensed under the Apache License 2.0</p>\n<p>Copyright 2019 Zoltan Sylvester</p>\n\n          </div>"}, "last_serial": 5421101, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8ee7a43230d664a29f85fa1e8e96d119", "sha256": "709417201d6ac8ee083e31ab495fa54b4ca8df12ca109a95209b9d7b893f891b"}, "downloads": -1, "filename": "blockdiagram-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8ee7a43230d664a29f85fa1e8e96d119", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18374, "upload_time": "2019-06-19T16:03:39", "upload_time_iso_8601": "2019-06-19T16:03:39.306768Z", "url": "https://files.pythonhosted.org/packages/08/68/9b063fc5a550f0e4b29c40cea9a5e7a8180ab62837e3b3aa2e15c0e298ff/blockdiagram-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "399ff1c89c39736a579fd98d965eec4e", "sha256": "f15f9e48753393a84c83eff47d0bd374d70e048d4c5db7fcfcd232a505892033"}, "downloads": -1, "filename": "blockdiagram-0.1.0.tar.gz", "has_sig": false, "md5_digest": "399ff1c89c39736a579fd98d965eec4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9861, "upload_time": "2019-06-19T16:03:41", "upload_time_iso_8601": "2019-06-19T16:03:41.348242Z", "url": "https://files.pythonhosted.org/packages/70/49/093e97eafad41d62694cf89e62b45ab350c342498ecb086089b4d6acfcc9/blockdiagram-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ee7a43230d664a29f85fa1e8e96d119", "sha256": "709417201d6ac8ee083e31ab495fa54b4ca8df12ca109a95209b9d7b893f891b"}, "downloads": -1, "filename": "blockdiagram-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8ee7a43230d664a29f85fa1e8e96d119", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18374, "upload_time": "2019-06-19T16:03:39", "upload_time_iso_8601": "2019-06-19T16:03:39.306768Z", "url": "https://files.pythonhosted.org/packages/08/68/9b063fc5a550f0e4b29c40cea9a5e7a8180ab62837e3b3aa2e15c0e298ff/blockdiagram-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "399ff1c89c39736a579fd98d965eec4e", "sha256": "f15f9e48753393a84c83eff47d0bd374d70e048d4c5db7fcfcd232a505892033"}, "downloads": -1, "filename": "blockdiagram-0.1.0.tar.gz", "has_sig": false, "md5_digest": "399ff1c89c39736a579fd98d965eec4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9861, "upload_time": "2019-06-19T16:03:41", "upload_time_iso_8601": "2019-06-19T16:03:41.348242Z", "url": "https://files.pythonhosted.org/packages/70/49/093e97eafad41d62694cf89e62b45ab350c342498ecb086089b4d6acfcc9/blockdiagram-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:02 2020"}