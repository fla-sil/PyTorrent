{"info": {"author": "Chau Nguyen", "author_email": "chau@etri.re.kr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 2.7"], "description": ".. You should enable this project on travis-ci.org and coveralls.io to make\n   these badges work. The necessary Travis and Coverage config files have been\n   generated for you.\n\n.. .. image:: https://travis-ci.org/etri-sodas/ckanext-resourceauthorizer.svg?branch=master\n    :target: https://travis-ci.org/etri-sodas/ckanext-resourceauthorizer\n\n.. .. image:: https://coveralls.io/repos/etri-sodas/ckanext-resourceauthorizer/badge.svg\n  :target: https://coveralls.io/r/etri-sodas/ckanext-resourceauthorizer\n\n.. .. image:: https://pypip.in/download/ckanext-resourceauthorizer/badge.svg\n    :target: https://pypi.python.org/pypi/etri-sodas/ckanext-resourceauthorizer/\n    :alt: Downloads\n\n.. .. image:: https://pypip.in/version/ckanext-resourceauthorizer/badge.svg\n    :target: https://pypi.python.org/pypi/ckanext-resourceauthorizer/\n    :alt: Latest Version\n\n.. .. image:: https://pypip.in/py_versions/ckanext-resourceauthorizer/badge.svg\n    :target: https://pypi.python.org/pypi/ckanext-resourceauthorizer/\n    :alt: Supported Python versions\n\n.. .. image:: https://pypip.in/status/ckanext-resourceauthorizer/badge.svg\n    :target: https://pypi.python.org/pypi/ckanext-resourceauthorizer/\n    :alt: Development Status\n\n.. .. image:: https://pypip.in/license/ckanext-resourceauthorizer/badge.svg\n    :target: https://pypi.python.org/pypi/ckanext-resourceauthorizer/\n    :alt: License\n\n===========================================================\nckanext-resourceauthorizer - Resource authorizing extension\n===========================================================\n\n.. Put a description of your extension here:\n   What does it do? What features does it have?\n   Consider including some screenshots or embedding a video!\n\nResourceauthorizer is a extension for enalbing the acl-based permission control at resource-level in CKAN, which currently only support role-based access permission at dataset-level.\n\nThis extension provides an ability to let users specify who (users or organizations) can or cannot access a certain resource.\n\nNotes:\n\n* Access permission setting for an organization will affect all members of the organization.\n* Extension always uses access permission at user-level as the final decision if there exists both rules for user and organization.\n* Allowing user/organization to access a resource will enable the access of the dataset metadata for that user/organization.\n\n.. image:: https://drive.google.com/uc?id=1QUiZNw96luC8uE8ujy1cF4N8F_sYYQgV\n\n------------\nRequirements\n------------\n\nThis extension was developed and tested under CKAN-2.7.3\n\n------------\nInstallation\n------------\n\n.. Add any additional install steps to the list below.\n   For example installing any non-Python dependencies or adding any required\n   config settings.\n\nTo install ckanext-resourceauthorizer:\n\n1. Activate your CKAN virtual environment, for example::\n\n     . /usr/lib/ckan/default/bin/activate\n\n2. Install the ckanext-resourceauthorizer Python package into your virtual environment::\n\n     pip install ckanext-resourceauthorizer\n\n3. Add ``resourceauthorizer`` to the ``ckan.plugins`` setting in your CKAN\n   config file (by default the config file is located at\n   ``/etc/ckan/default/production.ini``).\n\n4. Restart CKAN. For example if you've deployed CKAN with Apache on Ubuntu::\n\n    sudo service apache2 reload\n\n\n---------------\nConfig Settings\n---------------\n\nRun the following command to create the necessary tables in the database (ensuring the pyenv is activated)::\n\n    (pyenv) $ paster --plugin=ckanext-resourceauthorizer resourceauthorizer initdb --config=/etc/ckan/default/production.ini\n\nRun the following command to reindex the CKAN metadata in solr (ensuring the pyenv is activated)::\n\n    (pyenv) $ paster --plugin=ckan search-index rebuild --config=/etc/ckan/default/production.ini\n\nFinally, restart CKAN to have the changes take affect:\n\n    sudo service apache2 restart\n\n\n\n------------------------\nDevelopment Installation\n------------------------\n\nTo install ckanext-resourceauthorizer for development, activate your CKAN virtualenv and\ndo::\n\n    git clone https://github.com/etri-sodas/ckanext-resourceauthorizer.git\n    cd ckanext-resourceauthorizer\n    python setup.py develop\n    pip install -r dev-requirements.txt\n\n\n-----------------\nRunning the Tests\n-----------------\n\nTo run the tests, do::\n\n    nosetests --nologcapture --with-pylons=test.ini\n\nTo run the tests and produce a coverage report, first make sure you have\ncoverage installed in your virtualenv (``pip install coverage``) then run::\n\n    nosetests --nologcapture --with-pylons=test.ini --with-coverage --cover-package=ckanext.resourceauthorizer --cover-inclusive --cover-erase --cover-tests\n\n\n----------------------------------------------\nRegistering ckanext-resourceauthorizer on PyPI\n----------------------------------------------\n\nckanext-resourceauthorizer should be availabe on PyPI as\nhttps://pypi.python.org/pypi/ckanext-resourceauthorizer. If that link doesn't work, then\nyou can register the project on PyPI for the first time by following these\nsteps:\n\n1. Create a source distribution of the project::\n\n     python setup.py sdist\n\n2. Register the project::\n\n     python setup.py register\n\n3. Upload the source distribution to PyPI::\n\n     python setup.py sdist upload\n\n4. Tag the first release of the project on GitHub with the version number from\n   the ``setup.py`` file. For example if the version number in ``setup.py`` is\n   0.0.1 then do::\n\n       git tag 0.0.1\n       git push --tags\n\n================\nAcknowledgements\n================\n\nThis work was supported by Institute for Information & communications Technology Promotion (IITP) grant funded by the Korea government (MSIT) (No.2017-00253, Development of an Advanced Open Data Distribution Platform based on International Standards)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/etri-sodas/ckanext-resourceauthorizer", "keywords": "CKAN", "license": "AGPL", "maintainer": "", "maintainer_email": "", "name": "ckanext-resourceauthorizer", "package_url": "https://pypi.org/project/ckanext-resourceauthorizer/", "platform": "", "project_url": "https://pypi.org/project/ckanext-resourceauthorizer/", "project_urls": {"Homepage": "https://github.com/etri-sodas/ckanext-resourceauthorizer"}, "release_url": "https://pypi.org/project/ckanext-resourceauthorizer/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "An extension for authorizing resources", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ckanext-resourceauthorizer-resource-authorizing-extension\">\n<h2>ckanext-resourceauthorizer - Resource authorizing extension</h2>\n<p>Resourceauthorizer is a extension for enalbing the acl-based permission control at resource-level in CKAN, which currently only support role-based access permission at dataset-level.</p>\n<p>This extension provides an ability to let users specify who (users or organizations) can or cannot access a certain resource.</p>\n<p>Notes:</p>\n<ul>\n<li>Access permission setting for an organization will affect all members of the organization.</li>\n<li>Extension always uses access permission at user-level as the final decision if there exists both rules for user and organization.</li>\n<li>Allowing user/organization to access a resource will enable the access of the dataset metadata for that user/organization.</li>\n</ul>\n<img alt=\"https://drive.google.com/uc?id=1QUiZNw96luC8uE8ujy1cF4N8F_sYYQgV\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff16475b2e313d7e1adc8de9128bb9dca0ace28e/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f69643d315155695a4e7739366c754338754538756a79316346344e38465f735959516756\">\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>This extension was developed and tested under CKAN-2.7.3</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install ckanext-resourceauthorizer:</p>\n<ol>\n<li><p>Activate your CKAN virtual environment, for example:</p>\n<pre>. /usr/lib/ckan/default/bin/activate\n</pre>\n</li>\n<li><p>Install the ckanext-resourceauthorizer Python package into your virtual environment:</p>\n<pre>pip install ckanext-resourceauthorizer\n</pre>\n</li>\n<li><p>Add <tt>resourceauthorizer</tt> to the <tt>ckan.plugins</tt> setting in your CKAN\nconfig file (by default the config file is located at\n<tt>/etc/ckan/default/production.ini</tt>).</p>\n</li>\n<li><p>Restart CKAN. For example if you\u2019ve deployed CKAN with Apache on Ubuntu:</p>\n<pre>sudo service apache2 reload\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"config-settings\">\n<h3>Config Settings</h3>\n<p>Run the following command to create the necessary tables in the database (ensuring the pyenv is activated):</p>\n<pre>(pyenv) $ paster --plugin=ckanext-resourceauthorizer resourceauthorizer initdb --config=/etc/ckan/default/production.ini\n</pre>\n<p>Run the following command to reindex the CKAN metadata in solr (ensuring the pyenv is activated):</p>\n<pre>(pyenv) $ paster --plugin=ckan search-index rebuild --config=/etc/ckan/default/production.ini\n</pre>\n<p>Finally, restart CKAN to have the changes take affect:</p>\n<blockquote>\nsudo service apache2 restart</blockquote>\n</div>\n<div id=\"development-installation\">\n<h3>Development Installation</h3>\n<p>To install ckanext-resourceauthorizer for development, activate your CKAN virtualenv and\ndo:</p>\n<pre>git clone https://github.com/etri-sodas/ckanext-resourceauthorizer.git\ncd ckanext-resourceauthorizer\npython setup.py develop\npip install -r dev-requirements.txt\n</pre>\n</div>\n<div id=\"running-the-tests\">\n<h3>Running the Tests</h3>\n<p>To run the tests, do:</p>\n<pre>nosetests --nologcapture --with-pylons=test.ini\n</pre>\n<p>To run the tests and produce a coverage report, first make sure you have\ncoverage installed in your virtualenv (<tt>pip install coverage</tt>) then run:</p>\n<pre>nosetests --nologcapture --with-pylons=test.ini --with-coverage --cover-package=ckanext.resourceauthorizer --cover-inclusive --cover-erase --cover-tests\n</pre>\n</div>\n<div id=\"registering-ckanext-resourceauthorizer-on-pypi\">\n<h3>Registering ckanext-resourceauthorizer on PyPI</h3>\n<p>ckanext-resourceauthorizer should be availabe on PyPI as\n<a href=\"https://pypi.python.org/pypi/ckanext-resourceauthorizer\" rel=\"nofollow\">https://pypi.python.org/pypi/ckanext-resourceauthorizer</a>. If that link doesn\u2019t work, then\nyou can register the project on PyPI for the first time by following these\nsteps:</p>\n<ol>\n<li><p>Create a source distribution of the project:</p>\n<pre>python setup.py sdist\n</pre>\n</li>\n<li><p>Register the project:</p>\n<pre>python setup.py register\n</pre>\n</li>\n<li><p>Upload the source distribution to PyPI:</p>\n<pre>python setup.py sdist upload\n</pre>\n</li>\n<li><p>Tag the first release of the project on GitHub with the version number from\nthe <tt>setup.py</tt> file. For example if the version number in <tt>setup.py</tt> is\n0.0.1 then do:</p>\n<pre>git tag 0.0.1\ngit push --tags\n</pre>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>This work was supported by Institute for Information &amp; communications Technology Promotion (IITP) grant funded by the Korea government (MSIT) (No.2017-00253, Development of an Advanced Open Data Distribution Platform based on International Standards)</p>\n</div>\n\n          </div>"}, "last_serial": 3754565, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1cd9977c270ac6f5e01c79b77ee02d3d", "sha256": "f06a99c15cd70b501187c4b38a2075391cebee6f00df16e7b70c16a9ba551ddd"}, "downloads": -1, "filename": "ckanext-resourceauthorizer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1cd9977c270ac6f5e01c79b77ee02d3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26230, "upload_time": "2018-04-11T07:00:10", "upload_time_iso_8601": "2018-04-11T07:00:10.149213Z", "url": "https://files.pythonhosted.org/packages/0d/90/3d4943efc42a441ff8720a0310a91bca7d50e68e6cd0af2fc2914a8e66b8/ckanext-resourceauthorizer-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1cd9977c270ac6f5e01c79b77ee02d3d", "sha256": "f06a99c15cd70b501187c4b38a2075391cebee6f00df16e7b70c16a9ba551ddd"}, "downloads": -1, "filename": "ckanext-resourceauthorizer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1cd9977c270ac6f5e01c79b77ee02d3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26230, "upload_time": "2018-04-11T07:00:10", "upload_time_iso_8601": "2018-04-11T07:00:10.149213Z", "url": "https://files.pythonhosted.org/packages/0d/90/3d4943efc42a441ff8720a0310a91bca7d50e68e6cd0af2fc2914a8e66b8/ckanext-resourceauthorizer-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:13 2020"}