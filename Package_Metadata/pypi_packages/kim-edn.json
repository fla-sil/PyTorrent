{"info": {"author": "Yaser Afshar", "author_email": "yafshar@umn.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: Common Development and Distribution License 1.0 (CDDL-1.0)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering"], "description": "# KIM-EDN encoder and decoder\n\n[![Build Status](https://travis-ci.org/openkim/kim-edn.svg?branch=master)](https://travis-ci.org/openkim/kim-edn)\n[![Python package](https://github.com/openkim/kim-edn/workflows/Python%20package/badge.svg)](https://github.com/openkim/kim-edn/actions)\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/mqcc5gsykasewqb9?svg=true)](https://ci.appveyor.com/project/yafshar/kim-edn)\n[![codecov](https://codecov.io/gh/openkim/kim-edn/branch/master/graph/badge.svg)](https://codecov.io/gh/openkim/kim-edn)\n[![Anaconda-Server Badge](https://img.shields.io/conda/vn/conda-forge/kim_edn.svg)](https://anaconda.org/conda-forge/kim_edn)\n[![PyPI](https://img.shields.io/pypi/v/kim-edn.svg)](https://pypi.python.org/pypi/kim-edn)\n[![License](https://img.shields.io/badge/license-CDDL--1.0-blue)](LICENSE.CDDL)\n\n## edn\n\nExtensible data notation [eed-n]\n\n[**edn**](<https://github.com/edn-format/edn>) is an extensible data\nnotation. A superset of **edn** is used by Clojure to represent programs, and\nit is used by [**KIM**](https://openkim.org) and other applications as a\ndata format.\n\n## kim-edn\n\nThe **KIM** infrastructure embraces a subset of **edn** as a\n[standard data format](https://openkim.org/doc/schema/edn-format). The\nprimary purpose of this data format choice is to serve as a notational\nsuperset to [**JSON**](https://en.wikipedia.org/wiki/JSON) with the\nenhancements being that it (1) allows for comments and (2) treats commas as\nwhitespace enabling easier templating.\n\nThe subset of **edn** allowed is constrained to:\n\n* [Booleans](https://github.com/edn-format/edn#booleans)\n* [Strings](https://github.com/edn-format/edn#strings)\n* [Integers](https://github.com/edn-format/edn#integers)\n* [Floating point numbers](https://github.com/edn-format/edn#floating-point-numbers)\n* [Vectors](https://github.com/edn-format/edn#vectors) (or arrays)\n* [Maps](https://github.com/edn-format/edn#maps) (or hash, dicts, hashmaps, etc.)\n\nExceptions:\n\n* [nil](https://github.com/edn-format/edn#nil) is not allowed, this includes\nJSON's null which is not allowed. Instead consider:\n    1. using an empty string (\"\") as the value,\n    2. using the number 0 as the value,\n    3. or omitting a key-value pair.\n* [Symbols](https://github.com/edn-format/edn#symbols) are not allowed\n* [Keywords](https://github.com/edn-format/edn#keywords) are not allowed\n* [Lists](https://github.com/edn-format/edn#lists) are not allowed, please\nuse [vectors](https://github.com/edn-format/edn#vectors) instead\n* [Sets](https://github.com/edn-format/edn#sets) are not allowed\n* [Tagged elements](https://github.com/edn-format/edn#tagged-elements) are\nnot allowed\n\n`kim-edn` has been adapted and updated from the Python `json` module. It\nexposes an API familiar to users of the standard library.\n(See [pickle](https://docs.python.org/3.8/library/pickle.html#module-pickle),\nor\n[marshal](https://docs.python.org/3.8/library/marshal.html), or\n[json](https://docs.python.org/3.8/library/json.html) modules.)\n\nEncoding basic Python object hierarchies::\n\n```py\n    >>> import kim_edn\n    >>> kim_edn.dumps([\"short-name\", {\"source-value\": [\"hcp\"]}])\n    '[\"short-name\" {\"source-value\" [\"hcp\"]}]'\n\n    >>> print(kim_edn.dumps(\"\\\"P6_3/mmc\"))\n    \"\\\"P6_3/mmc\"\n\n    >>> print(kim_edn.dumps('\\\\'))\n    \"\\\\\"\n\n    >>> print(kim_edn.dumps({\"domain\": \"openkim.org\", \"data-method\": \"computation\", \"author\": \"John Doe\"}, sort_keys=True))\n    {\"author\" \"John Doe\" \"data-method\" \"computation\" \"domain\" \"openkim.org\"}\n\n    >>> from io import StringIO\n    >>> io = StringIO()\n    >>> kim_edn.dump(['streaming API'], io)\n    >>> io.getvalue()\n    '[\"streaming API\"]'\n```\n\nPretty printing::\n\n```py\n    >>> import kim_edn\n    >>> print(kim_edn.dumps({\"domain\": \"openkim.org\", \"data-method\": \"computation\", \"author\": \"John Doe\"}, sort_keys=True, indent=4))\n    {\n        \"author\" \"John Doe\"\n        \"data-method\" \"computation\"\n        \"domain\" \"openkim.org\"\n    }\n```\n\nDecoding KIM-EDN::\n\n```py\n    >>> import kim_edn\n    >>> obj = [\"a\", {\"source-value\": 6.9790981921, \"source-unit\": \"angstrom\"}]\n    >>> kim_edn.loads('[\"a\", {\"source-value\": 6.9790981921, \"source-unit\": \"angstrom\"}]') == obj\n    True\n    >>> kim_edn.load('[\"a\", {\"source-value\": 6.9790981921, \"source-unit\": \"angstrom\"}]') == obj\n    True\n    >>> kim_edn.loads('\"\\\\\"foo\\\\bar\"') == '\"foo\\x08ar'\n    True\n    >>> kim_edn.load(kim_edn.dumps(obj)) == obj\n    True\n    >>> from io import StringIO\n    >>> io = StringIO('[\"openkim.org\"]')\n    >>> kim_edn.load(io)[0] == 'openkim.org'\n    True\n```\n\nDecoding Commented KIM-EDN::\n\n```py\n    >>> obj = {\"property-id\": \"tag:brunnels@noreply.openkim.org,2016-05-11:property/atomic-mass\"}\n    >>> c_str = '{\\n  ; property-id\\n  \"property-id\"           \"tag:brunnels@noreply.openkim.org,2016-05-11:property/atomic-mass\" ; property id containing the unique ID of the property.\\n }'\n    >>> kim_edn.load(c_str) == obj\n    True\n```\n\nSpecializing KIM-EDN object decoding::\n\n```py\n    >>> import kim_edn\n    >>> def as_complex(dct):\n    ...     if '__complex__' in dct:\n    ...         return complex(dct['real'], dct['imag'])\n    ...     return dct\n    ...\n    >>> kim_edn.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n    ...     object_hook=as_complex)\n    (1+2j)\n    >>> from decimal import Decimal\n    >>> kim_edn.loads('1.1', parse_float=Decimal) == Decimal('1.1')\n    True\n```\n\nSpecializing KIM-EDN object encoding::\n\n```py\n    >>> import kim_edn\n    >>> def encode_complex(obj):\n    ...     if isinstance(obj, complex):\n    ...         return [obj.real, obj.imag]\n    ...     msg = 'Object of type {} is not '.format(obj.__class__.__name__)\n    ...     msg += 'KIM-EDN serializable'\n    ...     raise TypeError(msg)\n    ...\n    >>> kim_edn.dumps(2 + 1j, default=encode_complex)\n    '[2.0 1.0]'\n    >>> kim_edn.KIMEDNEncoder(default=encode_complex).encode(2 + 1j)\n    '[2.0 1.0]'\n    >>> ''.join(kim_edn.KIMEDNEncoder(default=encode_complex).iterencode(2 + 1j))\n    '[2.0 1.0]'\n```\n\nUsing `kim_edn.tool` from the shell to validate and pretty-print::\n\n```sh\n    $ echo '{\"kim_edn\" \"obj\"}' | python -m kim_edn.tool\n    {\n        \"kim_edn\" \"obj\"\n    }\n\n    $ echo '{\"property-id\" \"tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal\"}' | python -m kim_edn.tool\n    {\n        \"property-id\" \"tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal\"\n    }\n\n    $ echo '{\"foo\": [\"bar\", \"baz\"]}' | python -m kim_edn.tool\n    {\n        \"foo\" [\n            \"bar\"\n            \"baz\"\n        ]\n    }\n\n    $ echo '{\"foo\" [\"bar\" \"baz\"]}' | python -m kim_edn.tool\n    {\n        \"foo\" [\n            \"bar\"\n            \"baz\"\n        ]\n    }\n\n    $ echo '{\"property-id\" \"tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-potential-energy-hexagonal-crystal\" \"instance-id\" 1 \"space-group\" {\"source-value\" \"P6_3/mmc\"} \"basis-atom-coordinates\" {\"source-value\" [[0, 0, 0][0.5, 0, 0.5]]}}' | python -m kim_edn.tool\n    {\n        \"property-id\" \"tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-potential-energy-hexagonal-crystal\"\n        \"instance-id\" 1\n        \"space-group\" {\n            \"source-value\" \"P6_3/mmc\"\n        }\n        \"basis-atom-coordinates\" {\n            \"source-value\" [\n                [\n                    0\n                    0\n                    0\n                ]\n                [\n                    0.5\n                    0\n                    0.5\n                ]\n            ]\n        }\n    }\n```\n\n**Note:**\n\nThis module's encoders and decoders preserve input and output order by\ndefault. Order is only lost if the underlying containers are unordered.\n\n## Encoders and Decoders\n\nKIM-EDN decoder (KIMEDNDecoder) object, performs the following translations\nin decoding by default:\n\n| KIM-EDN                       | Python   |\n|-------------------------------|----------|\n| object                        | dict     |\n| Vectors (or \"arrays\")         | list     |\n| Strings                       | str      |\n| Integers numbers (int)        | int      |\n| Floating point numbers (real) | float    |\n| true                          | True     |\n| false                         | False    |\n\nKIM-EDN encoder (KIMEDNEncoder) for OpenKIM Python data structures, supports\nthe following objects and types by default:\n\n| Python            | KIM-EDN                                     |\n|-------------------|---------------------------------------------|\n| dict              | Maps (or \"hash\", \"dicts\", \"hashmaps\", etc.) |\n| list              | Vectors (or \"arrays\")                       |\n| str               | Strings                                     |\n| int               | Integers numbers                            |\n| float             | Floating point numbers                      |\n| True              | true                                        |\n| False             | false                                       |\n\n## Installing kim-edn\n\n### Requirements\n\nYou need Python 3.6 or later to run `kim-edn`. You can have multiple Python\nversions (2.x and 3.x) installed on the same system without problems.\n\nTo install Python 3 for different Linux flavors, macOS and Windows, packages\nare available at\\\n[https://www.python.org/getit/](https://www.python.org/getit/)\n\n### Using pip\n\n**pip** is the most popular tool for installing Python packages, and the one\nincluded with modern versions of Python.\n\n`kim-edn` can be installed with `pip`:\n\n```sh\npip install kim-edn\n```\n\n**Note:**\n\nDepending on your Python installation, you may need to use `pip3` instead of\n`pip`.\n\n```sh\npip3 install kim-edn\n```\n\nDepending on your configuration, you may have to run `pip` like this:\n\n```sh\npython3 -m pip install kim-edn\n```\n\n### Using pip (GIT Support)\n\n`pip` currently supports cloning over `git`\n\n```sh\npip install git+https://github.com/openkim/kim-edn.git\n```\n\nFor more information and examples, see the\n[pip install](https://pip.pypa.io/en/stable/reference/pip_install/#id18)\nreference.\n\n### Using conda\n\n**conda** is the package management tool for Anaconda Python installations.\n\nInstalling `kim-edn` from the `conda-forge` channel can be achieved by adding\n`conda-forge` to your channels with:\n\n```sh\nconda config --add channels conda-forge\n```\n\nOnce the `conda-forge` channel has been enabled, `kim-edn` can be installed\nwith:\n\n```sh\nconda install kim-edn\n```\n\nIt is possible to list all of the versions of `kim-edn` available on your\nplatform with:\n\n```sh\nconda search kim-edn --channel conda-forge\n```\n\n## References\n\nThis module has been adapted and updated from the\n[python](https://docs.python.org) **json** module to comply with the\n[subset of **edn** format used in **KIM**](https://openkim.org/doc/schema/edn-format).\n\n## Copyright\n\nCopyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019 Python Software\nFoundation;\\\nAll Rights Reserved\n\nCopyright (c) 2019, Regents of the University of Minnesota.\\\nAll Rights Reserved\n\n## Contributing\n\nContributors:\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Yaser Afshar\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/openkim/kim-edn", "keywords": "kim-edn,edn", "license": "CDDL-1.0", "maintainer": "", "maintainer_email": "", "name": "kim-edn", "package_url": "https://pypi.org/project/kim-edn/", "platform": "", "project_url": "https://pypi.org/project/kim-edn/", "project_urls": {"Homepage": "https://github.com/openkim/kim-edn"}, "release_url": "https://pypi.org/project/kim-edn/1.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "kim-edn - KIM-EDN encoder and decoder.", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>KIM-EDN encoder and decoder</h1>\n<p><a href=\"https://travis-ci.org/openkim/kim-edn\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0dba99c286f39d1450283db6ee145f0ab2e7f909/68747470733a2f2f7472617669732d63692e6f72672f6f70656e6b696d2f6b696d2d65646e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/openkim/kim-edn/actions\" rel=\"nofollow\"><img alt=\"Python package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21be3d1803e595032816dd348d04aa1fc2940923/68747470733a2f2f6769746875622e636f6d2f6f70656e6b696d2f6b696d2d65646e2f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></a>\n<a href=\"https://ci.appveyor.com/project/yafshar/kim-edn\" rel=\"nofollow\"><img alt=\"Windows Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f785cac97428177be0484c4fe619f7bdec6b03de/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6d716363356773796b617365777162393f7376673d74727565\"></a>\n<a href=\"https://codecov.io/gh/openkim/kim-edn\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3adfe6e3dc8f4cbcb3320083b22c4340f063f92/68747470733a2f2f636f6465636f762e696f2f67682f6f70656e6b696d2f6b696d2d65646e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/kim_edn\" rel=\"nofollow\"><img alt=\"Anaconda-Server Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5321c952ab93394f6636d8c2fd6162d56c4bff8b/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f6b696d5f65646e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/kim-edn\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8f2ad3dd529ba90d4810e739e66382ac44611fc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b696d2d65646e2e737667\"></a>\n<a href=\"LICENSE.CDDL\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/961844253028d3551e74561427a8e4d540c4edf5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4344444c2d2d312e302d626c7565\"></a></p>\n<h2>edn</h2>\n<p>Extensible data notation [eed-n]</p>\n<p><a href=\"https://github.com/edn-format/edn\" rel=\"nofollow\"><strong>edn</strong></a> is an extensible data\nnotation. A superset of <strong>edn</strong> is used by Clojure to represent programs, and\nit is used by <a href=\"https://openkim.org\" rel=\"nofollow\"><strong>KIM</strong></a> and other applications as a\ndata format.</p>\n<h2>kim-edn</h2>\n<p>The <strong>KIM</strong> infrastructure embraces a subset of <strong>edn</strong> as a\n<a href=\"https://openkim.org/doc/schema/edn-format\" rel=\"nofollow\">standard data format</a>. The\nprimary purpose of this data format choice is to serve as a notational\nsuperset to <a href=\"https://en.wikipedia.org/wiki/JSON\" rel=\"nofollow\"><strong>JSON</strong></a> with the\nenhancements being that it (1) allows for comments and (2) treats commas as\nwhitespace enabling easier templating.</p>\n<p>The subset of <strong>edn</strong> allowed is constrained to:</p>\n<ul>\n<li><a href=\"https://github.com/edn-format/edn#booleans\" rel=\"nofollow\">Booleans</a></li>\n<li><a href=\"https://github.com/edn-format/edn#strings\" rel=\"nofollow\">Strings</a></li>\n<li><a href=\"https://github.com/edn-format/edn#integers\" rel=\"nofollow\">Integers</a></li>\n<li><a href=\"https://github.com/edn-format/edn#floating-point-numbers\" rel=\"nofollow\">Floating point numbers</a></li>\n<li><a href=\"https://github.com/edn-format/edn#vectors\" rel=\"nofollow\">Vectors</a> (or arrays)</li>\n<li><a href=\"https://github.com/edn-format/edn#maps\" rel=\"nofollow\">Maps</a> (or hash, dicts, hashmaps, etc.)</li>\n</ul>\n<p>Exceptions:</p>\n<ul>\n<li><a href=\"https://github.com/edn-format/edn#nil\" rel=\"nofollow\">nil</a> is not allowed, this includes\nJSON's null which is not allowed. Instead consider:\n<ol>\n<li>using an empty string (\"\") as the value,</li>\n<li>using the number 0 as the value,</li>\n<li>or omitting a key-value pair.</li>\n</ol>\n</li>\n<li><a href=\"https://github.com/edn-format/edn#symbols\" rel=\"nofollow\">Symbols</a> are not allowed</li>\n<li><a href=\"https://github.com/edn-format/edn#keywords\" rel=\"nofollow\">Keywords</a> are not allowed</li>\n<li><a href=\"https://github.com/edn-format/edn#lists\" rel=\"nofollow\">Lists</a> are not allowed, please\nuse <a href=\"https://github.com/edn-format/edn#vectors\" rel=\"nofollow\">vectors</a> instead</li>\n<li><a href=\"https://github.com/edn-format/edn#sets\" rel=\"nofollow\">Sets</a> are not allowed</li>\n<li><a href=\"https://github.com/edn-format/edn#tagged-elements\" rel=\"nofollow\">Tagged elements</a> are\nnot allowed</li>\n</ul>\n<p><code>kim-edn</code> has been adapted and updated from the Python <code>json</code> module. It\nexposes an API familiar to users of the standard library.\n(See <a href=\"https://docs.python.org/3.8/library/pickle.html#module-pickle\" rel=\"nofollow\">pickle</a>,\nor\n<a href=\"https://docs.python.org/3.8/library/marshal.html\" rel=\"nofollow\">marshal</a>, or\n<a href=\"https://docs.python.org/3.8/library/json.html\" rel=\"nofollow\">json</a> modules.)</p>\n<p>Encoding basic Python object hierarchies::</p>\n<pre>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">kim_edn</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">([</span><span class=\"s2\">\"short-name\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"source-value\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"hcp\"</span><span class=\"p\">]}])</span>\n    <span class=\"s1\">'[\"short-name\" {\"source-value\" [\"hcp\"]}]'</span>\n\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">P6_3/mmc\"</span><span class=\"p\">))</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">P6_3/mmc\"</span>\n\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">\"</span>\n\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"domain\"</span><span class=\"p\">:</span> <span class=\"s2\">\"openkim.org\"</span><span class=\"p\">,</span> <span class=\"s2\">\"data-method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"computation\"</span><span class=\"p\">,</span> <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">},</span> <span class=\"n\">sort_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"author\"</span> <span class=\"s2\">\"John Doe\"</span> <span class=\"s2\">\"data-method\"</span> <span class=\"s2\">\"computation\"</span> <span class=\"s2\">\"domain\"</span> <span class=\"s2\">\"openkim.org\"</span><span class=\"p\">}</span>\n\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">io</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"p\">()</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">([</span><span class=\"s1\">'streaming API'</span><span class=\"p\">],</span> <span class=\"n\">io</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span>\n    <span class=\"s1\">'[\"streaming API\"]'</span>\n</pre>\n<p>Pretty printing::</p>\n<pre>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">kim_edn</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"domain\"</span><span class=\"p\">:</span> <span class=\"s2\">\"openkim.org\"</span><span class=\"p\">,</span> <span class=\"s2\">\"data-method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"computation\"</span><span class=\"p\">,</span> <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">},</span> <span class=\"n\">sort_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"author\"</span> <span class=\"s2\">\"John Doe\"</span>\n        <span class=\"s2\">\"data-method\"</span> <span class=\"s2\">\"computation\"</span>\n        <span class=\"s2\">\"domain\"</span> <span class=\"s2\">\"openkim.org\"</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>Decoding KIM-EDN::</p>\n<pre>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">kim_edn</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"source-value\"</span><span class=\"p\">:</span> <span class=\"mf\">6.9790981921</span><span class=\"p\">,</span> <span class=\"s2\">\"source-unit\"</span><span class=\"p\">:</span> <span class=\"s2\">\"angstrom\"</span><span class=\"p\">}]</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'[\"a\", {\"source-value\": 6.9790981921, \"source-unit\": \"angstrom\"}]'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">obj</span>\n    <span class=\"kc\">True</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'[\"a\", {\"source-value\": 6.9790981921, \"source-unit\": \"angstrom\"}]'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">obj</span>\n    <span class=\"kc\">True</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'\"</span><span class=\"se\">\\\\</span><span class=\"s1\">\"foo</span><span class=\"se\">\\\\</span><span class=\"s1\">bar\"'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'\"foo</span><span class=\"se\">\\x08</span><span class=\"s1\">ar'</span>\n    <span class=\"kc\">True</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"n\">obj</span>\n    <span class=\"kc\">True</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">io</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"s1\">'[\"openkim.org\"]'</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'openkim.org'</span>\n    <span class=\"kc\">True</span>\n</pre>\n<p>Decoding Commented KIM-EDN::</p>\n<pre>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"property-id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"tag:brunnels@noreply.openkim.org,2016-05-11:property/atomic-mass\"</span><span class=\"p\">}</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c_str</span> <span class=\"o\">=</span> <span class=\"s1\">'{</span><span class=\"se\">\\n</span><span class=\"s1\">  ; property-id</span><span class=\"se\">\\n</span><span class=\"s1\">  \"property-id\"           \"tag:brunnels@noreply.openkim.org,2016-05-11:property/atomic-mass\" ; property id containing the unique ID of the property.</span><span class=\"se\">\\n</span><span class=\"s1\"> }'</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">c_str</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">obj</span>\n    <span class=\"kc\">True</span>\n</pre>\n<p>Specializing KIM-EDN object decoding::</p>\n<pre>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">kim_edn</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">as_complex</span><span class=\"p\">(</span><span class=\"n\">dct</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"s1\">'__complex__'</span> <span class=\"ow\">in</span> <span class=\"n\">dct</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"nb\">complex</span><span class=\"p\">(</span><span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"s1\">'real'</span><span class=\"p\">],</span> <span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"s1\">'imag'</span><span class=\"p\">])</span>\n    <span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">dct</span>\n    <span class=\"o\">...</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'{\"__complex__\": true, \"real\": 1, \"imag\": 2}'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>     <span class=\"n\">object_hook</span><span class=\"o\">=</span><span class=\"n\">as_complex</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"n\">j</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'1.1'</span><span class=\"p\">,</span> <span class=\"n\">parse_float</span><span class=\"o\">=</span><span class=\"n\">Decimal</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'1.1'</span><span class=\"p\">)</span>\n    <span class=\"kc\">True</span>\n</pre>\n<p>Specializing KIM-EDN object encoding::</p>\n<pre>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">kim_edn</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">encode_complex</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">real</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">imag</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>     <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">'Object of type </span><span class=\"si\">{}</span><span class=\"s1\"> is not '</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>     <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"s1\">'KIM-EDN serializable'</span>\n    <span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">encode_complex</span><span class=\"p\">)</span>\n    <span class=\"s1\">'[2.0 1.0]'</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">KIMEDNEncoder</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">encode_complex</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"n\">j</span><span class=\"p\">)</span>\n    <span class=\"s1\">'[2.0 1.0]'</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">kim_edn</span><span class=\"o\">.</span><span class=\"n\">KIMEDNEncoder</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">encode_complex</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">iterencode</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"n\">j</span><span class=\"p\">))</span>\n    <span class=\"s1\">'[2.0 1.0]'</span>\n</pre>\n<p>Using <code>kim_edn.tool</code> from the shell to validate and pretty-print::</p>\n<pre>    $ <span class=\"nb\">echo</span> <span class=\"s1\">'{\"kim_edn\" \"obj\"}'</span> <span class=\"p\">|</span> python -m kim_edn.tool\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"kim_edn\"</span> <span class=\"s2\">\"obj\"</span>\n    <span class=\"o\">}</span>\n\n    $ <span class=\"nb\">echo</span> <span class=\"s1\">'{\"property-id\" \"tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal\"}'</span> <span class=\"p\">|</span> python -m kim_edn.tool\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"property-id\"</span> <span class=\"s2\">\"tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal\"</span>\n    <span class=\"o\">}</span>\n\n    $ <span class=\"nb\">echo</span> <span class=\"s1\">'{\"foo\": [\"bar\", \"baz\"]}'</span> <span class=\"p\">|</span> python -m kim_edn.tool\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"foo\"</span> <span class=\"o\">[</span>\n            <span class=\"s2\">\"bar\"</span>\n            <span class=\"s2\">\"baz\"</span>\n        <span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n\n    $ <span class=\"nb\">echo</span> <span class=\"s1\">'{\"foo\" [\"bar\" \"baz\"]}'</span> <span class=\"p\">|</span> python -m kim_edn.tool\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"foo\"</span> <span class=\"o\">[</span>\n            <span class=\"s2\">\"bar\"</span>\n            <span class=\"s2\">\"baz\"</span>\n        <span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n\n    $ <span class=\"nb\">echo</span> <span class=\"s1\">'{\"property-id\" \"tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-potential-energy-hexagonal-crystal\" \"instance-id\" 1 \"space-group\" {\"source-value\" \"P6_3/mmc\"} \"basis-atom-coordinates\" {\"source-value\" [[0, 0, 0][0.5, 0, 0.5]]}}'</span> <span class=\"p\">|</span> python -m kim_edn.tool\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"property-id\"</span> <span class=\"s2\">\"tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-potential-energy-hexagonal-crystal\"</span>\n        <span class=\"s2\">\"instance-id\"</span> <span class=\"m\">1</span>\n        <span class=\"s2\">\"space-group\"</span> <span class=\"o\">{</span>\n            <span class=\"s2\">\"source-value\"</span> <span class=\"s2\">\"P6_3/mmc\"</span>\n        <span class=\"o\">}</span>\n        <span class=\"s2\">\"basis-atom-coordinates\"</span> <span class=\"o\">{</span>\n            <span class=\"s2\">\"source-value\"</span> <span class=\"o\">[</span>\n                <span class=\"o\">[</span>\n                    <span class=\"m\">0</span>\n                    <span class=\"m\">0</span>\n                    <span class=\"m\">0</span>\n                <span class=\"o\">]</span>\n                <span class=\"o\">[</span>\n                    <span class=\"m\">0</span>.5\n                    <span class=\"m\">0</span>\n                    <span class=\"m\">0</span>.5\n                <span class=\"o\">]</span>\n            <span class=\"o\">]</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre>\n<p><strong>Note:</strong></p>\n<p>This module's encoders and decoders preserve input and output order by\ndefault. Order is only lost if the underlying containers are unordered.</p>\n<h2>Encoders and Decoders</h2>\n<p>KIM-EDN decoder (KIMEDNDecoder) object, performs the following translations\nin decoding by default:</p>\n<table>\n<thead>\n<tr>\n<th>KIM-EDN</th>\n<th>Python</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>object</td>\n<td>dict</td>\n</tr>\n<tr>\n<td>Vectors (or \"arrays\")</td>\n<td>list</td>\n</tr>\n<tr>\n<td>Strings</td>\n<td>str</td>\n</tr>\n<tr>\n<td>Integers numbers (int)</td>\n<td>int</td>\n</tr>\n<tr>\n<td>Floating point numbers (real)</td>\n<td>float</td>\n</tr>\n<tr>\n<td>true</td>\n<td>True</td>\n</tr>\n<tr>\n<td>false</td>\n<td>False</td>\n</tr></tbody></table>\n<p>KIM-EDN encoder (KIMEDNEncoder) for OpenKIM Python data structures, supports\nthe following objects and types by default:</p>\n<table>\n<thead>\n<tr>\n<th>Python</th>\n<th>KIM-EDN</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dict</td>\n<td>Maps (or \"hash\", \"dicts\", \"hashmaps\", etc.)</td>\n</tr>\n<tr>\n<td>list</td>\n<td>Vectors (or \"arrays\")</td>\n</tr>\n<tr>\n<td>str</td>\n<td>Strings</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integers numbers</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Floating point numbers</td>\n</tr>\n<tr>\n<td>True</td>\n<td>true</td>\n</tr>\n<tr>\n<td>False</td>\n<td>false</td>\n</tr></tbody></table>\n<h2>Installing kim-edn</h2>\n<h3>Requirements</h3>\n<p>You need Python 3.6 or later to run <code>kim-edn</code>. You can have multiple Python\nversions (2.x and 3.x) installed on the same system without problems.</p>\n<p>To install Python 3 for different Linux flavors, macOS and Windows, packages\nare available at<br>\n<a href=\"https://www.python.org/getit/\" rel=\"nofollow\">https://www.python.org/getit/</a></p>\n<h3>Using pip</h3>\n<p><strong>pip</strong> is the most popular tool for installing Python packages, and the one\nincluded with modern versions of Python.</p>\n<p><code>kim-edn</code> can be installed with <code>pip</code>:</p>\n<pre>pip install kim-edn\n</pre>\n<p><strong>Note:</strong></p>\n<p>Depending on your Python installation, you may need to use <code>pip3</code> instead of\n<code>pip</code>.</p>\n<pre>pip3 install kim-edn\n</pre>\n<p>Depending on your configuration, you may have to run <code>pip</code> like this:</p>\n<pre>python3 -m pip install kim-edn\n</pre>\n<h3>Using pip (GIT Support)</h3>\n<p><code>pip</code> currently supports cloning over <code>git</code></p>\n<pre>pip install git+https://github.com/openkim/kim-edn.git\n</pre>\n<p>For more information and examples, see the\n<a href=\"https://pip.pypa.io/en/stable/reference/pip_install/#id18\" rel=\"nofollow\">pip install</a>\nreference.</p>\n<h3>Using conda</h3>\n<p><strong>conda</strong> is the package management tool for Anaconda Python installations.</p>\n<p>Installing <code>kim-edn</code> from the <code>conda-forge</code> channel can be achieved by adding\n<code>conda-forge</code> to your channels with:</p>\n<pre>conda config --add channels conda-forge\n</pre>\n<p>Once the <code>conda-forge</code> channel has been enabled, <code>kim-edn</code> can be installed\nwith:</p>\n<pre>conda install kim-edn\n</pre>\n<p>It is possible to list all of the versions of <code>kim-edn</code> available on your\nplatform with:</p>\n<pre>conda search kim-edn --channel conda-forge\n</pre>\n<h2>References</h2>\n<p>This module has been adapted and updated from the\n<a href=\"https://docs.python.org\" rel=\"nofollow\">python</a> <strong>json</strong> module to comply with the\n<a href=\"https://openkim.org/doc/schema/edn-format\" rel=\"nofollow\">subset of <strong>edn</strong> format used in <strong>KIM</strong></a>.</p>\n<h2>Copyright</h2>\n<p>Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019 Python Software\nFoundation;<br>\nAll Rights Reserved</p>\n<p>Copyright (c) 2019, Regents of the University of Minnesota.<br>\nAll Rights Reserved</p>\n<h2>Contributing</h2>\n<p>Contributors:<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Yaser Afshar</p>\n\n          </div>"}, "last_serial": 6734499, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d0b1f2b230673d85fead677c390df047", "sha256": "6eeed4c16d21bb334215ecab3410f7b64ad7926fa206540367c0021bef6cff74"}, "downloads": -1, "filename": "kim_edn-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d0b1f2b230673d85fead677c390df047", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38785, "upload_time": "2020-02-12T14:58:33", "upload_time_iso_8601": "2020-02-12T14:58:33.206378Z", "url": "https://files.pythonhosted.org/packages/31/fe/22a535f13799ec3c5d13bbf4a5142b34b724cb53917cc166e00853af6205/kim_edn-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13afae62c5cf18b57577bbecc2c9322c", "sha256": "bab88a0a890598577a5dabe0ff19ed573ef7a0be547e5a47b15deeb4ec711db5"}, "downloads": -1, "filename": "kim_edn-1.0.0.tar.gz", "has_sig": false, "md5_digest": "13afae62c5cf18b57577bbecc2c9322c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41989, "upload_time": "2020-02-12T14:58:34", "upload_time_iso_8601": "2020-02-12T14:58:34.521693Z", "url": "https://files.pythonhosted.org/packages/57/0c/d8cbc6141bb6a8271b42464179b897e31d7506ccd32f130f77189885696d/kim_edn-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "bd395bb7a8323b2081b958a554affdc7", "sha256": "e64d0dd0e87c1f299bee08d2739aa731dfcd49838e96053bfc35395e42dcf0d7"}, "downloads": -1, "filename": "kim_edn-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bd395bb7a8323b2081b958a554affdc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39380, "upload_time": "2020-02-28T13:59:33", "upload_time_iso_8601": "2020-02-28T13:59:33.526789Z", "url": "https://files.pythonhosted.org/packages/1f/ed/8f55d1995e6f661d4e7a211ad34f519e6cca31af9f6f58ea1e221cc52f6c/kim_edn-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aff1a2c25662b25e685f3c57cf2030b1", "sha256": "47aaf852cc8c2876be743c91d230de512d803e0be4c1d0e2b6aabc6a80552c9a"}, "downloads": -1, "filename": "kim_edn-1.1.0.tar.gz", "has_sig": false, "md5_digest": "aff1a2c25662b25e685f3c57cf2030b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44438, "upload_time": "2020-02-28T13:59:34", "upload_time_iso_8601": "2020-02-28T13:59:34.951442Z", "url": "https://files.pythonhosted.org/packages/cc/b9/dba76c72d13f597dfc30c5e4f8cda460ec55178cd2bbe5ce396e37aedb69/kim_edn-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "1ce00b793d55bee0767440cf426cc782", "sha256": "82e925955e3f08ea5d4549e2eea69c7f496a3cbfb99540d0dee1a4020a1eb740"}, "downloads": -1, "filename": "kim_edn-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1ce00b793d55bee0767440cf426cc782", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39879, "upload_time": "2020-03-02T16:16:24", "upload_time_iso_8601": "2020-03-02T16:16:24.642160Z", "url": "https://files.pythonhosted.org/packages/bc/f4/7f547328d6bb6b896031506042dd1c5337cb91700c38cc39ca693ea76184/kim_edn-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a13e89b2190f9dfcfbb805a0f9f15f70", "sha256": "7c47d67f5dc110c35238abadb0d9c421ced11f959e5a440858beafb57166de83"}, "downloads": -1, "filename": "kim-edn-1.2.0.tar.gz", "has_sig": false, "md5_digest": "a13e89b2190f9dfcfbb805a0f9f15f70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45660, "upload_time": "2020-03-02T16:16:26", "upload_time_iso_8601": "2020-03-02T16:16:26.452441Z", "url": "https://files.pythonhosted.org/packages/71/00/75a843f53874f43e476a84fceaa65d629a07bc0e9182b5bcf909b799009b/kim-edn-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ce00b793d55bee0767440cf426cc782", "sha256": "82e925955e3f08ea5d4549e2eea69c7f496a3cbfb99540d0dee1a4020a1eb740"}, "downloads": -1, "filename": "kim_edn-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1ce00b793d55bee0767440cf426cc782", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39879, "upload_time": "2020-03-02T16:16:24", "upload_time_iso_8601": "2020-03-02T16:16:24.642160Z", "url": "https://files.pythonhosted.org/packages/bc/f4/7f547328d6bb6b896031506042dd1c5337cb91700c38cc39ca693ea76184/kim_edn-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a13e89b2190f9dfcfbb805a0f9f15f70", "sha256": "7c47d67f5dc110c35238abadb0d9c421ced11f959e5a440858beafb57166de83"}, "downloads": -1, "filename": "kim-edn-1.2.0.tar.gz", "has_sig": false, "md5_digest": "a13e89b2190f9dfcfbb805a0f9f15f70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45660, "upload_time": "2020-03-02T16:16:26", "upload_time_iso_8601": "2020-03-02T16:16:26.452441Z", "url": "https://files.pythonhosted.org/packages/71/00/75a843f53874f43e476a84fceaa65d629a07bc0e9182b5bcf909b799009b/kim-edn-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:44 2020"}