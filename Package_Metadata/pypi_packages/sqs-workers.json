{"info": {"author": "Doist Developers", "author_email": "dev@doist.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "\nSQS Workers\n===========\n\nHow can I use it?\n-----------------\n\nUnless you are the part of the [Doist development team](https://github.com/orgs/Doist/people),\nyou most likely don't need it. It's something opinionated, built out of our own internal needs\nand probably provides little value for outside developers.\n\nQueue processors are in abundance (see http://queues.io/ for examples), and\nthere is no shortage of SQS queue processors on\n[PyPI](https://pypi.org/search/?q=SQS), so please don't put your high hopes\non this particular implementation\n\nGot it, but how can I start using it anyway?\n--------------------------------------------\n\nInstall the package with\n\n```bash\npip install sqs-workers\n```\n\nConfigure your boto3 library to provide access requisites for your installation\nwith [something like this](https://boto3.readthedocs.io/en/latest/guide/quickstart.html#configuration):\n\n```bash\naws configure\n```\n\nDon't forget to set your preferred AWS region.\n\nThen you will start managing two systems (most likely, from the same codebase):\none of them adds messages to the queue and another one executes them.\n\n```python\nfrom sqs_workers import SQSEnv, create_standard_queue\n\n# This environment will use AWS requisites from ~/.aws/ directory\nsqs = SQSEnv()\n\n# Create a new queue.\n# Note that you can use AWS web interface for the same action as well, the\n# web interface provides more options. You only need to do it once.\ncreate_standard_queue(sqs, \"emails\")\n\n# Get the queue object\nqueue = sqs.queue(\"emails\")\n\n# Register a queue processor\n@queue.processor(\"send_email\")\ndef send_email(to, subject, body):\n    print(f\"Sending email {subject} to {to}\")\n```\n\n\nThen there are two ways of adding tasks to the queue. Classic (aka \"explicit\"):\n\n```python\nqueue.add_job(\"send_email\", to=\"user@example.com\", subject=\"Hello world\", body=\"hello world\")\n```\n\n\nAnd the \"Celery way\" (we mimic the Celery API to some extent)\n\n```python\nsend_email.delay(to=\"user@example.com\", subject=\"Hello world\", body=\"hello world\")\n```\n\nTo process the queue you have to run workers manually. Create a new file which\nwill contain the definition of the sqs object and register all processors (most likely,\nby importing necessary modules from your project), and then run SQS\n\n```python\nfrom sqs_workers import SQSEnv\nsqs = SQSEnv()\n...\nsqs.queue('emails').process_queue()\n```\n\nIn production we usually don't handle multiple queues in the same process,\nbut for the development environment it's easier to tackle with all the queues\nat once with\n\n```python\nsqs.process_queues()\n```\n\nSerialization\n-------------\n\nThere are two serializers: json and pickle.\n\n\nBaked tasks\n-----------\n\nYou can create so-called \"baked async tasks\", entities which besides the\ntask itself, contain arguments which have to be used to call the task.\n\nThink of baked tasks as of light version of\n[Celery signatures](http://docs.celeryproject.org/en/latest/userguide/canvas.html#signatures)\n\n\n```python\ntask = send_email.bake(to='user@example.com', subject='Hello world', body='hello world')\ntask.delay()\n```\n\nIs the same as\n\n```python\nsend_email.delay(to='user@example.com', subject='Hello world', body='hello world')\n```\n\nSynchronous task execution\n--------------------------\n\nIn Celery you can run any task synchronously if you just call it as a function\nwith arguments. Our AsyncTask raises a RuntimeError for this case.\n\n```python\nsend_email(to='user@example.com', subject='Hello world', body='hello world')\n...\nRuntimeError: Async task email.send_email called synchronously (probably,\nby mistake). Use either AsyncTask.run(...) to run the task synchronously\nor AsyncTask.delay(...) to add it to the queue\n```\n\nIf you want to run a task synchronously, use `run()` method of the task.\n\n```\nsend_email.run(to='user@example.com', subject='Hello world', body='hello world')\n```\n\n\nFIFO queues\n-----------\n\nFifo queues can be created with `create_fifo_queue` and has to have the name\nwhich ends with \".fifo\".\n\n```python\nfrom sqs_workers import SQSEnv, create_fifo_queue\nsqs = SQSEnv()\n\ncreate_fifo_queue(sqs, 'emails_dead.fifo')\ncreate_fifo_queue(sqs, 'emails.fifo',\n    redrive_policy=sqs.redrive_policy('emails_dead.fifo', 3)\n)\n```\n\nUnless the flag `content_based_deduplication` is set, every message has to be\nsent with an attribute `_deduplication_id`. By default all messages have the\nsame message group `default`, but you can change it with `_group_id`.\n\n```python\nsqs.queue(\"emails.fifo\").add_job(\n    'send_email', _deduplication_id=subject, _group_id=email, **kwargs)\n```\n\n[More about FIFO queues on AWS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html)\n\n\nException processing\n--------------------\n\nIf task processing ended up with an exception, the error is logged and the\ntask is returned back to the queue after a while. The exact behavior is defined\nby queue settings.\n\n\nCustom processors\n-----------------\n\nYou can define your own processor if you need to perform\nsome specific actions before of after executing a specific task.\n\nExample for the custom processor\n\n```python\nfrom sqs_workers import SQSEnv\nfrom sqs_workers.processors import Processor\n\nclass CustomProcessor(Processor):\n    def process(self, job_kwargs):\n        print(f'Processing {self.queue_name}.{self.job_name} with {job_kwargs}')\n        super(CustomProcessor, self).process(job_kwargs)\n\nsqs = SQSEnv(processor_maker=CustomProcessor)\n```\n\nWorking with contexts\n---------------------\n\nContext which is implicitly passed to the worker via the job message. Can\nbe used there for logging or profiling purposes, for example.\n\nUsage example.\n\n\n```python\nqueue = sqs.queue(\"q1\")\n\n@queue.processor('q1', 'hello_world', pass_context=True)\ndef hello_world(username=None, context=None):\n    print(f'Hello {username} from {context[\"remote_addr\"]}')\n\nwith sqs.context(remote_addr='127.0.0.1'):\n    hello_world.delay(username='Foo')\n\nqueue.process_batch()\n```\n\nAlternatively, you can set the context like this.\n\n```python\nsqs.context['remote_addr'] = '127.0.0.1'\nhello_world.delay(username='Foo')\n```\n\nAnd then, when the context needs to be cleared:\n\n```python\nsqs.context.clear()\n```\n\nIn a web application you usually call it at the end of the processing\nof the web request.\n\n\nAutomatic applying of the context for all tasks\n------------------------------------------------\n\nInstead of dealing with the context inside every processing function, you\ncan perform this in processors by subclassing them.\n\n```python\nimport os\nfrom sqs_workers import SQSEnv\nfrom sqs_workers.processors import Processor\n\nclass CustomProcessor(Processor):\n    def process(self, job_kwargs, job_context):\n        os.environ['REMOTE_ADDR'] = job_context['remote_addr']\n        super(CustomProcessor, self).process(job_kwargs, job_context)\n        os.unsetenv('REMOTE_ADDR')\n\nsqs = SQSEnv(\n    processor_maker=CustomProcessor,\n)\n```\n\nRaw queues\n----------\n\nRaw queues can have only one processor, and this should be a function,\naccepting message as its only argument.\n\nRaw queues are helpful to process messages, added to SQS from external\nsources, such as CloudWatch events.\n\nYou start very much the same way, creating a new standard queue if needed.\n\n```python\nfrom sqs_workers import SQSEnv, create_standard_queue\nsqs = SQSEnv()\ncreate_standard_queue(sqs, 'cron')\n```\n\nThen you get a queue, but provide a queue_maker parameter to it, to create a\nqueue of the necessary type, and you define a processor for it.\n\n```python\nfrom sqs_workers import RawQueue\n\ncron = sqs.queue('cron', RawQueue)\n\n@cron.raw_processor()\ndef processor(message):\n    print(message.body)\n```\n\nThen start processing your queue as usual:\n\n```python\ncron.process_queue()\n```\n\nYou can also send raw messages to the queue, but this is probably less useful:\n\n```python\ncron.add_raw_job(\"Hello world\")\n```\n\n\nProcessing Messages from CloudWatch\n-----------------------------------\n\nBy default message body by CloudWatch scheduler has following JSON structure.\n\n```json\n{\n  \"version\": \"0\",\n  \"id\": \"a9a10406-9a1f-0ddc-51ae-08db551fac42\",\n  \"detail-type\": \"Scheduled Event\",\n  \"source\": \"aws.events\",\n  \"account\": \"NNNNNNNNNN\",\n  \"time\": \"2019-09-20T09:19:56Z\",\n  \"region\": \"eu-west-1\",\n  \"resources\": [\n    \"arn:aws:events:eu-west-1:NNNNNNNNNN:rule/Playground\"\n  ],\n  \"detail\": {}\n}\n```\n\nHeaders of the message:\n\n```python\n{\n    'SenderId': 'AIDAJ2E....',\n    'ApproximateFirstReceiveTimestamp': '1568971264367',\n    'ApproximateReceiveCount': '1',\n    'SentTimestamp': '1568971244845',\n}\n```\n\nYou can pass any valid JSON as a message though, and it will be passed as\nis to the message body. Something like this:\n\n```json\n{\"message\": \"Hello world\"}\n```\n\n\nDead-letter queues and redrive\n------------------------------\n\nOn creating the queue you can set the fallback dead-letter queue and redrive\npolicy, which can look like this\n\n```python\nfrom sqs_workers import SQSEnv, create_standard_queue\nsqs = SQSEnv()\n\ncreate_standard_queue(sqs, 'emails_dead')\ncreate_standard_queue(sqs, 'emails',\n    redrive_policy=sqs.redrive_policy('emails_dead', 3)\n)\n```\n\nThis means \"move the message to the email_deadletters queue after four (3 + 1)\nfailed attempts to send it to the recipient\"\n\n\nBackoff policies\n----------------\n\nYou can define the backoff policy for the entire environment or for specific\nqueue.\n\n\n```python\nqueue = sqs.queue(\"emails\", backoff_policy=DEFAULT_BACKOFF)\n\n@queue.processor('send_email')\ndef send_email(to, subject, body):\n    print(f\"Sending email {subject} to {to}\")\n```\n\nDefault policy is the exponential backoff. It's recommended to always set\nboth backoff policy and dead-letter queue to limit the maximum number\nof execution attempts.\n\nAlternatively you can set the backoff to IMMEDIATE_RETURN to re-execute\nfailed task immediately.\n\n```python\nqueue = sqs.queue(\"emails\", backoff_policy=IMMEDIATE_RETURN)\n\n@queue.processor('send_email')\ndef send_email(to, subject, body):\n    print(f\"Sending email {subject} to {to}\")\n```\n\nShutdown policies\n-----------------\n\nWhen launching the queue processor with process_queue(), it's possible\nto optionally set when it has to be stopped.\n\nFollowing shutdown policies are supported:\n\n- IdleShutdown(idle_seconds): return from function when no new tasks\n  are sent for specific period of time\n\n- MaxTasksShutdown(max_tasks): return from function after processing at\n  least max_task jobs. Can be helpful to prevent memory leaks\n\nDefault policy is NeverShutdown. It's also possible to combine two previous\npolicies with OrShutdown or AndShutdown policies, or create\ncustom classes for specific behavior.\n\nExample of stopping processing the queue after 5 minutes of inactivity:\n\n```python\nfrom sqs_workers import SQSEnv\nfrom sqs_workers.shutdown_policies import IdleShutdown\n\nsqs = SQSEnv()\nsqs.queue(\"foo\").process_queue(shutdown_policy=IdleShutdown(idle_seconds=300))\n```\n\nProcessing dead-letter queue by pushing back failed messages\n------------------------------------------------------------\n\nThe most common way to process a dead-letter queue is to fix the main bug\ncausing messages to appear there in the first place, and then to re-process\nthese messages again.\n\nWith sqs-workers in can be done by putting back all the messages from a\ndead-letter queue back to the main one. While processing the queue, the\nprocessor takes every message and push it back to the upstream queue with a\nhard-coded delay of 1 second.\n\nUsage example:\n\n    >>> from sqs_workers import JobQueue\n    >>> from sqs_workers.shutdown_policies IdleShutdown\n    >>> from sqs_workers.deadletter_queue import DeadLetterQueue\n    >>> env = SQSEnv()\n    >>> foo = env.queue(\"foo\")\n    >>> foo_dead = env.queue(\"foo_dead\", DeadLetterQueue.maker(foo))\n    >>> foo_dead.process_queue(shutdown_policy=IdleShutdown(10))\n\nThis code takes all the messages in foo_dead queue and push them back to\nthe foo queue. Then it waits 10 seconds to ensure no new messages appear,\nand quit.\n\n\nUsing in unit tests with MemorySession\n--------------------------------------\n\nThere is a special MemorySession which can be used as a quick'n'dirty\nreplacement for real queues in unit tests. If you have a function `create_task`\nwhich adds some tasks to the queue and you want to test how it works, you ca\ntechnically write your tests like this:\n\n```python\nfrom sqs_workers import SQSEnv\nenv = SQSEnv()\n\ndef test_task_creation_side_effects():\n    create_task()\n    env.process_batch('foo')\n    ...\n```\n\nThe problem is that your test starts depending on AWS (or localstack)\ninfrastructure, which you don't always need. What you can do instead is you\ncan pass MemorySession to your SQSEnv instance.\n\n```python\nfrom sqs_workers import SQSEnv, MemorySession\nenv = SQSEnv(MemorySession())\n```\n\nPlease note that MemorySession has some serious limitations, and may not fit\nwell your use-case. Namely, when you work with MemorySession:\n\n- Redrive policy doesn't work\n- There is no differences between standard and FIFO queues\n- FIFO queues don't support content-based deduplication\n- Delayed tasks executed ineffectively: the task is gotten from the queue,\n  and if the time hasn't come yet, the task is put back.\n- API can return slightly different results\n\n\nTesting with AWS\n----------------\n\nMake sure you have all dependencies installed, and boto3 client configured\n([ref](https://boto3.readthedocs.io/en/latest/guide/quickstart.html#configuration))\nand then run\n\n```bash\npytest -k aws\n```\n\nAlternatively, to test all supported versions, run\n\n```bash\ntox -- -k aws\n```\n\nTesting with localstack\n-----------------------\n\nLocalstack tests should perform faster than testing against AWS, and besides,\nthey work well in offline.\n\nRun [localstack](https://github.com/localstack/localstack) and make sure\nthat the SQS endpoint is available by its default address http://localhost:4576\n\nThen run\n\n```bash\npytest -k localstack\n```\n\nor\n\n```bash\ntox -- -k localstack\n```\n\n\nWhy it depends on werkzeug? \ud83d\ude31\n------------------------------\n\nThe only reason is [werkzeug.utils.validate_arguments](http://werkzeug.pocoo.org/docs/dev/utils/#werkzeug.utils.validate_arguments)\nwhich we love and we are lazy enough to move it to this codebase.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Doist/sqs-workers", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sqs-workers", "package_url": "https://pypi.org/project/sqs-workers/", "platform": "", "project_url": "https://pypi.org/project/sqs-workers/", "project_urls": {"Homepage": "https://github.com/Doist/sqs-workers"}, "release_url": "https://pypi.org/project/sqs-workers/0.5.1/", "requires_dist": ["boto3", "future", "pytest-runner", "attrs", "typing", "werkzeug"], "requires_python": ">=2.7", "summary": "SQS Workers.", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SQS Workers</h1>\n<h2>How can I use it?</h2>\n<p>Unless you are the part of the <a href=\"https://github.com/orgs/Doist/people\" rel=\"nofollow\">Doist development team</a>,\nyou most likely don't need it. It's something opinionated, built out of our own internal needs\nand probably provides little value for outside developers.</p>\n<p>Queue processors are in abundance (see <a href=\"http://queues.io/\" rel=\"nofollow\">http://queues.io/</a> for examples), and\nthere is no shortage of SQS queue processors on\n<a href=\"https://pypi.org/search/?q=SQS\" rel=\"nofollow\">PyPI</a>, so please don't put your high hopes\non this particular implementation</p>\n<h2>Got it, but how can I start using it anyway?</h2>\n<p>Install the package with</p>\n<pre>pip install sqs-workers\n</pre>\n<p>Configure your boto3 library to provide access requisites for your installation\nwith <a href=\"https://boto3.readthedocs.io/en/latest/guide/quickstart.html#configuration\" rel=\"nofollow\">something like this</a>:</p>\n<pre>aws configure\n</pre>\n<p>Don't forget to set your preferred AWS region.</p>\n<p>Then you will start managing two systems (most likely, from the same codebase):\none of them adds messages to the queue and another one executes them.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span><span class=\"p\">,</span> <span class=\"n\">create_standard_queue</span>\n\n<span class=\"c1\"># This environment will use AWS requisites from ~/.aws/ directory</span>\n<span class=\"n\">sqs</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a new queue.</span>\n<span class=\"c1\"># Note that you can use AWS web interface for the same action as well, the</span>\n<span class=\"c1\"># web interface provides more options. You only need to do it once.</span>\n<span class=\"n\">create_standard_queue</span><span class=\"p\">(</span><span class=\"n\">sqs</span><span class=\"p\">,</span> <span class=\"s2\">\"emails\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the queue object</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s2\">\"emails\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Register a queue processor</span>\n<span class=\"nd\">@queue</span><span class=\"o\">.</span><span class=\"n\">processor</span><span class=\"p\">(</span><span class=\"s2\">\"send_email\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_email</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Sending email </span><span class=\"si\">{</span><span class=\"n\">subject</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">to</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then there are two ways of adding tasks to the queue. Classic (aka \"explicit\"):</p>\n<pre><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">add_job</span><span class=\"p\">(</span><span class=\"s2\">\"send_email\"</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"o\">=</span><span class=\"s2\">\"user@example.com\"</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">\"Hello world\"</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">\"hello world\"</span><span class=\"p\">)</span>\n</pre>\n<p>And the \"Celery way\" (we mimic the Celery API to some extent)</p>\n<pre><span class=\"n\">send_email</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"s2\">\"user@example.com\"</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">\"Hello world\"</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">\"hello world\"</span><span class=\"p\">)</span>\n</pre>\n<p>To process the queue you have to run workers manually. Create a new file which\nwill contain the definition of the sqs object and register all processors (most likely,\nby importing necessary modules from your project), and then run SQS</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span>\n<span class=\"n\">sqs</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s1\">'emails'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">process_queue</span><span class=\"p\">()</span>\n</pre>\n<p>In production we usually don't handle multiple queues in the same process,\nbut for the development environment it's easier to tackle with all the queues\nat once with</p>\n<pre><span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">process_queues</span><span class=\"p\">()</span>\n</pre>\n<h2>Serialization</h2>\n<p>There are two serializers: json and pickle.</p>\n<h2>Baked tasks</h2>\n<p>You can create so-called \"baked async tasks\", entities which besides the\ntask itself, contain arguments which have to be used to call the task.</p>\n<p>Think of baked tasks as of light version of\n<a href=\"http://docs.celeryproject.org/en/latest/userguide/canvas.html#signatures\" rel=\"nofollow\">Celery signatures</a></p>\n<pre><span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">send_email</span><span class=\"o\">.</span><span class=\"n\">bake</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"s1\">'user@example.com'</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Hello world'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n<span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">()</span>\n</pre>\n<p>Is the same as</p>\n<pre><span class=\"n\">send_email</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"s1\">'user@example.com'</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Hello world'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n</pre>\n<h2>Synchronous task execution</h2>\n<p>In Celery you can run any task synchronously if you just call it as a function\nwith arguments. Our AsyncTask raises a RuntimeError for this case.</p>\n<pre><span class=\"n\">send_email</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"s1\">'user@example.com'</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Hello world'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">RuntimeError</span><span class=\"p\">:</span> <span class=\"n\">Async</span> <span class=\"n\">task</span> <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">send_email</span> <span class=\"n\">called</span> <span class=\"n\">synchronously</span> <span class=\"p\">(</span><span class=\"n\">probably</span><span class=\"p\">,</span>\n<span class=\"n\">by</span> <span class=\"n\">mistake</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"n\">Use</span> <span class=\"n\">either</span> <span class=\"n\">AsyncTask</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"n\">to</span> <span class=\"n\">run</span> <span class=\"n\">the</span> <span class=\"n\">task</span> <span class=\"n\">synchronously</span>\n<span class=\"ow\">or</span> <span class=\"n\">AsyncTask</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">it</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">queue</span>\n</pre>\n<p>If you want to run a task synchronously, use <code>run()</code> method of the task.</p>\n<pre><code>send_email.run(to='user@example.com', subject='Hello world', body='hello world')\n</code></pre>\n<h2>FIFO queues</h2>\n<p>Fifo queues can be created with <code>create_fifo_queue</code> and has to have the name\nwhich ends with \".fifo\".</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span><span class=\"p\">,</span> <span class=\"n\">create_fifo_queue</span>\n<span class=\"n\">sqs</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">()</span>\n\n<span class=\"n\">create_fifo_queue</span><span class=\"p\">(</span><span class=\"n\">sqs</span><span class=\"p\">,</span> <span class=\"s1\">'emails_dead.fifo'</span><span class=\"p\">)</span>\n<span class=\"n\">create_fifo_queue</span><span class=\"p\">(</span><span class=\"n\">sqs</span><span class=\"p\">,</span> <span class=\"s1\">'emails.fifo'</span><span class=\"p\">,</span>\n    <span class=\"n\">redrive_policy</span><span class=\"o\">=</span><span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">redrive_policy</span><span class=\"p\">(</span><span class=\"s1\">'emails_dead.fifo'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Unless the flag <code>content_based_deduplication</code> is set, every message has to be\nsent with an attribute <code>_deduplication_id</code>. By default all messages have the\nsame message group <code>default</code>, but you can change it with <code>_group_id</code>.</p>\n<pre><span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s2\">\"emails.fifo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_job</span><span class=\"p\">(</span>\n    <span class=\"s1\">'send_email'</span><span class=\"p\">,</span> <span class=\"n\">_deduplication_id</span><span class=\"o\">=</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">_group_id</span><span class=\"o\">=</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p><a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\" rel=\"nofollow\">More about FIFO queues on AWS</a></p>\n<h2>Exception processing</h2>\n<p>If task processing ended up with an exception, the error is logged and the\ntask is returned back to the queue after a while. The exact behavior is defined\nby queue settings.</p>\n<h2>Custom processors</h2>\n<p>You can define your own processor if you need to perform\nsome specific actions before of after executing a specific task.</p>\n<p>Example for the custom processor</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqs_workers.processors</span> <span class=\"kn\">import</span> <span class=\"n\">Processor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomProcessor</span><span class=\"p\">(</span><span class=\"n\">Processor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">job_kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Processing </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">queue_name</span><span class=\"si\">}</span><span class=\"s1\">.</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">job_name</span><span class=\"si\">}</span><span class=\"s1\"> with </span><span class=\"si\">{</span><span class=\"n\">job_kwargs</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CustomProcessor</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">job_kwargs</span><span class=\"p\">)</span>\n\n<span class=\"n\">sqs</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">(</span><span class=\"n\">processor_maker</span><span class=\"o\">=</span><span class=\"n\">CustomProcessor</span><span class=\"p\">)</span>\n</pre>\n<h2>Working with contexts</h2>\n<p>Context which is implicitly passed to the worker via the job message. Can\nbe used there for logging or profiling purposes, for example.</p>\n<p>Usage example.</p>\n<pre><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s2\">\"q1\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@queue</span><span class=\"o\">.</span><span class=\"n\">processor</span><span class=\"p\">(</span><span class=\"s1\">'q1'</span><span class=\"p\">,</span> <span class=\"s1\">'hello_world'</span><span class=\"p\">,</span> <span class=\"n\">pass_context</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Hello </span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s1\"> from </span><span class=\"si\">{</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">\"remote_addr\"</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">remote_addr</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">):</span>\n    <span class=\"n\">hello_world</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'Foo'</span><span class=\"p\">)</span>\n\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">process_batch</span><span class=\"p\">()</span>\n</pre>\n<p>Alternatively, you can set the context like this.</p>\n<pre><span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'remote_addr'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'127.0.0.1'</span>\n<span class=\"n\">hello_world</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'Foo'</span><span class=\"p\">)</span>\n</pre>\n<p>And then, when the context needs to be cleared:</p>\n<pre><span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n<p>In a web application you usually call it at the end of the processing\nof the web request.</p>\n<h2>Automatic applying of the context for all tasks</h2>\n<p>Instead of dealing with the context inside every processing function, you\ncan perform this in processors by subclassing them.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqs_workers.processors</span> <span class=\"kn\">import</span> <span class=\"n\">Processor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomProcessor</span><span class=\"p\">(</span><span class=\"n\">Processor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">job_kwargs</span><span class=\"p\">,</span> <span class=\"n\">job_context</span><span class=\"p\">):</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">job_context</span><span class=\"p\">[</span><span class=\"s1\">'remote_addr'</span><span class=\"p\">]</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CustomProcessor</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">job_kwargs</span><span class=\"p\">,</span> <span class=\"n\">job_context</span><span class=\"p\">)</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">unsetenv</span><span class=\"p\">(</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sqs</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">(</span>\n    <span class=\"n\">processor_maker</span><span class=\"o\">=</span><span class=\"n\">CustomProcessor</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Raw queues</h2>\n<p>Raw queues can have only one processor, and this should be a function,\naccepting message as its only argument.</p>\n<p>Raw queues are helpful to process messages, added to SQS from external\nsources, such as CloudWatch events.</p>\n<p>You start very much the same way, creating a new standard queue if needed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span><span class=\"p\">,</span> <span class=\"n\">create_standard_queue</span>\n<span class=\"n\">sqs</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">()</span>\n<span class=\"n\">create_standard_queue</span><span class=\"p\">(</span><span class=\"n\">sqs</span><span class=\"p\">,</span> <span class=\"s1\">'cron'</span><span class=\"p\">)</span>\n</pre>\n<p>Then you get a queue, but provide a queue_maker parameter to it, to create a\nqueue of the necessary type, and you define a processor for it.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">RawQueue</span>\n\n<span class=\"n\">cron</span> <span class=\"o\">=</span> <span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s1\">'cron'</span><span class=\"p\">,</span> <span class=\"n\">RawQueue</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@cron</span><span class=\"o\">.</span><span class=\"n\">raw_processor</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">processor</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n</pre>\n<p>Then start processing your queue as usual:</p>\n<pre><span class=\"n\">cron</span><span class=\"o\">.</span><span class=\"n\">process_queue</span><span class=\"p\">()</span>\n</pre>\n<p>You can also send raw messages to the queue, but this is probably less useful:</p>\n<pre><span class=\"n\">cron</span><span class=\"o\">.</span><span class=\"n\">add_raw_job</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Processing Messages from CloudWatch</h2>\n<p>By default message body by CloudWatch scheduler has following JSON structure.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a9a10406-9a1f-0ddc-51ae-08db551fac42\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"detail-type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Scheduled Event\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aws.events\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"account\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NNNNNNNNNN\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-09-20T09:19:56Z\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"region\"</span><span class=\"p\">:</span> <span class=\"s2\">\"eu-west-1\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"resources\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"arn:aws:events:eu-west-1:NNNNNNNNNN:rule/Playground\"</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"detail\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Headers of the message:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'SenderId'</span><span class=\"p\">:</span> <span class=\"s1\">'AIDAJ2E....'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ApproximateFirstReceiveTimestamp'</span><span class=\"p\">:</span> <span class=\"s1\">'1568971264367'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ApproximateReceiveCount'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'SentTimestamp'</span><span class=\"p\">:</span> <span class=\"s1\">'1568971244845'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can pass any valid JSON as a message though, and it will be passed as\nis to the message body. Something like this:</p>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello world\"</span><span class=\"p\">}</span>\n</pre>\n<h2>Dead-letter queues and redrive</h2>\n<p>On creating the queue you can set the fallback dead-letter queue and redrive\npolicy, which can look like this</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span><span class=\"p\">,</span> <span class=\"n\">create_standard_queue</span>\n<span class=\"n\">sqs</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">()</span>\n\n<span class=\"n\">create_standard_queue</span><span class=\"p\">(</span><span class=\"n\">sqs</span><span class=\"p\">,</span> <span class=\"s1\">'emails_dead'</span><span class=\"p\">)</span>\n<span class=\"n\">create_standard_queue</span><span class=\"p\">(</span><span class=\"n\">sqs</span><span class=\"p\">,</span> <span class=\"s1\">'emails'</span><span class=\"p\">,</span>\n    <span class=\"n\">redrive_policy</span><span class=\"o\">=</span><span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">redrive_policy</span><span class=\"p\">(</span><span class=\"s1\">'emails_dead'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This means \"move the message to the email_deadletters queue after four (3 + 1)\nfailed attempts to send it to the recipient\"</p>\n<h2>Backoff policies</h2>\n<p>You can define the backoff policy for the entire environment or for specific\nqueue.</p>\n<pre><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s2\">\"emails\"</span><span class=\"p\">,</span> <span class=\"n\">backoff_policy</span><span class=\"o\">=</span><span class=\"n\">DEFAULT_BACKOFF</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@queue</span><span class=\"o\">.</span><span class=\"n\">processor</span><span class=\"p\">(</span><span class=\"s1\">'send_email'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_email</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Sending email </span><span class=\"si\">{</span><span class=\"n\">subject</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">to</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<p>Default policy is the exponential backoff. It's recommended to always set\nboth backoff policy and dead-letter queue to limit the maximum number\nof execution attempts.</p>\n<p>Alternatively you can set the backoff to IMMEDIATE_RETURN to re-execute\nfailed task immediately.</p>\n<pre><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s2\">\"emails\"</span><span class=\"p\">,</span> <span class=\"n\">backoff_policy</span><span class=\"o\">=</span><span class=\"n\">IMMEDIATE_RETURN</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@queue</span><span class=\"o\">.</span><span class=\"n\">processor</span><span class=\"p\">(</span><span class=\"s1\">'send_email'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_email</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Sending email </span><span class=\"si\">{</span><span class=\"n\">subject</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">to</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Shutdown policies</h2>\n<p>When launching the queue processor with process_queue(), it's possible\nto optionally set when it has to be stopped.</p>\n<p>Following shutdown policies are supported:</p>\n<ul>\n<li>\n<p>IdleShutdown(idle_seconds): return from function when no new tasks\nare sent for specific period of time</p>\n</li>\n<li>\n<p>MaxTasksShutdown(max_tasks): return from function after processing at\nleast max_task jobs. Can be helpful to prevent memory leaks</p>\n</li>\n</ul>\n<p>Default policy is NeverShutdown. It's also possible to combine two previous\npolicies with OrShutdown or AndShutdown policies, or create\ncustom classes for specific behavior.</p>\n<p>Example of stopping processing the queue after 5 minutes of inactivity:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqs_workers.shutdown_policies</span> <span class=\"kn\">import</span> <span class=\"n\">IdleShutdown</span>\n\n<span class=\"n\">sqs</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">()</span>\n<span class=\"n\">sqs</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">process_queue</span><span class=\"p\">(</span><span class=\"n\">shutdown_policy</span><span class=\"o\">=</span><span class=\"n\">IdleShutdown</span><span class=\"p\">(</span><span class=\"n\">idle_seconds</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">))</span>\n</pre>\n<h2>Processing dead-letter queue by pushing back failed messages</h2>\n<p>The most common way to process a dead-letter queue is to fix the main bug\ncausing messages to appear there in the first place, and then to re-process\nthese messages again.</p>\n<p>With sqs-workers in can be done by putting back all the messages from a\ndead-letter queue back to the main one. While processing the queue, the\nprocessor takes every message and push it back to the upstream queue with a\nhard-coded delay of 1 second.</p>\n<p>Usage example:</p>\n<pre><code>&gt;&gt;&gt; from sqs_workers import JobQueue\n&gt;&gt;&gt; from sqs_workers.shutdown_policies IdleShutdown\n&gt;&gt;&gt; from sqs_workers.deadletter_queue import DeadLetterQueue\n&gt;&gt;&gt; env = SQSEnv()\n&gt;&gt;&gt; foo = env.queue(\"foo\")\n&gt;&gt;&gt; foo_dead = env.queue(\"foo_dead\", DeadLetterQueue.maker(foo))\n&gt;&gt;&gt; foo_dead.process_queue(shutdown_policy=IdleShutdown(10))\n</code></pre>\n<p>This code takes all the messages in foo_dead queue and push them back to\nthe foo queue. Then it waits 10 seconds to ensure no new messages appear,\nand quit.</p>\n<h2>Using in unit tests with MemorySession</h2>\n<p>There is a special MemorySession which can be used as a quick'n'dirty\nreplacement for real queues in unit tests. If you have a function <code>create_task</code>\nwhich adds some tasks to the queue and you want to test how it works, you ca\ntechnically write your tests like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_task_creation_side_effects</span><span class=\"p\">():</span>\n    <span class=\"n\">create_task</span><span class=\"p\">()</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">process_batch</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>The problem is that your test starts depending on AWS (or localstack)\ninfrastructure, which you don't always need. What you can do instead is you\ncan pass MemorySession to your SQSEnv instance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_workers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSEnv</span><span class=\"p\">,</span> <span class=\"n\">MemorySession</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">SQSEnv</span><span class=\"p\">(</span><span class=\"n\">MemorySession</span><span class=\"p\">())</span>\n</pre>\n<p>Please note that MemorySession has some serious limitations, and may not fit\nwell your use-case. Namely, when you work with MemorySession:</p>\n<ul>\n<li>Redrive policy doesn't work</li>\n<li>There is no differences between standard and FIFO queues</li>\n<li>FIFO queues don't support content-based deduplication</li>\n<li>Delayed tasks executed ineffectively: the task is gotten from the queue,\nand if the time hasn't come yet, the task is put back.</li>\n<li>API can return slightly different results</li>\n</ul>\n<h2>Testing with AWS</h2>\n<p>Make sure you have all dependencies installed, and boto3 client configured\n(<a href=\"https://boto3.readthedocs.io/en/latest/guide/quickstart.html#configuration\" rel=\"nofollow\">ref</a>)\nand then run</p>\n<pre>pytest -k aws\n</pre>\n<p>Alternatively, to test all supported versions, run</p>\n<pre>tox -- -k aws\n</pre>\n<h2>Testing with localstack</h2>\n<p>Localstack tests should perform faster than testing against AWS, and besides,\nthey work well in offline.</p>\n<p>Run <a href=\"https://github.com/localstack/localstack\" rel=\"nofollow\">localstack</a> and make sure\nthat the SQS endpoint is available by its default address <a href=\"http://localhost:4576\" rel=\"nofollow\">http://localhost:4576</a></p>\n<p>Then run</p>\n<pre>pytest -k localstack\n</pre>\n<p>or</p>\n<pre>tox -- -k localstack\n</pre>\n<h2>Why it depends on werkzeug? \ud83d\ude31</h2>\n<p>The only reason is <a href=\"http://werkzeug.pocoo.org/docs/dev/utils/#werkzeug.utils.validate_arguments\" rel=\"nofollow\">werkzeug.utils.validate_arguments</a>\nwhich we love and we are lazy enough to move it to this codebase.</p>\n\n          </div>"}, "last_serial": 6080532, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "73071660cb1cda17c44e1dae01c4b2b5", "sha256": "243ca27f544b333dbc9efc46d174d8fb35fe881bb7aa85cf96a1c89d1640e1f7"}, "downloads": -1, "filename": "sqs_workers-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73071660cb1cda17c44e1dae01c4b2b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 9919, "upload_time": "2018-08-09T18:33:18", "upload_time_iso_8601": "2018-08-09T18:33:18.647963Z", "url": "https://files.pythonhosted.org/packages/f6/28/8186c57a7d4457763f47200fc670c65ec8652e12dd08216abaa619753c9e/sqs_workers-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3088a240d910a45dbdb20f724dc5c3ca", "sha256": "5b1a747813c4a4ff5b7b84c9f455c374ad13c6eaa0e79fbf95142e90ef1e01c5"}, "downloads": -1, "filename": "sqs_workers-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3088a240d910a45dbdb20f724dc5c3ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 9915, "upload_time": "2018-08-09T18:33:20", "upload_time_iso_8601": "2018-08-09T18:33:20.175496Z", "url": "https://files.pythonhosted.org/packages/59/0b/bf20185f310abe43dd27015a75316158660486a5279e3b0c42cfdfa90013/sqs_workers-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24565bf6bfc6c4f3162c099dd9242d93", "sha256": "65e084988c01ed5eb4fe51d96583588f3b9069b7c8d2c05b99b510f12a81ddd0"}, "downloads": -1, "filename": "sqs-workers-0.1.1.tar.gz", "has_sig": false, "md5_digest": "24565bf6bfc6c4f3162c099dd9242d93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 10498, "upload_time": "2018-08-09T18:33:22", "upload_time_iso_8601": "2018-08-09T18:33:22.215643Z", "url": "https://files.pythonhosted.org/packages/92/c4/ee576e56abd33018f64e9ffd73a7359d02ad00e3c1e3884b8abfabbe0de5/sqs-workers-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f6062f23fadbd03c02176eb708acc6cc", "sha256": "7aebf3783f2fe6e3613c8ed08666c505348508091e0e20e9c72ac43547e65f11"}, "downloads": -1, "filename": "sqs_workers-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6062f23fadbd03c02176eb708acc6cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 10370, "upload_time": "2018-08-10T17:50:10", "upload_time_iso_8601": "2018-08-10T17:50:10.747005Z", "url": "https://files.pythonhosted.org/packages/80/c8/e67aebfb077456249b6594eb3d9a653c6a8d101c3b4660c89b5463c72ebc/sqs_workers-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c04cea53164411b453d0052cc149b7f", "sha256": "8b4f304ed537874984b480a1dc16950ed76706281395084c970a84965fdd4ad9"}, "downloads": -1, "filename": "sqs-workers-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6c04cea53164411b453d0052cc149b7f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 12149, "upload_time": "2018-08-10T17:50:13", "upload_time_iso_8601": "2018-08-10T17:50:13.689495Z", "url": "https://files.pythonhosted.org/packages/f8/34/6345655b4272218b2a7ceac51dea0a0588d961c66c29ad9fc1ea29b06e06/sqs-workers-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "980f21fd6bd3439a992c5bab0780ac50", "sha256": "c41e204bc2996d59d47434ed1185edc4a58c39b9a422eadefa27b498ecddf253"}, "downloads": -1, "filename": "sqs_workers-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "980f21fd6bd3439a992c5bab0780ac50", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 10767, "upload_time": "2018-08-22T09:46:52", "upload_time_iso_8601": "2018-08-22T09:46:52.777998Z", "url": "https://files.pythonhosted.org/packages/53/02/2359ea74e56558d452ac1a3294e842dccd3ee68c94f2c2024679e99126f6/sqs_workers-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48a29abfae9daaa3b5103bfd36f0ffa8", "sha256": "6a514c40298630032ec3914f56dc1b8ce07b8ee2f2c9543fe8df327d2c91640f"}, "downloads": -1, "filename": "sqs-workers-0.2.1.tar.gz", "has_sig": false, "md5_digest": "48a29abfae9daaa3b5103bfd36f0ffa8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 12920, "upload_time": "2018-08-22T09:46:54", "upload_time_iso_8601": "2018-08-22T09:46:54.095020Z", "url": "https://files.pythonhosted.org/packages/fd/db/45aa05409fa55ac08fc9d191f7752b6b2593b3b1e320f729c5b572dd96f6/sqs-workers-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "2b7e2ab70c5313a7fac2f7586e027f20", "sha256": "69670271761554d38e6f71c4b83e2fcd00bee11f79c969c724050bc56388cc20"}, "downloads": -1, "filename": "sqs_workers-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2b7e2ab70c5313a7fac2f7586e027f20", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 10769, "upload_time": "2018-08-22T11:16:56", "upload_time_iso_8601": "2018-08-22T11:16:56.563818Z", "url": "https://files.pythonhosted.org/packages/f7/0c/3f7907f1a5c53843bc6facd52d8a29de20f4052803da53bf544960ac9813/sqs_workers-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc1f18292c95f336c2bd526038e803d6", "sha256": "581797601eece3985bbd0a9c5bd783b1a5f6dd69d97db0a7f55ac6b418923d43"}, "downloads": -1, "filename": "sqs-workers-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bc1f18292c95f336c2bd526038e803d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 12924, "upload_time": "2018-08-22T11:16:58", "upload_time_iso_8601": "2018-08-22T11:16:58.063334Z", "url": "https://files.pythonhosted.org/packages/ec/f1/c3e953b5d38729e46b9b77b56f60deeb3a3b8fafdfb0ee7cbd97bd901e35/sqs-workers-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "428a80759aaa05030742cfde6f8dedf7", "sha256": "15aff1e63ec75382d3a1e563e096a911459abdb5e46de23e2ed1babb24e91163"}, "downloads": -1, "filename": "sqs_workers-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "428a80759aaa05030742cfde6f8dedf7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 10852, "upload_time": "2018-08-22T14:11:30", "upload_time_iso_8601": "2018-08-22T14:11:30.306848Z", "url": "https://files.pythonhosted.org/packages/55/44/8de31c54531bf8780cf1f2c5eeafbf2781afff1a410949c41cc4e03fe504/sqs_workers-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fdb28dd4e1a30859e6e83bb0dca4357", "sha256": "a8cf351447d3a02a452af8032fc20fd1f7c191dc4477a716ae29966cd8853e2c"}, "downloads": -1, "filename": "sqs-workers-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5fdb28dd4e1a30859e6e83bb0dca4357", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13003, "upload_time": "2018-08-22T14:11:31", "upload_time_iso_8601": "2018-08-22T14:11:31.707332Z", "url": "https://files.pythonhosted.org/packages/cc/ad/18af86c0d45011976d9a12f4286a6c7ec6360d4afbfe1940fe9505e713d0/sqs-workers-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c09add96f14a1ad36e6f4f8cae54efac", "sha256": "1e20e2f86db72018a999edd434a1ff9062d38fc05cbdc67a7c9b52ccefd83ee6"}, "downloads": -1, "filename": "sqs_workers-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c09add96f14a1ad36e6f4f8cae54efac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 12519, "upload_time": "2018-08-23T12:22:15", "upload_time_iso_8601": "2018-08-23T12:22:15.037413Z", "url": "https://files.pythonhosted.org/packages/3b/a1/8efde2aba4479fddafd2e3405d61c65d62d341ef345174911068e321f5d9/sqs_workers-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21827f4d2a477465c8755f49a8c54284", "sha256": "bd89f0dba33b7483a75330f7b410a5650301bcedd36ad482a4c7f3fb3d55146f"}, "downloads": -1, "filename": "sqs-workers-0.3.0.tar.gz", "has_sig": false, "md5_digest": "21827f4d2a477465c8755f49a8c54284", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 14729, "upload_time": "2018-08-23T12:22:16", "upload_time_iso_8601": "2018-08-23T12:22:16.769551Z", "url": "https://files.pythonhosted.org/packages/05/14/7d01b58022b9dc13b9709ae1d093bed7fde13d57194d84dc739fc4370d74/sqs-workers-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "83f3593e8d04bb081dfb2363bf27b41e", "sha256": "07820e2336135019e52dd5e9d18d251565c0051c086018a5972919d43b4009e2"}, "downloads": -1, "filename": "sqs_workers-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "83f3593e8d04bb081dfb2363bf27b41e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 13543, "upload_time": "2018-10-12T09:59:34", "upload_time_iso_8601": "2018-10-12T09:59:34.763329Z", "url": "https://files.pythonhosted.org/packages/77/56/3fdda6b3012c9b51a4ca11e942d5aa0c3b03f5c02c13812093360854e0a1/sqs_workers-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b732acc05be61fcb1d7e36a358c6ca5", "sha256": "95cc66faf394b73d5886a636525e9e8c8a49e94af49aefbd71d7d00bdfaa99c2"}, "downloads": -1, "filename": "sqs-workers-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2b732acc05be61fcb1d7e36a358c6ca5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 14960, "upload_time": "2018-10-12T09:59:37", "upload_time_iso_8601": "2018-10-12T09:59:37.030846Z", "url": "https://files.pythonhosted.org/packages/a0/c5/64255fb652a28cca763013d8cde91c0f4f5f3b7a9b08bdd9ffa87ccb02a1/sqs-workers-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "3dad83aef63610cf766a3536da096e52", "sha256": "1605c48057a9855d4be87baef6819b63ff48fe8bb23523168167236b90db7029"}, "downloads": -1, "filename": "sqs_workers-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3dad83aef63610cf766a3536da096e52", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 17391, "upload_time": "2018-11-07T14:49:32", "upload_time_iso_8601": "2018-11-07T14:49:32.307240Z", "url": "https://files.pythonhosted.org/packages/75/0f/2fa35a0c338bb7c1c5118e363639df9c640d78742e09131af968b2996bef/sqs_workers-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f2f272d846bec2d562521b259acc5f7", "sha256": "284851419916e8e7a6726e4c6adf72e05de0f366954148e9f8ec935707b353aa"}, "downloads": -1, "filename": "sqs-workers-0.3.2.tar.gz", "has_sig": false, "md5_digest": "6f2f272d846bec2d562521b259acc5f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 17089, "upload_time": "2018-11-07T14:49:33", "upload_time_iso_8601": "2018-11-07T14:49:33.934887Z", "url": "https://files.pythonhosted.org/packages/08/e0/9a1c7b0fe05ae15e95e52e93ba9e82855b22f5ad61ed6a956a50b9cedb26/sqs-workers-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "115437d941bb32e5dce0f4f98359587b", "sha256": "1b592a63ef6d6c5efd029c9fc70aa4dcb3c922e0aba40a0c39b257a919f31413"}, "downloads": -1, "filename": "sqs_workers-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "115437d941bb32e5dce0f4f98359587b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 17391, "upload_time": "2018-11-07T15:31:59", "upload_time_iso_8601": "2018-11-07T15:31:59.331406Z", "url": "https://files.pythonhosted.org/packages/de/fa/6f2f001ebd5edf90550dde8d1c3c5d31552d2875dcd119c111ebfe9bf690/sqs_workers-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "170080f7e081726b436d8e6280ad9519", "sha256": "d4ca9d1920cc8577d0240f55aa34a9919b1dea879e7a339d89873ef20defa37b"}, "downloads": -1, "filename": "sqs-workers-0.3.3.tar.gz", "has_sig": false, "md5_digest": "170080f7e081726b436d8e6280ad9519", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 17100, "upload_time": "2018-11-07T15:32:00", "upload_time_iso_8601": "2018-11-07T15:32:00.850525Z", "url": "https://files.pythonhosted.org/packages/bc/b1/d18836238c311e92e67155aeca414c852cd629300dfdde322af2b749f994/sqs-workers-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "616707956e27b480358bfd2db28f3e82", "sha256": "dc5861bac3c64b2052928d345fb39a4128ac99dbd09bc30fa5b6b251e78e282d"}, "downloads": -1, "filename": "sqs_workers-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "616707956e27b480358bfd2db28f3e82", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 18743, "upload_time": "2018-11-27T13:14:09", "upload_time_iso_8601": "2018-11-27T13:14:09.765686Z", "url": "https://files.pythonhosted.org/packages/db/a3/de8d54cb8a27ec890403e4a87e2a4d280c51d1b1ff0247a2ccabc07e846d/sqs_workers-0.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ba77e9df12b5932e4d37d8d850d1c2b", "sha256": "ed1fdd9f7bb9765f5373b0aa5e4540e8161491231757b7556f53a84eab42b208"}, "downloads": -1, "filename": "sqs-workers-0.3.4.tar.gz", "has_sig": false, "md5_digest": "9ba77e9df12b5932e4d37d8d850d1c2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 18733, "upload_time": "2018-11-27T13:14:11", "upload_time_iso_8601": "2018-11-27T13:14:11.107260Z", "url": "https://files.pythonhosted.org/packages/55/24/ccdd6e00f83c003216166993944be82ea839a400b5cf7a8704723fff49ce/sqs-workers-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "7d60769c5642618f0eb95b839ecddef5", "sha256": "62453b736fda52be322a8a5ea3f971096660bdc36d841443b7abe6439ac60037"}, "downloads": -1, "filename": "sqs_workers-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7d60769c5642618f0eb95b839ecddef5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 19389, "upload_time": "2018-11-27T15:36:56", "upload_time_iso_8601": "2018-11-27T15:36:56.006006Z", "url": "https://files.pythonhosted.org/packages/bd/da/0c4dd7233aa8b4ce9c5ab3cfdff00095483eca4a7b59bd39cb5f3824e53a/sqs_workers-0.3.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf2d1e2ad4ae9c2f08fae0ad50d86d2b", "sha256": "d7decc4e4eecbaa48db1e21dbabb5a510e97f948f02abb26e7254bc9c0d60564"}, "downloads": -1, "filename": "sqs-workers-0.3.5.tar.gz", "has_sig": false, "md5_digest": "cf2d1e2ad4ae9c2f08fae0ad50d86d2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 19161, "upload_time": "2018-11-27T15:36:57", "upload_time_iso_8601": "2018-11-27T15:36:57.608497Z", "url": "https://files.pythonhosted.org/packages/7f/f5/b7e6ef817be767595bca15791b5ba30f81e064841995573c3ba79e8b9bce/sqs-workers-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "73338ca9d7af628170f4d544e04cb2ce", "sha256": "784c35bd0c64af4d5d2ac24faf785ef91a748b7ffafdf61ed70c28cdbcb5dc2b"}, "downloads": -1, "filename": "sqs_workers-0.3.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73338ca9d7af628170f4d544e04cb2ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 20134, "upload_time": "2019-01-10T20:13:12", "upload_time_iso_8601": "2019-01-10T20:13:12.441285Z", "url": "https://files.pythonhosted.org/packages/d3/b4/3f4c3701e5d5b25df547e46f16b94e050a28e4c4b5097856fbe81037c06b/sqs_workers-0.3.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3de3cf57a924a988298031d2ad3c6290", "sha256": "d1f208b9eb5115e7587d30e69f25e318140d946f2e2af211b4dacdb7b7dad997"}, "downloads": -1, "filename": "sqs-workers-0.3.6.tar.gz", "has_sig": false, "md5_digest": "3de3cf57a924a988298031d2ad3c6290", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 20139, "upload_time": "2019-01-10T20:13:14", "upload_time_iso_8601": "2019-01-10T20:13:14.664104Z", "url": "https://files.pythonhosted.org/packages/05/d9/66494b3d0ca3e8f75a87ecc4258cb07b2dfb3b7d925cc074862869c39865/sqs-workers-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "623c26d563fae9524bba95867c9d29b9", "sha256": "6fbe8120fa6b803c105864030275e152baea53d730fe30e826f0c764e03ac5b3"}, "downloads": -1, "filename": "sqs_workers-0.3.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "623c26d563fae9524bba95867c9d29b9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 20389, "upload_time": "2019-01-10T22:26:43", "upload_time_iso_8601": "2019-01-10T22:26:43.904268Z", "url": "https://files.pythonhosted.org/packages/d6/7f/db6060150f850230e35d54dd1bb8c48df544c05941a11ab9bc0e2aaa2142/sqs_workers-0.3.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbe630ddfe1ad0cb936dd8b2fb888e52", "sha256": "8e126c9908dbb21d7c22b9e38df88e3d1c721af1882374b85c31cc62b2c95b10"}, "downloads": -1, "filename": "sqs-workers-0.3.7.tar.gz", "has_sig": false, "md5_digest": "cbe630ddfe1ad0cb936dd8b2fb888e52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 20590, "upload_time": "2019-01-10T22:26:45", "upload_time_iso_8601": "2019-01-10T22:26:45.774788Z", "url": "https://files.pythonhosted.org/packages/69/f2/42aefad9e12192959094c261bb9b650929beecb9caaf20c399532c8f35be/sqs-workers-0.3.7.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "75c8458ec0be221f6a96e31106d45907", "sha256": "c99cc5b9e50468599ff293e77ceca75bc35f01de438d80bea19fdf7295a4f376"}, "downloads": -1, "filename": "sqs_workers-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "75c8458ec0be221f6a96e31106d45907", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 22295, "upload_time": "2019-01-15T17:37:10", "upload_time_iso_8601": "2019-01-15T17:37:10.067490Z", "url": "https://files.pythonhosted.org/packages/3c/42/322fa7e0f5c8c173c4e85e6519f167c9c9c796b47970aeb7a22102b5e75c/sqs_workers-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4a9308b859b6cba706dba2688b52c5e", "sha256": "eca30347fba8f959dc9e3a6f27a5378201c1f9dddbc29cf8c59547080e5ee46e"}, "downloads": -1, "filename": "sqs-workers-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b4a9308b859b6cba706dba2688b52c5e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 22815, "upload_time": "2019-01-15T17:37:11", "upload_time_iso_8601": "2019-01-15T17:37:11.853300Z", "url": "https://files.pythonhosted.org/packages/f5/ca/17dc6e86ea44c7e50d4d0518471124be9fd61010845d90fb9ff6619585d9/sqs-workers-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "58943566b09332d4c2f849c9f655d0b0", "sha256": "672511e890fc1c90e3a804d104a6fc72df6e765f9011f5c22e7f617d184d5a87"}, "downloads": -1, "filename": "sqs_workers-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "58943566b09332d4c2f849c9f655d0b0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 22427, "upload_time": "2019-01-16T10:40:30", "upload_time_iso_8601": "2019-01-16T10:40:30.045404Z", "url": "https://files.pythonhosted.org/packages/0b/b9/8ad1b12bb8e0f2ec106f5b015df72e9f267d48b8806817c9af47c7b75290/sqs_workers-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b974536744d5dd976451120a1ec42b07", "sha256": "f3f6a6daa0d596f67f79c2e8b1eba99409e00fe4f0beb3a634dc39d464b893f3"}, "downloads": -1, "filename": "sqs-workers-0.4.1.tar.gz", "has_sig": false, "md5_digest": "b974536744d5dd976451120a1ec42b07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 22915, "upload_time": "2019-01-16T10:40:31", "upload_time_iso_8601": "2019-01-16T10:40:31.623941Z", "url": "https://files.pythonhosted.org/packages/a3/fd/fd77b9ce4a1cf04a5fdb31c24567c730e541ff7f41eda8ae1ed45b0262ef/sqs-workers-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "103baedb7e6f0c1bbd0c2d29de8e2a8a", "sha256": "373bb201c357fb58c7a63271b4bbfe34034a6add09f190b7a12984b8056b92da"}, "downloads": -1, "filename": "sqs_workers-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "103baedb7e6f0c1bbd0c2d29de8e2a8a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 24611, "upload_time": "2019-10-28T07:49:54", "upload_time_iso_8601": "2019-10-28T07:49:54.526607Z", "url": "https://files.pythonhosted.org/packages/df/9f/6a7776c3f55b0d20b1d1e3cdb31babd121cb4ed5c2a7b7b27457a84efa63/sqs_workers-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46a07b9e7b09d91154db8d1ff2b076e5", "sha256": "12d980463f91f2291b71c10b42fd3320d9de8b7ca0d3d584c1c27c07ecdd6973"}, "downloads": -1, "filename": "sqs-workers-0.5.0.tar.gz", "has_sig": false, "md5_digest": "46a07b9e7b09d91154db8d1ff2b076e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 24865, "upload_time": "2019-10-28T07:49:56", "upload_time_iso_8601": "2019-10-28T07:49:56.874777Z", "url": "https://files.pythonhosted.org/packages/25/40/be53b03b9e266ce2bd6558d26e7f9c53d333513f7e080be6103818abaf2c/sqs-workers-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "fd1cddaef2b34e8b3d4dad9a7f7ca7be", "sha256": "2f1ee7df9eb3a82d76b82e39881696d5d3aa387730b24c0327b5c3a100dca316"}, "downloads": -1, "filename": "sqs_workers-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fd1cddaef2b34e8b3d4dad9a7f7ca7be", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 24949, "upload_time": "2019-11-05T11:51:17", "upload_time_iso_8601": "2019-11-05T11:51:17.241716Z", "url": "https://files.pythonhosted.org/packages/2e/0b/aa66449b64699037adb34c5f06b4bc345496d4fed009aa558d7bae2cfebd/sqs_workers-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89740b9603bc2114abd5f35e4d7f272b", "sha256": "e837c991e11659fc4fe5dda3cd438b905224fb20c626856e88dece9d9b6a7b0f"}, "downloads": -1, "filename": "sqs-workers-0.5.1.tar.gz", "has_sig": false, "md5_digest": "89740b9603bc2114abd5f35e4d7f272b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 25293, "upload_time": "2019-11-05T11:51:19", "upload_time_iso_8601": "2019-11-05T11:51:19.395070Z", "url": "https://files.pythonhosted.org/packages/a9/d1/6816abf313f7c2ce50113bb6f83ba7cb964070f2eed1525b62fb348ece27/sqs-workers-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fd1cddaef2b34e8b3d4dad9a7f7ca7be", "sha256": "2f1ee7df9eb3a82d76b82e39881696d5d3aa387730b24c0327b5c3a100dca316"}, "downloads": -1, "filename": "sqs_workers-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fd1cddaef2b34e8b3d4dad9a7f7ca7be", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 24949, "upload_time": "2019-11-05T11:51:17", "upload_time_iso_8601": "2019-11-05T11:51:17.241716Z", "url": "https://files.pythonhosted.org/packages/2e/0b/aa66449b64699037adb34c5f06b4bc345496d4fed009aa558d7bae2cfebd/sqs_workers-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89740b9603bc2114abd5f35e4d7f272b", "sha256": "e837c991e11659fc4fe5dda3cd438b905224fb20c626856e88dece9d9b6a7b0f"}, "downloads": -1, "filename": "sqs-workers-0.5.1.tar.gz", "has_sig": false, "md5_digest": "89740b9603bc2114abd5f35e4d7f272b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 25293, "upload_time": "2019-11-05T11:51:19", "upload_time_iso_8601": "2019-11-05T11:51:19.395070Z", "url": "https://files.pythonhosted.org/packages/a9/d1/6816abf313f7c2ce50113bb6f83ba7cb964070f2eed1525b62fb348ece27/sqs-workers-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:28 2020"}