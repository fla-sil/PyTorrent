{"info": {"author": "Efe Mert Demir", "author_email": "efemertdemir@hotmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Flask-Babel-JS\n---\n\nFlask extension to add Flask-Babel translations in JS.\n\n## Installation\n\nInstall via pip: `pip install flask-babel-js`\nKeep in mind that this extension expects you to have\n[`flask_babel`](https://github.com/python-babel/flask-babel) set-up\ncorrectly beforehand.\n\n## Usage\n\nYou can initialize this extension both directly and using the application\nfactory pattern:\n\n``` python\nfrom flask import Flask\nfrom flask_babel import Babel\nfrom flask_babel_js import BabelJS\n\n# Initializing directly:\napp = Flask(__name__)\nbabel = Babel(app)\nbabel_js = BabelJS(app)\n\n# Initializing via application factory pattern:\nbabel = Babel()\nbabel_js = BabelJS()\n\n\ndef create_app():\n    app = Flask(__name__)\n\n    babel.init_app(app)\n    babel_js.init_app(app)\n\n    return app\n```\n\nWhen the extension is initialized, a new route with the name of `babel_catalog`\nis added to the list of routes. This is a JavaScript file which contains all\ntranslations in your current locale. It also includes a very basic\n`gettext`-like API which you can use. It is compatible with the `javascript`\nextraction method of [`Babel`](https://github.com/python-babel/babel).\n\nAdd this to your `babel.cfg` to extract Javascript translation strings:\n\n``` ini\n[javascript:app/static/*.js]\nencoding = utf-8\nextract_messages=_,gettext,ngettext\n```\n\nTo include the translation catalog and functions, insert the following\ninside your Jinja templates:\n\n``` jinja\n<script src=\"{{ url_for(\"babel_catalog\") }}\"></script>\n```\n\nAfterwards, you can use all the functions available in the [Javascript\nAPI](#javascript-api).\n\nExample usage in Javascript:\n\n``` javascript\n// Translate a string\nvar s = _(\"Some untranslated text\");\n// Translate a string with format values\nvar s2 = _(\"Hello, %(name)s!\", { name: \"John\" });\n// Translate a string with plural forms\nvar s3 = ngettext(\"%(n)d item was deleted.\", \"%(n)d items were deleted.\", n, { n: n });\n// You can access all these functions through the babel object:\n// babel.gettext, babel.ngettext\n```\n\n## Python API\n\n### `flask_babel_js.BabelJS(app=None, view_path=\"/_jstrans.js\")`\n\nInitializes the extension object.\n\nParameters:\n - `app`: The Flask application. Can be `None` if you are using the application\n   factory pattern.\n - `view_path`: The path for the catalog URL. Defaults to `\"/_jstrans.js\"`.\n\n#### `init_app(app)`\n\nInitialize an application with the extension object.\n\nParameters:\n - `app`: The Flask application.\n\n#### `catalog_view()`\n\nThe catalog view which provides the JavaScript code for the catalog. You don't\nneed to use this directly.\n\n## Javascript API\n\n### `window.babel`\n\nThe main BabelJS object.\n\n#### `catalog`\n\nAll gettext messages for the current locale are in this object. The keys are\nthe original arguments passed to gettext and the value is the translated\nversion. If the translated text has a plural form, the value is an array of the\nplural forms.\n\n#### `format(text, variables)`\n\nFormats text using Python percent-formatting. Currently only supports `s`, `d`,\nand `f` as format types. Also expects a format name. For extensions, only left\npadding is supported.\n\nParameters:\n - `text`: A Python-format string.\n - `variables`: An object containing values for the format specifiers.\n\n#### `gettext(text, variables)`\n\nTranslates a string.\n\nThis function is available globally as `gettext` and `_`.\n\nParameters:\n - `text`: The untranslated string.\n - `variables`: An object containing values for the format specifiers.\n\n#### `ngettext(text, plural_text, n, variables)`\n\nTranslates a string with plural forms based on a value.\n\nThis function is available globally as `ngettext`.\n\nParameters:\n - `text`: The untranslated string.\n - `plural_text`: The untranslated string in plural form.\n - `n`: The amount of items by which the form is selected.\n - `variables`: An object containing values for the format specifiers.\n\n#### `plural(n)`\n\nGets the plural form ID corresponding to the number of items for this locale.\n\nParameters:\n - `n`: The number of items.\n\nNOTE: This function may not exist if `Plural-Forms` is not specified in the\ngettext metadata in the locale.\n\n## License\n\n&copy; 2020 Efe Mert Demir. This software is licensed under the 3-Clause BSD\nLicense, a copy of which can be found in [LICENSE](https://github.com/emdemir/Flask-Babel-JS/blob/master/LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emdemir/Flask-Babel-JS/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "Flask-Babel-JS", "package_url": "https://pypi.org/project/Flask-Babel-JS/", "platform": "any", "project_url": "https://pypi.org/project/Flask-Babel-JS/", "project_urls": {"Homepage": "https://github.com/emdemir/Flask-Babel-JS/"}, "release_url": "https://pypi.org/project/Flask-Babel-JS/1.0.2/", "requires_dist": ["Flask", "flask-babel"], "requires_python": "", "summary": "Flask extension to add Flask-Babel translations in JS", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Flask-Babel-JS</h2>\n<p>Flask extension to add Flask-Babel translations in JS.</p>\n<h2>Installation</h2>\n<p>Install via pip: <code>pip install flask-babel-js</code>\nKeep in mind that this extension expects you to have\n<a href=\"https://github.com/python-babel/flask-babel\" rel=\"nofollow\"><code>flask_babel</code></a> set-up\ncorrectly beforehand.</p>\n<h2>Usage</h2>\n<p>You can initialize this extension both directly and using the application\nfactory pattern:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_babel</span> <span class=\"kn\">import</span> <span class=\"n\">Babel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_babel_js</span> <span class=\"kn\">import</span> <span class=\"n\">BabelJS</span>\n\n<span class=\"c1\"># Initializing directly:</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">babel</span> <span class=\"o\">=</span> <span class=\"n\">Babel</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n<span class=\"n\">babel_js</span> <span class=\"o\">=</span> <span class=\"n\">BabelJS</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initializing via application factory pattern:</span>\n<span class=\"n\">babel</span> <span class=\"o\">=</span> <span class=\"n\">Babel</span><span class=\"p\">()</span>\n<span class=\"n\">babel_js</span> <span class=\"o\">=</span> <span class=\"n\">BabelJS</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">():</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n    <span class=\"n\">babel</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n    <span class=\"n\">babel_js</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n</pre>\n<p>When the extension is initialized, a new route with the name of <code>babel_catalog</code>\nis added to the list of routes. This is a JavaScript file which contains all\ntranslations in your current locale. It also includes a very basic\n<code>gettext</code>-like API which you can use. It is compatible with the <code>javascript</code>\nextraction method of <a href=\"https://github.com/python-babel/babel\" rel=\"nofollow\"><code>Babel</code></a>.</p>\n<p>Add this to your <code>babel.cfg</code> to extract Javascript translation strings:</p>\n<pre><span class=\"k\">[javascript:app/static/*.js]</span>\n<span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"s\">utf-8</span>\n<span class=\"na\">extract_messages</span><span class=\"o\">=</span><span class=\"s\">_,gettext,ngettext</span>\n</pre>\n<p>To include the translation catalog and functions, insert the following\ninside your Jinja templates:</p>\n<pre><span class=\"x\">&lt;script src=\"</span><span class=\"cp\">{{</span> <span class=\"nv\">url_for</span><span class=\"o\">(</span><span class=\"s2\">\"babel_catalog\"</span><span class=\"o\">)</span> <span class=\"cp\">}}</span><span class=\"x\">\"&gt;&lt;/script&gt;</span>\n</pre>\n<p>Afterwards, you can use all the functions available in the <a href=\"#javascript-api\" rel=\"nofollow\">Javascript\nAPI</a>.</p>\n<p>Example usage in Javascript:</p>\n<pre><span class=\"c1\">// Translate a string</span>\n<span class=\"kd\">var</span> <span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"nx\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Some untranslated text\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// Translate a string with format values</span>\n<span class=\"kd\">var</span> <span class=\"nx\">s2</span> <span class=\"o\">=</span> <span class=\"nx\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, %(name)s!\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"John\"</span> <span class=\"p\">});</span>\n<span class=\"c1\">// Translate a string with plural forms</span>\n<span class=\"kd\">var</span> <span class=\"nx\">s3</span> <span class=\"o\">=</span> <span class=\"nx\">ngettext</span><span class=\"p\">(</span><span class=\"s2\">\"%(n)d item was deleted.\"</span><span class=\"p\">,</span> <span class=\"s2\">\"%(n)d items were deleted.\"</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">n</span><span class=\"o\">:</span> <span class=\"nx\">n</span> <span class=\"p\">});</span>\n<span class=\"c1\">// You can access all these functions through the babel object:</span>\n<span class=\"c1\">// babel.gettext, babel.ngettext</span>\n</pre>\n<h2>Python API</h2>\n<h3><code>flask_babel_js.BabelJS(app=None, view_path=\"/_jstrans.js\")</code></h3>\n<p>Initializes the extension object.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>app</code>: The Flask application. Can be <code>None</code> if you are using the application\nfactory pattern.</li>\n<li><code>view_path</code>: The path for the catalog URL. Defaults to <code>\"/_jstrans.js\"</code>.</li>\n</ul>\n<h4><code>init_app(app)</code></h4>\n<p>Initialize an application with the extension object.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>app</code>: The Flask application.</li>\n</ul>\n<h4><code>catalog_view()</code></h4>\n<p>The catalog view which provides the JavaScript code for the catalog. You don't\nneed to use this directly.</p>\n<h2>Javascript API</h2>\n<h3><code>window.babel</code></h3>\n<p>The main BabelJS object.</p>\n<h4><code>catalog</code></h4>\n<p>All gettext messages for the current locale are in this object. The keys are\nthe original arguments passed to gettext and the value is the translated\nversion. If the translated text has a plural form, the value is an array of the\nplural forms.</p>\n<h4><code>format(text, variables)</code></h4>\n<p>Formats text using Python percent-formatting. Currently only supports <code>s</code>, <code>d</code>,\nand <code>f</code> as format types. Also expects a format name. For extensions, only left\npadding is supported.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>text</code>: A Python-format string.</li>\n<li><code>variables</code>: An object containing values for the format specifiers.</li>\n</ul>\n<h4><code>gettext(text, variables)</code></h4>\n<p>Translates a string.</p>\n<p>This function is available globally as <code>gettext</code> and <code>_</code>.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>text</code>: The untranslated string.</li>\n<li><code>variables</code>: An object containing values for the format specifiers.</li>\n</ul>\n<h4><code>ngettext(text, plural_text, n, variables)</code></h4>\n<p>Translates a string with plural forms based on a value.</p>\n<p>This function is available globally as <code>ngettext</code>.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>text</code>: The untranslated string.</li>\n<li><code>plural_text</code>: The untranslated string in plural form.</li>\n<li><code>n</code>: The amount of items by which the form is selected.</li>\n<li><code>variables</code>: An object containing values for the format specifiers.</li>\n</ul>\n<h4><code>plural(n)</code></h4>\n<p>Gets the plural form ID corresponding to the number of items for this locale.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>n</code>: The number of items.</li>\n</ul>\n<p>NOTE: This function may not exist if <code>Plural-Forms</code> is not specified in the\ngettext metadata in the locale.</p>\n<h2>License</h2>\n<p>\u00a9 2020 Efe Mert Demir. This software is licensed under the 3-Clause BSD\nLicense, a copy of which can be found in <a href=\"https://github.com/emdemir/Flask-Babel-JS/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n\n          </div>"}, "last_serial": 6756645, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "335d981d88d101f96dc9ac27ef7053dd", "sha256": "8bee70c30fb35680698a69a44770b2e3a58d59733a9f801f1cddeaddeae85ebf"}, "downloads": -1, "filename": "Flask_Babel_JS-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "335d981d88d101f96dc9ac27ef7053dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5843, "upload_time": "2020-02-06T01:35:38", "upload_time_iso_8601": "2020-02-06T01:35:38.144187Z", "url": "https://files.pythonhosted.org/packages/f6/1a/bba408939aa8c82e439ace481f03e66953c2034d830adf543bb8e834f9d9/Flask_Babel_JS-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e01fff52fbaacdec5746a11fb16e15e1", "sha256": "27ca6908688a3711a5983f266ab17678056c9d168a130d5623a3f256cd450346"}, "downloads": -1, "filename": "Flask-Babel-JS-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e01fff52fbaacdec5746a11fb16e15e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5983, "upload_time": "2020-02-06T01:35:40", "upload_time_iso_8601": "2020-02-06T01:35:40.726136Z", "url": "https://files.pythonhosted.org/packages/3b/50/aedb7e511dd2638b9bb59c3f7d6eb69614813e866479b425a1859ac84597/Flask-Babel-JS-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "62bf34417786f235aabd729e2356bf9e", "sha256": "ace843ff6f0ab4459e053552f56483295403010ce09cb31b52461965fe34e553"}, "downloads": -1, "filename": "Flask_Babel_JS-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "62bf34417786f235aabd729e2356bf9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5833, "upload_time": "2020-02-06T01:49:21", "upload_time_iso_8601": "2020-02-06T01:49:21.568258Z", "url": "https://files.pythonhosted.org/packages/36/31/6102d4b49d24e8b1a1186d003f8c6d1f2c99ea8274dafcba773ebf7e8c08/Flask_Babel_JS-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "097ee9e252c4f48f9475693eff8e27e6", "sha256": "fb961b958bd081bfe13abf6d692682b1a02ac0566e990dce69922a1d8562491c"}, "downloads": -1, "filename": "Flask-Babel-JS-1.0.1.tar.gz", "has_sig": false, "md5_digest": "097ee9e252c4f48f9475693eff8e27e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5976, "upload_time": "2020-02-06T01:49:23", "upload_time_iso_8601": "2020-02-06T01:49:23.098135Z", "url": "https://files.pythonhosted.org/packages/6d/21/7bc4447877e6347b037856c233f548ea978bc24190b025681ae02b1a250b/Flask-Babel-JS-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d260ed626413898bcbc2fd8e8a2aae34", "sha256": "e67b07107e4c9071f353a47b857400b31328aa5ba4b4db85649e21a096de4f29"}, "downloads": -1, "filename": "Flask_Babel_JS-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d260ed626413898bcbc2fd8e8a2aae34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5881, "upload_time": "2020-03-05T17:54:25", "upload_time_iso_8601": "2020-03-05T17:54:25.934837Z", "url": "https://files.pythonhosted.org/packages/d6/ca/577466ee1f64dc9223107613deb2c4ca9412b15c17a0a643cb2f3ee0c549/Flask_Babel_JS-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2054ae748f77bd07db60f3066d086461", "sha256": "64a21e451b405f3b50d12128d2af981964786ecd61d968faca84e36bfa986c34"}, "downloads": -1, "filename": "Flask-Babel-JS-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2054ae748f77bd07db60f3066d086461", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6011, "upload_time": "2020-03-05T17:54:29", "upload_time_iso_8601": "2020-03-05T17:54:29.809863Z", "url": "https://files.pythonhosted.org/packages/4b/7d/9fc194b876519642373d8226b28d606d8c79e4a289455b97bcdaa8d9088d/Flask-Babel-JS-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d260ed626413898bcbc2fd8e8a2aae34", "sha256": "e67b07107e4c9071f353a47b857400b31328aa5ba4b4db85649e21a096de4f29"}, "downloads": -1, "filename": "Flask_Babel_JS-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d260ed626413898bcbc2fd8e8a2aae34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5881, "upload_time": "2020-03-05T17:54:25", "upload_time_iso_8601": "2020-03-05T17:54:25.934837Z", "url": "https://files.pythonhosted.org/packages/d6/ca/577466ee1f64dc9223107613deb2c4ca9412b15c17a0a643cb2f3ee0c549/Flask_Babel_JS-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2054ae748f77bd07db60f3066d086461", "sha256": "64a21e451b405f3b50d12128d2af981964786ecd61d968faca84e36bfa986c34"}, "downloads": -1, "filename": "Flask-Babel-JS-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2054ae748f77bd07db60f3066d086461", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6011, "upload_time": "2020-03-05T17:54:29", "upload_time_iso_8601": "2020-03-05T17:54:29.809863Z", "url": "https://files.pythonhosted.org/packages/4b/7d/9fc194b876519642373d8226b28d606d8c79e4a289455b97bcdaa8d9088d/Flask-Babel-JS-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:05 2020"}