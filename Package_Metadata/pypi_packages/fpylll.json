{"info": {"author": "Martin R. Albrecht", "author_email": "fplll-devel@googlegroups.com", "bugtrack_url": null, "classifiers": [], "description": "fpylll\n======\n\nA Python (2 and 3) wrapper for `fplll <https://github.com/fplll/fplll>`__.\n\n.. image:: https://travis-ci.org/fplll/fpylll.svg?branch=master\n    :target: https://travis-ci.org/fplll/fpylll\n.. image:: https://badge.fury.io/py/fpylll.svg\n    :target: https://badge.fury.io/py/fpylll\n.. image:: https://readthedocs.org/projects/fpylll/badge/?version=latest\n    :target: http://fpylll.readthedocs.io/en/latest/?badge=latest\n\n.. code-block:: python\n\n    >>> from fpylll import *\n\n    >>> A = IntegerMatrix(50, 50)\n    >>> A.randomize(\"ntrulike\", bits=50, q=127)\n    >>> A[0].norm()\n    3564748886669202.5\n\n    >>> M = GSO.Mat(A)\n    >>> M.update_gso()\n    >>> M.get_mu(1,0)\n    0.815748944429783\n\n    >>> L = LLL.Reduction(M)\n    >>> L()\n    >>> M.get_mu(1,0)\n    0.41812865497076024\n    >>> A[0].norm()\n    24.06241883103193\n\nThe basic BKZ algorithm can be implemented in about 60 pretty readable lines of Python code (cf. `simple_bkz.py <https://github.com/fplll/fpylll/blob/master/src/fpylll/algorithms/simple_bkz.py>`__).\nFor a quick tour of the library, you can check out the tutorial.\n\nRequirements\n------------\n\n**fpylll** relies on the following C/C++ libraries:\n\n- `GMP <https://gmplib.org>`__ or `MPIR <http://mpir.org>`__ for arbitrary precision integer arithmetic.\n- `MPFR <http://www.mpfr.org>`__ for arbitrary precision floating point arithmetic.\n- `QD <http://crd-legacy.lbl.gov/~dhbailey/mpdist/>`__ for double double and quad double arithmetic (optional).\n- `fplll <https://github.com/fplll/fplll>`__ for pretty much everything.\n\n**fpylll** also relies on\n\n- `Cython <http://cython.org>`__ for linking Python and C/C++.\n- `cysignals <https://github.com/sagemath/cysignals>`__ for signal handling such as interrupting C++ code.\n- `py.test <http://pytest.org/latest/>`__ for testing Python.\n- `flake8 <https://flake8.readthedocs.org/en/latest/>`__ for linting.\n\nWe also suggest\n\n- `virtualenv <https://virtualenv.pypa.io/en/latest/>`__ to build and install fpylll in\n- `IPython  <https://ipython.org>`__ for interacting with Python\n- `Numpy <http://www.numpy.org>`__ for numerical computations (e.g. with Gram-Schmidt values)\n\nOnline\n------\n\n**fpylll** ships with Sage 7.4. Thus, it is available via `SageMathCell <http://sagecell.sagemath.org/?z=eJxtjk1rwzAMhu-F_gfRUzpCKGODXXxwWTfGWlrWDPZBMWrjFK-2lcketPv1U0657CJePUiP1DIFaLuL9x5c6IgzXI1HGhQ8xWyPlleY2Z0rxthQKO5mJUy-kS-TEoLqu5O6kbp3OUmYjkcdu5hBf852VSQOhaCUGcXlbBKtJ2zMQMxXoljMnz-q-8WDfl3WZlu_6Hrx-C6LPWbb_ByykyFdQg82yBiKvafDyST3a9W13B-EaojyIp6NJ-qSui2h9XhMqles9JtZrteb7fT_h_8AredZkw==&lang=sage>`__ and `SageMathCloud <https://cloud.sagemath.com>`__ (select a Jupyter notebook with a Sage 7.4 kernel, the default Sage worksheet still runs Sage 7.3 at the time of writing). You can also fire up a `dply.co virtual server <https://dply.co/b/pBZ2QbxW>`__ with the latest fpylll/fplll preinstalled (it takes perhaps 15 minutes until everything is compiled).\n\nGetting Started\n---------------\n\n**Note:** fpylll is also available via `PyPI <https://pypi.python.org/pypi/fpylll/>`__ and `Conda-Forge <https://conda-forge.github.io>`__ for `Conda <https://conda.io/docs/>`__. In what follows, we explain manual installation.\n\nWe recommend `virtualenv <https://virtualenv.readthedocs.org/>`__ for isolating Python build environments and `virtualenvwrapper <https://virtualenvwrapper.readthedocs.org/>`__ to manage virtual environments.\nWe indicate active virtualenvs by the prefix ``(fpylll)``.\n\n**Automatic install**\n\n1. Run bootstrap.sh\n\n   .. code-block:: bash\n\n     $ ./bootstrap.sh\n     $ source ./activate\n\n**Manual install**\n\n1. Create a new virtualenv and activate it:\n\n   .. code-block:: bash\n\n     $ virtualenv env\n     $ ln -s ./env/bin/activate ./\n     $ source ./activate\n\n\n2. Install the required libraries - `GMP <https://gmplib.org>`__ or `MPIR <http://mpir.org>`__ and `MPFR <http://www.mpfr.org>`__  - if not available already. You may also want to install `QD <http://crd-legacy.lbl.gov/~dhbailey/mpdist/>`__.\n\n3. Install fplll:\n\n   .. code-block:: bash\n\n     $ (fpylll) ./install-dependencies.sh $VIRTUAL_ENV\n\n   Some OSX users report that they required ``export CXXFLAGS=\"-stdlib=libc++ -mmacosx-version-min=10.7\"`` and ``export CXX=clang++`` (after installing a recent clang with `brew <https://brew.sh>`__) since the default GCC installed by Apple does not have full C++11 support.\n\n4. Then, execute:\n\n   .. code-block:: bash\n\n     $ (fpylll) pip install Cython\n     $ (fpylll) pip install -r requirements.txt\n\n   to install the required Python packages (see above).\n\n5. If you are so inclined, run:\n\n   .. code-block:: bash\n\n     $ (fpylll) pip install -r suggestions.txt\n\n   to install suggested Python packages as well (optional).\n\n6. Build the Python extension:\n\n   .. code-block:: bash\n\n     $ (fpylll) export PKG_CONFIG_PATH=\"$VIRTUAL_ENV/lib/pkgconfig:$PKG_CONFIG_PATH\"\n     $ (fpylll) python setup.py build_ext\n     $ (fpylll) python setup.py install\n\n7. To run **fpylll**, you will need to:\n\n   .. code-block:: bash\n\n     $ (fpylll) export LD_LIBRARY_PATH=\"$VIRTUAL_ENV/lib\"\n\n   so that Python can find fplll and friends.\n\n   Note that you can also patch ``activate`` to set ``LD_LIBRRY_PATH``. For this, add:\n\n   .. code-block:: bash\n\n     ### LD_LIBRARY_HACK\n     _OLD_LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"\n     LD_LIBRARY_PATH=\"$VIRTUAL_ENV/lib:$LD_LIBRARY_PATH\"\n     export LD_LIBRARY_PATH\n     ### END_LD_LIBRARY_HACK\n\n     ### PKG_CONFIG_HACK\n     _OLD_PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH\"\n     PKG_CONFIG_PATH=\"$VIRTUAL_ENV/lib/pkgconfig:$PKG_CONFIG_PATH\"\n     export PKG_CONFIG_PATH\n     ### END_PKG_CONFIG_HACK\n\n   towards the end and:\n\n   .. code-block:: bash\n\n     ### LD_LIBRARY_HACK\n     if ! [ -z ${_OLD_LD_LIBRARY_PATH+x} ] ; then\n         LD_LIBRARY_PATH=\"$_OLD_LD_LIBRARY_PATH\"\n         export LD_LIBRARY_PATH\n         unset _OLD_LD_LIBRARY_PATH\n     fi\n     ### END_LD_LIBRARY_HACK\n\n     ### PKG_CONFIG_HACK\n     if ! [ -z ${_OLD_PKG_CONFIG_PATH+x} ] ; then\n         PKG_CONFIG_PATH=\"$_OLD_PKG_CONFIG_PATH\"\n         export PKG_CONFIG_PATH\n         unset _OLD_PKG_CONFIG_PATH\n     fi\n     ### END_PKG_CONFIG_HACK\n\n   in the ``deactivate`` function in the ``activate`` script.\n\n**Running fpylll**\n\n1. To (re)activate the virtual environment, simply run:\n\n   .. code-block:: bash\n\n    $ source ./activate\n\n2. Start Python:\n\n   .. code-block:: bash\n\n    $ (fpylll) ipython\n\n\nMulticore Support\n-----------------\n\n**fpylll** supports parallelisation on multiple cores. For all C++ support to drop the `GIL <https://wiki.python.org/moin/GlobalInterpreterLock>`_ is enabled, allowing the use of threads to parallelise. Fplll is thread safe as long as each thread works on a separate object such as ``IntegerMatrix`` or ``MatGSO``. Also, **fpylll** does not actually drop the GIL in all calls to C++ functions yet. In many scenarios using `multiprocessing <https://docs.python.org/2/library/multiprocessing.html>`_, which sidesteps the GIL and thread safety issues by using processes instead of threads, will be the better choice.\n\nThe example below calls ``LLL.reduction`` on 128 matrices of dimension 30 on four worker processes.\n\n.. code-block:: python\n\n    from fpylll import IntegerMatrix, LLL\n    from multiprocessing import Pool\n\n    d, workers, tasks = 30, 4, 128\n\n    def run_it(p, f, A, prefix=\"\"):\n        \"\"\"Print status during parallel execution.\"\"\"\n        import sys\n        r = []\n        for i, retval in enumerate(p.imap_unordered(f, A, 1)):\n            r.append(retval)\n            sys.stderr.write('\\r{0} done: {1:.2%}'.format(prefix, float(i)/len(A)))\n            sys.stderr.flush()\n        sys.stderr.write('\\r{0} done {1:.2%}\\n'.format(prefix, float(i+1)/len(A)))\n        return r\n\n    A = [IntegerMatrix.random(d, \"uniform\", bits=30) for _ in range(tasks)]\n    A = run_it(Pool(workers), LLL.reduction, A)\n\nTo test threading simply replace the line ``from multiprocessing import Pool`` with ``from multiprocessing.pool import ThreadPool as Pool``. For calling ``BKZ.reduction`` this way, which expects a second parameter with options, using `functools.partial <https://docs.python.org/2/library/functools.html#functools.partial>`_ is a good choice.\n\nContributing\n------------\n\n**fpylll** welcomes contributions, cf. the list of `open issues <https://github.com/fplll/fpylll/issues>`_. To contribute, clone this repository, commit your code on a separate branch and send a pull request. Please write tests for your code. You can run them by calling::\n\n    $ (fpylll) PY_IGNORE_IMPORTMISMATCH=1 py.test\n\nfrom the top-level directory which runs all tests in ``tests/test_*.py``. We run `flake8 <https://flake8.readthedocs.org/en/latest/>`_ on every commit automatically, In particular, we run::\n\n    $ (fpylll) flake8 --max-line-length=120 --max-complexity=16 --ignore=E22,E241 src\n\nNote that **fpylll** supports Python 2 and 3. In particular, tests are run using Python 2.7 and 3.5. See `.travis.yml <https://github.com/fplll/fpylll/blob/master/.travis.yml>`_ for details on automated testing.\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fplll/fpylll", "keywords": "", "license": "GNU General Public License, version 2 or later", "maintainer": "", "maintainer_email": "", "name": "fpylll", "package_url": "https://pypi.org/project/fpylll/", "platform": "", "project_url": "https://pypi.org/project/fpylll/", "project_urls": {"Homepage": "https://github.com/fplll/fpylll"}, "release_url": "https://pypi.org/project/fpylll/0.5.1dev/", "requires_dist": null, "requires_python": "", "summary": "A Python interface for https://github.com/fplll/fplll", "version": "0.5.1dev", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python (2 and 3) wrapper for <a href=\"https://github.com/fplll/fplll\" rel=\"nofollow\">fplll</a>.</p>\n<a href=\"https://travis-ci.org/fplll/fpylll\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/fplll/fpylll.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31705599dd512db2690af78f7a0de6941248c218/68747470733a2f2f7472617669732d63692e6f72672f66706c6c6c2f6670796c6c6c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/fpylll\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/fpylll.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/605fe2949b72ba7c6adfab6857d156cc4a18621a/68747470733a2f2f62616467652e667572792e696f2f70792f6670796c6c6c2e737667\"></a>\n<a href=\"http://fpylll.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/fpylll/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6467729b30da0db49ac3d152866acf96a3c8823a/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6670796c6c6c2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">fpylll</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">IntegerMatrix</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">randomize</span><span class=\"p\">(</span><span class=\"s2\">\"ntrulike\"</span><span class=\"p\">,</span> <span class=\"n\">bits</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"o\">=</span><span class=\"mi\">127</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">()</span>\n<span class=\"mf\">3564748886669202.5</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">GSO</span><span class=\"o\">.</span><span class=\"n\">Mat</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">update_gso</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">get_mu</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mf\">0.815748944429783</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">LLL</span><span class=\"o\">.</span><span class=\"n\">Reduction</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">L</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">get_mu</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mf\">0.41812865497076024</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">()</span>\n<span class=\"mf\">24.06241883103193</span>\n</pre>\n<p>The basic BKZ algorithm can be implemented in about 60 pretty readable lines of Python code (cf. <a href=\"https://github.com/fplll/fpylll/blob/master/src/fpylll/algorithms/simple_bkz.py\" rel=\"nofollow\">simple_bkz.py</a>).\nFor a quick tour of the library, you can check out the tutorial.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p><strong>fpylll</strong> relies on the following C/C++ libraries:</p>\n<ul>\n<li><a href=\"https://gmplib.org\" rel=\"nofollow\">GMP</a> or <a href=\"http://mpir.org\" rel=\"nofollow\">MPIR</a> for arbitrary precision integer arithmetic.</li>\n<li><a href=\"http://www.mpfr.org\" rel=\"nofollow\">MPFR</a> for arbitrary precision floating point arithmetic.</li>\n<li><a href=\"http://crd-legacy.lbl.gov/~dhbailey/mpdist/\" rel=\"nofollow\">QD</a> for double double and quad double arithmetic (optional).</li>\n<li><a href=\"https://github.com/fplll/fplll\" rel=\"nofollow\">fplll</a> for pretty much everything.</li>\n</ul>\n<p><strong>fpylll</strong> also relies on</p>\n<ul>\n<li><a href=\"http://cython.org\" rel=\"nofollow\">Cython</a> for linking Python and C/C++.</li>\n<li><a href=\"https://github.com/sagemath/cysignals\" rel=\"nofollow\">cysignals</a> for signal handling such as interrupting C++ code.</li>\n<li><a href=\"http://pytest.org/latest/\" rel=\"nofollow\">py.test</a> for testing Python.</li>\n<li><a href=\"https://flake8.readthedocs.org/en/latest/\" rel=\"nofollow\">flake8</a> for linting.</li>\n</ul>\n<p>We also suggest</p>\n<ul>\n<li><a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtualenv</a> to build and install fpylll in</li>\n<li><a href=\"https://ipython.org\" rel=\"nofollow\">IPython</a> for interacting with Python</li>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">Numpy</a> for numerical computations (e.g. with Gram-Schmidt values)</li>\n</ul>\n</div>\n<div id=\"online\">\n<h2>Online</h2>\n<p><strong>fpylll</strong> ships with Sage 7.4. Thus, it is available via <a href=\"http://sagecell.sagemath.org/?z=eJxtjk1rwzAMhu-F_gfRUzpCKGODXXxwWTfGWlrWDPZBMWrjFK-2lcketPv1U0657CJePUiP1DIFaLuL9x5c6IgzXI1HGhQ8xWyPlleY2Z0rxthQKO5mJUy-kS-TEoLqu5O6kbp3OUmYjkcdu5hBf852VSQOhaCUGcXlbBKtJ2zMQMxXoljMnz-q-8WDfl3WZlu_6Hrx-C6LPWbb_ByykyFdQg82yBiKvafDyST3a9W13B-EaojyIp6NJ-qSui2h9XhMqles9JtZrteb7fT_h_8AredZkw==&amp;lang=sage\" rel=\"nofollow\">SageMathCell</a> and <a href=\"https://cloud.sagemath.com\" rel=\"nofollow\">SageMathCloud</a> (select a Jupyter notebook with a Sage 7.4 kernel, the default Sage worksheet still runs Sage 7.3 at the time of writing). You can also fire up a <a href=\"https://dply.co/b/pBZ2QbxW\" rel=\"nofollow\">dply.co virtual server</a> with the latest fpylll/fplll preinstalled (it takes perhaps 15 minutes until everything is compiled).</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p><strong>Note:</strong> fpylll is also available via <a href=\"https://pypi.python.org/pypi/fpylll/\" rel=\"nofollow\">PyPI</a> and <a href=\"https://conda-forge.github.io\" rel=\"nofollow\">Conda-Forge</a> for <a href=\"https://conda.io/docs/\" rel=\"nofollow\">Conda</a>. In what follows, we explain manual installation.</p>\n<p>We recommend <a href=\"https://virtualenv.readthedocs.org/\" rel=\"nofollow\">virtualenv</a> for isolating Python build environments and <a href=\"https://virtualenvwrapper.readthedocs.org/\" rel=\"nofollow\">virtualenvwrapper</a> to manage virtual environments.\nWe indicate active virtualenvs by the prefix <tt>(fpylll)</tt>.</p>\n<p><strong>Automatic install</strong></p>\n<ol>\n<li><p>Run bootstrap.sh</p>\n<pre>$ ./bootstrap.sh\n$ <span class=\"nb\">source</span> ./activate\n</pre>\n</li>\n</ol>\n<p><strong>Manual install</strong></p>\n<ol>\n<li><p>Create a new virtualenv and activate it:</p>\n<pre>$ virtualenv env\n$ ln -s ./env/bin/activate ./\n$ <span class=\"nb\">source</span> ./activate\n</pre>\n</li>\n<li><p>Install the required libraries - <a href=\"https://gmplib.org\" rel=\"nofollow\">GMP</a> or <a href=\"http://mpir.org\" rel=\"nofollow\">MPIR</a> and <a href=\"http://www.mpfr.org\" rel=\"nofollow\">MPFR</a>  - if not available already. You may also want to install <a href=\"http://crd-legacy.lbl.gov/~dhbailey/mpdist/\" rel=\"nofollow\">QD</a>.</p>\n</li>\n<li><p>Install fplll:</p>\n<pre>$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> ./install-dependencies.sh <span class=\"nv\">$VIRTUAL_ENV</span>\n</pre>\n<p>Some OSX users report that they required <tt>export <span class=\"pre\">CXXFLAGS=\"-stdlib=libc++</span> <span class=\"pre\">-mmacosx-version-min=10.7\"</span></tt> and <tt>export CXX=clang++</tt> (after installing a recent clang with <a href=\"https://brew.sh\" rel=\"nofollow\">brew</a>) since the default GCC installed by Apple does not have full C++11 support.</p>\n</li>\n<li><p>Then, execute:</p>\n<pre>$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> pip install Cython\n$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> pip install -r requirements.txt\n</pre>\n<p>to install the required Python packages (see above).</p>\n</li>\n<li><p>If you are so inclined, run:</p>\n<pre>$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> pip install -r suggestions.txt\n</pre>\n<p>to install suggested Python packages as well (optional).</p>\n</li>\n<li><p>Build the Python extension:</p>\n<pre>$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> <span class=\"nb\">export</span> <span class=\"nv\">PKG_CONFIG_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$VIRTUAL_ENV</span><span class=\"s2\">/lib/pkgconfig:</span><span class=\"nv\">$PKG_CONFIG_PATH</span><span class=\"s2\">\"</span>\n$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> python setup.py build_ext\n$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> python setup.py install\n</pre>\n</li>\n<li><p>To run <strong>fpylll</strong>, you will need to:</p>\n<pre>$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> <span class=\"nb\">export</span> <span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$VIRTUAL_ENV</span><span class=\"s2\">/lib\"</span>\n</pre>\n<p>so that Python can find fplll and friends.</p>\n<p>Note that you can also patch <tt>activate</tt> to set <tt>LD_LIBRRY_PATH</tt>. For this, add:</p>\n<pre><span class=\"c1\">### LD_LIBRARY_HACK\n</span><span class=\"nv\">_OLD_LD_LIBRARY_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$LD_LIBRARY_PATH</span><span class=\"s2\">\"</span>\n<span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$VIRTUAL_ENV</span><span class=\"s2\">/lib:</span><span class=\"nv\">$LD_LIBRARY_PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">export</span> LD_LIBRARY_PATH\n<span class=\"c1\">### END_LD_LIBRARY_HACK\n</span>\n<span class=\"c1\">### PKG_CONFIG_HACK\n</span><span class=\"nv\">_OLD_PKG_CONFIG_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PKG_CONFIG_PATH</span><span class=\"s2\">\"</span>\n<span class=\"nv\">PKG_CONFIG_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$VIRTUAL_ENV</span><span class=\"s2\">/lib/pkgconfig:</span><span class=\"nv\">$PKG_CONFIG_PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">export</span> PKG_CONFIG_PATH\n<span class=\"c1\">### END_PKG_CONFIG_HACK</span>\n</pre>\n<p>towards the end and:</p>\n<pre><span class=\"c1\">### LD_LIBRARY_HACK\n</span><span class=\"k\">if</span> ! <span class=\"o\">[</span> -z <span class=\"si\">${</span><span class=\"nv\">_OLD_LD_LIBRARY_PATH</span><span class=\"p\">+x</span><span class=\"si\">}</span> <span class=\"o\">]</span> <span class=\"p\">;</span> <span class=\"k\">then</span>\n    <span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$_OLD_LD_LIBRARY_PATH</span><span class=\"s2\">\"</span>\n    <span class=\"nb\">export</span> LD_LIBRARY_PATH\n    <span class=\"nb\">unset</span> _OLD_LD_LIBRARY_PATH\n<span class=\"k\">fi</span>\n<span class=\"c1\">### END_LD_LIBRARY_HACK\n</span>\n<span class=\"c1\">### PKG_CONFIG_HACK\n</span><span class=\"k\">if</span> ! <span class=\"o\">[</span> -z <span class=\"si\">${</span><span class=\"nv\">_OLD_PKG_CONFIG_PATH</span><span class=\"p\">+x</span><span class=\"si\">}</span> <span class=\"o\">]</span> <span class=\"p\">;</span> <span class=\"k\">then</span>\n    <span class=\"nv\">PKG_CONFIG_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$_OLD_PKG_CONFIG_PATH</span><span class=\"s2\">\"</span>\n    <span class=\"nb\">export</span> PKG_CONFIG_PATH\n    <span class=\"nb\">unset</span> _OLD_PKG_CONFIG_PATH\n<span class=\"k\">fi</span>\n<span class=\"c1\">### END_PKG_CONFIG_HACK</span>\n</pre>\n<p>in the <tt>deactivate</tt> function in the <tt>activate</tt> script.</p>\n</li>\n</ol>\n<p><strong>Running fpylll</strong></p>\n<ol>\n<li><p>To (re)activate the virtual environment, simply run:</p>\n<pre>$ <span class=\"nb\">source</span> ./activate\n</pre>\n</li>\n<li><p>Start Python:</p>\n<pre>$ <span class=\"o\">(</span>fpylll<span class=\"o\">)</span> ipython\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"multicore-support\">\n<h2>Multicore Support</h2>\n<p><strong>fpylll</strong> supports parallelisation on multiple cores. For all C++ support to drop the <a href=\"https://wiki.python.org/moin/GlobalInterpreterLock\" rel=\"nofollow\">GIL</a> is enabled, allowing the use of threads to parallelise. Fplll is thread safe as long as each thread works on a separate object such as <tt>IntegerMatrix</tt> or <tt>MatGSO</tt>. Also, <strong>fpylll</strong> does not actually drop the GIL in all calls to C++ functions yet. In many scenarios using <a href=\"https://docs.python.org/2/library/multiprocessing.html\" rel=\"nofollow\">multiprocessing</a>, which sidesteps the GIL and thread safety issues by using processes instead of threads, will be the better choice.</p>\n<p>The example below calls <tt>LLL.reduction</tt> on 128 matrices of dimension 30 on four worker processes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fpylll</span> <span class=\"kn\">import</span> <span class=\"n\">IntegerMatrix</span><span class=\"p\">,</span> <span class=\"n\">LLL</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Pool</span>\n\n<span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">workers</span><span class=\"p\">,</span> <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">128</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run_it</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Print status during parallel execution.\"\"\"</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">retval</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">imap_unordered</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)):</span>\n        <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">retval</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\r</span><span class=\"si\">{0}</span><span class=\"s1\"> done: </span><span class=\"si\">{1:.2%}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)))</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\r</span><span class=\"si\">{0}</span><span class=\"s1\"> done </span><span class=\"si\">{1:.2%}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">r</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">IntegerMatrix</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"s2\">\"uniform\"</span><span class=\"p\">,</span> <span class=\"n\">bits</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">)]</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">run_it</span><span class=\"p\">(</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"p\">),</span> <span class=\"n\">LLL</span><span class=\"o\">.</span><span class=\"n\">reduction</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n</pre>\n<p>To test threading simply replace the line <tt>from multiprocessing import Pool</tt> with <tt>from multiprocessing.pool import ThreadPool as Pool</tt>. For calling <tt>BKZ.reduction</tt> this way, which expects a second parameter with options, using <a href=\"https://docs.python.org/2/library/functools.html#functools.partial\" rel=\"nofollow\">functools.partial</a> is a good choice.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p><strong>fpylll</strong> welcomes contributions, cf. the list of <a href=\"https://github.com/fplll/fpylll/issues\" rel=\"nofollow\">open issues</a>. To contribute, clone this repository, commit your code on a separate branch and send a pull request. Please write tests for your code. You can run them by calling:</p>\n<pre>$ (fpylll) PY_IGNORE_IMPORTMISMATCH=1 py.test\n</pre>\n<p>from the top-level directory which runs all tests in <tt><span class=\"pre\">tests/test_*.py</span></tt>. We run <a href=\"https://flake8.readthedocs.org/en/latest/\" rel=\"nofollow\">flake8</a> on every commit automatically, In particular, we run:</p>\n<pre>$ (fpylll) flake8 --max-line-length=120 --max-complexity=16 --ignore=E22,E241 src\n</pre>\n<p>Note that <strong>fpylll</strong> supports Python 2 and 3. In particular, tests are run using Python 2.7 and 3.5. See <a href=\"https://github.com/fplll/fpylll/blob/master/.travis.yml\" rel=\"nofollow\">.travis.yml</a> for details on automated testing.</p>\n</div>\n\n          </div>"}, "last_serial": 6303597, "releases": {"0.2.1dev": [{"comment_text": "", "digests": {"md5": "875ab922ea249cd78d03831ebedaecb5", "sha256": "c2c1c711d95be44165c52c8ae703864558941f8768a14337d36dc4edbb26dcbf"}, "downloads": -1, "filename": "fpylll-0.2.1dev.tar.gz", "has_sig": false, "md5_digest": "875ab922ea249cd78d03831ebedaecb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54471, "upload_time": "2016-09-08T07:52:47", "upload_time_iso_8601": "2016-09-08T07:52:47.811510Z", "url": "https://files.pythonhosted.org/packages/2e/52/625ce257ae89ff7876be6e75cd156da6fa4bc160507b5d18bdb4fd54184e/fpylll-0.2.1dev.tar.gz", "yanked": false}], "0.2.4dev": [{"comment_text": "", "digests": {"md5": "cb8c58856a52a033bc2411cdcb02ecae", "sha256": "137f18e0dfb0a0697a297d26c2d253055d4cc196490886fb4c739a7a7b09955f"}, "downloads": -1, "filename": "fpylll-0.2.4dev.tar.gz", "has_sig": false, "md5_digest": "cb8c58856a52a033bc2411cdcb02ecae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74632, "upload_time": "2017-04-15T12:20:59", "upload_time_iso_8601": "2017-04-15T12:20:59.707336Z", "url": "https://files.pythonhosted.org/packages/a8/ba/89a5d5bbf1cd73ac99b4ccdbb585177e13b6d9458adf085d0200570586a7/fpylll-0.2.4dev.tar.gz", "yanked": false}], "0.2dev": [{"comment_text": "", "digests": {"md5": "18d889d3569eecdcdf044f87de38b5f3", "sha256": "bcf78c66bd335fda8023f6c83e8351638e591b73bad0a406f736070756d10fd2"}, "downloads": -1, "filename": "fpylll-0.2dev.tar.gz", "has_sig": false, "md5_digest": "18d889d3569eecdcdf044f87de38b5f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54081, "upload_time": "2016-08-26T14:40:04", "upload_time_iso_8601": "2016-08-26T14:40:04.800488Z", "url": "https://files.pythonhosted.org/packages/82/56/42f8542fe0a27b43e690e6968f7ba97a2db0f6a6fd7b0846bb2ae20e64ea/fpylll-0.2dev.tar.gz", "yanked": false}], "0.3.0dev": [{"comment_text": "", "digests": {"md5": "8402e0e3e10ec5e11aef5dc8c6769464", "sha256": "e9daf76351f4ef7d93d54578f45318980bfa45901145f525ef5977eb0480532e"}, "downloads": -1, "filename": "fpylll-0.3.0dev.tar.gz", "has_sig": false, "md5_digest": "8402e0e3e10ec5e11aef5dc8c6769464", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88915, "upload_time": "2017-09-11T14:12:15", "upload_time_iso_8601": "2017-09-11T14:12:15.759643Z", "url": "https://files.pythonhosted.org/packages/1e/b8/1bcb8911dbf7211d0008d21578ad04194a5993b6021c2300ca74a676847e/fpylll-0.3.0dev.tar.gz", "yanked": false}], "0.4.0dev": [{"comment_text": "", "digests": {"md5": "ea5162875f70f752f8b181447bcdd1b1", "sha256": "905b5ec906be244c8e066914b951a92836f887c34c9ae49a57152884c537fac0"}, "downloads": -1, "filename": "fpylll-0.4.0dev.tar.gz", "has_sig": false, "md5_digest": "ea5162875f70f752f8b181447bcdd1b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137815, "upload_time": "2018-05-18T15:22:43", "upload_time_iso_8601": "2018-05-18T15:22:43.389914Z", "url": "https://files.pythonhosted.org/packages/a3/9c/138632761ef58181e32b7c3ec9eb86269b9ace0ccb210cddcae3459b20f5/fpylll-0.4.0dev.tar.gz", "yanked": false}], "0.5.0dev": [{"comment_text": "", "digests": {"md5": "9ffe7072a741091b09eb4233ea03f2f6", "sha256": "601e81b9c8a52850ad1cf29a243bd73846a262e52584e95e489111829513a1d4"}, "downloads": -1, "filename": "fpylll-0.5.0dev.tar.gz", "has_sig": false, "md5_digest": "9ffe7072a741091b09eb4233ea03f2f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 106704, "upload_time": "2019-11-23T13:31:12", "upload_time_iso_8601": "2019-11-23T13:31:12.498994Z", "url": "https://files.pythonhosted.org/packages/97/06/d1a5ca0a1b6dc516f729ba32f69585622d1b724961e4737c548686e83de1/fpylll-0.5.0dev.tar.gz", "yanked": false}], "0.5.1dev": [{"comment_text": "", "digests": {"md5": "ecee1f2d0744d677f2c4803c13be6f92", "sha256": "ba780a8fe17d5531de8d626e9816c6ad926b8dd79bc3eca57c0648208412b1f6"}, "downloads": -1, "filename": "fpylll-0.5.1dev.tar.gz", "has_sig": false, "md5_digest": "ecee1f2d0744d677f2c4803c13be6f92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107332, "upload_time": "2019-12-14T18:01:43", "upload_time_iso_8601": "2019-12-14T18:01:43.448204Z", "url": "https://files.pythonhosted.org/packages/db/12/2554be58a35d897d03436a640ed8c2fd574b4b3b52921a81d089b6b0f410/fpylll-0.5.1dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ecee1f2d0744d677f2c4803c13be6f92", "sha256": "ba780a8fe17d5531de8d626e9816c6ad926b8dd79bc3eca57c0648208412b1f6"}, "downloads": -1, "filename": "fpylll-0.5.1dev.tar.gz", "has_sig": false, "md5_digest": "ecee1f2d0744d677f2c4803c13be6f92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107332, "upload_time": "2019-12-14T18:01:43", "upload_time_iso_8601": "2019-12-14T18:01:43.448204Z", "url": "https://files.pythonhosted.org/packages/db/12/2554be58a35d897d03436a640ed8c2fd574b4b3b52921a81d089b6b0f410/fpylll-0.5.1dev.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:36 2020"}