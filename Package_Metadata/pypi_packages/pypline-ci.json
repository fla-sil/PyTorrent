{"info": {"author": "Christian Tragesser", "author_email": "christian@evoen.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pypline-ci\n[![pipeline status](https://gitlab.com/christianTragesser/pypline-ci/badges/master/pipeline.svg)](https://gitlab.com/christianTragesser/pypline-ci/commits/master)\n\nA docker orchestration tool for container-based delivery pipelines - providing developers, testers, and operators a common automated testing tool for local workstations and delivery pipeline infrastructure.\n\nI'm currently experimenting with docker-in-docker delivery pipelines written in a *high-level language* hoping to capitalize on object-oriented concepts native to Python.  While bash does provide a simple ability to script docker-in-docker pipelines; at a certain scale, creating and maintaining independent scripts across multiple integrated repositories or projects becomes cumbersome and inefficient.\n\n#### Examples\nBuild image and run container:\n```python\nimport os\nfrom pyplineCI import Pipeline\n\ndirPath = os.path.dirname(os.path.realpath(__file__))\nbuildPath = dirPath+'/docker/'\nlocalTag = 'local/foo:latest'\n\npl = Pipeline()\npl.build_image(buildPath, localTag)\npl.rund(localTag)\n```\n\nImplement testing framework from dedicated testing image:\n```python\nimport os\nfrom pyplineCI import Pipeline\n\ndirPath = os.path.dirname(os.path.realpath(__file__))\nvolumes = {dirPath: {'bind': '/tmp', 'mode': 'rw'}}\ntestDir = '/tmp/tests'\n\npl = Pipeline(dockerRegistry='registry.gitlab.com/christiantragesser/')\npl.runi(image=pipeline.dockerRegistry+'my-test-image:latest',\n              name='foo-test', working_dir=testDir,\n              volumes=volumes, command='pytest')\n```\n\nOrchestrate application stack for UAT testing then remove all containers if tests are successful:\n```python\nimport os\nfrom pyplineCI import Pipeline\n\ndirPath = os.path.dirname(os.path.realpath(__file__))\ncleanUp = []\n\nuat_volume = {dirPath: {'bind': '/tmp', 'mode': 'rw'}}\ntestDir = '/tmp/tests'\ndb_env_vars = {'MYSQL_ROOT_PASSWORD': 'root', 'MYSQL_DATABASE': 'foo-db', 'MYSQL_ROOT_HOST': '%'}\napp_env_vars = {'DB_HOST': 'mysql-test', 'DB_USER': 'root', 'DB_PASSWORD': 'root', 'DATABASE': 'foo-db'}\n\npl = Pipeline()\ncleanUp.append(pl.rund(image='mysql:5.7', name='mysql-test', environment=db_env_vars))\ncleanUp.append(pl.rund(image='local/foo_app', name='foo-app-test', environment=app_env_vars))\npl.runi(image='tutum/curl:latest', name='foo-uat',\n        working_dir=testDir, volumes=uat_volume,\n        command='./uat.sh foo-app-test:5000')\npl.purge_containers(cleanUp)\n``` \nPerform CVE scan on a docker image:\n```bash\nMY_IMAGE=\"alpine:latest\"\npython3 -c \"from pyplineCI import Pipeline; Pipeline().cve_scan(${MY_IMAGE})\"\n```\n#### API reference\n* **Pipeline**(_network='ci_net', dockerRegistry='library/'_)\n\n  ```class pypline-ci.pyplineCI.Pipeline```\n  - **create_network(** _network_ **)** | Create docker pipeline network.  \n  parameters:\n    + network(_str_) - Name of pipeline network, default `ci_net`\n  - **build_image(** _path, tag_ **)** | Build docker image.  \n  parameters:\n    + path(_str_) - Path to the directory containing the Dockerfile.\n    + tag(_str_) - Tag applied to newly built image.\n  - **pull_image(** _image_ **)** | Pull an image of the given name, similar to the `docker pull` command. If no tag is specified, all tags from that repository will be pulled.  \n  parameters:\n    + image(_str_) - Image name to pull.\n  - **rund(** _image, stderr=None, ports=None, volumes=None, name=None, environment=None, network=_<obj network\\>_, command=None, detach=True, remove=False_ **)** |\n  Performs pull action on provided image, runs a daemonized container, then returns the container ID.  \n  parameters:\n    + environment(_dict or list_) - Environment variables to set inside the container.\n    + image(_str_) - The image to update and run.\n    + name(_str_) - The name for this container.\n    + ports(_dict_) - Port bindings to the container. The keys of the dictionary are the ports to bind inside the container, either as an integer or a string in the form port/protocol, where the protocol is either tcp or udp. The values of the dictionary are the corresponding ports to open on the host.\n    + volumes(_dict_) - Configure volumes mounted inside the container.\n  - **runi(** _image, command, name=None, volumes=None, working_dir='/root', tty=True, environment=None, stdin_open=True, network=_<obj network\\>_, auto_remove=False_ **)** | Performs pull action on provided image, runs an interactive container implementing provided command, then returns container stdout logs and command exit status(zero or non-zero).  \n  parameters:\n    + command(_str_) - The command to run in the container.\n    + environment(_dict or list_) - Environment variables to set inside the container.\n    + image(_str_) - The image to update and run.\n    + name(_str_) - The name for this container.\n    + ports(_dict_) - Port bindings to the container. The keys of the dictionary are the ports to bind inside the container, either as an integer or a string in the form port/protocol, where the protocol is either tcp or udp. The values of the dictionary are the corresponding ports to open on the host.\n    + volumes(_dict_) - Configure volumes mounted inside the container.\n    + working_dir(_str_) - Path to the working directory.\n  - **purge_containers(** _ids_ **)** | Force deletion of container by container ID.  \n  parameters:\n    + ids(_list_) - List of container IDs to delete.\n  - **cve_scan(** _scanImage_ **)** | Perform CVE scan of docker image using [CoreOS Clair](https://coreos.com/clair/docs/latest/).  \n  parameters:\n    + scanImage(_str_) - The image to scan.\n\n#### Install\nPython 3.6 or later\n\nInstall on docker host:\n* From [PyPi](https://pypi.org/project/pypline-ci/)\n```sh\n$ pip install pypline-ci\n```\n\nor\n\n* Via docker:\n\n```sh\n$ docker run --rm -it \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v $PWD:/tmp \\\n    -w /tmp \\\n    registry.gitlab.com/christiantragesser/pypline-ci /bin/sh\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/christianTragesser/pypline-ci", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pypline-ci", "package_url": "https://pypi.org/project/pypline-ci/", "platform": "", "project_url": "https://pypi.org/project/pypline-ci/", "project_urls": {"Homepage": "https://github.com/christianTragesser/pypline-ci"}, "release_url": "https://pypi.org/project/pypline-ci/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "A docker pipeline library", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pypline-ci</h1>\n<p><a href=\"https://gitlab.com/christianTragesser/pypline-ci/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1778065047da71cffee160d46ba57548017e9f58/68747470733a2f2f6769746c61622e636f6d2f63687269737469616e5472616765737365722f7079706c696e652d63692f6261646765732f6d61737465722f706970656c696e652e737667\"></a></p>\n<p>A docker orchestration tool for container-based delivery pipelines - providing developers, testers, and operators a common automated testing tool for local workstations and delivery pipeline infrastructure.</p>\n<p>I'm currently experimenting with docker-in-docker delivery pipelines written in a <em>high-level language</em> hoping to capitalize on object-oriented concepts native to Python.  While bash does provide a simple ability to script docker-in-docker pipelines; at a certain scale, creating and maintaining independent scripts across multiple integrated repositories or projects becomes cumbersome and inefficient.</p>\n<h4>Examples</h4>\n<p>Build image and run container:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyplineCI</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n\n<span class=\"n\">dirPath</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">buildPath</span> <span class=\"o\">=</span> <span class=\"n\">dirPath</span><span class=\"o\">+</span><span class=\"s1\">'/docker/'</span>\n<span class=\"n\">localTag</span> <span class=\"o\">=</span> <span class=\"s1\">'local/foo:latest'</span>\n\n<span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">()</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">build_image</span><span class=\"p\">(</span><span class=\"n\">buildPath</span><span class=\"p\">,</span> <span class=\"n\">localTag</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">rund</span><span class=\"p\">(</span><span class=\"n\">localTag</span><span class=\"p\">)</span>\n</pre>\n<p>Implement testing framework from dedicated testing image:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyplineCI</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n\n<span class=\"n\">dirPath</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">volumes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">dirPath</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'bind'</span><span class=\"p\">:</span> <span class=\"s1\">'/tmp'</span><span class=\"p\">,</span> <span class=\"s1\">'mode'</span><span class=\"p\">:</span> <span class=\"s1\">'rw'</span><span class=\"p\">}}</span>\n<span class=\"n\">testDir</span> <span class=\"o\">=</span> <span class=\"s1\">'/tmp/tests'</span>\n\n<span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">dockerRegistry</span><span class=\"o\">=</span><span class=\"s1\">'registry.gitlab.com/christiantragesser/'</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">runi</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">dockerRegistry</span><span class=\"o\">+</span><span class=\"s1\">'my-test-image:latest'</span><span class=\"p\">,</span>\n              <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'foo-test'</span><span class=\"p\">,</span> <span class=\"n\">working_dir</span><span class=\"o\">=</span><span class=\"n\">testDir</span><span class=\"p\">,</span>\n              <span class=\"n\">volumes</span><span class=\"o\">=</span><span class=\"n\">volumes</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s1\">'pytest'</span><span class=\"p\">)</span>\n</pre>\n<p>Orchestrate application stack for UAT testing then remove all containers if tests are successful:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyplineCI</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n\n<span class=\"n\">dirPath</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">cleanUp</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">uat_volume</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">dirPath</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'bind'</span><span class=\"p\">:</span> <span class=\"s1\">'/tmp'</span><span class=\"p\">,</span> <span class=\"s1\">'mode'</span><span class=\"p\">:</span> <span class=\"s1\">'rw'</span><span class=\"p\">}}</span>\n<span class=\"n\">testDir</span> <span class=\"o\">=</span> <span class=\"s1\">'/tmp/tests'</span>\n<span class=\"n\">db_env_vars</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'MYSQL_ROOT_PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'root'</span><span class=\"p\">,</span> <span class=\"s1\">'MYSQL_DATABASE'</span><span class=\"p\">:</span> <span class=\"s1\">'foo-db'</span><span class=\"p\">,</span> <span class=\"s1\">'MYSQL_ROOT_HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'%'</span><span class=\"p\">}</span>\n<span class=\"n\">app_env_vars</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'DB_HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'mysql-test'</span><span class=\"p\">,</span> <span class=\"s1\">'DB_USER'</span><span class=\"p\">:</span> <span class=\"s1\">'root'</span><span class=\"p\">,</span> <span class=\"s1\">'DB_PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'root'</span><span class=\"p\">,</span> <span class=\"s1\">'DATABASE'</span><span class=\"p\">:</span> <span class=\"s1\">'foo-db'</span><span class=\"p\">}</span>\n\n<span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">()</span>\n<span class=\"n\">cleanUp</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">rund</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"s1\">'mysql:5.7'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'mysql-test'</span><span class=\"p\">,</span> <span class=\"n\">environment</span><span class=\"o\">=</span><span class=\"n\">db_env_vars</span><span class=\"p\">))</span>\n<span class=\"n\">cleanUp</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">rund</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"s1\">'local/foo_app'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'foo-app-test'</span><span class=\"p\">,</span> <span class=\"n\">environment</span><span class=\"o\">=</span><span class=\"n\">app_env_vars</span><span class=\"p\">))</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">runi</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"s1\">'tutum/curl:latest'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'foo-uat'</span><span class=\"p\">,</span>\n        <span class=\"n\">working_dir</span><span class=\"o\">=</span><span class=\"n\">testDir</span><span class=\"p\">,</span> <span class=\"n\">volumes</span><span class=\"o\">=</span><span class=\"n\">uat_volume</span><span class=\"p\">,</span>\n        <span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s1\">'./uat.sh foo-app-test:5000'</span><span class=\"p\">)</span>\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">purge_containers</span><span class=\"p\">(</span><span class=\"n\">cleanUp</span><span class=\"p\">)</span>\n</pre>\n<p>Perform CVE scan on a docker image:</p>\n<pre><span class=\"nv\">MY_IMAGE</span><span class=\"o\">=</span><span class=\"s2\">\"alpine:latest\"</span>\npython3 -c <span class=\"s2\">\"from pyplineCI import Pipeline; Pipeline().cve_scan(</span><span class=\"si\">${</span><span class=\"nv\">MY_IMAGE</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n</pre>\n<h4>API reference</h4>\n<ul>\n<li>\n<p><strong>Pipeline</strong>(<em>network='ci_net', dockerRegistry='library/'</em>)</p>\n<p><code>class pypline-ci.pyplineCI.Pipeline</code></p>\n<ul>\n<li><strong>create_network(</strong> <em>network</em> <strong>)</strong> | Create docker pipeline network.<br>\nparameters:\n<ul>\n<li>network(<em>str</em>) - Name of pipeline network, default <code>ci_net</code></li>\n</ul>\n</li>\n<li><strong>build_image(</strong> <em>path, tag</em> <strong>)</strong> | Build docker image.<br>\nparameters:\n<ul>\n<li>path(<em>str</em>) - Path to the directory containing the Dockerfile.</li>\n<li>tag(<em>str</em>) - Tag applied to newly built image.</li>\n</ul>\n</li>\n<li><strong>pull_image(</strong> <em>image</em> <strong>)</strong> | Pull an image of the given name, similar to the <code>docker pull</code> command. If no tag is specified, all tags from that repository will be pulled.<br>\nparameters:\n<ul>\n<li>image(<em>str</em>) - Image name to pull.</li>\n</ul>\n</li>\n<li><strong>rund(</strong> <em>image, stderr=None, ports=None, volumes=None, name=None, environment=None, network=</em>&lt;obj network&gt;<em>, command=None, detach=True, remove=False</em> <strong>)</strong> |\nPerforms pull action on provided image, runs a daemonized container, then returns the container ID.<br>\nparameters:\n<ul>\n<li>environment(<em>dict or list</em>) - Environment variables to set inside the container.</li>\n<li>image(<em>str</em>) - The image to update and run.</li>\n<li>name(<em>str</em>) - The name for this container.</li>\n<li>ports(<em>dict</em>) - Port bindings to the container. The keys of the dictionary are the ports to bind inside the container, either as an integer or a string in the form port/protocol, where the protocol is either tcp or udp. The values of the dictionary are the corresponding ports to open on the host.</li>\n<li>volumes(<em>dict</em>) - Configure volumes mounted inside the container.</li>\n</ul>\n</li>\n<li><strong>runi(</strong> <em>image, command, name=None, volumes=None, working_dir='/root', tty=True, environment=None, stdin_open=True, network=</em>&lt;obj network&gt;<em>, auto_remove=False</em> <strong>)</strong> | Performs pull action on provided image, runs an interactive container implementing provided command, then returns container stdout logs and command exit status(zero or non-zero).<br>\nparameters:\n<ul>\n<li>command(<em>str</em>) - The command to run in the container.</li>\n<li>environment(<em>dict or list</em>) - Environment variables to set inside the container.</li>\n<li>image(<em>str</em>) - The image to update and run.</li>\n<li>name(<em>str</em>) - The name for this container.</li>\n<li>ports(<em>dict</em>) - Port bindings to the container. The keys of the dictionary are the ports to bind inside the container, either as an integer or a string in the form port/protocol, where the protocol is either tcp or udp. The values of the dictionary are the corresponding ports to open on the host.</li>\n<li>volumes(<em>dict</em>) - Configure volumes mounted inside the container.</li>\n<li>working_dir(<em>str</em>) - Path to the working directory.</li>\n</ul>\n</li>\n<li><strong>purge_containers(</strong> <em>ids</em> <strong>)</strong> | Force deletion of container by container ID.<br>\nparameters:\n<ul>\n<li>ids(<em>list</em>) - List of container IDs to delete.</li>\n</ul>\n</li>\n<li><strong>cve_scan(</strong> <em>scanImage</em> <strong>)</strong> | Perform CVE scan of docker image using <a href=\"https://coreos.com/clair/docs/latest/\" rel=\"nofollow\">CoreOS Clair</a>.<br>\nparameters:\n<ul>\n<li>scanImage(<em>str</em>) - The image to scan.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Install</h4>\n<p>Python 3.6 or later</p>\n<p>Install on docker host:</p>\n<ul>\n<li>From <a href=\"https://pypi.org/project/pypline-ci/\" rel=\"nofollow\">PyPi</a></li>\n</ul>\n<pre>$ pip install pypline-ci\n</pre>\n<p>or</p>\n<ul>\n<li>Via docker:</li>\n</ul>\n<pre>$ docker run --rm -it <span class=\"se\">\\</span>\n    -v /var/run/docker.sock:/var/run/docker.sock <span class=\"se\">\\</span>\n    -v <span class=\"nv\">$PWD</span>:/tmp <span class=\"se\">\\</span>\n    -w /tmp <span class=\"se\">\\</span>\n    registry.gitlab.com/christiantragesser/pypline-ci /bin/sh\n</pre>\n\n          </div>"}, "last_serial": 6355640, "releases": {"0.1.34": [{"comment_text": "", "digests": {"md5": "ad85df6daec440cf2a441d9b91119039", "sha256": "422ee9efece993d83122781c9f3f2675f225acc60a7122e13005e6cac7199f38"}, "downloads": -1, "filename": "pypline-ci-0.1.34.tar.gz", "has_sig": false, "md5_digest": "ad85df6daec440cf2a441d9b91119039", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5380, "upload_time": "2019-11-27T02:18:07", "upload_time_iso_8601": "2019-11-27T02:18:07.069496Z", "url": "https://files.pythonhosted.org/packages/d2/39/843d6f0c5391ccb244326eeb7f09b753f3b08fca174393b9e4f15af28589/pypline-ci-0.1.34.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "195c0ec8a1c885094e586186d08137d5", "sha256": "6881123575dae43cc4db75ed3f08ff519d0be5d1eaabf5a5d030accaabc8c7f5"}, "downloads": -1, "filename": "pypline-ci-0.2.0.tar.gz", "has_sig": false, "md5_digest": "195c0ec8a1c885094e586186d08137d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5074, "upload_time": "2019-12-24T14:45:47", "upload_time_iso_8601": "2019-12-24T14:45:47.488946Z", "url": "https://files.pythonhosted.org/packages/7f/7d/30fba82d76fe2046e023c7f1538c02e7cfdcbf04fe1a67a539179f64e689/pypline-ci-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "195c0ec8a1c885094e586186d08137d5", "sha256": "6881123575dae43cc4db75ed3f08ff519d0be5d1eaabf5a5d030accaabc8c7f5"}, "downloads": -1, "filename": "pypline-ci-0.2.0.tar.gz", "has_sig": false, "md5_digest": "195c0ec8a1c885094e586186d08137d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5074, "upload_time": "2019-12-24T14:45:47", "upload_time_iso_8601": "2019-12-24T14:45:47.488946Z", "url": "https://files.pythonhosted.org/packages/7f/7d/30fba82d76fe2046e023c7f1538c02e7cfdcbf04fe1a67a539179f64e689/pypline-ci-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:23 2020"}