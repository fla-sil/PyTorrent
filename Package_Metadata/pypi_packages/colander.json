{"info": {"author": "Agendaless Consulting", "author_email": "pylons-discuss@googlegroups.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Colander\n========\n\n.. image:: https://travis-ci.org/Pylons/colander.svg?branch=master\n        :target: https://travis-ci.org/Pylons/colander\n\n.. image:: https://readthedocs.org/projects/colander/badge/?version=master\n        :target: https://docs.pylonsproject.org/projects/colander/en/master/\n        :alt: Documentation Status\n\nAn extensible package which can be used to:\n\n- deserialize and validate a data structure composed of strings,\n  mappings, and lists.\n\n- serialize an arbitrary data structure to a data structure composed\n  of strings, mappings, and lists.\n\nIt is tested on Python 2.7, 3.4, 3.5, 3.6, 3.7, and PyPy.\n\nPlease see https://docs.pylonsproject.org/projects/colander/en/latest/\nfor documentation.\n\nSee https://github.com/Pylons/colander for in-development version.\n\n\n1.7.0 (2019-02-01)\n==================\n\n- The URL validator regex has been updated to no longer be vulnerable to a\n  catastrophic backtracking that would have led to an infinite loop. See\n  https://github.com/Pylons/colander/pull/323 and\n  https://github.com/Pylons/colander/issues/290. With thanks to Przemek\n  (https://github.com/p-m-k).\n\n  This does change the behaviour of the URL validator and it no longer supports\n  ``file://`` URI scheme (https://tools.ietf.org/html/rfc8089). Users that\n  wish to validate ``file://`` URI's should change their validator to use\n  ``colander.file_uri`` instead.\n\n  It has also dropped support for alternate schemes outside of http/ftp (and\n  their secure equivelants). Please let us know if we need to relax this\n  requirement.\n\n  CVE-ID: CVE-2017-18361\n\n- The Email validator has been updated to use the same regular expression that\n  is used by the WhatWG HTML specification, thereby increasing the email\n  addresses that will validate correctly from web forms submitted. See\n  https://github.com/Pylons/colander/pull/324 and\n  https://github.com/Pylons/colander/issues/283\n\n- Number once again will allow you to serialize None to colander.null, this\n  reverts an accidental revert. See\n  https://github.com/Pylons/colander/issues/204#issuecomment-459556100\n\n- Integer SchemaType now supports an optional ``strict`` mode that will\n  validate that the number is an integer, rather than silently accepting floats\n  and truncating. See https://github.com/Pylons/colander/pull/322 and\n  https://github.com/Pylons/colander/issues/292\n\n1.6.0 (2019-01-31)\n==================\n\n- Support custom format strings on ``DateTime`` and ``Date`` fields.\n  See https://github.com/Pylons/colander/pull/318\n\n- Support sub-second precision on ``Time`` fields if provided.\n  See https://github.com/Pylons/colander/pull/319\n\n- Format Python code of ``colander`` to conform to the PEP 8 style guide.\n  Add some linters (``flake8``, ``black`` and other) into ``tox.ini``.\n  See https://github.com/Pylons/colander/pull/320\n\n1.5.1 (2018-09-10)\n==================\n\n- Support deserializing ``colander.drop`` and ``colander.required``.\n  See https://github.com/Pylons/colander/pull/304\n\n1.5.0 (2018-09-07)\n==================\n\n- Drop Python 3.3 support. Add PyPy3 and Python 3.7 as allowed failures.\n  See https://github.com/Pylons/colander/pull/309\n\n- Fix email validation to not allow all ASCII characters between + and /.\n  This prevents email addresses like 'foo1,foo2@bar.baz' from being validated,\n  which would be handled as multiple email addresses by subsequent tools.\n  See https://github.com/Pylons/colander/pull/315\n\n- Add support for ``enum.Enum`` objects.\n  See https://github.com/Pylons/colander/pull/305\n\n- Recompiled language translations and updated ``de`` and ``el`` locales.\n  See https://github.com/Pylons/colander/pull/284 and\n  https://github.com/Pylons/colander/pull/314\n\n1.4.0 (2017-07-31)\n==================\n\n- Remove the ``colander.iso8601`` backward-compatibility module, broken\n  by recent updates to the actual ``iso8601`` package which backed it.\n  Downstream libraries can just mechanically adjust imports to use\n  ``iso8601.iso8601`` instead of ``colander.iso8601``.\n  See https://github.com/Pylons/colander/pull/296\n\n1.3.3 (2017-04-25)\n==================\n\n- Add \"zh_Hant\", traditional chinese translations, and rename simplified\n  chinese from \"zh\" to \"zh_Hans\".\n  See https://github.com/Pylons/colander/pull/285\n\n- Improve serialization of class objects using ``colander.GlobalObject``.\n  See https://github.com/Pylons/colander/pull/288\n\n1.3.2 (2017-01-31)\n==================\n\n- Python 3.6 support.\n\n- Allow deferred schema nodes.\n  See https://github.com/Pylons/colander/pull/280\n\n- Fix an issue when using a node multiple times in a schema by cloning it.\n  See https://github.com/Pylons/colander/issues/279\n\n- Fix a regression that broke ``SequenceSchema.clone``.\n  See https://github.com/Pylons/colander/pull/275\n\n- Update german translations.\n  See https://github.com/Pylons/colander/pull/273\n\n- Recompile language files.\n  See https://github.com/Pylons/colander/pull/270\n\n1.3.1 (2016-05-23)\n==================\n\n- 1.3 was released without updating the changelog. This release fixes that.\n\n1.3 (2016-05-23)\n================\n\n- Drop Python 2.6 and PyPy3 from the test suite. They are no longer\n  supported. See https://github.com/Pylons/colander/pull/263\n\n- ``colander.String`` schema type now supports an optional keyword argument\n  ``allow_empty`` which, when True, deserializes an empty string to an\n  empty string. When False (default), an empty string deserializes to\n  ``colander.null``. This allows for a node to be explicitly required, but\n  allow an empty ('') value to be provided.\n  https://github.com/Pylons/colander/pull/199\n\n- Add ``separator`` parameter to ``colander.Invalid.asdict``\n  (for backward compatibility, default is '; ').\n  See https://github.com/Pylons/colander/pull/253\n\n- Fixed an issue with ``SchemaNode.clone`` where it would fail when\n  cloning an instance of ``colander.SequenceSchema`` due to initializing\n  the schema without any children, violating some checks.\n  See https://github.com/Pylons/colander/pull/212\n\n1.2 (2016-01-18)\n================\n\nFeatures\n--------\n\n- Add new exception ``UnsupportedFields``. Used to pass to the caller a list\n  of extra fields detected in a cstruct during deserialize.\n  See https://github.com/Pylons/colander/pull/241\n\n- Add ``drop`` functionality to ``Sequence`` type.\n  See https://github.com/Pylons/colander/pull/225\n\nBug Fixes\n---------\n\n- ``SchemaNode`` will no longer assume the first argument to the constructor\n  is the schema type. This allows it to properly fallback to using the\n  ``schema_type`` class attribute on subclasses even when using the\n  imperative API to pass options to the constructor.\n\n- Fix a bug in which ``MappingSchema``, ``SequenceSchema`` and\n  ``TupleSchema`` would always treat the first arg as the schema type. This\n  meant that it would fail if passed only nodes to the constructor despite\n  the default type being implied by the name. It is now possible to do\n  ``MappingSchema(child1, child2, ...)`` instead of\n  ``MappingSchema(Mapping(), child1, child2)``.\n\nTranslations\n------------\n\n- Added Finnish translations: ``fi``\n  See https://github.com/Pylons/colander/pull/243\n\n1.1 (2016-01-15)\n================\n\nPlatform\n--------\n\n- Add explicit support for Python 3.4, Python 3.5 and PyPy3.\n\nFeatures\n--------\n\n- Add ``min_err`` and ``max_err`` arguments to ``Length``, allowing\n  customization of its error messages.\n\n- Add ``colander.Any`` validator: succeeds if at least one of its\n  subvalidators succeeded.\n\n- Allow localization of error messages returned by ``colander.Invalid.asdict``\n  by adding an optional ``translate`` callable argument.\n\n- Add a ``missing_msg`` argument to ``SchemaNode``, allowing customization\n  of the error message used when the node is required and missing.\n\n- Add ``NoneOf`` validator which succeeds if the value is none of the choices.\n\n- Add ``normalize`` option to ``Decimal``, stripping the rightmost\n  trailing zeros.\n\nBug Fixes\n---------\n\n- Fix an issue where the ``flatten()`` method produces an invalid name\n  (ex: \"answer.0.\") for the type ``Sequence``.  See\n  https://github.com/Pylons/colander/issues/179\n\n- Fixed issue with ``String`` not being properly encoded when non-string\n  values were passed into ``serialize()``\n  See `#235 <https://github.com/Pylons/colander/pull/235>`_\n\n- ``title`` was being overwritten when made a child through defining a schema\n  as a class. See https://github.com/Pylons/colander/pull/239\n\nTranslations\n------------\n\n- Added new translations: ``el``\n\n- Updated translations: ``fr``, ``de``, ``ja``\n\n1.0 (2014-11-26)\n================\n\nBackwards Incompatibilities\n---------------------------\n\n- ``SchemaNode.deserialize`` will now raise an\n  ``UnboundDeferredError`` if the node has an unbound deferred\n  validator.  Previously, deferred validators were silently ignored.\n  See https://github.com/Pylons/colander/issues/47\n\nBug Fixes\n---------\n\n- Removed forked ``iso8601`` and change to dependency on PyPI ``iso8601``\n  (due to float rounding bug on microsecond portion when parsing\n  iso8601 datetime string).  Left an ``iso8601.py`` stub for backwards\n  compatibility.\n\n- Time of \"00:00\" no longer gives ``colander.Invalid``.\n\n- Un-break wrapping of callable instances as ``colander.deferred``.\n  See https://github.com/Pylons/colander/issues/141.\n\n- Set the max length TLD to 22 in ``Email`` validator based on the\n  current list of valid TLDs.\n  See https://github.com/Pylons/colander/issues/159\n\n- Fix an issue where ``drop`` was not recognized as a default and was\n  returning the ``drop`` instance instead of omitting the value.\n  https://github.com/Pylons/colander/issues/139\n\n- Fix an issue where the ``SchemaNode.title`` was clobbered by the ``name``\n  when defined as a class attribute.\n  See https://github.com/Pylons/colander/pull/183 and\n  https://github.com/Pylons/colander/pull/185\n\nTranslations\n------------\n\n- Updated translations: ``fr``, ``de``, ``ja``\n\n\n1.0b1 (2013-09-01)\n==================\n\nBug Fixes\n---------\n\n- In 1.0a1, there was a change merged from\n  https://github.com/Pylons/colander/pull/73 which made it possible to supply\n  ``None`` as the ``default`` value for a String type, and upon serialization,\n  the value would be rendered as ``colander.null`` if the default were used.\n  This confused people who were actually supplying the value ``None`` as a\n  default when the associated appstruct had no value, so the change has been\n  reverted.  When you supply ``None`` as the ``default`` argument to a String,\n  the rendered serialize() value will again be ``'None'``.  Sorry.\n\n- Normalize ``colander.Function`` argument ``message`` to be ``msg``. This now\n  matches other APIs within Colander. The ``message`` argument is now\n  deprecated and a warning will be emitted.\n  https://github.com/Pylons/colander/issues/31\n  https://github.com/Pylons/colander/issues/64\n\n- ``iso8601.py``:  Convert ``ValueError`` (raised by ``datetime``) into\n  ``ParseErrorr`` in ``parse_date``, so that the validation machinery\n  upstream handles it properly.\n\n- ``iso8601.py``:  Correctly parse datetimes with a timezone of Z even\n  when the default_timezone is set. These previously had the default\n  timezone.\n\n- ``colander.String`` schema type now raises ``colander.Invalid`` when trying\n  to deserialize a non-string item.\n  See https://github.com/Pylons/colander/issues/100\n\nFeatures\n--------\n\n- Add ``colander.List`` type, modeled on ``deform.List``:  this type\n  preserves ordering, and allows duplicates.\n\n- It is now possible to use the value ``colander.drop`` as the ``default``\n  value for items that are subitems of a mapping.  If ``colander.drop`` is used\n  as the ``default`` for a subnode of a mapping schema, and the mapping\n  appstruct being serialized does not have a value for that schema node, the\n  value will be omitted from the serialized mapping.  For instance, the\n  following script, when run would not raise an assertion error::\n\n      class What(colander.MappingSchema):\n        thing = colander.SchemaNode(colander.String(), default=colander.drop)\n\n      result = What().serialize({}) # no \"thing\" in mapping\n      assert result == {}\n\n- The ``typ`` of a ``SchemaNode`` can optionally be pased in as a keyword\n  argument. See https://github.com/Pylons/colander/issues/90\n\n- Allow interpolation of `missing_msg` with properties `title` and `name`\n\n1.0a5 (2013-05-31)\n==================\n\n- Fix bug introduced by supporting spec-mandated truncations of ISO-8601\n  timezones.  A TypeError would be raised instead of Invalid.  See\n  https://github.com/Pylons/colander/issues/111.\n\n1.0a4 (2013-05-21)\n==================\n\n- Loosen Email validator regex (permit apostrophes, bang, etc in localpart).\n\n- Allow for timezone info objects to be pickled and unpickled \"more correctly\"\n  (Use '__getinitargs__' to provide unpickling-only defaults).  See\n  https://github.com/Pylons/colander/pull/108.\n\n1.0a3 (2013-05-16)\n==================\n\nFeatures\n--------\n\n- Support spec-mandated truncations of ISO-8601 timezones.\n\n- Support spec-mandated truncations of ISO-8601 datetimes.\n\n- Allow specifying custom representations of values for boolean fields.\n\nBug Fixes\n---------\n\n- Ensure that ``colander.iso8601.FixedOffset`` instances can be unpickled.\n\n- Avoid validating strings as sequences under Py3k.\n\n- Sync documentation with 0.9.9 change to use ``insert_before`` rather than\n  ``schema_order``.  See https://github.com/Pylons/colander/issues/104\n\n\n1.0a2 (2013-01-30)\n==================\n\nFeatures\n--------\n\n- Add ``colander.ContainsOnly`` and ``colander.url`` validators.\n\n- Add ``colander.instantiate`` to help define schemas containing\n  mappings and sequences more succinctly.\n\n1.0a1 (2013-01-10)\n==================\n\nBug Fixes\n---------\n\n- Work around a regression in Python 3.3 for ``colander.Decimal`` when it's\n  used with a ``quant`` argument but without a ``rounding`` argument.\n  See https://github.com/Pylons/colander/issues/66\n\n- Using ``SchemaNode(String, default='', ..)`` now works properly, or at least\n  more intuitively.  Previously if an empty-string ``default`` was supplied,\n  serialization would return a defaulted value as ``colander.null``.  See\n  https://github.com/Pylons/colander/pull/73.\n\n- Stricter checking in colander.Mapping to prevent items which are logically\n  not mappings from being accepted during validation (see\n  https://github.com/Pylons/colander/pull/96).\n\nFeatures\n--------\n\n- Add ``colander.Set`` type, ported from ``deform.Set``\n\n- Add Python 3.3 to tox configuration and use newer tox testing regime\n  (setup.py dev).\n\n- Add Python 3.3 Trove classifier.\n\n- Calling ``bind`` on a schema node e.g. ``cloned_node = somenode.bind(a=1,\n  b=2)`` on a schema node now results in the cloned node having a\n  ``bindings`` attribute of the value ``{'a':1, 'b':2}``.\n\n- It is no longer necessary to pass a ``typ`` argument to a SchemaNode\n  constructor if the node class has a ``schema_type`` callable as a class\n  attribute which, when called with no arguments, returns a schema type.\n  This callable will be called to obtain the schema type if a ``typ`` is not\n  supplied to the constructor.  The default ``SchemaNode`` object's\n  ``schema_type`` callable raises a ``NotImplementedError`` when it is\n  called.\n\n- SchemaNode now has a ``raise_invalid`` method which accepts a message and\n  raises a colander.Invalid exception using ``self`` as the node and the\n  message as its message.\n\n- It is now possible and advisable to subclass ``SchemaNode`` in order to\n  create a bundle of default node behavior.  The subclass can define the\n  following methods and attributes: ``preparer``, ``validator``, ``default``,\n  ``missing``, ``name``, ``title``, ``description``, ``widget``, and\n  ``after_bind``.\n\n  For example, the older, more imperative style that looked like this still\n  works, of course::\n\n     from colander import SchemaNode\n\n     ranged_int = colander.SchemaNode(\n         validator=colander.Range(0, 10),\n         default = 10,\n         title='Ranged Int'\n         )\n\n  But you can alternately now do something like this::\n\n     from colander import SchemaNode\n\n     class RangedIntSchemaNode(SchemaNode):\n         validator = colander.Range(0, 10)\n         default = 10\n         title = 'Ranged Int'\n\n     ranged_int = RangedInt()\n\n  Values that are expected to be callables can now alternately be methods of\n  the schemanode subclass instead of plain attributes::\n\n     from colander import SchemaNode\n\n     class RangedIntSchemaNode(SchemaNode):\n         default = 10\n         title = 'Ranged Int'\n\n         def validator(self, node, cstruct):\n            if not 0 < cstruct < 10:\n                raise colander.Invalid(node, 'Must be between 0 and 10')\n\n     ranged_int = RangedInt()\n\n  Note that when implementing a method value such as ``validator`` that\n  expects to receive a ``node`` argument, ``node`` must be provided in the\n  call signature, even though ``node`` will almost always be the same as\n  ``self``.  This is because Colander simply treats the method as another\n  kind of callable, be it a method, or a function, or an instance that has a\n  ``__call__`` method.  It doesn't care that it happens to be a method of\n  ``self``, and it needs to support callables that are not methods, so it\n  sends ``node`` in regardless.\n\n  You can't currently use *method* definitions as ``colander.deferred``\n  callables.  For example this will *not* work::\n\n     from colander import SchemaNode\n\n     class RangedIntSchemaNode(SchemaNode):\n         default = 10\n         title = 'Ranged Int'\n\n         @colander.deferred\n         def validator(self, node, kw):\n            request = kw['request']\n            def avalidator(node, cstruct):\n                if not 0 < cstruct < 10:\n                    if request.user != 'admin':\n                        raise colander.Invalid(node, 'Must be between 0 and 10')\n            return avalidator\n\n     ranged_int = RangedInt()\n     bound_ranged_int = ranged_int.bind(request=request)\n\n  This will result in::\n\n        TypeError: avalidator() takes exactly 3 arguments (2 given)\n\n  However, if you treat the thing being decorated as a function instead of a\n  method (remove the ``self`` argument from the argument list), it will\n  indeed work)::\n\n     from colander import SchemaNode\n\n     class RangedIntSchemaNode(SchemaNode):\n         default = 10\n         title = 'Ranged Int'\n\n         @colander.deferred\n         def validator(node, kw):\n            request = kw['request']\n            def avalidator(node, cstruct):\n                if not 0 < cstruct < 10:\n                    if request.user != 'admin':\n                        raise colander.Invalid(node, 'Must be between 0 and 10')\n            return avalidator\n\n     ranged_int = RangedInt()\n     bound_ranged_int = ranged_int.bind(request=request)\n\n  In previous releases of Colander, the only way to defer the computation of\n  values was via the ``colander.deferred`` decorator.  In this release,\n  however, you can instead use the ``bindings`` attribute of ``self`` to\n  obtain access to the bind parameters within values that are plain old\n  methods::\n\n     from colander import SchemaNode\n\n     class RangedIntSchemaNode(SchemaNode):\n         default = 10\n         title = 'Ranged Int'\n\n         def validator(self, node, cstruct):\n            request = self.bindings['request']\n            if not 0 < cstruct < 10:\n                if request.user != 'admin':\n                    raise colander.Invalid(node, 'Must be between 0 and 10')\n\n     ranged_int = RangedInt()\n     bound_range_int = ranged_int.bind(request=request)\n\n  If the things you're trying to defer aren't callables like ``validator``,\n  but they're instead just plain attributes like ``missing`` or ``default``,\n  instead of using a ``colander.deferred``, you can use ``after_bind`` to set\n  attributes of the schemanode that rely on binding variables::\n\n     from colander import SchemaNode\n\n     class UserIdSchemaNode(SchemaNode):\n         title = 'User Id'\n\n         def after_bind(self, node, kw):\n             self.default = kw['request'].user.id\n\n  You can override the default values of a schemanode subclass in its\n  constructor::\n\n     from colander import SchemaNode\n\n     class RangedIntSchemaNode(SchemaNode):\n         default = 10\n         title = 'Ranged Int'\n         validator = colander.Range(0, 10)\n\n     ranged_int = RangedInt(validator=colander.Range(0, 20))\n\n  In the above example, the validation will be done on 0-20, not 0-10.\n\n  If a schema node name conflicts with a schema value attribute name on the\n  same class, you can work around it by giving the schema node a bogus name\n  in the class definition but providing a correct ``name`` argument to the\n  schema node constructor::\n\n     from colander import SchemaNode, Schema\n\n     class SomeSchema(Schema):\n         title = 'Some Schema'\n         thisnamewillbeignored = colander.SchemaNode(\n                                             colander.String(),\n                                             name='title'\n                                             )\n\n  Note that such a workaround is only required if the conflicting names are\n  attached to the *exact same* class definition.  Colander scrapes off schema\n  node definitions at each class' construction time, so it's not an issue for\n  inherited values.  For example::\n\n     from colander import SchemaNode, Schema\n\n     class SomeSchema(Schema):\n         title = colander.SchemaNode(colander.String())\n\n     class AnotherSchema(SomeSchema):\n         title = 'Some Schema'\n\n     schema = AnotherSchema()\n\n  In the above example, even though the ``title = 'Some Schema'`` appears to\n  override the superclass' ``title`` SchemaNode, a ``title`` SchemaNode will\n  indeed be present in the child list of the ``schema`` instance\n  (``schema['title']`` will return the ``title`` SchemaNode) and the schema's\n  ``title`` attribute will be ``Some Schema`` (``schema.title`` will return\n  ``Some Schema``).\n\n  Normal inheritance rules apply to class attributes and methods defined in\n  a schemanode subclass.  If your schemanode subclass inherits from another\n  schemanode class, your schemanode subclass' methods and class attributes\n  will override the superclass' methods and class attributes.\n\n  Ordering of child schema nodes when inheritance is used works like this:\n  the \"deepest\" SchemaNode class in the MRO of the inheritance chain is\n  consulted first for nodes, then the next deepest, then the next, and so on.\n  So the deepest class' nodes come first in the relative ordering of schema\n  nodes, then the next deepest, and so on.  For example::\n\n      class One(colander.Schema):\n          a = colander.SchemaNode(\n              colander.String(),\n              id='a1',\n              )\n          b = colander.SchemaNode(\n              colander.String(),\n              id='b1',\n              )\n          d = colander.SchemaNode(\n              colander.String(),\n              id='d1',\n              )\n\n      class Two(One):\n          a = colander.SchemaNode(\n              colander.String(),\n              id='a2',\n              )\n          c = colander.SchemaNode(\n              colander.String(),\n              id='c2',\n              )\n          e = colander.SchemaNode(\n              colander.String(),\n              id='e2',\n              )\n\n      class Three(Two):\n          b = colander.SchemaNode(\n              colander.String(),\n              id='b3',\n              )\n          d = colander.SchemaNode(\n              colander.String(),\n              id='d3',\n              )\n          f = colander.SchemaNode(\n              colander.String(),\n              id='f3',\n              )\n\n      three = Three()\n\n  The ordering of child nodes computed in the schema node ``three`` will be\n  ``['a2', 'b3', 'd3', 'c2', 'e2', 'f3']``.  The ordering starts ``a1``,\n  ``b1``, ``d1`` because that's the ordering of nodes in ``One``, and\n  ``One`` is the deepest SchemaNode in the inheritance hierarchy.  Then it\n  processes the nodes attached to ``Two``, the next deepest, which causes\n  ``a1`` to be replaced by ``a2``, and ``c2`` and ``e2`` to be appended to\n  the node list.  Then finally it processes the nodes attached to ``Three``,\n  which causes ``b1`` to be replaced by ``b3``, and ``d1`` to be replaced by\n  ``d3``, then finally ``f`` is appended.\n\n  Multiple inheritance works the same way::\n\n      class One(colander.Schema):\n          a = colander.SchemaNode(\n              colander.String(),\n              id='a1',\n              )\n          b = colander.SchemaNode(\n              colander.String(),\n              id='b1',\n              )\n          d = colander.SchemaNode(\n              colander.String(),\n              id='d1',\n              )\n\n      class Two(colander.Schema):\n          a = colander.SchemaNode(\n              colander.String(),\n              id='a2',\n              )\n          c = colander.SchemaNode(\n              colander.String(),\n              id='c2',\n              )\n          e = colander.SchemaNode(\n              colander.String(),\n              id='e2',\n              )\n\n      class Three(Two, One):\n          b = colander.SchemaNode(\n              colander.String(),\n              id='b3',\n              )\n          d = colander.SchemaNode(\n              colander.String(),\n              id='d3',\n              )\n          f = colander.SchemaNode(\n              colander.String(),\n              id='f3',\n              )\n\n      three = Three()\n\n  The resulting node ordering of ``three`` is the same as the single\n  inheritance example: ``['a2', 'b3', 'd3', 'c2', 'e2', 'f3']`` due to the\n  MRO deepest-first ordering (``One``, then ``Two``, then ``Three``).\n\nBackwards Incompatibilities\n---------------------------\n\n- Passing non-SchemaNode derivative instances as ``*children`` into a\n  SchemaNode constructor is no longer supported.  Symptom: ``AttributeError:\n  name`` when constructing a SchemaNode.\n\n0.9.9 (2012-09-24)\n==================\n\nFeatures\n--------\n\n- Allow the use of ``missing=None`` for Number.  See\n  https://github.com/Pylons/colander/pull/59 .\n\n- Create a ``colander.Money`` type that is a Decimal type with\n  two-decimal-point precision rounded-up.\n\n- Allow ``quant`` and ``rounding`` args to ``colander.Decimal`` constructor.\n\n- ``luhnok`` validator added (credit card luhn mod10 validator).\n\n- Add an ``insert`` method to SchemaNode objects.\n\n- Add an ``insert_before`` method to SchemaNode objects.\n\n- Better class-based mapping schema inheritance model.\n\n  * A node declared in a subclass of a mapping schema superclass now\n    overrides any node with the same name inherited from any superclass.\n    Previously, it just repeated and didn't override.\n\n  * An ``insert_before`` keyword argument may be passed to a SchemaNode\n    constructor.  This is a string naming a node in a superclass.  A node\n    with an ``insert_before`` will be placed before the named node in a\n    parent mapping schema.\n\n- The ``preparer=`` argument to SchemaNodes may now be a sequence of\n  preparers.\n\n- Added a ``cstruct_children`` method to SchemaNode.\n\n- A new ``cstruct_children`` API should exist on schema types.  If\n  ``SchemaNode.cstruct_children`` is called on a node with a type that does\n  not have a ``cstruct_children`` method, a deprecation warning is emitted\n  and ``[]`` is returned (this may or may not be the correct value for your\n  custom type).\n\nBackwards Incompatibilities\n---------------------------\n\n- The inheritance changes required a minor backwards incompatibility: calling\n  ``__setitem__`` on a SchemaNode will no longer raise ``KeyError`` when\n  attempting to set a subnode into a node that doesn't already have an\n  existing subnode by that name.  Instead, the subnode will be appended to\n  the child list.\n\nDocumentation\n-------------\n\n- A \"Schema Inheritance\" section was added to the Basics chapter\n  documentation.\n\n0.9.8 (2012-04-27)\n==================\n\n- False evaluating values are now serialized to colander.null for\n  String, Date, and Time.  This resolves the issue where a None value\n  would be rendered as 'None' for String, and missing='None' was not\n  possible for Date, Datetime, and Time.\n  See https://github.com/Pylons/colander/pull/1 .\n\n- Updated Brazilian Portugese translations.\n\n- Updated Japanese translations.\n\n- Updated Russian translations.\n\n- Fix documentation: 0.9.3 allowed explicitly passing None to DateTime\n  to have no default timezone applied.\n\n- Add ``dev`` and ``docs`` setup.py aliases (e.g. ``python setup.py dev``).\n\n0.9.7 (2012-03-20)\n==================\n\n- Using ``schema.flatten(...)`` against a mapping schema node without a name\n  produced incorrectly dot-prefixed keys.  See\n  https://github.com/Pylons/colander/issues/37\n\n- Fix invalid.asdict for multiple error messages.  See\n  https://github.com/Pylons/colander/pull/22 ,\n  https://github.com/Pylons/colander/pull/27 ,\n  https://github.com/Pylons/colander/pull/12 , and\n  https://github.com/Pylons/colander/issues/2 .\n\n- Invalid.messages() now returns an empty list if there are no messages.\n  See https://github.com/Pylons/colander/pull/21 .\n\n- ``name`` passed to a SchemaNode constructor was not respected in\n  declaratively constructed schemas.  Now if you pass ``name`` to the\n  SchemaNode constructor within the body of a schema class, it will take\n  precedence over the name it's been assigned to in the schema class.\n  See https://github.com/Pylons/colander/issues/39 .\n\n- Japanese translation thanks to OCHIAI, Gouji.\n\n- Replaced incorrect ``%{err}`` with correct ``${err}`` in String.deserialize\n  error message.  See https://github.com/Pylons/colander/pull/41\n\n0.9.6 (2012-02-14)\n==================\n\n- No longer runs on Python 2.4 or 2.5.  Python 2.6+ is now required.\n\n- Python 3.2 compatibility.\n\n- Removed a dependency on the iso8601 package (code from the package is now\n  inlined in Colander itself).\n\n- Added copyright and licensing information for iso8601-derived code to\n  LICENSE.txt.\n\n0.9.5 (2012-01-13)\n==================\n\n- Added Czech translation.\n\n- Compile pt_BR translation (it was previously uncompiled).\n\n- Minor docs fixes.\n\n- Documentation added about flatten and unflatten.\n\n0.9.4 (2011-10-14)\n==================\n\n- ``flatten`` now only includes leaf nodes in the flattened dict.\n\n- ``flatten`` does not include a path element for the name of the type node\n  for sequences.\n\n- ``unflatten`` is implemented.\n\n- Added ``__setitem__`` to ``SchemaNode``, allowing replacement of nodes by\n  name.\n\n- Added ``get_value`` and ``set_value`` methods to ``Schema`` which allow\n  access and mutation of appstructs using dotted name paths.\n\n- Add Swedish, French, Chinese translations.\n\n0.9.3 (2011-06-23)\n==================\n\n- Add ``Time`` type.\n\n- Add Dutch translation.\n\n- Fix documentation: 0.9.2 requires ``deserialize`` of types to explicitly\n  deal with the potential to receive ``colander.null``.\n\n- Use ``default_tzinfo`` when deserializing naive datetimes.  See\n  https://github.com/Pylons/colander/pull/5\n\n- Allow ``default_tzinfo`` to be ``None`` when creating a\n  ``colander.DateTime``.  See\n  https://github.com/Pylons/colander/pull/6\n\n- Add the ability to insert a ``colander.interfaces.Preparer`` between\n  deserialization and validation. See the Preparing section in the\n  documentation.\n\n0.9.2 (2011-03-28)\n==================\n\n- Added Polish translation, thanks to Jedrzej Nowak.\n\n- Moved to Pylons Project GitHub (https://github.com/Pylons/colander).\n\n- Add tox.ini for testing purposes.\n\n- New API: ``colander.required``.  Used as the marker value when a\n  ``missing`` argument is left unspecified.\n\n- Bug fix: if a ``title`` argument which is the empty string or ``None`` is\n  passed explicitly to a SchemaNode, it is no longer replaced by a title\n  computed from the name.\n\n- Add SchemaNode.__contains__ to support \"name in schema\".\n\n- SchemaNode deserialization now unconditionally calls the schema type's\n  ``deserialize`` method to obtain an appstruct before attempting to\n  validate.  Third party schema types should now return ``colander.null`` if\n  passed a ``colander.null`` value or another logically \"empty\" value as a\n  cstruct during ``deserialize``.\n\n0.9.1 (2010-12-02)\n==================\n\n- When ``colander.null`` was unpickled, the reference created during\n  unpickling was *not* a reference to the singleton but rather a new instance\n  of the ``colander._null`` class.  This was unintentional, because lots of\n  code checks for ``if x is colander.null``, which will fail across pickling\n  and unpickling.  Now the reference created when ``colander.null`` is\n  pickled is unpickled as the singleton itself.\n\n0.9  (2010-11-28)\n=================\n\n- SchemaNode constructor now accepts arbitrary keyword arguments.  It\n  sets any unknown values within the ``**kw`` sequence as attributes\n  of the node object.\n\n- Added Spanish locale:  thanks to Douglas Cerna for the translations!\n\n- If you use a schema with deferred ``validator``, ``missing`` or\n  ``default`` attributes, but you use it to perform serialization and\n  deserialization without calling its ``bind`` method:\n\n  - If ``validator`` is deferred, no validation will be performed.\n\n  - If ``missing`` is deferred, the field will be considered *required*.\n\n  - If ``default`` is deferred, the serialization default will be\n    assumed to be ``colander.null``.\n\n- Undocumented internal API for all type objects: ``flatten``.\n  External type objects should now inherit from\n  ``colander.SchemaType`` to get a default implementation.\n\n0.8  (2010/09/08)\n=================\n\n- Docstring fixes to ``colander.SchemaNode`` (``missing`` is not the\n  ``null`` value when required, it's a special marker value).\n\n- The concept of \"schema binding\" was added, which allows for a more\n  declarative-looking spelling of schemas and schema nodes which have\n  dependencies on values available after the schema has already been\n  fully constructed.  See the new narrative chapter in the\n  documentation entitled \"Schema Binding\".\n\n- The interface of ``colander.SchemaNode`` has grown a ``__delitem__``\n  method.  The ``__iter__``, and ``__getitem__`` methods have now also\n  been properly documented.\n\n0.7.3 (2010/09/02)\n==================\n\n- The title of a schema node now defaults to a titleization of the\n  ``name``.  Underscores in the ``name`` are replaced with empty\n  strings and the first letter of every resulting word is capitalized.\n  Previously the ``name`` was not split on underscores, and the\n  entirety of the ``name`` was capitalized.\n\n- A method of the ``colander.Invalid`` exception named ``messages``\n  was added.  It returns an iterable of error messages using the\n  ``msg`` attribute of its related exception node.  If the ``msg``\n  attribute is iterable, it is returned.  If it is not iterable, a\n  single-element list containing the ``msg`` value is returned.\n\n0.7.2 (2010/08/30)\n==================\n\n- Add an ``colander.SchemaNode.__iter__`` method, which iterates over\n  the children nodes of a schema node.\n\n- The constructor of a ``colander.SchemaNode`` now accepts a\n  ``widget`` keyword argument, for use by Deform (it is not used\n  internally).\n\n0.7.1 (2010/06/12)\n==================\n\n- Make it possible to use ``colander.null`` as a ``missing`` argument\n  to ``colander.SchemaNode`` for roundtripping purposes.\n\n- Make it possible to pickle ``colander.null``.\n\n0.7.0\n=====\n\nA release centered around normalizing the treatment of default and\nmissing values.\n\nBug Fixes\n---------\n\n- Allow ``colander.Regex`` validator to accept a pattern object\n  instead of just a string.\n\n- Get rid of circular reference in Invalid exceptions: Invalid\n  exceptions now no longer have a ``parent`` attribute.  Instead, they\n  have a ``positional`` attribute, which signifies that the parent\n  node type of the schema node to which they relate inherits from\n  Positional.  This attribute isn't an API; it's used only internally\n  for reporting.\n\n- Raise a ``TypeError`` when bogus keyword arguments are passed to\n  ``colander.SchemaNode``.\n\nBackwards Incompatiblities / New Features\n-----------------------------------------\n\n- ``missing`` constructor arg to SchemaNode: signifies\n  *deserialization* default, disambiguated from ``default`` which acted\n  as both serialization and deserialization default previously.\n\n  Changes necessitated / made possible by SchemaNode ``missing``\n  addition:\n\n  - The ``allow_empty`` argument of the ``colander.String`` type was\n    removed (use ``missing=''`` as a wrapper SchemaNode argument\n    instead).\n\n- New concept: ``colander.null`` input to serialization and\n  deserialization.  Use of ``colander.null`` normalizes serialization\n  and deserialization default handling.\n\n  Changes necessitated / made possible by ``colander.null`` addition:\n\n  - ``partial`` argument and attribute of colander.MappingSchema has\n     been removed; all serializations are partial, and partial\n     deserializations are not necessary.\n\n  - ``colander.null`` values are added to the cstruct for partial\n     serializations instead of omitting missing node values from\n     the cstruct.\n\n  - ``colander.null`` may now be present in serialized and\n     deserialized data structures.\n\n  - ``sdefault`` attribute of SchemaNode has been removed; we never need\n    to serialize a default anymore.\n\n  - The value ``colander.null`` will be passed as ``appstruct`` to\n    each type's ``serialize`` method when a mapping appstruct doesn't\n    have a corresponding key instead of ``None``, as was the practice\n    previously.\n\n  - The value ``colander.null`` will be passed as ``cstruct`` to\n    each type's ``deserialize`` method when a mapping cstruct\n    doesn't have a corresponding key instead of ``None``, as was the\n    practice previously.\n\n  - Types now must handle ``colander.null`` explicitly during\n    serialization.\n\n- Updated and expanded documentation, particularly with respect to new\n  ``colander.null`` handling.\n\n- The ``value`` argument to the ``serialize`` method of a SchemaNode\n  is now named ``appstruct``.  It is no longer a required argument; it\n  defaults to ``colander.null`` now.\n\n  The ``value`` argument to the ``deserialize`` method of a SchemaNode\n  is now named ``cstruct``.  It is no longer a required argument; it\n  defaults to ``colander.null`` now.\n\n- The ``value`` argument to the ``serialize`` method of each built-in\n  type is now named ``appstruct``, and is now required: it is no\n  longer a keyword argument that has a default.\n\n  The ``value`` argument to the ``deserialize`` method of each\n  built-in type is now named ``cstruct``, and is now required: it is\n  no longer a keyword argument that has a default.\n\n0.6.2 (2010-05-08)\n==================\n\n- The default ``encoding`` parameter value to the ``colander.String``\n  type is still ``None``, however its meaning has changed.  An\n  encoding of ``None`` now means that no special encoding and decoding\n  of Unicode values is done by the String type.  This differs from the\n  previous behavior, where ``None`` implied that the encoding was\n  ``utf-8``.  Pass the encoding as ``utf-8`` specifically to get the\n  older behavior back.  This is in support of Deform.\n\n- The default ``err_template`` value attached to the ``colander.Date``\n  and ``colander.Datetime`` types was changed.  It is now simply\n  ``Invalid date`` instead of ``_('${val} cannot be parsed as an\n  iso8601 date: ${err}')``.  This is in support of Deform.\n\n- Fix bug in ``colander.Boolean`` that attempted to call ``.lower`` on\n  a bool value when a default value was found for the schema node.\n\n0.6.1 (2010-05-04)\n==================\n\n- Add a Decimal type (number type which uses ``decimal.Decimal`` as a\n  deserialization target).\n\n0.6.0 (2010-05-02)\n==================\n\n- (Hopefully) fix intermittent datetime-granularity-related test\n  failures.\n\n- Internationalized error messages.  This required some changes to\n  error message formatting, which may impact you if you were feeding\n  colander an error message template.\n\n- New project dependency: ``translationstring`` package for\n  internationalization.\n\n- New argument to ``colander.String`` constructor: ``allow_empty``.\n  This is a boolean representing whether an empty string is a valid\n  value during deserialization, defaulting to ``False``.\n\n- Add minimal documentation about the composition of a\n  colander.Invalid exception to the narrative docs.\n\n- Add (existing, but previously non-API) colander.Invalid attributes\n  to its interface within the API documentation.\n\n0.5.2 (2010-04-09)\n==================\n\n- Add Email and Regex validators (courtesy Steve Howe).\n\n- Raise a ``colander.Invalid`` error if a ``colander.SequenceSchema``\n  is created with more than one member.\n\n- Add ``Function`` validator.\n\n- Fix bug in serialization of non-Unicode values in the ``String`` class.\n\n- Get rid of ``pserialize`` in favor of making ``serialize`` always\n  partially serialize.\n\n- Get rid of ``pdeserialize``: it existed only for symmetry.  We'll\n  add something like it back later if we need it.\n\n0.5.1 (2010-04-02)\n==================\n\n- The constructor arguments to a the ``colander.Schema`` class are now\n  sent to the constructed SchemaNode rather than to the type it represents.\n\n- Allow ``colander.Date`` and ``colander.DateTime`` invalid error\n  messages to be customized.\n\n- Add a ``pos`` argument to the ``colander.Invalid.add`` method.\n\n- Add a ``__setitem__`` method to the ``colander.Invalid`` class.\n\n- The ``colander.Mapping`` constructor keyword argument\n  ``unknown_keys`` has been renamed to ``unknown``.\n\n- Allow ``colander.Mapping`` type to accept a new constructor\n  argument: ``partial``.\n\n- New interface methods required by types and schema nodes:\n  ``pserialize`` and ``pdeserialize``.  These partially serialize or\n  partially deserialize a value (the definition of \"partial\" is up to\n  the type).\n\n0.5 (2010-03-31)\n================\n\n- 0.4 was mispackaged (CHANGES.txt missing); no code changes from 0.4\n  however.\n\n0.4 (2010-03-30)\n================\n\n- Add ``colander.DateTime`` and ``colander.Date`` data types.\n\n- Depend on the ``iso8601`` package for date support.\n\n0.3 (2010-03-29)\n================\n\n- Subnodes of a schema node are now kept in the ``children`` attribute\n  rather than the ``nodes`` attribute.\n\n- Add an ``sdefault`` property to ``colander.SchemaNode`` objects.\n\n- Add a ``clone`` method to ``colander.SchemaNode`` objects.\n\n- Add a ``__str__`` method to the ``colander.Invalid`` exception that\n  prints an error summary.\n\n- Various error message improvements.\n\n- Add ``colander.Length`` validator class.\n\n0.2 (2010-03-23)\n================\n\n- Make nodetype overrideable.\n\n- Add __getitem__ to SchemaNode.\n\n- Fix OneOf message.\n\n- Capitalize node titles.\n\n- Deal with empty strings in String, Boolean, and Float types.\n\n- Introduce description; make title the same as name.\n\n- Remove copy method from schemanode.\n\n- Allow schema nodes to have titles.\n\n- The term \"structure\" is too overloaded to use for schema purposes:\n  structure -> schema node.\n\n- Make Sequence more like Tuple and Mapping (it uses a substructure\n  rather than a structure parameter to denote its type).\n\n- Add __repr__ and copy methods to structure.\n\n- Add accept_scalar flag to Sequence.\n\n\n0.1 (2010-03-14)\n================\n\n- Initial release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://docs.pylonsproject.org/projects/colander/en/latest/", "keywords": "serialize deserialize validate schema validation", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": "", "maintainer_email": "", "name": "colander", "package_url": "https://pypi.org/project/colander/", "platform": "", "project_url": "https://pypi.org/project/colander/", "project_urls": {"Homepage": "https://docs.pylonsproject.org/projects/colander/en/latest/"}, "release_url": "https://pypi.org/project/colander/1.7.0/", "requires_dist": ["translationstring", "iso8601", "enum34 ; python_version in \"2.7,3.3\"", "Sphinx (>=1.7.4) ; extra == 'docs'", "docutils ; extra == 'docs'", "pylons-sphinx-themes ; extra == 'docs'", "nose ; extra == 'testing'", "coverage ; extra == 'testing'"], "requires_python": "", "summary": "A simple schema-based serialization and deserialization library", "version": "1.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"colander\">\n<h2>Colander</h2>\n<a href=\"https://travis-ci.org/Pylons/colander\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/Pylons/colander.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a54e081c24b46fe22ca86fffa27ded1a937a54c/68747470733a2f2f7472617669732d63692e6f72672f50796c6f6e732f636f6c616e6465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://docs.pylonsproject.org/projects/colander/en/master/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45d1d6bbe86ab651c4808971c0cbc9152c1f7aef/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636f6c616e6465722f62616467652f3f76657273696f6e3d6d6173746572\"></a>\n<p>An extensible package which can be used to:</p>\n<ul>\n<li>deserialize and validate a data structure composed of strings,\nmappings, and lists.</li>\n<li>serialize an arbitrary data structure to a data structure composed\nof strings, mappings, and lists.</li>\n</ul>\n<p>It is tested on Python 2.7, 3.4, 3.5, 3.6, 3.7, and PyPy.</p>\n<p>Please see <a href=\"https://docs.pylonsproject.org/projects/colander/en/latest/\" rel=\"nofollow\">https://docs.pylonsproject.org/projects/colander/en/latest/</a>\nfor documentation.</p>\n<p>See <a href=\"https://github.com/Pylons/colander\" rel=\"nofollow\">https://github.com/Pylons/colander</a> for in-development version.</p>\n</div>\n<div id=\"id1\">\n<h2>1.7.0 (2019-02-01)</h2>\n<ul>\n<li><p>The URL validator regex has been updated to no longer be vulnerable to a\ncatastrophic backtracking that would have led to an infinite loop. See\n<a href=\"https://github.com/Pylons/colander/pull/323\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/323</a> and\n<a href=\"https://github.com/Pylons/colander/issues/290\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/290</a>. With thanks to Przemek\n(<a href=\"https://github.com/p-m-k\" rel=\"nofollow\">https://github.com/p-m-k</a>).</p>\n<p>This does change the behaviour of the URL validator and it no longer supports\n<tt><span class=\"pre\">file://</span></tt> URI scheme (<a href=\"https://tools.ietf.org/html/rfc8089\" rel=\"nofollow\">https://tools.ietf.org/html/rfc8089</a>). Users that\nwish to validate <tt><span class=\"pre\">file://</span></tt> URI\u2019s should change their validator to use\n<tt>colander.file_uri</tt> instead.</p>\n<p>It has also dropped support for alternate schemes outside of http/ftp (and\ntheir secure equivelants). Please let us know if we need to relax this\nrequirement.</p>\n<p>CVE-ID: CVE-2017-18361</p>\n</li>\n<li><p>The Email validator has been updated to use the same regular expression that\nis used by the WhatWG HTML specification, thereby increasing the email\naddresses that will validate correctly from web forms submitted. See\n<a href=\"https://github.com/Pylons/colander/pull/324\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/324</a> and\n<a href=\"https://github.com/Pylons/colander/issues/283\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/283</a></p>\n</li>\n<li><p>Number once again will allow you to serialize None to colander.null, this\nreverts an accidental revert. See\n<a href=\"https://github.com/Pylons/colander/issues/204#issuecomment-459556100\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/204#issuecomment-459556100</a></p>\n</li>\n<li><p>Integer SchemaType now supports an optional <tt>strict</tt> mode that will\nvalidate that the number is an integer, rather than silently accepting floats\nand truncating. See <a href=\"https://github.com/Pylons/colander/pull/322\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/322</a> and\n<a href=\"https://github.com/Pylons/colander/issues/292\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/292</a></p>\n</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>1.6.0 (2019-01-31)</h2>\n<ul>\n<li>Support custom format strings on <tt>DateTime</tt> and <tt>Date</tt> fields.\nSee <a href=\"https://github.com/Pylons/colander/pull/318\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/318</a></li>\n<li>Support sub-second precision on <tt>Time</tt> fields if provided.\nSee <a href=\"https://github.com/Pylons/colander/pull/319\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/319</a></li>\n<li>Format Python code of <tt>colander</tt> to conform to the PEP 8 style guide.\nAdd some linters (<tt>flake8</tt>, <tt>black</tt> and other) into <tt>tox.ini</tt>.\nSee <a href=\"https://github.com/Pylons/colander/pull/320\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/320</a></li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>1.5.1 (2018-09-10)</h2>\n<ul>\n<li>Support deserializing <tt>colander.drop</tt> and <tt>colander.required</tt>.\nSee <a href=\"https://github.com/Pylons/colander/pull/304\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/304</a></li>\n</ul>\n</div>\n<div id=\"id4\">\n<h2>1.5.0 (2018-09-07)</h2>\n<ul>\n<li>Drop Python 3.3 support. Add PyPy3 and Python 3.7 as allowed failures.\nSee <a href=\"https://github.com/Pylons/colander/pull/309\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/309</a></li>\n<li>Fix email validation to not allow all ASCII characters between + and /.\nThis prevents email addresses like \u2018foo1,foo2@bar.baz\u2019 from being validated,\nwhich would be handled as multiple email addresses by subsequent tools.\nSee <a href=\"https://github.com/Pylons/colander/pull/315\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/315</a></li>\n<li>Add support for <tt>enum.Enum</tt> objects.\nSee <a href=\"https://github.com/Pylons/colander/pull/305\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/305</a></li>\n<li>Recompiled language translations and updated <tt>de</tt> and <tt>el</tt> locales.\nSee <a href=\"https://github.com/Pylons/colander/pull/284\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/284</a> and\n<a href=\"https://github.com/Pylons/colander/pull/314\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/314</a></li>\n</ul>\n</div>\n<div id=\"id5\">\n<h2>1.4.0 (2017-07-31)</h2>\n<ul>\n<li>Remove the <tt>colander.iso8601</tt> backward-compatibility module, broken\nby recent updates to the actual <tt>iso8601</tt> package which backed it.\nDownstream libraries can just mechanically adjust imports to use\n<tt>iso8601.iso8601</tt> instead of <tt>colander.iso8601</tt>.\nSee <a href=\"https://github.com/Pylons/colander/pull/296\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/296</a></li>\n</ul>\n</div>\n<div id=\"id6\">\n<h2>1.3.3 (2017-04-25)</h2>\n<ul>\n<li>Add \u201czh_Hant\u201d, traditional chinese translations, and rename simplified\nchinese from \u201czh\u201d to \u201czh_Hans\u201d.\nSee <a href=\"https://github.com/Pylons/colander/pull/285\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/285</a></li>\n<li>Improve serialization of class objects using <tt>colander.GlobalObject</tt>.\nSee <a href=\"https://github.com/Pylons/colander/pull/288\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/288</a></li>\n</ul>\n</div>\n<div id=\"id7\">\n<h2>1.3.2 (2017-01-31)</h2>\n<ul>\n<li>Python 3.6 support.</li>\n<li>Allow deferred schema nodes.\nSee <a href=\"https://github.com/Pylons/colander/pull/280\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/280</a></li>\n<li>Fix an issue when using a node multiple times in a schema by cloning it.\nSee <a href=\"https://github.com/Pylons/colander/issues/279\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/279</a></li>\n<li>Fix a regression that broke <tt>SequenceSchema.clone</tt>.\nSee <a href=\"https://github.com/Pylons/colander/pull/275\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/275</a></li>\n<li>Update german translations.\nSee <a href=\"https://github.com/Pylons/colander/pull/273\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/273</a></li>\n<li>Recompile language files.\nSee <a href=\"https://github.com/Pylons/colander/pull/270\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/270</a></li>\n</ul>\n</div>\n<div id=\"id8\">\n<h2>1.3.1 (2016-05-23)</h2>\n<ul>\n<li>1.3 was released without updating the changelog. This release fixes that.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h2>1.3 (2016-05-23)</h2>\n<ul>\n<li>Drop Python 2.6 and PyPy3 from the test suite. They are no longer\nsupported. See <a href=\"https://github.com/Pylons/colander/pull/263\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/263</a></li>\n<li><tt>colander.String</tt> schema type now supports an optional keyword argument\n<tt>allow_empty</tt> which, when True, deserializes an empty string to an\nempty string. When False (default), an empty string deserializes to\n<tt>colander.null</tt>. This allows for a node to be explicitly required, but\nallow an empty (\u2018\u2019) value to be provided.\n<a href=\"https://github.com/Pylons/colander/pull/199\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/199</a></li>\n<li>Add <tt>separator</tt> parameter to <tt>colander.Invalid.asdict</tt>\n(for backward compatibility, default is \u2018; \u2018).\nSee <a href=\"https://github.com/Pylons/colander/pull/253\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/253</a></li>\n<li>Fixed an issue with <tt>SchemaNode.clone</tt> where it would fail when\ncloning an instance of <tt>colander.SequenceSchema</tt> due to initializing\nthe schema without any children, violating some checks.\nSee <a href=\"https://github.com/Pylons/colander/pull/212\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/212</a></li>\n</ul>\n</div>\n<div id=\"id10\">\n<h2>1.2 (2016-01-18)</h2>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Add new exception <tt>UnsupportedFields</tt>. Used to pass to the caller a list\nof extra fields detected in a cstruct during deserialize.\nSee <a href=\"https://github.com/Pylons/colander/pull/241\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/241</a></li>\n<li>Add <tt>drop</tt> functionality to <tt>Sequence</tt> type.\nSee <a href=\"https://github.com/Pylons/colander/pull/225\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/225</a></li>\n</ul>\n</div>\n<div id=\"bug-fixes\">\n<h3>Bug Fixes</h3>\n<ul>\n<li><tt>SchemaNode</tt> will no longer assume the first argument to the constructor\nis the schema type. This allows it to properly fallback to using the\n<tt>schema_type</tt> class attribute on subclasses even when using the\nimperative API to pass options to the constructor.</li>\n<li>Fix a bug in which <tt>MappingSchema</tt>, <tt>SequenceSchema</tt> and\n<tt>TupleSchema</tt> would always treat the first arg as the schema type. This\nmeant that it would fail if passed only nodes to the constructor despite\nthe default type being implied by the name. It is now possible to do\n<tt>MappingSchema(child1, child2, <span class=\"pre\">...)</span></tt> instead of\n<tt><span class=\"pre\">MappingSchema(Mapping(),</span> child1, child2)</tt>.</li>\n</ul>\n</div>\n<div id=\"translations\">\n<h3>Translations</h3>\n<ul>\n<li>Added Finnish translations: <tt>fi</tt>\nSee <a href=\"https://github.com/Pylons/colander/pull/243\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/243</a></li>\n</ul>\n</div>\n</div>\n<div id=\"id11\">\n<h2>1.1 (2016-01-15)</h2>\n<div id=\"platform\">\n<h3>Platform</h3>\n<ul>\n<li>Add explicit support for Python 3.4, Python 3.5 and PyPy3.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>Features</h3>\n<ul>\n<li>Add <tt>min_err</tt> and <tt>max_err</tt> arguments to <tt>Length</tt>, allowing\ncustomization of its error messages.</li>\n<li>Add <tt>colander.Any</tt> validator: succeeds if at least one of its\nsubvalidators succeeded.</li>\n<li>Allow localization of error messages returned by <tt>colander.Invalid.asdict</tt>\nby adding an optional <tt>translate</tt> callable argument.</li>\n<li>Add a <tt>missing_msg</tt> argument to <tt>SchemaNode</tt>, allowing customization\nof the error message used when the node is required and missing.</li>\n<li>Add <tt>NoneOf</tt> validator which succeeds if the value is none of the choices.</li>\n<li>Add <tt>normalize</tt> option to <tt>Decimal</tt>, stripping the rightmost\ntrailing zeros.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>Fix an issue where the <tt>flatten()</tt> method produces an invalid name\n(ex: \u201canswer.0.\u201d) for the type <tt>Sequence</tt>.  See\n<a href=\"https://github.com/Pylons/colander/issues/179\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/179</a></li>\n<li>Fixed issue with <tt>String</tt> not being properly encoded when non-string\nvalues were passed into <tt>serialize()</tt>\nSee <a href=\"https://github.com/Pylons/colander/pull/235\" rel=\"nofollow\">#235</a></li>\n<li><tt>title</tt> was being overwritten when made a child through defining a schema\nas a class. See <a href=\"https://github.com/Pylons/colander/pull/239\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/239</a></li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>Translations</h3>\n<ul>\n<li>Added new translations: <tt>el</tt></li>\n<li>Updated translations: <tt>fr</tt>, <tt>de</tt>, <tt>ja</tt></li>\n</ul>\n</div>\n</div>\n<div id=\"id16\">\n<h2>1.0 (2014-11-26)</h2>\n<div id=\"backwards-incompatibilities\">\n<h3>Backwards Incompatibilities</h3>\n<ul>\n<li><tt>SchemaNode.deserialize</tt> will now raise an\n<tt>UnboundDeferredError</tt> if the node has an unbound deferred\nvalidator.  Previously, deferred validators were silently ignored.\nSee <a href=\"https://github.com/Pylons/colander/issues/47\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/47</a></li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>Removed forked <tt>iso8601</tt> and change to dependency on PyPI <tt>iso8601</tt>\n(due to float rounding bug on microsecond portion when parsing\niso8601 datetime string).  Left an <tt>iso8601.py</tt> stub for backwards\ncompatibility.</li>\n<li>Time of \u201c00:00\u201d no longer gives <tt>colander.Invalid</tt>.</li>\n<li>Un-break wrapping of callable instances as <tt>colander.deferred</tt>.\nSee <a href=\"https://github.com/Pylons/colander/issues/141\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/141</a>.</li>\n<li>Set the max length TLD to 22 in <tt>Email</tt> validator based on the\ncurrent list of valid TLDs.\nSee <a href=\"https://github.com/Pylons/colander/issues/159\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/159</a></li>\n<li>Fix an issue where <tt>drop</tt> was not recognized as a default and was\nreturning the <tt>drop</tt> instance instead of omitting the value.\n<a href=\"https://github.com/Pylons/colander/issues/139\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/139</a></li>\n<li>Fix an issue where the <tt>SchemaNode.title</tt> was clobbered by the <tt>name</tt>\nwhen defined as a class attribute.\nSee <a href=\"https://github.com/Pylons/colander/pull/183\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/183</a> and\n<a href=\"https://github.com/Pylons/colander/pull/185\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/185</a></li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>Translations</h3>\n<ul>\n<li>Updated translations: <tt>fr</tt>, <tt>de</tt>, <tt>ja</tt></li>\n</ul>\n</div>\n</div>\n<div id=\"b1-2013-09-01\">\n<h2>1.0b1 (2013-09-01)</h2>\n<div id=\"id19\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>In 1.0a1, there was a change merged from\n<a href=\"https://github.com/Pylons/colander/pull/73\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/73</a> which made it possible to supply\n<tt>None</tt> as the <tt>default</tt> value for a String type, and upon serialization,\nthe value would be rendered as <tt>colander.null</tt> if the default were used.\nThis confused people who were actually supplying the value <tt>None</tt> as a\ndefault when the associated appstruct had no value, so the change has been\nreverted.  When you supply <tt>None</tt> as the <tt>default</tt> argument to a String,\nthe rendered serialize() value will again be <tt>'None'</tt>.  Sorry.</li>\n<li>Normalize <tt>colander.Function</tt> argument <tt>message</tt> to be <tt>msg</tt>. This now\nmatches other APIs within Colander. The <tt>message</tt> argument is now\ndeprecated and a warning will be emitted.\n<a href=\"https://github.com/Pylons/colander/issues/31\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/31</a>\n<a href=\"https://github.com/Pylons/colander/issues/64\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/64</a></li>\n<li><tt>iso8601.py</tt>:  Convert <tt>ValueError</tt> (raised by <tt>datetime</tt>) into\n<tt>ParseErrorr</tt> in <tt>parse_date</tt>, so that the validation machinery\nupstream handles it properly.</li>\n<li><tt>iso8601.py</tt>:  Correctly parse datetimes with a timezone of Z even\nwhen the default_timezone is set. These previously had the default\ntimezone.</li>\n<li><tt>colander.String</tt> schema type now raises <tt>colander.Invalid</tt> when trying\nto deserialize a non-string item.\nSee <a href=\"https://github.com/Pylons/colander/issues/100\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/100</a></li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>Features</h3>\n<ul>\n<li><p>Add <tt>colander.List</tt> type, modeled on <tt>deform.List</tt>:  this type\npreserves ordering, and allows duplicates.</p>\n</li>\n<li><p>It is now possible to use the value <tt>colander.drop</tt> as the <tt>default</tt>\nvalue for items that are subitems of a mapping.  If <tt>colander.drop</tt> is used\nas the <tt>default</tt> for a subnode of a mapping schema, and the mapping\nappstruct being serialized does not have a value for that schema node, the\nvalue will be omitted from the serialized mapping.  For instance, the\nfollowing script, when run would not raise an assertion error:</p>\n<pre>class What(colander.MappingSchema):\n  thing = colander.SchemaNode(colander.String(), default=colander.drop)\n\nresult = What().serialize({}) # no \"thing\" in mapping\nassert result == {}\n</pre>\n</li>\n<li><p>The <tt>typ</tt> of a <tt>SchemaNode</tt> can optionally be pased in as a keyword\nargument. See <a href=\"https://github.com/Pylons/colander/issues/90\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/90</a></p>\n</li>\n<li><p>Allow interpolation of <cite>missing_msg</cite> with properties <cite>title</cite> and <cite>name</cite></p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"a5-2013-05-31\">\n<h2>1.0a5 (2013-05-31)</h2>\n<ul>\n<li>Fix bug introduced by supporting spec-mandated truncations of ISO-8601\ntimezones.  A TypeError would be raised instead of Invalid.  See\n<a href=\"https://github.com/Pylons/colander/issues/111\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/111</a>.</li>\n</ul>\n</div>\n<div id=\"a4-2013-05-21\">\n<h2>1.0a4 (2013-05-21)</h2>\n<ul>\n<li>Loosen Email validator regex (permit apostrophes, bang, etc in localpart).</li>\n<li>Allow for timezone info objects to be pickled and unpickled \u201cmore correctly\u201d\n(Use \u2018__getinitargs__\u2019 to provide unpickling-only defaults).  See\n<a href=\"https://github.com/Pylons/colander/pull/108\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/108</a>.</li>\n</ul>\n</div>\n<div id=\"a3-2013-05-16\">\n<h2>1.0a3 (2013-05-16)</h2>\n<div id=\"id21\">\n<h3>Features</h3>\n<ul>\n<li>Support spec-mandated truncations of ISO-8601 timezones.</li>\n<li>Support spec-mandated truncations of ISO-8601 datetimes.</li>\n<li>Allow specifying custom representations of values for boolean fields.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>Ensure that <tt>colander.iso8601.FixedOffset</tt> instances can be unpickled.</li>\n<li>Avoid validating strings as sequences under Py3k.</li>\n<li>Sync documentation with 0.9.9 change to use <tt>insert_before</tt> rather than\n<tt>schema_order</tt>.  See <a href=\"https://github.com/Pylons/colander/issues/104\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/104</a></li>\n</ul>\n</div>\n</div>\n<div id=\"a2-2013-01-30\">\n<h2>1.0a2 (2013-01-30)</h2>\n<h2 id=\"id23\"><span class=\"section-subtitle\">Features</span></h2>\n<ul>\n<li>Add <tt>colander.ContainsOnly</tt> and <tt>colander.url</tt> validators.</li>\n<li>Add <tt>colander.instantiate</tt> to help define schemas containing\nmappings and sequences more succinctly.</li>\n</ul>\n</div>\n<div id=\"a1-2013-01-10\">\n<h2>1.0a1 (2013-01-10)</h2>\n<div id=\"id24\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>Work around a regression in Python 3.3 for <tt>colander.Decimal</tt> when it\u2019s\nused with a <tt>quant</tt> argument but without a <tt>rounding</tt> argument.\nSee <a href=\"https://github.com/Pylons/colander/issues/66\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/66</a></li>\n<li>Using <tt>SchemaNode(String, <span class=\"pre\">default='',</span> ..)</tt> now works properly, or at least\nmore intuitively.  Previously if an empty-string <tt>default</tt> was supplied,\nserialization would return a defaulted value as <tt>colander.null</tt>.  See\n<a href=\"https://github.com/Pylons/colander/pull/73\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/73</a>.</li>\n<li>Stricter checking in colander.Mapping to prevent items which are logically\nnot mappings from being accepted during validation (see\n<a href=\"https://github.com/Pylons/colander/pull/96\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/96</a>).</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3>Features</h3>\n<ul>\n<li><p>Add <tt>colander.Set</tt> type, ported from <tt>deform.Set</tt></p>\n</li>\n<li><p>Add Python 3.3 to tox configuration and use newer tox testing regime\n(setup.py dev).</p>\n</li>\n<li><p>Add Python 3.3 Trove classifier.</p>\n</li>\n<li><p>Calling <tt>bind</tt> on a schema node e.g. <tt>cloned_node = somenode.bind(a=1,\nb=2)</tt> on a schema node now results in the cloned node having a\n<tt>bindings</tt> attribute of the value <tt><span class=\"pre\">{'a':1,</span> <span class=\"pre\">'b':2}</span></tt>.</p>\n</li>\n<li><p>It is no longer necessary to pass a <tt>typ</tt> argument to a SchemaNode\nconstructor if the node class has a <tt>schema_type</tt> callable as a class\nattribute which, when called with no arguments, returns a schema type.\nThis callable will be called to obtain the schema type if a <tt>typ</tt> is not\nsupplied to the constructor.  The default <tt>SchemaNode</tt> object\u2019s\n<tt>schema_type</tt> callable raises a <tt>NotImplementedError</tt> when it is\ncalled.</p>\n</li>\n<li><p>SchemaNode now has a <tt>raise_invalid</tt> method which accepts a message and\nraises a colander.Invalid exception using <tt>self</tt> as the node and the\nmessage as its message.</p>\n</li>\n<li><p>It is now possible and advisable to subclass <tt>SchemaNode</tt> in order to\ncreate a bundle of default node behavior.  The subclass can define the\nfollowing methods and attributes: <tt>preparer</tt>, <tt>validator</tt>, <tt>default</tt>,\n<tt>missing</tt>, <tt>name</tt>, <tt>title</tt>, <tt>description</tt>, <tt>widget</tt>, and\n<tt>after_bind</tt>.</p>\n<p>For example, the older, more imperative style that looked like this still\nworks, of course:</p>\n<pre>from colander import SchemaNode\n\nranged_int = colander.SchemaNode(\n    validator=colander.Range(0, 10),\n    default = 10,\n    title='Ranged Int'\n    )\n</pre>\n<p>But you can alternately now do something like this:</p>\n<pre>from colander import SchemaNode\n\nclass RangedIntSchemaNode(SchemaNode):\n    validator = colander.Range(0, 10)\n    default = 10\n    title = 'Ranged Int'\n\nranged_int = RangedInt()\n</pre>\n<p>Values that are expected to be callables can now alternately be methods of\nthe schemanode subclass instead of plain attributes:</p>\n<pre>from colander import SchemaNode\n\nclass RangedIntSchemaNode(SchemaNode):\n    default = 10\n    title = 'Ranged Int'\n\n    def validator(self, node, cstruct):\n       if not 0 &lt; cstruct &lt; 10:\n           raise colander.Invalid(node, 'Must be between 0 and 10')\n\nranged_int = RangedInt()\n</pre>\n<p>Note that when implementing a method value such as <tt>validator</tt> that\nexpects to receive a <tt>node</tt> argument, <tt>node</tt> must be provided in the\ncall signature, even though <tt>node</tt> will almost always be the same as\n<tt>self</tt>.  This is because Colander simply treats the method as another\nkind of callable, be it a method, or a function, or an instance that has a\n<tt>__call__</tt> method.  It doesn\u2019t care that it happens to be a method of\n<tt>self</tt>, and it needs to support callables that are not methods, so it\nsends <tt>node</tt> in regardless.</p>\n<p>You can\u2019t currently use <em>method</em> definitions as <tt>colander.deferred</tt>\ncallables.  For example this will <em>not</em> work:</p>\n<pre>from colander import SchemaNode\n\nclass RangedIntSchemaNode(SchemaNode):\n    default = 10\n    title = 'Ranged Int'\n\n    @colander.deferred\n    def validator(self, node, kw):\n       request = kw['request']\n       def avalidator(node, cstruct):\n           if not 0 &lt; cstruct &lt; 10:\n               if request.user != 'admin':\n                   raise colander.Invalid(node, 'Must be between 0 and 10')\n       return avalidator\n\nranged_int = RangedInt()\nbound_ranged_int = ranged_int.bind(request=request)\n</pre>\n<p>This will result in:</p>\n<pre>TypeError: avalidator() takes exactly 3 arguments (2 given)\n</pre>\n<p>However, if you treat the thing being decorated as a function instead of a\nmethod (remove the <tt>self</tt> argument from the argument list), it will\nindeed work):</p>\n<pre>from colander import SchemaNode\n\nclass RangedIntSchemaNode(SchemaNode):\n    default = 10\n    title = 'Ranged Int'\n\n    @colander.deferred\n    def validator(node, kw):\n       request = kw['request']\n       def avalidator(node, cstruct):\n           if not 0 &lt; cstruct &lt; 10:\n               if request.user != 'admin':\n                   raise colander.Invalid(node, 'Must be between 0 and 10')\n       return avalidator\n\nranged_int = RangedInt()\nbound_ranged_int = ranged_int.bind(request=request)\n</pre>\n<p>In previous releases of Colander, the only way to defer the computation of\nvalues was via the <tt>colander.deferred</tt> decorator.  In this release,\nhowever, you can instead use the <tt>bindings</tt> attribute of <tt>self</tt> to\nobtain access to the bind parameters within values that are plain old\nmethods:</p>\n<pre>from colander import SchemaNode\n\nclass RangedIntSchemaNode(SchemaNode):\n    default = 10\n    title = 'Ranged Int'\n\n    def validator(self, node, cstruct):\n       request = self.bindings['request']\n       if not 0 &lt; cstruct &lt; 10:\n           if request.user != 'admin':\n               raise colander.Invalid(node, 'Must be between 0 and 10')\n\nranged_int = RangedInt()\nbound_range_int = ranged_int.bind(request=request)\n</pre>\n<p>If the things you\u2019re trying to defer aren\u2019t callables like <tt>validator</tt>,\nbut they\u2019re instead just plain attributes like <tt>missing</tt> or <tt>default</tt>,\ninstead of using a <tt>colander.deferred</tt>, you can use <tt>after_bind</tt> to set\nattributes of the schemanode that rely on binding variables:</p>\n<pre>from colander import SchemaNode\n\nclass UserIdSchemaNode(SchemaNode):\n    title = 'User Id'\n\n    def after_bind(self, node, kw):\n        self.default = kw['request'].user.id\n</pre>\n<p>You can override the default values of a schemanode subclass in its\nconstructor:</p>\n<pre>from colander import SchemaNode\n\nclass RangedIntSchemaNode(SchemaNode):\n    default = 10\n    title = 'Ranged Int'\n    validator = colander.Range(0, 10)\n\nranged_int = RangedInt(validator=colander.Range(0, 20))\n</pre>\n<p>In the above example, the validation will be done on 0-20, not 0-10.</p>\n<p>If a schema node name conflicts with a schema value attribute name on the\nsame class, you can work around it by giving the schema node a bogus name\nin the class definition but providing a correct <tt>name</tt> argument to the\nschema node constructor:</p>\n<pre>from colander import SchemaNode, Schema\n\nclass SomeSchema(Schema):\n    title = 'Some Schema'\n    thisnamewillbeignored = colander.SchemaNode(\n                                        colander.String(),\n                                        name='title'\n                                        )\n</pre>\n<p>Note that such a workaround is only required if the conflicting names are\nattached to the <em>exact same</em> class definition.  Colander scrapes off schema\nnode definitions at each class\u2019 construction time, so it\u2019s not an issue for\ninherited values.  For example:</p>\n<pre>from colander import SchemaNode, Schema\n\nclass SomeSchema(Schema):\n    title = colander.SchemaNode(colander.String())\n\nclass AnotherSchema(SomeSchema):\n    title = 'Some Schema'\n\nschema = AnotherSchema()\n</pre>\n<p>In the above example, even though the <tt>title = 'Some Schema'</tt> appears to\noverride the superclass\u2019 <tt>title</tt> SchemaNode, a <tt>title</tt> SchemaNode will\nindeed be present in the child list of the <tt>schema</tt> instance\n(<tt><span class=\"pre\">schema['title']</span></tt> will return the <tt>title</tt> SchemaNode) and the schema\u2019s\n<tt>title</tt> attribute will be <tt>Some Schema</tt> (<tt>schema.title</tt> will return\n<tt>Some Schema</tt>).</p>\n<p>Normal inheritance rules apply to class attributes and methods defined in\na schemanode subclass.  If your schemanode subclass inherits from another\nschemanode class, your schemanode subclass\u2019 methods and class attributes\nwill override the superclass\u2019 methods and class attributes.</p>\n<p>Ordering of child schema nodes when inheritance is used works like this:\nthe \u201cdeepest\u201d SchemaNode class in the MRO of the inheritance chain is\nconsulted first for nodes, then the next deepest, then the next, and so on.\nSo the deepest class\u2019 nodes come first in the relative ordering of schema\nnodes, then the next deepest, and so on.  For example:</p>\n<pre>class One(colander.Schema):\n    a = colander.SchemaNode(\n        colander.String(),\n        id='a1',\n        )\n    b = colander.SchemaNode(\n        colander.String(),\n        id='b1',\n        )\n    d = colander.SchemaNode(\n        colander.String(),\n        id='d1',\n        )\n\nclass Two(One):\n    a = colander.SchemaNode(\n        colander.String(),\n        id='a2',\n        )\n    c = colander.SchemaNode(\n        colander.String(),\n        id='c2',\n        )\n    e = colander.SchemaNode(\n        colander.String(),\n        id='e2',\n        )\n\nclass Three(Two):\n    b = colander.SchemaNode(\n        colander.String(),\n        id='b3',\n        )\n    d = colander.SchemaNode(\n        colander.String(),\n        id='d3',\n        )\n    f = colander.SchemaNode(\n        colander.String(),\n        id='f3',\n        )\n\nthree = Three()\n</pre>\n<p>The ordering of child nodes computed in the schema node <tt>three</tt> will be\n<tt>['a2', 'b3', 'd3', 'c2', 'e2', 'f3']</tt>.  The ordering starts <tt>a1</tt>,\n<tt>b1</tt>, <tt>d1</tt> because that\u2019s the ordering of nodes in <tt>One</tt>, and\n<tt>One</tt> is the deepest SchemaNode in the inheritance hierarchy.  Then it\nprocesses the nodes attached to <tt>Two</tt>, the next deepest, which causes\n<tt>a1</tt> to be replaced by <tt>a2</tt>, and <tt>c2</tt> and <tt>e2</tt> to be appended to\nthe node list.  Then finally it processes the nodes attached to <tt>Three</tt>,\nwhich causes <tt>b1</tt> to be replaced by <tt>b3</tt>, and <tt>d1</tt> to be replaced by\n<tt>d3</tt>, then finally <tt>f</tt> is appended.</p>\n<p>Multiple inheritance works the same way:</p>\n<pre>class One(colander.Schema):\n    a = colander.SchemaNode(\n        colander.String(),\n        id='a1',\n        )\n    b = colander.SchemaNode(\n        colander.String(),\n        id='b1',\n        )\n    d = colander.SchemaNode(\n        colander.String(),\n        id='d1',\n        )\n\nclass Two(colander.Schema):\n    a = colander.SchemaNode(\n        colander.String(),\n        id='a2',\n        )\n    c = colander.SchemaNode(\n        colander.String(),\n        id='c2',\n        )\n    e = colander.SchemaNode(\n        colander.String(),\n        id='e2',\n        )\n\nclass Three(Two, One):\n    b = colander.SchemaNode(\n        colander.String(),\n        id='b3',\n        )\n    d = colander.SchemaNode(\n        colander.String(),\n        id='d3',\n        )\n    f = colander.SchemaNode(\n        colander.String(),\n        id='f3',\n        )\n\nthree = Three()\n</pre>\n<p>The resulting node ordering of <tt>three</tt> is the same as the single\ninheritance example: <tt>['a2', 'b3', 'd3', 'c2', 'e2', 'f3']</tt> due to the\nMRO deepest-first ordering (<tt>One</tt>, then <tt>Two</tt>, then <tt>Three</tt>).</p>\n</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3>Backwards Incompatibilities</h3>\n<ul>\n<li>Passing non-SchemaNode derivative instances as <tt>*children</tt> into a\nSchemaNode constructor is no longer supported.  Symptom: <tt>AttributeError:\nname</tt> when constructing a SchemaNode.</li>\n</ul>\n</div>\n</div>\n<div id=\"id27\">\n<h2>0.9.9 (2012-09-24)</h2>\n<div id=\"id28\">\n<h3>Features</h3>\n<ul>\n<li>Allow the use of <tt>missing=None</tt> for Number.  See\n<a href=\"https://github.com/Pylons/colander/pull/59\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/59</a> .</li>\n<li>Create a <tt>colander.Money</tt> type that is a Decimal type with\ntwo-decimal-point precision rounded-up.</li>\n<li>Allow <tt>quant</tt> and <tt>rounding</tt> args to <tt>colander.Decimal</tt> constructor.</li>\n<li><tt>luhnok</tt> validator added (credit card luhn mod10 validator).</li>\n<li>Add an <tt>insert</tt> method to SchemaNode objects.</li>\n<li>Add an <tt>insert_before</tt> method to SchemaNode objects.</li>\n<li>Better class-based mapping schema inheritance model.<ul>\n<li>A node declared in a subclass of a mapping schema superclass now\noverrides any node with the same name inherited from any superclass.\nPreviously, it just repeated and didn\u2019t override.</li>\n<li>An <tt>insert_before</tt> keyword argument may be passed to a SchemaNode\nconstructor.  This is a string naming a node in a superclass.  A node\nwith an <tt>insert_before</tt> will be placed before the named node in a\nparent mapping schema.</li>\n</ul>\n</li>\n<li>The <tt>preparer=</tt> argument to SchemaNodes may now be a sequence of\npreparers.</li>\n<li>Added a <tt>cstruct_children</tt> method to SchemaNode.</li>\n<li>A new <tt>cstruct_children</tt> API should exist on schema types.  If\n<tt>SchemaNode.cstruct_children</tt> is called on a node with a type that does\nnot have a <tt>cstruct_children</tt> method, a deprecation warning is emitted\nand <tt>[]</tt> is returned (this may or may not be the correct value for your\ncustom type).</li>\n</ul>\n</div>\n<div id=\"id29\">\n<h3>Backwards Incompatibilities</h3>\n<ul>\n<li>The inheritance changes required a minor backwards incompatibility: calling\n<tt>__setitem__</tt> on a SchemaNode will no longer raise <tt>KeyError</tt> when\nattempting to set a subnode into a node that doesn\u2019t already have an\nexisting subnode by that name.  Instead, the subnode will be appended to\nthe child list.</li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<ul>\n<li>A \u201cSchema Inheritance\u201d section was added to the Basics chapter\ndocumentation.</li>\n</ul>\n</div>\n</div>\n<div id=\"id30\">\n<h2>0.9.8 (2012-04-27)</h2>\n<ul>\n<li>False evaluating values are now serialized to colander.null for\nString, Date, and Time.  This resolves the issue where a None value\nwould be rendered as \u2018None\u2019 for String, and missing=\u2019None\u2019 was not\npossible for Date, Datetime, and Time.\nSee <a href=\"https://github.com/Pylons/colander/pull/1\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/1</a> .</li>\n<li>Updated Brazilian Portugese translations.</li>\n<li>Updated Japanese translations.</li>\n<li>Updated Russian translations.</li>\n<li>Fix documentation: 0.9.3 allowed explicitly passing None to DateTime\nto have no default timezone applied.</li>\n<li>Add <tt>dev</tt> and <tt>docs</tt> setup.py aliases (e.g. <tt>python setup.py dev</tt>).</li>\n</ul>\n</div>\n<div id=\"id31\">\n<h2>0.9.7 (2012-03-20)</h2>\n<ul>\n<li>Using <tt><span class=\"pre\">schema.flatten(...)</span></tt> against a mapping schema node without a name\nproduced incorrectly dot-prefixed keys.  See\n<a href=\"https://github.com/Pylons/colander/issues/37\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/37</a></li>\n<li>Fix invalid.asdict for multiple error messages.  See\n<a href=\"https://github.com/Pylons/colander/pull/22\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/22</a> ,\n<a href=\"https://github.com/Pylons/colander/pull/27\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/27</a> ,\n<a href=\"https://github.com/Pylons/colander/pull/12\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/12</a> , and\n<a href=\"https://github.com/Pylons/colander/issues/2\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/2</a> .</li>\n<li>Invalid.messages() now returns an empty list if there are no messages.\nSee <a href=\"https://github.com/Pylons/colander/pull/21\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/21</a> .</li>\n<li><tt>name</tt> passed to a SchemaNode constructor was not respected in\ndeclaratively constructed schemas.  Now if you pass <tt>name</tt> to the\nSchemaNode constructor within the body of a schema class, it will take\nprecedence over the name it\u2019s been assigned to in the schema class.\nSee <a href=\"https://github.com/Pylons/colander/issues/39\" rel=\"nofollow\">https://github.com/Pylons/colander/issues/39</a> .</li>\n<li>Japanese translation thanks to OCHIAI, Gouji.</li>\n<li>Replaced incorrect <tt>%{err}</tt> with correct <tt>${err}</tt> in String.deserialize\nerror message.  See <a href=\"https://github.com/Pylons/colander/pull/41\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/41</a></li>\n</ul>\n</div>\n<div id=\"id32\">\n<h2>0.9.6 (2012-02-14)</h2>\n<ul>\n<li>No longer runs on Python 2.4 or 2.5.  Python 2.6+ is now required.</li>\n<li>Python 3.2 compatibility.</li>\n<li>Removed a dependency on the iso8601 package (code from the package is now\ninlined in Colander itself).</li>\n<li>Added copyright and licensing information for iso8601-derived code to\nLICENSE.txt.</li>\n</ul>\n</div>\n<div id=\"id33\">\n<h2>0.9.5 (2012-01-13)</h2>\n<ul>\n<li>Added Czech translation.</li>\n<li>Compile pt_BR translation (it was previously uncompiled).</li>\n<li>Minor docs fixes.</li>\n<li>Documentation added about flatten and unflatten.</li>\n</ul>\n</div>\n<div id=\"id34\">\n<h2>0.9.4 (2011-10-14)</h2>\n<ul>\n<li><tt>flatten</tt> now only includes leaf nodes in the flattened dict.</li>\n<li><tt>flatten</tt> does not include a path element for the name of the type node\nfor sequences.</li>\n<li><tt>unflatten</tt> is implemented.</li>\n<li>Added <tt>__setitem__</tt> to <tt>SchemaNode</tt>, allowing replacement of nodes by\nname.</li>\n<li>Added <tt>get_value</tt> and <tt>set_value</tt> methods to <tt>Schema</tt> which allow\naccess and mutation of appstructs using dotted name paths.</li>\n<li>Add Swedish, French, Chinese translations.</li>\n</ul>\n</div>\n<div id=\"id35\">\n<h2>0.9.3 (2011-06-23)</h2>\n<ul>\n<li>Add <tt>Time</tt> type.</li>\n<li>Add Dutch translation.</li>\n<li>Fix documentation: 0.9.2 requires <tt>deserialize</tt> of types to explicitly\ndeal with the potential to receive <tt>colander.null</tt>.</li>\n<li>Use <tt>default_tzinfo</tt> when deserializing naive datetimes.  See\n<a href=\"https://github.com/Pylons/colander/pull/5\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/5</a></li>\n<li>Allow <tt>default_tzinfo</tt> to be <tt>None</tt> when creating a\n<tt>colander.DateTime</tt>.  See\n<a href=\"https://github.com/Pylons/colander/pull/6\" rel=\"nofollow\">https://github.com/Pylons/colander/pull/6</a></li>\n<li>Add the ability to insert a <tt>colander.interfaces.Preparer</tt> between\ndeserialization and validation. See the Preparing section in the\ndocumentation.</li>\n</ul>\n</div>\n<div id=\"id36\">\n<h2>0.9.2 (2011-03-28)</h2>\n<ul>\n<li>Added Polish translation, thanks to Jedrzej Nowak.</li>\n<li>Moved to Pylons Project GitHub (<a href=\"https://github.com/Pylons/colander\" rel=\"nofollow\">https://github.com/Pylons/colander</a>).</li>\n<li>Add tox.ini for testing purposes.</li>\n<li>New API: <tt>colander.required</tt>.  Used as the marker value when a\n<tt>missing</tt> argument is left unspecified.</li>\n<li>Bug fix: if a <tt>title</tt> argument which is the empty string or <tt>None</tt> is\npassed explicitly to a SchemaNode, it is no longer replaced by a title\ncomputed from the name.</li>\n<li>Add SchemaNode.__contains__ to support \u201cname in schema\u201d.</li>\n<li>SchemaNode deserialization now unconditionally calls the schema type\u2019s\n<tt>deserialize</tt> method to obtain an appstruct before attempting to\nvalidate.  Third party schema types should now return <tt>colander.null</tt> if\npassed a <tt>colander.null</tt> value or another logically \u201cempty\u201d value as a\ncstruct during <tt>deserialize</tt>.</li>\n</ul>\n</div>\n<div id=\"id37\">\n<h2>0.9.1 (2010-12-02)</h2>\n<ul>\n<li>When <tt>colander.null</tt> was unpickled, the reference created during\nunpickling was <em>not</em> a reference to the singleton but rather a new instance\nof the <tt>colander._null</tt> class.  This was unintentional, because lots of\ncode checks for <tt>if x is colander.null</tt>, which will fail across pickling\nand unpickling.  Now the reference created when <tt>colander.null</tt> is\npickled is unpickled as the singleton itself.</li>\n</ul>\n</div>\n<div id=\"id38\">\n<h2>0.9  (2010-11-28)</h2>\n<ul>\n<li>SchemaNode constructor now accepts arbitrary keyword arguments.  It\nsets any unknown values within the <tt>**kw</tt> sequence as attributes\nof the node object.</li>\n<li>Added Spanish locale:  thanks to Douglas Cerna for the translations!</li>\n<li>If you use a schema with deferred <tt>validator</tt>, <tt>missing</tt> or\n<tt>default</tt> attributes, but you use it to perform serialization and\ndeserialization without calling its <tt>bind</tt> method:<ul>\n<li>If <tt>validator</tt> is deferred, no validation will be performed.</li>\n<li>If <tt>missing</tt> is deferred, the field will be considered <em>required</em>.</li>\n<li>If <tt>default</tt> is deferred, the serialization default will be\nassumed to be <tt>colander.null</tt>.</li>\n</ul>\n</li>\n<li>Undocumented internal API for all type objects: <tt>flatten</tt>.\nExternal type objects should now inherit from\n<tt>colander.SchemaType</tt> to get a default implementation.</li>\n</ul>\n</div>\n<div id=\"id39\">\n<h2>0.8  (2010/09/08)</h2>\n<ul>\n<li>Docstring fixes to <tt>colander.SchemaNode</tt> (<tt>missing</tt> is not the\n<tt>null</tt> value when required, it\u2019s a special marker value).</li>\n<li>The concept of \u201cschema binding\u201d was added, which allows for a more\ndeclarative-looking spelling of schemas and schema nodes which have\ndependencies on values available after the schema has already been\nfully constructed.  See the new narrative chapter in the\ndocumentation entitled \u201cSchema Binding\u201d.</li>\n<li>The interface of <tt>colander.SchemaNode</tt> has grown a <tt>__delitem__</tt>\nmethod.  The <tt>__iter__</tt>, and <tt>__getitem__</tt> methods have now also\nbeen properly documented.</li>\n</ul>\n</div>\n<div id=\"id40\">\n<h2>0.7.3 (2010/09/02)</h2>\n<ul>\n<li>The title of a schema node now defaults to a titleization of the\n<tt>name</tt>.  Underscores in the <tt>name</tt> are replaced with empty\nstrings and the first letter of every resulting word is capitalized.\nPreviously the <tt>name</tt> was not split on underscores, and the\nentirety of the <tt>name</tt> was capitalized.</li>\n<li>A method of the <tt>colander.Invalid</tt> exception named <tt>messages</tt>\nwas added.  It returns an iterable of error messages using the\n<tt>msg</tt> attribute of its related exception node.  If the <tt>msg</tt>\nattribute is iterable, it is returned.  If it is not iterable, a\nsingle-element list containing the <tt>msg</tt> value is returned.</li>\n</ul>\n</div>\n<div id=\"id41\">\n<h2>0.7.2 (2010/08/30)</h2>\n<ul>\n<li>Add an <tt>colander.SchemaNode.__iter__</tt> method, which iterates over\nthe children nodes of a schema node.</li>\n<li>The constructor of a <tt>colander.SchemaNode</tt> now accepts a\n<tt>widget</tt> keyword argument, for use by Deform (it is not used\ninternally).</li>\n</ul>\n</div>\n<div id=\"id42\">\n<h2>0.7.1 (2010/06/12)</h2>\n<ul>\n<li>Make it possible to use <tt>colander.null</tt> as a <tt>missing</tt> argument\nto <tt>colander.SchemaNode</tt> for roundtripping purposes.</li>\n<li>Make it possible to pickle <tt>colander.null</tt>.</li>\n</ul>\n</div>\n<div id=\"id43\">\n<h2>0.7.0</h2>\n<p>A release centered around normalizing the treatment of default and\nmissing values.</p>\n<div id=\"id44\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>Allow <tt>colander.Regex</tt> validator to accept a pattern object\ninstead of just a string.</li>\n<li>Get rid of circular reference in Invalid exceptions: Invalid\nexceptions now no longer have a <tt>parent</tt> attribute.  Instead, they\nhave a <tt>positional</tt> attribute, which signifies that the parent\nnode type of the schema node to which they relate inherits from\nPositional.  This attribute isn\u2019t an API; it\u2019s used only internally\nfor reporting.</li>\n<li>Raise a <tt>TypeError</tt> when bogus keyword arguments are passed to\n<tt>colander.SchemaNode</tt>.</li>\n</ul>\n</div>\n<div id=\"backwards-incompatiblities-new-features\">\n<h3>Backwards Incompatiblities / New Features</h3>\n<ul>\n<li><p><tt>missing</tt> constructor arg to SchemaNode: signifies\n<em>deserialization</em> default, disambiguated from <tt>default</tt> which acted\nas both serialization and deserialization default previously.</p>\n<p>Changes necessitated / made possible by SchemaNode <tt>missing</tt>\naddition:</p>\n<ul>\n<li>The <tt>allow_empty</tt> argument of the <tt>colander.String</tt> type was\nremoved (use <tt><span class=\"pre\">missing=''</span></tt> as a wrapper SchemaNode argument\ninstead).</li>\n</ul>\n</li>\n<li><p>New concept: <tt>colander.null</tt> input to serialization and\ndeserialization.  Use of <tt>colander.null</tt> normalizes serialization\nand deserialization default handling.</p>\n<p>Changes necessitated / made possible by <tt>colander.null</tt> addition:</p>\n<ul>\n<li><dl>\n<dt><tt>partial</tt> argument and attribute of colander.MappingSchema has</dt>\n<dd>been removed; all serializations are partial, and partial\ndeserializations are not necessary.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>colander.null</tt> values are added to the cstruct for partial</dt>\n<dd>serializations instead of omitting missing node values from\nthe cstruct.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>colander.null</tt> may now be present in serialized and</dt>\n<dd>deserialized data structures.</dd>\n</dl>\n</li>\n<li><tt>sdefault</tt> attribute of SchemaNode has been removed; we never need\nto serialize a default anymore.</li>\n<li>The value <tt>colander.null</tt> will be passed as <tt>appstruct</tt> to\neach type\u2019s <tt>serialize</tt> method when a mapping appstruct doesn\u2019t\nhave a corresponding key instead of <tt>None</tt>, as was the practice\npreviously.</li>\n<li>The value <tt>colander.null</tt> will be passed as <tt>cstruct</tt> to\neach type\u2019s <tt>deserialize</tt> method when a mapping cstruct\ndoesn\u2019t have a corresponding key instead of <tt>None</tt>, as was the\npractice previously.</li>\n<li>Types now must handle <tt>colander.null</tt> explicitly during\nserialization.</li>\n</ul>\n</li>\n<li><p>Updated and expanded documentation, particularly with respect to new\n<tt>colander.null</tt> handling.</p>\n</li>\n<li><p>The <tt>value</tt> argument to the <tt>serialize</tt> method of a SchemaNode\nis now named <tt>appstruct</tt>.  It is no longer a required argument; it\ndefaults to <tt>colander.null</tt> now.</p>\n<p>The <tt>value</tt> argument to the <tt>deserialize</tt> method of a SchemaNode\nis now named <tt>cstruct</tt>.  It is no longer a required argument; it\ndefaults to <tt>colander.null</tt> now.</p>\n</li>\n<li><p>The <tt>value</tt> argument to the <tt>serialize</tt> method of each built-in\ntype is now named <tt>appstruct</tt>, and is now required: it is no\nlonger a keyword argument that has a default.</p>\n<p>The <tt>value</tt> argument to the <tt>deserialize</tt> method of each\nbuilt-in type is now named <tt>cstruct</tt>, and is now required: it is\nno longer a keyword argument that has a default.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"id45\">\n<h2>0.6.2 (2010-05-08)</h2>\n<ul>\n<li>The default <tt>encoding</tt> parameter value to the <tt>colander.String</tt>\ntype is still <tt>None</tt>, however its meaning has changed.  An\nencoding of <tt>None</tt> now means that no special encoding and decoding\nof Unicode values is done by the String type.  This differs from the\nprevious behavior, where <tt>None</tt> implied that the encoding was\n<tt><span class=\"pre\">utf-8</span></tt>.  Pass the encoding as <tt><span class=\"pre\">utf-8</span></tt> specifically to get the\nolder behavior back.  This is in support of Deform.</li>\n<li>The default <tt>err_template</tt> value attached to the <tt>colander.Date</tt>\nand <tt>colander.Datetime</tt> types was changed.  It is now simply\n<tt>Invalid date</tt> instead of <tt><span class=\"pre\">_('${val}</span> cannot be parsed as an\niso8601 date: <span class=\"pre\">${err}')</span></tt>.  This is in support of Deform.</li>\n<li>Fix bug in <tt>colander.Boolean</tt> that attempted to call <tt>.lower</tt> on\na bool value when a default value was found for the schema node.</li>\n</ul>\n</div>\n<div id=\"id46\">\n<h2>0.6.1 (2010-05-04)</h2>\n<ul>\n<li>Add a Decimal type (number type which uses <tt>decimal.Decimal</tt> as a\ndeserialization target).</li>\n</ul>\n</div>\n<div id=\"id47\">\n<h2>0.6.0 (2010-05-02)</h2>\n<ul>\n<li>(Hopefully) fix intermittent datetime-granularity-related test\nfailures.</li>\n<li>Internationalized error messages.  This required some changes to\nerror message formatting, which may impact you if you were feeding\ncolander an error message template.</li>\n<li>New project dependency: <tt>translationstring</tt> package for\ninternationalization.</li>\n<li>New argument to <tt>colander.String</tt> constructor: <tt>allow_empty</tt>.\nThis is a boolean representing whether an empty string is a valid\nvalue during deserialization, defaulting to <tt>False</tt>.</li>\n<li>Add minimal documentation about the composition of a\ncolander.Invalid exception to the narrative docs.</li>\n<li>Add (existing, but previously non-API) colander.Invalid attributes\nto its interface within the API documentation.</li>\n</ul>\n</div>\n<div id=\"id48\">\n<h2>0.5.2 (2010-04-09)</h2>\n<ul>\n<li>Add Email and Regex validators (courtesy Steve Howe).</li>\n<li>Raise a <tt>colander.Invalid</tt> error if a <tt>colander.SequenceSchema</tt>\nis created with more than one member.</li>\n<li>Add <tt>Function</tt> validator.</li>\n<li>Fix bug in serialization of non-Unicode values in the <tt>String</tt> class.</li>\n<li>Get rid of <tt>pserialize</tt> in favor of making <tt>serialize</tt> always\npartially serialize.</li>\n<li>Get rid of <tt>pdeserialize</tt>: it existed only for symmetry.  We\u2019ll\nadd something like it back later if we need it.</li>\n</ul>\n</div>\n<div id=\"id49\">\n<h2>0.5.1 (2010-04-02)</h2>\n<ul>\n<li>The constructor arguments to a the <tt>colander.Schema</tt> class are now\nsent to the constructed SchemaNode rather than to the type it represents.</li>\n<li>Allow <tt>colander.Date</tt> and <tt>colander.DateTime</tt> invalid error\nmessages to be customized.</li>\n<li>Add a <tt>pos</tt> argument to the <tt>colander.Invalid.add</tt> method.</li>\n<li>Add a <tt>__setitem__</tt> method to the <tt>colander.Invalid</tt> class.</li>\n<li>The <tt>colander.Mapping</tt> constructor keyword argument\n<tt>unknown_keys</tt> has been renamed to <tt>unknown</tt>.</li>\n<li>Allow <tt>colander.Mapping</tt> type to accept a new constructor\nargument: <tt>partial</tt>.</li>\n<li>New interface methods required by types and schema nodes:\n<tt>pserialize</tt> and <tt>pdeserialize</tt>.  These partially serialize or\npartially deserialize a value (the definition of \u201cpartial\u201d is up to\nthe type).</li>\n</ul>\n</div>\n<div id=\"id50\">\n<h2>0.5 (2010-03-31)</h2>\n<ul>\n<li>0.4 was mispackaged (CHANGES.txt missing); no code changes from 0.4\nhowever.</li>\n</ul>\n</div>\n<div id=\"id51\">\n<h2>0.4 (2010-03-30)</h2>\n<ul>\n<li>Add <tt>colander.DateTime</tt> and <tt>colander.Date</tt> data types.</li>\n<li>Depend on the <tt>iso8601</tt> package for date support.</li>\n</ul>\n</div>\n<div id=\"id52\">\n<h2>0.3 (2010-03-29)</h2>\n<ul>\n<li>Subnodes of a schema node are now kept in the <tt>children</tt> attribute\nrather than the <tt>nodes</tt> attribute.</li>\n<li>Add an <tt>sdefault</tt> property to <tt>colander.SchemaNode</tt> objects.</li>\n<li>Add a <tt>clone</tt> method to <tt>colander.SchemaNode</tt> objects.</li>\n<li>Add a <tt>__str__</tt> method to the <tt>colander.Invalid</tt> exception that\nprints an error summary.</li>\n<li>Various error message improvements.</li>\n<li>Add <tt>colander.Length</tt> validator class.</li>\n</ul>\n</div>\n<div id=\"id53\">\n<h2>0.2 (2010-03-23)</h2>\n<ul>\n<li>Make nodetype overrideable.</li>\n<li>Add __getitem__ to SchemaNode.</li>\n<li>Fix OneOf message.</li>\n<li>Capitalize node titles.</li>\n<li>Deal with empty strings in String, Boolean, and Float types.</li>\n<li>Introduce description; make title the same as name.</li>\n<li>Remove copy method from schemanode.</li>\n<li>Allow schema nodes to have titles.</li>\n<li>The term \u201cstructure\u201d is too overloaded to use for schema purposes:\nstructure -&gt; schema node.</li>\n<li>Make Sequence more like Tuple and Mapping (it uses a substructure\nrather than a structure parameter to denote its type).</li>\n<li>Add __repr__ and copy methods to structure.</li>\n<li>Add accept_scalar flag to Sequence.</li>\n</ul>\n</div>\n<div id=\"id54\">\n<h2>0.1 (2010-03-14)</h2>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4769455, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f67b5437e94fc0c800d20e87eb84d25a", "sha256": "0c56ca24c23ffe89ddea1066b1a197b3a8c68bdb195797653304780c43e2306e"}, "downloads": -1, "filename": "colander-0.1.tar.gz", "has_sig": false, "md5_digest": "f67b5437e94fc0c800d20e87eb84d25a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25074, "upload_time": "2010-03-14T17:53:37", "upload_time_iso_8601": "2010-03-14T17:53:37.386777Z", "url": "https://files.pythonhosted.org/packages/fa/4e/427995894c7468130119b5e25e9a7912f91f249729a35da24deca9f34f41/colander-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7faaae2b138833a940c55cf6ebc1840c", "sha256": "74b1ea528b2e3031c034cbb05daa08f4116e81597c513aa9053fd0c352bf44a1"}, "downloads": -1, "filename": "colander-0.2.tar.gz", "has_sig": false, "md5_digest": "7faaae2b138833a940c55cf6ebc1840c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27031, "upload_time": "2010-03-23T06:04:23", "upload_time_iso_8601": "2010-03-23T06:04:23.539255Z", "url": "https://files.pythonhosted.org/packages/22/6e/8e44f03c5cfd545edf4a8a7234c88eba4049d9d4ec863aa26b94534f3628/colander-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "6e96488fbd0785973aee000526a31cb6", "sha256": "4427cab86825de3845814026c455dafac8a6937d22e406dba254e4c9f29678e7"}, "downloads": -1, "filename": "colander-0.3.tar.gz", "has_sig": false, "md5_digest": "6e96488fbd0785973aee000526a31cb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28381, "upload_time": "2010-03-29T08:11:52", "upload_time_iso_8601": "2010-03-29T08:11:52.834708Z", "url": "https://files.pythonhosted.org/packages/1e/be/dbb7a81909c53ea041bd717d4dd4b827999aa078965da6c170490b06222f/colander-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "a6a8c1adb8d905829b546386e8e17d06", "sha256": "1be1f48755eb6ef16c91c9dc5d057ebfeb1c6462b3c7e117c66083d94cc9d021"}, "downloads": -1, "filename": "colander-0.4.tar.gz", "has_sig": false, "md5_digest": "a6a8c1adb8d905829b546386e8e17d06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14542, "upload_time": "2010-03-31T06:00:41", "upload_time_iso_8601": "2010-03-31T06:00:41.408783Z", "url": "https://files.pythonhosted.org/packages/e7/dd/b25ce760d96de14b0d63ec62fbdcd7d8ef1fac20ce0ab751283f734dc66f/colander-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "5716fbb0c2dc9cbb27c8e3ffecc56a11", "sha256": "873dde4d18e3686106494cc0bb394ffca91327ce270ff6ba96673d19759e276c"}, "downloads": -1, "filename": "colander-0.5.tar.gz", "has_sig": false, "md5_digest": "5716fbb0c2dc9cbb27c8e3ffecc56a11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30273, "upload_time": "2010-03-31T20:35:03", "upload_time_iso_8601": "2010-03-31T20:35:03.611945Z", "url": "https://files.pythonhosted.org/packages/47/13/41900a4bb63aa5a98cd0d19175045faed6bab8af6be6f114cd8535242e4a/colander-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "76bf9d0c800a082cf295b839bb24677d", "sha256": "a08062443e61da1e91f581efc38ee8f554553fef8a2dcda0ebc13e76fdca03a8"}, "downloads": -1, "filename": "colander-0.5.1.tar.gz", "has_sig": false, "md5_digest": "76bf9d0c800a082cf295b839bb24677d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33858, "upload_time": "2010-04-02T08:01:35", "upload_time_iso_8601": "2010-04-02T08:01:35.112276Z", "url": "https://files.pythonhosted.org/packages/44/97/c856f9d5265e3c565bdd1c8a284c04ae0ca768b33b2bc1b69017f9796901/colander-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "7459e5e104cf26cfa88ccf8618194a84", "sha256": "017ae0c6af5b2a4bf31fdd0caa0c8950962a47faf8d061bba0874896ec13ff51"}, "downloads": -1, "filename": "colander-0.5.2.tar.gz", "has_sig": false, "md5_digest": "7459e5e104cf26cfa88ccf8618194a84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35856, "upload_time": "2010-04-10T01:36:51", "upload_time_iso_8601": "2010-04-10T01:36:51.725345Z", "url": "https://files.pythonhosted.org/packages/53/44/d356fa0fea3eeeb9e90f3b68028147f8d559f43a7201216db76c166eb5c8/colander-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "78c967b04f3e004d7ae1a17c3cb6b764", "sha256": "d98325dae691f56288fba00545034871616525b419c356f74dbea7380f0da3be"}, "downloads": -1, "filename": "colander-0.6.0.tar.gz", "has_sig": false, "md5_digest": "78c967b04f3e004d7ae1a17c3cb6b764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39411, "upload_time": "2010-05-02T16:42:16", "upload_time_iso_8601": "2010-05-02T16:42:16.936866Z", "url": "https://files.pythonhosted.org/packages/4b/03/00a5d4542a6ee2a03e772d39c483447470385dde0f3b65a8d86fddc730aa/colander-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "86ed3a737fbd1f68022f83b89bb18f38", "sha256": "df0ddc8a4b237e2d90a5e6b95fc61122b1eb6748897d5811d0c80b24078088eb"}, "downloads": -1, "filename": "colander-0.6.1.tar.gz", "has_sig": false, "md5_digest": "86ed3a737fbd1f68022f83b89bb18f38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39689, "upload_time": "2010-05-04T06:30:20", "upload_time_iso_8601": "2010-05-04T06:30:20.238699Z", "url": "https://files.pythonhosted.org/packages/9c/21/19768166ca1a5cb8fb79bb34fecca3a345557125491d51181465e42cf702/colander-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "b00467c68abcd8556bf6f52f59815b90", "sha256": "ae4385c8f41b2b1782d4ced1328685bea1b5698c6c812caf08a558276cee600f"}, "downloads": -1, "filename": "colander-0.6.2.tar.gz", "has_sig": false, "md5_digest": "b00467c68abcd8556bf6f52f59815b90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40830, "upload_time": "2010-05-08T08:52:51", "upload_time_iso_8601": "2010-05-08T08:52:51.022063Z", "url": "https://files.pythonhosted.org/packages/c3/2b/6e190b148fc25d17737f4ccedd336420254aea6f59379b7b47a22cd8914d/colander-0.6.2.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "12f6598b0f749312ef94e5f3046998d6", "sha256": "6830d514a02b9713ea7f96da39c4310602c64fb41e0e717f374310504d8a41b3"}, "downloads": -1, "filename": "colander-0.7.0.tar.gz", "has_sig": false, "md5_digest": "12f6598b0f749312ef94e5f3046998d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48226, "upload_time": "2010-06-09T17:18:27", "upload_time_iso_8601": "2010-06-09T17:18:27.202855Z", "url": "https://files.pythonhosted.org/packages/ed/12/14b9ce19daf1bfa0a1cdd4a6d642b38f25b679dca8e52ee006eda493e820/colander-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "7f01f4cf699c36a94fff30907ee66ca1", "sha256": "3e770239bcf4dcf54c229665713313ee431663ae654bdf7dfb6c934a81b22337"}, "downloads": -1, "filename": "colander-0.7.1.tar.gz", "has_sig": false, "md5_digest": "7f01f4cf699c36a94fff30907ee66ca1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48468, "upload_time": "2010-06-13T05:56:45", "upload_time_iso_8601": "2010-06-13T05:56:45.536285Z", "url": "https://files.pythonhosted.org/packages/32/af/3ff8ba06564d8811358b49a0d96ccd86188ff2487d66d014d0e222c7a39a/colander-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "b8eecdcaed714751fe0f80f8bf08c903", "sha256": "20c237885dd08d3644ce2335b32d692b11a17484bf3999c8ccf4eb5c38a40c06"}, "downloads": -1, "filename": "colander-0.7.2.tar.gz", "has_sig": false, "md5_digest": "b8eecdcaed714751fe0f80f8bf08c903", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48923, "upload_time": "2010-08-30T06:56:40", "upload_time_iso_8601": "2010-08-30T06:56:40.122377Z", "url": "https://files.pythonhosted.org/packages/04/5f/2640b9968f8998030f43c4f646fc047176d06c53487ac0bde4d300b45fd6/colander-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "691e75e79b280760c77ee7e61cb5766d", "sha256": "f66b8e899c111e196a81faf255b4665309eacd4abf601a382e392861e5fee470"}, "downloads": -1, "filename": "colander-0.7.3.tar.gz", "has_sig": false, "md5_digest": "691e75e79b280760c77ee7e61cb5766d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49644, "upload_time": "2010-09-02T07:26:59", "upload_time_iso_8601": "2010-09-02T07:26:59.353843Z", "url": "https://files.pythonhosted.org/packages/bc/35/10bb2e2ac10cf3cfdbc9f6cd3aa2cd14948a388ff19f02d58c8a6db7f061/colander-0.7.3.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "bd7e266a754c76434e37eabbde4a202c", "sha256": "816dc75c5886dafc48c5b52a9a24a6ac3903f9020286b70af9376be306660e33"}, "downloads": -1, "filename": "colander-0.8.tar.gz", "has_sig": false, "md5_digest": "bd7e266a754c76434e37eabbde4a202c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53607, "upload_time": "2010-09-08T22:55:10", "upload_time_iso_8601": "2010-09-08T22:55:10.527361Z", "url": "https://files.pythonhosted.org/packages/b0/d9/9cfc31dfa583dd9e03bd651ad6ab53da107b67240fc2d5659e3261f60297/colander-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "505cb3aaa4fd11df9f9b2ae8834763c9", "sha256": "370b5b96f7857433292eb727511c415b141d1c8fc88035182cd0838719eac923"}, "downloads": -1, "filename": "colander-0.9.tar.gz", "has_sig": false, "md5_digest": "505cb3aaa4fd11df9f9b2ae8834763c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59440, "upload_time": "2010-11-29T05:25:12", "upload_time_iso_8601": "2010-11-29T05:25:12.432207Z", "url": "https://files.pythonhosted.org/packages/06/f6/f49b71bd9495b1bed21293dc21e886cc0237c6878ca437fab1b5a01b7ee3/colander-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "96f740d2be3347026063d49c996a26b2", "sha256": "aad668cb22d0fae7dcc656f92bf7a15418ca06b618fe4c17771ab87b3ca6b628"}, "downloads": -1, "filename": "colander-0.9.1.tar.gz", "has_sig": false, "md5_digest": "96f740d2be3347026063d49c996a26b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59864, "upload_time": "2010-12-02T17:26:48", "upload_time_iso_8601": "2010-12-02T17:26:48.216458Z", "url": "https://files.pythonhosted.org/packages/67/28/4d8f5f55c9fd44cdcf573171aa6fe5f412d14210b671711d44e09424e55c/colander-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "b386bac9acef0b0af54fe722fd85e5cd", "sha256": "0a687502d46403005a4378052a56b13732c0af398f159336cc17d92ca7eea1b7"}, "downloads": -1, "filename": "colander-0.9.2.tar.gz", "has_sig": false, "md5_digest": "b386bac9acef0b0af54fe722fd85e5cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64402, "upload_time": "2011-03-29T03:48:18", "upload_time_iso_8601": "2011-03-29T03:48:18.571326Z", "url": "https://files.pythonhosted.org/packages/b2/74/ef2568e908ecbf734e135691a9372500cd5f7854b6e4729fed67be9c4170/colander-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "125b0efdd1d86bf944d57b013726ac5f", "sha256": "cb9d922f4c65fe4237e773eb44e34d43340171c08ba838264347a957f376cf2b"}, "downloads": -1, "filename": "colander-0.9.3.tar.gz", "has_sig": false, "md5_digest": "125b0efdd1d86bf944d57b013726ac5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67385, "upload_time": "2011-06-23T09:26:10", "upload_time_iso_8601": "2011-06-23T09:26:10.762630Z", "url": "https://files.pythonhosted.org/packages/95/d0/09b38dc7816c486eef3a4e793faf69dcbbb592d0301fe7759ebe0259d93d/colander-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "007e71f7189eb289ef3d278b11ce3c86", "sha256": "cadb78a862968474200615e390a7955743e2eaeddf71646615f8f2cceeafdfbd"}, "downloads": -1, "filename": "colander-0.9.4.tar.gz", "has_sig": false, "md5_digest": "007e71f7189eb289ef3d278b11ce3c86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72379, "upload_time": "2011-10-14T22:10:33", "upload_time_iso_8601": "2011-10-14T22:10:33.372021Z", "url": "https://files.pythonhosted.org/packages/eb/95/f2b03191fa11ecdcc530084160a6d499110dfd8008184637ffe429b1baea/colander-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "98784bd90f66ee5572a233460c7f9228", "sha256": "f1f998f5268fb9f1abe566b674554eab6dab9a2228caf7478b23134c72d6d16b"}, "downloads": -1, "filename": "colander-0.9.5.tar.gz", "has_sig": false, "md5_digest": "98784bd90f66ee5572a233460c7f9228", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72450, "upload_time": "2012-01-13T21:23:14", "upload_time_iso_8601": "2012-01-13T21:23:14.892016Z", "url": "https://files.pythonhosted.org/packages/1d/58/1a81308b6677078a075563b4a08ad07c494f9643b9803cc8036de96c942e/colander-0.9.5.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "2d9f65a64cb6b7f35d6a0d7b607ce4c6", "sha256": "df423d578854959b624450754d879724f1a5be2a8925d9f2945d9d5196409117"}, "downloads": -1, "filename": "colander-0.9.6.tar.gz", "has_sig": false, "md5_digest": "2d9f65a64cb6b7f35d6a0d7b607ce4c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75827, "upload_time": "2012-02-15T03:50:44", "upload_time_iso_8601": "2012-02-15T03:50:44.900110Z", "url": "https://files.pythonhosted.org/packages/8c/b5/20c9d2697bffad149dbbed988a70afc91d06a2cbe6897e32badc6402913c/colander-0.9.6.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "938bdae4503353a6a4cea96af4c91a85", "sha256": "0c696341a84476d59f554505afcc1ec3b9c428fcb78ef07ca9996588f57610f0"}, "downloads": -1, "filename": "colander-0.9.7.tar.gz", "has_sig": false, "md5_digest": "938bdae4503353a6a4cea96af4c91a85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78627, "upload_time": "2012-03-21T00:45:17", "upload_time_iso_8601": "2012-03-21T00:45:17.910614Z", "url": "https://files.pythonhosted.org/packages/14/75/afa5758a3ae0967b55eaf6d5c0aab147b28607a69e5857effe2cf6605524/colander-0.9.7.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "228e464b1f29a6a7208b16cf206c81fc", "sha256": "cab9bb0180a68ceffa1273d2ae98864989a0e00611c24371a5ffac8ea8a0e5ec"}, "downloads": -1, "filename": "colander-0.9.8.tar.gz", "has_sig": false, "md5_digest": "228e464b1f29a6a7208b16cf206c81fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81956, "upload_time": "2012-04-27T15:05:34", "upload_time_iso_8601": "2012-04-27T15:05:34.900916Z", "url": "https://files.pythonhosted.org/packages/34/1a/440daa3ac99059163a2bc4d4e8446d9506c981c83f5ab8cf9ee769dcb41e/colander-0.9.8.tar.gz", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "8725f67c0097aa2f41338cec658d87be", "sha256": "7802a2a73484ebb2b661491213a1ececbc4635d290be6df07879eb0a323b693a"}, "downloads": -1, "filename": "colander-0.9.9.tar.gz", "has_sig": false, "md5_digest": "8725f67c0097aa2f41338cec658d87be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89432, "upload_time": "2012-09-24T20:20:45", "upload_time_iso_8601": "2012-09-24T20:20:45.935640Z", "url": "https://files.pythonhosted.org/packages/aa/b0/da1a520c5c861f29c135ca52f2e054a46a484614ca943c0047bab95b98bf/colander-0.9.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "058576123da7216288c079c9f47693f8", "sha256": "7389413266b9e680c9529c16d56284edf87e0d5de557948e75f41d65683c23b3"}, "downloads": -1, "filename": "colander-1.0.tar.gz", "has_sig": false, "md5_digest": "058576123da7216288c079c9f47693f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113800, "upload_time": "2014-11-26T19:04:02", "upload_time_iso_8601": "2014-11-26T19:04:02.868000Z", "url": "https://files.pythonhosted.org/packages/71/db/c9ddcf4d82e0a3772a9e9a5978a31d7db5186200c1688160fb057bcd2c60/colander-1.0.tar.gz", "yanked": false}], "1.0a1": [{"comment_text": "", "digests": {"md5": "999f209bf6757b4e7045b3b56591a0eb", "sha256": "03bb46587e35bf5d352ec2e3f12b8e7bb2f5d8b1ce035773c7edab42a15843c3"}, "downloads": -1, "filename": "colander-1.0a1.tar.gz", "has_sig": false, "md5_digest": "999f209bf6757b4e7045b3b56591a0eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104663, "upload_time": "2013-01-11T02:10:30", "upload_time_iso_8601": "2013-01-11T02:10:30.484292Z", "url": "https://files.pythonhosted.org/packages/35/2f/e4547a26f1d6e38ad46a0b3521cf71e7b522b8a4a2c87ac172c1b1d11d94/colander-1.0a1.tar.gz", "yanked": false}], "1.0a2": [{"comment_text": "", "digests": {"md5": "3f8b9cc42c22404be8e7eddbe418ae1a", "sha256": "532918b488486796e59d976946fdf91bac00c5145d2304b8b2048f32486aa4f4"}, "downloads": -1, "filename": "colander-1.0a2.tar.gz", "has_sig": false, "md5_digest": "3f8b9cc42c22404be8e7eddbe418ae1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105652, "upload_time": "2013-01-30T18:51:48", "upload_time_iso_8601": "2013-01-30T18:51:48.149480Z", "url": "https://files.pythonhosted.org/packages/96/b1/ec1f0618482924108a63eb916884fa9fc6661f42bc7362bf25cfae69236e/colander-1.0a2.tar.gz", "yanked": false}], "1.0a3": [{"comment_text": "", "digests": {"md5": "007bc849ef211e7f4e513481e42fa477", "sha256": "38788199c28957ee0d503abd5569a54f442c1762ff0dd652a4f534331823d84a"}, "downloads": -1, "filename": "colander-1.0a3.tar.gz", "has_sig": false, "md5_digest": "007bc849ef211e7f4e513481e42fa477", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109229, "upload_time": "2013-05-16T21:37:34", "upload_time_iso_8601": "2013-05-16T21:37:34.633385Z", "url": "https://files.pythonhosted.org/packages/5c/47/00a6a2b31d415f2d0ccb3d97cc8f6c6a741c6aaf491e3574e8f8ea9be4eb/colander-1.0a3.tar.gz", "yanked": false}], "1.0a4": [{"comment_text": "", "digests": {"md5": "aa73d363392258f35a4074d4feaf35a5", "sha256": "4fecaa751c4140529b6c904027e072a04a276745c98ac6c44cde4bde503f93c0"}, "downloads": -1, "filename": "colander-1.0a4.tar.gz", "has_sig": false, "md5_digest": "aa73d363392258f35a4074d4feaf35a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111511, "upload_time": "2013-05-21T06:24:03", "upload_time_iso_8601": "2013-05-21T06:24:03.554289Z", "url": "https://files.pythonhosted.org/packages/cb/de/a7cadcf29d1a262c52746d24a8c676cba5bbf5a7050120ae8d78f677b499/colander-1.0a4.tar.gz", "yanked": false}], "1.0a5": [{"comment_text": "", "digests": {"md5": "569dea523561f5d94338ef9d9a98d249", "sha256": "43fce2c5a24e950de28e317be29990e5cdb0127f462200b1ef77b1f46e4b339c"}, "downloads": -1, "filename": "colander-1.0a5.tar.gz", "has_sig": false, "md5_digest": "569dea523561f5d94338ef9d9a98d249", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111105, "upload_time": "2013-05-31T15:56:39", "upload_time_iso_8601": "2013-05-31T15:56:39.714021Z", "url": "https://files.pythonhosted.org/packages/17/c4/3cfb31edebaea320aa5ba7babe144c6b8abd705580136b46898e3f0ab81b/colander-1.0a5.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "89f2cf4b5c87d43f7917d6a0d4872e6a", "sha256": "8a342bf278227be6ac96e90befa949c235e667254db17e773e79d834459be971"}, "downloads": -1, "filename": "colander-1.0b1.tar.gz", "has_sig": false, "md5_digest": "89f2cf4b5c87d43f7917d6a0d4872e6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113250, "upload_time": "2013-09-01T19:45:40", "upload_time_iso_8601": "2013-09-01T19:45:40.283502Z", "url": "https://files.pythonhosted.org/packages/4d/bc/48b9751b5c532ec74e78f3a8c09d26994f8e748e4895bbc5d2f6c8c5734b/colander-1.0b1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "5ff26ba70d1edbe1a1561e1522349444", "sha256": "e4d057400ce7d62a60c4650337f9867fbcc8babdbce69db448424fab7836d2ba"}, "downloads": -1, "filename": "colander-1.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "5ff26ba70d1edbe1a1561e1522349444", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 109400, "upload_time": "2016-01-16T02:27:06", "upload_time_iso_8601": "2016-01-16T02:27:06.365438Z", "url": "https://files.pythonhosted.org/packages/8a/a7/856e4f6ed404efd47883661703e5a8ddbbbd08aaa0dce348a22fa31755a6/colander-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1afb2409efd121510b2f21dde9ac6c8", "sha256": "e58f8445a2a3ca6fc87cefcbc9fe46a900707d9a0e8e0626325b67e3d09e9b3c"}, "downloads": -1, "filename": "colander-1.1.tar.gz", "has_sig": true, "md5_digest": "a1afb2409efd121510b2f21dde9ac6c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114523, "upload_time": "2016-01-16T02:27:27", "upload_time_iso_8601": "2016-01-16T02:27:27.137879Z", "url": "https://files.pythonhosted.org/packages/66/76/ddfa042c53bc0941714528b30cfb7b49542e5e1396805c7fef31cf1b8f20/colander-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "8c7ebd0267fb438965f72c595ce561c1", "sha256": "0d0005833fa81c733ed3c91608dac5424e236eb09408fec1fec4eebe2ffa1823"}, "downloads": -1, "filename": "colander-1.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8c7ebd0267fb438965f72c595ce561c1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 114014, "upload_time": "2016-01-19T07:45:15", "upload_time_iso_8601": "2016-01-19T07:45:15.506608Z", "url": "https://files.pythonhosted.org/packages/2d/2a/6c8af99164c3823b941e5822f21f7d7a79345a2b5671f92921019ab1d522/colander-1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83db21b07936a0726e588dae1914b9ed", "sha256": "528f406cd1bf65cfd08958c9c8b839f37e96a65696a8f213ce81a59aae33dae4"}, "downloads": -1, "filename": "colander-1.2.tar.gz", "has_sig": true, "md5_digest": "83db21b07936a0726e588dae1914b9ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117130, "upload_time": "2016-01-19T07:45:21", "upload_time_iso_8601": "2016-01-19T07:45:21.282759Z", "url": "https://files.pythonhosted.org/packages/14/23/c9ceba07a6a1dc0eefbb215fc0dc64aabc2b22ee756bc0f0c13278fa0887/colander-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "7e195725909d2a8ce16cfd99ff201fb0", "sha256": "a8cbbb57a8b4b11cf18a67e0bc1eb2ef1e0cb6f3687f73f2521867c73f18b2a0"}, "downloads": -1, "filename": "colander-1.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "7e195725909d2a8ce16cfd99ff201fb0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 118420, "upload_time": "2016-05-23T21:51:00", "upload_time_iso_8601": "2016-05-23T21:51:00.272740Z", "url": "https://files.pythonhosted.org/packages/09/a3/53afb72291a8ef5c06e6e6bcbdec0bffcac2b4be65dd5747ca0c6b9e69ab/colander-1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88b0abd132ffb571cc22beed7561f509", "sha256": "4b83b6ea99070fe1f98d2f354d67cc7f57687aa9a37fb466b17273d45e3049d7"}, "downloads": -1, "filename": "colander-1.3.tar.gz", "has_sig": true, "md5_digest": "88b0abd132ffb571cc22beed7561f509", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119810, "upload_time": "2016-05-23T21:51:13", "upload_time_iso_8601": "2016-05-23T21:51:13.817054Z", "url": "https://files.pythonhosted.org/packages/9b/63/d159f96f35a8c73468ebcf54ad2b2d572702e8dd012129e4bdc0c6044315/colander-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "4392894a8607c1fed32b546902520548", "sha256": "21ff97d8903452e2510311bb56d2f8cf30e58444a10295f3488a673f97504095"}, "downloads": -1, "filename": "colander-1.3.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4392894a8607c1fed32b546902520548", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 118513, "upload_time": "2016-05-23T21:57:12", "upload_time_iso_8601": "2016-05-23T21:57:12.434162Z", "url": "https://files.pythonhosted.org/packages/b9/30/b187f87d07fe1ff747a179161ec3613a765ab7a0c36b2835d9e2b1e8becf/colander-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1d93135f2d3f7b15c894297c0cd019e", "sha256": "48bdbb5e8f50fcf2f05aab6bb2c0ab58d6ec7eed81a72b7d0272744fe72fafc2"}, "downloads": -1, "filename": "colander-1.3.1.tar.gz", "has_sig": true, "md5_digest": "a1d93135f2d3f7b15c894297c0cd019e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119999, "upload_time": "2016-05-23T21:57:19", "upload_time_iso_8601": "2016-05-23T21:57:19.361788Z", "url": "https://files.pythonhosted.org/packages/62/23/14a8cf54ce7d521680a29061e02133885016ae53bdccd132662c53382a4e/colander-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "c79d63887bbc8552237e1d4a0f783f12", "sha256": "78003a787d3daf85f4547c0cb5bb49ffa12819a195409072de81e279e8261756"}, "downloads": -1, "filename": "colander-1.3.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "c79d63887bbc8552237e1d4a0f783f12", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 119564, "upload_time": "2017-02-01T05:45:28", "upload_time_iso_8601": "2017-02-01T05:45:28.444446Z", "url": "https://files.pythonhosted.org/packages/d2/27/60a53e8aeb3e15f0fe556fce7d514a1cd5749d88e9791c4147c4589efa6e/colander-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "054ef1029668dda2962fc7ee791b9a27", "sha256": "cc436a49d6dfb29bfa27a9263eb55de3ccbfa1d135ed665167b3c0453b85a987"}, "downloads": -1, "filename": "colander-1.3.2.tar.gz", "has_sig": true, "md5_digest": "054ef1029668dda2962fc7ee791b9a27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121098, "upload_time": "2017-02-01T05:45:31", "upload_time_iso_8601": "2017-02-01T05:45:31.352176Z", "url": "https://files.pythonhosted.org/packages/8f/6d/a0a1a254847ba8faeba4352c363a98c2054f98f4bac5ab564c160349c484/colander-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "0dbb54b32c92969a9b6441a66c67cb39", "sha256": "bfa6a211794c95ce95177398384f0295fb2abdefef96c5e57602faa4c890a528"}, "downloads": -1, "filename": "colander-1.3.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "0dbb54b32c92969a9b6441a66c67cb39", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 123452, "upload_time": "2017-04-25T06:56:45", "upload_time_iso_8601": "2017-04-25T06:56:45.081215Z", "url": "https://files.pythonhosted.org/packages/36/50/d0cd444114d188032a3d217f97a88ee56ec11045f7e1d0c7f5809e144d99/colander-1.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5d783768c51d73695f49bbe95778ab4", "sha256": "7a98d5045dc63d30b36cc43cdb4b9a217f346fab69144f8e92884754db48e3a1"}, "downloads": -1, "filename": "colander-1.3.3.tar.gz", "has_sig": true, "md5_digest": "f5d783768c51d73695f49bbe95778ab4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123070, "upload_time": "2017-04-25T06:56:48", "upload_time_iso_8601": "2017-04-25T06:56:48.048079Z", "url": "https://files.pythonhosted.org/packages/54/a9/9862a561e015b2c7b56404c0b13828a8bdc51e05ab3703bd792cec064487/colander-1.3.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "3a322a255b2f079876b743b596ecbf3e", "sha256": "3ed2941e006e88c7abe78ee0921f0b91801340acdcd46389380887027108e999"}, "downloads": -1, "filename": "colander-1.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "3a322a255b2f079876b743b596ecbf3e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 122122, "upload_time": "2017-08-01T03:31:58", "upload_time_iso_8601": "2017-08-01T03:31:58.190464Z", "url": "https://files.pythonhosted.org/packages/47/8b/b801d718ebea289f3faa34c680e0eaf1f3022e399a6034ddce11e014af3b/colander-1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbb8e403c2ba05aeaa419d51fdb93736", "sha256": "e20e9acf190e5711cf96aa65a5405dac04b6e841028fc361d953a9923dbc4e72"}, "downloads": -1, "filename": "colander-1.4.tar.gz", "has_sig": true, "md5_digest": "cbb8e403c2ba05aeaa419d51fdb93736", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122253, "upload_time": "2017-08-01T03:31:59", "upload_time_iso_8601": "2017-08-01T03:31:59.810348Z", "url": "https://files.pythonhosted.org/packages/cc/e2/c4e716ac4a426d8ad4dfe306c34f0018a22275d2420815784005bf771c84/colander-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "d5500c73e971b69da3863047c8e5539e", "sha256": "c95e05d16c2d6328da8b95a168d649d4c7bc43dc5c42c2f9d24dc7bb36c34d71"}, "downloads": -1, "filename": "colander-1.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d5500c73e971b69da3863047c8e5539e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 110344, "upload_time": "2018-09-08T04:40:58", "upload_time_iso_8601": "2018-09-08T04:40:58.550858Z", "url": "https://files.pythonhosted.org/packages/d6/a7/29e42c916416405bae7203e981dc0e5859e6f9d8033c661fcf7171e3d0d8/colander-1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f184b161e0fb106ee3d72ea5eaa19449", "sha256": "9336202a6bdb0220c5feec900f9aeb3e373ef485b10c185c2a9ae733843ad91e"}, "downloads": -1, "filename": "colander-1.5.tar.gz", "has_sig": true, "md5_digest": "f184b161e0fb106ee3d72ea5eaa19449", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127006, "upload_time": "2018-09-08T04:41:00", "upload_time_iso_8601": "2018-09-08T04:41:00.564559Z", "url": "https://files.pythonhosted.org/packages/76/45/e4bc697949cbcd2cd21180a99ef21450b01e74ef39a036f4188e759e7137/colander-1.5.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "1f41ccd41359681b90014b050904397a", "sha256": "2358303aa04cca0e1865323ce253e65d25f6307d12bade89dbe1aa4e60197d4b"}, "downloads": -1, "filename": "colander-1.5.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1f41ccd41359681b90014b050904397a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 110435, "upload_time": "2018-09-11T02:43:26", "upload_time_iso_8601": "2018-09-11T02:43:26.816161Z", "url": "https://files.pythonhosted.org/packages/d2/6f/ea58d3e5a1f7c4d5ff3360d151d5dcedb0d927bb23b823d5a8b3cd951f49/colander-1.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e66bd9365943d4ad680d6a8136994166", "sha256": "d86b9e1fb42c80c68b26040e32dad584aa168abf3175133b36f5dace392350a1"}, "downloads": -1, "filename": "colander-1.5.1.tar.gz", "has_sig": true, "md5_digest": "e66bd9365943d4ad680d6a8136994166", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127279, "upload_time": "2018-09-11T02:43:28", "upload_time_iso_8601": "2018-09-11T02:43:28.829915Z", "url": "https://files.pythonhosted.org/packages/ec/d1/fcca811a0a692c69d27e36b4d11a73acb98b4bab48323442642b6fd4386d/colander-1.5.1.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "fd203cbb3c95d4f2164d8dc196c8ae7a", "sha256": "481d6f68409d83b65637b7e7d7c5482c3559b2e64ef6c8c743d14ec9d66eecbf"}, "downloads": -1, "filename": "colander-1.6.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "fd203cbb3c95d4f2164d8dc196c8ae7a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 111994, "upload_time": "2019-01-31T17:05:45", "upload_time_iso_8601": "2019-01-31T17:05:45.529823Z", "url": "https://files.pythonhosted.org/packages/10/8a/d7cbed73f72232346ef2255b35a42004a04c9447e61e85a4276f80222e32/colander-1.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6d915cbf5dec1667d3d2280c78f5bc7", "sha256": "121d57ccaa17a3f035aeba74488305837ae758ec5b66b4d6a48fa140f262f974"}, "downloads": -1, "filename": "colander-1.6.0.tar.gz", "has_sig": true, "md5_digest": "c6d915cbf5dec1667d3d2280c78f5bc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129126, "upload_time": "2019-01-31T17:05:47", "upload_time_iso_8601": "2019-01-31T17:05:47.838435Z", "url": "https://files.pythonhosted.org/packages/95/f0/f1c159cf282f353c96125b657b6e67d8dab91c06b4c32c358a5c133467d5/colander-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "50871db9847d63ae0e3e62e8d5f2e355", "sha256": "f79795d04bd06958bd03ce83d25aeadfe5a04e2877cf0a9f1f4da2d84a9530c3"}, "downloads": -1, "filename": "colander-1.7.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "50871db9847d63ae0e3e62e8d5f2e355", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 113138, "upload_time": "2019-02-01T18:25:40", "upload_time_iso_8601": "2019-02-01T18:25:40.011408Z", "url": "https://files.pythonhosted.org/packages/d3/44/ce2754165e420f1ccbeaece86a0d2b7b8f5a0c8f99ebd90c9c438a8eaa72/colander-1.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d270e5669d72f78c1268a27be830c53c", "sha256": "d758163a22d22c39b9eaae049749a5cd503f341231a02ed95af480b1145e81f2"}, "downloads": -1, "filename": "colander-1.7.0.tar.gz", "has_sig": true, "md5_digest": "d270e5669d72f78c1268a27be830c53c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131320, "upload_time": "2019-02-01T18:25:42", "upload_time_iso_8601": "2019-02-01T18:25:42.211102Z", "url": "https://files.pythonhosted.org/packages/db/e4/74ab06f54211917b41865cafc987ce511e35503de48da9bfe9358a1bdc3e/colander-1.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "50871db9847d63ae0e3e62e8d5f2e355", "sha256": "f79795d04bd06958bd03ce83d25aeadfe5a04e2877cf0a9f1f4da2d84a9530c3"}, "downloads": -1, "filename": "colander-1.7.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "50871db9847d63ae0e3e62e8d5f2e355", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 113138, "upload_time": "2019-02-01T18:25:40", "upload_time_iso_8601": "2019-02-01T18:25:40.011408Z", "url": "https://files.pythonhosted.org/packages/d3/44/ce2754165e420f1ccbeaece86a0d2b7b8f5a0c8f99ebd90c9c438a8eaa72/colander-1.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d270e5669d72f78c1268a27be830c53c", "sha256": "d758163a22d22c39b9eaae049749a5cd503f341231a02ed95af480b1145e81f2"}, "downloads": -1, "filename": "colander-1.7.0.tar.gz", "has_sig": true, "md5_digest": "d270e5669d72f78c1268a27be830c53c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 131320, "upload_time": "2019-02-01T18:25:42", "upload_time_iso_8601": "2019-02-01T18:25:42.211102Z", "url": "https://files.pythonhosted.org/packages/db/e4/74ab06f54211917b41865cafc987ce511e35503de48da9bfe9358a1bdc3e/colander-1.7.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:05 2020"}