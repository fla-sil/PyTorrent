{"info": {"author": "Cryptowatch", "author_email": "infra@cryptowat.ch", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.7", "Topic :: Office/Business :: Financial", "Topic :: Office/Business :: Financial :: Investment"], "description": "# Cryptowatch Python SDK\n\nThe Cryptowatch Python library provides a convenient access to the [Cryptowatch API](https://docs.cryptowat.ch/home/) from applications written in the Python language.\n\nIt includes the following features:\n * Auto-serialization of API responses into Python objects\n * Websocket client with transparent handling of protobuf messages\n * API credentials automatically read from your `~/.cw/credentials.yml` config file\n * Custom exceptions for API-specific issues (e.g.: Requests Allowance)\n * Smart back-off retries in case of API connectivity loss\n\n## Installation\n```\npip install cryptowatch-sdk\n```\n\n#### Note:\n\nThe [`cryptowatch` library](https://pypi.org/project/cryptowatch/) is **not** related with [Cryptowatch](https://cryptowat.ch/). If you installed it by mistake run `pip uninstall cryptowatch` to remove it.\n\nThe correct library name is `cryptowatch-sdk`.\n\n## Example\n\nShowing all Kraken markets that already gained at least 5% over the current weekly candle.\n\n```python\nimport cryptowatch as cw\nfrom datetime import datetime, timedelta\n\n# Get all Kraken markets\nkraken = cw.markets.list(\"kraken\")\n\n# For each Kraken market...\nfor market in kraken.markets:\n\n    # Forge current market ticker, like KRAKEN:BTCUSD\n    ticker = \"{}:{}\".format(market.exchange, market.pair).upper()\n    # Request weekly candles for that market\n    candles = cw.markets.get(ticker, ohlc=True, periods=[\"1w\"])\n\n    # Each candle is a list of [close_timestamp, open, high, low, close, volume, volume_quote]\n    # Get close_timestamp, open and close from the most recent weekly candle\n    close_ts, wkly_open, wkly_close = (\n        candles.of_1w[-1][0],\n        candles.of_1w[-1][1],\n        candles.of_1w[-1][4],\n    )\n\n    # Compute market performance, skip if open was 0\n    if wkly_open == 0:\n        continue\n    perf = (wkly_open - wkly_close) * 100 / wkly_open\n\n    # If the market performance was 5% or more, print it\n    if perf >= 5:\n        open_ts = datetime.utcfromtimestamp(close_ts) - timedelta(days=7)\n        print(\"{} gained {:.2f}% since {}\".format(ticker, perf, open_ts))\n```\n\n\n### Requirements\n\n* python v3.7+\n* requests v0.8.8+\n* marshmallow v3.2.2+\n* pyyaml v5.1.2+\n* websocket-client v0.56+\n* protobuf v3.11.3+\n\n## API Crendential\n\nUsing a credential file will allow you to authenticate your requests and grant you the API access of your account tier (Free, Basic or Pro).\n\n### Setup your credential file\n\n1. Generate an Cryptowatch API key from [your account](https://cryptowat.ch/account/api-access)\n2. Create your credential file on your machine by running in order:\n\n    2.1 `mkdir $HOME/.cw`\n\n    2.2 `echo \"apikey: 123\" > $HOME/.cw/credentials.yml` (where `123` is your 20 digits **public key**)\n\n3. Verify with `cat $HOME/.cw/credentials.yml` that you see something like below (`123` being your public key):\n\n```\napikey: 123\n```\n\nThe SDK will read your public key as soon as `import cryptowatch` is ran in your script.\n\n\n## Usage\n\n### REST API\n\n```python\nimport cryptowatch as cw\n\n# Set your API Key, it is by default read from  your ~/.cw/credentials.yml file\ncw.api_key = \"123\"\n\n# Assets\ncw.assets.list()\ncw.assets.get(\"BTC\")\n\n# Exchanges\ncw.exchanges.list()\ncw.exchanges.get(\"KRAKEN\")\n\n# Instruments\ncw.instruments.list()\ncw.instruments.get(\"BTCUSD\")\n\n# Markets\ncw.markets.list() # Returns list of all markets on all exchanges\ncw.markets.list(\"BINANCE\") # Returns all markets on Binance\n\n# Returns market summary (last, high, low, change, volume)\ncw.markets.get(\"KRAKEN:BTCUSD\")\n# Return market candlestick info (open, high, low, close, volume) on some timeframes\ncw.markets.get(\"KRAKEN:BTCUSD\", ohlc=True, periods=[\"4h\", \"1h\", \"1d\"])\n\n# Returns market last trades\ncw.markets.get(\"KRAKEN:BTCUSD\", trades=True)\n\n# Return market current orderbook\ncw.markets.get(\"KRAKEN:BTCUSD\", orderbook=True)\n# Return market current orderbook liquidity\ncw.markets.get(\"KRAKEN:BTCUSD\", liquidity=True)\n```\n\nYou can access the raw HTTP response received via the `_http_response` attribute which is a [`requests.Response`](https://requests.readthedocs.io/en/stable/api/#requests.Response) object:\n\n\n```python\nimport cryptowatch as cw\n\nbitcoin = cw.assets.get('btc')\nprint(bitcoin._http_response)\n\n```\n\n### Websocket\n\n```python\nimport cryptowatch as cw\n\n# Set your API Key\ncw.api_key = \"123\"\n\n# Subscribe to resources (https://docs.cryptowat.ch/websocket-api/data-subscriptions#resources)\ncw.stream.subscriptions = [\"markets:*:ohlc\"]\n\n# What to do on each trade update\ndef handle_trades_update(trade_update):\n    \"\"\"\n        trade_update follows Cryptowatch protocol buffer format:\n        https://github.com/cryptowatch/proto/blob/master/public/markets/market.proto\n    \"\"\"\n    market_msg = \">>> Market#{} Exchange#{} Pair#{}: {} New Trades\".format(\n        trade_update.marketUpdate.market.marketId,\n        trade_update.marketUpdate.market.exchangeId,\n        trade_update.marketUpdate.market.currencyPairId,\n        len(trade_update.marketUpdate.tradesUpdate.trades),\n    )\n    print(market_msg)\n    for trade in trade_update.marketUpdate.tradesUpdate.trades:\n        trade_msg = \"\\tID:{} TIMESTAMP:{} TIMESTAMPNANO:{} PRICE:{} AMOUNT:{}\".format(\n            trade.externalId,\n            trade.timestamp,\n            trade.timestampNano,\n            trade.priceStr,\n            trade.amountStr,\n        )\n        print(trade_msg)\n\n\ncw.stream.on_trades_update = handle_trades_update\n\n\n# Start receiving\ncw.stream.connect()\n\n# Call disconnect to close the stream connection\n# cw.stream.disconnect()\n```\n\nSee [this script](https://github.com/cryptowatch/cw-sdk-python/tree/master/examples/stream_example.py) for more streaming example.\n\n\n#### Converting protobuf messages to JSON\n\nIf you need to convert the protobuf message to JSON, you can do so with `MessageToJson`. See the example below:\n\n```python\nfrom google.protobuf.json_format import MessageToJson\nimport cryptowatch as cw\n\n# Set your API Key\ncw.api_key = \"123\"\n\n# Subscribe to resources (https://docs.cryptowat.ch/websocket-api/data-subscriptions#resources)\ncw.stream.subscriptions = [\"markets:*:ohlc\"]\n\n# What to do on each trade update\ndef handle_trades_update(trade_update):\n    \"\"\"\n        trade_update follows Cryptowatch protocol buffer format:\n        https://github.com/cryptowatch/proto/blob/master/public/markets/market.proto\n    \"\"\"\n    MessageToJson(trade_update)\n\ncw.stream.on_trades_update = handle_trades_update\n\n\n# Start receiving\ncw.stream.connect()\n```\n\n### Logging\n\nLogging can be enabled through Python's `logging` module:\n\n```python\nimport logging\n\nlogging.basicConfig()\nlogging.getLogger(\"cryptowatch\").setLevel(logging.DEBUG)\n```\n\n### CLI\n\nThe library exposes a simple utility, named `cryptowatch`, to return last market prices.\n\n\n#### By default it returns Kraken's BTCUSD market\n\n```\n> cryptowatch\n7425.0\n```\n\n#### Add another Kraken market to return this market last price\n\n```\n> cryptowatch btceur\n6758.1\n```\n\n#### You can also specify your own exchange\n\n```\n> cryptowatch binance:ethbtc\n0.020359\n```\n\nWhen the market doesn't exist a return code of `1` will be set (`0` otherwise):\n\n```\n> cryptowatch binance:nosuchmarketusd\n> echo $?\n1\n```\n\n\n\n## Testing\n\nUnit tests are under the [tests](https://github.com/cryptowatch/cw-sdk-python/tree/master/tests) folder and use `pytest`, run them all with:\n\n```\nmake test\n```\n\nIntegration tests sending real HTTP requests to the Cryptowatch API can be run with:\n\n```\nmake test-http-real\n```\n\n## Development\n\nTesting and developement dependencies are in the [requirements.txt](https://github.com/cryptowatch/cw-sdk-python/tree/master/requirements.txt) file, install them with:\n\n```\npip install -r requirements.txt\n```\n\nThe code base use the [Black](https://black.readthedocs.io/en/stable/) linter, run it with:\n\n```\nmake lint\n```\n\n## License\n\n[BSD-2-Clause](https://github.com/cryptowatch/cw-sdk-python/tree/master/LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cryptowatch/cw-sdk-python", "keywords": "cryptowatch sdk bitcoin crypto", "license": "BSD-2", "maintainer": "", "maintainer_email": "", "name": "cryptowatch-sdk", "package_url": "https://pypi.org/project/cryptowatch-sdk/", "platform": "", "project_url": "https://pypi.org/project/cryptowatch-sdk/", "project_urls": {"Bug Tracker": "https://github.com/cryptowatch/cw-sdk-python/issues", "Documentation": "https://github.com/cryptowatch/cw-sdk-python#installation", "Homepage": "https://github.com/cryptowatch/cw-sdk-python", "Source Code": "https://github.com/cryptowatch/cw-sdk-python"}, "release_url": "https://pypi.org/project/cryptowatch-sdk/0.0.11/", "requires_dist": ["marshmallow (>=3.2.2)", "requests (>=2.22.0)", "PyYAML (>=5.1.2)", "urllib3 (>=1.25.7)", "websocket-client (>=0.56.0)", "protobuf (>=3.11.3)"], "requires_python": ">=3.7", "summary": "Python bindings for the Cryptowatch API. Cryptocurrency markets, assets, instruments and exchanges data.", "version": "0.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cryptowatch Python SDK</h1>\n<p>The Cryptowatch Python library provides a convenient access to the <a href=\"https://docs.cryptowat.ch/home/\" rel=\"nofollow\">Cryptowatch API</a> from applications written in the Python language.</p>\n<p>It includes the following features:</p>\n<ul>\n<li>Auto-serialization of API responses into Python objects</li>\n<li>Websocket client with transparent handling of protobuf messages</li>\n<li>API credentials automatically read from your <code>~/.cw/credentials.yml</code> config file</li>\n<li>Custom exceptions for API-specific issues (e.g.: Requests Allowance)</li>\n<li>Smart back-off retries in case of API connectivity loss</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install cryptowatch-sdk\n</code></pre>\n<h4>Note:</h4>\n<p>The <a href=\"https://pypi.org/project/cryptowatch/\" rel=\"nofollow\"><code>cryptowatch</code> library</a> is <strong>not</strong> related with <a href=\"https://cryptowat.ch/\" rel=\"nofollow\">Cryptowatch</a>. If you installed it by mistake run <code>pip uninstall cryptowatch</code> to remove it.</p>\n<p>The correct library name is <code>cryptowatch-sdk</code>.</p>\n<h2>Example</h2>\n<p>Showing all Kraken markets that already gained at least 5% over the current weekly candle.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cryptowatch</span> <span class=\"k\">as</span> <span class=\"nn\">cw</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"c1\"># Get all Kraken markets</span>\n<span class=\"n\">kraken</span> <span class=\"o\">=</span> <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"s2\">\"kraken\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For each Kraken market...</span>\n<span class=\"k\">for</span> <span class=\"n\">market</span> <span class=\"ow\">in</span> <span class=\"n\">kraken</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># Forge current market ticker, like KRAKEN:BTCUSD</span>\n    <span class=\"n\">ticker</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">:</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">market</span><span class=\"o\">.</span><span class=\"n\">exchange</span><span class=\"p\">,</span> <span class=\"n\">market</span><span class=\"o\">.</span><span class=\"n\">pair</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Request weekly candles for that market</span>\n    <span class=\"n\">candles</span> <span class=\"o\">=</span> <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ticker</span><span class=\"p\">,</span> <span class=\"n\">ohlc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"1w\"</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># Each candle is a list of [close_timestamp, open, high, low, close, volume, volume_quote]</span>\n    <span class=\"c1\"># Get close_timestamp, open and close from the most recent weekly candle</span>\n    <span class=\"n\">close_ts</span><span class=\"p\">,</span> <span class=\"n\">wkly_open</span><span class=\"p\">,</span> <span class=\"n\">wkly_close</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">candles</span><span class=\"o\">.</span><span class=\"n\">of_1w</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"n\">candles</span><span class=\"o\">.</span><span class=\"n\">of_1w</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"n\">candles</span><span class=\"o\">.</span><span class=\"n\">of_1w</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Compute market performance, skip if open was 0</span>\n    <span class=\"k\">if</span> <span class=\"n\">wkly_open</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>\n    <span class=\"n\">perf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">wkly_open</span> <span class=\"o\">-</span> <span class=\"n\">wkly_close</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">100</span> <span class=\"o\">/</span> <span class=\"n\">wkly_open</span>\n\n    <span class=\"c1\"># If the market performance was 5% or more, print it</span>\n    <span class=\"k\">if</span> <span class=\"n\">perf</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n        <span class=\"n\">open_ts</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcfromtimestamp</span><span class=\"p\">(</span><span class=\"n\">close_ts</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\"> gained </span><span class=\"si\">{:.2f}% s</span><span class=\"s2\">ince </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ticker</span><span class=\"p\">,</span> <span class=\"n\">perf</span><span class=\"p\">,</span> <span class=\"n\">open_ts</span><span class=\"p\">))</span>\n</pre>\n<h3>Requirements</h3>\n<ul>\n<li>python v3.7+</li>\n<li>requests v0.8.8+</li>\n<li>marshmallow v3.2.2+</li>\n<li>pyyaml v5.1.2+</li>\n<li>websocket-client v0.56+</li>\n<li>protobuf v3.11.3+</li>\n</ul>\n<h2>API Crendential</h2>\n<p>Using a credential file will allow you to authenticate your requests and grant you the API access of your account tier (Free, Basic or Pro).</p>\n<h3>Setup your credential file</h3>\n<ol>\n<li>\n<p>Generate an Cryptowatch API key from <a href=\"https://cryptowat.ch/account/api-access\" rel=\"nofollow\">your account</a></p>\n</li>\n<li>\n<p>Create your credential file on your machine by running in order:</p>\n<p>2.1 <code>mkdir $HOME/.cw</code></p>\n<p>2.2 <code>echo \"apikey: 123\" &gt; $HOME/.cw/credentials.yml</code> (where <code>123</code> is your 20 digits <strong>public key</strong>)</p>\n</li>\n<li>\n<p>Verify with <code>cat $HOME/.cw/credentials.yml</code> that you see something like below (<code>123</code> being your public key):</p>\n</li>\n</ol>\n<pre><code>apikey: 123\n</code></pre>\n<p>The SDK will read your public key as soon as <code>import cryptowatch</code> is ran in your script.</p>\n<h2>Usage</h2>\n<h3>REST API</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cryptowatch</span> <span class=\"k\">as</span> <span class=\"nn\">cw</span>\n\n<span class=\"c1\"># Set your API Key, it is by default read from  your ~/.cw/credentials.yml file</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"123\"</span>\n\n<span class=\"c1\"># Assets</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Exchanges</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"KRAKEN\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Instruments</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">instruments</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">instruments</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"BTCUSD\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Markets</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span> <span class=\"c1\"># Returns list of all markets on all exchanges</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"s2\">\"BINANCE\"</span><span class=\"p\">)</span> <span class=\"c1\"># Returns all markets on Binance</span>\n\n<span class=\"c1\"># Returns market summary (last, high, low, change, volume)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"KRAKEN:BTCUSD\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Return market candlestick info (open, high, low, close, volume) on some timeframes</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"KRAKEN:BTCUSD\"</span><span class=\"p\">,</span> <span class=\"n\">ohlc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"4h\"</span><span class=\"p\">,</span> <span class=\"s2\">\"1h\"</span><span class=\"p\">,</span> <span class=\"s2\">\"1d\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Returns market last trades</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"KRAKEN:BTCUSD\"</span><span class=\"p\">,</span> <span class=\"n\">trades</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Return market current orderbook</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"KRAKEN:BTCUSD\"</span><span class=\"p\">,</span> <span class=\"n\">orderbook</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Return market current orderbook liquidity</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"KRAKEN:BTCUSD\"</span><span class=\"p\">,</span> <span class=\"n\">liquidity</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can access the raw HTTP response received via the <code>_http_response</code> attribute which is a <a href=\"https://requests.readthedocs.io/en/stable/api/#requests.Response\" rel=\"nofollow\"><code>requests.Response</code></a> object:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cryptowatch</span> <span class=\"k\">as</span> <span class=\"nn\">cw</span>\n\n<span class=\"n\">bitcoin</span> <span class=\"o\">=</span> <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'btc'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bitcoin</span><span class=\"o\">.</span><span class=\"n\">_http_response</span><span class=\"p\">)</span>\n</pre>\n<h3>Websocket</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cryptowatch</span> <span class=\"k\">as</span> <span class=\"nn\">cw</span>\n\n<span class=\"c1\"># Set your API Key</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"123\"</span>\n\n<span class=\"c1\"># Subscribe to resources (https://docs.cryptowat.ch/websocket-api/data-subscriptions#resources)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">subscriptions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"markets:*:ohlc\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># What to do on each trade update</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_trades_update</span><span class=\"p\">(</span><span class=\"n\">trade_update</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        trade_update follows Cryptowatch protocol buffer format:</span>\n<span class=\"sd\">        https://github.com/cryptowatch/proto/blob/master/public/markets/market.proto</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">market_msg</span> <span class=\"o\">=</span> <span class=\"s2\">\"&gt;&gt;&gt; Market#</span><span class=\"si\">{}</span><span class=\"s2\"> Exchange#</span><span class=\"si\">{}</span><span class=\"s2\"> Pair#</span><span class=\"si\">{}</span><span class=\"s2\">: </span><span class=\"si\">{}</span><span class=\"s2\"> New Trades\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">trade_update</span><span class=\"o\">.</span><span class=\"n\">marketUpdate</span><span class=\"o\">.</span><span class=\"n\">market</span><span class=\"o\">.</span><span class=\"n\">marketId</span><span class=\"p\">,</span>\n        <span class=\"n\">trade_update</span><span class=\"o\">.</span><span class=\"n\">marketUpdate</span><span class=\"o\">.</span><span class=\"n\">market</span><span class=\"o\">.</span><span class=\"n\">exchangeId</span><span class=\"p\">,</span>\n        <span class=\"n\">trade_update</span><span class=\"o\">.</span><span class=\"n\">marketUpdate</span><span class=\"o\">.</span><span class=\"n\">market</span><span class=\"o\">.</span><span class=\"n\">currencyPairId</span><span class=\"p\">,</span>\n        <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">trade_update</span><span class=\"o\">.</span><span class=\"n\">marketUpdate</span><span class=\"o\">.</span><span class=\"n\">tradesUpdate</span><span class=\"o\">.</span><span class=\"n\">trades</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">market_msg</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">trade</span> <span class=\"ow\">in</span> <span class=\"n\">trade_update</span><span class=\"o\">.</span><span class=\"n\">marketUpdate</span><span class=\"o\">.</span><span class=\"n\">tradesUpdate</span><span class=\"o\">.</span><span class=\"n\">trades</span><span class=\"p\">:</span>\n        <span class=\"n\">trade_msg</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">ID:</span><span class=\"si\">{}</span><span class=\"s2\"> TIMESTAMP:</span><span class=\"si\">{}</span><span class=\"s2\"> TIMESTAMPNANO:</span><span class=\"si\">{}</span><span class=\"s2\"> PRICE:</span><span class=\"si\">{}</span><span class=\"s2\"> AMOUNT:</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">trade</span><span class=\"o\">.</span><span class=\"n\">externalId</span><span class=\"p\">,</span>\n            <span class=\"n\">trade</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">,</span>\n            <span class=\"n\">trade</span><span class=\"o\">.</span><span class=\"n\">timestampNano</span><span class=\"p\">,</span>\n            <span class=\"n\">trade</span><span class=\"o\">.</span><span class=\"n\">priceStr</span><span class=\"p\">,</span>\n            <span class=\"n\">trade</span><span class=\"o\">.</span><span class=\"n\">amountStr</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">trade_msg</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">on_trades_update</span> <span class=\"o\">=</span> <span class=\"n\">handle_trades_update</span>\n\n\n<span class=\"c1\"># Start receiving</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Call disconnect to close the stream connection</span>\n<span class=\"c1\"># cw.stream.disconnect()</span>\n</pre>\n<p>See <a href=\"https://github.com/cryptowatch/cw-sdk-python/tree/master/examples/stream_example.py\" rel=\"nofollow\">this script</a> for more streaming example.</p>\n<h4>Converting protobuf messages to JSON</h4>\n<p>If you need to convert the protobuf message to JSON, you can do so with <code>MessageToJson</code>. See the example below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">google.protobuf.json_format</span> <span class=\"kn\">import</span> <span class=\"n\">MessageToJson</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cryptowatch</span> <span class=\"k\">as</span> <span class=\"nn\">cw</span>\n\n<span class=\"c1\"># Set your API Key</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"123\"</span>\n\n<span class=\"c1\"># Subscribe to resources (https://docs.cryptowat.ch/websocket-api/data-subscriptions#resources)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">subscriptions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"markets:*:ohlc\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># What to do on each trade update</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_trades_update</span><span class=\"p\">(</span><span class=\"n\">trade_update</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        trade_update follows Cryptowatch protocol buffer format:</span>\n<span class=\"sd\">        https://github.com/cryptowatch/proto/blob/master/public/markets/market.proto</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">MessageToJson</span><span class=\"p\">(</span><span class=\"n\">trade_update</span><span class=\"p\">)</span>\n\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">on_trades_update</span> <span class=\"o\">=</span> <span class=\"n\">handle_trades_update</span>\n\n\n<span class=\"c1\"># Start receiving</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<h3>Logging</h3>\n<p>Logging can be enabled through Python's <code>logging</code> module:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">()</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">\"cryptowatch\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</pre>\n<h3>CLI</h3>\n<p>The library exposes a simple utility, named <code>cryptowatch</code>, to return last market prices.</p>\n<h4>By default it returns Kraken's BTCUSD market</h4>\n<pre><code>&gt; cryptowatch\n7425.0\n</code></pre>\n<h4>Add another Kraken market to return this market last price</h4>\n<pre><code>&gt; cryptowatch btceur\n6758.1\n</code></pre>\n<h4>You can also specify your own exchange</h4>\n<pre><code>&gt; cryptowatch binance:ethbtc\n0.020359\n</code></pre>\n<p>When the market doesn't exist a return code of <code>1</code> will be set (<code>0</code> otherwise):</p>\n<pre><code>&gt; cryptowatch binance:nosuchmarketusd\n&gt; echo $?\n1\n</code></pre>\n<h2>Testing</h2>\n<p>Unit tests are under the <a href=\"https://github.com/cryptowatch/cw-sdk-python/tree/master/tests\" rel=\"nofollow\">tests</a> folder and use <code>pytest</code>, run them all with:</p>\n<pre><code>make test\n</code></pre>\n<p>Integration tests sending real HTTP requests to the Cryptowatch API can be run with:</p>\n<pre><code>make test-http-real\n</code></pre>\n<h2>Development</h2>\n<p>Testing and developement dependencies are in the <a href=\"https://github.com/cryptowatch/cw-sdk-python/tree/master/requirements.txt\" rel=\"nofollow\">requirements.txt</a> file, install them with:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<p>The code base use the <a href=\"https://black.readthedocs.io/en/stable/\" rel=\"nofollow\">Black</a> linter, run it with:</p>\n<pre><code>make lint\n</code></pre>\n<h2>License</h2>\n<p><a href=\"https://github.com/cryptowatch/cw-sdk-python/tree/master/LICENSE\" rel=\"nofollow\">BSD-2-Clause</a></p>\n\n          </div>"}, "last_serial": 6766992, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "424d801ef80937cfdb0ac9aca1351ab5", "sha256": "1af9500df5e6506044bf287664cb5f6e1d193a38dce9ffbc23ce5bfe2793cc18"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "424d801ef80937cfdb0ac9aca1351ab5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 14254, "upload_time": "2019-12-04T09:10:01", "upload_time_iso_8601": "2019-12-04T09:10:01.519183Z", "url": "https://files.pythonhosted.org/packages/22/71/4d888c231c446a91665626ada42a17b18dd1dad2b9b7edb6e02cd2cc9784/cryptowatch_sdk-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "915ebf7e8dd0361611535bf80f2aac6b", "sha256": "a23f2d7991c3208778b7fd675125d37baa1a8b534acc3f1a448b0e39afb97e76"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "915ebf7e8dd0361611535bf80f2aac6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11451, "upload_time": "2019-12-04T09:10:04", "upload_time_iso_8601": "2019-12-04T09:10:04.581787Z", "url": "https://files.pythonhosted.org/packages/62/06/438b363d818f4c8ffbe96fb79e68d40e48881d0653335a5224501f08d92b/cryptowatch-sdk-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "0061773a57a24bd54f13652080cf0aa1", "sha256": "12105ad4237bc393827154d68e145afe40726242bb34a26dfa1203e29a601717"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "0061773a57a24bd54f13652080cf0aa1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18771, "upload_time": "2020-03-02T13:10:29", "upload_time_iso_8601": "2020-03-02T13:10:29.850429Z", "url": "https://files.pythonhosted.org/packages/02/f7/a8e80e57c744e9b2883bd256da6816c2991e89498e168921cf8686b40b42/cryptowatch_sdk-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0af6f7ac73521651a3d0538b5270da27", "sha256": "a90b56e074d0f53e98f01edc6f4b82ba630c6f2636b3c75aa6fc33110c594996"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.10.tar.gz", "has_sig": false, "md5_digest": "0af6f7ac73521651a3d0538b5270da27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 15600, "upload_time": "2020-03-02T13:10:31", "upload_time_iso_8601": "2020-03-02T13:10:31.455896Z", "url": "https://files.pythonhosted.org/packages/1f/9c/a2ae4b390f50ed828c34970edcd352e0d467eff6bf612c554557cceb0511/cryptowatch-sdk-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "2388a58546805729d704b9024e16a728", "sha256": "2e527f88b6aaf9ddf5ef52c67748fb1e5be081aa0bac1955a8ccd6c292e8b2eb"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "2388a58546805729d704b9024e16a728", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 47937, "upload_time": "2020-03-07T08:05:08", "upload_time_iso_8601": "2020-03-07T08:05:08.481644Z", "url": "https://files.pythonhosted.org/packages/47/1d/b27eba8510d915cc6f7ec592dbca42948a776e5a9e92168a8711f2d1afa6/cryptowatch_sdk-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cae4a2c06b35fac10a6c53d8fc3e5ced", "sha256": "750a85f70d9a30fe090ffb9bf6f47c2d4abb27c3a294aad2f3f1e42831caf88d"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.11.tar.gz", "has_sig": false, "md5_digest": "cae4a2c06b35fac10a6c53d8fc3e5ced", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 39387, "upload_time": "2020-03-07T08:05:16", "upload_time_iso_8601": "2020-03-07T08:05:16.827435Z", "url": "https://files.pythonhosted.org/packages/ba/61/7ccaee91677e9247fe5e4c3237d146495d7e331a9d1ac1c41e8c3fdc4c84/cryptowatch-sdk-0.0.11.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6afec6bb8e9a4fa1b080c5122fcb891b", "sha256": "fe6b884517f7171679f648c6ff9363b830c3419727c7b1524aae4ddfd1fd5211"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6afec6bb8e9a4fa1b080c5122fcb891b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 14252, "upload_time": "2019-12-04T09:30:21", "upload_time_iso_8601": "2019-12-04T09:30:21.240573Z", "url": "https://files.pythonhosted.org/packages/6d/b0/db89e01e9520cee17cc85a8b4b8cd38cac9d7f782645e5ec3e021d52f86a/cryptowatch_sdk-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5752046361dd91d2fe9ab07a7a11067", "sha256": "2ab709e1291288c39cd63672ff17935ecde1598dd2a7df35e430c53973e4e4c6"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c5752046361dd91d2fe9ab07a7a11067", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11445, "upload_time": "2019-12-04T09:30:22", "upload_time_iso_8601": "2019-12-04T09:30:22.978331Z", "url": "https://files.pythonhosted.org/packages/73/4b/b537540b892e4989fb527da55610cb879eb35d53a24059acc5464571dbe1/cryptowatch-sdk-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "e700ee0024520ac5b307786ee2ff9ba7", "sha256": "18c007b9007f14aba2f6c910c2e658cf97aa3b78fc1716aba8fe7b5dc2c9699c"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e700ee0024520ac5b307786ee2ff9ba7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 14264, "upload_time": "2019-12-04T11:44:03", "upload_time_iso_8601": "2019-12-04T11:44:03.286274Z", "url": "https://files.pythonhosted.org/packages/54/b4/1eda626a232b5e7597f8bb5551caf29610f982063c1c5bf4b0420b107e49/cryptowatch_sdk-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d0756a48dc7958b0c35bb9d4cc566b7", "sha256": "2891aab95bc4c33258be4291da6bf9afe19b8fa018d1ef6bacae6bfac3360530"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1d0756a48dc7958b0c35bb9d4cc566b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11462, "upload_time": "2019-12-04T11:44:05", "upload_time_iso_8601": "2019-12-04T11:44:05.228194Z", "url": "https://files.pythonhosted.org/packages/05/10/2c448cba95fa640bb1b89d422b254dd60a357a75351b8f2bd2d9b899867a/cryptowatch-sdk-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "3ff52a5e1bd4e601f874ca2e1a79488e", "sha256": "bf5779cd0d744e4134a7f6ef9f81c76d231a854b46b56016b0ad90db4ca956ab"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3ff52a5e1bd4e601f874ca2e1a79488e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 15027, "upload_time": "2019-12-17T16:10:33", "upload_time_iso_8601": "2019-12-17T16:10:33.923003Z", "url": "https://files.pythonhosted.org/packages/07/82/e54559b078a8bb3749062c96b2aeb13415df78356e5c5857062b863a442d/cryptowatch_sdk-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "251ebd312938aff54c73fbb03187a687", "sha256": "9f62338616108a82c5fb9e561541c4180955bd27c1d743f7f8d9f5b19ecd5ff9"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.4.tar.gz", "has_sig": false, "md5_digest": "251ebd312938aff54c73fbb03187a687", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13049, "upload_time": "2019-12-17T16:10:36", "upload_time_iso_8601": "2019-12-17T16:10:36.542761Z", "url": "https://files.pythonhosted.org/packages/d0/dc/bd0c9ccc34ad1466f0a0206bc856c45a678f4a1a4bfe1c45611bb25e8f05/cryptowatch-sdk-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "03e638d492f7774855bbb5fc7ce5fbea", "sha256": "6e27224849a4fd2a67fdc24fff2a077b3391a206150b4adf39dabd8cb878f2bb"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "03e638d492f7774855bbb5fc7ce5fbea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 15027, "upload_time": "2019-12-19T16:53:55", "upload_time_iso_8601": "2019-12-19T16:53:55.464081Z", "url": "https://files.pythonhosted.org/packages/4f/1f/de7e9a4bb840951afba36e80a47de738df618b65b180e6e855b5cab5bdec/cryptowatch_sdk-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "195a18c6bff43d399a08d312ec695276", "sha256": "afaec6902f7475bbaf01eb012cc9f084c0440c998d86b3eb37329dbde625d6af"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.5.tar.gz", "has_sig": false, "md5_digest": "195a18c6bff43d399a08d312ec695276", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13079, "upload_time": "2019-12-19T16:53:58", "upload_time_iso_8601": "2019-12-19T16:53:58.949176Z", "url": "https://files.pythonhosted.org/packages/17/64/dbd2bbd2e8d2a2e791722d1dbab98907eb034a8b894ae4d5e8f56a43168a/cryptowatch-sdk-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "c23888b0133bf7532c28e66434b62bb0", "sha256": "fd969c2c8d890977abc7202aaa61452c76d61b4d2d8869a1f4bb11c65f5a6493"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c23888b0133bf7532c28e66434b62bb0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 15026, "upload_time": "2019-12-19T17:45:08", "upload_time_iso_8601": "2019-12-19T17:45:08.338890Z", "url": "https://files.pythonhosted.org/packages/4a/8e/330faac14c16be5e17056442d36f912f55e8b596c766d08aa60cc41d2547/cryptowatch_sdk-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0aa4d812c8e41702569beb787e7155fc", "sha256": "a2335432ff7c4b69d56879d52a0e60fb613ce6209cc30d4cc0e17f1d1f89e416"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.6.tar.gz", "has_sig": false, "md5_digest": "0aa4d812c8e41702569beb787e7155fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13063, "upload_time": "2019-12-19T17:45:11", "upload_time_iso_8601": "2019-12-19T17:45:11.518783Z", "url": "https://files.pythonhosted.org/packages/98/6d/cc1e87e284f7aa8b65c79fd1c6a83429ed5ed2c3fe514c2ed11e10ed2149/cryptowatch-sdk-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "d306d27b0cbd638209c281db9d84ca2b", "sha256": "fb844f08e356daf73634cf266b6e645f7dd7ee89b4d58c2b8d33fe331230d3df"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d306d27b0cbd638209c281db9d84ca2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 15145, "upload_time": "2020-01-21T07:44:38", "upload_time_iso_8601": "2020-01-21T07:44:38.446633Z", "url": "https://files.pythonhosted.org/packages/fd/f4/bd5b6bb6ddcd7d312921280e0557b4fb691f6098846658fbd3f9e12e4564/cryptowatch_sdk-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8304dff1ea6b4712310ec7a9c4b6eb0", "sha256": "9af200d56abb6a9eedd89f8f51b5f075709d2266d61f255c3e6cc75a2d189734"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.7.tar.gz", "has_sig": false, "md5_digest": "c8304dff1ea6b4712310ec7a9c4b6eb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13125, "upload_time": "2020-01-21T07:44:40", "upload_time_iso_8601": "2020-01-21T07:44:40.559564Z", "url": "https://files.pythonhosted.org/packages/89/19/24d3285d379254ea616453a544967f839185260eb9807f6f62500996110c/cryptowatch-sdk-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "755bbfb755d7f322e7b1839ce3b98fb9", "sha256": "39922557a130fef975b110ec95b285c123f18e92f6ea61b19d542668f9dfb006"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "755bbfb755d7f322e7b1839ce3b98fb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 15148, "upload_time": "2020-01-27T07:41:38", "upload_time_iso_8601": "2020-01-27T07:41:38.909265Z", "url": "https://files.pythonhosted.org/packages/ab/70/482140c43354459debd8edb27164b70217c93845f49142b3c27f7963f82a/cryptowatch_sdk-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "777d56bac26b8d2a10cf4ae171c859c7", "sha256": "5f6ea580765275c857339b1c8582c9c16d26bf5766c6d14deded0bcbb3b70962"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.8.tar.gz", "has_sig": false, "md5_digest": "777d56bac26b8d2a10cf4ae171c859c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13138, "upload_time": "2020-01-27T07:41:40", "upload_time_iso_8601": "2020-01-27T07:41:40.717315Z", "url": "https://files.pythonhosted.org/packages/3f/6a/ede455938728e0449860babb15c5ca23451e2e5a04bb6e5be2983eecf633/cryptowatch-sdk-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "17dc07fbb434682aacbda00716936018", "sha256": "67eade110ea8f5f1f93c4508449428a7b30b5672074c45dd42da91b000b83804"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "17dc07fbb434682aacbda00716936018", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 18509, "upload_time": "2020-02-06T19:19:50", "upload_time_iso_8601": "2020-02-06T19:19:50.845334Z", "url": "https://files.pythonhosted.org/packages/49/5c/c3f77c255a54dc58056c0888458b4033578491b443c7edadadcc56ded97b/cryptowatch_sdk-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "305c71813dfbd461110db61b7777e3d7", "sha256": "3a2f4c2c78280bde5f29f564639a439a7f86bf9105cd7d3e168a03a2ca752fc1"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.9.tar.gz", "has_sig": false, "md5_digest": "305c71813dfbd461110db61b7777e3d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16250, "upload_time": "2020-02-06T19:19:55", "upload_time_iso_8601": "2020-02-06T19:19:55.431329Z", "url": "https://files.pythonhosted.org/packages/34/d0/2c705643ec6021af7e28b4ef8bb911dbf4ae3f58d8c0a2dbc0532b833f1b/cryptowatch-sdk-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2388a58546805729d704b9024e16a728", "sha256": "2e527f88b6aaf9ddf5ef52c67748fb1e5be081aa0bac1955a8ccd6c292e8b2eb"}, "downloads": -1, "filename": "cryptowatch_sdk-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "2388a58546805729d704b9024e16a728", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 47937, "upload_time": "2020-03-07T08:05:08", "upload_time_iso_8601": "2020-03-07T08:05:08.481644Z", "url": "https://files.pythonhosted.org/packages/47/1d/b27eba8510d915cc6f7ec592dbca42948a776e5a9e92168a8711f2d1afa6/cryptowatch_sdk-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cae4a2c06b35fac10a6c53d8fc3e5ced", "sha256": "750a85f70d9a30fe090ffb9bf6f47c2d4abb27c3a294aad2f3f1e42831caf88d"}, "downloads": -1, "filename": "cryptowatch-sdk-0.0.11.tar.gz", "has_sig": false, "md5_digest": "cae4a2c06b35fac10a6c53d8fc3e5ced", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 39387, "upload_time": "2020-03-07T08:05:16", "upload_time_iso_8601": "2020-03-07T08:05:16.827435Z", "url": "https://files.pythonhosted.org/packages/ba/61/7ccaee91677e9247fe5e4c3237d146495d7e331a9d1ac1c41e8c3fdc4c84/cryptowatch-sdk-0.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:57 2020"}