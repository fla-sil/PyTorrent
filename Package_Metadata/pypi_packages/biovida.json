{"info": {"author": "Tariq A. Hassan", "author_email": "laterallattice@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "BioVida is a library designed to make it easy to gain access to existing\ndata sets of biomedical images as well as build brand new, custom-made\nones.\n\nIt is hoped that by automating the tedious data munging that is\ntypically involved in this process, more people will become interested\nin applying machine learning to biomedical images and, in turn,\nadvancing insights into human disease.\n\nIn a nod to recursion, BioVida tries to accomplish some of this\nautomation with machine learning itself, using tools like convolutional\nneural networks.\n\nInstallation\n------------\n\nPython Package Index:\n\n.. code:: bash\n\n    $ pip install biovida\n\nLatest Build:\n\n.. code:: bash\n\n    $ pip install git+git://github.com/TariqAHassan/BioVida@master\n\nRequires Python 3.4+\n\nImages: Stable\n--------------\n\nIn just a few lines of code, you can gain access to biomedical databases\nwhich store tens of millions of images.\n\n*Please note that you are bound to adhere to the copyright and other\nusage restrictions under which this data is provided to you by its\ncreators.*\n\nOpen-i BioMedical Image Search Engine\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n\n    # 1. Import the Interface for the NIH's Open-i API.\n    from biovida.images import OpeniInterface\n\n    # 2. Create an Instance of the Tool\n    opi = OpeniInterface()\n\n    # 3. Perform a search for x-rays and cts of lung cancer\n    opi.search(query='lung cancer', image_type=['x_ray', 'ct'])  # Results Found: 9,220.\n\n    # 4. Pull the data\n    search_df = opi.pull()\n\nCancer Imaging Archive\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    # 1. Import the interface for the Cancer Imaging Archive\n    from biovida.images import CancerImageInterface\n\n    # 2. Create an Instance of the Tool\n    cii = CancerImageInterface(YOUR_API_KEY_HERE)\n\n    # 3. Perform a search\n    cii.search(cancer_type='esophageal')\n\n    # 4. Pull the data\n    cdf = cii.pull()\n\nBoth ``CancerImageInterface`` and ``OpeniInterface`` cache images for\nlater use. When data is 'pulled', a ``records_db`` is generated, which\nis a dataframe of all text data associated with the images. They are\nprovided as class attributes, e.g., ``cii.records_db``. While\n``records_db`` only stores data from the most recent data pull,\n``cache_records_db`` dataframes provides an account of all image data\ncurrently cached.\n\nSplitting Images\n^^^^^^^^^^^^^^^^\n\nBioVida can divide cached images into train/validation/test.\n\n.. code:: python\n\n    from biovida.images import image_divvy\n\n    # 1. Define a rule to 'divvy' up images in the cache.\n    def my_divvy_rule(row):\n        if row['image_modality_major'] == 'x_ray':\n            return 'x_ray'\n        elif row['image_modality_major'] == 'ct':\n            return 'ct'\n\n    # 2. Define Proportions and Divide Data\n    tt = image_divvy(opi, my_divvy_rule, action='ndarray', train_val_test_dict={'train': 0.8, 'test': 0.2})\n\n    # 3. The resultant ndarrays can be unpacked as follows:\n    train_ct, train_xray = tt['train']['ct'], tt['train']['x_ray']\n    test_ct, test_xray = tt['test']['ct'], tt['test']['x_ray']\n\nImages: Experimental\n--------------------\n\nAutomated Image Data Cleaning\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUnfortunately, the data pulled from Open-i above is likely to contain a\nlarge number of images unrelated to the search query and/or are\nunsuitable for machine learning.\n\nThe *experimental* ``OpeniImageProcessing`` class can be used to\ncompletely automate this data cleaning process, which is partly powered\nby a Convolutional Neural Network.\n\n.. code:: python\n\n    # 1. Import Image Processing Tools\n    from biovida.images import OpeniImageProcessing\n\n    # 2. Instantiate the Tool using the OpeniInterface Instance\n    ip = OpeniImageProcessing(opi)\n     \n    # 3. Analyze the Images\n    idf = ip.auto()\n\n    # 4. Use the Analysis to Clean Images\n    ip.clean_image_dataframe()\n\nIt is easy to split these images into training and test sets.\n\n.. code:: python\n\n    from biovida.images import image_divvy\n\n    def my_divvy_rule(row):\n        if row['image_modality_major'] == 'x_ray':\n            return 'x_ray'\n        elif row['image_modality_major'] == 'ct':\n            return 'ct'\n\n    tt = image_divvy(ip, my_divvy_rule, action='ndarray', train_val_test_dict={'train': 0.8, 'test': 0.2})\n    # These ndarrays can be unpack as shown above.\n\nGenomic Data\n------------\n\nWhile primarily focused on images, BioVida also provides a simple\ninterface for obtaining related information, such genomic data.\n\n.. code:: python\n\n    # 1. Import the Interface for DisGeNET.org\n    from biovida.genomics import DisgenetInterface\n\n    # 2. Create an Instance of the Tool\n    dna = DisgenetInterface()\n\n    # 3. Pull a Database\n    gdf = dna.pull('curated')\n\nDiagnostic Data\n---------------\n\nBioVida also makes it easy to obtain diagnostics data.\n\nInformation on disease definitions, families and synonyms:\n\n.. code:: python\n\n    # 1. Import the Interface for DiseaseOntology.org\n    from biovida.diagnostics import DiseaseOntInterface\n\n    # 2. Create an Instance of the Tool\n    doi = DiseaseOntInterface()\n\n    # 3. Pull the Database\n    ddf = doi.pull()\n\nInformation on symptoms associated with diseases:\n\n.. code:: python\n\n    # 1. Import the Interface for Disease-Symptoms Information\n    from biovida.diagnostics import DiseaseSymptomsInterface\n\n    # 2. Create an Instance of the Tool\n    dsi = DiseaseSymptomsInterface()\n\n    # 3. Pull the Database\n    dsdf = dsi.pull()\n\nUnifying Information\n--------------------\n\nThe ``unify_against_images`` function integrates image data information\nagainst ``DisgenetInterface``, ``DiseaseOntInterface`` and\n``DiseaseSymptomsInterface``.\n\n.. code:: python\n\n    from biovida.unification import unify_against_images\n\n    unify_against_images(interfaces=[cii, opi], db_to_extract='cache_records_db')\n\nLeft side of DataFrame: Image Data Alone\n\n+----+----------+--------+-----------+------------------------+-----+-------+------------+-----+\n|    | article\\ | image\\ | image\\_ca | modality\\_best\\_guess  | age | sex   | disease    | ... |\n|    | _type    | _id    | ption     |                        |     |       |            |     |\n+====+==========+========+===========+========================+=====+=======+============+=====+\n| 0  | case\\_re | 1      | ...       | Magnetic Resonance     | 73  | male  | fibroma    | ... |\n|    | port     |        |           | Imaging (MRI)          |     |       |            |     |\n+----+----------+--------+-----------+------------------------+-----+-------+------------+-----+\n| 1  | case\\_re | 2      | ...       | Magnetic Resonance     | 73  | male  | fibroma    | ... |\n|    | port     |        |           | Imaging (MRI)          |     |       |            |     |\n+----+----------+--------+-----------+------------------------+-----+-------+------------+-----+\n| 2  | case\\_re | 1      | ...       | Computed Tomography    | 45  | femal | bile duct  | ... |\n|    | port     |        |           | (CT): angiography      |     | e     | cancer     |     |\n+----+----------+--------+-----------+------------------------+-----+-------+------------+-----+\n\nRight side of DataFrame: Added Information\n\n+----------------+-------------+------------+---------------+------------+--------------+\n| disease\\_famil | disease\\_sy | disease\\_d | known\\_associ | mentioned\\ | known\\_assoc |\n| y              | nonym       | efinition  | ated\\_symptom | _symptoms  | iated\\_genes |\n|                |             |            | s             |            |              |\n+================+=============+============+===============+============+==============+\n| (cell type     | nan         | nan        | (abdominal    | (pain,)    | ((ANTXR2,    |\n| benign         |             |            | pain,...)     |            | 0.12), ...)  |\n| neoplasm,)     |             |            |               |            |              |\n+----------------+-------------+------------+---------------+------------+--------------+\n| (cell type     | nan         | nan        | (abdominal    | (pain,)    | ((ANTXR2,    |\n| benign         |             |            | pain,...)     |            | 0.12), ...)  |\n| neoplasm,)     |             |            |               |            |              |\n+----------------+-------------+------------+---------------+------------+--------------+\n| (biliary tract | (bile duct  | A biliary  | (abdominal    | (colic,)   | nan          |\n| cancer,)       | tumor,...)  | tract...   | obesity,..)   |            |              |\n+----------------+-------------+------------+---------------+------------+--------------+\n\n--------------\n\nDocumentation\n-------------\n\n-  `Getting\n   Started <https://tariqahassan.github.io/BioVida/GettingStarted.html>`__\n-  `Tutorials <http://nbviewer.jupyter.org/github/tariqahassan/BioVida/tree/master/tutorials/>`__\n-  `API\n   Documentation <https://tariqahassan.github.io/BioVida/API.html>`__\n\nContributing\n------------\n\nFor more information on how to contribute, see the\n`contributing <https://github.com/TariqAHassan/BioVida/blob/master/CONTRIBUTING.md>`__\ndocument.\n\nBug reports and feature requests are always welcome and can be provided\nthrough the `Issues <https://github.com/TariqAHassan/BioVida/issues>`__\npage.\n\nResources\n---------\n\nThe\n`resources <https://github.com/TariqAHassan/BioVida/blob/master/RESOURCES.md>`__\ndocument provides an account of all data sources and scholarly work used\nby BioVida.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/TariqAHassan/BioVida/archive/v0.1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TariqAHassan/BioVida.git", "keywords": "machine-learning,biomedical-informatics,data-science,bioinformatics,imaging-informatics", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "biovida", "package_url": "https://pypi.org/project/biovida/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/biovida/", "project_urls": {"Download": "https://github.com/TariqAHassan/BioVida/archive/v0.1.1.tar.gz", "Homepage": "https://github.com/TariqAHassan/BioVida.git"}, "release_url": "https://pypi.org/project/biovida/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Automated BioMedical Information Curation for Machine Learning Applications.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>BioVida is a library designed to make it easy to gain access to existing\ndata sets of biomedical images as well as build brand new, custom-made\nones.</p>\n<p>It is hoped that by automating the tedious data munging that is\ntypically involved in this process, more people will become interested\nin applying machine learning to biomedical images and, in turn,\nadvancing insights into human disease.</p>\n<p>In a nod to recursion, BioVida tries to accomplish some of this\nautomation with machine learning itself, using tools like convolutional\nneural networks.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Python Package Index:</p>\n<pre>$ pip install biovida\n</pre>\n<p>Latest Build:</p>\n<pre>$ pip install git+git://github.com/TariqAHassan/BioVida@master\n</pre>\n<p>Requires Python 3.4+</p>\n</div>\n<div id=\"images-stable\">\n<h2>Images: Stable</h2>\n<p>In just a few lines of code, you can gain access to biomedical databases\nwhich store tens of millions of images.</p>\n<p><em>Please note that you are bound to adhere to the copyright and other\nusage restrictions under which this data is provided to you by its\ncreators.</em></p>\n<div id=\"open-i-biomedical-image-search-engine\">\n<h3>Open-i BioMedical Image Search Engine</h3>\n<pre><span class=\"c1\"># 1. Import the Interface for the NIH's Open-i API.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">biovida.images</span> <span class=\"kn\">import</span> <span class=\"n\">OpeniInterface</span>\n\n<span class=\"c1\"># 2. Create an Instance of the Tool</span>\n<span class=\"n\">opi</span> <span class=\"o\">=</span> <span class=\"n\">OpeniInterface</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 3. Perform a search for x-rays and cts of lung cancer</span>\n<span class=\"n\">opi</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'lung cancer'</span><span class=\"p\">,</span> <span class=\"n\">image_type</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'x_ray'</span><span class=\"p\">,</span> <span class=\"s1\">'ct'</span><span class=\"p\">])</span>  <span class=\"c1\"># Results Found: 9,220.</span>\n\n<span class=\"c1\"># 4. Pull the data</span>\n<span class=\"n\">search_df</span> <span class=\"o\">=</span> <span class=\"n\">opi</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"cancer-imaging-archive\">\n<h3>Cancer Imaging Archive</h3>\n<pre><span class=\"c1\"># 1. Import the interface for the Cancer Imaging Archive</span>\n<span class=\"kn\">from</span> <span class=\"nn\">biovida.images</span> <span class=\"kn\">import</span> <span class=\"n\">CancerImageInterface</span>\n\n<span class=\"c1\"># 2. Create an Instance of the Tool</span>\n<span class=\"n\">cii</span> <span class=\"o\">=</span> <span class=\"n\">CancerImageInterface</span><span class=\"p\">(</span><span class=\"n\">YOUR_API_KEY_HERE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 3. Perform a search</span>\n<span class=\"n\">cii</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">cancer_type</span><span class=\"o\">=</span><span class=\"s1\">'esophageal'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 4. Pull the data</span>\n<span class=\"n\">cdf</span> <span class=\"o\">=</span> <span class=\"n\">cii</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">()</span>\n</pre>\n<p>Both <tt>CancerImageInterface</tt> and <tt>OpeniInterface</tt> cache images for\nlater use. When data is \u2018pulled\u2019, a <tt>records_db</tt> is generated, which\nis a dataframe of all text data associated with the images. They are\nprovided as class attributes, e.g., <tt>cii.records_db</tt>. While\n<tt>records_db</tt> only stores data from the most recent data pull,\n<tt>cache_records_db</tt> dataframes provides an account of all image data\ncurrently cached.</p>\n</div>\n<div id=\"splitting-images\">\n<h3>Splitting Images</h3>\n<p>BioVida can divide cached images into train/validation/test.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">biovida.images</span> <span class=\"kn\">import</span> <span class=\"n\">image_divvy</span>\n\n<span class=\"c1\"># 1. Define a rule to 'divvy' up images in the cache.</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_divvy_rule</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'image_modality_major'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'x_ray'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'x_ray'</span>\n    <span class=\"k\">elif</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'image_modality_major'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'ct'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'ct'</span>\n\n<span class=\"c1\"># 2. Define Proportions and Divide Data</span>\n<span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"n\">image_divvy</span><span class=\"p\">(</span><span class=\"n\">opi</span><span class=\"p\">,</span> <span class=\"n\">my_divvy_rule</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'ndarray'</span><span class=\"p\">,</span> <span class=\"n\">train_val_test_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'train'</span><span class=\"p\">:</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"s1\">'test'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># 3. The resultant ndarrays can be unpacked as follows:</span>\n<span class=\"n\">train_ct</span><span class=\"p\">,</span> <span class=\"n\">train_xray</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"s1\">'train'</span><span class=\"p\">][</span><span class=\"s1\">'ct'</span><span class=\"p\">],</span> <span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"s1\">'train'</span><span class=\"p\">][</span><span class=\"s1\">'x_ray'</span><span class=\"p\">]</span>\n<span class=\"n\">test_ct</span><span class=\"p\">,</span> <span class=\"n\">test_xray</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"s1\">'test'</span><span class=\"p\">][</span><span class=\"s1\">'ct'</span><span class=\"p\">],</span> <span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"s1\">'test'</span><span class=\"p\">][</span><span class=\"s1\">'x_ray'</span><span class=\"p\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"images-experimental\">\n<h2>Images: Experimental</h2>\n<h2 id=\"automated-image-data-cleaning\"><span class=\"section-subtitle\">Automated Image Data Cleaning</span></h2>\n<p>Unfortunately, the data pulled from Open-i above is likely to contain a\nlarge number of images unrelated to the search query and/or are\nunsuitable for machine learning.</p>\n<p>The <em>experimental</em> <tt>OpeniImageProcessing</tt> class can be used to\ncompletely automate this data cleaning process, which is partly powered\nby a Convolutional Neural Network.</p>\n<pre><span class=\"c1\"># 1. Import Image Processing Tools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">biovida.images</span> <span class=\"kn\">import</span> <span class=\"n\">OpeniImageProcessing</span>\n\n<span class=\"c1\"># 2. Instantiate the Tool using the OpeniInterface Instance</span>\n<span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"n\">OpeniImageProcessing</span><span class=\"p\">(</span><span class=\"n\">opi</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 3. Analyze the Images</span>\n<span class=\"n\">idf</span> <span class=\"o\">=</span> <span class=\"n\">ip</span><span class=\"o\">.</span><span class=\"n\">auto</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 4. Use the Analysis to Clean Images</span>\n<span class=\"n\">ip</span><span class=\"o\">.</span><span class=\"n\">clean_image_dataframe</span><span class=\"p\">()</span>\n</pre>\n<p>It is easy to split these images into training and test sets.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">biovida.images</span> <span class=\"kn\">import</span> <span class=\"n\">image_divvy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_divvy_rule</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'image_modality_major'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'x_ray'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'x_ray'</span>\n    <span class=\"k\">elif</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'image_modality_major'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'ct'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'ct'</span>\n\n<span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"n\">image_divvy</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">my_divvy_rule</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'ndarray'</span><span class=\"p\">,</span> <span class=\"n\">train_val_test_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'train'</span><span class=\"p\">:</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"s1\">'test'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">})</span>\n<span class=\"c1\"># These ndarrays can be unpack as shown above.</span>\n</pre>\n</div>\n<div id=\"genomic-data\">\n<h2>Genomic Data</h2>\n<p>While primarily focused on images, BioVida also provides a simple\ninterface for obtaining related information, such genomic data.</p>\n<pre><span class=\"c1\"># 1. Import the Interface for DisGeNET.org</span>\n<span class=\"kn\">from</span> <span class=\"nn\">biovida.genomics</span> <span class=\"kn\">import</span> <span class=\"n\">DisgenetInterface</span>\n\n<span class=\"c1\"># 2. Create an Instance of the Tool</span>\n<span class=\"n\">dna</span> <span class=\"o\">=</span> <span class=\"n\">DisgenetInterface</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 3. Pull a Database</span>\n<span class=\"n\">gdf</span> <span class=\"o\">=</span> <span class=\"n\">dna</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">(</span><span class=\"s1\">'curated'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"diagnostic-data\">\n<h2>Diagnostic Data</h2>\n<p>BioVida also makes it easy to obtain diagnostics data.</p>\n<p>Information on disease definitions, families and synonyms:</p>\n<pre><span class=\"c1\"># 1. Import the Interface for DiseaseOntology.org</span>\n<span class=\"kn\">from</span> <span class=\"nn\">biovida.diagnostics</span> <span class=\"kn\">import</span> <span class=\"n\">DiseaseOntInterface</span>\n\n<span class=\"c1\"># 2. Create an Instance of the Tool</span>\n<span class=\"n\">doi</span> <span class=\"o\">=</span> <span class=\"n\">DiseaseOntInterface</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 3. Pull the Database</span>\n<span class=\"n\">ddf</span> <span class=\"o\">=</span> <span class=\"n\">doi</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">()</span>\n</pre>\n<p>Information on symptoms associated with diseases:</p>\n<pre><span class=\"c1\"># 1. Import the Interface for Disease-Symptoms Information</span>\n<span class=\"kn\">from</span> <span class=\"nn\">biovida.diagnostics</span> <span class=\"kn\">import</span> <span class=\"n\">DiseaseSymptomsInterface</span>\n\n<span class=\"c1\"># 2. Create an Instance of the Tool</span>\n<span class=\"n\">dsi</span> <span class=\"o\">=</span> <span class=\"n\">DiseaseSymptomsInterface</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 3. Pull the Database</span>\n<span class=\"n\">dsdf</span> <span class=\"o\">=</span> <span class=\"n\">dsi</span><span class=\"o\">.</span><span class=\"n\">pull</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"unifying-information\">\n<h2>Unifying Information</h2>\n<p>The <tt>unify_against_images</tt> function integrates image data information\nagainst <tt>DisgenetInterface</tt>, <tt>DiseaseOntInterface</tt> and\n<tt>DiseaseSymptomsInterface</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">biovida.unification</span> <span class=\"kn\">import</span> <span class=\"n\">unify_against_images</span>\n\n<span class=\"n\">unify_against_images</span><span class=\"p\">(</span><span class=\"n\">interfaces</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">cii</span><span class=\"p\">,</span> <span class=\"n\">opi</span><span class=\"p\">],</span> <span class=\"n\">db_to_extract</span><span class=\"o\">=</span><span class=\"s1\">'cache_records_db'</span><span class=\"p\">)</span>\n</pre>\n<p>Left side of DataFrame: Image Data Alone</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>\u00a0</th>\n<th>article_type</th>\n<th>image_id</th>\n<th>image_ca\nption</th>\n<th>modality_best_guess</th>\n<th>age</th>\n<th>sex</th>\n<th>disease</th>\n<th>\u2026</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>0</td>\n<td>case_re\nport</td>\n<td>1</td>\n<td>\u2026</td>\n<td>Magnetic Resonance\nImaging (MRI)</td>\n<td>73</td>\n<td>male</td>\n<td>fibroma</td>\n<td>\u2026</td>\n</tr>\n<tr><td>1</td>\n<td>case_re\nport</td>\n<td>2</td>\n<td>\u2026</td>\n<td>Magnetic Resonance\nImaging (MRI)</td>\n<td>73</td>\n<td>male</td>\n<td>fibroma</td>\n<td>\u2026</td>\n</tr>\n<tr><td>2</td>\n<td>case_re\nport</td>\n<td>1</td>\n<td>\u2026</td>\n<td>Computed Tomography\n(CT): angiography</td>\n<td>45</td>\n<td>femal\ne</td>\n<td>bile duct\ncancer</td>\n<td>\u2026</td>\n</tr>\n</tbody>\n</table>\n<p>Right side of DataFrame: Added Information</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>disease_famil\ny</th>\n<th>disease_sy\nnonym</th>\n<th>disease_d\nefinition</th>\n<th>known_associ\nated_symptom\ns</th>\n<th>mentioned_symptoms</th>\n<th>known_assoc\niated_genes</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>(cell type\nbenign\nneoplasm,)</td>\n<td>nan</td>\n<td>nan</td>\n<td>(abdominal\npain,\u2026)</td>\n<td>(pain,)</td>\n<td>((ANTXR2,\n0.12), \u2026)</td>\n</tr>\n<tr><td>(cell type\nbenign\nneoplasm,)</td>\n<td>nan</td>\n<td>nan</td>\n<td>(abdominal\npain,\u2026)</td>\n<td>(pain,)</td>\n<td>((ANTXR2,\n0.12), \u2026)</td>\n</tr>\n<tr><td>(biliary tract\ncancer,)</td>\n<td>(bile duct\ntumor,\u2026)</td>\n<td>A biliary\ntract\u2026</td>\n<td>(abdominal\nobesity,..)</td>\n<td>(colic,)</td>\n<td>nan</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr class=\"docutils\">\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<ul>\n<li><a href=\"https://tariqahassan.github.io/BioVida/GettingStarted.html\" rel=\"nofollow\">Getting\nStarted</a></li>\n<li><a href=\"http://nbviewer.jupyter.org/github/tariqahassan/BioVida/tree/master/tutorials/\" rel=\"nofollow\">Tutorials</a></li>\n<li><a href=\"https://tariqahassan.github.io/BioVida/API.html\" rel=\"nofollow\">API\nDocumentation</a></li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>For more information on how to contribute, see the\n<a href=\"https://github.com/TariqAHassan/BioVida/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">contributing</a>\ndocument.</p>\n<p>Bug reports and feature requests are always welcome and can be provided\nthrough the <a href=\"https://github.com/TariqAHassan/BioVida/issues\" rel=\"nofollow\">Issues</a>\npage.</p>\n</div>\n<div id=\"resources\">\n<h2>Resources</h2>\n<p>The\n<a href=\"https://github.com/TariqAHassan/BioVida/blob/master/RESOURCES.md\" rel=\"nofollow\">resources</a>\ndocument provides an account of all data sources and scholarly work used\nby BioVida.</p>\n</div>\n\n          </div>"}, "last_serial": 2770858, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "77e6a655aa5b5811d2d55fba41b71113", "sha256": "9e09fbda396953eb31b316223545d37d38b7a3eb0a128d17658b19c8ca7aa13d"}, "downloads": -1, "filename": "biovida-0.1.1.tar.gz", "has_sig": false, "md5_digest": "77e6a655aa5b5811d2d55fba41b71113", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125851, "upload_time": "2017-04-10T21:00:57", "upload_time_iso_8601": "2017-04-10T21:00:57.644296Z", "url": "https://files.pythonhosted.org/packages/12/26/f772446462de5b631e0890a99614824cb4d0f30a9d7910a8ab9b769715fb/biovida-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "77e6a655aa5b5811d2d55fba41b71113", "sha256": "9e09fbda396953eb31b316223545d37d38b7a3eb0a128d17658b19c8ca7aa13d"}, "downloads": -1, "filename": "biovida-0.1.1.tar.gz", "has_sig": false, "md5_digest": "77e6a655aa5b5811d2d55fba41b71113", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125851, "upload_time": "2017-04-10T21:00:57", "upload_time_iso_8601": "2017-04-10T21:00:57.644296Z", "url": "https://files.pythonhosted.org/packages/12/26/f772446462de5b631e0890a99614824cb4d0f30a9d7910a8ab9b769715fb/biovida-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:22 2020"}