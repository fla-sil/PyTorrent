{"info": {"author": "Philip J Grabner, Canary Health Inc", "author_email": "oss@canary.md", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "License :: Public Domain", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development"], "description": "=======================\nPython LESSCSS Compiler\n=======================\n\nThe `lessc` Python package compiles content in LESS syntax into CSS by\nfirst preprocessing it and then invoking the nodejs `lessc` program to\nactually compile it. The preprocessing resolves imports which allows\nthe LESS content to come from anywhere, including the filesystem,\nzipped EGG files, databases, etc. This solves one of the greatest\nlimitations of the nodejs lessc program which requires all of the LESS\ndependencies to be actual files and imports to be non-absolute.\n\nIt is possible, but *quite* improbable, that this package turns into a\npure-Python implementation of a LESS compiler.\n\nFor more information on LESS, please see http://lesscss.org/.\n\n\nProject\n=======\n\n* Homepage: https://github.com/canaryhealth/lessc\n* Bugs: https://github.com/canaryhealth/lessc/issues\n\n\nInstallation\n============\n\n.. code:: bash\n\n  $ npm install less\n  $ export PATH=\"`pwd`/node_modules/.bin:$PATH\"\n  $ pip install lessc\n\n\nUsage\n=====\n\n.. code:: python\n\n  import lessc\n\n  # compile a less asset in the \"mypackage\" python module:\n  css = lessc.compile_asset('mypackage:path/to/style.less')\n\n  # compile a less file on the filesystem\n  css = lessc.compile_file('../path/to/style.less')\n\n  # compile a less file-like object\n  # (if there are any relative imports, specifying `base` is necessary)\n  css = lessc.compile_file(open('../path/to/style.less'))\n\n  # compile a less string\n  # (if there are any relative imports, specifying `base` is necessary)\n\n  less = '''\n    @import \"mypackage:path/to/style.less\";\n    // ...other less statements...\n  '''\n\n  css = lessc.compile(less)\n\n\nFor more import resolution control, you can specify a custom URI\nresolver (which resolves a relative URI to an absolute URI) and a\ncustom URI loader (which loads an absolute URI), using the `resolver`\nand `loader` keywords to any compile* function:\n\n.. code:: python\n\n  import lessc\n\n  def resolver(uri, base=None):\n    '''\n    Returns the absolute URI given a base URI and a potentially\n    absolute or relative URI. Note that `base` may be ``None`` when\n    the initial URI is being resolved (depending on the Compiler\n    configuration).\n    '''\n    # calculate the absolute URI...\n    return absolute_uri\n\n  def loader(uri):\n    '''\n    Returns a file-like object that will return the content of\n    the specified URI.\n    '''\n    # fetch the object defined by `uri`\n    return file_like_object\n\n  css = lessc.compile_asset(uri, resolver=resolver, loader=loader)\n\n\nOr you can create a custom compiler and set it as the default compiler:\n\n.. code:: python\n\n  import lessc\n\n  compiler = lessc.Compiler(resolver=my_custom_resolver, loader=my_custom_loader)\n  lessc.set_default_compiler(compiler)\n\n  # this will now use `my_custom_resolver` and `my_custom_loader`\n  # to compile asset `uri`\n  css = lessc.compile_asset(uri)\n\n\nLimitations\n===========\n\nCurrently, there exist the following restrictions in what kind of\nLESS syntax is used:\n\n* Recursive imports are not supported and will be silently ignored.\n\n* Only the following import keywords are explicitly supported:\n\n  * ``less``\n  * ``css``\n  * ``once``\n  * ``optional``\n\n  The keywords ``reference``, ``inline``, and ``multiple`` are NOT\n  supported. Any other keywords may or may not be supported (since\n  only the above keywords were documented as of this writing,\n  2015/06/26).\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/canaryhealth/lessc", "keywords": "less css compiler", "license": "MIT (http://opensource.org/licenses/MIT)", "maintainer": "", "maintainer_email": "", "name": "lessc", "package_url": "https://pypi.org/project/lessc/", "platform": "", "project_url": "https://pypi.org/project/lessc/", "project_urls": {"Homepage": "http://github.com/canaryhealth/lessc"}, "release_url": "https://pypi.org/project/lessc/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "A Python less compiler", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The <cite>lessc</cite> Python package compiles content in LESS syntax into CSS by\nfirst preprocessing it and then invoking the nodejs <cite>lessc</cite> program to\nactually compile it. The preprocessing resolves imports which allows\nthe LESS content to come from anywhere, including the filesystem,\nzipped EGG files, databases, etc. This solves one of the greatest\nlimitations of the nodejs lessc program which requires all of the LESS\ndependencies to be actual files and imports to be non-absolute.</p>\n<p>It is possible, but <em>quite</em> improbable, that this package turns into a\npure-Python implementation of a LESS compiler.</p>\n<p>For more information on LESS, please see <a href=\"http://lesscss.org/\" rel=\"nofollow\">http://lesscss.org/</a>.</p>\n<div id=\"project\">\n<h2>Project</h2>\n<ul>\n<li>Homepage: <a href=\"https://github.com/canaryhealth/lessc\" rel=\"nofollow\">https://github.com/canaryhealth/lessc</a></li>\n<li>Bugs: <a href=\"https://github.com/canaryhealth/lessc/issues\" rel=\"nofollow\">https://github.com/canaryhealth/lessc/issues</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ npm install less\n$ <span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"`pwd`/node_modules/.bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n$ pip install lessc\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">lessc</span>\n\n<span class=\"c1\"># compile a less asset in the \"mypackage\" python module:</span>\n<span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"n\">lessc</span><span class=\"o\">.</span><span class=\"n\">compile_asset</span><span class=\"p\">(</span><span class=\"s1\">'mypackage:path/to/style.less'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># compile a less file on the filesystem</span>\n<span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"n\">lessc</span><span class=\"o\">.</span><span class=\"n\">compile_file</span><span class=\"p\">(</span><span class=\"s1\">'../path/to/style.less'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># compile a less file-like object</span>\n<span class=\"c1\"># (if there are any relative imports, specifying `base` is necessary)</span>\n<span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"n\">lessc</span><span class=\"o\">.</span><span class=\"n\">compile_file</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'../path/to/style.less'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># compile a less string</span>\n<span class=\"c1\"># (if there are any relative imports, specifying `base` is necessary)</span>\n\n<span class=\"n\">less</span> <span class=\"o\">=</span> <span class=\"s1\">'''\n  @import \"mypackage:path/to/style.less\";\n  // ...other less statements...\n'''</span>\n\n<span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"n\">lessc</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">less</span><span class=\"p\">)</span>\n</pre>\n<p>For more import resolution control, you can specify a custom URI\nresolver (which resolves a relative URI to an absolute URI) and a\ncustom URI loader (which loads an absolute URI), using the <cite>resolver</cite>\nand <cite>loader</cite> keywords to any compile* function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">lessc</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">resolver</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n  <span class=\"sd\">'''\n  Returns the absolute URI given a base URI and a potentially\n  absolute or relative URI. Note that `base` may be ``None`` when\n  the initial URI is being resolved (depending on the Compiler\n  configuration).\n  '''</span>\n  <span class=\"c1\"># calculate the absolute URI...</span>\n  <span class=\"k\">return</span> <span class=\"n\">absolute_uri</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loader</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">):</span>\n  <span class=\"sd\">'''\n  Returns a file-like object that will return the content of\n  the specified URI.\n  '''</span>\n  <span class=\"c1\"># fetch the object defined by `uri`</span>\n  <span class=\"k\">return</span> <span class=\"n\">file_like_object</span>\n\n<span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"n\">lessc</span><span class=\"o\">.</span><span class=\"n\">compile_asset</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">resolver</span><span class=\"o\">=</span><span class=\"n\">resolver</span><span class=\"p\">,</span> <span class=\"n\">loader</span><span class=\"o\">=</span><span class=\"n\">loader</span><span class=\"p\">)</span>\n</pre>\n<p>Or you can create a custom compiler and set it as the default compiler:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">lessc</span>\n\n<span class=\"n\">compiler</span> <span class=\"o\">=</span> <span class=\"n\">lessc</span><span class=\"o\">.</span><span class=\"n\">Compiler</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">=</span><span class=\"n\">my_custom_resolver</span><span class=\"p\">,</span> <span class=\"n\">loader</span><span class=\"o\">=</span><span class=\"n\">my_custom_loader</span><span class=\"p\">)</span>\n<span class=\"n\">lessc</span><span class=\"o\">.</span><span class=\"n\">set_default_compiler</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this will now use `my_custom_resolver` and `my_custom_loader`</span>\n<span class=\"c1\"># to compile asset `uri`</span>\n<span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"n\">lessc</span><span class=\"o\">.</span><span class=\"n\">compile_asset</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>Currently, there exist the following restrictions in what kind of\nLESS syntax is used:</p>\n<ul>\n<li><p>Recursive imports are not supported and will be silently ignored.</p>\n</li>\n<li><p>Only the following import keywords are explicitly supported:</p>\n<ul>\n<li><tt>less</tt></li>\n<li><tt>css</tt></li>\n<li><tt>once</tt></li>\n<li><tt>optional</tt></li>\n</ul>\n<p>The keywords <tt>reference</tt>, <tt>inline</tt>, and <tt>multiple</tt> are NOT\nsupported. Any other keywords may or may not be supported (since\nonly the above keywords were documented as of this writing,\n2015/06/26).</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5497887, "releases": {"0.1.0": [], "0.1.2": [{"comment_text": "", "digests": {"md5": "962537ebfeb7840a4c5ccc2ca58ba9d6", "sha256": "6f9adcc61d6a1af978b16ebfb54c680d95a136aaa3da9af73d48c249a0a1fb6a"}, "downloads": -1, "filename": "lessc-0.1.2.tar.gz", "has_sig": false, "md5_digest": "962537ebfeb7840a4c5ccc2ca58ba9d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8153, "upload_time": "2016-09-20T16:19:26", "upload_time_iso_8601": "2016-09-20T16:19:26.388695Z", "url": "https://files.pythonhosted.org/packages/cf/69/83cdb310cd32f7dc9ccd81d609c3551cf1884013b96318950a425a0a5ea9/lessc-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c8b8194e74b9900979b01754c152de2a", "sha256": "97a12f5f04731c9e77b5e14106ae07a77409081c901000fbec88e4a0a2e6de82"}, "downloads": -1, "filename": "lessc-0.1.3.tar.gz", "has_sig": false, "md5_digest": "c8b8194e74b9900979b01754c152de2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8347, "upload_time": "2019-07-07T20:02:24", "upload_time_iso_8601": "2019-07-07T20:02:24.959219Z", "url": "https://files.pythonhosted.org/packages/28/d3/018ea21e5438b7b461d475a8df1cea1755608e731a1c55ebb351d8531629/lessc-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8b8194e74b9900979b01754c152de2a", "sha256": "97a12f5f04731c9e77b5e14106ae07a77409081c901000fbec88e4a0a2e6de82"}, "downloads": -1, "filename": "lessc-0.1.3.tar.gz", "has_sig": false, "md5_digest": "c8b8194e74b9900979b01754c152de2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8347, "upload_time": "2019-07-07T20:02:24", "upload_time_iso_8601": "2019-07-07T20:02:24.959219Z", "url": "https://files.pythonhosted.org/packages/28/d3/018ea21e5438b7b461d475a8df1cea1755608e731a1c55ebb351d8531629/lessc-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:56 2020"}