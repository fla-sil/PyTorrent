{"info": {"author": "lungdart", "author_email": "dev@lungdart.net", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: System :: Networking"], "description": "\n# Packeteer: The packet serializer\n![Travis (.com)](https://img.shields.io/travis/com/lungdart/packeteer.svg)\n![Coveralls github](https://img.shields.io/coveralls/github/lungdart/packeteer.svg)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/packeteer.svg)\n![GitHub](https://img.shields.io/github/license/lungdart/packeteer.svg)\n\n**Packeteer** is a light-weight packet serializer capable of translating between raw bytes and custom packet objects; Objects which are easier to understand, display, and work with\n\n```python\nimport socket\nfrom packeteer import packets, fields\n\nHOST = '127.0.0.1'\nPORT = '1234'\n\nclass Request(packets.BigEndian):\n    \"\"\" Request packet \"\"\"\n    fields = [\n        fields.UInt8('type'),\n        fields.UInt8('size'),\n        fields.Raw('data', size='size')\n    ]\n\nclass Response(packets.BigEndian):\n    \"\"\" Response packet \"\"\"\n    fields = [\n        fields.Bool('success'),\n        fields.Uint32('transfered'),\n    ]\n\nif __name__ == '__main__':\n    data = b'Hello World'\n    request = RequestPacket(type=0, data=data)\n    response = ResponsePacket()\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.connect()\n        s.sendall(request)\n        raw = s.recv(response.size())\n        response.unpack(raw)\n\n    print(repr(response))\n\n# <Packet: Response packet>\n#   success: True\n#   transfered: 11\n```\n\n\n## Installation\n**Packeteer** is available on PyPi, and can be installed with pip directly\n```sh\n$ pip install packeteer\n```\n\n## Requirements\n### Operating systems\n**Packeteer** has no OS dependencies, and should be compatible wherever python can run; However, it is only verified for Ubuntu 18.04. If you discover any issues in other environments, please open a new issue or submit a pull request.\n\n### Python\n**Packeteer** was developed and tested against python 2.7, 3.5, 3.6, and 3.7.\n\n### Dependencies\n**Packeteer** depends on the following packages:\n* future\n* six\n\nFor development and testing, these optional dependencies are also required:\n* pytest\n* pytest-cov\n* tox\n\n## Documentation\n### Defining packets\nDefining packets is as simple as deriving a new class from either *packets.BigEndian* or *packets.LittleEndian* (Depending on the byte ordering of your packet structure)\n\n```python\nimport copy\nfrom packeteer import packets, fields\n\nclass MyPacketBE(packets.BigEndian):\n    name = 'Custom (Big Endian)'\n    fields = [\n        fields.Bool('OK'),\n        fields.Int32('value', default=42)\n    ]\n\nclass MyPacketLE(packets.LittleEndian):\n    \"\"\" Custom (Little Endian) \"\"\"\n    fields = copy.deepcopy(MyPacketBE.fields)\n```\n\nTake notice that the packet definition is built using the *fields* variable, and the built-in field types; Field types and there options are explained in the fields section of the documentation.\n\nThe packet name is an optional value that can be set directly, otherwise it will be coppied from the classes doc-string. If no name is found, the name will be given a default value. The name is only used for human readibility when using repr()\n\n### Working with packets\n#### Creating new instances\nWhen packet objects are constructed without any parameters, their default values are stored in each field\n```python\nfrom packeteer import packets, fields\n\nclass MyPacket(packets.BigEndian):\n    \"\"\" Custom (Big Endian) \"\"\"\n    fields = [\n        fields.Bool('OK'),\n        fields.Int32('value', default=42)\n    ]\n\npacket = MyPacket()\nprint(repr(packet))\n# <Packet: Custom (Big Endian)>\n#   OK: False\n#   value: 42\n```\n\nPackets can also be constructed with non-default values by using the field names to set values\n```python\npacket = MyPacket(OK=True)\nprint(repr(packet))\n# <Packet: Custom (Big Endian)>\n#   OK: True\n#   value: 42\n\npacket2 = MyPacket(value=100)\nprint(repr(packet2))\n# <Packet: Custom (Big Endian)>\n#   OK: False\n#   value: 100\n```\n\n#### Working with packet values\nField values can be accessed like a list (By index) or like a dictionary (By key)\n```python\npacket = MyPacket()\nprint(packet[0], packet[1])\n# False 42\n\nprint(packet['OK'], packet['value'])\n# False 42\n```\n\nValues can also be set in the same fashion\n```python\npacket = MyPacket()\npacket[0] = True\npacket[1] = 100\n\nprint(packet['OK'], packet['value'])\n# True 100\n```\n\n#### Packing/Unpacking\nThe entire purpose of this library is to work with bytes, so it should come to no surprise that packet instances can be serialized into their raw bytes and back.\n\n```python\npacket = MyPacket()\n\nraw = b'\\x01\\x00\\x00\\x00\\xFF'\npacket.unpack(raw)\nprint(repr(packet))\n# <Packet: Custom (Big Endian)>\n#   OK: True\n#   value: 255\n\nraw2 = packet.pack()\nprint(raw == raw2)\n# True\n```\n\nPacket instances can be constructed directly from bytes as well using the from_raw() call\n```python\npacket = MyPacket.from_raw(b'\\x01\\x00\\x00\\x00\\xFF')\nprint(repr(packet))\n# <Packet: Custom (Big Endian)>\n#   OK: True\n#   value: 255\n```\n\n### Fields\nThe different components of the packet are referred to as fields, which are a collection of the associated value, meta data, and supporting functions.\n\nPacketeer comes with the following field types:\n* *fields.Padding*: (1 Byte) N/A\n* *fields.Bool*: (1 Byte) Boolean\n* *fields.Char*: (1 Byte) Character\n* *fields.Int8*: (1 Byte) Signed Integer\n* *fields.UInt8*: (1 Byte) Unsigned Integer\n* *fields.Int16*: (2 Byte) Signed Integer\n* *fields.UInt16*: (2 Byte) Unsigned Integer\n* *fields.Int32*: (4 Byte) Signed Integer\n* *fields.UInt32*: (4 Byte) Unsigned Integer\n* *fields.Int64*: (8 Byte) Signed Integer\n* *fields.UInt64*: (8 Byte) Unsigned Integer\n* *fields.Float*: (4 Byte) Float value\n* *fields.Double* (8 Byte) Float value\n* *fields.Raw*: (n Byte) Raw byte data as a single value\n* *fields.String*: (n Bytes) Unicode String as a single value\n\nThe majority of the types are self explanatory and work identically to the others, but some like padding, string, and raw behave differently and are looked at further in the following sections\n\n#### Padding\n*fields.Padding* is a special field type that is 1 byte wide per character.\n\nPadding bytes are nameless and not associated with any value; They can't be accessed, but they are counted when packing and unpacking.\n```python\nfrom packeteer import packets, fields\n\nclass PaddedPacket(packets.BigEndian):\n    \"\"\" Padded \"\"\"\n    fields = [\n        fields.Padding(),\n        fields.UInt8('value'),\n        fields.Padding(default=b'\\xff')\n    ]\n\npacket = PaddedPacket(value=170)\nprint(repr(packet))\n# <Packet: Padded>\n#   value: 170\n\nprint(packet[0])\n# 170\n\nprint(packet[1])\n# IndexError\n\nraw = packet.pack()\nprint(repr(raw))\n# '\\x00\\xAA\\xFF'\n\npacket.unpack(b'\\x00\\x7f\\xff')\nprint(repr(packet))\n# <Packet: Padded>\n#   value: 127\n```\n\n#### Raw data and strings\n*fields.Raw* is a raw byte store of a given size (The size argument is required). If the data is too large for the field, it will be truncated to fit. Likewise if it is too short, it will be padded with null bytes.\n\n*fields.String* is an extension of *fields.Raw* that stores it's internal value as a unicode string with the encoding of your choosing (Defaults to utf8). The internal value has any trailing null byte padding removed until it is serialized.\n\n```python\nfrom packeteer import packets, fields\n\nclass DataPacket(packets.BigEndian):\n    \"\"\" Data Packet \"\"\"\n    fields = [\n        fields.Raw('raw', size=12),\n        fields.String('string', size=12, encoding='utf8')\n    ]\n\npacket = DataPacket(raw=b'Hello World', string='Hello World')\nprint(repr(packet))\n# <Packet: Raw Packet>\n#   raw: b'Hello World\\x00'\n#   string: u'Hellow World'\n```\n\n\n#### List fields\nThere are often times when you need to have a variable list of values in a packet (Think about a repeating set of values depending on a given count value). *fields.List* takes care of this. *fields.List* requires an additional argument of the field the list contains, with the rest of the arguments given as keywords that the underlying field type requires.\n\n```python\nfrom packeteer import packets, fields\n\nclass ListPacket(packets.BigEndian):\n    \"\"\" List Packet \"\"\"\n    fields = [\n        fields.UInt8('count')\n        fields.List('messages', fields.String, size=128),\n    ]\n\nmessages = ['foo', 'bar', 'Hello World']\npacket = ListPacket(count=len(messages), messages=messages)\nprint(repr(packet))\n# <Packet: List Packet>\n#   count: 3\n#   messages: [u'foo', u'bar', u'Hello World']\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lungdart/packeteer", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "packeteer", "package_url": "https://pypi.org/project/packeteer/", "platform": "", "project_url": "https://pypi.org/project/packeteer/", "project_urls": {"Homepage": "https://github.com/lungdart/packeteer"}, "release_url": "https://pypi.org/project/packeteer/0.4/", "requires_dist": ["future", "six"], "requires_python": ">=2.7.0", "summary": "Light-weight packet serializer", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Packeteer: The packet serializer</h1>\n<p><img alt=\"Travis (.com)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2662ef373c61f525bf6ba79b5d607e62ff5c738b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6c756e67646172742f7061636b65746565722e737667\">\n<img alt=\"Coveralls github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c159560d9451d61b7c67da253eefa8ff153ebaa1/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f6c756e67646172742f7061636b65746565722e737667\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9d03125450d3160ca2e68ef9b47bfcb844ded60/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7061636b65746565722e737667\">\n<img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7217627880a3383eadd03ece61642c3ca10fdb2a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6c756e67646172742f7061636b65746565722e737667\"></p>\n<p><strong>Packeteer</strong> is a light-weight packet serializer capable of translating between raw bytes and custom packet objects; Objects which are easier to understand, display, and work with</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n<span class=\"kn\">from</span> <span class=\"nn\">packeteer</span> <span class=\"kn\">import</span> <span class=\"n\">packets</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n<span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"s1\">'127.0.0.1'</span>\n<span class=\"n\">PORT</span> <span class=\"o\">=</span> <span class=\"s1\">'1234'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Request</span><span class=\"p\">(</span><span class=\"n\">packets</span><span class=\"o\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Request packet \"\"\"</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">UInt8</span><span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">UInt8</span><span class=\"p\">(</span><span class=\"s1\">'size'</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Raw</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">'size'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">packets</span><span class=\"o\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Response packet \"\"\"</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Bool</span><span class=\"p\">(</span><span class=\"s1\">'success'</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Uint32</span><span class=\"p\">(</span><span class=\"s1\">'transfered'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'Hello World'</span>\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">RequestPacket</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ResponsePacket</span><span class=\"p\">()</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n        <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">sendall</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"n\">raw</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># &lt;Packet: Response packet&gt;</span>\n<span class=\"c1\">#   success: True</span>\n<span class=\"c1\">#   transfered: 11</span>\n</pre>\n<h2>Installation</h2>\n<p><strong>Packeteer</strong> is available on PyPi, and can be installed with pip directly</p>\n<pre>$ pip install packeteer\n</pre>\n<h2>Requirements</h2>\n<h3>Operating systems</h3>\n<p><strong>Packeteer</strong> has no OS dependencies, and should be compatible wherever python can run; However, it is only verified for Ubuntu 18.04. If you discover any issues in other environments, please open a new issue or submit a pull request.</p>\n<h3>Python</h3>\n<p><strong>Packeteer</strong> was developed and tested against python 2.7, 3.5, 3.6, and 3.7.</p>\n<h3>Dependencies</h3>\n<p><strong>Packeteer</strong> depends on the following packages:</p>\n<ul>\n<li>future</li>\n<li>six</li>\n</ul>\n<p>For development and testing, these optional dependencies are also required:</p>\n<ul>\n<li>pytest</li>\n<li>pytest-cov</li>\n<li>tox</li>\n</ul>\n<h2>Documentation</h2>\n<h3>Defining packets</h3>\n<p>Defining packets is as simple as deriving a new class from either <em>packets.BigEndian</em> or <em>packets.LittleEndian</em> (Depending on the byte ordering of your packet structure)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">packeteer</span> <span class=\"kn\">import</span> <span class=\"n\">packets</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPacketBE</span><span class=\"p\">(</span><span class=\"n\">packets</span><span class=\"o\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Custom (Big Endian)'</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Bool</span><span class=\"p\">(</span><span class=\"s1\">'OK'</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Int32</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPacketLE</span><span class=\"p\">(</span><span class=\"n\">packets</span><span class=\"o\">.</span><span class=\"n\">LittleEndian</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Custom (Little Endian) \"\"\"</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">MyPacketBE</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">)</span>\n</pre>\n<p>Take notice that the packet definition is built using the <em>fields</em> variable, and the built-in field types; Field types and there options are explained in the fields section of the documentation.</p>\n<p>The packet name is an optional value that can be set directly, otherwise it will be coppied from the classes doc-string. If no name is found, the name will be given a default value. The name is only used for human readibility when using repr()</p>\n<h3>Working with packets</h3>\n<h4>Creating new instances</h4>\n<p>When packet objects are constructed without any parameters, their default values are stored in each field</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">packeteer</span> <span class=\"kn\">import</span> <span class=\"n\">packets</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPacket</span><span class=\"p\">(</span><span class=\"n\">packets</span><span class=\"o\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Custom (Big Endian) \"\"\"</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Bool</span><span class=\"p\">(</span><span class=\"s1\">'OK'</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Int32</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">MyPacket</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: Custom (Big Endian)&gt;</span>\n<span class=\"c1\">#   OK: False</span>\n<span class=\"c1\">#   value: 42</span>\n</pre>\n<p>Packets can also be constructed with non-default values by using the field names to set values</p>\n<pre><span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">MyPacket</span><span class=\"p\">(</span><span class=\"n\">OK</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: Custom (Big Endian)&gt;</span>\n<span class=\"c1\">#   OK: True</span>\n<span class=\"c1\">#   value: 42</span>\n\n<span class=\"n\">packet2</span> <span class=\"o\">=</span> <span class=\"n\">MyPacket</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet2</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: Custom (Big Endian)&gt;</span>\n<span class=\"c1\">#   OK: False</span>\n<span class=\"c1\">#   value: 100</span>\n</pre>\n<h4>Working with packet values</h4>\n<p>Field values can be accessed like a list (By index) or like a dictionary (By key)</p>\n<pre><span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">MyPacket</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># False 42</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'OK'</span><span class=\"p\">],</span> <span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">])</span>\n<span class=\"c1\"># False 42</span>\n</pre>\n<p>Values can also be set in the same fashion</p>\n<pre><span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">MyPacket</span><span class=\"p\">()</span>\n<span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'OK'</span><span class=\"p\">],</span> <span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">])</span>\n<span class=\"c1\"># True 100</span>\n</pre>\n<h4>Packing/Unpacking</h4>\n<p>The entire purpose of this library is to work with bytes, so it should come to no surprise that packet instances can be serialized into their raw bytes and back.</p>\n<pre><span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">MyPacket</span><span class=\"p\">()</span>\n\n<span class=\"n\">raw</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x01\\x00\\x00\\x00\\xFF</span><span class=\"s1\">'</span>\n<span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: Custom (Big Endian)&gt;</span>\n<span class=\"c1\">#   OK: True</span>\n<span class=\"c1\">#   value: 255</span>\n\n<span class=\"n\">raw2</span> <span class=\"o\">=</span> <span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">raw</span> <span class=\"o\">==</span> <span class=\"n\">raw2</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</pre>\n<p>Packet instances can be constructed directly from bytes as well using the from_raw() call</p>\n<pre><span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">MyPacket</span><span class=\"o\">.</span><span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x01\\x00\\x00\\x00\\xFF</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: Custom (Big Endian)&gt;</span>\n<span class=\"c1\">#   OK: True</span>\n<span class=\"c1\">#   value: 255</span>\n</pre>\n<h3>Fields</h3>\n<p>The different components of the packet are referred to as fields, which are a collection of the associated value, meta data, and supporting functions.</p>\n<p>Packeteer comes with the following field types:</p>\n<ul>\n<li><em>fields.Padding</em>: (1 Byte) N/A</li>\n<li><em>fields.Bool</em>: (1 Byte) Boolean</li>\n<li><em>fields.Char</em>: (1 Byte) Character</li>\n<li><em>fields.Int8</em>: (1 Byte) Signed Integer</li>\n<li><em>fields.UInt8</em>: (1 Byte) Unsigned Integer</li>\n<li><em>fields.Int16</em>: (2 Byte) Signed Integer</li>\n<li><em>fields.UInt16</em>: (2 Byte) Unsigned Integer</li>\n<li><em>fields.Int32</em>: (4 Byte) Signed Integer</li>\n<li><em>fields.UInt32</em>: (4 Byte) Unsigned Integer</li>\n<li><em>fields.Int64</em>: (8 Byte) Signed Integer</li>\n<li><em>fields.UInt64</em>: (8 Byte) Unsigned Integer</li>\n<li><em>fields.Float</em>: (4 Byte) Float value</li>\n<li><em>fields.Double</em> (8 Byte) Float value</li>\n<li><em>fields.Raw</em>: (n Byte) Raw byte data as a single value</li>\n<li><em>fields.String</em>: (n Bytes) Unicode String as a single value</li>\n</ul>\n<p>The majority of the types are self explanatory and work identically to the others, but some like padding, string, and raw behave differently and are looked at further in the following sections</p>\n<h4>Padding</h4>\n<p><em>fields.Padding</em> is a special field type that is 1 byte wide per character.</p>\n<p>Padding bytes are nameless and not associated with any value; They can't be accessed, but they are counted when packing and unpacking.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">packeteer</span> <span class=\"kn\">import</span> <span class=\"n\">packets</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PaddedPacket</span><span class=\"p\">(</span><span class=\"n\">packets</span><span class=\"o\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Padded \"\"\"</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Padding</span><span class=\"p\">(),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">UInt8</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Padding</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xff</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">PaddedPacket</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">170</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: Padded&gt;</span>\n<span class=\"c1\">#   value: 170</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># 170</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># IndexError</span>\n\n<span class=\"n\">raw</span> <span class=\"o\">=</span> <span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">))</span>\n<span class=\"c1\"># '\\x00\\xAA\\xFF'</span>\n\n<span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x00\\x7f\\xff</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: Padded&gt;</span>\n<span class=\"c1\">#   value: 127</span>\n</pre>\n<h4>Raw data and strings</h4>\n<p><em>fields.Raw</em> is a raw byte store of a given size (The size argument is required). If the data is too large for the field, it will be truncated to fit. Likewise if it is too short, it will be padded with null bytes.</p>\n<p><em>fields.String</em> is an extension of <em>fields.Raw</em> that stores it's internal value as a unicode string with the encoding of your choosing (Defaults to utf8). The internal value has any trailing null byte padding removed until it is serialized.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">packeteer</span> <span class=\"kn\">import</span> <span class=\"n\">packets</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DataPacket</span><span class=\"p\">(</span><span class=\"n\">packets</span><span class=\"o\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Data Packet \"\"\"</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Raw</span><span class=\"p\">(</span><span class=\"s1\">'raw'</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"s1\">'string'</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf8'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">DataPacket</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'Hello World'</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"o\">=</span><span class=\"s1\">'Hello World'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: Raw Packet&gt;</span>\n<span class=\"c1\">#   raw: b'Hello World\\x00'</span>\n<span class=\"c1\">#   string: u'Hellow World'</span>\n</pre>\n<h4>List fields</h4>\n<p>There are often times when you need to have a variable list of values in a packet (Think about a repeating set of values depending on a given count value). <em>fields.List</em> takes care of this. <em>fields.List</em> requires an additional argument of the field the list contains, with the rest of the arguments given as keywords that the underlying field type requires.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">packeteer</span> <span class=\"kn\">import</span> <span class=\"n\">packets</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ListPacket</span><span class=\"p\">(</span><span class=\"n\">packets</span><span class=\"o\">.</span><span class=\"n\">BigEndian</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" List Packet \"\"\"</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">UInt8</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">)</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'Hello World'</span><span class=\"p\">]</span>\n<span class=\"n\">packet</span> <span class=\"o\">=</span> <span class=\"n\">ListPacket</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">),</span> <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">messages</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Packet: List Packet&gt;</span>\n<span class=\"c1\">#   count: 3</span>\n<span class=\"c1\">#   messages: [u'foo', u'bar', u'Hello World']</span>\n</pre>\n\n          </div>"}, "last_serial": 4964810, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "a78b6eaa435f066a08b5c8403e8ce09a", "sha256": "ca397e300558d5e08d3632c9f8997b1d6a4f05998743c2f65613734902a31e1f"}, "downloads": -1, "filename": "packeteer-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a78b6eaa435f066a08b5c8403e8ce09a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 9662, "upload_time": "2019-02-21T18:43:31", "upload_time_iso_8601": "2019-02-21T18:43:31.405774Z", "url": "https://files.pythonhosted.org/packages/f1/2c/04cdb118242ad6c7a9e84b448468252fa944417e17f1d045fd7c35e63f5d/packeteer-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e536ff295051073f67485bb5aca24a3", "sha256": "3d8af9890962ef3f69668361218e4b5f73fc8d122c9f463bd0fd7006fa15b6c5"}, "downloads": -1, "filename": "packeteer-0.2.tar.gz", "has_sig": false, "md5_digest": "3e536ff295051073f67485bb5aca24a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 12126, "upload_time": "2019-02-21T18:43:33", "upload_time_iso_8601": "2019-02-21T18:43:33.362844Z", "url": "https://files.pythonhosted.org/packages/ad/44/016aa10f54ac56204f840c80d51d4afb742635a4ebcd7c81eee1a2d499e5/packeteer-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "63766718779d5f3503e8ccf0b41ffd8c", "sha256": "cc3f5e837bfd147e4742454315d8777c80842fa14655df08a6d3e4c1020509c7"}, "downloads": -1, "filename": "packeteer-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63766718779d5f3503e8ccf0b41ffd8c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 11482, "upload_time": "2019-03-12T17:51:47", "upload_time_iso_8601": "2019-03-12T17:51:47.486014Z", "url": "https://files.pythonhosted.org/packages/f6/3a/785b97e5ed54e32d3b940dfa55363a806a5c373f5a946b1b276ab081388e/packeteer-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "babb961530a61228e450725db410daf9", "sha256": "f17908ec30a7179224fdf4cc3be8dcbc2aff700c83752d6e1e35c0fc82142b81"}, "downloads": -1, "filename": "packeteer-0.3.tar.gz", "has_sig": false, "md5_digest": "babb961530a61228e450725db410daf9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 14478, "upload_time": "2019-03-12T17:51:49", "upload_time_iso_8601": "2019-03-12T17:51:49.207620Z", "url": "https://files.pythonhosted.org/packages/6b/b7/89c1913307bbeb570be38324b2fc7919c141358b4f90fd6943aad1dee1f2/packeteer-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "28bf0f54104cb727e5a8ff94a2083e30", "sha256": "87306b5c3847a87b0c8989af6f4206ac60d0662ab029c89c07c42219b94c4c9e"}, "downloads": -1, "filename": "packeteer-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "28bf0f54104cb727e5a8ff94a2083e30", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 11512, "upload_time": "2019-03-20T17:27:00", "upload_time_iso_8601": "2019-03-20T17:27:00.975033Z", "url": "https://files.pythonhosted.org/packages/1b/1d/6b8ae4c588cb4e9d1d0c5e41253ba3f140e3138eb7e901d5ed7cb57e540b/packeteer-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eff1599bffae4f24b6ca6fbfca730cd6", "sha256": "cf54fc17c88e6cb337423b180baa770f404695f2b147496c8a8dbae4fe1baeb1"}, "downloads": -1, "filename": "packeteer-0.4.tar.gz", "has_sig": false, "md5_digest": "eff1599bffae4f24b6ca6fbfca730cd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 14499, "upload_time": "2019-03-20T17:27:02", "upload_time_iso_8601": "2019-03-20T17:27:02.547587Z", "url": "https://files.pythonhosted.org/packages/26/e1/27396ad702d4f80c130eec8bd4cdef7e466fd508935df5d4b713e1e428c0/packeteer-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28bf0f54104cb727e5a8ff94a2083e30", "sha256": "87306b5c3847a87b0c8989af6f4206ac60d0662ab029c89c07c42219b94c4c9e"}, "downloads": -1, "filename": "packeteer-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "28bf0f54104cb727e5a8ff94a2083e30", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 11512, "upload_time": "2019-03-20T17:27:00", "upload_time_iso_8601": "2019-03-20T17:27:00.975033Z", "url": "https://files.pythonhosted.org/packages/1b/1d/6b8ae4c588cb4e9d1d0c5e41253ba3f140e3138eb7e901d5ed7cb57e540b/packeteer-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eff1599bffae4f24b6ca6fbfca730cd6", "sha256": "cf54fc17c88e6cb337423b180baa770f404695f2b147496c8a8dbae4fe1baeb1"}, "downloads": -1, "filename": "packeteer-0.4.tar.gz", "has_sig": false, "md5_digest": "eff1599bffae4f24b6ca6fbfca730cd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 14499, "upload_time": "2019-03-20T17:27:02", "upload_time_iso_8601": "2019-03-20T17:27:02.547587Z", "url": "https://files.pythonhosted.org/packages/26/e1/27396ad702d4f80c130eec8bd4cdef7e466fd508935df5d4b713e1e428c0/packeteer-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:07 2020"}