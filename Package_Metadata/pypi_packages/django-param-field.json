{"info": {"author": "secnot", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Utilities"], "description": "django-param-field\n==================\n\nA Django model field that uses a DSL to define, generate, and validate,\ncustom forms.\n\n**ParamField** allows you to store something like this:\n\n.. code:: bash\n\n    width: Decimal -> max:50.0 min:5.0\n    height: Decimal -> max:40.0 min:3.0\n    painted : Bool-> default:False\n    inscription: Text-> max_length:30\n\nand generate the django equivalent form as needed:\n\n.. code:: python\n\n    from django import forms\n\n    class CustomForm(forms.Form):\n        width = forms.DecimalField(max_value=50, min=5)\n        height = forms.DecimalField(max_valur=40, min=3)\n        painted = forms.BooleanField()\n        inscription = forms.CharField(max_length=30)\n\nThis is useful for creating user defined forms, or custom per models\nforms.\n\nRequirement\n-----------\n\nIt has been tested on\n\n-  Python 3\n-  Django 1.9, 1.10\n\nInstallation\n------------\n\nFrom the repository\n\n.. code:: bash\n\n    $ git clone https://github.com/secnot/django-param-field\n    $ python setup.py install\n\nor from pypi\n\n.. code:: bash\n\n    $ pip intall django-param-field\n\nUsage\n-----\n\nAdd param\\_field to INSTALLED\\_APPS\n\n.. code:: python\n\n    # settings.py\n    INSTALLED_APPS = [\n        ...\n        'param_field',\n    ]\n\nAdd the field to your model:\n\n.. code:: python\n\n    # models.py\n    from djang.db import models\n    from param_field import ParamField, ParamDict\n\n    class CustomProduct(models.Model):\n        name = models.CharField(max_length=44)\n        ...\n        params = ParamField(blank=True, max_length=3000)\n\nNow that you have a working model to create a new instance with its\nparameters write:\n\n.. code:: python\n\n    params = \"\"\"\n        width: Dimmension-> max:50.0 min:5.0\n        height: Dimmension-> max:40.0 min:3.0\"\"\"\n\n    CustomProduct.objects.create(\n        name='Custom wooden box\",\n        params=params)\n\nAnd the FormView that generates the forms from the model\n\n.. code:: python\n\n    # views.py\n    from django.shortcuts import render, get_object_or_404\n    from django.views.generic import FormView\n    from django import forms\n    from .models import CustomProduct\n\n    class CustomProductFormView(FormView):\n        template_name = 'product_form.html'\n        form_class = forms.Form\n\n        def dispatch(self, request, *args, **kwargs):\n            \"\"\"Find requested CustomProduct it's needed both in post and get \n            requests so the form can be genereted\"\"\"\n            pk = self.kwargs['pk']\n            self.product = get_object_or_404(CustomProduct, pk=pk)\n            return super().dispatch(request, *args, **kwargs)\n        \n        def get_context_data(self, **kwargs):\n            \"\"\"Send product info to template\"\"\"\n            context = super().get_context_data(**kwargs)\n            context['product'] = self.product\n            return context\n\n        def get_form(self, form_class=None):\n            \"\"\"Generate form form param_field\"\"\"\n            # NOTE: params.form(...) will return None when it doesn't\n            # containt any field.\n            return self.product.params.form(**self.get_form_kwargs())\n\n        def form_valid(self, form):\n            \"\"\"Do what ever you want with the form, at this point it's a\n            validated django form like any other\"\"\"\n            custom_parameters = form.cleaned_data\n            ...\n\nRead this `blog\npost <http://www.secnot.com/django-param-field-en.html>`__ for a longer\ntutorial that includes an example on how to handle File and Image\nfields.\n\nSyntax\n------\n\nEach ParamField can have one or more fields with the following syntax\n\n.. code:: bash\n\n    fieldname: type-> property: value\n\n-  **fieldname** - A lowercase name starting with a letter and followed\n   by letters, numbers, and/or underscores. The default max name length\n   is 30 characters.\n\n-  **type** - One of the supported field types (All starting with\n   uppercase)\n\n   -  Bool\n   -  Decimal\n   -  Dimmension\n   -  Integer\n   -  Text\n   -  TextArea\n   -  File\n   -  Image\n\n-  **property** - One or more of the properties supported by the field\n   type followed by a value.\n\n   -  ALL: hidden. required, label, help\\_text\n   -  Bool: default\n   -  Integer: default, even, odd, max, min, choices\n   -  Decimal: default, max, min, choices, max\\_digits, max\\_decimals\n   -  Text: default, max\\_length, min\\_length, choices\n   -  TextArea: default, max\\_length\n   -  File: (doesn't support hidden)\n   -  Image: (doesn't support hidden)\n\n-  **value** - One of the value types supported by the property to its\n   left\n\n   -  Boolean - True/False\n   -  Decimal - 1.33, 6.44\n   -  Integer - 44\n   -  String - \"string with scape \\\\\"chars\\\\\" \"\n   -  Value list - [value, value, value]\n\nConfiguration\n-------------\n\nThe absolute limits for the fields properties are configurable through\n**settings.py**, for example **PARAM\\_INT\\_MAX** controls the max\nallowed value for integer **max** property, so creating a new Integer\nfield where **max** is bigger will fail.\n\nThese are the available options with their default value:\n\n.. code:: python\n\n    # settings.py\n\n    # Max lengths for label and help_text strings\n    PARAM_LABEL_MAX_LENGTH = 40\n    PARAM_HELP_TEXT_MAX_LENGTH = 200\n    PARAM_NAME_MAX_LENGTH = 30\n\n    # Max and Min integer values, these have been chosen so integers don't cause\n    # problems when stored in any DB\n    PARAM_INT_MAX =  2147483647\n    PARAM_INT_MIN = -2147483648\n\n    # The maximum number of digits allowed and the max decimal places\n    PARAM_DECIMAL_MAX_DIGITS = 20\n    PARAM_DECIMAL_MAX_DECIMALS = 4\n\n    # Decimal max and min (must have valid number of digits/decimals)\n    PARAM_DECIMAL_MAX = Decimal(\"9999999999999999.9999\") \n    PARAM_DECIMAL_MIN = Decimal(\"-9999999999999999.9999\")\n\n    # Dimmension digits/decimals\n    PARAM_DIMMENSION_MAX_DIGITS = 12\n    PARAM_DIMMENSION_MAX_DECIMALS = 4\n\n    # Dimmension max and min\n    PARAM_DIMMENSION_MAX = Decimal(\"99999999.9999\")\n    PARAM_DIMMENSION_MIN = Decimal(\"0.0\")\n\n    # Text/TextArea max length\n    PARAM_TEXT_MAX_LENGTH = 300\n\n    # max_length used by ParamField when it isn't supplied\n    PARAM_FIELD_MAX_LENGTH = 3000\n\nTesting\n-------\n\nOnce the app has been added to settings.py, you can run the tests with:\n\n.. code:: bash\n\n    $ python manage.py test param_field\n\nReferences\n----------\n\n-  `Domain speficific languages python\n   slide <http://es.slideshare.net/Siddhi/creating-domain-specific-languages-in-python>`__\n-  `Small django-param-field\n   tutorial <http://www.secnot.com/django-param-field-en.html>`__ with a\n   longer example than the one in this README.\n\nTODO\n----\n\n-  Better parser error messages", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/secnot/django-param-field", "keywords": "django,dsl,model,field,pyparsing", "license": "LPGL, see LICENSE file.", "maintainer": null, "maintainer_email": null, "name": "django-param-field", "package_url": "https://pypi.org/project/django-param-field/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-param-field/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/secnot/django-param-field"}, "release_url": "https://pypi.org/project/django-param-field/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "A Django model field that uses a DSL to define, generate, and validate, custom forms", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Django model field that uses a DSL to define, generate, and validate,\ncustom forms.</p>\n<p><strong>ParamField</strong> allows you to store something like this:</p>\n<pre>width: Decimal -&gt; max:50.0 min:5.0\nheight: Decimal -&gt; max:40.0 min:3.0\npainted : Bool-&gt; default:False\ninscription: Text-&gt; max_length:30\n</pre>\n<p>and generate the django equivalent form as needed:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">DecimalField</span><span class=\"p\">(</span><span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">DecimalField</span><span class=\"p\">(</span><span class=\"n\">max_valur</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">painted</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">()</span>\n    <span class=\"n\">inscription</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n<p>This is useful for creating user defined forms, or custom per models\nforms.</p>\n<div id=\"requirement\">\n<h2>Requirement</h2>\n<p>It has been tested on</p>\n<ul>\n<li>Python 3</li>\n<li>Django 1.9, 1.10</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From the repository</p>\n<pre>$ git clone https://github.com/secnot/django-param-field\n$ python setup.py install\n</pre>\n<p>or from pypi</p>\n<pre>$ pip intall django-param-field\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Add param_field to INSTALLED_APPS</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'param_field'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Add the field to your model:</p>\n<pre><span class=\"c1\"># models.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">djang.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">param_field</span> <span class=\"kn\">import</span> <span class=\"n\">ParamField</span><span class=\"p\">,</span> <span class=\"n\">ParamDict</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomProduct</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">ParamField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n</pre>\n<p>Now that you have a working model to create a new instance with its\nparameters write:</p>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n    width: Dimmension-&gt; max:50.0 min:5.0\n    height: Dimmension-&gt; max:40.0 min:3.0\"\"\"</span>\n\n<span class=\"n\">CustomProduct</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Custom wooden box\",</span>\n    <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<p>And the FormView that generates the forms from the model</p>\n<pre><span class=\"c1\"># views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span><span class=\"p\">,</span> <span class=\"n\">get_object_or_404</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">FormView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">CustomProduct</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomProductFormView</span><span class=\"p\">(</span><span class=\"n\">FormView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'product_form.html'</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Find requested CustomProduct it's needed both in post and get\n        requests so the form can be genereted\"\"\"</span>\n        <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'pk'</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">CustomProduct</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Send product info to template\"\"\"</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'product'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">product</span>\n        <span class=\"k\">return</span> <span class=\"n\">context</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_form</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form_class</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Generate form form param_field\"\"\"</span>\n        <span class=\"c1\"># NOTE: params.form(...) will return None when it doesn't</span>\n        <span class=\"c1\"># containt any field.</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_form_kwargs</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">form_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Do what ever you want with the form, at this point it's a\n        validated django form like any other\"\"\"</span>\n        <span class=\"n\">custom_parameters</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>Read this <a href=\"http://www.secnot.com/django-param-field-en.html\" rel=\"nofollow\">blog\npost</a> for a longer\ntutorial that includes an example on how to handle File and Image\nfields.</p>\n</div>\n<div id=\"syntax\">\n<h2>Syntax</h2>\n<p>Each ParamField can have one or more fields with the following syntax</p>\n<pre>fieldname: type-&gt; property: value\n</pre>\n<ul>\n<li><strong>fieldname</strong> - A lowercase name starting with a letter and followed\nby letters, numbers, and/or underscores. The default max name length\nis 30 characters.</li>\n<li><strong>type</strong> - One of the supported field types (All starting with\nuppercase)<ul>\n<li>Bool</li>\n<li>Decimal</li>\n<li>Dimmension</li>\n<li>Integer</li>\n<li>Text</li>\n<li>TextArea</li>\n<li>File</li>\n<li>Image</li>\n</ul>\n</li>\n<li><strong>property</strong> - One or more of the properties supported by the field\ntype followed by a value.<ul>\n<li>ALL: hidden. required, label, help_text</li>\n<li>Bool: default</li>\n<li>Integer: default, even, odd, max, min, choices</li>\n<li>Decimal: default, max, min, choices, max_digits, max_decimals</li>\n<li>Text: default, max_length, min_length, choices</li>\n<li>TextArea: default, max_length</li>\n<li>File: (doesn\u2019t support hidden)</li>\n<li>Image: (doesn\u2019t support hidden)</li>\n</ul>\n</li>\n<li><strong>value</strong> - One of the value types supported by the property to its\nleft<ul>\n<li>Boolean - True/False</li>\n<li>Decimal - 1.33, 6.44</li>\n<li>Integer - 44</li>\n<li>String - \u201cstring with scape \"chars\" \u201c</li>\n<li>Value list - [value, value, value]</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The absolute limits for the fields properties are configurable through\n<strong>settings.py</strong>, for example <strong>PARAM_INT_MAX</strong> controls the max\nallowed value for integer <strong>max</strong> property, so creating a new Integer\nfield where <strong>max</strong> is bigger will fail.</p>\n<p>These are the available options with their default value:</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"c1\"># Max lengths for label and help_text strings</span>\n<span class=\"n\">PARAM_LABEL_MAX_LENGTH</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>\n<span class=\"n\">PARAM_HELP_TEXT_MAX_LENGTH</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">PARAM_NAME_MAX_LENGTH</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n\n<span class=\"c1\"># Max and Min integer values, these have been chosen so integers don't cause</span>\n<span class=\"c1\"># problems when stored in any DB</span>\n<span class=\"n\">PARAM_INT_MAX</span> <span class=\"o\">=</span>  <span class=\"mi\">2147483647</span>\n<span class=\"n\">PARAM_INT_MIN</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">2147483648</span>\n\n<span class=\"c1\"># The maximum number of digits allowed and the max decimal places</span>\n<span class=\"n\">PARAM_DECIMAL_MAX_DIGITS</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">PARAM_DECIMAL_MAX_DECIMALS</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"c1\"># Decimal max and min (must have valid number of digits/decimals)</span>\n<span class=\"n\">PARAM_DECIMAL_MAX</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"9999999999999999.9999\"</span><span class=\"p\">)</span>\n<span class=\"n\">PARAM_DECIMAL_MIN</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"-9999999999999999.9999\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Dimmension digits/decimals</span>\n<span class=\"n\">PARAM_DIMMENSION_MAX_DIGITS</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n<span class=\"n\">PARAM_DIMMENSION_MAX_DECIMALS</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"c1\"># Dimmension max and min</span>\n<span class=\"n\">PARAM_DIMMENSION_MAX</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"99999999.9999\"</span><span class=\"p\">)</span>\n<span class=\"n\">PARAM_DIMMENSION_MIN</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"0.0\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Text/TextArea max length</span>\n<span class=\"n\">PARAM_TEXT_MAX_LENGTH</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n<span class=\"c1\"># max_length used by ParamField when it isn't supplied</span>\n<span class=\"n\">PARAM_FIELD_MAX_LENGTH</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span>\n</pre>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Once the app has been added to settings.py, you can run the tests with:</p>\n<pre>$ python manage.py <span class=\"nb\">test</span> param_field\n</pre>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<ul>\n<li><a href=\"http://es.slideshare.net/Siddhi/creating-domain-specific-languages-in-python\" rel=\"nofollow\">Domain speficific languages python\nslide</a></li>\n<li><a href=\"http://www.secnot.com/django-param-field-en.html\" rel=\"nofollow\">Small django-param-field\ntutorial</a> with a\nlonger example than the one in this README.</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Better parser error messages</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2536876, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "b557f26bea20dea828f17475f0d8e603", "sha256": "69259a7253deb63eaef10cbcf52515ac4a2e08bc399fb4704decf9fbe772627c"}, "downloads": -1, "filename": "django-param-field-0.2.tar.gz", "has_sig": false, "md5_digest": "b557f26bea20dea828f17475f0d8e603", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20589, "upload_time": "2016-12-12T18:32:43", "upload_time_iso_8601": "2016-12-12T18:32:43.172280Z", "url": "https://files.pythonhosted.org/packages/41/53/f780b6949c732671d415081a1fd149fa08015195e649ea92b277d4520b2f/django-param-field-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0dd843575e7d8754373aa76f5fe83330", "sha256": "158f6e99df6902e8c4610398a1f72fc261266f584de89a03cbeb154f2c2286ca"}, "downloads": -1, "filename": "django-param-field-0.3.tar.gz", "has_sig": false, "md5_digest": "0dd843575e7d8754373aa76f5fe83330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21302, "upload_time": "2016-12-14T15:18:48", "upload_time_iso_8601": "2016-12-14T15:18:48.662435Z", "url": "https://files.pythonhosted.org/packages/57/51/f63c7c81a48cc48f74f51b6b4f5b35335f2e0deb595f0179412784706ee9/django-param-field-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "58cb14a8192a4686c44cac4767406a28", "sha256": "da01e9330bfa08eb2a80722613ef124695d8a9532c54574d4d2a04485286646d"}, "downloads": -1, "filename": "django-param-field-0.3.1.tar.gz", "has_sig": false, "md5_digest": "58cb14a8192a4686c44cac4767406a28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23691, "upload_time": "2016-12-18T20:36:57", "upload_time_iso_8601": "2016-12-18T20:36:57.083369Z", "url": "https://files.pythonhosted.org/packages/5f/a0/d9a6257aaf9998386a3acde4cdf196052a51650ff00bdc288e6da000153a/django-param-field-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "818f4eedc2aedf3a381b109f9daecafd", "sha256": "7d9cd5cb92f6812fc75d8f59a7230ffd6d7018d1a013804507bcc600b8522799"}, "downloads": -1, "filename": "django-param-field-0.4.0.tar.gz", "has_sig": false, "md5_digest": "818f4eedc2aedf3a381b109f9daecafd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27007, "upload_time": "2016-12-23T15:56:17", "upload_time_iso_8601": "2016-12-23T15:56:17.997947Z", "url": "https://files.pythonhosted.org/packages/e3/83/99deb352ea77c7f53a2ec5cd158e4b542d7c4a8418a0b93498c1ceaba1ef/django-param-field-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "818f4eedc2aedf3a381b109f9daecafd", "sha256": "7d9cd5cb92f6812fc75d8f59a7230ffd6d7018d1a013804507bcc600b8522799"}, "downloads": -1, "filename": "django-param-field-0.4.0.tar.gz", "has_sig": false, "md5_digest": "818f4eedc2aedf3a381b109f9daecafd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27007, "upload_time": "2016-12-23T15:56:17", "upload_time_iso_8601": "2016-12-23T15:56:17.997947Z", "url": "https://files.pythonhosted.org/packages/e3/83/99deb352ea77c7f53a2ec5cd158e4b542d7c4a8418a0b93498c1ceaba1ef/django-param-field-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:16 2020"}