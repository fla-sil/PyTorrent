{"info": {"author": "Calvin Spealman", "author_email": "cspealma@redhat.com", "bugtrack_url": null, "classifiers": [], "description": "# Selenium Text Finding Utilities\n\nMake your tests user-first by using these utilities to test against the\npresented content on the page, not the implementation detail of specific\nmarkup.\n\n## Find Elements by Text\n\nThe most powerful utilities are `find_element_by_text(driver, text)` and\n`find_elements_by_text(driver, text)`, which search the page for one or\nmultiple elements with content matching the given text, as efficiently as\npossible. By default, the inner text must match exactly.\n\n\nCall with the flag `exact=False` to find elements which simply\n_contain_ the text.\n\nFor example::\n\n```python\n    # Find the logout element and click it, whatever it might be\n    findtext.find_element_by_text(driver, 'Logout').click()\n```\n\n## Form Helpers\n\nYou can locate and interact with form elements based on their labels, the\nway a user would find things on the page and the way your features are most\nlikely to be documented.\n\n### `fill_input_by_label(driver, element, label, value, timeout=None):`\n\nInteract with text fields on the page based on their visible label. Here is\nhow you might fill in a login form:\n\n```python\n    fill_input_by_label(driver, None, \"Username\", username)\n    fill_input_by_label(driver, None, \"Password\", username)\n```\n\nNotice how you don't need to know anything about the markup on the page, the\nID of the input elements, or if the label text is \"Username\" or\n\"Username:\".\n\nIf you only want to look at a part of the page, not the whole page, you can\npass an optional element as the second parameter. The search will be done\nto descendents under that element.\n\n### `fill_input_by_placeholder(driver, element, label, value):`\n\nYou might also know youb can locate an element based on the placeholder text\nthat can be read in the input. This function is called just like the previous\nfunction.\n\n### `read_input_by_label(driver, element, label):`\n\nYou can use the same logic to read information back out of forms, too.\n\n```python\n    assert expected == read_input_by_label(driver, None, \"State\")\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/peaqe/findtext", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "selenium-findtext", "package_url": "https://pypi.org/project/selenium-findtext/", "platform": "", "project_url": "https://pypi.org/project/selenium-findtext/", "project_urls": {"Homepage": "http://github.com/peaqe/findtext"}, "release_url": "https://pypi.org/project/selenium-findtext/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "Text finding helpers for Selenium tests", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Selenium Text Finding Utilities</h1>\n<p>Make your tests user-first by using these utilities to test against the\npresented content on the page, not the implementation detail of specific\nmarkup.</p>\n<h2>Find Elements by Text</h2>\n<p>The most powerful utilities are <code>find_element_by_text(driver, text)</code> and\n<code>find_elements_by_text(driver, text)</code>, which search the page for one or\nmultiple elements with content matching the given text, as efficiently as\npossible. By default, the inner text must match exactly.</p>\n<p>Call with the flag <code>exact=False</code> to find elements which simply\n<em>contain</em> the text.</p>\n<p>For example::</p>\n<pre>    <span class=\"c1\"># Find the logout element and click it, whatever it might be</span>\n    <span class=\"n\">findtext</span><span class=\"o\">.</span><span class=\"n\">find_element_by_text</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"s1\">'Logout'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n</pre>\n<h2>Form Helpers</h2>\n<p>You can locate and interact with form elements based on their labels, the\nway a user would find things on the page and the way your features are most\nlikely to be documented.</p>\n<h3><code>fill_input_by_label(driver, element, label, value, timeout=None):</code></h3>\n<p>Interact with text fields on the page based on their visible label. Here is\nhow you might fill in a login form:</p>\n<pre>    <span class=\"n\">fill_input_by_label</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s2\">\"Username\"</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">)</span>\n    <span class=\"n\">fill_input_by_label</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s2\">\"Password\"</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">)</span>\n</pre>\n<p>Notice how you don't need to know anything about the markup on the page, the\nID of the input elements, or if the label text is \"Username\" or\n\"Username:\".</p>\n<p>If you only want to look at a part of the page, not the whole page, you can\npass an optional element as the second parameter. The search will be done\nto descendents under that element.</p>\n<h3><code>fill_input_by_placeholder(driver, element, label, value):</code></h3>\n<p>You might also know youb can locate an element based on the placeholder text\nthat can be read in the input. This function is called just like the previous\nfunction.</p>\n<h3><code>read_input_by_label(driver, element, label):</code></h3>\n<p>You can use the same logic to read information back out of forms, too.</p>\n<pre>    <span class=\"k\">assert</span> <span class=\"n\">expected</span> <span class=\"o\">==</span> <span class=\"n\">read_input_by_label</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s2\">\"State\"</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5709787, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "db4e182013e8ac97dc9e2ffd4fe3d934", "sha256": "04a038815da6a07dfd16c49e611e315d9657a4ed0be6096450c21ccf1f3f0f76"}, "downloads": -1, "filename": "selenium_findtext-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "db4e182013e8ac97dc9e2ffd4fe3d934", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17342, "upload_time": "2019-04-16T13:02:24", "upload_time_iso_8601": "2019-04-16T13:02:24.035736Z", "url": "https://files.pythonhosted.org/packages/83/29/e673d51890167f616705f1d3fe2dad822d567201c53d0830a87f453def54/selenium_findtext-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6ba0cc045e66ed522d4cc4d60045fc4", "sha256": "5ca5975424603691ec799456b1426c4a1a6ba671d648944a8c5947e151d4ee6e"}, "downloads": -1, "filename": "selenium-findtext-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e6ba0cc045e66ed522d4cc4d60045fc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4557, "upload_time": "2019-04-16T13:02:26", "upload_time_iso_8601": "2019-04-16T13:02:26.186210Z", "url": "https://files.pythonhosted.org/packages/4e/9a/71de63cbdcde5fcfb1670172f9a06a7c48786ba9fa45321aae02fd6276b2/selenium-findtext-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "48701ce5fdb0b064254cb0bcee7fd5fd", "sha256": "6689cdab9f943be4e2531df8aa3f546b863fb8010ae0e2a6d5861b3511930f74"}, "downloads": -1, "filename": "selenium-findtext-0.1.2.tar.gz", "has_sig": false, "md5_digest": "48701ce5fdb0b064254cb0bcee7fd5fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4642, "upload_time": "2019-04-18T16:16:40", "upload_time_iso_8601": "2019-04-18T16:16:40.037555Z", "url": "https://files.pythonhosted.org/packages/fd/c8/9b69015432e64ef54071002e69065e25124238dcaf458cbbdc858c727920/selenium-findtext-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "a68473e8dcbafd30a4e411c64b6df746", "sha256": "f801d4bb6c2fe316e1661e358a04ea6da273c2336efe86a30d8ac2edd66f5979"}, "downloads": -1, "filename": "selenium-findtext-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a68473e8dcbafd30a4e411c64b6df746", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4686, "upload_time": "2019-06-05T15:27:47", "upload_time_iso_8601": "2019-06-05T15:27:47.573592Z", "url": "https://files.pythonhosted.org/packages/ab/2d/4ecf327cc1d3d06372d022862ea87e79df34aad3a2eabcdd850eab0cb127/selenium-findtext-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c5bf6011efed5b1c500976b5e0b965ea", "sha256": "b5ce0a4a77f6839a0448be2408557c4a4285b27c657ebd63827b10a4faec677e"}, "downloads": -1, "filename": "selenium-findtext-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c5bf6011efed5b1c500976b5e0b965ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4707, "upload_time": "2019-08-09T13:25:14", "upload_time_iso_8601": "2019-08-09T13:25:14.571433Z", "url": "https://files.pythonhosted.org/packages/20/b3/dfce0c068a9bc3821435d9c573f53e3813745a654b6f949d799407a854f0/selenium-findtext-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "621909b35792465f6fcef1b5d41086b1", "sha256": "b0fd2435eaddc4fcc80437e1baa8af9cc4a5eec40fd207df19f3ea192f786475"}, "downloads": -1, "filename": "selenium-findtext-0.1.5.tar.gz", "has_sig": false, "md5_digest": "621909b35792465f6fcef1b5d41086b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4711, "upload_time": "2019-08-21T13:35:25", "upload_time_iso_8601": "2019-08-21T13:35:25.039980Z", "url": "https://files.pythonhosted.org/packages/81/57/0c7da976cd230424905d04b048a935da99248fdf813d19662905fc5b7729/selenium-findtext-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "621909b35792465f6fcef1b5d41086b1", "sha256": "b0fd2435eaddc4fcc80437e1baa8af9cc4a5eec40fd207df19f3ea192f786475"}, "downloads": -1, "filename": "selenium-findtext-0.1.5.tar.gz", "has_sig": false, "md5_digest": "621909b35792465f6fcef1b5d41086b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4711, "upload_time": "2019-08-21T13:35:25", "upload_time_iso_8601": "2019-08-21T13:35:25.039980Z", "url": "https://files.pythonhosted.org/packages/81/57/0c7da976cd230424905d04b048a935da99248fdf813d19662905fc5b7729/selenium-findtext-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:29 2020"}