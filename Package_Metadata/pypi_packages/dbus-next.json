{"info": {"author": "Tony Crisci", "author_email": "tony@dubstepdish.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: X11 Applications", "Environment :: X11 Applications :: Gnome", "Framework :: AsyncIO", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Desktop Environment :: Gnome", "Topic :: Software Development :: Embedded Systems"], "description": "\n# python-dbus-next\n\nThe next great DBus library for Python.\n\n[Documentation](https://python-dbus-next.readthedocs.io/en/latest/).\n\npython-dbus-next is a Python library for DBus that aims to be a fully featured high level library primarily geared towards integration of applications into Linux desktop and mobile environments.\n\nDesktop application developers can use this library for integrating their applications into desktop environments by implementing common DBus standard interfaces or creating custom plugin interfaces.\n\nDesktop users can use this library to create their own scripts and utilities to interact with those interfaces for customization of their desktop environment.\n\npython-dbus-next plans to improve over other DBus libraries for Python in the following ways:\n\n* Zero dependencies and pure Python 3.\n* Support for multiple IO backends including asyncio and the GLib main loop.\n* Nonblocking IO suitable for GUI development.\n* Target the latest language features of Python for beautiful services and clients.\n* Complete implementation of the DBus type system without ever guessing types.\n* Integration tests for all features of the library.\n* Completely documented public API.\n\n## Installing\n\nThis library is available on PyPi as [dbus-next](https://pypi.org/project/dbus-next/).\n\n```\npip3 install dbus-next\n```\n\n## The Client Interface\n\nTo use a service on the bus, the library constructs a proxy object you can use to call methods, get and set properties, and listen to signals.\n\nFor more information, see the [overview for the high-level client](https://python-dbus-next.readthedocs.io/en/latest/high-level-client/index.html).\n\nThis example connects to a media player and controls it with the [MPRIS](https://specifications.freedesktop.org/mpris-spec/latest/) DBus interface.\n\n```python\nfrom dbus_next.aio import MessageBus\n\nimport asyncio\n\nloop = asyncio.get_event_loop()\n\n\nasync def main():\n    bus = await MessageBus().connect()\n    # the introspection xml would normally be included in your project, but\n    # this is convenient for development\n    introspection = await bus.introspect('org.mpris.MediaPlayer2.vlc', '/org/mpris/MediaPlayer2')\n\n    obj = bus.get_proxy_object('org.mpris.MediaPlayer2.vlc', '/org/mpris/MediaPlayer2', introspection)\n    player = obj.get_interface('org.mpris.MediaPlayer2.Player')\n    properties = obj.get_interface('org.freedesktop.DBus.Properties')\n\n    # call methods on the interface (this causes the media player to play)\n    await player.call_play()\n\n    volume = await player.get_volume()\n    print(f'current volume: {volume}, setting to 0.5')\n\n    await player.set_volume(0.5)\n\n    # listen to signals\n    def on_properties_changed(interface_name, changed_properties, invalidated_properties):\n        for changed, variant in changed_properties.items():\n            print(f'property changed: {changed} - {variant.value}')\n\n    properties.on_properties_changed(on_properties_changed)\n\n    await loop.create_future()\n\nloop.run_until_complete(main())\n```\n\n## The Service Interface\n\nTo define a service on the bus, use the `ServiceInterface` class and decorate class methods to specify DBus methods, properties, and signals with their type signatures.\n\nFor more information, see the [overview for the high-level service](https://python-dbus-next.readthedocs.io/en/latest/high-level-service/index.html).\n\n```python\nfrom dbus_next import ServiceInterface, method, dbus_property, signal, Variant\nfrom dbus_next.aio MessageBus\n\nimport asyncio\n\nclass ExampleInterface(ServiceInterface):\n    def __init__(self, name):\n        super().__init__(name)\n        self._string_prop = 'kevin'\n\n    @method()\n    def Echo(self, what: 's') -> 's':\n        return what\n\n    @method()\n    def GetVariantDict() -> 'a{sv}':\n        return {\n            'foo': Variant('s', 'bar'),\n            'bat': Variant('x', -55),\n            'a_list': Variant('as', ['hello', 'world'])\n        }\n\n    @dbus_property()\n    def string_prop(self) -> 's':\n        return self._string_prop\n\n    @string_prop.setter\n    def string_prop_setter(self, val: 's'):\n        self._string_prop = val\n\n    @signal()\n    def signal_simple(self) -> 's':\n        return 'hello'\n\nasync def main():\n    bus = await MessageBus().connect()\n    interface = ExampleInterface('test.interface')\n    bus.export('/test/path', interface)\n    # now that we are ready to handle requests, we can request name from D-Bus\n    await bus.request_name('test.name')\n    # wait indefinitely\n    await asyncio.get_event_loop().create_future()\n\nasyncio.get_event_loop().run_until_complete(main())\n```\n\n## The Low-Level Interface\n\nThe low-level interface works with DBus messages directly.\n\nFor more information, see the [overview for the low-level interface](https://python-dbus-next.readthedocs.io/en/latest/low-level-interface/index.html).\n\n```python\nfrom dbus_next.message import Message, MessageType\nfrom dbus_next.aio import MessageBus\n\nimport asyncio\nimport json\n\nloop = asyncio.get_event_loop()\n\n\nasync def main():\n    bus = await MessageBus().connect()\n\n    reply = await bus.call(\n        Message(destination='org.freedesktop.DBus',\n                path='/org/freedesktop/DBus',\n                interface='org.freedesktop.DBus',\n                member='ListNames'))\n\n    if reply.message_type == MessageType.ERROR:\n        raise Exception(reply.body[0])\n\n    print(json.dumps(reply.body[0], indent=2))\n\n\nloop.run_until_complete(main())\n```\n\n## Projects that use python-dbus-next\n\n* The [Playerctl](https://github.com/acrisci/playerctl) test suite\n* [i3-dstatus](https://github.com/acrisci/i3-dstatus)\n\n## Contributing\n\nContributions are welcome. Development happens on [Github](https://github.com/acrisci/python-dbus-next).\n\nBefore you commit, run `make` to run the linter, code formatter, and the test suite.\n\n# Copyright\n\nYou can use this code under an MIT license (see LICENSE).\n\n\u00a9 2019, Tony Crisci\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/acrisci/python-dbus-next", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dbus-next", "package_url": "https://pypi.org/project/dbus-next/", "platform": "", "project_url": "https://pypi.org/project/dbus-next/", "project_urls": {"Homepage": "https://github.com/acrisci/python-dbus-next"}, "release_url": "https://pypi.org/project/dbus-next/0.1.3/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "A zero-dependency DBus library for Python with asyncio support", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-dbus-next</h1>\n<p>The next great DBus library for Python.</p>\n<p><a href=\"https://python-dbus-next.readthedocs.io/en/latest/\" rel=\"nofollow\">Documentation</a>.</p>\n<p>python-dbus-next is a Python library for DBus that aims to be a fully featured high level library primarily geared towards integration of applications into Linux desktop and mobile environments.</p>\n<p>Desktop application developers can use this library for integrating their applications into desktop environments by implementing common DBus standard interfaces or creating custom plugin interfaces.</p>\n<p>Desktop users can use this library to create their own scripts and utilities to interact with those interfaces for customization of their desktop environment.</p>\n<p>python-dbus-next plans to improve over other DBus libraries for Python in the following ways:</p>\n<ul>\n<li>Zero dependencies and pure Python 3.</li>\n<li>Support for multiple IO backends including asyncio and the GLib main loop.</li>\n<li>Nonblocking IO suitable for GUI development.</li>\n<li>Target the latest language features of Python for beautiful services and clients.</li>\n<li>Complete implementation of the DBus type system without ever guessing types.</li>\n<li>Integration tests for all features of the library.</li>\n<li>Completely documented public API.</li>\n</ul>\n<h2>Installing</h2>\n<p>This library is available on PyPi as <a href=\"https://pypi.org/project/dbus-next/\" rel=\"nofollow\">dbus-next</a>.</p>\n<pre><code>pip3 install dbus-next\n</code></pre>\n<h2>The Client Interface</h2>\n<p>To use a service on the bus, the library constructs a proxy object you can use to call methods, get and set properties, and listen to signals.</p>\n<p>For more information, see the <a href=\"https://python-dbus-next.readthedocs.io/en/latest/high-level-client/index.html\" rel=\"nofollow\">overview for the high-level client</a>.</p>\n<p>This example connects to a media player and controls it with the <a href=\"https://specifications.freedesktop.org/mpris-spec/latest/\" rel=\"nofollow\">MPRIS</a> DBus interface.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbus_next.aio</span> <span class=\"kn\">import</span> <span class=\"n\">MessageBus</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">MessageBus</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n    <span class=\"c1\"># the introspection xml would normally be included in your project, but</span>\n    <span class=\"c1\"># this is convenient for development</span>\n    <span class=\"n\">introspection</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">introspect</span><span class=\"p\">(</span><span class=\"s1\">'org.mpris.MediaPlayer2.vlc'</span><span class=\"p\">,</span> <span class=\"s1\">'/org/mpris/MediaPlayer2'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">get_proxy_object</span><span class=\"p\">(</span><span class=\"s1\">'org.mpris.MediaPlayer2.vlc'</span><span class=\"p\">,</span> <span class=\"s1\">'/org/mpris/MediaPlayer2'</span><span class=\"p\">,</span> <span class=\"n\">introspection</span><span class=\"p\">)</span>\n    <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_interface</span><span class=\"p\">(</span><span class=\"s1\">'org.mpris.MediaPlayer2.Player'</span><span class=\"p\">)</span>\n    <span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_interface</span><span class=\"p\">(</span><span class=\"s1\">'org.freedesktop.DBus.Properties'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># call methods on the interface (this causes the media player to play)</span>\n    <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">call_play</span><span class=\"p\">()</span>\n\n    <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">get_volume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'current volume: </span><span class=\"si\">{</span><span class=\"n\">volume</span><span class=\"si\">}</span><span class=\"s1\">, setting to 0.5'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">set_volume</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># listen to signals</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_properties_changed</span><span class=\"p\">(</span><span class=\"n\">interface_name</span><span class=\"p\">,</span> <span class=\"n\">changed_properties</span><span class=\"p\">,</span> <span class=\"n\">invalidated_properties</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">changed</span><span class=\"p\">,</span> <span class=\"n\">variant</span> <span class=\"ow\">in</span> <span class=\"n\">changed_properties</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'property changed: </span><span class=\"si\">{</span><span class=\"n\">changed</span><span class=\"si\">}</span><span class=\"s1\"> - </span><span class=\"si\">{</span><span class=\"n\">variant</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"n\">on_properties_changed</span><span class=\"p\">(</span><span class=\"n\">on_properties_changed</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_future</span><span class=\"p\">()</span>\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h2>The Service Interface</h2>\n<p>To define a service on the bus, use the <code>ServiceInterface</code> class and decorate class methods to specify DBus methods, properties, and signals with their type signatures.</p>\n<p>For more information, see the <a href=\"https://python-dbus-next.readthedocs.io/en/latest/high-level-service/index.html\" rel=\"nofollow\">overview for the high-level service</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbus_next</span> <span class=\"kn\">import</span> <span class=\"n\">ServiceInterface</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">dbus_property</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"p\">,</span> <span class=\"n\">Variant</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dbus_next.aio</span> <span class=\"n\">MessageBus</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleInterface</span><span class=\"p\">(</span><span class=\"n\">ServiceInterface</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_string_prop</span> <span class=\"o\">=</span> <span class=\"s1\">'kevin'</span>\n\n    <span class=\"nd\">@method</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">Echo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">what</span><span class=\"p\">:</span> <span class=\"s1\">'s'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'s'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">what</span>\n\n    <span class=\"nd\">@method</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">GetVariantDict</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'a</span><span class=\"si\">{sv}</span><span class=\"s1\">'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"n\">Variant</span><span class=\"p\">(</span><span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">),</span>\n            <span class=\"s1\">'bat'</span><span class=\"p\">:</span> <span class=\"n\">Variant</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">55</span><span class=\"p\">),</span>\n            <span class=\"s1\">'a_list'</span><span class=\"p\">:</span> <span class=\"n\">Variant</span><span class=\"p\">(</span><span class=\"s1\">'as'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"s1\">'world'</span><span class=\"p\">])</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@dbus_property</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">string_prop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'s'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_string_prop</span>\n\n    <span class=\"nd\">@string_prop</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">string_prop_setter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"s1\">'s'</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_string_prop</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@signal</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">signal_simple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'s'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'hello'</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">MessageBus</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n    <span class=\"n\">interface</span> <span class=\"o\">=</span> <span class=\"n\">ExampleInterface</span><span class=\"p\">(</span><span class=\"s1\">'test.interface'</span><span class=\"p\">)</span>\n    <span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s1\">'/test/path'</span><span class=\"p\">,</span> <span class=\"n\">interface</span><span class=\"p\">)</span>\n    <span class=\"c1\"># now that we are ready to handle requests, we can request name from D-Bus</span>\n    <span class=\"k\">await</span> <span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">request_name</span><span class=\"p\">(</span><span class=\"s1\">'test.name'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># wait indefinitely</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_future</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h2>The Low-Level Interface</h2>\n<p>The low-level interface works with DBus messages directly.</p>\n<p>For more information, see the <a href=\"https://python-dbus-next.readthedocs.io/en/latest/low-level-interface/index.html\" rel=\"nofollow\">overview for the low-level interface</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbus_next.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">MessageType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dbus_next.aio</span> <span class=\"kn\">import</span> <span class=\"n\">MessageBus</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">MessageBus</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n    <span class=\"n\">reply</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n        <span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"n\">destination</span><span class=\"o\">=</span><span class=\"s1\">'org.freedesktop.DBus'</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/org/freedesktop/DBus'</span><span class=\"p\">,</span>\n                <span class=\"n\">interface</span><span class=\"o\">=</span><span class=\"s1\">'org.freedesktop.DBus'</span><span class=\"p\">,</span>\n                <span class=\"n\">member</span><span class=\"o\">=</span><span class=\"s1\">'ListNames'</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">reply</span><span class=\"o\">.</span><span class=\"n\">message_type</span> <span class=\"o\">==</span> <span class=\"n\">MessageType</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"n\">reply</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">reply</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h2>Projects that use python-dbus-next</h2>\n<ul>\n<li>The <a href=\"https://github.com/acrisci/playerctl\" rel=\"nofollow\">Playerctl</a> test suite</li>\n<li><a href=\"https://github.com/acrisci/i3-dstatus\" rel=\"nofollow\">i3-dstatus</a></li>\n</ul>\n<h2>Contributing</h2>\n<p>Contributions are welcome. Development happens on <a href=\"https://github.com/acrisci/python-dbus-next\" rel=\"nofollow\">Github</a>.</p>\n<p>Before you commit, run <code>make</code> to run the linter, code formatter, and the test suite.</p>\n<h1>Copyright</h1>\n<p>You can use this code under an MIT license (see LICENSE).</p>\n<p>\u00a9 2019, Tony Crisci</p>\n\n          </div>"}, "last_serial": 6745185, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e22f19bd0109b7a3ef237c9df200ec45", "sha256": "90e2807953243fab5efed6abb7d948d60381ac5ef8c02c2bc67bbcde61393add"}, "downloads": -1, "filename": "dbus_next-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e22f19bd0109b7a3ef237c9df200ec45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 35639, "upload_time": "2019-04-30T19:22:22", "upload_time_iso_8601": "2019-04-30T19:22:22.673990Z", "url": "https://files.pythonhosted.org/packages/40/43/a7c07377daec97a273b4056cefc0c3d92d8b31b707721d81bfc670bf61d1/dbus_next-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d9fdbe6fbcbd6d6e3adac67b25077f4", "sha256": "1c0f9c4d53ca7f78c0ab0898644f7d29c22f3f4f1d33b4fdab47a482395c81ce"}, "downloads": -1, "filename": "dbus_next-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9d9fdbe6fbcbd6d6e3adac67b25077f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 41699, "upload_time": "2019-04-30T19:22:34", "upload_time_iso_8601": "2019-04-30T19:22:34.954788Z", "url": "https://files.pythonhosted.org/packages/95/bb/2298cf06edf775a8d30418545823fb4fb081d0398ba720ddc18f238e58c9/dbus_next-0.0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "de626648c546a71044294f053a22a737", "sha256": "69f3ea1693eccec1bafea74f44beba7b883b17f6b0d070c9d056b1ed01975455"}, "downloads": -1, "filename": "dbus_next-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "de626648c546a71044294f053a22a737", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 47706, "upload_time": "2019-05-07T18:23:45", "upload_time_iso_8601": "2019-05-07T18:23:45.760886Z", "url": "https://files.pythonhosted.org/packages/43/32/1aae81f09bd656d5d2c87fd481fb65f40d7da393d591df17c8231531003e/dbus_next-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38874db0efce5b54f822129c99c8fd76", "sha256": "27da4541dcf2f84968b5311cc631a3406fbdc87aa65c612506a09af884a0275c"}, "downloads": -1, "filename": "dbus_next-0.1.1.tar.gz", "has_sig": false, "md5_digest": "38874db0efce5b54f822129c99c8fd76", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 51351, "upload_time": "2019-05-07T18:23:47", "upload_time_iso_8601": "2019-05-07T18:23:47.470840Z", "url": "https://files.pythonhosted.org/packages/90/4e/ec03e0a2d1f6f6109682971a120fddbe51605b0851b2eb4fd3df8c1274c9/dbus_next-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "93bed2d26d75e6e595070e89b5d7b9ab", "sha256": "eae0b7ca3d215a72674c8261838e126d28b64eb5211b2f079e3d6bd97bc3768d"}, "downloads": -1, "filename": "dbus_next-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "93bed2d26d75e6e595070e89b5d7b9ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 48907, "upload_time": "2019-08-26T12:42:20", "upload_time_iso_8601": "2019-08-26T12:42:20.790508Z", "url": "https://files.pythonhosted.org/packages/67/55/91590b3f73168c2ffd9cc73ba1c64ff04cb88ead3b073e522b437d28d4e2/dbus_next-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df838d695284dd1775860f9691a8663f", "sha256": "a567d845ceed5feac48dda7faeb9ff2571f9a434a3c32b9b363f763e82368762"}, "downloads": -1, "filename": "dbus_next-0.1.2.tar.gz", "has_sig": false, "md5_digest": "df838d695284dd1775860f9691a8663f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 52805, "upload_time": "2019-08-26T12:42:22", "upload_time_iso_8601": "2019-08-26T12:42:22.855419Z", "url": "https://files.pythonhosted.org/packages/77/b2/60df113315e95e500b13029bed667cf5c23ea8ca2d586ccfa2d85a30be7a/dbus_next-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ec6994162b2b8395e1fac2751c7f516c", "sha256": "d48bf457f23a5b51c3a9199b9bf3cf76c764bb639bb6d0ab410d13572b853b66"}, "downloads": -1, "filename": "dbus_next-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ec6994162b2b8395e1fac2751c7f516c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 49885, "upload_time": "2020-03-04T03:38:48", "upload_time_iso_8601": "2020-03-04T03:38:48.897950Z", "url": "https://files.pythonhosted.org/packages/17/ad/aba0fb20fde2305b809c8b7ee40268fff82a294ae4b0fd26bdabc4a7f20f/dbus_next-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a823270b11c8dd7932c12adc6b2fadbb", "sha256": "4dd9097778224c69228f7f2a0f52e9b13ec2c75e87974ad312525c927835e8fb"}, "downloads": -1, "filename": "dbus_next-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a823270b11c8dd7932c12adc6b2fadbb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 55690, "upload_time": "2020-03-04T03:38:50", "upload_time_iso_8601": "2020-03-04T03:38:50.020878Z", "url": "https://files.pythonhosted.org/packages/74/fd/22ea28b12c501e8d9586ce8547889e8ad83e6e6149fcf1edc7e3e900d068/dbus_next-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ec6994162b2b8395e1fac2751c7f516c", "sha256": "d48bf457f23a5b51c3a9199b9bf3cf76c764bb639bb6d0ab410d13572b853b66"}, "downloads": -1, "filename": "dbus_next-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ec6994162b2b8395e1fac2751c7f516c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 49885, "upload_time": "2020-03-04T03:38:48", "upload_time_iso_8601": "2020-03-04T03:38:48.897950Z", "url": "https://files.pythonhosted.org/packages/17/ad/aba0fb20fde2305b809c8b7ee40268fff82a294ae4b0fd26bdabc4a7f20f/dbus_next-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a823270b11c8dd7932c12adc6b2fadbb", "sha256": "4dd9097778224c69228f7f2a0f52e9b13ec2c75e87974ad312525c927835e8fb"}, "downloads": -1, "filename": "dbus_next-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a823270b11c8dd7932c12adc6b2fadbb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 55690, "upload_time": "2020-03-04T03:38:50", "upload_time_iso_8601": "2020-03-04T03:38:50.020878Z", "url": "https://files.pythonhosted.org/packages/74/fd/22ea28b12c501e8d9586ce8547889e8ad83e6e6149fcf1edc7e3e900d068/dbus_next-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:51 2020"}