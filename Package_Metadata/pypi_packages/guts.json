{"info": {"author": "Sebastian Heimann", "author_email": "sebastian.heimann@gfz-potsdam.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\nGuts\n====\n \nLightweight declarative YAML and XML data binding for Python\n\nGuts is written by Sebastian Heimann <sebastian.heimann@gfz-potsdam.de>.  It is\nreleased under the MIT license. See the file LICENSE for more details.\n\nPrerequisites\n-------------\n\n  * PyYAML: Download it from http://pyyaml.org/wiki/PyYAML and follow the given\n    installation instructions or install it through your system's package\n    manager (e.g. the `python-yaml` package on Debian based Linuxes).\n\nUsage\n-----\n\nA file `playlist.py` might look like:\n\n```python\nfrom guts import *\n\nclass Song(Object):\n    name = String.T()\n    album = String.T(default='')\n    artist = String.T(default='')\n    year = Int.T(optional=True)\n\nclass Playlist(Object):\n    xmltagname = 'playlist'\n    name = String.T(default='Untitled Playlist')\n    comment = String.T(optional=True)\n    song_list = List.T(Song.T())\n```\n\nThese classes come with automatic `__init__`:\n\n```pycon\n>>> from playlist import *\n>>> song1 = Song(name='Metropolis', artist='Kraftwerk')\n>>> song2 = Song(name='I Robot', artist='The Alan Parsons Project', album='I Robot')\n>>> playlist = Playlist(song_list=[song1,song2])\n```\n\nThey serialize to YAML:\n\n```pycon\n>>> print song1.dump()\n--- !playlist.Song\nname: Metropolis\nartist: Kraftwerk\n```\n\nThey also serialize to XML:\n\n```pycon\n>>> print playlist.dump_xml()\n<playlist>\n  <name>Untitled Playlist</name>\n  <song>\n    <name>Metropolis</name>\n    <artist>Kraftwerk</artist>\n  </song>\n  <song>\n    <name>I Robot</name>\n    <album>I Robot</album>\n    <artist>The Alan Parsons Project</artist>\n  </song>\n</playlist>\n```\n\nObjects can validate themselves:\n\n```pycon\n>>> song1.validate()\n>>> song2.year = 1977\n>>> song2.validate()\n>>> song2.year = 'abc'\n>>> song2.validate()\nTraceback (most recent call last):\n...\nguts.ValidationError: year: \"abc\" is not of type int\n```\n\nObjects can regularize themselves:\n\n```pycon\n>>> song2.year = '1977'\n>>> song2.regularize()\n>>> song2.year\n1977\n>>> type(song2.year)\n<type 'int'>\n```\n\nThey also deserialize from YAML and XML:\n\n```pycon\n>>> playlist2 = load_string(playlist.dump())\n>>> playlist3 = load_xml_string(playlist.dump_xml())\n```\n\nIncremental loading of large YAML or XML files is supported with the\n`guts.iload_all()` and `guts.iload_all_xml()` functions, which are buildt to\nreturn generators yielding Guts objects.\n\nThis module comes with a rudimentary code generator `xmlschema-to-guts` to turn\n(some) XML Schema definitions (XSD) into Python modules containing Guts class\nhierarchies. \n\nHere is an example using the first example in the W3C XML Schema Primer. The\nSchema shall be defined in `po.xsd`:\n\n```xml\n<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n\n  <xsd:annotation>\n    <xsd:documentation xml:lang=\"en\">\n     Purchase order schema for Example.com.\n     Copyright 2000 Example.com. All rights reserved.\n    </xsd:documentation>\n  </xsd:annotation>\n\n  <xsd:element name=\"purchaseOrder\" type=\"PurchaseOrderType\"/>\n\n  <xsd:element name=\"comment\" type=\"xsd:string\"/>\n\n  <xsd:complexType name=\"PurchaseOrderType\">\n    <xsd:sequence>\n      <xsd:element name=\"shipTo\" type=\"USAddress\"/>\n      <xsd:element name=\"billTo\" type=\"USAddress\"/>\n      <xsd:element ref=\"comment\" minOccurs=\"0\"/>\n      <xsd:element name=\"items\"  type=\"Items\"/>\n    </xsd:sequence>\n    <xsd:attribute name=\"orderDate\" type=\"xsd:date\"/>\n  </xsd:complexType>\n\n  <xsd:complexType name=\"USAddress\">\n    <xsd:sequence>\n      <xsd:element name=\"name\"   type=\"xsd:string\"/>\n      <xsd:element name=\"street\" type=\"xsd:string\"/>\n      <xsd:element name=\"city\"   type=\"xsd:string\"/>\n      <xsd:element name=\"state\"  type=\"xsd:string\"/>\n      <xsd:element name=\"zip\"    type=\"xsd:decimal\"/>\n    </xsd:sequence>\n    <xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\"\n                   fixed=\"US\"/>\n  </xsd:complexType>\n\n  <xsd:complexType name=\"Items\">\n    <xsd:sequence>\n      <xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"productName\" type=\"xsd:string\"/>\n            <xsd:element name=\"quantity\">\n              <xsd:simpleType>\n                <xsd:restriction base=\"xsd:positiveInteger\">\n                  <xsd:maxExclusive value=\"100\"/>\n                </xsd:restriction>\n              </xsd:simpleType>\n            </xsd:element>\n            <xsd:element name=\"USPrice\"  type=\"xsd:decimal\"/>\n            <xsd:element ref=\"comment\"   minOccurs=\"0\"/>\n            <xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/>\n          </xsd:sequence>\n          <xsd:attribute name=\"partNum\" type=\"SKU\" use=\"required\"/>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n\n  <!-- Stock Keeping Unit, a code for identifying products -->\n  <xsd:simpleType name=\"SKU\">\n    <xsd:restriction base=\"xsd:string\">\n      <xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/>\n    </xsd:restriction>\n  </xsd:simpleType>\n\n</xsd:schema>\n```\n\nA corresponding XML file `po.xml` might look like this:\n\n```xml\n<?xml version=\"1.0\"?>\n<purchaseOrder orderDate=\"1999-10-20\">\n   <shipTo country=\"US\">\n      <name>Alice Smith</name>\n      <street>123 Maple Street</street>\n      <city>Mill Valley</city>\n      <state>CA</state>\n      <zip>90952</zip>\n   </shipTo>\n   <billTo country=\"US\">\n      <name>Robert Smith</name>\n      <street>8 Oak Avenue</street>\n      <city>Old Town</city>\n      <state>PA</state>\n      <zip>95819</zip>\n   </billTo>\n   <comment>Hurry, my lawn is going wild</comment>\n   <items>\n      <item partNum=\"872-AA\">\n         <productName>Lawnmower</productName>\n         <quantity>1</quantity>\n         <USPrice>148.95</USPrice>\n         <comment>Confirm this is electric</comment>\n      </item>\n      <item partNum=\"926-AA\">\n         <productName>Baby Monitor</productName>\n         <quantity>1</quantity>\n         <USPrice>39.98</USPrice>\n         <shipDate>1999-05-21</shipDate>\n      </item>\n   </items>\n</purchaseOrder>\n```\n\nUsing the Guts code generator \n\n```bash\n$ xmlschema-to-guts po.xsd > po.py\n```\n\nwill produce a Python module `po.py`:\n\n```python\nfrom guts import *\n\nclass SKU(StringPattern):\n    pattern = '\\\\d{3}-[A-Z]{2}'\n\n\nclass Comment(String):\n    xmltagname = 'comment'\n\n\nclass Quantity(Int):\n    pass\n\n\nclass USAddress(Object):\n    country = String.T(default='US', optional=True, xmlstyle='attribute')\n    name = String.T()\n    street = String.T()\n    city = String.T()\n    state = String.T()\n    zip = Float.T()\n\n\nclass Item(Object):\n    part_num = SKU.T(xmlstyle='attribute')\n    product_name = String.T()\n    quantity = Quantity.T()\n    us_price = Float.T(xmltagname='USPrice')\n    comment = Comment.T(optional=True)\n    ship_date = DateTimestamp.T(optional=True)\n\n\nclass Items(Object):\n    item_list = List.T(Item.T())\n\n\nclass PurchaseOrderType(Object):\n    order_date = DateTimestamp.T(optional=True, xmlstyle='attribute')\n    ship_to = USAddress.T()\n    bill_to = USAddress.T()\n    comment = Comment.T(optional=True)\n    items = Items.T()\n\n\nclass PurchaseOrder(PurchaseOrderType):\n    xmltagname = 'purchaseOrder'\n```\n\nAnd we can use it e.g. to parse the example XML file `po.xml` from above:\n\n```pycon\n>>> from po import *\n>>> order = load_xml(filename='po.xml')\n>>> print order  # dumps YAML\n--- !po.PurchaseOrder\norder_date: '1999-10-20'\nship_to: !po.USAddress\n  name: Alice Smith\n  street: 123 Maple Street\n  city: Mill Valley\n  state: CA\n  zip: 90952.0\nbill_to: !po.USAddress\n  name: Robert Smith\n  street: 8 Oak Avenue\n  city: Old Town\n  state: PA\n  zip: 95819.0\ncomment: Hurry, my lawn is going wild\nitems: !po.Items\n  item_list:\n  - !po.Item\n    part_num: 872-AA\n    product_name: Lawnmower\n    quantity: 1\n    us_price: 148.95\n    comment: Confirm this is electric\n  - !po.Item\n    part_num: 926-AA\n    product_name: Baby Monitor\n    quantity: 1\n    us_price: 39.98\n    ship_date: '1999-05-21'\n```\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emolch/guts/", "keywords": "data-binding,xml,yaml", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "guts", "package_url": "https://pypi.org/project/guts/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/guts/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/emolch/guts/"}, "release_url": "https://pypi.org/project/guts/0.2/", "requires_dist": null, "requires_python": null, "summary": "Lightweight declarative YAML and XML data binding for Python.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <br>Guts<br>====<br> <br>Lightweight declarative YAML and XML data binding for Python<br><br>Guts is written by Sebastian Heimann &lt;sebastian.heimann@gfz-potsdam.de&gt;.  It is<br>released under the MIT license. See the file LICENSE for more details.<br><br>Prerequisites<br>-------------<br><br>  * PyYAML: Download it from http://pyyaml.org/wiki/PyYAML and follow the given<br>    installation instructions or install it through your system's package<br>    manager (e.g. the `python-yaml` package on Debian based Linuxes).<br><br>Usage<br>-----<br><br>A file `playlist.py` might look like:<br><br>```python<br>from guts import *<br><br>class Song(Object):<br>    name = String.T()<br>    album = String.T(default='')<br>    artist = String.T(default='')<br>    year = Int.T(optional=True)<br><br>class Playlist(Object):<br>    xmltagname = 'playlist'<br>    name = String.T(default='Untitled Playlist')<br>    comment = String.T(optional=True)<br>    song_list = List.T(Song.T())<br>```<br><br>These classes come with automatic `__init__`:<br><br>```pycon<br>&gt;&gt;&gt; from playlist import *<br>&gt;&gt;&gt; song1 = Song(name='Metropolis', artist='Kraftwerk')<br>&gt;&gt;&gt; song2 = Song(name='I Robot', artist='The Alan Parsons Project', album='I Robot')<br>&gt;&gt;&gt; playlist = Playlist(song_list=[song1,song2])<br>```<br><br>They serialize to YAML:<br><br>```pycon<br>&gt;&gt;&gt; print song1.dump()<br>--- !playlist.Song<br>name: Metropolis<br>artist: Kraftwerk<br>```<br><br>They also serialize to XML:<br><br>```pycon<br>&gt;&gt;&gt; print playlist.dump_xml()<br>&lt;playlist&gt;<br>  &lt;name&gt;Untitled Playlist&lt;/name&gt;<br>  &lt;song&gt;<br>    &lt;name&gt;Metropolis&lt;/name&gt;<br>    &lt;artist&gt;Kraftwerk&lt;/artist&gt;<br>  &lt;/song&gt;<br>  &lt;song&gt;<br>    &lt;name&gt;I Robot&lt;/name&gt;<br>    &lt;album&gt;I Robot&lt;/album&gt;<br>    &lt;artist&gt;The Alan Parsons Project&lt;/artist&gt;<br>  &lt;/song&gt;<br>&lt;/playlist&gt;<br>```<br><br>Objects can validate themselves:<br><br>```pycon<br>&gt;&gt;&gt; song1.validate()<br>&gt;&gt;&gt; song2.year = 1977<br>&gt;&gt;&gt; song2.validate()<br>&gt;&gt;&gt; song2.year = 'abc'<br>&gt;&gt;&gt; song2.validate()<br>Traceback (most recent call last):<br>...<br>guts.ValidationError: year: \"abc\" is not of type int<br>```<br><br>Objects can regularize themselves:<br><br>```pycon<br>&gt;&gt;&gt; song2.year = '1977'<br>&gt;&gt;&gt; song2.regularize()<br>&gt;&gt;&gt; song2.year<br>1977<br>&gt;&gt;&gt; type(song2.year)<br>&lt;type 'int'&gt;<br>```<br><br>They also deserialize from YAML and XML:<br><br>```pycon<br>&gt;&gt;&gt; playlist2 = load_string(playlist.dump())<br>&gt;&gt;&gt; playlist3 = load_xml_string(playlist.dump_xml())<br>```<br><br>Incremental loading of large YAML or XML files is supported with the<br>`guts.iload_all()` and `guts.iload_all_xml()` functions, which are buildt to<br>return generators yielding Guts objects.<br><br>This module comes with a rudimentary code generator `xmlschema-to-guts` to turn<br>(some) XML Schema definitions (XSD) into Python modules containing Guts class<br>hierarchies. <br><br>Here is an example using the first example in the W3C XML Schema Primer. The<br>Schema shall be defined in `po.xsd`:<br><br>```xml<br>&lt;xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;<br><br>  &lt;xsd:annotation&gt;<br>    &lt;xsd:documentation xml:lang=\"en\"&gt;<br>     Purchase order schema for Example.com.<br>     Copyright 2000 Example.com. All rights reserved.<br>    &lt;/xsd:documentation&gt;<br>  &lt;/xsd:annotation&gt;<br><br>  &lt;xsd:element name=\"purchaseOrder\" type=\"PurchaseOrderType\"/&gt;<br><br>  &lt;xsd:element name=\"comment\" type=\"xsd:string\"/&gt;<br><br>  &lt;xsd:complexType name=\"PurchaseOrderType\"&gt;<br>    &lt;xsd:sequence&gt;<br>      &lt;xsd:element name=\"shipTo\" type=\"USAddress\"/&gt;<br>      &lt;xsd:element name=\"billTo\" type=\"USAddress\"/&gt;<br>      &lt;xsd:element ref=\"comment\" minOccurs=\"0\"/&gt;<br>      &lt;xsd:element name=\"items\"  type=\"Items\"/&gt;<br>    &lt;/xsd:sequence&gt;<br>    &lt;xsd:attribute name=\"orderDate\" type=\"xsd:date\"/&gt;<br>  &lt;/xsd:complexType&gt;<br><br>  &lt;xsd:complexType name=\"USAddress\"&gt;<br>    &lt;xsd:sequence&gt;<br>      &lt;xsd:element name=\"name\"   type=\"xsd:string\"/&gt;<br>      &lt;xsd:element name=\"street\" type=\"xsd:string\"/&gt;<br>      &lt;xsd:element name=\"city\"   type=\"xsd:string\"/&gt;<br>      &lt;xsd:element name=\"state\"  type=\"xsd:string\"/&gt;<br>      &lt;xsd:element name=\"zip\"    type=\"xsd:decimal\"/&gt;<br>    &lt;/xsd:sequence&gt;<br>    &lt;xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\"<br>                   fixed=\"US\"/&gt;<br>  &lt;/xsd:complexType&gt;<br><br>  &lt;xsd:complexType name=\"Items\"&gt;<br>    &lt;xsd:sequence&gt;<br>      &lt;xsd:element name=\"item\" minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;<br>        &lt;xsd:complexType&gt;<br>          &lt;xsd:sequence&gt;<br>            &lt;xsd:element name=\"productName\" type=\"xsd:string\"/&gt;<br>            &lt;xsd:element name=\"quantity\"&gt;<br>              &lt;xsd:simpleType&gt;<br>                &lt;xsd:restriction base=\"xsd:positiveInteger\"&gt;<br>                  &lt;xsd:maxExclusive value=\"100\"/&gt;<br>                &lt;/xsd:restriction&gt;<br>              &lt;/xsd:simpleType&gt;<br>            &lt;/xsd:element&gt;<br>            &lt;xsd:element name=\"USPrice\"  type=\"xsd:decimal\"/&gt;<br>            &lt;xsd:element ref=\"comment\"   minOccurs=\"0\"/&gt;<br>            &lt;xsd:element name=\"shipDate\" type=\"xsd:date\" minOccurs=\"0\"/&gt;<br>          &lt;/xsd:sequence&gt;<br>          &lt;xsd:attribute name=\"partNum\" type=\"SKU\" use=\"required\"/&gt;<br>        &lt;/xsd:complexType&gt;<br>      &lt;/xsd:element&gt;<br>    &lt;/xsd:sequence&gt;<br>  &lt;/xsd:complexType&gt;<br><br>  &lt;!-- Stock Keeping Unit, a code for identifying products --&gt;<br>  &lt;xsd:simpleType name=\"SKU\"&gt;<br>    &lt;xsd:restriction base=\"xsd:string\"&gt;<br>      &lt;xsd:pattern value=\"\\d{3}-[A-Z]{2}\"/&gt;<br>    &lt;/xsd:restriction&gt;<br>  &lt;/xsd:simpleType&gt;<br><br>&lt;/xsd:schema&gt;<br>```<br><br>A corresponding XML file `po.xml` might look like this:<br><br>```xml<br>&lt;?xml version=\"1.0\"?&gt;<br>&lt;purchaseOrder orderDate=\"1999-10-20\"&gt;<br>   &lt;shipTo country=\"US\"&gt;<br>      &lt;name&gt;Alice Smith&lt;/name&gt;<br>      &lt;street&gt;123 Maple Street&lt;/street&gt;<br>      &lt;city&gt;Mill Valley&lt;/city&gt;<br>      &lt;state&gt;CA&lt;/state&gt;<br>      &lt;zip&gt;90952&lt;/zip&gt;<br>   &lt;/shipTo&gt;<br>   &lt;billTo country=\"US\"&gt;<br>      &lt;name&gt;Robert Smith&lt;/name&gt;<br>      &lt;street&gt;8 Oak Avenue&lt;/street&gt;<br>      &lt;city&gt;Old Town&lt;/city&gt;<br>      &lt;state&gt;PA&lt;/state&gt;<br>      &lt;zip&gt;95819&lt;/zip&gt;<br>   &lt;/billTo&gt;<br>   &lt;comment&gt;Hurry, my lawn is going wild&lt;/comment&gt;<br>   &lt;items&gt;<br>      &lt;item partNum=\"872-AA\"&gt;<br>         &lt;productName&gt;Lawnmower&lt;/productName&gt;<br>         &lt;quantity&gt;1&lt;/quantity&gt;<br>         &lt;USPrice&gt;148.95&lt;/USPrice&gt;<br>         &lt;comment&gt;Confirm this is electric&lt;/comment&gt;<br>      &lt;/item&gt;<br>      &lt;item partNum=\"926-AA\"&gt;<br>         &lt;productName&gt;Baby Monitor&lt;/productName&gt;<br>         &lt;quantity&gt;1&lt;/quantity&gt;<br>         &lt;USPrice&gt;39.98&lt;/USPrice&gt;<br>         &lt;shipDate&gt;1999-05-21&lt;/shipDate&gt;<br>      &lt;/item&gt;<br>   &lt;/items&gt;<br>&lt;/purchaseOrder&gt;<br>```<br><br>Using the Guts code generator <br><br>```bash<br>$ xmlschema-to-guts po.xsd &gt; po.py<br>```<br><br>will produce a Python module `po.py`:<br><br>```python<br>from guts import *<br><br>class SKU(StringPattern):<br>    pattern = '\\\\d{3}-[A-Z]{2}'<br><br><br>class Comment(String):<br>    xmltagname = 'comment'<br><br><br>class Quantity(Int):<br>    pass<br><br><br>class USAddress(Object):<br>    country = String.T(default='US', optional=True, xmlstyle='attribute')<br>    name = String.T()<br>    street = String.T()<br>    city = String.T()<br>    state = String.T()<br>    zip = Float.T()<br><br><br>class Item(Object):<br>    part_num = SKU.T(xmlstyle='attribute')<br>    product_name = String.T()<br>    quantity = Quantity.T()<br>    us_price = Float.T(xmltagname='USPrice')<br>    comment = Comment.T(optional=True)<br>    ship_date = DateTimestamp.T(optional=True)<br><br><br>class Items(Object):<br>    item_list = List.T(Item.T())<br><br><br>class PurchaseOrderType(Object):<br>    order_date = DateTimestamp.T(optional=True, xmlstyle='attribute')<br>    ship_to = USAddress.T()<br>    bill_to = USAddress.T()<br>    comment = Comment.T(optional=True)<br>    items = Items.T()<br><br><br>class PurchaseOrder(PurchaseOrderType):<br>    xmltagname = 'purchaseOrder'<br>```<br><br>And we can use it e.g. to parse the example XML file `po.xml` from above:<br><br>```pycon<br>&gt;&gt;&gt; from po import *<br>&gt;&gt;&gt; order = load_xml(filename='po.xml')<br>&gt;&gt;&gt; print order  # dumps YAML<br>--- !po.PurchaseOrder<br>order_date: '1999-10-20'<br>ship_to: !po.USAddress<br>  name: Alice Smith<br>  street: 123 Maple Street<br>  city: Mill Valley<br>  state: CA<br>  zip: 90952.0<br>bill_to: !po.USAddress<br>  name: Robert Smith<br>  street: 8 Oak Avenue<br>  city: Old Town<br>  state: PA<br>  zip: 95819.0<br>comment: Hurry, my lawn is going wild<br>items: !po.Items<br>  item_list:<br>  - !po.Item<br>    part_num: 872-AA<br>    product_name: Lawnmower<br>    quantity: 1<br>    us_price: 148.95<br>    comment: Confirm this is electric<br>  - !po.Item<br>    part_num: 926-AA<br>    product_name: Baby Monitor<br>    quantity: 1<br>    us_price: 39.98<br>    ship_date: '1999-05-21'<br>```<br><br>\n          </div>"}, "last_serial": 907309, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9efb14498cb68c53b526ba8b9e82fa19", "sha256": "4f4ede13a5f540cb6377fa282764e3d4ab69821ca7d6b83ad70a8053efb53509"}, "downloads": -1, "filename": "guts-0.1.tar.gz", "has_sig": false, "md5_digest": "9efb14498cb68c53b526ba8b9e82fa19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18292, "upload_time": "2013-01-31T15:07:09", "upload_time_iso_8601": "2013-01-31T15:07:09.599308Z", "url": "https://files.pythonhosted.org/packages/d6/0e/8f81252315dbb932784e65f68d93eee91876213a827270aa536d7d0f4527/guts-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "dc93209f3036a62172c79eb4de2ecd6a", "sha256": "9ed5bb05989e5805ccbcccf66fb10808d38d409fc504ea281d6174de0b0fc058"}, "downloads": -1, "filename": "guts-0.2.tar.gz", "has_sig": false, "md5_digest": "dc93209f3036a62172c79eb4de2ecd6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19634, "upload_time": "2013-10-30T13:08:00", "upload_time_iso_8601": "2013-10-30T13:08:00.914591Z", "url": "https://files.pythonhosted.org/packages/a8/9c/5f82b18693fbf05b887a447022163e044e8cf66c4f8ce5699cce28bf4433/guts-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc93209f3036a62172c79eb4de2ecd6a", "sha256": "9ed5bb05989e5805ccbcccf66fb10808d38d409fc504ea281d6174de0b0fc058"}, "downloads": -1, "filename": "guts-0.2.tar.gz", "has_sig": false, "md5_digest": "dc93209f3036a62172c79eb4de2ecd6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19634, "upload_time": "2013-10-30T13:08:00", "upload_time_iso_8601": "2013-10-30T13:08:00.914591Z", "url": "https://files.pythonhosted.org/packages/a8/9c/5f82b18693fbf05b887a447022163e044e8cf66c4f8ce5699cce28bf4433/guts-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:08 2020"}