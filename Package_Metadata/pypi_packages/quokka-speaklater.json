{"info": {"author": "Armin Ronacher", "author_email": "armin.ronacher@active-4.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development :: Internationalization"], "description": "speaklater\n~~~~~~~~~~\n\nA module that provides lazy strings for translations.  Basically you\nget an object that appears to be a string but changes the value every\ntime the value is evaluated based on a callable you provide.\n\nFor example you can have a global `lazy_gettext` function that returns\na lazy string with the value of the current set language.\n\nExample:\n\n>>> from speaklater import make_lazy_string\n>>> sval = u'Hello World'\n>>> string = make_lazy_string(lambda: sval)\n\nThis lazy string will evaluate to the value of the `sval` variable.\n\n>>> string\nlu'Hello World'\n>>> unicode(string)\nu'Hello World'\n>>> string.upper()\nu'HELLO WORLD'\n\nIf you change the value, the lazy string will change as well:\n\n>>> sval = u'Hallo Welt'\n>>> string.upper()\nu'HALLO WELT'\n\nThis is especially handy when combined with a thread local and gettext\ntranslations or dicts of translatable strings:\n\n>>> from speaklater import make_lazy_gettext\n>>> from threading import local\n>>> l = local()\n>>> l.translations = {u'Yes': 'Ja'}\n>>> lazy_gettext = make_lazy_gettext(lambda: l.translations.get)\n>>> yes = lazy_gettext(u'Yes')\n>>> print yes\nJa\n>>> l.translations[u'Yes'] = u'Si'\n>>> print yes\nSi\n\nLazy strings are no real strings so if you pass this sort of string to\na function that performs an instance check, it will fail.  In that case\nyou have to explicitly convert it with `unicode` and/or `string` depending\non what string type the lazy string encapsulates.\n\nTo check if a string is lazy, you can use the `is_lazy_string` function:\n\n>>> from speaklater import is_lazy_string\n>>> is_lazy_string(u'yes')\nFalse\n>>> is_lazy_string(yes)\nTrue\n\nNew in version 1.2: It's now also possible to pass keyword arguments to\nthe callback used with `make_lazy_string`.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mitsuhiko/speaklater", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "quokka-speaklater", "package_url": "https://pypi.org/project/quokka-speaklater/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/quokka-speaklater/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mitsuhiko/speaklater"}, "release_url": "https://pypi.org/project/quokka-speaklater/1.3.1/", "requires_dist": null, "requires_python": null, "summary": "Fork of implements a lazy string for python useful for use with gettext", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A module that provides lazy strings for translations.  Basically you\nget an object that appears to be a string but changes the value every\ntime the value is evaluated based on a callable you provide.</p>\n<p>For example you can have a global <cite>lazy_gettext</cite> function that returns\na lazy string with the value of the current set language.</p>\n<p>Example:</p>\n<pre>&gt;&gt;&gt; from speaklater import make_lazy_string\n&gt;&gt;&gt; sval = u'Hello World'\n&gt;&gt;&gt; string = make_lazy_string(lambda: sval)\n</pre>\n<p>This lazy string will evaluate to the value of the <cite>sval</cite> variable.</p>\n<pre>&gt;&gt;&gt; string\nlu'Hello World'\n&gt;&gt;&gt; unicode(string)\nu'Hello World'\n&gt;&gt;&gt; string.upper()\nu'HELLO WORLD'\n</pre>\n<p>If you change the value, the lazy string will change as well:</p>\n<pre>&gt;&gt;&gt; sval = u'Hallo Welt'\n&gt;&gt;&gt; string.upper()\nu'HALLO WELT'\n</pre>\n<p>This is especially handy when combined with a thread local and gettext\ntranslations or dicts of translatable strings:</p>\n<pre>&gt;&gt;&gt; from speaklater import make_lazy_gettext\n&gt;&gt;&gt; from threading import local\n&gt;&gt;&gt; l = local()\n&gt;&gt;&gt; l.translations = {u'Yes': 'Ja'}\n&gt;&gt;&gt; lazy_gettext = make_lazy_gettext(lambda: l.translations.get)\n&gt;&gt;&gt; yes = lazy_gettext(u'Yes')\n&gt;&gt;&gt; print yes\nJa\n&gt;&gt;&gt; l.translations[u'Yes'] = u'Si'\n&gt;&gt;&gt; print yes\nSi\n</pre>\n<p>Lazy strings are no real strings so if you pass this sort of string to\na function that performs an instance check, it will fail.  In that case\nyou have to explicitly convert it with <cite>unicode</cite> and/or <cite>string</cite> depending\non what string type the lazy string encapsulates.</p>\n<p>To check if a string is lazy, you can use the <cite>is_lazy_string</cite> function:</p>\n<pre>&gt;&gt;&gt; from speaklater import is_lazy_string\n&gt;&gt;&gt; is_lazy_string(u'yes')\nFalse\n&gt;&gt;&gt; is_lazy_string(yes)\nTrue\n</pre>\n<p>New in version 1.2: It\u2019s now also possible to pass keyword arguments to\nthe callback used with <cite>make_lazy_string</cite>.</p>\n\n          </div>"}, "last_serial": 1689871, "releases": {"1.3": [{"comment_text": "", "digests": {"md5": "473e929efc8d05ad3395b9d925569ca9", "sha256": "de690e8668faac096e7cd943711d91e3da378475555b69ade29df654aa111fcc"}, "downloads": -1, "filename": "quokka-speaklater-1.3.tar.gz", "has_sig": false, "md5_digest": "473e929efc8d05ad3395b9d925569ca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3968, "upload_time": "2015-08-23T16:56:24", "upload_time_iso_8601": "2015-08-23T16:56:24.947316Z", "url": "https://files.pythonhosted.org/packages/dc/6f/d69a618941257c926acd11b9fdd3f6649758a6723abb621bcb901af5ccb6/quokka-speaklater-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "f530f1b29d72c402737afc97ee0afda4", "sha256": "c8344791f6ada654b205ec98d0a28e439f8c38cec8241552556787b2d7fd42f7"}, "downloads": -1, "filename": "quokka-speaklater-1.3.1.tar.gz", "has_sig": false, "md5_digest": "f530f1b29d72c402737afc97ee0afda4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3979, "upload_time": "2015-08-23T18:00:22", "upload_time_iso_8601": "2015-08-23T18:00:22.164076Z", "url": "https://files.pythonhosted.org/packages/60/2c/fe5738399d4b1deda4fba4aa4f36525ccc2e4ea5e6418e04f73c4c2ba8cb/quokka-speaklater-1.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f530f1b29d72c402737afc97ee0afda4", "sha256": "c8344791f6ada654b205ec98d0a28e439f8c38cec8241552556787b2d7fd42f7"}, "downloads": -1, "filename": "quokka-speaklater-1.3.1.tar.gz", "has_sig": false, "md5_digest": "f530f1b29d72c402737afc97ee0afda4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3979, "upload_time": "2015-08-23T18:00:22", "upload_time_iso_8601": "2015-08-23T18:00:22.164076Z", "url": "https://files.pythonhosted.org/packages/60/2c/fe5738399d4b1deda4fba4aa4f36525ccc2e4ea5e6418e04f73c4c2ba8cb/quokka-speaklater-1.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:17 2020"}