{"info": {"author": "Andrey Semakin", "author_email": "and-semakin@ya.ru", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# marshmallow-toplevel\nLoad and validate top-level lists with all the power of\n[marshmallow](https://github.com/marshmallow-code/marshmallow).\n\n## Installation\n\n```sh\npip install marshmallow-toplevel\n```\n\n## Usage\n\n```python\nfrom marshmallow import fields\nfrom marshmallow_toplevel import TopLevelSchema\n\n\nclass BatchOfSomething(TopLevelSchema):\n    _toplevel = fields.Nested(\n        SomethingSchema,\n        required=True,\n        many=True,\n        validate=any_validation_logic_applied_to_list\n    )\n```\n\n## Rationale\n\nImagine that you have an API endpoint (or any other program that\naccepts user input), which is intended to accept multiple blog articles\nand save them to a database. Semantically, your data is a list of dictionaries:\n\n```python\n[\n    {\"id\": 1, \"title\": \"Hello World!\"},\n    {\"id\": 2, \"title\": \"Yet another awesome article.\"},\n    ...\n]\n```\n\nYou describe article object schema and put constraints on your data:\n\n```python\nfrom marshmallow import Schema, fields, validate\n\n\nclass ArticleSchema(Schema):\n    id = fields.Int(required=True)\n    title = fields.Str(required=True, validate=validate.Length(min=2, max=256))\n```\n\nBut you also want to put some constraints onto outer list itself, for example,\nyou want it to have length between 1 and 10. How do you describe it in\nterms of `marshmallow`?\n\n### Obvious solution: nest your data\n\n```python\nclass BatchOfArticles(Schema):\n    articles = fields.Nested(\n        ArticleSchema,\n        required=True,\n        many=True,\n        validate=validate.Length(1, 10)\n    )\n```\n\nBut now a client have to send data this way, with this extra dictionary around:\n\n```python\n{\n    \"articles\": [\n        {\"id\": 1, \"title\": \"Hello World!\"},\n        {\"id\": 2, \"title\": \"Yet another awesome article.\"},\n        ...\n    ]\n}\n```\n\nIt makes your API not so beautiful and user-friendly.\n\n### Good solution: use marshmallow-toplevel\n\nWith `marshmallow-toplevel` you can describe you data this way:\n\n```python\nfrom marshmallow_toplevel import TopLevelSchema\n\n\nclass BatchOfArticles(TopLevelSchema):\n    _toplevel = fields.Nested(\n        ArticleSchema,\n        required=True,\n        many=True,\n        validate=validate.Length(1, 10)\n    )\n```\n\nNotice that schema inherits from `TopLevelSchema` and uses this\nspecial `_toplevel` key. It means that the field under this key\ndescribes top level object. You can define any constrains that\nyou can define in `marshmallow` and it will just work:\n\n```python\nschema = BatchOfArticles()\n\n# validation should fail\nerrors = schema.validate([])\nassert errors  # length < 1\nerrors = schema.validate([{\"id\": i, \"title\": \"title\"} for i in range(100)])\nassert errors  # length > 10\n\n# validation should succeed\nerrors = schema.validate([{\"id\": i, \"title\": \"title\"} for i in range(5)])\nassert not errors\n```\n\nYou can also use `load` for this schema as usual:\n\n```python\ndata = schema.load([{\"id\": \"10\", \"title\": \"wow!\"}])\nprint(data)\n# [{\"id\": 10, \"title\": \"wow!\"}]\n```\n\nNow a client can send data as a list without redundancy.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/and-semakin/marshmallow-toplevel", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "marshmallow-toplevel", "package_url": "https://pypi.org/project/marshmallow-toplevel/", "platform": "", "project_url": "https://pypi.org/project/marshmallow-toplevel/", "project_urls": {"Documentation": "https://github.com/and-semakin/marshmallow-toplevel", "Homepage": "https://github.com/and-semakin/marshmallow-toplevel", "Repository": "https://github.com/and-semakin/marshmallow-toplevel"}, "release_url": "https://pypi.org/project/marshmallow-toplevel/0.1.2/", "requires_dist": ["marshmallow (>=3.0.0,<4.0.0)", "pytest (>=5.3.2,<6.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "Validate top-level lists with all the power of marshmallow", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>marshmallow-toplevel</h1>\n<p>Load and validate top-level lists with all the power of\n<a href=\"https://github.com/marshmallow-code/marshmallow\" rel=\"nofollow\">marshmallow</a>.</p>\n<h2>Installation</h2>\n<pre>pip install marshmallow-toplevel\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n<span class=\"kn\">from</span> <span class=\"nn\">marshmallow_toplevel</span> <span class=\"kn\">import</span> <span class=\"n\">TopLevelSchema</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BatchOfSomething</span><span class=\"p\">(</span><span class=\"n\">TopLevelSchema</span><span class=\"p\">):</span>\n    <span class=\"n\">_toplevel</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Nested</span><span class=\"p\">(</span>\n        <span class=\"n\">SomethingSchema</span><span class=\"p\">,</span>\n        <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">any_validation_logic_applied_to_list</span>\n    <span class=\"p\">)</span>\n</pre>\n<h2>Rationale</h2>\n<p>Imagine that you have an API endpoint (or any other program that\naccepts user input), which is intended to accept multiple blog articles\nand save them to a database. Semantically, your data is a list of dictionaries:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello World!\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Yet another awesome article.\"</span><span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>You describe article object schema and put constraints on your data:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">validate</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleSchema</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">validate</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">))</span>\n</pre>\n<p>But you also want to put some constraints onto outer list itself, for example,\nyou want it to have length between 1 and 10. How do you describe it in\nterms of <code>marshmallow</code>?</p>\n<h3>Obvious solution: nest your data</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BatchOfArticles</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Nested</span><span class=\"p\">(</span>\n        <span class=\"n\">ArticleSchema</span><span class=\"p\">,</span>\n        <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">validate</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>But now a client have to send data this way, with this extra dictionary around:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"articles\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello World!\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Yet another awesome article.\"</span><span class=\"p\">},</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>It makes your API not so beautiful and user-friendly.</p>\n<h3>Good solution: use marshmallow-toplevel</h3>\n<p>With <code>marshmallow-toplevel</code> you can describe you data this way:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">marshmallow_toplevel</span> <span class=\"kn\">import</span> <span class=\"n\">TopLevelSchema</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BatchOfArticles</span><span class=\"p\">(</span><span class=\"n\">TopLevelSchema</span><span class=\"p\">):</span>\n    <span class=\"n\">_toplevel</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Nested</span><span class=\"p\">(</span>\n        <span class=\"n\">ArticleSchema</span><span class=\"p\">,</span>\n        <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">validate</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Notice that schema inherits from <code>TopLevelSchema</code> and uses this\nspecial <code>_toplevel</code> key. It means that the field under this key\ndescribes top level object. You can define any constrains that\nyou can define in <code>marshmallow</code> and it will just work:</p>\n<pre><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">BatchOfArticles</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># validation should fail</span>\n<span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">([])</span>\n<span class=\"k\">assert</span> <span class=\"n\">errors</span>  <span class=\"c1\"># length &lt; 1</span>\n<span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">([{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"title\"</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)])</span>\n<span class=\"k\">assert</span> <span class=\"n\">errors</span>  <span class=\"c1\"># length &gt; 10</span>\n\n<span class=\"c1\"># validation should succeed</span>\n<span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">([{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"title\"</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)])</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">errors</span>\n</pre>\n<p>You can also use <code>load</code> for this schema as usual:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">([{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10\"</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"wow!\"</span><span class=\"p\">}])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"c1\"># [{\"id\": 10, \"title\": \"wow!\"}]</span>\n</pre>\n<p>Now a client can send data as a list without redundancy.</p>\n\n          </div>"}, "last_serial": 6358183, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "08f22162a59109aef68df9dbef15a2e2", "sha256": "cf99d14057efc4be5f6e22bdd7746d805d8f1b9f0d6c57b968abcc165245a3ba"}, "downloads": -1, "filename": "marshmallow_toplevel-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "08f22162a59109aef68df9dbef15a2e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 1825, "upload_time": "2019-12-24T18:11:18", "upload_time_iso_8601": "2019-12-24T18:11:18.631022Z", "url": "https://files.pythonhosted.org/packages/dd/c4/824e5e6d0ff47cc988649b20b630e124a1ac5bec4d6ad6f4fc8ce07690a7/marshmallow_toplevel-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38179c0a87465eefa4c13dd699ca0130", "sha256": "02bc521c6161c5018ec16d62fa4aa45ba28399912eb06e0f65ea82331c950314"}, "downloads": -1, "filename": "marshmallow_toplevel-0.1.0.tar.gz", "has_sig": false, "md5_digest": "38179c0a87465eefa4c13dd699ca0130", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 1862, "upload_time": "2019-12-24T18:11:21", "upload_time_iso_8601": "2019-12-24T18:11:21.100720Z", "url": "https://files.pythonhosted.org/packages/80/db/65e44a6aebd7ab1c36e559245abd03e31dc93f83b7638c0879ddab45d04f/marshmallow_toplevel-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2e0b25e5c347cb3df3b12061e2a1b998", "sha256": "930db157632318a47f5144d2cd1bd95b23e5feb8e9b9ad89cc722bfe014540ff"}, "downloads": -1, "filename": "marshmallow_toplevel-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2e0b25e5c347cb3df3b12061e2a1b998", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 2970, "upload_time": "2019-12-24T18:23:33", "upload_time_iso_8601": "2019-12-24T18:23:33.751681Z", "url": "https://files.pythonhosted.org/packages/50/a9/64d471822129fee3a4d2bb3daec73c32f7532890d0f4222a859e5aa8228c/marshmallow_toplevel-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a18ecec2b0e61deee8449ac1da58317", "sha256": "2c39d6adbc31a6fd51883280c96c0e03a654be607940e89cc6307e9d9300ff67"}, "downloads": -1, "filename": "marshmallow_toplevel-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0a18ecec2b0e61deee8449ac1da58317", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 3470, "upload_time": "2019-12-24T18:23:35", "upload_time_iso_8601": "2019-12-24T18:23:35.421007Z", "url": "https://files.pythonhosted.org/packages/ad/2e/dd4217f8e850536f5a1c94264099bff07c62960a13c94dfad15e5c4a3fa9/marshmallow_toplevel-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3859af154357a1b8b822d8c02df47759", "sha256": "0855766aa85ad69197f02abeef402c8b9ff44660dbced797cf3128a1ca32aad6"}, "downloads": -1, "filename": "marshmallow_toplevel-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3859af154357a1b8b822d8c02df47759", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3809, "upload_time": "2019-12-25T09:26:10", "upload_time_iso_8601": "2019-12-25T09:26:10.393703Z", "url": "https://files.pythonhosted.org/packages/69/7a/15962704e15dbbe6dce0f6b253f2412697a7e3c1957a1d1d8e0d3f68cf6e/marshmallow_toplevel-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36a7f70a2dcdd01b70642369028ae2a2", "sha256": "dc34a24433bbb9b87dcf8331377e4c0a413beb96235b3516cb84908462aa373d"}, "downloads": -1, "filename": "marshmallow-toplevel-0.1.2.tar.gz", "has_sig": false, "md5_digest": "36a7f70a2dcdd01b70642369028ae2a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4145, "upload_time": "2019-12-25T09:26:08", "upload_time_iso_8601": "2019-12-25T09:26:08.558165Z", "url": "https://files.pythonhosted.org/packages/2a/d2/c983c2ada34f5fa3d820072d44feb675c5ee07f8179bdabbe03290a8baa1/marshmallow-toplevel-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3859af154357a1b8b822d8c02df47759", "sha256": "0855766aa85ad69197f02abeef402c8b9ff44660dbced797cf3128a1ca32aad6"}, "downloads": -1, "filename": "marshmallow_toplevel-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3859af154357a1b8b822d8c02df47759", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3809, "upload_time": "2019-12-25T09:26:10", "upload_time_iso_8601": "2019-12-25T09:26:10.393703Z", "url": "https://files.pythonhosted.org/packages/69/7a/15962704e15dbbe6dce0f6b253f2412697a7e3c1957a1d1d8e0d3f68cf6e/marshmallow_toplevel-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36a7f70a2dcdd01b70642369028ae2a2", "sha256": "dc34a24433bbb9b87dcf8331377e4c0a413beb96235b3516cb84908462aa373d"}, "downloads": -1, "filename": "marshmallow-toplevel-0.1.2.tar.gz", "has_sig": false, "md5_digest": "36a7f70a2dcdd01b70642369028ae2a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4145, "upload_time": "2019-12-25T09:26:08", "upload_time_iso_8601": "2019-12-25T09:26:08.558165Z", "url": "https://files.pythonhosted.org/packages/2a/d2/c983c2ada34f5fa3d820072d44feb675c5ee07f8179bdabbe03290a8baa1/marshmallow-toplevel-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:34 2020"}