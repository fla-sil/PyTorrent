{"info": {"author": "nir0s", "author_email": "nir36g@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: Microsoft", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing", "Topic :: System :: Logging"], "description": "feeder\n======\n\n|Build Status|\n\n|Gitter chat|\n\n|PyPI|\n\n|PypI|\n\nfeeder generates events/logs using a specified formatter and sends them\nusing the specified transport. It can also generate fake data using\nfake-factory.\n\nQuick Start\n~~~~~~~~~~~\n\n`Quick\nStart <http://feeder.readthedocs.org/en/latest/quick_start.html>`__\n\nDocumentation\n~~~~~~~~~~~~~\n\n`feeder Documentation <http://feeder.readthedocs.org>`__\n\nInstallation\n~~~~~~~~~~~~\n\n.. code:: shell\n\n     pip install feeder\n     # or, for dev:\n     pip install https://github.com/nir0s/feeder/archive/master.tar.gz\n\nUsage Examples\n~~~~~~~~~~~~~~\n\nsee `feeder\nconfig <http://feeder.readthedocs.org/en/latest/configuration.html>`__\nand `advanced\nconfig <http://feeder.readthedocs.org/en/latest/advanced_configuration.html>`__\nto configure your transports and formatters.\n\n.. code:: shell\n\n     # this will assume config.py in the cwd and assume default for each option\n     mouth feed\n     # or.. you can specify whatever you want in the cli..\n     mouth feed -c /my/config/file/path.py -t AMQP -f Json -g 0.001 -m 100000000\n     mouth feed -t UDP -f Custom -g 0.00001 -m 102831028\n     # you can also send in batches\n     mouth feed -t UDP -f Custom -g 0.01 -m 102831028 -b 1000\n     # and even use some common formatters like apache's..\n     mouth feed -t Stream -f ApacheError\n     # print fake data types that you can use in the config...\n     mouth list fake\n     # print a list of available transports\n     mouth list transports\n     # print a list of available formatters\n     mouth list formatters\n\nAdditional Information\n~~~~~~~~~~~~~~~~~~~~~~\n\n-  `Use\n   Case <http://feeder.readthedocs.org/en/latest/case_study.html>`__\n-  `Configuration <http://feeder.readthedocs.org/en/latest/configuration.html>`__\n-  `formatters <http://feeder.readthedocs.org/en/latest/formatters.html>`__\n-  `transports <http://feeder.readthedocs.org/en/latest/transports.html>`__\n-  `API <http://feeder.readthedocs.org/en/latest/api.html>`__\n-  `InHouseFaker <http://feeder.readthedocs.org/en/latest/in_house_faker.html>`__\n\nVagrant\n~~~~~~~\n\nA vagrantfile is provided: It will load a machine and install feeder on\nit in a virtualenv so that you can experiment with it. For a machine\ncontaining feeder, ELK and RabbitMQ see the `elk-workshop\nrepo <https://github.com/nir0s/elk-workshop>`__.\n\n.. |Build Status| image:: https://travis-ci.org/nir0s/feeder.svg?branch=master\n   :target: https://travis-ci.org/nir0s/feeder\n.. |Gitter chat| image:: https://badges.gitter.im/nir0s/feeder.png\n   :target: https://gitter.im/nir0s/feeder\n.. |PyPI| image:: http://img.shields.io/pypi/dm/feeder.svg\n   :target: http://img.shields.io/pypi/dm/feeder.svg\n.. |PypI| image:: http://img.shields.io/pypi/v/feeder.svg\n   :target: http://img.shields.io/pypi/v/feeder.svg", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/nir0s/feedr/tarball/0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nir0s/feedr", "keywords": null, "license": "LICENSE", "maintainer": null, "maintainer_email": null, "name": "feedr", "package_url": "https://pypi.org/project/feedr/", "platform": "All", "project_url": "https://pypi.org/project/feedr/", "project_urls": {"Download": "https://github.com/nir0s/feedr/tarball/0.1", "Homepage": "https://github.com/nir0s/feedr"}, "release_url": "https://pypi.org/project/feedr/0.5.1/", "requires_dist": null, "requires_python": null, "summary": "Data feedr using different transports", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/nir0s/feeder\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/914b784c2d271696b68306903f115992ade497c4/68747470733a2f2f7472617669732d63692e6f72672f6e697230732f6665656465722e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"https://gitter.im/nir0s/feeder\" rel=\"nofollow\"><img alt=\"Gitter chat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ea69d3f2e951d67c7a0f67ef91cb595a7fca94c/68747470733a2f2f6261646765732e6769747465722e696d2f6e697230732f6665656465722e706e67\"></a></p>\n<p><a href=\"http://img.shields.io/pypi/dm/feeder.svg\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6edf6da2a1b7c6d7b9506809a9411b876e01b0b/687474703a2f2f696d672e736869656c64732e696f2f707970692f646d2f6665656465722e737667\"></a></p>\n<p><a href=\"http://img.shields.io/pypi/v/feeder.svg\" rel=\"nofollow\"><img alt=\"PypI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8573ee4cb0868da56e1d94c0fc5f32fe34f69eee/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f6665656465722e737667\"></a></p>\n<p>feeder generates events/logs using a specified formatter and sends them\nusing the specified transport. It can also generate fake data using\nfake-factory.</p>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p><a href=\"http://feeder.readthedocs.org/en/latest/quick_start.html\" rel=\"nofollow\">Quick\nStart</a></p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><a href=\"http://feeder.readthedocs.org\" rel=\"nofollow\">feeder Documentation</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install feeder\n<span class=\"c1\"># or, for dev:\n</span>pip install https://github.com/nir0s/feeder/archive/master.tar.gz\n</pre>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage Examples</h2>\n<p>see <a href=\"http://feeder.readthedocs.org/en/latest/configuration.html\" rel=\"nofollow\">feeder\nconfig</a>\nand <a href=\"http://feeder.readthedocs.org/en/latest/advanced_configuration.html\" rel=\"nofollow\">advanced\nconfig</a>\nto configure your transports and formatters.</p>\n<pre><span class=\"c1\"># this will assume config.py in the cwd and assume default for each option\n</span>mouth feed\n<span class=\"c1\"># or.. you can specify whatever you want in the cli..\n</span>mouth feed -c /my/config/file/path.py -t AMQP -f Json -g <span class=\"m\">0</span>.001 -m <span class=\"m\">100000000</span>\nmouth feed -t UDP -f Custom -g <span class=\"m\">0</span>.00001 -m <span class=\"m\">102831028</span>\n<span class=\"c1\"># you can also send in batches\n</span>mouth feed -t UDP -f Custom -g <span class=\"m\">0</span>.01 -m <span class=\"m\">102831028</span> -b <span class=\"m\">1000</span>\n<span class=\"c1\"># and even use some common formatters like apache's..\n</span>mouth feed -t Stream -f ApacheError\n<span class=\"c1\"># print fake data types that you can use in the config...\n</span>mouth list fake\n<span class=\"c1\"># print a list of available transports\n</span>mouth list transports\n<span class=\"c1\"># print a list of available formatters\n</span>mouth list formatters\n</pre>\n</div>\n<div id=\"additional-information\">\n<h2>Additional Information</h2>\n<ul>\n<li><a href=\"http://feeder.readthedocs.org/en/latest/case_study.html\" rel=\"nofollow\">Use\nCase</a></li>\n<li><a href=\"http://feeder.readthedocs.org/en/latest/configuration.html\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"http://feeder.readthedocs.org/en/latest/formatters.html\" rel=\"nofollow\">formatters</a></li>\n<li><a href=\"http://feeder.readthedocs.org/en/latest/transports.html\" rel=\"nofollow\">transports</a></li>\n<li><a href=\"http://feeder.readthedocs.org/en/latest/api.html\" rel=\"nofollow\">API</a></li>\n<li><a href=\"http://feeder.readthedocs.org/en/latest/in_house_faker.html\" rel=\"nofollow\">InHouseFaker</a></li>\n</ul>\n</div>\n<div id=\"vagrant\">\n<h2>Vagrant</h2>\n<p>A vagrantfile is provided: It will load a machine and install feeder on\nit in a virtualenv so that you can experiment with it. For a machine\ncontaining feeder, ELK and RabbitMQ see the <a href=\"https://github.com/nir0s/elk-workshop\" rel=\"nofollow\">elk-workshop\nrepo</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1389039, "releases": {"0.4.3": [{"comment_text": "", "digests": {"md5": "79781c60f5d93b7158e20bd6aab0cb2c", "sha256": "884430c35641091790d538de9fc17e25bf071ed545040a9266685f0faaff1328"}, "downloads": -1, "filename": "feedr-0.4.3.tar.gz", "has_sig": false, "md5_digest": "79781c60f5d93b7158e20bd6aab0cb2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25245, "upload_time": "2015-01-20T09:31:50", "upload_time_iso_8601": "2015-01-20T09:31:50.460723Z", "url": "https://files.pythonhosted.org/packages/c8/82/47c90b58590f2d51878aa720b13071aa0384ad6f486f1ed26b68d1a90932/feedr-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "9c6e5006fe5950b4ee1732116c1cd226", "sha256": "c2e3dfb58d54581078fd2001ffa4527730476cac6d4a58bac5092d427984971a"}, "downloads": -1, "filename": "feedr-0.5.0.tar.gz", "has_sig": false, "md5_digest": "9c6e5006fe5950b4ee1732116c1cd226", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25226, "upload_time": "2015-01-20T09:57:54", "upload_time_iso_8601": "2015-01-20T09:57:54.901978Z", "url": "https://files.pythonhosted.org/packages/ed/e5/9597a1bcb5b0ff9374cb4bd87b9e36329383fa4baca953ed32b694435ace/feedr-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "28b74fcc04f428c425b213822d98b47e", "sha256": "2c680e8bfca19de45c299a52df1be907982da21230e7d80300278c6aa32f54c2"}, "downloads": -1, "filename": "feedr-0.5.1.tar.gz", "has_sig": false, "md5_digest": "28b74fcc04f428c425b213822d98b47e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25264, "upload_time": "2015-01-20T11:12:50", "upload_time_iso_8601": "2015-01-20T11:12:50.232707Z", "url": "https://files.pythonhosted.org/packages/2a/cf/6655e0c3a917e21778a95ebec5b1f8b2ddacb6744447e26e2957819f355b/feedr-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28b74fcc04f428c425b213822d98b47e", "sha256": "2c680e8bfca19de45c299a52df1be907982da21230e7d80300278c6aa32f54c2"}, "downloads": -1, "filename": "feedr-0.5.1.tar.gz", "has_sig": false, "md5_digest": "28b74fcc04f428c425b213822d98b47e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25264, "upload_time": "2015-01-20T11:12:50", "upload_time_iso_8601": "2015-01-20T11:12:50.232707Z", "url": "https://files.pythonhosted.org/packages/2a/cf/6655e0c3a917e21778a95ebec5b1f8b2ddacb6744447e26e2957819f355b/feedr-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:59 2020"}