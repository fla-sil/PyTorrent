{"info": {"author": "Radovan Bast", "author_email": "radovan.bast@uit.no", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6"], "description": ".. image:: https://travis-ci.org/bast/flanders.svg?branch=master\n   :target: https://travis-ci.org/bast/flanders/builds\n.. image:: https://img.shields.io/badge/license-%20MPL--v2.0-blue.svg\n   :target: ../master/LICENSE\n\n\nFlanders: Fast 2D nearest neighbor search with an angle\n=======================================================\n\n::\n\n                                                        `.-:://////:-.`\n                                                 `-/oyhddddmmddddddNmdmdhs/`\n                                              -ohddddddddddddNddddddNddddmmds.\n                                            `hmmmmmdddddddddddNddddmmddddmmddm.\n                                           `hddddddmmddddddhyyysoossyhdmNmdddNs\n                                           sddddddddmmho/:-------------:odmmmmo\n                                          :mddddddddd+-------------------:hddd.\n                                          dddddddddm+---------------------:ms.\n                                         :mddddddddd-----------------------s/`\n                                         yddddddddds------------------------:s\n                                        `mddddddddm+-----://////+/:---://////y`\n                                        -Nddddddddm/----+:`     `./+-+-`    `.+:\n                                        /mddddddddN:---o`          -d-    -.   o-\n                                        omddddddddN////y  -d/      `m.    y+   +:\n                                        sdddhhNmmmN+/::o: `-`     `+so++//:. `:+`\n               `---.                    ydd+::mdddm:----/+-.````-:+:------:+s/-\n               o/::/+-                  sN:-oomdddm+------://+///:---------:s\n       `.-.`   s-----+/`                oN:---smddds------------:+oyhhysssydhs:.\n      -o/://+-`.o:----/o`               /mh:---hyyy/----------+hdmmmmdddddmmmddho.\n      /+-----:+/-o:----:+`       `..    .mddyyydo-----:///::ohdmmdmmdmddNdmmdmmddd/\n       :+/-----:+/y-----:+-`  .:+///+.   dddddddd----:mMMNNddddddmddmdddmmdmddmdddm:\n       ``-/+:----::-------:/+++:----/+   +mdddddN----:MMMMMNmmmmmmmdddddddhhhhhys+/.\n    .////+//+o:--------------/-----/o`    sdddddm/----oNmdmNNNNMMMm//os--...``\n    y:-----:/+o------------------:o:       :ydddm+-----:oyyyysydMMm:::o+.\n    :o/:----------------+o:-----:s`          .::+o--------://++oooo+:--:s\n      -:/+/:--------------s/----s.              -o------------------:/o+.\n          `-/+o------------/---+d-             `+o------------------::h\n              .s/---------:::ohhhs             y.-++:-----------------d:`\n               dhys+///+oyhhhhyhm/            `s````:/++o+//:::://+++/-.s.\n              /dddhhhhhhyyhhhddhym`           -s`````````..-:::/h/s-````.s`\n             :dyyhddddddddddhyyyym           `ydy-`````````````s:.-o/````sy/-`\n             yyyyyyyyyyyyyyyyyyyhs     `./+ooymhyhy/.`````````:o....++``:dmdhhhso:`\n             dyyyyyyyyyyyyyyyyyym:`-/oyddhyyyyhddyyhhs+-``````hso++ohd++dyyddyyyyhhyo/`\n             myyyyyyyyyyyyyyyyyyNhhhyyyyyyyyyyyyddyyyyyhdyso++ddhmhmddhhyyyyddyyyyyyyhdy+.\n\n\nInstallation using pip\n----------------------\n\n.. code:: shell\n\n  $ pip install flanders\n\n\nExample\n-------\n\nIn this example we have 6 points (numbered 0 to 5) and two reference\npoints with a certain view vector and view angle. The first reference\npoint finds point 2. The second reference point does not find any\nneighbor within the view angle and returns -1.\n\n.. image:: https://github.com/bast/flanders/raw/master/example/flanders.png\n   :width: 300 px\n\n.. code:: python\n\n  import flanders\n\n  points = [(60.4, 51.3), (173.9, 143.8), (132.9, 124.9), (19.5, 108.9), (196.5, 9.9), (143.3, 53.3)]\n\n  num_points = len(points)\n\n  context = flanders.new_context(num_points=num_points,\n                                 points=points)\n\n  indices = flanders.search_neighbors(context=context,\n                                      coordinates=[(119.2, 59.7), (155.2, 30.2)],\n                                      view_vectors=[(0.0, 1.0), (-1.0, -1.0)],\n                                      angles_deg=[90.0, 90.0])\n\n  assert indices == [2, -1]\n\n  flanders.free_context(context)\n\nIf you leave out the view vectors and angles, the code will search for\nthe nearest neighbor without taking any angles into account:\n\n.. code:: python\n\n  indices = flanders.search_neighbors(context=context,\n                                      coordinates=[(119.2, 59.7), (155.2, 30.2)])\n\n  assert indices == [5, 5]\n\nInstead of searching nearest neighbors of coordinates, you can also\nsearch by nearest neighbors of the points by their indices:\n\n.. code:: python\n\n  indices = flanders.search_neighbors(context=context,\n                                      ref_indices=list(range(num_points)),\n                                      view_vectors=[(1.0, 1.0) for _ in range(num_points)],\n                                      angles_deg=[90.0 for _ in range(num_points)])\n\n  assert indices == [2, -1, 1, 2, -1, 1]\n\nFor debugging you can employ the naive slow implementation:\n\n.. code:: python\n\n  indices = flanders.search_neighbors(context=context,\n                                      coordinates=[(119.2, 59.7), (155.2, 30.2)],\n                                      view_vectors=[(0.0, 1.0), (-1.0, -1.0)],\n                                      angles_deg=[90.0, 90.0],\n                                      naive=True)\n\n  assert indices == [2, -1]\n\n\nEfficiency considerations\n-------------------------\n\nIf you compute nearest neighbors for many points it is a good idea to\nsend in an entire batch of points instead of computing point by point.\nIf you send in an entire batch, the code will shared-memory parallelize\nthe loop over the points.\n\n\nReferences\n----------\n\n-  https://en.wikipedia.org/wiki/Nearest_neighbor_search\n-  https://en.wikipedia.org/wiki/K-d_tree\n-  http://www.slideshare.net/awebneck/the-post-office-problem\n-  http://www.cs.nyu.edu/~roweis/papers/Ahmed_msc_thesis.pdf\n-  http://dl.acm.org/citation.cfm?doid=361002.361007", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bast/flanders", "keywords": "", "license": "MPL-2.0", "maintainer": "", "maintainer_email": "", "name": "flanders", "package_url": "https://pypi.org/project/flanders/", "platform": "", "project_url": "https://pypi.org/project/flanders/", "project_urls": {"Homepage": "https://github.com/bast/flanders"}, "release_url": "https://pypi.org/project/flanders/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Fast 2D nearest neighbor search with an angle.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/bast/flanders/builds\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/bast/flanders.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed593951834dc41961386ea77cd1f9d88d2fe29f/68747470733a2f2f7472617669732d63692e6f72672f626173742f666c616e646572732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"../master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/license-%20MPL--v2.0-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21206f79e4a0a42a86cdc99c3c844e9867ddcdb1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d2532304d504c2d2d76322e302d626c75652e737667\"></a>\n<div id=\"flanders-fast-2d-nearest-neighbor-search-with-an-angle\">\n<h2>Flanders: Fast 2D nearest neighbor search with an angle</h2>\n<pre>                                                    `.-:://////:-.`\n                                             `-/oyhddddmmddddddNmdmdhs/`\n                                          -ohddddddddddddNddddddNddddmmds.\n                                        `hmmmmmdddddddddddNddddmmddddmmddm.\n                                       `hddddddmmddddddhyyysoossyhdmNmdddNs\n                                       sddddddddmmho/:-------------:odmmmmo\n                                      :mddddddddd+-------------------:hddd.\n                                      dddddddddm+---------------------:ms.\n                                     :mddddddddd-----------------------s/`\n                                     yddddddddds------------------------:s\n                                    `mddddddddm+-----://////+/:---://////y`\n                                    -Nddddddddm/----+:`     `./+-+-`    `.+:\n                                    /mddddddddN:---o`          -d-    -.   o-\n                                    omddddddddN////y  -d/      `m.    y+   +:\n                                    sdddhhNmmmN+/::o: `-`     `+so++//:. `:+`\n           `---.                    ydd+::mdddm:----/+-.````-:+:------:+s/-\n           o/::/+-                  sN:-oomdddm+------://+///:---------:s\n   `.-.`   s-----+/`                oN:---smddds------------:+oyhhysssydhs:.\n  -o/://+-`.o:----/o`               /mh:---hyyy/----------+hdmmmmdddddmmmddho.\n  /+-----:+/-o:----:+`       `..    .mddyyydo-----:///::ohdmmdmmdmddNdmmdmmddd/\n   :+/-----:+/y-----:+-`  .:+///+.   dddddddd----:mMMNNddddddmddmdddmmdmddmdddm:\n   ``-/+:----::-------:/+++:----/+   +mdddddN----:MMMMMNmmmmmmmdddddddhhhhhys+/.\n.////+//+o:--------------/-----/o`    sdddddm/----oNmdmNNNNMMMm//os--...``\ny:-----:/+o------------------:o:       :ydddm+-----:oyyyysydMMm:::o+.\n:o/:----------------+o:-----:s`          .::+o--------://++oooo+:--:s\n  -:/+/:--------------s/----s.              -o------------------:/o+.\n      `-/+o------------/---+d-             `+o------------------::h\n          .s/---------:::ohhhs             y.-++:-----------------d:`\n           dhys+///+oyhhhhyhm/            `s````:/++o+//:::://+++/-.s.\n          /dddhhhhhhyyhhhddhym`           -s`````````..-:::/h/s-````.s`\n         :dyyhddddddddddhyyyym           `ydy-`````````````s:.-o/````sy/-`\n         yyyyyyyyyyyyyyyyyyyhs     `./+ooymhyhy/.`````````:o....++``:dmdhhhso:`\n         dyyyyyyyyyyyyyyyyyym:`-/oyddhyyyyhddyyhhs+-``````hso++ohd++dyyddyyyyhhyo/`\n         myyyyyyyyyyyyyyyyyyNhhhyyyyyyyyyyyyddyyyyyhdyso++ddhmhmddhhyyyyddyyyyyyyhdy+.\n</pre>\n<div id=\"installation-using-pip\">\n<h3>Installation using pip</h3>\n<pre>$ pip install flanders\n</pre>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>In this example we have 6 points (numbered 0 to 5) and two reference\npoints with a certain view vector and view angle. The first reference\npoint finds point 2. The second reference point does not find any\nneighbor within the view angle and returns -1.</p>\n<img alt=\"https://github.com/bast/flanders/raw/master/example/flanders.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29f91261ad8e195060960a6444950d2b77f8e154/68747470733a2f2f6769746875622e636f6d2f626173742f666c616e646572732f7261772f6d61737465722f6578616d706c652f666c616e646572732e706e67\" width=\"300px\">\n<pre><span class=\"kn\">import</span> <span class=\"nn\">flanders</span>\n\n<span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mf\">60.4</span><span class=\"p\">,</span> <span class=\"mf\">51.3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">173.9</span><span class=\"p\">,</span> <span class=\"mf\">143.8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">132.9</span><span class=\"p\">,</span> <span class=\"mf\">124.9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">19.5</span><span class=\"p\">,</span> <span class=\"mf\">108.9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">196.5</span><span class=\"p\">,</span> <span class=\"mf\">9.9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">143.3</span><span class=\"p\">,</span> <span class=\"mf\">53.3</span><span class=\"p\">)]</span>\n\n<span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">flanders</span><span class=\"o\">.</span><span class=\"n\">new_context</span><span class=\"p\">(</span><span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"n\">num_points</span><span class=\"p\">,</span>\n                               <span class=\"n\">points</span><span class=\"o\">=</span><span class=\"n\">points</span><span class=\"p\">)</span>\n\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">flanders</span><span class=\"o\">.</span><span class=\"n\">search_neighbors</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">,</span>\n                                    <span class=\"n\">coordinates</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mf\">119.2</span><span class=\"p\">,</span> <span class=\"mf\">59.7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">155.2</span><span class=\"p\">,</span> <span class=\"mf\">30.2</span><span class=\"p\">)],</span>\n                                    <span class=\"n\">view_vectors</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">)],</span>\n                                    <span class=\"n\">angles_deg</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">90.0</span><span class=\"p\">,</span> <span class=\"mf\">90.0</span><span class=\"p\">])</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">indices</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">flanders</span><span class=\"o\">.</span><span class=\"n\">free_context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<p>If you leave out the view vectors and angles, the code will search for\nthe nearest neighbor without taking any angles into account:</p>\n<pre><span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">flanders</span><span class=\"o\">.</span><span class=\"n\">search_neighbors</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">,</span>\n                                    <span class=\"n\">coordinates</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mf\">119.2</span><span class=\"p\">,</span> <span class=\"mf\">59.7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">155.2</span><span class=\"p\">,</span> <span class=\"mf\">30.2</span><span class=\"p\">)])</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">indices</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre>\n<p>Instead of searching nearest neighbors of coordinates, you can also\nsearch by nearest neighbors of the points by their indices:</p>\n<pre><span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">flanders</span><span class=\"o\">.</span><span class=\"n\">search_neighbors</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">,</span>\n                                    <span class=\"n\">ref_indices</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_points</span><span class=\"p\">)),</span>\n                                    <span class=\"n\">view_vectors</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_points</span><span class=\"p\">)],</span>\n                                    <span class=\"n\">angles_deg</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">90.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_points</span><span class=\"p\">)])</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">indices</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<p>For debugging you can employ the naive slow implementation:</p>\n<pre><span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">flanders</span><span class=\"o\">.</span><span class=\"n\">search_neighbors</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">,</span>\n                                    <span class=\"n\">coordinates</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mf\">119.2</span><span class=\"p\">,</span> <span class=\"mf\">59.7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">155.2</span><span class=\"p\">,</span> <span class=\"mf\">30.2</span><span class=\"p\">)],</span>\n                                    <span class=\"n\">view_vectors</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">)],</span>\n                                    <span class=\"n\">angles_deg</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">90.0</span><span class=\"p\">,</span> <span class=\"mf\">90.0</span><span class=\"p\">],</span>\n                                    <span class=\"n\">naive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">indices</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"efficiency-considerations\">\n<h3>Efficiency considerations</h3>\n<p>If you compute nearest neighbors for many points it is a good idea to\nsend in an entire batch of points instead of computing point by point.\nIf you send in an entire batch, the code will shared-memory parallelize\nthe loop over the points.</p>\n</div>\n<div id=\"references\">\n<h3>References</h3>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Nearest_neighbor_search\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Nearest_neighbor_search</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/K-d_tree\" rel=\"nofollow\">https://en.wikipedia.org/wiki/K-d_tree</a></li>\n<li><a href=\"http://www.slideshare.net/awebneck/the-post-office-problem\" rel=\"nofollow\">http://www.slideshare.net/awebneck/the-post-office-problem</a></li>\n<li><a href=\"http://www.cs.nyu.edu/~roweis/papers/Ahmed_msc_thesis.pdf\" rel=\"nofollow\">http://www.cs.nyu.edu/~roweis/papers/Ahmed_msc_thesis.pdf</a></li>\n<li><a href=\"http://dl.acm.org/citation.cfm?doid=361002.361007\" rel=\"nofollow\">http://dl.acm.org/citation.cfm?doid=361002.361007</a></li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3550208, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "eebada4084ccf5299dc7be8b0f5361cf", "sha256": "215c941e4fb5bb75ce6c391d4921bf1fff471e7db33fe60212b7215ffd03e220"}, "downloads": -1, "filename": "flanders-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eebada4084ccf5299dc7be8b0f5361cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33693, "upload_time": "2018-02-04T12:36:40", "upload_time_iso_8601": "2018-02-04T12:36:40.116922Z", "url": "https://files.pythonhosted.org/packages/6f/c0/4896db46b3ce1f32747d208049b1909a70e74994cc227779a9a4289db0d0/flanders-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eebada4084ccf5299dc7be8b0f5361cf", "sha256": "215c941e4fb5bb75ce6c391d4921bf1fff471e7db33fe60212b7215ffd03e220"}, "downloads": -1, "filename": "flanders-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eebada4084ccf5299dc7be8b0f5361cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33693, "upload_time": "2018-02-04T12:36:40", "upload_time_iso_8601": "2018-02-04T12:36:40.116922Z", "url": "https://files.pythonhosted.org/packages/6f/c0/4896db46b3ce1f32747d208049b1909a70e74994cc227779a9a4289db0d0/flanders-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:17 2020"}