{"info": {"author": "Curtis Sand", "author_email": "curtissand@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: Site Management", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "==========\n**netify**\n==========\n\n**netify** is a library/application/framework that tries to make it easier for you\nto create something for the internet.\n\nThe goal of **netify** is to make it easy to customize your own website. You\ncan build a web application with server side elements responding to user\nsessions or compose some of your files into a static website for upload to a\nhosting service. **netify** provides a solid structure for starting up a new\n`Flask <http://flask.pocoo.org/>`_ project quickly. Beyond that, **netify**\ntries to provide useful tools for creating your own custom wesite or\napplication with minimal effort. Use it as a library in your python application\nto add a web based UI that can be deployed with `docker\n<https://www.docker.com>`_. Or, use it directly as an application to compose a\nfew of the features provided by **netify** into a quick personalized website.\n\n**TL;DR**: *Turn boring things into something for the net*\n\n.. admonition:: Project Links\n\n    - Homepage: http://fretboardfreak.com/netify\n    - Mirror: http://pythonhosted.org/netify (Not Active Yet)\n    - PyPi: https://pypi.python.org/pypi/netify\n    - Github: https://github.com/fretboardfreak/netify\n    - Bitbucket (mirror): https://bitbucket.org/fret/netify (Not Active Yet)\n\n*Dev Note*::\n\n    At this time I would call this an alpha quality project. netify is nearing\n    the point where I can start using and maturing it rather than writing new\n    infrastructure. I also plan to eventually have more in depth documentation\n    covering the API of the Netify project. For now, here is a summary to wet\n    your appetite.\n\n    Pull requests, feedback, and defect submissions are both accepted and\n    encouraged throughout this early forming process so don't be shy!\n\n    --fretboardfreak\n    :date: 160908\n\n\nGetting Started\n---------------\n\n*TBD*\n\nCode Structure\n--------------\n\nThe following module dependency diagram roughly describes the current structure\nof Netify::\n\n    [front_end_script]\n            |\n      [netify.app]---------\\\n            |              |\n      [netify.config]   [netify.view]\n            |              |\n        [config.cfg]   [netify.template]\n\n- Front End Script: The front end script imports or composes a Netify\n  application object through multiple inheritance of the Netify Mixin classes,\n  then calls the appropriate main method to start the application.\n\nModules from the **netify** package:\n\n- **app**: A module containing mixin classes that can be composed to create a\n  Netify app with the features you require in your project.\n\n- **config**: Contains a config class and required helper code for reading an\n  INI based config file and retrieving the configuration in a way that is\n  most useful for the application.\n\n- **config.cfg**: An INI formatted configuration file. The default sections\n  are:\n\n  - *flask*: used to hold Flask configuration instead of Flask's mechanism. I'd\n    rather only have one config file.\n\n  - *netify_views*: A section to help configure the views available in the\n    application.\n\n  - *routes*: A section mapping view classes to the base route used for those\n    views in the application.\n\n  - *other*: Some views can be configured here too. The section name for the\n    view should match the name used for the \"netify_views:enabled\" option.\n\n- **view**: Using the `Flask Classy <http://pythonhosted.org/Flask-Classy/>`_\n  extension this module provides a base View class for Netify applications. The\n  plan is to also include a set of configurable view classes that can be\n  modularly composed together. It is still encouraged for users of this package\n  to write some of their own templates or views, the code here should serve as\n  an example of how to use the Netify library.\n\n- **template**: A module (soon to be package) that adds some flexibility into\n  your templating life. While it will also support standard, file based `Jinja\n  <http://jinja.pocoo.org/>`_ templating, the Netify.template module also\n  includes support for, and examples of, templates created purely in code - or\n  by a combination of traditional and code based methods - using the `Yattag\n  <http://www.yattag.org/>`_ library.\n\nContributing\n============\n\nThe code is written for python 3 and the ``style.sh`` script has been\nimplemented to keep an eye on my coding style. I would prefer not to ignore any\nof the messages from either the ``pep8`` or the ``pylint`` tool.\n\nTrailing whitespace is a no-no so get rid of it all. :)\n\nBeyond that, I prefer explicit over implicit, which is one of the strong\npricipals driving the design of Netify to begin with. An example of this design\nis the way that the NetifyApp requires instanciation by some front end starting\nscript. In contrast, a typical Flask app just puts the instantiation code at\nmodule level somewhere in the codebase. Ugh, the animals! :)\n\nPull requests, feedback, and defect submissions are accepted and encouraged!\n\nRelease Process\n---------------\n\n*more for my own reference than in expectation that anybody else do these\nsteps...*\n\n.. warning::\n\n    You really only get one chance to upload files to PyPI for a version\n    number. So the version number basically becomes\n    ``<major>.<minor>.<pypi-attempt>``.\n\n#. Make some changes worthy of release.\n#. Do some testing.\n#. Update the version number appropriately in ``setup.py``.\n#. Build the distribution: ``python3 setupy.py sdist bdist_wheel``\n#. Sign the distribution: ``gpg2 --detach-sign -a <file>  #rince and repeat for each file``\n#. Upload the distribution: ``twine upload -u fretboardfreak <files>``\n\nLicense\n=======\n\nNetify uses the Apache Version 2.0 License. Please see ``LICENSE.rst`` for\nmore information::\n\n    Copyright 2016 Curtis Sand\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software\n        distributed under the License is distributed on an \"AS IS\" BASIS,\n        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        See the License for the specific language governing permissions and\n        limitations under the License.\n\n\n.. EOF README\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fretboardfreak/netify", "keywords": "net netify app webapp html site website generator", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "netify", "package_url": "https://pypi.org/project/netify/", "platform": "", "project_url": "https://pypi.org/project/netify/", "project_urls": {"Homepage": "https://github.com/fretboardfreak/netify"}, "release_url": "https://pypi.org/project/netify/0.2/", "requires_dist": ["Flask (==0.11.1)", "Flask-Classy (==0.6.10)", "Jinja2 (==2.8)", "MarkupSafe (==0.23)", "Werkzeug (==0.11.11)", "click (==6.6)", "itsdangerous (==0.24)", "yattag (==1.6.0)"], "requires_python": "", "summary": "Turn boring things into something for the net.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>netify</strong> is a library/application/framework that tries to make it easier for you\nto create something for the internet.</p>\n<p>The goal of <strong>netify</strong> is to make it easy to customize your own website. You\ncan build a web application with server side elements responding to user\nsessions or compose some of your files into a static website for upload to a\nhosting service. <strong>netify</strong> provides a solid structure for starting up a new\n<a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a> project quickly. Beyond that, <strong>netify</strong>\ntries to provide useful tools for creating your own custom wesite or\napplication with minimal effort. Use it as a library in your python application\nto add a web based UI that can be deployed with <a href=\"https://www.docker.com\" rel=\"nofollow\">docker</a>. Or, use it directly as an application to compose a\nfew of the features provided by <strong>netify</strong> into a quick personalized website.</p>\n<p><strong>TL;DR</strong>: <em>Turn boring things into something for the net</em></p>\n<div>\n<p>Project Links</p>\n<ul>\n<li>Homepage: <a href=\"http://fretboardfreak.com/netify\" rel=\"nofollow\">http://fretboardfreak.com/netify</a></li>\n<li>Mirror: <a href=\"http://pythonhosted.org/netify\" rel=\"nofollow\">http://pythonhosted.org/netify</a> (Not Active Yet)</li>\n<li>PyPi: <a href=\"https://pypi.python.org/pypi/netify\" rel=\"nofollow\">https://pypi.python.org/pypi/netify</a></li>\n<li>Github: <a href=\"https://github.com/fretboardfreak/netify\" rel=\"nofollow\">https://github.com/fretboardfreak/netify</a></li>\n<li>Bitbucket (mirror): <a href=\"https://bitbucket.org/fret/netify\" rel=\"nofollow\">https://bitbucket.org/fret/netify</a> (Not Active Yet)</li>\n</ul>\n</div>\n<p><em>Dev Note</em>:</p>\n<pre>At this time I would call this an alpha quality project. netify is nearing\nthe point where I can start using and maturing it rather than writing new\ninfrastructure. I also plan to eventually have more in depth documentation\ncovering the API of the Netify project. For now, here is a summary to wet\nyour appetite.\n\nPull requests, feedback, and defect submissions are both accepted and\nencouraged throughout this early forming process so don't be shy!\n\n--fretboardfreak\n:date: 160908\n</pre>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p><em>TBD</em></p>\n</div>\n<div id=\"code-structure\">\n<h2>Code Structure</h2>\n<p>The following module dependency diagram roughly describes the current structure\nof Netify:</p>\n<pre>[front_end_script]\n        |\n  [netify.app]---------\\\n        |              |\n  [netify.config]   [netify.view]\n        |              |\n    [config.cfg]   [netify.template]\n</pre>\n<ul>\n<li>Front End Script: The front end script imports or composes a Netify\napplication object through multiple inheritance of the Netify Mixin classes,\nthen calls the appropriate main method to start the application.</li>\n</ul>\n<p>Modules from the <strong>netify</strong> package:</p>\n<ul>\n<li><strong>app</strong>: A module containing mixin classes that can be composed to create a\nNetify app with the features you require in your project.</li>\n<li><strong>config</strong>: Contains a config class and required helper code for reading an\nINI based config file and retrieving the configuration in a way that is\nmost useful for the application.</li>\n<li><strong>config.cfg</strong>: An INI formatted configuration file. The default sections\nare:<ul>\n<li><em>flask</em>: used to hold Flask configuration instead of Flask\u2019s mechanism. I\u2019d\nrather only have one config file.</li>\n<li><em>netify_views</em>: A section to help configure the views available in the\napplication.</li>\n<li><em>routes</em>: A section mapping view classes to the base route used for those\nviews in the application.</li>\n<li><em>other</em>: Some views can be configured here too. The section name for the\nview should match the name used for the \u201cnetify_views:enabled\u201d option.</li>\n</ul>\n</li>\n<li><strong>view</strong>: Using the <a href=\"http://pythonhosted.org/Flask-Classy/\" rel=\"nofollow\">Flask Classy</a>\nextension this module provides a base View class for Netify applications. The\nplan is to also include a set of configurable view classes that can be\nmodularly composed together. It is still encouraged for users of this package\nto write some of their own templates or views, the code here should serve as\nan example of how to use the Netify library.</li>\n<li><strong>template</strong>: A module (soon to be package) that adds some flexibility into\nyour templating life. While it will also support standard, file based <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja</a> templating, the Netify.template module also\nincludes support for, and examples of, templates created purely in code - or\nby a combination of traditional and code based methods - using the <a href=\"http://www.yattag.org/\" rel=\"nofollow\">Yattag</a> library.</li>\n</ul>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>The code is written for python 3 and the <tt>style.sh</tt> script has been\nimplemented to keep an eye on my coding style. I would prefer not to ignore any\nof the messages from either the <tt>pep8</tt> or the <tt>pylint</tt> tool.</p>\n<p>Trailing whitespace is a no-no so get rid of it all. :)</p>\n<p>Beyond that, I prefer explicit over implicit, which is one of the strong\npricipals driving the design of Netify to begin with. An example of this design\nis the way that the NetifyApp requires instanciation by some front end starting\nscript. In contrast, a typical Flask app just puts the instantiation code at\nmodule level somewhere in the codebase. Ugh, the animals! :)</p>\n<p>Pull requests, feedback, and defect submissions are accepted and encouraged!</p>\n</div>\n</div>\n<div id=\"release-process\">\n<h2>Release Process</h2>\n<p><em>more for my own reference than in expectation that anybody else do these\nsteps\u2026</em></p>\n<div>\n<p>Warning</p>\n<p>You really only get one chance to upload files to PyPI for a version\nnumber. So the version number basically becomes\n<tt><span class=\"pre\">&lt;major&gt;.&lt;minor&gt;.&lt;pypi-attempt&gt;</span></tt>.</p>\n</div>\n<ol>\n<li>Make some changes worthy of release.</li>\n<li>Do some testing.</li>\n<li>Update the version number appropriately in <tt>setup.py</tt>.</li>\n<li>Build the distribution: <tt>python3 setupy.py sdist bdist_wheel</tt></li>\n<li>Sign the distribution: <tt>gpg2 <span class=\"pre\">--detach-sign</span> <span class=\"pre\">-a</span> &lt;file&gt;\u00a0 #rince and repeat for each file</tt></li>\n<li>Upload the distribution: <tt>twine upload <span class=\"pre\">-u</span> fretboardfreak &lt;files&gt;</tt></li>\n</ol>\n<div id=\"license\">\n<h3>License</h3>\n<p>Netify uses the Apache Version 2.0 License. Please see <tt>LICENSE.rst</tt> for\nmore information:</p>\n<pre>Copyright 2016 Curtis Sand\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2335509, "releases": {"0.1": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "71ec87a867a31d562efe5a14fbf71557", "sha256": "22c0c1d5d82650e79945ca1b68feeb25b09268b02e537cdd3a6ce2fbf56d7d03"}, "downloads": -1, "filename": "netify-0.1.1-py3-none-any.whl", "has_sig": true, "md5_digest": "71ec87a867a31d562efe5a14fbf71557", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14934, "upload_time": "2016-09-09T03:49:10", "upload_time_iso_8601": "2016-09-09T03:49:10.761240Z", "url": "https://files.pythonhosted.org/packages/cb/f5/5bfef3ea14b26162de12689b82e47fb57c8ab8877bc5a5100cab236b231c/netify-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc2c4af43dfac190ad8115dcb5378dd9", "sha256": "1e6663c995a8c6b1d8d212925fd164b612729032a708a0113c3d8a054b12f631"}, "downloads": -1, "filename": "netify-0.1.1.tar.gz", "has_sig": true, "md5_digest": "bc2c4af43dfac190ad8115dcb5378dd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13323, "upload_time": "2016-09-09T03:49:12", "upload_time_iso_8601": "2016-09-09T03:49:12.924969Z", "url": "https://files.pythonhosted.org/packages/e8/6b/2c773b4b2a390871c18fe889ab8974a1183512afecad283096e3a9f91f67/netify-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "086c5970388d45f1ae5675a567a93b0f", "sha256": "75604278b72058f27373d6c2bf1131fc1a10c1107311d9413fb8cc2269f6ae22"}, "downloads": -1, "filename": "netify-0.2-py3-none-any.whl", "has_sig": true, "md5_digest": "086c5970388d45f1ae5675a567a93b0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17273, "upload_time": "2016-09-10T22:15:20", "upload_time_iso_8601": "2016-09-10T22:15:20.431407Z", "url": "https://files.pythonhosted.org/packages/c5/b0/93d321a7d0879f89fc340e8b8ba776a03ff2edaf069fba9851f7d3b895a6/netify-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc7afc2a9e253f5c370823fd8a154912", "sha256": "1505b43c186a2d128143c1ffbcbc298cc806245a3fdbcb9416bec26007ebaaf6"}, "downloads": -1, "filename": "netify-0.2.tar.gz", "has_sig": true, "md5_digest": "fc7afc2a9e253f5c370823fd8a154912", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15493, "upload_time": "2016-09-10T22:15:22", "upload_time_iso_8601": "2016-09-10T22:15:22.610930Z", "url": "https://files.pythonhosted.org/packages/b2/4b/ef412818d11811301bf84feeccb9f82e0ab31f37d7322db63375eb07f032/netify-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "086c5970388d45f1ae5675a567a93b0f", "sha256": "75604278b72058f27373d6c2bf1131fc1a10c1107311d9413fb8cc2269f6ae22"}, "downloads": -1, "filename": "netify-0.2-py3-none-any.whl", "has_sig": true, "md5_digest": "086c5970388d45f1ae5675a567a93b0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17273, "upload_time": "2016-09-10T22:15:20", "upload_time_iso_8601": "2016-09-10T22:15:20.431407Z", "url": "https://files.pythonhosted.org/packages/c5/b0/93d321a7d0879f89fc340e8b8ba776a03ff2edaf069fba9851f7d3b895a6/netify-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc7afc2a9e253f5c370823fd8a154912", "sha256": "1505b43c186a2d128143c1ffbcbc298cc806245a3fdbcb9416bec26007ebaaf6"}, "downloads": -1, "filename": "netify-0.2.tar.gz", "has_sig": true, "md5_digest": "fc7afc2a9e253f5c370823fd8a154912", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15493, "upload_time": "2016-09-10T22:15:22", "upload_time_iso_8601": "2016-09-10T22:15:22.610930Z", "url": "https://files.pythonhosted.org/packages/b2/4b/ef412818d11811301bf84feeccb9f82e0ab31f37d7322db63375eb07f032/netify-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:57 2020"}