{"info": {"author": "Thomas Bell", "author_email": "tom.aus@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Multimedia :: Graphics :: Graphics Conversion", "Topic :: Office/Business :: Financial :: Spreadsheet"], "description": "gif2xls\n=======\n\nInspired by xkcd_.\n\nConverts GIF encoded images into Microsoft Excel formatted workbooks.\n\nEach frame is assigned a worksheet, and each pixel is assigned a cell.\n\nThere are two modes: fancy mode (the default) and boring mode. In boring mode (using -b or --boring at the command line), each cell is assigned a 25-bit integer, with bits 0-23 for an RGB value and bit 24 as transparency. In fancy mode, each cell is made square and is assigned a background colour that is as close to the original pixel value as possible.\n\nAn additional sheet named \"Info\" contains some header information, where each row contains a Name, Value pair.\n\nInstallation\n------------\n\n`gif2xls` is now available as a PyPI_ package! Simply run either of the following from anywhere:\n\n::\n\n    pip install gif2xls        # globally, often requires root/Administrator privileges\n    pip install gif2xls --user # local to current user (add ~/.local/bin to your $PATH)\n\nTo install from source, either run the following as root inside the repo directory:\n\n::\n\n    pip install .\n\nor the following to install as a user package (making sure to add ~/.local/bin/ to your $PATH):\n\n::\n\n    pip install . --user\n\nUsage\n-----\n\nSyntax:\n\n::\n\n    gif2xls input_file [-b|--boring] [--width cell_width] [-o output_file.xls(x)]\n\nThe default mode is \"fancy\" mode - use the --boring flag to use \"boring\" mode which doesn't use any colour formatting.\n\nIn \"fancy\" mode when using a `.xlsx` formatted output file, you can use the --width flag to specify how wide and high each cell will be in pixels. For example, `--width=5` will generate cells that are 5 pixels wide and high each so that the image appears scaled up 5 times.\n\nThe output file can either have a `.xls` or a `.xlsx` file extension - signalling to gif2xls your output file format.\n\n**NOTE:** You must use `.xlsx` output files for GIF images that are larger than 256 pixels wide - classic `.xls` worksheets do not support more than 256 columns per worksheet. However, you can still use `.xls` worksheets for fancy mode images, just as long as they are not wider than 256 pixels.\n\n\\(C) Thomas Bell 2016, `MIT License`_.\n\n.. _xkcd: http://xkcd.com/1678/\n.. _PyPI: https://pypi.python.org/pypi\n.. _MIT License: https://opensource.org/licenses/MIT", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bell345/gif2xls", "keywords": "xls gif convert xkcd", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gif2xls", "package_url": "https://pypi.org/project/gif2xls/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gif2xls/", "project_urls": {"Homepage": "https://github.com/bell345/gif2xls"}, "release_url": "https://pypi.org/project/gif2xls/0.2.2/", "requires_dist": ["Pillow (>=3.0)", "XlsxWriter (>=0.8)", "future (>=0.15)", "pyexcel (>=0.2)", "pyexcel-xls (>=0.1)", "pyexcel-xlsx (>=0.1)", "xlwt (>=1.0)"], "requires_python": "", "summary": "Convert GIF images into XLS files.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Inspired by <a href=\"http://xkcd.com/1678/\" rel=\"nofollow\">xkcd</a>.</p>\n<p>Converts GIF encoded images into Microsoft Excel formatted workbooks.</p>\n<p>Each frame is assigned a worksheet, and each pixel is assigned a cell.</p>\n<p>There are two modes: fancy mode (the default) and boring mode. In boring mode (using -b or \u2013boring at the command line), each cell is assigned a 25-bit integer, with bits 0-23 for an RGB value and bit 24 as transparency. In fancy mode, each cell is made square and is assigned a background colour that is as close to the original pixel value as possible.</p>\n<p>An additional sheet named \u201cInfo\u201d contains some header information, where each row contains a Name, Value pair.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><cite>gif2xls</cite> is now available as a <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPI</a> package! Simply run either of the following from anywhere:</p>\n<pre>pip install gif2xls        # globally, often requires root/Administrator privileges\npip install gif2xls --user # local to current user (add ~/.local/bin to your $PATH)\n</pre>\n<p>To install from source, either run the following as root inside the repo directory:</p>\n<pre>pip install .\n</pre>\n<p>or the following to install as a user package (making sure to add ~/.local/bin/ to your $PATH):</p>\n<pre>pip install . --user\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Syntax:</p>\n<pre>gif2xls input_file [-b|--boring] [--width cell_width] [-o output_file.xls(x)]\n</pre>\n<p>The default mode is \u201cfancy\u201d mode - use the \u2013boring flag to use \u201cboring\u201d mode which doesn\u2019t use any colour formatting.</p>\n<p>In \u201cfancy\u201d mode when using a <cite>.xlsx</cite> formatted output file, you can use the \u2013width flag to specify how wide and high each cell will be in pixels. For example, <cite>\u2013width=5</cite> will generate cells that are 5 pixels wide and high each so that the image appears scaled up 5 times.</p>\n<p>The output file can either have a <cite>.xls</cite> or a <cite>.xlsx</cite> file extension - signalling to gif2xls your output file format.</p>\n<p><strong>NOTE:</strong> You must use <cite>.xlsx</cite> output files for GIF images that are larger than 256 pixels wide - classic <cite>.xls</cite> worksheets do not support more than 256 columns per worksheet. However, you can still use <cite>.xls</cite> worksheets for fancy mode images, just as long as they are not wider than 256 pixels.</p>\n<p>(C) Thomas Bell 2016, <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT License</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2290157, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "34aab9c81525e4aa5cccfa0384ccbb40", "sha256": "1bfa009cc654844447e0b5828b5023520f3a9369f846c85e64aeda04843fb933"}, "downloads": -1, "filename": "gif2xls-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34aab9c81525e4aa5cccfa0384ccbb40", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10114, "upload_time": "2016-08-19T05:38:06", "upload_time_iso_8601": "2016-08-19T05:38:06.457627Z", "url": "https://files.pythonhosted.org/packages/be/4b/ce9cd65b71bdf7ad5a183a0fb3f9a92ff98150398b134bacc02d412b7a50/gif2xls-0.2.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34aab9c81525e4aa5cccfa0384ccbb40", "sha256": "1bfa009cc654844447e0b5828b5023520f3a9369f846c85e64aeda04843fb933"}, "downloads": -1, "filename": "gif2xls-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34aab9c81525e4aa5cccfa0384ccbb40", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10114, "upload_time": "2016-08-19T05:38:06", "upload_time_iso_8601": "2016-08-19T05:38:06.457627Z", "url": "https://files.pythonhosted.org/packages/be/4b/ce9cd65b71bdf7ad5a183a0fb3f9a92ff98150398b134bacc02d412b7a50/gif2xls-0.2.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:57:29 2020"}