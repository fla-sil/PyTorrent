{"info": {"author": "Peter Kogan", "author_email": "kogan.peter@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Mock Generator\n![](https://github.com/pksol/mock_autogen/workflows/CI/badge.svg?branch=master)\n![](https://img.shields.io/pypi/v/mock-generator.svg)\n![](https://img.shields.io/pypi/pyversions/mock-generator.svg)\n![](https://codecov.io/gh/pksol/mock_autogen/branch/master/graph/badge.svg)\n![](https://img.shields.io/powershellgallery/p/DNS.1.1.1.1)\n![](https://img.shields.io/pypi/l/mock-generator.svg)\n\nA tool to generate the basic mocks and asserts for faster unit testing. \n\n## Introduction\nA typical unit test looks like this (AAA pattern):\n* Arrange \u2013 Setup and prepare the various objects and prerequisites.\n* Act \u2013 Invoke the tested code by calling the tested function for example.\n* Assert \u2013 Verify the outcome. This can be the return value of the tested \nfunction and/or some side effects.\n\nAs it turns out, much of the time spent on doing unit tests is wasted on wiring\nthe various modules and functions and only a fraction of the time is spent on\nthe actual logic of the test. The `Arrange` and `Assert` sections are notorious\nin that regard. \n\nThis tool is meant to save you much of the time and effort of generating \nboilerplates, by generating the `Arrange` and `Assert` sections. \nThe generated code can then be used as is, or altered according to your needs.\n\n## Usage\nNote: All examples assume the \n[pytest-mock](https://pypi.org/project/pytest-mock/) which is a fixture for\n[pytest](https://pypi.org/project/pytest/). \n\n### Simple example\nLet's start with a simple code example. Say you have a module `os_wrapper.py`:\n```python\nimport os \n\ndef os_remove_wrap(filename):\n    os.remove(filename)\n```\nYou would like to test that the `os.remove` function is called with the same\nvalue sent to your wrapping function. The test would look something like this:\n```python\ndef test_os_remove_wrap(mocker):\n    # Arrange: setup any mocks to avoid deleting actual files\n\n    # Act: invoking the tested code\n    os_wrapper.os_remove_wrap('/my/path/to/file.txt')\n\n    # Assert: verifying that the original os.remove function was called\n```\n\n#### Generating the Arrange section\nThe following code sends the tested module to the tool, along with instructions \nwhich indicate the desired testing framework and which mocks to generate\n(we would like to use pytest-mock fixture and only mock the referenced \nmodules):   \n\n```python\nimport os_wrapper\nfrom mock_autogen.pytest_mocker import PytestMocker\n\ngenerated_mocks = PytestMocker(os_wrapper).mock_modules().generate() \n```\nThe `generated_mocks` variable now has the desired code: \n```python\n# mocked modules\nmock_os = mocker.MagicMock(name='os')\nmocker.patch('os_wrapper.os', new=mock_os)\n```\nSimply copy the code and place it in your test, before the `Act` section: \n```python\nimport os_wrapper\n\ndef test_os_remove_wrap(mocker):\n    # Arrange: setup any mocks to avoid deleting actual files\n    # auto generated code\n    # mocked modules\n    mock_os = mocker.MagicMock(name='os')\n    mocker.patch('os_wrapper.os', new=mock_os)\n\n    # Act: invoking the tested code\n    os_wrapper.os_remove_wrap('/my/path/to/file.txt')\n\n    # Assert: verifying that the original os.remove function was called\n```\n\n#### Generating the Assert section\nNow it's time to add the asserts. Add the following code right after the Act \nstep:\n```python\nimport mock_autogen\n\ngenerated_asserts = mock_autogen.generator.generate_asserts(mock_os)\n```\nThe `mock_os` is the mocked object you created earlier.\n\nThe `generated_asserts` variable now has the desired code: \n```python\nmock_os.remove.assert_called_once_with('/my/path/to/file.txt')\n```\nPlace that code right after the act phase and you're done!\n\nThe complete test function:\n```python\nimport os_wrapper\n\ndef test_os_remove_wrap(mocker):\n    # Arrange: setup any mocks to avoid deleting actual files\n    # auto generated code\n    # mocked modules\n    mock_os = mocker.MagicMock(name='os')\n    mocker.patch('os_wrapper.os', new=mock_os)\n\n    # Act: invoking the tested code\n    os_wrapper.os_remove_wrap('/my/path/to/file.txt')\n\n    # Assert: verifying that the original os.remove function was called\n    # auto generated code\n    mock_os.remove.assert_called_once_with('/my/path/to/file.txt')\n```\nAs can be seen, most of the code was autogenerated so you can focus on the Act.\n\n### Complex example\nThe previous example was meant to demonstrate how to use the tool. If you have\nexperience with pytest-mock than you could have probably come up with the same\nboilerplate code by yourself in a reasonable time. The next example requires \nthe exact same steps to invoke the tool as before, but the benefit is much \ngreater.  \n\nLet's assume you have a module `zip_writer.py` which holds a function to\nprocess a string sent to it and then add it to a zip file:\n```python\nimport zipfile\n\ndef process_and_zip(zip_path, file_name, contents):\n    processed_contents = \"processed \" + contents  # some complex logic\n    with zipfile.ZipFile(zip_path, 'w') as zip_container:\n        zip_container.writestr(file_name, processed_contents)\n```\nAlthough this is a very short function, which does not do anything complex, \nwriting the test code takes a lot of time. It's the fact that the function uses\na context manager makes the testing more complex than it should be. \n\nSince the process of generating the test code is the same as in the previous \nexample, there is no need to repeat it. Let's look at the complete code:\n```python\nimport zip_writer\n\ndef test_process_and_zip(mocker):\n    # Arrange: auto generated code \n    mock_zipfile = mocker.MagicMock(name='zipfile')\n    mocker.patch('tests.sample.code.tested_module.zipfile', new=mock_zipfile)\n\n    # Act: invoking the tested code\n    zip_writer.process_and_zip('/path/to.zip', 'in_zip.txt', 'foo bar')\n\n    # Assert: auto generated code\n    mock_zipfile.ZipFile.assert_called_once_with('/path/to.zip', 'w')\n    mock_zipfile.ZipFile.return_value.__enter__.assert_called_once_with()\n    mock_zipfile.ZipFile.return_value.__enter__.return_value.writestr. \\\n        assert_called_once_with('in_zip.txt', 'processed foo bar')\n    mock_zipfile.ZipFile.return_value.__exit__. \\\n        assert_called_once_with(None, None, None)\n```\nLook at all the asserts. They are very useful: \n* Checking that we opened the zip file with the right parameters.\n* Checking that we wrote the correct data to the proper file.\n* And finally, ensuring that `__enter__` and `__exit__` are called, so there \nare no open file handles which could cause problems.\n\nCan you imagine the time it would have taken you to code this on your own?\n\n### What's Next\n#### Mocking Everything\nAfter you have followed through this example, you can use the Mock Generator \nto **mock everything**. This way you can see all the possibilities of mocks. You \ncan also print the result right away, to avoid having to inspect variables. \nIt can look something like this:\n```python\nimport os_wrapper\nfrom mock_autogen.pytest_mocker import PytestMocker\n\nprint(PytestMocker(os_wrapper).mock_everything().generate()) \n```\nWhat you would get is:\n```python\n# mocked modules\nmock_os = mocker.MagicMock(name='os')\nmocker.patch('os_wrapper.os', new=mock_os)\n# mocked functions\nmock_os_remove_wrap = mocker.MagicMock(name='os_remove_wrap')\nmocker.patch('os_wrapper.os_remove', new=mock_os_remove_wrap)\n# calls to generate_asserts, put this after the 'act'\nimport mock_autogen\nprint(mock_autogen.generator.generate_asserts(mock_os, name='mock_os'))\nprint(mock_autogen.generator.generate_asserts(mock_os_remove_wrap, name='mock_os_remove_wrap'))\n```\nNotice the mocked functions section, it allows you to mock functions in\nthat model. This is useful when you're testing a function which uses\nanother function you would like to mock.\n\nYou even get the calls to generate the asserts prepared for you, place\nthis code after the act section as shown in the simple example. \n\n#### Asserting Existing Mocks\nAt times, you may be editing a legacy code already containing mocks, or\nyou may choose to write the mocks yourself, to gain some extra control.\n\nYou can use the mock generator to generate the asserts for you, for\nany given `Mock` or `MagicMock`, like so (replace `mockObj`): \n```python\n# calls to generate_asserts, put this after the 'act'\nimport mock_autogen.generator\nprint(mock_autogen.generator.generate_asserts(mockObj))\n```\n\n## Wrapping up\nI hope that by now you were convinced that this tool can save you a lot of \ntime. \n\nSee `tests` folder for additional usage examples like mocking classes and \ninstances, using fixtures to share mocks between tests and much more.\n\nIf you would like to contribute, I'm accepting pull requests :)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pksol/mock_autogen", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mock-generator", "package_url": "https://pypi.org/project/mock-generator/", "platform": "", "project_url": "https://pypi.org/project/mock-generator/", "project_urls": {"Homepage": "https://github.com/pksol/mock_autogen"}, "release_url": "https://pypi.org/project/mock-generator/1.0.0/", "requires_dist": ["mock (==3.0.5)"], "requires_python": ">=3.5", "summary": "Generate python mocks and assertions quickly", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mock Generator</h1>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/015cd47a9c7ce29419182e59ff320cb6629ff99a/68747470733a2f2f6769746875622e636f6d2f706b736f6c2f6d6f636b5f6175746f67656e2f776f726b666c6f77732f43492f62616467652e7376673f6272616e63683d6d6173746572\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10583c57eb0e0352a62ab4a5a17eb2529e450620/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6f636b2d67656e657261746f722e737667\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0056c6ecdec56a4a4d4bce91e325afb346c1da7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d6f636b2d67656e657261746f722e737667\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67cf431df7f8e89fbe21d7c51bb3fa6f9330af8d/68747470733a2f2f636f6465636f762e696f2f67682f706b736f6c2f6d6f636b5f6175746f67656e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/850c0f887475818907618ae8b4078793cf2067da/68747470733a2f2f696d672e736869656c64732e696f2f706f7765727368656c6c67616c6c6572792f702f444e532e312e312e312e31\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13d37f7c96679c8770d753945caec4d40cd9b668/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d6f636b2d67656e657261746f722e737667\"></p>\n<p>A tool to generate the basic mocks and asserts for faster unit testing.</p>\n<h2>Introduction</h2>\n<p>A typical unit test looks like this (AAA pattern):</p>\n<ul>\n<li>Arrange \u2013 Setup and prepare the various objects and prerequisites.</li>\n<li>Act \u2013 Invoke the tested code by calling the tested function for example.</li>\n<li>Assert \u2013 Verify the outcome. This can be the return value of the tested\nfunction and/or some side effects.</li>\n</ul>\n<p>As it turns out, much of the time spent on doing unit tests is wasted on wiring\nthe various modules and functions and only a fraction of the time is spent on\nthe actual logic of the test. The <code>Arrange</code> and <code>Assert</code> sections are notorious\nin that regard.</p>\n<p>This tool is meant to save you much of the time and effort of generating\nboilerplates, by generating the <code>Arrange</code> and <code>Assert</code> sections.\nThe generated code can then be used as is, or altered according to your needs.</p>\n<h2>Usage</h2>\n<p>Note: All examples assume the\n<a href=\"https://pypi.org/project/pytest-mock/\" rel=\"nofollow\">pytest-mock</a> which is a fixture for\n<a href=\"https://pypi.org/project/pytest/\" rel=\"nofollow\">pytest</a>.</p>\n<h3>Simple example</h3>\n<p>Let's start with a simple code example. Say you have a module <code>os_wrapper.py</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n\n<span class=\"k\">def</span> <span class=\"nf\">os_remove_wrap</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>You would like to test that the <code>os.remove</code> function is called with the same\nvalue sent to your wrapping function. The test would look something like this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_os_remove_wrap</span><span class=\"p\">(</span><span class=\"n\">mocker</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Arrange: setup any mocks to avoid deleting actual files</span>\n\n    <span class=\"c1\"># Act: invoking the tested code</span>\n    <span class=\"n\">os_wrapper</span><span class=\"o\">.</span><span class=\"n\">os_remove_wrap</span><span class=\"p\">(</span><span class=\"s1\">'/my/path/to/file.txt'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Assert: verifying that the original os.remove function was called</span>\n</pre>\n<h4>Generating the Arrange section</h4>\n<p>The following code sends the tested module to the tool, along with instructions\nwhich indicate the desired testing framework and which mocks to generate\n(we would like to use pytest-mock fixture and only mock the referenced\nmodules):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os_wrapper</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mock_autogen.pytest_mocker</span> <span class=\"kn\">import</span> <span class=\"n\">PytestMocker</span>\n\n<span class=\"n\">generated_mocks</span> <span class=\"o\">=</span> <span class=\"n\">PytestMocker</span><span class=\"p\">(</span><span class=\"n\">os_wrapper</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mock_modules</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">()</span> \n</pre>\n<p>The <code>generated_mocks</code> variable now has the desired code:</p>\n<pre><span class=\"c1\"># mocked modules</span>\n<span class=\"n\">mock_os</span> <span class=\"o\">=</span> <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'os'</span><span class=\"p\">)</span>\n<span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'os_wrapper.os'</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">mock_os</span><span class=\"p\">)</span>\n</pre>\n<p>Simply copy the code and place it in your test, before the <code>Act</code> section:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os_wrapper</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_os_remove_wrap</span><span class=\"p\">(</span><span class=\"n\">mocker</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Arrange: setup any mocks to avoid deleting actual files</span>\n    <span class=\"c1\"># auto generated code</span>\n    <span class=\"c1\"># mocked modules</span>\n    <span class=\"n\">mock_os</span> <span class=\"o\">=</span> <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'os'</span><span class=\"p\">)</span>\n    <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'os_wrapper.os'</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">mock_os</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Act: invoking the tested code</span>\n    <span class=\"n\">os_wrapper</span><span class=\"o\">.</span><span class=\"n\">os_remove_wrap</span><span class=\"p\">(</span><span class=\"s1\">'/my/path/to/file.txt'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Assert: verifying that the original os.remove function was called</span>\n</pre>\n<h4>Generating the Assert section</h4>\n<p>Now it's time to add the asserts. Add the following code right after the Act\nstep:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mock_autogen</span>\n\n<span class=\"n\">generated_asserts</span> <span class=\"o\">=</span> <span class=\"n\">mock_autogen</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate_asserts</span><span class=\"p\">(</span><span class=\"n\">mock_os</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>mock_os</code> is the mocked object you created earlier.</p>\n<p>The <code>generated_asserts</code> variable now has the desired code:</p>\n<pre><span class=\"n\">mock_os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"o\">.</span><span class=\"n\">assert_called_once_with</span><span class=\"p\">(</span><span class=\"s1\">'/my/path/to/file.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>Place that code right after the act phase and you're done!</p>\n<p>The complete test function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os_wrapper</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_os_remove_wrap</span><span class=\"p\">(</span><span class=\"n\">mocker</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Arrange: setup any mocks to avoid deleting actual files</span>\n    <span class=\"c1\"># auto generated code</span>\n    <span class=\"c1\"># mocked modules</span>\n    <span class=\"n\">mock_os</span> <span class=\"o\">=</span> <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'os'</span><span class=\"p\">)</span>\n    <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'os_wrapper.os'</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">mock_os</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Act: invoking the tested code</span>\n    <span class=\"n\">os_wrapper</span><span class=\"o\">.</span><span class=\"n\">os_remove_wrap</span><span class=\"p\">(</span><span class=\"s1\">'/my/path/to/file.txt'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Assert: verifying that the original os.remove function was called</span>\n    <span class=\"c1\"># auto generated code</span>\n    <span class=\"n\">mock_os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"o\">.</span><span class=\"n\">assert_called_once_with</span><span class=\"p\">(</span><span class=\"s1\">'/my/path/to/file.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>As can be seen, most of the code was autogenerated so you can focus on the Act.</p>\n<h3>Complex example</h3>\n<p>The previous example was meant to demonstrate how to use the tool. If you have\nexperience with pytest-mock than you could have probably come up with the same\nboilerplate code by yourself in a reasonable time. The next example requires\nthe exact same steps to invoke the tool as before, but the benefit is much\ngreater.</p>\n<p>Let's assume you have a module <code>zip_writer.py</code> which holds a function to\nprocess a string sent to it and then add it to a zip file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zipfile</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_and_zip</span><span class=\"p\">(</span><span class=\"n\">zip_path</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"n\">contents</span><span class=\"p\">):</span>\n    <span class=\"n\">processed_contents</span> <span class=\"o\">=</span> <span class=\"s2\">\"processed \"</span> <span class=\"o\">+</span> <span class=\"n\">contents</span>  <span class=\"c1\"># some complex logic</span>\n    <span class=\"k\">with</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"n\">zip_path</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">zip_container</span><span class=\"p\">:</span>\n        <span class=\"n\">zip_container</span><span class=\"o\">.</span><span class=\"n\">writestr</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"n\">processed_contents</span><span class=\"p\">)</span>\n</pre>\n<p>Although this is a very short function, which does not do anything complex,\nwriting the test code takes a lot of time. It's the fact that the function uses\na context manager makes the testing more complex than it should be.</p>\n<p>Since the process of generating the test code is the same as in the previous\nexample, there is no need to repeat it. Let's look at the complete code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zip_writer</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_process_and_zip</span><span class=\"p\">(</span><span class=\"n\">mocker</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Arrange: auto generated code </span>\n    <span class=\"n\">mock_zipfile</span> <span class=\"o\">=</span> <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'zipfile'</span><span class=\"p\">)</span>\n    <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'tests.sample.code.tested_module.zipfile'</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">mock_zipfile</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Act: invoking the tested code</span>\n    <span class=\"n\">zip_writer</span><span class=\"o\">.</span><span class=\"n\">process_and_zip</span><span class=\"p\">(</span><span class=\"s1\">'/path/to.zip'</span><span class=\"p\">,</span> <span class=\"s1\">'in_zip.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'foo bar'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Assert: auto generated code</span>\n    <span class=\"n\">mock_zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"o\">.</span><span class=\"n\">assert_called_once_with</span><span class=\"p\">(</span><span class=\"s1\">'/path/to.zip'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span>\n    <span class=\"n\">mock_zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"o\">.</span><span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"fm\">__enter__</span><span class=\"o\">.</span><span class=\"n\">assert_called_once_with</span><span class=\"p\">()</span>\n    <span class=\"n\">mock_zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"o\">.</span><span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"fm\">__enter__</span><span class=\"o\">.</span><span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"n\">writestr</span><span class=\"o\">.</span> \\\n        <span class=\"n\">assert_called_once_with</span><span class=\"p\">(</span><span class=\"s1\">'in_zip.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'processed foo bar'</span><span class=\"p\">)</span>\n    <span class=\"n\">mock_zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"o\">.</span><span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"fm\">__exit__</span><span class=\"o\">.</span> \\\n        <span class=\"n\">assert_called_once_with</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Look at all the asserts. They are very useful:</p>\n<ul>\n<li>Checking that we opened the zip file with the right parameters.</li>\n<li>Checking that we wrote the correct data to the proper file.</li>\n<li>And finally, ensuring that <code>__enter__</code> and <code>__exit__</code> are called, so there\nare no open file handles which could cause problems.</li>\n</ul>\n<p>Can you imagine the time it would have taken you to code this on your own?</p>\n<h3>What's Next</h3>\n<h4>Mocking Everything</h4>\n<p>After you have followed through this example, you can use the Mock Generator\nto <strong>mock everything</strong>. This way you can see all the possibilities of mocks. You\ncan also print the result right away, to avoid having to inspect variables.\nIt can look something like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os_wrapper</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mock_autogen.pytest_mocker</span> <span class=\"kn\">import</span> <span class=\"n\">PytestMocker</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">PytestMocker</span><span class=\"p\">(</span><span class=\"n\">os_wrapper</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mock_everything</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">())</span> \n</pre>\n<p>What you would get is:</p>\n<pre><span class=\"c1\"># mocked modules</span>\n<span class=\"n\">mock_os</span> <span class=\"o\">=</span> <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'os'</span><span class=\"p\">)</span>\n<span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'os_wrapper.os'</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">mock_os</span><span class=\"p\">)</span>\n<span class=\"c1\"># mocked functions</span>\n<span class=\"n\">mock_os_remove_wrap</span> <span class=\"o\">=</span> <span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'os_remove_wrap'</span><span class=\"p\">)</span>\n<span class=\"n\">mocker</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'os_wrapper.os_remove'</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">mock_os_remove_wrap</span><span class=\"p\">)</span>\n<span class=\"c1\"># calls to generate_asserts, put this after the 'act'</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mock_autogen</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mock_autogen</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate_asserts</span><span class=\"p\">(</span><span class=\"n\">mock_os</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'mock_os'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mock_autogen</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate_asserts</span><span class=\"p\">(</span><span class=\"n\">mock_os_remove_wrap</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'mock_os_remove_wrap'</span><span class=\"p\">))</span>\n</pre>\n<p>Notice the mocked functions section, it allows you to mock functions in\nthat model. This is useful when you're testing a function which uses\nanother function you would like to mock.</p>\n<p>You even get the calls to generate the asserts prepared for you, place\nthis code after the act section as shown in the simple example.</p>\n<h4>Asserting Existing Mocks</h4>\n<p>At times, you may be editing a legacy code already containing mocks, or\nyou may choose to write the mocks yourself, to gain some extra control.</p>\n<p>You can use the mock generator to generate the asserts for you, for\nany given <code>Mock</code> or <code>MagicMock</code>, like so (replace <code>mockObj</code>):</p>\n<pre><span class=\"c1\"># calls to generate_asserts, put this after the 'act'</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mock_autogen.generator</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mock_autogen</span><span class=\"o\">.</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate_asserts</span><span class=\"p\">(</span><span class=\"n\">mockObj</span><span class=\"p\">))</span>\n</pre>\n<h2>Wrapping up</h2>\n<p>I hope that by now you were convinced that this tool can save you a lot of\ntime.</p>\n<p>See <code>tests</code> folder for additional usage examples like mocking classes and\ninstances, using fixtures to share mocks between tests and much more.</p>\n<p>If you would like to contribute, I'm accepting pull requests :)</p>\n\n          </div>"}, "last_serial": 7030172, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a25d8d511aff447a7a499494960603ab", "sha256": "9605941d8d16971a35b0c6ed6e33b32e55f4e611bdd91874646cf5c58449517e"}, "downloads": -1, "filename": "mock_generator-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a25d8d511aff447a7a499494960603ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13881, "upload_time": "2019-07-28T09:18:38", "upload_time_iso_8601": "2019-07-28T09:18:38.240263Z", "url": "https://files.pythonhosted.org/packages/dd/fd/c77bfc42d36f47ebc8fcd0700487c12b6a06695a328f160d8e187383f135/mock_generator-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e390182d2d51ed11517687310959726", "sha256": "b2a6ba2fe95555ef28d7fe87e52d75cb126ff46e03743f5fe69e80ed10d5e185"}, "downloads": -1, "filename": "mock-generator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4e390182d2d51ed11517687310959726", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13720, "upload_time": "2019-07-28T09:18:40", "upload_time_iso_8601": "2019-07-28T09:18:40.923097Z", "url": "https://files.pythonhosted.org/packages/1c/9f/5693d566b4f0b7ba56dd45b77af608808cee546428dfe1a574fc7c64d997/mock-generator-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cec23b590b66047162c56abc89b7ddad", "sha256": "602c2f8fec8fe17240a1f3ad7eb9bac507e0a9b5c22d3206d34c02881c932bc7"}, "downloads": -1, "filename": "mock_generator-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cec23b590b66047162c56abc89b7ddad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13939, "upload_time": "2019-07-28T11:16:44", "upload_time_iso_8601": "2019-07-28T11:16:44.713313Z", "url": "https://files.pythonhosted.org/packages/65/08/5139eb148c37d7239c949f591bdc0bf7620219ad131dbe1fbd9cdd789a29/mock_generator-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ecc385109e392bc3e75038c5dd8f053", "sha256": "4d879c87df1f9602045395bd27429619f5284d0d17e3b8229b8224aef13c68ae"}, "downloads": -1, "filename": "mock-generator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6ecc385109e392bc3e75038c5dd8f053", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13928, "upload_time": "2019-07-28T11:16:46", "upload_time_iso_8601": "2019-07-28T11:16:46.626763Z", "url": "https://files.pythonhosted.org/packages/6b/db/d57c0ac36c48140b590189c95206c1a69186225c462e27f0f00e586794fb/mock-generator-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5a815e873b5e50c34bbfedab37b13249", "sha256": "f63ec0c2c5ae33495d18021bea25c0b72b1cbc6473fe10b6c0d50c54bf403ae6"}, "downloads": -1, "filename": "mock_generator-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a815e873b5e50c34bbfedab37b13249", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13942, "upload_time": "2019-07-28T11:33:39", "upload_time_iso_8601": "2019-07-28T11:33:39.678523Z", "url": "https://files.pythonhosted.org/packages/b1/d8/221e854db0b74aeda2fa33625dd8d39127db2056a88344c20069c947528a/mock_generator-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78a82d57d6344c40f050830d2cabd379", "sha256": "271e2bbc37a3a07319bfccc702daed574e6c02118518f4f8bff74a0a2c93a835"}, "downloads": -1, "filename": "mock-generator-0.2.0.tar.gz", "has_sig": false, "md5_digest": "78a82d57d6344c40f050830d2cabd379", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13922, "upload_time": "2019-07-28T11:33:41", "upload_time_iso_8601": "2019-07-28T11:33:41.974788Z", "url": "https://files.pythonhosted.org/packages/ea/3a/1ccb69998bd7171ef0ec4fb11d6d67b6ae9e25e3f2be376cafd5c579baf4/mock-generator-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7aa84368e3e8fbf7134ab6f2eaefa081", "sha256": "44fa445a5ef158bc879a7c5ec703e5bf8ea750014e97c9a926fee4895cbbf7f1"}, "downloads": -1, "filename": "mock_generator-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7aa84368e3e8fbf7134ab6f2eaefa081", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 16683, "upload_time": "2019-08-01T17:29:13", "upload_time_iso_8601": "2019-08-01T17:29:13.724734Z", "url": "https://files.pythonhosted.org/packages/40/51/1ecca83252bcfb073ab89f4a70a1f3d7ed46456b95e6aeda976a8e46b14f/mock_generator-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c02b4f9dc8890dabba46e8bb570f3ef3", "sha256": "409f6f2557412048eb0269659a695764d0064cdd86c0898d2ff6118858ad4322"}, "downloads": -1, "filename": "mock-generator-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c02b4f9dc8890dabba46e8bb570f3ef3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 15475, "upload_time": "2019-08-01T17:29:16", "upload_time_iso_8601": "2019-08-01T17:29:16.039792Z", "url": "https://files.pythonhosted.org/packages/85/4f/7f92cb7b52865be09e301efa2ab2642bc2379dc2b9aebae15fe923025752/mock-generator-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "8e6b3bca756c80278c2c051de48966e0", "sha256": "e8f32cd5203ce5472cde91a8233ca773af50dbb9daaa2a9f5ec0092a65984f2f"}, "downloads": -1, "filename": "mock_generator-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8e6b3bca756c80278c2c051de48966e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 16825, "upload_time": "2019-09-29T09:00:09", "upload_time_iso_8601": "2019-09-29T09:00:09.066822Z", "url": "https://files.pythonhosted.org/packages/3e/be/e2ee3dbe924ad89db6f638ef24eaa96cd71c7f998957d1188f9d03436097/mock_generator-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c03b32fb75dc0befd6600b16cf63f12f", "sha256": "da4e8146a9cfb003efbf9767eb1e9350613d0dc03fed62a3eb153fd434b993fc"}, "downloads": -1, "filename": "mock-generator-0.2.2.tar.gz", "has_sig": false, "md5_digest": "c03b32fb75dc0befd6600b16cf63f12f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 15830, "upload_time": "2019-09-29T09:00:11", "upload_time_iso_8601": "2019-09-29T09:00:11.450421Z", "url": "https://files.pythonhosted.org/packages/2a/93/8b91240cb4978d8172ff0222d41e852cc823c7b9eef0c9fb20b452535dfb/mock-generator-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "b950de11d17516048ebc5ad42428af2c", "sha256": "5105f0f8af9a10ffc8b1cbd841398a63cd077f22139fa5af2bbc1258f386f3ee"}, "downloads": -1, "filename": "mock_generator-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b950de11d17516048ebc5ad42428af2c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 17181, "upload_time": "2019-11-24T15:37:43", "upload_time_iso_8601": "2019-11-24T15:37:43.374598Z", "url": "https://files.pythonhosted.org/packages/81/d0/0611f45abd398233838714f4b3691a41496c9ddc427bd9549edf41c1c897/mock_generator-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae0d05faa2130becf2f46342466101f0", "sha256": "9069c6c7136a13c2ca8960c0705258e248500ec1132aeaed353582188766b31c"}, "downloads": -1, "filename": "mock-generator-0.2.3.tar.gz", "has_sig": false, "md5_digest": "ae0d05faa2130becf2f46342466101f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 16102, "upload_time": "2019-11-24T15:37:45", "upload_time_iso_8601": "2019-11-24T15:37:45.303407Z", "url": "https://files.pythonhosted.org/packages/5c/98/4bf0dca5e45cd131c027bfaa57f8e2680b14f3aa119df472f21d631bf3d0/mock-generator-0.2.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "48f4d59253f085087dac81ce9f2033a4", "sha256": "bbc6b9d611ef4fe578b4bc9712cf2d7b2ee6253e07845eb049f57482a545de2c"}, "downloads": -1, "filename": "mock_generator-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48f4d59253f085087dac81ce9f2033a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17323, "upload_time": "2020-04-16T07:36:14", "upload_time_iso_8601": "2020-04-16T07:36:14.479976Z", "url": "https://files.pythonhosted.org/packages/e1/a2/500dba31e167e28c136a974e2261b1051d7b156f6c6efa67ae417185615c/mock_generator-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "940bcda3f613fb221b85b82fac4cad9e", "sha256": "015469ba12b69b069f5acbe635cc9ef8f330e17ed19e223a12d69c404814d85f"}, "downloads": -1, "filename": "mock-generator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "940bcda3f613fb221b85b82fac4cad9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14428, "upload_time": "2020-04-16T07:36:15", "upload_time_iso_8601": "2020-04-16T07:36:15.751331Z", "url": "https://files.pythonhosted.org/packages/06/64/2917fa52f425c8e6062f7908b222efbe81b77d60fbc543cdfd4f0103d9b6/mock-generator-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48f4d59253f085087dac81ce9f2033a4", "sha256": "bbc6b9d611ef4fe578b4bc9712cf2d7b2ee6253e07845eb049f57482a545de2c"}, "downloads": -1, "filename": "mock_generator-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48f4d59253f085087dac81ce9f2033a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17323, "upload_time": "2020-04-16T07:36:14", "upload_time_iso_8601": "2020-04-16T07:36:14.479976Z", "url": "https://files.pythonhosted.org/packages/e1/a2/500dba31e167e28c136a974e2261b1051d7b156f6c6efa67ae417185615c/mock_generator-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "940bcda3f613fb221b85b82fac4cad9e", "sha256": "015469ba12b69b069f5acbe635cc9ef8f330e17ed19e223a12d69c404814d85f"}, "downloads": -1, "filename": "mock-generator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "940bcda3f613fb221b85b82fac4cad9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14428, "upload_time": "2020-04-16T07:36:15", "upload_time_iso_8601": "2020-04-16T07:36:15.751331Z", "url": "https://files.pythonhosted.org/packages/06/64/2917fa52f425c8e6062f7908b222efbe81b77d60fbc543cdfd4f0103d9b6/mock-generator-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:03 2020"}