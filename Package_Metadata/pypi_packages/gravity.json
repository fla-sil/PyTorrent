{"info": {"author": "The Galaxy Team", "author_email": "team@galaxyproject.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "========================================\n gravity - Galaxy Server Administration\n========================================\n\nA process manager (`supervisor`_) and management tools for `Galaxy`_ servers.\n\nInstalling this will give you an executables, ``galaxy`` which is used to\nmanage Galaxy.  A virtualenv will automatically be created for your Galaxy\nserver. It's a good thing.\n\nInstallation\n============\n\nPython 2.7 is required. Sadly, Python 3 won't work, because supervisor doesn't\nsupport it, `although work is in progress <supervisor issue 491_>`_.\n\nTo install:\n\n``pip install gravity``\n\nTo make your life easier, you are encourged to install into a `virtualenv`_,\nand to make that trivial, you are encouraged to use `virtualenv-burrito`_.\n\nNotes\n=====\n\n``[galaxy:server]``\n\nAdd this section to your ``galaxy.ini``, ``reports_wsgi.ini``,\n``tool_shed_wsgi.ini`` to set:\n\n::\n\n    instance_name = string  # override the default auto-generated instance name\n    galaxy_root = /path     # if galaxy is not at ../ or ./ from the config file\n    virtualenv = /path      # override default auto-generated virtualenv path (it\n                            #   will be created if it does not exist)\n    log_dir = /path         # where to log galaxy server output. for uwsgi you\n                            #   probably want to use uwsgi's logto option though\n    uwsgi_path = /path      # explicit path to uwsgi, otherwise it will be found on\n                            #   $PATH. Or, the special value `install`, which will\n                            #   cause it to be installed into service's virtualenv\n\nPotentially useful information, tricks, etc.:\n\n-  Unless you set different state dirs with ``--state-dir`` or\n   ``$GRAVITY_STATE_DIR``, there will only be one supervisord for all\n   of your galaxy instances. But they will be separated out by a\n   generated ``instance_name``. You can override this with\n   ``instance_name`` in ``[galaxy:server]``.\n\n-  To put configs (galaxy configs, galaxy + reports, whatever) into the\n   same instance, set their ``instance_name`` to the same string in each\n   config's ``[galaxy:server]``. This puts them into a single supervisor\n   group, which may be what you want, although note that any\n   start/stop/restart/etc. is performed on the entire group, which may\n   not be what you want.\n\n-  The config manager generally views things in terms of config files.\n   If you change the virtualenv or ``galaxy_root`` in a config file, it\n   will not change that value for all services in the instance\n   (supervisor group), it will only change it for the services started\n   from that config.\n\n-  Anything you drop in to ``$GRAVITY_STATE_DIR/supervisor/supervisord.conf.d``\n   will be picked up by supervisord on a ``galaxy supervisorctl update`` or just\n   ``galaxy update``\n\n-  The ``job_conf.xml`` parsed corresponds to the galaxy config, it'll\n   check the path in ``job_config_file`` in ``[app:main]`` or default to\n   ``galaxy_root/config/job_conf.xml`` if that file exists. If handlers\n   in ``job_conf.xml`` have a corresponding ``[server:]`` in\n   ``galaxy.ini``, they will be started using Paste. If there is not a\n   corresponding ``[server:]`` they will be started as a \"standalone\"\n   server with ``galaxy_root/lib/galaxy/main.py``\n\nSubcommands\n===========\n\nUse ``galaxy -h`` for help. Subcommands also support ``-h``, e.g.  ``galaxy add\n-h``.\n\n``add``\n\nRegister a Galaxy, Reports, or Tool Shed server config with the process\nmanager, create a virtualenv, create supervisor configs, and update.\nDoes not start.\n\n``list``\n\nList config files registered with the process manager.\n\n``instances``\n\nList known instances and services.\n\n``get /path/to/galaxy.ini``\n\nShow stored configuration details for the named config file.\n\n``rename /path/to/old.ini /path/to/new.ini``\n\nUse this if you move your config.\n\n``remove /path/to/galaxy.ini`` ``remove instance_name``\n\nDeregister a Galaxy et. al. server config., or all configs referencing\nthe supplied ``instance_name``.\n\n| ``start [instance_name]``\n| ``stop [instance_name]``\n| ``restart [instance_name]``\n\nRoughly what you'd expect. If ``instance_name`` isn't provided, perform\nthe operation on all known instances.\n\nIf you call ``start`` from the root (or from 1 subdirectory deep) of a Galaxy\nsource tree, ``config/galaxy.ini`` if it exists, or else\n``config/galaxy.ini.sample`` will automatically be registered with ``galaxy\nadd`` and then ``galaxy start`` will start the newly added server.\n\n``reload [instance_name]``\n\nThe same as restart but uWSGI master processes will only receive a\n``SIGHUP`` so the workers restart but the master stays up.\n\n``graceful [instance_name]``\n\nThe same as reload but Paste servers will be restarted sequentially, and\nthe next one will not be restarted until the previous one is up and\naccepting requests.\n\n``update``\n\nFigure out what has changed in configs, which could be:\n\n-  changes to ``[galaxy:server]``\n-  adding or removing ``[server:]`` sections\n-  adding or removing a ``[uwsgi]`` section\n-  adding or removing handlers in ``job_conf.xml``\n\nThis will perform the operation for all registered configs, which may\ncause unintended service restarts.\n\nAny needed changes to supervisor configs will be performed and then\n``supervisorctl update`` will be called. You will need to do a\n``galaxy start`` after this to start any newly added instances (or\npossibly even old instances, since adding new programs to a group in\nsupervisor causes the entire group to be stopped).\n\nUpdate is called automatically for the ``start``, ``stop``, ``restart``,\n``reload``, and ``graceful`` subcommands.\n\n``supervisorctl [subcommand]``\n\nPass through directly to supervisor\n\n``shutdown``\n\nStop supervisord\n\n.. _supervisor: http://supervisord.org/\n.. _Galaxy: http://galaxyproject.org/\n.. _supervisor issue 491: https://github.com/Supervisor/supervisor/issues/491\n.. _virtualenv: https://virtualenv.pypa.io/\n.. _virtualenv-burrito: https://github.com/brainsik/virtualenv-burrito\n\n\n=========\n History\n=========\n\n0.8.3\n=====\n\n- Merge ``galaxycfg`` and ``galaxyadm`` commands to ``galaxy``.\n\n0.8.2\n=====\n\n- Allow for passing names of individual services directly to ``supervisorctl``\n  via the ``start``, ``stop``, and ``restart`` methods.\n- Fix a bug where uWSGI would not start when using the automatic virtualenv\n  install method.\n- Fix a bug where the reload method was not reloading everything.\n\n0.8.1\n=====\n\n- Version bump because I deleted the 0.8 files from PyPI, and despite the fact\n  that it lets you delete them, it doesn't let you upload once they have been\n  uploaded once...\n\n0.8\n===\n\n- Add auto-register to ``galaxy start`` if it's called from the root (or\n  subdirectory) of a Galaxy root directory.\n- Make ``galaxycfg remove`` accept instance names as params in addition to\n  config file paths.\n- Use the same hash generated for an instance name as the hash for a generated\n  virtualenv name, so virtualenvs are more easily identified as belonging to a\n  config.\n- Renamed from ``galaxyadmin`` to ``gravity`` (thanks John Chilton).\n\n0.7\n===\n\n- Added the ``galaxyadm`` subcommand ``graceful`` on a suggestion from Nicola\n  Soranzo.\n- Install uWSGI into the config's virtualenv if requested.\n- Removed any dependence on Galaxy and eggs.\n- Moved project to its own repository from the Galaxy clone I'd been working\n  from.\n\nOlder\n=====\n\n- Works in progress as part of the Galaxy code.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/galaxyproject/gravity", "keywords": "gravity galaxy", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "gravity", "package_url": "https://pypi.org/project/gravity/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gravity/", "project_urls": {"Homepage": "https://github.com/galaxyproject/gravity"}, "release_url": "https://pypi.org/project/gravity/0.8.3/", "requires_dist": ["supervisor", "setproctitle", "virtualenv"], "requires_python": null, "summary": "Manage Galaxy servers", "version": "0.8.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"gravity-galaxy-server-administration\">\n<h2>gravity - Galaxy Server Administration</h2>\n<p>A process manager (<a href=\"http://supervisord.org/\" rel=\"nofollow\">supervisor</a>) and management tools for <a href=\"http://galaxyproject.org/\" rel=\"nofollow\">Galaxy</a> servers.</p>\n<p>Installing this will give you an executables, <tt>galaxy</tt> which is used to\nmanage Galaxy.  A virtualenv will automatically be created for your Galaxy\nserver. It\u2019s a good thing.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Python 2.7 is required. Sadly, Python 3 won\u2019t work, because supervisor doesn\u2019t\nsupport it, <a href=\"https://github.com/Supervisor/supervisor/issues/491\" rel=\"nofollow\">although work is in progress</a>.</p>\n<p>To install:</p>\n<p><tt>pip install gravity</tt></p>\n<p>To make your life easier, you are encourged to install into a <a href=\"https://virtualenv.pypa.io/\" rel=\"nofollow\">virtualenv</a>,\nand to make that trivial, you are encouraged to use <a href=\"https://github.com/brainsik/virtualenv-burrito\" rel=\"nofollow\">virtualenv-burrito</a>.</p>\n</div>\n<div id=\"notes\">\n<h3>Notes</h3>\n<p><tt>[galaxy:server]</tt></p>\n<p>Add this section to your <tt>galaxy.ini</tt>, <tt>reports_wsgi.ini</tt>,\n<tt>tool_shed_wsgi.ini</tt> to set:</p>\n<pre>instance_name = string  # override the default auto-generated instance name\ngalaxy_root = /path     # if galaxy is not at ../ or ./ from the config file\nvirtualenv = /path      # override default auto-generated virtualenv path (it\n                        #   will be created if it does not exist)\nlog_dir = /path         # where to log galaxy server output. for uwsgi you\n                        #   probably want to use uwsgi's logto option though\nuwsgi_path = /path      # explicit path to uwsgi, otherwise it will be found on\n                        #   $PATH. Or, the special value `install`, which will\n                        #   cause it to be installed into service's virtualenv\n</pre>\n<p>Potentially useful information, tricks, etc.:</p>\n<ul>\n<li>Unless you set different state dirs with <tt><span class=\"pre\">--state-dir</span></tt> or\n<tt>$GRAVITY_STATE_DIR</tt>, there will only be one supervisord for all\nof your galaxy instances. But they will be separated out by a\ngenerated <tt>instance_name</tt>. You can override this with\n<tt>instance_name</tt> in <tt>[galaxy:server]</tt>.</li>\n<li>To put configs (galaxy configs, galaxy + reports, whatever) into the\nsame instance, set their <tt>instance_name</tt> to the same string in each\nconfig\u2019s <tt>[galaxy:server]</tt>. This puts them into a single supervisor\ngroup, which may be what you want, although note that any\nstart/stop/restart/etc. is performed on the entire group, which may\nnot be what you want.</li>\n<li>The config manager generally views things in terms of config files.\nIf you change the virtualenv or <tt>galaxy_root</tt> in a config file, it\nwill not change that value for all services in the instance\n(supervisor group), it will only change it for the services started\nfrom that config.</li>\n<li>Anything you drop in to <tt>$GRAVITY_STATE_DIR/supervisor/supervisord.conf.d</tt>\nwill be picked up by supervisord on a <tt>galaxy supervisorctl update</tt> or just\n<tt>galaxy update</tt></li>\n<li>The <tt>job_conf.xml</tt> parsed corresponds to the galaxy config, it\u2019ll\ncheck the path in <tt>job_config_file</tt> in <tt>[app:main]</tt> or default to\n<tt>galaxy_root/config/job_conf.xml</tt> if that file exists. If handlers\nin <tt>job_conf.xml</tt> have a corresponding <tt>[server:]</tt> in\n<tt>galaxy.ini</tt>, they will be started using Paste. If there is not a\ncorresponding <tt>[server:]</tt> they will be started as a \u201cstandalone\u201d\nserver with <tt>galaxy_root/lib/galaxy/main.py</tt></li>\n</ul>\n</div>\n<div id=\"subcommands\">\n<h3>Subcommands</h3>\n<p>Use <tt>galaxy <span class=\"pre\">-h</span></tt> for help. Subcommands also support <tt><span class=\"pre\">-h</span></tt>, e.g.  <tt>galaxy add\n<span class=\"pre\">-h</span></tt>.</p>\n<p><tt>add</tt></p>\n<p>Register a Galaxy, Reports, or Tool Shed server config with the process\nmanager, create a virtualenv, create supervisor configs, and update.\nDoes not start.</p>\n<p><tt>list</tt></p>\n<p>List config files registered with the process manager.</p>\n<p><tt>instances</tt></p>\n<p>List known instances and services.</p>\n<p><tt>get /path/to/galaxy.ini</tt></p>\n<p>Show stored configuration details for the named config file.</p>\n<p><tt>rename /path/to/old.ini /path/to/new.ini</tt></p>\n<p>Use this if you move your config.</p>\n<p><tt>remove /path/to/galaxy.ini</tt> <tt>remove instance_name</tt></p>\n<p>Deregister a Galaxy et. al. server config., or all configs referencing\nthe supplied <tt>instance_name</tt>.</p>\n<div>\n<div><tt>start [instance_name]</tt></div>\n<div><tt>stop [instance_name]</tt></div>\n<div><tt>restart [instance_name]</tt></div>\n</div>\n<p>Roughly what you\u2019d expect. If <tt>instance_name</tt> isn\u2019t provided, perform\nthe operation on all known instances.</p>\n<p>If you call <tt>start</tt> from the root (or from 1 subdirectory deep) of a Galaxy\nsource tree, <tt>config/galaxy.ini</tt> if it exists, or else\n<tt>config/galaxy.ini.sample</tt> will automatically be registered with <tt>galaxy\nadd</tt> and then <tt>galaxy start</tt> will start the newly added server.</p>\n<p><tt>reload [instance_name]</tt></p>\n<p>The same as restart but uWSGI master processes will only receive a\n<tt>SIGHUP</tt> so the workers restart but the master stays up.</p>\n<p><tt>graceful [instance_name]</tt></p>\n<p>The same as reload but Paste servers will be restarted sequentially, and\nthe next one will not be restarted until the previous one is up and\naccepting requests.</p>\n<p><tt>update</tt></p>\n<p>Figure out what has changed in configs, which could be:</p>\n<ul>\n<li>changes to <tt>[galaxy:server]</tt></li>\n<li>adding or removing <tt>[server:]</tt> sections</li>\n<li>adding or removing a <tt>[uwsgi]</tt> section</li>\n<li>adding or removing handlers in <tt>job_conf.xml</tt></li>\n</ul>\n<p>This will perform the operation for all registered configs, which may\ncause unintended service restarts.</p>\n<p>Any needed changes to supervisor configs will be performed and then\n<tt>supervisorctl update</tt> will be called. You will need to do a\n<tt>galaxy start</tt> after this to start any newly added instances (or\npossibly even old instances, since adding new programs to a group in\nsupervisor causes the entire group to be stopped).</p>\n<p>Update is called automatically for the <tt>start</tt>, <tt>stop</tt>, <tt>restart</tt>,\n<tt>reload</tt>, and <tt>graceful</tt> subcommands.</p>\n<p><tt>supervisorctl [subcommand]</tt></p>\n<p>Pass through directly to supervisor</p>\n<p><tt>shutdown</tt></p>\n<p>Stop supervisord</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.8.3</h3>\n<ul>\n<li>Merge <tt>galaxycfg</tt> and <tt>galaxyadm</tt> commands to <tt>galaxy</tt>.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.8.2</h3>\n<ul>\n<li>Allow for passing names of individual services directly to <tt>supervisorctl</tt>\nvia the <tt>start</tt>, <tt>stop</tt>, and <tt>restart</tt> methods.</li>\n<li>Fix a bug where uWSGI would not start when using the automatic virtualenv\ninstall method.</li>\n<li>Fix a bug where the reload method was not reloading everything.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.8.1</h3>\n<ul>\n<li>Version bump because I deleted the 0.8 files from PyPI, and despite the fact\nthat it lets you delete them, it doesn\u2019t let you upload once they have been\nuploaded once\u2026</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.8</h3>\n<ul>\n<li>Add auto-register to <tt>galaxy start</tt> if it\u2019s called from the root (or\nsubdirectory) of a Galaxy root directory.</li>\n<li>Make <tt>galaxycfg remove</tt> accept instance names as params in addition to\nconfig file paths.</li>\n<li>Use the same hash generated for an instance name as the hash for a generated\nvirtualenv name, so virtualenvs are more easily identified as belonging to a\nconfig.</li>\n<li>Renamed from <tt>galaxyadmin</tt> to <tt>gravity</tt> (thanks John Chilton).</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.7</h3>\n<ul>\n<li>Added the <tt>galaxyadm</tt> subcommand <tt>graceful</tt> on a suggestion from Nicola\nSoranzo.</li>\n<li>Install uWSGI into the config\u2019s virtualenv if requested.</li>\n<li>Removed any dependence on Galaxy and eggs.</li>\n<li>Moved project to its own repository from the Galaxy clone I\u2019d been working\nfrom.</li>\n</ul>\n</div>\n<div id=\"older\">\n<h3>Older</h3>\n<ul>\n<li>Works in progress as part of the Galaxy code.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1429457, "releases": {"0.8": [], "0.8.1": [{"comment_text": "", "digests": {"md5": "ea8383ee67e2f44de9621ed735daf8dc", "sha256": "c4d6095647368646d9d66d48f1af773be31afa170d6bf1b75fb91a8bf3a8ba3c"}, "downloads": -1, "filename": "gravity-0.8.1-py27-none-any.whl", "has_sig": true, "md5_digest": "ea8383ee67e2f44de9621ed735daf8dc", "packagetype": "bdist_wheel", "python_version": "py27", "requires_python": null, "size": 20688, "upload_time": "2015-02-13T20:54:52", "upload_time_iso_8601": "2015-02-13T20:54:52.133172Z", "url": "https://files.pythonhosted.org/packages/c8/2f/3d2d31a0df6112bca61c3a93d7a0db784ab70bff2f001d1799f9e8c3c077/gravity-0.8.1-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e805e0d0a0d3ae884aeee9b1c7a4b5ff", "sha256": "b2f7016941996b0ddd64ef7776969bf4c33171ab5d4be63b882dba06725d4e29"}, "downloads": -1, "filename": "gravity-0.8.1.tar.gz", "has_sig": true, "md5_digest": "e805e0d0a0d3ae884aeee9b1c7a4b5ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15976, "upload_time": "2015-02-13T20:54:55", "upload_time_iso_8601": "2015-02-13T20:54:55.212159Z", "url": "https://files.pythonhosted.org/packages/44/27/32decc9a491473e920b821aa34fcb085ca49982a58840a28353d256846d2/gravity-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "2972f62000b7a117ddc66c2d9c864820", "sha256": "b466d7bdfa99a47b7f6cf14050e45368d7d44529ab51890aa64980a77b918ca4"}, "downloads": -1, "filename": "gravity-0.8.2-py27-none-any.whl", "has_sig": true, "md5_digest": "2972f62000b7a117ddc66c2d9c864820", "packagetype": "bdist_wheel", "python_version": "py27", "requires_python": null, "size": 20500, "upload_time": "2015-02-19T05:21:17", "upload_time_iso_8601": "2015-02-19T05:21:17.148093Z", "url": "https://files.pythonhosted.org/packages/ec/a2/caf566f8644605b0bea885f39854117cc1a1a7834c4c524b52d7e2f0771f/gravity-0.8.2-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91247bdbe8e82a8bf39750183eb7b47b", "sha256": "27fda7f7beffea1332af4836315f3456dc078c576913c2e9558101227211c061"}, "downloads": -1, "filename": "gravity-0.8.2.tar.gz", "has_sig": true, "md5_digest": "91247bdbe8e82a8bf39750183eb7b47b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15842, "upload_time": "2015-02-19T05:21:20", "upload_time_iso_8601": "2015-02-19T05:21:20.489755Z", "url": "https://files.pythonhosted.org/packages/cd/88/20425fc94fd247142eaa7670fd1cf2e65e2a4e3ee954984d00210d45d1f6/gravity-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "1f076af16dfe039f9c57a9e24749e64b", "sha256": "53e07e4b64292e76481be14ba2a1577a002d273d5f0483961f5f0c63e973e120"}, "downloads": -1, "filename": "gravity-0.8.3-py27-none-any.whl", "has_sig": true, "md5_digest": "1f076af16dfe039f9c57a9e24749e64b", "packagetype": "bdist_wheel", "python_version": "py27", "requires_python": null, "size": 20276, "upload_time": "2015-02-19T05:55:25", "upload_time_iso_8601": "2015-02-19T05:55:25.588227Z", "url": "https://files.pythonhosted.org/packages/cd/5b/54db553e3bba2b8f4961a959989c23df6131cee572f9f6bd00b1d6ab3313/gravity-0.8.3-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb73acc980ee71ac26c8a0a3c2d1ff46", "sha256": "d8dcaa2b55b46f762e252b581c23c98445912c8868f4b19d3050c2567b133d73"}, "downloads": -1, "filename": "gravity-0.8.3.tar.gz", "has_sig": true, "md5_digest": "bb73acc980ee71ac26c8a0a3c2d1ff46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15620, "upload_time": "2015-02-19T05:55:27", "upload_time_iso_8601": "2015-02-19T05:55:27.574905Z", "url": "https://files.pythonhosted.org/packages/78/32/4b1f7a219082c3059dce4ab211f1c3b10398f80decaadcd1e978f4d7dbda/gravity-0.8.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f076af16dfe039f9c57a9e24749e64b", "sha256": "53e07e4b64292e76481be14ba2a1577a002d273d5f0483961f5f0c63e973e120"}, "downloads": -1, "filename": "gravity-0.8.3-py27-none-any.whl", "has_sig": true, "md5_digest": "1f076af16dfe039f9c57a9e24749e64b", "packagetype": "bdist_wheel", "python_version": "py27", "requires_python": null, "size": 20276, "upload_time": "2015-02-19T05:55:25", "upload_time_iso_8601": "2015-02-19T05:55:25.588227Z", "url": "https://files.pythonhosted.org/packages/cd/5b/54db553e3bba2b8f4961a959989c23df6131cee572f9f6bd00b1d6ab3313/gravity-0.8.3-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb73acc980ee71ac26c8a0a3c2d1ff46", "sha256": "d8dcaa2b55b46f762e252b581c23c98445912c8868f4b19d3050c2567b133d73"}, "downloads": -1, "filename": "gravity-0.8.3.tar.gz", "has_sig": true, "md5_digest": "bb73acc980ee71ac26c8a0a3c2d1ff46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15620, "upload_time": "2015-02-19T05:55:27", "upload_time_iso_8601": "2015-02-19T05:55:27.574905Z", "url": "https://files.pythonhosted.org/packages/78/32/4b1f7a219082c3059dce4ab211f1c3b10398f80decaadcd1e978f4d7dbda/gravity-0.8.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:25 2020"}