{"info": {"author": "Steven Loria", "author_email": "sloria1@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP"], "description": "*****************\nwebargs-starlette\n*****************\n\n.. image:: https://badgen.net/pypi/v/webargs-starlette\n    :target: https://badge.fury.io/py/webargs-starlette\n    :alt: PyPI version\n\n.. image:: https://dev.azure.com/sloria/sloria/_apis/build/status/sloria.webargs-starlette?branchName=master\n    :target: https://dev.azure.com/sloria/sloria/_build/latest?definitionId=11&branchName=master\n    :alt: Build status\n\n.. image:: https://badgen.net/badge/marshmallow/2,3?list=1\n    :target: https://marshmallow.readthedocs.io/en/latest/upgrading.html\n    :alt: marshmallow 2/3 compatible\n\n.. image:: https://badgen.net/badge/code%20style/black/000\n    :target: https://github.com/ambv/black\n    :alt: code style: black\n\n\nwebargs-starlette is a library for declarative request parsing and\nvalidation with `Starlette <https://github.com/encode/starlette>`_,\nbuilt on top of `webargs <https://github.com/marshmallow-code/webargs>`_.\n\nIt has all the goodness of `webargs <https://github.com/marshmallow-code/webargs>`_, \nwith some extra sugar for type annotations.\n\n.. code-block:: python\n\n    import uvicorn\n    from starlette.applications import Starlette\n    from starlette.responses import JSONResponse\n    from webargs_starlette import use_annotations\n\n    app = Starlette()\n\n\n    @app.route(\"/\")\n    @use_annotations(location=\"query\")\n    async def index(request, name: str = \"World\"):\n        return JSONResponse({\"Hello\": name})\n\n\n    if __name__ == \"__main__\":\n        uvicorn.run(app, port=5000)\n\n    # curl 'http://localhost:5000/'\n    # {\"Hello\": \"World\"}\n    # curl 'http://localhost:5000/?name=Ada'\n    # {\"Hello\": \"Ada\"}\n\nInstall\n=======\n\n::\n\n    pip install -U webargs-starlette\n\n\nUsage\n=====\n\nParser Usage\n------------\n\nUse ``parser.parse`` to parse a Starlette ``Request`` with a\ndictionary of fields.\n\n.. code-block:: python\n\n    from starlette.applications import Starlette\n    from starlette.responses import JSONResponse\n    from webargs import fields\n    from webargs_starlette import parser\n\n    app = Starlette()\n\n\n    @app.route(\"/\")\n    async def homepage(request):\n        args = {\"name\": fields.Str(required=True), \"greeting\": fields.Str(missing=\"hello\")}\n        parsed = await parser.parse(args, request)\n        greeting = parsed[\"greeting\"]\n        name = parsed[\"name\"]\n        return JSONResponse({\"message\": f\"{greeting} {name}\"})\n\n\nDecorators\n----------\n\nUse the ``use_args`` decorator to inject the parsed arguments\ndictionary into the handler function. The following snippet is equivalent to the\nfirst example.\n\n**Important**: Decorated functions MUST be coroutine functions.\n\n.. code-block:: python\n\n    from starlette.applications import Starlette\n    from starlette.responses import JSONResponse\n    from webargs import fields\n    from webargs_starlette import use_args\n\n    app = Starlette()\n\n\n    @app.route(\"/\")\n    @use_args({\"name\": fields.Str(required=True), \"greeting\": fields.Str(missing=\"hello\")})\n    async def homepage(request, args):\n        greeting = args[\"greeting\"]\n        name = args[\"name\"]\n        return JSONResponse({\"message\": f\"{greeting} {name}\"})\n\n\nThe ``use_kwargs`` decorator injects the parsed arguments as keyword arguments.\n\n.. code-block:: python\n\n    from starlette.applications import Starlette\n    from starlette.responses import JSONResponse\n    from webargs import fields\n    from webargs_starlette import use_args\n\n    app = Starlette()\n\n\n    @app.route(\"/\")\n    @use_kwargs(\n        {\"name\": fields.Str(required=True), \"greeting\": fields.Str(missing=\"hello\")}\n    )\n    async def homepage(request, name, greeting):\n        return JSONResponse({\"message\": f\"{greeting} {name}\"})\n\n\nSee `decorator_example.py <https://github.com/sloria/webargs-starlette/blob/master/examples/decorator_example.py>`_\nfor a more complete example of ``use_args`` and ``use_kwargs`` usage.\n\nError Handling\n--------------\n\nWhen validation fails, the parser will raise a ``WebargsHTTPException``,\nwhich is the same as Starlette's ``HTTPException`` with the addition of\nof the ``messages`` (validation messages), ``headers`` , ``exception`` (underlying exception), and ``schema`` (marshmallow ``Schema``) attributes.\n\nYou can use a custom exception handler to return the error messages as\nJSON.\n\n\n.. code-block:: python\n\n    from starlette.responses import JSONResponse\n    from webargs_starlette import WebargsHTTPException\n\n\n    @app.exception_handler(WebargsHTTPException)\n    async def http_exception(request, exc):\n        return JSONResponse(exc.messages, status_code=exc.status_code, headers=exc.headers)\n\n\nAnnotations\n-----------\n\nThe ``use_annotations`` decorator allows you to parse request objects\nusing type annotations.\n\n\n.. code-block:: python\n\n    from starlette.applications import Starlette\n    from starlette.responses import JSONResponse\n    from webargs_starlette import use_annotations\n\n    app = Starlette()\n\n\n    @app.route(\"/\")\n    @use_annotations(location=\"query\")\n    async def welcome(request, name: str = \"Friend\"):\n        return JSONResponse({\"message\": f\"Welcome, {name}!\"})\n\n\n    # curl 'http://localhost:5000/'.\n    # {\"message\":\"Welcome, Friend!\"}\n    # curl 'http://localhost:5000/?name=Ada'.\n    # {\"message\":\"Welcome, Ada!\"}\n\nAny annotated argument that doesn't have a default value will be required.\nFor example, if we remove the default for ``name`` in the above example,\nan 422 error response is returned if ``?name`` isn't passed.\n\n\n.. code-block:: python\n\n    from starlette.applications import Starlette\n    from starlette.responses import JSONResponse\n    from webargs_starlette import use_annotations, WebargsHTTPException\n\n    app = Starlette()\n\n\n    @app.route(\"/\")\n    @use_annotations(location=\"query\")\n    async def welcome(request, name: str):\n        return JSONResponse({\"message\": f\"Welcome, {name}!\"})\n\n\n    @app.exception_handler(WebargsHTTPException)\n    async def http_exception(request, exc):\n        return JSONResponse(exc.messages, status_code=exc.status_code, headers=exc.headers)\n\n\n    # curl \"http://localhost:5000/\"\n    # {\"name\":[\"Missing data for required field.\"]}\n\nArguments may also be annotated with ``Field`` instances when you need\nmore control. For example, you may want to add a validator.\n\n.. code-block:: python\n\n    from starlette.applications import Starlette\n    from starlette.responses import JSONResponse\n    from webargs import fields\n    from marshmallow import validate\n    from webargs_starlette import use_annotations, WebargsHTTPException\n\n    app = Starlette()\n\n\n    @app.route(\"/\")\n    @use_annotations(location=\"query\")\n    async def welcome(request, name: fields.Str(validate=validate.Length(min=2))):\n        return JSONResponse({\"message\": f\"Welcome, {name}!\"})\n\n\n    @app.exception_handler(WebargsHTTPException)\n    async def http_exception(request, exc):\n        return JSONResponse(exc.messages, status_code=exc.status_code, headers=exc.headers)\n\n\n    # curl \"http://localhost:5000/?name=A\"\n    # {\"name\":[\"Shorter than minimum length 2.\"]}\n\n``HTTPEndpoint`` methods may also be decorated with ``use_annotations``.\n\n.. code-block:: python\n\n    from starlette.applications import Starlette\n    from starlette.responses import JSONResponse\n    from starlette.endpoints import HTTPEndpoint\n    from webargs_starlette import use_annotations\n\n    app = Starlette()\n\n\n    @app.route(\"/\")\n    class WelcomeEndpoint(HTTPEndpoint):\n        @use_annotations(location=\"query\")\n        async def get(self, request, name: str = \"World\"):\n            return JSONResponse({\"message\": f\"Welcome, {name}!\"})\n\nSee `annotation_example.py <https://github.com/sloria/webargs-starlette/blob/master/examples/annotation_example.py>`_\nfor a more complete example of ``use_annotations`` usage.\n\nMore\n----\n\nFor more information on how to use webargs, see the `webargs documentation <https://webargs.readthedocs.io/>`_.\n\nLicense\n=======\n\nMIT licensed. See the `LICENSE <https://github.com/sloria/webargs-starlette/blob/master/LICENSE>`_ file for more details.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sloria/webargs-starlette", "keywords": "webargs,starlette,asgi,request,parsing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "webargs-starlette", "package_url": "https://pypi.org/project/webargs-starlette/", "platform": "", "project_url": "https://pypi.org/project/webargs-starlette/", "project_urls": {"Homepage": "https://github.com/sloria/webargs-starlette"}, "release_url": "https://pypi.org/project/webargs-starlette/2.0.0/", "requires_dist": ["webargs (~=6.0)", "starlette (>=0.9.0)", "marshmallow (~=3.0)", "pytest ; extra == 'dev'", "mock ; extra == 'dev'", "webtest (~=2.0.32) ; extra == 'dev'", "webtest-asgi (~=1.0.1) ; extra == 'dev'", "mypy (==0.770) ; extra == 'dev'", "flake8 (==3.7.9) ; extra == 'dev'", "flake8-bugbear (==20.1.4) ; extra == 'dev'", "pre-commit (~=2.3) ; extra == 'dev'", "httpie ; extra == 'dev'", "uvicorn ; extra == 'dev'", "tox ; extra == 'dev'", "httpie ; extra == 'examples'", "uvicorn ; extra == 'examples'", "mypy (==0.770) ; extra == 'lint'", "flake8 (==3.7.9) ; extra == 'lint'", "flake8-bugbear (==20.1.4) ; extra == 'lint'", "pre-commit (~=2.3) ; extra == 'lint'", "pytest ; extra == 'tests'", "mock ; extra == 'tests'", "webtest (~=2.0.32) ; extra == 'tests'", "webtest-asgi (~=1.0.1) ; extra == 'tests'"], "requires_python": "", "summary": "Declarative request parsing and validation for Starlette with webargs", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/webargs-starlette\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2465fbe801fdbe37dd95de8656068dab1037e753/68747470733a2f2f62616467656e2e6e65742f707970692f762f776562617267732d737461726c65747465\"></a>\n<a href=\"https://dev.azure.com/sloria/sloria/_build/latest?definitionId=11&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e739fd11fbcbcbc949ff3461a66425610fbf7dd1/68747470733a2f2f6465762e617a7572652e636f6d2f736c6f7269612f736c6f7269612f5f617069732f6275696c642f7374617475732f736c6f7269612e776562617267732d737461726c657474653f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://marshmallow.readthedocs.io/en/latest/upgrading.html\" rel=\"nofollow\"><img alt=\"marshmallow 2/3 compatible\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c1a9624674d4c0d63c80a27383afbda61e41a88/68747470733a2f2f62616467656e2e6e65742f62616467652f6d617273686d616c6c6f772f322c333f6c6973743d31\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5017092be61d51c011e68c03dceb85e357c441dd/68747470733a2f2f62616467656e2e6e65742f62616467652f636f64652532307374796c652f626c61636b2f303030\"></a>\n<p>webargs-starlette is a library for declarative request parsing and\nvalidation with <a href=\"https://github.com/encode/starlette\" rel=\"nofollow\">Starlette</a>,\nbuilt on top of <a href=\"https://github.com/marshmallow-code/webargs\" rel=\"nofollow\">webargs</a>.</p>\n<p>It has all the goodness of <a href=\"https://github.com/marshmallow-code/webargs\" rel=\"nofollow\">webargs</a>,\nwith some extra sugar for type annotations.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uvicorn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">use_annotations</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@use_annotations</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"query\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"World\"</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">})</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">uvicorn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># curl 'http://localhost:5000/'</span>\n<span class=\"c1\"># {\"Hello\": \"World\"}</span>\n<span class=\"c1\"># curl 'http://localhost:5000/?name=Ada'</span>\n<span class=\"c1\"># {\"Hello\": \"Ada\"}</span>\n</pre>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install -U webargs-starlette\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"parser-usage\">\n<h3>Parser Usage</h3>\n<p>Use <tt>parser.parse</tt> to parse a Starlette <tt>Request</tt> with a\ndictionary of fields.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">parser</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">homepage</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"s2\">\"greeting\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">missing</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)}</span>\n    <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"p\">[</span><span class=\"s2\">\"greeting\"</span><span class=\"p\">]</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">greeting</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"decorators\">\n<h3>Decorators</h3>\n<p>Use the <tt>use_args</tt> decorator to inject the parsed arguments\ndictionary into the handler function. The following snippet is equivalent to the\nfirst example.</p>\n<p><strong>Important</strong>: Decorated functions MUST be coroutine functions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">use_args</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@use_args</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"s2\">\"greeting\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">missing</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)})</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">homepage</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">\"greeting\"</span><span class=\"p\">]</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">greeting</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">})</span>\n</pre>\n<p>The <tt>use_kwargs</tt> decorator injects the parsed arguments as keyword arguments.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">use_args</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@use_kwargs</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"s2\">\"greeting\"</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">missing</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)}</span>\n<span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">homepage</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">greeting</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">greeting</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">})</span>\n</pre>\n<p>See <a href=\"https://github.com/sloria/webargs-starlette/blob/master/examples/decorator_example.py\" rel=\"nofollow\">decorator_example.py</a>\nfor a more complete example of <tt>use_args</tt> and <tt>use_kwargs</tt> usage.</p>\n</div>\n<div id=\"error-handling\">\n<h3>Error Handling</h3>\n<p>When validation fails, the parser will raise a <tt>WebargsHTTPException</tt>,\nwhich is the same as Starlette\u2019s <tt>HTTPException</tt> with the addition of\nof the <tt>messages</tt> (validation messages), <tt>headers</tt> , <tt>exception</tt> (underlying exception), and <tt>schema</tt> (marshmallow <tt>Schema</tt>) attributes.</p>\n<p>You can use a custom exception handler to return the error messages as\nJSON.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">WebargsHTTPException</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">exception_handler</span><span class=\"p\">(</span><span class=\"n\">WebargsHTTPException</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">http_exception</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"annotations\">\n<h3>Annotations</h3>\n<p>The <tt>use_annotations</tt> decorator allows you to parse request objects\nusing type annotations.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">use_annotations</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@use_annotations</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"query\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">welcome</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"Friend\"</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"Welcome, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">})</span>\n\n\n<span class=\"c1\"># curl 'http://localhost:5000/'.</span>\n<span class=\"c1\"># {\"message\":\"Welcome, Friend!\"}</span>\n<span class=\"c1\"># curl 'http://localhost:5000/?name=Ada'.</span>\n<span class=\"c1\"># {\"message\":\"Welcome, Ada!\"}</span>\n</pre>\n<p>Any annotated argument that doesn\u2019t have a default value will be required.\nFor example, if we remove the default for <tt>name</tt> in the above example,\nan 422 error response is returned if <tt><span class=\"pre\">?name</span></tt> isn\u2019t passed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">use_annotations</span><span class=\"p\">,</span> <span class=\"n\">WebargsHTTPException</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@use_annotations</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"query\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">welcome</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"Welcome, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">})</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">exception_handler</span><span class=\"p\">(</span><span class=\"n\">WebargsHTTPException</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">http_exception</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># curl \"http://localhost:5000/\"</span>\n<span class=\"c1\"># {\"name\":[\"Missing data for required field.\"]}</span>\n</pre>\n<p>Arguments may also be annotated with <tt>Field</tt> instances when you need\nmore control. For example, you may want to add a validator.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n<span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">validate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">use_annotations</span><span class=\"p\">,</span> <span class=\"n\">WebargsHTTPException</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@use_annotations</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"query\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">welcome</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">validate</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"Welcome, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">})</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">exception_handler</span><span class=\"p\">(</span><span class=\"n\">WebargsHTTPException</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">http_exception</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># curl \"http://localhost:5000/?name=A\"</span>\n<span class=\"c1\"># {\"name\":[\"Shorter than minimum length 2.\"]}</span>\n</pre>\n<p><tt>HTTPEndpoint</tt> methods may also be decorated with <tt>use_annotations</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.endpoints</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPEndpoint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">webargs_starlette</span> <span class=\"kn\">import</span> <span class=\"n\">use_annotations</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">WelcomeEndpoint</span><span class=\"p\">(</span><span class=\"n\">HTTPEndpoint</span><span class=\"p\">):</span>\n    <span class=\"nd\">@use_annotations</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"query\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"World\"</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"Welcome, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">})</span>\n</pre>\n<p>See <a href=\"https://github.com/sloria/webargs-starlette/blob/master/examples/annotation_example.py\" rel=\"nofollow\">annotation_example.py</a>\nfor a more complete example of <tt>use_annotations</tt> usage.</p>\n</div>\n<div id=\"more\">\n<h3>More</h3>\n<p>For more information on how to use webargs, see the <a href=\"https://webargs.readthedocs.io/\" rel=\"nofollow\">webargs documentation</a>.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT licensed. See the <a href=\"https://github.com/sloria/webargs-starlette/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 7169388, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a6718d14d19022796f5ccb4cccb5394e", "sha256": "7239f55cb78ba159d021ffc4f3b17bbdad97ae1d12fb265dc5de88fc6e5ba203"}, "downloads": -1, "filename": "webargs_starlette-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a6718d14d19022796f5ccb4cccb5394e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6954, "upload_time": "2019-01-04T21:49:16", "upload_time_iso_8601": "2019-01-04T21:49:16.853756Z", "url": "https://files.pythonhosted.org/packages/6d/e3/0b206a6d67303408f7e2e73a5edf985276df5c6cf05bd47538f1cfe1dfda/webargs_starlette-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69f0f3a5e01f45502c51409e16a31a08", "sha256": "944e02701aa6a2c353f52863bafced9eecba25209bfb01064ae2e561efbbda6e"}, "downloads": -1, "filename": "webargs-starlette-1.0.0.tar.gz", "has_sig": false, "md5_digest": "69f0f3a5e01f45502c51409e16a31a08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7087, "upload_time": "2019-01-04T21:49:18", "upload_time_iso_8601": "2019-01-04T21:49:18.920537Z", "url": "https://files.pythonhosted.org/packages/b1/04/256d142369970b818835cd1bdaba18fc35705636fb513e5eab664a7279af/webargs-starlette-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "352aca8490c73ab396f7f781c05003ff", "sha256": "7a58cf7c4de2818e2b8182304c29716f1a27f7779a83be439f3a7023c15c39e6"}, "downloads": -1, "filename": "webargs_starlette-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "352aca8490c73ab396f7f781c05003ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8162, "upload_time": "2019-01-13T23:39:23", "upload_time_iso_8601": "2019-01-13T23:39:23.558099Z", "url": "https://files.pythonhosted.org/packages/52/ea/f9808210e73f45267f8c3e208058864052505e7ee9106f5c44d7c8cf7c14/webargs_starlette-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e840255a0be6d9bfdfa3c53489371525", "sha256": "58a94ace958d1ec754d3df3e91191a361ec4c2e260589d64a257b030af008b1e"}, "downloads": -1, "filename": "webargs-starlette-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e840255a0be6d9bfdfa3c53489371525", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7945, "upload_time": "2019-01-13T23:39:24", "upload_time_iso_8601": "2019-01-13T23:39:24.892193Z", "url": "https://files.pythonhosted.org/packages/2a/fa/f6da2df8039e312e4746ae52eeba0551eb7d5da88600d88cf804248dd26e/webargs-starlette-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "677f3360e22898add88e05a04abfa102", "sha256": "543a4938621975371a480f395ed0c1902e86ef9f46d906416863e676b4d7fff3"}, "downloads": -1, "filename": "webargs_starlette-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "677f3360e22898add88e05a04abfa102", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8397, "upload_time": "2019-07-05T15:29:35", "upload_time_iso_8601": "2019-07-05T15:29:35.418555Z", "url": "https://files.pythonhosted.org/packages/f4/64/7ffd80f9cff941bfaafba473bfc916d213f6d90b8efcc8c1e2d197558dba/webargs_starlette-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "086e78e63c4a37a915141e5eca8c6b98", "sha256": "92a167fbeff828588c507be673ccb2f60149eae0188e934809204c8b91f27557"}, "downloads": -1, "filename": "webargs-starlette-1.2.0.tar.gz", "has_sig": false, "md5_digest": "086e78e63c4a37a915141e5eca8c6b98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9432, "upload_time": "2019-07-05T15:29:36", "upload_time_iso_8601": "2019-07-05T15:29:36.714146Z", "url": "https://files.pythonhosted.org/packages/1c/2e/bb75af8f8adf89f0a3e9f769e544cd9e2a81e65f9011ee8ccc2c6acec5b4/webargs-starlette-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "08d45500f3b96f475c85be04fa83b5af", "sha256": "e05382752afc52606672cb69613ef2930fb3336482697ab5cb2dcbe0d115e361"}, "downloads": -1, "filename": "webargs_starlette-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "08d45500f3b96f475c85be04fa83b5af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8410, "upload_time": "2020-05-05T03:13:14", "upload_time_iso_8601": "2020-05-05T03:13:14.369464Z", "url": "https://files.pythonhosted.org/packages/09/fd/c78b155799681fe0b2e097144a83e9481de75d2264adb59e40a0a51a40bf/webargs_starlette-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4059cb6304bf141eb5d50dfb452cbc27", "sha256": "419e83a56fdd50522b114b3d7a765986d5e757f0956b820db04b0b293d0ba687"}, "downloads": -1, "filename": "webargs-starlette-1.2.1.tar.gz", "has_sig": false, "md5_digest": "4059cb6304bf141eb5d50dfb452cbc27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9469, "upload_time": "2020-05-05T03:13:15", "upload_time_iso_8601": "2020-05-05T03:13:15.867228Z", "url": "https://files.pythonhosted.org/packages/0e/23/3a508e3c28d867fb9a50a1081b4bb829bcce1cdf388c14a4f9f9d2b08a4d/webargs-starlette-1.2.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "8006a2eb1613af71c80b37058f405b4c", "sha256": "932f3f96f5d1dd6f75f2e7bdf7d6e6aa671b8a0ccc30d40007170b22ef286d6f"}, "downloads": -1, "filename": "webargs_starlette-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8006a2eb1613af71c80b37058f405b4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8457, "upload_time": "2020-05-05T04:18:32", "upload_time_iso_8601": "2020-05-05T04:18:32.570740Z", "url": "https://files.pythonhosted.org/packages/d4/40/4fb999e93d86efef0927da9ed45ae319b04cf69abd9f8e67c9625d033c1a/webargs_starlette-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0345c40232043cc3969e5dccba49b82", "sha256": "6873af91989a186af8aeeee15e38fc976abd17847f6e3ce2bfbd635c7db49414"}, "downloads": -1, "filename": "webargs-starlette-2.0.0.tar.gz", "has_sig": false, "md5_digest": "d0345c40232043cc3969e5dccba49b82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11195, "upload_time": "2020-05-05T04:18:33", "upload_time_iso_8601": "2020-05-05T04:18:33.909992Z", "url": "https://files.pythonhosted.org/packages/f2/b8/d3d1d33aa72cd712fb2e3d93f6777da096ce3f9971517118b0e34360e7ac/webargs-starlette-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8006a2eb1613af71c80b37058f405b4c", "sha256": "932f3f96f5d1dd6f75f2e7bdf7d6e6aa671b8a0ccc30d40007170b22ef286d6f"}, "downloads": -1, "filename": "webargs_starlette-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8006a2eb1613af71c80b37058f405b4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8457, "upload_time": "2020-05-05T04:18:32", "upload_time_iso_8601": "2020-05-05T04:18:32.570740Z", "url": "https://files.pythonhosted.org/packages/d4/40/4fb999e93d86efef0927da9ed45ae319b04cf69abd9f8e67c9625d033c1a/webargs_starlette-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0345c40232043cc3969e5dccba49b82", "sha256": "6873af91989a186af8aeeee15e38fc976abd17847f6e3ce2bfbd635c7db49414"}, "downloads": -1, "filename": "webargs-starlette-2.0.0.tar.gz", "has_sig": false, "md5_digest": "d0345c40232043cc3969e5dccba49b82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11195, "upload_time": "2020-05-05T04:18:33", "upload_time_iso_8601": "2020-05-05T04:18:33.909992Z", "url": "https://files.pythonhosted.org/packages/f2/b8/d3d1d33aa72cd712fb2e3d93f6777da096ce3f9971517118b0e34360e7ac/webargs-starlette-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:27 2020"}