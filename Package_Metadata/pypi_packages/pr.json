{"info": {"author": "Khun Spoonzi", "author_email": "khunspoonzi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# pr\n\nA high-level shorthand print formatter for Python 3 or above\n\n---\n\n## Overview\n\nThe objective of pr is to streamline the debugging process by allowing developers to implement complex print formatting with minimal effort.\n\n---\n\n## Installation\n\nRun `pip3 install pr`\n\n---\n\n## Arguments\n\n|   var   |                          name                           |           type            | default |\n| :-----: | :-----------------------------------------------------: | :-----------------------: | :-----: |\n| content |              [Content](#printing-a-string)              | str / list / dict / tuple |   \"\"    |\n|    t    |            [Tabs](#using-new-lines-and-tabs)            |            int            |    0    |\n|   la    |        [Lines After](#using-new-lines-and-tabs)         |            int            |    0    |\n|   lb    |        [Lines Before](#using-new-lines-and-tabs)        |            int            |    0    |\n|   tl    |         [Tab Length](#using-new-lines-and-tabs)         |            int            |    4    |\n|    b    |                [Bullet](#using-bullets)                 |           bool            |  False  |\n|   bc    |           [Bullet Character](#using-bullets)            |            str            |   \"\u2022\"   |\n|    c    |                 [Color](#using-colors)                  |            str            |  None   |\n|   cs    |            [Color Span](#using-color-spans)             |           bool            |  False  |\n|   ip    |             [In Place](#printing-in-place)              |           bool            |  False  |\n|    h    |              [Heading](#printing-headings)              |           bool            |  False  |\n|   hr    |      [Horizontal Rule](#printing-horizontal-rules)      |           bool            |  False  |\n|   hrc   | [Horizontal Rule Character](#printing-horizontal-rules) |            str            |   \"-\"   |\n|   hrl   |  [Horizontal Rule Length](#printing-horizontal-rules)   |            int            |   72    |\n|  dhrl   |  [Dynamic Horizontal Rule Length](#printing-headings)   |           bool            |  False  |\n|    r    |                 [Row](#tabulating-data)                 |           bool            |  False  |\n|   rl    |              [Row List](#tabulating-data)               |           bool            |  False  |\n|    p    |               [Padding](#tabulating-data)               |            int            |   20    |\n|    a    |              [Alignment](#tabulating-data)              |            str            | \"left\"  |\n|   sb    |            [Status Box](#using-status-boxes)            |           bool            |  False  |\n|   st    |           [Status Type](#using-status-boxes)            |            str            |   \"i\"   |\n|   dbg   |                  [Debug](#using-debug)                  |           bool            |  True   |\n\n**See also:**\n\n- [Pretty Printing](#pretty-printing-data)\n\n---\n\n## Examples\n\n### Importing the Module\n\n```\nfrom pr import pr\n```\n\n### Printing a String\n\n```\npr(\"Hello world\")\n```\n\n```\nHello world\n```\n\nEquivalent to:\n\n```\nprint(\"Hello world\")\n```\n\n### Printing an Empty String\n\n```\npr()\n```\n\n```\n\n```\n\nEquivalent to:\n\n```\nprint(\"\\n\")\n```\n\nor\n\n```\nprint(\"\")\n```\n\n### Using New Lines and Tabs\n\n```\npr(\"Hello world\", t=1, la=1, lb=1)\n```\n\nor\n\n```\npr(\"Hello world\", 1, 1, 1)\n```\n\n```\n\n  Hello world\n\n```\n\nYou may also specify custom tab lengths with the tl argument.\n\n```\npr(\"Hello world\", t=1)\npr(\"Hello world\", t=1, tl=8)\n```\n\n```\n    Hello world\n        Hello world\n```\n\nWhere:\n\n- t = number of tabs before the printed string `int`\n\n- la = number of lines after the printed string `int`\n\n- lb = number of lines before the printed string `int`\n\n- tl = number of spaces in a single tab `int`\n\nEquivalent to:\n\n```\nprint(\\n\\tHello world\\n)\n```\n\n### Using Bullets\n\n```\nshopping_list = [\n    \"eggs\",\n    \"bacon\",\n    \"cucumbers\",\n    \"bottled water\",\n    \"fresh straberries\",\n    \"fine cheese\",\n    \"pasta\",\n]\n```\n\n```\nfor item in shopping_list:\n    pr(item, b=True)\n```\n\n```\n\u2022 eggs\n\u2022 bacon\n\u2022 cucumbers\n\u2022 bottled water\n\u2022 fresh straberries\n\u2022 fine cheese\n\u2022 pasta\n```\n\n```\nfor item in shopping_list:\n  pr(item, b=True, bc=\"@\")\n```\n\n```\n@ eggs\n@ bacon\n@ cucumbers\n@ bottled water\n@ fresh straberries\n@ fine cheese\n@ pasta\n```\n\nWhere:\n\n- b = indicates whether to add a bullet point before the content `bool`\n\n- bc = desired bullet character `str`\n\nEquivalent to:\n\n```\nfor item in shopping_list:\n  print(f\"{\u2022} {item}\")\n```\n\n```\nfor item in shopping_list:\n  print(f\"{@} {item}\")\n```\n\n### Using Colors\n\n```\npr(\"Hello world\", c=\"r\")\n```\n\n```\nHello word  <-- appears red in terminal\n```\n\nWhere:\n\n- c = desired color of text `str`\n\nEquivalent to:\n\n```\nprint(\\u001b[31mHello world\\u001b[0m)\n```\n\nAccepted colors include:\n\n- Black --> ba, black\n\n- Blue --> bu, blue\n\n- Cyan --> c, cyan\n\n- Green --> g, green\n\n- Magenta --> m, magenta\n\n- Red --> r, red\n\n- White --> w, white\n\n- Yellow --> y, yellow\n\n### Using Color Spans\n\n```\ncolor_span = [\n    \"Roses are \",\n    (\"red\", \"r\"),\n    \" and violets are \",\n    (\"blue\", \"bu\")\n]\n\npr(color_span, cs=True)\n```\n\n```\nRoses are [red] and violets are [blue]  <--  words in square brackets appear in their respective colors\n```\n\nWhere:\n\n- c = indicates whether to treat the iterable as spans of colored text `bool`\n\nEquivalent to:\n\n```\nprint(\"Roses are \\u001b[31mred\\u001b[0m and violets are \\u001b[34mblue\\u001b[0m\")\n```\n\n### Printing In Place\n\nPrinting in place avoids the default Python behavior of printing content on a new line for each call to the print function. Instead, printing in place displays content on the same line, flushing the contents of the previous print statement each time. Such functionality is extremely useful within large loops.\n\n```\nfor i in range(101):\n  pr(f\"Percent complete: {i}%\", ip=True)\n```\n\n```\nPercent complete: {1-100}%\n```\n\nWhere:\n\n- ip = indicates whether content should be printed in place `bool`\n\nEquivalent to:\n\n```\nfor i in range(101):\n    print(f\"\\r\\033[KPercent complete: {i}%\", end=\"\", flush=True)\n```\n\n### Printing Headings\n\n```\npr(\"Hello world\", h=True)\n```\n\n```\n------------------------------------------------------------------------\nHello world\n------------------------------------------------------------------------\n```\n\n```\npr(\"Hello world\", h=True, hrl=20)\n```\n\n```\n--------------------\nHello world\n--------------------\n```\n\n```\npr(\"Hello world\", h=True, dhrl=True)\npr(\"Hello world, goodbye Mars\", h=True, dhrl=True)\n```\n\n```\n------------\nHello world\n------------\n\n--------------------------\nHello world, goodbye Mars\n--------------------------\n```\n\nWhere:\n\n- h = indicates whether content should be printed as a heading `bool`\n\n- hrl = desired length of horizontal rule above and below the heading string `int`\n\n- dhrl = indicates whether the length of the horizontal rule above and below the heading string should be dynamic, i.e. match the length of the content `bool`\n\nEquivalent to:\n\n```\nprint(\"-\" * 72)\nprint(\"Hello world\")\nprint(\"-\" * 72)\n```\n\n```\nprint(\"-\" * 20)\nprint(\"Hello world\")\nprint(\"-\" * 20)\n```\n\n```\ncontent = \"Hello world\"\nlength = len(content) + 1\n\nprint(\"-\" * length)\nprint(content)\nprint(\"-\" * length)\n```\n\n### Printing Horizontal Rules\n\n```\npr(hr=True)\n```\n\n```\n------------------------------------------------------------------------\n```\n\n```\npr(hr=True, hrl=20, hrc=\"=\")\n```\n\n```\n====================\n```\n\nWhere:\n\n- hr = indicates whether to print a horizontal rule `bool`\n\n- hrl = desired length of horizontal rule `int`\n\n- hrc = desired character used to construct the horizontal rule `str`\n\nEquivalent to:\n\n```\nprint(\"-\" * 72)\n```\n\n```\nprint(\"=\" * 20)\n```\n\n### Tabulating Data\n\n```\nheader = [\"Name\", \"Age\", \"Location\", \"Gender\"]\nrows = [\n    (\"Joey\", 32, \"London, UK\", \"M\"),\n    (\"Penny\", 27, \"Beijing, China\", \"F\"),\n    (\"Caroline\", 30, \"Austin, USA\", \"F\"),\n    (\"Diego\", 24, \"Lima, Peru\", \"M\"),\n    (\"Donny\", 29, \"La Linea de la Concepcion, Spain\", \"M\")\n]\n```\n\n```\npr(header, r=True, h=True)\nfor row in rows:\n    pr(row, r=True)\n```\n\nor\n\n```\npr(header, r=True, h=True)\npr(rows, rl=True)\n```\n\nor\n\n```\nheader_and_rows = [header] + rows\n\npr(header_and_rows, rl=True, h=True)\n```\n\n```\nName                 | Age                  | Location             | Gender\n----------------------------------------------------------------------------------------\nJoey                 | 32                   | London, UK           | M\nPenny                | 27                   | Beijing, China       | F\nCaroline             | 30                   | Austin, USA          | F\nDiego                | 24                   | Lima, Peru           | M\nDonny                | 29                   | La Linea de la Con   | M\n```\n\n```\npadding = 25\n\npr(header, r=True, h=True, hrc=\"=\", p=padding, a=\"c\")\nfor row in rows:\n    pr(row, r=True, p=padding)\n```\n\nor\n\n```\npadding = 25\n\npr(header, r=True, h=True, hrc=\"=\", p=padding, a=\"c\")\npr(rows, rl=True, p=padding)\n```\n\n```\n           Name           |            Age            |         Location          |          Gender\n============================================================================================================\nJoey                      | 32                        | London, UK                | M\nPenny                     | 27                        | Beijing, China            | F\nCaroline                  | 30                        | Austin, USA               | F\nDiego                     | 24                        | Lima, Peru                | M\nDonny                     | 29                        | La Linea de la Concepci   | M\n```\n\nWhere:\n\n- r = indicates whether the content should be treated as a table row `bool`\n\n- rl = indicates whether the content should be treated as a list of rows `bool`\n\n- h = indicates whether the content should be treated as a table header, i.e. a row with a horizontal rule underneath `bool`\n\n- hrc = desired character used to construct the horizontal rule `str`\n\n- p = desired padding (width) of each column `int`\n\n- a = desired alignment of each table cell `str`\n\nAccepted alignment options include:\n\n- Left --> l, left\n\n- Center --> c, center\n\n- Right --> r, right\n\nRemarks:\n\n- Avoid using colors with tabulated data for the time being as Python's string formatter does not play well with with ANSI color codes\n\n### Using Status Boxes\n\n```\npr(\"Initializing launch sequence...\", sb=True, la=1)\npr(\"Thrusters activated\", t=1, sb=True, st=\"s\")\npr(\"Satcom operational\", t=1, sb=True, st=\"s\")\npr(\"Communications online\", t=1, sb=True, st=\"s\")\npr(\"Major Tom present\", t=1, sb=True, st=\"f\")\npr(\"Aborting launch sequence...\", lb=1, sb=True)\n```\n\n```\n[i] Initializing launch sequence...\n\n\n\t[\u2714] Thrusters activated\n\t[\u2714] Satcom operational\n\t[\u2714] Communications online\n\t[\u2718] Major Tom present\n\n\n[i] Aborting launch sequence...\n```\n\nWhere:\n\n- sb = indicates whether to include a status box before the printed content `bool`\n\n- st = desired status type to display in the status box `str`\n\nAccepted status types include:\n\n- Info --> i, info\n\n- Success --> s, success\n\n- Fail --> f, fail\n\n### Pretty Printing Data\n\nPretty printing is enabled by default when a structure such as a dictionary, list, or tuple is passed into pr. This will print the data over multiple lines if necessary rather than attempt to print everything on a single line as the default print statement will do.\n\n```\nd = {\n    \"personal_info\": {\"name\": \"Jose\", \"age\": \"23\", \"location\": \"Christchurch, New Zealand\", \"gender\": \"M\"},\n    \"hobbies\": [\"running\", \"swimming\", \"reading\", \"photography\", \"birdwatching\", \"surfing\"]\n}\n```\n\n```\npr(d)\n```\n\n```\n{'hobbies': ['running',\n             'swimming',\n             'reading',\n             'photography',\n             'birdwatching',\n             'surfing'],\n 'personal_info': {'age': '23',\n                   'gender': 'M',\n                   'location': 'Christchurch, New Zealand',\n                   'name': 'Jose'}}\n```\n\nEquivalent to:\n\n```\nfrom pprint import pprint\n\npprint(d)\n```\n\n### Using Debug\n\nThe use case of the debug argument is rather interesting here. In short, if debug is set to False, the pr function will return immediately without printing any output passed into it. So why have this feature at all? Here's an example.\n\nLet's say we have some function that we intend to run in a production environment, where the complexity of the function requires extensive debugging in a local environment. You might introduce a debug argument in your function that will tell it to print debug messages only when debug is set to True, i.e. in the local environment. The function might look something like this:\n\n```\ndef my_func(num, dbg=False):\n  \"\"\" Adds 5 and squares the result \"\"\"\n\n  # Add 5 to num\n  num = num + 5\n\n  # Print debug message\n  if dbg is True:\n    print(\"Added 5 to num!\")\n\n  # Square the result\n  num = num * num\n\n  # Print debug message\n  if dbg is True:\n    print(\"Squared num!\")\n\n  # Return the squared result\n  return num\n\n```\n\nClearly, it becomes a tedious process to implement an if statement at every point in your function where would like to print a debug message. Using pr, the same can be accomplished in a single line to save space and improve readability.\n\n```\ndef my_func(num, dbg=False):\n  \"\"\" Adds 5 and squares the result \"\"\"\n\n  # Add 5 to num\n  num = num + 5\n\n  # Print debug message\n  pr(\"Added 5 to num!\", dbg=dbg)\n\n  # Square the result\n  num = num * num\n\n  # Print debug message\n  pr(\"Squared num!\", dbg=dbg)\n\n  # Return the squared result\n  return num\n```\n\n---\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/khunspoonzi/pr", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pr", "package_url": "https://pypi.org/project/pr/", "platform": "", "project_url": "https://pypi.org/project/pr/", "project_urls": {"Homepage": "https://github.com/khunspoonzi/pr"}, "release_url": "https://pypi.org/project/pr/0.6.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A high-level shorthand print formatter for Python 3 or above", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pr</h1>\n<p>A high-level shorthand print formatter for Python 3 or above</p>\n<hr>\n<h2>Overview</h2>\n<p>The objective of pr is to streamline the debugging process by allowing developers to implement complex print formatting with minimal effort.</p>\n<hr>\n<h2>Installation</h2>\n<p>Run <code>pip3 install pr</code></p>\n<hr>\n<h2>Arguments</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">var</th>\n<th align=\"center\">name</th>\n<th align=\"center\">type</th>\n<th align=\"center\">default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">content</td>\n<td align=\"center\"><a href=\"#printing-a-string\" rel=\"nofollow\">Content</a></td>\n<td align=\"center\">str / list / dict / tuple</td>\n<td align=\"center\">\"\"</td>\n</tr>\n<tr>\n<td align=\"center\">t</td>\n<td align=\"center\"><a href=\"#using-new-lines-and-tabs\" rel=\"nofollow\">Tabs</a></td>\n<td align=\"center\">int</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">la</td>\n<td align=\"center\"><a href=\"#using-new-lines-and-tabs\" rel=\"nofollow\">Lines After</a></td>\n<td align=\"center\">int</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">lb</td>\n<td align=\"center\"><a href=\"#using-new-lines-and-tabs\" rel=\"nofollow\">Lines Before</a></td>\n<td align=\"center\">int</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">tl</td>\n<td align=\"center\"><a href=\"#using-new-lines-and-tabs\" rel=\"nofollow\">Tab Length</a></td>\n<td align=\"center\">int</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\"><a href=\"#using-bullets\" rel=\"nofollow\">Bullet</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">bc</td>\n<td align=\"center\"><a href=\"#using-bullets\" rel=\"nofollow\">Bullet Character</a></td>\n<td align=\"center\">str</td>\n<td align=\"center\">\"\u2022\"</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\"><a href=\"#using-colors\" rel=\"nofollow\">Color</a></td>\n<td align=\"center\">str</td>\n<td align=\"center\">None</td>\n</tr>\n<tr>\n<td align=\"center\">cs</td>\n<td align=\"center\"><a href=\"#using-color-spans\" rel=\"nofollow\">Color Span</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">ip</td>\n<td align=\"center\"><a href=\"#printing-in-place\" rel=\"nofollow\">In Place</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">h</td>\n<td align=\"center\"><a href=\"#printing-headings\" rel=\"nofollow\">Heading</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">hr</td>\n<td align=\"center\"><a href=\"#printing-horizontal-rules\" rel=\"nofollow\">Horizontal Rule</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">hrc</td>\n<td align=\"center\"><a href=\"#printing-horizontal-rules\" rel=\"nofollow\">Horizontal Rule Character</a></td>\n<td align=\"center\">str</td>\n<td align=\"center\">\"-\"</td>\n</tr>\n<tr>\n<td align=\"center\">hrl</td>\n<td align=\"center\"><a href=\"#printing-horizontal-rules\" rel=\"nofollow\">Horizontal Rule Length</a></td>\n<td align=\"center\">int</td>\n<td align=\"center\">72</td>\n</tr>\n<tr>\n<td align=\"center\">dhrl</td>\n<td align=\"center\"><a href=\"#printing-headings\" rel=\"nofollow\">Dynamic Horizontal Rule Length</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">r</td>\n<td align=\"center\"><a href=\"#tabulating-data\" rel=\"nofollow\">Row</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">rl</td>\n<td align=\"center\"><a href=\"#tabulating-data\" rel=\"nofollow\">Row List</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">p</td>\n<td align=\"center\"><a href=\"#tabulating-data\" rel=\"nofollow\">Padding</a></td>\n<td align=\"center\">int</td>\n<td align=\"center\">20</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"center\"><a href=\"#tabulating-data\" rel=\"nofollow\">Alignment</a></td>\n<td align=\"center\">str</td>\n<td align=\"center\">\"left\"</td>\n</tr>\n<tr>\n<td align=\"center\">sb</td>\n<td align=\"center\"><a href=\"#using-status-boxes\" rel=\"nofollow\">Status Box</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"center\">st</td>\n<td align=\"center\"><a href=\"#using-status-boxes\" rel=\"nofollow\">Status Type</a></td>\n<td align=\"center\">str</td>\n<td align=\"center\">\"i\"</td>\n</tr>\n<tr>\n<td align=\"center\">dbg</td>\n<td align=\"center\"><a href=\"#using-debug\" rel=\"nofollow\">Debug</a></td>\n<td align=\"center\">bool</td>\n<td align=\"center\">True</td>\n</tr></tbody></table>\n<p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#pretty-printing-data\" rel=\"nofollow\">Pretty Printing</a></li>\n</ul>\n<hr>\n<h2>Examples</h2>\n<h3>Importing the Module</h3>\n<pre><code>from pr import pr\n</code></pre>\n<h3>Printing a String</h3>\n<pre><code>pr(\"Hello world\")\n</code></pre>\n<pre><code>Hello world\n</code></pre>\n<p>Equivalent to:</p>\n<pre><code>print(\"Hello world\")\n</code></pre>\n<h3>Printing an Empty String</h3>\n<pre><code>pr()\n</code></pre>\n<pre><code>\n</code></pre>\n<p>Equivalent to:</p>\n<pre><code>print(\"\\n\")\n</code></pre>\n<p>or</p>\n<pre><code>print(\"\")\n</code></pre>\n<h3>Using New Lines and Tabs</h3>\n<pre><code>pr(\"Hello world\", t=1, la=1, lb=1)\n</code></pre>\n<p>or</p>\n<pre><code>pr(\"Hello world\", 1, 1, 1)\n</code></pre>\n<pre><code>\n  Hello world\n\n</code></pre>\n<p>You may also specify custom tab lengths with the tl argument.</p>\n<pre><code>pr(\"Hello world\", t=1)\npr(\"Hello world\", t=1, tl=8)\n</code></pre>\n<pre><code>    Hello world\n        Hello world\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>\n<p>t = number of tabs before the printed string <code>int</code></p>\n</li>\n<li>\n<p>la = number of lines after the printed string <code>int</code></p>\n</li>\n<li>\n<p>lb = number of lines before the printed string <code>int</code></p>\n</li>\n<li>\n<p>tl = number of spaces in a single tab <code>int</code></p>\n</li>\n</ul>\n<p>Equivalent to:</p>\n<pre><code>print(\\n\\tHello world\\n)\n</code></pre>\n<h3>Using Bullets</h3>\n<pre><code>shopping_list = [\n    \"eggs\",\n    \"bacon\",\n    \"cucumbers\",\n    \"bottled water\",\n    \"fresh straberries\",\n    \"fine cheese\",\n    \"pasta\",\n]\n</code></pre>\n<pre><code>for item in shopping_list:\n    pr(item, b=True)\n</code></pre>\n<pre><code>\u2022 eggs\n\u2022 bacon\n\u2022 cucumbers\n\u2022 bottled water\n\u2022 fresh straberries\n\u2022 fine cheese\n\u2022 pasta\n</code></pre>\n<pre><code>for item in shopping_list:\n  pr(item, b=True, bc=\"@\")\n</code></pre>\n<pre><code>@ eggs\n@ bacon\n@ cucumbers\n@ bottled water\n@ fresh straberries\n@ fine cheese\n@ pasta\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>\n<p>b = indicates whether to add a bullet point before the content <code>bool</code></p>\n</li>\n<li>\n<p>bc = desired bullet character <code>str</code></p>\n</li>\n</ul>\n<p>Equivalent to:</p>\n<pre><code>for item in shopping_list:\n  print(f\"{\u2022} {item}\")\n</code></pre>\n<pre><code>for item in shopping_list:\n  print(f\"{@} {item}\")\n</code></pre>\n<h3>Using Colors</h3>\n<pre><code>pr(\"Hello world\", c=\"r\")\n</code></pre>\n<pre><code>Hello word  &lt;-- appears red in terminal\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>c = desired color of text <code>str</code></li>\n</ul>\n<p>Equivalent to:</p>\n<pre><code>print(\\u001b[31mHello world\\u001b[0m)\n</code></pre>\n<p>Accepted colors include:</p>\n<ul>\n<li>\n<p>Black --&gt; ba, black</p>\n</li>\n<li>\n<p>Blue --&gt; bu, blue</p>\n</li>\n<li>\n<p>Cyan --&gt; c, cyan</p>\n</li>\n<li>\n<p>Green --&gt; g, green</p>\n</li>\n<li>\n<p>Magenta --&gt; m, magenta</p>\n</li>\n<li>\n<p>Red --&gt; r, red</p>\n</li>\n<li>\n<p>White --&gt; w, white</p>\n</li>\n<li>\n<p>Yellow --&gt; y, yellow</p>\n</li>\n</ul>\n<h3>Using Color Spans</h3>\n<pre><code>color_span = [\n    \"Roses are \",\n    (\"red\", \"r\"),\n    \" and violets are \",\n    (\"blue\", \"bu\")\n]\n\npr(color_span, cs=True)\n</code></pre>\n<pre><code>Roses are [red] and violets are [blue]  &lt;--  words in square brackets appear in their respective colors\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>c = indicates whether to treat the iterable as spans of colored text <code>bool</code></li>\n</ul>\n<p>Equivalent to:</p>\n<pre><code>print(\"Roses are \\u001b[31mred\\u001b[0m and violets are \\u001b[34mblue\\u001b[0m\")\n</code></pre>\n<h3>Printing In Place</h3>\n<p>Printing in place avoids the default Python behavior of printing content on a new line for each call to the print function. Instead, printing in place displays content on the same line, flushing the contents of the previous print statement each time. Such functionality is extremely useful within large loops.</p>\n<pre><code>for i in range(101):\n  pr(f\"Percent complete: {i}%\", ip=True)\n</code></pre>\n<pre><code>Percent complete: {1-100}%\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>ip = indicates whether content should be printed in place <code>bool</code></li>\n</ul>\n<p>Equivalent to:</p>\n<pre><code>for i in range(101):\n    print(f\"\\r\\033[KPercent complete: {i}%\", end=\"\", flush=True)\n</code></pre>\n<h3>Printing Headings</h3>\n<pre><code>pr(\"Hello world\", h=True)\n</code></pre>\n<pre><code>------------------------------------------------------------------------\nHello world\n------------------------------------------------------------------------\n</code></pre>\n<pre><code>pr(\"Hello world\", h=True, hrl=20)\n</code></pre>\n<pre><code>--------------------\nHello world\n--------------------\n</code></pre>\n<pre><code>pr(\"Hello world\", h=True, dhrl=True)\npr(\"Hello world, goodbye Mars\", h=True, dhrl=True)\n</code></pre>\n<pre><code>------------\nHello world\n------------\n\n--------------------------\nHello world, goodbye Mars\n--------------------------\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>\n<p>h = indicates whether content should be printed as a heading <code>bool</code></p>\n</li>\n<li>\n<p>hrl = desired length of horizontal rule above and below the heading string <code>int</code></p>\n</li>\n<li>\n<p>dhrl = indicates whether the length of the horizontal rule above and below the heading string should be dynamic, i.e. match the length of the content <code>bool</code></p>\n</li>\n</ul>\n<p>Equivalent to:</p>\n<pre><code>print(\"-\" * 72)\nprint(\"Hello world\")\nprint(\"-\" * 72)\n</code></pre>\n<pre><code>print(\"-\" * 20)\nprint(\"Hello world\")\nprint(\"-\" * 20)\n</code></pre>\n<pre><code>content = \"Hello world\"\nlength = len(content) + 1\n\nprint(\"-\" * length)\nprint(content)\nprint(\"-\" * length)\n</code></pre>\n<h3>Printing Horizontal Rules</h3>\n<pre><code>pr(hr=True)\n</code></pre>\n<pre><code>------------------------------------------------------------------------\n</code></pre>\n<pre><code>pr(hr=True, hrl=20, hrc=\"=\")\n</code></pre>\n<pre><code>====================\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>\n<p>hr = indicates whether to print a horizontal rule <code>bool</code></p>\n</li>\n<li>\n<p>hrl = desired length of horizontal rule <code>int</code></p>\n</li>\n<li>\n<p>hrc = desired character used to construct the horizontal rule <code>str</code></p>\n</li>\n</ul>\n<p>Equivalent to:</p>\n<pre><code>print(\"-\" * 72)\n</code></pre>\n<pre><code>print(\"=\" * 20)\n</code></pre>\n<h3>Tabulating Data</h3>\n<pre><code>header = [\"Name\", \"Age\", \"Location\", \"Gender\"]\nrows = [\n    (\"Joey\", 32, \"London, UK\", \"M\"),\n    (\"Penny\", 27, \"Beijing, China\", \"F\"),\n    (\"Caroline\", 30, \"Austin, USA\", \"F\"),\n    (\"Diego\", 24, \"Lima, Peru\", \"M\"),\n    (\"Donny\", 29, \"La Linea de la Concepcion, Spain\", \"M\")\n]\n</code></pre>\n<pre><code>pr(header, r=True, h=True)\nfor row in rows:\n    pr(row, r=True)\n</code></pre>\n<p>or</p>\n<pre><code>pr(header, r=True, h=True)\npr(rows, rl=True)\n</code></pre>\n<p>or</p>\n<pre><code>header_and_rows = [header] + rows\n\npr(header_and_rows, rl=True, h=True)\n</code></pre>\n<pre><code>Name                 | Age                  | Location             | Gender\n----------------------------------------------------------------------------------------\nJoey                 | 32                   | London, UK           | M\nPenny                | 27                   | Beijing, China       | F\nCaroline             | 30                   | Austin, USA          | F\nDiego                | 24                   | Lima, Peru           | M\nDonny                | 29                   | La Linea de la Con   | M\n</code></pre>\n<pre><code>padding = 25\n\npr(header, r=True, h=True, hrc=\"=\", p=padding, a=\"c\")\nfor row in rows:\n    pr(row, r=True, p=padding)\n</code></pre>\n<p>or</p>\n<pre><code>padding = 25\n\npr(header, r=True, h=True, hrc=\"=\", p=padding, a=\"c\")\npr(rows, rl=True, p=padding)\n</code></pre>\n<pre><code>           Name           |            Age            |         Location          |          Gender\n============================================================================================================\nJoey                      | 32                        | London, UK                | M\nPenny                     | 27                        | Beijing, China            | F\nCaroline                  | 30                        | Austin, USA               | F\nDiego                     | 24                        | Lima, Peru                | M\nDonny                     | 29                        | La Linea de la Concepci   | M\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>\n<p>r = indicates whether the content should be treated as a table row <code>bool</code></p>\n</li>\n<li>\n<p>rl = indicates whether the content should be treated as a list of rows <code>bool</code></p>\n</li>\n<li>\n<p>h = indicates whether the content should be treated as a table header, i.e. a row with a horizontal rule underneath <code>bool</code></p>\n</li>\n<li>\n<p>hrc = desired character used to construct the horizontal rule <code>str</code></p>\n</li>\n<li>\n<p>p = desired padding (width) of each column <code>int</code></p>\n</li>\n<li>\n<p>a = desired alignment of each table cell <code>str</code></p>\n</li>\n</ul>\n<p>Accepted alignment options include:</p>\n<ul>\n<li>\n<p>Left --&gt; l, left</p>\n</li>\n<li>\n<p>Center --&gt; c, center</p>\n</li>\n<li>\n<p>Right --&gt; r, right</p>\n</li>\n</ul>\n<p>Remarks:</p>\n<ul>\n<li>Avoid using colors with tabulated data for the time being as Python's string formatter does not play well with with ANSI color codes</li>\n</ul>\n<h3>Using Status Boxes</h3>\n<pre><code>pr(\"Initializing launch sequence...\", sb=True, la=1)\npr(\"Thrusters activated\", t=1, sb=True, st=\"s\")\npr(\"Satcom operational\", t=1, sb=True, st=\"s\")\npr(\"Communications online\", t=1, sb=True, st=\"s\")\npr(\"Major Tom present\", t=1, sb=True, st=\"f\")\npr(\"Aborting launch sequence...\", lb=1, sb=True)\n</code></pre>\n<pre><code>[i] Initializing launch sequence...\n\n\n\t[\u2714] Thrusters activated\n\t[\u2714] Satcom operational\n\t[\u2714] Communications online\n\t[\u2718] Major Tom present\n\n\n[i] Aborting launch sequence...\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>\n<p>sb = indicates whether to include a status box before the printed content <code>bool</code></p>\n</li>\n<li>\n<p>st = desired status type to display in the status box <code>str</code></p>\n</li>\n</ul>\n<p>Accepted status types include:</p>\n<ul>\n<li>\n<p>Info --&gt; i, info</p>\n</li>\n<li>\n<p>Success --&gt; s, success</p>\n</li>\n<li>\n<p>Fail --&gt; f, fail</p>\n</li>\n</ul>\n<h3>Pretty Printing Data</h3>\n<p>Pretty printing is enabled by default when a structure such as a dictionary, list, or tuple is passed into pr. This will print the data over multiple lines if necessary rather than attempt to print everything on a single line as the default print statement will do.</p>\n<pre><code>d = {\n    \"personal_info\": {\"name\": \"Jose\", \"age\": \"23\", \"location\": \"Christchurch, New Zealand\", \"gender\": \"M\"},\n    \"hobbies\": [\"running\", \"swimming\", \"reading\", \"photography\", \"birdwatching\", \"surfing\"]\n}\n</code></pre>\n<pre><code>pr(d)\n</code></pre>\n<pre><code>{'hobbies': ['running',\n             'swimming',\n             'reading',\n             'photography',\n             'birdwatching',\n             'surfing'],\n 'personal_info': {'age': '23',\n                   'gender': 'M',\n                   'location': 'Christchurch, New Zealand',\n                   'name': 'Jose'}}\n</code></pre>\n<p>Equivalent to:</p>\n<pre><code>from pprint import pprint\n\npprint(d)\n</code></pre>\n<h3>Using Debug</h3>\n<p>The use case of the debug argument is rather interesting here. In short, if debug is set to False, the pr function will return immediately without printing any output passed into it. So why have this feature at all? Here's an example.</p>\n<p>Let's say we have some function that we intend to run in a production environment, where the complexity of the function requires extensive debugging in a local environment. You might introduce a debug argument in your function that will tell it to print debug messages only when debug is set to True, i.e. in the local environment. The function might look something like this:</p>\n<pre><code>def my_func(num, dbg=False):\n  \"\"\" Adds 5 and squares the result \"\"\"\n\n  # Add 5 to num\n  num = num + 5\n\n  # Print debug message\n  if dbg is True:\n    print(\"Added 5 to num!\")\n\n  # Square the result\n  num = num * num\n\n  # Print debug message\n  if dbg is True:\n    print(\"Squared num!\")\n\n  # Return the squared result\n  return num\n\n</code></pre>\n<p>Clearly, it becomes a tedious process to implement an if statement at every point in your function where would like to print a debug message. Using pr, the same can be accomplished in a single line to save space and improve readability.</p>\n<pre><code>def my_func(num, dbg=False):\n  \"\"\" Adds 5 and squares the result \"\"\"\n\n  # Add 5 to num\n  num = num + 5\n\n  # Print debug message\n  pr(\"Added 5 to num!\", dbg=dbg)\n\n  # Square the result\n  num = num * num\n\n  # Print debug message\n  pr(\"Squared num!\", dbg=dbg)\n\n  # Return the squared result\n  return num\n</code></pre>\n<hr>\n\n          </div>"}, "last_serial": 7094016, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a861794baffaae37eb9cf880adcda9cf", "sha256": "b6a996d97f9e9af07fe9f77e21f4045309b3938fe23d40a3de89b79796d673ac"}, "downloads": -1, "filename": "pr-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a861794baffaae37eb9cf880adcda9cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6864, "upload_time": "2020-02-01T17:46:57", "upload_time_iso_8601": "2020-02-01T17:46:57.604401Z", "url": "https://files.pythonhosted.org/packages/6e/28/02217b2a59135802d1be1f9bde95d1d5809e523cecb1f617803844c61f38/pr-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "26714cd2a70670566f6a5eb9bf6f281a", "sha256": "cc0e3e6aa18793ddbe71bc513b7f86eb2808c77df76ab18c5d30a859c73db77c"}, "downloads": -1, "filename": "pr-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "26714cd2a70670566f6a5eb9bf6f281a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7667, "upload_time": "2020-02-02T03:47:42", "upload_time_iso_8601": "2020-02-02T03:47:42.158217Z", "url": "https://files.pythonhosted.org/packages/1f/f5/8effc35e471172fc7bc2797f862df25fdde5a985bf012f1a81ef02bc4646/pr-0.0.2-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "f0b84d2a9ea22c309979fec5a516762a", "sha256": "23d7e66c27cd116031a61325dab4dedc705877e98c7e1bc1ffa5a5ceb9b6f286"}, "downloads": -1, "filename": "pr-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f0b84d2a9ea22c309979fec5a516762a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8058, "upload_time": "2020-02-02T07:42:08", "upload_time_iso_8601": "2020-02-02T07:42:08.906388Z", "url": "https://files.pythonhosted.org/packages/73/08/c5183fb0c874346100a25bc50771573545b32c2a970c97c3979aedc3c8a0/pr-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c06c72e4e8ac8a873368224ee541e528", "sha256": "9eac95afd6cbe98acab53e443f61861eb2e12c357814a7b23287ad2395e0a7b7"}, "downloads": -1, "filename": "pr-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c06c72e4e8ac8a873368224ee541e528", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8131, "upload_time": "2020-02-02T07:49:37", "upload_time_iso_8601": "2020-02-02T07:49:37.005282Z", "url": "https://files.pythonhosted.org/packages/b3/35/0f87de3830f89e0333cd3155551c9e9516d9aff96e058d5fb93e9c1bc6f6/pr-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "24b6aa29dc120d6540b0f306d1d42766", "sha256": "a98b5d06e70c241892fb959281cb874488b844db4209925875b7049d3463a59e"}, "downloads": -1, "filename": "pr-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "24b6aa29dc120d6540b0f306d1d42766", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8142, "upload_time": "2020-02-02T07:56:43", "upload_time_iso_8601": "2020-02-02T07:56:43.605765Z", "url": "https://files.pythonhosted.org/packages/0b/69/8e6bef99c950cb6b45397dbd83b680662c7989aacffa35e80095079160cd/pr-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "be4069a9a4abeec73be66a8b914adedf", "sha256": "3de9ba788438420c568aebb196e1ea22be8c62329ca9dbffe3c794f861ef9b76"}, "downloads": -1, "filename": "pr-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "be4069a9a4abeec73be66a8b914adedf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8141, "upload_time": "2020-02-02T07:59:41", "upload_time_iso_8601": "2020-02-02T07:59:41.500178Z", "url": "https://files.pythonhosted.org/packages/7d/a7/a05fffc2391c6f29d3fec1bd2bc9c2a7ddfcb6989e5bd561c5a90e2fe952/pr-0.1.3-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fd626340358bd77c7b67bc07187c72b8", "sha256": "72e19c769a0c7eeb6d76ec0a8012bb191e1be2819a3b353794778326ab2f8896"}, "downloads": -1, "filename": "pr-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fd626340358bd77c7b67bc07187c72b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8431, "upload_time": "2020-02-02T10:17:11", "upload_time_iso_8601": "2020-02-02T10:17:11.025106Z", "url": "https://files.pythonhosted.org/packages/d6/40/0586dbf26131183de4899aae6280c60b56d26a0b9c91d9f0b407dc18dacc/pr-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "462d91ed96d77e0965f3e7e6d7f3cdb9", "sha256": "bb7f037f95a0df76afa3eafefcf9050f8fb81f169d9a4332078fce4603cdec60"}, "downloads": -1, "filename": "pr-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "462d91ed96d77e0965f3e7e6d7f3cdb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8455, "upload_time": "2020-02-02T10:20:32", "upload_time_iso_8601": "2020-02-02T10:20:32.597587Z", "url": "https://files.pythonhosted.org/packages/8f/d4/c92b3fa3460687f6cd03fcaffca2af0bdd90cfbb50c6d51185749be0029b/pr-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "3ee3215d27bf992463567d3648e29257", "sha256": "ec94bae26be20fc7d2ed0bfbc767092af1b9bdefd813bb6dee437a381c176d7b"}, "downloads": -1, "filename": "pr-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3ee3215d27bf992463567d3648e29257", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8463, "upload_time": "2020-02-02T10:22:25", "upload_time_iso_8601": "2020-02-02T10:22:25.289248Z", "url": "https://files.pythonhosted.org/packages/6c/37/788aa921b8b9e73d327466c32e2942457899a0df8ecd2476d0065b15896b/pr-0.2.2-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "ad6103ebe5ccdb8b14cbec8408f20259", "sha256": "e7f0f87e9aa6ccea167c232c2a08584dcf026d28369b64789521f6199edb73fc"}, "downloads": -1, "filename": "pr-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ad6103ebe5ccdb8b14cbec8408f20259", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8536, "upload_time": "2020-02-06T15:14:17", "upload_time_iso_8601": "2020-02-06T15:14:17.766259Z", "url": "https://files.pythonhosted.org/packages/76/88/32f0c44d2f7cc9a753b2fd60163e73027a1c51b3e11999f334ac3d4b5c8a/pr-0.3.2-py3-none-any.whl", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "c0ab7872872cf421575d834140d7777a", "sha256": "d7c8826465cb266209c71a6efdecfdd9768278f5850cd280b0cda384fcaf275a"}, "downloads": -1, "filename": "pr-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c0ab7872872cf421575d834140d7777a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8574, "upload_time": "2020-02-06T16:00:12", "upload_time_iso_8601": "2020-02-06T16:00:12.439663Z", "url": "https://files.pythonhosted.org/packages/2c/be/992a49811f8bf351f2a7e9cb2df37f83e500a7a9924bef7f015489a0bd94/pr-0.3.3-py3-none-any.whl", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "cfa08504d5044fbbad42daf0104fbb67", "sha256": "b868b2c717a232792d4e805bbfce6603ea57edeb0bc78764f08809287996df85"}, "downloads": -1, "filename": "pr-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "cfa08504d5044fbbad42daf0104fbb67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8576, "upload_time": "2020-02-07T15:18:20", "upload_time_iso_8601": "2020-02-07T15:18:20.610573Z", "url": "https://files.pythonhosted.org/packages/c0/73/acab7c871209bca7eecfe85361445f51b19e789193400b4a0545e86bf7db/pr-0.4.3-py3-none-any.whl", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "76eb6c1c301c61f117d89b462561a375", "sha256": "0753c819969b7fe560795be95ed07364b675ee90c05b38d71070e99c3a1e1e77"}, "downloads": -1, "filename": "pr-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "76eb6c1c301c61f117d89b462561a375", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8582, "upload_time": "2020-02-08T06:56:31", "upload_time_iso_8601": "2020-02-08T06:56:31.994673Z", "url": "https://files.pythonhosted.org/packages/29/84/9073745bb2f50667400ac35ce38f8da39d50e3c785a7f30496325a58c970/pr-0.4.4-py3-none-any.whl", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "875375e8461e6f009caae8a9b76e838d", "sha256": "a320d8897ebbc0a95cd20b866b516b9b5c07041958f9b8c5261744a3556e9a8a"}, "downloads": -1, "filename": "pr-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "875375e8461e6f009caae8a9b76e838d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8574, "upload_time": "2020-02-08T07:08:20", "upload_time_iso_8601": "2020-02-08T07:08:20.896860Z", "url": "https://files.pythonhosted.org/packages/08/cc/274324492444972bfcaab7d73a6d86b19bb9cdc06c4632e483fe9f992989/pr-0.4.5-py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "cb0c9838d13c11b2cc30cd2ae4e8c0bd", "sha256": "3c8af7f7883507750200813e61d1607cc117d75cc6ae1f184c9bfc06570faee0"}, "downloads": -1, "filename": "pr-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cb0c9838d13c11b2cc30cd2ae4e8c0bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9173, "upload_time": "2020-02-15T06:20:33", "upload_time_iso_8601": "2020-02-15T06:20:33.511246Z", "url": "https://files.pythonhosted.org/packages/9e/43/c3952e9dbbbd910e9d00f64446ff23ab7d7047316782d56fdb77b25d37f8/pr-0.5.0-py3-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "846f804857e61b306bc65cc106721703", "sha256": "6fbb865ab5acd68ef9c4a5653f0d70523363032dfef52b4000cb705689cfe7d5"}, "downloads": -1, "filename": "pr-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "846f804857e61b306bc65cc106721703", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9180, "upload_time": "2020-04-24T15:54:38", "upload_time_iso_8601": "2020-04-24T15:54:38.332832Z", "url": "https://files.pythonhosted.org/packages/5f/ff/2345d1983e8dd428cb85782da4e8648a5cfcdd8f9182e3c7c6270c27ff28/pr-0.6.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "846f804857e61b306bc65cc106721703", "sha256": "6fbb865ab5acd68ef9c4a5653f0d70523363032dfef52b4000cb705689cfe7d5"}, "downloads": -1, "filename": "pr-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "846f804857e61b306bc65cc106721703", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9180, "upload_time": "2020-04-24T15:54:38", "upload_time_iso_8601": "2020-04-24T15:54:38.332832Z", "url": "https://files.pythonhosted.org/packages/5f/ff/2345d1983e8dd428cb85782da4e8648a5cfcdd8f9182e3c7c6270c27ff28/pr-0.6.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:20:16 2020"}