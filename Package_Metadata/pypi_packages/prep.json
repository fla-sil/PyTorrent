{"info": {"author": "Chris Petersen", "author_email": "geek@ex-nerd.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": "====\nPrep\n====\n\nPrep is a pre-deployment configuration generator that works by parsing template\nfiles using a simple syntax.  Variables are loaded in a cascading fashion so\nthat you can have granular control based both on intended network zone (e.g.\ndev or prod), or specific hostnames or subnets (e.g. www, www.prod,\nwww.prod.example.com).\n\nOverview\n~~~~~~~~\n\nWhen I started developing a large web application in Python, I couldn't find\na simple config generator that wasn't tied to a much larger system (e.g.\nCFEngine), or wasn't written for a significantly different platform (e.g.\nCapistrano).\n\nI had the following goals in mind:\n\n* Easy to configure, and flexible.\n* Simple one-line command to reconfigure every part of my application for any\n  deployment environment I chose (specifically:  dev, qa, staging, production).\n* Support multiple application pieces (several wsgi apps, nginx, gearman jobs,\n  elasticsearch)\n* Not interfere with the current deployment system (rsync) or whichever more\n  robust one I eventually choose to use.\n\nI think that Prep meets these, though it also has a lot of room for improvement.\n\nUsage\n~~~~~\n\nSee the included sample files for a working installation::\n\n    cd /path/to/prep/sample/\n    prep --dev\n\nAlternately, you can use the long form, and specify the directory name\nmanually::\n\n    prep --mode=production /path/to/prep/sample/\n\nWhen you run prep, it scans the entire specified directory tree for files named\n**prep.cfg**.  These are standard python ConfigParser files (like Windows INI)\ncontaining the directives described below.\n\nprep.cfg\n~~~~~~~~\n\nprep\n  - Directives to control how prep should render templates for this directory.\n  - At the moment, this only includes the required ``template = simple``.\n    Eventually there will be more options and probably even other template\n    parsing engines.\n\nvars\n  - These are the variables that will be injected into your template files.\n  - All values are strings\n\nfiles\n  - List of files to process, specified as ``source path = destination path``\n  - Relative path names will be in relation to prep.cfg but you are welcome\n    to use absolute pathnames.\n\npre\n  - Items in this section are processed before prep touches any files\n  - Currently supports the following commands:\n\n    - run (or run.name1, run.name2, ...)\n    - set.NAME (runs a shell command and sets var NAME to its output)\n\n  - Values that look like python repr() data for basic structures will be\n    interpreted as such (e.g. ``['item1','item2']`` will be interpreted as a\n    list object).\n\npost\n  - Identical to **pre** above, but runs after file processing\n\n|\n\nTemplate interpolation is allowed in **files**, **pre**, and **post** so you\ncan do things like use the output of a command to set a variable containing\na password value, or send generated files to environment-specific directory\nnames.\n\nExcept for **prep**, you can also create mode- and host- and user-specific\nvariants of each directive, which will override the common config options\nwith the conditional one you have provided::\n\n    [vars]\n    var1 = val1\n    var2 = val2\n    var3 = val3\n\n    [vars:mode=dev]\n    var1 = dev-val1\n\n    [vars:host=www]\n    var2 = www-val2\n\n    [vars:user=root]\n    var3 = root-val3\n\nPlease see sample/ directory for a set of working examples.\n\nSimple Template Syntax\n~~~~~~~~~~~~~~~~~~~~~~\n\nThere are only 3 things you can do in the simple syntax.  They are listed below\nin order of operation.  You can mix and match as necessary.\n\nBasic logic\n-----------\n\nPositive and negative matching against mode or host::\n\n    ##if:mode=dev##\n    This content will only exist in the final file\n    if prep was invoked with --mode=dev\n    ##endif##\n\n    ##if:host!=www##\n    This content will only exist in the final file\n    if prep was invoked on a host not named www\n    ##endif##\n\n    This other content will always be in the final file.\n\nSorry, no ``else`` clause yet.\n\nIncludes\n--------\n\nI have included a basic include command.  It looks for the filename first in\nthe same directory as the file that requested the include, and second in the\ndirectory containing the prep.cfg file currently being acted on.::\n\n\n    ##inc:logging.inc##\n\nVariables\n---------\n\nThe whole point of this system is to parse variables into your config files::\n\n    [myapp]\n    domain = ##domain##\n    port = ##port##\n\nIn addition to the variables defined in your prep.cfg file, prep provides the\nfollowing variables:\n\nroot\n    The absolute pathname for the directory containing prep.cfg\nuser\n    $USER from the current shell environment\ntime\n    The current unix epoch timestamp.\n\nPrep will also include any --variable=value pairs provided on the command line\nwhen it was invoked.  These command line arguments will override any values\nfrom prep.cfg.\n\nDownload\n~~~~~~~~\n\n* https://github.com/ex-nerd/prep\n* http://pypi.python.org/pypi/prep/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ex-nerd/prep", "keywords": null, "license": "Modified BSD", "maintainer": null, "maintainer_email": null, "name": "prep", "package_url": "https://pypi.org/project/prep/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/prep/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ex-nerd/prep"}, "release_url": "https://pypi.org/project/prep/0.1.10/", "requires_dist": null, "requires_python": null, "summary": "Pre-deployment configuration parser/generator", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Prep is a pre-deployment configuration generator that works by parsing template\nfiles using a simple syntax.  Variables are loaded in a cascading fashion so\nthat you can have granular control based both on intended network zone (e.g.\ndev or prod), or specific hostnames or subnets (e.g. www, www.prod,\nwww.prod.example.com).</p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>When I started developing a large web application in Python, I couldn\u2019t find\na simple config generator that wasn\u2019t tied to a much larger system (e.g.\nCFEngine), or wasn\u2019t written for a significantly different platform (e.g.\nCapistrano).</p>\n<p>I had the following goals in mind:</p>\n<ul>\n<li>Easy to configure, and flexible.</li>\n<li>Simple one-line command to reconfigure every part of my application for any\ndeployment environment I chose (specifically:  dev, qa, staging, production).</li>\n<li>Support multiple application pieces (several wsgi apps, nginx, gearman jobs,\nelasticsearch)</li>\n<li>Not interfere with the current deployment system (rsync) or whichever more\nrobust one I eventually choose to use.</li>\n</ul>\n<p>I think that Prep meets these, though it also has a lot of room for improvement.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>See the included sample files for a working installation:</p>\n<pre>cd /path/to/prep/sample/\nprep --dev\n</pre>\n<p>Alternately, you can use the long form, and specify the directory name\nmanually:</p>\n<pre>prep --mode=production /path/to/prep/sample/\n</pre>\n<p>When you run prep, it scans the entire specified directory tree for files named\n<strong>prep.cfg</strong>.  These are standard python ConfigParser files (like Windows INI)\ncontaining the directives described below.</p>\n</div>\n<div id=\"prep-cfg\">\n<h2>prep.cfg</h2>\n<dl>\n<dt>prep</dt>\n<dd><ul>\n<li>Directives to control how prep should render templates for this directory.</li>\n<li>At the moment, this only includes the required <tt>template = simple</tt>.\nEventually there will be more options and probably even other template\nparsing engines.</li>\n</ul>\n</dd>\n<dt>vars</dt>\n<dd><ul>\n<li>These are the variables that will be injected into your template files.</li>\n<li>All values are strings</li>\n</ul>\n</dd>\n<dt>files</dt>\n<dd><ul>\n<li>List of files to process, specified as <tt>source path = destination path</tt></li>\n<li>Relative path names will be in relation to prep.cfg but you are welcome\nto use absolute pathnames.</li>\n</ul>\n</dd>\n<dt>pre</dt>\n<dd><ul>\n<li>Items in this section are processed before prep touches any files</li>\n<li>Currently supports the following commands:<ul>\n<li>run (or run.name1, run.name2, \u2026)</li>\n<li>set.NAME (runs a shell command and sets var NAME to its output)</li>\n</ul>\n</li>\n<li>Values that look like python repr() data for basic structures will be\ninterpreted as such (e.g. <tt><span class=\"pre\">['item1','item2']</span></tt> will be interpreted as a\nlist object).</li>\n</ul>\n</dd>\n<dt>post</dt>\n<dd><ul>\n<li>Identical to <strong>pre</strong> above, but runs after file processing</li>\n</ul>\n</dd>\n</dl>\n<div>\n<div><br></div>\n</div>\n<p>Template interpolation is allowed in <strong>files</strong>, <strong>pre</strong>, and <strong>post</strong> so you\ncan do things like use the output of a command to set a variable containing\na password value, or send generated files to environment-specific directory\nnames.</p>\n<p>Except for <strong>prep</strong>, you can also create mode- and host- and user-specific\nvariants of each directive, which will override the common config options\nwith the conditional one you have provided:</p>\n<pre>[vars]\nvar1 = val1\nvar2 = val2\nvar3 = val3\n\n[vars:mode=dev]\nvar1 = dev-val1\n\n[vars:host=www]\nvar2 = www-val2\n\n[vars:user=root]\nvar3 = root-val3\n</pre>\n<p>Please see sample/ directory for a set of working examples.</p>\n</div>\n<div id=\"simple-template-syntax\">\n<h2>Simple Template Syntax</h2>\n<p>There are only 3 things you can do in the simple syntax.  They are listed below\nin order of operation.  You can mix and match as necessary.</p>\n<div id=\"basic-logic\">\n<h3>Basic logic</h3>\n<p>Positive and negative matching against mode or host:</p>\n<pre>##if:mode=dev##\nThis content will only exist in the final file\nif prep was invoked with --mode=dev\n##endif##\n\n##if:host!=www##\nThis content will only exist in the final file\nif prep was invoked on a host not named www\n##endif##\n\nThis other content will always be in the final file.\n</pre>\n<p>Sorry, no <tt>else</tt> clause yet.</p>\n</div>\n<div id=\"includes\">\n<h3>Includes</h3>\n<p>I have included a basic include command.  It looks for the filename first in\nthe same directory as the file that requested the include, and second in the\ndirectory containing the prep.cfg file currently being acted on.:</p>\n<pre>##inc:logging.inc##\n</pre>\n</div>\n<div id=\"variables\">\n<h3>Variables</h3>\n<p>The whole point of this system is to parse variables into your config files:</p>\n<pre>[myapp]\ndomain = ##domain##\nport = ##port##\n</pre>\n<p>In addition to the variables defined in your prep.cfg file, prep provides the\nfollowing variables:</p>\n<dl>\n<dt>root</dt>\n<dd>The absolute pathname for the directory containing prep.cfg</dd>\n<dt>user</dt>\n<dd>$USER from the current shell environment</dd>\n<dt>time</dt>\n<dd>The current unix epoch timestamp.</dd>\n</dl>\n<p>Prep will also include any \u2013variable=value pairs provided on the command line\nwhen it was invoked.  These command line arguments will override any values\nfrom prep.cfg.</p>\n</div>\n</div>\n<div id=\"download\">\n<h2>Download</h2>\n<ul>\n<li><a href=\"https://github.com/ex-nerd/prep\" rel=\"nofollow\">https://github.com/ex-nerd/prep</a></li>\n<li><a href=\"http://pypi.python.org/pypi/prep/\" rel=\"nofollow\">http://pypi.python.org/pypi/prep/</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 796665, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "685d003e0101a7dfbc0c42ec4944e23d", "sha256": "8b518f48ca8101ab275c45af0c7323ebc19ccfb9aaeca979548bfe4a5f10f08a"}, "downloads": -1, "filename": "prep-0.1.0.tar.gz", "has_sig": false, "md5_digest": "685d003e0101a7dfbc0c42ec4944e23d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5932, "upload_time": "2012-01-08T06:13:21", "upload_time_iso_8601": "2012-01-08T06:13:21.849187Z", "url": "https://files.pythonhosted.org/packages/61/23/071515430a520b5f44d5899fff1a973d19909a44a5f7285f8183157aa366/prep-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ae8a7fecaafea566f945802dcda3d5d5", "sha256": "365049f6867eb190b880b8464486012d38d6b9ea467124f85b416f8bab478aef"}, "downloads": -1, "filename": "prep-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ae8a7fecaafea566f945802dcda3d5d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8416, "upload_time": "2012-01-08T08:30:03", "upload_time_iso_8601": "2012-01-08T08:30:03.221056Z", "url": "https://files.pythonhosted.org/packages/4e/cf/8d569acf1216fa34a99f17088c71a2821e768ceb7df45ecd43064318c227/prep-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "608a1b85375ad649feb0e56a08fd1d75", "sha256": "845a2ad1c3c55619b24760fc05c16c9c1b17bd7a5d91f0de1bba49cef4c4d396"}, "downloads": -1, "filename": "prep-0.1.10.tar.gz", "has_sig": false, "md5_digest": "608a1b85375ad649feb0e56a08fd1d75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9344, "upload_time": "2012-01-11T23:18:54", "upload_time_iso_8601": "2012-01-11T23:18:54.415972Z", "url": "https://files.pythonhosted.org/packages/19/7d/51a33f3ee3192f673628753101344e75f809f0e92596c0d4c5d1144b67cd/prep-0.1.10.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "399ae8f25c16d31f26adbe8445012d87", "sha256": "83ef32c453471498b23416269290a82c30528f132bd8f243dc4549a13c2f4efe"}, "downloads": -1, "filename": "prep-0.1.2.tar.gz", "has_sig": false, "md5_digest": "399ae8f25c16d31f26adbe8445012d87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8519, "upload_time": "2012-01-10T01:59:35", "upload_time_iso_8601": "2012-01-10T01:59:35.491812Z", "url": "https://files.pythonhosted.org/packages/75/f4/1fa9b5cb8ebcd6a2f7975c2cfbd635ba80ba762e225da51adc2e964ab7de/prep-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "749ce8f182e9595e7f2f3929dfc918fd", "sha256": "3acaaa29b6040377eb32a68269868b8c62bad808aeee5ee670ecb2562d6639e4"}, "downloads": -1, "filename": "prep-0.1.3.tar.gz", "has_sig": false, "md5_digest": "749ce8f182e9595e7f2f3929dfc918fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8851, "upload_time": "2012-01-10T07:31:35", "upload_time_iso_8601": "2012-01-10T07:31:35.263187Z", "url": "https://files.pythonhosted.org/packages/a7/c9/6ef5f2d1da318934a9ce79f88ee1ab4c31cc03485291c994c6cd0a311ce3/prep-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "b69ff634b13413ce0e5a564780c29a74", "sha256": "9d55db6736b5de30ab9c83de4d7dd250740594ee8fc6bc33aa5311dc62080a2e"}, "downloads": -1, "filename": "prep-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b69ff634b13413ce0e5a564780c29a74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9238, "upload_time": "2012-01-10T23:33:41", "upload_time_iso_8601": "2012-01-10T23:33:41.515755Z", "url": "https://files.pythonhosted.org/packages/f3/a5/1210fbb02e1b468454b4d0de55e98372536facbac0531e8ea306c9dd87e6/prep-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "270c0e9b62679c012635d501318cfa9d", "sha256": "5a159425c3412c488e43110470d3b1d1b92d72833474c206f76c2f347f7f56b6"}, "downloads": -1, "filename": "prep-0.1.5.tar.gz", "has_sig": false, "md5_digest": "270c0e9b62679c012635d501318cfa9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9227, "upload_time": "2012-01-11T00:06:26", "upload_time_iso_8601": "2012-01-11T00:06:26.253214Z", "url": "https://files.pythonhosted.org/packages/3d/e9/21af391db5e05515b9465dd56b9ad31d27c746ed814437a8cdada5c9a2b7/prep-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "be061b2cfe738ecd750764465d8ee3ca", "sha256": "d17d04d03c3c142ffd4bad56b6679447d31d8183e01be5f28e41b1ad6fd3fb49"}, "downloads": -1, "filename": "prep-0.1.6.tar.gz", "has_sig": false, "md5_digest": "be061b2cfe738ecd750764465d8ee3ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9271, "upload_time": "2012-01-11T00:27:37", "upload_time_iso_8601": "2012-01-11T00:27:37.105584Z", "url": "https://files.pythonhosted.org/packages/34/ea/94539e4eeff7fa020615224798044ab22555afe623cf60e07c90d316158e/prep-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "4b3cd1b3f6b5252b52953a64354726ad", "sha256": "4e8a0cf0117d7704d1c591cf2fe786cc30f49a89f61d4e20027d2e3f20eafe3a"}, "downloads": -1, "filename": "prep-0.1.7.tar.gz", "has_sig": false, "md5_digest": "4b3cd1b3f6b5252b52953a64354726ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9295, "upload_time": "2012-01-11T01:29:45", "upload_time_iso_8601": "2012-01-11T01:29:45.164298Z", "url": "https://files.pythonhosted.org/packages/38/df/029184092b17d05e38e847b867b75afab9b7fc78f1ff56c382e2514490d8/prep-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "9faf58a1f4637fc645117eef3146f5ee", "sha256": "22bfcc4d5692a5f187f8daddba71a4b321ade94060af552b798808ca77684766"}, "downloads": -1, "filename": "prep-0.1.8.tar.gz", "has_sig": false, "md5_digest": "9faf58a1f4637fc645117eef3146f5ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9225, "upload_time": "2012-01-11T02:26:50", "upload_time_iso_8601": "2012-01-11T02:26:50.687573Z", "url": "https://files.pythonhosted.org/packages/ac/f3/e559447c8d87c4d7b8b7426093a6e9acb698c9fbe131a0fab85dec85db8d/prep-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "fb3b42689a311c6fcd47a150d0696bf1", "sha256": "e4ea140ea826d4094de12869a7d8ba871d2c9caa494021df480a541a4f89bf88"}, "downloads": -1, "filename": "prep-0.1.9.tar.gz", "has_sig": false, "md5_digest": "fb3b42689a311c6fcd47a150d0696bf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9354, "upload_time": "2012-01-11T23:07:12", "upload_time_iso_8601": "2012-01-11T23:07:12.537827Z", "url": "https://files.pythonhosted.org/packages/a6/d6/37c31edbfc7ac5e9417e2a81daa961ec5c3b9c211267057d2406f74573b0/prep-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "608a1b85375ad649feb0e56a08fd1d75", "sha256": "845a2ad1c3c55619b24760fc05c16c9c1b17bd7a5d91f0de1bba49cef4c4d396"}, "downloads": -1, "filename": "prep-0.1.10.tar.gz", "has_sig": false, "md5_digest": "608a1b85375ad649feb0e56a08fd1d75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9344, "upload_time": "2012-01-11T23:18:54", "upload_time_iso_8601": "2012-01-11T23:18:54.415972Z", "url": "https://files.pythonhosted.org/packages/19/7d/51a33f3ee3192f673628753101344e75f809f0e92596c0d4c5d1144b67cd/prep-0.1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:53 2020"}