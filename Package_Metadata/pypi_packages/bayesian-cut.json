{"info": {"author": "Laurent Vermue, Maciej Korzepa, Petr Taborsky, Morten M\u00f8rup", "author_email": "<lauve@dtu.dk>, <mjko@dtu.dk>, <ptab@dtu.dk>, <mmor@dtu.dk>", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "Bayesian Cut Package\n====================\n\n.. image:: https://img.shields.io/pypi/v/bayesian_cut.svg\n    :target: https://pypi.python.org/pypi/bayesian_cut\n    :alt: Pypi Version\n.. image:: https://img.shields.io/pypi/l/bayesian_cut.svg\n    :target: https://pypi.python.org/pypi/bayesian_cut\n    :alt: License\n.. image:: https://travis-ci.com/DTUComputeCognitiveSystems/bayesian_cut.svg?branch=master\n   :target: https://travis-ci.com/DTUComputeCognitiveSystems/bayesian_cut\n   :alt: Build Status\n\nThe Bayesian Cut Python package provides an easy to use API for the straight-forward application of Bayesian network\ncuts using a full Bayesian inference framework based on the Gibbs-Sampler using the degree corrected Stochastic\nBlockmodel (dc-SBM) or the Bayesian Cut (BC).\nFurthermore it provides modularity, ratio-cut and norm cut based spectral network cut methods.\nIt also provides a rich visualization library that allow an easy analysis of posterior solution landscapes and network\ncuts obtained by the various methods.\n\nJupyter Notebooks with examples on how to use the package can be found at\nhttps://github.com/DTUComputeCognitiveSystems/bayesian_cut/tree/master/examples\n\n\nInstallation\n------------\n\n-  | Install the package for Python3 using the following command. Some\n     dependencies might require an upgrade (scikit-learn, numpy and\n     scipy).\n   | ``$ pip install bayesian_cut``\n\n-  | Now you can import the bayesian cut class by typing\n   | ``from bayesian_cut.cuts import Model``\n\nQuick Start\n-----------\n\nUse the bayesian_cut package for performing graph cuts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   # Load the package\n   from bayesian_cut.data.load import load_data\n   from bayesian_cut.cuts.bayesian_models import Model\n\n   # Load an example network\n   network_name = 'karate'\n   X, Y = load_data(network=network_name, labels=True, remove_disconnected=True)\n\n   # Set the parameters for the model\n   n_samples_per_chain = 75\n   n_chains = 15\n   C = 2\n   model_params = {\n       'alpha_in': 1e-2,\n       'beta_in': 1e-2,\n       'alpha_out': 1e-2,\n       'beta_out': 1e-2,\n       'b': 1,\n       'gamma': 3\n   }\n\n   # Define the model\n   BC = Model('ShiftedApproximateBayesianCommunityDetection',\n               X,\n               model_params,\n               Y=Y,\n               C=C,\n               block_sampling=False,\n               marginalize_phi=True\n               )\n\n   # Add the number of chains to run\n   BC.add_chains(number_of_chains=n_chains)\n\n   # Run the Gibbs sampler\n   BC.run_chains(n_samples=n_samples_per_chain,\n                 n_prior_updates=20,\n                 verbose=2,\n                 save_all_samples=False,\n                 parallel=True\n                 )\n\n   # Obtain the cut with the highest log-likelihood\n   graph_cut_z_vector = BC.get_best_chain().max_log_lik_z_\n\n   # Plot the cut as an adjacency matrix\n   from bayesian_cut.utils import utils\n   utils.cluster_plot(BC)\n\n   # Done\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DTUComputeCognitiveSystems/bayesian_cut", "keywords": "", "license": "new BSD", "maintainer": "", "maintainer_email": "", "name": "bayesian-cut", "package_url": "https://pypi.org/project/bayesian-cut/", "platform": "", "project_url": "https://pypi.org/project/bayesian-cut/", "project_urls": {"Homepage": "https://github.com/DTUComputeCognitiveSystems/bayesian_cut"}, "release_url": "https://pypi.org/project/bayesian-cut/0.1.2b0/", "requires_dist": ["numpy (>=1.13.3)", "scipy (>=1.0.0)", "scikit-learn (>=0.20.0)", "networkx (>=2.0)", "joblib (>=0.12.3)", "sphinx (>=1.6) ; extra == 'docs'", "sphinx-rtd-theme ; extra == 'docs'", "nbsphinx ; extra == 'docs'", "nbsphinx-link ; extra == 'docs'", "matplotlib ; extra == 'extras'", "plotly ; extra == 'extras'", "naturalneighbor ; extra == 'extras'", "seaborn ; extra == 'extras'", "pytest ; extra == 'tests'"], "requires_python": ">=3.5", "summary": "An implementation of bayesian cut methods", "version": "0.1.2b0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/bayesian_cut\" rel=\"nofollow\"><img alt=\"Pypi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a3d8ff78d4f8d8b0e6eb47ac699dfa7001e8e7b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f626179657369616e5f6375742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/bayesian_cut\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/03413ae4f445bca7e93d949923c0f5da330173db/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f626179657369616e5f6375742e737667\"></a>\n<a href=\"https://travis-ci.com/DTUComputeCognitiveSystems/bayesian_cut\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3113af599a02f16cd4726330eac17517ae7d599a/68747470733a2f2f7472617669732d63692e636f6d2f445455436f6d70757465436f676e697469766553797374656d732f626179657369616e5f6375742e7376673f6272616e63683d6d6173746572\"></a>\n<p>The Bayesian Cut Python package provides an easy to use API for the straight-forward application of Bayesian network\ncuts using a full Bayesian inference framework based on the Gibbs-Sampler using the degree corrected Stochastic\nBlockmodel (dc-SBM) or the Bayesian Cut (BC).\nFurthermore it provides modularity, ratio-cut and norm cut based spectral network cut methods.\nIt also provides a rich visualization library that allow an easy analysis of posterior solution landscapes and network\ncuts obtained by the various methods.</p>\n<p>Jupyter Notebooks with examples on how to use the package can be found at\n<a href=\"https://github.com/DTUComputeCognitiveSystems/bayesian_cut/tree/master/examples\" rel=\"nofollow\">https://github.com/DTUComputeCognitiveSystems/bayesian_cut/tree/master/examples</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li><div>\n<div>Install the package for Python3 using the following command. Some\ndependencies might require an upgrade (scikit-learn, numpy and\nscipy).</div>\n<div><tt>$ pip install bayesian_cut</tt></div>\n</div>\n</li>\n<li><div>\n<div>Now you can import the bayesian cut class by typing</div>\n<div><tt>from bayesian_cut.cuts import Model</tt></div>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<h2 id=\"use-the-bayesian-cut-package-for-performing-graph-cuts\"><span class=\"section-subtitle\">Use the bayesian_cut package for performing graph cuts</span></h2>\n<pre><span class=\"c1\"># Load the package</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bayesian_cut.data.load</span> <span class=\"kn\">import</span> <span class=\"n\">load_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bayesian_cut.cuts.bayesian_models</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"c1\"># Load an example network</span>\n<span class=\"n\">network_name</span> <span class=\"o\">=</span> <span class=\"s1\">'karate'</span>\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"n\">network</span><span class=\"o\">=</span><span class=\"n\">network_name</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">remove_disconnected</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set the parameters for the model</span>\n<span class=\"n\">n_samples_per_chain</span> <span class=\"o\">=</span> <span class=\"mi\">75</span>\n<span class=\"n\">n_chains</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">model_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'alpha_in'</span><span class=\"p\">:</span> <span class=\"mf\">1e-2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'beta_in'</span><span class=\"p\">:</span> <span class=\"mf\">1e-2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'alpha_out'</span><span class=\"p\">:</span> <span class=\"mf\">1e-2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'beta_out'</span><span class=\"p\">:</span> <span class=\"mf\">1e-2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'gamma'</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Define the model</span>\n<span class=\"n\">BC</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"s1\">'ShiftedApproximateBayesianCommunityDetection'</span><span class=\"p\">,</span>\n            <span class=\"n\">X</span><span class=\"p\">,</span>\n            <span class=\"n\">model_params</span><span class=\"p\">,</span>\n            <span class=\"n\">Y</span><span class=\"o\">=</span><span class=\"n\">Y</span><span class=\"p\">,</span>\n            <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"n\">C</span><span class=\"p\">,</span>\n            <span class=\"n\">block_sampling</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">marginalize_phi</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n            <span class=\"p\">)</span>\n\n<span class=\"c1\"># Add the number of chains to run</span>\n<span class=\"n\">BC</span><span class=\"o\">.</span><span class=\"n\">add_chains</span><span class=\"p\">(</span><span class=\"n\">number_of_chains</span><span class=\"o\">=</span><span class=\"n\">n_chains</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run the Gibbs sampler</span>\n<span class=\"n\">BC</span><span class=\"o\">.</span><span class=\"n\">run_chains</span><span class=\"p\">(</span><span class=\"n\">n_samples</span><span class=\"o\">=</span><span class=\"n\">n_samples_per_chain</span><span class=\"p\">,</span>\n              <span class=\"n\">n_prior_updates</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n              <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n              <span class=\"n\">save_all_samples</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n              <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n              <span class=\"p\">)</span>\n\n<span class=\"c1\"># Obtain the cut with the highest log-likelihood</span>\n<span class=\"n\">graph_cut_z_vector</span> <span class=\"o\">=</span> <span class=\"n\">BC</span><span class=\"o\">.</span><span class=\"n\">get_best_chain</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">max_log_lik_z_</span>\n\n<span class=\"c1\"># Plot the cut as an adjacency matrix</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bayesian_cut.utils</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span>\n<span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">cluster_plot</span><span class=\"p\">(</span><span class=\"n\">BC</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Done</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4894123, "releases": {"0.0.1b0": [{"comment_text": "", "digests": {"md5": "78762c7b0d1ac1473094c736fddd8be0", "sha256": "09f2831090ab5c946b7931298dd9e6ae58e9e908ff8469f7038711b522bf69d4"}, "downloads": -1, "filename": "bayesian_cut-0.0.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "78762c7b0d1ac1473094c736fddd8be0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24113, "upload_time": "2019-02-18T21:30:04", "upload_time_iso_8601": "2019-02-18T21:30:04.619919Z", "url": "https://files.pythonhosted.org/packages/67/a3/2766e37190554962935f5e1583de5fd4a7b54fdbce2d3c28a545b0a05dae/bayesian_cut-0.0.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bf270d362b0aef9d49c2a073a3cd773", "sha256": "bfad6631904cbc864b90e7cf3b6dd1e50fd5f2c160fb343b6bf8e694d073bc29"}, "downloads": -1, "filename": "bayesian_cut-0.0.1b0.tar.gz", "has_sig": false, "md5_digest": "2bf270d362b0aef9d49c2a073a3cd773", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21289, "upload_time": "2019-02-18T21:30:06", "upload_time_iso_8601": "2019-02-18T21:30:06.801868Z", "url": "https://files.pythonhosted.org/packages/16/6b/1b3df13748bcd057ddc752c9137008a09ef9bd5a44d6692f6e188f98c7fe/bayesian_cut-0.0.1b0.tar.gz", "yanked": false}], "0.0.2b0": [{"comment_text": "", "digests": {"md5": "358d0429c3aaad6eb6b3ccbaf7a8c075", "sha256": "abd3140293204c4f16d772b4c74524bc9807a5719046783d5f925170bcf31997"}, "downloads": -1, "filename": "bayesian_cut-0.0.2b0-py3-none-any.whl", "has_sig": false, "md5_digest": "358d0429c3aaad6eb6b3ccbaf7a8c075", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 25956, "upload_time": "2019-02-19T08:48:07", "upload_time_iso_8601": "2019-02-19T08:48:07.645538Z", "url": "https://files.pythonhosted.org/packages/38/37/2954586a28279ca0e7d82303dc3c2b3dbc04d209d1849768635497133b44/bayesian_cut-0.0.2b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b3ecd91d936b767b32e39253d928c74", "sha256": "aa7a66be9fc1e05be661415c4ef9f92eb72b94eb23f58be742b9afdcfc9bc2f5"}, "downloads": -1, "filename": "bayesian_cut-0.0.2b0.tar.gz", "has_sig": false, "md5_digest": "1b3ecd91d936b767b32e39253d928c74", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22995, "upload_time": "2019-02-19T08:48:09", "upload_time_iso_8601": "2019-02-19T08:48:09.259066Z", "url": "https://files.pythonhosted.org/packages/1d/a8/5494ea23b41ae2e01c97970152702d96a39d70cd2ce56528c3cddb5f3ccb/bayesian_cut-0.0.2b0.tar.gz", "yanked": false}], "0.1.0b0": [{"comment_text": "", "digests": {"md5": "003c65fe2e32dafa23da6df8d62a72aa", "sha256": "42cd764811ae2e14044c64fbb72af3f7395745599cccae67cf21252862dbc61a"}, "downloads": -1, "filename": "bayesian_cut-0.1.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "003c65fe2e32dafa23da6df8d62a72aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28570, "upload_time": "2019-02-23T20:07:21", "upload_time_iso_8601": "2019-02-23T20:07:21.378955Z", "url": "https://files.pythonhosted.org/packages/35/2b/5f3d53b7a96959d7ae17500852f6b9916f3d43db7b5fb5be206c70c8bd47/bayesian_cut-0.1.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23efddef4d7feb4d0f6d2cccbb810a89", "sha256": "9afbf9a282b8a3bf9eaf606e64fb93bd76baf091fd737fb65bb0a2b9d12d5621"}, "downloads": -1, "filename": "bayesian_cut-0.1.0b0.tar.gz", "has_sig": false, "md5_digest": "23efddef4d7feb4d0f6d2cccbb810a89", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24454, "upload_time": "2019-02-23T20:07:22", "upload_time_iso_8601": "2019-02-23T20:07:22.799062Z", "url": "https://files.pythonhosted.org/packages/4a/11/3d08a6a1d1f61987dbe4e091a0d3c9107137958e438312b9fda3027f0a23/bayesian_cut-0.1.0b0.tar.gz", "yanked": false}], "0.1.1b0": [{"comment_text": "", "digests": {"md5": "b650485817487f811c2d2ae2190ca26a", "sha256": "b222fa23504eed879b8ddf540c5c4f406b91a77a02ae28ee56739afb85f1ee5b"}, "downloads": -1, "filename": "bayesian_cut-0.1.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "b650485817487f811c2d2ae2190ca26a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28594, "upload_time": "2019-02-24T00:07:50", "upload_time_iso_8601": "2019-02-24T00:07:50.654051Z", "url": "https://files.pythonhosted.org/packages/fd/14/a44c9daa9fd733268eb0ef6c86a6aca531b3e9ce92ff27e576bcf18493c5/bayesian_cut-0.1.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70feefe0d5fd88f769b46c99d91ab9b6", "sha256": "0c42c6215b226207cf3dd0fa8b70540cde9366f60ff39a69d0a6e8cffe196aeb"}, "downloads": -1, "filename": "bayesian_cut-0.1.1b0.tar.gz", "has_sig": false, "md5_digest": "70feefe0d5fd88f769b46c99d91ab9b6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24473, "upload_time": "2019-02-24T00:07:52", "upload_time_iso_8601": "2019-02-24T00:07:52.253435Z", "url": "https://files.pythonhosted.org/packages/d2/1c/486ca8d2547e3029a991d0426ab7c8a163b1da7e9eefefc71285dec8c899/bayesian_cut-0.1.1b0.tar.gz", "yanked": false}], "0.1.2b0": [{"comment_text": "", "digests": {"md5": "604b841094814b4d13151bf0daee829a", "sha256": "5fa5c7616a411bdb89b09ddebdf487c754f96be40a04534b5ab6baf5ddc68379"}, "downloads": -1, "filename": "bayesian_cut-0.1.2b0-py3-none-any.whl", "has_sig": false, "md5_digest": "604b841094814b4d13151bf0daee829a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29468, "upload_time": "2019-03-04T12:12:03", "upload_time_iso_8601": "2019-03-04T12:12:03.868484Z", "url": "https://files.pythonhosted.org/packages/8e/96/8f429a2111ae2e097d6e0b7c998185d5074f1010e348d9da181de7270b30/bayesian_cut-0.1.2b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1bc3977190f8530993072ebd4666eab", "sha256": "45eebf057ade356b71bcb401aff9a4ce8f8f8a73b7c16f471489146040bce5e2"}, "downloads": -1, "filename": "bayesian_cut-0.1.2b0.tar.gz", "has_sig": false, "md5_digest": "d1bc3977190f8530993072ebd4666eab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25098, "upload_time": "2019-03-04T12:12:05", "upload_time_iso_8601": "2019-03-04T12:12:05.619605Z", "url": "https://files.pythonhosted.org/packages/8d/f8/c8782d08f573699b184dd8f581ed4eb593e1d6290c67a8deace245ebc273/bayesian_cut-0.1.2b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "604b841094814b4d13151bf0daee829a", "sha256": "5fa5c7616a411bdb89b09ddebdf487c754f96be40a04534b5ab6baf5ddc68379"}, "downloads": -1, "filename": "bayesian_cut-0.1.2b0-py3-none-any.whl", "has_sig": false, "md5_digest": "604b841094814b4d13151bf0daee829a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29468, "upload_time": "2019-03-04T12:12:03", "upload_time_iso_8601": "2019-03-04T12:12:03.868484Z", "url": "https://files.pythonhosted.org/packages/8e/96/8f429a2111ae2e097d6e0b7c998185d5074f1010e348d9da181de7270b30/bayesian_cut-0.1.2b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1bc3977190f8530993072ebd4666eab", "sha256": "45eebf057ade356b71bcb401aff9a4ce8f8f8a73b7c16f471489146040bce5e2"}, "downloads": -1, "filename": "bayesian_cut-0.1.2b0.tar.gz", "has_sig": false, "md5_digest": "d1bc3977190f8530993072ebd4666eab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25098, "upload_time": "2019-03-04T12:12:05", "upload_time_iso_8601": "2019-03-04T12:12:05.619605Z", "url": "https://files.pythonhosted.org/packages/8d/f8/c8782d08f573699b184dd8f581ed4eb593e1d6290c67a8deace245ebc273/bayesian_cut-0.1.2b0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:42 2020"}