{"info": {"author": "MPL Developers", "author_email": "matplotlib-users@python.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Matplotlib", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Office/Business :: Financial", "Topic :: Office/Business :: Financial :: Investment", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Visualization"], "description": "[![Build Status](https://travis-ci.org/matplotlib/mplfinance.svg?branch=master)](https://travis-ci.org/matplotlib/mplfinance)\n\n# mplfinance\n## matplotlib utilities for the visualization, and visual analysis, of financial data\n\n---\n\n# Installation\n## &nbsp;&nbsp;&nbsp;`pip install --upgrade mplfinance`\n   - mplfinance requires [matplotlib](https://pypi.org/project/matplotlib/) and [pandas](https://pypi.org/project/pandas/)\n\n---\n\n# <a name=\"tutorials\"></a>Contents and Tutorials\n\n  - **[The New API](https://github.com/matplotlib/mplfinance#newapi)**\n  - **[Tutorials](https://github.com/matplotlib/mplfinance#tutorials)**\n    - **[Basic Usage](https://github.com/matplotlib/mplfinance#usage)**\n    - **[Adding Your Own Technical Studies to Plots](https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb)**\n    - **[Saving the Plot to a File](https://github.com/matplotlib/mplfinance/blob/master/examples/savefig.ipynb)**\n    - **[Customizing the Appearance of Plots](https://github.com/matplotlib/mplfinance/blob/master/examples/customization_and_styles.ipynb)**\n    - **[Price-Movement Plots (Renko, P&F, etc)](https://github.com/matplotlib/mplfinance/blob/master/examples/price-movement_plots.ipynb)**\n    - **[Trends, Support, Resistance, and Trading Lines](https://github.com/matplotlib/mplfinance/blob/master/examples/using_lines.ipynb)**\n  - **[Latest Release Info](https://github.com/matplotlib/mplfinance/blob/master/RELEASE_NOTES.md)**\n  - **[Some Background History About This Package](https://github.com/matplotlib/mplfinance#history)**\n  - **[Old API Availability](https://github.com/matplotlib/mplfinance#oldapi)**\n\n---\n## <a name=\"newapi\"></a>The New API\n\nThis repository, `matplotlib/mplfinance`, contains a new **matplotlib finance** API that makes it easier to create financial plots.  It interfaces nicely with **Pandas** DataFrames.  \n\n*More importantly, **the new API automatically does the extra matplotlib work that the user previously had to do \"manually\" with the old API.***   (The old API is still available within this package; see below).\n\nThe conventional way to import the new API is as follows:\n\n```python\n    import mplfinance as mpf\n```\n\nThe most common usage is then to call\n\n```python\n    mpf.plot(data)\n```\n\nwhere `data` is a `Pandas DataFrame` object containing Open, High, Low and Close data, with a Pandas `DatetimeIndex`.\n\nDetails on how to call the new API can be found below under **[Basic Usage](https://github.com/matplotlib/mplfinance#usage)**, as well as in the jupyter notebooks in the **[examples](https://github.com/matplotlib/mplfinance/blob/master/examples/)** folder.\n\nI am very interested to hear from you regarding what you think of the new `mplfinance`, plus any suggestions you may have for improvement.  You can reach me at **dgoldfarb.github@gmail.com**  or, if you prefer, provide feedback or a ask question on our **[issues page.](https://github.com/matplotlib/mplfinance/issues/new/choose)**\n\n---\n\n# <a name=\"usage\"></a>Basic Usage\nStart with a Pandas DataFrame containing OHLC data.  For example,\n\n\n```python\nimport pandas as pd\ndaily = pd.read_csv('examples/data/SP500_NOV2019_Hist.csv',index_col=0,parse_dates=True)\ndaily.index.name = 'Date'\ndaily.shape\ndaily.head(3)\ndaily.tail(3)\n```\n\n    (20, 5)\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-11-01</th>\n      <td>3050.72</td>\n      <td>3066.95</td>\n      <td>3050.72</td>\n      <td>3066.91</td>\n      <td>510301237</td>\n    </tr>\n    <tr>\n      <th>2019-11-04</th>\n      <td>3078.96</td>\n      <td>3085.20</td>\n      <td>3074.87</td>\n      <td>3078.27</td>\n      <td>524848878</td>\n    </tr>\n    <tr>\n      <th>2019-11-05</th>\n      <td>3080.80</td>\n      <td>3083.95</td>\n      <td>3072.15</td>\n      <td>3074.62</td>\n      <td>585634570</td>\n    </tr>\n  </tbody>\n</table>\n\n...\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-11-26</th>\n      <td>3134.85</td>\n      <td>3142.69</td>\n      <td>3131.00</td>\n      <td>3140.52</td>\n      <td>986041660</td>\n    </tr>\n    <tr>\n      <th>2019-11-27</th>\n      <td>3145.49</td>\n      <td>3154.26</td>\n      <td>3143.41</td>\n      <td>3153.63</td>\n      <td>421853938</td>\n    </tr>\n    <tr>\n      <th>2019-11-29</th>\n      <td>3147.18</td>\n      <td>3150.30</td>\n      <td>3139.34</td>\n      <td>3140.98</td>\n      <td>286602291</td>\n    </tr>\n  </tbody>\n</table>\n\n\n---\n<br>\n\nAfter importing mplfinance, plotting OHLC data is as simple as calling `mpf.plot()` on the dataframe\n\n\n```python\nimport mplfinance as mpf\nmpf.plot(daily)\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_4_1.png)\n\n\n---\n<br>\n\nThe default plot type, as you can see above, is `'ohlc'`.  Other plot types can be specified with the keyword argument `type`, for example, `type='candle'`, `type='line'`, `type='renko'`, or `type='pnf'`\n\n\n```python\nmpf.plot(daily,type='candle')\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_6_1.png)\n\n\n\n```python\nmpf.plot(daily,type='line')\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_7_1.png)\n\n\n\n```python\nyear = pd.read_csv('examples/data/SPY_20110701_20120630_Bollinger.csv',index_col=0,parse_dates=True)\nyear.index.name = 'Date'\nmpf.plot(year,type='renko')\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_8_1.png)\n\n\n```python\nmpf.plot(year,type='pnf')\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_5_1.png)\n\n---\n<br>\n\nWe can also plot moving averages with the `mav` keyword\n- use a scalar for a single moving average \n- use a tuple or list of integers for multiple moving averages\n\n\n```python\nmpf.plot(daily,type='ohlc',mav=4)\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_9_1.png)\n\n\n\n```python\nmpf.plot(daily,type='candle',mav=(3,6,9))\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_10_1.png)\n\n\n---\nWe can also display `Volume`\n\n\n```python\nmpf.plot(daily,type='candle',mav=(3,6,9),volume=True)\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_12_1.png)\n\n\nNotice, in the above chart, there are no gaps along the x-coordinate, even though there are days on which there was no trading.  ***Non-trading days are simply not shown*** (since there are no prices for those days).\n\n- However, sometimes people like to see these gaps, so that they can tell, with a quick glance, where the weekends and holidays fall.  \n\n- Non-trading days can be displayed with the `show_nontrading` keyword.\n- For example, in the chart below, you can easily see weekends, as well as a gap at Thursday, November 28th for the U.S. Thanksgiving holiday.\n\n\n```python\nmpf.plot(daily,type='candle',mav=(3,6,9),volume=True,show_nontrading=True)\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_14_1.png)\n\n\n---\n\nWe can also plot intraday data:\n\n\n```python\nintraday = pd.read_csv('examples/data/SP500_NOV2019_IDay.csv',index_col=0,parse_dates=True)\nintraday = intraday.drop('Volume',axis=1) # Volume is zero anyway for this intraday data set\nintraday.index.name = 'Date'\nintraday.shape\nintraday.head(3)\nintraday.tail(3)\n```\n\n    (1563, 4)\n\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>Close</th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-11-05 09:30:00</th>\n      <td>3080.80</td>\n      <td>3080.49</td>\n      <td>3081.47</td>\n      <td>3080.30</td>\n    </tr>\n    <tr>\n      <th>2019-11-05 09:31:00</th>\n      <td>3080.33</td>\n      <td>3079.36</td>\n      <td>3080.33</td>\n      <td>3079.15</td>\n    </tr>\n    <tr>\n      <th>2019-11-05 09:32:00</th>\n      <td>3079.43</td>\n      <td>3079.68</td>\n      <td>3080.46</td>\n      <td>3079.43</td>\n    </tr>\n  </tbody>\n</table>\n\n...\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>Close</th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-11-08 15:57:00</th>\n      <td>3090.73</td>\n      <td>3090.70</td>\n      <td>3091.02</td>\n      <td>3090.52</td>\n    </tr>\n    <tr>\n      <th>2019-11-08 15:58:00</th>\n      <td>3090.73</td>\n      <td>3091.04</td>\n      <td>3091.13</td>\n      <td>3090.58</td>\n    </tr>\n    <tr>\n      <th>2019-11-08 15:59:00</th>\n      <td>3091.16</td>\n      <td>3092.91</td>\n      <td>3092.91</td>\n      <td>3090.96</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\nThe above dataframe contains Open,High,Low,Close data at 1 minute intervervals for the S&P 500 stock index for November 5, 6, 7 and 8, 2019.  Let's look at the last hour of trading on November 6th, with a 7 minute and 12 minute moving average.\n\n\n```python\niday = intraday.loc['2019-11-06 15:00':'2019-11-06 16:00',:]\nmpf.plot(iday,type='candle',mav=(7,12))\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_18_1.png)\n\n\n  The \"time-interpretation\" of the `mav` integers depends on the frequency of the data, because the mav integers are the *number of data points* used in the Moving Average (not the number of days or minutes, etc).  Notice above that for intraday data the x-axis automatically displays TIME *instead of* date.  Below we see that if the intraday data spans into two (or more) trading days the x-axis automatically displays *BOTH* TIME and DATE\n\n\n```python\niday = intraday.loc['2019-11-05':'2019-11-06',:]\nmpf.plot(iday,type='candle')\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_20_1.png)\n\n\n---\nIn the plot below, we see what an intraday plot looks like when we **display non-trading time periods** with **`show_nontrading=True`** for intraday data spanning into two or more days.\n\n\n```python\nmpf.plot(iday,type='candle',show_nontrading=True)\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_22_1.png)\n\n\n---\nBelow: 4 days of intraday data with `show_nontrading=True`\n\n\n```python\nmpf.plot(intraday,type='ohlc',show_nontrading=True)\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_24_1.png)\n\n\n---\nBelow: the same 4 days of intraday data with `show_nontrading` defaulted to `False`.\n\n\n```python\nmpf.plot(intraday,type='line') \n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_26_1.png)\n\n\n---\nBelow: Daily data spanning across a year boundary automatically adds the *YEAR* to the DATE format\n\n\n```python\ndf = pd.read_csv('examples/data/yahoofinance-SPY-20080101-20180101.csv',index_col=0,parse_dates=True)\ndf.shape\ndf.head(3)\ndf.tail(3)\n```\n\n    (2519, 6)\n\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2007-12-31</th>\n      <td>147.100006</td>\n      <td>147.610001</td>\n      <td>146.059998</td>\n      <td>146.210007</td>\n      <td>118.624741</td>\n      <td>108126800</td>\n    </tr>\n    <tr>\n      <th>2008-01-02</th>\n      <td>146.529999</td>\n      <td>146.990005</td>\n      <td>143.880005</td>\n      <td>144.929993</td>\n      <td>117.586205</td>\n      <td>204935600</td>\n    </tr>\n    <tr>\n      <th>2008-01-03</th>\n      <td>144.910004</td>\n      <td>145.490005</td>\n      <td>144.070007</td>\n      <td>144.860001</td>\n      <td>117.529449</td>\n      <td>125133300</td>\n    </tr>\n  </tbody>\n</table>\n\n...\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-12-27</th>\n      <td>267.380005</td>\n      <td>267.730011</td>\n      <td>267.010010</td>\n      <td>267.320007</td>\n      <td>267.320007</td>\n      <td>57751000</td>\n    </tr>\n    <tr>\n      <th>2017-12-28</th>\n      <td>267.890015</td>\n      <td>267.920013</td>\n      <td>267.450012</td>\n      <td>267.869995</td>\n      <td>267.869995</td>\n      <td>45116100</td>\n    </tr>\n    <tr>\n      <th>2017-12-29</th>\n      <td>268.529999</td>\n      <td>268.549988</td>\n      <td>266.640015</td>\n      <td>266.859985</td>\n      <td>266.859985</td>\n      <td>96007400</td>\n    </tr>\n  </tbody>\n</table>\n\n\n```python\nmpf.plot(df[700:850],type='bars',volume=True,mav=(20,40))\n```\n\n\n![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_29_1.png)\n\n\nFor more examples of using mplfinance, please see the jupyter notebooks in the **[`examples`](https://github.com/matplotlib/mplfinance/blob/master/examples/)** directory.\n\n---\n\n## <a name=\"history\"></a>Some History\nMy name is Daniel Goldfarb.  In November 2019, I became the maintainer of `matplotlib/mpl-finance`.  That module is being deprecated in favor of the current `matplotlib/mplfinance`.  The old `mpl-finance` consisted of code extracted from the deprecated `matplotlib.finance` module along with a few examples of usage.  It has been mostly un-maintained for the past three years.  \n\nIt is my intention to archive the `matplotlib/mpl-finance` repository soon, and direct everyone to `matplotlib/mplfinance`.  The main reason for the rename is to avoid confusion with the hyphen and the underscore: As it was, `mpl-finance` was *installed with the hyphen, but imported with an underscore `mpl_finance`.*  Going forward it will be a simple matter of both installing and importing `mplfinance`.\n\n---\n### <a name=\"oldapi\"></a>old API availability\n\n**With this new ` mplfinance ` package installed, in addition to the new API, users can still access the old API**.<br> The old API may be removed some day, but for the foreseeable future we will keep it ... at least until we are very confident that users of the old API can accomplish the same things with the new API.\n\n---\n\nTo access the old API with the new ` mplfinance ` package installed, change the old import statments\n\n**from:**\n\n```python\n    from mpl_finance import <method>\n```\n\n**to:**\n\n```python\n    from mplfinance.original_flavor import <method>\n```\n\n\nwhere `<method>` indicates the method you want to import, for example:\n\n\n\n```python\n    from mplfinance.original_flavor import candlestick_ohlc\n```\n\n---\n\n\n```python\n\n```\n\n\n", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/matplotlib/mplfinance", "keywords": "finance,candlestick,ohlc,market,investing,technical analysis", "license": "BSD-style", "maintainer": "", "maintainer_email": "dgoldfarb.github@gmail.com", "name": "mplfinance", "package_url": "https://pypi.org/project/mplfinance/", "platform": "Cross platform (Linux", "project_url": "https://pypi.org/project/mplfinance/", "project_urls": {"Homepage": "http://github.com/matplotlib/mplfinance"}, "release_url": "https://pypi.org/project/mplfinance/0.12.4a0/", "requires_dist": ["matplotlib", "pandas"], "requires_python": "", "summary": "Utilities for the visualization, and visual analysis, of financial data", "version": "0.12.4a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/matplotlib/mplfinance\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39a2a690912059266c21efd1ecf92ee95672bee6/68747470733a2f2f7472617669732d63692e6f72672f6d6174706c6f746c69622f6d706c66696e616e63652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>mplfinance</h1>\n<h2>matplotlib utilities for the visualization, and visual analysis, of financial data</h2>\n<hr>\n<h1>Installation</h1>\n<h2>\u00a0\u00a0\u00a0<code>pip install --upgrade mplfinance</code></h2>\n<ul>\n<li>mplfinance requires <a href=\"https://pypi.org/project/matplotlib/\" rel=\"nofollow\">matplotlib</a> and <a href=\"https://pypi.org/project/pandas/\" rel=\"nofollow\">pandas</a></li>\n</ul>\n<hr>\n<h1><a></a>Contents and Tutorials</h1>\n<ul>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance#newapi\" rel=\"nofollow\">The New API</a></strong></li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance#tutorials\" rel=\"nofollow\">Tutorials</a></strong>\n<ul>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance#usage\" rel=\"nofollow\">Basic Usage</a></strong></li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb\" rel=\"nofollow\">Adding Your Own Technical Studies to Plots</a></strong></li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance/blob/master/examples/savefig.ipynb\" rel=\"nofollow\">Saving the Plot to a File</a></strong></li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance/blob/master/examples/customization_and_styles.ipynb\" rel=\"nofollow\">Customizing the Appearance of Plots</a></strong></li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance/blob/master/examples/price-movement_plots.ipynb\" rel=\"nofollow\">Price-Movement Plots (Renko, P&amp;F, etc)</a></strong></li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance/blob/master/examples/using_lines.ipynb\" rel=\"nofollow\">Trends, Support, Resistance, and Trading Lines</a></strong></li>\n</ul>\n</li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance/blob/master/RELEASE_NOTES.md\" rel=\"nofollow\">Latest Release Info</a></strong></li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance#history\" rel=\"nofollow\">Some Background History About This Package</a></strong></li>\n<li><strong><a href=\"https://github.com/matplotlib/mplfinance#oldapi\" rel=\"nofollow\">Old API Availability</a></strong></li>\n</ul>\n<hr>\n<h2><a></a>The New API</h2>\n<p>This repository, <code>matplotlib/mplfinance</code>, contains a new <strong>matplotlib finance</strong> API that makes it easier to create financial plots.  It interfaces nicely with <strong>Pandas</strong> DataFrames.</p>\n<p><em>More importantly, <strong>the new API automatically does the extra matplotlib work that the user previously had to do \"manually\" with the old API.</strong></em>   (The old API is still available within this package; see below).</p>\n<p>The conventional way to import the new API is as follows:</p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">mplfinance</span> <span class=\"k\">as</span> <span class=\"nn\">mpf</span>\n</pre>\n<p>The most common usage is then to call</p>\n<pre>    <span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>where <code>data</code> is a <code>Pandas DataFrame</code> object containing Open, High, Low and Close data, with a Pandas <code>DatetimeIndex</code>.</p>\n<p>Details on how to call the new API can be found below under <strong><a href=\"https://github.com/matplotlib/mplfinance#usage\" rel=\"nofollow\">Basic Usage</a></strong>, as well as in the jupyter notebooks in the <strong><a href=\"https://github.com/matplotlib/mplfinance/blob/master/examples/\" rel=\"nofollow\">examples</a></strong> folder.</p>\n<p>I am very interested to hear from you regarding what you think of the new <code>mplfinance</code>, plus any suggestions you may have for improvement.  You can reach me at <strong><a href=\"mailto:dgoldfarb.github@gmail.com\">dgoldfarb.github@gmail.com</a></strong>  or, if you prefer, provide feedback or a ask question on our <strong><a href=\"https://github.com/matplotlib/mplfinance/issues/new/choose\" rel=\"nofollow\">issues page.</a></strong></p>\n<hr>\n<h1><a></a>Basic Usage</h1>\n<p>Start with a Pandas DataFrame containing OHLC data.  For example,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">daily</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'examples/data/SP500_NOV2019_Hist.csv'</span><span class=\"p\">,</span><span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">daily</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Date'</span>\n<span class=\"n\">daily</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">daily</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">daily</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(20, 5)\n</code></pre>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-11-01</th>\n      <td>3050.72</td>\n      <td>3066.95</td>\n      <td>3050.72</td>\n      <td>3066.91</td>\n      <td>510301237</td>\n    </tr>\n    <tr>\n      <th>2019-11-04</th>\n      <td>3078.96</td>\n      <td>3085.20</td>\n      <td>3074.87</td>\n      <td>3078.27</td>\n      <td>524848878</td>\n    </tr>\n    <tr>\n      <th>2019-11-05</th>\n      <td>3080.80</td>\n      <td>3083.95</td>\n      <td>3072.15</td>\n      <td>3074.62</td>\n      <td>585634570</td>\n    </tr>\n  </tbody>\n</table>\n<p>...</p>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-11-26</th>\n      <td>3134.85</td>\n      <td>3142.69</td>\n      <td>3131.00</td>\n      <td>3140.52</td>\n      <td>986041660</td>\n    </tr>\n    <tr>\n      <th>2019-11-27</th>\n      <td>3145.49</td>\n      <td>3154.26</td>\n      <td>3143.41</td>\n      <td>3153.63</td>\n      <td>421853938</td>\n    </tr>\n    <tr>\n      <th>2019-11-29</th>\n      <td>3147.18</td>\n      <td>3150.30</td>\n      <td>3139.34</td>\n      <td>3140.98</td>\n      <td>286602291</td>\n    </tr>\n  </tbody>\n</table>\n<hr>\n<br>\n<p>After importing mplfinance, plotting OHLC data is as simple as calling <code>mpf.plot()</code> on the dataframe</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mplfinance</span> <span class=\"k\">as</span> <span class=\"nn\">mpf</span>\n<span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">daily</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4d1eccc8b8fb3e14e67d5c5183e026f89fab128/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f345f312e706e67\"></p>\n<hr>\n<br>\n<p>The default plot type, as you can see above, is <code>'ohlc'</code>.  Other plot types can be specified with the keyword argument <code>type</code>, for example, <code>type='candle'</code>, <code>type='line'</code>, <code>type='renko'</code>, or <code>type='pnf'</code></p>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">daily</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'candle'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c39a68cb8914b60fa414d32b34b5f9ff113272a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f365f312e706e67\"></p>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">daily</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'line'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ce623df65206043364118ba2960b49215f83093/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f375f312e706e67\"></p>\n<pre><span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'examples/data/SPY_20110701_20120630_Bollinger.csv'</span><span class=\"p\">,</span><span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">year</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Date'</span>\n<span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'renko'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/307bd9134129e3c28f169fca67b1e2c57580901e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f385f312e706e67\"></p>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'pnf'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2eef488041318b91812c34c5bbdbc1a17c1493e9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f355f312e706e67\"></p>\n<hr>\n<br>\n<p>We can also plot moving averages with the <code>mav</code> keyword</p>\n<ul>\n<li>use a scalar for a single moving average</li>\n<li>use a tuple or list of integers for multiple moving averages</li>\n</ul>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">daily</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'ohlc'</span><span class=\"p\">,</span><span class=\"n\">mav</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ab748c7a50e9683c9ed090c6e420c0f10c5723a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f395f312e706e67\"></p>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">daily</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'candle'</span><span class=\"p\">,</span><span class=\"n\">mav</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/602e5eca1444dde3bef560561797fdccc3ebb3bf/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f31305f312e706e67\"></p>\n<hr>\n<p>We can also display <code>Volume</code></p>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">daily</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'candle'</span><span class=\"p\">,</span><span class=\"n\">mav</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">),</span><span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33fbd0b6affab344cc73a78032b08e6167a2b876/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f31325f312e706e67\"></p>\n<p>Notice, in the above chart, there are no gaps along the x-coordinate, even though there are days on which there was no trading.  <em><strong>Non-trading days are simply not shown</strong></em> (since there are no prices for those days).</p>\n<ul>\n<li>\n<p>However, sometimes people like to see these gaps, so that they can tell, with a quick glance, where the weekends and holidays fall.</p>\n</li>\n<li>\n<p>Non-trading days can be displayed with the <code>show_nontrading</code> keyword.</p>\n</li>\n<li>\n<p>For example, in the chart below, you can easily see weekends, as well as a gap at Thursday, November 28th for the U.S. Thanksgiving holiday.</p>\n</li>\n</ul>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">daily</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'candle'</span><span class=\"p\">,</span><span class=\"n\">mav</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">),</span><span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"n\">show_nontrading</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86ecf5e214b6ad62bb59080f7fda0e878923162c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f31345f312e706e67\"></p>\n<hr>\n<p>We can also plot intraday data:</p>\n<pre><span class=\"n\">intraday</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'examples/data/SP500_NOV2019_IDay.csv'</span><span class=\"p\">,</span><span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">intraday</span> <span class=\"o\">=</span> <span class=\"n\">intraday</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"s1\">'Volume'</span><span class=\"p\">,</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Volume is zero anyway for this intraday data set</span>\n<span class=\"n\">intraday</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Date'</span>\n<span class=\"n\">intraday</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">intraday</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">intraday</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(1563, 4)\n</code></pre>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Open</th>\n      <th>Close</th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-11-05 09:30:00</th>\n      <td>3080.80</td>\n      <td>3080.49</td>\n      <td>3081.47</td>\n      <td>3080.30</td>\n    </tr>\n    <tr>\n      <th>2019-11-05 09:31:00</th>\n      <td>3080.33</td>\n      <td>3079.36</td>\n      <td>3080.33</td>\n      <td>3079.15</td>\n    </tr>\n    <tr>\n      <th>2019-11-05 09:32:00</th>\n      <td>3079.43</td>\n      <td>3079.68</td>\n      <td>3080.46</td>\n      <td>3079.43</td>\n    </tr>\n  </tbody>\n</table>\n<p>...</p>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Open</th>\n      <th>Close</th>\n      <th>High</th>\n      <th>Low</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-11-08 15:57:00</th>\n      <td>3090.73</td>\n      <td>3090.70</td>\n      <td>3091.02</td>\n      <td>3090.52</td>\n    </tr>\n    <tr>\n      <th>2019-11-08 15:58:00</th>\n      <td>3090.73</td>\n      <td>3091.04</td>\n      <td>3091.13</td>\n      <td>3090.58</td>\n    </tr>\n    <tr>\n      <th>2019-11-08 15:59:00</th>\n      <td>3091.16</td>\n      <td>3092.91</td>\n      <td>3092.91</td>\n      <td>3090.96</td>\n    </tr>\n  </tbody>\n</table>\n<p>The above dataframe contains Open,High,Low,Close data at 1 minute intervervals for the S&amp;P 500 stock index for November 5, 6, 7 and 8, 2019.  Let's look at the last hour of trading on November 6th, with a 7 minute and 12 minute moving average.</p>\n<pre><span class=\"n\">iday</span> <span class=\"o\">=</span> <span class=\"n\">intraday</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"s1\">'2019-11-06 15:00'</span><span class=\"p\">:</span><span class=\"s1\">'2019-11-06 16:00'</span><span class=\"p\">,:]</span>\n<span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">iday</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'candle'</span><span class=\"p\">,</span><span class=\"n\">mav</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/627c341641e4c78fbc1829c9de8b8aeac7ff84b2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f31385f312e706e67\"></p>\n<p>The \"time-interpretation\" of the <code>mav</code> integers depends on the frequency of the data, because the mav integers are the <em>number of data points</em> used in the Moving Average (not the number of days or minutes, etc).  Notice above that for intraday data the x-axis automatically displays TIME <em>instead of</em> date.  Below we see that if the intraday data spans into two (or more) trading days the x-axis automatically displays <em>BOTH</em> TIME and DATE</p>\n<pre><span class=\"n\">iday</span> <span class=\"o\">=</span> <span class=\"n\">intraday</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"s1\">'2019-11-05'</span><span class=\"p\">:</span><span class=\"s1\">'2019-11-06'</span><span class=\"p\">,:]</span>\n<span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">iday</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'candle'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec4d802e39dc9abd529ee67b39f6a7fa37549498/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f32305f312e706e67\"></p>\n<hr>\n<p>In the plot below, we see what an intraday plot looks like when we <strong>display non-trading time periods</strong> with <strong><code>show_nontrading=True</code></strong> for intraday data spanning into two or more days.</p>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">iday</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'candle'</span><span class=\"p\">,</span><span class=\"n\">show_nontrading</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/520f181cd6a77622e1fb884d21dc8a025d011530/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f32325f312e706e67\"></p>\n<hr>\n<p>Below: 4 days of intraday data with <code>show_nontrading=True</code></p>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">intraday</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'ohlc'</span><span class=\"p\">,</span><span class=\"n\">show_nontrading</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/feab74e664fb23ff90671f1c2961efe14a984e0e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f32345f312e706e67\"></p>\n<hr>\n<p>Below: the same 4 days of intraday data with <code>show_nontrading</code> defaulted to <code>False</code>.</p>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">intraday</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'line'</span><span class=\"p\">)</span> \n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43f0a355f067b921c9d95add35b46070a65a057e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f32365f312e706e67\"></p>\n<hr>\n<p>Below: Daily data spanning across a year boundary automatically adds the <em>YEAR</em> to the DATE format</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'examples/data/yahoofinance-SPY-20080101-20180101.csv'</span><span class=\"p\">,</span><span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(2519, 6)\n</code></pre>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2007-12-31</th>\n      <td>147.100006</td>\n      <td>147.610001</td>\n      <td>146.059998</td>\n      <td>146.210007</td>\n      <td>118.624741</td>\n      <td>108126800</td>\n    </tr>\n    <tr>\n      <th>2008-01-02</th>\n      <td>146.529999</td>\n      <td>146.990005</td>\n      <td>143.880005</td>\n      <td>144.929993</td>\n      <td>117.586205</td>\n      <td>204935600</td>\n    </tr>\n    <tr>\n      <th>2008-01-03</th>\n      <td>144.910004</td>\n      <td>145.490005</td>\n      <td>144.070007</td>\n      <td>144.860001</td>\n      <td>117.529449</td>\n      <td>125133300</td>\n    </tr>\n  </tbody>\n</table>\n<p>...</p>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-12-27</th>\n      <td>267.380005</td>\n      <td>267.730011</td>\n      <td>267.010010</td>\n      <td>267.320007</td>\n      <td>267.320007</td>\n      <td>57751000</td>\n    </tr>\n    <tr>\n      <th>2017-12-28</th>\n      <td>267.890015</td>\n      <td>267.920013</td>\n      <td>267.450012</td>\n      <td>267.869995</td>\n      <td>267.869995</td>\n      <td>45116100</td>\n    </tr>\n    <tr>\n      <th>2017-12-29</th>\n      <td>268.529999</td>\n      <td>268.549988</td>\n      <td>266.640015</td>\n      <td>266.859985</td>\n      <td>266.859985</td>\n      <td>96007400</td>\n    </tr>\n  </tbody>\n</table>\n<pre><span class=\"n\">mpf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"mi\">700</span><span class=\"p\">:</span><span class=\"mi\">850</span><span class=\"p\">],</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'bars'</span><span class=\"p\">,</span><span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"n\">mav</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">40</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6516d45108653175786658e6a7037096dc2e1723/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6174706c6f746c69622f6d706c66696e616e63652f6d61737465722f726561646d655f66696c65732f726561646d655f32395f312e706e67\"></p>\n<p>For more examples of using mplfinance, please see the jupyter notebooks in the <strong><a href=\"https://github.com/matplotlib/mplfinance/blob/master/examples/\" rel=\"nofollow\"><code>examples</code></a></strong> directory.</p>\n<hr>\n<h2><a></a>Some History</h2>\n<p>My name is Daniel Goldfarb.  In November 2019, I became the maintainer of <code>matplotlib/mpl-finance</code>.  That module is being deprecated in favor of the current <code>matplotlib/mplfinance</code>.  The old <code>mpl-finance</code> consisted of code extracted from the deprecated <code>matplotlib.finance</code> module along with a few examples of usage.  It has been mostly un-maintained for the past three years.</p>\n<p>It is my intention to archive the <code>matplotlib/mpl-finance</code> repository soon, and direct everyone to <code>matplotlib/mplfinance</code>.  The main reason for the rename is to avoid confusion with the hyphen and the underscore: As it was, <code>mpl-finance</code> was <em>installed with the hyphen, but imported with an underscore <code>mpl_finance</code>.</em>  Going forward it will be a simple matter of both installing and importing <code>mplfinance</code>.</p>\n<hr>\n<h3><a></a>old API availability</h3>\n<p><strong>With this new <code>mplfinance</code> package installed, in addition to the new API, users can still access the old API</strong>.<br> The old API may be removed some day, but for the foreseeable future we will keep it ... at least until we are very confident that users of the old API can accomplish the same things with the new API.</p>\n<hr>\n<p>To access the old API with the new <code>mplfinance</code> package installed, change the old import statments</p>\n<p><strong>from:</strong></p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">mpl_finance</span> <span class=\"kn\">import</span> <span class=\"o\">&lt;</span><span class=\"n\">method</span><span class=\"o\">&gt;</span>\n</pre>\n<p><strong>to:</strong></p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">mplfinance.original_flavor</span> <span class=\"kn\">import</span> <span class=\"o\">&lt;</span><span class=\"n\">method</span><span class=\"o\">&gt;</span>\n</pre>\n<p>where <code>&lt;method&gt;</code> indicates the method you want to import, for example:</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">mplfinance.original_flavor</span> <span class=\"kn\">import</span> <span class=\"n\">candlestick_ohlc</span>\n</pre>\n<hr>\n<pre></pre>\n\n          </div>"}, "last_serial": 7138576, "releases": {"0.11.1a0": [{"comment_text": "", "digests": {"md5": "3dd56455b9d2f727099a55ae190a76c7", "sha256": "3a53d86875cac888212a3bf3913575cebcc1793d00795f79c4c5d1ff2b5c39dd"}, "downloads": -1, "filename": "mplfinance-0.11.1a0-py3-none-any.whl", "has_sig": false, "md5_digest": "3dd56455b9d2f727099a55ae190a76c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18613, "upload_time": "2019-12-24T16:29:17", "upload_time_iso_8601": "2019-12-24T16:29:17.563799Z", "url": "https://files.pythonhosted.org/packages/32/d4/3677bdc2a874e8ffc8de16a76c72cefd4e762e3c9b0bfb521b0a0f5d1e54/mplfinance-0.11.1a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b677f9548bc77e4c4574789a92a7ef4e", "sha256": "7388cdd1f00ae10401a452e240d9897b8b3b22bbf10cc9ea86076e22d91d2228"}, "downloads": -1, "filename": "mplfinance-0.11.1a0.tar.gz", "has_sig": false, "md5_digest": "b677f9548bc77e4c4574789a92a7ef4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16862, "upload_time": "2019-12-24T16:29:20", "upload_time_iso_8601": "2019-12-24T16:29:20.022979Z", "url": "https://files.pythonhosted.org/packages/a5/45/20662b2e477de58df524be2550441a45107f7272898c39972a738c0ccb6e/mplfinance-0.11.1a0.tar.gz", "yanked": false}], "0.11.1a1": [{"comment_text": "", "digests": {"md5": "edf48168b2650779f8ab27de28c46317", "sha256": "fdc70e4dbda776e9fa7d366b8c85b99e0916347960d970e5fc3247d914988542"}, "downloads": -1, "filename": "mplfinance-0.11.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "edf48168b2650779f8ab27de28c46317", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18665, "upload_time": "2020-01-01T21:08:37", "upload_time_iso_8601": "2020-01-01T21:08:37.220333Z", "url": "https://files.pythonhosted.org/packages/10/b3/9a3bb38b2d3ebd8515b1bf585f46175d3e898769284921e422359a643abd/mplfinance-0.11.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a095b9ce9e1ad5fa879bd9407d641817", "sha256": "e6221c6e8c4250dce67a92c841ba0c4402eb8aca130958cd0e48a9dc68afdce7"}, "downloads": -1, "filename": "mplfinance-0.11.1a1.tar.gz", "has_sig": false, "md5_digest": "a095b9ce9e1ad5fa879bd9407d641817", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16910, "upload_time": "2020-01-01T21:08:40", "upload_time_iso_8601": "2020-01-01T21:08:40.025375Z", "url": "https://files.pythonhosted.org/packages/af/db/9f6049d184ac808c1d4de3f21de2d0d71a0514f4ef8013584024af6f1d1c/mplfinance-0.11.1a1.tar.gz", "yanked": false}], "0.12.0a0": [{"comment_text": "", "digests": {"md5": "7bff5631e5276a93d51ea463d85f8b00", "sha256": "cd4ec6e4871e2b16621fb7e6a61582210606e9afb1f641765514a15728e7f4dd"}, "downloads": -1, "filename": "mplfinance-0.12.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "7bff5631e5276a93d51ea463d85f8b00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20957, "upload_time": "2020-01-09T03:07:38", "upload_time_iso_8601": "2020-01-09T03:07:38.458777Z", "url": "https://files.pythonhosted.org/packages/8c/b5/38c2ed3b5b384124ee0e0d0c78648a78fe9d962d5263dab74e59c5983d53/mplfinance-0.12.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "364d6d4628568f583b2dcbcb07f3907b", "sha256": "0de2ed273b29d588f3011bd230e4b62972f0e2215fe8ba75e8cf4cea5a2609a7"}, "downloads": -1, "filename": "mplfinance-0.12.0a0.tar.gz", "has_sig": false, "md5_digest": "364d6d4628568f583b2dcbcb07f3907b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18930, "upload_time": "2020-01-09T03:07:40", "upload_time_iso_8601": "2020-01-09T03:07:40.366784Z", "url": "https://files.pythonhosted.org/packages/b4/1b/2055e9ef34cec30236d1820ff31a7d62f6571fe9af39e1bcb96ab59cc816/mplfinance-0.12.0a0.tar.gz", "yanked": false}], "0.12.0a1": [{"comment_text": "", "digests": {"md5": "01cd1698fb1810093bfe26a7b86bd672", "sha256": "ac9c1ecabf6eb73e77dd81a61244dfb995b012d3b683f403e4e85e947d0aef06"}, "downloads": -1, "filename": "mplfinance-0.12.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "01cd1698fb1810093bfe26a7b86bd672", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20835, "upload_time": "2020-01-10T14:46:48", "upload_time_iso_8601": "2020-01-10T14:46:48.802085Z", "url": "https://files.pythonhosted.org/packages/69/e9/94641253054dd6812c300f9cf8b1fccba8010646932ca2e9524fdab8e05f/mplfinance-0.12.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd4eeeb8e18acdd93e25d707084abac1", "sha256": "19c57361c306a7661c0f63b584c2028cf70e2b7cba2ec82a6fe3228626183aef"}, "downloads": -1, "filename": "mplfinance-0.12.0a1.tar.gz", "has_sig": false, "md5_digest": "cd4eeeb8e18acdd93e25d707084abac1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18820, "upload_time": "2020-01-10T14:46:50", "upload_time_iso_8601": "2020-01-10T14:46:50.923923Z", "url": "https://files.pythonhosted.org/packages/cf/9a/a02362c870464988b4c7b18ff0e4cfa6666d9c8584b197b8a391df331361/mplfinance-0.12.0a1.tar.gz", "yanked": false}], "0.12.0a2": [{"comment_text": "", "digests": {"md5": "4f337531b04ac88b2a4a3f54ee0f07af", "sha256": "24d3c2717fc7c6e34aed90a2b374a7b82ca6eaad37c32c33cf777648c9dff43c"}, "downloads": -1, "filename": "mplfinance-0.12.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "4f337531b04ac88b2a4a3f54ee0f07af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20987, "upload_time": "2020-01-14T18:54:57", "upload_time_iso_8601": "2020-01-14T18:54:57.502701Z", "url": "https://files.pythonhosted.org/packages/b0/99/c6cc32f5b7ecd62210865fa96fec722a37028744a9d7d61e2959422f0b30/mplfinance-0.12.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4432082b1939d9087de0b38b243cfdd6", "sha256": "63dee70ea714ebbc145417ca7d08b0881dcc37fe0e713aeaa5758a29e96b288c"}, "downloads": -1, "filename": "mplfinance-0.12.0a2.tar.gz", "has_sig": false, "md5_digest": "4432082b1939d9087de0b38b243cfdd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18978, "upload_time": "2020-01-14T18:54:59", "upload_time_iso_8601": "2020-01-14T18:54:59.412605Z", "url": "https://files.pythonhosted.org/packages/69/c9/2a4b8ffc976c543367113c8b84d25310fcbcd0351ce60b45047ae79aaef0/mplfinance-0.12.0a2.tar.gz", "yanked": false}], "0.12.0a3": [{"comment_text": "", "digests": {"md5": "008accb0a5620d55c923e11736a53051", "sha256": "650454da3ed5ee9a24a1d3307eebfce32f83bf65bab6ac42e2536bd05cf1982a"}, "downloads": -1, "filename": "mplfinance-0.12.0a3-py3-none-any.whl", "has_sig": false, "md5_digest": "008accb0a5620d55c923e11736a53051", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20993, "upload_time": "2020-01-16T05:22:12", "upload_time_iso_8601": "2020-01-16T05:22:12.076606Z", "url": "https://files.pythonhosted.org/packages/f8/d8/6709e135d5255824d99d178044c368b0c307ee70ffb1dcd049287e0d05a8/mplfinance-0.12.0a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88d3197a72d803c929385d79f182953f", "sha256": "5b47d25fa6113b90f291b4d0d9eebf1d39bc9fd5af8967dd678904b866f93a16"}, "downloads": -1, "filename": "mplfinance-0.12.0a3.tar.gz", "has_sig": false, "md5_digest": "88d3197a72d803c929385d79f182953f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19026, "upload_time": "2020-01-16T05:22:14", "upload_time_iso_8601": "2020-01-16T05:22:14.081832Z", "url": "https://files.pythonhosted.org/packages/39/60/7e8d16c8ed0373b3b9659336c3096323057d5e9486abe7d01d183f39a5e1/mplfinance-0.12.0a3.tar.gz", "yanked": false}], "0.12.3a0": [{"comment_text": "", "digests": {"md5": "6e6c96011099b70e6983ac17d9fdbe1c", "sha256": "dbd3592af6d2fdaa0468a922312abedbdd39f1dd45a739206e7d46c6d6810415"}, "downloads": -1, "filename": "mplfinance-0.12.3a0-py3-none-any.whl", "has_sig": false, "md5_digest": "6e6c96011099b70e6983ac17d9fdbe1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32557, "upload_time": "2020-02-12T17:42:00", "upload_time_iso_8601": "2020-02-12T17:42:00.258708Z", "url": "https://files.pythonhosted.org/packages/06/8c/d16162592fcfe28537fbfe915c4ca216ddd8138d5404ccdbf2282f1bd5cf/mplfinance-0.12.3a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f63f86779052d52dbe04a271498a611e", "sha256": "5a36a111955ef5f0cfc52f2d56916ec1d8456d36180112b3f782dc9fcf424144"}, "downloads": -1, "filename": "mplfinance-0.12.3a0.tar.gz", "has_sig": false, "md5_digest": "f63f86779052d52dbe04a271498a611e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25894, "upload_time": "2020-02-12T17:42:01", "upload_time_iso_8601": "2020-02-12T17:42:01.981962Z", "url": "https://files.pythonhosted.org/packages/39/09/8cd49d4f6c45955c223256206bc6d8fe4fbd58e96be3bfa4a36959a90729/mplfinance-0.12.3a0.tar.gz", "yanked": false}], "0.12.3a1": [{"comment_text": "", "digests": {"md5": "68500afa2a12a81b34c43abbc92763ff", "sha256": "d442c0052420b0dff431b77e7f518d003d9b23a18c45036c4295aca3827a4eb0"}, "downloads": -1, "filename": "mplfinance-0.12.3a1-py3-none-any.whl", "has_sig": false, "md5_digest": "68500afa2a12a81b34c43abbc92763ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32125, "upload_time": "2020-02-17T13:58:24", "upload_time_iso_8601": "2020-02-17T13:58:24.560406Z", "url": "https://files.pythonhosted.org/packages/18/5b/3744e2ba9fdd4d6f738beed9f1be9944ec4e9060da4756b26c926fa8f292/mplfinance-0.12.3a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7068e5afdecfd55c5e6cdbde67326b08", "sha256": "f1b12e2dc6c298626f6270a6c27df9a7ff500fa3c7bef0c3cfc8ed586fa3648a"}, "downloads": -1, "filename": "mplfinance-0.12.3a1.tar.gz", "has_sig": false, "md5_digest": "7068e5afdecfd55c5e6cdbde67326b08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25692, "upload_time": "2020-02-17T13:58:26", "upload_time_iso_8601": "2020-02-17T13:58:26.227593Z", "url": "https://files.pythonhosted.org/packages/73/2b/721e9ae4f4bbea5c161dd5fa307f27caf40930424812ca36589a2e5a04b4/mplfinance-0.12.3a1.tar.gz", "yanked": false}], "0.12.3a2": [{"comment_text": "", "digests": {"md5": "b9e2a5660d4483fd0d7d7930f47d3649", "sha256": "22d34d23339f094e3cbf7f4c65062b58bde9b86a20d581281d6cabba85c1ac65"}, "downloads": -1, "filename": "mplfinance-0.12.3a2-py3-none-any.whl", "has_sig": false, "md5_digest": "b9e2a5660d4483fd0d7d7930f47d3649", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32446, "upload_time": "2020-02-21T12:17:22", "upload_time_iso_8601": "2020-02-21T12:17:22.841305Z", "url": "https://files.pythonhosted.org/packages/af/d7/8448e327565ded8d95f10379938fe22ac7f1802aa62478ee8c5c048f3b76/mplfinance-0.12.3a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ab2de89cad36522492ca3884e31c571", "sha256": "6d95561d1237aba762c73add5e9dae9cb8003870a8f6f312c00a8f31055f1b58"}, "downloads": -1, "filename": "mplfinance-0.12.3a2.tar.gz", "has_sig": false, "md5_digest": "4ab2de89cad36522492ca3884e31c571", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25947, "upload_time": "2020-02-21T12:17:24", "upload_time_iso_8601": "2020-02-21T12:17:24.570791Z", "url": "https://files.pythonhosted.org/packages/81/7f/400b66c68685e42f6b7ba1b1110d5ab6d597645e9da30e07afa39afab437/mplfinance-0.12.3a2.tar.gz", "yanked": false}], "0.12.3a3": [{"comment_text": "", "digests": {"md5": "179172c7caffa1d0022bc476e4ff0602", "sha256": "46ae912cb0c35df946810177262c8100365de0c6d0534efc6d101899888ff1ee"}, "downloads": -1, "filename": "mplfinance-0.12.3a3-py3-none-any.whl", "has_sig": false, "md5_digest": "179172c7caffa1d0022bc476e4ff0602", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32557, "upload_time": "2020-03-04T04:11:53", "upload_time_iso_8601": "2020-03-04T04:11:53.241574Z", "url": "https://files.pythonhosted.org/packages/6a/d7/6cf850a7d033e997b6b0f934840b4540d054c26f809d158b33dc94e6d1fb/mplfinance-0.12.3a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edc97f6fc7d874c9e4f99efa8cfd7016", "sha256": "e58e7774664c32f6c8c23f2129fd4fa08e5e2c91471357fe52bf93885046c18e"}, "downloads": -1, "filename": "mplfinance-0.12.3a3.tar.gz", "has_sig": false, "md5_digest": "edc97f6fc7d874c9e4f99efa8cfd7016", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26067, "upload_time": "2020-03-04T04:11:54", "upload_time_iso_8601": "2020-03-04T04:11:54.662201Z", "url": "https://files.pythonhosted.org/packages/cd/dd/b7a9424ac7f5c624e616fe1d254daa07fda5a3d8973b95206ee65f9956d1/mplfinance-0.12.3a3.tar.gz", "yanked": false}], "0.12.4a0": [{"comment_text": "", "digests": {"md5": "3728057592b8b8c7fd027db5201565e2", "sha256": "1111a20f07951e1da8806802398e65d0d98a2832b5b275dfe091f0a41a090a8f"}, "downloads": -1, "filename": "mplfinance-0.12.4a0-py3-none-any.whl", "has_sig": false, "md5_digest": "3728057592b8b8c7fd027db5201565e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42905, "upload_time": "2020-04-30T16:18:21", "upload_time_iso_8601": "2020-04-30T16:18:21.973079Z", "url": "https://files.pythonhosted.org/packages/3b/a7/d74985c7e3143d285c6df9d611b93d1da3d6889320a8af135b0170fd90d8/mplfinance-0.12.4a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ddf716f190b558bbfa51d0d6c33904a", "sha256": "23c76f3ddc6a101fedef0dda21e3e3a3f6a6d7dc41c81111a17d94f793cd27cb"}, "downloads": -1, "filename": "mplfinance-0.12.4a0.tar.gz", "has_sig": false, "md5_digest": "6ddf716f190b558bbfa51d0d6c33904a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36023, "upload_time": "2020-04-30T16:18:23", "upload_time_iso_8601": "2020-04-30T16:18:23.512762Z", "url": "https://files.pythonhosted.org/packages/e0/4a/e3233b018540999cb3eedef40b4ce4c12f41b576689b2691758c7c24068f/mplfinance-0.12.4a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3728057592b8b8c7fd027db5201565e2", "sha256": "1111a20f07951e1da8806802398e65d0d98a2832b5b275dfe091f0a41a090a8f"}, "downloads": -1, "filename": "mplfinance-0.12.4a0-py3-none-any.whl", "has_sig": false, "md5_digest": "3728057592b8b8c7fd027db5201565e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42905, "upload_time": "2020-04-30T16:18:21", "upload_time_iso_8601": "2020-04-30T16:18:21.973079Z", "url": "https://files.pythonhosted.org/packages/3b/a7/d74985c7e3143d285c6df9d611b93d1da3d6889320a8af135b0170fd90d8/mplfinance-0.12.4a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ddf716f190b558bbfa51d0d6c33904a", "sha256": "23c76f3ddc6a101fedef0dda21e3e3a3f6a6d7dc41c81111a17d94f793cd27cb"}, "downloads": -1, "filename": "mplfinance-0.12.4a0.tar.gz", "has_sig": false, "md5_digest": "6ddf716f190b558bbfa51d0d6c33904a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36023, "upload_time": "2020-04-30T16:18:23", "upload_time_iso_8601": "2020-04-30T16:18:23.512762Z", "url": "https://files.pythonhosted.org/packages/e0/4a/e3233b018540999cb3eedef40b4ce4c12f41b576689b2691758c7c24068f/mplfinance-0.12.4a0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:13 2020"}