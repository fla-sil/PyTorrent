{"info": {"author": "Mateusz Bysiek", "author_email": "mateusz.bysiek@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Education", "Topic :: Scientific/Engineering", "Topic :: Utilities"], "description": ".. role:: bash(code)\n    :language: bash\n\n.. role:: fortran(code)\n    :language: fortran\n\n.. role:: java(code)\n    :language: java\n\n.. role:: python(code)\n    :language: python\n\n.. role:: xml(code)\n    :language: xml\n\n\n============================================\nXML output generator for Open Fortran Parser\n============================================\n\nExtension of Java-based Open Fortran Parser and a Python wrapper enabling Fortran parsing from Python.\n\n.. image:: https://travis-ci.org/mbdevpl/open-fortran-parser-xml.svg?branch=master\n    :target: https://travis-ci.org/mbdevpl/open-fortran-parser-xml\n    :alt: build status from Travis CI\n\n.. image:: https://ci.appveyor.com/api/projects/status/github/mbdevpl/open-fortran-parser-xml?branch=master&svg=true\n    :target: https://ci.appveyor.com/project/mbdevpl/open-fortran-parser-xml\n    :alt: build status from AppVeyor\n\n.. image:: https://api.codacy.com/project/badge/Grade/1e5602a9efed41998eca0437d84cc1db\n    :target: https://www.codacy.com/app/mbdevpl/open-fortran-parser-xml\n    :alt: grade from Codacy\n\n.. image:: https://codecov.io/gh/mbdevpl/open-fortran-parser-xml/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/mbdevpl/open-fortran-parser-xml\n    :alt: test coverage from Codecov\n\n.. image:: https://img.shields.io/github/license/mbdevpl/open-fortran-parser.svg\n    :target: https://github.com/mbdevpl/open-fortran-parser-xml/blob/master/NOTICE\n    :alt: license\n\nImplementation has 2 parts: the XML generator written in Java, and Python wrapper for the generator.\n\nThe implementation is tested on Linux, OS X and Windows.\n\nIn this file, first the AST specification is described, then the Java implementation,\nand then the Python wrapper.\n\n.. contents::\n    :backlinks: none\n\n\nAST specification\n=================\n\nFor any Fortran file, the resulting XML file has the following structure:\n\n.. code:: xml\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <ofp version=\"0.8.5-1\"> <!-- version of the Open Fortran Parser used -->\n      <file path=\"/path/to/parsed/file.f90\">\n        <!-- Fortran syntax goes here -->\n      </file>\n    </ofp>\n\nRoot node is :xml:`<ofp>`, it has one subnode :xml:`<file>`.\n\nInside the :xml:`<file>`, there might be one or many of the following nodes:\n\n*   :xml:`<program>`\n*   :xml:`<subroutine>`\n*   :xml:`<function>`\n*   :xml:`<module>`\n*   :xml:`<interface>`\n*   ...\n\nAdditionally, every XML node that was built using tokens from the source code\n(which means almost any XML node) has its source code location described in the following way:\n\n.. code:: xml\n\n    <node col_begin=\"...\" col_end=\"...\" line_begin=\"...\" line_end=\"...\" />\n\nFor simplicity, the above XML file boilerplate as well as locations are stripped\nfrom the examples that follow.\n\nFor each presented construct, Fortran code snippet and corresponding XML AST is given.\n\n\nComments and directives\n-----------------------\n\nComment:\n\n.. code:: fortran\n\n    ! my comment\n    !$omp parallel do\n\n.. code:: xml\n\n    <comment text=\"! my comment\"/>\n    <comment text=\"!$omp parallel do\"/>\n\nDirective:\n\n.. code:: fortran\n\n    #define NDIMS 3\n\n.. code:: xml\n\n    <directive text=\"#define NDIMS 3\"/>\n\n\nNodes :xml:`<comment>` and :xml:`<directive>`\nexist to carry comments and preprocessor directives, respectively.\nThese nodes might be in principle inserted before, after or within any of other nodes,\nhowever, in practice they are either surrounding the top-level nodes (e.g. program or subroutine)\nor are placed in-between non-compound declarations and/or statements within them.\n\nNote: compiler directives are comments in Fortran.\n\n\nProgram\n-------\n\n.. code:: fortran\n\n    program empty\n      ...\n    end program empty\n\n.. code:: xml\n\n    <program name=\"empty\">\n      <body>\n        ...\n      </body>\n    </program>\n\nIn the body, `Declarations`_ followed by any number of statements can be found.\n\nAnd each of the statements listed after the declarations,\ncan be one of `Simple statements`_ or `Compound statements`_.\n\n\nDeclarations\n------------\n\nA special node :xml:`<specification>` wraps all declarations:\n\n.. code:: xml\n\n    <specification declarations=\"0\" implicits=\"0\" imports=\"0\" uses=\"0\">\n      ...\n    </specification>\n\nIt provides counts for each of the declaration type and contains a collection of declarations,\nwhich can any of the following:\n\n*   :xml:`<use>`\n*   :xml:`<declaraion>`\n*   ...\n\nThe :xml:`<declaraion>` node is special in a sense that it has type attribute that specifies\nwhat kind of declaration it is.\n\n\nImplicit declaration\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: fortran\n\n    implicit none\n    implicit real (A-H,O-Z)\n\n.. code:: xml\n\n    <declaration subtype=\"none\" type=\"implicit\" />\n    <declaration subtype=\"some\" type=\"implicit\">\n      <type name=\"real\" type=\"intrinsic\" />\n      <letter-ranges>\n        <letter-range begin=\"A\" end=\"H\" />\n        <letter-range begin=\"O\" end=\"Z\" />\n      </letter-ranges>\n    </declaration>\n\n\nVariable declaration\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: fortran\n\n    integer i, j\n\n.. code:: xml\n\n    <declaration type=\"variable\">\n      <type name=\"integer\" type=\"intrinsic\"/>\n      <variables count=\"2\">\n        <variable name=\"i\"/>\n        <variable name=\"j\"/>\n      </variables>\n    </declaration>\n\n\nExternal declaration\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: fortran\n\n    external omp_get_num_procs\n\n\nSave declaration\n~~~~~~~~~~~~~~~~\n\n.. code:: fortran\n\n    save n\n\n\nUse\n~~~\n\n.. code:: fortran\n\n    use mpi\n    use my_interface, only: subroutine1, subroutine2\n    use, non_intrinsic :: my_module\n    use, intrinsic :: iso_c_binding, only: c_int, c_float\n\n.. code:: xml\n\n    <use name=\"mpi\" />\n    <use name=\"my_interface\">\n      <only>\n        <name id=\"subroutine1\" />\n        <name id=\"subroutine2\" />\n      </only>\n    </use>\n    <use name=\"my_module\">\n      <nature name=\"non_intrinsic\" />\n    </use>\n    <use name=\"iso_c_binding\">\n      <nature name=\"intrinsic\" />\n      <only>\n        <name id=\"c_int\" />\n        <name id=\"c_float\" />\n      </only>\n    </use>\n\n\nCompound statements\n-------------------\n\nCompound statements, e.g.:\n\n*   :xml:`<if>`\n*   :xml:`<loop>`\n*   :xml:`<select>`\n*   ...\n\neach have :xml:`<header>` and :xml:`<body>`.\n\n\nIf\n~~~\n\nIn the header of :xml:`<if>`, an expression is present.\n\nSee `Expressions`_ for a definition.\n\n\nLoop\n~~~~\n\nIn the header of the :xml:`<loop>`, at least one :xml:`<index-variable>` is present.\nIt has :xml:`<lower-bound>`, :xml:`<upper-bound>`  and :xml:`<step>`.\n\n\nSelect\n~~~~~~\n\nIn the body of :xml:`<select>` there multiple :xml:`<case>` nodes.\nThese are also compound (i.e. each of them has :xml:`<header>` and :xml:`<body>`),\nhowever they exist only within the body of select statement.\n\n\nSimple statements\n-----------------\n\n.. code:: xml\n\n    <statement>\n      ...\n    </statement>\n\nAll simple statements are using :xml:`<statement>` node, which wraps around nodes like:\n\n*   :xml:`<assignment>`\n*   :xml:`<pointer-assignment>`\n*   :xml:`<call>`\n*   :xml:`<open>`\n*   :xml:`<close>`\n*   :xml:`<write>`\n*   :xml:`<format>`\n*   :xml:`<print>`\n*   :xml:`<allocate>`\n*   :xml:`<deallocate>`\n*   :xml:`<return>`\n*   :xml:`<stop>`\n*   :xml:`<continue>`\n*   :xml:`<cycle>`\n*   :xml:`<arithmetic-if>`\n*   ...\n\n\nAssignment\n~~~~~~~~~~\n\n.. code:: fortran\n\n    x = 1\n\n.. code:: xml\n\n    <assignment>\n      <target>\n        <name id=\"i\" />\n      </target>\n      <value>\n        <literal type=\"int\" value=\"1\" />\n      </value>\n    </assignment>\n\n\nCall\n~~~~\n\n.. code:: fortran\n\n    call configure\n    call initialize()\n    call calculate(1, 2)\n    call something(thing=my_value)\n\n.. code:: xml\n\n    <call>\n      <name hasSubscripts=\"false\" id=\"configure\" type=\"procedure\" />\n    </call>\n    <call>\n      <name hasSubscripts=\"true\" id=\"initialize\" type=\"procedure\">\n        <subscripts count=\"0\" />\n      </name>\n    </call>\n    <call>\n      <name hasSubscripts=\"true\" id=\"calculate\" type=\"procedure\">\n        <subscripts count=\"2\">\n          <subscript type=\"simple\">\n            <literal  type=\"int\" value=\"1\" />\n          </subscript>\n          <subscript type=\"simple\">\n            <literal type=\"int\" value=\"2\" />\n          </subscript>\n        </subscripts>\n      </name>\n    </call>\n    <call >\n      <name hasSubscripts=\"true\" id=\"something\" type=\"procedure\">\n        <subscripts count=\"1\">\n          <argument name=\"thing\">\n            <name id=\"my_value\" />\n          </argument>\n        </subscripts>\n      </name>\n    </call>\n\n\nExpressions\n-----------\n\nExpression might be a single node like:\n\n*   :xml:`<name>`\n*   :xml:`<literal>`\n*   ...\n\nMore complex expressions are built from the :xml:`<operation>` nodes, each of which contains\na collection of :xml:`<operand>` and :xml:`<operator>` nodes. Each operand contains an expression.\n\n\nUnary operation\n~~~~~~~~~~~~~~~\n\n.. code:: fortran\n\n    .not. flag\n\n.. code:: xml\n\n    <operation type=\"unary\">\n      <operator operator=\".not.\" />\n      <operand>\n        <name id=\"flag\" />\n      </operand>\n    </operation>\n\n\nMultiary operation\n~~~~~~~~~~~~~~~~~~\n\n.. code:: fortran\n\n    'Hello' // ' world'\n    5 + x\n\n.. code:: xml\n\n    <operation type=\"multiary\">\n      <operand >\n        <literal type=\"char\" value=\"'Hello'\" />\n      </operand>\n      <operator operator=\"//\" />\n      <operand>\n        <literal type=\"char\" value=\"' world'\" />\n      </operand>\n    </operation>\n    <operation type=\"multiary\">\n      <operand>\n        <literal type=\"int\" value=\"5\" />\n      </operand>\n      <operator operator=\"+\" />\n      <operand>\n        <name id=\"x\" />\n      </operand>\n    </operation>\n\n\nSubroutine\n----------\n\nMany complex nodes contain :xml:`<header>` and :xml:`<body>`.\n\nThe contents of the header depend on the type of the node. For example, in case of subroutines,\nit contains list of parameters.\n\n\nFunction\n--------\n\n.. code:: fortran\n\n    function foo\n      ...\n    end function foo\n\n.. code:: xml\n\n    <function name=\"foo\">\n      <header>\n        ...\n      </header>\n      <body>\n        ...\n      </body>\n    </function>\n\n\nModule\n------\n\n.. code:: fortran\n\n    module abc\n      integer i\n      ...\n    contains\n      subroutine sub()\n        ...\n      end subroutine sub\n      ...\n    end module abc\n\n.. code:: xml\n\n    <module name=\"abc\">\n      <body>\n        <specification declarations=\"1\" implicits=\"0\" imports=\"0\" uses=\"0\">\n          <declaration type=\"variable\">\n            <type name=\"integer\" type=\"intrinsic\"/>\n            <variables count=\"1\">\n              <variable name=\"i\"/>\n            </variables>\n          </declaration>\n        </specification>\n        ...\n      </body>\n      <members>\n        <subroutine name=\"sub\">\n          <header/>\n          <body>\n            ...\n          </body>\n        </subroutine>\n        ...\n      </members>\n    </module>\n\n\nWork in progress\n----------------\n\nRemaining details of AST are not decided yet. For the time being, to see implementation details,\nplease take a look into `src/fortran/ofp/XMLPrinter.java <https://github.com/mbdevpl/open-fortran-parser-xml/blob/v0.6.1/src/fortran/ofp/XMLPrinter.java>`_.\n\n\nUnhandled corner cases\n----------------------\n\nin certain corner cases, the parse tree might deviate from the above description.\n\nThis might be due to two main reasons:\n\n1)   Some feature is not yet implemented in this XML output generator\n2)   The events provided by OFP are not sufficient to generate a correct tree.\n\nIn case 1, all contributions to this project are very welcome. The implementation of any one\nof the missing features might not be very troublesome. The main reason why many of those features\nare not implemented yet is because the Fortran codes the current contributors work with\ndo not use them.\n\nIn case 2, there is a need to dynamically reorder/modify/delete nodes, or otherwise manipulate\nexisting parse tree while adding new nodes. Contributions are also very welcome,\nbut implementation might be much more challenging in this case.\n\n\nJava XML generator for OFP\n==========================\n\n.. image:: https://img.shields.io/github/release/mbdevpl/open-fortran-parser-xml.svg\n    :target: https://github.com/mbdevpl/open-fortran-parser-xml/releases\n    :alt: latest GitHub release\n\nThis is an extension of Open Fortran Parser (OFP), which outputs abstract syntaxt tree (AST)\nof parsed Fortran file in XML format - to a file or to :java:`System.out`.\n\n\ndependencies\n------------\n\n*   Java 1.7 or later\n\n*   Open Fortran Parser 0.8.5-1\n\n    https://github.com/mbdevpl/open-fortran-parser/releases\n\n    This is a patched version of OFP. The list of changes is available at the above link.\n\n*   ANTRL 3.5.2 (dependency of Open Fortran Parser)\n\n    http://www.antlr3.org/download/\n\n*   Apache Commons CLI 1.4 or later\n\n    https://commons.apache.org/proper/commons-cli/download_cli.cgi\n\n\nhow to build\n------------\n\nGet dependencies, either manually, or using the provided script:\n\n.. code:: bash\n\n    pip3 install -U -r requirements.txt\n    python3 -m open_fortran_parser --deps\n    export CLASSPATH=\"${CLASSPATH}:$(pwd)/lib/*\"\n\nBuild:\n\n.. code:: bash\n\n    ant\n    export CLASSPATH=\"${CLASSPATH}:$(pwd)/dist/*\"\n\nThis will create a `.jar` file in `dist` directory, and add it to the Java classpath.\n\nIf you use a different python executable to install requirements, please provide it to ant too:\n\n.. code:: bash\n\n    ant -Dpython=/custom/python\n\nBecause the build script by default relies on \"python3\" executable.\n\n\nhow to run\n----------\n\n.. code:: bash\n\n    java fortran.ofp.FrontEnd --class fortran.ofp.XMLPrinter \\\n      --output output.xml --verbosity 0~100 input.f\n\nwhere:\n\n*   The :bash:`--verbosity` flag controls verbosity of the parse tree. Defaluts to :bash:`100`\n    when omitted.\n\n    *   Maximum, :bash:`100`, means that all details picked up by Open Fortran Parser\n        will be preserved.\n\n    *   Minimum, :bash:`0`, means that tree will contain only what is needed to reconstruct\n        the program without changing it's meaning.\n\n*   The :bash:`--output` flag controls where the XML should be written. Defaults to standard output\n    when omitted.\n\nand remaining command-line options are exactly as defined in OFP 0.8.5.\n\nTo parse :bash:`some_fortran_file.f` and save XML output in :bash:`tree.xml` with minimum verbosity:\n\n.. code:: bash\n\n    java fortran.ofp.FrontEnd --class fortran.ofp.XMLPrinter \\\n      --output tree.xml --verbosity 0 some_fortran_file.f\n\nAnd to dump XML with maximum verbosity to console:\n\n.. code:: bash\n\n    java fortran.ofp.FrontEnd --class fortran.ofp.XMLPrinter \\\n      --verbosity 100 some_fortran_file.f\n\n\nPython wrapper for the generator\n================================\n\n.. image:: https://img.shields.io/pypi/v/open-fortran-parser.svg\n    :target: https://pypi.python.org/pypi/open-fortran-parser\n    :alt: package version from PyPI\n\nUsing the wrapper should not require any special knowledge about the generator itself, other than\nknowing the abstract syntax tree (AST) specification.\n\n\ndependencies\n------------\n\nJava XML generator for OFP and all of its dependencies.\n\nPython version 3.5 or later.\n\nPython libraries as specified in `requirements.txt <https://github.com/mbdevpl/open-fortran-parser-xml/blob/v0.6.1/requirements.txt>`_.\n\nBuilding and running tests additionally requires packages listed in `test_requirements.txt <https://github.com/mbdevpl/open-fortran-parser-xml/blob/v0.6.1/test_requirements.txt>`_.\n\n\nhow to build\n------------\n\n.. code:: bash\n\n    pip3 install -U -r test_requirements.txt\n    python3 setup.py sdist --formats=gztar,zip\n    python3 setup.py bdist_wheel\n\nhow to install\n--------------\n\nYou can simply install from PyPI:\n\n.. code:: bash\n\n    pip3 install open-fortran-parser\n\nOr using any of below commands, when installing from source:\n\n.. code:: bash\n\n    pip3 install .\n    pip3 install dist/<filename>.whl\n    pip3 install dist/<filename>.tar.gz\n    pip3 install dist/<filename>.zip\n\n\nhow to run\n----------\n\nThe wrapper can be used as a script, or as a library.\n\nWhen running any installed version, even if installed from source, dependencies are automatically\ninstalled together with the wrapper.\n\nBefore running from source (without installation), however, please follow \"how to build\" section\nfor Java implementation above.\nYou can make sure that dependencies are configured correctly by running:\n\n.. code:: bash\n\n    python3 -m open_fortran_parser --check-deps\n\nIf the depenencies changed since you first ran the wrapper from the source tree, you can cleanup\noutdated dependencies by executing:\n\n.. code:: bash\n\n    python3 -m open_fortran_parser --cleanup-deps\n\n\nas script\n~~~~~~~~~\n\n.. code::\n\n    $ python3 -m open_fortran_parser -h\n    usage: open_fortran_parser [-h] [--version] [-v VERBOSITY]\n                               [--check-dependencies]\n                               [input] [output]\n\n    Python wrapper around XML generator for Open Fortran Parser\n\n    positional arguments:\n      input                 path to Fortran source code file (default: None)\n      output                writable path for where to store resulting XML,\n                            defaults to stdout if no path provided (default: None)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n      -v VERBOSITY, --verbosity VERBOSITY\n                            level of verbosity, from 0 to 100 (default: 100)\n      --check-dependencies, --check-deps\n                            check if all required dependencies are present and\n                            exit (default: False)\n\n    Copyright 2017-2019 by the contributors, Apache License 2.0,\n    https://github.com/mbdevpl/open-fortran-parser-xml\n\n\nas library\n~~~~~~~~~~\n\n.. code:: python\n\n    from open_fortran_parser import parse\n\n    xml = parse('my_legacy_code.f', verbosity=0)\n\nMore examples available in `examples.ipynb <https://github.com/mbdevpl/open-fortran-parser-xml/blob/v0.6.1/examples.ipynb>`_.\n\n\ntesting\n-------\n\nRun basic tests:\n\n.. code:: bash\n\n    python3 -m unittest -v\n    TEST_LONG=1 python3 -m unittest -v  # this might take a long time...\n\n\ncode coverage\n~~~~~~~~~~~~~\n\nGetting code coverage results for Java requires JaCoCo agent, and JaCoCo CLI,\nand both are dowonloaded automatically along with other development dependencies.\n\nCurrently, test setup relies on JaCoCo 0.8.3:\n\n*   JaCoCo agent 0.8.3 (runtime)\n*   JaCoCo CLI 0.8.3 (nodeps)\n\nRun all test and gather code coverage:\n\n.. code:: bash\n\n    TEST_LONG=1 TEST_COVERAGE=1 python3 -m coverage run --branch --source . -m unittest -v\n\nThis will take a long while.\n\nThen, generate results for Python code:\n\n.. code:: bash\n\n    python3 -m coverage report --show-missing\n    python3 -m coverage html\n\nFinally, generate results for Java code:\n\n.. code:: bash\n\n    java -jar \"lib/org.jacoco.cli-0.8.3-nodeps.jar\" report \"jacoco.exec\" --classfiles \"bin/\" --sourcefiles \"src/\" --html jacoco\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mbdevpl/open-fortran-parser-xml", "keywords": "abstract syntax tree,ast,parser,xml", "license": "Apache License 2.0", "maintainer": "Mateusz Bysiek", "maintainer_email": "mateusz.bysiek@gmail.com", "name": "open-fortran-parser", "package_url": "https://pypi.org/project/open-fortran-parser/", "platform": "", "project_url": "https://pypi.org/project/open-fortran-parser/", "project_urls": {"Homepage": "https://github.com/mbdevpl/open-fortran-parser-xml"}, "release_url": "https://pypi.org/project/open-fortran-parser/0.6.1/", "requires_dist": ["version-query", "wget"], "requires_python": ">=3.5", "summary": "Python wrapper for XML output generator for Open Fortran Parser", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Extension of Java-based Open Fortran Parser and a Python wrapper enabling Fortran parsing from Python.</p>\n<a href=\"https://travis-ci.org/mbdevpl/open-fortran-parser-xml\" rel=\"nofollow\"><img alt=\"build status from Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a53cef24ac26231f0b7eb066fdf2950498f5b83f/68747470733a2f2f7472617669732d63692e6f72672f6d62646576706c2f6f70656e2d666f727472616e2d7061727365722d786d6c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/mbdevpl/open-fortran-parser-xml\" rel=\"nofollow\"><img alt=\"build status from AppVeyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3ae06baaa3251b922ac1f730c01e3e37ea473d1/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d62646576706c2f6f70656e2d666f727472616e2d7061727365722d786d6c3f6272616e63683d6d6173746572267376673d74727565\"></a>\n<a href=\"https://www.codacy.com/app/mbdevpl/open-fortran-parser-xml\" rel=\"nofollow\"><img alt=\"grade from Codacy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8439c295fe06f806ccdb3071ec85b8a9b89f0382/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3165353630326139656665643431393938656361303433376438346363316462\"></a>\n<a href=\"https://codecov.io/gh/mbdevpl/open-fortran-parser-xml\" rel=\"nofollow\"><img alt=\"test coverage from Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49810fbced34f0ad9aa407065f463a63ec9079e4/68747470733a2f2f636f6465636f762e696f2f67682f6d62646576706c2f6f70656e2d666f727472616e2d7061727365722d786d6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/mbdevpl/open-fortran-parser-xml/blob/master/NOTICE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19589e0290f3dbde678a3723a94387450be050c1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d62646576706c2f6f70656e2d666f727472616e2d7061727365722e737667\"></a>\n<p>Implementation has 2 parts: the XML generator written in Java, and Python wrapper for the generator.</p>\n<p>The implementation is tested on Linux, OS X and Windows.</p>\n<p>In this file, first the AST specification is described, then the Java implementation,\nand then the Python wrapper.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#ast-specification\" id=\"id4\" rel=\"nofollow\">AST specification</a><ul>\n<li><a href=\"#comments-and-directives\" id=\"id5\" rel=\"nofollow\">Comments and directives</a></li>\n<li><a href=\"#program\" id=\"id6\" rel=\"nofollow\">Program</a></li>\n<li><a href=\"#declarations\" id=\"id7\" rel=\"nofollow\">Declarations</a><ul>\n<li><a href=\"#implicit-declaration\" id=\"id8\" rel=\"nofollow\">Implicit declaration</a></li>\n<li><a href=\"#variable-declaration\" id=\"id9\" rel=\"nofollow\">Variable declaration</a></li>\n<li><a href=\"#external-declaration\" id=\"id10\" rel=\"nofollow\">External declaration</a></li>\n<li><a href=\"#save-declaration\" id=\"id11\" rel=\"nofollow\">Save declaration</a></li>\n<li><a href=\"#use\" id=\"id12\" rel=\"nofollow\">Use</a></li>\n</ul>\n</li>\n<li><a href=\"#compound-statements\" id=\"id13\" rel=\"nofollow\">Compound statements</a><ul>\n<li><a href=\"#if\" id=\"id14\" rel=\"nofollow\">If</a></li>\n<li><a href=\"#loop\" id=\"id15\" rel=\"nofollow\">Loop</a></li>\n<li><a href=\"#select\" id=\"id16\" rel=\"nofollow\">Select</a></li>\n</ul>\n</li>\n<li><a href=\"#simple-statements\" id=\"id17\" rel=\"nofollow\">Simple statements</a><ul>\n<li><a href=\"#assignment\" id=\"id18\" rel=\"nofollow\">Assignment</a></li>\n<li><a href=\"#call\" id=\"id19\" rel=\"nofollow\">Call</a></li>\n</ul>\n</li>\n<li><a href=\"#expressions\" id=\"id20\" rel=\"nofollow\">Expressions</a><ul>\n<li><a href=\"#unary-operation\" id=\"id21\" rel=\"nofollow\">Unary operation</a></li>\n<li><a href=\"#multiary-operation\" id=\"id22\" rel=\"nofollow\">Multiary operation</a></li>\n</ul>\n</li>\n<li><a href=\"#subroutine\" id=\"id23\" rel=\"nofollow\">Subroutine</a></li>\n<li><a href=\"#function\" id=\"id24\" rel=\"nofollow\">Function</a></li>\n<li><a href=\"#module\" id=\"id25\" rel=\"nofollow\">Module</a></li>\n<li><a href=\"#work-in-progress\" id=\"id26\" rel=\"nofollow\">Work in progress</a></li>\n<li><a href=\"#unhandled-corner-cases\" id=\"id27\" rel=\"nofollow\">Unhandled corner cases</a></li>\n</ul>\n</li>\n<li><a href=\"#java-xml-generator-for-ofp\" id=\"id28\" rel=\"nofollow\">Java XML generator for OFP</a><ul>\n<li><a href=\"#dependencies\" id=\"id29\" rel=\"nofollow\">dependencies</a></li>\n<li><a href=\"#how-to-build\" id=\"id30\" rel=\"nofollow\">how to build</a></li>\n<li><a href=\"#how-to-run\" id=\"id31\" rel=\"nofollow\">how to run</a></li>\n</ul>\n</li>\n<li><a href=\"#python-wrapper-for-the-generator\" id=\"id32\" rel=\"nofollow\">Python wrapper for the generator</a><ul>\n<li><a href=\"#id1\" id=\"id33\" rel=\"nofollow\">dependencies</a></li>\n<li><a href=\"#id2\" id=\"id34\" rel=\"nofollow\">how to build</a></li>\n<li><a href=\"#how-to-install\" id=\"id35\" rel=\"nofollow\">how to install</a></li>\n<li><a href=\"#id3\" id=\"id36\" rel=\"nofollow\">how to run</a><ul>\n<li><a href=\"#as-script\" id=\"id37\" rel=\"nofollow\">as script</a></li>\n<li><a href=\"#as-library\" id=\"id38\" rel=\"nofollow\">as library</a></li>\n</ul>\n</li>\n<li><a href=\"#testing\" id=\"id39\" rel=\"nofollow\">testing</a><ul>\n<li><a href=\"#code-coverage\" id=\"id40\" rel=\"nofollow\">code coverage</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"ast-specification\">\n<h2>AST specification</h2>\n<p>For any Fortran file, the resulting XML file has the following structure:</p>\n<pre><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;</span>\n<span class=\"nt\">&lt;ofp</span> <span class=\"na\">version=</span><span class=\"s\">\"0.8.5-1\"</span><span class=\"nt\">&gt;</span> <span class=\"c\">&lt;!-- version of the Open Fortran Parser used --&gt;</span>\n  <span class=\"nt\">&lt;file</span> <span class=\"na\">path=</span><span class=\"s\">\"/path/to/parsed/file.f90\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"c\">&lt;!-- Fortran syntax goes here --&gt;</span>\n  <span class=\"nt\">&lt;/file&gt;</span>\n<span class=\"nt\">&lt;/ofp&gt;</span>\n</pre>\n<p>Root node is <code class=\"xml\"><span class=\"nt\">&lt;ofp&gt;</span></code>, it has one subnode <code class=\"xml\"><span class=\"nt\">&lt;file&gt;</span></code>.</p>\n<p>Inside the <code class=\"xml\"><span class=\"nt\">&lt;file&gt;</span></code>, there might be one or many of the following nodes:</p>\n<ul>\n<li><code class=\"xml\"><span class=\"nt\">&lt;program&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;subroutine&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;function&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;module&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;interface&gt;</span></code></li>\n<li>\u2026</li>\n</ul>\n<p>Additionally, every XML node that was built using tokens from the source code\n(which means almost any XML node) has its source code location described in the following way:</p>\n<pre><span class=\"nt\">&lt;node</span> <span class=\"na\">col_begin=</span><span class=\"s\">\"...\"</span> <span class=\"na\">col_end=</span><span class=\"s\">\"...\"</span> <span class=\"na\">line_begin=</span><span class=\"s\">\"...\"</span> <span class=\"na\">line_end=</span><span class=\"s\">\"...\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<p>For simplicity, the above XML file boilerplate as well as locations are stripped\nfrom the examples that follow.</p>\n<p>For each presented construct, Fortran code snippet and corresponding XML AST is given.</p>\n<div id=\"comments-and-directives\">\n<h3>Comments and directives</h3>\n<p>Comment:</p>\n<pre><span class=\"c\">! my comment\n!$omp parallel do</span>\n</pre>\n<pre><span class=\"nt\">&lt;comment</span> <span class=\"na\">text=</span><span class=\"s\">\"! my comment\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;comment</span> <span class=\"na\">text=</span><span class=\"s\">\"!$omp parallel do\"</span><span class=\"nt\">/&gt;</span>\n</pre>\n<p>Directive:</p>\n<pre><span class=\"cp\">#define NDIMS 3</span>\n</pre>\n<pre><span class=\"nt\">&lt;directive</span> <span class=\"na\">text=</span><span class=\"s\">\"#define NDIMS 3\"</span><span class=\"nt\">/&gt;</span>\n</pre>\n<p>Nodes <code class=\"xml\"><span class=\"nt\">&lt;comment&gt;</span></code> and <code class=\"xml\"><span class=\"nt\">&lt;directive&gt;</span></code>\nexist to carry comments and preprocessor directives, respectively.\nThese nodes might be in principle inserted before, after or within any of other nodes,\nhowever, in practice they are either surrounding the top-level nodes (e.g. program or subroutine)\nor are placed in-between non-compound declarations and/or statements within them.</p>\n<p>Note: compiler directives are comments in Fortran.</p>\n</div>\n<div id=\"program\">\n<h3>Program</h3>\n<pre><span class=\"k\">program </span><span class=\"n\">empty</span>\n  <span class=\"p\">...</span>\n<span class=\"k\">end program </span><span class=\"n\">empty</span>\n</pre>\n<pre><span class=\"nt\">&lt;program</span> <span class=\"na\">name=</span><span class=\"s\">\"empty\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/program&gt;</span>\n</pre>\n<p>In the body, <a href=\"#declarations\" rel=\"nofollow\">Declarations</a> followed by any number of statements can be found.</p>\n<p>And each of the statements listed after the declarations,\ncan be one of <a href=\"#simple-statements\" rel=\"nofollow\">Simple statements</a> or <a href=\"#compound-statements\" rel=\"nofollow\">Compound statements</a>.</p>\n</div>\n<div id=\"declarations\">\n<h3>Declarations</h3>\n<p>A special node <code class=\"xml\"><span class=\"nt\">&lt;specification&gt;</span></code> wraps all declarations:</p>\n<pre><span class=\"nt\">&lt;specification</span> <span class=\"na\">declarations=</span><span class=\"s\">\"0\"</span> <span class=\"na\">implicits=</span><span class=\"s\">\"0\"</span> <span class=\"na\">imports=</span><span class=\"s\">\"0\"</span> <span class=\"na\">uses=</span><span class=\"s\">\"0\"</span><span class=\"nt\">&gt;</span>\n  ...\n<span class=\"nt\">&lt;/specification&gt;</span>\n</pre>\n<p>It provides counts for each of the declaration type and contains a collection of declarations,\nwhich can any of the following:</p>\n<ul>\n<li><code class=\"xml\"><span class=\"nt\">&lt;use&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;declaraion&gt;</span></code></li>\n<li>\u2026</li>\n</ul>\n<p>The <code class=\"xml\"><span class=\"nt\">&lt;declaraion&gt;</span></code> node is special in a sense that it has type attribute that specifies\nwhat kind of declaration it is.</p>\n<div id=\"implicit-declaration\">\n<h4>Implicit declaration</h4>\n<pre><span class=\"k\">implicit none\nimplicit </span><span class=\"kt\">real</span> <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">-</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"n\">O</span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"nt\">&lt;declaration</span> <span class=\"na\">subtype=</span><span class=\"s\">\"none\"</span> <span class=\"na\">type=</span><span class=\"s\">\"implicit\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;declaration</span> <span class=\"na\">subtype=</span><span class=\"s\">\"some\"</span> <span class=\"na\">type=</span><span class=\"s\">\"implicit\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;type</span> <span class=\"na\">name=</span><span class=\"s\">\"real\"</span> <span class=\"na\">type=</span><span class=\"s\">\"intrinsic\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;letter-ranges&gt;</span>\n    <span class=\"nt\">&lt;letter-range</span> <span class=\"na\">begin=</span><span class=\"s\">\"A\"</span> <span class=\"na\">end=</span><span class=\"s\">\"H\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;letter-range</span> <span class=\"na\">begin=</span><span class=\"s\">\"O\"</span> <span class=\"na\">end=</span><span class=\"s\">\"Z\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/letter-ranges&gt;</span>\n<span class=\"nt\">&lt;/declaration&gt;</span>\n</pre>\n</div>\n<div id=\"variable-declaration\">\n<h4>Variable declaration</h4>\n<pre><span class=\"kt\">integer </span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span>\n</pre>\n<pre><span class=\"nt\">&lt;declaration</span> <span class=\"na\">type=</span><span class=\"s\">\"variable\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;type</span> <span class=\"na\">name=</span><span class=\"s\">\"integer\"</span> <span class=\"na\">type=</span><span class=\"s\">\"intrinsic\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;variables</span> <span class=\"na\">count=</span><span class=\"s\">\"2\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;variable</span> <span class=\"na\">name=</span><span class=\"s\">\"i\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;variable</span> <span class=\"na\">name=</span><span class=\"s\">\"j\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/variables&gt;</span>\n<span class=\"nt\">&lt;/declaration&gt;</span>\n</pre>\n</div>\n<div id=\"external-declaration\">\n<h4>External declaration</h4>\n<pre><span class=\"k\">external </span><span class=\"n\">omp_get_num_procs</span>\n</pre>\n</div>\n<div id=\"save-declaration\">\n<h4>Save declaration</h4>\n<pre><span class=\"k\">save </span><span class=\"n\">n</span>\n</pre>\n</div>\n<div id=\"use\">\n<h4>Use</h4>\n<pre><span class=\"k\">use </span><span class=\"n\">mpi</span>\n<span class=\"k\">use </span><span class=\"n\">my_interface</span><span class=\"p\">,</span> <span class=\"n\">only</span><span class=\"p\">:</span> <span class=\"n\">subroutine1</span><span class=\"p\">,</span> <span class=\"n\">subroutine2</span>\n<span class=\"k\">use</span><span class=\"p\">,</span> <span class=\"k\">non_intrinsic</span> <span class=\"kd\">::</span> <span class=\"n\">my_module</span>\n<span class=\"k\">use</span><span class=\"p\">,</span> <span class=\"k\">intrinsic</span> <span class=\"kd\">::</span> <span class=\"nb\">iso_c_binding</span><span class=\"p\">,</span> <span class=\"n\">only</span><span class=\"p\">:</span> <span class=\"kt\">c_int</span><span class=\"p\">,</span> <span class=\"kt\">c_float</span>\n</pre>\n<pre><span class=\"nt\">&lt;use</span> <span class=\"na\">name=</span><span class=\"s\">\"mpi\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;use</span> <span class=\"na\">name=</span><span class=\"s\">\"my_interface\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;only&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">id=</span><span class=\"s\">\"subroutine1\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">id=</span><span class=\"s\">\"subroutine2\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/only&gt;</span>\n<span class=\"nt\">&lt;/use&gt;</span>\n<span class=\"nt\">&lt;use</span> <span class=\"na\">name=</span><span class=\"s\">\"my_module\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;nature</span> <span class=\"na\">name=</span><span class=\"s\">\"non_intrinsic\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/use&gt;</span>\n<span class=\"nt\">&lt;use</span> <span class=\"na\">name=</span><span class=\"s\">\"iso_c_binding\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;nature</span> <span class=\"na\">name=</span><span class=\"s\">\"intrinsic\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;only&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">id=</span><span class=\"s\">\"c_int\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">id=</span><span class=\"s\">\"c_float\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/only&gt;</span>\n<span class=\"nt\">&lt;/use&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"compound-statements\">\n<h3>Compound statements</h3>\n<p>Compound statements, e.g.:</p>\n<ul>\n<li><code class=\"xml\"><span class=\"nt\">&lt;if&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;loop&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;select&gt;</span></code></li>\n<li>\u2026</li>\n</ul>\n<p>each have <code class=\"xml\"><span class=\"nt\">&lt;header&gt;</span></code> and <code class=\"xml\"><span class=\"nt\">&lt;body&gt;</span></code>.</p>\n<div id=\"if\">\n<h4>If</h4>\n<p>In the header of <code class=\"xml\"><span class=\"nt\">&lt;if&gt;</span></code>, an expression is present.</p>\n<p>See <a href=\"#expressions\" rel=\"nofollow\">Expressions</a> for a definition.</p>\n</div>\n<div id=\"loop\">\n<h4>Loop</h4>\n<p>In the header of the <code class=\"xml\"><span class=\"nt\">&lt;loop&gt;</span></code>, at least one <code class=\"xml\"><span class=\"nt\">&lt;index-variable&gt;</span></code> is present.\nIt has <code class=\"xml\"><span class=\"nt\">&lt;lower-bound&gt;</span></code>, <code class=\"xml\"><span class=\"nt\">&lt;upper-bound&gt;</span></code>  and <code class=\"xml\"><span class=\"nt\">&lt;step&gt;</span></code>.</p>\n</div>\n<div id=\"select\">\n<h4>Select</h4>\n<p>In the body of <code class=\"xml\"><span class=\"nt\">&lt;select&gt;</span></code> there multiple <code class=\"xml\"><span class=\"nt\">&lt;case&gt;</span></code> nodes.\nThese are also compound (i.e. each of them has <code class=\"xml\"><span class=\"nt\">&lt;header&gt;</span></code> and <code class=\"xml\"><span class=\"nt\">&lt;body&gt;</span></code>),\nhowever they exist only within the body of select statement.</p>\n</div>\n</div>\n<div id=\"simple-statements\">\n<h3>Simple statements</h3>\n<pre><span class=\"nt\">&lt;statement&gt;</span>\n  ...\n<span class=\"nt\">&lt;/statement&gt;</span>\n</pre>\n<p>All simple statements are using <code class=\"xml\"><span class=\"nt\">&lt;statement&gt;</span></code> node, which wraps around nodes like:</p>\n<ul>\n<li><code class=\"xml\"><span class=\"nt\">&lt;assignment&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;pointer-assignment&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;call&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;open&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;close&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;write&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;format&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;print&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;allocate&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;deallocate&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;return&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;stop&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;continue&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;cycle&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;arithmetic-if&gt;</span></code></li>\n<li>\u2026</li>\n</ul>\n<div id=\"assignment\">\n<h4>Assignment</h4>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</pre>\n<pre><span class=\"nt\">&lt;assignment&gt;</span>\n  <span class=\"nt\">&lt;target&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">id=</span><span class=\"s\">\"i\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/target&gt;</span>\n  <span class=\"nt\">&lt;value&gt;</span>\n    <span class=\"nt\">&lt;literal</span> <span class=\"na\">type=</span><span class=\"s\">\"int\"</span> <span class=\"na\">value=</span><span class=\"s\">\"1\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/value&gt;</span>\n<span class=\"nt\">&lt;/assignment&gt;</span>\n</pre>\n</div>\n<div id=\"call\">\n<h4>Call</h4>\n<pre><span class=\"k\">call </span><span class=\"n\">configure</span>\n<span class=\"k\">call </span><span class=\"n\">initialize</span><span class=\"p\">()</span>\n<span class=\"k\">call </span><span class=\"n\">calculate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">call </span><span class=\"n\">something</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"o\">=</span><span class=\"n\">my_value</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"nt\">&lt;call&gt;</span>\n  <span class=\"nt\">&lt;name</span> <span class=\"na\">hasSubscripts=</span><span class=\"s\">\"false\"</span> <span class=\"na\">id=</span><span class=\"s\">\"configure\"</span> <span class=\"na\">type=</span><span class=\"s\">\"procedure\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/call&gt;</span>\n<span class=\"nt\">&lt;call&gt;</span>\n  <span class=\"nt\">&lt;name</span> <span class=\"na\">hasSubscripts=</span><span class=\"s\">\"true\"</span> <span class=\"na\">id=</span><span class=\"s\">\"initialize\"</span> <span class=\"na\">type=</span><span class=\"s\">\"procedure\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;subscripts</span> <span class=\"na\">count=</span><span class=\"s\">\"0\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/name&gt;</span>\n<span class=\"nt\">&lt;/call&gt;</span>\n<span class=\"nt\">&lt;call&gt;</span>\n  <span class=\"nt\">&lt;name</span> <span class=\"na\">hasSubscripts=</span><span class=\"s\">\"true\"</span> <span class=\"na\">id=</span><span class=\"s\">\"calculate\"</span> <span class=\"na\">type=</span><span class=\"s\">\"procedure\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;subscripts</span> <span class=\"na\">count=</span><span class=\"s\">\"2\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;subscript</span> <span class=\"na\">type=</span><span class=\"s\">\"simple\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;literal</span>  <span class=\"na\">type=</span><span class=\"s\">\"int\"</span> <span class=\"na\">value=</span><span class=\"s\">\"1\"</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/subscript&gt;</span>\n      <span class=\"nt\">&lt;subscript</span> <span class=\"na\">type=</span><span class=\"s\">\"simple\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;literal</span> <span class=\"na\">type=</span><span class=\"s\">\"int\"</span> <span class=\"na\">value=</span><span class=\"s\">\"2\"</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/subscript&gt;</span>\n    <span class=\"nt\">&lt;/subscripts&gt;</span>\n  <span class=\"nt\">&lt;/name&gt;</span>\n<span class=\"nt\">&lt;/call&gt;</span>\n<span class=\"nt\">&lt;call</span> <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;name</span> <span class=\"na\">hasSubscripts=</span><span class=\"s\">\"true\"</span> <span class=\"na\">id=</span><span class=\"s\">\"something\"</span> <span class=\"na\">type=</span><span class=\"s\">\"procedure\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;subscripts</span> <span class=\"na\">count=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;argument</span> <span class=\"na\">name=</span><span class=\"s\">\"thing\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;name</span> <span class=\"na\">id=</span><span class=\"s\">\"my_value\"</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/argument&gt;</span>\n    <span class=\"nt\">&lt;/subscripts&gt;</span>\n  <span class=\"nt\">&lt;/name&gt;</span>\n<span class=\"nt\">&lt;/call&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"expressions\">\n<h3>Expressions</h3>\n<p>Expression might be a single node like:</p>\n<ul>\n<li><code class=\"xml\"><span class=\"nt\">&lt;name&gt;</span></code></li>\n<li><code class=\"xml\"><span class=\"nt\">&lt;literal&gt;</span></code></li>\n<li>\u2026</li>\n</ul>\n<p>More complex expressions are built from the <code class=\"xml\"><span class=\"nt\">&lt;operation&gt;</span></code> nodes, each of which contains\na collection of <code class=\"xml\"><span class=\"nt\">&lt;operand&gt;</span></code> and <code class=\"xml\"><span class=\"nt\">&lt;operator&gt;</span></code> nodes. Each operand contains an expression.</p>\n<div id=\"unary-operation\">\n<h4>Unary operation</h4>\n<pre><span class=\"p\">.</span><span class=\"nb\">not</span><span class=\"p\">.</span> <span class=\"n\">flag</span>\n</pre>\n<pre><span class=\"nt\">&lt;operation</span> <span class=\"na\">type=</span><span class=\"s\">\"unary\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;operator</span> <span class=\"na\">operator=</span><span class=\"s\">\".not.\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;operand&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">id=</span><span class=\"s\">\"flag\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/operand&gt;</span>\n<span class=\"nt\">&lt;/operation&gt;</span>\n</pre>\n</div>\n<div id=\"multiary-operation\">\n<h4>Multiary operation</h4>\n<pre><span class=\"s1\">'Hello'</span> <span class=\"o\">//</span> <span class=\"s1\">' world'</span>\n<span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n</pre>\n<pre><span class=\"nt\">&lt;operation</span> <span class=\"na\">type=</span><span class=\"s\">\"multiary\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;operand</span> <span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;literal</span> <span class=\"na\">type=</span><span class=\"s\">\"char\"</span> <span class=\"na\">value=</span><span class=\"s\">\"'Hello'\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/operand&gt;</span>\n  <span class=\"nt\">&lt;operator</span> <span class=\"na\">operator=</span><span class=\"s\">\"//\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;operand&gt;</span>\n    <span class=\"nt\">&lt;literal</span> <span class=\"na\">type=</span><span class=\"s\">\"char\"</span> <span class=\"na\">value=</span><span class=\"s\">\"' world'\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/operand&gt;</span>\n<span class=\"nt\">&lt;/operation&gt;</span>\n<span class=\"nt\">&lt;operation</span> <span class=\"na\">type=</span><span class=\"s\">\"multiary\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;operand&gt;</span>\n    <span class=\"nt\">&lt;literal</span> <span class=\"na\">type=</span><span class=\"s\">\"int\"</span> <span class=\"na\">value=</span><span class=\"s\">\"5\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/operand&gt;</span>\n  <span class=\"nt\">&lt;operator</span> <span class=\"na\">operator=</span><span class=\"s\">\"+\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;operand&gt;</span>\n    <span class=\"nt\">&lt;name</span> <span class=\"na\">id=</span><span class=\"s\">\"x\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/operand&gt;</span>\n<span class=\"nt\">&lt;/operation&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"subroutine\">\n<h3>Subroutine</h3>\n<p>Many complex nodes contain <code class=\"xml\"><span class=\"nt\">&lt;header&gt;</span></code> and <code class=\"xml\"><span class=\"nt\">&lt;body&gt;</span></code>.</p>\n<p>The contents of the header depend on the type of the node. For example, in case of subroutines,\nit contains list of parameters.</p>\n</div>\n<div id=\"function\">\n<h3>Function</h3>\n<pre><span class=\"k\">function </span><span class=\"n\">foo</span>\n  <span class=\"p\">...</span>\n<span class=\"k\">end function </span><span class=\"n\">foo</span>\n</pre>\n<pre><span class=\"nt\">&lt;function</span> <span class=\"na\">name=</span><span class=\"s\">\"foo\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;header&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/header&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/function&gt;</span>\n</pre>\n</div>\n<div id=\"module\">\n<h3>Module</h3>\n<pre><span class=\"k\">module </span><span class=\"n\">abc</span>\n  <span class=\"kt\">integer </span><span class=\"n\">i</span>\n  <span class=\"p\">...</span>\n<span class=\"k\">contains\n  subroutine </span><span class=\"n\">sub</span><span class=\"p\">()</span>\n    <span class=\"p\">...</span>\n  <span class=\"k\">end subroutine </span><span class=\"n\">sub</span>\n  <span class=\"p\">...</span>\n<span class=\"k\">end module </span><span class=\"n\">abc</span>\n</pre>\n<pre><span class=\"nt\">&lt;module</span> <span class=\"na\">name=</span><span class=\"s\">\"abc\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;specification</span> <span class=\"na\">declarations=</span><span class=\"s\">\"1\"</span> <span class=\"na\">implicits=</span><span class=\"s\">\"0\"</span> <span class=\"na\">imports=</span><span class=\"s\">\"0\"</span> <span class=\"na\">uses=</span><span class=\"s\">\"0\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;declaration</span> <span class=\"na\">type=</span><span class=\"s\">\"variable\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;type</span> <span class=\"na\">name=</span><span class=\"s\">\"integer\"</span> <span class=\"na\">type=</span><span class=\"s\">\"intrinsic\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;variables</span> <span class=\"na\">count=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;variable</span> <span class=\"na\">name=</span><span class=\"s\">\"i\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/variables&gt;</span>\n      <span class=\"nt\">&lt;/declaration&gt;</span>\n    <span class=\"nt\">&lt;/specification&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/body&gt;</span>\n  <span class=\"nt\">&lt;members&gt;</span>\n    <span class=\"nt\">&lt;subroutine</span> <span class=\"na\">name=</span><span class=\"s\">\"sub\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;header/&gt;</span>\n      <span class=\"nt\">&lt;body&gt;</span>\n        ...\n      <span class=\"nt\">&lt;/body&gt;</span>\n    <span class=\"nt\">&lt;/subroutine&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/members&gt;</span>\n<span class=\"nt\">&lt;/module&gt;</span>\n</pre>\n</div>\n<div id=\"work-in-progress\">\n<h3>Work in progress</h3>\n<p>Remaining details of AST are not decided yet. For the time being, to see implementation details,\nplease take a look into <a href=\"https://github.com/mbdevpl/open-fortran-parser-xml/blob/v0.6.1/src/fortran/ofp/XMLPrinter.java\" rel=\"nofollow\">src/fortran/ofp/XMLPrinter.java</a>.</p>\n</div>\n<div id=\"unhandled-corner-cases\">\n<h3>Unhandled corner cases</h3>\n<p>in certain corner cases, the parse tree might deviate from the above description.</p>\n<p>This might be due to two main reasons:</p>\n<ol>\n<li>Some feature is not yet implemented in this XML output generator</li>\n<li>The events provided by OFP are not sufficient to generate a correct tree.</li>\n</ol>\n<p>In case 1, all contributions to this project are very welcome. The implementation of any one\nof the missing features might not be very troublesome. The main reason why many of those features\nare not implemented yet is because the Fortran codes the current contributors work with\ndo not use them.</p>\n<p>In case 2, there is a need to dynamically reorder/modify/delete nodes, or otherwise manipulate\nexisting parse tree while adding new nodes. Contributions are also very welcome,\nbut implementation might be much more challenging in this case.</p>\n</div>\n</div>\n<div id=\"java-xml-generator-for-ofp\">\n<h2>Java XML generator for OFP</h2>\n<a href=\"https://github.com/mbdevpl/open-fortran-parser-xml/releases\" rel=\"nofollow\"><img alt=\"latest GitHub release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d304dc08393f17e23e007797217ade660fa59a8e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6d62646576706c2f6f70656e2d666f727472616e2d7061727365722d786d6c2e737667\"></a>\n<p>This is an extension of Open Fortran Parser (OFP), which outputs abstract syntaxt tree (AST)\nof parsed Fortran file in XML format - to a file or to <code class=\"java\"><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"na\">out</span></code>.</p>\n<div id=\"dependencies\">\n<h3>dependencies</h3>\n<ul>\n<li><p>Java 1.7 or later</p>\n</li>\n<li><p>Open Fortran Parser 0.8.5-1</p>\n<p><a href=\"https://github.com/mbdevpl/open-fortran-parser/releases\" rel=\"nofollow\">https://github.com/mbdevpl/open-fortran-parser/releases</a></p>\n<p>This is a patched version of OFP. The list of changes is available at the above link.</p>\n</li>\n<li><p>ANTRL 3.5.2 (dependency of Open Fortran Parser)</p>\n<p><a href=\"http://www.antlr3.org/download/\" rel=\"nofollow\">http://www.antlr3.org/download/</a></p>\n</li>\n<li><p>Apache Commons CLI 1.4 or later</p>\n<p><a href=\"https://commons.apache.org/proper/commons-cli/download_cli.cgi\" rel=\"nofollow\">https://commons.apache.org/proper/commons-cli/download_cli.cgi</a></p>\n</li>\n</ul>\n</div>\n<div id=\"how-to-build\">\n<h3>how to build</h3>\n<p>Get dependencies, either manually, or using the provided script:</p>\n<pre>pip3 install -U -r requirements.txt\npython3 -m open_fortran_parser --deps\n<span class=\"nb\">export</span> <span class=\"nv\">CLASSPATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">CLASSPATH</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span><span class=\"s2\">/lib/*\"</span>\n</pre>\n<p>Build:</p>\n<pre>ant\n<span class=\"nb\">export</span> <span class=\"nv\">CLASSPATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">CLASSPATH</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span><span class=\"s2\">/dist/*\"</span>\n</pre>\n<p>This will create a <cite>.jar</cite> file in <cite>dist</cite> directory, and add it to the Java classpath.</p>\n<p>If you use a different python executable to install requirements, please provide it to ant too:</p>\n<pre>ant -Dpython<span class=\"o\">=</span>/custom/python\n</pre>\n<p>Because the build script by default relies on \u201cpython3\u201d executable.</p>\n</div>\n<div id=\"how-to-run\">\n<h3>how to run</h3>\n<pre>java fortran.ofp.FrontEnd --class fortran.ofp.XMLPrinter <span class=\"se\">\\\n</span>  --output output.xml --verbosity <span class=\"m\">0</span>~100 input.f\n</pre>\n<p>where:</p>\n<ul>\n<li>The <code class=\"bash\">--verbosity</code> flag controls verbosity of the parse tree. Defaluts to <code class=\"bash\"><span class=\"m\">100</span></code>\nwhen omitted.<ul>\n<li>Maximum, <code class=\"bash\"><span class=\"m\">100</span></code>, means that all details picked up by Open Fortran Parser\nwill be preserved.</li>\n<li>Minimum, <code class=\"bash\"><span class=\"m\">0</span></code>, means that tree will contain only what is needed to reconstruct\nthe program without changing it\u2019s meaning.</li>\n</ul>\n</li>\n<li>The <code class=\"bash\">--output</code> flag controls where the XML should be written. Defaults to standard output\nwhen omitted.</li>\n</ul>\n<p>and remaining command-line options are exactly as defined in OFP 0.8.5.</p>\n<p>To parse <code class=\"bash\">some_fortran_file.f</code> and save XML output in <code class=\"bash\">tree.xml</code> with minimum verbosity:</p>\n<pre>java fortran.ofp.FrontEnd --class fortran.ofp.XMLPrinter <span class=\"se\">\\\n</span>  --output tree.xml --verbosity <span class=\"m\">0</span> some_fortran_file.f\n</pre>\n<p>And to dump XML with maximum verbosity to console:</p>\n<pre>java fortran.ofp.FrontEnd --class fortran.ofp.XMLPrinter <span class=\"se\">\\\n</span>  --verbosity <span class=\"m\">100</span> some_fortran_file.f\n</pre>\n</div>\n</div>\n<div id=\"python-wrapper-for-the-generator\">\n<h2>Python wrapper for the generator</h2>\n<a href=\"https://pypi.python.org/pypi/open-fortran-parser\" rel=\"nofollow\"><img alt=\"package version from PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d74ee44e91b3217620d8a2b41703f2caecb6b07f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f70656e2d666f727472616e2d7061727365722e737667\"></a>\n<p>Using the wrapper should not require any special knowledge about the generator itself, other than\nknowing the abstract syntax tree (AST) specification.</p>\n<div id=\"id1\">\n<h3>dependencies</h3>\n<p>Java XML generator for OFP and all of its dependencies.</p>\n<p>Python version 3.5 or later.</p>\n<p>Python libraries as specified in <a href=\"https://github.com/mbdevpl/open-fortran-parser-xml/blob/v0.6.1/requirements.txt\" rel=\"nofollow\">requirements.txt</a>.</p>\n<p>Building and running tests additionally requires packages listed in <a href=\"https://github.com/mbdevpl/open-fortran-parser-xml/blob/v0.6.1/test_requirements.txt\" rel=\"nofollow\">test_requirements.txt</a>.</p>\n</div>\n<div id=\"id2\">\n<h3>how to build</h3>\n<pre>pip3 install -U -r test_requirements.txt\npython3 setup.py sdist --formats<span class=\"o\">=</span>gztar,zip\npython3 setup.py bdist_wheel\n</pre>\n</div>\n<div id=\"how-to-install\">\n<h3>how to install</h3>\n<p>You can simply install from PyPI:</p>\n<pre>pip3 install open-fortran-parser\n</pre>\n<p>Or using any of below commands, when installing from source:</p>\n<pre>pip3 install .\npip3 install dist/&lt;filename&gt;.whl\npip3 install dist/&lt;filename&gt;.tar.gz\npip3 install dist/&lt;filename&gt;.zip\n</pre>\n</div>\n<div id=\"id3\">\n<h3>how to run</h3>\n<p>The wrapper can be used as a script, or as a library.</p>\n<p>When running any installed version, even if installed from source, dependencies are automatically\ninstalled together with the wrapper.</p>\n<p>Before running from source (without installation), however, please follow \u201chow to build\u201d section\nfor Java implementation above.\nYou can make sure that dependencies are configured correctly by running:</p>\n<pre>python3 -m open_fortran_parser --check-deps\n</pre>\n<p>If the depenencies changed since you first ran the wrapper from the source tree, you can cleanup\noutdated dependencies by executing:</p>\n<pre>python3 -m open_fortran_parser --cleanup-deps\n</pre>\n<div id=\"as-script\">\n<h4>as script</h4>\n<pre>$ python3 -m open_fortran_parser -h\nusage: open_fortran_parser [-h] [--version] [-v VERBOSITY]\n                           [--check-dependencies]\n                           [input] [output]\n\nPython wrapper around XML generator for Open Fortran Parser\n\npositional arguments:\n  input                 path to Fortran source code file (default: None)\n  output                writable path for where to store resulting XML,\n                        defaults to stdout if no path provided (default: None)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -v VERBOSITY, --verbosity VERBOSITY\n                        level of verbosity, from 0 to 100 (default: 100)\n  --check-dependencies, --check-deps\n                        check if all required dependencies are present and\n                        exit (default: False)\n\nCopyright 2017-2019 by the contributors, Apache License 2.0,\nhttps://github.com/mbdevpl/open-fortran-parser-xml\n</pre>\n</div>\n<div id=\"as-library\">\n<h4>as library</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">open_fortran_parser</span> <span class=\"kn\">import</span> <span class=\"n\">parse</span>\n\n<span class=\"n\">xml</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'my_legacy_code.f'</span><span class=\"p\">,</span> <span class=\"n\">verbosity</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>More examples available in <a href=\"https://github.com/mbdevpl/open-fortran-parser-xml/blob/v0.6.1/examples.ipynb\" rel=\"nofollow\">examples.ipynb</a>.</p>\n</div>\n</div>\n<div id=\"testing\">\n<h3>testing</h3>\n<p>Run basic tests:</p>\n<pre>python3 -m unittest -v\n<span class=\"nv\">TEST_LONG</span><span class=\"o\">=</span><span class=\"m\">1</span> python3 -m unittest -v  <span class=\"c1\"># this might take a long time...</span>\n</pre>\n<div id=\"code-coverage\">\n<h4>code coverage</h4>\n<p>Getting code coverage results for Java requires JaCoCo agent, and JaCoCo CLI,\nand both are dowonloaded automatically along with other development dependencies.</p>\n<p>Currently, test setup relies on JaCoCo 0.8.3:</p>\n<ul>\n<li>JaCoCo agent 0.8.3 (runtime)</li>\n<li>JaCoCo CLI 0.8.3 (nodeps)</li>\n</ul>\n<p>Run all test and gather code coverage:</p>\n<pre><span class=\"nv\">TEST_LONG</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">TEST_COVERAGE</span><span class=\"o\">=</span><span class=\"m\">1</span> python3 -m coverage run --branch --source . -m unittest -v\n</pre>\n<p>This will take a long while.</p>\n<p>Then, generate results for Python code:</p>\n<pre>python3 -m coverage report --show-missing\npython3 -m coverage html\n</pre>\n<p>Finally, generate results for Java code:</p>\n<pre>java -jar <span class=\"s2\">\"lib/org.jacoco.cli-0.8.3-nodeps.jar\"</span> report <span class=\"s2\">\"jacoco.exec\"</span> --classfiles <span class=\"s2\">\"bin/\"</span> --sourcefiles <span class=\"s2\">\"src/\"</span> --html jacoco\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5792267, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "b5a4d85692149d6560fcc344388e3535", "sha256": "46c3df6317793aa8ff70fe9d44352c3d354636e25dc4320b8bd4b419e20b0995"}, "downloads": -1, "filename": "open_fortran_parser-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b5a4d85692149d6560fcc344388e3535", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11391, "upload_time": "2017-06-06T11:02:19", "upload_time_iso_8601": "2017-06-06T11:02:19.945000Z", "url": "https://files.pythonhosted.org/packages/61/7d/ae96882018032e8649c2ca2ddfe6e76828aa99956a3083df0aa89d6bd6eb/open_fortran_parser-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ce2932bbe4fc3dbd9d6bf1c662aa367", "sha256": "9db840f672d440d7809dcaf6656ac05444a580901602a403c6e3d35b241af1b6"}, "downloads": -1, "filename": "open-fortran-parser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2ce2932bbe4fc3dbd9d6bf1c662aa367", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16882, "upload_time": "2017-06-06T11:02:52", "upload_time_iso_8601": "2017-06-06T11:02:52.144786Z", "url": "https://files.pythonhosted.org/packages/e9/5c/7d93754a23709965c5933431408145d74f7fe74ab7dcbbb6c8591b06c1d4/open-fortran-parser-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e238259dccdc86848390318b74df2343", "sha256": "4188c28390e851a48364fdeaf4139f4a006b6f08d9cbde0c562fb1ef8fc7d935"}, "downloads": -1, "filename": "open_fortran_parser-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e238259dccdc86848390318b74df2343", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12776, "upload_time": "2017-09-06T08:15:57", "upload_time_iso_8601": "2017-09-06T08:15:57.025496Z", "url": "https://files.pythonhosted.org/packages/36/12/9b19a58cebd5d994c08ee75f1efe46ed25f488f8bacc1348ec5b05cc27e7/open_fortran_parser-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a9b785a5ad42d344f4008d8f39559af", "sha256": "fc7b11956a69b765acaeb23e51686c93252cd1f5a5e53514acb812ce654843c0"}, "downloads": -1, "filename": "open-fortran-parser-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6a9b785a5ad42d344f4008d8f39559af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24120, "upload_time": "2017-09-06T08:16:16", "upload_time_iso_8601": "2017-09-06T08:16:16.508706Z", "url": "https://files.pythonhosted.org/packages/7c/01/f6e7215b22aa5223087bdc7bc4f51573f17855a1d5bc3a327bbc050ecbf3/open-fortran-parser-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "dddb461bb6d5df5935ba1fd516227f58", "sha256": "cf0d26e77cd9188dc0899dfe36d0c3b61bfb3964998b7563783eae8757caf7a8"}, "downloads": -1, "filename": "open_fortran_parser-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dddb461bb6d5df5935ba1fd516227f58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3285098, "upload_time": "2017-10-13T00:10:21", "upload_time_iso_8601": "2017-10-13T00:10:21.570837Z", "url": "https://files.pythonhosted.org/packages/80/73/1ff8c36be3a4a5680aca929a65c1908fdbb52430d70fb7f62bcc2ab5f2e6/open_fortran_parser-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f4c49a64480073b28d20e474e36aadd", "sha256": "2dc3177e5419dfe11cd79ad62bc01c48c66278c015b062f24ca155ac93f1a7a8"}, "downloads": -1, "filename": "open-fortran-parser-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8f4c49a64480073b28d20e474e36aadd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3469832, "upload_time": "2017-10-13T00:10:40", "upload_time_iso_8601": "2017-10-13T00:10:40.190673Z", "url": "https://files.pythonhosted.org/packages/d3/28/e63d8f46bd5a8f8e2a5c32f764bdf5bcdd28b33c64ebee7afc73f53ba3bb/open-fortran-parser-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "216783b88259f9daf68fea4849d0e025", "sha256": "7b0d069d47579fedc987962bc399786f196a13ab5b32d2b1bcdbc82e318c47d8"}, "downloads": -1, "filename": "open_fortran_parser-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "216783b88259f9daf68fea4849d0e025", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3338165, "upload_time": "2017-12-10T08:25:16", "upload_time_iso_8601": "2017-12-10T08:25:16.567993Z", "url": "https://files.pythonhosted.org/packages/f0/44/36e6469b76efeed7a3b402c3a661111837bfe1393d79e0020e98adba0f9a/open_fortran_parser-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9665952f770b304043f2dd0d457ddc8", "sha256": "1dd32cfc06e78de105929cd51123aa71665cbad87e14d147700cb30c63b5aa2b"}, "downloads": -1, "filename": "open-fortran-parser-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e9665952f770b304043f2dd0d457ddc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3351639, "upload_time": "2017-12-10T08:25:35", "upload_time_iso_8601": "2017-12-10T08:25:35.860342Z", "url": "https://files.pythonhosted.org/packages/2d/96/4267114b377bb262e2ce3dc52520b61b42f8db94ee0603986fb0fa45ef46/open-fortran-parser-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "ac7bda394e1b914cc1135a1e65fc03de", "sha256": "d2df551312640f5e439b236ccaeccfa263e3c2de66fe8938b5667dac3a569292"}, "downloads": -1, "filename": "open_fortran_parser-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ac7bda394e1b914cc1135a1e65fc03de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3338552, "upload_time": "2017-12-18T14:59:39", "upload_time_iso_8601": "2017-12-18T14:59:39.005687Z", "url": "https://files.pythonhosted.org/packages/2f/19/b1af34f05171a4805c417641a29b90602444c621566f24d60f8e155c7392/open_fortran_parser-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "639ce5464a4e80f49b8ef16e5d8393df", "sha256": "5ab0ae5c66e52bbae659bfb2ccff9cdcb9d04ccb2e3b3e9d9f1e5ff7f8b0a5c7"}, "downloads": -1, "filename": "open-fortran-parser-0.4.1.tar.gz", "has_sig": false, "md5_digest": "639ce5464a4e80f49b8ef16e5d8393df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3350667, "upload_time": "2017-12-18T14:59:58", "upload_time_iso_8601": "2017-12-18T14:59:58.576546Z", "url": "https://files.pythonhosted.org/packages/7a/f2/796575f2274a7ec5f35c9f30dc2df4ac6e2cee488330ce31455818da9d54/open-fortran-parser-0.4.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "2467f46c6932d6cf4092f645db3394c3", "sha256": "535ccf9f3f4aa07675483dc6a40db1f2f813e749c367c3466df7fadfc593b987"}, "downloads": -1, "filename": "open_fortran_parser-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2467f46c6932d6cf4092f645db3394c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3342171, "upload_time": "2018-02-09T07:33:34", "upload_time_iso_8601": "2018-02-09T07:33:34.536078Z", "url": "https://files.pythonhosted.org/packages/83/9b/1fc02cbc1fd7f417988099e26ca746e0f0bf1eaa9075628e3b061131ab75/open_fortran_parser-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83587f977538338a17c75cfe59a32ee9", "sha256": "e3e29e5282f883086f8c0fa5038d85cafa0ae5440479f8c32278ed3709dfa012"}, "downloads": -1, "filename": "open-fortran-parser-0.5.2.tar.gz", "has_sig": false, "md5_digest": "83587f977538338a17c75cfe59a32ee9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3355185, "upload_time": "2018-02-09T07:33:43", "upload_time_iso_8601": "2018-02-09T07:33:43.030001Z", "url": "https://files.pythonhosted.org/packages/f6/54/78d940740b9a8170aa50692bececf49f2b8ed79d6d486e5c7e42129c376c/open-fortran-parser-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "9ed5e9aec188df9e8823f22a0fae6ebc", "sha256": "fea5ead821de94cd7235a7078f4322de772459cd83528a8a7bdb3da978eccf6e"}, "downloads": -1, "filename": "open_fortran_parser-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9ed5e9aec188df9e8823f22a0fae6ebc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3338822, "upload_time": "2018-08-15T20:45:30", "upload_time_iso_8601": "2018-08-15T20:45:30.562646Z", "url": "https://files.pythonhosted.org/packages/bc/7d/d61616839391a79e6cb929ae7fe1ada4bccbcc3f2747abb513d9154fc31b/open_fortran_parser-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c40c6864dafb6270c94d2013ce3c5533", "sha256": "04acd0161ee00675c0b889ac1168aff1f94cb8e8a42a79a04133adce25a5e805"}, "downloads": -1, "filename": "open-fortran-parser-0.5.3.tar.gz", "has_sig": false, "md5_digest": "c40c6864dafb6270c94d2013ce3c5533", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3358026, "upload_time": "2018-08-15T20:45:34", "upload_time_iso_8601": "2018-08-15T20:45:34.448171Z", "url": "https://files.pythonhosted.org/packages/6f/1f/d9fd3da74dac55825bfd54a8e4e45b51f5d3d3fb9cd38c002323b86d0762/open-fortran-parser-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "9c1d9e58b8e9cb13138532310ed8efa4", "sha256": "ca699282b7dbf6df59cbb63225a915f27c082ef8c246d02e60bb81270dff1557"}, "downloads": -1, "filename": "open_fortran_parser-0.5.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9c1d9e58b8e9cb13138532310ed8efa4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3344482, "upload_time": "2019-04-03T01:21:32", "upload_time_iso_8601": "2019-04-03T01:21:32.678158Z", "url": "https://files.pythonhosted.org/packages/6f/3b/a3b7331bdf730a638d244c40d29bba7f4c296c0d9290dc6cad8cc6e9a5be/open_fortran_parser-0.5.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "049e6bbac1331a37094ca37529cf6118", "sha256": "8e1c955ff41c859a6e7912d814c08d373faecd9fb58a162e6884c151bc55971b"}, "downloads": -1, "filename": "open-fortran-parser-0.5.4.tar.gz", "has_sig": false, "md5_digest": "049e6bbac1331a37094ca37529cf6118", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3359073, "upload_time": "2019-04-03T01:21:35", "upload_time_iso_8601": "2019-04-03T01:21:35.770089Z", "url": "https://files.pythonhosted.org/packages/b3/cd/0cfb6f4bba4c5265dd386893271d2635a69a5f145feafd0d01adabafa0fd/open-fortran-parser-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "8e4e3a73f85a826e86e914b1a8416fed", "sha256": "3c1111a5b464472f3b5ce75b0ac76421ef3683aec32125622ecfff26f4157a8f"}, "downloads": -1, "filename": "open_fortran_parser-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8e4e3a73f85a826e86e914b1a8416fed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3344589, "upload_time": "2019-04-05T09:33:02", "upload_time_iso_8601": "2019-04-05T09:33:02.563778Z", "url": "https://files.pythonhosted.org/packages/77/4a/4bc14b1a14a1ed009dc745d6a291b1dce47f360d3aced502df2a1889963a/open_fortran_parser-0.5.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32152ceccd6aacb990d61a6406dafd2b", "sha256": "01e2c754e3494e71222385efa7152aecf7fbf3b336312f8ba243a795373cd987"}, "downloads": -1, "filename": "open-fortran-parser-0.5.5.tar.gz", "has_sig": false, "md5_digest": "32152ceccd6aacb990d61a6406dafd2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3359993, "upload_time": "2019-04-05T09:33:19", "upload_time_iso_8601": "2019-04-05T09:33:19.560960Z", "url": "https://files.pythonhosted.org/packages/28/0a/7ff44055b248201cc4f5c6efcf39066b91c8303efc922a12829f482f09b0/open-fortran-parser-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "c5b8393f5409fd55ab554912f65b7b9d", "sha256": "42d68d1de4c3aa8df223610b2d95666efeedf334d703e44e0f4394898aed2f29"}, "downloads": -1, "filename": "open_fortran_parser-0.5.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c5b8393f5409fd55ab554912f65b7b9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3346332, "upload_time": "2019-04-09T12:40:09", "upload_time_iso_8601": "2019-04-09T12:40:09.275789Z", "url": "https://files.pythonhosted.org/packages/33/f2/b0c114dc0b80a8f691773c8c589a6b9d8eb85d7b9d6220aed804294a6c17/open_fortran_parser-0.5.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2c118ebbbfbe9fec65e0b6191c520d7", "sha256": "462745cfaeb2e39dae6f100bd8430722333a6363f21a5de7d9e873bac6c8aea3"}, "downloads": -1, "filename": "open-fortran-parser-0.5.6.tar.gz", "has_sig": false, "md5_digest": "f2c118ebbbfbe9fec65e0b6191c520d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3362552, "upload_time": "2019-04-09T12:40:26", "upload_time_iso_8601": "2019-04-09T12:40:26.050765Z", "url": "https://files.pythonhosted.org/packages/0d/2c/aa98376155f2a33bbce52f6ef430c0d123f7976e058bad8454a78ee06087/open-fortran-parser-0.5.6.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "5f1679bd2e5738e572ffa19ad74958c6", "sha256": "b4cfda01e11de8c6622db50a95784b307c8d11bc595ae4bfe43400c790c0527b"}, "downloads": -1, "filename": "open_fortran_parser-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5f1679bd2e5738e572ffa19ad74958c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3616627, "upload_time": "2019-04-10T02:19:00", "upload_time_iso_8601": "2019-04-10T02:19:00.279966Z", "url": "https://files.pythonhosted.org/packages/7b/4a/cd4d6a26e5d94301a45aaf005e05f8f7137203c11dbb0547223bd52c6784/open_fortran_parser-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ca77096e3012c3cd28fae7c01927395", "sha256": "795be25f2d3b156f0a3835d0b8b0a570e11360f9b8ee5b8712851c1e3349eb07"}, "downloads": -1, "filename": "open-fortran-parser-0.6.0.tar.gz", "has_sig": false, "md5_digest": "1ca77096e3012c3cd28fae7c01927395", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3632574, "upload_time": "2019-04-10T02:19:18", "upload_time_iso_8601": "2019-04-10T02:19:18.365473Z", "url": "https://files.pythonhosted.org/packages/c6/bb/361e797cc8ca119a5574116f16d6d5c84069428b93b292680a57d8ec43a0/open-fortran-parser-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "08adaa63fd9d08baec3ec2edc07bb495", "sha256": "f0cf4f9e1abc9e5f1e88f80dbbd86dc22a51e487eb2c687cf0d580f3de2e8495"}, "downloads": -1, "filename": "open_fortran_parser-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "08adaa63fd9d08baec3ec2edc07bb495", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3617187, "upload_time": "2019-09-06T13:30:24", "upload_time_iso_8601": "2019-09-06T13:30:24.289536Z", "url": "https://files.pythonhosted.org/packages/aa/e0/c355c75cc46f9438f0f477794cc3952d36cd05cd7dc24c3e3e179e640e82/open_fortran_parser-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ce26c24afd71cead2b97b152929facc", "sha256": "843f9387549e3d1c21122e9ea3456000b5071e3b443826b3be795164816bb564"}, "downloads": -1, "filename": "open-fortran-parser-0.6.1.tar.gz", "has_sig": false, "md5_digest": "1ce26c24afd71cead2b97b152929facc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3633268, "upload_time": "2019-09-06T13:30:28", "upload_time_iso_8601": "2019-09-06T13:30:28.402779Z", "url": "https://files.pythonhosted.org/packages/b0/10/d6544583cd55c53419f07314f604fdf3c550b224bfd968068e2e042e606c/open-fortran-parser-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "08adaa63fd9d08baec3ec2edc07bb495", "sha256": "f0cf4f9e1abc9e5f1e88f80dbbd86dc22a51e487eb2c687cf0d580f3de2e8495"}, "downloads": -1, "filename": "open_fortran_parser-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "08adaa63fd9d08baec3ec2edc07bb495", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3617187, "upload_time": "2019-09-06T13:30:24", "upload_time_iso_8601": "2019-09-06T13:30:24.289536Z", "url": "https://files.pythonhosted.org/packages/aa/e0/c355c75cc46f9438f0f477794cc3952d36cd05cd7dc24c3e3e179e640e82/open_fortran_parser-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ce26c24afd71cead2b97b152929facc", "sha256": "843f9387549e3d1c21122e9ea3456000b5071e3b443826b3be795164816bb564"}, "downloads": -1, "filename": "open-fortran-parser-0.6.1.tar.gz", "has_sig": false, "md5_digest": "1ce26c24afd71cead2b97b152929facc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3633268, "upload_time": "2019-09-06T13:30:28", "upload_time_iso_8601": "2019-09-06T13:30:28.402779Z", "url": "https://files.pythonhosted.org/packages/b0/10/d6544583cd55c53419f07314f604fdf3c550b224bfd968068e2e042e606c/open-fortran-parser-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:56 2020"}