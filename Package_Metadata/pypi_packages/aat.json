{"info": {"author": "Tim Paine", "author_email": "timothy.k.paine@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# AAT\nAsyncAlgoTrading\n\n[![Build Status](https://travis-ci.org/timkpaine/aat.svg?branch=master)](https://travis-ci.org/timkpaine/aat)\n[![Coverage](https://codecov.io/gh/timkpaine/aat/coverage.svg?branch=master&token=JGqz8ChQxd)](https://codecov.io/gh/timkpaine/aat)\n[![BCH compliance](https://bettercodehub.com/edge/badge/timkpaine/aat?branch=master)](https://bettercodehub.com/)\n[![License](https://img.shields.io/github/license/timkpaine/aat.svg)](https://pypi.python.org/pypi/aat)\n[![PyPI](https://img.shields.io/pypi/v/aat.svg)](https://pypi.python.org/pypi/aat)\n[![Docs](https://img.shields.io/readthedocs/aat.svg)](http://aat.readthedocs.io/en/latest/)\n\n`aat` is a framework for writing algorithmic trading strategies in python. It is designed to be modular and extensible, and is the core engine powering [AlgoCoin](https://github.com/timkpaine/algo-coin).\n\nIt comes with support for live trading across (and between) multiple exchanges, fully integrated backtesting support, slippage and transaction cost modeling, and robust reporting and risk mitigation through manual and programatic algorithm controls.\n\nLike Zipline, the inspriation for this system, `aat` exposes a single strategy class which is utilized for both live trading and backtesting. The strategy class is simple enough to write and test algorithms quickly, but extensible enough to allow for complex slippage and transaction cost modeling, as well as mid- and post- trade analysis.  \n\n\n# Overview\n`aat` is composed of 4 major parts. \n\n- trading engine\n- risk management engine\n- execution engine\n- backtest engine\n\n## Trading Engine\nThe trading engine initializes all exchanges and strategies, then martials data, trade requests, and trade responses between the strategy, risk, execution, and exchange objects, while keeping track of high-level statistics on the system\n\n## Risk Management Engine\nThe risk management engine enforces trading limits, making sure that stategies are limited to certain risk profiles. It can modify or remove trade requests prior to execution depending on user preferences and outstanding positions and orders.\n\n## Execution engine\nThe execution engine is a simple passthrough to the underlying exchanges. It provides a unified interface for creating various types of orders.\n\n## Backtest engine\nThe backtest engine provides the ability to run the same stragegy offline against historical data.\n\n\n# Trading Strategy\nThe core element of `aat` is the trading strategy interface. It is the union of the `Strategy` interface, which provides methods to buy and sell, with the `Callback` interface, which provides callbacks in response to data. Users subclass this class in order to implement their strategies\n\n## Callback\n```python3\nclass Callback(metaclass=ABCMeta):\n    @abstractmethod\n    def onTrade(self, data: MarketData):\n        '''onTrade'''\n\n    @abstractmethod\n    def onOpen(self, data: MarketData):\n        '''onOpen'''\n\n    @abstractmethod\n    def onFill(self, resp: TradeResponse):\n        '''onFill'''\n\n    @abstractmethod\n    def onCancel(self, data: MarketData):\n        '''onCancel'''\n\n    @abstractmethod\n    def onChange(self, data: MarketData):\n        '''onChange'''\n\n    @abstractmethod\n    def onError(self, data: MarketData):\n        '''onError'''\n```\n\n## Strategy\n```python3\nclass Strategy(metaclass=ABCMeta):\n    @abstractmethod\n    def requestBuy(self,\n                   callback: Callback,\n                   data: MarketData):\n        '''requestBuy'''\n\n    @abstractmethod\n    def requestSell(self,\n                    callback: Callback,\n                    data: MarketData):\n        '''requestSell'''\n```\n\n## Example Strategy\nHere is a simple trading strategy that buys once and holds. \n\n```python3\nfrom aat.strategy import TradingStrategy\nfrom aat.structs import MarketData, TradeRequest, TradeResponse\nfrom aat.enums import Side, OrderType\nfrom aat.logging import STRAT as slog, ERROR as elog\n\nclass BuyAndHoldStrategy(TradingStrategy):\n    def __init__(self) -> None:\n        super(BuyAndHoldStrategy, self).__init__()\n        self.bought = None\n\n    def onFill(self, res: TradeResponse) -> None:\n        self.bought = res\n        log.info('d->g:bought %.2f @ %.2f' % (res.volume, res.price))\n\n    def onTrade(self, data: MarketData) -> bool:\n        if self.bought is None:\n            req = TradeRequest(side=Side.BUY,\n                               volume=1,\n                               instrument=data.instrument,\n                               order_type=OrderType.MARKET,\n                               exchange=data.exchange,\n                               price=data.price,\n                               time=data.time)\n            log.info(\"requesting buy : %s\", req)\n            self.requestBuy(req)\n            self.bought = 'pending'\n    def onError(self, e) -> None:\n        elog.critical(e)\n\n    def onChange(self, data: MarketData) -> None:\n        pass\n\n    def onCancel(self, data: MarketData) -> None:\n        pass\n\n    def onOpen(self, data: MarketData) -> None:\n        pass\n```\n\nTrading strategies have a number of required methods for handling messages:\n\n- onTrade: Called when a trade occurs\n- onChange: Called when an order is modified\n- onFill: Called when a strategy's trade executes\n- onCancel: Called when an order is cancelled\n- onError: Called when an error occurs\n- onOpen: Called when a new order occurs\n\nThere are other optional callbacks for more granular processing:\n- onStart: Called when the program starts\n- onHalt: Called when trading is halted\n- onContinue: Called when trading continues\n- onExit: Called when the program shuts down\n\nThere are also several optional callbacks for backtesting:\n\n- slippage\n- transactionCost\n- onAnalyze\n    - called after trading engine has processed all data, used to visualize algorithm performance\n\n# Setting up and running\nAn instance of `TradingStrategy` class is able to run live or against a set of historical trade/quote data. When instantiating a `TradingEngine` object with a `TradingEngineConfig` object, the `TradingEngineConfig` has a `type` which can be set to:\n\n- `live` - live trading against the exchange\n- `simulation` - live trading against the exchange, but with order entry disabled\n- `sandbox` - live trading against the exchange's sandbox instance\n- `backtest` - offline trading against historical OHLCV data\n\nTo test our strategy in any mode, we will need to setup exchange keys to get historical data, stream market data, and make new orders.\n\n## API Keys\nYou should creat API keys for exchanges you wish to trade on. For this example, we will assume a Coinbase Pro account with trading enabled. I usually put my keys in a set of shell scripts that are gitignored, so I don't post anything by accident. My scripts look something like:\n\n```bash\nexport COINBASE_API_KEY=...\nexport COINBASE_API_SECRET=...\nexport COINBASE_API_PASS=...\n```\n\nPrior to running, I source the keys I need. \n\n### Sandboxes\nCurrently only the Gemini sandbox is supported, the other exchanges have discontinued theirs. To run in sandbox, set `TradingEngineConfig.type` to Sandbox.\n\n### Live Trading\nWhen you want to run live, set `TradingEngineConfig.type` to Live. You will want to become familiar with the risk and execution engines, as these control things like max drawdown, max risk accrual, execution eagerness, etc.\n\n### Simulation Trading\nWhen you want to run an algorithm live, but don't yet trust that it can make money, set `TradingEngineConfig.type` to simulation. This will let it run against real money, but disallow order entry. You can then set things like slippage and transaction costs as you would in a backtest.\n\n## Testing\nLet's make sure everything worked out by running a sample strategy (that doesnt make and trades!) on the Coinbase Pro exchange:\n\n```bash\npython3 -m algocoin --simulation --exchanges=coinbase\n```\n\nYou should see the following output:\n\n```bash\npython3 -m algocoin --simulation --exchanges=coinbase\n2019-06-01 17:54:17,468 CRITICAL -- MainProcess parser.py:151 --\n2019-06-01 17:54:17,469 CRITICAL -- MainProcess parser.py:152 -- Simulation trading\n2019-06-01 17:54:17,469 CRITICAL -- MainProcess parser.py:153 --\n2019-06-01 17:54:34,570 CRITICAL -- MainProcess trading.py:194 --\n2019-06-01 17:54:34,570 CRITICAL -- MainProcess trading.py:195 -- Server listening on port: 8081\n2019-06-01 17:54:34,571 CRITICAL -- MainProcess trading.py:196 --\n2019-06-01 17:54:34,998 CRITICAL -- MainProcess market_data.py:68 -- Starting algo trading: ExchangeType.COINBASE\n```\n\n## Config\nBecause there are a variety of options, a config file is generally more usable. Here is an example configuration for backtesting the Buy-and-hold strategy above on CoinbasePro:\n\n```bash\n> cat backtest.cfg\n[general]\nverbose=1\nprint=0\nTradingType=backtest\n\n[exchange]\nexchanges=coinbase\ncurrency_pairs=BTC/USD\n\n[strategy]\nstrategies =\n    aat.strategies.buy_and_hold.BuyAndHoldStrategy\n\n[risk]\nmax_drawdown = 100.0\nmax_risk = 100.0\ntotal_funds = 10.0\n```\n\n## Analyzing an algorithm\nWe can run the above config by running:\n```bash\npython3 -m algocoin --config=./backtest.cfg\n```\n\nWe should see the following output:\n```bash\n2019-06-01 17:58:40,173 INFO -- MainProcess utils.py:247 -- running in verbose mode!\n2019-06-01 17:58:40,174 CRITICAL -- MainProcess parser.py:165 --\n2019-06-01 17:58:40,174 CRITICAL -- MainProcess parser.py:166 -- Backtesting\n2019-06-01 17:58:40,174 CRITICAL -- MainProcess parser.py:167 --\n2019-06-01 17:58:40,176 CRITICAL -- MainProcess trading.py:106 -- Registering strategy: <class 'aat.strategies.buy_and_hold.BuyAndHoldStrategy'>\n2019-06-01 17:58:40,177 INFO -- MainProcess backtest.py:25 -- Starting....\n2019-06-01 17:58:41,338 INFO -- MainProcess buy_and_hold.py:28 -- requesting buy : <BTC/USD-Side.BUY:1.0@8567.06-OrderType.MARKET-ExchangeType.COINBASE>\n2019-06-01 17:58:41,339 INFO -- MainProcess risk.py:59 -- Requesting 1.000000 @ 8567.060000\n2019-06-01 17:58:41,339 INFO -- MainProcess risk.py:80 -- Risk check passed for partial order: <BTC/USD-Side.BUY:1.0@8567.06-OrderType.MARKET-ExchangeType.COINBASE>\n2019-06-01 17:58:41,339 INFO -- MainProcess trading.py:244 -- Risk check passed\n2019-06-01 17:58:41,339 INFO -- MainProcess trading.py:292 -- Slippage BT- <BTC/USD-Side.BUY:1.0@8567.916706-TradeResult.FILLED-ExchangeType.COINBASE>\n2019-06-01 17:58:41,340 INFO -- MainProcess trading.py:295 -- TXN cost BT- <BTC/USD-Side.BUY:1.0@8589.336497765-TradeResult.FILLED-ExchangeType.COINBASE>\n2019-06-01 17:58:41,340 INFO -- MainProcess buy_and_hold.py:14 -- d->g:bought 1.00 @ 8589.34\n2019-06-01 17:58:41,340 INFO -- MainProcess backtest.py:42 -- <BTC/USD-1.29050038@8567.06-TickType.TRADE-ExchangeType.COINBASE>\n...\n2019-06-01 17:58:41,474 INFO -- MainProcess backtest.py:42 -- <BTC/USD-2.35773043@8595.0-TickType.TRADE-ExchangeType.COINBASE>\n2019-06-01 17:58:41,474 INFO -- MainProcess backtest.py:33 -- Backtest done, running analysis.\n```\n\nThis will call our `onAnalyze` function, which in this case is implemented to plot some performance characteristics with `matplotlib`.\n\n```python3\n        import pandas\n        import numpy as np\n        import matplotlib, matplotlib.pyplot as plt\n        import seaborn as sns\n        matplotlib.rc('font', **{'size': 5})\n\n        # extract data from trading engine\n        portfolio_value = engine.portfolio_value()\n        requests = engine.query().query_tradereqs()\n        responses = engine.query().query_traderesps()\n        trades = pandas.DataFrame([{'time': x.time, 'price': x.price} for x in engine.query().query_trades(instrument=requests[0].instrument, page=None)])\n        trades.set_index(['time'], inplace=True)\n\n        # format into pandas\n        pd = pandas.DataFrame(portfolio_value, columns=['time', 'value', 'pnl'])\n        pd.set_index(['time'], inplace=True)\n\n        # setup charting\n        sns.set_style('darkgrid')\n        fig = plt.figure()\n        ax1 = fig.add_subplot(311)\n        ax2 = fig.add_subplot(312)\n        ax3 = fig.add_subplot(313)\n\n        # plot algo performance\n        pd.plot(ax=ax1, y=['value'], legend=False, fontsize=5, rot=0)\n\n        # plot up/down chart\n        pd['pos'] = pd['pnl']\n        pd['neg'] = pd['pnl']\n        pd['pos'][pd['pos'] <= 0] = np.nan\n        pd['neg'][pd['neg'] > 0] = np.nan\n        pd.plot(ax=ax2, y=['pos', 'neg'], kind='area', stacked=False, color=['green', 'red'], legend=False, linewidth=0, fontsize=5, rot=0)\n\n        # annotate with key data\n        ax1.set_title('Performance')\n        ax1.set_ylabel('Portfolio value($)')\n        for xy in [portfolio_value[0][:2]] + [portfolio_value[-1][:2]]:\n            ax1.annotate('$%s' % xy[1], xy=xy, textcoords='data')\n            ax3.annotate('$%s' % xy[1], xy=xy, textcoords='data')\n\n        # plot trade intent/trade action\n        ax3.set_ylabel('Intent/Action')\n        ax3.set_xlabel('Date')\n\n        ax3.plot(trades)\n        ax3.plot([x.time for x in requests if x.side == Side.BUY],\n                 [x.price for x in requests if x.side == Side.BUY],\n                 '2', color='y')\n        ax3.plot([x.time for x in requests if x.side == Side.SELL],\n                 [x.price for x in requests if x.side == Side.SELL],\n                 '1', color='y')\n        ax3.plot([x.time for x in responses if x.side == Side.BUY],  # FIXME\n                 [x.price for x in responses if x.side == Side.BUY],\n                 '^', color='g')\n        ax3.plot([x.time for x in responses if x.side == Side.SELL],  # FIXME\n                 [x.price for x in responses if x.side == Side.SELL],\n                 'v', color='r')\n\n        # set same limits\n        y_bot, y_top = ax1.get_ylim()\n        x_bot, x_top = ax1.get_xlim()\n        ax3.set_ylim(y_bot, y_top)\n        ax1.set_xlim(x_bot, x_top)\n        ax2.set_xlim(x_bot, x_top)\n        ax3.set_xlim(x_bot, x_top)\n        dif = (x_top-x_bot)*.01\n        ax1.set_xlim(x_bot-dif, x_top+dif)\n        ax2.set_xlim(x_bot-dif, x_top+dif)\n        ax3.set_xlim(x_bot-dif, x_top+dif)\n        plt.show()\n```\n\n[![](docs/img/bt.png)]()\n\n\nWe can see that our algorithm also implemented `slippage` and `transactionCost`, resulting in a worse execution price:\n\n```python3\n    def slippage(self, resp: TradeResponse) -> TradeResponse:\n        slippage = resp.price * .0001  # .01% price impact\n        if resp.side == Side.BUY:\n            # price moves against (up)\n            resp.slippage = slippage\n            resp.price += slippage\n        else:\n            # price moves against (down)\n            resp.slippage = -slippage\n            resp.price -= slippage\n        return resp\n\n    def transactionCost(self, resp: TradeResponse) -> TradeResponse:\n        txncost = resp.price * resp.volume * .0025  # gdax is 0.0025 max fee\n        if resp.side == Side.BUY:\n            # price moves against (up)\n            resp.transaction_cost = txncost\n            resp.price += txncost\n        else:\n            # price moves against (down)\n            resp.transaction_cost = -txncost\n            resp.price -= txncost\n        return resp\n```\n\n# Extending\nApart from writing new strategies, this library can be extended by adding new exchanges. These are pretty simple. For cryptocurrency exchanges, I rely heavily on `ccxt`, `asyncio`, and websocket libraries.\n\n## Example\nHere is the coinbase exchange. Most of the code is to manage different websocket subscription options, and to convert between `aat`, `ccxt` and exchange-specific formatting of things like symbols, order types, etc. \n\n```python3\nclass CoinbaseExchange(Exchange):\n    @lru_cache(None)\n    def subscription(self):\n        return [json.dumps({\"type\": \"subscribe\", \"product_id\": x.value[0].value + '-' + x.value[1].value}) for x in self.options().currency_pairs]\n\n    @lru_cache(None)\n    def heartbeat(self):\n        return json.dumps({\"type\": \"heartbeat\", \"on\": True})\n\n    def tickToData(self, jsn: dict) -> MarketData:\n        '''convert a jsn tick off the websocket to a MarketData struct'''\n        if jsn.get('type') == 'received':\n            return\n\n        s = jsn.get('type').upper()\n        reason = jsn.get('reason', '').upper()\n        if s == 'MATCH' or (s == 'DONE' and reason == 'FILLED'):\n            typ = TickType.TRADE\n        elif s in ('OPEN', 'DONE', 'CHANGE', 'HEARTBEAT'):\n            if reason == 'CANCELED':\n                typ = TickType.CANCEL\n            elif s == 'DONE':\n                typ = TickType.FILL\n            else:\n                typ = TickType_from_string(s.upper())\n        else:\n            typ = TickType.ERROR\n\n        order_id = jsn.get('order_id', jsn.get('maker_order_id', ''))\n        time = parse_date(jsn.get('time')) if jsn.get('time') else datetime.now()\n\n        if typ in (TickType.CANCEL, TickType.OPEN):\n            volume = float(jsn.get('remaining_size', 'nan'))\n        else:\n            volume = float(jsn.get('size', 'nan'))\n        price = float(jsn.get('price', 'nan'))\n\n        currency_pair = str_to_currency_pair_type(jsn.get('product_id')) if typ != TickType.ERROR else PairType.NONE\n\n        instrument = Instrument(underlying=currency_pair)\n\n        order_type = str_to_order_type(jsn.get('order_type', ''))\n        side = str_to_side(jsn.get('side', ''))\n        remaining_volume = float(jsn.get('remaining_size', 0.0))\n\n        sequence = int(jsn.get('sequence', -1))\n        ret = MarketData(order_id=order_id,\n                         time=time,\n                         volume=volume,\n                         price=price,\n                         type=typ,\n                         instrument=instrument,\n                         remaining=remaining_volume,\n                         side=side,\n                         exchange=self.exchange(),\n                         order_type=order_type,\n                         sequence=sequence)\n        return ret\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/timkpaine/aat", "keywords": "algorithmic trading cryptocurrencies", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "aat", "package_url": "https://pypi.org/project/aat/", "platform": "", "project_url": "https://pypi.org/project/aat/", "project_urls": {"Homepage": "https://github.com/timkpaine/aat"}, "release_url": "https://pypi.org/project/aat/0.0.3/", "requires_dist": ["aiohttp (>=3.5.4)", "aiostream (>=0.3.1)", "ccxt (>=1.18.529)", "cycler (>=0.10.0)", "Jinja2 (>=2.10)", "matplotlib (>=2.2.2)", "numpy (>=1.14.5)", "pandas (>=0.23.3)", "perspective-python (<0.4.0,>=0.1.6)", "pyarrow (>=0.11.1)", "scipy (>=1.1.0)", "seaborn (>=0.8.1)", "sphinx (>=1.7.5)", "six (>=1.10.0)", "requests (>=2.13.0)", "tornado (>=5.1)", "traitlets (>=4.3.2)", "ujson (>=1.35)", "uvloop (>=0.12.2)", "websocket-client (>=0.40.0)", "yarl (==1.1.0)", "flake8 (>=3.7.8) ; extra == 'dev'", "mock ; extra == 'dev'", "pybind11 (>=2.4.0) ; extra == 'dev'", "pytest (>=4.3.0) ; extra == 'dev'", "pytest-cov (>=2.6.1) ; extra == 'dev'", "Sphinx (>=1.8.4) ; extra == 'dev'", "sphinx-markdown-builder (>=0.5.2) ; extra == 'dev'", "aiohttp (>=3.5.4) ; extra == 'dev'", "aiostream (>=0.3.1) ; extra == 'dev'", "ccxt (>=1.18.529) ; extra == 'dev'", "cycler (>=0.10.0) ; extra == 'dev'", "Jinja2 (>=2.10) ; extra == 'dev'", "matplotlib (>=2.2.2) ; extra == 'dev'", "numpy (>=1.14.5) ; extra == 'dev'", "pandas (>=0.23.3) ; extra == 'dev'", "perspective-python (<0.4.0,>=0.1.6) ; extra == 'dev'", "pyarrow (>=0.11.1) ; extra == 'dev'", "scipy (>=1.1.0) ; extra == 'dev'", "seaborn (>=0.8.1) ; extra == 'dev'", "sphinx (>=1.7.5) ; extra == 'dev'", "six (>=1.10.0) ; extra == 'dev'", "requests (>=2.13.0) ; extra == 'dev'", "tornado (>=5.1) ; extra == 'dev'", "traitlets (>=4.3.2) ; extra == 'dev'", "ujson (>=1.35) ; extra == 'dev'", "uvloop (>=0.12.2) ; extra == 'dev'", "websocket-client (>=0.40.0) ; extra == 'dev'", "yarl (==1.1.0) ; extra == 'dev'"], "requires_python": ">=3.7", "summary": "Algorithmic trading library", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AAT</h1>\n<p>AsyncAlgoTrading</p>\n<p><a href=\"https://travis-ci.org/timkpaine/aat\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e514a6fdef56b3b326ad5857fd1a1855af06bc64/68747470733a2f2f7472617669732d63692e6f72672f74696d6b7061696e652f6161742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/timkpaine/aat\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/288c69c02f8c122e8ab5fecb82847799a905b344/68747470733a2f2f636f6465636f762e696f2f67682f74696d6b7061696e652f6161742f636f7665726167652e7376673f6272616e63683d6d617374657226746f6b656e3d4a47717a384368517864\"></a>\n<a href=\"https://bettercodehub.com/\" rel=\"nofollow\"><img alt=\"BCH compliance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5deaf1802f7be162470084d011a2018b913ff54/68747470733a2f2f626574746572636f64656875622e636f6d2f656467652f62616467652f74696d6b7061696e652f6161743f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/aat\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/950ba555021e32cbd5f528aea16d0819d37d7650/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f74696d6b7061696e652f6161742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aat\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/081e1b4e0c2213eaba6e17666c904c7181f2b890/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6161742e737667\"></a>\n<a href=\"http://aat.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74265b7d0d55d020941d177b9e45f5ef9317a1e2/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f6161742e737667\"></a></p>\n<p><code>aat</code> is a framework for writing algorithmic trading strategies in python. It is designed to be modular and extensible, and is the core engine powering <a href=\"https://github.com/timkpaine/algo-coin\" rel=\"nofollow\">AlgoCoin</a>.</p>\n<p>It comes with support for live trading across (and between) multiple exchanges, fully integrated backtesting support, slippage and transaction cost modeling, and robust reporting and risk mitigation through manual and programatic algorithm controls.</p>\n<p>Like Zipline, the inspriation for this system, <code>aat</code> exposes a single strategy class which is utilized for both live trading and backtesting. The strategy class is simple enough to write and test algorithms quickly, but extensible enough to allow for complex slippage and transaction cost modeling, as well as mid- and post- trade analysis.</p>\n<h1>Overview</h1>\n<p><code>aat</code> is composed of 4 major parts.</p>\n<ul>\n<li>trading engine</li>\n<li>risk management engine</li>\n<li>execution engine</li>\n<li>backtest engine</li>\n</ul>\n<h2>Trading Engine</h2>\n<p>The trading engine initializes all exchanges and strategies, then martials data, trade requests, and trade responses between the strategy, risk, execution, and exchange objects, while keeping track of high-level statistics on the system</p>\n<h2>Risk Management Engine</h2>\n<p>The risk management engine enforces trading limits, making sure that stategies are limited to certain risk profiles. It can modify or remove trade requests prior to execution depending on user preferences and outstanding positions and orders.</p>\n<h2>Execution engine</h2>\n<p>The execution engine is a simple passthrough to the underlying exchanges. It provides a unified interface for creating various types of orders.</p>\n<h2>Backtest engine</h2>\n<p>The backtest engine provides the ability to run the same stragegy offline against historical data.</p>\n<h1>Trading Strategy</h1>\n<p>The core element of <code>aat</code> is the trading strategy interface. It is the union of the <code>Strategy</code> interface, which provides methods to buy and sell, with the <code>Callback</code> interface, which provides callbacks in response to data. Users subclass this class in order to implement their strategies</p>\n<h2>Callback</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Callback</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ABCMeta</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onTrade</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''onTrade'''</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onOpen</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''onOpen'''</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onFill</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">:</span> <span class=\"n\">TradeResponse</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''onFill'''</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onCancel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''onCancel'''</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onChange</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''onChange'''</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onError</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''onError'''</span>\n</pre>\n<h2>Strategy</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Strategy</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ABCMeta</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">requestBuy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n                   <span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callback</span><span class=\"p\">,</span>\n                   <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''requestBuy'''</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">requestSell</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n                    <span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callback</span><span class=\"p\">,</span>\n                    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''requestSell'''</span>\n</pre>\n<h2>Example Strategy</h2>\n<p>Here is a simple trading strategy that buys once and holds.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aat.strategy</span> <span class=\"kn\">import</span> <span class=\"n\">TradingStrategy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aat.structs</span> <span class=\"kn\">import</span> <span class=\"n\">MarketData</span><span class=\"p\">,</span> <span class=\"n\">TradeRequest</span><span class=\"p\">,</span> <span class=\"n\">TradeResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aat.enums</span> <span class=\"kn\">import</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"n\">OrderType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aat.logging</span> <span class=\"kn\">import</span> <span class=\"n\">STRAT</span> <span class=\"k\">as</span> <span class=\"n\">slog</span><span class=\"p\">,</span> <span class=\"n\">ERROR</span> <span class=\"k\">as</span> <span class=\"n\">elog</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BuyAndHoldStrategy</span><span class=\"p\">(</span><span class=\"n\">TradingStrategy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">BuyAndHoldStrategy</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bought</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onFill</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"n\">TradeResponse</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bought</span> <span class=\"o\">=</span> <span class=\"n\">res</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'d-&gt;g:bought </span><span class=\"si\">%.2f</span><span class=\"s1\"> @ </span><span class=\"si\">%.2f</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onTrade</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bought</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">TradeRequest</span><span class=\"p\">(</span><span class=\"n\">side</span><span class=\"o\">=</span><span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">,</span>\n                               <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                               <span class=\"n\">instrument</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">,</span>\n                               <span class=\"n\">order_type</span><span class=\"o\">=</span><span class=\"n\">OrderType</span><span class=\"o\">.</span><span class=\"n\">MARKET</span><span class=\"p\">,</span>\n                               <span class=\"n\">exchange</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">exchange</span><span class=\"p\">,</span>\n                               <span class=\"n\">price</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">,</span>\n                               <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">)</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"requesting buy : </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requestBuy</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bought</span> <span class=\"o\">=</span> <span class=\"s1\">'pending'</span>\n    <span class=\"k\">def</span> <span class=\"nf\">onError</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">elog</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onChange</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onCancel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onOpen</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">MarketData</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>Trading strategies have a number of required methods for handling messages:</p>\n<ul>\n<li>onTrade: Called when a trade occurs</li>\n<li>onChange: Called when an order is modified</li>\n<li>onFill: Called when a strategy's trade executes</li>\n<li>onCancel: Called when an order is cancelled</li>\n<li>onError: Called when an error occurs</li>\n<li>onOpen: Called when a new order occurs</li>\n</ul>\n<p>There are other optional callbacks for more granular processing:</p>\n<ul>\n<li>onStart: Called when the program starts</li>\n<li>onHalt: Called when trading is halted</li>\n<li>onContinue: Called when trading continues</li>\n<li>onExit: Called when the program shuts down</li>\n</ul>\n<p>There are also several optional callbacks for backtesting:</p>\n<ul>\n<li>slippage</li>\n<li>transactionCost</li>\n<li>onAnalyze\n<ul>\n<li>called after trading engine has processed all data, used to visualize algorithm performance</li>\n</ul>\n</li>\n</ul>\n<h1>Setting up and running</h1>\n<p>An instance of <code>TradingStrategy</code> class is able to run live or against a set of historical trade/quote data. When instantiating a <code>TradingEngine</code> object with a <code>TradingEngineConfig</code> object, the <code>TradingEngineConfig</code> has a <code>type</code> which can be set to:</p>\n<ul>\n<li><code>live</code> - live trading against the exchange</li>\n<li><code>simulation</code> - live trading against the exchange, but with order entry disabled</li>\n<li><code>sandbox</code> - live trading against the exchange's sandbox instance</li>\n<li><code>backtest</code> - offline trading against historical OHLCV data</li>\n</ul>\n<p>To test our strategy in any mode, we will need to setup exchange keys to get historical data, stream market data, and make new orders.</p>\n<h2>API Keys</h2>\n<p>You should creat API keys for exchanges you wish to trade on. For this example, we will assume a Coinbase Pro account with trading enabled. I usually put my keys in a set of shell scripts that are gitignored, so I don't post anything by accident. My scripts look something like:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">COINBASE_API_KEY</span><span class=\"o\">=</span>...\n<span class=\"nb\">export</span> <span class=\"nv\">COINBASE_API_SECRET</span><span class=\"o\">=</span>...\n<span class=\"nb\">export</span> <span class=\"nv\">COINBASE_API_PASS</span><span class=\"o\">=</span>...\n</pre>\n<p>Prior to running, I source the keys I need.</p>\n<h3>Sandboxes</h3>\n<p>Currently only the Gemini sandbox is supported, the other exchanges have discontinued theirs. To run in sandbox, set <code>TradingEngineConfig.type</code> to Sandbox.</p>\n<h3>Live Trading</h3>\n<p>When you want to run live, set <code>TradingEngineConfig.type</code> to Live. You will want to become familiar with the risk and execution engines, as these control things like max drawdown, max risk accrual, execution eagerness, etc.</p>\n<h3>Simulation Trading</h3>\n<p>When you want to run an algorithm live, but don't yet trust that it can make money, set <code>TradingEngineConfig.type</code> to simulation. This will let it run against real money, but disallow order entry. You can then set things like slippage and transaction costs as you would in a backtest.</p>\n<h2>Testing</h2>\n<p>Let's make sure everything worked out by running a sample strategy (that doesnt make and trades!) on the Coinbase Pro exchange:</p>\n<pre>python3 -m algocoin --simulation --exchanges<span class=\"o\">=</span>coinbase\n</pre>\n<p>You should see the following output:</p>\n<pre>python3 -m algocoin --simulation --exchanges<span class=\"o\">=</span>coinbase\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:54:17,468 CRITICAL -- MainProcess parser.py:151 --\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:54:17,469 CRITICAL -- MainProcess parser.py:152 -- Simulation trading\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:54:17,469 CRITICAL -- MainProcess parser.py:153 --\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:54:34,570 CRITICAL -- MainProcess trading.py:194 --\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:54:34,570 CRITICAL -- MainProcess trading.py:195 -- Server listening on port: <span class=\"m\">8081</span>\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:54:34,571 CRITICAL -- MainProcess trading.py:196 --\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:54:34,998 CRITICAL -- MainProcess market_data.py:68 -- Starting algo trading: ExchangeType.COINBASE\n</pre>\n<h2>Config</h2>\n<p>Because there are a variety of options, a config file is generally more usable. Here is an example configuration for backtesting the Buy-and-hold strategy above on CoinbasePro:</p>\n<pre>&gt; cat backtest.cfg\n<span class=\"o\">[</span>general<span class=\"o\">]</span>\n<span class=\"nv\">verbose</span><span class=\"o\">=</span><span class=\"m\">1</span>\n<span class=\"nv\">print</span><span class=\"o\">=</span><span class=\"m\">0</span>\n<span class=\"nv\">TradingType</span><span class=\"o\">=</span>backtest\n\n<span class=\"o\">[</span>exchange<span class=\"o\">]</span>\n<span class=\"nv\">exchanges</span><span class=\"o\">=</span>coinbase\n<span class=\"nv\">currency_pairs</span><span class=\"o\">=</span>BTC/USD\n\n<span class=\"o\">[</span>strategy<span class=\"o\">]</span>\n<span class=\"nv\">strategies</span> <span class=\"o\">=</span>\n    aat.strategies.buy_and_hold.BuyAndHoldStrategy\n\n<span class=\"o\">[</span>risk<span class=\"o\">]</span>\n<span class=\"nv\">max_drawdown</span> <span class=\"o\">=</span> <span class=\"m\">100</span>.0\n<span class=\"nv\">max_risk</span> <span class=\"o\">=</span> <span class=\"m\">100</span>.0\n<span class=\"nv\">total_funds</span> <span class=\"o\">=</span> <span class=\"m\">10</span>.0\n</pre>\n<h2>Analyzing an algorithm</h2>\n<p>We can run the above config by running:</p>\n<pre>python3 -m algocoin --config<span class=\"o\">=</span>./backtest.cfg\n</pre>\n<p>We should see the following output:</p>\n<pre><span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:40,173 INFO -- MainProcess utils.py:247 -- running in verbose mode!\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:40,174 CRITICAL -- MainProcess parser.py:165 --\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:40,174 CRITICAL -- MainProcess parser.py:166 -- Backtesting\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:40,174 CRITICAL -- MainProcess parser.py:167 --\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:40,176 CRITICAL -- MainProcess trading.py:106 -- Registering strategy: &lt;class <span class=\"s1\">'aat.strategies.buy_and_hold.BuyAndHoldStrategy'</span>&gt;\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:40,177 INFO -- MainProcess backtest.py:25 -- Starting....\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,338 INFO -- MainProcess buy_and_hold.py:28 -- requesting buy : &lt;BTC/USD-Side.BUY:1.0@8567.06-OrderType.MARKET-ExchangeType.COINBASE&gt;\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,339 INFO -- MainProcess risk.py:59 -- Requesting <span class=\"m\">1</span>.000000 @ <span class=\"m\">8567</span>.060000\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,339 INFO -- MainProcess risk.py:80 -- Risk check passed <span class=\"k\">for</span> partial order: &lt;BTC/USD-Side.BUY:1.0@8567.06-OrderType.MARKET-ExchangeType.COINBASE&gt;\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,339 INFO -- MainProcess trading.py:244 -- Risk check passed\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,339 INFO -- MainProcess trading.py:292 -- Slippage BT- &lt;BTC/USD-Side.BUY:1.0@8567.916706-TradeResult.FILLED-ExchangeType.COINBASE&gt;\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,340 INFO -- MainProcess trading.py:295 -- TXN cost BT- &lt;BTC/USD-Side.BUY:1.0@8589.336497765-TradeResult.FILLED-ExchangeType.COINBASE&gt;\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,340 INFO -- MainProcess buy_and_hold.py:14 -- d-&gt;g:bought <span class=\"m\">1</span>.00 @ <span class=\"m\">8589</span>.34\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,340 INFO -- MainProcess backtest.py:42 -- &lt;BTC/USD-1.29050038@8567.06-TickType.TRADE-ExchangeType.COINBASE&gt;\n...\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,474 INFO -- MainProcess backtest.py:42 -- &lt;BTC/USD-2.35773043@8595.0-TickType.TRADE-ExchangeType.COINBASE&gt;\n<span class=\"m\">2019</span>-06-01 <span class=\"m\">17</span>:58:41,474 INFO -- MainProcess backtest.py:33 -- Backtest <span class=\"k\">done</span>, running analysis.\n</pre>\n<p>This will call our <code>onAnalyze</code> function, which in this case is implemented to plot some performance characteristics with <code>matplotlib</code>.</p>\n<pre>        <span class=\"kn\">import</span> <span class=\"nn\">pandas</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span><span class=\"o\">,</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">seaborn</span> <span class=\"k\">as</span> <span class=\"nn\">sns</span>\n        <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">rc</span><span class=\"p\">(</span><span class=\"s1\">'font'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'size'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># extract data from trading engine</span>\n        <span class=\"n\">portfolio_value</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">portfolio_value</span><span class=\"p\">()</span>\n        <span class=\"n\">requests</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">query_tradereqs</span><span class=\"p\">()</span>\n        <span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">query_traderesps</span><span class=\"p\">()</span>\n        <span class=\"n\">trades</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([{</span><span class=\"s1\">'time'</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">query_trades</span><span class=\"p\">(</span><span class=\"n\">instrument</span><span class=\"o\">=</span><span class=\"n\">requests</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">instrument</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)])</span>\n        <span class=\"n\">trades</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">([</span><span class=\"s1\">'time'</span><span class=\"p\">],</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># format into pandas</span>\n        <span class=\"n\">pd</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">portfolio_value</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'time'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">,</span> <span class=\"s1\">'pnl'</span><span class=\"p\">])</span>\n        <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">([</span><span class=\"s1\">'time'</span><span class=\"p\">],</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># setup charting</span>\n        <span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">set_style</span><span class=\"p\">(</span><span class=\"s1\">'darkgrid'</span><span class=\"p\">)</span>\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n        <span class=\"n\">ax1</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">311</span><span class=\"p\">)</span>\n        <span class=\"n\">ax2</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">312</span><span class=\"p\">)</span>\n        <span class=\"n\">ax3</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">313</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># plot algo performance</span>\n        <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax1</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">],</span> <span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">rot</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># plot up/down chart</span>\n        <span class=\"n\">pd</span><span class=\"p\">[</span><span class=\"s1\">'pos'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">[</span><span class=\"s1\">'pnl'</span><span class=\"p\">]</span>\n        <span class=\"n\">pd</span><span class=\"p\">[</span><span class=\"s1\">'neg'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">[</span><span class=\"s1\">'pnl'</span><span class=\"p\">]</span>\n        <span class=\"n\">pd</span><span class=\"p\">[</span><span class=\"s1\">'pos'</span><span class=\"p\">][</span><span class=\"n\">pd</span><span class=\"p\">[</span><span class=\"s1\">'pos'</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n        <span class=\"n\">pd</span><span class=\"p\">[</span><span class=\"s1\">'neg'</span><span class=\"p\">][</span><span class=\"n\">pd</span><span class=\"p\">[</span><span class=\"s1\">'neg'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n        <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax2</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'pos'</span><span class=\"p\">,</span> <span class=\"s1\">'neg'</span><span class=\"p\">],</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'area'</span><span class=\"p\">,</span> <span class=\"n\">stacked</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'green'</span><span class=\"p\">,</span> <span class=\"s1\">'red'</span><span class=\"p\">],</span> <span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">rot</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># annotate with key data</span>\n        <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">'Performance'</span><span class=\"p\">)</span>\n        <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Portfolio value($)'</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">xy</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">portfolio_value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">2</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">portfolio_value</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][:</span><span class=\"mi\">2</span><span class=\"p\">]]:</span>\n            <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"s1\">'$</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">xy</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">xy</span><span class=\"o\">=</span><span class=\"n\">xy</span><span class=\"p\">,</span> <span class=\"n\">textcoords</span><span class=\"o\">=</span><span class=\"s1\">'data'</span><span class=\"p\">)</span>\n            <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"s1\">'$</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">xy</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">xy</span><span class=\"o\">=</span><span class=\"n\">xy</span><span class=\"p\">,</span> <span class=\"n\">textcoords</span><span class=\"o\">=</span><span class=\"s1\">'data'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># plot trade intent/trade action</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Intent/Action'</span><span class=\"p\">)</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Date'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">trades</span><span class=\"p\">)</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">time</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">requests</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">requests</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">],</span>\n                 <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'y'</span><span class=\"p\">)</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">time</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">requests</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">SELL</span><span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">requests</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">SELL</span><span class=\"p\">],</span>\n                 <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'y'</span><span class=\"p\">)</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">time</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">responses</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">],</span>  <span class=\"c1\"># FIXME</span>\n                 <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">responses</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">],</span>\n                 <span class=\"s1\">'^'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'g'</span><span class=\"p\">)</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">time</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">responses</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">SELL</span><span class=\"p\">],</span>  <span class=\"c1\"># FIXME</span>\n                 <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">responses</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">SELL</span><span class=\"p\">],</span>\n                 <span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># set same limits</span>\n        <span class=\"n\">y_bot</span><span class=\"p\">,</span> <span class=\"n\">y_top</span> <span class=\"o\">=</span> <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">get_ylim</span><span class=\"p\">()</span>\n        <span class=\"n\">x_bot</span><span class=\"p\">,</span> <span class=\"n\">x_top</span> <span class=\"o\">=</span> <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">get_xlim</span><span class=\"p\">()</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"n\">y_bot</span><span class=\"p\">,</span> <span class=\"n\">y_top</span><span class=\"p\">)</span>\n        <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"n\">x_bot</span><span class=\"p\">,</span> <span class=\"n\">x_top</span><span class=\"p\">)</span>\n        <span class=\"n\">ax2</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"n\">x_bot</span><span class=\"p\">,</span> <span class=\"n\">x_top</span><span class=\"p\">)</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"n\">x_bot</span><span class=\"p\">,</span> <span class=\"n\">x_top</span><span class=\"p\">)</span>\n        <span class=\"n\">dif</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x_top</span><span class=\"o\">-</span><span class=\"n\">x_bot</span><span class=\"p\">)</span><span class=\"o\">*.</span><span class=\"mi\">01</span>\n        <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"n\">x_bot</span><span class=\"o\">-</span><span class=\"n\">dif</span><span class=\"p\">,</span> <span class=\"n\">x_top</span><span class=\"o\">+</span><span class=\"n\">dif</span><span class=\"p\">)</span>\n        <span class=\"n\">ax2</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"n\">x_bot</span><span class=\"o\">-</span><span class=\"n\">dif</span><span class=\"p\">,</span> <span class=\"n\">x_top</span><span class=\"o\">+</span><span class=\"n\">dif</span><span class=\"p\">)</span>\n        <span class=\"n\">ax3</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"n\">x_bot</span><span class=\"o\">-</span><span class=\"n\">dif</span><span class=\"p\">,</span> <span class=\"n\">x_top</span><span class=\"o\">+</span><span class=\"n\">dif</span><span class=\"p\">)</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><a href=\"\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48ed3c6fe44796e6bb09aa5ff8fcbbc340cfc862/646f63732f696d672f62742e706e67\"></a></p>\n<p>We can see that our algorithm also implemented <code>slippage</code> and <code>transactionCost</code>, resulting in a worse execution price:</p>\n<pre>    <span class=\"k\">def</span> <span class=\"nf\">slippage</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">:</span> <span class=\"n\">TradeResponse</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TradeResponse</span><span class=\"p\">:</span>\n        <span class=\"n\">slippage</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">0001</span>  <span class=\"c1\"># .01% price impact</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">:</span>\n            <span class=\"c1\"># price moves against (up)</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">slippage</span> <span class=\"o\">=</span> <span class=\"n\">slippage</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">+=</span> <span class=\"n\">slippage</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># price moves against (down)</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">slippage</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">slippage</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">-=</span> <span class=\"n\">slippage</span>\n        <span class=\"k\">return</span> <span class=\"n\">resp</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">transactionCost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">:</span> <span class=\"n\">TradeResponse</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TradeResponse</span><span class=\"p\">:</span>\n        <span class=\"n\">txncost</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">*</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">volume</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">0025</span>  <span class=\"c1\"># gdax is 0.0025 max fee</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">Side</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">:</span>\n            <span class=\"c1\"># price moves against (up)</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">transaction_cost</span> <span class=\"o\">=</span> <span class=\"n\">txncost</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">+=</span> <span class=\"n\">txncost</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># price moves against (down)</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">transaction_cost</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">txncost</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">-=</span> <span class=\"n\">txncost</span>\n        <span class=\"k\">return</span> <span class=\"n\">resp</span>\n</pre>\n<h1>Extending</h1>\n<p>Apart from writing new strategies, this library can be extended by adding new exchanges. These are pretty simple. For cryptocurrency exchanges, I rely heavily on <code>ccxt</code>, <code>asyncio</code>, and websocket libraries.</p>\n<h2>Example</h2>\n<p>Here is the coinbase exchange. Most of the code is to manage different websocket subscription options, and to convert between <code>aat</code>, <code>ccxt</code> and exchange-specific formatting of things like symbols, order types, etc.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CoinbaseExchange</span><span class=\"p\">(</span><span class=\"n\">Exchange</span><span class=\"p\">):</span>\n    <span class=\"nd\">@lru_cache</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">subscription</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"subscribe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"product_id\"</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+</span> <span class=\"s1\">'-'</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">})</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">currency_pairs</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@lru_cache</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">heartbeat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"heartbeat\"</span><span class=\"p\">,</span> <span class=\"s2\">\"on\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tickToData</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">jsn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">MarketData</span><span class=\"p\">:</span>\n        <span class=\"sd\">'''convert a jsn tick off the websocket to a MarketData struct'''</span>\n        <span class=\"k\">if</span> <span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'received'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n        <span class=\"n\">reason</span> <span class=\"o\">=</span> <span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'reason'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s1\">'MATCH'</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s1\">'DONE'</span> <span class=\"ow\">and</span> <span class=\"n\">reason</span> <span class=\"o\">==</span> <span class=\"s1\">'FILLED'</span><span class=\"p\">):</span>\n            <span class=\"n\">typ</span> <span class=\"o\">=</span> <span class=\"n\">TickType</span><span class=\"o\">.</span><span class=\"n\">TRADE</span>\n        <span class=\"k\">elif</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">'OPEN'</span><span class=\"p\">,</span> <span class=\"s1\">'DONE'</span><span class=\"p\">,</span> <span class=\"s1\">'CHANGE'</span><span class=\"p\">,</span> <span class=\"s1\">'HEARTBEAT'</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">reason</span> <span class=\"o\">==</span> <span class=\"s1\">'CANCELED'</span><span class=\"p\">:</span>\n                <span class=\"n\">typ</span> <span class=\"o\">=</span> <span class=\"n\">TickType</span><span class=\"o\">.</span><span class=\"n\">CANCEL</span>\n            <span class=\"k\">elif</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s1\">'DONE'</span><span class=\"p\">:</span>\n                <span class=\"n\">typ</span> <span class=\"o\">=</span> <span class=\"n\">TickType</span><span class=\"o\">.</span><span class=\"n\">FILL</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">typ</span> <span class=\"o\">=</span> <span class=\"n\">TickType_from_string</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">typ</span> <span class=\"o\">=</span> <span class=\"n\">TickType</span><span class=\"o\">.</span><span class=\"n\">ERROR</span>\n\n        <span class=\"n\">order_id</span> <span class=\"o\">=</span> <span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'order_id'</span><span class=\"p\">,</span> <span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'maker_order_id'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">))</span>\n        <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">parse_date</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'time'</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'time'</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">typ</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">TickType</span><span class=\"o\">.</span><span class=\"n\">CANCEL</span><span class=\"p\">,</span> <span class=\"n\">TickType</span><span class=\"o\">.</span><span class=\"n\">OPEN</span><span class=\"p\">):</span>\n            <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'remaining_size'</span><span class=\"p\">,</span> <span class=\"s1\">'nan'</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'size'</span><span class=\"p\">,</span> <span class=\"s1\">'nan'</span><span class=\"p\">))</span>\n        <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'price'</span><span class=\"p\">,</span> <span class=\"s1\">'nan'</span><span class=\"p\">))</span>\n\n        <span class=\"n\">currency_pair</span> <span class=\"o\">=</span> <span class=\"n\">str_to_currency_pair_type</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'product_id'</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">typ</span> <span class=\"o\">!=</span> <span class=\"n\">TickType</span><span class=\"o\">.</span><span class=\"n\">ERROR</span> <span class=\"k\">else</span> <span class=\"n\">PairType</span><span class=\"o\">.</span><span class=\"n\">NONE</span>\n\n        <span class=\"n\">instrument</span> <span class=\"o\">=</span> <span class=\"n\">Instrument</span><span class=\"p\">(</span><span class=\"n\">underlying</span><span class=\"o\">=</span><span class=\"n\">currency_pair</span><span class=\"p\">)</span>\n\n        <span class=\"n\">order_type</span> <span class=\"o\">=</span> <span class=\"n\">str_to_order_type</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'order_type'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">))</span>\n        <span class=\"n\">side</span> <span class=\"o\">=</span> <span class=\"n\">str_to_side</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'side'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">))</span>\n        <span class=\"n\">remaining_volume</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'remaining_size'</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">))</span>\n\n        <span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">jsn</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'sequence'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">MarketData</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"o\">=</span><span class=\"n\">order_id</span><span class=\"p\">,</span>\n                         <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">,</span>\n                         <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"n\">volume</span><span class=\"p\">,</span>\n                         <span class=\"n\">price</span><span class=\"o\">=</span><span class=\"n\">price</span><span class=\"p\">,</span>\n                         <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">typ</span><span class=\"p\">,</span>\n                         <span class=\"n\">instrument</span><span class=\"o\">=</span><span class=\"n\">instrument</span><span class=\"p\">,</span>\n                         <span class=\"n\">remaining</span><span class=\"o\">=</span><span class=\"n\">remaining_volume</span><span class=\"p\">,</span>\n                         <span class=\"n\">side</span><span class=\"o\">=</span><span class=\"n\">side</span><span class=\"p\">,</span>\n                         <span class=\"n\">exchange</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">exchange</span><span class=\"p\">(),</span>\n                         <span class=\"n\">order_type</span><span class=\"o\">=</span><span class=\"n\">order_type</span><span class=\"p\">,</span>\n                         <span class=\"n\">sequence</span><span class=\"o\">=</span><span class=\"n\">sequence</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span>\n</pre>\n\n          </div>"}, "last_serial": 6366786, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8df25894862c9e199c5a343882d1ae4d", "sha256": "77f84e2f1fad4147a76fceb1350510694a834e0b5b107f4d7b2c2ff2bf9dce6e"}, "downloads": -1, "filename": "aat-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8df25894862c9e199c5a343882d1ae4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36515, "upload_time": "2019-05-20T21:31:58", "upload_time_iso_8601": "2019-05-20T21:31:58.308536Z", "url": "https://files.pythonhosted.org/packages/a2/70/27b1e265e22afcbbd85efcef490bdc82d5809e6ffb806f64fcf09d0937ba/aat-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4f451e8831d382e61053cfc4cb2fb99e", "sha256": "f7f0e12bb162e0a3b5ed1bb474dc215b643eb505c109e523d92a7d60d87130f0"}, "downloads": -1, "filename": "aat-0.0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "4f451e8831d382e61053cfc4cb2fb99e", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7", "size": 644484, "upload_time": "2019-12-27T21:09:02", "upload_time_iso_8601": "2019-12-27T21:09:02.450790Z", "url": "https://files.pythonhosted.org/packages/c8/08/0e0c4b109bb603ffdeca431970851c1944673dc3de6d8199fb5cf08e4671/aat-0.0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a1d5402aba2e2c12b2a650958fabcac", "sha256": "7c6232930ed31e7aad529339eab937261939da6ff0bb25dbf9a9e5ea8d9af469"}, "downloads": -1, "filename": "aat-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3a1d5402aba2e2c12b2a650958fabcac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 633507, "upload_time": "2019-12-27T21:09:05", "upload_time_iso_8601": "2019-12-27T21:09:05.438866Z", "url": "https://files.pythonhosted.org/packages/ff/68/d318678d92419e5b8003611ef4d8f980c11d38e5dd18c51a650d6d7f6a73/aat-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4ff4039ad4247f6b022608295781ec45", "sha256": "bbbb833752ee63a54551fe0c87919fe3ab514f0123c7b3f5880d69f49ab76934"}, "downloads": -1, "filename": "aat-0.0.3-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "4ff4039ad4247f6b022608295781ec45", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7", "size": 644484, "upload_time": "2019-12-27T21:28:05", "upload_time_iso_8601": "2019-12-27T21:28:05.767759Z", "url": "https://files.pythonhosted.org/packages/85/d4/b49830e6e38cc61fe1136431b4989be57a38732bacc8d76b0a533551f436/aat-0.0.3-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b341dc80c26ac7da4d6108db37c6332", "sha256": "96371c3b92aed460e178e650400e79473cc942113a152b4bbf78b09490625bc2"}, "downloads": -1, "filename": "aat-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9b341dc80c26ac7da4d6108db37c6332", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 633432, "upload_time": "2019-12-27T21:28:09", "upload_time_iso_8601": "2019-12-27T21:28:09.089623Z", "url": "https://files.pythonhosted.org/packages/e7/39/4bb711f7bcdd5db182da4fc7d968bb4e7ac909d80ff0384c6dd3ecc3c144/aat-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ff4039ad4247f6b022608295781ec45", "sha256": "bbbb833752ee63a54551fe0c87919fe3ab514f0123c7b3f5880d69f49ab76934"}, "downloads": -1, "filename": "aat-0.0.3-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "4ff4039ad4247f6b022608295781ec45", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7", "size": 644484, "upload_time": "2019-12-27T21:28:05", "upload_time_iso_8601": "2019-12-27T21:28:05.767759Z", "url": "https://files.pythonhosted.org/packages/85/d4/b49830e6e38cc61fe1136431b4989be57a38732bacc8d76b0a533551f436/aat-0.0.3-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b341dc80c26ac7da4d6108db37c6332", "sha256": "96371c3b92aed460e178e650400e79473cc942113a152b4bbf78b09490625bc2"}, "downloads": -1, "filename": "aat-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9b341dc80c26ac7da4d6108db37c6332", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 633432, "upload_time": "2019-12-27T21:28:09", "upload_time_iso_8601": "2019-12-27T21:28:09.089623Z", "url": "https://files.pythonhosted.org/packages/e7/39/4bb711f7bcdd5db182da4fc7d968bb4e7ac909d80ff0384c6dd3ecc3c144/aat-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 15:55:22 2020"}