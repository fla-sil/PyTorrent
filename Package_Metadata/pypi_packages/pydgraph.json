{"info": {"author": "Dgraph Labs", "author_email": "contact@dgraph.io", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database", "Topic :: Software Development"], "description": "# pydgraph\n\nOfficial Dgraph client implementation for Python (Python >= v2.7 and >= v3.5),\nusing [grpc].\n\n[grpc]: https://grpc.io/\n\nThis client follows the [Dgraph Go client][goclient] closely.\n\n[goclient]: https://github.com/dgraph-io/dgo\n\nBefore using this client, we highly recommend that you go through [docs.dgraph.io],\nand understand how to run and work with Dgraph.\n\n[docs.dgraph.io]:https://docs.dgraph.io\n\n## Table of contents\n\n- [Install](#install)\n- [Supported Versions](#supported-versions)\n- [Quickstart](#quickstart)\n- [Using a Client](#using-a-client)\n  - [Creating a Client](#creating-a-client)\n  - [Altering the Database](#altering-the-database)\n  - [Creating a Transaction](#creating-a-transaction)\n  - [Running a Mutation](#running-a-mutation)\n  - [Committing a Transaction](#committing-a-transaction)\n  * [Running a Query](#running-a-query)\n  * [Running an Upsert: Query + Mutation](#running-an-upsert-query--mutation)\n  * [Running a Conditional Upsert](#running-a-conditional-upsert)\n  - [Cleaning up Resources](#cleaning-up-resources)\n  - [Setting Metadata Headers](#setting-metadata-headers)\n- [Examples](#examples)\n- [Development](#development)\n  - [Building the source](#building-the-source)\n  - [Running tests](#running-tests)\n\n## Install\n\nInstall using pip:\n\n```sh\npip install pydgraph\n```\n\n## Supported Versions\n\nDepending on the version of Dgraph that you are connecting to, you will have to\nuse a different version of this client.\n\n| Dgraph version |   pydgraph version   |\n|:--------------:|:--------------------:|\n|     1.0.X      |      <= *1.2.0*      |\n|     1.1.X      |      >= *2.0.0*      |\n|     1.2.X      |      >= *2.0.0*      |\n\n## Quickstart\n\nBuild and run the [simple][] project in the `examples` folder, which\ncontains an end-to-end example of using the Dgraph python client. Follow the\ninstructions in the README of that project.\n\n[simple]: ./examples/simple\n\n## Using a client\n\n### Creating a Client\n\nYou can initialize a `DgraphClient` object by passing it a list of\n`DgraphClientStub` clients as variadic arguments. Connecting to multiple Dgraph\nservers in the same cluster allows for better distribution of workload.\n\nThe following code snippet shows just one connection.\n\n```python\nimport pydgraph\n\nclient_stub = pydgraph.DgraphClientStub('localhost:9080')\nclient = pydgraph.DgraphClient(client_stub)\n```\n\n### Altering the Database\n\nTo set the schema, create an `Operation` object, set the schema and pass it to\n`DgraphClient#alter(Operation)` method.\n\n```python\nschema = 'name: string @index(exact) .'\nop = pydgraph.Operation(schema=schema)\nclient.alter(op)\n```\n\nStarting Dgraph version 20.03.0, indexes can be computed in the background.\nYou can set `run_in_background` field of the `pydgraph.Operation` to `True`\nbefore passing it to the `Alter` function. You can find more details\n[here](https://docs.dgraph.io/master/query-language/#indexes-in-background).\n\n```python\nschema = 'name: string @index(exact) .'\nop = pydgraph.Operation(schema=schema, run_in_background=True)\nclient.alter(op)\n```\n\n`Operation` contains other fields as well, including drop predicate and drop all.\nDrop all is useful if you wish to discard all the data, and start from a clean\nslate, without bringing the instance down.\n\n```python\n# Drop all data including schema from the Dgraph instance. This is a useful\n# for small examples such as this since it puts Dgraph into a clean state.\nop = pydgraph.Operation(drop_all=True)\nclient.alter(op)\n```\n\n### Creating a Transaction\n\nTo create a transaction, call `DgraphClient#txn()` method, which returns a\nnew `Txn` object. This operation incurs no network overhead.\n\nIt is good practice to call `Txn#discard()` in a `finally` block after running\nthe transaction. Calling `Txn#discard()` after `Txn#commit()` is a no-op\nand you can call `Txn#discard()` multiple times with no additional side-effects.\n\n```python\ntxn = client.txn()\ntry:\n  # Do something here\n  # ...\nfinally:\n  txn.discard()\n  # ...\n```\n\nTo create a read-only transaction, call `DgraphClient#txn(read_only=True)`.\nRead-only transactions are ideal for transactions which only involve queries.\nMutations and commits are not allowed.\n\n```python\ntxn = client.txn(read_only=True)\ntry:\n  # Do some queries here\n  # ...\nfinally:\n  txn.discard()\n  # ...\n```\n\nTo create a read-only transaction that executes best-effort queries, call\n`DgraphClient#txn(read_only=True, best_effort=True)`. Best-effort queries are\nfaster than normal queries because they bypass the normal consensus protocol.\nFor this same reason, best-effort queries cannot guarantee to return the latest\ndata. Best-effort queries are only supported by read-only transactions.\n\n### Running a Mutation\n\n`Txn#mutate(mu=Mutation)` runs a mutation. It takes in a `Mutation` object,\nwhich provides two main ways to set data: JSON and RDF N-Quad. You can choose\nwhichever way is convenient.\n\n`Txn#mutate()` provides convenience keyword arguments `set_obj` and `del_obj`\nfor setting JSON values and `set_nquads` and `del_nquads` for setting N-Quad\nvalues. See examples below for usage.\n\nWe define a person object to represent a person and use it in a transaction.\n\n```python\n# Create data.\np = {\n    'name': 'Alice',\n}\n\n# Run mutation.\ntxn.mutate(set_obj=p)\n\n# If you want to use a mutation object, use this instead:\n# mu = pydgraph.Mutation(set_json=json.dumps(p).encode('utf8'))\n# txn.mutate(mu)\n\n# If you want to use N-Quads, use this instead:\n# txn.mutate(set_nquads='_:alice <name> \"Alice\" .')\n```\n\n```python\n# Delete data.\n\nquery = \"\"\"query all($a: string)\n {\n   all(func: eq(name, $a))\n    {\n      uid\n    }\n  }\"\"\"\n\nvariables = {'$a': 'Bob'}\n\nres = txn.query(query, variables=variables)\nppl = json.loads(res.json)\n\n# For a mutation to delete a node, use this:\ntxn.mutate(del_obj=person)\n```\n\nFor a complete example with multiple fields and relationships, look at the\n[simple] project in the `examples` folder.\n\nSometimes, you only want to commit a mutation, without querying anything further.\nIn such cases, you can set the keyword argument `commit_now=True` to indicate\nthat the mutation must be immediately committed.\n\nA mutation can be executed using `txn.do_request` as well.\n\n```python\nmutation = txn.create_mutation(set_nquads='_:alice <name> \"Alice\" .')\nrequest = txn.create_request(mutations=[mutation], commit_now=True)\ntxn.do_request(request)\n```\n\n### Committing a Transaction\n\nA transaction can be committed using the `Txn#commit()` method. If your transaction\nconsisted solely of calls to `Txn#query` or `Txn#queryWithVars`, and no calls to\n`Txn#mutate`, then calling `Txn#commit()` is not necessary.\n\nAn error is raised if another transaction(s) modify the same data concurrently that was\nmodified in the current transaction. It is up to the user to retry transactions\nwhen they fail.\n\n```python\ntxn = client.txn()\ntry:\n  # ...\n  # Perform any number of queries and mutations\n  # ...\n  # and finally...\n  txn.commit()\nexcept Exception as e:\n  if isinstance(e, pydgraph.AbortedError):\n    # Retry or handle exception.\n  else:\n    raise e\nfinally:\n  # Clean up. Calling this after txn.commit() is a no-op\n  # and hence safe.\n  txn.discard()\n```\n\n### Running a Query\n\nYou can run a query by calling `Txn#query(string)`. You will need to pass in a\nGraphQL+- query string. If you want to pass an additional dictionary of any\nvariables that you might want to set in the query, call\n`Txn#query(string, variables=d)` with the variables dictionary `d`.\n\nThe response would contain the field `json`, which returns the response JSON.\n\nLet\u2019s run a query with a variable `$a`, deserialize the result from JSON and\nprint it out:\n\n```python\n# Run query.\nquery = \"\"\"query all($a: string) {\n  all(func: eq(name, $a))\n  {\n    name\n  }\n}\"\"\"\nvariables = {'$a': 'Alice'}\n\nres = txn.query(query, variables=variables)\n\n# If not doing a mutation in the same transaction, simply use:\n# res = client.txn(read_only=True).query(query, variables=variables)\n\nppl = json.loads(res.json)\n\n# Print results.\nprint('Number of people named \"Alice\": {}'.format(len(ppl['all'])))\nfor person in ppl['all']:\n  print(person)\n```\n\nThis should print:\n\n```console\nNumber of people named \"Alice\": 1\nAlice\n```\n\nYou can also use `txn.do_request` function to run the query.\n\n```python\nrequest = txn.create_request(query=query)\ntxn.do_request(request)\n```\n\n### Running an Upsert: Query + Mutation\n\nThe `txn.do_request` function allows you to run upserts consisting of one query and\none mutation. Query variables could be defined and can then be used in the mutation.\n\nTo know more about upsert, we highly recommend going through the docs at\nhttps://docs.dgraph.io/mutations/#upsert-block.\n\n```python\nquery = \"\"\"{\n  u as var(func: eq(name, \"Alice\"))\n}\"\"\"\nnquad = \"\"\"\n  uid(u) <name> \"Alice\" .\n  uid(u) <age> \"25\" .\n\"\"\"\nmutation = txn.create_mutation(set_nquads=nquad)\nrequest = txn.create_request(query=query, mutations=[mutation], commit_now=True)\ntxn.do_request(request)\n```\n\n### Running a Conditional Upsert\n\nThe upsert block also allows specifying a conditional mutation block using an `@if` directive. The mutation is executed\nonly when the specified condition is true. If the condition is false, the mutation is silently ignored.\n\nSee more about Conditional Upsert [Here](https://docs.dgraph.io/mutations/#conditional-upsert).\n\n```python\nquery = \"\"\"\n  {\n    user as var(func: eq(email, \"wrong_email@dgraph.io\"))\n  }\n\"\"\"\ncond = \"@if(eq(len(user), 1))\"\nnquads = \"\"\"\n  uid(user) <email> \"correct_email@dgraph.io\" .\n\"\"\"\nmutation = txn.create_mutation(cond=cond, set_nquads=nquads)\nrequest = txn.create_request(mutations=[mutation], query=query, commit_now=True)\ntxn.do_request(request)\n```\n\n### Cleaning Up Resources\n\nTo clean up resources, you have to call `DgraphClientStub#close()` individually for\nall the instances of `DgraphClientStub`.\n\n```python\nSERVER_ADDR = \"localhost:9080\"\n\n# Create instances of DgraphClientStub.\nstub1 = pydgraph.DgraphClientStub(SERVER_ADDR)\nstub2 = pydgraph.DgraphClientStub(SERVER_ADDR)\n\n# Create an instance of DgraphClient.\nclient = pydgraph.DgraphClient(stub1, stub2)\n\n# ...\n# Use client\n# ...\n\n# Clean up resources by closing all client stubs.\nstub1.close()\nstub2.close()\n```\n\n### Setting Metadata Headers\nMetadata headers such as authentication tokens can be set through the metadata of gRPC methods. Below is an example of how to set a header named \"auth-token\".\n```python\n# The following piece of code shows how one can set metadata with\n# auth-token, to allow Alter operation, if the server requires it.\n# metadata is a list of arbitrary key-value pairs.\nmetadata = [(\"auth-token\", \"the-auth-token-value\")]\ndg.alter(op, metadata=metadata)\n```\n\n### Setting a timeout.\n\nA timeout value representing the number of seconds can be passed to the `login`,\n`alter`, `query`, and `mutate` methods using the `timeout` keyword argument.\n\nFor example, the following alters the schema with a timeout of ten seconds:\n`dg.alter(op, timeout=10)`\n\n### Passing credentials\n\nA `CallCredentials` object can be passed to the `login`, `alter`, `query`, and\n`mutate` methods using the `credentials` keyword argument.\n\n## Examples\n\n- [simple][]: Quickstart example of using pydgraph.\n\n## Development\n\n### Building the source\n\n```sh\npython setup.py install\n# To install for the current user, use this instead:\n# python setup.py install --user\n```\n\nIf you have made changes to the `pydgraph/proto/api.proto` file, you need need\nto regenerate the source files generated by Protocol Buffer tools. To do that,\ninstall the [grpcio-tools][grpcio-tools] library and then run the following\ncommand:\n\n[grpcio-tools]: https://pypi.python.org/pypi/grpcio-tools\n\n```sh\npython scripts/protogen.py\n```\n\n### Running tests\n\nTo run the tests in your local machine, you can run the script\n`scripts/local-tests.sh`. This script assumes Dgraph and dgo (Go client) are\nalready built on the local machine. The script will take care of bringing up a\nDgraph cluster and bringing it down after the tests are executed. The script\nuses the port 9180 by default to prevent interference with clusters running on\nthe default port. Docker and docker-compose need to be installed before running\nthe script. Refer to the official Docker documentation for instructions on how\nto install those packages.\n\nThe `test.sh` script downloads and installs Dgraph. It is meant for use by our\nCI systems and using it for local development is not recommended.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dgraph-io/pydgraph", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "pydgraph", "package_url": "https://pypi.org/project/pydgraph/", "platform": "", "project_url": "https://pypi.org/project/pydgraph/", "project_urls": {"Homepage": "https://github.com/dgraph-io/pydgraph"}, "release_url": "https://pypi.org/project/pydgraph/20.3.0/", "requires_dist": ["grpcio (>=1.18.0)", "protobuf (>=3.6.1)"], "requires_python": "", "summary": "Official Dgraph client implementation for Python", "version": "20.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pydgraph</h1>\n<p>Official Dgraph client implementation for Python (Python &gt;= v2.7 and &gt;= v3.5),\nusing <a href=\"https://grpc.io/\" rel=\"nofollow\">grpc</a>.</p>\n<p>This client follows the <a href=\"https://github.com/dgraph-io/dgo\" rel=\"nofollow\">Dgraph Go client</a> closely.</p>\n<p>Before using this client, we highly recommend that you go through <a href=\"https://docs.dgraph.io\" rel=\"nofollow\">docs.dgraph.io</a>,\nand understand how to run and work with Dgraph.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#supported-versions\" rel=\"nofollow\">Supported Versions</a></li>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#using-a-client\" rel=\"nofollow\">Using a Client</a>\n<ul>\n<li><a href=\"#creating-a-client\" rel=\"nofollow\">Creating a Client</a></li>\n<li><a href=\"#altering-the-database\" rel=\"nofollow\">Altering the Database</a></li>\n<li><a href=\"#creating-a-transaction\" rel=\"nofollow\">Creating a Transaction</a></li>\n<li><a href=\"#running-a-mutation\" rel=\"nofollow\">Running a Mutation</a></li>\n<li><a href=\"#committing-a-transaction\" rel=\"nofollow\">Committing a Transaction</a></li>\n</ul>\n<ul>\n<li><a href=\"#running-a-query\" rel=\"nofollow\">Running a Query</a></li>\n<li><a href=\"#running-an-upsert-query--mutation\" rel=\"nofollow\">Running an Upsert: Query + Mutation</a></li>\n<li><a href=\"#running-a-conditional-upsert\" rel=\"nofollow\">Running a Conditional Upsert</a></li>\n</ul>\n<ul>\n<li><a href=\"#cleaning-up-resources\" rel=\"nofollow\">Cleaning up Resources</a></li>\n<li><a href=\"#setting-metadata-headers\" rel=\"nofollow\">Setting Metadata Headers</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a>\n<ul>\n<li><a href=\"#building-the-source\" rel=\"nofollow\">Building the source</a></li>\n<li><a href=\"#running-tests\" rel=\"nofollow\">Running tests</a></li>\n</ul>\n</li>\n</ul>\n<h2>Install</h2>\n<p>Install using pip:</p>\n<pre>pip install pydgraph\n</pre>\n<h2>Supported Versions</h2>\n<p>Depending on the version of Dgraph that you are connecting to, you will have to\nuse a different version of this client.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Dgraph version</th>\n<th align=\"center\">pydgraph version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1.0.X</td>\n<td align=\"center\">&lt;= <em>1.2.0</em></td>\n</tr>\n<tr>\n<td align=\"center\">1.1.X</td>\n<td align=\"center\">&gt;= <em>2.0.0</em></td>\n</tr>\n<tr>\n<td align=\"center\">1.2.X</td>\n<td align=\"center\">&gt;= <em>2.0.0</em></td>\n</tr></tbody></table>\n<h2>Quickstart</h2>\n<p>Build and run the <a href=\"./examples/simple\" rel=\"nofollow\">simple</a> project in the <code>examples</code> folder, which\ncontains an end-to-end example of using the Dgraph python client. Follow the\ninstructions in the README of that project.</p>\n<h2>Using a client</h2>\n<h3>Creating a Client</h3>\n<p>You can initialize a <code>DgraphClient</code> object by passing it a list of\n<code>DgraphClientStub</code> clients as variadic arguments. Connecting to multiple Dgraph\nservers in the same cluster allows for better distribution of workload.</p>\n<p>The following code snippet shows just one connection.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pydgraph</span>\n\n<span class=\"n\">client_stub</span> <span class=\"o\">=</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">DgraphClientStub</span><span class=\"p\">(</span><span class=\"s1\">'localhost:9080'</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">DgraphClient</span><span class=\"p\">(</span><span class=\"n\">client_stub</span><span class=\"p\">)</span>\n</pre>\n<h3>Altering the Database</h3>\n<p>To set the schema, create an <code>Operation</code> object, set the schema and pass it to\n<code>DgraphClient#alter(Operation)</code> method.</p>\n<pre><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"s1\">'name: string @index(exact) .'</span>\n<span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">Operation</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">alter</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n</pre>\n<p>Starting Dgraph version 20.03.0, indexes can be computed in the background.\nYou can set <code>run_in_background</code> field of the <code>pydgraph.Operation</code> to <code>True</code>\nbefore passing it to the <code>Alter</code> function. You can find more details\n<a href=\"https://docs.dgraph.io/master/query-language/#indexes-in-background\" rel=\"nofollow\">here</a>.</p>\n<pre><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"s1\">'name: string @index(exact) .'</span>\n<span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">Operation</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">run_in_background</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">alter</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n</pre>\n<p><code>Operation</code> contains other fields as well, including drop predicate and drop all.\nDrop all is useful if you wish to discard all the data, and start from a clean\nslate, without bringing the instance down.</p>\n<pre><span class=\"c1\"># Drop all data including schema from the Dgraph instance. This is a useful</span>\n<span class=\"c1\"># for small examples such as this since it puts Dgraph into a clean state.</span>\n<span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">Operation</span><span class=\"p\">(</span><span class=\"n\">drop_all</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">alter</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n</pre>\n<h3>Creating a Transaction</h3>\n<p>To create a transaction, call <code>DgraphClient#txn()</code> method, which returns a\nnew <code>Txn</code> object. This operation incurs no network overhead.</p>\n<p>It is good practice to call <code>Txn#discard()</code> in a <code>finally</code> block after running\nthe transaction. Calling <code>Txn#discard()</code> after <code>Txn#commit()</code> is a no-op\nand you can call <code>Txn#discard()</code> multiple times with no additional side-effects.</p>\n<pre><span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">txn</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Do something here</span>\n  <span class=\"c1\"># ...</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n  <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">discard</span><span class=\"p\">()</span>\n  <span class=\"c1\"># ...</span>\n</pre>\n<p>To create a read-only transaction, call <code>DgraphClient#txn(read_only=True)</code>.\nRead-only transactions are ideal for transactions which only involve queries.\nMutations and commits are not allowed.</p>\n<pre><span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">txn</span><span class=\"p\">(</span><span class=\"n\">read_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Do some queries here</span>\n  <span class=\"c1\"># ...</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n  <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">discard</span><span class=\"p\">()</span>\n  <span class=\"c1\"># ...</span>\n</pre>\n<p>To create a read-only transaction that executes best-effort queries, call\n<code>DgraphClient#txn(read_only=True, best_effort=True)</code>. Best-effort queries are\nfaster than normal queries because they bypass the normal consensus protocol.\nFor this same reason, best-effort queries cannot guarantee to return the latest\ndata. Best-effort queries are only supported by read-only transactions.</p>\n<h3>Running a Mutation</h3>\n<p><code>Txn#mutate(mu=Mutation)</code> runs a mutation. It takes in a <code>Mutation</code> object,\nwhich provides two main ways to set data: JSON and RDF N-Quad. You can choose\nwhichever way is convenient.</p>\n<p><code>Txn#mutate()</code> provides convenience keyword arguments <code>set_obj</code> and <code>del_obj</code>\nfor setting JSON values and <code>set_nquads</code> and <code>del_nquads</code> for setting N-Quad\nvalues. See examples below for usage.</p>\n<p>We define a person object to represent a person and use it in a transaction.</p>\n<pre><span class=\"c1\"># Create data.</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Alice'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Run mutation.</span>\n<span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">mutate</span><span class=\"p\">(</span><span class=\"n\">set_obj</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If you want to use a mutation object, use this instead:</span>\n<span class=\"c1\"># mu = pydgraph.Mutation(set_json=json.dumps(p).encode('utf8'))</span>\n<span class=\"c1\"># txn.mutate(mu)</span>\n\n<span class=\"c1\"># If you want to use N-Quads, use this instead:</span>\n<span class=\"c1\"># txn.mutate(set_nquads='_:alice &lt;name&gt; \"Alice\" .')</span>\n</pre>\n<pre><span class=\"c1\"># Delete data.</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"query all($a: string)</span>\n<span class=\"s2\"> {</span>\n<span class=\"s2\">   all(func: eq(name, $a))</span>\n<span class=\"s2\">    {</span>\n<span class=\"s2\">      uid</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">  }\"\"\"</span>\n\n<span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'$a'</span><span class=\"p\">:</span> <span class=\"s1\">'Bob'</span><span class=\"p\">}</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"n\">variables</span><span class=\"p\">)</span>\n<span class=\"n\">ppl</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For a mutation to delete a node, use this:</span>\n<span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">mutate</span><span class=\"p\">(</span><span class=\"n\">del_obj</span><span class=\"o\">=</span><span class=\"n\">person</span><span class=\"p\">)</span>\n</pre>\n<p>For a complete example with multiple fields and relationships, look at the\n<a href=\"./examples/simple\" rel=\"nofollow\">simple</a> project in the <code>examples</code> folder.</p>\n<p>Sometimes, you only want to commit a mutation, without querying anything further.\nIn such cases, you can set the keyword argument <code>commit_now=True</code> to indicate\nthat the mutation must be immediately committed.</p>\n<p>A mutation can be executed using <code>txn.do_request</code> as well.</p>\n<pre><span class=\"n\">mutation</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">create_mutation</span><span class=\"p\">(</span><span class=\"n\">set_nquads</span><span class=\"o\">=</span><span class=\"s1\">'_:alice &lt;name&gt; \"Alice\" .'</span><span class=\"p\">)</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">create_request</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">mutation</span><span class=\"p\">],</span> <span class=\"n\">commit_now</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">do_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<h3>Committing a Transaction</h3>\n<p>A transaction can be committed using the <code>Txn#commit()</code> method. If your transaction\nconsisted solely of calls to <code>Txn#query</code> or <code>Txn#queryWithVars</code>, and no calls to\n<code>Txn#mutate</code>, then calling <code>Txn#commit()</code> is not necessary.</p>\n<p>An error is raised if another transaction(s) modify the same data concurrently that was\nmodified in the current transaction. It is up to the user to retry transactions\nwhen they fail.</p>\n<pre><span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">txn</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"c1\"># ...</span>\n  <span class=\"c1\"># Perform any number of queries and mutations</span>\n  <span class=\"c1\"># ...</span>\n  <span class=\"c1\"># and finally...</span>\n  <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">AbortedError</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Retry or handle exception.</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"n\">e</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Clean up. Calling this after txn.commit() is a no-op</span>\n  <span class=\"c1\"># and hence safe.</span>\n  <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">discard</span><span class=\"p\">()</span>\n</pre>\n<h3>Running a Query</h3>\n<p>You can run a query by calling <code>Txn#query(string)</code>. You will need to pass in a\nGraphQL+- query string. If you want to pass an additional dictionary of any\nvariables that you might want to set in the query, call\n<code>Txn#query(string, variables=d)</code> with the variables dictionary <code>d</code>.</p>\n<p>The response would contain the field <code>json</code>, which returns the response JSON.</p>\n<p>Let\u2019s run a query with a variable <code>$a</code>, deserialize the result from JSON and\nprint it out:</p>\n<pre><span class=\"c1\"># Run query.</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"query all($a: string) {</span>\n<span class=\"s2\">  all(func: eq(name, $a))</span>\n<span class=\"s2\">  {</span>\n<span class=\"s2\">    name</span>\n<span class=\"s2\">  }</span>\n<span class=\"s2\">}\"\"\"</span>\n<span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'$a'</span><span class=\"p\">:</span> <span class=\"s1\">'Alice'</span><span class=\"p\">}</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"n\">variables</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If not doing a mutation in the same transaction, simply use:</span>\n<span class=\"c1\"># res = client.txn(read_only=True).query(query, variables=variables)</span>\n\n<span class=\"n\">ppl</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print results.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of people named \"Alice\": </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ppl</span><span class=\"p\">[</span><span class=\"s1\">'all'</span><span class=\"p\">])))</span>\n<span class=\"k\">for</span> <span class=\"n\">person</span> <span class=\"ow\">in</span> <span class=\"n\">ppl</span><span class=\"p\">[</span><span class=\"s1\">'all'</span><span class=\"p\">]:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n</pre>\n<p>This should print:</p>\n<pre><span class=\"go\">Number of people named \"Alice\": 1</span>\n<span class=\"go\">Alice</span>\n</pre>\n<p>You can also use <code>txn.do_request</code> function to run the query.</p>\n<pre><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">create_request</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">do_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<h3>Running an Upsert: Query + Mutation</h3>\n<p>The <code>txn.do_request</code> function allows you to run upserts consisting of one query and\none mutation. Query variables could be defined and can then be used in the mutation.</p>\n<p>To know more about upsert, we highly recommend going through the docs at\n<a href=\"https://docs.dgraph.io/mutations/#upsert-block\" rel=\"nofollow\">https://docs.dgraph.io/mutations/#upsert-block</a>.</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"{</span>\n<span class=\"s2\">  u as var(func: eq(name, \"Alice\"))</span>\n<span class=\"s2\">}\"\"\"</span>\n<span class=\"n\">nquad</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">  uid(u) &lt;name&gt; \"Alice\" .</span>\n<span class=\"s2\">  uid(u) &lt;age&gt; \"25\" .</span>\n<span class=\"s2\">\"\"\"</span>\n<span class=\"n\">mutation</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">create_mutation</span><span class=\"p\">(</span><span class=\"n\">set_nquads</span><span class=\"o\">=</span><span class=\"n\">nquad</span><span class=\"p\">)</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">create_request</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">mutations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">mutation</span><span class=\"p\">],</span> <span class=\"n\">commit_now</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">do_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<h3>Running a Conditional Upsert</h3>\n<p>The upsert block also allows specifying a conditional mutation block using an <code>@if</code> directive. The mutation is executed\nonly when the specified condition is true. If the condition is false, the mutation is silently ignored.</p>\n<p>See more about Conditional Upsert <a href=\"https://docs.dgraph.io/mutations/#conditional-upsert\" rel=\"nofollow\">Here</a>.</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">  {</span>\n<span class=\"s2\">    user as var(func: eq(email, \"wrong_email@dgraph.io\"))</span>\n<span class=\"s2\">  }</span>\n<span class=\"s2\">\"\"\"</span>\n<span class=\"n\">cond</span> <span class=\"o\">=</span> <span class=\"s2\">\"@if(eq(len(user), 1))\"</span>\n<span class=\"n\">nquads</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">  uid(user) &lt;email&gt; \"correct_email@dgraph.io\" .</span>\n<span class=\"s2\">\"\"\"</span>\n<span class=\"n\">mutation</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">create_mutation</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"o\">=</span><span class=\"n\">cond</span><span class=\"p\">,</span> <span class=\"n\">set_nquads</span><span class=\"o\">=</span><span class=\"n\">nquads</span><span class=\"p\">)</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">create_request</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">mutation</span><span class=\"p\">],</span> <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">commit_now</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">do_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<h3>Cleaning Up Resources</h3>\n<p>To clean up resources, you have to call <code>DgraphClientStub#close()</code> individually for\nall the instances of <code>DgraphClientStub</code>.</p>\n<pre><span class=\"n\">SERVER_ADDR</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost:9080\"</span>\n\n<span class=\"c1\"># Create instances of DgraphClientStub.</span>\n<span class=\"n\">stub1</span> <span class=\"o\">=</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">DgraphClientStub</span><span class=\"p\">(</span><span class=\"n\">SERVER_ADDR</span><span class=\"p\">)</span>\n<span class=\"n\">stub2</span> <span class=\"o\">=</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">DgraphClientStub</span><span class=\"p\">(</span><span class=\"n\">SERVER_ADDR</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create an instance of DgraphClient.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">pydgraph</span><span class=\"o\">.</span><span class=\"n\">DgraphClient</span><span class=\"p\">(</span><span class=\"n\">stub1</span><span class=\"p\">,</span> <span class=\"n\">stub2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ...</span>\n<span class=\"c1\"># Use client</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># Clean up resources by closing all client stubs.</span>\n<span class=\"n\">stub1</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">stub2</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h3>Setting Metadata Headers</h3>\n<p>Metadata headers such as authentication tokens can be set through the metadata of gRPC methods. Below is an example of how to set a header named \"auth-token\".</p>\n<pre><span class=\"c1\"># The following piece of code shows how one can set metadata with</span>\n<span class=\"c1\"># auth-token, to allow Alter operation, if the server requires it.</span>\n<span class=\"c1\"># metadata is a list of arbitrary key-value pairs.</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">\"auth-token\"</span><span class=\"p\">,</span> <span class=\"s2\">\"the-auth-token-value\"</span><span class=\"p\">)]</span>\n<span class=\"n\">dg</span><span class=\"o\">.</span><span class=\"n\">alter</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n</pre>\n<h3>Setting a timeout.</h3>\n<p>A timeout value representing the number of seconds can be passed to the <code>login</code>,\n<code>alter</code>, <code>query</code>, and <code>mutate</code> methods using the <code>timeout</code> keyword argument.</p>\n<p>For example, the following alters the schema with a timeout of ten seconds:\n<code>dg.alter(op, timeout=10)</code></p>\n<h3>Passing credentials</h3>\n<p>A <code>CallCredentials</code> object can be passed to the <code>login</code>, <code>alter</code>, <code>query</code>, and\n<code>mutate</code> methods using the <code>credentials</code> keyword argument.</p>\n<h2>Examples</h2>\n<ul>\n<li><a href=\"./examples/simple\" rel=\"nofollow\">simple</a>: Quickstart example of using pydgraph.</li>\n</ul>\n<h2>Development</h2>\n<h3>Building the source</h3>\n<pre>python setup.py install\n<span class=\"c1\"># To install for the current user, use this instead:</span>\n<span class=\"c1\"># python setup.py install --user</span>\n</pre>\n<p>If you have made changes to the <code>pydgraph/proto/api.proto</code> file, you need need\nto regenerate the source files generated by Protocol Buffer tools. To do that,\ninstall the <a href=\"https://pypi.python.org/pypi/grpcio-tools\" rel=\"nofollow\">grpcio-tools</a> library and then run the following\ncommand:</p>\n<pre>python scripts/protogen.py\n</pre>\n<h3>Running tests</h3>\n<p>To run the tests in your local machine, you can run the script\n<code>scripts/local-tests.sh</code>. This script assumes Dgraph and dgo (Go client) are\nalready built on the local machine. The script will take care of bringing up a\nDgraph cluster and bringing it down after the tests are executed. The script\nuses the port 9180 by default to prevent interference with clusters running on\nthe default port. Docker and docker-compose need to be installed before running\nthe script. Refer to the official Docker documentation for instructions on how\nto install those packages.</p>\n<p>The <code>test.sh</code> script downloads and installs Dgraph. It is meant for use by our\nCI systems and using it for local development is not recommended.</p>\n\n          </div>"}, "last_serial": 6924381, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "1f24d8673d518679ad3686e9fdda8437", "sha256": "5e8309d3cea0103c2f806e91e134aed0083e7cec8afb5484f681f2217e0aa746"}, "downloads": -1, "filename": "pydgraph-0.3.tar.gz", "has_sig": false, "md5_digest": "1f24d8673d518679ad3686e9fdda8437", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3743, "upload_time": "2016-07-06T09:39:43", "upload_time_iso_8601": "2016-07-06T09:39:43.498354Z", "url": "https://files.pythonhosted.org/packages/61/80/8e1d2dcd4f90d179d67299a18bb6c349fdeb169cf379f84b6ee3057450cb/pydgraph-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "bb33524673f2cae2ced104ae47719903", "sha256": "0021c2f44b8613dfb80a060a54b2237951f122d0be2d75e1931ac3d887cfd36c"}, "downloads": -1, "filename": "pydgraph-0.3.1.tar.gz", "has_sig": true, "md5_digest": "bb33524673f2cae2ced104ae47719903", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7730, "upload_time": "2016-07-06T10:26:42", "upload_time_iso_8601": "2016-07-06T10:26:42.890625Z", "url": "https://files.pythonhosted.org/packages/35/11/f71872cb0d957c76cf531467dd2ac4e44fb6cd96ceb9a817c3c134eb7ba1/pydgraph-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "3aaa3d0a98b20dfd039ee46189bc826a", "sha256": "e10feb71276bb09d575042ae9979975d557f43be18c8a0d7d5aa2569fd32f1a3"}, "downloads": -1, "filename": "pydgraph-0.3.2.tar.gz", "has_sig": true, "md5_digest": "3aaa3d0a98b20dfd039ee46189bc826a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7710, "upload_time": "2016-07-06T10:34:47", "upload_time_iso_8601": "2016-07-06T10:34:47.912479Z", "url": "https://files.pythonhosted.org/packages/de/1b/35e80817227c9ee27e6299db09fd01407de585c5c10023be0cb97764ec1a/pydgraph-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "b169109d6f5eed99831e4dade5df625e", "sha256": "5555f0e11a00c8ed0fef8c2ee3c0e627dfc8bc57c755075c33ccefb614332feb"}, "downloads": -1, "filename": "pydgraph-0.3.3.tar.gz", "has_sig": true, "md5_digest": "b169109d6f5eed99831e4dade5df625e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7731, "upload_time": "2016-07-06T10:41:36", "upload_time_iso_8601": "2016-07-06T10:41:36.482864Z", "url": "https://files.pythonhosted.org/packages/3f/f3/299cbdd6244b441742e9a49cc10d72059686cc5b30875af35e6e31575036/pydgraph-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "db0680111e5efcff7d3045f5d6530c84", "sha256": "0811ae46df8ef5bc5fa106ca27425f3b06fccca0f5798b59aa9f46b9bc3ea70c"}, "downloads": -1, "filename": "pydgraph-0.3.4.tar.gz", "has_sig": true, "md5_digest": "db0680111e5efcff7d3045f5d6530c84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7730, "upload_time": "2016-07-06T10:45:04", "upload_time_iso_8601": "2016-07-06T10:45:04.688313Z", "url": "https://files.pythonhosted.org/packages/67/4f/4646298b55cd76d9b1f3e7497b211c78a2653fd786fba2d7a8e35f30d8c3/pydgraph-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "ad21f0ad2ec53b34c13a5a92ca2bff8a", "sha256": "4408da23e0cbd36c28b1e1c994c76db5e8b783a1ad45400484577ee69e7e152e"}, "downloads": -1, "filename": "pydgraph-0.3.5.tar.gz", "has_sig": true, "md5_digest": "ad21f0ad2ec53b34c13a5a92ca2bff8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8568, "upload_time": "2016-07-06T10:53:54", "upload_time_iso_8601": "2016-07-06T10:53:54.308793Z", "url": "https://files.pythonhosted.org/packages/2e/3a/b9277d356542561b62b113deb6ceefe7e35c6d29185de019104020edfbb9/pydgraph-0.3.5.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "47c9af620a9388c13cb2f545c36f00b3", "sha256": "642234d2f949c0784f0860e8f2684c38a2a75c7bab51c0ad64a9f40a53ea6156"}, "downloads": -1, "filename": "pydgraph-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "47c9af620a9388c13cb2f545c36f00b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21770, "upload_time": "2018-05-16T06:15:15", "upload_time_iso_8601": "2018-05-16T06:15:15.089917Z", "url": "https://files.pythonhosted.org/packages/5d/1c/270b853ff263e3e09c28ecb86dfdeef8290c6c0cb92aa109456251dd465a/pydgraph-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af9f91e315f80696fbe2a4cfe886fde2", "sha256": "5816f913721e9edfd7b0bf47c9496f70adfc4ccf870d6d4badf5fb49b3997067"}, "downloads": -1, "filename": "pydgraph-1.0.0.tar.gz", "has_sig": false, "md5_digest": "af9f91e315f80696fbe2a4cfe886fde2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18741, "upload_time": "2018-05-16T06:15:17", "upload_time_iso_8601": "2018-05-16T06:15:17.858539Z", "url": "https://files.pythonhosted.org/packages/f7/b5/b7f63112cbbc6cb03b62e14e004c04c0ec1a817d033cb7ff9aa69083d90b/pydgraph-1.0.0.tar.gz", "yanked": false}], "1.0.0a1": [{"comment_text": "", "digests": {"md5": "982f89da83a8102ebbe333902d91f23b", "sha256": "920952c779cfaac0bfc53c271d29de0a4295c2ec04da494d7d4a2f8592f1202d"}, "downloads": -1, "filename": "pydgraph-1.0.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "982f89da83a8102ebbe333902d91f23b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15375, "upload_time": "2018-04-04T07:03:05", "upload_time_iso_8601": "2018-04-04T07:03:05.414153Z", "url": "https://files.pythonhosted.org/packages/aa/72/c6942ce5ab3a6f09e0fd0ce197d9330b5ebf8ffbf23052e389fa058a2a64/pydgraph-1.0.0a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ae26cfaad6e9bf10f339d820fdb35a7", "sha256": "e1a5929f7725fac09c244485e6a0da7bbe8d043c8c335350a6d0cd6145633512"}, "downloads": -1, "filename": "pydgraph-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "3ae26cfaad6e9bf10f339d820fdb35a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16832, "upload_time": "2018-04-04T07:03:06", "upload_time_iso_8601": "2018-04-04T07:03:06.877377Z", "url": "https://files.pythonhosted.org/packages/fe/42/5479f4a43041abee217caba4bc354ae40f24a8c337f372ef739cc855e9ed/pydgraph-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "5e7c30e3f142c044f81a372e519fcc7b", "sha256": "03dc4f9472fac116c9adad946b9a6909782e66be3d993ada55b9a12443f06312"}, "downloads": -1, "filename": "pydgraph-1.0.0a2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5e7c30e3f142c044f81a372e519fcc7b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21460, "upload_time": "2018-04-04T07:24:04", "upload_time_iso_8601": "2018-04-04T07:24:04.174182Z", "url": "https://files.pythonhosted.org/packages/01/88/78bb1f9fe133ce825d853cc590a1e9267b0842788330b6836f8870e411bc/pydgraph-1.0.0a2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8adf697b7a55a3e42730614f1597e496", "sha256": "bd6421f885b45afd8a36ee2f693893936a9df3333102605be8950f2d955ec96a"}, "downloads": -1, "filename": "pydgraph-1.0.0a2.tar.gz", "has_sig": false, "md5_digest": "8adf697b7a55a3e42730614f1597e496", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17885, "upload_time": "2018-04-04T07:24:05", "upload_time_iso_8601": "2018-04-04T07:24:05.685600Z", "url": "https://files.pythonhosted.org/packages/1d/69/9053a6575a151303a48a90ea86897d0d25f7be07ce4991e7e0c842bf10a8/pydgraph-1.0.0a2.tar.gz", "yanked": false}], "1.0.0a3": [{"comment_text": "", "digests": {"md5": "16b263fe03873741b18ed30e1a89a167", "sha256": "189503a9cb0fea84220612671e4fe76f99477415744bbdcb26c168a553c61a02"}, "downloads": -1, "filename": "pydgraph-1.0.0a3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "16b263fe03873741b18ed30e1a89a167", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21675, "upload_time": "2018-04-04T07:46:05", "upload_time_iso_8601": "2018-04-04T07:46:05.028082Z", "url": "https://files.pythonhosted.org/packages/77/15/7fe117606c2a23493e5cb1b4b9df0b7384a0edab55701f9575651bef59cd/pydgraph-1.0.0a3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "216d809486436ee6d880d8cd98f5ccc3", "sha256": "158aba97ecab7b5c6f983524dec26cd482d1043040e17356d85cbe56055ddf47"}, "downloads": -1, "filename": "pydgraph-1.0.0a3.tar.gz", "has_sig": false, "md5_digest": "216d809486436ee6d880d8cd98f5ccc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18540, "upload_time": "2018-04-04T07:46:06", "upload_time_iso_8601": "2018-04-04T07:46:06.445596Z", "url": "https://files.pythonhosted.org/packages/c8/c6/bfade6a9afb0be075c5412678bef0995bfe284f8fec7e4f3bda8debd6152/pydgraph-1.0.0a3.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "328e944577e428732f0c09cf425af79f", "sha256": "ff065d1e604b38124b7bf1b96e41d7bc129f7d94247ba1e0d0974da21f05727c"}, "downloads": -1, "filename": "pydgraph-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "328e944577e428732f0c09cf425af79f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22836, "upload_time": "2019-01-03T23:37:14", "upload_time_iso_8601": "2019-01-03T23:37:14.816493Z", "url": "https://files.pythonhosted.org/packages/9e/42/1c92cfbdce88b4f296a0dc233ca8e9abe1320aaa7e2940606df3d18fd875/pydgraph-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19b5e4bd614ac95a1858cf67087de328", "sha256": "8238435c4ca8afbebebdbb332df9ebccb217c374459f235f0845bd8f2e71c6df"}, "downloads": -1, "filename": "pydgraph-1.0.1.tar.gz", "has_sig": false, "md5_digest": "19b5e4bd614ac95a1858cf67087de328", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24069, "upload_time": "2019-01-03T23:37:16", "upload_time_iso_8601": "2019-01-03T23:37:16.213643Z", "url": "https://files.pythonhosted.org/packages/02/2f/92ea3aa5e854ea4b59f2a559726bd7c481bdaa92dfad9600444bbdd8139d/pydgraph-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "51fbf7cbe65341e3c9e64557cdbdec94", "sha256": "57e0f08ab1407d4b16030b7640d89de4ce29de8e82db7b5d13eb7fec54e23d10"}, "downloads": -1, "filename": "pydgraph-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51fbf7cbe65341e3c9e64557cdbdec94", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22942, "upload_time": "2019-03-19T19:15:50", "upload_time_iso_8601": "2019-03-19T19:15:50.414120Z", "url": "https://files.pythonhosted.org/packages/f9/3a/020edfbeadd058803deb632c16b2ae8c754be96aa0100381448b41eea246/pydgraph-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0dae11d50b868c276063a6182496b592", "sha256": "9687d839e3ed5235882e94f390cb9de8360baeb31dc44e7705f40ec57d66b7b3"}, "downloads": -1, "filename": "pydgraph-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0dae11d50b868c276063a6182496b592", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24278, "upload_time": "2019-03-19T19:15:52", "upload_time_iso_8601": "2019-03-19T19:15:52.202794Z", "url": "https://files.pythonhosted.org/packages/24/60/5409d062ec77707f70094fab2721b2fc7f0d7f01e2c5d4121e169f36a732/pydgraph-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "93a99572a1d7cb639c6c48c1d8e150a2", "sha256": "0eb29138217818f00842fe41fb141c204819261ab5e75c8a33bea69efeaaf3f0"}, "downloads": -1, "filename": "pydgraph-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "93a99572a1d7cb639c6c48c1d8e150a2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23189, "upload_time": "2019-03-20T21:48:56", "upload_time_iso_8601": "2019-03-20T21:48:56.126152Z", "url": "https://files.pythonhosted.org/packages/0f/a3/227eaaa7509add5b00583f48e584354604b3824a6c67d9d37ddf53143b0f/pydgraph-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa439bc718ed726d1bd0a7b2771983d5", "sha256": "ffe5df8e97420397642b916ba33c89169ea853124f8faae0349016bb0abe56ae"}, "downloads": -1, "filename": "pydgraph-1.0.3.tar.gz", "has_sig": false, "md5_digest": "fa439bc718ed726d1bd0a7b2771983d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24652, "upload_time": "2019-03-20T21:48:57", "upload_time_iso_8601": "2019-03-20T21:48:57.339937Z", "url": "https://files.pythonhosted.org/packages/68/f3/2ab7103f86014cae925193412d00c7012982261c6b5eff8861b3d415fa02/pydgraph-1.0.3.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "dbbb3f2f9bd4615fa3df24135c511b79", "sha256": "519e9f3bf86593a93fe0b4cd8213ab5e57eec1a4e9476fa5aa8525d2162aefb0"}, "downloads": -1, "filename": "pydgraph-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dbbb3f2f9bd4615fa3df24135c511b79", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23699, "upload_time": "2019-04-16T22:20:40", "upload_time_iso_8601": "2019-04-16T22:20:40.544736Z", "url": "https://files.pythonhosted.org/packages/4d/86/2c0fa19f0d2a0d582d493c94768abe921b81b536dd703f5c26d0d47daea5/pydgraph-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb6459839b8a69bc9fa5c88ceb21f58f", "sha256": "38f63ade971adbf858c039f72745e7b5abaa3ac0649ee7c60f6b964d6252553a"}, "downloads": -1, "filename": "pydgraph-1.1.tar.gz", "has_sig": false, "md5_digest": "fb6459839b8a69bc9fa5c88ceb21f58f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25063, "upload_time": "2019-04-16T22:20:42", "upload_time_iso_8601": "2019-04-16T22:20:42.131860Z", "url": "https://files.pythonhosted.org/packages/d9/38/7f77a2bd90590e1d4395655f1a3d8267056cd84c03d978c491ca909efbba/pydgraph-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "a2b0d0b877a383ebe5343f20c102184f", "sha256": "08fc0f6cba2d172995efa4db2931685b6caef068c14d75ce5b189942c89a853c"}, "downloads": -1, "filename": "pydgraph-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a2b0d0b877a383ebe5343f20c102184f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23708, "upload_time": "2019-04-27T00:06:13", "upload_time_iso_8601": "2019-04-27T00:06:13.378972Z", "url": "https://files.pythonhosted.org/packages/a2/93/210c370ec3029ed0ce4436743a5f03bba8e477e4634f4b24b7a675849919/pydgraph-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "743917642cdd9304e9a6fe90eb8ca5ff", "sha256": "6e7285cb5e7faebb58b801ea487528cb011529f063143342006ec4b87d087f2e"}, "downloads": -1, "filename": "pydgraph-1.1.1.tar.gz", "has_sig": false, "md5_digest": "743917642cdd9304e9a6fe90eb8ca5ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25061, "upload_time": "2019-04-27T00:06:15", "upload_time_iso_8601": "2019-04-27T00:06:15.514783Z", "url": "https://files.pythonhosted.org/packages/5a/5c/19b8e4b606c81471145d967e59be9f5414c9aad23602b2b50438a971be97/pydgraph-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "8de6d8d739d8710498302e398abd39c2", "sha256": "28e4f19fa8906c918045de1c8928323465bd8599de9b5f3c74ca19ebe88c0b16"}, "downloads": -1, "filename": "pydgraph-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8de6d8d739d8710498302e398abd39c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23728, "upload_time": "2019-06-07T22:27:50", "upload_time_iso_8601": "2019-06-07T22:27:50.112199Z", "url": "https://files.pythonhosted.org/packages/67/6b/a879ab2a59e97f8a9a82d7e80f00910a7d4341ea667905df01c39e8ab623/pydgraph-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4346c144bce4771e415a2dbd68287720", "sha256": "cab81957606482c8a486be41e347780ef2d2aadcf97f4a7f7fbe2ae4e55ab268"}, "downloads": -1, "filename": "pydgraph-1.1.2.tar.gz", "has_sig": false, "md5_digest": "4346c144bce4771e415a2dbd68287720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25094, "upload_time": "2019-06-07T22:27:52", "upload_time_iso_8601": "2019-06-07T22:27:52.077698Z", "url": "https://files.pythonhosted.org/packages/3e/b0/a45cbb84c3c8fc4b1bd9927fbbfaaf08d4fc8a8bd2661f5e0e405c538388/pydgraph-1.1.2.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "62d5851dce0cfbd72e30a8a99b153bc0", "sha256": "0763b2c1c7c9955ba06af195f3f193db0a33fa6575084b672a7515a1e0ba5650"}, "downloads": -1, "filename": "pydgraph-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "62d5851dce0cfbd72e30a8a99b153bc0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24005, "upload_time": "2019-06-20T19:30:55", "upload_time_iso_8601": "2019-06-20T19:30:55.713010Z", "url": "https://files.pythonhosted.org/packages/d1/cd/25ac8d97f346fdbed0ad53e04ae2dd8360d0b93efec211d606cdff4a0af7/pydgraph-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4555cee52d90f89e4f267c37b5280688", "sha256": "c661a44716dd1e28d45ed606c0d72672b065e9a2d548fdd98d8c1292ff33e4c1"}, "downloads": -1, "filename": "pydgraph-1.2.0.tar.gz", "has_sig": false, "md5_digest": "4555cee52d90f89e4f267c37b5280688", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25425, "upload_time": "2019-06-20T19:30:57", "upload_time_iso_8601": "2019-06-20T19:30:57.677525Z", "url": "https://files.pythonhosted.org/packages/21/61/e302bb03638e0ab93ef4a6cd2c043266303f13afd5f339a8a185be0e8fb9/pydgraph-1.2.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "f0a074d4bdcc3fc2e7a9d8bae92cd384", "sha256": "afeabbf8657bf1993df6b1c45705fa0f9349503a2e02f9d500ebb76e5b878158"}, "downloads": -1, "filename": "pydgraph-2.0.0.tar.gz", "has_sig": false, "md5_digest": "f0a074d4bdcc3fc2e7a9d8bae92cd384", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20680, "upload_time": "2019-09-06T08:19:15", "upload_time_iso_8601": "2019-09-06T08:19:15.007554Z", "url": "https://files.pythonhosted.org/packages/4d/19/025436211062e121cc344d2f34ed40e990a12a6437d3478161552bf08451/pydgraph-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "2ceaf955905b122c71ba18e9b73b71ed", "sha256": "2ee8ffb4df371b0b1098d0779ff8de13a5a8db74b0875951cfa94268ddcc88da"}, "downloads": -1, "filename": "pydgraph-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2ceaf955905b122c71ba18e9b73b71ed", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22867, "upload_time": "2019-09-06T17:35:13", "upload_time_iso_8601": "2019-09-06T17:35:13.520375Z", "url": "https://files.pythonhosted.org/packages/ee/0e/705d20b8271810d3651701d40fe42e373130c1765daa07fd0da8494cae9c/pydgraph-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b690ba3c8e73461014ebf7bb3a3e719f", "sha256": "2d8543c6f1f64dc4aa24b27898954e7a7a2b88ef50d3f1dd9670b2cff1430df8"}, "downloads": -1, "filename": "pydgraph-2.0.1.tar.gz", "has_sig": false, "md5_digest": "b690ba3c8e73461014ebf7bb3a3e719f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24266, "upload_time": "2019-09-06T17:35:16", "upload_time_iso_8601": "2019-09-06T17:35:16.354978Z", "url": "https://files.pythonhosted.org/packages/e4/fb/30cf7a2200aac67589c6ed339a1d246662c06f692715fa731cfb2fcd1953/pydgraph-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "18a86120a07650e16b3555cfd3127649", "sha256": "b4c91156aef5ef0899bee52224dab7ad8cf8ae63a82d16011d372f18f91090f7"}, "downloads": -1, "filename": "pydgraph-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "18a86120a07650e16b3555cfd3127649", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22868, "upload_time": "2019-09-10T17:43:22", "upload_time_iso_8601": "2019-09-10T17:43:22.856630Z", "url": "https://files.pythonhosted.org/packages/d5/33/aa0e202e8f69e80fb5e187f5eba8a07d8626683f3fe89f1d268438e10957/pydgraph-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08a3bc3a1e47296803137fdc5ed32490", "sha256": "38bfa37b785bf5bcf53f58a02ce8417d40c83723c6b2cdbf428437fbc517ce61"}, "downloads": -1, "filename": "pydgraph-2.0.2.tar.gz", "has_sig": false, "md5_digest": "08a3bc3a1e47296803137fdc5ed32490", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24228, "upload_time": "2019-09-10T17:43:24", "upload_time_iso_8601": "2019-09-10T17:43:24.984381Z", "url": "https://files.pythonhosted.org/packages/33/41/554e65219e412a631e2dd84159ac1e2721a7654ae07fc846397d113bd513/pydgraph-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "423e4e232904ab256988264a1ec43246", "sha256": "8fd3437600cfcc6b179e4bc21efd4087a30eaaa274202caa93ff38c25ffa437f"}, "downloads": -1, "filename": "pydgraph-2.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "423e4e232904ab256988264a1ec43246", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24075, "upload_time": "2020-03-24T21:29:14", "upload_time_iso_8601": "2020-03-24T21:29:14.910408Z", "url": "https://files.pythonhosted.org/packages/d8/55/1b1bdba562d1f32fb7c4a4ea92b624d24001d34230855592c7593f995c68/pydgraph-2.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "825079e6f0deefdb955f5c5ba95daa80", "sha256": "a6824743e448890a97327f931fd34a2a7039dbfb1d99f739318a3cac444b10c5"}, "downloads": -1, "filename": "pydgraph-2.0.3.tar.gz", "has_sig": false, "md5_digest": "825079e6f0deefdb955f5c5ba95daa80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26355, "upload_time": "2020-03-24T21:29:16", "upload_time_iso_8601": "2020-03-24T21:29:16.439275Z", "url": "https://files.pythonhosted.org/packages/8e/01/da745eb1077fbda24926e53a20068f7b124f2b75d4fddaa4a288c9187bc2/pydgraph-2.0.3.tar.gz", "yanked": false}], "20.3.0": [{"comment_text": "", "digests": {"md5": "5d826245c60770e49c24b4ff5733e595", "sha256": "28aa58197ce7d7d9320ce2e3d0628d85b001c44456ac3c0d01f24fd9cc0debd9"}, "downloads": -1, "filename": "pydgraph-20.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5d826245c60770e49c24b4ff5733e595", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23852, "upload_time": "2020-04-01T00:20:30", "upload_time_iso_8601": "2020-04-01T00:20:30.447753Z", "url": "https://files.pythonhosted.org/packages/b5/2b/0e60636014e35d3a14c8ee0ebe4add7694ae03f003440a3835cfd47cd8d9/pydgraph-20.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2aedfd4f97d2c39404609c8b684ddba", "sha256": "a81c92f1d6deb8969f9b28a2a2e945de6feaf50823b3de30b3fcdc210f8f9210"}, "downloads": -1, "filename": "pydgraph-20.3.0.tar.gz", "has_sig": false, "md5_digest": "c2aedfd4f97d2c39404609c8b684ddba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26210, "upload_time": "2020-04-01T00:20:31", "upload_time_iso_8601": "2020-04-01T00:20:31.796878Z", "url": "https://files.pythonhosted.org/packages/1a/2d/16a5b3e003f574da632a8aaf432638be47dd9bac030f4107da9696a7eaae/pydgraph-20.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d826245c60770e49c24b4ff5733e595", "sha256": "28aa58197ce7d7d9320ce2e3d0628d85b001c44456ac3c0d01f24fd9cc0debd9"}, "downloads": -1, "filename": "pydgraph-20.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5d826245c60770e49c24b4ff5733e595", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23852, "upload_time": "2020-04-01T00:20:30", "upload_time_iso_8601": "2020-04-01T00:20:30.447753Z", "url": "https://files.pythonhosted.org/packages/b5/2b/0e60636014e35d3a14c8ee0ebe4add7694ae03f003440a3835cfd47cd8d9/pydgraph-20.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2aedfd4f97d2c39404609c8b684ddba", "sha256": "a81c92f1d6deb8969f9b28a2a2e945de6feaf50823b3de30b3fcdc210f8f9210"}, "downloads": -1, "filename": "pydgraph-20.3.0.tar.gz", "has_sig": false, "md5_digest": "c2aedfd4f97d2c39404609c8b684ddba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26210, "upload_time": "2020-04-01T00:20:31", "upload_time_iso_8601": "2020-04-01T00:20:31.796878Z", "url": "https://files.pythonhosted.org/packages/1a/2d/16a5b3e003f574da632a8aaf432638be47dd9bac030f4107da9696a7eaae/pydgraph-20.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:04 2020"}