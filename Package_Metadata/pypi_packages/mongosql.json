{"info": {"author": "Mark Vartanyan", "author_email": "kolypto@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://api.travis-ci.org/kolypto/py-mongosql.png?branch=master)](https://travis-ci.org/kolypto/py-mongosql)\n[![Pythons](https://img.shields.io/badge/python-3.6%E2%80%933.8-blue.svg)](.travis.yml)\n\n\nMongoSQL\n========\n\nMongoSQL is a JSON query engine that lets you query [SqlAlchemy](http://www.sqlalchemy.org/)\nlike a MongoDB database.\n\nThe main use case is the interation with the UI:\nevery time the UI needs some *sorting*, *filtering*, *pagination*, or to load some\n*related objects*, you won't have to write a single line of repetitive code!\n\nIt will let the API user send a JSON Query Object along with the REST request,\nwhich will control the way the result set is generated:\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    sort: ['first_name-'],  // sort by `first_name` DESC\n    filter: { age: { $gte: 18 } },  // filter: age >= 18\n    join: ['user_profile'],  // load related `user_profile`\n    limit: 10,  // limit to 10 rows\n}))\n```\n\nTired of adding query parameters for pagination, filtering, sorting?\nHere is the ultimate solution.\n\nNOTE: currently, only tested with PostgreSQL.\n\n\n\nTable of Contents\n=================\n\n* <a href=\"#querying\">Querying</a>\n    * <a href=\"#query-object-syntax\">Query Object Syntax</a>\n    * <a href=\"#operations\">Operations</a>\n        * <a href=\"#project-operation\">Project Operation</a>\n        * <a href=\"#sort-operation\">Sort Operation</a>\n        * <a href=\"#filter-operation\">Filter Operation</a>\n        * <a href=\"#join-operation\">Join Operation</a>\n        * <a href=\"#filtering-join-operation\">Filtering Join Operation</a>\n        * <a href=\"#aggregate-operation\">Aggregate Operation</a>\n        * <a href=\"#group-operation\">Group Operation</a>\n        * <a href=\"#slice-operation\">Slice Operation</a>\n        * <a href=\"#count-operation\">Count Operation</a>\n    * <a href=\"#json-column-support\">JSON Column Support</a>\n* <a href=\"#mongosql-programming-interface\">MongoSQL Programming Interface</a>\n    * <a href=\"#mongoquery\">MongoQuery</a>\n        * <a href=\"#creating-a-mongoquery\">Creating a MongoQuery</a>\n        * <a href=\"#reusable\">Reusable</a>\n        * <a href=\"#querying-mongoqueryquery\">Querying: MongoQuery.query()</a>\n        * <a href=\"#getting-results-mongoqueryend\">Getting Results: MongoQuery.end()</a>\n        * <a href=\"#getting-all-sorts-of-results\">Getting All Sorts of Results</a>\n    * <a href=\"#mongoquery-configuration\">MongoQuery Configuration</a>\n    * <a href=\"#mongoquery-api\">MongoQuery API</a>\n        * <a href=\"#mongoquerymodel-handler_settingsnone\">MongoQuery(model, handler_settings=None)</a>\n        * <a href=\"#mongoqueryfrom_queryquery---mongoquery\">MongoQuery.from_query(query) -> MongoQuery</a>\n        * <a href=\"#mongoquerywith_sessionssn---mongoquery\">MongoQuery.with_session(ssn) -> MongoQuery</a>\n        * <a href=\"#mongoqueryqueryquery_object---mongoquery\">MongoQuery.query(**query_object) -> MongoQuery</a>\n        * <a href=\"#mongoqueryend---query\">MongoQuery.end() -> Query</a>\n        * <a href=\"#mongoqueryend_count---countingquery\">MongoQuery.end_count() -> CountingQuery</a>\n        * <a href=\"#mongoqueryresult_contains_entities---bool\">MongoQuery.result_contains_entities() -> bool</a>\n        * <a href=\"#mongoqueryresult_is_scalar---bool\">MongoQuery.result_is_scalar() -> bool</a>\n        * <a href=\"#mongoqueryresult_is_tuples---bool\">MongoQuery.result_is_tuples() -> bool</a>\n        * <a href=\"#mongoqueryget_final_query_object---dict\">MongoQuery.get_final_query_object() -> dict</a>\n        * <a href=\"#mongoqueryensure_loadedcols---mongoquery\">MongoQuery.ensure_loaded(*cols) -> MongoQuery</a>\n        * <a href=\"#mongoqueryget_projection_tree---dict\">MongoQuery.get_projection_tree() -> dict</a>\n        * <a href=\"#mongoqueryget_full_projection_tree---dict\">MongoQuery.get_full_projection_tree() -> dict</a>\n        * <a href=\"#mongoquerypluck_instanceinstance---dict\">MongoQuery.pluck_instance(instance) -> dict</a>\n        * <a href=\"#handlers\">Handlers</a>\n* <a href=\"#crud-helpers\">CRUD Helpers</a>\n    * <a href=\"#crudhelpermodel-handler_settings\">CrudHelper(model, **handler_settings)</a>\n    * <a href=\"#strictcrudhelper\">StrictCrudHelper</a>\n    * <a href=\"#crudviewmixin\">CrudViewMixin()</a>\n    * <a href=\"#saves_relationsfield_names\">@saves_relations(*field_names)</a>\n* <a href=\"#other-useful-tools\">Other Useful Tools</a>\n    * <a href=\"#modelpropertybagsmodel\">ModelPropertyBags(model)</a>\n    * <a href=\"#combinedbagbags\">CombinedBag(**bags)</a>\n    * <a href=\"#countingqueryquery\">CountingQuery(query)</a>\"\n\nQuerying\n========\n\nIf you know how to query documents in MongoDB, you can query your database with the same language.\nMongoSQL uses the familiar [MongoDB Query Operators](https://docs.mongodb.com/manual/reference/operator/query/)\nlanguage with a few custom additions.\n\nThe Query Object, in JSON format, will let you sort, filter, paginate, and do other things.\nYou would typically send this object in the URL query string, like this:\n\n```\nGET /api/user?query={\"filter\":{\"age\":{\"$gte\":18}}}\n```\n\nThe name of the `query` argument, however, may differ from project to project.\n\n\n\nQuery Object Syntax\n-------------------\n\nA Query Object is a JSON object that the API user can submit to the server to change the way the results are generated.\nIt is an object with the following properties:\n\n* `project`: [Project Operation](#project-operation) selects the fields to be loaded\n* `sort`: [Sort Operation](#sort-operation) determines the sorting of the results\n* `filter`: [Filter Operation](#filter-operation) filters the results, using your criteria\n* `join`: [Join Operation](#join-operation) loads related models\n* `joinf`: [Filtering Join Operation](#filtering-join-operation) loads related models with filtering\n* `aggregate`: [Aggregate Operation](#aggregate-operation) lets you calculate statistics\n* `group`: [Group Operation](#group-operation) determines how to group rows while doing aggregation\n* `skip`, `limit`: [Rows slicing](#slice-operation): paginates the results\n* `count`: [Counting rows](#count-operation) counts the number of rows without producing results\n\nAn example Query Object is:\n\n```javascript\n{\n  project: ['id', 'name'],  # Only fetch these columns\n  sort: ['age+'],  # Sort by age, ascending\n  filter: {\n    # Filter condition\n    sex: 'female',  # Girls\n    age: { $gte: 18 },  # Age >= 18\n  },\n  join: ['user_profile'],  # Load the 'user_profile' relationship\n  limit: 100,  # Display 100 per page\n  skip: 10,  # Skip first 10 rows\n}\n```\n\nDetailed syntax for every operation is provided in the relevant sections.\n\nPlease keep in mind that while MongoSQL provides a query language that is rich enough for most typical tasks,\nthere would still be cases when an implementation of a custom API would be better, or even the only option available.\n\nMongoSQL was not designed to be a complete replacement for the SQL; it was designed only to keep you from doing\nrepetitive work :) So it's absolutely fine that some queries that you may have in mind won't be possible with MongoSQL.\n\nOperations\n----------\n\n### Project Operation\n\nProjection corresponds to the `SELECT` part of an SQL query.\n\nIn MongoDB terminology, *projection* is the process of selection a subset of fields from a document.\n\nYour models have many fields, but you do not always need them all. Oftentimes, all you need is just a small number\nof them. That's when you use this operation that *projects* some fields for you.\n\nThe `proj\u00e9ct` operation lets you list the fields that you want to have in the data you get from the API endpoint.\nYou do this by either listing the fields that you need (called *include mode*), or listing the fields that you\n*do not* need (called *exclude mode*).\n\nThe resulting data query on the back-end will only fetch the fields that you've requested, potentially saving a lot\nof bandwidth.\n\nAn example of a projection would look like this:\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    // only include the following fields\n    project: ['id', 'first_name', 'last_name'],\n}))\n```\n\n#### Syntax\n\nThe Project operation supports the following syntaxes:\n\n* Array syntax.\n\n    Provide an array of field names to be included.\n    All the rest will be excluded.\n\n    Example:\n\n    ```javascript\n    { project: ['login', 'first_name'] }\n    ```\n\n* String syntax\n\n    Give a list of field names, separated by whitespace.\n\n    Example:\n\n    ```javascript\n    { project: 'login first_name' }\n    ```\n\n* Object syntax.\n\n    Provide an object of field names mapped to either a `1` (include) or a `0` (exclude).\n\n    Examples:\n\n    ```javascript\n    { project: { 'a': 1, 'b': 1 } } # Include specific fields. All other fields are excluded\n    { project: { 'a': 0, 'b': 0 } }  # Exclude specific fields. All other fields are included\n    ```\n\n    Note that you can't intermix the two: you either use all `1`s to specify the fields you want included,\n    or use all `0`s to specify the fields you want excluded.\n\n    NOTE: One special case is a so-called *full projection*: when your projection object mentions every single property\n    of a model, then you're allowed to set `1`s to some, and `0`s to others in the same object. Use wisely.\n\n#### Fields Excluded by Default\nNote that some fields that exist on the model may not be included *by default*: this is something that\nback-end developers may have configured with `default_exclude` setting on the server.\n\nYou will not receive those fields unless you explicitly require them.\nThis may be appropriate for some field that contain a lot of data, or require some calculation.\n\nTo include those fields, you have to request them explicitly: just use their name\nin the list of fields that you request.\n\n#### Related Models\nNormally, in order to load a related model (say, user's `user_profile`, or some other data related to this model),\nyou would use the [Join Operation](#join-operation).\n\nHowever, for convenience, you can now also load related models by just giving their name in the projection,\nas if it was a field. For example:\n\n```javascript\n{ project: {\n    id: 1,\n    name: 1,\n    user_articles: 1  // the related model will be loaded\n}}\n```\n\nThis request will load the related `user_articles` for you.\n\nNote that some relationships will be disabled for security reasons.\n### Sort Operation\n\nSorting corresponds to the `ORDER BY` part of an SQL query.\n\nThe UI would normally require the records to be sorted by some field, or fields.\n\nThe sort operation lets the API user specify the sorting of the results,\nwhich makes sense for API endpoints that return a list of items.\n\nAn example of a sort operation would look like this:\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    // sort by age, descending;\n    // then sort by first name, alphabetically\n    sort: ['age-', 'first_name+'],\n}))\n```\n\n#### Syntax\n\n* Array syntax.\n\n    List of column names, optionally suffixed by the sort direction: `-` for `DESC`, `+` for `ASC`.\n    The default is `+`.\n\n    Example:\n\n    ```javascript\n    { sort: [ 'a+', 'b-', 'c' ] }  // -> a ASC, b DESC, c DESC\n    ```\n\n* String syntax\n\n    List of columns, with optional `+` / `-`, separated by whitespace.\n\n    Example:\n\n    ```javascript\n    { sort: 'a+ b- c' }\n    ```\n\nObject syntax is not supported because it does not preserve the ordering of keys.\n### Filter Operation\nFiltering corresponds to the `WHERE` part of an SQL query.\n\nMongoSQL-powered API endpoints would typically return the list of *all* items, and leave it up to\nthe API user to filter them the way they like.\n\nExample of filtering:\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    // only select grown-up females\n    filter: {\n        // all conditions are AND-ed together\n        age: { $gte: 18, $lte: 25 },  // age 18..25\n        sex: 'female',  // sex = \"female\"\n    }\n}))\n```\n\n#### Field Operators\nThe following [MongoDB query operators](https://docs.mongodb.com/manual/reference/operator/query/)\noperators are supported:\n\nSupports the following MongoDB operators:\n\n* `{ a: 1 }` - equality check: `field = value`. This is a shortcut for the `$eq` operator.\n* `{ a: { $eq: 1 } }` - equality check: `field = value` (alias).\n* `{ a: { $lt: 1 } }`  - less than: `field < value`\n* `{ a: { $lte: 1 } }` - less or equal than: `field <= value`\n* `{ a: { $ne: 1 } }` - inequality check: `field != value`.\n* `{ a: { $gte: 1 } }` - greater or equal than: `field >= value`\n* `{ a: { $gt: 1 } }` - greater than: `field > value`\n* `{ a: { $prefix: 1 } }` - prefix: `field LIKE \"value%\"`\n* `{ a: { $in: [...] } }` - any of. Field is equal to any of the given array of values.\n* `{ a: { $nin: [...] } }` - none of. Field is not equal to any of the given array of values.\n* `{ a: { $exists: true } }` - value is not `null`.\n\nSupports the following operators on an `ARRAY` field, for a scalar value:\n\n* `{ arr: 1 }`  - containment check: field array contains the given value: `ANY(array) = value`.\n* `{ arr: { $ne: 1 } }` - non-containment check: field array does not contain value: `ALL(array_col) != value`.\n* `{ arr: { $size: 0 } }` - Has a length of N (zero, to check for an empty array)\n\n\nSupports the following operators on an `ARRAY` field, for an array value:\n\n* `{ arr: [...] }`  - equality check: two arrays are completely equal: `arr = value`.\n* `{ arr: { $ne: [...] } }` - inequality check: two arrays are not equal: `arr != value`.\n* `{ arr: { $in: [...] } }` - intersection check. Check that the two arrays have common elements.\n* `{ arr: { $nin: [...] } }` - no intersection check. Check that the two arrays have no common elements.\n* `{ arr: { $all: [...] } }` - Contains all values from the given array\n\n#### Boolean Operators\n\nIn addition to comparing fields to a value, the following boolean operators are supported\nthat enable you to make complex queries:\n\n* `{ $or: [ {..criteria..}, .. ] }`  - any is true\n* `{ $and: [ {..criteria..}, .. ] }` - all are true\n* `{ $nor: [ {..criteria..}, .. ] }` - none is true\n* `{ $not: { ..criteria.. } }` - negation\n\nExample usage:\n\n```javascript\n$.get('/api/books?query=' + JSON.stringify({\n    // either of the two options are fine\n    $or: [\n        // First option: sci-fi by Gardner Dozois\n        { genre: 'sci-fi', editor: 'Gardner Dozois' },\n        // Second option: any documentary\n        { genre: 'documentary' },\n    ]\n}))\n```\n\n#### Related columns\nYou can also filter the data by the *columns on a related model*.\nThis is achieved by using a dot after the relationship name:\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    filter: {\n        // Fields of the 'user' model\n        first_name: 'John',\n        last_name: 'Doe',\n        // Field of a related 'address' model\n        'address.zip': '100098',\n    }\n}))\n```\n### Join Operation\nJoining corresponds to the `LEFT JOIN` part of an SQL query (although implemented as a separate query).\n\nIn the back-end database, the data is often kept in a *normalized form*:\nitems of different types are kept in different places.\nThis means that whenever you need a related item, you'll have to explicitly request it.\n\nThe Join operation lets you load those related items.\n\nPlease keep in mind that most relationships would be disabled on the back-end because of security concerns about\nexposing sensitive data. Therefore, whenever a front-end developer needs to have a relationship loaded,\nit has to be manually enabled on the back-end! Please feel free to ask.\n\nExamples follow.\n\n#### Syntax\n\n* Array syntax.\n\n    In its most simple form, all you need to do is just to provide the list of names of the relationships that you\n    want to have loaded:\n\n    ```javascript\n    $.get('/api/user?query=' + JSON.stringify({\n        join: ['user_profile', 'user_posts'],\n    }))\n    ```\n\n* String syntax.\n\n    List of relationships, separated by whitespace:\n\n    ```javascript\n    $.get('/api/user?query=' + JSON.stringify({\n        join: 'user_profile user_posts',\n    }))\n    ```\n\n* Object syntax.\n\n    This syntax offers you great flexibility: with a nested Query Object, it is now posible to apply operations\n    to related entities: select just a few fields (projection), sort it, filter it, even limit it!\n\n    The nested Query Object supports projections, sorting, filtering, even joining further relations, and\n    limiting the number of related entities that are loaded!\n\n    In this object syntax, the object is an embedded Query Object. For instance:\n\n    ```javascript\n    $.get('/api/user?query=' + JSON.stringify({\n        join: {\n            // Load related 'posts'\n            posts: {\n                filter: { rating: { $gte: 4.0 } },  // Only load posts with raing > 4.0\n                sort: ['date-'],  // newest first\n                skip: 0,  // first page\n                limit: 100,  // 100 per page\n            },\n\n            // Load another relationship\n            'comments': null,  # No specific options, just load\n            }\n        }\n    }))\n    ```\n\n    Note that `null` can be used to load a relationship without custom querying.\n### Filtering Join Operation\nThe [Join Operation](#join-operation) has the following behavior:\nwhen you requested the loading of a relation, and there were no items found, an empty value is returned\n(a `null`, or an empty array).\n\n```javascript\n// This one will return all users\n// (even those that have no articles)\n$.get('/api/user?query=' + JSON.stringify({\n    join: [\"articles\"]  // Regular Join: `join`\n}))\n```\n\nThis `joinf` Filtering Join operation does just the same thing that `join` does;\nhowever, if there were no related items, the primary one is also removed.\n\n```javascript\n// This one will return *only those users that have articles*\n// (users with no articles will be excluded)\n$.get('/api/user?query=' + JSON.stringify({\n    joinf: [\"articles\"]  // Filtering Join: `joinf`\n}))\n```\n\nThis feature is, quite honestly, weird, and is only available for backward-compatibility with a bug that existed\nin some early MongoSQL versions. It has proven to be useful in some cases, so the bug has been given a name and a\nplace within the MongoSQL library :)\n\nNote that `joinf`` does not support `skip` and `limit`\non nested entities because of the way it's implemented with Postgres.\n### Aggregate Operation\nAggregation corresponds to the `SELECT ...` part of an SQL query with aggregation functions.\n\nSometimes the API user wouldn't need the data itself, but rather some statistics on that data: the smallest value,\nthe largest value, the average value, the sum total of all values.\n\nThis is what aggregation does: lets the API user execute statistical queries on the data.\nIts features are limited, but in the spirit of MongoSQL, will save some routine work for back-end developers.\n\nExample:\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    // The youngest and the oldest\n    min_age: { $min: 'age' },\n    max_age: { $max: 'age' },\n\n    // SUM(1) for every user produces the total number of users\n    number_of_users: { $sum: 1 },\n\n    // Count the number of youngsters: age < 18\n    // This is a SUM() of a boolean expression, which gives 1 for every matching row.\n    youngster_count: { $sum: { age: { $lt: 18 } } },\n}))\n```\n\nNote that for security reasons, aggregation must be manually enabled for every field on the back-end.\n\n#### Syntax\nThe syntax is an object that declares custom field names to be used for keeping results:\n\n    aggregate: { computed-field-name: <expression> }\n\nThe *expression* can be:\n\n* Column name: essentially, projecting a column into the result set so that you can have the original value\n\n    Example:\n\n    ```javascript\n    aggregate: {\n        age: 'age'\n    }\n    ```\n\n    This is only useful when combined with the [Group Operation](#group-operation).\n    It is disabled by default on the back-end.\n\n* Aggregation functions:\n\n    * `{ $min: operand }` - smallest value\n    * `{ $max: operand }` - largest value\n    * `{ $avg: operand }` - average value\n    * `{ $sum: operand }` - sum of values\n\n    The *operand* can be:\n\n    * Column name: to apply the aggregation function to a column\n\n        Example:\n\n        ```javascript\n        aggregate: {\n            min_age: { $min: 'age' }\n        }\n        ```\n\n    * Boolean expression: see [Filter Operation](#filter-operation).\n\n        This is a very useful trick.\n        Because the result of a boolean expression is `1` when it's true, you can take a `$sum` of them,\n        and count the number of rows that match that condition.\n\n        Example:\n\n        ```javascript\n        // Count the number of youngsters: age < 18\n        // This is a SUM() of a boolean expression, which gives 1 for every matching row.\n        aggregate: {\n            youngster_count: { $sum: { age: { $lt: 18 } } },\n        }\n        ```\n\n    * Integer value (only supported by `$sum` operator)\n\n        Example:\n\n        ```javascript\n        // Gives the total number of rows\n        aggregate: {\n            total: { $sum: 1 }  // one for every row. Can be 2 or 3 if you like\n        }\n        ```\n\nNote that aggregation often makes sense only when used together with the [Group Operation](#group-operation).\n### Group Operation\nGrouping corresponds to the `GROUP BY` part of an SQL query.\n\nBy default, the [Aggregate Operation](#aggregate-operation) gives statistical results over all rows.\n\nFor instance, if you've asked for `{ avg_age: { $avg: 'age' } }`, you'll get the average age of all users.\n\nOftentimes this is not enough, and you'll want statistics calculated over groups of items.\nThis is what the Group Operation does: specifies which field to use as the \"group\" indicator.\n\nBetter start with a few examples.\n\n#### Example #1: calculate the number of users of every specific age.\nWe use the `age` field as the group discriminator, and the total number of users is therefore calculated per group.\nThe result would be: something like:\n\n    age 18: 25 users\n    age 19: 20 users\n    age 21: 35 users\n    ...\n\nThe code:\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    // The statistics\n    aggregate: {\n        age: 'age',  // Get the unadulterated column value\n        count: { $sum: 1 },  // The count\n    },\n    // The discriminator\n    group: ['age'],  // we do not discriminate by sex this time... :)\n}))\n```\n\n#### Example #2: calculate teh average salary per profession\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n        prof: 'profession',\n        salary: { '$avg': 'salary' }\n    },\n    group: ['profession_id'],\n}))\n```\n\n#### Syntax\nThe Group Operator, as you have seen, receives an array of column names.\n\n* Array syntax.\n\n    List of column names, optionally suffixed by the sort direction: `-` for `DESC`, `+` for `ASC`.\n    The default is `+`.\n\n    Example:\n\n    ```javascript\n    { group: [ 'a+', 'b-', 'c' ] } // -> a ASC, b DESC, c DESC\n    ```\n\n* String syntax\n\n    List of columns, with optional `+` / `-`, separated by whitespace.\n\n    Example:\n\n    ```javascript\n    { group: 'a+ b- c' }\n    ```\n### Slice Operation\nSlicing corresponds to the `LIMIT .. OFFSET ..` part of an SQL query.\n\nThe Slice operation consists of two optional parts:\n\n* `limit` would limit the number of items returned by the API\n* `skip` would shift the \"window\" a number of items\n\nTogether, these two elements implement pagination.\n\nExample:\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    limit: 100, // 100 items per page\n    skip: 200,  // skip 200 items, meaning, we're on the third page\n}))\n```\n\nValues: can be a number, or a `null`.\n### Count Operation\nSlicing corresponds to the `SELECT COUNT(*)` part of an SQL query.\n\nSimply, return the number of items, without returning the items themselves. Just a number. That's it.\n\nExample:\n\n```javascript\n$.get('/api/user?query=' + JSON.stringify({\n    count: 1,\n}))\n```\n\nThe `1` is the *on* switch. Replace it with `0` to stop counting.\n\nNOTE: In MongoSQL 2.0, there is a way to get both the list of items, *and* their count *simultaneously*.\nThis would have way better performance than two separate queries.\nPlease have a look: [CountingQuery](#countingqueryquery) and [MongoQuery.end_count()](#mongoqueryend_count---countingquery).\n\n\nJSON Column Support\n-------------------\n\nA `JSON` (or `JSONB`) field is a column that contains an embedded object,\nwhich itself has fields too. You can access these fields using a dot.\n\nGiven a model fields:\n\n```javascript\nmodel.data = { rating: 5.5, list: [1, 2, 3], obj: {a: 1} }\n```\n\nYou can reference JSON field's internals:\n\n```javascript\n'data.rating'\n'data.list.0'\n'data.obj.a'\n'data.obj.z'  // gives NULL when a field does not exist\n```\n\nOperations that support it:\n\n* [Sort](#sort-operation) and [Group](#group-operation) operations:\n\n    ```javascript\n    $.get('/api/user?query=' + JSON.stringify({\n        sort: ['data.rating']  // JSON field sorting\n    }))\n    ```\n\n* [Filter](#filter-operation) operation:\n\n    ```javascript\n    $.get('/api/user?query=' + JSON.stringify({\n        filter: {\n            'data.rating': { $gte: 5.5 },  // JSON field condition\n        }\n    }))\n    ```\n\n    or this is how you test that a property is missing:\n\n    ```javascript\n    { 'data.rating': null }  // Test for missing property\n    ```\n\n    *CAVEAT*: PostgreSQL is a bit capricious about data types, so MongoSql tries to guess it *using the operand you provide*.\n    Hence, when filtering with a property known to contain a `float`-typed field, please provide a `float` value!.\n\n* [Aggregate](#aggregate-operation):\n\n    ```javascript\n    $.get('/api/user?query=' + JSON.stringify({\n        aggregate: {\n            avg_rating: { $avg: 'data.rating' }\n        }\n    }))\n    ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMongoSQL Programming Interface\n==============================\n\nMongoQuery\n----------\n### Creating a MongoQuery\n`MongoQuery` is the main tool that lets you execute JSON Query Objects against an SqlAlchemy-handled database.\n\nThere are two ways to use it:\n\n1. Construct `MongoQuery` manually, giving it your model:\n\n    ```python\n    from mongosql import MongoQuery\n    from .models import User  # Your model\n\n    ssn = Session()\n\n    # Create a MongoQuery, using an initial Query (possibly, with some initial filtering applied)\n    mq = MongoQuery(User).from_query(ssn.query(User))\n    ```\n\n2. Use the convenience mixin for your Base:\n\n    ```python\n    from sqlalchemy.ext.declarative import declarative_base\n    from mongosql import MongoSqlBase\n\n    Base = declarative_base(cls=(MongoSqlBase,))\n\n    class User(Base):\n        #...\n    ```\n\n    Using this Base, your models will have a shortcut method which returns a `MongoQuery`:\n\n    ```python\n    User.mongoquery(session)\n    User.mongoquery(query)\n    ```\n\n    With `mongoquery()`, you can construct a query from a session:\n\n    ```python\n    mq = User.mongoquery(session)\n    ```\n\n    .. or from an [sqlalchemy.orm.Query](https://docs.sqlalchemy.org/en/latest/orm/query.html),\n    which allows you to apply some initial filtering:\n\n    ```python\n    mq = User.mongoquery(\n        session.query(User).filter_by(active=True)  # Only query active users\n    )\n    ```\n\n### Reusable\nA `MongoQuery` object itself is not reusable: it can make just one query.\n\nHowever, it makes sense to save some initialization and keep it ready for new requests.\nFor performance reasons, this has to be done manually with the `Reusable` wrapper:\n\n```python\nmq_factory = Reusable(User.mongoquery(session))\n```\n\nThe wrapped object has all the methods of a `MongoQuery`, but will make a proper copy when used.\nThink of it as a factory.\n\n### Querying: `MongoQuery.query()`\nOnce a `MongoQuery` is prepared, you can give it a QueryObject:\n\n```python\n# QueryObject\nquery_object = {\n  'filter': {\n    'sex': 'f',\n    'age': { '$gte': 18, '$lte': 25 },  # 18..25 years\n  },\n  'order': ['weight+'],  #  slims first\n  'limit': 50,  # just enough :)\n}\n\n# MongoQuery\nmq = User.mongoquery(ssn).query(**query_object)\n```\n\n### Getting Results: `MongoQuery.end()`\nBecause `MongoQuery` is just a wrapper around an SqlAlchemy's `Query`, you can get that `Query`\nand get results out of it:\n\n```python\n# By calling the `MongoQuery.end()` method, you get an SqlAlchemy `Query`:\nq = mq.end()  # SqlALchemy Query\n\n# Execute the query and fetch results\ngirls = q.all()\n```\n\n### Getting All Sorts of Results\nLet's remember that the Query generated by MongoQuery can return three sorts of results:\n\n1. Entities. When the API user has requested an entity of a list of them.\n3. Integer. When the API user has used `{count: 1}`.\n2. Tuples. This is what you get when the API user has used the [Aggregate Operation](#aggregate-operation).\n\n`MongoQuery` has three methods that help you detect what you get:\n\n1. `MongoQuery.result_contains_entities()`\n2. `MongoQuery.result_is_scalar()`\n3. `MongoQuery.result_is_tuples()`\n\nHere's how to use it:\n\n```python\ndef get_result(mq: MongoQuery, query: Query):\n    # Handle: Query Object has count\n    if mq.result_is_scalar():\n        return {'count': query.scalar()}\n\n    # Handle: Query Object has group_by and yields tuples\n    if mq.result_is_tuples():\n        # zip() column names together with the values, and make it into a dict\n        return {\n            'results': [dict(zip(row.keys(), row))\n                        for row in query]\n        }\n\n    # Regular result: entities\n    return {\n        'users': query.all()\n    }\n```\n\nMost likely, you won't need to handle that at all: just use  [CRUD Helpers](#crud-helpers)\nthat implement most of this logic for you.\n\nMongoQuery Configuration\n------------------------\n\n`MongoQuery` has plenty of settings that lets you configure the way queries are made,\nto fine-tune their security limitations, and to implement some custom behaviors.\n\nThese settings can be nicely kept in a [MongoQuerySettingsDict](mongosql/util/settings_dict.py)\nand given to MongoQuery as the second argument.\n\nExample:\n\n```python\nfrom mongosql import MongoQuery, MongoQuerySettingsDict\n\nmq = MongoQuery(models.User, MongoQuerySettingsDict(\n    bundled_project=dict(\n        # can only join to the following relations\n        allowed_relations=('articles', 'comments'),\n        # configure nested queries\n        related=dict(\n            manager=dict(\n                force_exclude=('password',),\n            )\n        ),\n        # enable aggregation for columns\n        aggregate_columns=('age',),\n    ),\n))\n```\n\nThe available settings are:\n\n\n* `default_projection`: (for: project)\n    The default projection to use when no input was provided.\n    When an input value is given, `default_projection` is not used at all: it overrides the default\n    completely. If you want to merge some default into every projection, use some of the following settings:\n    `default_exclude`, `force_include`, `force_exclude`\n\n    NOTE: If you want the API to return *all fields* by default, use `None`. If you want the API to\n    return *no fields* by default, use an empty list `[]`.\n    This is because `None` is seen as \"no default\", and MongoSQL uses its internal default of including\n    all fields; but `[]` is seen as an instruction \"to include no fields by default\".\n\n* `default_exclude`: (for: project)\n    A list of attributes that are excluded from every projection.\n    The only way to load these attributes would be to request them explicitly.\n    Use this for properties that contain a lot of data, or require extra queries.\n\n* `default_exclude_properties`: (for: project)\n    When `True`, all `@property` and `@hybrid_property` attributes\n    will be excluded by default (put into `default_exclude`).\n    This is a convenivent shortcut.\n    Use `default_include_properties` to overrule.\n\n* `default_unexclude_properties`: (for: project)\n    The list of `@property` and `@hybrid_property` attributes that won't be excluded:\n    they will be treated like the rest of the columns.\n\n* `bundled_project`: (for: project)\n    The dict that declares columns that depend on other columns being loaded.\n    When you have a property that depends on some columns, and the user wants it loaded, the setting\n    got to have the name of the property mapped to the list of dependent columns.\n    Example: {'full_name': ['first_name', 'last_name']}\n    The additional columns would be loaded quietly, without being included into the projection.\n\n* `force_include`: (for: project)\n    A list of attributes that will always be loaded and included into the output.\n\n* `force_exclude`: (for: project)\n    A list of attributes that will always be unloaded and excluded from the output.\n    No matter what you do, you can't access them.\n\n* `ensure_loaded`: (for: project)\n    A list of columns that will be loaded even when the user didn't request them.\n    These columns will be loaded quietly, however, without being included into the projection.\n    Use case: columns which your code requires. It would break without them, in case the user excludes them.\n    You wouldn't want to force include them, but you'd like to include them 'quietly'.\n\n* `raiseload_col`: (for: project)\n    Granular `raiseload`: only raise when columns are lazy loaded\n\n* `raiseload_rel`: (for: join)\n    Granular `raiseload`: only raise when relations are lazy loaded\n\n* `raiseload`: (for: project, join)\n    Raise an exception when a column or a relationship that was not loaded\n    is accessed by the application.\n    This would result in an additional SQL query, which is very slow.\n\n    This is a performance safeguard: when the API user does not want certain columns,\n    they are not loaded. However, when the application tries to access them.\n    When `raiseload_col=True`, you'll need to load all the columns & relationships manually\n    (with `undefer()` and `joinedload()`), or by using `MongoQuery.ensure_loaded()`.\n\n* `aggregate_columns`: (for: aggregate)\n    List of column names for which aggregation is enabled.\n    All columns for which aggregation is not explicitly enabled are disabled.\n\n* `aggregate_labels`: (for: aggregate)\n    Whether to enable labelling columns (aliases).\n    This features is mostly useless,\n    but exists here to complete compatilibility with MongoDB queries.\n\n* `force_filter`: (for: filter)\n    A dictionary with a filter that will be forced onto every request;\n    or a Python `callable(model)` that returns a filtering condition for Query.filter().\n\n* `scalar_operators`: (for: filter)\n    A dict of additional operators for scalar columns.\n    A better way to declare global operators would be to subclass MongoFilter\n    and declare the additional operators inside the class.\n\n* `array_operators`: (for: filter)\n    A dict of additional operators for array columns.\n\n* `allowed_relations`: (for: join)\n    An explicit list of relationships that can be loaded by the user.\n    All other relationships will raise a DisabledError when a 'join' is attempted.\n\n* `banned_relations`: (for: join)\n    An list of relationships that cannot be loaded by the user: DisabledError will be raised.\n\n* `max_items`: (for: limit)\n    The maximum number of items that can be loaded with this query.\n    The user can never go any higher than that, and this value is forced onto every query.\n\n* `legacy_fields`: (for: everything)\n    The list of fields (columns, relationships) that used to exist, but do not anymore.\n    These fields will be quietly ignored by all handlers. Note that they will still appear in projections\n    from `project` and `join` handlers. If you rely on them, your code will have to be able to ignore\n    those fields as well.\n\n    This is implemented for introducing breaking changes into the code when developers might still refer\n    to the old column which is simply not there anymore.\n\n    When a relationship or a column has disappeared from the model, the recommended\n    backwards-compatible approach is to have it both in `legacy_fields` and `force_include`,\n    and a @property that provides some fake value for compatibility.\n    This way, clients will always get something, even though they cannot join manually anymore.\n\n* `aggregate_enabled`: Enable/disable the `aggregate` handler\n\n* `count_enabled`: Enable/disable the `count` handler\n\n* `filter_enabled`: Enable/disable the `filter` handler\n\n* `group_enabled`: Enable/disable the `group` handler\n\n* `join_enabled`: Enable/disable the `join` handler\n\n* `joinf_enabled`: Enable/disable the `joinf` handler\n\n* `limit_enabled`: Enable/disable the `limit` handler\n\n* `project_enabled`: Enable/disable the `project` handler\n\n* `sort_enabled`: Enable/disable the `sort` handler\n\n* `related`: Settings for queries on related models, based on the relationship name.\n\n    For example, when a `User` has a relationship named 'articles',\n    you can put the 'articles' key into this setting, and configure\n    how queries to the related models are made.\n\n    This way, you can define a completely different set of settings when a model is\n    queried through another model's relationship.\n\n    ```python\n    related = dict(\n        # handler_settings for nested queries may be configured per relationship\n        relation-name: dict,\n        relation-name: lambda: dict,\n        relation-name: None,  # will fall back to '*'\n        # The default\n        # If there's no default, or gives None, `related_models` will be used\n        '*': lambda relationship_name, target_model: dict | None,\n    )\n    # or\n    related = lambda: dict\n    ```\n\n* `related_models`: When configuring every relationship seems to be too much, and you just want to define\n    common settings for every model, use this setting instead of 'related'.\n\n    It will automatically configure every relationship based on the target model.\n\n    ```python\n    related_models = dict(\n        # handler_settings for nested queries may be configured per model\n        # note that you're supposed to use models, not their names!\n        Model: dict,\n        Model: lambda: dict,\n        Model: None,  # will fall back to '*'\n        # The default\n        # If there's no default, or it yields None, the default handler_settings is used\n        '*': lambda relationship_name, target_model: dict | None,\n        # Example:\n        '*': lambda *args: dict(join=False)  # disallow further joins\n    )\n    # or\n    related_models = lambda: dict\n    ```\n\n    It can also be used as a default, when there's no custom configuration provided in\n    the 'related' settings.\n\n    The 'related_models' setting actually enables you to have one global dict that will\n    define the \"default\" rules that apply to an entity, no matter how it's loaded:\n    directly, or through a relationship of another model.\n\n    ```python\n    # Collect all your settings into one global dict\n    all_settings = {\n        User: user_settings,\n        Article: article_settings,\n        Comment: comment_settings,\n    }\n\n    # and reference it recursively from every model:\n    user_settings = dict(\n        related_models=lambda: all_settings\n    )\n    ```\n\n    Be careful, though: if every model inherits its `allowed_relations`,\n    it would be possible to get almost any object through a series of nested joins!\n\n\n\n\nMore settings are available through the [CRUD helper](#crud-helpers) settings,\nwhich is an extension of [MongoQuery Configuration](#mongoquery-configuration):\n\n\n* `writable_properties`: Are `@property` model attributes writable?\n\n    When `False`, and incoming JSON object will only be allowed to set/modify real\n    columns. The only way to save a value for a `@property` would be to use the\n    `@saves_relations` decorator and handle the value manually.\n\n    When `True`, even `@property` and `@hybrid_property` objects will be writable.\n    Note that validation, as with other fields, is up to you.\n    In order to be completely writable, it also has to be in the `rw_fields` list.\n\n* `ro_fields`: The list of read-only fields.\n\n    These fields can only be modified in the code.\n    Whenever any of those fields is submitted to the API endpoint, it's ignored,\n    and even removed from the incoming entity dict.\n\n* `rw_fields`: The list of writable fields.\n\n    When you have too many `ro_fields`, it may be easier to provide a list of\n    those that are writable; all the rest become read-only.\n\n* `const_fields`: The list of constant fields.\n\n    These fields can only be set when an object is created, but never changed\n    when it is modified.\n\n* `query_defaults`: Default values for every Query Object.\n\n    This is the default Query Object that provides the defaults for every query.\n    For instance, this may be the default `limit: 100`, or a default `project` operator.\n\n* `**mongoquery_settings`: more settings for `MongoQuery` (as described above)\n\n\n\nMongoQuery API\n--------------\n\n### `MongoQuery(model, handler_settings=None)`\nMongoQuery is a wrapper around SqlAlchemy's `Query` that can safely execute JSON Query Objects\n\n### `MongoQuery.from_query(query) -> MongoQuery`\nSpecify a custom sqlalchemy query to work with.\n\nIt can have, say, initial filtering already applied to it.\nIt no default query is provided, _from_query() will use the default.\n\n\nArguments:\n\n\n* `query: Query`: Initial sqlalchemy query to work with (e.g. with initial filters pre-applied)\n\n\n\n\nReturns `MongoQuery`\n\n\n\n\n\n### `MongoQuery.with_session(ssn) -> MongoQuery`\nQuery with the given sqlalchemy Session\n\n\nArguments:\n\n\n* `ssn: Session`: The SqlAlchemy `Session` to use for querying\n\n\n\n\nReturns `MongoQuery`\n\n\n\n\n\n### `MongoQuery.query(**query_object) -> MongoQuery`\nBuild a MongoSql query from an object\n\n\nArguments:\n\n\n* `**query_object`: The Query Object to execute.\n\n\n\n\nReturns `MongoQuery`\n\n\n\nExceptions:\n\n\n* `InvalidRelationError`: Invalid relationship name provided in the input\n\n* `InvalidColumnError`: Invalid column name provided in the input\n\n* `InvalidQueryError`: syntax error for any of the Query Object sections\n\n* `InvalidQueryError`: unknown Query Object operations provided (extra keys)\n\n\n\n\n\n### `MongoQuery.end() -> Query`\nGet the resulting sqlalchemy `Query` object\n\n\n\n\nReturns `Query`\n\n\n\n\n\n### `MongoQuery.end_count() -> CountingQuery`\nGet the result, and also count the total number of rows.\n\nBe aware that the cost will be substantially higher than without the total number,\nbut still cheaper than two separate queries.\n\nNumbers: this gives about 50% boost to small result sets, and about 15% boost to larger result sets.\n\nSee [CountingQuery](#countingqueryquery) for more details.\n\n\n\n\nReturns `CountingQuery`\n\n\n\n\n\nExample:\n\n```python\nq = User.mongoquery(ssn).query(...).end_count()\n\n# Get the count\nq.count  # -> 127\n\n# Get results\nlist(q)  # -> [User, ...]\n\n# (!) only one actual SQL query was made\n```\n\n\n### `MongoQuery.result_contains_entities() -> bool`\nTest whether the result will contain entities.\n\nThis is normally the case in the absence of 'aggregate', 'group', and 'count' queries.\n\n\n\n\nReturns `bool`\n\n\n\n\n\n### `MongoQuery.result_is_scalar() -> bool`\nTest whether the result is a scalar value, like with count\n\nIn this case, you'll fetch it like this:\n\n    MongoQuery(...).end().scalar()\n\n\n\n\nReturns `bool`\n\n\n\n\n\n### `MongoQuery.result_is_tuples() -> bool`\nTest whether the result is a list of keyed tuples, like with group_by\n\nIn this case, you might fetch it like this:\n\n    res = MongoQuery(...).end()\n    return [dict(zip(row.keys(), row)) for row in res], None\n\n\n\n\nReturns `bool`\n\n\n\n\n\n### `MongoQuery.ensure_loaded(*cols) -> MongoQuery`\nEnsure the given columns, relationships, and related columns are loaded\n\nDespite any projections and joins the user may be doing, make sure that the given `cols` are loaded.\nThis will ensure that every column is loaded, every relationship is joined, and none of those is included\ninto `projection` and `pluck_instance`.\n\nThis method is to be used by the application code to handle the following situation:\n* The API user has requested only fields 'a', 'b', 'c' to be loaded\n* The application code needs field 'd' for its operation\n* The user does not want to see no 'd' in the output.\nSolution: use ensure_loaded('d'), and then pluck_instance()\n\nLimitations:\n\n1. If the user has requested filtering on a relationship, you can't use ensure_loaded() on it.\n    This method will raise an InvalidQueryError().\n    This makes sense, because if your application code relies on the presence of a certain relationship,\n    it certainly needs it fully loaded, and unfiltered.\n2. If the request contains no entities (e.g. 'group' or 'aggregate' handlers are used),\n   this method would throw an AssertionError\n\nIf all you need is just to know whether something is loaded or not, use MongoQuery.__contains__() instead.\n\nRemember that every time you use ensure_loaded() on a relationship, you disable the possibility of filtering for it!\n\n\nArguments:\n\n\n* `*cols`: Column names ('age'), Relation names ('articles'), or Related column names ('articles.name')\n\n\n\n\nReturns `MongoQuery`\n\n\n\nExceptions:\n\n\n* `ValueError`: invalid column or relationship name given.\n        It does not throw `InvalidColumnError` because that's likely your error, not an error of the API user :)\n\n* `InvalidQueryError`: cannot merge because the relationship has a filter on it\n\n\n\n\n\n### `MongoQuery.get_final_query_object() -> dict`\nGet the final Query Object dict (after all handlers have applied their defaults).\n\nThis Query Object will contain the name of every single handler, including those that were not given any input.\n\n\n\n\nReturns `dict`\n\n\n\n\n\n### `MongoQuery.get_projection_tree() -> dict`\nGet a projection-like dict that maps every included column to 1,\nand every relationship to a nested projection dict.\n\n\n\n\nReturns `dict`: the projection\n\n\n\n\n\nExample:\n\n```python\nMongoQuery(User).query(join={'articles': dict(project=('id',))}).handler_join.projection\n#-> {'articles': {'id': 1}}\n```\n\nThis is mainly useful for debugging nested Query Objects.\n\n\n### `MongoQuery.get_full_projection_tree() -> dict`\nGet a full projection tree that mentions every column, but only those relationships that are loaded\n\n\n\n\nReturns `dict`\n\n\n\n\n\n### `MongoQuery.pluck_instance(instance) -> dict`\nPluck an sqlalchemy instance and make it into a dict\n\nThis method should be used to prepare an object for JSON encoding.\nThis makes sure that only the properties explicitly requested by the user get included\ninto the result, and *not* the properties that your code may have loaded.\n\nProjection and Join properties are considered.\n\n\nArguments:\n\n\n* `instance: object`: object\n\n\n\n\nReturns `dict`\n\n\n\n\n\n\n### Handlers\nIn addition to this, `MongoQuery` lets you inspect the internals of the MongoQuery.\nEvery handler is available as a property of the `MongoQuery`:\n\n* `MongoQuery.handler_project`: [handlers.MongoProject](mongosql/handlers/project.py)\n* `MongoQuery.handler_sort`: [handlers.MongoSort](mongosql/handlers/sort.py)\n* `MongoQuery.handler_group`: [handlers.MongoGroup](mongosql/handlers/group.py)\n* `MongoQuery.handler_join`: [handlers.MongoJoin](mongosql/handlers/join.py)\n* `MongoQuery.handler_joinf`: [handlers.MongoFilteringJoin](mongosql/handlers/joinf.py)\n* `MongoQuery.handler_filter`: [handlers.MongoFilter](mongosql/handlers/filter.py)\n* `MongoQuery.handler_aggregate`: [handlers.MongoAggregate](mongosql/handlers/aggregate.py)\n* `MongoQuery.handler_limit`: [handlers.MongoLimit](mongosql/handlers/limit.py)\n* `MongoQuery.handler_count`: [handlers.MongoCount](mongosql/handlers/count.py)\n\nSome of them have methods which may be useful for the application you're building,\nespecially if you need to get some information out of `MongoQuery`.\n\n\n\n\n\nCRUD Helpers\n============\n\nMongoSql is designed to help with data selection for the APIs.\nTo ease the pain of implementing CRUD for all of your models,\nMongoSQL comes with a CRUD helper that exposes MongoSQL capabilities for querying to the API user.\nTogether with [RestfulView](https://github.com/kolypto/py-flask-jsontools#restfulview)\nfrom [flask-jsontools](https://github.com/kolypto/py-flask-jsontools),\nCRUD controllers are extremely easy to build.\n\n## `CrudHelper(model, writable_properties=True, **handler_settings)`\nCrud helper: an object that helps implement CRUD operations for an API endpoint:\n\n* Create: construct SqlAlchemy instances from the submitted entity dict\n* Read: use MongoQuery for querying\n* Update: update SqlAlchemy instances from the submitted entity using a dict\n* Delete: use MongoQuery for deletion\n\nSource: [mongosql/crud/crudhelper.py](mongosql/crud/crudhelper.py)\n\nThis object is supposed to be initialized only once;\ndon't do it for every query, keep it at the class level!\n\nMost likely, you'll want to keep it at the class level of your view:\n\n```python\nfrom .models import User\nfrom mongosql import CrudHelper\n\nclass UserView:\n    crudhelper = CrudHelper(\n        # The model to work with\n        User,\n        # Settings for MongoQuery\n        **MongoQuerySettingsDict(\n            allowed_relations=('user_profile',),\n        )\n    )\n    # ...\n```\n\nNote that during \"create\" and \"update\" operations, this class lets you write values\nto column attributes, and also to @property that are writable (have a setter).\nIf this behavior (with writable properties) is undesirable,\nset `writable_properties=False`\n\nThe following methods are available:\n\n### `CrudHelper.query_model(query_obj=None, from_query=None) -> MongoQuery`\nMake a MongoQuery using the provided Query Object\n\nNote that you have to provide the MongoQuery yourself.\nThis is because it has to be properly configured with handler_settings.\n\n\nArguments:\n\n\n* `query_obj: Union[Mapping, NoneType] = None`: The Query Object to use\n\n* `from_query: Union[sqlalchemy.orm.query.Query, NoneType] = None`: An optional Query to initialize MongoQuery with\n\n\n\n\nReturns `MongoQuery`\n\n\n\nExceptions:\n\n\n* `exc.DisabledError`: A feature is disabled; likely, due to a configuration issue. See handler_settings.\n\n* `exc.InvalidQueryError`: There is an error in the Query Object that the user has made\n\n* `exc.InvalidRelationError`: Invalid relationship name specified in the Query Object by the user\n\n* `exc.InvalidColumnError`: Invalid column name specified in the Query Object by the user\n\n\n\n\n\n### `CrudHelper.create_model(entity_dict) -> object`\nCreate an instance from entity dict.\n\nThis method lets you set the value of columns and writable properties,\nbut not relations. Use @saves_relations to handle additional fields.\n\n\nArguments:\n\n\n* `entity_dict: Mapping`: Entity dict\n\n\n\n\nReturns `object`: Created instance\n\n\n\nExceptions:\n\n\n* `InvalidColumnError`: invalid column\n\n* `InvalidQueryError`: validation errors\n\n\n\n\n\n### `CrudHelper.update_model(entity_dict, instance) -> object`\nUpdate an instance from an entity dict by merging the fields\n\n- Attributes are copied over\n- JSON dicts are shallowly merged\n\nNote that because properties are *copied over*,\nthis operation does not replace the entity; it merely updates the entity.\n\nIn other words, this method does a *partial update*:\nonly updates the fields that were provided by the client, leaving all the rest intact.\n\n\nArguments:\n\n\n* `entity_dict: Mapping`: Entity dict\n\n* `instance: object`: The instance to update\n\n\n\n\nReturns `object`: New instance, updated\n\n\n\nExceptions:\n\n\n* `InvalidColumnError`: invalid column\n\n* `InvalidQueryError`: validation errors\n\n\n\n\n\n\n\n## `StrictCrudHelper`\nA Strict Crud Helper imposes defaults and limitations on the API user:\n\nSource: [mongosql/crud/crudhelper.py](mongosql/crud/crudhelper.py)\n\n- Read-only fields can not be set: not with create, nor with update\n- Constant fields can be set initially, but never be updated\n- Defaults for Query Object provide the default values for every query, unless overridden\n\nThe following behavior is implemented:\n\n* By default, all fields are writable\n* If ro_fields is provided, these fields become read-only, all other fields are writable\n* If rw_fields is provided, ony these fields are writable, all other fields are read-only\n* If const_fields, it is seen as a further limitation on rw_fields: those fields would be writable,\n    but only once.\n\n### `StrictCrudHelper(model, writable_properties=True, ro_fields=None, rw_fields=None, const_fields=None, query_defaults=None, **handler_settings)`\nInitializes a strict CRUD helper\n\nNote: use a `**StrictCrudHelperSettingsDict()` to help you with the argument names and their docs!\n\n\nArguments:\n\n\n* `model: DeclarativeMeta`: The model to work with\n\n* `writable_properties: bool = True`: \n\n* `ro_fields: Union[Iterable[str], Callable, NoneType] = None`: List of read-only property names, or a callable which gives the list\n\n* `rw_fields: Union[Iterable[str], Callable, NoneType] = None`: List of writable property names, or a callable which gives the list\n\n* `const_fields: Union[Iterable[str], Callable, NoneType] = None`: List of property names that are constant once set, or a callable which gives the list\n\n* `query_defaults: Union[Iterable[str], Callable, NoneType] = None`: Defaults for every Query Object: Query Object will be merged into it.\n\n* `**handler_settings`: Settings for the `MongoQuery` used to make queries\n\n\n\n\n\n\n\n\nExample:\n\n```python\nfrom .models import User\nfrom mongosql import StrictCrudHelper, StrictCrudHelperSettingsDict\n\nclass UserView:\n    crudhelper = StrictCrudHelper(\n        # The model to work with\n        User,\n        # Settings for MongoQuery and StrictCrudHelper\n        **StrictCrudHelperSettingsDict(\n            # Can never be set of modified\n            ro_fields=('id',),\n            # Can only be set once\n            const_fields=('login',),\n            # Relations that can be `join`ed\n            allowed_relations=('user_profile',),\n        )\n    )\n    # ...\n```\n\n\n\n\n## `CrudViewMixin()`\nA mixin class for implementations of CRUD views.\n\nThis class is supposed to be re-initialized for every request.\n\nTo implement a CRUD view:\n1. Implement some method to extract the Query Object from the request\n2. Set `crudhelper` at the class level, initialize it with the proper settings\n3. Implement the `_get_db_session()` and the `_get_query_object()` methods\n4. If necessary, implement the `_save_hook()` to customize new & updated entities\n5. Override `_method_list()` and `_method_get()` to customize its output\n6. Override `_method_create()`, `_method_update()`, `_method_delete()` and implement saving to the DB\n7. Use [`@saves_relations`](#saves_relationsfield_names) method decorator to handle custom fields in the input dict\n\nFor an example on how to use CrudViewMixin, see this implementation:\n[tests/crud_view.py](tests/crud_view.py)\n\nAttrs:\n    _mongoquery (MongoQuery):\n        The MongoQuery object used to process this query.\n\n### `CrudViewMixin._get_db_session() -> Session`\n(Abstract method) Get a DB session to be used for queries made in this view\n\n\n\n\nReturns `Session`: sqlalchemy.orm.Session\n\n\n\n\n\n### `CrudViewMixin._get_query_object() -> Mapping`\n(Abstract method) Get the Query Object for the current query.\n\nNote that the Query Object is not only supported for get() and list() methods, but also for\ncreate(), update(), and delete(). This enables the API use to request a relationship right away.\n\n\n\n\nReturns `Mapping`\n\n\n\n\n\n\n### `CrudViewMixin._method_get(*filter, **filter_by) -> object`\n(CRUD method) Fetch a single entity: as in READ, single entity\n\nNormally, used when the user has supplied a primary key:\n\n    GET /users/1\n\n\nArguments:\n\n\n* `*filter`: Additional filter() criteria\n\n* `**filter_by`: Additional filter_by() criteria\n\n\n\n\nReturns `object`\n\n\n\nExceptions:\n\n\n* `exc.InvalidQueryError`: Query Object errors made by the user\n\n* `sqlalchemy.orm.exc.MultipleResultsFound`: Multiple found\n\n* `sqlalchemy.orm.exc.NoResultFound`: Nothing found\n\n\n\n\n\n### `CrudViewMixin._method_list(*filter, **filter_by) -> Iterable[object]`\n(CRUD method) Fetch a list of entities: as in READ, list of entities\n\nNormally, used when the user has supplied no primary key:\n\n    GET /users/\n\nNOTE: Be careful! This methods does not always return a list of entities!\nIt can actually return:\n1. A scalar value: in case of a 'count' query\n2. A list of dicts: in case of an 'aggregate' or a 'group' query\n3. A list or entities: otherwise\n\nPlease use the following MongoQuery methods to tell what's going on:\nMongoQuery.result_contains_entities(), MongoQuery.result_is_scalar(), MongoQuery.result_is_tuples()\n\nOr, else, override the following sub-methods:\n_method_list_result__entities(), _method_list_result__groups(), _method_list_result__count()\n\n\nArguments:\n\n\n* `*filter`: Additional filter() criteria\n\n* `**filter_by`: Additional filter_by() criteria\n\n\n\n\nReturns `Iterable[object]`\n\n\n\nExceptions:\n\n\n* `exc.InvalidQueryError`: Query Object errors made by the user\n\n\n\n\n\n### `CrudViewMixin._method_create(entity_dict) -> object`\n(CRUD method) Create a new entity: as in CREATE\n\nNormally, used when the user has supplied no primary key:\n\n    POST /users/\n    {'name': 'Hakon'}\n\n\nArguments:\n\n\n* `entity_dict: dict`: Entity dict\n\n\n\n\nReturns `object`: The created instance (to be saved)\n\n\n\nExceptions:\n\n\n* `exc.InvalidQueryError`: Query Object errors made by the user\n\n\n\n\n\n### `CrudViewMixin._method_update(entity_dict, *filter, **filter_by) -> object`\n(CRUD method) Update an existing entity by merging the fields: as in UPDATE\n\nNormally, used when the user has supplied a primary key:\n\n    POST /users/1\n    {'id': 1, 'name': 'Hakon'}\n\n\nArguments:\n\n\n* `entity_dict: dict`: Entity dict\n\n* `*filter`: Criteria to find the previous entity\n\n* `**filter_by`: Criteria to find the previous entity\n\n\n\n\nReturns `object`: The updated instance (to be saved)\n\n\n\nExceptions:\n\n\n* `exc.InvalidQueryError`: Query Object errors made by the user\n\n* `sqlalchemy.orm.exc.MultipleResultsFound`: Multiple entities found with the filter condition\n\n* `sqlalchemy.orm.exc.NoResultFound`: The entity not found\n\n\n\n\n\n### `CrudViewMixin._method_delete(*filter, **filter_by) -> object`\n(CRUD method) Delete an existing entity: as in DELETE\n\nNormally, used when the user has supplied a primary key:\n\n    DELETE /users/1\n\nNote that it will load the entity from the database prior to deletion.\n\n\nArguments:\n\n\n* `*filter`: Criteria to find the previous entity\n\n* `**filter_by`: Criteria to find the previous entity\n\n\n\n\nReturns `object`: The instance to be deleted\n\n\n\nExceptions:\n\n\n* `exc.InvalidQueryError`: Query Object errors made by the user\n\n* `sqlalchemy.orm.exc.MultipleResultsFound`: Multiple entities found with the filter condition\n\n* `sqlalchemy.orm.exc.NoResultFound`: The entity not found\n\n\n\n\n\n\n### `CrudViewMixin._mongoquery_hook(mongoquery) -> MongoQuery`\n(Hook) A hook invoked in _mquery() to modify MongoQuery, if necessary\n\nThis is the last chance to modify a MongoQuery.\nRight after this hook, it end()s, and generates an sqlalchemy Query.\n\nUse self._current_crud_method to tell what is going on: create, read, update, delete?\n\n\nArguments:\n\n\n* `mongoquery: MongoQuery`: \n\n\n\n\nReturns `MongoQuery`\n\n\n\n\n\n### `CrudViewMixin._save_hook(new, prev=None)`\n(Hook) Hooks into create(), update() methods, before an entity is saved.\n\nThis allows to make some changes to the instance before it's actually saved.\nThe hook is provided with both the old and the new versions of the instance (!).\n\nNote that it is executed before flush(), so DB defaults are not available yet.\n\n\nArguments:\n\n\n* `new: object`: The new instance\n\n* `prev: object = None`: Previously persisted version (is provided only when updating).\n\n\n\n\n\n\n\n\n\n### `CrudViewMixin._method_create_or_update_many(entity_dicts, *filter, **filter_by) -> Iterable[mongosql.util.bulk.EntityDictWrapper]`\n(CRUD method) Create-or-update many objects (aka upsert): create if no PK, update with PK\n\nThis smart method can be used to save (upsert: insert & update) many objects at once.\n\nIt will *load* those objects that have primary key fields set and update them with _method_update().\nIt will *create* objects that do not have primary key fields with _method_create()\nIt will *delegate* to _method_create_or_update_many__create_arbitrary_pk() that have primary key fields\nbut were not found in the database.\n\nNote that the method uses EntityDictWrapper to preserve the order of entity dicts\nand return results associated with them:\n\n* EntityDictWrapper.instance is the resulting instance to be saved\n* EntityDictWrapper.error is the exception (if any). It's not raised! Raise it if you will.\n\nNote that you may wrap entity dicts with EntityDictWrapper yourself.\nIn this case, you may:\n\n* set EntityDictWrapper.skip = True to cause the method to ignore it completely\n\n\nArguments:\n\n\n* `entity_dicts: Iterable[dict]`: \n\n* `*filter`: \n\n* `**filter_by`: \n\n\n\n\nReturns `Iterable[mongosql.util.bulk.EntityDictWrapper]`\n\n\n\n\n\n\n\n## `@saves_relations(*field_names)`\nA decorator that marks a method that handles saving some related models (or any other custom values)\n\nWhenever a relationship is marked for saving with the help of this decorator,\nit is plucked out of the incoming JSON dict, and after an entity is created,\nit is passed to the method that this decorator decorates.\n\nIn addition to saving relationships, a decorated mthod can be used to save any custom properties:\nthey're plucked out of the incoming entity dict, and handled manually anyway.\nNote that all attributes that do not exist on the model are plucked out, and the only way to handle them\nis through this method.\n\nNOTE: this method is executed before _save_hook() is.\n\nExample usage:\n\n```python\nfrom mongosql import saves_relations\nfrom mongosql import ABSENT  # unique marker used to detect values not provided\n\nclass UserView(CrudViewMixin):\n    @saves_relations('articles')\n    def save_articles(self, new: object, prev: object = None, articles = ABSENT):\n        if articles is not ABSENT:\n            ...  # articles-saving logic\n```\n\nNOTE: the handler method is called with two positional arguments, and the rest being keyword arguments:\n\n    save_articles(new_instance, prev_instance, **relations_to_be_saved)\n\nNOTE: If the user did not submit any related entity, the method is still called, with relationship argument = None.\n\nMultiple relations can be provided: in this case, all of them are handled with one method.\n\n\n\n\n\nOther Useful Tools\n==================\n\n## `ModelPropertyBags(model)`\nModel Property Bags is the class that lets you get information about the model's columns.\n\nThis is the class that binds them all together: Columns, Relationships, PKs, etc.\nAll the meta-information about a certain Model is stored here:\n\n- Columns\n- Relationships\n- Primary keys\n- Nullable columns\n- Properties and Hybrid Properties\n- Columns of related models\n- Writable properties\n\nWhenever it's too much to inspect several properties, use a `CombinedBag()` over them,\nwhich lets you get a column from a number of bags.\n\n## `CombinedBag(**bags)`\nA bag that combines elements from multiple bags.\n\nThis one is used when something can handle both columns and relationships, or properties and\ncolumns. Because this depends on what you're doing, this generalized implementation is used.\n\nIn order to initialize it, you give them the bags you need as a dict:\n\n    cbag = CombinedBag(\n        col=bags.columns,\n        rel=bags.related_columns,\n    )\n\nNow, when you get an item, you get the aliased name that you have used:\n\n    bag_name, bag, col = cbag['id']\n    bag_name  #-> 'col'\n    bag  #-> bags.columns\n    col  #-> User.id\n\nThis way, you can always tell which bag has the column come from, and handle it appropriately.\n\n## `CountingQuery(query)`\n`Query` object wrapper that can count the rows while returning results\n\nThis is achieved by SELECTing like this:\n\n    SELECT *, count(*) OVER() AS full_count\n\nIn order to be transparent, this class eliminates all those tuples in results and still returns objects\nlike a normal query would. The total count is available through a property.\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kolypto/py-mongosql", "keywords": "sqlalchemy", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "mongosql", "package_url": "https://pypi.org/project/mongosql/", "platform": "any", "project_url": "https://pypi.org/project/mongosql/", "project_urls": {"Homepage": "https://github.com/kolypto/py-mongosql"}, "release_url": "https://pypi.org/project/mongosql/2.0.11/", "requires_dist": ["sqlalchemy (!=1.2.9,>=1.2.0)", "nplus1loader"], "requires_python": ">= 3.6", "summary": "A JSON query engine with SqlAlchemy as a back-end", "version": "2.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kolypto/py-mongosql\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8caf3aa86bf0efd7da584c8667f60d20e3b1c92/68747470733a2f2f6170692e7472617669732d63692e6f72672f6b6f6c7970746f2f70792d6d6f6e676f73716c2e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\".travis.yml\" rel=\"nofollow\"><img alt=\"Pythons\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78b45142b63fda857930c9443f13e851a98117e6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e36254532253830253933332e382d626c75652e737667\"></a></p>\n<h1>MongoSQL</h1>\n<p>MongoSQL is a JSON query engine that lets you query <a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SqlAlchemy</a>\nlike a MongoDB database.</p>\n<p>The main use case is the interation with the UI:\nevery time the UI needs some <em>sorting</em>, <em>filtering</em>, <em>pagination</em>, or to load some\n<em>related objects</em>, you won't have to write a single line of repetitive code!</p>\n<p>It will let the API user send a JSON Query Object along with the REST request,\nwhich will control the way the result set is generated:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">sort</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'first_name-'</span><span class=\"p\">],</span>  <span class=\"c1\">// sort by `first_name` DESC</span>\n    <span class=\"nx\">filter</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$gte</span><span class=\"o\">:</span> <span class=\"mi\">18</span> <span class=\"p\">}</span> <span class=\"p\">},</span>  <span class=\"c1\">// filter: age &gt;= 18</span>\n    <span class=\"nx\">join</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'user_profile'</span><span class=\"p\">],</span>  <span class=\"c1\">// load related `user_profile`</span>\n    <span class=\"nx\">limit</span><span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"c1\">// limit to 10 rows</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>Tired of adding query parameters for pagination, filtering, sorting?\nHere is the ultimate solution.</p>\n<p>NOTE: currently, only tested with PostgreSQL.</p>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#querying\" rel=\"nofollow\">Querying</a>\n<ul>\n<li><a href=\"#query-object-syntax\" rel=\"nofollow\">Query Object Syntax</a></li>\n<li><a href=\"#operations\" rel=\"nofollow\">Operations</a>\n<ul>\n<li><a href=\"#project-operation\" rel=\"nofollow\">Project Operation</a></li>\n<li><a href=\"#sort-operation\" rel=\"nofollow\">Sort Operation</a></li>\n<li><a href=\"#filter-operation\" rel=\"nofollow\">Filter Operation</a></li>\n<li><a href=\"#join-operation\" rel=\"nofollow\">Join Operation</a></li>\n<li><a href=\"#filtering-join-operation\" rel=\"nofollow\">Filtering Join Operation</a></li>\n<li><a href=\"#aggregate-operation\" rel=\"nofollow\">Aggregate Operation</a></li>\n<li><a href=\"#group-operation\" rel=\"nofollow\">Group Operation</a></li>\n<li><a href=\"#slice-operation\" rel=\"nofollow\">Slice Operation</a></li>\n<li><a href=\"#count-operation\" rel=\"nofollow\">Count Operation</a></li>\n</ul>\n</li>\n<li><a href=\"#json-column-support\" rel=\"nofollow\">JSON Column Support</a></li>\n</ul>\n</li>\n<li><a href=\"#mongosql-programming-interface\" rel=\"nofollow\">MongoSQL Programming Interface</a>\n<ul>\n<li><a href=\"#mongoquery\" rel=\"nofollow\">MongoQuery</a>\n<ul>\n<li><a href=\"#creating-a-mongoquery\" rel=\"nofollow\">Creating a MongoQuery</a></li>\n<li><a href=\"#reusable\" rel=\"nofollow\">Reusable</a></li>\n<li><a href=\"#querying-mongoqueryquery\" rel=\"nofollow\">Querying: MongoQuery.query()</a></li>\n<li><a href=\"#getting-results-mongoqueryend\" rel=\"nofollow\">Getting Results: MongoQuery.end()</a></li>\n<li><a href=\"#getting-all-sorts-of-results\" rel=\"nofollow\">Getting All Sorts of Results</a></li>\n</ul>\n</li>\n<li><a href=\"#mongoquery-configuration\" rel=\"nofollow\">MongoQuery Configuration</a></li>\n<li><a href=\"#mongoquery-api\" rel=\"nofollow\">MongoQuery API</a>\n<ul>\n<li><a href=\"#mongoquerymodel-handler_settingsnone\" rel=\"nofollow\">MongoQuery(model, handler_settings=None)</a></li>\n<li><a href=\"#mongoqueryfrom_queryquery---mongoquery\" rel=\"nofollow\">MongoQuery.from_query(query) -&gt; MongoQuery</a></li>\n<li><a href=\"#mongoquerywith_sessionssn---mongoquery\" rel=\"nofollow\">MongoQuery.with_session(ssn) -&gt; MongoQuery</a></li>\n<li><a href=\"#mongoqueryqueryquery_object---mongoquery\" rel=\"nofollow\">MongoQuery.query(**query_object) -&gt; MongoQuery</a></li>\n<li><a href=\"#mongoqueryend---query\" rel=\"nofollow\">MongoQuery.end() -&gt; Query</a></li>\n<li><a href=\"#mongoqueryend_count---countingquery\" rel=\"nofollow\">MongoQuery.end_count() -&gt; CountingQuery</a></li>\n<li><a href=\"#mongoqueryresult_contains_entities---bool\" rel=\"nofollow\">MongoQuery.result_contains_entities() -&gt; bool</a></li>\n<li><a href=\"#mongoqueryresult_is_scalar---bool\" rel=\"nofollow\">MongoQuery.result_is_scalar() -&gt; bool</a></li>\n<li><a href=\"#mongoqueryresult_is_tuples---bool\" rel=\"nofollow\">MongoQuery.result_is_tuples() -&gt; bool</a></li>\n<li><a href=\"#mongoqueryget_final_query_object---dict\" rel=\"nofollow\">MongoQuery.get_final_query_object() -&gt; dict</a></li>\n<li><a href=\"#mongoqueryensure_loadedcols---mongoquery\" rel=\"nofollow\">MongoQuery.ensure_loaded(*cols) -&gt; MongoQuery</a></li>\n<li><a href=\"#mongoqueryget_projection_tree---dict\" rel=\"nofollow\">MongoQuery.get_projection_tree() -&gt; dict</a></li>\n<li><a href=\"#mongoqueryget_full_projection_tree---dict\" rel=\"nofollow\">MongoQuery.get_full_projection_tree() -&gt; dict</a></li>\n<li><a href=\"#mongoquerypluck_instanceinstance---dict\" rel=\"nofollow\">MongoQuery.pluck_instance(instance) -&gt; dict</a></li>\n<li><a href=\"#handlers\" rel=\"nofollow\">Handlers</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#crud-helpers\" rel=\"nofollow\">CRUD Helpers</a>\n<ul>\n<li><a href=\"#crudhelpermodel-handler_settings\" rel=\"nofollow\">CrudHelper(model, **handler_settings)</a></li>\n<li><a href=\"#strictcrudhelper\" rel=\"nofollow\">StrictCrudHelper</a></li>\n<li><a href=\"#crudviewmixin\" rel=\"nofollow\">CrudViewMixin()</a></li>\n<li><a href=\"#saves_relationsfield_names\" rel=\"nofollow\">@saves_relations(*field_names)</a></li>\n</ul>\n</li>\n<li><a href=\"#other-useful-tools\" rel=\"nofollow\">Other Useful Tools</a>\n<ul>\n<li><a href=\"#modelpropertybagsmodel\" rel=\"nofollow\">ModelPropertyBags(model)</a></li>\n<li><a href=\"#combinedbagbags\" rel=\"nofollow\">CombinedBag(**bags)</a></li>\n<li><a href=\"#countingqueryquery\" rel=\"nofollow\">CountingQuery(query)</a>\"</li>\n</ul>\n</li>\n</ul>\n<h1>Querying</h1>\n<p>If you know how to query documents in MongoDB, you can query your database with the same language.\nMongoSQL uses the familiar <a href=\"https://docs.mongodb.com/manual/reference/operator/query/\" rel=\"nofollow\">MongoDB Query Operators</a>\nlanguage with a few custom additions.</p>\n<p>The Query Object, in JSON format, will let you sort, filter, paginate, and do other things.\nYou would typically send this object in the URL query string, like this:</p>\n<pre><code>GET /api/user?query={\"filter\":{\"age\":{\"$gte\":18}}}\n</code></pre>\n<p>The name of the <code>query</code> argument, however, may differ from project to project.</p>\n<h2>Query Object Syntax</h2>\n<p>A Query Object is a JSON object that the API user can submit to the server to change the way the results are generated.\nIt is an object with the following properties:</p>\n<ul>\n<li><code>project</code>: <a href=\"#project-operation\" rel=\"nofollow\">Project Operation</a> selects the fields to be loaded</li>\n<li><code>sort</code>: <a href=\"#sort-operation\" rel=\"nofollow\">Sort Operation</a> determines the sorting of the results</li>\n<li><code>filter</code>: <a href=\"#filter-operation\" rel=\"nofollow\">Filter Operation</a> filters the results, using your criteria</li>\n<li><code>join</code>: <a href=\"#join-operation\" rel=\"nofollow\">Join Operation</a> loads related models</li>\n<li><code>joinf</code>: <a href=\"#filtering-join-operation\" rel=\"nofollow\">Filtering Join Operation</a> loads related models with filtering</li>\n<li><code>aggregate</code>: <a href=\"#aggregate-operation\" rel=\"nofollow\">Aggregate Operation</a> lets you calculate statistics</li>\n<li><code>group</code>: <a href=\"#group-operation\" rel=\"nofollow\">Group Operation</a> determines how to group rows while doing aggregation</li>\n<li><code>skip</code>, <code>limit</code>: <a href=\"#slice-operation\" rel=\"nofollow\">Rows slicing</a>: paginates the results</li>\n<li><code>count</code>: <a href=\"#count-operation\" rel=\"nofollow\">Counting rows</a> counts the number of rows without producing results</li>\n</ul>\n<p>An example Query Object is:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nx\">project</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">],</span>  <span class=\"err\">#</span> <span class=\"nx\">Only</span> <span class=\"nx\">fetch</span> <span class=\"nx\">these</span> <span class=\"nx\">columns</span>\n  <span class=\"nx\">sort</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'age+'</span><span class=\"p\">],</span>  <span class=\"err\">#</span> <span class=\"nx\">Sort</span> <span class=\"nx\">by</span> <span class=\"nx\">age</span><span class=\"p\">,</span> <span class=\"nx\">ascending</span>\n  <span class=\"nx\">filter</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"err\">#</span> <span class=\"nx\">Filter</span> <span class=\"nx\">condition</span>\n    <span class=\"nx\">sex</span><span class=\"o\">:</span> <span class=\"s1\">'female'</span><span class=\"p\">,</span>  <span class=\"err\">#</span> <span class=\"nx\">Girls</span>\n    <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$gte</span><span class=\"o\">:</span> <span class=\"mi\">18</span> <span class=\"p\">},</span>  <span class=\"err\">#</span> <span class=\"nx\">Age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">join</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'user_profile'</span><span class=\"p\">],</span>  <span class=\"err\">#</span> <span class=\"nx\">Load</span> <span class=\"nx\">the</span> <span class=\"s1\">'user_profile'</span> <span class=\"nx\">relationship</span>\n  <span class=\"nx\">limit</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>  <span class=\"err\">#</span> <span class=\"nx\">Display</span> <span class=\"mi\">100</span> <span class=\"nx\">per</span> <span class=\"nx\">page</span>\n  <span class=\"nx\">skip</span><span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"err\">#</span> <span class=\"nx\">Skip</span> <span class=\"nx\">first</span> <span class=\"mi\">10</span> <span class=\"nx\">rows</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Detailed syntax for every operation is provided in the relevant sections.</p>\n<p>Please keep in mind that while MongoSQL provides a query language that is rich enough for most typical tasks,\nthere would still be cases when an implementation of a custom API would be better, or even the only option available.</p>\n<p>MongoSQL was not designed to be a complete replacement for the SQL; it was designed only to keep you from doing\nrepetitive work :) So it's absolutely fine that some queries that you may have in mind won't be possible with MongoSQL.</p>\n<h2>Operations</h2>\n<h3>Project Operation</h3>\n<p>Projection corresponds to the <code>SELECT</code> part of an SQL query.</p>\n<p>In MongoDB terminology, <em>projection</em> is the process of selection a subset of fields from a document.</p>\n<p>Your models have many fields, but you do not always need them all. Oftentimes, all you need is just a small number\nof them. That's when you use this operation that <em>projects</em> some fields for you.</p>\n<p>The <code>proj\u00e9ct</code> operation lets you list the fields that you want to have in the data you get from the API endpoint.\nYou do this by either listing the fields that you need (called <em>include mode</em>), or listing the fields that you\n<em>do not</em> need (called <em>exclude mode</em>).</p>\n<p>The resulting data query on the back-end will only fetch the fields that you've requested, potentially saving a lot\nof bandwidth.</p>\n<p>An example of a projection would look like this:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"c1\">// only include the following fields</span>\n    <span class=\"nx\">project</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'first_name'</span><span class=\"p\">,</span> <span class=\"s1\">'last_name'</span><span class=\"p\">],</span>\n<span class=\"p\">}))</span>\n</pre>\n<h4>Syntax</h4>\n<p>The Project operation supports the following syntaxes:</p>\n<ul>\n<li>\n<p>Array syntax.</p>\n<p>Provide an array of field names to be included.\nAll the rest will be excluded.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span> <span class=\"nx\">project</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'login'</span><span class=\"p\">,</span> <span class=\"s1\">'first_name'</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p>String syntax</p>\n<p>Give a list of field names, separated by whitespace.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span> <span class=\"nx\">project</span><span class=\"o\">:</span> <span class=\"s1\">'login first_name'</span> <span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p>Object syntax.</p>\n<p>Provide an object of field names mapped to either a <code>1</code> (include) or a <code>0</code> (exclude).</p>\n<p>Examples:</p>\n<pre><span class=\"p\">{</span> <span class=\"nx\">project</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'a'</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"err\">#</span> <span class=\"nx\">Include</span> <span class=\"nx\">specific</span> <span class=\"nx\">fields</span><span class=\"p\">.</span> <span class=\"nx\">All</span> <span class=\"nx\">other</span> <span class=\"nx\">fields</span> <span class=\"nx\">are</span> <span class=\"nx\">excluded</span>\n<span class=\"p\">{</span> <span class=\"nx\">project</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'a'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">}</span> <span class=\"p\">}</span>  <span class=\"err\">#</span> <span class=\"nx\">Exclude</span> <span class=\"nx\">specific</span> <span class=\"nx\">fields</span><span class=\"p\">.</span> <span class=\"nx\">All</span> <span class=\"nx\">other</span> <span class=\"nx\">fields</span> <span class=\"nx\">are</span> <span class=\"nx\">included</span>\n</pre>\n<p>Note that you can't intermix the two: you either use all <code>1</code>s to specify the fields you want included,\nor use all <code>0</code>s to specify the fields you want excluded.</p>\n<p>NOTE: One special case is a so-called <em>full projection</em>: when your projection object mentions every single property\nof a model, then you're allowed to set <code>1</code>s to some, and <code>0</code>s to others in the same object. Use wisely.</p>\n</li>\n</ul>\n<h4>Fields Excluded by Default</h4>\n<p>Note that some fields that exist on the model may not be included <em>by default</em>: this is something that\nback-end developers may have configured with <code>default_exclude</code> setting on the server.</p>\n<p>You will not receive those fields unless you explicitly require them.\nThis may be appropriate for some field that contain a lot of data, or require some calculation.</p>\n<p>To include those fields, you have to request them explicitly: just use their name\nin the list of fields that you request.</p>\n<h4>Related Models</h4>\n<p>Normally, in order to load a related model (say, user's <code>user_profile</code>, or some other data related to this model),\nyou would use the <a href=\"#join-operation\" rel=\"nofollow\">Join Operation</a>.</p>\n<p>However, for convenience, you can now also load related models by just giving their name in the projection,\nas if it was a field. For example:</p>\n<pre><span class=\"p\">{</span> <span class=\"nx\">project</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nx\">user_articles</span><span class=\"o\">:</span> <span class=\"mi\">1</span>  <span class=\"c1\">// the related model will be loaded</span>\n<span class=\"p\">}}</span>\n</pre>\n<p>This request will load the related <code>user_articles</code> for you.</p>\n<p>Note that some relationships will be disabled for security reasons.</p>\n<h3>Sort Operation</h3>\n<p>Sorting corresponds to the <code>ORDER BY</code> part of an SQL query.</p>\n<p>The UI would normally require the records to be sorted by some field, or fields.</p>\n<p>The sort operation lets the API user specify the sorting of the results,\nwhich makes sense for API endpoints that return a list of items.</p>\n<p>An example of a sort operation would look like this:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"c1\">// sort by age, descending;</span>\n    <span class=\"c1\">// then sort by first name, alphabetically</span>\n    <span class=\"nx\">sort</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'age-'</span><span class=\"p\">,</span> <span class=\"s1\">'first_name+'</span><span class=\"p\">],</span>\n<span class=\"p\">}))</span>\n</pre>\n<h4>Syntax</h4>\n<ul>\n<li>\n<p>Array syntax.</p>\n<p>List of column names, optionally suffixed by the sort direction: <code>-</code> for <code>DESC</code>, <code>+</code> for <code>ASC</code>.\nThe default is <code>+</code>.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span> <span class=\"nx\">sort</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">'a+'</span><span class=\"p\">,</span> <span class=\"s1\">'b-'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span> <span class=\"p\">]</span> <span class=\"p\">}</span>  <span class=\"c1\">// -&gt; a ASC, b DESC, c DESC</span>\n</pre>\n</li>\n<li>\n<p>String syntax</p>\n<p>List of columns, with optional <code>+</code> / <code>-</code>, separated by whitespace.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span> <span class=\"nx\">sort</span><span class=\"o\">:</span> <span class=\"s1\">'a+ b- c'</span> <span class=\"p\">}</span>\n</pre>\n</li>\n</ul>\n<p>Object syntax is not supported because it does not preserve the ordering of keys.</p>\n<h3>Filter Operation</h3>\n<p>Filtering corresponds to the <code>WHERE</code> part of an SQL query.</p>\n<p>MongoSQL-powered API endpoints would typically return the list of <em>all</em> items, and leave it up to\nthe API user to filter them the way they like.</p>\n<p>Example of filtering:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"c1\">// only select grown-up females</span>\n    <span class=\"nx\">filter</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// all conditions are AND-ed together</span>\n        <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$gte</span><span class=\"o\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"nx\">$lte</span><span class=\"o\">:</span> <span class=\"mi\">25</span> <span class=\"p\">},</span>  <span class=\"c1\">// age 18..25</span>\n        <span class=\"nx\">sex</span><span class=\"o\">:</span> <span class=\"s1\">'female'</span><span class=\"p\">,</span>  <span class=\"c1\">// sex = \"female\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}))</span>\n</pre>\n<h4>Field Operators</h4>\n<p>The following <a href=\"https://docs.mongodb.com/manual/reference/operator/query/\" rel=\"nofollow\">MongoDB query operators</a>\noperators are supported:</p>\n<p>Supports the following MongoDB operators:</p>\n<ul>\n<li><code>{ a: 1 }</code> - equality check: <code>field = value</code>. This is a shortcut for the <code>$eq</code> operator.</li>\n<li><code>{ a: { $eq: 1 } }</code> - equality check: <code>field = value</code> (alias).</li>\n<li><code>{ a: { $lt: 1 } }</code>  - less than: <code>field &lt; value</code></li>\n<li><code>{ a: { $lte: 1 } }</code> - less or equal than: <code>field &lt;= value</code></li>\n<li><code>{ a: { $ne: 1 } }</code> - inequality check: <code>field != value</code>.</li>\n<li><code>{ a: { $gte: 1 } }</code> - greater or equal than: <code>field &gt;= value</code></li>\n<li><code>{ a: { $gt: 1 } }</code> - greater than: <code>field &gt; value</code></li>\n<li><code>{ a: { $prefix: 1 } }</code> - prefix: <code>field LIKE \"value%\"</code></li>\n<li><code>{ a: { $in: [...] } }</code> - any of. Field is equal to any of the given array of values.</li>\n<li><code>{ a: { $nin: [...] } }</code> - none of. Field is not equal to any of the given array of values.</li>\n<li><code>{ a: { $exists: true } }</code> - value is not <code>null</code>.</li>\n</ul>\n<p>Supports the following operators on an <code>ARRAY</code> field, for a scalar value:</p>\n<ul>\n<li><code>{ arr: 1 }</code>  - containment check: field array contains the given value: <code>ANY(array) = value</code>.</li>\n<li><code>{ arr: { $ne: 1 } }</code> - non-containment check: field array does not contain value: <code>ALL(array_col) != value</code>.</li>\n<li><code>{ arr: { $size: 0 } }</code> - Has a length of N (zero, to check for an empty array)</li>\n</ul>\n<p>Supports the following operators on an <code>ARRAY</code> field, for an array value:</p>\n<ul>\n<li><code>{ arr: [...] }</code>  - equality check: two arrays are completely equal: <code>arr = value</code>.</li>\n<li><code>{ arr: { $ne: [...] } }</code> - inequality check: two arrays are not equal: <code>arr != value</code>.</li>\n<li><code>{ arr: { $in: [...] } }</code> - intersection check. Check that the two arrays have common elements.</li>\n<li><code>{ arr: { $nin: [...] } }</code> - no intersection check. Check that the two arrays have no common elements.</li>\n<li><code>{ arr: { $all: [...] } }</code> - Contains all values from the given array</li>\n</ul>\n<h4>Boolean Operators</h4>\n<p>In addition to comparing fields to a value, the following boolean operators are supported\nthat enable you to make complex queries:</p>\n<ul>\n<li><code>{ $or: [ {..criteria..}, .. ] }</code>  - any is true</li>\n<li><code>{ $and: [ {..criteria..}, .. ] }</code> - all are true</li>\n<li><code>{ $nor: [ {..criteria..}, .. ] }</code> - none is true</li>\n<li><code>{ $not: { ..criteria.. } }</code> - negation</li>\n</ul>\n<p>Example usage:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/books?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"c1\">// either of the two options are fine</span>\n    <span class=\"nx\">$or</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"c1\">// First option: sci-fi by Gardner Dozois</span>\n        <span class=\"p\">{</span> <span class=\"nx\">genre</span><span class=\"o\">:</span> <span class=\"s1\">'sci-fi'</span><span class=\"p\">,</span> <span class=\"nx\">editor</span><span class=\"o\">:</span> <span class=\"s1\">'Gardner Dozois'</span> <span class=\"p\">},</span>\n        <span class=\"c1\">// Second option: any documentary</span>\n        <span class=\"p\">{</span> <span class=\"nx\">genre</span><span class=\"o\">:</span> <span class=\"s1\">'documentary'</span> <span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}))</span>\n</pre>\n<h4>Related columns</h4>\n<p>You can also filter the data by the <em>columns on a related model</em>.\nThis is achieved by using a dot after the relationship name:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">filter</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Fields of the 'user' model</span>\n        <span class=\"nx\">first_name</span><span class=\"o\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span>\n        <span class=\"nx\">last_name</span><span class=\"o\">:</span> <span class=\"s1\">'Doe'</span><span class=\"p\">,</span>\n        <span class=\"c1\">// Field of a related 'address' model</span>\n        <span class=\"s1\">'address.zip'</span><span class=\"o\">:</span> <span class=\"s1\">'100098'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}))</span>\n</pre>\n<h3>Join Operation</h3>\n<p>Joining corresponds to the <code>LEFT JOIN</code> part of an SQL query (although implemented as a separate query).</p>\n<p>In the back-end database, the data is often kept in a <em>normalized form</em>:\nitems of different types are kept in different places.\nThis means that whenever you need a related item, you'll have to explicitly request it.</p>\n<p>The Join operation lets you load those related items.</p>\n<p>Please keep in mind that most relationships would be disabled on the back-end because of security concerns about\nexposing sensitive data. Therefore, whenever a front-end developer needs to have a relationship loaded,\nit has to be manually enabled on the back-end! Please feel free to ask.</p>\n<p>Examples follow.</p>\n<h4>Syntax</h4>\n<ul>\n<li>\n<p>Array syntax.</p>\n<p>In its most simple form, all you need to do is just to provide the list of names of the relationships that you\nwant to have loaded:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">join</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'user_profile'</span><span class=\"p\">,</span> <span class=\"s1\">'user_posts'</span><span class=\"p\">],</span>\n<span class=\"p\">}))</span>\n</pre>\n</li>\n<li>\n<p>String syntax.</p>\n<p>List of relationships, separated by whitespace:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">join</span><span class=\"o\">:</span> <span class=\"s1\">'user_profile user_posts'</span><span class=\"p\">,</span>\n<span class=\"p\">}))</span>\n</pre>\n</li>\n<li>\n<p>Object syntax.</p>\n<p>This syntax offers you great flexibility: with a nested Query Object, it is now posible to apply operations\nto related entities: select just a few fields (projection), sort it, filter it, even limit it!</p>\n<p>The nested Query Object supports projections, sorting, filtering, even joining further relations, and\nlimiting the number of related entities that are loaded!</p>\n<p>In this object syntax, the object is an embedded Query Object. For instance:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">join</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Load related 'posts'</span>\n        <span class=\"nx\">posts</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">filter</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">rating</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$gte</span><span class=\"o\">:</span> <span class=\"mf\">4.0</span> <span class=\"p\">}</span> <span class=\"p\">},</span>  <span class=\"c1\">// Only load posts with raing &gt; 4.0</span>\n            <span class=\"nx\">sort</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'date-'</span><span class=\"p\">],</span>  <span class=\"c1\">// newest first</span>\n            <span class=\"nx\">skip</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"c1\">// first page</span>\n            <span class=\"nx\">limit</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>  <span class=\"c1\">// 100 per page</span>\n        <span class=\"p\">},</span>\n\n        <span class=\"c1\">// Load another relationship</span>\n        <span class=\"s1\">'comments'</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>  <span class=\"err\">#</span> <span class=\"nx\">No</span> <span class=\"nx\">specific</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">just</span> <span class=\"nx\">load</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>Note that <code>null</code> can be used to load a relationship without custom querying.</p>\n</li>\n</ul>\n<h3>Filtering Join Operation</h3>\n<p>The <a href=\"#join-operation\" rel=\"nofollow\">Join Operation</a> has the following behavior:\nwhen you requested the loading of a relation, and there were no items found, an empty value is returned\n(a <code>null</code>, or an empty array).</p>\n<pre><span class=\"c1\">// This one will return all users</span>\n<span class=\"c1\">// (even those that have no articles)</span>\n<span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">join</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"articles\"</span><span class=\"p\">]</span>  <span class=\"c1\">// Regular Join: `join`</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>This <code>joinf</code> Filtering Join operation does just the same thing that <code>join</code> does;\nhowever, if there were no related items, the primary one is also removed.</p>\n<pre><span class=\"c1\">// This one will return *only those users that have articles*</span>\n<span class=\"c1\">// (users with no articles will be excluded)</span>\n<span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">joinf</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"articles\"</span><span class=\"p\">]</span>  <span class=\"c1\">// Filtering Join: `joinf`</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>This feature is, quite honestly, weird, and is only available for backward-compatibility with a bug that existed\nin some early MongoSQL versions. It has proven to be useful in some cases, so the bug has been given a name and a\nplace within the MongoSQL library :)</p>\n<p>Note that <code>joinf`` does not support</code>skip<code>and</code>limit`\non nested entities because of the way it's implemented with Postgres.</p>\n<h3>Aggregate Operation</h3>\n<p>Aggregation corresponds to the <code>SELECT ...</code> part of an SQL query with aggregation functions.</p>\n<p>Sometimes the API user wouldn't need the data itself, but rather some statistics on that data: the smallest value,\nthe largest value, the average value, the sum total of all values.</p>\n<p>This is what aggregation does: lets the API user execute statistical queries on the data.\nIts features are limited, but in the spirit of MongoSQL, will save some routine work for back-end developers.</p>\n<p>Example:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"c1\">// The youngest and the oldest</span>\n    <span class=\"nx\">min_age</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$min</span><span class=\"o\">:</span> <span class=\"s1\">'age'</span> <span class=\"p\">},</span>\n    <span class=\"nx\">max_age</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$max</span><span class=\"o\">:</span> <span class=\"s1\">'age'</span> <span class=\"p\">},</span>\n\n    <span class=\"c1\">// SUM(1) for every user produces the total number of users</span>\n    <span class=\"nx\">number_of_users</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$sum</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n\n    <span class=\"c1\">// Count the number of youngsters: age &lt; 18</span>\n    <span class=\"c1\">// This is a SUM() of a boolean expression, which gives 1 for every matching row.</span>\n    <span class=\"nx\">youngster_count</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$sum</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$lt</span><span class=\"o\">:</span> <span class=\"mi\">18</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">},</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>Note that for security reasons, aggregation must be manually enabled for every field on the back-end.</p>\n<h4>Syntax</h4>\n<p>The syntax is an object that declares custom field names to be used for keeping results:</p>\n<pre><code>aggregate: { computed-field-name: &lt;expression&gt; }\n</code></pre>\n<p>The <em>expression</em> can be:</p>\n<ul>\n<li>\n<p>Column name: essentially, projecting a column into the result set so that you can have the original value</p>\n<p>Example:</p>\n<pre><span class=\"nx\">aggregate</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"s1\">'age'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This is only useful when combined with the <a href=\"#group-operation\" rel=\"nofollow\">Group Operation</a>.\nIt is disabled by default on the back-end.</p>\n</li>\n<li>\n<p>Aggregation functions:</p>\n<ul>\n<li><code>{ $min: operand }</code> - smallest value</li>\n<li><code>{ $max: operand }</code> - largest value</li>\n<li><code>{ $avg: operand }</code> - average value</li>\n<li><code>{ $sum: operand }</code> - sum of values</li>\n</ul>\n<p>The <em>operand</em> can be:</p>\n<ul>\n<li>\n<p>Column name: to apply the aggregation function to a column</p>\n<p>Example:</p>\n<pre><span class=\"nx\">aggregate</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">min_age</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$min</span><span class=\"o\">:</span> <span class=\"s1\">'age'</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p>Boolean expression: see <a href=\"#filter-operation\" rel=\"nofollow\">Filter Operation</a>.</p>\n<p>This is a very useful trick.\nBecause the result of a boolean expression is <code>1</code> when it's true, you can take a <code>$sum</code> of them,\nand count the number of rows that match that condition.</p>\n<p>Example:</p>\n<pre><span class=\"c1\">// Count the number of youngsters: age &lt; 18</span>\n<span class=\"c1\">// This is a SUM() of a boolean expression, which gives 1 for every matching row.</span>\n<span class=\"nx\">aggregate</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">youngster_count</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$sum</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$lt</span><span class=\"o\">:</span> <span class=\"mi\">18</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p>Integer value (only supported by <code>$sum</code> operator)</p>\n<p>Example:</p>\n<pre><span class=\"c1\">// Gives the total number of rows</span>\n<span class=\"nx\">aggregate</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">total</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$sum</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>  <span class=\"c1\">// one for every row. Can be 2 or 3 if you like</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>Note that aggregation often makes sense only when used together with the <a href=\"#group-operation\" rel=\"nofollow\">Group Operation</a>.</p>\n<h3>Group Operation</h3>\n<p>Grouping corresponds to the <code>GROUP BY</code> part of an SQL query.</p>\n<p>By default, the <a href=\"#aggregate-operation\" rel=\"nofollow\">Aggregate Operation</a> gives statistical results over all rows.</p>\n<p>For instance, if you've asked for <code>{ avg_age: { $avg: 'age' } }</code>, you'll get the average age of all users.</p>\n<p>Oftentimes this is not enough, and you'll want statistics calculated over groups of items.\nThis is what the Group Operation does: specifies which field to use as the \"group\" indicator.</p>\n<p>Better start with a few examples.</p>\n<h4>Example #1: calculate the number of users of every specific age.</h4>\n<p>We use the <code>age</code> field as the group discriminator, and the total number of users is therefore calculated per group.\nThe result would be: something like:</p>\n<pre><code>age 18: 25 users\nage 19: 20 users\nage 21: 35 users\n...\n</code></pre>\n<p>The code:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"c1\">// The statistics</span>\n    <span class=\"nx\">aggregate</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span>  <span class=\"c1\">// Get the unadulterated column value</span>\n        <span class=\"nx\">count</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$sum</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>  <span class=\"c1\">// The count</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// The discriminator</span>\n    <span class=\"nx\">group</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">],</span>  <span class=\"c1\">// we do not discriminate by sex this time... :)</span>\n<span class=\"p\">}))</span>\n</pre>\n<h4>Example #2: calculate teh average salary per profession</h4>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n        <span class=\"nx\">prof</span><span class=\"o\">:</span> <span class=\"s1\">'profession'</span><span class=\"p\">,</span>\n        <span class=\"nx\">salary</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'$avg'</span><span class=\"o\">:</span> <span class=\"s1\">'salary'</span> <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">group</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'profession_id'</span><span class=\"p\">],</span>\n<span class=\"p\">}))</span>\n</pre>\n<h4>Syntax</h4>\n<p>The Group Operator, as you have seen, receives an array of column names.</p>\n<ul>\n<li>\n<p>Array syntax.</p>\n<p>List of column names, optionally suffixed by the sort direction: <code>-</code> for <code>DESC</code>, <code>+</code> for <code>ASC</code>.\nThe default is <code>+</code>.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span> <span class=\"nx\">group</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">'a+'</span><span class=\"p\">,</span> <span class=\"s1\">'b-'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span> <span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"c1\">// -&gt; a ASC, b DESC, c DESC</span>\n</pre>\n</li>\n<li>\n<p>String syntax</p>\n<p>List of columns, with optional <code>+</code> / <code>-</code>, separated by whitespace.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span> <span class=\"nx\">group</span><span class=\"o\">:</span> <span class=\"s1\">'a+ b- c'</span> <span class=\"p\">}</span>\n</pre>\n</li>\n</ul>\n<h3>Slice Operation</h3>\n<p>Slicing corresponds to the <code>LIMIT .. OFFSET ..</code> part of an SQL query.</p>\n<p>The Slice operation consists of two optional parts:</p>\n<ul>\n<li><code>limit</code> would limit the number of items returned by the API</li>\n<li><code>skip</code> would shift the \"window\" a number of items</li>\n</ul>\n<p>Together, these two elements implement pagination.</p>\n<p>Example:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">limit</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"c1\">// 100 items per page</span>\n    <span class=\"nx\">skip</span><span class=\"o\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>  <span class=\"c1\">// skip 200 items, meaning, we're on the third page</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>Values: can be a number, or a <code>null</code>.</p>\n<h3>Count Operation</h3>\n<p>Slicing corresponds to the <code>SELECT COUNT(*)</code> part of an SQL query.</p>\n<p>Simply, return the number of items, without returning the items themselves. Just a number. That's it.</p>\n<p>Example:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">count</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>The <code>1</code> is the <em>on</em> switch. Replace it with <code>0</code> to stop counting.</p>\n<p>NOTE: In MongoSQL 2.0, there is a way to get both the list of items, <em>and</em> their count <em>simultaneously</em>.\nThis would have way better performance than two separate queries.\nPlease have a look: <a href=\"#countingqueryquery\" rel=\"nofollow\">CountingQuery</a> and <a href=\"#mongoqueryend_count---countingquery\" rel=\"nofollow\">MongoQuery.end_count()</a>.</p>\n<h2>JSON Column Support</h2>\n<p>A <code>JSON</code> (or <code>JSONB</code>) field is a column that contains an embedded object,\nwhich itself has fields too. You can access these fields using a dot.</p>\n<p>Given a model fields:</p>\n<pre><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">rating</span><span class=\"o\">:</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"nx\">obj</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span> <span class=\"p\">}</span>\n</pre>\n<p>You can reference JSON field's internals:</p>\n<pre><span class=\"s1\">'data.rating'</span>\n<span class=\"s1\">'data.list.0'</span>\n<span class=\"s1\">'data.obj.a'</span>\n<span class=\"s1\">'data.obj.z'</span>  <span class=\"c1\">// gives NULL when a field does not exist</span>\n</pre>\n<p>Operations that support it:</p>\n<ul>\n<li>\n<p><a href=\"#sort-operation\" rel=\"nofollow\">Sort</a> and <a href=\"#group-operation\" rel=\"nofollow\">Group</a> operations:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">sort</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'data.rating'</span><span class=\"p\">]</span>  <span class=\"c1\">// JSON field sorting</span>\n<span class=\"p\">}))</span>\n</pre>\n</li>\n<li>\n<p><a href=\"#filter-operation\" rel=\"nofollow\">Filter</a> operation:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">filter</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'data.rating'</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$gte</span><span class=\"o\">:</span> <span class=\"mf\">5.5</span> <span class=\"p\">},</span>  <span class=\"c1\">// JSON field condition</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>or this is how you test that a property is missing:</p>\n<pre><span class=\"p\">{</span> <span class=\"s1\">'data.rating'</span><span class=\"o\">:</span> <span class=\"kc\">null</span> <span class=\"p\">}</span>  <span class=\"c1\">// Test for missing property</span>\n</pre>\n<p><em>CAVEAT</em>: PostgreSQL is a bit capricious about data types, so MongoSql tries to guess it <em>using the operand you provide</em>.\nHence, when filtering with a property known to contain a <code>float</code>-typed field, please provide a <code>float</code> value!.</p>\n</li>\n<li>\n<p><a href=\"#aggregate-operation\" rel=\"nofollow\">Aggregate</a>:</p>\n<pre><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/user?query='</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n    <span class=\"nx\">aggregate</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">avg_rating</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">$avg</span><span class=\"o\">:</span> <span class=\"s1\">'data.rating'</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}))</span>\n</pre>\n</li>\n</ul>\n<h1>MongoSQL Programming Interface</h1>\n<h2>MongoQuery</h2>\n<h3>Creating a MongoQuery</h3>\n<p><code>MongoQuery</code> is the main tool that lets you execute JSON Query Objects against an SqlAlchemy-handled database.</p>\n<p>There are two ways to use it:</p>\n<ol>\n<li>\n<p>Construct <code>MongoQuery</code> manually, giving it your model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mongosql</span> <span class=\"kn\">import</span> <span class=\"n\">MongoQuery</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>  <span class=\"c1\"># Your model</span>\n\n<span class=\"n\">ssn</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a MongoQuery, using an initial Query (possibly, with some initial filtering applied)</span>\n<span class=\"n\">mq</span> <span class=\"o\">=</span> <span class=\"n\">MongoQuery</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">from_query</span><span class=\"p\">(</span><span class=\"n\">ssn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">))</span>\n</pre>\n</li>\n<li>\n<p>Use the convenience mixin for your Base:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.ext.declarative</span> <span class=\"kn\">import</span> <span class=\"n\">declarative_base</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mongosql</span> <span class=\"kn\">import</span> <span class=\"n\">MongoSqlBase</span>\n\n<span class=\"n\">Base</span> <span class=\"o\">=</span> <span class=\"n\">declarative_base</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">MongoSqlBase</span><span class=\"p\">,))</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"c1\">#...</span>\n</pre>\n<p>Using this Base, your models will have a shortcut method which returns a <code>MongoQuery</code>:</p>\n<pre><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">mongoquery</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">)</span>\n<span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">mongoquery</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</pre>\n<p>With <code>mongoquery()</code>, you can construct a query from a session:</p>\n<pre><span class=\"n\">mq</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">mongoquery</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">)</span>\n</pre>\n<p>.. or from an <a href=\"https://docs.sqlalchemy.org/en/latest/orm/query.html\" rel=\"nofollow\">sqlalchemy.orm.Query</a>,\nwhich allows you to apply some initial filtering:</p>\n<pre><span class=\"n\">mq</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">mongoquery</span><span class=\"p\">(</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Only query active users</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<h3>Reusable</h3>\n<p>A <code>MongoQuery</code> object itself is not reusable: it can make just one query.</p>\n<p>However, it makes sense to save some initialization and keep it ready for new requests.\nFor performance reasons, this has to be done manually with the <code>Reusable</code> wrapper:</p>\n<pre><span class=\"n\">mq_factory</span> <span class=\"o\">=</span> <span class=\"n\">Reusable</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">mongoquery</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">))</span>\n</pre>\n<p>The wrapped object has all the methods of a <code>MongoQuery</code>, but will make a proper copy when used.\nThink of it as a factory.</p>\n<h3>Querying: <code>MongoQuery.query()</code></h3>\n<p>Once a <code>MongoQuery</code> is prepared, you can give it a QueryObject:</p>\n<pre><span class=\"c1\"># QueryObject</span>\n<span class=\"n\">query_object</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'filter'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'sex'</span><span class=\"p\">:</span> <span class=\"s1\">'f'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'$gte'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"s1\">'$lte'</span><span class=\"p\">:</span> <span class=\"mi\">25</span> <span class=\"p\">},</span>  <span class=\"c1\"># 18..25 years</span>\n  <span class=\"p\">},</span>\n  <span class=\"s1\">'order'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'weight+'</span><span class=\"p\">],</span>  <span class=\"c1\">#  slims first</span>\n  <span class=\"s1\">'limit'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span>  <span class=\"c1\"># just enough :)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># MongoQuery</span>\n<span class=\"n\">mq</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">mongoquery</span><span class=\"p\">(</span><span class=\"n\">ssn</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">query_object</span><span class=\"p\">)</span>\n</pre>\n<h3>Getting Results: <code>MongoQuery.end()</code></h3>\n<p>Because <code>MongoQuery</code> is just a wrapper around an SqlAlchemy's <code>Query</code>, you can get that <code>Query</code>\nand get results out of it:</p>\n<pre><span class=\"c1\"># By calling the `MongoQuery.end()` method, you get an SqlAlchemy `Query`:</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">mq</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>  <span class=\"c1\"># SqlALchemy Query</span>\n\n<span class=\"c1\"># Execute the query and fetch results</span>\n<span class=\"n\">girls</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h3>Getting All Sorts of Results</h3>\n<p>Let's remember that the Query generated by MongoQuery can return three sorts of results:</p>\n<ol>\n<li>Entities. When the API user has requested an entity of a list of them.</li>\n<li>Integer. When the API user has used <code>{count: 1}</code>.</li>\n<li>Tuples. This is what you get when the API user has used the <a href=\"#aggregate-operation\" rel=\"nofollow\">Aggregate Operation</a>.</li>\n</ol>\n<p><code>MongoQuery</code> has three methods that help you detect what you get:</p>\n<ol>\n<li><code>MongoQuery.result_contains_entities()</code></li>\n<li><code>MongoQuery.result_is_scalar()</code></li>\n<li><code>MongoQuery.result_is_tuples()</code></li>\n</ol>\n<p>Here's how to use it:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_result</span><span class=\"p\">(</span><span class=\"n\">mq</span><span class=\"p\">:</span> <span class=\"n\">MongoQuery</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Query</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Handle: Query Object has count</span>\n    <span class=\"k\">if</span> <span class=\"n\">mq</span><span class=\"o\">.</span><span class=\"n\">result_is_scalar</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">()}</span>\n\n    <span class=\"c1\"># Handle: Query Object has group_by and yields tuples</span>\n    <span class=\"k\">if</span> <span class=\"n\">mq</span><span class=\"o\">.</span><span class=\"n\">result_is_tuples</span><span class=\"p\">():</span>\n        <span class=\"c1\"># zip() column names together with the values, and make it into a dict</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'results'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(),</span> <span class=\"n\">row</span><span class=\"p\">))</span>\n                        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">query</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Regular result: entities</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'users'</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>Most likely, you won't need to handle that at all: just use  <a href=\"#crud-helpers\" rel=\"nofollow\">CRUD Helpers</a>\nthat implement most of this logic for you.</p>\n<h2>MongoQuery Configuration</h2>\n<p><code>MongoQuery</code> has plenty of settings that lets you configure the way queries are made,\nto fine-tune their security limitations, and to implement some custom behaviors.</p>\n<p>These settings can be nicely kept in a <a href=\"mongosql/util/settings_dict.py\" rel=\"nofollow\">MongoQuerySettingsDict</a>\nand given to MongoQuery as the second argument.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mongosql</span> <span class=\"kn\">import</span> <span class=\"n\">MongoQuery</span><span class=\"p\">,</span> <span class=\"n\">MongoQuerySettingsDict</span>\n\n<span class=\"n\">mq</span> <span class=\"o\">=</span> <span class=\"n\">MongoQuery</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">MongoQuerySettingsDict</span><span class=\"p\">(</span>\n    <span class=\"n\">bundled_project</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"c1\"># can only join to the following relations</span>\n        <span class=\"n\">allowed_relations</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'articles'</span><span class=\"p\">,</span> <span class=\"s1\">'comments'</span><span class=\"p\">),</span>\n        <span class=\"c1\"># configure nested queries</span>\n        <span class=\"n\">related</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">manager</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"n\">force_exclude</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">,),</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">),</span>\n        <span class=\"c1\"># enable aggregation for columns</span>\n        <span class=\"n\">aggregate_columns</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,),</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">))</span>\n</pre>\n<p>The available settings are:</p>\n<ul>\n<li>\n<p><code>default_projection</code>: (for: project)\nThe default projection to use when no input was provided.\nWhen an input value is given, <code>default_projection</code> is not used at all: it overrides the default\ncompletely. If you want to merge some default into every projection, use some of the following settings:\n<code>default_exclude</code>, <code>force_include</code>, <code>force_exclude</code></p>\n<p>NOTE: If you want the API to return <em>all fields</em> by default, use <code>None</code>. If you want the API to\nreturn <em>no fields</em> by default, use an empty list <code>[]</code>.\nThis is because <code>None</code> is seen as \"no default\", and MongoSQL uses its internal default of including\nall fields; but <code>[]</code> is seen as an instruction \"to include no fields by default\".</p>\n</li>\n<li>\n<p><code>default_exclude</code>: (for: project)\nA list of attributes that are excluded from every projection.\nThe only way to load these attributes would be to request them explicitly.\nUse this for properties that contain a lot of data, or require extra queries.</p>\n</li>\n<li>\n<p><code>default_exclude_properties</code>: (for: project)\nWhen <code>True</code>, all <code>@property</code> and <code>@hybrid_property</code> attributes\nwill be excluded by default (put into <code>default_exclude</code>).\nThis is a convenivent shortcut.\nUse <code>default_include_properties</code> to overrule.</p>\n</li>\n<li>\n<p><code>default_unexclude_properties</code>: (for: project)\nThe list of <code>@property</code> and <code>@hybrid_property</code> attributes that won't be excluded:\nthey will be treated like the rest of the columns.</p>\n</li>\n<li>\n<p><code>bundled_project</code>: (for: project)\nThe dict that declares columns that depend on other columns being loaded.\nWhen you have a property that depends on some columns, and the user wants it loaded, the setting\ngot to have the name of the property mapped to the list of dependent columns.\nExample: {'full_name': ['first_name', 'last_name']}\nThe additional columns would be loaded quietly, without being included into the projection.</p>\n</li>\n<li>\n<p><code>force_include</code>: (for: project)\nA list of attributes that will always be loaded and included into the output.</p>\n</li>\n<li>\n<p><code>force_exclude</code>: (for: project)\nA list of attributes that will always be unloaded and excluded from the output.\nNo matter what you do, you can't access them.</p>\n</li>\n<li>\n<p><code>ensure_loaded</code>: (for: project)\nA list of columns that will be loaded even when the user didn't request them.\nThese columns will be loaded quietly, however, without being included into the projection.\nUse case: columns which your code requires. It would break without them, in case the user excludes them.\nYou wouldn't want to force include them, but you'd like to include them 'quietly'.</p>\n</li>\n<li>\n<p><code>raiseload_col</code>: (for: project)\nGranular <code>raiseload</code>: only raise when columns are lazy loaded</p>\n</li>\n<li>\n<p><code>raiseload_rel</code>: (for: join)\nGranular <code>raiseload</code>: only raise when relations are lazy loaded</p>\n</li>\n<li>\n<p><code>raiseload</code>: (for: project, join)\nRaise an exception when a column or a relationship that was not loaded\nis accessed by the application.\nThis would result in an additional SQL query, which is very slow.</p>\n<p>This is a performance safeguard: when the API user does not want certain columns,\nthey are not loaded. However, when the application tries to access them.\nWhen <code>raiseload_col=True</code>, you'll need to load all the columns &amp; relationships manually\n(with <code>undefer()</code> and <code>joinedload()</code>), or by using <code>MongoQuery.ensure_loaded()</code>.</p>\n</li>\n<li>\n<p><code>aggregate_columns</code>: (for: aggregate)\nList of column names for which aggregation is enabled.\nAll columns for which aggregation is not explicitly enabled are disabled.</p>\n</li>\n<li>\n<p><code>aggregate_labels</code>: (for: aggregate)\nWhether to enable labelling columns (aliases).\nThis features is mostly useless,\nbut exists here to complete compatilibility with MongoDB queries.</p>\n</li>\n<li>\n<p><code>force_filter</code>: (for: filter)\nA dictionary with a filter that will be forced onto every request;\nor a Python <code>callable(model)</code> that returns a filtering condition for Query.filter().</p>\n</li>\n<li>\n<p><code>scalar_operators</code>: (for: filter)\nA dict of additional operators for scalar columns.\nA better way to declare global operators would be to subclass MongoFilter\nand declare the additional operators inside the class.</p>\n</li>\n<li>\n<p><code>array_operators</code>: (for: filter)\nA dict of additional operators for array columns.</p>\n</li>\n<li>\n<p><code>allowed_relations</code>: (for: join)\nAn explicit list of relationships that can be loaded by the user.\nAll other relationships will raise a DisabledError when a 'join' is attempted.</p>\n</li>\n<li>\n<p><code>banned_relations</code>: (for: join)\nAn list of relationships that cannot be loaded by the user: DisabledError will be raised.</p>\n</li>\n<li>\n<p><code>max_items</code>: (for: limit)\nThe maximum number of items that can be loaded with this query.\nThe user can never go any higher than that, and this value is forced onto every query.</p>\n</li>\n<li>\n<p><code>legacy_fields</code>: (for: everything)\nThe list of fields (columns, relationships) that used to exist, but do not anymore.\nThese fields will be quietly ignored by all handlers. Note that they will still appear in projections\nfrom <code>project</code> and <code>join</code> handlers. If you rely on them, your code will have to be able to ignore\nthose fields as well.</p>\n<p>This is implemented for introducing breaking changes into the code when developers might still refer\nto the old column which is simply not there anymore.</p>\n<p>When a relationship or a column has disappeared from the model, the recommended\nbackwards-compatible approach is to have it both in <code>legacy_fields</code> and <code>force_include</code>,\nand a @property that provides some fake value for compatibility.\nThis way, clients will always get something, even though they cannot join manually anymore.</p>\n</li>\n<li>\n<p><code>aggregate_enabled</code>: Enable/disable the <code>aggregate</code> handler</p>\n</li>\n<li>\n<p><code>count_enabled</code>: Enable/disable the <code>count</code> handler</p>\n</li>\n<li>\n<p><code>filter_enabled</code>: Enable/disable the <code>filter</code> handler</p>\n</li>\n<li>\n<p><code>group_enabled</code>: Enable/disable the <code>group</code> handler</p>\n</li>\n<li>\n<p><code>join_enabled</code>: Enable/disable the <code>join</code> handler</p>\n</li>\n<li>\n<p><code>joinf_enabled</code>: Enable/disable the <code>joinf</code> handler</p>\n</li>\n<li>\n<p><code>limit_enabled</code>: Enable/disable the <code>limit</code> handler</p>\n</li>\n<li>\n<p><code>project_enabled</code>: Enable/disable the <code>project</code> handler</p>\n</li>\n<li>\n<p><code>sort_enabled</code>: Enable/disable the <code>sort</code> handler</p>\n</li>\n<li>\n<p><code>related</code>: Settings for queries on related models, based on the relationship name.</p>\n<p>For example, when a <code>User</code> has a relationship named 'articles',\nyou can put the 'articles' key into this setting, and configure\nhow queries to the related models are made.</p>\n<p>This way, you can define a completely different set of settings when a model is\nqueried through another model's relationship.</p>\n<pre><span class=\"n\">related</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"c1\"># handler_settings for nested queries may be configured per relationship</span>\n    <span class=\"n\">relation</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span>\n    <span class=\"n\">relation</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span>\n    <span class=\"n\">relation</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># will fall back to '*'</span>\n    <span class=\"c1\"># The default</span>\n    <span class=\"c1\"># If there's no default, or gives None, `related_models` will be used</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">relationship_name</span><span class=\"p\">,</span> <span class=\"n\">target_model</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">related</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>\n</pre>\n</li>\n<li>\n<p><code>related_models</code>: When configuring every relationship seems to be too much, and you just want to define\ncommon settings for every model, use this setting instead of 'related'.</p>\n<p>It will automatically configure every relationship based on the target model.</p>\n<pre><span class=\"n\">related_models</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"c1\"># handler_settings for nested queries may be configured per model</span>\n    <span class=\"c1\"># note that you're supposed to use models, not their names!</span>\n    <span class=\"n\">Model</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span>\n    <span class=\"n\">Model</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span>\n    <span class=\"n\">Model</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># will fall back to '*'</span>\n    <span class=\"c1\"># The default</span>\n    <span class=\"c1\"># If there's no default, or it yields None, the default handler_settings is used</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">relationship_name</span><span class=\"p\">,</span> <span class=\"n\">target_model</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Example:</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># disallow further joins</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">related_models</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>\n</pre>\n<p>It can also be used as a default, when there's no custom configuration provided in\nthe 'related' settings.</p>\n<p>The 'related_models' setting actually enables you to have one global dict that will\ndefine the \"default\" rules that apply to an entity, no matter how it's loaded:\ndirectly, or through a relationship of another model.</p>\n<pre><span class=\"c1\"># Collect all your settings into one global dict</span>\n<span class=\"n\">all_settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">User</span><span class=\"p\">:</span> <span class=\"n\">user_settings</span><span class=\"p\">,</span>\n    <span class=\"n\">Article</span><span class=\"p\">:</span> <span class=\"n\">article_settings</span><span class=\"p\">,</span>\n    <span class=\"n\">Comment</span><span class=\"p\">:</span> <span class=\"n\">comment_settings</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># and reference it recursively from every model:</span>\n<span class=\"n\">user_settings</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">related_models</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">all_settings</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Be careful, though: if every model inherits its <code>allowed_relations</code>,\nit would be possible to get almost any object through a series of nested joins!</p>\n</li>\n</ul>\n<p>More settings are available through the <a href=\"#crud-helpers\" rel=\"nofollow\">CRUD helper</a> settings,\nwhich is an extension of <a href=\"#mongoquery-configuration\" rel=\"nofollow\">MongoQuery Configuration</a>:</p>\n<ul>\n<li>\n<p><code>writable_properties</code>: Are <code>@property</code> model attributes writable?</p>\n<p>When <code>False</code>, and incoming JSON object will only be allowed to set/modify real\ncolumns. The only way to save a value for a <code>@property</code> would be to use the\n<code>@saves_relations</code> decorator and handle the value manually.</p>\n<p>When <code>True</code>, even <code>@property</code> and <code>@hybrid_property</code> objects will be writable.\nNote that validation, as with other fields, is up to you.\nIn order to be completely writable, it also has to be in the <code>rw_fields</code> list.</p>\n</li>\n<li>\n<p><code>ro_fields</code>: The list of read-only fields.</p>\n<p>These fields can only be modified in the code.\nWhenever any of those fields is submitted to the API endpoint, it's ignored,\nand even removed from the incoming entity dict.</p>\n</li>\n<li>\n<p><code>rw_fields</code>: The list of writable fields.</p>\n<p>When you have too many <code>ro_fields</code>, it may be easier to provide a list of\nthose that are writable; all the rest become read-only.</p>\n</li>\n<li>\n<p><code>const_fields</code>: The list of constant fields.</p>\n<p>These fields can only be set when an object is created, but never changed\nwhen it is modified.</p>\n</li>\n<li>\n<p><code>query_defaults</code>: Default values for every Query Object.</p>\n<p>This is the default Query Object that provides the defaults for every query.\nFor instance, this may be the default <code>limit: 100</code>, or a default <code>project</code> operator.</p>\n</li>\n<li>\n<p><code>**mongoquery_settings</code>: more settings for <code>MongoQuery</code> (as described above)</p>\n</li>\n</ul>\n<h2>MongoQuery API</h2>\n<h3><code>MongoQuery(model, handler_settings=None)</code></h3>\n<p>MongoQuery is a wrapper around SqlAlchemy's <code>Query</code> that can safely execute JSON Query Objects</p>\n<h3><code>MongoQuery.from_query(query) -&gt; MongoQuery</code></h3>\n<p>Specify a custom sqlalchemy query to work with.</p>\n<p>It can have, say, initial filtering already applied to it.\nIt no default query is provided, _from_query() will use the default.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>query: Query</code>: Initial sqlalchemy query to work with (e.g. with initial filters pre-applied)</li>\n</ul>\n<p>Returns <code>MongoQuery</code></p>\n<h3><code>MongoQuery.with_session(ssn) -&gt; MongoQuery</code></h3>\n<p>Query with the given sqlalchemy Session</p>\n<p>Arguments:</p>\n<ul>\n<li><code>ssn: Session</code>: The SqlAlchemy <code>Session</code> to use for querying</li>\n</ul>\n<p>Returns <code>MongoQuery</code></p>\n<h3><code>MongoQuery.query(**query_object) -&gt; MongoQuery</code></h3>\n<p>Build a MongoSql query from an object</p>\n<p>Arguments:</p>\n<ul>\n<li><code>**query_object</code>: The Query Object to execute.</li>\n</ul>\n<p>Returns <code>MongoQuery</code></p>\n<p>Exceptions:</p>\n<ul>\n<li>\n<p><code>InvalidRelationError</code>: Invalid relationship name provided in the input</p>\n</li>\n<li>\n<p><code>InvalidColumnError</code>: Invalid column name provided in the input</p>\n</li>\n<li>\n<p><code>InvalidQueryError</code>: syntax error for any of the Query Object sections</p>\n</li>\n<li>\n<p><code>InvalidQueryError</code>: unknown Query Object operations provided (extra keys)</p>\n</li>\n</ul>\n<h3><code>MongoQuery.end() -&gt; Query</code></h3>\n<p>Get the resulting sqlalchemy <code>Query</code> object</p>\n<p>Returns <code>Query</code></p>\n<h3><code>MongoQuery.end_count() -&gt; CountingQuery</code></h3>\n<p>Get the result, and also count the total number of rows.</p>\n<p>Be aware that the cost will be substantially higher than without the total number,\nbut still cheaper than two separate queries.</p>\n<p>Numbers: this gives about 50% boost to small result sets, and about 15% boost to larger result sets.</p>\n<p>See <a href=\"#countingqueryquery\" rel=\"nofollow\">CountingQuery</a> for more details.</p>\n<p>Returns <code>CountingQuery</code></p>\n<p>Example:</p>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">mongoquery</span><span class=\"p\">(</span><span class=\"n\">ssn</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">end_count</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the count</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">count</span>  <span class=\"c1\"># -&gt; 127</span>\n\n<span class=\"c1\"># Get results</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; [User, ...]</span>\n\n<span class=\"c1\"># (!) only one actual SQL query was made</span>\n</pre>\n<h3><code>MongoQuery.result_contains_entities() -&gt; bool</code></h3>\n<p>Test whether the result will contain entities.</p>\n<p>This is normally the case in the absence of 'aggregate', 'group', and 'count' queries.</p>\n<p>Returns <code>bool</code></p>\n<h3><code>MongoQuery.result_is_scalar() -&gt; bool</code></h3>\n<p>Test whether the result is a scalar value, like with count</p>\n<p>In this case, you'll fetch it like this:</p>\n<pre><code>MongoQuery(...).end().scalar()\n</code></pre>\n<p>Returns <code>bool</code></p>\n<h3><code>MongoQuery.result_is_tuples() -&gt; bool</code></h3>\n<p>Test whether the result is a list of keyed tuples, like with group_by</p>\n<p>In this case, you might fetch it like this:</p>\n<pre><code>res = MongoQuery(...).end()\nreturn [dict(zip(row.keys(), row)) for row in res], None\n</code></pre>\n<p>Returns <code>bool</code></p>\n<h3><code>MongoQuery.ensure_loaded(*cols) -&gt; MongoQuery</code></h3>\n<p>Ensure the given columns, relationships, and related columns are loaded</p>\n<p>Despite any projections and joins the user may be doing, make sure that the given <code>cols</code> are loaded.\nThis will ensure that every column is loaded, every relationship is joined, and none of those is included\ninto <code>projection</code> and <code>pluck_instance</code>.</p>\n<p>This method is to be used by the application code to handle the following situation:</p>\n<ul>\n<li>The API user has requested only fields 'a', 'b', 'c' to be loaded</li>\n<li>The application code needs field 'd' for its operation</li>\n<li>The user does not want to see no 'd' in the output.\nSolution: use ensure_loaded('d'), and then pluck_instance()</li>\n</ul>\n<p>Limitations:</p>\n<ol>\n<li>If the user has requested filtering on a relationship, you can't use ensure_loaded() on it.\nThis method will raise an InvalidQueryError().\nThis makes sense, because if your application code relies on the presence of a certain relationship,\nit certainly needs it fully loaded, and unfiltered.</li>\n<li>If the request contains no entities (e.g. 'group' or 'aggregate' handlers are used),\nthis method would throw an AssertionError</li>\n</ol>\n<p>If all you need is just to know whether something is loaded or not, use MongoQuery.<strong>contains</strong>() instead.</p>\n<p>Remember that every time you use ensure_loaded() on a relationship, you disable the possibility of filtering for it!</p>\n<p>Arguments:</p>\n<ul>\n<li><code>*cols</code>: Column names ('age'), Relation names ('articles'), or Related column names ('articles.name')</li>\n</ul>\n<p>Returns <code>MongoQuery</code></p>\n<p>Exceptions:</p>\n<ul>\n<li>\n<p><code>ValueError</code>: invalid column or relationship name given.\nIt does not throw <code>InvalidColumnError</code> because that's likely your error, not an error of the API user :)</p>\n</li>\n<li>\n<p><code>InvalidQueryError</code>: cannot merge because the relationship has a filter on it</p>\n</li>\n</ul>\n<h3><code>MongoQuery.get_final_query_object() -&gt; dict</code></h3>\n<p>Get the final Query Object dict (after all handlers have applied their defaults).</p>\n<p>This Query Object will contain the name of every single handler, including those that were not given any input.</p>\n<p>Returns <code>dict</code></p>\n<h3><code>MongoQuery.get_projection_tree() -&gt; dict</code></h3>\n<p>Get a projection-like dict that maps every included column to 1,\nand every relationship to a nested projection dict.</p>\n<p>Returns <code>dict</code>: the projection</p>\n<p>Example:</p>\n<pre><span class=\"n\">MongoQuery</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'articles'</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,))})</span><span class=\"o\">.</span><span class=\"n\">handler_join</span><span class=\"o\">.</span><span class=\"n\">projection</span>\n<span class=\"c1\">#-&gt; {'articles': {'id': 1}}</span>\n</pre>\n<p>This is mainly useful for debugging nested Query Objects.</p>\n<h3><code>MongoQuery.get_full_projection_tree() -&gt; dict</code></h3>\n<p>Get a full projection tree that mentions every column, but only those relationships that are loaded</p>\n<p>Returns <code>dict</code></p>\n<h3><code>MongoQuery.pluck_instance(instance) -&gt; dict</code></h3>\n<p>Pluck an sqlalchemy instance and make it into a dict</p>\n<p>This method should be used to prepare an object for JSON encoding.\nThis makes sure that only the properties explicitly requested by the user get included\ninto the result, and <em>not</em> the properties that your code may have loaded.</p>\n<p>Projection and Join properties are considered.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>instance: object</code>: object</li>\n</ul>\n<p>Returns <code>dict</code></p>\n<h3>Handlers</h3>\n<p>In addition to this, <code>MongoQuery</code> lets you inspect the internals of the MongoQuery.\nEvery handler is available as a property of the <code>MongoQuery</code>:</p>\n<ul>\n<li><code>MongoQuery.handler_project</code>: <a href=\"mongosql/handlers/project.py\" rel=\"nofollow\">handlers.MongoProject</a></li>\n<li><code>MongoQuery.handler_sort</code>: <a href=\"mongosql/handlers/sort.py\" rel=\"nofollow\">handlers.MongoSort</a></li>\n<li><code>MongoQuery.handler_group</code>: <a href=\"mongosql/handlers/group.py\" rel=\"nofollow\">handlers.MongoGroup</a></li>\n<li><code>MongoQuery.handler_join</code>: <a href=\"mongosql/handlers/join.py\" rel=\"nofollow\">handlers.MongoJoin</a></li>\n<li><code>MongoQuery.handler_joinf</code>: <a href=\"mongosql/handlers/joinf.py\" rel=\"nofollow\">handlers.MongoFilteringJoin</a></li>\n<li><code>MongoQuery.handler_filter</code>: <a href=\"mongosql/handlers/filter.py\" rel=\"nofollow\">handlers.MongoFilter</a></li>\n<li><code>MongoQuery.handler_aggregate</code>: <a href=\"mongosql/handlers/aggregate.py\" rel=\"nofollow\">handlers.MongoAggregate</a></li>\n<li><code>MongoQuery.handler_limit</code>: <a href=\"mongosql/handlers/limit.py\" rel=\"nofollow\">handlers.MongoLimit</a></li>\n<li><code>MongoQuery.handler_count</code>: <a href=\"mongosql/handlers/count.py\" rel=\"nofollow\">handlers.MongoCount</a></li>\n</ul>\n<p>Some of them have methods which may be useful for the application you're building,\nespecially if you need to get some information out of <code>MongoQuery</code>.</p>\n<h1>CRUD Helpers</h1>\n<p>MongoSql is designed to help with data selection for the APIs.\nTo ease the pain of implementing CRUD for all of your models,\nMongoSQL comes with a CRUD helper that exposes MongoSQL capabilities for querying to the API user.\nTogether with <a href=\"https://github.com/kolypto/py-flask-jsontools#restfulview\" rel=\"nofollow\">RestfulView</a>\nfrom <a href=\"https://github.com/kolypto/py-flask-jsontools\" rel=\"nofollow\">flask-jsontools</a>,\nCRUD controllers are extremely easy to build.</p>\n<h2><code>CrudHelper(model, writable_properties=True, **handler_settings)</code></h2>\n<p>Crud helper: an object that helps implement CRUD operations for an API endpoint:</p>\n<ul>\n<li>Create: construct SqlAlchemy instances from the submitted entity dict</li>\n<li>Read: use MongoQuery for querying</li>\n<li>Update: update SqlAlchemy instances from the submitted entity using a dict</li>\n<li>Delete: use MongoQuery for deletion</li>\n</ul>\n<p>Source: <a href=\"mongosql/crud/crudhelper.py\" rel=\"nofollow\">mongosql/crud/crudhelper.py</a></p>\n<p>This object is supposed to be initialized only once;\ndon't do it for every query, keep it at the class level!</p>\n<p>Most likely, you'll want to keep it at the class level of your view:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mongosql</span> <span class=\"kn\">import</span> <span class=\"n\">CrudHelper</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserView</span><span class=\"p\">:</span>\n    <span class=\"n\">crudhelper</span> <span class=\"o\">=</span> <span class=\"n\">CrudHelper</span><span class=\"p\">(</span>\n        <span class=\"c1\"># The model to work with</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Settings for MongoQuery</span>\n        <span class=\"o\">**</span><span class=\"n\">MongoQuerySettingsDict</span><span class=\"p\">(</span>\n            <span class=\"n\">allowed_relations</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'user_profile'</span><span class=\"p\">,),</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>Note that during \"create\" and \"update\" operations, this class lets you write values\nto column attributes, and also to @property that are writable (have a setter).\nIf this behavior (with writable properties) is undesirable,\nset <code>writable_properties=False</code></p>\n<p>The following methods are available:</p>\n<h3><code>CrudHelper.query_model(query_obj=None, from_query=None) -&gt; MongoQuery</code></h3>\n<p>Make a MongoQuery using the provided Query Object</p>\n<p>Note that you have to provide the MongoQuery yourself.\nThis is because it has to be properly configured with handler_settings.</p>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>query_obj: Union[Mapping, NoneType] = None</code>: The Query Object to use</p>\n</li>\n<li>\n<p><code>from_query: Union[sqlalchemy.orm.query.Query, NoneType] = None</code>: An optional Query to initialize MongoQuery with</p>\n</li>\n</ul>\n<p>Returns <code>MongoQuery</code></p>\n<p>Exceptions:</p>\n<ul>\n<li>\n<p><code>exc.DisabledError</code>: A feature is disabled; likely, due to a configuration issue. See handler_settings.</p>\n</li>\n<li>\n<p><code>exc.InvalidQueryError</code>: There is an error in the Query Object that the user has made</p>\n</li>\n<li>\n<p><code>exc.InvalidRelationError</code>: Invalid relationship name specified in the Query Object by the user</p>\n</li>\n<li>\n<p><code>exc.InvalidColumnError</code>: Invalid column name specified in the Query Object by the user</p>\n</li>\n</ul>\n<h3><code>CrudHelper.create_model(entity_dict) -&gt; object</code></h3>\n<p>Create an instance from entity dict.</p>\n<p>This method lets you set the value of columns and writable properties,\nbut not relations. Use @saves_relations to handle additional fields.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>entity_dict: Mapping</code>: Entity dict</li>\n</ul>\n<p>Returns <code>object</code>: Created instance</p>\n<p>Exceptions:</p>\n<ul>\n<li>\n<p><code>InvalidColumnError</code>: invalid column</p>\n</li>\n<li>\n<p><code>InvalidQueryError</code>: validation errors</p>\n</li>\n</ul>\n<h3><code>CrudHelper.update_model(entity_dict, instance) -&gt; object</code></h3>\n<p>Update an instance from an entity dict by merging the fields</p>\n<ul>\n<li>Attributes are copied over</li>\n<li>JSON dicts are shallowly merged</li>\n</ul>\n<p>Note that because properties are <em>copied over</em>,\nthis operation does not replace the entity; it merely updates the entity.</p>\n<p>In other words, this method does a <em>partial update</em>:\nonly updates the fields that were provided by the client, leaving all the rest intact.</p>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>entity_dict: Mapping</code>: Entity dict</p>\n</li>\n<li>\n<p><code>instance: object</code>: The instance to update</p>\n</li>\n</ul>\n<p>Returns <code>object</code>: New instance, updated</p>\n<p>Exceptions:</p>\n<ul>\n<li>\n<p><code>InvalidColumnError</code>: invalid column</p>\n</li>\n<li>\n<p><code>InvalidQueryError</code>: validation errors</p>\n</li>\n</ul>\n<h2><code>StrictCrudHelper</code></h2>\n<p>A Strict Crud Helper imposes defaults and limitations on the API user:</p>\n<p>Source: <a href=\"mongosql/crud/crudhelper.py\" rel=\"nofollow\">mongosql/crud/crudhelper.py</a></p>\n<ul>\n<li>Read-only fields can not be set: not with create, nor with update</li>\n<li>Constant fields can be set initially, but never be updated</li>\n<li>Defaults for Query Object provide the default values for every query, unless overridden</li>\n</ul>\n<p>The following behavior is implemented:</p>\n<ul>\n<li>By default, all fields are writable</li>\n<li>If ro_fields is provided, these fields become read-only, all other fields are writable</li>\n<li>If rw_fields is provided, ony these fields are writable, all other fields are read-only</li>\n<li>If const_fields, it is seen as a further limitation on rw_fields: those fields would be writable,\nbut only once.</li>\n</ul>\n<h3><code>StrictCrudHelper(model, writable_properties=True, ro_fields=None, rw_fields=None, const_fields=None, query_defaults=None, **handler_settings)</code></h3>\n<p>Initializes a strict CRUD helper</p>\n<p>Note: use a <code>**StrictCrudHelperSettingsDict()</code> to help you with the argument names and their docs!</p>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>model: DeclarativeMeta</code>: The model to work with</p>\n</li>\n<li>\n<p><code>writable_properties: bool = True</code>:</p>\n</li>\n<li>\n<p><code>ro_fields: Union[Iterable[str], Callable, NoneType] = None</code>: List of read-only property names, or a callable which gives the list</p>\n</li>\n<li>\n<p><code>rw_fields: Union[Iterable[str], Callable, NoneType] = None</code>: List of writable property names, or a callable which gives the list</p>\n</li>\n<li>\n<p><code>const_fields: Union[Iterable[str], Callable, NoneType] = None</code>: List of property names that are constant once set, or a callable which gives the list</p>\n</li>\n<li>\n<p><code>query_defaults: Union[Iterable[str], Callable, NoneType] = None</code>: Defaults for every Query Object: Query Object will be merged into it.</p>\n</li>\n<li>\n<p><code>**handler_settings</code>: Settings for the <code>MongoQuery</code> used to make queries</p>\n</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mongosql</span> <span class=\"kn\">import</span> <span class=\"n\">StrictCrudHelper</span><span class=\"p\">,</span> <span class=\"n\">StrictCrudHelperSettingsDict</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserView</span><span class=\"p\">:</span>\n    <span class=\"n\">crudhelper</span> <span class=\"o\">=</span> <span class=\"n\">StrictCrudHelper</span><span class=\"p\">(</span>\n        <span class=\"c1\"># The model to work with</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Settings for MongoQuery and StrictCrudHelper</span>\n        <span class=\"o\">**</span><span class=\"n\">StrictCrudHelperSettingsDict</span><span class=\"p\">(</span>\n            <span class=\"c1\"># Can never be set of modified</span>\n            <span class=\"n\">ro_fields</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,),</span>\n            <span class=\"c1\"># Can only be set once</span>\n            <span class=\"n\">const_fields</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'login'</span><span class=\"p\">,),</span>\n            <span class=\"c1\"># Relations that can be `join`ed</span>\n            <span class=\"n\">allowed_relations</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'user_profile'</span><span class=\"p\">,),</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<h2><code>CrudViewMixin()</code></h2>\n<p>A mixin class for implementations of CRUD views.</p>\n<p>This class is supposed to be re-initialized for every request.</p>\n<p>To implement a CRUD view:</p>\n<ol>\n<li>Implement some method to extract the Query Object from the request</li>\n<li>Set <code>crudhelper</code> at the class level, initialize it with the proper settings</li>\n<li>Implement the <code>_get_db_session()</code> and the <code>_get_query_object()</code> methods</li>\n<li>If necessary, implement the <code>_save_hook()</code> to customize new &amp; updated entities</li>\n<li>Override <code>_method_list()</code> and <code>_method_get()</code> to customize its output</li>\n<li>Override <code>_method_create()</code>, <code>_method_update()</code>, <code>_method_delete()</code> and implement saving to the DB</li>\n<li>Use <a href=\"#saves_relationsfield_names\" rel=\"nofollow\"><code>@saves_relations</code></a> method decorator to handle custom fields in the input dict</li>\n</ol>\n<p>For an example on how to use CrudViewMixin, see this implementation:\n<a href=\"tests/crud_view.py\" rel=\"nofollow\">tests/crud_view.py</a></p>\n<p>Attrs:\n_mongoquery (MongoQuery):\nThe MongoQuery object used to process this query.</p>\n<h3><code>CrudViewMixin._get_db_session() -&gt; Session</code></h3>\n<p>(Abstract method) Get a DB session to be used for queries made in this view</p>\n<p>Returns <code>Session</code>: sqlalchemy.orm.Session</p>\n<h3><code>CrudViewMixin._get_query_object() -&gt; Mapping</code></h3>\n<p>(Abstract method) Get the Query Object for the current query.</p>\n<p>Note that the Query Object is not only supported for get() and list() methods, but also for\ncreate(), update(), and delete(). This enables the API use to request a relationship right away.</p>\n<p>Returns <code>Mapping</code></p>\n<h3><code>CrudViewMixin._method_get(*filter, **filter_by) -&gt; object</code></h3>\n<p>(CRUD method) Fetch a single entity: as in READ, single entity</p>\n<p>Normally, used when the user has supplied a primary key:</p>\n<pre><code>GET /users/1\n</code></pre>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>*filter</code>: Additional filter() criteria</p>\n</li>\n<li>\n<p><code>**filter_by</code>: Additional filter_by() criteria</p>\n</li>\n</ul>\n<p>Returns <code>object</code></p>\n<p>Exceptions:</p>\n<ul>\n<li>\n<p><code>exc.InvalidQueryError</code>: Query Object errors made by the user</p>\n</li>\n<li>\n<p><code>sqlalchemy.orm.exc.MultipleResultsFound</code>: Multiple found</p>\n</li>\n<li>\n<p><code>sqlalchemy.orm.exc.NoResultFound</code>: Nothing found</p>\n</li>\n</ul>\n<h3><code>CrudViewMixin._method_list(*filter, **filter_by) -&gt; Iterable[object]</code></h3>\n<p>(CRUD method) Fetch a list of entities: as in READ, list of entities</p>\n<p>Normally, used when the user has supplied no primary key:</p>\n<pre><code>GET /users/\n</code></pre>\n<p>NOTE: Be careful! This methods does not always return a list of entities!\nIt can actually return:</p>\n<ol>\n<li>A scalar value: in case of a 'count' query</li>\n<li>A list of dicts: in case of an 'aggregate' or a 'group' query</li>\n<li>A list or entities: otherwise</li>\n</ol>\n<p>Please use the following MongoQuery methods to tell what's going on:\nMongoQuery.result_contains_entities(), MongoQuery.result_is_scalar(), MongoQuery.result_is_tuples()</p>\n<p>Or, else, override the following sub-methods:\n_method_list_result__entities(), _method_list_result__groups(), _method_list_result__count()</p>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>*filter</code>: Additional filter() criteria</p>\n</li>\n<li>\n<p><code>**filter_by</code>: Additional filter_by() criteria</p>\n</li>\n</ul>\n<p>Returns <code>Iterable[object]</code></p>\n<p>Exceptions:</p>\n<ul>\n<li><code>exc.InvalidQueryError</code>: Query Object errors made by the user</li>\n</ul>\n<h3><code>CrudViewMixin._method_create(entity_dict) -&gt; object</code></h3>\n<p>(CRUD method) Create a new entity: as in CREATE</p>\n<p>Normally, used when the user has supplied no primary key:</p>\n<pre><code>POST /users/\n{'name': 'Hakon'}\n</code></pre>\n<p>Arguments:</p>\n<ul>\n<li><code>entity_dict: dict</code>: Entity dict</li>\n</ul>\n<p>Returns <code>object</code>: The created instance (to be saved)</p>\n<p>Exceptions:</p>\n<ul>\n<li><code>exc.InvalidQueryError</code>: Query Object errors made by the user</li>\n</ul>\n<h3><code>CrudViewMixin._method_update(entity_dict, *filter, **filter_by) -&gt; object</code></h3>\n<p>(CRUD method) Update an existing entity by merging the fields: as in UPDATE</p>\n<p>Normally, used when the user has supplied a primary key:</p>\n<pre><code>POST /users/1\n{'id': 1, 'name': 'Hakon'}\n</code></pre>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>entity_dict: dict</code>: Entity dict</p>\n</li>\n<li>\n<p><code>*filter</code>: Criteria to find the previous entity</p>\n</li>\n<li>\n<p><code>**filter_by</code>: Criteria to find the previous entity</p>\n</li>\n</ul>\n<p>Returns <code>object</code>: The updated instance (to be saved)</p>\n<p>Exceptions:</p>\n<ul>\n<li>\n<p><code>exc.InvalidQueryError</code>: Query Object errors made by the user</p>\n</li>\n<li>\n<p><code>sqlalchemy.orm.exc.MultipleResultsFound</code>: Multiple entities found with the filter condition</p>\n</li>\n<li>\n<p><code>sqlalchemy.orm.exc.NoResultFound</code>: The entity not found</p>\n</li>\n</ul>\n<h3><code>CrudViewMixin._method_delete(*filter, **filter_by) -&gt; object</code></h3>\n<p>(CRUD method) Delete an existing entity: as in DELETE</p>\n<p>Normally, used when the user has supplied a primary key:</p>\n<pre><code>DELETE /users/1\n</code></pre>\n<p>Note that it will load the entity from the database prior to deletion.</p>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>*filter</code>: Criteria to find the previous entity</p>\n</li>\n<li>\n<p><code>**filter_by</code>: Criteria to find the previous entity</p>\n</li>\n</ul>\n<p>Returns <code>object</code>: The instance to be deleted</p>\n<p>Exceptions:</p>\n<ul>\n<li>\n<p><code>exc.InvalidQueryError</code>: Query Object errors made by the user</p>\n</li>\n<li>\n<p><code>sqlalchemy.orm.exc.MultipleResultsFound</code>: Multiple entities found with the filter condition</p>\n</li>\n<li>\n<p><code>sqlalchemy.orm.exc.NoResultFound</code>: The entity not found</p>\n</li>\n</ul>\n<h3><code>CrudViewMixin._mongoquery_hook(mongoquery) -&gt; MongoQuery</code></h3>\n<p>(Hook) A hook invoked in _mquery() to modify MongoQuery, if necessary</p>\n<p>This is the last chance to modify a MongoQuery.\nRight after this hook, it end()s, and generates an sqlalchemy Query.</p>\n<p>Use self._current_crud_method to tell what is going on: create, read, update, delete?</p>\n<p>Arguments:</p>\n<ul>\n<li><code>mongoquery: MongoQuery</code>:</li>\n</ul>\n<p>Returns <code>MongoQuery</code></p>\n<h3><code>CrudViewMixin._save_hook(new, prev=None)</code></h3>\n<p>(Hook) Hooks into create(), update() methods, before an entity is saved.</p>\n<p>This allows to make some changes to the instance before it's actually saved.\nThe hook is provided with both the old and the new versions of the instance (!).</p>\n<p>Note that it is executed before flush(), so DB defaults are not available yet.</p>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>new: object</code>: The new instance</p>\n</li>\n<li>\n<p><code>prev: object = None</code>: Previously persisted version (is provided only when updating).</p>\n</li>\n</ul>\n<h3><code>CrudViewMixin._method_create_or_update_many(entity_dicts, *filter, **filter_by) -&gt; Iterable[mongosql.util.bulk.EntityDictWrapper]</code></h3>\n<p>(CRUD method) Create-or-update many objects (aka upsert): create if no PK, update with PK</p>\n<p>This smart method can be used to save (upsert: insert &amp; update) many objects at once.</p>\n<p>It will <em>load</em> those objects that have primary key fields set and update them with _method_update().\nIt will <em>create</em> objects that do not have primary key fields with _method_create()\nIt will <em>delegate</em> to _method_create_or_update_many__create_arbitrary_pk() that have primary key fields\nbut were not found in the database.</p>\n<p>Note that the method uses EntityDictWrapper to preserve the order of entity dicts\nand return results associated with them:</p>\n<ul>\n<li>EntityDictWrapper.instance is the resulting instance to be saved</li>\n<li>EntityDictWrapper.error is the exception (if any). It's not raised! Raise it if you will.</li>\n</ul>\n<p>Note that you may wrap entity dicts with EntityDictWrapper yourself.\nIn this case, you may:</p>\n<ul>\n<li>set EntityDictWrapper.skip = True to cause the method to ignore it completely</li>\n</ul>\n<p>Arguments:</p>\n<ul>\n<li>\n<p><code>entity_dicts: Iterable[dict]</code>:</p>\n</li>\n<li>\n<p><code>*filter</code>:</p>\n</li>\n<li>\n<p><code>**filter_by</code>:</p>\n</li>\n</ul>\n<p>Returns <code>Iterable[mongosql.util.bulk.EntityDictWrapper]</code></p>\n<h2><code>@saves_relations(*field_names)</code></h2>\n<p>A decorator that marks a method that handles saving some related models (or any other custom values)</p>\n<p>Whenever a relationship is marked for saving with the help of this decorator,\nit is plucked out of the incoming JSON dict, and after an entity is created,\nit is passed to the method that this decorator decorates.</p>\n<p>In addition to saving relationships, a decorated mthod can be used to save any custom properties:\nthey're plucked out of the incoming entity dict, and handled manually anyway.\nNote that all attributes that do not exist on the model are plucked out, and the only way to handle them\nis through this method.</p>\n<p>NOTE: this method is executed before _save_hook() is.</p>\n<p>Example usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mongosql</span> <span class=\"kn\">import</span> <span class=\"n\">saves_relations</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mongosql</span> <span class=\"kn\">import</span> <span class=\"n\">ABSENT</span>  <span class=\"c1\"># unique marker used to detect values not provided</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserView</span><span class=\"p\">(</span><span class=\"n\">CrudViewMixin</span><span class=\"p\">):</span>\n    <span class=\"nd\">@saves_relations</span><span class=\"p\">(</span><span class=\"s1\">'articles'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save_articles</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">ABSENT</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">articles</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">ABSENT</span><span class=\"p\">:</span>\n            <span class=\"o\">...</span>  <span class=\"c1\"># articles-saving logic</span>\n</pre>\n<p>NOTE: the handler method is called with two positional arguments, and the rest being keyword arguments:</p>\n<pre><code>save_articles(new_instance, prev_instance, **relations_to_be_saved)\n</code></pre>\n<p>NOTE: If the user did not submit any related entity, the method is still called, with relationship argument = None.</p>\n<p>Multiple relations can be provided: in this case, all of them are handled with one method.</p>\n<h1>Other Useful Tools</h1>\n<h2><code>ModelPropertyBags(model)</code></h2>\n<p>Model Property Bags is the class that lets you get information about the model's columns.</p>\n<p>This is the class that binds them all together: Columns, Relationships, PKs, etc.\nAll the meta-information about a certain Model is stored here:</p>\n<ul>\n<li>Columns</li>\n<li>Relationships</li>\n<li>Primary keys</li>\n<li>Nullable columns</li>\n<li>Properties and Hybrid Properties</li>\n<li>Columns of related models</li>\n<li>Writable properties</li>\n</ul>\n<p>Whenever it's too much to inspect several properties, use a <code>CombinedBag()</code> over them,\nwhich lets you get a column from a number of bags.</p>\n<h2><code>CombinedBag(**bags)</code></h2>\n<p>A bag that combines elements from multiple bags.</p>\n<p>This one is used when something can handle both columns and relationships, or properties and\ncolumns. Because this depends on what you're doing, this generalized implementation is used.</p>\n<p>In order to initialize it, you give them the bags you need as a dict:</p>\n<pre><code>cbag = CombinedBag(\n    col=bags.columns,\n    rel=bags.related_columns,\n)\n</code></pre>\n<p>Now, when you get an item, you get the aliased name that you have used:</p>\n<pre><code>bag_name, bag, col = cbag['id']\nbag_name  #-&gt; 'col'\nbag  #-&gt; bags.columns\ncol  #-&gt; User.id\n</code></pre>\n<p>This way, you can always tell which bag has the column come from, and handle it appropriately.</p>\n<h2><code>CountingQuery(query)</code></h2>\n<p><code>Query</code> object wrapper that can count the rows while returning results</p>\n<p>This is achieved by SELECTing like this:</p>\n<pre><code>SELECT *, count(*) OVER() AS full_count\n</code></pre>\n<p>In order to be transparent, this class eliminates all those tuples in results and still returns objects\nlike a normal query would. The total count is available through a property.</p>\n\n          </div>"}, "last_serial": 7027647, "releases": {"1.0.0-0": [{"comment_text": "built for Linux-3.13.0-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "a85821f78b3477f166978662530397a5", "sha256": "9a43d16a996f65843185b96471649d5b8aff30f103ad2a4aebbdae738b2855de"}, "downloads": -1, "filename": "mongosql-1.0.0-0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "a85821f78b3477f166978662530397a5", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 51831, "upload_time": "2014-07-31T17:43:49", "upload_time_iso_8601": "2014-07-31T17:43:49.211128Z", "url": "https://files.pythonhosted.org/packages/17/2a/d1cfd16d83bd0ad391db1587901ef42f33d177bfe17bc8322fc89c2ece37/mongosql-1.0.0-0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "205e3075736180f9882e8d8570e857ce", "sha256": "f6046bcc26940b310bfafa765679d8a69ec16d4546e094af236a81b977ef4c06"}, "downloads": -1, "filename": "mongosql-1.0.0-0.tar.gz", "has_sig": false, "md5_digest": "205e3075736180f9882e8d8570e857ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33076, "upload_time": "2014-07-31T17:43:45", "upload_time_iso_8601": "2014-07-31T17:43:45.257567Z", "url": "https://files.pythonhosted.org/packages/92/ff/431e21362cd2e7e4fff0504c75b9fc93ed5d0ae0ca71d8dad9cbedcfb9db/mongosql-1.0.0-0.tar.gz", "yanked": false}], "1.0.1-0": [{"comment_text": "built for Linux-3.13.0-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "5cd07cf7a43345fc5702fcd5eb378f0b", "sha256": "86bfae49e08f3dce9e42dedb7bd3eb9d2ede50ada07f2306c52ff51848e55b9c"}, "downloads": -1, "filename": "mongosql-1.0.1-0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "5cd07cf7a43345fc5702fcd5eb378f0b", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 51826, "upload_time": "2014-08-08T09:40:53", "upload_time_iso_8601": "2014-08-08T09:40:53.157392Z", "url": "https://files.pythonhosted.org/packages/e9/29/6780c3a5b1291370ab443e1884bfa4355b1413824eec02238a447985e885/mongosql-1.0.1-0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "60bb4cbd805303c81fb04a6a2283aad7", "sha256": "628da10ba2066fbad816ac8fa0e50937b77d2db6f5e29a7693e9292daacefb44"}, "downloads": -1, "filename": "mongosql-1.0.1-0.tar.gz", "has_sig": false, "md5_digest": "60bb4cbd805303c81fb04a6a2283aad7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33128, "upload_time": "2014-08-08T09:40:49", "upload_time_iso_8601": "2014-08-08T09:40:49.139703Z", "url": "https://files.pythonhosted.org/packages/26/70/2bfe7e648d92482c9741e1b4d04fda8c69f58df94bb7ba268e930536fca5/mongosql-1.0.1-0.tar.gz", "yanked": false}], "1.0.1-1": [{"comment_text": "built for Linux-3.13.0-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "9bae6662c596e5613709990c4d2fb07d", "sha256": "4acd5e333503bfe0944f91cb3949ded348ef42aac43510d266e8c918c95e046d"}, "downloads": -1, "filename": "mongosql-1.0.1-1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "9bae6662c596e5613709990c4d2fb07d", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 52179, "upload_time": "2014-08-08T18:16:42", "upload_time_iso_8601": "2014-08-08T18:16:42.276876Z", "url": "https://files.pythonhosted.org/packages/9d/f5/8f03c93e8688594979f5deb871546ba911cd4f80aa2dbdd58f62c0080d5b/mongosql-1.0.1-1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "88798e1f19f10e0e3b26e4438746b7b6", "sha256": "577facf2c0111b0753d7955b72695e79a6aee2a35e6398743f998c60f4de6ed7"}, "downloads": -1, "filename": "mongosql-1.0.1-1.tar.gz", "has_sig": false, "md5_digest": "88798e1f19f10e0e3b26e4438746b7b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33266, "upload_time": "2014-08-08T18:16:38", "upload_time_iso_8601": "2014-08-08T18:16:38.385777Z", "url": "https://files.pythonhosted.org/packages/35/1b/77ebae87faa79c6d9dcf1c5a8644de5df36e0f7f9129865828764eceef19/mongosql-1.0.1-1.tar.gz", "yanked": false}], "1.0.2-0": [{"comment_text": "built for Linux-3.13.0-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "0ab527616a966a61ea550fe8122d063f", "sha256": "69981519fae3fc7627cee581ee8039fa543df7889400d4d7331dda13f9b86cd7"}, "downloads": -1, "filename": "mongosql-1.0.2-0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "0ab527616a966a61ea550fe8122d063f", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 52808, "upload_time": "2014-08-08T23:59:52", "upload_time_iso_8601": "2014-08-08T23:59:52.327103Z", "url": "https://files.pythonhosted.org/packages/1b/3f/b8d62915ce2fa8e9908a312e8f0ecc645bc3c1e096970f82a603c5fb4050/mongosql-1.0.2-0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "53f02bf38df8f6ffeb19692e3f875ca0", "sha256": "5c929ee64d4ba19452c31789a470cee8465e64de520fd993963d9f0293f5097c"}, "downloads": -1, "filename": "mongosql-1.0.2-0.tar.gz", "has_sig": false, "md5_digest": "53f02bf38df8f6ffeb19692e3f875ca0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33438, "upload_time": "2014-08-08T23:59:48", "upload_time_iso_8601": "2014-08-08T23:59:48.849285Z", "url": "https://files.pythonhosted.org/packages/73/6e/151ec7f78a4d771b43753f0a4b8cf25d3636bfe42f056d17db7273dc23a1/mongosql-1.0.2-0.tar.gz", "yanked": false}], "1.0.2-1": [{"comment_text": "built for Linux-3.13.0-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "6b00ffb0c5749f1457effcf08e1e7252", "sha256": "c6078f621c2f927463a7d59a869c633c0403c9d8ecf6da01618722915c980ce6"}, "downloads": -1, "filename": "mongosql-1.0.2-1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "6b00ffb0c5749f1457effcf08e1e7252", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 52892, "upload_time": "2014-08-09T00:33:21", "upload_time_iso_8601": "2014-08-09T00:33:21.423373Z", "url": "https://files.pythonhosted.org/packages/63/f0/9532ecd274f9f9995ea2e47c8f42c1fc8d453f314b147d38efb2ae0bb6d4/mongosql-1.0.2-1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "a424392b5a18e78dd682994c171d0231", "sha256": "1d4521e7ff7301f4fb4a20e408d840dcfdc2e74f41a3d0676942cc477be09e93"}, "downloads": -1, "filename": "mongosql-1.0.2-1.tar.gz", "has_sig": false, "md5_digest": "a424392b5a18e78dd682994c171d0231", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33467, "upload_time": "2014-08-09T00:33:17", "upload_time_iso_8601": "2014-08-09T00:33:17.504375Z", "url": "https://files.pythonhosted.org/packages/77/1f/9ed1c7ce1bca4d756a5578076cf3cc776a86f8efac4a1a54ead2b31e74cd/mongosql-1.0.2-1.tar.gz", "yanked": false}], "1.0.3-0": [{"comment_text": "built for Linux-3.13.0-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "8953cb054eec9ed530779970a2f09115", "sha256": "ebcaf01cd2e1b3514852e4d1d3ee68cd2a150222055a88d82f4edd4d229776a2"}, "downloads": -1, "filename": "mongosql-1.0.3-0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "8953cb054eec9ed530779970a2f09115", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 53245, "upload_time": "2014-08-09T01:06:20", "upload_time_iso_8601": "2014-08-09T01:06:20.265010Z", "url": "https://files.pythonhosted.org/packages/23/d8/a5f6455a90442f7b7b95b7c8084086240937d8a3919069a23407326d6dd1/mongosql-1.0.3-0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "0126e23d235e03f48c7908a660830210", "sha256": "3b8357b39c7c2ba13a96b72b352ca0d733657d022bf76f5a73ffeea4c59048c3"}, "downloads": -1, "filename": "mongosql-1.0.3-0.tar.gz", "has_sig": false, "md5_digest": "0126e23d235e03f48c7908a660830210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33715, "upload_time": "2014-08-09T01:06:16", "upload_time_iso_8601": "2014-08-09T01:06:16.803566Z", "url": "https://files.pythonhosted.org/packages/a8/81/0936d3021d2f11cafd94d458dbd1ee7fe6af8d38700a5998fb9f23bc8032/mongosql-1.0.3-0.tar.gz", "yanked": false}], "1.1.0-0": [{"comment_text": "built for Linux-3.13.0-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "1ae4b5ef59aa1d4fb559bd58b9126dc0", "sha256": "53a63c503db30983d859b02617635e1ab66b387627d3a62f2f094d3b2902d3d3"}, "downloads": -1, "filename": "mongosql-1.1.0-0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "1ae4b5ef59aa1d4fb559bd58b9126dc0", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 52967, "upload_time": "2014-08-09T17:45:29", "upload_time_iso_8601": "2014-08-09T17:45:29.946964Z", "url": "https://files.pythonhosted.org/packages/d6/ba/14932925a10db727122fda59f0ef784f5589d9ef258c8d183d1e5ca1e50e/mongosql-1.1.0-0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "625b4ea548611c3676a63af5b901c745", "sha256": "ab1d1857fb28617d52c5dc7054a7219a7149b85d85c9648bcfd172c6374f5445"}, "downloads": -1, "filename": "mongosql-1.1.0-0.tar.gz", "has_sig": false, "md5_digest": "625b4ea548611c3676a63af5b901c745", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33588, "upload_time": "2014-08-09T17:45:26", "upload_time_iso_8601": "2014-08-09T17:45:26.475061Z", "url": "https://files.pythonhosted.org/packages/d2/f6/9eaa93741e25641e1ff370242ad49d6a62f48690196203c14fc8ac0d6b7c/mongosql-1.1.0-0.tar.gz", "yanked": false}], "1.1.0-1": [{"comment_text": "built for Linux-3.13.0-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "c81930e1b09f32845d7896eea77b7c65", "sha256": "85c4adef782b7cc29b387c379fecbd6be491c028359b442a4c8c0edf7b491f36"}, "downloads": -1, "filename": "mongosql-1.1.0-1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "c81930e1b09f32845d7896eea77b7c65", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 52937, "upload_time": "2014-08-09T18:05:09", "upload_time_iso_8601": "2014-08-09T18:05:09.411317Z", "url": "https://files.pythonhosted.org/packages/03/62/916d0e10857f67214e6d667105e037ea722d9172becbc0761993a14a42f3/mongosql-1.1.0-1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "41e2bca4ee93ee26c38dc63afedd6d47", "sha256": "b4b22b806acc730f2088ed58e8820719313617b8f7d47aa5c82c95cac34b4968"}, "downloads": -1, "filename": "mongosql-1.1.0-1.tar.gz", "has_sig": false, "md5_digest": "41e2bca4ee93ee26c38dc63afedd6d47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33566, "upload_time": "2014-08-09T18:05:05", "upload_time_iso_8601": "2014-08-09T18:05:05.836872Z", "url": "https://files.pythonhosted.org/packages/4e/ed/63c6952db9b97c66fd7acc43709b2af1d6c4ac7002dcb03f95f3031492b2/mongosql-1.1.0-1.tar.gz", "yanked": false}], "1.1.0-2": [{"comment_text": "", "digests": {"md5": "42f9adf9ae4bde3c0dc8d0940c2d8918", "sha256": "183c04a9a9fd2c017e2502e6c4d924e7791c4c45ee72ed30143093fce0de751f"}, "downloads": -1, "filename": "mongosql-1.1.0_2-py2-none-any.whl", "has_sig": false, "md5_digest": "42f9adf9ae4bde3c0dc8d0940c2d8918", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 37352, "upload_time": "2014-08-14T15:43:49", "upload_time_iso_8601": "2014-08-14T15:43:49.250271Z", "url": "https://files.pythonhosted.org/packages/f5/f7/0782b9e982c12f2c780e3bde892b66b2f6a495aaa2ef6d41dc3082b2772a/mongosql-1.1.0_2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "601c9bd05bfaa9b3bbb5589f0a42136c", "sha256": "a6a1de17bc1c027d70b62a43171589f981e3faf740b721610156dfcc6caaa88f"}, "downloads": -1, "filename": "mongosql-1.1.0-2.tar.gz", "has_sig": false, "md5_digest": "601c9bd05bfaa9b3bbb5589f0a42136c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33588, "upload_time": "2014-08-14T15:43:42", "upload_time_iso_8601": "2014-08-14T15:43:42.297862Z", "url": "https://files.pythonhosted.org/packages/07/87/e4c46c2a25457db0aa47f1836569eab250d8c7ecbfd3848adcf419767281/mongosql-1.1.0-2.tar.gz", "yanked": false}], "1.1.1-0": [{"comment_text": "", "digests": {"md5": "db9edd11f265ae51eae4411d8766a3f7", "sha256": "1861f6aadf2d4a08b760af47a0cf469739ab75c706faa2479d146e7e32f17f40"}, "downloads": -1, "filename": "mongosql-1.1.1_0-py2-none-any.whl", "has_sig": false, "md5_digest": "db9edd11f265ae51eae4411d8766a3f7", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 37578, "upload_time": "2014-08-17T19:15:39", "upload_time_iso_8601": "2014-08-17T19:15:39.885262Z", "url": "https://files.pythonhosted.org/packages/dd/6f/7e8b131f8f8ffa224d9115733069419530be20dda5bb41fa4f8515220e68/mongosql-1.1.1_0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "182faa1fd3a7235a27db6c22ad46c488", "sha256": "6790662d00c4388cd680ccbe1fb61acdfa3e08daa75797e98af4755bf2c4f422"}, "downloads": -1, "filename": "mongosql-1.1.1-0.tar.gz", "has_sig": false, "md5_digest": "182faa1fd3a7235a27db6c22ad46c488", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34044, "upload_time": "2014-08-17T19:15:36", "upload_time_iso_8601": "2014-08-17T19:15:36.233430Z", "url": "https://files.pythonhosted.org/packages/7d/ab/274564199f13d84976625ae426237c2feb935ba4f493d246d5892077f58d/mongosql-1.1.1-0.tar.gz", "yanked": false}], "1.1.1-1": [{"comment_text": "", "digests": {"md5": "1809554992169ef3e5f087233e0b94b9", "sha256": "6005a89eb50653edfe227ff7ac808f7d0b1268ae15b9c2bb71333e4af368000f"}, "downloads": -1, "filename": "mongosql-1.1.1_1-py2-none-any.whl", "has_sig": false, "md5_digest": "1809554992169ef3e5f087233e0b94b9", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 37627, "upload_time": "2014-09-09T11:44:04", "upload_time_iso_8601": "2014-09-09T11:44:04.866730Z", "url": "https://files.pythonhosted.org/packages/f8/69/8a92c3b203491a4aa85cb18e33b54ed1cfafbce1b1b42a79e7a19d531d19/mongosql-1.1.1_1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d3e0d5fffde77cea97e641c015ae05f", "sha256": "deaa4fb043abbf0a866d2d4d1b2e812435160fd5eb76edbe17919b96a1f1669d"}, "downloads": -1, "filename": "mongosql-1.1.1-1.tar.gz", "has_sig": false, "md5_digest": "5d3e0d5fffde77cea97e641c015ae05f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34089, "upload_time": "2014-09-09T11:44:00", "upload_time_iso_8601": "2014-09-09T11:44:00.334503Z", "url": "https://files.pythonhosted.org/packages/fc/cc/09d3e240f05e9854cf3cdcc30df3230ae9ed455366b57033dbd57ff8a9da/mongosql-1.1.1-1.tar.gz", "yanked": false}], "1.2.0-0": [{"comment_text": "", "digests": {"md5": "9e5d11b75277957cc1f0b1e5d26a912e", "sha256": "2f3549e8cb44c844cc5718cc7194514576c35ca57bf579fa28fb322c0d82b8f5"}, "downloads": -1, "filename": "mongosql-1.2.0_0-py2-none-any.whl", "has_sig": false, "md5_digest": "9e5d11b75277957cc1f0b1e5d26a912e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 37599, "upload_time": "2014-09-10T18:16:16", "upload_time_iso_8601": "2014-09-10T18:16:16.344218Z", "url": "https://files.pythonhosted.org/packages/3a/31/791f4db528b7e953ef84771bead5d61a89ca2d18904e653afee068b8a83b/mongosql-1.2.0_0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b517ded5b6a195e31f285ef9c2e5598", "sha256": "58ea5087ef3f43da430d83293654d50b2049e3df36118844ed8d1254eafc0df1"}, "downloads": -1, "filename": "mongosql-1.2.0-0.tar.gz", "has_sig": false, "md5_digest": "7b517ded5b6a195e31f285ef9c2e5598", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33841, "upload_time": "2014-09-10T18:16:13", "upload_time_iso_8601": "2014-09-10T18:16:13.173896Z", "url": "https://files.pythonhosted.org/packages/f3/3d/e2e555a4c74ad2e3180e70b5801ed4c7ef0fb59a1d902eeb06842bb865bf/mongosql-1.2.0-0.tar.gz", "yanked": false}], "1.2.1-0": [{"comment_text": "", "digests": {"md5": "960b9e121dc82898cfcf91b86c8510ee", "sha256": "93eecf73262b1af4572af29b634a29b3394947e356354b9602b6814b8b77f9fc"}, "downloads": -1, "filename": "mongosql-1.2.1_0-py2-none-any.whl", "has_sig": false, "md5_digest": "960b9e121dc82898cfcf91b86c8510ee", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 28857, "upload_time": "2014-10-07T23:10:40", "upload_time_iso_8601": "2014-10-07T23:10:40.262018Z", "url": "https://files.pythonhosted.org/packages/be/71/d3d8b0ea1df01d5f0b637e2cd0f840d6b6b8171d100259bf061dd1820da6/mongosql-1.2.1_0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "363bd9df388361a18ce05e281892d494", "sha256": "400c8bce2cf834c6b4415e4866a4055db3f1388f891020fb4b7d0e24787e060c"}, "downloads": -1, "filename": "mongosql-1.2.1-0.tar.gz", "has_sig": false, "md5_digest": "363bd9df388361a18ce05e281892d494", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26541, "upload_time": "2014-10-07T23:10:38", "upload_time_iso_8601": "2014-10-07T23:10:38.009381Z", "url": "https://files.pythonhosted.org/packages/36/b0/86c8fcc88a4e4d4a3f5598e883565d5ae38534fcb155e8aaf93e1fcd34b1/mongosql-1.2.1-0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "f7659df161d413d2cc3224e7e243f773", "sha256": "c41a31bf03ebf2786f6e22d688f73544d6036939240236f01ebedfe26d8bcf5c"}, "downloads": -1, "filename": "mongosql-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f7659df161d413d2cc3224e7e243f773", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 123839, "upload_time": "2019-06-18T22:17:48", "upload_time_iso_8601": "2019-06-18T22:17:48.346311Z", "url": "https://files.pythonhosted.org/packages/1c/11/325ce61b0cdbff42fbcb354e9ef46e49e6b6a16cf1ce508f0aec6ac54ce8/mongosql-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9175c80140be8f4860d24c10b66c6b89", "sha256": "fc132f49f16e8f3bb991ea2193360b2f39fea263c9556ad4cdb4863c090455d2"}, "downloads": -1, "filename": "mongosql-2.0.0.tar.gz", "has_sig": false, "md5_digest": "9175c80140be8f4860d24c10b66c6b89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 139141, "upload_time": "2019-06-18T22:17:51", "upload_time_iso_8601": "2019-06-18T22:17:51.628381Z", "url": "https://files.pythonhosted.org/packages/a5/54/1f0fe59f74aaf50751f56e11624cab01389dac3b1fb3e656ac4d1c153640/mongosql-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "fc7b0601a34f690d080e0d0e1fd642c0", "sha256": "fdc5a6cf0ca5afd1854ab8d65b9c35bc82750c0613d4fe290448c7c84f4f2670"}, "downloads": -1, "filename": "mongosql-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc7b0601a34f690d080e0d0e1fd642c0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 124326, "upload_time": "2019-06-28T23:44:42", "upload_time_iso_8601": "2019-06-28T23:44:42.307434Z", "url": "https://files.pythonhosted.org/packages/a4/c2/dc361f2c5d1edb87596d816b5b08e8fafe80d38c68d7f6759ef931314cd7/mongosql-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "113322223b0cdde44406d603b44ab7f3", "sha256": "a937a597bd60b8937ed19a5afe2024d4cb3ad9d8b2c963cee1682925ed1f91dd"}, "downloads": -1, "filename": "mongosql-2.0.1.tar.gz", "has_sig": false, "md5_digest": "113322223b0cdde44406d603b44ab7f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 139596, "upload_time": "2019-06-28T23:44:45", "upload_time_iso_8601": "2019-06-28T23:44:45.297956Z", "url": "https://files.pythonhosted.org/packages/2f/52/366ee12fb4426e4b5104628a3ca90b6742c81272e9c425cc9ff31d7f11b0/mongosql-2.0.1.tar.gz", "yanked": false}], "2.0.10": [{"comment_text": "", "digests": {"md5": "9b663f0fddf235c48d647cae5bfa33d1", "sha256": "48445f4b372d46828ea9aaa236c97dfb4c8c25cbd4ad60d1bf221f14099239d0"}, "downloads": -1, "filename": "mongosql-2.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b663f0fddf235c48d647cae5bfa33d1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.6", "size": 141163, "upload_time": "2020-01-29T20:45:46", "upload_time_iso_8601": "2020-01-29T20:45:46.549094Z", "url": "https://files.pythonhosted.org/packages/91/a0/8aa74e09719d7b36d2d5d77afbd4c3b9ab58ce0d65218899dc1313dde96c/mongosql-2.0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad902dad836c93805a5cfd46784b316c", "sha256": "45acdc183eaf811165445000de27716f976131587c15958fa4f1b4c7a157378a"}, "downloads": -1, "filename": "mongosql-2.0.10.tar.gz", "has_sig": false, "md5_digest": "ad902dad836c93805a5cfd46784b316c", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 160996, "upload_time": "2020-01-29T20:45:49", "upload_time_iso_8601": "2020-01-29T20:45:49.736206Z", "url": "https://files.pythonhosted.org/packages/d6/ea/48786d7b50edfae4c8a8d12acf2c77ea8baef5c35522e1e6535d9ea36d9d/mongosql-2.0.10.tar.gz", "yanked": false}], "2.0.10.post1": [{"comment_text": "", "digests": {"md5": "ff48fefceaa15f344370f303e62f22f4", "sha256": "247bbff54f2b2978c4e20b805c47b013bdd4151ba71c86f8621c166f99895c73"}, "downloads": -1, "filename": "mongosql-2.0.10.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff48fefceaa15f344370f303e62f22f4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.6", "size": 141341, "upload_time": "2020-02-05T22:01:52", "upload_time_iso_8601": "2020-02-05T22:01:52.649431Z", "url": "https://files.pythonhosted.org/packages/a0/53/1c4b210c39a25a8178febf5c5e1f7da38a9c7d4b59d6907af7ca91f9d8a1/mongosql-2.0.10.post1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fec5c6e647436fe15665b33cd6bdc974", "sha256": "ddea0577a6ac01a6a0c02f691b0d562cbdf64a65a2dc2b31de21b00f5c62c1bc"}, "downloads": -1, "filename": "mongosql-2.0.10.post1.tar.gz", "has_sig": false, "md5_digest": "fec5c6e647436fe15665b33cd6bdc974", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 161312, "upload_time": "2020-02-05T22:01:56", "upload_time_iso_8601": "2020-02-05T22:01:56.129637Z", "url": "https://files.pythonhosted.org/packages/3b/fe/2d79ae7688511b0b2ca17583b9a01c7a419b57165ccd8983060d07d2de6a/mongosql-2.0.10.post1.tar.gz", "yanked": false}], "2.0.11": [{"comment_text": "", "digests": {"md5": "e5a9fe2817f6b8b33d95a6c71055b251", "sha256": "28ef32a462e65eae703159b7d4548f5d4b9972547e7b34cfb3d6ca70e03203c3"}, "downloads": -1, "filename": "mongosql-2.0.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e5a9fe2817f6b8b33d95a6c71055b251", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.6", "size": 140049, "upload_time": "2020-04-15T21:36:02", "upload_time_iso_8601": "2020-04-15T21:36:02.051984Z", "url": "https://files.pythonhosted.org/packages/c2/58/a85331a4a05ff3f33ead77d4fec3ad5c919c84d524c739ed823b24f90fe3/mongosql-2.0.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "745eae8ea684119f628ef7cc806ad9a9", "sha256": "3bf516395ae99efd0294fe7dc82a493045b01d426b19b4fb01e4d0402ef1d919"}, "downloads": -1, "filename": "mongosql-2.0.11.tar.gz", "has_sig": false, "md5_digest": "745eae8ea684119f628ef7cc806ad9a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 160429, "upload_time": "2020-04-15T21:36:05", "upload_time_iso_8601": "2020-04-15T21:36:05.310483Z", "url": "https://files.pythonhosted.org/packages/f8/26/25b6d1961a3630b1f99e5a87755ffa0e20c9ef8bb4333536cbd08cb6b21a/mongosql-2.0.11.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "f6ecc741ab670bae14f51945c5194e51", "sha256": "cd4b95717fd2da11e01e22ce8131cf256fd6a1a0895d7f085e59f01f9644af60"}, "downloads": -1, "filename": "mongosql-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6ecc741ab670bae14f51945c5194e51", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 125337, "upload_time": "2019-06-29T01:45:07", "upload_time_iso_8601": "2019-06-29T01:45:07.030906Z", "url": "https://files.pythonhosted.org/packages/a2/89/c617beac5e9c44ddf1bb19ca0c206fc67ff52d80567cd001cd9b7d02f2f5/mongosql-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9bee42fb3f5e8714527e76e8e733641", "sha256": "9b6ff2809fe30619745bd55c5308c7e42f64b174eeb1eb83795fc9f9ed30f5c2"}, "downloads": -1, "filename": "mongosql-2.0.2.tar.gz", "has_sig": false, "md5_digest": "e9bee42fb3f5e8714527e76e8e733641", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140806, "upload_time": "2019-06-29T01:45:10", "upload_time_iso_8601": "2019-06-29T01:45:10.426776Z", "url": "https://files.pythonhosted.org/packages/ce/f1/955c89f599c3fd067557736d7985a2768a1cb3f55b17b6eb75cc4d8f31f2/mongosql-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "55c4b1a247b195782da8268160e0e295", "sha256": "4dd171a34b6595d7dd4026c65c91524d9b6102e39e5d42c2d7f704f2d9df66df"}, "downloads": -1, "filename": "mongosql-2.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "55c4b1a247b195782da8268160e0e295", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 127384, "upload_time": "2019-07-08T07:30:17", "upload_time_iso_8601": "2019-07-08T07:30:17.423179Z", "url": "https://files.pythonhosted.org/packages/36/80/2b66bfdfee31bc6d8af5a6887cdbbb618f13f1055f3aca5eea05df9efd22/mongosql-2.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45cc63893a3c78a690a58a27fcc04d66", "sha256": "4dcb2a2f0e9a819038c025b060978aafb482891bce33640ee4eff73c772740c0"}, "downloads": -1, "filename": "mongosql-2.0.3.tar.gz", "has_sig": false, "md5_digest": "45cc63893a3c78a690a58a27fcc04d66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 143891, "upload_time": "2019-07-08T07:30:22", "upload_time_iso_8601": "2019-07-08T07:30:22.526553Z", "url": "https://files.pythonhosted.org/packages/6a/3f/386cb2c6d95647d229ad2ebd5dfb1a6f89c1a52acf26f288c3bbbe5b3d17/mongosql-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "3dc9edd6ca8ec137a49ac327471300c4", "sha256": "611bdd2a5e90b2e3c9185ea99871a80c6c47f179283d28659cf9ea78a131349c"}, "downloads": -1, "filename": "mongosql-2.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3dc9edd6ca8ec137a49ac327471300c4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 129674, "upload_time": "2019-07-26T11:59:25", "upload_time_iso_8601": "2019-07-26T11:59:25.681612Z", "url": "https://files.pythonhosted.org/packages/07/b1/74f4a3b664f8d89267128016990d648d3e5d8e5018d6a90362a3df5309ad/mongosql-2.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aea13fc8270b7ec6f6aa92decb75500b", "sha256": "7968c874892570f9f9d753be63f02e97dd89845a3e67db21f75ca2640a28fb24"}, "downloads": -1, "filename": "mongosql-2.0.4.tar.gz", "has_sig": false, "md5_digest": "aea13fc8270b7ec6f6aa92decb75500b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146841, "upload_time": "2019-07-26T11:59:28", "upload_time_iso_8601": "2019-07-26T11:59:28.815044Z", "url": "https://files.pythonhosted.org/packages/54/51/a931f9e601d6f0d6f6a21fe6df2ca7fd2b00d737bdd7d64f3b546c7a20d3/mongosql-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "bc2565f91c636a319187de48155892d4", "sha256": "9e40ac3282205fbfa8ad672d92383e2bdf052de63cbdf3d4bf50591825541840"}, "downloads": -1, "filename": "mongosql-2.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc2565f91c636a319187de48155892d4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 133271, "upload_time": "2019-08-27T15:39:14", "upload_time_iso_8601": "2019-08-27T15:39:14.239024Z", "url": "https://files.pythonhosted.org/packages/fb/c0/67151e0010c9e45a72a7da7c8764b99d2a63d76d420e93255efa382d2903/mongosql-2.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6643ea1fdfcd232cd652d497616f7cdd", "sha256": "57505dca1857e9b4ef02da80bd23042997e3a7934efcdfccb976558a6075c9fe"}, "downloads": -1, "filename": "mongosql-2.0.5.tar.gz", "has_sig": false, "md5_digest": "6643ea1fdfcd232cd652d497616f7cdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 149994, "upload_time": "2019-08-27T15:39:19", "upload_time_iso_8601": "2019-08-27T15:39:19.230230Z", "url": "https://files.pythonhosted.org/packages/ea/0d/14c77e5862476fb8221f191d39b59292468c618f09d74050705502f2faf7/mongosql-2.0.5.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "8dd53784b818276cc2bb98e758a9980c", "sha256": "74fc58be4519451525adc2defcdf499370748f5b04167ed1bb8757df14d59244"}, "downloads": -1, "filename": "mongosql-2.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8dd53784b818276cc2bb98e758a9980c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 133747, "upload_time": "2019-09-16T22:40:57", "upload_time_iso_8601": "2019-09-16T22:40:57.082625Z", "url": "https://files.pythonhosted.org/packages/a9/a4/84deaee532ee91d720452a14ee27ab0dbe99d452eab50aab1fc9d735933f/mongosql-2.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef56e059c9551b757c9027ccac1e2ce4", "sha256": "6a88135c9080cc77ef0f5663c0e7a1ad7a352d8eb1765cc05bf923c4caaab848"}, "downloads": -1, "filename": "mongosql-2.0.6.tar.gz", "has_sig": false, "md5_digest": "ef56e059c9551b757c9027ccac1e2ce4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150559, "upload_time": "2019-09-16T22:41:00", "upload_time_iso_8601": "2019-09-16T22:41:00.256141Z", "url": "https://files.pythonhosted.org/packages/9a/2d/4340838219b69c914f74b067b4956d5868ee65b0daeff131f7ce035ff820/mongosql-2.0.6.tar.gz", "yanked": false}], "2.0.6.post2": [{"comment_text": "", "digests": {"md5": "30e011e743704cc659ffe7a711a53d35", "sha256": "058fd4205ca04221ef0b4538f162a8fa74c4c50ce44d564f01251b4e36ecba5a"}, "downloads": -1, "filename": "mongosql-2.0.6.post2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "30e011e743704cc659ffe7a711a53d35", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 134144, "upload_time": "2019-09-18T21:10:06", "upload_time_iso_8601": "2019-09-18T21:10:06.659951Z", "url": "https://files.pythonhosted.org/packages/9b/2c/c3b68016bb9407b9a9396ed4aeb0f52a0e8ec314f99c25c9d349baeb8289/mongosql-2.0.6.post2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edd1e346068eb2a02d8a90b09f7c174b", "sha256": "682fe6e07aa044c07e32f6fc11ea166313a4311f7f5f4c6d70142829aaa29d62"}, "downloads": -1, "filename": "mongosql-2.0.6.post2.tar.gz", "has_sig": false, "md5_digest": "edd1e346068eb2a02d8a90b09f7c174b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150928, "upload_time": "2019-09-18T21:10:10", "upload_time_iso_8601": "2019-09-18T21:10:10.264006Z", "url": "https://files.pythonhosted.org/packages/cb/6b/0a1685c1e7349295986f0b3f19d61314b1f199ac69e0a97edfcd3117184b/mongosql-2.0.6.post2.tar.gz", "yanked": false}], "2.0.6.post3": [{"comment_text": "", "digests": {"md5": "ff2ca5aff1d43090c09919d0ad9fe059", "sha256": "4d6dfa5598fb03f25a6d818198fb4318c886668a78e546948791dc7da0b15069"}, "downloads": -1, "filename": "mongosql-2.0.6.post3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff2ca5aff1d43090c09919d0ad9fe059", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 134119, "upload_time": "2019-09-19T13:37:52", "upload_time_iso_8601": "2019-09-19T13:37:52.242269Z", "url": "https://files.pythonhosted.org/packages/2b/e5/bcc413ee8bf2d6a79e308be770f429d8ec2b3c0ca135f0e9a8a6a4b595e3/mongosql-2.0.6.post3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2199a5dd15bc08468afa19ed78938c53", "sha256": "f28c8d7caf1a67f941e554cade18570b1cb57a75ca3503ca40c85a67c44b3d35"}, "downloads": -1, "filename": "mongosql-2.0.6.post3.tar.gz", "has_sig": false, "md5_digest": "2199a5dd15bc08468afa19ed78938c53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150923, "upload_time": "2019-09-19T13:37:55", "upload_time_iso_8601": "2019-09-19T13:37:55.399517Z", "url": "https://files.pythonhosted.org/packages/90/30/48bcb9880892b21f98af6ef9df1ca56a5c5b01f305695df34a560fba4057/mongosql-2.0.6.post3.tar.gz", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "c88d38a195c40fc3bdd490ba92e9abb6", "sha256": "82ddbd83561d1e465c4fbcc8cd5284bd76073e4f59de1f11d9508257a9568b30"}, "downloads": -1, "filename": "mongosql-2.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c88d38a195c40fc3bdd490ba92e9abb6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 135284, "upload_time": "2019-10-07T17:01:58", "upload_time_iso_8601": "2019-10-07T17:01:58.702781Z", "url": "https://files.pythonhosted.org/packages/c3/4f/836e77cca2d728892b5b0d5e055e54f24f0c4b03f455f7b359d8de6c863f/mongosql-2.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4067595a92b53035f36931bcfff79017", "sha256": "843038773868015638bad82a74d3e90bc750aff15d3e2c7e16a3401923267d75"}, "downloads": -1, "filename": "mongosql-2.0.7.tar.gz", "has_sig": false, "md5_digest": "4067595a92b53035f36931bcfff79017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 152267, "upload_time": "2019-10-07T17:02:02", "upload_time_iso_8601": "2019-10-07T17:02:02.028294Z", "url": "https://files.pythonhosted.org/packages/5e/f8/23421b683c341e5544e1d0f5ca1fbbeb5e8c08c46d5780eb1f3e4e7c132c/mongosql-2.0.7.tar.gz", "yanked": false}], "2.0.8": [{"comment_text": "", "digests": {"md5": "dd05da9bf945f5ebf562b2bb6de33000", "sha256": "c000cbad38d175efa2416d3d72af31b145f18c39e4830682b6d26010f78c7019"}, "downloads": -1, "filename": "mongosql-2.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dd05da9bf945f5ebf562b2bb6de33000", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 140722, "upload_time": "2019-11-01T00:09:09", "upload_time_iso_8601": "2019-11-01T00:09:09.234430Z", "url": "https://files.pythonhosted.org/packages/e6/7f/c8fafd55883b954f19bd6d618d87a09ebe7c0308232e2162efef19efb359/mongosql-2.0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f038fa01b39127676b8b826664d5603f", "sha256": "3dc1df28d40f3a7e4a27213f948565e65396778dc355c33e26909628fb2424c0"}, "downloads": -1, "filename": "mongosql-2.0.8.tar.gz", "has_sig": false, "md5_digest": "f038fa01b39127676b8b826664d5603f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158044, "upload_time": "2019-11-01T00:09:12", "upload_time_iso_8601": "2019-11-01T00:09:12.610742Z", "url": "https://files.pythonhosted.org/packages/55/72/acd95e57fda4daeb97a5fbe92356a85953be3e1808d1a451e5e0a2d74a2c/mongosql-2.0.8.tar.gz", "yanked": false}], "2.0.9": [{"comment_text": "", "digests": {"md5": "c6662b94566ff2a50b472d3d27839b40", "sha256": "70de89a5df701b2e62db04cc133a13685d6a2c062791041ee251bb85871a79ae"}, "downloads": -1, "filename": "mongosql-2.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c6662b94566ff2a50b472d3d27839b40", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 141157, "upload_time": "2019-11-27T10:35:01", "upload_time_iso_8601": "2019-11-27T10:35:01.371102Z", "url": "https://files.pythonhosted.org/packages/2b/6c/fb1fb9925c3fd5ce48c309f13fb0921189d81343286bdc6f7c8d7e6f7e84/mongosql-2.0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9166153e24bb6a31c408d9d50fa38007", "sha256": "3529411e60e975921a22f4a8455f1b0c35e112e7e4e72b73e3b957f48f02702d"}, "downloads": -1, "filename": "mongosql-2.0.9.tar.gz", "has_sig": false, "md5_digest": "9166153e24bb6a31c408d9d50fa38007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158693, "upload_time": "2019-11-27T10:35:04", "upload_time_iso_8601": "2019-11-27T10:35:04.951190Z", "url": "https://files.pythonhosted.org/packages/36/a3/f70e7101e290008497acb34950191e6bb431ef4bf0872518526995ada888/mongosql-2.0.9.tar.gz", "yanked": false}], "2.0.9.post1": [{"comment_text": "", "digests": {"md5": "b82e41b7bfcb28ea3a4f383b9681245b", "sha256": "58bf9c636cb3e54d36438e28c3f5a373007e078e14f65327a6e899a4a7ba4a91"}, "downloads": -1, "filename": "mongosql-2.0.9.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b82e41b7bfcb28ea3a4f383b9681245b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.6", "size": 141232, "upload_time": "2020-01-29T20:30:27", "upload_time_iso_8601": "2020-01-29T20:30:27.758729Z", "url": "https://files.pythonhosted.org/packages/ac/47/44edcaf444746a9979e03e69e2bcadc10afec9309e6b411153f11d301822/mongosql-2.0.9.post1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24c5e648eac4ef615f266709446c47c2", "sha256": "46cc2b9ea4c11c73c7f494de28b62814b9e74ce25eab154a017e6bfa5a5387f9"}, "downloads": -1, "filename": "mongosql-2.0.9.post1.tar.gz", "has_sig": false, "md5_digest": "24c5e648eac4ef615f266709446c47c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 161080, "upload_time": "2020-01-29T20:30:30", "upload_time_iso_8601": "2020-01-29T20:30:30.927679Z", "url": "https://files.pythonhosted.org/packages/ae/de/58d804f1166f0b2e271e9d4bc3afee391f0adc663c7cb194cfeb1ee11155/mongosql-2.0.9.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5a9fe2817f6b8b33d95a6c71055b251", "sha256": "28ef32a462e65eae703159b7d4548f5d4b9972547e7b34cfb3d6ca70e03203c3"}, "downloads": -1, "filename": "mongosql-2.0.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e5a9fe2817f6b8b33d95a6c71055b251", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.6", "size": 140049, "upload_time": "2020-04-15T21:36:02", "upload_time_iso_8601": "2020-04-15T21:36:02.051984Z", "url": "https://files.pythonhosted.org/packages/c2/58/a85331a4a05ff3f33ead77d4fec3ad5c919c84d524c739ed823b24f90fe3/mongosql-2.0.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "745eae8ea684119f628ef7cc806ad9a9", "sha256": "3bf516395ae99efd0294fe7dc82a493045b01d426b19b4fb01e4d0402ef1d919"}, "downloads": -1, "filename": "mongosql-2.0.11.tar.gz", "has_sig": false, "md5_digest": "745eae8ea684119f628ef7cc806ad9a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 160429, "upload_time": "2020-04-15T21:36:05", "upload_time_iso_8601": "2020-04-15T21:36:05.310483Z", "url": "https://files.pythonhosted.org/packages/f8/26/25b6d1961a3630b1f99e5a87755ffa0e20c9ef8bb4333536cbd08cb6b21a/mongosql-2.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:13 2020"}