{"info": {"author": "Tommy Yu", "author_email": "tommy.yu@auckland.ac.nz", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Plugins", "Framework :: Setuptools Plugin", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: JavaScript", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Build Tools", "Topic :: System :: Software Distribution", "Topic :: Utilities"], "description": "calmjs.rjs\n==========\n\nPackage for the integration of `RequireJS`__ into a Python environment\nvia the `Calmjs framework`__, to provide a reproducible workflow for the\ngeneration of deployable artifacts from JavaScript source code provided\nby Python packages in conjunction with standard JavaScript or `Node.js`_\npackages sourced from |npm|_ or other similar package repositories.\n\n.. __: http://requirejs.org/\n.. __: https://pypi.python.org/pypi/calmjs\n.. image:: https://travis-ci.org/calmjs/calmjs.rjs.svg?branch=2.0.1\n    :target: https://travis-ci.org/calmjs/calmjs.rjs\n.. image:: https://ci.appveyor.com/api/projects/status/jbta6dfdynk5ke59/branch/2.0.1?svg=true\n    :target: https://ci.appveyor.com/project/metatoaster/calmjs-rjs/branch/2.0.1\n.. image:: https://coveralls.io/repos/github/calmjs/calmjs.rjs/badge.svg?branch=2.0.1\n    :target: https://coveralls.io/github/calmjs/calmjs.rjs?branch=2.0.1\n\n.. |AMD| replace:: AMD (Asynchronous Module Definition)\n.. |bower| replace:: ``bower``\n.. |calmjs| replace:: ``calmjs``\n.. |calmjs.bower| replace:: ``calmjs.bower``\n.. |calmjs.rjs| replace:: ``calmjs.rjs``\n.. |calmjs.dev| replace:: ``calmjs.dev``\n.. |npm| replace:: ``npm``\n.. |r.js| replace:: ``r.js``\n.. |requirejs| replace:: ``requirejs``\n.. _AMD: https://github.com/amdjs/amdjs-api/blob/master/AMD.md\n.. _bower: https://bower.io/\n.. _calmjs: https://pypi.python.org/pypi/calmjs\n.. _calmjs.bower: https://pypi.python.org/pypi/calmjs.bower\n.. _calmjs.dev: https://pypi.python.org/pypi/calmjs.dev\n.. _Node.js: https://nodejs.org/\n.. _npm: https://www.npmjs.com/\n.. _requirejs: https://www.npmjs.com/package/requirejs\n\n\nIntroduction\n------------\n\nWeb applications can be created using any language, however the\ninteractive front-end user interfaces they provide ultimately rely on\nsome form of JavaScript.  Python web application frameworks or systems\nthat provide frontend functionalities that bridge the backend have\nadopted the usage of `Node.js`_ for testing the JavaScript code that\nthey may provide, with |npm|_ (or |bower|_) being the package manager\nfor the acquisition of JavaScript packages required for the associated\nfunctionality.  This often resulted in the separation of what would have\nbeen a single set of package dependency configuration into multiple\ndifferent sets; often this also resulted in the package being fractured\ninto two parts to fit in with the distribution channels being used (PyPI\nvs npm and others).\n\nThis outcome ends up being problematic for Python package management due\nto the increase in difficulty in the propagation of the package's\nversion and dependency information across all relevant package\nmanagement channels in a consistent, portable and reproducible manner\nfor downstream packages and their users.  The other issue is that the\nconfiguration files used for asset management or artifact generation is\noften coupled tightly to the system at hand, making it rather difficult\nfor their downstream package to reuse these configurations to generate\na combined artifacts that work also with their other upstream packages\nin a consistent manner.\n\nSome other package managers attempt to solve this by being utterly\ngeneric, however they lack the awareness of locally available Python\npackages (such as Python wheels already installed in the local\nenvironment not being understood by Bower), thus build processes that\ninvolve Bower often end up relying on public infrastructure, and options\nto move it to a private infrastructure or even reuse locally available\nartifacts/packages require extra configurations which negate the\nbenefits offered by these systems.  Also, these build scripts are\ntightly coupled to a specific project which are not portable.\n\nThe goal of the Calmjs framework is to bring this separation back\ntogether by providing the method to expose JavaScript sources included\nwith Python packages, with this package, |calmjs.rjs|, to provide the\nfacilities to produce deployable artifacts from those exported source\nfiles, plus the other declared external bundles to be sourced from |npm|\nor other related Node.js package management systems.\n\n\nFeatures\n--------\n\nHow |calmjs.rjs| works\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe Calmjs framework provides the framework to allow Python packages to\ndeclare the dependencies they need against |npm| based packages for the\nJavaScript code they provide, and also the system that allow Python\npackages to declare which of their modules export JavaScript sources\nthat can be reused.\n\nThe utility included with |calmjs.rjs| provide the means to consume\nthose declarations, treating the JavaScript files as both source and\ncompilation target, with the final deployable artifact(s) being produced\nthrough |r.js| from the |requirejs|_ package.\n\nCurrently, the source files could be written in both AMD and CommonJS\nmodule formats, although the CommonJS format is recommended due to their\nwide support under most systems, and that |calmjs.rjs| provides\ntranspilation and configuration generation utilities that processes the\nJavaScript source code into a form that is compatible with the |r.js|\noptimizer.  However, the ``exports`` statement in the source file should\nbe not part of ``module.exports`` for the mean time.  The AMD headers\nand footers can be absent too, as the ``calmjs rjs`` transpiler will add\nthe appropriate headers and footers needed (for example, have\n``require`` be imported from the correct source, or for mapping\n``exports`` to ``module.exports``) so that the final script will be\nusable for the target platform or format.\n\nThe resulting sources will be placed in a build directory, along with\nall the declared bundled sources acquired from the Node.js package\nmanagers or repositories.  A build file will then be generated that will\ninclude all the relevant sources as selected to enable the generation of\nthe final artifact file through |r.js|.  These can then be deployed to\nthe appropriate environment, or the whole above process can be included\nas part of the functionality of the Python backend at hand.\n\nUltimately, the goal of |calmjs.rjs| is to ease the integration and\ninteractions between of client-side JavaScript with server-side Python,\nby simplifying the task of building, shipping and deployment of the two\nset of sources in one shared package and environment.  The Calmjs\nframework provides the linkage between these two environment and the\ntools provided by there will assist with the setup of a common,\nreproducible local Node.js environments.\n\nFinally, for quality control, this package has integration with\n|calmjs.dev|, which provides the tools needed to set up the test\nenvironment and harnesses for running of JavaScript tests that are part\nof the Python packages for the associated JavaScript code.  However,\nthat package is not declared as a direct dependency, as not all use\ncases will require the availability of that package.  Please refer to\ninstallation section for details.\n\nDo note, in the initial implementation, the JavaScript source file\nsupported by this framework loosely follows certain definitions that\nonly mimic what ES6 intends to provide (as outlined earlier).  Even with\nthis, as a consequence of treating JavaScript within the Python package\nas a source file for the compilation target which is the deployable\nartifact file, the input source files and exported paths generated by\n|calmjs.rjs| are NOT meant for direct consumption of web clients such as\nweb browsers.  The produced artifact from this framework will be usable\nthrough the AMD API.\n\n\nInstallation\n------------\n\nIt is recommended that the local environment already have Node.js and\n|npm| installed at the very minimum to enable the installation of\n|requirejs|, if it hasn't already been installed and available.  Also,\nthe version of Python must be either 2.7 or 3.3+; PyPy is supported,\nwith PyPy3 version 5.2.0-alpha1 must be used due to a upstream package\nfailing to function in the currently stable PyPy3 version 2.4.\n\nTo install |calmjs.rjs| into a given Python environment, it may be\ninstalled directly from PyPI with the following command:\n\n.. code:: sh\n\n    $ pip install calmjs.rjs\n\nInstalling/using RequireJS with calmjs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo establish a development/build environment for a Python package with\nthe support for |r.js| through |calmjs.rjs| in the current working\ndirectory (e.g. for a project), the following command may be executed:\n\n.. code:: sh\n\n    $ calmjs npm --install calmjs.rjs\n\nWhile running ``npm install requirejs`` (along with other related\npackages declared by |calmjs.rjs| that it needs from |npm|) will achieve\nthe same effect, do note the Calmjs framework makes it possible for\n|npm| dependencies to be propagated down to dependent packages; such\nthat if a Python package that have declared |calmjs.rjs| as a dependency\n(either through ``install_requires`` or an ``extras_require`` in its\n``setup.py``) may have its complete set of dependencies on |npm| be\ninstalled using the following command (assuming the package is named\n``example.package``:\n\n.. code:: sh\n\n    $ calmjs npm --install example.package\n\nAll standard JavaScript and Node.js dependencies for ``example.package``\nwill now be installed into the current directory through the relevant\ntools.  This process will also install all the other dependencies\nthrough |npm| or |requirejs| that other Python packages depended on by\n``example.package`` have declared.\n\nFor further details about how this all works can be found in the\ndocumentation for |calmjs|_.  Otherwise, please continue on to the\n`usage`_ section.\n\nAlternative installation methods (advanced users)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDevelopment is still ongoing with |calmjs.rjs|, for the latest features\nand bug fixes, the development version can be installed through git like\nso:\n\n.. code:: sh\n\n    $ pip install calmjs\n    $ pip install git+https://github.com/calmjs/calmjs.rjs.git#egg=calmjs.rjs\n\nAlternatively, the git repository can be cloned directly and execute\n``python setup.py develop`` while inside the root of the source\ndirectory.\n\nKeep in mind that |calmjs| MUST be available before the ``setup.py``\nwithin the |calmjs.rjs| source tree is executed, for it needs the\n``package_json`` writing capabilities in |calmjs|.  Alternatively,\nplease execute ``python setup.py egg_info`` if any message about\n``Unknown distribution option:`` is noted during the invocation of\n``setup.py``.\n\nAs |calmjs| is declared as both namespace and package, there are certain\nlow-level setup that is required on the working Python environment to\nensure that all modules within can be located correctly.  However,\nversions of ``setuptools`` earlier than `v31.0.0`__ does not create the\nrequired package namespace declarations when a package is installed\nusing this development installation method when mixed with ``pip\ninstall`` within the same namespace.  As a result, inconsistent import\nfailures can happen for any modules under the |calmjs| namespace.  As an\nexample:\n\n.. __: https://setuptools.readthedocs.io/en/latest/history.html#v31-0-0\n\n.. code:: python\n\n    >>> import calmjs.rjs\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named 'calmjs.rjs'\n    >>> import calmjs.base\n    >>> import calmjs.rjs\n    >>>\n\nIf this behavior (and workaround) is undesirable, please ensure the\ninstallation of all |calmjs| related packages follow the same method\n(i.e. either ``python setup.py develop`` for all packages, or using the\nwheels acquired through ``pip``), or upgrade ``setuptools`` to version\n31 or greater and reinstall all affected packages.\n\nTesting the installation\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nFinally, to verify for the successful installation of |calmjs.rjs|, the\nincluded tests may be executed through this command:\n\n.. code:: sh\n\n    $ python -m unittest calmjs.rjs.tests.make_suite\n\nHowever, if the steps to install external Node.js dependencies to the\ncurrent directory was followed, the current directory may be specified\nas the ``CALMJS_TEST_ENV`` environment variable.  Under POSIX compatible\nshells this may be executed instead from within that directory:\n\n.. code:: sh\n\n    $ CALMJS_TEST_ENV=. python -m unittest calmjs.rjs.tests.make_suite\n\nDo note that if the |calmjs.dev| package is unavailable, a number of\ntests will be skipped.  To avoid this, either install that package\nseparately, or install |calmjs.rjs| using its extras dependencies\ndeclaration like so:\n\n.. code:: sh\n\n    $ pip install calmjs.rjs[dev]\n\n\nUsage\n-----\n\nTo generate a RequireJS artifact from packages that have JavaScript code\nexposed through the Calmjs module registry system that are already\ninstalled into the current environment, simply execute the following\ncommand:\n\n.. code:: sh\n\n    $ calmjs rjs example.package\n\nThe following sections in this document will provide an overview on how\nto enable the JavaScript module export feature for a given Python\npackage through the Calmjs module registry system, however a more\nthorough description on this topic may be found in the README provided\nby the |calmjs|_ package, under the section `Export JavaScript code from\nPython packages`__.\n\n.. __: https://pypi.python.org/pypi/calmjs/#export-javascript-code-from-python-packages\n\nDeclaring JavaScript exports for Python\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAny exposed JavaScript code through the ``calmjs.module`` registry will\nbe picked up and compiled into a working RequireJS artifact.  For\nexample, given the following entry points for that registry defined by a\npackage named ``example``:\n\n.. code:: ini\n\n    [calmjs.module]\n    example = example\n\nThis is the most basic declaration that works for packages that share\nthe same name as the import location provided.\n\nThe following is am example for packages that have nested submodules\n(called ``example.lib`` and ``example.app``):\n\n.. code:: ini\n\n    [calmjs.module]\n    example.lib = example.lib\n    example.app = example.app\n\nWhile the import locations declared looks exactly like a Python module\n(as per the rules of a Python entry point), the ``calmjs.module``\nregistry will present them using the CommonJS/ES6 style import paths\n(i.e.  ``'example/lib'`` and ``'example/app'``), so users of that need\nthose JavaScript modules to be sure they ``require`` those strings.\n\nPlease also note that the default source extractor will extract all\nJavaScript files within those directories.  Finally, as a consequence of\nhow the imports are done, it is recommended that no relative imports are\nto be used.\n\nIf the package at hand does not directly declare its dependency on\n|calmjs|, an explicit ``calmjs_module_registry=['calmjs.module']`` may\nneed to be declared in the ``setup`` function for the package to ensure\nthat this default module registry will be used to acquire the JavaScript\nsources from.\n\nPutting this together, the ``setup.py`` file should contain the\nfollowing:\n\n.. code:: Python\n\n    setup(\n        name='example',\n        # ... plus other declarations\n        # This is one of the recommended options, even though the\n        # project will not be importing from Calmjs.\n        license='gpl',\n        install_requires=[\n            'calmjs>=3.0.0,<4',\n            'calmjs.rjs>=2.0.0,<3',\n            # plus other installation requirements\n        ],\n        # If the usage of the GPL is impossible for the project, or\n        # declaring a direct dependency on calmjs packages is impossible\n        # for the project for whatever other reasons (even though the\n        # project itself will NOT be required to include/import ANY code\n        # from the calmjs namespace), setup_requires may be used instead\n        # of install_requires, and the following should also be included\n        # as well:\n        package_json={\n            \"devDependencies\": {\n                \"requirejs\": \"~2.1.17\",\n            }\n        },\n        calmjs_module_registry=['calmjs.module'],\n        # the entry points are required to allow calmjs to pick this up\n        entry_points=\"\"\"\n        [calmjs.module]\n        example = example\n        example.lib = example.lib\n        example.app = example.app\n        \"\"\",\n    )\n\nFor the construction of the RequireJS artifact, the command ``calmjs\nrjs`` will automatically extract all relevant source files from the\ndependencies of the selected Python package(s) into a temporary build\ndirectory, where the build manifest will also be generated for the\ninvocation of ``r.js`` to construct the artifact.  An example run:\n\n.. code:: sh\n\n    $ calmjs rjs example\n\n    Tracing dependencies for: /home/user/example.js\n\n    /home/user/example.js\n    ----------------\n    /tmp/tmp_build/build/example/lib/form.js\n    /tmp/tmp_build/build/example/lib/ui.js\n    /tmp/tmp_build/build/example/lib/main.js\n    /tmp/tmp_build/build/example/app/index.js\n\nAs the build process used by |calmjs.rjs| is done in a separate build\ndirectory, all imports through the Node.js module system must be\ndeclared as ``extras_calmjs``.  For instance, if ``example/app/index``\nneed to use the ``jquery`` and ``underscore`` modules like so:\n\n.. code:: JavaScript\n\n    var $ = require('jquery'),\n        _ = require('underscore');\n\nIt will need to declare the target location sourced from |npm| plus the\npackage_json for the dependencies, it will need to declare this in its\n``setup.py``:\n\n.. code:: Python\n\n    setup(\n        # ...\n        package_json={\n            \"dependencies\": {\n                \"jquery\": \"~3.1.0\",\n                \"underscore\": \"~1.8.0\",\n            },\n        },\n        extras_calmjs = {\n            'node_modules': {\n                'jquery': 'jquery/dist/jquery.js',\n                'underscore': 'underscore/underscore.js',\n            },\n        },\n    )\n\nOnce that is done, rerun ``python setup.py egg_info`` to write the\nfreshly declared metadata into the package's egg-info directory, so that\nit can be used from within the environment.  ``calmjs npm --install``\ncan now be invoked to install the |npm| dependencies into the current\ndirectory; to permit |calmjs.rjs| to find the required files sourced\nfrom |npm| to put into the build directory for ``r.js`` to locate them.\n\nThe resulting calmjs run may then end up looking something like this:\n\n.. code:: sh\n\n    $ calmjs rjs example\n\n    Tracing dependencies for: /home/user/example.js\n\n    /home/user/example.js\n    ----------------\n    /tmp/tmp_build/build/jquery.js\n    /tmp/tmp_build/build/underscore.js\n    /tmp/tmp_build/build/example/lib/form.js\n    /tmp/tmp_build/build/example/lib/ui.js\n    /tmp/tmp_build/build/example/lib/main.js\n    /tmp/tmp_build/build/example/app/index.js\n\n\nThe transpiler will add the appropriate boilerplates and thus the\n``require`` statements through |requirejs| will import from\n``node_modules`` if the extras_calmjs have been declared.  However,\nthere are cases where the desired artifact should only contain the\nsources from the Python package without the extras or vice versa (due to\nthe library being available via another deployed artifact), this is\nsupported by the ``empty:`` scheme by ``r.js``, and to enable it for\n``calmjs rjs`` it can be done like so:\n\n.. code:: sh\n\n    $ calmjs rjs example --bundlepath-method empty --export-filename main.js\n\n    Tracing dependencies for: /home/user/main.js\n\n    /home/user/main.js\n    ----------------\n    /tmp/tmp_build/build/example/lib/form.js\n    /tmp/tmp_build/build/example/lib/ui.js\n    /tmp/tmp_build/build/example/lib/main.js\n    /tmp/tmp_build/build/example/app/index.js\n\n    $ calmjs rjs example --sourcepath-method empty --export-filename deps.js\n\n    Tracing dependencies for: /home/user/deps.js\n\n    /home/user/deps.js\n    ----------------\n    /tmp/tmp_build/build/jquery.js\n    /tmp/tmp_build/build/underscore.js\n\nThe above example shows the generation of two separate artifacts, one\ncontaining just the sources from the Python package ``example`` that had\nbeen declared in the ``calmjs.module`` registry, and the other contains\nonly the external extra sources.\n\nIf the above triggers a dependency trace error for |r.js|, there is a\nlast resort ``--empty`` flag that can be applied; do note that this\ncompletely disables the trace functionality for |r.js| as this initiates\na similar trace process to locate all the imported module names for\nstubbing them out with the ``empty:`` scheme within the generated\nconfiguration file.  Ensure that the modules required by the resulting\nartifact has all its required modules provided elsewhere.\n\nThe explicit ``extras_calmjs`` declaration also supports the usage\nthrough ``bower`` (supported via |calmjs.bower|_); instead of using\n``node_modules`` as the key, ``bower_components`` should be used\ninstead.\n\nAlternative registries aside from ``calmjs.module`` can be specified\nwith the ``--source-registry`` flag.  Assuming there are registries in\nthe current environment registered as ``myreg1`` and ``myreg2`` and the\n``example`` package has registered sources to both of them, the command\nto build a bundle from both those registries into one artifact can be\ntriggered like so:\n\n.. code:: sh\n\n    $ calmjs rjs --source-registry=myreg1,myreg2 example\n\nHandling of RequireJS loader plugins\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe AMD system as defined by RequireJS has the concept of loader\nplugins, where the module name provided may be suffixed with a ``!`` as\narguments for handling by the plugin.  As the string provided after is\nopaque to the |requirejs| system as a whole and thus handled directly by\nthe preceding plugin, the resources that it need will be specific to the\nplugin itself.  As it may load resources through the |requirejs| system,\nany paths that require configuration will need to be done.\n\nTo account for this issue, |calmjs.rjs| introduces the concept of loader\nplugin handlers and a registry system for dealing with this.  A given\n``RJSToolchain`` will have a default loader plugin registry assigned,\nbut this can be overridden by specifying a custom identifier (overriding\nthe default ``'calmjs.rjs.loader_plugin'``) for the registry to be used,\nwhich will allow the handling of very customized loaders for a given\nproject.  Please refer to the ``calmjs.rjs.registry`` module for more\ndetails on how this is constructed and set up for usage.\n\nBy default, the ``text`` handler is registered to the default loader\nplugin registry, which should cover the most common use case encountered\nby the |calmjs| framework.  Do note that packages are still required to\ndeclare their (dev)dependencies in their ``package_json`` to the plugin,\nideally with a well constrained version, so to ensure a consistent build\nexperience for all end users.\n\nTesting standalone, finalized RequireJS artifacts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAMD artifacts generated using the standard ``calmjs rjs`` toolchain\nruntime may be tested using the ``calmjs karma`` runtime provided by the\n``calmjs.dev`` package.  Given a finalized ``example.js`` that\nimplements the features provided by the ``example`` package, the\nartifact may be tested with the tests provided by the ``example``\npackage using the following command:\n\n.. code:: sh\n\n    $ calmjs karma run \\\n        -t calmjs.rjs \\\n        --artifact=example.js \\\n        example\n\nThe above command invokes the standalone Karma runner using the\n``calmjs.rjs`` settings to test against the ``example.js`` artifact\nfile, using the tests provided by the ``example`` package.  The test\nexecution is similar to the one during the development process.\n\nDeclare prebuilt JavaScript artifacts for Python packages\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFinally, to complete the Python package deployment story, the process\nshould include the automatic generation and inclusion of the JavaScript\nartifacts in the resulting Python wheel.  This can be achieved by\nspecifying an entry in the ``calmjs.artifacts`` registry, with the key\nbeing the filename of the artifact and the value being the import\nlocation to a builder.  A default builder function provided at\n``calmjs.rjs.artifact:complete_rjs`` will enable the generation of a\ncomplete RequireJS artifact for the Python package.  For example:\n\n.. code:: ini\n\n    [calmjs.artifacts]\n    example.package.rjs.js = calmjs.rjs.artifact:complete_rjs\n\nOnce those entry points are installed, running ``calmjs artifact build\nexample.package`` will make use of the RequireJS toolchain and build the\nartifact at ``example.package.rjs.js`` inside the ``calmjs_artifacts``\ndirectory within the metadata directory for ``example.package``.\nAlternatively, for solution more integrated with ``setuptools``, the\n``setup`` function in ``setup.py`` should also enable the\n``build_calmjs_artifacts`` flag such that ``setup.py build`` will also\ntrigger the building process.  This is useful for automatically\ngenerating and including the artifact as part of the wheel building\nprocess.  Consider this ``setup.py``:\n\n.. code:: Python\n\n    setup(\n        name='example.package',\n        # ... other required fields truncated\n        build_calmjs_artifacts=True,\n        entry_points=\"\"\"\n        # ... other entry points truncated\n        [calmjs.module]\n        example.package = example.package\n\n        [calmjs.artifacts]\n        example.package.rjs.js = calmjs.rjs.artifact:complete_rjs\n        \"\"\",\n    )\n\nBuilding the wheel using ``setup.py`` may result in something like this.\nNote that the execution of ``r.js`` was part of the process and that the\nmetadata (egg-info) directory was then built into the wheel.\n\n.. code::\n\n    $ python setup.py bdist_wheel\n    running bdist_wheel\n    running build\n    ...\n    running build_calmjs_artifacts\n    automatically picked registries ['calmjs.module'] for sourcepaths\n    using loaderplugin registry 'calmjs.rjs.loader_plugin'\n    ...\n    /src/example.package.egg-info/calmjs_artifacts/example.package.rjs.js\n    ----------------\n    /tmp/tmpm_2jf151/build/example/package/index.js\n    ...\n    running install_egg_info\n    Copying src/example.package.egg-info to build/.../wheel/example.package...\n    running install_scripts\n    creating build/.../wheel/example.package-1.0.dist-info/WHEEL\n\nFor testing the package artifact, the following entry point should also\nbe specified under the ``calmjs.artifacts.tests`` registry, such that\nrunning ``calmjs artifact karma example.package`` will execute the\nJavaScript tests declared by ``example.package`` against the artifacts\nthat were declared in ``calmjs.artifacts``.\n\n.. code:: ini\n\n    [calmjs.artifacts.tests]\n    example.package.rjs.js = calmjs.rjs.artifact:test_complete_rjs\n\nTroubleshooting\n---------------\n\nThe following are some known issues with regards to this package and its\nintegration with other Python/Node.js packages.\n\nWhen calling ``calmjs rjs`` on a package, got ``ENOENT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTypically this is caused by source files from the source package or\nregistry invoking ``require`` a JavaScript module that is not available\nin the build directory.  One possible cause through the ``calmjs``\nframework is that the Python package failed to declare ``extras_calmjs``\nthat it might require, or that explicit map method and/or source\nregistry that was selected did not result in all required sources be\nloaded into the build directory.\n\nIf the missing source files are intended, applying the ``--empty`` or\nthe ``-e`` flag to the ``rjs`` tool will stub out all the missing\nmodules from the bundle; do note that this will result in the generated\nartifact bundle not having all the required modules for its execution.\nThe resulting artifact bundle should be used in conjunction with the\nother artifact bundles that provide the result of the required\ndependencies.\n\nRJSRuntimeError: unable to locate 'r.js'\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis means the current Node.js environment is missing the requirejs\npackage from |npm|; either install it manually with it or through\n|calmjs| on this package.  If a given Python package is required to use\nrequirejs to generate the package, its ``package_json`` should declare\nthat, or declare dependency on ``calmjs.rjs``.\n\nUserWarning: Unknown distribution option:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDuring setup and installation using the development method, if this\nwarning message is shown, please ensure the egg metadata is correctly\ngenerated by running ``python setup.py egg_info`` in the source\ndirectory, as the package |calmjs| was not available when the setup\nscript was initially executed.\n\n\nContribute\n----------\n\n- Issue Tracker: https://github.com/calmjs/calmjs.rjs/issues\n- Source Code: https://github.com/calmjs/calmjs.rjs\n\n\nLegal\n-----\n\nThe |calmjs.rjs| package is part of the calmjs project.\n\nThe calmjs project is copyright (c) 2016 Auckland Bioengineering\nInstitute, University of Auckland.  |calmjs.rjs| is licensed under the\nterms of the GPLv2 or later.\n\nChangelog\n=========\n\n2.0.1 (2018-05-03)\n------------------\n\n- Update the export_target production and usage of working_dir to be\n  inline with what is expected by ``calmjs-3.1.0``. [\n  `#3 <https://github.com/calmjs/calmjs.rjs/issues/3>`_\n  ]\n\n2.0.0 (2018-01-12)\n------------------\n\n- Support for ``calmjs-3.0.0`` features and breaking changes.\n- Loader plugin framework migrated upstream; downstream packages that\n  make use of them should no longer declare explicit entries in\n  ``extras_calmjs`` to permit wider portability.\n- Removed usage of ``slimit`` in favor of the capabilities now provided\n  by ``calmjs`` and ``calmjs.parse``.\n- The flags for the ``calmjs rjs`` runtime have been changed to remove\n  some naming confusion, mainly due to sourcemap and also to maintain\n  consistency with other ``calmjs`` tools.\n\n  - ``--bundle-map-method`` is deprecated in favor for\n    ``--bundlepath-method``; will be fully removed by 3.0.0\n  - ``--source-map-method`` is deprecated in favor for\n    ``--sourcepath-method``; will be fully removed by 3.0.0\n\n- Provide a generic package-level artifact builder for the\n  ``calmjs.artifacts`` registry along with the respective tester for the\n  ``calmjs.artifacts.tests`` registry.\n\n1.0.2 (2017-05-22)\n------------------\n\n- Corrected the issue where plugins that have been unmapped using the\n  ``empty:`` scheme triggering ``FileNotFoundError``.\n\n1.0.1 (2017-01-27)\n------------------\n\n- Load the non-test files in deps also, instead as part of the tests to\n  avoid automatic inclusion.\n- Test files should start with the name test as per convention.\n\n1.0.0 (2016-11-18)\n------------------\n\n- Initial implementation that brings in the support of the production of\n  AMD artifacts (bundles) from JavaScript sources included with Python\n  packages (along with their declared dependencies through ``npm`` or\n  other supported tools) through the calmjs framework.\n- Enabled the ``calmjs rjs`` tool entry point.\n- Also provide integration with ``calmjs.dev`` by correcting the correct\n  hooks so that this package can be used as an advice package for the\n  execution of tests against artifacts generated through this package.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/calmjs/calmjs.rjs", "keywords": "", "license": "gpl", "maintainer": "", "maintainer_email": "", "name": "calmjs.rjs", "package_url": "https://pypi.org/project/calmjs.rjs/", "platform": "", "project_url": "https://pypi.org/project/calmjs.rjs/", "project_urls": {"Homepage": "https://github.com/calmjs/calmjs.rjs"}, "release_url": "https://pypi.org/project/calmjs.rjs/2.0.1/", "requires_dist": ["calmjs (<4,>=2.0.0)", "calmjs.parse (<2,>=1.0.0)", "calmjs.dev (<2,>=1.0.2); extra == 'dev'"], "requires_python": "", "summary": "Package for the integration of RequireJS into a Python environment via the Calmjs framework, to provide a reproducible workflow for the generation of deployable artifacts from JavaScript source code provided by Python packages in conjunction with standard JavaScript or Node.js packages sourced from npm or other similar package repositories.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"calmjs-rjs\">\n<h2>calmjs.rjs</h2>\n<p>Package for the integration of <a href=\"http://requirejs.org/\" rel=\"nofollow\">RequireJS</a> into a Python environment\nvia the <a href=\"https://pypi.python.org/pypi/calmjs\" rel=\"nofollow\">Calmjs framework</a>, to provide a reproducible workflow for the\ngeneration of deployable artifacts from JavaScript source code provided\nby Python packages in conjunction with standard JavaScript or <a href=\"https://nodejs.org/\" rel=\"nofollow\">Node.js</a>\npackages sourced from <a href=\"https://www.npmjs.com/\" rel=\"nofollow\"><tt>npm</tt></a> or other similar package repositories.</p>\n<a href=\"https://travis-ci.org/calmjs/calmjs.rjs\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/calmjs/calmjs.rjs.svg?branch=2.0.1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4833817b3d54c4f45956cadd5c5cebc830dca3e4/68747470733a2f2f7472617669732d63692e6f72672f63616c6d6a732f63616c6d6a732e726a732e7376673f6272616e63683d322e302e31\"></a>\n<a href=\"https://ci.appveyor.com/project/metatoaster/calmjs-rjs/branch/2.0.1\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/jbta6dfdynk5ke59/branch/2.0.1?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dcc607fd866837a83f5cf0fc7fd734f51414b5b3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6a62746136646664796e6b356b6535392f6272616e63682f322e302e313f7376673d74727565\"></a>\n<a href=\"https://coveralls.io/github/calmjs/calmjs.rjs?branch=2.0.1\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/calmjs/calmjs.rjs/badge.svg?branch=2.0.1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0e52ada5c08090b75ce3a964ad69df74ab90584/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f63616c6d6a732f63616c6d6a732e726a732f62616467652e7376673f6272616e63683d322e302e31\"></a>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>Web applications can be created using any language, however the\ninteractive front-end user interfaces they provide ultimately rely on\nsome form of JavaScript.  Python web application frameworks or systems\nthat provide frontend functionalities that bridge the backend have\nadopted the usage of <a href=\"https://nodejs.org/\" rel=\"nofollow\">Node.js</a> for testing the JavaScript code that\nthey may provide, with <a href=\"https://www.npmjs.com/\" rel=\"nofollow\"><tt>npm</tt></a> (or <a href=\"https://bower.io/\" rel=\"nofollow\"><tt>bower</tt></a>) being the package manager\nfor the acquisition of JavaScript packages required for the associated\nfunctionality.  This often resulted in the separation of what would have\nbeen a single set of package dependency configuration into multiple\ndifferent sets; often this also resulted in the package being fractured\ninto two parts to fit in with the distribution channels being used (PyPI\nvs npm and others).</p>\n<p>This outcome ends up being problematic for Python package management due\nto the increase in difficulty in the propagation of the package\u2019s\nversion and dependency information across all relevant package\nmanagement channels in a consistent, portable and reproducible manner\nfor downstream packages and their users.  The other issue is that the\nconfiguration files used for asset management or artifact generation is\noften coupled tightly to the system at hand, making it rather difficult\nfor their downstream package to reuse these configurations to generate\na combined artifacts that work also with their other upstream packages\nin a consistent manner.</p>\n<p>Some other package managers attempt to solve this by being utterly\ngeneric, however they lack the awareness of locally available Python\npackages (such as Python wheels already installed in the local\nenvironment not being understood by Bower), thus build processes that\ninvolve Bower often end up relying on public infrastructure, and options\nto move it to a private infrastructure or even reuse locally available\nartifacts/packages require extra configurations which negate the\nbenefits offered by these systems.  Also, these build scripts are\ntightly coupled to a specific project which are not portable.</p>\n<p>The goal of the Calmjs framework is to bring this separation back\ntogether by providing the method to expose JavaScript sources included\nwith Python packages, with this package, <tt>calmjs.rjs</tt>, to provide the\nfacilities to produce deployable artifacts from those exported source\nfiles, plus the other declared external bundles to be sourced from <tt>npm</tt>\nor other related Node.js package management systems.</p>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<h3 id=\"how-calmjs-rjs-works\"><span class=\"section-subtitle\">How <tt>calmjs.rjs</tt> works</span></h3>\n<p>The Calmjs framework provides the framework to allow Python packages to\ndeclare the dependencies they need against <tt>npm</tt> based packages for the\nJavaScript code they provide, and also the system that allow Python\npackages to declare which of their modules export JavaScript sources\nthat can be reused.</p>\n<p>The utility included with <tt>calmjs.rjs</tt> provide the means to consume\nthose declarations, treating the JavaScript files as both source and\ncompilation target, with the final deployable artifact(s) being produced\nthrough <tt>r.js</tt> from the <a href=\"https://www.npmjs.com/package/requirejs\" rel=\"nofollow\"><tt>requirejs</tt></a> package.</p>\n<p>Currently, the source files could be written in both AMD and CommonJS\nmodule formats, although the CommonJS format is recommended due to their\nwide support under most systems, and that <tt>calmjs.rjs</tt> provides\ntranspilation and configuration generation utilities that processes the\nJavaScript source code into a form that is compatible with the <tt>r.js</tt>\noptimizer.  However, the <tt>exports</tt> statement in the source file should\nbe not part of <tt>module.exports</tt> for the mean time.  The AMD headers\nand footers can be absent too, as the <tt>calmjs rjs</tt> transpiler will add\nthe appropriate headers and footers needed (for example, have\n<tt>require</tt> be imported from the correct source, or for mapping\n<tt>exports</tt> to <tt>module.exports</tt>) so that the final script will be\nusable for the target platform or format.</p>\n<p>The resulting sources will be placed in a build directory, along with\nall the declared bundled sources acquired from the Node.js package\nmanagers or repositories.  A build file will then be generated that will\ninclude all the relevant sources as selected to enable the generation of\nthe final artifact file through <tt>r.js</tt>.  These can then be deployed to\nthe appropriate environment, or the whole above process can be included\nas part of the functionality of the Python backend at hand.</p>\n<p>Ultimately, the goal of <tt>calmjs.rjs</tt> is to ease the integration and\ninteractions between of client-side JavaScript with server-side Python,\nby simplifying the task of building, shipping and deployment of the two\nset of sources in one shared package and environment.  The Calmjs\nframework provides the linkage between these two environment and the\ntools provided by there will assist with the setup of a common,\nreproducible local Node.js environments.</p>\n<p>Finally, for quality control, this package has integration with\n<tt>calmjs.dev</tt>, which provides the tools needed to set up the test\nenvironment and harnesses for running of JavaScript tests that are part\nof the Python packages for the associated JavaScript code.  However,\nthat package is not declared as a direct dependency, as not all use\ncases will require the availability of that package.  Please refer to\ninstallation section for details.</p>\n<p>Do note, in the initial implementation, the JavaScript source file\nsupported by this framework loosely follows certain definitions that\nonly mimic what ES6 intends to provide (as outlined earlier).  Even with\nthis, as a consequence of treating JavaScript within the Python package\nas a source file for the compilation target which is the deployable\nartifact file, the input source files and exported paths generated by\n<tt>calmjs.rjs</tt> are NOT meant for direct consumption of web clients such as\nweb browsers.  The produced artifact from this framework will be usable\nthrough the AMD API.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>It is recommended that the local environment already have Node.js and\n<tt>npm</tt> installed at the very minimum to enable the installation of\n<tt>requirejs</tt>, if it hasn\u2019t already been installed and available.  Also,\nthe version of Python must be either 2.7 or 3.3+; PyPy is supported,\nwith PyPy3 version 5.2.0-alpha1 must be used due to a upstream package\nfailing to function in the currently stable PyPy3 version 2.4.</p>\n<p>To install <tt>calmjs.rjs</tt> into a given Python environment, it may be\ninstalled directly from PyPI with the following command:</p>\n<pre>$ pip install calmjs.rjs\n</pre>\n<div id=\"installing-using-requirejs-with-calmjs\">\n<h4>Installing/using RequireJS with calmjs</h4>\n<p>To establish a development/build environment for a Python package with\nthe support for <tt>r.js</tt> through <tt>calmjs.rjs</tt> in the current working\ndirectory (e.g. for a project), the following command may be executed:</p>\n<pre>$ calmjs npm --install calmjs.rjs\n</pre>\n<p>While running <tt>npm install requirejs</tt> (along with other related\npackages declared by <tt>calmjs.rjs</tt> that it needs from <tt>npm</tt>) will achieve\nthe same effect, do note the Calmjs framework makes it possible for\n<tt>npm</tt> dependencies to be propagated down to dependent packages; such\nthat if a Python package that have declared <tt>calmjs.rjs</tt> as a dependency\n(either through <tt>install_requires</tt> or an <tt>extras_require</tt> in its\n<tt>setup.py</tt>) may have its complete set of dependencies on <tt>npm</tt> be\ninstalled using the following command (assuming the package is named\n<tt>example.package</tt>:</p>\n<pre>$ calmjs npm --install example.package\n</pre>\n<p>All standard JavaScript and Node.js dependencies for <tt>example.package</tt>\nwill now be installed into the current directory through the relevant\ntools.  This process will also install all the other dependencies\nthrough <tt>npm</tt> or <tt>requirejs</tt> that other Python packages depended on by\n<tt>example.package</tt> have declared.</p>\n<p>For further details about how this all works can be found in the\ndocumentation for <a href=\"https://pypi.python.org/pypi/calmjs\" rel=\"nofollow\"><tt>calmjs</tt></a>.  Otherwise, please continue on to the\n<a href=\"#usage\" rel=\"nofollow\">usage</a> section.</p>\n</div>\n<div id=\"alternative-installation-methods-advanced-users\">\n<h4>Alternative installation methods (advanced users)</h4>\n<p>Development is still ongoing with <tt>calmjs.rjs</tt>, for the latest features\nand bug fixes, the development version can be installed through git like\nso:</p>\n<pre>$ pip install calmjs\n$ pip install git+https://github.com/calmjs/calmjs.rjs.git#egg<span class=\"o\">=</span>calmjs.rjs\n</pre>\n<p>Alternatively, the git repository can be cloned directly and execute\n<tt>python setup.py develop</tt> while inside the root of the source\ndirectory.</p>\n<p>Keep in mind that <tt>calmjs</tt> MUST be available before the <tt>setup.py</tt>\nwithin the <tt>calmjs.rjs</tt> source tree is executed, for it needs the\n<tt>package_json</tt> writing capabilities in <tt>calmjs</tt>.  Alternatively,\nplease execute <tt>python setup.py egg_info</tt> if any message about\n<tt>Unknown distribution option:</tt> is noted during the invocation of\n<tt>setup.py</tt>.</p>\n<p>As <tt>calmjs</tt> is declared as both namespace and package, there are certain\nlow-level setup that is required on the working Python environment to\nensure that all modules within can be located correctly.  However,\nversions of <tt>setuptools</tt> earlier than <a href=\"https://setuptools.readthedocs.io/en/latest/history.html#v31-0-0\" rel=\"nofollow\">v31.0.0</a> does not create the\nrequired package namespace declarations when a package is installed\nusing this development installation method when mixed with <tt>pip\ninstall</tt> within the same namespace.  As a result, inconsistent import\nfailures can happen for any modules under the <tt>calmjs</tt> namespace.  As an\nexample:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">calmjs.rjs</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"ne\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"s1\">'calmjs.rjs'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">calmjs.base</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">calmjs.rjs</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>If this behavior (and workaround) is undesirable, please ensure the\ninstallation of all <tt>calmjs</tt> related packages follow the same method\n(i.e. either <tt>python setup.py develop</tt> for all packages, or using the\nwheels acquired through <tt>pip</tt>), or upgrade <tt>setuptools</tt> to version\n31 or greater and reinstall all affected packages.</p>\n</div>\n<div id=\"testing-the-installation\">\n<h4>Testing the installation</h4>\n<p>Finally, to verify for the successful installation of <tt>calmjs.rjs</tt>, the\nincluded tests may be executed through this command:</p>\n<pre>$ python -m unittest calmjs.rjs.tests.make_suite\n</pre>\n<p>However, if the steps to install external Node.js dependencies to the\ncurrent directory was followed, the current directory may be specified\nas the <tt>CALMJS_TEST_ENV</tt> environment variable.  Under POSIX compatible\nshells this may be executed instead from within that directory:</p>\n<pre>$ <span class=\"nv\">CALMJS_TEST_ENV</span><span class=\"o\">=</span>. python -m unittest calmjs.rjs.tests.make_suite\n</pre>\n<p>Do note that if the <tt>calmjs.dev</tt> package is unavailable, a number of\ntests will be skipped.  To avoid this, either install that package\nseparately, or install <tt>calmjs.rjs</tt> using its extras dependencies\ndeclaration like so:</p>\n<pre>$ pip install calmjs.rjs<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To generate a RequireJS artifact from packages that have JavaScript code\nexposed through the Calmjs module registry system that are already\ninstalled into the current environment, simply execute the following\ncommand:</p>\n<pre>$ calmjs rjs example.package\n</pre>\n<p>The following sections in this document will provide an overview on how\nto enable the JavaScript module export feature for a given Python\npackage through the Calmjs module registry system, however a more\nthorough description on this topic may be found in the README provided\nby the <a href=\"https://pypi.python.org/pypi/calmjs\" rel=\"nofollow\"><tt>calmjs</tt></a> package, under the section <a href=\"https://pypi.python.org/pypi/calmjs/#export-javascript-code-from-python-packages\" rel=\"nofollow\">Export JavaScript code from\nPython packages</a>.</p>\n<div id=\"declaring-javascript-exports-for-python\">\n<h4>Declaring JavaScript exports for Python</h4>\n<p>Any exposed JavaScript code through the <tt>calmjs.module</tt> registry will\nbe picked up and compiled into a working RequireJS artifact.  For\nexample, given the following entry points for that registry defined by a\npackage named <tt>example</tt>:</p>\n<pre><span class=\"k\">[calmjs.module]</span>\n<span class=\"na\">example</span> <span class=\"o\">=</span> <span class=\"s\">example</span>\n</pre>\n<p>This is the most basic declaration that works for packages that share\nthe same name as the import location provided.</p>\n<p>The following is am example for packages that have nested submodules\n(called <tt>example.lib</tt> and <tt>example.app</tt>):</p>\n<pre><span class=\"k\">[calmjs.module]</span>\n<span class=\"na\">example.lib</span> <span class=\"o\">=</span> <span class=\"s\">example.lib</span>\n<span class=\"na\">example.app</span> <span class=\"o\">=</span> <span class=\"s\">example.app</span>\n</pre>\n<p>While the import locations declared looks exactly like a Python module\n(as per the rules of a Python entry point), the <tt>calmjs.module</tt>\nregistry will present them using the CommonJS/ES6 style import paths\n(i.e.  <tt>'example/lib'</tt> and <tt>'example/app'</tt>), so users of that need\nthose JavaScript modules to be sure they <tt>require</tt> those strings.</p>\n<p>Please also note that the default source extractor will extract all\nJavaScript files within those directories.  Finally, as a consequence of\nhow the imports are done, it is recommended that no relative imports are\nto be used.</p>\n<p>If the package at hand does not directly declare its dependency on\n<tt>calmjs</tt>, an explicit <tt><span class=\"pre\">calmjs_module_registry=['calmjs.module']</span></tt> may\nneed to be declared in the <tt>setup</tt> function for the package to ensure\nthat this default module registry will be used to acquire the JavaScript\nsources from.</p>\n<p>Putting this together, the <tt>setup.py</tt> file should contain the\nfollowing:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'example'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ... plus other declarations</span>\n    <span class=\"c1\"># This is one of the recommended options, even though the</span>\n    <span class=\"c1\"># project will not be importing from Calmjs.</span>\n    <span class=\"n\">license</span><span class=\"o\">=</span><span class=\"s1\">'gpl'</span><span class=\"p\">,</span>\n    <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'calmjs&gt;=3.0.0,&lt;4'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'calmjs.rjs&gt;=2.0.0,&lt;3'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># plus other installation requirements</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\"># If the usage of the GPL is impossible for the project, or</span>\n    <span class=\"c1\"># declaring a direct dependency on calmjs packages is impossible</span>\n    <span class=\"c1\"># for the project for whatever other reasons (even though the</span>\n    <span class=\"c1\"># project itself will NOT be required to include/import ANY code</span>\n    <span class=\"c1\"># from the calmjs namespace), setup_requires may be used instead</span>\n    <span class=\"c1\"># of install_requires, and the following should also be included</span>\n    <span class=\"c1\"># as well:</span>\n    <span class=\"n\">package_json</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"devDependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"requirejs\"</span><span class=\"p\">:</span> <span class=\"s2\">\"~2.1.17\"</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">calmjs_module_registry</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'calmjs.module'</span><span class=\"p\">],</span>\n    <span class=\"c1\"># the entry points are required to allow calmjs to pick this up</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"\n    [calmjs.module]\n    example = example\n    example.lib = example.lib\n    example.app = example.app\n    \"\"\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>For the construction of the RequireJS artifact, the command <tt>calmjs\nrjs</tt> will automatically extract all relevant source files from the\ndependencies of the selected Python package(s) into a temporary build\ndirectory, where the build manifest will also be generated for the\ninvocation of <tt>r.js</tt> to construct the artifact.  An example run:</p>\n<pre>$ calmjs rjs example\n\nTracing dependencies <span class=\"k\">for</span>: /home/user/example.js\n\n/home/user/example.js\n----------------\n/tmp/tmp_build/build/example/lib/form.js\n/tmp/tmp_build/build/example/lib/ui.js\n/tmp/tmp_build/build/example/lib/main.js\n/tmp/tmp_build/build/example/app/index.js\n</pre>\n<p>As the build process used by <tt>calmjs.rjs</tt> is done in a separate build\ndirectory, all imports through the Node.js module system must be\ndeclared as <tt>extras_calmjs</tt>.  For instance, if <tt>example/app/index</tt>\nneed to use the <tt>jquery</tt> and <tt>underscore</tt> modules like so:</p>\n<pre><span class=\"kd\">var</span> <span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jquery'</span><span class=\"p\">),</span>\n    <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'underscore'</span><span class=\"p\">);</span>\n</pre>\n<p>It will need to declare the target location sourced from <tt>npm</tt> plus the\npackage_json for the dependencies, it will need to declare this in its\n<tt>setup.py</tt>:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">package_json</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"jquery\"</span><span class=\"p\">:</span> <span class=\"s2\">\"~3.1.0\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"underscore\"</span><span class=\"p\">:</span> <span class=\"s2\">\"~1.8.0\"</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">extras_calmjs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'node_modules'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'jquery'</span><span class=\"p\">:</span> <span class=\"s1\">'jquery/dist/jquery.js'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'underscore'</span><span class=\"p\">:</span> <span class=\"s1\">'underscore/underscore.js'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Once that is done, rerun <tt>python setup.py egg_info</tt> to write the\nfreshly declared metadata into the package\u2019s egg-info directory, so that\nit can be used from within the environment.  <tt>calmjs npm <span class=\"pre\">--install</span></tt>\ncan now be invoked to install the <tt>npm</tt> dependencies into the current\ndirectory; to permit <tt>calmjs.rjs</tt> to find the required files sourced\nfrom <tt>npm</tt> to put into the build directory for <tt>r.js</tt> to locate them.</p>\n<p>The resulting calmjs run may then end up looking something like this:</p>\n<pre>$ calmjs rjs example\n\nTracing dependencies <span class=\"k\">for</span>: /home/user/example.js\n\n/home/user/example.js\n----------------\n/tmp/tmp_build/build/jquery.js\n/tmp/tmp_build/build/underscore.js\n/tmp/tmp_build/build/example/lib/form.js\n/tmp/tmp_build/build/example/lib/ui.js\n/tmp/tmp_build/build/example/lib/main.js\n/tmp/tmp_build/build/example/app/index.js\n</pre>\n<p>The transpiler will add the appropriate boilerplates and thus the\n<tt>require</tt> statements through <tt>requirejs</tt> will import from\n<tt>node_modules</tt> if the extras_calmjs have been declared.  However,\nthere are cases where the desired artifact should only contain the\nsources from the Python package without the extras or vice versa (due to\nthe library being available via another deployed artifact), this is\nsupported by the <tt>empty:</tt> scheme by <tt>r.js</tt>, and to enable it for\n<tt>calmjs rjs</tt> it can be done like so:</p>\n<pre>$ calmjs rjs example --bundlepath-method empty --export-filename main.js\n\nTracing dependencies <span class=\"k\">for</span>: /home/user/main.js\n\n/home/user/main.js\n----------------\n/tmp/tmp_build/build/example/lib/form.js\n/tmp/tmp_build/build/example/lib/ui.js\n/tmp/tmp_build/build/example/lib/main.js\n/tmp/tmp_build/build/example/app/index.js\n\n$ calmjs rjs example --sourcepath-method empty --export-filename deps.js\n\nTracing dependencies <span class=\"k\">for</span>: /home/user/deps.js\n\n/home/user/deps.js\n----------------\n/tmp/tmp_build/build/jquery.js\n/tmp/tmp_build/build/underscore.js\n</pre>\n<p>The above example shows the generation of two separate artifacts, one\ncontaining just the sources from the Python package <tt>example</tt> that had\nbeen declared in the <tt>calmjs.module</tt> registry, and the other contains\nonly the external extra sources.</p>\n<p>If the above triggers a dependency trace error for <tt>r.js</tt>, there is a\nlast resort <tt><span class=\"pre\">--empty</span></tt> flag that can be applied; do note that this\ncompletely disables the trace functionality for <tt>r.js</tt> as this initiates\na similar trace process to locate all the imported module names for\nstubbing them out with the <tt>empty:</tt> scheme within the generated\nconfiguration file.  Ensure that the modules required by the resulting\nartifact has all its required modules provided elsewhere.</p>\n<p>The explicit <tt>extras_calmjs</tt> declaration also supports the usage\nthrough <tt>bower</tt> (supported via <a href=\"https://pypi.python.org/pypi/calmjs.bower\" rel=\"nofollow\"><tt>calmjs.bower</tt></a>); instead of using\n<tt>node_modules</tt> as the key, <tt>bower_components</tt> should be used\ninstead.</p>\n<p>Alternative registries aside from <tt>calmjs.module</tt> can be specified\nwith the <tt><span class=\"pre\">--source-registry</span></tt> flag.  Assuming there are registries in\nthe current environment registered as <tt>myreg1</tt> and <tt>myreg2</tt> and the\n<tt>example</tt> package has registered sources to both of them, the command\nto build a bundle from both those registries into one artifact can be\ntriggered like so:</p>\n<pre>$ calmjs rjs --source-registry<span class=\"o\">=</span>myreg1,myreg2 example\n</pre>\n</div>\n<div id=\"handling-of-requirejs-loader-plugins\">\n<h4>Handling of RequireJS loader plugins</h4>\n<p>The AMD system as defined by RequireJS has the concept of loader\nplugins, where the module name provided may be suffixed with a <tt>!</tt> as\narguments for handling by the plugin.  As the string provided after is\nopaque to the <tt>requirejs</tt> system as a whole and thus handled directly by\nthe preceding plugin, the resources that it need will be specific to the\nplugin itself.  As it may load resources through the <tt>requirejs</tt> system,\nany paths that require configuration will need to be done.</p>\n<p>To account for this issue, <tt>calmjs.rjs</tt> introduces the concept of loader\nplugin handlers and a registry system for dealing with this.  A given\n<tt>RJSToolchain</tt> will have a default loader plugin registry assigned,\nbut this can be overridden by specifying a custom identifier (overriding\nthe default <tt>'calmjs.rjs.loader_plugin'</tt>) for the registry to be used,\nwhich will allow the handling of very customized loaders for a given\nproject.  Please refer to the <tt>calmjs.rjs.registry</tt> module for more\ndetails on how this is constructed and set up for usage.</p>\n<p>By default, the <tt>text</tt> handler is registered to the default loader\nplugin registry, which should cover the most common use case encountered\nby the <tt>calmjs</tt> framework.  Do note that packages are still required to\ndeclare their (dev)dependencies in their <tt>package_json</tt> to the plugin,\nideally with a well constrained version, so to ensure a consistent build\nexperience for all end users.</p>\n</div>\n<div id=\"testing-standalone-finalized-requirejs-artifacts\">\n<h4>Testing standalone, finalized RequireJS artifacts</h4>\n<p>AMD artifacts generated using the standard <tt>calmjs rjs</tt> toolchain\nruntime may be tested using the <tt>calmjs karma</tt> runtime provided by the\n<tt>calmjs.dev</tt> package.  Given a finalized <tt>example.js</tt> that\nimplements the features provided by the <tt>example</tt> package, the\nartifact may be tested with the tests provided by the <tt>example</tt>\npackage using the following command:</p>\n<pre>$ calmjs karma run <span class=\"se\">\\\n</span>    -t calmjs.rjs <span class=\"se\">\\\n</span>    --artifact<span class=\"o\">=</span>example.js <span class=\"se\">\\\n</span>    example\n</pre>\n<p>The above command invokes the standalone Karma runner using the\n<tt>calmjs.rjs</tt> settings to test against the <tt>example.js</tt> artifact\nfile, using the tests provided by the <tt>example</tt> package.  The test\nexecution is similar to the one during the development process.</p>\n</div>\n<div id=\"declare-prebuilt-javascript-artifacts-for-python-packages\">\n<h4>Declare prebuilt JavaScript artifacts for Python packages</h4>\n<p>Finally, to complete the Python package deployment story, the process\nshould include the automatic generation and inclusion of the JavaScript\nartifacts in the resulting Python wheel.  This can be achieved by\nspecifying an entry in the <tt>calmjs.artifacts</tt> registry, with the key\nbeing the filename of the artifact and the value being the import\nlocation to a builder.  A default builder function provided at\n<tt>calmjs.rjs.artifact:complete_rjs</tt> will enable the generation of a\ncomplete RequireJS artifact for the Python package.  For example:</p>\n<pre><span class=\"k\">[calmjs.artifacts]</span>\n<span class=\"na\">example.package.rjs.js</span> <span class=\"o\">=</span> <span class=\"s\">calmjs.rjs.artifact:complete_rjs</span>\n</pre>\n<p>Once those entry points are installed, running <tt>calmjs artifact build\nexample.package</tt> will make use of the RequireJS toolchain and build the\nartifact at <tt>example.package.rjs.js</tt> inside the <tt>calmjs_artifacts</tt>\ndirectory within the metadata directory for <tt>example.package</tt>.\nAlternatively, for solution more integrated with <tt>setuptools</tt>, the\n<tt>setup</tt> function in <tt>setup.py</tt> should also enable the\n<tt>build_calmjs_artifacts</tt> flag such that <tt>setup.py build</tt> will also\ntrigger the building process.  This is useful for automatically\ngenerating and including the artifact as part of the wheel building\nprocess.  Consider this <tt>setup.py</tt>:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'example.package'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ... other required fields truncated</span>\n    <span class=\"n\">build_calmjs_artifacts</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"\n    # ... other entry points truncated\n    [calmjs.module]\n    example.package = example.package\n\n    [calmjs.artifacts]\n    example.package.rjs.js = calmjs.rjs.artifact:complete_rjs\n    \"\"\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Building the wheel using <tt>setup.py</tt> may result in something like this.\nNote that the execution of <tt>r.js</tt> was part of the process and that the\nmetadata (egg-info) directory was then built into the wheel.</p>\n<pre>$ python setup.py bdist_wheel\nrunning bdist_wheel\nrunning build\n...\nrunning build_calmjs_artifacts\nautomatically picked registries ['calmjs.module'] for sourcepaths\nusing loaderplugin registry 'calmjs.rjs.loader_plugin'\n...\n/src/example.package.egg-info/calmjs_artifacts/example.package.rjs.js\n----------------\n/tmp/tmpm_2jf151/build/example/package/index.js\n...\nrunning install_egg_info\nCopying src/example.package.egg-info to build/.../wheel/example.package...\nrunning install_scripts\ncreating build/.../wheel/example.package-1.0.dist-info/WHEEL\n</pre>\n<p>For testing the package artifact, the following entry point should also\nbe specified under the <tt>calmjs.artifacts.tests</tt> registry, such that\nrunning <tt>calmjs artifact karma example.package</tt> will execute the\nJavaScript tests declared by <tt>example.package</tt> against the artifacts\nthat were declared in <tt>calmjs.artifacts</tt>.</p>\n<pre><span class=\"k\">[calmjs.artifacts.tests]</span>\n<span class=\"na\">example.package.rjs.js</span> <span class=\"o\">=</span> <span class=\"s\">calmjs.rjs.artifact:test_complete_rjs</span>\n</pre>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h3>Troubleshooting</h3>\n<p>The following are some known issues with regards to this package and its\nintegration with other Python/Node.js packages.</p>\n<div id=\"when-calling-calmjs-rjs-on-a-package-got-enoent\">\n<h4>When calling <tt>calmjs rjs</tt> on a package, got <tt>ENOENT</tt></h4>\n<p>Typically this is caused by source files from the source package or\nregistry invoking <tt>require</tt> a JavaScript module that is not available\nin the build directory.  One possible cause through the <tt>calmjs</tt>\nframework is that the Python package failed to declare <tt>extras_calmjs</tt>\nthat it might require, or that explicit map method and/or source\nregistry that was selected did not result in all required sources be\nloaded into the build directory.</p>\n<p>If the missing source files are intended, applying the <tt><span class=\"pre\">--empty</span></tt> or\nthe <tt><span class=\"pre\">-e</span></tt> flag to the <tt>rjs</tt> tool will stub out all the missing\nmodules from the bundle; do note that this will result in the generated\nartifact bundle not having all the required modules for its execution.\nThe resulting artifact bundle should be used in conjunction with the\nother artifact bundles that provide the result of the required\ndependencies.</p>\n</div>\n<div id=\"rjsruntimeerror-unable-to-locate-r-js\">\n<h4>RJSRuntimeError: unable to locate \u2018r.js\u2019</h4>\n<p>This means the current Node.js environment is missing the requirejs\npackage from <tt>npm</tt>; either install it manually with it or through\n<tt>calmjs</tt> on this package.  If a given Python package is required to use\nrequirejs to generate the package, its <tt>package_json</tt> should declare\nthat, or declare dependency on <tt>calmjs.rjs</tt>.</p>\n</div>\n<div id=\"userwarning-unknown-distribution-option\">\n<h4>UserWarning: Unknown distribution option:</h4>\n<p>During setup and installation using the development method, if this\nwarning message is shown, please ensure the egg metadata is correctly\ngenerated by running <tt>python setup.py egg_info</tt> in the source\ndirectory, as the package <tt>calmjs</tt> was not available when the setup\nscript was initially executed.</p>\n</div>\n</div>\n<div id=\"contribute\">\n<h3>Contribute</h3>\n<ul>\n<li>Issue Tracker: <a href=\"https://github.com/calmjs/calmjs.rjs/issues\" rel=\"nofollow\">https://github.com/calmjs/calmjs.rjs/issues</a></li>\n<li>Source Code: <a href=\"https://github.com/calmjs/calmjs.rjs\" rel=\"nofollow\">https://github.com/calmjs/calmjs.rjs</a></li>\n</ul>\n</div>\n<div id=\"legal\">\n<h3>Legal</h3>\n<p>The <tt>calmjs.rjs</tt> package is part of the calmjs project.</p>\n<p>The calmjs project is copyright (c) 2016 Auckland Bioengineering\nInstitute, University of Auckland.  <tt>calmjs.rjs</tt> is licensed under the\nterms of the GPLv2 or later.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id5\">\n<h3>2.0.1 (2018-05-03)</h3>\n<ul>\n<li>Update the export_target production and usage of working_dir to be\ninline with what is expected by <tt><span class=\"pre\">calmjs-3.1.0</span></tt>. [\n<a href=\"https://github.com/calmjs/calmjs.rjs/issues/3\" rel=\"nofollow\">#3</a>\n]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>2.0.0 (2018-01-12)</h3>\n<ul>\n<li>Support for <tt><span class=\"pre\">calmjs-3.0.0</span></tt> features and breaking changes.</li>\n<li>Loader plugin framework migrated upstream; downstream packages that\nmake use of them should no longer declare explicit entries in\n<tt>extras_calmjs</tt> to permit wider portability.</li>\n<li>Removed usage of <tt>slimit</tt> in favor of the capabilities now provided\nby <tt>calmjs</tt> and <tt>calmjs.parse</tt>.</li>\n<li>The flags for the <tt>calmjs rjs</tt> runtime have been changed to remove\nsome naming confusion, mainly due to sourcemap and also to maintain\nconsistency with other <tt>calmjs</tt> tools.<ul>\n<li><tt><span class=\"pre\">--bundle-map-method</span></tt> is deprecated in favor for\n<tt><span class=\"pre\">--bundlepath-method</span></tt>; will be fully removed by 3.0.0</li>\n<li><tt><span class=\"pre\">--source-map-method</span></tt> is deprecated in favor for\n<tt><span class=\"pre\">--sourcepath-method</span></tt>; will be fully removed by 3.0.0</li>\n</ul>\n</li>\n<li>Provide a generic package-level artifact builder for the\n<tt>calmjs.artifacts</tt> registry along with the respective tester for the\n<tt>calmjs.artifacts.tests</tt> registry.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.0.2 (2017-05-22)</h3>\n<ul>\n<li>Corrected the issue where plugins that have been unmapped using the\n<tt>empty:</tt> scheme triggering <tt>FileNotFoundError</tt>.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.0.1 (2017-01-27)</h3>\n<ul>\n<li>Load the non-test files in deps also, instead as part of the tests to\navoid automatic inclusion.</li>\n<li>Test files should start with the name test as per convention.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.0.0 (2016-11-18)</h3>\n<ul>\n<li>Initial implementation that brings in the support of the production of\nAMD artifacts (bundles) from JavaScript sources included with Python\npackages (along with their declared dependencies through <tt>npm</tt> or\nother supported tools) through the calmjs framework.</li>\n<li>Enabled the <tt>calmjs rjs</tt> tool entry point.</li>\n<li>Also provide integration with <tt>calmjs.dev</tt> by correcting the correct\nhooks so that this package can be used as an advice package for the\nexecution of tests against artifacts generated through this package.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3829412, "releases": {"0.0": [], "1.0.0": [{"comment_text": "", "digests": {"md5": "f4b02a4aa8e2dc33cc053e1b71d9e15e", "sha256": "730dacefd2874233e86b2176aed3e4dfcd3d780ee4f2ffca4b0a169d1ac980dd"}, "downloads": -1, "filename": "calmjs.rjs-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f4b02a4aa8e2dc33cc053e1b71d9e15e", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 71987, "upload_time": "2016-11-18T14:42:50", "upload_time_iso_8601": "2016-11-18T14:42:50.775657Z", "url": "https://files.pythonhosted.org/packages/43/51/abe86243665881b0a0ea1dcc8d069403b7f1899cb6b88185040679c39e57/calmjs.rjs-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d32b3b82b8249b0fee64ba391cadaee", "sha256": "0610a66f1399affb9f64a6990953eb4db0fd11dba06cc09e71cd52382bd4e552"}, "downloads": -1, "filename": "calmjs.rjs-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8d32b3b82b8249b0fee64ba391cadaee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62711, "upload_time": "2016-11-19T03:53:27", "upload_time_iso_8601": "2016-11-19T03:53:27.827765Z", "url": "https://files.pythonhosted.org/packages/01/2b/e0f3995caee7a5f3598f390fc6c2a1880bfb124e3951a146992277c32bc2/calmjs.rjs-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6dcdc3713e5501db2115f268bae55d96", "sha256": "3eaaca5c92c487fda2e35783f5fc317dbf09c8fae2d4bdf878d65614e81967c0"}, "downloads": -1, "filename": "calmjs.rjs-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6dcdc3713e5501db2115f268bae55d96", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 73550, "upload_time": "2017-01-27T02:27:38", "upload_time_iso_8601": "2017-01-27T02:27:38.540667Z", "url": "https://files.pythonhosted.org/packages/9a/96/a28e803cdc5def13511d08d9962f1ef1f6777d571383c33e0292d27dccfd/calmjs.rjs-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3cf37f2f884ad177aa93f3abc1c9248", "sha256": "2b2832ce350fa97700bfe592afb6b76dc63d36720574afb4ccac620bd413b2d1"}, "downloads": -1, "filename": "calmjs.rjs-1.0.1.zip", "has_sig": false, "md5_digest": "e3cf37f2f884ad177aa93f3abc1c9248", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84346, "upload_time": "2017-01-27T02:27:41", "upload_time_iso_8601": "2017-01-27T02:27:41.755829Z", "url": "https://files.pythonhosted.org/packages/9c/c3/f458f759f11703480930d62ce1c09735a15b5bcb4fa43475850267e42757/calmjs.rjs-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "11528daa74e06c06ad5d96b0ce27253b", "sha256": "e65cfeea964b4108454f1925f8006d7c2c3145668ff2a79d81862a1723a0effa"}, "downloads": -1, "filename": "calmjs.rjs-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "11528daa74e06c06ad5d96b0ce27253b", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 74184, "upload_time": "2017-05-22T09:05:04", "upload_time_iso_8601": "2017-05-22T09:05:04.890434Z", "url": "https://files.pythonhosted.org/packages/a5/97/49140303f6fa078d1bd0d8f09ac6e229062650ce6d856499577b383e6a83/calmjs.rjs-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "831e656ad4858c86f5d8abe3fbfb2c19", "sha256": "83f9098d9b165fa70cdd723bdd97702b9bb22df9442710886ccd4aa4d793c43a"}, "downloads": -1, "filename": "calmjs.rjs-1.0.2.zip", "has_sig": false, "md5_digest": "831e656ad4858c86f5d8abe3fbfb2c19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85104, "upload_time": "2017-05-22T09:05:01", "upload_time_iso_8601": "2017-05-22T09:05:01.331821Z", "url": "https://files.pythonhosted.org/packages/90/0d/821cfe51eb8f7e9913d452295cd9474fc57fc3091e47bd9328877209d439/calmjs.rjs-1.0.2.zip", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "481c106661c8f55e857e1b020600b9f7", "sha256": "9c65777cc8086b075568ee6ea577c245245eb2eacdf922954355e73381962cdf"}, "downloads": -1, "filename": "calmjs.rjs-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "481c106661c8f55e857e1b020600b9f7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78503, "upload_time": "2018-01-12T07:13:29", "upload_time_iso_8601": "2018-01-12T07:13:29.571006Z", "url": "https://files.pythonhosted.org/packages/be/de/a7b69ce7e6ef84b7029a2fa7a257762e101eeb968acba17b26298852f413/calmjs.rjs-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3f68867ec81a84c3b4a4877aeb5afc5", "sha256": "2436bea717fd66f1f35a2862493f8bdfb1ee7e293c22e6510290be62fb47fcb7"}, "downloads": -1, "filename": "calmjs.rjs-2.0.0.zip", "has_sig": false, "md5_digest": "e3f68867ec81a84c3b4a4877aeb5afc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91805, "upload_time": "2018-01-12T07:13:32", "upload_time_iso_8601": "2018-01-12T07:13:32.026237Z", "url": "https://files.pythonhosted.org/packages/ef/82/1c7abd8149e247a93084cfe591fceaee05308ea81d678827bfff0dfc8768/calmjs.rjs-2.0.0.zip", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "1b4a1ae3b2d975e144bcba1b3bc74d00", "sha256": "91f5d0a5191f9ff4f063960495fafb8f4d2c9da415d1d13710e36d67ce0d504d"}, "downloads": -1, "filename": "calmjs.rjs-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b4a1ae3b2d975e144bcba1b3bc74d00", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 67478, "upload_time": "2018-05-03T03:06:49", "upload_time_iso_8601": "2018-05-03T03:06:49.995301Z", "url": "https://files.pythonhosted.org/packages/ac/63/7c45280d4a8db9a625fbba3b453c973c7cdc666768ffb7f7b098c41f328a/calmjs.rjs-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9b97028b1fac5442635bfa43499877a", "sha256": "e2b507da36c52a5042621f56ba2aad24ab0f7e34eee11c6b2e4935c4700310ff"}, "downloads": -1, "filename": "calmjs.rjs-2.0.1.zip", "has_sig": false, "md5_digest": "c9b97028b1fac5442635bfa43499877a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92208, "upload_time": "2018-05-03T03:06:52", "upload_time_iso_8601": "2018-05-03T03:06:52.141851Z", "url": "https://files.pythonhosted.org/packages/80/56/2085e2c26005b3d6bbca34743b57f9931a56e9f2c9b9db000a955d53fcc1/calmjs.rjs-2.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1b4a1ae3b2d975e144bcba1b3bc74d00", "sha256": "91f5d0a5191f9ff4f063960495fafb8f4d2c9da415d1d13710e36d67ce0d504d"}, "downloads": -1, "filename": "calmjs.rjs-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1b4a1ae3b2d975e144bcba1b3bc74d00", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 67478, "upload_time": "2018-05-03T03:06:49", "upload_time_iso_8601": "2018-05-03T03:06:49.995301Z", "url": "https://files.pythonhosted.org/packages/ac/63/7c45280d4a8db9a625fbba3b453c973c7cdc666768ffb7f7b098c41f328a/calmjs.rjs-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9b97028b1fac5442635bfa43499877a", "sha256": "e2b507da36c52a5042621f56ba2aad24ab0f7e34eee11c6b2e4935c4700310ff"}, "downloads": -1, "filename": "calmjs.rjs-2.0.1.zip", "has_sig": false, "md5_digest": "c9b97028b1fac5442635bfa43499877a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92208, "upload_time": "2018-05-03T03:06:52", "upload_time_iso_8601": "2018-05-03T03:06:52.141851Z", "url": "https://files.pythonhosted.org/packages/80/56/2085e2c26005b3d6bbca34743b57f9931a56e9f2c9b9db000a955d53fcc1/calmjs.rjs-2.0.1.zip", "yanked": false}], "timestamp": "Thu May  7 22:35:36 2020"}