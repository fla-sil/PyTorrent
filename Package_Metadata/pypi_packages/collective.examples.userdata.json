{"info": {"author": "Kees Hink", "author_email": "plone-developers@lists.sourceforge.net", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python"], "description": "Introduction\n============\n\nWith Plone 5, the registration and personal information forms are z3c.form_ forms.\nThese can be extended to allow any additional data to be collected on the forms.\n\nThis product aims to show how you could extend or modify the default schema\nprovided by plone.app.users_, and add new fields to the registration form.\n\nIf you are using a Plone version previous to Plone 5, then you need to look at the older version of\n`collective.examples.userdata here <https://pypi.python.org/pypi/collective.examples.userdata/0.4>`__.\n\nNote for upgraders\n------------------\n\nPreviously, your ``IEnhancedUserDataSchema`` was registered via. a\n``IUserDataSchemaProvider`` utility you registered in\n``componentregistry.xml``. If this is something you did, then be sure to remove\nthis utility, ideally before upgrading. \n`wildcard.fixpersistentutilities <https://pypi.python.org/pypi/wildcard.fixpersistentutilities/>`__\ncould help here.\n\nAdding custom userdata fields\n-----------------------------\n\nThe code below is snippets from the source code from the package. Look there to\nsee more examples.\n\nCreating a schema\n~~~~~~~~~~~~~~~~~\n\nWe create a schema for our fields in the same manner as any other schema::\n\n    class IEnhancedUserDataSchema(model.Schema):\n        country = schema.TextLine(\n            title=_(u'label_country', default=u'Country'),\n            description=_(u'help_country',\n                          default=u\"Fill in the country you live in.\"),\n            required=False,\n            )\n\nExtending the userdata form\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo add this schema to the form, we need to define a form extender for\n``UserDataPanel`` which allows us to register any new fields we want to::\n\n    class UserDataPanelExtender(extensible.FormExtender):\n        adapts(Interface, IDefaultBrowserLayer, UserDataPanel)\n        def update(self):\n            fields = field.Fields(IEnhancedUserDataSchema)\n            fields = fields.omit('accept') # Users have already accepted.\n            self.add(fields)\n\nAnd register this in configure.zcml::\n\n    <adapter\n      factory=\".userdataschema.UserDataPanelExtender\"\n      provides=\"plone.z3cform.fieldsets.interfaces.IFormExtender\" />\n\nStoring / retrieving custom fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo store the values alongside default fields, we need to add fields to\n``profiles/default/memberdata_properties.xml``. For example::\n\n    <?xml version=\"1.0\"?>\n    <object name=\"portal_memberdata\" meta_type=\"Plone Memberdata Tool\">\n      <property name=\"country\" type=\"string\"></property>\n    </object>\n\nWe don't define the \"accept\" field here, since that is only for signup.\nThey have to have accepted to have a user in the system.\n\nBefore values can be read and written by the form, there needs to be a data\nmanager to fetch the values. The default manager will read/write any field\ndefined in the schema, so most of the work is done for you::\n\n    from plone.app.users.browser.account import AccountPanelSchemaAdapter\n\n    class EnhancedUserDataSchemaAdapter(AccountPanelSchemaAdapter):\n        schema = IEnhancedUserDataSchema\n\nIf you want to do something different, add a property for that field to\noverride the default behavior. The source code shows this for the ``birthdate``\nfield.\n\nFinally, register the data manager in ZCML::\n\n    <adapter\n      provides=\".userdataschema.IEnhancedUserDataSchema\"\n      for=\"plone.app.layout.navigation.interfaces.INavigationRoot\"\n      factory=\".adapter.EnhancedUserDataSchemaAdapter\"\n      />\n\nExtending the registration form\n-------------------------------\n\nTo extend the registration form, you have 2 choices. Either using the\n@@member-registration view to manipulate which of the default fields are\nvisible, or for full control you can register another form extender.\n\nDefining registration field FormExtenders\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRegistering an extender for ``BaseRegistrationForm`` will allow us to add\nfields at any point to the registration form. This is done in the same way\nas before::\n\n    class RegistrationPanelExtender(extensible.FormExtender):\n        adapts(Interface, IDefaultBrowserLayer, BaseRegistrationForm)\n        def update(self):\n            fields = field.Fields(IEnhancedUserDataSchema)\n            #NB: Not omitting the accept field this time, we want people to check it\n            self.add(fields)\n\nAnd register this in configure.zcml::\n\n    <adapter\n      factory=\".userdataschema.RegistrationPanelExtender\"\n      provides=\"plone.z3cform.fieldsets.interfaces.IFormExtender\" />\n\nThe data manager is attached to the schema, so will be shared with the user\ndata form. If we used a different schema, then we would have to define another\ndata manager too.\n\nVarious other field examples\n----------------------------\n\nThere are various other extra fields with which you could extend your users'\nprofile. In ``userdataschema.py`` you will find examples for:\n\n- a Date field (``birthdate``)\n- a Boolean field (``newsletter``)\n- a Choice field (``gender``)\n\nThe \"Accept Terms\" field\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nA special case is the ``accept`` field. This is a Boolean field which is\nrequired for signup. We implement it by adding a ``constraint`` to the schema::\n\n    def validateAccept(value):\n        if not value == True:\n            return False\n        return True\n\n    class IEnhancedUserDataSchema(IUserDataSchema):\n        # ...\n        accept = schema.Bool(\n            title=_(u'label_accept', default=u'Accept terms of use'),\n            description=_(u'help_accept',\n                          default=u\"Tick this box to indicate that you have found,\"\n                          \" read and accepted the terms of use for this site. \"),\n            required=True,\n            constraint=validateAccept,\n            )\n\nBecause this field can be ignored once registration is complete, we don't add\nit to the memberdata properties. We also hide it from the userdata forms.\n\n.. _plone.app.users: http://pypi.python.org/pypi/plone.app.users\n.. _z3c.form: https://pypi.python.org/pypi/z3c.form\n\nChangelog\n=========\n\n2.1 (2014-07-03)\n----------------\n\n- Fix broken setup.py so we generate documentation & install properly again.\n  [lentinj]\n\n\n2.0 (2014-07-03)\n----------------\n\n- Convert to show customisation of z3c.form-based plone.app.users.\n  [lentinj, vipod, thet]\n\n0.5 (unreleased)\n----------------\n\n- Nothing changed yet.\n\n\n0.4 (2013-12-18)\n----------------\n\n- Fix gender vocabulary and translate it properly. (thet)\n- Dont' overwrite existing user registration fields, just add accept and\n  country. (thet) \n- Add field \"birthyear\" for use cases where asking for the exact birth date is\n  too much. (thet)\n- Using locales directory instead of i18n and general cleanup. (thet)\n- Moved to github (Kees Hink)\n- Added German translation (Pavel Bogdanovic, 2011-10-28).\n\n0.3 (2010-09-26)\n----------------\n\n- Make the custom fields available only when the product is installed through\n  Generic Setup, by overriding the utility in componentregistry.xml (Elizabeth\n  Leddy).\n- Added a metadata.xml with a profile version.\n\n0.2 (2010-04-12)\n----------------\n\n- Override plone.app.users' adapter class, so @@personal-information will show\n  the extra fields defined in this product.\n  This requires plone.app.users >= 1.0b7.\n\n0.1 (2010-02-28)\n----------------\n\n- Initial release\n\nTo do\n=====\n\n- Uninstalling the product currently breaks the site. An uninstall step should\n  be added to take the fields that the product added out of the ZMI's user\n  properties.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/collective/collective.examples.userdata", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.examples.userdata", "package_url": "https://pypi.org/project/collective.examples.userdata/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.examples.userdata/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/collective/collective.examples.userdata"}, "release_url": "https://pypi.org/project/collective.examples.userdata/2.1/", "requires_dist": null, "requires_python": null, "summary": "Showcase for the new (Plone 4) plone.app.users IUserDataSchema. Shows how to extend the user data fields that can be selected for the registration form.", "version": "2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>With Plone 5, the registration and personal information forms are <a href=\"https://pypi.python.org/pypi/z3c.form\" rel=\"nofollow\">z3c.form</a> forms.\nThese can be extended to allow any additional data to be collected on the forms.</p>\n<p>This product aims to show how you could extend or modify the default schema\nprovided by <a href=\"http://pypi.python.org/pypi/plone.app.users\" rel=\"nofollow\">plone.app.users</a>, and add new fields to the registration form.</p>\n<p>If you are using a Plone version previous to Plone 5, then you need to look at the older version of\n<a href=\"https://pypi.python.org/pypi/collective.examples.userdata/0.4\" rel=\"nofollow\">collective.examples.userdata here</a>.</p>\n<div id=\"note-for-upgraders\">\n<h3>Note for upgraders</h3>\n<p>Previously, your <tt>IEnhancedUserDataSchema</tt> was registered via. a\n<tt>IUserDataSchemaProvider</tt> utility you registered in\n<tt>componentregistry.xml</tt>. If this is something you did, then be sure to remove\nthis utility, ideally before upgrading.\n<a href=\"https://pypi.python.org/pypi/wildcard.fixpersistentutilities/\" rel=\"nofollow\">wildcard.fixpersistentutilities</a>\ncould help here.</p>\n</div>\n<div id=\"adding-custom-userdata-fields\">\n<h3>Adding custom userdata fields</h3>\n<p>The code below is snippets from the source code from the package. Look there to\nsee more examples.</p>\n<div id=\"creating-a-schema\">\n<h4>Creating a schema</h4>\n<p>We create a schema for our fields in the same manner as any other schema:</p>\n<pre>class IEnhancedUserDataSchema(model.Schema):\n    country = schema.TextLine(\n        title=_(u'label_country', default=u'Country'),\n        description=_(u'help_country',\n                      default=u\"Fill in the country you live in.\"),\n        required=False,\n        )\n</pre>\n</div>\n<div id=\"extending-the-userdata-form\">\n<h4>Extending the userdata form</h4>\n<p>To add this schema to the form, we need to define a form extender for\n<tt>UserDataPanel</tt> which allows us to register any new fields we want to:</p>\n<pre>class UserDataPanelExtender(extensible.FormExtender):\n    adapts(Interface, IDefaultBrowserLayer, UserDataPanel)\n    def update(self):\n        fields = field.Fields(IEnhancedUserDataSchema)\n        fields = fields.omit('accept') # Users have already accepted.\n        self.add(fields)\n</pre>\n<p>And register this in configure.zcml:</p>\n<pre>&lt;adapter\n  factory=\".userdataschema.UserDataPanelExtender\"\n  provides=\"plone.z3cform.fieldsets.interfaces.IFormExtender\" /&gt;\n</pre>\n</div>\n<div id=\"storing-retrieving-custom-fields\">\n<h4>Storing / retrieving custom fields</h4>\n<p>To store the values alongside default fields, we need to add fields to\n<tt>profiles/default/memberdata_properties.xml</tt>. For example:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;object name=\"portal_memberdata\" meta_type=\"Plone Memberdata Tool\"&gt;\n  &lt;property name=\"country\" type=\"string\"&gt;&lt;/property&gt;\n&lt;/object&gt;\n</pre>\n<p>We don\u2019t define the \u201caccept\u201d field here, since that is only for signup.\nThey have to have accepted to have a user in the system.</p>\n<p>Before values can be read and written by the form, there needs to be a data\nmanager to fetch the values. The default manager will read/write any field\ndefined in the schema, so most of the work is done for you:</p>\n<pre>from plone.app.users.browser.account import AccountPanelSchemaAdapter\n\nclass EnhancedUserDataSchemaAdapter(AccountPanelSchemaAdapter):\n    schema = IEnhancedUserDataSchema\n</pre>\n<p>If you want to do something different, add a property for that field to\noverride the default behavior. The source code shows this for the <tt>birthdate</tt>\nfield.</p>\n<p>Finally, register the data manager in ZCML:</p>\n<pre>&lt;adapter\n  provides=\".userdataschema.IEnhancedUserDataSchema\"\n  for=\"plone.app.layout.navigation.interfaces.INavigationRoot\"\n  factory=\".adapter.EnhancedUserDataSchemaAdapter\"\n  /&gt;\n</pre>\n</div>\n</div>\n<div id=\"extending-the-registration-form\">\n<h3>Extending the registration form</h3>\n<p>To extend the registration form, you have 2 choices. Either using the\n@@member-registration view to manipulate which of the default fields are\nvisible, or for full control you can register another form extender.</p>\n<div id=\"defining-registration-field-formextenders\">\n<h4>Defining registration field FormExtenders</h4>\n<p>Registering an extender for <tt>BaseRegistrationForm</tt> will allow us to add\nfields at any point to the registration form. This is done in the same way\nas before:</p>\n<pre>class RegistrationPanelExtender(extensible.FormExtender):\n    adapts(Interface, IDefaultBrowserLayer, BaseRegistrationForm)\n    def update(self):\n        fields = field.Fields(IEnhancedUserDataSchema)\n        #NB: Not omitting the accept field this time, we want people to check it\n        self.add(fields)\n</pre>\n<p>And register this in configure.zcml:</p>\n<pre>&lt;adapter\n  factory=\".userdataschema.RegistrationPanelExtender\"\n  provides=\"plone.z3cform.fieldsets.interfaces.IFormExtender\" /&gt;\n</pre>\n<p>The data manager is attached to the schema, so will be shared with the user\ndata form. If we used a different schema, then we would have to define another\ndata manager too.</p>\n</div>\n</div>\n<div id=\"various-other-field-examples\">\n<h3>Various other field examples</h3>\n<p>There are various other extra fields with which you could extend your users\u2019\nprofile. In <tt>userdataschema.py</tt> you will find examples for:</p>\n<ul>\n<li>a Date field (<tt>birthdate</tt>)</li>\n<li>a Boolean field (<tt>newsletter</tt>)</li>\n<li>a Choice field (<tt>gender</tt>)</li>\n</ul>\n<div id=\"the-accept-terms-field\">\n<h4>The \u201cAccept Terms\u201d field</h4>\n<p>A special case is the <tt>accept</tt> field. This is a Boolean field which is\nrequired for signup. We implement it by adding a <tt>constraint</tt> to the schema:</p>\n<pre>def validateAccept(value):\n    if not value == True:\n        return False\n    return True\n\nclass IEnhancedUserDataSchema(IUserDataSchema):\n    # ...\n    accept = schema.Bool(\n        title=_(u'label_accept', default=u'Accept terms of use'),\n        description=_(u'help_accept',\n                      default=u\"Tick this box to indicate that you have found,\"\n                      \" read and accepted the terms of use for this site. \"),\n        required=True,\n        constraint=validateAccept,\n        )\n</pre>\n<p>Because this field can be ignored once registration is complete, we don\u2019t add\nit to the memberdata properties. We also hide it from the userdata forms.</p>\n</div>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>2.1 (2014-07-03)</h3>\n<ul>\n<li>Fix broken setup.py so we generate documentation &amp; install properly again.\n[lentinj]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.0 (2014-07-03)</h3>\n<ul>\n<li>Convert to show customisation of z3c.form-based plone.app.users.\n[lentinj, vipod, thet]</li>\n</ul>\n</div>\n<div id=\"unreleased\">\n<h3>0.5 (unreleased)</h3>\n<ul>\n<li>Nothing changed yet.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.4 (2013-12-18)</h3>\n<ul>\n<li>Fix gender vocabulary and translate it properly. (thet)</li>\n<li>Dont\u2019 overwrite existing user registration fields, just add accept and\ncountry. (thet)</li>\n<li>Add field \u201cbirthyear\u201d for use cases where asking for the exact birth date is\ntoo much. (thet)</li>\n<li>Using locales directory instead of i18n and general cleanup. (thet)</li>\n<li>Moved to github (Kees Hink)</li>\n<li>Added German translation (Pavel Bogdanovic, 2011-10-28).</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.3 (2010-09-26)</h3>\n<ul>\n<li>Make the custom fields available only when the product is installed through\nGeneric Setup, by overriding the utility in componentregistry.xml (Elizabeth\nLeddy).</li>\n<li>Added a metadata.xml with a profile version.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.2 (2010-04-12)</h3>\n<ul>\n<li>Override plone.app.users\u2019 adapter class, so @@personal-information will show\nthe extra fields defined in this product.\nThis requires plone.app.users &gt;= 1.0b7.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1 (2010-02-28)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n<div id=\"to-do\">\n<h2>To do</h2>\n<ul>\n<li>Uninstalling the product currently breaks the site. An uninstall step should\nbe added to take the fields that the product added out of the ZMI\u2019s user\nproperties.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1947118, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5fd85faec55b47e7f59a1a19af3fee2f", "sha256": "6e5aaecb5b566fc089e55b1ef85f8b47a6f29279b419ca327852db7ba9cd478f"}, "downloads": -1, "filename": "collective.examples.userdata-0.1.tar.gz", "has_sig": false, "md5_digest": "5fd85faec55b47e7f59a1a19af3fee2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12678, "upload_time": "2010-02-08T18:31:10", "upload_time_iso_8601": "2010-02-08T18:31:10.109908Z", "url": "https://files.pythonhosted.org/packages/0b/d4/d50c21bc363246319b674733597b8211b81209f33c73bef3d31e67651ced/collective.examples.userdata-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7521c1884f6bad9cdda1c3d313755e1f", "sha256": "5bde15850fb81f8e6a876bb814a3180789cb29cf348c4e6dc3e323b5177e1357"}, "downloads": -1, "filename": "collective.examples.userdata-0.2.tar.gz", "has_sig": false, "md5_digest": "7521c1884f6bad9cdda1c3d313755e1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14950, "upload_time": "2010-04-12T15:17:15", "upload_time_iso_8601": "2010-04-12T15:17:15.008690Z", "url": "https://files.pythonhosted.org/packages/57/95/849ba24c8f1ef38504623defad499d20cbcdc54034b01e305ba4a49ac233/collective.examples.userdata-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "f9bbb43dca731167c52619f5fa37c998", "sha256": "cf81849d69cb8a9aed434e9e369d6086bc38a43c84391ae69e25ab6830d4a084"}, "downloads": -1, "filename": "collective.examples.userdata-0.3.tar.gz", "has_sig": false, "md5_digest": "f9bbb43dca731167c52619f5fa37c998", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15582, "upload_time": "2010-09-26T01:31:35", "upload_time_iso_8601": "2010-09-26T01:31:35.369651Z", "url": "https://files.pythonhosted.org/packages/c5/19/6a2a8db5f0df0b07c895fbd571d63fb5d39ae0dfc12a950db918679f9a6a/collective.examples.userdata-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "eca1f28a57308ff2e8be1f86fe3dea5e", "sha256": "075ae634dc8b21055dcbc5fe6df678b1fac09dfeba2b2ed65e893f148a40d67a"}, "downloads": -1, "filename": "collective.examples.userdata-0.3.1.tar.gz", "has_sig": false, "md5_digest": "eca1f28a57308ff2e8be1f86fe3dea5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18750, "upload_time": "2011-06-06T10:41:23", "upload_time_iso_8601": "2011-06-06T10:41:23.857187Z", "url": "https://files.pythonhosted.org/packages/02/10/4c8a882af114b5b43fb2d06736ef8b53c191b8256ef6564f75ebf426be95/collective.examples.userdata-0.3.1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "3326710258bafc8d2aeef25ed904e67a", "sha256": "77bc0c7617caafb3a703f14eb77d05bf451edb7b0244f62189613ebd772e3888"}, "downloads": -1, "filename": "collective.examples.userdata-0.4.zip", "has_sig": false, "md5_digest": "3326710258bafc8d2aeef25ed904e67a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19771, "upload_time": "2013-12-18T13:41:46", "upload_time_iso_8601": "2013-12-18T13:41:46.497776Z", "url": "https://files.pythonhosted.org/packages/80/67/2000501c5e3fab14fa8d20b99f32b687ed2aa08bc703555b1414aa6bdaba/collective.examples.userdata-0.4.zip", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "229ecab08d22f1506e30cd12294e58e8", "sha256": "a507efb030389338f8f27fc9a0ae06b1d426deda65f9b878c6dafd4eae6a757d"}, "downloads": -1, "filename": "collective.examples.userdata-0.4.1.tar.gz", "has_sig": false, "md5_digest": "229ecab08d22f1506e30cd12294e58e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17697, "upload_time": "2016-02-09T09:44:24", "upload_time_iso_8601": "2016-02-09T09:44:24.259829Z", "url": "https://files.pythonhosted.org/packages/28/92/bd6883361d8382a998573413b0ede4311e62eccc12912de503a5359113b6/collective.examples.userdata-0.4.1.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "dd0eddd18ef6ce3fe8f453bc5235da79", "sha256": "e957bb8502b4ff65dcd439f0ce3e479bd88b14b1bd6d9c6e992d3117bac75b30"}, "downloads": -1, "filename": "collective.examples.userdata-2.0.zip", "has_sig": false, "md5_digest": "dd0eddd18ef6ce3fe8f453bc5235da79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23048, "upload_time": "2014-07-03T19:45:33", "upload_time_iso_8601": "2014-07-03T19:45:33.656451Z", "url": "https://files.pythonhosted.org/packages/2b/15/40cb1765ebae1768365787579952f4c5fb4aea87a7ec79ff23cf1bebb79b/collective.examples.userdata-2.0.zip", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "ba1956a0eeb0fb30a9c84a1eadb91aec", "sha256": "53bb69c9113547ab1f8d2ac592b7d9521e6fc9a6a8bc519493c63eecee39bce6"}, "downloads": -1, "filename": "collective.examples.userdata-2.1.zip", "has_sig": false, "md5_digest": "ba1956a0eeb0fb30a9c84a1eadb91aec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33417, "upload_time": "2014-07-03T20:22:01", "upload_time_iso_8601": "2014-07-03T20:22:01.564967Z", "url": "https://files.pythonhosted.org/packages/99/34/ad7ad2396623af74cc879262ab336a49884811e093e957ba0e3b0497a650/collective.examples.userdata-2.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba1956a0eeb0fb30a9c84a1eadb91aec", "sha256": "53bb69c9113547ab1f8d2ac592b7d9521e6fc9a6a8bc519493c63eecee39bce6"}, "downloads": -1, "filename": "collective.examples.userdata-2.1.zip", "has_sig": false, "md5_digest": "ba1956a0eeb0fb30a9c84a1eadb91aec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33417, "upload_time": "2014-07-03T20:22:01", "upload_time_iso_8601": "2014-07-03T20:22:01.564967Z", "url": "https://files.pythonhosted.org/packages/99/34/ad7ad2396623af74cc879262ab336a49884811e093e957ba0e3b0497a650/collective.examples.userdata-2.1.zip", "yanked": false}], "timestamp": "Thu May  7 22:17:55 2020"}