{"info": {"author": "Ryan Turner", "author_email": "rdturnermtl@github.com", "bugtrack_url": null, "classifiers": ["Framework :: Hypothesis", "Framework :: Pytest", "Intended Audience :: Developers", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Testing"], "description": "===================\nHypothesis GU Funcs\n===================\n\n.. image:: https://api.travis-ci.com/uber/hypothesis-gufunc.png?token=RSemjpisB7uiZv78DVwd&branch=master\n    :target: https://travis-ci.com/uber/hypothesis-gufunc\n\nThis project is experimental and the APIs are not considered stable.\n\nOnly `Python>=3.6` is officially supported, but older versions of Python likely work as well.\n\nThis package includes support for strategies which generate arguments to\nfunctions that follow the numpy general universal function API. So, it can\nautomatically generate the matrices with shapes that follow the shape\nconstraints. For example, to generate test inputs for `np.dot`, one can use,\n\n.. code-block:: python\n\n  import numpy as np\n  from hypothesis import given\n  from hypothesis.strategies import floats\n  from hypothesis_gufunc.gufunc import gufunc_args\n\n  easy_floats = floats(min_value=-10, max_value=10)\n\n  @given(gufunc_args('(m,n),(n,p)->(m,p)', dtype=np.float_, elements=easy_floats))\n  def test_np_dot(args):\n      x, y = args\n      assert np.allclose(np.dot(x, y), np.dot(y.T, x.T).T)\n\n  test_np_dot()  # Run the test\n\nWe also allow for adding extra dimensions that follow the numpy broadcasting\nconventions. This allows one to test that the broadcasting follows the\nvectorization conventions:\n\n.. code-block:: python\n\n  @given(gufunc_args('(m,n),(n,p)->(m,p)', dtype=np.float_, elements=easy_floats, max_dims_extra=3))\n  def test_np_matmul(args):\n      x, y = args\n      f_vec = np.vectorize(np.matmul, signature='(m,n),(n,p)->(m,p)', otypes=[np.float_])\n      assert np.allclose(np.matmul(x, y), f_vec(x, y))\n\n  test_np_matmul()  # Run the test\n\nProviding `max_dims_extra=3` gives up to 3 broadcast compatible dimensions on each of the arguments.\n\n------------------------\nQuick Start/Installation\n------------------------\n\nSimply install with pip:\n\n.. code-block::\n\n  pip install hypothesis-gufunc\n\nIf one would like the same pinned requirements we use during testing, then one can install from the repo with:\n\n.. code-block::\n\n  git clone git@github.com:uber/hypothesis-gufunc.git\n  cd hypothesis-gufunc\n  pip install -r requirements/base.txt\n  pip install -e .\n\n-----------------\nRunning the Tests\n-----------------\n\nThe tests for this package can be run by first doing a `cd` to its root directory and then\n\n.. code-block::\n\n  ./test.sh\n\nThe script creates a conda environment using the requirements found in `requirements/test.txt`.\n\n---------------------\nHypothesis for Xarray\n---------------------\n\nThis package also contains an extension to hypothesis to generate xarray data structures.\n\nTo install the package with the xarray dependencies install it with pip as\n\n.. code-block::\n\n  pip install hypothesis-gufunc[xarray]\n\nOnce installed, one can generate a data array as follows:\n\n.. code-block:: python\n\n  from hypothesis.strategies import integers, lists\n  from hypothesis_gufunc.extra.xr import fixed_dataarrays\n\n  S = fixed_dataarrays((\"a\", \"b\"), coords_st={\"a\": lists(integers(0, 3))})\n  S.example()\n\nHere, `coords_st` allows one to specify a custom strategy for the coordinates on a per-dimension basis. Likewise, if\none has known coordinates one can call `fixed_coords_dataarrays`; or\n`dataarrays` if one wants both the dimensions and coordinates determined by the\nstrategy.\n\nThe package also has the ability to generate a dataset:\n\n.. code-block:: python\n\n  from hypothesis_gufunc.extra.xr import fixed_datasets\n\n  S = fixed_datasets({5: (\"a\", \"b\"), \"bar\": (\"b\"), \"baz\": ()}, coords_st={\"a\": lists(integers(0, 3))})\n  S.example()\n\nOne can use `fixed_coords_datasets` when the coordinates are determined; or simply\n`datasets` to have both the dimensions and coordinates generated.\n\n-----\nLinks\n-----\n\nThe `source <https://github.com/uber/hypothesis-gufunc>`_ is hosted on GitHub.\n\nThe `documentation <https://hypothesis-gufunc.readthedocs.io/en/latest/>`_ is hosted at Read the Docs.\n\nThe main `hypothesis project <https://hypothesis.readthedocs.io/en/latest/>`_.\n\nA description of the numpy\n`Generalized Universal Function API <https://docs.scipy.org/doc/numpy/reference/c-api.generalized-ufuncs.html>`_.\n\nLikewise, the numpy broadcasting rules are described\n`here <https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html>`_.\n\nThe `xarray <http://xarray.pydata.org/en/stable/index.html>`_ project describes data arrays and datasets.\n\n-------\nLicense\n-------\n\nThis project is licensed under the Apache 2 License - see the LICENSE file for details.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uber/hypothesis-gufunc", "keywords": "", "license": "Apache v2", "maintainer": "", "maintainer_email": "", "name": "hypothesis-gufunc", "package_url": "https://pypi.org/project/hypothesis-gufunc/", "platform": "any", "project_url": "https://pypi.org/project/hypothesis-gufunc/", "project_urls": {"Documentation": "https://hypothesis-gufunc.readthedocs.io", "Homepage": "https://github.com/uber/hypothesis-gufunc"}, "release_url": "https://pypi.org/project/hypothesis-gufunc/0.0.6/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Extension to hypothesis to generate inputs for general universal (GU) numpy functions.", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/uber/hypothesis-gufunc\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.com/uber/hypothesis-gufunc.png?token=RSemjpisB7uiZv78DVwd&amp;branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f5675490ce574e16e88859c4031dd7318295d0c/68747470733a2f2f6170692e7472617669732d63692e636f6d2f756265722f6879706f7468657369732d677566756e632e706e673f746f6b656e3d5253656d6a706973423775695a76373844567764266272616e63683d6d6173746572\"></a>\n<p>This project is experimental and the APIs are not considered stable.</p>\n<p>Only <cite>Python&gt;=3.6</cite> is officially supported, but older versions of Python likely work as well.</p>\n<p>This package includes support for strategies which generate arguments to\nfunctions that follow the numpy general universal function API. So, it can\nautomatically generate the matrices with shapes that follow the shape\nconstraints. For example, to generate test inputs for <cite>np.dot</cite>, one can use,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hypothesis</span> <span class=\"kn\">import</span> <span class=\"n\">given</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hypothesis.strategies</span> <span class=\"kn\">import</span> <span class=\"n\">floats</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hypothesis_gufunc.gufunc</span> <span class=\"kn\">import</span> <span class=\"n\">gufunc_args</span>\n\n<span class=\"n\">easy_floats</span> <span class=\"o\">=</span> <span class=\"n\">floats</span><span class=\"p\">(</span><span class=\"n\">min_value</span><span class=\"o\">=-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">gufunc_args</span><span class=\"p\">(</span><span class=\"s1\">'(m,n),(n,p)-&gt;(m,p)'</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float_</span><span class=\"p\">,</span> <span class=\"n\">elements</span><span class=\"o\">=</span><span class=\"n\">easy_floats</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_np_dot</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n    <span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n\n<span class=\"n\">test_np_dot</span><span class=\"p\">()</span>  <span class=\"c1\"># Run the test</span>\n</pre>\n<p>We also allow for adding extra dimensions that follow the numpy broadcasting\nconventions. This allows one to test that the broadcasting follows the\nvectorization conventions:</p>\n<pre><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">gufunc_args</span><span class=\"p\">(</span><span class=\"s1\">'(m,n),(n,p)-&gt;(m,p)'</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float_</span><span class=\"p\">,</span> <span class=\"n\">elements</span><span class=\"o\">=</span><span class=\"n\">easy_floats</span><span class=\"p\">,</span> <span class=\"n\">max_dims_extra</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_np_matmul</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n    <span class=\"n\">f_vec</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vectorize</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">matmul</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"s1\">'(m,n),(n,p)-&gt;(m,p)'</span><span class=\"p\">,</span> <span class=\"n\">otypes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float_</span><span class=\"p\">])</span>\n    <span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">matmul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">f_vec</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"n\">test_np_matmul</span><span class=\"p\">()</span>  <span class=\"c1\"># Run the test</span>\n</pre>\n<p>Providing <cite>max_dims_extra=3</cite> gives up to 3 broadcast compatible dimensions on each of the arguments.</p>\n<div id=\"quick-start-installation\">\n<h2>Quick Start/Installation</h2>\n<p>Simply install with pip:</p>\n<pre>pip install hypothesis-gufunc\n</pre>\n<p>If one would like the same pinned requirements we use during testing, then one can install from the repo with:</p>\n<pre>git clone git@github.com:uber/hypothesis-gufunc.git\ncd hypothesis-gufunc\npip install -r requirements/base.txt\npip install -e .\n</pre>\n</div>\n<div id=\"running-the-tests\">\n<h2>Running the Tests</h2>\n<p>The tests for this package can be run by first doing a <cite>cd</cite> to its root directory and then</p>\n<pre>./test.sh\n</pre>\n<p>The script creates a conda environment using the requirements found in <cite>requirements/test.txt</cite>.</p>\n</div>\n<div id=\"hypothesis-for-xarray\">\n<h2>Hypothesis for Xarray</h2>\n<p>This package also contains an extension to hypothesis to generate xarray data structures.</p>\n<p>To install the package with the xarray dependencies install it with pip as</p>\n<pre>pip install hypothesis-gufunc[xarray]\n</pre>\n<p>Once installed, one can generate a data array as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hypothesis.strategies</span> <span class=\"kn\">import</span> <span class=\"n\">integers</span><span class=\"p\">,</span> <span class=\"n\">lists</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hypothesis_gufunc.extra.xr</span> <span class=\"kn\">import</span> <span class=\"n\">fixed_dataarrays</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">fixed_dataarrays</span><span class=\"p\">((</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">),</span> <span class=\"n\">coords_st</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"n\">lists</span><span class=\"p\">(</span><span class=\"n\">integers</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))})</span>\n<span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">example</span><span class=\"p\">()</span>\n</pre>\n<p>Here, <cite>coords_st</cite> allows one to specify a custom strategy for the coordinates on a per-dimension basis. Likewise, if\none has known coordinates one can call <cite>fixed_coords_dataarrays</cite>; or\n<cite>dataarrays</cite> if one wants both the dimensions and coordinates determined by the\nstrategy.</p>\n<p>The package also has the ability to generate a dataset:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hypothesis_gufunc.extra.xr</span> <span class=\"kn\">import</span> <span class=\"n\">fixed_datasets</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">fixed_datasets</span><span class=\"p\">({</span><span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">),</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"b\"</span><span class=\"p\">),</span> <span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"p\">()},</span> <span class=\"n\">coords_st</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"n\">lists</span><span class=\"p\">(</span><span class=\"n\">integers</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))})</span>\n<span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">example</span><span class=\"p\">()</span>\n</pre>\n<p>One can use <cite>fixed_coords_datasets</cite> when the coordinates are determined; or simply\n<cite>datasets</cite> to have both the dimensions and coordinates generated.</p>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<p>The <a href=\"https://github.com/uber/hypothesis-gufunc\" rel=\"nofollow\">source</a> is hosted on GitHub.</p>\n<p>The <a href=\"https://hypothesis-gufunc.readthedocs.io/en/latest/\" rel=\"nofollow\">documentation</a> is hosted at Read the Docs.</p>\n<p>The main <a href=\"https://hypothesis.readthedocs.io/en/latest/\" rel=\"nofollow\">hypothesis project</a>.</p>\n<p>A description of the numpy\n<a href=\"https://docs.scipy.org/doc/numpy/reference/c-api.generalized-ufuncs.html\" rel=\"nofollow\">Generalized Universal Function API</a>.</p>\n<p>Likewise, the numpy broadcasting rules are described\n<a href=\"https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html\" rel=\"nofollow\">here</a>.</p>\n<p>The <a href=\"http://xarray.pydata.org/en/stable/index.html\" rel=\"nofollow\">xarray</a> project describes data arrays and datasets.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This project is licensed under the Apache 2 License - see the LICENSE file for details.</p>\n</div>\n\n          </div>"}, "last_serial": 6633762, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "86408b97d4dd1cbcaa4ff3b71c3e4dc6", "sha256": "fb5b0c42265a72034effd9c94b393a858d0946f9bcf224c156b33b3503b09855"}, "downloads": -1, "filename": "hypothesis_gufunc-0.0.3.tar.gz", "has_sig": false, "md5_digest": "86408b97d4dd1cbcaa4ff3b71c3e4dc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11606, "upload_time": "2019-08-16T23:48:46", "upload_time_iso_8601": "2019-08-16T23:48:46.685986Z", "url": "https://files.pythonhosted.org/packages/3d/1e/3465353b81eb0c70ac496d218a4829eba0f17ef217abb58b1d9f2ce71cd3/hypothesis_gufunc-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "9a2a204669b8944d315aff54bf6465f8", "sha256": "03486bdb984d3f72de5da3b2621e4f10c71a5084c296cf3b0c79de7093d1dbb0"}, "downloads": -1, "filename": "hypothesis_gufunc-0.0.4.tar.gz", "has_sig": false, "md5_digest": "9a2a204669b8944d315aff54bf6465f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12314, "upload_time": "2019-08-18T19:25:18", "upload_time_iso_8601": "2019-08-18T19:25:18.684471Z", "url": "https://files.pythonhosted.org/packages/f9/e8/693c813c6c0c2285150b59cf9027265ad5751655882bec21a3b836f02f44/hypothesis_gufunc-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "0bc86aee1687498238233e0e52ce6692", "sha256": "5a4e03b210c16cc7932c7dd82fb44dd8870011af0ebdceac3114ab0c15c7c2b6"}, "downloads": -1, "filename": "hypothesis_gufunc-0.0.5.tar.gz", "has_sig": false, "md5_digest": "0bc86aee1687498238233e0e52ce6692", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16565, "upload_time": "2019-09-24T00:33:16", "upload_time_iso_8601": "2019-09-24T00:33:16.923223Z", "url": "https://files.pythonhosted.org/packages/73/9b/826b0e54dd45aab73b5a50495dbe3e5b973027f6a1be4aa40eb1e4be3433/hypothesis_gufunc-0.0.5.tar.gz", "yanked": false}], "0.0.5rc2": [{"comment_text": "", "digests": {"md5": "a48843c85b3b26f2ae36a80b295533f0", "sha256": "6ced15c20752fc887da63bc393ab6af788626cff513a36858f2ca823ce3ae1ba"}, "downloads": -1, "filename": "hypothesis_gufunc-0.0.5rc2.tar.gz", "has_sig": false, "md5_digest": "a48843c85b3b26f2ae36a80b295533f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16558, "upload_time": "2019-09-06T20:07:22", "upload_time_iso_8601": "2019-09-06T20:07:22.949643Z", "url": "https://files.pythonhosted.org/packages/04/8f/facddaae6f818a08010947b13b2e9f6fc63a767985cd8922827d7091fcc2/hypothesis_gufunc-0.0.5rc2.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "df419a0e4d159d6ff7732200a4b7dbe0", "sha256": "76150691c0f2e8e6f8a059428f2b3b79d8ed3c4f8c5b1ee3e7a5db5ae87c3c66"}, "downloads": -1, "filename": "hypothesis_gufunc-0.0.6.tar.gz", "has_sig": false, "md5_digest": "df419a0e4d159d6ff7732200a4b7dbe0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17068, "upload_time": "2020-02-14T21:44:57", "upload_time_iso_8601": "2020-02-14T21:44:57.735451Z", "url": "https://files.pythonhosted.org/packages/9a/95/8eea1980b26d8e8a651f6476f8547ff858b26a151ef3e063044dbf627f44/hypothesis_gufunc-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df419a0e4d159d6ff7732200a4b7dbe0", "sha256": "76150691c0f2e8e6f8a059428f2b3b79d8ed3c4f8c5b1ee3e7a5db5ae87c3c66"}, "downloads": -1, "filename": "hypothesis_gufunc-0.0.6.tar.gz", "has_sig": false, "md5_digest": "df419a0e4d159d6ff7732200a4b7dbe0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17068, "upload_time": "2020-02-14T21:44:57", "upload_time_iso_8601": "2020-02-14T21:44:57.735451Z", "url": "https://files.pythonhosted.org/packages/9a/95/8eea1980b26d8e8a651f6476f8547ff858b26a151ef3e063044dbf627f44/hypothesis_gufunc-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:25 2020"}