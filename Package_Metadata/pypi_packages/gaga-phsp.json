{"info": {"author": "David Sarrut", "author_email": "david.sarrut@creatis.insa-lyon.fr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\nGAGA = GAN for GATE\n\n```pip install gaga-phsp```\n\nScripts associated with the publication :\nPhys Med Biol. 2019 doi: https://doi.org/10.1088/1361-6560/ab3fc1\nGenerative adversarial networks (GAN) for compact beam source modelling in Monte Carlo simulations\nSarrut D, Krah N, L\u00e9tang JM.\nhttps://www.ncbi.nlm.nih.gov/pubmed/31470418\n\nA method is proposed and evaluated to model large and inconvenient phase space files used in Monte Carlo simulations by a compact Generative Adversarial Network (GAN). The GAN is trained based on a phase space dataset to create a neural network, called Generator (G), allowing G to mimic the multidimensional data distribution of the phase space. At the end of the training process, G is stored with about 0.5 million weights, around 10MB, instead of few GB of the initial file. Particles are then generated with G to replace the phase space dataset.&amp;#13; &amp;#13; This concept is applied to beam models from linear accelerators (linacs) and from brachytherapy seed models. Simulations using particles from the reference phase space on one hand and those generated by the GAN on the other hand were compared. 3D distributions of deposited energy obtained from source distributions generated by the GAN were close to the reference ones, with less than 1\\% of voxel-by-voxel relative difference. Sharp parts such as the brachytherapy emission lines in the energy spectra were not perfectly modeled by the GAN. Detailed statistical properties and limitations of the GAN-generated particles still require further investigation, but the proposed exploratory approach is already promising and paves the way for a wide range of applications\n\nExamples :\nhttps://github.com/OpenGATE/GateContrib/tree/master/dosimetry/gaga-phsp\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dsarrut/gaga", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gaga-phsp", "package_url": "https://pypi.org/project/gaga-phsp/", "platform": "", "project_url": "https://pypi.org/project/gaga-phsp/", "project_urls": {"Homepage": "https://github.com/dsarrut/gaga"}, "release_url": "https://pypi.org/project/gaga-phsp/0.5.2/", "requires_dist": ["tqdm", "colorama", "click", "scipy"], "requires_python": "", "summary": "Python tools for GATE GAN simulations", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>GAGA = GAN for GATE</p>\n<p><code>pip install gaga-phsp</code></p>\n<p>Scripts associated with the publication :\nPhys Med Biol. 2019 doi: <a href=\"https://doi.org/10.1088/1361-6560/ab3fc1\" rel=\"nofollow\">https://doi.org/10.1088/1361-6560/ab3fc1</a>\nGenerative adversarial networks (GAN) for compact beam source modelling in Monte Carlo simulations\nSarrut D, Krah N, L\u00e9tang JM.\n<a href=\"https://www.ncbi.nlm.nih.gov/pubmed/31470418\" rel=\"nofollow\">https://www.ncbi.nlm.nih.gov/pubmed/31470418</a></p>\n<p>A method is proposed and evaluated to model large and inconvenient phase space files used in Monte Carlo simulations by a compact Generative Adversarial Network (GAN). The GAN is trained based on a phase space dataset to create a neural network, called Generator (G), allowing G to mimic the multidimensional data distribution of the phase space. At the end of the training process, G is stored with about 0.5 million weights, around 10MB, instead of few GB of the initial file. Particles are then generated with G to replace the phase space dataset.&amp;#13; &amp;#13; This concept is applied to beam models from linear accelerators (linacs) and from brachytherapy seed models. Simulations using particles from the reference phase space on one hand and those generated by the GAN on the other hand were compared. 3D distributions of deposited energy obtained from source distributions generated by the GAN were close to the reference ones, with less than 1% of voxel-by-voxel relative difference. Sharp parts such as the brachytherapy emission lines in the energy spectra were not perfectly modeled by the GAN. Detailed statistical properties and limitations of the GAN-generated particles still require further investigation, but the proposed exploratory approach is already promising and paves the way for a wide range of applications</p>\n<p>Examples :\n<a href=\"https://github.com/OpenGATE/GateContrib/tree/master/dosimetry/gaga-phsp\" rel=\"nofollow\">https://github.com/OpenGATE/GateContrib/tree/master/dosimetry/gaga-phsp</a></p>\n\n          </div>"}, "last_serial": 6926650, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "b33311b6c85f01da211e8b9150aee552", "sha256": "56375d98455ca1b2b78790352bd0d34b315a9f8a9867b21f690f6029cd22ad36"}, "downloads": -1, "filename": "gaga_phsp-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b33311b6c85f01da211e8b9150aee552", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8597, "upload_time": "2019-12-06T06:33:15", "upload_time_iso_8601": "2019-12-06T06:33:15.449045Z", "url": "https://files.pythonhosted.org/packages/28/01/94f8cc9502012c86946bb3c795c3b99b55bf58d075d4b7d55fe0a487ca77/gaga_phsp-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdfa5911b181b9a5e69f84ae82404aef", "sha256": "ae3d1e8094ded9105c415648d391c51787e8b7ec51575008fdf302addd487199"}, "downloads": -1, "filename": "gaga-phsp-0.5.tar.gz", "has_sig": false, "md5_digest": "cdfa5911b181b9a5e69f84ae82404aef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6117, "upload_time": "2019-12-06T06:33:17", "upload_time_iso_8601": "2019-12-06T06:33:17.722832Z", "url": "https://files.pythonhosted.org/packages/3c/cb/fd53b1e7c798f6dd8617c9f20f36a65c9ac4ba1ad142553997b59d96f245/gaga-phsp-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "dfd62069878e451afba8538bd47f4915", "sha256": "bea7fa654eabca24c51cec1eca2a3393833aed0d96bbaacce974416c557a56ee"}, "downloads": -1, "filename": "gaga_phsp-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dfd62069878e451afba8538bd47f4915", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8644, "upload_time": "2019-12-13T06:34:22", "upload_time_iso_8601": "2019-12-13T06:34:22.096392Z", "url": "https://files.pythonhosted.org/packages/93/54/c7c5d8846af259df79405ade0458a5a13695be14b9e78e3eb6a0dde4c1de/gaga_phsp-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a8ce6d93894bb3903874f7546ddde66", "sha256": "307c409b90c97bb85f66a1af098301e28b9e4be6725979829c3454e0052da5d2"}, "downloads": -1, "filename": "gaga-phsp-0.5.1.tar.gz", "has_sig": false, "md5_digest": "7a8ce6d93894bb3903874f7546ddde66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6117, "upload_time": "2019-12-13T06:34:24", "upload_time_iso_8601": "2019-12-13T06:34:24.702933Z", "url": "https://files.pythonhosted.org/packages/ba/f1/ed91b92ad92fcac21d3d3fee3834f7e2673bec0d058b556e97e998905dec/gaga-phsp-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "d7eeeaff66d345b94cf0622c70e2b79b", "sha256": "06fe7b81d6cc5b1c2a6ebffb6676b5e6e008ad182435978532f3885f66945f61"}, "downloads": -1, "filename": "gaga_phsp-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d7eeeaff66d345b94cf0622c70e2b79b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23076, "upload_time": "2020-04-01T10:10:00", "upload_time_iso_8601": "2020-04-01T10:10:00.263675Z", "url": "https://files.pythonhosted.org/packages/80/1f/3c4132fe62162863a51bbda0891172b0cfe9c2d43196370ffa40e7ff6867/gaga_phsp-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e18b8e08d9c17adf0594901751181fd", "sha256": "b63d76d40cecbccfa812885869a325ea4932de4e66451ef0fd722d75e46e8db5"}, "downloads": -1, "filename": "gaga-phsp-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3e18b8e08d9c17adf0594901751181fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15056, "upload_time": "2020-04-01T10:10:02", "upload_time_iso_8601": "2020-04-01T10:10:02.103940Z", "url": "https://files.pythonhosted.org/packages/15/62/6691917e634cbdfc654e83432c797981ca3c522a406532f31a125b2415ac/gaga-phsp-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7eeeaff66d345b94cf0622c70e2b79b", "sha256": "06fe7b81d6cc5b1c2a6ebffb6676b5e6e008ad182435978532f3885f66945f61"}, "downloads": -1, "filename": "gaga_phsp-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d7eeeaff66d345b94cf0622c70e2b79b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23076, "upload_time": "2020-04-01T10:10:00", "upload_time_iso_8601": "2020-04-01T10:10:00.263675Z", "url": "https://files.pythonhosted.org/packages/80/1f/3c4132fe62162863a51bbda0891172b0cfe9c2d43196370ffa40e7ff6867/gaga_phsp-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e18b8e08d9c17adf0594901751181fd", "sha256": "b63d76d40cecbccfa812885869a325ea4932de4e66451ef0fd722d75e46e8db5"}, "downloads": -1, "filename": "gaga-phsp-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3e18b8e08d9c17adf0594901751181fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15056, "upload_time": "2020-04-01T10:10:02", "upload_time_iso_8601": "2020-04-01T10:10:02.103940Z", "url": "https://files.pythonhosted.org/packages/15/62/6691917e634cbdfc654e83432c797981ca3c522a406532f31a125b2415ac/gaga-phsp-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:21 2020"}