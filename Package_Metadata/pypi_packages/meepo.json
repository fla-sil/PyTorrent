{"info": {"author": "Lx Yu", "author_email": "i@lxyu.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development"], "description": "=====\nMeepo\n=====\n\n.. image:: http://img.shields.io/travis/eleme/meepo/master.svg?style=flat\n   :target: https://travis-ci.org/eleme/meepo\n\n.. image:: http://img.shields.io/pypi/v/meepo.svg?style=flat\n   :target: https://pypi.python.org/pypi/meepo\n\n.. image:: http://img.shields.io/pypi/dm/meepo.svg?style=flat\n   :target: https://pypi.python.org/pypi/meepo\n\nMeepo is event sourcing and event broadcasting for databases.\n\nDocumentation: https://meepo.readthedocs.org/\n\n\nInstallation\n============\n\nInstall with pip\n\n.. code:: bash\n\n    $ pip install meepo\n\nTo use mysql binlog as event source, install additional requires with\n\n.. code:: bash\n\n    $ pip install meepo[mysqlbinlog]\n\n\nFeatures\n========\n\nMeepo can publish the table events from database to the outside, so it can\nbe  used to do a lot of interesting things, including:\n\n- cache invalidation\n\n- replication to RDBS / NoSQL / SearchEngine\n\n- event sourcing\n\n- logging and auditing\n\n- realtime analytics\n\n- notifications pushing\n\n\nIntro\n=====\n\n``meepo`` is event sourcing and event broadcasting for databases, it follows\ndatabase table events from ``sqlalchemy`` and ``mysql binlog``, and publish\nthem to subscribers.\n\nMySQL Pub\n---------\n\n``mysql_pub`` event flow::\n\n                                                       +---------------------+\n                                                       |                     |\n                                                   +--->  table_write event  |\n                                                   |   |                     |\n                                                   |   +---------------------+\n                                                   |\n    +--------------------+      +---------------+  |\n    |                    |      |               |  |   +---------------------+\n    |        mysql       |      |   meepo.pub   |  |   |                     |\n    |                    +------>               +--+--->  table_update event |\n    |  row-based binlog  |      |   mysql_pub   |  |   |                     |\n    |                    |      |               |  |   +---------------------+\n    +--------------------+      +---------------+  |\n                                                   |\n                                                   |   +---------------------+\n                                                   |   |                     |\n                                                   +--->  table_delete event |\n                                                       |                     |\n                                                       +---------------------+\n\n\nMySQL Pub use row-based mysql binlog as events source, and transfer them into\ntable_action events. ``mysql_pub`` generates an accurate event stream with one\npk per event.\n\nFor example, the  following sql:\n\n.. code-block:: sql\n\n    INSERT INTO test (data) VALUES ('a');\n    INSERT INTO test (data) VALUES ('b'), ('c'), ('d');\n    UPDATE test SET data = 'aa' WHERE id = 1;\n    UPDATE test SET data = 'bb' WHERE id = 2;\n    UPDATE test SET data = 'cc' WHERE id != 1;\n    DELETE FROM test WHERE id != 1;\n    DELETE FROM test WHERE id = 1;\n\nGenerates the following events:\n\n::\n\n    test_write 1\n    test_write 2\n    test_write 3\n    test_write 4\n    test_update 1\n    test_update 2\n    test_update 2\n    test_update 3\n    test_update 4\n    test_delete 2\n    test_delete 3\n    test_delete 4\n    test_delete 1\n\n\nSQLAlchemy Pub\n==============\n\n``sqlalchemy_pub`` event flow::\n\n    +------------------+\n    |                  |\n    |    meepo.pub     |\n    |                  |\n    |  sqlalchemy_pub  |                                       +---------------------+\n    |                  |     +-----------------------+         |                     |\n    +---------+--------+     |                       |     +--->  table_write event  |\n              |              |      before_flush     |     |   |                     |\n        hook  |           +-->                       |     |   +---------------------+\n              |           |  |  record model states  |     |\n    +---------v--------+  |  |                       |     |\n    |                  |  |  +-----------+-----------+     |   +---------------------+\n    |    sqlalchemy    |  |              |                 |   |                     |\n    |                  +--+              |              +------>  table_update event |\n    |  session events  |                 |              |  |   |                     |\n    |                  |     +-----------v-----------+  |  |   +---------------------+\n    +------------------+     |                       |  |  |\n                             |     after_commit      |  |  |\n                             |                       +--+  |   +---------------------+\n                             |  record model states  |     |   |                     |\n                             |                       |     +--->  table_delete event |\n                             +-----------------------+         |                     |\n                                                               +---------------------+\n\n\n\n``SQLAlchemy`` is a ORM layer above database, it uses ``session`` to maintain\nmodel instances states before the data flush to database, and flush them to\ndatabase in commit.\n\nSo ``meepo`` will hook into the event system, record all the instances in\n``session.new``, ``session.dirty``, ``session.deleted`` in ``before_flush`` event,\nthen publish the table_action event after commit issued.\n\nFor example, the  following code:\n\n.. code-block:: python\n\n    class Test(Base):\n        __tablename__ = \"test\"\n        id = Column(Integer, primary_key=True)\n        data = Column(String)\n\n    t_1 = Test(id=1, data='a')\n    session.add(t_1)\n    session.commit()\n\n    t_2 = Test(id=2, data='b')\n    t_3 = Test(id=3, data='c')\n    session.add(t_2)\n    session.add(t_3)\n    session.add(t_4)\n    session.commit()\n\n    t_2.data = \"x\"\n    session.commit()\n\n    session.delete(t_3)\n    session.commit()\n\nGenerates the following events:\n\n::\n\n    test_write 1\n    test_write 2\n    test_write 3\n    test_update 2\n    test_delete 3\n\n\nExamples\n========\n\nRefer to ``meepo/examples/`` for more examples.\n\n\nContribute\n==========\n\n1. Fork the repo and make changes.\n\n2. Write a test which shows a bug was fixed or the feature works as expected.\n\n3. Make sure travis-ci test succeed.\n\n4. Send pull request.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eleme/meepo", "keywords": "eventsourcing event sourcing replication cache elasticsearch", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "meepo", "package_url": "https://pypi.org/project/meepo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/meepo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/eleme/meepo"}, "release_url": "https://pypi.org/project/meepo/0.1.9/", "requires_dist": null, "requires_python": null, "summary": "event sourcing for databases.", "version": "0.1.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/eleme/meepo\" rel=\"nofollow\"><img alt=\"http://img.shields.io/travis/eleme/meepo/master.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da18ad7860fa36b2f94900f3585f36ff2b8dc232/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f656c656d652f6d6565706f2f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/meepo\" rel=\"nofollow\"><img alt=\"http://img.shields.io/pypi/v/meepo.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52ab319e3a6e6ca60dab916c4f1db912f434dc99/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f6d6565706f2e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/meepo\" rel=\"nofollow\"><img alt=\"http://img.shields.io/pypi/dm/meepo.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/435fbf2cef9895e719c3d94b7e9a48f9c2b82099/687474703a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d6565706f2e7376673f7374796c653d666c6174\"></a>\n<p>Meepo is event sourcing and event broadcasting for databases.</p>\n<p>Documentation: <a href=\"https://meepo.readthedocs.org/\" rel=\"nofollow\">https://meepo.readthedocs.org/</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install with pip</p>\n<pre>$ pip install meepo\n</pre>\n<p>To use mysql binlog as event source, install additional requires with</p>\n<pre>$ pip install meepo<span class=\"o\">[</span>mysqlbinlog<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>Meepo can publish the table events from database to the outside, so it can\nbe  used to do a lot of interesting things, including:</p>\n<ul>\n<li>cache invalidation</li>\n<li>replication to RDBS / NoSQL / SearchEngine</li>\n<li>event sourcing</li>\n<li>logging and auditing</li>\n<li>realtime analytics</li>\n<li>notifications pushing</li>\n</ul>\n</div>\n<div id=\"intro\">\n<h2>Intro</h2>\n<p><tt>meepo</tt> is event sourcing and event broadcasting for databases, it follows\ndatabase table events from <tt>sqlalchemy</tt> and <tt>mysql binlog</tt>, and publish\nthem to subscribers.</p>\n<div id=\"mysql-pub\">\n<h3>MySQL Pub</h3>\n<p><tt>mysql_pub</tt> event flow:</p>\n<pre>                                                   +---------------------+\n                                                   |                     |\n                                               +---&gt;  table_write event  |\n                                               |   |                     |\n                                               |   +---------------------+\n                                               |\n+--------------------+      +---------------+  |\n|                    |      |               |  |   +---------------------+\n|        mysql       |      |   meepo.pub   |  |   |                     |\n|                    +------&gt;               +--+---&gt;  table_update event |\n|  row-based binlog  |      |   mysql_pub   |  |   |                     |\n|                    |      |               |  |   +---------------------+\n+--------------------+      +---------------+  |\n                                               |\n                                               |   +---------------------+\n                                               |   |                     |\n                                               +---&gt;  table_delete event |\n                                                   |                     |\n                                                   +---------------------+\n</pre>\n<p>MySQL Pub use row-based mysql binlog as events source, and transfer them into\ntable_action events. <tt>mysql_pub</tt> generates an accurate event stream with one\npk per event.</p>\n<p>For example, the  following sql:</p>\n<pre><span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">test</span> <span class=\"p\">(</span><span class=\"k\">data</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">test</span> <span class=\"p\">(</span><span class=\"k\">data</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'d'</span><span class=\"p\">);</span>\n<span class=\"k\">UPDATE</span> <span class=\"n\">test</span> <span class=\"k\">SET</span> <span class=\"k\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'aa'</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"k\">UPDATE</span> <span class=\"n\">test</span> <span class=\"k\">SET</span> <span class=\"k\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'bb'</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"k\">UPDATE</span> <span class=\"n\">test</span> <span class=\"k\">SET</span> <span class=\"k\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'cc'</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"k\">DELETE</span> <span class=\"k\">FROM</span> <span class=\"n\">test</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"k\">DELETE</span> <span class=\"k\">FROM</span> <span class=\"n\">test</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</pre>\n<p>Generates the following events:</p>\n<pre>test_write 1\ntest_write 2\ntest_write 3\ntest_write 4\ntest_update 1\ntest_update 2\ntest_update 2\ntest_update 3\ntest_update 4\ntest_delete 2\ntest_delete 3\ntest_delete 4\ntest_delete 1\n</pre>\n</div>\n</div>\n<div id=\"sqlalchemy-pub\">\n<h2>SQLAlchemy Pub</h2>\n<p><tt>sqlalchemy_pub</tt> event flow:</p>\n<pre>+------------------+\n|                  |\n|    meepo.pub     |\n|                  |\n|  sqlalchemy_pub  |                                       +---------------------+\n|                  |     +-----------------------+         |                     |\n+---------+--------+     |                       |     +---&gt;  table_write event  |\n          |              |      before_flush     |     |   |                     |\n    hook  |           +--&gt;                       |     |   +---------------------+\n          |           |  |  record model states  |     |\n+---------v--------+  |  |                       |     |\n|                  |  |  +-----------+-----------+     |   +---------------------+\n|    sqlalchemy    |  |              |                 |   |                     |\n|                  +--+              |              +------&gt;  table_update event |\n|  session events  |                 |              |  |   |                     |\n|                  |     +-----------v-----------+  |  |   +---------------------+\n+------------------+     |                       |  |  |\n                         |     after_commit      |  |  |\n                         |                       +--+  |   +---------------------+\n                         |  record model states  |     |   |                     |\n                         |                       |     +---&gt;  table_delete event |\n                         +-----------------------+         |                     |\n                                                           +---------------------+\n</pre>\n<p><tt>SQLAlchemy</tt> is a ORM layer above database, it uses <tt>session</tt> to maintain\nmodel instances states before the data flush to database, and flush them to\ndatabase in commit.</p>\n<p>So <tt>meepo</tt> will hook into the event system, record all the instances in\n<tt>session.new</tt>, <tt>session.dirty</tt>, <tt>session.deleted</tt> in <tt>before_flush</tt> event,\nthen publish the table_action event after commit issued.</p>\n<p>For example, the  following code:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Test</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"test\"</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n\n<span class=\"n\">t_1</span> <span class=\"o\">=</span> <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">t_1</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"n\">t_2</span> <span class=\"o\">=</span> <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"n\">t_3</span> <span class=\"o\">=</span> <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">t_2</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">t_3</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">t_4</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"n\">t_2</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s2\">\"x\"</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">t_3</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>Generates the following events:</p>\n<pre>test_write 1\ntest_write 2\ntest_write 3\ntest_update 2\ntest_delete 3\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Refer to <tt>meepo/examples/</tt> for more examples.</p>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<ol>\n<li>Fork the repo and make changes.</li>\n<li>Write a test which shows a bug was fixed or the feature works as expected.</li>\n<li>Make sure travis-ci test succeed.</li>\n<li>Send pull request.</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 1321551, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "3afbfcc4c9c20a1ddafac69b76cbe92e", "sha256": "73414648efea0461413ebc7ad82bad2f2f0647025decd0d7134aac596c01bd1a"}, "downloads": -1, "filename": "meepo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3afbfcc4c9c20a1ddafac69b76cbe92e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9003, "upload_time": "2014-08-07T03:52:59", "upload_time_iso_8601": "2014-08-07T03:52:59.088575Z", "url": "https://files.pythonhosted.org/packages/96/a7/e2e65983e286ba2e33e822cfb1bbe894bea799d38ab324dd7dd526e50dca/meepo-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a79c3c00aaf9c391500c1e1b6ce66753", "sha256": "683ec137a6b993e91caeab978678ff12496e767f317ab9741991950330f70ee4"}, "downloads": -1, "filename": "meepo-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a79c3c00aaf9c391500c1e1b6ce66753", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8989, "upload_time": "2014-08-15T06:57:26", "upload_time_iso_8601": "2014-08-15T06:57:26.287477Z", "url": "https://files.pythonhosted.org/packages/af/a3/6731e438eb7d10fa2392aef34b9e185c78941e3846313d45eb99baab9f78/meepo-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "45e5d5730f07c97914a99a7c163e4290", "sha256": "15f4f51c7988e7fd8050643b088c24f2da618265fa8038ffc4922c56798dae82"}, "downloads": -1, "filename": "meepo-0.1.3.tar.gz", "has_sig": false, "md5_digest": "45e5d5730f07c97914a99a7c163e4290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9228, "upload_time": "2014-08-29T10:16:40", "upload_time_iso_8601": "2014-08-29T10:16:40.131401Z", "url": "https://files.pythonhosted.org/packages/4c/1a/f63b2dacf7e4da864c4bc4524dea1b68f06ba743f50ec22b8a67cc685d6e/meepo-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a916ac4429917f279d886ad99d3b30e1", "sha256": "b17d8184e95a0f9fb6204cf36a6c00d7a19cef076538c4221dc44b9f3fd64cba"}, "downloads": -1, "filename": "meepo-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a916ac4429917f279d886ad99d3b30e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9814, "upload_time": "2014-09-02T10:28:14", "upload_time_iso_8601": "2014-09-02T10:28:14.060324Z", "url": "https://files.pythonhosted.org/packages/fd/40/cc4512f4296d5055f43d08d30f96726cfec425f4cb0f7ff440198c778858/meepo-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "36f7319d6b82318023628a86ba88236d", "sha256": "caf391f1f825f9321da30c2d8dcf44f33623f6bea2486cea0d954b1c7f1486e4"}, "downloads": -1, "filename": "meepo-0.1.5.tar.gz", "has_sig": false, "md5_digest": "36f7319d6b82318023628a86ba88236d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10175, "upload_time": "2014-09-12T08:51:24", "upload_time_iso_8601": "2014-09-12T08:51:24.027405Z", "url": "https://files.pythonhosted.org/packages/49/b1/dab19e5c897441b4314353c417b3c5e4eb07cb9e5482bdc62ee94ea6c7dd/meepo-0.1.5.tar.gz", "yanked": false}], "0.1.5.1": [{"comment_text": "", "digests": {"md5": "13b9765695b1e2fff0f7860794f0323a", "sha256": "2a994ea537e296276e62e9445c48e2e1d0519f45b23dc2b438228ed8c9971bd3"}, "downloads": -1, "filename": "meepo-0.1.5.1.tar.gz", "has_sig": false, "md5_digest": "13b9765695b1e2fff0f7860794f0323a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10191, "upload_time": "2014-09-16T08:51:42", "upload_time_iso_8601": "2014-09-16T08:51:42.683623Z", "url": "https://files.pythonhosted.org/packages/9b/94/f4b5d96aab14912c08d2682bdbee3f4419946ac31ac7f07412b17fee6695/meepo-0.1.5.1.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "8805c90e492ca0dbbe6260bb0303d6d3", "sha256": "0e766bee5ee879be6ff0342057c551822375c69a90374defea5bd85213f319e1"}, "downloads": -1, "filename": "meepo-0.1.6.tar.gz", "has_sig": false, "md5_digest": "8805c90e492ca0dbbe6260bb0303d6d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10916, "upload_time": "2014-09-24T15:55:33", "upload_time_iso_8601": "2014-09-24T15:55:33.373516Z", "url": "https://files.pythonhosted.org/packages/ff/4b/69b6412d584bb550b7cd6e120490aa8be5465546246c90794c11b20dd1c7/meepo-0.1.6.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "a4466d9fdf1d82eaf3c3f9a361cfa0db", "sha256": "2a29786a9a6aec3e719668b166ce44d7fabbe59a3378b6fcc3a2a2e11ec89f81"}, "downloads": -1, "filename": "meepo-0.1.8.tar.gz", "has_sig": false, "md5_digest": "a4466d9fdf1d82eaf3c3f9a361cfa0db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12354, "upload_time": "2014-11-07T09:27:15", "upload_time_iso_8601": "2014-11-07T09:27:15.321125Z", "url": "https://files.pythonhosted.org/packages/54/65/db48b18e14c1c573c89e86d6344d559bcce30e3c6bcb13beb256ef2f3be4/meepo-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "9da8a1c0f86b3f14f7d3a27cd5b3c042", "sha256": "fae12e791a4e6ff7d2da4bbad1ca7076273de4e2eecb89ad2d05c3985482dba3"}, "downloads": -1, "filename": "meepo-0.1.9.tar.gz", "has_sig": false, "md5_digest": "9da8a1c0f86b3f14f7d3a27cd5b3c042", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13608, "upload_time": "2014-11-26T10:42:12", "upload_time_iso_8601": "2014-11-26T10:42:12.456244Z", "url": "https://files.pythonhosted.org/packages/e8/c3/5a9f7fe60612808e8ea5013661083f6afd1b8c00863454da23254fd05166/meepo-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9da8a1c0f86b3f14f7d3a27cd5b3c042", "sha256": "fae12e791a4e6ff7d2da4bbad1ca7076273de4e2eecb89ad2d05c3985482dba3"}, "downloads": -1, "filename": "meepo-0.1.9.tar.gz", "has_sig": false, "md5_digest": "9da8a1c0f86b3f14f7d3a27cd5b3c042", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13608, "upload_time": "2014-11-26T10:42:12", "upload_time_iso_8601": "2014-11-26T10:42:12.456244Z", "url": "https://files.pythonhosted.org/packages/e8/c3/5a9f7fe60612808e8ea5013661083f6afd1b8c00863454da23254fd05166/meepo-0.1.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:31 2020"}