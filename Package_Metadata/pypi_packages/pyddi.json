{"info": {"author": "Lerato Sebokolodi", "author_email": "mll.sebokolodi@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# pyddi\n\n### Description \n\nThis tool is designed to identify regions in an image that require direction-dependent calibration. \n \n### Installation\n\nInstallation from source, working directory where source is checked out\n\n    pip install .\n\nThis package is available on PYPI, allowing\n\n    pip install pyddi\n\n### The Technique:\n\nThis tool carries out the following steps:\n\n1. It searches for pixels in an image/sources in the sky model with high signal-to-noise ratio.   \n2. For computation purposes, pixels separated by a few beams are grouped. The position and intensity of the brightest pixel is returned for each group.  \n3. Computes the local variance around pixels from 2 or sources from 1, and selects those with high local variance.   \n4. If the user provides a PSF image, the PSF is correlated with each source/region. those with high correlation factor are selected.\n5. Lastly, the tool writes out a Tigger model containing the source/pixel positions that made it through step 3 or 4. \n\n    5.1 However, a user can supply an actual sky model and the tool will cross match with above model, and tag sources in this former model as 'dE'.\n  \n    5.2 Or, alternatively, a user can specify whether they want their actual sky model to be used for the identification rather than pixels from an image, in which case, the sources in the sky model will be updated with tags 'dE'. \n    \n    5.3 If a sky model is not supplied, source a model with positions will be returned. This model should not be used for anything except the positions.\n\n### Implementation  \n\nFor help: pyddi  -h    \n\n    Finds the direction subject to direction-dependent effects.  \n  \n    optional arguments:      \n       -h, --help            show this help message and exit\n       -i IMAGE, --img IMAGE    \n                 Image of interest. Required.\n       -p PSF_IMAGE, --psf PSF_IMAGE   \n                 The psf image. Default=None.\n       -c CATALOG, --cat CATALOG   \n                  Sky model as LSM/txt. Default=None. Must be in Tigger  \n                  format: \"#format:name, ra_d, dec_d, i\"   \n       -fth FLUX_THRESHOLD, --flux-thresh FLUX_THRESHOLD   \n                  Flux threshold. Regions in an image with flux > fth *\n                  noise are considered. Default=10\n       -vth VARIANCE_THRESHOLD, --variance-thresh VARIANCE_THRESHOLD   \n                  Local variance threshold. Sources with varinace > vth   \n                  * noise are considered. Defautl=5.   \n       -vsize VARIANCE_SIZE, --variance-size VARIANCE_SIZE   \n                  The size of the region to compute the local variance.  \n                  E.g vsize=10, gives a region of size = 10 *   \n                  resolution. The resolution is in pixels. Default=10   \n       -cth CORRELATION_THRESHOLD, --correlation-thresh CORRELATION_THRESHOLD   \n                  Correlation threshold. Sources with correlation factor   \n                  > cth are considered. Default=0.5    \n       -csize CORRELATION_SIZE, --correlation-size CORRELATION_SIZE   \n                  The size of the region to compute correlation. see   \n                  vsize. Default=5   \n       -gpix GROUP_PIXELS, --group-pixels GROUP_PIXELS   \n                  The size of the region to group the pixels, in terms   \n                  of psf-size. The psf is in degrees. e.g gpix=20, gives   \n                  20xpsf. Default=20   \n       -rexcl, RADIUS_EXCLUDE, --exclude-radius RADIUS_EXCLUDE\n                The radius to exclude in arcseconds. default=0.\n       -usec USE_CATALOG, --use-catalog USE_CATALOG   \n                  Use -cat for the identification and not only -i.    \n       -o OUTPUT_PREFIX, -prefix OUTPUT_PREFIX    \n                  The prefix for the output file containing directions   \n                  in RA, DEC both in degrees, and peak flux of the   \n                  pixels. Default=None  \n\nExample Run:\n\n    pyddi -i examples/kat7restored.fits -c examples/kat7restored.gaul -p examples/kat7psf.fits -vth 10 -cth 0.7 -gpix 50  -usec -o test-output", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Sebokolodi/pyddi", "keywords": "", "license": "GNU GPL v3", "maintainer": "", "maintainer_email": "", "name": "pyddi", "package_url": "https://pypi.org/project/pyddi/", "platform": "", "project_url": "https://pypi.org/project/pyddi/", "project_urls": {"Homepage": "https://github.com/Sebokolodi/pyddi"}, "release_url": "https://pypi.org/project/pyddi/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Identifies Sources that Require Direction-Dependent Calibration.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyddi</h1>\n<h3>Description</h3>\n<p>This tool is designed to identify regions in an image that require direction-dependent calibration.</p>\n<h3>Installation</h3>\n<p>Installation from source, working directory where source is checked out</p>\n<pre><code>pip install .\n</code></pre>\n<p>This package is available on PYPI, allowing</p>\n<pre><code>pip install pyddi\n</code></pre>\n<h3>The Technique:</h3>\n<p>This tool carries out the following steps:</p>\n<ol>\n<li>\n<p>It searches for pixels in an image/sources in the sky model with high signal-to-noise ratio.</p>\n</li>\n<li>\n<p>For computation purposes, pixels separated by a few beams are grouped. The position and intensity of the brightest pixel is returned for each group.</p>\n</li>\n<li>\n<p>Computes the local variance around pixels from 2 or sources from 1, and selects those with high local variance.</p>\n</li>\n<li>\n<p>If the user provides a PSF image, the PSF is correlated with each source/region. those with high correlation factor are selected.</p>\n</li>\n<li>\n<p>Lastly, the tool writes out a Tigger model containing the source/pixel positions that made it through step 3 or 4.</p>\n<p>5.1 However, a user can supply an actual sky model and the tool will cross match with above model, and tag sources in this former model as 'dE'.</p>\n<p>5.2 Or, alternatively, a user can specify whether they want their actual sky model to be used for the identification rather than pixels from an image, in which case, the sources in the sky model will be updated with tags 'dE'.</p>\n<p>5.3 If a sky model is not supplied, source a model with positions will be returned. This model should not be used for anything except the positions.</p>\n</li>\n</ol>\n<h3>Implementation</h3>\n<p>For help: pyddi  -h</p>\n<pre><code>Finds the direction subject to direction-dependent effects.  \n\noptional arguments:      \n   -h, --help            show this help message and exit\n   -i IMAGE, --img IMAGE    \n             Image of interest. Required.\n   -p PSF_IMAGE, --psf PSF_IMAGE   \n             The psf image. Default=None.\n   -c CATALOG, --cat CATALOG   \n              Sky model as LSM/txt. Default=None. Must be in Tigger  \n              format: \"#format:name, ra_d, dec_d, i\"   \n   -fth FLUX_THRESHOLD, --flux-thresh FLUX_THRESHOLD   \n              Flux threshold. Regions in an image with flux &gt; fth *\n              noise are considered. Default=10\n   -vth VARIANCE_THRESHOLD, --variance-thresh VARIANCE_THRESHOLD   \n              Local variance threshold. Sources with varinace &gt; vth   \n              * noise are considered. Defautl=5.   \n   -vsize VARIANCE_SIZE, --variance-size VARIANCE_SIZE   \n              The size of the region to compute the local variance.  \n              E.g vsize=10, gives a region of size = 10 *   \n              resolution. The resolution is in pixels. Default=10   \n   -cth CORRELATION_THRESHOLD, --correlation-thresh CORRELATION_THRESHOLD   \n              Correlation threshold. Sources with correlation factor   \n              &gt; cth are considered. Default=0.5    \n   -csize CORRELATION_SIZE, --correlation-size CORRELATION_SIZE   \n              The size of the region to compute correlation. see   \n              vsize. Default=5   \n   -gpix GROUP_PIXELS, --group-pixels GROUP_PIXELS   \n              The size of the region to group the pixels, in terms   \n              of psf-size. The psf is in degrees. e.g gpix=20, gives   \n              20xpsf. Default=20   \n   -rexcl, RADIUS_EXCLUDE, --exclude-radius RADIUS_EXCLUDE\n            The radius to exclude in arcseconds. default=0.\n   -usec USE_CATALOG, --use-catalog USE_CATALOG   \n              Use -cat for the identification and not only -i.    \n   -o OUTPUT_PREFIX, -prefix OUTPUT_PREFIX    \n              The prefix for the output file containing directions   \n              in RA, DEC both in degrees, and peak flux of the   \n              pixels. Default=None  \n</code></pre>\n<p>Example Run:</p>\n<pre><code>pyddi -i examples/kat7restored.fits -c examples/kat7restored.gaul -p examples/kat7psf.fits -vth 10 -cth 0.7 -gpix 50  -usec -o test-output\n</code></pre>\n\n          </div>"}, "last_serial": 5647759, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "45d60202cdf86c868cf359510d1556db", "sha256": "b49ed4c599d2d1887b6b42dba304f810d0510837713fda0c9fdce8628f15e4f7"}, "downloads": -1, "filename": "pyddi-0.0.2.tar.gz", "has_sig": false, "md5_digest": "45d60202cdf86c868cf359510d1556db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18657, "upload_time": "2019-07-29T06:54:08", "upload_time_iso_8601": "2019-07-29T06:54:08.273610Z", "url": "https://files.pythonhosted.org/packages/3f/54/7e8a386f6855c6e81f8cbc6430978eaf00930370a750078631bee889a06b/pyddi-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "36df5569167341918933a1633fd9b211", "sha256": "d2c2243e3efb4263cc994036f42b31b006b6c483aec3e9d6e95ffa933836a4d5"}, "downloads": -1, "filename": "pyddi-0.0.3.tar.gz", "has_sig": false, "md5_digest": "36df5569167341918933a1633fd9b211", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18647, "upload_time": "2019-08-05T16:19:50", "upload_time_iso_8601": "2019-08-05T16:19:50.422386Z", "url": "https://files.pythonhosted.org/packages/ae/00/86ab5a87e4dc83e9679518c4e8d32f20b59ee670966e5507e01f8123e3b5/pyddi-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "883565432805bd28151123da103c8ede", "sha256": "8691b2f3e1c654c2624dd8b16b988b6c583ead4a73e36e8c50e2b3898dd34d9b"}, "downloads": -1, "filename": "pyddi-0.0.4.tar.gz", "has_sig": false, "md5_digest": "883565432805bd28151123da103c8ede", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18853, "upload_time": "2019-08-08T02:05:46", "upload_time_iso_8601": "2019-08-08T02:05:46.636886Z", "url": "https://files.pythonhosted.org/packages/91/7d/0b32a4654c4fe3397b9bd82fbc3ded2ac9b4246081bc1aeeeb35024198e4/pyddi-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "883565432805bd28151123da103c8ede", "sha256": "8691b2f3e1c654c2624dd8b16b988b6c583ead4a73e36e8c50e2b3898dd34d9b"}, "downloads": -1, "filename": "pyddi-0.0.4.tar.gz", "has_sig": false, "md5_digest": "883565432805bd28151123da103c8ede", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18853, "upload_time": "2019-08-08T02:05:46", "upload_time_iso_8601": "2019-08-08T02:05:46.636886Z", "url": "https://files.pythonhosted.org/packages/91/7d/0b32a4654c4fe3397b9bd82fbc3ded2ac9b4246081bc1aeeeb35024198e4/pyddi-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:15 2020"}