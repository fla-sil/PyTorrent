{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# pytest-automock\n[![Travis status for master branch](https://travis-ci.com/pohmelie/pytest-automock.svg?branch=master)](https://travis-ci.com/pohmelie/pytest-automock)\n[![Codecov coverage for master branch](https://codecov.io/gh/pohmelie/pytest-automock/branch/master/graph/badge.svg)](https://codecov.io/gh/pohmelie/pytest-automock)\n[![Pypi version](https://img.shields.io/pypi/v/pytest-automock.svg)](https://pypi.org/project/pytest-automock/)\n[![Pypi downloads count](https://img.shields.io/pypi/dm/pytest-automock)](https://pypi.org/project/pytest-automock/)\n\n# Reason\n* No generic automock solution\n\n# Features\n* Pytest plugin\n* Autogenerate/autouse mocks for functions and objects\n* Sync and async support\n* Locked mode to be sure mocked objects stay untouched\n* Customizable serialization\n\n# Limitaions\n* No support for dunder methods (can be partly solved in future)\n* No support for sync/async generators/contexts\n* Races can break tests, since order counts\n* Non-determenistic representation will break tests, since representation is a part of call snapshot key\n\n# License\n`pytest-automock` is offered under MIT license.\n\n# Requirements\n* python 3.6+\n\n# Usage\nLets say you have some module `mymod.py`:\n``` python\nimport time\n\nclass Network:\n    def get_data_from_network(self, x, y):\n        time.sleep(1)\n        return x + y\n\n    def send_data_to_network(self, value):\n        time.sleep(1)\n\ndef logic(x):\n    n = Network()\n    a, b = 0, 1\n    while b < x:\n        c = n.get_data_from_network(a, b)\n        a, b = b, c\n        n.send_data_to_network(\"ok\")\n    return b\n```\nAnd you want to create mocks for your `Network` class (since testing time and sane counts), but you are too lazy to write them... `conftest.py`:\n``` python\nimport pytest\nimport mymod\n\n@pytest.fixture(autouse=True)\ndef _mocks(automock):\n    with automock((mymod, \"Network\")):\n        yield\n```\nYou can also use module path notation:\n``` python\nimport pytest\n\n@pytest.fixture(autouse=True)\ndef _mocks(automock):\n    with automock(\"mymod.Network\"):\n        yield\n```\n`test_logic.py`:\n``` python\nfrom mymod import logic\n\ndef test_logic():\n    assert logic(7) == 8\n    assert logic(10) == 13\n```\nIf you run `pytest` on this setup, then you will see fail:\n``` bash\n$ pytest -x\n...\nE           RuntimeError: Mock is locked, but '__init__' wanted\n```\n`automock` can work in two modes: locked and unlocked. Locked mode is default, real methods calls of mocked objects are\nnot allowed in this mode. So, above error says that we can't call `__init__` of our `Network`.\nIn locked mode there is no mock-files update also.\n\nTo allow real calls and mocks generation `automock` provides extra cli argument to `pytest`: `--automock-unlocked`\n``` bash\n$ pytest -x --automock-unlocked\n...\ntest_logic.py .\n...\n1 passed in 22.09s\n```\nAfter that you can see that `tests/mocks/test_logic/mymod/Network` file was created. This is mock for your test sequence.\nNow you can rerun tests and see what happens (you can omit `--automock-unlocked` key for ensurance, that real object\nwill not be touched (actually even created)).\n``` bash\n$ pytest -x\n...\ntest_logic.py .\n...\n1 passed in 0.04s\n```\n# API\n## `automock` (fixture)\n`automock` fixture is a **context manager**\n```python\ndef automock(*targets,\n             storage: Union[str, Path] = \"tests/mocks\",\n             override_name: Optional[str] = None,\n             unlocked: Optional[bool] = None,\n             remove: Optional[bool] = None,\n             encode: Callable[[Any], bytes] = pickle.dumps,\n             decode: Callable[[bytes], Any] = pickle.loads,\n             debug: Optional[Callable[[Dict, Call, Optional[Call]], None]] = None)\n```\n* `*targets`: pair/tuple of object/module and attribute name (`str`) or module path to object/function with dot delimiter (`(mymod, \"Network\")` or `\"mymod.Network\"`)\n* `storage`: root path for storing mocks\n* `override_name`: forced mock-file name\n* `unlocked`: mode selector (if omited, selected by `--automock-unlocked`)\n* `remove`: remove test mock before test run (if omited, selected by `--automock-remove`)\n* `encode`: encode routine\n* `decode`: decode routine\n* `debug`: function for debugging failed cases, when you do not understand why automock bakes. Arguments are:\n    * `memory` for current failed test\n    * `call_wanted` which is a call you want to do right now\n    * `call_saved` which is a call you saved last time you generate mocks for this test\n\n`call_wanted` and `call_saved` are rich `Call` class objects, inspect it in `mock.py` file. Also, you can use a `\"pdb\"` string instead of your own function as a `debug` argument value, to use internal function with `pdb.set_trace()` instruction.\n\n## `automock_unlocked` (fixture)\nFixture with default mode from cli parameter (`bool`).\n\n## `automock_remove` (fixture)\nFixture with default mode from cli parameter (`bool`).\n\n## `automock` (function)\n`automock` function is not supposed to be used by anyone but `automock` fixture\n``` python\ndef automock(factory: Callable, *,\n             memory: Dict,\n             locked: bool = True,\n             encode: Callable[[Any], bytes] = pickle.dumps,\n             decode: Callable[[bytes], Any] = pickle.loads,\n             debug: Optional[Callable[[Dict, Call, Optional[Call]], None]] = None)\n```\n* `factory`: object/function to wrap\n* `memory`: dicrionary to get/put mocks\n* `locked`: mode selector\n* `encode`: encode routine\n* `decode`: decode routine\n* `debug`: same as for ficture\n\n# Caveats\n## Order\nAs feature paragraph described: \u00aborder counts\u00bb. What does it mean?\n\n### Functions\nMocked functions/coroutines call order counts. If you mock sequence\n``` python\nfunc(1, 2)\nfunc(2, 3)\n```\nand trying to use mocked data with sequence\n``` python\nfunc(2, 3)\nfunc(1, 2)\n```\nYou will get an error, since calling order is part of idea of deterministic tests\n\n### Objects\nMocked objects have same behavior, but methods call are individual, so if you mock sequence\n``` python\nt1 = T(1)\nt2 = T(2)\nt1.func(1, 2)\nt2.func(2, 3)\n```\nthen calling order are individual for method calls, so this is ok:\n``` python\nt1 = T(1)\nt2 = T(2)\nt2.func(2, 3)\nt1.func(1, 2)\n```\nBut not for `__init__` method, since mocks are internaly attached to instance\n``` python\nt2 = T(2)\nt1 = T(1)\nt1.func(1, 2)\nt2.func(2, 3)\n```\nwill fail\n\n## Function arguments\nInternally, key for mocks consists of instance number and call number. This leads to some \u00abunobvious\u00bb behavior:\n``` python\nimport time\nfrom pytest_automock import automock\n\ndef nop(x):\n    return x\n\nm = {}\nmocked = automock(nop, memory=m, locked=False)\nmocked(time.time())\n\nmocked = automock(nop, memory=m, locked=True)\nmocked(time.time())\n```\nWill fail because of argument in mock creation time differs from argument in mock use time. Same thing will break mocks if pickled representation is not determenistic.\n\n# Development\n## Run tests\nSince coverage issue/feature, plugins coverage is broken by default. [Workaround](https://pytest-cov.readthedocs.io/en/latest/plugins.html):\n``` bash\nCOV_CORE_SOURCE=pytest_automock COV_CORE_CONFIG=.coveragerc COV_CORE_DATAFILE=.coverage.eager pytest\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pohmelie/pytest-automock", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pytest-automock", "package_url": "https://pypi.org/project/pytest-automock/", "platform": "", "project_url": "https://pypi.org/project/pytest-automock/", "project_urls": {"Homepage": "https://github.com/pohmelie/pytest-automock"}, "release_url": "https://pypi.org/project/pytest-automock/0.7.0/", "requires_dist": ["pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "pytest-asyncio ; extra == 'dev'", "flake8 ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "Pytest plugin for automatical mocks creation", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pytest-automock</h1>\n<p><a href=\"https://travis-ci.com/pohmelie/pytest-automock\" rel=\"nofollow\"><img alt=\"Travis status for master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8a10887dc4127db4face71bab7cc826f8141763/68747470733a2f2f7472617669732d63692e636f6d2f706f686d656c69652f7079746573742d6175746f6d6f636b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/pohmelie/pytest-automock\" rel=\"nofollow\"><img alt=\"Codecov coverage for master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b92c0f8f345b001f91a934ef4f3d1f88d810799/68747470733a2f2f636f6465636f762e696f2f67682f706f686d656c69652f7079746573742d6175746f6d6f636b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/pytest-automock/\" rel=\"nofollow\"><img alt=\"Pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6864d5a674b78280095d16e23d9e03eba6cfd93/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d6175746f6d6f636b2e737667\"></a>\n<a href=\"https://pypi.org/project/pytest-automock/\" rel=\"nofollow\"><img alt=\"Pypi downloads count\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40abe5dd715bfb55275fc83d99c6220f1b1214fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7079746573742d6175746f6d6f636b\"></a></p>\n<h1>Reason</h1>\n<ul>\n<li>No generic automock solution</li>\n</ul>\n<h1>Features</h1>\n<ul>\n<li>Pytest plugin</li>\n<li>Autogenerate/autouse mocks for functions and objects</li>\n<li>Sync and async support</li>\n<li>Locked mode to be sure mocked objects stay untouched</li>\n<li>Customizable serialization</li>\n</ul>\n<h1>Limitaions</h1>\n<ul>\n<li>No support for dunder methods (can be partly solved in future)</li>\n<li>No support for sync/async generators/contexts</li>\n<li>Races can break tests, since order counts</li>\n<li>Non-determenistic representation will break tests, since representation is a part of call snapshot key</li>\n</ul>\n<h1>License</h1>\n<p><code>pytest-automock</code> is offered under MIT license.</p>\n<h1>Requirements</h1>\n<ul>\n<li>python 3.6+</li>\n</ul>\n<h1>Usage</h1>\n<p>Lets say you have some module <code>mymod.py</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Network</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_data_from_network</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">send_data_to_network</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">logic</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Network</span><span class=\"p\">()</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">get_data_from_network</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span>\n        <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">send_data_to_network</span><span class=\"p\">(</span><span class=\"s2\">\"ok\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span>\n</pre>\n<p>And you want to create mocks for your <code>Network</code> class (since testing time and sane counts), but you are too lazy to write them... <code>conftest.py</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mymod</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">autouse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">_mocks</span><span class=\"p\">(</span><span class=\"n\">automock</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">automock</span><span class=\"p\">((</span><span class=\"n\">mymod</span><span class=\"p\">,</span> <span class=\"s2\">\"Network\"</span><span class=\"p\">)):</span>\n        <span class=\"k\">yield</span>\n</pre>\n<p>You can also use module path notation:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">autouse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">_mocks</span><span class=\"p\">(</span><span class=\"n\">automock</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">automock</span><span class=\"p\">(</span><span class=\"s2\">\"mymod.Network\"</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span>\n</pre>\n<p><code>test_logic.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mymod</span> <span class=\"kn\">import</span> <span class=\"n\">logic</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_logic</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">logic</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">8</span>\n    <span class=\"k\">assert</span> <span class=\"n\">logic</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">13</span>\n</pre>\n<p>If you run <code>pytest</code> on this setup, then you will see fail:</p>\n<pre>$ pytest -x\n...\nE           RuntimeError: Mock is locked, but <span class=\"s1\">'__init__'</span> wanted\n</pre>\n<p><code>automock</code> can work in two modes: locked and unlocked. Locked mode is default, real methods calls of mocked objects are\nnot allowed in this mode. So, above error says that we can't call <code>__init__</code> of our <code>Network</code>.\nIn locked mode there is no mock-files update also.</p>\n<p>To allow real calls and mocks generation <code>automock</code> provides extra cli argument to <code>pytest</code>: <code>--automock-unlocked</code></p>\n<pre>$ pytest -x --automock-unlocked\n...\ntest_logic.py .\n...\n<span class=\"m\">1</span> passed in <span class=\"m\">22</span>.09s\n</pre>\n<p>After that you can see that <code>tests/mocks/test_logic/mymod/Network</code> file was created. This is mock for your test sequence.\nNow you can rerun tests and see what happens (you can omit <code>--automock-unlocked</code> key for ensurance, that real object\nwill not be touched (actually even created)).</p>\n<pre>$ pytest -x\n...\ntest_logic.py .\n...\n<span class=\"m\">1</span> passed in <span class=\"m\">0</span>.04s\n</pre>\n<h1>API</h1>\n<h2><code>automock</code> (fixture)</h2>\n<p><code>automock</code> fixture is a <strong>context manager</strong></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">automock</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">targets</span><span class=\"p\">,</span>\n             <span class=\"n\">storage</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"tests/mocks\"</span><span class=\"p\">,</span>\n             <span class=\"n\">override_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n             <span class=\"n\">unlocked</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n             <span class=\"n\">remove</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n             <span class=\"n\">encode</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">bytes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">,</span>\n             <span class=\"n\">decode</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">,</span>\n             <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Call</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Call</span><span class=\"p\">]],</span> <span class=\"kc\">None</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>*targets</code>: pair/tuple of object/module and attribute name (<code>str</code>) or module path to object/function with dot delimiter (<code>(mymod, \"Network\")</code> or <code>\"mymod.Network\"</code>)</li>\n<li><code>storage</code>: root path for storing mocks</li>\n<li><code>override_name</code>: forced mock-file name</li>\n<li><code>unlocked</code>: mode selector (if omited, selected by <code>--automock-unlocked</code>)</li>\n<li><code>remove</code>: remove test mock before test run (if omited, selected by <code>--automock-remove</code>)</li>\n<li><code>encode</code>: encode routine</li>\n<li><code>decode</code>: decode routine</li>\n<li><code>debug</code>: function for debugging failed cases, when you do not understand why automock bakes. Arguments are:\n<ul>\n<li><code>memory</code> for current failed test</li>\n<li><code>call_wanted</code> which is a call you want to do right now</li>\n<li><code>call_saved</code> which is a call you saved last time you generate mocks for this test</li>\n</ul>\n</li>\n</ul>\n<p><code>call_wanted</code> and <code>call_saved</code> are rich <code>Call</code> class objects, inspect it in <code>mock.py</code> file. Also, you can use a <code>\"pdb\"</code> string instead of your own function as a <code>debug</code> argument value, to use internal function with <code>pdb.set_trace()</code> instruction.</p>\n<h2><code>automock_unlocked</code> (fixture)</h2>\n<p>Fixture with default mode from cli parameter (<code>bool</code>).</p>\n<h2><code>automock_remove</code> (fixture)</h2>\n<p>Fixture with default mode from cli parameter (<code>bool</code>).</p>\n<h2><code>automock</code> (function)</h2>\n<p><code>automock</code> function is not supposed to be used by anyone but <code>automock</code> fixture</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">automock</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span>\n             <span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span>\n             <span class=\"n\">locked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n             <span class=\"n\">encode</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">bytes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">,</span>\n             <span class=\"n\">decode</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">,</span>\n             <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Call</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Call</span><span class=\"p\">]],</span> <span class=\"kc\">None</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>factory</code>: object/function to wrap</li>\n<li><code>memory</code>: dicrionary to get/put mocks</li>\n<li><code>locked</code>: mode selector</li>\n<li><code>encode</code>: encode routine</li>\n<li><code>decode</code>: decode routine</li>\n<li><code>debug</code>: same as for ficture</li>\n</ul>\n<h1>Caveats</h1>\n<h2>Order</h2>\n<p>As feature paragraph described: \u00aborder counts\u00bb. What does it mean?</p>\n<h3>Functions</h3>\n<p>Mocked functions/coroutines call order counts. If you mock sequence</p>\n<pre><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>and trying to use mocked data with sequence</p>\n<pre><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>You will get an error, since calling order is part of idea of deterministic tests</p>\n<h3>Objects</h3>\n<p>Mocked objects have same behavior, but methods call are individual, so if you mock sequence</p>\n<pre><span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>then calling order are individual for method calls, so this is ok:</p>\n<pre><span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>But not for <code>__init__</code> method, since mocks are internaly attached to instance</p>\n<pre><span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>will fail</p>\n<h2>Function arguments</h2>\n<p>Internally, key for mocks consists of instance number and call number. This leads to some \u00abunobvious\u00bb behavior:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_automock</span> <span class=\"kn\">import</span> <span class=\"n\">automock</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">nop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">mocked</span> <span class=\"o\">=</span> <span class=\"n\">automock</span><span class=\"p\">(</span><span class=\"n\">nop</span><span class=\"p\">,</span> <span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">locked</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">mocked</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">())</span>\n\n<span class=\"n\">mocked</span> <span class=\"o\">=</span> <span class=\"n\">automock</span><span class=\"p\">(</span><span class=\"n\">nop</span><span class=\"p\">,</span> <span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">locked</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">mocked</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">())</span>\n</pre>\n<p>Will fail because of argument in mock creation time differs from argument in mock use time. Same thing will break mocks if pickled representation is not determenistic.</p>\n<h1>Development</h1>\n<h2>Run tests</h2>\n<p>Since coverage issue/feature, plugins coverage is broken by default. <a href=\"https://pytest-cov.readthedocs.io/en/latest/plugins.html\" rel=\"nofollow\">Workaround</a>:</p>\n<pre><span class=\"nv\">COV_CORE_SOURCE</span><span class=\"o\">=</span>pytest_automock <span class=\"nv\">COV_CORE_CONFIG</span><span class=\"o\">=</span>.coveragerc <span class=\"nv\">COV_CORE_DATAFILE</span><span class=\"o\">=</span>.coverage.eager pytest\n</pre>\n\n          </div>"}, "last_serial": 7076643, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "608e30cffdb5b220b051aa4757d880cc", "sha256": "3225a5aabd282061a42933bbb342df6e2a6853f27b15ec7d2e887dd9f1134b30"}, "downloads": -1, "filename": "pytest_automock-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "608e30cffdb5b220b051aa4757d880cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.7", "size": 5008, "upload_time": "2019-11-08T17:01:09", "upload_time_iso_8601": "2019-11-08T17:01:09.068180Z", "url": "https://files.pythonhosted.org/packages/47/93/7062dc69678729654c95ae372e7ab29fa6a8660fd138428177d4bfae84f1/pytest_automock-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ef80515d457940f44c19fe2a68c8da9", "sha256": "d129fdd38a133a1635058e2b4dcb48e90a34b3aeaa88e1db898d5191f97bca51"}, "downloads": -1, "filename": "pytest-automock-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6ef80515d457940f44c19fe2a68c8da9", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.7", "size": 10028, "upload_time": "2019-11-08T17:01:11", "upload_time_iso_8601": "2019-11-08T17:01:11.617149Z", "url": "https://files.pythonhosted.org/packages/c9/ae/b60baa36ad81c1c2b96ad2b7813068e2e33c4109507115628cd7b7736988/pytest-automock-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c8afc6c57e9dbaf86611d40ec7743d8a", "sha256": "983664b0a04ee74d7d3256be3b15b088aa864b606c2ab06806c9525913625413"}, "downloads": -1, "filename": "pytest_automock-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c8afc6c57e9dbaf86611d40ec7743d8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.7", "size": 5943, "upload_time": "2019-11-09T17:15:22", "upload_time_iso_8601": "2019-11-09T17:15:22.311694Z", "url": "https://files.pythonhosted.org/packages/7a/cb/0026662458cb6ba3b45b0179863393016d8b8a5345a5ef6bb1e72e02d7c3/pytest_automock-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8db98da1df89c21d3089422d67fc5c24", "sha256": "cc2abd5ff4a45aecb8c3c38d18b47dcc58ae05f7bb852dd7573225e5c0c97e70"}, "downloads": -1, "filename": "pytest-automock-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8db98da1df89c21d3089422d67fc5c24", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.7", "size": 12418, "upload_time": "2019-11-09T17:15:24", "upload_time_iso_8601": "2019-11-09T17:15:24.094817Z", "url": "https://files.pythonhosted.org/packages/10/c4/581abcdddac7225ff0dbf65fb474e29a69ac2ed13b504e16c6527cf2101e/pytest-automock-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "73ad29c69d89104a789813ed078bf5e9", "sha256": "5cd7eeb8466896d7c44ade3c74498436a6d64170083145aff10e318d2d5f7c9c"}, "downloads": -1, "filename": "pytest_automock-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "73ad29c69d89104a789813ed078bf5e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.7", "size": 5952, "upload_time": "2019-11-09T17:20:53", "upload_time_iso_8601": "2019-11-09T17:20:53.498430Z", "url": "https://files.pythonhosted.org/packages/85/13/e9982ec8c39d7587ca0c0d564d5d855195d93461f900d7276c76a57131d0/pytest_automock-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7329657efe522bc2f8ade4302842665b", "sha256": "dfbd53a26616e795b052c1910d81529c0d48cdea519ae8eb2713014fe8fadc72"}, "downloads": -1, "filename": "pytest-automock-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7329657efe522bc2f8ade4302842665b", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.7", "size": 12430, "upload_time": "2019-11-09T17:20:54", "upload_time_iso_8601": "2019-11-09T17:20:54.790130Z", "url": "https://files.pythonhosted.org/packages/09/ca/eff9a87871789ceb927c6b26a9cc775384d1fb300881c6a897b57bd66c52/pytest-automock-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "55eb8c69aeb9adba4322586d37890d9d", "sha256": "0f4fc11e7dcd2ca5ec47b66ec6a6bdb7c40fdb9459dd7879fc0b78b354e34a16"}, "downloads": -1, "filename": "pytest_automock-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "55eb8c69aeb9adba4322586d37890d9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5956, "upload_time": "2019-11-12T11:48:21", "upload_time_iso_8601": "2019-11-12T11:48:21.638904Z", "url": "https://files.pythonhosted.org/packages/a3/c2/3b6c9f6d5ba3f0e437fb95437c8c7ec87a756b8703dedbc90f21ea4091a8/pytest_automock-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a32a9c7050a5e8bd7344f731688e2cf5", "sha256": "73c88ea8b15157c08e8c3040244d4830f7eb11af4d0fc051d1b365d776f68e40"}, "downloads": -1, "filename": "pytest-automock-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a32a9c7050a5e8bd7344f731688e2cf5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18977, "upload_time": "2019-11-12T11:48:25", "upload_time_iso_8601": "2019-11-12T11:48:25.325815Z", "url": "https://files.pythonhosted.org/packages/31/10/750ef07f9a165672c8dc73b5670c22f3e8d0f43e0d96a8b19611efb9be70/pytest-automock-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "8275601661bb2760b12ae628f8a17f62", "sha256": "79bc828cc1ce32c675cf2fcc981c57e2d48f2dd0d9cb00a42948b493f1c163a0"}, "downloads": -1, "filename": "pytest_automock-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8275601661bb2760b12ae628f8a17f62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 5671, "upload_time": "2019-12-01T22:48:09", "upload_time_iso_8601": "2019-12-01T22:48:09.025965Z", "url": "https://files.pythonhosted.org/packages/81/46/498ed8799b03f5e0f6b6a58748c2107200ec011bac80ab1f70008a6f728a/pytest_automock-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcb3cb3cb2d9b4995fab5d03285d5137", "sha256": "38960a806c464ac38a666699b6459bc88362755ba6e7fce87705eb1f2d615bcf"}, "downloads": -1, "filename": "pytest-automock-0.4.0.tar.gz", "has_sig": false, "md5_digest": "bcb3cb3cb2d9b4995fab5d03285d5137", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 11349, "upload_time": "2019-12-01T22:48:10", "upload_time_iso_8601": "2019-12-01T22:48:10.367207Z", "url": "https://files.pythonhosted.org/packages/cb/66/41ee760055f8b8bed2d8f31f5866d03f0f788de0511a635746419ff7f21b/pytest-automock-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "d18d728aaad7c2098fe8034555fcc4d5", "sha256": "12bd129305cf0e66ac74dcfbef560178a91aca363786d36e2104719c676fdfd8"}, "downloads": -1, "filename": "pytest_automock-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d18d728aaad7c2098fe8034555fcc4d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5685, "upload_time": "2019-12-11T12:26:00", "upload_time_iso_8601": "2019-12-11T12:26:00.911997Z", "url": "https://files.pythonhosted.org/packages/37/d0/d34611531de7f946c59f484eae6f790c3f49c1f1c366e11de528c6c10d54/pytest_automock-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6164bb31fb6e5ae1239fa31631cfe230", "sha256": "00d35c3cd2c2637c8f4966a56aa622e5c4007eb5794ad7a60bf3d5ae067f523b"}, "downloads": -1, "filename": "pytest-automock-0.5.0.tar.gz", "has_sig": false, "md5_digest": "6164bb31fb6e5ae1239fa31631cfe230", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20675, "upload_time": "2019-12-11T12:26:02", "upload_time_iso_8601": "2019-12-11T12:26:02.710786Z", "url": "https://files.pythonhosted.org/packages/29/03/1b940376e6a487785999b9a7e717abe5b41386032febdb9e788a4ce69ebe/pytest-automock-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "58f027f5639b0c18083436f3375d4dcd", "sha256": "dfb0cf801d44e159c5a918498d2328107a657715cc7911cea131e58383b5c91c"}, "downloads": -1, "filename": "pytest_automock-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "58f027f5639b0c18083436f3375d4dcd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 6625, "upload_time": "2019-12-11T23:08:09", "upload_time_iso_8601": "2019-12-11T23:08:09.749823Z", "url": "https://files.pythonhosted.org/packages/47/c8/710f38be49b55dcf694be5f82ce793ef0950f116fa5f6f456cfca90d6458/pytest_automock-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9883cc54bf201eec915f99bedde5fdd", "sha256": "8a368f8ab35bdf4de04432f8f4de1a029c7949b8dd56e6fc376ad16de31c2a75"}, "downloads": -1, "filename": "pytest-automock-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a9883cc54bf201eec915f99bedde5fdd", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 14287, "upload_time": "2019-12-11T23:08:11", "upload_time_iso_8601": "2019-12-11T23:08:11.711000Z", "url": "https://files.pythonhosted.org/packages/66/f0/bbe9d790b3e6c2f8fe87fbeba6f9cbd7c960e0496e2e27a5286fe691efac/pytest-automock-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "5f31825dea87a639f2b596a1a514f48d", "sha256": "3630793c38d8260bdbd51a0d732b761bd738e6803bdac24d062b9bf15217f0a0"}, "downloads": -1, "filename": "pytest_automock-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5f31825dea87a639f2b596a1a514f48d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 6620, "upload_time": "2019-12-12T03:00:45", "upload_time_iso_8601": "2019-12-12T03:00:45.025635Z", "url": "https://files.pythonhosted.org/packages/94/d8/b2c05990ebc763540385ccacd32cc9d08196634a9dcb0510e085a13bfb2c/pytest_automock-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fce7384e289abf91301ce778dad3459f", "sha256": "ffef136b1d0c511099af8922952568c3d860c58f3b9a30cd5cf6974c7aa0e6da"}, "downloads": -1, "filename": "pytest-automock-0.6.1.tar.gz", "has_sig": false, "md5_digest": "fce7384e289abf91301ce778dad3459f", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 14311, "upload_time": "2019-12-12T03:00:46", "upload_time_iso_8601": "2019-12-12T03:00:46.946449Z", "url": "https://files.pythonhosted.org/packages/be/3c/68cb426acf3c337dd8fc60daa7c992660f44b9b5b22378908018085cd4ee/pytest-automock-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "b5f97646ca9244c1874f5c38752b118f", "sha256": "dc4c54251c8f9c22c70d104e54cd08e71a422f3567b759549672770b596e6b5e"}, "downloads": -1, "filename": "pytest_automock-0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b5f97646ca9244c1874f5c38752b118f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6707, "upload_time": "2019-12-18T14:04:07", "upload_time_iso_8601": "2019-12-18T14:04:07.155940Z", "url": "https://files.pythonhosted.org/packages/48/e5/9572780551c56a4bc4084675e21d4185fac9d22c19423e1006e52d7fcd97/pytest_automock-0.6.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f98a83e1302eb3167bb3b877c9e408d4", "sha256": "4e94884a237cfaead9d96892f8524cf0f848c4564af7a03a42102f00d4b0063f"}, "downloads": -1, "filename": "pytest-automock-0.6.2.tar.gz", "has_sig": false, "md5_digest": "f98a83e1302eb3167bb3b877c9e408d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8203, "upload_time": "2019-12-18T14:04:08", "upload_time_iso_8601": "2019-12-18T14:04:08.458769Z", "url": "https://files.pythonhosted.org/packages/4f/61/71d7862bc296498c5921a53b44a998a7253e0fcef9bc29934cdc6e43fd33/pytest-automock-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "7336a9ae2a665249bca60a50eca0f9cb", "sha256": "d1f31e9f00e5d243ca8f4a4f4d80637175ecc8017d2618a63ea644bc91689807"}, "downloads": -1, "filename": "pytest_automock-0.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7336a9ae2a665249bca60a50eca0f9cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6751, "upload_time": "2019-12-27T02:52:12", "upload_time_iso_8601": "2019-12-27T02:52:12.367636Z", "url": "https://files.pythonhosted.org/packages/f9/a3/00997ee22e49679bf2ddf44cc18b65944c846be530dabccad12a86112245/pytest_automock-0.6.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3af1f91fe40466a85c0db3c708bb383f", "sha256": "fce50ef9eb11f205b556c224d81759a123fa29f2fb5f046088df07a5ea771a09"}, "downloads": -1, "filename": "pytest-automock-0.6.3.tar.gz", "has_sig": false, "md5_digest": "3af1f91fe40466a85c0db3c708bb383f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8261, "upload_time": "2019-12-27T02:52:13", "upload_time_iso_8601": "2019-12-27T02:52:13.456735Z", "url": "https://files.pythonhosted.org/packages/36/02/2b6a10dd4bdaf79750329b04c127d658ec9ecb5f57ab6336aed26f034d54/pytest-automock-0.6.3.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "1295ebdc50a7ec4b0e76920806e1a21e", "sha256": "e379b8ee4ad2b0cc126feb28a92f669a24ff6ef3b1192884ed940634190bf0cb"}, "downloads": -1, "filename": "pytest_automock-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1295ebdc50a7ec4b0e76920806e1a21e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7473, "upload_time": "2020-04-22T13:37:42", "upload_time_iso_8601": "2020-04-22T13:37:42.080282Z", "url": "https://files.pythonhosted.org/packages/35/8c/f17b64c6a32ccff8bfac9037c0478b449d9a7e90afb4d23a0363e385bc12/pytest_automock-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e585aebf7eb2b221297cc12c2be0cb35", "sha256": "d5d1e23050d03134ecd5cd23baab3516a2936ce7913eafd74b0e226cd4699478"}, "downloads": -1, "filename": "pytest-automock-0.7.0.tar.gz", "has_sig": false, "md5_digest": "e585aebf7eb2b221297cc12c2be0cb35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10036, "upload_time": "2020-04-22T13:37:43", "upload_time_iso_8601": "2020-04-22T13:37:43.069938Z", "url": "https://files.pythonhosted.org/packages/16/e5/63096d2ec4d3599b6ba9a99e235bb3684d9aa6a1da446afa0e318516b14e/pytest-automock-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1295ebdc50a7ec4b0e76920806e1a21e", "sha256": "e379b8ee4ad2b0cc126feb28a92f669a24ff6ef3b1192884ed940634190bf0cb"}, "downloads": -1, "filename": "pytest_automock-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1295ebdc50a7ec4b0e76920806e1a21e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7473, "upload_time": "2020-04-22T13:37:42", "upload_time_iso_8601": "2020-04-22T13:37:42.080282Z", "url": "https://files.pythonhosted.org/packages/35/8c/f17b64c6a32ccff8bfac9037c0478b449d9a7e90afb4d23a0363e385bc12/pytest_automock-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e585aebf7eb2b221297cc12c2be0cb35", "sha256": "d5d1e23050d03134ecd5cd23baab3516a2936ce7913eafd74b0e226cd4699478"}, "downloads": -1, "filename": "pytest-automock-0.7.0.tar.gz", "has_sig": false, "md5_digest": "e585aebf7eb2b221297cc12c2be0cb35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10036, "upload_time": "2020-04-22T13:37:43", "upload_time_iso_8601": "2020-04-22T13:37:43.069938Z", "url": "https://files.pythonhosted.org/packages/16/e5/63096d2ec4d3599b6ba9a99e235bb3684d9aa6a1da446afa0e318516b14e/pytest-automock-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:25 2020"}