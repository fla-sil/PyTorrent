{"info": {"author": "Florimond Manca", "author_email": "florimond.manca@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# asgi-lifespan\n\n[![Build Status](https://travis-ci.com/florimondmanca/asgi-lifespan.svg?branch=master)](https://travis-ci.com/florimondmanca/asgi-lifespan)\n[![Coverage](https://codecov.io/gh/florimondmanca/asgi-lifespan/branch/master/graph/badge.svg)](https://codecov.io/gh/florimondmanca/asgi-lifespan)\n[![Package version](https://badge.fury.io/py/asgi-lifespan.svg)](https://pypi.org/project/asgi-lifespan)\n\nProgrammatically send startup/shutdown [lifespan](https://asgi.readthedocs.io/en/latest/specs/lifespan.html) events into [ASGI](https://asgi.readthedocs.io) applications. When used in combination with an ASGI-capable HTTP client such as [HTTPX](https://www.python-httpx.org), this allows mocking or testing ASGI applications without having to spin up an ASGI server.\n\n## Features\n\n- Send lifespan events to an ASGI app using `LifespanManager`.\n- Support for [`asyncio`](https://docs.python.org/3/library/asyncio) and [`trio`](https://trio.readthedocs.io).\n- Fully type-annotated.\n- 100% test coverage.\n\n> **Note**: `asgi-lifespan==1.0.0` dropped the `Lifespan` and `LifespanMiddleware` helpers. If you need to add lifespan support to an ASGI application, consider using the lifespan-capable `Router` class provided by [Starlette](https://www.starlette.io).\n\n## Installation\n\n```bash\npip install 'asgi-lifespan==1.*'\n```\n\n## Usage\n\n`asgi-lifespan` provides a `LifespanManager` to programmatically send ASGI lifespan events into an ASGI app. This can be used to programmatically startup/shutdown an ASGI app without having to spin up an ASGI server.\n\n`LifespanManager` can run on either `asyncio` or `trio`, and will auto-detect the async library in use.\n\n### Basic usage\n\n```python\n# example.py\nfrom asgi_lifespan import LifespanManager\nfrom starlette.applications import Starlette\n\n# Example lifespan-capable ASGI app. Any ASGI app that supports\n# the lifespan protocol will do, e.g. FastAPI, Quart, Responder, ...\napp = Starlette(\n    on_startup=[lambda: print(\"Starting up!\")],\n    on_shutdown=[lambda: print(\"Shutting down!\")],\n)\n\nasync def main():\n    async with LifespanManager(app):\n        print(\"We're in!\")\n\n# On asyncio:\nimport asyncio; asyncio.run(main())\n\n# On trio:\n# import trio; trio.run(main)\n```\n\nOutput:\n\n```console\n$ python example.py\nStarting up!\nWe're in!\nShutting down!\n```\n\n### Sending lifespan events for testing\n\nThe example below demonstrates how to use `asgi-lifespan` in conjunction with [HTTPX](https://www.python-httpx.org) and `pytest` in order to send test requests into an ASGI app.\n\n- Install dependencies:\n\n```\npip install asgi-lifespan httpx starlette pytest pytest-asyncio\n```\n\n- Test script:\n\n```python\n# test_app.py\nimport httpx\nimport pytest\nfrom asgi_lifespan import LifespanManager\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\n\n\n@pytest.fixture\nasync def app():\n    async def startup():\n        print(\"Starting up\")\n\n    async def shutdown():\n        print(\"Shutting down\")\n\n    async def home(request):\n        return PlainTextResponse(\"Hello, world!\")\n\n    app = Starlette(\n        routes=[Route(\"/\", home)],\n        on_startup=[startup],\n        on_shutdown=[shutdown]\n    )\n\n    async with LifespanManager(app):\n        print(\"We're in!\")\n        yield app\n\n\n@pytest.fixture\nasync def client(app):\n    async with httpx.AsyncClient(app=app, base_url=\"http://app.io\") as client:\n        print(\"Client is ready\")\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_home(client):\n    print(\"Testing\")\n    response = await client.get(\"/\")\n    assert response.status_code == 200\n    assert response.text == \"Hello, world!\"\n    print(\"OK\")\n```\n\n- Run the test suite with `$ pytest -s test_app.py`:\n\n```console\n$ pytest -s debug/test_app.py\n======================= test session starts =======================\nplatform darwin -- Python 3.8.0, pytest-5.3.4, py-1.8.1, pluggy-0.13.1\nrootdir: /Users/florimond/Developer/florimondmanca-projects/asgi-lifespan, inifile: setup.cfg\nplugins: asyncio-0.10.0\n\n\ntest_app.py Starting up\nWe're in!\nClient is ready\nTesting\nOK\n.Shutting down\n\n======================= 1 passed in 0.88s =======================\n```\n\n## API Reference\n\n### `LifespanManager`\n\n```python\ndef __init__(\n    self,\n    app: Callable,\n    startup_timeout: Optional[float] = 5,\n    shutdown_timeout: Optional[float] = 5,\n)\n```\n\nAn [asynchronous context manager](https://docs.python.org/3/reference/datamodel.html#async-context-managers) that starts up an ASGI app on enter and shuts it down on exit.\n\nMore precisely:\n\n- On enter, start a `lifespan` request to `app` in the background, then send the `lifespan.startup` event and wait for the application to send `lifespan.startup.complete`.\n- On exit, send the `lifespan.shutdown` event and wait for the application to send `lifespan.shutdown.complete`.\n- If an exception occurs during startup, shutdown, or in the body of the `async with` block, it bubbles up and no shutdown is performed.\n\n**Example**\n\n```python\nasync with LifespanManager(app):\n    # 'app' was started up.\n    ...\n\n# 'app' was shut down.\n```\n\n**Parameters**\n\n- `app` (`Callable`): an ASGI application.\n- `startup_timeout` (`Optional[float]`, defaults to 5): maximum number of seconds to wait for the application to startup. Use `None` for no timeout.\n- `shutdown_timeout` (`Optional[float]`, defaults to 5): maximum number of seconds to wait for the application to shutdown. Use `None` for no timeout.\n\n**Raises**\n\n- `LifespanNotSupported`: if the application does not seem to support the lifespan protocol. Based on the rationale that if the app supported the lifespan protocol then it would successfully receive the `lifespan.startup` ASGI event, unsupported lifespan protocol is detected in two situations:\n  - The application called `send()` before calling `receive()` for the first time.\n  - The application raised an exception during startup before making its first call to `receive()`. For example, this may be because the application failed on a statement such as `assert scope[\"type\"] == \"http\"`.\n- `TimeoutError`: if startup or shutdown timed out.\n- `Exception`: any exception raised by the application (during startup, shutdown, or within the `async with` body) that does not indicate it does not support the lifespan protocol.\n\n## License\n\nMIT\n\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 1.0.0 (February 2, 2020)\n\n### Removed\n\n- Drop `Lifespan` and `LifespanMiddleware`. Please use Starlette's built-in lifespan capabilities instead. (Pull #27)\n\n### Fixed\n\n- Use `sniffio` for auto-detecting the async environment. (Pull #28)\n\n- Enforce 100% test coverage on CI. (Pull #29)\n\n### Changed\n\n- Enforce importing from the top-level package by switching to private internal modules. (Pull #26)\n\n## 0.6.0 (November 29, 2019)\n\n### Changed\n\n- Move `Lifespan` to the `lifespan` module. (Pull #21)\n- Refactor `LifespanManager` to drop dependency on `asynccontextmanager` on 3.6. (Pull #20)\n\n## 0.5.0 (November 29, 2019)\n\n- Enter Beta development status.\n\n### Removed\n\n- Remove `curio` support. (Pull #18)\n\n### Added\n\n- Ship binary distributions (wheels) alongside source distributions.\n\n### Changed\n\n- Use custom concurrency backends instead of `anyio` for asyncio and trio support. (Pull #18)\n\n## 0.4.2 (October 6, 2019)\n\n### Fixed\n\n- Ensure `py.typed` is bundled with the package so that type checkers can detect type annotations. (Pull #16)\n\n## 0.4.1 (September 29, 2019)\n\n### Fixed\n\n- Improve error handling in `LifespanManager` (Pull #11):\n  - Exceptions raised in the context manager body or during shutdown are now properly propagated.\n  - Unsupported lifespan is now also detected when the app calls `send()` before calling having called `receive()` at least once.\n\n## 0.4.0 (September 29, 2019)\n\n- Enter Alpha development status.\n\n## 0.3.1 (September 29, 2019)\n\n### Added\n\n- Add configurable timeouts to `LifespanManager`. (Pull #10)\n\n## 0.3.0 (September 29, 2019)\n\n### Added\n\n- Add `LifespanManager` for sending lifespan events into an ASGI app. (Pull #5)\n\n## 0.2.0 (September 28, 2019)\n\n### Added\n\n- Add `LifespanMiddleware`, an ASGI middleware to add lifespan support to an ASGI app. (Pull #9)\n\n## 0.1.0 (September 28, 2019)\n\n### Added\n\n- Add `Lifespan`, an ASGI app implementing the lifespan protocol with event handler registration support. (Pull #7)\n\n## 0.0.2 (September 28, 2019)\n\n### Fixed\n\n- Installation from PyPI used to fail due to missing `MANIFEST.in`.\n\n## 0.0.1 (September 28, 2019)\n\n### Added\n\n- Empty package.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/florimondmanca/asgi-lifespan", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "asgi-lifespan", "package_url": "https://pypi.org/project/asgi-lifespan/", "platform": "", "project_url": "https://pypi.org/project/asgi-lifespan/", "project_urls": {"Homepage": "https://github.com/florimondmanca/asgi-lifespan"}, "release_url": "https://pypi.org/project/asgi-lifespan/1.0.0/", "requires_dist": ["sniffio", "async-exit-stack ; python_version < \"3.7\""], "requires_python": ">=3.6", "summary": "Programmatic startup/shutdown of ASGI apps.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>asgi-lifespan</h1>\n<p><a href=\"https://travis-ci.com/florimondmanca/asgi-lifespan\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9146b8d61896bedce32c04cbd641f7a3a7f73096/68747470733a2f2f7472617669732d63692e636f6d2f666c6f72696d6f6e646d616e63612f617367692d6c6966657370616e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/florimondmanca/asgi-lifespan\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02d8f0ae05cb27a4c30334b700419540872de021/68747470733a2f2f636f6465636f762e696f2f67682f666c6f72696d6f6e646d616e63612f617367692d6c6966657370616e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/asgi-lifespan\" rel=\"nofollow\"><img alt=\"Package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cba32b7164f138c3788d76df30a051878ab8c417/68747470733a2f2f62616467652e667572792e696f2f70792f617367692d6c6966657370616e2e737667\"></a></p>\n<p>Programmatically send startup/shutdown <a href=\"https://asgi.readthedocs.io/en/latest/specs/lifespan.html\" rel=\"nofollow\">lifespan</a> events into <a href=\"https://asgi.readthedocs.io\" rel=\"nofollow\">ASGI</a> applications. When used in combination with an ASGI-capable HTTP client such as <a href=\"https://www.python-httpx.org\" rel=\"nofollow\">HTTPX</a>, this allows mocking or testing ASGI applications without having to spin up an ASGI server.</p>\n<h2>Features</h2>\n<ul>\n<li>Send lifespan events to an ASGI app using <code>LifespanManager</code>.</li>\n<li>Support for <a href=\"https://docs.python.org/3/library/asyncio\" rel=\"nofollow\"><code>asyncio</code></a> and <a href=\"https://trio.readthedocs.io\" rel=\"nofollow\"><code>trio</code></a>.</li>\n<li>Fully type-annotated.</li>\n<li>100% test coverage.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: <code>asgi-lifespan==1.0.0</code> dropped the <code>Lifespan</code> and <code>LifespanMiddleware</code> helpers. If you need to add lifespan support to an ASGI application, consider using the lifespan-capable <code>Router</code> class provided by <a href=\"https://www.starlette.io\" rel=\"nofollow\">Starlette</a>.</p>\n</blockquote>\n<h2>Installation</h2>\n<pre>pip install <span class=\"s1\">'asgi-lifespan==1.*'</span>\n</pre>\n<h2>Usage</h2>\n<p><code>asgi-lifespan</code> provides a <code>LifespanManager</code> to programmatically send ASGI lifespan events into an ASGI app. This can be used to programmatically startup/shutdown an ASGI app without having to spin up an ASGI server.</p>\n<p><code>LifespanManager</code> can run on either <code>asyncio</code> or <code>trio</code>, and will auto-detect the async library in use.</p>\n<h3>Basic usage</h3>\n<pre><span class=\"c1\"># example.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">asgi_lifespan</span> <span class=\"kn\">import</span> <span class=\"n\">LifespanManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n\n<span class=\"c1\"># Example lifespan-capable ASGI app. Any ASGI app that supports</span>\n<span class=\"c1\"># the lifespan protocol will do, e.g. FastAPI, Quart, Responder, ...</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">(</span>\n    <span class=\"n\">on_startup</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Starting up!\"</span><span class=\"p\">)],</span>\n    <span class=\"n\">on_shutdown</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Shutting down!\"</span><span class=\"p\">)],</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">LifespanManager</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"We're in!\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># On asyncio:</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"p\">;</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># On trio:</span>\n<span class=\"c1\"># import trio; trio.run(main)</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"gp\">$</span> python example.py\n<span class=\"go\">Starting up!</span>\n<span class=\"go\">We're in!</span>\n<span class=\"go\">Shutting down!</span>\n</pre>\n<h3>Sending lifespan events for testing</h3>\n<p>The example below demonstrates how to use <code>asgi-lifespan</code> in conjunction with <a href=\"https://www.python-httpx.org\" rel=\"nofollow\">HTTPX</a> and <code>pytest</code> in order to send test requests into an ASGI app.</p>\n<ul>\n<li>Install dependencies:</li>\n</ul>\n<pre><code>pip install asgi-lifespan httpx starlette pytest pytest-asyncio\n</code></pre>\n<ul>\n<li>Test script:</li>\n</ul>\n<pre><span class=\"c1\"># test_app.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">asgi_lifespan</span> <span class=\"kn\">import</span> <span class=\"n\">LifespanManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">PlainTextResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.routing</span> <span class=\"kn\">import</span> <span class=\"n\">Route</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">app</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">startup</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Starting up\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">shutdown</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Shutting down\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, world!\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">(</span>\n        <span class=\"n\">routes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">home</span><span class=\"p\">)],</span>\n        <span class=\"n\">on_startup</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">startup</span><span class=\"p\">],</span>\n        <span class=\"n\">on_shutdown</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">shutdown</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">LifespanManager</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"We're in!\"</span><span class=\"p\">)</span>\n        <span class=\"k\">yield</span> <span class=\"n\">app</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">client</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s2\">\"http://app.io\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Client is ready\"</span><span class=\"p\">)</span>\n        <span class=\"k\">yield</span> <span class=\"n\">client</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">asyncio</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_home</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Testing\"</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s2\">\"Hello, world!\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"OK\"</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Run the test suite with <code>$ pytest -s test_app.py</code>:</li>\n</ul>\n<pre><span class=\"gp\">$</span> pytest -s debug/test_app.py\n<span class=\"go\">======================= test session starts =======================</span>\n<span class=\"go\">platform darwin -- Python 3.8.0, pytest-5.3.4, py-1.8.1, pluggy-0.13.1</span>\n<span class=\"go\">rootdir: /Users/florimond/Developer/florimondmanca-projects/asgi-lifespan, inifile: setup.cfg</span>\n<span class=\"go\">plugins: asyncio-0.10.0</span>\n\n\n<span class=\"go\">test_app.py Starting up</span>\n<span class=\"go\">We're in!</span>\n<span class=\"go\">Client is ready</span>\n<span class=\"go\">Testing</span>\n<span class=\"go\">OK</span>\n<span class=\"go\">.Shutting down</span>\n\n<span class=\"go\">======================= 1 passed in 0.88s =======================</span>\n</pre>\n<h2>API Reference</h2>\n<h3><code>LifespanManager</code></h3>\n<pre><span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n    <span class=\"bp\">self</span><span class=\"p\">,</span>\n    <span class=\"n\">app</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">,</span>\n    <span class=\"n\">startup_timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"n\">shutdown_timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>An <a href=\"https://docs.python.org/3/reference/datamodel.html#async-context-managers\" rel=\"nofollow\">asynchronous context manager</a> that starts up an ASGI app on enter and shuts it down on exit.</p>\n<p>More precisely:</p>\n<ul>\n<li>On enter, start a <code>lifespan</code> request to <code>app</code> in the background, then send the <code>lifespan.startup</code> event and wait for the application to send <code>lifespan.startup.complete</code>.</li>\n<li>On exit, send the <code>lifespan.shutdown</code> event and wait for the application to send <code>lifespan.shutdown.complete</code>.</li>\n<li>If an exception occurs during startup, shutdown, or in the body of the <code>async with</code> block, it bubbles up and no shutdown is performed.</li>\n</ul>\n<p><strong>Example</strong></p>\n<pre><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">LifespanManager</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 'app' was started up.</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># 'app' was shut down.</span>\n</pre>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><code>app</code> (<code>Callable</code>): an ASGI application.</li>\n<li><code>startup_timeout</code> (<code>Optional[float]</code>, defaults to 5): maximum number of seconds to wait for the application to startup. Use <code>None</code> for no timeout.</li>\n<li><code>shutdown_timeout</code> (<code>Optional[float]</code>, defaults to 5): maximum number of seconds to wait for the application to shutdown. Use <code>None</code> for no timeout.</li>\n</ul>\n<p><strong>Raises</strong></p>\n<ul>\n<li><code>LifespanNotSupported</code>: if the application does not seem to support the lifespan protocol. Based on the rationale that if the app supported the lifespan protocol then it would successfully receive the <code>lifespan.startup</code> ASGI event, unsupported lifespan protocol is detected in two situations:\n<ul>\n<li>The application called <code>send()</code> before calling <code>receive()</code> for the first time.</li>\n<li>The application raised an exception during startup before making its first call to <code>receive()</code>. For example, this may be because the application failed on a statement such as <code>assert scope[\"type\"] == \"http\"</code>.</li>\n</ul>\n</li>\n<li><code>TimeoutError</code>: if startup or shutdown timed out.</li>\n<li><code>Exception</code>: any exception raised by the application (during startup, shutdown, or within the <code>async with</code> body) that does not indicate it does not support the lifespan protocol.</li>\n</ul>\n<h2>License</h2>\n<p>MIT</p>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>.</p>\n<h2>1.0.0 (February 2, 2020)</h2>\n<h3>Removed</h3>\n<ul>\n<li>Drop <code>Lifespan</code> and <code>LifespanMiddleware</code>. Please use Starlette's built-in lifespan capabilities instead. (Pull #27)</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>\n<p>Use <code>sniffio</code> for auto-detecting the async environment. (Pull #28)</p>\n</li>\n<li>\n<p>Enforce 100% test coverage on CI. (Pull #29)</p>\n</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Enforce importing from the top-level package by switching to private internal modules. (Pull #26)</li>\n</ul>\n<h2>0.6.0 (November 29, 2019)</h2>\n<h3>Changed</h3>\n<ul>\n<li>Move <code>Lifespan</code> to the <code>lifespan</code> module. (Pull #21)</li>\n<li>Refactor <code>LifespanManager</code> to drop dependency on <code>asynccontextmanager</code> on 3.6. (Pull #20)</li>\n</ul>\n<h2>0.5.0 (November 29, 2019)</h2>\n<ul>\n<li>Enter Beta development status.</li>\n</ul>\n<h3>Removed</h3>\n<ul>\n<li>Remove <code>curio</code> support. (Pull #18)</li>\n</ul>\n<h3>Added</h3>\n<ul>\n<li>Ship binary distributions (wheels) alongside source distributions.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Use custom concurrency backends instead of <code>anyio</code> for asyncio and trio support. (Pull #18)</li>\n</ul>\n<h2>0.4.2 (October 6, 2019)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Ensure <code>py.typed</code> is bundled with the package so that type checkers can detect type annotations. (Pull #16)</li>\n</ul>\n<h2>0.4.1 (September 29, 2019)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Improve error handling in <code>LifespanManager</code> (Pull #11):\n<ul>\n<li>Exceptions raised in the context manager body or during shutdown are now properly propagated.</li>\n<li>Unsupported lifespan is now also detected when the app calls <code>send()</code> before calling having called <code>receive()</code> at least once.</li>\n</ul>\n</li>\n</ul>\n<h2>0.4.0 (September 29, 2019)</h2>\n<ul>\n<li>Enter Alpha development status.</li>\n</ul>\n<h2>0.3.1 (September 29, 2019)</h2>\n<h3>Added</h3>\n<ul>\n<li>Add configurable timeouts to <code>LifespanManager</code>. (Pull #10)</li>\n</ul>\n<h2>0.3.0 (September 29, 2019)</h2>\n<h3>Added</h3>\n<ul>\n<li>Add <code>LifespanManager</code> for sending lifespan events into an ASGI app. (Pull #5)</li>\n</ul>\n<h2>0.2.0 (September 28, 2019)</h2>\n<h3>Added</h3>\n<ul>\n<li>Add <code>LifespanMiddleware</code>, an ASGI middleware to add lifespan support to an ASGI app. (Pull #9)</li>\n</ul>\n<h2>0.1.0 (September 28, 2019)</h2>\n<h3>Added</h3>\n<ul>\n<li>Add <code>Lifespan</code>, an ASGI app implementing the lifespan protocol with event handler registration support. (Pull #7)</li>\n</ul>\n<h2>0.0.2 (September 28, 2019)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Installation from PyPI used to fail due to missing <code>MANIFEST.in</code>.</li>\n</ul>\n<h2>0.0.1 (September 28, 2019)</h2>\n<h3>Added</h3>\n<ul>\n<li>Empty package.</li>\n</ul>\n\n          </div>"}, "last_serial": 6557868, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "612fc468278d18ea18c4af7ea3ec6d6d", "sha256": "e970d0b21696fcebda2ad7c3151ee1f3105c6ce4e976cec2fae8501f3b85f523"}, "downloads": -1, "filename": "asgi-lifespan-0.0.1.tar.gz", "has_sig": false, "md5_digest": "612fc468278d18ea18c4af7ea3ec6d6d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4108, "upload_time": "2019-09-28T12:55:44", "upload_time_iso_8601": "2019-09-28T12:55:44.991175Z", "url": "https://files.pythonhosted.org/packages/4d/4f/1d49ee3124924f7f0d5f47ffa1284a4f79c1f3c3832cc040000e214aa0e1/asgi-lifespan-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "392791f487a6c61dc50e7f659984e6f5", "sha256": "b2743c5caa7690ca207cbf616f32ed047dc1580923b50a1bf9c1dcdb9a5dbbba"}, "downloads": -1, "filename": "asgi-lifespan-0.0.2.tar.gz", "has_sig": false, "md5_digest": "392791f487a6c61dc50e7f659984e6f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4927, "upload_time": "2019-09-28T12:59:45", "upload_time_iso_8601": "2019-09-28T12:59:45.717661Z", "url": "https://files.pythonhosted.org/packages/cd/ac/140b800d5280342d5a09e29c2a62c6e63738bfc884270f93ba5ba2a84c83/asgi-lifespan-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "52c6156e26fc53b974aa54b9256b6f75", "sha256": "0ee51a5cdee5ba3e3ad18379355b9bfc5f9e425043bf7f338e10c67b118d17c1"}, "downloads": -1, "filename": "asgi-lifespan-0.1.0.tar.gz", "has_sig": false, "md5_digest": "52c6156e26fc53b974aa54b9256b6f75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6048, "upload_time": "2019-09-28T18:35:08", "upload_time_iso_8601": "2019-09-28T18:35:08.340781Z", "url": "https://files.pythonhosted.org/packages/cf/92/25f8aaf365835cbfa65980e87d1506ebb0f03f1974c2fb090dd1bc4dbe43/asgi-lifespan-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b6c6bc8e1fa100c0498c6a66690fd017", "sha256": "b683710fd768c9a52a526bd49fb846dc6c6c623fb3f3f6aa54b243fa491b5ed2"}, "downloads": -1, "filename": "asgi-lifespan-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b6c6bc8e1fa100c0498c6a66690fd017", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6668, "upload_time": "2019-09-28T20:28:16", "upload_time_iso_8601": "2019-09-28T20:28:16.797592Z", "url": "https://files.pythonhosted.org/packages/bd/8d/bbb8e0bc6101a63a41bf759f1b24418042d63b7948c8e0e183ddb783604c/asgi-lifespan-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "6e18fc6455a95f93e83a033f7adc2c80", "sha256": "80d6c50dd9081b39189f0e661c07f50cae73394fcb37924e67fc814a8ec2f183"}, "downloads": -1, "filename": "asgi-lifespan-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6e18fc6455a95f93e83a033f7adc2c80", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9498, "upload_time": "2019-09-28T22:19:42", "upload_time_iso_8601": "2019-09-28T22:19:42.736994Z", "url": "https://files.pythonhosted.org/packages/6a/35/137628321659640bdefe9290c22941590d915ae283b0bfcf6463d9bc7f9c/asgi-lifespan-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "11e6869f519f9655e868cfa2397f9b55", "sha256": "e163f1de8650d2dbbbbb683797cc91f3df66cc009f01e1ec8595e3b2be4a7c00"}, "downloads": -1, "filename": "asgi-lifespan-0.3.1.tar.gz", "has_sig": false, "md5_digest": "11e6869f519f9655e868cfa2397f9b55", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9905, "upload_time": "2019-09-28T22:58:55", "upload_time_iso_8601": "2019-09-28T22:58:55.037058Z", "url": "https://files.pythonhosted.org/packages/ad/66/92d8cb4a73cecaa0ba00b379953a40d4c7acfb24110302b0d4b020ea74d5/asgi-lifespan-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "814ed665909ddd87cabcb955dce907f0", "sha256": "28b487d59538338b0d9861764441540fa030c22da7e1b5f0ae672485265032ef"}, "downloads": -1, "filename": "asgi-lifespan-0.4.0.tar.gz", "has_sig": false, "md5_digest": "814ed665909ddd87cabcb955dce907f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9979, "upload_time": "2019-09-28T23:06:42", "upload_time_iso_8601": "2019-09-28T23:06:42.222121Z", "url": "https://files.pythonhosted.org/packages/16/27/a35bed5558192663d074bfcdd1b45b2b7bc383aeeefabd92d009cfea4f75/asgi-lifespan-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "fadd97d00d64c442330753a6daefaf1a", "sha256": "f22cf83121313f3eafe8220fa2e86d8e35f9cdd0ef564f77882e360484ddf1db"}, "downloads": -1, "filename": "asgi-lifespan-0.4.1.tar.gz", "has_sig": false, "md5_digest": "fadd97d00d64c442330753a6daefaf1a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10405, "upload_time": "2019-09-28T23:24:30", "upload_time_iso_8601": "2019-09-28T23:24:30.600521Z", "url": "https://files.pythonhosted.org/packages/e0/d9/10b99ab8d76b6cc5608a4d10c55d1b160a61ccaec3498cc890f8b1bd684d/asgi-lifespan-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "448ff277e9fceac1ad8e6d488a1e5e9e", "sha256": "6ae6cf8d35e7b8d1cee878ed749898c47eb191d392a5fe3a4c71586dd3cec4fe"}, "downloads": -1, "filename": "asgi-lifespan-0.4.2.tar.gz", "has_sig": false, "md5_digest": "448ff277e9fceac1ad8e6d488a1e5e9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10559, "upload_time": "2019-10-06T21:38:25", "upload_time_iso_8601": "2019-10-06T21:38:25.112285Z", "url": "https://files.pythonhosted.org/packages/5b/9c/bf6c9bc2b347daeb6108e516ac73a422a544e9d3002892d4a28f3d44b2b8/asgi-lifespan-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "6bf7a189ad0699dd4d4dd73513540311", "sha256": "9bb89d6c54256c07e5cd15ddb7a88e2bf76d3f9c7540a3a8a20c1de1f7b891b8"}, "downloads": -1, "filename": "asgi_lifespan-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6bf7a189ad0699dd4d4dd73513540311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12535, "upload_time": "2019-11-29T07:55:33", "upload_time_iso_8601": "2019-11-29T07:55:33.504147Z", "url": "https://files.pythonhosted.org/packages/38/54/b8a3f896cc19c02d67102dc4507cf9458b04da21bd72cccedab4baf7baa4/asgi_lifespan-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "febbbfa835e7a031658a2fc601c00617", "sha256": "63f1c4b9c50483b549740a07e6d74eb86c322c74c8da861ef88531cc26cdd645"}, "downloads": -1, "filename": "asgi-lifespan-0.5.0.tar.gz", "has_sig": false, "md5_digest": "febbbfa835e7a031658a2fc601c00617", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14656, "upload_time": "2019-11-29T07:55:35", "upload_time_iso_8601": "2019-11-29T07:55:35.506264Z", "url": "https://files.pythonhosted.org/packages/62/b7/aea72177669bac07d68c00e91675ace8d43cf84f28cec589d2f68c908cc8/asgi-lifespan-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "1f30f58764c0aae1d0edaa7bdc870943", "sha256": "1446bd1f7974044a4af276462d54303797d33a41a300099a6eaca42426e4ab2e"}, "downloads": -1, "filename": "asgi_lifespan-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1f30f58764c0aae1d0edaa7bdc870943", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12134, "upload_time": "2019-11-29T17:58:48", "upload_time_iso_8601": "2019-11-29T17:58:48.726781Z", "url": "https://files.pythonhosted.org/packages/ff/e5/264e538fb31796195505dcbd460fd3d5fcc44f69250c18b23c17a9b62439/asgi_lifespan-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0b991c33a413f07adf5ba9e8b8d3276", "sha256": "7f4535466be71c2a0ee1a494f92b7f2b4f88d1edf6909f5e9bcb60125491c6f3"}, "downloads": -1, "filename": "asgi-lifespan-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e0b991c33a413f07adf5ba9e8b8d3276", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14387, "upload_time": "2019-11-29T17:58:50", "upload_time_iso_8601": "2019-11-29T17:58:50.418553Z", "url": "https://files.pythonhosted.org/packages/db/d4/80d89064d3e13429673d0fe97cdc0e21f49e6663673de73a21058d4e586a/asgi-lifespan-0.6.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "6b6d14e4111fac3aaff561e1c4f25f2f", "sha256": "1e1e4dfb2aa259f38cf3c55e58f9d3e25da9dd6e33190a3740fcca0e126b74e9"}, "downloads": -1, "filename": "asgi_lifespan-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6b6d14e4111fac3aaff561e1c4f25f2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10816, "upload_time": "2020-02-02T12:55:06", "upload_time_iso_8601": "2020-02-02T12:55:06.988545Z", "url": "https://files.pythonhosted.org/packages/0b/cf/5a9fd969fc726253db617d958836ccfad4b3230f83ba6f0cdd73853e3f55/asgi_lifespan-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7242af7f0f6440ce8561b6101a8ad72", "sha256": "fb73fe407cfaf258b9f067caea32462f9783985ce671953bad8b99355ce8a3d4"}, "downloads": -1, "filename": "asgi-lifespan-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e7242af7f0f6440ce8561b6101a8ad72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12807, "upload_time": "2020-02-02T12:55:09", "upload_time_iso_8601": "2020-02-02T12:55:09.010784Z", "url": "https://files.pythonhosted.org/packages/33/fc/4de42c435ea61ae8bc6c2e957be87a3551d3f9ad4a3c9d71fa0ab94d9c0d/asgi-lifespan-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6b6d14e4111fac3aaff561e1c4f25f2f", "sha256": "1e1e4dfb2aa259f38cf3c55e58f9d3e25da9dd6e33190a3740fcca0e126b74e9"}, "downloads": -1, "filename": "asgi_lifespan-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6b6d14e4111fac3aaff561e1c4f25f2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10816, "upload_time": "2020-02-02T12:55:06", "upload_time_iso_8601": "2020-02-02T12:55:06.988545Z", "url": "https://files.pythonhosted.org/packages/0b/cf/5a9fd969fc726253db617d958836ccfad4b3230f83ba6f0cdd73853e3f55/asgi_lifespan-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7242af7f0f6440ce8561b6101a8ad72", "sha256": "fb73fe407cfaf258b9f067caea32462f9783985ce671953bad8b99355ce8a3d4"}, "downloads": -1, "filename": "asgi-lifespan-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e7242af7f0f6440ce8561b6101a8ad72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12807, "upload_time": "2020-02-02T12:55:09", "upload_time_iso_8601": "2020-02-02T12:55:09.010784Z", "url": "https://files.pythonhosted.org/packages/33/fc/4de42c435ea61ae8bc6c2e957be87a3551d3f9ad4a3c9d71fa0ab94d9c0d/asgi-lifespan-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:01 2020"}