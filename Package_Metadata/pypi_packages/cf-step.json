{"info": {"author": "Dimitris Poulopoulos", "author_email": "dimitris.a.poulopoulos@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# CF STEP - Incremental Collaborative Filtering\n> Incremental learning for recommender systems\n\n\nCF STEP is an open-source library, written in python, that enables fast implementation of incremental learning recommender systems. The library is a by-product of the research project [CloudDBAppliance](https://clouddb.eu/).\n\n## Install\n\nRun `pip install cf-step` to install the library in your environment.\n\n## How to use\n\nFor this example, we will use the popular [movielens](https://grouplens.org/datasets/movielens/) dataset. The dataset has collected and made available rating data sets from the [MovieLens](http://movielens.org) web site. The data sets were collected over various periods of time, depending on the size of the set.\n\nFirst let us load the data in a pandas `DataFrame`. We assume that the reader has downloaded the 1m movielense dataset and have unziped it in the `/tmp` folder.\n\n> To avoid creating a user and movie vocabularies we turn each user and movie to a categorical feature and use the pandas convenient cat attribute to get the codes\n\n```python\n# local\n\n# load the data\ncol_names = ['user_id', 'movie_id', 'rating', 'timestamp']\nratings_df = pd.read_csv('/tmp/ratings.dat', delimiter='::', names=col_names, engine='python')\n\n# transform users and movies to categorical features\nratings_df['user_id'] = ratings_df['user_id'].astype('category')\nratings_df['movie_id'] = ratings_df['movie_id'].astype('category')\n\n# use the codes to avoid creating separate vocabularies\nratings_df['user_code'] = ratings_df['user_id'].cat.codes.astype(int)\nratings_df['movie_code'] = ratings_df['movie_id'].cat.codes.astype(int)\n\nratings_df.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>movie_id</th>\n      <th>rating</th>\n      <th>timestamp</th>\n      <th>user_code</th>\n      <th>movie_code</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1193</td>\n      <td>5</td>\n      <td>978300760</td>\n      <td>0</td>\n      <td>1104</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>661</td>\n      <td>3</td>\n      <td>978302109</td>\n      <td>0</td>\n      <td>639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>914</td>\n      <td>3</td>\n      <td>978301968</td>\n      <td>0</td>\n      <td>853</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>3408</td>\n      <td>4</td>\n      <td>978300275</td>\n      <td>0</td>\n      <td>3177</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>2355</td>\n      <td>5</td>\n      <td>978824291</td>\n      <td>0</td>\n      <td>2162</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nUsing the codes we can see how many users and movies are in the dataset.\n\n```python\n# local\nn_users = ratings_df['user_code'].max() + 1\nn_movies = ratings_df['movie_code'].max() + 1\n\nprint(f'There are {n_users} unique users and {n_movies} unique movies in the movielens dataset.')\n```\n\n    There are 6040 unique users and 3706 unique movies in the movielens dataset.\n\n\nWe will sort the data by Timestamp so as to simulate streaming events.\n\n```python\n# local\ndata_df = ratings_df.sort_values(by='timestamp')\n```\n\nThe `Step` model supports only positive feedback. Thus, we will consider a rating of 5 as positive feedback and discard any other. We want to identify likes with `1` and dislikes with `0`.\n\n```python\n# local\n# more than 4 -> 1, less than 5 -> 0\ndata_df['preference'] = np.where(data_df['rating'] > 4, 1, 0)\n# keep only ones and discard the others\ndata_df_cleaned = data_df.loc[data_df['preference'] == 1]\n\ndata_df_cleaned.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>movie_id</th>\n      <th>rating</th>\n      <th>timestamp</th>\n      <th>user_code</th>\n      <th>movie_code</th>\n      <th>preference</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>999873</th>\n      <td>6040</td>\n      <td>593</td>\n      <td>5</td>\n      <td>956703954</td>\n      <td>6039</td>\n      <td>579</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1000192</th>\n      <td>6040</td>\n      <td>2019</td>\n      <td>5</td>\n      <td>956703977</td>\n      <td>6039</td>\n      <td>1839</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>999920</th>\n      <td>6040</td>\n      <td>213</td>\n      <td>5</td>\n      <td>956704056</td>\n      <td>6039</td>\n      <td>207</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>999967</th>\n      <td>6040</td>\n      <td>3111</td>\n      <td>5</td>\n      <td>956704056</td>\n      <td>6039</td>\n      <td>2895</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>999971</th>\n      <td>6040</td>\n      <td>2503</td>\n      <td>5</td>\n      <td>956704191</td>\n      <td>6039</td>\n      <td>2309</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nFollowing, let us initialize our model.\n\n```python\n# local\nnet = SimpleCF(n_users, n_movies, factors=128, mean=0., std=.1)\nobjective = lambda pred, targ: targ - pred\noptimizer = SGD(net.parameters(), lr=0.06)\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nmodel = Step(net, objective, optimizer, device=device)\n```\n\nFinally, let us get 20% of the data to fit the model for bootstrapping and create the Pytorch Dataset that we will use.\n\n```python\n# local\npct = int(data_df_cleaned.shape[0] * .2)\nbootstrapping_data = data_df_cleaned[:pct]\n```\n\nWe will create a dataset from our Dataframe. We extract four elements:\n\n* The user code\n* The movie code\n* The rating\n* The preference\n\n```python\n# local\nfeatures = ['user_code', 'movie_code', 'rating']\ntarget = ['preference']\n\ndata_set = TensorDataset(torch.tensor(bootstrapping_data[features].values), \n                         torch.tensor(bootstrapping_data[target].values))\n```\n\nCreate the Pytorch DataLoader that we will use. Batch size should always be `1` for online training.\n\n```python\n# local\ndata_loader = DataLoader(data_set, batch_size=512, shuffle=False)\n```\n\nLet us now use the *batch_fit()* method of the *Step* trainer to bootstrap our model. \n\n```python\n# local\nmodel.batch_fit(data_loader)\n```\n\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 89/89 [00:01<00:00, 81.00it/s]\n\n\nThen, to simulate streaming we get the remaining data and create a different data set.\n\n```python\n# local\ndata_df_step = data_df_cleaned.drop(bootstrapping_data.index)\ndata_df_step = data_df_step.reset_index(drop=True)\ndata_df_step.head()\n\n# create the DataLoader\nstream_data_set = TensorDataset(torch.tensor(data_df_step[features].values), \n                                torch.tensor(data_df_step[target].values))\nstream_data_loader = DataLoader(stream_data_set, batch_size=1, shuffle=False)\n```\n\nSimulate the stream...\n\n```python\n# local\nk = 10 # we keep only the top 10 recommendations\nrecalls = []\nknown_users = []\n\nwith tqdm(total=len(stream_data_loader)) as pbar:\n    for idx, (features, preferences) in enumerate(stream_data_loader):\n        itr = idx + 1\n\n        user = features[:, 0]\n        item = features[:, 1]\n        rtng = features[:, 2]\n        pref = preferences\n\n        if user.item() in known_users:\n            predictions = model.predict(user, k)\n            recall = recall_at_k(predictions.tolist(), item.tolist(), k)\n            recalls.append(recall)\n            model.step(user, item, rtng, pref)\n        else:\n            model.step(user, item, rtng, pref)\n\n        known_users.append(user.item())\n        pbar.update(1)\n```\n\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 181048/181048 [15:23<00:00, 195.94it/s]\n\n\nLast but not least, we visualize the results of the recall@10 metric, using a moving average window of 5k elements. \n\n```python\n# local\navgs = moving_avg(recalls, 5000)\n\nplt.title('Recall@10')\nplt.xlabel('Iterations')\nplt.ylabel('Metric')\nplt.ylim(0., .1)\nplt.plot(avgs)\nplt.show()\n```\n\n\n![png](docs/images/output_27_0.png)\n\n\nFinally, save the model's weights.\n\n```python\n# local\nmodel.save(os.path.join('artefacts', 'positive_step.pt'))\n```\n\n## References\n\n1. Vinagre, J., Jorge, A. M., & Gama, J. (2014, July). Fast incremental matrix factorization for recommendation with positive-only feedback. In International Conference on User Modeling, Adaptation, and Personalization (pp. 459-470). Springer, Cham.\n2. Hu, Y., Koren, Y., & Volinsky, C. (2008, December). Collaborative filtering for implicit feedback datasets. In 2008 Eighth IEEE International Conference on Data Mining (pp. 263-272). Ieee.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dpoulopoulos/cf_step", "keywords": "recommender systems,recommendation systems,matrix factorization,incremental learning,machine learning,pytorch", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "cf-step", "package_url": "https://pypi.org/project/cf-step/", "platform": "", "project_url": "https://pypi.org/project/cf-step/", "project_urls": {"Homepage": "https://github.com/dpoulopoulos/cf_step"}, "release_url": "https://pypi.org/project/cf-step/0.2.3/", "requires_dist": ["torch (>=1.3.0)", "tqdm", "pandas", "matplotlib"], "requires_python": ">=3.6", "summary": "Incremental collaborative filtering algorithms for recommender systems", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CF STEP - Incremental Collaborative Filtering</h1>\n<blockquote>\n<p>Incremental learning for recommender systems</p>\n</blockquote>\n<p>CF STEP is an open-source library, written in python, that enables fast implementation of incremental learning recommender systems. The library is a by-product of the research project <a href=\"https://clouddb.eu/\" rel=\"nofollow\">CloudDBAppliance</a>.</p>\n<h2>Install</h2>\n<p>Run <code>pip install cf-step</code> to install the library in your environment.</p>\n<h2>How to use</h2>\n<p>For this example, we will use the popular <a href=\"https://grouplens.org/datasets/movielens/\" rel=\"nofollow\">movielens</a> dataset. The dataset has collected and made available rating data sets from the <a href=\"http://movielens.org\" rel=\"nofollow\">MovieLens</a> web site. The data sets were collected over various periods of time, depending on the size of the set.</p>\n<p>First let us load the data in a pandas <code>DataFrame</code>. We assume that the reader has downloaded the 1m movielense dataset and have unziped it in the <code>/tmp</code> folder.</p>\n<blockquote>\n<p>To avoid creating a user and movie vocabularies we turn each user and movie to a categorical feature and use the pandas convenient cat attribute to get the codes</p>\n</blockquote>\n<pre><span class=\"c1\"># local</span>\n\n<span class=\"c1\"># load the data</span>\n<span class=\"n\">col_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">,</span> <span class=\"s1\">'movie_id'</span><span class=\"p\">,</span> <span class=\"s1\">'rating'</span><span class=\"p\">,</span> <span class=\"s1\">'timestamp'</span><span class=\"p\">]</span>\n<span class=\"n\">ratings_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/ratings.dat'</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">'::'</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">col_names</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"s1\">'python'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># transform users and movies to categorical features</span>\n<span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">'category'</span><span class=\"p\">)</span>\n<span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'movie_id'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'movie_id'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">'category'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># use the codes to avoid creating separate vocabularies</span>\n<span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'user_code'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"n\">codes</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'movie_code'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'movie_id'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"n\">codes</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"n\">ratings_df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>user_id</th>\n      <th>movie_id</th>\n      <th>rating</th>\n      <th>timestamp</th>\n      <th>user_code</th>\n      <th>movie_code</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1193</td>\n      <td>5</td>\n      <td>978300760</td>\n      <td>0</td>\n      <td>1104</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>661</td>\n      <td>3</td>\n      <td>978302109</td>\n      <td>0</td>\n      <td>639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>914</td>\n      <td>3</td>\n      <td>978301968</td>\n      <td>0</td>\n      <td>853</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>3408</td>\n      <td>4</td>\n      <td>978300275</td>\n      <td>0</td>\n      <td>3177</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>2355</td>\n      <td>5</td>\n      <td>978824291</td>\n      <td>0</td>\n      <td>2162</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>Using the codes we can see how many users and movies are in the dataset.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">n_users</span> <span class=\"o\">=</span> <span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'user_code'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">n_movies</span> <span class=\"o\">=</span> <span class=\"n\">ratings_df</span><span class=\"p\">[</span><span class=\"s1\">'movie_code'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'There are </span><span class=\"si\">{</span><span class=\"n\">n_users</span><span class=\"si\">}</span><span class=\"s1\"> unique users and </span><span class=\"si\">{</span><span class=\"n\">n_movies</span><span class=\"si\">}</span><span class=\"s1\"> unique movies in the movielens dataset.'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>There are 6040 unique users and 3706 unique movies in the movielens dataset.\n</code></pre>\n<p>We will sort the data by Timestamp so as to simulate streaming events.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">data_df</span> <span class=\"o\">=</span> <span class=\"n\">ratings_df</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"s1\">'timestamp'</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>Step</code> model supports only positive feedback. Thus, we will consider a rating of 5 as positive feedback and discard any other. We want to identify likes with <code>1</code> and dislikes with <code>0</code>.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"c1\"># more than 4 -&gt; 1, less than 5 -&gt; 0</span>\n<span class=\"n\">data_df</span><span class=\"p\">[</span><span class=\"s1\">'preference'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">data_df</span><span class=\"p\">[</span><span class=\"s1\">'rating'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># keep only ones and discard the others</span>\n<span class=\"n\">data_df_cleaned</span> <span class=\"o\">=</span> <span class=\"n\">data_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">data_df</span><span class=\"p\">[</span><span class=\"s1\">'preference'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">data_df_cleaned</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>user_id</th>\n      <th>movie_id</th>\n      <th>rating</th>\n      <th>timestamp</th>\n      <th>user_code</th>\n      <th>movie_code</th>\n      <th>preference</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>999873</th>\n      <td>6040</td>\n      <td>593</td>\n      <td>5</td>\n      <td>956703954</td>\n      <td>6039</td>\n      <td>579</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1000192</th>\n      <td>6040</td>\n      <td>2019</td>\n      <td>5</td>\n      <td>956703977</td>\n      <td>6039</td>\n      <td>1839</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>999920</th>\n      <td>6040</td>\n      <td>213</td>\n      <td>5</td>\n      <td>956704056</td>\n      <td>6039</td>\n      <td>207</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>999967</th>\n      <td>6040</td>\n      <td>3111</td>\n      <td>5</td>\n      <td>956704056</td>\n      <td>6039</td>\n      <td>2895</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>999971</th>\n      <td>6040</td>\n      <td>2503</td>\n      <td>5</td>\n      <td>956704191</td>\n      <td>6039</td>\n      <td>2309</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>Following, let us initialize our model.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">SimpleCF</span><span class=\"p\">(</span><span class=\"n\">n_users</span><span class=\"p\">,</span> <span class=\"n\">n_movies</span><span class=\"p\">,</span> <span class=\"n\">factors</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">=.</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">objective</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">targ</span><span class=\"p\">:</span> <span class=\"n\">targ</span> <span class=\"o\">-</span> <span class=\"n\">pred</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">SGD</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.06</span><span class=\"p\">)</span>\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"s1\">'cuda'</span> <span class=\"k\">if</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">is_available</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"s1\">'cpu'</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, let us get 20% of the data to fit the model for bootstrapping and create the Pytorch Dataset that we will use.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">pct</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">data_df_cleaned</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">bootstrapping_data</span> <span class=\"o\">=</span> <span class=\"n\">data_df_cleaned</span><span class=\"p\">[:</span><span class=\"n\">pct</span><span class=\"p\">]</span>\n</pre>\n<p>We will create a dataset from our Dataframe. We extract four elements:</p>\n<ul>\n<li>The user code</li>\n<li>The movie code</li>\n<li>The rating</li>\n<li>The preference</li>\n</ul>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'user_code'</span><span class=\"p\">,</span> <span class=\"s1\">'movie_code'</span><span class=\"p\">,</span> <span class=\"s1\">'rating'</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'preference'</span><span class=\"p\">]</span>\n\n<span class=\"n\">data_set</span> <span class=\"o\">=</span> <span class=\"n\">TensorDataset</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">(</span><span class=\"n\">bootstrapping_data</span><span class=\"p\">[</span><span class=\"n\">features</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">),</span> \n                         <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">(</span><span class=\"n\">bootstrapping_data</span><span class=\"p\">[</span><span class=\"n\">target</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">))</span>\n</pre>\n<p>Create the Pytorch DataLoader that we will use. Batch size should always be <code>1</code> for online training.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">data_loader</span> <span class=\"o\">=</span> <span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">data_set</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Let us now use the <em>batch_fit()</em> method of the <em>Step</em> trainer to bootstrap our model.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">batch_fit</span><span class=\"p\">(</span><span class=\"n\">data_loader</span><span class=\"p\">)</span>\n</pre>\n<pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 89/89 [00:01&lt;00:00, 81.00it/s]\n</code></pre>\n<p>Then, to simulate streaming we get the remaining data and create a different data set.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">data_df_step</span> <span class=\"o\">=</span> <span class=\"n\">data_df_cleaned</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">bootstrapping_data</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"n\">data_df_step</span> <span class=\"o\">=</span> <span class=\"n\">data_df_step</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">(</span><span class=\"n\">drop</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data_df_step</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create the DataLoader</span>\n<span class=\"n\">stream_data_set</span> <span class=\"o\">=</span> <span class=\"n\">TensorDataset</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">(</span><span class=\"n\">data_df_step</span><span class=\"p\">[</span><span class=\"n\">features</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">),</span> \n                                <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">(</span><span class=\"n\">data_df_step</span><span class=\"p\">[</span><span class=\"n\">target</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">))</span>\n<span class=\"n\">stream_data_loader</span> <span class=\"o\">=</span> <span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">stream_data_set</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Simulate the stream...</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"c1\"># we keep only the top 10 recommendations</span>\n<span class=\"n\">recalls</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">known_users</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">stream_data_loader</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">pbar</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">preferences</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">stream_data_loader</span><span class=\"p\">):</span>\n        <span class=\"n\">itr</span> <span class=\"o\">=</span> <span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">features</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">features</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">rtng</span> <span class=\"o\">=</span> <span class=\"n\">features</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">pref</span> <span class=\"o\">=</span> <span class=\"n\">preferences</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">known_users</span><span class=\"p\">:</span>\n            <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n            <span class=\"n\">recall</span> <span class=\"o\">=</span> <span class=\"n\">recall_at_k</span><span class=\"p\">(</span><span class=\"n\">predictions</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">(),</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">(),</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n            <span class=\"n\">recalls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">recall</span><span class=\"p\">)</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">rtng</span><span class=\"p\">,</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">rtng</span><span class=\"p\">,</span> <span class=\"n\">pref</span><span class=\"p\">)</span>\n\n        <span class=\"n\">known_users</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">())</span>\n        <span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 181048/181048 [15:23&lt;00:00, 195.94it/s]\n</code></pre>\n<p>Last but not least, we visualize the results of the recall@10 metric, using a moving average window of 5k elements.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">avgs</span> <span class=\"o\">=</span> <span class=\"n\">moving_avg</span><span class=\"p\">(</span><span class=\"n\">recalls</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Recall@10'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Iterations'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Metric'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">avgs</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/147ac684a937eaebf7ac2f7ea11a2d7536cc649e/646f63732f696d616765732f6f75747075745f32375f302e706e67\"></p>\n<p>Finally, save the model's weights.</p>\n<pre><span class=\"c1\"># local</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'artefacts'</span><span class=\"p\">,</span> <span class=\"s1\">'positive_step.pt'</span><span class=\"p\">))</span>\n</pre>\n<h2>References</h2>\n<ol>\n<li>Vinagre, J., Jorge, A. M., &amp; Gama, J. (2014, July). Fast incremental matrix factorization for recommendation with positive-only feedback. In International Conference on User Modeling, Adaptation, and Personalization (pp. 459-470). Springer, Cham.</li>\n<li>Hu, Y., Koren, Y., &amp; Volinsky, C. (2008, December). Collaborative filtering for implicit feedback datasets. In 2008 Eighth IEEE International Conference on Data Mining (pp. 263-272). Ieee.</li>\n</ol>\n\n          </div>"}, "last_serial": 6724083, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6145c71d9207bb220b620f5025c6de1e", "sha256": "a4601326d74c8c7d9abf055ad33de28100fc2c53abbad712f8ef91bfb5610e6b"}, "downloads": -1, "filename": "cf_step-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6145c71d9207bb220b620f5025c6de1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11921, "upload_time": "2020-02-04T09:40:11", "upload_time_iso_8601": "2020-02-04T09:40:11.106785Z", "url": "https://files.pythonhosted.org/packages/45/a3/ce81a48ab80d5421485ecd905d09e5a3a48da4f45671eb5d634b90c4ce54/cf_step-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef4ddf0e6f816796b6c8eb9ee623c283", "sha256": "014bb930124394f792d0f9a91c792d1b956b5e0f0d9b7c75c2d5228e05d2ab79"}, "downloads": -1, "filename": "cf_step-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ef4ddf0e6f816796b6c8eb9ee623c283", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14352, "upload_time": "2020-02-04T09:40:14", "upload_time_iso_8601": "2020-02-04T09:40:14.350279Z", "url": "https://files.pythonhosted.org/packages/40/53/70fdfaaae9501a26dcda6fe3633ff7acddc83fda90ee998201afca69b3d8/cf_step-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "995c39a063e45081abd38d3148639377", "sha256": "078a6654f37f8ce949e701c2264da1a4b40cebdb5df5ac3e95f583416c969cc5"}, "downloads": -1, "filename": "cf_step-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "995c39a063e45081abd38d3148639377", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13254, "upload_time": "2020-02-15T18:26:21", "upload_time_iso_8601": "2020-02-15T18:26:21.993161Z", "url": "https://files.pythonhosted.org/packages/47/4c/f13cd423fcc8eac11dceab2452420e9b88522b44198060c88b4c759bf77a/cf_step-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "052d937645ae4e4e1970ede95f69a855", "sha256": "1304d1fa1f2b9b62355379c15e8a43496615b507955d80aa2f6ac777d576ec93"}, "downloads": -1, "filename": "cf_step-0.2.1.tar.gz", "has_sig": false, "md5_digest": "052d937645ae4e4e1970ede95f69a855", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17673, "upload_time": "2020-02-15T18:26:24", "upload_time_iso_8601": "2020-02-15T18:26:24.343196Z", "url": "https://files.pythonhosted.org/packages/9a/eb/12ba062b25695144464cac8bfc3db129b42d27fae0419eb9148ecd773539/cf_step-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "10d117c821c019e9e13d41980843c8bf", "sha256": "e5809ebb8d0e802e049c9bd7ec9c8c6f8ac65a4d34eaf29d62223012d734ccc9"}, "downloads": -1, "filename": "cf_step-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "10d117c821c019e9e13d41980843c8bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13324, "upload_time": "2020-02-18T06:59:24", "upload_time_iso_8601": "2020-02-18T06:59:24.125828Z", "url": "https://files.pythonhosted.org/packages/04/75/f6983f1b79f9e98fd98f7e07aae828cee43d81e7111c9444c3c9bd0932c6/cf_step-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51fdac0d6895229aca9cf29a9a6a0948", "sha256": "a883accbf3ab1c8c0078003d7d1aff0ceed04edddf05533cd99de24a9692286f"}, "downloads": -1, "filename": "cf_step-0.2.2.tar.gz", "has_sig": false, "md5_digest": "51fdac0d6895229aca9cf29a9a6a0948", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17832, "upload_time": "2020-02-18T06:59:25", "upload_time_iso_8601": "2020-02-18T06:59:25.918835Z", "url": "https://files.pythonhosted.org/packages/e3/6b/d824f79e115ce3e1f19849e2de7e41d2c71004a77b11bf320ce5d0921929/cf_step-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "82b051cc9a975e89137b5e29a4864aea", "sha256": "79a226faa5b0d4f706dbe5cc1f94ac9c9ffeb62518909acab310b30606a84b2e"}, "downloads": -1, "filename": "cf_step-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "82b051cc9a975e89137b5e29a4864aea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13365, "upload_time": "2020-02-29T11:36:10", "upload_time_iso_8601": "2020-02-29T11:36:10.585935Z", "url": "https://files.pythonhosted.org/packages/3a/1b/b9eb8cd769d8ec1d70ed1ab41d892a19a3a4ead575570cfaf469099f4d9d/cf_step-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f37240d110a09894434884f7791dfc4", "sha256": "b76718ff9ad63fc1db58389e7705d1095ec35a3717ac2b09961a812f8a3aae95"}, "downloads": -1, "filename": "cf_step-0.2.3.tar.gz", "has_sig": false, "md5_digest": "8f37240d110a09894434884f7791dfc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17862, "upload_time": "2020-02-29T11:36:12", "upload_time_iso_8601": "2020-02-29T11:36:12.404692Z", "url": "https://files.pythonhosted.org/packages/2f/00/29c9011bbfee92a1203353507e3a9bf9c0d5f23a7feebd3f7f13dd2d0ad4/cf_step-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82b051cc9a975e89137b5e29a4864aea", "sha256": "79a226faa5b0d4f706dbe5cc1f94ac9c9ffeb62518909acab310b30606a84b2e"}, "downloads": -1, "filename": "cf_step-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "82b051cc9a975e89137b5e29a4864aea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13365, "upload_time": "2020-02-29T11:36:10", "upload_time_iso_8601": "2020-02-29T11:36:10.585935Z", "url": "https://files.pythonhosted.org/packages/3a/1b/b9eb8cd769d8ec1d70ed1ab41d892a19a3a4ead575570cfaf469099f4d9d/cf_step-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f37240d110a09894434884f7791dfc4", "sha256": "b76718ff9ad63fc1db58389e7705d1095ec35a3717ac2b09961a812f8a3aae95"}, "downloads": -1, "filename": "cf_step-0.2.3.tar.gz", "has_sig": false, "md5_digest": "8f37240d110a09894434884f7791dfc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17862, "upload_time": "2020-02-29T11:36:12", "upload_time_iso_8601": "2020-02-29T11:36:12.404692Z", "url": "https://files.pythonhosted.org/packages/2f/00/29c9011bbfee92a1203353507e3a9bf9c0d5f23a7feebd3f7f13dd2d0ad4/cf_step-0.2.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:37 2020"}