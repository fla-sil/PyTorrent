{"info": {"author": "T.Kameyama", "author_email": "tkamenoko@vivaldi.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Documentation"], "description": "# inari\n\nWrite docstrings in Markdown!\n\n# Features\n\n* Minimum configuration.\n* No dependencies by default(but [MkDocs](https://www.mkdocs.org/) is recommended!).\n* CLI and MkDocs Plugin.\n* Cross reference in API documents.\n\n# Install\n\n```shell\npip install inari[mkdocs]\n```\n\n# Example\n\n```python\n# sample.py\n\"\"\"This is a sample module.\"\"\"\n\nvariable = 42\n\"\"\"(`int`):  Docstrings for module-level variables.\"\"\"\n\ndef func(foo: str, bar: int) -> str:\n    \"\"\"\n    Docstrings for functions.\n\n    **Args**\n\n    * foo (`str`): First argument.\n    * bar (`int`): Second argument.\n\n    **Returns**\n\n    * `str`: Type of return value.\n\n    \"\"\"\n    return foo * bar\n\nclass SampleClass:\n    \"\"\"\n    Class docstrings.\n\n    **Attributes**\n\n    * baz (`str`): Docstrings for attributes.\n\n    \"\"\"\n    baz: str\n\n    def __init__(self, b: str):\n        \"\"\"\n        **Args**\n\n        * b (`str`): Arguments for initializing.\n\n        \"\"\"\n\n        self.baz = b\n\n    def method(self, bar: int) -> str:\n        \"\"\"\n        Method docstrings.\n\n        Cross reference available. `sample.func`\n\n        **Args**\n\n        * bar(`int`)\n\n        **Returns**\n\n        * `str`\n\n        \"\"\"\n        return func(self.baz, bar)\n\n```\n\n```shell\ninari sample docs\n```\n\n`inari` makes this Markdown file:\n\n~~~markdown\n<!-- docs/sample-py.md -->\n# Module sample\n\nThis is a sample module.\n\n\n## Variables\n\n* **variable**{: #variable } (`int`):  Docstrings for module-level variables.\n\n## Classes\n\n### SampleClass {: #SampleClass }\n\n```python\nclass SampleClass(self, b: str)\n```\n\nClass docstrings.\n\n**Attributes**\n\n* **baz** (`str`): Docstrings for attributes.\n\n**Args**\n\n* **b** (`str`): Arguments for initializing.\n\n\n------\n\n#### Methods {: #SampleClass-methods }\n\n[**method**](#SampleClass.method){: #SampleClass.method }\n\n```python\ndef method(self, bar: int) -> str\n```\n\nMethod docstrings.\n\nCross reference available. [`func `](./#func)\n\n**Args**\n\n* **bar** (`int`)\n**Returns**\n\n* `str`\n\n## Functions\n\n### func {: #func }\n\n```python\ndef func(foo: str, bar: int) -> str\n```\n\nDocstrings for functions.\n\n**Args**\n\n* **foo** (`str`): First argument.\n* **bar** (`int`): Second argument.\n\n**Returns**\n\n* `str`: Type of return value.\n\n~~~\n\n# License\n\nMIT\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://tkamenoko.github.io/inari", "keywords": "mkdocs,documentation,docstrings", "license": "MIT", "maintainer": "T.Kameyama", "maintainer_email": "tkamenoko@vivaldi.net", "name": "inari", "package_url": "https://pypi.org/project/inari/", "platform": "", "project_url": "https://pypi.org/project/inari/", "project_urls": {"Documentation": "https://tkamenoko.github.io/inari", "Homepage": "https://tkamenoko.github.io/inari", "Repository": "https://github.com/tkamenoko/inari"}, "release_url": "https://pypi.org/project/inari/0.1.0/", "requires_dist": ["mkdocs; extra == \"mkdocs\""], "requires_python": ">=3.7", "summary": "Write docstrings in Markdown!", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>inari</h1>\n<p>Write docstrings in Markdown!</p>\n<h1>Features</h1>\n<ul>\n<li>Minimum configuration.</li>\n<li>No dependencies by default(but <a href=\"https://www.mkdocs.org/\" rel=\"nofollow\">MkDocs</a> is recommended!).</li>\n<li>CLI and MkDocs Plugin.</li>\n<li>Cross reference in API documents.</li>\n</ul>\n<h1>Install</h1>\n<pre>pip install inari<span class=\"o\">[</span>mkdocs<span class=\"o\">]</span>\n</pre>\n<h1>Example</h1>\n<pre><span class=\"c1\"># sample.py</span>\n<span class=\"sd\">\"\"\"This is a sample module.\"\"\"</span>\n\n<span class=\"n\">variable</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"sd\">\"\"\"(`int`):  Docstrings for module-level variables.\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Docstrings for functions.</span>\n\n<span class=\"sd\">    **Args**</span>\n\n<span class=\"sd\">    * foo (`str`): First argument.</span>\n<span class=\"sd\">    * bar (`int`): Second argument.</span>\n\n<span class=\"sd\">    **Returns**</span>\n\n<span class=\"sd\">    * `str`: Type of return value.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo</span> <span class=\"o\">*</span> <span class=\"n\">bar</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleClass</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Class docstrings.</span>\n\n<span class=\"sd\">    **Attributes**</span>\n\n<span class=\"sd\">    * baz (`str`): Docstrings for attributes.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">baz</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        **Args**</span>\n\n<span class=\"sd\">        * b (`str`): Arguments for initializing.</span>\n\n<span class=\"sd\">        \"\"\"</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">baz</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Method docstrings.</span>\n\n<span class=\"sd\">        Cross reference available. `sample.func`</span>\n\n<span class=\"sd\">        **Args**</span>\n\n<span class=\"sd\">        * bar(`int`)</span>\n\n<span class=\"sd\">        **Returns**</span>\n\n<span class=\"sd\">        * `str`</span>\n\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n<pre>inari sample docs\n</pre>\n<p><code>inari</code> makes this Markdown file:</p>\n<pre>&lt;!-- docs/sample-py.md --&gt;\n# Module sample\n\nThis is a sample module.\n\n\n## Variables\n\n* **variable**{: #variable } (`int`):  Docstrings for module-level variables.\n\n## Classes\n\n### SampleClass {: #SampleClass }\n\n```python\nclass SampleClass(self, b: str)\n```\n\nClass docstrings.\n\n**Attributes**\n\n* **baz** (`str`): Docstrings for attributes.\n\n**Args**\n\n* **b** (`str`): Arguments for initializing.\n\n\n------\n\n#### Methods {: #SampleClass-methods }\n\n[**method**](#SampleClass.method){: #SampleClass.method }\n\n```python\ndef method(self, bar: int) -&gt; str\n```\n\nMethod docstrings.\n\nCross reference available. [`func `](./#func)\n\n**Args**\n\n* **bar** (`int`)\n**Returns**\n\n* `str`\n\n## Functions\n\n### func {: #func }\n\n```python\ndef func(foo: str, bar: int) -&gt; str\n```\n\nDocstrings for functions.\n\n**Args**\n\n* **foo** (`str`): First argument.\n* **bar** (`int`): Second argument.\n\n**Returns**\n\n* `str`: Type of return value.\n</pre>\n<h1>License</h1>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 5769731, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "29fc8fe4bbbe06adde58fc966486aa73", "sha256": "51a76e160fe0811c86a4a0c639f27752d20d8b746a2464ea8deed84ca11cc473"}, "downloads": -1, "filename": "inari-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29fc8fe4bbbe06adde58fc966486aa73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9753, "upload_time": "2019-09-02T08:53:57", "upload_time_iso_8601": "2019-09-02T08:53:57.494792Z", "url": "https://files.pythonhosted.org/packages/ce/20/87d70b702be7916beb5e68101deeb15d11d6f3c21d88430d5638bbbcec1b/inari-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bd50964a4f93ee3cf6fb92622fdfa20", "sha256": "b62f4da76a60ee1bd53cd864b69bafd82cc5e8a0c5d53108cf1cadefa61e4ba2"}, "downloads": -1, "filename": "inari-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2bd50964a4f93ee3cf6fb92622fdfa20", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9600, "upload_time": "2019-09-02T08:54:00", "upload_time_iso_8601": "2019-09-02T08:54:00.204524Z", "url": "https://files.pythonhosted.org/packages/75/de/74d0c308f00f20fe1bacd253d492027d52245227533d91fc24eab315065c/inari-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29fc8fe4bbbe06adde58fc966486aa73", "sha256": "51a76e160fe0811c86a4a0c639f27752d20d8b746a2464ea8deed84ca11cc473"}, "downloads": -1, "filename": "inari-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29fc8fe4bbbe06adde58fc966486aa73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9753, "upload_time": "2019-09-02T08:53:57", "upload_time_iso_8601": "2019-09-02T08:53:57.494792Z", "url": "https://files.pythonhosted.org/packages/ce/20/87d70b702be7916beb5e68101deeb15d11d6f3c21d88430d5638bbbcec1b/inari-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bd50964a4f93ee3cf6fb92622fdfa20", "sha256": "b62f4da76a60ee1bd53cd864b69bafd82cc5e8a0c5d53108cf1cadefa61e4ba2"}, "downloads": -1, "filename": "inari-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2bd50964a4f93ee3cf6fb92622fdfa20", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9600, "upload_time": "2019-09-02T08:54:00", "upload_time_iso_8601": "2019-09-02T08:54:00.204524Z", "url": "https://files.pythonhosted.org/packages/75/de/74d0c308f00f20fe1bacd253d492027d52245227533d91fc24eab315065c/inari-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:26 2020"}