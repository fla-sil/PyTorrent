{"info": {"author": "k.r. goger", "author_email": "k.r.goger+pyjsoncfg@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "\n# PyJsonConfig - pyjsoncfg\n\nConfigure your Python Application with a JSON config file.\nCreate a sanitized sample JSON for git and demo purposes using your real config as template.\n\n\n## Platform\n\nTested on Python3\n\n\n## Development status\n\nAlpha state, \n\n\n## Configuration\n\nThe environment variable `PYJSONCONFIG_BASE` (default: `\".\"`) is used to find the configuration file.\n\n\n## Run as main\n\nRun `pyjsoncfg` from cmd-line to create a sanitized config file using your real configuration as template.\n\npyjsoncfg checks for keywords like `\"user\", \"pass\", \"url\", \"host\", \"remote\", \"port\"`.\nThe corresponding values are replaced by dummy values. \nKeywords containing `\"default\"` as part of their keyword are __not__ replaced by a dummy value.\nUse parameter `-k you_secret_key1` `-k you_secret_key2`... to add additional keywords to scan and replace for.\n\n    python3 -m pyjsoncfg -f sample_cfg.json -k secret \n\nuse redirect to create template file rather then output to stdout\n\n    python3 -m pyjsoncfg -f sample_cfg.json -k secret > sanitized_sample_cfg.json\n\nA sanitized sample can be found here [sanitized_sample_cfg.json](https://github.com/kr-g/pyjsoncfg/blob/master/pyjsoncfg/sanitized_sample_cfg.json)\n\nBy running `pyjsoncfg` the environment variable `PYJSONCONFIG_BASE` defaults to `\"~\"`\n\n\n## cmd-line options\n\nrun `python3 -m pyjsoncfg -h` to see all options.\n\n\n    usage: pyjsoncfg [options]\n\n    sanitize json config file, details refer to https://github.com/kr-g/pyjsoncfg\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show version info and exit\n      -d, --debug           show debug info\n      -f CONFIG             input json config file (default: cfg.json)\n      -l, --list            list config, do not sanitize (default: False)\n      -k KEYWORD, -key KEYWORD, -keyword KEYWORD\n                            additional keyword to scan for (default: [])\n\n\n## Use within own code\n\nIn order to use a global configuration root set the environment before, or do by CODE (see full sample at the end)\n\n    PYJSONCONFIG_BASE=\"~\" python3 -m your_application \n\n\n## Config key navigation and selection\n\nSee also [`sample_cfg.json`](https://github.com/kr-g/pyjsoncfg/blob/master/pyjsoncfg/sample_cfg.json) in the github repo for the json config structure\n\n\n### dict style\n\n    # property dc is in the config file\n    v = cfg()[\"dummy_complex\"][\"d\"][\"dc\"]\n    print(v,type(v))\n\n### string selector\n\n    # property de is new here!\n    v = cfg.val( [\"dummy_complex\",\"d\",\"de\"], defval=False ) # with default value\n    print(v,type(v))\n\n### property string selector\n\n    # property de is not new here, no chamge since created above\n    v = cfg.val( cfg(\"dummy_complex.d.de\"), defval=True ) # with default value, \n    print(v,type(v))\n\n### namespace selector\n\nAfter loading with `auto_conv=True` or calling `cfg.conv()` namespace selector is available\n\n    v = cfg().dummy_complex.d.de\n    print(v,type(v))\n\n### dict handling\n\n    cfg()[\"z\"] = { \"a\": 1 }    \n    cfg()[\"zx\"] = { \"a\" : 1, \"b\" : { \"c\" : 2 }}\n\n    cfg().zx.b.update({ \"c\": 3, \"d\": 4, \"e\" : 5 })\n\n    del cfg().zx.b.c\n\n    print( cfg().zx.b.items() ) \n    print( type( cfg().zx.b ) )\n    print( type( cfg().zx.b.items() ) )\n\n    # iterate\n    for k,v in cfg().zx.b.items():\n        print(k,v)\n\n    print( type( cfg().zx.b.e ) )\n\n### expand vars\n\nwith `expandvars()` all vars such as `${user}` or `${host.remote_ip}` inside an eval_string can be replaced by config values.\nthe default recursion level is `recursion_level=3`. change if the config file has a deeper nesting of vars.\n\n    # print structure of substsample config setting\n    print( \"subst var sample:\", cfg().substsample )\n    # subst all vars in substsample setting within a single call\n    print( \"result:\", cfg.expand( cfg().substsample ) )\n\n    # or more complicated...\n    # get all vars in the string as tupel\n    vars = cfg.getexpandvars( cfg().substsample ) # `eval_str` is populated with config value for substsample setting\n    print( \"vars:\", vars )\n    # get all vars and values as tupel\n    exvars = cfg.expandvars( vars ) \n    print( \"expandvars\", exvars )\n    # if required manipulate expandvars beforehand\n    print( \"result:\", cfg.expand( cfg().substsample, expandvars=exvars ) )\n\n    # nested or referencing vars\n    print( \"referencing:\", cfg().substsample2 ) \n    print( \"result referencing:\", cfg.expand( cfg().substsample2 ) )\n\n    # nested or referencing vars with endless loop due to self-referencing\n    # stops at `recursion_level=3`\n    print( \"self-referencing:\", cfg().substsample3 ) \n    print( \"result self-referencing:\", cfg.expand( cfg().substsample3 ) )\n\n#### limitation of `expandvars()`\n\nsubstitution of `dict` or complex json object is not supported.\n\n\n## Code\n\n    import os, sys\n    from pyjsoncfg import Config\n\n    cfg = Config(\n            fnam=\"sample_cfg.py\", # file name of json config, defaults to cfg.json\n            basepath=\".\", # base path, defaults to environment variable `PYJSONCONFIG_BASE` if not set\n            not_exist_ok=True, # do not raise an error if config file is not exsting \n            auto_conv=True # after loading convert json to namespace, if false dict is used for storing\n            )\n\n    # see sample_cfg.py in github project\n\n    val_a = cfg().dummy_complex.a \n    cfg().dummy_complex.a += 1\n    val_a_after = cfg().dummy_complex.a \n    print( \"a before\", val_a, \"after\", val_a_after )\n\n    val_array = []\n    val_array.extend( cfg().dummy_array )\n    cfg().dummy_array.append(17)\n    val_array_after = cfg().dummy_array\n    print( \"array before\", val_array, \"after\", val_array_after )\n\n    # access functions\n    #\n    # val, returns the value as in the json\n    # bool, converts to bool\n    # int, converts to int\n    # float, converts to float\n    # str, converts to str\n\n    print( bool(cfg()[\"dummy_complex\"][\"d\"][\"dc\"] )) # get the value as given in json\n    print( cfg.bool([\"dummy_complex\",\"d\",\"dc\"] )) # get interpreted as bool\n    print( cfg.bool( cfg(\"dummy_complex.d.dc\") )) # get interpreted as bool\n\n    print( cfg.val( cfg(\"dummy_complex.d.dc\") )) # get plain using selector\n    print( cfg().dummy_complex.d.dc ) # get plain using namespace\n\n    # save to disk\n    cfg.save()\n\n    # print to stdout\n    cfg.savefd(sys.stdout)\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kr-g/pyjsoncfg", "keywords": "python config json", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyjsoncfg", "package_url": "https://pypi.org/project/pyjsoncfg/", "platform": "", "project_url": "https://pypi.org/project/pyjsoncfg/", "project_urls": {"Homepage": "https://github.com/kr-g/pyjsoncfg"}, "release_url": "https://pypi.org/project/pyjsoncfg/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "python json config file handling", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyJsonConfig - pyjsoncfg</h1>\n<p>Configure your Python Application with a JSON config file.\nCreate a sanitized sample JSON for git and demo purposes using your real config as template.</p>\n<h2>Platform</h2>\n<p>Tested on Python3</p>\n<h2>Development status</h2>\n<p>Alpha state,</p>\n<h2>Configuration</h2>\n<p>The environment variable <code>PYJSONCONFIG_BASE</code> (default: <code>\".\"</code>) is used to find the configuration file.</p>\n<h2>Run as main</h2>\n<p>Run <code>pyjsoncfg</code> from cmd-line to create a sanitized config file using your real configuration as template.</p>\n<p>pyjsoncfg checks for keywords like <code>\"user\", \"pass\", \"url\", \"host\", \"remote\", \"port\"</code>.\nThe corresponding values are replaced by dummy values.\nKeywords containing <code>\"default\"</code> as part of their keyword are <strong>not</strong> replaced by a dummy value.\nUse parameter <code>-k you_secret_key1</code> <code>-k you_secret_key2</code>... to add additional keywords to scan and replace for.</p>\n<pre><code>python3 -m pyjsoncfg -f sample_cfg.json -k secret \n</code></pre>\n<p>use redirect to create template file rather then output to stdout</p>\n<pre><code>python3 -m pyjsoncfg -f sample_cfg.json -k secret &gt; sanitized_sample_cfg.json\n</code></pre>\n<p>A sanitized sample can be found here <a href=\"https://github.com/kr-g/pyjsoncfg/blob/master/pyjsoncfg/sanitized_sample_cfg.json\" rel=\"nofollow\">sanitized_sample_cfg.json</a></p>\n<p>By running <code>pyjsoncfg</code> the environment variable <code>PYJSONCONFIG_BASE</code> defaults to <code>\"~\"</code></p>\n<h2>cmd-line options</h2>\n<p>run <code>python3 -m pyjsoncfg -h</code> to see all options.</p>\n<pre><code>usage: pyjsoncfg [options]\n\nsanitize json config file, details refer to https://github.com/kr-g/pyjsoncfg\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show version info and exit\n  -d, --debug           show debug info\n  -f CONFIG             input json config file (default: cfg.json)\n  -l, --list            list config, do not sanitize (default: False)\n  -k KEYWORD, -key KEYWORD, -keyword KEYWORD\n                        additional keyword to scan for (default: [])\n</code></pre>\n<h2>Use within own code</h2>\n<p>In order to use a global configuration root set the environment before, or do by CODE (see full sample at the end)</p>\n<pre><code>PYJSONCONFIG_BASE=\"~\" python3 -m your_application \n</code></pre>\n<h2>Config key navigation and selection</h2>\n<p>See also <a href=\"https://github.com/kr-g/pyjsoncfg/blob/master/pyjsoncfg/sample_cfg.json\" rel=\"nofollow\"><code>sample_cfg.json</code></a> in the github repo for the json config structure</p>\n<h3>dict style</h3>\n<pre><code># property dc is in the config file\nv = cfg()[\"dummy_complex\"][\"d\"][\"dc\"]\nprint(v,type(v))\n</code></pre>\n<h3>string selector</h3>\n<pre><code># property de is new here!\nv = cfg.val( [\"dummy_complex\",\"d\",\"de\"], defval=False ) # with default value\nprint(v,type(v))\n</code></pre>\n<h3>property string selector</h3>\n<pre><code># property de is not new here, no chamge since created above\nv = cfg.val( cfg(\"dummy_complex.d.de\"), defval=True ) # with default value, \nprint(v,type(v))\n</code></pre>\n<h3>namespace selector</h3>\n<p>After loading with <code>auto_conv=True</code> or calling <code>cfg.conv()</code> namespace selector is available</p>\n<pre><code>v = cfg().dummy_complex.d.de\nprint(v,type(v))\n</code></pre>\n<h3>dict handling</h3>\n<pre><code>cfg()[\"z\"] = { \"a\": 1 }    \ncfg()[\"zx\"] = { \"a\" : 1, \"b\" : { \"c\" : 2 }}\n\ncfg().zx.b.update({ \"c\": 3, \"d\": 4, \"e\" : 5 })\n\ndel cfg().zx.b.c\n\nprint( cfg().zx.b.items() ) \nprint( type( cfg().zx.b ) )\nprint( type( cfg().zx.b.items() ) )\n\n# iterate\nfor k,v in cfg().zx.b.items():\n    print(k,v)\n\nprint( type( cfg().zx.b.e ) )\n</code></pre>\n<h3>expand vars</h3>\n<p>with <code>expandvars()</code> all vars such as <code>${user}</code> or <code>${host.remote_ip}</code> inside an eval_string can be replaced by config values.\nthe default recursion level is <code>recursion_level=3</code>. change if the config file has a deeper nesting of vars.</p>\n<pre><code># print structure of substsample config setting\nprint( \"subst var sample:\", cfg().substsample )\n# subst all vars in substsample setting within a single call\nprint( \"result:\", cfg.expand( cfg().substsample ) )\n\n# or more complicated...\n# get all vars in the string as tupel\nvars = cfg.getexpandvars( cfg().substsample ) # `eval_str` is populated with config value for substsample setting\nprint( \"vars:\", vars )\n# get all vars and values as tupel\nexvars = cfg.expandvars( vars ) \nprint( \"expandvars\", exvars )\n# if required manipulate expandvars beforehand\nprint( \"result:\", cfg.expand( cfg().substsample, expandvars=exvars ) )\n\n# nested or referencing vars\nprint( \"referencing:\", cfg().substsample2 ) \nprint( \"result referencing:\", cfg.expand( cfg().substsample2 ) )\n\n# nested or referencing vars with endless loop due to self-referencing\n# stops at `recursion_level=3`\nprint( \"self-referencing:\", cfg().substsample3 ) \nprint( \"result self-referencing:\", cfg.expand( cfg().substsample3 ) )\n</code></pre>\n<h4>limitation of <code>expandvars()</code></h4>\n<p>substitution of <code>dict</code> or complex json object is not supported.</p>\n<h2>Code</h2>\n<pre><code>import os, sys\nfrom pyjsoncfg import Config\n\ncfg = Config(\n        fnam=\"sample_cfg.py\", # file name of json config, defaults to cfg.json\n        basepath=\".\", # base path, defaults to environment variable `PYJSONCONFIG_BASE` if not set\n        not_exist_ok=True, # do not raise an error if config file is not exsting \n        auto_conv=True # after loading convert json to namespace, if false dict is used for storing\n        )\n\n# see sample_cfg.py in github project\n\nval_a = cfg().dummy_complex.a \ncfg().dummy_complex.a += 1\nval_a_after = cfg().dummy_complex.a \nprint( \"a before\", val_a, \"after\", val_a_after )\n\nval_array = []\nval_array.extend( cfg().dummy_array )\ncfg().dummy_array.append(17)\nval_array_after = cfg().dummy_array\nprint( \"array before\", val_array, \"after\", val_array_after )\n\n# access functions\n#\n# val, returns the value as in the json\n# bool, converts to bool\n# int, converts to int\n# float, converts to float\n# str, converts to str\n\nprint( bool(cfg()[\"dummy_complex\"][\"d\"][\"dc\"] )) # get the value as given in json\nprint( cfg.bool([\"dummy_complex\",\"d\",\"dc\"] )) # get interpreted as bool\nprint( cfg.bool( cfg(\"dummy_complex.d.dc\") )) # get interpreted as bool\n\nprint( cfg.val( cfg(\"dummy_complex.d.dc\") )) # get plain using selector\nprint( cfg().dummy_complex.d.dc ) # get plain using namespace\n\n# save to disk\ncfg.save()\n\n# print to stdout\ncfg.savefd(sys.stdout)\n</code></pre>\n\n          </div>"}, "last_serial": 6359507, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4e9264944e738e70c2da54f0d3ec2a6e", "sha256": "15491b48f9cac8ab04075b64d39bab63ed97e36bbc187267754a79790bb764b7"}, "downloads": -1, "filename": "pyjsoncfg-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e9264944e738e70c2da54f0d3ec2a6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8241, "upload_time": "2019-12-25T17:15:31", "upload_time_iso_8601": "2019-12-25T17:15:31.022951Z", "url": "https://files.pythonhosted.org/packages/9b/25/741c1d43335cd56db9c6aaa6ddc4144ce8e45e6010e20eddfd07ac2c3ff4/pyjsoncfg-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32eadb1cc4b54491d040cea63c922e70", "sha256": "644424843f811209fc8a046894838cd7d5bc75d6788a2bd9fe4f907881a0437b"}, "downloads": -1, "filename": "pyjsoncfg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "32eadb1cc4b54491d040cea63c922e70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5861, "upload_time": "2019-12-25T17:15:33", "upload_time_iso_8601": "2019-12-25T17:15:33.481488Z", "url": "https://files.pythonhosted.org/packages/53/d6/b65624914e59894ebe702632df3b41f913d53bf56b43ff8c012001f88263/pyjsoncfg-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5cad82bf01ab99e0532edb6b382dc2f0", "sha256": "35343ab2eb6ca1c0c4bd516505e5a6e1b93dad8b973d3386bf97ae8fd92c7650"}, "downloads": -1, "filename": "pyjsoncfg-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5cad82bf01ab99e0532edb6b382dc2f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10161, "upload_time": "2019-12-25T17:50:41", "upload_time_iso_8601": "2019-12-25T17:50:41.682536Z", "url": "https://files.pythonhosted.org/packages/dc/bc/12d68c38da706a68587836b89e87b00a9ac0ca4ca11999a095e0c0508017/pyjsoncfg-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9748d4251f95fb8088fa98fce101519f", "sha256": "8fa160f17d9e5e85098c5a5c249419c6613f0e077f520c14dcb1aeefdcc343f0"}, "downloads": -1, "filename": "pyjsoncfg-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9748d4251f95fb8088fa98fce101519f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5897, "upload_time": "2019-12-25T17:50:43", "upload_time_iso_8601": "2019-12-25T17:50:43.294336Z", "url": "https://files.pythonhosted.org/packages/c1/c0/0215a5593db7694f0febb6c13139effd8a80caf1dfb75f559de51530d2cb/pyjsoncfg-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "7fe73985f64e1312ed69400fad6cdb75", "sha256": "bdd56f98d066d8a0c2766ae6c0a55e5cd53f79746da40675fc6c7f466e9281a7"}, "downloads": -1, "filename": "pyjsoncfg-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7fe73985f64e1312ed69400fad6cdb75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11486, "upload_time": "2019-12-25T20:23:24", "upload_time_iso_8601": "2019-12-25T20:23:24.723485Z", "url": "https://files.pythonhosted.org/packages/af/c2/a46b50f1fed3a97999f03a86dbe3847ea2cee3c570ecdaaa390ac90d809e/pyjsoncfg-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90d250bf5cf5e0f471a489d2ab5230e6", "sha256": "0fd4f6cab3c3b22dcc2a728f9c09e128cdffab2590ec4b7053fc5479ec1c097b"}, "downloads": -1, "filename": "pyjsoncfg-0.0.3.tar.gz", "has_sig": false, "md5_digest": "90d250bf5cf5e0f471a489d2ab5230e6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6948, "upload_time": "2019-12-25T20:23:26", "upload_time_iso_8601": "2019-12-25T20:23:26.435616Z", "url": "https://files.pythonhosted.org/packages/f8/d2/28d2e43903417b7eafe4f8e17e323ad705c733a26f2d49a47adc8232f6c7/pyjsoncfg-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7fe73985f64e1312ed69400fad6cdb75", "sha256": "bdd56f98d066d8a0c2766ae6c0a55e5cd53f79746da40675fc6c7f466e9281a7"}, "downloads": -1, "filename": "pyjsoncfg-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7fe73985f64e1312ed69400fad6cdb75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11486, "upload_time": "2019-12-25T20:23:24", "upload_time_iso_8601": "2019-12-25T20:23:24.723485Z", "url": "https://files.pythonhosted.org/packages/af/c2/a46b50f1fed3a97999f03a86dbe3847ea2cee3c570ecdaaa390ac90d809e/pyjsoncfg-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90d250bf5cf5e0f471a489d2ab5230e6", "sha256": "0fd4f6cab3c3b22dcc2a728f9c09e128cdffab2590ec4b7053fc5479ec1c097b"}, "downloads": -1, "filename": "pyjsoncfg-0.0.3.tar.gz", "has_sig": false, "md5_digest": "90d250bf5cf5e0f471a489d2ab5230e6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6948, "upload_time": "2019-12-25T20:23:26", "upload_time_iso_8601": "2019-12-25T20:23:26.435616Z", "url": "https://files.pythonhosted.org/packages/f8/d2/28d2e43903417b7eafe4f8e17e323ad705c733a26f2d49a47adc8232f6c7/pyjsoncfg-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:42 2020"}