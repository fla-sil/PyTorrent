{"info": {"author": "Rafael Gonzalez", "author_email": "astrorafael@yahoo.es", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Twisted", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Communications", "Topic :: Internet"], "description": "twisted-mqtt\n============\n\nMQTT Client protocol for Twisted.\n\nDescription\n-----------\n\n**twisted-mqtt** is a library using the Twisted framework and\nimplementing the MQTT protocol (v3.1 & v3.1.1) in these flavours:\n\n-  pure subscriber\n-  pure publisher\n-  or a mixing of both. This is useful to subscribe and publish through\n   the same broker using only one TCP connection.\n\nInstalation\n-----------\n\nJust type:\n\n``sudo pip install twisted-mqtt``\n\nor from GitHub:\n\n::\n\n    git clone https://github.com/astrorafael/twisted-mqtt.git\n    cd twisted-mqtt\n    sudo python setup.py install\n\nCredits\n-------\n\nI started writting this software after finding `Adam Rudd's MQTT.py\ncode <https://github.com/adamvr/MQTT-For-Twisted-Python>`__. A small\npart his code is still there. However, I soon began taking my own\ndirection both in design and scope.\n\nFunction/methods docstrings contain quotes of the OASIS\n`mqtt-v3.1.1 <http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html>`__\nstandard.\n\nMQTT Version 3.1.1. Edited by Andrew Banks and Rahul Gupta. 29 October\n2014. OASIS Standard.\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html.\nLatest version:\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html.\n\nUsage\n-----\n\nThe APIs are described in the `library defined\ninterfaces <mqtt/client/interfaces.py>`__\n\nThis library builds ``MQTTProtocol`` objects and is designed to be *used\nrather than inherited*.\n\nExamples\n~~~~~~~~\n\nThese examples show my library intended usage: managed by a service.\nYour Twisted application should probably be designed as a collection of\nservices and one of these would be an MQTT Service. Note that a service\nis simply an object that can be started by ``startService()`` and\nstopped by ``stopService()``.\n\nProbably you also want your service to handle automatic reconnections to\nthe MQTT broker and that's where Twisted's ``ClientService`` class comes\nin. A ``ClientService`` instance detects its transport has been closed\nand re-opens the connection to the MQTT Broker.\n\nHowever, this is not enough for the MQTT protocol since the broker\nexpects a CONNECT packet request shortly after the socket has been\nopened. For this reason, we must subclass ``ClientService`` to override\n``startService()``. Also we will add some MQTT connection/disconnection\nhandling code. This requires us to obtain somehow the protocol instance\nbuilt by the factory.\n\nIn the startup code, we create a ``ClientService`` instance, passing the\nproper MQTT protocol factory and we simply start the service. Inside\n``startService()`` we invoke ClientService's method ``whenConnected()``\nthat returns a ``Deferred``. This ``Deferred`` - when fired - will\ninvoke a user function with the protocol object been created as the\nparameter.\n\nOur custom ``ClientService`` subclass defines a ``connectToBroker()``\nmethod, receiving the protocol object just built. At minimun, we will\nstore a reference to this protocol for further reference. If we wish to\nhandle automatic reconnections, we should set the MQTT protocol\n``onDisconnection`` attribute to a callback that will handle what to do\nin such cases. Our service ``onDisconnection()`` callback will simple\ntell us to rebuild a new protocol instance and call\n``connectToBroker()`` again when done. In this way, we start the whole\nMQTT CONNECT thing all over again.\n\nFinally, our custom ``ClientService`` example subclass may define a\ncustom retry policy by customizing ``backoffPolicy()`` default arguments\n``initialDelay``, ``maxDelay`` and ``factor``. See the\n``twisted.application.internet.backoffPolicy()`` API reference for\nfurther details.\n\nPublisher Example\n~~~~~~~~~~~~~~~~~\n\nA publisher is built by obtaining a factory for the\n``MQTTFactory.PUBLISHER`` profile.\n\nYour MQTT Publisher service should configure a couple of things in the\n``connectToBroker()`` method:\n\n-  The MQTT protocol ``onDisconnection`` attribute storing a callback\n   that will be invoked when a disconnection occurs.\n-  The maximun Window Size - that is - how many asynchronous PUBLISH\n   request you will issue in a row to the library, before getting and\n   acknowledge from the Broker (Qos=1 and 2 only). By thefault, the\n   window size is 1 and this guarantees in-order delivery of published\n   messages.\n\nThis example additionally starts a periodic task to publish sample data.\n\n.. code:: python\n\n    import sys\n\n    from twisted.internet             import reactor, task\n    from twisted.internet.defer       import inlineCallbacks, DeferredList\n    from twisted.application.internet import ClientService, backoffPolicy\n    from twisted.internet.endpoints   import clientFromString\n    from twisted.logger   import (\n        Logger, LogLevel, globalLogBeginner, textFileLogObserver, \n        FilteringLogObserver, LogLevelFilterPredicate)\n\n    from mqtt.client.factory import MQTTFactory\n\n    # ----------------\n    # Global variables\n    # ----------------\n\n    # Global object to control globally namespace logging\n    logLevelFilterPredicate = LogLevelFilterPredicate(defaultLogLevel=LogLevel.info)\n\n    BROKER = \"tcp:test.mosquitto.org:1883\"\n\n    # -----------------\n    # Utility Functions\n    # -----------------\n\n    def startLogging(console=True, filepath=None):\n        '''\n        Starts the global Twisted logger subsystem with maybe\n        stdout and/or a file specified in the config file\n        '''\n        global logLevelFilterPredicate\n       \n        observers = []\n        if console:\n            observers.append( FilteringLogObserver(observer=textFileLogObserver(sys.stdout),  \n                predicates=[logLevelFilterPredicate] ))\n        \n        if filepath is not None and filepath != \"\":\n            observers.append( FilteringLogObserver(observer=textFileLogObserver(open(filepath,'a')), \n                predicates=[logLevelFilterPredicate] ))\n        globalLogBeginner.beginLoggingTo(observers)\n\n\n    def setLogLevel(namespace=None, levelStr='info'):\n        '''\n        Set a new log level for a given namespace\n        LevelStr is: 'critical', 'error', 'warn', 'info', 'debug'\n        '''\n        level = LogLevel.levelWithName(levelStr)\n        logLevelFilterPredicate.setLogLevelForNamespace(namespace=namespace, level=level)\n\n\n    # -----------------------\n    # MQTT Publishing Service\n    # -----------------------\n\n    class MQTTService(ClientService):\n\n        def __init(self, endpoint, factory):\n            ClientService.__init__(self, endpoint, factory, retryPolicy=backoffPolicy())\n\n\n        def startService(self):\n            log.info(\"starting MQTT Client Publisher Service\")\n            # invoke whenConnected() inherited method\n            self.whenConnected().addCallback(self.connectToBroker)\n            ClientService.startService(self)\n\n\n        @inlineCallbacks\n        def connectToBroker(self, protocol):\n            '''\n            Connect to MQTT broker\n            '''\n            self.protocol                 = protocol\n            self.protocol.onDisconnection = self.onDisconnection\n            # We are issuing 3 publish in a row\n            # if order matters, then set window size to 1\n            # Publish requests beyond window size are enqueued\n            self.protocol.setWindowSize(3) \n            self.task = task.LoopingCall(self.publish)\n            self.task.start(5.0)\n            try:\n                yield self.protocol.connect(\"TwistedMQTT-pub\", keepalive=60)\n            except Exception as e:\n                log.error(\"Connecting to {broker} raised {excp!s}\", \n                   broker=BROKER, excp=e)\n            else:\n                log.info(\"Connected to {broker}\", broker=BROKER)\n\n\n        def onDisconnection(self, reason):\n            '''\n            get notfied of disconnections\n            and get a deferred for a new protocol object (next retry)\n            '''\n            log.debug(\" >< Connection was lost ! ><, reason={r}\", r=reason)\n            self.whenConnected().addCallback(self.connectToBroker)\n\n\n        def publish(self):\n            \n\n            def _logFailure(failure):\n                log.debug(\"reported {message}\", message=failure.getErrorMessage())\n                return failure\n\n            def _logAll(*args):\n                log.debug(\"all publihing complete args={args!r}\",args=args)\n\n            log.debug(\" >< Starting one round of publishing >< \")\n            d1 = self.protocol.publish(topic=\"foo/bar/baz1\", qos=0, message=\"hello world 0\")\n            d1.addErrback(_logFailure)\n            d2 = self.protocol.publish(topic=\"foo/bar/baz2\", qos=1, message=\"hello world 1\")\n            d2.addErrback(_logFailure)\n            d3 = self.protocol.publish(topic=\"foo/bar/baz3\", qos=2, message=\"hello world 2\")\n            d3.addErrback(_logFailure)\n            dlist = DeferredList([d1,d2,d3], consumeErrors=True)\n            dlist.addCallback(_logAll)\n            return dlist\n\n\n\n    if __name__ == '__main__':\n        import sys\n        log = Logger()\n        startLogging()\n        setLogLevel(namespace='mqtt',     levelStr='debug')\n        setLogLevel(namespace='__main__', levelStr='debug')\n\n        factory    = MQTTFactory(profile=MQTTFactory.PUBLISHER)\n        myEndpoint = clientFromString(reactor, BROKER)\n        serv       = MQTTService(myEndpoint, factory)\n        serv.startService()\n        reactor.run()\n\nSubscriber Example\n~~~~~~~~~~~~~~~~~~\n\nA subscriber is built by obtaining a factory for the\n``MQTTFactory.SUBSCRIBER`` profile.\n\nYour MQTT Subscriber service should configure the following things in\nthe ``connectToBroker()`` method:\n\n-  The MQTT protocol ``onDisconnection`` attribute storing a callback\n   that will be invoked when a disconnection occurs.\n-  The maximun Window Size - that is - how many asynchronous SUBSCRIBE\n   or UNSUBSCRIBE request you will issue in a row to the library, before\n   getting and acknowledge from the Broker.\n-  The MQTT protocol ``onPublish`` attribute storing a callback that\n   will be fired whenever a new PUBLISH packed is delivered to the\n   subscriber.\n\n.. code:: python\n\n    import sys\n\n    from twisted.internet.defer       import inlineCallbacks, DeferredList\n    from twisted.internet             import reactor\n    from twisted.internet.endpoints   import clientFromString\n    from twisted.application.internet import ClientService, backoffPolicy\n\n    from twisted.logger   import (\n        Logger, LogLevel, globalLogBeginner, textFileLogObserver, \n        FilteringLogObserver, LogLevelFilterPredicate)\n\n    from mqtt.client.factory import MQTTFactory\n\n    # ----------------\n    # Global variables\n    # ----------------\n\n    # Global object to control globally namespace logging\n    logLevelFilterPredicate = LogLevelFilterPredicate(defaultLogLevel=LogLevel.info)\n\n    BROKER = \"tcp:test.mosquitto.org:1883\"\n\n    # -----------------\n    # Utility Functions\n    # -----------------\n\n    def startLogging(console=True, filepath=None):\n        '''\n        Starts the global Twisted logger subsystem with maybe\n        stdout and/or a file specified in the config file\n        '''\n        global logLevelFilterPredicate\n       \n        observers = []\n        if console:\n            observers.append( FilteringLogObserver(observer=textFileLogObserver(sys.stdout),  \n                predicates=[logLevelFilterPredicate] ))\n        \n        if filepath is not None and filepath != \"\":\n            observers.append( FilteringLogObserver(observer=textFileLogObserver(open(filepath,'a')), \n                predicates=[logLevelFilterPredicate] ))\n        globalLogBeginner.beginLoggingTo(observers)\n\n\n    def setLogLevel(namespace=None, levelStr='info'):\n        '''\n        Set a new log level for a given namespace\n        LevelStr is: 'critical', 'error', 'warn', 'info', 'debug'\n        '''\n        level = LogLevel.levelWithName(levelStr)\n        logLevelFilterPredicate.setLogLevelForNamespace(namespace=namespace, level=level)\n\n    # -----------------------\n    # MQTT Subscriber Service\n    # ------------------------\n\n    class MQTTService(ClientService):\n\n\n        def __init(self, endpoint, factory):\n            ClientService.__init__(self, endpoint, factory, retryPolicy=backoffPolicy())\n\n\n        def startService(self):\n            log.info(\"starting MQTT Client Subscriber Service\")\n            # invoke whenConnected() inherited method\n            self.whenConnected().addCallback(self.connectToBroker)\n            ClientService.startService(self)\n\n\n        @inlineCallbacks\n        def connectToBroker(self, protocol):\n            '''\n            Connect to MQTT broker\n            '''\n            self.protocol                 = protocol\n            self.protocol.onPublish       = self.onPublish\n            self.protocol.onDisconnection = self.onDisconnection\n            self.protocol.setWindowSize(3) \n            try:\n                yield self.protocol.connect(\"TwistedMQTT-subs\", keepalive=60)\n                yield self.subscribe()\n            except Exception as e:\n                log.error(\"Connecting to {broker} raised {excp!s}\", \n                   broker=BROKER, excp=e)\n            else:\n                log.info(\"Connected and subscribed to {broker}\", broker=BROKER)\n\n\n        def subscribe(self):\n\n            def _logFailure(failure):\n                log.debug(\"reported {message}\", message=failure.getErrorMessage())\n                return failure\n\n            def _logGrantedQoS(value):\n                log.debug(\"response {value!r}\", value=value)\n                return True\n\n            def _logAll(*args):\n                log.debug(\"all subscriptions complete args={args!r}\",args=args)\n\n            d1 = self.protocol.subscribe(\"foo/bar/baz1\", 2 )\n            d1.addCallbacks(_logGrantedQoS, _logFailure)\n\n            d2 = self.protocol.subscribe(\"foo/bar/baz2\", 2 )\n            d2.addCallbacks(_logGrantedQoS, _logFailure)\n\n            d3 = self.protocol.subscribe(\"foo/bar/baz3\", 2 )\n            d3.addCallbacks(_logGrantedQoS, _logFailure)\n\n            dlist = DeferredList([d1,d2,d3], consumeErrors=True)\n            dlist.addCallback(_logAll)\n            return dlist\n\n\n        def onPublish(self, topic, payload, qos, dup, retain, msgId):\n            '''\n            Callback Receiving messages from publisher\n            '''\n            log.debug(\"msg={payload}\", payload=payload)\n\n\n        def onDisconnection(self, reason):\n            '''\n            get notfied of disconnections\n            and get a deferred for a new protocol object (next retry)\n            '''\n            log.debug(\" >< Connection was lost ! ><, reason={r}\", r=reason)\n            self.whenConnected().addCallback(self.connectToBroker)\n\n\n    if __name__ == '__main__':\n        import sys\n        log = Logger()\n        startLogging()\n        setLogLevel(namespace='mqtt',     levelStr='debug')\n        setLogLevel(namespace='__main__', levelStr='debug')\n\n        factory    = MQTTFactory(profile=MQTTFactory.SUBSCRIBER)\n        myEndpoint = clientFromString(reactor, BROKER)\n        serv       = MQTTService(myEndpoint, factory)\n        serv.startService()\n        reactor.run()\n\nPublisher/Subscriber Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA Publisher/Subscriber example is no more than a mix of the previous\nexamples, not forgetting to set the MQTT factory profile to\n``MQTTFactory.PUBLISHER | MQTTFactory.SUBSCRIBER``.\n\nDesign Notes\n------------\n\nThere is a separate ``MQTTProtocol`` in each module implementing a\ndifferent profile (subscriber, publiser, publisher/subscriber). The\n``MQTTBaseProtocol`` and the various ``MQTTProtocol`` classes implement\na State Pattern to avoid the \"if spaghetti code\" in the connection\nstates. A basic state machine is built into the ``MQTTBaseProtocol`` and\nthe ``ConnectedState`` is patched according to the profile.\n\nPrevious 0.1.x implementations used two separate (subclases, publisher)\nand with separate logic for both roles. The publisher/subscriber was a\nmixin class implemented by delegation that managed the connection state\nand forwarded all client requests and network events to the proper\ndelegate.\n\nHowever, this approach had some quirks and issues with sharing state. It\nhas been re-written to a single publisher/subscriber class that manages\neverything.\n\nTo maintain the former API, separate subclasses has been derived to\nimplement a pure subscriber or publisher roles. The subclassing simply\npatches the state machine in order to honor only the methods for a given\nrole.\n\nLimitations\n-----------\n\nThe current implementation has the following limitations:\n\n-  This library does not claim to be full comformant to the standard.\n\n-  There is a limited form of session persistance for the publisher.\n   Pending acknowledges for PUBLISH and PUBREL are kept in RAM and\n   outlive the connection and the protocol object while Twisted is\n   running. However, they are not stored in a persistent medium.\n\nTODO\n----\n\nI wrote this library for my pet projects and learn Twisted. However, it\ngoes a long way from an apparently looking good library to an\nindustrial-strength, polished product. I don't simply have the time,\nenergy and knowledge to do so.\n\nSome areas in which this can be improved:\n\n-  Bug fixing\n-  Include a thorough test battery.\n-  Improve documentation.\n-  etc.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/astrorafael/twisted-mqtt/", "keywords": "Python Twisted", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "twisted-mqtt", "package_url": "https://pypi.org/project/twisted-mqtt/", "platform": "", "project_url": "https://pypi.org/project/twisted-mqtt/", "project_urls": {"Homepage": "http://github.com/astrorafael/twisted-mqtt/"}, "release_url": "https://pypi.org/project/twisted-mqtt/0.3.9/", "requires_dist": null, "requires_python": "", "summary": "MQTT client protocol package for Twisted", "version": "0.3.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>MQTT Client protocol for Twisted.</p>\n<div id=\"description\">\n<h2>Description</h2>\n<p><strong>twisted-mqtt</strong> is a library using the Twisted framework and\nimplementing the MQTT protocol (v3.1 &amp; v3.1.1) in these flavours:</p>\n<ul>\n<li>pure subscriber</li>\n<li>pure publisher</li>\n<li>or a mixing of both. This is useful to subscribe and publish through\nthe same broker using only one TCP connection.</li>\n</ul>\n</div>\n<div id=\"instalation\">\n<h2>Instalation</h2>\n<p>Just type:</p>\n<p><tt>sudo pip install <span class=\"pre\">twisted-mqtt</span></tt></p>\n<p>or from GitHub:</p>\n<pre>git clone https://github.com/astrorafael/twisted-mqtt.git\ncd twisted-mqtt\nsudo python setup.py install\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>I started writting this software after finding <a href=\"https://github.com/adamvr/MQTT-For-Twisted-Python\" rel=\"nofollow\">Adam Rudd\u2019s MQTT.py\ncode</a>. A small\npart his code is still there. However, I soon began taking my own\ndirection both in design and scope.</p>\n<p>Function/methods docstrings contain quotes of the OASIS\n<a href=\"http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html\" rel=\"nofollow\">mqtt-v3.1.1</a>\nstandard.</p>\n<p>MQTT Version 3.1.1. Edited by Andrew Banks and Rahul Gupta. 29 October\n2014. OASIS Standard.\n<a href=\"http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html\" rel=\"nofollow\">http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html</a>.\nLatest version:\n<a href=\"http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html\" rel=\"nofollow\">http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The APIs are described in the <a href=\"mqtt/client/interfaces.py\" rel=\"nofollow\">library defined\ninterfaces</a></p>\n<p>This library builds <tt>MQTTProtocol</tt> objects and is designed to be <em>used\nrather than inherited</em>.</p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>These examples show my library intended usage: managed by a service.\nYour Twisted application should probably be designed as a collection of\nservices and one of these would be an MQTT Service. Note that a service\nis simply an object that can be started by <tt>startService()</tt> and\nstopped by <tt>stopService()</tt>.</p>\n<p>Probably you also want your service to handle automatic reconnections to\nthe MQTT broker and that\u2019s where Twisted\u2019s <tt>ClientService</tt> class comes\nin. A <tt>ClientService</tt> instance detects its transport has been closed\nand re-opens the connection to the MQTT Broker.</p>\n<p>However, this is not enough for the MQTT protocol since the broker\nexpects a CONNECT packet request shortly after the socket has been\nopened. For this reason, we must subclass <tt>ClientService</tt> to override\n<tt>startService()</tt>. Also we will add some MQTT connection/disconnection\nhandling code. This requires us to obtain somehow the protocol instance\nbuilt by the factory.</p>\n<p>In the startup code, we create a <tt>ClientService</tt> instance, passing the\nproper MQTT protocol factory and we simply start the service. Inside\n<tt>startService()</tt> we invoke ClientService\u2019s method <tt>whenConnected()</tt>\nthat returns a <tt>Deferred</tt>. This <tt>Deferred</tt> - when fired - will\ninvoke a user function with the protocol object been created as the\nparameter.</p>\n<p>Our custom <tt>ClientService</tt> subclass defines a <tt>connectToBroker()</tt>\nmethod, receiving the protocol object just built. At minimun, we will\nstore a reference to this protocol for further reference. If we wish to\nhandle automatic reconnections, we should set the MQTT protocol\n<tt>onDisconnection</tt> attribute to a callback that will handle what to do\nin such cases. Our service <tt>onDisconnection()</tt> callback will simple\ntell us to rebuild a new protocol instance and call\n<tt>connectToBroker()</tt> again when done. In this way, we start the whole\nMQTT CONNECT thing all over again.</p>\n<p>Finally, our custom <tt>ClientService</tt> example subclass may define a\ncustom retry policy by customizing <tt>backoffPolicy()</tt> default arguments\n<tt>initialDelay</tt>, <tt>maxDelay</tt> and <tt>factor</tt>. See the\n<tt>twisted.application.internet.backoffPolicy()</tt> API reference for\nfurther details.</p>\n</div>\n<div id=\"publisher-example\">\n<h3>Publisher Example</h3>\n<p>A publisher is built by obtaining a factory for the\n<tt>MQTTFactory.PUBLISHER</tt> profile.</p>\n<p>Your MQTT Publisher service should configure a couple of things in the\n<tt>connectToBroker()</tt> method:</p>\n<ul>\n<li>The MQTT protocol <tt>onDisconnection</tt> attribute storing a callback\nthat will be invoked when a disconnection occurs.</li>\n<li>The maximun Window Size - that is - how many asynchronous PUBLISH\nrequest you will issue in a row to the library, before getting and\nacknowledge from the Broker (Qos=1 and 2 only). By thefault, the\nwindow size is 1 and this guarantees in-order delivery of published\nmessages.</li>\n</ul>\n<p>This example additionally starts a periodic task to publish sample data.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span>             <span class=\"kn\">import</span> <span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"n\">task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span>       <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span><span class=\"p\">,</span> <span class=\"n\">DeferredList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.application.internet</span> <span class=\"kn\">import</span> <span class=\"n\">ClientService</span><span class=\"p\">,</span> <span class=\"n\">backoffPolicy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.endpoints</span>   <span class=\"kn\">import</span> <span class=\"n\">clientFromString</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.logger</span>   <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Logger</span><span class=\"p\">,</span> <span class=\"n\">LogLevel</span><span class=\"p\">,</span> <span class=\"n\">globalLogBeginner</span><span class=\"p\">,</span> <span class=\"n\">textFileLogObserver</span><span class=\"p\">,</span>\n    <span class=\"n\">FilteringLogObserver</span><span class=\"p\">,</span> <span class=\"n\">LogLevelFilterPredicate</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">mqtt.client.factory</span> <span class=\"kn\">import</span> <span class=\"n\">MQTTFactory</span>\n\n<span class=\"c1\"># ----------------</span>\n<span class=\"c1\"># Global variables</span>\n<span class=\"c1\"># ----------------</span>\n\n<span class=\"c1\"># Global object to control globally namespace logging</span>\n<span class=\"n\">logLevelFilterPredicate</span> <span class=\"o\">=</span> <span class=\"n\">LogLevelFilterPredicate</span><span class=\"p\">(</span><span class=\"n\">defaultLogLevel</span><span class=\"o\">=</span><span class=\"n\">LogLevel</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">)</span>\n\n<span class=\"n\">BROKER</span> <span class=\"o\">=</span> <span class=\"s2\">\"tcp:test.mosquitto.org:1883\"</span>\n\n<span class=\"c1\"># -----------------</span>\n<span class=\"c1\"># Utility Functions</span>\n<span class=\"c1\"># -----------------</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">startLogging</span><span class=\"p\">(</span><span class=\"n\">console</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''\n    Starts the global Twisted logger subsystem with maybe\n    stdout and/or a file specified in the config file\n    '''</span>\n    <span class=\"k\">global</span> <span class=\"n\">logLevelFilterPredicate</span>\n\n    <span class=\"n\">observers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">console</span><span class=\"p\">:</span>\n        <span class=\"n\">observers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span> <span class=\"n\">FilteringLogObserver</span><span class=\"p\">(</span><span class=\"n\">observer</span><span class=\"o\">=</span><span class=\"n\">textFileLogObserver</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">),</span>\n            <span class=\"n\">predicates</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">logLevelFilterPredicate</span><span class=\"p\">]</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">filepath</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">filepath</span> <span class=\"o\">!=</span> <span class=\"s2\">\"\"</span><span class=\"p\">:</span>\n        <span class=\"n\">observers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span> <span class=\"n\">FilteringLogObserver</span><span class=\"p\">(</span><span class=\"n\">observer</span><span class=\"o\">=</span><span class=\"n\">textFileLogObserver</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span><span class=\"s1\">'a'</span><span class=\"p\">)),</span>\n            <span class=\"n\">predicates</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">logLevelFilterPredicate</span><span class=\"p\">]</span> <span class=\"p\">))</span>\n    <span class=\"n\">globalLogBeginner</span><span class=\"o\">.</span><span class=\"n\">beginLoggingTo</span><span class=\"p\">(</span><span class=\"n\">observers</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">setLogLevel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">levelStr</span><span class=\"o\">=</span><span class=\"s1\">'info'</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''\n    Set a new log level for a given namespace\n    LevelStr is: 'critical', 'error', 'warn', 'info', 'debug'\n    '''</span>\n    <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">LogLevel</span><span class=\"o\">.</span><span class=\"n\">levelWithName</span><span class=\"p\">(</span><span class=\"n\">levelStr</span><span class=\"p\">)</span>\n    <span class=\"n\">logLevelFilterPredicate</span><span class=\"o\">.</span><span class=\"n\">setLogLevelForNamespace</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># -----------------------</span>\n<span class=\"c1\"># MQTT Publishing Service</span>\n<span class=\"c1\"># -----------------------</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MQTTService</span><span class=\"p\">(</span><span class=\"n\">ClientService</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"n\">factory</span><span class=\"p\">):</span>\n        <span class=\"n\">ClientService</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"n\">factory</span><span class=\"p\">,</span> <span class=\"n\">retryPolicy</span><span class=\"o\">=</span><span class=\"n\">backoffPolicy</span><span class=\"p\">())</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">startService</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"starting MQTT Client Publisher Service\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># invoke whenConnected() inherited method</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">whenConnected</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connectToBroker</span><span class=\"p\">)</span>\n        <span class=\"n\">ClientService</span><span class=\"o\">.</span><span class=\"n\">startService</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n\n    <span class=\"nd\">@inlineCallbacks</span>\n    <span class=\"k\">def</span> <span class=\"nf\">connectToBroker</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''\n        Connect to MQTT broker\n        '''</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span>                 <span class=\"o\">=</span> <span class=\"n\">protocol</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">onDisconnection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onDisconnection</span>\n        <span class=\"c1\"># We are issuing 3 publish in a row</span>\n        <span class=\"c1\"># if order matters, then set window size to 1</span>\n        <span class=\"c1\"># Publish requests beyond window size are enqueued</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">setWindowSize</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">LoopingCall</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">\"TwistedMQTT-pub\"</span><span class=\"p\">,</span> <span class=\"n\">keepalive</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Connecting to </span><span class=\"si\">{broker}</span><span class=\"s2\"> raised </span><span class=\"si\">{excp!s}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n               <span class=\"n\">broker</span><span class=\"o\">=</span><span class=\"n\">BROKER</span><span class=\"p\">,</span> <span class=\"n\">excp</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Connected to </span><span class=\"si\">{broker}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">broker</span><span class=\"o\">=</span><span class=\"n\">BROKER</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">onDisconnection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''\n        get notfied of disconnections\n        and get a deferred for a new protocol object (next retry)\n        '''</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\" &gt;&lt; Connection was lost ! &gt;&lt;, reason=</span><span class=\"si\">{r}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">reason</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">whenConnected</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connectToBroker</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n\n        <span class=\"k\">def</span> <span class=\"nf\">_logFailure</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"p\">):</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"reported </span><span class=\"si\">{message}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">getErrorMessage</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"n\">failure</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_logAll</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"all publihing complete args=</span><span class=\"si\">{args!r}</span><span class=\"s2\">\"</span><span class=\"p\">,</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\" &gt;&lt; Starting one round of publishing &gt;&lt; \"</span><span class=\"p\">)</span>\n        <span class=\"n\">d1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"s2\">\"foo/bar/baz1\"</span><span class=\"p\">,</span> <span class=\"n\">qos</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"hello world 0\"</span><span class=\"p\">)</span>\n        <span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">addErrback</span><span class=\"p\">(</span><span class=\"n\">_logFailure</span><span class=\"p\">)</span>\n        <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"s2\">\"foo/bar/baz2\"</span><span class=\"p\">,</span> <span class=\"n\">qos</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"hello world 1\"</span><span class=\"p\">)</span>\n        <span class=\"n\">d2</span><span class=\"o\">.</span><span class=\"n\">addErrback</span><span class=\"p\">(</span><span class=\"n\">_logFailure</span><span class=\"p\">)</span>\n        <span class=\"n\">d3</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"s2\">\"foo/bar/baz3\"</span><span class=\"p\">,</span> <span class=\"n\">qos</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"hello world 2\"</span><span class=\"p\">)</span>\n        <span class=\"n\">d3</span><span class=\"o\">.</span><span class=\"n\">addErrback</span><span class=\"p\">(</span><span class=\"n\">_logFailure</span><span class=\"p\">)</span>\n        <span class=\"n\">dlist</span> <span class=\"o\">=</span> <span class=\"n\">DeferredList</span><span class=\"p\">([</span><span class=\"n\">d1</span><span class=\"p\">,</span><span class=\"n\">d2</span><span class=\"p\">,</span><span class=\"n\">d3</span><span class=\"p\">],</span> <span class=\"n\">consumeErrors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">dlist</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"n\">_logAll</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">dlist</span>\n\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"p\">()</span>\n    <span class=\"n\">startLogging</span><span class=\"p\">()</span>\n    <span class=\"n\">setLogLevel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'mqtt'</span><span class=\"p\">,</span>     <span class=\"n\">levelStr</span><span class=\"o\">=</span><span class=\"s1\">'debug'</span><span class=\"p\">)</span>\n    <span class=\"n\">setLogLevel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'__main__'</span><span class=\"p\">,</span> <span class=\"n\">levelStr</span><span class=\"o\">=</span><span class=\"s1\">'debug'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">factory</span>    <span class=\"o\">=</span> <span class=\"n\">MQTTFactory</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">MQTTFactory</span><span class=\"o\">.</span><span class=\"n\">PUBLISHER</span><span class=\"p\">)</span>\n    <span class=\"n\">myEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">clientFromString</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"n\">BROKER</span><span class=\"p\">)</span>\n    <span class=\"n\">serv</span>       <span class=\"o\">=</span> <span class=\"n\">MQTTService</span><span class=\"p\">(</span><span class=\"n\">myEndpoint</span><span class=\"p\">,</span> <span class=\"n\">factory</span><span class=\"p\">)</span>\n    <span class=\"n\">serv</span><span class=\"o\">.</span><span class=\"n\">startService</span><span class=\"p\">()</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"subscriber-example\">\n<h3>Subscriber Example</h3>\n<p>A subscriber is built by obtaining a factory for the\n<tt>MQTTFactory.SUBSCRIBER</tt> profile.</p>\n<p>Your MQTT Subscriber service should configure the following things in\nthe <tt>connectToBroker()</tt> method:</p>\n<ul>\n<li>The MQTT protocol <tt>onDisconnection</tt> attribute storing a callback\nthat will be invoked when a disconnection occurs.</li>\n<li>The maximun Window Size - that is - how many asynchronous SUBSCRIBE\nor UNSUBSCRIBE request you will issue in a row to the library, before\ngetting and acknowledge from the Broker.</li>\n<li>The MQTT protocol <tt>onPublish</tt> attribute storing a callback that\nwill be fired whenever a new PUBLISH packed is delivered to the\nsubscriber.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span>       <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span><span class=\"p\">,</span> <span class=\"n\">DeferredList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span>             <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.endpoints</span>   <span class=\"kn\">import</span> <span class=\"n\">clientFromString</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.application.internet</span> <span class=\"kn\">import</span> <span class=\"n\">ClientService</span><span class=\"p\">,</span> <span class=\"n\">backoffPolicy</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.logger</span>   <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Logger</span><span class=\"p\">,</span> <span class=\"n\">LogLevel</span><span class=\"p\">,</span> <span class=\"n\">globalLogBeginner</span><span class=\"p\">,</span> <span class=\"n\">textFileLogObserver</span><span class=\"p\">,</span>\n    <span class=\"n\">FilteringLogObserver</span><span class=\"p\">,</span> <span class=\"n\">LogLevelFilterPredicate</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">mqtt.client.factory</span> <span class=\"kn\">import</span> <span class=\"n\">MQTTFactory</span>\n\n<span class=\"c1\"># ----------------</span>\n<span class=\"c1\"># Global variables</span>\n<span class=\"c1\"># ----------------</span>\n\n<span class=\"c1\"># Global object to control globally namespace logging</span>\n<span class=\"n\">logLevelFilterPredicate</span> <span class=\"o\">=</span> <span class=\"n\">LogLevelFilterPredicate</span><span class=\"p\">(</span><span class=\"n\">defaultLogLevel</span><span class=\"o\">=</span><span class=\"n\">LogLevel</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">)</span>\n\n<span class=\"n\">BROKER</span> <span class=\"o\">=</span> <span class=\"s2\">\"tcp:test.mosquitto.org:1883\"</span>\n\n<span class=\"c1\"># -----------------</span>\n<span class=\"c1\"># Utility Functions</span>\n<span class=\"c1\"># -----------------</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">startLogging</span><span class=\"p\">(</span><span class=\"n\">console</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''\n    Starts the global Twisted logger subsystem with maybe\n    stdout and/or a file specified in the config file\n    '''</span>\n    <span class=\"k\">global</span> <span class=\"n\">logLevelFilterPredicate</span>\n\n    <span class=\"n\">observers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">console</span><span class=\"p\">:</span>\n        <span class=\"n\">observers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span> <span class=\"n\">FilteringLogObserver</span><span class=\"p\">(</span><span class=\"n\">observer</span><span class=\"o\">=</span><span class=\"n\">textFileLogObserver</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">),</span>\n            <span class=\"n\">predicates</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">logLevelFilterPredicate</span><span class=\"p\">]</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">filepath</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">filepath</span> <span class=\"o\">!=</span> <span class=\"s2\">\"\"</span><span class=\"p\">:</span>\n        <span class=\"n\">observers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span> <span class=\"n\">FilteringLogObserver</span><span class=\"p\">(</span><span class=\"n\">observer</span><span class=\"o\">=</span><span class=\"n\">textFileLogObserver</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span><span class=\"s1\">'a'</span><span class=\"p\">)),</span>\n            <span class=\"n\">predicates</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">logLevelFilterPredicate</span><span class=\"p\">]</span> <span class=\"p\">))</span>\n    <span class=\"n\">globalLogBeginner</span><span class=\"o\">.</span><span class=\"n\">beginLoggingTo</span><span class=\"p\">(</span><span class=\"n\">observers</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">setLogLevel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">levelStr</span><span class=\"o\">=</span><span class=\"s1\">'info'</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''\n    Set a new log level for a given namespace\n    LevelStr is: 'critical', 'error', 'warn', 'info', 'debug'\n    '''</span>\n    <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">LogLevel</span><span class=\"o\">.</span><span class=\"n\">levelWithName</span><span class=\"p\">(</span><span class=\"n\">levelStr</span><span class=\"p\">)</span>\n    <span class=\"n\">logLevelFilterPredicate</span><span class=\"o\">.</span><span class=\"n\">setLogLevelForNamespace</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -----------------------</span>\n<span class=\"c1\"># MQTT Subscriber Service</span>\n<span class=\"c1\"># ------------------------</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MQTTService</span><span class=\"p\">(</span><span class=\"n\">ClientService</span><span class=\"p\">):</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"n\">factory</span><span class=\"p\">):</span>\n        <span class=\"n\">ClientService</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"n\">factory</span><span class=\"p\">,</span> <span class=\"n\">retryPolicy</span><span class=\"o\">=</span><span class=\"n\">backoffPolicy</span><span class=\"p\">())</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">startService</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"starting MQTT Client Subscriber Service\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># invoke whenConnected() inherited method</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">whenConnected</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connectToBroker</span><span class=\"p\">)</span>\n        <span class=\"n\">ClientService</span><span class=\"o\">.</span><span class=\"n\">startService</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n\n    <span class=\"nd\">@inlineCallbacks</span>\n    <span class=\"k\">def</span> <span class=\"nf\">connectToBroker</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''\n        Connect to MQTT broker\n        '''</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span>                 <span class=\"o\">=</span> <span class=\"n\">protocol</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">onPublish</span>       <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onPublish</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">onDisconnection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onDisconnection</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">setWindowSize</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">\"TwistedMQTT-subs\"</span><span class=\"p\">,</span> <span class=\"n\">keepalive</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Connecting to </span><span class=\"si\">{broker}</span><span class=\"s2\"> raised </span><span class=\"si\">{excp!s}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n               <span class=\"n\">broker</span><span class=\"o\">=</span><span class=\"n\">BROKER</span><span class=\"p\">,</span> <span class=\"n\">excp</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Connected and subscribed to </span><span class=\"si\">{broker}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">broker</span><span class=\"o\">=</span><span class=\"n\">BROKER</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">subscribe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_logFailure</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"p\">):</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"reported </span><span class=\"si\">{message}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">getErrorMessage</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"n\">failure</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_logGrantedQoS</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"response </span><span class=\"si\">{value!r}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_logAll</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"all subscriptions complete args=</span><span class=\"si\">{args!r}</span><span class=\"s2\">\"</span><span class=\"p\">,</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n        <span class=\"n\">d1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s2\">\"foo/bar/baz1\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"p\">)</span>\n        <span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">addCallbacks</span><span class=\"p\">(</span><span class=\"n\">_logGrantedQoS</span><span class=\"p\">,</span> <span class=\"n\">_logFailure</span><span class=\"p\">)</span>\n\n        <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s2\">\"foo/bar/baz2\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"p\">)</span>\n        <span class=\"n\">d2</span><span class=\"o\">.</span><span class=\"n\">addCallbacks</span><span class=\"p\">(</span><span class=\"n\">_logGrantedQoS</span><span class=\"p\">,</span> <span class=\"n\">_logFailure</span><span class=\"p\">)</span>\n\n        <span class=\"n\">d3</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s2\">\"foo/bar/baz3\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"p\">)</span>\n        <span class=\"n\">d3</span><span class=\"o\">.</span><span class=\"n\">addCallbacks</span><span class=\"p\">(</span><span class=\"n\">_logGrantedQoS</span><span class=\"p\">,</span> <span class=\"n\">_logFailure</span><span class=\"p\">)</span>\n\n        <span class=\"n\">dlist</span> <span class=\"o\">=</span> <span class=\"n\">DeferredList</span><span class=\"p\">([</span><span class=\"n\">d1</span><span class=\"p\">,</span><span class=\"n\">d2</span><span class=\"p\">,</span><span class=\"n\">d3</span><span class=\"p\">],</span> <span class=\"n\">consumeErrors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">dlist</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"n\">_logAll</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">dlist</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">onPublish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">qos</span><span class=\"p\">,</span> <span class=\"n\">dup</span><span class=\"p\">,</span> <span class=\"n\">retain</span><span class=\"p\">,</span> <span class=\"n\">msgId</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''\n        Callback Receiving messages from publisher\n        '''</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"msg=</span><span class=\"si\">{payload}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">onDisconnection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''\n        get notfied of disconnections\n        and get a deferred for a new protocol object (next retry)\n        '''</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\" &gt;&lt; Connection was lost ! &gt;&lt;, reason=</span><span class=\"si\">{r}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">reason</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">whenConnected</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connectToBroker</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"p\">()</span>\n    <span class=\"n\">startLogging</span><span class=\"p\">()</span>\n    <span class=\"n\">setLogLevel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'mqtt'</span><span class=\"p\">,</span>     <span class=\"n\">levelStr</span><span class=\"o\">=</span><span class=\"s1\">'debug'</span><span class=\"p\">)</span>\n    <span class=\"n\">setLogLevel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'__main__'</span><span class=\"p\">,</span> <span class=\"n\">levelStr</span><span class=\"o\">=</span><span class=\"s1\">'debug'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">factory</span>    <span class=\"o\">=</span> <span class=\"n\">MQTTFactory</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">MQTTFactory</span><span class=\"o\">.</span><span class=\"n\">SUBSCRIBER</span><span class=\"p\">)</span>\n    <span class=\"n\">myEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">clientFromString</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"n\">BROKER</span><span class=\"p\">)</span>\n    <span class=\"n\">serv</span>       <span class=\"o\">=</span> <span class=\"n\">MQTTService</span><span class=\"p\">(</span><span class=\"n\">myEndpoint</span><span class=\"p\">,</span> <span class=\"n\">factory</span><span class=\"p\">)</span>\n    <span class=\"n\">serv</span><span class=\"o\">.</span><span class=\"n\">startService</span><span class=\"p\">()</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"publisher-subscriber-example\">\n<h3>Publisher/Subscriber Example</h3>\n<p>A Publisher/Subscriber example is no more than a mix of the previous\nexamples, not forgetting to set the MQTT factory profile to\n<tt>MQTTFactory.PUBLISHER | MQTTFactory.SUBSCRIBER</tt>.</p>\n</div>\n</div>\n<div id=\"design-notes\">\n<h2>Design Notes</h2>\n<p>There is a separate <tt>MQTTProtocol</tt> in each module implementing a\ndifferent profile (subscriber, publiser, publisher/subscriber). The\n<tt>MQTTBaseProtocol</tt> and the various <tt>MQTTProtocol</tt> classes implement\na State Pattern to avoid the \u201cif spaghetti code\u201d in the connection\nstates. A basic state machine is built into the <tt>MQTTBaseProtocol</tt> and\nthe <tt>ConnectedState</tt> is patched according to the profile.</p>\n<p>Previous 0.1.x implementations used two separate (subclases, publisher)\nand with separate logic for both roles. The publisher/subscriber was a\nmixin class implemented by delegation that managed the connection state\nand forwarded all client requests and network events to the proper\ndelegate.</p>\n<p>However, this approach had some quirks and issues with sharing state. It\nhas been re-written to a single publisher/subscriber class that manages\neverything.</p>\n<p>To maintain the former API, separate subclasses has been derived to\nimplement a pure subscriber or publisher roles. The subclassing simply\npatches the state machine in order to honor only the methods for a given\nrole.</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>The current implementation has the following limitations:</p>\n<ul>\n<li>This library does not claim to be full comformant to the standard.</li>\n<li>There is a limited form of session persistance for the publisher.\nPending acknowledges for PUBLISH and PUBREL are kept in RAM and\noutlive the connection and the protocol object while Twisted is\nrunning. However, they are not stored in a persistent medium.</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>I wrote this library for my pet projects and learn Twisted. However, it\ngoes a long way from an apparently looking good library to an\nindustrial-strength, polished product. I don\u2019t simply have the time,\nenergy and knowledge to do so.</p>\n<p>Some areas in which this can be improved:</p>\n<ul>\n<li>Bug fixing</li>\n<li>Include a thorough test battery.</li>\n<li>Improve documentation.</li>\n<li>etc.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4589550, "releases": {"0.3.2": [{"comment_text": "", "digests": {"md5": "ac830bfe10b4af1ecf873b5a6f69e49c", "sha256": "dcff61548a6d7c757129631efc518a861c0ecdd2851020bb2c7646c15db609ec"}, "downloads": -1, "filename": "twisted-mqtt-0.3.2.tar.gz", "has_sig": false, "md5_digest": "ac830bfe10b4af1ecf873b5a6f69e49c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44458, "upload_time": "2016-11-04T17:27:40", "upload_time_iso_8601": "2016-11-04T17:27:40.226995Z", "url": "https://files.pythonhosted.org/packages/ac/5a/a1f54f6621083a8c06e4c6258305db24c4f53822127836c37c07555f7585/twisted-mqtt-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "2741a2bf0f195a4d3b7b2ceff9b3a0a8", "sha256": "ea866d5317e0c3e5c8313044c088f61e7152561a68a72a0e4cb9f30375bab25a"}, "downloads": -1, "filename": "twisted-mqtt-0.3.3.tar.gz", "has_sig": false, "md5_digest": "2741a2bf0f195a4d3b7b2ceff9b3a0a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44601, "upload_time": "2017-01-10T19:51:52", "upload_time_iso_8601": "2017-01-10T19:51:52.515102Z", "url": "https://files.pythonhosted.org/packages/fe/24/d44d81770fc9eaee5cdb8ea8954abab9593a6f5e486c46e600c4fe037a20/twisted-mqtt-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "3b4f64ea80ba95ef0ce1c24264ad5762", "sha256": "e9307483f09d14977ce52a3fd574c7ef4828bf2945df0be50d1866598eb36d35"}, "downloads": -1, "filename": "twisted-mqtt-0.3.4.tar.gz", "has_sig": false, "md5_digest": "3b4f64ea80ba95ef0ce1c24264ad5762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44529, "upload_time": "2017-02-24T21:08:47", "upload_time_iso_8601": "2017-02-24T21:08:47.579705Z", "url": "https://files.pythonhosted.org/packages/c1/76/b7fe69372ac4e58e84de7895a25b73943b6b17c0bbe5a067eca22aedfaf8/twisted-mqtt-0.3.4.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "6fd2dd84eb13314badd63a69b059ca43", "sha256": "35a5e9b910d6fbaf9726476ad5c6311c8ae054650cd26734e760b6133233dcf0"}, "downloads": -1, "filename": "twisted-mqtt-0.3.6.tar.gz", "has_sig": false, "md5_digest": "6fd2dd84eb13314badd63a69b059ca43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44588, "upload_time": "2018-02-22T12:45:33", "upload_time_iso_8601": "2018-02-22T12:45:33.690481Z", "url": "https://files.pythonhosted.org/packages/41/da/fb746d79d74c7ae0753cda2613fb815e5760cdc345920fd55803cf50b707/twisted-mqtt-0.3.6.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "81395e1888960089db199fdd1033729c", "sha256": "6f1fc12e8d9c5fccfa6bc00563840bb1a344c25ddc4538d9022e70019a4d2984"}, "downloads": -1, "filename": "twisted-mqtt-0.3.9.tar.gz", "has_sig": false, "md5_digest": "81395e1888960089db199fdd1033729c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44540, "upload_time": "2018-12-12T09:56:55", "upload_time_iso_8601": "2018-12-12T09:56:55.500187Z", "url": "https://files.pythonhosted.org/packages/60/bb/8699acba19c441b07ed8d396803a4647b95b003c7f2fd6c85fbaebcfee31/twisted-mqtt-0.3.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81395e1888960089db199fdd1033729c", "sha256": "6f1fc12e8d9c5fccfa6bc00563840bb1a344c25ddc4538d9022e70019a4d2984"}, "downloads": -1, "filename": "twisted-mqtt-0.3.9.tar.gz", "has_sig": false, "md5_digest": "81395e1888960089db199fdd1033729c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44540, "upload_time": "2018-12-12T09:56:55", "upload_time_iso_8601": "2018-12-12T09:56:55.500187Z", "url": "https://files.pythonhosted.org/packages/60/bb/8699acba19c441b07ed8d396803a4647b95b003c7f2fd6c85fbaebcfee31/twisted-mqtt-0.3.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:43:50 2020"}