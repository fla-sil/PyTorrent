{"info": {"author": "Antonio Carlos Nazare Jr.", "author_email": "antonio.nazare@dcc.ufmg.br", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Other Audience", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: Microsoft :: Windows :: Windows 10", "Operating System :: Microsoft :: Windows :: Windows 7", "Operating System :: Microsoft :: Windows :: Windows 8", "Operating System :: Microsoft :: Windows :: Windows 8.1", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries"], "description": "# iGPU\n\n![GitHub](https://img.shields.io/github/license/acnazarejr/igpu)\n![PyPI](https://img.shields.io/pypi/v/igpu)\n![PyPI - Status](https://img.shields.io/pypi/status/igpu)\n\nThe `igpu` is a pythonic cross-platform module for getting the GPU info and status from NVIDA GPU boards using th `pynvml` ([a python wrapper around the NVML library](https://github.com/gpuopenanalytics/pynvml)).\n\n## Quick Start\n\n1. Install the `igpu` module.\n\n```python\npip install igpu\n```\n\n2. And, enjoy it!\n\n```python\nimport igpu\ngpu_count = igpu.count_devices()\ngpu = igpu.get_device(0)\nprint(f'This host has {gpu_count} devices.')\nprint(f'The first gpu is a {gpu.name} with {gpu.memory.total:.0f}{gpu.memory.unit}.')\n```\n\n```shell\nThis host has 4 devices.\nThe first gpu is a GeForce GTX 1080 Ti with 11178.50 MiB\n```\n\n**Table of Contents**\n\n1. [Requirements](#requirements)\n1. [Installation](#installation)\n1. [Examples](#examples)\n1. [Usage Documentation](#usage-documentation)\n   1. [Available Devices](#available-devices)\n   1. [Visible Devices](#visible-devices)\n   1. [GPUInfo Class Description](#gpuinfo-class-description)\n1. [License](#license)\n\n## Requirements\n\nSupports Python 3.4 or higher. Requires least one NVIDIA GPU with latest NVIDIA driver installed.\n\nPython standard libraries:\n* os ([The Python Standard Library](https://docs.python.org/3/library/os.html))\n* textwraper ([The Python Standard Library](https://docs.python.org/3/library/textwrap.html))\n* datetime ([The Python Standard Library](https://docs.python.org/3/library/datetime.html))\n\nThird-party libraries:\n* pynvml ([Python bindings to the NVIDIA Management Library](https://github.com/gpuopenanalytics/pynvml))\n* psutil ([Python process and system utilities](https://github.com/giampaolo/psutil/))\n\n## Installation\n\nCurrently it is only supported Python 3.4 or higher. It can be installed through pip:\n\n```\npip install igpu\n```\n\nTest the installation:\n\n1. Start a python console by typing `python` in the terminal\n2. In the newly opened python console, type:\n```python\nimport igpu\nprint(igpu.nvidia_driver_version())\n```\n3. Your output should look something like following, depending on your nvidia driver version.\n```\n(430, 34)\n```\n\n## Examples\n\nThe following examples illustrates the ease of use of this module. For a complete reference, see the [Usage Documentation](#usage-documentation) section.\n\n### List the utilization stats of all devices\n\nThe user can access the utilization stats attributes in the following manner:\n\n```python\nimport igpu\nfor gpu_info in igpu.devices():\n    print(f'GPU board {gpu_info.index}: {gpu_info.name}')\n    print(f'Utilization: GPU {gpu_info.utilization.gpu}% | Memory {gpu_info.utilization.memory}%')\n    print(f'Temperature: {gpu_info.utilization.temperature}C (Fan - {gpu_info.utilization.fan}%)')\n    print()\n```\n\n```shell\nGPU board 0: GeForce GTX 1080 Ti\nUtilization: GPU 0% | Memory 0%\nTemperature: 30C (Fan - 23%)\n\nGPU board 1: GeForce GTX 1080 Ti\nUtilization: GPU 65% | Memory 58%\nTemperature: 62C (Fan - 36%)\n\nGPU board 2: GeForce GTX 1080 Ti\nUtilization: GPU 38% | Memory 33%\nTemperature: 63C (Fan - 37%)\n\nGPU board 3: GeForce GTX 1080 Ti\nUtilization: GPU 0% | Memory 0%\nTemperature: 28C (Fan - 23%)\n```\n\n### List the memory and power summary of a specific device\n\nEach attributes group (`memory`, `utilization`, `pci`, `clocks`, `power`, `processes`) can be summarized simply by calling the string converstion. In the next example, we will print the memory and power summary of the second GPU board:\n\n```python\nimport igpu\ngpu_info = igpu.get_device(1)\nprint(gpu_info.memory)\nprint(gpu_info.power)\n```\n\n```shell\nGPU MEMORY:\n    Total :   11178.50 MiB (100.00%)\n    Used  :    6525.00 MiB ( 58.37%)\n    Free  :    4653.50 MiB ( 41.63%)\nPOWER INFO:\n    Management : Supported\n    Draw       : 55.751\n    Limit      : 250.0\n    Min Limit  : 125.0\n    Max Limit  : 300.0\n```\n\n### List the processes and the memory usage of a specific device\n\nIn this example, we will work with the `memory` and `processes` attributes of the first GPU board:\n\n```python\nimport igpu\ngpu_info = igpu.get_device(0)\nprint(f'The device has {gpu_info.memory.used} allocated out of a total of {gpu_info.memory.total}')\nprint(f'The {len(gpu_info.processes)} processe(s) running on device are:')\nfor proc in gpu_info.processes:\n    print(f'{proc.pid}: created at {proc.create_time} by {proc.user} and using {proc.gpu_memory}')\n```\n\n```shell\nThe device has 10799.0 allocated out of a total of 11178.5\nThe 2 processe(s) running on device are:\n4276: created at 2020-04-17 03:41:27 by antonio and using 4284\n5764: created at 2020-04-16 17:57:12 by acnazarejr and using 6515\n```\n\n## Usage Documentation\n\nThe `igpu` module is very versatile and can be used in a different of ways, given below.\n\nTo include iGPU in your Python code, all you have to do is included it on your script:\n\n```python\nimport igpu\n```\n\nOnce included all functions are available. The main functions along with a short description of inputs, outputs, and functionality can be found in the next sections.\n\n### Available Devices\n\nThe `igpu` can manipulate information and stats for all available devices. Availability is determined based on the GPU boards installed on the host.\n\n#### ```igpu.count_devices()```\n\nReturns the number of available GPU devices installed on the host.\n\n```python\n>>> igpu.count_devices()\n4\n```\n\n#### ```igpu.devices_index()```\n\nReturns an index list, containing the device index for each available GPU.\n\n```python\n>>> igpu.devices_index()\n[0, 1, 2, 3]\n```\n\n#### ```igpu.get_device(device_index)```\n\nGiven a `device_index`, returns a [`GpuInfo`](#gpuinfo-class-description) object containing the device properties and stats. If a nonexistent `device_index` is provided, an error is thrown.\n\nAll properties and methods of `GpuInfo` class are described in [GPUInfo Class Description](#gpuinfo-class-description) section.\n\n```python\n>>> gpu_info = igpu.get_device(2)\n>>> print(gpu_info.index, gpu_info.name)\n2, GeForce GTX 1080 Ti\n```\n\n#### ```igpu.devices()```\n\nReturns a [`GpuInfo`](#gpuinfo-class-description) list containing all available devices.\n\nAll properties and methods of `GpuInfo` class are described in [GPUInfo Class Description](#gpuinfo-class-description) section.\n\n```python\n>>> for gpu_info in igpu.devices():\n...     print(gpu_info.index, gpu_info.name)\n0, GeForce GTX 1080 Ti\n1, GeForce GTX 1080 Ti\n2, GeForce GTX 1080 Ti\n3, GeForce GTX 1080 Ti\n```\n\n### Visible Devices\n\nBy manually setting the environment variable ```CUDA_VISIBLE_DEVICES``` (or automatically, by other software, like SLURM cluster manager), the user can mask which GPUs should be visible to different Deep Learning frameworks (e.g. TensorFlow, PyTorch, Caffee, etc). See [this stackoverflow question ](https://stackoverflow.com/questions/39649102/how-do-i-select-which-gpu-to-run-a-job-on) for more info.\n\nThe `igpu` module can deal with this, and consider only the visible devices, by the following methods. This functionality is handy for those who work on environments where the visible devices are defined externally. For example, [when the SLURM sets](https://slurm.schedmd.com/gres.html) the `CUDA_VISIBLE_DEVICES` variable in a job.\n\nFor the next examples, consider that the `CUDA_VISIBLE_DEVICES` variable was set as below:\n\n```shell\nexport CUDA_VISIBLE_DEVICES=1,3\n```\n\n\n#### ```igpu.count_visible_devices()```\n\nReturns the number of visible GPU devices, defined by the `CUDA_VISIBLE_DEVICES` environmnt variable.\n\n```python\n>>> igpu.count_visible_devices()\n2\n```\n\n#### ```igpu.visible_devices_index()```\n\nReturns an index list, containing the device index for each visible GPU defined by the `CUDA_VISIBLE_DEVICES` environmnt variable.\n\n```python\n>>> igpu.visible_devices_index()\n[1, 3]\n```\n\n#### ```igpu.visible_devices()```\n\nReturns a [`GpuInfo`](#gpuinfo-class-description) list containing all visible devices defined by the `CUDA_VISIBLE_DEVICES` environmnt variable.\n\nAll properties and methods of `GpuInfo` class are described in [GPUInfo Class Description](#gpuinfo-class-description) section.\n\n```python\n>>> for gpu_info in igpu.visible_devices():\n...     print(gpu_info.index, gpu_info.name)\n1, GeForce GTX 1080 Ti\n3, GeForce GTX 1080 Ti\n```\n\n\n### GPUInfo Class Description\n\nThe `GPUInfo` is a helper class that handles the attributes of each GPU. The user can access all properties and stats accordingly with the GPU attributes categories. Each category has another helper subclass described below. Also, the class, and consequently, its subclasses, has an implicit conversion to a pretty string.\n\nFor the all next examples, consider that the a instace of GPUInfo was created as follow:\n\n```python\ngpu_info = igpu.get_device(0)\n```\n\nAlso, the class has a method (`GPUInfo.update()`) to update the device information that can be used as follow:\n\n```python\ngpu_info.update()\n```\n\nThe `GPUInfo` has the general GPU attributes:\n\n*Attributes*\n\n* `index` (`int`) - The index of the GPU device.\n* `name` (`str`) - The official product name of the GPU.\n* `serial` (`str`) - The GPU board serial number. This number matches the serial number physically printed on each board. It is a globally unique immutable alphanumeric value.\n* `uuid` (`str`) - The GPU board uuid. This value is the globally unique immutable alphanumeric identifier of the GPU. It does not correspond to any physical label on the board.\n* `bios` (`str`) - The BIOS version of the GPU board.\n\n*Usage*\n\n```python\n>>> gpu_info.index\n0\n>>> gpu_info.name\n'GeForce GTX 1080 Ti'\n>>> gpu_info.serial\n'N/A'\n>>> gpu_info.uuid\n'GPU-d9bf777c-e49e-e609-f873-d05b3208970b'\n>>> gpu_info.bios\n'86.02.39.00.01'\n```\n\n*String Conversion*\n\n```python\n>>> print(gpu_info)\nINDEX        : 0\nBOARD NAME   : 'GeForce GTX 1080 Ti'\nSERIAL       : 'N/A'\nUUID         : 'GPU-115dafb8-26db-32ba-d729-f21b29fc001f'\nBIOS VERSION : '86.02.39.00.01'\n\nGPU MEMORY:\n    Total :   11178.50 MiB (100.00%)\n    Used  :   10799.00 MiB ( 96.61%)\n    Free  :     379.50 MiB (  3.39%)\n\nGPU UTILIZATION:\n    Performance : P2\n    Temperature : '61C'\n    Graphics    : [|||||||||||              ] 44.00%\n    Memory      : [||||||||                 ] 35.00%\n    Fan         : [|||||||||                ] 36.00%\n\nPCI INFO:\n    Bus           : '88'\n    Bus ID        : '0000:88:00.0'\n    Device        : '00'\n    Device ID     : '1B0610DE'\n    Sub-System ID : '1210196E'\n    Generation    : '3 (Max: 3)'\n    Link Width    : '16x (Max: 16x)'\n\nGPU CLOCK:\n    Graphics : 1911.0 MHz (Max: 1911.0)\n    SM       : 1911.0 MHz (Max: 1911.0)\n    Memory   : 5005.0 MHz (Max: 5505.0)\n\nPOWER INFO:\n    Management : 'Supported'\n    Draw       : 122.23 W\n    Limit      : 250.0 W\n    Min Limit  : 125.0 W\n    Max Limit  : 300.0 W\n\nPROCESSES\n    PID    | NAME              | USER          | PARENT   | CREATION TIME          | GPU MEM\n    4276   | python            | antonio       | 45436    | '2020-04-17 03:41:27'  | 4284\n    5764   | python            | acnazarejr    | 5759     | '2020-04-16 17:57:12'  | 6515\n\n```\n\n\n#### Memory Attributes (`GPUMemoryInfo`)\n\nHelper class that handles the on-board memory attributes. Reported total memory is affected by the ECC state. If ECC is enabled, the total available memory is decreased by several percent, due to the requisite parity bits. The driver may also reserve a small amount of memory for internal use, even without active work on the GPU. These attributes are available for all products.\n\n*Attributes*\n\n* `total` (`float`) - The total installed GPU memory.\n* `used` (`float`) - The total memory allocated by active contexts.\n* `free` (`float`) - The total free memory.\n* `unit` (`str`) - The memory unit of measurement.\n\n*Usage*\n\n```python\n>>> gpu_info.memory.total\n11178.5\n>>> gpu_info.memory.used\n10799.0\n>>> gpu_info.memory.free\n379.5\n>>> gpu_info.memory.unit\n'MiB'\n```\n\n*String Conversion*\n\n```python\n>>> print(gpu_info.memory)\nGPU MEMORY:\n    Total :   11178.50 MiB (100.00%)\n    Used  :   10799.00 MiB ( 96.61%)\n    Free  :     379.50 MiB (  3.39%)\n```\n\n#### Utilization Stats (`GPUUtilizationInfo`)\n\nHelper class that handles the utilization stats of each GPU. Utilization rates report how busy each GPU is over time, and can be used to determine how much an application is using the GPUs in the system.\n\n*Attributes*\n\n* `gpu` (`float`) - The percent of the time over the past sample period during which one or more kernels were executing on the GPU. The sample period may be between 1 second and 1/6 second, depending on the product.\n* `memory` (`float`) - The percent of the time over the past sample period during which global (device) memory was being read or written. The sample period may be between 1 second and 1/6 second, depending on the product.\n* `fan` (`float`) - For a healthy fan, the percent of fan's speed.\n* `temperature` (`float`) - The core GPU temperature. For all discrete and S-class products.\n* `performance` (`str`) - The current performance state for the GPU. States range from `P0` (maximum performance) to `P12` (minimum performance).\n\n*Usage*\n\n```python\n>>> gpu_info.utilization.gpu\n65\n>>> gpu_info.utilization.memory\n59\n>>> gpu_info.utilization.fan\n36\n>>> gpu_info.utilization.temperature\n61\n>>> gpu_info.utilization.performance\n'P2'\n```\n\n*String Conversion*\n\n```python\n>>> print(gpu_info.utilization)\nGPU UTILIZATION:\n    Performance : 'P2'\n    Temperature : '61C'\n    Graphics    : [||||||||||||||||         ] 65.00%\n    Memory      : [||||||||||||||           ] 59.00%\n    Fan         : [|||||||||                ] 36.00%\n```\n\n\n### PCI Attributes (`GPUPCIInfo`)\n\nHelper class that handles the pci attributes of each GPU.\n\nThe class handles the basic PCI info for the device. Some of this information may change whenever cards are added/removed/moved in a system. It also provides the PCIe link generation and bus width. These attributes are available for all products.\n\n*Attributes*\n\n* `bus` (`str`) -The PCI bus number, in hex.\n* `bus_id` (`str`) -The PCI bus id as \"domain:bus:device.function\", in hex.\n* `device` (`str`) -The PCI device number, in hex.\n* `device_id` (`str`) -The PCI vendor device id, in hex.\n* `sub_system_id` (`str`) -The PCI Sub System id, in hex.\n* `current_link_gen` (`str`) -The current link generation. These may be reduced when the GPU is not in use.\n* `max_link_gen` (`str`) -The maximum link generation possible with this GPU and system configuration. For example, if the GPU supports a higher PCIe generation than the system supports then this reports the system PCIe generation.\n* `current_link_width` (`str`) -The current link width. These may be reduced when the GPU is not in use.\n* `max_link_width` (`str`) -The maximum link width possible with this GPU and system configuration. For example, if the GPU supports a higher link width than the system supports then this reports the system PCIe link with.\n\n*Usage*\n\n```python\n>>> gpu_info.pci.bus\n'88'\n>>> gpu_info.pci.bus_id\n'0000:88:00.0'\n>>> gpu_info.pci.device\n'00'\n>>> gpu_info.pci.device_id\n'1B0610DE'\n>>> gpu_info.pci.sub_system_id\n'1210196E'\n>>> gpu_info.pci.current_link_gen\n'3'\n>>> gpu_info.pci.max_link_gen\n'3'\n>>> gpu_info.pci.current_link_width\n'16x'\n>>> gpu_info.pci.max_link_width\n'16x'\n```\n\n*String Conversion*\n\n```python\n>>> print(gpu_info.pci)\nPCI INFO:\n    Bus           : '88'\n    Bus ID        : '0000:88:00.0'\n    Device        : '00'\n    Device ID     : '1B0610DE'\n    Sub-System ID : '1210196E'\n    Generation    : '3' (Max: '3')\n    Link Width    : '16x' (Max: '16x')\n```\n\n\n### Clock Attributes (`GPUClockInfo`)\n\nHelper class that handles the clocks attributes of each GPU.\n\nThe current frequency at which parts of the GPU are running. All readings are in MHz.\n\n*Attributes*\n\n* `graphics` (`float`) - The current frequency of graphics (shader) clock.\n* `sm` (`float`) - The current frequency of SM (Streaming Multiprocessor) clock.\n* `memory` (`float`) - The current frequency of memory clock.\n* `max_graphics` (`float`) - The maximum frequency of graphics (shader) clock.\n* `max_sm` (`float`) - The maximum frequency of SM (Streaming Multiprocessor) clock.\n* `max_memory` (`float`) - The maximum frequency of memory clock.\n* `unit` (`str`) - The clock unit of measurement.\n\n*Usage*\n\n```python\n>>> gpu_info.clocks.graphics\n1885\n>>> gpu_info.clocks.sm\n1885\n>>> gpu_info.clocks.memory\n5005\n>>> gpu_info.clocks.max_graphics\n1911\n>>> gpu_info.clocks.max_sm\n1911\n>>> gpu_info.clocks.max_memory\n5505\n>>> gpu_info.clocks.unit\n'MHz'\n```\n\n*String Conversion*\n\n```python\n>>> print(gpu_info.clocks)\nGPU CLOCK:\n    Graphics : 1911.0 MHz (Max: 1911.0)\n    SM       : 1911.0 MHz (Max: 1911.0)\n    Memory   : 5005.0 MHz (Max: 5505.0)\n```\n\n### Power Attributes (`GPUPowerInfo`)\n\nHelper class that handles the power attributes of each GPU.\n\nPower readings help to shed light on the current power usage of the GPU, and the factors that affect that usage. When power management is enabled, the GPU limits power draw under load to fit within a defined power envelope by manipulating the current performance state. See below for limits of availability.\n\n*Attributes*\n\n* `management` (`str`) - A flag that indicates whether power management is enabled. Either \"Supported\" or \"N/A\". Requires Inforom PWR object version 3.0 or higher or Kepler device.\n* `draw` (`int`) - The last measured power draw for the entire board, in watts. Only available if power management is supported. This reading is accurate to within +/- 5 watts. Requires Inforom PWR object version 3.0 or higher or Kepler device.\n* `limit` (`int`) - The software power limit, in watts. Set by software such as nvidia-smi. Only available if power management is supported. Requires Inforom PWR object version 3.0 or higher or Kepler device.\n* `min_limit` (`int`) - The minimum value in watts that power limit can be set to. Only on supported devices from Kepler family.\n* `max_limit` (`int`) - The maximum value in watts that power limit can be set to. Only on supported devices from Kepler family.\"\"\"\n* `unit` (`str`) - The clock unit of measurement.\n\n*Usage*\n\n```python\n>>> gpu_info.power.management\n'Supported'\n>>> gpu_info.power.draw\n93.067\n>>> gpu_info.power.limit\n250.0\n>>> gpu_info.power.min_limit\n125.0\n>>> gpu_info.power.max_limit\n300.0\n>>> gpu_info.power.unit\n'W'\n```\n\n*String Conversion*\n\n```python\n>>> print(gpu_info.power)\nPOWER INFO:\n    Management : Supported\n    Draw       : 93.067 W\n    Limit      : 250.0 W\n    Min Limit  : 125.0 W\n    Max Limit  : 300.0 W\n```\n\n### Processeses Attributes(`GPUProcessesInfo` and `GPUProcessInfo`)\n\nWhile each process which has compute context on the GPU are handle by the `GPUProcessInfo`, the `GPUProcessesInfo` groups all processes. In other words, `GPUProcessesInfo` lists all processes and `GPUProcessInfo` has the attributes of each process.\n\nTo access the process list, the user need to use the `processes` property of `GPUInfo`. This property also has a implicit string conversion:\n\n*Processes List String Conversion*\n\n```python\n>>> print(gpu_info.processes)\nPROCESSES\n    PID    | NAME              | USER          | PARENT   | CREATION TIME          | GPU MEM\n    4276   | python            | antonio       | 45436    | '2020-04-17 03:41:27'  | 4284\n    5764   | python            | acnazarejr    | 5759     | '2020-04-16 17:57:12'  | 6515\n```\n\nOnce the `processes` property is a list of `GPUProcessesInfo`, the user can access each process individually, using their attributes.\n\n*Attributes*\n\n* `pid` (`int`) - The process PID.\n* `name` (`str`) - The process name.\n* `user` (`str`) - The name of the user that owns the process.\n* `parent_pid` (`int`) - The process parent PID.\n* `parent_name` (`str`) - The process parent name.\n* `create_time` (`str`) - The process creation time as a floating point number expressed in seconds since the epoch, in UTC.\n* `gpu_memory` (`int`) - The amount of GPU memory allocated by the process.\n\n*Usage*\n\nFor example, for the first process in the list.\n\n```python\n>>> gpu.processes[0].pid\n5764\n>>> gpu.processes[0].name\n'python'\n>>> gpu.processes[0].user\n'acnazarejr'\n>>> gpu.processes[0].parent_pid\n5759\n>>> gpu.processes[0].parent_name\n'slurmstepd'\n>>> gpu.processes[0].create_time\n'2020-04-16 17:57:12'\n>>> gpu.processes[0].gpu_memory\n10789\n```\n\n*String Conversion*\n\n```python\n>>> print(gpu_info.processes[0])\n5764   | python            | acnazarejr    | 5759     | '2020-04-16 17:57:12'  | 6515\n```\n\n## License\nSee [LICENSE](https://github.com/acnazarejr/igpu/blob/develop/LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "http://github.com/acnazarejr/igpu", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/acnazarejr/igpu", "keywords": "gpu cuda nvidia", "license": "", "maintainer": "Antonio Carlos Nazare Jr.", "maintainer_email": "antonio.nazare@dcc.ufmg.br", "name": "igpu", "package_url": "https://pypi.org/project/igpu/", "platform": "", "project_url": "https://pypi.org/project/igpu/", "project_urls": {"Download": "http://github.com/acnazarejr/igpu", "Homepage": "http://github.com/acnazarejr/igpu"}, "release_url": "https://pypi.org/project/igpu/0.1.2/", "requires_dist": ["pynvml", "psutil"], "requires_python": ">=3.4", "summary": "A cross-platform module for retrieving information and stats on installed gpus.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>iGPU</h1>\n<p><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76719208f9f5b9cc3bd0b026e9834dbb427c4565/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f61636e617a6172656a722f69677075\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a4b48767eb32d99b8c13a40780513c764b5641d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f69677075\">\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d698abe8f5961d7e86cabed91874332f05f187e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f69677075\"></p>\n<p>The <code>igpu</code> is a pythonic cross-platform module for getting the GPU info and status from NVIDA GPU boards using th <code>pynvml</code> (<a href=\"https://github.com/gpuopenanalytics/pynvml\" rel=\"nofollow\">a python wrapper around the NVML library</a>).</p>\n<h2>Quick Start</h2>\n<ol>\n<li>Install the <code>igpu</code> module.</li>\n</ol>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">igpu</span>\n</pre>\n<ol>\n<li>And, enjoy it!</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">igpu</span>\n<span class=\"n\">gpu_count</span> <span class=\"o\">=</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">count_devices</span><span class=\"p\">()</span>\n<span class=\"n\">gpu</span> <span class=\"o\">=</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">get_device</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'This host has </span><span class=\"si\">{</span><span class=\"n\">gpu_count</span><span class=\"si\">}</span><span class=\"s1\"> devices.'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'The first gpu is a </span><span class=\"si\">{</span><span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\"> with </span><span class=\"si\">{</span><span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">total</span><span class=\"si\">:</span><span class=\"s1\">.0f</span><span class=\"si\">}{</span><span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"si\">}</span><span class=\"s1\">.'</span><span class=\"p\">)</span>\n</pre>\n<pre>This host has <span class=\"m\">4</span> devices.\nThe first gpu is a GeForce GTX <span class=\"m\">1080</span> Ti with <span class=\"m\">11178</span>.50 MiB\n</pre>\n<p><strong>Table of Contents</strong></p>\n<ol>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#usage-documentation\" rel=\"nofollow\">Usage Documentation</a>\n<ol>\n<li><a href=\"#available-devices\" rel=\"nofollow\">Available Devices</a></li>\n<li><a href=\"#visible-devices\" rel=\"nofollow\">Visible Devices</a></li>\n<li><a href=\"#gpuinfo-class-description\" rel=\"nofollow\">GPUInfo Class Description</a></li>\n</ol>\n</li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ol>\n<h2>Requirements</h2>\n<p>Supports Python 3.4 or higher. Requires least one NVIDIA GPU with latest NVIDIA driver installed.</p>\n<p>Python standard libraries:</p>\n<ul>\n<li>os (<a href=\"https://docs.python.org/3/library/os.html\" rel=\"nofollow\">The Python Standard Library</a>)</li>\n<li>textwraper (<a href=\"https://docs.python.org/3/library/textwrap.html\" rel=\"nofollow\">The Python Standard Library</a>)</li>\n<li>datetime (<a href=\"https://docs.python.org/3/library/datetime.html\" rel=\"nofollow\">The Python Standard Library</a>)</li>\n</ul>\n<p>Third-party libraries:</p>\n<ul>\n<li>pynvml (<a href=\"https://github.com/gpuopenanalytics/pynvml\" rel=\"nofollow\">Python bindings to the NVIDIA Management Library</a>)</li>\n<li>psutil (<a href=\"https://github.com/giampaolo/psutil/\" rel=\"nofollow\">Python process and system utilities</a>)</li>\n</ul>\n<h2>Installation</h2>\n<p>Currently it is only supported Python 3.4 or higher. It can be installed through pip:</p>\n<pre><code>pip install igpu\n</code></pre>\n<p>Test the installation:</p>\n<ol>\n<li>Start a python console by typing <code>python</code> in the terminal</li>\n<li>In the newly opened python console, type:</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">igpu</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">nvidia_driver_version</span><span class=\"p\">())</span>\n</pre>\n<ol>\n<li>Your output should look something like following, depending on your nvidia driver version.</li>\n</ol>\n<pre><code>(430, 34)\n</code></pre>\n<h2>Examples</h2>\n<p>The following examples illustrates the ease of use of this module. For a complete reference, see the <a href=\"#usage-documentation\" rel=\"nofollow\">Usage Documentation</a> section.</p>\n<h3>List the utilization stats of all devices</h3>\n<p>The user can access the utilization stats attributes in the following manner:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">igpu</span>\n<span class=\"k\">for</span> <span class=\"n\">gpu_info</span> <span class=\"ow\">in</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">devices</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'GPU board </span><span class=\"si\">{</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"si\">}</span><span class=\"s1\">: </span><span class=\"si\">{</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Utilization: GPU </span><span class=\"si\">{</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">gpu</span><span class=\"si\">}</span><span class=\"s1\">% | Memory </span><span class=\"si\">{</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"si\">}</span><span class=\"s1\">%'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Temperature: </span><span class=\"si\">{</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">temperature</span><span class=\"si\">}</span><span class=\"s1\">C (Fan - </span><span class=\"si\">{</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">fan</span><span class=\"si\">}</span><span class=\"s1\">%)'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">()</span>\n</pre>\n<pre>GPU board <span class=\"m\">0</span>: GeForce GTX <span class=\"m\">1080</span> Ti\nUtilization: GPU <span class=\"m\">0</span>% <span class=\"p\">|</span> Memory <span class=\"m\">0</span>%\nTemperature: 30C <span class=\"o\">(</span>Fan - <span class=\"m\">23</span>%<span class=\"o\">)</span>\n\nGPU board <span class=\"m\">1</span>: GeForce GTX <span class=\"m\">1080</span> Ti\nUtilization: GPU <span class=\"m\">65</span>% <span class=\"p\">|</span> Memory <span class=\"m\">58</span>%\nTemperature: 62C <span class=\"o\">(</span>Fan - <span class=\"m\">36</span>%<span class=\"o\">)</span>\n\nGPU board <span class=\"m\">2</span>: GeForce GTX <span class=\"m\">1080</span> Ti\nUtilization: GPU <span class=\"m\">38</span>% <span class=\"p\">|</span> Memory <span class=\"m\">33</span>%\nTemperature: 63C <span class=\"o\">(</span>Fan - <span class=\"m\">37</span>%<span class=\"o\">)</span>\n\nGPU board <span class=\"m\">3</span>: GeForce GTX <span class=\"m\">1080</span> Ti\nUtilization: GPU <span class=\"m\">0</span>% <span class=\"p\">|</span> Memory <span class=\"m\">0</span>%\nTemperature: 28C <span class=\"o\">(</span>Fan - <span class=\"m\">23</span>%<span class=\"o\">)</span>\n</pre>\n<h3>List the memory and power summary of a specific device</h3>\n<p>Each attributes group (<code>memory</code>, <code>utilization</code>, <code>pci</code>, <code>clocks</code>, <code>power</code>, <code>processes</code>) can be summarized simply by calling the string converstion. In the next example, we will print the memory and power summary of the second GPU board:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">igpu</span>\n<span class=\"n\">gpu_info</span> <span class=\"o\">=</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">get_device</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">)</span>\n</pre>\n<pre>GPU MEMORY:\n    Total :   <span class=\"m\">11178</span>.50 MiB <span class=\"o\">(</span><span class=\"m\">100</span>.00%<span class=\"o\">)</span>\n    Used  :    <span class=\"m\">6525</span>.00 MiB <span class=\"o\">(</span> <span class=\"m\">58</span>.37%<span class=\"o\">)</span>\n    Free  :    <span class=\"m\">4653</span>.50 MiB <span class=\"o\">(</span> <span class=\"m\">41</span>.63%<span class=\"o\">)</span>\nPOWER INFO:\n    Management : Supported\n    Draw       : <span class=\"m\">55</span>.751\n    Limit      : <span class=\"m\">250</span>.0\n    Min Limit  : <span class=\"m\">125</span>.0\n    Max Limit  : <span class=\"m\">300</span>.0\n</pre>\n<h3>List the processes and the memory usage of a specific device</h3>\n<p>In this example, we will work with the <code>memory</code> and <code>processes</code> attributes of the first GPU board:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">igpu</span>\n<span class=\"n\">gpu_info</span> <span class=\"o\">=</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">get_device</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'The device has </span><span class=\"si\">{</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">used</span><span class=\"si\">}</span><span class=\"s1\"> allocated out of a total of </span><span class=\"si\">{</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">total</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'The </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\"> processe(s) running on device are:'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">proc</span> <span class=\"ow\">in</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">pid</span><span class=\"si\">}</span><span class=\"s1\">: created at </span><span class=\"si\">{</span><span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">create_time</span><span class=\"si\">}</span><span class=\"s1\"> by </span><span class=\"si\">{</span><span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s1\"> and using </span><span class=\"si\">{</span><span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">gpu_memory</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<pre>The device has <span class=\"m\">10799</span>.0 allocated out of a total of <span class=\"m\">11178</span>.5\nThe <span class=\"m\">2</span> processe<span class=\"o\">(</span>s<span class=\"o\">)</span> running on device are:\n<span class=\"m\">4276</span>: created at <span class=\"m\">2020</span>-04-17 <span class=\"m\">03</span>:41:27 by antonio and using <span class=\"m\">4284</span>\n<span class=\"m\">5764</span>: created at <span class=\"m\">2020</span>-04-16 <span class=\"m\">17</span>:57:12 by acnazarejr and using <span class=\"m\">6515</span>\n</pre>\n<h2>Usage Documentation</h2>\n<p>The <code>igpu</code> module is very versatile and can be used in a different of ways, given below.</p>\n<p>To include iGPU in your Python code, all you have to do is included it on your script:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">igpu</span>\n</pre>\n<p>Once included all functions are available. The main functions along with a short description of inputs, outputs, and functionality can be found in the next sections.</p>\n<h3>Available Devices</h3>\n<p>The <code>igpu</code> can manipulate information and stats for all available devices. Availability is determined based on the GPU boards installed on the host.</p>\n<h4><code>igpu.count_devices()</code></h4>\n<p>Returns the number of available GPU devices installed on the host.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">count_devices</span><span class=\"p\">()</span>\n<span class=\"mi\">4</span>\n</pre>\n<h4><code>igpu.devices_index()</code></h4>\n<p>Returns an index list, containing the device index for each available GPU.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">devices_index</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<h4><code>igpu.get_device(device_index)</code></h4>\n<p>Given a <code>device_index</code>, returns a <a href=\"#gpuinfo-class-description\" rel=\"nofollow\"><code>GpuInfo</code></a> object containing the device properties and stats. If a nonexistent <code>device_index</code> is provided, an error is thrown.</p>\n<p>All properties and methods of <code>GpuInfo</code> class are described in <a href=\"#gpuinfo-class-description\" rel=\"nofollow\">GPUInfo Class Description</a> section.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span> <span class=\"o\">=</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">get_device</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">GeForce</span> <span class=\"n\">GTX</span> <span class=\"mi\">1080</span> <span class=\"n\">Ti</span>\n</pre>\n<h4><code>igpu.devices()</code></h4>\n<p>Returns a <a href=\"#gpuinfo-class-description\" rel=\"nofollow\"><code>GpuInfo</code></a> list containing all available devices.</p>\n<p>All properties and methods of <code>GpuInfo</code> class are described in <a href=\"#gpuinfo-class-description\" rel=\"nofollow\">GPUInfo Class Description</a> section.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">gpu_info</span> <span class=\"ow\">in</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">devices</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">GeForce</span> <span class=\"n\">GTX</span> <span class=\"mi\">1080</span> <span class=\"n\">Ti</span>\n<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">GeForce</span> <span class=\"n\">GTX</span> <span class=\"mi\">1080</span> <span class=\"n\">Ti</span>\n<span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">GeForce</span> <span class=\"n\">GTX</span> <span class=\"mi\">1080</span> <span class=\"n\">Ti</span>\n<span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">GeForce</span> <span class=\"n\">GTX</span> <span class=\"mi\">1080</span> <span class=\"n\">Ti</span>\n</pre>\n<h3>Visible Devices</h3>\n<p>By manually setting the environment variable <code>CUDA_VISIBLE_DEVICES</code> (or automatically, by other software, like SLURM cluster manager), the user can mask which GPUs should be visible to different Deep Learning frameworks (e.g. TensorFlow, PyTorch, Caffee, etc). See <a href=\"https://stackoverflow.com/questions/39649102/how-do-i-select-which-gpu-to-run-a-job-on\" rel=\"nofollow\">this stackoverflow question </a> for more info.</p>\n<p>The <code>igpu</code> module can deal with this, and consider only the visible devices, by the following methods. This functionality is handy for those who work on environments where the visible devices are defined externally. For example, <a href=\"https://slurm.schedmd.com/gres.html\" rel=\"nofollow\">when the SLURM sets</a> the <code>CUDA_VISIBLE_DEVICES</code> variable in a job.</p>\n<p>For the next examples, consider that the <code>CUDA_VISIBLE_DEVICES</code> variable was set as below:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CUDA_VISIBLE_DEVICES</span><span class=\"o\">=</span><span class=\"m\">1</span>,3\n</pre>\n<h4><code>igpu.count_visible_devices()</code></h4>\n<p>Returns the number of visible GPU devices, defined by the <code>CUDA_VISIBLE_DEVICES</code> environmnt variable.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">count_visible_devices</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span>\n</pre>\n<h4><code>igpu.visible_devices_index()</code></h4>\n<p>Returns an index list, containing the device index for each visible GPU defined by the <code>CUDA_VISIBLE_DEVICES</code> environmnt variable.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">visible_devices_index</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<h4><code>igpu.visible_devices()</code></h4>\n<p>Returns a <a href=\"#gpuinfo-class-description\" rel=\"nofollow\"><code>GpuInfo</code></a> list containing all visible devices defined by the <code>CUDA_VISIBLE_DEVICES</code> environmnt variable.</p>\n<p>All properties and methods of <code>GpuInfo</code> class are described in <a href=\"#gpuinfo-class-description\" rel=\"nofollow\">GPUInfo Class Description</a> section.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">gpu_info</span> <span class=\"ow\">in</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">visible_devices</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">GeForce</span> <span class=\"n\">GTX</span> <span class=\"mi\">1080</span> <span class=\"n\">Ti</span>\n<span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">GeForce</span> <span class=\"n\">GTX</span> <span class=\"mi\">1080</span> <span class=\"n\">Ti</span>\n</pre>\n<h3>GPUInfo Class Description</h3>\n<p>The <code>GPUInfo</code> is a helper class that handles the attributes of each GPU. The user can access all properties and stats accordingly with the GPU attributes categories. Each category has another helper subclass described below. Also, the class, and consequently, its subclasses, has an implicit conversion to a pretty string.</p>\n<p>For the all next examples, consider that the a instace of GPUInfo was created as follow:</p>\n<pre><span class=\"n\">gpu_info</span> <span class=\"o\">=</span> <span class=\"n\">igpu</span><span class=\"o\">.</span><span class=\"n\">get_device</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>Also, the class has a method (<code>GPUInfo.update()</code>) to update the device information that can be used as follow:</p>\n<pre><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>GPUInfo</code> has the general GPU attributes:</p>\n<p><em>Attributes</em></p>\n<ul>\n<li><code>index</code> (<code>int</code>) - The index of the GPU device.</li>\n<li><code>name</code> (<code>str</code>) - The official product name of the GPU.</li>\n<li><code>serial</code> (<code>str</code>) - The GPU board serial number. This number matches the serial number physically printed on each board. It is a globally unique immutable alphanumeric value.</li>\n<li><code>uuid</code> (<code>str</code>) - The GPU board uuid. This value is the globally unique immutable alphanumeric identifier of the GPU. It does not correspond to any physical label on the board.</li>\n<li><code>bios</code> (<code>str</code>) - The BIOS version of the GPU board.</li>\n</ul>\n<p><em>Usage</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">index</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'GeForce GTX 1080 Ti'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">serial</span>\n<span class=\"s1\">'N/A'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">uuid</span>\n<span class=\"s1\">'GPU-d9bf777c-e49e-e609-f873-d05b3208970b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">bios</span>\n<span class=\"s1\">'86.02.39.00.01'</span>\n</pre>\n<p><em>String Conversion</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"p\">)</span>\n<span class=\"n\">INDEX</span>        <span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">BOARD</span> <span class=\"n\">NAME</span>   <span class=\"p\">:</span> <span class=\"s1\">'GeForce GTX 1080 Ti'</span>\n<span class=\"n\">SERIAL</span>       <span class=\"p\">:</span> <span class=\"s1\">'N/A'</span>\n<span class=\"n\">UUID</span>         <span class=\"p\">:</span> <span class=\"s1\">'GPU-115dafb8-26db-32ba-d729-f21b29fc001f'</span>\n<span class=\"n\">BIOS</span> <span class=\"n\">VERSION</span> <span class=\"p\">:</span> <span class=\"s1\">'86.02.39.00.01'</span>\n\n<span class=\"n\">GPU</span> <span class=\"n\">MEMORY</span><span class=\"p\">:</span>\n    <span class=\"n\">Total</span> <span class=\"p\">:</span>   <span class=\"mf\">11178.50</span> <span class=\"n\">MiB</span> <span class=\"p\">(</span><span class=\"mf\">100.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n    <span class=\"n\">Used</span>  <span class=\"p\">:</span>   <span class=\"mf\">10799.00</span> <span class=\"n\">MiB</span> <span class=\"p\">(</span> <span class=\"mf\">96.61</span><span class=\"o\">%</span><span class=\"p\">)</span>\n    <span class=\"n\">Free</span>  <span class=\"p\">:</span>     <span class=\"mf\">379.50</span> <span class=\"n\">MiB</span> <span class=\"p\">(</span>  <span class=\"mf\">3.39</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"n\">GPU</span> <span class=\"n\">UTILIZATION</span><span class=\"p\">:</span>\n    <span class=\"n\">Performance</span> <span class=\"p\">:</span> <span class=\"n\">P2</span>\n    <span class=\"n\">Temperature</span> <span class=\"p\">:</span> <span class=\"s1\">'61C'</span>\n    <span class=\"n\">Graphics</span>    <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">|||||||||||</span>              <span class=\"p\">]</span> <span class=\"mf\">44.00</span><span class=\"o\">%</span>\n    <span class=\"n\">Memory</span>      <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">||||||||</span>                 <span class=\"p\">]</span> <span class=\"mf\">35.00</span><span class=\"o\">%</span>\n    <span class=\"n\">Fan</span>         <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">|||||||||</span>                <span class=\"p\">]</span> <span class=\"mf\">36.00</span><span class=\"o\">%</span>\n\n<span class=\"n\">PCI</span> <span class=\"n\">INFO</span><span class=\"p\">:</span>\n    <span class=\"n\">Bus</span>           <span class=\"p\">:</span> <span class=\"s1\">'88'</span>\n    <span class=\"n\">Bus</span> <span class=\"n\">ID</span>        <span class=\"p\">:</span> <span class=\"s1\">'0000:88:00.0'</span>\n    <span class=\"n\">Device</span>        <span class=\"p\">:</span> <span class=\"s1\">'00'</span>\n    <span class=\"n\">Device</span> <span class=\"n\">ID</span>     <span class=\"p\">:</span> <span class=\"s1\">'1B0610DE'</span>\n    <span class=\"n\">Sub</span><span class=\"o\">-</span><span class=\"n\">System</span> <span class=\"n\">ID</span> <span class=\"p\">:</span> <span class=\"s1\">'1210196E'</span>\n    <span class=\"n\">Generation</span>    <span class=\"p\">:</span> <span class=\"s1\">'3 (Max: 3)'</span>\n    <span class=\"n\">Link</span> <span class=\"n\">Width</span>    <span class=\"p\">:</span> <span class=\"s1\">'16x (Max: 16x)'</span>\n\n<span class=\"n\">GPU</span> <span class=\"n\">CLOCK</span><span class=\"p\">:</span>\n    <span class=\"n\">Graphics</span> <span class=\"p\">:</span> <span class=\"mf\">1911.0</span> <span class=\"n\">MHz</span> <span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">:</span> <span class=\"mf\">1911.0</span><span class=\"p\">)</span>\n    <span class=\"n\">SM</span>       <span class=\"p\">:</span> <span class=\"mf\">1911.0</span> <span class=\"n\">MHz</span> <span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">:</span> <span class=\"mf\">1911.0</span><span class=\"p\">)</span>\n    <span class=\"n\">Memory</span>   <span class=\"p\">:</span> <span class=\"mf\">5005.0</span> <span class=\"n\">MHz</span> <span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">:</span> <span class=\"mf\">5505.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">POWER</span> <span class=\"n\">INFO</span><span class=\"p\">:</span>\n    <span class=\"n\">Management</span> <span class=\"p\">:</span> <span class=\"s1\">'Supported'</span>\n    <span class=\"n\">Draw</span>       <span class=\"p\">:</span> <span class=\"mf\">122.23</span> <span class=\"n\">W</span>\n    <span class=\"n\">Limit</span>      <span class=\"p\">:</span> <span class=\"mf\">250.0</span> <span class=\"n\">W</span>\n    <span class=\"n\">Min</span> <span class=\"n\">Limit</span>  <span class=\"p\">:</span> <span class=\"mf\">125.0</span> <span class=\"n\">W</span>\n    <span class=\"n\">Max</span> <span class=\"n\">Limit</span>  <span class=\"p\">:</span> <span class=\"mf\">300.0</span> <span class=\"n\">W</span>\n\n<span class=\"n\">PROCESSES</span>\n    <span class=\"n\">PID</span>    <span class=\"o\">|</span> <span class=\"n\">NAME</span>              <span class=\"o\">|</span> <span class=\"n\">USER</span>          <span class=\"o\">|</span> <span class=\"n\">PARENT</span>   <span class=\"o\">|</span> <span class=\"n\">CREATION</span> <span class=\"n\">TIME</span>          <span class=\"o\">|</span> <span class=\"n\">GPU</span> <span class=\"n\">MEM</span>\n    <span class=\"mi\">4276</span>   <span class=\"o\">|</span> <span class=\"n\">python</span>            <span class=\"o\">|</span> <span class=\"n\">antonio</span>       <span class=\"o\">|</span> <span class=\"mi\">45436</span>    <span class=\"o\">|</span> <span class=\"s1\">'2020-04-17 03:41:27'</span>  <span class=\"o\">|</span> <span class=\"mi\">4284</span>\n    <span class=\"mi\">5764</span>   <span class=\"o\">|</span> <span class=\"n\">python</span>            <span class=\"o\">|</span> <span class=\"n\">acnazarejr</span>    <span class=\"o\">|</span> <span class=\"mi\">5759</span>     <span class=\"o\">|</span> <span class=\"s1\">'2020-04-16 17:57:12'</span>  <span class=\"o\">|</span> <span class=\"mi\">6515</span>\n</pre>\n<h4>Memory Attributes (<code>GPUMemoryInfo</code>)</h4>\n<p>Helper class that handles the on-board memory attributes. Reported total memory is affected by the ECC state. If ECC is enabled, the total available memory is decreased by several percent, due to the requisite parity bits. The driver may also reserve a small amount of memory for internal use, even without active work on the GPU. These attributes are available for all products.</p>\n<p><em>Attributes</em></p>\n<ul>\n<li><code>total</code> (<code>float</code>) - The total installed GPU memory.</li>\n<li><code>used</code> (<code>float</code>) - The total memory allocated by active contexts.</li>\n<li><code>free</code> (<code>float</code>) - The total free memory.</li>\n<li><code>unit</code> (<code>str</code>) - The memory unit of measurement.</li>\n</ul>\n<p><em>Usage</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">total</span>\n<span class=\"mf\">11178.5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">used</span>\n<span class=\"mf\">10799.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">free</span>\n<span class=\"mf\">379.5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">unit</span>\n<span class=\"s1\">'MiB'</span>\n</pre>\n<p><em>String Conversion</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"p\">)</span>\n<span class=\"n\">GPU</span> <span class=\"n\">MEMORY</span><span class=\"p\">:</span>\n    <span class=\"n\">Total</span> <span class=\"p\">:</span>   <span class=\"mf\">11178.50</span> <span class=\"n\">MiB</span> <span class=\"p\">(</span><span class=\"mf\">100.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n    <span class=\"n\">Used</span>  <span class=\"p\">:</span>   <span class=\"mf\">10799.00</span> <span class=\"n\">MiB</span> <span class=\"p\">(</span> <span class=\"mf\">96.61</span><span class=\"o\">%</span><span class=\"p\">)</span>\n    <span class=\"n\">Free</span>  <span class=\"p\">:</span>     <span class=\"mf\">379.50</span> <span class=\"n\">MiB</span> <span class=\"p\">(</span>  <span class=\"mf\">3.39</span><span class=\"o\">%</span><span class=\"p\">)</span>\n</pre>\n<h4>Utilization Stats (<code>GPUUtilizationInfo</code>)</h4>\n<p>Helper class that handles the utilization stats of each GPU. Utilization rates report how busy each GPU is over time, and can be used to determine how much an application is using the GPUs in the system.</p>\n<p><em>Attributes</em></p>\n<ul>\n<li><code>gpu</code> (<code>float</code>) - The percent of the time over the past sample period during which one or more kernels were executing on the GPU. The sample period may be between 1 second and 1/6 second, depending on the product.</li>\n<li><code>memory</code> (<code>float</code>) - The percent of the time over the past sample period during which global (device) memory was being read or written. The sample period may be between 1 second and 1/6 second, depending on the product.</li>\n<li><code>fan</code> (<code>float</code>) - For a healthy fan, the percent of fan's speed.</li>\n<li><code>temperature</code> (<code>float</code>) - The core GPU temperature. For all discrete and S-class products.</li>\n<li><code>performance</code> (<code>str</code>) - The current performance state for the GPU. States range from <code>P0</code> (maximum performance) to <code>P12</code> (minimum performance).</li>\n</ul>\n<p><em>Usage</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">gpu</span>\n<span class=\"mi\">65</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">memory</span>\n<span class=\"mi\">59</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">fan</span>\n<span class=\"mi\">36</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">temperature</span>\n<span class=\"mi\">61</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"o\">.</span><span class=\"n\">performance</span>\n<span class=\"s1\">'P2'</span>\n</pre>\n<p><em>String Conversion</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">utilization</span><span class=\"p\">)</span>\n<span class=\"n\">GPU</span> <span class=\"n\">UTILIZATION</span><span class=\"p\">:</span>\n    <span class=\"n\">Performance</span> <span class=\"p\">:</span> <span class=\"s1\">'P2'</span>\n    <span class=\"n\">Temperature</span> <span class=\"p\">:</span> <span class=\"s1\">'61C'</span>\n    <span class=\"n\">Graphics</span>    <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">||||||||||||||||</span>         <span class=\"p\">]</span> <span class=\"mf\">65.00</span><span class=\"o\">%</span>\n    <span class=\"n\">Memory</span>      <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">||||||||||||||</span>           <span class=\"p\">]</span> <span class=\"mf\">59.00</span><span class=\"o\">%</span>\n    <span class=\"n\">Fan</span>         <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">|||||||||</span>                <span class=\"p\">]</span> <span class=\"mf\">36.00</span><span class=\"o\">%</span>\n</pre>\n<h3>PCI Attributes (<code>GPUPCIInfo</code>)</h3>\n<p>Helper class that handles the pci attributes of each GPU.</p>\n<p>The class handles the basic PCI info for the device. Some of this information may change whenever cards are added/removed/moved in a system. It also provides the PCIe link generation and bus width. These attributes are available for all products.</p>\n<p><em>Attributes</em></p>\n<ul>\n<li><code>bus</code> (<code>str</code>) -The PCI bus number, in hex.</li>\n<li><code>bus_id</code> (<code>str</code>) -The PCI bus id as \"domain:bus:device.function\", in hex.</li>\n<li><code>device</code> (<code>str</code>) -The PCI device number, in hex.</li>\n<li><code>device_id</code> (<code>str</code>) -The PCI vendor device id, in hex.</li>\n<li><code>sub_system_id</code> (<code>str</code>) -The PCI Sub System id, in hex.</li>\n<li><code>current_link_gen</code> (<code>str</code>) -The current link generation. These may be reduced when the GPU is not in use.</li>\n<li><code>max_link_gen</code> (<code>str</code>) -The maximum link generation possible with this GPU and system configuration. For example, if the GPU supports a higher PCIe generation than the system supports then this reports the system PCIe generation.</li>\n<li><code>current_link_width</code> (<code>str</code>) -The current link width. These may be reduced when the GPU is not in use.</li>\n<li><code>max_link_width</code> (<code>str</code>) -The maximum link width possible with this GPU and system configuration. For example, if the GPU supports a higher link width than the system supports then this reports the system PCIe link with.</li>\n</ul>\n<p><em>Usage</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">bus</span>\n<span class=\"s1\">'88'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">bus_id</span>\n<span class=\"s1\">'0000:88:00.0'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">device</span>\n<span class=\"s1\">'00'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">device_id</span>\n<span class=\"s1\">'1B0610DE'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">sub_system_id</span>\n<span class=\"s1\">'1210196E'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">current_link_gen</span>\n<span class=\"s1\">'3'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">max_link_gen</span>\n<span class=\"s1\">'3'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">current_link_width</span>\n<span class=\"s1\">'16x'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"o\">.</span><span class=\"n\">max_link_width</span>\n<span class=\"s1\">'16x'</span>\n</pre>\n<p><em>String Conversion</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">pci</span><span class=\"p\">)</span>\n<span class=\"n\">PCI</span> <span class=\"n\">INFO</span><span class=\"p\">:</span>\n    <span class=\"n\">Bus</span>           <span class=\"p\">:</span> <span class=\"s1\">'88'</span>\n    <span class=\"n\">Bus</span> <span class=\"n\">ID</span>        <span class=\"p\">:</span> <span class=\"s1\">'0000:88:00.0'</span>\n    <span class=\"n\">Device</span>        <span class=\"p\">:</span> <span class=\"s1\">'00'</span>\n    <span class=\"n\">Device</span> <span class=\"n\">ID</span>     <span class=\"p\">:</span> <span class=\"s1\">'1B0610DE'</span>\n    <span class=\"n\">Sub</span><span class=\"o\">-</span><span class=\"n\">System</span> <span class=\"n\">ID</span> <span class=\"p\">:</span> <span class=\"s1\">'1210196E'</span>\n    <span class=\"n\">Generation</span>    <span class=\"p\">:</span> <span class=\"s1\">'3'</span> <span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">:</span> <span class=\"s1\">'3'</span><span class=\"p\">)</span>\n    <span class=\"n\">Link</span> <span class=\"n\">Width</span>    <span class=\"p\">:</span> <span class=\"s1\">'16x'</span> <span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">:</span> <span class=\"s1\">'16x'</span><span class=\"p\">)</span>\n</pre>\n<h3>Clock Attributes (<code>GPUClockInfo</code>)</h3>\n<p>Helper class that handles the clocks attributes of each GPU.</p>\n<p>The current frequency at which parts of the GPU are running. All readings are in MHz.</p>\n<p><em>Attributes</em></p>\n<ul>\n<li><code>graphics</code> (<code>float</code>) - The current frequency of graphics (shader) clock.</li>\n<li><code>sm</code> (<code>float</code>) - The current frequency of SM (Streaming Multiprocessor) clock.</li>\n<li><code>memory</code> (<code>float</code>) - The current frequency of memory clock.</li>\n<li><code>max_graphics</code> (<code>float</code>) - The maximum frequency of graphics (shader) clock.</li>\n<li><code>max_sm</code> (<code>float</code>) - The maximum frequency of SM (Streaming Multiprocessor) clock.</li>\n<li><code>max_memory</code> (<code>float</code>) - The maximum frequency of memory clock.</li>\n<li><code>unit</code> (<code>str</code>) - The clock unit of measurement.</li>\n</ul>\n<p><em>Usage</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">clocks</span><span class=\"o\">.</span><span class=\"n\">graphics</span>\n<span class=\"mi\">1885</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">clocks</span><span class=\"o\">.</span><span class=\"n\">sm</span>\n<span class=\"mi\">1885</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">clocks</span><span class=\"o\">.</span><span class=\"n\">memory</span>\n<span class=\"mi\">5005</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">clocks</span><span class=\"o\">.</span><span class=\"n\">max_graphics</span>\n<span class=\"mi\">1911</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">clocks</span><span class=\"o\">.</span><span class=\"n\">max_sm</span>\n<span class=\"mi\">1911</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">clocks</span><span class=\"o\">.</span><span class=\"n\">max_memory</span>\n<span class=\"mi\">5505</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">clocks</span><span class=\"o\">.</span><span class=\"n\">unit</span>\n<span class=\"s1\">'MHz'</span>\n</pre>\n<p><em>String Conversion</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">clocks</span><span class=\"p\">)</span>\n<span class=\"n\">GPU</span> <span class=\"n\">CLOCK</span><span class=\"p\">:</span>\n    <span class=\"n\">Graphics</span> <span class=\"p\">:</span> <span class=\"mf\">1911.0</span> <span class=\"n\">MHz</span> <span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">:</span> <span class=\"mf\">1911.0</span><span class=\"p\">)</span>\n    <span class=\"n\">SM</span>       <span class=\"p\">:</span> <span class=\"mf\">1911.0</span> <span class=\"n\">MHz</span> <span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">:</span> <span class=\"mf\">1911.0</span><span class=\"p\">)</span>\n    <span class=\"n\">Memory</span>   <span class=\"p\">:</span> <span class=\"mf\">5005.0</span> <span class=\"n\">MHz</span> <span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">:</span> <span class=\"mf\">5505.0</span><span class=\"p\">)</span>\n</pre>\n<h3>Power Attributes (<code>GPUPowerInfo</code>)</h3>\n<p>Helper class that handles the power attributes of each GPU.</p>\n<p>Power readings help to shed light on the current power usage of the GPU, and the factors that affect that usage. When power management is enabled, the GPU limits power draw under load to fit within a defined power envelope by manipulating the current performance state. See below for limits of availability.</p>\n<p><em>Attributes</em></p>\n<ul>\n<li><code>management</code> (<code>str</code>) - A flag that indicates whether power management is enabled. Either \"Supported\" or \"N/A\". Requires Inforom PWR object version 3.0 or higher or Kepler device.</li>\n<li><code>draw</code> (<code>int</code>) - The last measured power draw for the entire board, in watts. Only available if power management is supported. This reading is accurate to within +/- 5 watts. Requires Inforom PWR object version 3.0 or higher or Kepler device.</li>\n<li><code>limit</code> (<code>int</code>) - The software power limit, in watts. Set by software such as nvidia-smi. Only available if power management is supported. Requires Inforom PWR object version 3.0 or higher or Kepler device.</li>\n<li><code>min_limit</code> (<code>int</code>) - The minimum value in watts that power limit can be set to. Only on supported devices from Kepler family.</li>\n<li><code>max_limit</code> (<code>int</code>) - The maximum value in watts that power limit can be set to. Only on supported devices from Kepler family.\"\"\"</li>\n<li><code>unit</code> (<code>str</code>) - The clock unit of measurement.</li>\n</ul>\n<p><em>Usage</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"o\">.</span><span class=\"n\">management</span>\n<span class=\"s1\">'Supported'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"o\">.</span><span class=\"n\">draw</span>\n<span class=\"mf\">93.067</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"o\">.</span><span class=\"n\">limit</span>\n<span class=\"mf\">250.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"o\">.</span><span class=\"n\">min_limit</span>\n<span class=\"mf\">125.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"o\">.</span><span class=\"n\">max_limit</span>\n<span class=\"mf\">300.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"o\">.</span><span class=\"n\">unit</span>\n<span class=\"s1\">'W'</span>\n</pre>\n<p><em>String Conversion</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">)</span>\n<span class=\"n\">POWER</span> <span class=\"n\">INFO</span><span class=\"p\">:</span>\n    <span class=\"n\">Management</span> <span class=\"p\">:</span> <span class=\"n\">Supported</span>\n    <span class=\"n\">Draw</span>       <span class=\"p\">:</span> <span class=\"mf\">93.067</span> <span class=\"n\">W</span>\n    <span class=\"n\">Limit</span>      <span class=\"p\">:</span> <span class=\"mf\">250.0</span> <span class=\"n\">W</span>\n    <span class=\"n\">Min</span> <span class=\"n\">Limit</span>  <span class=\"p\">:</span> <span class=\"mf\">125.0</span> <span class=\"n\">W</span>\n    <span class=\"n\">Max</span> <span class=\"n\">Limit</span>  <span class=\"p\">:</span> <span class=\"mf\">300.0</span> <span class=\"n\">W</span>\n</pre>\n<h3>Processeses Attributes(<code>GPUProcessesInfo</code> and <code>GPUProcessInfo</code>)</h3>\n<p>While each process which has compute context on the GPU are handle by the <code>GPUProcessInfo</code>, the <code>GPUProcessesInfo</code> groups all processes. In other words, <code>GPUProcessesInfo</code> lists all processes and <code>GPUProcessInfo</code> has the attributes of each process.</p>\n<p>To access the process list, the user need to use the <code>processes</code> property of <code>GPUInfo</code>. This property also has a implicit string conversion:</p>\n<p><em>Processes List String Conversion</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">)</span>\n<span class=\"n\">PROCESSES</span>\n    <span class=\"n\">PID</span>    <span class=\"o\">|</span> <span class=\"n\">NAME</span>              <span class=\"o\">|</span> <span class=\"n\">USER</span>          <span class=\"o\">|</span> <span class=\"n\">PARENT</span>   <span class=\"o\">|</span> <span class=\"n\">CREATION</span> <span class=\"n\">TIME</span>          <span class=\"o\">|</span> <span class=\"n\">GPU</span> <span class=\"n\">MEM</span>\n    <span class=\"mi\">4276</span>   <span class=\"o\">|</span> <span class=\"n\">python</span>            <span class=\"o\">|</span> <span class=\"n\">antonio</span>       <span class=\"o\">|</span> <span class=\"mi\">45436</span>    <span class=\"o\">|</span> <span class=\"s1\">'2020-04-17 03:41:27'</span>  <span class=\"o\">|</span> <span class=\"mi\">4284</span>\n    <span class=\"mi\">5764</span>   <span class=\"o\">|</span> <span class=\"n\">python</span>            <span class=\"o\">|</span> <span class=\"n\">acnazarejr</span>    <span class=\"o\">|</span> <span class=\"mi\">5759</span>     <span class=\"o\">|</span> <span class=\"s1\">'2020-04-16 17:57:12'</span>  <span class=\"o\">|</span> <span class=\"mi\">6515</span>\n</pre>\n<p>Once the <code>processes</code> property is a list of <code>GPUProcessesInfo</code>, the user can access each process individually, using their attributes.</p>\n<p><em>Attributes</em></p>\n<ul>\n<li><code>pid</code> (<code>int</code>) - The process PID.</li>\n<li><code>name</code> (<code>str</code>) - The process name.</li>\n<li><code>user</code> (<code>str</code>) - The name of the user that owns the process.</li>\n<li><code>parent_pid</code> (<code>int</code>) - The process parent PID.</li>\n<li><code>parent_name</code> (<code>str</code>) - The process parent name.</li>\n<li><code>create_time</code> (<code>str</code>) - The process creation time as a floating point number expressed in seconds since the epoch, in UTC.</li>\n<li><code>gpu_memory</code> (<code>int</code>) - The amount of GPU memory allocated by the process.</li>\n</ul>\n<p><em>Usage</em></p>\n<p>For example, for the first process in the list.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pid</span>\n<span class=\"mi\">5764</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'python'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">user</span>\n<span class=\"s1\">'acnazarejr'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">parent_pid</span>\n<span class=\"mi\">5759</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">parent_name</span>\n<span class=\"s1\">'slurmstepd'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">create_time</span>\n<span class=\"s1\">'2020-04-16 17:57:12'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gpu</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">gpu_memory</span>\n<span class=\"mi\">10789</span>\n</pre>\n<p><em>String Conversion</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_info</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"mi\">5764</span>   <span class=\"o\">|</span> <span class=\"n\">python</span>            <span class=\"o\">|</span> <span class=\"n\">acnazarejr</span>    <span class=\"o\">|</span> <span class=\"mi\">5759</span>     <span class=\"o\">|</span> <span class=\"s1\">'2020-04-16 17:57:12'</span>  <span class=\"o\">|</span> <span class=\"mi\">6515</span>\n</pre>\n<h2>License</h2>\n<p>See <a href=\"https://github.com/acnazarejr/igpu/blob/develop/LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n\n          </div>"}, "last_serial": 7100319, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ebdd5abd11bb7156194ec438003f350d", "sha256": "76b7ca35361959cb43706690539ad9f9ba6408aa155580e1fc04812c647fb702"}, "downloads": -1, "filename": "igpu-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ebdd5abd11bb7156194ec438003f350d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15302, "upload_time": "2020-04-19T19:20:58", "upload_time_iso_8601": "2020-04-19T19:20:58.419160Z", "url": "https://files.pythonhosted.org/packages/d6/7f/389cbdd88a4f5c225cc2f61bf1d454a3c8aa68db10b27f0eb7c6d2f90bc1/igpu-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd971581974f5916ad1c0308b2caac91", "sha256": "1c70e84c70e4c6961894f76c1059accf1eca9809c302b77df58e0cff1876893c"}, "downloads": -1, "filename": "igpu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fd971581974f5916ad1c0308b2caac91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 19849, "upload_time": "2020-04-19T19:21:01", "upload_time_iso_8601": "2020-04-19T19:21:01.777325Z", "url": "https://files.pythonhosted.org/packages/3a/27/a8695bb677374c00e9000fb069b614688f8c923cb9394a78e07b522f92a9/igpu-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "60cd92e631accc53912eeb1b0afd158b", "sha256": "3f5049a77d93d83e0f6286675c1f20967b8d5a1a5fe368474e01c339c5da34f2"}, "downloads": -1, "filename": "igpu-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "60cd92e631accc53912eeb1b0afd158b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15359, "upload_time": "2020-04-20T02:21:23", "upload_time_iso_8601": "2020-04-20T02:21:23.562183Z", "url": "https://files.pythonhosted.org/packages/f9/3c/2d022e80b6a77f8dc15cb29f71829d9de9e213fbd8605f98dbca3700403b/igpu-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b69d8bfba9164dbd39e9203f555dcda6", "sha256": "3ac2a8fa6c7fb2d0292f4095c7f869bf9c2a0d013c2f4e6a32d3c0ef26776e85"}, "downloads": -1, "filename": "igpu-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b69d8bfba9164dbd39e9203f555dcda6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 19884, "upload_time": "2020-04-20T02:21:25", "upload_time_iso_8601": "2020-04-20T02:21:25.447023Z", "url": "https://files.pythonhosted.org/packages/c4/be/b5a62575bdc04e963dc6397268fe6a872198e3bdcbe8b647d50a924544bc/igpu-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0d308162f170311f4a25a2469a5a9352", "sha256": "bbea18558e48ad2f9582ae2eb966d91b5422b2bc745c40858c4144d65ffdd791"}, "downloads": -1, "filename": "igpu-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0d308162f170311f4a25a2469a5a9352", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15947, "upload_time": "2020-04-25T16:45:06", "upload_time_iso_8601": "2020-04-25T16:45:06.132299Z", "url": "https://files.pythonhosted.org/packages/13/ee/3c413d5b01ff2ae121625a1d79e8a4c3845e95e07d48275df636e0b85b48/igpu-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f795cc0bcdc17314974ccbae84f59db", "sha256": "ece66b203dffdf48d47588f6236979e16798c0f34315c170c6a9de03d5017b6f"}, "downloads": -1, "filename": "igpu-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5f795cc0bcdc17314974ccbae84f59db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 20737, "upload_time": "2020-04-25T16:45:08", "upload_time_iso_8601": "2020-04-25T16:45:08.114170Z", "url": "https://files.pythonhosted.org/packages/30/9e/913c2b5d88a0e74bee3d2261fc66555c2505a46b70fd4232925ecacfb791/igpu-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0d308162f170311f4a25a2469a5a9352", "sha256": "bbea18558e48ad2f9582ae2eb966d91b5422b2bc745c40858c4144d65ffdd791"}, "downloads": -1, "filename": "igpu-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0d308162f170311f4a25a2469a5a9352", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15947, "upload_time": "2020-04-25T16:45:06", "upload_time_iso_8601": "2020-04-25T16:45:06.132299Z", "url": "https://files.pythonhosted.org/packages/13/ee/3c413d5b01ff2ae121625a1d79e8a4c3845e95e07d48275df636e0b85b48/igpu-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f795cc0bcdc17314974ccbae84f59db", "sha256": "ece66b203dffdf48d47588f6236979e16798c0f34315c170c6a9de03d5017b6f"}, "downloads": -1, "filename": "igpu-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5f795cc0bcdc17314974ccbae84f59db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 20737, "upload_time": "2020-04-25T16:45:08", "upload_time_iso_8601": "2020-04-25T16:45:08.114170Z", "url": "https://files.pythonhosted.org/packages/30/9e/913c2b5d88a0e74bee3d2261fc66555c2505a46b70fd4232925ecacfb791/igpu-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:05 2020"}