{"info": {"author": "exactEarth Ltd.", "author_email": "open-source@exactearth.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "================\nprogress_tracker\n================\n\n``progress_tracker`` is an easy and flexible way to print custom progress messages while processing streams of events on the CLI.\n\nIt was originally developed at `exactEarth Ltd`_ . See `this presentation`_ to `DevHouse Waterloo`_ for the original motivation.\n\n.. _exactEarth Ltd: https://exactearth.com/\n\nBuilt and tested with Python 3.6+\n\n.. contents:: Contents\n\nQuick Start\n-----------\n\n.. code:: bash\n\n  % pip install progress_tracker\n\n.. code:: python\n\n    >>> from progress_tracker import track_progress\n    >>> for _ in track_progress(list(range(1000)), every_n_records=100):\n    ...     continue\n    ...\n    100/1000 (10.0%) in 0:00:00.000114 (Time left: 0:00:00.001026)\n    200/1000 (20.0%) in 0:00:00.000274 (Time left: 0:00:00.001096)\n    300/1000 (30.0%) in 0:00:00.000374 (Time left: 0:00:00.000873)\n    400/1000 (40.0%) in 0:00:00.000473 (Time left: 0:00:00.000710)\n    500/1000 (50.0%) in 0:00:00.000572 (Time left: 0:00:00.000572)\n    600/1000 (60.0%) in 0:00:00.000671 (Time left: 0:00:00.000447)\n    700/1000 (70.0%) in 0:00:00.000770 (Time left: 0:00:00.000330)\n    800/1000 (80.0%) in 0:00:00.000868 (Time left: 0:00:00.000217)\n    900/1000 (90.0%) in 0:00:00.000979 (Time left: 0:00:00.000109)\n    1000 in 0:00:00.001086\n\nUsage\n-----\n\n``progress_tracker`` is very customizable to fit your desires, but tries to have sensible defaults.\n\nThe core of ``progress_tracker`` is a method called ``track_progress``.\nBy changing the parameters passed to ``track_progress``, you can customize how frequently (and with what messages) the tracker will report.\n\n.. code:: python\n\n    def track_progress( \n        iterable: Iterable[T], # The iterable to iterate over\n        total: Optional[int] = None, # Override for the total message count, defaults to len(iterable)\n        callback: Callable[[str], Any] = print, # A function (f(str) -> None) that gets called each time a condition matches\n        format_callback: Callable[[Dict[str, Any], Set[str]], str] = default_format_callback, # A function (f(str) -> str) that formats the progress values into a string.\n        every_n_percent: Optional[float] = None, # Reports after every n percent\n        every_n_records: Optional[int] = None, # Reports every n records\n        every_n_seconds: Optional[float] = None, # Reports every n seconds\n        every_n_seconds_idle: Optional[float] = None, # Report if there has not been a record processed in the past n seconds. Useful for infinite streams.\n        every_n_seconds_since_report: Optional[float] = None, # Report if there hasn\u2019t been any report in the past n seconds.\n        report_first_record: bool = False, # Report after the first record\n        report_last_record: bool = False # Report after the last record\n        ) -> None\n\nExamples\n^^^^^^^^\n\nPrint after every n records are processed\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``every_n_records`` parameter will trigger a report after every nth record is processed. \n\n.. code:: python\n\n    >>> from progress_tracker import track_progress\n    >>>\n    >>> for _ in track_progress(list(range(1000)), every_n_records=100):\n    ...     continue\n    ...\n    100/1000 (10.0%) in 0:00:00.000114 (Time left: 0:00:00.001026)\n    200/1000 (20.0%) in 0:00:00.000274 (Time left: 0:00:00.001096)\n    300/1000 (30.0%) in 0:00:00.000374 (Time left: 0:00:00.000873)\n    400/1000 (40.0%) in 0:00:00.000473 (Time left: 0:00:00.000710)\n    500/1000 (50.0%) in 0:00:00.000572 (Time left: 0:00:00.000572)\n    600/1000 (60.0%) in 0:00:00.000671 (Time left: 0:00:00.000447)\n    700/1000 (70.0%) in 0:00:00.000770 (Time left: 0:00:00.000330)\n    800/1000 (80.0%) in 0:00:00.000868 (Time left: 0:00:00.000217)\n    900/1000 (90.0%) in 0:00:00.000979 (Time left: 0:00:00.000109)\n    1000 in 0:00:00.001086\n\nPrint after every x percent of records are processed\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``every_n_percent`` parameter will trigger a report after every nth percent of records are processed. \n\n.. code:: python\n\n    >>> from progress_tracker import track_progress\n    >>> for _ in track_progress(list(range(1000)), every_n_percent=10):\n    ...     continue\n    ...\n    100/1000 (10.0%) in 0:00:00.000114 (Time left: 0:00:00.001026)\n    200/1000 (20.0%) in 0:00:00.000274 (Time left: 0:00:00.001096)\n    300/1000 (30.0%) in 0:00:00.000374 (Time left: 0:00:00.000873)\n    400/1000 (40.0%) in 0:00:00.000473 (Time left: 0:00:00.000710)\n    500/1000 (50.0%) in 0:00:00.000572 (Time left: 0:00:00.000572)\n    600/1000 (60.0%) in 0:00:00.000671 (Time left: 0:00:00.000447)\n    700/1000 (70.0%) in 0:00:00.000770 (Time left: 0:00:00.000330)\n    800/1000 (80.0%) in 0:00:00.000868 (Time left: 0:00:00.000217)\n    900/1000 (90.0%) in 0:00:00.000979 (Time left: 0:00:00.000109)\n    1000 in 0:00:00.001086\n\n``every_n_percent`` only works for bounded iterables. For unbounded iterables (ex. streams), using ``every_n_percent`` will report a ``RuntimeWarning``.\n\nAt most a single report is generated per processed record. Even if processing of a single record would meet the conditions multiple times \n(ex. if ``every_n_percent=10``, but there are only 2 records, then processing each record causes 50%, or 5 * 10%, progress), only a single report is created (containing the latest values).\n\nPrint every n records OR every n seconds during processing\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is especially useful when you have highly variable processing times (ex. most records take 2 seconds to process, but some take 20 seconds to process).\nYou can use the ``every_n_seconds`` parameter to get reports between the expensive records.\n\n.. code:: python\n\n    import time\n    from progress_tracker import track_progress\n\n    def simulated_processing(item):\n        if item == 'hard':\n            time.sleep(10)\n\n    variable_stream_simulation = (['easy'] * 15) + (['hard'] * 5) + (['easy'] * 15)\n\n    for item in track_progress(variable_stream_simulation, every_n_records=5, every_n_seconds=10):\n        simulated_processing(item)\n\n    ...\n    5/35 (14.285714285714285%) in 0:00:00.000014 (Time left: 0:00:00.000084)\n    10/35 (28.57142857142857%) in 0:00:00.000095 (Time left: 0:00:00.000238)\n    15/35 (42.857142857142854%) in 0:00:00.000120 (Time left: 0:00:00.000160)\n    16/35 (45.714285714285715%) in 0:00:10.011364 (Time left: 0:00:11.888495)\n    17/35 (48.57142857142857%) in 0:00:20.022107 (Time left: 0:00:21.199878)\n    18/35 (51.42857142857142%) in 0:00:30.031801 (Time left: 0:00:28.363368)\n    19/35 (54.285714285714285%) in 0:00:40.041754 (Time left: 0:00:33.719372)\n    20/35 (57.14285714285714%) in 0:00:50.073991 (Time left: 0:00:37.555493)\n    25/35 (71.42857142857143%) in 0:00:50.074246 (Time left: 0:00:20.029698)\n    30/35 (85.71428571428571%) in 0:00:50.074286 (Time left: 0:00:08.345714)\n    35 in 0:00:50.074319\n\nDuring the processing of the slow records, ``track_progress`` reported after every record.\n\nNote: Because the default \"Time left\" calculation is just a simple linear extrapolation, it is not as useful in the face of such variability in processing times.\n\nCombining trigger conditions\n----------------------------\n\nAs seen in the previous example, you can combine multiple conditions together to dictate when a report is created.\n\nEach of the conditions are combined using an OR operator, meaning that if any condition is met, a report is created.\n\nEven if multiple conditions are met simultaneously, only a single report will be created.\n\nReport Creation Invariants\n--------------------------\n\nReport creation observes two invariants:\n\n1. At most a single report is created per processed record.\n2. Reports are only created in response to a record being processed.\n\nCustomizing the report formatting / Internationalization\n--------------------------------------------------------\n\nBy default, ``progress_tracker`` formats the report into an English language string.\nThis can be overriden by supplying a different function as the ``format_callback`` parameter to ``track_progress``.\n\nThis can be used to perform advanced formatting, or to add internationalization/localization.\n\n.. code:: python\n\n    def format_en_francais(report: Dict[str, Any], reasons: Set[str]):\n        i = report[\"i\"]\n        total = report[\"total\"]\n        if total is None or i == total:\n            format_string = \"{i} messages trait\u00e9s en {time_taken}\"\n        else:\n            format_string = \"{i}/{total} messages trait\u00e9s en {time_taken} (temps restant: {estimated_time_remaining})\"\n        return format_string.format(**report)\n\n    for poste in track_progress(postes, every_n_records=100, format_callback=format_en_francais):\n        trait\u00e9(poste)\n\n(Veuillez excuser toute erreur en fran\u00e7ais. C'est le r\u00e9sultat de Google Translate.)\n\nSimple cases can also be done using a lambda:\n\n.. code:: python\n\n    >>> from progress_tracker import track_progress\n    >>>\n    >>> for _ in track_progress(list(range(5)), every_n_records=1, format_callback=lambda **kwargs: \"Got one!\"):\n    ...     continue\n    ...\n    Got one!\n    Got one!\n    Got one!\n    Got one!\n    Got one!\n\nReport values available\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following values are available in every report for use in the ``format_callback``:\n\n.. table::\n   :widths: auto\n\n   ============================== =================== =======================================================================================================================================\n   Value                          Type                Meaning\n   ============================== =================== =======================================================================================================================================\n   ``{records_seen}``             int                 The number of records processed so far.\n   ``{total}``                    Optional[int]       The total of records in the iterable, if known. Else ``None``\n   ``{percent_complete}``         Optional[float]     The percentage of records processed so far. ``None`` if ``{total}`` is ``None`` or ``records_seen`` = 0\n   ``{time_taken}``               timedelta           The amount of time that processing has taken thus far.\n   ``{estimated_time_remaining}`` Optional[timedelta] The estimated amount of time needed in order to process the rest of the records (simple linear estimate). ``None`` if total is ``None``\n   ``{items_per_second}``         Optional[float]     The number of records processed so far / the number of seconds elapsed. ``None`` if no time have elapsed.\n   ``{idle_time}``                timedelta           The amount of idle time between the previous record's processing and this record's arrival.\n   ============================== =================== =======================================================================================================================================\n\nCustomizing the print behaviour\n-------------------------------\n\nBy default, ``progress_tracker`` calls Python's `print`_ function with the formatted report.\nThis can be overriden by supplying a different function as the ``callback`` parameter to ``track_progress``.\n\n.. _`print`: https://docs.python.org/3/library/functions.html#print\n\n``every_n_seconds_idle``\n------------------------\n\n``every_n_seconds_idle`` allows you to trigger a report if there is ever more than ``n`` seconds when no records were processed.\n\nNote: If processing of a single record takes longer than ``every_n_seconds_idle``, then it will be triggered after every record.\n\nDifference between ``every_n_seconds`` and ``every_n_seconds_idle``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* ``every_n_seconds`` triggers a report anytime it has been more than n seconds since ``every_n_seconds`` last triggered a report.\n* ``every_n_seconds_idle`` triggers a report anytime there has not been a record processed in the past n seconds (ie. the processing has been idle).\n\nFor example:\n\n.. table::\n   :widths: auto\n\n   ========== ================================== ============================= ================================================================ ======================\n   After      # of records processed in interval Cummulative records processed every_n_seconds=3                                                every_n_seconds_idle=3\n   ========== ================================== ============================= ================================================================ ======================\n   0 seconds  0                                  0                                                                     \n   1 second   1                                  1                                                                     \n   2 seconds  1                                  2                                                                     \n   3 seconds  1                                  3                             Triggered, since it is the first record T >= 3s (T >= 0s + 3s)\n   4 seconds  1                                  4                                                                     \n   5 seconds  1                                  5                                                                     \n   6 seconds  1                                  6                             Triggered, since it is the first record T >= 6s (T >= 3s + 3s)                                         \n   7 seconds  1                                  6                                                                     \n   8 seconds  0                                  6                                                                     \n   9 seconds  0                                  6                                                                     \n   10 seconds 0                                  6                                                                     \n   11 seconds 1                                  7                             Triggered, since it is the first record T >= 9s (T >= 6s + 3s)   Triggered, since it is the first record processed in the past 3 seconds (T >= 6s + 3s)                                      \n   12 seconds 1                                  8                                                                     \n   13 seconds 1                                  9                                                                     \n   14 seconds 1                                  10                            Triggered, since it is the first record T >= 14s (T >= 11s + 3s)                                        \n   15 seconds 1                                  11                                                                    \n   ========== ================================== ============================= ================================================================ ======================\n\nNote that ``every_n_seconds`` reports at 3 seconds and 6 seconds, as one would expect. Then it reports at 11 seconds, since that is the first time a record was processed after the 9 seconds mark.\nThen note that instead of next reporting at 12 seconds (9s + 3s), it reports next at 14 seconds (11s + 3s).\n\n``every_n_seconds_idle`` only reported at 11 seconds, since that was the only time that a record was processed without other records being processed during the previous 3 seconds.\n\nAccessing tracker after processing\n----------------------------------\n\nBy default, ``track_progress`` hides the internal ``ProgressTracker`` object underneath. However, in some cases you might want to be able to access the internals of the object after iteration.\nIn these cases, you can use ``track_progress`` an explicit context manager:\n\n.. code:: python\n\n    with track_progress(range(0, 101), every_n_percent=5) as tracker:\n        for item in tracker:\n            process(item)\n        final_report = tracker.create_report()\n        print(f\"Processing took {final_report['time_taken']} and processed {final_report['records_seen']} records.\")\n\n\nOther Resources\n---------------\n\n- `This presentation`_ to `DevHouse Waterloo`_.\n\n.. _This presentation: https://www.slideshare.net/MichaelOvermeyer/progress-tracker-a-handy-progress-printout-pattern\n.. _DevHouse Waterloo: https://www.meetup.com/DevHouse-Waterloo/events/247071801/\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "progress-tracker", "package_url": "https://pypi.org/project/progress-tracker/", "platform": "", "project_url": "https://pypi.org/project/progress-tracker/", "project_urls": null, "release_url": "https://pypi.org/project/progress-tracker/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A utility that wraps an Iterable and regularly prints out progress on the processing of that Iterable", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>progress_tracker</tt> is an easy and flexible way to print custom progress messages while processing streams of events on the CLI.</p>\n<p>It was originally developed at <a href=\"https://exactearth.com/\" rel=\"nofollow\">exactEarth Ltd</a> . See <a href=\"https://www.slideshare.net/MichaelOvermeyer/progress-tracker-a-handy-progress-printout-pattern\" rel=\"nofollow\">this presentation</a> to <a href=\"https://www.meetup.com/DevHouse-Waterloo/events/247071801/\" rel=\"nofollow\">DevHouse Waterloo</a> for the original motivation.</p>\n<p>Built and tested with Python 3.6+</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#quick-start\" id=\"id1\" rel=\"nofollow\">Quick Start</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#examples\" id=\"id3\" rel=\"nofollow\">Examples</a><ul>\n<li><a href=\"#print-after-every-n-records-are-processed\" id=\"id4\" rel=\"nofollow\">Print after every n records are processed</a></li>\n<li><a href=\"#print-after-every-x-percent-of-records-are-processed\" id=\"id5\" rel=\"nofollow\">Print after every x percent of records are processed</a></li>\n<li><a href=\"#print-every-n-records-or-every-n-seconds-during-processing\" id=\"id6\" rel=\"nofollow\">Print every n records OR every n seconds during processing</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#combining-trigger-conditions\" id=\"id7\" rel=\"nofollow\">Combining trigger conditions</a></li>\n<li><a href=\"#report-creation-invariants\" id=\"id8\" rel=\"nofollow\">Report Creation Invariants</a></li>\n<li><a href=\"#customizing-the-report-formatting-internationalization\" id=\"id9\" rel=\"nofollow\">Customizing the report formatting / Internationalization</a><ul>\n<li><a href=\"#report-values-available\" id=\"id10\" rel=\"nofollow\">Report values available</a></li>\n</ul>\n</li>\n<li><a href=\"#customizing-the-print-behaviour\" id=\"id11\" rel=\"nofollow\">Customizing the print behaviour</a></li>\n<li><a href=\"#every-n-seconds-idle\" id=\"id12\" rel=\"nofollow\"><tt>every_n_seconds_idle</tt></a><ul>\n<li><a href=\"#difference-between-every-n-seconds-and-every-n-seconds-idle\" id=\"id13\" rel=\"nofollow\">Difference between <tt>every_n_seconds</tt> and <tt>every_n_seconds_idle</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#accessing-tracker-after-processing\" id=\"id14\" rel=\"nofollow\">Accessing tracker after processing</a></li>\n<li><a href=\"#other-resources\" id=\"id15\" rel=\"nofollow\">Other Resources</a></li>\n</ul>\n</div>\n<div id=\"quick-start\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Quick Start</a></h2>\n<pre>% pip install progress_tracker\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">progress_tracker</span> <span class=\"kn\">import</span> <span class=\"n\">track_progress</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">track_progress</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)),</span> <span class=\"n\">every_n_records</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">continue</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">100</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000114</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001026</span><span class=\"p\">)</span>\n<span class=\"mi\">200</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">20.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000274</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001096</span><span class=\"p\">)</span>\n<span class=\"mi\">300</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">30.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000374</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000873</span><span class=\"p\">)</span>\n<span class=\"mi\">400</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">40.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000473</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000710</span><span class=\"p\">)</span>\n<span class=\"mi\">500</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">50.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000572</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000572</span><span class=\"p\">)</span>\n<span class=\"mi\">600</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">60.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000671</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000447</span><span class=\"p\">)</span>\n<span class=\"mi\">700</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">70.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000770</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000330</span><span class=\"p\">)</span>\n<span class=\"mi\">800</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">80.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000868</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000217</span><span class=\"p\">)</span>\n<span class=\"mi\">900</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">90.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000979</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000109</span><span class=\"p\">)</span>\n<span class=\"mi\">1000</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001086</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<p><tt>progress_tracker</tt> is very customizable to fit your desires, but tries to have sensible defaults.</p>\n<p>The core of <tt>progress_tracker</tt> is a method called <tt>track_progress</tt>.\nBy changing the parameters passed to <tt>track_progress</tt>, you can customize how frequently (and with what messages) the tracker will report.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">track_progress</span><span class=\"p\">(</span>\n    <span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"c1\"># The iterable to iterate over</span>\n    <span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Override for the total message count, defaults to len(iterable)</span>\n    <span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"c1\"># A function (f(str) -&gt; None) that gets called each time a condition matches</span>\n    <span class=\"n\">format_callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">default_format_callback</span><span class=\"p\">,</span> <span class=\"c1\"># A function (f(str) -&gt; str) that formats the progress values into a string.</span>\n    <span class=\"n\">every_n_percent</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Reports after every n percent</span>\n    <span class=\"n\">every_n_records</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Reports every n records</span>\n    <span class=\"n\">every_n_seconds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Reports every n seconds</span>\n    <span class=\"n\">every_n_seconds_idle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Report if there has not been a record processed in the past n seconds. Useful for infinite streams.</span>\n    <span class=\"n\">every_n_seconds_since_report</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Report if there hasn\u2019t been any report in the past n seconds.</span>\n    <span class=\"n\">report_first_record</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"c1\"># Report after the first record</span>\n    <span class=\"n\">report_last_record</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span> <span class=\"c1\"># Report after the last record</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<div id=\"examples\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Examples</a></h3>\n<div id=\"print-after-every-n-records-are-processed\">\n<h4><a href=\"#id4\" rel=\"nofollow\">Print after every n records are processed</a></h4>\n<p>The <tt>every_n_records</tt> parameter will trigger a report after every nth record is processed.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">progress_tracker</span> <span class=\"kn\">import</span> <span class=\"n\">track_progress</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">track_progress</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)),</span> <span class=\"n\">every_n_records</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">continue</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">100</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000114</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001026</span><span class=\"p\">)</span>\n<span class=\"mi\">200</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">20.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000274</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001096</span><span class=\"p\">)</span>\n<span class=\"mi\">300</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">30.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000374</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000873</span><span class=\"p\">)</span>\n<span class=\"mi\">400</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">40.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000473</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000710</span><span class=\"p\">)</span>\n<span class=\"mi\">500</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">50.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000572</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000572</span><span class=\"p\">)</span>\n<span class=\"mi\">600</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">60.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000671</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000447</span><span class=\"p\">)</span>\n<span class=\"mi\">700</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">70.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000770</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000330</span><span class=\"p\">)</span>\n<span class=\"mi\">800</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">80.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000868</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000217</span><span class=\"p\">)</span>\n<span class=\"mi\">900</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">90.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000979</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000109</span><span class=\"p\">)</span>\n<span class=\"mi\">1000</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001086</span>\n</pre>\n</div>\n<div id=\"print-after-every-x-percent-of-records-are-processed\">\n<h4><a href=\"#id5\" rel=\"nofollow\">Print after every x percent of records are processed</a></h4>\n<p>The <tt>every_n_percent</tt> parameter will trigger a report after every nth percent of records are processed.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">progress_tracker</span> <span class=\"kn\">import</span> <span class=\"n\">track_progress</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">track_progress</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)),</span> <span class=\"n\">every_n_percent</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">continue</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">100</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000114</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001026</span><span class=\"p\">)</span>\n<span class=\"mi\">200</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">20.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000274</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001096</span><span class=\"p\">)</span>\n<span class=\"mi\">300</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">30.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000374</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000873</span><span class=\"p\">)</span>\n<span class=\"mi\">400</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">40.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000473</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000710</span><span class=\"p\">)</span>\n<span class=\"mi\">500</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">50.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000572</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000572</span><span class=\"p\">)</span>\n<span class=\"mi\">600</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">60.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000671</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000447</span><span class=\"p\">)</span>\n<span class=\"mi\">700</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">70.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000770</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000330</span><span class=\"p\">)</span>\n<span class=\"mi\">800</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">80.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000868</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000217</span><span class=\"p\">)</span>\n<span class=\"mi\">900</span><span class=\"o\">/</span><span class=\"mi\">1000</span> <span class=\"p\">(</span><span class=\"mf\">90.0</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000979</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000109</span><span class=\"p\">)</span>\n<span class=\"mi\">1000</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.001086</span>\n</pre>\n<p><tt>every_n_percent</tt> only works for bounded iterables. For unbounded iterables (ex. streams), using <tt>every_n_percent</tt> will report a <tt>RuntimeWarning</tt>.</p>\n<p>At most a single report is generated per processed record. Even if processing of a single record would meet the conditions multiple times\n(ex. if <tt>every_n_percent=10</tt>, but there are only 2 records, then processing each record causes 50%, or 5 * 10%, progress), only a single report is created (containing the latest values).</p>\n</div>\n<div id=\"print-every-n-records-or-every-n-seconds-during-processing\">\n<h4><a href=\"#id6\" rel=\"nofollow\">Print every n records OR every n seconds during processing</a></h4>\n<p>This is especially useful when you have highly variable processing times (ex. most records take 2 seconds to process, but some take 20 seconds to process).\nYou can use the <tt>every_n_seconds</tt> parameter to get reports between the expensive records.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">progress_tracker</span> <span class=\"kn\">import</span> <span class=\"n\">track_progress</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">simulated_processing</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"s1\">'hard'</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">variable_stream_simulation</span> <span class=\"o\">=</span> <span class=\"p\">([</span><span class=\"s1\">'easy'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">([</span><span class=\"s1\">'hard'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">([</span><span class=\"s1\">'easy'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">track_progress</span><span class=\"p\">(</span><span class=\"n\">variable_stream_simulation</span><span class=\"p\">,</span> <span class=\"n\">every_n_records</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">every_n_seconds</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">simulated_processing</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n<span class=\"mi\">5</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">14.285714285714285</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000014</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000084</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">28.57142857142857</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000095</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000238</span><span class=\"p\">)</span>\n<span class=\"mi\">15</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">42.857142857142854</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000120</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">00.000160</span><span class=\"p\">)</span>\n<span class=\"mi\">16</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">45.714285714285715</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">10.011364</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">11.888495</span><span class=\"p\">)</span>\n<span class=\"mi\">17</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">48.57142857142857</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">20.022107</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">21.199878</span><span class=\"p\">)</span>\n<span class=\"mi\">18</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">51.42857142857142</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">30.031801</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">28.363368</span><span class=\"p\">)</span>\n<span class=\"mi\">19</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">54.285714285714285</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">40.041754</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">33.719372</span><span class=\"p\">)</span>\n<span class=\"mi\">20</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">57.14285714285714</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">50.073991</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">37.555493</span><span class=\"p\">)</span>\n<span class=\"mi\">25</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">71.42857142857143</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">50.074246</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">20.029698</span><span class=\"p\">)</span>\n<span class=\"mi\">30</span><span class=\"o\">/</span><span class=\"mi\">35</span> <span class=\"p\">(</span><span class=\"mf\">85.71428571428571</span><span class=\"o\">%</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">50.074286</span> <span class=\"p\">(</span><span class=\"n\">Time</span> <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">08.345714</span><span class=\"p\">)</span>\n<span class=\"mi\">35</span> <span class=\"ow\">in</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mf\">50.074319</span>\n</pre>\n<p>During the processing of the slow records, <tt>track_progress</tt> reported after every record.</p>\n<p>Note: Because the default \u201cTime left\u201d calculation is just a simple linear extrapolation, it is not as useful in the face of such variability in processing times.</p>\n</div>\n</div>\n</div>\n<div id=\"combining-trigger-conditions\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Combining trigger conditions</a></h2>\n<p>As seen in the previous example, you can combine multiple conditions together to dictate when a report is created.</p>\n<p>Each of the conditions are combined using an OR operator, meaning that if any condition is met, a report is created.</p>\n<p>Even if multiple conditions are met simultaneously, only a single report will be created.</p>\n</div>\n<div id=\"report-creation-invariants\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Report Creation Invariants</a></h2>\n<p>Report creation observes two invariants:</p>\n<ol>\n<li>At most a single report is created per processed record.</li>\n<li>Reports are only created in response to a record being processed.</li>\n</ol>\n</div>\n<div id=\"customizing-the-report-formatting-internationalization\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Customizing the report formatting / Internationalization</a></h2>\n<p>By default, <tt>progress_tracker</tt> formats the report into an English language string.\nThis can be overriden by supplying a different function as the <tt>format_callback</tt> parameter to <tt>track_progress</tt>.</p>\n<p>This can be used to perform advanced formatting, or to add internationalization/localization.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">format_en_francais</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">reasons</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">report</span><span class=\"p\">[</span><span class=\"s2\">\"i\"</span><span class=\"p\">]</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">report</span><span class=\"p\">[</span><span class=\"s2\">\"total\"</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">total</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">total</span><span class=\"p\">:</span>\n        <span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{i}</span><span class=\"s2\"> messages trait\u00e9s en </span><span class=\"si\">{time_taken}</span><span class=\"s2\">\"</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{i}</span><span class=\"s2\">/</span><span class=\"si\">{total}</span><span class=\"s2\"> messages trait\u00e9s en </span><span class=\"si\">{time_taken}</span><span class=\"s2\"> (temps restant: </span><span class=\"si\">{estimated_time_remaining}</span><span class=\"s2\">)\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">format_string</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">report</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">poste</span> <span class=\"ow\">in</span> <span class=\"n\">track_progress</span><span class=\"p\">(</span><span class=\"n\">postes</span><span class=\"p\">,</span> <span class=\"n\">every_n_records</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">format_callback</span><span class=\"o\">=</span><span class=\"n\">format_en_francais</span><span class=\"p\">):</span>\n    <span class=\"n\">trait\u00e9</span><span class=\"p\">(</span><span class=\"n\">poste</span><span class=\"p\">)</span>\n</pre>\n<p>(Veuillez excuser toute erreur en fran\u00e7ais. C\u2019est le r\u00e9sultat de Google Translate.)</p>\n<p>Simple cases can also be done using a lambda:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">progress_tracker</span> <span class=\"kn\">import</span> <span class=\"n\">track_progress</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">track_progress</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)),</span> <span class=\"n\">every_n_records</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">format_callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"s2\">\"Got one!\"</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">continue</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Got</span> <span class=\"n\">one</span><span class=\"err\">!</span>\n<span class=\"n\">Got</span> <span class=\"n\">one</span><span class=\"err\">!</span>\n<span class=\"n\">Got</span> <span class=\"n\">one</span><span class=\"err\">!</span>\n<span class=\"n\">Got</span> <span class=\"n\">one</span><span class=\"err\">!</span>\n<span class=\"n\">Got</span> <span class=\"n\">one</span><span class=\"err\">!</span>\n</pre>\n<div id=\"report-values-available\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Report values available</a></h3>\n<p>The following values are available in every report for use in the <tt>format_callback</tt>:</p>\n<table>\n<thead>\n<tr><th>Value</th>\n<th>Type</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>{records_seen}</tt></td>\n<td>int</td>\n<td>The number of records processed so far.</td>\n</tr>\n<tr><td><tt>{total}</tt></td>\n<td>Optional[int]</td>\n<td>The total of records in the iterable, if known. Else <tt>None</tt></td>\n</tr>\n<tr><td><tt>{percent_complete}</tt></td>\n<td>Optional[float]</td>\n<td>The percentage of records processed so far. <tt>None</tt> if <tt>{total}</tt> is <tt>None</tt> or <tt>records_seen</tt> = 0</td>\n</tr>\n<tr><td><tt>{time_taken}</tt></td>\n<td>timedelta</td>\n<td>The amount of time that processing has taken thus far.</td>\n</tr>\n<tr><td><tt>{estimated_time_remaining}</tt></td>\n<td>Optional[timedelta]</td>\n<td>The estimated amount of time needed in order to process the rest of the records (simple linear estimate). <tt>None</tt> if total is <tt>None</tt></td>\n</tr>\n<tr><td><tt>{items_per_second}</tt></td>\n<td>Optional[float]</td>\n<td>The number of records processed so far / the number of seconds elapsed. <tt>None</tt> if no time have elapsed.</td>\n</tr>\n<tr><td><tt>{idle_time}</tt></td>\n<td>timedelta</td>\n<td>The amount of idle time between the previous record\u2019s processing and this record\u2019s arrival.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"customizing-the-print-behaviour\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Customizing the print behaviour</a></h2>\n<p>By default, <tt>progress_tracker</tt> calls Python\u2019s <a href=\"https://docs.python.org/3/library/functions.html#print\" rel=\"nofollow\">print</a> function with the formatted report.\nThis can be overriden by supplying a different function as the <tt>callback</tt> parameter to <tt>track_progress</tt>.</p>\n</div>\n<div id=\"every-n-seconds-idle\">\n<h2><a href=\"#id12\" rel=\"nofollow\"><tt>every_n_seconds_idle</tt></a></h2>\n<p><tt>every_n_seconds_idle</tt> allows you to trigger a report if there is ever more than <tt>n</tt> seconds when no records were processed.</p>\n<p>Note: If processing of a single record takes longer than <tt>every_n_seconds_idle</tt>, then it will be triggered after every record.</p>\n<div id=\"difference-between-every-n-seconds-and-every-n-seconds-idle\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Difference between <tt>every_n_seconds</tt> and <tt>every_n_seconds_idle</tt></a></h3>\n<ul>\n<li><tt>every_n_seconds</tt> triggers a report anytime it has been more than n seconds since <tt>every_n_seconds</tt> last triggered a report.</li>\n<li><tt>every_n_seconds_idle</tt> triggers a report anytime there has not been a record processed in the past n seconds (ie. the processing has been idle).</li>\n</ul>\n<p>For example:</p>\n<table>\n<thead>\n<tr><th>After</th>\n<th># of records processed in interval</th>\n<th>Cummulative records processed</th>\n<th>every_n_seconds=3</th>\n<th>every_n_seconds_idle=3</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>0 seconds</td>\n<td>0</td>\n<td>0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>1 second</td>\n<td>1</td>\n<td>1</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>2 seconds</td>\n<td>1</td>\n<td>2</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>3 seconds</td>\n<td>1</td>\n<td>3</td>\n<td>Triggered, since it is the first record T &gt;= 3s (T &gt;= 0s + 3s)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>4 seconds</td>\n<td>1</td>\n<td>4</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>5 seconds</td>\n<td>1</td>\n<td>5</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>6 seconds</td>\n<td>1</td>\n<td>6</td>\n<td>Triggered, since it is the first record T &gt;= 6s (T &gt;= 3s + 3s)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>7 seconds</td>\n<td>1</td>\n<td>6</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>8 seconds</td>\n<td>0</td>\n<td>6</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>9 seconds</td>\n<td>0</td>\n<td>6</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>10 seconds</td>\n<td>0</td>\n<td>6</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>11 seconds</td>\n<td>1</td>\n<td>7</td>\n<td>Triggered, since it is the first record T &gt;= 9s (T &gt;= 6s + 3s)</td>\n<td>Triggered, since it is the first record processed in the past 3 seconds (T &gt;= 6s + 3s)</td>\n</tr>\n<tr><td>12 seconds</td>\n<td>1</td>\n<td>8</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>13 seconds</td>\n<td>1</td>\n<td>9</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>14 seconds</td>\n<td>1</td>\n<td>10</td>\n<td>Triggered, since it is the first record T &gt;= 14s (T &gt;= 11s + 3s)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>15 seconds</td>\n<td>1</td>\n<td>11</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n</tbody>\n</table>\n<p>Note that <tt>every_n_seconds</tt> reports at 3 seconds and 6 seconds, as one would expect. Then it reports at 11 seconds, since that is the first time a record was processed after the 9 seconds mark.\nThen note that instead of next reporting at 12 seconds (9s + 3s), it reports next at 14 seconds (11s + 3s).</p>\n<p><tt>every_n_seconds_idle</tt> only reported at 11 seconds, since that was the only time that a record was processed without other records being processed during the previous 3 seconds.</p>\n</div>\n</div>\n<div id=\"accessing-tracker-after-processing\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Accessing tracker after processing</a></h2>\n<p>By default, <tt>track_progress</tt> hides the internal <tt>ProgressTracker</tt> object underneath. However, in some cases you might want to be able to access the internals of the object after iteration.\nIn these cases, you can use <tt>track_progress</tt> an explicit context manager:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">track_progress</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"n\">every_n_percent</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tracker</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">tracker</span><span class=\"p\">:</span>\n        <span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n    <span class=\"n\">final_report</span> <span class=\"o\">=</span> <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">create_report</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Processing took </span><span class=\"si\">{</span><span class=\"n\">final_report</span><span class=\"p\">[</span><span class=\"s1\">'time_taken'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> and processed </span><span class=\"si\">{</span><span class=\"n\">final_report</span><span class=\"p\">[</span><span class=\"s1\">'records_seen'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> records.\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"other-resources\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Other Resources</a></h2>\n<ul>\n<li><a href=\"https://www.slideshare.net/MichaelOvermeyer/progress-tracker-a-handy-progress-printout-pattern\" rel=\"nofollow\">This presentation</a> to <a href=\"https://www.meetup.com/DevHouse-Waterloo/events/247071801/\" rel=\"nofollow\">DevHouse Waterloo</a>.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4297887, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "884c534018da706c63c297155b4bdec2", "sha256": "3a68fb904c47b24ab19e1f1e7435e7b75839848ea969786d2d5604ffbf845067"}, "downloads": -1, "filename": "progress_tracker-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "884c534018da706c63c297155b4bdec2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8688, "upload_time": "2018-09-21T20:03:16", "upload_time_iso_8601": "2018-09-21T20:03:16.673742Z", "url": "https://files.pythonhosted.org/packages/d6/aa/643a50dedefb21f4c34112d97afd7a575f50e968f177dacb57fa6a3889ba/progress_tracker-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e94839ac82cd9cc9238b9026fb5e4cc7", "sha256": "0bcf39c9f3f0c2b541c512dea44baf4ce745f48ec4f377c664952233edbed8ea"}, "downloads": -1, "filename": "progress_tracker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e94839ac82cd9cc9238b9026fb5e4cc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10248, "upload_time": "2018-09-21T20:03:17", "upload_time_iso_8601": "2018-09-21T20:03:17.830446Z", "url": "https://files.pythonhosted.org/packages/42/8b/ecfd4128f997af7f8f0d250fa71734e78875108f35f197b802d74514fb67/progress_tracker-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "884c534018da706c63c297155b4bdec2", "sha256": "3a68fb904c47b24ab19e1f1e7435e7b75839848ea969786d2d5604ffbf845067"}, "downloads": -1, "filename": "progress_tracker-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "884c534018da706c63c297155b4bdec2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8688, "upload_time": "2018-09-21T20:03:16", "upload_time_iso_8601": "2018-09-21T20:03:16.673742Z", "url": "https://files.pythonhosted.org/packages/d6/aa/643a50dedefb21f4c34112d97afd7a575f50e968f177dacb57fa6a3889ba/progress_tracker-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e94839ac82cd9cc9238b9026fb5e4cc7", "sha256": "0bcf39c9f3f0c2b541c512dea44baf4ce745f48ec4f377c664952233edbed8ea"}, "downloads": -1, "filename": "progress_tracker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e94839ac82cd9cc9238b9026fb5e4cc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10248, "upload_time": "2018-09-21T20:03:17", "upload_time_iso_8601": "2018-09-21T20:03:17.830446Z", "url": "https://files.pythonhosted.org/packages/42/8b/ecfd4128f997af7f8f0d250fa71734e78875108f35f197b802d74514fb67/progress_tracker-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:22 2020"}