{"info": {"author": "Alejandro Escontrela,James Hogan", "author_email": "alejandroescontrela@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# CoinMarketCap history scraper\n***\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usahe)\n  * [Command Line](#command-line)\n    * [Usage](#command-line-usage)\n    * [Examples](#command-line-examples)\n  * [Module]()\n    * [Sequential]\n\nObtain [CoinMarketCap](http://www.coinmarketcap.com) [USD price history](https://coinmarketcap.com/currencies/bitcoin/historical-data/) data for CoinMarketCap-listed cryptocurrencies in CSV format.\n\nUse this library as a command-line script to obtain historical cryptocurrency data on the fly, or import the library to obtain cryptocurrency data for your programs.  \n\n\n## Installation\nDownload the zip file or navigate to the desired install directory and run:\n\n```shell\n$ git clone https://github.com/Alescontrela/coinmarketcap-history.git\n```\n\nTo install the required dependencies, navigate into the repo and run:\n\n```shell\n$ pip install -r requirements.txt\n```\n\n\n\n## Usage\n\n### Command Line\nAmong other things, this is useful for US tax reporting.  If you want to know the cost basis for a trade (or for coins acquired through mining), the IRS requires you to denominate that cost basis in USD.  In the case of token-for-token trades (e.g. purchasing ETH with BTC), that requires you know the USD:BTC exchange rate at the time of the trade.\n\nSurprisingly, as of October 2017, it's not easy to get this data in a machine-readable format anywhere online.\n\nRather than getting the exchange rate at the exact moment of your trade, which is generally not feasible, the IRS standard (at least for similar situations w/stock) is to use the average of a stock's high and low price for the day. CoinMarketCap doesn't provide this figure, but this tool calculates this number and includes it in the output.\n\n#### Command Line Usage\n\nIn the terminal, navigate into the repo directory and run:\n```shell\n$ python coinmarketcap.py <currency1> <start_date> <end_date>\n```\nwhere:\n\n* `currency` is the (case-insensitive) name of the currency / token as displayed on CoinMarketCap, with dashes in place of spaces\n* `start_date` is the beginning of the range to fetch data for in `yyyy-mm-dd` format. For example, 2017-10-01 (for 2017 October 10th)\n* `end_year` is the end of the range to fetch data for in `yyyy-mm-dd` format. You may use a date in the future to obtain the latest data. Format is the same as in the start date.\n\nData for multiple cryptocurrencies can be obtained with:\n```shell\n$ python coinmarketcap.py <currency_1,currency_2,...,currency_n> <start_date> <end_date>\n```\n**Note:** currencies must be comma-separated, with no spaces in between.\n\nThe above information can also be found by running:\n```shell\n$ python coinmarketcap.py -h\n```\n\nWrite outputs to a file by running:\n\n```shell\n$ coinmarketcap.py <currency> <start_date> <end_date> > <output_filename>\n```\n\n#### Command Line Examples\nCollecting data for one cryptocurrency:\n```shell\n$ python coinmarketcap.py bitcoin 2017-01-01 2017-12-31\n```\n\nCollecting data for multiple cryptocurrencies:\n```shell\n$ python coinmarketcap.py bitcoin,ripple,ethereum 2017-01-01 2017-12-31\n```\n\nWriting output to a file:\n```shell\n$ python coinmarketcap.py bitcoin 2017-01-01 2017-12-31 > bitcoin_prices.csv\n```\n\nWriting output for multiple cryptocurrencies to a file:\n```shell\n$ python coinmarketcap.py bitcoin,ripple,ethereum 2017-01-01 2017-12-31 > bitcoin_ripple_ethereum_prices.csv\n```\n\n## Module\n\nYou can also use `coinmarketcap.py` as a module in other python modules to get back a pandas dataframe with a cryptocurrency's history.\n\nFirst, you may need to add the path to `coinmarketcap_usd_history.py` in your `sys.path` through a command like the following:  \n\n```python\nsys.path.append(<path_to_coinmarketcap_usd_history.py_parent_folder>)\n```\n\n(Alternatively, just move the `coinmarketcap_usd_history.py` file to the directory of the including module.)\n\nSecond, import the module:\n\n```import coinmarketcap_usd_history```\n\nFinally perform this to obtain the dataframe:\n\n```python\ndf = coinmarketcap_usd_history.main(['bitcoin','2017-01-01','2017-12-31','--dataframe'])\n```\n\nIf you just wish to have the CSV output returned as a string to another python module, simply omit the `'--dataframe'` parameter.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Alescontrela/coinmarketcap-history", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cmctestingthree", "package_url": "https://pypi.org/project/cmctestingthree/", "platform": "", "project_url": "https://pypi.org/project/cmctestingthree/", "project_urls": {"Homepage": "https://github.com/Alescontrela/coinmarketcap-history"}, "release_url": "https://pypi.org/project/cmctestingthree/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Get the price history for CoinMarketCap-listed currencies", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CoinMarketCap history scraper</h1>\n<hr>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usahe\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#command-line\" rel=\"nofollow\">Command Line</a>\n<ul>\n<li><a href=\"#command-line-usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#command-line-examples\" rel=\"nofollow\">Examples</a></li>\n</ul>\n</li>\n<li><a href=\"\" rel=\"nofollow\">Module</a>\n<ul>\n<li>[Sequential]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Obtain <a href=\"http://www.coinmarketcap.com\" rel=\"nofollow\">CoinMarketCap</a> <a href=\"https://coinmarketcap.com/currencies/bitcoin/historical-data/\" rel=\"nofollow\">USD price history</a> data for CoinMarketCap-listed cryptocurrencies in CSV format.</p>\n<p>Use this library as a command-line script to obtain historical cryptocurrency data on the fly, or import the library to obtain cryptocurrency data for your programs.</p>\n<h2>Installation</h2>\n<p>Download the zip file or navigate to the desired install directory and run:</p>\n<pre>$ git clone https://github.com/Alescontrela/coinmarketcap-history.git\n</pre>\n<p>To install the required dependencies, navigate into the repo and run:</p>\n<pre>$ pip install -r requirements.txt\n</pre>\n<h2>Usage</h2>\n<h3>Command Line</h3>\n<p>Among other things, this is useful for US tax reporting.  If you want to know the cost basis for a trade (or for coins acquired through mining), the IRS requires you to denominate that cost basis in USD.  In the case of token-for-token trades (e.g. purchasing ETH with BTC), that requires you know the USD:BTC exchange rate at the time of the trade.</p>\n<p>Surprisingly, as of October 2017, it's not easy to get this data in a machine-readable format anywhere online.</p>\n<p>Rather than getting the exchange rate at the exact moment of your trade, which is generally not feasible, the IRS standard (at least for similar situations w/stock) is to use the average of a stock's high and low price for the day. CoinMarketCap doesn't provide this figure, but this tool calculates this number and includes it in the output.</p>\n<h4>Command Line Usage</h4>\n<p>In the terminal, navigate into the repo directory and run:</p>\n<pre>$ python coinmarketcap.py &lt;currency1&gt; &lt;start_date&gt; &lt;end_date&gt;\n</pre>\n<p>where:</p>\n<ul>\n<li><code>currency</code> is the (case-insensitive) name of the currency / token as displayed on CoinMarketCap, with dashes in place of spaces</li>\n<li><code>start_date</code> is the beginning of the range to fetch data for in <code>yyyy-mm-dd</code> format. For example, 2017-10-01 (for 2017 October 10th)</li>\n<li><code>end_year</code> is the end of the range to fetch data for in <code>yyyy-mm-dd</code> format. You may use a date in the future to obtain the latest data. Format is the same as in the start date.</li>\n</ul>\n<p>Data for multiple cryptocurrencies can be obtained with:</p>\n<pre>$ python coinmarketcap.py &lt;currency_1,currency_2,...,currency_n&gt; &lt;start_date&gt; &lt;end_date&gt;\n</pre>\n<p><strong>Note:</strong> currencies must be comma-separated, with no spaces in between.</p>\n<p>The above information can also be found by running:</p>\n<pre>$ python coinmarketcap.py -h\n</pre>\n<p>Write outputs to a file by running:</p>\n<pre>$ coinmarketcap.py &lt;currency&gt; &lt;start_date&gt; &lt;end_date&gt; &gt; &lt;output_filename&gt;\n</pre>\n<h4>Command Line Examples</h4>\n<p>Collecting data for one cryptocurrency:</p>\n<pre>$ python coinmarketcap.py bitcoin <span class=\"m\">2017</span>-01-01 <span class=\"m\">2017</span>-12-31\n</pre>\n<p>Collecting data for multiple cryptocurrencies:</p>\n<pre>$ python coinmarketcap.py bitcoin,ripple,ethereum <span class=\"m\">2017</span>-01-01 <span class=\"m\">2017</span>-12-31\n</pre>\n<p>Writing output to a file:</p>\n<pre>$ python coinmarketcap.py bitcoin <span class=\"m\">2017</span>-01-01 <span class=\"m\">2017</span>-12-31 &gt; bitcoin_prices.csv\n</pre>\n<p>Writing output for multiple cryptocurrencies to a file:</p>\n<pre>$ python coinmarketcap.py bitcoin,ripple,ethereum <span class=\"m\">2017</span>-01-01 <span class=\"m\">2017</span>-12-31 &gt; bitcoin_ripple_ethereum_prices.csv\n</pre>\n<h2>Module</h2>\n<p>You can also use <code>coinmarketcap.py</code> as a module in other python modules to get back a pandas dataframe with a cryptocurrency's history.</p>\n<p>First, you may need to add the path to <code>coinmarketcap_usd_history.py</code> in your <code>sys.path</code> through a command like the following:</p>\n<pre><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">path_to_coinmarketcap_usd_history</span><span class=\"o\">.</span><span class=\"n\">py_parent_folder</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n<p>(Alternatively, just move the <code>coinmarketcap_usd_history.py</code> file to the directory of the including module.)</p>\n<p>Second, import the module:</p>\n<p><code>import coinmarketcap_usd_history</code></p>\n<p>Finally perform this to obtain the dataframe:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">coinmarketcap_usd_history</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">([</span><span class=\"s1\">'bitcoin'</span><span class=\"p\">,</span><span class=\"s1\">'2017-01-01'</span><span class=\"p\">,</span><span class=\"s1\">'2017-12-31'</span><span class=\"p\">,</span><span class=\"s1\">'--dataframe'</span><span class=\"p\">])</span>\n</pre>\n<p>If you just wish to have the CSV output returned as a string to another python module, simply omit the <code>'--dataframe'</code> parameter.</p>\n\n          </div>"}, "last_serial": 4037095, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2187b33c1320943550ada49ced1a87fc", "sha256": "69d8bd637a1c1e806486f81e20e485882d2c715037bca27ecb8d0793c8793146"}, "downloads": -1, "filename": "cmctestingthree-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2187b33c1320943550ada49ced1a87fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8351, "upload_time": "2018-07-06T17:12:34", "upload_time_iso_8601": "2018-07-06T17:12:34.920532Z", "url": "https://files.pythonhosted.org/packages/cd/ab/824ab3a6f2ff71e98547328e147c749772a537b299de2feec3c87d474f4b/cmctestingthree-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7224fcfc82277c69ad2a8bd0b10132e9", "sha256": "6306d276501d4dc599e4a14414812abf805104cd6952df2beb3b9713e232f3ec"}, "downloads": -1, "filename": "cmctestingthree-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7224fcfc82277c69ad2a8bd0b10132e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7369, "upload_time": "2018-07-06T17:12:35", "upload_time_iso_8601": "2018-07-06T17:12:35.861367Z", "url": "https://files.pythonhosted.org/packages/a7/bc/469b726e4ed36c8087c6b6bf6bab2530c8ac6a736b0dacfc57589e29041c/cmctestingthree-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2187b33c1320943550ada49ced1a87fc", "sha256": "69d8bd637a1c1e806486f81e20e485882d2c715037bca27ecb8d0793c8793146"}, "downloads": -1, "filename": "cmctestingthree-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2187b33c1320943550ada49ced1a87fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8351, "upload_time": "2018-07-06T17:12:34", "upload_time_iso_8601": "2018-07-06T17:12:34.920532Z", "url": "https://files.pythonhosted.org/packages/cd/ab/824ab3a6f2ff71e98547328e147c749772a537b299de2feec3c87d474f4b/cmctestingthree-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7224fcfc82277c69ad2a8bd0b10132e9", "sha256": "6306d276501d4dc599e4a14414812abf805104cd6952df2beb3b9713e232f3ec"}, "downloads": -1, "filename": "cmctestingthree-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7224fcfc82277c69ad2a8bd0b10132e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7369, "upload_time": "2018-07-06T17:12:35", "upload_time_iso_8601": "2018-07-06T17:12:35.861367Z", "url": "https://files.pythonhosted.org/packages/a7/bc/469b726e4ed36c8087c6b6bf6bab2530c8ac6a736b0dacfc57589e29041c/cmctestingthree-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:36 2020"}