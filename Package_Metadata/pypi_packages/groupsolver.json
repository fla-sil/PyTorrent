{"info": {"author": "Xander Wong", "author_email": "xanxerus@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# groupsolver\n\nPython package for solving group based puzzles\n\nPuzzles like the Rubik's cube represent a mathematical group structure. The\ngroups represented by these puzzles can usually be factored into simpler\nsubgroups. In general these groups are either permutation subgroups (in which\npieces are permutated with each other) or orientation subgroups (in which\npieces can be in one of N different states of orientation).\n\nFor example, the Rubik's cube can be represented by four subgroups:\n\n- The orientation of edges\n- The orientation of corners\n- The permutation of edges\n- The permutation of corners\n\nThis principle was used by Herbert Kobiemba's two phase algorithm to represent\nthe states of the Rubik's cube. The groupSolver project is meant to generalize\nthis idea to other group based puzzles and create an API for solving or\nexploring the these puzzles' group structures given a subgroup factorization.\n\n## Installation\n\nThis project is maintained in [GitLab](https://gitlab.com/xanxerus/groupsolver)\nand also hosted on [PyPI](https://pypi.org/project/groupsolver/) like all Python\npackages are supposed to be. Thus, installing from PyPI can be done with:\n`pip install groupsolver`\n\nFor developing purposes, it's preferable to use a virtualenv. Use\n`python3 -m venv /path/to/virtual/environment/` to create a virtualenv, then cd\nto where setup.py is, then run either `python3 setup.py install` or\n `pip3 install .` to install this source.\n\n\n## Testing\n\nTests in this project are implemented with the unittest framework. There are\nseveral ways to run these tests, but the simplest is to call \n`python3 setup.py test`\n\n\n## Documentation\n\nThanks to Sphinx, documentation can be generated from comments by going to the\n`doc` directory and running `make html`. The generated documentation will have\nits root at `doc/build/index.html`.\n\nThe most recent documentation for the master branch can be found on\n[GitLab Pages](https://xanxerus.gitlab.io/groupsolver) if it isn't broken.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/xanxerus/groupsolver", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "groupsolver", "package_url": "https://pypi.org/project/groupsolver/", "platform": "", "project_url": "https://pypi.org/project/groupsolver/", "project_urls": {"Homepage": "https://gitlab.com/xanxerus/groupsolver"}, "release_url": "https://pypi.org/project/groupsolver/1.0/", "requires_dist": null, "requires_python": ">=3", "summary": "Python package for solving group based puzzles", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>groupsolver</h1>\n<p>Python package for solving group based puzzles</p>\n<p>Puzzles like the Rubik's cube represent a mathematical group structure. The\ngroups represented by these puzzles can usually be factored into simpler\nsubgroups. In general these groups are either permutation subgroups (in which\npieces are permutated with each other) or orientation subgroups (in which\npieces can be in one of N different states of orientation).</p>\n<p>For example, the Rubik's cube can be represented by four subgroups:</p>\n<ul>\n<li>The orientation of edges</li>\n<li>The orientation of corners</li>\n<li>The permutation of edges</li>\n<li>The permutation of corners</li>\n</ul>\n<p>This principle was used by Herbert Kobiemba's two phase algorithm to represent\nthe states of the Rubik's cube. The groupSolver project is meant to generalize\nthis idea to other group based puzzles and create an API for solving or\nexploring the these puzzles' group structures given a subgroup factorization.</p>\n<h2>Installation</h2>\n<p>This project is maintained in <a href=\"https://gitlab.com/xanxerus/groupsolver\" rel=\"nofollow\">GitLab</a>\nand also hosted on <a href=\"https://pypi.org/project/groupsolver/\" rel=\"nofollow\">PyPI</a> like all Python\npackages are supposed to be. Thus, installing from PyPI can be done with:\n<code>pip install groupsolver</code></p>\n<p>For developing purposes, it's preferable to use a virtualenv. Use\n<code>python3 -m venv /path/to/virtual/environment/</code> to create a virtualenv, then cd\nto where setup.py is, then run either <code>python3 setup.py install</code> or\n<code>pip3 install .</code> to install this source.</p>\n<h2>Testing</h2>\n<p>Tests in this project are implemented with the unittest framework. There are\nseveral ways to run these tests, but the simplest is to call\n<code>python3 setup.py test</code></p>\n<h2>Documentation</h2>\n<p>Thanks to Sphinx, documentation can be generated from comments by going to the\n<code>doc</code> directory and running <code>make html</code>. The generated documentation will have\nits root at <code>doc/build/index.html</code>.</p>\n<p>The most recent documentation for the master branch can be found on\n<a href=\"https://xanxerus.gitlab.io/groupsolver\" rel=\"nofollow\">GitLab Pages</a> if it isn't broken.</p>\n\n          </div>"}, "last_serial": 4785578, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3fd5817ae47f6c2386ba220a40fbe3f0", "sha256": "549792da1def710935f9c84b9af640952fc88715e50a3cc6f9bbe35c7b602254"}, "downloads": -1, "filename": "groupsolver-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3fd5817ae47f6c2386ba220a40fbe3f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 25037, "upload_time": "2019-02-06T08:37:17", "upload_time_iso_8601": "2019-02-06T08:37:17.936770Z", "url": "https://files.pythonhosted.org/packages/33/ee/acb30ef26da51c021f00b259ace9d841caac9529a2d8068fd726965071e5/groupsolver-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07817e3cb8ed27ab3bc394e97e5f2c3f", "sha256": "3346bf6bdeecead258c2a707c780f5741ae4f16de0dfd77cf18fbef0791dfbbf"}, "downloads": -1, "filename": "groupsolver-1.0.tar.gz", "has_sig": false, "md5_digest": "07817e3cb8ed27ab3bc394e97e5f2c3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21727, "upload_time": "2019-02-06T08:37:51", "upload_time_iso_8601": "2019-02-06T08:37:51.542439Z", "url": "https://files.pythonhosted.org/packages/85/c1/e94327b0aa6949e31a08dd0e3aaa72f2c47fd9a2c6292f33f37000797394/groupsolver-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3fd5817ae47f6c2386ba220a40fbe3f0", "sha256": "549792da1def710935f9c84b9af640952fc88715e50a3cc6f9bbe35c7b602254"}, "downloads": -1, "filename": "groupsolver-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3fd5817ae47f6c2386ba220a40fbe3f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 25037, "upload_time": "2019-02-06T08:37:17", "upload_time_iso_8601": "2019-02-06T08:37:17.936770Z", "url": "https://files.pythonhosted.org/packages/33/ee/acb30ef26da51c021f00b259ace9d841caac9529a2d8068fd726965071e5/groupsolver-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07817e3cb8ed27ab3bc394e97e5f2c3f", "sha256": "3346bf6bdeecead258c2a707c780f5741ae4f16de0dfd77cf18fbef0791dfbbf"}, "downloads": -1, "filename": "groupsolver-1.0.tar.gz", "has_sig": false, "md5_digest": "07817e3cb8ed27ab3bc394e97e5f2c3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21727, "upload_time": "2019-02-06T08:37:51", "upload_time_iso_8601": "2019-02-06T08:37:51.542439Z", "url": "https://files.pythonhosted.org/packages/85/c1/e94327b0aa6949e31a08dd0e3aaa72f2c47fd9a2c6292f33f37000797394/groupsolver-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:02 2020"}