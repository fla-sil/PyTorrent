{"info": {"author": "Thomas Lotze", "author_email": "thomas@thomas-lotze.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License"], "description": "=======================\nThe tl.cli distribution\n=======================\n\nVarious command line interface utilities.\n\nThis package requires Python 2, at least 2.5.\n\n\n``tl.readline``: ``readline`` related utilities\n===============================================\n\nAPI functions of this module act as no-ops if readline is not present.\n\n\nHistory handling\n----------------\n\n:``use_history(name)``:\n  Switch between multiple named histories, e.g. when embedding one command\n  interpreter inside another one.\n\n:``with_history(name)``:\n  Create a function decorator that runs a function with a named readline\n  history, maintaining a stack of histories for nested function calls.\n\n\nTab completion\n--------------\n\n:``use_completion()``:\n  Configure readline to use tab completion.\n\n:``static_completions(strings)``:\n  Create a completer function usable with readline that completes partial text\n  based on a static list of strings. The completer function computes an\n  iterable of matches.\n\n:``completion_generator(completions)``:\n  A function decorator that takes a completer function and returns a\n  completion generator usable with readline. The completion generator returns\n  successive matches on partial text based on a state parameter.\n\n:``input(prompt, default=None, completions=None)``:\n  A rich version of ``raw_input`` that in the presence of readline, allows for\n  commad line editing the default value and using custom tab completion.\n  Without readline, it displays the default value after the prompt.\n\n:``filename_completions(base_dir)``:\n  Create a completer function usable with readline that completes partial text\n  based on file names from the file system. The completer function computes an\n  iterable of matches.\n\n\n``tl.cmd``: an enhanced command shell\n=====================================\n\n``tl.cmd.Cmd`` is a command shell based on Python's ``cmd.Cmd`` that adds some\ngeneric usability features, some of them only of interest to developers.\n\n- Exceptions are caught instead of aborting the command loop. The traceback is\n  stored for subsequent introspection by the postmortem debugger. The debugger\n  is run by the ``postmortem`` command.\n\n- The ``python`` command runs a Python shell to access the command interpreter\n  directly.\n\n- End-of-file sent by the terminal quits the command loop.\n\n- Empty input lines are ignored instead of repeating the previous command.\n\n- Commands may be abbreviated as long as abbreviations are unambiguous.\n\n- When using tab completion, the cursor is positioned more conveniently.\n\n- Online help for commands is generated from the docstrings of the ``do_*``\n  methods that implement them where no ``help_*`` methods exist.\n\n\n``tl.cli.edit``: text editing\n=============================\n\n:``tl.cli.edit.edit(text, editor=None, file_encoding=None)``:\n  Runs the user's favourite text editor (or vi) on a temp file containing the\n  text string, then reads it back in and returns the edited content.\n\n\n``tl.cli.page``: paging through text\n====================================\n\n:``tl.cli.page.page(text, pager=None)``:\n  Runs the user's favourite pager (or more) on a text string or stream which\n  is sent to the pager's standard input.\n\n:``tl.cli.page.page_file(path, pager=None)``:\n  Runs the user's favourite pager (or more) on a file whose path is passed to\n  the pager as its only argument.\n\n\nContact\n=======\n\nThis package is written by Thomas Lotze. Please contact the author at\n<thomas@thomas-lotze.de> to provide feedback, suggestions, or contributions.\n\nSee also <http://www.thomas-lotze.de/en/software/>.\n\n\n.. Local Variables:\n.. mode: rst\n.. End:", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.thomas-lotze.de/en/software/", "keywords": "command line interface shell readline text editor editing", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "tl.cli", "package_url": "https://pypi.org/project/tl.cli/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tl.cli/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.thomas-lotze.de/en/software/"}, "release_url": "https://pypi.org/project/tl.cli/0.2/", "requires_dist": null, "requires_python": null, "summary": "Various command line interface utilities.\n\n- readline-related utilities\n- an enhanced command shell\n- text editing using an external editor\n- display of long text using a pager", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Various command line interface utilities.</p>\n<p>This package requires Python 2, at least 2.5.</p>\n<div id=\"tl-readline-readline-related-utilities\">\n<h2><tt>tl.readline</tt>: <tt>readline</tt> related utilities</h2>\n<p>API functions of this module act as no-ops if readline is not present.</p>\n<div id=\"history-handling\">\n<h3>History handling</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>use_history(name)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>Switch between multiple named histories, e.g. when embedding one command\ninterpreter inside another one.</td>\n</tr>\n<tr><th><tt>with_history(name)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>Create a function decorator that runs a function with a named readline\nhistory, maintaining a stack of histories for nested function calls.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"tab-completion\">\n<h3>Tab completion</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>use_completion()</tt>:</th></tr>\n<tr><td>\u00a0</td><td>Configure readline to use tab completion.</td>\n</tr>\n<tr><th><tt>static_completions(strings)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>Create a completer function usable with readline that completes partial text\nbased on a static list of strings. The completer function computes an\niterable of matches.</td>\n</tr>\n<tr><th><tt>completion_generator(completions)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>A function decorator that takes a completer function and returns a\ncompletion generator usable with readline. The completion generator returns\nsuccessive matches on partial text based on a state parameter.</td>\n</tr>\n<tr><th><tt>input(prompt, default=None, completions=None)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>A rich version of <tt>raw_input</tt> that in the presence of readline, allows for\ncommad line editing the default value and using custom tab completion.\nWithout readline, it displays the default value after the prompt.</td>\n</tr>\n<tr><th><tt>filename_completions(base_dir)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>Create a completer function usable with readline that completes partial text\nbased on file names from the file system. The completer function computes an\niterable of matches.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"tl-cmd-an-enhanced-command-shell\">\n<h2><tt>tl.cmd</tt>: an enhanced command shell</h2>\n<p><tt>tl.cmd.Cmd</tt> is a command shell based on Python\u2019s <tt>cmd.Cmd</tt> that adds some\ngeneric usability features, some of them only of interest to developers.</p>\n<ul>\n<li>Exceptions are caught instead of aborting the command loop. The traceback is\nstored for subsequent introspection by the postmortem debugger. The debugger\nis run by the <tt>postmortem</tt> command.</li>\n<li>The <tt>python</tt> command runs a Python shell to access the command interpreter\ndirectly.</li>\n<li>End-of-file sent by the terminal quits the command loop.</li>\n<li>Empty input lines are ignored instead of repeating the previous command.</li>\n<li>Commands may be abbreviated as long as abbreviations are unambiguous.</li>\n<li>When using tab completion, the cursor is positioned more conveniently.</li>\n<li>Online help for commands is generated from the docstrings of the <tt>do_*</tt>\nmethods that implement them where no <tt>help_*</tt> methods exist.</li>\n</ul>\n</div>\n<div id=\"tl-cli-edit-text-editing\">\n<h2><tt>tl.cli.edit</tt>: text editing</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>tl.cli.edit.edit(text, editor=None, file_encoding=None)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>Runs the user\u2019s favourite text editor (or vi) on a temp file containing the\ntext string, then reads it back in and returns the edited content.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"tl-cli-page-paging-through-text\">\n<h2><tt>tl.cli.page</tt>: paging through text</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>tl.cli.page.page(text, pager=None)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>Runs the user\u2019s favourite pager (or more) on a text string or stream which\nis sent to the pager\u2019s standard input.</td>\n</tr>\n<tr><th><tt>tl.cli.page.page_file(path, pager=None)</tt>:</th></tr>\n<tr><td>\u00a0</td><td>Runs the user\u2019s favourite pager (or more) on a file whose path is passed to\nthe pager as its only argument.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>This package is written by Thomas Lotze. Please contact the author at\n&lt;<a href=\"mailto:thomas%40thomas-lotze.de\">thomas<span>@</span>thomas-lotze<span>.</span>de</a>&gt; to provide feedback, suggestions, or contributions.</p>\n<p>See also &lt;<a href=\"http://www.thomas-lotze.de/en/software/\" rel=\"nofollow\">http://www.thomas-lotze.de/en/software/</a>&gt;.</p>\n</div>\n\n          </div>"}, "last_serial": 800754, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "98fc802b4f5259f4a974db943b0ac525", "sha256": "adf7b52d5e5202082f3c0cfc75f5fbf2fcbe9a8cd4ebc6ec11e4df5c990eae1d"}, "downloads": -1, "filename": "tl.cli-0.1.tar.gz", "has_sig": true, "md5_digest": "98fc802b4f5259f4a974db943b0ac525", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8102, "upload_time": "2008-04-07T21:29:14", "upload_time_iso_8601": "2008-04-07T21:29:14Z", "url": "https://files.pythonhosted.org/packages/1e/a3/18c652967f8690e30c79676abe0d3a6bd552c6a96ac19ec9743b40dd9d92/tl.cli-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3b14d76181a8e6704333d1cd3d6b8752", "sha256": "f8fd0dfef07304537f5d994774df1bac9d1817c6f30155d75c779cf55f98fa66"}, "downloads": -1, "filename": "tl.cli-0.2.tar.gz", "has_sig": true, "md5_digest": "3b14d76181a8e6704333d1cd3d6b8752", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13613, "upload_time": "2008-11-11T16:33:51", "upload_time_iso_8601": "2008-11-11T16:33:51Z", "url": "https://files.pythonhosted.org/packages/da/5e/ab76992d3d63c47d6f40722e361d2307f574f491635b1974b251064bbb1f/tl.cli-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b14d76181a8e6704333d1cd3d6b8752", "sha256": "f8fd0dfef07304537f5d994774df1bac9d1817c6f30155d75c779cf55f98fa66"}, "downloads": -1, "filename": "tl.cli-0.2.tar.gz", "has_sig": true, "md5_digest": "3b14d76181a8e6704333d1cd3d6b8752", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13613, "upload_time": "2008-11-11T16:33:51", "upload_time_iso_8601": "2008-11-11T16:33:51Z", "url": "https://files.pythonhosted.org/packages/da/5e/ab76992d3d63c47d6f40722e361d2307f574f491635b1974b251064bbb1f/tl.cli-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:29 2020"}