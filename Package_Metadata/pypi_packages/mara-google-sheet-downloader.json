{"info": {"author": "Mara contributors", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Mara Google Sheet Downloader\n\n[![Build Status](https://travis-ci.org/mara/mara-google-sheet-downloader.svg?branch=master)](https://travis-ci.org/mara/mara-google-sheet-downloader)\n[![PyPI - License](https://img.shields.io/pypi/l/mara-google-sheet-downloader.svg)](https://github.com/mara/mara-google-sheet-downloader/blob/master/LICENSE)\n[![PyPI version](https://badge.fury.io/py/mara-google-sheet-downloader.svg)](https://badge.fury.io/py/mara-google-sheet-downloader)\n[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://communityinviter.com/apps/mara-users/public-invite)\n\n\nThis package contains a google sheet downloader to be used with the mara ETL framework:\n\n- Download a Google sheet to a database table\n- Cells can be validated and formatted during download\n\n&nbsp;\n\n## Installation\n\nTo use the library directly, use pip:\n\n```\npip install mara-google-sheet-downloader\n```\n\nor\n\n```\npip install git+https://github.com/mara/mara-google-sheet-downloader.git\n```\n\n&nbsp;\n\n## Example\n\nHere is a pipeline \"gs_demo\" which downloads to a table. This assumes you have a spread sheet under the\nURL https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/edit. This sheet must be shared with the\nemail address for which you configured the credentials (see below).\n\nThe spreadsheet contains a worksheet 'test' which contains the following colums:\n\n|city | some_date | amount | already paid? | price | comments |\n|---|---|---|---|---| --- |\n|Berlin | 01.01.2020 | 3 | ja | 2.3 | added by JK on 2020-03-12 |\n\nNote that it doesn't contain an id column at the start!\n\n```python\nfrom data_integration.pipelines import Pipeline, Task\nfrom data_integration.commands.sql import ExecuteSQL\nfrom mara_google_sheet_downloader.mara_integration import DownloadGoogleSpreadsheet\n\npipeline = Pipeline(\n    id='gs_demo',\n    description='A small pipeline that demonstrates the a google sheet download')\n\npipeline.add(Task(\n    id='download_', description='Download a google sheet',\n    commands=[\n        ExecuteSQL(\n            sql_statement=f\"\"\"\n-- Creates the table where the google sheet data should end up in\nDROP TABLE IF EXISTS public.gs_test;\nCREATE TABLE public.gs_test (\nid BIGINT PRIMARY KEY,\ncity TEXT,\nsome_date DATE,\namount INTEGER,\nis_paid BOOLEAN,\nprice DOUBLE PRECISION,\ncomments TEXT\n)\n\"\"\",\n            echo_queries=False,\n        ),\n        DownloadGoogleSpreadsheet(\n            spreadsheet_key='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',  # from the URL\n            worksheet_name='test',  # worksheet\n            # Validators:\n            # c: counter (additional column, will start at 1 and count each row),\n            # s: string,\n            # d(in_fmt=%d.%m.%Y): date in YYYY.mm.dd format,\n            # i: integer,\n            # b(true:ja,false=nein): boolean with ja/nein interpreted as True/False,\n            # f: float,\n            # s: string\n            # any cell which does not confirm to this spec will fail the import!\n            columns_definition='csd(in_fmt=%d.%m.%Y)ib(true:ja,false=nein)fs',\n            target_table_name='public.gs_test', # table where the data should end up\n            target_db_alias='dwh', # alias of the DB where the data should end up\n            skip_rows=1), # how many rows at the top should be skipped\n    ]),\n)\n```\n\n## Config\n\nThe downloader needs OAuth2 credentials, either use a service account or a user account.\n* For service accounts, see https://gspread.readthedocs.io/en/latest/oauth2.html. All required information is in the\n  downloaded json file.\n* For user account credentials, see https://developers.google.com/sheets/api/quickstart/python, Step 1.\n  For getting the initial refresh token, you can use\n  `flask mara_google_sheet_downloader.generate-user-refresh-token /path/to/downloaded/credential.json`\n\nCredentials will need the scopes `'https://www.googleapis.com/auth/spreadsheets.readonly', 'https://www.googleapis.com/auth/drive.readonly'`.\n\nExample with OAuth2 credentials for a user account:\n\n```python\nfrom mara_app.monkey_patch import patch\nimport mara_google_sheet_downloader.config\npatch(mara_google_sheet_downloader.config.gs_user_account_client_id)(lambda:\"....client_id...\")\npatch(mara_google_sheet_downloader.config.gs_user_account_client_secret)(lambda:\"...client_secret...\")\npatch(mara_google_sheet_downloader.config.gs_user_account_refresh_token)(lambda:\"...initial_refresh_token...\")\n```\n\n## Setup access to sheets to be downloaded\n\nAll sheets which should be accessed by the downloader must be shared with the email address associated with these\ncredentials. This email address is:\n\n* for user account credentials: the email address of the user who created the credentials.\n* for service accounts: the email address of the service account itself (e.g. \"*@*.iam.gserviceaccount.com\").\n  This email address is e.g. included in the json file you can download.\n\n## CLI\n\nThis package contains a small cli app which downloads a google sheet and outputs it as csv.\n\nYou can use it stand alone, see `python -m mara_google_sheet_downloader --help ` for how to use it.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mara/mara-google-sheet-downloader", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mara-google-sheet-downloader", "package_url": "https://pypi.org/project/mara-google-sheet-downloader/", "platform": "", "project_url": "https://pypi.org/project/mara-google-sheet-downloader/", "project_urls": {"Homepage": "https://github.com/mara/mara-google-sheet-downloader"}, "release_url": "https://pypi.org/project/mara-google-sheet-downloader/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Opinionated lightweight ETL pipeline framework", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mara Google Sheet Downloader</h1>\n<p><a href=\"https://travis-ci.org/mara/mara-google-sheet-downloader\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57e0f2669426f44563797cdef7b64192b73663e7/68747470733a2f2f7472617669732d63692e6f72672f6d6172612f6d6172612d676f6f676c652d73686565742d646f776e6c6f616465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/mara/mara-google-sheet-downloader/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f50d53404ae2d729e25886f950030cab96812e3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d6172612d676f6f676c652d73686565742d646f776e6c6f616465722e737667\"></a>\n<a href=\"https://badge.fury.io/py/mara-google-sheet-downloader\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d59d4b6bb3daad3119e5e1cceba4c8e0b99eef65/68747470733a2f2f62616467652e667572792e696f2f70792f6d6172612d676f6f676c652d73686565742d646f776e6c6f616465722e737667\"></a>\n<a href=\"https://communityinviter.com/apps/mara-users/public-invite\" rel=\"nofollow\"><img alt=\"Slack Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c01bf4f74a7c882bcfcd47e4924618eb70cfcd6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d6a6f696e5f636861742d77686974652e7376673f6c6f676f3d736c61636b267374796c653d736f6369616c\"></a></p>\n<p>This package contains a google sheet downloader to be used with the mara ETL framework:</p>\n<ul>\n<li>Download a Google sheet to a database table</li>\n<li>Cells can be validated and formatted during download</li>\n</ul>\n<p>\u00a0</p>\n<h2>Installation</h2>\n<p>To use the library directly, use pip:</p>\n<pre><code>pip install mara-google-sheet-downloader\n</code></pre>\n<p>or</p>\n<pre><code>pip install git+https://github.com/mara/mara-google-sheet-downloader.git\n</code></pre>\n<p>\u00a0</p>\n<h2>Example</h2>\n<p>Here is a pipeline \"gs_demo\" which downloads to a table. This assumes you have a spread sheet under the\nURL <a href=\"https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/edit\" rel=\"nofollow\">https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/edit</a>. This sheet must be shared with the\nemail address for which you configured the credentials (see below).</p>\n<p>The spreadsheet contains a worksheet 'test' which contains the following colums:</p>\n<table>\n<thead>\n<tr>\n<th>city</th>\n<th>some_date</th>\n<th>amount</th>\n<th>already paid?</th>\n<th>price</th>\n<th>comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Berlin</td>\n<td>01.01.2020</td>\n<td>3</td>\n<td>ja</td>\n<td>2.3</td>\n<td>added by JK on 2020-03-12</td>\n</tr></tbody></table>\n<p>Note that it doesn't contain an id column at the start!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">data_integration.pipelines</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span><span class=\"p\">,</span> <span class=\"n\">Task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">data_integration.commands.sql</span> <span class=\"kn\">import</span> <span class=\"n\">ExecuteSQL</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mara_google_sheet_downloader.mara_integration</span> <span class=\"kn\">import</span> <span class=\"n\">DownloadGoogleSpreadsheet</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'gs_demo'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'A small pipeline that demonstrates the a google sheet download'</span><span class=\"p\">)</span>\n\n<span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">(</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'download_'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Download a google sheet'</span><span class=\"p\">,</span>\n    <span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">ExecuteSQL</span><span class=\"p\">(</span>\n            <span class=\"n\">sql_statement</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">-- Creates the table where the google sheet data should end up in</span>\n<span class=\"s2\">DROP TABLE IF EXISTS public.gs_test;</span>\n<span class=\"s2\">CREATE TABLE public.gs_test (</span>\n<span class=\"s2\">id BIGINT PRIMARY KEY,</span>\n<span class=\"s2\">city TEXT,</span>\n<span class=\"s2\">some_date DATE,</span>\n<span class=\"s2\">amount INTEGER,</span>\n<span class=\"s2\">is_paid BOOLEAN,</span>\n<span class=\"s2\">price DOUBLE PRECISION,</span>\n<span class=\"s2\">comments TEXT</span>\n<span class=\"s2\">)</span>\n<span class=\"s2\">\"\"\"</span><span class=\"p\">,</span>\n            <span class=\"n\">echo_queries</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">DownloadGoogleSpreadsheet</span><span class=\"p\">(</span>\n            <span class=\"n\">spreadsheet_key</span><span class=\"o\">=</span><span class=\"s1\">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span><span class=\"p\">,</span>  <span class=\"c1\"># from the URL</span>\n            <span class=\"n\">worksheet_name</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span>  <span class=\"c1\"># worksheet</span>\n            <span class=\"c1\"># Validators:</span>\n            <span class=\"c1\"># c: counter (additional column, will start at 1 and count each row),</span>\n            <span class=\"c1\"># s: string,</span>\n            <span class=\"c1\"># d(in_fmt=%d.%m.%Y): date in YYYY.mm.dd format,</span>\n            <span class=\"c1\"># i: integer,</span>\n            <span class=\"c1\"># b(true:ja,false=nein): boolean with ja/nein interpreted as True/False,</span>\n            <span class=\"c1\"># f: float,</span>\n            <span class=\"c1\"># s: string</span>\n            <span class=\"c1\"># any cell which does not confirm to this spec will fail the import!</span>\n            <span class=\"n\">columns_definition</span><span class=\"o\">=</span><span class=\"s1\">'csd(in_fmt=</span><span class=\"si\">%d</span><span class=\"s1\">.%m.%Y)ib(true:ja,false=nein)fs'</span><span class=\"p\">,</span>\n            <span class=\"n\">target_table_name</span><span class=\"o\">=</span><span class=\"s1\">'public.gs_test'</span><span class=\"p\">,</span> <span class=\"c1\"># table where the data should end up</span>\n            <span class=\"n\">target_db_alias</span><span class=\"o\">=</span><span class=\"s1\">'dwh'</span><span class=\"p\">,</span> <span class=\"c1\"># alias of the DB where the data should end up</span>\n            <span class=\"n\">skip_rows</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"c1\"># how many rows at the top should be skipped</span>\n    <span class=\"p\">]),</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Config</h2>\n<p>The downloader needs OAuth2 credentials, either use a service account or a user account.</p>\n<ul>\n<li>For service accounts, see <a href=\"https://gspread.readthedocs.io/en/latest/oauth2.html\" rel=\"nofollow\">https://gspread.readthedocs.io/en/latest/oauth2.html</a>. All required information is in the\ndownloaded json file.</li>\n<li>For user account credentials, see <a href=\"https://developers.google.com/sheets/api/quickstart/python\" rel=\"nofollow\">https://developers.google.com/sheets/api/quickstart/python</a>, Step 1.\nFor getting the initial refresh token, you can use\n<code>flask mara_google_sheet_downloader.generate-user-refresh-token /path/to/downloaded/credential.json</code></li>\n</ul>\n<p>Credentials will need the scopes <code>'https://www.googleapis.com/auth/spreadsheets.readonly', 'https://www.googleapis.com/auth/drive.readonly'</code>.</p>\n<p>Example with OAuth2 credentials for a user account:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mara_app.monkey_patch</span> <span class=\"kn\">import</span> <span class=\"n\">patch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mara_google_sheet_downloader.config</span>\n<span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"n\">mara_google_sheet_downloader</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">gs_user_account_client_id</span><span class=\"p\">)(</span><span class=\"k\">lambda</span><span class=\"p\">:</span><span class=\"s2\">\"....client_id...\"</span><span class=\"p\">)</span>\n<span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"n\">mara_google_sheet_downloader</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">gs_user_account_client_secret</span><span class=\"p\">)(</span><span class=\"k\">lambda</span><span class=\"p\">:</span><span class=\"s2\">\"...client_secret...\"</span><span class=\"p\">)</span>\n<span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"n\">mara_google_sheet_downloader</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">gs_user_account_refresh_token</span><span class=\"p\">)(</span><span class=\"k\">lambda</span><span class=\"p\">:</span><span class=\"s2\">\"...initial_refresh_token...\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Setup access to sheets to be downloaded</h2>\n<p>All sheets which should be accessed by the downloader must be shared with the email address associated with these\ncredentials. This email address is:</p>\n<ul>\n<li>for user account credentials: the email address of the user who created the credentials.</li>\n<li>for service accounts: the email address of the service account itself (e.g. \"<em>@</em>.iam.gserviceaccount.com\").\nThis email address is e.g. included in the json file you can download.</li>\n</ul>\n<h2>CLI</h2>\n<p>This package contains a small cli app which downloads a google sheet and outputs it as csv.</p>\n<p>You can use it stand alone, see <code>python -m mara_google_sheet_downloader --help</code> for how to use it.</p>\n\n          </div>"}, "last_serial": 6919105, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c8f3e2326cbbfd5cc8c1187fe41b6645", "sha256": "c5f130b0c62eba7a4ed00f6d318ef53b48bb481395b4b226126951efbe3e89b2"}, "downloads": -1, "filename": "mara-google-sheet-downloader-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c8f3e2326cbbfd5cc8c1187fe41b6645", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15167, "upload_time": "2020-03-31T10:06:37", "upload_time_iso_8601": "2020-03-31T10:06:37.211203Z", "url": "https://files.pythonhosted.org/packages/99/e5/594ff43a4415301adf5e5204bcc8b308115fece6f2912af21087d56b0538/mara-google-sheet-downloader-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8f3e2326cbbfd5cc8c1187fe41b6645", "sha256": "c5f130b0c62eba7a4ed00f6d318ef53b48bb481395b4b226126951efbe3e89b2"}, "downloads": -1, "filename": "mara-google-sheet-downloader-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c8f3e2326cbbfd5cc8c1187fe41b6645", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15167, "upload_time": "2020-03-31T10:06:37", "upload_time_iso_8601": "2020-03-31T10:06:37.211203Z", "url": "https://files.pythonhosted.org/packages/99/e5/594ff43a4415301adf5e5204bcc8b308115fece6f2912af21087d56b0538/mara-google-sheet-downloader-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:51 2020"}