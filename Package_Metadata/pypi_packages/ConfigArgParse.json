{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "ConfigArgParse\n--------------\n\n.. image:: https://img.shields.io/pypi/v/ConfigArgParse.svg?style=flat\n    :alt: PyPI version\n    :target: https://pypi.python.org/pypi/ConfigArgParse\n\n.. image:: https://img.shields.io/pypi/pyversions/ConfigArgParse.svg\n    :alt: Supported Python versions\n    :target: https://pypi.python.org/pypi/ConfigArgParse\n\n.. image:: https://travis-ci.org/bw2/ConfigArgParse.svg?branch=master\n    :alt: Travis CI build\n    :target: https://travis-ci.org/bw2/ConfigArgParse\n\nOverview\n~~~~~~~~\n\nApplications with more than a handful of user-settable options are best\nconfigured through a combination of command line args, config files,\nhard-coded defaults, and in some cases, environment variables.\n\nPython's command line parsing modules such as argparse have very limited\nsupport for config files and environment variables, so this module\nextends argparse to add these features.\n\nAvailable on PyPI: http://pypi.python.org/pypi/ConfigArgParse\n\n.. image:: https://travis-ci.org/bw2/ConfigArgParse.svg?branch=master\n    :target: https://travis-ci.org/bw2/ConfigArgParse\n\nFeatures\n~~~~~~~~\n\n-  command-line, config file, env var, and default settings can now be\n   defined, documented, and parsed in one go using a single API (if a\n   value is specified in more than one way then: command line >\n   environment variables > config file values > defaults)\n-  config files can have .ini or .yaml style syntax (eg. key=value or\n   key: value)\n-  user can provide a config file via a normal-looking command line arg\n   (eg. -c path/to/config.txt) rather than the argparse-style @config.txt\n-  one or more default config file paths can be specified\n   (eg. ['/etc/bla.conf', '~/.my_config'] )\n-  all argparse functionality is fully supported, so this module can\n   serve as a drop-in replacement (verified by argparse unittests).\n-  env vars and config file keys & syntax are automatically documented\n   in the -h help message\n-  new method :code:`print_values()` can report keys & values and where\n   they were set (eg. command line, env var, config file, or default).\n-  lite-weight (no 3rd-party library dependencies except (optionally) PyYAML)\n-  extensible (:code:`ConfigFileParser` can be subclassed to define a new\n   config file format)\n-  unittested by running the unittests that came with argparse but on\n   configargparse, and using tox to test with Python 2.7 and Python 3+\n\nExample\n~~~~~~~\n\n*my_script.py*:\n\nScript that defines 4 options and a positional arg and then parses and prints the values. Also,\nit prints out the help message as well as the string produced by :code:`format_values()` to show\nwhat they look like.\n\n.. code:: py\n\n   import configargparse\n\n   p = configargparse.ArgParser(default_config_files=['/etc/app/conf.d/*.conf', '~/.my_settings'])\n   p.add('-c', '--my-config', required=True, is_config_file=True, help='config file path')\n   p.add('--genome', required=True, help='path to genome file')  # this option can be set in a config file because it starts with '--'\n   p.add('-v', help='verbose', action='store_true')\n   p.add('-d', '--dbsnp', help='known variants .vcf', env_var='DBSNP_PATH')  # this option can be set in a config file because it starts with '--'\n   p.add('vcf', nargs='+', help='variant file(s)')\n\n   options = p.parse_args()\n\n   print(options)\n   print(\"----------\")\n   print(p.format_help())\n   print(\"----------\")\n   print(p.format_values())    # useful for logging where different settings came from\n\n\n*config.txt:*\n\nSince the script above set the config file as required=True, lets create a config file to give it:\n\n.. code:: py\n\n    # settings for my_script.py\n    genome = HCMV     # cytomegalovirus genome\n    dbsnp = /data/dbsnp/variants.vcf\n\n\n*command line:*\n\nNow run the script and pass it the config file:\n\n.. code:: bash\n\n    DBSNP_PATH=/data/dbsnp/variants_v2.vcf python config_test.py --my-config config.txt f1.vcf f2.vcf\n\n*output:*\n\nHere is the result:\n\n.. code:: bash\n\n    Namespace(dbsnp='/data/dbsnp/variants_v2.vcf', genome='HCMV', my_config='config.txt', v=False, vcf=['f1.vcf', 'f2.vcf'])\n    ----------\n    usage: config_test.py [-h] -c MY_CONFIG --genome GENOME [-v] [-d DBSNP]\n                          vcf [vcf ...]\n    \n    Args that start with '--' (eg. --genome) can also be set in a config file\n    (/etc/app/conf.d/*.conf or ~/.my_settings or specified via -c). Config file\n    syntax allows: key=value, flag=true, stuff=[a,b,c] (for details, see syntax at\n    https://goo.gl/R74nmi). If an arg is specified in more than one place, then\n    commandline values override environment variables which override config file\n    values which override defaults.\n    \n    positional arguments:\n      vcf                   variant file(s)\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -c MY_CONFIG, --my-config MY_CONFIG\n                            config file path\n      --genome GENOME       path to genome file\n      -v                    verbose\n      -d DBSNP, --dbsnp DBSNP\n                            known variants .vcf [env var: DBSNP_PATH]\n    \n    ----------\n    Command Line Args:   --my-config config.txt f1.vcf f2.vcf\n    Environment Variables:\n      DBSNP_PATH:        /data/dbsnp/variants_v2.vcf\n    Config File (config.txt):\n      genome:            HCMV\n\nSpecial Values\n~~~~~~~~~~~~~~\n\nUnder the hood, configargparse handles environment variables and config file\nvalues by converting them to their corresponding command line arg. For\nexample, \"key = value\" will be processed as if \"--key value\" was specified\non the command line.\n\nAlso, the following special values (whether in a config file or an environment\nvariable) are handled in a special way to support booleans and lists:\n\n-  :code:`key = true` is handled as if \"--key\" was specified on the command line.\n   In your python code this key must be defined as a boolean flag\n   (eg. action=\"store_true\" or similar).\n\n-  :code:`key = [value1, value2, ...]` is handled as if \"--key value1 --key value2\"\n   etc. was specified on the command line. In your python code this key must\n   be defined as a list (eg. action=\"append\").\n\nConfig File Syntax\n~~~~~~~~~~~~~~~~~~\n\nOnly command line args that have a long version (eg. one that starts with '--')\ncan be set in a config file. For example, \"--color\" can be set by putting\n\"color=green\" in a config file. The config file syntax depends on the constuctor\narg: :code:`config_file_parser_class` which can be set to one of the provided\nclasses: :code:`DefaultConfigFileParser`, :code:`YAMLConfigFileParser`,\n:code:`ConfigparserConfigFileParser` or to your own subclass of the\n:code:`ConfigFileParser` abstract class.\n\n*DefaultConfigFileParser*  - the full range of valid syntax is:\n\n.. code:: yaml\n\n        # this is a comment\n        ; this is also a comment (.ini style)\n        ---            # lines that start with --- are ignored (yaml style)\n        -------------------\n        [section]      # .ini-style section names are treated as comments\n\n        # how to specify a key-value pair (all of these are equivalent):\n        name value     # key is case sensitive: \"Name\" isn't \"name\"\n        name = value   # (.ini style)  (white space is ignored, so name = value same as name=value)\n        name: value    # (yaml style)\n        --name value   # (argparse style)\n\n        # how to set a flag arg (eg. arg which has action=\"store_true\")\n        --name\n        name\n        name = True    # \"True\" and \"true\" are the same\n\n        # how to specify a list arg (eg. arg which has action=\"append\")\n        fruit = [apple, orange, lemon]\n        indexes = [1, 12, 35 , 40]\n\n\n*YAMLConfigFileParser*  - allows a subset of YAML syntax (http://goo.gl/VgT2DU)\n\n.. code:: yaml\n\n        # a comment\n        name1: value\n        name2: true    # \"True\" and \"true\" are the same\n\n        fruit: [apple, orange, lemon]\n        indexes: [1, 12, 35, 40]\n\n*ConfigparserConfigFileParser*  - allows a subset of python's configparser\nmodule syntax (https://docs.python.org/3.7/library/configparser.html). In\nparticular the following configparser options are set:\n\n.. code:: py\n\n        config = configparser.ConfigParser(\n            delimiters=(\"=\",\":\"),\n            allow_no_value=False,\n            comment_prefixes=(\"#\",\";\"),\n            inline_comment_prefixes=(\"#\",\";\"),\n            strict=True,\n            empty_lines_in_values=False,\n        )\n\nOnce configparser parses the config file all section names are removed, thus all\nkeys must have unique names regardless of which INI section they are defined\nunder. Also, any keys which have python list syntax are converted to lists by\nevaluating them as python code using ast.literal_eval\n(https://docs.python.org/3/library/ast.html#ast.literal_eval). To facilitate\nthis all multi-line values are converted to single-line values. Thus multi-line\nstring values will have all new-lines converted to spaces. Note, since key-value\npairs that have python dictionary syntax are saved as single-line strings, even\nif formatted across multiple lines in the config file, dictionaries can be read\nin and converted to valid python dictionaries with PyYAML's safe_load. Example\ngiven below:\n\n.. code:: py\n\n        # inside your config file (e.g. config.ini)\n        [section1]  # INI sections treated as comments\n        system1_settings: { # start of multi-line dictionary\n            'a':True,\n            'b':[2, 4, 8, 16],\n            'c':{'start':0, 'stop':1000},\n            'd':'experiment 32 testing simulation with parameter a on'\n            } # end of multi-line dictionary value\n\n        .......\n\n        # in your configargparse setup\n        import configargparse\n        import yaml\n\n        parser = configargparse.ConfigParser(\n            config_file_parser_class=configargparse.ConfigparserConfigFileParser\n        )\n        parser.add_argument('--system1_settings', type=yaml.safe_load)\n        \n        args = parser.parse_args() # now args.system1 is a valid python dict\n\n\nArgParser Singletons\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo make it easier to configure different modules in an application,\nconfigargparse provides globally-available ArgumentParser instances\nvia configargparse.get_argument_parser('name') (similar to\nlogging.getLogger('name')).\n\nHere is an example of an application with a utils module that also\ndefines and retrieves its own command-line args.\n\n*main.py*\n\n.. code:: py\n\n    import configargparse\n    import utils\n\n    p = configargparse.get_argument_parser()\n    p.add_argument(\"-x\", help=\"Main module setting\")\n    p.add_argument(\"--m-setting\", help=\"Main module setting\")\n    options = p.parse_known_args()   # using p.parse_args() here may raise errors.\n\n*utils.py*\n\n.. code:: py\n\n    import configargparse\n    p = configargparse.get_argument_parser()\n    p.add_argument(\"--utils-setting\", help=\"Config-file-settable option for utils\")\n\n    if __name__ == \"__main__\":\n       options = p.parse_known_args()\n\nHelp Formatters\n~~~~~~~~~~~~~~~\n\n:code:`ArgumentDefaultsRawHelpFormatter` is a new HelpFormatter that both adds\ndefault values AND disables line-wrapping. It can be passed to the constructor:\n:code:`ArgParser(.., formatter_class=ArgumentDefaultsRawHelpFormatter)`\n\n\nAliases\n~~~~~~~\n\nThe configargparse.ArgumentParser API inherits its class and method\nnames from argparse and also provides the following shorter names for\nconvenience:\n\n-  p = configargparse.get_arg_parser()  # get global singleton instance\n-  p = configargparse.get_parser()\n-  p = configargparse.ArgParser()  # create a new instance\n-  p = configargparse.Parser()\n-  p.add_arg(..)\n-  p.add(..)\n-  options = p.parse(..)\n\nHelpFormatters:\n\n- RawFormatter = RawDescriptionHelpFormatter\n- DefaultsFormatter = ArgumentDefaultsHelpFormatter\n- DefaultsRawFormatter = ArgumentDefaultsRawHelpFormatter\n\n\nDesign Notes\n~~~~~~~~~~~~\n\nUnit tests:\n\ntests/test_configargparse.py contains custom unittests for features\nspecific to this module (such as config file and env-var support), as\nwell as a hook to load and run argparse unittests (see the built-in\ntest.test_argparse module) but on configargparse in place of argparse.\nThis ensures that configargparse will work as a drop in replacement for\nargparse in all usecases.\n\nPreviously existing modules (PyPI search keywords: config argparse):\n\n-  argparse (built-in module Python v2.7+)\n\n   -  Good:\n\n      -  fully featured command line parsing\n      -  can read args from files using an easy to understand mechanism\n\n   -  Bad:\n\n      -  syntax for specifying config file path is unusual (eg.\n         @file.txt)and not described in the user help message.\n      -  default config file syntax doesn't support comments and is\n         unintuitive (eg. --namevalue)\n      -  no support for environment variables\n\n-  ConfArgParse v1.0.15\n   (https://pypi.python.org/pypi/ConfArgParse)\n\n   -  Good:\n\n      -  extends argparse with support for config files parsed by\n         ConfigParser\n      -  clear documentation in README\n\n   -  Bad:\n\n      -  config file values are processed using\n         ArgumentParser.set_defaults(..) which means \"required\" and\n         \"choices\" are not handled as expected. For example, if you\n         specify a required value in a config file, you still have to\n         specify it again on the command line.\n      -  doesn't work with Python 3 yet\n      -  no unit tests, code not well documented\n\n-  appsettings v0.5 (https://pypi.python.org/pypi/appsettings)\n\n   -  Good:\n\n      -  supports config file (yaml format) and env_var parsing\n      -  supports config-file-only setting for specifying lists and\n         dicts\n\n   -  Bad:\n\n      -  passes in config file and env settings via parse_args\n         namespace param\n      -  tests not finished and don't work with Python 3 (import\n         StringIO)\n\n-  argparse_config v0.5.1\n   (https://pypi.python.org/pypi/argparse_config)\n\n   -  Good:\n\n      -  similar features to ConfArgParse v1.0.15\n\n   -  Bad:\n\n      -  doesn't work with Python 3 (error during pip install)\n\n-  yconf v0.3.2 - (https://pypi.python.org/pypi/yconf) - features\n   and interface not that great\n-  hieropt v0.3 - (https://pypi.python.org/pypi/hieropt) - doesn't\n   appear to be maintained, couldn't find documentation\n\n-  configurati v0.2.3 - (https://pypi.python.org/pypi/configurati)\n\n   -  Good:\n\n      -  JSON, YAML, or Python configuration files\n      -  handles rich data structures such as dictionaries\n      -  can group configuration names into sections (like .ini files)\n\n   -  Bad:\n\n      -  doesn't work with Python 3\n      -  2+ years since last release to PyPI\n      -  apparently unmaintained\n\n\nDesign choices:\n\n1. all options must be settable via command line. Having options that\n   can only be set using config files or env. vars adds complexity to\n   the API, and is not a useful enough feature since the developer can\n   split up options into sections and call a section \"config file keys\",\n   with command line args that are just \"--\" plus the config key.\n2. config file and env. var settings should be processed by appending\n   them to the command line (another benefit of #1). This is an\n   easy-to-implement solution and implicitly takes care of checking that\n   all \"required\" args are provied, etc., plus the behavior should be\n   easy for users to understand.\n3. configargparse shouldn't override argparse's\n   convert_arg_line_to_args method so that all argparse unit tests\n   can be run on configargparse.\n4. in terms of what to allow for config file keys, the \"dest\" value of\n   an option can't serve as a valid config key because many options can\n   have the same dest. Instead, since multiple options can't use the\n   same long arg (eg. \"--long-arg-x\"), let the config key be either\n   \"--long-arg-x\" or \"long-arg-x\". This means the developer can allow\n   only a subset of the command-line args to be specified via config\n   file (eg. short args like -x would be excluded). Also, that way\n   config keys are automatically documented whenever the command line\n   args are documented in the help message.\n5. don't force users to put config file settings in the right .ini\n   [sections]. This doesn't have a clear benefit since all options are\n   command-line settable, and so have a globally unique key anyway.\n   Enforcing sections just makes things harder for the user and adds\n   complexity to the implementation.\n6. if necessary, config-file-only args can be added later by\n   implementing a separate add method and using the namespace arg as in\n   appsettings_v0.5\n\nRelevant sites:\n\n-  http://stackoverflow.com/questions/6133517/parse-config-file-environment-and-command-line-arguments-to-get-a-single-coll\n-  http://tricksntweaks.blogspot.com/2013_05_01_archive.html\n-  http://www.youtube.com/watch?v=vvCwqHgZJc8#t=35\n\n\n.. |Travis CI Status for bw2/ConfigArgParse| image:: https://travis-ci.org/bw2/ConfigArgParse.svg?branch=master\n\n\nVersioning\n~~~~~~~~~~\n\nThis software follows `Semantic Versioning`_\n\n.. _Semantic Versioning: http://semver.org/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bw2/ConfigArgParse", "keywords": "options", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ConfigArgParse", "package_url": "https://pypi.org/project/ConfigArgParse/", "platform": "", "project_url": "https://pypi.org/project/ConfigArgParse/", "project_urls": {"Homepage": "https://github.com/bw2/ConfigArgParse"}, "release_url": "https://pypi.org/project/ConfigArgParse/1.2.3/", "requires_dist": null, "requires_python": "", "summary": "A drop-in replacement for argparse that allows options to also be set via config files and/or environment variables.", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/ConfigArgParse\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8a4c1fc1c6b133f8e844cfbed1d4d4cb9ee92f3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f436f6e66696741726750617273652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/ConfigArgParse\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92d4b8ed72c089f1c191e2062cc1e4b425d4c120/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f436f6e66696741726750617273652e737667\"></a>\n<a href=\"https://travis-ci.org/bw2/ConfigArgParse\" rel=\"nofollow\"><img alt=\"Travis CI build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b848d75a3bbe24cec4d049588ed3fdb0b09f66c/68747470733a2f2f7472617669732d63692e6f72672f6277322f436f6e66696741726750617273652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>Applications with more than a handful of user-settable options are best\nconfigured through a combination of command line args, config files,\nhard-coded defaults, and in some cases, environment variables.</p>\n<p>Python\u2019s command line parsing modules such as argparse have very limited\nsupport for config files and environment variables, so this module\nextends argparse to add these features.</p>\n<p>Available on PyPI: <a href=\"http://pypi.python.org/pypi/ConfigArgParse\" rel=\"nofollow\">http://pypi.python.org/pypi/ConfigArgParse</a></p>\n<a href=\"https://travis-ci.org/bw2/ConfigArgParse\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/bw2/ConfigArgParse.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b848d75a3bbe24cec4d049588ed3fdb0b09f66c/68747470733a2f2f7472617669732d63692e6f72672f6277322f436f6e66696741726750617273652e7376673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>command-line, config file, env var, and default settings can now be\ndefined, documented, and parsed in one go using a single API (if a\nvalue is specified in more than one way then: command line &gt;\nenvironment variables &gt; config file values &gt; defaults)</li>\n<li>config files can have .ini or .yaml style syntax (eg. key=value or\nkey: value)</li>\n<li>user can provide a config file via a normal-looking command line arg\n(eg. -c path/to/config.txt) rather than the argparse-style @config.txt</li>\n<li>one or more default config file paths can be specified\n(eg. [\u2018/etc/bla.conf\u2019, \u2018~/.my_config\u2019] )</li>\n<li>all argparse functionality is fully supported, so this module can\nserve as a drop-in replacement (verified by argparse unittests).</li>\n<li>env vars and config file keys &amp; syntax are automatically documented\nin the -h help message</li>\n<li>new method <code>print_values()</code> can report keys &amp; values and where\nthey were set (eg. command line, env var, config file, or default).</li>\n<li>lite-weight (no 3rd-party library dependencies except (optionally) PyYAML)</li>\n<li>extensible (<code>ConfigFileParser</code> can be subclassed to define a new\nconfig file format)</li>\n<li>unittested by running the unittests that came with argparse but on\nconfigargparse, and using tox to test with Python 2.7 and Python 3+</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p><em>my_script.py</em>:</p>\n<p>Script that defines 4 options and a positional arg and then parses and prints the values. Also,\nit prints out the help message as well as the string produced by <code>format_values()</code> to show\nwhat they look like.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">configargparse</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">configargparse</span><span class=\"o\">.</span><span class=\"n\">ArgParser</span><span class=\"p\">(</span><span class=\"n\">default_config_files</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'/etc/app/conf.d/*.conf'</span><span class=\"p\">,</span> <span class=\"s1\">'~/.my_settings'</span><span class=\"p\">])</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'-c'</span><span class=\"p\">,</span> <span class=\"s1\">'--my-config'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">is_config_file</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'config file path'</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'--genome'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'path to genome file'</span><span class=\"p\">)</span>  <span class=\"c1\"># this option can be set in a config file because it starts with '--'</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'-v'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'verbose'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'-d'</span><span class=\"p\">,</span> <span class=\"s1\">'--dbsnp'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'known variants .vcf'</span><span class=\"p\">,</span> <span class=\"n\">env_var</span><span class=\"o\">=</span><span class=\"s1\">'DBSNP_PATH'</span><span class=\"p\">)</span>  <span class=\"c1\"># this option can be set in a config file because it starts with '--'</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'vcf'</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'variant file(s)'</span><span class=\"p\">)</span>\n\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"----------\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">format_help</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"----------\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">format_values</span><span class=\"p\">())</span>    <span class=\"c1\"># useful for logging where different settings came from</span>\n</pre>\n<p><em>config.txt:</em></p>\n<p>Since the script above set the config file as required=True, lets create a config file to give it:</p>\n<pre><span class=\"c1\"># settings for my_script.py</span>\n<span class=\"n\">genome</span> <span class=\"o\">=</span> <span class=\"n\">HCMV</span>     <span class=\"c1\"># cytomegalovirus genome</span>\n<span class=\"n\">dbsnp</span> <span class=\"o\">=</span> <span class=\"o\">/</span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">dbsnp</span><span class=\"o\">/</span><span class=\"n\">variants</span><span class=\"o\">.</span><span class=\"n\">vcf</span>\n</pre>\n<p><em>command line:</em></p>\n<p>Now run the script and pass it the config file:</p>\n<pre><span class=\"nv\">DBSNP_PATH</span><span class=\"o\">=</span>/data/dbsnp/variants_v2.vcf python config_test.py --my-config config.txt f1.vcf f2.vcf\n</pre>\n<p><em>output:</em></p>\n<p>Here is the result:</p>\n<pre>Namespace<span class=\"o\">(</span><span class=\"nv\">dbsnp</span><span class=\"o\">=</span><span class=\"s1\">'/data/dbsnp/variants_v2.vcf'</span>, <span class=\"nv\">genome</span><span class=\"o\">=</span><span class=\"s1\">'HCMV'</span>, <span class=\"nv\">my_config</span><span class=\"o\">=</span><span class=\"s1\">'config.txt'</span>, <span class=\"nv\">v</span><span class=\"o\">=</span>False, <span class=\"nv\">vcf</span><span class=\"o\">=[</span><span class=\"s1\">'f1.vcf'</span>, <span class=\"s1\">'f2.vcf'</span><span class=\"o\">])</span>\n----------\nusage: config_test.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> -c MY_CONFIG --genome GENOME <span class=\"o\">[</span>-v<span class=\"o\">]</span> <span class=\"o\">[</span>-d DBSNP<span class=\"o\">]</span>\n                      vcf <span class=\"o\">[</span>vcf ...<span class=\"o\">]</span>\n\nArgs that start with <span class=\"s1\">'--'</span> <span class=\"o\">(</span>eg. --genome<span class=\"o\">)</span> can also be <span class=\"nb\">set</span> in a config file\n<span class=\"o\">(</span>/etc/app/conf.d/*.conf or ~/.my_settings or specified via -c<span class=\"o\">)</span>. Config file\nsyntax allows: <span class=\"nv\">key</span><span class=\"o\">=</span>value, <span class=\"nv\">flag</span><span class=\"o\">=</span>true, <span class=\"nv\">stuff</span><span class=\"o\">=[</span>a,b,c<span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">for</span> details, see syntax at\nhttps://goo.gl/R74nmi<span class=\"o\">)</span>. If an arg is specified in more than one place, <span class=\"k\">then</span>\ncommandline values override environment variables which override config file\nvalues which override defaults.\n\npositional arguments:\n  vcf                   variant file<span class=\"o\">(</span>s<span class=\"o\">)</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -c MY_CONFIG, --my-config MY_CONFIG\n                        config file path\n  --genome GENOME       path to genome file\n  -v                    verbose\n  -d DBSNP, --dbsnp DBSNP\n                        known variants .vcf <span class=\"o\">[</span>env var: DBSNP_PATH<span class=\"o\">]</span>\n\n----------\nCommand Line Args:   --my-config config.txt f1.vcf f2.vcf\nEnvironment Variables:\n  DBSNP_PATH:        /data/dbsnp/variants_v2.vcf\nConfig File <span class=\"o\">(</span>config.txt<span class=\"o\">)</span>:\n  genome:            HCMV\n</pre>\n</div>\n<div id=\"special-values\">\n<h2>Special Values</h2>\n<p>Under the hood, configargparse handles environment variables and config file\nvalues by converting them to their corresponding command line arg. For\nexample, \u201ckey = value\u201d will be processed as if \u201c\u2013key value\u201d was specified\non the command line.</p>\n<p>Also, the following special values (whether in a config file or an environment\nvariable) are handled in a special way to support booleans and lists:</p>\n<ul>\n<li><code>key = true</code> is handled as if \u201c\u2013key\u201d was specified on the command line.\nIn your python code this key must be defined as a boolean flag\n(eg. action=\u201dstore_true\u201d or similar).</li>\n<li><code>key = [value1, value2, ...]</code> is handled as if \u201c\u2013key value1 \u2013key value2\u201d\netc. was specified on the command line. In your python code this key must\nbe defined as a list (eg. action=\u201dappend\u201d).</li>\n</ul>\n</div>\n<div id=\"config-file-syntax\">\n<h2>Config File Syntax</h2>\n<p>Only command line args that have a long version (eg. one that starts with \u2018\u2013\u2019)\ncan be set in a config file. For example, \u201c\u2013color\u201d can be set by putting\n\u201ccolor=green\u201d in a config file. The config file syntax depends on the constuctor\narg: <code>config_file_parser_class</code> which can be set to one of the provided\nclasses: <code>DefaultConfigFileParser</code>, <code>YAMLConfigFileParser</code>,\n<code>ConfigparserConfigFileParser</code> or to your own subclass of the\n<code>ConfigFileParser</code> abstract class.</p>\n<p><em>DefaultConfigFileParser</em>  - the full range of valid syntax is:</p>\n<pre><span class=\"c1\"># this is a comment</span>\n<span class=\"l-Scalar-Plain\">; this is also a comment (.ini style)</span>\n<span class=\"nn\">---</span>            <span class=\"c1\"># lines that start with --- are ignored (yaml style)</span>\n<span class=\"l-Scalar-Plain\">-------------------</span>\n<span class=\"l-Scalar-Plain\">[section]</span>      <span class=\"c1\"># .ini-style section names are treated as comments</span>\n\n<span class=\"c1\"># how to specify a key-value pair (all of these are equivalent):</span>\n<span class=\"l-Scalar-Plain\">name value</span>     <span class=\"c1\"># key is case sensitive: \"Name\" isn't \"name\"</span>\n<span class=\"l-Scalar-Plain\">name = value</span>   <span class=\"c1\"># (.ini style)  (white space is ignored, so name = value same as name=value)</span>\n<span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">value</span>    <span class=\"c1\"># (yaml style)</span>\n<span class=\"l-Scalar-Plain\">--name value</span>   <span class=\"c1\"># (argparse style)</span>\n\n<span class=\"c1\"># how to set a flag arg (eg. arg which has action=\"store_true\")</span>\n<span class=\"l-Scalar-Plain\">--name</span>\n<span class=\"l-Scalar-Plain\">name</span>\n<span class=\"l-Scalar-Plain\">name = True</span>    <span class=\"c1\"># \"True\" and \"true\" are the same</span>\n\n<span class=\"c1\"># how to specify a list arg (eg. arg which has action=\"append\")</span>\n<span class=\"l-Scalar-Plain\">fruit = [apple, orange, lemon]</span>\n<span class=\"l-Scalar-Plain\">indexes = [1, 12, 35 , 40]</span>\n</pre>\n<p><em>YAMLConfigFileParser</em>  - allows a subset of YAML syntax (<a href=\"http://goo.gl/VgT2DU\" rel=\"nofollow\">http://goo.gl/VgT2DU</a>)</p>\n<pre><span class=\"c1\"># a comment</span>\n<span class=\"nt\">name1</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">value</span>\n<span class=\"nt\">name2</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>    <span class=\"c1\"># \"True\" and \"true\" are the same</span>\n\n<span class=\"nt\">fruit</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">apple</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">orange</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">lemon</span><span class=\"p-Indicator\">]</span>\n<span class=\"nt\">indexes</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">12</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">35</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">40</span><span class=\"p-Indicator\">]</span>\n</pre>\n<p><em>ConfigparserConfigFileParser</em>  - allows a subset of python\u2019s configparser\nmodule syntax (<a href=\"https://docs.python.org/3.7/library/configparser.html\" rel=\"nofollow\">https://docs.python.org/3.7/library/configparser.html</a>). In\nparticular the following configparser options are set:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">configparser</span><span class=\"o\">.</span><span class=\"n\">ConfigParser</span><span class=\"p\">(</span>\n    <span class=\"n\">delimiters</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"=\"</span><span class=\"p\">,</span><span class=\"s2\">\":\"</span><span class=\"p\">),</span>\n    <span class=\"n\">allow_no_value</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">comment_prefixes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"#\"</span><span class=\"p\">,</span><span class=\"s2\">\";\"</span><span class=\"p\">),</span>\n    <span class=\"n\">inline_comment_prefixes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"#\"</span><span class=\"p\">,</span><span class=\"s2\">\";\"</span><span class=\"p\">),</span>\n    <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">empty_lines_in_values</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Once configparser parses the config file all section names are removed, thus all\nkeys must have unique names regardless of which INI section they are defined\nunder. Also, any keys which have python list syntax are converted to lists by\nevaluating them as python code using ast.literal_eval\n(<a href=\"https://docs.python.org/3/library/ast.html#ast.literal_eval\" rel=\"nofollow\">https://docs.python.org/3/library/ast.html#ast.literal_eval</a>). To facilitate\nthis all multi-line values are converted to single-line values. Thus multi-line\nstring values will have all new-lines converted to spaces. Note, since key-value\npairs that have python dictionary syntax are saved as single-line strings, even\nif formatted across multiple lines in the config file, dictionaries can be read\nin and converted to valid python dictionaries with PyYAML\u2019s safe_load. Example\ngiven below:</p>\n<pre><span class=\"c1\"># inside your config file (e.g. config.ini)</span>\n<span class=\"p\">[</span><span class=\"n\">section1</span><span class=\"p\">]</span>  <span class=\"c1\"># INI sections treated as comments</span>\n<span class=\"n\">system1_settings</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># start of multi-line dictionary</span>\n    <span class=\"s1\">'a'</span><span class=\"p\">:</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'b'</span><span class=\"p\">:[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">],</span>\n    <span class=\"s1\">'c'</span><span class=\"p\">:{</span><span class=\"s1\">'start'</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'stop'</span><span class=\"p\">:</span><span class=\"mi\">1000</span><span class=\"p\">},</span>\n    <span class=\"s1\">'d'</span><span class=\"p\">:</span><span class=\"s1\">'experiment 32 testing simulation with parameter a on'</span>\n    <span class=\"p\">}</span> <span class=\"c1\"># end of multi-line dictionary value</span>\n\n<span class=\"o\">.......</span>\n\n<span class=\"c1\"># in your configargparse setup</span>\n<span class=\"kn\">import</span> <span class=\"nn\">configargparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">configargparse</span><span class=\"o\">.</span><span class=\"n\">ConfigParser</span><span class=\"p\">(</span>\n    <span class=\"n\">config_file_parser_class</span><span class=\"o\">=</span><span class=\"n\">configargparse</span><span class=\"o\">.</span><span class=\"n\">ConfigparserConfigFileParser</span>\n<span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--system1_settings'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">)</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span> <span class=\"c1\"># now args.system1 is a valid python dict</span>\n</pre>\n</div>\n<div id=\"argparser-singletons\">\n<h2>ArgParser Singletons</h2>\n<p>To make it easier to configure different modules in an application,\nconfigargparse provides globally-available ArgumentParser instances\nvia configargparse.get_argument_parser(\u2018name\u2019) (similar to\nlogging.getLogger(\u2018name\u2019)).</p>\n<p>Here is an example of an application with a utils module that also\ndefines and retrieves its own command-line args.</p>\n<p><em>main.py</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">configargparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utils</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">configargparse</span><span class=\"o\">.</span><span class=\"n\">get_argument_parser</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"-x\"</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Main module setting\"</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"--m-setting\"</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Main module setting\"</span><span class=\"p\">)</span>\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse_known_args</span><span class=\"p\">()</span>   <span class=\"c1\"># using p.parse_args() here may raise errors.</span>\n</pre>\n<p><em>utils.py</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">configargparse</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">configargparse</span><span class=\"o\">.</span><span class=\"n\">get_argument_parser</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"--utils-setting\"</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Config-file-settable option for utils\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n   <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse_known_args</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"help-formatters\">\n<h2>Help Formatters</h2>\n<p><code>ArgumentDefaultsRawHelpFormatter</code> is a new HelpFormatter that both adds\ndefault values AND disables line-wrapping. It can be passed to the constructor:\n<code>ArgParser(.., formatter_class=ArgumentDefaultsRawHelpFormatter)</code></p>\n</div>\n<div id=\"aliases\">\n<h2>Aliases</h2>\n<p>The configargparse.ArgumentParser API inherits its class and method\nnames from argparse and also provides the following shorter names for\nconvenience:</p>\n<ul>\n<li>p = configargparse.get_arg_parser()  # get global singleton instance</li>\n<li>p = configargparse.get_parser()</li>\n<li>p = configargparse.ArgParser()  # create a new instance</li>\n<li>p = configargparse.Parser()</li>\n<li>p.add_arg(..)</li>\n<li>p.add(..)</li>\n<li>options = p.parse(..)</li>\n</ul>\n<p>HelpFormatters:</p>\n<ul>\n<li>RawFormatter = RawDescriptionHelpFormatter</li>\n<li>DefaultsFormatter = ArgumentDefaultsHelpFormatter</li>\n<li>DefaultsRawFormatter = ArgumentDefaultsRawHelpFormatter</li>\n</ul>\n</div>\n<div id=\"design-notes\">\n<h2>Design Notes</h2>\n<p>Unit tests:</p>\n<p>tests/test_configargparse.py contains custom unittests for features\nspecific to this module (such as config file and env-var support), as\nwell as a hook to load and run argparse unittests (see the built-in\ntest.test_argparse module) but on configargparse in place of argparse.\nThis ensures that configargparse will work as a drop in replacement for\nargparse in all usecases.</p>\n<p>Previously existing modules (PyPI search keywords: config argparse):</p>\n<ul>\n<li>argparse (built-in module Python v2.7+)<ul>\n<li>Good:<ul>\n<li>fully featured command line parsing</li>\n<li>can read args from files using an easy to understand mechanism</li>\n</ul>\n</li>\n<li>Bad:<ul>\n<li>syntax for specifying config file path is unusual (eg.\n@file.txt)and not described in the user help message.</li>\n<li>default config file syntax doesn\u2019t support comments and is\nunintuitive (eg. \u2013namevalue)</li>\n<li>no support for environment variables</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ConfArgParse v1.0.15\n(<a href=\"https://pypi.python.org/pypi/ConfArgParse\" rel=\"nofollow\">https://pypi.python.org/pypi/ConfArgParse</a>)<ul>\n<li>Good:<ul>\n<li>extends argparse with support for config files parsed by\nConfigParser</li>\n<li>clear documentation in README</li>\n</ul>\n</li>\n<li>Bad:<ul>\n<li>config file values are processed using\nArgumentParser.set_defaults(..) which means \u201crequired\u201d and\n\u201cchoices\u201d are not handled as expected. For example, if you\nspecify a required value in a config file, you still have to\nspecify it again on the command line.</li>\n<li>doesn\u2019t work with Python 3 yet</li>\n<li>no unit tests, code not well documented</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>appsettings v0.5 (<a href=\"https://pypi.python.org/pypi/appsettings\" rel=\"nofollow\">https://pypi.python.org/pypi/appsettings</a>)<ul>\n<li>Good:<ul>\n<li>supports config file (yaml format) and env_var parsing</li>\n<li>supports config-file-only setting for specifying lists and\ndicts</li>\n</ul>\n</li>\n<li>Bad:<ul>\n<li>passes in config file and env settings via parse_args\nnamespace param</li>\n<li>tests not finished and don\u2019t work with Python 3 (import\nStringIO)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>argparse_config v0.5.1\n(<a href=\"https://pypi.python.org/pypi/argparse_config\" rel=\"nofollow\">https://pypi.python.org/pypi/argparse_config</a>)<ul>\n<li>Good:<ul>\n<li>similar features to ConfArgParse v1.0.15</li>\n</ul>\n</li>\n<li>Bad:<ul>\n<li>doesn\u2019t work with Python 3 (error during pip install)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>yconf v0.3.2 - (<a href=\"https://pypi.python.org/pypi/yconf\" rel=\"nofollow\">https://pypi.python.org/pypi/yconf</a>) - features\nand interface not that great</li>\n<li>hieropt v0.3 - (<a href=\"https://pypi.python.org/pypi/hieropt\" rel=\"nofollow\">https://pypi.python.org/pypi/hieropt</a>) - doesn\u2019t\nappear to be maintained, couldn\u2019t find documentation</li>\n<li>configurati v0.2.3 - (<a href=\"https://pypi.python.org/pypi/configurati\" rel=\"nofollow\">https://pypi.python.org/pypi/configurati</a>)<ul>\n<li>Good:<ul>\n<li>JSON, YAML, or Python configuration files</li>\n<li>handles rich data structures such as dictionaries</li>\n<li>can group configuration names into sections (like .ini files)</li>\n</ul>\n</li>\n<li>Bad:<ul>\n<li>doesn\u2019t work with Python 3</li>\n<li>2+ years since last release to PyPI</li>\n<li>apparently unmaintained</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Design choices:</p>\n<ol>\n<li>all options must be settable via command line. Having options that\ncan only be set using config files or env. vars adds complexity to\nthe API, and is not a useful enough feature since the developer can\nsplit up options into sections and call a section \u201cconfig file keys\u201d,\nwith command line args that are just \u201c\u2013\u201d plus the config key.</li>\n<li>config file and env. var settings should be processed by appending\nthem to the command line (another benefit of #1). This is an\neasy-to-implement solution and implicitly takes care of checking that\nall \u201crequired\u201d args are provied, etc., plus the behavior should be\neasy for users to understand.</li>\n<li>configargparse shouldn\u2019t override argparse\u2019s\nconvert_arg_line_to_args method so that all argparse unit tests\ncan be run on configargparse.</li>\n<li>in terms of what to allow for config file keys, the \u201cdest\u201d value of\nan option can\u2019t serve as a valid config key because many options can\nhave the same dest. Instead, since multiple options can\u2019t use the\nsame long arg (eg. \u201c\u2013long-arg-x\u201d), let the config key be either\n\u201c\u2013long-arg-x\u201d or \u201clong-arg-x\u201d. This means the developer can allow\nonly a subset of the command-line args to be specified via config\nfile (eg. short args like -x would be excluded). Also, that way\nconfig keys are automatically documented whenever the command line\nargs are documented in the help message.</li>\n<li>don\u2019t force users to put config file settings in the right .ini\n[sections]. This doesn\u2019t have a clear benefit since all options are\ncommand-line settable, and so have a globally unique key anyway.\nEnforcing sections just makes things harder for the user and adds\ncomplexity to the implementation.</li>\n<li>if necessary, config-file-only args can be added later by\nimplementing a separate add method and using the namespace arg as in\nappsettings_v0.5</li>\n</ol>\n<p>Relevant sites:</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/6133517/parse-config-file-environment-and-command-line-arguments-to-get-a-single-coll\" rel=\"nofollow\">http://stackoverflow.com/questions/6133517/parse-config-file-environment-and-command-line-arguments-to-get-a-single-coll</a></li>\n<li><a href=\"http://tricksntweaks.blogspot.com/2013_05_01_archive.html\" rel=\"nofollow\">http://tricksntweaks.blogspot.com/2013_05_01_archive.html</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=vvCwqHgZJc8#t=35\" rel=\"nofollow\">http://www.youtube.com/watch?v=vvCwqHgZJc8#t=35</a></li>\n</ul>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>This software follows <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a></p>\n</div>\n\n          </div>"}, "last_serial": 7089666, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "408ad7af06cd449420cecc19bee6f0c9", "sha256": "3b50a83dd58149dfcee98cb6565265d10b53e9c0a2bca7eeef7fb5f5524890a7"}, "downloads": -1, "filename": "ConfigArgParse-0.10.0.tar.gz", "has_sig": false, "md5_digest": "408ad7af06cd449420cecc19bee6f0c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36174, "upload_time": "2015-11-09T08:03:39", "upload_time_iso_8601": "2015-11-09T08:03:39.785529Z", "url": "https://files.pythonhosted.org/packages/d0/b8/8f7689980caa66fc02671f5837dc761e4c7a47c6ca31b3e38b304cbc3e73/ConfigArgParse-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "e8cb0b30e78ab5fd013a498be9cf22b4", "sha256": "6c8ae823f6844b055f2a3aa9b51f568ed3bd7e5be9fba63abcaf4bdd38a0ac89"}, "downloads": -1, "filename": "ConfigArgParse-0.11.0.tar.gz", "has_sig": false, "md5_digest": "e8cb0b30e78ab5fd013a498be9cf22b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40863, "upload_time": "2016-09-05T01:32:33", "upload_time_iso_8601": "2016-09-05T01:32:33.603508Z", "url": "https://files.pythonhosted.org/packages/45/87/a815edcdc867de0964e5f1efef6db956bbb6fe77dbe3f273f2aeab39cbe8/ConfigArgParse-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "4dfc769542a4fe4c03a59ec0b725fdf7", "sha256": "28cd7d67669651f2a4518367838c49539457504584a139709b2b8f6c208ef339"}, "downloads": -1, "filename": "ConfigArgParse-0.12.0.tar.gz", "has_sig": false, "md5_digest": "4dfc769542a4fe4c03a59ec0b725fdf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41524, "upload_time": "2017-05-12T12:19:57", "upload_time_iso_8601": "2017-05-12T12:19:57.794489Z", "url": "https://files.pythonhosted.org/packages/17/8d/4a41f11b0971017c7001f118be8003da8f7b96b010c66cd792b76658d1e1/ConfigArgParse-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "6d3427dce78a17fb48222538f579bdb8", "sha256": "e6441aa58e23d3d122055808e5e2220fd742dff6e1e51082d2a4e4ed145dd788"}, "downloads": -1, "filename": "ConfigArgParse-0.13.0.tar.gz", "has_sig": false, "md5_digest": "6d3427dce78a17fb48222538f579bdb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31775, "upload_time": "2018-02-04T18:28:46", "upload_time_iso_8601": "2018-02-04T18:28:46.602855Z", "url": "https://files.pythonhosted.org/packages/77/61/ae928ce6ab85d4479ea198488cf5ffa371bd4ece2030c0ee85ff668deac5/ConfigArgParse-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "61dd2adf697007db19a57aa00fa6388c", "sha256": "2e2efe2be3f90577aca9415e32cb629aa2ecd92078adbe27b53a03e53ff12e91"}, "downloads": -1, "filename": "ConfigArgParse-0.14.0.tar.gz", "has_sig": false, "md5_digest": "61dd2adf697007db19a57aa00fa6388c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26847, "upload_time": "2019-01-13T16:09:06", "upload_time_iso_8601": "2019-01-13T16:09:06.403430Z", "url": "https://files.pythonhosted.org/packages/55/ea/f0ade52790bcd687127a302b26c1663bf2e0f23210d5281dbfcd1dfcda28/ConfigArgParse-0.14.0.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "d26339acaf697f6a3467f17c64453165", "sha256": "3814465df1ba684fee0d5f819afca65e57724fa63a22689a58a0643a667f37c0"}, "downloads": -1, "filename": "ConfigArgParse-0.15.tar.gz", "has_sig": false, "md5_digest": "d26339acaf697f6a3467f17c64453165", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27037, "upload_time": "2019-10-08T14:07:11", "upload_time_iso_8601": "2019-10-08T14:07:11.986776Z", "url": "https://files.pythonhosted.org/packages/38/8a/80b2ee652f8aa2058021512fa090bfecb59f6e620129685c494356f35d3d/ConfigArgParse-0.15.tar.gz", "yanked": false}], "0.15.1": [{"comment_text": "", "digests": {"md5": "aba15b7973b7a70bea86fd69289f8fe3", "sha256": "baaf0fd2c1c108d007f402dab5481ac5f12d77d034825bf5a27f8224757bd0ac"}, "downloads": -1, "filename": "ConfigArgParse-0.15.1.tar.gz", "has_sig": false, "md5_digest": "aba15b7973b7a70bea86fd69289f8fe3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27065, "upload_time": "2019-10-08T14:50:59", "upload_time_iso_8601": "2019-10-08T14:50:59.850779Z", "url": "https://files.pythonhosted.org/packages/24/f2/91071498c99fdff7bf8bddb4b981e68bb095b6204233b5d9ce6747f97836/ConfigArgParse-0.15.1.tar.gz", "yanked": false}], "0.15.2": [{"comment_text": "", "digests": {"md5": "315d1043134d6405f0f312d9c98933e8", "sha256": "558738aff623d6667aa5b85df6093ad3828867de8a82b66a6d458fb42567beb3"}, "downloads": -1, "filename": "ConfigArgParse-0.15.2.tar.gz", "has_sig": false, "md5_digest": "315d1043134d6405f0f312d9c98933e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27387, "upload_time": "2019-12-08T16:32:56", "upload_time_iso_8601": "2019-12-08T16:32:56.658975Z", "url": "https://files.pythonhosted.org/packages/ee/e2/d392af39dfe241e9fa5e9830ea1f00c077c7ae1dd6ede97cba06404c66fb/ConfigArgParse-0.15.2.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "76f691e35203e1c0c9c83b00120e0d72", "sha256": "9686cc2fbd83a313c53c143fcb8a5222bf4764f4ea7d66a773ce1e18d94e31d9"}, "downloads": -1, "filename": "ConfigArgParse-0.9.tar.gz", "has_sig": false, "md5_digest": "76f691e35203e1c0c9c83b00120e0d72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16777, "upload_time": "2014-06-25T00:22:14", "upload_time_iso_8601": "2014-06-25T00:22:14.838111Z", "url": "https://files.pythonhosted.org/packages/0a/f5/7923440cec8e830c44ddcd4185d362ebd239f9eab40b510108423b176ba8/ConfigArgParse-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "41dcadf886f2f0f84a170307f3126a46", "sha256": "1ad61967d5c7eef9005f8e92a7f363dca579ce4c3dc237e98393333914f253e4"}, "downloads": -1, "filename": "ConfigArgParse-0.9.1.tar.gz", "has_sig": false, "md5_digest": "41dcadf886f2f0f84a170307f3126a46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16872, "upload_time": "2014-06-25T01:09:48", "upload_time_iso_8601": "2014-06-25T01:09:48.854753Z", "url": "https://files.pythonhosted.org/packages/16/d9/b35fe00867051e98d328d0e5d9d2f1c79b1301f7a8cb8ea628bf5358db65/ConfigArgParse-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "8d3693313306fdae7a7e333a3db196b8", "sha256": "28d8a600b37fa7b4313a029c5ca5fb37039a29bc60f84a62aaa014b1a303b255"}, "downloads": -1, "filename": "ConfigArgParse-0.9.2.tar.gz", "has_sig": false, "md5_digest": "8d3693313306fdae7a7e333a3db196b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13080, "upload_time": "2014-08-11T03:11:17", "upload_time_iso_8601": "2014-08-11T03:11:17.366767Z", "url": "https://files.pythonhosted.org/packages/f1/04/55c031a0957ec1c535130564cf4b84d75d8227b8f4c7bb8c0f6db6fad9df/ConfigArgParse-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "69273e8099661cd12985b85d795ab73e", "sha256": "141c57112e1f8eb7e594a9820e95af897a7fa2d186cef5cff7e08cb3f7252829"}, "downloads": -1, "filename": "ConfigArgParse-0.9.3.tar.gz", "has_sig": false, "md5_digest": "69273e8099661cd12985b85d795ab73e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18983, "upload_time": "2014-08-25T00:44:56", "upload_time_iso_8601": "2014-08-25T00:44:56.717175Z", "url": "https://files.pythonhosted.org/packages/ea/1c/522da0c3bb98ea43e9cc386eaac93352bc98ae8e2c9b75df8e8c42288145/ConfigArgParse-0.9.3.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "4e6063dadbe4b44a8af5b79d1896136a", "sha256": "bf378245bc9cdc403a527e5b7406b991680c2a530e7e81af747880b54eb57133"}, "downloads": -1, "filename": "ConfigArgParse-1.0.tar.gz", "has_sig": false, "md5_digest": "4e6063dadbe4b44a8af5b79d1896136a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40653, "upload_time": "2019-12-30T05:16:30", "upload_time_iso_8601": "2019-12-30T05:16:30.084614Z", "url": "https://files.pythonhosted.org/packages/66/37/dd9fcb3b19c1dceea450ee994952e311a96dd827bb09ee19169c3427e0d3/ConfigArgParse-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "adf6863e9d5f97a3ced83d0344ece1f7", "sha256": "3e0423ddf2257e392b373ae2524a692f366a8a66452f46234e9784c233c3d98c"}, "downloads": -1, "filename": "ConfigArgParse-1.0.1.tar.gz", "has_sig": false, "md5_digest": "adf6863e9d5f97a3ced83d0344ece1f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41262, "upload_time": "2020-03-15T11:20:34", "upload_time_iso_8601": "2020-03-15T11:20:34.762850Z", "url": "https://files.pythonhosted.org/packages/14/e2/3183ce44a3b0ec270a4abbe4bb5ac90c7ec61d0f5fac10d7dfb91b9dd0bf/ConfigArgParse-1.0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "7a4671b43de35aa37b8beb061ebfa4ee", "sha256": "7971cdb14328baaada0f140832925de83ecee93ac5e67e587e3476fac283ad51"}, "downloads": -1, "filename": "ConfigArgParse-1.1.tar.gz", "has_sig": false, "md5_digest": "7a4671b43de35aa37b8beb061ebfa4ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41706, "upload_time": "2020-03-15T11:32:05", "upload_time_iso_8601": "2020-03-15T11:32:05.218781Z", "url": "https://files.pythonhosted.org/packages/88/9a/05a375c2e34992c6eb8bda11a545f65116935c30d2d7bef2bb9e606b12eb/ConfigArgParse-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "07ed0de7326b1f4635d120eab8a03057", "sha256": "024e036ff1b3fa807b826414681e3d67ffa61c692e83b320157a665dd7889f49"}, "downloads": -1, "filename": "ConfigArgParse-1.2.tar.gz", "has_sig": false, "md5_digest": "07ed0de7326b1f4635d120eab8a03057", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42579, "upload_time": "2020-04-02T08:02:04", "upload_time_iso_8601": "2020-04-02T08:02:04.118427Z", "url": "https://files.pythonhosted.org/packages/b6/28/244c7e5e0ad3319e77ad35338669af38d5b9a52733c3f5dd9644633ed1ed/ConfigArgParse-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "d71f06d965d784a802c866ac035bf7a4", "sha256": "f30736dcd4e00455ffe3087454799ccb7f9b61d765492dd4b35bbcd62379db12"}, "downloads": -1, "filename": "ConfigArgParse-1.2.1.tar.gz", "has_sig": false, "md5_digest": "d71f06d965d784a802c866ac035bf7a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42614, "upload_time": "2020-04-10T05:42:57", "upload_time_iso_8601": "2020-04-10T05:42:57.159588Z", "url": "https://files.pythonhosted.org/packages/6d/74/be92e22dac88b31adc4079134360486117de4bed4ccfa2ff9ddb2d24a570/ConfigArgParse-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "afaa5d050ab5b3897e27288402f40181", "sha256": "854ab41c36c2cccf9dddeb925c72784798864ebf8d18a89c311c212fc8e5df79"}, "downloads": -1, "filename": "ConfigArgParse-1.2.2.tar.gz", "has_sig": false, "md5_digest": "afaa5d050ab5b3897e27288402f40181", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42687, "upload_time": "2020-04-23T01:11:18", "upload_time_iso_8601": "2020-04-23T01:11:18.052141Z", "url": "https://files.pythonhosted.org/packages/30/46/ace79114945bd6ba754c8d17b22b0e7af02fd9747c48c825c9b65d5932ac/ConfigArgParse-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "8978866babc7ff0994f691ebe48b5aba", "sha256": "edd17be986d5c1ba2e307150b8e5f5107aba125f3574dddd02c85d5cdcfd37dc"}, "downloads": -1, "filename": "ConfigArgParse-1.2.3.tar.gz", "has_sig": false, "md5_digest": "8978866babc7ff0994f691ebe48b5aba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42700, "upload_time": "2020-04-24T03:43:41", "upload_time_iso_8601": "2020-04-24T03:43:41.864232Z", "url": "https://files.pythonhosted.org/packages/bb/79/3045743bb26ca2e44a1d317c37395462bfed82dbbd38e69a3280b63696ce/ConfigArgParse-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8978866babc7ff0994f691ebe48b5aba", "sha256": "edd17be986d5c1ba2e307150b8e5f5107aba125f3574dddd02c85d5cdcfd37dc"}, "downloads": -1, "filename": "ConfigArgParse-1.2.3.tar.gz", "has_sig": false, "md5_digest": "8978866babc7ff0994f691ebe48b5aba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42700, "upload_time": "2020-04-24T03:43:41", "upload_time_iso_8601": "2020-04-24T03:43:41.864232Z", "url": "https://files.pythonhosted.org/packages/bb/79/3045743bb26ca2e44a1d317c37395462bfed82dbbd38e69a3280b63696ce/ConfigArgParse-1.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:59 2020"}