{"info": {"author": "Joshua Carp", "author_email": "jm.carp@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "========\nnplusone\n========\n\n.. image:: https://img.shields.io/pypi/v/nplusone.svg\n    :target: http://badge.fury.io/py/nplusone\n    :alt: Latest version\n\n.. image:: https://img.shields.io/travis/jmcarp/nplusone/master.svg\n    :target: https://travis-ci.org/jmcarp/nplusone\n    :alt: Travis-CI\n\n.. image:: https://img.shields.io/codecov/c/github/jmcarp/nplusone/master.svg\n    :target: https://codecov.io/github/jmcarp/nplusone\n    :alt: Code coverage\n\nnplusone is a library for detecting the n+1 queries problem in Python ORMs, including SQLAlchemy, Peewee, and the Django ORM.\n\nThe Problem\n===========\n\nMany object-relational mapping (ORM) libraries default to lazy loading for relationships. This pattern can be efficient when related rows are rarely accessed, but quickly becomes inefficient as relationships are accessed more frequently. In these cases, loading related rows eagerly using a ``JOIN`` can be vastly more performant. Unfortunately, understanding when to use lazy versus eager loading can be challenging: you might not notice the problem until your app has slowed to a crawl.\n\n``nplusone`` is an ORM profiling tool to help diagnose and improve poor performance caused by inappropriate lazy loading. ``nplusone`` monitors applications using Django or SQLAlchemy and sends notifications when potentially expensive lazy loads are emitted. It can identify the offending relationship attribute and specific lines of code behind the problem, and recommend fixes for better performance.\n\n``nplusone`` also detects inappropriate eager loading for Flask-SQLAlchemy and the Django ORM, emitting a warning when related data are eagerly loaded but never accessed within the current request.\n\nInstallation\n============\n\n::\n\n    pip install -U nplusone\n\nnplusone supports Python >= 2.7 or >= 3.3.\n\nUsage\n=====\n\nNote: ``nplusone`` should only be used for development and should not be deployed to production environments.\n\nDjango\n******\n\nNote: ``nplusone`` supports Django >= 1.8.\n\nAdd ``nplusone`` to ``INSTALLED_APPS``: ::\n\n    INSTALLED_APPS = (\n        ...\n        'nplusone.ext.django',\n    )\n\nAdd ``NPlusOneMiddleware``: ::\n\n    MIDDLEWARE = (\n        'nplusone.ext.django.NPlusOneMiddleware',\n        ...\n    )\n\nOptionally configure logging settings: ::\n\n    NPLUSONE_LOGGER = logging.getLogger('nplusone')\n    NPLUSONE_LOG_LEVEL = logging.WARN\n\nConfigure logging handlers: ::\n\n    LOGGING = {\n        'version': 1,\n        'handlers': {\n            'console': {\n                'class': 'logging.StreamHandler',\n            },\n        },\n        'loggers': {\n            'nplusone': {\n                'handlers': ['console'],\n                'level': 'WARN',\n            },\n        },\n    }\n\nWhen your app loads data lazily, ``nplusone`` will emit a log message: ::\n\n    Potential n+1 query detected on `<model>.<field>`\n\nConsider using `select_related <https://docs.djangoproject.com/en/1.8/ref/models/querysets/#select-related>`_ or `prefetch_related <https://docs.djangoproject.com/en/1.8/ref/models/querysets/#prefetch-related>`_ in this case.\n\nWhen your app eagerly loads related data without accessing it, ``nplusone`` will log a warning: ::\n\n    Potential unnecessary eager load detected on `<model>.<field>`\n\nFlask-SQLAlchemy\n****************\n\nWrap application with ``NPlusOne``: ::\n\n    from flask import Flask\n    from nplusone.ext.flask_sqlalchemy import NPlusOne\n\n    app = Flask(__name__)\n    NPlusOne(app)\n\nOptionally configure logging settings: ::\n\n    app = Flask(__name__)\n    app.config['NPLUSONE_LOGGER'] = logging.getLogger('app.nplusone')\n    app.config['NPLUSONE_LOG_LEVEL'] = logging.ERROR\n    NPlusOne(app)\n\nWhen your app loads data lazily, ``nplusone`` will emit a log message: ::\n\n    Potential n+1 query detected on `<model>.<field>`\n\nConsider using ``subqueryload`` or ``joinedload`` in this case; see SQLAlchemy's guide to `relationship loading <http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html>`_ for complete documentation.\n\nWhen your app eagerly loads related data without accessing it, ``nplusone`` will log a warning: ::\n\n    Potential unnecessary eager load detected on `<model>.<field>`\n\nWSGI\n****\n\nFor other frameworks that follow the WSGI specification, wrap your application with `NPlusOneMiddleware`. You must also import the relevant ``nplusone`` extension for your ORM: ::\n\n    import bottle\n    from nplusone.ext.wsgi import NPlusOneMiddleware\n    import nplusone.ext.sqlalchemy\n\n    app = NPlusOneMiddleware(bottle.app())\n\nGeneric\n*******\n\nThe integrations above are coupled to the request-response cycle. To use ``nplusone`` outside the context of an HTTP request, use the ``Profiler`` context manager: You must also import the relevant ``nplusone`` extension for your ORM: ::\n\n    from nplusone.core import profiler\n    import nplusone.ext.sqlalchemy\n\n    with profiler.Profiler():\n        ...\n\nCustomizing notifications\n*************************\n\nBy default, ``nplusone`` logs all potentially unnecessary queries using a logger named \"nplusone\". When the `NPLUSONE_RAISE` configuration option is set, ``nplusone`` will also raise an ``NPlusOneError``. This can be used to force all automated tests involving unnecessary queries to fail. ::\n\n    # Django config\n    NPLUSONE_RAISE = True\n\n    # Flask config\n    app.config['NPLUSONE_RAISE'] = True\n\nThe exception type can also be specified, if desired, using the ``NPLUSONE_ERROR`` option.\n\nIgnoring notifications\n**********************\n\nTo ignore notifications from ``nplusone`` globally, configure the whitelist using the `NPLUSONE_WHITELIST` option: ::\n\n    # Django config\n    NPLUSONE_WHITELIST = [\n        {'label': 'n_plus_one', 'model': 'myapp.MyModel'}\n    ]\n\n    # Flask-SQLAlchemy config\n    app.config['NPLUSONE_WHITELIST'] = [\n        {'label': 'unused_eager_load', 'model': 'MyModel', 'field': 'my_field'}\n    ]\n\nYou can whitelist models by exact name or by `fnmatch <https://docs.python.org/3/library/fnmatch.html>`_ patterns: ::\n\n    # Django config\n    NPLUSONE_WHITELIST = [\n        {'model': 'myapp.*'}\n    ]\n\nTo suppress notifications locally, use the ``ignore`` context manager: ::\n\n    from nplusone.core import signals\n\n    with signals.ignore(signals.lazy_load):\n        # lazy-load rows\n        # ...\n\nLicense\n=======\n\nMIT licensed. See the bundled `LICENSE <https://github.com/jmcarp/nplusone/blob/master/LICENSE>`_ file for more details.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/trialspark/nplusone", "keywords": "nplusone", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nplusone-TrialSpark", "package_url": "https://pypi.org/project/nplusone-TrialSpark/", "platform": "", "project_url": "https://pypi.org/project/nplusone-TrialSpark/", "project_urls": {"Homepage": "https://github.com/trialspark/nplusone"}, "release_url": "https://pypi.org/project/nplusone-TrialSpark/1.0.3/", "requires_dist": ["six (>=1.9.0)", "blinker (>=1.3)", "structlog (>=18.2.0)"], "requires_python": "", "summary": "Detecting the n+1 queries problem in Python", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://badge.fury.io/py/nplusone\" rel=\"nofollow\"><img alt=\"Latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d09ed7a5fac6082083635d908394a51b309e2f2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e706c75736f6e652e737667\"></a>\n<a href=\"https://travis-ci.org/jmcarp/nplusone\" rel=\"nofollow\"><img alt=\"Travis-CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e53c6e2d330cc632c12a00bca7f118f549ad215/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6a6d636172702f6e706c75736f6e652f6d61737465722e737667\"></a>\n<a href=\"https://codecov.io/github/jmcarp/nplusone\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5eac127f4d024542d2cc9c1117e4f4ecd4ebfcb4/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6a6d636172702f6e706c75736f6e652f6d61737465722e737667\"></a>\n<p>nplusone is a library for detecting the n+1 queries problem in Python ORMs, including SQLAlchemy, Peewee, and the Django ORM.</p>\n<div id=\"the-problem\">\n<h2>The Problem</h2>\n<p>Many object-relational mapping (ORM) libraries default to lazy loading for relationships. This pattern can be efficient when related rows are rarely accessed, but quickly becomes inefficient as relationships are accessed more frequently. In these cases, loading related rows eagerly using a <tt>JOIN</tt> can be vastly more performant. Unfortunately, understanding when to use lazy versus eager loading can be challenging: you might not notice the problem until your app has slowed to a crawl.</p>\n<p><tt>nplusone</tt> is an ORM profiling tool to help diagnose and improve poor performance caused by inappropriate lazy loading. <tt>nplusone</tt> monitors applications using Django or SQLAlchemy and sends notifications when potentially expensive lazy loads are emitted. It can identify the offending relationship attribute and specific lines of code behind the problem, and recommend fixes for better performance.</p>\n<p><tt>nplusone</tt> also detects inappropriate eager loading for Flask-SQLAlchemy and the Django ORM, emitting a warning when related data are eagerly loaded but never accessed within the current request.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install -U nplusone\n</pre>\n<p>nplusone supports Python &gt;= 2.7 or &gt;= 3.3.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Note: <tt>nplusone</tt> should only be used for development and should not be deployed to production environments.</p>\n<div id=\"django\">\n<h3>Django</h3>\n<p>Note: <tt>nplusone</tt> supports Django &gt;= 1.8.</p>\n<p>Add <tt>nplusone</tt> to <tt>INSTALLED_APPS</tt>:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'nplusone.ext.django',\n)\n</pre>\n<p>Add <tt>NPlusOneMiddleware</tt>:</p>\n<pre>MIDDLEWARE = (\n    'nplusone.ext.django.NPlusOneMiddleware',\n    ...\n)\n</pre>\n<p>Optionally configure logging settings:</p>\n<pre>NPLUSONE_LOGGER = logging.getLogger('nplusone')\nNPLUSONE_LOG_LEVEL = logging.WARN\n</pre>\n<p>Configure logging handlers:</p>\n<pre>LOGGING = {\n    'version': 1,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'nplusone': {\n            'handlers': ['console'],\n            'level': 'WARN',\n        },\n    },\n}\n</pre>\n<p>When your app loads data lazily, <tt>nplusone</tt> will emit a log message:</p>\n<pre>Potential n+1 query detected on `&lt;model&gt;.&lt;field&gt;`\n</pre>\n<p>Consider using <a href=\"https://docs.djangoproject.com/en/1.8/ref/models/querysets/#select-related\" rel=\"nofollow\">select_related</a> or <a href=\"https://docs.djangoproject.com/en/1.8/ref/models/querysets/#prefetch-related\" rel=\"nofollow\">prefetch_related</a> in this case.</p>\n<p>When your app eagerly loads related data without accessing it, <tt>nplusone</tt> will log a warning:</p>\n<pre>Potential unnecessary eager load detected on `&lt;model&gt;.&lt;field&gt;`\n</pre>\n</div>\n<div id=\"flask-sqlalchemy\">\n<h3>Flask-SQLAlchemy</h3>\n<p>Wrap application with <tt>NPlusOne</tt>:</p>\n<pre>from flask import Flask\nfrom nplusone.ext.flask_sqlalchemy import NPlusOne\n\napp = Flask(__name__)\nNPlusOne(app)\n</pre>\n<p>Optionally configure logging settings:</p>\n<pre>app = Flask(__name__)\napp.config['NPLUSONE_LOGGER'] = logging.getLogger('app.nplusone')\napp.config['NPLUSONE_LOG_LEVEL'] = logging.ERROR\nNPlusOne(app)\n</pre>\n<p>When your app loads data lazily, <tt>nplusone</tt> will emit a log message:</p>\n<pre>Potential n+1 query detected on `&lt;model&gt;.&lt;field&gt;`\n</pre>\n<p>Consider using <tt>subqueryload</tt> or <tt>joinedload</tt> in this case; see SQLAlchemy\u2019s guide to <a href=\"http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html\" rel=\"nofollow\">relationship loading</a> for complete documentation.</p>\n<p>When your app eagerly loads related data without accessing it, <tt>nplusone</tt> will log a warning:</p>\n<pre>Potential unnecessary eager load detected on `&lt;model&gt;.&lt;field&gt;`\n</pre>\n</div>\n<div id=\"wsgi\">\n<h3>WSGI</h3>\n<p>For other frameworks that follow the WSGI specification, wrap your application with <cite>NPlusOneMiddleware</cite>. You must also import the relevant <tt>nplusone</tt> extension for your ORM:</p>\n<pre>import bottle\nfrom nplusone.ext.wsgi import NPlusOneMiddleware\nimport nplusone.ext.sqlalchemy\n\napp = NPlusOneMiddleware(bottle.app())\n</pre>\n</div>\n<div id=\"generic\">\n<h3>Generic</h3>\n<p>The integrations above are coupled to the request-response cycle. To use <tt>nplusone</tt> outside the context of an HTTP request, use the <tt>Profiler</tt> context manager: You must also import the relevant <tt>nplusone</tt> extension for your ORM:</p>\n<pre>from nplusone.core import profiler\nimport nplusone.ext.sqlalchemy\n\nwith profiler.Profiler():\n    ...\n</pre>\n</div>\n<div id=\"customizing-notifications\">\n<h3>Customizing notifications</h3>\n<p>By default, <tt>nplusone</tt> logs all potentially unnecessary queries using a logger named \u201cnplusone\u201d. When the <cite>NPLUSONE_RAISE</cite> configuration option is set, <tt>nplusone</tt> will also raise an <tt>NPlusOneError</tt>. This can be used to force all automated tests involving unnecessary queries to fail.</p>\n<pre># Django config\nNPLUSONE_RAISE = True\n\n# Flask config\napp.config['NPLUSONE_RAISE'] = True\n</pre>\n<p>The exception type can also be specified, if desired, using the <tt>NPLUSONE_ERROR</tt> option.</p>\n</div>\n<div id=\"ignoring-notifications\">\n<h3>Ignoring notifications</h3>\n<p>To ignore notifications from <tt>nplusone</tt> globally, configure the whitelist using the <cite>NPLUSONE_WHITELIST</cite> option:</p>\n<pre># Django config\nNPLUSONE_WHITELIST = [\n    {'label': 'n_plus_one', 'model': 'myapp.MyModel'}\n]\n\n# Flask-SQLAlchemy config\napp.config['NPLUSONE_WHITELIST'] = [\n    {'label': 'unused_eager_load', 'model': 'MyModel', 'field': 'my_field'}\n]\n</pre>\n<p>You can whitelist models by exact name or by <a href=\"https://docs.python.org/3/library/fnmatch.html\" rel=\"nofollow\">fnmatch</a> patterns:</p>\n<pre># Django config\nNPLUSONE_WHITELIST = [\n    {'model': 'myapp.*'}\n]\n</pre>\n<p>To suppress notifications locally, use the <tt>ignore</tt> context manager:</p>\n<pre>from nplusone.core import signals\n\nwith signals.ignore(signals.lazy_load):\n    # lazy-load rows\n    # ...\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT licensed. See the bundled <a href=\"https://github.com/jmcarp/nplusone/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 6691147, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ebaa49beb5b2b1c6152878831a46e8e8", "sha256": "ae2a70192803e475b7518b615b6eb25fa528e71536bbc8072ff8b77c9626bdcf"}, "downloads": -1, "filename": "nplusone_TrialSpark-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ebaa49beb5b2b1c6152878831a46e8e8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16633, "upload_time": "2020-01-22T15:03:46", "upload_time_iso_8601": "2020-01-22T15:03:46.754735Z", "url": "https://files.pythonhosted.org/packages/ab/6d/ece4a9c759eefa2c591814e0777612765743527a182e1313dca091c00074/nplusone_TrialSpark-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3441141fb63b1648eae3695b722d4ca", "sha256": "3c23ed8e5e04c203225731a824ec14d70596d196bad6b3de43ae894316bf9020"}, "downloads": -1, "filename": "nplusone-TrialSpark-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f3441141fb63b1648eae3695b722d4ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15455, "upload_time": "2020-01-22T15:03:49", "upload_time_iso_8601": "2020-01-22T15:03:49.103627Z", "url": "https://files.pythonhosted.org/packages/33/6e/d957eef782fcb03337bdf65c32d1d5123a158932e0cbaf193e2f94a0fdd0/nplusone-TrialSpark-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2314d8bff5708084b80d308b3dd38ed5", "sha256": "28bb428c92584a92735cd5afed1b8028ba852408c059eb6a3ca5f08420c78c3e"}, "downloads": -1, "filename": "nplusone_TrialSpark-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2314d8bff5708084b80d308b3dd38ed5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16917, "upload_time": "2020-01-24T17:27:37", "upload_time_iso_8601": "2020-01-24T17:27:37.359163Z", "url": "https://files.pythonhosted.org/packages/70/b5/d4f592704bc310d974b6329e0b85bff76075f851effa9146e97b041dd5ad/nplusone_TrialSpark-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28d0f1113f778b108b8ccbed48845e39", "sha256": "76b1641eb39aad2f1ca2cc9ee7dbf815fe4a58a06a7fca921d899c0632e87dca"}, "downloads": -1, "filename": "nplusone-TrialSpark-1.0.1.tar.gz", "has_sig": false, "md5_digest": "28d0f1113f778b108b8ccbed48845e39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15756, "upload_time": "2020-01-24T17:27:39", "upload_time_iso_8601": "2020-01-24T17:27:39.154516Z", "url": "https://files.pythonhosted.org/packages/0c/be/c34e2618b5b69df0e23c54a959000134f725cd2fbfd0d51b4db653802676/nplusone-TrialSpark-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bba9730a72d2bfa41d6f4967eceb9464", "sha256": "13d5a5d0717e52a0e04349483136c5eb72b4dcf500787d23750ea532bb749611"}, "downloads": -1, "filename": "nplusone_TrialSpark-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bba9730a72d2bfa41d6f4967eceb9464", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17011, "upload_time": "2020-02-24T19:21:09", "upload_time_iso_8601": "2020-02-24T19:21:09.606653Z", "url": "https://files.pythonhosted.org/packages/04/0f/0f4f97e3961a0c7b7c9117cb98d3f5e84e8402fbbf2446218dd08f3e8404/nplusone_TrialSpark-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "432ce2ea907b1b7c9dc4d1d3238eb800", "sha256": "ac659e37718cacccb51152dddb54f0a6aa54e2e8616b54d6a4752a7cb8406b9d"}, "downloads": -1, "filename": "nplusone-TrialSpark-1.0.2.tar.gz", "has_sig": false, "md5_digest": "432ce2ea907b1b7c9dc4d1d3238eb800", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16615, "upload_time": "2020-02-24T19:21:11", "upload_time_iso_8601": "2020-02-24T19:21:11.310779Z", "url": "https://files.pythonhosted.org/packages/c3/bb/9ea5dd1a1146abd8325b5e90df95bc16f1e590745a0d481c6e4f42edde95/nplusone-TrialSpark-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5306f200ee8f7827dd1fcc49dcdada9f", "sha256": "28877cba716affae66305f4e85ef76060d394c0aae2060e7d66c5584f4c1c7c9"}, "downloads": -1, "filename": "nplusone_TrialSpark-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5306f200ee8f7827dd1fcc49dcdada9f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16988, "upload_time": "2020-02-24T19:29:35", "upload_time_iso_8601": "2020-02-24T19:29:35.761893Z", "url": "https://files.pythonhosted.org/packages/c0/32/32832435d1e845b300e9473fe41ddd9c1a53206d8839f4b43dfe18971425/nplusone_TrialSpark-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96b8c9132db88ac2acdf79af417d4d49", "sha256": "6b7ffb69a41850bf62a5d6dc9c27918a304ef45ca8e5b9f578d2e62fc938d439"}, "downloads": -1, "filename": "nplusone-TrialSpark-1.0.3.tar.gz", "has_sig": false, "md5_digest": "96b8c9132db88ac2acdf79af417d4d49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16592, "upload_time": "2020-02-24T19:29:38", "upload_time_iso_8601": "2020-02-24T19:29:38.492361Z", "url": "https://files.pythonhosted.org/packages/f9/cf/c2a3fade2be81e8fb49ac7c4ff2f8deb964d22c428b506169520fe6042fd/nplusone-TrialSpark-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5306f200ee8f7827dd1fcc49dcdada9f", "sha256": "28877cba716affae66305f4e85ef76060d394c0aae2060e7d66c5584f4c1c7c9"}, "downloads": -1, "filename": "nplusone_TrialSpark-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5306f200ee8f7827dd1fcc49dcdada9f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16988, "upload_time": "2020-02-24T19:29:35", "upload_time_iso_8601": "2020-02-24T19:29:35.761893Z", "url": "https://files.pythonhosted.org/packages/c0/32/32832435d1e845b300e9473fe41ddd9c1a53206d8839f4b43dfe18971425/nplusone_TrialSpark-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96b8c9132db88ac2acdf79af417d4d49", "sha256": "6b7ffb69a41850bf62a5d6dc9c27918a304ef45ca8e5b9f578d2e62fc938d439"}, "downloads": -1, "filename": "nplusone-TrialSpark-1.0.3.tar.gz", "has_sig": false, "md5_digest": "96b8c9132db88ac2acdf79af417d4d49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16592, "upload_time": "2020-02-24T19:29:38", "upload_time_iso_8601": "2020-02-24T19:29:38.492361Z", "url": "https://files.pythonhosted.org/packages/f9/cf/c2a3fade2be81e8fb49ac7c4ff2f8deb964d22c428b506169520fe6042fd/nplusone-TrialSpark-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:32 2020"}