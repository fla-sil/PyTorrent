{"info": {"author": "My Username", "author_email": "myusername@example.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Topic :: Games/Entertainment :: Puzzle Games"], "description": "advent-of-code-sample:\n----------------------\n\nProvides a working example plugin structure for using the `aoc` runner script provided by [advent-of-code-data](https://github.com/wimglenn/advent-of-code-data).\n\nThe `aoc` runner allows you to easily verify your [Advent of Code](https://adventofcode.com/) solutions against multiple datasets, or verify other user's code against your own dataset.\n\n```bash\n$ cat ~/.config/aocd/tokens.json  # create this file with some auth tokens\n{\n    \"github\": \"53616c7465645f5f0775...\",\n    \"google\": \"53616c7465645f5f7238...\",\n    \"reddit\": \"53616c7465645f5ff7c8...\",\n    \"twitter\": \"53616c7465645f5fa524...\"\n}\n$ pip install ~/src/advent-of-code-sample  # install the directory which contains your setup.py file\n...\n$ pip install -q advent-of-code-wim  # can also install some other user's code if you want..?\n...\n$ aoc --years 2015 --days 3 4 11    # run it!\n   0.25s   2015/3  - Perfectly Spherical Houses in a Vacuum            wim/github    \u2714 part a: 2565                             \u2714 part b: 2639\n   0.11s   2015/3  - Perfectly Spherical Houses in a Vacuum            wim/google    \u2714 part a: 2592                             \u2714 part b: 2360\n   0.12s   2015/3  - Perfectly Spherical Houses in a Vacuum            wim/reddit    \u2714 part a: 2592                             \u2714 part b: 2360\n   0.12s   2015/3  - Perfectly Spherical Houses in a Vacuum            wim/twitter   \u2714 part a: 2565                             \u2714 part b: 2639\n   0.12s   2015/3  - Perfectly Spherical Houses in a Vacuum     myusername/github    \u2716 part a: 1234 (expected: 2565)            \u2716 part b: 5678 (expected: 2639)\n   0.12s   2015/3  - Perfectly Spherical Houses in a Vacuum     myusername/google    \u2716 part a: 1234 (expected: 2592)            \u2716 part b: 5678 (expected: 2360)\n   0.11s   2015/3  - Perfectly Spherical Houses in a Vacuum     myusername/reddit    \u2716 part a: 1234 (expected: 2592)            \u2716 part b: 5678 (expected: 2360)\n   0.11s   2015/3  - Perfectly Spherical Houses in a Vacuum     myusername/twitter   \u2716 part a: 1234 (expected: 2565)            \u2716 part b: 5678 (expected: 2639)\n   9.04s   2015/4  - The Ideal Stocking Stuffer                        wim/github    \u2714 part a: 254575                           \u2714 part b: 1038736\n  25.43s   2015/4  - The Ideal Stocking Stuffer                        wim/google    \u2714 part a: 117946                           \u2714 part b: 3938038\n  12.20s   2015/4  - The Ideal Stocking Stuffer                        wim/reddit    \u2714 part a: 254575                           \u2714 part b: 1038736\n  47.67s   2015/4  - The Ideal Stocking Stuffer                        wim/twitter   \u2714 part a: 282749                           \u2714 part b: 9962624\n   0.12s   2015/4  - The Ideal Stocking Stuffer                 myusername/github    \u2716 part a: 1234 (expected: 254575)          \u2716 part b: 5678 (expected: 1038736)\n   0.12s   2015/4  - The Ideal Stocking Stuffer                 myusername/google    \u2716 part a: 1234 (expected: 117946)          \u2716 part b: 5678 (expected: 3938038)\n   0.12s   2015/4  - The Ideal Stocking Stuffer                 myusername/reddit    \u2716 part a: 1234 (expected: 254575)          \u2716 part b: 5678 (expected: 1038736)\n   0.12s   2015/4  - The Ideal Stocking Stuffer                 myusername/twitter   \u2716 part a: 1234 (expected: 282749)          \u2716 part b: 5678 (expected: 9962624)\n   6.17s   2015/11 - Corporate Policy                                  wim/github    \u2714 part a: vzbxxyzz                         \u2714 part b: vzcaabcc\n   6.26s   2015/11 - Corporate Policy                                  wim/google    \u2714 part a: cqjxxyzz                         \u2714 part b: cqkaabcc\n   4.69s   2015/11 - Corporate Policy                                  wim/reddit    \u2714 part a: hxbxxyzz                         \u2714 part b: hxcaabcc\n   5.75s   2015/11 - Corporate Policy                                  wim/twitter   \u2714 part a: hxbxxyzz                         \u2714 part b: hxcaabcc\n   0.11s   2015/11 - Corporate Policy                           myusername/github    \u2716 part a: 1234 (expected: vzbxxyzz)        \u2716 part b: 5678 (expected: vzcaabcc)\n   0.12s   2015/11 - Corporate Policy                           myusername/google    \u2716 part a: 1234 (expected: cqjxxyzz)        \u2716 part b: 5678 (expected: cqkaabcc)\n   0.11s   2015/11 - Corporate Policy                           myusername/reddit    \u2716 part a: 1234 (expected: hxbxxyzz)        \u2716 part b: 5678 (expected: hxcaabcc)\n   0.12s   2015/11 - Corporate Policy                           myusername/twitter   \u2716 part a: 1234 (expected: hxbxxyzz)        \u2716 part b: 5678 (expected: hxcaabcc)\n```\n\nHow to hook into your code:\n---------------------------\n\nThe `aoc` runner uses setuptools' [dynamic discovery of services and plugins](https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins) feature to locate and run your code.\nDefine your plugin's entry point in `setup.py`. The group name to use is \"adventofcode.user\":\n\n```python\n# setup.py\nfrom setuptools import setup\n\nsetup(\n    ...\n    entry_points={\"adventofcode.user\": [\"myusername = mypackage:mysolve\"]},\n)\n```\n\nChange `mypackage` to whatever package or module name is used to import your stuff.\nThe name `mysolve` should resolve to a callable in your package's namespace which accepts three named arguments `year`, `day`, `data` (any order ok) and returns two values, e.g.:\n\n```python\ndef mysolve(year, day, data):\n    ...\n    return part_a_answer, part_b_answer\n```\n\nInside the entry-point you can do whatever you need in order to delegate to your code. For example, write out data to a scratch file then run a script, or import a function and just pass in the data directly as an argument.\nThe only requirement is that this entry-point should return a tuple of two values, with the answers for that day's puzzle, the rest is up to you.\nYou could fork this repo and edit it, or just write your own plugin manually.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/myusername/advent-of-code-myusername", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "advent-of-code-sample", "package_url": "https://pypi.org/project/advent-of-code-sample/", "platform": "", "project_url": "https://pypi.org/project/advent-of-code-sample/", "project_urls": {"Homepage": "https://github.com/myusername/advent-of-code-myusername"}, "release_url": "https://pypi.org/project/advent-of-code-sample/0.1/", "requires_dist": ["advent-of-code-data (>=0.8.0)"], "requires_python": "", "summary": "myusername's solutions for https://adventofcode.com/", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>advent-of-code-sample:</h2>\n<p>Provides a working example plugin structure for using the <code>aoc</code> runner script provided by <a href=\"https://github.com/wimglenn/advent-of-code-data\" rel=\"nofollow\">advent-of-code-data</a>.</p>\n<p>The <code>aoc</code> runner allows you to easily verify your <a href=\"https://adventofcode.com/\" rel=\"nofollow\">Advent of Code</a> solutions against multiple datasets, or verify other user's code against your own dataset.</p>\n<pre>$ cat ~/.config/aocd/tokens.json  <span class=\"c1\"># create this file with some auth tokens</span>\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"github\"</span>: <span class=\"s2\">\"53616c7465645f5f0775...\"</span>,\n    <span class=\"s2\">\"google\"</span>: <span class=\"s2\">\"53616c7465645f5f7238...\"</span>,\n    <span class=\"s2\">\"reddit\"</span>: <span class=\"s2\">\"53616c7465645f5ff7c8...\"</span>,\n    <span class=\"s2\">\"twitter\"</span>: <span class=\"s2\">\"53616c7465645f5fa524...\"</span>\n<span class=\"o\">}</span>\n$ pip install ~/src/advent-of-code-sample  <span class=\"c1\"># install the directory which contains your setup.py file</span>\n...\n$ pip install -q advent-of-code-wim  <span class=\"c1\"># can also install some other user's code if you want..?</span>\n...\n$ aoc --years <span class=\"m\">2015</span> --days <span class=\"m\">3</span> <span class=\"m\">4</span> <span class=\"m\">11</span>    <span class=\"c1\"># run it!</span>\n   <span class=\"m\">0</span>.25s   <span class=\"m\">2015</span>/3  - Perfectly Spherical Houses in a Vacuum            wim/github    \u2714 part a: <span class=\"m\">2565</span>                             \u2714 part b: <span class=\"m\">2639</span>\n   <span class=\"m\">0</span>.11s   <span class=\"m\">2015</span>/3  - Perfectly Spherical Houses in a Vacuum            wim/google    \u2714 part a: <span class=\"m\">2592</span>                             \u2714 part b: <span class=\"m\">2360</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/3  - Perfectly Spherical Houses in a Vacuum            wim/reddit    \u2714 part a: <span class=\"m\">2592</span>                             \u2714 part b: <span class=\"m\">2360</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/3  - Perfectly Spherical Houses in a Vacuum            wim/twitter   \u2714 part a: <span class=\"m\">2565</span>                             \u2714 part b: <span class=\"m\">2639</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/3  - Perfectly Spherical Houses in a Vacuum     myusername/github    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: <span class=\"m\">2565</span><span class=\"o\">)</span>            \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: <span class=\"m\">2639</span><span class=\"o\">)</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/3  - Perfectly Spherical Houses in a Vacuum     myusername/google    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: <span class=\"m\">2592</span><span class=\"o\">)</span>            \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: <span class=\"m\">2360</span><span class=\"o\">)</span>\n   <span class=\"m\">0</span>.11s   <span class=\"m\">2015</span>/3  - Perfectly Spherical Houses in a Vacuum     myusername/reddit    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: <span class=\"m\">2592</span><span class=\"o\">)</span>            \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: <span class=\"m\">2360</span><span class=\"o\">)</span>\n   <span class=\"m\">0</span>.11s   <span class=\"m\">2015</span>/3  - Perfectly Spherical Houses in a Vacuum     myusername/twitter   \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: <span class=\"m\">2565</span><span class=\"o\">)</span>            \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: <span class=\"m\">2639</span><span class=\"o\">)</span>\n   <span class=\"m\">9</span>.04s   <span class=\"m\">2015</span>/4  - The Ideal Stocking Stuffer                        wim/github    \u2714 part a: <span class=\"m\">254575</span>                           \u2714 part b: <span class=\"m\">1038736</span>\n  <span class=\"m\">25</span>.43s   <span class=\"m\">2015</span>/4  - The Ideal Stocking Stuffer                        wim/google    \u2714 part a: <span class=\"m\">117946</span>                           \u2714 part b: <span class=\"m\">3938038</span>\n  <span class=\"m\">12</span>.20s   <span class=\"m\">2015</span>/4  - The Ideal Stocking Stuffer                        wim/reddit    \u2714 part a: <span class=\"m\">254575</span>                           \u2714 part b: <span class=\"m\">1038736</span>\n  <span class=\"m\">47</span>.67s   <span class=\"m\">2015</span>/4  - The Ideal Stocking Stuffer                        wim/twitter   \u2714 part a: <span class=\"m\">282749</span>                           \u2714 part b: <span class=\"m\">9962624</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/4  - The Ideal Stocking Stuffer                 myusername/github    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: <span class=\"m\">254575</span><span class=\"o\">)</span>          \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: <span class=\"m\">1038736</span><span class=\"o\">)</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/4  - The Ideal Stocking Stuffer                 myusername/google    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: <span class=\"m\">117946</span><span class=\"o\">)</span>          \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: <span class=\"m\">3938038</span><span class=\"o\">)</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/4  - The Ideal Stocking Stuffer                 myusername/reddit    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: <span class=\"m\">254575</span><span class=\"o\">)</span>          \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: <span class=\"m\">1038736</span><span class=\"o\">)</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/4  - The Ideal Stocking Stuffer                 myusername/twitter   \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: <span class=\"m\">282749</span><span class=\"o\">)</span>          \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: <span class=\"m\">9962624</span><span class=\"o\">)</span>\n   <span class=\"m\">6</span>.17s   <span class=\"m\">2015</span>/11 - Corporate Policy                                  wim/github    \u2714 part a: vzbxxyzz                         \u2714 part b: vzcaabcc\n   <span class=\"m\">6</span>.26s   <span class=\"m\">2015</span>/11 - Corporate Policy                                  wim/google    \u2714 part a: cqjxxyzz                         \u2714 part b: cqkaabcc\n   <span class=\"m\">4</span>.69s   <span class=\"m\">2015</span>/11 - Corporate Policy                                  wim/reddit    \u2714 part a: hxbxxyzz                         \u2714 part b: hxcaabcc\n   <span class=\"m\">5</span>.75s   <span class=\"m\">2015</span>/11 - Corporate Policy                                  wim/twitter   \u2714 part a: hxbxxyzz                         \u2714 part b: hxcaabcc\n   <span class=\"m\">0</span>.11s   <span class=\"m\">2015</span>/11 - Corporate Policy                           myusername/github    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: vzbxxyzz<span class=\"o\">)</span>        \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: vzcaabcc<span class=\"o\">)</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/11 - Corporate Policy                           myusername/google    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: cqjxxyzz<span class=\"o\">)</span>        \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: cqkaabcc<span class=\"o\">)</span>\n   <span class=\"m\">0</span>.11s   <span class=\"m\">2015</span>/11 - Corporate Policy                           myusername/reddit    \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: hxbxxyzz<span class=\"o\">)</span>        \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: hxcaabcc<span class=\"o\">)</span>\n   <span class=\"m\">0</span>.12s   <span class=\"m\">2015</span>/11 - Corporate Policy                           myusername/twitter   \u2716 part a: <span class=\"m\">1234</span> <span class=\"o\">(</span>expected: hxbxxyzz<span class=\"o\">)</span>        \u2716 part b: <span class=\"m\">5678</span> <span class=\"o\">(</span>expected: hxcaabcc<span class=\"o\">)</span>\n</pre>\n<h2>How to hook into your code:</h2>\n<p>The <code>aoc</code> runner uses setuptools' <a href=\"https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins\" rel=\"nofollow\">dynamic discovery of services and plugins</a> feature to locate and run your code.\nDefine your plugin's entry point in <code>setup.py</code>. The group name to use is \"adventofcode.user\":</p>\n<pre><span class=\"c1\"># setup.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"adventofcode.user\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"myusername = mypackage:mysolve\"</span><span class=\"p\">]},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Change <code>mypackage</code> to whatever package or module name is used to import your stuff.\nThe name <code>mysolve</code> should resolve to a callable in your package's namespace which accepts three named arguments <code>year</code>, <code>day</code>, <code>data</code> (any order ok) and returns two values, e.g.:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">mysolve</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">part_a_answer</span><span class=\"p\">,</span> <span class=\"n\">part_b_answer</span>\n</pre>\n<p>Inside the entry-point you can do whatever you need in order to delegate to your code. For example, write out data to a scratch file then run a script, or import a function and just pass in the data directly as an argument.\nThe only requirement is that this entry-point should return a tuple of two values, with the answers for that day's puzzle, the rest is up to you.\nYou could fork this repo and edit it, or just write your own plugin manually.</p>\n\n          </div>"}, "last_serial": 4773324, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "fc7ea8cfdc3e54c93a4556b51e17aeb8", "sha256": "cf0fd2642c47058e362bb6fdce3a84f812b9e83ce91bb9842c48a8474a7add68"}, "downloads": -1, "filename": "advent_of_code_sample-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc7ea8cfdc3e54c93a4556b51e17aeb8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4980, "upload_time": "2019-02-02T22:33:26", "upload_time_iso_8601": "2019-02-02T22:33:26.885494Z", "url": "https://files.pythonhosted.org/packages/6b/ad/63afa3eb7b5b2ad4fbe4ea20c591b4694b9e616583f05cd6d00d52215069/advent_of_code_sample-0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fc7ea8cfdc3e54c93a4556b51e17aeb8", "sha256": "cf0fd2642c47058e362bb6fdce3a84f812b9e83ce91bb9842c48a8474a7add68"}, "downloads": -1, "filename": "advent_of_code_sample-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc7ea8cfdc3e54c93a4556b51e17aeb8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4980, "upload_time": "2019-02-02T22:33:26", "upload_time_iso_8601": "2019-02-02T22:33:26.885494Z", "url": "https://files.pythonhosted.org/packages/6b/ad/63afa3eb7b5b2ad4fbe4ea20c591b4694b9e616583f05cd6d00d52215069/advent_of_code_sample-0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:23:06 2020"}