{"info": {"author": "Manuel Pariente", "author_email": "pariente.mnl@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "## PyTorch implementation of STOI\n[![Build Status][travis-badge]][travis]\n[![PyPI Status](https://badge.fury.io/py/torch-stoi.svg)](https://badge.fury.io/py/torch-stoi)\n\n\nImplementation of the classical and extended Short \nTerm Objective Intelligibility in PyTorch.\nSee also [Cees Taal's website](http://www.ceestaal.nl/code/) and \nthe [python implementation](https://github.com/mpariente/pystoi)\n\n### Install\n```bash\npip install torch_stoi\n```\n\n## Important warning\n**This implementation is intended to be used as a loss function only.**  \nIt doesn't replicate the exact behavior of the original metrics\nbut the results should be close enough that it can be used \nas a loss function. See the Notes in the\n [`NegSTOILoss`](./torch_stoi/stoi.py) class.\n \nQuantitative comparison coming soon hopefully :rocket:\n\n### Usage\n```python\nimport torch\nfrom torch import nn\nfrom torch_stoi import NegSTOILoss\n\nsample_rate = 16000\nloss_func = NegSTOILoss(sample_rate=sample_rate)\n# Your nnet and optimizer definition here\nnnet = nn.Module()\n\nnoisy_speech = torch.randn(2, 16000)\nclean_speech = torch.randn(2, 16000)\n# Estimate clean speech\nest_speech = nnet(noisy_speech)\n# Compute loss and backward (then step etc...)\nloss_batch = loss_func(est_speech, clean_speech)\nloss_batch.mean().backward()\n```\n\n### Comparing NumPy and PyTorch versions : the static test\nValues obtained with the NumPy version are compared to \nthe PyTorch version in the following graphs.  \n##### 8kHz\nClassic STOI measure\n\n<img src=\"./plots/8kHzwithVAD.png\" width=\"400\"/> <img src=\"./plots/8kHzwoVAD.png\" width=\"400\"/>\n\nExtended STOI measure\n\n<img src=\"./plots/8kHzExtendedwithVAD.png\" width=\"400\"/> <img src=\"./plots/8kHzExtendedwoVAD.png\" width=\"400\">\n\n##### 16kHz\nClassic STOI measure\n\n<img src=\"./plots/16kHzwithVAD.png\" width=\"400\"> <img src=\"./plots/16kHzwoVAD.png\" width=\"400\">\n\nExtended STOI measure\n\n<img src=\"./plots/16kHzExtendedwithVAD.png\" width=\"400\"> <img src=\"./plots/16kHzExtendedwoVAD.png\" width=\"400\">\n\n\n16kHz signals used to compare both versions contained a lot\nof silence, which explains why the match is very bad without \nVAD. \n\n### Comparing NumPy and PyTorch versions : Training a DNN\nComing in the near future\n\n### References\n* [1] C.H.Taal, R.C.Hendriks, R.Heusdens, J.Jensen 'A Short-Time\n  Objective Intelligibility Measure for Time-Frequency Weighted Noisy Speech',\n  ICASSP 2010, Texas, Dallas.\n* [2] C.H.Taal, R.C.Hendriks, R.Heusdens, J.Jensen 'An Algorithm for\n  Intelligibility Prediction of Time-Frequency Weighted Noisy Speech',\n  IEEE Transactions on Audio, Speech, and Language Processing, 2011.\n* [3] J. Jensen and C. H. Taal, 'An Algorithm for Predicting the\n  Intelligibility of Speech Masked by Modulated Noise Maskers',\n  IEEE Transactions on Audio, Speech and Language Processing, 2016.\n\n\n[travis]: https://travis-ci.com/mpariente/pytorch_stoi\n[travis-badge]: https://travis-ci.com/mpariente/pytorch_stoi.svg?branch=master", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mpariente/torch_stoi", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "torch-stoi", "package_url": "https://pypi.org/project/torch-stoi/", "platform": "", "project_url": "https://pypi.org/project/torch-stoi/", "project_urls": {"Homepage": "https://github.com/mpariente/torch_stoi"}, "release_url": "https://pypi.org/project/torch-stoi/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Computes Short Term Objective Intelligibility in PyTorch", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>PyTorch implementation of STOI</h2>\n<p><a href=\"https://travis-ci.com/mpariente/pytorch_stoi\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a954bbed30de082022d2470ba2602543167498b3/68747470733a2f2f7472617669732d63692e636f6d2f6d70617269656e74652f7079746f7263685f73746f692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/torch-stoi\" rel=\"nofollow\"><img alt=\"PyPI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7b7349085e6613aab0ac89f1ce742d1843c1b3b/68747470733a2f2f62616467652e667572792e696f2f70792f746f7263682d73746f692e737667\"></a></p>\n<p>Implementation of the classical and extended Short\nTerm Objective Intelligibility in PyTorch.\nSee also <a href=\"http://www.ceestaal.nl/code/\" rel=\"nofollow\">Cees Taal's website</a> and\nthe <a href=\"https://github.com/mpariente/pystoi\" rel=\"nofollow\">python implementation</a></p>\n<h3>Install</h3>\n<pre>pip install torch_stoi\n</pre>\n<h2>Important warning</h2>\n<p><strong>This implementation is intended to be used as a loss function only.</strong><br>\nIt doesn't replicate the exact behavior of the original metrics\nbut the results should be close enough that it can be used\nas a loss function. See the Notes in the\n<a href=\"./torch_stoi/stoi.py\" rel=\"nofollow\"><code>NegSTOILoss</code></a> class.</p>\n<p>Quantitative comparison coming soon hopefully :rocket:</p>\n<h3>Usage</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch</span> <span class=\"kn\">import</span> <span class=\"n\">nn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch_stoi</span> <span class=\"kn\">import</span> <span class=\"n\">NegSTOILoss</span>\n\n<span class=\"n\">sample_rate</span> <span class=\"o\">=</span> <span class=\"mi\">16000</span>\n<span class=\"n\">loss_func</span> <span class=\"o\">=</span> <span class=\"n\">NegSTOILoss</span><span class=\"p\">(</span><span class=\"n\">sample_rate</span><span class=\"o\">=</span><span class=\"n\">sample_rate</span><span class=\"p\">)</span>\n<span class=\"c1\"># Your nnet and optimizer definition here</span>\n<span class=\"n\">nnet</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">()</span>\n\n<span class=\"n\">noisy_speech</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">16000</span><span class=\"p\">)</span>\n<span class=\"n\">clean_speech</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">16000</span><span class=\"p\">)</span>\n<span class=\"c1\"># Estimate clean speech</span>\n<span class=\"n\">est_speech</span> <span class=\"o\">=</span> <span class=\"n\">nnet</span><span class=\"p\">(</span><span class=\"n\">noisy_speech</span><span class=\"p\">)</span>\n<span class=\"c1\"># Compute loss and backward (then step etc...)</span>\n<span class=\"n\">loss_batch</span> <span class=\"o\">=</span> <span class=\"n\">loss_func</span><span class=\"p\">(</span><span class=\"n\">est_speech</span><span class=\"p\">,</span> <span class=\"n\">clean_speech</span><span class=\"p\">)</span>\n<span class=\"n\">loss_batch</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">()</span>\n</pre>\n<h3>Comparing NumPy and PyTorch versions : the static test</h3>\n<p>Values obtained with the NumPy version are compared to\nthe PyTorch version in the following graphs.</p>\n<h5>8kHz</h5>\n<p>Classic STOI measure</p>\n<p><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/459e950e303e1d9ff1f3da2d8c009eabcb2e9b8c/2e2f706c6f74732f386b487a776974685641442e706e67\" width=\"400\"> <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24708ef27aec2ee85ef391ee95a25e30438c5c6d/2e2f706c6f74732f386b487a776f5641442e706e67\" width=\"400\"></p>\n<p>Extended STOI measure</p>\n<p><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4790d26c1e2853c03e07d6abf77473fc39ea3b47/2e2f706c6f74732f386b487a457874656e646564776974685641442e706e67\" width=\"400\"> <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63f7562cbc4382ea946f6424da16a5636794e7d5/2e2f706c6f74732f386b487a457874656e646564776f5641442e706e67\" width=\"400\"></p>\n<h5>16kHz</h5>\n<p>Classic STOI measure</p>\n<p><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fd48ce4028549de44c5de7ef906914c048c370a/2e2f706c6f74732f31366b487a776974685641442e706e67\" width=\"400\"> <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97846c12f9afb36c1211093c0b4a5d2ac0483250/2e2f706c6f74732f31366b487a776f5641442e706e67\" width=\"400\"></p>\n<p>Extended STOI measure</p>\n<p><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/489790deb34e1a4bfc73e5e3d1383e6c5a67dee3/2e2f706c6f74732f31366b487a457874656e646564776974685641442e706e67\" width=\"400\"> <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96120ed85315d407b0f7994b0bb2a0be994b450e/2e2f706c6f74732f31366b487a457874656e646564776f5641442e706e67\" width=\"400\"></p>\n<p>16kHz signals used to compare both versions contained a lot\nof silence, which explains why the match is very bad without\nVAD.</p>\n<h3>Comparing NumPy and PyTorch versions : Training a DNN</h3>\n<p>Coming in the near future</p>\n<h3>References</h3>\n<ul>\n<li>[1] C.H.Taal, R.C.Hendriks, R.Heusdens, J.Jensen 'A Short-Time\nObjective Intelligibility Measure for Time-Frequency Weighted Noisy Speech',\nICASSP 2010, Texas, Dallas.</li>\n<li>[2] C.H.Taal, R.C.Hendriks, R.Heusdens, J.Jensen 'An Algorithm for\nIntelligibility Prediction of Time-Frequency Weighted Noisy Speech',\nIEEE Transactions on Audio, Speech, and Language Processing, 2011.</li>\n<li>[3] J. Jensen and C. H. Taal, 'An Algorithm for Predicting the\nIntelligibility of Speech Masked by Modulated Noise Maskers',\nIEEE Transactions on Audio, Speech and Language Processing, 2016.</li>\n</ul>\n\n          </div>"}, "last_serial": 7067409, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "52ce5c018f449d70ee9a14a93b5f1286", "sha256": "9b6128c6ca978f6dda24ea9451ff0cd6c8877e7c145c3543b9ee660f49b699ca"}, "downloads": -1, "filename": "torch_stoi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "52ce5c018f449d70ee9a14a93b5f1286", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4971, "upload_time": "2020-04-18T18:14:06", "upload_time_iso_8601": "2020-04-18T18:14:06.006359Z", "url": "https://files.pythonhosted.org/packages/c2/0c/879e42e21af3cd799eced585aca8a056ba73c675b786cde9b586af868deb/torch_stoi-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4cdfc0a6c9c5b553e62a15729eeab81c", "sha256": "0b5f842e16e990496d2d28707c0f69e8f70c478adf486de0f4d2a8d453e38d7d"}, "downloads": -1, "filename": "torch_stoi-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4cdfc0a6c9c5b553e62a15729eeab81c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5324, "upload_time": "2020-04-19T14:36:46", "upload_time_iso_8601": "2020-04-19T14:36:46.989678Z", "url": "https://files.pythonhosted.org/packages/e3/cb/6fd55bf8d448741beeb33c484ec17534ec3d83388b926a6420cca50fb4fb/torch_stoi-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "5afc77a07a5bbae7007362d517997d18", "sha256": "24f1001d5022b5a603f66e69255fcfc395d28dce064b6080ebba5112c1c143ef"}, "downloads": -1, "filename": "torch_stoi-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5afc77a07a5bbae7007362d517997d18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5876, "upload_time": "2020-04-21T11:47:33", "upload_time_iso_8601": "2020-04-21T11:47:33.096507Z", "url": "https://files.pythonhosted.org/packages/93/05/0e292ad00b6dcbf6d5f60c1dc4dbc16e3a2851b4e346d6be56daafa1861b/torch_stoi-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ac50a2a0bc8ff12445fdc45535b45484", "sha256": "715eef7fe493aad24587e57ddbe64e0aaa6f1b6be2adb3a4c8f55a37270bb40f"}, "downloads": -1, "filename": "torch_stoi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ac50a2a0bc8ff12445fdc45535b45484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5674, "upload_time": "2020-04-21T11:49:45", "upload_time_iso_8601": "2020-04-21T11:49:45.891550Z", "url": "https://files.pythonhosted.org/packages/62/05/1c1e8d89a91ed24c9c1b6b3b88bc5bd639bce932d56cce2784d282c537b1/torch_stoi-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac50a2a0bc8ff12445fdc45535b45484", "sha256": "715eef7fe493aad24587e57ddbe64e0aaa6f1b6be2adb3a4c8f55a37270bb40f"}, "downloads": -1, "filename": "torch_stoi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ac50a2a0bc8ff12445fdc45535b45484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5674, "upload_time": "2020-04-21T11:49:45", "upload_time_iso_8601": "2020-04-21T11:49:45.891550Z", "url": "https://files.pythonhosted.org/packages/62/05/1c1e8d89a91ed24c9c1b6b3b88bc5bd639bce932d56cce2784d282c537b1/torch_stoi-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:09 2020"}