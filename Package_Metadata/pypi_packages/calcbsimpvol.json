{"info": {"author": "Erkan Demiralay", "author_email": "erkan.dem@pm.me", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Office/Business :: Financial", "Topic :: Office/Business :: Financial :: Spreadsheet"], "description": "\n[![Build Status](https://travis-ci.com/erkandem/calcbsimpvol.svg?token=EM8YQfR9wuLvQFQzBZ5o&branch=master)](https://travis-ci.com/erkandem/calcbsimpvol)\n![](https://img.shields.io/badge/License-MIT-blue.svg)\n![](https://img.shields.io/badge/Python-3.4%20%7C%203.5%20%7C%203.6%20%7C%203.7%20%7C%203.8%20%7C%20PyPy3-blue.svg)\n[![](https://img.shields.io/badge/PyPi-v1.14.0-blue.svg)](https://pypi.org/project/calcbsimpvol/)\n\n# calcbsimpvol\n\n*Calculate Black-Scholes Implied Volatility - Vectorwise*\n\n----------------------\n\n* `:)` native python code\n* `:)` lightweight footprint\n* `:)` sample data included\n* `:(` not suited for single / low number of options\n* `:(` code reads un-pythonic\n* `:(` not yet thoroughly tested\n\n## Getting started\n\n### Requirements\n\n* Python 3.x (currently) or PyPy3\n* NumPy\n* SciPy\n* (MatPlotLib to visualize results in some examples)\n\n###  Installation\n\nWhile the code consists of single digit functions,\nI recommend using the `pip install` way to get the code.\nThat way you would take advantage of bug fixes, updates,\nand possible extensions.\n\n```bash\n$ pip install calcbsimpvol\n```\n\n### Example\n\nPass your `args` bundled in a `dict`.\n\n```python\nfrom calcbsimpvol import calcbsimpvol\nimport numpy as np\n\nS = np.asarray(100)\nK_value = np.arange(40, 160, 25)\nK = np.ones((np.size(K_value), 1))\nK[:, 0] = K_value\ntau_value = np.arange(0.25, 1.01, 0.25)\ntau = np.ones((np.size(tau_value), 1))\ntau[:, 0] = tau_value\nr = np.asarray(0.01)\nq = np.asarray(0.03)\ncp = np.asarray(1)\nP = [[59.35, 34.41, 10.34, 0.50, 0.01],\n[58.71, 33.85, 10.99, 1.36, 0.14],\n[58.07, 33.35, 11.50, 2.12, 0.40],\n[57.44, 32.91, 11.90, 2.77, 0.70]]\n\nP = np.asarray(P)\n[K, tau] = np.meshgrid(K, tau)\n\nsigma = calcbsimpvol(dict(cp=cp, P=P, S=S, K=K, tau=tau, r=r, q=q))\nprint(sigma)\n\n# [[      nan,       nan,  0.20709362, 0.21820954, 0.24188675],\n# [       nan, 0.22279836, 0.20240934, 0.21386148, 0.23738982],\n# [       nan, 0.22442837, 0.1987048 , 0.21063506, 0.23450013],\n# [       nan, 0.22188111, 0.19564657, 0.20798285, 0.23045406]]\n\n```\n\nMore usage examples are available in [example3.py](https://github.com/erkandem/calcbsimpvol) \n(additional sample data required which is  available at [GitHub Repo](https://github.com/erkandem/calcbsimpvol)\n\n## Performance\n```\nDesign a test. \nGet the results you want.\n```\n\n* `k_max = 10` (default) \n* `tolerance = 10E-12` (default)\n* linear regression steps are commented out (default)\n\n```bash\n# assuming you did install it already\ngit clone https://github.com/erkandem/calcbsimpvol.git\ncd calcbsimpvol\npython examples/example3.py --steps 100 --mode reference\n```\n\n\n* 15 \u00b5s per option\n* 41 ms per surface\n\ntested with 3.6, 3.7 and PyPy3\n```bash\nmatlab -nodisplay -nosplash -nodesktop -r \"run('mlb_reference_example.m');\"\n```\n\n* 12 \u00b5s per option\n* 34 ms per surface \n\n\nObviously, these values are per core (i5 4210U 1.7 GHz).\n\n\n## Notes\nGood Python code reads like a novel. Right? So should math.\nI preferred short math-like variable names in this case.\nThat makes the code less readable compared to other Python code \nbut the docstrings should make up for the lack of readability.\n\nOriginally, I left the camelCase function name and spelling in place but eventually got annoyed.\n> calcbsimpvol it is\n\n\n## Code Origin\n\n* first thought of by Li (2006) (see References)\n* implemented and published by Mark Whirdy as MATLAB .m-code (see References)\n* numpyified from `.m` to `.py` by me\n\n\n## Contact\n* email: [erkan.dem@pm.me](mailto:erkan.dem@pm.me)\n* documentation: [erkandem.github.io/calcbsimpvol/](https://erkandem.github.io/calcbsimpvol/)\n* source: [github.com/erkandem/calcbsimpvol](https://github.com/erkandem/calcbsimpvol)\n* issues: [github.com/erkandem/calcbsimpvol/issues](https://github.com/erkandem/calcbsimpvol/issues)\n\n## ToDos\n* make the code compatible with `Python 2`\n* make it `PyPy` compatible\n\n\n\n## References\n1)  Li, 2006, \"You Don't Have to Bother Newton for Implied Volatility\"\n\n    [http://papers.ssrn.com/sol3/papers.cfm?abstract_id=952727](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=952727)\n\n2)  MATLAB source code available at:\n\n    [https://www.mathworks.com/matlabcentral/fileexchange/41473-calcbsimpvol-cp-p-s-k-t-r-q](https://www.mathworks.com/matlabcentral/fileexchange/41473-calcbsimpvol-cp-p-s-k-t-r-q)\n\n## License\nThe included Python code is licensed under `MIT` [License](https://github.com/calcbsimpvol/calcbsimpvol/LICENCE)\n\nThe Code by Mark Whirdy is licensed under `MIT` [License](https://github.com/erkandem/calcbsimpvol/calcBSImpVol_mlab/LICENSE)\n\nThe translation is not related or endorsed by the original author.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://erkandem.github.io/calcbsimpvol/", "keywords": "options implied volatility option iv ivol options-on-futures ivsurface black-scholes", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "calcbsimpvol", "package_url": "https://pypi.org/project/calcbsimpvol/", "platform": "", "project_url": "https://pypi.org/project/calcbsimpvol/", "project_urls": {"Bug Reports": "https://github.com/erkandem/calcbsimpvol/issues", "Documentation": "https://erkandem.github.io/calcbsimpvol/", "Homepage": "https://erkandem.github.io/calcbsimpvol/", "Source": "https://github.com/erkandem/calcbsimpvol"}, "release_url": "https://pypi.org/project/calcbsimpvol/1.14.0/", "requires_dist": ["numpy", "scipy", "matplotlib"], "requires_python": "", "summary": "Calculate Black Scholes Implied Volatility - Vectorwise", "version": "1.14.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/erkandem/calcbsimpvol\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2bdf7f6b24391f59223b340061e2f748801c5c2/68747470733a2f2f7472617669732d63692e636f6d2f65726b616e64656d2f63616c636273696d70766f6c2e7376673f746f6b656e3d454d38595166523977754c765146517a425a356f266272616e63683d6d6173746572\"></a>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a82ba0f8a9f7dc8a645676d71d3e4bc62e489bd4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e34253230253743253230332e35253230253743253230332e36253230253743253230332e37253230253743253230332e3825323025374325323050795079332d626c75652e737667\">\n<a href=\"https://pypi.org/project/calcbsimpvol/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d87c2f1cc4f72e0660c67bb5d1ee9916bd67769/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507950692d76312e31342e302d626c75652e737667\"></a></p>\n<h1>calcbsimpvol</h1>\n<p><em>Calculate Black-Scholes Implied Volatility - Vectorwise</em></p>\n<hr>\n<ul>\n<li><code>:)</code> native python code</li>\n<li><code>:)</code> lightweight footprint</li>\n<li><code>:)</code> sample data included</li>\n<li><code>:(</code> not suited for single / low number of options</li>\n<li><code>:(</code> code reads un-pythonic</li>\n<li><code>:(</code> not yet thoroughly tested</li>\n</ul>\n<h2>Getting started</h2>\n<h3>Requirements</h3>\n<ul>\n<li>Python 3.x (currently) or PyPy3</li>\n<li>NumPy</li>\n<li>SciPy</li>\n<li>(MatPlotLib to visualize results in some examples)</li>\n</ul>\n<h3>Installation</h3>\n<p>While the code consists of single digit functions,\nI recommend using the <code>pip install</code> way to get the code.\nThat way you would take advantage of bug fixes, updates,\nand possible extensions.</p>\n<pre>$ pip install calcbsimpvol\n</pre>\n<h3>Example</h3>\n<p>Pass your <code>args</code> bundled in a <code>dict</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">calcbsimpvol</span> <span class=\"kn\">import</span> <span class=\"n\">calcbsimpvol</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">K_value</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">K_value</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">K</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">K_value</span>\n<span class=\"n\">tau_value</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">1.01</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">)</span>\n<span class=\"n\">tau</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">tau_value</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">tau</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tau_value</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"mf\">0.03</span><span class=\"p\">)</span>\n<span class=\"n\">cp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mf\">59.35</span><span class=\"p\">,</span> <span class=\"mf\">34.41</span><span class=\"p\">,</span> <span class=\"mf\">10.34</span><span class=\"p\">,</span> <span class=\"mf\">0.50</span><span class=\"p\">,</span> <span class=\"mf\">0.01</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mf\">58.71</span><span class=\"p\">,</span> <span class=\"mf\">33.85</span><span class=\"p\">,</span> <span class=\"mf\">10.99</span><span class=\"p\">,</span> <span class=\"mf\">1.36</span><span class=\"p\">,</span> <span class=\"mf\">0.14</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mf\">58.07</span><span class=\"p\">,</span> <span class=\"mf\">33.35</span><span class=\"p\">,</span> <span class=\"mf\">11.50</span><span class=\"p\">,</span> <span class=\"mf\">2.12</span><span class=\"p\">,</span> <span class=\"mf\">0.40</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mf\">57.44</span><span class=\"p\">,</span> <span class=\"mf\">32.91</span><span class=\"p\">,</span> <span class=\"mf\">11.90</span><span class=\"p\">,</span> <span class=\"mf\">2.77</span><span class=\"p\">,</span> <span class=\"mf\">0.70</span><span class=\"p\">]]</span>\n\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">tau</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">meshgrid</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">tau</span><span class=\"p\">)</span>\n\n<span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"n\">calcbsimpvol</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">=</span><span class=\"n\">cp</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">=</span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"o\">=</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"n\">tau</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sigma</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [[      nan,       nan,  0.20709362, 0.21820954, 0.24188675],</span>\n<span class=\"c1\"># [       nan, 0.22279836, 0.20240934, 0.21386148, 0.23738982],</span>\n<span class=\"c1\"># [       nan, 0.22442837, 0.1987048 , 0.21063506, 0.23450013],</span>\n<span class=\"c1\"># [       nan, 0.22188111, 0.19564657, 0.20798285, 0.23045406]]</span>\n</pre>\n<p>More usage examples are available in <a href=\"https://github.com/erkandem/calcbsimpvol\" rel=\"nofollow\">example3.py</a>\n(additional sample data required which is  available at <a href=\"https://github.com/erkandem/calcbsimpvol\" rel=\"nofollow\">GitHub Repo</a></p>\n<h2>Performance</h2>\n<pre><code>Design a test. \nGet the results you want.\n</code></pre>\n<ul>\n<li><code>k_max = 10</code> (default)</li>\n<li><code>tolerance = 10E-12</code> (default)</li>\n<li>linear regression steps are commented out (default)</li>\n</ul>\n<pre><span class=\"c1\"># assuming you did install it already</span>\ngit clone https://github.com/erkandem/calcbsimpvol.git\n<span class=\"nb\">cd</span> calcbsimpvol\npython examples/example3.py --steps <span class=\"m\">100</span> --mode reference\n</pre>\n<ul>\n<li>15 \u00b5s per option</li>\n<li>41 ms per surface</li>\n</ul>\n<p>tested with 3.6, 3.7 and PyPy3</p>\n<pre>matlab -nodisplay -nosplash -nodesktop -r <span class=\"s2\">\"run('mlb_reference_example.m');\"</span>\n</pre>\n<ul>\n<li>12 \u00b5s per option</li>\n<li>34 ms per surface</li>\n</ul>\n<p>Obviously, these values are per core (i5 4210U 1.7 GHz).</p>\n<h2>Notes</h2>\n<p>Good Python code reads like a novel. Right? So should math.\nI preferred short math-like variable names in this case.\nThat makes the code less readable compared to other Python code\nbut the docstrings should make up for the lack of readability.</p>\n<p>Originally, I left the camelCase function name and spelling in place but eventually got annoyed.</p>\n<blockquote>\n<p>calcbsimpvol it is</p>\n</blockquote>\n<h2>Code Origin</h2>\n<ul>\n<li>first thought of by Li (2006) (see References)</li>\n<li>implemented and published by Mark Whirdy as MATLAB .m-code (see References)</li>\n<li>numpyified from <code>.m</code> to <code>.py</code> by me</li>\n</ul>\n<h2>Contact</h2>\n<ul>\n<li>email: <a href=\"mailto:erkan.dem@pm.me\">erkan.dem@pm.me</a></li>\n<li>documentation: <a href=\"https://erkandem.github.io/calcbsimpvol/\" rel=\"nofollow\">erkandem.github.io/calcbsimpvol/</a></li>\n<li>source: <a href=\"https://github.com/erkandem/calcbsimpvol\" rel=\"nofollow\">github.com/erkandem/calcbsimpvol</a></li>\n<li>issues: <a href=\"https://github.com/erkandem/calcbsimpvol/issues\" rel=\"nofollow\">github.com/erkandem/calcbsimpvol/issues</a></li>\n</ul>\n<h2>ToDos</h2>\n<ul>\n<li>make the code compatible with <code>Python 2</code></li>\n<li>make it <code>PyPy</code> compatible</li>\n</ul>\n<h2>References</h2>\n<ol>\n<li>\n<p>Li, 2006, \"You Don't Have to Bother Newton for Implied Volatility\"</p>\n<p><a href=\"http://papers.ssrn.com/sol3/papers.cfm?abstract_id=952727\" rel=\"nofollow\">http://papers.ssrn.com/sol3/papers.cfm?abstract_id=952727</a></p>\n</li>\n<li>\n<p>MATLAB source code available at:</p>\n<p><a href=\"https://www.mathworks.com/matlabcentral/fileexchange/41473-calcbsimpvol-cp-p-s-k-t-r-q\" rel=\"nofollow\">https://www.mathworks.com/matlabcentral/fileexchange/41473-calcbsimpvol-cp-p-s-k-t-r-q</a></p>\n</li>\n</ol>\n<h2>License</h2>\n<p>The included Python code is licensed under <code>MIT</code> <a href=\"https://github.com/calcbsimpvol/calcbsimpvol/LICENCE\" rel=\"nofollow\">License</a></p>\n<p>The Code by Mark Whirdy is licensed under <code>MIT</code> <a href=\"https://github.com/erkandem/calcbsimpvol/calcBSImpVol_mlab/LICENSE\" rel=\"nofollow\">License</a></p>\n<p>The translation is not related or endorsed by the original author.</p>\n\n          </div>"}, "last_serial": 6993188, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7d5fd3eb411fe77c91ab8f2d3aca9016", "sha256": "73ea20e5397bf4c21ee6c045dc740f4355981b54db0e32e2fdd45d91fb0ae0e2"}, "downloads": -1, "filename": "calcbsimpvol-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d5fd3eb411fe77c91ab8f2d3aca9016", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1439, "upload_time": "2019-01-12T16:42:47", "upload_time_iso_8601": "2019-01-12T16:42:47.677142Z", "url": "https://files.pythonhosted.org/packages/0f/0e/0474cf5f96d257a732fa90a6a27364e4ab7292183edd09bda4782fbcf0ba/calcbsimpvol-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f155cf2f985dc226b4b913c6eee0908", "sha256": "3c0fb55569feabd4f0893f9e790f1340c578f08af8a7c5c0ec7e74c7e178a44f"}, "downloads": -1, "filename": "calcbsimpvol-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1f155cf2f985dc226b4b913c6eee0908", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1297, "upload_time": "2019-01-12T16:42:49", "upload_time_iso_8601": "2019-01-12T16:42:49.931431Z", "url": "https://files.pythonhosted.org/packages/80/fa/a2d998782d46585af657ec2edac6bff6fba494b3ef4f3de8a852bdb179c1/calcbsimpvol-0.0.1.tar.gz", "yanked": false}], "1.13.0": [{"comment_text": "", "digests": {"md5": "af32792e734677f02e28587e3cfbcd36", "sha256": "82c0abca239f24c1cf88efb1ccc50a1548825ed66085830399eb787af19ff3bc"}, "downloads": -1, "filename": "calcbsimpvol-1.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "af32792e734677f02e28587e3cfbcd36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 442154, "upload_time": "2019-01-31T13:26:31", "upload_time_iso_8601": "2019-01-31T13:26:31.259760Z", "url": "https://files.pythonhosted.org/packages/30/75/b615b38364e186be3922b1ce4144497e34eec7f8f4a9b39e472ef2bedf4c/calcbsimpvol-1.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2eb84add62f8befac1b8c206db9a3945", "sha256": "5a670b43b31e5eec195f0292e8ebd837cbdc27c17ad487c002fba6bb85a29392"}, "downloads": -1, "filename": "calcbsimpvol-1.13.0.tar.gz", "has_sig": false, "md5_digest": "2eb84add62f8befac1b8c206db9a3945", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 438582, "upload_time": "2019-01-31T13:26:41", "upload_time_iso_8601": "2019-01-31T13:26:41.431613Z", "url": "https://files.pythonhosted.org/packages/e5/3a/df99a1c89478b94715b3beffae0641a9fc1ab80e4b41168713a0ca5cb483/calcbsimpvol-1.13.0.tar.gz", "yanked": false}], "1.14.0": [{"comment_text": "", "digests": {"md5": "248ad0f5f2359a717433ddbdd5d1208b", "sha256": "4be70fbab974796340a4b2fd53323666925c78b29666234df4227f8078a94b68"}, "downloads": -1, "filename": "calcbsimpvol-1.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "248ad0f5f2359a717433ddbdd5d1208b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13791, "upload_time": "2020-04-10T13:15:05", "upload_time_iso_8601": "2020-04-10T13:15:05.345983Z", "url": "https://files.pythonhosted.org/packages/f1/50/ea4c122ee7d41906cb7a718c9778c394c5073d98a3d5b5958a8d7da10b33/calcbsimpvol-1.14.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e00e7f504016017969df381ebcf913c1", "sha256": "ed007fa705c5c88c66d851198e6adb873a9a1472b8795365631b9b514bb1425d"}, "downloads": -1, "filename": "calcbsimpvol-1.14.0.tar.gz", "has_sig": false, "md5_digest": "e00e7f504016017969df381ebcf913c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13298, "upload_time": "2020-04-10T13:15:06", "upload_time_iso_8601": "2020-04-10T13:15:06.991551Z", "url": "https://files.pythonhosted.org/packages/30/e5/1ea9f1ea7de093a898cb8471827d31199b37f3b4db9992e5a19f1cc4aa85/calcbsimpvol-1.14.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "248ad0f5f2359a717433ddbdd5d1208b", "sha256": "4be70fbab974796340a4b2fd53323666925c78b29666234df4227f8078a94b68"}, "downloads": -1, "filename": "calcbsimpvol-1.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "248ad0f5f2359a717433ddbdd5d1208b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13791, "upload_time": "2020-04-10T13:15:05", "upload_time_iso_8601": "2020-04-10T13:15:05.345983Z", "url": "https://files.pythonhosted.org/packages/f1/50/ea4c122ee7d41906cb7a718c9778c394c5073d98a3d5b5958a8d7da10b33/calcbsimpvol-1.14.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e00e7f504016017969df381ebcf913c1", "sha256": "ed007fa705c5c88c66d851198e6adb873a9a1472b8795365631b9b514bb1425d"}, "downloads": -1, "filename": "calcbsimpvol-1.14.0.tar.gz", "has_sig": false, "md5_digest": "e00e7f504016017969df381ebcf913c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13298, "upload_time": "2020-04-10T13:15:06", "upload_time_iso_8601": "2020-04-10T13:15:06.991551Z", "url": "https://files.pythonhosted.org/packages/30/e5/1ea9f1ea7de093a898cb8471827d31199b37f3b4db9992e5a19f1cc4aa85/calcbsimpvol-1.14.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:39 2020"}