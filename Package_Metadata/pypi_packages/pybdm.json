{"info": {"author": "Szymon Talaga", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: PyPy"], "description": "=============================================================\nPyBDM: Python interface to the *Block Decomposition Method*\n=============================================================\n\n.. image:: https://badge.fury.io/py/pybdm.png\n    :target: http://badge.fury.io/py/pybdm\n\n.. image:: https://travis-ci.org/sztal/pybdm.svg?branch=master\n    :target: https://travis-ci.org/sztal/pybdm\n\n.. image:: https://codecov.io/gh/sztal/pybdm/branch/master/graph/badge.svg?branch=master\n    :target: https://codecov.io/gh/sztal/pybdm\n\n.. image:: https://readthedocs.org/projects/pybdm-docs/badge/?version=latest\n    :target: https://pybdm-docs.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nThe Block Decomposition Method (BDM) approximates algorithmic complexity\nof a dataset of arbitrary size, that is, the length of the shortest computer\nprogram that generates it. This is not trivial as algorithmic complexity\nis not a computable quantity in the general case and estimation of\nalgorithmic complexity of a dataset can be very useful as it points to\nmechanistic connections between elements of a system, even such that\ndo not yield any regular statistical patterns that can be captured with\nmore traditional tools based on probability theory and information theory.\n\nCurrently 1D and 2D binary arrays are supported, as well as 1D arrays\nwith 4, 5, 6 and 9 discrete symbols.\n\nBDM and the necessary parts of the algorithmic information theory\nit is based on are described in `this article <https://www.mdpi.com/1099-4300/20/8/605>`_.\n\nSee the official documentation_ for more information.\n\n\nInstallation\n============\n\nStandard installation (stable)::\n\n    pip install pybdm\n\nDevelopment version installation::\n\n    pip install git+https://github.com/sztal/pybdm.git\n\nLocal development::\n\n    git clone https://github.com/sztal/pybdm\n    cd pybdm\n    pip install --editable .\n\n\nSupported versions\n------------------\n\nPython3.5+ is supported. Tests are run against Linux, but\nWindows and OSX should work as well.\n\n\nUsage\n=====\n\nThe BDM is implemented using the object-oriented approach and expects\ninput represented as `Numpy <http://www.numpy.org/>`__ arrays of integer type.\n\n.. highlights::\n\n   ``BDM`` objects operate exclusively on **integer arrays**.\n   Hence, any alphabet must be first mapped to a set of integers ranging\n   from ``0`` to ``k``.\n\nDetailed usage examples can be found in the official documentation_.\n\n\nBinary sequences (1D)\n---------------------\n\n.. code-block:: python\n\n    import numpy as np\n    from pybdm import BDM\n\n    # Create a dataset (must be of integer type)\n    X = np.ones((100,), dtype=int)\n\n    # Initialize BDM object\n    # ndim argument specifies dimensionality of BDM\n    bdm = BDM(ndim=1)\n\n    # Compute BDM\n    bdm.bdm(X)\n\n    # BDM objects may also compute standard Shannon entropy in base 2\n    bdm.ent(X)\n\n\nBinary matrices (2D)\n--------------------\n\n.. code-block:: python\n\n    import numpy as np\n    from pybdm import BDM\n\n    # Create a dataset (must be of integer type)\n    X = np.ones((100, 100), dtype=int)\n\n    # Initialize BDM object\n    bdm = BDM(ndim=2)\n\n    # Compute BDM\n    bdm.bdm(X)\n\n    # BDM objects may also compute standard Shannon entropy in base 2\n    bdm.ent(X)\n\nNon-binary sequences (1D)\n-------------------------\n\n.. code-block:: python\n\n    import numpy as np\n    from pybdm import BDM\n\n    # Create a dataset (4 discrete symbols)\n    np.random.seed(303)\n    X = np.random.randint(0, 4, (100,))\n\n    # Initialize BDM object with 4-symbols alphabet\n    bdm = BDM(ndim=1, nsymbols=4)\n\n    # Compute BDM\n    bdm.bdm(X)\n\n\n\nParallel processing\n-------------------\n\n*PyBDM* was designed with parallel processing in mind.\nUsing modern packages for parallelization such as\n`joblib <https://joblib.readthedocs.io/en/latest/parallel.html>`__\nmakes it really easy to compute BDM for massive objects.\n\nIn this example we will slice a 1000x1000 dataset into 200x200 pieces\ncompute so-called counter objects (final BDM computation operates on such objects)\nin parallel in 4 independent processes, and aggregate the results\ninto a single BDM approximation of the algorithmic complexity of the dataset.\n\n.. highlights::\n\n    Remember that data has to be sliced correctly during parallelization\n    in order to ensure fully correct BDM computations. That is, all slices\n    except lower and right boundaries have to be decomposable without\n    any boundary leftovers by the selected decomposition algorithm.\n\n.. code-block:: python\n\n    import numpy as np\n    from joblib import Parallel, delayed\n    from pybdm import BDM\n    from pybdm.utils import decompose_dataset\n\n    # Create a dataset (must be of integer type)\n    X = np.ones((1000, 1000), dtype=int)\n\n    # Initialize BDM object\n    bdm = BDM(ndim=2)\n\n    # Compute counter objects in parallel\n    counters = Parallel(n_jobs=4) \\\n        (delayed(bdm.decompose_and_count)(d) for d in decompose_dataset(X, (200, 200)))\n\n    # Compute BDM\n    bdm.compute_bdm(*counters)\n\n\nPerturbation analysis\n---------------------\n\nBesides the main *Block Decomposition Method* implementation *PyBDM* provides\nalso an efficient algorithm for perturbation analysis based on *BDM*\n(or standard Shannon entropy).\n\nA perturbation experiment studies change of *BDM* / entropy under changes\napplied to the underlying dataset. This is the main tool for detecting\nparts of a system having some causal significance as opposed\nto noise parts.\n\nParts which after yield negative contribution to the overall\ncomplexity after change are likely to be important for the system,\nsince their removal make it more noisy. On the other hand parts that yield\npositive contribution to the overall complexity after change are likely\nto be noise since they extend the system's description length.\n\n.. code-block:: python\n\n    import numpy as np\n    from pybdm import BDM\n    from pybdm.algorithms import PerturbationExperiment\n\n    # Create a dataset (must be of integer type)\n    X = np.ones((100, 100), dtype=int)\n\n    # Initialize BDM object\n    bdm = BDM(ndim=2)\n\n    # Initialize perturbation experiment object\n    # (may be run for both bdm or entropy)\n    perturbation = PerturbationExperiment(bdm, X, metric='bdm')\n\n    # Compute BDM change for all data points\n    delta_bdm = perturbation.run()\n\n    # Compute BDM change for selected data points and keep the changes while running\n    # One array provide indices of elements that are to be change.\n    idx = np.array([[0, 0], [10, 10]], dtype=int)\n    # Another array provide new values to assign.\n    # Negative values mean that new values will be selected\n    # randomly from the set of other possible values from the alphabet.\n    values = np.array([-1, -1], dtype=int)\n    delta_bdm = perturbation.run(idx, values, keep_changes=True)\n\n\nAuthors & Contact\n=================\n\n* Szymon Talaga <stalaga@protonmail.com>\n* Kostas Tsampourakis <kostas.tsampourakis@gmail.com>\n\n\n.. _documentation: http://pybdm-docs.rtfd.org\n\n\n\nDocumentation\n-------------\n\nThe full documentation is at http://pybdm-docs.rtfd.org.\n\n\n\nHistory\n-------\n\n0.1.0 (2019-09-22)\n++++++++++++++++++\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sztal/pybdm", "keywords": "bdm,ctm,aid,algorithmic information,algorithmic information dynamics,algorithmic complexity,kolmogorov complexity,k-complexity,description length,block decomposition method,coding theorem method,algorithmic information theory", "license": "MIT", "maintainer": "Szymon Talaga", "maintainer_email": "stalaga@protonmail.com", "name": "pybdm", "package_url": "https://pypi.org/project/pybdm/", "platform": "", "project_url": "https://pypi.org/project/pybdm/", "project_urls": {"Homepage": "https://github.com/sztal/pybdm"}, "release_url": "https://pypi.org/project/pybdm/0.1.0/", "requires_dist": ["numpy (>=1.15.4)"], "requires_python": "", "summary": "Python implementation of block decomposition method for approximating algorithmic complexity.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://badge.fury.io/py/pybdm\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pybdm.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3329fa3dee13ced7da82de3ede0f2a9510b31270/68747470733a2f2f62616467652e667572792e696f2f70792f707962646d2e706e67\"></a>\n<a href=\"https://travis-ci.org/sztal/pybdm\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/sztal/pybdm.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5aebc0dae45b2424edcb3e5a7a5257405e56f167/68747470733a2f2f7472617669732d63692e6f72672f737a74616c2f707962646d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/sztal/pybdm\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/sztal/pybdm/branch/master/graph/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28fd89ce39f9f0f98cfd7749d62ec1a6a42f5fca/68747470733a2f2f636f6465636f762e696f2f67682f737a74616c2f707962646d2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pybdm-docs.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7193b390167eb4f447637db7b7b00232b1acd149/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707962646d2d646f63732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>The Block Decomposition Method (BDM) approximates algorithmic complexity\nof a dataset of arbitrary size, that is, the length of the shortest computer\nprogram that generates it. This is not trivial as algorithmic complexity\nis not a computable quantity in the general case and estimation of\nalgorithmic complexity of a dataset can be very useful as it points to\nmechanistic connections between elements of a system, even such that\ndo not yield any regular statistical patterns that can be captured with\nmore traditional tools based on probability theory and information theory.</p>\n<p>Currently 1D and 2D binary arrays are supported, as well as 1D arrays\nwith 4, 5, 6 and 9 discrete symbols.</p>\n<p>BDM and the necessary parts of the algorithmic information theory\nit is based on are described in <a href=\"https://www.mdpi.com/1099-4300/20/8/605\" rel=\"nofollow\">this article</a>.</p>\n<p>See the official <a href=\"http://pybdm-docs.rtfd.org\" rel=\"nofollow\">documentation</a> for more information.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Standard installation (stable):</p>\n<pre>pip install pybdm\n</pre>\n<p>Development version installation:</p>\n<pre>pip install git+https://github.com/sztal/pybdm.git\n</pre>\n<p>Local development:</p>\n<pre>git clone https://github.com/sztal/pybdm\ncd pybdm\npip install --editable .\n</pre>\n<div id=\"supported-versions\">\n<h3>Supported versions</h3>\n<p>Python3.5+ is supported. Tests are run against Linux, but\nWindows and OSX should work as well.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The BDM is implemented using the object-oriented approach and expects\ninput represented as <a href=\"http://www.numpy.org/\" rel=\"nofollow\">Numpy</a> arrays of integer type.</p>\n<blockquote>\n<tt>BDM</tt> objects operate exclusively on <strong>integer arrays</strong>.\nHence, any alphabet must be first mapped to a set of integers ranging\nfrom <tt>0</tt> to <tt>k</tt>.</blockquote>\n<p>Detailed usage examples can be found in the official <a href=\"http://pybdm-docs.rtfd.org\" rel=\"nofollow\">documentation</a>.</p>\n<div id=\"binary-sequences-1d\">\n<h3>Binary sequences (1D)</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pybdm</span> <span class=\"kn\">import</span> <span class=\"n\">BDM</span>\n\n<span class=\"c1\"># Create a dataset (must be of integer type)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">100</span><span class=\"p\">,),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize BDM object</span>\n<span class=\"c1\"># ndim argument specifies dimensionality of BDM</span>\n<span class=\"n\">bdm</span> <span class=\"o\">=</span> <span class=\"n\">BDM</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute BDM</span>\n<span class=\"n\">bdm</span><span class=\"o\">.</span><span class=\"n\">bdm</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># BDM objects may also compute standard Shannon entropy in base 2</span>\n<span class=\"n\">bdm</span><span class=\"o\">.</span><span class=\"n\">ent</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"binary-matrices-2d\">\n<h3>Binary matrices (2D)</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pybdm</span> <span class=\"kn\">import</span> <span class=\"n\">BDM</span>\n\n<span class=\"c1\"># Create a dataset (must be of integer type)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize BDM object</span>\n<span class=\"n\">bdm</span> <span class=\"o\">=</span> <span class=\"n\">BDM</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute BDM</span>\n<span class=\"n\">bdm</span><span class=\"o\">.</span><span class=\"n\">bdm</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># BDM objects may also compute standard Shannon entropy in base 2</span>\n<span class=\"n\">bdm</span><span class=\"o\">.</span><span class=\"n\">ent</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"non-binary-sequences-1d\">\n<h3>Non-binary sequences (1D)</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pybdm</span> <span class=\"kn\">import</span> <span class=\"n\">BDM</span>\n\n<span class=\"c1\"># Create a dataset (4 discrete symbols)</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">303</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,))</span>\n\n<span class=\"c1\"># Initialize BDM object with 4-symbols alphabet</span>\n<span class=\"n\">bdm</span> <span class=\"o\">=</span> <span class=\"n\">BDM</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">nsymbols</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute BDM</span>\n<span class=\"n\">bdm</span><span class=\"o\">.</span><span class=\"n\">bdm</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"parallel-processing\">\n<h3>Parallel processing</h3>\n<p><em>PyBDM</em> was designed with parallel processing in mind.\nUsing modern packages for parallelization such as\n<a href=\"https://joblib.readthedocs.io/en/latest/parallel.html\" rel=\"nofollow\">joblib</a>\nmakes it really easy to compute BDM for massive objects.</p>\n<p>In this example we will slice a 1000x1000 dataset into 200x200 pieces\ncompute so-called counter objects (final BDM computation operates on such objects)\nin parallel in 4 independent processes, and aggregate the results\ninto a single BDM approximation of the algorithmic complexity of the dataset.</p>\n<blockquote>\nRemember that data has to be sliced correctly during parallelization\nin order to ensure fully correct BDM computations. That is, all slices\nexcept lower and right boundaries have to be decomposable without\nany boundary leftovers by the selected decomposition algorithm.</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">joblib</span> <span class=\"kn\">import</span> <span class=\"n\">Parallel</span><span class=\"p\">,</span> <span class=\"n\">delayed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pybdm</span> <span class=\"kn\">import</span> <span class=\"n\">BDM</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pybdm.utils</span> <span class=\"kn\">import</span> <span class=\"n\">decompose_dataset</span>\n\n<span class=\"c1\"># Create a dataset (must be of integer type)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize BDM object</span>\n<span class=\"n\">bdm</span> <span class=\"o\">=</span> <span class=\"n\">BDM</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute counter objects in parallel</span>\n<span class=\"n\">counters</span> <span class=\"o\">=</span> <span class=\"n\">Parallel</span><span class=\"p\">(</span><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span> \\\n    <span class=\"p\">(</span><span class=\"n\">delayed</span><span class=\"p\">(</span><span class=\"n\">bdm</span><span class=\"o\">.</span><span class=\"n\">decompose_and_count</span><span class=\"p\">)(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">decompose_dataset</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Compute BDM</span>\n<span class=\"n\">bdm</span><span class=\"o\">.</span><span class=\"n\">compute_bdm</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">counters</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"perturbation-analysis\">\n<h3>Perturbation analysis</h3>\n<p>Besides the main <em>Block Decomposition Method</em> implementation <em>PyBDM</em> provides\nalso an efficient algorithm for perturbation analysis based on <em>BDM</em>\n(or standard Shannon entropy).</p>\n<p>A perturbation experiment studies change of <em>BDM</em> / entropy under changes\napplied to the underlying dataset. This is the main tool for detecting\nparts of a system having some causal significance as opposed\nto noise parts.</p>\n<p>Parts which after yield negative contribution to the overall\ncomplexity after change are likely to be important for the system,\nsince their removal make it more noisy. On the other hand parts that yield\npositive contribution to the overall complexity after change are likely\nto be noise since they extend the system\u2019s description length.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pybdm</span> <span class=\"kn\">import</span> <span class=\"n\">BDM</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pybdm.algorithms</span> <span class=\"kn\">import</span> <span class=\"n\">PerturbationExperiment</span>\n\n<span class=\"c1\"># Create a dataset (must be of integer type)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize BDM object</span>\n<span class=\"n\">bdm</span> <span class=\"o\">=</span> <span class=\"n\">BDM</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize perturbation experiment object</span>\n<span class=\"c1\"># (may be run for both bdm or entropy)</span>\n<span class=\"n\">perturbation</span> <span class=\"o\">=</span> <span class=\"n\">PerturbationExperiment</span><span class=\"p\">(</span><span class=\"n\">bdm</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">'bdm'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute BDM change for all data points</span>\n<span class=\"n\">delta_bdm</span> <span class=\"o\">=</span> <span class=\"n\">perturbation</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Compute BDM change for selected data points and keep the changes while running</span>\n<span class=\"c1\"># One array provide indices of elements that are to be change.</span>\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"c1\"># Another array provide new values to assign.</span>\n<span class=\"c1\"># Negative values mean that new values will be selected</span>\n<span class=\"c1\"># randomly from the set of other possible values from the alphabet.</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"n\">delta_bdm</span> <span class=\"o\">=</span> <span class=\"n\">perturbation</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">keep_changes</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"authors-contact\">\n<h2>Authors &amp; Contact</h2>\n<ul>\n<li>Szymon Talaga &lt;<a href=\"mailto:stalaga%40protonmail.com\">stalaga<span>@</span>protonmail<span>.</span>com</a>&gt;</li>\n<li>Kostas Tsampourakis &lt;<a href=\"mailto:kostas.tsampourakis%40gmail.com\">kostas<span>.</span>tsampourakis<span>@</span>gmail<span>.</span>com</a>&gt;</li>\n</ul>\n<div id=\"id1\">\n<h3>Documentation</h3>\n<p>The full documentation is at <a href=\"http://pybdm-docs.rtfd.org\" rel=\"nofollow\">http://pybdm-docs.rtfd.org</a>.</p>\n</div>\n<div id=\"history\">\n<h3>History</h3>\n<h3 id=\"id2\"><span class=\"section-subtitle\">0.1.0 (2019-09-22)</span></h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5869427, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9d181c541f5a56286c93ce3f2e38e58f", "sha256": "28cec2b7263f4448ef9d62ae71bf84d1450b83d8a160a69779be0022959ce3c1"}, "downloads": -1, "filename": "pybdm-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9d181c541f5a56286c93ce3f2e38e58f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 39936085, "upload_time": "2019-09-22T15:12:28", "upload_time_iso_8601": "2019-09-22T15:12:28.772690Z", "url": "https://files.pythonhosted.org/packages/b7/32/fd74c068e07e1b91a732982125bd821af9fb144cd741d16ac0a607564538/pybdm-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b15b64aa1a5b077e345195fafcca837b", "sha256": "16d4a3b12ddd506bc7d94b41e19da53e4d448f6670384c41e5c24cf2f71b622c"}, "downloads": -1, "filename": "pybdm-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b15b64aa1a5b077e345195fafcca837b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39942776, "upload_time": "2019-09-22T15:13:02", "upload_time_iso_8601": "2019-09-22T15:13:02.044133Z", "url": "https://files.pythonhosted.org/packages/ba/63/cf3fee7f8a86b1f289ded34340fa2c8c2fd0ca6a231dada486002a17495b/pybdm-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d181c541f5a56286c93ce3f2e38e58f", "sha256": "28cec2b7263f4448ef9d62ae71bf84d1450b83d8a160a69779be0022959ce3c1"}, "downloads": -1, "filename": "pybdm-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9d181c541f5a56286c93ce3f2e38e58f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 39936085, "upload_time": "2019-09-22T15:12:28", "upload_time_iso_8601": "2019-09-22T15:12:28.772690Z", "url": "https://files.pythonhosted.org/packages/b7/32/fd74c068e07e1b91a732982125bd821af9fb144cd741d16ac0a607564538/pybdm-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b15b64aa1a5b077e345195fafcca837b", "sha256": "16d4a3b12ddd506bc7d94b41e19da53e4d448f6670384c41e5c24cf2f71b622c"}, "downloads": -1, "filename": "pybdm-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b15b64aa1a5b077e345195fafcca837b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39942776, "upload_time": "2019-09-22T15:13:02", "upload_time_iso_8601": "2019-09-22T15:13:02.044133Z", "url": "https://files.pythonhosted.org/packages/ba/63/cf3fee7f8a86b1f289ded34340fa2c8c2fd0ca6a231dada486002a17495b/pybdm-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:20 2020"}