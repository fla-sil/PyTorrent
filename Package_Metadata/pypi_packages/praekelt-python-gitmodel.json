{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "===============\r\npython-gitmodel\r\n===============\r\nA distributed, versioned data store for Python\r\n----------------------------------------------\r\n\r\npython-gitmodel is a framework for persisting objects using Git for versioning\r\nand remote syncing.\r\n\r\nWhy?\r\n----\r\nAccording to `Git's README`_, Git is a \"stupid content tracker\". That means you\r\naren't limited to storing source code in git. The goal of this project is to\r\nprovide an object-level interface to use git as a schema-less data store, as\r\nwell as tools that take advantage of git's powerful versioning capabilities.\r\n\r\npython-gitmodel allows you to model your data using python, and provides an\r\neasy-to-use interface for storing that data as git objects.\r\n\r\npython-gitmodel is based on `libgit2`_, a pure C implementation of the Git core\r\nmethods. This means that instead of calling git commands via shell, we get\r\nto use git at native speed.\r\n\r\nWhat's so great about it?\r\n-------------------------\r\n* Schema-less data store\r\n* Never lose data. History is kept forever and can be restored using git tools.\r\n* Branch and merge your production data\r\n\r\n  * python-gitmodel can work with different branches\r\n  * branch or tag snapshots of your data\r\n  * experiment on production data using branches, for example, to test a migration\r\n\r\n* Ideal for content-driven applications\r\n\r\nExample usage\r\n-------------\r\nBelow we'll cover a use-case for a basic flat-page CMS.\r\n\r\nBasic model creation: \r\n\r\n.. code:: python\r\n\r\n  from gitmodel.workspace import Workspace\r\n  from gitmodel import fields\r\n  \r\n  ws = Workspace('path/to/my-repo/.git')\r\n\r\n  class Page(ws.GitModel):\r\n      slug = fields.SlugField() \r\n      title = fields.CharField()\r\n      content = fields.CharField()\r\n      published = fields.BooleanField(default=True)\r\n\r\nThe Workspace can be thought of as your git working directory. It also acts as\r\nthe \"porcelain\" layer to pygit2's \"plumbing\". In contrast to a working\r\ndirectory, the Workspace class does not make use of the repository's INDEX and\r\nHEAD files, and instead keeps track of these in memory.\r\n\r\nSaving objects:\r\n\r\n.. code:: python\r\n\r\n  page = Page(slug='example-page', title='Example Page')\r\n  page.content = '<h2>Here is an Example</h2><p>Lorem Ipsum</p>'\r\n  page.save()\r\n\r\n  print(page.id)\r\n  # abc99c394ab546dd9d6e3381f9c0fb4b\r\n\r\nBy default, objects get an auto-ID field which saves as a python UUID hex \r\n(don't confuse these with git hashes). You can easily customize which field in\r\nyour model acts as the ID field, for example:\r\n\r\n.. code:: python\r\n\r\n  class Page(ws.GitModel):\r\n      slug = fields.SlugField(id=True)\r\n  \r\n  # OR\r\n\r\n  class Page(ws.GitModel):\r\n      slug = fields.SlugField()\r\n\r\n      class Meta:\r\n          id_field = 'slug'\r\n \r\nObjects are not committed to the repository by default. They are, however,\r\nwritten into the object database as trees and blobs. The ``Workspace.index``\r\nobject is a ``pygit2.Tree`` that holds the uncommitted data. It's analagous to\r\nGit's index, except that the pointer is stored in memory. \r\n\r\nCreating commits is simple:\r\n\r\n.. code:: python\r\n  \r\n  oid = page.save(commit=True, message='Added an example page')\r\n  commit = ws.repo[oid] # a pygit2.Commit object\r\n  print(commit.message)\r\n\r\nYou can access previous commits using pygit2, and even view diffs between two\r\nversions of an object.\r\n\r\n.. code:: python\r\n  \r\n  # walking commits\r\n  for commit in ws.walk():\r\n      print(\"{}: {}\".format(commit.hex, commit.message)) \r\n  \r\n  # get a diff between two commits\r\n  head_commit = ws.branch.commit\r\n  prev_commit_oid = head_commit.parents[0]\r\n  print(prev_commit.diff(head_commit))\r\n\r\nObjects can be easily retrieved by their id:\r\n\r\n.. code:: python\r\n  \r\n  page = Page.get('example-page')\r\n  print(page.content)\r\n\r\n \r\nCaveat Emptor\r\n-------------\r\nGit doesn't perform very well on its own. If you need your git-backed data to\r\nperform well in a production environment, you need to get it a \"wingman\". \r\nSince python-gitmodel can be used in a variety of ways, it's up to you to\r\ndecide the best way to optimize it.\r\n\r\nStatus\r\n------\r\nThis project is under heavy development, and the API will likely change\r\ndrastically before a 1.0 release. Currently only basic model creation\r\nand saving instances will work. \r\n\r\nTODO\r\n----\r\n* Caching?\r\n* Indexing?\r\n* Query API?\r\n* Full documentation\r\n\r\n-------------------------------------------------------------------------------\r\n\r\npython-gitmodel was inspired by Rick Olson's talk, \"`Git, the Stupid NoSQL \r\nDatabase`_\" and Paul Downman's `GitModel`_ for ruby.\r\n\r\n.. _Git's README: https://github.com/git/git#readme\r\n.. _libgit2: http://libgit2.github.com\r\n.. _Git, the Stupid NoSQL Database: http://git-nosql-rubyconf.heroku.com/\r\n.. _GitModel: https://github.com/pauldowman/gitmodel/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "", "license": "Creative Commons Attribution-Noncommercial-Share Alike license", "maintainer": "", "maintainer_email": "", "name": "praekelt-python-gitmodel", "package_url": "https://pypi.org/project/praekelt-python-gitmodel/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/praekelt-python-gitmodel/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/praekelt-python-gitmodel/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"a-distributed-versioned-data-store-for-python\">\n<h2>A distributed, versioned data store for Python</h2>\n<p>python-gitmodel is a framework for persisting objects using Git for versioning\nand remote syncing.</p>\n</div>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>According to <a href=\"https://github.com/git/git#readme\" rel=\"nofollow\">Git\u2019s README</a>, Git is a \u201cstupid content tracker\u201d. That means you\naren\u2019t limited to storing source code in git. The goal of this project is to\nprovide an object-level interface to use git as a schema-less data store, as\nwell as tools that take advantage of git\u2019s powerful versioning capabilities.</p>\n<p>python-gitmodel allows you to model your data using python, and provides an\neasy-to-use interface for storing that data as git objects.</p>\n<p>python-gitmodel is based on <a href=\"http://libgit2.github.com\" rel=\"nofollow\">libgit2</a>, a pure C implementation of the Git core\nmethods. This means that instead of calling git commands via shell, we get\nto use git at native speed.</p>\n</div>\n<div id=\"what-s-so-great-about-it\">\n<h2>What\u2019s so great about it?</h2>\n<ul>\n<li>Schema-less data store</li>\n<li>Never lose data. History is kept forever and can be restored using git tools.</li>\n<li>Branch and merge your production data<ul>\n<li>python-gitmodel can work with different branches</li>\n<li>branch or tag snapshots of your data</li>\n<li>experiment on production data using branches, for example, to test a migration</li>\n</ul>\n</li>\n<li>Ideal for content-driven applications</li>\n</ul>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>Below we\u2019ll cover a use-case for a basic flat-page CMS.</p>\n<p>Basic model creation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gitmodel.workspace</span> <span class=\"kn\">import</span> <span class=\"n\">Workspace</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gitmodel</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n\n<span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">Workspace</span><span class=\"p\">(</span><span class=\"s1\">'path/to/my-repo/.git'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Page</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">GitModel</span><span class=\"p\">):</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">SlugField</span><span class=\"p\">()</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n    <span class=\"n\">published</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>The Workspace can be thought of as your git working directory. It also acts as\nthe \u201cporcelain\u201d layer to pygit2\u2019s \u201cplumbing\u201d. In contrast to a working\ndirectory, the Workspace class does not make use of the repository\u2019s INDEX and\nHEAD files, and instead keeps track of these in memory.</p>\n<p>Saving objects:</p>\n<pre><span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">Page</span><span class=\"p\">(</span><span class=\"n\">slug</span><span class=\"o\">=</span><span class=\"s1\">'example-page'</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Example Page'</span><span class=\"p\">)</span>\n<span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;h2&gt;Here is an Example&lt;/h2&gt;&lt;p&gt;Lorem Ipsum&lt;/p&gt;'</span>\n<span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"c1\"># abc99c394ab546dd9d6e3381f9c0fb4b</span>\n</pre>\n<p>By default, objects get an auto-ID field which saves as a python UUID hex\n(don\u2019t confuse these with git hashes). You can easily customize which field in\nyour model acts as the ID field, for example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Page</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">GitModel</span><span class=\"p\">):</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">SlugField</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OR</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Page</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">GitModel</span><span class=\"p\">):</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">SlugField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">id_field</span> <span class=\"o\">=</span> <span class=\"s1\">'slug'</span>\n</pre>\n<p>Objects are not committed to the repository by default. They are, however,\nwritten into the object database as trees and blobs. The <tt>Workspace.index</tt>\nobject is a <tt>pygit2.Tree</tt> that holds the uncommitted data. It\u2019s analagous to\nGit\u2019s index, except that the pointer is stored in memory.</p>\n<p>Creating commits is simple:</p>\n<pre><span class=\"n\">oid</span> <span class=\"o\">=</span> <span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">commit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'Added an example page'</span><span class=\"p\">)</span>\n<span class=\"n\">commit</span> <span class=\"o\">=</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">repo</span><span class=\"p\">[</span><span class=\"n\">oid</span><span class=\"p\">]</span> <span class=\"c1\"># a pygit2.Commit object</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">commit</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p>You can access previous commits using pygit2, and even view diffs between two\nversions of an object.</p>\n<pre><span class=\"c1\"># walking commits</span>\n<span class=\"k\">for</span> <span class=\"n\">commit</span> <span class=\"ow\">in</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">commit</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">,</span> <span class=\"n\">commit</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># get a diff between two commits</span>\n<span class=\"n\">head_commit</span> <span class=\"o\">=</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">branch</span><span class=\"o\">.</span><span class=\"n\">commit</span>\n<span class=\"n\">prev_commit_oid</span> <span class=\"o\">=</span> <span class=\"n\">head_commit</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">prev_commit</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">head_commit</span><span class=\"p\">))</span>\n</pre>\n<p>Objects can be easily retrieved by their id:</p>\n<pre><span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">Page</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'example-page'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"caveat-emptor\">\n<h2>Caveat Emptor</h2>\n<p>Git doesn\u2019t perform very well on its own. If you need your git-backed data to\nperform well in a production environment, you need to get it a \u201cwingman\u201d.\nSince python-gitmodel can be used in a variety of ways, it\u2019s up to you to\ndecide the best way to optimize it.</p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>This project is under heavy development, and the API will likely change\ndrastically before a 1.0 release. Currently only basic model creation\nand saving instances will work.</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Caching?</li>\n<li>Indexing?</li>\n<li>Query API?</li>\n<li>Full documentation</li>\n</ul>\n<hr class=\"docutils\">\n<p>python-gitmodel was inspired by Rick Olson\u2019s talk, \u201c<a href=\"http://git-nosql-rubyconf.heroku.com/\" rel=\"nofollow\">Git, the Stupid NoSQL\nDatabase</a>\u201d and Paul Downman\u2019s <a href=\"https://github.com/pauldowman/gitmodel/\" rel=\"nofollow\">GitModel</a> for ruby.</p>\n</div>\n\n          </div>"}, "last_serial": 2516256, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4ab6a83df52988a0bae64ce9bbd60a36", "sha256": "2d3fbea67a3402c0bcab9524def4e240cc3801e8f6624a7b3c9d7a6afc3fbde7"}, "downloads": -1, "filename": "praekelt-python-gitmodel-0.1.tar.gz", "has_sig": false, "md5_digest": "4ab6a83df52988a0bae64ce9bbd60a36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22318, "upload_time": "2014-08-14T09:19:04", "upload_time_iso_8601": "2014-08-14T09:19:04.595726Z", "url": "https://files.pythonhosted.org/packages/6d/5c/7f3f3499044b9d646fb70ad724c614ee117ea5d2235d90a640dab1b61da9/praekelt-python-gitmodel-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "53d903509f7f72671b380c2b88516cf0", "sha256": "168619648f4349011a2d2e0d17ff37fa67eb0504e2bc3f240ad6f9e11fe4e3a2"}, "downloads": -1, "filename": "praekelt-python-gitmodel-0.1.1.tar.gz", "has_sig": false, "md5_digest": "53d903509f7f72671b380c2b88516cf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22329, "upload_time": "2014-08-21T08:03:47", "upload_time_iso_8601": "2014-08-21T08:03:47.419662Z", "url": "https://files.pythonhosted.org/packages/eb/41/33b3c560a5edf0bccd69c5e765cac1fc04ec5b999d8ec35fd5e85f0d19c5/praekelt-python-gitmodel-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6d64544608295967fa017098cf5d88c0", "sha256": "0688825196b9b4b9b46f840308c5db5a6e85086ac8e6801378b93affc7fa899f"}, "downloads": -1, "filename": "praekelt-python-gitmodel-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6d64544608295967fa017098cf5d88c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23140, "upload_time": "2014-09-10T15:22:00", "upload_time_iso_8601": "2014-09-10T15:22:00.772213Z", "url": "https://files.pythonhosted.org/packages/d9/1f/ee5ede793308fafeedd41bba4aaa8cb4afea60bab30538e0d7e0f3fda750/praekelt-python-gitmodel-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8867676a879bf250255c73f5a475abe7", "sha256": "be16519646cae0593dd67d8ce171d06a320d42e35265a92a443f8d4a6cd80c81"}, "downloads": -1, "filename": "praekelt-python-gitmodel-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8867676a879bf250255c73f5a475abe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23151, "upload_time": "2014-09-30T11:06:04", "upload_time_iso_8601": "2014-09-30T11:06:04.606781Z", "url": "https://files.pythonhosted.org/packages/af/7a/5d000fa117d22c024f194302c772987263f4e43749ba3ea316fa1ae4b990/praekelt-python-gitmodel-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8867676a879bf250255c73f5a475abe7", "sha256": "be16519646cae0593dd67d8ce171d06a320d42e35265a92a443f8d4a6cd80c81"}, "downloads": -1, "filename": "praekelt-python-gitmodel-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8867676a879bf250255c73f5a475abe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23151, "upload_time": "2014-09-30T11:06:04", "upload_time_iso_8601": "2014-09-30T11:06:04.606781Z", "url": "https://files.pythonhosted.org/packages/af/7a/5d000fa117d22c024f194302c772987263f4e43749ba3ea316fa1ae4b990/praekelt-python-gitmodel-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:13 2020"}