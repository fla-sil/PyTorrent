{"info": {"author": "scutdig", "author_email": "zhongzc_arch@outlook.com", "bugtrack_url": null, "classifiers": [], "description": "# PyHCL\n[![Build Status](https://travis-ci.com/scutdig/py-hcl.svg?branch=master)](https://travis-ci.com/scutdig/py-hcl)\n[![codecov](https://codecov.io/gh/scutdig/py-hcl/branch/master/graph/badge.svg)](https://codecov.io/gh/scutdig/py-hcl)\n[![PyPI](https://img.shields.io/pypi/v/py-hcl.svg)](https://pypi.python.org/pypi)\n\nPyHCL is a hardware construct language like [Chisel](https://github.com/freechipsproject/chisel3) but more lightweight and more relaxed to use.\nAs a novel hardware construction framework embedded in Python, PyHCL supports several useful features include object-oriented, functional programming,\nand dynamically typed objects.\n\nThe goal of PyHCL is providing a complete design and verification tool flow for heterogeneous computing systems flexibly using the same design methodology.\n\nPyHCL is powered by [FIRRTL](https://github.com/freechipsproject/firrtl), an intermediate representation for digital circuit design. With the FIRRTL \ncompiler framework, PyHCL-generated circuits can be compiled to the widely-used HDL Verilog.  \n\n\n## Getting Started\n\n#### Installing PyHCL\n\n```shell script\n$ pip install py-hcl\n```\n\n#### Writing A Full Adder\nPyHCL defines modules using only simple Python syntax that looks like this:\n```python\nfrom py_hcl import *\n\nclass FullAdder(Module):\n    io = IO(\n        a=Input(Bool),\n        b=Input(Bool),\n        cin=Input(Bool),\n        sum=Output(Bool),\n        cout=Output(Bool),\n    )\n\n    # Generate the sum\n    io.sum <<= io.a ^ io.b ^ io.cin\n\n    # Generate the carry\n    io.cout <<= io.a & io.b | io.b & io.cin | io.a & io.cin\n```\n\n#### Compiling To FIRRTL\n\nCompiling module by calling `compile_to_firrtl`:\n```python\ncompile_to_firrtl(FullAdder, 'full_adder.fir')\n```\n\nWill generate the following FIRRTL codes:\n```\ncircuit FullAdder :\n  module FullAdder :\n    input clock : Clock\n    input reset : UInt<1>\n    input FullAdder_io_a : UInt<1>\n    input FullAdder_io_b : UInt<1>\n    input FullAdder_io_cin : UInt<1>\n    output FullAdder_io_sum : UInt<1>\n    output FullAdder_io_cout : UInt<1>\n\n    node _T_0 = xor(FullAdder_io_a, FullAdder_io_b)\n    node _T_1 = xor(_T_0, FullAdder_io_cin)\n    FullAdder_io_sum <= _T_1\n    node _T_2 = and(FullAdder_io_a, FullAdder_io_b)\n    node _T_3 = and(FullAdder_io_b, FullAdder_io_cin)\n    node _T_4 = or(_T_2, _T_3)\n    node _T_5 = and(FullAdder_io_a, FullAdder_io_cin)\n    node _T_6 = or(_T_4, _T_5)\n    FullAdder_io_cout <= _T_6\n```\n\n#### Compiling To Verilog\n\nWhile FIRRTL is generated, PyHCL's job is complete. To further compile to Verilog, the [FIRRTL compiler framework](\nhttps://github.com/freechipsproject/firrtl) is required:\n\n```shell script\n$ firrtl -i full_adder.fir\n```\n\nThen `FullAdder.v` will be generated:\n```verilog\nmodule FullAdder(\n  input   clock,\n  input   reset,\n  input   FullAdder_io_a,\n  input   FullAdder_io_b,\n  input   FullAdder_io_cin,\n  output  FullAdder_io_sum,\n  output  FullAdder_io_cout\n);\n  wire  _T_0;\n  wire  _T_2;\n  wire  _T_3;\n  wire  _T_4;\n  wire  _T_5;\n  assign _T_0 = FullAdder_io_a ^ FullAdder_io_b;\n  assign _T_2 = FullAdder_io_a & FullAdder_io_b;\n  assign _T_3 = FullAdder_io_b & FullAdder_io_cin;\n  assign _T_4 = _T_2 | _T_3;\n  assign _T_5 = FullAdder_io_a & FullAdder_io_cin;\n  assign FullAdder_io_sum = _T_0 ^ FullAdder_io_cin;\n  assign FullAdder_io_cout = _T_4 | _T_5;\nendmodule\n```\n\n\n## Features\n\n- Supports multiple data types: `UInt`, `SInt`, `Vector`, `Bundle`, `Clock`, `Memory`, and casual combination between them.\n- Supports object-oriented inheritance, can compose modules by writing fewer codes.\n- Supports a bunch of convenient operations, such as the addition of `UInt`s, `SInt`s, `Vector`s and `Bundle`s.\n- Supports the parameterization of variables, such as bit width, with the syntax facilities of the host language Python.\n\n\n## TODO\n\n- [ ] Supports more operations\n- [ ] PyHCL's verification facility", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scutdig/pyhcl", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-hcl", "package_url": "https://pypi.org/project/py-hcl/", "platform": "", "project_url": "https://pypi.org/project/py-hcl/", "project_urls": {"Homepage": "https://github.com/scutdig/pyhcl"}, "release_url": "https://pypi.org/project/py-hcl/0.1.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A Hardware Construct Language", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyHCL</h1>\n<p><a href=\"https://travis-ci.com/scutdig/py-hcl\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dab3be2ad54c6b542870c27772839641fc80ddc5/68747470733a2f2f7472617669732d63692e636f6d2f736375746469672f70792d68636c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/scutdig/py-hcl\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e0a33642d1569908f5205f85ee160196b713f1f/68747470733a2f2f636f6465636f762e696f2f67682f736375746469672f70792d68636c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbddda7e0de2368ee4ce8abc35d77a4d1ba6b993/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70792d68636c2e737667\"></a></p>\n<p>PyHCL is a hardware construct language like <a href=\"https://github.com/freechipsproject/chisel3\" rel=\"nofollow\">Chisel</a> but more lightweight and more relaxed to use.\nAs a novel hardware construction framework embedded in Python, PyHCL supports several useful features include object-oriented, functional programming,\nand dynamically typed objects.</p>\n<p>The goal of PyHCL is providing a complete design and verification tool flow for heterogeneous computing systems flexibly using the same design methodology.</p>\n<p>PyHCL is powered by <a href=\"https://github.com/freechipsproject/firrtl\" rel=\"nofollow\">FIRRTL</a>, an intermediate representation for digital circuit design. With the FIRRTL\ncompiler framework, PyHCL-generated circuits can be compiled to the widely-used HDL Verilog.</p>\n<h2>Getting Started</h2>\n<h4>Installing PyHCL</h4>\n<pre>$ pip install py-hcl\n</pre>\n<h4>Writing A Full Adder</h4>\n<p>PyHCL defines modules using only simple Python syntax that looks like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_hcl</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FullAdder</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"n\">io</span> <span class=\"o\">=</span> <span class=\"n\">IO</span><span class=\"p\">(</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">Bool</span><span class=\"p\">),</span>\n        <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">Bool</span><span class=\"p\">),</span>\n        <span class=\"n\">cin</span><span class=\"o\">=</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">Bool</span><span class=\"p\">),</span>\n        <span class=\"nb\">sum</span><span class=\"o\">=</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">Bool</span><span class=\"p\">),</span>\n        <span class=\"n\">cout</span><span class=\"o\">=</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">Bool</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Generate the sum</span>\n    <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">sum</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">^</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">^</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">cin</span>\n\n    <span class=\"c1\"># Generate the carry</span>\n    <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">&amp;</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">|</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">&amp;</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">cin</span> <span class=\"o\">|</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">&amp;</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">cin</span>\n</pre>\n<h4>Compiling To FIRRTL</h4>\n<p>Compiling module by calling <code>compile_to_firrtl</code>:</p>\n<pre><span class=\"n\">compile_to_firrtl</span><span class=\"p\">(</span><span class=\"n\">FullAdder</span><span class=\"p\">,</span> <span class=\"s1\">'full_adder.fir'</span><span class=\"p\">)</span>\n</pre>\n<p>Will generate the following FIRRTL codes:</p>\n<pre><code>circuit FullAdder :\n  module FullAdder :\n    input clock : Clock\n    input reset : UInt&lt;1&gt;\n    input FullAdder_io_a : UInt&lt;1&gt;\n    input FullAdder_io_b : UInt&lt;1&gt;\n    input FullAdder_io_cin : UInt&lt;1&gt;\n    output FullAdder_io_sum : UInt&lt;1&gt;\n    output FullAdder_io_cout : UInt&lt;1&gt;\n\n    node _T_0 = xor(FullAdder_io_a, FullAdder_io_b)\n    node _T_1 = xor(_T_0, FullAdder_io_cin)\n    FullAdder_io_sum &lt;= _T_1\n    node _T_2 = and(FullAdder_io_a, FullAdder_io_b)\n    node _T_3 = and(FullAdder_io_b, FullAdder_io_cin)\n    node _T_4 = or(_T_2, _T_3)\n    node _T_5 = and(FullAdder_io_a, FullAdder_io_cin)\n    node _T_6 = or(_T_4, _T_5)\n    FullAdder_io_cout &lt;= _T_6\n</code></pre>\n<h4>Compiling To Verilog</h4>\n<p>While FIRRTL is generated, PyHCL's job is complete. To further compile to Verilog, the <a href=\"https://github.com/freechipsproject/firrtl\" rel=\"nofollow\">FIRRTL compiler framework</a> is required:</p>\n<pre>$ firrtl -i full_adder.fir\n</pre>\n<p>Then <code>FullAdder.v</code> will be generated:</p>\n<pre><span class=\"k\">module</span> <span class=\"n\">FullAdder</span><span class=\"p\">(</span>\n  <span class=\"k\">input</span>   <span class=\"n\">clock</span><span class=\"p\">,</span>\n  <span class=\"k\">input</span>   <span class=\"n\">reset</span><span class=\"p\">,</span>\n  <span class=\"k\">input</span>   <span class=\"n\">FullAdder_io_a</span><span class=\"p\">,</span>\n  <span class=\"k\">input</span>   <span class=\"n\">FullAdder_io_b</span><span class=\"p\">,</span>\n  <span class=\"k\">input</span>   <span class=\"n\">FullAdder_io_cin</span><span class=\"p\">,</span>\n  <span class=\"k\">output</span>  <span class=\"n\">FullAdder_io_sum</span><span class=\"p\">,</span>\n  <span class=\"k\">output</span>  <span class=\"n\">FullAdder_io_cout</span>\n<span class=\"p\">);</span>\n  <span class=\"kt\">wire</span>  <span class=\"n\">_T_0</span><span class=\"p\">;</span>\n  <span class=\"kt\">wire</span>  <span class=\"n\">_T_2</span><span class=\"p\">;</span>\n  <span class=\"kt\">wire</span>  <span class=\"n\">_T_3</span><span class=\"p\">;</span>\n  <span class=\"kt\">wire</span>  <span class=\"n\">_T_4</span><span class=\"p\">;</span>\n  <span class=\"kt\">wire</span>  <span class=\"n\">_T_5</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">_T_0</span> <span class=\"o\">=</span> <span class=\"n\">FullAdder_io_a</span> <span class=\"o\">^</span> <span class=\"n\">FullAdder_io_b</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">_T_2</span> <span class=\"o\">=</span> <span class=\"n\">FullAdder_io_a</span> <span class=\"o\">&amp;</span> <span class=\"n\">FullAdder_io_b</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">_T_3</span> <span class=\"o\">=</span> <span class=\"n\">FullAdder_io_b</span> <span class=\"o\">&amp;</span> <span class=\"n\">FullAdder_io_cin</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">_T_4</span> <span class=\"o\">=</span> <span class=\"n\">_T_2</span> <span class=\"o\">|</span> <span class=\"n\">_T_3</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">_T_5</span> <span class=\"o\">=</span> <span class=\"n\">FullAdder_io_a</span> <span class=\"o\">&amp;</span> <span class=\"n\">FullAdder_io_cin</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">FullAdder_io_sum</span> <span class=\"o\">=</span> <span class=\"n\">_T_0</span> <span class=\"o\">^</span> <span class=\"n\">FullAdder_io_cin</span><span class=\"p\">;</span>\n  <span class=\"k\">assign</span> <span class=\"n\">FullAdder_io_cout</span> <span class=\"o\">=</span> <span class=\"n\">_T_4</span> <span class=\"o\">|</span> <span class=\"n\">_T_5</span><span class=\"p\">;</span>\n<span class=\"k\">endmodule</span>\n</pre>\n<h2>Features</h2>\n<ul>\n<li>Supports multiple data types: <code>UInt</code>, <code>SInt</code>, <code>Vector</code>, <code>Bundle</code>, <code>Clock</code>, <code>Memory</code>, and casual combination between them.</li>\n<li>Supports object-oriented inheritance, can compose modules by writing fewer codes.</li>\n<li>Supports a bunch of convenient operations, such as the addition of <code>UInt</code>s, <code>SInt</code>s, <code>Vector</code>s and <code>Bundle</code>s.</li>\n<li>Supports the parameterization of variables, such as bit width, with the syntax facilities of the host language Python.</li>\n</ul>\n<h2>TODO</h2>\n<ul>\n<li>[ ] Supports more operations</li>\n<li>[ ] PyHCL's verification facility</li>\n</ul>\n\n          </div>"}, "last_serial": 6400458, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "122058c348a73849a125e8f5c685c745", "sha256": "882c3d7bf26d551986e63b1cc8baab0a32636f1cad2a0e1150a9e2fd1ae56146"}, "downloads": -1, "filename": "py_hcl-0.0.1.tar.gz", "has_sig": false, "md5_digest": "122058c348a73849a125e8f5c685c745", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1288, "upload_time": "2019-11-11T03:48:42", "upload_time_iso_8601": "2019-11-11T03:48:42.725707Z", "url": "https://files.pythonhosted.org/packages/11/7d/037fae3d0db2a55dc5781faec7a06cc47be7216ceff32ee0217f51ea9e2c/py_hcl-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "89e96f61fc60d940435b6585c00f1798", "sha256": "87992d5ceb8fcab513eb82b9a679052fe4b392a72c7b218afa23c0c2c96e4d9d"}, "downloads": -1, "filename": "py_hcl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "89e96f61fc60d940435b6585c00f1798", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34182, "upload_time": "2020-01-05T11:15:20", "upload_time_iso_8601": "2020-01-05T11:15:20.012489Z", "url": "https://files.pythonhosted.org/packages/0c/28/95da9504935dc126c0957874cb77e85c405fad06f70e25371f226a72561e/py_hcl-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "63a6ff17e78c6d82369087919491e9ca", "sha256": "0693f142afc55ee745e1592e69a21fef355aaee973b69ca4a03249fec4f0c9e7"}, "downloads": -1, "filename": "py_hcl-0.1.1.tar.gz", "has_sig": false, "md5_digest": "63a6ff17e78c6d82369087919491e9ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35729, "upload_time": "2020-01-05T12:38:37", "upload_time_iso_8601": "2020-01-05T12:38:37.259176Z", "url": "https://files.pythonhosted.org/packages/68/14/c1a2181b89df8c096e346033e776aa4ea0cdc2cbbcb83976f98a20a35b81/py_hcl-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0a0e8025f881bde71369482bd9295faa", "sha256": "3b809d33498b3c0edbb3158e3b29495d5f635986d565e13871de008a53e242dc"}, "downloads": -1, "filename": "py_hcl-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0a0e8025f881bde71369482bd9295faa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35442, "upload_time": "2020-01-06T03:54:11", "upload_time_iso_8601": "2020-01-06T03:54:11.532301Z", "url": "https://files.pythonhosted.org/packages/ec/c2/2e177133307c605b924b73467f6bf29f66aff2b6e244c54fa02bd97dc51c/py_hcl-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a0e8025f881bde71369482bd9295faa", "sha256": "3b809d33498b3c0edbb3158e3b29495d5f635986d565e13871de008a53e242dc"}, "downloads": -1, "filename": "py_hcl-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0a0e8025f881bde71369482bd9295faa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35442, "upload_time": "2020-01-06T03:54:11", "upload_time_iso_8601": "2020-01-06T03:54:11.532301Z", "url": "https://files.pythonhosted.org/packages/ec/c2/2e177133307c605b924b73467f6bf29f66aff2b6e244c54fa02bd97dc51c/py_hcl-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:29 2020"}