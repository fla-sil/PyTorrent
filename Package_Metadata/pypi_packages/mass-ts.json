{"info": {"author": "Tyler Marrs", "author_email": "tylerwmarrs@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<div style=\"text-align:center\"><img src=\"docs/mass-logo.png\" /></div>\n\nIntroduction\n------------\n[![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Check%20out%20mass-ts!%20MASS%20implementations%20in%20Python%202%20and%203.%20Free%20and%20open%20source.&url=https://github.com/tylerwmarrs/mass-ts&via=tylerwmarrs&hashtags=datascience,datamining,timeseries)\n\n[<img src=\"https://img.shields.io/pypi/v/mass_ts.svg\">](https://pypi.python.org/pypi/mass_ts)\n[<img src=\"https://img.shields.io/travis/tylerwmarrs/mass-ts.svg\">](https://travis-ci.org/tylerwmarrs/mass-ts)\n\nMASS allows you to search a time series for a subquery resulting in an array of distances. These array of distances enable you to identify similar or dissimilar subsequences compared to your query. At its core, MASS computes Euclidean distances under z-normalization in an efficient manner and is domain agnostic in nature. It is the fundamental algorithm that the matrix profile algorithm is built on top of. \n\nmass-ts is a python 2 and 3 compatible library.\n\nFree software: Apache Software License 2.0\n\n\nFeatures\n--------\n\n**Original Author's Algorithms**\n* MASS - the first implementation of MASS\n* MASS2 - the second implementation of MASS that is significantly faster. Typically this is the one you will use.\n* MASS3 - a piecewise version of MASS2 that can be tuned to your hardware. Generally this is used to search very large time series.\n* MASS_weighted - TODO\n\n**Library Specific Algorithms**\n* MASS2_batch - a batch version of MASS2 that reduces overall memory usage, provides parallelization and enables you to find top K number of matches within the time series. The goal of using this implementation is for very large time series similarity search.\n* top_k_motifs - find the top K number of similar subsequences to your given query. It returns the starting index of the subsequence.\n* top_k_discords - find the top K number of dissimilar subsequences to your given query. It returns the starting index of the subsequence.\n* MASS2_gpu - a GPU implementation of MASS2 leveraging the Python library CuPy.\n\nInstallation\n------------\n```\npip install mass-ts\n```\n\nGPU Support\n-----------\nPlease follow the [installation guide for CuPy](https://docs-cupy.chainer.org/en/stable/install.html). It covers what drivers and environmental dependencies are required. Once you are finished there, you can install GPU support for the algorithms.\n\n```\npip install mass-ts[gpu]\n```\n\nExample Usage\n-------------\nA dedicated repository for practical examples can be found at the [mass-ts-examples repository](https://github.com/tylerwmarrs/mass-ts-examples).\n\n```python\n\nimport numpy as np\nimport mass_ts as mts\n\nts = np.loadtxt('ts.txt')\nquery = np.loadtxt('query.txt')\n\n# mass\ndistances = mts.mass(ts, query)\n\n# mass2\ndistances = mts.mass2(ts, query)\n\n# mass3\ndistances = mts.mass3(ts, query, 256)\n\n# mass2_gpu\ndistances = mts.mass2_gpu(ts, query)\n\n# mass2_batch\n# start a multi-threaded batch job with all cpu cores and give me the top 5 matches.\n# note that batch_size partitions your time series into a subsequence similarity search.\n# even for large time series in single threaded mode, this is much more memory efficient than\n# MASS2 on its own.\nbatch_size = 10000\ntop_matches = 5\nn_jobs = -1\nindices, distances = mts.mass2_batch(ts, query, batch_size, \n    top_matches=top_matches, n_jobs=n_jobs)\n\n# find minimum distance\nmin_idx = np.argmin(distances)\n\n# find top 4 motif starting indices\nk = 4\nexclusion_zone = 25\ntop_motifs = mts.top_k_motifs(distances, k, exclusion_zone)\n\n# find top 4 discord starting indices\nk = 4\nexclusion_zone = 25\ntop_discords = mts.top_k_discords(distances, k, exclusion_zone)\n```\n\nCitations\n---------\nAbdullah Mueen, Yan Zhu, Michael Yeh, Kaveh Kamgar, Krishnamurthy Viswanathan, Chetan Kumar Gupta and Eamonn Keogh (2015), The Fastest Similarity Search Algorithm for Time Series Subsequences under Euclidean Distance, URL: http://www.cs.unm.edu/~mueen/FastestSimilaritySearch.html\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-05-16)\n------------------\n\n* First release on PyPI.\n\n\n0.1.1 (2019-05-17)\n------------------\n\n* Minor precision bug fixes.\n\n\n0.1.2 (2019-05-19)\n------------------\n\n* mass2_batch release for efficient large time series searching.\n\n0.1.3 (2019-05-19)\n------------------\n\n* top_k_motifs - find the top k similar subsequences given a distance profile.\n* top_k_discords - find the top k dissimilar subsequences given a distance profile.\n\n0.1.4 (2019-10-04)\n------------------\n\n* add GPU implementation of MASS2 - mass2_gpu.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matrix-profile-foundation/mass_ts", "keywords": "mass_ts", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "mass-ts", "package_url": "https://pypi.org/project/mass-ts/", "platform": "", "project_url": "https://pypi.org/project/mass-ts/", "project_urls": {"Homepage": "https://github.com/matrix-profile-foundation/mass_ts"}, "release_url": "https://pypi.org/project/mass-ts/0.1.4/", "requires_dist": ["numpy", "cupy-cuda101 (==6.2.0) ; extra == 'gpu'"], "requires_python": "", "summary": "MASS (Mueen's Algorithm for Similarity Search)", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/25d34a79623ed77308fb7d49d04733d776d1e2c5/646f63732f6d6173732d6c6f676f2e706e67\"></div>\n<h2>Introduction</h2>\n<p><a href=\"https://twitter.com/intent/tweet?text=Check%20out%20mass-ts!%20MASS%20implementations%20in%20Python%202%20and%203.%20Free%20and%20open%20source.&amp;url=https://github.com/tylerwmarrs/mass-ts&amp;via=tylerwmarrs&amp;hashtags=datascience,datamining,timeseries\" rel=\"nofollow\"><img alt=\"Tweet\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c681f57e9ba5a57463ba379a8d5671b3c132cde/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c\"></a></p>\n<p><a href=\"https://pypi.python.org/pypi/mass_ts\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a871b033239c37335e9e88868582ba6c7e1fa39/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6173735f74732e737667\"></a>\n<a href=\"https://travis-ci.org/tylerwmarrs/mass-ts\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e1f686523b3ba650307b7d61538db0b0fa17ad2/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f74796c6572776d617272732f6d6173732d74732e737667\"></a></p>\n<p>MASS allows you to search a time series for a subquery resulting in an array of distances. These array of distances enable you to identify similar or dissimilar subsequences compared to your query. At its core, MASS computes Euclidean distances under z-normalization in an efficient manner and is domain agnostic in nature. It is the fundamental algorithm that the matrix profile algorithm is built on top of.</p>\n<p>mass-ts is a python 2 and 3 compatible library.</p>\n<p>Free software: Apache Software License 2.0</p>\n<h2>Features</h2>\n<p><strong>Original Author's Algorithms</strong></p>\n<ul>\n<li>MASS - the first implementation of MASS</li>\n<li>MASS2 - the second implementation of MASS that is significantly faster. Typically this is the one you will use.</li>\n<li>MASS3 - a piecewise version of MASS2 that can be tuned to your hardware. Generally this is used to search very large time series.</li>\n<li>MASS_weighted - TODO</li>\n</ul>\n<p><strong>Library Specific Algorithms</strong></p>\n<ul>\n<li>MASS2_batch - a batch version of MASS2 that reduces overall memory usage, provides parallelization and enables you to find top K number of matches within the time series. The goal of using this implementation is for very large time series similarity search.</li>\n<li>top_k_motifs - find the top K number of similar subsequences to your given query. It returns the starting index of the subsequence.</li>\n<li>top_k_discords - find the top K number of dissimilar subsequences to your given query. It returns the starting index of the subsequence.</li>\n<li>MASS2_gpu - a GPU implementation of MASS2 leveraging the Python library CuPy.</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install mass-ts\n</code></pre>\n<h2>GPU Support</h2>\n<p>Please follow the <a href=\"https://docs-cupy.chainer.org/en/stable/install.html\" rel=\"nofollow\">installation guide for CuPy</a>. It covers what drivers and environmental dependencies are required. Once you are finished there, you can install GPU support for the algorithms.</p>\n<pre><code>pip install mass-ts[gpu]\n</code></pre>\n<h2>Example Usage</h2>\n<p>A dedicated repository for practical examples can be found at the <a href=\"https://github.com/tylerwmarrs/mass-ts-examples\" rel=\"nofollow\">mass-ts-examples repository</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mass_ts</span> <span class=\"k\">as</span> <span class=\"nn\">mts</span>\n\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span><span class=\"s1\">'ts.txt'</span><span class=\"p\">)</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span><span class=\"s1\">'query.txt'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mass</span>\n<span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">mts</span><span class=\"o\">.</span><span class=\"n\">mass</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mass2</span>\n<span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">mts</span><span class=\"o\">.</span><span class=\"n\">mass2</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mass3</span>\n<span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">mts</span><span class=\"o\">.</span><span class=\"n\">mass3</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mass2_gpu</span>\n<span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">mts</span><span class=\"o\">.</span><span class=\"n\">mass2_gpu</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mass2_batch</span>\n<span class=\"c1\"># start a multi-threaded batch job with all cpu cores and give me the top 5 matches.</span>\n<span class=\"c1\"># note that batch_size partitions your time series into a subsequence similarity search.</span>\n<span class=\"c1\"># even for large time series in single threaded mode, this is much more memory efficient than</span>\n<span class=\"c1\"># MASS2 on its own.</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">top_matches</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">n_jobs</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">indices</span><span class=\"p\">,</span> <span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">mts</span><span class=\"o\">.</span><span class=\"n\">mass2_batch</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">,</span> \n    <span class=\"n\">top_matches</span><span class=\"o\">=</span><span class=\"n\">top_matches</span><span class=\"p\">,</span> <span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"n\">n_jobs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># find minimum distance</span>\n<span class=\"n\">min_idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">distances</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># find top 4 motif starting indices</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">exclusion_zone</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n<span class=\"n\">top_motifs</span> <span class=\"o\">=</span> <span class=\"n\">mts</span><span class=\"o\">.</span><span class=\"n\">top_k_motifs</span><span class=\"p\">(</span><span class=\"n\">distances</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">exclusion_zone</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># find top 4 discord starting indices</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">exclusion_zone</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n<span class=\"n\">top_discords</span> <span class=\"o\">=</span> <span class=\"n\">mts</span><span class=\"o\">.</span><span class=\"n\">top_k_discords</span><span class=\"p\">(</span><span class=\"n\">distances</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">exclusion_zone</span><span class=\"p\">)</span>\n</pre>\n<h2>Citations</h2>\n<p>Abdullah Mueen, Yan Zhu, Michael Yeh, Kaveh Kamgar, Krishnamurthy Viswanathan, Chetan Kumar Gupta and Eamonn Keogh (2015), The Fastest Similarity Search Algorithm for Time Series Subsequences under Euclidean Distance, URL: <a href=\"http://www.cs.unm.edu/%7Emueen/FastestSimilaritySearch.html\" rel=\"nofollow\">http://www.cs.unm.edu/~mueen/FastestSimilaritySearch.html</a></p>\n<h1>=======\nHistory</h1>\n<h2>0.1.0 (2019-05-16)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n<h2>0.1.1 (2019-05-17)</h2>\n<ul>\n<li>Minor precision bug fixes.</li>\n</ul>\n<h2>0.1.2 (2019-05-19)</h2>\n<ul>\n<li>mass2_batch release for efficient large time series searching.</li>\n</ul>\n<h2>0.1.3 (2019-05-19)</h2>\n<ul>\n<li>top_k_motifs - find the top k similar subsequences given a distance profile.</li>\n<li>top_k_discords - find the top k dissimilar subsequences given a distance profile.</li>\n</ul>\n<h2>0.1.4 (2019-10-04)</h2>\n<ul>\n<li>add GPU implementation of MASS2 - mass2_gpu.</li>\n</ul>\n\n          </div>"}, "last_serial": 6425538, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "e85e8d25e48c21cdcaea5344b05934ec", "sha256": "e07e021138466d9ca0ab58145ff6b54e6cc96fd15286815d2f7b69ef76ec5355"}, "downloads": -1, "filename": "mass_ts-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e85e8d25e48c21cdcaea5344b05934ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9424, "upload_time": "2019-05-17T19:17:08", "upload_time_iso_8601": "2019-05-17T19:17:08.227657Z", "url": "https://files.pythonhosted.org/packages/4e/fb/5875e26975260dd9b8059ad59672a0878ca4fc08feacf457291777ecbd90/mass_ts-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb6e6b907dc4c39d28d93bc7beb45c6f", "sha256": "a7215b620bfa75dca85ce9a7093f981a004f64a272f19be6102ec26f3bc17fa5"}, "downloads": -1, "filename": "mass_ts-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fb6e6b907dc4c39d28d93bc7beb45c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27759, "upload_time": "2019-05-17T19:17:09", "upload_time_iso_8601": "2019-05-17T19:17:09.617210Z", "url": "https://files.pythonhosted.org/packages/be/46/0f45509d7490fa3ca8a1339ce9412d19f5c5f8d059863144b52cd6987dbc/mass_ts-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a44b5bd4c2b370404c4b380918e429a5", "sha256": "31f931736cbf57262a0b7e3308c22788961241d14afe721cd9ae8701f6df6afe"}, "downloads": -1, "filename": "mass_ts-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a44b5bd4c2b370404c4b380918e429a5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12818, "upload_time": "2019-05-19T11:58:12", "upload_time_iso_8601": "2019-05-19T11:58:12.479585Z", "url": "https://files.pythonhosted.org/packages/33/6c/73880af04cea9a7c2c48a9fa69b2c1597788b4940632a06525c9c2870890/mass_ts-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72fdf05e212dde9544e2e0df5704fbd4", "sha256": "0f68a15b30a1c763186250633a5963842601beb8b37975cb5862f3ab74da0f3a"}, "downloads": -1, "filename": "mass_ts-0.1.2.tar.gz", "has_sig": false, "md5_digest": "72fdf05e212dde9544e2e0df5704fbd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29967, "upload_time": "2019-05-19T11:58:14", "upload_time_iso_8601": "2019-05-19T11:58:14.030776Z", "url": "https://files.pythonhosted.org/packages/c2/7b/6bfb073c1953ada6a7b1db104dbb32c1452af31e8efb879201ccbd2bee08/mass_ts-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "70361083c87a7cf7de5b3c9e0f362fbd", "sha256": "c91722f768780915435c3c1b024714852c43d9a9f05b3cbbdda3e07f9e7a065b"}, "downloads": -1, "filename": "mass_ts-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "70361083c87a7cf7de5b3c9e0f362fbd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14563, "upload_time": "2019-05-21T07:13:41", "upload_time_iso_8601": "2019-05-21T07:13:41.568174Z", "url": "https://files.pythonhosted.org/packages/91/ec/685ac442d86b2d718fd49348044341328232ff60391b7baadf0030e9502d/mass_ts-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "615bfb3b910924f0b4f0d7aa5a54014f", "sha256": "e7eb667eaaa73ee5dce4930d1c5151348ad9f978978f02f386fcfcdd2c54ac6d"}, "downloads": -1, "filename": "mass_ts-0.1.3.tar.gz", "has_sig": false, "md5_digest": "615bfb3b910924f0b4f0d7aa5a54014f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45364, "upload_time": "2019-05-21T07:13:43", "upload_time_iso_8601": "2019-05-21T07:13:43.273943Z", "url": "https://files.pythonhosted.org/packages/6d/b2/ad7614b4a264add3f6fa5aa6e40e0e8633db0b6dbdfbb59136eeffefe9d7/mass_ts-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "1dca02b458dfd4d96ed32a4dffd3abf3", "sha256": "3c9c41944115c0776d652fa89a33b5870534d153d44af9e25ffb0448abac2a5b"}, "downloads": -1, "filename": "mass_ts-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1dca02b458dfd4d96ed32a4dffd3abf3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15216, "upload_time": "2019-10-04T18:36:11", "upload_time_iso_8601": "2019-10-04T18:36:11.884991Z", "url": "https://files.pythonhosted.org/packages/58/90/a66739db6d92edcf51e8c672372305511444b562e175f0f1a53adcfab18f/mass_ts-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b24e35f09d2c495cd797f35d68f8d89", "sha256": "1629515379042ec5166454f5bd68d13cb7a0023d6589a4d2e1d9a96e7c4712a2"}, "downloads": -1, "filename": "mass_ts-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3b24e35f09d2c495cd797f35d68f8d89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48936, "upload_time": "2019-10-04T18:36:13", "upload_time_iso_8601": "2019-10-04T18:36:13.481529Z", "url": "https://files.pythonhosted.org/packages/0e/c8/814623a4c4d19e4e085e8b81d071b02c7b3e88889ecc448fd61870854255/mass_ts-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1dca02b458dfd4d96ed32a4dffd3abf3", "sha256": "3c9c41944115c0776d652fa89a33b5870534d153d44af9e25ffb0448abac2a5b"}, "downloads": -1, "filename": "mass_ts-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1dca02b458dfd4d96ed32a4dffd3abf3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15216, "upload_time": "2019-10-04T18:36:11", "upload_time_iso_8601": "2019-10-04T18:36:11.884991Z", "url": "https://files.pythonhosted.org/packages/58/90/a66739db6d92edcf51e8c672372305511444b562e175f0f1a53adcfab18f/mass_ts-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b24e35f09d2c495cd797f35d68f8d89", "sha256": "1629515379042ec5166454f5bd68d13cb7a0023d6589a4d2e1d9a96e7c4712a2"}, "downloads": -1, "filename": "mass_ts-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3b24e35f09d2c495cd797f35d68f8d89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48936, "upload_time": "2019-10-04T18:36:13", "upload_time_iso_8601": "2019-10-04T18:36:13.481529Z", "url": "https://files.pythonhosted.org/packages/0e/c8/814623a4c4d19e4e085e8b81d071b02c7b3e88889ecc448fd61870854255/mass_ts-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:28 2020"}