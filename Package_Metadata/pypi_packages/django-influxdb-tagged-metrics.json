{"info": {"author": "Martin Brochhaus", "author_email": "mbrochh@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Django InfluxDB Metrics\n=======================\n\nA reusable Django app that sends metrics about your project to InfluxDB.\n\nIMPORTANT NOTE: This release only supports InfluxDB >= 0.9. We have also dropped\na few measurements like CPU, memory and disk-space because\n[Telegraf](https://github.com/influxdb/telegraf) can collect these in a much\nmuch better way.\n\nPrerequisites\n-------------\n\nThis module has celery support but you don't have to use it, if you don't want\nto.\n\nInstallation\n------------\n\nTo get the latest stable release from PyPi\n\n.. code-block:: bash\n\n    pip install django-influxdb-metrics\n\nTo get the latest commit from GitHub\n\n.. code-block:: bash\n\n    pip install -e git+git://github.com/lwbco/django-influxdb-tagged-metrics.git#egg=influxdb_metrics\n\nAdd ``influxdb_metrics`` to your ``INSTALLED_APPS``\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...,\n        'influxdb_metrics',\n    )\n\nSettings\n--------\n\nYou need to set the following settings::\n\n    INFLUXDB_HOST = 'your.influxdbhost.com'\n    INFLUXDB_PORT = '8086'\n    INFLUXDB_USER = 'youruser'\n    INFLUXDB_PASSWORD = 'yourpassword'\n    INFLUXDB_DATABASE = 'yourdatabase'\n\n    # This is for tagging the data sent to your influxdb instance so that you\n    # can query by host\n    INFLUXDB_TAGS_HOST = 'your_hostname'\n\n    # Seconds to wait for the request to the influxdb server before timing out\n    INFLUXDB_TIMEOUT = 5\n\n    # Set this to True if you are using Celery\n    INFLUXDB_USE_CELERY = True\n\n    # Set this to True if you are not using Celery\n    INFLUXDB_USE_THREADING = False\n\nIf you would like to disable sending of metrics (i.e. for local development),\nyou can set::\n\n    INFLUXDB_DISABLED = True\n\nIf you are having trouble getting the postgresql database size, you might need\nto set::\n\n    INFLUXDB_POSTGRESQL_USE_LOCALHOST = True\n\nUse ssl with INFLUXDB_HOST::\n\n    INFLUXDB_SSL = True # default is False\n\nOptional with ssl::\n\n    INFLUXDB_VERIFY_SSL = True # default is False\n\n\nUsage\n-----\n\nThe app comes with several management commands which you should schedule via\ncrontab.\n\n\ninfluxdb_get_postgresql_size\n++++++++++++++++++++++++++++\n\nCollects the total disk usage for the given database.\n\nYou can run it like this::\n\n    ./manage.py influxdb_get_postgresql_size db_role db_name\n\nYou should provide role and name for the database you want to measure. Make\nsure that you have a ``.pgpass`` file in place so that you don't need to enter\na password for this user.\n\nYou could schedule it like this::\n\n    0 */1 * * * cd /path/to/project/ && /path/to/venv/bin/python /path/to/project/manage.py influxdb_get_postgresql_size db_role db_name > $HOME/mylogs/cron/influxdb-get-postgresql-size.log 2>&1\n\nThe measurement created in your InfluxDB will be named `postgresql_size` and\nwill have the following fields:\n\n* ``value``: The total database size in bytes\n\n\nInfluxDbEmailBackend\n++++++++++++++++++++\n\nIf you would like to track the number of emails sent, you can set your\n`EMAIL_BACKEND`::\n\n    EMAIL_BACKEND = 'influxdb_metrics.email.InfluxDbEmailBackend'\n\nWhen the setting is set, metrics will be sent every time you run ``.manage.py\nsend_mail``.\n\nThe measurement created in your InfluxDB will be named ``django_email_sent``\nand will have the following fields:\n\n* ``value``: The number of emails sent\n\n\nInfluxDBRequestMiddleware\n+++++++++++++++++++++++++\n\nIf you would like to track the number and speed of all requests, you can add\nthe ``InfluxDBRequestMiddleware`` at the top of your ``MIDDLEWARE_CLASSES``::\n\n    MIDDLEWARE_CLASSES = [\n        'influxdb_metrics.middleware.InfluxDBRequestMiddleware',\n        ...\n    ]\n\nThe measurement created in your InfluxDB will be named ``django.request`` and\nwill have the following fields:\n\n* ``value``: The request time in milliseconds.\n\nAdditionally, it will have the following tags:\n\n* ``is_ajax``: `true` if it was an AJAX request, otherwise `false`\n* ``is_authenticated``: `true` if user was authenticated, otherwise `false`\n* ``is_staff``: `true` if user was a staff user, otherwise `false`\n* ``is_superuser``: `true` user was a superuser, otherwise `false`\n* ``method``: The request method (`GET` or `POST`)\n* ``module``: The python module that handled the request\n* ``view``: The view class or function that handled the request\n* ``referer``: The full URL from `request.META['HTTP_REFERER']`\n* ``referer_tld``: The top level domain of the referer. It tries to be smart\n     and regards ``google.co.uk`` as a top level domain (instead of ``co.uk``)\n* ``full_path``: The full path that was requested\n* ``path``: The path without GET params that was requested\n* ``campaign``: A value that is extracted from the GET-parameter `campaign`,\n  if present. You can change the name of this keyword from `campaign` to\n  anything via the setting `INFLUXDB_METRICS_CAMPAIGN_KEYWORD`.\n\nIf you have a highly frequented site, this table could get big really quick.\nYou should make sure to create a shard with a low retention time for this\nseries (i.e. 7d) and add a continuous query to downsample the data into\nhourly/daily averages. When doing that, you will obviously lose the detailed\ninformation like ``referer`` and ``referer_tld`` but it might make sense to\ncreate a second continuous query to count and downsample at least the\n``referer_tld`` values.\n\nNOTE: I don't know what impact this has on overall request time or how much\nstress this would put on the InfluxDB server if you get thousands of requests.\nIt would probably wise to consider something like statsd to aggregate the\nrequests first and then send them to InfluxDB in bulk.\n\n\nTracking Users\n++++++++++++++\n\nThis app's ``models.py`` contains a ``post_save`` and a ``post_delete`` handler\nwhich will detect when a user is created or deleted.\n\nIt will create three measurements in your InfluxDB:\n\nThe first one will be named ``django_auth_user_create`` and will have the\nfollowing fields:\n\n* ``value``: 1\n\nThe second one will be named ``django_auth_user_delete`` and will have the\nfollowing fields:\n\n* ``value``: 1\n\nThe third one will be named ``django_auth_user_count`` and will have the\nfollowing fields:\n\n* ``value``: The total number of users in the database\n\n\nTracking User Logins\n++++++++++++++++++++\n\nThis app's ``models.py`` contains a handler for the ``user_logged_in`` signal.\n\nThe measurement created in your InfluxDB will be named\n``django_auth_user_login`` and will have the following fields:\n\n* ``value``: 1\n\n\nMaking Queries\n++++++++++++++\n\nIf you need to get data out of your InfluxDB instance, you can easily do it\nlike so::\n\n   from influxdb_metrics.utils import query\n   query('select * from series.name', time_precision='s', chunked=False)\n\nThe method declaration is the same as the one in ``InfluxDBClient.query()``.\nThis wrapper simply instanciates a client based on your settings.\n\n\nContribute\n----------\n\nIf you want to contribute to this project, please perform the following steps\n\n.. code-block:: bash\n\n    # Fork this repository\n    # Clone your fork\n    mkvirtualenv -p python3.5 django-influxdb-metrics\n    make develop\n\n    git co -b feature_branch master\n    # Implement your feature and tests\n    git add . && git commit\n    git push -u origin feature_branch\n    # Send us a pull request for your feature branch\n\n\nRuning tests\n------------\n\nFor running the tests [Docker](https://docs.docker.com/) and\n[Docker compose](https://www.docker.com/products/docker-compose) is required.\n\nThe test setup a Influxdb database for testing against real queries.\n\nIn order to run the tests just run the command::\n\n    ./run_tests_with_docker.sh", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lwbco/django-influxdb-tagged-metrics", "keywords": "django,app,reusable,metrics,influxdb", "license": "The MIT License", "maintainer": "", "maintainer_email": "", "name": "django-influxdb-tagged-metrics", "package_url": "https://pypi.org/project/django-influxdb-tagged-metrics/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django-influxdb-tagged-metrics/", "project_urls": {"Homepage": "https://github.com/lwbco/django-influxdb-tagged-metrics"}, "release_url": "https://pypi.org/project/django-influxdb-tagged-metrics/1.3.3/", "requires_dist": null, "requires_python": "", "summary": "A reusable Django app that sends metrics about your project to InfluxDB", "version": "1.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A reusable Django app that sends metrics about your project to InfluxDB.</p>\n<p>IMPORTANT NOTE: This release only supports InfluxDB &gt;= 0.9. We have also dropped\na few measurements like CPU, memory and disk-space because\n[Telegraf](<a href=\"https://github.com/influxdb/telegraf\" rel=\"nofollow\">https://github.com/influxdb/telegraf</a>) can collect these in a much\nmuch better way.</p>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>This module has celery support but you don\u2019t have to use it, if you don\u2019t want\nto.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To get the latest stable release from PyPi</p>\n<pre>pip install django-influxdb-metrics\n</pre>\n<p>To get the latest commit from GitHub</p>\n<pre>pip install -e git+git://github.com/lwbco/django-influxdb-tagged-metrics.git#egg<span class=\"o\">=</span>influxdb_metrics\n</pre>\n<p>Add <tt>influxdb_metrics</tt> to your <tt>INSTALLED_APPS</tt></p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'influxdb_metrics'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>You need to set the following settings:</p>\n<pre>INFLUXDB_HOST = 'your.influxdbhost.com'\nINFLUXDB_PORT = '8086'\nINFLUXDB_USER = 'youruser'\nINFLUXDB_PASSWORD = 'yourpassword'\nINFLUXDB_DATABASE = 'yourdatabase'\n\n# This is for tagging the data sent to your influxdb instance so that you\n# can query by host\nINFLUXDB_TAGS_HOST = 'your_hostname'\n\n# Seconds to wait for the request to the influxdb server before timing out\nINFLUXDB_TIMEOUT = 5\n\n# Set this to True if you are using Celery\nINFLUXDB_USE_CELERY = True\n\n# Set this to True if you are not using Celery\nINFLUXDB_USE_THREADING = False\n</pre>\n<p>If you would like to disable sending of metrics (i.e. for local development),\nyou can set:</p>\n<pre>INFLUXDB_DISABLED = True\n</pre>\n<p>If you are having trouble getting the postgresql database size, you might need\nto set:</p>\n<pre>INFLUXDB_POSTGRESQL_USE_LOCALHOST = True\n</pre>\n<p>Use ssl with INFLUXDB_HOST:</p>\n<pre>INFLUXDB_SSL = True # default is False\n</pre>\n<p>Optional with ssl:</p>\n<pre>INFLUXDB_VERIFY_SSL = True # default is False\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The app comes with several management commands which you should schedule via\ncrontab.</p>\n<div id=\"influxdb-get-postgresql-size\">\n<h3>influxdb_get_postgresql_size</h3>\n<p>Collects the total disk usage for the given database.</p>\n<p>You can run it like this:</p>\n<pre>./manage.py influxdb_get_postgresql_size db_role db_name\n</pre>\n<p>You should provide role and name for the database you want to measure. Make\nsure that you have a <tt>.pgpass</tt> file in place so that you don\u2019t need to enter\na password for this user.</p>\n<p>You could schedule it like this:</p>\n<pre>0 */1 * * * cd /path/to/project/ &amp;&amp; /path/to/venv/bin/python /path/to/project/manage.py influxdb_get_postgresql_size db_role db_name &gt; $HOME/mylogs/cron/influxdb-get-postgresql-size.log 2&gt;&amp;1\n</pre>\n<p>The measurement created in your InfluxDB will be named <cite>postgresql_size</cite> and\nwill have the following fields:</p>\n<ul>\n<li><tt>value</tt>: The total database size in bytes</li>\n</ul>\n</div>\n<div id=\"influxdbemailbackend\">\n<h3>InfluxDbEmailBackend</h3>\n<p>If you would like to track the number of emails sent, you can set your\n<cite>EMAIL_BACKEND</cite>:</p>\n<pre>EMAIL_BACKEND = 'influxdb_metrics.email.InfluxDbEmailBackend'\n</pre>\n<p>When the setting is set, metrics will be sent every time you run <tt>.manage.py\nsend_mail</tt>.</p>\n<p>The measurement created in your InfluxDB will be named <tt>django_email_sent</tt>\nand will have the following fields:</p>\n<ul>\n<li><tt>value</tt>: The number of emails sent</li>\n</ul>\n</div>\n<div id=\"influxdbrequestmiddleware\">\n<h3>InfluxDBRequestMiddleware</h3>\n<p>If you would like to track the number and speed of all requests, you can add\nthe <tt>InfluxDBRequestMiddleware</tt> at the top of your <tt>MIDDLEWARE_CLASSES</tt>:</p>\n<pre>MIDDLEWARE_CLASSES = [\n    'influxdb_metrics.middleware.InfluxDBRequestMiddleware',\n    ...\n]\n</pre>\n<p>The measurement created in your InfluxDB will be named <tt>django.request</tt> and\nwill have the following fields:</p>\n<ul>\n<li><tt>value</tt>: The request time in milliseconds.</li>\n</ul>\n<p>Additionally, it will have the following tags:</p>\n<ul>\n<li><tt>is_ajax</tt>: <cite>true</cite> if it was an AJAX request, otherwise <cite>false</cite></li>\n<li><tt>is_authenticated</tt>: <cite>true</cite> if user was authenticated, otherwise <cite>false</cite></li>\n<li><tt>is_staff</tt>: <cite>true</cite> if user was a staff user, otherwise <cite>false</cite></li>\n<li><tt>is_superuser</tt>: <cite>true</cite> user was a superuser, otherwise <cite>false</cite></li>\n<li><tt>method</tt>: The request method (<cite>GET</cite> or <cite>POST</cite>)</li>\n<li><tt>module</tt>: The python module that handled the request</li>\n<li><tt>view</tt>: The view class or function that handled the request</li>\n<li><tt>referer</tt>: The full URL from <cite>request.META[\u2018HTTP_REFERER\u2019]</cite></li>\n<li><dl>\n<dt><tt>referer_tld</tt>: The top level domain of the referer. It tries to be smart</dt>\n<dd>and regards <tt>google.co.uk</tt> as a top level domain (instead of <tt>co.uk</tt>)</dd>\n</dl>\n</li>\n<li><tt>full_path</tt>: The full path that was requested</li>\n<li><tt>path</tt>: The path without GET params that was requested</li>\n<li><tt>campaign</tt>: A value that is extracted from the GET-parameter <cite>campaign</cite>,\nif present. You can change the name of this keyword from <cite>campaign</cite> to\nanything via the setting <cite>INFLUXDB_METRICS_CAMPAIGN_KEYWORD</cite>.</li>\n</ul>\n<p>If you have a highly frequented site, this table could get big really quick.\nYou should make sure to create a shard with a low retention time for this\nseries (i.e. 7d) and add a continuous query to downsample the data into\nhourly/daily averages. When doing that, you will obviously lose the detailed\ninformation like <tt>referer</tt> and <tt>referer_tld</tt> but it might make sense to\ncreate a second continuous query to count and downsample at least the\n<tt>referer_tld</tt> values.</p>\n<p>NOTE: I don\u2019t know what impact this has on overall request time or how much\nstress this would put on the InfluxDB server if you get thousands of requests.\nIt would probably wise to consider something like statsd to aggregate the\nrequests first and then send them to InfluxDB in bulk.</p>\n</div>\n<div id=\"tracking-users\">\n<h3>Tracking Users</h3>\n<p>This app\u2019s <tt>models.py</tt> contains a <tt>post_save</tt> and a <tt>post_delete</tt> handler\nwhich will detect when a user is created or deleted.</p>\n<p>It will create three measurements in your InfluxDB:</p>\n<p>The first one will be named <tt>django_auth_user_create</tt> and will have the\nfollowing fields:</p>\n<ul>\n<li><tt>value</tt>: 1</li>\n</ul>\n<p>The second one will be named <tt>django_auth_user_delete</tt> and will have the\nfollowing fields:</p>\n<ul>\n<li><tt>value</tt>: 1</li>\n</ul>\n<p>The third one will be named <tt>django_auth_user_count</tt> and will have the\nfollowing fields:</p>\n<ul>\n<li><tt>value</tt>: The total number of users in the database</li>\n</ul>\n</div>\n<div id=\"tracking-user-logins\">\n<h3>Tracking User Logins</h3>\n<p>This app\u2019s <tt>models.py</tt> contains a handler for the <tt>user_logged_in</tt> signal.</p>\n<p>The measurement created in your InfluxDB will be named\n<tt>django_auth_user_login</tt> and will have the following fields:</p>\n<ul>\n<li><tt>value</tt>: 1</li>\n</ul>\n</div>\n<div id=\"making-queries\">\n<h3>Making Queries</h3>\n<p>If you need to get data out of your InfluxDB instance, you can easily do it\nlike so:</p>\n<pre>from influxdb_metrics.utils import query\nquery('select * from series.name', time_precision='s', chunked=False)\n</pre>\n<p>The method declaration is the same as the one in <tt>InfluxDBClient.query()</tt>.\nThis wrapper simply instanciates a client based on your settings.</p>\n</div>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>If you want to contribute to this project, please perform the following steps</p>\n<pre><span class=\"c1\"># Fork this repository\n# Clone your fork\n</span>mkvirtualenv -p python3.5 django-influxdb-metrics\nmake develop\n\ngit co -b feature_branch master\n<span class=\"c1\"># Implement your feature and tests\n</span>git add . <span class=\"o\">&amp;&amp;</span> git commit\ngit push -u origin feature_branch\n<span class=\"c1\"># Send us a pull request for your feature branch</span>\n</pre>\n</div>\n<div id=\"runing-tests\">\n<h2>Runing tests</h2>\n<p>For running the tests [Docker](<a href=\"https://docs.docker.com/\" rel=\"nofollow\">https://docs.docker.com/</a>) and\n[Docker compose](<a href=\"https://www.docker.com/products/docker-compose\" rel=\"nofollow\">https://www.docker.com/products/docker-compose</a>) is required.</p>\n<p>The test setup a Influxdb database for testing against real queries.</p>\n<p>In order to run the tests just run the command:</p>\n<pre>./run_tests_with_docker.sh\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6248685, "releases": {"1.3.3": [{"comment_text": "", "digests": {"md5": "fd027d885fbcd078bd1efbf0453d5832", "sha256": "f2a7c8dee5b32835b450474cc898e9842a4b9bfe10d8ba9f3f51eba9e45eaa5f"}, "downloads": -1, "filename": "django-influxdb-tagged-metrics-1.3.3.tar.gz", "has_sig": false, "md5_digest": "fd027d885fbcd078bd1efbf0453d5832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16133, "upload_time": "2019-10-03T19:04:23", "upload_time_iso_8601": "2019-10-03T19:04:23.555480Z", "url": "https://files.pythonhosted.org/packages/ab/e9/7fdd00c6269f6c7fd9c5b9722b586ada0db7618a59f41b92aee6b82d3a34/django-influxdb-tagged-metrics-1.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fd027d885fbcd078bd1efbf0453d5832", "sha256": "f2a7c8dee5b32835b450474cc898e9842a4b9bfe10d8ba9f3f51eba9e45eaa5f"}, "downloads": -1, "filename": "django-influxdb-tagged-metrics-1.3.3.tar.gz", "has_sig": false, "md5_digest": "fd027d885fbcd078bd1efbf0453d5832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16133, "upload_time": "2019-10-03T19:04:23", "upload_time_iso_8601": "2019-10-03T19:04:23.555480Z", "url": "https://files.pythonhosted.org/packages/ab/e9/7fdd00c6269f6c7fd9c5b9722b586ada0db7618a59f41b92aee6b82d3a34/django-influxdb-tagged-metrics-1.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:36 2020"}