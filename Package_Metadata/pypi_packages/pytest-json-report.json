{"info": {"author": "numirias", "author_email": "numirias@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Pytest JSON Report\n\n[![Build Status](https://travis-ci.org/numirias/pytest-json-report.svg?branch=master)](https://travis-ci.org/numirias/pytest-json-report)\n[![codecov](https://codecov.io/gh/numirias/pytest-json-report/branch/master/graph/badge.svg)](https://codecov.io/gh/numirias/pytest-json-report)\n[![PyPI Version](https://img.shields.io/pypi/v/pytest-json-report.svg)](https://pypi.python.org/pypi/pytest-json-report)\n[![Python Versions](https://img.shields.io/pypi/pyversions/pytest-json-report.svg)](https://pypi.python.org/pypi/pytest-json-report)\n\nThis pytest plugin creates test reports as JSON. This makes it easy to process test results in other applications.\n\nIt can report a summary, test details, captured output, logs, exception tracebacks and more. Additionally, you can use the available fixtures and hooks to [add metadata](#metadata) and [customize](#modifying-the-report) the report as you like.\n\n## Table of contents\n\n* [Installation](#installation)\n* [Options](#options)\n* [Usage](#usage)\n   * [Metadata](#metadata)\n   * [Modifying the report](#modifying-the-report)\n   * [Direct invocation](#direct-invocation)\n* [Format](#format)\n   * [Summary](#summary)\n   * [Environment](#environment)\n   * [Collectors](#collectors)\n   * [Tests](#tests)\n   * [Test stage](#test-stage)\n   * [Log](#log)\n   * [Warnings](#warnings)\n* [Related tools](#related-tools)\n\n## Installation\n\n```\npip install pytest-json-report --upgrade \n```\n\n## Options\n\n| Option | Description |\n| --- | --- |\n| `--json-report` | Create JSON report |\n| `--json-report-file=PATH` | Target path to save JSON report (use \"none\" to not save the report) |\n| `--json-report-summary` | Just create a summary without per-test details |\n| `--json-report-omit=FIELD_LIST` | List of fields to omit in the report (choose from: `collectors`, `log`, `traceback`, `streams`, `warnings`, `keywords`) |\n| `--json-report-indent=LEVEL` | Pretty-print JSON with specified indentation level |\n\n## Usage\n\nJust run pytest with `--json-report`. The report is saved in `.report.json` by default.\n\n```bash\n$ pytest --json-report -v tests/\n$ cat .report.json\n{\"created\": 1518371686.7981803, ... \"tests\":[{\"nodeid\": \"test_foo.py\", \"outcome\": \"passed\", ...}, ...]}\n```\n\nIf you just need to know how many tests passed or failed and don't care about details, you can produce a summary only:\n\n```bash\n$ pytest --json-report --json-report-summary\n```\n\nMany fields can be omitted to keep the report size small. E.g., this will leave out keywords and stdout/stderr output:\n\n```bash\n$ pytest --json-report --json-report-omit keywords streams\n```\n\nIf you don't like to have the report saved, you can specify `none` as the target file name:\n\n```bash\n$ pytest --json-report --json-report-file none\n```\n\n### Metadata\n\nYou can add your own metadata to a test item by using the `json_metadata` test fixture:\n\n```python\ndef test_something(json_metadata):\n    json_metadata['foo'] = {\"some\": \"thing\"}\n    json_metadata['bar'] = 123\n```\n\nOr you can use the `pytest_json_runtest_metadata` hook (in your `conftest.py`) to add metadata based on the current test run. The dict returned will be automatically added to the existing metadata. E.g., this adds the start and stop time of each test's `call` stage to the metadata:\n\n```python\ndef pytest_json_runtest_metadata(item, call):\n    if call.when != 'call':\n        return {}\n    return {'start': call.start, 'stop': call.stop}\n```\n\nAlso, you could add metadata using [pytest-metadata's `--metadata` switch](https://github.com/pytest-dev/pytest-metadata#additional-metadata) which will add metadata to the report's `environment` section, but not to a specific test item. You need to make sure all your metadata is JSON-serializable.\n\n### Modifying the report\n\nYou can modify the entire report before it's saved by using the `pytest_json_modifyreport` hook.\n\nJust implement the hook in your `conftest.py`, e.g.:\n\n```python\ndef pytest_json_modifyreport(json_report):\n    # Add a key to the report\n    json_report['foo'] = 'bar'\n    # Delete the summary from the report\n    del json_report['summary']\n```\n\nAfter `pytest_sessionfinish`, the report object is also directly available to script via `config._json_report.report`. So you can access it using some built-in hook:\n\n```python\ndef pytest_sessionfinish(session):\n    report = session.config._json_report.report\n    print(report['exitcode'])\n    ...\n```\n\nIf you *really* want to change how the result of a test stage run is turned into JSON, you can use the `pytest_json_runtest_stage` hook. It takes a [`TestReport`](https://docs.pytest.org/en/latest/reference.html#_pytest.runner.TestReport) and returns a JSON-serializable dict:\n\n```python\ndef pytest_json_runtest_stage(report):\n    return {'outcome': report.outcome}\n```\n\n### Direct invocation\n\nYou can also use the plugin when invoking `pytest.main()` directly from code:\n\n```python\nimport pytest\nfrom pytest_jsonreport.plugin import JSONReport\n\nplugin = JSONReport()\npytest.main(['test_foo.py'], plugins=[plugin])\n\n```\n\nYou can then access the `report` object:\n\n```python\nprint(plugin.report)\n```\n\nAnd save the report manually:\n\n```python\nplugin.save_report('/tmp/my_report.json')\n```\n\n\n## Format\n\nThe JSON report contains metadata of the session, a summary, collectors, tests and warnings. You can find a sample report in [`sample_report.json`](sample_report.json).\n\n| Key | Description |\n| --- | --- |\n| `created` | Report creation date. (Unix time) |\n| `duration` | Session duration in seconds. |\n| `exitcode` | Process exit code as listed [in the pytest docs](https://docs.pytest.org/en/latest/usage.html#possible-exit-codes). The exit code is a quick way to tell if any tests failed, an internal error occurred, etc. |\n| `root` | Absolute root path from which the session was started. |\n| `environment` | [Environment](#environment) entry. |\n| `summary` | [Summary](#summary) entry. |\n| `collectors` | [Collectors](#collectors) entry. (absent if `--json-report-summary` or if no collectors)  |\n| `tests` | [Tests](#tests) entry. (absent if `--json-report-summary`)  |\n| `warnings` | [Warnings](#warnings) entry. (absent if `--json-report-summary` or if no warnings)  |\n\n#### Example\n\n```python\n{\n    \"created\": 1518371686.7981803,\n    \"duration\": 0.1235666275024414,\n    \"exitcode\": 1,\n    \"root\": \"/path/to/tests\",\n    \"environment\": ENVIRONMENT,\n    \"summary\": SUMMARY,\n    \"collectors\": COLLECTORS,\n    \"tests\": TESTS,\n    \"warnings\": WARNINGS,\n}\n```\n\n### Summary\n\nNumber of outcomes per category and the total number of test items.\n\n| Key | Description |\n| --- | --- |\n|  `collected` | Total number of tests collected. |\n|  `total` | Total number of tests run. |\n| `<outcome>` | Number of tests with that outcome. (absent if number is 0) |\n\n#### Example\n\n```python\n{\n    \"collected\": 10,\n    \"passed\": 2,\n    \"failed\": 3,\n    \"xfailed\": 1,\n    \"xpassed\": 1,\n    \"error\": 2,\n    \"skipped\": 1,\n    \"total\": 10\n}\n```\n\n### Environment\n\nThe environment section is provided by [pytest-metadata](https://github.com/pytest-dev/pytest-metadata). All metadata given by that plugin will be added here, so you need to make sure it is JSON-serializable.\n\n#### Example\n\n```python\n{\n    \"Python\": \"3.6.4\",\n    \"Platform\": \"Linux-4.56.78-9-ARCH-x86_64-with-arch\",\n    \"Packages\": {\n        \"pytest\": \"3.4.0\",\n        \"py\": \"1.5.2\",\n        \"pluggy\": \"0.6.0\"\n    },\n    \"Plugins\": {\n        \"json-report\": \"0.4.1\",\n        \"xdist\": \"1.22.0\",\n        \"metadata\": \"1.5.1\",\n        \"forked\": \"0.2\",\n        \"cov\": \"2.5.1\"\n    },\n    \"foo\": \"bar\", # Custom metadata entry passed via pytest-metadata\n}\n```\n\n### Collectors\n\nA list of collector nodes. These are useful to check what tests are available without running them, or to debug an error during test discovery.\n\n| Key | Description |\n| --- | --- |\n| `nodeid` | ID of the collector node. ([See docs](https://docs.pytest.org/en/latest/example/markers.html#node-id)) The root node has an empty node ID. |\n| `outcome` | Outcome of the collection. (Not the test outcome!) |\n| `result` | Nodes collected by the collector. |\n| `longrepr` | Representation of the collection error. (absent if no error occurred) |\n\nThe `result` is a list of the collected nodes:\n\n| Key | Description |\n| --- | --- |\n| `nodeid` | ID of the node. |\n| `type` | Type of the collected node. |\n| `lineno` | Line number. (absent if not applicable) |\n| `deselected` | `true` if the test is deselected. (absent if not deselected) |\n\n#### Example\n\n```python\n[\n    {\n        \"nodeid\": \"\",\n        \"outcome\": \"passed\",\n        \"result\": [\n            {\n                \"nodeid\": \"test_foo.py\",\n                \"type\": \"Module\"\n            }\n        ]\n    },\n    {\n        \"nodeid\": \"test_foo.py\",\n        \"outcome\": \"passed\",\n        \"result\": [\n            {\n                \"nodeid\": \"test_foo.py::test_pass\",\n                \"type\": \"Function\",\n                \"lineno\": 24,\n                \"deselected\": true\n            },\n            ...\n        ]\n    },\n    {\n        \"nodeid\": \"test_bar.py\",\n        \"outcome\": \"failed\",\n        \"result\": [],\n        \"longrepr\": \"/usr/lib/python3.6 ... invalid syntax\"\n    },\n    ...\n]\n```\n\n### Tests\n\nA list of test nodes. Each completed test stage produces a stage object (`setup`, `call`, `teardown`) with its own `outcome`.\n\n| Key | Description |\n| --- | --- |\n| `nodeid` | ID of the test node. |\n| `lineno` | Line number where the test starts. |\n| `keywords` | List of keywords and markers associated with the test. |\n| `outcome` | Outcome of the test run. |\n| `{setup, call, teardown}` | [Test stage](#test-stage) entry. To find the error in a failed test you need to check all stages. (absent if stage didn't run) |\n| `metadata` | [Metadata](#metadata) item. (absent if no metadata) |\n\n#### Example\n\n```python\n[\n    {\n        \"nodeid\": \"test_foo.py::test_fail\",\n        \"lineno\": 50,\n        \"keywords\": [\n            \"test_fail\",\n            \"test_foo.py\",\n            \"test_foo0\"\n        ],\n        \"outcome\": \"failed\",\n        \"setup\": TEST_STAGE,\n        \"call\": TEST_STAGE,\n        \"teardown\": TEST_STAGE,\n        \"metadata\": {\n            \"foo\": \"bar\",\n        }\n    },\n    ...\n]\n```\n\n\n### Test stage\n\nA test stage item.\n\n| Key | Description |\n| --- | --- |\n| `duration` | Duration of the test stage in seconds. |\n| `outcome` | Outcome of the test stage. (can be different from the overall test outcome) |\n| `crash` | Crash entry. (absent if no error occurred) |\n| `traceback` | List of traceback entries. (absent if no error occurred) |\n| `stdout` | Standard output. (absent if none available) |\n| `stderr` | Standard error. (absent if none available) |\n| `log` | [Log](#log) entry. (absent if none available) |\n| `longrepr` | Representation of the error. (absent if no error occurred) |\n\n#### Example\n\n```python\n{\n    \"duration\": 0.00018835067749023438,\n    \"outcome\": \"failed\",\n    \"crash\": {\n        \"path\": \"/path/to/tests/test_foo.py\",\n        \"lineno\": 54,\n        \"message\": \"TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\"\n    },\n    \"traceback\": [\n        {\n            \"path\": \"test_foo.py\",\n            \"lineno\": 65,\n            \"message\": \"\"\n        },\n        {\n            \"path\": \"test_foo.py\",\n            \"lineno\": 63,\n            \"message\": \"in foo\"\n        },\n        {\n            \"path\": \"test_foo.py\",\n            \"lineno\": 63,\n            \"message\": \"in <listcomp>\"\n        },\n        {\n            \"path\": \"test_foo.py\",\n            \"lineno\": 54,\n            \"message\": \"TypeError\"\n        }\n    ],\n    \"stdout\": \"foo\\nbar\\n\",\n    \"stderr\": \"baz\\n\",\n    \"log\": LOG,\n    \"longrepr\": \"def test_fail_nested():\\n ...\"\n}\n```\n\n### Log\n\nA list of log records. The fields of a log record are the [`logging.LogRecord` attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes), with the exception that the fields `exc_info` and `args` are always empty and `msg` contains the formatted log message.\n\nYou can apply [`logging.makeLogRecord()`](https://docs.python.org/3/library/logging.html#logging.makeLogRecord)  on a log record to convert it back to a `logging.LogRecord` object.\n\n#### Example\n\n```python\n[\n    {\n        \"name\": \"root\",\n        \"msg\": \"This is a warning.\",\n        \"args\": null,\n        \"levelname\": \"WARNING\",\n        \"levelno\": 30,\n        \"pathname\": \"/path/to/tests/test_foo.py\",\n        \"filename\": \"test_foo.py\",\n        \"module\": \"test_foo\",\n        \"exc_info\": null,\n        \"exc_text\": null,\n        \"stack_info\": null,\n        \"lineno\": 8,\n        \"funcName\": \"foo\",\n        \"created\": 1519772464.291738,\n        \"msecs\": 291.73803329467773,\n        \"relativeCreated\": 332.90839195251465,\n        \"thread\": 140671803118912,\n        \"threadName\": \"MainThread\",\n        \"processName\": \"MainProcess\",\n        \"process\": 31481\n    },\n    ...\n]\n```\n\n\n### Warnings\n\nA list of warnings that occurred during the session. (See the [pytest docs on warnings](https://docs.pytest.org/en/latest/warnings.html).)\n\n| Key | Description |\n| --- | --- |\n| `filename` | File name. |\n| `lineno` | Line number. |\n| `message` | Warning message. |\n| `when` | When the warning was captured. (`\"config\"`, `\"collect\"` or `\"runtest\"` as listed [here](https://docs.pytest.org/en/latest/reference.html#_pytest.hookspec.pytest_warning_captured)) |\n\n#### Example\n\n```python\n[\n    {\n        \"code\": \"C1\",\n        \"path\": \"/path/to/tests/test_foo.py\",\n        \"nodeid\": \"test_foo.py::TestFoo\",\n        \"message\": \"cannot collect test class 'TestFoo' because it has a __init__ constructor\"\n    }\n]\n```\n\n## Related tools\n\n- [pytest-json](https://github.com/mattcl/pytest-json) has some great features but appears to be unmaintained. I borrowed some ideas and test cases from there.\n\n- [tox has a swtich](http://tox.readthedocs.io/en/latest/example/result.html) to create a JSON report including a test result summary. However, it just provides the overall outcome without any per-test details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/numirias/pytest-json-report", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-json-report", "package_url": "https://pypi.org/project/pytest-json-report/", "platform": "", "project_url": "https://pypi.org/project/pytest-json-report/", "project_urls": {"Homepage": "https://github.com/numirias/pytest-json-report"}, "release_url": "https://pypi.org/project/pytest-json-report/1.2.1/", "requires_dist": ["pytest (>=4.2.0)", "pytest-metadata"], "requires_python": "", "summary": "A pytest plugin to report test results as JSON files", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pytest JSON Report</h1>\n<p><a href=\"https://travis-ci.org/numirias/pytest-json-report\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d39dfba082357c538a29f35fa79183fd8fba5ae6/68747470733a2f2f7472617669732d63692e6f72672f6e756d69726961732f7079746573742d6a736f6e2d7265706f72742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/numirias/pytest-json-report\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/389ec57890c7ccb36e617360c2f57ba5d193f783/68747470733a2f2f636f6465636f762e696f2f67682f6e756d69726961732f7079746573742d6a736f6e2d7265706f72742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pytest-json-report\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6600e3e855d25833e180b5ea0fcb53181614946/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d6a736f6e2d7265706f72742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pytest-json-report\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d2cdf861b827b9c659cfb087613a54fdba70246/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d6a736f6e2d7265706f72742e737667\"></a></p>\n<p>This pytest plugin creates test reports as JSON. This makes it easy to process test results in other applications.</p>\n<p>It can report a summary, test details, captured output, logs, exception tracebacks and more. Additionally, you can use the available fixtures and hooks to <a href=\"#metadata\" rel=\"nofollow\">add metadata</a> and <a href=\"#modifying-the-report\" rel=\"nofollow\">customize</a> the report as you like.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#options\" rel=\"nofollow\">Options</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#metadata\" rel=\"nofollow\">Metadata</a></li>\n<li><a href=\"#modifying-the-report\" rel=\"nofollow\">Modifying the report</a></li>\n<li><a href=\"#direct-invocation\" rel=\"nofollow\">Direct invocation</a></li>\n</ul>\n</li>\n<li><a href=\"#format\" rel=\"nofollow\">Format</a>\n<ul>\n<li><a href=\"#summary\" rel=\"nofollow\">Summary</a></li>\n<li><a href=\"#environment\" rel=\"nofollow\">Environment</a></li>\n<li><a href=\"#collectors\" rel=\"nofollow\">Collectors</a></li>\n<li><a href=\"#tests\" rel=\"nofollow\">Tests</a></li>\n<li><a href=\"#test-stage\" rel=\"nofollow\">Test stage</a></li>\n<li><a href=\"#log\" rel=\"nofollow\">Log</a></li>\n<li><a href=\"#warnings\" rel=\"nofollow\">Warnings</a></li>\n</ul>\n</li>\n<li><a href=\"#related-tools\" rel=\"nofollow\">Related tools</a></li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install pytest-json-report --upgrade \n</code></pre>\n<h2>Options</h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--json-report</code></td>\n<td>Create JSON report</td>\n</tr>\n<tr>\n<td><code>--json-report-file=PATH</code></td>\n<td>Target path to save JSON report (use \"none\" to not save the report)</td>\n</tr>\n<tr>\n<td><code>--json-report-summary</code></td>\n<td>Just create a summary without per-test details</td>\n</tr>\n<tr>\n<td><code>--json-report-omit=FIELD_LIST</code></td>\n<td>List of fields to omit in the report (choose from: <code>collectors</code>, <code>log</code>, <code>traceback</code>, <code>streams</code>, <code>warnings</code>, <code>keywords</code>)</td>\n</tr>\n<tr>\n<td><code>--json-report-indent=LEVEL</code></td>\n<td>Pretty-print JSON with specified indentation level</td>\n</tr></tbody></table>\n<h2>Usage</h2>\n<p>Just run pytest with <code>--json-report</code>. The report is saved in <code>.report.json</code> by default.</p>\n<pre>$ pytest --json-report -v tests/\n$ cat .report.json\n<span class=\"o\">{</span><span class=\"s2\">\"created\"</span>: <span class=\"m\">1518371686</span>.7981803, ... <span class=\"s2\">\"tests\"</span>:<span class=\"o\">[{</span><span class=\"s2\">\"nodeid\"</span>: <span class=\"s2\">\"test_foo.py\"</span>, <span class=\"s2\">\"outcome\"</span>: <span class=\"s2\">\"passed\"</span>, ...<span class=\"o\">}</span>, ...<span class=\"o\">]}</span>\n</pre>\n<p>If you just need to know how many tests passed or failed and don't care about details, you can produce a summary only:</p>\n<pre>$ pytest --json-report --json-report-summary\n</pre>\n<p>Many fields can be omitted to keep the report size small. E.g., this will leave out keywords and stdout/stderr output:</p>\n<pre>$ pytest --json-report --json-report-omit keywords streams\n</pre>\n<p>If you don't like to have the report saved, you can specify <code>none</code> as the target file name:</p>\n<pre>$ pytest --json-report --json-report-file none\n</pre>\n<h3>Metadata</h3>\n<p>You can add your own metadata to a test item by using the <code>json_metadata</code> test fixture:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">json_metadata</span><span class=\"p\">):</span>\n    <span class=\"n\">json_metadata</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"some\"</span><span class=\"p\">:</span> <span class=\"s2\">\"thing\"</span><span class=\"p\">}</span>\n    <span class=\"n\">json_metadata</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n</pre>\n<p>Or you can use the <code>pytest_json_runtest_metadata</code> hook (in your <code>conftest.py</code>) to add metadata based on the current test run. The dict returned will be automatically added to the existing metadata. E.g., this adds the start and stop time of each test's <code>call</code> stage to the metadata:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">pytest_json_runtest_metadata</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">call</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">when</span> <span class=\"o\">!=</span> <span class=\"s1\">'call'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'start'</span><span class=\"p\">:</span> <span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"s1\">'stop'</span><span class=\"p\">:</span> <span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">}</span>\n</pre>\n<p>Also, you could add metadata using <a href=\"https://github.com/pytest-dev/pytest-metadata#additional-metadata\" rel=\"nofollow\">pytest-metadata's <code>--metadata</code> switch</a> which will add metadata to the report's <code>environment</code> section, but not to a specific test item. You need to make sure all your metadata is JSON-serializable.</p>\n<h3>Modifying the report</h3>\n<p>You can modify the entire report before it's saved by using the <code>pytest_json_modifyreport</code> hook.</p>\n<p>Just implement the hook in your <code>conftest.py</code>, e.g.:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">pytest_json_modifyreport</span><span class=\"p\">(</span><span class=\"n\">json_report</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Add a key to the report</span>\n    <span class=\"n\">json_report</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n    <span class=\"c1\"># Delete the summary from the report</span>\n    <span class=\"k\">del</span> <span class=\"n\">json_report</span><span class=\"p\">[</span><span class=\"s1\">'summary'</span><span class=\"p\">]</span>\n</pre>\n<p>After <code>pytest_sessionfinish</code>, the report object is also directly available to script via <code>config._json_report.report</code>. So you can access it using some built-in hook:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">pytest_sessionfinish</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">):</span>\n    <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">_json_report</span><span class=\"o\">.</span><span class=\"n\">report</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">[</span><span class=\"s1\">'exitcode'</span><span class=\"p\">])</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>If you <em>really</em> want to change how the result of a test stage run is turned into JSON, you can use the <code>pytest_json_runtest_stage</code> hook. It takes a <a href=\"https://docs.pytest.org/en/latest/reference.html#_pytest.runner.TestReport\" rel=\"nofollow\"><code>TestReport</code></a> and returns a JSON-serializable dict:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">pytest_json_runtest_stage</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'outcome'</span><span class=\"p\">:</span> <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">outcome</span><span class=\"p\">}</span>\n</pre>\n<h3>Direct invocation</h3>\n<p>You can also use the plugin when invoking <code>pytest.main()</code> directly from code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_jsonreport.plugin</span> <span class=\"kn\">import</span> <span class=\"n\">JSONReport</span>\n\n<span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">JSONReport</span><span class=\"p\">()</span>\n<span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">([</span><span class=\"s1\">'test_foo.py'</span><span class=\"p\">],</span> <span class=\"n\">plugins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">plugin</span><span class=\"p\">])</span>\n</pre>\n<p>You can then access the <code>report</code> object:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">)</span>\n</pre>\n<p>And save the report manually:</p>\n<pre><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">save_report</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/my_report.json'</span><span class=\"p\">)</span>\n</pre>\n<h2>Format</h2>\n<p>The JSON report contains metadata of the session, a summary, collectors, tests and warnings. You can find a sample report in <a href=\"sample_report.json\" rel=\"nofollow\"><code>sample_report.json</code></a>.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>created</code></td>\n<td>Report creation date. (Unix time)</td>\n</tr>\n<tr>\n<td><code>duration</code></td>\n<td>Session duration in seconds.</td>\n</tr>\n<tr>\n<td><code>exitcode</code></td>\n<td>Process exit code as listed <a href=\"https://docs.pytest.org/en/latest/usage.html#possible-exit-codes\" rel=\"nofollow\">in the pytest docs</a>. The exit code is a quick way to tell if any tests failed, an internal error occurred, etc.</td>\n</tr>\n<tr>\n<td><code>root</code></td>\n<td>Absolute root path from which the session was started.</td>\n</tr>\n<tr>\n<td><code>environment</code></td>\n<td><a href=\"#environment\" rel=\"nofollow\">Environment</a> entry.</td>\n</tr>\n<tr>\n<td><code>summary</code></td>\n<td><a href=\"#summary\" rel=\"nofollow\">Summary</a> entry.</td>\n</tr>\n<tr>\n<td><code>collectors</code></td>\n<td><a href=\"#collectors\" rel=\"nofollow\">Collectors</a> entry. (absent if <code>--json-report-summary</code> or if no collectors)</td>\n</tr>\n<tr>\n<td><code>tests</code></td>\n<td><a href=\"#tests\" rel=\"nofollow\">Tests</a> entry. (absent if <code>--json-report-summary</code>)</td>\n</tr>\n<tr>\n<td><code>warnings</code></td>\n<td><a href=\"#warnings\" rel=\"nofollow\">Warnings</a> entry. (absent if <code>--json-report-summary</code> or if no warnings)</td>\n</tr></tbody></table>\n<h4>Example</h4>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"created\"</span><span class=\"p\">:</span> <span class=\"mf\">1518371686.7981803</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"duration\"</span><span class=\"p\">:</span> <span class=\"mf\">0.1235666275024414</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"exitcode\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"root\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/path/to/tests\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"environment\"</span><span class=\"p\">:</span> <span class=\"n\">ENVIRONMENT</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"summary\"</span><span class=\"p\">:</span> <span class=\"n\">SUMMARY</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"collectors\"</span><span class=\"p\">:</span> <span class=\"n\">COLLECTORS</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"tests\"</span><span class=\"p\">:</span> <span class=\"n\">TESTS</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"warnings\"</span><span class=\"p\">:</span> <span class=\"n\">WARNINGS</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Summary</h3>\n<p>Number of outcomes per category and the total number of test items.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>collected</code></td>\n<td>Total number of tests collected.</td>\n</tr>\n<tr>\n<td><code>total</code></td>\n<td>Total number of tests run.</td>\n</tr>\n<tr>\n<td><code>&lt;outcome&gt;</code></td>\n<td>Number of tests with that outcome. (absent if number is 0)</td>\n</tr></tbody></table>\n<h4>Example</h4>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"collected\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"passed\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"failed\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"xfailed\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"xpassed\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"error\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"skipped\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"total\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Environment</h3>\n<p>The environment section is provided by <a href=\"https://github.com/pytest-dev/pytest-metadata\" rel=\"nofollow\">pytest-metadata</a>. All metadata given by that plugin will be added here, so you need to make sure it is JSON-serializable.</p>\n<h4>Example</h4>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"Python\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3.6.4\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Platform\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Linux-4.56.78-9-ARCH-x86_64-with-arch\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Packages\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"pytest\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3.4.0\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"py\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.5.2\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"pluggy\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0.6.0\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"Plugins\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"json-report\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0.4.1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"xdist\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.22.0\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"metadata\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.5.1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"forked\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0.2\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"cov\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2.5.1\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span> <span class=\"c1\"># Custom metadata entry passed via pytest-metadata</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Collectors</h3>\n<p>A list of collector nodes. These are useful to check what tests are available without running them, or to debug an error during test discovery.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>nodeid</code></td>\n<td>ID of the collector node. (<a href=\"https://docs.pytest.org/en/latest/example/markers.html#node-id\" rel=\"nofollow\">See docs</a>) The root node has an empty node ID.</td>\n</tr>\n<tr>\n<td><code>outcome</code></td>\n<td>Outcome of the collection. (Not the test outcome!)</td>\n</tr>\n<tr>\n<td><code>result</code></td>\n<td>Nodes collected by the collector.</td>\n</tr>\n<tr>\n<td><code>longrepr</code></td>\n<td>Representation of the collection error. (absent if no error occurred)</td>\n</tr></tbody></table>\n<p>The <code>result</code> is a list of the collected nodes:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>nodeid</code></td>\n<td>ID of the node.</td>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td>Type of the collected node.</td>\n</tr>\n<tr>\n<td><code>lineno</code></td>\n<td>Line number. (absent if not applicable)</td>\n</tr>\n<tr>\n<td><code>deselected</code></td>\n<td><code>true</code> if the test is deselected. (absent if not deselected)</td>\n</tr></tbody></table>\n<h4>Example</h4>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"nodeid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"outcome\"</span><span class=\"p\">:</span> <span class=\"s2\">\"passed\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"nodeid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Module\"</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"nodeid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"outcome\"</span><span class=\"p\">:</span> <span class=\"s2\">\"passed\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"nodeid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py::test_pass\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Function\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"deselected\"</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n            <span class=\"p\">},</span>\n            <span class=\"o\">...</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"nodeid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_bar.py\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"outcome\"</span><span class=\"p\">:</span> <span class=\"s2\">\"failed\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"s2\">\"longrepr\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/usr/lib/python3.6 ... invalid syntax\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Tests</h3>\n<p>A list of test nodes. Each completed test stage produces a stage object (<code>setup</code>, <code>call</code>, <code>teardown</code>) with its own <code>outcome</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>nodeid</code></td>\n<td>ID of the test node.</td>\n</tr>\n<tr>\n<td><code>lineno</code></td>\n<td>Line number where the test starts.</td>\n</tr>\n<tr>\n<td><code>keywords</code></td>\n<td>List of keywords and markers associated with the test.</td>\n</tr>\n<tr>\n<td><code>outcome</code></td>\n<td>Outcome of the test run.</td>\n</tr>\n<tr>\n<td><code>{setup, call, teardown}</code></td>\n<td><a href=\"#test-stage\" rel=\"nofollow\">Test stage</a> entry. To find the error in a failed test you need to check all stages. (absent if stage didn't run)</td>\n</tr>\n<tr>\n<td><code>metadata</code></td>\n<td><a href=\"#metadata\" rel=\"nofollow\">Metadata</a> item. (absent if no metadata)</td>\n</tr></tbody></table>\n<h4>Example</h4>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"nodeid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py::test_fail\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"keywords\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"test_fail\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"test_foo.py\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"test_foo0\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"s2\">\"outcome\"</span><span class=\"p\">:</span> <span class=\"s2\">\"failed\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"setup\"</span><span class=\"p\">:</span> <span class=\"n\">TEST_STAGE</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"call\"</span><span class=\"p\">:</span> <span class=\"n\">TEST_STAGE</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"teardown\"</span><span class=\"p\">:</span> <span class=\"n\">TEST_STAGE</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"metadata\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Test stage</h3>\n<p>A test stage item.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>duration</code></td>\n<td>Duration of the test stage in seconds.</td>\n</tr>\n<tr>\n<td><code>outcome</code></td>\n<td>Outcome of the test stage. (can be different from the overall test outcome)</td>\n</tr>\n<tr>\n<td><code>crash</code></td>\n<td>Crash entry. (absent if no error occurred)</td>\n</tr>\n<tr>\n<td><code>traceback</code></td>\n<td>List of traceback entries. (absent if no error occurred)</td>\n</tr>\n<tr>\n<td><code>stdout</code></td>\n<td>Standard output. (absent if none available)</td>\n</tr>\n<tr>\n<td><code>stderr</code></td>\n<td>Standard error. (absent if none available)</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><a href=\"#log\" rel=\"nofollow\">Log</a> entry. (absent if none available)</td>\n</tr>\n<tr>\n<td><code>longrepr</code></td>\n<td>Representation of the error. (absent if no error occurred)</td>\n</tr></tbody></table>\n<h4>Example</h4>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"duration\"</span><span class=\"p\">:</span> <span class=\"mf\">0.00018835067749023438</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"outcome\"</span><span class=\"p\">:</span> <span class=\"s2\">\"failed\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"crash\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/path/to/tests/test_foo.py\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"mi\">54</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"traceback\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"mi\">65</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"mi\">63</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"in foo\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"mi\">63</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"in &lt;listcomp&gt;\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"mi\">54</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"TypeError\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"stdout\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo</span><span class=\"se\">\\n</span><span class=\"s2\">bar</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"stderr\"</span><span class=\"p\">:</span> <span class=\"s2\">\"baz</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"log\"</span><span class=\"p\">:</span> <span class=\"n\">LOG</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"longrepr\"</span><span class=\"p\">:</span> <span class=\"s2\">\"def test_fail_nested():</span><span class=\"se\">\\n</span><span class=\"s2\"> ...\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Log</h3>\n<p>A list of log records. The fields of a log record are the <a href=\"https://docs.python.org/3/library/logging.html#logrecord-attributes\" rel=\"nofollow\"><code>logging.LogRecord</code> attributes</a>, with the exception that the fields <code>exc_info</code> and <code>args</code> are always empty and <code>msg</code> contains the formatted log message.</p>\n<p>You can apply <a href=\"https://docs.python.org/3/library/logging.html#logging.makeLogRecord\" rel=\"nofollow\"><code>logging.makeLogRecord()</code></a>  on a log record to convert it back to a <code>logging.LogRecord</code> object.</p>\n<h4>Example</h4>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"root\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This is a warning.\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"args\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"levelname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"WARNING\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"levelno\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"pathname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/path/to/tests/test_foo.py\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"filename\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"module\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"exc_info\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"exc_text\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"stack_info\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"funcName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"created\"</span><span class=\"p\">:</span> <span class=\"mf\">1519772464.291738</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"msecs\"</span><span class=\"p\">:</span> <span class=\"mf\">291.73803329467773</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"relativeCreated\"</span><span class=\"p\">:</span> <span class=\"mf\">332.90839195251465</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"thread\"</span><span class=\"p\">:</span> <span class=\"mi\">140671803118912</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"threadName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MainThread\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"processName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MainProcess\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"process\"</span><span class=\"p\">:</span> <span class=\"mi\">31481</span>\n    <span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Warnings</h3>\n<p>A list of warnings that occurred during the session. (See the <a href=\"https://docs.pytest.org/en/latest/warnings.html\" rel=\"nofollow\">pytest docs on warnings</a>.)</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>filename</code></td>\n<td>File name.</td>\n</tr>\n<tr>\n<td><code>lineno</code></td>\n<td>Line number.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>Warning message.</td>\n</tr>\n<tr>\n<td><code>when</code></td>\n<td>When the warning was captured. (<code>\"config\"</code>, <code>\"collect\"</code> or <code>\"runtest\"</code> as listed <a href=\"https://docs.pytest.org/en/latest/reference.html#_pytest.hookspec.pytest_warning_captured\" rel=\"nofollow\">here</a>)</td>\n</tr></tbody></table>\n<h4>Example</h4>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"C1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/path/to/tests/test_foo.py\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"nodeid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_foo.py::TestFoo\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cannot collect test class 'TestFoo' because it has a __init__ constructor\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Related tools</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/mattcl/pytest-json\" rel=\"nofollow\">pytest-json</a> has some great features but appears to be unmaintained. I borrowed some ideas and test cases from there.</p>\n</li>\n<li>\n<p><a href=\"http://tox.readthedocs.io/en/latest/example/result.html\" rel=\"nofollow\">tox has a swtich</a> to create a JSON report including a test result summary. However, it just provides the overall outcome without any per-test details.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6220890, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "210279a340c70d85b7225c8457fa41eb", "sha256": "48c971d3dc8e063980d37fb15e520f6273e8ecfcaef7ef94d3d6b8236f3cdc46"}, "downloads": -1, "filename": "pytest_json_report-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "210279a340c70d85b7225c8457fa41eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3254, "upload_time": "2018-01-18T02:24:50", "upload_time_iso_8601": "2018-01-18T02:24:50.973805Z", "url": "https://files.pythonhosted.org/packages/e6/54/484ec0214d476fb74e95a4a5f92b480be25551e7e28ccdff8804da577564/pytest_json_report-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f105877d9fb05ef0b8e60dbf114528a9", "sha256": "d762be14d12c8dca87e99788b4af55064ac750c51f794467d3b8c18f44556ec5"}, "downloads": -1, "filename": "pytest-json-report-0.1.tar.gz", "has_sig": false, "md5_digest": "f105877d9fb05ef0b8e60dbf114528a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1789, "upload_time": "2018-01-18T02:24:51", "upload_time_iso_8601": "2018-01-18T02:24:51.905379Z", "url": "https://files.pythonhosted.org/packages/41/9b/141d9ecbb0a4ca0843fe99024ed73ac2d1aecb5c902b3c5096b90ee8d2de/pytest-json-report-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "9167c852c9d2c7b75e13113a269a2962", "sha256": "983d718e879fdf2ed36878c77f8c1c3ea1c1c61513c584eba83018917649bcf9"}, "downloads": -1, "filename": "pytest_json_report-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9167c852c9d2c7b75e13113a269a2962", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3294, "upload_time": "2018-01-18T03:32:54", "upload_time_iso_8601": "2018-01-18T03:32:54.716522Z", "url": "https://files.pythonhosted.org/packages/9d/4d/bab4648d630160d47a00515db6b4b622921e5b24e58a16629ad52eacee5b/pytest_json_report-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5aac2c070760e11b535e01b6096f973", "sha256": "745e239a83256fe58b9c710ab9572412ef72976ea9e1d151e791065c7c8127c8"}, "downloads": -1, "filename": "pytest-json-report-0.2.tar.gz", "has_sig": false, "md5_digest": "c5aac2c070760e11b535e01b6096f973", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2340, "upload_time": "2018-01-18T03:32:56", "upload_time_iso_8601": "2018-01-18T03:32:56.094653Z", "url": "https://files.pythonhosted.org/packages/5b/7e/aec8bf3b7ba279dcc89c53c893b61c408ac72200bb92e4cd2f46997f6149/pytest-json-report-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "1c68131d835171e43d4e95d14dd0ff47", "sha256": "c2ae129a2ea676f799c563b82901b99b7180a00abaf937ac54abcc7f37221fa3"}, "downloads": -1, "filename": "pytest_json_report-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1c68131d835171e43d4e95d14dd0ff47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3857, "upload_time": "2018-01-19T04:23:25", "upload_time_iso_8601": "2018-01-19T04:23:25.385774Z", "url": "https://files.pythonhosted.org/packages/b7/20/ce588d67f9efea4eb371e4cd75c45b71eb286fcadeaad7043c86fbdebcae/pytest_json_report-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d398866652800e16402964f15007e1aa", "sha256": "ecd2fd3f70c08a52fe107eba4c9bbeb7ef273017dd50b9ca7f091e71f41c7cf1"}, "downloads": -1, "filename": "pytest-json-report-0.3.tar.gz", "has_sig": false, "md5_digest": "d398866652800e16402964f15007e1aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3158, "upload_time": "2018-01-19T04:23:26", "upload_time_iso_8601": "2018-01-19T04:23:26.819252Z", "url": "https://files.pythonhosted.org/packages/bb/e4/88f820b82d47f8af6ed518a6cfc633072bbd4b145a2fbc71b534c6048aa9/pytest-json-report-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "79900617884f6140502d8d572445d4d1", "sha256": "a666f342953cedbc2f85fdea2a52f1586a6f05cb40fbae74581aa5064cf5693f"}, "downloads": -1, "filename": "pytest_json_report-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "79900617884f6140502d8d572445d4d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4713, "upload_time": "2018-01-21T01:04:45", "upload_time_iso_8601": "2018-01-21T01:04:45.766755Z", "url": "https://files.pythonhosted.org/packages/15/01/62b10d895c20b9bc452cdbf9d038f8ad7b472477dc12b80bb670854836dd/pytest_json_report-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6b95f85315b3a49fd8e79454b5791b3", "sha256": "33018dc68d8531dde55c83fabeeef23605e3509a4333eca843c0f1a4b91e4925"}, "downloads": -1, "filename": "pytest-json-report-0.4.tar.gz", "has_sig": false, "md5_digest": "f6b95f85315b3a49fd8e79454b5791b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4427, "upload_time": "2018-01-21T01:04:47", "upload_time_iso_8601": "2018-01-21T01:04:47.133457Z", "url": "https://files.pythonhosted.org/packages/99/b6/9d96972b29287c78587eb9b310e68f4f7438ad6edf248c1ef593f9c139f8/pytest-json-report-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "0d882e54ef0b3ca7af8fc7ea9353dec9", "sha256": "0e734f652e56e8f5323678781dbe16e7d7f0aa64e317f13192b3b4adaeec7438"}, "downloads": -1, "filename": "pytest_json_report-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0d882e54ef0b3ca7af8fc7ea9353dec9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4750, "upload_time": "2018-01-21T18:17:02", "upload_time_iso_8601": "2018-01-21T18:17:02.605121Z", "url": "https://files.pythonhosted.org/packages/c8/1b/50a269d936f1874141d59dbe42bad4c99f6fc711fdae00787d606ab3186e/pytest_json_report-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f26a4691e7441656d7706d6197f94a7", "sha256": "96261582371288f62135f5fb1ccfec089e405a6ae1b504d0b53367b298516547"}, "downloads": -1, "filename": "pytest-json-report-0.4.1.tar.gz", "has_sig": false, "md5_digest": "8f26a4691e7441656d7706d6197f94a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4549, "upload_time": "2018-01-21T18:17:03", "upload_time_iso_8601": "2018-01-21T18:17:03.837262Z", "url": "https://files.pythonhosted.org/packages/e6/30/15b59eca90d5d0945d7248323925e8fbfac91c23da2cc536a24a352c6652/pytest-json-report-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "240e0547a6b8b92d8f1c3dfb8a967fc7", "sha256": "f4a430e3d334b8e65bbd60d64c481993c83efc8b9e4aaed66354d97a33cb120c"}, "downloads": -1, "filename": "pytest_json_report-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "240e0547a6b8b92d8f1c3dfb8a967fc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5471, "upload_time": "2018-02-11T19:56:25", "upload_time_iso_8601": "2018-02-11T19:56:25.107655Z", "url": "https://files.pythonhosted.org/packages/ff/6c/ec3044edbe3e9dbb7fcc7491410b88ca93ff30812efc9a838145b9ae0a33/pytest_json_report-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16e9e9242ff50bd84dda008fe4d313a2", "sha256": "e7dfc94691cb643421ddca16ccb52e9c894296f9630ae9d2cf2a05b770ac6b7c"}, "downloads": -1, "filename": "pytest-json-report-0.5.0.tar.gz", "has_sig": false, "md5_digest": "16e9e9242ff50bd84dda008fe4d313a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6350, "upload_time": "2018-02-11T19:56:26", "upload_time_iso_8601": "2018-02-11T19:56:26.629070Z", "url": "https://files.pythonhosted.org/packages/33/7b/2a7e0eeef17806f44e979caf77393c7ced4bcba67d16fd0e2016de11cc46/pytest-json-report-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "2d5b0d51311b7515119c041bc2b9597a", "sha256": "0c174a14a85b5ac41e798369286b156104b5fc13bd18a248fdbd99fcd9c43471"}, "downloads": -1, "filename": "pytest_json_report-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2d5b0d51311b7515119c041bc2b9597a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5854, "upload_time": "2018-02-28T02:12:17", "upload_time_iso_8601": "2018-02-28T02:12:17.746832Z", "url": "https://files.pythonhosted.org/packages/f9/ba/478f049cfce7fa56b9a8177922c047af28c552e9bbf7e9bf5c9349985cfd/pytest_json_report-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6e67150742e3273ac6678de6fc7ed8d", "sha256": "1f4c4653ef2f9baa1e7284aea81f547901311258b2dd4913d02803dbdfa54055"}, "downloads": -1, "filename": "pytest-json-report-0.6.0.tar.gz", "has_sig": false, "md5_digest": "f6e67150742e3273ac6678de6fc7ed8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7549, "upload_time": "2018-02-28T02:12:19", "upload_time_iso_8601": "2018-02-28T02:12:19.101732Z", "url": "https://files.pythonhosted.org/packages/fe/40/515d487ceddad49e6b944b18555bf3136ca13ab75b5c9fca4b4405b7c14a/pytest-json-report-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "24eea7bcc19bcd2636c32ca1ca020142", "sha256": "737e1c2f72eaf76382f6f306dbd98bef667d1bdc1f3eb37b5257abb6931b5ff6"}, "downloads": -1, "filename": "pytest_json_report-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "24eea7bcc19bcd2636c32ca1ca020142", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5926, "upload_time": "2018-03-16T19:14:59", "upload_time_iso_8601": "2018-03-16T19:14:59.909599Z", "url": "https://files.pythonhosted.org/packages/82/af/bd743ddab9a6b8c6efaf16560626a70b944e42a92283f22ce4bc9cb74b89/pytest_json_report-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbf476a3515ad8a9971e276375898af2", "sha256": "c2fec74c863a6541a5255c022cca99fa834fc215db334802a8875199a775b8cd"}, "downloads": -1, "filename": "pytest-json-report-0.7.0.tar.gz", "has_sig": false, "md5_digest": "dbf476a3515ad8a9971e276375898af2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7721, "upload_time": "2018-03-16T19:15:01", "upload_time_iso_8601": "2018-03-16T19:15:01.208406Z", "url": "https://files.pythonhosted.org/packages/a9/17/7d712f17b489ea0a49cf348b74df47d12cb94e4ec4fec3021d05282e0b50/pytest-json-report-0.7.0.tar.gz", "yanked": false}], "0.8.0.dev0": [{"comment_text": "", "digests": {"md5": "f32828870598b14837777283d9576b94", "sha256": "352bbe76c413c2e12824cdf6974828faac451253276f0abab4d1f482365c2708"}, "downloads": -1, "filename": "pytest_json_report-0.8.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "f32828870598b14837777283d9576b94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5983, "upload_time": "2018-10-17T20:54:08", "upload_time_iso_8601": "2018-10-17T20:54:08.436929Z", "url": "https://files.pythonhosted.org/packages/8d/93/4708e7815b0b3591710f127767d5484f74704dccece4d32e5d9ef7558f25/pytest_json_report-0.8.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bce264ee4b768df5a1f1f6468570e933", "sha256": "61bde296f6f0f880b0d6ff416be2c6a96d426a5844d37dc728e096f02daefd5e"}, "downloads": -1, "filename": "pytest-json-report-0.8.0.dev0.tar.gz", "has_sig": false, "md5_digest": "bce264ee4b768df5a1f1f6468570e933", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7897, "upload_time": "2018-10-17T20:54:10", "upload_time_iso_8601": "2018-10-17T20:54:10.061039Z", "url": "https://files.pythonhosted.org/packages/0f/ab/2efb20d2e05862097832a6443f05e34d7948af6e2c8779dab729ee4848ee/pytest-json-report-0.8.0.dev0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2ea0710f16a63110cc99379bd00ee44d", "sha256": "b978fe53180fc09a98984c38002a2443637bc67b0f9287bfe3f2b4a13ff30316"}, "downloads": -1, "filename": "pytest_json_report-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2ea0710f16a63110cc99379bd00ee44d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11076, "upload_time": "2019-01-23T05:18:10", "upload_time_iso_8601": "2019-01-23T05:18:10.779974Z", "url": "https://files.pythonhosted.org/packages/00/a0/56b2aef4d41d0488919d206ef8a8e6193e8f0805bf589629b883f9920ba2/pytest_json_report-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74ae3f46652757d5561b04c7ac69708a", "sha256": "fb7035eb8d81b569cb83b4b21c6455e78cf7f96610dc07a44bc6844a840bf31b"}, "downloads": -1, "filename": "pytest-json-report-1.0.1.tar.gz", "has_sig": false, "md5_digest": "74ae3f46652757d5561b04c7ac69708a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10394, "upload_time": "2019-01-23T05:18:12", "upload_time_iso_8601": "2019-01-23T05:18:12.723885Z", "url": "https://files.pythonhosted.org/packages/b7/2d/4f992fab2798463ce3f3225e789e92175ebc3e6e617829b918f431771702/pytest-json-report-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "87075305fb143f4a18f65515f36892ce", "sha256": "0f85cff123a1136a74f3e26cc81e802634d84dd8b0a43f5aa05a1893862f6499"}, "downloads": -1, "filename": "pytest_json_report-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "87075305fb143f4a18f65515f36892ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11186, "upload_time": "2019-01-28T18:05:57", "upload_time_iso_8601": "2019-01-28T18:05:57.451547Z", "url": "https://files.pythonhosted.org/packages/12/c1/18f1968fc90baa34350de4c8329f105cc15f6580c467505b92b817bebfe7/pytest_json_report-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa3d5ba5fe578a6064d860009d576af8", "sha256": "6eb547bfb7ad992ad38611d9d50954e4a05ed187438af49dd97b0a22d2da2095"}, "downloads": -1, "filename": "pytest-json-report-1.0.2.tar.gz", "has_sig": false, "md5_digest": "aa3d5ba5fe578a6064d860009d576af8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10491, "upload_time": "2019-01-28T18:05:59", "upload_time_iso_8601": "2019-01-28T18:05:59.649710Z", "url": "https://files.pythonhosted.org/packages/96/1e/77424f48316c7d0f7381ca82f73ee353b2f61e2c7ef32fccbeae1b3857a3/pytest-json-report-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "51cb8c41f317a33645322bf809d869b0", "sha256": "7e43aa44d9c9bf76741b5a99365a57ec97d6d2b82b3bf4e6e6f17dc48bf61827"}, "downloads": -1, "filename": "pytest_json_report-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "51cb8c41f317a33645322bf809d869b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11231, "upload_time": "2019-02-04T17:57:11", "upload_time_iso_8601": "2019-02-04T17:57:11.184355Z", "url": "https://files.pythonhosted.org/packages/ed/82/b1808d5dd283d293728f45943aa1cc4c86314e28a032283a1661f85d4917/pytest_json_report-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecdab5eb11c1eac3346e666df314402b", "sha256": "a8d7ebb6a5388917b8484291a50058f0b46c8db35bd11dd2d7746cfcc63a3fa7"}, "downloads": -1, "filename": "pytest-json-report-1.0.3.tar.gz", "has_sig": false, "md5_digest": "ecdab5eb11c1eac3346e666df314402b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10553, "upload_time": "2019-02-04T17:57:13", "upload_time_iso_8601": "2019-02-04T17:57:13.231893Z", "url": "https://files.pythonhosted.org/packages/65/8a/877dfcafebc87bd2801ecee46172b1628f2a0cdeec3b206f51b945ea8f3c/pytest-json-report-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "725c2bffa58f56a5c67bac27afaf2db8", "sha256": "b5bf3f24cccffe41733f80792f153e126ec1b48d7d37c932eb260bc12981f90f"}, "downloads": -1, "filename": "pytest_json_report-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "725c2bffa58f56a5c67bac27afaf2db8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11248, "upload_time": "2019-05-31T02:54:19", "upload_time_iso_8601": "2019-05-31T02:54:19.359307Z", "url": "https://files.pythonhosted.org/packages/70/4b/fcb0a537ec75f522b443fc5c9925f39ccf39d8462f2302cb651c16d8aae0/pytest_json_report-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0abcc11e987754c5ee460e20f8e650c5", "sha256": "129a561c750e5927b9445bdd388a79162c4d17ef08517e20e254ab89f1a910e8"}, "downloads": -1, "filename": "pytest-json-report-1.0.4.tar.gz", "has_sig": false, "md5_digest": "0abcc11e987754c5ee460e20f8e650c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10566, "upload_time": "2019-05-31T02:54:21", "upload_time_iso_8601": "2019-05-31T02:54:21.193716Z", "url": "https://files.pythonhosted.org/packages/f8/cc/1f1646fe1f5ba0004e58ebe35a03cc9b75f937b531a11ca28853d008fd23/pytest-json-report-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "be77d5156d519cb22476b5370fa56b06", "sha256": "4927d16d8faf412248f61180c8bfd0fcad69a669d1c1e0804550818156d5d603"}, "downloads": -1, "filename": "pytest_json_report-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "be77d5156d519cb22476b5370fa56b06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11387, "upload_time": "2019-06-28T20:50:44", "upload_time_iso_8601": "2019-06-28T20:50:44.539682Z", "url": "https://files.pythonhosted.org/packages/04/fb/f4ebdc59370e3371516f3712ffeb21289062f5245f7d434b31412afa279d/pytest_json_report-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd87d0cc50dc4ff0506457fddf032827", "sha256": "9152226e9345bda3fb2aeb10071a23def7396f8e4fbf415b09e52259fdc5f3e3"}, "downloads": -1, "filename": "pytest-json-report-1.0.5.tar.gz", "has_sig": false, "md5_digest": "dd87d0cc50dc4ff0506457fddf032827", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10688, "upload_time": "2019-06-28T20:50:46", "upload_time_iso_8601": "2019-06-28T20:50:46.128337Z", "url": "https://files.pythonhosted.org/packages/bc/3c/ded5fa0b6ce64461ede06fb23d1ad1a8d3c70295e598a440e223ad10d4e9/pytest-json-report-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b3e487a1b14a1cec874f22822b538293", "sha256": "b3ef55e1bbabd98fa4e8c80bc6871abfd1a7193ad4f9c13a862929c49efbe845"}, "downloads": -1, "filename": "pytest_json_report-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b3e487a1b14a1cec874f22822b538293", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11891, "upload_time": "2019-07-06T19:13:14", "upload_time_iso_8601": "2019-07-06T19:13:14.984442Z", "url": "https://files.pythonhosted.org/packages/de/68/5ddf583c556158bf9dac8a8683a03e1c4d1d980ede9f11fb2dd3d42312f9/pytest_json_report-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9abdad6de0a4cacb99488d94a7bab73", "sha256": "64d7fe55b559317f2c8cf871184c03579fdeb4d1e96644338ad64fcf2045dc16"}, "downloads": -1, "filename": "pytest-json-report-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a9abdad6de0a4cacb99488d94a7bab73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12420, "upload_time": "2019-07-06T19:13:16", "upload_time_iso_8601": "2019-07-06T19:13:16.779676Z", "url": "https://files.pythonhosted.org/packages/9e/45/1cae838f8f5a127240a375053992f1deb55a5781b36ebad2ca254e008417/pytest-json-report-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "29d3bcecea3ba4f9e3e5b89e0d53dff3", "sha256": "33699dcd3389770f0db47c1a104d1746f8d42f8da16747dc807dd8a1143b5c74"}, "downloads": -1, "filename": "pytest_json_report-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29d3bcecea3ba4f9e3e5b89e0d53dff3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12085, "upload_time": "2019-11-05T20:43:30", "upload_time_iso_8601": "2019-11-05T20:43:30.671212Z", "url": "https://files.pythonhosted.org/packages/1f/e4/1f22a554ed536597e762759c085d5bed6350ba53168c95e9a0c0753a0cd8/pytest_json_report-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49ab6d344ed1bb18409660a366e6afdd", "sha256": "3f81f20586223f1cc97c0f60f1dea5f8833ea2493505282abb9ce06a9f45ebdc"}, "downloads": -1, "filename": "pytest-json-report-1.2.0.tar.gz", "has_sig": false, "md5_digest": "49ab6d344ed1bb18409660a366e6afdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20534, "upload_time": "2019-11-05T20:43:32", "upload_time_iso_8601": "2019-11-05T20:43:32.428623Z", "url": "https://files.pythonhosted.org/packages/4c/65/352e7c92af05af428de876663681b18c56a6cb249b98b4e0e462cfeb6009/pytest-json-report-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "49d84465f3c2750471cdf327f0d44248", "sha256": "08182e00de9eb1735274fe4b91b0cf7314e138c0dac7e4ae424c3ec469787a2b"}, "downloads": -1, "filename": "pytest_json_report-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49d84465f3c2750471cdf327f0d44248", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12105, "upload_time": "2019-11-30T08:31:11", "upload_time_iso_8601": "2019-11-30T08:31:11.479687Z", "url": "https://files.pythonhosted.org/packages/66/f7/5a02eb13498edebaf8bc356a9fab44bf5ac032b8d7c8dd1a70d5e6f6be7c/pytest_json_report-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81b3b850bd9ea3503acccf675beae13c", "sha256": "628b2a3a8f6edf069bf502ad8f65694ce6f2e4f86e73db442f18122389dafc38"}, "downloads": -1, "filename": "pytest-json-report-1.2.1.tar.gz", "has_sig": false, "md5_digest": "81b3b850bd9ea3503acccf675beae13c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21263, "upload_time": "2019-11-30T08:31:13", "upload_time_iso_8601": "2019-11-30T08:31:13.412747Z", "url": "https://files.pythonhosted.org/packages/04/57/d39c9e7a79e808376d689347cb020d615c2218b2d8018087040e42002a89/pytest-json-report-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49d84465f3c2750471cdf327f0d44248", "sha256": "08182e00de9eb1735274fe4b91b0cf7314e138c0dac7e4ae424c3ec469787a2b"}, "downloads": -1, "filename": "pytest_json_report-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49d84465f3c2750471cdf327f0d44248", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12105, "upload_time": "2019-11-30T08:31:11", "upload_time_iso_8601": "2019-11-30T08:31:11.479687Z", "url": "https://files.pythonhosted.org/packages/66/f7/5a02eb13498edebaf8bc356a9fab44bf5ac032b8d7c8dd1a70d5e6f6be7c/pytest_json_report-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81b3b850bd9ea3503acccf675beae13c", "sha256": "628b2a3a8f6edf069bf502ad8f65694ce6f2e4f86e73db442f18122389dafc38"}, "downloads": -1, "filename": "pytest-json-report-1.2.1.tar.gz", "has_sig": false, "md5_digest": "81b3b850bd9ea3503acccf675beae13c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21263, "upload_time": "2019-11-30T08:31:13", "upload_time_iso_8601": "2019-11-30T08:31:13.412747Z", "url": "https://files.pythonhosted.org/packages/04/57/d39c9e7a79e808376d689347cb020d615c2218b2d8018087040e42002a89/pytest-json-report-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:02 2020"}