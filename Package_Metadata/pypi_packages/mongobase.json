{"info": {"author": "Kazuki Otsuka", "author_email": "otsuka.kazuki@googlemail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Topic :: Database :: Front-Ends", "Topic :: Software Development :: Libraries"], "description": "![MongoBase Logo](https://github.com/kazukiotsuka/mongobase/blob/master/docs/source/img/mongobase.png)\n\n\nMongoBase is a Python package that provides high-level features:\n- Lightweight OR Mapper (ORM) for MongoDB\n- Simple DataBase Model structure definition with automatic type checking\n- High-level automatic text search indexes generation from multiple keys\n\n### Dependencies\n- pymongo_ 3.7+\n\nMore About MongoBase\n-------------------------\n\n| Component | Description |\n| ---- | --- |\n|**mongobase** | an high-level interface with model definition system from ModelBase and many database operations|\n|**modelbase** | an OR Mapper class with automatic type checking according to the defined structure (MongoBase subclass)|\n\nPhilosophies on MongoBase are\n- enable to use MongoDB on python easily and programatically safely\n- cleary viewable everything about the data model just by a quick looking over the model definition\n- easy to learn how to use. for instance, method names correspond to MongoDB to be able to use them as if on the mongoclient.\n- high performance. it uses the latest connection pool mechanism so that efficiently use client objects\n\n\n\n\nBasic Interfaces\n---------------------------\n\n#### Model Definition\n\nHere is the sample definition of a model.\n\n```python\nclass Bird(MongoBase):\n    __collection__ = 'birds'\n    __structure__ = {\n        '_id': ObjectId,\n        'name': str,\n        'age': int,\n        'is_able_to_fly': bool,\n        'created': dt.datetime,\n        'updated': dt.datetime\n    }\n    __required_fields__ = ['_id', 'name']\n    __default_values__ = {\n        '_id': ObjectId(),\n        'is_able_to_fly': False,\n        'created': dt.datetime.now(dt.timezone.utc),\n        'updated': dt.datetime.now(dt.timezone.utc)\n    }\n    __validators__ = {\n        'name': validate_length(0, 1000),\n    }\n    __search_text_keys__ = ['name'] \n    __search_text_index_type__ = 'bigram'\n    __indexes__ = [\n        [('item_name', ASCENDING),],\n    ]\n```\n\nThe core model structure is defined as `__structure__` by a dictionaly. It is possible to cleary find out how the document structure is.\nOther components of the model definition is:\n\n| Component | Description |\n| ---- | --- |\n| `__collection__`| the collection name of the document. (required)|\n| `__structure__`| the core definition of the model. the type is automatically checked everytime when it is written on the db. the key `_id` is required. (required)|\n| `__required_fields__`| required properties. (optional)|\n| `__default_values__`| set default values for properties. (optional)|\n| `__validators__`| validator methods automatically check the value when the document is written on the db. (optional)|\n| `__search_text_keys__`| multiple keys can be set for the search text index. automatically written as the `search_text` property. (optional)|\n| `__search_text_index_type__`| `bigram`: value of `search_text` is set as bigram strings. `morpheme`: the string in `search_text` is parsed to morphemes (optional)|\n| `__search_text_weight_type__`| `uniform`: each string has the same weight. `weighted`: enable to set weights as `[('key1', 3), ('key2', 1)]` (optional)|\n| `__indexes__`| indexes can be set. `.createIndex()` method creates the indexes on the db. (optional)|\n\n\nNow the basic usages are introduced.\n\n#### Insert & Update\n```python\n>> chicken = Bird({'_id': ObjectId(), 'name': 'chicken', 'age': 3})\n>> chicken.save()\n{'_id': ObjectId('5c80f4fa16fa0d6c102cd2a6'),\n 'name': 'chicken',\n 'age': 3,\n 'is_able_to_fly': False,\n 'created': datetime.datetime(2019, 3, 7, 10, 39, 54, 643685, tzinfo=datetime.timezone.utc),\n 'updated': datetime.datetime(2019, 3, 7, 10, 39, 54, 643690, tzinfo=datetime.timezone.utc)}\n>> chicken.is_able_to_fly = True\n>> chicken.update()\n```\n\n#### Find\n```python\n>>> Bird.findOne({'name': 'mother chicken'})\n{'_id': ObjectId('5c79166716fa0d215968d3ba'),\n 'name': 'mother chicken',\n 'age': 63,\n 'is_able_to_fly': False,\n 'created': datetime.datetime(2019, 3, 1, 11, 20, 21, 306000),\n 'updated': datetime.datetime(2019, 3, 1, 11, 20, 21, 306000)}\n>>> mother_chicken.remove()\n1\n>>> all_chickens = Bird.find({'name': 'chicken'}, sort=[('_id', ASCENDING)])\nlist of mongobase instances are returned.\n>>> len(all_chickens)\n18\n>>> Bird.count()\n201\n```\n\n#### Bulk Operations\n\n- bulk_insert\n```python\n>>> many_pigeon = []\n>>> for i in range(10000):\n>>>     many_pigeon += [Bird({'_id': ObjectId(), 'name': f'pigeon', 'age': i})]\n>>> Bird.bulk_insert(many_pigeon)\n10000\n```\n\n- bulk_update\n```\n>>> updates = []\n>>> for pigeon in many_pigeon:\n>>>    pigeon.age *= 3\n>>>    updates += [pigeon]\n>>> Bird.bulk_update(updates)\n10000\n```\n\n\n\n\n#### Contextual Database\n\n```python\nwith db_context(db_uri='localhost', db_name='test') as db:\n    flamingo = Bird({'_id': ObjectId(), 'name': 'flamingo', 'age': 20})\n    flamingo.save(db=db)\n\n    flamingo.age = 23\n    flamingo = flamingo.update(db=db)\n    flamingo = Bird.findAndUpdateById(flamingo._id, {'age': 24}, db=db)\n\n    n_flamingo = Bird.count({'name': 'flamingo'}, db=db)\n\nBird.count({'name': 'flamingo'})\n\n```\n\n#### Multi Processing\n```python\ndef breed(tasks):\n    db = Bird._db()  # create a MongoDB Client for the forked process\n    for i in range(len(tasks)):\n        sparrow = Bird({'_id': ObjectId(), 'name': f'sparrow', 'age': 0})\n        sparrow.save(db=db)\n\ntasks = [[f'task {i}' for i in range(N_BATCH)] for j in range(N_PROCESS)\nprocess_pool = multiprocessing.Pool(N_PROCESS)\nprocess_pool.map(breed, tasks)\n```\n\n\n#### MongoBase has Many Other Features\nIf you'd like to know other features, please check the file mongobase.py.\n\nDB Settings\n---------------------------\nsimply write to mongobase/config.py\n```python\nMONGO_DB_URI = \"101.21.434.121\"\nMONGO_DB_URI_TEST = \"localhost\"\nMONGO_DB_NAME = \"zoo\"\nMONGO_DB_NAME_TEST = \"zoo-test\"\nMONGO_DB_CONNECT_TIMEOUT_MS = 3000\nMONGO_DB_SERVER_SELECTION_TIMEOUT_MS = 3000\nMONGO_DB_SOCKET_TIMEOUT_MS = 300000\nMONGO_DB_SOCKET_KEEP_ALIVE = True\nMONGO_DB_MAX_IDLE_TIME_MS = 40000\nMONGO_DB_MAX_POOL_SIZE = 200\nMONGO_DB_MIN_POOL_SIZE = 10\nMONGO_DB_WAIT_QUEUE_MULTIPLE = 12\nMONGO_DB_WAIT_QUEUE_TIMEOUT_MS = 100\n```\n\n\nGetting Started\n------------------\nIf you start MongoBase, there is a tutorial jupyter notebook here.  \nHighly recommend to check it.\nhttps://github.com/kazukiotsuka/mongobase/blob/master/tutorial/MongoBase_starting_guide.ipynb\n\n\nRelease and Contributing\n---------------------------\nMany methods are the wrapper of pymongo.  \nThere are a lot of features that this library is covering.  \nWould appreciate if you add their methods anytime.\n\n\n\n#### version 0.3.0\n##### New features\n- bulk_insert()\n- bulk_update()\n- performance improvement with ConnectionPool (single MongoClient for each process)\n- MongoBase_start_guide.ipynb\n- contextual db client mode by  `with db_context() as db`\n- code efficiency improvement\n- abolished `insert_if_not_exists` parameter for `save(), update()`\n- changed some method names (e.g. remove -> delete)\n- using pymongo > 3.5 methods (e.g. insert_one()) \n- enhance documents\n\n#### version 0.2.0\n##### New features\n- MongoBase and ModelBase class are separated\n- enable to use MongoClient instance dynamically\n- some useful mongodb operations are added\n\n#### version 0.1.0\n##### New features\n- The initial implementation\n- automatic type checking mechanism\n- basic mongodb operations\n\n\nLicense\n--------------------\nMongoBase is MIT-style licensed, as found in the LICENSE file.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kazukiotsuka/mongobase", "keywords": "mongodb,mongo,pymongo,orm,or mapper", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mongobase", "package_url": "https://pypi.org/project/mongobase/", "platform": "", "project_url": "https://pypi.org/project/mongobase/", "project_urls": {"Homepage": "https://github.com/kazukiotsuka/mongobase"}, "release_url": "https://pypi.org/project/mongobase/0.3.1a0/", "requires_dist": ["pymongo (>=3.6.0)"], "requires_python": "~=3.6", "summary": "A lightweight Pythonic OR Mapper for MongoDB.", "version": "0.3.1a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"MongoBase Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8354055c4024d9af127508d1352c816e876b12b/68747470733a2f2f6769746875622e636f6d2f6b617a756b696f7473756b612f6d6f6e676f626173652f626c6f622f6d61737465722f646f63732f736f757263652f696d672f6d6f6e676f626173652e706e67\"></p>\n<p>MongoBase is a Python package that provides high-level features:</p>\n<ul>\n<li>Lightweight OR Mapper (ORM) for MongoDB</li>\n<li>Simple DataBase Model structure definition with automatic type checking</li>\n<li>High-level automatic text search indexes generation from multiple keys</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li>pymongo_ 3.7+</li>\n</ul>\n<h2>More About MongoBase</h2>\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>mongobase</strong></td>\n<td>an high-level interface with model definition system from ModelBase and many database operations</td>\n</tr>\n<tr>\n<td><strong>modelbase</strong></td>\n<td>an OR Mapper class with automatic type checking according to the defined structure (MongoBase subclass)</td>\n</tr></tbody></table>\n<p>Philosophies on MongoBase are</p>\n<ul>\n<li>enable to use MongoDB on python easily and programatically safely</li>\n<li>cleary viewable everything about the data model just by a quick looking over the model definition</li>\n<li>easy to learn how to use. for instance, method names correspond to MongoDB to be able to use them as if on the mongoclient.</li>\n<li>high performance. it uses the latest connection pool mechanism so that efficiently use client objects</li>\n</ul>\n<h2>Basic Interfaces</h2>\n<h4>Model Definition</h4>\n<p>Here is the sample definition of a model.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Bird</span><span class=\"p\">(</span><span class=\"n\">MongoBase</span><span class=\"p\">):</span>\n    <span class=\"n\">__collection__</span> <span class=\"o\">=</span> <span class=\"s1\">'birds'</span>\n    <span class=\"n\">__structure__</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n        <span class=\"s1\">'is_able_to_fly'</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n        <span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span>\n        <span class=\"s1\">'updated'</span><span class=\"p\">:</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">__required_fields__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'_id'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">]</span>\n    <span class=\"n\">__default_values__</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">(),</span>\n        <span class=\"s1\">'is_able_to_fly'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n        <span class=\"s1\">'updated'</span><span class=\"p\">:</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">__validators__</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">validate_length</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">__search_text_keys__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> \n    <span class=\"n\">__search_text_index_type__</span> <span class=\"o\">=</span> <span class=\"s1\">'bigram'</span>\n    <span class=\"n\">__indexes__</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[(</span><span class=\"s1\">'item_name'</span><span class=\"p\">,</span> <span class=\"n\">ASCENDING</span><span class=\"p\">),],</span>\n    <span class=\"p\">]</span>\n</pre>\n<p>The core model structure is defined as <code>__structure__</code> by a dictionaly. It is possible to cleary find out how the document structure is.\nOther components of the model definition is:</p>\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__collection__</code></td>\n<td>the collection name of the document. (required)</td>\n</tr>\n<tr>\n<td><code>__structure__</code></td>\n<td>the core definition of the model. the type is automatically checked everytime when it is written on the db. the key <code>_id</code> is required. (required)</td>\n</tr>\n<tr>\n<td><code>__required_fields__</code></td>\n<td>required properties. (optional)</td>\n</tr>\n<tr>\n<td><code>__default_values__</code></td>\n<td>set default values for properties. (optional)</td>\n</tr>\n<tr>\n<td><code>__validators__</code></td>\n<td>validator methods automatically check the value when the document is written on the db. (optional)</td>\n</tr>\n<tr>\n<td><code>__search_text_keys__</code></td>\n<td>multiple keys can be set for the search text index. automatically written as the <code>search_text</code> property. (optional)</td>\n</tr>\n<tr>\n<td><code>__search_text_index_type__</code></td>\n<td><code>bigram</code>: value of <code>search_text</code> is set as bigram strings. <code>morpheme</code>: the string in <code>search_text</code> is parsed to morphemes (optional)</td>\n</tr>\n<tr>\n<td><code>__search_text_weight_type__</code></td>\n<td><code>uniform</code>: each string has the same weight. <code>weighted</code>: enable to set weights as <code>[('key1', 3), ('key2', 1)]</code> (optional)</td>\n</tr>\n<tr>\n<td><code>__indexes__</code></td>\n<td>indexes can be set. <code>.createIndex()</code> method creates the indexes on the db. (optional)</td>\n</tr></tbody></table>\n<p>Now the basic usages are introduced.</p>\n<h4>Insert &amp; Update</h4>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">chicken</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span><span class=\"p\">({</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">(),</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'chicken'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">chicken</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">(</span><span class=\"s1\">'5c80f4fa16fa0d6c102cd2a6'</span><span class=\"p\">),</span>\n <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'chicken'</span><span class=\"p\">,</span>\n <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_able_to_fly'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">643685</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n <span class=\"s1\">'updated'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">643690</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">)}</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">chicken</span><span class=\"o\">.</span><span class=\"n\">is_able_to_fly</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">chicken</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n</pre>\n<h4>Find</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bird</span><span class=\"o\">.</span><span class=\"n\">findOne</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'mother chicken'</span><span class=\"p\">})</span>\n<span class=\"p\">{</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">(</span><span class=\"s1\">'5c79166716fa0d215968d3ba'</span><span class=\"p\">),</span>\n <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'mother chicken'</span><span class=\"p\">,</span>\n <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">63</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_able_to_fly'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">306000</span><span class=\"p\">),</span>\n <span class=\"s1\">'updated'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">306000</span><span class=\"p\">)}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mother_chicken</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">all_chickens</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'chicken'</span><span class=\"p\">},</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'_id'</span><span class=\"p\">,</span> <span class=\"n\">ASCENDING</span><span class=\"p\">)])</span>\n<span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">mongobase</span> <span class=\"n\">instances</span> <span class=\"n\">are</span> <span class=\"n\">returned</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_chickens</span><span class=\"p\">)</span>\n<span class=\"mi\">18</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bird</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">201</span>\n</pre>\n<h4>Bulk Operations</h4>\n<ul>\n<li>bulk_insert</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">many_pigeon</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">many_pigeon</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">Bird</span><span class=\"p\">({</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">(),</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s1\">'pigeon'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">})]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bird</span><span class=\"o\">.</span><span class=\"n\">bulk_insert</span><span class=\"p\">(</span><span class=\"n\">many_pigeon</span><span class=\"p\">)</span>\n<span class=\"mi\">10000</span>\n</pre>\n<ul>\n<li>bulk_update</li>\n</ul>\n<pre><code>&gt;&gt;&gt; updates = []\n&gt;&gt;&gt; for pigeon in many_pigeon:\n&gt;&gt;&gt;    pigeon.age *= 3\n&gt;&gt;&gt;    updates += [pigeon]\n&gt;&gt;&gt; Bird.bulk_update(updates)\n10000\n</code></pre>\n<h4>Contextual Database</h4>\n<pre><span class=\"k\">with</span> <span class=\"n\">db_context</span><span class=\"p\">(</span><span class=\"n\">db_uri</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">db</span><span class=\"p\">:</span>\n    <span class=\"n\">flamingo</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span><span class=\"p\">({</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">(),</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'flamingo'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">})</span>\n    <span class=\"n\">flamingo</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n    <span class=\"n\">flamingo</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">23</span>\n    <span class=\"n\">flamingo</span> <span class=\"o\">=</span> <span class=\"n\">flamingo</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">)</span>\n    <span class=\"n\">flamingo</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span><span class=\"o\">.</span><span class=\"n\">findAndUpdateById</span><span class=\"p\">(</span><span class=\"n\">flamingo</span><span class=\"o\">.</span><span class=\"n\">_id</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">},</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n    <span class=\"n\">n_flamingo</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'flamingo'</span><span class=\"p\">},</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n<span class=\"n\">Bird</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'flamingo'</span><span class=\"p\">})</span>\n</pre>\n<h4>Multi Processing</h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">breed</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">):</span>\n    <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">()</span>  <span class=\"c1\"># create a MongoDB Client for the forked process</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">)):</span>\n        <span class=\"n\">sparrow</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span><span class=\"p\">({</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">(),</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s1\">'sparrow'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})</span>\n        <span class=\"n\">sparrow</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"sa\">f</span><span class=\"s1\">'task </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">'</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N_BATCH</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N_PROCESS</span><span class=\"p\">)</span>\n<span class=\"n\">process_pool</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"n\">N_PROCESS</span><span class=\"p\">)</span>\n<span class=\"n\">process_pool</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">breed</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">)</span>\n</pre>\n<h4>MongoBase has Many Other Features</h4>\n<p>If you'd like to know other features, please check the file mongobase.py.</p>\n<h2>DB Settings</h2>\n<p>simply write to mongobase/config.py</p>\n<pre><span class=\"n\">MONGO_DB_URI</span> <span class=\"o\">=</span> <span class=\"s2\">\"101.21.434.121\"</span>\n<span class=\"n\">MONGO_DB_URI_TEST</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span>\n<span class=\"n\">MONGO_DB_NAME</span> <span class=\"o\">=</span> <span class=\"s2\">\"zoo\"</span>\n<span class=\"n\">MONGO_DB_NAME_TEST</span> <span class=\"o\">=</span> <span class=\"s2\">\"zoo-test\"</span>\n<span class=\"n\">MONGO_DB_CONNECT_TIMEOUT_MS</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span>\n<span class=\"n\">MONGO_DB_SERVER_SELECTION_TIMEOUT_MS</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span>\n<span class=\"n\">MONGO_DB_SOCKET_TIMEOUT_MS</span> <span class=\"o\">=</span> <span class=\"mi\">300000</span>\n<span class=\"n\">MONGO_DB_SOCKET_KEEP_ALIVE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">MONGO_DB_MAX_IDLE_TIME_MS</span> <span class=\"o\">=</span> <span class=\"mi\">40000</span>\n<span class=\"n\">MONGO_DB_MAX_POOL_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">MONGO_DB_MIN_POOL_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">MONGO_DB_WAIT_QUEUE_MULTIPLE</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n<span class=\"n\">MONGO_DB_WAIT_QUEUE_TIMEOUT_MS</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n</pre>\n<h2>Getting Started</h2>\n<p>If you start MongoBase, there is a tutorial jupyter notebook here.<br>\nHighly recommend to check it.\n<a href=\"https://github.com/kazukiotsuka/mongobase/blob/master/tutorial/MongoBase_starting_guide.ipynb\" rel=\"nofollow\">https://github.com/kazukiotsuka/mongobase/blob/master/tutorial/MongoBase_starting_guide.ipynb</a></p>\n<h2>Release and Contributing</h2>\n<p>Many methods are the wrapper of pymongo.<br>\nThere are a lot of features that this library is covering.<br>\nWould appreciate if you add their methods anytime.</p>\n<h4>version 0.3.0</h4>\n<h5>New features</h5>\n<ul>\n<li>bulk_insert()</li>\n<li>bulk_update()</li>\n<li>performance improvement with ConnectionPool (single MongoClient for each process)</li>\n<li>MongoBase_start_guide.ipynb</li>\n<li>contextual db client mode by  <code>with db_context() as db</code></li>\n<li>code efficiency improvement</li>\n<li>abolished <code>insert_if_not_exists</code> parameter for <code>save(), update()</code></li>\n<li>changed some method names (e.g. remove -&gt; delete)</li>\n<li>using pymongo &gt; 3.5 methods (e.g. insert_one())</li>\n<li>enhance documents</li>\n</ul>\n<h4>version 0.2.0</h4>\n<h5>New features</h5>\n<ul>\n<li>MongoBase and ModelBase class are separated</li>\n<li>enable to use MongoClient instance dynamically</li>\n<li>some useful mongodb operations are added</li>\n</ul>\n<h4>version 0.1.0</h4>\n<h5>New features</h5>\n<ul>\n<li>The initial implementation</li>\n<li>automatic type checking mechanism</li>\n<li>basic mongodb operations</li>\n</ul>\n<h2>License</h2>\n<p>MongoBase is MIT-style licensed, as found in the LICENSE file.</p>\n\n          </div>"}, "last_serial": 4915000, "releases": {"0.3.0a0": [{"comment_text": "", "digests": {"md5": "549a9b5ab650c317940149e5b40e31ba", "sha256": "cf084e2aa400ca1076d85d1c031a0f406ee2a57c41c015362bede0504b205e61"}, "downloads": -1, "filename": "mongobase-0.3.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "549a9b5ab650c317940149e5b40e31ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 14398, "upload_time": "2019-03-08T09:10:01", "upload_time_iso_8601": "2019-03-08T09:10:01.241501Z", "url": "https://files.pythonhosted.org/packages/9e/9d/abbec7833b185528775306b7a153f65520d51fc6b4085908b745be1dffd3/mongobase-0.3.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6533d8885d67dbd7ef95dae2446f6e56", "sha256": "0867cf68e8e633baa602bfb9bc5838c522595b5d88b96a5b8e9288c5d94b8152"}, "downloads": -1, "filename": "mongobase-0.3.0a0.tar.gz", "has_sig": false, "md5_digest": "6533d8885d67dbd7ef95dae2446f6e56", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 15201, "upload_time": "2019-03-08T09:10:03", "upload_time_iso_8601": "2019-03-08T09:10:03.294613Z", "url": "https://files.pythonhosted.org/packages/47/32/6b5e25287d2f72846d690c4a57c400f0ebcb3f05c171dbb509a52847087f/mongobase-0.3.0a0.tar.gz", "yanked": false}], "0.3.1a0": [{"comment_text": "", "digests": {"md5": "eb4e73e6c20f14c5cca4bf642cb02da9", "sha256": "d9b67d021da1686e1be16bfcf102e92db6f2d44690adbb29ce3c3089c20dd8cc"}, "downloads": -1, "filename": "mongobase-0.3.1a0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb4e73e6c20f14c5cca4bf642cb02da9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 14457, "upload_time": "2019-03-08T10:53:01", "upload_time_iso_8601": "2019-03-08T10:53:01.825639Z", "url": "https://files.pythonhosted.org/packages/72/47/c17d714068d2b251e5323c5d10a001ac90712ba0a739e0a5eb52a956a171/mongobase-0.3.1a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19d26ea7fec0229f728e371ce3156a29", "sha256": "d54c9ec0467f2fdc7a2b49e646f0da9481d23a828dcbeaeb64a7d3253e1ac2a4"}, "downloads": -1, "filename": "mongobase-0.3.1a0.tar.gz", "has_sig": false, "md5_digest": "19d26ea7fec0229f728e371ce3156a29", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 15307, "upload_time": "2019-03-08T10:53:03", "upload_time_iso_8601": "2019-03-08T10:53:03.293246Z", "url": "https://files.pythonhosted.org/packages/b1/71/45b362896619b95818f225b34d59ca6afab4f8483a16aed18144cb6ff5fb/mongobase-0.3.1a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eb4e73e6c20f14c5cca4bf642cb02da9", "sha256": "d9b67d021da1686e1be16bfcf102e92db6f2d44690adbb29ce3c3089c20dd8cc"}, "downloads": -1, "filename": "mongobase-0.3.1a0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb4e73e6c20f14c5cca4bf642cb02da9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 14457, "upload_time": "2019-03-08T10:53:01", "upload_time_iso_8601": "2019-03-08T10:53:01.825639Z", "url": "https://files.pythonhosted.org/packages/72/47/c17d714068d2b251e5323c5d10a001ac90712ba0a739e0a5eb52a956a171/mongobase-0.3.1a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19d26ea7fec0229f728e371ce3156a29", "sha256": "d54c9ec0467f2fdc7a2b49e646f0da9481d23a828dcbeaeb64a7d3253e1ac2a4"}, "downloads": -1, "filename": "mongobase-0.3.1a0.tar.gz", "has_sig": false, "md5_digest": "19d26ea7fec0229f728e371ce3156a29", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 15307, "upload_time": "2019-03-08T10:53:03", "upload_time_iso_8601": "2019-03-08T10:53:03.293246Z", "url": "https://files.pythonhosted.org/packages/b1/71/45b362896619b95818f225b34d59ca6afab4f8483a16aed18144cb6ff5fb/mongobase-0.3.1a0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:21 2020"}