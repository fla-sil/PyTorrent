{"info": {"author": "Chris Sewell", "author_email": "chrisj_sewell@hotmail.com", "bugtrack_url": null, "classifiers": ["Framework :: AiiDA", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Physics"], "description": "[![Build Status](https://travis-ci.org/chrisjsewell/aiida-gulp.svg?branch=master)](https://travis-ci.org/chrisjsewell/aiida-gulp)\n[![Coverage Status](https://coveralls.io/repos/github/chrisjsewell/aiida-gulp/badge.svg?branch=master)](https://coveralls.io/github/chrisjsewell/aiida-gulp?branch=master)\n[![Docs status](https://readthedocs.org/projects/aiida-gulp/badge)](http://aiida-gulp.readthedocs.io/)\n[![PyPI](https://img.shields.io/pypi/v/aiida-gulp.svg)](https://pypi.python.org/pypi/aiida-gulp/)\n[![Anaconda](https://anaconda.org/conda-forge/aiida-gulp/badges/version.svg)](https://anaconda.org/conda-forge/aiida-gulp)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n# aiida-gulp\n\nAiiDA plugin for running the [GULP](http://gulp.curtin.edu.au) code.\n\n**Documentation**: https://readthedocs.org/projects/aiida-gulp\n\n## Installation\n\nTo install from Conda (recommended)::\n\n```shell\n>> conda install -c conda-forge aiida-gulp aiida-core.services\n```\n\nTo install from pypi::\n\n```shell\n>> pip install aiida-gulp\n```\n\nTo install the development version:\n\n```shell\n>> git clone https://github.com/chrisjsewell/aiida-gulp .\n>> cd aiida-gulp\n>> pip install -e .  # also installs aiida, if missing (but not postgres)\n>> #pip install -e .[pre-commit,testing] # install extras for more features\n>> verdi quicksetup  # set up a new profile\n>> verdi calculation plugins  # should now show the calculation plugins (with prefix gulp.)\n```\n\n## Development\n\n### Testing against mock GULP executables\n\nBecause GULP is a licensed software, it is not possible to source a copy of the executable on Travis CI.\nTherefore, a mock executable (`gulp_mock`) has been created for testing purposes (which also speeds up test runs).\n\nThis executable computes the md5 hash of the supplied input file and tries to match it against a dictionary of\nprecomputed hashes. If found, the executable will write the matching output (from `test/output_files`) to stdout.\n\nThe following will discover and run all unit test:\n\n```shell\n>> pip install -e .[testing]\n>> reentry scan -r aiida\n>> pytest -v\n```\n\nTo omit tests which call external executables (like `gulp`):\n\n```shell\n>> pytest --gulp-skip-exec\n```\n\nTo call the actual executable (e.g. `gulp` instead of `gulp_mock`):\n\n```shell\n>> pytest --gulp-no-mock\n```\n\nTo output the results of calcjob executions to a specific directory:\n\n```shell\n>> pytest --gulp-workdir \"test_workdir\"\n```\n\n### Coding Style Requirements\n\nThe code style is tested using [flake8](http://flake8.pycqa.org),\nwith the configuration set in `.flake8`, and code should be formatted with [black](https://github.com/ambv/black).\n\nInstalling with `aiida-gulp[code_style]` makes the [pre-commit](https://pre-commit.com/)\npackage available, which will ensure these tests are passed by reformatting the code\nand testing for lint errors before submitting a commit.\nIt can be setup by:\n\n```shell\n>> cd aiida-gulp\n>> pre-commit install\n```\n\nOptionally you can run `black` and `flake8` separately:\n\n```shell\n>> black .  # recursively find and format files in-place\n>> flake8\n```\n\nEditors like VS Code also have automatic code reformat utilities, which can adhere to this standard.\n\n## License\n\nSee ``LICENSE`` file\n\n## Contact\n\nchrisj_sewell@hotmail.com\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrisjsewell/aiida-gulp", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aiida-gulp", "package_url": "https://pypi.org/project/aiida-gulp/", "platform": "", "project_url": "https://pypi.org/project/aiida-gulp/", "project_urls": {"Homepage": "https://github.com/chrisjsewell/aiida-gulp"}, "release_url": "https://pypi.org/project/aiida-gulp/0.10.0b5/", "requires_dist": ["aiida-core (==1.0.0b5)", "six (>=1.12.0)", "ruamel.yaml", "jsonextended (>=0.7.10)", "jsonschema", "spglib (<2.0.0,>=1.10.0)", "importlib-resources", "ase (<3.18.0,>=3.12.0) ; python_version < \"3\"", "PyCifRW (==4.2.1) ; python_version < \"3\"", "pathlib2 ; python_version < \"3.4\"", "ase (<4.0.0,>=3.12.0) ; python_version >= \"3\"", "PyCifRW (==4.4) ; python_version >= \"3\"", "black (==19.3b0) ; extra == 'code_style'", "flake8 (<3.8.0,>=3.7.0) ; extra == 'code_style'", "pre-commit (==1.17.0) ; extra == 'code_style'", "doc8 (<0.9.0,>=0.8.0) ; extra == 'code_style'", "sphinx (>=1.6) ; extra == 'docs'", "ipypublish (>=0.10.7) ; extra == 'docs'", "mock (==2.0.0) ; extra == 'testing'", "pgtest (==1.2.0) ; extra == 'testing'", "sqlalchemy-diff (==0.1.3) ; extra == 'testing'", "pytest (==3.6.3) ; extra == 'testing'", "wheel (>=0.31) ; extra == 'testing'", "coverage ; extra == 'testing'", "pytest-cov ; extra == 'testing'", "pytest-timeout ; extra == 'testing'", "pytest-regressions ; extra == 'testing'", "pytest-notebook ; (python_version >= \"3.5\") and extra == 'testing'"], "requires_python": "", "summary": "AiiDA plugin for running the GULP MD code", "version": "0.10.0b5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/chrisjsewell/aiida-gulp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3beb3e201511577b09ecfa322a81fb203c3b526e/68747470733a2f2f7472617669732d63692e6f72672f63687269736a736577656c6c2f61696964612d67756c702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/chrisjsewell/aiida-gulp?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49a9e87b7dbd895a19da855b49a9f08b691068c7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f63687269736a736577656c6c2f61696964612d67756c702f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://aiida-gulp.readthedocs.io/\" rel=\"nofollow\"><img alt=\"Docs status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95606f4063aed8118fad5c595504cc27e70b2826/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696964612d67756c702f6261646765\"></a>\n<a href=\"https://pypi.python.org/pypi/aiida-gulp/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff61800e71bfe453ee07a809a24387c281565251/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61696964612d67756c702e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/aiida-gulp\" rel=\"nofollow\"><img alt=\"Anaconda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de8a1b2be3c247f38e7a594d824f8b19217fdddf/68747470733a2f2f616e61636f6e64612e6f72672f636f6e64612d666f7267652f61696964612d67756c702f6261646765732f76657273696f6e2e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h1>aiida-gulp</h1>\n<p>AiiDA plugin for running the <a href=\"http://gulp.curtin.edu.au\" rel=\"nofollow\">GULP</a> code.</p>\n<p><strong>Documentation</strong>: <a href=\"https://readthedocs.org/projects/aiida-gulp\" rel=\"nofollow\">https://readthedocs.org/projects/aiida-gulp</a></p>\n<h2>Installation</h2>\n<p>To install from Conda (recommended)::</p>\n<pre>&gt;&gt; conda install -c conda-forge aiida-gulp aiida-core.services\n</pre>\n<p>To install from pypi::</p>\n<pre>&gt;&gt; pip install aiida-gulp\n</pre>\n<p>To install the development version:</p>\n<pre>&gt;&gt; git clone https://github.com/chrisjsewell/aiida-gulp .\n&gt;&gt; <span class=\"nb\">cd</span> aiida-gulp\n&gt;&gt; pip install -e .  <span class=\"c1\"># also installs aiida, if missing (but not postgres)</span>\n&gt;&gt; <span class=\"c1\">#pip install -e .[pre-commit,testing] # install extras for more features</span>\n&gt;&gt; verdi quicksetup  <span class=\"c1\"># set up a new profile</span>\n&gt;&gt; verdi calculation plugins  <span class=\"c1\"># should now show the calculation plugins (with prefix gulp.)</span>\n</pre>\n<h2>Development</h2>\n<h3>Testing against mock GULP executables</h3>\n<p>Because GULP is a licensed software, it is not possible to source a copy of the executable on Travis CI.\nTherefore, a mock executable (<code>gulp_mock</code>) has been created for testing purposes (which also speeds up test runs).</p>\n<p>This executable computes the md5 hash of the supplied input file and tries to match it against a dictionary of\nprecomputed hashes. If found, the executable will write the matching output (from <code>test/output_files</code>) to stdout.</p>\n<p>The following will discover and run all unit test:</p>\n<pre>&gt;&gt; pip install -e .<span class=\"o\">[</span>testing<span class=\"o\">]</span>\n&gt;&gt; reentry scan -r aiida\n&gt;&gt; pytest -v\n</pre>\n<p>To omit tests which call external executables (like <code>gulp</code>):</p>\n<pre>&gt;&gt; pytest --gulp-skip-exec\n</pre>\n<p>To call the actual executable (e.g. <code>gulp</code> instead of <code>gulp_mock</code>):</p>\n<pre>&gt;&gt; pytest --gulp-no-mock\n</pre>\n<p>To output the results of calcjob executions to a specific directory:</p>\n<pre>&gt;&gt; pytest --gulp-workdir <span class=\"s2\">\"test_workdir\"</span>\n</pre>\n<h3>Coding Style Requirements</h3>\n<p>The code style is tested using <a href=\"http://flake8.pycqa.org\" rel=\"nofollow\">flake8</a>,\nwith the configuration set in <code>.flake8</code>, and code should be formatted with <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">black</a>.</p>\n<p>Installing with <code>aiida-gulp[code_style]</code> makes the <a href=\"https://pre-commit.com/\" rel=\"nofollow\">pre-commit</a>\npackage available, which will ensure these tests are passed by reformatting the code\nand testing for lint errors before submitting a commit.\nIt can be setup by:</p>\n<pre>&gt;&gt; <span class=\"nb\">cd</span> aiida-gulp\n&gt;&gt; pre-commit install\n</pre>\n<p>Optionally you can run <code>black</code> and <code>flake8</code> separately:</p>\n<pre>&gt;&gt; black .  <span class=\"c1\"># recursively find and format files in-place</span>\n&gt;&gt; flake8\n</pre>\n<p>Editors like VS Code also have automatic code reformat utilities, which can adhere to this standard.</p>\n<h2>License</h2>\n<p>See <code>LICENSE</code> file</p>\n<h2>Contact</h2>\n<p><a href=\"mailto:chrisj_sewell@hotmail.com\">chrisj_sewell@hotmail.com</a></p>\n\n          </div>"}, "last_serial": 6054104, "releases": {"0.10.0b5": [{"comment_text": "", "digests": {"md5": "ded6964612cf8c9603f5ea2f89f3c37c", "sha256": "3ac6a69be2121bc1d1119f76e6994de13a8b9816c4a005c16e543631f75bc69f"}, "downloads": -1, "filename": "aiida_gulp-0.10.0b5-py3-none-any.whl", "has_sig": false, "md5_digest": "ded6964612cf8c9603f5ea2f89f3c37c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 287632, "upload_time": "2019-10-30T18:14:38", "upload_time_iso_8601": "2019-10-30T18:14:38.650277Z", "url": "https://files.pythonhosted.org/packages/86/d6/966adcf749fc6e72f645691edcb6be4a98c9a602a88efd39b028ae05f3ee/aiida_gulp-0.10.0b5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35f7964110ade051c67478a2779a9f0c", "sha256": "b650542e4765fe3a0ce38eb1d3f16046cc8dc7fb6e48b787bfa34e32c088abd6"}, "downloads": -1, "filename": "aiida-gulp-0.10.0b5.tar.gz", "has_sig": false, "md5_digest": "35f7964110ade051c67478a2779a9f0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217641, "upload_time": "2019-10-30T18:14:41", "upload_time_iso_8601": "2019-10-30T18:14:41.278372Z", "url": "https://files.pythonhosted.org/packages/b3/4d/de00db715d43ead7ebc6097b4d2a81bcc6e5b03d14ee90a51a75487480c1/aiida-gulp-0.10.0b5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ded6964612cf8c9603f5ea2f89f3c37c", "sha256": "3ac6a69be2121bc1d1119f76e6994de13a8b9816c4a005c16e543631f75bc69f"}, "downloads": -1, "filename": "aiida_gulp-0.10.0b5-py3-none-any.whl", "has_sig": false, "md5_digest": "ded6964612cf8c9603f5ea2f89f3c37c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 287632, "upload_time": "2019-10-30T18:14:38", "upload_time_iso_8601": "2019-10-30T18:14:38.650277Z", "url": "https://files.pythonhosted.org/packages/86/d6/966adcf749fc6e72f645691edcb6be4a98c9a602a88efd39b028ae05f3ee/aiida_gulp-0.10.0b5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35f7964110ade051c67478a2779a9f0c", "sha256": "b650542e4765fe3a0ce38eb1d3f16046cc8dc7fb6e48b787bfa34e32c088abd6"}, "downloads": -1, "filename": "aiida-gulp-0.10.0b5.tar.gz", "has_sig": false, "md5_digest": "35f7964110ade051c67478a2779a9f0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217641, "upload_time": "2019-10-30T18:14:41", "upload_time_iso_8601": "2019-10-30T18:14:41.278372Z", "url": "https://files.pythonhosted.org/packages/b3/4d/de00db715d43ead7ebc6097b4d2a81bcc6e5b03d14ee90a51a75487480c1/aiida-gulp-0.10.0b5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:01 2020"}