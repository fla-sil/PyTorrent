{"info": {"author": "Juha Jeronen", "author_email": "juha.m.jeronen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Framework :: IPython", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Imacropy\n\nImacropy is interactive macropy.\n\nWe provide some agile-development addons for MacroPy, namely:\n\n- [``imacropy.iconsole``](#ipython-extension), IPython extension. **Use macros in the IPython REPL**.\n\n- [``imacropy.console.MacroConsole``](#macroconsole), a macro-enabled equivalent of ``code.InteractiveConsole``. **Embed a REPL that supports macros**.\n\n- [``macropy3``](#bootstrapper), a generic bootstrapper for macro-enabled Python programs. **Use macros in your main program**.\n\n*Changed in v0.2.0.* Due to the addition of `MacroConsole`, which is more deserving of the module name `imacropy.console`, the IPython extension has been renamed to `imacropy.iconsole` (note the second `i`). Please update your IPython profile. This is a permanent rename, `iconsole` will not be renamed again.\n\n\n## IPython extension\n\nThe extension allows to **use macros in the IPython REPL**. (*Defining* macros in the REPL is currently not supported.)\n\nFor example:\n\n```ipython\nIn [1]: from simplelet import macros, let\n\nIn [2]: let((x, 21))[2*x]\nOut[2]: 42\n```\n\nA from-import of macros from a given module clears from the REPL session **all** current macros loaded from that module, and loads the latest definitions **of only the specified** macros from disk. This allows interactive testing when editing macros.\n\nThe most recent definition of any given macro remains alive until the next macro from-import from the same module, or until the IPython session is terminated.\n\nMacro docstrings and source code can be viewed using ``?`` and ``??``, as usual.\n\n*Added in v0.3.1.* The line magic `%macros` now prints a human-readable list of macros that are currently imported into the REPL session (or says that no macros are imported, if so).\n\n### Loading the extension\n\nTo load the extension once, ``%load_ext imacropy.iconsole``.\n\nTo autoload it when IPython starts, add the string ``\"imacropy.iconsole\"`` to the list ``c.InteractiveShellApp.extensions`` in your ``ipython_config.py``. To find the config file, ``ipython profile locate``.\n\nWhen the extension loads, it imports ``macropy`` into the REPL session. You can use this to debug whether it is loaded, if necessary.\n\nCurrently **no startup banner is printed**, because extension loading occurs after IPython has already printed its own banner. We cannot manually print a banner, because some tools (notably ``importmagic.el`` for Emacs, included in [Spacemacs](http://spacemacs.org/)) treat the situation as a fatal error in Python interpreter startup if anything is printed (and ``ipython3 --no-banner`` is rather convenient to have as the python-shell, to run IPython in Emacs's inferior-shell mode).\n\n\n## MacroConsole\n\nThis is a derivative of, and drop-in replacement for, ``code.InteractiveConsole``, which allows you to **embed a REPL that supports macros**. The difference to `macropy.core.console.MacroConsole` is that this one offers the same semantics as the IPython extension. We also offer the ``?`` and ``??`` syntax to view docstrings and source code.\n\n```python\nfrom imacropy.console import MacroConsole\nm = MacroConsole()\nm.interact()\n```\n\nNow we're inside a macro-enabled REPL:\n\n```python\nfrom unpythonic.syntax import macros, let\nx = let[((a, 21)) in 2 * a]\nassert x == 42\n```\n\nJust like in `code.InteractiveConsole`, exiting the REPL (Ctrl+D) returns from the `interact()` call.\n\nMacro docstrings and source code can be viewed like in IPython:\n\n```python\nlet?\nlet??\n```\n\nIf the information is available, these operations also print the filename and the starting line number of the definition of the queried object in that file.\n\nThe ``obj?`` syntax is shorthand for ``imacropy.doc(obj)``, and ``obj??`` is shorthand for ``imacropy.sourcecode(obj)``.\n\nNote that just like in IPython, for some reason `help(some_macro)` sees only the generic docstring of `WrappedMacro`, not that of the actual macro stub object. So use the ``?`` syntax to view macro docstrings, as you would in IPython.\n\n*Added in v0.3.1.* The literal command `macros?` now prints a human-readable list of macros that are currently imported into the REPL session (or says that no macros are imported, if so). This shadows the `obj?` docstring lookup syntax for the MacroPy special object `macros`, but that's likely not needed. That can still be invoked manually, using `imacropy.doc(macros)`.\n\n\n## Bootstrapper\n\nThe bootstrapper imports the specified file or module, pretending its ``__name__`` is ``\"__main__\"``. **This allows your main program to use macros**.\n\nFor example, ``some_program.py``:\n\n```python\nfrom simplelet import macros, let\n\ndef main():\n    x = let((y, 21))[2*y]\n    assert x == 42\n    print(\"All OK\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nStart it as:\n\n```bash\nmacropy3 some_program.py\n```\n\nA relative path is ok, as long as it is under the current directory. Relative paths including ``..`` are **not** supported. We also support the ``-m module_name`` variant:\n\n```bash\nmacropy3 -m some_program\n```\n\nA dotted module path under the current directory is ok.\n\nIf you need to set other Python command-line options:\n\n```bash\npython3 <your options here> $(which macropy3) -m some_program\n```\n\nThis way the rest of the options go to the Python interpreter itself, and the ``-m some_program`` to the ``macropy3`` bootstrapper.\n\n\n## Installation\n\n### From PyPI\n\nInstall as user:\n\n```bash\npip install imacropy --user\n```\n\nInstall as admin:\n\n```bash\nsudo pip install imacropy\n```\n\n### From GitHub\n\nAs user:\n\n```bash\ngit clone https://github.com/Technologicat/imacropy.git\ncd imacropy\npython setup.py install --user\n```\n\nAs admin, change the last command to\n\n```bash\nsudo python setup.py install\n```\n\n\n## Dependencies\n\n[MacroPy3](https://github.com/azazel75/macropy).\n\n\n## License\n\n[BSD](LICENSE.md). Copyright 2019-2020 Juha Jeronen and University of Jyv\u00e4skyl\u00e4.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Technologicat/imacropy", "keywords": "metaprogramming,syntactic-macros,macropy,console,repl", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "imacropy", "package_url": "https://pypi.org/project/imacropy/", "platform": "Linux", "project_url": "https://pypi.org/project/imacropy/", "project_urls": {"Homepage": "https://github.com/Technologicat/imacropy"}, "release_url": "https://pypi.org/project/imacropy/0.3.1/", "requires_dist": ["macropy3"], "requires_python": "", "summary": "Interactive MacroPy - IPython REPL, embeddable REPL, bootstrapper.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Imacropy</h1>\n<p>Imacropy is interactive macropy.</p>\n<p>We provide some agile-development addons for MacroPy, namely:</p>\n<ul>\n<li>\n<p><a href=\"#ipython-extension\" rel=\"nofollow\"><code>imacropy.iconsole</code></a>, IPython extension. <strong>Use macros in the IPython REPL</strong>.</p>\n</li>\n<li>\n<p><a href=\"#macroconsole\" rel=\"nofollow\"><code>imacropy.console.MacroConsole</code></a>, a macro-enabled equivalent of <code>code.InteractiveConsole</code>. <strong>Embed a REPL that supports macros</strong>.</p>\n</li>\n<li>\n<p><a href=\"#bootstrapper\" rel=\"nofollow\"><code>macropy3</code></a>, a generic bootstrapper for macro-enabled Python programs. <strong>Use macros in your main program</strong>.</p>\n</li>\n</ul>\n<p><em>Changed in v0.2.0.</em> Due to the addition of <code>MacroConsole</code>, which is more deserving of the module name <code>imacropy.console</code>, the IPython extension has been renamed to <code>imacropy.iconsole</code> (note the second <code>i</code>). Please update your IPython profile. This is a permanent rename, <code>iconsole</code> will not be renamed again.</p>\n<h2>IPython extension</h2>\n<p>The extension allows to <strong>use macros in the IPython REPL</strong>. (<em>Defining</em> macros in the REPL is currently not supported.)</p>\n<p>For example:</p>\n<pre>In [1]: from simplelet import macros, let\n\nIn [2]: let((x, 21))[2*x]\nOut[2]: 42\n</pre>\n<p>A from-import of macros from a given module clears from the REPL session <strong>all</strong> current macros loaded from that module, and loads the latest definitions <strong>of only the specified</strong> macros from disk. This allows interactive testing when editing macros.</p>\n<p>The most recent definition of any given macro remains alive until the next macro from-import from the same module, or until the IPython session is terminated.</p>\n<p>Macro docstrings and source code can be viewed using <code>?</code> and <code>??</code>, as usual.</p>\n<p><em>Added in v0.3.1.</em> The line magic <code>%macros</code> now prints a human-readable list of macros that are currently imported into the REPL session (or says that no macros are imported, if so).</p>\n<h3>Loading the extension</h3>\n<p>To load the extension once, <code>%load_ext imacropy.iconsole</code>.</p>\n<p>To autoload it when IPython starts, add the string <code>\"imacropy.iconsole\"</code> to the list <code>c.InteractiveShellApp.extensions</code> in your <code>ipython_config.py</code>. To find the config file, <code>ipython profile locate</code>.</p>\n<p>When the extension loads, it imports <code>macropy</code> into the REPL session. You can use this to debug whether it is loaded, if necessary.</p>\n<p>Currently <strong>no startup banner is printed</strong>, because extension loading occurs after IPython has already printed its own banner. We cannot manually print a banner, because some tools (notably <code>importmagic.el</code> for Emacs, included in <a href=\"http://spacemacs.org/\" rel=\"nofollow\">Spacemacs</a>) treat the situation as a fatal error in Python interpreter startup if anything is printed (and <code>ipython3 --no-banner</code> is rather convenient to have as the python-shell, to run IPython in Emacs's inferior-shell mode).</p>\n<h2>MacroConsole</h2>\n<p>This is a derivative of, and drop-in replacement for, <code>code.InteractiveConsole</code>, which allows you to <strong>embed a REPL that supports macros</strong>. The difference to <code>macropy.core.console.MacroConsole</code> is that this one offers the same semantics as the IPython extension. We also offer the <code>?</code> and <code>??</code> syntax to view docstrings and source code.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">imacropy.console</span> <span class=\"kn\">import</span> <span class=\"n\">MacroConsole</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">MacroConsole</span><span class=\"p\">()</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">interact</span><span class=\"p\">()</span>\n</pre>\n<p>Now we're inside a macro-enabled REPL:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unpythonic.syntax</span> <span class=\"kn\">import</span> <span class=\"n\">macros</span><span class=\"p\">,</span> <span class=\"n\">let</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">let</span><span class=\"p\">[((</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">))</span> <span class=\"ow\">in</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n</pre>\n<p>Just like in <code>code.InteractiveConsole</code>, exiting the REPL (Ctrl+D) returns from the <code>interact()</code> call.</p>\n<p>Macro docstrings and source code can be viewed like in IPython:</p>\n<pre><span class=\"n\">let</span><span class=\"err\">?</span>\n<span class=\"n\">let</span><span class=\"err\">??</span>\n</pre>\n<p>If the information is available, these operations also print the filename and the starting line number of the definition of the queried object in that file.</p>\n<p>The <code>obj?</code> syntax is shorthand for <code>imacropy.doc(obj)</code>, and <code>obj??</code> is shorthand for <code>imacropy.sourcecode(obj)</code>.</p>\n<p>Note that just like in IPython, for some reason <code>help(some_macro)</code> sees only the generic docstring of <code>WrappedMacro</code>, not that of the actual macro stub object. So use the <code>?</code> syntax to view macro docstrings, as you would in IPython.</p>\n<p><em>Added in v0.3.1.</em> The literal command <code>macros?</code> now prints a human-readable list of macros that are currently imported into the REPL session (or says that no macros are imported, if so). This shadows the <code>obj?</code> docstring lookup syntax for the MacroPy special object <code>macros</code>, but that's likely not needed. That can still be invoked manually, using <code>imacropy.doc(macros)</code>.</p>\n<h2>Bootstrapper</h2>\n<p>The bootstrapper imports the specified file or module, pretending its <code>__name__</code> is <code>\"__main__\"</code>. <strong>This allows your main program to use macros</strong>.</p>\n<p>For example, <code>some_program.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simplelet</span> <span class=\"kn\">import</span> <span class=\"n\">macros</span><span class=\"p\">,</span> <span class=\"n\">let</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">let</span><span class=\"p\">((</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">))[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">]</span>\n    <span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"All OK\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Start it as:</p>\n<pre>macropy3 some_program.py\n</pre>\n<p>A relative path is ok, as long as it is under the current directory. Relative paths including <code>..</code> are <strong>not</strong> supported. We also support the <code>-m module_name</code> variant:</p>\n<pre>macropy3 -m some_program\n</pre>\n<p>A dotted module path under the current directory is ok.</p>\n<p>If you need to set other Python command-line options:</p>\n<pre>python3 &lt;your options here&gt; <span class=\"k\">$(</span>which macropy3<span class=\"k\">)</span> -m some_program\n</pre>\n<p>This way the rest of the options go to the Python interpreter itself, and the <code>-m some_program</code> to the <code>macropy3</code> bootstrapper.</p>\n<h2>Installation</h2>\n<h3>From PyPI</h3>\n<p>Install as user:</p>\n<pre>pip install imacropy --user\n</pre>\n<p>Install as admin:</p>\n<pre>sudo pip install imacropy\n</pre>\n<h3>From GitHub</h3>\n<p>As user:</p>\n<pre>git clone https://github.com/Technologicat/imacropy.git\n<span class=\"nb\">cd</span> imacropy\npython setup.py install --user\n</pre>\n<p>As admin, change the last command to</p>\n<pre>sudo python setup.py install\n</pre>\n<h2>Dependencies</h2>\n<p><a href=\"https://github.com/azazel75/macropy\" rel=\"nofollow\">MacroPy3</a>.</p>\n<h2>License</h2>\n<p><a href=\"LICENSE.md\" rel=\"nofollow\">BSD</a>. Copyright 2019-2020 Juha Jeronen and University of Jyv\u00e4skyl\u00e4.</p>\n\n          </div>"}, "last_serial": 6677812, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f8c068419e74bf3e6ffed3453d8b7fd7", "sha256": "bfd6fafb8a2ec2294616c394264d3fd982016cd2e9104fe9a7e59e5c9fd0113b"}, "downloads": -1, "filename": "imacropy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f8c068419e74bf3e6ffed3453d8b7fd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13669, "upload_time": "2019-05-16T10:16:27", "upload_time_iso_8601": "2019-05-16T10:16:27.363847Z", "url": "https://files.pythonhosted.org/packages/64/95/1f8894eed4a891dc563234904991a65ca30fb69bb4018d70c73d79bb8c55/imacropy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c50899a4c1f59273e92b8f04edeb0ebd", "sha256": "9645c5a99bdf6aa9a1d2f75363ca934ee881d52751cb5614a30f03f4b2c743cd"}, "downloads": -1, "filename": "imacropy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c50899a4c1f59273e92b8f04edeb0ebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11562, "upload_time": "2019-05-16T10:16:29", "upload_time_iso_8601": "2019-05-16T10:16:29.910504Z", "url": "https://files.pythonhosted.org/packages/e4/a4/83acc60e3bdc44c8f06998b1ebe38b958b79da4f7f7b97c284512fd71af5/imacropy-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7dd05820c5d96844cfc682bdda830922", "sha256": "576be9a54bc494c5066dfe82f1941f92f5c6998647c1001598977bd6016d6173"}, "downloads": -1, "filename": "imacropy-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7dd05820c5d96844cfc682bdda830922", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18110, "upload_time": "2020-02-11T00:06:43", "upload_time_iso_8601": "2020-02-11T00:06:43.295924Z", "url": "https://files.pythonhosted.org/packages/8b/28/7c4e6ee7e1bf043a4ce73699c784d7d5f1b788d973d8da634119ec702fde/imacropy-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e57cf4ea470e695a2152f3e219fac77", "sha256": "aa9bffea4e4672fd853179f20160807952c5d89773ca5c660cfdd26e88770b11"}, "downloads": -1, "filename": "imacropy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3e57cf4ea470e695a2152f3e219fac77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14636, "upload_time": "2020-02-11T00:06:45", "upload_time_iso_8601": "2020-02-11T00:06:45.193854Z", "url": "https://files.pythonhosted.org/packages/75/33/3b61a319bd36b3b22824c9fa5aa7c7feb34fb455b798fabd4f7053606c99/imacropy-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c76d685f99cefa186939a02309738041", "sha256": "61568f9057e873ce867ed1b2fa3d504f1532c682bdb9ec405854c14ec1a40d45"}, "downloads": -1, "filename": "imacropy-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c76d685f99cefa186939a02309738041", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18941, "upload_time": "2020-02-16T22:12:47", "upload_time_iso_8601": "2020-02-16T22:12:47.501043Z", "url": "https://files.pythonhosted.org/packages/96/4d/8600fb280f296ab564f4532124d59b88e5ffcc58aa4a6d7cd6df7856ee6e/imacropy-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d2156578299a14c60165cdf08b0f4af", "sha256": "cd29f677a4871d4992991a09a309764e67ccc06ec859ce33f60338f029c2446e"}, "downloads": -1, "filename": "imacropy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2d2156578299a14c60165cdf08b0f4af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15422, "upload_time": "2020-02-16T22:12:49", "upload_time_iso_8601": "2020-02-16T22:12:49.577299Z", "url": "https://files.pythonhosted.org/packages/cb/a4/e9d8890159a5b3d57a7cce8055de37041a37a1924cad87964fc2f2a4e81d/imacropy-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "9eba9cf8394668f7f0ed373098d18d23", "sha256": "2e89802f0636b2212537a9a767941b22a02338839f0679734e747ddf5fb3424b"}, "downloads": -1, "filename": "imacropy-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9eba9cf8394668f7f0ed373098d18d23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19005, "upload_time": "2020-02-16T22:31:11", "upload_time_iso_8601": "2020-02-16T22:31:11.903938Z", "url": "https://files.pythonhosted.org/packages/e8/c3/e6c7f414061eabaef5bf72beeead303a5690a5cb58ef4802ea3eda601e42/imacropy-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f7a2d569fb58c1698779d054cb4245f", "sha256": "87cb6dae41e3dae78a878c7743c3b058e98582cc839edaa3b46728da735e275b"}, "downloads": -1, "filename": "imacropy-0.2.2.tar.gz", "has_sig": false, "md5_digest": "2f7a2d569fb58c1698779d054cb4245f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15498, "upload_time": "2020-02-16T22:31:13", "upload_time_iso_8601": "2020-02-16T22:31:13.969446Z", "url": "https://files.pythonhosted.org/packages/83/0c/4ec6fd605265adc39279fc6c0c27c4de940843b0c56d1f9654242203d79c/imacropy-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "205a0210c765daf7fd730d658a7a37b3", "sha256": "67edc3a02d92b23ab54f0fd86e2f44f3a88fce10c0012718fabd215726c6198a"}, "downloads": -1, "filename": "imacropy-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "205a0210c765daf7fd730d658a7a37b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15207, "upload_time": "2020-02-17T23:50:36", "upload_time_iso_8601": "2020-02-17T23:50:36.021302Z", "url": "https://files.pythonhosted.org/packages/1f/a1/34369a9ff97ed7e2395d9e45c61fe40f0b9cbfcbb56a0934765d05b5ceaa/imacropy-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59b2297345ec1fb06f0340f3557b7b0a", "sha256": "954c47a4712418f2b65c923a153badd1bd329beabbbe66e4df0189090a9f2995"}, "downloads": -1, "filename": "imacropy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "59b2297345ec1fb06f0340f3557b7b0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13840, "upload_time": "2020-02-17T23:50:38", "upload_time_iso_8601": "2020-02-17T23:50:38.269681Z", "url": "https://files.pythonhosted.org/packages/48/ce/602f18b5ed24c848acce9a71411df925ae85b69d83767deb552b01596eb5/imacropy-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "88f704a96ddc8dc6badf9c21a7c2a0d7", "sha256": "a0caacf7e89042cac8dc93ce7adcc70292f49b5bcc8bba38133738cc045eac43"}, "downloads": -1, "filename": "imacropy-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "88f704a96ddc8dc6badf9c21a7c2a0d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15988, "upload_time": "2020-02-21T21:39:11", "upload_time_iso_8601": "2020-02-21T21:39:11.012399Z", "url": "https://files.pythonhosted.org/packages/0b/4d/1434cb8307f83aced1e5bea07982c8bbfbd2d0f68ce174cffacade0cca3f/imacropy-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca6348fa1ad69650d9419085e234c156", "sha256": "09bafc1c6a29e7c2ddf4c88362fa9e7e79fdbdb59f8277d31ec8be0d4b89060e"}, "downloads": -1, "filename": "imacropy-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ca6348fa1ad69650d9419085e234c156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14517, "upload_time": "2020-02-21T21:39:12", "upload_time_iso_8601": "2020-02-21T21:39:12.543992Z", "url": "https://files.pythonhosted.org/packages/26/0b/1b77f48b46e77c4fe6b828eec8e520b3409549afef50ef45c61308b86756/imacropy-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "88f704a96ddc8dc6badf9c21a7c2a0d7", "sha256": "a0caacf7e89042cac8dc93ce7adcc70292f49b5bcc8bba38133738cc045eac43"}, "downloads": -1, "filename": "imacropy-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "88f704a96ddc8dc6badf9c21a7c2a0d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15988, "upload_time": "2020-02-21T21:39:11", "upload_time_iso_8601": "2020-02-21T21:39:11.012399Z", "url": "https://files.pythonhosted.org/packages/0b/4d/1434cb8307f83aced1e5bea07982c8bbfbd2d0f68ce174cffacade0cca3f/imacropy-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca6348fa1ad69650d9419085e234c156", "sha256": "09bafc1c6a29e7c2ddf4c88362fa9e7e79fdbdb59f8277d31ec8be0d4b89060e"}, "downloads": -1, "filename": "imacropy-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ca6348fa1ad69650d9419085e234c156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14517, "upload_time": "2020-02-21T21:39:12", "upload_time_iso_8601": "2020-02-21T21:39:12.543992Z", "url": "https://files.pythonhosted.org/packages/26/0b/1b77f48b46e77c4fe6b828eec8e520b3409549afef50ef45c61308b86756/imacropy-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:56 2020"}