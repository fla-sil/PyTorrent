{"info": {"author": "Chris Shenton", "author_email": "chris@koansys.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "========\n README\n========\n\nAllow Django to authenticate against a RADIUS server. \n\nIntroduction\n============\n\nRADIUS is a protocol commonly used by ISPs for authenticating dial-in\nand other remote users; it's also used by routers and other network\nhardware.  Popular servers include FreeRADIUS, GNU RADIUS, and the\ndelightfully-name Steel Belted RADIUS.  \n\nMotivation\n==========\n\nThis little package was developed because my place of work uses RSA\nSecurID token authentication, and it can be accessed via RADIUS --\nmuch more easily than their proprietary protocol.\n\nAll the heavy lifting here is doing by Wichert Akkerman's \"pyrad\"\npackage; this just wraps it up for easy consumption by Django.\n\nThe code was based on the example at\nhttp://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources\n\nThis code tries hard to catch any error which might throw an exception\nso that failure of the backend (misconfigured RADIUS server, bad\nimport, etc) returns None indicating auth faiure.\n\nOn successful authentication, the User object is returned. If this\nuser is new to Django, a new User is created in the Django database.\n\n\nNon-Features\n============\n\nTraditionally, upon authentication, the RADIUS server can return\nvarious attribute/value pairs such as allocated IP address and\nsubnetmask, in addition to the Success code.  ADIUS can also handle\n\"accounting\" the focus here simply on authentication.\n\nUsage\n=====\n\nConfiguration\n-------------\n\nIn your settings.py or local_settings.py, define the following\nvariables:\n\nRADIUS_SERVER\n\n  The IP address (or resolvable DNS name) of the server providing the\n  RADIUS server.  Example: \"127.0.0.1\"\n\nRADIUS_AUTHPORT\n\n  UDP port that RADIUS is listening on for authentication requests.\n  The old RFC standard port is 1645, but the more current one\n  is 1812. Specify it as an integer. Example: 1812\n\nRADIUS_SECRET\n\n  The shared secret that both the client and server use to encode the\n  packets.  Example: \"The owls are not what they seem.\"\n\n\nAuth backends\n-------------\n\nSpecify this egg in your zc.buildout configuration, or another build\nmechanism; you can also just use the bare code.\n\nIn your settings.py (or local_settings.py) file specify the module and\nclass path in the authentication stack.  Beware that RADIUS typically\nexhibits a 20-second or so timeout if it can't auth to the server, so\nyou may want to put it after other authentication backends you may be\nusing.  Example::\n\n  AUTHENTICATION_BACKENDS = (\n      'django.contrib.auth.backends.ModelBackend',\n      'authbackends.authsawsbackend.AuthSawsBackend',\n      'koansys.django.authradius.AuthRadius',\n    )\n\n\n\n\n\nTo Do\n=====\n\nTests. Sorry.\n\n\n=========\n CHANGES\n=========\n\n1.0.3 2009-02-25\n================\n\nCorrect usage example, oops.\n\n1.0.2 2009-02-25\n================\n\nRe-Fix URL info, add address.\n \n1.0.1 2009-02-25\n================\n\nFix URL info, upload to googlecode, post to pypi.\n\n1.0.0 2009-02-25\n================\n\nCreating public egg code from internal private cholesterol-free code.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://koansys-django-authradius.googlecode.com/", "keywords": "authentication", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "koansys.django.authradius", "package_url": "https://pypi.org/project/koansys.django.authradius/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/koansys.django.authradius/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://koansys-django-authradius.googlecode.com/"}, "release_url": "https://pypi.org/project/koansys.django.authradius/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Django can authenticate against a RADIUS server", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"readme\">\n<h2>README</h2>\n<p>Allow Django to authenticate against a RADIUS server.</p>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>RADIUS is a protocol commonly used by ISPs for authenticating dial-in\nand other remote users; it\u2019s also used by routers and other network\nhardware.  Popular servers include FreeRADIUS, GNU RADIUS, and the\ndelightfully-name Steel Belted RADIUS.</p>\n</div>\n<div id=\"motivation\">\n<h3>Motivation</h3>\n<p>This little package was developed because my place of work uses RSA\nSecurID token authentication, and it can be accessed via RADIUS \u2013\nmuch more easily than their proprietary protocol.</p>\n<p>All the heavy lifting here is doing by Wichert Akkerman\u2019s \u201cpyrad\u201d\npackage; this just wraps it up for easy consumption by Django.</p>\n<p>The code was based on the example at\n<a href=\"http://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources\" rel=\"nofollow\">http://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources</a></p>\n<p>This code tries hard to catch any error which might throw an exception\nso that failure of the backend (misconfigured RADIUS server, bad\nimport, etc) returns None indicating auth faiure.</p>\n<p>On successful authentication, the User object is returned. If this\nuser is new to Django, a new User is created in the Django database.</p>\n</div>\n<div id=\"non-features\">\n<h3>Non-Features</h3>\n<p>Traditionally, upon authentication, the RADIUS server can return\nvarious attribute/value pairs such as allocated IP address and\nsubnetmask, in addition to the Success code.  ADIUS can also handle\n\u201caccounting\u201d the focus here simply on authentication.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"configuration\">\n<h4>Configuration</h4>\n<p>In your settings.py or local_settings.py, define the following\nvariables:</p>\n<p>RADIUS_SERVER</p>\n<blockquote>\nThe IP address (or resolvable DNS name) of the server providing the\nRADIUS server.  Example: \u201c127.0.0.1\u201d</blockquote>\n<p>RADIUS_AUTHPORT</p>\n<blockquote>\nUDP port that RADIUS is listening on for authentication requests.\nThe old RFC standard port is 1645, but the more current one\nis 1812. Specify it as an integer. Example: 1812</blockquote>\n<p>RADIUS_SECRET</p>\n<blockquote>\nThe shared secret that both the client and server use to encode the\npackets.  Example: \u201cThe owls are not what they seem.\u201d</blockquote>\n</div>\n<div id=\"auth-backends\">\n<h4>Auth backends</h4>\n<p>Specify this egg in your zc.buildout configuration, or another build\nmechanism; you can also just use the bare code.</p>\n<p>In your settings.py (or local_settings.py) file specify the module and\nclass path in the authentication stack.  Beware that RADIUS typically\nexhibits a 20-second or so timeout if it can\u2019t auth to the server, so\nyou may want to put it after other authentication backends you may be\nusing.  Example:</p>\n<pre>AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'authbackends.authsawsbackend.AuthSawsBackend',\n    'koansys.django.authradius.AuthRadius',\n  )\n</pre>\n</div>\n</div>\n<div id=\"to-do\">\n<h3>To Do</h3>\n<p>Tests. Sorry.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>1.0.3 2009-02-25</h3>\n<p>Correct usage example, oops.</p>\n</div>\n<div id=\"id2\">\n<h3>1.0.2 2009-02-25</h3>\n<p>Re-Fix URL info, add address.</p>\n</div>\n<div id=\"id3\">\n<h3>1.0.1 2009-02-25</h3>\n<p>Fix URL info, upload to googlecode, post to pypi.</p>\n</div>\n<div id=\"id4\">\n<h3>1.0.0 2009-02-25</h3>\n<p>Creating public egg code from internal private cholesterol-free code.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 793968, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "a2ba67d6cacef88a40461b2c80d4d1b4", "sha256": "2463a1d0c08d61774d125cc59393dd15997b5e974efe6a7dcc90ab8ccb592f4b"}, "downloads": -1, "filename": "koansys.django.authradius-1.0.1-py2.6.egg", "has_sig": false, "md5_digest": "a2ba67d6cacef88a40461b2c80d4d1b4", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 7365, "upload_time": "2009-02-25T21:20:50", "upload_time_iso_8601": "2009-02-25T21:20:50.458786Z", "url": "https://files.pythonhosted.org/packages/ce/d7/389e4e1f8074965e05108a99058e4e895c9a196551ed3a63785ec9fa1a9e/koansys.django.authradius-1.0.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "49feb3bb5454b8e758e37ccf72d80be8", "sha256": "d9eab162573f5623dd930698082146ce25465efc6aad2c12e078edc4ad312a1f"}, "downloads": -1, "filename": "koansys.django.authradius-1.0.1.tar.gz", "has_sig": false, "md5_digest": "49feb3bb5454b8e758e37ccf72d80be8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4601, "upload_time": "2009-02-25T21:20:49", "upload_time_iso_8601": "2009-02-25T21:20:49.824680Z", "url": "https://files.pythonhosted.org/packages/87/59/1e08926f39cc474e89bf1c10eb01d05f4d81a998aef8a57ac99d215cfff8/koansys.django.authradius-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "73dd9f15c58a856e76485903afdb8183", "sha256": "9d492b44076468d70311348d05d630ff89d598824c875668b41d4e2e5194750b"}, "downloads": -1, "filename": "koansys.django.authradius-1.0.2-py2.6.egg", "has_sig": false, "md5_digest": "73dd9f15c58a856e76485903afdb8183", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 7390, "upload_time": "2009-02-25T21:25:55", "upload_time_iso_8601": "2009-02-25T21:25:55.869353Z", "url": "https://files.pythonhosted.org/packages/6c/0f/8a001228cb7ff886bf3cec6479d6456afbad1027ee755aca84962d2b88ea/koansys.django.authradius-1.0.2-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f86d9b25d67329576f771ff95840897c", "sha256": "fe61c8596f7032d51ae1ea97742ee06d92cd39f56093bf1ef9fa6738ea8b2fff"}, "downloads": -1, "filename": "koansys.django.authradius-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f86d9b25d67329576f771ff95840897c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4636, "upload_time": "2009-02-25T21:25:55", "upload_time_iso_8601": "2009-02-25T21:25:55.262816Z", "url": "https://files.pythonhosted.org/packages/aa/c0/1dbd5adbc1aa7dac3c93e026e68c0886e3675d4cb27359248ea3b468fa6b/koansys.django.authradius-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5584ca4dd622dfc34b8ab0c7ee103781", "sha256": "7fd7fe0d12f3b9d40b29cbfc7d20856856d43035cc55b3f2440016d29f949e0f"}, "downloads": -1, "filename": "koansys.django.authradius-1.0.3-py2.6.egg", "has_sig": false, "md5_digest": "5584ca4dd622dfc34b8ab0c7ee103781", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 7406, "upload_time": "2009-02-25T21:55:57", "upload_time_iso_8601": "2009-02-25T21:55:57.022437Z", "url": "https://files.pythonhosted.org/packages/58/43/c5c084aa433baaba93f83a3ed328056f7063502ff46e8d92cdfff41efe90/koansys.django.authradius-1.0.3-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "626622cdc36087e9081084e054d561f0", "sha256": "a1ff161c10732d72bce769fc943076e73a932e732adad8f644e3a1f97d6d1d7e"}, "downloads": -1, "filename": "koansys.django.authradius-1.0.3.tar.gz", "has_sig": false, "md5_digest": "626622cdc36087e9081084e054d561f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4671, "upload_time": "2009-02-25T21:55:56", "upload_time_iso_8601": "2009-02-25T21:55:56.414030Z", "url": "https://files.pythonhosted.org/packages/5e/91/6d393e96f7544bcc8698114b4ed526491b9047a9fd851e25baaee9eee726/koansys.django.authradius-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5584ca4dd622dfc34b8ab0c7ee103781", "sha256": "7fd7fe0d12f3b9d40b29cbfc7d20856856d43035cc55b3f2440016d29f949e0f"}, "downloads": -1, "filename": "koansys.django.authradius-1.0.3-py2.6.egg", "has_sig": false, "md5_digest": "5584ca4dd622dfc34b8ab0c7ee103781", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 7406, "upload_time": "2009-02-25T21:55:57", "upload_time_iso_8601": "2009-02-25T21:55:57.022437Z", "url": "https://files.pythonhosted.org/packages/58/43/c5c084aa433baaba93f83a3ed328056f7063502ff46e8d92cdfff41efe90/koansys.django.authradius-1.0.3-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "626622cdc36087e9081084e054d561f0", "sha256": "a1ff161c10732d72bce769fc943076e73a932e732adad8f644e3a1f97d6d1d7e"}, "downloads": -1, "filename": "koansys.django.authradius-1.0.3.tar.gz", "has_sig": false, "md5_digest": "626622cdc36087e9081084e054d561f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4671, "upload_time": "2009-02-25T21:55:56", "upload_time_iso_8601": "2009-02-25T21:55:56.414030Z", "url": "https://files.pythonhosted.org/packages/5e/91/6d393e96f7544bcc8698114b4ed526491b9047a9fd851e25baaee9eee726/koansys.django.authradius-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:10 2020"}