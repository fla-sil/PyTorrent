{"info": {"author": "Jacob Scott", "author_email": "jscott12009@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only"], "description": "[![Travis](https://img.shields.io/travis/crumpstrr33/Utter-More/master.svg?label=Travis%20CI)](https://travis-ci.org/crumpstrr33/Utter-More)\n\n# Utter More\nTo customize Amazon's Alexa, you make what is called a skill. Do do something in the skill, you make an intent. To run the intent, you make an utterance. When that utterance is uttered, the intent is run. Since language is complex, there may be many different ways to say the same thing and you may want Alexa to pick up on all of those ways. Furthermore, you may have many variables for the utterances (called intent slots). Being verbose enough to cover every case can be tedious, so this takes care of that.\n\n## Installing Package\nJust do the classic:\n```\npip install utter-more\n```\nOr if you're adventurous and use Conda:\n```\nconda install -c crumpstrr33 utter-more\n```\n\n## Creating Utterances\nBelow are some examples to show its functionality.\n### Formatting\nThere are two options currently:\n1) OR statement `(a|b|c|...)` - Used if you want to allow multiple interchangeable words. For example, if `photo`, `picture` and `painting` are interchangeable in your utterances, then write `(photo|picture|painting)` in the place where it would be. The number of words to OR is arbitrary and single curly keywords like `{intent_slot}` can be used in this.\n3) Conditional OR statement `(a*tag1|b) (c^tag1|d)` - Used if you want the appearance of a phrase in an OR statement to be dependent on another phrase. Here, `a` is the master and `c` is the follower; utterances with `c` will only appear if it also contains `a`. Another functionality of this is as follows. If you have `(It*s|They*p) (is^s|are^p) (close^s|far^p)`, `is` and `close` will only show if `It` also shows and, conversely, `are` and `far` will only show if `They` shows. This is how you can do a conditional AND with this function.\n2) Optional Intent Slot `{{slot}}` - Used if the existence of an intent slot in your utterance is optional. For example, if you have an optional adverb you may write `I {adverb} love it` or just `I love it`. Instead you can write `I {{adverb}} love it` to capture both.\n\n### Running the Code\nNow with the formatting down, lets create some templates for the utterances. Something like:\n```\n\"What is that {{descriptor}} (photo|picture) (of|from)\"\n```\nand\n```\n\"Download the (photo|picture) {{to_file_path}}\"\n```\nTo do this, we run the following:\n``` python\nfrom pprint import pprint\nfrom utter_more import UtterMore\n\num = UtterMore(\"What (is*s|are*p) (that^s|those^p) {{descriptor}} (photo|picture)(^s|s^p) (of|from)\",\n               \"Download the (photo|picture) {{to_file_path}}\")\num.iter_build_utterances()\n\npprint(um.utterances)\n```\nAnd this will display:\n``` python\n[['What is that {descriptor} photo of',\n  'What is that {descriptor} photo from',\n  'What is that {descriptor} picture of',\n  'What is that {descriptor} picture from',\n  'What is that photo of',\n  'What is that photo from',\n  'What is that picture of',\n  'What is that picture from',\n  'What are those {descriptor} photos of',\n  'What are those {descriptor} photos from',\n  'What are those {descriptor} pictures of',\n  'What are those {descriptor} pictures from',\n  'What are those photos of',\n  'What are those photos from',\n  'What are those pictures of',\n  'What are those pictures from'],\n ['Download the photo {to_file_path}',\n  'Download the photo',\n  'Download the picture {to_file_path}',\n  'Download the picture']]\n```\nHere we can easily follow the grammatical rules of plurality. If we want to save the utterances so that we can upload them to our Alexa skill, we simply do:\n``` python\num.save_for_alexa(PATH_TO_DIRECTORY, FILE_NAME)\n```\nHere we will find the CSV file properly formatted for uploading.\n\n## Uploading the Utterances\n1) After going to the tab for the intended intent, click on \"Bulk Edit\" in the top right corner of the page.\n\n<p align=\"center\">\n  <kbd>\n    <img width=650px align=center src=\"https://raw.githubusercontent.com/crumpstrr33/Utter-More/master/pics/intent_ui.png\" />\n  </kbd>\n</p>\n\n2) Browse for or drag and drop the previously made CSV and it will populate the text field.\n\n<p align=\"center\">\n  <kbd>\n    <img width=400px src=\"https://raw.githubusercontent.com/crumpstrr33/Utter-More/master/pics/bulk_edit.png\" />\n  </kbd>\n  <kbd>\n    <img width=400px src=\"https://raw.githubusercontent.com/crumpstrr33/Utter-More/master/pics/bulk_edit_filled.png\" />\n  </kbd>\n</p>\n\n3) Press \"Submit\" and the utterances field will be filled.\n\n<p align=\"center\">\n  <kbd>\n    <img width=650px src=\"https://raw.githubusercontent.com/crumpstrr33/Utter-More/master/pics/utterances.png\" />\n  </kbd>\n</p>\n\nAnd that's it, no need to manually type in potentially hundreds or thousands of annoyingly similar phrases.\n\n## Other Features\n* You can add utterance templates after making the class like so:\n``` python\nfrom utter_more import UtterMore\n\num = UtterMore()\num.add_utterance_template(\"What (is*s|are*p) (that^s|those^p) {{descriptor}} (photo|picture)(^s|s^p) (of|from)\")\num.add_utterance_template(\"Download the (photo|picture) {{to_file_path}}\")\num.iter_build_utterances()\num.save_for_alexa(PATH_TO_DIRECTORY, FILE_NAME)\n```\nThis will produce the same CSV as above\n* Continuing with the above code, you can then save these utterances normally as either a regular CSV or a text file like so:\n``` python\n# Saves as utterances.txt with new line separators\num.save_utterances(PATH_TO_DIRECTORY, 'utterances', 'txt')\n# Saves as utterances.csv as actual comma-separated values\num.save_utterances(PATH_TO_DIRECTORY, 'utterances', 'csv')\n```\n* Utterances can be created from a template without adding it to the UtterMore object so\n``` python\nfrom pprint import pprint\nfrom utter_more import UtterMore\n\num = UtterMore()\nutterances = um.build_utterance(\"What (is*s|are*p) (that^s|those^p) {{descriptor}} (photo|picture)(^s|s^p) (of|from)\")\npprint(utterances)\n```\nwill output:\n``` python\n[['What is that {descriptor} photo of',\n  'What is that {descriptor} photo from',\n  'What is that {descriptor} picture of',\n  'What is that {descriptor} picture from',\n  'What is that photo of',\n  'What is that photo from',\n  'What is that picture of',\n  'What is that picture from',\n  'What are those {descriptor} photos of',\n  'What are those {descriptor} photos from',\n  'What are those {descriptor} pictures of',\n  'What are those {descriptor} pictures from',\n  'What are those photos of',\n  'What are those photos from',\n  'What are those pictures of',\n  'What are those pictures from']]\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/crumpstrr33/Utter-More", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "utter-more", "package_url": "https://pypi.org/project/utter-more/", "platform": "", "project_url": "https://pypi.org/project/utter-more/", "project_urls": {"Homepage": "https://github.com/crumpstrr33/Utter-More"}, "release_url": "https://pypi.org/project/utter-more/1.0.1/", "requires_dist": null, "requires_python": ">=3", "summary": "Creates utterances for Amazon's Alexa.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/crumpstrr33/Utter-More\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08b499d608989cf88071d089de21338374bc81c6/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6372756d707374727233332f55747465722d4d6f72652f6d61737465722e7376673f6c6162656c3d5472617669732532304349\"></a></p>\n<h1>Utter More</h1>\n<p>To customize Amazon's Alexa, you make what is called a skill. Do do something in the skill, you make an intent. To run the intent, you make an utterance. When that utterance is uttered, the intent is run. Since language is complex, there may be many different ways to say the same thing and you may want Alexa to pick up on all of those ways. Furthermore, you may have many variables for the utterances (called intent slots). Being verbose enough to cover every case can be tedious, so this takes care of that.</p>\n<h2>Installing Package</h2>\n<p>Just do the classic:</p>\n<pre><code>pip install utter-more\n</code></pre>\n<p>Or if you're adventurous and use Conda:</p>\n<pre><code>conda install -c crumpstrr33 utter-more\n</code></pre>\n<h2>Creating Utterances</h2>\n<p>Below are some examples to show its functionality.</p>\n<h3>Formatting</h3>\n<p>There are two options currently:</p>\n<ol>\n<li>OR statement <code>(a|b|c|...)</code> - Used if you want to allow multiple interchangeable words. For example, if <code>photo</code>, <code>picture</code> and <code>painting</code> are interchangeable in your utterances, then write <code>(photo|picture|painting)</code> in the place where it would be. The number of words to OR is arbitrary and single curly keywords like <code>{intent_slot}</code> can be used in this.</li>\n<li>Conditional OR statement <code>(a*tag1|b) (c^tag1|d)</code> - Used if you want the appearance of a phrase in an OR statement to be dependent on another phrase. Here, <code>a</code> is the master and <code>c</code> is the follower; utterances with <code>c</code> will only appear if it also contains <code>a</code>. Another functionality of this is as follows. If you have <code>(It*s|They*p) (is^s|are^p) (close^s|far^p)</code>, <code>is</code> and <code>close</code> will only show if <code>It</code> also shows and, conversely, <code>are</code> and <code>far</code> will only show if <code>They</code> shows. This is how you can do a conditional AND with this function.</li>\n<li>Optional Intent Slot <code>{{slot}}</code> - Used if the existence of an intent slot in your utterance is optional. For example, if you have an optional adverb you may write <code>I {adverb} love it</code> or just <code>I love it</code>. Instead you can write <code>I {{adverb}} love it</code> to capture both.</li>\n</ol>\n<h3>Running the Code</h3>\n<p>Now with the formatting down, lets create some templates for the utterances. Something like:</p>\n<pre><code>\"What is that {{descriptor}} (photo|picture) (of|from)\"\n</code></pre>\n<p>and</p>\n<pre><code>\"Download the (photo|picture) {{to_file_path}}\"\n</code></pre>\n<p>To do this, we run the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utter_more</span> <span class=\"kn\">import</span> <span class=\"n\">UtterMore</span>\n\n<span class=\"n\">um</span> <span class=\"o\">=</span> <span class=\"n\">UtterMore</span><span class=\"p\">(</span><span class=\"s2\">\"What (is*s|are*p) (that^s|those^p) {{descriptor}} (photo|picture)(^s|s^p) (of|from)\"</span><span class=\"p\">,</span>\n               <span class=\"s2\">\"Download the (photo|picture) {{to_file_path}}\"</span><span class=\"p\">)</span>\n<span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">iter_build_utterances</span><span class=\"p\">()</span>\n\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">utterances</span><span class=\"p\">)</span>\n</pre>\n<p>And this will display:</p>\n<pre><span class=\"p\">[[</span><span class=\"s1\">'What is that </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> photo of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> photo from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> picture of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> picture from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that photo of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that photo from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that picture of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that picture from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> photos of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> photos from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> pictures of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> pictures from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those photos of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those photos from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those pictures of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those pictures from'</span><span class=\"p\">],</span>\n <span class=\"p\">[</span><span class=\"s1\">'Download the photo </span><span class=\"si\">{to_file_path}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Download the photo'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Download the picture </span><span class=\"si\">{to_file_path}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Download the picture'</span><span class=\"p\">]]</span>\n</pre>\n<p>Here we can easily follow the grammatical rules of plurality. If we want to save the utterances so that we can upload them to our Alexa skill, we simply do:</p>\n<pre><span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">save_for_alexa</span><span class=\"p\">(</span><span class=\"n\">PATH_TO_DIRECTORY</span><span class=\"p\">,</span> <span class=\"n\">FILE_NAME</span><span class=\"p\">)</span>\n</pre>\n<p>Here we will find the CSV file properly formatted for uploading.</p>\n<h2>Uploading the Utterances</h2>\n<ol>\n<li>After going to the tab for the intended intent, click on \"Bulk Edit\" in the top right corner of the page.</li>\n</ol>\n<p align=\"center\">\n  <kbd>\n    <img align=\"center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3ff9269c566445b2a0ee4f64ca2c6bf5b48054e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6372756d707374727233332f55747465722d4d6f72652f6d61737465722f706963732f696e74656e745f75692e706e67\" width=\"650px\">\n  </kbd>\n</p>\n<ol>\n<li>Browse for or drag and drop the previously made CSV and it will populate the text field.</li>\n</ol>\n<p align=\"center\">\n  <kbd>\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4d2becb0ce194a456a555e7fe0bf8e71dd5e53e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6372756d707374727233332f55747465722d4d6f72652f6d61737465722f706963732f62756c6b5f656469742e706e67\" width=\"400px\">\n  </kbd>\n  <kbd>\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53002190fec9559b9ecb373cb92c3579ceb22576/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6372756d707374727233332f55747465722d4d6f72652f6d61737465722f706963732f62756c6b5f656469745f66696c6c65642e706e67\" width=\"400px\">\n  </kbd>\n</p>\n<ol>\n<li>Press \"Submit\" and the utterances field will be filled.</li>\n</ol>\n<p align=\"center\">\n  <kbd>\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/421147c1675f43dc9562ac68bfa6f8fdf039f77a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6372756d707374727233332f55747465722d4d6f72652f6d61737465722f706963732f7574746572616e6365732e706e67\" width=\"650px\">\n  </kbd>\n</p>\n<p>And that's it, no need to manually type in potentially hundreds or thousands of annoyingly similar phrases.</p>\n<h2>Other Features</h2>\n<ul>\n<li>You can add utterance templates after making the class like so:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">utter_more</span> <span class=\"kn\">import</span> <span class=\"n\">UtterMore</span>\n\n<span class=\"n\">um</span> <span class=\"o\">=</span> <span class=\"n\">UtterMore</span><span class=\"p\">()</span>\n<span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">add_utterance_template</span><span class=\"p\">(</span><span class=\"s2\">\"What (is*s|are*p) (that^s|those^p) {{descriptor}} (photo|picture)(^s|s^p) (of|from)\"</span><span class=\"p\">)</span>\n<span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">add_utterance_template</span><span class=\"p\">(</span><span class=\"s2\">\"Download the (photo|picture) {{to_file_path}}\"</span><span class=\"p\">)</span>\n<span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">iter_build_utterances</span><span class=\"p\">()</span>\n<span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">save_for_alexa</span><span class=\"p\">(</span><span class=\"n\">PATH_TO_DIRECTORY</span><span class=\"p\">,</span> <span class=\"n\">FILE_NAME</span><span class=\"p\">)</span>\n</pre>\n<p>This will produce the same CSV as above</p>\n<ul>\n<li>Continuing with the above code, you can then save these utterances normally as either a regular CSV or a text file like so:</li>\n</ul>\n<pre><span class=\"c1\"># Saves as utterances.txt with new line separators</span>\n<span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">save_utterances</span><span class=\"p\">(</span><span class=\"n\">PATH_TO_DIRECTORY</span><span class=\"p\">,</span> <span class=\"s1\">'utterances'</span><span class=\"p\">,</span> <span class=\"s1\">'txt'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Saves as utterances.csv as actual comma-separated values</span>\n<span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">save_utterances</span><span class=\"p\">(</span><span class=\"n\">PATH_TO_DIRECTORY</span><span class=\"p\">,</span> <span class=\"s1\">'utterances'</span><span class=\"p\">,</span> <span class=\"s1\">'csv'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Utterances can be created from a template without adding it to the UtterMore object so</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utter_more</span> <span class=\"kn\">import</span> <span class=\"n\">UtterMore</span>\n\n<span class=\"n\">um</span> <span class=\"o\">=</span> <span class=\"n\">UtterMore</span><span class=\"p\">()</span>\n<span class=\"n\">utterances</span> <span class=\"o\">=</span> <span class=\"n\">um</span><span class=\"o\">.</span><span class=\"n\">build_utterance</span><span class=\"p\">(</span><span class=\"s2\">\"What (is*s|are*p) (that^s|those^p) {{descriptor}} (photo|picture)(^s|s^p) (of|from)\"</span><span class=\"p\">)</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">utterances</span><span class=\"p\">)</span>\n</pre>\n<p>will output:</p>\n<pre><span class=\"p\">[[</span><span class=\"s1\">'What is that </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> photo of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> photo from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> picture of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> picture from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that photo of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that photo from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that picture of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What is that picture from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> photos of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> photos from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> pictures of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those </span><span class=\"si\">{descriptor}</span><span class=\"s1\"> pictures from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those photos of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those photos from'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those pictures of'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'What are those pictures from'</span><span class=\"p\">]]</span>\n</pre>\n\n          </div>"}, "last_serial": 4118464, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2b2e7e809b637838a4b337be43219bb5", "sha256": "9253af3a2bc3d0fe3eeba74330a649dcec4651afd2410d35c8fe3f942424b998"}, "downloads": -1, "filename": "utter_more-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2b2e7e809b637838a4b337be43219bb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7073, "upload_time": "2018-07-30T07:11:43", "upload_time_iso_8601": "2018-07-30T07:11:43.889775Z", "url": "https://files.pythonhosted.org/packages/8d/45/844c4345eccd181d778347a17a4399f1c1dd9c3b4575cd11214a5a20c845/utter_more-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d28431364816caa8004db9e66dcebed", "sha256": "052f3f247251fc1d0e669d03a837d2e99c3d3be0a119e7365473628ddb8f0e96"}, "downloads": -1, "filename": "utter-more-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9d28431364816caa8004db9e66dcebed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8276, "upload_time": "2018-07-30T07:11:44", "upload_time_iso_8601": "2018-07-30T07:11:44.798885Z", "url": "https://files.pythonhosted.org/packages/18/79/e6caf4d7dc727aa948cd720d2bd466998174da64c027eae9d243f7b8afa1/utter-more-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "100fb8cb33a2f76bddfe1286fa440251", "sha256": "7d9822adcfe40313d72af5bd57e26eb20d7b7fdb86a6d86ad75bafea8c00a0e3"}, "downloads": -1, "filename": "utter_more-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "100fb8cb33a2f76bddfe1286fa440251", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7214, "upload_time": "2018-07-31T01:30:44", "upload_time_iso_8601": "2018-07-31T01:30:44.040510Z", "url": "https://files.pythonhosted.org/packages/29/55/eb327a81034936032ebe307258d14094d4d480b151e4bb87f21f63fb31e8/utter_more-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b1534796d3e1ef1f2f1ba0fc96c8745", "sha256": "58163dfe8b69f4d910c198ac1343b22ee32acfb216bf97d17295eb4c4620866f"}, "downloads": -1, "filename": "utter-more-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5b1534796d3e1ef1f2f1ba0fc96c8745", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8536, "upload_time": "2018-07-31T01:30:45", "upload_time_iso_8601": "2018-07-31T01:30:45.199336Z", "url": "https://files.pythonhosted.org/packages/99/6a/fc7a1266ef374d8e0a9cfc0aa9dcdb8a83fb8c93aae9a2cb5c568e048221/utter-more-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "100fb8cb33a2f76bddfe1286fa440251", "sha256": "7d9822adcfe40313d72af5bd57e26eb20d7b7fdb86a6d86ad75bafea8c00a0e3"}, "downloads": -1, "filename": "utter_more-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "100fb8cb33a2f76bddfe1286fa440251", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7214, "upload_time": "2018-07-31T01:30:44", "upload_time_iso_8601": "2018-07-31T01:30:44.040510Z", "url": "https://files.pythonhosted.org/packages/29/55/eb327a81034936032ebe307258d14094d4d480b151e4bb87f21f63fb31e8/utter_more-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b1534796d3e1ef1f2f1ba0fc96c8745", "sha256": "58163dfe8b69f4d910c198ac1343b22ee32acfb216bf97d17295eb4c4620866f"}, "downloads": -1, "filename": "utter-more-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5b1534796d3e1ef1f2f1ba0fc96c8745", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8536, "upload_time": "2018-07-31T01:30:45", "upload_time_iso_8601": "2018-07-31T01:30:45.199336Z", "url": "https://files.pythonhosted.org/packages/99/6a/fc7a1266ef374d8e0a9cfc0aa9dcdb8a83fb8c93aae9a2cb5c568e048221/utter-more-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:43 2020"}