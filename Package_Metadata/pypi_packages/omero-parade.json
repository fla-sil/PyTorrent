{"info": {"author": "The Open Microscopy Team", "author_email": "ome-devel@lists.openmicroscopy.org.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: JavaScript", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Scientific/Engineering :: Visualization", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Text Processing :: Markup :: HTML"], "description": ".. image:: https://travis-ci.org/ome/omero-parade.svg?branch=master\n    :target: https://travis-ci.org/ome/omero-parade\n\n.. image:: https://badge.fury.io/py/omero-parade.svg\n    :target: https://badge.fury.io/py/omero-parade\n\nOMERO.parade\n============\n\nAn OMERO.web app for filtering Data in OMERO.web centre panel.\n\nFor full details see `SUPPORT.md <https://github.com/ome/omero-parade/blob/master/SUPPORT.md>`_.\n\nRequirements\n------------\n\n* OMERO 5.6.0 or newer\n* Python 3.6 or newer\n\nInstalling from PyPI\n--------------------\n\nThis section assumes that an OMERO.web is already installed.\n\nInstall the app using `pip <https://pip.pypa.io/en/stable/>`_:\n\n::\n\n    $ pip install -U omero-parade\n\nAdd parade custom app to your installed web apps:\n\n::\n\n    $ bin/omero config append omero.web.apps '\"omero_parade\"'\n\nDisplay parade in the centre of the webclient:\n\n::\n\n    $ bin/omero config append omero.web.ui.center_plugins \\\n        '[\"Parade\", \"omero_parade/init.js.html\", \"omero_parade\"]'\n\n\nNow restart OMERO.web as normal.\n\n\nBuild\n-----\n\nIn order to build you need:\n\n* npm version equal or greater to 3.0! npm version equal or greater than\n  5.2 is recommended!\n\n::\n\n    $ npm install\n\nTo build an uncompressed version and automatically rebuild when source\nfiles change, run:\n\n::\n\n    $ npm run watch\n\nTo build an uncompressed version, run:\n\n::\n\n    $ npm run build-dev\n\nTo build a compressed, minified version for production, run:\n\n::\n\n    $ npm run build\n\n\nCustom Filtering\n----------------\n\nUsers can customize the filtering options available by adding their own\npython modules to the setting:\n\n::\n\n    omero.web.parade.filters\n\nThe current default setting lists the ``omero_parade`` app itself and two\nother modules that are in the same directory and are therefore expected to\nbe on the PYTHONPATH when the app is installed.\n\n::\n\n    '[\"omero_parade\", \"omero_parade.annotation_filters\", \"omero_parade.table_filters\"]'\n\nEach of these modules contains an ``omero_filters.py`` which is expected to\nimplement 2 methods: ``get_filters`` and ``get_script``.\n\nThe ``get_filters`` method is used to compile the list of filters returned\nby the URL ``/omero_parade/filters/``.\n\nSome examples of ``get_filters``\n\n::\n\n    # Return a list of filter names.\n    def get_filters(request, conn):\n        return [\"Rating\", \"Comment\", \"Tag\"]\n\nThe request may include ``plate`` or ``dataset`` ID if we only want to\nsupport the filter for certain data types. In this example we could even\ncheck whether an OMERO.table exists on the plate.\n\n::\n\n    def get_filters(request, conn):\n        if request.GET.get('plate', None) is not None:\n            return [\"Table\"]\n        return []\n\nThe ``get_script`` function for a named filter should return a ``JsonResponse``\nthat includes a list of parameters for the user input to the filter\nand a JavaScript filter function.\n\nThe JavaScript function will be called for each image to filter and will\nalso be passed in a params object with the user input.\n\n::\n\n    # Return a JS function to filter images by various params.\n    def get_script(request, script_name, conn):\n\n        dataset_id = request.GET.get('dataset')\n        // OR...\n        plate_id = request.GET.get('plate')\n\n        if script_name == \"Rating\":\n            # Load rating data for images in Dataset or Wells in Plate...\n            # ...\n            # var ratings = {imageId: rating} for all images\n            var js_object_attr = 'id';  # or 'wellId' if filtering Wells\n\n            # Return a JS function that will be passed an object\n            # e.g. {id: 1} for Image or {id: 1, wellId:2} for Image in Well.\n            # and should return true or false\n            f = \"\"\"(function filter(data, params) {\n                var ratings = %s;\n                var match = ratings[data.%s] == params.rating;\n                return (params.rating === '-' || match);\n            })\n            \"\"\" % (json.dumps(ratings), js_object_attr)\n\n            filter_params = [{'name': 'rating',\n                            'type': 'text',\n                            'values': ['-', '1', '2', '3', '4', '5'],\n                            'default': '-',\n                            }]\n            return JsonResponse(\n                {\n                    'f': f,\n                    'params': filter_params,\n                })\n\n\nCustom Data Providers\n---------------------\n\nCustom data providers return numerical data for Images that can\nbe shown in a table for sorting, or plotted in a graph.\nNB: Even if data applies to Wells, you need to map this to Image ID, since\nthat is the common denominator that is used to identify images in the\nvarious list, grid or plot layouts.\n\nUsing the same setup as for filtering above, each module listed in the\n``omero.web.parade.filters`` setting can also contain a ``data_providers.py``\nfile that implements two methods ``get_dataproviders`` and ``get_data``.\n\nExamples for ``omero_parade/data_providers.py``\n\n::\n\n    def get_dataproviders(request, conn):\n        return [\"ROI_count\"]\n\n\n    def get_data(request, data_name, conn):\n        \"\"\"Return data for images in a Dataset or Plate.\"\"\"\n        dataset_id = request.GET.get('dataset')\n        plate_id = request.GET.get('plate')\n        field_id = request.GET.get('field')\n\n        # ... get img_ids for container, then...\n\n        if data_name == \"ROI_count\":\n            # Want to get ROI count for images\n            params = ParametersI()\n            params.addIds(img_ids)\n            query = \"select roi.image.id, count(roi.id) from Roi roi \"\\\n                    \"where roi.image.id in (:ids) group by roi.image\"\n            p = query_service.projection(query, params, conn.SERVICE_OPTS)\n            roi_counts = {}\n            for i in p:\n                roi_counts[i[0].val] = i[1].val\n            return roi_counts\n\nRelease process\n---------------\n\nThis repository uses `bump2version <https://pypi.org/project/bump2version/>`_ to manage version numbers.\nTo tag a release run::\n\n    $ bumpversion release\n\nThis will remove the ``.dev0`` suffix from the current version, commit, and tag the release.\n\nTo switch back to a development version run::\n\n    $ bumpversion --no-tag [major|minor|patch]\n\nspecifying ``major``, ``minor`` or ``patch`` depending on whether the development branch will be a `major, minor or patch release <https://semver.org/>`_. This will also add the ``.dev0`` suffix.\n\nRemember to ``git push`` all commits and tags.\n\nLicense\n-------\n\nThis project, similar to many Open Microscopy Environment (OME) projects, is\nlicensed under the terms of the GNU General Public License (GPL) v2 or later.\n\nCopyright\n---------\n\n2019-2020, The Open Microscopy Environment\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/ome/omero-parade/archive/v0.2.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ome/omero-parade", "keywords": "OMERO.web,parade", "license": "AGPL-3.0", "maintainer": "", "maintainer_email": "", "name": "omero-parade", "package_url": "https://pypi.org/project/omero-parade/", "platform": "", "project_url": "https://pypi.org/project/omero-parade/", "project_urls": {"Download": "https://github.com/ome/omero-parade/archive/v0.2.1.tar.gz", "Homepage": "https://github.com/ome/omero-parade"}, "release_url": "https://pypi.org/project/omero-parade/0.2.1/", "requires_dist": ["omero-web (>=5.6.1)", "numpy"], "requires_python": ">=3", "summary": "A Python plugin for OMERO.web", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/ome/omero-parade\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ome/omero-parade.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f5787463550c33dc0a6d57122baadabafd2faed/68747470733a2f2f7472617669732d63692e6f72672f6f6d652f6f6d65726f2d7061726164652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/omero-parade\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/omero-parade.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/657786d1229125a727980c9fd208dd354facb87d/68747470733a2f2f62616467652e667572792e696f2f70792f6f6d65726f2d7061726164652e737667\"></a>\n<div id=\"omero-parade\">\n<h2>OMERO.parade</h2>\n<p>An OMERO.web app for filtering Data in OMERO.web centre panel.</p>\n<p>For full details see <a href=\"https://github.com/ome/omero-parade/blob/master/SUPPORT.md\" rel=\"nofollow\">SUPPORT.md</a>.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>OMERO 5.6.0 or newer</li>\n<li>Python 3.6 or newer</li>\n</ul>\n</div>\n<div id=\"installing-from-pypi\">\n<h3>Installing from PyPI</h3>\n<p>This section assumes that an OMERO.web is already installed.</p>\n<p>Install the app using <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ pip install -U omero-parade\n</pre>\n<p>Add parade custom app to your installed web apps:</p>\n<pre>$ bin/omero config append omero.web.apps '\"omero_parade\"'\n</pre>\n<p>Display parade in the centre of the webclient:</p>\n<pre>$ bin/omero config append omero.web.ui.center_plugins \\\n    '[\"Parade\", \"omero_parade/init.js.html\", \"omero_parade\"]'\n</pre>\n<p>Now restart OMERO.web as normal.</p>\n</div>\n<div id=\"build\">\n<h3>Build</h3>\n<p>In order to build you need:</p>\n<ul>\n<li>npm version equal or greater to 3.0! npm version equal or greater than\n5.2 is recommended!</li>\n</ul>\n<pre>$ npm install\n</pre>\n<p>To build an uncompressed version and automatically rebuild when source\nfiles change, run:</p>\n<pre>$ npm run watch\n</pre>\n<p>To build an uncompressed version, run:</p>\n<pre>$ npm run build-dev\n</pre>\n<p>To build a compressed, minified version for production, run:</p>\n<pre>$ npm run build\n</pre>\n</div>\n<div id=\"custom-filtering\">\n<h3>Custom Filtering</h3>\n<p>Users can customize the filtering options available by adding their own\npython modules to the setting:</p>\n<pre>omero.web.parade.filters\n</pre>\n<p>The current default setting lists the <tt>omero_parade</tt> app itself and two\nother modules that are in the same directory and are therefore expected to\nbe on the PYTHONPATH when the app is installed.</p>\n<pre>'[\"omero_parade\", \"omero_parade.annotation_filters\", \"omero_parade.table_filters\"]'\n</pre>\n<p>Each of these modules contains an <tt>omero_filters.py</tt> which is expected to\nimplement 2 methods: <tt>get_filters</tt> and <tt>get_script</tt>.</p>\n<p>The <tt>get_filters</tt> method is used to compile the list of filters returned\nby the URL <tt>/omero_parade/filters/</tt>.</p>\n<p>Some examples of <tt>get_filters</tt></p>\n<pre># Return a list of filter names.\ndef get_filters(request, conn):\n    return [\"Rating\", \"Comment\", \"Tag\"]\n</pre>\n<p>The request may include <tt>plate</tt> or <tt>dataset</tt> ID if we only want to\nsupport the filter for certain data types. In this example we could even\ncheck whether an OMERO.table exists on the plate.</p>\n<pre>def get_filters(request, conn):\n    if request.GET.get('plate', None) is not None:\n        return [\"Table\"]\n    return []\n</pre>\n<p>The <tt>get_script</tt> function for a named filter should return a <tt>JsonResponse</tt>\nthat includes a list of parameters for the user input to the filter\nand a JavaScript filter function.</p>\n<p>The JavaScript function will be called for each image to filter and will\nalso be passed in a params object with the user input.</p>\n<pre># Return a JS function to filter images by various params.\ndef get_script(request, script_name, conn):\n\n    dataset_id = request.GET.get('dataset')\n    // OR...\n    plate_id = request.GET.get('plate')\n\n    if script_name == \"Rating\":\n        # Load rating data for images in Dataset or Wells in Plate...\n        # ...\n        # var ratings = {imageId: rating} for all images\n        var js_object_attr = 'id';  # or 'wellId' if filtering Wells\n\n        # Return a JS function that will be passed an object\n        # e.g. {id: 1} for Image or {id: 1, wellId:2} for Image in Well.\n        # and should return true or false\n        f = \"\"\"(function filter(data, params) {\n            var ratings = %s;\n            var match = ratings[data.%s] == params.rating;\n            return (params.rating === '-' || match);\n        })\n        \"\"\" % (json.dumps(ratings), js_object_attr)\n\n        filter_params = [{'name': 'rating',\n                        'type': 'text',\n                        'values': ['-', '1', '2', '3', '4', '5'],\n                        'default': '-',\n                        }]\n        return JsonResponse(\n            {\n                'f': f,\n                'params': filter_params,\n            })\n</pre>\n</div>\n<div id=\"custom-data-providers\">\n<h3>Custom Data Providers</h3>\n<p>Custom data providers return numerical data for Images that can\nbe shown in a table for sorting, or plotted in a graph.\nNB: Even if data applies to Wells, you need to map this to Image ID, since\nthat is the common denominator that is used to identify images in the\nvarious list, grid or plot layouts.</p>\n<p>Using the same setup as for filtering above, each module listed in the\n<tt>omero.web.parade.filters</tt> setting can also contain a <tt>data_providers.py</tt>\nfile that implements two methods <tt>get_dataproviders</tt> and <tt>get_data</tt>.</p>\n<p>Examples for <tt>omero_parade/data_providers.py</tt></p>\n<pre>def get_dataproviders(request, conn):\n    return [\"ROI_count\"]\n\n\ndef get_data(request, data_name, conn):\n    \"\"\"Return data for images in a Dataset or Plate.\"\"\"\n    dataset_id = request.GET.get('dataset')\n    plate_id = request.GET.get('plate')\n    field_id = request.GET.get('field')\n\n    # ... get img_ids for container, then...\n\n    if data_name == \"ROI_count\":\n        # Want to get ROI count for images\n        params = ParametersI()\n        params.addIds(img_ids)\n        query = \"select roi.image.id, count(roi.id) from Roi roi \"\\\n                \"where roi.image.id in (:ids) group by roi.image\"\n        p = query_service.projection(query, params, conn.SERVICE_OPTS)\n        roi_counts = {}\n        for i in p:\n            roi_counts[i[0].val] = i[1].val\n        return roi_counts\n</pre>\n</div>\n<div id=\"release-process\">\n<h3>Release process</h3>\n<p>This repository uses <a href=\"https://pypi.org/project/bump2version/\" rel=\"nofollow\">bump2version</a> to manage version numbers.\nTo tag a release run:</p>\n<pre>$ bumpversion release\n</pre>\n<p>This will remove the <tt>.dev0</tt> suffix from the current version, commit, and tag the release.</p>\n<p>To switch back to a development version run:</p>\n<pre>$ bumpversion --no-tag [major|minor|patch]\n</pre>\n<p>specifying <tt>major</tt>, <tt>minor</tt> or <tt>patch</tt> depending on whether the development branch will be a <a href=\"https://semver.org/\" rel=\"nofollow\">major, minor or patch release</a>. This will also add the <tt>.dev0</tt> suffix.</p>\n<p>Remember to <tt>git push</tt> all commits and tags.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>This project, similar to many Open Microscopy Environment (OME) projects, is\nlicensed under the terms of the GNU General Public License (GPL) v2 or later.</p>\n</div>\n<div id=\"copyright\">\n<h3>Copyright</h3>\n<p>2019-2020, The Open Microscopy Environment</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6710547, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "03a199e0ccb177e86d958e96af336a6b", "sha256": "d4bbb050f9c3bbe99e8a7d85c3ac339190d05e4e2c94c874e5b5d5c7eef099d1"}, "downloads": -1, "filename": "omero-parade-0.1.0.tar.gz", "has_sig": false, "md5_digest": "03a199e0ccb177e86d958e96af336a6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 416466, "upload_time": "2018-05-21T08:40:31", "upload_time_iso_8601": "2018-05-21T08:40:31.880524Z", "url": "https://files.pythonhosted.org/packages/f9/04/96501a149a8cab02388c30b0380a170c73f38f9f45353439ed5ed9be92a6/omero-parade-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "56ee4a415940c7972ac1c0c594dae232", "sha256": "8887068780e56423bd0a8179739ba1f86711b4cfeb0c8f70542364ee368e1243"}, "downloads": -1, "filename": "omero-parade-0.1.1.tar.gz", "has_sig": false, "md5_digest": "56ee4a415940c7972ac1c0c594dae232", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 418333, "upload_time": "2018-06-20T12:22:26", "upload_time_iso_8601": "2018-06-20T12:22:26.593302Z", "url": "https://files.pythonhosted.org/packages/3b/59/bc771afddef0bac7542c52b2dd5d513d46dab6b741be2140aadf311bbba5/omero-parade-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "17acb6cb9eb02cc0bb4c1c78f7e4e8fb", "sha256": "57f90d9a7f78abea8a63fd51a22b00a0f2ee76c78c472c386f2e6d7544271ecc"}, "downloads": -1, "filename": "omero-parade-0.1.2.tar.gz", "has_sig": false, "md5_digest": "17acb6cb9eb02cc0bb4c1c78f7e4e8fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 413499, "upload_time": "2018-09-11T11:47:41", "upload_time_iso_8601": "2018-09-11T11:47:41.574291Z", "url": "https://files.pythonhosted.org/packages/10/a1/a5dd9da2a384faedb367ac1047c30f5ffc3974bdb4d22c81a4728ecc1303/omero-parade-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "7336c9454ff52dc3c317e959abc0aeb9", "sha256": "93db0dbc642d6094468082fa2d2e03196a23ce1e1f181f319b2b8af2ea51b99e"}, "downloads": -1, "filename": "omero-parade-0.1.3.tar.gz", "has_sig": false, "md5_digest": "7336c9454ff52dc3c317e959abc0aeb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 423298, "upload_time": "2019-07-17T11:23:51", "upload_time_iso_8601": "2019-07-17T11:23:51.669496Z", "url": "https://files.pythonhosted.org/packages/52/87/47259f776c47f23b8d7c517ba691552ceb0b1b5d71cd2f9b17b131e34c00/omero-parade-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0143c19118829d28b69b6e81bde2c111", "sha256": "8746736fae20f6a59ed67fc92e8b9e7902b3c11c78dee5b82431660dc1e54235"}, "downloads": -1, "filename": "omero_parade-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0143c19118829d28b69b6e81bde2c111", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 439026, "upload_time": "2020-01-13T12:25:55", "upload_time_iso_8601": "2020-01-13T12:25:55.485677Z", "url": "https://files.pythonhosted.org/packages/bc/6d/e3996b06ac9054752c39510248cc38544fd105e6d01cdc36dc306ab6bae2/omero_parade-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5ab41400a7de81af1c1b97f6610b100", "sha256": "4af3066da4a95390b32f94da6ae09f20d1059ffe285c64319c4892e0652ccd4e"}, "downloads": -1, "filename": "omero-parade-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b5ab41400a7de81af1c1b97f6610b100", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 424268, "upload_time": "2020-01-13T12:25:57", "upload_time_iso_8601": "2020-01-13T12:25:57.147268Z", "url": "https://files.pythonhosted.org/packages/f2/72/6e5f55163f59c719ab1d500f41c31afee152be8173359c7fe3cc2ec0ab5e/omero-parade-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7b043d2266e4a52ab3d7cd80e7c4edbf", "sha256": "d9bd3cf0e8422023e172bcef9023d66c0381b7c93b3fb545c57b8873f9ffad43"}, "downloads": -1, "filename": "omero_parade-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b043d2266e4a52ab3d7cd80e7c4edbf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 442157, "upload_time": "2020-02-27T11:47:35", "upload_time_iso_8601": "2020-02-27T11:47:35.372681Z", "url": "https://files.pythonhosted.org/packages/51/9b/674b7a59fde7940222695735059caafdd7826ffbc0b44b37afff06a5a014/omero_parade-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebd4921f223b5e944920e1271b627e9b", "sha256": "410b1eaabce4562dda380e431cec9c3ef175e2eb87049fa65be864a6eb005a3c"}, "downloads": -1, "filename": "omero-parade-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ebd4921f223b5e944920e1271b627e9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 424998, "upload_time": "2020-02-27T11:47:37", "upload_time_iso_8601": "2020-02-27T11:47:37.145122Z", "url": "https://files.pythonhosted.org/packages/1a/22/eb53aa9c8b91b9332523154d9577f6af211cb2f35feaa546d3a96ae3d42e/omero-parade-0.2.1.tar.gz", "yanked": false}], "0.2.dev1": [{"comment_text": "", "digests": {"md5": "9f61e2d579a6cf46e2d00491ad9b4ba1", "sha256": "ca9126c301d0657f5e955e218ea68a875a6abe9b0e13035158409bd8d96b7880"}, "downloads": -1, "filename": "omero-parade-0.2.dev1.tar.gz", "has_sig": false, "md5_digest": "9f61e2d579a6cf46e2d00491ad9b4ba1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 423477, "upload_time": "2019-11-27T16:50:59", "upload_time_iso_8601": "2019-11-27T16:50:59.510033Z", "url": "https://files.pythonhosted.org/packages/cb/d3/2915933bbf8f5626bc5bcc22df95576a1260970e82c1d0e9684c5fdc6b96/omero-parade-0.2.dev1.tar.gz", "yanked": false}], "0.2.dev2": [{"comment_text": "", "digests": {"md5": "d6c1c9894355eec425c8fd89aa80d6b4", "sha256": "a8faaaa4a213527bc246b78fb9531606fa31163c60e94418f29a0a0db15a257f"}, "downloads": -1, "filename": "omero-parade-0.2.dev2.tar.gz", "has_sig": false, "md5_digest": "d6c1c9894355eec425c8fd89aa80d6b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 423490, "upload_time": "2019-12-05T10:50:23", "upload_time_iso_8601": "2019-12-05T10:50:23.642919Z", "url": "https://files.pythonhosted.org/packages/c9/47/a9a1c3c4d48152440e7b5811e1b500cd304f6bb697bf13241cfe63278c3e/omero-parade-0.2.dev2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b043d2266e4a52ab3d7cd80e7c4edbf", "sha256": "d9bd3cf0e8422023e172bcef9023d66c0381b7c93b3fb545c57b8873f9ffad43"}, "downloads": -1, "filename": "omero_parade-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b043d2266e4a52ab3d7cd80e7c4edbf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 442157, "upload_time": "2020-02-27T11:47:35", "upload_time_iso_8601": "2020-02-27T11:47:35.372681Z", "url": "https://files.pythonhosted.org/packages/51/9b/674b7a59fde7940222695735059caafdd7826ffbc0b44b37afff06a5a014/omero_parade-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebd4921f223b5e944920e1271b627e9b", "sha256": "410b1eaabce4562dda380e431cec9c3ef175e2eb87049fa65be864a6eb005a3c"}, "downloads": -1, "filename": "omero-parade-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ebd4921f223b5e944920e1271b627e9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 424998, "upload_time": "2020-02-27T11:47:37", "upload_time_iso_8601": "2020-02-27T11:47:37.145122Z", "url": "https://files.pythonhosted.org/packages/1a/22/eb53aa9c8b91b9332523154d9577f6af211cb2f35feaa546d3a96ae3d42e/omero-parade-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:33 2020"}