{"info": {"author": "Jonathan Keljo", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Topic :: Home Automation"], "description": "==================\n`greeneye-monitor`\n==================\n\nReceive data from your `GreenEye Monitor <http://www.brultech.com/greeneye/>`_ in Python.\n\nThis module provides a layered API for parsing individual packets (`greeneye.packets`), processing streams of packets\n(`greeneye.streams`), or monitoring the current state reported by one or more monitors (`greeneye.monitor`). It's an\nAPI intended to be integrated with other systems; it does not itself provide those integrations or any sort of data\nstorage. If you're looking for something like that, check out\n`btmon.py <https://github.com/matthewwall/mtools/blob/master/bin/btmon.py>`_.\n\nFeatures include:\n* Parsing for all binary packet formats\n* Receive data from multiple monitors\n* Computes rate-of-change (Watts, pulses/sec) in addition to reporting total values\n\n***********\nQuick start\n***********\n\nAPI Usage\n=========\nSee `dump_packets.py <https://github.com/jkeljo/greeneye-monitor/blob/master/dump_packets.py>`_ for a simple usage example.\n\nGEM Setup\n=========\nYour GEM must be set to send binary format packets (formats that begin with Bin, e.g. Bin32 NET) to\nthe IP address of the computer on which you're running this software.\nYour `GEM configuration manual <https://www.brultech.com/software/files/downloadSoft/GEM_Configuration_CFG_ver3_2.pdf>`_\nis the canonical source for how to do this, but here are the steps as of this writing:\n\n1. Navigate to your GEM's web UI (`http://<GEM IP>:8000`)\n2. Click \"Enter Setup Mode\"\n3. Click the \"Packet Send\" tab\n4. Set the \"Primary (Com1) Packet Format\" to one of the \"Bin\" formats. I recommend:\n    * Bin32 ABS if you have a 32-channel GEM with no channels set for net metering\n    * Bin32 NET if you have a 32-channel GEM and some channels are set for net metering\n    * Bin48 ABS if you have a 48-channel GEM with no channels set for net metering\n    * Bin48 NET if you have a 48-channel GEM and some channels are set for net metering\n5. Set the \"Packet Send Interval\" if you want something other than the default\n6. Click \"Save\"\n7. Click the \"Network\" tab\n8. Enter the IP address of the computer on which you'll be running this software, and the port of your choice\n9. Click \"Save\"\n10. Click \"Return\" when it becomes available\n11. Click \"Exit Setup Mode\"\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jkeljo/greeneye-monitor", "keywords": "greeneye", "license": "", "maintainer": "", "maintainer_email": "", "name": "greeneye-monitor", "package_url": "https://pypi.org/project/greeneye-monitor/", "platform": "", "project_url": "https://pypi.org/project/greeneye-monitor/", "project_urls": {"Homepage": "https://github.com/jkeljo/greeneye-monitor"}, "release_url": "https://pypi.org/project/greeneye-monitor/2.0/", "requires_dist": null, "requires_python": "~=3.5", "summary": "Receive data packets from GreenEye Monitor(http://www.brultech.com/greeneye/)", "version": "2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Receive data from your <a href=\"http://www.brultech.com/greeneye/\" rel=\"nofollow\">GreenEye Monitor</a> in Python.</p>\n<p>This module provides a layered API for parsing individual packets (<cite>greeneye.packets</cite>), processing streams of packets\n(<cite>greeneye.streams</cite>), or monitoring the current state reported by one or more monitors (<cite>greeneye.monitor</cite>). It\u2019s an\nAPI intended to be integrated with other systems; it does not itself provide those integrations or any sort of data\nstorage. If you\u2019re looking for something like that, check out\n<a href=\"https://github.com/matthewwall/mtools/blob/master/bin/btmon.py\" rel=\"nofollow\">btmon.py</a>.</p>\n<p>Features include:\n* Parsing for all binary packet formats\n* Receive data from multiple monitors\n* Computes rate-of-change (Watts, pulses/sec) in addition to reporting total values</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<div id=\"api-usage\">\n<h3>API Usage</h3>\n<p>See <a href=\"https://github.com/jkeljo/greeneye-monitor/blob/master/dump_packets.py\" rel=\"nofollow\">dump_packets.py</a> for a simple usage example.</p>\n</div>\n<div id=\"gem-setup\">\n<h3>GEM Setup</h3>\n<p>Your GEM must be set to send binary format packets (formats that begin with Bin, e.g. Bin32 NET) to\nthe IP address of the computer on which you\u2019re running this software.\nYour <a href=\"https://www.brultech.com/software/files/downloadSoft/GEM_Configuration_CFG_ver3_2.pdf\" rel=\"nofollow\">GEM configuration manual</a>\nis the canonical source for how to do this, but here are the steps as of this writing:</p>\n<ol>\n<li>Navigate to your GEM\u2019s web UI (<cite>http://&lt;GEM IP&gt;:8000</cite>)</li>\n<li>Click \u201cEnter Setup Mode\u201d</li>\n<li>Click the \u201cPacket Send\u201d tab</li>\n<li><dl>\n<dt>Set the \u201cPrimary (Com1) Packet Format\u201d to one of the \u201cBin\u201d formats. I recommend:</dt>\n<dd><ul>\n<li>Bin32 ABS if you have a 32-channel GEM with no channels set for net metering</li>\n<li>Bin32 NET if you have a 32-channel GEM and some channels are set for net metering</li>\n<li>Bin48 ABS if you have a 48-channel GEM with no channels set for net metering</li>\n<li>Bin48 NET if you have a 48-channel GEM and some channels are set for net metering</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Set the \u201cPacket Send Interval\u201d if you want something other than the default</li>\n<li>Click \u201cSave\u201d</li>\n<li>Click the \u201cNetwork\u201d tab</li>\n<li>Enter the IP address of the computer on which you\u2019ll be running this software, and the port of your choice</li>\n<li>Click \u201cSave\u201d</li>\n<li>Click \u201cReturn\u201d when it becomes available</li>\n<li>Click \u201cExit Setup Mode\u201d</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6643139, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7498a4600fc4573a04b91025fcbc5ad6", "sha256": "9acf8ea886e62627fb94fd0480dd167bb9fe5a41bb0874a43a41a81c95090484"}, "downloads": -1, "filename": "greeneye_monitor-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7498a4600fc4573a04b91025fcbc5ad6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 11329, "upload_time": "2018-09-02T17:52:57", "upload_time_iso_8601": "2018-09-02T17:52:57.478795Z", "url": "https://files.pythonhosted.org/packages/6c/36/306b97aaac85b24de66f08a7889e5892b3613b51de3c07f73612ee6fb36c/greeneye_monitor-0.1-py3-none-any.whl", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "8452ac44a0041429c8204ba531329813", "sha256": "1878aab040497b770ff8471c888d3a54562d24c5963dfa1306ce741c5d3fec1c"}, "downloads": -1, "filename": "greeneye_monitor-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8452ac44a0041429c8204ba531329813", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 11442, "upload_time": "2018-12-29T04:17:38", "upload_time_iso_8601": "2018-12-29T04:17:38.575862Z", "url": "https://files.pythonhosted.org/packages/bc/23/c44cc2390190de02c6deede7667021b4e4e80755731881284afd0334281e/greeneye_monitor-1.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7521c702505171a835b0253ba1af1450", "sha256": "f16d61e616ecece143744f882a8ffae91e20665767e1564db63106bea4fc8424"}, "downloads": -1, "filename": "greeneye_monitor-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7521c702505171a835b0253ba1af1450", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 13715, "upload_time": "2019-11-01T03:59:28", "upload_time_iso_8601": "2019-11-01T03:59:28.880118Z", "url": "https://files.pythonhosted.org/packages/d3/59/48c362b75fb7af6fdb771786ca001d39d8972897a3659013de53c41d1008/greeneye_monitor-1.0.1-py3-none-any.whl", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "8e0aa1d2303067b7ea6b11236b63fb81", "sha256": "f3fad08650b363b87bdbe67ef965c0f71d7af8d6600e11e6d148695065d7639e"}, "downloads": -1, "filename": "greeneye_monitor-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8e0aa1d2303067b7ea6b11236b63fb81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 13696, "upload_time": "2020-02-17T00:02:13", "upload_time_iso_8601": "2020-02-17T00:02:13.126222Z", "url": "https://files.pythonhosted.org/packages/27/95/f4808853674613f5db789a43be3ba78903969a785350432003ba4f98905c/greeneye_monitor-2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e0aa1d2303067b7ea6b11236b63fb81", "sha256": "f3fad08650b363b87bdbe67ef965c0f71d7af8d6600e11e6d148695065d7639e"}, "downloads": -1, "filename": "greeneye_monitor-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8e0aa1d2303067b7ea6b11236b63fb81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 13696, "upload_time": "2020-02-17T00:02:13", "upload_time_iso_8601": "2020-02-17T00:02:13.126222Z", "url": "https://files.pythonhosted.org/packages/27/95/f4808853674613f5db789a43be3ba78903969a785350432003ba4f98905c/greeneye_monitor-2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:54:20 2020"}