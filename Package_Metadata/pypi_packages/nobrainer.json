{"info": {"author": "Nobrainer Developers", "author_email": "jakub.kaczmarzyk@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Healthcare Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Nobrainer\n\n[![Build Status](https://travis-ci.com/neuronets/nobrainer.svg?branch=master)](https://travis-ci.com/neuronets/nobrainer)\n\n![Model's prediction of brain mask](https://github.com/neuronets/nobrainer-models/blob/master/images/brain-extraction/unet-best-prediction.png?raw=true) ![Model's prediction of brain mask](https://github.com/neuronets/nobrainer-models/blob/master/images/brain-extraction/unet-worst-prediction.png?raw=true) <sub>__Figure__: In the first column are T1-weighted brain scans, in the middle are a trained model's predictions, and on the right are binarized FreeSurfer segmentations. Despite being trained on binarized FreeSurfer segmentations, the model outperforms FreeSurfer in the bottom scan, which exhibits motion distortion. It took about three seconds for the model to predict each brainmask using an NVIDIA GTX 1080Ti. It takes about 70 seconds on a recent CPU.</sub>\n\n_Nobrainer_ is a deep learning framework for 3D image processing. It implements several 3D convolutional models from recent literature, methods for loading and augmenting volumetric data that can be used with any TensorFlow or Keras model, losses and metrics for 3D data, and simple utilities for model training, evaluation, prediction, and transfer learning.\n\n_Nobrainer_ also provides pre-trained models for brain extraction, brain segmentation, and other tasks. Please see the [_Nobrainer_ models](https://github.com/neuronets/nobrainer-models) repository for more information.\n\nThe _Nobrainer_ project is supported by NIH R01 EB020470 and is distributed under the Apache 2.0 license.\n\n## Table of contents\n\n- [Guide Jupyter Notebooks](#guide-jupyter-notebooks-)\n- [Installation](#installation)\n  - [Container](#container)\n    - [GPU support](#gpu-support)\n    - [CPU only](#cpu-only)\n  - [pip](#pip)\n- [Using pre-trained networks](#using-pre-trained-networks)\n  - [Predicting a brainmask for a T1-weighted brain scan](#predicting-a-brainmask-for-a-t1-weighted-brain-scan)\n  - [Transfer learning](#transfer-learning)\n- [Data augmentation](#data-augmentation)\n  - [Random rigid transformation](#random-rigid-transformation)\n- [Package layout](#package-layout)\n- [Questions or issues](#questions-or-issues)\n\n## Guide Jupyter Notebooks [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/neuronets/nobrainer)\n\nPlease refer to the Jupyter notebooks in the [guide](/guide) directory to get started with _Nobrainer_. [Try them out](https://colab.research.google.com/github/neuronets/nobrainer) in Google Collaboratory!\n\n## Installation\n\n### Container\n\nWe recommend using the official _Nobrainer_ Docker container, which includes all of the dependencies necessary to use the framework. Please see the available images on [DockerHub](https://hub.docker.com/r/kaczmarj/nobrainer)\n\n#### GPU support\n\nThe _Nobrainer_ containers with GPU support use CUDA 10, which requires Linux NVIDIA drivers `>=410.48`. These drivers are not included in the container.\n\n```\n$ docker pull kaczmarj/nobrainer:latest-gpu\n$ singularity pull docker://kaczmarj/nobrainer:latest-gpu\n```\n\n#### CPU only\n\nThis container can be used on all systems that have Docker or Singularity and does not require special hardware. This container, however, should not be used for model training (it will be very slow).\n\n```\n$ docker pull kaczmarj/nobrainer:latest\n$ singularity pull docker://kaczmarj/nobrainer:latest\n```\n\n### pip\n\n_Nobrainer_ can also be installed with pip. Use the extra `[gpu]` to install TensorFlow with GPU support and the `[cpu]` extra to install TensorFlow without GPU support. GPU support requires CUDA 10, which requires Linux NVIDIA drivers `>=410.48`.\n\n```\n$ pip install --no-cache-dir nobrainer[gpu]\n```\n\n## Using pre-trained networks\n\nPre-trained networks are available in the [_Nobrainer_ models](https://github.com/neuronets/nobrainer-models) repository. Prediction can be done on the command-line with `nobrainer predict` or in Python.\n\n### Predicting a brainmask for a T1-weighted brain scan\n\nIn the following examples, we will use a 3D U-Net trained for brain extraction and documented in [_Nobrainer_ models](https://github.com/neuronets/nobrainer-models#brain-extraction).\n\nIn the base case, we run the T1w scan through the model for prediction.\n\n```bash\n# Get sample T1w scan.\nwget -nc https://dl.dropbox.com/s/g1vn5p3grifro4d/T1w.nii.gz\ndocker run --rm -v $PWD:/data kaczmarj/nobrainer \\\n  predict \\\n    --model=/models/brain-extraction-unet-128iso-model.h5 \\\n    --verbose \\\n    /data/T1w.nii.gz \\\n    /data/brainmask.nii.gz\n```\n\nFor binary segmentation where we expect one predicted region, as is the case with brain extraction, we can reduce false positives by removing all predictions not connected to the largest contiguous label.\n\n```bash\n# Get sample T1w scan.\nwget -nc https://dl.dropbox.com/s/g1vn5p3grifro4d/T1w.nii.gz\ndocker run --rm -v $PWD:/data kaczmarj/nobrainer \\\n  predict \\\n    --model=/models/brain-extraction-unet-128iso-model.h5 \\\n    --largest-label \\\n    --verbose \\\n    /data/T1w.nii.gz \\\n    /data/brainmask-largestlabel.nii.gz\n```\n\nBecause the network was trained on randomly rotated data, it should be agnostic to orientation. Therefore, we can rotate the volume, predict on it, undo the rotation in the prediction, and average the prediction with that from the original volume. This can lead to a better overall prediction but will at least double the processing time. To enable this, use the flag `--rotate-and-predict` in `nobrainer predict`.\n\n```bash\n# Get sample T1w scan.\nwget -nc https://dl.dropbox.com/s/g1vn5p3grifro4d/T1w.nii.gz\ndocker run --rm -v $PWD:/data kaczmarj/nobrainer \\\n  predict \\\n    --model=/models/brain-extraction-unet-128iso-model.h5 \\\n    --rotate-and-predict \\\n    --verbose \\\n    /data/T1w.nii.gz \\\n    /data/brainmask-withrotation.nii.gz\n```\n\nCombining the above, we can usually achieve the best brain extraction by using `--rotate-and-predict` in conjunction with `--largest-label`.\n\n```bash\n# Get sample T1w scan.\nwget -nc https://dl.dropbox.com/s/g1vn5p3grifro4d/T1w.nii.gz\ndocker run --rm -v $PWD:/data kaczmarj/nobrainer \\\n  predict \\\n    --model=/models/brain-extraction-unet-128iso-model.h5 \\\n    --largest-label \\\n    --rotate-and-predict \\\n    --verbose \\\n    /data/T1w.nii.gz \\\n    /data/brainmask-maybebest.nii.gz\n```\n\n### Transfer learning\n\nThe pre-trained models can be used for transfer learning. To avoid forgetting important information in the pre-trained model, you can apply regularization to the kernel weights and also use a low learning rate. For more information, please see the _Nobrainer_ guide notebook on transfer learning.\n\nAs an example of transfer learning, [@kaczmarj](https://github.com/kaczmarj) re-trained a brain extraction model to label meningiomas in 3D T1-weighted, contrast-enhanced MR scans. The original model is publicly available and was trained on 10,000 T1-weighted MR brain scans from healthy participants. These were all research scans (i.e., non-clinical) and did not include any contrast agents. The meningioma dataset, on the other hand, was composed of relatively few scans, all of which were clinical and used gadolinium as a contrast agent. You can observe the differences in contrast below.\n\n![Brain extraction model prediction](https://github.com/kaczmarj/nobrainer-models/blob/master/images/brain-extraction/unet-best-prediction.png?raw=true)\n![Meningioma extraction model prediction](https://user-images.githubusercontent.com/17690870/55470578-e6cb7800-55d5-11e9-991f-fe13c03ab0bd.png)\n\nDespite the differences between the two datasets, transfer learning led to a much better model than training from randomly-initialized weights. As evidence, please see below violin plots of Dice coefficients on a validation set. In the left plot are Dice coefficients of predictions obtained with the model trained from randomly-initialized weights, and on the right are Dice coefficients of predictions obtained with the transfer-learned model. In general, Dice coefficients are higher on the right, and the variance of Dice scores is lower. Overall, the model on the right is more accurate and more robust than the one on the left.\n\n<div style=\"text-align: center\">\n<img src=\"https://user-images.githubusercontent.com/17690870/56313232-1e7f0780-6120-11e9-8f1a-62b8c3d48e15.png\" alt=\"\" width=\"49%\" />\n<img src=\"https://user-images.githubusercontent.com/17690870/56313239-23dc5200-6120-11e9-88eb-0e9ebca6ba83.png\" alt=\"\" width=\"49%\" />\n</div>\n\n## Data augmentation\n\n_Nobrainer_ provides methods of augmenting volumetric data. Augmentation is useful when the amount of data is low, and it can create more generalizable and robust models. Other packages have implemented methods of augmenting volumetric data, but _Nobrainer_ is unique in that its augmentation methods are written in pure TensorFlow. This allows these methods to be part of serializable `tf.data.Dataset` pipelines and used for training on TPUs.\n\nIn practice, [@kaczmarj](https://github.com/kaczmarj) has found that augmentations improve the generalizability of semantic segmentation models for brain extraction. Augmentation also seems to improve transfer learning models. For example, a meningioma model trained from a brain extraction model that employed augmentation performed better than a meningioma model trained from a brain extraction model that did not use augmentation.\n\n### Random rigid transformation\n\nA rigid transformation is one that allows for rotations, translations, and reflections. _Nobrainer_ implements rigid transformations in pure TensorFlow. Please refer to `nobrainer.transform.warp` to apply a transformation matrix to a volume. You can also apply random rigid transformations to the data input pipeline. When creating you `tf.data.Dataset` with `nobrainer.volume.get_dataset`, simply set `augment=True`, and about 50% of volumes will be augmented with random rigid transformations. To use the function directly, please refer to `nobrainer.volume.apply_random_transform`. Features and labels are transformed in the same way. Features are interpolated linearly, whereas labels are interpolated using nearest neighbor. Below is an example of a random rigid transformation applied to features and labels. The mask in the right-hand column is a brain mask. Note that the MRI scan and brain mask are transformed in the same way.\n\n![Example of rigidly transforming features and labels volumes](https://user-images.githubusercontent.com/17690870/56315311-5ccaf580-6125-11e9-866a-af47aa76161c.png)\n\n## Package layout\n\n- `nobrainer.io`: input/output methods\n- `nobrainer.layers`: custom layers, which conform to the Keras API\n- `nobrainer.losses`: loss functions for volumetric segmentation\n- `nobrainer.metrics`: metrics for volumetric segmentation\n- `nobrainer.models`: pre-defined Keras models\n- `nobrainer.training`: training utilities (supports training on single and multiple GPUs)\n- `nobrainer.transform`: random rigid transformations for data augmentation\n- `nobrainer.volume`: `tf.data.Dataset` creation and data augmentation utilities\n\n## Questions or issues\n\nIf you have questions about _Nobrainer_ or encounter any issues using the framework, please submit a GitHub issue. If you have a feature request, we encourage you to submit a pull request.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaczmarj/nobrainer", "keywords": "", "license": "Apache License, 2.0", "maintainer": "", "maintainer_email": "", "name": "nobrainer", "package_url": "https://pypi.org/project/nobrainer/", "platform": "", "project_url": "https://pypi.org/project/nobrainer/", "project_urls": {"Homepage": "https://github.com/kaczmarj/nobrainer"}, "release_url": "https://pypi.org/project/nobrainer/0.0.3/", "requires_dist": ["click", "nibabel", "numpy", "scikit-image", "tensorflow-probability (>=0.7.0)", "tensorflow (>=2.0.0) ; extra == 'cpu'", "ipython ; extra == 'dev'", "flake8 ; extra == 'dev'", "nbconvert ; extra == 'dev'", "pre-commit ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "scipy ; extra == 'dev'", "yapf ; extra == 'dev'", "tensorflow-gpu (>=2.0.0) ; extra == 'gpu'"], "requires_python": ">=3.5", "summary": "A framework for developing neural network models for 3D image processing.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Nobrainer</h1>\n<p><a href=\"https://travis-ci.com/neuronets/nobrainer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6bdc4acb6d02f862dd7c38ae60f4640b167f220/68747470733a2f2f7472617669732d63692e636f6d2f6e6575726f6e6574732f6e6f627261696e65722e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><img alt=\"Model's prediction of brain mask\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34c3f9d7fd4e1c2deabbbfbf0746e81f379a3ffe/68747470733a2f2f6769746875622e636f6d2f6e6575726f6e6574732f6e6f627261696e65722d6d6f64656c732f626c6f622f6d61737465722f696d616765732f627261696e2d65787472616374696f6e2f756e65742d626573742d70726564696374696f6e2e706e673f7261773d74727565\"> <img alt=\"Model's prediction of brain mask\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0dfd01139213640f1f995093cd2238e5abd19a79/68747470733a2f2f6769746875622e636f6d2f6e6575726f6e6574732f6e6f627261696e65722d6d6f64656c732f626c6f622f6d61737465722f696d616765732f627261696e2d65787472616374696f6e2f756e65742d776f7273742d70726564696374696f6e2e706e673f7261773d74727565\"> <sub><strong>Figure</strong>: In the first column are T1-weighted brain scans, in the middle are a trained model's predictions, and on the right are binarized FreeSurfer segmentations. Despite being trained on binarized FreeSurfer segmentations, the model outperforms FreeSurfer in the bottom scan, which exhibits motion distortion. It took about three seconds for the model to predict each brainmask using an NVIDIA GTX 1080Ti. It takes about 70 seconds on a recent CPU.</sub></p>\n<p><em>Nobrainer</em> is a deep learning framework for 3D image processing. It implements several 3D convolutional models from recent literature, methods for loading and augmenting volumetric data that can be used with any TensorFlow or Keras model, losses and metrics for 3D data, and simple utilities for model training, evaluation, prediction, and transfer learning.</p>\n<p><em>Nobrainer</em> also provides pre-trained models for brain extraction, brain segmentation, and other tasks. Please see the <a href=\"https://github.com/neuronets/nobrainer-models\" rel=\"nofollow\"><em>Nobrainer</em> models</a> repository for more information.</p>\n<p>The <em>Nobrainer</em> project is supported by NIH R01 EB020470 and is distributed under the Apache 2.0 license.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#guide-jupyter-notebooks-\" rel=\"nofollow\">Guide Jupyter Notebooks</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#container\" rel=\"nofollow\">Container</a>\n<ul>\n<li><a href=\"#gpu-support\" rel=\"nofollow\">GPU support</a></li>\n<li><a href=\"#cpu-only\" rel=\"nofollow\">CPU only</a></li>\n</ul>\n</li>\n<li><a href=\"#pip\" rel=\"nofollow\">pip</a></li>\n</ul>\n</li>\n<li><a href=\"#using-pre-trained-networks\" rel=\"nofollow\">Using pre-trained networks</a>\n<ul>\n<li><a href=\"#predicting-a-brainmask-for-a-t1-weighted-brain-scan\" rel=\"nofollow\">Predicting a brainmask for a T1-weighted brain scan</a></li>\n<li><a href=\"#transfer-learning\" rel=\"nofollow\">Transfer learning</a></li>\n</ul>\n</li>\n<li><a href=\"#data-augmentation\" rel=\"nofollow\">Data augmentation</a>\n<ul>\n<li><a href=\"#random-rigid-transformation\" rel=\"nofollow\">Random rigid transformation</a></li>\n</ul>\n</li>\n<li><a href=\"#package-layout\" rel=\"nofollow\">Package layout</a></li>\n<li><a href=\"#questions-or-issues\" rel=\"nofollow\">Questions or issues</a></li>\n</ul>\n<h2>Guide Jupyter Notebooks <a href=\"https://colab.research.google.com/github/neuronets/nobrainer\" rel=\"nofollow\"><img alt=\"Open In Colab\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74d996556a82b2f1dd5252d2fd8bead60f9e9d21/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667\"></a></h2>\n<p>Please refer to the Jupyter notebooks in the <a href=\"/guide\" rel=\"nofollow\">guide</a> directory to get started with <em>Nobrainer</em>. <a href=\"https://colab.research.google.com/github/neuronets/nobrainer\" rel=\"nofollow\">Try them out</a> in Google Collaboratory!</p>\n<h2>Installation</h2>\n<h3>Container</h3>\n<p>We recommend using the official <em>Nobrainer</em> Docker container, which includes all of the dependencies necessary to use the framework. Please see the available images on <a href=\"https://hub.docker.com/r/kaczmarj/nobrainer\" rel=\"nofollow\">DockerHub</a></p>\n<h4>GPU support</h4>\n<p>The <em>Nobrainer</em> containers with GPU support use CUDA 10, which requires Linux NVIDIA drivers <code>&gt;=410.48</code>. These drivers are not included in the container.</p>\n<pre><code>$ docker pull kaczmarj/nobrainer:latest-gpu\n$ singularity pull docker://kaczmarj/nobrainer:latest-gpu\n</code></pre>\n<h4>CPU only</h4>\n<p>This container can be used on all systems that have Docker or Singularity and does not require special hardware. This container, however, should not be used for model training (it will be very slow).</p>\n<pre><code>$ docker pull kaczmarj/nobrainer:latest\n$ singularity pull docker://kaczmarj/nobrainer:latest\n</code></pre>\n<h3>pip</h3>\n<p><em>Nobrainer</em> can also be installed with pip. Use the extra <code>[gpu]</code> to install TensorFlow with GPU support and the <code>[cpu]</code> extra to install TensorFlow without GPU support. GPU support requires CUDA 10, which requires Linux NVIDIA drivers <code>&gt;=410.48</code>.</p>\n<pre><code>$ pip install --no-cache-dir nobrainer[gpu]\n</code></pre>\n<h2>Using pre-trained networks</h2>\n<p>Pre-trained networks are available in the <a href=\"https://github.com/neuronets/nobrainer-models\" rel=\"nofollow\"><em>Nobrainer</em> models</a> repository. Prediction can be done on the command-line with <code>nobrainer predict</code> or in Python.</p>\n<h3>Predicting a brainmask for a T1-weighted brain scan</h3>\n<p>In the following examples, we will use a 3D U-Net trained for brain extraction and documented in <a href=\"https://github.com/neuronets/nobrainer-models#brain-extraction\" rel=\"nofollow\"><em>Nobrainer</em> models</a>.</p>\n<p>In the base case, we run the T1w scan through the model for prediction.</p>\n<pre><span class=\"c1\"># Get sample T1w scan.</span>\nwget -nc https://dl.dropbox.com/s/g1vn5p3grifro4d/T1w.nii.gz\ndocker run --rm -v <span class=\"nv\">$PWD</span>:/data kaczmarj/nobrainer <span class=\"se\">\\</span>\n  predict <span class=\"se\">\\</span>\n    --model<span class=\"o\">=</span>/models/brain-extraction-unet-128iso-model.h5 <span class=\"se\">\\</span>\n    --verbose <span class=\"se\">\\</span>\n    /data/T1w.nii.gz <span class=\"se\">\\</span>\n    /data/brainmask.nii.gz\n</pre>\n<p>For binary segmentation where we expect one predicted region, as is the case with brain extraction, we can reduce false positives by removing all predictions not connected to the largest contiguous label.</p>\n<pre><span class=\"c1\"># Get sample T1w scan.</span>\nwget -nc https://dl.dropbox.com/s/g1vn5p3grifro4d/T1w.nii.gz\ndocker run --rm -v <span class=\"nv\">$PWD</span>:/data kaczmarj/nobrainer <span class=\"se\">\\</span>\n  predict <span class=\"se\">\\</span>\n    --model<span class=\"o\">=</span>/models/brain-extraction-unet-128iso-model.h5 <span class=\"se\">\\</span>\n    --largest-label <span class=\"se\">\\</span>\n    --verbose <span class=\"se\">\\</span>\n    /data/T1w.nii.gz <span class=\"se\">\\</span>\n    /data/brainmask-largestlabel.nii.gz\n</pre>\n<p>Because the network was trained on randomly rotated data, it should be agnostic to orientation. Therefore, we can rotate the volume, predict on it, undo the rotation in the prediction, and average the prediction with that from the original volume. This can lead to a better overall prediction but will at least double the processing time. To enable this, use the flag <code>--rotate-and-predict</code> in <code>nobrainer predict</code>.</p>\n<pre><span class=\"c1\"># Get sample T1w scan.</span>\nwget -nc https://dl.dropbox.com/s/g1vn5p3grifro4d/T1w.nii.gz\ndocker run --rm -v <span class=\"nv\">$PWD</span>:/data kaczmarj/nobrainer <span class=\"se\">\\</span>\n  predict <span class=\"se\">\\</span>\n    --model<span class=\"o\">=</span>/models/brain-extraction-unet-128iso-model.h5 <span class=\"se\">\\</span>\n    --rotate-and-predict <span class=\"se\">\\</span>\n    --verbose <span class=\"se\">\\</span>\n    /data/T1w.nii.gz <span class=\"se\">\\</span>\n    /data/brainmask-withrotation.nii.gz\n</pre>\n<p>Combining the above, we can usually achieve the best brain extraction by using <code>--rotate-and-predict</code> in conjunction with <code>--largest-label</code>.</p>\n<pre><span class=\"c1\"># Get sample T1w scan.</span>\nwget -nc https://dl.dropbox.com/s/g1vn5p3grifro4d/T1w.nii.gz\ndocker run --rm -v <span class=\"nv\">$PWD</span>:/data kaczmarj/nobrainer <span class=\"se\">\\</span>\n  predict <span class=\"se\">\\</span>\n    --model<span class=\"o\">=</span>/models/brain-extraction-unet-128iso-model.h5 <span class=\"se\">\\</span>\n    --largest-label <span class=\"se\">\\</span>\n    --rotate-and-predict <span class=\"se\">\\</span>\n    --verbose <span class=\"se\">\\</span>\n    /data/T1w.nii.gz <span class=\"se\">\\</span>\n    /data/brainmask-maybebest.nii.gz\n</pre>\n<h3>Transfer learning</h3>\n<p>The pre-trained models can be used for transfer learning. To avoid forgetting important information in the pre-trained model, you can apply regularization to the kernel weights and also use a low learning rate. For more information, please see the <em>Nobrainer</em> guide notebook on transfer learning.</p>\n<p>As an example of transfer learning, <a href=\"https://github.com/kaczmarj\" rel=\"nofollow\">@kaczmarj</a> re-trained a brain extraction model to label meningiomas in 3D T1-weighted, contrast-enhanced MR scans. The original model is publicly available and was trained on 10,000 T1-weighted MR brain scans from healthy participants. These were all research scans (i.e., non-clinical) and did not include any contrast agents. The meningioma dataset, on the other hand, was composed of relatively few scans, all of which were clinical and used gadolinium as a contrast agent. You can observe the differences in contrast below.</p>\n<p><img alt=\"Brain extraction model prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6d9c76c3b9571a2e744d881135150b1fdf6d1d8/68747470733a2f2f6769746875622e636f6d2f6b61637a6d61726a2f6e6f627261696e65722d6d6f64656c732f626c6f622f6d61737465722f696d616765732f627261696e2d65787472616374696f6e2f756e65742d626573742d70726564696374696f6e2e706e673f7261773d74727565\">\n<img alt=\"Meningioma extraction model prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d0a933c7969c21078b02752d28aaa041e7a7e98/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31373639303837302f35353437303537382d65366362373830302d353564352d313165392d393931662d6665313363303361623062642e706e67\"></p>\n<p>Despite the differences between the two datasets, transfer learning led to a much better model than training from randomly-initialized weights. As evidence, please see below violin plots of Dice coefficients on a validation set. In the left plot are Dice coefficients of predictions obtained with the model trained from randomly-initialized weights, and on the right are Dice coefficients of predictions obtained with the transfer-learned model. In general, Dice coefficients are higher on the right, and the variance of Dice scores is lower. Overall, the model on the right is more accurate and more robust than the one on the left.</p>\n<div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d1cdf2f2b3bf3695658ac3b0e3ce8f2f0818a3d/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31373639303837302f35363331333233322d31653766303738302d363132302d313165392d386631612d3632623863336434386531352e706e67\" width=\"49%\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42aa14386e9453d6a88d6e7bbc35d1842c33311f/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31373639303837302f35363331333233392d32336463353230302d363132302d313165392d383865622d3065396562636136626138332e706e67\" width=\"49%\">\n</div>\n<h2>Data augmentation</h2>\n<p><em>Nobrainer</em> provides methods of augmenting volumetric data. Augmentation is useful when the amount of data is low, and it can create more generalizable and robust models. Other packages have implemented methods of augmenting volumetric data, but <em>Nobrainer</em> is unique in that its augmentation methods are written in pure TensorFlow. This allows these methods to be part of serializable <code>tf.data.Dataset</code> pipelines and used for training on TPUs.</p>\n<p>In practice, <a href=\"https://github.com/kaczmarj\" rel=\"nofollow\">@kaczmarj</a> has found that augmentations improve the generalizability of semantic segmentation models for brain extraction. Augmentation also seems to improve transfer learning models. For example, a meningioma model trained from a brain extraction model that employed augmentation performed better than a meningioma model trained from a brain extraction model that did not use augmentation.</p>\n<h3>Random rigid transformation</h3>\n<p>A rigid transformation is one that allows for rotations, translations, and reflections. <em>Nobrainer</em> implements rigid transformations in pure TensorFlow. Please refer to <code>nobrainer.transform.warp</code> to apply a transformation matrix to a volume. You can also apply random rigid transformations to the data input pipeline. When creating you <code>tf.data.Dataset</code> with <code>nobrainer.volume.get_dataset</code>, simply set <code>augment=True</code>, and about 50% of volumes will be augmented with random rigid transformations. To use the function directly, please refer to <code>nobrainer.volume.apply_random_transform</code>. Features and labels are transformed in the same way. Features are interpolated linearly, whereas labels are interpolated using nearest neighbor. Below is an example of a random rigid transformation applied to features and labels. The mask in the right-hand column is a brain mask. Note that the MRI scan and brain mask are transformed in the same way.</p>\n<p><img alt=\"Example of rigidly transforming features and labels volumes\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b16ac1cb466b43a2ec1788d01519ab5fcaa5a463/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31373639303837302f35363331353331312d35636361663538302d363132352d313165392d383636612d6166343761613736313631632e706e67\"></p>\n<h2>Package layout</h2>\n<ul>\n<li><code>nobrainer.io</code>: input/output methods</li>\n<li><code>nobrainer.layers</code>: custom layers, which conform to the Keras API</li>\n<li><code>nobrainer.losses</code>: loss functions for volumetric segmentation</li>\n<li><code>nobrainer.metrics</code>: metrics for volumetric segmentation</li>\n<li><code>nobrainer.models</code>: pre-defined Keras models</li>\n<li><code>nobrainer.training</code>: training utilities (supports training on single and multiple GPUs)</li>\n<li><code>nobrainer.transform</code>: random rigid transformations for data augmentation</li>\n<li><code>nobrainer.volume</code>: <code>tf.data.Dataset</code> creation and data augmentation utilities</li>\n</ul>\n<h2>Questions or issues</h2>\n<p>If you have questions about <em>Nobrainer</em> or encounter any issues using the framework, please submit a GitHub issue. If you have a feature request, we encourage you to submit a pull request.</p>\n\n          </div>"}, "last_serial": 6441165, "releases": {"0.0.1a1": [{"comment_text": "", "digests": {"md5": "66b51c69d27e6d1c8b7c05595c2f40e3", "sha256": "292ff7c10b7f65eaab022291e03310fc9fa9ea71855df0548caf8a0151d65c2a"}, "downloads": -1, "filename": "nobrainer-0.0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "66b51c69d27e6d1c8b7c05595c2f40e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9550, "upload_time": "2019-02-13T20:50:44", "upload_time_iso_8601": "2019-02-13T20:50:44.222338Z", "url": "https://files.pythonhosted.org/packages/fa/c0/ffff66e77b4f2f1bd7cad766e72f03e2d2a5f20db66c307cbd62534ad59f/nobrainer-0.0.1a1-py3-none-any.whl", "yanked": false}], "0.0.1a2": [{"comment_text": "", "digests": {"md5": "c781658273caaadd36e8cc55762ca667", "sha256": "3652132b6608d5c33e356f48cc2e669fcced75bf268036da984fe5839b06cacd"}, "downloads": -1, "filename": "nobrainer-0.0.1a2-py3-none-any.whl", "has_sig": false, "md5_digest": "c781658273caaadd36e8cc55762ca667", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 51827, "upload_time": "2019-03-06T22:33:06", "upload_time_iso_8601": "2019-03-06T22:33:06.229718Z", "url": "https://files.pythonhosted.org/packages/45/26/393bc10202161f95f406a7dbb6374d56d715f5591635000ac4d346619a56/nobrainer-0.0.1a2-py3-none-any.whl", "yanked": false}], "0.0.1a3": [{"comment_text": "", "digests": {"md5": "bea249a84e1237743d7f083e4e369df0", "sha256": "b07e3d3a30aed4326ec49e07cefd5d184ca98023b339a84c2415f7ab2f7aea88"}, "downloads": -1, "filename": "nobrainer-0.0.1a3-py3-none-any.whl", "has_sig": false, "md5_digest": "bea249a84e1237743d7f083e4e369df0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 51831, "upload_time": "2019-03-06T22:39:39", "upload_time_iso_8601": "2019-03-06T22:39:39.643137Z", "url": "https://files.pythonhosted.org/packages/ad/c0/91cd0c0e73d1ce8b50f3e9841a39d6f93417a72c73cd41b0f1b533a5f75e/nobrainer-0.0.1a3-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "137653a43d46bafec26ed1807274162a", "sha256": "4f87b36a62fc05e09b03ad7f06f6126f000ac88d72c9b2032c8226fc54d8248a"}, "downloads": -1, "filename": "nobrainer-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "137653a43d46bafec26ed1807274162a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 59216, "upload_time": "2020-01-11T14:51:53", "upload_time_iso_8601": "2020-01-11T14:51:53.559742Z", "url": "https://files.pythonhosted.org/packages/29/9c/6fc936c8d4aea3f4c528813f8bb97b655eac30d7801ba5b8937a09f7a502/nobrainer-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "61f88afb50c2ba0005616f0d9c72a517", "sha256": "76128ce37669ce8abaf830bebcee226462564c9cb300d9fa34adf7001ae0d416"}, "downloads": -1, "filename": "nobrainer-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "61f88afb50c2ba0005616f0d9c72a517", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 66415, "upload_time": "2020-01-12T20:44:11", "upload_time_iso_8601": "2020-01-12T20:44:11.438499Z", "url": "https://files.pythonhosted.org/packages/a2/a4/2df3134950582614be767cb88c8d845d931b6d2eff47b1041e335f6fc142/nobrainer-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.3rc0": [{"comment_text": "", "digests": {"md5": "c2e563e24eb69cc44e377fd04e5e45e8", "sha256": "7f80f007fd6afab0a1fe353b850e998037493efbac7104d383be0e6d68ab3d93"}, "downloads": -1, "filename": "nobrainer-0.0.3rc0-py3-none-any.whl", "has_sig": false, "md5_digest": "c2e563e24eb69cc44e377fd04e5e45e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 66244, "upload_time": "2020-01-11T21:54:08", "upload_time_iso_8601": "2020-01-11T21:54:08.398466Z", "url": "https://files.pythonhosted.org/packages/59/0c/f68a6ff54c0166433f72bd0fa13f80c409c115bfa878e40ef3bf6d11bba3/nobrainer-0.0.3rc0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61f88afb50c2ba0005616f0d9c72a517", "sha256": "76128ce37669ce8abaf830bebcee226462564c9cb300d9fa34adf7001ae0d416"}, "downloads": -1, "filename": "nobrainer-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "61f88afb50c2ba0005616f0d9c72a517", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 66415, "upload_time": "2020-01-12T20:44:11", "upload_time_iso_8601": "2020-01-12T20:44:11.438499Z", "url": "https://files.pythonhosted.org/packages/a2/a4/2df3134950582614be767cb88c8d845d931b6d2eff47b1041e335f6fc142/nobrainer-0.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:01 2020"}