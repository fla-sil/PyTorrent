{"info": {"author": "Alexander Shorin", "author_email": "kxepal@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "..\n.. Copyright 2018, Alexander Shorin\n..\n.. Licensed under the Apache License, Version 2.0 (the \"License\");\n.. you may not use this file except in compliance with the License.\n.. You may obtain a copy of the License at\n..\n.. http://www.apache.org/licenses/LICENSE-2.0\n..\n.. Unless required by applicable law or agreed to in writing, software\n.. distributed under the License is distributed on an \"AS IS\" BASIS,\n.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n.. See the License for the specific language governing permissions and\n.. limitations under the License.\n..\n\nSetuptools Changelog\n====================\n\nThis project is a setuptools extension which helps to generate change logs from\nfragments. This way of changelog management is conflict free, what is extremely\nhelpful for PR/MR driven workflow.\n\n\nRequirements\n------------\n\n- Python 2.7, 3.5+;\n- setuptools (31+, but the latest release is better);\n- Your project follows `Semantic Versioning`_ or uses it simplified (``X.Y``\n  version) form;\n\n\nUsage\n-----\n\n0. Add `setuptools-changelog` as development dependency to your project;\n1. Create `changelog.d` directory in your project root directory\n   (where `setup.py` is located)\n2. Create there fragments files according the changes you made. Fragments files\n   have the following format::\n\n    {name}.{type}.{ext}\n\n   Where:\n\n   - ``name``: fragment name. If it *starts* with a number and you have\n     issue tracker specified, this number will turn into issue reference\n     automatically. Otherwise there could be just some mnemonic name to\n     simplify navigation.\n\n   - ``type``: fragment type. By default, the following types are available\n\n     - Major changes:\n\n       - ``epic``: Massive epic change that completely changes underlying\n         project platform. This could be a shift to completely new base\n         library, framework, etc. Epic changes are very rare and are the reason\n         for major release.\n\n       - ``breaking``: Breaking change means changes in the project\n         **public API** which makes old code incompatible with them.\n         Incompatibility means that things were removed or their behavior had\n         changed.\n\n     - Minor changes:\n\n       - ``security``: This is an important security fix. Users must update\n         ASAP. If security fix causes breaking change, two separate changelog\n         fragments should be issued.\n\n       - ``deprecation``: Deprecations are friendly warnings about upcoming\n         breaking changes in the public API.\n\n       - ``feature``: New features brings something to project and they must be\n         available for users via public API.\n\n     - Patch changes:\n\n       - ``bug``: When something works in the way it's not expected or supposed\n         to we do a bug fix.\n\n       - ``improvement``: This could be speed optimizations, internals\n         refactoring, making code more stable etc. Improvements are never\n         changes the existed behaviour or public API.\n\n       - ``build``: Changes, related to project build routines, packaging,\n         etc.\n\n       - ``doc``: Documentation updates, clarifications, typo fixes, etc.\n\n       - ``test``: Work around project testing, test suite, CI, etc.\n\n       - ``misc``: Misc changes which doesn't suites any existed category.\n         For instance, they could be announcements about project life: new\n         committers, endorsements, etc.\n\n   - ``ext``: file extension. Currently, we support only `rst` one.\n\n3. You can always preview changelog via::\n\n      python setup.py changelog\n\n4. Once you'll be ready for release, you can update your changelog file like::\n\n      python setup.py changelog --update=CHANGELOG.rst\n\n   This command will *prepend* generated changelog to your file.\n\n5. Review your changelog file content and everything is fine commit it and\n   remove fragments::\n\n      git rm changelog.d/*\n      git commit CHANGELOG.rst changelog.d/\n\nExample configuration for ``setup.cfg`` using defaults:\n\n.. code::\n\n    [changelog]\n    changelog_fragments_path = changelog.d\n    major_changes_types =\n        epic = Epic Changes\n        breaking = Breaking Changes\n        removal = Breaking Changes\n    minor_changes_types =\n        security = Security Fixes\n        deprecation = Deprecations\n        feature = New Features\n    patch_changes_types =\n        bug = Bug Fixes\n        bugfix = Bug Fixes\n        improvement = Improvements\n        build = Build\n        doc = Documentation\n        test = Tests Suite\n        misc = Miscellaneous\n\n\nAutomatic version generation\n----------------------------\n\nIf your project follows `Semantic Versioning`_ strategy, you can achieve not\njust changelog generation, but also automatic version management depending on\nchanges it has.\n\n\nIntegration with `towncrier`_\n-----------------------------\n\nThis project was started because there are several reasons for me to not use\n`towncrier`_ for changelog management. But\n\n.. epigraph::\n\n   Why have enemies, when you can have?\n\n   -- King Arthur: Legend of the Sword\n\nInstead, we can support fragments, made for towncrier with the following\nconfig:\n\n.. code::\n\n    [changelog]\n    changelog_fragments_path = changelog.d\n    major_changes_types =\n        removal = Breaking Changes\n    minor_changes_types =\n        feature = New Features\n    patch_changes_types =\n        bugfix = Bug Fixes\n        doc = Documentation\n        misc = Miscellaneous\n    use_towncrier = true\n\nAnd that's it!\n\n\n.. _Semantic Versioning: https://semver.org/\n.. _towncrier: https://github.com/hawkowl/towncrier\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kxepal/setuptools-changelog", "keywords": "setuptools", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "setuptools-changelog", "package_url": "https://pypi.org/project/setuptools-changelog/", "platform": "", "project_url": "https://pypi.org/project/setuptools-changelog/", "project_urls": {"Homepage": "https://github.com/kxepal/setuptools-changelog"}, "release_url": "https://pypi.org/project/setuptools-changelog/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Setuptools extension to help generate change logs", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project is a setuptools extension which helps to generate change logs from\nfragments. This way of changelog management is conflict free, what is extremely\nhelpful for PR/MR driven workflow.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7, 3.5+;</li>\n<li>setuptools (31+, but the latest release is better);</li>\n<li>Your project follows <a href=\"https://semver.org/\" rel=\"nofollow\">Semantic Versioning</a> or uses it simplified (<tt>X.Y</tt>\nversion) form;</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ol>\n<li><p>Add <cite>setuptools-changelog</cite> as development dependency to your project;</p>\n</li>\n<li><p>Create <cite>changelog.d</cite> directory in your project root directory\n(where <cite>setup.py</cite> is located)</p>\n</li>\n<li><p>Create there fragments files according the changes you made. Fragments files\nhave the following format:</p>\n<pre>{name}.{type}.{ext}\n</pre>\n<p>Where:</p>\n<ul>\n<li><tt>name</tt>: fragment name. If it <em>starts</em> with a number and you have\nissue tracker specified, this number will turn into issue reference\nautomatically. Otherwise there could be just some mnemonic name to\nsimplify navigation.</li>\n<li><tt>type</tt>: fragment type. By default, the following types are available<ul>\n<li>Major changes:<ul>\n<li><tt>epic</tt>: Massive epic change that completely changes underlying\nproject platform. This could be a shift to completely new base\nlibrary, framework, etc. Epic changes are very rare and are the reason\nfor major release.</li>\n<li><tt>breaking</tt>: Breaking change means changes in the project\n<strong>public API</strong> which makes old code incompatible with them.\nIncompatibility means that things were removed or their behavior had\nchanged.</li>\n</ul>\n</li>\n<li>Minor changes:<ul>\n<li><tt>security</tt>: This is an important security fix. Users must update\nASAP. If security fix causes breaking change, two separate changelog\nfragments should be issued.</li>\n<li><tt>deprecation</tt>: Deprecations are friendly warnings about upcoming\nbreaking changes in the public API.</li>\n<li><tt>feature</tt>: New features brings something to project and they must be\navailable for users via public API.</li>\n</ul>\n</li>\n<li>Patch changes:<ul>\n<li><tt>bug</tt>: When something works in the way it\u2019s not expected or supposed\nto we do a bug fix.</li>\n<li><tt>improvement</tt>: This could be speed optimizations, internals\nrefactoring, making code more stable etc. Improvements are never\nchanges the existed behaviour or public API.</li>\n<li><tt>build</tt>: Changes, related to project build routines, packaging,\netc.</li>\n<li><tt>doc</tt>: Documentation updates, clarifications, typo fixes, etc.</li>\n<li><tt>test</tt>: Work around project testing, test suite, CI, etc.</li>\n<li><tt>misc</tt>: Misc changes which doesn\u2019t suites any existed category.\nFor instance, they could be announcements about project life: new\ncommitters, endorsements, etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><tt>ext</tt>: file extension. Currently, we support only <cite>rst</cite> one.</li>\n</ul>\n</li>\n<li><p>You can always preview changelog via:</p>\n<pre>python setup.py changelog\n</pre>\n</li>\n<li><p>Once you\u2019ll be ready for release, you can update your changelog file like:</p>\n<pre>python setup.py changelog --update=CHANGELOG.rst\n</pre>\n<p>This command will <em>prepend</em> generated changelog to your file.</p>\n</li>\n<li><p>Review your changelog file content and everything is fine commit it and\nremove fragments:</p>\n<pre>git rm changelog.d/*\ngit commit CHANGELOG.rst changelog.d/\n</pre>\n</li>\n</ol>\n<p>Example configuration for <tt>setup.cfg</tt> using defaults:</p>\n<pre>[changelog]\nchangelog_fragments_path = changelog.d\nmajor_changes_types =\n    epic = Epic Changes\n    breaking = Breaking Changes\n    removal = Breaking Changes\nminor_changes_types =\n    security = Security Fixes\n    deprecation = Deprecations\n    feature = New Features\npatch_changes_types =\n    bug = Bug Fixes\n    bugfix = Bug Fixes\n    improvement = Improvements\n    build = Build\n    doc = Documentation\n    test = Tests Suite\n    misc = Miscellaneous\n</pre>\n</div>\n<div id=\"automatic-version-generation\">\n<h2>Automatic version generation</h2>\n<p>If your project follows <a href=\"https://semver.org/\" rel=\"nofollow\">Semantic Versioning</a> strategy, you can achieve not\njust changelog generation, but also automatic version management depending on\nchanges it has.</p>\n</div>\n<div id=\"integration-with-towncrier\">\n<h2>Integration with <a href=\"https://github.com/hawkowl/towncrier\" rel=\"nofollow\">towncrier</a></h2>\n<p>This project was started because there are several reasons for me to not use\n<a href=\"https://github.com/hawkowl/towncrier\" rel=\"nofollow\">towncrier</a> for changelog management. But</p>\n<blockquote>\n<p>Why have enemies, when you can have?</p>\n<p>\u2014King Arthur: Legend of the Sword</p>\n</blockquote>\n<p>Instead, we can support fragments, made for towncrier with the following\nconfig:</p>\n<pre>[changelog]\nchangelog_fragments_path = changelog.d\nmajor_changes_types =\n    removal = Breaking Changes\nminor_changes_types =\n    feature = New Features\npatch_changes_types =\n    bugfix = Bug Fixes\n    doc = Documentation\n    misc = Miscellaneous\nuse_towncrier = true\n</pre>\n<p>And that\u2019s it!</p>\n</div>\n\n          </div>"}, "last_serial": 3971766, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0c5d6c4a4184b008f1a4b6484b70b274", "sha256": "5c2c08d7c7840767409b3702c9c6af34ab5267bcbfa366a59ff29c4bf93b2018"}, "downloads": -1, "filename": "setuptools_changelog-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c5d6c4a4184b008f1a4b6484b70b274", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 8143, "upload_time": "2018-06-17T19:35:04", "upload_time_iso_8601": "2018-06-17T19:35:04.640868Z", "url": "https://files.pythonhosted.org/packages/f4/5a/2106b49c1fe4843bb6d8a464d8c0e2b1cdf4f53558970396d687497a9d85/setuptools_changelog-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba427cb31eae70af838610fd3301e0be", "sha256": "eb73bdaf01bbd165853879044a20786947a1767549cb3d4875aed50200f013f9"}, "downloads": -1, "filename": "setuptools-changelog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ba427cb31eae70af838610fd3301e0be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24001, "upload_time": "2018-06-17T19:35:02", "upload_time_iso_8601": "2018-06-17T19:35:02.555728Z", "url": "https://files.pythonhosted.org/packages/14/7a/1be1951a38845f88affa783698e7e60c7e5fe4d301d0d271af83fcb55581/setuptools-changelog-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c5d6c4a4184b008f1a4b6484b70b274", "sha256": "5c2c08d7c7840767409b3702c9c6af34ab5267bcbfa366a59ff29c4bf93b2018"}, "downloads": -1, "filename": "setuptools_changelog-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c5d6c4a4184b008f1a4b6484b70b274", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 8143, "upload_time": "2018-06-17T19:35:04", "upload_time_iso_8601": "2018-06-17T19:35:04.640868Z", "url": "https://files.pythonhosted.org/packages/f4/5a/2106b49c1fe4843bb6d8a464d8c0e2b1cdf4f53558970396d687497a9d85/setuptools_changelog-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba427cb31eae70af838610fd3301e0be", "sha256": "eb73bdaf01bbd165853879044a20786947a1767549cb3d4875aed50200f013f9"}, "downloads": -1, "filename": "setuptools-changelog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ba427cb31eae70af838610fd3301e0be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24001, "upload_time": "2018-06-17T19:35:02", "upload_time_iso_8601": "2018-06-17T19:35:02.555728Z", "url": "https://files.pythonhosted.org/packages/14/7a/1be1951a38845f88affa783698e7e60c7e5fe4d301d0d271af83fcb55581/setuptools-changelog-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:31 2020"}