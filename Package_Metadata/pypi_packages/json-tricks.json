{"info": {"author": "Mark V", "author_email": "markv.nl.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Development Status :: 6 - Mature", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "JSON tricks (python)\n---------------------------------------\n\nThe `pyjson-tricks` package brings several pieces of functionality to python handling of json files:\n\n1. **Store and load numpy arrays** in human-readable format.\n2. **Store and load class instances** both generic and customized.\n3. **Store and load date/times** as a dictionary (including timezone).\n4. **Preserve map order** ``{}`` using ``OrderedDict``.\n5. **Allow for comments** in json files by starting lines with ``#``.\n6. Sets, complex numbers, Decimal, Fraction, enums, compression, duplicate keys, pathlib Paths ...\n\nAs well as compression and disallowing duplicate keys.\n\n* Code: https://github.com/mverleg/pyjson_tricks\n* Documentation: http://json-tricks.readthedocs.org/en/latest/\n* PIP: https://pypi.python.org/pypi/json_tricks\n\nThe 2.0 series added some of the above features and broke backward compatibility. The version 3.0 series is a more readable rewrite that also makes it easier to combine encoders, again not fully backward compatible.\n\nSeveral keys of the format ``__keyname__`` have special meanings, and more might be added in future releases.\n\nIf you're considering JSON-but-with-comments as a config file format, have a look at HJSON_, it might be more appropriate. For other purposes, keep reading!\n\nThanks for all the Github stars!\n\nInstallation and use\n---------------------------------------\n\nYou can install using\n\n.. code-block:: bash\n\n\tpip install json-tricks  # or e.g. 'json-tricks<3.0' for older versions\n\nDecoding of some data types needs the corresponding package to be installed, e.g. ``numpy`` for arrays, ``pandas`` for dataframes and ``pytz`` for timezone-aware datetimes.\n\nYou can import the usual json functions dump(s) and load(s), as well as a separate comment removal function, as follows:\n\n.. code-block:: bash\n\n\tfrom json_tricks import dump, dumps, load, loads, strip_comments\n\nThe exact signatures of these and other functions are in the documentation_.\n\n``json-tricks`` supports Python 2.7, and Python 3.4 and later, and is automatically tested on 2.7, 3.4, 3.5 and 3.6. Pypy is supported without numpy and pandas. Pandas doesn't support 3.4.\n\nFeatures\n---------------------------------------\n\nNumpy arrays\n+++++++++++++++++++++++++++++++++++++++\n\nWhen not compressed, the array is encoded in sort-of-readable and very flexible and portable format, like so:\n\n.. code-block:: python\n\n\tarr = arange(0, 10, 1, dtype=uint8).reshape((2, 5))\n\tprint(dumps({'mydata': arr}))\n\nthis yields:\n\n.. code-block:: javascript\n\n\t{\n\t\t\"mydata\": {\n\t\t\t\"dtype\": \"uint8\",\n\t\t\t\"shape\": [2, 5],\n\t\t\t\"Corder\": true,\n\t\t\t\"__ndarray__\": [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]\n\t\t}\n\t}\n\nwhich will be converted back to a numpy array when using ``json_tricks.loads``. Note that the memory order (``Corder``) is only stored in v3.1 and later and for arrays with at least 2 dimensions.\n\nAs you see, this uses the magic key ``__ndarray__``. Don't use ``__ndarray__`` as a dictionary key unless you're trying to make a numpy array (and know what you're doing).\n\nNumpy scalars are also serialized (v3.5+). They are represented by the closest python primitive type. A special representation was not feasible, because Python's json implementation serializes some numpy types as primitives, without consulting custom encoders. If you want to preserve the exact numpy type, use encode_scalars_inplace_.\n\nThere is also a compressed format. From the next major release, this will be default when using compression. For now you can use it as:\n\n.. code-block:: python\n\n    dumps(data, compression=True, properties={'ndarray_compact': True})\n\nThis compressed format encodes the array data in base64, with gzip compression for the array, unless 1) compression has little effect for that array, or 2) the whole file is already compressed. If you only want compact format for large arrays, pass the number of elements to `ndarray_compact`.\n\nExample:\n\n.. code-block:: python\n\n    data = [linspace(0, 10, 9), array([pi, exp(1)])]\n    dumps(data, compression=False, properties={'ndarray_compact': 8})\n\n    [{\n       \"__ndarray__\": \"b64.gz:H4sIAAAAAAAC/2NgQAZf7CE0iwOE5oPSIlBaEkrLQegGRShfxQEAz7QFikgAAAA=\",\n       \"dtype\": \"float64\",\n       \"shape\": [9]\n     }, {\n       \"__ndarray__\": [3.141592653589793, 2.718281828459045],\n       \"dtype\": \"float64\",\n       \"shape\": [2]\n     }]\n\nClass instances\n+++++++++++++++++++++++++++++++++++++++\n\n``json_tricks`` can serialize class instances.\n\nIf the class behaves normally (not generated dynamic, no ``__new__`` or ``__metaclass__`` magic, etc) *and* all it's attributes are serializable, then this should work by default.\n\n.. code-block:: python\n\n\t# json_tricks/test_class.py\n\tclass MyTestCls:\n\t\tdef __init__(self, **kwargs):\n\t\t\tfor k, v in kwargs.items():\n\t\t\t\tsetattr(self, k, v)\n\n\tcls_instance = MyTestCls(s='ub', dct={'7': 7})\n\n\tjson = dumps(cls_instance, indent=4)\n\tcls_instance_again = loads(json)\n\nYou'll get your instance back. Here the json looks like this:\n\n.. code-block:: javascript\n\n\t{\n\t\t\"__instance_type__\": [\n\t\t\t\"json_tricks.test_class\",\n\t\t\t\"MyTestCls\"\n\t\t],\n\t\t\"attributes\": {\n\t\t\t\"s\": \"ub\",\n\t\t\t\"dct\": {\n\t\t\t\t\"7\": 7\n\t\t\t}\n\t\t}\n\t}\n\nAs you can see, this stores the module and class name. The class must be importable from the same module when decoding (and should not have changed).\nIf it isn't, you have to manually provide a dictionary to ``cls_lookup_map`` when loading in which the class name can be looked up. Note that if the class is imported, then ``globals()`` is such a dictionary (so try ``loads(json, cls_lookup_map=glboals())``).\nAlso note that if the class is defined in the 'top' script (that you're calling directly), then this isn't a module and the import part cannot be extracted. Only the class name will be stored; it can then only be deserialized in the same script, or if you provide ``cls_lookup_map``.\n\nNote that this also works with ``slots`` without having to do anything (thanks to ``koffie``), which encodes like this (custom indentation):\n\n.. code-block:: javascript\n\n\t{\n\t\t\"__instance_type__\": [\"module.path\", \"ClassName\"],\n\t\t\"slots\": {\"slotattr\": 37},\n\t\t\"attributes\": {\"dictattr\": 42}\n\t}\n\nIf the instance doesn't serialize automatically, or if you want custom behaviour, then you can implement ``__json__encode__(self)`` and ``__json_decode__(self, **attributes)`` methods, like so:\n\n.. code-block:: python\n\n\tclass CustomEncodeCls:\n\t\tdef __init__(self):\n\t\t\tself.relevant = 42\n\t\t\tself.irrelevant = 37\n\n\t\tdef __json_encode__(self):\n\t\t\t# should return primitive, serializable types like dict, list, int, string, float...\n\t\t\treturn {'relevant': self.relevant}\n\n\t\tdef __json_decode__(self, **attrs):\n\t\t\t# should initialize all properties; note that __init__ is not called implicitly\n\t\t\tself.relevant = attrs['relevant']\n\t\t\tself.irrelevant = 12\n\nAs you've seen, this uses the magic key ``__instance_type__``. Don't use ``__instance_type__`` as a dictionary key unless you know what you're doing.\n\nDate, time, datetime and timedelta\n+++++++++++++++++++++++++++++++++++++++\n\nDate, time, datetime and timedelta objects are stored as dictionaries of \"day\", \"hour\", \"millisecond\" etc keys, for each nonzero property.\n\nTimezone name is also stored in case it is set. You'll need to have ``pytz`` installed to use timezone-aware date/times, it's not needed for naive date/times.\n\n.. code-block:: javascript\n\n\t{\n\t\t\"__datetime__\": null,\n\t\t\"year\": 1988,\n\t\t\"month\": 3,\n\t\t\"day\": 15,\n\t\t\"hour\": 8,\n\t\t\"minute\": 3,\n\t\t\"second\": 59,\n\t\t\"microsecond\": 7,\n\t\t\"tzinfo\": \"Europe/Amsterdam\"\n\t}\n\nThis approach was chosen over timestamps for readability and consistency between date and time, and over a single string to prevent parsing problems and reduce dependencies. Note that if ``primitives=True``, date/times are encoded as ISO 8601, but they won't be restored automatically.\n\nDon't use ``__date__``, ``__time__``, ``__datetime__``, ``__timedelta__`` or ``__tzinfo__`` as dictionary keys unless you know what you're doing, as they have special meaning.\n\nOrder\n+++++++++++++++++++++++++++++++++++++++\n\nGiven an ordered dictionary like this (see the tests for a longer one):\n\n.. code-block:: python\n\n\tordered = OrderedDict((\n\t\t('elephant', None),\n\t\t('chicken', None),\n\t\t('tortoise', None),\n\t))\n\nConverting to json and back will preserve the order:\n\n.. code-block:: python\n\n\tfrom json_tricks import dumps, loads\n\tjson = dumps(ordered)\n\tordered = loads(json, preserve_order=True)\n\nwhere ``preserve_order=True`` is added for emphasis; it can be left out since it's the default.\n\nAs a note on performance_, both dicts and OrderedDicts have the same scaling for getting and setting items (``O(1)``). In Python versions before 3.5, OrderedDicts were implemented in Python rather than C, so were somewhat slower; since Python 3.5 both are implemented in C. In summary, you should have no scaling problems and probably no performance problems at all, especially for 3.5 and later. Python 3.6+ preserve order of dictionaries by default making this redundant, but this is an implementation detail that should not be relied on.\n\nComments\n+++++++++++++++++++++++++++++++++++++++\n\n*Warning: in the next major version, comment parsing will be opt-in, not default anymore (for performance reasons). Update your code now to pass `ignore_comments=True` explicitly if you want comment parsing.*\n\nThis package uses ``#`` and ``//`` for comments, which seem to be the most common conventions, though only the latter is valid javascript.\n\nFor example, you could call ``loads`` on the following string::\n\n\t{ # \"comment 1\n\t\t\"hello\": \"Wor#d\", \"Bye\": \"\\\"M#rk\\\"\", \"yes\\\\\\\"\": 5,# comment\" 2\n\t\t\"quote\": \"\\\"th#t's\\\" what she said\", // comment \"3\"\n\t\t\"list\": [1, 1, \"#\", \"\\\"\", \"\\\\\", 8], \"dict\": {\"q\": 7} #\" comment 4 with quotes\n\t}\n\t// comment 5\n\nAnd it would return the de-commented version:\n\n.. code-block:: javascript\n\n\t{\n\t\t\"hello\": \"Wor#d\", \"Bye\": \"\\\"M#rk\\\"\", \"yes\\\\\\\"\": 5,\n\t\t\"quote\": \"\\\"th#t's\\\" what she said\",\n\t\t\"list\": [1, 1, \"#\", \"\\\"\", \"\\\\\", 8], \"dict\": {\"q\": 7}\n\t}\n\nSince comments aren't stored in the Python representation of the data, loading and then saving a json file will remove the comments (it also likely changes the indentation).\n\nThe implementation of comments is not particularly efficient, but it does handle all the special cases I could think of. For a few files you shouldn't notice any performance problems, but if you're reading hundreds of files, then they are presumably computer-generated, and you could consider turning comments off (``ignore_comments=False``).\n\nOther features\n+++++++++++++++++++++++++++++++++++++++\n\n* Special floats like `NaN`, `Infinity` and `-0` using the `allow_nan=True` argument (non-standard_ json, may not decode in other implementations).\n* Sets are serializable and can be loaded. By default the set json representation is sorted, to have a consistent representation.\n* Save and load complex numbers (version 3.2) with ``1+2j`` serializing as ``{'__complex__': [1, 2]}``.\n* Save and load ``Decimal`` and ``Fraction`` (including NaN, infinity, -0 for Decimal).\n* Save and load ``Enum`` (thanks to ``Jenselme``), either built-in in python3.4+, or with the enum34_ package in earlier versions. ``IntEnum`` needs encode_intenums_inplace_.\n* ``json_tricks`` allows for gzip compression using the ``compression=True`` argument (off by default).\n* ``json_tricks`` can check for duplicate keys in maps by setting ``allow_duplicates`` to False. These are `kind of allowed`_, but are handled inconsistently between json implementations. In Python, for ``dict`` and ``OrderedDict``, duplicate keys are silently overwritten.\n* Save and load ``pathlib.Path`` objects (e.g., the current path, `Path('.')`, serializes as ``{\"__pathlib__\": \".\"}``) (thanks to ``bburan``).\n\nPreserve type vs use primitive\n-------------------------------\n\nBy default, types are encoded such that they can be restored to their original type when loaded with ``json-tricks``. Example encodings in this documentation refer to that format.\n\nYou can also choose to store things as their closest primitive type (e.g. arrays and sets as lists, decimals as floats). This may be desirable if you don't care about the exact type, or you are loading the json in another language (which doesn't restore python types). It's also smaller.\n\nTo forego meta data and store primitives instead, pass ``primitives`` to ``dump(s)``. This is available in version ``3.8`` and later. Example:\n\n.. code-block:: python\n\n\tdata = [\n\t\tarange(0, 10, 1, dtype=int).reshape((2, 5)),\n\t\tdatetime(year=2017, month=1, day=19, hour=23, minute=00, second=00),\n\t\t1 + 2j,\n\t\tDecimal(42),\n\t\tFraction(1, 3),\n\t\tMyTestCls(s='ub', dct={'7': 7}),  # see later\n\t\tset(range(7)),\n\t]\n\t# Encode with metadata to preserve types when decoding\n\tprint(dumps(data))\n\n.. code-block:: javascript\n\n\t// (comments added and indenting changed)\n\t[\n\t\t// numpy array\n\t\t{\n\t\t\t\"__ndarray__\": [\n\t\t\t\t[0, 1, 2, 3, 4],\n\t\t\t\t[5, 6, 7, 8, 9]],\n\t\t\t\"dtype\": \"int64\",\n\t\t\t\"shape\": [2, 5],\n\t\t\t\"Corder\": true\n\t\t},\n\t\t// datetime (naive)\n\t\t{\n\t\t\t\"__datetime__\": null,\n\t\t\t\"year\": 2017,\n\t\t\t\"month\": 1,\n\t\t\t\"day\": 19,\n\t\t\t\"hour\": 23\n\t\t},\n\t\t// complex number\n\t\t{\n\t\t\t\"__complex__\": [1.0, 2.0]\n\t\t},\n\t\t// decimal & fraction\n\t\t{\n\t\t\t\"__decimal__\": \"42\"\n\t\t},\n\t\t{\n\t\t\t\"__fraction__\": true\n\t\t\t\"numerator\": 1,\n\t\t\t\"denominator\": 3,\n\t\t},\n\t\t// class instance\n\t\t{\n\t\t\t\"__instance_type__\": [\n\t\t\t  \"tests.test_class\",\n\t\t\t  \"MyTestCls\"\n\t\t\t],\n\t\t\t\"attributes\": {\n\t\t\t  \"s\": \"ub\",\n\t\t\t  \"dct\": {\"7\": 7}\n\t\t\t}\n\t\t},\n\t\t// set\n\t\t{\n\t\t\t\"__set__\": [0, 1, 2, 3, 4, 5, 6]\n\t\t}\n\t]\n\n.. code-block:: python\n\n\t# Encode as primitive types; more simple but loses type information\n\tprint(dumps(data, primitives=True))\n\n.. code-block:: javascript\n\n\t// (comments added and indentation changed)\n\t[\n\t\t// numpy array\n\t\t[[0, 1, 2, 3, 4],\n\t\t[5, 6, 7, 8, 9]],\n\t\t// datetime (naive)\n\t\t\"2017-01-19T23:00:00\",\n\t\t// complex number\n\t\t[1.0, 2.0],\n\t\t// decimal & fraction\n\t\t42.0,\n\t\t0.3333333333333333,\n\t\t// class instance\n\t\t{\n\t\t\t\"s\": \"ub\",\n\t\t\t\"dct\": {\"7\": 7}\n\t\t},\n\t\t// set\n\t\t[0, 1, 2, 3, 4, 5, 6]\n\t]\n\nNote that valid json is produced either way: ``json-tricks`` stores meta data as normal json, but other packages probably won't interpret it.\n\nUsage & contributions\n---------------------------------------\n\nCode is under `Revised BSD License`_ so you can use it for most purposes including commercially.\n\nContributions are very welcome! Bug reports, feature suggestions and code contributions help this project become more useful for everyone! There is a short `contribution guide`_.\n\nContributors not yet mentioned: ``janLo`` (performance boost).\n\nTests\n---------------------------------------\n\nTests are run automatically for commits to the repository for all supported versions. This is the status:\n\n.. image:: https://travis-ci.org/mverleg/pyjson_tricks.svg?branch=master\n\t:target: https://travis-ci.org/mverleg/pyjson_tricks\n\nTo run the tests manually for your version, see `this guide`_.\n\n.. _HJSON: https://github.com/hjson/hjson-py\n.. _documentation: http://json-tricks.readthedocs.org/en/latest/#main-components\n.. _stackoverflow: http://stackoverflow.com/questions/3488934/simplejson-and-numpy-array\n.. _performance: http://stackoverflow.com/a/8177061/723090\n.. _`kind of allowed`: http://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object\n.. _benchmark: https://github.com/mverleg/array_storage_benchmark\n.. _`might be added`: https://github.com/mverleg/pyjson_tricks/issues/9\n.. _encode_scalars_inplace: https://json-tricks.readthedocs.io/en/latest/#json_tricks.np_utils.encode_scalars_inplace\n.. _encode_intenums_inplace: https://json-tricks.readthedocs.io/en/latest/#json_tricks.utils.encode_intenums_inplace\n.. _enum34: https://pypi.org/project/enum34/\n.. _`this guide`: https://github.com/mverleg/pyjson_tricks/blob/master/tests/run_locally.rst\n.. _`Revised BSD License`: https://github.com/mverleg/pyjson_tricks/blob/master/LICENSE.txt\n.. _`contribution guide`: https://github.com/mverleg/pyjson_tricks/blob/master/CONTRIBUTING.txt\n.. _non-standard: https://stackoverflow.com/questions/1423081/json-left-out-infinity-and-nan-json-status-in-ecmascript\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mverleg/pyjson_tricks", "keywords": "json,numpy,OrderedDict,comments,pandas,pytz,enum,encode,decode,serialize,deserialize", "license": "Revised BSD License (LICENSE.txt)", "maintainer": "Mark V", "maintainer_email": "", "name": "json-tricks", "package_url": "https://pypi.org/project/json-tricks/", "platform": "", "project_url": "https://pypi.org/project/json-tricks/", "project_urls": {"Homepage": "https://github.com/mverleg/pyjson_tricks"}, "release_url": "https://pypi.org/project/json-tricks/3.15.2/", "requires_dist": null, "requires_python": "", "summary": "Extra features for Python's JSON: comments, order, numpy, pandas, datetimes, and many more! Simple but customizable.", "version": "3.15.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"json-tricks-python\">\n<h2>JSON tricks (python)</h2>\n<p>The <cite>pyjson-tricks</cite> package brings several pieces of functionality to python handling of json files:</p>\n<ol>\n<li><strong>Store and load numpy arrays</strong> in human-readable format.</li>\n<li><strong>Store and load class instances</strong> both generic and customized.</li>\n<li><strong>Store and load date/times</strong> as a dictionary (including timezone).</li>\n<li><strong>Preserve map order</strong> <tt>{}</tt> using <tt>OrderedDict</tt>.</li>\n<li><strong>Allow for comments</strong> in json files by starting lines with <tt>#</tt>.</li>\n<li>Sets, complex numbers, Decimal, Fraction, enums, compression, duplicate keys, pathlib Paths \u2026</li>\n</ol>\n<p>As well as compression and disallowing duplicate keys.</p>\n<ul>\n<li>Code: <a href=\"https://github.com/mverleg/pyjson_tricks\" rel=\"nofollow\">https://github.com/mverleg/pyjson_tricks</a></li>\n<li>Documentation: <a href=\"http://json-tricks.readthedocs.org/en/latest/\" rel=\"nofollow\">http://json-tricks.readthedocs.org/en/latest/</a></li>\n<li>PIP: <a href=\"https://pypi.python.org/pypi/json_tricks\" rel=\"nofollow\">https://pypi.python.org/pypi/json_tricks</a></li>\n</ul>\n<p>The 2.0 series added some of the above features and broke backward compatibility. The version 3.0 series is a more readable rewrite that also makes it easier to combine encoders, again not fully backward compatible.</p>\n<p>Several keys of the format <tt>__keyname__</tt> have special meanings, and more might be added in future releases.</p>\n<p>If you\u2019re considering JSON-but-with-comments as a config file format, have a look at <a href=\"https://github.com/hjson/hjson-py\" rel=\"nofollow\">HJSON</a>, it might be more appropriate. For other purposes, keep reading!</p>\n<p>Thanks for all the Github stars!</p>\n</div>\n<div id=\"installation-and-use\">\n<h2>Installation and use</h2>\n<p>You can install using</p>\n<pre>pip install json-tricks  <span class=\"c1\"># or e.g. 'json-tricks&lt;3.0' for older versions</span>\n</pre>\n<p>Decoding of some data types needs the corresponding package to be installed, e.g. <tt>numpy</tt> for arrays, <tt>pandas</tt> for dataframes and <tt>pytz</tt> for timezone-aware datetimes.</p>\n<p>You can import the usual json functions dump(s) and load(s), as well as a separate comment removal function, as follows:</p>\n<pre>from json_tricks import dump, dumps, load, loads, strip_comments\n</pre>\n<p>The exact signatures of these and other functions are in the <a href=\"http://json-tricks.readthedocs.org/en/latest/#main-components\" rel=\"nofollow\">documentation</a>.</p>\n<p><tt><span class=\"pre\">json-tricks</span></tt> supports Python 2.7, and Python 3.4 and later, and is automatically tested on 2.7, 3.4, 3.5 and 3.6. Pypy is supported without numpy and pandas. Pandas doesn\u2019t support 3.4.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<div id=\"numpy-arrays\">\n<h3>Numpy arrays</h3>\n<p>When not compressed, the array is encoded in sort-of-readable and very flexible and portable format, like so:</p>\n<pre><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">uint8</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s1\">'mydata'</span><span class=\"p\">:</span> <span class=\"n\">arr</span><span class=\"p\">}))</span>\n</pre>\n<p>this yields:</p>\n<pre><span class=\"p\">{</span>\n        <span class=\"s2\">\"mydata\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"dtype\"</span><span class=\"o\">:</span> <span class=\"s2\">\"uint8\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"shape\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n                <span class=\"s2\">\"Corder\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"__ndarray__\"</span><span class=\"o\">:</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]]</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>which will be converted back to a numpy array when using <tt>json_tricks.loads</tt>. Note that the memory order (<tt>Corder</tt>) is only stored in v3.1 and later and for arrays with at least 2 dimensions.</p>\n<p>As you see, this uses the magic key <tt>__ndarray__</tt>. Don\u2019t use <tt>__ndarray__</tt> as a dictionary key unless you\u2019re trying to make a numpy array (and know what you\u2019re doing).</p>\n<p>Numpy scalars are also serialized (v3.5+). They are represented by the closest python primitive type. A special representation was not feasible, because Python\u2019s json implementation serializes some numpy types as primitives, without consulting custom encoders. If you want to preserve the exact numpy type, use <a href=\"https://json-tricks.readthedocs.io/en/latest/#json_tricks.np_utils.encode_scalars_inplace\" rel=\"nofollow\">encode_scalars_inplace</a>.</p>\n<p>There is also a compressed format. From the next major release, this will be default when using compression. For now you can use it as:</p>\n<pre><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ndarray_compact'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n</pre>\n<p>This compressed format encodes the array data in base64, with gzip compression for the array, unless 1) compression has little effect for that array, or 2) the whole file is already compressed. If you only want compact format for large arrays, pass the number of elements to <cite>ndarray_compact</cite>.</p>\n<p>Example:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)])]</span>\n<span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ndarray_compact'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">})</span>\n\n<span class=\"p\">[{</span>\n   <span class=\"s2\">\"__ndarray__\"</span><span class=\"p\">:</span> <span class=\"s2\">\"b64.gz:H4sIAAAAAAAC/2NgQAZf7CE0iwOE5oPSIlBaEkrLQegGRShfxQEAz7QFikgAAAA=\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"float64\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"shape\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n <span class=\"p\">},</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"__ndarray__\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">3.141592653589793</span><span class=\"p\">,</span> <span class=\"mf\">2.718281828459045</span><span class=\"p\">],</span>\n   <span class=\"s2\">\"dtype\"</span><span class=\"p\">:</span> <span class=\"s2\">\"float64\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"shape\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n <span class=\"p\">}]</span>\n</pre>\n</div>\n<div id=\"class-instances\">\n<h3>Class instances</h3>\n<p><tt>json_tricks</tt> can serialize class instances.</p>\n<p>If the class behaves normally (not generated dynamic, no <tt>__new__</tt> or <tt>__metaclass__</tt> magic, etc) <em>and</em> all it\u2019s attributes are serializable, then this should work by default.</p>\n<pre><span class=\"c1\"># json_tricks/test_class.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyTestCls</span><span class=\"p\">:</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                        <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\n<span class=\"n\">cls_instance</span> <span class=\"o\">=</span> <span class=\"n\">MyTestCls</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"s1\">'ub'</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'7'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">})</span>\n\n<span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">cls_instance</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">cls_instance_again</span> <span class=\"o\">=</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">)</span>\n</pre>\n<p>You\u2019ll get your instance back. Here the json looks like this:</p>\n<pre><span class=\"p\">{</span>\n        <span class=\"s2\">\"__instance_type__\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"json_tricks.test_class\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"MyTestCls\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"s2\">\"attributes\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"s\"</span><span class=\"o\">:</span> <span class=\"s2\">\"ub\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"dct\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"7\"</span><span class=\"o\">:</span> <span class=\"mi\">7</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>As you can see, this stores the module and class name. The class must be importable from the same module when decoding (and should not have changed).\nIf it isn\u2019t, you have to manually provide a dictionary to <tt>cls_lookup_map</tt> when loading in which the class name can be looked up. Note that if the class is imported, then <tt>globals()</tt> is such a dictionary (so try <tt>loads(json, <span class=\"pre\">cls_lookup_map=glboals())</span></tt>).\nAlso note that if the class is defined in the \u2018top\u2019 script (that you\u2019re calling directly), then this isn\u2019t a module and the import part cannot be extracted. Only the class name will be stored; it can then only be deserialized in the same script, or if you provide <tt>cls_lookup_map</tt>.</p>\n<p>Note that this also works with <tt>slots</tt> without having to do anything (thanks to <tt>koffie</tt>), which encodes like this (custom indentation):</p>\n<pre><span class=\"p\">{</span>\n        <span class=\"s2\">\"__instance_type__\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"module.path\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ClassName\"</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"slots\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"slotattr\"</span><span class=\"o\">:</span> <span class=\"mi\">37</span><span class=\"p\">},</span>\n        <span class=\"s2\">\"attributes\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"dictattr\"</span><span class=\"o\">:</span> <span class=\"mi\">42</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If the instance doesn\u2019t serialize automatically, or if you want custom behaviour, then you can implement <tt>__json__encode__(self)</tt> and <tt>__json_decode__(self, **attributes)</tt> methods, like so:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomEncodeCls</span><span class=\"p\">:</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relevant</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">irrelevant</span> <span class=\"o\">=</span> <span class=\"mi\">37</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__json_encode__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n                <span class=\"c1\"># should return primitive, serializable types like dict, list, int, string, float...</span>\n                <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'relevant'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relevant</span><span class=\"p\">}</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__json_decode__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">attrs</span><span class=\"p\">):</span>\n                <span class=\"c1\"># should initialize all properties; note that __init__ is not called implicitly</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relevant</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'relevant'</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">irrelevant</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n</pre>\n<p>As you\u2019ve seen, this uses the magic key <tt>__instance_type__</tt>. Don\u2019t use <tt>__instance_type__</tt> as a dictionary key unless you know what you\u2019re doing.</p>\n</div>\n<div id=\"date-time-datetime-and-timedelta\">\n<h3>Date, time, datetime and timedelta</h3>\n<p>Date, time, datetime and timedelta objects are stored as dictionaries of \u201cday\u201d, \u201chour\u201d, \u201cmillisecond\u201d etc keys, for each nonzero property.</p>\n<p>Timezone name is also stored in case it is set. You\u2019ll need to have <tt>pytz</tt> installed to use timezone-aware date/times, it\u2019s not needed for naive date/times.</p>\n<pre><span class=\"p\">{</span>\n        <span class=\"s2\">\"__datetime__\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"year\"</span><span class=\"o\">:</span> <span class=\"mi\">1988</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"month\"</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"day\"</span><span class=\"o\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"hour\"</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"minute\"</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"second\"</span><span class=\"o\">:</span> <span class=\"mi\">59</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"microsecond\"</span><span class=\"o\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"tzinfo\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Europe/Amsterdam\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This approach was chosen over timestamps for readability and consistency between date and time, and over a single string to prevent parsing problems and reduce dependencies. Note that if <tt>primitives=True</tt>, date/times are encoded as ISO 8601, but they won\u2019t be restored automatically.</p>\n<p>Don\u2019t use <tt>__date__</tt>, <tt>__time__</tt>, <tt>__datetime__</tt>, <tt>__timedelta__</tt> or <tt>__tzinfo__</tt> as dictionary keys unless you know what you\u2019re doing, as they have special meaning.</p>\n</div>\n<div id=\"order\">\n<h3>Order</h3>\n<p>Given an ordered dictionary like this (see the tests for a longer one):</p>\n<pre><span class=\"n\">ordered</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">((</span>\n        <span class=\"p\">(</span><span class=\"s1\">'elephant'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'chicken'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'tortoise'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n<span class=\"p\">))</span>\n</pre>\n<p>Converting to json and back will preserve the order:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json_tricks</span> <span class=\"kn\">import</span> <span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span>\n<span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">ordered</span><span class=\"p\">)</span>\n<span class=\"n\">ordered</span> <span class=\"o\">=</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"n\">preserve_order</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>where <tt>preserve_order=True</tt> is added for emphasis; it can be left out since it\u2019s the default.</p>\n<p>As a note on <a href=\"http://stackoverflow.com/a/8177061/723090\" rel=\"nofollow\">performance</a>, both dicts and OrderedDicts have the same scaling for getting and setting items (<tt>O(1)</tt>). In Python versions before 3.5, OrderedDicts were implemented in Python rather than C, so were somewhat slower; since Python 3.5 both are implemented in C. In summary, you should have no scaling problems and probably no performance problems at all, especially for 3.5 and later. Python 3.6+ preserve order of dictionaries by default making this redundant, but this is an implementation detail that should not be relied on.</p>\n</div>\n<div id=\"comments\">\n<h3>Comments</h3>\n<p><em>Warning: in the next major version, comment parsing will be opt-in, not default anymore (for performance reasons). Update your code now to pass `ignore_comments=True` explicitly if you want comment parsing.</em></p>\n<p>This package uses <tt>#</tt> and <tt>//</tt> for comments, which seem to be the most common conventions, though only the latter is valid javascript.</p>\n<p>For example, you could call <tt>loads</tt> on the following string:</p>\n<pre>{ # \"comment 1\n        \"hello\": \"Wor#d\", \"Bye\": \"\\\"M#rk\\\"\", \"yes\\\\\\\"\": 5,# comment\" 2\n        \"quote\": \"\\\"th#t's\\\" what she said\", // comment \"3\"\n        \"list\": [1, 1, \"#\", \"\\\"\", \"\\\\\", 8], \"dict\": {\"q\": 7} #\" comment 4 with quotes\n}\n// comment 5\n</pre>\n<p>And it would return the de-commented version:</p>\n<pre><span class=\"p\">{</span>\n        <span class=\"s2\">\"hello\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Wor#d\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Bye\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\\\"M#rk\\\"\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yes\\\\\\\"\"</span><span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"quote\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\\\"th#t's\\\" what she said\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"list\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"#\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\\\"\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\\\\\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"s2\">\"dict\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"q\"</span><span class=\"o\">:</span> <span class=\"mi\">7</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Since comments aren\u2019t stored in the Python representation of the data, loading and then saving a json file will remove the comments (it also likely changes the indentation).</p>\n<p>The implementation of comments is not particularly efficient, but it does handle all the special cases I could think of. For a few files you shouldn\u2019t notice any performance problems, but if you\u2019re reading hundreds of files, then they are presumably computer-generated, and you could consider turning comments off (<tt>ignore_comments=False</tt>).</p>\n</div>\n<div id=\"other-features\">\n<h3>Other features</h3>\n<ul>\n<li>Special floats like <cite>NaN</cite>, <cite>Infinity</cite> and <cite>-0</cite> using the <cite>allow_nan=True</cite> argument (<a href=\"https://stackoverflow.com/questions/1423081/json-left-out-infinity-and-nan-json-status-in-ecmascript\" rel=\"nofollow\">non-standard</a> json, may not decode in other implementations).</li>\n<li>Sets are serializable and can be loaded. By default the set json representation is sorted, to have a consistent representation.</li>\n<li>Save and load complex numbers (version 3.2) with <tt>1+2j</tt> serializing as <tt>{'__complex__': [1, 2]}</tt>.</li>\n<li>Save and load <tt>Decimal</tt> and <tt>Fraction</tt> (including NaN, infinity, -0 for Decimal).</li>\n<li>Save and load <tt>Enum</tt> (thanks to <tt>Jenselme</tt>), either built-in in python3.4+, or with the <a href=\"https://pypi.org/project/enum34/\" rel=\"nofollow\">enum34</a> package in earlier versions. <tt>IntEnum</tt> needs <a href=\"https://json-tricks.readthedocs.io/en/latest/#json_tricks.utils.encode_intenums_inplace\" rel=\"nofollow\">encode_intenums_inplace</a>.</li>\n<li><tt>json_tricks</tt> allows for gzip compression using the <tt>compression=True</tt> argument (off by default).</li>\n<li><tt>json_tricks</tt> can check for duplicate keys in maps by setting <tt>allow_duplicates</tt> to False. These are <a href=\"http://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object\" rel=\"nofollow\">kind of allowed</a>, but are handled inconsistently between json implementations. In Python, for <tt>dict</tt> and <tt>OrderedDict</tt>, duplicate keys are silently overwritten.</li>\n<li>Save and load <tt>pathlib.Path</tt> objects (e.g., the current path, <cite>Path(\u2018.\u2019)</cite>, serializes as <tt>{\"__pathlib__\": <span class=\"pre\">\".\"}</span></tt>) (thanks to <tt>bburan</tt>).</li>\n</ul>\n</div>\n</div>\n<div id=\"preserve-type-vs-use-primitive\">\n<h2>Preserve type vs use primitive</h2>\n<p>By default, types are encoded such that they can be restored to their original type when loaded with <tt><span class=\"pre\">json-tricks</span></tt>. Example encodings in this documentation refer to that format.</p>\n<p>You can also choose to store things as their closest primitive type (e.g. arrays and sets as lists, decimals as floats). This may be desirable if you don\u2019t care about the exact type, or you are loading the json in another language (which doesn\u2019t restore python types). It\u2019s also smaller.</p>\n<p>To forego meta data and store primitives instead, pass <tt>primitives</tt> to <tt>dump(s)</tt>. This is available in version <tt>3.8</tt> and later. Example:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)),</span>\n        <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"o\">=</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"n\">minute</span><span class=\"o\">=</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"o\">=</span><span class=\"mi\">00</span><span class=\"p\">),</span>\n        <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"n\">j</span><span class=\"p\">,</span>\n        <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span>\n        <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n        <span class=\"n\">MyTestCls</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"s1\">'ub'</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'7'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">}),</span>  <span class=\"c1\"># see later</span>\n        <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n<span class=\"c1\"># Encode with metadata to preserve types when decoding</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"c1\">// (comments added and indenting changed)\n</span><span class=\"p\">[</span>\n        <span class=\"c1\">// numpy array\n</span>        <span class=\"p\">{</span>\n                <span class=\"s2\">\"__ndarray__\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]],</span>\n                <span class=\"s2\">\"dtype\"</span><span class=\"o\">:</span> <span class=\"s2\">\"int64\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"shape\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n                <span class=\"s2\">\"Corder\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n        <span class=\"p\">},</span>\n        <span class=\"c1\">// datetime (naive)\n</span>        <span class=\"p\">{</span>\n                <span class=\"s2\">\"__datetime__\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"year\"</span><span class=\"o\">:</span> <span class=\"mi\">2017</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"month\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"day\"</span><span class=\"o\">:</span> <span class=\"mi\">19</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"hour\"</span><span class=\"o\">:</span> <span class=\"mi\">23</span>\n        <span class=\"p\">},</span>\n        <span class=\"c1\">// complex number\n</span>        <span class=\"p\">{</span>\n                <span class=\"s2\">\"__complex__\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"c1\">// decimal &amp; fraction\n</span>        <span class=\"p\">{</span>\n                <span class=\"s2\">\"__decimal__\"</span><span class=\"o\">:</span> <span class=\"s2\">\"42\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n                <span class=\"s2\">\"__fraction__\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n                <span class=\"s2\">\"numerator\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"denominator\"</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"c1\">// class instance\n</span>        <span class=\"p\">{</span>\n                <span class=\"s2\">\"__instance_type__\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                  <span class=\"s2\">\"tests.test_class\"</span><span class=\"p\">,</span>\n                  <span class=\"s2\">\"MyTestCls\"</span>\n                <span class=\"p\">],</span>\n                <span class=\"s2\">\"attributes\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                  <span class=\"s2\">\"s\"</span><span class=\"o\">:</span> <span class=\"s2\">\"ub\"</span><span class=\"p\">,</span>\n                  <span class=\"s2\">\"dct\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"7\"</span><span class=\"o\">:</span> <span class=\"mi\">7</span><span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"c1\">// set\n</span>        <span class=\"p\">{</span>\n                <span class=\"s2\">\"__set__\"</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<pre><span class=\"c1\"># Encode as primitive types; more simple but loses type information</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">primitives</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"c1\">// (comments added and indentation changed)\n</span><span class=\"p\">[</span>\n        <span class=\"c1\">// numpy array\n</span>        <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]],</span>\n        <span class=\"c1\">// datetime (naive)\n</span>        <span class=\"s2\">\"2017-01-19T23:00:00\"</span><span class=\"p\">,</span>\n        <span class=\"c1\">// complex number\n</span>        <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">],</span>\n        <span class=\"c1\">// decimal &amp; fraction\n</span>        <span class=\"mf\">42.0</span><span class=\"p\">,</span>\n        <span class=\"mf\">0.3333333333333333</span><span class=\"p\">,</span>\n        <span class=\"c1\">// class instance\n</span>        <span class=\"p\">{</span>\n                <span class=\"s2\">\"s\"</span><span class=\"o\">:</span> <span class=\"s2\">\"ub\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"dct\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"7\"</span><span class=\"o\">:</span> <span class=\"mi\">7</span><span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"c1\">// set\n</span>        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Note that valid json is produced either way: <tt><span class=\"pre\">json-tricks</span></tt> stores meta data as normal json, but other packages probably won\u2019t interpret it.</p>\n</div>\n<div id=\"usage-contributions\">\n<h2>Usage &amp; contributions</h2>\n<p>Code is under <a href=\"https://github.com/mverleg/pyjson_tricks/blob/master/LICENSE.txt\" rel=\"nofollow\">Revised BSD License</a> so you can use it for most purposes including commercially.</p>\n<p>Contributions are very welcome! Bug reports, feature suggestions and code contributions help this project become more useful for everyone! There is a short <a href=\"https://github.com/mverleg/pyjson_tricks/blob/master/CONTRIBUTING.txt\" rel=\"nofollow\">contribution guide</a>.</p>\n<p>Contributors not yet mentioned: <tt>janLo</tt> (performance boost).</p>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Tests are run automatically for commits to the repository for all supported versions. This is the status:</p>\n<a href=\"https://travis-ci.org/mverleg/pyjson_tricks\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mverleg/pyjson_tricks.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bed483546210df7b785fd4b9deaea7d46a316f2a/68747470733a2f2f7472617669732d63692e6f72672f6d7665726c65672f70796a736f6e5f747269636b732e7376673f6272616e63683d6d6173746572\"></a>\n<p>To run the tests manually for your version, see <a href=\"https://github.com/mverleg/pyjson_tricks/blob/master/tests/run_locally.rst\" rel=\"nofollow\">this guide</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 7006358, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "7ca7624f795dc5ba7eb71b62e7b22389", "sha256": "969b2fe8811e102cb55a0ce2ffde5f93b60a998bd960b980c76964ec600a78e7"}, "downloads": -1, "filename": "json_tricks-1.0.tar.gz", "has_sig": false, "md5_digest": "7ca7624f795dc5ba7eb71b62e7b22389", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6305, "upload_time": "2015-11-07T02:10:19", "upload_time_iso_8601": "2015-11-07T02:10:19.711817Z", "url": "https://files.pythonhosted.org/packages/5c/41/7c8dd43bf61d269a7d3457afd02bb78aceba3cc244166970ab112716353d/json_tricks-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "091a0d4848b362156ca1141c7c170e57", "sha256": "b32fdfcab5103f7d0cd63dd4fa01f8fea463765cf3d12d784d260a6f7876b6bd"}, "downloads": -1, "filename": "json_tricks-1.1.tar.gz", "has_sig": false, "md5_digest": "091a0d4848b362156ca1141c7c170e57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7420, "upload_time": "2015-11-07T12:48:02", "upload_time_iso_8601": "2015-11-07T12:48:02.596272Z", "url": "https://files.pythonhosted.org/packages/73/99/04874ef8c6357d2f38f49d63a778e09df8b822b88039642de5e872f65b5c/json_tricks-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "b13e88ef00bba88179ffb95328db8199", "sha256": "9f0d4f95f3110feab30c3408b807ce07137116dd2227a597811018248bbaad25"}, "downloads": -1, "filename": "json_tricks-1.2.tar.gz", "has_sig": false, "md5_digest": "b13e88ef00bba88179ffb95328db8199", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7490, "upload_time": "2015-11-07T13:42:31", "upload_time_iso_8601": "2015-11-07T13:42:31.973369Z", "url": "https://files.pythonhosted.org/packages/f1/db/7d7d4db0609dc87d30f54957b4b064a29e558782a1fa110cc19ff2c48174/json_tricks-1.2.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "a829d950c1feaf7290906b545ecb67fc", "sha256": "67f6ac9b4ad86cf8cdc8de35bc7788da694a7ffca497e25578b2d5c7528a880a"}, "downloads": -1, "filename": "json_tricks-2.0.tar.gz", "has_sig": false, "md5_digest": "a829d950c1feaf7290906b545ecb67fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10236, "upload_time": "2016-02-08T14:04:36", "upload_time_iso_8601": "2016-02-08T14:04:36.874978Z", "url": "https://files.pythonhosted.org/packages/f8/01/6cc4fbaa48395ede29c87923365c51a51f7cbf55ca6530ffce6c37e3bcbc/json_tricks-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "fe9e59cac8a62abe5431e6d10d8102c6", "sha256": "c9d923ebd0ac7a7ac2b2f7becd1e41b16121f2bb1950f9333f1146df4b80e769"}, "downloads": -1, "filename": "json_tricks-2.1.tar.gz", "has_sig": false, "md5_digest": "fe9e59cac8a62abe5431e6d10d8102c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10709, "upload_time": "2016-03-13T21:26:31", "upload_time_iso_8601": "2016-03-13T21:26:31.187361Z", "url": "https://files.pythonhosted.org/packages/28/6a/355e74a57645516343cac964b2cc7d9a7cf2205c0edb0579f43780170d4f/json_tricks-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "9e5bd8d2b86d6b75db58568d8f63661e", "sha256": "95c839804a1f98b76ff8a3245dc960dfd4268c6f93ce237da1dba0766969aee0"}, "downloads": -1, "filename": "json_tricks-2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9e5bd8d2b86d6b75db58568d8f63661e", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 18261, "upload_time": "2016-07-18T06:52:49", "upload_time_iso_8601": "2016-07-18T06:52:49.656502Z", "url": "https://files.pythonhosted.org/packages/00/49/1baa833c9e8049ee6ef54d795914922b00f44d32bbea74afed7500efd5de/json_tricks-2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2625159edbdbceda37a14dfa29cf2927", "sha256": "940f1cd951ffa21dc49a4a505ca82ba6c654ea922eb9c0b90ee7a275707a0d60"}, "downloads": -1, "filename": "json_tricks-2.2.tar.gz", "has_sig": false, "md5_digest": "2625159edbdbceda37a14dfa29cf2927", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15702, "upload_time": "2016-07-18T06:52:37", "upload_time_iso_8601": "2016-07-18T06:52:37.549278Z", "url": "https://files.pythonhosted.org/packages/c7/25/17e2e0faeca7a5d85d497f4a4b4ddb6a856092393b1c619ca933c155f048/json_tricks-2.2.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "03cd3eb1c4628a443454456c8b0399fa", "sha256": "9c19bd48291dfd8be2425877ffb1238fc3ea3115476d16c17cdbe13fbe1a484e"}, "downloads": -1, "filename": "json_tricks-3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03cd3eb1c4628a443454456c8b0399fa", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 20592, "upload_time": "2016-07-18T05:30:15", "upload_time_iso_8601": "2016-07-18T05:30:15.858477Z", "url": "https://files.pythonhosted.org/packages/2b/38/9bdfded04dfd99e7a6c6322c11540620dcd4143c39f3cff58f0994df7867/json_tricks-3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7b4a2975893c3b6de6671fbf17409ac", "sha256": "3443aa41530f0e976ad6dd711ec416850dbe7a1be504a038ad36c47a04114528"}, "downloads": -1, "filename": "json_tricks-3.0.tar.gz", "has_sig": false, "md5_digest": "e7b4a2975893c3b6de6671fbf17409ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16547, "upload_time": "2016-07-18T05:30:07", "upload_time_iso_8601": "2016-07-18T05:30:07.161261Z", "url": "https://files.pythonhosted.org/packages/1b/03/b9036459805b07afec6151fb30095de2cf412c2a7ecbaae4d296ecb060ef/json_tricks-3.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "455a0e17a730bf1393dd62f9549ec3d7", "sha256": "ba4485c1c69dc1b14f8d47ab1aee43705009d2f17eaf7af5630713db4ba8d593"}, "downloads": -1, "filename": "json_tricks-3.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "455a0e17a730bf1393dd62f9549ec3d7", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 20610, "upload_time": "2016-07-18T07:10:14", "upload_time_iso_8601": "2016-07-18T07:10:14.699789Z", "url": "https://files.pythonhosted.org/packages/69/b1/b42b544af947fdf91f5b2522c28e9eae11dd7f6dad3420709b74c2066f45/json_tricks-3.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09502c5c62e4c411663a5afbfc334499", "sha256": "6ca5661cb3610b563c07213b4fda5bdaaf55332a6422ed198f46b6b98b5c5ca8"}, "downloads": -1, "filename": "json_tricks-3.0.1.tar.gz", "has_sig": false, "md5_digest": "09502c5c62e4c411663a5afbfc334499", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16507, "upload_time": "2016-07-18T07:09:33", "upload_time_iso_8601": "2016-07-18T07:09:33.824322Z", "url": "https://files.pythonhosted.org/packages/82/0c/7649c4c701b1056faecdab78b65b1403693857ffba65c1e2dedbc7d00a92/json_tricks-3.0.1.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "1ad52de3715a4c14596d9a274d6aa684", "sha256": "779b1c4b1bcd23a6667006e21d6bbcb11abf7f407fc23ff4cbccbc8e9d55fd8d"}, "downloads": -1, "filename": "json_tricks-3.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ad52de3715a4c14596d9a274d6aa684", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 20983, "upload_time": "2016-10-19T20:31:15", "upload_time_iso_8601": "2016-10-19T20:31:15.567888Z", "url": "https://files.pythonhosted.org/packages/11/51/69e7d7acfbbfe8cc42ac79b54fdbe51e1a67e4b856c096616af01c2fa2b2/json_tricks-3.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96ac4b532673395ff01c9de3587c9ebc", "sha256": "985156b910334ef1f7b149baf9dcb7fd2b068e67f7da036473d6af6efdefabd8"}, "downloads": -1, "filename": "json_tricks-3.1.0.tar.gz", "has_sig": false, "md5_digest": "96ac4b532673395ff01c9de3587c9ebc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13274, "upload_time": "2016-10-19T20:31:12", "upload_time_iso_8601": "2016-10-19T20:31:12.840976Z", "url": "https://files.pythonhosted.org/packages/b4/f3/f5b253fb44121129fe21b7191a718db0f7132a8be8eddd545459b52beb7c/json_tricks-3.1.0.tar.gz", "yanked": false}], "3.10.1": [{"comment_text": "", "digests": {"md5": "6f2a6b209ea544e342e897ffb3cff460", "sha256": "8cb15ce0ed78fd0a117ddace232e829897d201e9d0f3361dbffd07bc5f9d3e2c"}, "downloads": -1, "filename": "json_tricks-3.10.1.tar.gz", "has_sig": false, "md5_digest": "6f2a6b209ea544e342e897ffb3cff460", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19167, "upload_time": "2017-11-19T20:17:35", "upload_time_iso_8601": "2017-11-19T20:17:35.042062Z", "url": "https://files.pythonhosted.org/packages/b7/9c/2fed645226ceaec51ee5ab0198835dd7c839e727b22c583e70f604aa6904/json_tricks-3.10.1.tar.gz", "yanked": false}], "3.10.2": [{"comment_text": "", "digests": {"md5": "bcbfab80955b59cba8eba0d14fc21717", "sha256": "17ad7776a4d9b02d3be84e122de2f4f66bfc2f0483db76564e7ccb0429d740fb"}, "downloads": -1, "filename": "json_tricks-3.10.2.tar.gz", "has_sig": false, "md5_digest": "bcbfab80955b59cba8eba0d14fc21717", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19203, "upload_time": "2017-11-30T06:36:33", "upload_time_iso_8601": "2017-11-30T06:36:33.014989Z", "url": "https://files.pythonhosted.org/packages/51/55/d59b73fcb4a32d7488d4cf33049ded31b1e2eb7cb7b8664b8eac4222efa9/json_tricks-3.10.2.tar.gz", "yanked": false}], "3.11.0": [{"comment_text": "", "digests": {"md5": "a6e3cdff859c38ca6eecdd8b62498dcf", "sha256": "3ed9a9284b5452b5b8a63e02d3625ccd1f8f5cd5983ba58f65942f83d6259460"}, "downloads": -1, "filename": "json_tricks-3.11.0.tar.gz", "has_sig": false, "md5_digest": "a6e3cdff859c38ca6eecdd8b62498dcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20284, "upload_time": "2017-12-03T18:33:59", "upload_time_iso_8601": "2017-12-03T18:33:59.385146Z", "url": "https://files.pythonhosted.org/packages/90/b2/37141b404698de9f8fd44ba691c23e0533aa88b3b911b44fc26edeb3afd0/json_tricks-3.11.0.tar.gz", "yanked": false}], "3.11.2": [{"comment_text": "", "digests": {"md5": "c3ceb436b1492fe088e6ce70e625d555", "sha256": "42037f878ef3feb04c01e2fd87d16190631bbf55cee42150f07278fb6ade2a5d"}, "downloads": -1, "filename": "json_tricks-3.11.2.tar.gz", "has_sig": false, "md5_digest": "c3ceb436b1492fe088e6ce70e625d555", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33973, "upload_time": "2018-01-05T21:14:57", "upload_time_iso_8601": "2018-01-05T21:14:57.788444Z", "url": "https://files.pythonhosted.org/packages/6b/bb/c19891cd01fd4ff46da64b580dec0ebff7a4e89cc04675bcad72af51af16/json_tricks-3.11.2.tar.gz", "yanked": false}], "3.11.3": [{"comment_text": "", "digests": {"md5": "b55b72500ab234af3991b54224b9fc10", "sha256": "dda43dcc3c683972922bbb2d5a79861c8f1a8cee5f28f94d3eb96f28bdd9d4a6"}, "downloads": -1, "filename": "json_tricks-3.11.3.tar.gz", "has_sig": false, "md5_digest": "b55b72500ab234af3991b54224b9fc10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33380, "upload_time": "2018-02-01T19:38:45", "upload_time_iso_8601": "2018-02-01T19:38:45.755550Z", "url": "https://files.pythonhosted.org/packages/88/9b/e086c9c0276ce2faf5768105c02b06b73f89a53bd0a77d9b6888d382502b/json_tricks-3.11.3.tar.gz", "yanked": false}], "3.12.0": [{"comment_text": "", "digests": {"md5": "dbdb51f10016dea872eae15774d1d39c", "sha256": "59be44cf85da478baf33e37c90fd22db707c29f7badf589cc8f96c0c0ecfb5d0"}, "downloads": -1, "filename": "json_tricks-3.12.0.tar.gz", "has_sig": false, "md5_digest": "dbdb51f10016dea872eae15774d1d39c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35058, "upload_time": "2018-05-17T19:42:11", "upload_time_iso_8601": "2018-05-17T19:42:11.922704Z", "url": "https://files.pythonhosted.org/packages/58/30/3cfd0430cf11fba8a70b626b1a85a384830bf95db49f8060b9a9ee7ce4bc/json_tricks-3.12.0.tar.gz", "yanked": false}], "3.12.1": [{"comment_text": "", "digests": {"md5": "7a8ac2152fe52d8144a078d115d3bef9", "sha256": "9c01ded56150c73d909ed14305771cf1fce839b7d40f35a1ba0e62258a16d67d"}, "downloads": -1, "filename": "json_tricks-3.12.1.tar.gz", "has_sig": false, "md5_digest": "7a8ac2152fe52d8144a078d115d3bef9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35104, "upload_time": "2018-05-19T09:12:51", "upload_time_iso_8601": "2018-05-19T09:12:51.411491Z", "url": "https://files.pythonhosted.org/packages/31/b0/18fcbe765b46a405ff5dd94755fbda6f89f97c4371e68fc0d43467fd71f6/json_tricks-3.12.1.tar.gz", "yanked": false}], "3.12.2": [{"comment_text": "", "digests": {"md5": "2edf70f7603b49f339d8b5cf38c75fdd", "sha256": "232d216077411f44817532d0175012fd7e96497be7f888a0eaea4987281ccd2a"}, "downloads": -1, "filename": "json_tricks-3.12.2.tar.gz", "has_sig": false, "md5_digest": "2edf70f7603b49f339d8b5cf38c75fdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35227, "upload_time": "2018-07-12T19:24:35", "upload_time_iso_8601": "2018-07-12T19:24:35.898009Z", "url": "https://files.pythonhosted.org/packages/d0/13/5782bb30957adf7df6e375792a17123a1edc8d65c7459c465d17c0280144/json_tricks-3.12.2.tar.gz", "yanked": false}], "3.12.4": [{"comment_text": "", "digests": {"md5": "f0e9ca58c62759e7909eb337a12551fb", "sha256": "3f0c872d2decd67c8c494cd18f7f4df4f8db05a0374e7a72ec673e1391a3ccb9"}, "downloads": -1, "filename": "json_tricks-3.12.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f0e9ca58c62759e7909eb337a12551fb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29038, "upload_time": "2019-01-30T20:21:20", "upload_time_iso_8601": "2019-01-30T20:21:20.245285Z", "url": "https://files.pythonhosted.org/packages/a3/42/418d6628a59be05c6df84905a9bc1a1d4081d5737367f7b075b1d8a38ece/json_tricks-3.12.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "428060323beb2082606bba61bd3260ed", "sha256": "781d8efa4e91a37b4f6392e72704e0843994d48bba63eeca2a931203cab806ab"}, "downloads": -1, "filename": "json_tricks-3.12.4.tar.gz", "has_sig": false, "md5_digest": "428060323beb2082606bba61bd3260ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35700, "upload_time": "2019-01-30T20:21:23", "upload_time_iso_8601": "2019-01-30T20:21:23.460174Z", "url": "https://files.pythonhosted.org/packages/4f/40/d5e775295ed2f30995c36e89929394c137659060298721277502c8c1734b/json_tricks-3.12.4.tar.gz", "yanked": false}], "3.13.0": [{"comment_text": "", "digests": {"md5": "77def1150dabd4fdaf494157167ad8ec", "sha256": "20959c1072f884e9f3d763589c803588cc8766e70d4b7f08529421f196afdd10"}, "downloads": -1, "filename": "json_tricks-3.13.0.tar.gz", "has_sig": false, "md5_digest": "77def1150dabd4fdaf494157167ad8ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36461, "upload_time": "2019-03-02T23:30:35", "upload_time_iso_8601": "2019-03-02T23:30:35.870652Z", "url": "https://files.pythonhosted.org/packages/20/7d/f27e246c5e40c1ceecc31df77155952724e10f376098dd5b69dfc0aaf5e2/json_tricks-3.13.0.tar.gz", "yanked": false}], "3.13.1": [{"comment_text": "", "digests": {"md5": "e9f5f4317b0ca8eafcbf1cbdb5efdbaa", "sha256": "a613ed6ba2437e53ca15e35fc78c0763d3a6b483814b5eac07ab5e5d67c52262"}, "downloads": -1, "filename": "json_tricks-3.13.1.tar.gz", "has_sig": false, "md5_digest": "e9f5f4317b0ca8eafcbf1cbdb5efdbaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36523, "upload_time": "2019-03-24T11:28:22", "upload_time_iso_8601": "2019-03-24T11:28:22.445069Z", "url": "https://files.pythonhosted.org/packages/2e/63/f048ac8e95b475b8fa1e1ef7c3e1ca3f15e5fe32bf2c179f3ec2c67c8834/json_tricks-3.13.1.tar.gz", "yanked": false}], "3.13.2": [{"comment_text": "", "digests": {"md5": "42ddeef872f48b8b4dfc9435797d4a39", "sha256": "68be4bd6f524243e544cf9e86cf281454b12ba3b9aacdae106c1331f69daecce"}, "downloads": -1, "filename": "json_tricks-3.13.2-py3.6.egg", "has_sig": false, "md5_digest": "42ddeef872f48b8b4dfc9435797d4a39", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 45122, "upload_time": "2019-10-26T12:06:15", "upload_time_iso_8601": "2019-10-26T12:06:15.661942Z", "url": "https://files.pythonhosted.org/packages/9a/84/87f8730e838efb62f776ac104cc09ab3760ea13bd47446889c1ee9a71d73/json_tricks-3.13.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "851b7a34da3ebc83852bd96b759ec96f", "sha256": "2fd0d1aa2bff880120164527575dc11bba773a7edece918c54a4c14fd96be53f"}, "downloads": -1, "filename": "json_tricks-3.13.2.tar.gz", "has_sig": false, "md5_digest": "851b7a34da3ebc83852bd96b759ec96f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20558, "upload_time": "2019-08-11T10:45:40", "upload_time_iso_8601": "2019-08-11T10:45:40.539233Z", "url": "https://files.pythonhosted.org/packages/12/bd/e7ca5e165237e3564abde5ffa4d6ec68d0ee8ca9c2e667662aefde94f99a/json_tricks-3.13.2.tar.gz", "yanked": false}], "3.13.4": [{"comment_text": "", "digests": {"md5": "bbc07bc5c0be0f9f4eb893793a3b3bcd", "sha256": "1cd93ea3b9279a93e664aa4295a45b1d416905d155bdba106740e2ef6f38774f"}, "downloads": -1, "filename": "json_tricks-3.13.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "bbc07bc5c0be0f9f4eb893793a3b3bcd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23856, "upload_time": "2019-10-26T12:43:51", "upload_time_iso_8601": "2019-10-26T12:43:51.296181Z", "url": "https://files.pythonhosted.org/packages/00/a7/17751d266ef635c08f2a609446eadc8f28818d536154fa4899610e1f7bfc/json_tricks-3.13.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5883e8298dea2d8e397b932c8a4bb4e", "sha256": "9f63f275de0b38ef4a535a8205bef9cbeef9aa509f5df9e661985b7cb18c9b94"}, "downloads": -1, "filename": "json_tricks-3.13.4.tar.gz", "has_sig": true, "md5_digest": "d5883e8298dea2d8e397b932c8a4bb4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21407, "upload_time": "2019-10-26T12:43:53", "upload_time_iso_8601": "2019-10-26T12:43:53.573155Z", "url": "https://files.pythonhosted.org/packages/e9/76/838bdb784b43c3d490baddeb8b23cfd5b510fc5803abedf547e00dae7682/json_tricks-3.13.4.tar.gz", "yanked": false}], "3.13.5": [{"comment_text": "", "digests": {"md5": "89da25973be95c7c9d792ae91684d004", "sha256": "25b8d70a02ba2dded9c259651c8e9faed39639612336f440381802ed57f6424d"}, "downloads": -1, "filename": "json_tricks-3.13.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "89da25973be95c7c9d792ae91684d004", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23856, "upload_time": "2019-11-26T21:53:13", "upload_time_iso_8601": "2019-11-26T21:53:13.707507Z", "url": "https://files.pythonhosted.org/packages/59/f1/05d51636eca934ae3488f83827c38dcccc178dcd26dbe7dfdf1e526c1521/json_tricks-3.13.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a76783e8661f44a4b281122d9df4c4b", "sha256": "803f41dcc25690f2655317ebe95e634e30a63cd98b3262ac3f0e2a1149642afa"}, "downloads": -1, "filename": "json_tricks-3.13.5.tar.gz", "has_sig": true, "md5_digest": "0a76783e8661f44a4b281122d9df4c4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21382, "upload_time": "2019-11-26T21:53:17", "upload_time_iso_8601": "2019-11-26T21:53:17.081372Z", "url": "https://files.pythonhosted.org/packages/31/13/1fc97903f0a2ee5d8263a01b624c087cac34b12391c08b7a8e4676d0abaa/json_tricks-3.13.5.tar.gz", "yanked": false}], "3.13.6": [{"comment_text": "", "digests": {"md5": "4268cf595a6dff905c4944e4be1996b5", "sha256": "e7cf3710bad15da0b76662fcc58900030172d3f2ce964ab286aa8553f5d784a9"}, "downloads": -1, "filename": "json_tricks-3.13.6-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4268cf595a6dff905c4944e4be1996b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23855, "upload_time": "2020-02-04T20:15:50", "upload_time_iso_8601": "2020-02-04T20:15:50.236214Z", "url": "https://files.pythonhosted.org/packages/41/48/bde6340551be025cdbeb9b5bc7e99f9ed551221e445b780f3fed820da846/json_tricks-3.13.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd6e29527cbcba0517e29cdd95d0992d", "sha256": "e8e409fb27b2b05ca1e0065ff1e343624a8041082531bc41a501aca9a03b3186"}, "downloads": -1, "filename": "json_tricks-3.13.6.tar.gz", "has_sig": true, "md5_digest": "bd6e29527cbcba0517e29cdd95d0992d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21397, "upload_time": "2020-02-04T20:15:53", "upload_time_iso_8601": "2020-02-04T20:15:53.013369Z", "url": "https://files.pythonhosted.org/packages/5c/9a/e09eb6bf8ae4f3eabe0eec6b10a34cc097d9a8404489e29fc65bce353e72/json_tricks-3.13.6.tar.gz", "yanked": false}], "3.14.0": [{"comment_text": "", "digests": {"md5": "b929f81a505a8f84a3eb4ef4c3045831", "sha256": "b2629022b7bb00606925739a545ec71e227c1c57262956800186de9e4e171cec"}, "downloads": -1, "filename": "json_tricks-3.14.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "b929f81a505a8f84a3eb4ef4c3045831", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24035, "upload_time": "2020-02-18T21:53:03", "upload_time_iso_8601": "2020-02-18T21:53:03.586789Z", "url": "https://files.pythonhosted.org/packages/f9/4f/5d8187ea30525e7a6177b5c5ea890d3174abb6aea728341ab23b3bd341fc/json_tricks-3.14.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f7acd9e868df10e27b3f28d4b7f018f", "sha256": "628599394a482b6aaaf352e2be2215c95142c9e271d4ef2b0559e8125a92aa08"}, "downloads": -1, "filename": "json_tricks-3.14.0.tar.gz", "has_sig": true, "md5_digest": "0f7acd9e868df10e27b3f28d4b7f018f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21572, "upload_time": "2020-02-18T21:53:06", "upload_time_iso_8601": "2020-02-18T21:53:06.472789Z", "url": "https://files.pythonhosted.org/packages/be/05/895ef50d8d9882e8030005103a205b2b5f169721ac5b3f265847da07729f/json_tricks-3.14.0.tar.gz", "yanked": false}], "3.15.0": [{"comment_text": "", "digests": {"md5": "b24dd2bbcc155fff74cc3b9ed6604ce6", "sha256": "0cbb745fbb51815b5265f63fec55d30264dd484fb43343b7d42ce98a6b045d2b"}, "downloads": -1, "filename": "json_tricks-3.15.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "b24dd2bbcc155fff74cc3b9ed6604ce6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25894, "upload_time": "2020-04-05T21:02:00", "upload_time_iso_8601": "2020-04-05T21:02:00.679252Z", "url": "https://files.pythonhosted.org/packages/20/dd/3645bf1d06451a7717f1624cbab13d42a86f51c81d7262e65291ddea63db/json_tricks-3.15.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf2e2420f542ba3b587f41d50f45664a", "sha256": "a0d2a772ed008ae52f8320da0a1a390734cedc58c5296df9ac1963debf3be5d4"}, "downloads": -1, "filename": "json_tricks-3.15.0.tar.gz", "has_sig": true, "md5_digest": "bf2e2420f542ba3b587f41d50f45664a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23340, "upload_time": "2020-04-05T21:02:02", "upload_time_iso_8601": "2020-04-05T21:02:02.891120Z", "url": "https://files.pythonhosted.org/packages/72/40/9d45446b725e0ef2e93c34e9543f70692eff59da681365e18cf6a76dfe5d/json_tricks-3.15.0.tar.gz", "yanked": false}], "3.15.1": [{"comment_text": "", "digests": {"md5": "7aa9c2c089689dd77291f82260d4a5bb", "sha256": "0ee3f30b7a3577c327a6d3647723487926d02cb732f69fc95d16c976345c55c1"}, "downloads": -1, "filename": "json_tricks-3.15.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "7aa9c2c089689dd77291f82260d4a5bb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26195, "upload_time": "2020-04-09T18:11:28", "upload_time_iso_8601": "2020-04-09T18:11:28.511127Z", "url": "https://files.pythonhosted.org/packages/49/bc/a37115595f889357418863671b4d3dbc6fb6451763e81e2abc3417a2d475/json_tricks-3.15.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49accead63e49f31bf4b1b0e8141a5ae", "sha256": "3f1182a4985f3c3398d0cd0a5821cbe002e246e9687083849f92ac6fc330b89f"}, "downloads": -1, "filename": "json_tricks-3.15.1.tar.gz", "has_sig": true, "md5_digest": "49accead63e49f31bf4b1b0e8141a5ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23506, "upload_time": "2020-04-09T18:11:30", "upload_time_iso_8601": "2020-04-09T18:11:30.938454Z", "url": "https://files.pythonhosted.org/packages/6f/87/9a50f5736416e4567941ee2780814d955aa8b3b0d316249fecd74ff608f4/json_tricks-3.15.1.tar.gz", "yanked": false}], "3.15.2": [{"comment_text": "", "digests": {"md5": "628c4c2d3e917e54f9fb1c5f4577dd99", "sha256": "9031ffe656c410cc59b1f8f86b3466f73e22541b28e72f016ebe63142a737aa1"}, "downloads": -1, "filename": "json_tricks-3.15.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "628c4c2d3e917e54f9fb1c5f4577dd99", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26387, "upload_time": "2020-04-12T21:20:01", "upload_time_iso_8601": "2020-04-12T21:20:01.455416Z", "url": "https://files.pythonhosted.org/packages/5f/09/603c6d30babd527df4851696ebeddce4b6a0bc6468f143b39094c97cd830/json_tricks-3.15.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db150f4d0627f0db984c0001553b35f5", "sha256": "0b96004fef3e95261af5fc26580d6e546bdc257bb690dfb3709d317366be9d02"}, "downloads": -1, "filename": "json_tricks-3.15.2.tar.gz", "has_sig": true, "md5_digest": "db150f4d0627f0db984c0001553b35f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23682, "upload_time": "2020-04-12T21:20:03", "upload_time_iso_8601": "2020-04-12T21:20:03.764531Z", "url": "https://files.pythonhosted.org/packages/26/fc/08d2d68018c75c04d89287bb3b0861adaa3defd95c37276e65ff6dd88e8b/json_tricks-3.15.2.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "675eca264ece1590740fbff3774046d2", "sha256": "92bbb0e7de3c2543be8f39393ba58d4fd4cbdd1b27a65c92ee23dbb7fab6b0d8"}, "downloads": -1, "filename": "json_tricks-3.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "675eca264ece1590740fbff3774046d2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 21373, "upload_time": "2016-10-19T21:35:17", "upload_time_iso_8601": "2016-10-19T21:35:17.292316Z", "url": "https://files.pythonhosted.org/packages/bd/3d/d570ffba0233555b9debd100485423d1bf17e3e0be7fd84e4f078bf36958/json_tricks-3.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "821cdb75417e19413f79c753c9bb536a", "sha256": "e004d9de81c225ad46eee30b74ee232139dd42c064fcc4bb3cf12310b6f71ff6"}, "downloads": -1, "filename": "json_tricks-3.2.0.tar.gz", "has_sig": false, "md5_digest": "821cdb75417e19413f79c753c9bb536a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13646, "upload_time": "2016-10-19T21:35:14", "upload_time_iso_8601": "2016-10-19T21:35:14.941155Z", "url": "https://files.pythonhosted.org/packages/d0/ef/434d18739f9bbfce46f0b5b22d771f816d6f06ae1ebecf1da4d0e7c8c410/json_tricks-3.2.0.tar.gz", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "318d52a33e650551cfcf599ac2175fd3", "sha256": "1367d763921191f226d439bab14d86b522bde7fa59bbaabf99624886a5524418"}, "downloads": -1, "filename": "json_tricks-3.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "318d52a33e650551cfcf599ac2175fd3", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 21669, "upload_time": "2016-11-07T14:08:43", "upload_time_iso_8601": "2016-11-07T14:08:43.785359Z", "url": "https://files.pythonhosted.org/packages/8d/d8/442caea70ab39dd075d8e82d5a36c9a348115b83bb71052dd7790d97127f/json_tricks-3.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f45e8f818f2eb93c1f8a34e2d8637c2", "sha256": "5e463340e3128abc465d1b6d3d3f5179b3169f481a31ecdd452cb6a7fee709c5"}, "downloads": -1, "filename": "json_tricks-3.3.0.tar.gz", "has_sig": false, "md5_digest": "6f45e8f818f2eb93c1f8a34e2d8637c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13810, "upload_time": "2016-11-07T14:08:41", "upload_time_iso_8601": "2016-11-07T14:08:41.638491Z", "url": "https://files.pythonhosted.org/packages/60/87/9abe781a5049260dfa6196ac62ebd5995ca3d1aff3b16f4d5b122c149a75/json_tricks-3.3.0.tar.gz", "yanked": false}], "3.4.0": [{"comment_text": "", "digests": {"md5": "c2175d831bc5beadb9a99a1f74861e4d", "sha256": "c248e983edfceeca53b9a35cc728bb82999afd9f93195ed884a7378dd41a75ad"}, "downloads": -1, "filename": "json_tricks-3.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2175d831bc5beadb9a99a1f74861e4d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 21997, "upload_time": "2016-11-07T17:18:51", "upload_time_iso_8601": "2016-11-07T17:18:51.764997Z", "url": "https://files.pythonhosted.org/packages/7f/71/21df4d4b409f71bb31b3d1b98f821bf5bb8ca5102f747ef1b5d07c59ca05/json_tricks-3.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c1668c53a841d4d8023476e84a08b6c", "sha256": "e86f2daff116d31f442144bd9a29c04eb6e801e2bf5c26ed4a43b371e17d999d"}, "downloads": -1, "filename": "json_tricks-3.4.0.tar.gz", "has_sig": false, "md5_digest": "3c1668c53a841d4d8023476e84a08b6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14024, "upload_time": "2016-11-07T17:18:48", "upload_time_iso_8601": "2016-11-07T17:18:48.776824Z", "url": "https://files.pythonhosted.org/packages/81/e7/c6593722100b25c5ba6fae2c57ec936494edbd7b39a0efab4a053d9a84d8/json_tricks-3.4.0.tar.gz", "yanked": false}], "3.4.1": [{"comment_text": "", "digests": {"md5": "236aedd60f43f8054e348897564b4715", "sha256": "4ead44a97e209067c439cebf857c03b482dd31f0ca1c70a7e46b06391deea6a9"}, "downloads": -1, "filename": "json_tricks-3.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "236aedd60f43f8054e348897564b4715", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 22209, "upload_time": "2016-11-07T21:28:15", "upload_time_iso_8601": "2016-11-07T21:28:15.142845Z", "url": "https://files.pythonhosted.org/packages/f8/89/ba7730cf23d3e6f0e7b4496a1f3935f6fa190275333580271ae52cfa7c8c/json_tricks-3.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a252c73c8432bd9969aa65622bacfe57", "sha256": "181cf579315d418279a4d0497a5c7b37060a1cbd7050b79dbdce9160a0a3f498"}, "downloads": -1, "filename": "json_tricks-3.4.1.tar.gz", "has_sig": false, "md5_digest": "a252c73c8432bd9969aa65622bacfe57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14208, "upload_time": "2016-11-07T21:28:12", "upload_time_iso_8601": "2016-11-07T21:28:12.294654Z", "url": "https://files.pythonhosted.org/packages/ba/f1/701733754c71ae1c5ec677424f77f57517ff47852e11761bc7caa923251e/json_tricks-3.4.1.tar.gz", "yanked": false}], "3.4.2": [{"comment_text": "", "digests": {"md5": "0112f675d7fcd301a174c60339c6ffe7", "sha256": "932eef19815768ae9b30908fe997399876ed64d27b52b76463349ffe8b4eaa8d"}, "downloads": -1, "filename": "json_tricks-3.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0112f675d7fcd301a174c60339c6ffe7", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 22776, "upload_time": "2016-11-08T13:09:34", "upload_time_iso_8601": "2016-11-08T13:09:34.197452Z", "url": "https://files.pythonhosted.org/packages/cf/99/d63936c0795cac4af18be818aef43fd3b3b1c9da714354b606d8acac0a85/json_tricks-3.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "167753d329722aa45971d683054f680c", "sha256": "16422f10c7e32053ed4189675e97190a55bd196927e2aa0bd70012e772b4d291"}, "downloads": -1, "filename": "json_tricks-3.4.2.tar.gz", "has_sig": false, "md5_digest": "167753d329722aa45971d683054f680c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14713, "upload_time": "2016-11-08T13:09:31", "upload_time_iso_8601": "2016-11-08T13:09:31.431847Z", "url": "https://files.pythonhosted.org/packages/a4/af/209d3dc9572b9f1ed0f53ea1e4ca4a39ab273f236e750cdfbc7e8c9531bd/json_tricks-3.4.2.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "30c5b97c523b6170872a6c4d179bf62b", "sha256": "daa516c50d47ff8a3d1ee15b3329062570fc056e4fcf0ae9769433f6d2963569"}, "downloads": -1, "filename": "json_tricks-3.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "30c5b97c523b6170872a6c4d179bf62b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 24926, "upload_time": "2016-11-30T14:51:07", "upload_time_iso_8601": "2016-11-30T14:51:07.104936Z", "url": "https://files.pythonhosted.org/packages/c7/11/84126a6847bfd96ca8b0f30e9d9eb1f411e6eb60537195cdd381a437202b/json_tricks-3.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3eec903ca3a07ff317af62ac8175d61", "sha256": "c9810d65dff509d452d599717519b8ae67234a484d56166e9a241d40bb9ded93"}, "downloads": -1, "filename": "json_tricks-3.5.0.tar.gz", "has_sig": false, "md5_digest": "f3eec903ca3a07ff317af62ac8175d61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16286, "upload_time": "2016-11-30T14:51:04", "upload_time_iso_8601": "2016-11-30T14:51:04.524865Z", "url": "https://files.pythonhosted.org/packages/5e/a7/520b056f57cf99c04cd4bf5672aa52fdef09f87b4054fd320edf8e902a89/json_tricks-3.5.0.tar.gz", "yanked": false}], "3.6.0": [{"comment_text": "", "digests": {"md5": "9e88c25af1ce39e37728733df6d6db13", "sha256": "b73746b6e0eec75872087115f5de37b61d8c0d253aa8832f0f503122366dfa47"}, "downloads": -1, "filename": "json_tricks-3.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9e88c25af1ce39e37728733df6d6db13", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 25858, "upload_time": "2016-11-30T16:52:23", "upload_time_iso_8601": "2016-11-30T16:52:23.531055Z", "url": "https://files.pythonhosted.org/packages/f2/69/441eb69ff07d9331d55aace727734541636d5393ee5123ad14e78f41c2f7/json_tricks-3.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef75013afd6313873ec28344fea09f8d", "sha256": "c4f3f2326a337d947dcb961d60898350986d72df77abc5608c93280674167c0a"}, "downloads": -1, "filename": "json_tricks-3.6.0.tar.gz", "has_sig": false, "md5_digest": "ef75013afd6313873ec28344fea09f8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16916, "upload_time": "2016-11-30T16:52:20", "upload_time_iso_8601": "2016-11-30T16:52:20.794976Z", "url": "https://files.pythonhosted.org/packages/7f/74/cad33f3319b2f6e1f9fa25982152654a18bd9c9af19d7faf003bbc9dd718/json_tricks-3.6.0.tar.gz", "yanked": false}], "3.7.0": [{"comment_text": "", "digests": {"md5": "5f605ba1f5a295a06f06f2a330ad0926", "sha256": "9796c7af3360edbcc0b12673520b83de64d249713a003f9db710603c1cc2793d"}, "downloads": -1, "filename": "json_tricks-3.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f605ba1f5a295a06f06f2a330ad0926", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 26338, "upload_time": "2017-01-19T14:26:28", "upload_time_iso_8601": "2017-01-19T14:26:28.325142Z", "url": "https://files.pythonhosted.org/packages/55/0f/03f8f7f70aae9e1559398349da7683dae931ea68b98a1cec831cc1cfb0a0/json_tricks-3.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd0d47dd90499bd907dd2430583be157", "sha256": "7093b260f51e00707d435474a3956d216b63d8ee0689f0f448292c5ad26f37a0"}, "downloads": -1, "filename": "json_tricks-3.7.0.tar.gz", "has_sig": false, "md5_digest": "dd0d47dd90499bd907dd2430583be157", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14109, "upload_time": "2017-01-19T14:26:25", "upload_time_iso_8601": "2017-01-19T14:26:25.736036Z", "url": "https://files.pythonhosted.org/packages/73/3c/865d14eaeda372949e1f2f05e0bbd0f033ddca3e295e99b3043339790a06/json_tricks-3.7.0.tar.gz", "yanked": false}], "3.8.0": [{"comment_text": "", "digests": {"md5": "63cd7ef03f146ef624a9bc730247567f", "sha256": "2cd0cae1ee0c074dcaa2e3ef4587ff70a5624e120f2c85b81c73f065f611980c"}, "downloads": -1, "filename": "json_tricks-3.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63cd7ef03f146ef624a9bc730247567f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 24064, "upload_time": "2017-01-20T08:36:36", "upload_time_iso_8601": "2017-01-20T08:36:36.653817Z", "url": "https://files.pythonhosted.org/packages/56/20/1380cec0c70f18bbb81f5e60311883a83a43c4ac47c7db32c92d67247076/json_tricks-3.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ee169485aa8a5ee3e54a08c8fa63c43", "sha256": "6313c297563a8b8a1bfdc106c0c09f96234e0b22aa17c3230eea0eb444da93dd"}, "downloads": -1, "filename": "json_tricks-3.8.0.tar.gz", "has_sig": false, "md5_digest": "3ee169485aa8a5ee3e54a08c8fa63c43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16985, "upload_time": "2017-01-20T08:36:34", "upload_time_iso_8601": "2017-01-20T08:36:34.188685Z", "url": "https://files.pythonhosted.org/packages/15/e4/d8e6477e00efda9848f86f3f28df36fd557fa12786016598e9b4dc9a4ff2/json_tricks-3.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "628c4c2d3e917e54f9fb1c5f4577dd99", "sha256": "9031ffe656c410cc59b1f8f86b3466f73e22541b28e72f016ebe63142a737aa1"}, "downloads": -1, "filename": "json_tricks-3.15.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "628c4c2d3e917e54f9fb1c5f4577dd99", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26387, "upload_time": "2020-04-12T21:20:01", "upload_time_iso_8601": "2020-04-12T21:20:01.455416Z", "url": "https://files.pythonhosted.org/packages/5f/09/603c6d30babd527df4851696ebeddce4b6a0bc6468f143b39094c97cd830/json_tricks-3.15.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db150f4d0627f0db984c0001553b35f5", "sha256": "0b96004fef3e95261af5fc26580d6e546bdc257bb690dfb3709d317366be9d02"}, "downloads": -1, "filename": "json_tricks-3.15.2.tar.gz", "has_sig": true, "md5_digest": "db150f4d0627f0db984c0001553b35f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23682, "upload_time": "2020-04-12T21:20:03", "upload_time_iso_8601": "2020-04-12T21:20:03.764531Z", "url": "https://files.pythonhosted.org/packages/26/fc/08d2d68018c75c04d89287bb3b0861adaa3defd95c37276e65ff6dd88e8b/json_tricks-3.15.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:34 2020"}