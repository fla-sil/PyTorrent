{"info": {"author": "Matthew Barlowe", "author_email": "matt@barloweanalytics.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# `nba_parser`\n\nThis will be a repository where I store all my scripts and tests for compiling and calculating\nNBA game data from play by play dataframe objects.\n\nThe main hook of the `nba_parser` will the the `PbP` class that will take a play\nby play Pandas dataframe either as the direct output from my [nba_scraper](https://github.com/mcbarlowe/nba_scraper)\nor as a Pandas dataframe created from the csv output of the `nba_scraper` saved\nto file.\n\n# Player Stats\n\nPlayer stats can be calculated from a play by play dataframe with just a few\nlines of code.\n\n```python\nimport nba_scraper.nba_scraper as ns\nimport nba_parser as npar\n\ngame_df = ns.scrape_game([20700233])\npbp = npar.PbP(game_df)\nplayer_stats = pbp.playerbygamestats()\n\n#can also derive single possessions for RAPM calculations\n\nrapm_shifts = pbp.rapm_possessions()\n```\n\nWhich produces a dataframe containing the stats of field goals made, field goals attempted,\nthree points made, three points attempted, free throws made, free throws attempted,\nsteals, turnovers, blocks, personal fouls, minutes played(toc), offensive rebounds, possessions\nand defensive rebounds.\n\n# Team Stats\n\nTeam stats are called very similar to player stats.\n\n```python\nimport nba_scraper.nba_scraper as ns\nimport nba_parser as npar\n\ngame_df = ns.scrape_game([20700233])\npbp = npar.PbP(game_df)\nteam_stats = pbp.teambygamestats()\n```\n\nThe team stats that will be calculation are field goals made, field goals attempted,\nthree points made, three points attempted, free throws made, free throws attempted,\nsteals, turnovers, blocks, personal fouls, minutes played(toc), offensive rebounds, possessions,\nhome team, winning team, fouls drawn, shots blocked, total points for, total points against,\nand defensive rebounds.\n\n# Team Totals\n\nI've grouped together other stat calculations that work better with larger sample sizes.\nThis class takes a list of outputs from PbP.teambygamestats() but really it could take a\nlist of dataframes that are the same structure as that method output. Here's an example\nof how it could work in conjunction with `nba_scraper`. I suggest writing the pbp returns to file and then importing them as the `nba_scraper` could time out due to the NBA api timing out from being hit too many times.\n\n\n```python\nimport nba_scraper.nba_scraper as ns\nimport nba_parser as npar\n\ntbg_dfs = []\nfor game_id in range(20700001, 20700010):\n    game_df = ns.scrape_game([game_id])\n    pbp = np.PbP(game_df)\n    team_stats = pbp.teambygamestats()\n    tbg_dfs.append(team_stats)\n\nteam_totals = npar.TeamTotals(tbg_dfs)\n\n#produce a dataframe of eFG%, TS%, TOV%, OREB%, FT/FGA, Opponent eFG%,\n#Opponent TOV%, DREB%, Opponent FT/FGA, along with summing the other\n#stats produced by the teambygamestats() method to allow further\n#calculations\n\nteam_adv_stats = team_totals.team_advanced_stats()\n\n\n#to calculate a RAPM regression for teams use this method\n\nteam_rapm_df = team_totals.team_rapm_results()\n```\n\n# Player Totals\n\nLike with TeamTotals i've grouped player stat calculations that work better\nwith a larger sample size into its own class. A lot of the hooks are similar\nexcept for the RAPM calculation which is a static method due to the time\nto calculate player RAPM shifts is much longer than team shifts so its\nbest to have them precalculated before attempting a RAPM regression to reduce time.\n\n\n```python\nimport nba_scraper.nba_scraper as ns\nimport nba_parser as npar\n\npbg_dfs = []\npbp_objects = []\nfor game_id in range(20700001, 2070010):\n    game_df = ns.scrape_game([game_id])\n    pbp = np.PbP(game_df)\n    pbp_objects.append(pbp)\n    player_stats = pbp.playerbygamestats()\n    pbg_dfs.append(player_stats)\n\nplayer_totals = npar.PlayerTotals(pbg_dfs)\n\n#produce a dataframe of eFG%, TS%, TOV%, OREB%, AST%, DREB%,\n#STL%, BLK%, USG%, along with summing the other\n#stats produced by the playerbygamestats() method to allow further\n#calculations\n\nplayer_adv_stats = player_totals.player_advanced_stats()\n\n\n#to calculate a RAPM regression for players first have to calculate\n#RAPM possessions from the list of PbP objects we collected above\n\nrapm_possession = pd.concat([x.rapm_possessions() for x in pbp_objects])\n\nplayer_rapm_df = npar.PlayerTotals.player_rapm_results(rapm_possession)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mcbarlowe/nba_parser", "keywords": "basketball,NBA", "license": "GNU General Public License v3.0", "maintainer": "", "maintainer_email": "", "name": "nba-parser", "package_url": "https://pypi.org/project/nba-parser/", "platform": "", "project_url": "https://pypi.org/project/nba-parser/", "project_urls": {"Homepage": "https://github.com/mcbarlowe/nba_parser"}, "release_url": "https://pypi.org/project/nba-parser/0.2/", "requires_dist": null, "requires_python": "", "summary": "python package to clean up ETL functions using nba_scraper output as input", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>nba_parser</code></h1>\n<p>This will be a repository where I store all my scripts and tests for compiling and calculating\nNBA game data from play by play dataframe objects.</p>\n<p>The main hook of the <code>nba_parser</code> will the the <code>PbP</code> class that will take a play\nby play Pandas dataframe either as the direct output from my <a href=\"https://github.com/mcbarlowe/nba_scraper\" rel=\"nofollow\">nba_scraper</a>\nor as a Pandas dataframe created from the csv output of the <code>nba_scraper</code> saved\nto file.</p>\n<h1>Player Stats</h1>\n<p>Player stats can be calculated from a play by play dataframe with just a few\nlines of code.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nba_scraper.nba_scraper</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nba_parser</span> <span class=\"k\">as</span> <span class=\"nn\">npar</span>\n\n<span class=\"n\">game_df</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">scrape_game</span><span class=\"p\">([</span><span class=\"mi\">20700233</span><span class=\"p\">])</span>\n<span class=\"n\">pbp</span> <span class=\"o\">=</span> <span class=\"n\">npar</span><span class=\"o\">.</span><span class=\"n\">PbP</span><span class=\"p\">(</span><span class=\"n\">game_df</span><span class=\"p\">)</span>\n<span class=\"n\">player_stats</span> <span class=\"o\">=</span> <span class=\"n\">pbp</span><span class=\"o\">.</span><span class=\"n\">playerbygamestats</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#can also derive single possessions for RAPM calculations</span>\n\n<span class=\"n\">rapm_shifts</span> <span class=\"o\">=</span> <span class=\"n\">pbp</span><span class=\"o\">.</span><span class=\"n\">rapm_possessions</span><span class=\"p\">()</span>\n</pre>\n<p>Which produces a dataframe containing the stats of field goals made, field goals attempted,\nthree points made, three points attempted, free throws made, free throws attempted,\nsteals, turnovers, blocks, personal fouls, minutes played(toc), offensive rebounds, possessions\nand defensive rebounds.</p>\n<h1>Team Stats</h1>\n<p>Team stats are called very similar to player stats.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nba_scraper.nba_scraper</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nba_parser</span> <span class=\"k\">as</span> <span class=\"nn\">npar</span>\n\n<span class=\"n\">game_df</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">scrape_game</span><span class=\"p\">([</span><span class=\"mi\">20700233</span><span class=\"p\">])</span>\n<span class=\"n\">pbp</span> <span class=\"o\">=</span> <span class=\"n\">npar</span><span class=\"o\">.</span><span class=\"n\">PbP</span><span class=\"p\">(</span><span class=\"n\">game_df</span><span class=\"p\">)</span>\n<span class=\"n\">team_stats</span> <span class=\"o\">=</span> <span class=\"n\">pbp</span><span class=\"o\">.</span><span class=\"n\">teambygamestats</span><span class=\"p\">()</span>\n</pre>\n<p>The team stats that will be calculation are field goals made, field goals attempted,\nthree points made, three points attempted, free throws made, free throws attempted,\nsteals, turnovers, blocks, personal fouls, minutes played(toc), offensive rebounds, possessions,\nhome team, winning team, fouls drawn, shots blocked, total points for, total points against,\nand defensive rebounds.</p>\n<h1>Team Totals</h1>\n<p>I've grouped together other stat calculations that work better with larger sample sizes.\nThis class takes a list of outputs from PbP.teambygamestats() but really it could take a\nlist of dataframes that are the same structure as that method output. Here's an example\nof how it could work in conjunction with <code>nba_scraper</code>. I suggest writing the pbp returns to file and then importing them as the <code>nba_scraper</code> could time out due to the NBA api timing out from being hit too many times.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nba_scraper.nba_scraper</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nba_parser</span> <span class=\"k\">as</span> <span class=\"nn\">npar</span>\n\n<span class=\"n\">tbg_dfs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">game_id</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20700001</span><span class=\"p\">,</span> <span class=\"mi\">20700010</span><span class=\"p\">):</span>\n    <span class=\"n\">game_df</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">scrape_game</span><span class=\"p\">([</span><span class=\"n\">game_id</span><span class=\"p\">])</span>\n    <span class=\"n\">pbp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">PbP</span><span class=\"p\">(</span><span class=\"n\">game_df</span><span class=\"p\">)</span>\n    <span class=\"n\">team_stats</span> <span class=\"o\">=</span> <span class=\"n\">pbp</span><span class=\"o\">.</span><span class=\"n\">teambygamestats</span><span class=\"p\">()</span>\n    <span class=\"n\">tbg_dfs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">team_stats</span><span class=\"p\">)</span>\n\n<span class=\"n\">team_totals</span> <span class=\"o\">=</span> <span class=\"n\">npar</span><span class=\"o\">.</span><span class=\"n\">TeamTotals</span><span class=\"p\">(</span><span class=\"n\">tbg_dfs</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#produce a dataframe of eFG%, TS%, TOV%, OREB%, FT/FGA, Opponent eFG%,</span>\n<span class=\"c1\">#Opponent TOV%, DREB%, Opponent FT/FGA, along with summing the other</span>\n<span class=\"c1\">#stats produced by the teambygamestats() method to allow further</span>\n<span class=\"c1\">#calculations</span>\n\n<span class=\"n\">team_adv_stats</span> <span class=\"o\">=</span> <span class=\"n\">team_totals</span><span class=\"o\">.</span><span class=\"n\">team_advanced_stats</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\">#to calculate a RAPM regression for teams use this method</span>\n\n<span class=\"n\">team_rapm_df</span> <span class=\"o\">=</span> <span class=\"n\">team_totals</span><span class=\"o\">.</span><span class=\"n\">team_rapm_results</span><span class=\"p\">()</span>\n</pre>\n<h1>Player Totals</h1>\n<p>Like with TeamTotals i've grouped player stat calculations that work better\nwith a larger sample size into its own class. A lot of the hooks are similar\nexcept for the RAPM calculation which is a static method due to the time\nto calculate player RAPM shifts is much longer than team shifts so its\nbest to have them precalculated before attempting a RAPM regression to reduce time.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nba_scraper.nba_scraper</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nba_parser</span> <span class=\"k\">as</span> <span class=\"nn\">npar</span>\n\n<span class=\"n\">pbg_dfs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">pbp_objects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">game_id</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">20700001</span><span class=\"p\">,</span> <span class=\"mi\">2070010</span><span class=\"p\">):</span>\n    <span class=\"n\">game_df</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">scrape_game</span><span class=\"p\">([</span><span class=\"n\">game_id</span><span class=\"p\">])</span>\n    <span class=\"n\">pbp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">PbP</span><span class=\"p\">(</span><span class=\"n\">game_df</span><span class=\"p\">)</span>\n    <span class=\"n\">pbp_objects</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pbp</span><span class=\"p\">)</span>\n    <span class=\"n\">player_stats</span> <span class=\"o\">=</span> <span class=\"n\">pbp</span><span class=\"o\">.</span><span class=\"n\">playerbygamestats</span><span class=\"p\">()</span>\n    <span class=\"n\">pbg_dfs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">player_stats</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_totals</span> <span class=\"o\">=</span> <span class=\"n\">npar</span><span class=\"o\">.</span><span class=\"n\">PlayerTotals</span><span class=\"p\">(</span><span class=\"n\">pbg_dfs</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#produce a dataframe of eFG%, TS%, TOV%, OREB%, AST%, DREB%,</span>\n<span class=\"c1\">#STL%, BLK%, USG%, along with summing the other</span>\n<span class=\"c1\">#stats produced by the playerbygamestats() method to allow further</span>\n<span class=\"c1\">#calculations</span>\n\n<span class=\"n\">player_adv_stats</span> <span class=\"o\">=</span> <span class=\"n\">player_totals</span><span class=\"o\">.</span><span class=\"n\">player_advanced_stats</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\">#to calculate a RAPM regression for players first have to calculate</span>\n<span class=\"c1\">#RAPM possessions from the list of PbP objects we collected above</span>\n\n<span class=\"n\">rapm_possession</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">rapm_possessions</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">pbp_objects</span><span class=\"p\">])</span>\n\n<span class=\"n\">player_rapm_df</span> <span class=\"o\">=</span> <span class=\"n\">npar</span><span class=\"o\">.</span><span class=\"n\">PlayerTotals</span><span class=\"o\">.</span><span class=\"n\">player_rapm_results</span><span class=\"p\">(</span><span class=\"n\">rapm_possession</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6924930, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c53af7b198b0883aca483e8c8e509777", "sha256": "85d1341bf9588dae4adc4f6756f2275eabf3fef2c63ab9bfa3dd20fb47bf121c"}, "downloads": -1, "filename": "nba_parser-0.1.tar.gz", "has_sig": false, "md5_digest": "c53af7b198b0883aca483e8c8e509777", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14237, "upload_time": "2020-03-30T04:57:07", "upload_time_iso_8601": "2020-03-30T04:57:07.604973Z", "url": "https://files.pythonhosted.org/packages/15/8c/2a110c47354d3b8547c3868161612041a007cbbdaddd4732fee14cc17c0f/nba_parser-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "893a05941dd1e273c925ac8b5f1b0f47", "sha256": "18f88f91192c6d2fc03b74fa060e2be4467d733fa65115640ec58ba78cf71149"}, "downloads": -1, "filename": "nba_parser-0.2.tar.gz", "has_sig": false, "md5_digest": "893a05941dd1e273c925ac8b5f1b0f47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14271, "upload_time": "2020-04-01T03:44:16", "upload_time_iso_8601": "2020-04-01T03:44:16.056771Z", "url": "https://files.pythonhosted.org/packages/e8/99/263f1944c21694feca3704c04a55f2cb1eb98b3832833ba2faff75e1f1cd/nba_parser-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "893a05941dd1e273c925ac8b5f1b0f47", "sha256": "18f88f91192c6d2fc03b74fa060e2be4467d733fa65115640ec58ba78cf71149"}, "downloads": -1, "filename": "nba_parser-0.2.tar.gz", "has_sig": false, "md5_digest": "893a05941dd1e273c925ac8b5f1b0f47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14271, "upload_time": "2020-04-01T03:44:16", "upload_time_iso_8601": "2020-04-01T03:44:16.056771Z", "url": "https://files.pythonhosted.org/packages/e8/99/263f1944c21694feca3704c04a55f2cb1eb98b3832833ba2faff75e1f1cd/nba_parser-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:02 2020"}