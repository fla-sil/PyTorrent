{"info": {"author": "MA Jian", "author_email": "majian03@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# copent\nEstimating Copula Entropy Non-parametrically in Python\n\n\n#### Introduction\nThe nonparametric method for estimating copula entropy is implemented. The method composes of two simple steps: estimating empirical copula by rank statistic and estimating copula entropy with k-Nearest-Neighbour method. Copula Entropy is a mathematical concept for multivariate statistical independence measuring and testing, and proved to be equivalent to mutual information [1]. Different from Pearson Correlation Coefficient, Copula Entropy is defined for non-linear, high-order and multivariate cases, which makes it universally applicable. Estimating copula entropy can be applied to many cases, including but not limited to variable selection [2] and causal discovery (by estimating transfer entropy) [3]. Please refer to Ma and Sun (2011) <doi:10.1016/S1007-0214(11)70008-6> for more information. For more information in Chinese, please follow [this link](http://blog.sciencenet.cn/blog-3018268-978326.html).\n\n#### Functions\n* copent -- main function;\n\n* construct_empirical_copula -- the first step of the algorithm, which estimates empirical copula for data by rank statistics;\n\n* entknn -- the second step of the algorithm, which estimates copula entropy from empirical copula with kNN method.\n\n#### Installation\nThe package can be installed from PyPI directly:\n```\npip install copent\n```\nThe package can be installed from Github:\n```\npip install git+https://github.com/majianthu/pycopent.git\n```\n#### Usage Example\n```\nfrom numpy.random import multivariate_normal as mnorm\nimport copent\nrho = 0.6\nmean1 = [0,0]\ncov1 = [ [1,rho],[rho,1] ]\nx = mnorm(mean1,cov1,200) # bivariate gaussian \nce1 = copent.copent(x) # estimated copula entropy\n```\n\n#### References\n1. Ma Jian, Sun Zengqi. Mutual information is copula entropy. Tsinghua Science & Technology, 2011, 16(1): 51-54. See also arXiv preprint, arXiv:0808.0845, 2008.\n\n2. Ma Jian. Variable Selection with Copula Entropy. arXiv preprint arXiv:1910.12389, 2019.\n\n3. Ma Jian. Estimating Transfer Entropy via Copula Entropy. arXiv preprint arXiv:1910.04375, 2019.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/majianthu/pycopent", "keywords": "", "license": "GPL License", "maintainer": "", "maintainer_email": "", "name": "copent", "package_url": "https://pypi.org/project/copent/", "platform": "", "project_url": "https://pypi.org/project/copent/", "project_urls": {"Homepage": "https://github.com/majianthu/pycopent"}, "release_url": "https://pypi.org/project/copent/0.1.7/", "requires_dist": ["numpy", "scipy"], "requires_python": ">=2.7", "summary": "Estimating Copula Entropy", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>copent</h1>\n<p>Estimating Copula Entropy Non-parametrically in Python</p>\n<h4>Introduction</h4>\n<p>The nonparametric method for estimating copula entropy is implemented. The method composes of two simple steps: estimating empirical copula by rank statistic and estimating copula entropy with k-Nearest-Neighbour method. Copula Entropy is a mathematical concept for multivariate statistical independence measuring and testing, and proved to be equivalent to mutual information [1]. Different from Pearson Correlation Coefficient, Copula Entropy is defined for non-linear, high-order and multivariate cases, which makes it universally applicable. Estimating copula entropy can be applied to many cases, including but not limited to variable selection [2] and causal discovery (by estimating transfer entropy) [3]. Please refer to Ma and Sun (2011) <a>doi:10.1016/S1007-0214(11)70008-6</a> for more information. For more information in Chinese, please follow <a href=\"http://blog.sciencenet.cn/blog-3018268-978326.html\" rel=\"nofollow\">this link</a>.</p>\n<h4>Functions</h4>\n<ul>\n<li>\n<p>copent -- main function;</p>\n</li>\n<li>\n<p>construct_empirical_copula -- the first step of the algorithm, which estimates empirical copula for data by rank statistics;</p>\n</li>\n<li>\n<p>entknn -- the second step of the algorithm, which estimates copula entropy from empirical copula with kNN method.</p>\n</li>\n</ul>\n<h4>Installation</h4>\n<p>The package can be installed from PyPI directly:</p>\n<pre><code>pip install copent\n</code></pre>\n<p>The package can be installed from Github:</p>\n<pre><code>pip install git+https://github.com/majianthu/pycopent.git\n</code></pre>\n<h4>Usage Example</h4>\n<pre><code>from numpy.random import multivariate_normal as mnorm\nimport copent\nrho = 0.6\nmean1 = [0,0]\ncov1 = [ [1,rho],[rho,1] ]\nx = mnorm(mean1,cov1,200) # bivariate gaussian \nce1 = copent.copent(x) # estimated copula entropy\n</code></pre>\n<h4>References</h4>\n<ol>\n<li>\n<p>Ma Jian, Sun Zengqi. Mutual information is copula entropy. Tsinghua Science &amp; Technology, 2011, 16(1): 51-54. See also arXiv preprint, arXiv:0808.0845, 2008.</p>\n</li>\n<li>\n<p>Ma Jian. Variable Selection with Copula Entropy. arXiv preprint arXiv:1910.12389, 2019.</p>\n</li>\n<li>\n<p>Ma Jian. Estimating Transfer Entropy via Copula Entropy. arXiv preprint arXiv:1910.04375, 2019.</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 7154064, "releases": {"0.1.7": [{"comment_text": "", "digests": {"md5": "0953e7b0761d9a0283cb1150f3169060", "sha256": "72277cf621e90685483071e222ddcd10f42080702b4c3f3da3ab02b5fbb24e93"}, "downloads": -1, "filename": "copent-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "0953e7b0761d9a0283cb1150f3169060", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 15604, "upload_time": "2020-05-03T00:12:06", "upload_time_iso_8601": "2020-05-03T00:12:06.529779Z", "url": "https://files.pythonhosted.org/packages/86/7c/7b5bc05273afbc214d3ab86dfb52d2c55dc2c27d23ee4fa1d83391b27383/copent-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58637e15d63a4c695f9fd135e0262df6", "sha256": "4cddcf3794c9d3b209da7db010f01bb902b7b5eece515f2717a1c8674690b1e1"}, "downloads": -1, "filename": "copent-0.1.7.tar.gz", "has_sig": false, "md5_digest": "58637e15d63a4c695f9fd135e0262df6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 2919, "upload_time": "2020-05-03T00:12:07", "upload_time_iso_8601": "2020-05-03T00:12:07.881869Z", "url": "https://files.pythonhosted.org/packages/e1/10/a93aed30ae29c673ecb55e7bead98dfae1d2a23642be0989fac3a0c5e634/copent-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0953e7b0761d9a0283cb1150f3169060", "sha256": "72277cf621e90685483071e222ddcd10f42080702b4c3f3da3ab02b5fbb24e93"}, "downloads": -1, "filename": "copent-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "0953e7b0761d9a0283cb1150f3169060", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 15604, "upload_time": "2020-05-03T00:12:06", "upload_time_iso_8601": "2020-05-03T00:12:06.529779Z", "url": "https://files.pythonhosted.org/packages/86/7c/7b5bc05273afbc214d3ab86dfb52d2c55dc2c27d23ee4fa1d83391b27383/copent-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58637e15d63a4c695f9fd135e0262df6", "sha256": "4cddcf3794c9d3b209da7db010f01bb902b7b5eece515f2717a1c8674690b1e1"}, "downloads": -1, "filename": "copent-0.1.7.tar.gz", "has_sig": false, "md5_digest": "58637e15d63a4c695f9fd135e0262df6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 2919, "upload_time": "2020-05-03T00:12:07", "upload_time_iso_8601": "2020-05-03T00:12:07.881869Z", "url": "https://files.pythonhosted.org/packages/e1/10/a93aed30ae29c673ecb55e7bead98dfae1d2a23642be0989fac3a0c5e634/copent-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:19 2020"}