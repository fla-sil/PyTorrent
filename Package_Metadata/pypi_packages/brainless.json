{"info": {"author": "Darvis.ai Team", "author_email": "loaiabdalslam@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "brainless\n---------\n\nCurrent status: Barely even being maintained, if you can call it that\n\nYou\u2019ve found brainless!\n\nbrainless is an acronym for \u201cCombined Algorithm Selection and\nHyperparameter optimization for Machine Learning & Deep Learning\u201d\n\n.. raw:: html\n\n   <!-- Stars badge?! -->\n\nInstallation\n------------\n\nComing soon\u2122 - ``pip install brainless``\n\nGetting started\n---------------\n\n.. code:: python\n\n   from brainless import Predictor\n   from brainless.utils import get_boston_dataset\n\n   df_train, df_test = get_boston_dataset()\n\n   column_descriptions = {\n       'MEDV': 'output',\n       'CHAS': 'categorical'\n   }\n\n   ml_predictor = Predictor(type_of_estimator='regressor', column_descriptions=column_descriptions)\n\n   ml_predictor.train(df_train)\n\n   ml_predictor.score(df_test, df_test.MEDV)\n\nShow off some more features!\n----------------------------\n\nbrainless is designed for production. Here\u2019s an example that includes\nserializing and loading the trained model, then getting predictions on\nsingle dictionaries, roughly the process you\u2019d likely follow to deploy\nthe trained model.\n\n.. code:: python\n\n   from brainless import Predictor\n   from brainless.utils import get_boston_dataset\n   from brainless.utils_models import load_ml_model\n\n   # Load data\n   df_train, df_test = get_boston_dataset()\n\n   # Tell brainless which column is 'output'\n   # Also note columns that aren't purely numerical\n   # Examples include ['nlp', 'date', 'categorical', 'ignore']\n   column_descriptions = {\n     'MEDV': 'output'\n     , 'CHAS': 'categorical'\n   }\n\n   ml_predictor = Predictor(type_of_estimator='regressor', column_descriptions=column_descriptions)\n\n   ml_predictor.train(df_train)\n\n   # Score the model on test data\n   test_score = ml_predictor.score(df_test, df_test.MEDV)\n\n   # brainless is specifically tuned for running in production\n   # It can get predictions on an individual row (passed in as a dictionary)\n   # A single prediction like this takes ~1 millisecond\n   # Here we will demonstrate saving the trained model, and loading it again\n   file_name = ml_predictor.save()\n\n   trained_model = load_ml_model(file_name)\n\n   # .predict and .predict_proba take in either:\n   # A pandas DataFrame\n   # A list of dictionaries\n   # A single dictionary (optimized for speed in production evironments)\n   predictions = trained_model.predict(df_test)\n   print(predictions)\n\n3rd Party Packages- Deep Learning with TensorFlow & Keras, XGBoost, LightGBM, CatBoost\n--------------------------------------------------------------------------------------\n\nbrainless has all of these awesome libraries integrated! Generally, just\npass one of them in for model_names.\n``ml_predictor.train(data, model_names=['DeepLearningClassifier'])``\n\nAvailable options are - ``DeepLearningClassifier`` and\n``DeepLearningRegressor`` - ``XGBClassifier`` and ``XGBRegressor`` -\n``LGBMClassifier`` and ``LGBMRegressor`` - ``CatBoostClassifier`` and\n``CatBoostRegressor``\n\nAll of these projects are ready for production. These projects all have\nprediction time in the 1 millisecond range for a single prediction, and\nare able to be serialized to disk and loaded into a new environment\nafter training.\n\nDepending on your machine, they can occasionally be difficult to\ninstall, so they are not included in brainless\u2019s default installation.\nYou are responsible for installing them yourself. brainless will run\nfine without them installed (we check what\u2019s installed before choosing\nwhich algorithm to use).\n\nFeature Responses\n-----------------\n\nGet linear-model-esque interpretations from non-linear models. More\ninformation available in the documentation:\nhttps://cash-ml.readthedocs.io/en/latest/feature_responses.html\n\nClassification\n--------------\n\nBinary and multiclass classification are both supported. Note that for\nnow, labels must be integers (0 and 1 for binary classification).\nbrainless will automatically detect if it is a binary or multiclass\nclassification problem - you just have to pass in\n``ml_predictor = Predictor(type_of_estimator='classifier', column_descriptions=column_descriptions)``\n\nFeature Learning\n----------------\n\nAlso known as \u201cfinally found a way to make this deep learning stuff\nuseful for my business\u201d. Deep Learning is great at learning important\nfeatures from your data. But the way it turns these learned features\ninto a final prediction is relatively basic. Gradient boosting is great\nat turning features into accurate predictions, but it doesn\u2019t do any\nfeature learning.\n\nIn brainless, you can now automatically use both types of models for\nwhat they\u2019re great at. If you pass\n``feature_learning=True, fl_data=some_dataframe`` to ``.train()``, we\nwill do exactly that: train a deep learning model on your ``fl_data``.\nWe won\u2019t ask it for predictions (standard stacking approach), instead,\nwe\u2019ll use it\u2019s penultimate layer to get it\u2019s 10 most useful features.\nThen we\u2019ll train a gradient boosted model (or any other model of your\nchoice) on those features plus all the original features.\n\nAcross some problems, we\u2019ve witnessed this lead to a 5% gain in\naccuracy, while still making predictions in 1-4 milliseconds, depending\non model complexity.\n\n``ml_predictor.train(df_train, feature_learning=True, fl_data=df_fl_data)``\n\nThis feature only supports regression and binary classification\ncurrently. The rest of brainless supports multiclass classification.\n\nCategorical Ensembling\n----------------------\n\nEver wanted to train one model for every store/customer, but didn\u2019t want\nto maintain hundreds of thousands of independent models? With\n``ml_predictor.train_categorical_ensemble()``, we will handle that for\nyou. You\u2019ll still have just one consistent API,\n``ml_predictor.predict(data)``, but behind this single API will be one\nmodel for each category you included in your training data.\n\nJust tell us which column holds the category you want to split on, and\nwe\u2019ll handle the rest. As always, saving the model, loading it in a\ndifferent environment, and getting speedy predictions live in production\nis baked right in.\n\n``ml_predictor.train_categorical_ensemble(df_train, categorical_column='store_name')``\n\nMore details available in the docs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nhttps://cash-ml.readthedocs.io\n\nAdvice\n~~~~~~\n\nBefore you go any further, try running the code. Load up some data\n(either a DataFrame, or a list of dictionaries, where each dictionary is\na row of data). Make a ``column_descriptions`` dictionary that tells us\nwhich attribute name in each row represents the value we\u2019re trying to\npredict. Pass all that into ``brainless``, and see what happens!\n\nEverything else in these docs assumes you have done at least the above.\nStart there and everything else will build on top. But this part gets\nyou the output you\u2019re probably interested in, without unnecessary\ncomplexity.\n\nWhat this project does\n----------------------\n\nAutomates the whole machine learning process, making it super easy to\nuse for both analytics, and getting real-time predictions in production.\n\nA quick overview of buzzwords, this project automates:\n\n-  Analytics (pass in data, and brainless will tell you the relationship\n   of each variable to what it is you\u2019re trying to predict).\n-  Feature Engineering (particularly around dates, and NLP).\n-  Robust Scaling (turning all values into their scaled versions between\n   the range of 0 and 1, in a way that is robust to outliers, and works\n   with sparse data).\n-  Feature Selection (picking only the features that actually prove\n   useful).\n-  Data formatting (turning a DataFrame or a list of dictionaries into a\n   sparse matrix, one-hot encoding categorical variables, taking the\n   natural log of y for regression problems, etc).\n-  Model Selection (which model works best for your problem- we try\n   roughly a dozen apiece for classification and regression problems,\n   including favorites like XGBoost if it\u2019s installed on your machine).\n-  Hyperparameter Optimization (what hyperparameters work best for that\n   model).\n-  Big Data (feed it lots of data- it\u2019s fairly efficient with\n   resources).\n-  Unicorns (you could conceivably train it to predict what is a unicorn\n   and what is not).\n-  Ice Cream (mmm, tasty\u2026).\n-  Hugs (this makes it much easier to do your job, hopefully leaving you\n   more time to hug those those you care about).\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nIf you\u2019ve cloned the source code and are making any changes (highly\nencouraged!), or just want to make sure everything works in your\nenvironment, run ``nosetests -v tests``.\n\nCI is also set up, so if you\u2019re developing on this, you can just open a\nPR, and the tests will run automatically on Travis-CI.\n\nThe tests are relatively comprehensive, though as with everything with\nbrainless, I happily welcome your contributions here!\n\nCredit where credit is due\n--------------------------\n\nThis entire project is based *quite heavily* on the `work previously\ndone by Preston Parry. <https://github.com/ClimbsRocks/auto_ml>`__ and\n`work previously done by Jesse\nToftum <https://github.com/jesse-toftum/brainless>`__\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/darvis-ai/Brainless", "keywords": "machine learning,data science,automated machine learning,regressor,regressors,regression,classification,classifiers,classifier,estimators,predictors,XGBoost,Random Forest,sklearn,scikit-learn,analytics,analysts,coefficients,feature importances,darvis-ai,darvis-research,analytics,artificial intelligence,subpredictors,ensembling,stacking,blending,feature engineering,feature extraction,feature selection,production,pandas,dataframes,machinejs,deep learning,tensorflow,deeplearning,lightgbm,gradient boosting,gbm,keras,production ready,test coverage", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "brainless", "package_url": "https://pypi.org/project/brainless/", "platform": "", "project_url": "https://pypi.org/project/brainless/", "project_urls": {"Homepage": "https://github.com/darvis-ai/Brainless"}, "release_url": "https://pypi.org/project/brainless/2.0.2/", "requires_dist": ["coveralls (>=1.5.0)", "dill (>=0.2.5)", "h5py (>=2.7.0)", "lightgbm (>=2.0.11)", "nose (>=1.3.0)", "numpy (>=1.11.0)", "pandas (>=0.18.0)", "pathos (>=0.2.1)", "scikit-learn (>=0.18.1)", "scipy (>=0.14.0)", "six (>=1.11.0)", "sklearn-deap2 (>=0.2.1)", "tabulate (>=0.7.5)", "tables (>=3.4.0)"], "requires_python": "", "summary": "Automated Machine Learning for production and analytics", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>brainless</h2>\n<p>Current status: Barely even being maintained, if you can call it that</p>\n<p>You\u2019ve found brainless!</p>\n<p>brainless is an acronym for \u201cCombined Algorithm Selection and\nHyperparameter optimization for Machine Learning &amp; Deep Learning\u201d</p>\n<p>.. raw:: html</p>\n   \n<h2>Installation</h2>\n<p>Coming soon\u2122 - <code>pip install brainless</code></p>\n<h2>Getting started</h2>\n<p>.. code:: python</p>\n<p>from brainless import Predictor\nfrom brainless.utils import get_boston_dataset</p>\n<p>df_train, df_test = get_boston_dataset()</p>\n<p>column_descriptions = {\n'MEDV': 'output',\n'CHAS': 'categorical'\n}</p>\n<p>ml_predictor = Predictor(type_of_estimator='regressor', column_descriptions=column_descriptions)</p>\n<p>ml_predictor.train(df_train)</p>\n<p>ml_predictor.score(df_test, df_test.MEDV)</p>\n<h2>Show off some more features!</h2>\n<p>brainless is designed for production. Here\u2019s an example that includes\nserializing and loading the trained model, then getting predictions on\nsingle dictionaries, roughly the process you\u2019d likely follow to deploy\nthe trained model.</p>\n<p>.. code:: python</p>\n<p>from brainless import Predictor\nfrom brainless.utils import get_boston_dataset\nfrom brainless.utils_models import load_ml_model</p>\n<h1>Load data</h1>\n<p>df_train, df_test = get_boston_dataset()</p>\n<h1>Tell brainless which column is 'output'</h1>\n<h1>Also note columns that aren't purely numerical</h1>\n<h1>Examples include ['nlp', 'date', 'categorical', 'ignore']</h1>\n<p>column_descriptions = {\n'MEDV': 'output'\n, 'CHAS': 'categorical'\n}</p>\n<p>ml_predictor = Predictor(type_of_estimator='regressor', column_descriptions=column_descriptions)</p>\n<p>ml_predictor.train(df_train)</p>\n<h1>Score the model on test data</h1>\n<p>test_score = ml_predictor.score(df_test, df_test.MEDV)</p>\n<h1>brainless is specifically tuned for running in production</h1>\n<h1>It can get predictions on an individual row (passed in as a dictionary)</h1>\n<h1>A single prediction like this takes ~1 millisecond</h1>\n<h1>Here we will demonstrate saving the trained model, and loading it again</h1>\n<p>file_name = ml_predictor.save()</p>\n<p>trained_model = load_ml_model(file_name)</p>\n<h1>.predict and .predict_proba take in either:</h1>\n<h1>A pandas DataFrame</h1>\n<h1>A list of dictionaries</h1>\n<h1>A single dictionary (optimized for speed in production evironments)</h1>\n<p>predictions = trained_model.predict(df_test)\nprint(predictions)</p>\n<h2>3rd Party Packages- Deep Learning with TensorFlow &amp; Keras, XGBoost, LightGBM, CatBoost</h2>\n<p>brainless has all of these awesome libraries integrated! Generally, just\npass one of them in for model_names.\n<code>ml_predictor.train(data, model_names=['DeepLearningClassifier'])</code></p>\n<p>Available options are - <code>DeepLearningClassifier</code> and\n<code>DeepLearningRegressor</code> - <code>XGBClassifier</code> and <code>XGBRegressor</code> -\n<code>LGBMClassifier</code> and <code>LGBMRegressor</code> - <code>CatBoostClassifier</code> and\n<code>CatBoostRegressor</code></p>\n<p>All of these projects are ready for production. These projects all have\nprediction time in the 1 millisecond range for a single prediction, and\nare able to be serialized to disk and loaded into a new environment\nafter training.</p>\n<p>Depending on your machine, they can occasionally be difficult to\ninstall, so they are not included in brainless\u2019s default installation.\nYou are responsible for installing them yourself. brainless will run\nfine without them installed (we check what\u2019s installed before choosing\nwhich algorithm to use).</p>\n<h2>Feature Responses</h2>\n<p>Get linear-model-esque interpretations from non-linear models. More\ninformation available in the documentation:\n<a href=\"https://cash-ml.readthedocs.io/en/latest/feature_responses.html\" rel=\"nofollow\">https://cash-ml.readthedocs.io/en/latest/feature_responses.html</a></p>\n<h2>Classification</h2>\n<p>Binary and multiclass classification are both supported. Note that for\nnow, labels must be integers (0 and 1 for binary classification).\nbrainless will automatically detect if it is a binary or multiclass\nclassification problem - you just have to pass in\n<code>ml_predictor = Predictor(type_of_estimator='classifier', column_descriptions=column_descriptions)</code></p>\n<h2>Feature Learning</h2>\n<p>Also known as \u201cfinally found a way to make this deep learning stuff\nuseful for my business\u201d. Deep Learning is great at learning important\nfeatures from your data. But the way it turns these learned features\ninto a final prediction is relatively basic. Gradient boosting is great\nat turning features into accurate predictions, but it doesn\u2019t do any\nfeature learning.</p>\n<p>In brainless, you can now automatically use both types of models for\nwhat they\u2019re great at. If you pass\n<code>feature_learning=True, fl_data=some_dataframe</code> to <code>.train()</code>, we\nwill do exactly that: train a deep learning model on your <code>fl_data</code>.\nWe won\u2019t ask it for predictions (standard stacking approach), instead,\nwe\u2019ll use it\u2019s penultimate layer to get it\u2019s 10 most useful features.\nThen we\u2019ll train a gradient boosted model (or any other model of your\nchoice) on those features plus all the original features.</p>\n<p>Across some problems, we\u2019ve witnessed this lead to a 5% gain in\naccuracy, while still making predictions in 1-4 milliseconds, depending\non model complexity.</p>\n<p><code>ml_predictor.train(df_train, feature_learning=True, fl_data=df_fl_data)</code></p>\n<p>This feature only supports regression and binary classification\ncurrently. The rest of brainless supports multiclass classification.</p>\n<h2>Categorical Ensembling</h2>\n<p>Ever wanted to train one model for every store/customer, but didn\u2019t want\nto maintain hundreds of thousands of independent models? With\n<code>ml_predictor.train_categorical_ensemble()</code>, we will handle that for\nyou. You\u2019ll still have just one consistent API,\n<code>ml_predictor.predict(data)</code>, but behind this single API will be one\nmodel for each category you included in your training data.</p>\n<p>Just tell us which column holds the category you want to split on, and\nwe\u2019ll handle the rest. As always, saving the model, loading it in a\ndifferent environment, and getting speedy predictions live in production\nis baked right in.</p>\n<p><code>ml_predictor.train_categorical_ensemble(df_train, categorical_column='store_name')</code></p>\n<p>More details available in the docs</p>\n<pre><code>\nhttps://cash-ml.readthedocs.io\n\nAdvice\n~~~~~~\n\nBefore you go any further, try running the code. Load up some data\n(either a DataFrame, or a list of dictionaries, where each dictionary is\na row of data). Make a ``column_descriptions`` dictionary that tells us\nwhich attribute name in each row represents the value we\u2019re trying to\npredict. Pass all that into ``brainless``, and see what happens!\n\nEverything else in these docs assumes you have done at least the above.\nStart there and everything else will build on top. But this part gets\nyou the output you\u2019re probably interested in, without unnecessary\ncomplexity.\n\nWhat this project does\n----------------------\n\nAutomates the whole machine learning process, making it super easy to\nuse for both analytics, and getting real-time predictions in production.\n\nA quick overview of buzzwords, this project automates:\n\n-  Analytics (pass in data, and brainless will tell you the relationship\n   of each variable to what it is you\u2019re trying to predict).\n-  Feature Engineering (particularly around dates, and NLP).\n-  Robust Scaling (turning all values into their scaled versions between\n   the range of 0 and 1, in a way that is robust to outliers, and works\n   with sparse data).\n-  Feature Selection (picking only the features that actually prove\n   useful).\n-  Data formatting (turning a DataFrame or a list of dictionaries into a\n   sparse matrix, one-hot encoding categorical variables, taking the\n   natural log of y for regression problems, etc).\n-  Model Selection (which model works best for your problem- we try\n   roughly a dozen apiece for classification and regression problems,\n   including favorites like XGBoost if it\u2019s installed on your machine).\n-  Hyperparameter Optimization (what hyperparameters work best for that\n   model).\n-  Big Data (feed it lots of data- it\u2019s fairly efficient with\n   resources).\n-  Unicorns (you could conceivably train it to predict what is a unicorn\n   and what is not).\n-  Ice Cream (mmm, tasty\u2026).\n-  Hugs (this makes it much easier to do your job, hopefully leaving you\n   more time to hug those those you care about).\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nIf you\u2019ve cloned the source code and are making any changes (highly\nencouraged!), or just want to make sure everything works in your\nenvironment, run ``nosetests -v tests``.\n\nCI is also set up, so if you\u2019re developing on this, you can just open a\nPR, and the tests will run automatically on Travis-CI.\n\nThe tests are relatively comprehensive, though as with everything with\nbrainless, I happily welcome your contributions here!\n\nCredit where credit is due\n--------------------------\n\nThis entire project is based *quite heavily* on the `work previously\ndone by Preston Parry. &lt;https://github.com/ClimbsRocks/auto_ml&gt;`__ and\n`work previously done by Jesse\nToftum &lt;https://github.com/jesse-toftum/brainless&gt;`__\n\n\n</code></pre>\n\n          </div>"}, "last_serial": 6165334, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "1975cad6e7e7a29cb80c1a0673130f32", "sha256": "b701a2105e44e47e2eac19cf681d162315a8567f8217f16b1a788f5e63518cf2"}, "downloads": -1, "filename": "brainless-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1975cad6e7e7a29cb80c1a0673130f32", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 70475, "upload_time": "2019-11-19T22:24:06", "upload_time_iso_8601": "2019-11-19T22:24:06.199011Z", "url": "https://files.pythonhosted.org/packages/ee/c4/b77c70dce1937964cf0c56e52599e35d84e95f6269249341057b129ebaba/brainless-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5eb8070b6735a8a6f6e8b9cd649ce450", "sha256": "e865526e94107f094f50d6f2d2c0a5ab7942f1c3ece19e0128f62292bf3bd1fb"}, "downloads": -1, "filename": "brainless-2.0.1.tar.gz", "has_sig": false, "md5_digest": "5eb8070b6735a8a6f6e8b9cd649ce450", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107830, "upload_time": "2019-11-19T22:24:13", "upload_time_iso_8601": "2019-11-19T22:24:13.340480Z", "url": "https://files.pythonhosted.org/packages/37/3a/be4fd0f2acae29320775a469920df2c79eba863df5720f050dcda83eeb28/brainless-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "601f7b6cfb085b3e1e32a061fde6431f", "sha256": "0e672cf3255cd3b21365cdaf0a765854d11a836ce9ccfb510aec44863aa66f16"}, "downloads": -1, "filename": "brainless-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "601f7b6cfb085b3e1e32a061fde6431f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 70515, "upload_time": "2019-11-19T22:24:09", "upload_time_iso_8601": "2019-11-19T22:24:09.961250Z", "url": "https://files.pythonhosted.org/packages/52/e9/80e4d1c8fb41551c91198eaf23ed595b06418d4757428ce2f3ae6271958e/brainless-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "121a74472b043dde4b484905dba83658", "sha256": "e25359f55d8367399f3d6859a2b1feacefef44d150df57a25b97d666ea316859"}, "downloads": -1, "filename": "brainless-2.0.2.tar.gz", "has_sig": false, "md5_digest": "121a74472b043dde4b484905dba83658", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107852, "upload_time": "2019-11-19T22:24:16", "upload_time_iso_8601": "2019-11-19T22:24:16.528961Z", "url": "https://files.pythonhosted.org/packages/02/fc/66c68b89a94d8a4f6f23e7a1b191769ac92b0f7722476c65731fe1faee4f/brainless-2.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "601f7b6cfb085b3e1e32a061fde6431f", "sha256": "0e672cf3255cd3b21365cdaf0a765854d11a836ce9ccfb510aec44863aa66f16"}, "downloads": -1, "filename": "brainless-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "601f7b6cfb085b3e1e32a061fde6431f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 70515, "upload_time": "2019-11-19T22:24:09", "upload_time_iso_8601": "2019-11-19T22:24:09.961250Z", "url": "https://files.pythonhosted.org/packages/52/e9/80e4d1c8fb41551c91198eaf23ed595b06418d4757428ce2f3ae6271958e/brainless-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "121a74472b043dde4b484905dba83658", "sha256": "e25359f55d8367399f3d6859a2b1feacefef44d150df57a25b97d666ea316859"}, "downloads": -1, "filename": "brainless-2.0.2.tar.gz", "has_sig": false, "md5_digest": "121a74472b043dde4b484905dba83658", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107852, "upload_time": "2019-11-19T22:24:16", "upload_time_iso_8601": "2019-11-19T22:24:16.528961Z", "url": "https://files.pythonhosted.org/packages/02/fc/66c68b89a94d8a4f6f23e7a1b191769ac92b0f7722476c65731fe1faee4f/brainless-2.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:24 2020"}