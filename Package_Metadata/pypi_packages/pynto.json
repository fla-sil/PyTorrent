{"info": {"author": "Peter Graf", "author_email": "peter@pynto.tech", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## pynto: Data analysis in Python using the concatenative paradigm\n\npynto is a Python package that lets you manipulate tabular data with the expressiveness and code reusability of [concatenative](https://en.wikipedia.org/wiki/Concatenative_programming_language) programming.  With pynto you define an _expression_ that formally specifies how to calculate the data in your table.  Expressions are made by stringing together a sequence of functions called _words_.  It works like a pipeline: the output from one word becomes the input for the following word.  The table of data is treated like a stack of independent columns.  The rightmost column in the table is the top of the stack.  Words can add, remove or modify columns, but they are row-agnostic--expressions can be evaluated over any range of rows.  \n## What does it look like?\n```\n>>> from pynto import * \n>>> stocks = csv('stocks.csv')                   # add columns to the stack\n>>> ma_diff = dup | rolling(20) | wmean | sub    # define an operation\n>>> stocks_ma = stocks | ~ma_diff | each         # operate on columns using quotation/combinator pattern\n>>> stocks_ma['2019-01-01':]                     # evaluate your expression over certain rows\n```\n\n## Why pynto?\n - Expressive: Foolproof syntax; Ideal for modular, reusable code \n - Performant: Efficient NumPy internals\n - Interoperable: Seemlessly integration with data analysis workflows\n - Batteries included:  Datetime-based row ranges; Moving window statistics\n\n## Get pynto\n```\npip install pynto\n```\n## Reference\n\n### The Basics\n\nCreate expressions by _composing_ words together with `|`.  Words operate in left-to-right order, with operators following their operands in _postfix_ style.  When you assign an expression to a Python variable the variable name can be used as word in other expressions.\n```\n>>> square = dup | mul         # adds duplicate of top column to the stack, then multiplies top two columns \n```\nThe word `c` that adds a constant-value column to the stack.  Like many pynto words, `c` takes a _parameter_ in parentheses to specify the constant value `c(10.0)`. pynto can handle any NumPy data type, but all rows in a column have to have the same type.\n\n```\n>>> expr = c(10.0) | square    # apply square expression to a columns of 10s\n```\nTo evaluate your expression specify the range of rows you want using standard Python `[start:stop:step]` indexing and slicing.  Indices can be ints or datetimes.  For a datetime index the step is the periodicity.  \n```\n>>> expr[:2]                   # evaluate first two rows                                                     \n   constant\n0     100.0\n1     100.0\n```\nEach column has a string header that can be modified.  `hset` sets the header to a new value.  Headers can be usefully for filtering or arranging columns.\n```\n>>> expr |= hset('ten squared')\n>>> expr[:2]  \n   ten squared\n0        100.0\n1        100.0\n```\n_Combinators_ are higher-order functions that allow pynto to do more complicated things like branching and looping.  Combinators operate on _quotations_, expressions that are pushed to the stack instead of operating on the stack.  To create a quotation use `~` before a word `~square` or before an expression in parentheses `~(dup | mul)` for an anonymous quotation.\n```\n>>> expr = c(9.) | c(10.) | ~square | each\n>>> expr[0]\n   constant  constant\n0      81.0     100.0\n```\n\n## pynto vocabulary\n\n### Words for adding columns\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\nc|value| -- c|Adds a constant-_value_ column.\ncsv|csv_file, index_col=0, header='infer'| -- c (c)|Adds columns from _csv_file_.\npandas|frame_or_series| -- c (c)|Adds columns from a pandas data structure.\nc_range|value| -- c (c)|Add constant int columns from 0 to _value_.\n\n### Combinators\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\ncall|depth=None, copy=False| a q -- c| Apply quotation to stack, up to _depth_ if specified.  Optionally leaves stack in place with _copy_.\neach|start=0, stop=None, every=1, copy=False| a b q -- c d| Apply quotation stack elements from _start_ to _end_ in groups of _every_.  Optionally leaves stack in place with _copy_.\ncleave|num_quotations, depth=None, copy=False| a q q -- c d| Apply _num_quotations_ quotations to copies of stack elements up to _depth_.  Optionally leaves stack in place with _copy_.\n\n### Words to manipulate columns\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\ndup|| a -- a a| Duplicate top column.\nroll|| a b c -- c a b| Permute columns.\nswap|| a b -- b a| Swap top two columns.\ndrop|| a b c -- a b| Drop top column.\nclear|| a b c -- | Clear columns.\ninterleave|count=None, split_into=2|a b c d -- a c b d|Divide columns into _split into_ groups and interleave group elements.\npull|start,end=None,clear=False|a b c -- b c a|Bring columns _start_ (to _end_) to the top.\nhpull|\\*headers, clear=False|a b c -- b c a|Bring columns with headers matching regex _headers_ to the top.  Optionally clear remainder of stack\nhfilter|\\*headers, clear=False|a b c -- a|Shortcut for hpull with _clear_=True\n\n### Words to manipulate headers\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\nhset|\\*headers| a b -- a b|Set top columns' headers to _headers_.\nhformat|format_string| a -- a|Apply _format_string_ to existing headers.\nhapply|header_function| a -- a|Apply _header_function_ to existing header.\n\n### Words for arithmetic or logical operators\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\nadd||a b -- c|a + b\nsub||a b -- c|a - b\nmul||a b -- c|a * b\ndiv||a b -- c|a / b\nmod||a b -- c|a % b\nexp||a b -- c|a ** b\neq||a b -- c|a == b\nne||a b -- c|a != b\nge||a b -- c|a >= b\ngt||a b -- c|a > b\nle||a b -- c|a <= b\nlt||a b -- c|a < b\nneg||a -- c|a * -1\nabsv||a -- c|abs(a)\nsqrt||a -- c|a ** 0.5\nzeroToNa|| a -- c|Replaces zeros with np.nan\n\n### Words for creating window columns\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\nrolling|window=2, exclude_nans=True, lookback_multiplier=2|a -- w|Create window column with values from most recent _window_ rows.  Exclude nan-valued rows from count unless _exclude_nans_.  Extend history up to _lookback_multiplier_ to look for non-nan rows.  \ncrossing||a b c -- w|Create window column with cross-sectional values from the same rows of all columns. \n\n### Words for calculating statistics on window columns\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\nwsum||w -- c|Sums of windows.\nwmean||w -- c|Means of windows.\nwvar||w -- c|Variances of windows.\nwstd||w -- c|Standard deviations of windows.\nwchange||w -- c|Changes between first and last rows of windows.\nwpct_change||w -- c|Percent changes between first and last rows of windows.\nwlog_change||w -- c|Differences of logs of first and last rows of windows.\nwfirst||w -- c|First rows of windows.\nwlast||w -- c|Last rows of windows.\nwzscore||w -- c|Z-score of most recent rows within windows.\n\n### Words for cleaning up data\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\nfill|value|a -- a|Fill nans with _value_.\nffill||a -- a|Last observation carry-forward.\njoin|date|a b -- c|Join top two columns, switching from second to first on _date_ index.\n\n### Other words\nName | Parameters |Stack effect<br>_before_&nbsp;--&nbsp;_after_|Description\n:---|:---|:---|:---\newma|window, fill_nans=True|a -- c|Calculates exponentially-weighted moving average with half-life _window_. \nwlag|number|w -- c|Lag _number_ rows.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/punkbrwstr/pynto", "keywords": "data analysis quantitative tabular concatenative functional", "license": "", "maintainer": "", "maintainer_email": "", "name": "pynto", "package_url": "https://pypi.org/project/pynto/", "platform": "", "project_url": "https://pypi.org/project/pynto/", "project_urls": {"Homepage": "https://github.com/punkbrwstr/pynto"}, "release_url": "https://pypi.org/project/pynto/0.1.2/", "requires_dist": ["numpy", "pandas", "python-dateutil"], "requires_python": ">=3.6", "summary": "Data analysis using a concatenative paradigm", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>pynto: Data analysis in Python using the concatenative paradigm</h2>\n<p>pynto is a Python package that lets you manipulate tabular data with the expressiveness and code reusability of <a href=\"https://en.wikipedia.org/wiki/Concatenative_programming_language\" rel=\"nofollow\">concatenative</a> programming.  With pynto you define an <em>expression</em> that formally specifies how to calculate the data in your table.  Expressions are made by stringing together a sequence of functions called <em>words</em>.  It works like a pipeline: the output from one word becomes the input for the following word.  The table of data is treated like a stack of independent columns.  The rightmost column in the table is the top of the stack.  Words can add, remove or modify columns, but they are row-agnostic--expressions can be evaluated over any range of rows.</p>\n<h2>What does it look like?</h2>\n<pre><code>&gt;&gt;&gt; from pynto import * \n&gt;&gt;&gt; stocks = csv('stocks.csv')                   # add columns to the stack\n&gt;&gt;&gt; ma_diff = dup | rolling(20) | wmean | sub    # define an operation\n&gt;&gt;&gt; stocks_ma = stocks | ~ma_diff | each         # operate on columns using quotation/combinator pattern\n&gt;&gt;&gt; stocks_ma['2019-01-01':]                     # evaluate your expression over certain rows\n</code></pre>\n<h2>Why pynto?</h2>\n<ul>\n<li>Expressive: Foolproof syntax; Ideal for modular, reusable code</li>\n<li>Performant: Efficient NumPy internals</li>\n<li>Interoperable: Seemlessly integration with data analysis workflows</li>\n<li>Batteries included:  Datetime-based row ranges; Moving window statistics</li>\n</ul>\n<h2>Get pynto</h2>\n<pre><code>pip install pynto\n</code></pre>\n<h2>Reference</h2>\n<h3>The Basics</h3>\n<p>Create expressions by <em>composing</em> words together with <code>|</code>.  Words operate in left-to-right order, with operators following their operands in <em>postfix</em> style.  When you assign an expression to a Python variable the variable name can be used as word in other expressions.</p>\n<pre><code>&gt;&gt;&gt; square = dup | mul         # adds duplicate of top column to the stack, then multiplies top two columns \n</code></pre>\n<p>The word <code>c</code> that adds a constant-value column to the stack.  Like many pynto words, <code>c</code> takes a <em>parameter</em> in parentheses to specify the constant value <code>c(10.0)</code>. pynto can handle any NumPy data type, but all rows in a column have to have the same type.</p>\n<pre><code>&gt;&gt;&gt; expr = c(10.0) | square    # apply square expression to a columns of 10s\n</code></pre>\n<p>To evaluate your expression specify the range of rows you want using standard Python <code>[start:stop:step]</code> indexing and slicing.  Indices can be ints or datetimes.  For a datetime index the step is the periodicity.</p>\n<pre><code>&gt;&gt;&gt; expr[:2]                   # evaluate first two rows                                                     \n   constant\n0     100.0\n1     100.0\n</code></pre>\n<p>Each column has a string header that can be modified.  <code>hset</code> sets the header to a new value.  Headers can be usefully for filtering or arranging columns.</p>\n<pre><code>&gt;&gt;&gt; expr |= hset('ten squared')\n&gt;&gt;&gt; expr[:2]  \n   ten squared\n0        100.0\n1        100.0\n</code></pre>\n<p><em>Combinators</em> are higher-order functions that allow pynto to do more complicated things like branching and looping.  Combinators operate on <em>quotations</em>, expressions that are pushed to the stack instead of operating on the stack.  To create a quotation use <code>~</code> before a word <code>~square</code> or before an expression in parentheses <code>~(dup | mul)</code> for an anonymous quotation.</p>\n<pre><code>&gt;&gt;&gt; expr = c(9.) | c(10.) | ~square | each\n&gt;&gt;&gt; expr[0]\n   constant  constant\n0      81.0     100.0\n</code></pre>\n<h2>pynto vocabulary</h2>\n<h3>Words for adding columns</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">value</td>\n<td align=\"left\">-- c</td>\n<td align=\"left\">Adds a constant-<em>value</em> column.</td>\n</tr>\n<tr>\n<td align=\"left\">csv</td>\n<td align=\"left\">csv_file, index_col=0, header='infer'</td>\n<td align=\"left\">-- c (c)</td>\n<td align=\"left\">Adds columns from <em>csv_file</em>.</td>\n</tr>\n<tr>\n<td align=\"left\">pandas</td>\n<td align=\"left\">frame_or_series</td>\n<td align=\"left\">-- c (c)</td>\n<td align=\"left\">Adds columns from a pandas data structure.</td>\n</tr>\n<tr>\n<td align=\"left\">c_range</td>\n<td align=\"left\">value</td>\n<td align=\"left\">-- c (c)</td>\n<td align=\"left\">Add constant int columns from 0 to <em>value</em>.</td>\n</tr></tbody></table>\n<h3>Combinators</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">call</td>\n<td align=\"left\">depth=None, copy=False</td>\n<td align=\"left\">a q -- c</td>\n<td align=\"left\">Apply quotation to stack, up to <em>depth</em> if specified.  Optionally leaves stack in place with <em>copy</em>.</td>\n</tr>\n<tr>\n<td align=\"left\">each</td>\n<td align=\"left\">start=0, stop=None, every=1, copy=False</td>\n<td align=\"left\">a b q -- c d</td>\n<td align=\"left\">Apply quotation stack elements from <em>start</em> to <em>end</em> in groups of <em>every</em>.  Optionally leaves stack in place with <em>copy</em>.</td>\n</tr>\n<tr>\n<td align=\"left\">cleave</td>\n<td align=\"left\">num_quotations, depth=None, copy=False</td>\n<td align=\"left\">a q q -- c d</td>\n<td align=\"left\">Apply <em>num_quotations</em> quotations to copies of stack elements up to <em>depth</em>.  Optionally leaves stack in place with <em>copy</em>.</td>\n</tr></tbody></table>\n<h3>Words to manipulate columns</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">dup</td>\n<td align=\"left\"></td>\n<td align=\"left\">a -- a a</td>\n<td align=\"left\">Duplicate top column.</td>\n</tr>\n<tr>\n<td align=\"left\">roll</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b c -- c a b</td>\n<td align=\"left\">Permute columns.</td>\n</tr>\n<tr>\n<td align=\"left\">swap</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- b a</td>\n<td align=\"left\">Swap top two columns.</td>\n</tr>\n<tr>\n<td align=\"left\">drop</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b c -- a b</td>\n<td align=\"left\">Drop top column.</td>\n</tr>\n<tr>\n<td align=\"left\">clear</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b c --</td>\n<td align=\"left\">Clear columns.</td>\n</tr>\n<tr>\n<td align=\"left\">interleave</td>\n<td align=\"left\">count=None, split_into=2</td>\n<td align=\"left\">a b c d -- a c b d</td>\n<td align=\"left\">Divide columns into <em>split into</em> groups and interleave group elements.</td>\n</tr>\n<tr>\n<td align=\"left\">pull</td>\n<td align=\"left\">start,end=None,clear=False</td>\n<td align=\"left\">a b c -- b c a</td>\n<td align=\"left\">Bring columns <em>start</em> (to <em>end</em>) to the top.</td>\n</tr>\n<tr>\n<td align=\"left\">hpull</td>\n<td align=\"left\">*headers, clear=False</td>\n<td align=\"left\">a b c -- b c a</td>\n<td align=\"left\">Bring columns with headers matching regex <em>headers</em> to the top.  Optionally clear remainder of stack</td>\n</tr>\n<tr>\n<td align=\"left\">hfilter</td>\n<td align=\"left\">*headers, clear=False</td>\n<td align=\"left\">a b c -- a</td>\n<td align=\"left\">Shortcut for hpull with <em>clear</em>=True</td>\n</tr></tbody></table>\n<h3>Words to manipulate headers</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">hset</td>\n<td align=\"left\">*headers</td>\n<td align=\"left\">a b -- a b</td>\n<td align=\"left\">Set top columns' headers to <em>headers</em>.</td>\n</tr>\n<tr>\n<td align=\"left\">hformat</td>\n<td align=\"left\">format_string</td>\n<td align=\"left\">a -- a</td>\n<td align=\"left\">Apply <em>format_string</em> to existing headers.</td>\n</tr>\n<tr>\n<td align=\"left\">happly</td>\n<td align=\"left\">header_function</td>\n<td align=\"left\">a -- a</td>\n<td align=\"left\">Apply <em>header_function</em> to existing header.</td>\n</tr></tbody></table>\n<h3>Words for arithmetic or logical operators</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a + b</td>\n</tr>\n<tr>\n<td align=\"left\">sub</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a - b</td>\n</tr>\n<tr>\n<td align=\"left\">mul</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a * b</td>\n</tr>\n<tr>\n<td align=\"left\">div</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a / b</td>\n</tr>\n<tr>\n<td align=\"left\">mod</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a % b</td>\n</tr>\n<tr>\n<td align=\"left\">exp</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a ** b</td>\n</tr>\n<tr>\n<td align=\"left\">eq</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a == b</td>\n</tr>\n<tr>\n<td align=\"left\">ne</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a != b</td>\n</tr>\n<tr>\n<td align=\"left\">ge</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a &gt;= b</td>\n</tr>\n<tr>\n<td align=\"left\">gt</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a &gt; b</td>\n</tr>\n<tr>\n<td align=\"left\">le</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a &lt;= b</td>\n</tr>\n<tr>\n<td align=\"left\">lt</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">a &lt; b</td>\n</tr>\n<tr>\n<td align=\"left\">neg</td>\n<td align=\"left\"></td>\n<td align=\"left\">a -- c</td>\n<td align=\"left\">a * -1</td>\n</tr>\n<tr>\n<td align=\"left\">absv</td>\n<td align=\"left\"></td>\n<td align=\"left\">a -- c</td>\n<td align=\"left\">abs(a)</td>\n</tr>\n<tr>\n<td align=\"left\">sqrt</td>\n<td align=\"left\"></td>\n<td align=\"left\">a -- c</td>\n<td align=\"left\">a ** 0.5</td>\n</tr>\n<tr>\n<td align=\"left\">zeroToNa</td>\n<td align=\"left\"></td>\n<td align=\"left\">a -- c</td>\n<td align=\"left\">Replaces zeros with np.nan</td>\n</tr></tbody></table>\n<h3>Words for creating window columns</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">rolling</td>\n<td align=\"left\">window=2, exclude_nans=True, lookback_multiplier=2</td>\n<td align=\"left\">a -- w</td>\n<td align=\"left\">Create window column with values from most recent <em>window</em> rows.  Exclude nan-valued rows from count unless <em>exclude_nans</em>.  Extend history up to <em>lookback_multiplier</em> to look for non-nan rows.</td>\n</tr>\n<tr>\n<td align=\"left\">crossing</td>\n<td align=\"left\"></td>\n<td align=\"left\">a b c -- w</td>\n<td align=\"left\">Create window column with cross-sectional values from the same rows of all columns.</td>\n</tr></tbody></table>\n<h3>Words for calculating statistics on window columns</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">wsum</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Sums of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wmean</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Means of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wvar</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Variances of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wstd</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Standard deviations of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wchange</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Changes between first and last rows of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wpct_change</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Percent changes between first and last rows of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wlog_change</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Differences of logs of first and last rows of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wfirst</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">First rows of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wlast</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Last rows of windows.</td>\n</tr>\n<tr>\n<td align=\"left\">wzscore</td>\n<td align=\"left\"></td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Z-score of most recent rows within windows.</td>\n</tr></tbody></table>\n<h3>Words for cleaning up data</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">fill</td>\n<td align=\"left\">value</td>\n<td align=\"left\">a -- a</td>\n<td align=\"left\">Fill nans with <em>value</em>.</td>\n</tr>\n<tr>\n<td align=\"left\">ffill</td>\n<td align=\"left\"></td>\n<td align=\"left\">a -- a</td>\n<td align=\"left\">Last observation carry-forward.</td>\n</tr>\n<tr>\n<td align=\"left\">join</td>\n<td align=\"left\">date</td>\n<td align=\"left\">a b -- c</td>\n<td align=\"left\">Join top two columns, switching from second to first on <em>date</em> index.</td>\n</tr></tbody></table>\n<h3>Other words</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">Stack effect<br><em>before</em>\u00a0--\u00a0<em>after</em></th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">ewma</td>\n<td align=\"left\">window, fill_nans=True</td>\n<td align=\"left\">a -- c</td>\n<td align=\"left\">Calculates exponentially-weighted moving average with half-life <em>window</em>.</td>\n</tr>\n<tr>\n<td align=\"left\">wlag</td>\n<td align=\"left\">number</td>\n<td align=\"left\">w -- c</td>\n<td align=\"left\">Lag <em>number</em> rows.</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6160417, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8e912513a0ed4647f88f2a1d6a56c9ff", "sha256": "161778be9f9a35b0270c52fdf9678c6ad3b86e605a9cd83e54d5ec91b2f4289b"}, "downloads": -1, "filename": "pynto-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8e912513a0ed4647f88f2a1d6a56c9ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12641, "upload_time": "2019-10-24T19:01:28", "upload_time_iso_8601": "2019-10-24T19:01:28.668026Z", "url": "https://files.pythonhosted.org/packages/8f/ba/6397d07c376246ed654ed91629011f99441d45f34761dd736c87c1c6b757/pynto-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3be486dea91523d764628a6176c2b1cb", "sha256": "f6effe5a47309f3214db6f5a2cb6a39cafb581d017ce7e13956a157d4fd7cac3"}, "downloads": -1, "filename": "pynto-0.1.tar.gz", "has_sig": false, "md5_digest": "3be486dea91523d764628a6176c2b1cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15364, "upload_time": "2019-10-24T19:01:31", "upload_time_iso_8601": "2019-10-24T19:01:31.166298Z", "url": "https://files.pythonhosted.org/packages/83/f5/361a634845148e4757928a3d5c8b1feaadbb637f4e19a876e85ace7f094f/pynto-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "46093dfba7ecf9f1a86dcf067bc8a85f", "sha256": "f2965ed6bf28153024bb5c57efdb0bb69e42c7ef7f24b93066befd9901dd71d5"}, "downloads": -1, "filename": "pynto-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "46093dfba7ecf9f1a86dcf067bc8a85f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12662, "upload_time": "2019-10-24T19:12:10", "upload_time_iso_8601": "2019-10-24T19:12:10.892582Z", "url": "https://files.pythonhosted.org/packages/9e/2a/75341e378f0db2d89e4f0d22f87e3468aaeda484b3cb8e9930e21fbb76f7/pynto-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ae0aa313da4dcde341786ea4d10fe24", "sha256": "4729cb86246ca4d72057f63173e5e214fa8b40105438eb27fd20c5ee25515d48"}, "downloads": -1, "filename": "pynto-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6ae0aa313da4dcde341786ea4d10fe24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15373, "upload_time": "2019-10-24T19:12:13", "upload_time_iso_8601": "2019-10-24T19:12:13.219391Z", "url": "https://files.pythonhosted.org/packages/a2/16/28007bcd71f86ab543f1f44f4df6fb7a4eeba0f93d0625b81688b958ad2d/pynto-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b53f3d32a60c605dd86d42287a699b5d", "sha256": "48d4e8017517af175d9a98057f88711e8661a5c6235b65f9581ae21cd4c2dd5d"}, "downloads": -1, "filename": "pynto-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b53f3d32a60c605dd86d42287a699b5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12902, "upload_time": "2019-11-19T07:37:43", "upload_time_iso_8601": "2019-11-19T07:37:43.465100Z", "url": "https://files.pythonhosted.org/packages/58/c7/869da30f154f799d2620e57da5593be2b43abd8c377a00b7640a97fafa36/pynto-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a69ff7c51ca0e7e48af9ecae731ce6c3", "sha256": "c8411644d363b84f62ecdbb229130021fb552763da3aece6cc0ee137a664cfb3"}, "downloads": -1, "filename": "pynto-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a69ff7c51ca0e7e48af9ecae731ce6c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15603, "upload_time": "2019-11-19T07:37:44", "upload_time_iso_8601": "2019-11-19T07:37:44.531852Z", "url": "https://files.pythonhosted.org/packages/1d/ea/f0227dd5b12d771c4dab04bb68c115ddf808275637810f0a8f85591c894c/pynto-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b53f3d32a60c605dd86d42287a699b5d", "sha256": "48d4e8017517af175d9a98057f88711e8661a5c6235b65f9581ae21cd4c2dd5d"}, "downloads": -1, "filename": "pynto-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b53f3d32a60c605dd86d42287a699b5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12902, "upload_time": "2019-11-19T07:37:43", "upload_time_iso_8601": "2019-11-19T07:37:43.465100Z", "url": "https://files.pythonhosted.org/packages/58/c7/869da30f154f799d2620e57da5593be2b43abd8c377a00b7640a97fafa36/pynto-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a69ff7c51ca0e7e48af9ecae731ce6c3", "sha256": "c8411644d363b84f62ecdbb229130021fb552763da3aece6cc0ee137a664cfb3"}, "downloads": -1, "filename": "pynto-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a69ff7c51ca0e7e48af9ecae731ce6c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15603, "upload_time": "2019-11-19T07:37:44", "upload_time_iso_8601": "2019-11-19T07:37:44.531852Z", "url": "https://files.pythonhosted.org/packages/1d/ea/f0227dd5b12d771c4dab04bb68c115ddf808275637810f0a8f85591c894c/pynto-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:59 2020"}