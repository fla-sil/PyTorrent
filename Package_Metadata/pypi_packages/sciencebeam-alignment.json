{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# ScienceBeam Alignment\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\n\nScienceBeam Alignment provides generic low-level sequence alignment utility functions, similar to Python's [SequenceMatcher](https://docs.python.org/3/library/difflib.html).\n\nThis project is currently mainly used for training data generation, related to the [ScienceBeam project](https://github.com/elifesciences/sciencebeam). Although this project itself has no ScienceBeam dependency and can be considered a standalone sequence alignment library. It is however more targeted at document size sequences rather than massive gene sequences.\n\n## Pre-requisites\n\n- Python 2 or 3\n\n## API\n\n### SequenceMatcher\n\nThe mostly drop-in replacement of Python's [SequenceMatcher](https://docs.python.org/3/library/difflib.html)\nis provided by [fuzzywuzzy](https://github.com/seatgeek/fuzzywuzzy)'s [StringMatcher](https://github.com/seatgeek/fuzzywuzzy/blob/master/fuzzywuzzy/StringMatcher.py).\n\nIn that respect, `sciencebeam-alignment` merely provides a wrapper with fallback.\n\n### WordSequenceMatcher\n\nA wrapper around the aforementioned `SequenceMatcher`, but matching on word level tokens only.\n\nIt currently only implements `get_matching_blocks`.\n\nThe main advantage is that it is much faster for long texts, because it won't have to match individual characters. It isn't recommended for short texts, where character level alignment is probably more desirable.\n\nexample match results:\n\n```python\n>>> from sciencebeam_alignment.word_sequence_matcher import (\n...     WordSequenceMatcher\n... )\n>>> WordSequenceMatcher(a='word1', b='word2').get_matching_blocks()\n[]\n>>> WordSequenceMatcher(a='a word1 b', b='x word1 y').get_matching_blocks()\n[(2, 2, 5)]\n```\n\n### GlobalSequenceMatcher and LocalSequenceMatcher\n\nThe [GlobalSequenceMatcher and LocalSequenceMatcher](https://github.com/elifesciences/sciencebeam-alignment/blob/develop/sciencebeam_alignment/align.py) implements the [Needleman-Wunsch](https://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch_algorithm) [global alignment](https://en.wikipedia.org/wiki/Sequence_alignment#Global_and_local_alignments) as well as the [Smith-Waterman](https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm) local alignment algorithms. The implementation is somewhat inspired by [python-alignment](https://github.com/eseraygun/python-alignment).\n\nIt does implement `get_matching_blocks` to match Python's [SequenceMatcher](https://docs.python.org/3/library/difflib.html).\n\nBy passing in a scoring object, the results can be influenced (e.g. gaps can be penalized more than mismatches).\n\nIt does also provide an optimized implementation using [Cython](https://cython.org/). The level of optimization depends on the type of passed in sequences and scoring. The fastest being with integer sequences and simple scoring. Especially with longer sequences, the potential speed ups can be significant.\n\n```python\n>>> from sciencebeam_alignment.align import LocalSequenceMatcher, SimpleScoring\n>>> DEFAULT_SCORING = SimpleScoring(match_score=3, mismatch_score=-1, gap_score=-2)\n>>> LocalSequenceMatcher(a='a word1 b', b='x word2 y', scoring=DEFAULT_SCORING).get_matching_blocks()\n[(1, 1, 5), (7, 7, 1), (9, 9, 0)]\n```\n\nIn addition, the `get_multiple_matching_blocks` can be used to retrieve multiple matching blocks with the same score:\n\n```python\n>>> from sciencebeam_alignment.align import GlobalSequenceMatcher, SimpleScoring\n>>> DEFAULT_SCORING = SimpleScoring(match_score=3, mismatch_score=-1, gap_score=-2)\n>>> matcher = GlobalSequenceMatcher(a='xyzabc', b='abcxyz', scoring=DEFAULT_SCORING)\n>>> list(matcher.get_multiple_matching_blocks(limit=2))\n[[(3, 0, 3)], [(0, 3, 3)]]\n```\n\n`get_multiple_matching_blocks` returns a generator. The number of variations can be limited using the `limit` argument or by simply stopping early.\n\nThe `GlobalSequenceMatcher` can also be used to calculate the [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) (or _edit distance_). An example is provided in `sciencebeam_alignment.levenshtein`:\n\n```python\n>>> from sciencebeam_alignment.levenshtein import get_levenshtein_distance\n>>> get_levenshtein_distance('kitten', 'sitting')\n3\n>>> from sciencebeam_alignment.levenshtein import get_levenshtein_ratio\n>>> get_levenshtein_ratio('kitten', 'sitting')\n0.5714285714285714\n```\n\nCalculating the levenshtein distance is mainly provided as an example. You might want to consider using [python-Levenshtein](https://github.com/ztane/python-Levenshtein).\n\nTo check whether the fast implementation is enabled:\n\n```python\n>>> from sciencebeam_alignment.align import native_enabled\n>>> native_enabled\nTrue\n```\n\n## Development\n\nDevelopment can be done either using Docker (default) or a virtual environment.\n\nAll commands are available via `make`.\n\n### Development using Docker\n\nBuild and run tests:\n\n```bash\nmake build test\n```\n\nOr intended for CI:\n\n```bash\nmake ci-build-and-test\n```\n\n### Development using a virtual environment\n\n`make` targets with the `dev-` prefix are intended for the use with the virtual environment.\n\nThis requires that you already have Python installed.\n\n#### Setup (virtual environment)\n\n```bash\nmake dev-venv\n```\n\nTo update the dependencies:\n\n```bash\nmake dev-install\n```\n\n#### Cython (virtual environment)\n\nCompile code using Cython:\n\n```bash\nmake dev-cython-clean dev-cython-compile\n```\n\n#### Tests (virtual environment)\n\n```base\nmake dev-test\n```\n\nOr:\n\n```base\nmake dev-watch\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/elifesciences/sciencebeam-alignment", "keywords": "sequence alignment", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sciencebeam-alignment", "package_url": "https://pypi.org/project/sciencebeam-alignment/", "platform": "", "project_url": "https://pypi.org/project/sciencebeam-alignment/", "project_urls": {"Homepage": "https://github.com/elifesciences/sciencebeam-alignment"}, "release_url": "https://pypi.org/project/sciencebeam-alignment/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "ScienceBeam Alignment", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ScienceBeam Alignment</h1>\n<p><a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>ScienceBeam Alignment provides generic low-level sequence alignment utility functions, similar to Python's <a href=\"https://docs.python.org/3/library/difflib.html\" rel=\"nofollow\">SequenceMatcher</a>.</p>\n<p>This project is currently mainly used for training data generation, related to the <a href=\"https://github.com/elifesciences/sciencebeam\" rel=\"nofollow\">ScienceBeam project</a>. Although this project itself has no ScienceBeam dependency and can be considered a standalone sequence alignment library. It is however more targeted at document size sequences rather than massive gene sequences.</p>\n<h2>Pre-requisites</h2>\n<ul>\n<li>Python 2 or 3</li>\n</ul>\n<h2>API</h2>\n<h3>SequenceMatcher</h3>\n<p>The mostly drop-in replacement of Python's <a href=\"https://docs.python.org/3/library/difflib.html\" rel=\"nofollow\">SequenceMatcher</a>\nis provided by <a href=\"https://github.com/seatgeek/fuzzywuzzy\" rel=\"nofollow\">fuzzywuzzy</a>'s <a href=\"https://github.com/seatgeek/fuzzywuzzy/blob/master/fuzzywuzzy/StringMatcher.py\" rel=\"nofollow\">StringMatcher</a>.</p>\n<p>In that respect, <code>sciencebeam-alignment</code> merely provides a wrapper with fallback.</p>\n<h3>WordSequenceMatcher</h3>\n<p>A wrapper around the aforementioned <code>SequenceMatcher</code>, but matching on word level tokens only.</p>\n<p>It currently only implements <code>get_matching_blocks</code>.</p>\n<p>The main advantage is that it is much faster for long texts, because it won't have to match individual characters. It isn't recommended for short texts, where character level alignment is probably more desirable.</p>\n<p>example match results:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sciencebeam_alignment.word_sequence_matcher</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">WordSequenceMatcher</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">WordSequenceMatcher</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">'word1'</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'word2'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_matching_blocks</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">WordSequenceMatcher</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">'a word1 b'</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'x word1 y'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_matching_blocks</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)]</span>\n</pre>\n<h3>GlobalSequenceMatcher and LocalSequenceMatcher</h3>\n<p>The <a href=\"https://github.com/elifesciences/sciencebeam-alignment/blob/develop/sciencebeam_alignment/align.py\" rel=\"nofollow\">GlobalSequenceMatcher and LocalSequenceMatcher</a> implements the <a href=\"https://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch_algorithm\" rel=\"nofollow\">Needleman-Wunsch</a> <a href=\"https://en.wikipedia.org/wiki/Sequence_alignment#Global_and_local_alignments\" rel=\"nofollow\">global alignment</a> as well as the <a href=\"https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm\" rel=\"nofollow\">Smith-Waterman</a> local alignment algorithms. The implementation is somewhat inspired by <a href=\"https://github.com/eseraygun/python-alignment\" rel=\"nofollow\">python-alignment</a>.</p>\n<p>It does implement <code>get_matching_blocks</code> to match Python's <a href=\"https://docs.python.org/3/library/difflib.html\" rel=\"nofollow\">SequenceMatcher</a>.</p>\n<p>By passing in a scoring object, the results can be influenced (e.g. gaps can be penalized more than mismatches).</p>\n<p>It does also provide an optimized implementation using <a href=\"https://cython.org/\" rel=\"nofollow\">Cython</a>. The level of optimization depends on the type of passed in sequences and scoring. The fastest being with integer sequences and simple scoring. Especially with longer sequences, the potential speed ups can be significant.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sciencebeam_alignment.align</span> <span class=\"kn\">import</span> <span class=\"n\">LocalSequenceMatcher</span><span class=\"p\">,</span> <span class=\"n\">SimpleScoring</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">DEFAULT_SCORING</span> <span class=\"o\">=</span> <span class=\"n\">SimpleScoring</span><span class=\"p\">(</span><span class=\"n\">match_score</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">mismatch_score</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gap_score</span><span class=\"o\">=-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">LocalSequenceMatcher</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">'a word1 b'</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'x word2 y'</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"n\">DEFAULT_SCORING</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_matching_blocks</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n</pre>\n<p>In addition, the <code>get_multiple_matching_blocks</code> can be used to retrieve multiple matching blocks with the same score:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sciencebeam_alignment.align</span> <span class=\"kn\">import</span> <span class=\"n\">GlobalSequenceMatcher</span><span class=\"p\">,</span> <span class=\"n\">SimpleScoring</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">DEFAULT_SCORING</span> <span class=\"o\">=</span> <span class=\"n\">SimpleScoring</span><span class=\"p\">(</span><span class=\"n\">match_score</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">mismatch_score</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gap_score</span><span class=\"o\">=-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matcher</span> <span class=\"o\">=</span> <span class=\"n\">GlobalSequenceMatcher</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">'xyzabc'</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'abcxyz'</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"n\">DEFAULT_SCORING</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">matcher</span><span class=\"o\">.</span><span class=\"n\">get_multiple_matching_blocks</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">[[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)],</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]]</span>\n</pre>\n<p><code>get_multiple_matching_blocks</code> returns a generator. The number of variations can be limited using the <code>limit</code> argument or by simply stopping early.</p>\n<p>The <code>GlobalSequenceMatcher</code> can also be used to calculate the <a href=\"https://en.wikipedia.org/wiki/Levenshtein_distance\" rel=\"nofollow\">Levenshtein distance</a> (or <em>edit distance</em>). An example is provided in <code>sciencebeam_alignment.levenshtein</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sciencebeam_alignment.levenshtein</span> <span class=\"kn\">import</span> <span class=\"n\">get_levenshtein_distance</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_levenshtein_distance</span><span class=\"p\">(</span><span class=\"s1\">'kitten'</span><span class=\"p\">,</span> <span class=\"s1\">'sitting'</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sciencebeam_alignment.levenshtein</span> <span class=\"kn\">import</span> <span class=\"n\">get_levenshtein_ratio</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_levenshtein_ratio</span><span class=\"p\">(</span><span class=\"s1\">'kitten'</span><span class=\"p\">,</span> <span class=\"s1\">'sitting'</span><span class=\"p\">)</span>\n<span class=\"mf\">0.5714285714285714</span>\n</pre>\n<p>Calculating the levenshtein distance is mainly provided as an example. You might want to consider using <a href=\"https://github.com/ztane/python-Levenshtein\" rel=\"nofollow\">python-Levenshtein</a>.</p>\n<p>To check whether the fast implementation is enabled:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sciencebeam_alignment.align</span> <span class=\"kn\">import</span> <span class=\"n\">native_enabled</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">native_enabled</span>\n<span class=\"kc\">True</span>\n</pre>\n<h2>Development</h2>\n<p>Development can be done either using Docker (default) or a virtual environment.</p>\n<p>All commands are available via <code>make</code>.</p>\n<h3>Development using Docker</h3>\n<p>Build and run tests:</p>\n<pre>make build <span class=\"nb\">test</span>\n</pre>\n<p>Or intended for CI:</p>\n<pre>make ci-build-and-test\n</pre>\n<h3>Development using a virtual environment</h3>\n<p><code>make</code> targets with the <code>dev-</code> prefix are intended for the use with the virtual environment.</p>\n<p>This requires that you already have Python installed.</p>\n<h4>Setup (virtual environment)</h4>\n<pre>make dev-venv\n</pre>\n<p>To update the dependencies:</p>\n<pre>make dev-install\n</pre>\n<h4>Cython (virtual environment)</h4>\n<p>Compile code using Cython:</p>\n<pre>make dev-cython-clean dev-cython-compile\n</pre>\n<h4>Tests (virtual environment)</h4>\n<pre>make dev-test\n</pre>\n<p>Or:</p>\n<pre>make dev-watch\n</pre>\n\n          </div>"}, "last_serial": 6739863, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6b93741202fb29c88aa7fb4f0f329c4a", "sha256": "b05ef5838ca72b32d8c47e08b96434c3490d3b1e3845c09b8005b4f874a58a2a"}, "downloads": -1, "filename": "sciencebeam_alignment-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6b93741202fb29c88aa7fb4f0f329c4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6691, "upload_time": "2018-08-24T10:32:14", "upload_time_iso_8601": "2018-08-24T10:32:14.924676Z", "url": "https://files.pythonhosted.org/packages/ba/b3/25ff1592c9178a52b8482b9155b9f4d6a8a4540c9ee697ac3b47d317dbef/sciencebeam_alignment-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "083ff43bdfea642cce41c291ecc7e70b", "sha256": "d327c923883a17a729eefc27c1b1ea82b92bc2ee7822f036a62d5c27058f60d6"}, "downloads": -1, "filename": "sciencebeam_alignment-0.0.2.tar.gz", "has_sig": false, "md5_digest": "083ff43bdfea642cce41c291ecc7e70b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6862, "upload_time": "2018-08-24T14:08:40", "upload_time_iso_8601": "2018-08-24T14:08:40.064245Z", "url": "https://files.pythonhosted.org/packages/5c/1f/1ac79237e5fae7cd3f3b832544c6b1bfb365c153916f63843fb789da1f5d/sciencebeam_alignment-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a974a9d9b3b91feaa6abf881ca77a312", "sha256": "f0fdffb40f6836708f9ef526ef71b465a7f4ff29f5d47fb7129e8ec7433b4f4b"}, "downloads": -1, "filename": "sciencebeam_alignment-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a974a9d9b3b91feaa6abf881ca77a312", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8786, "upload_time": "2019-08-23T22:53:53", "upload_time_iso_8601": "2019-08-23T22:53:53.593126Z", "url": "https://files.pythonhosted.org/packages/3e/3e/b8d8496426dc0dad1e9221b117fd9154ae68301bf8622d21f6808354f9eb/sciencebeam_alignment-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a29bb4fceec6b19d318d3cbd3363495a", "sha256": "56e4a984daea3a7376d78594426f4f38af47285bcda93b6f11351b66f8a04d89"}, "downloads": -1, "filename": "sciencebeam_alignment-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a29bb4fceec6b19d318d3cbd3363495a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8746, "upload_time": "2019-08-23T23:29:08", "upload_time_iso_8601": "2019-08-23T23:29:08.686592Z", "url": "https://files.pythonhosted.org/packages/2d/ca/991716febd8eda0f5c1460764ab846c2ac9058352727d4644add2b98bfc9/sciencebeam_alignment-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "b8be257c8e47b6b2404bfd6715222a8f", "sha256": "62167d35195e2a44f5186298853b7e4cc09a726eb91c189d0f0c4ee2a18c419c"}, "downloads": -1, "filename": "sciencebeam_alignment-0.0.5.tar.gz", "has_sig": false, "md5_digest": "b8be257c8e47b6b2404bfd6715222a8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12436, "upload_time": "2020-03-03T12:25:51", "upload_time_iso_8601": "2020-03-03T12:25:51.066259Z", "url": "https://files.pythonhosted.org/packages/58/4b/053c438c812662abdb38c2287872dbe1610abe6c186c57ed1145fa60b800/sciencebeam_alignment-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8be257c8e47b6b2404bfd6715222a8f", "sha256": "62167d35195e2a44f5186298853b7e4cc09a726eb91c189d0f0c4ee2a18c419c"}, "downloads": -1, "filename": "sciencebeam_alignment-0.0.5.tar.gz", "has_sig": false, "md5_digest": "b8be257c8e47b6b2404bfd6715222a8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12436, "upload_time": "2020-03-03T12:25:51", "upload_time_iso_8601": "2020-03-03T12:25:51.066259Z", "url": "https://files.pythonhosted.org/packages/58/4b/053c438c812662abdb38c2287872dbe1610abe6c186c57ed1145fa60b800/sciencebeam_alignment-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:39 2020"}