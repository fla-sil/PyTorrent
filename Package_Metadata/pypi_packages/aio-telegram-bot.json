{"info": {"author": "Valery Vishnevskiy", "author_email": "v.v.vishnevskiy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Communications :: Chat", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# aio-telegram-bot\n[![Build Status](https://travis-ci.org/v-v-vishnevskiy/aio-telegram-bot.svg?branch=master)](https://travis-ci.org/v-v-vishnevskiy/aio-telegram-bot)\n[![codecov](https://codecov.io/gh/v-v-vishnevskiy/aio-telegram-bot/branch/master/graph/badge.svg)](https://codecov.io/gh/v-v-vishnevskiy/aio-telegram-bot)\n\nAn asynchronous framework for building your own Telegram Bot over [API](https://core.telegram.org/bots/api).\n\n\n## Installation\n`aio-telegram-bot` requires Python 3.5.3+ and is available on PyPI:\n```\n$ pip install aio-telegram-bot\n```\n\n\\*_Compatible with PyPy3.5-6.0.0+_\n\n\n## Examples\n\n#### Polling example\n\n```python\nimport asyncio\nimport os\n\nfrom aiotelegrambot import Bot, Client, Content, Message\nfrom aiotelegrambot.rules import Contains\n\n\nasync def hi(message: Message):\n    await message.send_message(\"Hello!\", True)\n\n\nasync def run(bot: Bot):\n    await bot.initialize()\n    while True:\n        await asyncio.sleep(1)\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    client = Client(os.environ[\"TELEGRAM_BOT_TOKEN\"])\n    bot = Bot(client)\n    bot.add_handler(hi, content_type=Content.TEXT, rule=Contains(\"hi\"))\n\n    try:\n        loop.run_until_complete(run(bot))\n    except KeyboardInterrupt:\n        loop.run_until_complete(bot.close())\n        loop.run_until_complete(bot.client.close())\n    finally:\n        loop.close()\n```\n\nRunning:\n\n```\n$ export TELEGRAM_BOT_TOKEN=12345678:replace-me-with-real-token\n$ python3 polling.py\n```\n\n---\n\n#### Webhook example\n\nExample of how to generate ssl certificate:\n`openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout domain_srv.key -out domain_srv.crt`\n\n```python\nimport argparse\nimport json\nimport os\nimport ssl\n\nfrom aiohttp import web\nfrom async_generator import async_generator, yield_\n\nfrom aiotelegrambot import Bot, Client, Content, Handlers, Message\nfrom aiotelegrambot.rules import Contains\n\nhandlers = Handlers()\n\nTOKEN = os.environ[\"TELEGRAM_BOT_TOKEN\"]\nHOST = os.environ[\"TELEGRAM_BOT_HOST\"]\nPORT = 8443\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"files\", metavar=\"N\", type=str, nargs=\"+\")\nSSL_PUBLIC_KEY, SSL_PRIVATE_KEY = parser.parse_args().files\n\n\n@handlers.add(content_type=Content.TEXT, rule=Contains(\"hi\"))\nasync def hi(message: Message):\n    await message.send_message(\"Hello!\")\n\n\nasync def webhook_handle(request):\n    bot = request.app[\"bot\"]\n    data = await request.text()\n    await bot.process_update(json.loads(data))\n    return web.Response()\n\n\n@async_generator\nasync def init_bot(app: web.Application):\n    bot = Bot(Client(TOKEN), handlers)\n    await bot.initialize(webhook=True)\n    await bot.client.set_webhook(\"https://{}:{}/{}\".format(HOST, PORT, TOKEN), certificate=SSL_PUBLIC_KEY)\n\n    app[\"bot\"] = bot\n\n    await yield_()\n\n    await bot.client.delete_webhook()\n    await bot.close()\n    await bot.client.close()\n\n\napp = web.Application()\napp.router.add_post(\"/{}\".format(TOKEN), webhook_handle)\napp.cleanup_ctx.extend([init_bot])\n\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.load_cert_chain(SSL_PUBLIC_KEY, SSL_PRIVATE_KEY)\n\nweb.run_app(app, host=\"0.0.0.0\", port=PORT, ssl_context=context)\n```\n\nRunning:\n```\n$ export TELEGRAM_BOT_TOKEN=12345678:replace-me-with-real-token\n$ export TELEGRAM_BOT_HOST=real.host.com\n$ python3 webhook.py domain_srv.crt domain_srv.key\n```\n\n## License\n`aio-telegram-bot` is offered under the MIT license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/v-v-vishnevskiy/aio-telegram-bot", "keywords": "aio,async,asyncio,telegram,bot", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aio-telegram-bot", "package_url": "https://pypi.org/project/aio-telegram-bot/", "platform": "", "project_url": "https://pypi.org/project/aio-telegram-bot/", "project_urls": {"CI: Travis": "https://travis-ci.org/v-v-vishnevskiy/aio-telegram-bot", "Coverage: codecov": "https://codecov.io/gh/v-v-vishnevskiy/aio-telegram-bot", "GitHub: repo": "https://github.com/v-v-vishnevskiy/aio-telegram-bot", "Homepage": "https://github.com/v-v-vishnevskiy/aio-telegram-bot"}, "release_url": "https://pypi.org/project/aio-telegram-bot/1.0.0/", "requires_dist": ["aiohttp (==3.5.4)", "aiojobs (==0.2.2)"], "requires_python": ">=3.5.3", "summary": "An asynchronous framework for building your own Telegram Bot", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aio-telegram-bot</h1>\n<p><a href=\"https://travis-ci.org/v-v-vishnevskiy/aio-telegram-bot\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb54b74b8fa093bdf62b546e41fe1e38b20ab541/68747470733a2f2f7472617669732d63692e6f72672f762d762d766973686e6576736b69792f61696f2d74656c656772616d2d626f742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/v-v-vishnevskiy/aio-telegram-bot\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e94b1b6183e16b71a97f2d312cbc3458b6a25bf/68747470733a2f2f636f6465636f762e696f2f67682f762d762d766973686e6576736b69792f61696f2d74656c656772616d2d626f742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>An asynchronous framework for building your own Telegram Bot over <a href=\"https://core.telegram.org/bots/api\" rel=\"nofollow\">API</a>.</p>\n<h2>Installation</h2>\n<p><code>aio-telegram-bot</code> requires Python 3.5.3+ and is available on PyPI:</p>\n<pre><code>$ pip install aio-telegram-bot\n</code></pre>\n<p>*<em>Compatible with PyPy3.5-6.0.0+</em></p>\n<h2>Examples</h2>\n<h4>Polling example</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiotelegrambot</span> <span class=\"kn\">import</span> <span class=\"n\">Bot</span><span class=\"p\">,</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Content</span><span class=\"p\">,</span> <span class=\"n\">Message</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiotelegrambot.rules</span> <span class=\"kn\">import</span> <span class=\"n\">Contains</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hi</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Message</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"s2\">\"Hello!\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"n\">Bot</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"TELEGRAM_BOT_TOKEN\"</span><span class=\"p\">])</span>\n    <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">Bot</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n    <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">add_handler</span><span class=\"p\">(</span><span class=\"n\">hi</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"n\">Content</span><span class=\"o\">.</span><span class=\"n\">TEXT</span><span class=\"p\">,</span> <span class=\"n\">rule</span><span class=\"o\">=</span><span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s2\">\"hi\"</span><span class=\"p\">))</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">())</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">())</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Running:</p>\n<pre><code>$ export TELEGRAM_BOT_TOKEN=12345678:replace-me-with-real-token\n$ python3 polling.py\n</code></pre>\n<hr>\n<h4>Webhook example</h4>\n<p>Example of how to generate ssl certificate:\n<code>openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout domain_srv.key -out domain_srv.crt</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ssl</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">async_generator</span> <span class=\"kn\">import</span> <span class=\"n\">async_generator</span><span class=\"p\">,</span> <span class=\"n\">yield_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiotelegrambot</span> <span class=\"kn\">import</span> <span class=\"n\">Bot</span><span class=\"p\">,</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Content</span><span class=\"p\">,</span> <span class=\"n\">Handlers</span><span class=\"p\">,</span> <span class=\"n\">Message</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiotelegrambot.rules</span> <span class=\"kn\">import</span> <span class=\"n\">Contains</span>\n\n<span class=\"n\">handlers</span> <span class=\"o\">=</span> <span class=\"n\">Handlers</span><span class=\"p\">()</span>\n\n<span class=\"n\">TOKEN</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"TELEGRAM_BOT_TOKEN\"</span><span class=\"p\">]</span>\n<span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"TELEGRAM_BOT_HOST\"</span><span class=\"p\">]</span>\n<span class=\"n\">PORT</span> <span class=\"o\">=</span> <span class=\"mi\">8443</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"files\"</span><span class=\"p\">,</span> <span class=\"n\">metavar</span><span class=\"o\">=</span><span class=\"s2\">\"N\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s2\">\"+\"</span><span class=\"p\">)</span>\n<span class=\"n\">SSL_PUBLIC_KEY</span><span class=\"p\">,</span> <span class=\"n\">SSL_PRIVATE_KEY</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">files</span>\n\n\n<span class=\"nd\">@handlers</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"n\">Content</span><span class=\"o\">.</span><span class=\"n\">TEXT</span><span class=\"p\">,</span> <span class=\"n\">rule</span><span class=\"o\">=</span><span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"s2\">\"hi\"</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hi</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Message</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"s2\">\"Hello!\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">webhook_handle</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"s2\">\"bot\"</span><span class=\"p\">]</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">process_update</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@async_generator</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">init_bot</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">:</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">):</span>\n    <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">Bot</span><span class=\"p\">(</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">TOKEN</span><span class=\"p\">),</span> <span class=\"n\">handlers</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">webhook</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_webhook</span><span class=\"p\">(</span><span class=\"s2\">\"https://</span><span class=\"si\">{}</span><span class=\"s2\">:</span><span class=\"si\">{}</span><span class=\"s2\">/</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">,</span> <span class=\"n\">TOKEN</span><span class=\"p\">),</span> <span class=\"n\">certificate</span><span class=\"o\">=</span><span class=\"n\">SSL_PUBLIC_KEY</span><span class=\"p\">)</span>\n\n    <span class=\"n\">app</span><span class=\"p\">[</span><span class=\"s2\">\"bot\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bot</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">yield_</span><span class=\"p\">()</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_webhook</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_post</span><span class=\"p\">(</span><span class=\"s2\">\"/</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">TOKEN</span><span class=\"p\">),</span> <span class=\"n\">webhook_handle</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">cleanup_ctx</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">init_bot</span><span class=\"p\">])</span>\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">create_default_context</span><span class=\"p\">(</span><span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">Purpose</span><span class=\"o\">.</span><span class=\"n\">CLIENT_AUTH</span><span class=\"p\">)</span>\n<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">load_cert_chain</span><span class=\"p\">(</span><span class=\"n\">SSL_PUBLIC_KEY</span><span class=\"p\">,</span> <span class=\"n\">SSL_PRIVATE_KEY</span><span class=\"p\">)</span>\n\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"0.0.0.0\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">PORT</span><span class=\"p\">,</span> <span class=\"n\">ssl_context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<p>Running:</p>\n<pre><code>$ export TELEGRAM_BOT_TOKEN=12345678:replace-me-with-real-token\n$ export TELEGRAM_BOT_HOST=real.host.com\n$ python3 webhook.py domain_srv.crt domain_srv.key\n</code></pre>\n<h2>License</h2>\n<p><code>aio-telegram-bot</code> is offered under the MIT license.</p>\n\n          </div>"}, "last_serial": 5304942, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a891cc05aadea82d4cb845a5cef60f23", "sha256": "56aa78be8cc3dfa574bdf86a5eed8dd486f001c4f6620549fe34432798fe50bb"}, "downloads": -1, "filename": "aio_telegram_bot-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a891cc05aadea82d4cb845a5cef60f23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 11576, "upload_time": "2019-05-22T23:19:55", "upload_time_iso_8601": "2019-05-22T23:19:55.693406Z", "url": "https://files.pythonhosted.org/packages/4f/dc/8a6b19eef74b089b9c839a07691aa5d4d2b4b261cb93071f81cb226d9ba7/aio_telegram_bot-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "373ef9481d9f17e51d5c813d7c2991f2", "sha256": "472cbc7f2caf2cb695341e94eb3ee5af216a8ae52f92018558c41cf64567ad44"}, "downloads": -1, "filename": "aio-telegram-bot-1.0.0.tar.gz", "has_sig": false, "md5_digest": "373ef9481d9f17e51d5c813d7c2991f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 10309, "upload_time": "2019-05-22T23:19:58", "upload_time_iso_8601": "2019-05-22T23:19:58.177605Z", "url": "https://files.pythonhosted.org/packages/82/19/4f0413345c384e935eab18a5efac575b9c5978109d2a2a0ce5e5b3daea2b/aio-telegram-bot-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a891cc05aadea82d4cb845a5cef60f23", "sha256": "56aa78be8cc3dfa574bdf86a5eed8dd486f001c4f6620549fe34432798fe50bb"}, "downloads": -1, "filename": "aio_telegram_bot-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a891cc05aadea82d4cb845a5cef60f23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 11576, "upload_time": "2019-05-22T23:19:55", "upload_time_iso_8601": "2019-05-22T23:19:55.693406Z", "url": "https://files.pythonhosted.org/packages/4f/dc/8a6b19eef74b089b9c839a07691aa5d4d2b4b261cb93071f81cb226d9ba7/aio_telegram_bot-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "373ef9481d9f17e51d5c813d7c2991f2", "sha256": "472cbc7f2caf2cb695341e94eb3ee5af216a8ae52f92018558c41cf64567ad44"}, "downloads": -1, "filename": "aio-telegram-bot-1.0.0.tar.gz", "has_sig": false, "md5_digest": "373ef9481d9f17e51d5c813d7c2991f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 10309, "upload_time": "2019-05-22T23:19:58", "upload_time_iso_8601": "2019-05-22T23:19:58.177605Z", "url": "https://files.pythonhosted.org/packages/82/19/4f0413345c384e935eab18a5efac575b9c5978109d2a2a0ce5e5b3daea2b/aio-telegram-bot-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:43 2020"}