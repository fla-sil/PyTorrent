{"info": {"author": "Martin Olejar", "author_email": "martin.olejar@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Embedded Systems", "Topic :: Utilities"], "description": "pyMBoot\n=======\n\n[![Build Status](https://travis-ci.org/molejar/pyMBoot.svg?branch=master)](https://travis-ci.org/molejar/pyMBoot)\n[![PyPI Status](https://img.shields.io/pypi/v/mboot.svg)](https://pypi.python.org/pypi/mboot)\n[![Python Version](https://img.shields.io/pypi/pyversions/mboot.svg)](https://www.python.org)\n\npyMBoot is an Open Source python based library for configuring and upgrading the firmware in NXP Microcontrolers via\nembedded [MCUBOOT](https://www.nxp.com/support/developer-resources/software-development-tools/mcuxpresso-software-and-tools/mcuboot-mcu-bootloader-for-nxp-microcontrollers:MCUBOOT)\n(MCU Bootloader). Detailed description of `MCUBOOT / KBOOT` key features and functionality is located [here](https://freescale.jiveon.com/docs/DOC-104512).\n\n> This project is still in developing phase. Please, test it and report founded issues.\n\nDependencies\n------------\n\n- [Python >3.6](https://www.python.org) - The interpreter for Python programing language\n- [Click](http://click.pocoo.org) - Python package for creating beautiful command line interface.\n- [bincopy](https://github.com/eerimoq/bincopy) - Python package for parsing S-Record, Intel HEX and TI-TXT files.\n- [easy_enum](https://github.com/molejar/pyEnum) - User friendly implementation of documented Enum type for Python language.\n- [PyUSB](https://walac.github.io/pyusb/) - Python package to access USB devices in Linux OS.\n- [PyWinUSB](https://github.com/rene-aguirre/pywinusb) - Python package that simplifies USB-HID communications on Windows OS.\n- [pyserial](https://github.com/pyserial/pyserial) - Python package for communication over Serial port in Linux and Windows OS.\n\nInstallation\n------------\n\n```bash\n $ pip install mboot\n```\n\nTo install the latest version from master branch execute in shell following command:\n\n```bash\n $ pip install -U https://github.com/molejar/pyMBoot/archive/master.zip\n```\n\nIn case of development, install it from cloned sources:\n\n```bash\n $ git clone https://github.com/molejar/pyMBoot.git\n $ cd pyMBoot\n $ pip install -U -e .\n```\n\n**NOTE:** You may run into a permissions issues running these commands. Here are a few options how to fix it:\n\n1. Run with `sudo` to install pyMBoot and dependencies globally\n2. Specify the `--user` option to install locally into your home directory (export \"~/.local/bin\" into PATH variable if haven't).\n3. Run the command in a [virtualenv](https://virtualenv.pypa.io/en/latest/) local to a specific project working set.\n\n> For running `mboot` module or CLI without root privileges in Linux OS copy following udev rules\n[90-imx-sdp.rules](https://github.com/molejar/pyIMX/blob/master/udev/90-imx-sdp.rules)\ninto `/etc/udev/rules.d` directory and reload it with command: `sudo udevadm control --reload-rules`.\n\nUsage\n-----\n\nThe API of `mboot` module is intuitive and fully reflecting the functionality described in reference manual of any \nsupported device. It's basic usage is presented in following example.\n\n```python\nimport mboot\n\ndevices = mboot.scan_usb()\n\nif devices:\n    mb = mboot.McuBoot(devices[0])\n    mb.open()\n    # read 100 bytes from address 0\n    data = mb.read_memory(0, 100)\n    if data is None:\n        print(mb.status_info)\n        mb.close()\n        exit()\n\n    # other commands ...\n\n    mb.close()\n```\n\n`McuBoot` class is supporting `with` statement what is eliminating the explicit call of `open` and `close` methods. The \ncode then looks more cleaner as you can see in following example.\n\n```python\nfrom mboot import scan_usb, McuBoot\n\ndevices = scan_usb()\n\nif devices:\n    with McuBoot(devices[0]) as mb:\n        # read 100 bytes from address 0\n        data = mb.read_memory(0, 100)\n        if data is None:\n            print(mb.status_info)\n            exit()\n\n        # other commands ...\n```\n\n> If you call `reset()` command inside `with` block, the device is automatically reopened. You can skip this with \nexplicit argument `reset(reopen=False)`\n\nBy default is command error propagated by return value and must be processed individually for every command. In many \nuse-cases is code execution interrupted if any command finish with error. Therefore you have the option to enable the \nexception also for command error. The code is then much more readable as you can see in flowing example.\n\n```python\nfrom mboot import scan_usb, McuBoot, McuBootError\n\ndevices = scan_usb()\n\nif devices:\n    try:\n        with McuBoot(devices[0], True) as mb:\n            # read 100 bytes from address 0\n            data = mb.read_memory(0, 100)\n            # other commands ...\n\n    except McuBootError as e:\n        print(str(e))\n```\n\n`mboot` module is implementing also logging functionality for easy debugging all communication interfaces. To get it\nworking you need only import `logging` module and set the logging level (`DEBUG` or `INFO`) with following line of code: \n`logging.basicConfig(level=logging.DEBUG)`\n\n```python\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n**The example of terminal output with enabled logging functionality:**\n\n```text\nINFO:MBOOT:Connect: USB COMPOSITE DEVICE (0x15A2, 0x0073)\nDEBUG:MBOOT:USB:Open Interface\nINFO:MBOOT:CMD: ReadMemory(address=0x00000000, length=100, mem_id=0)\nDEBUG:MBOOT:TX-PACKET: Tag=ReadMemory, Flags=0x00, p0=0x00000000, p1=0x00000064, p2=0x00000000\nDEBUG:MBOOT:USB:OUT[64]: 01 00 20 00 03 00 00 03 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 ...\nDEBUG:MBOOT:USB:IN [36]: 03 00 0C 00 A3 01 00 02 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 ...\nINFO:MBOOT:RX-PACKET: Tag=ReadMemoryResponse, Status=Success, Length=100\nDEBUG:MBOOT:USB:IN [36]: 04 00 20 00 00 60 00 20 C1 00 00 00 0D 85 00 00 09 01 00 00 00 00 00 00 00 ...\nDEBUG:MBOOT:USB:IN [36]: 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 09 01 00 00 00 00 00 00 00 ...\nDEBUG:MBOOT:USB:IN [36]: 04 00 20 00 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 09 ...\nDEBUG:MBOOT:USB:IN [36]: 04 00 04 00 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 09 ...\nDEBUG:MBOOT:USB:IN [36]: 03 00 0C 00 A0 00 00 02 00 00 00 00 03 00 00 00 09 01 00 00 09 01 00 00 09 ...\nDEBUG:MBOOT:RX-PACKET: Tag=GenericResponse, Status=Success, Cmd=ReadMemory\nINFO:MBOOT:CMD: Successfully Received 100 from 100 Bytes\nDEBUG:MBOOT:USB:Close Interface\n```\n\n[ mboot ] Tool\n--------------\n\nThe `mboot` module is distributed with command-line utility, which demonstrate the complete functionality of this library \nand can be used as replacement of `blhos` tool. If you write `mboot` into shell and click enter, then you get the description \nof its usage. For getting the help of individual commands just use `mboot <command name> -?`.\n\n``` bash\n  $ mboot --help\n\n    Usage: mboot [OPTIONS] COMMAND [ARGS]...\n\n      NXP MCU Bootloader Command Line Interface, version: 0.3.0\n\n      NOTE: Development version, be carefully with it usage !\n\n    Options:\n      -t, --target TEXT          Select target MKL27, LPC55, ... [optional]\n      -d, --debug INTEGER RANGE  Debug level: 0-off, 1-info, 2-debug\n      -v, --version              Show the version and exit.\n      -?, --help                 Show this message and exit.\n\n    Commands:\n      call             Call code from specified address\n      efuse            Read/Write eFuse from MCU\n      erase            Erase MCU internal or external memory\n      execute          Execute code from specified address\n      fill             Fill MCU memory with specified pattern\n      info             Get MCU info (mboot properties)\n      keyblob          Generate the Blob for given DEK Key\n      kp-enroll        Key provisioning: Enroll\n      kp-gen-key       Key provisioning: Generate Intrinsic Key\n      kp-read-kstore   Key provisioning: Read the key from key store area\n      kp-read-nvm      Key provisioning: Read the key from nonvolatile memory\n      kp-user-key      Key provisioning: Send the user key to a bootloader\n      kp-write-kstore  Key provisioning: Write the key into key store area\n      kp-write-nvm     Key provisioning: Write the key into nonvolatile memory\n      mconf            Configure external memory\n      mlist            Get list of available memories\n      otp              Read/Write internal OTP segment\n      read             Read data from MCU internal or external memory\n      reset            Reset MCU\n      resource         Flash read resource\n      sbfile           Receive SB file\n      unlock           Unlock MCU\n      update           Copy backup app from address to main app region\n      write            Write data into MCU internal or external memory\n\n```\n\n> If USB device is not in known devices list, then use `-t or --target` argument and directly specify the device VID:PID. Example: **-t 0x15A2:0x0073**\n\n<br>\n\n#### $ mboot info\n\nRead bootloader properties from connected MCU.\n\n```bash\n $ mboot info\n\n DEVICE: Kinetis Bootloader (0x15A2, 0x0073)\n\n CurrentVersion: K1.0.0\n AvailablePeripherals:\n  - UART\n  - I2C-Slave\n  - SPI-Slave\n  - USB-HID\n FlashStartAddress: 0x00000000\n FlashSize: 256.0 kiB\n FlashSectorSize: 1.0 kiB\n FlashBlockCount: 2\n AvailableCommands:\n  - FlashEraseAll\n  - FlashEraseRegion\n  - ReadMemory\n  - FillMemory\n  - FlashSecurityDisable\n  - ReceiveSBFile\n  - Call\n  - Reset\n  - SetProperty\n VerifyWrites: ON\n MaxPacketSize: 32 B\n ReservedRegions:\n  - 0x1FFFF800 - 0x20000687, 3.6 kiB\n ValidateRegions: ON\n RamStartAddress: 0x1FFFE000\n RamSize: 32.0 kiB\n SystemDeviceIdent: 0x23160D82\n FlashSecurityState: Unlocked\n\n```\n\n<br>\n\n#### $ mboot mlist\n\nGet list of available memories (internal and external)\n\n```bash\n $ mboot info\n\n DEVICE: Kinetis Bootloader (0x15A2, 0x0073)\n\n Internal Flash:\n  0) 0x00000000 - 0x00040000, Size: 256.0 kiB, Sector Size: 1.0 kiB\n\n Internal Ram:\n  0) 0x1FFFE000 - 0x20006000, Size: 32.0 kiB\n\n```\n\n<br>\n\n#### $ mboot read [OPTIONS] ADDRESS [LENGTH]\n\nRead data from MCU memory and store it into file as binary (*.bin), intel-hex (*.hex, *.ihex) or s-record (*.srec, *.s19) \nformat. If output file is not specified, the data are dumped into stdout in readable format. \n\n> LENGTH argument is optional and as default will be used the size to end of memory\n\n##### options:\n* **-c, --compress** - Compress dump output. (default: False)\n* **-f, --file** -  Output file name with extension: *.bin, *.hex, *.ihex, *.srec or *.s19\n* **-?, --help** - Show help message and exit.\n\n``` bash\n $ mboot read 0 200\n\n Reading from MCU memory, please wait !\n\n  ADDRESS | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F | 0123456789ABCDEF\n -----------------------------------------------------------------------------\n 00000000 | 00 60 00 20 C1 00 00 00 D9 08 00 00 09 01 00 00 | .`. ............\n 00000010 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................\n 00000020 | 00 00 00 00 00 00 00 00 00 00 00 00 09 01 00 00 | ................\n 00000030 | 00 00 00 00 00 00 00 00 09 01 00 00 09 01 00 00 | ................\n 00000040 | 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 | ................\n 00000050 | 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 | ................\n 00000060 | 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 | ................\n 00000070 | 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 | ................\n 00000080 | 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 | ................\n 00000090 | 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 | ................\n 000000A0 | 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 | ................\n 000000B0 | 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 | ................\n 000000C0 | 0A 49 0B 4A 0B 4B 9B 1A                         | .I.J.K..\n -----------------------------------------------------------------------------\n```\n\n<br>\n\n#### $ mboot write [OPTIONS] FILE\n\nWrite data from attached FILE into MCU memory.\n\n##### options:\n* **-a, --address** - Start Address. (default: 0)\n* **-o, --offset** - Offset of input data. (default: 0)\n* **-?, --help** - Show help message and exit.\n\n``` bash\n $ mboot write blink.srec\n\n Wrote Successfully.\n```\n\n<br>\n\n#### $ mboot erase [OPTIONS]\n\nErase MCU memory from specified address and length or complete chip. \n\n##### options:\n* **-m, --mass** - Erase complete MCU memory.\n* **-a, --address** - Start Address.\n* **-l, --length** - Count of bytes aligned to flash block size.\n* **-?, --help** - Show help message and exit.\n\n``` bash\n $ mboot erase -m\n\n Chip Erased Successfully.\n```\n\n<br>\n\n#### $ mboot unlock [OPTIONS]\n\nUnlock MCU memory. \n\n##### options:\n* **-k, --key** - Use backdoor key as ASCII = S:123...8 or HEX = X:010203...08\n* **-?, --help** - Show help message and exit.\n\n``` bash\n $ mboot unlock\n\n Chip Unlocked Successfully.\n```\n\n<br>\n\n#### $ mboot fill [OPTIONS] ADDRESS LENGTH\n\nFill MCU memory with specified pattern\n\n##### options:\n* **-p, --pattern** - Pattern format (default: 0xFFFFFFFF).\n* **-?, --help** - Show help message and exit.\n\n``` bash\n $ mboot fill -p 0x11111111 0x1FFFE000 10\n\n Filled Successfully.\n```\n\n<br>\n\n#### $ mboot reset\n\nMCU SW reset\n\n``` bash\n $ mboot reset\n```\n\nTODO\n----\n\n- Implement support for UART interface\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/molejar/pyMBoot", "keywords": "", "license": "BSD3", "maintainer": "", "maintainer_email": "", "name": "mboot", "package_url": "https://pypi.org/project/mboot/", "platform": "", "project_url": "https://pypi.org/project/mboot/", "project_urls": {"Homepage": "https://github.com/molejar/pyMBoot"}, "release_url": "https://pypi.org/project/mboot/0.3.0/", "requires_dist": ["click (==7.0)", "pyserial (==3.4)", "bincopy (==16.0.0)", "easy-enum (==0.3.0)", "pyusb (==1.0.2)", "pywinusb (==0.4.2) ; platform_system == \"Windows\""], "requires_python": ">=3.6", "summary": "Python module for communication with NXP MCU Bootloader", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyMBoot</h1>\n<p><a href=\"https://travis-ci.org/molejar/pyMBoot\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7478c01a4d83c21297b5187bcced7189822187b3/68747470733a2f2f7472617669732d63692e6f72672f6d6f6c656a61722f70794d426f6f742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/mboot\" rel=\"nofollow\"><img alt=\"PyPI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3cd7c8cfba5a669a6a955f8f8d1d82427b25646/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d626f6f742e737667\"></a>\n<a href=\"https://www.python.org\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70eb45df0289af0965240b2778f333d33ceee9c2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d626f6f742e737667\"></a></p>\n<p>pyMBoot is an Open Source python based library for configuring and upgrading the firmware in NXP Microcontrolers via\nembedded <a href=\"https://www.nxp.com/support/developer-resources/software-development-tools/mcuxpresso-software-and-tools/mcuboot-mcu-bootloader-for-nxp-microcontrollers:MCUBOOT\" rel=\"nofollow\">MCUBOOT</a>\n(MCU Bootloader). Detailed description of <code>MCUBOOT / KBOOT</code> key features and functionality is located <a href=\"https://freescale.jiveon.com/docs/DOC-104512\" rel=\"nofollow\">here</a>.</p>\n<blockquote>\n<p>This project is still in developing phase. Please, test it and report founded issues.</p>\n</blockquote>\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://www.python.org\" rel=\"nofollow\">Python &gt;3.6</a> - The interpreter for Python programing language</li>\n<li><a href=\"http://click.pocoo.org\" rel=\"nofollow\">Click</a> - Python package for creating beautiful command line interface.</li>\n<li><a href=\"https://github.com/eerimoq/bincopy\" rel=\"nofollow\">bincopy</a> - Python package for parsing S-Record, Intel HEX and TI-TXT files.</li>\n<li><a href=\"https://github.com/molejar/pyEnum\" rel=\"nofollow\">easy_enum</a> - User friendly implementation of documented Enum type for Python language.</li>\n<li><a href=\"https://walac.github.io/pyusb/\" rel=\"nofollow\">PyUSB</a> - Python package to access USB devices in Linux OS.</li>\n<li><a href=\"https://github.com/rene-aguirre/pywinusb\" rel=\"nofollow\">PyWinUSB</a> - Python package that simplifies USB-HID communications on Windows OS.</li>\n<li><a href=\"https://github.com/pyserial/pyserial\" rel=\"nofollow\">pyserial</a> - Python package for communication over Serial port in Linux and Windows OS.</li>\n</ul>\n<h2>Installation</h2>\n<pre> $ pip install mboot\n</pre>\n<p>To install the latest version from master branch execute in shell following command:</p>\n<pre> $ pip install -U https://github.com/molejar/pyMBoot/archive/master.zip\n</pre>\n<p>In case of development, install it from cloned sources:</p>\n<pre> $ git clone https://github.com/molejar/pyMBoot.git\n $ <span class=\"nb\">cd</span> pyMBoot\n $ pip install -U -e .\n</pre>\n<p><strong>NOTE:</strong> You may run into a permissions issues running these commands. Here are a few options how to fix it:</p>\n<ol>\n<li>Run with <code>sudo</code> to install pyMBoot and dependencies globally</li>\n<li>Specify the <code>--user</code> option to install locally into your home directory (export \"~/.local/bin\" into PATH variable if haven't).</li>\n<li>Run the command in a <a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtualenv</a> local to a specific project working set.</li>\n</ol>\n<blockquote>\n<p>For running <code>mboot</code> module or CLI without root privileges in Linux OS copy following udev rules\n<a href=\"https://github.com/molejar/pyIMX/blob/master/udev/90-imx-sdp.rules\" rel=\"nofollow\">90-imx-sdp.rules</a>\ninto <code>/etc/udev/rules.d</code> directory and reload it with command: <code>sudo udevadm control --reload-rules</code>.</p>\n</blockquote>\n<h2>Usage</h2>\n<p>The API of <code>mboot</code> module is intuitive and fully reflecting the functionality described in reference manual of any\nsupported device. It's basic usage is presented in following example.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mboot</span>\n\n<span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"n\">mboot</span><span class=\"o\">.</span><span class=\"n\">scan_usb</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">devices</span><span class=\"p\">:</span>\n    <span class=\"n\">mb</span> <span class=\"o\">=</span> <span class=\"n\">mboot</span><span class=\"o\">.</span><span class=\"n\">McuBoot</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n    <span class=\"c1\"># read 100 bytes from address 0</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">read_memory</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">status_info</span><span class=\"p\">)</span>\n        <span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"n\">exit</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># other commands ...</span>\n\n    <span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p><code>McuBoot</code> class is supporting <code>with</code> statement what is eliminating the explicit call of <code>open</code> and <code>close</code> methods. The\ncode then looks more cleaner as you can see in following example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mboot</span> <span class=\"kn\">import</span> <span class=\"n\">scan_usb</span><span class=\"p\">,</span> <span class=\"n\">McuBoot</span>\n\n<span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"n\">scan_usb</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">devices</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">McuBoot</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">mb</span><span class=\"p\">:</span>\n        <span class=\"c1\"># read 100 bytes from address 0</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">read_memory</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">status_info</span><span class=\"p\">)</span>\n            <span class=\"n\">exit</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># other commands ...</span>\n</pre>\n<blockquote>\n<p>If you call <code>reset()</code> command inside <code>with</code> block, the device is automatically reopened. You can skip this with\nexplicit argument <code>reset(reopen=False)</code></p>\n</blockquote>\n<p>By default is command error propagated by return value and must be processed individually for every command. In many\nuse-cases is code execution interrupted if any command finish with error. Therefore you have the option to enable the\nexception also for command error. The code is then much more readable as you can see in flowing example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mboot</span> <span class=\"kn\">import</span> <span class=\"n\">scan_usb</span><span class=\"p\">,</span> <span class=\"n\">McuBoot</span><span class=\"p\">,</span> <span class=\"n\">McuBootError</span>\n\n<span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"n\">scan_usb</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">devices</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">McuBoot</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mb</span><span class=\"p\">:</span>\n            <span class=\"c1\"># read 100 bytes from address 0</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">read_memory</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n            <span class=\"c1\"># other commands ...</span>\n\n    <span class=\"k\">except</span> <span class=\"n\">McuBootError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n</pre>\n<p><code>mboot</code> module is implementing also logging functionality for easy debugging all communication interfaces. To get it\nworking you need only import <code>logging</code> module and set the logging level (<code>DEBUG</code> or <code>INFO</code>) with following line of code:\n<code>logging.basicConfig(level=logging.DEBUG)</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</pre>\n<p><strong>The example of terminal output with enabled logging functionality:</strong></p>\n<pre>INFO:MBOOT:Connect: USB COMPOSITE DEVICE (0x15A2, 0x0073)\nDEBUG:MBOOT:USB:Open Interface\nINFO:MBOOT:CMD: ReadMemory(address=0x00000000, length=100, mem_id=0)\nDEBUG:MBOOT:TX-PACKET: Tag=ReadMemory, Flags=0x00, p0=0x00000000, p1=0x00000064, p2=0x00000000\nDEBUG:MBOOT:USB:OUT[64]: 01 00 20 00 03 00 00 03 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 ...\nDEBUG:MBOOT:USB:IN [36]: 03 00 0C 00 A3 01 00 02 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 ...\nINFO:MBOOT:RX-PACKET: Tag=ReadMemoryResponse, Status=Success, Length=100\nDEBUG:MBOOT:USB:IN [36]: 04 00 20 00 00 60 00 20 C1 00 00 00 0D 85 00 00 09 01 00 00 00 00 00 00 00 ...\nDEBUG:MBOOT:USB:IN [36]: 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 09 01 00 00 00 00 00 00 00 ...\nDEBUG:MBOOT:USB:IN [36]: 04 00 20 00 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 09 ...\nDEBUG:MBOOT:USB:IN [36]: 04 00 04 00 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 09 01 00 00 09 ...\nDEBUG:MBOOT:USB:IN [36]: 03 00 0C 00 A0 00 00 02 00 00 00 00 03 00 00 00 09 01 00 00 09 01 00 00 09 ...\nDEBUG:MBOOT:RX-PACKET: Tag=GenericResponse, Status=Success, Cmd=ReadMemory\nINFO:MBOOT:CMD: Successfully Received 100 from 100 Bytes\nDEBUG:MBOOT:USB:Close Interface\n</pre>\n<h2>[ mboot ] Tool</h2>\n<p>The <code>mboot</code> module is distributed with command-line utility, which demonstrate the complete functionality of this library\nand can be used as replacement of <code>blhos</code> tool. If you write <code>mboot</code> into shell and click enter, then you get the description\nof its usage. For getting the help of individual commands just use <code>mboot &lt;command name&gt; -?</code>.</p>\n<pre>  $ mboot --help\n\n    Usage: mboot <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n\n      NXP MCU Bootloader Command Line Interface, version: <span class=\"m\">0</span>.3.0\n\n      NOTE: Development version, be carefully with it usage !\n\n    Options:\n      -t, --target TEXT          Select target MKL27, LPC55, ... <span class=\"o\">[</span>optional<span class=\"o\">]</span>\n      -d, --debug INTEGER RANGE  Debug level: <span class=\"m\">0</span>-off, <span class=\"m\">1</span>-info, <span class=\"m\">2</span>-debug\n      -v, --version              Show the version and exit.\n      -?, --help                 Show this message and exit.\n\n    Commands:\n      call             Call code from specified address\n      efuse            Read/Write eFuse from MCU\n      erase            Erase MCU internal or external memory\n      execute          Execute code from specified address\n      fill             Fill MCU memory with specified pattern\n      info             Get MCU info <span class=\"o\">(</span>mboot properties<span class=\"o\">)</span>\n      keyblob          Generate the Blob <span class=\"k\">for</span> given DEK Key\n      kp-enroll        Key provisioning: Enroll\n      kp-gen-key       Key provisioning: Generate Intrinsic Key\n      kp-read-kstore   Key provisioning: Read the key from key store area\n      kp-read-nvm      Key provisioning: Read the key from nonvolatile memory\n      kp-user-key      Key provisioning: Send the user key to a bootloader\n      kp-write-kstore  Key provisioning: Write the key into key store area\n      kp-write-nvm     Key provisioning: Write the key into nonvolatile memory\n      mconf            Configure external memory\n      mlist            Get list of available memories\n      otp              Read/Write internal OTP segment\n      <span class=\"nb\">read</span>             Read data from MCU internal or external memory\n      reset            Reset MCU\n      resource         Flash <span class=\"nb\">read</span> resource\n      sbfile           Receive SB file\n      unlock           Unlock MCU\n      update           Copy backup app from address to main app region\n      write            Write data into MCU internal or external memory\n</pre>\n<blockquote>\n<p>If USB device is not in known devices list, then use <code>-t or --target</code> argument and directly specify the device VID:PID. Example: <strong>-t 0x15A2:0x0073</strong></p>\n</blockquote>\n<br>\n<h4>$ mboot info</h4>\n<p>Read bootloader properties from connected MCU.</p>\n<pre> $ mboot info\n\n DEVICE: Kinetis Bootloader <span class=\"o\">(</span>0x15A2, 0x0073<span class=\"o\">)</span>\n\n CurrentVersion: K1.0.0\n AvailablePeripherals:\n  - UART\n  - I2C-Slave\n  - SPI-Slave\n  - USB-HID\n FlashStartAddress: 0x00000000\n FlashSize: <span class=\"m\">256</span>.0 kiB\n FlashSectorSize: <span class=\"m\">1</span>.0 kiB\n FlashBlockCount: <span class=\"m\">2</span>\n AvailableCommands:\n  - FlashEraseAll\n  - FlashEraseRegion\n  - ReadMemory\n  - FillMemory\n  - FlashSecurityDisable\n  - ReceiveSBFile\n  - Call\n  - Reset\n  - SetProperty\n VerifyWrites: ON\n MaxPacketSize: <span class=\"m\">32</span> B\n ReservedRegions:\n  - 0x1FFFF800 - 0x20000687, <span class=\"m\">3</span>.6 kiB\n ValidateRegions: ON\n RamStartAddress: 0x1FFFE000\n RamSize: <span class=\"m\">32</span>.0 kiB\n SystemDeviceIdent: 0x23160D82\n FlashSecurityState: Unlocked\n</pre>\n<br>\n<h4>$ mboot mlist</h4>\n<p>Get list of available memories (internal and external)</p>\n<pre> $ mboot info\n\n DEVICE: Kinetis Bootloader <span class=\"o\">(</span>0x15A2, 0x0073<span class=\"o\">)</span>\n\n Internal Flash:\n  <span class=\"m\">0</span><span class=\"o\">)</span> 0x00000000 - 0x00040000, Size: <span class=\"m\">256</span>.0 kiB, Sector Size: <span class=\"m\">1</span>.0 kiB\n\n Internal Ram:\n  <span class=\"m\">0</span><span class=\"o\">)</span> 0x1FFFE000 - 0x20006000, Size: <span class=\"m\">32</span>.0 kiB\n</pre>\n<br>\n<h4>$ mboot read [OPTIONS] ADDRESS [LENGTH]</h4>\n<p>Read data from MCU memory and store it into file as binary (<em>.bin), intel-hex (</em>.hex, <em>.ihex) or s-record (</em>.srec, *.s19)\nformat. If output file is not specified, the data are dumped into stdout in readable format.</p>\n<blockquote>\n<p>LENGTH argument is optional and as default will be used the size to end of memory</p>\n</blockquote>\n<h5>options:</h5>\n<ul>\n<li><strong>-c, --compress</strong> - Compress dump output. (default: False)</li>\n<li><strong>-f, --file</strong> -  Output file name with extension: *.bin, *.hex, *.ihex, *.srec or *.s19</li>\n<li><strong>-?, --help</strong> - Show help message and exit.</li>\n</ul>\n<pre> $ mboot <span class=\"nb\">read</span> <span class=\"m\">0</span> <span class=\"m\">200</span>\n\n Reading from MCU memory, please <span class=\"nb\">wait</span> !\n\n  ADDRESS <span class=\"p\">|</span> <span class=\"m\">00</span> <span class=\"m\">01</span> <span class=\"m\">02</span> <span class=\"m\">03</span> <span class=\"m\">04</span> <span class=\"m\">05</span> <span class=\"m\">06</span> <span class=\"m\">07</span> <span class=\"m\">08</span> <span class=\"m\">09</span> 0A 0B 0C 0D 0E 0F <span class=\"p\">|</span> 0123456789ABCDEF\n -----------------------------------------------------------------------------\n <span class=\"m\">00000000</span> <span class=\"p\">|</span> <span class=\"m\">00</span> <span class=\"m\">60</span> <span class=\"m\">00</span> <span class=\"m\">20</span> C1 <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> D9 <span class=\"m\">08</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> .<span class=\"sb\">`</span>. ............\n <span class=\"m\">00000010</span> <span class=\"p\">|</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n <span class=\"m\">00000020</span> <span class=\"p\">|</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n <span class=\"m\">00000030</span> <span class=\"p\">|</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n <span class=\"m\">00000040</span> <span class=\"p\">|</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n <span class=\"m\">00000050</span> <span class=\"p\">|</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n <span class=\"m\">00000060</span> <span class=\"p\">|</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n <span class=\"m\">00000070</span> <span class=\"p\">|</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n <span class=\"m\">00000080</span> <span class=\"p\">|</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n <span class=\"m\">00000090</span> <span class=\"p\">|</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n 000000A0 <span class=\"p\">|</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n 000000B0 <span class=\"p\">|</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"m\">09</span> <span class=\"m\">01</span> <span class=\"m\">00</span> <span class=\"m\">00</span> <span class=\"p\">|</span> ................\n 000000C0 <span class=\"p\">|</span> 0A <span class=\"m\">49</span> 0B 4A 0B 4B 9B 1A                         <span class=\"p\">|</span> .I.J.K..\n -----------------------------------------------------------------------------\n</pre>\n<br>\n<h4>$ mboot write [OPTIONS] FILE</h4>\n<p>Write data from attached FILE into MCU memory.</p>\n<h5>options:</h5>\n<ul>\n<li><strong>-a, --address</strong> - Start Address. (default: 0)</li>\n<li><strong>-o, --offset</strong> - Offset of input data. (default: 0)</li>\n<li><strong>-?, --help</strong> - Show help message and exit.</li>\n</ul>\n<pre> $ mboot write blink.srec\n\n Wrote Successfully.\n</pre>\n<br>\n<h4>$ mboot erase [OPTIONS]</h4>\n<p>Erase MCU memory from specified address and length or complete chip.</p>\n<h5>options:</h5>\n<ul>\n<li><strong>-m, --mass</strong> - Erase complete MCU memory.</li>\n<li><strong>-a, --address</strong> - Start Address.</li>\n<li><strong>-l, --length</strong> - Count of bytes aligned to flash block size.</li>\n<li><strong>-?, --help</strong> - Show help message and exit.</li>\n</ul>\n<pre> $ mboot erase -m\n\n Chip Erased Successfully.\n</pre>\n<br>\n<h4>$ mboot unlock [OPTIONS]</h4>\n<p>Unlock MCU memory.</p>\n<h5>options:</h5>\n<ul>\n<li><strong>-k, --key</strong> - Use backdoor key as ASCII = S:123...8 or HEX = X:010203...08</li>\n<li><strong>-?, --help</strong> - Show help message and exit.</li>\n</ul>\n<pre> $ mboot unlock\n\n Chip Unlocked Successfully.\n</pre>\n<br>\n<h4>$ mboot fill [OPTIONS] ADDRESS LENGTH</h4>\n<p>Fill MCU memory with specified pattern</p>\n<h5>options:</h5>\n<ul>\n<li><strong>-p, --pattern</strong> - Pattern format (default: 0xFFFFFFFF).</li>\n<li><strong>-?, --help</strong> - Show help message and exit.</li>\n</ul>\n<pre> $ mboot fill -p 0x11111111 0x1FFFE000 <span class=\"m\">10</span>\n\n Filled Successfully.\n</pre>\n<br>\n<h4>$ mboot reset</h4>\n<p>MCU SW reset</p>\n<pre> $ mboot reset\n</pre>\n<h2>TODO</h2>\n<ul>\n<li>Implement support for UART interface</li>\n</ul>\n\n          </div>"}, "last_serial": 6404064, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "8c7e450685116ac75bd392cdeb890149", "sha256": "763b16380c5000bc551fb4db666532304f8f08cdf3d576e281931ceb7876a0bd"}, "downloads": -1, "filename": "mboot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8c7e450685116ac75bd392cdeb890149", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24906, "upload_time": "2019-04-13T08:50:12", "upload_time_iso_8601": "2019-04-13T08:50:12.135641Z", "url": "https://files.pythonhosted.org/packages/cf/a5/177dc10d5cbec46a6a7bd0cd478c9decb4632e05681466864d997d9360f9/mboot-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "29088fd90b2b131bc176fb15915df2fd", "sha256": "6e398bd95d8c883736ab16f3c5b559c1b4b1bf07a901d1dd94a0ebe1f0f62d86"}, "downloads": -1, "filename": "mboot-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29088fd90b2b131bc176fb15915df2fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35802, "upload_time": "2020-01-06T20:03:12", "upload_time_iso_8601": "2020-01-06T20:03:12.590055Z", "url": "https://files.pythonhosted.org/packages/31/df/5440998b889f575232624998cb88b39c149ea8c58384c76b360ee38a0b2c/mboot-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9c330a5e2cb4211d678677497538716", "sha256": "7a122eaada4c3b425cceb9d3ba6ae562e748f2d9d7448983ec0052c04a405712"}, "downloads": -1, "filename": "mboot-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f9c330a5e2cb4211d678677497538716", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35534, "upload_time": "2020-01-06T20:03:14", "upload_time_iso_8601": "2020-01-06T20:03:14.360189Z", "url": "https://files.pythonhosted.org/packages/7e/44/dab8bdc1cfd1a17d1940c02c9e2906b451c9a0c2954cec38ba5501ca3ce4/mboot-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29088fd90b2b131bc176fb15915df2fd", "sha256": "6e398bd95d8c883736ab16f3c5b559c1b4b1bf07a901d1dd94a0ebe1f0f62d86"}, "downloads": -1, "filename": "mboot-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29088fd90b2b131bc176fb15915df2fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35802, "upload_time": "2020-01-06T20:03:12", "upload_time_iso_8601": "2020-01-06T20:03:12.590055Z", "url": "https://files.pythonhosted.org/packages/31/df/5440998b889f575232624998cb88b39c149ea8c58384c76b360ee38a0b2c/mboot-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9c330a5e2cb4211d678677497538716", "sha256": "7a122eaada4c3b425cceb9d3ba6ae562e748f2d9d7448983ec0052c04a405712"}, "downloads": -1, "filename": "mboot-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f9c330a5e2cb4211d678677497538716", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35534, "upload_time": "2020-01-06T20:03:14", "upload_time_iso_8601": "2020-01-06T20:03:14.360189Z", "url": "https://files.pythonhosted.org/packages/7e/44/dab8bdc1cfd1a17d1940c02c9e2906b451c9a0c2954cec38ba5501ca3ce4/mboot-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:02 2020"}