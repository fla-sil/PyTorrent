{"info": {"author": "Armin Sajadi", "author_email": "asajadi@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Fast Personalized PageRank Implementation\n\nI needed a fast PageRank for [Wikisim](https://github.com/asajadi/wikisim) project. It had to be fast enough to run real time on relatively large graphs. NetworkX was the obvious library to use, however, it needed back and forth translation from my graph representation (which was the pretty standard csr matrix), to its internal graph data structure. These translations were slowing down the process. \n\nI implemented two versions of the algorithm in Python, both inspired by the sparse fast solutions given in [**Cleve Moler**](https://en.wikipedia.org/wiki/Cleve_Moler)'s book, [*Experiments with MATLAB*](https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/exm/chapters/pagerank.pdf). The power method is much faster with enough precision for our task. \n\n### Personalized PageRank\nI modified the algorithm a little bit to be able to calculate **personalized PageRank** as well. \n\n\n### Comparison with Popular Python Implementations: NetworkX and iGraph\nBoth implementations (exact solution and *power method*) are much faster than their correspondent methods in NetworkX. The *power method* is also faster than the iGraph native implementation, which is also an eigen-vector based solution. Benchmarking is done on a `ml.t3.2xlarge` SageMaker instance. \n\n### What is the major drawback of NetworkX PageRank?\nI gave up using NetworkX for one simple reason: I had to calculate PageRank several times, and my internal representation of a graph was a simple sparse matrix. Every time I wanted to calculate PageRank I had to translate it to the graph representation of NetworkX, which was slow. My benchmarking shows that NetworkX  has a pretty fast implementation of PageRank ( `networkx.pagerank_numpy` and  '`networkx.pagerank_scipy`), but translating from its own graph data structure to a csr matrix before doing the actual calculations is exactly what exactly slows down the whole algorithm. \n\n**Note**: I didn't count the time spent on `nx.from_scipy_sparse_matrix` (converting a csr matrix before passing it to NetworkX PageRank) in my benchmarking, But I could! Because that was another bottleneck for me, and for many other cases that one has a `csr` adjacency matrix.\n\n### Python Implementation\nThe python package is hosted at https://github.com/asajadi/fast-pagerank and you can find the installation guide in the [README.md](https://github.com/asajadi/fast-pagerank/blob/master/README.md) file. You also can find a detailed analysis in [the jupyter notebook](https://github.com/asajadi/fast-pagerank/blob/master/notebooks/Fast-PageRank.ipynb) or [this blog post](https://asajadi.github.io/fast-pagerank/). \n\n\n## Usage\n### Installation:\n`pip install fast-pagerank`\n\n### Example\nLet's take Example 1 from https://www.cs.princeton.edu/~chazelle/courses/BIB/pagerank.htm \n\n![](example1.gif)\n\nAssuming A=0, B=1, C=2, D=3:\n\n```\n>>> import numpy as np\n>>> from scipy import sparse\n>>> from fast_pagerank import pagerank\n>>> from fast_pagerank import pagerank_power\n>>> A = np.array([[0,1], [0, 2], [1, 2],[2,0],[3,2]])\n>>> weights = [1,1,1,1,1]\n>>> G = sparse.csr_matrix((weights, (A[:,0], A[:,1])), shape=(4, 4))\n>>> pr=pagerank(G, p=0.85)\n>>> pr\narray([0.37252685, 0.19582391, 0.39414924, 0.0375    ])\n```\n\nThe output elements are essentially the same numbers written on the nodes, but normalized (multiply the vector by 4 and you will get the same numbers) \n\nWe can add personalization, or use *power method*:\n\n```\n>>> personalize = np.array([0.4, 0.2, 0.2, 0.4])\n>>> pr=pagerank_power(G, p=0.85, personalize=personalize, tol=1e-6)\n>>> pr\narray([0.37817981, 0.18572635, 0.38609383, 0.05      ])\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/asajadi/fast_pagerank", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fast-pagerank", "package_url": "https://pypi.org/project/fast-pagerank/", "platform": "", "project_url": "https://pypi.org/project/fast-pagerank/", "project_urls": {"Homepage": "https://github.com/asajadi/fast_pagerank"}, "release_url": "https://pypi.org/project/fast-pagerank/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "A fast PageRank and Personalized PageRank implementation", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Fast Personalized PageRank Implementation</h1>\n<p>I needed a fast PageRank for <a href=\"https://github.com/asajadi/wikisim\" rel=\"nofollow\">Wikisim</a> project. It had to be fast enough to run real time on relatively large graphs. NetworkX was the obvious library to use, however, it needed back and forth translation from my graph representation (which was the pretty standard csr matrix), to its internal graph data structure. These translations were slowing down the process.</p>\n<p>I implemented two versions of the algorithm in Python, both inspired by the sparse fast solutions given in <a href=\"https://en.wikipedia.org/wiki/Cleve_Moler\" rel=\"nofollow\"><strong>Cleve Moler</strong></a>'s book, <a href=\"https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/exm/chapters/pagerank.pdf\" rel=\"nofollow\"><em>Experiments with MATLAB</em></a>. The power method is much faster with enough precision for our task.</p>\n<h3>Personalized PageRank</h3>\n<p>I modified the algorithm a little bit to be able to calculate <strong>personalized PageRank</strong> as well.</p>\n<h3>Comparison with Popular Python Implementations: NetworkX and iGraph</h3>\n<p>Both implementations (exact solution and <em>power method</em>) are much faster than their correspondent methods in NetworkX. The <em>power method</em> is also faster than the iGraph native implementation, which is also an eigen-vector based solution. Benchmarking is done on a <code>ml.t3.2xlarge</code> SageMaker instance.</p>\n<h3>What is the major drawback of NetworkX PageRank?</h3>\n<p>I gave up using NetworkX for one simple reason: I had to calculate PageRank several times, and my internal representation of a graph was a simple sparse matrix. Every time I wanted to calculate PageRank I had to translate it to the graph representation of NetworkX, which was slow. My benchmarking shows that NetworkX  has a pretty fast implementation of PageRank ( <code>networkx.pagerank_numpy</code> and  '<code>networkx.pagerank_scipy</code>), but translating from its own graph data structure to a csr matrix before doing the actual calculations is exactly what exactly slows down the whole algorithm.</p>\n<p><strong>Note</strong>: I didn't count the time spent on <code>nx.from_scipy_sparse_matrix</code> (converting a csr matrix before passing it to NetworkX PageRank) in my benchmarking, But I could! Because that was another bottleneck for me, and for many other cases that one has a <code>csr</code> adjacency matrix.</p>\n<h3>Python Implementation</h3>\n<p>The python package is hosted at <a href=\"https://github.com/asajadi/fast-pagerank\" rel=\"nofollow\">https://github.com/asajadi/fast-pagerank</a> and you can find the installation guide in the <a href=\"https://github.com/asajadi/fast-pagerank/blob/master/README.md\" rel=\"nofollow\">README.md</a> file. You also can find a detailed analysis in <a href=\"https://github.com/asajadi/fast-pagerank/blob/master/notebooks/Fast-PageRank.ipynb\" rel=\"nofollow\">the jupyter notebook</a> or <a href=\"https://asajadi.github.io/fast-pagerank/\" rel=\"nofollow\">this blog post</a>.</p>\n<h2>Usage</h2>\n<h3>Installation:</h3>\n<p><code>pip install fast-pagerank</code></p>\n<h3>Example</h3>\n<p>Let's take Example 1 from <a href=\"https://www.cs.princeton.edu/%7Echazelle/courses/BIB/pagerank.htm\" rel=\"nofollow\">https://www.cs.princeton.edu/~chazelle/courses/BIB/pagerank.htm</a></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68f61d3caf50b080c7280418cbc1af1009e43347/6578616d706c65312e676966\"></p>\n<p>Assuming A=0, B=1, C=2, D=3:</p>\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from scipy import sparse\n&gt;&gt;&gt; from fast_pagerank import pagerank\n&gt;&gt;&gt; from fast_pagerank import pagerank_power\n&gt;&gt;&gt; A = np.array([[0,1], [0, 2], [1, 2],[2,0],[3,2]])\n&gt;&gt;&gt; weights = [1,1,1,1,1]\n&gt;&gt;&gt; G = sparse.csr_matrix((weights, (A[:,0], A[:,1])), shape=(4, 4))\n&gt;&gt;&gt; pr=pagerank(G, p=0.85)\n&gt;&gt;&gt; pr\narray([0.37252685, 0.19582391, 0.39414924, 0.0375    ])\n</code></pre>\n<p>The output elements are essentially the same numbers written on the nodes, but normalized (multiply the vector by 4 and you will get the same numbers)</p>\n<p>We can add personalization, or use <em>power method</em>:</p>\n<pre><code>&gt;&gt;&gt; personalize = np.array([0.4, 0.2, 0.2, 0.4])\n&gt;&gt;&gt; pr=pagerank_power(G, p=0.85, personalize=personalize, tol=1e-6)\n&gt;&gt;&gt; pr\narray([0.37817981, 0.18572635, 0.38609383, 0.05      ])\n</code></pre>\n\n          </div>"}, "last_serial": 5454590, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "fe34943506ab8d28b6fbbde354d111ae", "sha256": "3b9e34324609add9e9797cb5f1f18485c994815ea966b21bbe4f361cb5ef9e38"}, "downloads": -1, "filename": "fast_pagerank-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fe34943506ab8d28b6fbbde354d111ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5204, "upload_time": "2019-06-03T22:24:05", "upload_time_iso_8601": "2019-06-03T22:24:05.323032Z", "url": "https://files.pythonhosted.org/packages/e4/a8/dac548a1a17f8d65d072deadf88789a218af033195e89dfc19b44cd39771/fast_pagerank-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92a1ed2d5a9ff7f8fc2ae2c192e84adf", "sha256": "ee54c03974bbf7008025c561b167fc99215265472d5c98823ca3491c0374ed53"}, "downloads": -1, "filename": "fast-pagerank-0.0.3.tar.gz", "has_sig": false, "md5_digest": "92a1ed2d5a9ff7f8fc2ae2c192e84adf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3884, "upload_time": "2019-06-03T22:24:07", "upload_time_iso_8601": "2019-06-03T22:24:07.357265Z", "url": "https://files.pythonhosted.org/packages/42/30/4277209dadb2a4b780811a9e6800b6c4d13cf805f39be70101b231f19c8e/fast-pagerank-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "acfbc33adbb5d2d0b272dedb08819f04", "sha256": "5d8cf7f5954690d80e7f4b4670606f17ad2b2c1d9aa8feabdc4d4e4242deaae5"}, "downloads": -1, "filename": "fast_pagerank-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "acfbc33adbb5d2d0b272dedb08819f04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5227, "upload_time": "2019-06-27T01:56:53", "upload_time_iso_8601": "2019-06-27T01:56:53.131873Z", "url": "https://files.pythonhosted.org/packages/d9/3d/8563e4eafc36e90754cc43339861994aeed9fd7cd8ff01eeafb847b73bfe/fast_pagerank-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c59fdf47be64a7b479d10802eb607e4d", "sha256": "ad62ea8ac7298b4e7998c18e4cd960929353ace25c1b64c5003bf37df6161e64"}, "downloads": -1, "filename": "fast-pagerank-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c59fdf47be64a7b479d10802eb607e4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3917, "upload_time": "2019-06-27T01:56:54", "upload_time_iso_8601": "2019-06-27T01:56:54.519384Z", "url": "https://files.pythonhosted.org/packages/ce/39/e14837c543a3f385aa02933b1d07c8ca5f30f9c81cfd8b49a95ba2357872/fast-pagerank-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "acfbc33adbb5d2d0b272dedb08819f04", "sha256": "5d8cf7f5954690d80e7f4b4670606f17ad2b2c1d9aa8feabdc4d4e4242deaae5"}, "downloads": -1, "filename": "fast_pagerank-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "acfbc33adbb5d2d0b272dedb08819f04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5227, "upload_time": "2019-06-27T01:56:53", "upload_time_iso_8601": "2019-06-27T01:56:53.131873Z", "url": "https://files.pythonhosted.org/packages/d9/3d/8563e4eafc36e90754cc43339861994aeed9fd7cd8ff01eeafb847b73bfe/fast_pagerank-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c59fdf47be64a7b479d10802eb607e4d", "sha256": "ad62ea8ac7298b4e7998c18e4cd960929353ace25c1b64c5003bf37df6161e64"}, "downloads": -1, "filename": "fast-pagerank-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c59fdf47be64a7b479d10802eb607e4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3917, "upload_time": "2019-06-27T01:56:54", "upload_time_iso_8601": "2019-06-27T01:56:54.519384Z", "url": "https://files.pythonhosted.org/packages/ce/39/e14837c543a3f385aa02933b1d07c8ca5f30f9c81cfd8b49a95ba2357872/fast-pagerank-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:27 2020"}