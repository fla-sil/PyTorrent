{"info": {"author": "Jonathan Hadida", "author_email": "jonathan.hadida@unknown.invalid", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Text Processing"], "description": "\n<a href=\"https://choosealicense.com/licenses/eupl-1.2/\"><img src=\"https://img.shields.io/github/license/jhadida/nxp\" alt=\"License: EUPL-1.2\" align=\"middle\" style=\"margin:0 20px;\"></a>\n<a href=\"https://pypi.org/project/nxp/\"><img src=\"https://img.shields.io/badge/PyPI-nxp-blue\" alt=\"PyPI: nxp\" align=\"middle\" style=\"margin:0 20px;\"></a>\n<a href=\"https://jhadida.github.io/nxp/\"><img src=\"https://img.shields.io/badge/Docs-https%3A%2F%2Fjhadida.github.io%2Fnxp%2F-green\" alt=\"Documentation\" align=\"middle\" style=\"margin:0 20px;\"></a>\n\n# NXP: Natural eXpression Parsing\n\nNXP is a parsing library written in Python 3, inspired by [pyparsing](https://github.com/pyparsing/pyparsing) and [Microsoft Monarch](https://microsoft.github.io/monaco-editor/monarch.html). \n\nIt allows users to do two things:\n\n- Define text patterns by combining Python objects, instead of writing complicated regular expressions.\n- Define and parse complex languages, with a simple dictionary!\n\nIs it really that simple? <br>\nDon't take my word for it; see for yourself with the examples below, and the notebooks in the `examples/` folder. :blush:\n\n## Examples\n\n### Matching HTML tags\n\nThis is a quick example to show how complex expressions are created in NXP, by combining Python objects.\n\n```py\nfrom nxp import Seq, String, Either, Any, make_cursor\n\n# property name, optionally assigned a value between quotes\nattr = Seq( [r'\\s+(\\w+)', Seq([ r'\\s*=\\s*', String() ])], skip=1 )\n\n# open/close tags, or self-closed tag\ntag = Either(\n    Seq( [r'<(\\w+)', Any(attr), r'\\s*/?>'] ), \n    r'</(\\w+)\\s*>'\n)\n\n# create cursor and find matches\ncur = make_cursor('''\nNot <a><tag</a>\n<input type=\"checkbox\" value=\"42\" checked>\n<img src=\"foo/bar.jpg\" />\n''')\n\nfor m in tag.find(cur,multi=True): print(m.insitu(cur.buffer))\n```\noutput:\n```\nNot <a><tag</a>\n    ---        \nNot <a><tag</a>\n           ----\n<input type=\"checkbox\" value=\"42\" checked>\n------------------------------------------\n<img src=\"foo/bar.jpg\" />\n-------------------------\n```\n\n### Parsing LaTeX-like commands\n\nThis is a quick example to illustrate parsing with NXP. We want to parse (very simplified) LaTeX-like patterns `\\command{ body }` in the file `foo.txt`:\n```txt\nInspirational quote:\n\\quote{\n    Time you enjoy wasting is \\it{not} wasted time.\n}\n\nCommand without a body \\command, or with an empty one \\command{}.\n```\n\nThis is how to define a language to match such patterns in NXP:\n```py\nimport nxp\n\n# define these rules separately so they can be re-used\nbackslash = [ r'\\\\\\\\', ('rep','\\\\') ] \ncommand = [ r'\\\\(\\w+)', ('open','command'), ('tag','cmd') ] \n\n# create a parser\nparser = nxp.make_parser({\n\t'lang': {\n\t\t'main': [\n\t\t\tbackslash,  # replace escaped backslashes\n\t\t\tcommand     # open \"command\" scope if we find something like '\\word'\n\t\t],\n\t\t'command': { # the \"command\" scope\n\t\t\t'main': [\n\t\t\t\t[ r'\\{', ('open','command.body'), ('tag','body') ],\n\t\t\t\t\t# open \"body\" subscope if command is followed by '{'\n\t\t\t\t[ None, 'close' ] \n\t\t\t\t\t# otherwise close the scope\n\t\t\t],\n\t\t\t'body': [ # the \"command.body\" scope\n\t\t\t\tbackslash,\n\t\t\t\t[ r'\\\\\\{', ('rep','{') ],\n\t\t\t\t[ r'\\\\\\}', ('rep','}') ],\n\t\t\t\t\t# deal with escapes before looking for a nested command\n\t\t\t\tcommand, \n\t\t\t\t\t# look for nested commands\n\t\t\t\t[ r'\\}', ('tag','/body'), ('close',2) ]\n\t\t\t\t\t# the command ends when the body ends: close both scopes\n\t\t\t]\n\t\t}\n\t}\n})\n\nprint(nxp.parsefile( parser, 'foo.txt' ))\n```\nand the output is a simple AST:\n```\nScope(\"main\"): 3 element(s)\n\t[0] Scope(\"command\"): 2 element(s)\n\t\t[0] (1, 0) - (1, 6) \\quote\n\t\t[1] Scope(\"command.body\"): 3 element(s)\n\t\t\t[0] (1, 6) - (1, 7) {\n\t\t\t[1] Scope(\"command\"): 2 element(s)\n\t\t\t\t[0] (2, 30) - (2, 33) \\it\n\t\t\t\t[1] Scope(\"command.body\"): 2 element(s)\n\t\t\t\t\t[0] (2, 33) - (2, 34) {\n\t\t\t\t\t[1] (2, 37) - (2, 38) }\n\t\t\t[2] (3, 0) - (3, 1) }\n\t[1] Scope(\"command\"): 1 element(s)\n\t\t[0] (5, 23) - (5, 31) \\command\n\t[2] Scope(\"command\"): 2 element(s)\n\t\t[0] (5, 54) - (5, 62) \\command\n\t\t[1] Scope(\"command.body\"): 2 element(s)\n\t\t\t[0] (5, 62) - (5, 63) {\n\t\t\t[1] (5, 63) - (5, 64) }\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jhadida/nxp", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nxp", "package_url": "https://pypi.org/project/nxp/", "platform": "", "project_url": "https://pypi.org/project/nxp/", "project_urls": {"Homepage": "https://github.com/jhadida/nxp"}, "release_url": "https://pypi.org/project/nxp/0.3.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Natural eXpression Parsing \u2014 A Python 3 parsing library.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://choosealicense.com/licenses/eupl-1.2/\" rel=\"nofollow\"><img align=\"middle\" alt=\"License: EUPL-1.2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9430793287458e16cc14e71c55ee24deec1599d9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a6861646964612f6e7870\"></a>\n<a href=\"https://pypi.org/project/nxp/\" rel=\"nofollow\"><img align=\"middle\" alt=\"PyPI: nxp\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9171e01f1495459e696b8ca01ebbc9cb2645284f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507950492d6e78702d626c7565\"></a>\n<a href=\"https://jhadida.github.io/nxp/\" rel=\"nofollow\"><img align=\"middle\" alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e52bd1e6f566b1499bf8cb26648b7e2c88375cb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f63732d68747470732533412532462532466a6861646964612e6769746875622e696f2532466e78702532462d677265656e\"></a></p>\n<h1>NXP: Natural eXpression Parsing</h1>\n<p>NXP is a parsing library written in Python 3, inspired by <a href=\"https://github.com/pyparsing/pyparsing\" rel=\"nofollow\">pyparsing</a> and <a href=\"https://microsoft.github.io/monaco-editor/monarch.html\" rel=\"nofollow\">Microsoft Monarch</a>.</p>\n<p>It allows users to do two things:</p>\n<ul>\n<li>Define text patterns by combining Python objects, instead of writing complicated regular expressions.</li>\n<li>Define and parse complex languages, with a simple dictionary!</li>\n</ul>\n<p>Is it really that simple? <br>\nDon't take my word for it; see for yourself with the examples below, and the notebooks in the <code>examples/</code> folder. :blush:</p>\n<h2>Examples</h2>\n<h3>Matching HTML tags</h3>\n<p>This is a quick example to show how complex expressions are created in NXP, by combining Python objects.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nxp</span> <span class=\"kn\">import</span> <span class=\"n\">Seq</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">Either</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">make_cursor</span>\n\n<span class=\"c1\"># property name, optionally assigned a value between quotes</span>\n<span class=\"n\">attr</span> <span class=\"o\">=</span> <span class=\"n\">Seq</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"sa\">r</span><span class=\"s1\">'\\s+(\\w+)'</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">([</span> <span class=\"sa\">r</span><span class=\"s1\">'\\s*=\\s*'</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">()</span> <span class=\"p\">])],</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"p\">)</span>\n\n<span class=\"c1\"># open/close tags, or self-closed tag</span>\n<span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">Either</span><span class=\"p\">(</span>\n    <span class=\"n\">Seq</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"sa\">r</span><span class=\"s1\">'&lt;(\\w+)'</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">),</span> <span class=\"sa\">r</span><span class=\"s1\">'\\s*/?&gt;'</span><span class=\"p\">]</span> <span class=\"p\">),</span> \n    <span class=\"sa\">r</span><span class=\"s1\">'&lt;/(\\w+)\\s*&gt;'</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># create cursor and find matches</span>\n<span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">make_cursor</span><span class=\"p\">(</span><span class=\"s1\">'''</span>\n<span class=\"s1\">Not &lt;a&gt;&lt;tag&lt;/a&gt;</span>\n<span class=\"s1\">&lt;input type=\"checkbox\" value=\"42\" checked&gt;</span>\n<span class=\"s1\">&lt;img src=\"foo/bar.jpg\" /&gt;</span>\n<span class=\"s1\">'''</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">cur</span><span class=\"p\">,</span><span class=\"n\">multi</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">insitu</span><span class=\"p\">(</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">))</span>\n</pre>\n<p>output:</p>\n<pre><code>Not &lt;a&gt;&lt;tag&lt;/a&gt;\n    ---        \nNot &lt;a&gt;&lt;tag&lt;/a&gt;\n           ----\n&lt;input type=\"checkbox\" value=\"42\" checked&gt;\n------------------------------------------\n&lt;img src=\"foo/bar.jpg\" /&gt;\n-------------------------\n</code></pre>\n<h3>Parsing LaTeX-like commands</h3>\n<p>This is a quick example to illustrate parsing with NXP. We want to parse (very simplified) LaTeX-like patterns <code>\\command{ body }</code> in the file <code>foo.txt</code>:</p>\n<pre>Inspirational quote:\n\\quote{\n    Time you enjoy wasting is \\it{not} wasted time.\n}\n\nCommand without a body \\command, or with an empty one \\command{}.\n</pre>\n<p>This is how to define a language to match such patterns in NXP:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nxp</span>\n\n<span class=\"c1\"># define these rules separately so they can be re-used</span>\n<span class=\"n\">backslash</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"sa\">r</span><span class=\"s1\">'</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'rep'</span><span class=\"p\">,</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">)</span> <span class=\"p\">]</span> \n<span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"sa\">r</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">(\\w+)'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span><span class=\"s1\">'command'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'tag'</span><span class=\"p\">,</span><span class=\"s1\">'cmd'</span><span class=\"p\">)</span> <span class=\"p\">]</span> \n\n<span class=\"c1\"># create a parser</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">nxp</span><span class=\"o\">.</span><span class=\"n\">make_parser</span><span class=\"p\">({</span>\n\t<span class=\"s1\">'lang'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'main'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n\t\t\t<span class=\"n\">backslash</span><span class=\"p\">,</span>  <span class=\"c1\"># replace escaped backslashes</span>\n\t\t\t<span class=\"n\">command</span>     <span class=\"c1\"># open \"command\" scope if we find something like '\\word'</span>\n\t\t<span class=\"p\">],</span>\n\t\t<span class=\"s1\">'command'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># the \"command\" scope</span>\n\t\t\t<span class=\"s1\">'main'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n\t\t\t\t<span class=\"p\">[</span> <span class=\"sa\">r</span><span class=\"s1\">'\\{'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span><span class=\"s1\">'command.body'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'tag'</span><span class=\"p\">,</span><span class=\"s1\">'body'</span><span class=\"p\">)</span> <span class=\"p\">],</span>\n\t\t\t\t\t<span class=\"c1\"># open \"body\" subscope if command is followed by '{'</span>\n\t\t\t\t<span class=\"p\">[</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'close'</span> <span class=\"p\">]</span> \n\t\t\t\t\t<span class=\"c1\"># otherwise close the scope</span>\n\t\t\t<span class=\"p\">],</span>\n\t\t\t<span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"c1\"># the \"command.body\" scope</span>\n\t\t\t\t<span class=\"n\">backslash</span><span class=\"p\">,</span>\n\t\t\t\t<span class=\"p\">[</span> <span class=\"sa\">r</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">\\{'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'rep'</span><span class=\"p\">,</span><span class=\"s1\">'{'</span><span class=\"p\">)</span> <span class=\"p\">],</span>\n\t\t\t\t<span class=\"p\">[</span> <span class=\"sa\">r</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">\\}'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'rep'</span><span class=\"p\">,</span><span class=\"s1\">'}'</span><span class=\"p\">)</span> <span class=\"p\">],</span>\n\t\t\t\t\t<span class=\"c1\"># deal with escapes before looking for a nested command</span>\n\t\t\t\t<span class=\"n\">command</span><span class=\"p\">,</span> \n\t\t\t\t\t<span class=\"c1\"># look for nested commands</span>\n\t\t\t\t<span class=\"p\">[</span> <span class=\"sa\">r</span><span class=\"s1\">'\\}'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'tag'</span><span class=\"p\">,</span><span class=\"s1\">'/body'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'close'</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n\t\t\t\t\t<span class=\"c1\"># the command ends when the body ends: close both scopes</span>\n\t\t\t<span class=\"p\">]</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nxp</span><span class=\"o\">.</span><span class=\"n\">parsefile</span><span class=\"p\">(</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"s1\">'foo.txt'</span> <span class=\"p\">))</span>\n</pre>\n<p>and the output is a simple AST:</p>\n<pre><code>Scope(\"main\"): 3 element(s)\n\t[0] Scope(\"command\"): 2 element(s)\n\t\t[0] (1, 0) - (1, 6) \\quote\n\t\t[1] Scope(\"command.body\"): 3 element(s)\n\t\t\t[0] (1, 6) - (1, 7) {\n\t\t\t[1] Scope(\"command\"): 2 element(s)\n\t\t\t\t[0] (2, 30) - (2, 33) \\it\n\t\t\t\t[1] Scope(\"command.body\"): 2 element(s)\n\t\t\t\t\t[0] (2, 33) - (2, 34) {\n\t\t\t\t\t[1] (2, 37) - (2, 38) }\n\t\t\t[2] (3, 0) - (3, 1) }\n\t[1] Scope(\"command\"): 1 element(s)\n\t\t[0] (5, 23) - (5, 31) \\command\n\t[2] Scope(\"command\"): 2 element(s)\n\t\t[0] (5, 54) - (5, 62) \\command\n\t\t[1] Scope(\"command.body\"): 2 element(s)\n\t\t\t[0] (5, 62) - (5, 63) {\n\t\t\t[1] (5, 63) - (5, 64) }\n</code></pre>\n\n          </div>"}, "last_serial": 7159685, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1f53fb5798e34d9a00113375a5aeb233", "sha256": "6795d68e7c2f7f84668609b979980410cff85d050f67452aae3736e38ecfdf66"}, "downloads": -1, "filename": "nxp-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1f53fb5798e34d9a00113375a5aeb233", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32868, "upload_time": "2020-04-14T09:31:13", "upload_time_iso_8601": "2020-04-14T09:31:13.272357Z", "url": "https://files.pythonhosted.org/packages/c1/5c/87563014e7deb20ecc2fe6b4ce2ad319e3f7bf6c8008cebd681a597d7dd4/nxp-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "079e120aaa21d84cd74d19adbd665dd8", "sha256": "eb72a08854566eecc07cc5815fb1e22c80e661d79b96055c471e6219e0e4bd01"}, "downloads": -1, "filename": "nxp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "079e120aaa21d84cd74d19adbd665dd8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22529, "upload_time": "2020-04-14T09:31:15", "upload_time_iso_8601": "2020-04-14T09:31:15.710294Z", "url": "https://files.pythonhosted.org/packages/ce/27/88d35a957a8c53e461eb0902876171b2a6993b3cd302cba5d8ce55c49781/nxp-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "62fb06714cc001671fd1354f12d23008", "sha256": "82d6d87c5fca6076d8c2f282dc7e799da48f74e5563778b52930a76aa7a332a6"}, "downloads": -1, "filename": "nxp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62fb06714cc001671fd1354f12d23008", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34199, "upload_time": "2020-04-19T15:42:09", "upload_time_iso_8601": "2020-04-19T15:42:09.155016Z", "url": "https://files.pythonhosted.org/packages/e3/2d/240f90616bb45aece00ecd4eadb8910cf2aeaea2db82ecf7bbecc1cb9c0f/nxp-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7041d0ae7e44bcfbbda386e0f477578f", "sha256": "830662dd60b24be8b6fdb528df1c87d60be2f19a5021a2aa3fafcfaa684fbbc1"}, "downloads": -1, "filename": "nxp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7041d0ae7e44bcfbbda386e0f477578f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23236, "upload_time": "2020-04-19T15:42:10", "upload_time_iso_8601": "2020-04-19T15:42:10.687194Z", "url": "https://files.pythonhosted.org/packages/7e/77/35bca8df69c079b337b7a5a2e2825253b8f57a0fe72c38a079473d447e71/nxp-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "175cbc77f6d5480d5f060dbfd4e1fc0d", "sha256": "d7dfa025188179d008f759ce28f64e75de31d2909872c373c191702d0cd038f8"}, "downloads": -1, "filename": "nxp-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "175cbc77f6d5480d5f060dbfd4e1fc0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35084, "upload_time": "2020-04-21T15:51:06", "upload_time_iso_8601": "2020-04-21T15:51:06.875379Z", "url": "https://files.pythonhosted.org/packages/5e/29/9668f1d34c167df69ede838373955e33ad614f025406188d7cc7d8cf7e9d/nxp-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ced0f8f64a3708db0e3fddff05ee5219", "sha256": "c7bf7499a58e7e5b591813ff821f992c82e90527efd954e731f5b22fc9503066"}, "downloads": -1, "filename": "nxp-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ced0f8f64a3708db0e3fddff05ee5219", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23927, "upload_time": "2020-04-21T15:51:07", "upload_time_iso_8601": "2020-04-21T15:51:07.877262Z", "url": "https://files.pythonhosted.org/packages/c7/17/5810419f471ff12efff2694202b44acd17061adaddddaff76044c42a681f/nxp-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ea5c7031a860783f3d9da5536fc7ffcf", "sha256": "f47c40af2160c1638a2ea5111394c83f1001c2ac162487ed64a02ea2b75b6d90"}, "downloads": -1, "filename": "nxp-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ea5c7031a860783f3d9da5536fc7ffcf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36482, "upload_time": "2020-05-03T20:57:57", "upload_time_iso_8601": "2020-05-03T20:57:57.262677Z", "url": "https://files.pythonhosted.org/packages/70/05/f94b1269a5a7483a2a6c03fa5c567e780a4eef7073540bcdf233e293805a/nxp-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54ef5908504e89a99cb89d771f13aa18", "sha256": "4df5a0ee406d0054d2d3351ed59b1f8243b50f6932fe91c5df331a34d76dfab5"}, "downloads": -1, "filename": "nxp-0.3.0.tar.gz", "has_sig": false, "md5_digest": "54ef5908504e89a99cb89d771f13aa18", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25709, "upload_time": "2020-05-03T20:57:58", "upload_time_iso_8601": "2020-05-03T20:57:58.294932Z", "url": "https://files.pythonhosted.org/packages/e2/38/7b9cb62af4707b3192132ee6f0b74ea9413d50b55f8c007f080df186479c/nxp-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea5c7031a860783f3d9da5536fc7ffcf", "sha256": "f47c40af2160c1638a2ea5111394c83f1001c2ac162487ed64a02ea2b75b6d90"}, "downloads": -1, "filename": "nxp-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ea5c7031a860783f3d9da5536fc7ffcf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36482, "upload_time": "2020-05-03T20:57:57", "upload_time_iso_8601": "2020-05-03T20:57:57.262677Z", "url": "https://files.pythonhosted.org/packages/70/05/f94b1269a5a7483a2a6c03fa5c567e780a4eef7073540bcdf233e293805a/nxp-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54ef5908504e89a99cb89d771f13aa18", "sha256": "4df5a0ee406d0054d2d3351ed59b1f8243b50f6932fe91c5df331a34d76dfab5"}, "downloads": -1, "filename": "nxp-0.3.0.tar.gz", "has_sig": false, "md5_digest": "54ef5908504e89a99cb89d771f13aa18", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25709, "upload_time": "2020-05-03T20:57:58", "upload_time_iso_8601": "2020-05-03T20:57:58.294932Z", "url": "https://files.pythonhosted.org/packages/e2/38/7b9cb62af4707b3192132ee6f0b74ea9413d50b55f8c007f080df186479c/nxp-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:02 2020"}