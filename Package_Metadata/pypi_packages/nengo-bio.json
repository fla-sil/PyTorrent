{"info": {"author": "Andreas St\u00f6ckel", "author_email": "astoecke@uwaterloo.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": "![NengoBio Logo](doc/logo.png) [![PyPI version](https://badge.fury.io/py/nengo-bio.svg)](https://badge.fury.io/py/nengo-bio) [![Build Status](https://travis-ci.org/astoeckel/nengo-bio.svg?branch=master)](https://travis-ci.org/astoeckel/nengo-bio) [![Coverage Status](https://coveralls.io/repos/github/astoeckel/nengo-bio/badge.svg?branch=master)](https://coveralls.io/github/astoeckel/nengo-bio?branch=master)\n\n# NengoBio \u2012 Biologically (more) plausible Nengo models\n\n> **\u26a0 Warning:** This project is work-in progress. Everything described here, including the name of the project and the API, is subject to change.\n\n*NengoBio* is an add-on library for the [Nengo](https://nengo.ai/) spiking neural network simulator. Nengo is used by scientists to construct detailed models of neurobiological systems. However, Nengo and, to some degree, the underlying [Neural Engineering Framework](http://compneuro.uwaterloo.ca/research/nef.html), have restrictions that limit the biological plausibility of the created networks. *NengoBio* lifts some of these restrictions by implementing the following:\n\n* **Dale's Principle** (:ballot_box_with_check: *Fully implemented*)<br>\n  While it is possible to work around this limitation, Nengo usually does not explicitly mark neurons as excitatory or inhibitory. This means that a single can connect to post-neurons both excitatorily and inhibitorily, depending on the sign of the weights computed by of the weight solver. *NengoBio* marks neurons as either excitatory or inhibitory and accounts for this while solving for connection weights.\n* **Bias current elimination** (:ballot_box_with_check: *Fully implemented*)<br>\n  The Neural Engineering Framework assumes that each neuron is connected to a constant bias current source. This bias current is used to diversify the avilable neuron tuning curves, yet is a little unrealistic from a biological perspective. *NengoBio* eliminates the bias current by solving for synaptic weights in current space, effectively decoding the bias current from the pre-population state.\n* **Support for dendritic computation** (:ballot_box_with_check: *Fully implemented*)<br>\n  Dendritic nonlinearities play a key role in information processing in central nervous systems and can be systematically exploited to perfrom nonlinear, multivariate computations. *NengoBio* adds support for dendritic computation to Nengo by allowing an arbitrary number of neuron ensembles as pre-objects in a connection.\n* **Support for conductance-based synapses as well as neurons with arbitrary passive dendritic trees** (*Planned*)\n  Dendritic computation relies on nonlinear effects in the dendritic tree and the specific tree topology. *NengoBio* adds support for arbitrary passive multicompartment neuron models to Nengo.\n\n## Installing NengoBio\n\n**Dependencies:** *NengoBio* requires Python 3 and depends on `numpy>=1.16.3`, `scipy>=1.2.0`, `cvxopt>=1.2.2`, `nengo>=3.0.0.dev0`.\n\nClone this repository by running\n```sh\ngit clone https://github.com/astoeckel/nengo_bio\n```\nYou can then install the package by running the following inside the `nengo_bio` repository\n```sh\npip3 install -e .\n```\nThis will automatically install all dependencies. Note that *NengoBio* currently requires the most recent development version of *Nengo*, which has to be installed separately.\n\n## Using NengoBio\n\n### [\ud83d\udcdd See the example notebook](https://github.com/astoeckel/nengo_bio/blob/master/examples/nengo_bio_examples.ipynb)\n\nAssuming that you know how to use Nengo, using *NengoBio* should be quite simple. Just add the following to your list of imports\n```py\nimport nengo_bio as bio\n```\nand replace `nengo.Ensemble` with `bio.Ensemble` and `nengo.Connection` with `bio.Connection` where applicable.\n\n### The `bio.Ensemble` class\n\nThe `bio.Ensemble` class acts like a normal Nengo ensemble but has two additional parameters: `p_exc` and `p_inh`. These parameters describe the relative number of excitatory/inhibitory neurons in the population. Note that `p_exc` and `p_inh` have to sum to one. These parameters are only relevant if an ensemble is a pre-object.\n\n**Note:** Neurons will be assigned a synapse type at build time. If any of `p_exc` or `p_inh` is set, each neuron will either be excitatory or inhibitory. Without `p_exc` and `p_inh`, the ensemble will behave just like a normal Nengo ensemble.\n\n**Warning:** `bio.Ensemble` can be used in conjunction with the normal `nengo.Connection` class. The excitatory/inhibitory nature of the neurons in a `bio.Ensemble` will only be taken into account when using `bio.Connection` (see below).\n\n### Examples\n\n**Examples 1:** An ensemble exclusively consisting of excitatory neurons\n```py\nens_exc = bio.Ensemble(n_neurons=101, dimensions=1, p_exc=1.0)\n```\n**Examples 2:** An ensemble exclusively consisting of inhibitory neurons\n```py\nens_inh = bio.Ensemble(n_neurons=101, dimensions=1, p_inh=1.0)\n```\n**Examples 3:** An ensemble consisting of 80% excitatory and 20% inhibitory neurons (both lines are equivalent):\n```py\nens_mix = bio.Ensemble(n_neurons=101, dimensions=1, p_exc=0.8)\nens_mix = bio.Ensemble(n_neurons=101, dimensions=1, p_inh=0.2)\n```\n\n### The `bio.Connection` class\n\nA `bio.Connection` connection connects *n*-pre ensembles to a single target ensemble. It will automatically account for the synapse type assigned to each neuron.\n\n### Notable Parameters\n\n* `pre`: This can be either a single pre-population or a tuple of pre-populations. The dimensions of the values represented by the pre-populations will be stacked.\n\n* `decode_bias` (default `True`): if `True` the post-neuron bias current will be decoded from the pre-population instead of being assumed constant. Set this to `False` for any but the first `bio.connection` targeting the same post population.\n\n* `solver` (default `QPSolver()`): an `ExtendedSolver` instance from `nengo_bio.solvers`. `ExtendedSolvers` can solve for currents and take neuron parameters into account.\n\n### Examples\n\n**Example 1:** Simple communication channel between `ens_a` and `ens_b` taking neuron/synapse types into account and decoding the bias current:\n```py\nbio.Connection(ens_a, ens_b)\n```\n\n**Example 2:** 2D communication channel where `ens_a`, `ens_b` represent a one-dimensional value and `ens_c` represents a two-dimensional value.\n```py\nbio.Connection((ens_a, ens_b), ens_c)\n```\n\n**Example 3:** Linear \"Dendritic Computation\"\n```py\nbio.Connection((ens_a, ens_b), ens_c, function=lambda x: np.mean(x))\n```\n\n## Citing\n\nThe techniques used in this library are described in more detail in this arXiv preprint: https://arxiv.org/abs/1904.11713. We would appreciate it if you could cite this paper in case you use this library in a published model.\n\n```bib\n@misc{stoeckel2019passive,\n    author = {Andreas St\u00f6ckel and Chris Eliasmith},\n    title = {Passive nonlinear dendritic interactions as a general computational resource in functional spiking neural networks},\n    year = {2019},\n    eprint = {arXiv:1904.11713},\n}\n```\n\n## License\n\n```\nnengo_bio -- Extensions to Nengo for more biological plausibility\nCopyright (C) 2019  Andreas St\u00f6ckel\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/astoeckel/nengo-bio", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "nengo-bio", "package_url": "https://pypi.org/project/nengo-bio/", "platform": "", "project_url": "https://pypi.org/project/nengo-bio/", "project_urls": {"Homepage": "https://github.com/astoeckel/nengo-bio"}, "release_url": "https://pypi.org/project/nengo-bio/0.2.0/", "requires_dist": ["cvxopt (>=1.2.2)", "nengo (>=2.8)", "numpy (>=1.16.3)", "scipy (>=1.2.0)", "posix-ipc (>=1.0.4)"], "requires_python": "", "summary": "Dendritic Computation Primitives for Nengo", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"NengoBio Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9592ebf51b115ef4d2ee81f56a45c9fccd07011b/646f632f6c6f676f2e706e67\"> <a href=\"https://badge.fury.io/py/nengo-bio\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7476a7277e0f8541894ea686b0ccde4e1d7d9c8/68747470733a2f2f62616467652e667572792e696f2f70792f6e656e676f2d62696f2e737667\"></a> <a href=\"https://travis-ci.org/astoeckel/nengo-bio\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d6a92216fef1a51281f9a330aedf023cb38750e/68747470733a2f2f7472617669732d63692e6f72672f6173746f65636b656c2f6e656e676f2d62696f2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/astoeckel/nengo-bio?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45084cce598c11420eedba743e56452a359bc41c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6173746f65636b656c2f6e656e676f2d62696f2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>NengoBio \u2012 Biologically (more) plausible Nengo models</h1>\n<blockquote>\n<p><strong>\u26a0 Warning:</strong> This project is work-in progress. Everything described here, including the name of the project and the API, is subject to change.</p>\n</blockquote>\n<p><em>NengoBio</em> is an add-on library for the <a href=\"https://nengo.ai/\" rel=\"nofollow\">Nengo</a> spiking neural network simulator. Nengo is used by scientists to construct detailed models of neurobiological systems. However, Nengo and, to some degree, the underlying <a href=\"http://compneuro.uwaterloo.ca/research/nef.html\" rel=\"nofollow\">Neural Engineering Framework</a>, have restrictions that limit the biological plausibility of the created networks. <em>NengoBio</em> lifts some of these restrictions by implementing the following:</p>\n<ul>\n<li><strong>Dale's Principle</strong> (:ballot_box_with_check: <em>Fully implemented</em>)<br>\nWhile it is possible to work around this limitation, Nengo usually does not explicitly mark neurons as excitatory or inhibitory. This means that a single can connect to post-neurons both excitatorily and inhibitorily, depending on the sign of the weights computed by of the weight solver. <em>NengoBio</em> marks neurons as either excitatory or inhibitory and accounts for this while solving for connection weights.</li>\n<li><strong>Bias current elimination</strong> (:ballot_box_with_check: <em>Fully implemented</em>)<br>\nThe Neural Engineering Framework assumes that each neuron is connected to a constant bias current source. This bias current is used to diversify the avilable neuron tuning curves, yet is a little unrealistic from a biological perspective. <em>NengoBio</em> eliminates the bias current by solving for synaptic weights in current space, effectively decoding the bias current from the pre-population state.</li>\n<li><strong>Support for dendritic computation</strong> (:ballot_box_with_check: <em>Fully implemented</em>)<br>\nDendritic nonlinearities play a key role in information processing in central nervous systems and can be systematically exploited to perfrom nonlinear, multivariate computations. <em>NengoBio</em> adds support for dendritic computation to Nengo by allowing an arbitrary number of neuron ensembles as pre-objects in a connection.</li>\n<li><strong>Support for conductance-based synapses as well as neurons with arbitrary passive dendritic trees</strong> (<em>Planned</em>)\nDendritic computation relies on nonlinear effects in the dendritic tree and the specific tree topology. <em>NengoBio</em> adds support for arbitrary passive multicompartment neuron models to Nengo.</li>\n</ul>\n<h2>Installing NengoBio</h2>\n<p><strong>Dependencies:</strong> <em>NengoBio</em> requires Python 3 and depends on <code>numpy&gt;=1.16.3</code>, <code>scipy&gt;=1.2.0</code>, <code>cvxopt&gt;=1.2.2</code>, <code>nengo&gt;=3.0.0.dev0</code>.</p>\n<p>Clone this repository by running</p>\n<pre>git clone https://github.com/astoeckel/nengo_bio\n</pre>\n<p>You can then install the package by running the following inside the <code>nengo_bio</code> repository</p>\n<pre>pip3 install -e .\n</pre>\n<p>This will automatically install all dependencies. Note that <em>NengoBio</em> currently requires the most recent development version of <em>Nengo</em>, which has to be installed separately.</p>\n<h2>Using NengoBio</h2>\n<h3><a href=\"https://github.com/astoeckel/nengo_bio/blob/master/examples/nengo_bio_examples.ipynb\" rel=\"nofollow\">\ud83d\udcdd See the example notebook</a></h3>\n<p>Assuming that you know how to use Nengo, using <em>NengoBio</em> should be quite simple. Just add the following to your list of imports</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nengo_bio</span> <span class=\"k\">as</span> <span class=\"nn\">bio</span>\n</pre>\n<p>and replace <code>nengo.Ensemble</code> with <code>bio.Ensemble</code> and <code>nengo.Connection</code> with <code>bio.Connection</code> where applicable.</p>\n<h3>The <code>bio.Ensemble</code> class</h3>\n<p>The <code>bio.Ensemble</code> class acts like a normal Nengo ensemble but has two additional parameters: <code>p_exc</code> and <code>p_inh</code>. These parameters describe the relative number of excitatory/inhibitory neurons in the population. Note that <code>p_exc</code> and <code>p_inh</code> have to sum to one. These parameters are only relevant if an ensemble is a pre-object.</p>\n<p><strong>Note:</strong> Neurons will be assigned a synapse type at build time. If any of <code>p_exc</code> or <code>p_inh</code> is set, each neuron will either be excitatory or inhibitory. Without <code>p_exc</code> and <code>p_inh</code>, the ensemble will behave just like a normal Nengo ensemble.</p>\n<p><strong>Warning:</strong> <code>bio.Ensemble</code> can be used in conjunction with the normal <code>nengo.Connection</code> class. The excitatory/inhibitory nature of the neurons in a <code>bio.Ensemble</code> will only be taken into account when using <code>bio.Connection</code> (see below).</p>\n<h3>Examples</h3>\n<p><strong>Examples 1:</strong> An ensemble exclusively consisting of excitatory neurons</p>\n<pre><span class=\"n\">ens_exc</span> <span class=\"o\">=</span> <span class=\"n\">bio</span><span class=\"o\">.</span><span class=\"n\">Ensemble</span><span class=\"p\">(</span><span class=\"n\">n_neurons</span><span class=\"o\">=</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p_exc</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Examples 2:</strong> An ensemble exclusively consisting of inhibitory neurons</p>\n<pre><span class=\"n\">ens_inh</span> <span class=\"o\">=</span> <span class=\"n\">bio</span><span class=\"o\">.</span><span class=\"n\">Ensemble</span><span class=\"p\">(</span><span class=\"n\">n_neurons</span><span class=\"o\">=</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p_inh</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Examples 3:</strong> An ensemble consisting of 80% excitatory and 20% inhibitory neurons (both lines are equivalent):</p>\n<pre><span class=\"n\">ens_mix</span> <span class=\"o\">=</span> <span class=\"n\">bio</span><span class=\"o\">.</span><span class=\"n\">Ensemble</span><span class=\"p\">(</span><span class=\"n\">n_neurons</span><span class=\"o\">=</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p_exc</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span>\n<span class=\"n\">ens_mix</span> <span class=\"o\">=</span> <span class=\"n\">bio</span><span class=\"o\">.</span><span class=\"n\">Ensemble</span><span class=\"p\">(</span><span class=\"n\">n_neurons</span><span class=\"o\">=</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p_inh</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n</pre>\n<h3>The <code>bio.Connection</code> class</h3>\n<p>A <code>bio.Connection</code> connection connects <em>n</em>-pre ensembles to a single target ensemble. It will automatically account for the synapse type assigned to each neuron.</p>\n<h3>Notable Parameters</h3>\n<ul>\n<li>\n<p><code>pre</code>: This can be either a single pre-population or a tuple of pre-populations. The dimensions of the values represented by the pre-populations will be stacked.</p>\n</li>\n<li>\n<p><code>decode_bias</code> (default <code>True</code>): if <code>True</code> the post-neuron bias current will be decoded from the pre-population instead of being assumed constant. Set this to <code>False</code> for any but the first <code>bio.connection</code> targeting the same post population.</p>\n</li>\n<li>\n<p><code>solver</code> (default <code>QPSolver()</code>): an <code>ExtendedSolver</code> instance from <code>nengo_bio.solvers</code>. <code>ExtendedSolvers</code> can solve for currents and take neuron parameters into account.</p>\n</li>\n</ul>\n<h3>Examples</h3>\n<p><strong>Example 1:</strong> Simple communication channel between <code>ens_a</code> and <code>ens_b</code> taking neuron/synapse types into account and decoding the bias current:</p>\n<pre><span class=\"n\">bio</span><span class=\"o\">.</span><span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">ens_a</span><span class=\"p\">,</span> <span class=\"n\">ens_b</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Example 2:</strong> 2D communication channel where <code>ens_a</code>, <code>ens_b</code> represent a one-dimensional value and <code>ens_c</code> represents a two-dimensional value.</p>\n<pre><span class=\"n\">bio</span><span class=\"o\">.</span><span class=\"n\">Connection</span><span class=\"p\">((</span><span class=\"n\">ens_a</span><span class=\"p\">,</span> <span class=\"n\">ens_b</span><span class=\"p\">),</span> <span class=\"n\">ens_c</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Example 3:</strong> Linear \"Dendritic Computation\"</p>\n<pre><span class=\"n\">bio</span><span class=\"o\">.</span><span class=\"n\">Connection</span><span class=\"p\">((</span><span class=\"n\">ens_a</span><span class=\"p\">,</span> <span class=\"n\">ens_b</span><span class=\"p\">),</span> <span class=\"n\">ens_c</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n</pre>\n<h2>Citing</h2>\n<p>The techniques used in this library are described in more detail in this arXiv preprint: <a href=\"https://arxiv.org/abs/1904.11713\" rel=\"nofollow\">https://arxiv.org/abs/1904.11713</a>. We would appreciate it if you could cite this paper in case you use this library in a published model.</p>\n<pre><span class=\"nc\">@misc</span><span class=\"p\">{</span><span class=\"nl\">stoeckel2019passive</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span> <span class=\"p\">=</span> <span class=\"s\">{Andreas St\u00f6ckel and Chris Eliasmith}</span><span class=\"p\">,</span>\n    <span class=\"na\">title</span> <span class=\"p\">=</span> <span class=\"s\">{Passive nonlinear dendritic interactions as a general computational resource in functional spiking neural networks}</span><span class=\"p\">,</span>\n    <span class=\"na\">year</span> <span class=\"p\">=</span> <span class=\"s\">{2019}</span><span class=\"p\">,</span>\n    <span class=\"na\">eprint</span> <span class=\"p\">=</span> <span class=\"s\">{arXiv:1904.11713}</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>License</h2>\n<pre><code>nengo_bio -- Extensions to Nengo for more biological plausibility\nCopyright (C) 2019  Andreas St\u00f6ckel\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre>\n\n          </div>"}, "last_serial": 5413211, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "20b2ffb6c8f18540ba0bdd6b2c5e4f42", "sha256": "fdc394c9aff870cad80a346b757488202a8f1abb77f388de5bf9288ca45febe2"}, "downloads": -1, "filename": "nengo_bio-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "20b2ffb6c8f18540ba0bdd6b2c5e4f42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25043, "upload_time": "2019-06-02T17:04:44", "upload_time_iso_8601": "2019-06-02T17:04:44.577678Z", "url": "https://files.pythonhosted.org/packages/7e/6b/6ba778c72317b9edafdd22067189719a2e77199ead86dc3e3abc30e86120/nengo_bio-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "426bb82c4dff2eccb05dde4e67cf0946", "sha256": "f85d38c5217ea46bd30e710a28230efa6d2d9a1de8baa3291cb532f467880b15"}, "downloads": -1, "filename": "nengo_bio-0.1.tar.gz", "has_sig": false, "md5_digest": "426bb82c4dff2eccb05dde4e67cf0946", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12314, "upload_time": "2019-06-02T17:04:46", "upload_time_iso_8601": "2019-06-02T17:04:46.561143Z", "url": "https://files.pythonhosted.org/packages/93/20/b02f6609fe70ee5efa6f75e17072fec9efff33d158ca9d4335652cc2e8e4/nengo_bio-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d0e759900b2197288fb74cd98f087e47", "sha256": "f9c3bea5add9894eba868b9b478d1d1135cc7a848c830e1003a71a8d94e2cabd"}, "downloads": -1, "filename": "nengo_bio-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d0e759900b2197288fb74cd98f087e47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35582, "upload_time": "2019-06-02T18:50:51", "upload_time_iso_8601": "2019-06-02T18:50:51.452096Z", "url": "https://files.pythonhosted.org/packages/00/5e/2b968d7fac18294f18736e261908c52e7b14454b1c89956758fa5380d95b/nengo_bio-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20563877a0159297459964a5aefbdb42", "sha256": "2cc1224ed1697cfb98a3aea7cb5b8ef58c00b09aecf5cfebdcdcd70f0be01d29"}, "downloads": -1, "filename": "nengo_bio-0.1.1.tar.gz", "has_sig": false, "md5_digest": "20563877a0159297459964a5aefbdb42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19210, "upload_time": "2019-06-02T18:50:53", "upload_time_iso_8601": "2019-06-02T18:50:53.645923Z", "url": "https://files.pythonhosted.org/packages/cc/3d/e66acdb29a3f361bb04458ddc0d0e2193e61fbd107eee9564522c07afa3c/nengo_bio-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8fb609bca836ee13a47361d216f70981", "sha256": "d05c7887e463d00b7c1bc6bb0212ef03b367952d1cdc106ce40e5bb14b0e21cc"}, "downloads": -1, "filename": "nengo_bio-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8fb609bca836ee13a47361d216f70981", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 63754, "upload_time": "2019-06-18T04:01:16", "upload_time_iso_8601": "2019-06-18T04:01:16.314333Z", "url": "https://files.pythonhosted.org/packages/05/74/7149aa0fbb5b4cdba67bd1f91c440036408e2d530010536a77be9442a8f8/nengo_bio-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1861d1ad0c0426645a58a39d4b24502d", "sha256": "1208a8c119f108faed97acba743713215c987bc50172a7c0e75742e494b7d766"}, "downloads": -1, "filename": "nengo_bio-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1861d1ad0c0426645a58a39d4b24502d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37912, "upload_time": "2019-06-18T04:01:19", "upload_time_iso_8601": "2019-06-18T04:01:19.267163Z", "url": "https://files.pythonhosted.org/packages/dd/3f/a0b6068209307814ce743d3f710d45045a781341040bf0bfc0f03a7708ca/nengo_bio-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8fb609bca836ee13a47361d216f70981", "sha256": "d05c7887e463d00b7c1bc6bb0212ef03b367952d1cdc106ce40e5bb14b0e21cc"}, "downloads": -1, "filename": "nengo_bio-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8fb609bca836ee13a47361d216f70981", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 63754, "upload_time": "2019-06-18T04:01:16", "upload_time_iso_8601": "2019-06-18T04:01:16.314333Z", "url": "https://files.pythonhosted.org/packages/05/74/7149aa0fbb5b4cdba67bd1f91c440036408e2d530010536a77be9442a8f8/nengo_bio-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1861d1ad0c0426645a58a39d4b24502d", "sha256": "1208a8c119f108faed97acba743713215c987bc50172a7c0e75742e494b7d766"}, "downloads": -1, "filename": "nengo_bio-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1861d1ad0c0426645a58a39d4b24502d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37912, "upload_time": "2019-06-18T04:01:19", "upload_time_iso_8601": "2019-06-18T04:01:19.267163Z", "url": "https://files.pythonhosted.org/packages/dd/3f/a0b6068209307814ce743d3f710d45045a781341040bf0bfc0f03a7708ca/nengo_bio-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:32 2020"}