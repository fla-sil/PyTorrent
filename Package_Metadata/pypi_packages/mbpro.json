{"info": {"author": "Master Bank", "author_email": "mbpro_python@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "<pre><code>mbpro \u00e9 um m\u00f3dulo criado principalmente para aqueles que n\u00e3o gostam de ter muito trabalho com c\u00f3digos\n</code></pre>\n<h3>EXEMPLOS</h3>\n<pre><code>\n#<--------------------------------------------------->#\n#Fun\u00e7\u00e3o rand()\n#< Com a rand() voc\u00ea pode gerar um n\u00famero aleat\u00f3rio ou at\u00e9 mesmo uma letra do alfabeto >#\n\n#rand() com n\u00fameros:\nfrom mbpro import rand\n\nnumber = rand(7, 888) #gera um n\u00famero aleat\u00f3rio de 7 a 888 \nprint(number)\n\n#Obs: Os n\u00fameros podem ser em string tamb\u00e9m\n\n#rand() com letras:\n\nletra = rand('e', 'm') #gera uma letra de E a M\nprint(letra)\n\n#<--------------------------------------------------->#\n#Fun\u00e7\u00e3o pega()\n#< Com a pega() voc\u00ea pode capturar um determinado texto dentro de um HTML por exemplo >#\nfrom mbpro import pega\nstr = 'spanf Aqui est\u00e1 um exemplo da pega():hsgs 1$MBPRO t35'\n\ndados = pega(str, '1$', 'te5') #retorna o texto MBPRO \nprint(dados)\n\n#<--------------------------------------------------->#\n#Fun\u00e7\u00e3o connect()\n#< Com a connect() voc\u00ea pode testar a conex\u00e3o de um proxy no GOOGLE >#\nfrom mbpro import connect\nstr = connect('36.66.235.147:57550') #retorna um JSON com os dados e status do proxy\n\n#a connect() testa proxies com no m\u00e1ximo 7000 ms, caso ultrapassar o retorno ser\u00e1 DIE\n\n#<--------------------------------------------------->#\n#Fun\u00e7\u00e3o curl()\n#< Com a curl() voc\u00ea pode realizar um request tanto GET quanto POST de maneira f\u00e1cil >#\nfrom mbpro import curl\npostfields = 'post1=carlos&post2=jeferson&post3=antonio&post4=pedro'\n\ndata = curl('http://proxy.mbpro.in/data.php', post=postfields).text()\nprint(data)\n#Atributos ao curl:\n#url -> urlencode\n#header -> em forma de dict (opcional)\n#timeout -> em inteiro (opcional)\n#post (opcional)\n\n#<--------------------------------------------------->#\n#Fun\u00e7\u00e3o pretty_print()\n#< Com a pretty_print() voc\u00ea pode printar um json em PRETTY_PRINT >#\nfrom mbpro import pretty_print\n\njson = {\"nome\":\"carlos\",\"idade\":\"19 anos\",\"sexo\":\"masculino\"} #O json tamb\u00e9m pode vir em str\n\npretty = pretty_print(json)\n\nprint(pretty)\n\n</code></pre>\n<h3>Copyright</h3>\n<pre><code>\nTodos os direitos reservados a equipe MBPro Services and Revolutions\n\nBy: Master Bank\n</code></pre>", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://t.me/mbpro_module", "keywords": "mbpro expert", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "mbpro", "package_url": "https://pypi.org/project/mbpro/", "platform": "", "project_url": "https://pypi.org/project/mbpro/", "project_urls": {"Homepage": "https://t.me/mbpro_module"}, "release_url": "https://pypi.org/project/mbpro/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "Faz tudo o que voce quiser", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre><code>mbpro \u00e9 um m\u00f3dulo criado principalmente para aqueles que n\u00e3o gostam de ter muito trabalho com c\u00f3digos\n</code></pre>\n<h3>EXEMPLOS</h3>\n<pre><code>\n#&lt;---------------------------------------------------&gt;#\n#Fun\u00e7\u00e3o rand()\n#&lt; Com a rand() voc\u00ea pode gerar um n\u00famero aleat\u00f3rio ou at\u00e9 mesmo uma letra do alfabeto &gt;#\n<p>#rand() com n\u00fameros:\nfrom mbpro import rand</p>\n<p>number = rand(7, 888) #gera um n\u00famero aleat\u00f3rio de 7 a 888\nprint(number)</p>\n<p>#Obs: Os n\u00fameros podem ser em string tamb\u00e9m</p>\n<p>#rand() com letras:</p>\n<p>letra = rand('e', 'm') #gera uma letra de E a M\nprint(letra)</p>\n<p>#&lt;---------------------------------------------------&gt;#\n#Fun\u00e7\u00e3o pega()\n#&lt; Com a pega() voc\u00ea pode capturar um determinado texto dentro de um HTML por exemplo &gt;#\nfrom mbpro import pega\nstr = 'spanf Aqui est\u00e1 um exemplo da pega():hsgs 1$MBPRO t35'</p>\n<p>dados = pega(str, '1$', 'te5') #retorna o texto MBPRO\nprint(dados)</p>\n<p>#&lt;---------------------------------------------------&gt;#\n#Fun\u00e7\u00e3o connect()\n#&lt; Com a connect() voc\u00ea pode testar a conex\u00e3o de um proxy no GOOGLE &gt;#\nfrom mbpro import connect\nstr = connect('36.66.235.147:57550') #retorna um JSON com os dados e status do proxy</p>\n<p>#a connect() testa proxies com no m\u00e1ximo 7000 ms, caso ultrapassar o retorno ser\u00e1 DIE</p>\n<p>#&lt;---------------------------------------------------&gt;#\n#Fun\u00e7\u00e3o curl()\n#&lt; Com a curl() voc\u00ea pode realizar um request tanto GET quanto POST de maneira f\u00e1cil &gt;#\nfrom mbpro import curl\npostfields = 'post1=carlos&amp;post2=jeferson&amp;post3=antonio&amp;post4=pedro'</p>\n<p>data = curl('<a href=\"http://proxy.mbpro.in/data.php\" rel=\"nofollow\">http://proxy.mbpro.in/data.php</a>', post=postfields).text()\nprint(data)\n#Atributos ao curl:\n#url -&gt; urlencode\n#header -&gt; em forma de dict (opcional)\n#timeout -&gt; em inteiro (opcional)\n#post (opcional)</p>\n<p>#&lt;---------------------------------------------------&gt;#\n#Fun\u00e7\u00e3o pretty_print()\n#&lt; Com a pretty_print() voc\u00ea pode printar um json em PRETTY_PRINT &gt;#\nfrom mbpro import pretty_print</p>\n<p>json = {\"nome\":\"carlos\",\"idade\":\"19 anos\",\"sexo\":\"masculino\"} #O json tamb\u00e9m pode vir em str</p>\n<p>pretty = pretty_print(json)</p>\n<p>print(pretty)</p>\n</code><p><code></code></p></pre><p></p>\n<h3>Copyright</h3>\n<pre><code>\nTodos os direitos reservados a equipe MBPro Services and Revolutions\n</code><p><code>By: Master Bank\n</code></p></pre><p></p>\n\n          </div>"}, "last_serial": 5783814, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "71ca7052644a00d72071822b7cabfe41", "sha256": "049ae02eb7c3369d01b5210055abafc0623964f9ca2d61efb8331562486cfab7"}, "downloads": -1, "filename": "mbpro-0.0.4.tar.gz", "has_sig": false, "md5_digest": "71ca7052644a00d72071822b7cabfe41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2974, "upload_time": "2019-09-04T22:00:39", "upload_time_iso_8601": "2019-09-04T22:00:39.573428Z", "url": "https://files.pythonhosted.org/packages/b9/cc/385f61c1d9b058f235a55af9e089305d13f7990d907682ff4389b9aab9a4/mbpro-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "9c11f1f4bea18a37f174b62c000e4b55", "sha256": "ef6648ca0c4ffc755f811e48c4c91d02efc5d7d4ecf343cb0bef29cda7097612"}, "downloads": -1, "filename": "mbpro-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9c11f1f4bea18a37f174b62c000e4b55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3271, "upload_time": "2019-09-04T22:28:23", "upload_time_iso_8601": "2019-09-04T22:28:23.102091Z", "url": "https://files.pythonhosted.org/packages/93/59/fa2cb15362dfe58ae05fc85f83f9b23f01638143a4e2a714014712f2a737/mbpro-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c11f1f4bea18a37f174b62c000e4b55", "sha256": "ef6648ca0c4ffc755f811e48c4c91d02efc5d7d4ecf343cb0bef29cda7097612"}, "downloads": -1, "filename": "mbpro-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9c11f1f4bea18a37f174b62c000e4b55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3271, "upload_time": "2019-09-04T22:28:23", "upload_time_iso_8601": "2019-09-04T22:28:23.102091Z", "url": "https://files.pythonhosted.org/packages/93/59/fa2cb15362dfe58ae05fc85f83f9b23f01638143a4e2a714014712f2a737/mbpro-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:02 2020"}