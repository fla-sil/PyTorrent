{"info": {"author": "Sparkplug", "author_email": "mugisha@sparkpl.ug", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Utilities"], "description": "# MTN Mobile Money API Client\n\nMTN MoMo API Client for Python.\n\n[![Build Status](https://travis-ci.com/sparkplug/momoapi-python.svg?branch=master)](https://travis-ci.com/sparkplug/momoapi-node)\n[![Latest Version](https://img.shields.io/pypi/v/tox-travis.svg)](https://badge.fury.io/js/mtn-momo)\n[![Coverage Status](https://coveralls.io/repos/github/sparkplug/momoapi-python/badge.svg?branch=master)](https://coveralls.io/github/sparkplug/momoapi-python?branch=master)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/momo-api-developers/)\n\n\n# Installing\n\nAdd the latest version of the library to your project using pip:\n\n```bash\n $ pip install mtnmomo\n```\n\nThis library supports Python 2.7+ or Python 3.4+ (PyPy supported)\n\n# Sandbox Environment\n\n## Creating a sandbox environment API user \n\nNext, we need to get the `User ID` and `User Secret` and to do this we shall need to use the Primary Key for the Product to which we are subscribed, as well as specify a host. The library ships with a commandline application that helps to create sandbox credentials. It assumes you have created an account on `https://momodeveloper.mtn.com` and have your `Ocp-Apim-Subscription-Key`. \n\n```bash\n## within the project, on the command line. In this example, our domain is akabbo.ug\n$ mtnmomo\n$ providerCallBackHost: https://akabbo.ug\n$ Ocp-Apim-Subscription-Key: f83xx8d8xx6749f19a26e2265aeadbcdeg\n```\n\nThe `providerCallBackHost` is your callback host and `Ocp-Apim-Subscription-Key` is your API key for the specific product to which you are subscribed. The `API Key` is unique to the product and you will need an `API Key` for each product you use. You should get a response similar to the following:\n\n```bash\nHere is your User Id and API secret : {'apiKey': 'b0431db58a9b41faa8f5860230xxxxxx', 'UserId': '053c6dea-dd68-xxxx-xxxx-c830dac9f401'}\n```\n\nThese are the credentials we shall use for the sandbox environment. In production, these credentials are provided for you on the MTN OVA management dashboard after KYC requirements are met.\n\n## Configuration\n\nBefore we can fully utilize the library, we need to specify global configurations. The global configuration must contain the following:\n\n* `BASE_URL`: An optional base url to the MTN Momo API. By default the staging base url will be used\n* `ENVIRONMENT`: Optional enviroment, either \"sandbox\" or \"production\". Default is 'sandbox'\n* `CALLBACK_HOST`: The domain where you webhooks urls are hosted. This is mandatory.\n\nOnce you have specified the global variables, you can now provide the product-specific variables. Each MoMo API product requires its own authentication details i.e its own `Subscription Key`, `User ID` and `User Secret`, also sometimes refered to as the `API Secret`. As such, we have to configure subscription keys for each product you will be using. \n\nThe full list of configuration options can be seen in the example below:\n\n ```python\n config = {\n    \"ENVIRONMENT\": os.environ.get(\"ENVIRONMENT\"), \n    \"BASE_URL\": os.environ.get(\"BASE_URL\"), \n    \"CALLBACK_HOST\": os.environ.get(\"CALLBACK_HOST\"), # Mandatory.\n    \"COLLECTION_PRIMARY_KEY\": os.environ.get(\"COLLECTION_PRIMARY_KEY\"), \n    \"COLLECTION_USER_ID\": os.environ.get(\"COLLECTION_USER_ID\"),\n    \"COLLECTION_API_SECRET\": os.environ.get(\"COLLECTION_API_SECRET\"),\n    \"REMITTANCE_USER_ID\": os.environ.get(\"REMITTANCE_USER_ID\"), \n    \"REMITTANCE_API_SECRET\": os.environ.get(\"REMITTANCE_API_SECRET\"),\n    \"REMITTANCE_PRIMARY_KEY\": os.envieon.get(\"REMITTANCE_PRIMARY_KEY\"),\n    \"DISBURSEMENT_USER_ID\": os.environ.get(\"DISBURSEMENT_USER_ID\"), \n    \"DISBURSEMENT_API_SECRET\": os.environ.get(\"DISBURSEMENTS_API_SECRET\"),\n    \"DISBURSEMENT_PRIMARY_KEY\": os.environ.get(\"DISBURSEMENT_PRIMARY_KEY\"), \n}\n```\n\nYou will only need to configure the variables for the product(s) you will be using.\n\n## Collections\n\nThe collections client can be created with the following paramaters. Note that the `COLLECTION_USER_ID` and `COLLECTION_API_SECRET` for production are provided on the MTN OVA dashboard;\n\n* `COLLECTION_PRIMARY_KEY`: Primary Key for the `Collection` product on the developer portal.\n* `COLLECTION_USER_ID`: For sandbox, use the one generated with the `mtnmomo` command.\n* `COLLECTION_API_SECRET`: For sandbox, use the one generated with the `mtnmomo` command.\n\nYou can create a collection client with the following:\n\n```python\nimport os\nfrom mtnmomo.collection import Collection\n\nclient = Collection({\n        \"COLLECTION_USER_ID\": os.environ.get(\"COLLECTION_USER_ID\"),\n        \"COLLECTION_API_SECRET\": os.environ.get(\"COLLECTION_API_SECRET\"),\n        \"COLLECTION_PRIMARY_KEY\": os.environ.get(\"COLLECTION_PRIMARY_KEY\"),\n    })\n```\n\n### Methods\n\n1. `requestToPay`: This operation is used to request a payment from a consumer (Payer). The payer will be asked to authorize the payment. The transaction is executed once the payer has authorized the payment. The transaction will be in status PENDING until it is authorized or declined by the payer or it is timed out by the system. Status of the transaction can be validated by using `getTransactionStatus`.\n\n2. `getTransaction`: Retrieve transaction information using the `transactionId` returned by `requestToPay`. You can invoke it at intervals until the transaction fails or succeeds. If the transaction has failed, it will throw an appropriate error. \n\n3. `getBalance`: Get the balance of the account.\n\n4. `isPayerActive`: check if an account holder is registered and active in the system.\n\n### Sample Code\n\n```python\nimport os\nfrom mtnmomo.collection import Collection\n\nclient = Collection({\n    \"COLLECTION_USER_ID\": os.environ.get(\"COLLECTION_USER_ID\"),\n    \"COLLECTION_API_SECRET\": os.environ.get(\"COLLECTION_API_SECRET\"),\n    \"COLLECTION_PRIMARY_KEY\": os.environ.get(\"COLLECTION_PRIMARY_KEY\"),\n})\n\nclient.requestToPay(\n    mobile=\"256772123456\", amount=\"600\", external_id=\"123456789\", payee_note=\"dd\", payer_message=\"dd\", currency=\"EUR\")\n```\n\n## Disbursement\n\nThe Disbursements client can be created with the following paramaters. Note that the `DISBURSEMENT_USER_ID` and `DISBURSEMENT_API_SECRET` for production are provided on the MTN OVA dashboard;\n\n* `DISBURSEMENT_PRIMARY_KEY`: Primary Key for the `Disbursement` product on the developer portal.\n* `DISBURSEMENT_USER_ID`: For sandbox, use the one generated with the `mtnmomo` command.\n* `DISBURSEMENT_API_SECRET`: For sandbox, use the one generated with the `mtnmomo` command.\n\nYou can create a disbursements client with the following\n\n```python\nimport os\nfrom mtnmomo.collection import Disbursement\n\nclient = Disbursement({\n    \"DISBURSEMENT_USER_ID\": os.environ.get(\"DISBURSEMENT_USER_ID\"),\n    \"DISBURSEMENT_API_SECRET\": os.environ.get(\"DISBURSEMENT_API_SECRET\"),\n    \"DISBURSEMENT_PRIMARY_KEY\": os.environ.get(\"DISBURSEMENT_PRIMARY_KEY\"),\n})\n```\n\n### Methods\n\n1. `transfer`: Used to transfer an amount from the owner\u2019s account to a payee account. Status of the transaction can be validated by using the `getTransactionStatus` method.\n\n2. `getTransactionStatus`: Retrieve transaction information using the `transactionId` returned by `transfer`. You can invoke it at intervals until the transaction fails or succeeds.\n\n2. `getBalance`: Get your account balance.\n\n3. `isPayerActive`: This method is used to check if an account holder is registered and active in the system.\n\n#### Sample Code\n\n```python\nimport os\nfrom mtnmomo.collection import Disbursement\n\nclient = Disbursement({\n    \"DISBURSEMENT_USER_ID\": os.environ.get(\"DISBURSEMENT_USER_ID\"),\n    \"DISBURSEMENT_API_SECRET\": os.environ.get(\"DISBURSEMENT_API_SECRET\"),\n    \"DISBURSEMENT_PRIMARY_KEY\": os.environ.get(\"DISBURSEMENT_PRIMARY_KEY\"),\n})\n\nclient.transfer(amount=\"600\", mobile=\"256772123456\", external_id=\"123456789\", payee_note=\"dd\",      payer_message=\"dd\", currency=\"EUR\")\n\n```\n\n# Unit Tests\n\nThis library has a comprehensive test suite, which can be run using the `tox` command:\n\n## to view all test environments\n\n```bash\n$ tox -l  \n``` \n## to run the tests for Python 2.7  \n\n```bash\n$ tox -e py27-cover \n```\n\n## to run the tests for Python 3.4\n\n```bash\n$ tox -e py34-cover \n``` \n\nThank you.\n\n\nChangelog\n=========\n\n0.1.0 (2018-10-29)\n------------------\n\n* First release on PyPI.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sparkplug/momoapi-python", "keywords": "MoMo API,MoMo API Python Wrapper,MoMo API Python", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "mtnmomo", "package_url": "https://pypi.org/project/mtnmomo/", "platform": "", "project_url": "https://pypi.org/project/mtnmomo/", "project_urls": {"Homepage": "https://github.com/sparkplug/momoapi-python"}, "release_url": "https://pypi.org/project/mtnmomo/3.0.1/", "requires_dist": null, "requires_python": "", "summary": "Python wrapper for the MTN MoMo API.", "version": "3.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MTN Mobile Money API Client</h1>\n<p>MTN MoMo API Client for Python.</p>\n<p><a href=\"https://travis-ci.com/sparkplug/momoapi-node\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec30a74cf1d9d8198b0733db56dd0dbfed31baea/68747470733a2f2f7472617669732d63692e636f6d2f737061726b706c75672f6d6f6d6f6170692d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/js/mtn-momo\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0d5b499143c94b2c8f5eda5872ea761b1c0f5a6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f746f782d7472617669732e737667\"></a>\n<a href=\"https://coveralls.io/github/sparkplug/momoapi-python?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d29f3165ed1fd0de3e37ce584aee9a03d9857207/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f737061726b706c75672f6d6f6d6f6170692d707974686f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://spectrum.chat/momo-api-developers/\" rel=\"nofollow\"><img alt=\"Join the community on Spectrum\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8299923510866316317464943f9b48d147f835ce/68747470733a2f2f77697468737065637472756d2e6769746875622e696f2f62616467652f62616467652e737667\"></a></p>\n<h1>Installing</h1>\n<p>Add the latest version of the library to your project using pip:</p>\n<pre> $ pip install mtnmomo\n</pre>\n<p>This library supports Python 2.7+ or Python 3.4+ (PyPy supported)</p>\n<h1>Sandbox Environment</h1>\n<h2>Creating a sandbox environment API user</h2>\n<p>Next, we need to get the <code>User ID</code> and <code>User Secret</code> and to do this we shall need to use the Primary Key for the Product to which we are subscribed, as well as specify a host. The library ships with a commandline application that helps to create sandbox credentials. It assumes you have created an account on <code>https://momodeveloper.mtn.com</code> and have your <code>Ocp-Apim-Subscription-Key</code>.</p>\n<pre><span class=\"c1\">## within the project, on the command line. In this example, our domain is akabbo.ug</span>\n$ mtnmomo\n$ providerCallBackHost: https://akabbo.ug\n$ Ocp-Apim-Subscription-Key: f83xx8d8xx6749f19a26e2265aeadbcdeg\n</pre>\n<p>The <code>providerCallBackHost</code> is your callback host and <code>Ocp-Apim-Subscription-Key</code> is your API key for the specific product to which you are subscribed. The <code>API Key</code> is unique to the product and you will need an <code>API Key</code> for each product you use. You should get a response similar to the following:</p>\n<pre>Here is your User Id and API secret : <span class=\"o\">{</span><span class=\"s1\">'apiKey'</span>: <span class=\"s1\">'b0431db58a9b41faa8f5860230xxxxxx'</span>, <span class=\"s1\">'UserId'</span>: <span class=\"s1\">'053c6dea-dd68-xxxx-xxxx-c830dac9f401'</span><span class=\"o\">}</span>\n</pre>\n<p>These are the credentials we shall use for the sandbox environment. In production, these credentials are provided for you on the MTN OVA management dashboard after KYC requirements are met.</p>\n<h2>Configuration</h2>\n<p>Before we can fully utilize the library, we need to specify global configurations. The global configuration must contain the following:</p>\n<ul>\n<li><code>BASE_URL</code>: An optional base url to the MTN Momo API. By default the staging base url will be used</li>\n<li><code>ENVIRONMENT</code>: Optional enviroment, either \"sandbox\" or \"production\". Default is 'sandbox'</li>\n<li><code>CALLBACK_HOST</code>: The domain where you webhooks urls are hosted. This is mandatory.</li>\n</ul>\n<p>Once you have specified the global variables, you can now provide the product-specific variables. Each MoMo API product requires its own authentication details i.e its own <code>Subscription Key</code>, <code>User ID</code> and <code>User Secret</code>, also sometimes refered to as the <code>API Secret</code>. As such, we have to configure subscription keys for each product you will be using.</p>\n<p>The full list of configuration options can be seen in the example below:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"ENVIRONMENT\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"ENVIRONMENT\"</span><span class=\"p\">),</span> \n   <span class=\"s2\">\"BASE_URL\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"BASE_URL\"</span><span class=\"p\">),</span> \n   <span class=\"s2\">\"CALLBACK_HOST\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"CALLBACK_HOST\"</span><span class=\"p\">),</span> <span class=\"c1\"># Mandatory.</span>\n   <span class=\"s2\">\"COLLECTION_PRIMARY_KEY\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_PRIMARY_KEY\"</span><span class=\"p\">),</span> \n   <span class=\"s2\">\"COLLECTION_USER_ID\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_USER_ID\"</span><span class=\"p\">),</span>\n   <span class=\"s2\">\"COLLECTION_API_SECRET\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_API_SECRET\"</span><span class=\"p\">),</span>\n   <span class=\"s2\">\"REMITTANCE_USER_ID\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"REMITTANCE_USER_ID\"</span><span class=\"p\">),</span> \n   <span class=\"s2\">\"REMITTANCE_API_SECRET\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"REMITTANCE_API_SECRET\"</span><span class=\"p\">),</span>\n   <span class=\"s2\">\"REMITTANCE_PRIMARY_KEY\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">envieon</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"REMITTANCE_PRIMARY_KEY\"</span><span class=\"p\">),</span>\n   <span class=\"s2\">\"DISBURSEMENT_USER_ID\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENT_USER_ID\"</span><span class=\"p\">),</span> \n   <span class=\"s2\">\"DISBURSEMENT_API_SECRET\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENTS_API_SECRET\"</span><span class=\"p\">),</span>\n   <span class=\"s2\">\"DISBURSEMENT_PRIMARY_KEY\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENT_PRIMARY_KEY\"</span><span class=\"p\">),</span> \n<span class=\"p\">}</span>\n</pre>\n<p>You will only need to configure the variables for the product(s) you will be using.</p>\n<h2>Collections</h2>\n<p>The collections client can be created with the following paramaters. Note that the <code>COLLECTION_USER_ID</code> and <code>COLLECTION_API_SECRET</code> for production are provided on the MTN OVA dashboard;</p>\n<ul>\n<li><code>COLLECTION_PRIMARY_KEY</code>: Primary Key for the <code>Collection</code> product on the developer portal.</li>\n<li><code>COLLECTION_USER_ID</code>: For sandbox, use the one generated with the <code>mtnmomo</code> command.</li>\n<li><code>COLLECTION_API_SECRET</code>: For sandbox, use the one generated with the <code>mtnmomo</code> command.</li>\n</ul>\n<p>You can create a collection client with the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mtnmomo.collection</span> <span class=\"kn\">import</span> <span class=\"n\">Collection</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Collection</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"COLLECTION_USER_ID\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_USER_ID\"</span><span class=\"p\">),</span>\n        <span class=\"s2\">\"COLLECTION_API_SECRET\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_API_SECRET\"</span><span class=\"p\">),</span>\n        <span class=\"s2\">\"COLLECTION_PRIMARY_KEY\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_PRIMARY_KEY\"</span><span class=\"p\">),</span>\n    <span class=\"p\">})</span>\n</pre>\n<h3>Methods</h3>\n<ol>\n<li>\n<p><code>requestToPay</code>: This operation is used to request a payment from a consumer (Payer). The payer will be asked to authorize the payment. The transaction is executed once the payer has authorized the payment. The transaction will be in status PENDING until it is authorized or declined by the payer or it is timed out by the system. Status of the transaction can be validated by using <code>getTransactionStatus</code>.</p>\n</li>\n<li>\n<p><code>getTransaction</code>: Retrieve transaction information using the <code>transactionId</code> returned by <code>requestToPay</code>. You can invoke it at intervals until the transaction fails or succeeds. If the transaction has failed, it will throw an appropriate error.</p>\n</li>\n<li>\n<p><code>getBalance</code>: Get the balance of the account.</p>\n</li>\n<li>\n<p><code>isPayerActive</code>: check if an account holder is registered and active in the system.</p>\n</li>\n</ol>\n<h3>Sample Code</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mtnmomo.collection</span> <span class=\"kn\">import</span> <span class=\"n\">Collection</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Collection</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"COLLECTION_USER_ID\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_USER_ID\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"COLLECTION_API_SECRET\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_API_SECRET\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"COLLECTION_PRIMARY_KEY\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"COLLECTION_PRIMARY_KEY\"</span><span class=\"p\">),</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">requestToPay</span><span class=\"p\">(</span>\n    <span class=\"n\">mobile</span><span class=\"o\">=</span><span class=\"s2\">\"256772123456\"</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"s2\">\"600\"</span><span class=\"p\">,</span> <span class=\"n\">external_id</span><span class=\"o\">=</span><span class=\"s2\">\"123456789\"</span><span class=\"p\">,</span> <span class=\"n\">payee_note</span><span class=\"o\">=</span><span class=\"s2\">\"dd\"</span><span class=\"p\">,</span> <span class=\"n\">payer_message</span><span class=\"o\">=</span><span class=\"s2\">\"dd\"</span><span class=\"p\">,</span> <span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"s2\">\"EUR\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Disbursement</h2>\n<p>The Disbursements client can be created with the following paramaters. Note that the <code>DISBURSEMENT_USER_ID</code> and <code>DISBURSEMENT_API_SECRET</code> for production are provided on the MTN OVA dashboard;</p>\n<ul>\n<li><code>DISBURSEMENT_PRIMARY_KEY</code>: Primary Key for the <code>Disbursement</code> product on the developer portal.</li>\n<li><code>DISBURSEMENT_USER_ID</code>: For sandbox, use the one generated with the <code>mtnmomo</code> command.</li>\n<li><code>DISBURSEMENT_API_SECRET</code>: For sandbox, use the one generated with the <code>mtnmomo</code> command.</li>\n</ul>\n<p>You can create a disbursements client with the following</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mtnmomo.collection</span> <span class=\"kn\">import</span> <span class=\"n\">Disbursement</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Disbursement</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"DISBURSEMENT_USER_ID\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENT_USER_ID\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"DISBURSEMENT_API_SECRET\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENT_API_SECRET\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"DISBURSEMENT_PRIMARY_KEY\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENT_PRIMARY_KEY\"</span><span class=\"p\">),</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>Methods</h3>\n<ol>\n<li>\n<p><code>transfer</code>: Used to transfer an amount from the owner\u2019s account to a payee account. Status of the transaction can be validated by using the <code>getTransactionStatus</code> method.</p>\n</li>\n<li>\n<p><code>getTransactionStatus</code>: Retrieve transaction information using the <code>transactionId</code> returned by <code>transfer</code>. You can invoke it at intervals until the transaction fails or succeeds.</p>\n</li>\n<li>\n<p><code>getBalance</code>: Get your account balance.</p>\n</li>\n<li>\n<p><code>isPayerActive</code>: This method is used to check if an account holder is registered and active in the system.</p>\n</li>\n</ol>\n<h4>Sample Code</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mtnmomo.collection</span> <span class=\"kn\">import</span> <span class=\"n\">Disbursement</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Disbursement</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"DISBURSEMENT_USER_ID\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENT_USER_ID\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"DISBURSEMENT_API_SECRET\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENT_API_SECRET\"</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"DISBURSEMENT_PRIMARY_KEY\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"DISBURSEMENT_PRIMARY_KEY\"</span><span class=\"p\">),</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"s2\">\"600\"</span><span class=\"p\">,</span> <span class=\"n\">mobile</span><span class=\"o\">=</span><span class=\"s2\">\"256772123456\"</span><span class=\"p\">,</span> <span class=\"n\">external_id</span><span class=\"o\">=</span><span class=\"s2\">\"123456789\"</span><span class=\"p\">,</span> <span class=\"n\">payee_note</span><span class=\"o\">=</span><span class=\"s2\">\"dd\"</span><span class=\"p\">,</span>      <span class=\"n\">payer_message</span><span class=\"o\">=</span><span class=\"s2\">\"dd\"</span><span class=\"p\">,</span> <span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"s2\">\"EUR\"</span><span class=\"p\">)</span>\n</pre>\n<h1>Unit Tests</h1>\n<p>This library has a comprehensive test suite, which can be run using the <code>tox</code> command:</p>\n<h2>to view all test environments</h2>\n<pre>$ tox -l  \n</pre>\n<h2>to run the tests for Python 2.7</h2>\n<pre>$ tox -e py27-cover \n</pre>\n<h2>to run the tests for Python 3.4</h2>\n<pre>$ tox -e py34-cover \n</pre>\n<p>Thank you.</p>\n<h1>Changelog</h1>\n<h2>0.1.0 (2018-10-29)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n\n          </div>"}, "last_serial": 4987557, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "b50d9d1d84b1943b049570d91521f579", "sha256": "d94a55d4ee3610713c4ed649af2f2305d880dfa12b6dcf90b721a6b19d643ea1"}, "downloads": -1, "filename": "mtnmomo-2.0.0.tar.gz", "has_sig": false, "md5_digest": "b50d9d1d84b1943b049570d91521f579", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22781, "upload_time": "2019-03-26T12:43:17", "upload_time_iso_8601": "2019-03-26T12:43:17.489185Z", "url": "https://files.pythonhosted.org/packages/54/5c/584a4bacab90f9b6ff9bec1b47cd2b4e2d38da739f47ab6cc672acb30a96/mtnmomo-2.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "a1311819e136a9d2119b84a6319b1367", "sha256": "1736c6ecf75ef814a7b40875db41970115c2d6c78798e6c6be31a9e68b034b11"}, "downloads": -1, "filename": "mtnmomo-3.0.1.tar.gz", "has_sig": false, "md5_digest": "a1311819e136a9d2119b84a6319b1367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22801, "upload_time": "2019-03-26T13:07:49", "upload_time_iso_8601": "2019-03-26T13:07:49.141369Z", "url": "https://files.pythonhosted.org/packages/c1/4b/7b9b317acb21090a0233ead981f2ffade41d71f04574de50fa93d2f9fc88/mtnmomo-3.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a1311819e136a9d2119b84a6319b1367", "sha256": "1736c6ecf75ef814a7b40875db41970115c2d6c78798e6c6be31a9e68b034b11"}, "downloads": -1, "filename": "mtnmomo-3.0.1.tar.gz", "has_sig": false, "md5_digest": "a1311819e136a9d2119b84a6319b1367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22801, "upload_time": "2019-03-26T13:07:49", "upload_time_iso_8601": "2019-03-26T13:07:49.141369Z", "url": "https://files.pythonhosted.org/packages/c1/4b/7b9b317acb21090a0233ead981f2ffade41d71f04574de50fa93d2f9fc88/mtnmomo-3.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:41 2020"}