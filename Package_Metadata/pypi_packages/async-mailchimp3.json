{"info": {"author": "MinJeong Kim", "author_email": "mj111@mymusictaste.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "|MIT license|\n\nasync-python-mailchimp-api\n==========================\n\nA straighforward python asynchronous client for v3 of MailChimp API using\naiohttp >= 3.0.0. This Project forked from `python-mailchimp <https://github.com/charlesthk/python-mailchimp>`__\n\n\nGetting Started\n---------------\n\nInstallation\n~~~~~~~~~~~~\n\nThis client is hosted at PyPi under the name ``async-mailchimp3``, to install\nit, simply run\n\n``pip install async-mailchimp3``\n\nUpgrading from v2.x\n~~~~~~~~~~~~~~~~~~~~~\n\nThe order of arguments for initializing the Mailchimp API has been\nreversed starting in 2.1.0 as the username is an optional argument for\nbasic auth. Please reverse the order of your arguments or remove the\nusername argument entirely. The name of the authentication argument has\nalso changed from ``mc_secret`` to ``mc_api``.\n\nUpgrading from v1.x\n~~~~~~~~~~~~~~~~~~~\n\nThe installation procedure for 2.x is the same as before, however there\nare a massive number of changes to the naming conventions within this\nwrapper and the way in which certain methods are called. Please read\nthe documentation below carefully for information on the new structure\nand expanded functionality. With this release, all documented endpoints\nare implemented and all endpoint methods are available.\n\nHistory\n~~~~~~~\n\nUp to date with\n`changelog <http://developer.mailchimp.com/documentation/mailchimp/guides/changelog/>`__\nfeatures listed thru 3/03/2017.\n\nInitialization\n~~~~~~~~~~~~~~\n\nGrab ``YOUR_API_KEY`` from your mailchimp account (Account > Extra >\nApi Keys). ``YOUR_USERNAME`` is the one you use to login on the website\nand is optional.\n\n::\n\n    from mailchimp3 import MailChimp\n\n    client = MailChimp(mc_api='YOUR_API_KEY', mc_user='YOUR_USERNAME')\n\nPagination\n~~~~~~~~~~\n\nSimply add ``count`` and ``offset`` arguments in your function. The count\nis how many records to return, the offset is how many records to skip.\nFor endpoints that allow the pagination parameters, the all() method\nhas an additional boolean ``get_all`` argument that will loop through all\nrecords until the API no longer returns any to get all records without\nmanually performing an additional query. By default, count is 10 and\noffset is 0 for all endpoints that support it. The ``get_all`` parameter\non the all() method on any endpoint defaults to false, which follows\nthe values that are provided in the call, and using ``get_all=True`` will\nignore the provided count and offset to ensure that all records are\nreturned. When using ``get_all``, the count will be 5000, to fetch large\nnumbers of records without flooding the system with requests. The large\nsize of count should not impact calls which are expected to return a\nvery small number of records, and should improve performance for calls\nwhere fetching 5000 records would only provide a fraction by preventing\nthe delay of making a huge number of requests.\n\n::\n\n    await client.lists.members.all('123456', count=100, offset=0)\n\nFields\n~~~~~~\n\nMany endpoints allow you to select which fields will be returned out of\nall available fields (for example, only the email\\_address of a\nmember). Simply add ``fields`` arguments in your function. The\nfollowing only display email\\_address and id for each member in list\n123456:\n\n::\n\n    await client.lists.members.all('123456', get_all=True, fields=\"members.email_address,members.id\")\n\nExamples\n~~~~~~~~\n\n::\n\n    # returns all the lists (only name and id)\n    await client.lists.all(get_all=True, fields=\"lists.name,lists.id\")\n\n    # returns all members inside list '123456'\n    await client.lists.members.all('123456', get_all=True)\n\n    # return the first 100 member's email addresses for the list with id 123456\n    await client.lists.members.all('123456', count=100, offset=0, fields=\"members.email_address\")\n\n    # returns the list matching id '123456'\n    await client.lists.get('123456')\n\n    # add John Doe with email john.doe@example.com to list matching id '123456'\n    await client.lists.members.create('123456', {\n        'email_address': 'john.doe@example.com',\n        'status': 'subscribed',\n        'merge_fields': {\n            'FNAME': 'John',\n            'LNAME': 'Doe',\n        },\n    })\n\n    # returns all the campaigns\n    await client.campaigns.all(get_all=True)\n\n    # You can also disable at runtime with the optional ``enabled`` parameter.\n    # Every API call will return None\n    client = MailChimp('YOUR USERNAME', 'YOUR SECRET KEY', enabled=False)\n\n    # You are encouraged to specify a value in seconds for the  ``timeout``\n    # parameter to avoid hanging requests.\n    client = MailChimp('YOUR USERNAME', 'YOUR SECRET KEY', timeout=10.0)\n\n    # You are encouraged to specify a User-Agent for requests to the MailChimp\n    # API. Headers can be specified using the ``request_headers`` parameter.\n    headers = {}\n    headers['User-Agent'] = 'Example (example@example.com)'\n    client = MailChimp('YOUR USERNAME', 'YOUR SECRET KEY',\n                       request_headers=headers)\n\nAPI Structure\n-------------\n\nAll endpoints follow the structure listed in the official MailChimp API\nv3 documentation. The structure will be listed below and then the\nindividual methods available after.\n\n::\n\n    MailChimp\n    +- Root\n    +- Authorized Apps\n    +- Automations\n    |  +- Actions\n    |  +- Emails\n    |  |  +- Actions\n    |  |  +- Queues\n    |  +- Removed Subscribers\n    +- Batch Operations\n    +- Batch Webhooks\n    +- Campaign Folders\n    +- Campaigns\n    |  +- Actions\n    |  +- Content\n    |  +- Feedback\n    |  +- Send Checklist\n    +- Conversations\n    |  +- Messages\n    +- Stores\n    |  +- Carts\n    |  |  +- Lines\n    |  +- Customers\n    |  +- Orders\n    |  |  +- Lines\n    |  +- Products\n    |     +- Images\n    |     +- Variants\n    +- File Manager Files\n    +- File Manager Folders\n    +- Lists\n    |  +- Abuse Reports\n    |  +- Activity\n    |  +- Clients\n    |  +- Growth History\n    |  +- Interest Categories\n    |  |  +- Interests\n    |  +- Members\n    |  |  +- Activity\n    |  |  +- Goals\n    |  |  +- Notes\n    |  +- Merge Fields\n    |  +- Segments\n    |  |  +- Segment Members\n    |  +- Signup Forms\n    |  +- Twitter Lead Generation Carts\n    |  +- Webhooks\n    +- Reports\n    |  +- Campaign Abuse\n    |  +- Campaign Advice\n    |  +- Click Reports\n    |  |  +- Members\n    |  +- Domain Performance\n    |  +- EepURL Reports\n    |  +- Email Activity\n    |  +- Location\n    |  +- Sent To\n    |  +- Sub-Reports\n    |  +- Unsubscribes\n    +- Seach Campaigns\n    +- Search Members\n    +- Template Folders\n    +- Templates\n       +- Default Content\n\nAPI Endpoints\n-------------\n\nBelow is the list of all endpoints and the methods that can be called\nagainst them. Any endpoint that has a method that takes an ID argument\n(for example the app\\_id in the authorized\\_apps endpoint or the\nsubscriber\\_hash in the list members endpoints) will record all IDs\npassed as well as those generated by methods that will only ever return\na single result such as the create() method present on some endpoints.\nThese stored attributes are only available at the level that they were\npassed or created at and must be passed again to interact with a lower\nor higher level such as accessing a list and then a member. The below\ncode assumes that you have initialized the MailChimp class as listed\nabove with the name ``client``.\n\nRoot\n~~~~\n\nRoot\n^^^^\n\n::\n\n    client.root.get()\n\nAuthorized Apps\n~~~~~~~~~~~~~~~\n\nAuthorized Apps\n^^^^^^^^^^^^^^^\n\n::\n\n    client.authorized_apps.create(data={})\n    client.authorized_apps.all(get_all=False)\n    client.authorized_apps.get(app_id='')\n\nAutomations\n~~~~~~~~~~~\n\nAutomations\n^^^^^^^^^^^\n\n::\n\n    client.automations.all(get_all=False)\n    client.automations.get(workflow_id='')\n\nAutomation Actions\n^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.actions.pause(workflow_id='')\n    client.automations.actions.start(workflow_id='')\n\nAutomation Emails\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.emails.all(workflow_id='')\n    client.automations.emails.get(workflow_id='', email_id='')\n\nAutomation Email Actions\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.emails.actions.pause(workflow_id='', email_id='')\n    client.automations.emails.actions.start(workflow_id='', email_id='')\n\nAutomation Email Queues\n^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.emails.queues.create(workflow_id='', email_id='', data={})\n    client.automations.emails.queues.all(workflow_id='', email_id='')\n    client.automations.emails.queues.get(workflow_id='', email_id='', subscriber_hash='')\n\nAutomation Removed Subscribers\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.removed_subscribers.create(workflow_id='', data={})\n    client.automations.removed_subscribers.all(workflow_id='')\n\nBatch Operations\n~~~~~~~~~~~~~~~~\n\nBatch Operations\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.batch_operations.create(data={})\n    client.batch_operations.all(get_all=False)\n    client.batch_operations.get(batch_id='')\n    client.batch_operations.delete(batch_id='')\n\nBatch Webhooks\n~~~~~~~~~~~~~~\n\nBatch Webhooks\n^^^^^^^^^^^^^^\n\n::\n\n    client.batch_webhooks.create(data={})\n    client.batch_webhooks.all(get_all=False)\n    client.batch_webhooks.get(batch_webhook_id='')\n    client.batch_webhooks.update(batch_webhook_id='')\n    client.batch_webhooks.delete(batch_webhook_id='')\n\nCampaigns\n~~~~~~~~~\n\nFolders\n^^^^^^^\n\n::\n\n    client.campaign_folders.create(data={})\n    client.campaign_folders.all(get_all=False)\n    client.campaign_folders.get(folder_id='')\n    client.campaign_folders.update(folder_id='', data={})\n    client.campaign_folders.delete(folder_id='')\n\nCampaigns\n^^^^^^^^^\n\n::\n\n    client.campaigns.create(data={})\n    client.campaigns.all(get_all=False)\n    client.campaigns.get(campaign_id='')\n    client.campaigns.update(campaign_id='')\n    client.campaigns.delete(campaign_id='')\n\nCampaign Actions\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.campaigns.actions.cancel(campaign_id='')\n    client.campaigns.actions.pause(campaign_id='')\n    client.campaigns.actions.replicate(campaign_id='')\n    client.campaigns.actions.resume(campaign_id='')\n    client.campaigns.actions.schedule(campaign_id='', data={})\n    client.campaigns.actions.send(campaign_id='')\n    client.campaigns.actions.test(campaign_id='', data={})\n    client.campaigns.actions.unschedule(campaign_id='')\n\nCampaign Content\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.campaigns.content.get(campaign_id='')\n    client.campaigns.content.update(campaign_id='', data={})\n\nCampaign Feedback\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.campaigns.feedback.create(campaign_id='', data={})\n    client.campaigns.feedback.all(campaign_id='', get_all=False)\n    client.campaigns.feedback.get(campaign_id='', feedback_id='')\n    client.campaigns.feedback.update(campaign_id='', feedback_id='', data={})\n    client.campaigns.feedback.delete(campaign_id='', feedback_id='')\n\nCampaign Send Checklist\n^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.campaigns.send_checklist.get(campaign_id='')\n\nConversations\n~~~~~~~~~~~~~\n\nConversations\n^^^^^^^^^^^^^\n\n::\n\n    client.conversations.all(get_all=False)\n    client.conversations.get(conversation_id='')\n\nConversation Messages\n^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.conversations.messages.create(conversation_id='', data={})\n    client.conversations.messages.all(conversation_id='')\n    client.conversations.messages.get(conversation_id='', message_id='')\n\nE-Commerce\n~~~~~~~~~~\n\nStores\n^^^^^^\n\n::\n\n    client.stores.create(data={})\n    client.stores.all(get_all=False)\n    client.stores.get(store_id='')\n    client.stores.update(store_id='', data={})\n    client.stores.delete(store_id='')\n\nStore Carts\n^^^^^^^^^^^\n\n::\n\n    client.stores.carts.create(store_id='', data={})\n    client.stores.carts.all(store_id='', get_all=False)\n    client.stores.carts.get(store_id='', cart_id='')\n    client.stores.carts.update(store_id='', cart_id='', data={})\n    client.stores.carts.delete(store_id='', cart_id='')\n\nStore Cart Lines\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.carts.lines.create(store_id='', cart_id='', data={})\n    client.stores.carts.lines.all(store_id='', cart_id='', get_all=False)\n    client.stores.carts.lines.get(store_id='', cart_id='', line_id='')\n    client.stores.carts.lines.update(store_id='', cart_id='', line_id='', data={})\n    client.stores.carts.lines.delete(store_id='', cart_id='', line_id='')\n\nStore Customers\n^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.customers.create(store_id='', data={})\n    client.stores.customers.all(store_id='', get_all=False)\n    client.stores.customers.get(store_id='', customer_id='')\n    client.stores.customers.update(store_id='', customer_id='', data={})\n    client.stores.customers.create_or_update(store_id='', customer_id='', data={})\n    client.stores.customers.delete(store_id='', customer_id='')\n\nStore Orders\n^^^^^^^^^^^^\n\n::\n\n    client.stores.orders.create(store_id='', data={})\n    client.stores.orders.all(store_id='', get_all=False)\n    client.stores.orders.get(store_id='', order_id='')\n    client.stores.orders.update(store_id='', order_id='', data={})\n    client.stores.orders.delete(store_id='', order_id='')\n\nStore Order Lines\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.orders.lines.create(store_id='', order_id='', data={})\n    client.stores.orders.lines.all(store_id='', order_id='', get_all=False)\n    client.stores.orders.lines.get(store_id='', order_id='', line_id='')\n    client.stores.orders.lines.update(store_id='', order_id='', line_id='', data={})\n    client.stores.orders.lines.delete(store_id='', order_id='', line_id='')\n\nStore Products\n^^^^^^^^^^^^^^\n\n::\n\n    client.stores.products.create(store_id='', data={})\n    client.stores.products.all(store_id='', get_all=False)\n    client.stores.products.get(store_id='', product_id='')\n    client.stores.products.update(store_id='', product_id='')\n    client.stores.products.delete(store_id='', product_id='')\n\nStore Product Images\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.products.images.create(store_id='', product_id='', data={})\n    client.stores.products.images.all(store_id='', product_id='', get_all=False)\n    client.stores.products.images.get(store_id='', product_id='', image_id='')\n    client.stores.products.images.update(store_id='', product_id='', image_id='', data={})\n    client.stores.products.images.delete(store_id='', product_id='', image_id='')\n\nStore Product Variants\n^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.products.variants.create(store_id='', product_id='', data={})\n    client.stores.products.variants.all(store_id='', product_id='', get_all=False)\n    client.stores.products.variants.get(store_id='', product_id='', variant_id='')\n    client.stores.products.variants.update(store_id='', product_id='', variant_id='', data={})\n    client.stores.products.variants.create_or_update(store_id='', product_id='', variant_id='', data={})\n    client.stores.products.variants.delete(store_id='', product_id='', variant_id='')\n\nFile Manager\n~~~~~~~~~~~~\n\nFiles\n^^^^^\n\n::\n\n    client.files.create(data={})\n    client.files.all(get_all=False)\n    client.files.get(file_id='')\n    client.files.update(file_id='', data={})\n    client.files.delete(file_id='')\n\nFolders\n^^^^^^^\n\n::\n\n    client.folders.create(data={})\n    client.folders.all(get_all=False)\n    client.folders.get(folder_id='')\n    client.folders.update(folder_id='', data={})\n    client.folders.delete(folder_id='')\n\nLists\n~~~~~\n\nLists\n^^^^^\n\n::\n\n    client.lists.create(data={})\n    client.lists.update_members(list_id='', data={})\n    client.lists.all(get_all=False)\n    client.lists.get(list_id='')\n    client.lists.update(list_id='', data={})\n    client.lists.delete(list_id='')\n\nList Abuse Reports\n^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.abuse_reports.all(list_id='', get_all=False)\n    client.lists.abuse_reports.get(list_id='', report_id='')\n\nList Activity\n^^^^^^^^^^^^^\n\n::\n\n    client.lists.activity.all(list_id='')\n\nList Clients\n^^^^^^^^^^^^\n\n::\n\n    client.lists.clients.all(list_id='')\n\nList Growth History\n^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.growth_history.all(list_id='', get_all=False)\n    client.lists.growth_history.get(list_id='', month='')\n\nList Interest Categories\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.interest_categories.create(list_id='', data={})\n    client.lists.interest_categories.all(list_id='', get_all=False)\n    client.lists.interest_categories.get(list_id='', category_id='')\n    client.lists.interest_categories.update(list_id='', category_id='', data={})\n    client.lists.interest_categories.delete(list_id='', category_id='')\n\nList Interest Category Interests\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.interest_categories.interests.create(list_id='', category_id='', data={})\n    client.lists.interest_categories.interests.all(list_id='', category_id='', get_all=False)\n    client.lists.interest_categories.interests.get(list_id='', category_id='', interest_id='')\n    client.lists.interest_categories.interests.update(list_id='', category_id='', interest_id='', data={})\n    client.lists.interest_categories.interests.delete(list_id='', category_id='', interest_id='')\n\nList Members\n^^^^^^^^^^^^\n\n::\n\n    client.lists.members.create(list_id='', data={})\n    client.lists.members.all(list_id='', get_all=False)\n    client.lists.members.get(list_id='', subscriber_hash='')\n    client.lists.members.update(list_id='', subscriber_hash='', data={})\n    client.lists.members.create_or_update(list_id='', subscriber_hash='', data={})\n    client.lists.members.delete(list_id='', subscriber_hash='')\n\nList Member Activity\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.members.activity.all(list_id='', subscriber_hash='')\n\nList Member Goals\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.members.goals.all(list_id='', subscriber_hash='')\n\nList Member Notes\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.members.notes.create(list_id='', subscriber_hash='', data={})\n    client.lists.members.notes.all(list_id='', subscriber_hash='', get_all=False)\n    client.lists.members.notes.get(list_id='', subscriber_hash='', note_id='')\n    client.lists.members.notes.update(list_id='', subscriber_hash='', note_id='', data={})\n    client.lists.members.notes.delete(list_id='', subscriber_hash='', note_id='')\n\nList Merge Fields\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.merge_fields.create(list_id='', data={})\n    client.lists.merge_fields.all(list_id='', get_all=False)\n    client.lists.merge_fields.get(list_id='', merge_id='')\n    client.lists.merge_fields.update(list_id='', merge_id='', data={})\n    client.lists.merge_fields.delete(list_id='', merge_id='')\n\nList Segments\n^^^^^^^^^^^^^\n\n::\n\n    client.lists.segments.create(list_id='', data={})\n    client.lists.segments.all(list_id='', get_all=False)\n    client.lists.segments.get(list_id='', segment_id='')\n    client.lists.segments.update(list_id='', segment_id='', data={})\n    client.lists.segments.update_members(list_id='', segment_id='', data={})\n    client.lists.segments.delete(list_id='', segment_id='')\n\nList Segment Members\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.segments.members.create(list_id='', segment_id='', data={})\n    client.lists.segments.members.all(list_id='', segment_id='', get_all=False)\n    client.lists.segments.members.delete(list_id='', segment_id='', subscriber_hash='')\n\nList Signup Forms\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.signup_forms.create(list_id='', data={})\n    client.lists.signup_forms.all(list_id='')\n\nList Webhooks\n^^^^^^^^^^^^^\n\n::\n\n    client.lists.webhooks.create(list_id='', data={})\n    client.lists.webhooks.all(list_id='')\n    client.lists.webhooks.get(list_id='', webhook_id='')\n    client.lists.webhooks.update(list_id='', webhook_id='', data={})\n    client.lists.webhooks.delete(list_id='', webhook_id='')\n\nReports\n~~~~~~~\n\nReports\n^^^^^^^\n\n::\n\n    client.reports.all(get_all=False)\n    client.reports.get(campaign_id='')\n\nCampaign Abuse Reports\n^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.abuse_reports.all(campaign_id='')\n    client.reports.abuse_reports.get(campaign_id='', report_id='')\n\nCampaign Advice\n^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.advice.all(campaign_id='')\n\nClick Details Report\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.click_details.all(campaign_id='', get_all=False)\n    client.reports.click_details.get(campaign_id='', link_id='')\n\nClick Details Report Members\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.click_details.members.all(campaign_id='', link_id='', get_all=False)\n    client.reports.click_details.members.get(campaign_id='', link_id='', subscriber_hash='')\n\nDomain Performance Reports\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.domain_performance.all(campaign_id='')\n\nEepURL Reports\n^^^^^^^^^^^^^^\n\n::\n\n    client.reports.eepurl.all(camnpaign_id='')\n\nEmail Activity Reports\n^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.email_activity.all(campaign_id='', get_all=False)\n    client.reports.email_activity.get(campaign_id='', subscriber_hash='')\n\nLocations Report\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.locations.all(campaign_id='', get_all=False)\n\nSent To Reports\n^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.sent_to.all(campaign_id='', get_all=False)\n    client.reports.sent_to.get(campaign_id='', subscriber_hash='')\n\nSub-Reports\n^^^^^^^^^^^\n\n::\n\n    client.reports.subreports.all(campaign_id='')\n\nUnsubscribes\n^^^^^^^^^^^^\n\n::\n\n    client.reports.unsubscribes.all(campaign_id='', get_all=False)\n    client.reports.unsubscribes.get(campaign_id='', subscriber_hash='')\n\nSearch\n~~~~~~\n\nCampaigns\n^^^^^^^^^\n\n::\n\n    client.search_campaigns.get()\n\nMembers\n^^^^^^^\n\n::\n\n    client.search_members.get()\n\nTemplates\n~~~~~~~~~\n\nFolders\n^^^^^^^\n\n::\n\n    client.template_folders.create(data={})\n    client.template_folders.all(get_all=False)\n    client.template_folders.get(folder_id='')\n    client.template_folders.update(folder_id='', data={})\n    client.template_folders.delete(folder_id='')\n\nTemplates\n^^^^^^^^^\n\n::\n\n    client.templates.create(data={})\n    client.templates.all(get_all=False)\n    client.templates.get(template_id='')\n    client.templates.update(template_id='', data={})\n    client.templates.delete(template_id='')\n\nDefault Content\n^^^^^^^^^^^^^^^\n\n::\n\n    client.templates.default_content.all(template_id='')\n\nLogging\n-------\n\nThe MailChimp client will log request/response detail into the mailchimp3.client\nlogging namespace. Consider the following snippet to get started with logging:\n\n::\n\n    import logging\n    fh = logging.FileHandler('/path/to/some/log.log')\n    logger = logging.getLogger('mailchimp3.client')\n    logger.addHandler(fh)\n\n    # use the client normally\n    await client.lists.all(**{'fields': 'lists.date_created'})\n\nrequest/response detail will be appended into /path/to/some/log.log:\n\n::\n\n    GET Request: https://us15.api.mailchimp.com/3.0/lists?fields=lists.date_created\n    GET Response: 200 {\"lists\":[{\"date_created\":\"2017-05-10T13:53:05+00:00\"},{\"date_created\":\"2017-08-22T20:27:56+00:00\"},{\"date_created\":\"2017-05-12T21:22:15+00:00\"},{\"date_created\":\"2017-04-27T17:42:04+00:00\"},{\"date_created\":\"2017-05-10T14:14:49+00:00\"},{\"date_created\":\"2017-05-10T13:52:37+00:00\"},{\"date_created\":\"2017-05-10T13:51:40+00:00\"}]}\n\nCheck the docs_ for more detail on the Python logging package.\n\n.. _docs: https://docs.python.org/3/library/logging.html/\n\nSupport\n-------\n\nIf you are having issues, please let us know or submit a pull request.\n\nLicense\n-------\n\nThe project is licensed under the MIT License.\n\n.. |MIT license| image:: https://img.shields.io/badge/licence-MIT-blue.svg", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MyMusicTaste/async-python-mailchimp", "keywords": "mailchimp api v3 asynchronous client wrapper", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "async-mailchimp3", "package_url": "https://pypi.org/project/async-mailchimp3/", "platform": "", "project_url": "https://pypi.org/project/async-mailchimp3/", "project_urls": {"Homepage": "https://github.com/MyMusicTaste/async-python-mailchimp"}, "release_url": "https://pypi.org/project/async-mailchimp3/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A python asynchronous client for v3 of MailChimp API", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/14f142b6cfb9c2ee9a81568b5d441940c06924cc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e63652d4d49542d626c75652e737667\"></p>\n<div id=\"async-python-mailchimp-api\">\n<h2>async-python-mailchimp-api</h2>\n<p>A straighforward python asynchronous client for v3 of MailChimp API using\naiohttp &gt;= 3.0.0. This Project forked from <a href=\"https://github.com/charlesthk/python-mailchimp\" rel=\"nofollow\">python-mailchimp</a></p>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<div id=\"installation\">\n<h4>Installation</h4>\n<p>This client is hosted at PyPi under the name <tt><span class=\"pre\">async-mailchimp3</span></tt>, to install\nit, simply run</p>\n<p><tt>pip install <span class=\"pre\">async-mailchimp3</span></tt></p>\n</div>\n<div id=\"upgrading-from-v2-x\">\n<h4>Upgrading from v2.x</h4>\n<p>The order of arguments for initializing the Mailchimp API has been\nreversed starting in 2.1.0 as the username is an optional argument for\nbasic auth. Please reverse the order of your arguments or remove the\nusername argument entirely. The name of the authentication argument has\nalso changed from <tt>mc_secret</tt> to <tt>mc_api</tt>.</p>\n</div>\n<div id=\"upgrading-from-v1-x\">\n<h4>Upgrading from v1.x</h4>\n<p>The installation procedure for 2.x is the same as before, however there\nare a massive number of changes to the naming conventions within this\nwrapper and the way in which certain methods are called. Please read\nthe documentation below carefully for information on the new structure\nand expanded functionality. With this release, all documented endpoints\nare implemented and all endpoint methods are available.</p>\n</div>\n<div id=\"history\">\n<h4>History</h4>\n<p>Up to date with\n<a href=\"http://developer.mailchimp.com/documentation/mailchimp/guides/changelog/\" rel=\"nofollow\">changelog</a>\nfeatures listed thru 3/03/2017.</p>\n</div>\n<div id=\"initialization\">\n<h4>Initialization</h4>\n<p>Grab <tt>YOUR_API_KEY</tt> from your mailchimp account (Account &gt; Extra &gt;\nApi Keys). <tt>YOUR_USERNAME</tt> is the one you use to login on the website\nand is optional.</p>\n<pre>from mailchimp3 import MailChimp\n\nclient = MailChimp(mc_api='YOUR_API_KEY', mc_user='YOUR_USERNAME')\n</pre>\n</div>\n<div id=\"pagination\">\n<h4>Pagination</h4>\n<p>Simply add <tt>count</tt> and <tt>offset</tt> arguments in your function. The count\nis how many records to return, the offset is how many records to skip.\nFor endpoints that allow the pagination parameters, the all() method\nhas an additional boolean <tt>get_all</tt> argument that will loop through all\nrecords until the API no longer returns any to get all records without\nmanually performing an additional query. By default, count is 10 and\noffset is 0 for all endpoints that support it. The <tt>get_all</tt> parameter\non the all() method on any endpoint defaults to false, which follows\nthe values that are provided in the call, and using <tt>get_all=True</tt> will\nignore the provided count and offset to ensure that all records are\nreturned. When using <tt>get_all</tt>, the count will be 5000, to fetch large\nnumbers of records without flooding the system with requests. The large\nsize of count should not impact calls which are expected to return a\nvery small number of records, and should improve performance for calls\nwhere fetching 5000 records would only provide a fraction by preventing\nthe delay of making a huge number of requests.</p>\n<pre>await client.lists.members.all('123456', count=100, offset=0)\n</pre>\n</div>\n<div id=\"fields\">\n<h4>Fields</h4>\n<p>Many endpoints allow you to select which fields will be returned out of\nall available fields (for example, only the email_address of a\nmember). Simply add <tt>fields</tt> arguments in your function. The\nfollowing only display email_address and id for each member in list\n123456:</p>\n<pre>await client.lists.members.all('123456', get_all=True, fields=\"members.email_address,members.id\")\n</pre>\n</div>\n<div id=\"examples\">\n<h4>Examples</h4>\n<pre># returns all the lists (only name and id)\nawait client.lists.all(get_all=True, fields=\"lists.name,lists.id\")\n\n# returns all members inside list '123456'\nawait client.lists.members.all('123456', get_all=True)\n\n# return the first 100 member's email addresses for the list with id 123456\nawait client.lists.members.all('123456', count=100, offset=0, fields=\"members.email_address\")\n\n# returns the list matching id '123456'\nawait client.lists.get('123456')\n\n# add John Doe with email john.doe@example.com to list matching id '123456'\nawait client.lists.members.create('123456', {\n    'email_address': 'john.doe@example.com',\n    'status': 'subscribed',\n    'merge_fields': {\n        'FNAME': 'John',\n        'LNAME': 'Doe',\n    },\n})\n\n# returns all the campaigns\nawait client.campaigns.all(get_all=True)\n\n# You can also disable at runtime with the optional ``enabled`` parameter.\n# Every API call will return None\nclient = MailChimp('YOUR USERNAME', 'YOUR SECRET KEY', enabled=False)\n\n# You are encouraged to specify a value in seconds for the  ``timeout``\n# parameter to avoid hanging requests.\nclient = MailChimp('YOUR USERNAME', 'YOUR SECRET KEY', timeout=10.0)\n\n# You are encouraged to specify a User-Agent for requests to the MailChimp\n# API. Headers can be specified using the ``request_headers`` parameter.\nheaders = {}\nheaders['User-Agent'] = 'Example (example@example.com)'\nclient = MailChimp('YOUR USERNAME', 'YOUR SECRET KEY',\n                   request_headers=headers)\n</pre>\n</div>\n</div>\n<div id=\"api-structure\">\n<h3>API Structure</h3>\n<p>All endpoints follow the structure listed in the official MailChimp API\nv3 documentation. The structure will be listed below and then the\nindividual methods available after.</p>\n<pre>MailChimp\n+- Root\n+- Authorized Apps\n+- Automations\n|  +- Actions\n|  +- Emails\n|  |  +- Actions\n|  |  +- Queues\n|  +- Removed Subscribers\n+- Batch Operations\n+- Batch Webhooks\n+- Campaign Folders\n+- Campaigns\n|  +- Actions\n|  +- Content\n|  +- Feedback\n|  +- Send Checklist\n+- Conversations\n|  +- Messages\n+- Stores\n|  +- Carts\n|  |  +- Lines\n|  +- Customers\n|  +- Orders\n|  |  +- Lines\n|  +- Products\n|     +- Images\n|     +- Variants\n+- File Manager Files\n+- File Manager Folders\n+- Lists\n|  +- Abuse Reports\n|  +- Activity\n|  +- Clients\n|  +- Growth History\n|  +- Interest Categories\n|  |  +- Interests\n|  +- Members\n|  |  +- Activity\n|  |  +- Goals\n|  |  +- Notes\n|  +- Merge Fields\n|  +- Segments\n|  |  +- Segment Members\n|  +- Signup Forms\n|  +- Twitter Lead Generation Carts\n|  +- Webhooks\n+- Reports\n|  +- Campaign Abuse\n|  +- Campaign Advice\n|  +- Click Reports\n|  |  +- Members\n|  +- Domain Performance\n|  +- EepURL Reports\n|  +- Email Activity\n|  +- Location\n|  +- Sent To\n|  +- Sub-Reports\n|  +- Unsubscribes\n+- Seach Campaigns\n+- Search Members\n+- Template Folders\n+- Templates\n   +- Default Content\n</pre>\n</div>\n<div id=\"api-endpoints\">\n<h3>API Endpoints</h3>\n<p>Below is the list of all endpoints and the methods that can be called\nagainst them. Any endpoint that has a method that takes an ID argument\n(for example the app_id in the authorized_apps endpoint or the\nsubscriber_hash in the list members endpoints) will record all IDs\npassed as well as those generated by methods that will only ever return\na single result such as the create() method present on some endpoints.\nThese stored attributes are only available at the level that they were\npassed or created at and must be passed again to interact with a lower\nor higher level such as accessing a list and then a member. The below\ncode assumes that you have initialized the MailChimp class as listed\nabove with the name <tt>client</tt>.</p>\n<div id=\"root\">\n<h4>Root</h4>\n<h4 id=\"id1\"><span class=\"section-subtitle\">Root</span></h4>\n<pre>client.root.get()\n</pre>\n</div>\n<div id=\"authorized-apps\">\n<h4>Authorized Apps</h4>\n<h4 id=\"id2\"><span class=\"section-subtitle\">Authorized Apps</span></h4>\n<pre>client.authorized_apps.create(data={})\nclient.authorized_apps.all(get_all=False)\nclient.authorized_apps.get(app_id='')\n</pre>\n</div>\n<div id=\"automations\">\n<h4>Automations</h4>\n<div id=\"id3\">\n<h5>Automations</h5>\n<pre>client.automations.all(get_all=False)\nclient.automations.get(workflow_id='')\n</pre>\n</div>\n<div id=\"automation-actions\">\n<h5>Automation Actions</h5>\n<pre>client.automations.actions.pause(workflow_id='')\nclient.automations.actions.start(workflow_id='')\n</pre>\n</div>\n<div id=\"automation-emails\">\n<h5>Automation Emails</h5>\n<pre>client.automations.emails.all(workflow_id='')\nclient.automations.emails.get(workflow_id='', email_id='')\n</pre>\n</div>\n<div id=\"automation-email-actions\">\n<h5>Automation Email Actions</h5>\n<pre>client.automations.emails.actions.pause(workflow_id='', email_id='')\nclient.automations.emails.actions.start(workflow_id='', email_id='')\n</pre>\n</div>\n<div id=\"automation-email-queues\">\n<h5>Automation Email Queues</h5>\n<pre>client.automations.emails.queues.create(workflow_id='', email_id='', data={})\nclient.automations.emails.queues.all(workflow_id='', email_id='')\nclient.automations.emails.queues.get(workflow_id='', email_id='', subscriber_hash='')\n</pre>\n</div>\n<div id=\"automation-removed-subscribers\">\n<h5>Automation Removed Subscribers</h5>\n<pre>client.automations.removed_subscribers.create(workflow_id='', data={})\nclient.automations.removed_subscribers.all(workflow_id='')\n</pre>\n</div>\n</div>\n<div id=\"batch-operations\">\n<h4>Batch Operations</h4>\n<h4 id=\"id4\"><span class=\"section-subtitle\">Batch Operations</span></h4>\n<pre>client.batch_operations.create(data={})\nclient.batch_operations.all(get_all=False)\nclient.batch_operations.get(batch_id='')\nclient.batch_operations.delete(batch_id='')\n</pre>\n</div>\n<div id=\"batch-webhooks\">\n<h4>Batch Webhooks</h4>\n<h4 id=\"id5\"><span class=\"section-subtitle\">Batch Webhooks</span></h4>\n<pre>client.batch_webhooks.create(data={})\nclient.batch_webhooks.all(get_all=False)\nclient.batch_webhooks.get(batch_webhook_id='')\nclient.batch_webhooks.update(batch_webhook_id='')\nclient.batch_webhooks.delete(batch_webhook_id='')\n</pre>\n</div>\n<div id=\"campaigns\">\n<h4>Campaigns</h4>\n<div id=\"folders\">\n<h5>Folders</h5>\n<pre>client.campaign_folders.create(data={})\nclient.campaign_folders.all(get_all=False)\nclient.campaign_folders.get(folder_id='')\nclient.campaign_folders.update(folder_id='', data={})\nclient.campaign_folders.delete(folder_id='')\n</pre>\n</div>\n<div id=\"id6\">\n<h5>Campaigns</h5>\n<pre>client.campaigns.create(data={})\nclient.campaigns.all(get_all=False)\nclient.campaigns.get(campaign_id='')\nclient.campaigns.update(campaign_id='')\nclient.campaigns.delete(campaign_id='')\n</pre>\n</div>\n<div id=\"campaign-actions\">\n<h5>Campaign Actions</h5>\n<pre>client.campaigns.actions.cancel(campaign_id='')\nclient.campaigns.actions.pause(campaign_id='')\nclient.campaigns.actions.replicate(campaign_id='')\nclient.campaigns.actions.resume(campaign_id='')\nclient.campaigns.actions.schedule(campaign_id='', data={})\nclient.campaigns.actions.send(campaign_id='')\nclient.campaigns.actions.test(campaign_id='', data={})\nclient.campaigns.actions.unschedule(campaign_id='')\n</pre>\n</div>\n<div id=\"campaign-content\">\n<h5>Campaign Content</h5>\n<pre>client.campaigns.content.get(campaign_id='')\nclient.campaigns.content.update(campaign_id='', data={})\n</pre>\n</div>\n<div id=\"campaign-feedback\">\n<h5>Campaign Feedback</h5>\n<pre>client.campaigns.feedback.create(campaign_id='', data={})\nclient.campaigns.feedback.all(campaign_id='', get_all=False)\nclient.campaigns.feedback.get(campaign_id='', feedback_id='')\nclient.campaigns.feedback.update(campaign_id='', feedback_id='', data={})\nclient.campaigns.feedback.delete(campaign_id='', feedback_id='')\n</pre>\n</div>\n<div id=\"campaign-send-checklist\">\n<h5>Campaign Send Checklist</h5>\n<pre>client.campaigns.send_checklist.get(campaign_id='')\n</pre>\n</div>\n</div>\n<div id=\"conversations\">\n<h4>Conversations</h4>\n<div id=\"id7\">\n<h5>Conversations</h5>\n<pre>client.conversations.all(get_all=False)\nclient.conversations.get(conversation_id='')\n</pre>\n</div>\n<div id=\"conversation-messages\">\n<h5>Conversation Messages</h5>\n<pre>client.conversations.messages.create(conversation_id='', data={})\nclient.conversations.messages.all(conversation_id='')\nclient.conversations.messages.get(conversation_id='', message_id='')\n</pre>\n</div>\n</div>\n<div id=\"e-commerce\">\n<h4>E-Commerce</h4>\n<div id=\"stores\">\n<h5>Stores</h5>\n<pre>client.stores.create(data={})\nclient.stores.all(get_all=False)\nclient.stores.get(store_id='')\nclient.stores.update(store_id='', data={})\nclient.stores.delete(store_id='')\n</pre>\n</div>\n<div id=\"store-carts\">\n<h5>Store Carts</h5>\n<pre>client.stores.carts.create(store_id='', data={})\nclient.stores.carts.all(store_id='', get_all=False)\nclient.stores.carts.get(store_id='', cart_id='')\nclient.stores.carts.update(store_id='', cart_id='', data={})\nclient.stores.carts.delete(store_id='', cart_id='')\n</pre>\n</div>\n<div id=\"store-cart-lines\">\n<h5>Store Cart Lines</h5>\n<pre>client.stores.carts.lines.create(store_id='', cart_id='', data={})\nclient.stores.carts.lines.all(store_id='', cart_id='', get_all=False)\nclient.stores.carts.lines.get(store_id='', cart_id='', line_id='')\nclient.stores.carts.lines.update(store_id='', cart_id='', line_id='', data={})\nclient.stores.carts.lines.delete(store_id='', cart_id='', line_id='')\n</pre>\n</div>\n<div id=\"store-customers\">\n<h5>Store Customers</h5>\n<pre>client.stores.customers.create(store_id='', data={})\nclient.stores.customers.all(store_id='', get_all=False)\nclient.stores.customers.get(store_id='', customer_id='')\nclient.stores.customers.update(store_id='', customer_id='', data={})\nclient.stores.customers.create_or_update(store_id='', customer_id='', data={})\nclient.stores.customers.delete(store_id='', customer_id='')\n</pre>\n</div>\n<div id=\"store-orders\">\n<h5>Store Orders</h5>\n<pre>client.stores.orders.create(store_id='', data={})\nclient.stores.orders.all(store_id='', get_all=False)\nclient.stores.orders.get(store_id='', order_id='')\nclient.stores.orders.update(store_id='', order_id='', data={})\nclient.stores.orders.delete(store_id='', order_id='')\n</pre>\n</div>\n<div id=\"store-order-lines\">\n<h5>Store Order Lines</h5>\n<pre>client.stores.orders.lines.create(store_id='', order_id='', data={})\nclient.stores.orders.lines.all(store_id='', order_id='', get_all=False)\nclient.stores.orders.lines.get(store_id='', order_id='', line_id='')\nclient.stores.orders.lines.update(store_id='', order_id='', line_id='', data={})\nclient.stores.orders.lines.delete(store_id='', order_id='', line_id='')\n</pre>\n</div>\n<div id=\"store-products\">\n<h5>Store Products</h5>\n<pre>client.stores.products.create(store_id='', data={})\nclient.stores.products.all(store_id='', get_all=False)\nclient.stores.products.get(store_id='', product_id='')\nclient.stores.products.update(store_id='', product_id='')\nclient.stores.products.delete(store_id='', product_id='')\n</pre>\n</div>\n<div id=\"store-product-images\">\n<h5>Store Product Images</h5>\n<pre>client.stores.products.images.create(store_id='', product_id='', data={})\nclient.stores.products.images.all(store_id='', product_id='', get_all=False)\nclient.stores.products.images.get(store_id='', product_id='', image_id='')\nclient.stores.products.images.update(store_id='', product_id='', image_id='', data={})\nclient.stores.products.images.delete(store_id='', product_id='', image_id='')\n</pre>\n</div>\n<div id=\"store-product-variants\">\n<h5>Store Product Variants</h5>\n<pre>client.stores.products.variants.create(store_id='', product_id='', data={})\nclient.stores.products.variants.all(store_id='', product_id='', get_all=False)\nclient.stores.products.variants.get(store_id='', product_id='', variant_id='')\nclient.stores.products.variants.update(store_id='', product_id='', variant_id='', data={})\nclient.stores.products.variants.create_or_update(store_id='', product_id='', variant_id='', data={})\nclient.stores.products.variants.delete(store_id='', product_id='', variant_id='')\n</pre>\n</div>\n</div>\n<div id=\"file-manager\">\n<h4>File Manager</h4>\n<div id=\"files\">\n<h5>Files</h5>\n<pre>client.files.create(data={})\nclient.files.all(get_all=False)\nclient.files.get(file_id='')\nclient.files.update(file_id='', data={})\nclient.files.delete(file_id='')\n</pre>\n</div>\n<div id=\"id8\">\n<h5>Folders</h5>\n<pre>client.folders.create(data={})\nclient.folders.all(get_all=False)\nclient.folders.get(folder_id='')\nclient.folders.update(folder_id='', data={})\nclient.folders.delete(folder_id='')\n</pre>\n</div>\n</div>\n<div id=\"lists\">\n<h4>Lists</h4>\n<div id=\"id9\">\n<h5>Lists</h5>\n<pre>client.lists.create(data={})\nclient.lists.update_members(list_id='', data={})\nclient.lists.all(get_all=False)\nclient.lists.get(list_id='')\nclient.lists.update(list_id='', data={})\nclient.lists.delete(list_id='')\n</pre>\n</div>\n<div id=\"list-abuse-reports\">\n<h5>List Abuse Reports</h5>\n<pre>client.lists.abuse_reports.all(list_id='', get_all=False)\nclient.lists.abuse_reports.get(list_id='', report_id='')\n</pre>\n</div>\n<div id=\"list-activity\">\n<h5>List Activity</h5>\n<pre>client.lists.activity.all(list_id='')\n</pre>\n</div>\n<div id=\"list-clients\">\n<h5>List Clients</h5>\n<pre>client.lists.clients.all(list_id='')\n</pre>\n</div>\n<div id=\"list-growth-history\">\n<h5>List Growth History</h5>\n<pre>client.lists.growth_history.all(list_id='', get_all=False)\nclient.lists.growth_history.get(list_id='', month='')\n</pre>\n</div>\n<div id=\"list-interest-categories\">\n<h5>List Interest Categories</h5>\n<pre>client.lists.interest_categories.create(list_id='', data={})\nclient.lists.interest_categories.all(list_id='', get_all=False)\nclient.lists.interest_categories.get(list_id='', category_id='')\nclient.lists.interest_categories.update(list_id='', category_id='', data={})\nclient.lists.interest_categories.delete(list_id='', category_id='')\n</pre>\n</div>\n<div id=\"list-interest-category-interests\">\n<h5>List Interest Category Interests</h5>\n<pre>client.lists.interest_categories.interests.create(list_id='', category_id='', data={})\nclient.lists.interest_categories.interests.all(list_id='', category_id='', get_all=False)\nclient.lists.interest_categories.interests.get(list_id='', category_id='', interest_id='')\nclient.lists.interest_categories.interests.update(list_id='', category_id='', interest_id='', data={})\nclient.lists.interest_categories.interests.delete(list_id='', category_id='', interest_id='')\n</pre>\n</div>\n<div id=\"list-members\">\n<h5>List Members</h5>\n<pre>client.lists.members.create(list_id='', data={})\nclient.lists.members.all(list_id='', get_all=False)\nclient.lists.members.get(list_id='', subscriber_hash='')\nclient.lists.members.update(list_id='', subscriber_hash='', data={})\nclient.lists.members.create_or_update(list_id='', subscriber_hash='', data={})\nclient.lists.members.delete(list_id='', subscriber_hash='')\n</pre>\n</div>\n<div id=\"list-member-activity\">\n<h5>List Member Activity</h5>\n<pre>client.lists.members.activity.all(list_id='', subscriber_hash='')\n</pre>\n</div>\n<div id=\"list-member-goals\">\n<h5>List Member Goals</h5>\n<pre>client.lists.members.goals.all(list_id='', subscriber_hash='')\n</pre>\n</div>\n<div id=\"list-member-notes\">\n<h5>List Member Notes</h5>\n<pre>client.lists.members.notes.create(list_id='', subscriber_hash='', data={})\nclient.lists.members.notes.all(list_id='', subscriber_hash='', get_all=False)\nclient.lists.members.notes.get(list_id='', subscriber_hash='', note_id='')\nclient.lists.members.notes.update(list_id='', subscriber_hash='', note_id='', data={})\nclient.lists.members.notes.delete(list_id='', subscriber_hash='', note_id='')\n</pre>\n</div>\n<div id=\"list-merge-fields\">\n<h5>List Merge Fields</h5>\n<pre>client.lists.merge_fields.create(list_id='', data={})\nclient.lists.merge_fields.all(list_id='', get_all=False)\nclient.lists.merge_fields.get(list_id='', merge_id='')\nclient.lists.merge_fields.update(list_id='', merge_id='', data={})\nclient.lists.merge_fields.delete(list_id='', merge_id='')\n</pre>\n</div>\n<div id=\"list-segments\">\n<h5>List Segments</h5>\n<pre>client.lists.segments.create(list_id='', data={})\nclient.lists.segments.all(list_id='', get_all=False)\nclient.lists.segments.get(list_id='', segment_id='')\nclient.lists.segments.update(list_id='', segment_id='', data={})\nclient.lists.segments.update_members(list_id='', segment_id='', data={})\nclient.lists.segments.delete(list_id='', segment_id='')\n</pre>\n</div>\n<div id=\"list-segment-members\">\n<h5>List Segment Members</h5>\n<pre>client.lists.segments.members.create(list_id='', segment_id='', data={})\nclient.lists.segments.members.all(list_id='', segment_id='', get_all=False)\nclient.lists.segments.members.delete(list_id='', segment_id='', subscriber_hash='')\n</pre>\n</div>\n<div id=\"list-signup-forms\">\n<h5>List Signup Forms</h5>\n<pre>client.lists.signup_forms.create(list_id='', data={})\nclient.lists.signup_forms.all(list_id='')\n</pre>\n</div>\n<div id=\"list-webhooks\">\n<h5>List Webhooks</h5>\n<pre>client.lists.webhooks.create(list_id='', data={})\nclient.lists.webhooks.all(list_id='')\nclient.lists.webhooks.get(list_id='', webhook_id='')\nclient.lists.webhooks.update(list_id='', webhook_id='', data={})\nclient.lists.webhooks.delete(list_id='', webhook_id='')\n</pre>\n</div>\n</div>\n<div id=\"reports\">\n<h4>Reports</h4>\n<div id=\"id10\">\n<h5>Reports</h5>\n<pre>client.reports.all(get_all=False)\nclient.reports.get(campaign_id='')\n</pre>\n</div>\n<div id=\"campaign-abuse-reports\">\n<h5>Campaign Abuse Reports</h5>\n<pre>client.reports.abuse_reports.all(campaign_id='')\nclient.reports.abuse_reports.get(campaign_id='', report_id='')\n</pre>\n</div>\n<div id=\"campaign-advice\">\n<h5>Campaign Advice</h5>\n<pre>client.reports.advice.all(campaign_id='')\n</pre>\n</div>\n<div id=\"click-details-report\">\n<h5>Click Details Report</h5>\n<pre>client.reports.click_details.all(campaign_id='', get_all=False)\nclient.reports.click_details.get(campaign_id='', link_id='')\n</pre>\n</div>\n<div id=\"click-details-report-members\">\n<h5>Click Details Report Members</h5>\n<pre>client.reports.click_details.members.all(campaign_id='', link_id='', get_all=False)\nclient.reports.click_details.members.get(campaign_id='', link_id='', subscriber_hash='')\n</pre>\n</div>\n<div id=\"domain-performance-reports\">\n<h5>Domain Performance Reports</h5>\n<pre>client.reports.domain_performance.all(campaign_id='')\n</pre>\n</div>\n<div id=\"eepurl-reports\">\n<h5>EepURL Reports</h5>\n<pre>client.reports.eepurl.all(camnpaign_id='')\n</pre>\n</div>\n<div id=\"email-activity-reports\">\n<h5>Email Activity Reports</h5>\n<pre>client.reports.email_activity.all(campaign_id='', get_all=False)\nclient.reports.email_activity.get(campaign_id='', subscriber_hash='')\n</pre>\n</div>\n<div id=\"locations-report\">\n<h5>Locations Report</h5>\n<pre>client.reports.locations.all(campaign_id='', get_all=False)\n</pre>\n</div>\n<div id=\"sent-to-reports\">\n<h5>Sent To Reports</h5>\n<pre>client.reports.sent_to.all(campaign_id='', get_all=False)\nclient.reports.sent_to.get(campaign_id='', subscriber_hash='')\n</pre>\n</div>\n<div id=\"sub-reports\">\n<h5>Sub-Reports</h5>\n<pre>client.reports.subreports.all(campaign_id='')\n</pre>\n</div>\n<div id=\"unsubscribes\">\n<h5>Unsubscribes</h5>\n<pre>client.reports.unsubscribes.all(campaign_id='', get_all=False)\nclient.reports.unsubscribes.get(campaign_id='', subscriber_hash='')\n</pre>\n</div>\n</div>\n<div id=\"search\">\n<h4>Search</h4>\n<div id=\"id11\">\n<h5>Campaigns</h5>\n<pre>client.search_campaigns.get()\n</pre>\n</div>\n<div id=\"members\">\n<h5>Members</h5>\n<pre>client.search_members.get()\n</pre>\n</div>\n</div>\n<div id=\"templates\">\n<h4>Templates</h4>\n<div id=\"id12\">\n<h5>Folders</h5>\n<pre>client.template_folders.create(data={})\nclient.template_folders.all(get_all=False)\nclient.template_folders.get(folder_id='')\nclient.template_folders.update(folder_id='', data={})\nclient.template_folders.delete(folder_id='')\n</pre>\n</div>\n<div id=\"id13\">\n<h5>Templates</h5>\n<pre>client.templates.create(data={})\nclient.templates.all(get_all=False)\nclient.templates.get(template_id='')\nclient.templates.update(template_id='', data={})\nclient.templates.delete(template_id='')\n</pre>\n</div>\n<div id=\"default-content\">\n<h5>Default Content</h5>\n<pre>client.templates.default_content.all(template_id='')\n</pre>\n</div>\n</div>\n</div>\n<div id=\"logging\">\n<h3>Logging</h3>\n<p>The MailChimp client will log request/response detail into the mailchimp3.client\nlogging namespace. Consider the following snippet to get started with logging:</p>\n<pre>import logging\nfh = logging.FileHandler('/path/to/some/log.log')\nlogger = logging.getLogger('mailchimp3.client')\nlogger.addHandler(fh)\n\n# use the client normally\nawait client.lists.all(**{'fields': 'lists.date_created'})\n</pre>\n<p>request/response detail will be appended into /path/to/some/log.log:</p>\n<pre>GET Request: https://us15.api.mailchimp.com/3.0/lists?fields=lists.date_created\nGET Response: 200 {\"lists\":[{\"date_created\":\"2017-05-10T13:53:05+00:00\"},{\"date_created\":\"2017-08-22T20:27:56+00:00\"},{\"date_created\":\"2017-05-12T21:22:15+00:00\"},{\"date_created\":\"2017-04-27T17:42:04+00:00\"},{\"date_created\":\"2017-05-10T14:14:49+00:00\"},{\"date_created\":\"2017-05-10T13:52:37+00:00\"},{\"date_created\":\"2017-05-10T13:51:40+00:00\"}]}\n</pre>\n<p>Check the <a href=\"https://docs.python.org/3/library/logging.html/\" rel=\"nofollow\">docs</a> for more detail on the Python logging package.</p>\n</div>\n<div id=\"support\">\n<h3>Support</h3>\n<p>If you are having issues, please let us know or submit a pull request.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>The project is licensed under the MIT License.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3863694, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ada52823dde7c1da227a26397dd50855", "sha256": "20814ec2387c87e1227bdee54abe675a6f0ddb7c4d35d5eff5ed09e06ca38a4f"}, "downloads": -1, "filename": "async-mailchimp3-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ada52823dde7c1da227a26397dd50855", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40279, "upload_time": "2018-05-15T06:47:31", "upload_time_iso_8601": "2018-05-15T06:47:31.979627Z", "url": "https://files.pythonhosted.org/packages/7a/a3/d5a4e4221df00eec282834630f917916f900c3117f0f10be16f27eaa8aeb/async-mailchimp3-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e74c38373012034674313b8c30b7dbe4", "sha256": "1ec2570951aeefc4f029c5622c8e245ed77239b2d546aef2992b98988f6edbbb"}, "downloads": -1, "filename": "async-mailchimp3-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e74c38373012034674313b8c30b7dbe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40284, "upload_time": "2018-05-15T08:00:34", "upload_time_iso_8601": "2018-05-15T08:00:34.298788Z", "url": "https://files.pythonhosted.org/packages/b4/a7/89beb3b3eca9cd9d2d27f308a2d35a07a4798d1e6ade7807255c47a7f8ce/async-mailchimp3-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e74c38373012034674313b8c30b7dbe4", "sha256": "1ec2570951aeefc4f029c5622c8e245ed77239b2d546aef2992b98988f6edbbb"}, "downloads": -1, "filename": "async-mailchimp3-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e74c38373012034674313b8c30b7dbe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40284, "upload_time": "2018-05-15T08:00:34", "upload_time_iso_8601": "2018-05-15T08:00:34.298788Z", "url": "https://files.pythonhosted.org/packages/b4/a7/89beb3b3eca9cd9d2d27f308a2d35a07a4798d1e6ade7807255c47a7f8ce/async-mailchimp3-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:42 2020"}