{"info": {"author": "Antoine Grigis", "author_email": "antoine.grigis@cea.fr", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": ".. contents::\n\n.. image:: https://travis-ci.org/AGrigis/bredala.svg?branch=master\n    :target: https://travis-ci.org/AGrigis/bredala\n\n\n.. image:: https://coveralls.io/repos/AGrigis/bredala/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/AGrigis/bredala\n\n\nEasy to use pure-python caller signature and profiler.\nBased on Pelletier's pprofile_.\n\nOverview\n========\n\nWith Python's standard profiling tools, it is not possible to tell\ndynamically which function is a hot-spot. On top of that the resulting\nexecution ioutput is not filtered and the information of interest may be\ndifficult to find. Those drawbacks made me start 'bredala' which provide:\n\n- A dynamic API to define which functions/methods to follow (based on the 'New\n  Import Hooks' PEP0302_.\n\n- A signature mechanism that display the prototype of the called\n  function/method.\n\n- A filtered profile to access quickly to the execution time of interest.\n\nUsage\n=====\n\nThe proposed module display function signatures and by default function line\nprofiles. The lattest option can be disabled::\n\n    import bredala\n    bredala.USE_PROFILER = False\n\nAt the beginning of your script import the project and select which\nfunctions/methods have to be profiled (it must be done before all imports)::\n\n    import bredala\n    bredala.register(\"bredala.demo.myfunctions\", names=[\"addition\",\n                                                        \"substraction\"])\n    from bredala.demo.myfunctions import addition, substraction, factorial\n    addition(2, 1)\n    substraction(2, 1)\n    factorial(5)\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myfunctions.addition...\n    addition(a=2, b=1)\n    Line #|      Hits|         Time| Time per hit|      %|Source code\n    ------+----------+-------------+-------------+-------+-----------\n        11|         1|  3.69549e-05|  3.69549e-05| 13.15%|def addition(a, b):\n        12|         0|            0|            0|  0.00%|    \"\"\" Demonstration function.\n        13|         0|            0|            0|  0.00%|    \"\"\"\n        14|         1|  5.00679e-05|  5.00679e-05| 17.81%|    return a + b\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myfunctions.substraction...\n    substraction(a=2, b=1)\n    Line #|      Hits|         Time| Time per hit|      %|Source code\n    ------+----------+-------------+-------------+-------+-----------\n        17|         1|  3.00407e-05|  3.00407e-05| 13.17%|def substraction(a, b):\n        18|         0|            0|            0|  0.00%|    \"\"\" Demonstration function.\n        19|         0|            0|            0|  0.00%|    \"\"\"\n        20|         1|  3.00407e-05|  3.00407e-05| 13.17%|    return a - b\n    ____________________________________________________________________0.0s, 0.0min\n\n\nIt is possilbe to profile all the functions/methods of a module by removing\nthe optional 'names' argument. In another script::\n\n    import bredala\n    bredala.USE_PROFILER = False\n    bredala.register(\"bredala.demo.myfunctions\")\n    bredala.register(\"bredala.demo.myclasses\")\n    from bredala.demo.myfunctions import addition, substraction, factorial\n    from bredala.demo.myclasses import Square, Triangle\n    addition(2, 1)\n    substraction(2, 1)\n    factorial(2)\n    o = Square(\"my_square\")\n    o.area(2)\n    o = Triangle(\"my_square\")\n    o.area(2, 3)\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myfunctions.addition...\n    addition(a=2, b=1)\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myfunctions.substraction...\n    substraction(a=2, b=1)\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myfunctions.factorial...\n    factorial(a=2)\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myfunctions.factorial...\n    factorial(a=1)\n    ____________________________________________________________________0.0s, 0.0min\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myclasses.Square.__init__...\n    __init__(self=<bredala.demo.myclasses.Square object at 0x7fde3ce049d0>, name='my_square')\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myclasses.Square.area...\n    area(self=<bredala.demo.myclasses.Square object at 0x7fde3ce049d0>, length_of_side=2)\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myclasses.Triangle.__init__...\n    __init__(self=<bredala.demo.myclasses.Triangle object at 0x7fde3ce04b50>, name='my_square')\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myclasses.Triangle.area...\n    area(self=<bredala.demo.myclasses.Triangle object at 0x7fde3ce04b50>, base=2, vertical_height=3)\n    ____________________________________________________________________0.0s, 0.0min\n\n\nFor classes we can select to follow all the methods of a class::\n\n    import bredala\n    bredala.register(\"bredala.demo.myclasses\", names=[\"Square\"])\n    from bredala.demo.myclasses import Square, Triangle\n    o = Square(\"my_square\")\n    o.area(2)\n    o = Triangle(\"my_square\")\n    o.area(2, 3)\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myclasses.Square.__init__...\n    __init__(self=<bredala.demo.myclasses.Square object at 0x7f26fa000f90>, name='my_square')\n    Line #|      Hits|         Time| Time per hit|      %|Source code\n    ------+----------+-------------+-------------+-------+-----------\n        14|         1|  3.40939e-05|  3.40939e-05| 17.40%|    def __init__(self, name):\n        15|         1|  2.69413e-05|  2.69413e-05| 13.75%|        self.name = name\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myclasses.Square.area...\n    area(self=<bredala.demo.myclasses.Square object at 0x7f26fa000f90>, length_of_side=2)\n    Line #|      Hits|         Time| Time per hit|      %|Source code\n    ------+----------+-------------+-------------+-------+-----------\n        24|         1|  2.09808e-05|  2.09808e-05| 13.19%|    def area(self, length_of_side):\n        25|         1|  2.09808e-05|  2.09808e-05| 13.19%|        return length_of_side ** 2\n    ____________________________________________________________________0.0s, 0.0min\n\nOr we can select to follow specific methods::\n\n    import bredala\n    bredala.register(\"bredala.demo.myclasses\", names=[\"Square.area\",\n                                                      \"Triangle.area\"])\n    from bredala.demo.myclasses import Square, Triangle\n    o = Square(\"my_square\")\n    o.area(2)\n    o = Triangle(\"my_square\")\n    o.area(2, 3)\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myclasses.Square.area...\n    area(self=<bredala.demo.myclasses.Square object at 0x7f52b5c10f90>, length_of_side=2)\n    Line #|      Hits|         Time| Time per hit|      %|Source code\n    ------+----------+-------------+-------------+-------+-----------\n        24|         1|  3.38554e-05|  3.38554e-05| 17.09%|    def area(self, length_of_side):\n        25|         1|   2.6226e-05|   2.6226e-05| 13.24%|        return length_of_side ** 2\n    ____________________________________________________________________0.0s, 0.0min\n    ________________________________________________________________________________\n    [bredala] Calling bredala.demo.myclasses.Triangle.area...\n    area(self=<bredala.demo.myclasses.Triangle object at 0x7f52b5540790>, base=2, vertical_height=3)\n    Line #|      Hits|         Time| Time per hit|      %|Source code\n    ------+----------+-------------+-------------+-------+-----------\n        31|         1|  2.09808e-05|  2.09808e-05| 12.94%|    def area(self, base, vertical_height):\n        32|         1|  2.09808e-05|  2.09808e-05| 12.94%|        return 0.5 * base * vertical_height\n    ____________________________________________________________________0.0s, 0.0min\n\nPerspectives\n============\n\nIt will be nice to configure which functions/modules are followed on the fly.\n\n.. _pprofile: https://github.com/vpelletier/pprofile\n.. _PEP0302: https://www.python.org/dev/peps/pep-0302/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/AGrigis/bredala", "keywords": null, "license": "GPL 2+", "maintainer": null, "maintainer_email": null, "name": "bredala", "package_url": "https://pypi.org/project/bredala/", "platform": "any", "project_url": "https://pypi.org/project/bredala/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/AGrigis/bredala"}, "release_url": "https://pypi.org/project/bredala/1.0.1/", "requires_dist": null, "requires_python": null, "summary": ".. image:: https://travis-ci.org/AGrigis/bredala.svg?branch=master", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id1\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#perspectives\" id=\"id3\" rel=\"nofollow\">Perspectives</a></li>\n</ul>\n</div>\n<a href=\"https://travis-ci.org/AGrigis/bredala\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/AGrigis/bredala.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/173a07dcf57a0f2bb0c724b543d22b05237e606b/68747470733a2f2f7472617669732d63692e6f72672f414772696769732f62726564616c612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/AGrigis/bredala\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/AGrigis/bredala/badge.svg?branch=master&amp;service=github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46fdacdc2ada464983718370331ff8a114de086d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f414772696769732f62726564616c612f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<p>Easy to use pure-python caller signature and profiler.\nBased on Pelletier\u2019s <a href=\"https://github.com/vpelletier/pprofile\" rel=\"nofollow\">pprofile</a>.</p>\n<div id=\"overview\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Overview</a></h2>\n<p>With Python\u2019s standard profiling tools, it is not possible to tell\ndynamically which function is a hot-spot. On top of that the resulting\nexecution ioutput is not filtered and the information of interest may be\ndifficult to find. Those drawbacks made me start \u2018bredala\u2019 which provide:</p>\n<ul>\n<li>A dynamic API to define which functions/methods to follow (based on the \u2018New\nImport Hooks\u2019 <a href=\"https://www.python.org/dev/peps/pep-0302/\" rel=\"nofollow\">PEP0302</a>.</li>\n<li>A signature mechanism that display the prototype of the called\nfunction/method.</li>\n<li>A filtered profile to access quickly to the execution time of interest.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<p>The proposed module display function signatures and by default function line\nprofiles. The lattest option can be disabled:</p>\n<pre>import bredala\nbredala.USE_PROFILER = False\n</pre>\n<p>At the beginning of your script import the project and select which\nfunctions/methods have to be profiled (it must be done before all imports):</p>\n<pre>import bredala\nbredala.register(\"bredala.demo.myfunctions\", names=[\"addition\",\n                                                    \"substraction\"])\nfrom bredala.demo.myfunctions import addition, substraction, factorial\naddition(2, 1)\nsubstraction(2, 1)\nfactorial(5)\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myfunctions.addition...\naddition(a=2, b=1)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n    11|         1|  3.69549e-05|  3.69549e-05| 13.15%|def addition(a, b):\n    12|         0|            0|            0|  0.00%|    \"\"\" Demonstration function.\n    13|         0|            0|            0|  0.00%|    \"\"\"\n    14|         1|  5.00679e-05|  5.00679e-05| 17.81%|    return a + b\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myfunctions.substraction...\nsubstraction(a=2, b=1)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n    17|         1|  3.00407e-05|  3.00407e-05| 13.17%|def substraction(a, b):\n    18|         0|            0|            0|  0.00%|    \"\"\" Demonstration function.\n    19|         0|            0|            0|  0.00%|    \"\"\"\n    20|         1|  3.00407e-05|  3.00407e-05| 13.17%|    return a - b\n____________________________________________________________________0.0s, 0.0min\n</pre>\n<p>It is possilbe to profile all the functions/methods of a module by removing\nthe optional \u2018names\u2019 argument. In another script:</p>\n<pre>import bredala\nbredala.USE_PROFILER = False\nbredala.register(\"bredala.demo.myfunctions\")\nbredala.register(\"bredala.demo.myclasses\")\nfrom bredala.demo.myfunctions import addition, substraction, factorial\nfrom bredala.demo.myclasses import Square, Triangle\naddition(2, 1)\nsubstraction(2, 1)\nfactorial(2)\no = Square(\"my_square\")\no.area(2)\no = Triangle(\"my_square\")\no.area(2, 3)\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myfunctions.addition...\naddition(a=2, b=1)\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myfunctions.substraction...\nsubstraction(a=2, b=1)\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myfunctions.factorial...\nfactorial(a=2)\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myfunctions.factorial...\nfactorial(a=1)\n____________________________________________________________________0.0s, 0.0min\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myclasses.Square.__init__...\n__init__(self=&lt;bredala.demo.myclasses.Square object at 0x7fde3ce049d0&gt;, name='my_square')\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myclasses.Square.area...\narea(self=&lt;bredala.demo.myclasses.Square object at 0x7fde3ce049d0&gt;, length_of_side=2)\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myclasses.Triangle.__init__...\n__init__(self=&lt;bredala.demo.myclasses.Triangle object at 0x7fde3ce04b50&gt;, name='my_square')\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myclasses.Triangle.area...\narea(self=&lt;bredala.demo.myclasses.Triangle object at 0x7fde3ce04b50&gt;, base=2, vertical_height=3)\n____________________________________________________________________0.0s, 0.0min\n</pre>\n<p>For classes we can select to follow all the methods of a class:</p>\n<pre>import bredala\nbredala.register(\"bredala.demo.myclasses\", names=[\"Square\"])\nfrom bredala.demo.myclasses import Square, Triangle\no = Square(\"my_square\")\no.area(2)\no = Triangle(\"my_square\")\no.area(2, 3)\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myclasses.Square.__init__...\n__init__(self=&lt;bredala.demo.myclasses.Square object at 0x7f26fa000f90&gt;, name='my_square')\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n    14|         1|  3.40939e-05|  3.40939e-05| 17.40%|    def __init__(self, name):\n    15|         1|  2.69413e-05|  2.69413e-05| 13.75%|        self.name = name\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myclasses.Square.area...\narea(self=&lt;bredala.demo.myclasses.Square object at 0x7f26fa000f90&gt;, length_of_side=2)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n    24|         1|  2.09808e-05|  2.09808e-05| 13.19%|    def area(self, length_of_side):\n    25|         1|  2.09808e-05|  2.09808e-05| 13.19%|        return length_of_side ** 2\n____________________________________________________________________0.0s, 0.0min\n</pre>\n<p>Or we can select to follow specific methods:</p>\n<pre>import bredala\nbredala.register(\"bredala.demo.myclasses\", names=[\"Square.area\",\n                                                  \"Triangle.area\"])\nfrom bredala.demo.myclasses import Square, Triangle\no = Square(\"my_square\")\no.area(2)\no = Triangle(\"my_square\")\no.area(2, 3)\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myclasses.Square.area...\narea(self=&lt;bredala.demo.myclasses.Square object at 0x7f52b5c10f90&gt;, length_of_side=2)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n    24|         1|  3.38554e-05|  3.38554e-05| 17.09%|    def area(self, length_of_side):\n    25|         1|   2.6226e-05|   2.6226e-05| 13.24%|        return length_of_side ** 2\n____________________________________________________________________0.0s, 0.0min\n________________________________________________________________________________\n[bredala] Calling bredala.demo.myclasses.Triangle.area...\narea(self=&lt;bredala.demo.myclasses.Triangle object at 0x7f52b5540790&gt;, base=2, vertical_height=3)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n    31|         1|  2.09808e-05|  2.09808e-05| 12.94%|    def area(self, base, vertical_height):\n    32|         1|  2.09808e-05|  2.09808e-05| 12.94%|        return 0.5 * base * vertical_height\n____________________________________________________________________0.0s, 0.0min\n</pre>\n</div>\n<div id=\"perspectives\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Perspectives</a></h2>\n<p>It will be nice to configure which functions/modules are followed on the fly.</p>\n</div>\n\n          </div>"}, "last_serial": 1701857, "releases": {"1.0.0": [], "1.0.1": [{"comment_text": "", "digests": {"md5": "d0d1038fc7160a0a73ece1b21bcca711", "sha256": "53058ae8929c7090b67b39e671c2da39f6fd72937dddd5d0810acc2167a3a73d"}, "downloads": -1, "filename": "bredala-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d0d1038fc7160a0a73ece1b21bcca711", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8661, "upload_time": "2015-08-31T16:38:33", "upload_time_iso_8601": "2015-08-31T16:38:33.861898Z", "url": "https://files.pythonhosted.org/packages/05/11/cc89dd343316d2231a47febd3db721f2920d22e1e39f4674577b22367e9f/bredala-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d0d1038fc7160a0a73ece1b21bcca711", "sha256": "53058ae8929c7090b67b39e671c2da39f6fd72937dddd5d0810acc2167a3a73d"}, "downloads": -1, "filename": "bredala-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d0d1038fc7160a0a73ece1b21bcca711", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8661, "upload_time": "2015-08-31T16:38:33", "upload_time_iso_8601": "2015-08-31T16:38:33.861898Z", "url": "https://files.pythonhosted.org/packages/05/11/cc89dd343316d2231a47febd3db721f2920d22e1e39f4674577b22367e9f/bredala-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:21 2020"}