{"info": {"author": "Thomas Robitaille", "author_email": "thomas.robitaille@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "pieceofcake - a user-friendly cookiecutter wrapper\n==================================================\n\nThis is a wrapper around the `cookiecutter <https://github.com/cookiecutter/cookiecutter/>`_\ntool which provides a more user-friendly way of asking questions.\n\nWith **cookiecutter**, the user is not presented with any questions, just the names\nof the parameters to set::\n\n    % cookiecutter gh:astrofrog/fake-template\n    package_name [example]: test-package\n    include_example_code [n]: y\n\nWith **pieceofcake**, the user is shown a series of verbose questions which provide\nmore context as to the meaning/implications of each parameter::\n\n    % cookiecutter gh:astrofrog/fake-template final-package\n\n    Welcome to the pieceofcake, a user-friendly cookiecutter wrapper!\n\n    This script will now ask you a series of questions to help you set up\n    your package.\n\n    What is the name of your package? This is the name that will appear on\n    PyPI and which users will use when installing the package with e.g.\n    pip or conda.\n    > Package name [example]: test-package\n\n    Should example code be included? This will consist of sample Python\n    and Cython files in the package, demonstrating how to create different\n    sub-modules and importing between them.\n    > Include example code? [n]: y\n\n    Running cookiecutter...\n\n    You should now be all set! Your generated package is in final-package\n\nInstalling\n==========\n\nTo install, run::\n\n    pip install pieceofcake\n\nUsing\n=====\n\nTo use **pieceofcake**::\n\n    pieceofcake template output_directory\n\nwhere ``template`` follows the same syntax as for cookiecutter, and can be\nthe path to a local directory, or e.g. gh:astrofrog/fake-template to use\na GitHub repository.\n\nNote that ``pieceofcake`` will work with all cookiecutter templates, but\nnice questions will only be shown if the ``cookiecutter.json`` file contains\nthe ``_parameters`` key as described below in **For template creators**.\n\nFor template creators\n=====================\n\nTo define questions for each parameter, add a new ``_parameters`` key in\nyour ``cookiecutter.json`` file, which should then contain a dictionary for\neach parameter::\n\n    \"_parameters\": {\n        \"package_name\": {\n            \"default_value\": \"test-package\",\n            \"prompt\": \"Package name\",\n            \"help\": \"What is the name of your package? This is the name that will appear on PyPI and which users will use when installing the package with e.g. pip or conda.\"\n        },\n        \"include_example_code\": {\n            \"prompt\": \"Include example code?\",\n            \"help\": \"Should example code be included? This will consist of sample Python and Cython files in the package, demonstrating how to create different sub-modules and importing between them.\"\n        }\n    }\n\nThe ``default_value``, ``prompt``, and ``help`` keys are all optional - if\n``default_value`` is not defined, the default value is taken from the main\n``cookiecutter`` section. If ``prompt`` is not included, it is set to the\nparameter name, and if ``help`` is not included, no help/question is shown.\n\nThis approach was inspired by `cookiecutter/cookiecutter#794\n<https://github.com/cookiecutter/cookiecutter/issues/794>`_\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/astrofrog/pieceofcake", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pieceofcake", "package_url": "https://pypi.org/project/pieceofcake/", "platform": "", "project_url": "https://pypi.org/project/pieceofcake/", "project_urls": {"Homepage": "https://github.com/astrofrog/pieceofcake"}, "release_url": "https://pypi.org/project/pieceofcake/0.1a2/", "requires_dist": ["click", "cookiecutter"], "requires_python": ">=3.6", "summary": "A user-friendly wrapper to cookiecutter", "version": "0.1a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pieceofcake-a-user-friendly-cookiecutter-wrapper\">\n<h2>pieceofcake - a user-friendly cookiecutter wrapper</h2>\n<p>This is a wrapper around the <a href=\"https://github.com/cookiecutter/cookiecutter/\" rel=\"nofollow\">cookiecutter</a>\ntool which provides a more user-friendly way of asking questions.</p>\n<p>With <strong>cookiecutter</strong>, the user is not presented with any questions, just the names\nof the parameters to set:</p>\n<pre>% cookiecutter gh:astrofrog/fake-template\npackage_name [example]: test-package\ninclude_example_code [n]: y\n</pre>\n<p>With <strong>pieceofcake</strong>, the user is shown a series of verbose questions which provide\nmore context as to the meaning/implications of each parameter:</p>\n<pre>% cookiecutter gh:astrofrog/fake-template final-package\n\nWelcome to the pieceofcake, a user-friendly cookiecutter wrapper!\n\nThis script will now ask you a series of questions to help you set up\nyour package.\n\nWhat is the name of your package? This is the name that will appear on\nPyPI and which users will use when installing the package with e.g.\npip or conda.\n&gt; Package name [example]: test-package\n\nShould example code be included? This will consist of sample Python\nand Cython files in the package, demonstrating how to create different\nsub-modules and importing between them.\n&gt; Include example code? [n]: y\n\nRunning cookiecutter...\n\nYou should now be all set! Your generated package is in final-package\n</pre>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>To install, run:</p>\n<pre>pip install pieceofcake\n</pre>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>To use <strong>pieceofcake</strong>:</p>\n<pre>pieceofcake template output_directory\n</pre>\n<p>where <tt>template</tt> follows the same syntax as for cookiecutter, and can be\nthe path to a local directory, or e.g. gh:astrofrog/fake-template to use\na GitHub repository.</p>\n<p>Note that <tt>pieceofcake</tt> will work with all cookiecutter templates, but\nnice questions will only be shown if the <tt>cookiecutter.json</tt> file contains\nthe <tt>_parameters</tt> key as described below in <strong>For template creators</strong>.</p>\n</div>\n<div id=\"for-template-creators\">\n<h2>For template creators</h2>\n<p>To define questions for each parameter, add a new <tt>_parameters</tt> key in\nyour <tt>cookiecutter.json</tt> file, which should then contain a dictionary for\neach parameter:</p>\n<pre>\"_parameters\": {\n    \"package_name\": {\n        \"default_value\": \"test-package\",\n        \"prompt\": \"Package name\",\n        \"help\": \"What is the name of your package? This is the name that will appear on PyPI and which users will use when installing the package with e.g. pip or conda.\"\n    },\n    \"include_example_code\": {\n        \"prompt\": \"Include example code?\",\n        \"help\": \"Should example code be included? This will consist of sample Python and Cython files in the package, demonstrating how to create different sub-modules and importing between them.\"\n    }\n}\n</pre>\n<p>The <tt>default_value</tt>, <tt>prompt</tt>, and <tt>help</tt> keys are all optional - if\n<tt>default_value</tt> is not defined, the default value is taken from the main\n<tt>cookiecutter</tt> section. If <tt>prompt</tt> is not included, it is set to the\nparameter name, and if <tt>help</tt> is not included, no help/question is shown.</p>\n<p>This approach was inspired by <a href=\"https://github.com/cookiecutter/cookiecutter/issues/794\" rel=\"nofollow\">cookiecutter/cookiecutter#794</a></p>\n</div>\n\n          </div>"}, "last_serial": 6514023, "releases": {"0.1a1": [{"comment_text": "", "digests": {"md5": "6e0c2ac763f2c77252ee60b08d1561b6", "sha256": "3d733601cb5efdad2468165c382e44c1a1305aaa0e13a392385494367312d410"}, "downloads": -1, "filename": "pieceofcake-0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "6e0c2ac763f2c77252ee60b08d1561b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5663, "upload_time": "2020-01-24T13:56:20", "upload_time_iso_8601": "2020-01-24T13:56:20.598671Z", "url": "https://files.pythonhosted.org/packages/be/3a/70acb4aaf654e2e2e4853110de1c8fb4abc339b42236060179432d33370e/pieceofcake-0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ebe00cb43fc2fe7e8efee80234e5404", "sha256": "78295b97945d039da61be19e3b88647137e21583cffa44bcde4ed030c40eedc7"}, "downloads": -1, "filename": "pieceofcake-0.1a1.tar.gz", "has_sig": false, "md5_digest": "0ebe00cb43fc2fe7e8efee80234e5404", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5655, "upload_time": "2020-01-24T13:56:23", "upload_time_iso_8601": "2020-01-24T13:56:23.230785Z", "url": "https://files.pythonhosted.org/packages/71/15/73f92d53105fea20dcf7b01950476baa85bc96eb6bb5e858bb546dbad7eb/pieceofcake-0.1a1.tar.gz", "yanked": false}], "0.1a2": [{"comment_text": "", "digests": {"md5": "2f4d8736ab5a086d6aada5d6616ac1be", "sha256": "6c83ad74c0ffd568426f8e0aab2d3252a4fb3c71997ca5c74e58b04ae6fbcf1f"}, "downloads": -1, "filename": "pieceofcake-0.1a2-py3-none-any.whl", "has_sig": false, "md5_digest": "2f4d8736ab5a086d6aada5d6616ac1be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5692, "upload_time": "2020-01-24T14:48:28", "upload_time_iso_8601": "2020-01-24T14:48:28.786541Z", "url": "https://files.pythonhosted.org/packages/17/87/c96ebf7616ff50485c465c0490267b87fabab8f70ce2bd6aa90a5604ce89/pieceofcake-0.1a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6feda58cc27d9c1699b587de76ab9876", "sha256": "7c71a12b7f2008f2a830cf473135db169cb2e1313b96c6a4d70bed0b6a0c6003"}, "downloads": -1, "filename": "pieceofcake-0.1a2.tar.gz", "has_sig": false, "md5_digest": "6feda58cc27d9c1699b587de76ab9876", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5675, "upload_time": "2020-01-24T14:48:30", "upload_time_iso_8601": "2020-01-24T14:48:30.544807Z", "url": "https://files.pythonhosted.org/packages/a9/9d/c07768ab925e4706a0b82a8e511dabe967c402d5f9eacbea32b5da32f4a5/pieceofcake-0.1a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f4d8736ab5a086d6aada5d6616ac1be", "sha256": "6c83ad74c0ffd568426f8e0aab2d3252a4fb3c71997ca5c74e58b04ae6fbcf1f"}, "downloads": -1, "filename": "pieceofcake-0.1a2-py3-none-any.whl", "has_sig": false, "md5_digest": "2f4d8736ab5a086d6aada5d6616ac1be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5692, "upload_time": "2020-01-24T14:48:28", "upload_time_iso_8601": "2020-01-24T14:48:28.786541Z", "url": "https://files.pythonhosted.org/packages/17/87/c96ebf7616ff50485c465c0490267b87fabab8f70ce2bd6aa90a5604ce89/pieceofcake-0.1a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6feda58cc27d9c1699b587de76ab9876", "sha256": "7c71a12b7f2008f2a830cf473135db169cb2e1313b96c6a4d70bed0b6a0c6003"}, "downloads": -1, "filename": "pieceofcake-0.1a2.tar.gz", "has_sig": false, "md5_digest": "6feda58cc27d9c1699b587de76ab9876", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5675, "upload_time": "2020-01-24T14:48:30", "upload_time_iso_8601": "2020-01-24T14:48:30.544807Z", "url": "https://files.pythonhosted.org/packages/a9/9d/c07768ab925e4706a0b82a8e511dabe967c402d5f9eacbea32b5da32f4a5/pieceofcake-0.1a2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:56 2020"}