{"info": {"author": "Brendan C. Ward", "author_email": "bcward@astutespruce.com", "bugtrack_url": null, "classifiers": [], "description": "# geofeather\n\n[![Build Status](https://travis-ci.org/brendan-ward/geofeather.svg?branch=master)](https://travis-ci.org/brendan-ward/geofeather)\n[![Coverage Status](https://coveralls.io/repos/github/brendan-ward/geofeather/badge.svg?branch=master)](https://coveralls.io/github/brendan-ward/geofeather?branch=master)\n\nA faster file-based format for geometries with `geopandas`.\n\nThis project capitalizes on the very fast [`feather`](https://github.com/wesm/feather) file format to store geometry (points, lines, polygons) data for interoperability with `geopandas`.\n\n[Introductory post](https://medium.com/@brendan_ward/introducing-geofeather-a-python-library-for-faster-geospatial-i-o-with-geopandas-341120d45ee5).\n\n## Why does this exist?\n\nThis project exists because reading and writing standard spatial formats (e.g., shapefile) in `geopandas` is slow. I was working with millions of geometries in multiple processing steps, and needed a fast way to read and write intermediate files.\n\nIn our benchmarks, we see about 5-6x faster file writes than writing from geopandas to shapefile via `.to_file()` on a `GeoDataFrame`.\n\nWe see about 2x faster reads compared to geopandas `read_file()` function.\n\n## How does it work?\n\nThe `feather` format works brilliantly for standard `pandas` data frames. In order to leverage the `feather` format, we simply convert the geometry data from `shapely` objects into Well Known Binary ([WKB](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)) format, and then store that column as raw bytes.\n\nWe store the coordinate reference system using JSON format in a sidecar file `.crs`.\n\n## Installation\n\nAvailable on PyPi at: https://pypi.org/project/geofeather/\n\n`pip install geofeather`\n\n## Usage\n\n### Write\n\nGiven an existing `GeoDataFrame` `my_gdf`, pass this into `to_geofeather`:\n\n```\nto_geofeather(my_gdf, 'test.feather')\n```\n\n### Read\n\n```\nmy_gdf = from_geofeather('test.feather')\n\n```\n\n### TEMPORARY\n\n[`pygeos`](https://github.com/pygeos/pygeos) provides much faster operations of geospatial operations over arrays of geospatial data.\n\n`geopandas` is in the process of migrating to using `pygeos` geometries as its internal data storage instead of `shapely` objects.\n\nUntil `pygeos` is fully integrated, there are shims in `geofeather` to support interoperability with pandas DataFrames containing `pygeos` geometries. If you are already using `pygeos` against data you read from `geofeather`, using the following shims will generate 3-7x speedups reading and writing data compared to `geofeather` reading into GeoDataFrames.\n\nInternally, the feather file is identical to the one created above.\n\n`pygeos` is required in order to use this functionality.\n\nWARNING: this will be deprecated as soon as `pygeos` is integrated into `geopandas`.\n\n```\nfrom geofeather.pygeos import to_geofeather, from_geofeather\n\n# given a DataFrame df containing pygeos geometries in 'geometry' column\n# and a crs object\n\nto_geofeather(df, 'test.feather', crs=crs)\n\ndf = from_geofeather('test.geofeather')\n```\n\nNote: no CRS information is returned when reading from geofeather into a DataFrame, in order to keep the function signature the same as above `from_geofeather`\n\n## Indexes\n\nRight now, indexes are not supported in `feather` files. In order to get around this, simply reset your index before calling `to_geofeather`.\n\n## Changes\n\n### 0.3.0\n\n-   allow serializing to / from pandas DataFrames containing `pygeos` geometries (see notes above).\n-   use new CRS object in geopandas data frames (#4)\n-   dropped `to_shp`; use geopandas `to_file()` instead.\n\n### 0.2.0\n\n-   allow reading a subset of columns from a feather file\n-   store geometry in 'geometry' column instead of 'wkb' column (simplification to avoid renaming columns)\n\n### 0.1.0\n\n-   Initial release\n\n## Credits\n\nEverything that makes this fast is due to the hard work of contributors to `pyarrow`, `geopandas`, and `shapely`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brendan-ward/geofeather", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "geofeather", "package_url": "https://pypi.org/project/geofeather/", "platform": "", "project_url": "https://pypi.org/project/geofeather/", "project_urls": {"Homepage": "https://github.com/brendan-ward/geofeather"}, "release_url": "https://pypi.org/project/geofeather/0.3.0/", "requires_dist": ["feather-format", "geopandas"], "requires_python": "", "summary": "Fast file-based format for geometries with Geopandas", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>geofeather</h1>\n<p><a href=\"https://travis-ci.org/brendan-ward/geofeather\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac43cdb7bc6e64a847a4ac646b7ec41bbe94a405/68747470733a2f2f7472617669732d63692e6f72672f6272656e64616e2d776172642f67656f666561746865722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/brendan-ward/geofeather?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e95a9f92fc161bc9deaee3c8552545ae1b1f38ac/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6272656e64616e2d776172642f67656f666561746865722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A faster file-based format for geometries with <code>geopandas</code>.</p>\n<p>This project capitalizes on the very fast <a href=\"https://github.com/wesm/feather\" rel=\"nofollow\"><code>feather</code></a> file format to store geometry (points, lines, polygons) data for interoperability with <code>geopandas</code>.</p>\n<p><a href=\"https://medium.com/@brendan_ward/introducing-geofeather-a-python-library-for-faster-geospatial-i-o-with-geopandas-341120d45ee5\" rel=\"nofollow\">Introductory post</a>.</p>\n<h2>Why does this exist?</h2>\n<p>This project exists because reading and writing standard spatial formats (e.g., shapefile) in <code>geopandas</code> is slow. I was working with millions of geometries in multiple processing steps, and needed a fast way to read and write intermediate files.</p>\n<p>In our benchmarks, we see about 5-6x faster file writes than writing from geopandas to shapefile via <code>.to_file()</code> on a <code>GeoDataFrame</code>.</p>\n<p>We see about 2x faster reads compared to geopandas <code>read_file()</code> function.</p>\n<h2>How does it work?</h2>\n<p>The <code>feather</code> format works brilliantly for standard <code>pandas</code> data frames. In order to leverage the <code>feather</code> format, we simply convert the geometry data from <code>shapely</code> objects into Well Known Binary (<a href=\"https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry\" rel=\"nofollow\">WKB</a>) format, and then store that column as raw bytes.</p>\n<p>We store the coordinate reference system using JSON format in a sidecar file <code>.crs</code>.</p>\n<h2>Installation</h2>\n<p>Available on PyPi at: <a href=\"https://pypi.org/project/geofeather/\" rel=\"nofollow\">https://pypi.org/project/geofeather/</a></p>\n<p><code>pip install geofeather</code></p>\n<h2>Usage</h2>\n<h3>Write</h3>\n<p>Given an existing <code>GeoDataFrame</code> <code>my_gdf</code>, pass this into <code>to_geofeather</code>:</p>\n<pre><code>to_geofeather(my_gdf, 'test.feather')\n</code></pre>\n<h3>Read</h3>\n<pre><code>my_gdf = from_geofeather('test.feather')\n\n</code></pre>\n<h3>TEMPORARY</h3>\n<p><a href=\"https://github.com/pygeos/pygeos\" rel=\"nofollow\"><code>pygeos</code></a> provides much faster operations of geospatial operations over arrays of geospatial data.</p>\n<p><code>geopandas</code> is in the process of migrating to using <code>pygeos</code> geometries as its internal data storage instead of <code>shapely</code> objects.</p>\n<p>Until <code>pygeos</code> is fully integrated, there are shims in <code>geofeather</code> to support interoperability with pandas DataFrames containing <code>pygeos</code> geometries. If you are already using <code>pygeos</code> against data you read from <code>geofeather</code>, using the following shims will generate 3-7x speedups reading and writing data compared to <code>geofeather</code> reading into GeoDataFrames.</p>\n<p>Internally, the feather file is identical to the one created above.</p>\n<p><code>pygeos</code> is required in order to use this functionality.</p>\n<p>WARNING: this will be deprecated as soon as <code>pygeos</code> is integrated into <code>geopandas</code>.</p>\n<pre><code>from geofeather.pygeos import to_geofeather, from_geofeather\n\n# given a DataFrame df containing pygeos geometries in 'geometry' column\n# and a crs object\n\nto_geofeather(df, 'test.feather', crs=crs)\n\ndf = from_geofeather('test.geofeather')\n</code></pre>\n<p>Note: no CRS information is returned when reading from geofeather into a DataFrame, in order to keep the function signature the same as above <code>from_geofeather</code></p>\n<h2>Indexes</h2>\n<p>Right now, indexes are not supported in <code>feather</code> files. In order to get around this, simply reset your index before calling <code>to_geofeather</code>.</p>\n<h2>Changes</h2>\n<h3>0.3.0</h3>\n<ul>\n<li>allow serializing to / from pandas DataFrames containing <code>pygeos</code> geometries (see notes above).</li>\n<li>use new CRS object in geopandas data frames (#4)</li>\n<li>dropped <code>to_shp</code>; use geopandas <code>to_file()</code> instead.</li>\n</ul>\n<h3>0.2.0</h3>\n<ul>\n<li>allow reading a subset of columns from a feather file</li>\n<li>store geometry in 'geometry' column instead of 'wkb' column (simplification to avoid renaming columns)</li>\n</ul>\n<h3>0.1.0</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n<h2>Credits</h2>\n<p>Everything that makes this fast is due to the hard work of contributors to <code>pyarrow</code>, <code>geopandas</code>, and <code>shapely</code>.</p>\n\n          </div>"}, "last_serial": 6866352, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "70832e39c255aa2c9c0cc50fd95b0ae1", "sha256": "345a62ce5524cc6775046eb563ebb8455d55f19a838dc07ab40ed51bd93e6bb8"}, "downloads": -1, "filename": "geofeather-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "70832e39c255aa2c9c0cc50fd95b0ae1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4841, "upload_time": "2019-10-03T19:29:16", "upload_time_iso_8601": "2019-10-03T19:29:16.886961Z", "url": "https://files.pythonhosted.org/packages/e2/2b/c6d58995d6bb12e0c22d3d3f03a57d5d4c7dcfe162c5586f4174a5395896/geofeather-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3e484098e9ebbf8ebbe5fb0272d0b0f", "sha256": "14c1e1bed9c4525263bbaec54c1c0954bc988ef0bd4922c3c261cbfdc0abe902"}, "downloads": -1, "filename": "geofeather-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e3e484098e9ebbf8ebbe5fb0272d0b0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3368, "upload_time": "2019-10-03T19:29:19", "upload_time_iso_8601": "2019-10-03T19:29:19.250152Z", "url": "https://files.pythonhosted.org/packages/69/df/f646da3e97ccd122bed9a65710d32b490a968d9cadb2d05a47e3688aacb5/geofeather-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4a7aa98e69a6b5e7577b0ff22ee0d929", "sha256": "e18c317167ed6d45e4509b5e8c270fd7f2aafc70d4a6d28a3cf1e68c47ca8881"}, "downloads": -1, "filename": "geofeather-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a7aa98e69a6b5e7577b0ff22ee0d929", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5369, "upload_time": "2019-12-18T21:55:11", "upload_time_iso_8601": "2019-12-18T21:55:11.986229Z", "url": "https://files.pythonhosted.org/packages/a6/e2/4d4cfa93939550c6a897dc4125f9d7f32783d25a6ed9973b5d68ced20989/geofeather-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b97433533767d998f4b63c40b8974e9c", "sha256": "09c71aaa595ea594e8f8813a33e24eaa911e917356c18de3ef72d37c36aa7f52"}, "downloads": -1, "filename": "geofeather-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b97433533767d998f4b63c40b8974e9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3943, "upload_time": "2019-12-18T21:55:13", "upload_time_iso_8601": "2019-12-18T21:55:13.219883Z", "url": "https://files.pythonhosted.org/packages/70/30/557f94f2d4c5d80d3e82798259ebf7c16d36c6a12bb0677d9163790ba6dd/geofeather-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "6d4c5f61bdf4068842c224c2a63f3a20", "sha256": "132a79ef3b31d53fe13287eba31b057d33ced233bf5ed01af25856ec6c60e5ff"}, "downloads": -1, "filename": "geofeather-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d4c5f61bdf4068842c224c2a63f3a20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6389, "upload_time": "2020-03-23T15:48:09", "upload_time_iso_8601": "2020-03-23T15:48:09.846185Z", "url": "https://files.pythonhosted.org/packages/6c/1e/8a0a3b25b2fff01ab834bdc73794e83de1353f73f8ec481a60bcb5b71b00/geofeather-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b42e2a04a440b4f77e3c927733ce0e20", "sha256": "5889ebc31c02dd38215884badb3fa20029628088dbe3d5936894d0488ec01fa4"}, "downloads": -1, "filename": "geofeather-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b42e2a04a440b4f77e3c927733ce0e20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4429, "upload_time": "2020-03-23T15:48:10", "upload_time_iso_8601": "2020-03-23T15:48:10.805416Z", "url": "https://files.pythonhosted.org/packages/b6/24/c9c9b285d79e18c098bc8c8140eb3b4b000753aecfc26a6daa82b1bb6dab/geofeather-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d4c5f61bdf4068842c224c2a63f3a20", "sha256": "132a79ef3b31d53fe13287eba31b057d33ced233bf5ed01af25856ec6c60e5ff"}, "downloads": -1, "filename": "geofeather-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d4c5f61bdf4068842c224c2a63f3a20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6389, "upload_time": "2020-03-23T15:48:09", "upload_time_iso_8601": "2020-03-23T15:48:09.846185Z", "url": "https://files.pythonhosted.org/packages/6c/1e/8a0a3b25b2fff01ab834bdc73794e83de1353f73f8ec481a60bcb5b71b00/geofeather-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b42e2a04a440b4f77e3c927733ce0e20", "sha256": "5889ebc31c02dd38215884badb3fa20029628088dbe3d5936894d0488ec01fa4"}, "downloads": -1, "filename": "geofeather-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b42e2a04a440b4f77e3c927733ce0e20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4429, "upload_time": "2020-03-23T15:48:10", "upload_time_iso_8601": "2020-03-23T15:48:10.805416Z", "url": "https://files.pythonhosted.org/packages/b6/24/c9c9b285d79e18c098bc8c8140eb3b4b000753aecfc26a6daa82b1bb6dab/geofeather-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:07 2020"}