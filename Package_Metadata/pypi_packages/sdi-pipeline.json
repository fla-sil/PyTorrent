{"info": {"author": "Andrew Stewart", "author_email": "andrew.henry.stewart@emory.edu", "bugtrack_url": null, "classifiers": [], "description": "SDI Pipeline\nThis is an image processing pipeline built for the University of California Santa Barbara's Experimental Cosmology Lab to be used in the SDI Optical SETI program in conjunction with the Las Cumbres Observatory Telescope Network. The pipeline downloads source images from LCO's network, aligns and co-adds them to create template images, and subtracts each template from the source images to create residual frames. These residuals are then searched for exceedingly large flux distributions indicative of an extraterrestrial's laser hitting LCO's CCD. More documentation can be found at ().\n\n\nINSTALL:\nInstall on Linux machines from PyPi with\n    pip install sdi_pipeline\n    \n\nDEPENDENCIES:\nRunning the pipeline requires a number of supplementary image processing packages to function properly. Install these on your machine before running the pipeline.\n\n-Sextractor (source extraction code written by Emmanuel Bertin)\n    *To install download tarball from astromatic.net and unpack\n    \n-SWarp (image registration and co-addition code written by Emmanuel Bertin)\n    *To install, download tarball from astromatic.net and unpack\n    \n-PSFex (PSF computation software written by Emmanuel Bertin)\n    *To install download tarball from astromatic.net and unpack\n    \n-Skymaker (astromatic.net) (OPTIONAL, only needed for simulations)\n    *To install download tarball and unpack.\n    \n-hotpants (image subtraction program written by Andrew Becker)\n\n-ISIS (image subtraction code written by Christophe Alard) \n    *Included in pipeline's source code, does not need to  be installed seperately. To install run the pipeline's initialization script.\n    \n-CFITSIO (fits image proccessing package from NASA)\n    *To install download tarball and unpack.\n    \n-astroalign (image registration package written by Martin Beroiz)\n    *To install run \"pip install astroalign\"\n    \n-image_registration (image registration package written by Adam Ginsburg)\n    *To install run \"pip install image_registration\"\n\n    \nThe pipeline itself will run on any OS, however, many of the supplementary image processing packages are only distrubuted for Linux systems.\n\nTESTING:\nTo test the pipeline install and make sure you have all of the dependencies, run the test.py module by\n\n    \"python -m sdi_pipeline.test\"\n\nThe test module downloads two images of a farily sparse star field (21:40:47.388, +00:28:35.11) and runs them through the entire pipeline, from download to alignment to combination to subtraction and finally to source extraction. In order to test the detection abilities of the pipeline, three fake stars are added to one of the images (the non-reference image). They should survive the subtraction and appear in the non-reference residual as three obvious stars in a dog-leg pattern in the middle of the image.\nAt the end the function will display the residual image containing the fake stars with ds9, as well as the detected sources in each residual. Finally, the function will compare your machine's results with a standard \"control\" set of results located in the 'test_config' directory, which is located in the same directory as the pipeline's source code. You can view these control results by visiting this directory. The pertinent files are \"test_sources.txt\" and \"09:14:00.260_A_residual_.fits\". If successful, the function will print \"TEST SUCCESSFUL!\"\n\nUSING THE PIPELINE:\nThe software's physical architecture is a tree of directories created in the \"loc\" path. The \"loc\" variable is defined in the initialize.py script and defaults to the user's home directory. If you want to install the pipeline's directory tree in a different location, you need to change the \"loc\" variable before running the initialize.py script.\n\nThe basic pipeline functions are-\ninitialize-- Run this script after installing the package. This will create the pipeline's architecture and ensure all of the appropriate auxillary software is installed. This will also allow the option to install the ISIS image subtraction code, denoted here as AIS.\n\nget-- Move downloaded LCO images from the Downloads directory (or any other specified directory) to the SDI directory tree, decompress the images, and rename and sort them according to observation target/filter/exposure time/etc.\n\nalign-- Align all images in a target's \"data\" directory to a chosen reference image. This reference image is chosen by the software as that with the least amount of sky noise. There are two different alignment methods: one that uses a DFT upsampling method written by Adam Ginsberg and another that uses the package astroalign written by Martin Beroiz. Astroalign is sufficient for initial alignment, while the chi2 method is used for subpixel registration between a test image and the template before subtraction. The chi2 method is especially good for extended objects such as galaxies. Images that are aligned with astroalign alone are given the \"_a_.fits\" suffix, while the images that have been aligned with both methods are given a \"_A_.fits\" suffix. Images need to have a \"_A_.fits\" suffix in order to be subtracted. Images that are not aligned remain with the \"_N_.fits\" suffix. Running the 'align' method will only run astroalign. Chi2 is run automatically whenever a subtraction takes place, no user input is needed.\n\ncombine-- Combines all \"_A_.fits\" images in a directory into one co-added template image, then moves this image to the target's \"template\" directory. There are two combination methods: SWarp and numpy. All of these should give the same outputted image, with the main difference being each's computation time. Numpy is the fastest method by a large margin, but takes the most memory since it deals with python arrays. SWarp takes very little memory but is much slower. It also requires configuration in the form of a \"default.swarp\" config file. \n\nsubtract-- Subtracts the template created with the \"combine\" function from each source image, then places the resulting residual image in the \"residuals\" directory. There are two subtraction methods: hotpants and ais. AIS is a image subtraction algorithm written by Christophe Alard. It matches the template's PSF to each source image's and convolces the template to allow for an accurate subtraction. See documentation here http://www2.iap.fr/users/alard/package.html. Hotpants accomplishes the same task but in a slightly different manner. See hotpant's documentation here https://github.com/acbecker/hotpants. They are both extrmeely accurate methods, and differ little in computation time. The main difference is configuring the subtraction parameters. This will determine the effectiveness of the code. I find AIS's configurable parameters are fewer and easier to understand than hotpants. Both will require thorough reading of the code's documentation and practice with real images. This is the toughest part about using these two methods, but if the correct parameters are chosen the usefulness of the codes will make itself clear. AIS's config file \"process_config\" is located in the \"AIS/package/register\" directory, which itself wil be located wherever the sdi_pipeline source code is installed on your machine. Hotpants's parameters are defined when calling the command itself, so to modify them you need to modify the actual \"subtract_hotpants\" script.\n\npipeline-- Simply combines the align, combine, and subtract functions into one command. Running this will implement these in the order align->combine->subtract.\n\nsextractor-- First finds the PSF of each source image using PSFex (written by Emmanuel Bertin). Using this PSF SExtractor is run on each residual looking for sources exceeding a certain multiple of the background noise. A catalog of detected sources for each image is placed in the target's \"sources\" directory. These catalogs are then combined into a single text file. The sources in this text file are then filtered according to the SExtractor parameter \"spread_model.\" Spread_model assesses the PSF-like morphology of each detection and reports a sigle value. A negative value represents a source that is smaller than the PSF, likely something like a cosmic ray strike or subtraction artifact. A value close to one represents an exnteded object such as a galaxy. A positive number close to zero represents a source with a flux profile similar to the PSF of the original source image. This pipeline will throw away any detection with a spread_model <0 and > 0.1. The final list of detecitons for each iamge can be found in the \"sources.txt\" file in the sources directory. SExtractor parameters can be configured in the package's .param and .config files. These are located in the \"config\" directory, which is located wherever the sdi_pipeline source code is installed on your machine. The pertinent files for SExtractor are \"default.sex\" (configuration for final source extraction), \"default.param\" (the paramters that will be included in the final 'sources.txt' file\", \"psfex.config\" (PSFex's configuration file), and \"psf.sex\" (SExtractor's configuration file used for feeding data into PSFex). \"default.sex\" and \"default.param\" are likely to be the only things you'll ever have to change. See SExtractor's documentation on astromatic.net.\n\nrun-- This is the main script that brings all of the pipeline's functions together. I reccommend this be the only script that is run. It begins by asking what method (initialize, get, align, combine, subtract, extract, or pipeline) you want to run. Then it will take you through whatever method you specified.\n\n\nRun these scripts in the terminal with\n    python -m sdi_pipeline.scriptname\n    \n    Example: To run pipeline -> python -m sdi_pipeline.run\n    \n    \n\nThe simulation of ETI laser signals is done with Skymaker. The code for this is included but not yet neatly packaged into a singular function. It is still possible for users to use this code, but it will require manipulating scripts that are largely uncommented and have little documentation. I am working on an updated package that will include easy source-simulation functionality. Until then let me know if you have any questions about this part of the pipeline.\n\n\nFUTURE IMPROVEMENTS:\nThere is much room for improvement with the current code. Comments need to be added and a more detailed documentation needs to be created. Until then give the pipeline a shot and email me with any questions/critiques. andrew.henry.stewart@emory.edu", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andrewhstewart/SDI.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sdi-pipeline", "package_url": "https://pypi.org/project/sdi-pipeline/", "platform": "", "project_url": "https://pypi.org/project/sdi-pipeline/", "project_urls": {"Homepage": "https://github.com/andrewhstewart/SDI.git"}, "release_url": "https://pypi.org/project/sdi-pipeline/3.3/", "requires_dist": null, "requires_python": "", "summary": "Optical SETI Image Subtraction Pipeline", "version": "3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            SDI Pipeline<br>This is an image processing pipeline built for the University of California Santa Barbara's Experimental Cosmology Lab to be used in the SDI Optical SETI program in conjunction with the Las Cumbres Observatory Telescope Network. The pipeline downloads source images from LCO's network, aligns and co-adds them to create template images, and subtracts each template from the source images to create residual frames. These residuals are then searched for exceedingly large flux distributions indicative of an extraterrestrial's laser hitting LCO's CCD. More documentation can be found at ().<br><br><br>INSTALL:<br>Install on Linux machines from PyPi with<br>    pip install sdi_pipeline<br>    <br><br>DEPENDENCIES:<br>Running the pipeline requires a number of supplementary image processing packages to function properly. Install these on your machine before running the pipeline.<br><br>-Sextractor (source extraction code written by Emmanuel Bertin)<br>    *To install download tarball from astromatic.net and unpack<br>    <br>-SWarp (image registration and co-addition code written by Emmanuel Bertin)<br>    *To install, download tarball from astromatic.net and unpack<br>    <br>-PSFex (PSF computation software written by Emmanuel Bertin)<br>    *To install download tarball from astromatic.net and unpack<br>    <br>-Skymaker (astromatic.net) (OPTIONAL, only needed for simulations)<br>    *To install download tarball and unpack.<br>    <br>-hotpants (image subtraction program written by Andrew Becker)<br><br>-ISIS (image subtraction code written by Christophe Alard) <br>    *Included in pipeline's source code, does not need to  be installed seperately. To install run the pipeline's initialization script.<br>    <br>-CFITSIO (fits image proccessing package from NASA)<br>    *To install download tarball and unpack.<br>    <br>-astroalign (image registration package written by Martin Beroiz)<br>    *To install run \"pip install astroalign\"<br>    <br>-image_registration (image registration package written by Adam Ginsburg)<br>    *To install run \"pip install image_registration\"<br><br>    <br>The pipeline itself will run on any OS, however, many of the supplementary image processing packages are only distrubuted for Linux systems.<br><br>TESTING:<br>To test the pipeline install and make sure you have all of the dependencies, run the test.py module by<br><br>    \"python -m sdi_pipeline.test\"<br><br>The test module downloads two images of a farily sparse star field (21:40:47.388, +00:28:35.11) and runs them through the entire pipeline, from download to alignment to combination to subtraction and finally to source extraction. In order to test the detection abilities of the pipeline, three fake stars are added to one of the images (the non-reference image). They should survive the subtraction and appear in the non-reference residual as three obvious stars in a dog-leg pattern in the middle of the image.<br>At the end the function will display the residual image containing the fake stars with ds9, as well as the detected sources in each residual. Finally, the function will compare your machine's results with a standard \"control\" set of results located in the 'test_config' directory, which is located in the same directory as the pipeline's source code. You can view these control results by visiting this directory. The pertinent files are \"test_sources.txt\" and \"09:14:00.260_A_residual_.fits\". If successful, the function will print \"TEST SUCCESSFUL!\"<br><br>USING THE PIPELINE:<br>The software's physical architecture is a tree of directories created in the \"loc\" path. The \"loc\" variable is defined in the initialize.py script and defaults to the user's home directory. If you want to install the pipeline's directory tree in a different location, you need to change the \"loc\" variable before running the initialize.py script.<br><br>The basic pipeline functions are-<br>initialize-- Run this script after installing the package. This will create the pipeline's architecture and ensure all of the appropriate auxillary software is installed. This will also allow the option to install the ISIS image subtraction code, denoted here as AIS.<br><br>get-- Move downloaded LCO images from the Downloads directory (or any other specified directory) to the SDI directory tree, decompress the images, and rename and sort them according to observation target/filter/exposure time/etc.<br><br>align-- Align all images in a target's \"data\" directory to a chosen reference image. This reference image is chosen by the software as that with the least amount of sky noise. There are two different alignment methods: one that uses a DFT upsampling method written by Adam Ginsberg and another that uses the package astroalign written by Martin Beroiz. Astroalign is sufficient for initial alignment, while the chi2 method is used for subpixel registration between a test image and the template before subtraction. The chi2 method is especially good for extended objects such as galaxies. Images that are aligned with astroalign alone are given the \"_a_.fits\" suffix, while the images that have been aligned with both methods are given a \"_A_.fits\" suffix. Images need to have a \"_A_.fits\" suffix in order to be subtracted. Images that are not aligned remain with the \"_N_.fits\" suffix. Running the 'align' method will only run astroalign. Chi2 is run automatically whenever a subtraction takes place, no user input is needed.<br><br>combine-- Combines all \"_A_.fits\" images in a directory into one co-added template image, then moves this image to the target's \"template\" directory. There are two combination methods: SWarp and numpy. All of these should give the same outputted image, with the main difference being each's computation time. Numpy is the fastest method by a large margin, but takes the most memory since it deals with python arrays. SWarp takes very little memory but is much slower. It also requires configuration in the form of a \"default.swarp\" config file. <br><br>subtract-- Subtracts the template created with the \"combine\" function from each source image, then places the resulting residual image in the \"residuals\" directory. There are two subtraction methods: hotpants and ais. AIS is a image subtraction algorithm written by Christophe Alard. It matches the template's PSF to each source image's and convolces the template to allow for an accurate subtraction. See documentation here http://www2.iap.fr/users/alard/package.html. Hotpants accomplishes the same task but in a slightly different manner. See hotpant's documentation here https://github.com/acbecker/hotpants. They are both extrmeely accurate methods, and differ little in computation time. The main difference is configuring the subtraction parameters. This will determine the effectiveness of the code. I find AIS's configurable parameters are fewer and easier to understand than hotpants. Both will require thorough reading of the code's documentation and practice with real images. This is the toughest part about using these two methods, but if the correct parameters are chosen the usefulness of the codes will make itself clear. AIS's config file \"process_config\" is located in the \"AIS/package/register\" directory, which itself wil be located wherever the sdi_pipeline source code is installed on your machine. Hotpants's parameters are defined when calling the command itself, so to modify them you need to modify the actual \"subtract_hotpants\" script.<br><br>pipeline-- Simply combines the align, combine, and subtract functions into one command. Running this will implement these in the order align-&gt;combine-&gt;subtract.<br><br>sextractor-- First finds the PSF of each source image using PSFex (written by Emmanuel Bertin). Using this PSF SExtractor is run on each residual looking for sources exceeding a certain multiple of the background noise. A catalog of detected sources for each image is placed in the target's \"sources\" directory. These catalogs are then combined into a single text file. The sources in this text file are then filtered according to the SExtractor parameter \"spread_model.\" Spread_model assesses the PSF-like morphology of each detection and reports a sigle value. A negative value represents a source that is smaller than the PSF, likely something like a cosmic ray strike or subtraction artifact. A value close to one represents an exnteded object such as a galaxy. A positive number close to zero represents a source with a flux profile similar to the PSF of the original source image. This pipeline will throw away any detection with a spread_model &lt;0 and &gt; 0.1. The final list of detecitons for each iamge can be found in the \"sources.txt\" file in the sources directory. SExtractor parameters can be configured in the package's .param and .config files. These are located in the \"config\" directory, which is located wherever the sdi_pipeline source code is installed on your machine. The pertinent files for SExtractor are \"default.sex\" (configuration for final source extraction), \"default.param\" (the paramters that will be included in the final 'sources.txt' file\", \"psfex.config\" (PSFex's configuration file), and \"psf.sex\" (SExtractor's configuration file used for feeding data into PSFex). \"default.sex\" and \"default.param\" are likely to be the only things you'll ever have to change. See SExtractor's documentation on astromatic.net.<br><br>run-- This is the main script that brings all of the pipeline's functions together. I reccommend this be the only script that is run. It begins by asking what method (initialize, get, align, combine, subtract, extract, or pipeline) you want to run. Then it will take you through whatever method you specified.<br><br><br>Run these scripts in the terminal with<br>    python -m sdi_pipeline.scriptname<br>    <br>    Example: To run pipeline -&gt; python -m sdi_pipeline.run<br>    <br>    <br><br>The simulation of ETI laser signals is done with Skymaker. The code for this is included but not yet neatly packaged into a singular function. It is still possible for users to use this code, but it will require manipulating scripts that are largely uncommented and have little documentation. I am working on an updated package that will include easy source-simulation functionality. Until then let me know if you have any questions about this part of the pipeline.<br><br><br>FUTURE IMPROVEMENTS:<br>There is much room for improvement with the current code. Comments need to be added and a more detailed documentation needs to be created. Until then give the pipeline a shot and email me with any questions/critiques. andrew.henry.stewart@emory.edu\n          </div>"}, "last_serial": 4361755, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "6dc4ada6e14492604c3f6ece842dd7aa", "sha256": "a576093e4e763cbe43203c80eb7858a02a2957bf64424f5d916cd3aa785fc80d"}, "downloads": -1, "filename": "sdi_pipeline-1.0.tar.gz", "has_sig": false, "md5_digest": "6dc4ada6e14492604c3f6ece842dd7aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12332, "upload_time": "2018-06-13T22:11:40", "upload_time_iso_8601": "2018-06-13T22:11:40.185841Z", "url": "https://files.pythonhosted.org/packages/08/d8/21e9973347be0d0f1c6bfef381f64b1b3b51173fa097756b979c356a1425/sdi_pipeline-1.0.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "cec7a1b171d546ffea6dc6034ec88701", "sha256": "d5517fbc38d4e29ecc7e769181f76ef4d5054570b96958f60529d2ae34fbbd1a"}, "downloads": -1, "filename": "sdi_pipeline-2.0.tar.gz", "has_sig": false, "md5_digest": "cec7a1b171d546ffea6dc6034ec88701", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12536, "upload_time": "2018-06-14T01:34:21", "upload_time_iso_8601": "2018-06-14T01:34:21.428442Z", "url": "https://files.pythonhosted.org/packages/73/3e/4b38f05a64b9e0d2b06ff766a701af36157b81acff054cadcca9137b9ae2/sdi_pipeline-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "b0718c011130f2bdb7404541238aafe8", "sha256": "4257257697cf44cf77a8ea26efecc7d75b3a4e32243a3a13b08580b2bd395953"}, "downloads": -1, "filename": "sdi_pipeline-2.1.tar.gz", "has_sig": false, "md5_digest": "b0718c011130f2bdb7404541238aafe8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12562, "upload_time": "2018-06-30T00:35:27", "upload_time_iso_8601": "2018-06-30T00:35:27.622076Z", "url": "https://files.pythonhosted.org/packages/76/a1/8ea1d273628e46e469bc7514c83c0f1a264abb367a2d70a84bad568fd7d1/sdi_pipeline-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "b77932b7948e4e1d363b1b09edc42e48", "sha256": "58c7409b14efad04482b9969f8d9b25685c2fc5f6a707c8e7a924a14fd375efa"}, "downloads": -1, "filename": "sdi_pipeline-2.2.tar.gz", "has_sig": false, "md5_digest": "b77932b7948e4e1d363b1b09edc42e48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12566, "upload_time": "2018-08-23T13:58:37", "upload_time_iso_8601": "2018-08-23T13:58:37.372540Z", "url": "https://files.pythonhosted.org/packages/61/36/2678645b8a4d9d08dfb992d9275c70416ebdcbd1160643863c9d61110ac3/sdi_pipeline-2.2.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "40d33faf49ccc142c7b085eb9c0dbfd6", "sha256": "c0e13c9e4a593625c420848c59d08b36fabf053593b56a6130ab7211fa75cb76"}, "downloads": -1, "filename": "sdi_pipeline-2.3.tar.gz", "has_sig": false, "md5_digest": "40d33faf49ccc142c7b085eb9c0dbfd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12564, "upload_time": "2018-08-23T14:06:16", "upload_time_iso_8601": "2018-08-23T14:06:16.649205Z", "url": "https://files.pythonhosted.org/packages/77/55/d57dd6e032424b7413f6b9b0cb718ccb2b357d913e1218d160170fe80f26/sdi_pipeline-2.3.tar.gz", "yanked": false}], "2.4": [{"comment_text": "", "digests": {"md5": "c5b933b33e2c9fa8d436b0b5905f4409", "sha256": "f97f9c2b659a321cf9931f2feef7269593e49fd6919f030ea903705c95ba3efa"}, "downloads": -1, "filename": "sdi_pipeline-2.4.tar.gz", "has_sig": false, "md5_digest": "c5b933b33e2c9fa8d436b0b5905f4409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12819, "upload_time": "2018-08-31T20:24:28", "upload_time_iso_8601": "2018-08-31T20:24:28.500268Z", "url": "https://files.pythonhosted.org/packages/b5/a1/4af459a70237e01d79edaae4e4274cc07766515c0bb1b948db4c0a0c2884/sdi_pipeline-2.4.tar.gz", "yanked": false}], "2.5": [{"comment_text": "", "digests": {"md5": "7fe63aef9ae9f3b7302bf3fac37f2392", "sha256": "86b93010cb416e7f4a2770021ce62e3d878e91cbe6014ec2d1823710530ed87c"}, "downloads": -1, "filename": "sdi_pipeline-2.5.tar.gz", "has_sig": false, "md5_digest": "7fe63aef9ae9f3b7302bf3fac37f2392", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18217, "upload_time": "2018-09-21T17:54:57", "upload_time_iso_8601": "2018-09-21T17:54:57.928957Z", "url": "https://files.pythonhosted.org/packages/b1/6a/58bba58fe13b05ecca40c154ffaae8dadaee804f6219cc9e237a1e5446b9/sdi_pipeline-2.5.tar.gz", "yanked": false}], "2.6": [{"comment_text": "", "digests": {"md5": "040bb89441b011aae97134889ceeea32", "sha256": "d4ba79769db599e9e4c1649bbe1e515d6643e147aaba833a554770f52ec53717"}, "downloads": -1, "filename": "sdi_pipeline-2.6.tar.gz", "has_sig": false, "md5_digest": "040bb89441b011aae97134889ceeea32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22386, "upload_time": "2018-10-05T21:38:18", "upload_time_iso_8601": "2018-10-05T21:38:18.394456Z", "url": "https://files.pythonhosted.org/packages/87/c2/a64681ea8c035d08f36d1a92e3d6bba8bbc38139b3662639196ffdb8b324/sdi_pipeline-2.6.tar.gz", "yanked": false}], "2.7": [{"comment_text": "", "digests": {"md5": "4a3f870001d8d260ef6db666984bf04f", "sha256": "6bae6dbb742b2943bdb9b0b16a3dc0fae4833d899c56b44187653b7faac0b3ff"}, "downloads": -1, "filename": "sdi_pipeline-2.7.tar.gz", "has_sig": false, "md5_digest": "4a3f870001d8d260ef6db666984bf04f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6675722, "upload_time": "2018-10-05T22:10:49", "upload_time_iso_8601": "2018-10-05T22:10:49.835631Z", "url": "https://files.pythonhosted.org/packages/a5/22/c68dd311edaf45ee20d659d929333accbd5ccb8fa490b7e08fcfae25b4fa/sdi_pipeline-2.7.tar.gz", "yanked": false}], "2.8": [{"comment_text": "", "digests": {"md5": "0a58aa796cf037014c72f501660ceba5", "sha256": "8393d6455a08ab40d28f56bf3e724de96a0e6abcb534c49b158ad2dca890d72a"}, "downloads": -1, "filename": "sdi_pipeline-2.8.tar.gz", "has_sig": false, "md5_digest": "0a58aa796cf037014c72f501660ceba5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6675726, "upload_time": "2018-10-05T22:45:22", "upload_time_iso_8601": "2018-10-05T22:45:22.983500Z", "url": "https://files.pythonhosted.org/packages/74/56/71fc57e3b147bf53d8c925e5c148eb2516103b73bfdbb6a01e8a901f630e/sdi_pipeline-2.8.tar.gz", "yanked": false}], "2.9": [{"comment_text": "", "digests": {"md5": "7ce0cd1033e831289499d5d6a2f21c83", "sha256": "10b499371d6aa35596f5ee2431cf61048977e4ee086a1a38ea69d0cca15e4262"}, "downloads": -1, "filename": "sdi_pipeline-2.9.tar.gz", "has_sig": false, "md5_digest": "7ce0cd1033e831289499d5d6a2f21c83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6675770, "upload_time": "2018-10-05T23:06:20", "upload_time_iso_8601": "2018-10-05T23:06:20.642937Z", "url": "https://files.pythonhosted.org/packages/c2/30/61bc8f0adc8c66eeb6f11ebd79350b19285794829fd16945a36a64855d2e/sdi_pipeline-2.9.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "74163394e72c583b68d6b5e8c60a7112", "sha256": "647587ed527f2344a00ddddf11b5bbf427db57d19e9ee75c221e5a9199758f6c"}, "downloads": -1, "filename": "sdi_pipeline-3.0.tar.gz", "has_sig": false, "md5_digest": "74163394e72c583b68d6b5e8c60a7112", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6675844, "upload_time": "2018-10-05T23:20:09", "upload_time_iso_8601": "2018-10-05T23:20:09.812803Z", "url": "https://files.pythonhosted.org/packages/01/35/7154c12db0ef7acd7aaad3f0bf51218f333737729bb00d39432fbbae015a/sdi_pipeline-3.0.tar.gz", "yanked": false}], "3.1": [{"comment_text": "", "digests": {"md5": "76ff9b824674d5082c09d43c26de1efd", "sha256": "79ac911a29cc3ca0e67625a9b8a57f63c878a7d84d1c2446d857b889976dcd2e"}, "downloads": -1, "filename": "sdi_pipeline-3.1.tar.gz", "has_sig": false, "md5_digest": "76ff9b824674d5082c09d43c26de1efd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6675885, "upload_time": "2018-10-05T23:40:35", "upload_time_iso_8601": "2018-10-05T23:40:35.605056Z", "url": "https://files.pythonhosted.org/packages/e9/11/4cf06c9e328b78dde2b267cf2ce60b9520c2838196d675a63097d55a347e/sdi_pipeline-3.1.tar.gz", "yanked": false}], "3.2": [{"comment_text": "", "digests": {"md5": "0cf524a7cb092d1c30bd611a51dc1708", "sha256": "a8bd860365e82c15a85686233d9d027cf48a55ba4482f2a6ed714f012d2a47b5"}, "downloads": -1, "filename": "sdi_pipeline-3.2.tar.gz", "has_sig": false, "md5_digest": "0cf524a7cb092d1c30bd611a51dc1708", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6676119, "upload_time": "2018-10-06T21:53:09", "upload_time_iso_8601": "2018-10-06T21:53:09.895605Z", "url": "https://files.pythonhosted.org/packages/99/ee/8f9e711c7d9715cdf8b349eced262ef081dd2997662dc06fb050db8d1848/sdi_pipeline-3.2.tar.gz", "yanked": false}], "3.3": [{"comment_text": "", "digests": {"md5": "5b8fae0aaece958c0880ad5df9d91c8e", "sha256": "5829ba44b113e4a91e11728bbb935ad38a2658eb7f12d6f218d0a0ec81ced832"}, "downloads": -1, "filename": "sdi_pipeline-3.3.tar.gz", "has_sig": false, "md5_digest": "5b8fae0aaece958c0880ad5df9d91c8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68207901, "upload_time": "2018-10-10T21:50:51", "upload_time_iso_8601": "2018-10-10T21:50:51.616596Z", "url": "https://files.pythonhosted.org/packages/54/0a/a526b0105191630878e11b54ce0d7b84635eb18669206f60cd3fbb19c030/sdi_pipeline-3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b8fae0aaece958c0880ad5df9d91c8e", "sha256": "5829ba44b113e4a91e11728bbb935ad38a2658eb7f12d6f218d0a0ec81ced832"}, "downloads": -1, "filename": "sdi_pipeline-3.3.tar.gz", "has_sig": false, "md5_digest": "5b8fae0aaece958c0880ad5df9d91c8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68207901, "upload_time": "2018-10-10T21:50:51", "upload_time_iso_8601": "2018-10-10T21:50:51.616596Z", "url": "https://files.pythonhosted.org/packages/54/0a/a526b0105191630878e11b54ce0d7b84635eb18669206f60cd3fbb19c030/sdi_pipeline-3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:17 2020"}