{"info": {"author": "Ben Timby", "author_email": "btimby@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://travis-ci.org/btimby/django-proxysql.png\n   :target: https://travis-ci.org/btimby/django-proxysql\n\n.. image:: https://coveralls.io/repos/github/btimby/django-proxysql/badge.svg?branch=master\n   :target: https://coveralls.io/github/btimby/django-proxysql?branch=master\n\n.. image:: https://badge.fury.io/py/django-proxysql.svg\n    :target: https://badge.fury.io/py/django-proxysql\n\ndjango-proxysql\n---------------\n\nWhat?\n=====\n\nA software load balancer for your Django database. This project provides a\nDjango database engine that manages multiple peer database connections and\ndistributes queries to each equally. It also notes if a peer fails and stops\nsending queries to that peer until it recovers.\n\nThis project was developed for MySQL, Galera and ProxySQL. However it could be\nused with any Django compatible database engine. Most likely the connection\nerror detection would need to be adapted (as ``MySQLdb.Error`` is used to\ndetect failure).\n\n``django-proxysql`` can be used without ProxySQL (for instance, your peers\ncould be Galera cluster nodes), or with a different load balancer such as\nMaxScale. You can also combine this with multidb, where your Django router\nroutes between multiple pools of database peers.\n\nWhy?\n====\n\nDjango multidb support is implemented at a high level. Thus it is not aware of\nconnection failures. It will continue routing queries to a down host causing\nerrors.\n\nSome suggest adding a liveness check within the multidb router, but this adds\nunecessary overhead. ``django-proxysql`` also routes queries, but at the\ndatabase engine level which enables it to identify connection failures and\nroute queries accordingly.\n\n``django-proxysql`` assumes you are using a pool of peer MySQL, ProxySQL or\nMaxScale servers that are all exactly equivalent. It does not intelligently\nroute queries, that is left to the downstream peers.\n\nHow?\n====\n\nFirst install django-proxysql, for example:\n\n.. code:: bash\n\n    pip install django-proxysql\n\nThen configure your MySQL peers as additional databases in Django settings.\nSet your ``default`` django database to use this engine and specify the peers.\nYou can also specify the optional ``CHECK_INTERVAL`` which controls how often a\ndowned peer is rechecked (30s default).\n\n\n.. code:: python\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django_proxysql.backends.proxysql',\n            'PEERS': ['peer0', 'peer1'],\n            'CHECK_INTERVAL': 30,\n        },\n        'peer0': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'db_name',\n            'USER': 'user',\n            'PASSWORD': 'password',\n            'HOST': 'peer0',\n            'PORT': 6033,\n        },\n        'peer1': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'db_name',\n            'USER': 'user',\n            'PASSWORD': 'password',\n            'HOST': 'peer1',\n            'PORT': 6033,\n        },\n    }\n\nNow when you use the default database in Django, connections will be randomly\ndistributed to the peers.\n\nIf you don't need a dedicated load balancer such as ProxySQL or MaxScale, you\ncan simply configure your Galera cluster nodes as your peers.\n\n.. code:: python\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django_proxysql.backends.proxysql',\n            'PEERS': ['galera0', 'galera1'],\n        },\n        'peer0': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'db_name',\n            'USER': 'user',\n            'PASSWORD': 'password',\n            'HOST': 'galera0',\n            'PORT': 6033,\n        },\n        'peer1': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'db_name',\n            'USER': 'user',\n            'PASSWORD': 'password',\n            'HOST': 'galera1',\n            'PORT': 6033,\n        },\n    }\n\n\nYou can configure more than one ``django-proxysql`` backend and then use Django\nmultidb to route between those.\n\n.. code:: python\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django_proxysql.backends.proxysql',\n            'PEERS': ['peer0', 'peer1'],\n        },\n        'users': {\n            'ENGINE': 'django_proxysql.backends.proxysql',\n            'PEERS': ['peer2', 'peer3'],\n        },\n        'peer0': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'db_name',\n            'USER': 'user',\n            'PASSWORD': 'password',\n            'HOST': 'peer0',\n            'PORT': 6033,\n        },\n        'peer1': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'db_name',\n            'USER': 'user',\n            'PASSWORD': 'password',\n            'HOST': 'peer1',\n            'PORT': 6033,\n        },\n        'peer2': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'db_name',\n            'USER': 'user',\n            'PASSWORD': 'password',\n            'HOST': 'peer2',\n            'PORT': 6033,\n        },\n        'peer3': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'db_name',\n            'USER': 'user',\n            'PASSWORD': 'password',\n            'HOST': 'peer3',\n            'PORT': 6033,\n        },\n    }\n\n\nAnything Else?\n==============\n\nBecause only connection errors are handled by the engine, other errors like\ndropped connections will cause failures in your application. Therefore if you\nare performing a rolling upgrade, you must gracefully drain each peer. For\nexample, with ProxySQL you can do this by issuing the ``PROXYSQL PAUSE``\ncommand within the admin interface (port 6032). This causes ProxySQL to stop\naccepting new connections, which ``django-proxysql`` will detect and handle\nwithout a single error.\n\nAlso note that when migrations are applied, Django performs a check of ALL\nCONFIGURED DATABASES. This bears repeating. All database peers must be online\nin order to perform database migrations.\n\nCompatability\n=============\n\n+--------------------------------------------+\n| Python                                     |\n+====================+=====+=====+=====+=====+\n|                    | 2.7 | 3.5 | 3.6 | 3.7 |\n+-------------+------+-----+-----+-----+-----+\n| Django      | 1.10 |  O  |  O  |  O  |  O  |\n|             +------+-----+-----+-----+-----+\n|             | 1.11 |  O  |  O  |  O  |  O  |\n|             +------+-----+-----+-----+-----+\n|             | 2.0  |     |  O  |  O  |  O  |\n|             +------+-----+-----+-----+-----+\n|             | 2.1  |     |  O  |  O  |  O  |\n|             +------+-----+-----+-----+-----+\n|             | 2.2  |     |  O  |  O  |  O  |\n+-------------+------+-----+-----+-----+-----+", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/btimby/django-proxysql/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-proxysql", "package_url": "https://pypi.org/project/django-proxysql/", "platform": "", "project_url": "https://pypi.org/project/django-proxysql/", "project_urls": {"Homepage": "http://github.com/btimby/django-proxysql/"}, "release_url": "https://pypi.org/project/django-proxysql/0.8/", "requires_dist": null, "requires_python": "", "summary": "A software load balancer for your Django database.", "version": "0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/btimby/django-proxysql\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/btimby/django-proxysql.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/446bffef8b4a1a36558f02af75e7558661f1cdf0/68747470733a2f2f7472617669732d63692e6f72672f6274696d62792f646a616e676f2d70726f787973716c2e706e67\"></a>\n<a href=\"https://coveralls.io/github/btimby/django-proxysql?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/btimby/django-proxysql/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc40f7363752e838e0f90625639506302bd26c36/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6274696d62792f646a616e676f2d70726f787973716c2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/django-proxysql\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-proxysql.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e0f21655070148974b4239ea7f7d38f56c8fae6/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d70726f787973716c2e737667\"></a>\n<div id=\"django-proxysql\">\n<h2>django-proxysql</h2>\n<div id=\"what\">\n<h3>What?</h3>\n<p>A software load balancer for your Django database. This project provides a\nDjango database engine that manages multiple peer database connections and\ndistributes queries to each equally. It also notes if a peer fails and stops\nsending queries to that peer until it recovers.</p>\n<p>This project was developed for MySQL, Galera and ProxySQL. However it could be\nused with any Django compatible database engine. Most likely the connection\nerror detection would need to be adapted (as <tt>MySQLdb.Error</tt> is used to\ndetect failure).</p>\n<p><tt><span class=\"pre\">django-proxysql</span></tt> can be used without ProxySQL (for instance, your peers\ncould be Galera cluster nodes), or with a different load balancer such as\nMaxScale. You can also combine this with multidb, where your Django router\nroutes between multiple pools of database peers.</p>\n</div>\n<div id=\"why\">\n<h3>Why?</h3>\n<p>Django multidb support is implemented at a high level. Thus it is not aware of\nconnection failures. It will continue routing queries to a down host causing\nerrors.</p>\n<p>Some suggest adding a liveness check within the multidb router, but this adds\nunecessary overhead. <tt><span class=\"pre\">django-proxysql</span></tt> also routes queries, but at the\ndatabase engine level which enables it to identify connection failures and\nroute queries accordingly.</p>\n<p><tt><span class=\"pre\">django-proxysql</span></tt> assumes you are using a pool of peer MySQL, ProxySQL or\nMaxScale servers that are all exactly equivalent. It does not intelligently\nroute queries, that is left to the downstream peers.</p>\n</div>\n<div id=\"how\">\n<h3>How?</h3>\n<p>First install django-proxysql, for example:</p>\n<pre>pip install django-proxysql\n</pre>\n<p>Then configure your MySQL peers as additional databases in Django settings.\nSet your <tt>default</tt> django database to use this engine and specify the peers.\nYou can also specify the optional <tt>CHECK_INTERVAL</tt> which controls how often a\ndowned peer is rechecked (30s default).</p>\n<pre><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django_proxysql.backends.proxysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PEERS'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'peer0'</span><span class=\"p\">,</span> <span class=\"s1\">'peer1'</span><span class=\"p\">],</span>\n        <span class=\"s1\">'CHECK_INTERVAL'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'peer0'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.mysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'peer0'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"mi\">6033</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'peer1'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.mysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'peer1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"mi\">6033</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Now when you use the default database in Django, connections will be randomly\ndistributed to the peers.</p>\n<p>If you don\u2019t need a dedicated load balancer such as ProxySQL or MaxScale, you\ncan simply configure your Galera cluster nodes as your peers.</p>\n<pre><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django_proxysql.backends.proxysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PEERS'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'galera0'</span><span class=\"p\">,</span> <span class=\"s1\">'galera1'</span><span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'peer0'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.mysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'galera0'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"mi\">6033</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'peer1'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.mysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'galera1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"mi\">6033</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can configure more than one <tt><span class=\"pre\">django-proxysql</span></tt> backend and then use Django\nmultidb to route between those.</p>\n<pre><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django_proxysql.backends.proxysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PEERS'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'peer0'</span><span class=\"p\">,</span> <span class=\"s1\">'peer1'</span><span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'users'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django_proxysql.backends.proxysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PEERS'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'peer2'</span><span class=\"p\">,</span> <span class=\"s1\">'peer3'</span><span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'peer0'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.mysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'peer0'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"mi\">6033</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'peer1'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.mysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'peer1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"mi\">6033</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'peer2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.mysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'peer2'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"mi\">6033</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'peer3'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.mysql'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'USER'</span><span class=\"p\">:</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'HOST'</span><span class=\"p\">:</span> <span class=\"s1\">'peer3'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"mi\">6033</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"anything-else\">\n<h3>Anything Else?</h3>\n<p>Because only connection errors are handled by the engine, other errors like\ndropped connections will cause failures in your application. Therefore if you\nare performing a rolling upgrade, you must gracefully drain each peer. For\nexample, with ProxySQL you can do this by issuing the <tt>PROXYSQL PAUSE</tt>\ncommand within the admin interface (port 6032). This causes ProxySQL to stop\naccepting new connections, which <tt><span class=\"pre\">django-proxysql</span></tt> will detect and handle\nwithout a single error.</p>\n<p>Also note that when migrations are applied, Django performs a check of ALL\nCONFIGURED DATABASES. This bears repeating. All database peers must be online\nin order to perform database migrations.</p>\n</div>\n<div id=\"compatability\">\n<h3>Compatability</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>\u00a0</td>\n<td>2.7</td>\n<td>3.5</td>\n<td>3.6</td>\n<td>3.7</td>\n</tr>\n<tr><td>Django</td>\n<td>1.10</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n</tr>\n<tr><td>1.11</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n</tr>\n<tr><td>2.0</td>\n<td>\u00a0</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n</tr>\n<tr><td>2.1</td>\n<td>\u00a0</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n</tr>\n<tr><td>2.2</td>\n<td>\u00a0</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6281111, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7733a20fadf8e5c338a861ce1d36eb49", "sha256": "d5cb3a88fcce49060c4649af74a1cd6581521eb80405dbd914d9d3259c09da81"}, "downloads": -1, "filename": "django-proxysql-0.1.tar.gz", "has_sig": false, "md5_digest": "7733a20fadf8e5c338a861ce1d36eb49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3107, "upload_time": "2019-09-10T00:22:47", "upload_time_iso_8601": "2019-09-10T00:22:47.321328Z", "url": "https://files.pythonhosted.org/packages/09/45/f7a09952d7fa54f45b06cb246347176b0bd71fe4ee8ce8d68ac28f4b6ba5/django-proxysql-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "566c505de5d000221fb287da4dcc8204", "sha256": "3b47bf482adfd45a823c9c0f1c9a9d5a598131fc82c48132c793f7c3456dc32b"}, "downloads": -1, "filename": "django-proxysql-0.2.tar.gz", "has_sig": false, "md5_digest": "566c505de5d000221fb287da4dcc8204", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3602, "upload_time": "2019-09-10T02:34:17", "upload_time_iso_8601": "2019-09-10T02:34:17.462410Z", "url": "https://files.pythonhosted.org/packages/f4/e1/5e3d2b2fdd23b1d94acd72262a01dcb16017cfd5145eb6f0bbbf15a3ef1a/django-proxysql-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "8979088755bdf157b42f3bfd8f52649f", "sha256": "43d86b0a0241635c75c2bef9c4e22d1c310acb1126981c80e33de8a8b430d73d"}, "downloads": -1, "filename": "django-proxysql-0.3.tar.gz", "has_sig": false, "md5_digest": "8979088755bdf157b42f3bfd8f52649f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3949, "upload_time": "2019-09-10T02:46:08", "upload_time_iso_8601": "2019-09-10T02:46:08.926547Z", "url": "https://files.pythonhosted.org/packages/72/2a/ef712a182fb5133c5cdc815443862add834b67c6bf9c6c42c231c7f529d9/django-proxysql-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "5d1a4004502c5db033d2e84f0ab48ed0", "sha256": "3b1e69bdec2c4d4e02845d1ab49e02601e0c8a99b5443221801345e7b32dc57d"}, "downloads": -1, "filename": "django-proxysql-0.4.tar.gz", "has_sig": false, "md5_digest": "5d1a4004502c5db033d2e84f0ab48ed0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4134, "upload_time": "2019-11-29T22:58:06", "upload_time_iso_8601": "2019-11-29T22:58:06.713987Z", "url": "https://files.pythonhosted.org/packages/58/4f/3498f520504298039ac885755d37ab09472107aaaca59a0694bb14bdf59b/django-proxysql-0.4.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "fa403c1f422c524b5a406a9c41ccd44b", "sha256": "7506c994044402685d677c49b5d70f3e4a1e1665972da9a41387cf2d65c06769"}, "downloads": -1, "filename": "django-proxysql-0.8.tar.gz", "has_sig": false, "md5_digest": "fa403c1f422c524b5a406a9c41ccd44b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9375, "upload_time": "2019-12-11T21:42:32", "upload_time_iso_8601": "2019-12-11T21:42:32.033858Z", "url": "https://files.pythonhosted.org/packages/c2/be/2fa6fad2575e56e16af4e91d6e4b0eb03ee196616b9c015d05f29ecff2cb/django-proxysql-0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa403c1f422c524b5a406a9c41ccd44b", "sha256": "7506c994044402685d677c49b5d70f3e4a1e1665972da9a41387cf2d65c06769"}, "downloads": -1, "filename": "django-proxysql-0.8.tar.gz", "has_sig": false, "md5_digest": "fa403c1f422c524b5a406a9c41ccd44b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9375, "upload_time": "2019-12-11T21:42:32", "upload_time_iso_8601": "2019-12-11T21:42:32.033858Z", "url": "https://files.pythonhosted.org/packages/c2/be/2fa6fad2575e56e16af4e91d6e4b0eb03ee196616b9c015d05f29ecff2cb/django-proxysql-0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:39 2020"}