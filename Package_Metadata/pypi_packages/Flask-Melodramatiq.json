{"info": {"author": "Evgeni Pandurski", "author_email": "epandurski@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Flask-Melodramatiq\n==================\n\n**Flask-Melodramatiq** is a `Flask`_ extension that adds support for\nthe `Dramatiq`_ task processing library.\n\n`Dramatiq`_ is a great library, and Flask-Melodramatiq tries hard not\nto force you to change the way you interact with\nit. Flask-Melodramatiq defines thin wrappers around the broker types\navailable in Dramatiq, so that all the power of Dramatiq's API remains\navailable to you.\n\nFor example::\n\n  import dramatiq\n  from flask import Flask\n  from flask_melodramatiq import RabbitmqBroker\n\n  app = Flask(__name__)\n  broker = RabbitmqBroker(app)\n  dramatiq.set_broker(broker)\n\n  @dramatiq.actor\n  def task():\n      print('Snakes appreciate good theatrical preformace.')\n\nor, if you prefer the Flask application factory pattern::\n\n  import dramatiq\n  from flask import Flask\n  from flask_melodramatiq import RabbitmqBroker\n\n  broker = RabbitmqBroker()\n  dramatiq.set_broker(broker)\n\n  @dramatiq.actor\n  def task():\n      print('Snakes appreciate good theatrical preformace.')\n\n  def create_app():\n      app = Flask(__name__)\n      broker.init_app(app)\n      return app\n\nIn those examples, the ``broker`` instance that we created (we call it\na \"lazy broker\") is a genuine `Dramatiq`_ broker, and can be used\nanywhere where a \"native\" broker can be used. (It has\n``dramatiq.brokers.rabbitmq.RabbitmqBroker`` as a superclass!)  Lazy\nbrokers are thin wrappers which add several important features:\n\n1. They honor the settings in the Flask application configuration.\n\n2. ``init_app`` can be called on them *before or after* the\n   actors have been defined.\n\n3. The Flask application context is correctly set during the execution\n   of the tasks.\n\n4. They add few convenience methods. (The ``Broker.actor`` decorator\n   for example.)\n\n\nConfiguration\n-------------\n\nYou can change the configuration options for your broker by passing\nkeyword arguments to the constructor, or by setting corresponding\nvalues for the ``DRAMATIQ_BROKER_*`` set of keys in the app\nconfig. For example, you can do either::\n\n   from flask_melodramatiq import RabbitmqBroker\n\n   broker = RabbitmqBroker(\n       url='amqp://mybroker:5672', confirm_delivery=True)\n\nor you can put this in your app config::\n\n   DRAMATIQ_BROKER_URL = 'amqp://mybroker:5672'\n   DRAMATIQ_BROKER_CONFIRM_DELIVERY = True\n\nIf the configuration values passed to the constructor are different\nfrom the ones set in the app config, the later take precedence. You\ncan even set/override the type of the broker in the app config::\n\n  from flask_melodramatiq import Broker\n\n  broker = Broker()  # Broker's type is not specified here.\n\nand instead, specify the type in the app config::\n\n   DRAMATIQ_BROKER_CLASS = 'StubBroker'\n\nThis feature can be quite useful when testing your code.\n\n\nStarting workers\n----------------\n\nWith Flask-Melodramatiq you have the whole power of Dramatiq's CLI on\non your disposal. For example, to start worker processes for your\nbroker instance you may run::\n\n  $ dramatiq wsgi:broker\n\nand in ``wsgi.py`` you may have something like this::\n\n   from myapp import create_app, broker\n\n   app = create_app()\n\nYou may have as many broker instances as you want, but you need to\nstart each one of them with a separate command.\n\n\nInstallation\n------------\n\nYou can install Flask-Melodramatiq with ``pip``::\n\n    $ pip install Flask-Melodramatiq\n\n\n\nYou can read the docs `here`_.\n\n\n.. _here: https://flask-melodramatiq.readthedocs.io/en/latest/\n.. _Dramatiq: https://github.com/Bogdanp/dramatiq\n.. _Flask: http://flask.pocoo.org/", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/epandurski/flask_melodramatiq", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Flask-Melodramatiq", "package_url": "https://pypi.org/project/Flask-Melodramatiq/", "platform": "any", "project_url": "https://pypi.org/project/Flask-Melodramatiq/", "project_urls": {"Bug Tracker": "https://github.com/epandurski/flask_melodramatiq/issues", "Documentation": "https://flask-melodramatiq.readthedocs.io/en/latest/", "Homepage": "https://github.com/epandurski/flask_melodramatiq", "Source Code": "https://github.com/epandurski/flask_melodramatiq"}, "release_url": "https://pypi.org/project/Flask-Melodramatiq/0.3.8/", "requires_dist": null, "requires_python": "", "summary": "A Flask extension that adds support for the \"dramatiq\" task processing library", "version": "0.3.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Flask-Melodramatiq</strong> is a <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a> extension that adds support for\nthe <a href=\"https://github.com/Bogdanp/dramatiq\" rel=\"nofollow\">Dramatiq</a> task processing library.</p>\n<p><a href=\"https://github.com/Bogdanp/dramatiq\" rel=\"nofollow\">Dramatiq</a> is a great library, and Flask-Melodramatiq tries hard not\nto force you to change the way you interact with\nit. Flask-Melodramatiq defines thin wrappers around the broker types\navailable in Dramatiq, so that all the power of Dramatiq\u2019s API remains\navailable to you.</p>\n<p>For example:</p>\n<pre>import dramatiq\nfrom flask import Flask\nfrom flask_melodramatiq import RabbitmqBroker\n\napp = Flask(__name__)\nbroker = RabbitmqBroker(app)\ndramatiq.set_broker(broker)\n\n@dramatiq.actor\ndef task():\n    print('Snakes appreciate good theatrical preformace.')\n</pre>\n<p>or, if you prefer the Flask application factory pattern:</p>\n<pre>import dramatiq\nfrom flask import Flask\nfrom flask_melodramatiq import RabbitmqBroker\n\nbroker = RabbitmqBroker()\ndramatiq.set_broker(broker)\n\n@dramatiq.actor\ndef task():\n    print('Snakes appreciate good theatrical preformace.')\n\ndef create_app():\n    app = Flask(__name__)\n    broker.init_app(app)\n    return app\n</pre>\n<p>In those examples, the <tt>broker</tt> instance that we created (we call it\na \u201clazy broker\u201d) is a genuine <a href=\"https://github.com/Bogdanp/dramatiq\" rel=\"nofollow\">Dramatiq</a> broker, and can be used\nanywhere where a \u201cnative\u201d broker can be used. (It has\n<tt>dramatiq.brokers.rabbitmq.RabbitmqBroker</tt> as a superclass!)  Lazy\nbrokers are thin wrappers which add several important features:</p>\n<ol>\n<li>They honor the settings in the Flask application configuration.</li>\n<li><tt>init_app</tt> can be called on them <em>before or after</em> the\nactors have been defined.</li>\n<li>The Flask application context is correctly set during the execution\nof the tasks.</li>\n<li>They add few convenience methods. (The <tt>Broker.actor</tt> decorator\nfor example.)</li>\n</ol>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>You can change the configuration options for your broker by passing\nkeyword arguments to the constructor, or by setting corresponding\nvalues for the <tt>DRAMATIQ_BROKER_*</tt> set of keys in the app\nconfig. For example, you can do either:</p>\n<pre>from flask_melodramatiq import RabbitmqBroker\n\nbroker = RabbitmqBroker(\n    url='amqp://mybroker:5672', confirm_delivery=True)\n</pre>\n<p>or you can put this in your app config:</p>\n<pre>DRAMATIQ_BROKER_URL = 'amqp://mybroker:5672'\nDRAMATIQ_BROKER_CONFIRM_DELIVERY = True\n</pre>\n<p>If the configuration values passed to the constructor are different\nfrom the ones set in the app config, the later take precedence. You\ncan even set/override the type of the broker in the app config:</p>\n<pre>from flask_melodramatiq import Broker\n\nbroker = Broker()  # Broker's type is not specified here.\n</pre>\n<p>and instead, specify the type in the app config:</p>\n<pre>DRAMATIQ_BROKER_CLASS = 'StubBroker'\n</pre>\n<p>This feature can be quite useful when testing your code.</p>\n</div>\n<div id=\"starting-workers\">\n<h2>Starting workers</h2>\n<p>With Flask-Melodramatiq you have the whole power of Dramatiq\u2019s CLI on\non your disposal. For example, to start worker processes for your\nbroker instance you may run:</p>\n<pre>$ dramatiq wsgi:broker\n</pre>\n<p>and in <tt>wsgi.py</tt> you may have something like this:</p>\n<pre>from myapp import create_app, broker\n\napp = create_app()\n</pre>\n<p>You may have as many broker instances as you want, but you need to\nstart each one of them with a separate command.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install Flask-Melodramatiq with <tt>pip</tt>:</p>\n<pre>$ pip install Flask-Melodramatiq\n</pre>\n<p>You can read the docs <a href=\"https://flask-melodramatiq.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6589156, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "59a9deb340b4d4048a84d8675be73bc7", "sha256": "55a3a90c4142841b32e8d455b4b598246bd86fd28e4f1c31315b57528e43ebd1"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.1.tar.gz", "has_sig": false, "md5_digest": "59a9deb340b4d4048a84d8675be73bc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4351, "upload_time": "2019-03-13T15:15:43", "upload_time_iso_8601": "2019-03-13T15:15:43.201106Z", "url": "https://files.pythonhosted.org/packages/cb/c6/1d5a9366c22b0afb45117c07903f101da694a45b7173c70341f38e1f8349/Flask-Melodramatiq-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b85f68c16652f32a292a5509b0bc5366", "sha256": "eb5f6f5bf91d74b8c3d56e9ebd4206da68f64fc4ba63c5b023733a4fcc8df553"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.2.tar.gz", "has_sig": false, "md5_digest": "b85f68c16652f32a292a5509b0bc5366", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7015, "upload_time": "2019-03-17T11:03:42", "upload_time_iso_8601": "2019-03-17T11:03:42.766368Z", "url": "https://files.pythonhosted.org/packages/0e/1e/3a45dab6023cbaa9cd837dacb6598916e90e29c8363a70523ded95fc00e2/Flask-Melodramatiq-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0d6c8aae38c6064f54dfd288e199ccd7", "sha256": "67252bccb2a3af95e3cf54db57e68a81bffbae67f7dce4637b2ff9330869f84c"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.tar.gz", "has_sig": false, "md5_digest": "0d6c8aae38c6064f54dfd288e199ccd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8751, "upload_time": "2019-03-21T13:56:15", "upload_time_iso_8601": "2019-03-21T13:56:15.432674Z", "url": "https://files.pythonhosted.org/packages/39/6f/7af08121f108e877bb20e1a5ea3c5403897ac93798a1d6c1a8656ad6ac9b/Flask-Melodramatiq-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7c9217e347a645826890c030b6615946", "sha256": "df5ba718242c443ec224d03b7f3fb90e649a00cea85658a0d880002802a01cfb"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7c9217e347a645826890c030b6615946", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9308, "upload_time": "2019-03-23T13:37:17", "upload_time_iso_8601": "2019-03-23T13:37:17.898011Z", "url": "https://files.pythonhosted.org/packages/a7/1f/2856600d4b79d984a204cc4f51fe9487322e2b25b4ed1445b6d5086e1838/Flask-Melodramatiq-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "dd1ef3ffed57e0c7394d8c31e5d47ef4", "sha256": "17ffbf8b8013ce05bd86c0233633835a90575e7e22abe3c2e455240195e28df4"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.2.tar.gz", "has_sig": false, "md5_digest": "dd1ef3ffed57e0c7394d8c31e5d47ef4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10011, "upload_time": "2019-03-26T08:06:37", "upload_time_iso_8601": "2019-03-26T08:06:37.404654Z", "url": "https://files.pythonhosted.org/packages/30/fb/6c41557f81feebb244d15d9c7f0d56970ff8e0362512dacc30cba35949a3/Flask-Melodramatiq-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "9c9e6063b1bd571abf89864885cc21c3", "sha256": "2515f5e66b757066bc69c4ecce1319b73d21b217861835ae7bae17a9c4456e2a"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.3.tar.gz", "has_sig": false, "md5_digest": "9c9e6063b1bd571abf89864885cc21c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10044, "upload_time": "2019-03-26T23:54:10", "upload_time_iso_8601": "2019-03-26T23:54:10.195059Z", "url": "https://files.pythonhosted.org/packages/1e/b0/7c831d0572baba2156a36fa62461ab055097f38843f3bf7afda0b81c501d/Flask-Melodramatiq-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "5f432508f3f7a396175dced7b872521c", "sha256": "ccfa3b3df6febbfda0b66fe1e26f82dd85ae5520c93ff8b6f0f9eb5668aadbd0"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.4.tar.gz", "has_sig": false, "md5_digest": "5f432508f3f7a396175dced7b872521c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10972, "upload_time": "2019-04-02T13:28:13", "upload_time_iso_8601": "2019-04-02T13:28:13.345743Z", "url": "https://files.pythonhosted.org/packages/3b/cf/ee04c4defa1875cf93ea82f2687616cc48658dd724b73384581ae60d0aaf/Flask-Melodramatiq-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "8232c3a2f86dc640a76a5a3afff6cbe8", "sha256": "9a769c777e204435fea5594d41af831048eee0fa9c4ffc4510150fe37e20f486"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.5.tar.gz", "has_sig": false, "md5_digest": "8232c3a2f86dc640a76a5a3afff6cbe8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11025, "upload_time": "2019-05-11T11:00:35", "upload_time_iso_8601": "2019-05-11T11:00:35.241312Z", "url": "https://files.pythonhosted.org/packages/91/23/273a0febd131a41de495f3d0bff6eff94c5b83b593c46dad6298ae4f2037/Flask-Melodramatiq-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "80b14afd7308c323a37009c16de9d0ed", "sha256": "8b59790810880787cdce2ede8fe8797969cfb7ddc1480122355df05168990325"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.6.tar.gz", "has_sig": false, "md5_digest": "80b14afd7308c323a37009c16de9d0ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11199, "upload_time": "2019-06-23T15:34:49", "upload_time_iso_8601": "2019-06-23T15:34:49.231052Z", "url": "https://files.pythonhosted.org/packages/83/96/d5ab730ccb7dd60a1fc37027928c94add051b93b4473fffffb8345fc4360/Flask-Melodramatiq-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "8601e38fc95fe59eade56d7e6cd0cb8b", "sha256": "17ff0e48a02c0652a4776abd67cbd6ba8e2de29e36540ded25ab2247ece94dbb"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.7.tar.gz", "has_sig": false, "md5_digest": "8601e38fc95fe59eade56d7e6cd0cb8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11208, "upload_time": "2019-09-06T22:12:01", "upload_time_iso_8601": "2019-09-06T22:12:01.347050Z", "url": "https://files.pythonhosted.org/packages/61/20/20086a227001c27a821a25c989297cf950ca2ba248f52861974343b547e9/Flask-Melodramatiq-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "4eef029401558d4d960dfe93764cd6a9", "sha256": "340e8733d5511ecf0d3019c4913eef1d27cffd929ff34e106fa837f9942a8581"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.8.tar.gz", "has_sig": false, "md5_digest": "4eef029401558d4d960dfe93764cd6a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11872, "upload_time": "2020-02-07T15:50:49", "upload_time_iso_8601": "2020-02-07T15:50:49.706953Z", "url": "https://files.pythonhosted.org/packages/92/da/68529772aa1b97aa32b60934ce907c35106a3f8fe6d93b991cd69fed1659/Flask-Melodramatiq-0.3.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4eef029401558d4d960dfe93764cd6a9", "sha256": "340e8733d5511ecf0d3019c4913eef1d27cffd929ff34e106fa837f9942a8581"}, "downloads": -1, "filename": "Flask-Melodramatiq-0.3.8.tar.gz", "has_sig": false, "md5_digest": "4eef029401558d4d960dfe93764cd6a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11872, "upload_time": "2020-02-07T15:50:49", "upload_time_iso_8601": "2020-02-07T15:50:49.706953Z", "url": "https://files.pythonhosted.org/packages/92/da/68529772aa1b97aa32b60934ce907c35106a3f8fe6d93b991cd69fed1659/Flask-Melodramatiq-0.3.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:38 2020"}