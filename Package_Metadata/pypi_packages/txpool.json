{"info": {"author": "Ryan Johnson", "author_email": "escattone@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Twisted", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "txpool\n======\n\nSummary\n-------\n\nA Python persistent process pool for use with\n`Twisted <http://twistedmatrix.com>`__. Provides the ability to run\nPython callables asynchronously within a pool of persistent processes,\nas long as the callable, its arguments, and its return value are all\npicklable.\n\nInstalling\n----------\n\n.. code:: sh\n\n    pip install txpool\n\nor\n\n.. code:: sh\n\n    python setup.py install\n\nExamples\n--------\n\nHere are some simple examples to give you the idea:\n\n.. code:: python\n\n        import glob\n        from twisted.internet import reactor\n        from twisted.internet.defer import inlineCallbacks\n        import txpool\n\n        pool = txpool.Pool()\n\n        @inlineCallbacks\n        def main():\n            result = yield pool.apply_async(glob.glob, ('*.pdf',))\n            print result\n            reactor.stop()\n\n        reactor.callWhenRunning(main)\n        reactor.run()\n\nThe callable can instead be specified as a string, using dotted notation\nto specify the full path to the callable.\n\n.. code:: python\n\n        from twisted.internet import reactor\n        from twisted.internet.defer import inlineCallbacks\n        import txpool\n\n        pool = txpool.Pool()\n\n        @inlineCallbacks\n        def main():\n            # You can provide an optional timeout (in seconds) for the call\n            # (the default is None).\n            try:\n                result = yield pool.apply_async('glob.glob', ('*.pdf',), timeout=5)\n            except PoolTimeout as e:\n                result = e\n            print result\n            reactor.stop()\n\n        reactor.callWhenRunning(main)\n        reactor.run()\n\nThe *txpool.Pool* class can be explicitly sized, asked to log its\nactions, and/or given a custom name.\n\n.. code:: python\n\n        import logging\n        from twisted.internet import reactor\n        from twisted.internet.defer import inlineCallbacks, gatherResults\n        import txpool\n\n        logger = logging.getLogger('example')\n        logger.addHandler(logging.StreamHandler())\n        logger.setLevel(logging.DEBUG)\n\n        pool = txpool.Pool(size=5, log=logger, name='twisting-by-the-pool')\n\n        @inlineCallbacks\n        def main():\n            calls = ('math.factorial',) * 5\n            args = [(n,) for n in range(150780, 150785)]\n\n            # You can wait until the pool is at full-strength (providing an\n            # optional timeout if desired), but it's not required before\n            # calling the \"apply_async\" method.  Jobs are queued until a\n            # worker process is available.\n            try:\n                yield pool.on_ready(timeout=10)\n            except PoolTimeout as e:\n                results = e\n            else:\n                results = yield gatherResults(map(pool.apply_async, calls, args))\n\n            print results\n\n            try:\n                # You can gracefully close the pool, which ensures all jobs\n                # already queued are completed before shutting down...\n                yield pool.close(timeout=10)\n            except PoolTimeout as e:\n                print e\n                # ...or you can use force and immediately send SIGKILL to each\n                # process in the pool.\n                yield pool.terminate(timeout=10)\n\n            reactor.stop()\n\n        reactor.callWhenRunning(main)\n        reactor.run()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/escattone/txpool", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "txpool", "package_url": "https://pypi.org/project/txpool/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/txpool/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/escattone/txpool"}, "release_url": "https://pypi.org/project/txpool/0.9/", "requires_dist": null, "requires_python": null, "summary": "A persistent process pool for Twisted", "version": "0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"summary\">\n<h2>Summary</h2>\n<p>A Python persistent process pool for use with\n<a href=\"http://twistedmatrix.com\" rel=\"nofollow\">Twisted</a>. Provides the ability to run\nPython callables asynchronously within a pool of persistent processes,\nas long as the callable, its arguments, and its return value are all\npicklable.</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre>pip install txpool\n</pre>\n<p>or</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Here are some simple examples to give you the idea:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">glob</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span>\n<span class=\"kn\">import</span> <span class=\"nn\">txpool</span>\n\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">txpool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">apply_async</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'*.pdf'</span><span class=\"p\">,))</span>\n    <span class=\"nb\">print</span> <span class=\"n\">result</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callWhenRunning</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>The callable can instead be specified as a string, using dotted notation\nto specify the full path to the callable.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span>\n<span class=\"kn\">import</span> <span class=\"nn\">txpool</span>\n\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">txpool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># You can provide an optional timeout (in seconds) for the call</span>\n    <span class=\"c1\"># (the default is None).</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">apply_async</span><span class=\"p\">(</span><span class=\"s1\">'glob.glob'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'*.pdf'</span><span class=\"p\">,),</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">PoolTimeout</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n    <span class=\"nb\">print</span> <span class=\"n\">result</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callWhenRunning</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>The <em>txpool.Pool</em> class can be explicitly sized, asked to log its\nactions, and/or given a custom name.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span><span class=\"p\">,</span> <span class=\"n\">gatherResults</span>\n<span class=\"kn\">import</span> <span class=\"nn\">txpool</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">txpool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">log</span><span class=\"o\">=</span><span class=\"n\">logger</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'twisting-by-the-pool'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">calls</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'math.factorial'</span><span class=\"p\">,)</span> <span class=\"o\">*</span> <span class=\"mi\">5</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">n</span><span class=\"p\">,)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">150780</span><span class=\"p\">,</span> <span class=\"mi\">150785</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># You can wait until the pool is at full-strength (providing an</span>\n    <span class=\"c1\"># optional timeout if desired), but it's not required before</span>\n    <span class=\"c1\"># calling the \"apply_async\" method.  Jobs are queued until a</span>\n    <span class=\"c1\"># worker process is available.</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">on_ready</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">PoolTimeout</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">gatherResults</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">apply_async</span><span class=\"p\">,</span> <span class=\"n\">calls</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">))</span>\n\n    <span class=\"nb\">print</span> <span class=\"n\">results</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># You can gracefully close the pool, which ensures all jobs</span>\n        <span class=\"c1\"># already queued are completed before shutting down...</span>\n        <span class=\"k\">yield</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">PoolTimeout</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span> <span class=\"n\">e</span>\n        <span class=\"c1\"># ...or you can use force and immediately send SIGKILL to each</span>\n        <span class=\"c1\"># process in the pool.</span>\n        <span class=\"k\">yield</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callWhenRunning</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1399480, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "8123da45af40ed2dfef3c2049650ea0d", "sha256": "5377461b57f6d0db0245cb65dfa68fa22dfd9e704328e1c2462cdf02e67e5da2"}, "downloads": -1, "filename": "txpool-0.9-py2-none-any.whl", "has_sig": false, "md5_digest": "8123da45af40ed2dfef3c2049650ea0d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11705, "upload_time": "2015-01-28T01:21:53", "upload_time_iso_8601": "2015-01-28T01:21:53.886605Z", "url": "https://files.pythonhosted.org/packages/5c/87/0e9608062ce97bd97fb0bf8ebb0a8683ab4418f5e049fbd870f0f2a1555b/txpool-0.9-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f61ffe48335e698d825c15345f350899", "sha256": "e2847c67c10f1f44d7a2394afac653fa772564d305c36c3c089f1ea1ff85f3db"}, "downloads": -1, "filename": "txpool-0.9.tar.gz", "has_sig": false, "md5_digest": "f61ffe48335e698d825c15345f350899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10244, "upload_time": "2015-01-28T01:21:51", "upload_time_iso_8601": "2015-01-28T01:21:51.889754Z", "url": "https://files.pythonhosted.org/packages/57/e5/a4f40f6c6d8dc8b849cdca45cc4fba9c23b0417ada37b20835ed436fbc08/txpool-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8123da45af40ed2dfef3c2049650ea0d", "sha256": "5377461b57f6d0db0245cb65dfa68fa22dfd9e704328e1c2462cdf02e67e5da2"}, "downloads": -1, "filename": "txpool-0.9-py2-none-any.whl", "has_sig": false, "md5_digest": "8123da45af40ed2dfef3c2049650ea0d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11705, "upload_time": "2015-01-28T01:21:53", "upload_time_iso_8601": "2015-01-28T01:21:53.886605Z", "url": "https://files.pythonhosted.org/packages/5c/87/0e9608062ce97bd97fb0bf8ebb0a8683ab4418f5e049fbd870f0f2a1555b/txpool-0.9-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f61ffe48335e698d825c15345f350899", "sha256": "e2847c67c10f1f44d7a2394afac653fa772564d305c36c3c089f1ea1ff85f3db"}, "downloads": -1, "filename": "txpool-0.9.tar.gz", "has_sig": false, "md5_digest": "f61ffe48335e698d825c15345f350899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10244, "upload_time": "2015-01-28T01:21:51", "upload_time_iso_8601": "2015-01-28T01:21:51.889754Z", "url": "https://files.pythonhosted.org/packages/57/e5/a4f40f6c6d8dc8b849cdca45cc4fba9c23b0417ada37b20835ed436fbc08/txpool-0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:43:10 2020"}