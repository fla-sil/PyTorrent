{"info": {"author": "Shad Sharma", "author_email": "shadanan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyxair\n\nPython library for interacting with Behringer XAir devices.\n\n## Usage\n\n### Detect XAir Devices\n\n```python\nxinfo = await pyxair.auto_detect()\n```\n\n### Create an XAir Client\n\n`XAir` is a client that subscribes to events from an XAir device and caches the messages.\n\n```python\nxair = pyxair.XAir(xinfo)\nasyncio.create_task(xair.start())\n```\n\n### Get & Put\n\nHere's an example using the `get` coroutine to retrieve the status. This is achieved by sending an OSC message to the `/status` address:\n\n```python\nawait xair.get(\"/status\")\n```\n\nResponse:\n\n```python\nOscMessage(address='/status', arguments=['active', '192.168.86.128', 'XR18-5E-91-5A'])\n```\n\nThis is am example using the `get` coroutine to retrieve the main L/R mix:\n\n```python\nawait xair.get(\"/lr/mix/on\")\n```\n\nResponse:\n\n```python\nOscMessage(address='/lr/mix/on', arguments=[0])\n```\n\nWe can use the `put` coroutine to apply changes to the XAir device. In this example, we unmute the main L/R channel:\n\n```python\nawait xair.put(\"/lr/mix/on\", [1])\n```\n\nIf we now send a `get` request to the main L/R mix, we see that it is unmuted:\n\n```python\nawait xair.get(\"/lr/mix/on\")\n```\n\nResponse:\n\n```python\nOscMessage(address='/lr/mix/on', arguments=[1])\n```\n\n### Monitoring Updates\n\nIn this example, the XAir `_cache` attribute currently looks like this:\n\n```python\n{\n    '/status': OscMessage(address='/status', arguments=['active', '192.168.86.128', 'XR18-5E-91-5A']),\n    '/lr/mix/on': OscMessage(address='/lr/mix/on', arguments=[0])\n}\n```\n\nIf you unmute the main L/R channel using X-AIR-Edit, or some other client, and then observe the `_cache` attribute again, it will look like this:\n\n```python\n{\n    '/status': OscMessage(address='/status', arguments=['active', '192.168.86.128', 'XR18-5E-91-5A']),\n    '/lr/mix/on': OscMessage(address='/lr/mix/on', arguments=[1])\n}\n```\n\nUsing `get` on an OSC address not in the cache will fetch the value from the XAir device and update the cache:\n\n```python\nawait xair.get('/lr/mix/fader')\n```\n\nNow, the `_cache` will look like this:\n\n```python\n{\n    '/status': OscMessage(address='/status', arguments=['active', '192.168.86.128', 'XR18-5E-91-5A']),\n    '/lr/mix/on': OscMessage(address='/lr/mix/on', arguments=[1]),\n    '/lr/mix/fader': OscMessage(address='/lr/mix/fader', arguments=[0.5747800469398499])\n}\n```\n\n### Subscribing to Updates\n\nUse the `subscribe` method to get published messages:\n\n```python\nwith xair.subscribe() as queue:\n    while True:\n        message = await queue.get()\n        print(f\"Got a new OSC message: {message}\")\n```\n\n### Subscribing to Meters\n\nEnable a meter on an `XAir` instance, and then meter updates will be published to the same subscription queue as described in the previous section:\n\n```python\nxair.enable_meter(2)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shadanan/pyxair", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyxair", "package_url": "https://pypi.org/project/pyxair/", "platform": "", "project_url": "https://pypi.org/project/pyxair/", "project_urls": {"Homepage": "https://github.com/shadanan/pyxair"}, "release_url": "https://pypi.org/project/pyxair/0.0.1/", "requires_dist": ["python-osc"], "requires_python": ">=3.7", "summary": "A library for interacting with Behringer XAir devices.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyxair</h1>\n<p>Python library for interacting with Behringer XAir devices.</p>\n<h2>Usage</h2>\n<h3>Detect XAir Devices</h3>\n<pre><span class=\"n\">xinfo</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">pyxair</span><span class=\"o\">.</span><span class=\"n\">auto_detect</span><span class=\"p\">()</span>\n</pre>\n<h3>Create an XAir Client</h3>\n<p><code>XAir</code> is a client that subscribes to events from an XAir device and caches the messages.</p>\n<pre><span class=\"n\">xair</span> <span class=\"o\">=</span> <span class=\"n\">pyxair</span><span class=\"o\">.</span><span class=\"n\">XAir</span><span class=\"p\">(</span><span class=\"n\">xinfo</span><span class=\"p\">)</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">xair</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">())</span>\n</pre>\n<h3>Get &amp; Put</h3>\n<p>Here's an example using the <code>get</code> coroutine to retrieve the status. This is achieved by sending an OSC message to the <code>/status</code> address:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">xair</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/status\"</span><span class=\"p\">)</span>\n</pre>\n<p>Response:</p>\n<pre><span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/status'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'192.168.86.128'</span><span class=\"p\">,</span> <span class=\"s1\">'XR18-5E-91-5A'</span><span class=\"p\">])</span>\n</pre>\n<p>This is am example using the <code>get</code> coroutine to retrieve the main L/R mix:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">xair</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/lr/mix/on\"</span><span class=\"p\">)</span>\n</pre>\n<p>Response:</p>\n<pre><span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/lr/mix/on'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n<p>We can use the <code>put</code> coroutine to apply changes to the XAir device. In this example, we unmute the main L/R channel:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">xair</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s2\">\"/lr/mix/on\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n<p>If we now send a <code>get</code> request to the main L/R mix, we see that it is unmuted:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">xair</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/lr/mix/on\"</span><span class=\"p\">)</span>\n</pre>\n<p>Response:</p>\n<pre><span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/lr/mix/on'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n<h3>Monitoring Updates</h3>\n<p>In this example, the XAir <code>_cache</code> attribute currently looks like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'/status'</span><span class=\"p\">:</span> <span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/status'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'192.168.86.128'</span><span class=\"p\">,</span> <span class=\"s1\">'XR18-5E-91-5A'</span><span class=\"p\">]),</span>\n    <span class=\"s1\">'/lr/mix/on'</span><span class=\"p\">:</span> <span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/lr/mix/on'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If you unmute the main L/R channel using X-AIR-Edit, or some other client, and then observe the <code>_cache</code> attribute again, it will look like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'/status'</span><span class=\"p\">:</span> <span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/status'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'192.168.86.128'</span><span class=\"p\">,</span> <span class=\"s1\">'XR18-5E-91-5A'</span><span class=\"p\">]),</span>\n    <span class=\"s1\">'/lr/mix/on'</span><span class=\"p\">:</span> <span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/lr/mix/on'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Using <code>get</code> on an OSC address not in the cache will fetch the value from the XAir device and update the cache:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">xair</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/lr/mix/fader'</span><span class=\"p\">)</span>\n</pre>\n<p>Now, the <code>_cache</code> will look like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'/status'</span><span class=\"p\">:</span> <span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/status'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"s1\">'192.168.86.128'</span><span class=\"p\">,</span> <span class=\"s1\">'XR18-5E-91-5A'</span><span class=\"p\">]),</span>\n    <span class=\"s1\">'/lr/mix/on'</span><span class=\"p\">:</span> <span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/lr/mix/on'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span>\n    <span class=\"s1\">'/lr/mix/fader'</span><span class=\"p\">:</span> <span class=\"n\">OscMessage</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'/lr/mix/fader'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.5747800469398499</span><span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Subscribing to Updates</h3>\n<p>Use the <code>subscribe</code> method to get published messages:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">xair</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Got a new OSC message: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Subscribing to Meters</h3>\n<p>Enable a meter on an <code>XAir</code> instance, and then meter updates will be published to the same subscription queue as described in the previous section:</p>\n<pre><span class=\"n\">xair</span><span class=\"o\">.</span><span class=\"n\">enable_meter</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7178213, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "95d208fae2ce08620b8272febe92686f", "sha256": "a5d42cf5dcd6cc131ec963c39b796c6f946987fee2c613066d56816d87ba9c2f"}, "downloads": -1, "filename": "pyxair-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95d208fae2ce08620b8272febe92686f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6742, "upload_time": "2020-05-06T07:17:24", "upload_time_iso_8601": "2020-05-06T07:17:24.114059Z", "url": "https://files.pythonhosted.org/packages/d1/2a/6a867b7d3b890d31f831b2cf5ccd4b7460c9d864b9502f1196f609764315/pyxair-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37aa158d738482095cccaf797789ba92", "sha256": "81d5037c98055314432dac5df0f109326467fbb30cc174bbed27238c1c18de12"}, "downloads": -1, "filename": "pyxair-0.0.1.tar.gz", "has_sig": false, "md5_digest": "37aa158d738482095cccaf797789ba92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4588, "upload_time": "2020-05-06T07:17:26", "upload_time_iso_8601": "2020-05-06T07:17:26.115715Z", "url": "https://files.pythonhosted.org/packages/e8/60/926826b0d9f04d821210094b9926ce285141077ceef3728bf5ccef0bc697/pyxair-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "95d208fae2ce08620b8272febe92686f", "sha256": "a5d42cf5dcd6cc131ec963c39b796c6f946987fee2c613066d56816d87ba9c2f"}, "downloads": -1, "filename": "pyxair-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95d208fae2ce08620b8272febe92686f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6742, "upload_time": "2020-05-06T07:17:24", "upload_time_iso_8601": "2020-05-06T07:17:24.114059Z", "url": "https://files.pythonhosted.org/packages/d1/2a/6a867b7d3b890d31f831b2cf5ccd4b7460c9d864b9502f1196f609764315/pyxair-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37aa158d738482095cccaf797789ba92", "sha256": "81d5037c98055314432dac5df0f109326467fbb30cc174bbed27238c1c18de12"}, "downloads": -1, "filename": "pyxair-0.0.1.tar.gz", "has_sig": false, "md5_digest": "37aa158d738482095cccaf797789ba92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4588, "upload_time": "2020-05-06T07:17:26", "upload_time_iso_8601": "2020-05-06T07:17:26.115715Z", "url": "https://files.pythonhosted.org/packages/e8/60/926826b0d9f04d821210094b9926ce285141077ceef3728bf5ccef0bc697/pyxair-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:05 2020"}