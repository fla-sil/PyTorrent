{"info": {"author": "Peter Polidoro", "author_email": "polidorop@janelia.hhmi.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Build Tools"], "description": "modular_server_python\n=====================\n\nThis Python package creates a class named ModularServer, which contains\nan instance of serial_device2.SerialDevice and adds methods to it,\nlike auto discovery of available modular devices in Linux, Windows, and\nMac OS X. This class automatically creates methods from available\nfunctions reported by the modular device when it is running the\nappropriate firmware.\n\nAuthors::\n\n    Peter Polidoro <polidorop@janelia.hhmi.org>\n\nLicense::\n\n    BSD\n\nExample Usage::\n\n    from modular_server import ModularServer\n    dev = ModularDevice() # Might automatically finds device if one available\n    # if it is not found automatically, specify port directly\n    dev = ModularDevice(port='/dev/ttyACM0') # Linux specific port\n    dev = ModularDevice(port='/dev/tty.usbmodem262471') # Mac OS X specific port\n    dev = ModularDevice(port='COM3') # Windows specific port\n    dev.get_device_info()\n    dev.get_methods()\n    from modular_device import ModularDevices\n    devs = ModularDevices()  # Might automatically find all available devices\n    # if they are not found automatically, specify ports to use\n    devs = ModularDevices(use_ports=['/dev/ttyUSB0','/dev/ttyUSB1']) # Linux\n    devs = ModularDevices(use_ports=['/dev/tty.usbmodem262471','/dev/tty.usbmodem262472']) # Mac OS X\n    devs = ModularDevices(use_ports=['COM3','COM4']) # Windows\n    devs.items()\n    dev = devs[name][serial_number]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/janelia-pypi/modular_server_python", "keywords": "modular serial arduino device server", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "modular_server", "package_url": "https://pypi.org/project/modular_server/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/modular_server/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/janelia-pypi/modular_server_python"}, "release_url": "https://pypi.org/project/modular_server/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Interface to modular devices with auto creation of class methods and auto discovery of available modular devices in Linux, Windows, and Mac OS X", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This Python package creates a class named ModularServer, which contains\nan instance of serial_device2.SerialDevice and adds methods to it,\nlike auto discovery of available modular devices in Linux, Windows, and\nMac OS X. This class automatically creates methods from available\nfunctions reported by the modular device when it is running the\nappropriate firmware.</p>\n<p>Authors:</p>\n<pre>Peter Polidoro &lt;polidorop@janelia.hhmi.org&gt;\n</pre>\n<p>License:</p>\n<pre>BSD\n</pre>\n<p>Example Usage:</p>\n<pre>from modular_server import ModularServer\ndev = ModularDevice() # Might automatically finds device if one available\n# if it is not found automatically, specify port directly\ndev = ModularDevice(port='/dev/ttyACM0') # Linux specific port\ndev = ModularDevice(port='/dev/tty.usbmodem262471') # Mac OS X specific port\ndev = ModularDevice(port='COM3') # Windows specific port\ndev.get_device_info()\ndev.get_methods()\nfrom modular_device import ModularDevices\ndevs = ModularDevices()  # Might automatically find all available devices\n# if they are not found automatically, specify ports to use\ndevs = ModularDevices(use_ports=['/dev/ttyUSB0','/dev/ttyUSB1']) # Linux\ndevs = ModularDevices(use_ports=['/dev/tty.usbmodem262471','/dev/tty.usbmodem262472']) # Mac OS X\ndevs = ModularDevices(use_ports=['COM3','COM4']) # Windows\ndevs.items()\ndev = devs[name][serial_number]\n</pre>\n\n          </div>"}, "last_serial": 1856314, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 00:52:44 2020"}