{"info": {"author": "Oliver Szabo", "author_email": "oleewere@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# filecollector\n\n![build](https://github.com/oleewere/filecollector/workflows/build/badge.svg)\n[![PyPI version](https://badge.fury.io/py/filecollector.svg)](https://badge.fury.io/py/filecollector)\n\nService for collecting and processing files (with hooks)\n\n## Features\n\n- collect files and compress them (on command)\n- anonymization\n- run custom scripts on output file / processed files\n- start/stop simple fileserver (at collect output location)\n- stream collected files to fluentd (line by line)\n\n## Requirements\n\n- python 2.7+ / python 3.5+\n- pip\n\n## Installation\n\n```bash\npip install filecollector\n```\n\n## Usage\n\nIt has 2 main components right now: collector and server. Collector is responsible to collect/anonymize the files and run hook scripts on those. Server is only a browser for the collected files.\n\nAt the start you need to create a `yaml` configuration file for the collector.\nOnly this configuration is required as an input for `filecollector`.\n\n#### Start the collector\n\n```\nfilecollector collector start --config filecollector.yaml -p /my/pid/dir\n```\n\n\n#### Start the server\n\n```\nfilecollector server start --config filecollector.yaml -p /my/pid/dir\n```\n\n### Configration\n\n### Simple configuration example\n\n```yaml\nserver:\n    port: 1999\n    folder: \"../example/files\" \ncollector:\n    files:\n    - path: \"example/example*.txt\"\n      label: \"example\"\n    rules:\n    - pattern:  \\d{4}[^\\w]\\d{4}[^\\w]\\d{4}[^\\w]\\d{4}\n      replacement: \"[REDACTED]\"\n    processFileScript: example/scripts/process_file.sh\n    compress: true\n    useFullPath: true\n    outputScript: example/scripts/output_file.sh\n    processFilesFolderScript: example/scripts/tmp_folder.sh\n    deleteProcessedTemplateFiles: true\n    outputLocation: \"example/files\"\n```\n\nRunning simple example:\n\n```bash\n# start collector \nfilecollector collector start --config example/filecollector.yaml -p /my/pid/dir\n# start server for browsing\nfilecollector server start --config example/filecollector.yaml -p /my/pid/dir\n```\n\n### Fluentd configuration example\n\n```yaml\ncollector:\n    files:\n    - path: \"example/example*.txt\"\n      label: \"txt\"\n    rules:\n    - pattern:  \\d{4}[^\\w]\\d{4}[^\\w]\\d{4}[^\\w]\\d{4}\n      replacement: \"[REDACTED]\"\n    compress: false\n    useFullPath: true\n    deleteProcessedTempFilesOneByOne: true\n    outputLocation: \"example/files\"\n    processor:\n      host: \"localhost\"\n      port: 24224\n      tag: example\n```\n\nFluentd configuration:\n\n```\n<source>\n  @type forward\n  port 24224\n  bind 0.0.0.0\n</source>\n\n<match example.**>\n   @type stdout\n</match>\n```\n\nRunning fluentd example:\n\n```bash\n# start fluentd \nfluentd --config example/fluentd.conf\n# start collector \nfilecollector collector start --config example/fluentd-filecollector.yaml -p /my/pid/dir\n```\n\n### Configuration options\n\n#### `server`\n\nThe server block, it contains configurations related with the filecollector server component.\n\n#### `server.port`\n\nPort that will be used by the filecollector server.\n\n#### `server.folder`\n\nThe folder that is server by the file server.\n\n#### `collector`\n\nThe collector block, it contains configurations related with the filecollector collector component.\n\n#### `collector.files`\n\nList of files (with `name` and `label`) that needs to be collected. The `name` options can be used as wildcards.\n\n#### `collector.rules`\n\nList of anonymization rules that can be run against the file inputs. (`pattern` field for matching, `replacement` for the replacement on match)\n\n#### `collector.compress`\n\nAt the end of the filecollection, the output folder is compressed. The default value is `true`.\n\n#### `collector.compressFormat`\n\nCompression format, possible values: `zip`, `tar`, `gztar`, `bztar`. Default value is `zip`.\n\n#### `collector.outputLocation`\n\nOutput location (directory), where the processed file(s) will be stored.\n\n#### `collector.useFullPath`\n\nUse full path for processed files (inside `outputLocation`). Can be useful if because of the wildcard patterns, the base file name are the same for different files from different folders. Default value is `true`.\n\n#### `collector.processFileScript`\n\nScript that runs agains 1 processed file. It gets the filename and the label for a processed file.\n\n#### `collector.processFilesFolderScript`\n\nScript that runs once after the files are collected. It gets the folder name (where the files are processed) as an input.\n\n#### `collector.preProcessScript`\n\nScript that runs before the files are collected. It gets the folder name (where the files are processed) as an input.\n\n#### `collector.outputScript`\n\nScript that runs once with the compressed output file name as an input.\n\n#### `collector.deleteProcessedTempFiles`\n\nAfter collection of the files + compression, the collected files are deleted. Can be useful to disable this behaviour `compress` option is disabled. Default value is `true`.\n\n#### `collector.deleteProcessedTempFilesOneByOne`\n\nIf this option is set, files are deleted right after processed (one at a time). That can be useful if compression is disabled, and you would like to stream large files to fluentd. Default value is `false`.\n\n#### `collector.fluentProcessor`\n\nFluentd related section for processing files line by line - streaming data by fluentd forward protocol.\n\n#### `collector.fluentProcessor.host`\n\nFluentd host (for forward protocol). Default value: `localhost`.\n\n#### `collector.fluentProcessor.port`\n\nFluentd port (for forward protocol). Default value: `24224`.\n\n#### `collector.fluentProcessor.tag`\n\nFluentd tag for streaming lines. The generated tag for forward protocol is `<collector.fluentProcessor.tag>.<file label for monitored file>`.\n\n#### `collector.fluentProcessor.messageField`\n\nThe processed lines are mapped for this field before data has been sent to Fluentd. Default value: `message`.\n\n#### `collector.fluentProcessor.includeTime`\n\nIf this is enabled, current time is included in the fluentd data event. (as `time` field). Default value: `false`.\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oleewere/filecollector", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "filecollector", "package_url": "https://pypi.org/project/filecollector/", "platform": "", "project_url": "https://pypi.org/project/filecollector/", "project_urls": {"Homepage": "https://github.com/oleewere/filecollector"}, "release_url": "https://pypi.org/project/filecollector/0.1.0/", "requires_dist": ["PyYAML (>=5.3.1)", "pid (>=3.0.3)", "fluent-logger (>=0.9.6)"], "requires_python": ">=2.7", "summary": "Simple file collector - compress/serve/send/anonymizie files", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>filecollector</h1>\n<p><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a42eaf90007c711e7e26e0a20c6b99fa0e32db5e/68747470733a2f2f6769746875622e636f6d2f6f6c6565776572652f66696c65636f6c6c6563746f722f776f726b666c6f77732f6275696c642f62616467652e737667\">\n<a href=\"https://badge.fury.io/py/filecollector\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ececa71c3c2b5882ffcf742f3b6c9d08e3168922/68747470733a2f2f62616467652e667572792e696f2f70792f66696c65636f6c6c6563746f722e737667\"></a></p>\n<p>Service for collecting and processing files (with hooks)</p>\n<h2>Features</h2>\n<ul>\n<li>collect files and compress them (on command)</li>\n<li>anonymization</li>\n<li>run custom scripts on output file / processed files</li>\n<li>start/stop simple fileserver (at collect output location)</li>\n<li>stream collected files to fluentd (line by line)</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>python 2.7+ / python 3.5+</li>\n<li>pip</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install filecollector\n</pre>\n<h2>Usage</h2>\n<p>It has 2 main components right now: collector and server. Collector is responsible to collect/anonymize the files and run hook scripts on those. Server is only a browser for the collected files.</p>\n<p>At the start you need to create a <code>yaml</code> configuration file for the collector.\nOnly this configuration is required as an input for <code>filecollector</code>.</p>\n<h4>Start the collector</h4>\n<pre><code>filecollector collector start --config filecollector.yaml -p /my/pid/dir\n</code></pre>\n<h4>Start the server</h4>\n<pre><code>filecollector server start --config filecollector.yaml -p /my/pid/dir\n</code></pre>\n<h3>Configration</h3>\n<h3>Simple configuration example</h3>\n<pre><span class=\"nt\">server</span><span class=\"p\">:</span>\n    <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1999</span>\n    <span class=\"nt\">folder</span><span class=\"p\">:</span> <span class=\"s\">\"../example/files\"</span> \n<span class=\"nt\">collector</span><span class=\"p\">:</span>\n    <span class=\"nt\">files</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">\"example/example*.txt\"</span>\n      <span class=\"nt\">label</span><span class=\"p\">:</span> <span class=\"s\">\"example\"</span>\n    <span class=\"nt\">rules</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">pattern</span><span class=\"p\">:</span>  <span class=\"l l-Scalar l-Scalar-Plain\">\\d{4}[^\\w]\\d{4}[^\\w]\\d{4}[^\\w]\\d{4}</span>\n      <span class=\"nt\">replacement</span><span class=\"p\">:</span> <span class=\"s\">\"[REDACTED]\"</span>\n    <span class=\"nt\">processFileScript</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example/scripts/process_file.sh</span>\n    <span class=\"nt\">compress</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">useFullPath</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">outputScript</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example/scripts/output_file.sh</span>\n    <span class=\"nt\">processFilesFolderScript</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example/scripts/tmp_folder.sh</span>\n    <span class=\"nt\">deleteProcessedTemplateFiles</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">outputLocation</span><span class=\"p\">:</span> <span class=\"s\">\"example/files\"</span>\n</pre>\n<p>Running simple example:</p>\n<pre><span class=\"c1\"># start collector </span>\nfilecollector collector start --config example/filecollector.yaml -p /my/pid/dir\n<span class=\"c1\"># start server for browsing</span>\nfilecollector server start --config example/filecollector.yaml -p /my/pid/dir\n</pre>\n<h3>Fluentd configuration example</h3>\n<pre><span class=\"nt\">collector</span><span class=\"p\">:</span>\n    <span class=\"nt\">files</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">\"example/example*.txt\"</span>\n      <span class=\"nt\">label</span><span class=\"p\">:</span> <span class=\"s\">\"txt\"</span>\n    <span class=\"nt\">rules</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">pattern</span><span class=\"p\">:</span>  <span class=\"l l-Scalar l-Scalar-Plain\">\\d{4}[^\\w]\\d{4}[^\\w]\\d{4}[^\\w]\\d{4}</span>\n      <span class=\"nt\">replacement</span><span class=\"p\">:</span> <span class=\"s\">\"[REDACTED]\"</span>\n    <span class=\"nt\">compress</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n    <span class=\"nt\">useFullPath</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">deleteProcessedTempFilesOneByOne</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">outputLocation</span><span class=\"p\">:</span> <span class=\"s\">\"example/files\"</span>\n    <span class=\"nt\">processor</span><span class=\"p\">:</span>\n      <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"s\">\"localhost\"</span>\n      <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">24224</span>\n      <span class=\"nt\">tag</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n</pre>\n<p>Fluentd configuration:</p>\n<pre><code>&lt;source&gt;\n  @type forward\n  port 24224\n  bind 0.0.0.0\n&lt;/source&gt;\n\n&lt;match example.**&gt;\n   @type stdout\n&lt;/match&gt;\n</code></pre>\n<p>Running fluentd example:</p>\n<pre><span class=\"c1\"># start fluentd </span>\nfluentd --config example/fluentd.conf\n<span class=\"c1\"># start collector </span>\nfilecollector collector start --config example/fluentd-filecollector.yaml -p /my/pid/dir\n</pre>\n<h3>Configuration options</h3>\n<h4><code>server</code></h4>\n<p>The server block, it contains configurations related with the filecollector server component.</p>\n<h4><code>server.port</code></h4>\n<p>Port that will be used by the filecollector server.</p>\n<h4><code>server.folder</code></h4>\n<p>The folder that is server by the file server.</p>\n<h4><code>collector</code></h4>\n<p>The collector block, it contains configurations related with the filecollector collector component.</p>\n<h4><code>collector.files</code></h4>\n<p>List of files (with <code>name</code> and <code>label</code>) that needs to be collected. The <code>name</code> options can be used as wildcards.</p>\n<h4><code>collector.rules</code></h4>\n<p>List of anonymization rules that can be run against the file inputs. (<code>pattern</code> field for matching, <code>replacement</code> for the replacement on match)</p>\n<h4><code>collector.compress</code></h4>\n<p>At the end of the filecollection, the output folder is compressed. The default value is <code>true</code>.</p>\n<h4><code>collector.compressFormat</code></h4>\n<p>Compression format, possible values: <code>zip</code>, <code>tar</code>, <code>gztar</code>, <code>bztar</code>. Default value is <code>zip</code>.</p>\n<h4><code>collector.outputLocation</code></h4>\n<p>Output location (directory), where the processed file(s) will be stored.</p>\n<h4><code>collector.useFullPath</code></h4>\n<p>Use full path for processed files (inside <code>outputLocation</code>). Can be useful if because of the wildcard patterns, the base file name are the same for different files from different folders. Default value is <code>true</code>.</p>\n<h4><code>collector.processFileScript</code></h4>\n<p>Script that runs agains 1 processed file. It gets the filename and the label for a processed file.</p>\n<h4><code>collector.processFilesFolderScript</code></h4>\n<p>Script that runs once after the files are collected. It gets the folder name (where the files are processed) as an input.</p>\n<h4><code>collector.preProcessScript</code></h4>\n<p>Script that runs before the files are collected. It gets the folder name (where the files are processed) as an input.</p>\n<h4><code>collector.outputScript</code></h4>\n<p>Script that runs once with the compressed output file name as an input.</p>\n<h4><code>collector.deleteProcessedTempFiles</code></h4>\n<p>After collection of the files + compression, the collected files are deleted. Can be useful to disable this behaviour <code>compress</code> option is disabled. Default value is <code>true</code>.</p>\n<h4><code>collector.deleteProcessedTempFilesOneByOne</code></h4>\n<p>If this option is set, files are deleted right after processed (one at a time). That can be useful if compression is disabled, and you would like to stream large files to fluentd. Default value is <code>false</code>.</p>\n<h4><code>collector.fluentProcessor</code></h4>\n<p>Fluentd related section for processing files line by line - streaming data by fluentd forward protocol.</p>\n<h4><code>collector.fluentProcessor.host</code></h4>\n<p>Fluentd host (for forward protocol). Default value: <code>localhost</code>.</p>\n<h4><code>collector.fluentProcessor.port</code></h4>\n<p>Fluentd port (for forward protocol). Default value: <code>24224</code>.</p>\n<h4><code>collector.fluentProcessor.tag</code></h4>\n<p>Fluentd tag for streaming lines. The generated tag for forward protocol is <code>&lt;collector.fluentProcessor.tag&gt;.&lt;file label for monitored file&gt;</code>.</p>\n<h4><code>collector.fluentProcessor.messageField</code></h4>\n<p>The processed lines are mapped for this field before data has been sent to Fluentd. Default value: <code>message</code>.</p>\n<h4><code>collector.fluentProcessor.includeTime</code></h4>\n<p>If this is enabled, current time is included in the fluentd data event. (as <code>time</code> field). Default value: <code>false</code>.</p>\n<h2>Contributing</h2>\n<ol>\n<li>Fork it</li>\n<li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>\n<li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li>\n<li>Push to the branch (<code>git push origin my-new-feature</code>)</li>\n<li>Create new Pull Request</li>\n</ol>\n\n          </div>"}, "last_serial": 7147314, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "435deeff4b06e627a74b9865291bfcf9", "sha256": "dd75912b88c17f4832b58d3ec15a67cfec67e51b6d61b62a90b56264171d9c6f"}, "downloads": -1, "filename": "filecollector-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "435deeff4b06e627a74b9865291bfcf9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 12281, "upload_time": "2020-04-27T13:12:56", "upload_time_iso_8601": "2020-04-27T13:12:56.852916Z", "url": "https://files.pythonhosted.org/packages/e8/3f/b7161e3b36e4bc88745138ad802ad7dcb9de192093b1f956284b7b649089/filecollector-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db0f62b78aa4fc3f5759e1acf3255536", "sha256": "db8fe4ffb4cb954fda386bae64fda6437d1fb6fe8cad10e6fedd1a59bd63ebd1"}, "downloads": -1, "filename": "filecollector-0.0.1.tar.gz", "has_sig": false, "md5_digest": "db0f62b78aa4fc3f5759e1acf3255536", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 10700, "upload_time": "2020-04-27T13:12:58", "upload_time_iso_8601": "2020-04-27T13:12:58.731253Z", "url": "https://files.pythonhosted.org/packages/f4/5a/cf012700e6babf3a71d3e906e93c3dd60d6e4a43b974f4f64e853a43925d/filecollector-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "32c58b2c0144dbb8d1150d5fe2a7f593", "sha256": "5879ba834dfb12b2a899fc9d93932ae696095f4afbf4b004418fd0960b43fbb0"}, "downloads": -1, "filename": "filecollector-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32c58b2c0144dbb8d1150d5fe2a7f593", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 12388, "upload_time": "2020-04-27T15:10:34", "upload_time_iso_8601": "2020-04-27T15:10:34.938080Z", "url": "https://files.pythonhosted.org/packages/13/05/fd427c69e70bd9fa665dd6a13ee81d0d05d56af1fbe9492d4de08f6ad511/filecollector-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a997d6645f7e339034ef42fab5195ab", "sha256": "4a3247932a99036c66ec6e80298684f634a8abbf8678bb59981107033ab5f343"}, "downloads": -1, "filename": "filecollector-0.0.3.tar.gz", "has_sig": false, "md5_digest": "8a997d6645f7e339034ef42fab5195ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 11293, "upload_time": "2020-04-27T15:10:35", "upload_time_iso_8601": "2020-04-27T15:10:35.815659Z", "url": "https://files.pythonhosted.org/packages/4e/3b/625f65945b1523ded4107c92a6f6fe6edd5f7cd6b992c6901d09eade45c0/filecollector-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d535a9815b1733e4e35d4f83dec5bf1d", "sha256": "92d435ae79687fbbb2d9946589030fcd8622d3ef144af1310fa719dc77346b56"}, "downloads": -1, "filename": "filecollector-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d535a9815b1733e4e35d4f83dec5bf1d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 14451, "upload_time": "2020-05-01T19:33:46", "upload_time_iso_8601": "2020-05-01T19:33:46.346440Z", "url": "https://files.pythonhosted.org/packages/29/be/46ae02f887e90a9afd6ecd889f08366deeb1406009f5e523c7870ce9ce3c/filecollector-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18f6f7c7170a40458d75337e7842e946", "sha256": "777e7a53f294774735d2b06bf9e3ece8d6e94044ca402e2389b75ac730553132"}, "downloads": -1, "filename": "filecollector-0.1.0.tar.gz", "has_sig": false, "md5_digest": "18f6f7c7170a40458d75337e7842e946", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13864, "upload_time": "2020-05-01T19:33:47", "upload_time_iso_8601": "2020-05-01T19:33:47.174770Z", "url": "https://files.pythonhosted.org/packages/50/a1/3046d72aa656f3f794e7dd68286aa4d1f4fb3ab512f4a7d364e6f5e3f411/filecollector-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d535a9815b1733e4e35d4f83dec5bf1d", "sha256": "92d435ae79687fbbb2d9946589030fcd8622d3ef144af1310fa719dc77346b56"}, "downloads": -1, "filename": "filecollector-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d535a9815b1733e4e35d4f83dec5bf1d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 14451, "upload_time": "2020-05-01T19:33:46", "upload_time_iso_8601": "2020-05-01T19:33:46.346440Z", "url": "https://files.pythonhosted.org/packages/29/be/46ae02f887e90a9afd6ecd889f08366deeb1406009f5e523c7870ce9ce3c/filecollector-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18f6f7c7170a40458d75337e7842e946", "sha256": "777e7a53f294774735d2b06bf9e3ece8d6e94044ca402e2389b75ac730553132"}, "downloads": -1, "filename": "filecollector-0.1.0.tar.gz", "has_sig": false, "md5_digest": "18f6f7c7170a40458d75337e7842e946", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13864, "upload_time": "2020-05-01T19:33:47", "upload_time_iso_8601": "2020-05-01T19:33:47.174770Z", "url": "https://files.pythonhosted.org/packages/50/a1/3046d72aa656f3f794e7dd68286aa4d1f4fb3ab512f4a7d364e6f5e3f411/filecollector-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:37 2020"}