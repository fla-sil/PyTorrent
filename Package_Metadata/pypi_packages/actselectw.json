{"info": {"author": "Rita Kurban", "author_email": "rita@minerva.kgi.edu", "bugtrack_url": null, "classifiers": [], "description": "Weighted Activity Selection\n=====================\n\nDescription:\n-------------\nThe weighted activity selection problem is a combinatorial optimization problem which calculates the highest weight one can get from performing non-conflicting activities within a given time frame. It also returns a list of respective activities.\nThe algorithm uses dynamic programming to break up the problem into a series of overlapping subproblems and build up solutions to larger and larger subproblem.\n\n**Optimal substructure**\n\nThe algorithm calculates the maximum weight for activities 1 ... j where j is some activity from the set. If the algorithm selects activity j, it should add the activity's weight to the optimal solution to the problem which consists of remaining compatible activities calculated in one of the previous iterations.\n\n**Overlapping subproblems**\n\nDifferent activities can have the same set of compatible jobs which means that by memoizing the solutions to such subproblems we can dramatically decrease the time complexity.\n\n**Complexity**\n\nA brute-force recursive solution to this problem is correct but spectacularly slow\nbecause of redundant sub-problems discussed above. As a result, it has exponential time complexity. The dynamic programming solution has a complexity O(n^2). This algorithm uses binary search to find the previous activity which decreases the complexity to O(nlogn).\n\nIn this implementation, the algorithm first sorts the activities by their finish time, which requires O(nlogn). For each j, it finds the previous compatible activity using binary search O(logn). As we have to repeat this procedure n times, it results in the complexity of O(nlogn). Constructing a list of selected activities also requires O(nlogn) in the worst case as the algorithm loops through the reversed list (n) and searches for the previous activity (logn). The resulting complexity is O(nlogn) + O(nlogn) + O(nlogn) --> O(nlogn).\n\nExample implementation:\n-----------------------------\nSuppose you are a CEO in a small company and you need to attend a set of meetings to raise funds for a new project. Unfortunately, you can only attend one meeting at a time and some of them are overlapping. Each meeting has start and end times and a weight associated with it that corresponds to the amount of money you will raise if you attend it. The algorithm finds the highest profit you can get in such a situation and prints out the list of meetings you should attend.\n\nHere's an example case:\n\n|Names|a|b|c|d|\n|----------|--------|----------|---------|----------|\n|   Weight|   $300|   $250|   $400|   $450|\n|Start/End |9:00-13:00|11:00-14:00:|16:00-18:00|15:00-21:00|\n\nIn this example, activities a, b and and c, d overlap. That's why the algorithm will choose 2 activities which generate the highest profit - a and d - which will give you a total of $750.\n\n**The input** of this algorithm is a list of activities with their names, start and finish times, and weights:   \n\nmeetings = [activity(\"a\", 9, 13, 300), activity(\"b\", 11, 14, 250), activity(\"c\", 16, 18, 400), activity(\"d\",15, 21, 450)]   \n\nTo **run** the algorithm, you should simply call the function \"actselectw\":  \n\nprint actselectw(meetings)  \n\n**The output** is the maximum weight possible for this set of activities and the activities which have been selected by the algorithm.\n\nMax weight is 750. You should pick activities ['a', 'd'].  \n\nA link to the GitHub repository: https://github.com/ritakurban/actselectw", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ritakurban/actselectw.git", "keywords": "activity,selection,scheduling", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "actselectw", "package_url": "https://pypi.org/project/actselectw/", "platform": "", "project_url": "https://pypi.org/project/actselectw/", "project_urls": {"Homepage": "https://github.com/ritakurban/actselectw.git"}, "release_url": "https://pypi.org/project/actselectw/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "An algorithm that solves weighted activity selection problem using dynamic programming.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Weighted Activity Selection<br>=====================<br><br>Description:<br>-------------<br>The weighted activity selection problem is a combinatorial optimization problem which calculates the highest weight one can get from performing non-conflicting activities within a given time frame. It also returns a list of respective activities.<br>The algorithm uses dynamic programming to break up the problem into a series of overlapping subproblems and build up solutions to larger and larger subproblem.<br><br>**Optimal substructure**<br><br>The algorithm calculates the maximum weight for activities 1 ... j where j is some activity from the set. If the algorithm selects activity j, it should add the activity's weight to the optimal solution to the problem which consists of remaining compatible activities calculated in one of the previous iterations.<br><br>**Overlapping subproblems**<br><br>Different activities can have the same set of compatible jobs which means that by memoizing the solutions to such subproblems we can dramatically decrease the time complexity.<br><br>**Complexity**<br><br>A brute-force recursive solution to this problem is correct but spectacularly slow<br>because of redundant sub-problems discussed above. As a result, it has exponential time complexity. The dynamic programming solution has a complexity O(n^2). This algorithm uses binary search to find the previous activity which decreases the complexity to O(nlogn).<br><br>In this implementation, the algorithm first sorts the activities by their finish time, which requires O(nlogn). For each j, it finds the previous compatible activity using binary search O(logn). As we have to repeat this procedure n times, it results in the complexity of O(nlogn). Constructing a list of selected activities also requires O(nlogn) in the worst case as the algorithm loops through the reversed list (n) and searches for the previous activity (logn). The resulting complexity is O(nlogn) + O(nlogn) + O(nlogn) --&gt; O(nlogn).<br><br>Example implementation:<br>-----------------------------<br>Suppose you are a CEO in a small company and you need to attend a set of meetings to raise funds for a new project. Unfortunately, you can only attend one meeting at a time and some of them are overlapping. Each meeting has start and end times and a weight associated with it that corresponds to the amount of money you will raise if you attend it. The algorithm finds the highest profit you can get in such a situation and prints out the list of meetings you should attend.<br><br>Here's an example case:<br><br>|Names|a|b|c|d|<br>|----------|--------|----------|---------|----------|<br>|   Weight|   $300|   $250|   $400|   $450|<br>|Start/End |9:00-13:00|11:00-14:00:|16:00-18:00|15:00-21:00|<br><br>In this example, activities a, b and and c, d overlap. That's why the algorithm will choose 2 activities which generate the highest profit - a and d - which will give you a total of $750.<br><br>**The input** of this algorithm is a list of activities with their names, start and finish times, and weights:   <br><br>meetings = [activity(\"a\", 9, 13, 300), activity(\"b\", 11, 14, 250), activity(\"c\", 16, 18, 400), activity(\"d\",15, 21, 450)]   <br><br>To **run** the algorithm, you should simply call the function \"actselectw\":  <br><br>print actselectw(meetings)  <br><br>**The output** is the maximum weight possible for this set of activities and the activities which have been selected by the algorithm.<br><br>Max weight is 750. You should pick activities ['a', 'd'].  <br><br>A link to the GitHub repository: https://github.com/ritakurban/actselectw\n          </div>"}, "last_serial": 3419701, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "db8eea545619e319c0bcc14dd8099d79", "sha256": "7d480e883f1d6ed81dbb8a3758415376f4d409676b8bce15fdbce67bcc5d2bc2"}, "downloads": -1, "filename": "actselectw-0.1.0.tar.gz", "has_sig": false, "md5_digest": "db8eea545619e319c0bcc14dd8099d79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3583, "upload_time": "2017-12-15T12:02:02", "upload_time_iso_8601": "2017-12-15T12:02:02.568335Z", "url": "https://files.pythonhosted.org/packages/06/cd/0eeb41cb7437ae440720f74a1bd83210e14d80bc8d6b4f3d47b5f4275479/actselectw-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db8eea545619e319c0bcc14dd8099d79", "sha256": "7d480e883f1d6ed81dbb8a3758415376f4d409676b8bce15fdbce67bcc5d2bc2"}, "downloads": -1, "filename": "actselectw-0.1.0.tar.gz", "has_sig": false, "md5_digest": "db8eea545619e319c0bcc14dd8099d79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3583, "upload_time": "2017-12-15T12:02:02", "upload_time_iso_8601": "2017-12-15T12:02:02.568335Z", "url": "https://files.pythonhosted.org/packages/06/cd/0eeb41cb7437ae440720f74a1bd83210e14d80bc8d6b4f3d47b5f4275479/actselectw-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:14 2020"}