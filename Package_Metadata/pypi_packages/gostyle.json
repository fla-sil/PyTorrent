{"info": {"author": "Luo Yusang", "author_email": "luoyusang2007@hotmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# GoStyle\nGo syntax implementation in Python. \n# Installation\n```\npip install gostyle\n```\n# Threading Wrapper Like goRoutine\nIn GoLang, we can create parallel tasks via keyword `go`:\n```go\n//GoLang\n//...\ngo XXXX(arg1,arg2)\n//...\n```\nIn GoLang, the thread creating has following features:\n* The parameter passing is the same as the original function defined by user.\n* The original function is still usable as defined.\n\nHowever, in Python creating a thread is stupid:\n```Python\n#Python\n#...\nt = threading.Thread(target=XXX, args=(arg1,arg2))\nt.start()\n#...\n```\n## Recommended Usage\nUsage with best compatibility:\n```Python\nimport time\nfrom gostyle import go, Chan\nchan1 = Chan()\ndef test_thread(title:str):\n    for cnt in range(10):\n        chan1<=cnt\n        time.sleep(1)\n        print(title)\ndef chan_reader():\n    while True :\n        print(chan1())\n# Start the thread \ngo(test_thread)(\"Call\")\nchan_reader()\n```\n\n## How To Use Word `go` in Python\nIf the function is self-defined, you can use decorator `@gostyle.startable()` like following:\n```Python\nimport time\nimport gostyle\n@gostyle.startable()\ndef test_thread(title:str):\n    while True:\n        time.sleep(1)\n        print(title)\n# Start the thread \ntest_thread.start(\"Start\")\n# Note that the expression \"test_thread('Normal')\" can still run the original function in main thread.\n```\n\nOr, if the function is not a class/object method:\n```Python\nimport time\nimport gostyle\n@gostyle.destination()\ndef test_thread(title:str):\n    while True:\n        time.sleep(1)\n        print(title)\n# Start the thread \ngostyle.to.test_thread(\"Go To Destination\")\n# Note that the expression \"test_thread('Normal')\" can still run the original function in main thread.\n```\n\nOr:\n\n```Python\nimport time\nfrom gostyle import go\n@go.goable()\ndef test_thread(title:str):\n    while True:\n        time.sleep(1)\n        print(title)\n# Start the thread \ngo.test_thread(\"Go\")\n# Note that the expression \"test_thread('Normal')\" can still run the original function in main thread.\n```\n\nIf the function is not self-defined(you can not add decorator to the function), or the function is a method of a class/object(the function you defined is hard to attach to \"go\"(same as \"to\") object in this package), you can use syntax like following:\n```Python\nimport time\nfrom gostyle import go\ndef test_thread(title:str):\n    while True:\n        time.sleep(1)\n        print(title)\n# Start the thread \ngo(test_thread)(\"Call\")\n```\n\n## Run-Forever and Daemonize\nThe `daemon` parameter controls the deamon option in package `threading`. and the forever parameter lets you get rid of a `while True:` expression in the function you defined.\n```Python\nimport time\nfrom gostyle import go\ndef test_thread(title:str):\n    # No Internal WHILE Here.\n    time.sleep(1)\n    print(title)\n# Start the thread \ngo(test_thread, forever=True)(\"Call Forever\")\n```\n\n```Python\nimport time\nimport gostyle\n@gostyle.startable(forever=True)\ndef test_thread(title:str):\n    # No Internal WHILE Here.\n    time.sleep(1)\n    print(title)\n# Start the thread \ntest_thread.start(\"Start Loop\")\n```\n\n# Defer\nIn GoLang, defer is used to do things(usually cleaning-up) after a function returns.\n## How To Use in Python\nUsage of decorator `defer_inside`:\n```Python\nfrom gostyle import defer_inside, defer\n@defer_inside\ndef great_func():\n    a = [1,2,3]\n    b = 8\n    defer(\n        lambda : a.append(7),\n        lambda : print(a),\n        lambda : print(b)\n    )\n    a.append(9)\n    return a,b\nprint(great_func())\n\n```\n\n\n\n-----------------------------------------\n# Todos\n## Threading\nManage Threads started by gostyle\nCollect return values\nSingle Instance support\nYield Support\nMultithreading Support \n\n## Defer\nMulti-times Defer Support\n\n## Queue\nQueue Wrapper\n\n## Switch\n...\n\n## Anonymous Functions\n...\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/luoyusang2007/gostyle", "keywords": "go golang routine thread", "license": "", "maintainer": "", "maintainer_email": "", "name": "gostyle", "package_url": "https://pypi.org/project/gostyle/", "platform": "", "project_url": "https://pypi.org/project/gostyle/", "project_urls": {"Homepage": "https://github.com/luoyusang2007/gostyle", "Source": "https://github.com/luoyusang2007/gostyle"}, "release_url": "https://pypi.org/project/gostyle/0.1.7/", "requires_dist": null, "requires_python": "", "summary": "Golang Syntax For Python", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GoStyle</h1>\n<p>Go syntax implementation in Python.</p>\n<h1>Installation</h1>\n<pre><code>pip install gostyle\n</code></pre>\n<h1>Threading Wrapper Like goRoutine</h1>\n<p>In GoLang, we can create parallel tasks via keyword <code>go</code>:</p>\n<pre><span class=\"c1\">//GoLang</span>\n<span class=\"c1\">//...</span>\n<span class=\"k\">go</span> <span class=\"nx\">XXXX</span><span class=\"p\">(</span><span class=\"nx\">arg1</span><span class=\"p\">,</span><span class=\"nx\">arg2</span><span class=\"p\">)</span>\n<span class=\"c1\">//...</span>\n</pre>\n<p>In GoLang, the thread creating has following features:</p>\n<ul>\n<li>The parameter passing is the same as the original function defined by user.</li>\n<li>The original function is still usable as defined.</li>\n</ul>\n<p>However, in Python creating a thread is stupid:</p>\n<pre><span class=\"c1\">#Python</span>\n<span class=\"c1\">#...</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">XXX</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span><span class=\"n\">arg2</span><span class=\"p\">))</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\">#...</span>\n</pre>\n<h2>Recommended Usage</h2>\n<p>Usage with best compatibility:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gostyle</span> <span class=\"kn\">import</span> <span class=\"n\">go</span><span class=\"p\">,</span> <span class=\"n\">Chan</span>\n<span class=\"n\">chan1</span> <span class=\"o\">=</span> <span class=\"n\">Chan</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_thread</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">cnt</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">chan1</span><span class=\"o\">&lt;=</span><span class=\"n\">cnt</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">chan_reader</span><span class=\"p\">():</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span> <span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">chan1</span><span class=\"p\">())</span>\n<span class=\"c1\"># Start the thread </span>\n<span class=\"n\">go</span><span class=\"p\">(</span><span class=\"n\">test_thread</span><span class=\"p\">)(</span><span class=\"s2\">\"Call\"</span><span class=\"p\">)</span>\n<span class=\"n\">chan_reader</span><span class=\"p\">()</span>\n</pre>\n<h2>How To Use Word <code>go</code> in Python</h2>\n<p>If the function is self-defined, you can use decorator <code>@gostyle.startable()</code> like following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gostyle</span>\n<span class=\"nd\">@gostyle</span><span class=\"o\">.</span><span class=\"n\">startable</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_thread</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"c1\"># Start the thread </span>\n<span class=\"n\">test_thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s2\">\"Start\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Note that the expression \"test_thread('Normal')\" can still run the original function in main thread.</span>\n</pre>\n<p>Or, if the function is not a class/object method:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gostyle</span>\n<span class=\"nd\">@gostyle</span><span class=\"o\">.</span><span class=\"n\">destination</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_thread</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"c1\"># Start the thread </span>\n<span class=\"n\">gostyle</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"o\">.</span><span class=\"n\">test_thread</span><span class=\"p\">(</span><span class=\"s2\">\"Go To Destination\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Note that the expression \"test_thread('Normal')\" can still run the original function in main thread.</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gostyle</span> <span class=\"kn\">import</span> <span class=\"n\">go</span>\n<span class=\"nd\">@go</span><span class=\"o\">.</span><span class=\"n\">goable</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_thread</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"c1\"># Start the thread </span>\n<span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">test_thread</span><span class=\"p\">(</span><span class=\"s2\">\"Go\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Note that the expression \"test_thread('Normal')\" can still run the original function in main thread.</span>\n</pre>\n<p>If the function is not self-defined(you can not add decorator to the function), or the function is a method of a class/object(the function you defined is hard to attach to \"go\"(same as \"to\") object in this package), you can use syntax like following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gostyle</span> <span class=\"kn\">import</span> <span class=\"n\">go</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_thread</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"c1\"># Start the thread </span>\n<span class=\"n\">go</span><span class=\"p\">(</span><span class=\"n\">test_thread</span><span class=\"p\">)(</span><span class=\"s2\">\"Call\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Run-Forever and Daemonize</h2>\n<p>The <code>daemon</code> parameter controls the deamon option in package <code>threading</code>. and the forever parameter lets you get rid of a <code>while True:</code> expression in the function you defined.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gostyle</span> <span class=\"kn\">import</span> <span class=\"n\">go</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_thread</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"c1\"># No Internal WHILE Here.</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"c1\"># Start the thread </span>\n<span class=\"n\">go</span><span class=\"p\">(</span><span class=\"n\">test_thread</span><span class=\"p\">,</span> <span class=\"n\">forever</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)(</span><span class=\"s2\">\"Call Forever\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gostyle</span>\n<span class=\"nd\">@gostyle</span><span class=\"o\">.</span><span class=\"n\">startable</span><span class=\"p\">(</span><span class=\"n\">forever</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_thread</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"c1\"># No Internal WHILE Here.</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"c1\"># Start the thread </span>\n<span class=\"n\">test_thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s2\">\"Start Loop\"</span><span class=\"p\">)</span>\n</pre>\n<h1>Defer</h1>\n<p>In GoLang, defer is used to do things(usually cleaning-up) after a function returns.</p>\n<h2>How To Use in Python</h2>\n<p>Usage of decorator <code>defer_inside</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gostyle</span> <span class=\"kn\">import</span> <span class=\"n\">defer_inside</span><span class=\"p\">,</span> <span class=\"n\">defer</span>\n<span class=\"nd\">@defer_inside</span>\n<span class=\"k\">def</span> <span class=\"nf\">great_func</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n    <span class=\"n\">defer</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">),</span>\n        <span class=\"k\">lambda</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span>\n        <span class=\"k\">lambda</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">great_func</span><span class=\"p\">())</span>\n</pre>\n<hr>\n<h1>Todos</h1>\n<h2>Threading</h2>\n<p>Manage Threads started by gostyle\nCollect return values\nSingle Instance support\nYield Support\nMultithreading Support</p>\n<h2>Defer</h2>\n<p>Multi-times Defer Support</p>\n<h2>Queue</h2>\n<p>Queue Wrapper</p>\n<h2>Switch</h2>\n<p>...</p>\n<h2>Anonymous Functions</h2>\n<p>...</p>\n\n          </div>"}, "last_serial": 6522537, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "744d0e1e999ec69c58ca4a03d5380295", "sha256": "25538c34c8256d4d47c0122ad33bdabede249fe1394f9b1a897261a5aad44044"}, "downloads": -1, "filename": "gostyle-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "744d0e1e999ec69c58ca4a03d5380295", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1952, "upload_time": "2020-01-01T08:54:51", "upload_time_iso_8601": "2020-01-01T08:54:51.433131Z", "url": "https://files.pythonhosted.org/packages/12/d0/9a42c29fe84e749c797e15aecaee4c556fe45b33c0f263ffea4da21e8e31/gostyle-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bac2bc3d1ea1d8a91061951e8a5ebe1b", "sha256": "63079f76ef5a639f27cb6ba781164ef9b23477cff1d2970ecd0a6a47c040ff1e"}, "downloads": -1, "filename": "gostyle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bac2bc3d1ea1d8a91061951e8a5ebe1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2684, "upload_time": "2020-01-01T08:54:53", "upload_time_iso_8601": "2020-01-01T08:54:53.737929Z", "url": "https://files.pythonhosted.org/packages/57/8a/a55e32e33cd2f43409c714d74286a0dbe83a9f1ea0bf6af5283bdd06d642/gostyle-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ff7774e16c29093f458a0ca2aa73802a", "sha256": "788c1a06813f98c0298c57310819fed38ef3182e94b8301473626c682d161123"}, "downloads": -1, "filename": "gostyle-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff7774e16c29093f458a0ca2aa73802a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1956, "upload_time": "2020-01-04T13:54:36", "upload_time_iso_8601": "2020-01-04T13:54:36.342609Z", "url": "https://files.pythonhosted.org/packages/f3/b6/f5de881f931bfe022a5c94701d6e316aea9dd2630c7f4deacc62e82822e7/gostyle-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c655f7ac7e056b0695e13aea114341e", "sha256": "e121beabea4973ead7506d282e37ca3d0e0a9ee1fd0663c8956dfdc1e59e3a95"}, "downloads": -1, "filename": "gostyle-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8c655f7ac7e056b0695e13aea114341e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2906, "upload_time": "2020-01-04T13:54:37", "upload_time_iso_8601": "2020-01-04T13:54:37.923103Z", "url": "https://files.pythonhosted.org/packages/43/6f/faf65dfe22a05111d9cc6868abe7e34f85b33b28b08b8b3d554e0a657a92/gostyle-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "57225372755a95e9ce229c9717420989", "sha256": "8aa04131dbc2b46da960d98423f5cfefda409a3e2b68a64a5879291c770d1174"}, "downloads": -1, "filename": "gostyle-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "57225372755a95e9ce229c9717420989", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3016, "upload_time": "2020-01-04T13:57:51", "upload_time_iso_8601": "2020-01-04T13:57:51.040771Z", "url": "https://files.pythonhosted.org/packages/29/2c/5034c78700819f429d561b77a32384c931db6724495448deaea988b9b761/gostyle-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b765bb3176cb93282094ba0f2508610", "sha256": "e624b4310846e16dd005886f2a716b8bb90fa2b4f1ff63a380e6c37b14c5fd9d"}, "downloads": -1, "filename": "gostyle-0.1.3.tar.gz", "has_sig": false, "md5_digest": "7b765bb3176cb93282094ba0f2508610", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3366, "upload_time": "2020-01-04T13:57:53", "upload_time_iso_8601": "2020-01-04T13:57:53.750144Z", "url": "https://files.pythonhosted.org/packages/70/ae/4c35859ae20e754a57584dd0d123ea37ca989cd99769c805043e108d489d/gostyle-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "fe9a29ca814b704b8a74ff4e3d4b5113", "sha256": "f5b0e3e3297a70d266cdd945d377ef07f9606dfc5fd9a086efbd0648b40bc34e"}, "downloads": -1, "filename": "gostyle-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fe9a29ca814b704b8a74ff4e3d4b5113", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3003, "upload_time": "2020-01-04T14:20:54", "upload_time_iso_8601": "2020-01-04T14:20:54.740272Z", "url": "https://files.pythonhosted.org/packages/b2/79/89eb9e808e950445ae917539fdbb53010448cbdd6cd9f216d6d5fb0a99f0/gostyle-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ba78992db95e7a875ec9e8ccd9e3cfc", "sha256": "21c5ce427ef759bfa7a8bd35d72a5343e0308cb2d3c6640b51634717f157ab76"}, "downloads": -1, "filename": "gostyle-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0ba78992db95e7a875ec9e8ccd9e3cfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3368, "upload_time": "2020-01-04T14:20:56", "upload_time_iso_8601": "2020-01-04T14:20:56.462897Z", "url": "https://files.pythonhosted.org/packages/ce/5b/fadef6da3e151df0c765ae0fe7b7a27d8a4428df5cdc7b33b627940f606f/gostyle-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "c4209ebb46fb294f466071e4b79e366b", "sha256": "55d106ff036257bd170e17a45681fa9fb80fd31e44188176c08f49bd5d7384ec"}, "downloads": -1, "filename": "gostyle-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c4209ebb46fb294f466071e4b79e366b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3042, "upload_time": "2020-01-10T14:46:24", "upload_time_iso_8601": "2020-01-10T14:46:24.110881Z", "url": "https://files.pythonhosted.org/packages/9a/d1/7951a122eafd852e0dcd987011f0ce0292d29d006ad2c90d6f2bba63d6a3/gostyle-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7faa4db7a54130b62994ceeeb5241556", "sha256": "8f85faa6642c35f5512ce6cf09b7134daa6b778d72020cade1b2901782d4f45c"}, "downloads": -1, "filename": "gostyle-0.1.5.tar.gz", "has_sig": false, "md5_digest": "7faa4db7a54130b62994ceeeb5241556", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3451, "upload_time": "2020-01-10T14:46:26", "upload_time_iso_8601": "2020-01-10T14:46:26.070780Z", "url": "https://files.pythonhosted.org/packages/e5/d5/2d7a9f0acdba9f78422da4ed922b00320558497e0c7eb0369fddabd1997b/gostyle-0.1.5.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "0ca0b718d3267459794749083d3b40da", "sha256": "5d7921b969c6a2f548fbb7a1323cd3543960b12893a420589cb527220dd0bf66"}, "downloads": -1, "filename": "gostyle-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ca0b718d3267459794749083d3b40da", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3156, "upload_time": "2020-01-26T16:58:10", "upload_time_iso_8601": "2020-01-26T16:58:10.490565Z", "url": "https://files.pythonhosted.org/packages/a8/26/d67880e36c822bb4c3b1e87f6a87cd4c15dd5617b2f9e1be3a3eabd56b53/gostyle-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7db733d89f1f88f7cdb834782c8d1ef6", "sha256": "0bc540901e6e91e03988bc7e1fb865353dbd8e21fbb9aad6dbb26c1e93706186"}, "downloads": -1, "filename": "gostyle-0.1.7.tar.gz", "has_sig": false, "md5_digest": "7db733d89f1f88f7cdb834782c8d1ef6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3634, "upload_time": "2020-01-26T16:58:12", "upload_time_iso_8601": "2020-01-26T16:58:12.191591Z", "url": "https://files.pythonhosted.org/packages/b1/4b/796baedcb2ce2578972c5a7c878edee4acd5320c771a538aea89c5985d18/gostyle-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ca0b718d3267459794749083d3b40da", "sha256": "5d7921b969c6a2f548fbb7a1323cd3543960b12893a420589cb527220dd0bf66"}, "downloads": -1, "filename": "gostyle-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ca0b718d3267459794749083d3b40da", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3156, "upload_time": "2020-01-26T16:58:10", "upload_time_iso_8601": "2020-01-26T16:58:10.490565Z", "url": "https://files.pythonhosted.org/packages/a8/26/d67880e36c822bb4c3b1e87f6a87cd4c15dd5617b2f9e1be3a3eabd56b53/gostyle-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7db733d89f1f88f7cdb834782c8d1ef6", "sha256": "0bc540901e6e91e03988bc7e1fb865353dbd8e21fbb9aad6dbb26c1e93706186"}, "downloads": -1, "filename": "gostyle-0.1.7.tar.gz", "has_sig": false, "md5_digest": "7db733d89f1f88f7cdb834782c8d1ef6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3634, "upload_time": "2020-01-26T16:58:12", "upload_time_iso_8601": "2020-01-26T16:58:12.191591Z", "url": "https://files.pythonhosted.org/packages/b1/4b/796baedcb2ce2578972c5a7c878edee4acd5320c771a538aea89c5985d18/gostyle-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:26 2020"}