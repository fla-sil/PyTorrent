{"info": {"author": "Quinten Steenhuis", "author_email": "admin@admin.com", "bugtrack_url": null, "classifiers": [], "description": "# Income Module for Docassemble\n\nIncludes examples at docassemble.income:interview_test.yml, docassemble.income:financial_statement.yml\n\n## Classes\n\n### Income(PeriodicValue)\n```\n    def amount(self, period_to_use=1):\n        \"\"\"Returns the amount earned over the specified period \"\"\"\n```\n### IncomeList(DAList)\n```\n    def types(self):\n        \"\"\"Returns a set of the unique types of values stored in the list. Will fail if any items in the list leave the type field unspecified\"\"\"\n\n    def owners(self, type=None):\n        \"\"\"Returns a set of the unique owners for the specified type of value stored in the list. If type is None, returns all unique owners in the IncomeList\"\"\"\n\n    def total(self, period_to_use=1, type=None):\n        \"\"\"Returns the total periodic value in the list, gathering the list items if necessary.\n    \n    def market_value_total(self, type=None):\n        \"\"\"Returns the total market value of values in the list.\"\"\"\n\n    def balance_total(self, type=None):\n    \n    def matches(self, type):\n        \"\"\"Returns an IncomeList consisting only of elements matching the specified Income type, assisting in filling PDFs with predefined spaces\"\"\"\n```\n\n### Job(Income)\n```\n    def net_amount(self, period_to_use=1):\n        \"\"\"Returns the net amount (e.g., minus deductions). Only applies if value is non-hourly.\"\"\"\n\n    def gross_amount(self, period_to_use=1):\n        \"\"\"Gross amount is identical to value\"\"\"\n```\n### JobList\n```\n    def gross_total(self, period_to_use=1, type=None):\n\n    def net_total(self, period_to_use=1, type=None):\n \n```\n\n### SimpleValue\n\n```\n    def amount(self):\n\n```\n\n### Vehicle\nLike SimpleValue, but adds year_make_model method\n\n### ValueList\n```\n    def types(self):\n        \"\"\"Returns a set of the unique types of values stored in the list. Will fail if any items in the list leave the type field unspecified\"\"\"\n\n    def total(self, type=None):\n```\n\n### VehicleList\n\n## Utility functions\n\n```\nrecent_years(years=15, order='descending',future=1):\n    \"\"\"Returns a list of the most recent years, continuing into the future. Defaults to most recent 15 years+1. Useful to populate\n        a combobox of years where the most recent ones are most likely. E.g. automobile years or birthdate.\n        Keyword paramaters: years, order (descending or ascending), future (defaults to 1)\"\"\"\n        \nasset_type_list() :\n    \"\"\"Returns a list of assset types for a multiple choice dropdown\"\"\"\n    \nincome_type_list() :\n    \"\"\"Returns a list of income types for a multiple choice dropdown\"\"\"\n\ndef non_wage_income_list():\n    \"\"\"Returns a list of income types for a multiple choice dropdown, excluding wages\"\"\"\n\nexpense_type_list() :\n    \"\"\"Returns a list of expense types for a multiple choice dropdown\"\"\"\n    \ndef flatten(listname,index=1):\n    \"\"\"Return just the nth item in an 2D list. Intended to use for multiple choice option lists in Docassemble.\n        e.g., flatten(asset_type_list()) will return ['Savings','Certificate of Deposit'...] \"\"\"\n\ndef income_period(frequency):\n  \"\"\"Returns the plain language translation of the income period, which is a number\"\"\"\n\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://docassemble.org", "keywords": "", "license": "The MIT License (MIT)", "maintainer": "", "maintainer_email": "", "name": "docassemble.income", "package_url": "https://pypi.org/project/docassemble.income/", "platform": "", "project_url": "https://pypi.org/project/docassemble.income/", "project_urls": {"Homepage": "https://docassemble.org"}, "release_url": "https://pypi.org/project/docassemble.income/0.0.33/", "requires_dist": null, "requires_python": "", "summary": "A module to help with gathering a financial statement, including hourly wages", "version": "0.0.33", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Income Module for Docassemble</h1>\n<p>Includes examples at docassemble.income:interview_test.yml, docassemble.income:financial_statement.yml</p>\n<h2>Classes</h2>\n<h3>Income(PeriodicValue)</h3>\n<pre><code>    def amount(self, period_to_use=1):\n        \"\"\"Returns the amount earned over the specified period \"\"\"\n</code></pre>\n<h3>IncomeList(DAList)</h3>\n<pre><code>    def types(self):\n        \"\"\"Returns a set of the unique types of values stored in the list. Will fail if any items in the list leave the type field unspecified\"\"\"\n\n    def owners(self, type=None):\n        \"\"\"Returns a set of the unique owners for the specified type of value stored in the list. If type is None, returns all unique owners in the IncomeList\"\"\"\n\n    def total(self, period_to_use=1, type=None):\n        \"\"\"Returns the total periodic value in the list, gathering the list items if necessary.\n    \n    def market_value_total(self, type=None):\n        \"\"\"Returns the total market value of values in the list.\"\"\"\n\n    def balance_total(self, type=None):\n    \n    def matches(self, type):\n        \"\"\"Returns an IncomeList consisting only of elements matching the specified Income type, assisting in filling PDFs with predefined spaces\"\"\"\n</code></pre>\n<h3>Job(Income)</h3>\n<pre><code>    def net_amount(self, period_to_use=1):\n        \"\"\"Returns the net amount (e.g., minus deductions). Only applies if value is non-hourly.\"\"\"\n\n    def gross_amount(self, period_to_use=1):\n        \"\"\"Gross amount is identical to value\"\"\"\n</code></pre>\n<h3>JobList</h3>\n<pre><code>    def gross_total(self, period_to_use=1, type=None):\n\n    def net_total(self, period_to_use=1, type=None):\n \n</code></pre>\n<h3>SimpleValue</h3>\n<pre><code>    def amount(self):\n\n</code></pre>\n<h3>Vehicle</h3>\n<p>Like SimpleValue, but adds year_make_model method</p>\n<h3>ValueList</h3>\n<pre><code>    def types(self):\n        \"\"\"Returns a set of the unique types of values stored in the list. Will fail if any items in the list leave the type field unspecified\"\"\"\n\n    def total(self, type=None):\n</code></pre>\n<h3>VehicleList</h3>\n<h2>Utility functions</h2>\n<pre><code>recent_years(years=15, order='descending',future=1):\n    \"\"\"Returns a list of the most recent years, continuing into the future. Defaults to most recent 15 years+1. Useful to populate\n        a combobox of years where the most recent ones are most likely. E.g. automobile years or birthdate.\n        Keyword paramaters: years, order (descending or ascending), future (defaults to 1)\"\"\"\n        \nasset_type_list() :\n    \"\"\"Returns a list of assset types for a multiple choice dropdown\"\"\"\n    \nincome_type_list() :\n    \"\"\"Returns a list of income types for a multiple choice dropdown\"\"\"\n\ndef non_wage_income_list():\n    \"\"\"Returns a list of income types for a multiple choice dropdown, excluding wages\"\"\"\n\nexpense_type_list() :\n    \"\"\"Returns a list of expense types for a multiple choice dropdown\"\"\"\n    \ndef flatten(listname,index=1):\n    \"\"\"Return just the nth item in an 2D list. Intended to use for multiple choice option lists in Docassemble.\n        e.g., flatten(asset_type_list()) will return ['Savings','Certificate of Deposit'...] \"\"\"\n\ndef income_period(frequency):\n  \"\"\"Returns the plain language translation of the income period, which is a number\"\"\"\n\n</code></pre>\n\n          </div>"}, "last_serial": 6238297, "releases": {"0.0.33": [{"comment_text": "", "digests": {"md5": "34fc9374041d2bceb77ffa3d5018aa59", "sha256": "0dcf535154205019956bd3db0096e12be8383d595c7d96c78787fb9b3184b8d4"}, "downloads": -1, "filename": "docassemble.income-0.0.33.tar.gz", "has_sig": false, "md5_digest": "34fc9374041d2bceb77ffa3d5018aa59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13116, "upload_time": "2019-12-03T23:48:03", "upload_time_iso_8601": "2019-12-03T23:48:03.950996Z", "url": "https://files.pythonhosted.org/packages/8c/df/9fd1417c29e1f5f573e3073549724adc5bab5f24fb0d18e4edd64b35aee6/docassemble.income-0.0.33.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34fc9374041d2bceb77ffa3d5018aa59", "sha256": "0dcf535154205019956bd3db0096e12be8383d595c7d96c78787fb9b3184b8d4"}, "downloads": -1, "filename": "docassemble.income-0.0.33.tar.gz", "has_sig": false, "md5_digest": "34fc9374041d2bceb77ffa3d5018aa59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13116, "upload_time": "2019-12-03T23:48:03", "upload_time_iso_8601": "2019-12-03T23:48:03.950996Z", "url": "https://files.pythonhosted.org/packages/8c/df/9fd1417c29e1f5f573e3073549724adc5bab5f24fb0d18e4edd64b35aee6/docassemble.income-0.0.33.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:59 2020"}