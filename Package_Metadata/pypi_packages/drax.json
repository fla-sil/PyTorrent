{"info": {"author": "tax", "author_email": "paultax@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "#Drax dashboard\n\nDrax is a python and react implementation of the beautiful [dashing](http://shopify.github.io/dashing/) app that has minimal dependencies. I created this project to develop my [react](http://facebook.github.io/react/index.html) and  [tornado](http://www.tornadoweb.org/) skills.\n\n## How to use drax\nAfter you installed drax run the following commands:\n\n```\n    $ drax init mydashboard\n    $ cd mydashboard\n    $ drax start\n```\n\nNow a new dashboard is available on http://localhost:8888/\n\n\nEvery project comes with some base widgets and an example dashboard. The directory is setup as follows:\n\n* **Assets** - All your images, fonts, and javascript libraries.\n* **Dashboards** - One html file for each dashboard that contains the layout for the widgets. The default dashboard is defined in *index.html*.\n* **Jobs** - The python jobs for fetching data to sent to your widgets.\n* **Widgets** - All the jsx and css files for individual widgets.\n\n\n## How to create a dashboard\nBy editing the *index.html* file in the *templates* directory: \n\n```javascript\n  React.render(\n    <Dashboard widgetHeight={450} widgetWidth={360}>\n      <Clock widgetid=\"clock\" row={1} col={1}/>\n      <HeartBeat widgetid=\"hearthbeat\" row={1} col={1}/>\n      <Text widgetid=\"mywidget3\" row={1} col={4} initialTitle=\"This is the title\" initialText=\"This is my initial text....\"/>\n      <List widgetid=\"mylist\" row={1} col={3} sizey={2}/>\n      <Number widgetid=\"valuation\" row={2} col={1} initialTitle=\"Current valuation\" initialInfo=\"In billions\"/>\n      <Meter widgetid=\"synergy\" initialTitle=\"Synergy\" initialValue={10} min={0} max={100} row={2} col={2}/>\n      <Image widgetid=\"image\" row={2} col={4} src=\"http://dashingdemo.herokuapp.com/assets/logo.png\"/>\n    </Dashboard>,\n    document.getElementById('dashboard'));\n```\n\nIf you want to add more dashboards copy *index.html* to a new html file in the templates directory and edit that file.\n\nIf you created a new dashboard *status.html* it will be available on http://localhost:8888/status **(Notice the url without the \".html\")**.\n\n\n## How get data into widgets\nYour widgets can be updated directly over HTTP. Post the data you want in json to /widgets/widget_id. \nExample\n\n```\ncurl -d '{ \"auth_token\": \"YOUR_AUTH_TOKEN\", \"text\": \"Some new text...\"}' http://localhost:8888/widgets/text\n```\nor a python example:\n\n```python\nimport json\nimport requests\n\nurl = 'http://localhost:8888/widgets/text'\ndata = {\n    'auth_token': 'YOUR_AUTH_TOKEN',\n    'text': 'Some new text...',\n    'id': 'text'\n}\n\nrequests.post(url, data=json.dumps(data))\n\n```\n\n## How to create a job\nEvery file with the .py extension in the jobs folder is loaded as a job and executed periodically. \n\nEach job needs to define a function named *callback* (the actual job) and a variable *callback_time* that defines the time in milliseconds of the frequency the job is executed.\n\nAn example of a job executing every 30 seconds:\n```python\nimport json\nfrom tornado.httpclient import AsyncHTTPClient\n\n# callback function is called every 30 seconds\ncallback_time = 30000\n\n\ndef get_myapi_data():\n    # Add logic to fetch data from somewhere\n    data = 'This is some data loaded from somewhere...'\n    return data\n\n\ndef callback():\n    data = {\n        'auth_token': 'YOUR_AUTH_TOKEN',\n        # the id of the widget you want to post the data to\n        'id': 'text',\n        'title': 'Some Info:',\n        'icon': 'icon-star',\n        'text': get_myapi_data()\n    }\n    payload = json.dumps(data)\n    url = 'http://localhost:8888/widgets/text'\n\n    # Using tornado async client\n    client = AsyncHTTPClient()\n    client.fetch(url, None, method='POST', headers=None, body=payload)\n```\n\n## How to reload your dashboards\n\nYou can also perform dashboard-level actions by posting to /dashboards/dashboard_id. Currently there is a single event available, reload, that will refresh the target dashboard in the browser.\n\n```\ncurl -i -d '{ \"auth_token\": \"YOUR_AUTH_TOKEN\", \"event\": \"reload\"}' http://localhost:8888/dashboards/index\n```\n\nIf you want an event to target every dashboard, you can use a wildcard (*).\n\n```\ncurl -i -d '{ \"auth_token\": \"YOUR_AUTH_TOKEN\", \"event\": \"reload\"}' http://localhost:8888/dashboards/*\n```\n\n## Installation\nInstalling drax is easy with pip:\n\n```\n    $ pip install drax\n```\n\n## Developing\nTo run tests:\n```\n    $ python test.py\n```\nTested with python 2.7\n\n[![Build Status](https://travis-ci.org/tax/drax.svg?branch=master)](https://travis-ci.org/tax/drax)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/tax/drax", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "drax", "package_url": "https://pypi.org/project/drax/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/drax/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/tax/drax"}, "release_url": "https://pypi.org/project/drax/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "Drax is a react and python implementation of the dashingdashboard", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            #Drax dashboard<br><br>Drax is a python and react implementation of the beautiful [dashing](http://shopify.github.io/dashing/) app that has minimal dependencies. I created this project to develop my [react](http://facebook.github.io/react/index.html) and  [tornado](http://www.tornadoweb.org/) skills.<br><br>## How to use drax<br>After you installed drax run the following commands:<br><br>```<br>    $ drax init mydashboard<br>    $ cd mydashboard<br>    $ drax start<br>```<br><br>Now a new dashboard is available on http://localhost:8888/<br><br><br>Every project comes with some base widgets and an example dashboard. The directory is setup as follows:<br><br>* **Assets** - All your images, fonts, and javascript libraries.<br>* **Dashboards** - One html file for each dashboard that contains the layout for the widgets. The default dashboard is defined in *index.html*.<br>* **Jobs** - The python jobs for fetching data to sent to your widgets.<br>* **Widgets** - All the jsx and css files for individual widgets.<br><br><br>## How to create a dashboard<br>By editing the *index.html* file in the *templates* directory: <br><br>```javascript<br>  React.render(<br>    &lt;Dashboard widgetHeight={450} widgetWidth={360}&gt;<br>      &lt;Clock widgetid=\"clock\" row={1} col={1}/&gt;<br>      &lt;HeartBeat widgetid=\"hearthbeat\" row={1} col={1}/&gt;<br>      &lt;Text widgetid=\"mywidget3\" row={1} col={4} initialTitle=\"This is the title\" initialText=\"This is my initial text....\"/&gt;<br>      &lt;List widgetid=\"mylist\" row={1} col={3} sizey={2}/&gt;<br>      &lt;Number widgetid=\"valuation\" row={2} col={1} initialTitle=\"Current valuation\" initialInfo=\"In billions\"/&gt;<br>      &lt;Meter widgetid=\"synergy\" initialTitle=\"Synergy\" initialValue={10} min={0} max={100} row={2} col={2}/&gt;<br>      &lt;Image widgetid=\"image\" row={2} col={4} src=\"http://dashingdemo.herokuapp.com/assets/logo.png\"/&gt;<br>    &lt;/Dashboard&gt;,<br>    document.getElementById('dashboard'));<br>```<br><br>If you want to add more dashboards copy *index.html* to a new html file in the templates directory and edit that file.<br><br>If you created a new dashboard *status.html* it will be available on http://localhost:8888/status **(Notice the url without the \".html\")**.<br><br><br>## How get data into widgets<br>Your widgets can be updated directly over HTTP. Post the data you want in json to /widgets/widget_id. <br>Example<br><br>```<br>curl -d '{ \"auth_token\": \"YOUR_AUTH_TOKEN\", \"text\": \"Some new text...\"}' http://localhost:8888/widgets/text<br>```<br>or a python example:<br><br>```python<br>import json<br>import requests<br><br>url = 'http://localhost:8888/widgets/text'<br>data = {<br>    'auth_token': 'YOUR_AUTH_TOKEN',<br>    'text': 'Some new text...',<br>    'id': 'text'<br>}<br><br>requests.post(url, data=json.dumps(data))<br><br>```<br><br>## How to create a job<br>Every file with the .py extension in the jobs folder is loaded as a job and executed periodically. <br><br>Each job needs to define a function named *callback* (the actual job) and a variable *callback_time* that defines the time in milliseconds of the frequency the job is executed.<br><br>An example of a job executing every 30 seconds:<br>```python<br>import json<br>from tornado.httpclient import AsyncHTTPClient<br><br># callback function is called every 30 seconds<br>callback_time = 30000<br><br><br>def get_myapi_data():<br>    # Add logic to fetch data from somewhere<br>    data = 'This is some data loaded from somewhere...'<br>    return data<br><br><br>def callback():<br>    data = {<br>        'auth_token': 'YOUR_AUTH_TOKEN',<br>        # the id of the widget you want to post the data to<br>        'id': 'text',<br>        'title': 'Some Info:',<br>        'icon': 'icon-star',<br>        'text': get_myapi_data()<br>    }<br>    payload = json.dumps(data)<br>    url = 'http://localhost:8888/widgets/text'<br><br>    # Using tornado async client<br>    client = AsyncHTTPClient()<br>    client.fetch(url, None, method='POST', headers=None, body=payload)<br>```<br><br>## How to reload your dashboards<br><br>You can also perform dashboard-level actions by posting to /dashboards/dashboard_id. Currently there is a single event available, reload, that will refresh the target dashboard in the browser.<br><br>```<br>curl -i -d '{ \"auth_token\": \"YOUR_AUTH_TOKEN\", \"event\": \"reload\"}' http://localhost:8888/dashboards/index<br>```<br><br>If you want an event to target every dashboard, you can use a wildcard (*).<br><br>```<br>curl -i -d '{ \"auth_token\": \"YOUR_AUTH_TOKEN\", \"event\": \"reload\"}' http://localhost:8888/dashboards/*<br>```<br><br>## Installation<br>Installing drax is easy with pip:<br><br>```<br>    $ pip install drax<br>```<br><br>## Developing<br>To run tests:<br>```<br>    $ python test.py<br>```<br>Tested with python 2.7<br><br>[![Build Status](https://travis-ci.org/tax/drax.svg?branch=master)](https://travis-ci.org/tax/drax)\n          </div>"}, "last_serial": 1296643, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "bebb05b692ddb12afc2a42360e13ecde", "sha256": "ac42727a03e7d56e34cd5d63f14bc533a5dcbb7b53c9cad423a4e5901ba3a921"}, "downloads": -1, "filename": "drax-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bebb05b692ddb12afc2a42360e13ecde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 415389, "upload_time": "2014-11-02T19:48:27", "upload_time_iso_8601": "2014-11-02T19:48:27.441124Z", "url": "https://files.pythonhosted.org/packages/8f/4e/62118f853517e06031f91288a9d46de565b04034b4f655dfeed8eb217c35/drax-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8e57257b88d2965147660c1c740411cf", "sha256": "3df5cc001e3c6f4fe4237d11ce1f6f989b8f02c7df11960637eae1c07d4ffecb"}, "downloads": -1, "filename": "drax-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8e57257b88d2965147660c1c740411cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 415793, "upload_time": "2014-11-02T19:52:22", "upload_time_iso_8601": "2014-11-02T19:52:22.431836Z", "url": "https://files.pythonhosted.org/packages/52/f4/4c98b5c1b0a2f080b25bbf15d60b7686dddcd0285212a84f7959f3e6450b/drax-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "9f900d797695b9ef141e9747b0475e86", "sha256": "9100cf004d021d7a9e0c5ca939cc30b50015cf0353f9703851ccd47356ff0c56"}, "downloads": -1, "filename": "drax-0.4.0.tar.gz", "has_sig": false, "md5_digest": "9f900d797695b9ef141e9747b0475e86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 416470, "upload_time": "2014-11-06T11:32:56", "upload_time_iso_8601": "2014-11-06T11:32:56.776147Z", "url": "https://files.pythonhosted.org/packages/1e/e5/0ce0fbde3e0d3ce67068f7e16e57a9a29dc65c7c9abe9b1dbd7726f4b9ed/drax-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f900d797695b9ef141e9747b0475e86", "sha256": "9100cf004d021d7a9e0c5ca939cc30b50015cf0353f9703851ccd47356ff0c56"}, "downloads": -1, "filename": "drax-0.4.0.tar.gz", "has_sig": false, "md5_digest": "9f900d797695b9ef141e9747b0475e86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 416470, "upload_time": "2014-11-06T11:32:56", "upload_time_iso_8601": "2014-11-06T11:32:56.776147Z", "url": "https://files.pythonhosted.org/packages/1e/e5/0ce0fbde3e0d3ce67068f7e16e57a9a29dc65c7c9abe9b1dbd7726f4b9ed/drax-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:51 2020"}