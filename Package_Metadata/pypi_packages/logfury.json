{"info": {"author": "Pawel Polewicz", "author_email": "p.polewicz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: Jython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Logging"], "description": "========\nLogfury\n========\n\nLogfury is for python library maintainers. It allows for responsible, low-boilerplate logging of method calls.\n\n*****************\nLicense\n*****************\n\nBSD 3-clause\n\n*****************************\nwhats with the weird import\n*****************************\n\n.. sourcecode:: python\n\n    from logfury.v0_1 import DefaultTraceMeta\n\nIf you were to use logfury in your library, any change to the API could potentially break your program. Nobody wants that.\n\nThanks to this import trick I can keep the 0.1.x API very stable. At the same time I can change the functionality of the library and change default behavior of version 0.2.x etc, without changing the name of the package. This way YOU decide when to adopt potentially incompatible API changes, by incrementing the API version on import.\n\n\n*****************\nInstallation\n*****************\n\n^^^^^^^^^^^^^^^^^^^^\nCurrent stable\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    pip install logfury\n\n^^^^^^^^^^^^^^^^^^^^\nDevelopment version\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    git clone git@github.com:ppolewicz/logfury.git\n    python setup.py install\n\n\n*****************\nBasic usage\n*****************\n\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nDefaultTraceMeta metaclass\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. sourcecode:: pycon\n\n    >>> import logging\n    >>> import six\n    >>>\n    >>> from logfury.v0_1 import DefaultTraceMeta, limit_trace_arguments, disable_trace\n    >>>\n    >>>\n    >>> logging.basicConfig()\n    >>> logger = logging.getLogger(__name__)\n    >>> logger.setLevel(logging.DEBUG)\n    >>>\n    >>>\n    >>> @six.add_metaclass(DefaultTraceMeta)\n    >>> class Foo(object):\n    ...     def baz(self, a, b, c=None):\n    ...         return True\n    ...     def get_blah(self):\n    ...         return 5\n    ...     def _hello(self):\n    ...         pass\n    ...     @disable_trace\n    ...     def world(self):\n    ...         pass\n    ...     def __repr__(self):\n    ...         return '<%s object>' % (self.__class__.__name__,)\n    ...\n    >>> class Bar(Foo):\n    ...     def baz(self, a, b, c=None):\n    ...         b += 1\n    ...         return super(Bar, self).baz(a, b, c)\n    ...     def world(self):\n    ...         pass\n    ...     @limit_trace_arguments(skip=['password'])\n    ...     def secret(self, password, other):\n    ...         pass\n    ...     @limit_trace_arguments(only=['other'])\n    ...     def secret2(self, password, other):\n    ...         pass\n    ...\n    >>> a = Foo()\n    >>> a.baz(1, 2, 3)\n    DEBUG:__main__:calling Foo.baz(self=<Foo object>, a=1, b=2, c=3)\n    >>> a.baz(4, b=8)\n    DEBUG:__main__:calling Foo.baz(self=<Foo object>, a=4, b=8)\n    >>> a.get_blah()  # nothing happens, since v0_1.DefaultTraceMeta does not trace \"get_.*\"\n    >>> a._hello()  # nothing happens, since v0_1.DefaultTraceMeta does not trace \"_.*\"\n    >>> a.world()  # nothing happens, since v0_1.DefaultTraceMeta does not trace \"_.*\"\n    >>> b = Bar()\n    >>> b.baz(4, b=8)  # tracing is inherited\n    DEBUG:__main__:calling Bar.baz(self=<Bar object>, a=4, b=8)\n    DEBUG:__main__:calling Foo.baz(self=<Bar object>, a=4, b=9, c=None)\n    >>> b.world()  # nothing happens, since Foo.world() tracing was disabled and Bar inherited it\n    >>> b.secret('correct horse battery staple', 'Hello world!')\n    DEBUG:__main__:calling Bar.secret(self=<Bar object>, other='Hello world!') (hidden args: password)\n    >>> b.secret2('correct horse battery staple', 'Hello world!')\n    DEBUG:__main__:calling Bar.secret2(other='Hello world!') (hidden args: self, password)\n\n\n^^^^^^^^^^^^^^^^^^^^\ntrace_call decorator\n^^^^^^^^^^^^^^^^^^^^\n\n.. sourcecode:: pycon\n\n    >>> import logging\n    >>> from logfury import *\n    >>> logging.basicConfig()\n    >>> logger = logging.getLogger(__name__)\n    >>>\n    >>> @trace_call(logger)\n    ... def foo(a, b, c=None):\n    ...     return True\n    ...\n    >>> foo(1, 2, 3)\n    True\n    >>> logger.setLevel(logging.DEBUG)\n    >>> foo(1, 2, 3)\n    DEBUG:__main__:calling foo(a=1, b=2, c=3)\n    True\n    >>> foo(1, b=2)\n    DEBUG:__main__:calling foo(a=1, b=2)\n    True\n    >>>", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/ppolewicz/logfury/tarball/0.1.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ppolewicz/logfury", "keywords": "logging,tracing", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "logfury", "package_url": "https://pypi.org/project/logfury/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/logfury/", "project_urls": {"Download": "https://github.com/ppolewicz/logfury/tarball/0.1.2", "Homepage": "https://github.com/ppolewicz/logfury"}, "release_url": "https://pypi.org/project/logfury/0.1.2/", "requires_dist": ["six (>=1.10)", "funcsigs", "check-manifest; extra == 'test'", "pyflakes; extra == 'test'", "readme-renderer; extra == 'test'", "testfixtures; extra == 'test'", "yapf; extra == 'test'"], "requires_python": "", "summary": "Toolkit for responsible, low-boilerplate logging of library method calls", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Logfury is for python library maintainers. It allows for responsible, low-boilerplate logging of method calls.</p>\n<div id=\"license\">\n<h2>License</h2>\n<p>BSD 3-clause</p>\n</div>\n<div id=\"whats-with-the-weird-import\">\n<h2>whats with the weird import</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">logfury.v0_1</span> <span class=\"kn\">import</span> <span class=\"n\">DefaultTraceMeta</span>\n</pre>\n<p>If you were to use logfury in your library, any change to the API could potentially break your program. Nobody wants that.</p>\n<p>Thanks to this import trick I can keep the 0.1.x API very stable. At the same time I can change the functionality of the library and change default behavior of version 0.2.x etc, without changing the name of the package. This way YOU decide when to adopt potentially incompatible API changes, by incrementing the API version on import.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"current-stable\">\n<h3>Current stable</h3>\n<pre>pip install logfury\n</pre>\n</div>\n<div id=\"development-version\">\n<h3>Development version</h3>\n<pre>git clone git@github.com:ppolewicz/logfury.git\npython setup.py install\n</pre>\n</div>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<div id=\"defaulttracemeta-metaclass\">\n<h3>DefaultTraceMeta metaclass</h3>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"go\">&gt;&gt;&gt;\n</span><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">logfury.v0_1</span> <span class=\"kn\">import</span> <span class=\"n\">DefaultTraceMeta</span><span class=\"p\">,</span> <span class=\"n\">limit_trace_arguments</span><span class=\"p\">,</span> <span class=\"n\">disable_trace</span>\n<span class=\"go\">&gt;&gt;&gt;\n&gt;&gt;&gt;\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;\n&gt;&gt;&gt;\n</span><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@six</span><span class=\"o\">.</span><span class=\"n\">add_metaclass</span><span class=\"p\">(</span><span class=\"n\">DefaultTraceMeta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">get_blah</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"mi\">5</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">_hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">pass</span>\n<span class=\"gp\">... </span>    <span class=\"nd\">@disable_trace</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">pass</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"s1\">'&lt;</span><span class=\"si\">%s</span><span class=\"s1\"> object&gt;'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"n\">b</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">pass</span>\n<span class=\"gp\">... </span>    <span class=\"nd\">@limit_trace_arguments</span><span class=\"p\">(</span><span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'password'</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">secret</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">pass</span>\n<span class=\"gp\">... </span>    <span class=\"nd\">@limit_trace_arguments</span><span class=\"p\">(</span><span class=\"n\">only</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'other'</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">secret2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">DEBUG:__main__:calling Foo.baz(self=&lt;Foo object&gt;, a=1, b=2, c=3)\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"go\">DEBUG:__main__:calling Foo.baz(self=&lt;Foo object&gt;, a=4, b=8)\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">get_blah</span><span class=\"p\">()</span>  <span class=\"c1\"># nothing happens, since v0_1.DefaultTraceMeta does not trace \"get_.*\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">_hello</span><span class=\"p\">()</span>  <span class=\"c1\"># nothing happens, since v0_1.DefaultTraceMeta does not trace \"_.*\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"p\">()</span>  <span class=\"c1\"># nothing happens, since v0_1.DefaultTraceMeta does not trace \"_.*\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bar</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>  <span class=\"c1\"># tracing is inherited</span>\n<span class=\"go\">DEBUG:__main__:calling Bar.baz(self=&lt;Bar object&gt;, a=4, b=8)\nDEBUG:__main__:calling Foo.baz(self=&lt;Bar object&gt;, a=4, b=9, c=None)\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"p\">()</span>  <span class=\"c1\"># nothing happens, since Foo.world() tracing was disabled and Bar inherited it</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">secret</span><span class=\"p\">(</span><span class=\"s1\">'correct horse battery staple'</span><span class=\"p\">,</span> <span class=\"s1\">'Hello world!'</span><span class=\"p\">)</span>\n<span class=\"go\">DEBUG:__main__:calling Bar.secret(self=&lt;Bar object&gt;, other='Hello world!') (hidden args: password)\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">secret2</span><span class=\"p\">(</span><span class=\"s1\">'correct horse battery staple'</span><span class=\"p\">,</span> <span class=\"s1\">'Hello world!'</span><span class=\"p\">)</span>\n<span class=\"go\">DEBUG:__main__:calling Bar.secret2(other='Hello world!') (hidden args: self, password)</span>\n</pre>\n</div>\n<div id=\"trace-call-decorator\">\n<h3>trace_call decorator</h3>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">logfury</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;\n</span><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@trace_call</span><span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">DEBUG:__main__:calling foo(a=1, b=2, c=3)\nTrue\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">DEBUG:__main__:calling foo(a=1, b=2)\nTrue\n&gt;&gt;&gt;</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2430981, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "f189f6d0d2ea774382f3e566d4896eb2", "sha256": "e0ce7f95bab6e5b2fd835b3d8ff5e226704476671d15340a99b00285f4c2d1fc"}, "downloads": -1, "filename": "logfury-0.1.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f189f6d0d2ea774382f3e566d4896eb2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12440, "upload_time": "2016-10-09T22:53:05", "upload_time_iso_8601": "2016-10-09T22:53:05.005176Z", "url": "https://files.pythonhosted.org/packages/55/71/c70df1ef41721b554c91982ebde423a5cf594261aa5132e39ade9196fa3b/logfury-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1bc3990bbb6c426e36bdb2d3da09e7d", "sha256": "42da58fbbd4e6fdb9e5b6b9098e94c249ba9cebfae125643329c8636768edcd3"}, "downloads": -1, "filename": "logfury-0.1.2.tar.gz", "has_sig": true, "md5_digest": "b1bc3990bbb6c426e36bdb2d3da09e7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17222, "upload_time": "2016-10-30T00:07:43", "upload_time_iso_8601": "2016-10-30T00:07:43.475468Z", "url": "https://files.pythonhosted.org/packages/e2/a0/66a7b78e1800af85e54701490cf8764cc6de6c0725d18b10a6fb13ce4d2d/logfury-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f189f6d0d2ea774382f3e566d4896eb2", "sha256": "e0ce7f95bab6e5b2fd835b3d8ff5e226704476671d15340a99b00285f4c2d1fc"}, "downloads": -1, "filename": "logfury-0.1.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f189f6d0d2ea774382f3e566d4896eb2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12440, "upload_time": "2016-10-09T22:53:05", "upload_time_iso_8601": "2016-10-09T22:53:05.005176Z", "url": "https://files.pythonhosted.org/packages/55/71/c70df1ef41721b554c91982ebde423a5cf594261aa5132e39ade9196fa3b/logfury-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1bc3990bbb6c426e36bdb2d3da09e7d", "sha256": "42da58fbbd4e6fdb9e5b6b9098e94c249ba9cebfae125643329c8636768edcd3"}, "downloads": -1, "filename": "logfury-0.1.2.tar.gz", "has_sig": true, "md5_digest": "b1bc3990bbb6c426e36bdb2d3da09e7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17222, "upload_time": "2016-10-30T00:07:43", "upload_time_iso_8601": "2016-10-30T00:07:43.475468Z", "url": "https://files.pythonhosted.org/packages/e2/a0/66a7b78e1800af85e54701490cf8764cc6de6c0725d18b10a6fb13ce4d2d/logfury-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:21 2020"}