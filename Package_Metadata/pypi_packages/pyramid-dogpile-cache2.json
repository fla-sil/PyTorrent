{"info": {"author": "Zeit Online", "author_email": "zon-backend@zeit.de", "bugtrack_url": null, "classifiers": ["Environment :: Plugins", "Framework :: Paste", "Framework :: Pyramid", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "======================\npyramid_dogpile_cache2\n======================\n\n.. image:: https://travis-ci.org/ZeitOnline/pyramid_dogpile_cache2.png\n   :target: https://travis-ci.org/ZeitOnline/pyramid_dogpile_cache2\n\nSmall `dogpile.cache`_ configuration and access package. It is inspired by\n`pyramid_dogpile_cache`_, which we found unusable since it insists on\nconfiguring the cache regions in its ``get_region()`` API -- but if you want to\nuse the ``@cache_on_arguments`` decorator, that is at **import time**, where no\nconfiguration exists yet. Our package wants to perform the configuration during\nthe WSGI application setup instead.\n\nThis package is compatible with Python version 2.7 and 3 (>=3.4).\n\n.. _`dogpile.cache`: https://pypi.python.org/pypi/dogpile.cache\n.. _`pyramid_dogpile_cache`: https://pypi.python.org/pypi/pyramid_dogpile_cache\n\n\nUsage\n=====\n\nThe package offers only one API function; it returns a dogpile.cache\n``CacheRegion``::\n\n    from pyramid_dogpile_cache import get_region\n    region = get_region('foo')\n\nAs said above, this is safe to call at import time, so you can go on like this::\n\n    @region.cache_on_arguments()\n    def expensive_function(one, two, three):\n        # compute stuff\n\n\nSetup / Pyramid\n===============\n\nInclude the package, either in code::\n\n    config = Configurator(...)\n    config.include('pyramid_dogpile_cache2')\n\nor in the ini file::\n\n    pyramid.includes = pyramid_dogpile_cache2\n\n\nSetup / Paste\n=============\n\nFor non-Pyramid WSGI applications that use a paste.ini file, you need to call::\n\n    def my_paste_app_factory(global_conf, **local_conf):\n        pyramid_dogpile_cache2.configure_dogpile_cache(local_conf)\n        return my_wsgi_callable\n\n\nSettings\n========\n\nThe settings support of pyramid_dogpile_cache unfortunately is quite incomplete\n(e.g. it does not even convert ``expiration_time`` to ``int``). The support of\nthis packages is a little better, but still very much incomplete: we support\nthe in-memory and memcached backends (pylibmc to be precise), and only the same\nbackend and configuration for all cache regions.\n\nThe following settings are supported:\n\n``dogpile_cache.regions``\n\n    A list of region names that should be configured (separated by either\n    spaces or commas).\n\n``dogpile_cache.backend``\n\n    The default backend for cache regions (e.g. ``'dogpile.cache.memory'``,\n    ``dogpile.cache.pylibmc``, etc.).\n\n``dogpile_cache.REGION.backend``\n\n   Backend for the given region.\n\n``dogpile_cache.expiration_time``\n\n    The default expiration time. Can be overridden for individual regions (in\n    seconds). Omit to set no expiration.\n\n``dogpile_cache.REGION.expiration_time``\n\n    The expiration time for the given cache region (in seconds).\n    If omitted, uses the global expiration_time setting.\n\n``dogpile_cache.arguments.*``\n\n    Defaults for backend arguments. Can be overridden for individual regions.\n\n``dogpile_cache.REGION.arguments.*``\n\n    Backend arguments for the given cache region.\n\nBackend arguments work only for strings, thus we support some custom treatment:\n\n``dogpile_cache.pylibmc_url``\n\n    A list of memcached servers, separated by ``;``.\n\n``dogpile_cache.pylibmc_behavior.*``\n\n    Set `pylibmc behaviours`_, see `coerce_memached_behaviors`_ for which\n    subkeys are supported.\n\n\n.. _`pylibmc behaviours`: http://sendapatch.se/projects/pylibmc/behaviors.html\n.. _`coerce_memached_behaviors`: https://github.com/bbangert/beaker/blob/master/beaker/util.py#L343\n\nNote: As opposed to pyramid_dogpile_cache we don't support overriding the\nkey_generator or key_mangler functions yet; we preconfigure them with enhanced\nversions of dogpile.cache that support non-ascii function arguments and\ngenerating cache keys for methods that include the class name.\n\n\n=====================================\nDeveloping pyramid_dogpile_cache2\n=====================================\n\n:Author:\n    `Zeit Online <zon-backend@zeit.de>`_\n\n:PyPI page:\n    https://pypi.python.org/pypi/pyramid_dogpile_cache2\n\n:Issues:\n    `report by e-mail <zon-backend@zeit.de>`_\n\n:Source code:\n    https://github.com/zeitonline/pyramid_dogpile_cache2\n\n:Current change log:\n    https://github.com/zeitonline/pyramid_dogpile_cache2/blob/master/CHANGES.txt\n\n\n=====================================\nChange log for pyramid_dogpile_cache2\n=====================================\n\n1.0.6 (2019-11-08)\n==================\n\n- Allow configuring no expiration time at all\n\n\n1.0.5 (2018-12-14)\n==================\n\n- Clarify Python-3 compatiblity (it's >=3.4, not _just_ 3.4)\n\n\n1.0.4 (2018-11-21)\n==================\n\n- Support caching functions with type annotations on Python 3\n  (see PR #5).\n\n\n1.0.3 (2017-02-14)\n==================\n\n- Fix packaging issue (see PR #2).\n\n\n1.0.2 (2016-08-01)\n==================\n\n- Update API compatibility to dogpile.cache-0.6.0.\n\n\n1.0.1 (2016-01-20)\n==================\n\n- Actually include the class name in the cache key for methods.\n\n\n1.0.0 (2016-01-19)\n==================\n\n- Initial release.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zeitonline/pyramid_dogpile_cache2", "keywords": "pyramid dogpile.cache", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pyramid-dogpile-cache2", "package_url": "https://pypi.org/project/pyramid-dogpile-cache2/", "platform": "", "project_url": "https://pypi.org/project/pyramid-dogpile-cache2/", "project_urls": {"Homepage": "https://github.com/zeitonline/pyramid_dogpile_cache2"}, "release_url": "https://pypi.org/project/pyramid-dogpile-cache2/1.0.6/", "requires_dist": null, "requires_python": "", "summary": "Integrates dogpile.cache for Pyramid", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pyramid-dogpile-cache2\">\n<h2>pyramid_dogpile_cache2</h2>\n<a href=\"https://travis-ci.org/ZeitOnline/pyramid_dogpile_cache2\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ZeitOnline/pyramid_dogpile_cache2.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fd34b05403c97c39b7e7c6afc1c220d196cd508/68747470733a2f2f7472617669732d63692e6f72672f5a6569744f6e6c696e652f707972616d69645f646f6770696c655f6361636865322e706e67\"></a>\n<p>Small <a href=\"https://pypi.python.org/pypi/dogpile.cache\" rel=\"nofollow\">dogpile.cache</a> configuration and access package. It is inspired by\n<a href=\"https://pypi.python.org/pypi/pyramid_dogpile_cache\" rel=\"nofollow\">pyramid_dogpile_cache</a>, which we found unusable since it insists on\nconfiguring the cache regions in its <tt>get_region()</tt> API \u2013 but if you want to\nuse the <tt>@cache_on_arguments</tt> decorator, that is at <strong>import time</strong>, where no\nconfiguration exists yet. Our package wants to perform the configuration during\nthe WSGI application setup instead.</p>\n<p>This package is compatible with Python version 2.7 and 3 (&gt;=3.4).</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>The package offers only one API function; it returns a dogpile.cache\n<tt>CacheRegion</tt>:</p>\n<pre>from pyramid_dogpile_cache import get_region\nregion = get_region('foo')\n</pre>\n<p>As said above, this is safe to call at import time, so you can go on like this:</p>\n<pre>@region.cache_on_arguments()\ndef expensive_function(one, two, three):\n    # compute stuff\n</pre>\n</div>\n<div id=\"setup-pyramid\">\n<h3>Setup / Pyramid</h3>\n<p>Include the package, either in code:</p>\n<pre>config = Configurator(...)\nconfig.include('pyramid_dogpile_cache2')\n</pre>\n<p>or in the ini file:</p>\n<pre>pyramid.includes = pyramid_dogpile_cache2\n</pre>\n</div>\n<div id=\"setup-paste\">\n<h3>Setup / Paste</h3>\n<p>For non-Pyramid WSGI applications that use a paste.ini file, you need to call:</p>\n<pre>def my_paste_app_factory(global_conf, **local_conf):\n    pyramid_dogpile_cache2.configure_dogpile_cache(local_conf)\n    return my_wsgi_callable\n</pre>\n</div>\n<div id=\"settings\">\n<h3>Settings</h3>\n<p>The settings support of pyramid_dogpile_cache unfortunately is quite incomplete\n(e.g. it does not even convert <tt>expiration_time</tt> to <tt>int</tt>). The support of\nthis packages is a little better, but still very much incomplete: we support\nthe in-memory and memcached backends (pylibmc to be precise), and only the same\nbackend and configuration for all cache regions.</p>\n<p>The following settings are supported:</p>\n<p><tt>dogpile_cache.regions</tt></p>\n<blockquote>\nA list of region names that should be configured (separated by either\nspaces or commas).</blockquote>\n<p><tt>dogpile_cache.backend</tt></p>\n<blockquote>\nThe default backend for cache regions (e.g. <tt>'dogpile.cache.memory'</tt>,\n<tt>dogpile.cache.pylibmc</tt>, etc.).</blockquote>\n<p><tt>dogpile_cache.REGION.backend</tt></p>\n<blockquote>\nBackend for the given region.</blockquote>\n<p><tt>dogpile_cache.expiration_time</tt></p>\n<blockquote>\nThe default expiration time. Can be overridden for individual regions (in\nseconds). Omit to set no expiration.</blockquote>\n<p><tt>dogpile_cache.REGION.expiration_time</tt></p>\n<blockquote>\nThe expiration time for the given cache region (in seconds).\nIf omitted, uses the global expiration_time setting.</blockquote>\n<p><tt>dogpile_cache.arguments.*</tt></p>\n<blockquote>\nDefaults for backend arguments. Can be overridden for individual regions.</blockquote>\n<p><tt>dogpile_cache.REGION.arguments.*</tt></p>\n<blockquote>\nBackend arguments for the given cache region.</blockquote>\n<p>Backend arguments work only for strings, thus we support some custom treatment:</p>\n<p><tt>dogpile_cache.pylibmc_url</tt></p>\n<blockquote>\nA list of memcached servers, separated by <tt>;</tt>.</blockquote>\n<p><tt>dogpile_cache.pylibmc_behavior.*</tt></p>\n<blockquote>\nSet <a href=\"http://sendapatch.se/projects/pylibmc/behaviors.html\" rel=\"nofollow\">pylibmc behaviours</a>, see <a href=\"https://github.com/bbangert/beaker/blob/master/beaker/util.py#L343\" rel=\"nofollow\">coerce_memached_behaviors</a> for which\nsubkeys are supported.</blockquote>\n<p>Note: As opposed to pyramid_dogpile_cache we don\u2019t support overriding the\nkey_generator or key_mangler functions yet; we preconfigure them with enhanced\nversions of dogpile.cache that support non-ascii function arguments and\ngenerating cache keys for methods that include the class name.</p>\n</div>\n</div>\n<div id=\"developing-pyramid-dogpile-cache2\">\n<h2>Developing pyramid_dogpile_cache2</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th><td><a href=\"mailto:zon-backend%40zeit.de\">Zeit Online</a></td>\n</tr>\n<tr><th>PyPI page:</th><td><a href=\"https://pypi.python.org/pypi/pyramid_dogpile_cache2\" rel=\"nofollow\">https://pypi.python.org/pypi/pyramid_dogpile_cache2</a></td>\n</tr>\n<tr><th>Issues:</th><td><a href=\"mailto:zon-backend%40zeit.de\">report by e-mail</a></td>\n</tr>\n<tr><th>Source code:</th><td><a href=\"https://github.com/zeitonline/pyramid_dogpile_cache2\" rel=\"nofollow\">https://github.com/zeitonline/pyramid_dogpile_cache2</a></td>\n</tr>\n<tr><th>Current change log:</th></tr>\n<tr><td>\u00a0</td><td><a href=\"https://github.com/zeitonline/pyramid_dogpile_cache2/blob/master/CHANGES.txt\" rel=\"nofollow\">https://github.com/zeitonline/pyramid_dogpile_cache2/blob/master/CHANGES.txt</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"change-log-for-pyramid-dogpile-cache2\">\n<h2>Change log for pyramid_dogpile_cache2</h2>\n<div id=\"id1\">\n<h3>1.0.6 (2019-11-08)</h3>\n<ul>\n<li>Allow configuring no expiration time at all</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.5 (2018-12-14)</h3>\n<ul>\n<li>Clarify Python-3 compatiblity (it\u2019s &gt;=3.4, not _just_ 3.4)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.4 (2018-11-21)</h3>\n<ul>\n<li>Support caching functions with type annotations on Python 3\n(see PR #5).</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.3 (2017-02-14)</h3>\n<ul>\n<li>Fix packaging issue (see PR #2).</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0.2 (2016-08-01)</h3>\n<ul>\n<li>Update API compatibility to dogpile.cache-0.6.0.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.0.1 (2016-01-20)</h3>\n<ul>\n<li>Actually include the class name in the cache key for methods.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.0.0 (2016-01-19)</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6099256, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ecf82f50aa7190393829158a4e7fe0e5", "sha256": "42a1f2d97eba01326d8bd78211e43cd0d4c8180ff2988eb22f017d5aac1ea429"}, "downloads": -1, "filename": "pyramid_dogpile_cache2-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ecf82f50aa7190393829158a4e7fe0e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7085, "upload_time": "2016-01-19T15:35:58", "upload_time_iso_8601": "2016-01-19T15:35:58.998385Z", "url": "https://files.pythonhosted.org/packages/db/43/92517859dd77882234a2cc6232b194b7fdc1e592b50a450cbf285f7fe916/pyramid_dogpile_cache2-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8dd95c34fd7bc1527a41df05b89cd33b", "sha256": "1cd314fb5d1f755106fb7039812b059bba49aad8cb54b29486cd6e89c1262dc4"}, "downloads": -1, "filename": "pyramid_dogpile_cache2-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8dd95c34fd7bc1527a41df05b89cd33b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7258, "upload_time": "2016-01-20T11:19:44", "upload_time_iso_8601": "2016-01-20T11:19:44.850985Z", "url": "https://files.pythonhosted.org/packages/9a/d7/9027bdd27bfba2b5d0201803362c52631b7b3d4765245b1e0a65cbaaf737/pyramid_dogpile_cache2-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "c6af09a659937040560716515c11927a", "sha256": "560a1c1162dced1a82a214655590f07b12f36827db0a04c7e8a4af9bbb89be19"}, "downloads": -1, "filename": "pyramid_dogpile_cache2-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c6af09a659937040560716515c11927a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7481, "upload_time": "2016-08-01T07:01:12", "upload_time_iso_8601": "2016-08-01T07:01:12.142373Z", "url": "https://files.pythonhosted.org/packages/91/c4/ae75ab94b66c79c0e29e28828f25308d14d74b267631750948a886407f7d/pyramid_dogpile_cache2-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "89de1c10678a5671e3011ab543afc640", "sha256": "5a747ef0b505be06749ea53b6e8cc8d6f563ac35a70bffaee1b31e3e4eb5366b"}, "downloads": -1, "filename": "pyramid_dogpile_cache2-1.0.3.tar.gz", "has_sig": false, "md5_digest": "89de1c10678a5671e3011ab543afc640", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7489, "upload_time": "2017-02-14T07:44:08", "upload_time_iso_8601": "2017-02-14T07:44:08.109195Z", "url": "https://files.pythonhosted.org/packages/18/e0/391e0ac077683dd7b0c3096dfd05722974053a53dc91f938c7da44f601ff/pyramid_dogpile_cache2-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "f6550c55507c0f382d31a256e95f821f", "sha256": "48f0c19d012c1ff0323f35eeb8275f8f062769b544151c6e065dbb8872e8eba3"}, "downloads": -1, "filename": "pyramid_dogpile_cache2-1.0.4.tar.gz", "has_sig": false, "md5_digest": "f6550c55507c0f382d31a256e95f821f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9319, "upload_time": "2018-11-21T07:39:51", "upload_time_iso_8601": "2018-11-21T07:39:51.222687Z", "url": "https://files.pythonhosted.org/packages/5c/c4/c5b51a0ac03f6467b2f60dbce3fbd1e3b9f8e84fa041621183e7d4dbce25/pyramid_dogpile_cache2-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "d0875240b366a3900673fa40ff606968", "sha256": "7d66d214b878c5cc6e6a1cda8bc71f833d8ea654553759428fdf9abc2e7dd3ff"}, "downloads": -1, "filename": "pyramid_dogpile_cache2-1.0.5.tar.gz", "has_sig": false, "md5_digest": "d0875240b366a3900673fa40ff606968", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9379, "upload_time": "2018-12-14T12:33:30", "upload_time_iso_8601": "2018-12-14T12:33:30.464220Z", "url": "https://files.pythonhosted.org/packages/ca/32/11b733aa70721fcb5a47311636d5e6f6d41818ec7f4e8a53469182528642/pyramid_dogpile_cache2-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "b8a83ad6e68e6c5f11e34f1788ea24e1", "sha256": "d0375e127c386a7fbef08dbca0ae08ae84020395510f67d35ff912c58afe08d0"}, "downloads": -1, "filename": "pyramid_dogpile_cache2-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b8a83ad6e68e6c5f11e34f1788ea24e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8720, "upload_time": "2019-11-08T13:45:14", "upload_time_iso_8601": "2019-11-08T13:45:14.129394Z", "url": "https://files.pythonhosted.org/packages/2e/1a/1bf39eefe91877b806218035c9d416a18dc7b67fd71832cf77e5b1fd1d8b/pyramid_dogpile_cache2-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8a83ad6e68e6c5f11e34f1788ea24e1", "sha256": "d0375e127c386a7fbef08dbca0ae08ae84020395510f67d35ff912c58afe08d0"}, "downloads": -1, "filename": "pyramid_dogpile_cache2-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b8a83ad6e68e6c5f11e34f1788ea24e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8720, "upload_time": "2019-11-08T13:45:14", "upload_time_iso_8601": "2019-11-08T13:45:14.129394Z", "url": "https://files.pythonhosted.org/packages/2e/1a/1bf39eefe91877b806218035c9d416a18dc7b67fd71832cf77e5b1fd1d8b/pyramid_dogpile_cache2-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:29 2020"}