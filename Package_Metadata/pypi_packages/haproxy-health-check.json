{"info": {"author": "Samuele Kaplun", "author_email": "kaplun@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "haproxy-health-check\n===============================\n\nversion number: 0.0.1\nauthor: Samuele Kaplun\n\nOverview\n--------\n\nHAProxy Health Check for EXABGP\n\nInstallation / Usage\n--------------------\n\nTo install use pip:\n\n    $ pip install haproxy-health-check\n\n\nOr clone the repo:\n\n    $ git clone https://github.com/kaplun/haproxy-health-check.git\n    $ python setup.py install\n    \nExample\n-------\n\nUse e.g. inside an EXABGP configuration such as:\n\n    # Check if the service is available to announce a route to\n    # it. Since the purpose is high availability, it is expected\n    # that another host is present with a similar\n    # configuration. IP address for the service is expected to be\n    # configured on the loopback interface. You can run the\n    # healthcheck process manually to check if it works as\n    # expected (-h flag will give you available options)\n\n    process service-haproxy {\n        run python -m exabgp healthcheck -s --name haproxy --cmd \"haproxy-health-check\" --start-ip 0;\n        encoder text;\n    }\n\n    neighbor 10.0.0.3 {\n        description \"will announce a route to a service\";\n        router-id 198.111.227.39;\n        local-address 10.0.0.2;\n        local-as 65533;\n        peer-as 65533;\n\n        api services {\n            processes [ service-haproxy ];\n        }\n    }", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/kaplun/haproxy-health-check/tarball/0.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaplun/haproxy-health-check", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "haproxy-health-check", "package_url": "https://pypi.org/project/haproxy-health-check/", "platform": "", "project_url": "https://pypi.org/project/haproxy-health-check/", "project_urls": {"Download": "https://github.com/kaplun/haproxy-health-check/tarball/0.0.1", "Homepage": "https://github.com/kaplun/haproxy-health-check"}, "release_url": "https://pypi.org/project/haproxy-health-check/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "HAProxy Health Check for EXABGP", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            haproxy-health-check<br>===============================<br><br>version number: 0.0.1<br>author: Samuele Kaplun<br><br>Overview<br>--------<br><br>HAProxy Health Check for EXABGP<br><br>Installation / Usage<br>--------------------<br><br>To install use pip:<br><br>    $ pip install haproxy-health-check<br><br><br>Or clone the repo:<br><br>    $ git clone https://github.com/kaplun/haproxy-health-check.git<br>    $ python setup.py install<br>    <br>Example<br>-------<br><br>Use e.g. inside an EXABGP configuration such as:<br><br>    # Check if the service is available to announce a route to<br>    # it. Since the purpose is high availability, it is expected<br>    # that another host is present with a similar<br>    # configuration. IP address for the service is expected to be<br>    # configured on the loopback interface. You can run the<br>    # healthcheck process manually to check if it works as<br>    # expected (-h flag will give you available options)<br><br>    process service-haproxy {<br>        run python -m exabgp healthcheck -s --name haproxy --cmd \"haproxy-health-check\" --start-ip 0;<br>        encoder text;<br>    }<br><br>    neighbor 10.0.0.3 {<br>        description \"will announce a route to a service\";<br>        router-id 198.111.227.39;<br>        local-address 10.0.0.2;<br>        local-as 65533;<br>        peer-as 65533;<br><br>        api services {<br>            processes [ service-haproxy ];<br>        }<br>    }\n          </div>"}, "last_serial": 3617655, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0c3e2665bfe83e6266a81a8568b92188", "sha256": "be717dc072ebc79fc9bd7ea030c3069a5d73b731e88e444826fc239a85218f3c"}, "downloads": -1, "filename": "haproxy-health-check-0.0.1.tar.gz", "has_sig": true, "md5_digest": "0c3e2665bfe83e6266a81a8568b92188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3788, "upload_time": "2018-02-26T15:17:52", "upload_time_iso_8601": "2018-02-26T15:17:52.697222Z", "url": "https://files.pythonhosted.org/packages/05/1a/70ce886df540f69c33fed3391bb21e77e57317b4673da262a6104b466ae9/haproxy-health-check-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c3e2665bfe83e6266a81a8568b92188", "sha256": "be717dc072ebc79fc9bd7ea030c3069a5d73b731e88e444826fc239a85218f3c"}, "downloads": -1, "filename": "haproxy-health-check-0.0.1.tar.gz", "has_sig": true, "md5_digest": "0c3e2665bfe83e6266a81a8568b92188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3788, "upload_time": "2018-02-26T15:17:52", "upload_time_iso_8601": "2018-02-26T15:17:52.697222Z", "url": "https://files.pythonhosted.org/packages/05/1a/70ce886df540f69c33fed3391bb21e77e57317b4673da262a6104b466ae9/haproxy-health-check-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:30 2020"}