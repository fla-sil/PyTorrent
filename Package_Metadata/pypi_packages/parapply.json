{"info": {"author": "Tan Nian Wei", "author_email": "tannianwei@aggienetwork.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Parapply\n\nA simple drop-in replacement for parallelized pandas `apply()` on large Series / DataFrames, using `joblib`. Works by dividing the Series / DataFrame into multiple chunks and running `apply` concurrently. As a rule of thumb, use `parapply` only if you have 10 million rows and above (see benchmark below).\n\nInstall by running `pip install parapply`. Requires `joblib`, `numpy`, and `pandas` (obviously!)\n\n## Simple Usage\n\nSeries: `parapply(srs, fun)` instead of `srs.apply(fun)`\nDataFrames: `parapply(df, fun, axis)` instead of `df.apply(fun, axis)`\n\nFor more fine grain control:\n    + `n_jobs` to decide number of concurrent jobs, \n    + `n_chunks` for number of chunks to split the Series / DataFrame\n\nExamples:\n\n```\nimport pandas as pd\nimport numpy as np\nfrom parapply import parapply\n\n# Series example\nnp.random.seed(0)\nsrs = pd.Series(np.random.random(size=(5, )))\npd_apply_result = srs.apply(lambda x: x ** 2)\nparapply_result = parapply(srs, lambda x: x ** 2)\nprint(pd_apply_result)\n\n# 0    0.301196\n# 1    0.511496\n# 2    0.363324\n# 3    0.296898\n# 4    0.179483\n# dtype: float64\n\nprint(parapply_result)\n\n# 0    0.301196\n# 1    0.511496\n# 2    0.363324\n# 3    0.296898\n# 4    0.179483\n# dtype: float64\n\n# DataFrame example with axis = 1\nnp.random.seed(1)\ndf = pd.DataFrame(data={\n    'a': np.random.random(size=(5, )),\n    'b': np.random.random(size=(5, )),\n    'c': np.random.random(size=(5, )),\n})\n\npd_apply_result = df.apply(sum, axis=1)\nparapply_result = parapply(df, sum, axis=1)\nprint(pd_apply_result)\n\n# 0    0.928555\n# 1    1.591804\n# 2    0.550127\n# 3    1.577217\n# 4    0.712960\n# dtype: float64\n\nprint(parapply_result)\n\n# 0    0.928555\n# 1    1.591804\n# 2    0.550127\n# 3    1.577217\n# 4    0.712960\n# dtype: float64\n```\nRefer to docstrings for more information.\n\n## Quick and dirty benchmarks\n\nRan a quick and dirty benchmark to compare time taken to apply `lambda x:x ** 2` to Series of varying length using pandas `apply` and `parapply` on multiple `n_jobs` settings:\n\n![Runtime vs log(num data points)](docs/results_logx.png)\n\nThis semilog plot above shows that significant runtime differences between pandas `apply` and `parapply` show up at 10 million data points and onwards. \n\n\n## Acknowledgements\n\nThanks to @aaronlhe for introducing me to the world of unit tests!\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tnwei/parapply", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "parapply", "package_url": "https://pypi.org/project/parapply/", "platform": "", "project_url": "https://pypi.org/project/parapply/", "project_urls": {"Homepage": "https://github.com/tnwei/parapply"}, "release_url": "https://pypi.org/project/parapply/0.0.2/", "requires_dist": ["numpy", "pandas", "joblib"], "requires_python": ">=3.5", "summary": "A simple drop-in replacement for parallelized pandas `apply`", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Parapply</h1>\n<p>A simple drop-in replacement for parallelized pandas <code>apply()</code> on large Series / DataFrames, using <code>joblib</code>. Works by dividing the Series / DataFrame into multiple chunks and running <code>apply</code> concurrently. As a rule of thumb, use <code>parapply</code> only if you have 10 million rows and above (see benchmark below).</p>\n<p>Install by running <code>pip install parapply</code>. Requires <code>joblib</code>, <code>numpy</code>, and <code>pandas</code> (obviously!)</p>\n<h2>Simple Usage</h2>\n<p>Series: <code>parapply(srs, fun)</code> instead of <code>srs.apply(fun)</code>\nDataFrames: <code>parapply(df, fun, axis)</code> instead of <code>df.apply(fun, axis)</code></p>\n<p>For more fine grain control:\n+ <code>n_jobs</code> to decide number of concurrent jobs,\n+ <code>n_chunks</code> for number of chunks to split the Series / DataFrame</p>\n<p>Examples:</p>\n<pre><code>import pandas as pd\nimport numpy as np\nfrom parapply import parapply\n\n# Series example\nnp.random.seed(0)\nsrs = pd.Series(np.random.random(size=(5, )))\npd_apply_result = srs.apply(lambda x: x ** 2)\nparapply_result = parapply(srs, lambda x: x ** 2)\nprint(pd_apply_result)\n\n# 0    0.301196\n# 1    0.511496\n# 2    0.363324\n# 3    0.296898\n# 4    0.179483\n# dtype: float64\n\nprint(parapply_result)\n\n# 0    0.301196\n# 1    0.511496\n# 2    0.363324\n# 3    0.296898\n# 4    0.179483\n# dtype: float64\n\n# DataFrame example with axis = 1\nnp.random.seed(1)\ndf = pd.DataFrame(data={\n    'a': np.random.random(size=(5, )),\n    'b': np.random.random(size=(5, )),\n    'c': np.random.random(size=(5, )),\n})\n\npd_apply_result = df.apply(sum, axis=1)\nparapply_result = parapply(df, sum, axis=1)\nprint(pd_apply_result)\n\n# 0    0.928555\n# 1    1.591804\n# 2    0.550127\n# 3    1.577217\n# 4    0.712960\n# dtype: float64\n\nprint(parapply_result)\n\n# 0    0.928555\n# 1    1.591804\n# 2    0.550127\n# 3    1.577217\n# 4    0.712960\n# dtype: float64\n</code></pre>\n<p>Refer to docstrings for more information.</p>\n<h2>Quick and dirty benchmarks</h2>\n<p>Ran a quick and dirty benchmark to compare time taken to apply <code>lambda x:x ** 2</code> to Series of varying length using pandas <code>apply</code> and <code>parapply</code> on multiple <code>n_jobs</code> settings:</p>\n<p><img alt=\"Runtime vs log(num data points)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2ed647fc55c8ab10b72d3882d6642e60345e706/646f63732f726573756c74735f6c6f67782e706e67\"></p>\n<p>This semilog plot above shows that significant runtime differences between pandas <code>apply</code> and <code>parapply</code> show up at 10 million data points and onwards.</p>\n<h2>Acknowledgements</h2>\n<p>Thanks to @aaronlhe for introducing me to the world of unit tests!</p>\n\n          </div>"}, "last_serial": 6514767, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7dc45bc990c1a88bd1974b6c02a01ed9", "sha256": "c5ce4323493748e85feff6b4b451b1b0994d2c9ae1dce96a0e2ea5e3dbe4406a"}, "downloads": -1, "filename": "parapply-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7dc45bc990c1a88bd1974b6c02a01ed9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6049, "upload_time": "2019-11-16T16:46:18", "upload_time_iso_8601": "2019-11-16T16:46:18.526285Z", "url": "https://files.pythonhosted.org/packages/e7/67/15c78489da57c7a2bf150b0dc0780e435d0a89504cd28be98884b6f1b2f3/parapply-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f0d40de110600f2756315ce92913434", "sha256": "cd3d8bc650804831365c0cdfb9a0769ec4fb601ff83f5d4766acac4a33c85914"}, "downloads": -1, "filename": "parapply-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7f0d40de110600f2756315ce92913434", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4262, "upload_time": "2019-11-16T16:46:20", "upload_time_iso_8601": "2019-11-16T16:46:20.967741Z", "url": "https://files.pythonhosted.org/packages/02/23/027fe468e0bbc31179fff46c9646f00a92480d86e088268ae3b3e256c010/parapply-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8438d25cc14a1a45a653b3ca6dc5baea", "sha256": "cb7680ce72f7a4d8acd0979cc4015ee1b7292ef86f3839816ec642c637dbec98"}, "downloads": -1, "filename": "parapply-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8438d25cc14a1a45a653b3ca6dc5baea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6773, "upload_time": "2020-01-24T16:47:52", "upload_time_iso_8601": "2020-01-24T16:47:52.277231Z", "url": "https://files.pythonhosted.org/packages/e5/a6/499ac82a880b740145d200b98b4ff7ee74f51aafb55c712c4be9db581eb6/parapply-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f57b186b73a6d4527db2ffb96716c780", "sha256": "090dd8db2bd6817c8ddad717a95726199a48f33ba245ef10b69d86c6b5bb3c26"}, "downloads": -1, "filename": "parapply-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f57b186b73a6d4527db2ffb96716c780", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4824, "upload_time": "2020-01-24T16:47:54", "upload_time_iso_8601": "2020-01-24T16:47:54.232249Z", "url": "https://files.pythonhosted.org/packages/57/f9/13f826a1255476c4ad49098dfd2c8d194da7063d93dea799b15385fc2e12/parapply-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8438d25cc14a1a45a653b3ca6dc5baea", "sha256": "cb7680ce72f7a4d8acd0979cc4015ee1b7292ef86f3839816ec642c637dbec98"}, "downloads": -1, "filename": "parapply-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8438d25cc14a1a45a653b3ca6dc5baea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6773, "upload_time": "2020-01-24T16:47:52", "upload_time_iso_8601": "2020-01-24T16:47:52.277231Z", "url": "https://files.pythonhosted.org/packages/e5/a6/499ac82a880b740145d200b98b4ff7ee74f51aafb55c712c4be9db581eb6/parapply-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f57b186b73a6d4527db2ffb96716c780", "sha256": "090dd8db2bd6817c8ddad717a95726199a48f33ba245ef10b69d86c6b5bb3c26"}, "downloads": -1, "filename": "parapply-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f57b186b73a6d4527db2ffb96716c780", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4824, "upload_time": "2020-01-24T16:47:54", "upload_time_iso_8601": "2020-01-24T16:47:54.232249Z", "url": "https://files.pythonhosted.org/packages/57/f9/13f826a1255476c4ad49098dfd2c8d194da7063d93dea799b15385fc2e12/parapply-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:30 2020"}