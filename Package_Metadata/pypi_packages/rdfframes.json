{"info": {"author": "Aisha Mohamed, Zoi Kaoudi, Ghadeer Abuoda, Abdurrahman Ghanem", "author_email": "ahmohamed@qf.org.qa, zkaoudi@hbku.edu.qa, gabuoda@hbku.edu.qa, abghanem@hbku.edu.qa", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# RDFframes\n\n\nA Python library that enables data scientists to extract data from knowledge graphs encoded in [RDF](https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/) into familiar tabular formats using familiar procedural Python abstractions.\nRDFframes provides an easy-to-use, efficient, and scalable API for users who are familiar with the PyData (Python for Data) ecosystem but are not experts in [SPARQL](https://www.w3.org/TR/sparql11-query/).\nThe API calls are internally converted into optimized SPARQL queries, which are then executed on a local RDF engine or a remote SPARQL endpoint.\nThe results are returned in tabular format, such as a pandas dataframe.\n\n## Installation via ``pip``\n\n\nYou can directly install the library via pip by using:\n\n```\n $ pip install RDFframes\n```   \n## Getting started\n\nFirst create a ``KnowledgeGraph`` to specify any namespaces that will be used in the query and optionally the graph name and URI.\nFor example:\n```python\ngraph = KnowledgeGraph(prefixes={\n                               \"swrc\": \"http://swrc.ontoware.org/ontology#\",\n                               \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n                               \"dc\": \"http://purl.org/dc/elements/1.1/\",\n                           })\n```\n\nThen create a ``Dataset`` using one of our convenience functions. All the convenience functions are methods in the\n```KnowledgeGraph``` class. \nFor example, the following code retrieves all instances of the class ``swrc:InProceedings``:\n\n```python\ndataset = graph.entities(class_name='swrc:InProceedings',\n                             new_dataset_name='papers',\n                             entities_col_name='paper')\n```\n\nThere are two types of datasets: ``ExpandableDataset`` and ``GroupedDataset``. \nAn ``ExpandableDataset`` represents a simple flat table, while a ``GroupedDataset`` is a table split into groups as a result of a group-by operation.\nThe convenience functions on the ``KnowledgeGraph`` return an ``ExpandableDataset``.\n\nAfter instantiating a dataset, you can use the API to perform operations on it. \nFor example, the following code retrieves all authors and titles of conference papers:\n```python\ndataset = dataset.expand(src_col_name='paper', predicate_list=[\n        RDFPredicate('dc:title', 'title'),\n        RDFPredicate('dc:creator', 'author'),\n        RDFPredicate('swrc:series', 'conference')])\\\n```\n\nUsing the ``group_by`` operation results in a ``GroupedDataset``:\n```python\ngrouped_dataset = dataset.group_by(['author'])\n```\n\nAggregation can be done in both an ``ExpandableDataset`` and ``GroupedDataset``.\nFor example, the following code counts the number of papers per author and keeps only the authors that have more than 20 papers:\n```python\ngrouped_dataset = grouped_dataset.count(aggregation_fn_data=[AggregationData('paper', 'papers_count')])\\\n        .filter(conditions_dict={'papers_count': ['>= 20']})\n```\n\n## Convenience Functions to create an initial dataset\n\nTo create an initial ```Dataset```, you need to use one of the convenience functions. The API \nprovides convenience functions that can be used by most of the machine learning and data analytics tasks including:\n\n```python\nKnowledgeGraph.classes_and_freq()\n```\nThis function retrieves all the classes in the graph and all the number of instances of each class.\nIt returns a table of two columns, the first one contains the name of the class and the second one\ncontains the name of the frequency of the clases.\n```python\nKnowledgeGraph.features_and_freq(class_name)\n```\nRetrieves all the features of the instances of the class ```class_name``` and how many instances have each features.\nThis is critical for many machine learning tasks as knowing how many observed features of entities helps us decide \non which features to use for.\n```python\nKnowledgeGraph.entities(class_name)\n```\nRetrieves all the instances of the class ```class_name```. This is the starting point for most machine \nlearning models. The return dataset contains one column of the entities of the specified class and can be\nexpanded to add features of the instances.\n```python\nKnowledgeGraph.features(class_name)\n```\nRetrieves all the features of the class ```class_name```. This function can be used to explore the dataset and learn\nwhat features are available in the data for a specific class.\n```python\nKnowledgeGraph.entities_and_features(class_name, features, )\n```\nRetrieves all instances of the class ```class_name``` and the features of the instances specified in the list \n```features```.\n```python\nKnowledgeGraph.num_entities(class_name)\n```\nReturns the number of instances of the class ```class_name``` in the dataset.\n```python\nKnowledgeGraph.feature_domain_range(feature)\n```\nReturieves the domain (subjects) and the range (objects) of the predicate ```feature``` occuring in the dataset.\n```python\nKnowledgeGraph.describe_entity(entity)\n```\nReturns the class and features of the entity.\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/qcri/RDFframes", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rdfframes", "package_url": "https://pypi.org/project/rdfframes/", "platform": "", "project_url": "https://pypi.org/project/rdfframes/", "project_urls": {"Homepage": "https://github.com/qcri/RDFframes"}, "release_url": "https://pypi.org/project/rdfframes/0.9.1/", "requires_dist": null, "requires_python": "", "summary": "Exposes RDF datasets from sparql endpoints for machine learning models in convenient formats like pandas dataframe", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RDFframes</h1>\n<p>A Python library that enables data scientists to extract data from knowledge graphs encoded in <a href=\"https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/\" rel=\"nofollow\">RDF</a> into familiar tabular formats using familiar procedural Python abstractions.\nRDFframes provides an easy-to-use, efficient, and scalable API for users who are familiar with the PyData (Python for Data) ecosystem but are not experts in <a href=\"https://www.w3.org/TR/sparql11-query/\" rel=\"nofollow\">SPARQL</a>.\nThe API calls are internally converted into optimized SPARQL queries, which are then executed on a local RDF engine or a remote SPARQL endpoint.\nThe results are returned in tabular format, such as a pandas dataframe.</p>\n<h2>Installation via <code>pip</code></h2>\n<p>You can directly install the library via pip by using:</p>\n<pre><code> $ pip install RDFframes\n</code></pre>\n<h2>Getting started</h2>\n<p>First create a <code>KnowledgeGraph</code> to specify any namespaces that will be used in the query and optionally the graph name and URI.\nFor example:</p>\n<pre><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">KnowledgeGraph</span><span class=\"p\">(</span><span class=\"n\">prefixes</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                               <span class=\"s2\">\"swrc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://swrc.ontoware.org/ontology#\"</span><span class=\"p\">,</span>\n                               <span class=\"s2\">\"rdf\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"</span><span class=\"p\">,</span>\n                               <span class=\"s2\">\"dc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://purl.org/dc/elements/1.1/\"</span><span class=\"p\">,</span>\n                           <span class=\"p\">})</span>\n</pre>\n<p>Then create a <code>Dataset</code> using one of our convenience functions. All the convenience functions are methods in the\n<code>KnowledgeGraph</code> class.\nFor example, the following code retrieves all instances of the class <code>swrc:InProceedings</code>:</p>\n<pre><span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"p\">(</span><span class=\"n\">class_name</span><span class=\"o\">=</span><span class=\"s1\">'swrc:InProceedings'</span><span class=\"p\">,</span>\n                             <span class=\"n\">new_dataset_name</span><span class=\"o\">=</span><span class=\"s1\">'papers'</span><span class=\"p\">,</span>\n                             <span class=\"n\">entities_col_name</span><span class=\"o\">=</span><span class=\"s1\">'paper'</span><span class=\"p\">)</span>\n</pre>\n<p>There are two types of datasets: <code>ExpandableDataset</code> and <code>GroupedDataset</code>.\nAn <code>ExpandableDataset</code> represents a simple flat table, while a <code>GroupedDataset</code> is a table split into groups as a result of a group-by operation.\nThe convenience functions on the <code>KnowledgeGraph</code> return an <code>ExpandableDataset</code>.</p>\n<p>After instantiating a dataset, you can use the API to perform operations on it.\nFor example, the following code retrieves all authors and titles of conference papers:</p>\n<pre><span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">src_col_name</span><span class=\"o\">=</span><span class=\"s1\">'paper'</span><span class=\"p\">,</span> <span class=\"n\">predicate_list</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">RDFPredicate</span><span class=\"p\">(</span><span class=\"s1\">'dc:title'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">),</span>\n        <span class=\"n\">RDFPredicate</span><span class=\"p\">(</span><span class=\"s1\">'dc:creator'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">),</span>\n        <span class=\"n\">RDFPredicate</span><span class=\"p\">(</span><span class=\"s1\">'swrc:series'</span><span class=\"p\">,</span> <span class=\"s1\">'conference'</span><span class=\"p\">)])</span>\\\n</pre>\n<p>Using the <code>group_by</code> operation results in a <code>GroupedDataset</code>:</p>\n<pre><span class=\"n\">grouped_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">([</span><span class=\"s1\">'author'</span><span class=\"p\">])</span>\n</pre>\n<p>Aggregation can be done in both an <code>ExpandableDataset</code> and <code>GroupedDataset</code>.\nFor example, the following code counts the number of papers per author and keeps only the authors that have more than 20 papers:</p>\n<pre><span class=\"n\">grouped_dataset</span> <span class=\"o\">=</span> <span class=\"n\">grouped_dataset</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">aggregation_fn_data</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">AggregationData</span><span class=\"p\">(</span><span class=\"s1\">'paper'</span><span class=\"p\">,</span> <span class=\"s1\">'papers_count'</span><span class=\"p\">)])</span>\\\n        <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">conditions_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'papers_count'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'&gt;= 20'</span><span class=\"p\">]})</span>\n</pre>\n<h2>Convenience Functions to create an initial dataset</h2>\n<p>To create an initial <code>Dataset</code>, you need to use one of the convenience functions. The API\nprovides convenience functions that can be used by most of the machine learning and data analytics tasks including:</p>\n<pre><span class=\"n\">KnowledgeGraph</span><span class=\"o\">.</span><span class=\"n\">classes_and_freq</span><span class=\"p\">()</span>\n</pre>\n<p>This function retrieves all the classes in the graph and all the number of instances of each class.\nIt returns a table of two columns, the first one contains the name of the class and the second one\ncontains the name of the frequency of the clases.</p>\n<pre><span class=\"n\">KnowledgeGraph</span><span class=\"o\">.</span><span class=\"n\">features_and_freq</span><span class=\"p\">(</span><span class=\"n\">class_name</span><span class=\"p\">)</span>\n</pre>\n<p>Retrieves all the features of the instances of the class <code>class_name</code> and how many instances have each features.\nThis is critical for many machine learning tasks as knowing how many observed features of entities helps us decide\non which features to use for.</p>\n<pre><span class=\"n\">KnowledgeGraph</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"p\">(</span><span class=\"n\">class_name</span><span class=\"p\">)</span>\n</pre>\n<p>Retrieves all the instances of the class <code>class_name</code>. This is the starting point for most machine\nlearning models. The return dataset contains one column of the entities of the specified class and can be\nexpanded to add features of the instances.</p>\n<pre><span class=\"n\">KnowledgeGraph</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"p\">(</span><span class=\"n\">class_name</span><span class=\"p\">)</span>\n</pre>\n<p>Retrieves all the features of the class <code>class_name</code>. This function can be used to explore the dataset and learn\nwhat features are available in the data for a specific class.</p>\n<pre><span class=\"n\">KnowledgeGraph</span><span class=\"o\">.</span><span class=\"n\">entities_and_features</span><span class=\"p\">(</span><span class=\"n\">class_name</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n</pre>\n<p>Retrieves all instances of the class <code>class_name</code> and the features of the instances specified in the list\n<code>features</code>.</p>\n<pre><span class=\"n\">KnowledgeGraph</span><span class=\"o\">.</span><span class=\"n\">num_entities</span><span class=\"p\">(</span><span class=\"n\">class_name</span><span class=\"p\">)</span>\n</pre>\n<p>Returns the number of instances of the class <code>class_name</code> in the dataset.</p>\n<pre><span class=\"n\">KnowledgeGraph</span><span class=\"o\">.</span><span class=\"n\">feature_domain_range</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"p\">)</span>\n</pre>\n<p>Returieves the domain (subjects) and the range (objects) of the predicate <code>feature</code> occuring in the dataset.</p>\n<pre><span class=\"n\">KnowledgeGraph</span><span class=\"o\">.</span><span class=\"n\">describe_entity</span><span class=\"p\">(</span><span class=\"n\">entity</span><span class=\"p\">)</span>\n</pre>\n<p>Returns the class and features of the entity.</p>\n\n          </div>"}, "last_serial": 7003531, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "e408c1ec7d6c9047b38300f5fbaf32c1", "sha256": "e4c1f6edfdfc57d89e137440aff765bcdfebb9f5257bd87907734a85019f5c91"}, "downloads": -1, "filename": "rdfframes-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e408c1ec7d6c9047b38300f5fbaf32c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7012, "upload_time": "2020-02-05T21:24:03", "upload_time_iso_8601": "2020-02-05T21:24:03.324233Z", "url": "https://files.pythonhosted.org/packages/48/63/7e3e388eeb8ac13480530b038181110236cf567e931ac67225ca8ad9d680/rdfframes-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2463ebb95d546e54ec2f7cd6dd0d8d47", "sha256": "00d37b652c366300bc2d0a56676af629c3f52872bbd8e10933f16c828269bf2f"}, "downloads": -1, "filename": "rdfframes-0.9.0.tar.gz", "has_sig": false, "md5_digest": "2463ebb95d546e54ec2f7cd6dd0d8d47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5804, "upload_time": "2020-02-05T21:24:05", "upload_time_iso_8601": "2020-02-05T21:24:05.913222Z", "url": "https://files.pythonhosted.org/packages/e6/a4/5851518c2af1d33e3312ac0e8a80e65e198aae0e58a0ed2f966021e3c803/rdfframes-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "e186d90b16c9a608fa3da4e70e5212eb", "sha256": "a0cbf2cee498b8207fa77b7ac4833fc826665dae81c214776ec76f15a5b9f146"}, "downloads": -1, "filename": "rdfframes-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e186d90b16c9a608fa3da4e70e5212eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 54640, "upload_time": "2020-04-12T08:31:35", "upload_time_iso_8601": "2020-04-12T08:31:35.285788Z", "url": "https://files.pythonhosted.org/packages/00/40/dc489ef7e9ff5e066a7aef587094aa9fe246b86d125b2d11e7f205ccf162/rdfframes-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a741432906f9e3abf711a43922e8a42a", "sha256": "78e4b5f96b330e1b9531995c4042899c12c18d538b6e6d97b35c9d9b75a8b93e"}, "downloads": -1, "filename": "rdfframes-0.9.1.tar.gz", "has_sig": false, "md5_digest": "a741432906f9e3abf711a43922e8a42a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33450, "upload_time": "2020-04-12T08:31:36", "upload_time_iso_8601": "2020-04-12T08:31:36.555492Z", "url": "https://files.pythonhosted.org/packages/44/c9/d282c2db81fd039648dd94b8679ad15bc4375d2470209eb765a476b56505/rdfframes-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e186d90b16c9a608fa3da4e70e5212eb", "sha256": "a0cbf2cee498b8207fa77b7ac4833fc826665dae81c214776ec76f15a5b9f146"}, "downloads": -1, "filename": "rdfframes-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e186d90b16c9a608fa3da4e70e5212eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 54640, "upload_time": "2020-04-12T08:31:35", "upload_time_iso_8601": "2020-04-12T08:31:35.285788Z", "url": "https://files.pythonhosted.org/packages/00/40/dc489ef7e9ff5e066a7aef587094aa9fe246b86d125b2d11e7f205ccf162/rdfframes-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a741432906f9e3abf711a43922e8a42a", "sha256": "78e4b5f96b330e1b9531995c4042899c12c18d538b6e6d97b35c9d9b75a8b93e"}, "downloads": -1, "filename": "rdfframes-0.9.1.tar.gz", "has_sig": false, "md5_digest": "a741432906f9e3abf711a43922e8a42a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33450, "upload_time": "2020-04-12T08:31:36", "upload_time_iso_8601": "2020-04-12T08:31:36.555492Z", "url": "https://files.pythonhosted.org/packages/44/c9/d282c2db81fd039648dd94b8679ad15bc4375d2470209eb765a476b56505/rdfframes-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:39 2020"}