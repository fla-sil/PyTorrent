{"info": {"author": "Mikhail Kolganov", "author_email": "mikhail.kolganov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Framework :: Scrapy", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Scrapy Sticky Meta\n==================\n\nHandy tools to maintain persistent meta values between requests in\nScrapy spiders. Available as spider middleware and spider callback\ndecorators.\n\nInstallation\n------------\n\n::\n\n    pip install stickymeta\n\nUsage\n-----\n\nAs spider middleware\n^^^^^^^^^^^^^^^^^^^^\n\nAdd middleware to ``settings.py``:\n\n::\n\n    SPIDER_MIDDLEWARES = {\n        ...\n        'stickymeta.StickyMetaMiddleware': 543,\n        ...\n    }\n\nand ``sticky_meta`` attribute containing persistent ``meta`` keys to\nspider:\n\n::\n\n    class TheSpider(scrapy.Spider):\n        name = 'thespider'\n        sticky_meta = ('cookiejar', 'foo', 'bar')\n\nAll values for the corresponding keys will be kept persistent between\nall the requests and responses.\n\nAs decorators\n^^^^^^^^^^^^^\n\n@stick\\_meta\n''''''''''''\n\n::\n\n    from stickymeta import stick_meta\n\nKeep persistent values for keys passed as decorator parameters:\n\n::\n\n    @stick_meta('a', 'b', 'c')\n    def parse(self, response):\n        ...\n        yield scrapy.Request(url)\n        \n\nis equivalent to:\n\n::\n\n    def parse(self, response)\n        ...\n        meta = {\n            'a': response.meta['a'],\n            'b': response.meta['b'],\n            'c': response.meta['c'],\n        }\n        yield scrapy.Request(url, meta=meta}\n        \n\n@stick\\_cj\n''''''''''\n\n::\n\n    from stickymeta import stick_cj\n\nShortcut for ``stick_meta`` handling ``cookiejar`` as default argument\nvalue, so\n\n::\n\n    @stick_cj('a', 'b', 'c')\n    def parse(self,response):\n        ...\n        \n\nis equivalent to\n\n::\n\n    @stick_meta('cookiejar', 'a', 'b', 'c')\n    def parse(self,response):\n        ...\n        \n\nSpider attribute ``sticky_meta`` also affects to decorators, next two\npieces of code will handle ``meta`` in the same way:\n\n::\n\n    class TheSpider(scrapy.Spider):\n        name = 'thespider'\n        sticky_meta = ('a', 'b', 'c')\n        \n        @stick_meta()\n        def parse(self, response):\n            ...\n            yield Request(url)\n            \n\nvs\n\n::\n\n    class TheSpider(scrapy.Spider):\n        name = 'thespider'\n        \n        @stick_meta('a', 'b', 'c')\n        def parse(self, response):\n            ...\n            yield Request(url)\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mizhgun/scrapy_stickymeta", "keywords": "scrapy", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "stickymeta", "package_url": "https://pypi.org/project/stickymeta/", "platform": "", "project_url": "https://pypi.org/project/stickymeta/", "project_urls": {"Homepage": "http://github.com/mizhgun/scrapy_stickymeta"}, "release_url": "https://pypi.org/project/stickymeta/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "Handy tools to maintain persistent meta values between requests in Scrapy spiders", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Handy tools to maintain persistent meta values between requests in\nScrapy spiders. Available as spider middleware and spider callback\ndecorators.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install stickymeta\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"as-spider-middleware\">\n<h3>As spider middleware</h3>\n<p>Add middleware to <tt>settings.py</tt>:</p>\n<pre>SPIDER_MIDDLEWARES = {\n    ...\n    'stickymeta.StickyMetaMiddleware': 543,\n    ...\n}\n</pre>\n<p>and <tt>sticky_meta</tt> attribute containing persistent <tt>meta</tt> keys to\nspider:</p>\n<pre>class TheSpider(scrapy.Spider):\n    name = 'thespider'\n    sticky_meta = ('cookiejar', 'foo', 'bar')\n</pre>\n<p>All values for the corresponding keys will be kept persistent between\nall the requests and responses.</p>\n</div>\n<div id=\"as-decorators\">\n<h3>As decorators</h3>\n<div id=\"stick-meta\">\n<h4>@stick_meta</h4>\n<pre>from stickymeta import stick_meta\n</pre>\n<p>Keep persistent values for keys passed as decorator parameters:</p>\n<pre>@stick_meta('a', 'b', 'c')\ndef parse(self, response):\n    ...\n    yield scrapy.Request(url)\n</pre>\n<p>is equivalent to:</p>\n<pre>def parse(self, response)\n    ...\n    meta = {\n        'a': response.meta['a'],\n        'b': response.meta['b'],\n        'c': response.meta['c'],\n    }\n    yield scrapy.Request(url, meta=meta}\n</pre>\n</div>\n<div id=\"stick-cj\">\n<h4>@stick_cj</h4>\n<pre>from stickymeta import stick_cj\n</pre>\n<p>Shortcut for <tt>stick_meta</tt> handling <tt>cookiejar</tt> as default argument\nvalue, so</p>\n<pre>@stick_cj('a', 'b', 'c')\ndef parse(self,response):\n    ...\n</pre>\n<p>is equivalent to</p>\n<pre>@stick_meta('cookiejar', 'a', 'b', 'c')\ndef parse(self,response):\n    ...\n</pre>\n<p>Spider attribute <tt>sticky_meta</tt> also affects to decorators, next two\npieces of code will handle <tt>meta</tt> in the same way:</p>\n<pre>class TheSpider(scrapy.Spider):\n    name = 'thespider'\n    sticky_meta = ('a', 'b', 'c')\n\n    @stick_meta()\n    def parse(self, response):\n        ...\n        yield Request(url)\n</pre>\n<p>vs</p>\n<pre>class TheSpider(scrapy.Spider):\n    name = 'thespider'\n\n    @stick_meta('a', 'b', 'c')\n    def parse(self, response):\n        ...\n        yield Request(url)\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2604324, "releases": {"0.0.3": [], "0.0.4": [{"comment_text": "", "digests": {"md5": "4d06da4f4fd48da3003dbd3adf4a938f", "sha256": "2927f214c1fd966eb08ef117bcedbcca8e36c72b7e362af9813c6e75402f385b"}, "downloads": -1, "filename": "stickymeta-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4d06da4f4fd48da3003dbd3adf4a938f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1206, "upload_time": "2017-01-28T23:51:38", "upload_time_iso_8601": "2017-01-28T23:51:38.476366Z", "url": "https://files.pythonhosted.org/packages/8a/d9/0890aaeec593efb308a9a1d187f0742fd131135870501e82a09691c05aa6/stickymeta-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "91efb3401fba630bd107fa169c214f11", "sha256": "5edda9545bf4b15ad93d1879b4c3ebd194d504810df2c9e132a428b69e2133cc"}, "downloads": -1, "filename": "stickymeta-0.0.5-py2-none-any.whl", "has_sig": false, "md5_digest": "91efb3401fba630bd107fa169c214f11", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5995, "upload_time": "2017-01-29T00:39:22", "upload_time_iso_8601": "2017-01-29T00:39:22.197600Z", "url": "https://files.pythonhosted.org/packages/6f/ad/5294c09bebba39ce581920d2b7a2b3fd589abe148274191a4b054fe7dde4/stickymeta-0.0.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3589b5cc88b3fe79d020bd789eead7a", "sha256": "505ca9d85cdf7b2aeccc06762d42584898d104b70a16927686e095380c7aa361"}, "downloads": -1, "filename": "stickymeta-0.0.5.tar.gz", "has_sig": false, "md5_digest": "d3589b5cc88b3fe79d020bd789eead7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2764, "upload_time": "2017-01-29T00:37:45", "upload_time_iso_8601": "2017-01-29T00:37:45.705094Z", "url": "https://files.pythonhosted.org/packages/f2/75/ec63f8f6d432f686342d21f87c8db4060476162251123fc1c277d58c5df2/stickymeta-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91efb3401fba630bd107fa169c214f11", "sha256": "5edda9545bf4b15ad93d1879b4c3ebd194d504810df2c9e132a428b69e2133cc"}, "downloads": -1, "filename": "stickymeta-0.0.5-py2-none-any.whl", "has_sig": false, "md5_digest": "91efb3401fba630bd107fa169c214f11", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5995, "upload_time": "2017-01-29T00:39:22", "upload_time_iso_8601": "2017-01-29T00:39:22.197600Z", "url": "https://files.pythonhosted.org/packages/6f/ad/5294c09bebba39ce581920d2b7a2b3fd589abe148274191a4b054fe7dde4/stickymeta-0.0.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3589b5cc88b3fe79d020bd789eead7a", "sha256": "505ca9d85cdf7b2aeccc06762d42584898d104b70a16927686e095380c7aa361"}, "downloads": -1, "filename": "stickymeta-0.0.5.tar.gz", "has_sig": false, "md5_digest": "d3589b5cc88b3fe79d020bd789eead7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2764, "upload_time": "2017-01-29T00:37:45", "upload_time_iso_8601": "2017-01-29T00:37:45.705094Z", "url": "https://files.pythonhosted.org/packages/f2/75/ec63f8f6d432f686342d21f87c8db4060476162251123fc1c277d58c5df2/stickymeta-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:56 2020"}